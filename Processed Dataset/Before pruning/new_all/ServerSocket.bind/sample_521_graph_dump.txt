Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void Acceptor(String host, int port) [ CD ]
Line_3 $$ public void Acceptor(String host, int port) -->Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)[ CD ]
Line_3 $$ public void Acceptor(String host, int port) -->Line_7 $$ serverSocket.bind(address)[ CD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_7 $$ serverSocket.bind(address)[ FD ]
Line_0 $$ Entry-->Line_11 $$ //1
public class func [ CD ]
Line_11 $$ //1
public class func -->Line_12 $$ public void keepOneInterface(InetAddress addr, int port) [ CD ]
Line_12 $$ public void keepOneInterface(InetAddress addr, int port) -->Line_13 $$ if (addr != null) [ CD ]
Line_13 $$ if (addr != null) -->Line_14 $$ server.bind(new InetSocketAddress(addr, port))[ CD ]
Line_13 $$ if (addr != null) -->Line_17 $$ server.bind(new InetSocketAddress(port))[ CD ]
Line_12 $$ public void keepOneInterface(InetAddress addr, int port) -->Line_19 $$ Keeper result = new Keeper(server, port)[ CD ]
Line_0 $$ Entry-->Line_23 $$ //2
public class func [ CD ]
Line_23 $$ //2
public class func -->Line_24 $$ public void listen(String hostname, int port, F2<Void, BufferedReader, DataOutputStream> protocol) [ CD ]
Line_24 $$ public void listen(String hostname, int port, F2<Void, BufferedReader, DataOutputStream> protocol) -->Line_25 $$ socket.bind(U.isEmpty(hostname) ? new InetSocketAddress(port) : new InetSocketAddress(hostname, port))[ CD ]
Line_24 $$ public void listen(String hostname, int port, F2<Void, BufferedReader, DataOutputStream> protocol) -->Line_26 $$ Log.info("Starting TCP/IP server", "host", hostname, "port", port)[ CD ]
Line_0 $$ Entry-->Line_30 $$ //3
public class func [ CD ]
Line_30 $$ //3
public class func -->Line_31 $$ public void test_isBound() [ CD ]
Line_31 $$ public void test_isBound() -->Line_32 $$ server.bind(new InetSocketAddress(InetAddress.getLocalHost(), 0))[ CD ]
Line_31 $$ public void test_isBound() -->Line_33 $$ InetSocketAddress boundAddress = new InetSocketAddress(server.getInetAddress(), server.getLocalPort())[ CD ]
Line_31 $$ public void test_isBound() -->Line_35 $$ client.connect(boundAddress)[ CD ]
Line_33 $$ InetSocketAddress boundAddress = new InetSocketAddress(server.getInetAddress(), server.getLocalPort())-->Line_35 $$ client.connect(boundAddress)[ FD ]
Line_31 $$ public void test_isBound() -->Line_36 $$ server.accept()[ CD ]
Line_0 $$ Entry-->Line_40 $$ //4
public class func [ CD ]
Line_40 $$ //4
public class func -->Line_41 $$ public void run() [ CD ]
Line_41 $$ public void run() -->Line_42 $$ if ((page.getStr("BIND") != null) && (page.getStr("BIND").trim().length() > 0))
    serverSocket.bind(new InetSocketAddress(InetAddress.getByName(page.getStr("BIND")), port));
else
    serverSocket.bind(new InetSocketAddress(port));[ CD ]
Line_42 $$ if ((page.getStr("BIND") != null) && (page.getStr("BIND").trim().length() > 0))
    serverSocket.bind(new InetSocketAddress(InetAddress.getByName(page.getStr("BIND")), port));
else
    serverSocket.bind(new InetSocketAddress(port));-->Line_43 $$ serverSocket.bind(new InetSocketAddress(InetAddress.getByName(page.getStr("BIND")), port))[ CD ]
Line_42 $$ if ((page.getStr("BIND") != null) && (page.getStr("BIND").trim().length() > 0))
    serverSocket.bind(new InetSocketAddress(InetAddress.getByName(page.getStr("BIND")), port));
else
    serverSocket.bind(new InetSocketAddress(port));-->Line_45 $$ serverSocket.bind(new InetSocketAddress(port))[ CD ]
Line_41 $$ public void run() -->Line_46 $$ Log.sysOut("Started " + name + " on port " + port)[ CD ]
Line_0 $$ Entry-->Line_50 $$ //5
public class func [ CD ]
Line_50 $$ //5
public class func -->Line_51 $$ public void main(String[] args) [ CD ]
Line_51 $$ public void main(String[] args) -->Line_52 $$ ss.bind(new InetSocketAddress(0))[ CD ]
Line_51 $$ public void main(String[] args) -->Line_53 $$ int localPort = ss.getLocalPort()[ CD ]
Line_53 $$ int localPort = ss.getLocalPort()-->Line_53 $$ ss.getLocalPort()[ CD ]
Line_51 $$ public void main(String[] args) -->Line_54 $$ SocketChannel channel = SocketChannel.open(new InetSocketAddress("localhost", localPort))[ CD ]
Line_54 $$ SocketChannel channel = SocketChannel.open(new InetSocketAddress("localhost", localPort))-->Line_54 $$ SocketChannel.open(new InetSocketAddress("localhost", localPort))[ CD ]
Line_0 $$ Entry-->Line_58 $$ //6
public class func [ CD ]
Line_58 $$ //6
public class func -->Line_59 $$ public void test_bindLjava_net_SocketAddress() [ CD ]
Line_59 $$ public void test_bindLjava_net_SocketAddress() -->Line_61 $$ theSocket.bind(theAddress)[ CD ]
Line_59 $$ public void test_bindLjava_net_SocketAddress() -->Line_62 $$ SocketAddress localAddress = theSocket.getLocalSocketAddress()[ CD ]
Line_62 $$ SocketAddress localAddress = theSocket.getLocalSocketAddress()-->Line_62 $$ theSocket.getLocalSocketAddress()[ CD ]
Line_59 $$ public void test_bindLjava_net_SocketAddress() -->Line_63 $$ theSocket2.bind(localAddress)[ CD ]
Line_62 $$ SocketAddress localAddress = theSocket.getLocalSocketAddress()-->Line_63 $$ theSocket2.bind(localAddress)[ FD ]
Line_0 $$ Entry-->Line_67 $$ //7
public class func [ CD ]
Line_67 $$ //7
public class func -->Line_68 $$ public void test_bindLjava_net_SocketAddressI() [ CD ]
Line_68 $$ public void test_bindLjava_net_SocketAddressI() -->Line_70 $$ theSocket.bind(theAddress, 5)[ CD ]
Line_68 $$ public void test_bindLjava_net_SocketAddressI() -->Line_71 $$ SocketAddress inuseAddress = theSocket.getLocalSocketAddress()[ CD ]
Line_71 $$ SocketAddress inuseAddress = theSocket.getLocalSocketAddress()-->Line_71 $$ theSocket.getLocalSocketAddress()[ CD ]
Line_68 $$ public void test_bindLjava_net_SocketAddressI() -->Line_72 $$ theSocket2.bind(inuseAddress, 5)[ CD ]
Line_71 $$ SocketAddress inuseAddress = theSocket.getLocalSocketAddress()-->Line_72 $$ theSocket2.bind(inuseAddress, 5)[ FD ]
Line_0 $$ Entry-->Line_76 $$ //8
public class func [ CD ]
Line_76 $$ //8
public class func -->Line_77 $$ public void connect(BusAddress address, int timeout) [ CD ]
Line_77 $$ public void connect(BusAddress address, int timeout) -->Line_78 $$ ss.bind(new InetSocketAddress(address.getParameter("host"), Integer.parseInt(address.getParameter("port"))))[ CD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_78 $$ address.getParameter("host")[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_78 $$ address.getParameter("port")[ FD ]
Line_77 $$ public void connect(BusAddress address, int timeout) -->Line_79 $$ ss.accept()[ CD ]
Line_77 $$ public void connect(BusAddress address, int timeout) -->Line_80 $$ s.connect(new InetSocketAddress(address.getParameter("host"), Integer.parseInt(address.getParameter("port"))))[ CD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_80 $$ address.getParameter("host")[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_80 $$ address.getParameter("port")[ FD ]
Line_77 $$ public void connect(BusAddress address, int timeout) -->Line_81 $$ s.getInputStream()[ CD ]
Line_77 $$ public void connect(BusAddress address, int timeout) -->Line_82 $$ s.getOutputStream()[ CD ]
Line_0 $$ Entry-->Line_86 $$ //9
public class func [ CD ]
Line_86 $$ //9
public class func -->Line_87 $$ public void validateHost(InetAddress host) [ CD ]
Line_87 $$ public void validateHost(InetAddress host) -->Line_88 $$ ss.bind(new InetSocketAddress(host, 0))[ CD ]
Line_87 $$ public void validateHost(InetAddress host) -->Line_90 $$ ss.accept()[ CD ]
Line_87 $$ public void validateHost(InetAddress host) -->Line_91 $$ if (s2 != null) [ CD ]
Line_87 $$ public void validateHost(InetAddress host) -->Line_98 $$ if (s1 != null) [ CD ]
Line_87 $$ public void validateHost(InetAddress host) -->Line_105 $$ if (ss != null) [ CD ]
Line_0 $$ Entry-->Line_115 $$ //10
public class func [ CD ]
Line_115 $$ //10
public class func -->Line_116 $$ public void testIsPortAvailableValidatesAddress() [ CD ]
Line_116 $$ public void testIsPortAvailableValidatesAddress() -->Line_117 $$ ss.bind(new InetSocketAddress(InetAddress.getLocalHost(), 0))[ CD ]
Line_116 $$ public void testIsPortAvailableValidatesAddress() -->Line_118 $$ int boundPort = ss.getLocalPort()[ CD ]
Line_118 $$ int boundPort = ss.getLocalPort()-->Line_118 $$ ss.getLocalPort()[ CD ]
Line_116 $$ public void testIsPortAvailableValidatesAddress() -->Line_119 $$ assertTrue(ss.isBound())[ CD ]
Line_116 $$ public void testIsPortAvailableValidatesAddress() -->Line_120 $$ assertNotEquals(boundPort, 0)[ CD ]
Line_118 $$ int boundPort = ss.getLocalPort()-->Line_120 $$ assertNotEquals(boundPort, 0)[ FD ]
Line_116 $$ public void testIsPortAvailableValidatesAddress() -->Line_121 $$ assertFalse(Networking.isPortAvailable(boundPort))[ CD ]
Line_118 $$ int boundPort = ss.getLocalPort()-->Line_121 $$ Networking.isPortAvailable(boundPort)[ FD ]
Line_116 $$ public void testIsPortAvailableValidatesAddress() -->Line_122 $$ ss.close()[ CD ]
Line_0 $$ Entry-->Line_126 $$ //11
public class func [ CD ]
Line_126 $$ //11
public class func -->Line_127 $$ public void main(String[] args) [ CD ]
Line_127 $$ public void main(String[] args) -->Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)[ CD ]
Line_127 $$ public void main(String[] args) -->Line_129 $$ sock.bind(s)[ CD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_129 $$ sock.bind(s)[ FD ]
Line_127 $$ public void main(String[] args) -->Line_130 $$ int port = sock.getLocalPort()[ CD ]
Line_130 $$ int port = sock.getLocalPort()-->Line_130 $$ sock.getLocalPort()[ CD ]
Line_127 $$ public void main(String[] args) -->Line_131 $$ sock.close()[ CD ]
Line_127 $$ public void main(String[] args) -->Line_132 $$ Endpoint.publish(address, new GreeterImpl(port))[ CD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_132 $$ Endpoint.publish(address, new GreeterImpl(port))[ FD ]
Line_0 $$ Entry-->Line_136 $$ //12
public class func [ CD ]
Line_136 $$ //12
public class func -->Line_137 $$ public void isLocalHostAddressReachable(String hostAddress, int port) [ CD ]
Line_137 $$ public void isLocalHostAddressReachable(String hostAddress, int port) -->Line_138 $$ serverSocket.bind(new InetSocketAddress(InetAddress.getByName(hostAddress), port))[ CD ]
Line_137 $$ public void isLocalHostAddressReachable(String hostAddress, int port) -->Line_139 $$ port = serverSocket.getLocalPort()[ CD ]
Line_139 $$ port = serverSocket.getLocalPort()-->Line_139 $$ port = serverSocket.getLocalPort()[ FD ]
Line_130 $$ int port = sock.getLocalPort()-->Line_139 $$ port = serverSocket.getLocalPort()[ FD ]
Line_139 $$ port = serverSocket.getLocalPort()-->Line_139 $$ serverSocket.getLocalPort()[ CD ]
Line_137 $$ public void isLocalHostAddressReachable(String hostAddress, int port) -->Line_140 $$ serverSocket.close()[ CD ]
Line_0 $$ Entry-->Line_144 $$ //13
public class func [ CD ]
Line_144 $$ //13
public class func -->Line_145 $$ public void getPort() [ CD ]
Line_145 $$ public void getPort() -->Line_146 $$ sock.bind(new InetSocketAddress(0))[ CD ]
Line_145 $$ public void getPort() -->Line_147 $$ int value = sock.getLocalPort()[ CD ]
Line_147 $$ int value = sock.getLocalPort()-->Line_147 $$ sock.getLocalPort()[ CD ]
Line_145 $$ public void getPort() -->Line_148 $$ sock.close()[ CD ]
Line_0 $$ Entry-->Line_152 $$ //14
public class func [ CD ]
Line_152 $$ //14
public class func -->Line_153 $$ public void checkPortIsFree(int port) [ CD ]
Line_153 $$ public void checkPortIsFree(int port) -->Line_154 $$ socket.bind(new InetSocketAddress("localhost", port))[ CD ]
Line_153 $$ public void checkPortIsFree(int port) -->Line_155 $$ int localPort = socket.getLocalPort()[ CD ]
Line_155 $$ int localPort = socket.getLocalPort()-->Line_155 $$ socket.getLocalPort()[ CD ]
Line_153 $$ public void checkPortIsFree(int port) -->Line_156 $$ socket.close()[ CD ]
Line_0 $$ Entry-->Line_160 $$ //15
public class func [ CD ]
Line_160 $$ //15
public class func -->Line_161 $$ public void setup() [ CD ]
Line_161 $$ public void setup() -->Line_162 $$ s.bind(new InetSocketAddress(0))[ CD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_162 $$ s.bind(new InetSocketAddress(0))[ FD ]
Line_161 $$ public void setup() -->Line_163 $$ s.getLocalPort()[ CD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_163 $$ s.getLocalPort()[ FD ]
Line_161 $$ public void setup() -->Line_164 $$ s.close()[ CD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_164 $$ s.close()[ FD ]
Line_0 $$ Entry-->Line_168 $$ //16
public class func [ CD ]
Line_168 $$ //16
public class func -->Line_169 $$ public void getPort() [ CD ]
Line_169 $$ public void getPort() -->Line_170 $$ sock.bind(new InetSocketAddress(0))[ CD ]
Line_169 $$ public void getPort() -->Line_171 $$ int value = sock.getLocalPort()[ CD ]
Line_171 $$ int value = sock.getLocalPort()-->Line_171 $$ sock.getLocalPort()[ CD ]
Line_169 $$ public void getPort() -->Line_172 $$ sock.close()[ CD ]
Line_0 $$ Entry-->Line_176 $$ //17
public class func [ CD ]
Line_176 $$ //17
public class func -->Line_177 $$ public void getThriftServerDefBuilder() [ CD ]
Line_177 $$ public void getThriftServerDefBuilder() -->Line_178 $$ s.bind(new InetSocketAddress(0))[ CD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_178 $$ s.bind(new InetSocketAddress(0))[ FD ]
Line_177 $$ public void getThriftServerDefBuilder() -->Line_179 $$ s.getLocalPort()[ CD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_179 $$ s.getLocalPort()[ FD ]
Line_177 $$ public void getThriftServerDefBuilder() -->Line_180 $$ s.close()[ CD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_180 $$ s.close()[ FD ]
Line_0 $$ Entry-->Line_184 $$ //18
public class func [ CD ]
Line_184 $$ //18
public class func -->Line_185 $$ public void findUnusedPort() [ CD ]
Line_185 $$ public void findUnusedPort() -->Line_186 $$ socket.bind(new InetSocketAddress(0))[ CD ]
Line_185 $$ public void findUnusedPort() -->Line_187 $$ socket.getLocalPort()[ CD ]
Line_185 $$ public void findUnusedPort() -->Line_188 $$ socket.close()[ CD ]
Line_0 $$ Entry-->Line_192 $$ //19
public class func [ CD ]
Line_192 $$ //19
public class func -->Line_193 $$ public void port() [ CD ]
Line_193 $$ public void port() -->Line_194 $$ socket.bind(new InetSocketAddress("localhost", 0))[ CD ]
Line_193 $$ public void port() -->Line_197 $$ return socket.getLocalPort();[ CD ]
Line_197 $$ return socket.getLocalPort();-->Line_197 $$ socket.getLocalPort()[ CD ]
Line_193 $$ public void port() -->Line_198 $$ socket.close()[ CD ]
Line_0 $$ Entry-->Line_202 $$ //20
public class func [ CD ]
Line_202 $$ //20
public class func -->Line_203 $$ public void test_LocalPort() [ CD ]
Line_203 $$ public void test_LocalPort() -->Line_204 $$ ss2.bind(new InetSocketAddress("127.0.0.1", 4343))[ CD ]
Line_203 $$ public void test_LocalPort() -->Line_205 $$ assertEquals(ss2.getLocalPort(), 4343)[ CD ]
Line_203 $$ public void test_LocalPort() -->Line_206 $$ ss2.close()[ CD ]
Line_0 $$ Entry-->Line_210 $$ //21
public class func [ CD ]
Line_210 $$ //21
public class func -->Line_211 $$ public void start(Properties props) [ CD ]
Line_211 $$ public void start(Properties props) -->Line_212 $$ String v = props.getProperty(ADDRESS_PROPERTY)[ CD ]
Line_212 $$ String v = props.getProperty(ADDRESS_PROPERTY)-->Line_212 $$ props.getProperty(ADDRESS_PROPERTY)[ CD ]
Line_211 $$ public void start(Properties props) -->Line_213 $$ InetAddress address = v == null ? null : InetAddress.getByName(v)[ CD ]
Line_212 $$ String v = props.getProperty(ADDRESS_PROPERTY)-->Line_213 $$ InetAddress.getByName(v)[ FD ]
Line_211 $$ public void start(Properties props) -->Line_214 $$ int port = Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))[ CD ]
Line_214 $$ int port = Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))-->Line_214 $$ Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))[ CD ]
Line_211 $$ public void start(Properties props) -->Line_215 $$ InetSocketAddress socketAddress = new InetSocketAddress(address, port)[ CD ]
Line_211 $$ public void start(Properties props) -->Line_216 $$ socket.bind(socketAddress)[ CD ]
Line_215 $$ InetSocketAddress socketAddress = new InetSocketAddress(address, port)-->Line_216 $$ socket.bind(socketAddress)[ FD ]
Line_211 $$ public void start(Properties props) -->Line_217 $$ Main.log("Started server listening on " + socket.getLocalSocketAddress() + ":" + socket.getLocalPort())[ CD ]
Line_0 $$ Entry-->Line_222 $$ //22
public class func [ CD ]
Line_222 $$ //22
public class func -->Line_223 $$ public void performancePreferenceTest(int connectionTime, int latency, int bandwidth) [ CD ]
Line_223 $$ public void performancePreferenceTest(int connectionTime, int latency, int bandwidth) -->Line_224 $$ InetSocketAddress theAddress = new InetSocketAddress(InetAddress.getLocalHost(), 0)[ CD ]
Line_223 $$ public void performancePreferenceTest(int connectionTime, int latency, int bandwidth) -->Line_226 $$ theSocket.bind(theAddress)[ CD ]
Line_224 $$ InetSocketAddress theAddress = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_226 $$ theSocket.bind(theAddress)[ FD ]
Line_223 $$ public void performancePreferenceTest(int connectionTime, int latency, int bandwidth) -->Line_227 $$ int portNumber = theSocket.getLocalPort()[ CD ]
Line_227 $$ int portNumber = theSocket.getLocalPort()-->Line_227 $$ theSocket.getLocalPort()[ CD ]
Line_0 $$ Entry-->Line_231 $$ //23
public class func [ CD ]
Line_231 $$ //23
public class func -->Line_232 $$ public void test_bindLjava_net_SocketAddress() [ CD ]
Line_232 $$ public void test_bindLjava_net_SocketAddress() -->Line_233 $$ InetSocketAddress theAddress = new InetSocketAddress(InetAddress.getLocalHost(), 0)[ CD ]
Line_232 $$ public void test_bindLjava_net_SocketAddress() -->Line_235 $$ theSocket.bind(theAddress)[ CD ]
Line_233 $$ InetSocketAddress theAddress = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_235 $$ theSocket.bind(theAddress)[ FD ]
Line_224 $$ InetSocketAddress theAddress = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_235 $$ theSocket.bind(theAddress)[ FD ]
Line_232 $$ public void test_bindLjava_net_SocketAddress() -->Line_236 $$ int portNumber = theSocket.getLocalPort()[ CD ]
Line_236 $$ int portNumber = theSocket.getLocalPort()-->Line_236 $$ theSocket.getLocalPort()[ CD ]
Line_0 $$ Entry-->Line_240 $$ //24
public class func [ CD ]
Line_240 $$ //24
public class func -->Line_241 $$ public void test_bindLjava_net_SocketAddressI() [ CD ]
Line_241 $$ public void test_bindLjava_net_SocketAddressI() -->Line_242 $$ InetSocketAddress theAddress = new InetSocketAddress(InetAddress.getLocalHost(), 0)[ CD ]
Line_241 $$ public void test_bindLjava_net_SocketAddressI() -->Line_244 $$ theSocket.bind(theAddress, 5)[ CD ]
Line_242 $$ InetSocketAddress theAddress = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_244 $$ theSocket.bind(theAddress, 5)[ FD ]
Line_233 $$ InetSocketAddress theAddress = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_244 $$ theSocket.bind(theAddress, 5)[ FD ]
Line_224 $$ InetSocketAddress theAddress = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_244 $$ theSocket.bind(theAddress, 5)[ FD ]
Line_241 $$ public void test_bindLjava_net_SocketAddressI() -->Line_245 $$ int portNumber = theSocket.getLocalPort()[ CD ]
Line_245 $$ int portNumber = theSocket.getLocalPort()-->Line_245 $$ theSocket.getLocalPort()[ CD ]
Line_0 $$ Entry-->Line_249 $$ //25
public class func [ CD ]
Line_249 $$ //25
public class func -->Line_250 $$ public void test_getLocalSocketAddress() [ CD ]
Line_250 $$ public void test_getLocalSocketAddress() -->Line_251 $$ theSocket.bind(new InetSocketAddress(InetAddress.getLocalHost(), 0))[ CD ]
Line_250 $$ public void test_getLocalSocketAddress() -->Line_253 $$ int localPort = theSocket.getLocalPort()[ CD ]
Line_253 $$ int localPort = theSocket.getLocalPort()-->Line_253 $$ theSocket.getLocalPort()[ CD ]
Line_0 $$ Entry-->Line_257 $$ //26
public class func [ CD ]
Line_257 $$ //26
public class func -->Line_258 $$ public void getPort(int portStart, int retries) [ CD ]
Line_258 $$ public void getPort(int portStart, int retries) -->Line_261 $$ socket.bind(addr)[ CD ]
Line_258 $$ public void getPort(int portStart, int retries) -->Line_262 $$ socket.close()[ CD ]
Line_0 $$ Entry-->Line_266 $$ //27
public class func [ CD ]
Line_266 $$ //27
public class func -->Line_267 $$ public void test_isBound() [ CD ]
Line_267 $$ public void test_isBound() -->Line_268 $$ serverSocket.bind(new InetSocketAddress(addr, 0))[ CD ]
Line_267 $$ public void test_isBound() -->Line_269 $$ assertTrue("Socket indicated  not bound when it should be (1)", serverSocket.isBound())[ CD ]
Line_267 $$ public void test_isBound() -->Line_271 $$ serverSocket.close()[ CD ]
Line_267 $$ public void test_isBound() -->Line_273 $$ assertTrue("Socket indicated  not bound when it should be (2)", serverSocket.isBound())[ CD ]
Line_267 $$ public void test_isBound() -->Line_275 $$ serverSocket.close()[ CD ]
Line_267 $$ public void test_isBound() -->Line_277 $$ assertTrue("Socket indicated  not bound when it should be (3)", serverSocket.isBound())[ CD ]
Line_267 $$ public void test_isBound() -->Line_279 $$ serverSocket.close()[ CD ]
Line_267 $$ public void test_isBound() -->Line_281 $$ assertTrue("Socket indicated  not bound when it should be (4)", serverSocket.isBound())[ CD ]
Line_267 $$ public void test_isBound() -->Line_283 $$ serverSocket.close()[ CD ]
Line_0 $$ Entry-->Line_287 $$ //28
public class func [ CD ]
Line_287 $$ //28
public class func -->Line_288 $$ public void testBindError() [ CD ]
Line_288 $$ public void testBindError() -->Line_289 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)[ CD ]
Line_288 $$ public void testBindError() -->Line_290 $$ socket.bind(address)[ CD ]
Line_289 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_290 $$ socket.bind(address)[ FD ]
Line_213 $$ InetAddress address = v == null ? null : InetAddress.getByName(v)-->Line_290 $$ socket.bind(address)[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_290 $$ socket.bind(address)[ FD ]
Line_288 $$ public void testBindError() -->Line_291 $$ int min = socket.getLocalPort()[ CD ]
Line_291 $$ int min = socket.getLocalPort()-->Line_291 $$ socket.getLocalPort()[ CD ]
Line_288 $$ public void testBindError() -->Line_292 $$ conf.set("TestRange", min + "-" + min)[ CD ]
Line_288 $$ public void testBindError() -->Line_293 $$ ServerSocket socket2 = new ServerSocket()[ CD ]
Line_0 $$ Entry-->Line_297 $$ //29
public class func [ CD ]
Line_297 $$ //29
public class func -->Line_298 $$ public void testBind() [ CD ]
Line_298 $$ public void testBind() -->Line_299 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)[ CD ]
Line_298 $$ public void testBind() -->Line_300 $$ socket.bind(address)[ CD ]
Line_299 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_300 $$ socket.bind(address)[ FD ]
Line_289 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_300 $$ socket.bind(address)[ FD ]
Line_213 $$ InetAddress address = v == null ? null : InetAddress.getByName(v)-->Line_300 $$ socket.bind(address)[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_300 $$ socket.bind(address)[ FD ]
Line_298 $$ public void testBind() -->Line_301 $$ int min = socket.getLocalPort()[ CD ]
Line_301 $$ int min = socket.getLocalPort()-->Line_301 $$ socket.getLocalPort()[ CD ]
Line_298 $$ public void testBind() -->Line_302 $$ conf.set("TestRange", min + "-" + max)[ CD ]
Line_298 $$ public void testBind() -->Line_303 $$ ServerSocket socket2 = new ServerSocket()[ CD ]
Line_0 $$ Entry-->Line_307 $$ //30
public class func [ CD ]
Line_307 $$ //30
public class func -->Line_308 $$ public void AEProxyImpl(int _port, long _connect_timeout, long _read_timeout, AEProxyHandler _proxy_handler) [ CD ]
Line_308 $$ public void AEProxyImpl(int _port, long _connect_timeout, long _read_timeout, AEProxyHandler _proxy_handler) -->Line_309 $$ ss.bind(new InetSocketAddress(InetAddress.getByName("127.0.0.1"), port), 128)[ CD ]
Line_308 $$ public void AEProxyImpl(int _port, long _connect_timeout, long _read_timeout, AEProxyHandler _proxy_handler) -->Line_310 $$ if (port == 0) [ CD ]
Line_214 $$ int port = Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))-->Line_310 $$ if (port == 0) [ FD ]
Line_139 $$ port = serverSocket.getLocalPort()-->Line_310 $$ if (port == 0) [ FD ]
Line_130 $$ int port = sock.getLocalPort()-->Line_310 $$ if (port == 0) [ FD ]
Line_310 $$ if (port == 0) -->Line_312 $$ ss.getLocalPort()[ CD ]
Line_316 $$ public void runSupport() -->Line_319 $$ selectLoop(connect_selector)[ CD ]
Line_308 $$ public void AEProxyImpl(int _port, long _connect_timeout, long _read_timeout, AEProxyHandler _proxy_handler) -->Line_322 $$ connect_thread.setDaemon(true)[ CD ]
Line_308 $$ public void AEProxyImpl(int _port, long _connect_timeout, long _read_timeout, AEProxyHandler _proxy_handler) -->Line_323 $$ connect_thread.start()[ CD ]
Line_0 $$ Entry-->Line_327 $$ //31
public class func [ CD ]
Line_327 $$ //31
public class func -->Line_328 $$ public void testJaasDualStopWithOpenConnection() [ CD ]
Line_328 $$ public void testJaasDualStopWithOpenConnection() -->Line_329 $$ InetAddress address = InetAddress.getLocalHost()[ CD ]
Line_329 $$ InetAddress address = InetAddress.getLocalHost()-->Line_329 $$ InetAddress.getLocalHost()[ CD ]
Line_328 $$ public void testJaasDualStopWithOpenConnection() -->Line_330 $$ socket.bind(new InetSocketAddress(address, listenPort))[ CD ]
Line_328 $$ public void testJaasDualStopWithOpenConnection() -->Line_331 $$ LOG.info("bound address: " + socket)[ CD ]
Line_328 $$ public void testJaasDualStopWithOpenConnection() -->Line_332 $$ socket.close()[ CD ]
Line_0 $$ Entry-->Line_336 $$ //32
public class func [ CD ]
Line_336 $$ //32
public class func -->Line_337 $$ public void acceptUnbound() [ CD ]
Line_337 $$ public void acceptUnbound() -->Line_338 $$ sslServerSocket.bind(new java.net.InetSocketAddress(serverPort))[ CD ]
Line_337 $$ public void acceptUnbound() -->Line_339 $$ if (!sslServerSocket.isBound())
    throw new Exception("Server socket is not bound!");[ CD ]
Line_339 $$ if (!sslServerSocket.isBound())
    throw new Exception("Server socket is not bound!");-->Line_339 $$ !sslServerSocket.isBound()[ CD ]
Line_339 $$ !sslServerSocket.isBound()-->Line_339 $$ sslServerSocket.isBound()[ CD ]
Line_337 $$ public void acceptUnbound() -->Line_341 $$ Socket sslSocket = sslServerSocket.accept()[ CD ]
Line_341 $$ Socket sslSocket = sslServerSocket.accept()-->Line_341 $$ sslServerSocket.accept()[ CD ]
Line_337 $$ public void acceptUnbound() -->Line_342 $$ sslServerSocket.close()[ CD ]
Line_0 $$ Entry-->Line_346 $$ //33
public class func [ CD ]
Line_346 $$ //33
public class func -->Line_347 $$ public void runHttpServer(int port) [ CD ]
Line_347 $$ public void runHttpServer(int port) -->Line_348 $$ ss.bind(new InetSocketAddress("localhost", port))[ CD ]
Line_347 $$ public void runHttpServer(int port) -->Line_349 $$ System.err.println("Serving file leak stats on http://localhost:" + ss.getLocalPort() + "/ for stats")[ CD ]
Line_0 $$ Entry-->Line_353 $$ //34
public class func [ CD ]
Line_353 $$ //34
public class func -->Line_354 $$ public void freePort() [ CD ]
Line_354 $$ public void freePort() -->Line_355 $$ socket.bind(new InetSocketAddress(0))[ CD ]
Line_354 $$ public void freePort() -->Line_356 $$ return socket.getLocalPort();[ CD ]
Line_356 $$ return socket.getLocalPort();-->Line_356 $$ socket.getLocalPort()[ CD ]
Line_0 $$ Entry-->Line_360 $$ //35
public class func [ CD ]
Line_360 $$ //35
public class func -->Line_361 $$ public void test(InetAddress addr) [ CD ]
Line_361 $$ public void test(InetAddress addr) -->Line_362 $$ ss.bind(new InetSocketAddress(addr, 0))[ CD ]
Line_361 $$ public void test(InetAddress addr) -->Line_363 $$ int port = ss.getLocalPort()[ CD ]
Line_363 $$ int port = ss.getLocalPort()-->Line_363 $$ ss.getLocalPort()[ CD ]
Line_0 $$ Entry-->Line_367 $$ //36
public class func [ CD ]
Line_367 $$ //36
public class func -->Line_368 $$ public void createServerSocket(int port) [ CD ]
Line_368 $$ public void createServerSocket(int port) -->Line_369 $$ ss.bind(new InetSocketAddress(bindAddr, port), backlog)[ CD ]
Line_368 $$ public void createServerSocket(int port) -->Line_370 $$ ss.close()[ CD ]
Line_368 $$ public void createServerSocket(int port) -->Line_371 $$ ss.close()[ CD ]
Line_0 $$ Entry-->Line_375 $$ //37
public class func [ CD ]
Line_375 $$ //37
public class func -->Line_376 $$ public void main(String[] args) [ CD ]
Line_376 $$ public void main(String[] args) -->Line_377 $$ s.bind(new InetSocketAddress(0))[ CD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_377 $$ s.bind(new InetSocketAddress(0))[ FD ]
Line_376 $$ public void main(String[] args) -->Line_378 $$ int port = s.getLocalPort()[ CD ]
Line_378 $$ int port = s.getLocalPort()-->Line_378 $$ s.getLocalPort()[ CD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_378 $$ s.getLocalPort()[ FD ]
Line_0 $$ Entry-->Line_382 $$ //38
public class func [ CD ]
Line_382 $$ //38
public class func -->Line_383 $$ public void run2(Context context) [ CD ]
Line_383 $$ public void run2(Context context) -->Line_384 $$ InetSocketAddress sa = new InetSocketAddress("127.0.0.1", 0)[ CD ]
Line_383 $$ public void run2(Context context) -->Line_385 $$ ss.bind(sa)[ CD ]
Line_384 $$ InetSocketAddress sa = new InetSocketAddress("127.0.0.1", 0)-->Line_385 $$ ss.bind(sa)[ FD ]
Line_383 $$ public void run2(Context context) -->Line_386 $$ String localPortString = Integer.toString(ss.getLocalPort())[ CD ]
Line_386 $$ String localPortString = Integer.toString(ss.getLocalPort())-->Line_386 $$ Integer.toString(ss.getLocalPort())[ CD ]
Line_0 $$ Entry-->Line_390 $$ //39
public class func [ CD ]
Line_390 $$ //39
public class func -->Line_391 $$ public void test(InetAddress addr) [ CD ]
Line_391 $$ public void test(InetAddress addr) -->Line_392 $$ ss.bind(new InetSocketAddress(addr, 0))[ CD ]
Line_391 $$ public void test(InetAddress addr) -->Line_393 $$ int port = ss.getLocalPort()[ CD ]
Line_393 $$ int port = ss.getLocalPort()-->Line_393 $$ ss.getLocalPort()[ CD ]
Line_0 $$ Entry-->Line_397 $$ //40
public class func [ CD ]
Line_397 $$ //40
public class func -->Line_398 $$ public void bind() [ CD ]
Line_398 $$ public void bind() -->Line_399 $$ socketServer.bind(new InetSocketAddress(bindingPort))[ CD ]
Line_398 $$ public void bind() -->Line_400 $$ int port = socketServer.getLocalPort()[ CD ]
Line_400 $$ int port = socketServer.getLocalPort()-->Line_400 $$ socketServer.getLocalPort()[ CD ]
Line_0 $$ Entry-->Line_404 $$ //41
public class func [ CD ]
Line_404 $$ //41
public class func -->Line_405 $$ public void run2(Context context) [ CD ]
Line_405 $$ public void run2(Context context) -->Line_406 $$ InetSocketAddress sa = new InetSocketAddress("127.0.0.1", 0)[ CD ]
Line_405 $$ public void run2(Context context) -->Line_407 $$ ss.bind(sa)[ CD ]
Line_406 $$ InetSocketAddress sa = new InetSocketAddress("127.0.0.1", 0)-->Line_407 $$ ss.bind(sa)[ FD ]
Line_384 $$ InetSocketAddress sa = new InetSocketAddress("127.0.0.1", 0)-->Line_407 $$ ss.bind(sa)[ FD ]
Line_405 $$ public void run2(Context context) -->Line_408 $$ int localPort = ss.getLocalPort()[ CD ]
Line_408 $$ int localPort = ss.getLocalPort()-->Line_408 $$ ss.getLocalPort()[ CD ]
Line_0 $$ Entry-->Line_412 $$ //42
public class func [ CD ]
Line_412 $$ //42
public class func -->Line_413 $$ public void runNativeSide(String[] args) [ CD ]
Line_413 $$ public void runNativeSide(String[] args) -->Line_414 $$ serverSocket.bind(new InetSocketAddress(Utils.getLocalHostAddress(), port))[ CD ]
Line_413 $$ public void runNativeSide(String[] args) -->Line_415 $$ if (serverSocket != null) [ CD ]
Line_413 $$ public void runNativeSide(String[] args) -->Line_421 $$ if (serverSocket == null) [ CD ]
Line_421 $$ if (serverSocket == null) -->Line_422 $$ if (exception == null) [ CD ]
Line_0 $$ Entry-->Line_430 $$ //43
public class func [ CD ]
Line_430 $$ //43
public class func -->Line_431 $$ public void startConsole() [ CD ]
Line_431 $$ public void startConsole() -->Line_432 $$ InetSocketAddress isa = new InetSocketAddress(host, 0)[ CD ]
Line_431 $$ public void startConsole() -->Line_433 $$ testSock.bind(isa)[ CD ]
Line_432 $$ InetSocketAddress isa = new InetSocketAddress(host, 0)-->Line_433 $$ testSock.bind(isa)[ FD ]
Line_431 $$ public void startConsole() -->Line_434 $$ if (testSock != null)
    try [ CD ]
Line_0 $$ Entry-->Line_438 $$ //44
public class func [ CD ]
Line_438 $$ //44
public class func -->Line_439 $$ public void getFreePort() [ CD ]
Line_439 $$ public void getFreePort() -->Line_440 $$ ss.bind(new InetSocketAddress(port))[ CD ]
Line_439 $$ public void getFreePort() -->Line_441 $$ ss.close()[ CD ]
Line_439 $$ public void getFreePort() -->Line_443 $$ ss.setReuseAddress(false)[ CD ]
Line_0 $$ Entry-->Line_447 $$ //45
public class func [ CD ]
Line_447 $$ //45
public class func -->Line_448 $$ public void startConsole() [ CD ]
Line_448 $$ public void startConsole() -->Line_449 $$ InetSocketAddress isa = new InetSocketAddress(host, 0)[ CD ]
Line_448 $$ public void startConsole() -->Line_450 $$ testSock.bind(isa)[ CD ]
Line_449 $$ InetSocketAddress isa = new InetSocketAddress(host, 0)-->Line_450 $$ testSock.bind(isa)[ FD ]
Line_432 $$ InetSocketAddress isa = new InetSocketAddress(host, 0)-->Line_450 $$ testSock.bind(isa)[ FD ]
Line_448 $$ public void startConsole() -->Line_451 $$ if (testSock != null)
    try [ CD ]
Line_0 $$ Entry-->Line_455 $$ //46
public class func [ CD ]
Line_455 $$ //46
public class func -->Line_456 $$ public void setup(ExecutorType clientExecutor, ExecutorType serverExecutor, PayloadSize requestSize, PayloadSize responseSize, FlowWindowSize windowSize, ChannelType channelType, int maxConcurrentStreams, int channelCount) [ CD ]
Line_456 $$ public void setup(ExecutorType clientExecutor, ExecutorType serverExecutor, PayloadSize requestSize, PayloadSize responseSize, FlowWindowSize windowSize, ChannelType channelType, int maxConcurrentStreams, int channelCount) -->Line_457 $$ sock.bind(new InetSocketAddress(BENCHMARK_ADDR, 0))[ CD ]
Line_456 $$ public void setup(ExecutorType clientExecutor, ExecutorType serverExecutor, PayloadSize requestSize, PayloadSize responseSize, FlowWindowSize windowSize, ChannelType channelType, int maxConcurrentStreams, int channelCount) -->Line_458 $$ SocketAddress address = sock.getLocalSocketAddress()[ CD ]
Line_458 $$ SocketAddress address = sock.getLocalSocketAddress()-->Line_458 $$ sock.getLocalSocketAddress()[ CD ]
Line_456 $$ public void setup(ExecutorType clientExecutor, ExecutorType serverExecutor, PayloadSize requestSize, PayloadSize responseSize, FlowWindowSize windowSize, ChannelType channelType, int maxConcurrentStreams, int channelCount) -->Line_459 $$ sock.close()[ CD ]
Line_456 $$ public void setup(ExecutorType clientExecutor, ExecutorType serverExecutor, PayloadSize requestSize, PayloadSize responseSize, FlowWindowSize windowSize, ChannelType channelType, int maxConcurrentStreams, int channelCount) -->Line_460 $$ NettyServerBuilder.forAddress(address)[ CD ]
Line_458 $$ SocketAddress address = sock.getLocalSocketAddress()-->Line_460 $$ NettyServerBuilder.forAddress(address)[ FD ]
Line_329 $$ InetAddress address = InetAddress.getLocalHost()-->Line_460 $$ NettyServerBuilder.forAddress(address)[ FD ]
Line_299 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_460 $$ NettyServerBuilder.forAddress(address)[ FD ]
Line_289 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_460 $$ NettyServerBuilder.forAddress(address)[ FD ]
Line_213 $$ InetAddress address = v == null ? null : InetAddress.getByName(v)-->Line_460 $$ NettyServerBuilder.forAddress(address)[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_460 $$ NettyServerBuilder.forAddress(address)[ FD ]
Line_456 $$ public void setup(ExecutorType clientExecutor, ExecutorType serverExecutor, PayloadSize requestSize, PayloadSize responseSize, FlowWindowSize windowSize, ChannelType channelType, int maxConcurrentStreams, int channelCount) -->Line_461 $$ NettyChannelBuilder.forAddress(address)[ CD ]
Line_458 $$ SocketAddress address = sock.getLocalSocketAddress()-->Line_461 $$ NettyChannelBuilder.forAddress(address)[ FD ]
Line_329 $$ InetAddress address = InetAddress.getLocalHost()-->Line_461 $$ NettyChannelBuilder.forAddress(address)[ FD ]
Line_299 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_461 $$ NettyChannelBuilder.forAddress(address)[ FD ]
Line_289 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_461 $$ NettyChannelBuilder.forAddress(address)[ FD ]
Line_213 $$ InetAddress address = v == null ? null : InetAddress.getByName(v)-->Line_461 $$ NettyChannelBuilder.forAddress(address)[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_461 $$ NettyChannelBuilder.forAddress(address)[ FD ]
Line_0 $$ Entry-->Line_465 $$ //47
public class func [ CD ]
Line_465 $$ //47
public class func -->Line_466 $$ public void getFreePort() [ CD ]
Line_466 $$ public void getFreePort() -->Line_467 $$ ss.bind(new InetSocketAddress(port))[ CD ]
Line_466 $$ public void getFreePort() -->Line_468 $$ ss.close()[ CD ]
Line_466 $$ public void getFreePort() -->Line_470 $$ ss.setReuseAddress(false)[ CD ]
Line_0 $$ Entry-->Line_474 $$ //48
public class func [ CD ]
Line_474 $$ //48
public class func -->Line_475 $$ public void main(String args[]) [ CD ]
Line_475 $$ public void main(String args[]) -->Line_477 $$ ss.bind(new InetSocketAddress(port))[ CD ]
Line_475 $$ public void main(String args[]) -->Line_478 $$ ss.close()[ CD ]
Line_0 $$ Entry-->Line_482 $$ //49
public class func [ CD ]
Line_482 $$ //49
public class func -->Line_483 $$ public void main(String args[]) [ CD ]
Line_483 $$ public void main(String args[]) -->Line_485 $$ ss.bind(new InetSocketAddress(port))[ CD ]
Line_483 $$ public void main(String args[]) -->Line_486 $$ ss.close()[ CD ]
Line_0 $$ Entry-->Line_490 $$ //50
public class func [ CD ]
Line_490 $$ //50
public class func -->Line_491 $$ public void start() [ CD ]
Line_491 $$ public void start() -->Line_492 $$ serverSocket.bind(new InetSocketAddress(this.inetAddress, this.port), this.backlog)[ CD ]
Line_491 $$ public void start() -->Line_493 $$ serverSocket.setSoTimeout(this.timeout)[ CD ]
Line_491 $$ public void start() -->Line_494 $$ int serverPort = serverSocket.getLocalPort()[ CD ]
Line_494 $$ int serverPort = serverSocket.getLocalPort()-->Line_494 $$ serverSocket.getLocalPort()[ CD ]
Line_0 $$ Entry-->Line_498 $$ //51
public class func [ CD ]
Line_498 $$ //51
public class func -->Line_499 $$ public void openServerSocket(int port, String user) [ CD ]
Line_499 $$ public void openServerSocket(int port, String user) -->Line_500 $$ serverSocket.bind(new InetSocketAddress(port), 100)[ CD ]
Line_499 $$ public void openServerSocket(int port, String user) -->Line_501 $$ serverSocket.close()[ CD ]
Line_0 $$ Entry-->Line_505 $$ //52
public class func [ CD ]
Line_505 $$ //52
public class func -->Line_506 $$ public void getFreePort() [ CD ]
Line_506 $$ public void getFreePort() -->Line_507 $$ ss.bind(new InetSocketAddress(NetUtil.LOCALHOST, port))[ CD ]
Line_506 $$ public void getFreePort() -->Line_508 $$ ss.close()[ CD ]
Line_0 $$ Entry-->Line_512 $$ //53
public class func [ CD ]
Line_512 $$ //53
public class func -->Line_513 $$ public void findFreePort(int startRange, int endRange, int[] excluding) [ CD ]
Line_513 $$ public void findFreePort(int startRange, int endRange, int[] excluding) -->Line_514 $$ socket.bind(new InetSocketAddress("127.0.0.1", i))[ CD ]
Line_513 $$ public void findFreePort(int startRange, int endRange, int[] excluding) -->Line_515 $$ socket.close()[ CD ]
Line_0 $$ Entry-->Line_519 $$ //54
public class func [ CD ]
Line_519 $$ //54
public class func -->Line_520 $$ public void canBindToLocalSocket(String host, int port) [ CD ]
Line_520 $$ public void canBindToLocalSocket(String host, int port) -->Line_521 $$ socket.bind(new InetSocketAddress(host, port))[ CD ]
Line_520 $$ public void canBindToLocalSocket(String host, int port) -->Line_522 $$ socket.close()[ CD ]
Line_0 $$ Entry-->Line_526 $$ //55
public class func [ CD ]
Line_526 $$ //55
public class func -->Line_527 $$ public void getValidatedDebugPort() [ CD ]
Line_527 $$ public void getValidatedDebugPort() -->Line_528 $$ server.bind(new InetSocketAddress(port))[ CD ]
Line_527 $$ public void getValidatedDebugPort() -->Line_529 $$ server.close()[ CD ]
Line_0 $$ Entry-->Line_533 $$ //56
public class func [ CD ]
Line_533 $$ //56
public class func -->Line_534 $$ public void getFreePort() [ CD ]
Line_534 $$ public void getFreePort() -->Line_535 $$ ss.bind(new InetSocketAddress(LOCALHOST, port))[ CD ]
Line_534 $$ public void getFreePort() -->Line_536 $$ ss.close()[ CD ]
Line_0 $$ Entry-->Line_540 $$ //57
public class func [ CD ]
Line_540 $$ //57
public class func -->Line_541 $$ public void ServerSocketTests() [ CD ]
Line_541 $$ public void ServerSocketTests() -->Line_542 $$ s2.bind(new InetSocketAddress(s1.getLocalPort()))[ CD ]
Line_0 $$ Entry-->Line_546 $$ //58
public class func [ CD ]
Line_546 $$ //58
public class func -->Line_547 $$ public void test_bindLjava_net_SocketAddressI() [ CD ]
Line_547 $$ public void test_bindLjava_net_SocketAddressI() -->Line_549 $$ theSocket.bind(theAddress, 4)[ CD ]
Line_242 $$ InetSocketAddress theAddress = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_549 $$ theSocket.bind(theAddress, 4)[ FD ]
Line_233 $$ InetSocketAddress theAddress = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_549 $$ theSocket.bind(theAddress, 4)[ FD ]
Line_224 $$ InetSocketAddress theAddress = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_549 $$ theSocket.bind(theAddress, 4)[ FD ]
Line_547 $$ public void test_bindLjava_net_SocketAddressI() -->Line_550 $$ theSocket.getLocalSocketAddress()[ CD ]
Line_0 $$ Entry-->Line_554 $$ //59
public class func [ CD ]
Line_554 $$ //59
public class func -->Line_555 $$ public void paintComponent(BufferedImage image, Rectangle[] rectangles) [ CD ]
Line_555 $$ public void paintComponent(BufferedImage image, Rectangle[] rectangles) -->Line_556 $$ String localHostAddress = Utils.getLocalHostAddress()[ CD ]
Line_556 $$ String localHostAddress = Utils.getLocalHostAddress()-->Line_556 $$ Utils.getLocalHostAddress()[ CD ]
Line_555 $$ public void paintComponent(BufferedImage image, Rectangle[] rectangles) -->Line_557 $$ if (localHostAddress == null) [ CD ]
Line_556 $$ String localHostAddress = Utils.getLocalHostAddress()-->Line_557 $$ if (localHostAddress == null) [ FD ]
Line_557 $$ if (localHostAddress == null) -->Line_558 $$ localHostAddress = "127.0.0.1"[ CD ]
Line_556 $$ String localHostAddress = Utils.getLocalHostAddress()-->Line_558 $$ localHostAddress = "127.0.0.1"[ FD ]
Line_558 $$ localHostAddress = "127.0.0.1"-->Line_558 $$ localHostAddress = "127.0.0.1"[ FD ]
Line_555 $$ public void paintComponent(BufferedImage image, Rectangle[] rectangles) -->Line_560 $$ serverSocket.bind(new InetSocketAddress(InetAddress.getByName(localHostAddress), 0))[ CD ]
Line_556 $$ String localHostAddress = Utils.getLocalHostAddress()-->Line_560 $$ InetAddress.getByName(localHostAddress)[ FD ]
Line_558 $$ localHostAddress = "127.0.0.1"-->Line_560 $$ InetAddress.getByName(localHostAddress)[ FD ]
Line_0 $$ Entry-->Line_564 $$ //60
public class func [ CD ]
Line_564 $$ //60
public class func -->Line_565 $$ public void pickAddress() [ CD ]
Line_565 $$ public void pickAddress() -->Line_566 $$ if (bindAny) [ CD ]
Line_565 $$ public void pickAddress() -->Line_571 $$ log(Level.FINEST, "Trying to bind inet socket address:" + inetSocketAddress)[ CD ]
Line_565 $$ public void pickAddress() -->Line_572 $$ serverSocket.bind(inetSocketAddress, 100)[ CD ]
Line_565 $$ public void pickAddress() -->Line_573 $$ log(Level.FINEST, "Bind successful to inet socket address:" + inetSocketAddress)[ CD ]
Line_0 $$ Entry-->Line_577 $$ //61
public class func [ CD ]
Line_577 $$ //61
public class func -->Line_578 $$ public void inheritedChannel() [ CD ]
Line_578 $$ public void inheritedChannel() -->Line_579 $$ serverSocket.bind(new InetSocketAddress(InetAddress.getLocalHost(), PORT))[ CD ]
Line_0 $$ Entry-->Line_584 $$ //62
public class func [ CD ]
Line_584 $$ //62
public class func -->Line_585 $$ public void createServerSocket(int port) [ CD ]
Line_585 $$ public void createServerSocket(int port) -->Line_586 $$ if (port == 0) [ CD ]
Line_400 $$ int port = socketServer.getLocalPort()-->Line_586 $$ if (port == 0) [ FD ]
Line_393 $$ int port = ss.getLocalPort()-->Line_586 $$ if (port == 0) [ FD ]
Line_378 $$ int port = s.getLocalPort()-->Line_586 $$ if (port == 0) [ FD ]
Line_363 $$ int port = ss.getLocalPort()-->Line_586 $$ if (port == 0) [ FD ]
Line_214 $$ int port = Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))-->Line_586 $$ if (port == 0) [ FD ]
Line_139 $$ port = serverSocket.getLocalPort()-->Line_586 $$ if (port == 0) [ FD ]
Line_130 $$ int port = sock.getLocalPort()-->Line_586 $$ if (port == 0) [ FD ]
Line_586 $$ if (port == 0) -->Line_587 $$ sock.bind(null)[ CD ]
Line_586 $$ if (port == 0) -->Line_588 $$ sock.getLocalPort()[ CD ]
Line_586 $$ if (port == 0) -->Line_590 $$ sock.bind(new InetSocketAddress(port))[ CD ]
Line_0 $$ Entry-->Line_597 $$ //63
public class func [ CD ]
Line_597 $$ //63
public class func -->Line_598 $$ public void shouldSendMessage() [ CD ]
Line_598 $$ public void shouldSendMessage() -->Line_599 $$ server.bind(new InetSocketAddress((InetAddress) null, pid2.getReplicaPort()))[ CD ]
Line_598 $$ public void shouldSendMessage() -->Line_600 $$ Socket socket = server.accept()[ CD ]
Line_600 $$ Socket socket = server.accept()-->Line_600 $$ server.accept()[ CD ]
Line_598 $$ public void shouldSendMessage() -->Line_601 $$ DataInputStream inputStream = new DataInputStream(socket.getInputStream())[ CD ]
Line_600 $$ Socket socket = server.accept()-->Line_601 $$ socket.getInputStream()[ FD ]
Line_598 $$ public void shouldSendMessage() -->Line_602 $$ assertEquals(1, inputStream.readInt())[ CD ]
Line_601 $$ DataInputStream inputStream = new DataInputStream(socket.getInputStream())-->Line_602 $$ inputStream.readInt()[ FD ]
Line_0 $$ Entry-->Line_606 $$ //64
public class func [ CD ]
Line_606 $$ //64
public class func -->Line_607 $$ public void activeConnectionShouldSendLocalId() [ CD ]
Line_607 $$ public void activeConnectionShouldSendLocalId() -->Line_608 $$ server.bind(new InetSocketAddress((InetAddress) null, pid2.getReplicaPort()))[ CD ]
Line_607 $$ public void activeConnectionShouldSendLocalId() -->Line_609 $$ Socket socket = server.accept()[ CD ]
Line_609 $$ Socket socket = server.accept()-->Line_609 $$ server.accept()[ CD ]
Line_607 $$ public void activeConnectionShouldSendLocalId() -->Line_610 $$ DataInputStream inputStream = new DataInputStream(socket.getInputStream())[ CD ]
Line_609 $$ Socket socket = server.accept()-->Line_610 $$ socket.getInputStream()[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_610 $$ socket.getInputStream()[ FD ]
Line_607 $$ public void activeConnectionShouldSendLocalId() -->Line_611 $$ assertEquals(1, inputStream.readInt())[ CD ]
Line_610 $$ DataInputStream inputStream = new DataInputStream(socket.getInputStream())-->Line_611 $$ inputStream.readInt()[ FD ]
Line_601 $$ DataInputStream inputStream = new DataInputStream(socket.getInputStream())-->Line_611 $$ inputStream.readInt()[ FD ]
Line_607 $$ public void activeConnectionShouldSendLocalId() -->Line_612 $$ inputStream.close()[ CD ]
Line_610 $$ DataInputStream inputStream = new DataInputStream(socket.getInputStream())-->Line_612 $$ inputStream.close()[ FD ]
Line_601 $$ DataInputStream inputStream = new DataInputStream(socket.getInputStream())-->Line_612 $$ inputStream.close()[ FD ]
Line_0 $$ Entry-->Line_616 $$ //65
public class func [ CD ]
Line_616 $$ //65
public class func -->Line_617 $$ public void run() [ CD ]
Line_617 $$ public void run() -->Line_618 $$ serverSocket.bind(new InetSocketAddress(port))[ CD ]
Line_617 $$ public void run() -->Line_619 $$ Socket socket = serverSocket.accept()[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_619 $$ serverSocket.accept()[ CD ]
Line_617 $$ public void run() -->Line_620 $$ InputStream is = socket.getInputStream()[ CD ]
Line_620 $$ InputStream is = socket.getInputStream()-->Line_620 $$ socket.getInputStream()[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_620 $$ socket.getInputStream()[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_620 $$ socket.getInputStream()[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_620 $$ socket.getInputStream()[ FD ]
Line_617 $$ public void run() -->Line_621 $$ socket.shutdownOutput()[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_621 $$ socket.shutdownOutput()[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_621 $$ socket.shutdownOutput()[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_621 $$ socket.shutdownOutput()[ FD ]
Line_0 $$ Entry-->Line_625 $$ //66
public class func [ CD ]
Line_625 $$ //66
public class func -->Line_626 $$ public void expectBadClientSingle() [ CD ]
Line_626 $$ public void expectBadClientSingle() -->Line_627 $$ server.bind(new InetSocketAddress(LOCALHOST, SERVER_PORT))[ CD ]
Line_626 $$ public void expectBadClientSingle() -->Line_628 $$ return badSend(new Socket(LOCALHOST, SERVER_PORT), server.accept(), null);[ CD ]
Line_628 $$ return badSend(new Socket(LOCALHOST, SERVER_PORT), server.accept(), null);-->Line_628 $$ badSend(new Socket(LOCALHOST, SERVER_PORT), server.accept(), null)[ CD ]
Line_0 $$ Entry-->Line_632 $$ //67
public class func [ CD ]
Line_632 $$ //67
public class func -->Line_633 $$ public void run() [ CD ]
Line_633 $$ public void run() -->Line_634 $$ server.bind(new InetSocketAddress(_port))[ CD ]
Line_633 $$ public void run() -->Line_635 $$ server.accept()[ CD ]
Line_633 $$ public void run() -->Line_636 $$ TunnelSocket ts = (TunnelSocket) s[ CD ]
Line_633 $$ public void run() -->Line_637 $$ ts.verify()[ CD ]
Line_636 $$ TunnelSocket ts = (TunnelSocket) s-->Line_637 $$ ts.verify()[ FD ]
Line_633 $$ public void run() -->Line_638 $$ System.out.println(ts.getSubject())[ CD ]
Line_636 $$ TunnelSocket ts = (TunnelSocket) s-->Line_638 $$ ts.getSubject()[ FD ]
Line_0 $$ Entry-->Line_642 $$ //68
public class func [ CD ]
Line_642 $$ //68
public class func -->Line_643 $$ public void createOutProcessMessagingInterface() [ CD ]
Line_643 $$ public void createOutProcessMessagingInterface() -->Line_644 $$ serverSocket.bind(new InetSocketAddress(InetAddress.getByName(localHostAddress), 0))[ CD ]
Line_556 $$ String localHostAddress = Utils.getLocalHostAddress()-->Line_644 $$ InetAddress.getByName(localHostAddress)[ FD ]
Line_558 $$ localHostAddress = "127.0.0.1"-->Line_644 $$ InetAddress.getByName(localHostAddress)[ FD ]
Line_0 $$ Entry-->Line_648 $$ //69
public class func [ CD ]
Line_648 $$ //69
public class func -->Line_649 $$ public void getUnusedPort() [ CD ]
Line_649 $$ public void getUnusedPort() -->Line_650 $$ InetSocketAddress address = new InetSocketAddress(InetAddress.getByName("localhost"), port)[ CD ]
Line_649 $$ public void getUnusedPort() -->Line_651 $$ serverSocket.bind(address, 10)[ CD ]
Line_650 $$ InetSocketAddress address = new InetSocketAddress(InetAddress.getByName("localhost"), port)-->Line_651 $$ serverSocket.bind(address, 10)[ FD ]
Line_458 $$ SocketAddress address = sock.getLocalSocketAddress()-->Line_651 $$ serverSocket.bind(address, 10)[ FD ]
Line_329 $$ InetAddress address = InetAddress.getLocalHost()-->Line_651 $$ serverSocket.bind(address, 10)[ FD ]
Line_299 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_651 $$ serverSocket.bind(address, 10)[ FD ]
Line_289 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_651 $$ serverSocket.bind(address, 10)[ FD ]
Line_213 $$ InetAddress address = v == null ? null : InetAddress.getByName(v)-->Line_651 $$ serverSocket.bind(address, 10)[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_651 $$ serverSocket.bind(address, 10)[ FD ]
Line_0 $$ Entry-->Line_655 $$ //70
public class func [ CD ]
Line_655 $$ //70
public class func -->Line_656 $$ public void testStateAfterClose() [ CD ]
Line_656 $$ public void testStateAfterClose() -->Line_657 $$ ss.bind(new InetSocketAddress(Inet4Address.getLocalHost(), 0))[ CD ]
Line_656 $$ public void testStateAfterClose() -->Line_658 $$ InetSocketAddress boundAddress = (InetSocketAddress) ss.getLocalSocketAddress()[ CD ]
Line_0 $$ Entry-->Line_662 $$ //71
public class func [ CD ]
Line_662 $$ //71
public class func -->Line_663 $$ public void createBoundServerSocket(final String uniqueUserName, final Socket controlConnection) [ CD ]
Line_663 $$ public void createBoundServerSocket(final String uniqueUserName, final Socket controlConnection) -->Line_664 $$ serverSocket.bind(new InetSocketAddress(controlConnection.getLocalAddress(), controlConnection.getLocalPort()))[ CD ]
Line_663 $$ public void createBoundServerSocket(final String uniqueUserName, final Socket controlConnection) -->Line_665 $$ serverSocket.setSoTimeout(this.socketTimeoutInMillis)[ CD ]
Line_0 $$ Entry-->Line_669 $$ //72
public class func [ CD ]
Line_669 $$ //72
public class func -->Line_670 $$ public void newJVM(String displayName, TaskListener listener, JVMBuilder vmb, FilePath workDir, ClasspathBuilder classpath) [ CD ]
Line_670 $$ public void newJVM(String displayName, TaskListener listener, JVMBuilder vmb, FilePath workDir, ClasspathBuilder classpath) -->Line_671 $$ serverSocket.bind(new InetSocketAddress("localhost", 0))[ CD ]
Line_670 $$ public void newJVM(String displayName, TaskListener listener, JVMBuilder vmb, FilePath workDir, ClasspathBuilder classpath) -->Line_672 $$ serverSocket.setSoTimeout(10 * 1000)[ CD ]
Line_0 $$ Entry-->Line_676 $$ //73
public class func [ CD ]
Line_676 $$ //73
public class func -->Line_677 $$ public void createSeleniumRCVM(File standaloneServerJar, TaskListener listener, Map<String, String> properties, Map<String, String> envVariables) [ CD ]
Line_677 $$ public void createSeleniumRCVM(File standaloneServerJar, TaskListener listener, Map<String, String> properties, Map<String, String> envVariables) -->Line_678 $$ serverSocket.bind(new InetSocketAddress("localhost", 0))[ CD ]
Line_677 $$ public void createSeleniumRCVM(File standaloneServerJar, TaskListener listener, Map<String, String> properties, Map<String, String> envVariables) -->Line_679 $$ serverSocket.setSoTimeout(10000)[ CD ]
Line_0 $$ Entry-->Line_683 $$ //74
public class func [ CD ]
Line_683 $$ //74
public class func -->Line_684 $$ public void main(String... args) [ CD ]
Line_684 $$ public void main(String... args) -->Line_685 $$ ss.bind(new InetSocketAddress(params.getLocalHost(), params.getLocalPort()))[ CD ]
Line_684 $$ public void main(String... args) -->Line_686 $$ ssh.newLocalPortForwarder(params, ss).listen()[ CD ]
Line_0 $$ Entry-->Line_690 $$ //75
public class func [ CD ]
Line_690 $$ //75
public class func -->Line_691 $$ public void test_bindLjava_net_SocketAddress() [ CD ]
Line_691 $$ public void test_bindLjava_net_SocketAddress() -->Line_692 $$ theSocket.bind(new InetSocketAddress(InetAddress.getByAddress(Support_Configuration.nonLocalAddressBytes), 0))[ CD ]
Line_0 $$ Entry-->Line_698 $$ //76
public class func [ CD ]
Line_698 $$ //76
public class func -->Line_699 $$ public void test_bindLjava_net_SocketAddressI() [ CD ]
Line_699 $$ public void test_bindLjava_net_SocketAddressI() -->Line_700 $$ theSocket.bind(new InetSocketAddress(InetAddress.getByAddress(Support_Configuration.nonLocalAddressBytes), 0), 5)[ CD ]
Line_0 $$ Entry-->Line_706 $$ //77
public class func [ CD ]
Line_706 $$ //77
public class func -->Line_707 $$ public void listen(InetAddress localEp) [ CD ]
Line_707 $$ public void listen(InetAddress localEp) -->Line_708 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())[ CD ]
Line_707 $$ public void listen(InetAddress localEp) -->Line_709 $$ ss.bind(address)[ CD ]
Line_708 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_709 $$ ss.bind(address)[ FD ]
Line_650 $$ InetSocketAddress address = new InetSocketAddress(InetAddress.getByName("localhost"), port)-->Line_709 $$ ss.bind(address)[ FD ]
Line_458 $$ SocketAddress address = sock.getLocalSocketAddress()-->Line_709 $$ ss.bind(address)[ FD ]
Line_329 $$ InetAddress address = InetAddress.getLocalHost()-->Line_709 $$ ss.bind(address)[ FD ]
Line_299 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_709 $$ ss.bind(address)[ FD ]
Line_289 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_709 $$ ss.bind(address)[ FD ]
Line_213 $$ InetAddress address = v == null ? null : InetAddress.getByName(v)-->Line_709 $$ ss.bind(address)[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_709 $$ ss.bind(address)[ FD ]
Line_0 $$ Entry-->Line_713 $$ //78
public class func [ CD ]
Line_713 $$ //78
public class func -->Line_714 $$ public void getServerSockets(InetAddress localEp) [ CD ]
Line_714 $$ public void getServerSockets(InetAddress localEp) -->Line_715 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())[ CD ]
Line_714 $$ public void getServerSockets(InetAddress localEp) -->Line_716 $$ socket.bind(address, 500)[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_716 $$ socket.bind(address, 500)[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_716 $$ socket.bind(address, 500)[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_716 $$ socket.bind(address, 500)[ FD ]
Line_715 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_716 $$ socket.bind(address, 500)[ FD ]
Line_708 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_716 $$ socket.bind(address, 500)[ FD ]
Line_650 $$ InetSocketAddress address = new InetSocketAddress(InetAddress.getByName("localhost"), port)-->Line_716 $$ socket.bind(address, 500)[ FD ]
Line_458 $$ SocketAddress address = sock.getLocalSocketAddress()-->Line_716 $$ socket.bind(address, 500)[ FD ]
Line_329 $$ InetAddress address = InetAddress.getLocalHost()-->Line_716 $$ socket.bind(address, 500)[ FD ]
Line_299 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_716 $$ socket.bind(address, 500)[ FD ]
Line_289 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_716 $$ socket.bind(address, 500)[ FD ]
Line_213 $$ InetAddress address = v == null ? null : InetAddress.getByName(v)-->Line_716 $$ socket.bind(address, 500)[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_716 $$ socket.bind(address, 500)[ FD ]
Line_0 $$ Entry-->Line_720 $$ //79
public class func [ CD ]
Line_720 $$ //79
public class func -->Line_721 $$ public void getServerSocket(InetAddress localEp) [ CD ]
Line_721 $$ public void getServerSocket(InetAddress localEp) -->Line_722 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())[ CD ]
Line_721 $$ public void getServerSocket(InetAddress localEp) -->Line_723 $$ socket.bind(address)[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_723 $$ socket.bind(address)[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_723 $$ socket.bind(address)[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_723 $$ socket.bind(address)[ FD ]
Line_722 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_723 $$ socket.bind(address)[ FD ]
Line_715 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_723 $$ socket.bind(address)[ FD ]
Line_708 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_723 $$ socket.bind(address)[ FD ]
Line_650 $$ InetSocketAddress address = new InetSocketAddress(InetAddress.getByName("localhost"), port)-->Line_723 $$ socket.bind(address)[ FD ]
Line_458 $$ SocketAddress address = sock.getLocalSocketAddress()-->Line_723 $$ socket.bind(address)[ FD ]
Line_329 $$ InetAddress address = InetAddress.getLocalHost()-->Line_723 $$ socket.bind(address)[ FD ]
Line_299 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_723 $$ socket.bind(address)[ FD ]
Line_289 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_723 $$ socket.bind(address)[ FD ]
Line_213 $$ InetAddress address = v == null ? null : InetAddress.getByName(v)-->Line_723 $$ socket.bind(address)[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_723 $$ socket.bind(address)[ FD ]
Line_0 $$ Entry-->Line_727 $$ //80
public class func [ CD ]
Line_727 $$ //80
public class func -->Line_728 $$ public void main(String[] args) [ CD ]
Line_728 $$ public void main(String[] args) -->Line_729 $$ ss.bind(new InetSocketAddress(addr, 0))[ CD ]
Line_0 $$ Entry-->Line_736 $$ //81
public class func [ CD ]
Line_736 $$ //81
public class func -->Line_737 $$ public void bind(ServerSocket socket, int portstart, int retries) [ CD ]
Line_737 $$ public void bind(ServerSocket socket, int portstart, int retries) -->Line_739 $$ socket.bind(addr)[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_739 $$ socket.bind(addr)[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_739 $$ socket.bind(addr)[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_739 $$ socket.bind(addr)[ FD ]
Line_737 $$ public void bind(ServerSocket socket, int portstart, int retries) -->Line_740 $$ setPort(portstart)[ CD ]
Line_737 $$ public void bind(ServerSocket socket, int portstart, int retries) -->Line_741 $$ log.info("Receiver Server Socket bound to:" + addr)[ CD ]
Line_0 $$ Entry-->Line_745 $$ //82
public class func [ CD ]
Line_745 $$ //82
public class func -->Line_746 $$ public void bind(ServerSocket socket, int portstart, int retries) [ CD ]
Line_746 $$ public void bind(ServerSocket socket, int portstart, int retries) -->Line_748 $$ socket.bind(addr)[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_748 $$ socket.bind(addr)[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_748 $$ socket.bind(addr)[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_748 $$ socket.bind(addr)[ FD ]
Line_746 $$ public void bind(ServerSocket socket, int portstart, int retries) -->Line_749 $$ setPort(port)[ CD ]
Line_400 $$ int port = socketServer.getLocalPort()-->Line_749 $$ setPort(port)[ FD ]
Line_393 $$ int port = ss.getLocalPort()-->Line_749 $$ setPort(port)[ FD ]
Line_378 $$ int port = s.getLocalPort()-->Line_749 $$ setPort(port)[ FD ]
Line_363 $$ int port = ss.getLocalPort()-->Line_749 $$ setPort(port)[ FD ]
Line_214 $$ int port = Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))-->Line_749 $$ setPort(port)[ FD ]
Line_139 $$ port = serverSocket.getLocalPort()-->Line_749 $$ setPort(port)[ FD ]
Line_130 $$ int port = sock.getLocalPort()-->Line_749 $$ setPort(port)[ FD ]
Line_746 $$ public void bind(ServerSocket socket, int portstart, int retries) -->Line_750 $$ log.info("Receiver Server Socket bound to:" + addr)[ CD ]
Line_0 $$ Entry-->Line_754 $$ //83
public class func [ CD ]
Line_754 $$ //83
public class func -->Line_755 $$ public void getLocalPort(ServerSocket socket, String hostname, int port) [ CD ]
Line_755 $$ public void getLocalPort(ServerSocket socket, String hostname, int port) -->Line_757 $$ socket.bind(addr)[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_757 $$ socket.bind(addr)[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_757 $$ socket.bind(addr)[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_757 $$ socket.bind(addr)[ FD ]
Line_755 $$ public void getLocalPort(ServerSocket socket, String hostname, int port) -->Line_758 $$ log.info("Receiver Server Socket bound to:" + addr)[ CD ]
Line_0 $$ Entry-->Line_762 $$ //84
public class func [ CD ]
Line_762 $$ //84
public class func -->Line_763 $$ public void badSend(Socket from, Socket to, ServerSocket server) [ CD ]
Line_763 $$ public void badSend(Socket from, Socket to, ServerSocket server) -->Line_764 $$ another.bind(new InetSocketAddress(LOCALHOST, SERVER_PORT))[ CD ]
Line_763 $$ public void badSend(Socket from, Socket to, ServerSocket server) -->Line_765 $$ another.setReuseAddress(true)[ CD ]
Line_0 $$ Entry-->Line_769 $$ //85
public class func [ CD ]
Line_769 $$ //85
public class func -->Line_770 $$ public void isPortAvailable(final String port) [ CD ]
Line_770 $$ public void isPortAvailable(final String port) -->Line_771 $$ serverSocket.bind(new InetSocketAddress(Integer.parseInt(port)))[ CD ]
Line_400 $$ int port = socketServer.getLocalPort()-->Line_771 $$ Integer.parseInt(port)[ FD ]
Line_393 $$ int port = ss.getLocalPort()-->Line_771 $$ Integer.parseInt(port)[ FD ]
Line_378 $$ int port = s.getLocalPort()-->Line_771 $$ Integer.parseInt(port)[ FD ]
Line_363 $$ int port = ss.getLocalPort()-->Line_771 $$ Integer.parseInt(port)[ FD ]
Line_214 $$ int port = Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))-->Line_771 $$ Integer.parseInt(port)[ FD ]
Line_139 $$ port = serverSocket.getLocalPort()-->Line_771 $$ Integer.parseInt(port)[ FD ]
Line_130 $$ int port = sock.getLocalPort()-->Line_771 $$ Integer.parseInt(port)[ FD ]
Line_0 $$ Entry-->Line_775 $$ //86
public class func [ CD ]
Line_775 $$ //86
public class func -->Line_776 $$ public void createServerSocket(int nport, int backlog, InetAddress bindAddr, List<GatewayTransportFilter> transportFilters, int socketBufferSize) [ CD ]
Line_776 $$ public void createServerSocket(int nport, int backlog, InetAddress bindAddr, List<GatewayTransportFilter> transportFilters, int socketBufferSize) -->Line_777 $$ result.bind(new InetSocketAddress(bindAddr, nport), backlog)[ CD ]
Line_19 $$ Keeper result = new Keeper(server, port)-->Line_777 $$ result.bind(new InetSocketAddress(bindAddr, nport), backlog)[ FD ]
Line_776 $$ public void createServerSocket(int nport, int backlog, InetAddress bindAddr, List<GatewayTransportFilter> transportFilters, int socketBufferSize) -->Line_778 $$ BindException throwMe = new BindException(LocalizedStrings.SocketCreator_FAILED_TO_CREATE_SERVER_SOCKET_ON_0_1.toLocalizedString(new Object[] [ CD ]
Line_776 $$ public void createServerSocket(int nport, int backlog, InetAddress bindAddr, List<GatewayTransportFilter> transportFilters, int socketBufferSize) -->Line_782 $$ throwMe.initCause(e)[ CD ]
Line_778 $$ BindException throwMe = new BindException(LocalizedStrings.SocketCreator_FAILED_TO_CREATE_SERVER_SOCKET_ON_0_1.toLocalizedString(new Object[] -->Line_782 $$ throwMe.initCause(e)[ FD ]
Line_0 $$ Entry-->Line_786 $$ //87
public class func [ CD ]
Line_786 $$ //87
public class func -->Line_787 $$ public void createServerSocket(int nport, int backlog, InetAddress bindAddr, int socketBufferSize) [ CD ]
Line_787 $$ public void createServerSocket(int nport, int backlog, InetAddress bindAddr, int socketBufferSize) -->Line_788 $$ result.bind(new InetSocketAddress(bindAddr, nport), backlog)[ CD ]
Line_19 $$ Keeper result = new Keeper(server, port)-->Line_788 $$ result.bind(new InetSocketAddress(bindAddr, nport), backlog)[ FD ]
Line_787 $$ public void createServerSocket(int nport, int backlog, InetAddress bindAddr, int socketBufferSize) -->Line_789 $$ BindException throwMe = new BindException(LocalizedStrings.SocketCreator_FAILED_TO_CREATE_SERVER_SOCKET_ON_0_1.toLocalizedString(new Object[] [ CD ]
Line_787 $$ public void createServerSocket(int nport, int backlog, InetAddress bindAddr, int socketBufferSize) -->Line_790 $$ throwMe.initCause(e)[ CD ]
Line_789 $$ BindException throwMe = new BindException(LocalizedStrings.SocketCreator_FAILED_TO_CREATE_SERVER_SOCKET_ON_0_1.toLocalizedString(new Object[] -->Line_790 $$ throwMe.initCause(e)[ FD ]
Line_778 $$ BindException throwMe = new BindException(LocalizedStrings.SocketCreator_FAILED_TO_CREATE_SERVER_SOCKET_ON_0_1.toLocalizedString(new Object[] -->Line_790 $$ throwMe.initCause(e)[ FD ]
Line_0 $$ Entry-->Line_794 $$ //88
public class func [ CD ]
Line_794 $$ //88
public class func -->Line_795 $$ public void forwardLocalPortTo(int localPort, String targetHost, int targetPort) [ CD ]
Line_795 $$ public void forwardLocalPortTo(int localPort, String targetHost, int targetPort) -->Line_796 $$ ss.bind(new InetSocketAddress(params.getLocalHost(), params.getLocalPort()))[ CD ]
Line_795 $$ public void forwardLocalPortTo(int localPort, String targetHost, int targetPort) -->Line_798 $$ ssh.newLocalPortForwarder(params, ss).listen()[ CD ]
Line_0 $$ Entry-->Line_802 $$ //89
public class func [ CD ]
Line_802 $$ //89
public class func -->Line_803 $$ public void initializeClusterManagerCallbackServer() [ CD ]
Line_803 $$ public void initializeClusterManagerCallbackServer() -->Line_804 $$ serverSocket.bind(new InetSocketAddress(0))[ CD ]
Line_803 $$ public void initializeClusterManagerCallbackServer() -->Line_805 $$ TServerSocket tSocket = new TServerSocket(serverSocket, soTimeout)[ CD ]
Line_0 $$ Entry-->Line_809 $$ //90
public class func [ CD ]
Line_809 $$ //90
public class func -->Line_810 $$ public void TraceServer(ServerConfigurationFactory serverConfiguration, String hostname) [ CD ]
Line_810 $$ public void TraceServer(ServerConfigurationFactory serverConfiguration, String hostname) -->Line_811 $$ sock.bind(new InetSocketAddress(hostname, port))[ CD ]
Line_810 $$ public void TraceServer(ServerConfigurationFactory serverConfiguration, String hostname) -->Line_812 $$ final TServerTransport transport = new TServerSocket(sock)[ CD ]
Line_810 $$ public void TraceServer(ServerConfigurationFactory serverConfiguration, String hostname) -->Line_813 $$ TThreadPoolServer.Args options = new TThreadPoolServer.Args(transport)[ CD ]
Line_0 $$ Entry-->Line_817 $$ //91
public class func [ CD ]
Line_817 $$ //91
public class func -->Line_818 $$ public void create(SSHClient client, String remoteHostName, String localHost, int localPort, String remoteHost, int remotePort) [ CD ]
Line_818 $$ public void create(SSHClient client, String remoteHostName, String localHost, int localPort, String remoteHost, int remotePort) -->Line_819 $$ ss.bind(new InetSocketAddress(localHost, localPort))[ CD ]
Line_818 $$ public void create(SSHClient client, String remoteHostName, String localHost, int localPort, String remoteHost, int remotePort) -->Line_820 $$ final LocalPortForwarder forwarder = client.newLocalPortForwarder(params, ss)[ CD ]
Line_820 $$ final LocalPortForwarder forwarder = client.newLocalPortForwarder(params, ss)-->Line_820 $$ client.newLocalPortForwarder(params, ss)[ CD ]
Line_818 $$ public void create(SSHClient client, String remoteHostName, String localHost, int localPort, String remoteHost, int remotePort) -->Line_821 $$ forwarder.listen()[ CD ]
Line_820 $$ final LocalPortForwarder forwarder = client.newLocalPortForwarder(params, ss)-->Line_821 $$ forwarder.listen()[ FD ]
Line_0 $$ Entry-->Line_825 $$ //92
public class func [ CD ]
Line_825 $$ //92
public class func -->Line_826 $$ public void expectBadServerSingle() [ CD ]
Line_826 $$ public void expectBadServerSingle() -->Line_827 $$ server.bind(new InetSocketAddress(LOCALHOST, SERVER_PORT))[ CD ]
Line_826 $$ public void expectBadServerSingle() -->Line_828 $$ Socket client = new Socket(LOCALHOST, SERVER_PORT)[ CD ]
Line_0 $$ Entry-->Line_832 $$ //93
public class func [ CD ]
Line_832 $$ //93
public class func -->Line_833 $$ public void openSocket() [ CD ]
Line_833 $$ public void openSocket() -->Line_834 $$ Log.info("Opening port to listen", "port", port)[ CD ]
Line_400 $$ int port = socketServer.getLocalPort()-->Line_834 $$ Log.info("Opening port to listen", "port", port)[ FD ]
Line_393 $$ int port = ss.getLocalPort()-->Line_834 $$ Log.info("Opening port to listen", "port", port)[ FD ]
Line_378 $$ int port = s.getLocalPort()-->Line_834 $$ Log.info("Opening port to listen", "port", port)[ FD ]
Line_363 $$ int port = ss.getLocalPort()-->Line_834 $$ Log.info("Opening port to listen", "port", port)[ FD ]
Line_214 $$ int port = Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))-->Line_834 $$ Log.info("Opening port to listen", "port", port)[ FD ]
Line_139 $$ port = serverSocket.getLocalPort()-->Line_834 $$ Log.info("Opening port to listen", "port", port)[ FD ]
Line_130 $$ int port = sock.getLocalPort()-->Line_834 $$ Log.info("Opening port to listen", "port", port)[ FD ]
Line_833 $$ public void openSocket() -->Line_835 $$ InetSocketAddress addr = new InetSocketAddress(port)[ CD ]
Line_833 $$ public void openSocket() -->Line_836 $$ socket.bind(addr)[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_836 $$ socket.bind(addr)[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_836 $$ socket.bind(addr)[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_836 $$ socket.bind(addr)[ FD ]
Line_835 $$ InetSocketAddress addr = new InetSocketAddress(port)-->Line_836 $$ socket.bind(addr)[ FD ]
Line_833 $$ public void openSocket() -->Line_837 $$ Log.info("Opened socket", "address", addr)[ CD ]
Line_835 $$ InetSocketAddress addr = new InetSocketAddress(port)-->Line_837 $$ Log.info("Opened socket", "address", addr)[ FD ]
Line_0 $$ Entry-->Line_841 $$ //94
public class func [ CD ]
Line_841 $$ //94
public class func -->Line_842 $$ public void testSocketSimple() [ CD ]
Line_842 $$ public void testSocketSimple() -->Line_843 $$ for (port = 9900; port < 9999; port++) [ CD ]
Line_842 $$ public void testSocketSimple() -->Line_842 $$ public void testSocketSimple() [ CD ]
Line_400 $$ int port = socketServer.getLocalPort()-->Line_843 $$ for (port = 9900; port < 9999; port++) [ FD ]
Line_393 $$ int port = ss.getLocalPort()-->Line_843 $$ for (port = 9900; port < 9999; port++) [ FD ]
Line_378 $$ int port = s.getLocalPort()-->Line_843 $$ for (port = 9900; port < 9999; port++) [ FD ]
Line_363 $$ int port = ss.getLocalPort()-->Line_843 $$ for (port = 9900; port < 9999; port++) [ FD ]
Line_214 $$ int port = Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))-->Line_843 $$ for (port = 9900; port < 9999; port++) [ FD ]
Line_139 $$ port = serverSocket.getLocalPort()-->Line_843 $$ for (port = 9900; port < 9999; port++) [ FD ]
Line_130 $$ int port = sock.getLocalPort()-->Line_843 $$ for (port = 9900; port < 9999; port++) [ FD ]
Line_0 $$ Entry-->Line_855 $$ //95
public class func [ CD ]
Line_855 $$ //95
public class func -->Line_856 $$ public void isPortAvailable(InetAddress localAddress, int port) [ CD ]
Line_856 $$ public void isPortAvailable(InetAddress localAddress, int port) -->Line_857 $$ ss.bind(new InetSocketAddress(localAddress, port))[ CD ]
Line_0 $$ Entry-->Line_861 $$ //96
public class func [ CD ]
Line_861 $$ //96
public class func -->Line_862 $$ public void isRoot0() [ CD ]
Line_862 $$ public void isRoot0() -->Line_863 $$ ss.bind(new InetSocketAddress(i))[ CD ]
Line_0 $$ Entry-->Line_867 $$ //97
public class func [ CD ]
Line_867 $$ //97
public class func -->Line_868 $$ public void startMemcachedServer() [ CD ]
Line_868 $$ public void startMemcachedServer() -->Line_869 $$ serverSocket.bind(new InetSocketAddress(getBindAddress(), serverPort))[ CD ]
Line_0 $$ Entry-->Line_873 $$ //98
public class func [ CD ]
Line_873 $$ //98
public class func -->Line_874 $$ public void doWithBlockedPort(final int port, Runnable action) [ CD ]
Line_874 $$ public void doWithBlockedPort(final int port, Runnable action) -->Line_875 $$ serverSocket.bind(new InetSocketAddress(port))[ CD ]
Line_0 $$ Entry-->Line_879 $$ //99
public class func [ CD ]
Line_879 $$ //99
public class func -->Line_880 $$ public void createServerSocket(int port, int backlog) [ CD ]
Line_880 $$ public void createServerSocket(int port, int backlog) -->Line_881 $$ serverSocket.bind(new InetSocketAddress(port), backlog)[ CD ]
Line_0 $$ Entry-->Line_885 $$ //100
public class func [ CD ]
Line_885 $$ //100
public class func -->Line_886 $$ public void isAddressValid(InetAddress addr) [ CD ]
Line_886 $$ public void isAddressValid(InetAddress addr) -->Line_887 $$ ss.bind(new InetSocketAddress(addr, 0))[ CD ]
Line_0 $$ Entry-->Line_891 $$ //101
public class func [ CD ]
Line_891 $$ //101
public class func -->Line_892 $$ public void main(String[] args) [ CD ]
Line_892 $$ public void main(String[] args) -->Line_893 $$ ss.bind(new InetSocketAddress(addr, 0))[ CD ]
Line_0 $$ Entry-->Line_897 $$ //102
public class func [ CD ]
Line_897 $$ //102
public class func -->Line_898 $$ public void openChannel(int listenPort, Boolean isSSL) [ CD ]
Line_898 $$ public void openChannel(int listenPort, Boolean isSSL) -->Line_899 $$ serverSocket.bind(new InetSocketAddress(listenPort))[ CD ]
Line_0 $$ Entry-->Line_903 $$ //103
public class func [ CD ]
Line_903 $$ //103
public class func -->Line_904 $$ public void start() [ CD ]
Line_904 $$ public void start() -->Line_905 $$ serverSocket.bind(new InetSocketAddress(this.inetAddress, this.port), this.backlog)[ CD ]
Line_0 $$ Entry-->Line_909 $$ //104
public class func [ CD ]
Line_909 $$ //104
public class func -->Line_910 $$ public void createServerSocket(String listenAddress, int port) [ CD ]
Line_910 $$ public void createServerSocket(String listenAddress, int port) -->Line_911 $$ socket.bind(new InetSocketAddress(listenAddress, port))[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_911 $$ socket.bind(new InetSocketAddress(listenAddress, port))[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_911 $$ socket.bind(new InetSocketAddress(listenAddress, port))[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_911 $$ socket.bind(new InetSocketAddress(listenAddress, port))[ FD ]
Line_0 $$ Entry-->Line_915 $$ //105
public class func [ CD ]
Line_915 $$ //105
public class func -->Line_916 $$ public void Acceptor(LogConfig config, Queue<SocketChannel> acceptQueue, Selector selector) [ CD ]
Line_916 $$ public void Acceptor(LogConfig config, Queue<SocketChannel> acceptQueue, Selector selector) -->Line_917 $$ serverSocket.bind(new InetSocketAddress(config.port))[ CD ]
Line_0 $$ Entry-->Line_921 $$ //106
public class func [ CD ]
Line_921 $$ //106
public class func -->Line_922 $$ public void Acceptor(LogConfig config, Queue<SocketChannel> acceptQueue, Selector selector) [ CD ]
Line_922 $$ public void Acceptor(LogConfig config, Queue<SocketChannel> acceptQueue, Selector selector) -->Line_923 $$ serverSocket.bind(new InetSocketAddress(config.port), config.listenQSize)[ CD ]
Line_0 $$ Entry-->Line_928 $$ //107
public class func [ CD ]
Line_928 $$ //107
public class func -->Line_929 $$ public void main(String[] args) [ CD ]
Line_929 $$ public void main(String[] args) -->Line_931 $$ serverSocket.bind(bindAddr)[ CD ]
Line_929 $$ public void main(String[] args) -->Line_932 $$ log.println()[ CD ]
Line_0 $$ Entry-->Line_936 $$ //108
public class func [ CD ]
Line_936 $$ //108
public class func -->Line_937 $$ public void createServerSocket(int port) [ CD ]
Line_937 $$ public void createServerSocket(int port) -->Line_938 $$ serverSocket.bind(new InetSocketAddress(port))[ CD ]
Line_0 $$ Entry-->Line_942 $$ //109
public class func [ CD ]
Line_942 $$ //109
public class func -->Line_943 $$ public void bindSocket(ServerSocket socket) [ CD ]
Line_943 $$ public void bindSocket(ServerSocket socket) -->Line_944 $$ socket.bind(new InetSocketAddress(getPort()), 2 * getMaxActiveClientCount())[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_944 $$ socket.bind(new InetSocketAddress(getPort()), 2 * getMaxActiveClientCount())[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_944 $$ socket.bind(new InetSocketAddress(getPort()), 2 * getMaxActiveClientCount())[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_944 $$ socket.bind(new InetSocketAddress(getPort()), 2 * getMaxActiveClientCount())[ FD ]
Line_0 $$ Entry-->Line_948 $$ //110
public class func [ CD ]
Line_948 $$ //110
public class func -->Line_949 $$ public void createBoundServerSocket() [ CD ]
Line_949 $$ public void createBoundServerSocket() -->Line_950 $$ serverSocket.bind(new InetSocketAddress(this.sourcePort))[ CD ]
Line_0 $$ Entry-->Line_954 $$ //111
public class func [ CD ]
Line_954 $$ //111
public class func -->Line_955 $$ public void trySocket(int port) [ CD ]
Line_955 $$ public void trySocket(int port) -->Line_956 $$ s.bind(new InetSocketAddress(address, port))[ CD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_956 $$ s.bind(new InetSocketAddress(address, port))[ FD ]
Line_0 $$ Entry-->Line_960 $$ //112
public class func [ CD ]
Line_960 $$ //112
public class func -->Line_961 $$ public void bind(ServerSocket socket, int portstart, int retries) [ CD ]
Line_961 $$ public void bind(ServerSocket socket, int portstart, int retries) -->Line_963 $$ socket.bind(addr)[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_963 $$ socket.bind(addr)[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_963 $$ socket.bind(addr)[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_963 $$ socket.bind(addr)[ FD ]
Line_835 $$ InetSocketAddress addr = new InetSocketAddress(port)-->Line_963 $$ socket.bind(addr)[ FD ]
Line_0 $$ Entry-->Line_967 $$ //113
public class func [ CD ]
Line_967 $$ //113
public class func -->Line_968 $$ public void test() [ CD ]
Line_968 $$ public void test() -->Line_969 $$ ss.bind(new InetSocketAddress(0))[ CD ]
Line_968 $$ public void test() -->Line_970 $$ Server s = new Server(ss)[ CD ]
Line_968 $$ public void test() -->Line_971 $$ s.start()[ CD ]
Line_970 $$ Server s = new Server(ss)-->Line_971 $$ s.start()[ FD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_971 $$ s.start()[ FD ]
Line_0 $$ Entry-->Line_975 $$ //114
public class func [ CD ]
Line_975 $$ //114
public class func -->Line_976 $$ public void installWithJMXPortConflict() [ CD ]
Line_976 $$ public void installWithJMXPortConflict() -->Line_977 $$ serverSocket.bind(new InetSocketAddress(address, 7799))[ CD ]
Line_0 $$ Entry-->Line_981 $$ //115
public class func [ CD ]
Line_981 $$ //115
public class func -->Line_982 $$ public void createServerSocketChannel(int port) [ CD ]
Line_982 $$ public void createServerSocketChannel(int port) -->Line_983 $$ serverSocket.bind(new InetSocketAddress(port))[ CD ]
Line_0 $$ Entry-->Line_987 $$ //116
public class func [ CD ]
Line_987 $$ //116
public class func -->Line_988 $$ public void tryBind(int localPort) [ CD ]
Line_988 $$ public void tryBind(int localPort) -->Line_989 $$ ss.bind(new InetSocketAddress("localhost", localPort))[ CD ]
Line_0 $$ Entry-->Line_993 $$ //117
public class func [ CD ]
Line_993 $$ //117
public class func -->Line_994 $$ public void createServerSocketChannel(InetAddress bindingInetAddress, int startPort, ServerSocketConfigurator serverSocketConfigurator) [ CD ]
Line_994 $$ public void createServerSocketChannel(InetAddress bindingInetAddress, int startPort, ServerSocketConfigurator serverSocketConfigurator) -->Line_995 $$ serverSocket.bind(new InetSocketAddress(bindingInetAddress, port))[ CD ]
Line_0 $$ Entry-->Line_1000 $$ //118
public class func [ CD ]
Line_1000 $$ //118
public class func -->Line_1001 $$ public void testCreateServerSocket() [ CD ]
Line_1001 $$ public void testCreateServerSocket() -->Line_1002 $$ serverSocket.bind(new InetSocketAddress(0))[ CD ]
Line_1001 $$ public void testCreateServerSocket() -->Line_1003 $$ testSocket(serverSocket, 50)[ CD ]
Line_0 $$ Entry-->Line_1007 $$ //119
public class func [ CD ]
Line_1007 $$ //119
public class func -->Line_1008 $$ public void openServerSocket(int port, String user) [ CD ]
Line_1008 $$ public void openServerSocket(int port, String user) -->Line_1009 $$ serverSocket.bind(new InetSocketAddress(port))[ CD ]
Line_0 $$ Entry-->Line_1013 $$ //120
public class func [ CD ]
Line_1013 $$ //120
public class func -->Line_1014 $$ public void main(String[] args) [ CD ]
Line_1014 $$ public void main(String[] args) -->Line_1015 $$ ss.bind(new InetSocketAddress("localhost", 0))[ CD ]
Line_0 $$ Entry-->Line_1019 $$ //121
public class func [ CD ]
Line_1019 $$ //121
public class func -->Line_1020 $$ public void bind(ServerSocket socket, InetAddress address, int backlog) [ CD ]
Line_1020 $$ public void bind(ServerSocket socket, InetAddress address, int backlog) -->Line_1021 $$ int start = random()[ CD ]
Line_1021 $$ int start = random()-->Line_1021 $$ random()[ CD ]
Line_1020 $$ public void bind(ServerSocket socket, InetAddress address, int backlog) -->Line_1022 $$ do [ CD ]
Line_1020 $$ public void bind(ServerSocket socket, InetAddress address, int backlog) -->Line_1020 $$ public void bind(ServerSocket socket, InetAddress address, int backlog) [ CD ]
Line_400 $$ int port = socketServer.getLocalPort()-->Line_1022 $$ do [ FD ]
Line_393 $$ int port = ss.getLocalPort()-->Line_1022 $$ do [ FD ]
Line_378 $$ int port = s.getLocalPort()-->Line_1022 $$ do [ FD ]
Line_363 $$ int port = ss.getLocalPort()-->Line_1022 $$ do [ FD ]
Line_214 $$ int port = Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))-->Line_1022 $$ do [ FD ]
Line_139 $$ port = serverSocket.getLocalPort()-->Line_1022 $$ do [ FD ]
Line_130 $$ int port = sock.getLocalPort()-->Line_1022 $$ do [ FD ]
Line_1021 $$ int start = random()-->Line_1022 $$ do [ FD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_1024 $$ socket.bind(new InetSocketAddress(address, port), backlog)[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_1024 $$ socket.bind(new InetSocketAddress(address, port), backlog)[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_1024 $$ socket.bind(new InetSocketAddress(address, port), backlog)[ FD ]
Line_1022 $$ do -->Line_1028 $$ succ(port)[ CD ]
Line_400 $$ int port = socketServer.getLocalPort()-->Line_1028 $$ succ(port)[ FD ]
Line_393 $$ int port = ss.getLocalPort()-->Line_1028 $$ succ(port)[ FD ]
Line_378 $$ int port = s.getLocalPort()-->Line_1028 $$ succ(port)[ FD ]
Line_363 $$ int port = ss.getLocalPort()-->Line_1028 $$ succ(port)[ FD ]
Line_214 $$ int port = Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))-->Line_1028 $$ succ(port)[ FD ]
Line_139 $$ port = serverSocket.getLocalPort()-->Line_1028 $$ succ(port)[ FD ]
Line_130 $$ int port = sock.getLocalPort()-->Line_1028 $$ succ(port)[ FD ]
Line_0 $$ Entry-->Line_1033 $$ //122
public class func [ CD ]
Line_1033 $$ //122
public class func -->Line_1034 $$ public void recreateServerSocket(int fdn) [ CD ]
Line_1034 $$ public void recreateServerSocket(int fdn) -->Line_1035 $$ ss.bind(new InetSocketAddress(0))[ CD ]
Line_0 $$ Entry-->Line_1039 $$ //123
public class func [ CD ]
Line_1039 $$ //123
public class func -->Line_1040 $$ public void isPortFree(int port) [ CD ]
Line_1040 $$ public void isPortFree(int port) -->Line_1041 $$ socket.bind(new InetSocketAddress(port))[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_1041 $$ socket.bind(new InetSocketAddress(port))[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_1041 $$ socket.bind(new InetSocketAddress(port))[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_1041 $$ socket.bind(new InetSocketAddress(port))[ FD ]
Line_0 $$ Entry-->Line_1045 $$ //124
public class func [ CD ]
Line_1045 $$ //124
public class func -->Line_1046 $$ public void run() [ CD ]
Line_1046 $$ public void run() -->Line_1047 $$ InetSocketAddress listenAddress = new InetSocketAddress(listenPort)[ CD ]
Line_1046 $$ public void run() -->Line_1048 $$ serverSocket.bind(listenAddress)[ CD ]
Line_1047 $$ InetSocketAddress listenAddress = new InetSocketAddress(listenPort)-->Line_1048 $$ serverSocket.bind(listenAddress)[ FD ]
Line_0 $$ Entry-->Line_1052 $$ //125
public class func [ CD ]
Line_1052 $$ //125
public class func -->Line_1053 $$ public void main(String[] args) [ CD ]
Line_1053 $$ public void main(String[] args) -->Line_1054 $$ sock.bind(new InetSocketAddress(2300))[ CD ]
Line_0 $$ Entry-->Line_1058 $$ //126
public class func [ CD ]
Line_1058 $$ //126
public class func -->Line_1059 $$ public void ServerSocketTests() [ CD ]
Line_1059 $$ public void ServerSocketTests() -->Line_1060 $$ s1.bind(new InetSocketAddress(0))[ CD ]
Line_0 $$ Entry-->Line_1064 $$ //127
public class func [ CD ]
Line_1064 $$ //127
public class func -->Line_1065 $$ public void createServerSocket(int port, int backlog, InetAddress ifAddress) [ CD ]
Line_1065 $$ public void createServerSocket(int port, int backlog, InetAddress ifAddress) -->Line_1066 $$ serverSocket.bind(new InetSocketAddress(ifAddress, port), backlog)[ CD ]
Line_0 $$ Entry-->Line_1070 $$ //128
public class func [ CD ]
Line_1070 $$ //128
public class func -->Line_1071 $$ public void trySocket(int port) [ CD ]
Line_1071 $$ public void trySocket(int port) -->Line_1072 $$ s.bind(new InetSocketAddress(address, port))[ CD ]
Line_970 $$ Server s = new Server(ss)-->Line_1072 $$ s.bind(new InetSocketAddress(address, port))[ FD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_1072 $$ s.bind(new InetSocketAddress(address, port))[ FD ]
Line_0 $$ Entry-->Line_1076 $$ //129
public class func [ CD ]
Line_1076 $$ //129
public class func -->Line_1077 $$ public void testRunServer() [ CD ]
Line_1077 $$ public void testRunServer() -->Line_1078 $$ sock.bind(new InetSocketAddress("0.0.0.0", PORT))[ CD ]
Line_0 $$ Entry-->Line_1082 $$ //130
public class func [ CD ]
Line_1082 $$ //130
public class func -->Line_1083 $$ public void available(int port) [ CD ]
Line_1083 $$ public void available(int port) -->Line_1084 $$ ss.bind(new InetSocketAddress((InetAddress) null, port), 0)[ CD ]
Line_0 $$ Entry-->Line_1088 $$ //131
public class func [ CD ]
Line_1088 $$ //131
public class func -->Line_1089 $$ public void serve(int port) [ CD ]
Line_1089 $$ public void serve(int port) -->Line_1090 $$ InetSocketAddress address = new InetSocketAddress(port)[ CD ]
Line_1089 $$ public void serve(int port) -->Line_1091 $$ ss.bind(address)[ CD ]
Line_1090 $$ InetSocketAddress address = new InetSocketAddress(port)-->Line_1091 $$ ss.bind(address)[ FD ]
Line_722 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_1091 $$ ss.bind(address)[ FD ]
Line_715 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_1091 $$ ss.bind(address)[ FD ]
Line_708 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_1091 $$ ss.bind(address)[ FD ]
Line_650 $$ InetSocketAddress address = new InetSocketAddress(InetAddress.getByName("localhost"), port)-->Line_1091 $$ ss.bind(address)[ FD ]
Line_458 $$ SocketAddress address = sock.getLocalSocketAddress()-->Line_1091 $$ ss.bind(address)[ FD ]
Line_329 $$ InetAddress address = InetAddress.getLocalHost()-->Line_1091 $$ ss.bind(address)[ FD ]
Line_299 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_1091 $$ ss.bind(address)[ FD ]
Line_289 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_1091 $$ ss.bind(address)[ FD ]
Line_213 $$ InetAddress address = v == null ? null : InetAddress.getByName(v)-->Line_1091 $$ ss.bind(address)[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_1091 $$ ss.bind(address)[ FD ]
Line_0 $$ Entry-->Line_1095 $$ //132
public class func [ CD ]
Line_1095 $$ //132
public class func -->Line_1096 $$ public void isPortBound(String address, int port, String portName, int potentialErrorCode) [ CD ]
Line_1096 $$ public void isPortBound(String address, int port, String portName, int potentialErrorCode) -->Line_1097 $$ serverSocket.bind(new InetSocketAddress(address, port))[ CD ]
Line_0 $$ Entry-->Line_1103 $$ //133
public class func [ CD ]
Line_1103 $$ //133
public class func -->Line_1104 $$ public void createServerSocketUsingPortRange(InetAddress ba, int backlog, boolean isBindAddress, boolean useNIO, int tcpBufferSize, int[] tcpPortRange) [ CD ]
Line_1104 $$ public void createServerSocketUsingPortRange(InetAddress ba, int backlog, boolean isBindAddress, boolean useNIO, int tcpBufferSize, int[] tcpPortRange) -->Line_1105 $$ InetSocketAddress addr = new InetSocketAddress(isBindAddress ? ba : null, localPort)[ CD ]
Line_1104 $$ public void createServerSocketUsingPortRange(InetAddress ba, int backlog, boolean isBindAddress, boolean useNIO, int tcpBufferSize, int[] tcpPortRange) -->Line_1106 $$ socket.bind(addr, backlog)[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_1106 $$ socket.bind(addr, backlog)[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_1106 $$ socket.bind(addr, backlog)[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_1106 $$ socket.bind(addr, backlog)[ FD ]
Line_1105 $$ InetSocketAddress addr = new InetSocketAddress(isBindAddress ? ba : null, localPort)-->Line_1106 $$ socket.bind(addr, backlog)[ FD ]
Line_835 $$ InetSocketAddress addr = new InetSocketAddress(port)-->Line_1106 $$ socket.bind(addr, backlog)[ FD ]
Line_0 $$ Entry-->Line_1110 $$ //134
public class func [ CD ]
Line_1110 $$ //134
public class func -->Line_1111 $$ public void ServerSocketChannelAcceptor(int listenPort) [ CD ]
Line_1111 $$ public void ServerSocketChannelAcceptor(int listenPort) -->Line_1112 $$ sock.bind(new InetSocketAddress(listenPort), 5)[ CD ]
Line_0 $$ Entry-->Line_1116 $$ //135
public class func [ CD ]
Line_1116 $$ //135
public class func -->Line_1117 $$ public void isPortAvailable(int port) [ CD ]
Line_1117 $$ public void isPortAvailable(int port) -->Line_1118 $$ InetSocketAddress sa = new InetSocketAddress(port)[ CD ]
Line_1117 $$ public void isPortAvailable(int port) -->Line_1119 $$ serverSocket.bind(sa)[ CD ]
Line_1118 $$ InetSocketAddress sa = new InetSocketAddress(port)-->Line_1119 $$ serverSocket.bind(sa)[ FD ]
Line_406 $$ InetSocketAddress sa = new InetSocketAddress("127.0.0.1", 0)-->Line_1119 $$ serverSocket.bind(sa)[ FD ]
Line_384 $$ InetSocketAddress sa = new InetSocketAddress("127.0.0.1", 0)-->Line_1119 $$ serverSocket.bind(sa)[ FD ]
Line_0 $$ Entry-->Line_1123 $$ //136
public class func [ CD ]
Line_1123 $$ //136
public class func -->Line_1124 $$ public void bind(ServerSocket socket, InetSocketAddress address, int backlog, Configuration conf, String rangeConf) [ CD ]
Line_1124 $$ public void bind(ServerSocket socket, InetSocketAddress address, int backlog, Configuration conf, String rangeConf) -->Line_1125 $$ InetSocketAddress temp = new InetSocketAddress(address.getAddress(), port)[ CD ]
Line_1090 $$ InetSocketAddress address = new InetSocketAddress(port)-->Line_1125 $$ address.getAddress()[ FD ]
Line_722 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_1125 $$ address.getAddress()[ FD ]
Line_715 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_1125 $$ address.getAddress()[ FD ]
Line_708 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_1125 $$ address.getAddress()[ FD ]
Line_650 $$ InetSocketAddress address = new InetSocketAddress(InetAddress.getByName("localhost"), port)-->Line_1125 $$ address.getAddress()[ FD ]
Line_458 $$ SocketAddress address = sock.getLocalSocketAddress()-->Line_1125 $$ address.getAddress()[ FD ]
Line_329 $$ InetAddress address = InetAddress.getLocalHost()-->Line_1125 $$ address.getAddress()[ FD ]
Line_299 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_1125 $$ address.getAddress()[ FD ]
Line_289 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_1125 $$ address.getAddress()[ FD ]
Line_213 $$ InetAddress address = v == null ? null : InetAddress.getByName(v)-->Line_1125 $$ address.getAddress()[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_1125 $$ address.getAddress()[ FD ]
Line_1124 $$ public void bind(ServerSocket socket, InetSocketAddress address, int backlog, Configuration conf, String rangeConf) -->Line_1127 $$ socket.bind(temp, backlog)[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_1127 $$ socket.bind(temp, backlog)[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_1127 $$ socket.bind(temp, backlog)[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_1127 $$ socket.bind(temp, backlog)[ FD ]
Line_1125 $$ InetSocketAddress temp = new InetSocketAddress(address.getAddress(), port)-->Line_1127 $$ socket.bind(temp, backlog)[ FD ]
Line_0 $$ Entry-->Line_1131 $$ //137
public class func [ CD ]
Line_1131 $$ //137
public class func -->Line_1132 $$ public void createServerSocket(String type, int port) [ CD ]
Line_1132 $$ public void createServerSocket(String type, int port) -->Line_1133 $$ serverSocket.bind(new InetSocketAddress(port))[ CD ]
Line_0 $$ Entry-->Line_1137 $$ //138
public class func [ CD ]
Line_1137 $$ //138
public class func -->Line_1138 $$ public void createServerSocketTry(String listenAddress, int port, boolean ssl) [ CD ]
Line_1138 $$ public void createServerSocketTry(String listenAddress, int port, boolean ssl) -->Line_1139 $$ socket.bind(new InetSocketAddress(listenAddress, port))[ CD ]
Line_619 $$ Socket socket = serverSocket.accept()-->Line_1139 $$ socket.bind(new InetSocketAddress(listenAddress, port))[ FD ]
Line_609 $$ Socket socket = server.accept()-->Line_1139 $$ socket.bind(new InetSocketAddress(listenAddress, port))[ FD ]
Line_600 $$ Socket socket = server.accept()-->Line_1139 $$ socket.bind(new InetSocketAddress(listenAddress, port))[ FD ]
Line_0 $$ Entry-->Line_1144 $$ //139
public class func [ CD ]
Line_1144 $$ //139
public class func -->Line_1145 $$ public void createServerSocket() [ CD ]
Line_1145 $$ public void createServerSocket() -->Line_1146 $$ final InetSocketAddress endpoint = new InetSocketAddress(host, port)[ CD ]
Line_1145 $$ public void createServerSocket() -->Line_1147 $$ result.bind(endpoint)[ CD ]
Line_19 $$ Keeper result = new Keeper(server, port)-->Line_1147 $$ result.bind(endpoint)[ FD ]
Line_1146 $$ final InetSocketAddress endpoint = new InetSocketAddress(host, port)-->Line_1147 $$ result.bind(endpoint)[ FD ]
Line_1145 $$ public void createServerSocket() -->Line_1148 $$ logger.info("Bound control endpoint at [ CD ]
Line_400 $$ int port = socketServer.getLocalPort()-->Line_1148 $$ logger.info("Bound control endpoint at [ FD ]
Line_393 $$ int port = ss.getLocalPort()-->Line_1148 $$ logger.info("Bound control endpoint at [ FD ]
Line_378 $$ int port = s.getLocalPort()-->Line_1148 $$ logger.info("Bound control endpoint at [ FD ]
Line_363 $$ int port = ss.getLocalPort()-->Line_1148 $$ logger.info("Bound control endpoint at [ FD ]
Line_214 $$ int port = Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))-->Line_1148 $$ logger.info("Bound control endpoint at [ FD ]
Line_139 $$ port = serverSocket.getLocalPort()-->Line_1148 $$ logger.info("Bound control endpoint at [ FD ]
Line_130 $$ int port = sock.getLocalPort()-->Line_1148 $$ logger.info("Bound control endpoint at [ FD ]
Line_0 $$ Entry-->Line_1153 $$ //140
public class func [ CD ]
Line_1153 $$ //140
public class func -->Line_1154 $$ public void startFailed() [ CD ]
Line_1154 $$ public void startFailed() -->Line_1155 $$ s.bind(new InetSocketAddress(Inet4Address.getByName(host), port))[ CD ]
Line_970 $$ Server s = new Server(ss)-->Line_1155 $$ s.bind(new InetSocketAddress(Inet4Address.getByName(host), port))[ FD ]
Line_128 $$ InetSocketAddress s = new InetSocketAddress(InetAddress.getLocalHost(), 0)-->Line_1155 $$ s.bind(new InetSocketAddress(Inet4Address.getByName(host), port))[ FD ]
Line_1154 $$ public void startFailed() -->Line_1156 $$ agent.setPort(port)[ CD ]
Line_400 $$ int port = socketServer.getLocalPort()-->Line_1156 $$ agent.setPort(port)[ FD ]
Line_393 $$ int port = ss.getLocalPort()-->Line_1156 $$ agent.setPort(port)[ FD ]
Line_378 $$ int port = s.getLocalPort()-->Line_1156 $$ agent.setPort(port)[ FD ]
Line_363 $$ int port = ss.getLocalPort()-->Line_1156 $$ agent.setPort(port)[ FD ]
Line_214 $$ int port = Integer.parseInt(props.getProperty(PORT_PROPERTY, "0"))-->Line_1156 $$ agent.setPort(port)[ FD ]
Line_139 $$ port = serverSocket.getLocalPort()-->Line_1156 $$ agent.setPort(port)[ FD ]
Line_130 $$ int port = sock.getLocalPort()-->Line_1156 $$ agent.setPort(port)[ FD ]
Line_1154 $$ public void startFailed() -->Line_1157 $$ agent.setHost(host)[ CD ]
Line_1154 $$ public void startFailed() -->Line_1158 $$ agent.initialise()[ CD ]
Line_1154 $$ public void startFailed() -->Line_1159 $$ agent.start()[ CD ]
Line_0 $$ Entry-->Line_1163 $$ //141
public class func [ CD ]
Line_1163 $$ //141
public class func -->Line_1164 $$ public void start() [ CD ]
Line_1164 $$ public void start() -->Line_1165 $$ sock.bind(null)[ CD ]
Line_1164 $$ public void start() -->Line_1167 $$ address.getPort()[ CD ]
Line_1090 $$ InetSocketAddress address = new InetSocketAddress(port)-->Line_1167 $$ address.getPort()[ FD ]
Line_722 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_1167 $$ address.getPort()[ FD ]
Line_715 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_1167 $$ address.getPort()[ FD ]
Line_708 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_1167 $$ address.getPort()[ FD ]
Line_650 $$ InetSocketAddress address = new InetSocketAddress(InetAddress.getByName("localhost"), port)-->Line_1167 $$ address.getPort()[ FD ]
Line_458 $$ SocketAddress address = sock.getLocalSocketAddress()-->Line_1167 $$ address.getPort()[ FD ]
Line_329 $$ InetAddress address = InetAddress.getLocalHost()-->Line_1167 $$ address.getPort()[ FD ]
Line_299 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_1167 $$ address.getPort()[ FD ]
Line_289 $$ InetSocketAddress address = new InetSocketAddress("0.0.0.0", 0)-->Line_1167 $$ address.getPort()[ FD ]
Line_213 $$ InetAddress address = v == null ? null : InetAddress.getByName(v)-->Line_1167 $$ address.getPort()[ FD ]
Line_4 $$ InetSocketAddress address = (host == null) ? new InetSocketAddress(port) : new InetSocketAddress(host, port)-->Line_1167 $$ address.getPort()[ FD ]
