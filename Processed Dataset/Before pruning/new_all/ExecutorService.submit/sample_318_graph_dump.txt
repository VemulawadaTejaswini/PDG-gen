Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void future(final Callable<T> task) [ CD ]
Line_3 $$ public void future(final Callable<T> task) -->Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()[ CD ]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_4 $$ Executors.newSingleThreadExecutor()[ CD ]
Line_3 $$ public void future(final Callable<T> task) -->Line_5 $$ Future<T> future = executor.submit(task)[ CD ]
Line_5 $$ Future<T> future = executor.submit(task)-->Line_5 $$ executor.submit(task)[ CD ]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_5 $$ executor.submit(task)[ FD ]
Line_3 $$ public void future(final Callable<T> task) -->Line_6 $$ executor.shutdown()[ CD ]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_6 $$ executor.shutdown()[ FD ]
Line_0 $$ Entry-->Line_10 $$ //1
public class func [ CD ]
Line_10 $$ //1
public class func -->Line_11 $$ public void runInParallel(ExecutorService exec, Collection<Runnable> runnables) [ CD ]
Line_12 $$ Runnable runnable-->Line_13 $$ exec.submit(runnable)[ FD ]
Line_11 $$ public void runInParallel(ExecutorService exec, Collection<Runnable> runnables) -->Line_14 $$ exec.shutdown()[ CD ]
Line_11 $$ public void runInParallel(ExecutorService exec, Collection<Runnable> runnables) -->Line_15 $$ exec.awaitTermination(1, TimeUnit.DAYS)[ CD ]
Line_0 $$ Entry-->Line_19 $$ //2
public class func [ CD ]
Line_19 $$ //2
public class func -->Line_20 $$ public void testConcurrentGroups() [ CD ]
Line_20 $$ public void testConcurrentGroups() -->Line_21 $$ executorService.submit(new TestProducer())[ CD ]
Line_20 $$ public void testConcurrentGroups() -->Line_22 $$ executorService.shutdown()[ CD ]
Line_20 $$ public void testConcurrentGroups() -->Line_23 $$ executorService.awaitTermination(5, TimeUnit.MINUTES)[ CD ]
Line_0 $$ Entry-->Line_27 $$ //3
public class func [ CD ]
Line_27 $$ //3
public class func -->Line_28 $$ public void run() [ CD ]
Line_28 $$ public void run() -->Line_29 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_28 $$ public void run() -->Line_28 $$ public void run() [ CD ]
Line_29 $$ for (int i = 0; i < 100; i++) -->Line_29 $$ int i = 0[ CD ]
Line_29 $$ for (int i = 0; i < 100; i++) -->Line_29 $$ i++[ CD ]
Line_29 $$ int i = 0-->Line_29 $$ i++[ FD ]
Line_29 $$ for (int i = 0; i < 100; i++) -->Line_30 $$ pool.submit(new TestRunnable(stripe, actual, i))[ CD ]
Line_28 $$ public void run() -->Line_32 $$ pool.shutdown()[ CD ]
Line_0 $$ Entry-->Line_36 $$ //4
public class func [ CD ]
Line_36 $$ //4
public class func -->Line_37 $$ public void MultiTaskSource(List<TaskSource> sources) [ CD ]
Line_37 $$ public void MultiTaskSource(List<TaskSource> sources) -->Line_38 $$ ExecutorService service = Executors.newFixedThreadPool(sources.size())[ CD ]
Line_38 $$ ExecutorService service = Executors.newFixedThreadPool(sources.size())-->Line_38 $$ Executors.newFixedThreadPool(sources.size())[ CD ]
Line_38 $$ ExecutorService service = Executors.newFixedThreadPool(sources.size())-->Line_40 $$ service.submit(new TaskRunner(source))[ FD ]
Line_37 $$ public void MultiTaskSource(List<TaskSource> sources) -->Line_42 $$ service.shutdown()[ CD ]
Line_38 $$ ExecutorService service = Executors.newFixedThreadPool(sources.size())-->Line_42 $$ service.shutdown()[ FD ]
Line_0 $$ Entry-->Line_46 $$ //5
public class func [ CD ]
Line_46 $$ //5
public class func -->Line_47 $$ public void AckProcessor(Map<String, PeerHandler> quorumMap, ClusterConfiguration cnf) [ CD ]
Line_47 $$ public void AckProcessor(Map<String, PeerHandler> quorumMap, ClusterConfiguration cnf) -->Line_48 $$ Executors.newSingleThreadExecutor(DaemonThreadFactory.FACTORY)[ CD ]
Line_47 $$ public void AckProcessor(Map<String, PeerHandler> quorumMap, ClusterConfiguration cnf) -->Line_49 $$ es.submit(this)[ CD ]
Line_47 $$ public void AckProcessor(Map<String, PeerHandler> quorumMap, ClusterConfiguration cnf) -->Line_50 $$ es.shutdown()[ CD ]
Line_0 $$ Entry-->Line_54 $$ //6
public class func [ CD ]
Line_54 $$ //6
public class func -->Line_55 $$ public void internalNonBlockingStart() [ CD ]
Line_55 $$ public void internalNonBlockingStart() -->Line_56 $$ ExecutorService executors = Executors.newFixedThreadPool(1)[ CD ]
Line_56 $$ ExecutorService executors = Executors.newFixedThreadPool(1)-->Line_56 $$ Executors.newFixedThreadPool(1)[ CD ]
Line_55 $$ public void internalNonBlockingStart() -->Line_57 $$ executors.submit(stackRunner)[ CD ]
Line_56 $$ ExecutorService executors = Executors.newFixedThreadPool(1)-->Line_57 $$ executors.submit(stackRunner)[ FD ]
Line_55 $$ public void internalNonBlockingStart() -->Line_58 $$ executors.shutdown()[ CD ]
Line_56 $$ ExecutorService executors = Executors.newFixedThreadPool(1)-->Line_58 $$ executors.shutdown()[ FD ]
Line_0 $$ Entry-->Line_62 $$ //7
public class func [ CD ]
Line_62 $$ //7
public class func -->Line_63 $$ public void createAsciidoctor() [ CD ]
Line_63 $$ public void createAsciidoctor() -->Line_64 $$ es.submit(new Callable<Asciidoctor>() [ CD ]
Line_65 $$ @Override
public Asciidoctor call() throws Exception -->Line_67 $$ return Asciidoctor.Factory.create();[ CD ]
Line_67 $$ return Asciidoctor.Factory.create();-->Line_67 $$ Asciidoctor.Factory.create()[ CD ]
Line_63 $$ public void createAsciidoctor() -->Line_70 $$ es.shutdown()[ CD ]
Line_0 $$ Entry-->Line_74 $$ //8
public class func [ CD ]
Line_74 $$ //8
public class func -->Line_75 $$ public void doConversion() [ CD ]
Line_75 $$ public void doConversion() -->Line_76 $$ final Future<VideoFile> future = service.submit(new ConverterProcess(securityContext, inputVideo, outputFileName, outputSize))[ CD ]
Line_76 $$ final Future<VideoFile> future = service.submit(new ConverterProcess(securityContext, inputVideo, outputFileName, outputSize))-->Line_76 $$ service.submit(new ConverterProcess(securityContext, inputVideo, outputFileName, outputSize))[ CD ]
Line_38 $$ ExecutorService service = Executors.newFixedThreadPool(sources.size())-->Line_76 $$ service.submit(new ConverterProcess(securityContext, inputVideo, outputFileName, outputSize))[ FD ]
Line_75 $$ public void doConversion() -->Line_77 $$ service.shutdown()[ CD ]
Line_38 $$ ExecutorService service = Executors.newFixedThreadPool(sources.size())-->Line_77 $$ service.shutdown()[ FD ]
Line_0 $$ Entry-->Line_81 $$ //9
public class func [ CD ]
Line_81 $$ //9
public class func -->Line_82 $$ public void descendants(final Optional<NodeReadTrx> pRtx) [ CD ]
Line_82 $$ public void descendants(final Optional<NodeReadTrx> pRtx) -->Line_83 $$ executor.submit(new GetDescendants())[ CD ]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_83 $$ executor.submit(new GetDescendants())[ FD ]
Line_82 $$ public void descendants(final Optional<NodeReadTrx> pRtx) -->Line_84 $$ executor.shutdown()[ CD ]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_84 $$ executor.shutdown()[ FD ]
Line_0 $$ Entry-->Line_88 $$ //10
public class func [ CD ]
Line_88 $$ //10
public class func -->Line_89 $$ public void start() [ CD ]
Line_89 $$ public void start() -->Line_90 $$ return executor.submit(createCoordinator());[ CD ]
Line_90 $$ return executor.submit(createCoordinator());-->Line_90 $$ executor.submit(createCoordinator())[ CD ]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_90 $$ executor.submit(createCoordinator())[ FD ]
Line_89 $$ public void start() -->Line_91 $$ executor.shutdown()[ CD ]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_91 $$ executor.shutdown()[ FD ]
Line_0 $$ Entry-->Line_95 $$ //11
public class func [ CD ]
Line_95 $$ //11
public class func -->Line_96 $$ public void runAsyncInternal() [ CD ]
Line_96 $$ public void runAsyncInternal() -->Line_97 $$ Crate.Tuple<ExecutorService, Boolean> crate = Concurrent.getManagedSingleThreadedExecutorService()[ CD ]
Line_97 $$ Crate.Tuple<ExecutorService, Boolean> crate = Concurrent.getManagedSingleThreadedExecutorService()-->Line_97 $$ Concurrent.getManagedSingleThreadedExecutorService()[ CD ]
Line_96 $$ public void runAsyncInternal() -->Line_98 $$ !crate.getPayload2()[ CD ]
Line_98 $$ !crate.getPayload2()-->Line_98 $$ crate.getPayload2()[ CD ]
Line_97 $$ Crate.Tuple<ExecutorService, Boolean> crate = Concurrent.getManagedSingleThreadedExecutorService()-->Line_98 $$ crate.getPayload2()[ FD ]
Line_96 $$ public void runAsyncInternal() -->Line_99 $$ ExecutorService executor = crate.getPayload1()[ CD ]
Line_99 $$ ExecutorService executor = crate.getPayload1()-->Line_99 $$ crate.getPayload1()[ CD ]
Line_97 $$ Crate.Tuple<ExecutorService, Boolean> crate = Concurrent.getManagedSingleThreadedExecutorService()-->Line_99 $$ crate.getPayload1()[ FD ]
Line_96 $$ public void runAsyncInternal() -->Line_100 $$ executor.submit(callable)[ CD ]
Line_99 $$ ExecutorService executor = crate.getPayload1()-->Line_100 $$ executor.submit(callable)[ FD ]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_100 $$ executor.submit(callable)[ FD ]
Line_96 $$ public void runAsyncInternal() -->Line_101 $$ executor.shutdown()[ CD ]
Line_99 $$ ExecutorService executor = crate.getPayload1()-->Line_101 $$ executor.shutdown()[ FD ]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_101 $$ executor.shutdown()[ FD ]
Line_0 $$ Entry-->Line_105 $$ //12
public class func [ CD ]
Line_105 $$ //12
public class func -->Line_106 $$ public void compressAsynchronously(String nameOfFile2Compress, String nameOfCompressedFile, String innerEntryName) [ CD ]
Line_106 $$ public void compressAsynchronously(String nameOfFile2Compress, String nameOfCompressedFile, String innerEntryName) -->Line_107 $$ Future<?> future = executor.submit(new CompressionRunnable(compressor, nameOfFile2Compress, nameOfCompressedFile, innerEntryName))[ CD ]
Line_107 $$ Future<?> future = executor.submit(new CompressionRunnable(compressor, nameOfFile2Compress, nameOfCompressedFile, innerEntryName))-->Line_107 $$ executor.submit(new CompressionRunnable(compressor, nameOfFile2Compress, nameOfCompressedFile, innerEntryName))[ CD ]
Line_99 $$ ExecutorService executor = crate.getPayload1()-->Line_107 $$ executor.submit(new CompressionRunnable(compressor, nameOfFile2Compress, nameOfCompressedFile, innerEntryName))[ FD ]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_107 $$ executor.submit(new CompressionRunnable(compressor, nameOfFile2Compress, nameOfCompressedFile, innerEntryName))[ FD ]
Line_106 $$ public void compressAsynchronously(String nameOfFile2Compress, String nameOfCompressedFile, String innerEntryName) -->Line_109 $$ executor.shutdown()[ CD ]
Line_99 $$ ExecutorService executor = crate.getPayload1()-->Line_109 $$ executor.shutdown()[ FD ]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_109 $$ executor.shutdown()[ FD ]
Line_29 $$ int i = 0-->Line_29 $$ for (int i = 0; i < 100; i++) [ FD ]
Line_29 $$ int i = 0-->Line_29 $$ for (int i = 0; i < 100; i++) [ FD ]
Line_29 $$ int i = 0-->Line_29 $$ i++[ FD ]
