Line_0 $$ Entry-->Line_2 $$ //13
public class func [ CD ]
Line_2 $$ //13
public class func -->Line_3 $$ public void testNoDefaultExpirationForUrlsWithQueryString() [ CD ]
Line_3 $$ public void testNoDefaultExpirationForUrlsWithQueryString() -->Line_4 $$ server.enqueue(new MockResponse().addHeader("Last-Modified: " + formatDate(-105, TimeUnit.SECONDS)).addHeader("Date: " + formatDate(-5, TimeUnit.SECONDS)).setBody("A"))[ CD ]
Line_3 $$ public void testNoDefaultExpirationForUrlsWithQueryString() -->Line_8 $$ server.enqueue(new MockResponse().setBody("B"))[ CD ]
Line_3 $$ public void testNoDefaultExpirationForUrlsWithQueryString() -->Line_9 $$ server.play()[ CD ]
Line_3 $$ public void testNoDefaultExpirationForUrlsWithQueryString() -->Line_10 $$ URL url = server.getUrl("/?foo=bar")[ CD ]
Line_10 $$ URL url = server.getUrl("/?foo=bar")-->Line_10 $$ server.getUrl("/?foo=bar")[ CD ]
Line_3 $$ public void testNoDefaultExpirationForUrlsWithQueryString() -->Line_11 $$ assertEquals("A", readAscii(url.openConnection()))[ CD ]
Line_10 $$ URL url = server.getUrl("/?foo=bar")-->Line_11 $$ url.openConnection()[ FD ]
Line_3 $$ public void testNoDefaultExpirationForUrlsWithQueryString() -->Line_12 $$ assertEquals("B", readAscii(url.openConnection()))[ CD ]
Line_10 $$ URL url = server.getUrl("/?foo=bar")-->Line_12 $$ url.openConnection()[ FD ]
