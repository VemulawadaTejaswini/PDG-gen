Line_0 $$ Entry-->Line_2 $$ //39
public class func [ CD ]
Line_2 $$ //39
public class func -->Line_3 $$ public void connect(ImapSettings settings, TrustedSocketFactory socketFactory) [ CD ]
Line_3 $$ public void connect(ImapSettings settings, TrustedSocketFactory socketFactory) -->Line_4 $$ Log.d(LOG_TAG, "Connecting to " + settings.getHost() + " as " + address)[ CD ]
Line_3 $$ public void connect(ImapSettings settings, TrustedSocketFactory socketFactory) -->Line_5 $$ SocketAddress socketAddress = new InetSocketAddress(address, settings.getPort())[ CD ]
Line_3 $$ public void connect(ImapSettings settings, TrustedSocketFactory socketFactory) -->Line_6 $$ if (settings.getConnectionSecurity() == ConnectionSecurity.SSL_TLS_REQUIRED) [ CD ]
Line_6 $$ if (settings.getConnectionSecurity() == ConnectionSecurity.SSL_TLS_REQUIRED) -->Line_7 $$ socketFactory.createSocket(null, settings.getHost(), settings.getPort(), settings.getClientCertificateAlias())[ CD ]
Line_3 $$ public void connect(ImapSettings settings, TrustedSocketFactory socketFactory) -->Line_15 $$ socket.connect(socketAddress, SOCKET_CONNECT_TIMEOUT)[ CD ]
Line_5 $$ SocketAddress socketAddress = new InetSocketAddress(address, settings.getPort())-->Line_15 $$ socket.connect(socketAddress, SOCKET_CONNECT_TIMEOUT)[ FD ]
Line_3 $$ public void connect(ImapSettings settings, TrustedSocketFactory socketFactory) -->Line_16 $$ Log.w(LOG_TAG, "could not connect to " + address, e)[ CD ]
