Line_0 $$ Entry-->Line_2 $$ //36
public class func [ CD ]
Line_2 $$ //36
public class func -->Line_3 $$ public void drawHistogram(Graphics2D g2d) [ CD ]
Line_3 $$ public void drawHistogram(Graphics2D g2d) -->Line_4 $$ for (int i = 0; i < histoRect.width; i++) [ CD ]
Line_3 $$ public void drawHistogram(Graphics2D g2d) -->Line_3 $$ public void drawHistogram(Graphics2D g2d) [ CD ]
Line_4 $$ for (int i = 0; i < histoRect.width; i++) -->Line_4 $$ int i = 0[ CD ]
Line_4 $$ for (int i = 0; i < histoRect.width; i++) -->Line_4 $$ i++[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ i++[ FD ]
Line_4 $$ for (int i = 0; i < histoRect.width; i++) -->Line_5 $$ final int binIndex = (int) Math.floor(minViewBinIndex + i * binsPerPixel)[ CD ]
Line_4 $$ for (int i = 0; i < histoRect.width; i++) -->Line_6 $$ double binHeight = 0.0[ CD ]
Line_4 $$ for (int i = 0; i < histoRect.width; i++) -->Line_7 $$ if (binIndex >= 0 && binIndex < histogramBins.length) [ CD ]
Line_7 $$ if (binIndex >= 0 && binIndex < histogramBins.length) -->Line_8 $$ final double counts = histogramBins[binIndex][ CD ]
Line_7 $$ if (binIndex >= 0 && binIndex < histogramBins.length) -->Line_9 $$ binHeight = countsScale * counts[ CD ]
Line_6 $$ double binHeight = 0.0-->Line_9 $$ binHeight = countsScale * counts[ FD ]
Line_9 $$ binHeight = countsScale * counts-->Line_9 $$ binHeight = countsScale * counts[ FD ]
Line_8 $$ final double counts = histogramBins[binIndex]-->Line_9 $$ binHeight = countsScale * counts[ FD ]
Line_4 $$ for (int i = 0; i < histoRect.width; i++) -->Line_11 $$ if (binHeight >= histoRect.height) [ CD ]
Line_6 $$ double binHeight = 0.0-->Line_11 $$ if (binHeight >= histoRect.height) [ FD ]
Line_9 $$ binHeight = countsScale * counts-->Line_11 $$ if (binHeight >= histoRect.height) [ FD ]
Line_11 $$ if (binHeight >= histoRect.height) -->Line_14 $$ binHeight = histoRect.height - 1[ CD ]
Line_6 $$ double binHeight = 0.0-->Line_14 $$ binHeight = histoRect.height - 1[ FD ]
Line_9 $$ binHeight = countsScale * counts-->Line_14 $$ binHeight = histoRect.height - 1[ FD ]
Line_14 $$ binHeight = histoRect.height - 1-->Line_14 $$ binHeight = histoRect.height - 1[ FD ]
Line_4 $$ for (int i = 0; i < histoRect.width; i++) -->Line_16 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ CD ]
Line_6 $$ double binHeight = 0.0-->Line_16 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ FD ]
Line_9 $$ binHeight = countsScale * counts-->Line_16 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ FD ]
Line_14 $$ binHeight = histoRect.height - 1-->Line_16 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ FD ]
Line_4 $$ for (int i = 0; i < histoRect.width; i++) -->Line_17 $$ g2d.fill(r)[ CD ]
Line_3 $$ public void drawHistogram(Graphics2D g2d) -->Line_19 $$ g2d.setPaint(oldPaint)[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < histoRect.width; i++) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < histoRect.width; i++) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ i++[ FD ]
Line_8 $$ final double counts = histogramBins[binIndex]-->Line_9 $$ binHeight = countsScale * counts[ FD ]
Line_6 $$ double binHeight = 0.0-->Line_11 $$ if (binHeight >= histoRect.height) [ FD ]
Line_9 $$ binHeight = countsScale * counts-->Line_11 $$ if (binHeight >= histoRect.height) [ FD ]
Line_14 $$ binHeight = histoRect.height - 1-->Line_11 $$ if (binHeight >= histoRect.height) [ FD ]
Line_6 $$ double binHeight = 0.0-->Line_16 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ FD ]
Line_9 $$ binHeight = countsScale * counts-->Line_16 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ FD ]
Line_14 $$ binHeight = histoRect.height - 1-->Line_16 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ FD ]
