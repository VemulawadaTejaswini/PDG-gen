Line_0 $$ Entry-->Line_2 $$ //115
public class func [ CD ]
Line_2 $$ //115
public class func -->Line_3 $$ public void closePath(Graphics2D g, Path2D.Double path, double previousX, Rectangle2D bounds, double yTopMargin) [ CD ]
Line_3 $$ public void closePath(Graphics2D g, Path2D.Double path, double previousX, Rectangle2D bounds, double yTopMargin) -->Line_4 $$ double yBottomOfArea = bounds.getY() + bounds.getHeight() - yTopMargin[ CD ]
Line_3 $$ public void closePath(Graphics2D g, Path2D.Double path, double previousX, Rectangle2D bounds, double yTopMargin) -->Line_5 $$ path.lineTo(previousX, yBottomOfArea)[ CD ]
Line_4 $$ double yBottomOfArea = bounds.getY() + bounds.getHeight() - yTopMargin-->Line_5 $$ path.lineTo(previousX, yBottomOfArea)[ FD ]
Line_3 $$ public void closePath(Graphics2D g, Path2D.Double path, double previousX, Rectangle2D bounds, double yTopMargin) -->Line_6 $$ path.closePath()[ CD ]
Line_3 $$ public void closePath(Graphics2D g, Path2D.Double path, double previousX, Rectangle2D bounds, double yTopMargin) -->Line_7 $$ g.fill(path)[ CD ]
