Line_0 $$ Entry-->Line_2 $$ //35
public class func [ CD ]
Line_2 $$ //35
public class func -->Line_3 $$ public void info() [ CD ]
Line_3 $$ public void info() -->Line_4 $$ final Runtime rt = Runtime.getRuntime()[ CD ]
Line_4 $$ final Runtime rt = Runtime.getRuntime()-->Line_4 $$ Runtime.getRuntime()[ CD ]
Line_3 $$ public void info() -->Line_5 $$ final long max = rt.maxMemory()[ CD ]
Line_5 $$ final long max = rt.maxMemory()-->Line_5 $$ rt.maxMemory()[ CD ]
Line_4 $$ final Runtime rt = Runtime.getRuntime()-->Line_5 $$ rt.maxMemory()[ FD ]
Line_3 $$ public void info() -->Line_6 $$ final long total = rt.totalMemory()[ CD ]
Line_6 $$ final long total = rt.totalMemory()-->Line_6 $$ rt.totalMemory()[ CD ]
Line_4 $$ final Runtime rt = Runtime.getRuntime()-->Line_6 $$ rt.totalMemory()[ FD ]
Line_3 $$ public void info() -->Line_7 $$ final long used = total - rt.freeMemory()[ CD ]
Line_4 $$ final Runtime rt = Runtime.getRuntime()-->Line_7 $$ rt.freeMemory()[ FD ]
Line_3 $$ public void info() -->Line_8 $$ return TOTAL_MEM_C + Performance.format(max, true) + NL + RESERVED_MEM_C + Performance.format(total, true) + NL + MEMUSED_C + Performance.format(used, true) + NL + NL + H_USED_MEM;[ CD ]
Line_5 $$ final long max = rt.maxMemory()-->Line_8 $$ Performance.format(max, true)[ FD ]
Line_6 $$ final long total = rt.totalMemory()-->Line_9 $$ Performance.format(total, true)[ FD ]
Line_7 $$ final long used = total - rt.freeMemory()-->Line_10 $$ Performance.format(used, true)[ FD ]
