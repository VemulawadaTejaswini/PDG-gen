Line_0 $$ Entry-->Line_2 $$ //83
public class func [ CD ]
Line_2 $$ //83
public class func -->Line_3 $$ public void Benchmark(String name, PrintWriter o, PrintWriter l) [ CD ]
Line_3 $$ public void Benchmark(String name, PrintWriter o, PrintWriter l) -->Line_4 $$ Runtime r = Runtime.getRuntime()[ CD ]
Line_4 $$ Runtime r = Runtime.getRuntime()-->Line_4 $$ Runtime.getRuntime()[ CD ]
Line_3 $$ public void Benchmark(String name, PrintWriter o, PrintWriter l) -->Line_5 $$ long fmem = r.freeMemory()[ CD ]
Line_5 $$ long fmem = r.freeMemory()-->Line_5 $$ r.freeMemory()[ CD ]
Line_4 $$ Runtime r = Runtime.getRuntime()-->Line_5 $$ r.freeMemory()[ FD ]
Line_3 $$ public void Benchmark(String name, PrintWriter o, PrintWriter l) -->Line_6 $$ long tmem = r.totalMemory()[ CD ]
Line_6 $$ long tmem = r.totalMemory()-->Line_6 $$ r.totalMemory()[ CD ]
Line_4 $$ Runtime r = Runtime.getRuntime()-->Line_6 $$ r.totalMemory()[ FD ]
Line_3 $$ public void Benchmark(String name, PrintWriter o, PrintWriter l) -->Line_7 $$ out.printf("[%,18dus, %,18d b mem]\tStarting (after gc) \n", 0, umem)[ CD ]
