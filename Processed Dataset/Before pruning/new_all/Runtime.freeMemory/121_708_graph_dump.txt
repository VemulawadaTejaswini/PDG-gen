Line_0 $$ Entry-->Line_2 $$ //120
public class func [ CD ]
Line_2 $$ //120
public class func -->Line_3 $$ public void create(int rows, int cols, boolean isDense) [ CD ]
Line_3 $$ public void create(int rows, int cols, boolean isDense) -->Line_4 $$ Runtime r = Runtime.getRuntime()[ CD ]
Line_4 $$ Runtime r = Runtime.getRuntime()-->Line_4 $$ Runtime.getRuntime()[ CD ]
Line_3 $$ public void create(int rows, int cols, boolean isDense) -->Line_5 $$ long available = r.freeMemory()[ CD ]
Line_5 $$ long available = r.freeMemory()-->Line_5 $$ r.freeMemory()[ CD ]
Line_4 $$ Runtime r = Runtime.getRuntime()-->Line_5 $$ r.freeMemory()[ FD ]
Line_3 $$ public void create(int rows, int cols, boolean isDense) -->Line_6 $$ if (size < available) [ CD ]
Line_5 $$ long available = r.freeMemory()-->Line_6 $$ if (size < available) [ FD ]
Line_6 $$ if (size < available) -->Line_7 $$ if (isDense) [ CD ]
Line_7 $$ if (isDense) -->Line_8 $$ if (size > Integer.MAX_VALUE) [ CD ]
Line_8 $$ if (size > Integer.MAX_VALUE) -->Line_9 $$ LOGGER.finer("too big for ArrayMatrix; creating new " + "OnDiskMatrix")[ CD ]
Line_8 $$ if (size > Integer.MAX_VALUE) -->Line_11 $$ return new OnDiskMatrix(rows, cols);[ CD ]
Line_8 $$ if (size > Integer.MAX_VALUE) -->Line_13 $$ LOGGER.finer("creating new (in memory) ArrayMatrix")[ CD ]
Line_8 $$ if (size > Integer.MAX_VALUE) -->Line_14 $$ return new ArrayMatrix(rows, cols);[ CD ]
Line_7 $$ if (isDense) -->Line_17 $$ LOGGER.finer("can fit sparse in memory; creating " + "new SparseMatrix")[ CD ]
Line_7 $$ if (isDense) -->Line_19 $$ return new YaleSparseMatrix(rows, cols);[ CD ]
Line_6 $$ if (size < available) -->Line_23 $$ LOGGER.finer("cannot fit in memory; creating new OnDiskMatrix")[ CD ]
Line_6 $$ if (size < available) -->Line_24 $$ return new OnDiskMatrix(rows, cols);[ CD ]
