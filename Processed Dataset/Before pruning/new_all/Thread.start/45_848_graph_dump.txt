Line_0 $$ Entry-->Line_2 $$ //44
public class func [ CD ]
Line_2 $$ //44
public class func -->Line_3 $$ public void maybePerformUpdateCheck(Shell shell, int buildNumber) [ CD ]
Line_3 $$ public void maybePerformUpdateCheck(Shell shell, int buildNumber) -->Line_4 $$ final IPreferenceStore preferences = Activator.getDefault().getPreferenceStore()[ CD ]
Line_4 $$ final IPreferenceStore preferences = Activator.getDefault().getPreferenceStore()-->Line_4 $$ Activator.getDefault().getPreferenceStore()[ CD ]
Line_3 $$ public void maybePerformUpdateCheck(Shell shell, int buildNumber) -->Line_5 $$ if (preferences.getBoolean(IPreferenceConstants.P_UPDATE_CHECK_ENABLED) && (buildNumber != 0)) [ CD ]
Line_4 $$ final IPreferenceStore preferences = Activator.getDefault().getPreferenceStore()-->Line_5 $$ preferences.getBoolean(IPreferenceConstants.P_UPDATE_CHECK_ENABLED)[ FD ]
Line_5 $$ if (preferences.getBoolean(IPreferenceConstants.P_UPDATE_CHECK_ENABLED) && (buildNumber != 0)) -->Line_6 $$ final UpdateCheckTask task = new UpdateCheckTask(shell, buildNumber)[ CD ]
Line_5 $$ if (preferences.getBoolean(IPreferenceConstants.P_UPDATE_CHECK_ENABLED) && (buildNumber != 0)) -->Line_7 $$ final Thread thread = new Thread(task)[ CD ]
Line_5 $$ if (preferences.getBoolean(IPreferenceConstants.P_UPDATE_CHECK_ENABLED) && (buildNumber != 0)) -->Line_8 $$ thread.start()[ CD ]
Line_7 $$ final Thread thread = new Thread(task)-->Line_8 $$ thread.start()[ FD ]
