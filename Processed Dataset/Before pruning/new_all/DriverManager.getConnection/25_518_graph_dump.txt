Line_0 $$ Entry-->Line_2 $$ //24
public class func [ CD ]
Line_2 $$ //24
public class func -->Line_3 $$ public void testSplit_ArrayReference() [ CD ]
Line_3 $$ public void testSplit_ArrayReference() -->Line_4 $$ Connection conn = DriverManager.getConnection(getUrl())[ CD ]
Line_4 $$ Connection conn = DriverManager.getConnection(getUrl())-->Line_4 $$ DriverManager.getConnection(getUrl())[ CD ]
Line_3 $$ public void testSplit_ArrayReference() -->Line_5 $$ initTable(conn, "ONE,TWO,THREE")[ CD ]
Line_4 $$ Connection conn = DriverManager.getConnection(getUrl())-->Line_5 $$ initTable(conn, "ONE,TWO,THREE")[ FD ]
Line_3 $$ public void testSplit_ArrayReference() -->Line_6 $$ ResultSet rs = conn.createStatement().executeQuery("SELECT REGEXP_SPLIT(VAL, ',')[1] FROM SPLIT_TEST")[ CD ]
Line_6 $$ ResultSet rs = conn.createStatement().executeQuery("SELECT REGEXP_SPLIT(VAL, ',')[1] FROM SPLIT_TEST")-->Line_6 $$ conn.createStatement().executeQuery("SELECT REGEXP_SPLIT(VAL, ',')[1] FROM SPLIT_TEST")[ CD ]
Line_4 $$ Connection conn = DriverManager.getConnection(getUrl())-->Line_6 $$ conn.createStatement()[ FD ]
Line_3 $$ public void testSplit_ArrayReference() -->Line_8 $$ assertTrue(rs.next())[ CD ]
Line_6 $$ ResultSet rs = conn.createStatement().executeQuery("SELECT REGEXP_SPLIT(VAL, ',')[1] FROM SPLIT_TEST")-->Line_8 $$ rs.next()[ FD ]
Line_3 $$ public void testSplit_ArrayReference() -->Line_9 $$ assertEquals("ONE", rs.getString(1))[ CD ]
Line_6 $$ ResultSet rs = conn.createStatement().executeQuery("SELECT REGEXP_SPLIT(VAL, ',')[1] FROM SPLIT_TEST")-->Line_9 $$ rs.getString(1)[ FD ]
Line_3 $$ public void testSplit_ArrayReference() -->Line_10 $$ assertFalse(rs.next())[ CD ]
Line_6 $$ ResultSet rs = conn.createStatement().executeQuery("SELECT REGEXP_SPLIT(VAL, ',')[1] FROM SPLIT_TEST")-->Line_10 $$ rs.next()[ FD ]
