Line_0 $$ Entry-->Line_2 $$ //32
public class func [ CD ]
Line_2 $$ //32
public class func -->Line_3 $$ public void testFalseOrFalse() [ CD ]
Line_3 $$ public void testFalseOrFalse() -->Line_4 $$ Connection conn = DriverManager.getConnection(getUrl(), props)[ CD ]
Line_4 $$ Connection conn = DriverManager.getConnection(getUrl(), props)-->Line_4 $$ DriverManager.getConnection(getUrl(), props)[ CD ]
Line_3 $$ public void testFalseOrFalse() -->Line_5 $$ ResultSet rs = conn.createStatement().executeQuery("SELECT (FALSE OR FALSE) AS B FROM SYSTEM.CATALOG LIMIT 1")[ CD ]
Line_5 $$ ResultSet rs = conn.createStatement().executeQuery("SELECT (FALSE OR FALSE) AS B FROM SYSTEM.CATALOG LIMIT 1")-->Line_5 $$ conn.createStatement().executeQuery("SELECT (FALSE OR FALSE) AS B FROM SYSTEM.CATALOG LIMIT 1")[ CD ]
Line_4 $$ Connection conn = DriverManager.getConnection(getUrl(), props)-->Line_5 $$ conn.createStatement()[ FD ]
Line_3 $$ public void testFalseOrFalse() -->Line_6 $$ assertTrue(rs.next())[ CD ]
Line_5 $$ ResultSet rs = conn.createStatement().executeQuery("SELECT (FALSE OR FALSE) AS B FROM SYSTEM.CATALOG LIMIT 1")-->Line_6 $$ rs.next()[ FD ]
Line_3 $$ public void testFalseOrFalse() -->Line_7 $$ assertFalse(rs.getBoolean(1))[ CD ]
Line_5 $$ ResultSet rs = conn.createStatement().executeQuery("SELECT (FALSE OR FALSE) AS B FROM SYSTEM.CATALOG LIMIT 1")-->Line_7 $$ rs.getBoolean(1)[ FD ]
Line_3 $$ public void testFalseOrFalse() -->Line_8 $$ conn.close()[ CD ]
Line_4 $$ Connection conn = DriverManager.getConnection(getUrl(), props)-->Line_8 $$ conn.close()[ FD ]
