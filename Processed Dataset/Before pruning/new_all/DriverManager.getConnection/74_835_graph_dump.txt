Line_0 $$ Entry-->Line_2 $$ //73
public class func [ CD ]
Line_2 $$ //73
public class func -->Line_3 $$ public void testGetSplitsWithSkipScanFilter() [ CD ]
Line_3 $$ public void testGetSplitsWithSkipScanFilter() -->Line_4 $$ Connection conn = DriverManager.getConnection(getUrl(), props)[ CD ]
Line_4 $$ Connection conn = DriverManager.getConnection(getUrl(), props)-->Line_4 $$ DriverManager.getConnection(getUrl(), props)[ CD ]
Line_3 $$ public void testGetSplitsWithSkipScanFilter() -->Line_5 $$ PhoenixConnection pconn = conn.unwrap(PhoenixConnection.class)[ CD ]
Line_5 $$ PhoenixConnection pconn = conn.unwrap(PhoenixConnection.class)-->Line_5 $$ conn.unwrap(PhoenixConnection.class)[ CD ]
Line_4 $$ Connection conn = DriverManager.getConnection(getUrl(), props)-->Line_5 $$ conn.unwrap(PhoenixConnection.class)[ FD ]
Line_3 $$ public void testGetSplitsWithSkipScanFilter() -->Line_6 $$ PTable table = pconn.getMetaDataCache().getTable(new PTableKey(pconn.getTenantId(), TABLE_NAME))[ CD ]
Line_6 $$ PTable table = pconn.getMetaDataCache().getTable(new PTableKey(pconn.getTenantId(), TABLE_NAME))-->Line_6 $$ pconn.getMetaDataCache().getTable(new PTableKey(pconn.getTenantId(), TABLE_NAME))[ CD ]
Line_5 $$ PhoenixConnection pconn = conn.unwrap(PhoenixConnection.class)-->Line_6 $$ pconn.getMetaDataCache()[ FD ]
Line_5 $$ PhoenixConnection pconn = conn.unwrap(PhoenixConnection.class)-->Line_6 $$ pconn.getTenantId()[ FD ]
Line_3 $$ public void testGetSplitsWithSkipScanFilter() -->Line_7 $$ TableRef tableRef = new TableRef(table)[ CD ]
Line_3 $$ public void testGetSplitsWithSkipScanFilter() -->Line_8 $$ List<HRegionLocation> regions = pconn.getQueryServices().getAllTableRegions(tableRef.getTable().getPhysicalName().getBytes())[ CD ]
Line_8 $$ List<HRegionLocation> regions = pconn.getQueryServices().getAllTableRegions(tableRef.getTable().getPhysicalName().getBytes())-->Line_8 $$ pconn.getQueryServices().getAllTableRegions(tableRef.getTable().getPhysicalName().getBytes())[ CD ]
Line_5 $$ PhoenixConnection pconn = conn.unwrap(PhoenixConnection.class)-->Line_8 $$ pconn.getQueryServices()[ FD ]
Line_7 $$ TableRef tableRef = new TableRef(table)-->Line_8 $$ tableRef.getTable()[ FD ]
Line_3 $$ public void testGetSplitsWithSkipScanFilter() -->Line_9 $$ List<KeyRange> ranges = getSplits(tableRef, scan, regions, scanRanges)[ CD ]
Line_9 $$ List<KeyRange> ranges = getSplits(tableRef, scan, regions, scanRanges)-->Line_9 $$ getSplits(tableRef, scan, regions, scanRanges)[ CD ]
Line_7 $$ TableRef tableRef = new TableRef(table)-->Line_9 $$ getSplits(tableRef, scan, regions, scanRanges)[ FD ]
Line_8 $$ List<HRegionLocation> regions = pconn.getQueryServices().getAllTableRegions(tableRef.getTable().getPhysicalName().getBytes())-->Line_9 $$ getSplits(tableRef, scan, regions, scanRanges)[ FD ]
Line_3 $$ public void testGetSplitsWithSkipScanFilter() -->Line_10 $$ assertEquals("Unexpected number of splits: " + ranges.size(), expectedSplits.size(), ranges.size())[ CD ]
Line_9 $$ List<KeyRange> ranges = getSplits(tableRef, scan, regions, scanRanges)-->Line_10 $$ ranges.size()[ FD ]
Line_9 $$ List<KeyRange> ranges = getSplits(tableRef, scan, regions, scanRanges)-->Line_10 $$ ranges.size()[ FD ]
