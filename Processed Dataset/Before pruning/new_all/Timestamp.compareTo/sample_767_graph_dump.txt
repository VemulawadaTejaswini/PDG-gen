Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void getLabelBounds(FemLabel referenceLabel, FarragoRepos repos) [ CD ]
Line_4 $$ FemLabel label-->Line_8 $$ label.getParentLabel()[ FD ]
Line_11 $$ String timestamp = label.getCreationTimestamp()-->Line_11 $$ label.getCreationTimestamp()[ CD ]
Line_4 $$ FemLabel label-->Line_11 $$ label.getCreationTimestamp()[ FD ]
Line_11 $$ String timestamp = label.getCreationTimestamp()-->Line_14 $$ // Ignore new labels that haven't been created yet
if (timestamp == null) [ FD ]
Line_17 $$ Timestamp labelTimestamp = Timestamp.valueOf(timestamp)-->Line_17 $$ Timestamp.valueOf(timestamp)[ CD ]
Line_11 $$ String timestamp = label.getCreationTimestamp()-->Line_17 $$ Timestamp.valueOf(timestamp)[ FD ]
Line_18 $$ int rc = referenceTimestamp.compareTo(labelTimestamp)-->Line_18 $$ referenceTimestamp.compareTo(labelTimestamp)[ CD ]
Line_17 $$ Timestamp labelTimestamp = Timestamp.valueOf(timestamp)-->Line_18 $$ referenceTimestamp.compareTo(labelTimestamp)[ FD ]
Line_17 $$ Timestamp labelTimestamp = Timestamp.valueOf(timestamp)-->Line_23 $$ labelTimestamp.compareTo(lowerBound)[ FD ]
Line_21 $$ // Find the newest label older than the reference label
if ((rc > 0) && ((lowerBound == null) || (labelTimestamp.compareTo(lowerBound) > 0))) -->Line_28 $$ if ((rc < 0) && ((upperBound == null) || (labelTimestamp.compareTo(upperBound) < 0))) [ CD ]
Line_17 $$ Timestamp labelTimestamp = Timestamp.valueOf(timestamp)-->Line_31 $$ labelTimestamp.compareTo(upperBound)[ FD ]
Line_0 $$ Entry-->Line_39 $$ //1
public class func [ CD ]
Line_39 $$ //1
public class func -->Line_40 $$ public void getTable(String[] names) [ CD ]
Line_40 $$ public void getTable(String[] names) -->Line_41 $$ if ((labelTimestamp != null) && (table instanceof FemLocalTable)) [ CD ]
Line_41 $$ if ((labelTimestamp != null) && (table instanceof FemLocalTable)) -->Line_42 $$ FemAnnotatedElement annotated = (FemAnnotatedElement) table[ CD ]
Line_41 $$ if ((labelTimestamp != null) && (table instanceof FemLocalTable)) -->Line_43 $$ Timestamp objectCreateTimestamp = Timestamp.valueOf(annotated.getCreationTimestamp())[ CD ]
Line_43 $$ Timestamp objectCreateTimestamp = Timestamp.valueOf(annotated.getCreationTimestamp())-->Line_44 $$ Timestamp.valueOf(annotated.getCreationTimestamp())[ CD ]
Line_42 $$ FemAnnotatedElement annotated = (FemAnnotatedElement) table-->Line_44 $$ annotated.getCreationTimestamp()[ FD ]
Line_41 $$ if ((labelTimestamp != null) && (table instanceof FemLocalTable)) -->Line_45 $$ if (objectCreateTimestamp.compareTo(labelTimestamp) > 0) [ CD ]
Line_43 $$ Timestamp objectCreateTimestamp = Timestamp.valueOf(annotated.getCreationTimestamp())-->Line_45 $$ objectCreateTimestamp.compareTo(labelTimestamp)[ FD ]
Line_17 $$ Timestamp labelTimestamp = Timestamp.valueOf(timestamp)-->Line_45 $$ objectCreateTimestamp.compareTo(labelTimestamp)[ FD ]
Line_40 $$ public void getTable(String[] names) -->Line_51 $$ addDependency(table, action)[ CD ]
Line_40 $$ public void getTable(String[] names) -->Line_52 $$ if (table.getVisibility() == null) [ CD ]
Line_40 $$ public void getTable(String[] names) -->Line_55 $$ RelDataType rowType = createTableRowType(table)[ CD ]
Line_55 $$ RelDataType rowType = createTableRowType(table)-->Line_55 $$ createTableRowType(table)[ CD ]
Line_40 $$ public void getTable(String[] names) -->Line_56 $$ if (table instanceof FemLocalTable) [ CD ]
Line_56 $$ if (table instanceof FemLocalTable) -->Line_57 $$ int nColumnsTotal = rowType.getFieldCount()[ CD ]
Line_57 $$ int nColumnsTotal = rowType.getFieldCount()-->Line_57 $$ rowType.getFieldCount()[ CD ]
Line_55 $$ RelDataType rowType = createTableRowType(table)-->Line_57 $$ rowType.getFieldCount()[ FD ]
Line_56 $$ if (table instanceof FemLocalTable) -->Line_58 $$ int nColumnsActual = nColumnsTotal[ CD ]
Line_56 $$ if (table instanceof FemLocalTable) -->Line_62 $$ DependencySupplier supplier = getRepos().getCorePackage().getDependencySupplier()[ CD ]
Line_62 $$ DependencySupplier supplier = getRepos().getCorePackage().getDependencySupplier()-->Line_63 $$ getRepos().getCorePackage().getDependencySupplier()[ CD ]
Line_62 $$ DependencySupplier supplier = getRepos().getCorePackage().getDependencySupplier()-->Line_64 $$ supplier.getSupplierDependency(table)[ FD ]
Line_64 $$ CwmDependency dep-->Line_65 $$ dep.getNamespace()[ FD ]
Line_65 $$ if (dep.getNamespace() instanceof FemRecoveryReference) -->Line_66 $$ FemRecoveryReference recoveryRef = (FemRecoveryReference) dep.getNamespace()[ CD ]
Line_64 $$ CwmDependency dep-->Line_67 $$ dep.getNamespace()[ FD ]
Line_65 $$ if (dep.getNamespace() instanceof FemRecoveryReference) -->Line_68 $$ if (recoveryRef.getRecoveryType() == RecoveryTypeEnum.ALTER_TABLE_ADD_COLUMN) [ CD ]
Line_66 $$ FemRecoveryReference recoveryRef = (FemRecoveryReference) dep.getNamespace()-->Line_68 $$ recoveryRef.getRecoveryType()[ FD ]
Line_68 $$ if (recoveryRef.getRecoveryType() == RecoveryTypeEnum.ALTER_TABLE_ADD_COLUMN) -->Line_71 $$ --nColumnsActual[ CD ]
Line_58 $$ int nColumnsActual = nColumnsTotal-->Line_71 $$ --nColumnsActual[ FD ]
Line_56 $$ if (table instanceof FemLocalTable) -->Line_79 $$ // after the label
if (labelTimestamp != null) [ CD ]
Line_17 $$ Timestamp labelTimestamp = Timestamp.valueOf(timestamp)-->Line_79 $$ // after the label
if (labelTimestamp != null) [ FD ]
Line_79 $$ // after the label
if (labelTimestamp != null) -->Line_80 $$ while (nColumnsActual > 1) [ CD ]
Line_79 $$ // after the label
if (labelTimestamp != null) -->Line_79 $$ // after the label
if (labelTimestamp != null) [ CD ]
Line_58 $$ int nColumnsActual = nColumnsTotal-->Line_80 $$ while (nColumnsActual > 1) [ FD ]
Line_80 $$ while (nColumnsActual > 1) -->Line_81 $$ FemStoredColumn column = (FemStoredColumn) table.getFeature().get(nColumnsActual - 1)[ CD ]
Line_80 $$ while (nColumnsActual > 1) -->Line_84 $$ Timestamp columnCreateTimestamp = Timestamp.valueOf(column.getCreationTimestamp())[ CD ]
Line_84 $$ Timestamp columnCreateTimestamp = Timestamp.valueOf(column.getCreationTimestamp())-->Line_85 $$ Timestamp.valueOf(column.getCreationTimestamp())[ CD ]
Line_81 $$ FemStoredColumn column = (FemStoredColumn) table.getFeature().get(nColumnsActual - 1)-->Line_85 $$ column.getCreationTimestamp()[ FD ]
Line_80 $$ while (nColumnsActual > 1) -->Line_86 $$ if (columnCreateTimestamp.compareTo(labelTimestamp) > 0) [ CD ]
Line_84 $$ Timestamp columnCreateTimestamp = Timestamp.valueOf(column.getCreationTimestamp())-->Line_86 $$ columnCreateTimestamp.compareTo(labelTimestamp)[ FD ]
Line_17 $$ Timestamp labelTimestamp = Timestamp.valueOf(timestamp)-->Line_86 $$ columnCreateTimestamp.compareTo(labelTimestamp)[ FD ]
Line_86 $$ if (columnCreateTimestamp.compareTo(labelTimestamp) > 0) -->Line_87 $$ --nColumnsActual[ CD ]
Line_58 $$ int nColumnsActual = nColumnsTotal-->Line_87 $$ --nColumnsActual[ FD ]
Line_56 $$ if (table instanceof FemLocalTable) -->Line_98 $$ // Now truncate the row if necessary
if (nColumnsActual < nColumnsTotal) [ CD ]
Line_58 $$ int nColumnsActual = nColumnsTotal-->Line_98 $$ // Now truncate the row if necessary
if (nColumnsActual < nColumnsTotal) [ FD ]
Line_57 $$ int nColumnsTotal = rowType.getFieldCount()-->Line_98 $$ // Now truncate the row if necessary
if (nColumnsActual < nColumnsTotal) [ FD ]
Line_98 $$ // Now truncate the row if necessary
if (nColumnsActual < nColumnsTotal) -->Line_99 $$ rowType = getFarragoTypeFactory().createStructType(RelOptUtil.getFieldTypeList(rowType).subList(0, nColumnsActual), RelOptUtil.getFieldNameList(rowType).subList(0, nColumnsActual))[ CD ]
Line_55 $$ RelDataType rowType = createTableRowType(table)-->Line_99 $$ rowType = getFarragoTypeFactory().createStructType(RelOptUtil.getFieldTypeList(rowType).subList(0, nColumnsActual), RelOptUtil.getFieldNameList(rowType).subList(0, nColumnsActual))[ FD ]
Line_99 $$ rowType = getFarragoTypeFactory().createStructType(RelOptUtil.getFieldTypeList(rowType).subList(0, nColumnsActual), RelOptUtil.getFieldNameList(rowType).subList(0, nColumnsActual))-->Line_99 $$ rowType = getFarragoTypeFactory().createStructType(RelOptUtil.getFieldTypeList(rowType).subList(0, nColumnsActual), RelOptUtil.getFieldNameList(rowType).subList(0, nColumnsActual))[ FD ]
Line_99 $$ rowType = getFarragoTypeFactory().createStructType(RelOptUtil.getFieldTypeList(rowType).subList(0, nColumnsActual), RelOptUtil.getFieldNameList(rowType).subList(0, nColumnsActual))-->Line_100 $$ getFarragoTypeFactory().createStructType(RelOptUtil.getFieldTypeList(rowType).subList(0, nColumnsActual), RelOptUtil.getFieldNameList(rowType).subList(0, nColumnsActual))[ CD ]
Line_58 $$ int nColumnsActual = nColumnsTotal-->Line_101 $$ RelOptUtil.getFieldTypeList(rowType).subList(0, nColumnsActual)[ FD ]
Line_55 $$ RelDataType rowType = createTableRowType(table)-->Line_101 $$ RelOptUtil.getFieldTypeList(rowType)[ FD ]
Line_99 $$ rowType = getFarragoTypeFactory().createStructType(RelOptUtil.getFieldTypeList(rowType).subList(0, nColumnsActual), RelOptUtil.getFieldNameList(rowType).subList(0, nColumnsActual))-->Line_101 $$ RelOptUtil.getFieldTypeList(rowType)[ FD ]
Line_58 $$ int nColumnsActual = nColumnsTotal-->Line_104 $$ RelOptUtil.getFieldNameList(rowType).subList(0, nColumnsActual)[ FD ]
Line_55 $$ RelDataType rowType = createTableRowType(table)-->Line_104 $$ RelOptUtil.getFieldNameList(rowType)[ FD ]
Line_99 $$ rowType = getFarragoTypeFactory().createStructType(RelOptUtil.getFieldTypeList(rowType).subList(0, nColumnsActual), RelOptUtil.getFieldNameList(rowType).subList(0, nColumnsActual))-->Line_104 $$ RelOptUtil.getFieldNameList(rowType)[ FD ]
Line_40 $$ public void getTable(String[] names) -->Line_109 $$ FarragoCatalogUtil.getTableAllowedAccess(table)[ CD ]
Line_0 $$ Entry-->Line_113 $$ //2
public class func [ CD ]
Line_113 $$ //2
public class func -->Line_114 $$ public void timeSheetChecker(HttpServletRequest request, HttpServletResponse response) [ CD ]
Line_114 $$ public void timeSheetChecker(HttpServletRequest request, HttpServletResponse response) -->Line_115 $$ for (int i = 0; i < 5; i++) [ CD ]
Line_114 $$ public void timeSheetChecker(HttpServletRequest request, HttpServletResponse response) -->Line_114 $$ public void timeSheetChecker(HttpServletRequest request, HttpServletResponse response) [ CD ]
Line_115 $$ for (int i = 0; i < 5; i++) -->Line_115 $$ int i = 0[ CD ]
Line_115 $$ for (int i = 0; i < 5; i++) -->Line_115 $$ i++[ CD ]
Line_115 $$ int i = 0-->Line_115 $$ i++[ FD ]
Line_115 $$ for (int i = 0; i < 5; i++) -->Line_116 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)[ CD ]
Line_116 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_116 $$ UtilDateTime.addDaysToTimestamp(timesheetDate, i)[ CD ]
Line_115 $$ int i = 0-->Line_116 $$ UtilDateTime.addDaysToTimestamp(timesheetDate, i)[ FD ]
Line_115 $$ for (int i = 0; i < 5; i++) -->Line_117 $$ Timestamp nowStartDate = UtilDateTime.getDayStart(now)[ CD ]
Line_117 $$ Timestamp nowStartDate = UtilDateTime.getDayStart(now)-->Line_117 $$ UtilDateTime.getDayStart(now)[ CD ]
Line_115 $$ for (int i = 0; i < 5; i++) -->Line_119 $$ //compare week and compare date
if ((timesheetDate.compareTo(weekStart) <= 0) && (realTimeDate.compareTo(nowStartDate) < 0)) [ CD ]
Line_116 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_119 $$ realTimeDate.compareTo(nowStartDate)[ FD ]
Line_117 $$ Timestamp nowStartDate = UtilDateTime.getDayStart(now)-->Line_119 $$ realTimeDate.compareTo(nowStartDate)[ FD ]
Line_119 $$ //compare week and compare date
if ((timesheetDate.compareTo(weekStart) <= 0) && (realTimeDate.compareTo(nowStartDate) < 0)) -->Line_121 $$ List<GenericValue> timeEntryList = timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)[ CD ]
Line_121 $$ List<GenericValue> timeEntryList = timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)-->Line_121 $$ timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)[ CD ]
Line_116 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_121 $$ UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate)[ FD ]
Line_119 $$ //compare week and compare date
if ((timesheetDate.compareTo(weekStart) <= 0) && (realTimeDate.compareTo(nowStartDate) < 0)) -->Line_123 $$ List<GenericValue> emplLeaveList = EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()[ CD ]
Line_123 $$ List<GenericValue> emplLeaveList = EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()-->Line_123 $$ EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()[ CD ]
Line_116 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_123 $$ EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate)[ FD ]
Line_119 $$ //compare week and compare date
if ((timesheetDate.compareTo(weekStart) <= 0) && (realTimeDate.compareTo(nowStartDate) < 0)) -->Line_124 $$ if (UtilValidate.isEmpty(timeEntryList) && UtilValidate.isEmpty(emplLeaveList)) [ CD ]
Line_121 $$ List<GenericValue> timeEntryList = timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)-->Line_124 $$ UtilValidate.isEmpty(timeEntryList)[ FD ]
Line_123 $$ List<GenericValue> emplLeaveList = EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()-->Line_124 $$ UtilValidate.isEmpty(emplLeaveList)[ FD ]
Line_124 $$ if (UtilValidate.isEmpty(timeEntryList) && UtilValidate.isEmpty(emplLeaveList)) -->Line_125 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()[ CD ]
Line_124 $$ if (UtilValidate.isEmpty(timeEntryList) && UtilValidate.isEmpty(emplLeaveList)) -->Line_126 $$ noEntryMap.put("timesheetId", timesheetId)[ CD ]
Line_125 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()-->Line_126 $$ noEntryMap.put("timesheetId", timesheetId)[ FD ]
Line_124 $$ if (UtilValidate.isEmpty(timeEntryList) && UtilValidate.isEmpty(emplLeaveList)) -->Line_127 $$ noTimeEntryList.add(noEntryMap)[ CD ]
Line_125 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()-->Line_127 $$ noTimeEntryList.add(noEntryMap)[ FD ]
Line_0 $$ Entry-->Line_135 $$ //3
public class func [ CD ]
Line_135 $$ //3
public class func -->Line_136 $$ public void compare(Object o1, Object o2, byte dt1, byte dt2) [ CD ]
Line_136 $$ public void compare(Object o1, Object o2, byte dt1, byte dt2) -->Line_137 $$ return ((Timestamp) o1).compareTo((Timestamp) o2);[ CD ]
Line_137 $$ return ((Timestamp) o1).compareTo((Timestamp) o2);-->Line_137 $$ ((Timestamp) o1).compareTo((Timestamp) o2)[ CD ]
Line_0 $$ Entry-->Line_141 $$ //4
public class func [ CD ]
Line_141 $$ //4
public class func -->Line_142 $$ public void compare(final Object obj1, final Object obj2) [ CD ]
Line_142 $$ public void compare(final Object obj1, final Object obj2) -->Line_143 $$ return ((Timestamp) obj1).compareTo((Timestamp) obj2);[ CD ]
Line_143 $$ return ((Timestamp) obj1).compareTo((Timestamp) obj2);-->Line_143 $$ ((Timestamp) obj1).compareTo((Timestamp) obj2)[ CD ]
Line_0 $$ Entry-->Line_147 $$ //5
public class func [ CD ]
Line_147 $$ //5
public class func -->Line_148 $$ public void compare(Object arg0, Object arg1) [ CD ]
Line_148 $$ public void compare(Object arg0, Object arg1) -->Line_149 $$ return ((Timestamp) arg0).compareTo((Timestamp) arg1);[ CD ]
Line_149 $$ return ((Timestamp) arg0).compareTo((Timestamp) arg1);-->Line_149 $$ ((Timestamp) arg0).compareTo((Timestamp) arg1)[ CD ]
Line_81 $$ FemStoredColumn column = (FemStoredColumn) table.getFeature().get(nColumnsActual - 1)-->Line_85 $$ column.getCreationTimestamp()[ FD ]
Line_84 $$ Timestamp columnCreateTimestamp = Timestamp.valueOf(column.getCreationTimestamp())-->Line_86 $$ columnCreateTimestamp.compareTo(labelTimestamp)[ FD ]
Line_115 $$ int i = 0-->Line_115 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_115 $$ int i = 0-->Line_115 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_115 $$ int i = 0-->Line_115 $$ i++[ FD ]
Line_115 $$ int i = 0-->Line_116 $$ UtilDateTime.addDaysToTimestamp(timesheetDate, i)[ FD ]
Line_116 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_119 $$ realTimeDate.compareTo(nowStartDate)[ FD ]
Line_117 $$ Timestamp nowStartDate = UtilDateTime.getDayStart(now)-->Line_119 $$ realTimeDate.compareTo(nowStartDate)[ FD ]
Line_116 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_121 $$ UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate)[ FD ]
Line_116 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_123 $$ EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate)[ FD ]
Line_121 $$ List<GenericValue> timeEntryList = timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)-->Line_124 $$ UtilValidate.isEmpty(timeEntryList)[ FD ]
Line_123 $$ List<GenericValue> emplLeaveList = EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()-->Line_124 $$ UtilValidate.isEmpty(emplLeaveList)[ FD ]
Line_125 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()-->Line_126 $$ noEntryMap.put("timesheetId", timesheetId)[ FD ]
Line_125 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()-->Line_127 $$ noTimeEntryList.add(noEntryMap)[ FD ]
