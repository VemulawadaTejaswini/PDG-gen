Line_0 $$ Entry-->Line_2 $$ //2
public class func [ CD ]
Line_2 $$ //2
public class func -->Line_3 $$ public void timeSheetChecker(HttpServletRequest request, HttpServletResponse response) [ CD ]
Line_3 $$ public void timeSheetChecker(HttpServletRequest request, HttpServletResponse response) -->Line_4 $$ for (int i = 0; i < 5; i++) [ CD ]
Line_3 $$ public void timeSheetChecker(HttpServletRequest request, HttpServletResponse response) -->Line_3 $$ public void timeSheetChecker(HttpServletRequest request, HttpServletResponse response) [ CD ]
Line_4 $$ for (int i = 0; i < 5; i++) -->Line_4 $$ int i = 0[ CD ]
Line_4 $$ for (int i = 0; i < 5; i++) -->Line_4 $$ i++[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ i++[ FD ]
Line_4 $$ for (int i = 0; i < 5; i++) -->Line_5 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)[ CD ]
Line_5 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_5 $$ UtilDateTime.addDaysToTimestamp(timesheetDate, i)[ CD ]
Line_4 $$ int i = 0-->Line_5 $$ UtilDateTime.addDaysToTimestamp(timesheetDate, i)[ FD ]
Line_4 $$ for (int i = 0; i < 5; i++) -->Line_6 $$ Timestamp nowStartDate = UtilDateTime.getDayStart(now)[ CD ]
Line_6 $$ Timestamp nowStartDate = UtilDateTime.getDayStart(now)-->Line_6 $$ UtilDateTime.getDayStart(now)[ CD ]
Line_4 $$ for (int i = 0; i < 5; i++) -->Line_8 $$ //compare week and compare date
if ((timesheetDate.compareTo(weekStart) <= 0) && (realTimeDate.compareTo(nowStartDate) < 0)) [ CD ]
Line_5 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_8 $$ realTimeDate.compareTo(nowStartDate)[ FD ]
Line_6 $$ Timestamp nowStartDate = UtilDateTime.getDayStart(now)-->Line_8 $$ realTimeDate.compareTo(nowStartDate)[ FD ]
Line_8 $$ //compare week and compare date
if ((timesheetDate.compareTo(weekStart) <= 0) && (realTimeDate.compareTo(nowStartDate) < 0)) -->Line_10 $$ List<GenericValue> timeEntryList = timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)[ CD ]
Line_10 $$ List<GenericValue> timeEntryList = timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)-->Line_10 $$ timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)[ CD ]
Line_5 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_10 $$ UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate)[ FD ]
Line_8 $$ //compare week and compare date
if ((timesheetDate.compareTo(weekStart) <= 0) && (realTimeDate.compareTo(nowStartDate) < 0)) -->Line_12 $$ List<GenericValue> emplLeaveList = EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()[ CD ]
Line_12 $$ List<GenericValue> emplLeaveList = EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()-->Line_12 $$ EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()[ CD ]
Line_5 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_12 $$ EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate)[ FD ]
Line_8 $$ //compare week and compare date
if ((timesheetDate.compareTo(weekStart) <= 0) && (realTimeDate.compareTo(nowStartDate) < 0)) -->Line_13 $$ if (UtilValidate.isEmpty(timeEntryList) && UtilValidate.isEmpty(emplLeaveList)) [ CD ]
Line_10 $$ List<GenericValue> timeEntryList = timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)-->Line_13 $$ UtilValidate.isEmpty(timeEntryList)[ FD ]
Line_12 $$ List<GenericValue> emplLeaveList = EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()-->Line_13 $$ UtilValidate.isEmpty(emplLeaveList)[ FD ]
Line_13 $$ if (UtilValidate.isEmpty(timeEntryList) && UtilValidate.isEmpty(emplLeaveList)) -->Line_14 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()[ CD ]
Line_13 $$ if (UtilValidate.isEmpty(timeEntryList) && UtilValidate.isEmpty(emplLeaveList)) -->Line_15 $$ noEntryMap.put("timesheetId", timesheetId)[ CD ]
Line_14 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()-->Line_15 $$ noEntryMap.put("timesheetId", timesheetId)[ FD ]
Line_13 $$ if (UtilValidate.isEmpty(timeEntryList) && UtilValidate.isEmpty(emplLeaveList)) -->Line_16 $$ noTimeEntryList.add(noEntryMap)[ CD ]
Line_14 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()-->Line_16 $$ noTimeEntryList.add(noEntryMap)[ FD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ i++[ FD ]
Line_4 $$ int i = 0-->Line_5 $$ UtilDateTime.addDaysToTimestamp(timesheetDate, i)[ FD ]
Line_5 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_8 $$ realTimeDate.compareTo(nowStartDate)[ FD ]
Line_6 $$ Timestamp nowStartDate = UtilDateTime.getDayStart(now)-->Line_8 $$ realTimeDate.compareTo(nowStartDate)[ FD ]
Line_5 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_10 $$ UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate)[ FD ]
Line_5 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_12 $$ EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate)[ FD ]
Line_10 $$ List<GenericValue> timeEntryList = timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)-->Line_13 $$ UtilValidate.isEmpty(timeEntryList)[ FD ]
Line_12 $$ List<GenericValue> emplLeaveList = EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()-->Line_13 $$ UtilValidate.isEmpty(emplLeaveList)[ FD ]
Line_14 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()-->Line_15 $$ noEntryMap.put("timesheetId", timesheetId)[ FD ]
Line_14 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()-->Line_16 $$ noTimeEntryList.add(noEntryMap)[ FD ]
