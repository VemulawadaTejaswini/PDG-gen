Line_0 $$ Entry-->Line_2 $$ //6
public class func [ CD ]
Line_2 $$ //6
public class func -->Line_3 $$ public void compileQuery(String queryFileName) [ CD ]
Line_3 $$ public void compileQuery(String queryFileName) -->Line_4 $$ ClassLoader classLoader = getClass().getClassLoader()[ CD ]
Line_4 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_4 $$ getClass().getClassLoader()[ CD ]
Line_3 $$ public void compileQuery(String queryFileName) -->Line_5 $$ URL url = classLoader.getResource("lux/compiler/" + queryFileName)[ CD ]
Line_5 $$ URL url = classLoader.getResource("lux/compiler/" + queryFileName)-->Line_5 $$ classLoader.getResource("lux/compiler/" + queryFileName)[ CD ]
Line_4 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_5 $$ classLoader.getResource("lux/compiler/" + queryFileName)[ FD ]
Line_3 $$ public void compileQuery(String queryFileName) -->Line_6 $$ String query = IOUtils.toString(url.openStream(), "utf-8")[ CD ]
Line_6 $$ String query = IOUtils.toString(url.openStream(), "utf-8")-->Line_6 $$ IOUtils.toString(url.openStream(), "utf-8")[ CD ]
Line_5 $$ URL url = classLoader.getResource("lux/compiler/" + queryFileName)-->Line_6 $$ url.openStream()[ FD ]
Line_3 $$ public void compileQuery(String queryFileName) -->Line_7 $$ URI uri = url.toURI()[ CD ]
Line_7 $$ URI uri = url.toURI()-->Line_7 $$ url.toURI()[ CD ]
Line_5 $$ URL url = classLoader.getResource("lux/compiler/" + queryFileName)-->Line_7 $$ url.toURI()[ FD ]
Line_3 $$ public void compileQuery(String queryFileName) -->Line_8 $$ XQueryExecutable cq = compiler.compile(query, null, uri, null)[ CD ]
Line_8 $$ XQueryExecutable cq = compiler.compile(query, null, uri, null)-->Line_8 $$ compiler.compile(query, null, uri, null)[ CD ]
Line_6 $$ String query = IOUtils.toString(url.openStream(), "utf-8")-->Line_8 $$ compiler.compile(query, null, uri, null)[ FD ]
Line_7 $$ URI uri = url.toURI()-->Line_8 $$ compiler.compile(query, null, uri, null)[ FD ]
