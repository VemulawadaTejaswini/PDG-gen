Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void findCurrentResourceVersion(String resourceUrl) [ CD ]
Line_3 $$ public void findCurrentResourceVersion(String resourceUrl) -->Line_4 $$ ClassLoader cl = getClass().getClassLoader()[ CD ]
Line_4 $$ ClassLoader cl = getClass().getClassLoader()-->Line_4 $$ getClass().getClassLoader()[ CD ]
Line_3 $$ public void findCurrentResourceVersion(String resourceUrl) -->Line_5 $$ return cl.getResource(resourceUrl);[ CD ]
Line_5 $$ return cl.getResource(resourceUrl);-->Line_5 $$ cl.getResource(resourceUrl)[ CD ]
Line_4 $$ ClassLoader cl = getClass().getClassLoader()-->Line_5 $$ cl.getResource(resourceUrl)[ FD ]
Line_0 $$ Entry-->Line_9 $$ //1
public class func [ CD ]
Line_9 $$ //1
public class func -->Line_10 $$ public void createRouteBuilder() [ CD ]
Line_10 $$ public void createRouteBuilder() -->Line_11 $$ ClassLoader classLoader = getClass().getClassLoader()[ CD ]
Line_11 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_11 $$ getClass().getClassLoader()[ CD ]
Line_10 $$ public void createRouteBuilder() -->Line_12 $$ log.info("Loading keystore from [[ CD ]
Line_11 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_12 $$ classLoader.getResource("shared.jceks")[ FD ]
Line_0 $$ Entry-->Line_16 $$ //2
public class func [ CD ]
Line_16 $$ //2
public class func -->Line_17 $$ public void findUrl(String name) [ CD ]
Line_17 $$ public void findUrl(String name) -->Line_18 $$ ClassLoader classLoader = getClass().getClassLoader()[ CD ]
Line_18 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_18 $$ getClass().getClassLoader()[ CD ]
Line_17 $$ public void findUrl(String name) -->Line_19 $$ return classLoader.getResource(name);[ CD ]
Line_19 $$ return classLoader.getResource(name);-->Line_19 $$ classLoader.getResource(name)[ CD ]
Line_18 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_19 $$ classLoader.getResource(name)[ FD ]
Line_11 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_19 $$ classLoader.getResource(name)[ FD ]
Line_0 $$ Entry-->Line_23 $$ //3
public class func [ CD ]
Line_23 $$ //3
public class func -->Line_24 $$ public void findJarDirectory(String name) [ CD ]
Line_24 $$ public void findJarDirectory(String name) -->Line_25 $$ ClassLoader classLoader = getClass().getClassLoader()[ CD ]
Line_25 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_25 $$ getClass().getClassLoader()[ CD ]
Line_24 $$ public void findJarDirectory(String name) -->Line_26 $$ URL url = classLoader.getResource(name)[ CD ]
Line_26 $$ URL url = classLoader.getResource(name)-->Line_26 $$ classLoader.getResource(name)[ CD ]
Line_25 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_26 $$ classLoader.getResource(name)[ FD ]
Line_18 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_26 $$ classLoader.getResource(name)[ FD ]
Line_11 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_26 $$ classLoader.getResource(name)[ FD ]
Line_24 $$ public void findJarDirectory(String name) -->Line_27 $$ assertNotNull("Expecting on the classpath: " + name)[ CD ]
Line_0 $$ Entry-->Line_31 $$ //4
public class func [ CD ]
Line_31 $$ //4
public class func -->Line_32 $$ public void getURL(String filename) [ CD ]
Line_32 $$ public void getURL(String filename) -->Line_33 $$ ClassLoader classLoader = getClass().getClassLoader()[ CD ]
Line_33 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_33 $$ getClass().getClassLoader()[ CD ]
Line_32 $$ public void getURL(String filename) -->Line_34 $$ classLoader.getResource(filename)[ CD ]
Line_33 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_34 $$ classLoader.getResource(filename)[ FD ]
Line_25 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_34 $$ classLoader.getResource(filename)[ FD ]
Line_18 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_34 $$ classLoader.getResource(filename)[ FD ]
Line_11 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_34 $$ classLoader.getResource(filename)[ FD ]
Line_0 $$ Entry-->Line_38 $$ //5
public class func [ CD ]
Line_38 $$ //5
public class func -->Line_39 $$ public void testTemplateResources() [ CD ]
Line_39 $$ public void testTemplateResources() -->Line_40 $$ ClassLoader classLoader = getClass().getClassLoader()[ CD ]
Line_40 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_40 $$ getClass().getClassLoader()[ CD ]
Line_39 $$ public void testTemplateResources() -->Line_41 $$ URL url = classLoader.getResource("mail.html")[ CD ]
Line_41 $$ URL url = classLoader.getResource("mail.html")-->Line_41 $$ classLoader.getResource("mail.html")[ CD ]
Line_40 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_41 $$ classLoader.getResource("mail.html")[ FD ]
Line_33 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_41 $$ classLoader.getResource("mail.html")[ FD ]
Line_25 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_41 $$ classLoader.getResource("mail.html")[ FD ]
Line_18 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_41 $$ classLoader.getResource("mail.html")[ FD ]
Line_11 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_41 $$ classLoader.getResource("mail.html")[ FD ]
Line_39 $$ public void testTemplateResources() -->Line_42 $$ File file = new File(url.getFile())[ CD ]
Line_41 $$ URL url = classLoader.getResource("mail.html")-->Line_42 $$ url.getFile()[ FD ]
Line_26 $$ URL url = classLoader.getResource(name)-->Line_42 $$ url.getFile()[ FD ]
Line_39 $$ public void testTemplateResources() -->Line_43 $$ TestCase.assertNotNull(file)[ CD ]
Line_42 $$ File file = new File(url.getFile())-->Line_43 $$ TestCase.assertNotNull(file)[ FD ]
Line_0 $$ Entry-->Line_47 $$ //6
public class func [ CD ]
Line_47 $$ //6
public class func -->Line_48 $$ public void compileQuery(String queryFileName) [ CD ]
Line_48 $$ public void compileQuery(String queryFileName) -->Line_49 $$ ClassLoader classLoader = getClass().getClassLoader()[ CD ]
Line_49 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_49 $$ getClass().getClassLoader()[ CD ]
Line_48 $$ public void compileQuery(String queryFileName) -->Line_50 $$ URL url = classLoader.getResource("lux/compiler/" + queryFileName)[ CD ]
Line_50 $$ URL url = classLoader.getResource("lux/compiler/" + queryFileName)-->Line_50 $$ classLoader.getResource("lux/compiler/" + queryFileName)[ CD ]
Line_49 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_50 $$ classLoader.getResource("lux/compiler/" + queryFileName)[ FD ]
Line_40 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_50 $$ classLoader.getResource("lux/compiler/" + queryFileName)[ FD ]
Line_33 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_50 $$ classLoader.getResource("lux/compiler/" + queryFileName)[ FD ]
Line_25 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_50 $$ classLoader.getResource("lux/compiler/" + queryFileName)[ FD ]
Line_18 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_50 $$ classLoader.getResource("lux/compiler/" + queryFileName)[ FD ]
Line_11 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_50 $$ classLoader.getResource("lux/compiler/" + queryFileName)[ FD ]
Line_48 $$ public void compileQuery(String queryFileName) -->Line_51 $$ String query = IOUtils.toString(url.openStream(), "utf-8")[ CD ]
Line_51 $$ String query = IOUtils.toString(url.openStream(), "utf-8")-->Line_51 $$ IOUtils.toString(url.openStream(), "utf-8")[ CD ]
Line_50 $$ URL url = classLoader.getResource("lux/compiler/" + queryFileName)-->Line_51 $$ url.openStream()[ FD ]
Line_41 $$ URL url = classLoader.getResource("mail.html")-->Line_51 $$ url.openStream()[ FD ]
Line_26 $$ URL url = classLoader.getResource(name)-->Line_51 $$ url.openStream()[ FD ]
Line_48 $$ public void compileQuery(String queryFileName) -->Line_52 $$ URI uri = url.toURI()[ CD ]
Line_52 $$ URI uri = url.toURI()-->Line_52 $$ url.toURI()[ CD ]
Line_50 $$ URL url = classLoader.getResource("lux/compiler/" + queryFileName)-->Line_52 $$ url.toURI()[ FD ]
Line_41 $$ URL url = classLoader.getResource("mail.html")-->Line_52 $$ url.toURI()[ FD ]
Line_26 $$ URL url = classLoader.getResource(name)-->Line_52 $$ url.toURI()[ FD ]
Line_48 $$ public void compileQuery(String queryFileName) -->Line_53 $$ XQueryExecutable cq = compiler.compile(query, null, uri, null)[ CD ]
Line_53 $$ XQueryExecutable cq = compiler.compile(query, null, uri, null)-->Line_53 $$ compiler.compile(query, null, uri, null)[ CD ]
Line_51 $$ String query = IOUtils.toString(url.openStream(), "utf-8")-->Line_53 $$ compiler.compile(query, null, uri, null)[ FD ]
Line_52 $$ URI uri = url.toURI()-->Line_53 $$ compiler.compile(query, null, uri, null)[ FD ]
Line_0 $$ Entry-->Line_57 $$ //7
public class func [ CD ]
Line_57 $$ //7
public class func -->Line_58 $$ public void resource(final String name) [ CD ]
Line_58 $$ public void resource(final String name) -->Line_59 $$ final ClassLoader classLoader = getClass().getClassLoader()[ CD ]
Line_59 $$ final ClassLoader classLoader = getClass().getClassLoader()-->Line_59 $$ getClass().getClassLoader()[ CD ]
Line_58 $$ public void resource(final String name) -->Line_60 $$ final URL resource = classLoader.getResource(name)[ CD ]
Line_60 $$ final URL resource = classLoader.getResource(name)-->Line_60 $$ classLoader.getResource(name)[ CD ]
Line_59 $$ final ClassLoader classLoader = getClass().getClassLoader()-->Line_60 $$ classLoader.getResource(name)[ FD ]
Line_49 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_60 $$ classLoader.getResource(name)[ FD ]
Line_40 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_60 $$ classLoader.getResource(name)[ FD ]
Line_33 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_60 $$ classLoader.getResource(name)[ FD ]
Line_25 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_60 $$ classLoader.getResource(name)[ FD ]
Line_18 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_60 $$ classLoader.getResource(name)[ FD ]
Line_11 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_60 $$ classLoader.getResource(name)[ FD ]
Line_58 $$ public void resource(final String name) -->Line_61 $$ assertNotNull("Can't locate resource " + name + " on " + classLoader, resource)[ CD ]
Line_60 $$ final URL resource = classLoader.getResource(name)-->Line_61 $$ assertNotNull("Can't locate resource " + name + " on " + classLoader, resource)[ FD ]
Line_0 $$ Entry-->Line_65 $$ //8
public class func [ CD ]
Line_65 $$ //8
public class func -->Line_66 $$ public void getClassFilePath(String path) [ CD ]
Line_66 $$ public void getClassFilePath(String path) -->Line_67 $$ ClassLoader cl = getClass().getClassLoader()[ CD ]
Line_67 $$ ClassLoader cl = getClass().getClassLoader()-->Line_67 $$ getClass().getClassLoader()[ CD ]
Line_66 $$ public void getClassFilePath(String path) -->Line_68 $$ URL url = cl.getResource(path + ".class")[ CD ]
Line_68 $$ URL url = cl.getResource(path + ".class")-->Line_68 $$ cl.getResource(path + ".class")[ CD ]
Line_67 $$ ClassLoader cl = getClass().getClassLoader()-->Line_68 $$ cl.getResource(path + ".class")[ FD ]
Line_4 $$ ClassLoader cl = getClass().getClassLoader()-->Line_68 $$ cl.getResource(path + ".class")[ FD ]
Line_66 $$ public void getClassFilePath(String path) -->Line_69 $$ assertNotNull(url, "No class found for the path = " + path)[ CD ]
Line_68 $$ URL url = cl.getResource(path + ".class")-->Line_69 $$ assertNotNull(url, "No class found for the path = " + path)[ FD ]
Line_50 $$ URL url = classLoader.getResource("lux/compiler/" + queryFileName)-->Line_69 $$ assertNotNull(url, "No class found for the path = " + path)[ FD ]
Line_41 $$ URL url = classLoader.getResource("mail.html")-->Line_69 $$ assertNotNull(url, "No class found for the path = " + path)[ FD ]
Line_26 $$ URL url = classLoader.getResource(name)-->Line_69 $$ assertNotNull(url, "No class found for the path = " + path)[ FD ]
Line_66 $$ public void getClassFilePath(String path) -->Line_70 $$ return getFilenameFromUrl(url);[ CD ]
Line_70 $$ return getFilenameFromUrl(url);-->Line_70 $$ getFilenameFromUrl(url)[ CD ]
Line_68 $$ URL url = cl.getResource(path + ".class")-->Line_70 $$ getFilenameFromUrl(url)[ FD ]
Line_50 $$ URL url = classLoader.getResource("lux/compiler/" + queryFileName)-->Line_70 $$ getFilenameFromUrl(url)[ FD ]
Line_41 $$ URL url = classLoader.getResource("mail.html")-->Line_70 $$ getFilenameFromUrl(url)[ FD ]
Line_26 $$ URL url = classLoader.getResource(name)-->Line_70 $$ getFilenameFromUrl(url)[ FD ]
