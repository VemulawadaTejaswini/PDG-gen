Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void doConnStmtNoRS(String text) [ CD ]
Line_3 $$ public void doConnStmtNoRS(String text) -->Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")[ CD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_4 $$ DriverManager.getConnection("jdbc:default:connection")[ CD ]
Line_3 $$ public void doConnStmtNoRS(String text) -->Line_5 $$ Statement stmt = conn.createStatement()[ CD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_5 $$ conn.createStatement()[ CD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_5 $$ conn.createStatement()[ FD ]
Line_3 $$ public void doConnStmtNoRS(String text) -->Line_6 $$ stmt.execute(text)[ CD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_6 $$ stmt.execute(text)[ FD ]
Line_0 $$ Entry-->Line_10 $$ //1
public class func [ CD ]
Line_10 $$ //1
public class func -->Line_11 $$ public void createDDL() [ CD ]
Line_11 $$ public void createDDL() -->Line_12 $$ Connection conn = DriverManager.getConnection(create_url)[ CD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_12 $$ DriverManager.getConnection(create_url)[ CD ]
Line_11 $$ public void createDDL() -->Line_13 $$ Statement stmt = conn.createStatement()[ CD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_13 $$ conn.createStatement()[ CD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_13 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_13 $$ conn.createStatement()[ FD ]
Line_11 $$ public void createDDL() -->Line_14 $$ stmt.execute("CREATE TABLE T_BASIC_TYPE (F1 FLOAT, F2 DOUBLE, F3 REAL, F4 DATE, F5 TIME, F6 SMALLINT, F7 SMALLINT, F8 INTEGER, F9 BIGINT, F10 DECIMAL(9,2), F11 TIMESTAMP, F12 BLOB, F13 VARCHAR(256), F14 VARCHAR(256), F15 VARCHAR(256), F16 VARCHAR(256), F17 SMALLINT)")[ CD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_14 $$ stmt.execute("CREATE TABLE T_BASIC_TYPE (F1 FLOAT, F2 DOUBLE, F3 REAL, F4 DATE, F5 TIME, F6 SMALLINT, F7 SMALLINT, F8 INTEGER, F9 BIGINT, F10 DECIMAL(9,2), F11 TIMESTAMP, F12 BLOB, F13 VARCHAR(256), F14 VARCHAR(256), F15 VARCHAR(256), F16 VARCHAR(256), F17 SMALLINT)")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_14 $$ stmt.execute("CREATE TABLE T_BASIC_TYPE (F1 FLOAT, F2 DOUBLE, F3 REAL, F4 DATE, F5 TIME, F6 SMALLINT, F7 SMALLINT, F8 INTEGER, F9 BIGINT, F10 DECIMAL(9,2), F11 TIMESTAMP, F12 BLOB, F13 VARCHAR(256), F14 VARCHAR(256), F15 VARCHAR(256), F16 VARCHAR(256), F17 SMALLINT)")[ FD ]
Line_0 $$ Entry-->Line_18 $$ //2
public class func [ CD ]
Line_18 $$ //2
public class func -->Line_19 $$ public void destroyDatabase(String database) [ CD ]
Line_19 $$ public void destroyDatabase(String database) -->Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")[ CD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_20 $$ DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")[ CD ]
Line_19 $$ public void destroyDatabase(String database) -->Line_21 $$ Statement stmt = conn.createStatement()[ CD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_21 $$ conn.createStatement()[ CD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_21 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_21 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_21 $$ conn.createStatement()[ FD ]
Line_19 $$ public void destroyDatabase(String database) -->Line_22 $$ stmt.execute("SHUTDOWN")[ CD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_22 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_22 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_22 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_0 $$ Entry-->Line_26 $$ //3
public class func [ CD ]
Line_26 $$ //3
public class func -->Line_27 $$ public void testCountDistinctNotNull() [ CD ]
Line_27 $$ public void testCountDistinctNotNull() -->Line_28 $$ deleteDb("cases")[ CD ]
Line_27 $$ public void testCountDistinctNotNull() -->Line_29 $$ Connection conn = getConnection("cases")[ CD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_29 $$ getConnection("cases")[ CD ]
Line_27 $$ public void testCountDistinctNotNull() -->Line_30 $$ Statement stat = conn.createStatement()[ CD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_30 $$ conn.createStatement()[ CD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_30 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_30 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_30 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_30 $$ conn.createStatement()[ FD ]
Line_27 $$ public void testCountDistinctNotNull() -->Line_31 $$ stat.execute("create table test(id int not null) as " + "select 1 from system_range(1, 10)")[ CD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_31 $$ stat.execute("create table test(id int not null) as " + "select 1 from system_range(1, 10)")[ FD ]
Line_27 $$ public void testCountDistinctNotNull() -->Line_33 $$ ResultSet rs = stat.executeQuery("select count(distinct id) from test")[ CD ]
Line_33 $$ ResultSet rs = stat.executeQuery("select count(distinct id) from test")-->Line_33 $$ stat.executeQuery("select count(distinct id) from test")[ CD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_33 $$ stat.executeQuery("select count(distinct id) from test")[ FD ]
Line_27 $$ public void testCountDistinctNotNull() -->Line_34 $$ rs.next()[ CD ]
Line_33 $$ ResultSet rs = stat.executeQuery("select count(distinct id) from test")-->Line_34 $$ rs.next()[ FD ]
Line_27 $$ public void testCountDistinctNotNull() -->Line_35 $$ assertEquals(1, rs.getInt(1))[ CD ]
Line_33 $$ ResultSet rs = stat.executeQuery("select count(distinct id) from test")-->Line_35 $$ rs.getInt(1)[ FD ]
Line_27 $$ public void testCountDistinctNotNull() -->Line_36 $$ conn.close()[ CD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_36 $$ conn.close()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_36 $$ conn.close()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_36 $$ conn.close()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_36 $$ conn.close()[ FD ]
Line_0 $$ Entry-->Line_40 $$ //4
public class func [ CD ]
Line_40 $$ //4
public class func -->Line_41 $$ public void verifyTableColumnContents(Connection connection, String table, String column, ColumnGenerator gen) [ CD ]
Line_41 $$ public void verifyTableColumnContents(Connection connection, String table, String column, ColumnGenerator gen) -->Line_42 $$ Statement st = connection.createStatement()[ CD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_42 $$ connection.createStatement()[ CD ]
Line_41 $$ public void verifyTableColumnContents(Connection connection, String table, String column, ColumnGenerator gen) -->Line_43 $$ assertTrue(st.execute("SELECT " + column + " FROM " + table))[ CD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_43 $$ st.execute("SELECT " + column + " FROM " + table)[ FD ]
Line_41 $$ public void verifyTableColumnContents(Connection connection, String table, String column, ColumnGenerator gen) -->Line_44 $$ ResultSet rs = st.getResultSet()[ CD ]
Line_44 $$ ResultSet rs = st.getResultSet()-->Line_44 $$ st.getResultSet()[ CD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_44 $$ st.getResultSet()[ FD ]
Line_41 $$ public void verifyTableColumnContents(Connection connection, String table, String column, ColumnGenerator gen) -->Line_45 $$ for (int row = 0; rs.next(); ++row) [ CD ]
Line_41 $$ public void verifyTableColumnContents(Connection connection, String table, String column, ColumnGenerator gen) -->Line_41 $$ public void verifyTableColumnContents(Connection connection, String table, String column, ColumnGenerator gen) [ CD ]
Line_45 $$ for (int row = 0; rs.next(); ++row) -->Line_45 $$ rs.next()[ CD ]
Line_44 $$ ResultSet rs = st.getResultSet()-->Line_45 $$ rs.next()[ FD ]
Line_33 $$ ResultSet rs = stat.executeQuery("select count(distinct id) from test")-->Line_45 $$ rs.next()[ FD ]
Line_45 $$ for (int row = 0; rs.next(); ++row) -->Line_45 $$ int row = 0[ CD ]
Line_45 $$ for (int row = 0; rs.next(); ++row) -->Line_45 $$ ++row[ CD ]
Line_45 $$ int row = 0-->Line_45 $$ ++row[ FD ]
Line_45 $$ for (int row = 0; rs.next(); ++row) -->Line_46 $$ assertEquals(gen.getVerifyText(row), rs.getString(1))[ CD ]
Line_45 $$ int row = 0-->Line_46 $$ gen.getVerifyText(row)[ FD ]
Line_44 $$ ResultSet rs = st.getResultSet()-->Line_46 $$ rs.getString(1)[ FD ]
Line_33 $$ ResultSet rs = stat.executeQuery("select count(distinct id) from test")-->Line_46 $$ rs.getString(1)[ FD ]
Line_0 $$ Entry-->Line_51 $$ //5
public class func [ CD ]
Line_51 $$ //5
public class func -->Line_52 $$ public void tearDown() [ CD ]
Line_52 $$ public void tearDown() -->Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")[ CD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_53 $$ DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")[ CD ]
Line_52 $$ public void tearDown() -->Line_54 $$ Statement stmt = conn.createStatement()[ CD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_54 $$ conn.createStatement()[ CD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_54 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_54 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_54 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_54 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_54 $$ conn.createStatement()[ FD ]
Line_52 $$ public void tearDown() -->Line_55 $$ stmt.execute("SHUTDOWN")[ CD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_55 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_55 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_55 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_55 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_0 $$ Entry-->Line_59 $$ //6
public class func [ CD ]
Line_59 $$ //6
public class func -->Line_60 $$ public void createTable() [ CD ]
Line_60 $$ public void createTable() -->Line_61 $$ Connection conn = DriverManager.getConnection(create_url)[ CD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_61 $$ DriverManager.getConnection(create_url)[ CD ]
Line_60 $$ public void createTable() -->Line_62 $$ Statement stmt = conn.createStatement()[ CD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_62 $$ conn.createStatement()[ CD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_62 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_62 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_62 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_62 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_62 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_62 $$ conn.createStatement()[ FD ]
Line_60 $$ public void createTable() -->Line_63 $$ stmt.execute("CREATE TABLE T_CLOB (ID INTEGER, DATA CLOB)")[ CD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_63 $$ stmt.execute("CREATE TABLE T_CLOB (ID INTEGER, DATA CLOB)")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_63 $$ stmt.execute("CREATE TABLE T_CLOB (ID INTEGER, DATA CLOB)")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_63 $$ stmt.execute("CREATE TABLE T_CLOB (ID INTEGER, DATA CLOB)")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_63 $$ stmt.execute("CREATE TABLE T_CLOB (ID INTEGER, DATA CLOB)")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_63 $$ stmt.execute("CREATE TABLE T_CLOB (ID INTEGER, DATA CLOB)")[ FD ]
Line_0 $$ Entry-->Line_67 $$ //7
public class func [ CD ]
Line_67 $$ //7
public class func -->Line_68 $$ public void testDeleteGroup() [ CD ]
Line_68 $$ public void testDeleteGroup() -->Line_69 $$ deleteDb("cases")[ CD ]
Line_68 $$ public void testDeleteGroup() -->Line_70 $$ Connection conn = getConnection("cases")[ CD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_70 $$ getConnection("cases")[ CD ]
Line_68 $$ public void testDeleteGroup() -->Line_71 $$ Statement stat = conn.createStatement()[ CD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_71 $$ conn.createStatement()[ CD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_71 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_71 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_71 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_71 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_71 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_71 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_71 $$ conn.createStatement()[ FD ]
Line_68 $$ public void testDeleteGroup() -->Line_72 $$ stat.execute("delete from test where id not in " + "(select min(x) from test group by id)")[ CD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_72 $$ stat.execute("delete from test where id not in " + "(select min(x) from test group by id)")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_72 $$ stat.execute("delete from test where id not in " + "(select min(x) from test group by id)")[ FD ]
Line_0 $$ Entry-->Line_77 $$ //8
public class func [ CD ]
Line_77 $$ //8
public class func -->Line_78 $$ public void shutdown(DataSource dataSource, String databaseName) [ CD ]
Line_78 $$ public void shutdown(DataSource dataSource, String databaseName) -->Line_79 $$ Connection connection = dataSource.getConnection()[ CD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_79 $$ dataSource.getConnection()[ CD ]
Line_78 $$ public void shutdown(DataSource dataSource, String databaseName) -->Line_80 $$ Statement stmt = connection.createStatement()[ CD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_80 $$ connection.createStatement()[ CD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_80 $$ connection.createStatement()[ FD ]
Line_78 $$ public void shutdown(DataSource dataSource, String databaseName) -->Line_81 $$ stmt.execute("SHUTDOWN")[ CD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_81 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_81 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_81 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_81 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_81 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_81 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_0 $$ Entry-->Line_85 $$ //9
public class func [ CD ]
Line_85 $$ //9
public class func -->Line_86 $$ public void testEmptyStatements() [ CD ]
Line_86 $$ public void testEmptyStatements() -->Line_87 $$ Connection conn = getConnection("cases")[ CD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_87 $$ getConnection("cases")[ CD ]
Line_86 $$ public void testEmptyStatements() -->Line_88 $$ Statement stat = conn.createStatement()[ CD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_88 $$ conn.createStatement()[ CD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_88 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_88 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_88 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_88 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_88 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_88 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_88 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_88 $$ conn.createStatement()[ FD ]
Line_86 $$ public void testEmptyStatements() -->Line_89 $$ stat.execute(" ;")[ CD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_89 $$ stat.execute(" ;")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_89 $$ stat.execute(" ;")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_89 $$ stat.execute(" ;")[ FD ]
Line_0 $$ Entry-->Line_93 $$ //10
public class func [ CD ]
Line_93 $$ //10
public class func -->Line_94 $$ public void wrappedService(HttpServletRequest request, HttpServletResponse response, String[] path, java.util.LinkedHashMap<String, String> query) [ CD ]
Line_94 $$ public void wrappedService(HttpServletRequest request, HttpServletResponse response, String[] path, java.util.LinkedHashMap<String, String> query) -->Line_95 $$ InitialContext jndiContext = new InitialContext()[ CD ]
Line_94 $$ public void wrappedService(HttpServletRequest request, HttpServletResponse response, String[] path, java.util.LinkedHashMap<String, String> query) -->Line_96 $$ DataSource ds = (DataSource) jndiContext.lookup("java:comp/env/jdbc/connPool")[ CD ]
Line_95 $$ InitialContext jndiContext = new InitialContext()-->Line_96 $$ jndiContext.lookup("java:comp/env/jdbc/connPool")[ FD ]
Line_94 $$ public void wrappedService(HttpServletRequest request, HttpServletResponse response, String[] path, java.util.LinkedHashMap<String, String> query) -->Line_97 $$ Connection conn = ds.getConnection("root", "password")[ CD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_97 $$ ds.getConnection("root", "password")[ CD ]
Line_96 $$ DataSource ds = (DataSource) jndiContext.lookup("java:comp/env/jdbc/connPool")-->Line_97 $$ ds.getConnection("root", "password")[ FD ]
Line_94 $$ public void wrappedService(HttpServletRequest request, HttpServletResponse response, String[] path, java.util.LinkedHashMap<String, String> query) -->Line_98 $$ Statement stmt = conn.createStatement()[ CD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_98 $$ conn.createStatement()[ CD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_98 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_98 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_98 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_98 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_98 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_98 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_98 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_98 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_98 $$ conn.createStatement()[ FD ]
Line_94 $$ public void wrappedService(HttpServletRequest request, HttpServletResponse response, String[] path, java.util.LinkedHashMap<String, String> query) -->Line_99 $$ boolean results = stmt.execute("SELECT NOW();")[ CD ]
Line_99 $$ boolean results = stmt.execute("SELECT NOW();")-->Line_99 $$ stmt.execute("SELECT NOW();")[ CD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_99 $$ stmt.execute("SELECT NOW();")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_99 $$ stmt.execute("SELECT NOW();")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_99 $$ stmt.execute("SELECT NOW();")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_99 $$ stmt.execute("SELECT NOW();")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_99 $$ stmt.execute("SELECT NOW();")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_99 $$ stmt.execute("SELECT NOW();")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_99 $$ stmt.execute("SELECT NOW();")[ FD ]
Line_94 $$ public void wrappedService(HttpServletRequest request, HttpServletResponse response, String[] path, java.util.LinkedHashMap<String, String> query) -->Line_100 $$ out.println("<br>results: " + results + "<br>")[ CD ]
Line_0 $$ Entry-->Line_104 $$ //11
public class func [ CD ]
Line_104 $$ //11
public class func -->Line_105 $$ public void shutdown(DataSource dataSource, String databaseName) [ CD ]
Line_105 $$ public void shutdown(DataSource dataSource, String databaseName) -->Line_106 $$ java.sql.Connection connection = dataSource.getConnection()[ CD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_106 $$ dataSource.getConnection()[ CD ]
Line_105 $$ public void shutdown(DataSource dataSource, String databaseName) -->Line_107 $$ Statement stmt = connection.createStatement()[ CD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_107 $$ connection.createStatement()[ CD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_107 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_107 $$ connection.createStatement()[ FD ]
Line_105 $$ public void shutdown(DataSource dataSource, String databaseName) -->Line_108 $$ stmt.execute("SHUTDOWN")[ CD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_108 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_108 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_108 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_108 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_108 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_108 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_108 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_108 $$ stmt.execute("SHUTDOWN")[ FD ]
Line_0 $$ Entry-->Line_112 $$ //12
public class func [ CD ]
Line_112 $$ //12
public class func -->Line_113 $$ public void onRelease(JDBCDataStore store, Connection cx) [ CD ]
Line_113 $$ public void onRelease(JDBCDataStore store, Connection cx) -->Line_114 $$ cx.createStatement()[ CD ]
Line_113 $$ public void onRelease(JDBCDataStore store, Connection cx) -->Line_115 $$ st.execute(command)[ CD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_115 $$ st.execute(command)[ FD ]
Line_113 $$ public void onRelease(JDBCDataStore store, Connection cx) -->Line_116 $$ store.closeSafe(st)[ CD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_116 $$ store.closeSafe(st)[ FD ]
Line_0 $$ Entry-->Line_120 $$ //13
public class func [ CD ]
Line_120 $$ //13
public class func -->Line_121 $$ public void onBorrow(JDBCDataStore store, Connection cx) [ CD ]
Line_121 $$ public void onBorrow(JDBCDataStore store, Connection cx) -->Line_122 $$ cx.createStatement()[ CD ]
Line_121 $$ public void onBorrow(JDBCDataStore store, Connection cx) -->Line_123 $$ st.execute("SET @MYVAR = " + value)[ CD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_123 $$ st.execute("SET @MYVAR = " + value)[ FD ]
Line_121 $$ public void onBorrow(JDBCDataStore store, Connection cx) -->Line_124 $$ store.closeSafe(st)[ CD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_124 $$ store.closeSafe(st)[ FD ]
Line_0 $$ Entry-->Line_128 $$ //14
public class func [ CD ]
Line_128 $$ //14
public class func -->Line_129 $$ public void onBorrow(JDBCDataStore store, Connection cx) [ CD ]
Line_129 $$ public void onBorrow(JDBCDataStore store, Connection cx) -->Line_130 $$ cx.createStatement()[ CD ]
Line_129 $$ public void onBorrow(JDBCDataStore store, Connection cx) -->Line_131 $$ st.execute(command)[ CD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_131 $$ st.execute(command)[ FD ]
Line_129 $$ public void onBorrow(JDBCDataStore store, Connection cx) -->Line_132 $$ store.closeSafe(st)[ CD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_132 $$ store.closeSafe(st)[ FD ]
Line_0 $$ Entry-->Line_136 $$ //15
public class func [ CD ]
Line_136 $$ //15
public class func -->Line_137 $$ public void before() [ CD ]
Line_137 $$ public void before() -->Line_138 $$ final Connection connection = dataSource.getConnection()[ CD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_138 $$ dataSource.getConnection()[ CD ]
Line_137 $$ public void before() -->Line_139 $$ final Statement statement = connection.createStatement()[ CD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_139 $$ connection.createStatement()[ CD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_139 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_139 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_139 $$ connection.createStatement()[ FD ]
Line_137 $$ public void before() -->Line_140 $$ statement.execute("RUNSCRIPT FROM 'classpath:/backup.sql'")[ CD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_140 $$ statement.execute("RUNSCRIPT FROM 'classpath:/backup.sql'")[ FD ]
Line_0 $$ Entry-->Line_144 $$ //16
public class func [ CD ]
Line_144 $$ //16
public class func -->Line_145 $$ public void f_test_createIndex() [ CD ]
Line_145 $$ public void f_test_createIndex() -->Line_146 $$ Connection conn = dataSource.getConnection()[ CD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_146 $$ dataSource.getConnection()[ CD ]
Line_145 $$ public void f_test_createIndex() -->Line_147 $$ Statement stmt = conn.createStatement()[ CD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_147 $$ conn.createStatement()[ CD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_147 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_147 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_147 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_147 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_147 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_147 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_147 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_147 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_147 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_147 $$ conn.createStatement()[ FD ]
Line_145 $$ public void f_test_createIndex() -->Line_148 $$ stmt.execute(sql)[ CD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_148 $$ stmt.execute(sql)[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_148 $$ stmt.execute(sql)[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_148 $$ stmt.execute(sql)[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_148 $$ stmt.execute(sql)[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_148 $$ stmt.execute(sql)[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_148 $$ stmt.execute(sql)[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_148 $$ stmt.execute(sql)[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_148 $$ stmt.execute(sql)[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_148 $$ stmt.execute(sql)[ FD ]
Line_0 $$ Entry-->Line_152 $$ //17
public class func [ CD ]
Line_152 $$ //17
public class func -->Line_153 $$ public void execute(String sql) [ CD ]
Line_153 $$ public void execute(String sql) -->Line_154 $$ dataSource.getConnection()[ CD ]
Line_153 $$ public void execute(String sql) -->Line_155 $$ conn.createStatement()[ CD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_155 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_155 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_155 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_155 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_155 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_155 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_155 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_155 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_155 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_155 $$ conn.createStatement()[ FD ]
Line_153 $$ public void execute(String sql) -->Line_156 $$ stmt.execute(sql)[ CD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_156 $$ stmt.execute(sql)[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_156 $$ stmt.execute(sql)[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_156 $$ stmt.execute(sql)[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_156 $$ stmt.execute(sql)[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_156 $$ stmt.execute(sql)[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_156 $$ stmt.execute(sql)[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_156 $$ stmt.execute(sql)[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_156 $$ stmt.execute(sql)[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_156 $$ stmt.execute(sql)[ FD ]
Line_153 $$ public void execute(String sql) -->Line_157 $$ JdbcUtils.close(conn)[ CD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_157 $$ JdbcUtils.close(conn)[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_157 $$ JdbcUtils.close(conn)[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_157 $$ JdbcUtils.close(conn)[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_157 $$ JdbcUtils.close(conn)[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_157 $$ JdbcUtils.close(conn)[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_157 $$ JdbcUtils.close(conn)[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_157 $$ JdbcUtils.close(conn)[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_157 $$ JdbcUtils.close(conn)[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_157 $$ JdbcUtils.close(conn)[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_157 $$ JdbcUtils.close(conn)[ FD ]
Line_0 $$ Entry-->Line_161 $$ //18
public class func [ CD ]
Line_161 $$ //18
public class func -->Line_162 $$ public void testDefaultMinMax() [ CD ]
Line_162 $$ public void testDefaultMinMax() -->Line_163 $$ deleteDb("sequence")[ CD ]
Line_162 $$ public void testDefaultMinMax() -->Line_164 $$ Connection conn = getConnection("sequence")[ CD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_164 $$ getConnection("sequence")[ CD ]
Line_162 $$ public void testDefaultMinMax() -->Line_165 $$ Statement stat = conn.createStatement()[ CD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_165 $$ conn.createStatement()[ CD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_165 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_165 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_165 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_165 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_165 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_165 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_165 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_165 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_165 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_165 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_165 $$ conn.createStatement()[ FD ]
Line_162 $$ public void testDefaultMinMax() -->Line_166 $$ stat.execute("create sequence b START WITH 7320917853639540658 INCREMENT -1")[ CD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_166 $$ stat.execute("create sequence b START WITH 7320917853639540658 INCREMENT -1")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_166 $$ stat.execute("create sequence b START WITH 7320917853639540658 INCREMENT -1")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_166 $$ stat.execute("create sequence b START WITH 7320917853639540658 INCREMENT -1")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_166 $$ stat.execute("create sequence b START WITH 7320917853639540658 INCREMENT -1")[ FD ]
Line_0 $$ Entry-->Line_170 $$ //19
public class func [ CD ]
Line_170 $$ //19
public class func -->Line_171 $$ public void testAlterSequenceColumn() [ CD ]
Line_171 $$ public void testAlterSequenceColumn() -->Line_172 $$ deleteDb("sequence")[ CD ]
Line_171 $$ public void testAlterSequenceColumn() -->Line_173 $$ Connection conn = getConnection("sequence")[ CD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_173 $$ getConnection("sequence")[ CD ]
Line_171 $$ public void testAlterSequenceColumn() -->Line_174 $$ Statement stat = conn.createStatement()[ CD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_174 $$ conn.createStatement()[ CD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_174 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_174 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_174 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_174 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_174 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_174 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_174 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_174 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_174 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_174 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_174 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_174 $$ conn.createStatement()[ FD ]
Line_171 $$ public void testAlterSequenceColumn() -->Line_175 $$ stat.execute("INSERT INTO TEST (name) VALUES('Other World')")[ CD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_175 $$ stat.execute("INSERT INTO TEST (name) VALUES('Other World')")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_175 $$ stat.execute("INSERT INTO TEST (name) VALUES('Other World')")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_175 $$ stat.execute("INSERT INTO TEST (name) VALUES('Other World')")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_175 $$ stat.execute("INSERT INTO TEST (name) VALUES('Other World')")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_175 $$ stat.execute("INSERT INTO TEST (name) VALUES('Other World')")[ FD ]
Line_0 $$ Entry-->Line_179 $$ //20
public class func [ CD ]
Line_179 $$ //20
public class func -->Line_180 $$ public void testSchemaSearchPath() [ CD ]
Line_180 $$ public void testSchemaSearchPath() -->Line_181 $$ deleteDb("sequence")[ CD ]
Line_180 $$ public void testSchemaSearchPath() -->Line_182 $$ Connection conn = getConnection("sequence")[ CD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_182 $$ getConnection("sequence")[ CD ]
Line_180 $$ public void testSchemaSearchPath() -->Line_183 $$ Statement stat = conn.createStatement()[ CD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_183 $$ conn.createStatement()[ CD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_183 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_183 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_183 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_183 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_183 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_183 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_183 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_183 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_183 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_183 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_183 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_183 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_183 $$ conn.createStatement()[ FD ]
Line_180 $$ public void testSchemaSearchPath() -->Line_184 $$ stat.execute("CALL TEST_SEQ.CURRVAL")[ CD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_184 $$ stat.execute("CALL TEST_SEQ.CURRVAL")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_184 $$ stat.execute("CALL TEST_SEQ.CURRVAL")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_184 $$ stat.execute("CALL TEST_SEQ.CURRVAL")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_184 $$ stat.execute("CALL TEST_SEQ.CURRVAL")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_184 $$ stat.execute("CALL TEST_SEQ.CURRVAL")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_184 $$ stat.execute("CALL TEST_SEQ.CURRVAL")[ FD ]
Line_0 $$ Entry-->Line_188 $$ //21
public class func [ CD ]
Line_188 $$ //21
public class func -->Line_189 $$ public void testRunscriptFromClasspath() [ CD ]
Line_189 $$ public void testRunscriptFromClasspath() -->Line_190 $$ deleteDb("runscript")[ CD ]
Line_189 $$ public void testRunscriptFromClasspath() -->Line_191 $$ getConnection("runscript")[ CD ]
Line_189 $$ public void testRunscriptFromClasspath() -->Line_192 $$ Statement stat = conn.createStatement()[ CD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_192 $$ conn.createStatement()[ CD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_192 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_192 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_192 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_192 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_192 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_192 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_192 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_192 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_192 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_192 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_192 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_192 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_192 $$ conn.createStatement()[ FD ]
Line_189 $$ public void testRunscriptFromClasspath() -->Line_193 $$ stat.execute("select * from version")[ CD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_193 $$ stat.execute("select * from version")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_193 $$ stat.execute("select * from version")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_193 $$ stat.execute("select * from version")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_193 $$ stat.execute("select * from version")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_193 $$ stat.execute("select * from version")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_193 $$ stat.execute("select * from version")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_193 $$ stat.execute("select * from version")[ FD ]
Line_0 $$ Entry-->Line_197 $$ //22
public class func [ CD ]
Line_197 $$ //22
public class func -->Line_198 $$ public void testLobUpdateMany() [ CD ]
Line_198 $$ public void testLobUpdateMany() -->Line_199 $$ deleteDb("lob")[ CD ]
Line_198 $$ public void testLobUpdateMany() -->Line_200 $$ Connection conn = getConnection("lob")[ CD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_200 $$ getConnection("lob")[ CD ]
Line_198 $$ public void testLobUpdateMany() -->Line_201 $$ Statement stat = conn.createStatement()[ CD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_201 $$ conn.createStatement()[ CD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_201 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_201 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_201 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_201 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_201 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_201 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_201 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_201 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_201 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_201 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_201 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_201 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_201 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_201 $$ conn.createStatement()[ FD ]
Line_198 $$ public void testLobUpdateMany() -->Line_202 $$ stat.execute("create table post(id int primary key, text clob) as " + "select x, space(96) from system_range(1, 329)")[ CD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_202 $$ stat.execute("create table post(id int primary key, text clob) as " + "select x, space(96) from system_range(1, 329)")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_202 $$ stat.execute("create table post(id int primary key, text clob) as " + "select x, space(96) from system_range(1, 329)")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_202 $$ stat.execute("create table post(id int primary key, text clob) as " + "select x, space(96) from system_range(1, 329)")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_202 $$ stat.execute("create table post(id int primary key, text clob) as " + "select x, space(96) from system_range(1, 329)")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_202 $$ stat.execute("create table post(id int primary key, text clob) as " + "select x, space(96) from system_range(1, 329)")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_202 $$ stat.execute("create table post(id int primary key, text clob) as " + "select x, space(96) from system_range(1, 329)")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_202 $$ stat.execute("create table post(id int primary key, text clob) as " + "select x, space(96) from system_range(1, 329)")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_202 $$ stat.execute("create table post(id int primary key, text clob) as " + "select x, space(96) from system_range(1, 329)")[ FD ]
Line_0 $$ Entry-->Line_207 $$ //23
public class func [ CD ]
Line_207 $$ //23
public class func -->Line_208 $$ public void testCreateAsSelect() [ CD ]
Line_208 $$ public void testCreateAsSelect() -->Line_209 $$ deleteDb("lob")[ CD ]
Line_208 $$ public void testCreateAsSelect() -->Line_210 $$ getConnection("lob")[ CD ]
Line_208 $$ public void testCreateAsSelect() -->Line_211 $$ conn.createStatement()[ CD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_211 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_211 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_211 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_211 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_211 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_211 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_211 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_211 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_211 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_211 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_211 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_211 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_211 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_211 $$ conn.createStatement()[ FD ]
Line_208 $$ public void testCreateAsSelect() -->Line_212 $$ stat.execute("create table test(id int, data clob) as select 1, space(10000)")[ CD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_212 $$ stat.execute("create table test(id int, data clob) as select 1, space(10000)")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_212 $$ stat.execute("create table test(id int, data clob) as select 1, space(10000)")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_212 $$ stat.execute("create table test(id int, data clob) as select 1, space(10000)")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_212 $$ stat.execute("create table test(id int, data clob) as select 1, space(10000)")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_212 $$ stat.execute("create table test(id int, data clob) as select 1, space(10000)")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_212 $$ stat.execute("create table test(id int, data clob) as select 1, space(10000)")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_212 $$ stat.execute("create table test(id int, data clob) as select 1, space(10000)")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_212 $$ stat.execute("create table test(id int, data clob) as select 1, space(10000)")[ FD ]
Line_0 $$ Entry-->Line_216 $$ //24
public class func [ CD ]
Line_216 $$ //24
public class func -->Line_217 $$ public void dropTable() [ CD ]
Line_217 $$ public void dropTable() -->Line_218 $$ Connection connection = createConnection()[ CD ]
Line_218 $$ Connection connection = createConnection()-->Line_218 $$ createConnection()[ CD ]
Line_217 $$ public void dropTable() -->Line_219 $$ Statement statement = connection.createStatement()[ CD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_219 $$ connection.createStatement()[ CD ]
Line_218 $$ Connection connection = createConnection()-->Line_219 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_219 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_219 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_219 $$ connection.createStatement()[ FD ]
Line_217 $$ public void dropTable() -->Line_220 $$ statement.execute("drop table ACCOUNT")[ CD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_220 $$ statement.execute("drop table ACCOUNT")[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_220 $$ statement.execute("drop table ACCOUNT")[ FD ]
Line_0 $$ Entry-->Line_224 $$ //25
public class func [ CD ]
Line_224 $$ //25
public class func -->Line_225 $$ public void tearDown() [ CD ]
Line_225 $$ public void tearDown() -->Line_226 $$ Connection connection = createConnection()[ CD ]
Line_226 $$ Connection connection = createConnection()-->Line_226 $$ createConnection()[ CD ]
Line_225 $$ public void tearDown() -->Line_227 $$ Statement statement = connection.createStatement()[ CD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_227 $$ connection.createStatement()[ CD ]
Line_226 $$ Connection connection = createConnection()-->Line_227 $$ connection.createStatement()[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_227 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_227 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_227 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_227 $$ connection.createStatement()[ FD ]
Line_225 $$ public void tearDown() -->Line_228 $$ statement.execute("drop table ACCOUNT")[ CD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_228 $$ statement.execute("drop table ACCOUNT")[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_228 $$ statement.execute("drop table ACCOUNT")[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_228 $$ statement.execute("drop table ACCOUNT")[ FD ]
Line_0 $$ Entry-->Line_232 $$ //26
public class func [ CD ]
Line_232 $$ //26
public class func -->Line_233 $$ public void migrate(Connection connection) [ CD ]
Line_233 $$ public void migrate(Connection connection) -->Line_234 $$ connection.createStatement()[ CD ]
Line_226 $$ Connection connection = createConnection()-->Line_234 $$ connection.createStatement()[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_234 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_234 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_234 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_234 $$ connection.createStatement()[ FD ]
Line_233 $$ public void migrate(Connection connection) -->Line_235 $$ statement.execute("CREATE TRIGGER clinics_history_trigger AFTER INSERT ON clinics FOR EACH ROW CALL\n" + "\"org.flywaydb.core.internal.dbsupport.h2.TestTrigger\";")[ CD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_235 $$ statement.execute("CREATE TRIGGER clinics_history_trigger AFTER INSERT ON clinics FOR EACH ROW CALL\n" + "\"org.flywaydb.core.internal.dbsupport.h2.TestTrigger\";")[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_235 $$ statement.execute("CREATE TRIGGER clinics_history_trigger AFTER INSERT ON clinics FOR EACH ROW CALL\n" + "\"org.flywaydb.core.internal.dbsupport.h2.TestTrigger\";")[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_235 $$ statement.execute("CREATE TRIGGER clinics_history_trigger AFTER INSERT ON clinics FOR EACH ROW CALL\n" + "\"org.flywaydb.core.internal.dbsupport.h2.TestTrigger\";")[ FD ]
Line_233 $$ public void migrate(Connection connection) -->Line_237 $$ JdbcUtils.closeStatement(statement)[ CD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_237 $$ JdbcUtils.closeStatement(statement)[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_237 $$ JdbcUtils.closeStatement(statement)[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_237 $$ JdbcUtils.closeStatement(statement)[ FD ]
Line_0 $$ Entry-->Line_241 $$ //27
public class func [ CD ]
Line_241 $$ //27
public class func -->Line_242 $$ public void execute(Connection connection) [ CD ]
Line_242 $$ public void execute(Connection connection) -->Line_243 $$ connection.createStatement()[ CD ]
Line_226 $$ Connection connection = createConnection()-->Line_243 $$ connection.createStatement()[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_243 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_243 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_243 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_243 $$ connection.createStatement()[ FD ]
Line_242 $$ public void execute(Connection connection) -->Line_244 $$ statement.execute("INSERT INTO test_user (name) VALUES ('Resolvix')")[ CD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_244 $$ statement.execute("INSERT INTO test_user (name) VALUES ('Resolvix')")[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_244 $$ statement.execute("INSERT INTO test_user (name) VALUES ('Resolvix')")[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_244 $$ statement.execute("INSERT INTO test_user (name) VALUES ('Resolvix')")[ FD ]
Line_242 $$ public void execute(Connection connection) -->Line_245 $$ JdbcUtils.closeStatement(statement)[ CD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_245 $$ JdbcUtils.closeStatement(statement)[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_245 $$ JdbcUtils.closeStatement(statement)[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_245 $$ JdbcUtils.closeStatement(statement)[ FD ]
Line_0 $$ Entry-->Line_249 $$ //28
public class func [ CD ]
Line_249 $$ //28
public class func -->Line_250 $$ public void testKeyAsColumnInMySQLMode() [ CD ]
Line_250 $$ public void testKeyAsColumnInMySQLMode() -->Line_251 $$ Connection c = getConnection("compatibility;MODE=MYSQL")[ CD ]
Line_251 $$ Connection c = getConnection("compatibility;MODE=MYSQL")-->Line_251 $$ getConnection("compatibility;MODE=MYSQL")[ CD ]
Line_250 $$ public void testKeyAsColumnInMySQLMode() -->Line_252 $$ Statement stat = c.createStatement()[ CD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_252 $$ c.createStatement()[ CD ]
Line_251 $$ Connection c = getConnection("compatibility;MODE=MYSQL")-->Line_252 $$ c.createStatement()[ FD ]
Line_250 $$ public void testKeyAsColumnInMySQLMode() -->Line_253 $$ stat.execute("drop table test")[ CD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_253 $$ stat.execute("drop table test")[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_253 $$ stat.execute("drop table test")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_253 $$ stat.execute("drop table test")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_253 $$ stat.execute("drop table test")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_253 $$ stat.execute("drop table test")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_253 $$ stat.execute("drop table test")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_253 $$ stat.execute("drop table test")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_253 $$ stat.execute("drop table test")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_253 $$ stat.execute("drop table test")[ FD ]
Line_0 $$ Entry-->Line_257 $$ //29
public class func [ CD ]
Line_257 $$ //29
public class func -->Line_258 $$ public void testConstraintAlterTable() [ CD ]
Line_258 $$ public void testConstraintAlterTable() -->Line_259 $$ deleteDb("cases")[ CD ]
Line_258 $$ public void testConstraintAlterTable() -->Line_260 $$ Connection conn = getConnection("cases")[ CD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_260 $$ getConnection("cases")[ CD ]
Line_258 $$ public void testConstraintAlterTable() -->Line_261 $$ Statement stat = conn.createStatement()[ CD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_261 $$ conn.createStatement()[ CD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_261 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_261 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_261 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_261 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_261 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_261 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_261 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_261 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_261 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_261 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_261 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_261 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_261 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_261 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_261 $$ conn.createStatement()[ FD ]
Line_258 $$ public void testConstraintAlterTable() -->Line_262 $$ stat.execute("alter table parent add column p2 varchar")[ CD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_262 $$ stat.execute("alter table parent add column p2 varchar")[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_262 $$ stat.execute("alter table parent add column p2 varchar")[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_262 $$ stat.execute("alter table parent add column p2 varchar")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_262 $$ stat.execute("alter table parent add column p2 varchar")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_262 $$ stat.execute("alter table parent add column p2 varchar")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_262 $$ stat.execute("alter table parent add column p2 varchar")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_262 $$ stat.execute("alter table parent add column p2 varchar")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_262 $$ stat.execute("alter table parent add column p2 varchar")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_262 $$ stat.execute("alter table parent add column p2 varchar")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_262 $$ stat.execute("alter table parent add column p2 varchar")[ FD ]
Line_0 $$ Entry-->Line_266 $$ //30
public class func [ CD ]
Line_266 $$ //30
public class func -->Line_267 $$ public void createDatabase() [ CD ]
Line_267 $$ public void createDatabase() -->Line_268 $$ Connection conn = getConnection()[ CD ]
Line_268 $$ Connection conn = getConnection()-->Line_268 $$ getConnection()[ CD ]
Line_267 $$ public void createDatabase() -->Line_269 $$ conn.setAutoCommit(false)[ CD ]
Line_268 $$ Connection conn = getConnection()-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_269 $$ conn.setAutoCommit(false)[ FD ]
Line_267 $$ public void createDatabase() -->Line_270 $$ Statement st = conn.createStatement()[ CD ]
Line_270 $$ Statement st = conn.createStatement()-->Line_270 $$ conn.createStatement()[ CD ]
Line_268 $$ Connection conn = getConnection()-->Line_270 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_270 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_270 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_270 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_270 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_270 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_270 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_270 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_270 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_270 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_270 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_270 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_270 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_270 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_270 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_270 $$ conn.createStatement()[ FD ]
Line_267 $$ public void createDatabase() -->Line_271 $$ st.execute("DROP TABLE T1")[ CD ]
Line_270 $$ Statement st = conn.createStatement()-->Line_271 $$ st.execute("DROP TABLE T1")[ FD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_271 $$ st.execute("DROP TABLE T1")[ FD ]
Line_0 $$ Entry-->Line_275 $$ //31
public class func [ CD ]
Line_275 $$ //31
public class func -->Line_276 $$ public void testViewParameters() [ CD ]
Line_276 $$ public void testViewParameters() -->Line_277 $$ deleteDb("cases")[ CD ]
Line_276 $$ public void testViewParameters() -->Line_278 $$ Connection conn = getConnection("cases")[ CD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_278 $$ getConnection("cases")[ CD ]
Line_276 $$ public void testViewParameters() -->Line_279 $$ Statement stat = conn.createStatement()[ CD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_279 $$ conn.createStatement()[ CD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_279 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_279 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_279 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_279 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_279 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_279 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_279 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_279 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_279 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_279 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_279 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_279 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_279 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_279 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_279 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_279 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_279 $$ conn.createStatement()[ FD ]
Line_276 $$ public void testViewParameters() -->Line_280 $$ stat.execute("create view test as select 0 value, 'x' name from dual")[ CD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_280 $$ stat.execute("create view test as select 0 value, 'x' name from dual")[ FD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_280 $$ stat.execute("create view test as select 0 value, 'x' name from dual")[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_280 $$ stat.execute("create view test as select 0 value, 'x' name from dual")[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_280 $$ stat.execute("create view test as select 0 value, 'x' name from dual")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_280 $$ stat.execute("create view test as select 0 value, 'x' name from dual")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_280 $$ stat.execute("create view test as select 0 value, 'x' name from dual")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_280 $$ stat.execute("create view test as select 0 value, 'x' name from dual")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_280 $$ stat.execute("create view test as select 0 value, 'x' name from dual")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_280 $$ stat.execute("create view test as select 0 value, 'x' name from dual")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_280 $$ stat.execute("create view test as select 0 value, 'x' name from dual")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_280 $$ stat.execute("create view test as select 0 value, 'x' name from dual")[ FD ]
Line_0 $$ Entry-->Line_285 $$ //32
public class func [ CD ]
Line_285 $$ //32
public class func -->Line_286 $$ public void testReferenceableIndexUsage() [ CD ]
Line_286 $$ public void testReferenceableIndexUsage() -->Line_287 $$ Connection conn = getConnection("cases")[ CD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_287 $$ getConnection("cases")[ CD ]
Line_286 $$ public void testReferenceableIndexUsage() -->Line_288 $$ Statement stat = conn.createStatement()[ CD ]
Line_288 $$ Statement stat = conn.createStatement()-->Line_288 $$ conn.createStatement()[ CD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_288 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_288 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_288 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_288 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_288 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_288 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_288 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_288 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_288 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_288 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_288 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_288 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_288 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_288 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_288 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_288 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_288 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_288 $$ conn.createStatement()[ FD ]
Line_286 $$ public void testReferenceableIndexUsage() -->Line_289 $$ stat.execute("drop table if exists a, b")[ CD ]
Line_288 $$ Statement stat = conn.createStatement()-->Line_289 $$ stat.execute("drop table if exists a, b")[ FD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_289 $$ stat.execute("drop table if exists a, b")[ FD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_289 $$ stat.execute("drop table if exists a, b")[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_289 $$ stat.execute("drop table if exists a, b")[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_289 $$ stat.execute("drop table if exists a, b")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_289 $$ stat.execute("drop table if exists a, b")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_289 $$ stat.execute("drop table if exists a, b")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_289 $$ stat.execute("drop table if exists a, b")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_289 $$ stat.execute("drop table if exists a, b")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_289 $$ stat.execute("drop table if exists a, b")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_289 $$ stat.execute("drop table if exists a, b")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_289 $$ stat.execute("drop table if exists a, b")[ FD ]
Line_0 $$ Entry-->Line_293 $$ //33
public class func [ CD ]
Line_293 $$ //33
public class func -->Line_294 $$ public void testInsertRollback() [ CD ]
Line_294 $$ public void testInsertRollback() -->Line_295 $$ Connection conn = getConnection()[ CD ]
Line_295 $$ Connection conn = getConnection()-->Line_295 $$ getConnection()[ CD ]
Line_294 $$ public void testInsertRollback() -->Line_296 $$ conn.setAutoCommit(false)[ CD ]
Line_295 $$ Connection conn = getConnection()-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_296 $$ conn.setAutoCommit(false)[ FD ]
Line_294 $$ public void testInsertRollback() -->Line_297 $$ Statement stmt = conn.createStatement()[ CD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_297 $$ conn.createStatement()[ CD ]
Line_295 $$ Connection conn = getConnection()-->Line_297 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_297 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_297 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_297 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_297 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_297 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_297 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_297 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_297 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_297 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_297 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_297 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_297 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_297 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_297 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_297 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_297 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_297 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_297 $$ conn.createStatement()[ FD ]
Line_294 $$ public void testInsertRollback() -->Line_298 $$ stmt.execute(CREATE_TABLE)[ CD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_298 $$ stmt.execute(CREATE_TABLE)[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_298 $$ stmt.execute(CREATE_TABLE)[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_298 $$ stmt.execute(CREATE_TABLE)[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_298 $$ stmt.execute(CREATE_TABLE)[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_298 $$ stmt.execute(CREATE_TABLE)[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_298 $$ stmt.execute(CREATE_TABLE)[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_298 $$ stmt.execute(CREATE_TABLE)[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_298 $$ stmt.execute(CREATE_TABLE)[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_298 $$ stmt.execute(CREATE_TABLE)[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_298 $$ stmt.execute(CREATE_TABLE)[ FD ]
Line_0 $$ Entry-->Line_302 $$ //34
public class func [ CD ]
Line_302 $$ //34
public class func -->Line_303 $$ public void executeSQL(Connection con, String sql) [ CD ]
Line_303 $$ public void executeSQL(Connection con, String sql) -->Line_304 $$ Statement stmt = con.createStatement()[ CD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_304 $$ con.createStatement()[ CD ]
Line_303 $$ public void executeSQL(Connection con, String sql) -->Line_305 $$ stmt.execute(sql)[ CD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_305 $$ stmt.execute(sql)[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_305 $$ stmt.execute(sql)[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_305 $$ stmt.execute(sql)[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_305 $$ stmt.execute(sql)[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_305 $$ stmt.execute(sql)[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_305 $$ stmt.execute(sql)[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_305 $$ stmt.execute(sql)[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_305 $$ stmt.execute(sql)[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_305 $$ stmt.execute(sql)[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_305 $$ stmt.execute(sql)[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_305 $$ stmt.execute(sql)[ FD ]
Line_303 $$ public void executeSQL(Connection con, String sql) -->Line_306 $$ return stmt.getResultSet();[ CD ]
Line_306 $$ return stmt.getResultSet();-->Line_306 $$ stmt.getResultSet()[ CD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_306 $$ stmt.getResultSet()[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_306 $$ stmt.getResultSet()[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_306 $$ stmt.getResultSet()[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_306 $$ stmt.getResultSet()[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_306 $$ stmt.getResultSet()[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_306 $$ stmt.getResultSet()[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_306 $$ stmt.getResultSet()[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_306 $$ stmt.getResultSet()[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_306 $$ stmt.getResultSet()[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_306 $$ stmt.getResultSet()[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_306 $$ stmt.getResultSet()[ FD ]
Line_0 $$ Entry-->Line_310 $$ //35
public class func [ CD ]
Line_310 $$ //35
public class func -->Line_311 $$ public void fillSimpleTable3(Connection conn) [ CD ]
Line_311 $$ public void fillSimpleTable3(Connection conn) -->Line_312 $$ Statement statement = conn.createStatement()[ CD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_312 $$ conn.createStatement()[ CD ]
Line_295 $$ Connection conn = getConnection()-->Line_312 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_312 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_312 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_312 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_312 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_312 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_312 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_312 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_312 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_312 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_312 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_312 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_312 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_312 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_312 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_312 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_312 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_312 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_312 $$ conn.createStatement()[ FD ]
Line_311 $$ public void fillSimpleTable3(Connection conn) -->Line_313 $$ statement.execute("INSERT INTO " + SIMPLE_TABLE3 + " VALUES(3, 4)")[ CD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_313 $$ statement.execute("INSERT INTO " + SIMPLE_TABLE3 + " VALUES(3, 4)")[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_313 $$ statement.execute("INSERT INTO " + SIMPLE_TABLE3 + " VALUES(3, 4)")[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_313 $$ statement.execute("INSERT INTO " + SIMPLE_TABLE3 + " VALUES(3, 4)")[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_313 $$ statement.execute("INSERT INTO " + SIMPLE_TABLE3 + " VALUES(3, 4)")[ FD ]
Line_0 $$ Entry-->Line_317 $$ //36
public class func [ CD ]
Line_317 $$ //36
public class func -->Line_318 $$ public void fillSimpleTable1(Connection conn) [ CD ]
Line_318 $$ public void fillSimpleTable1(Connection conn) -->Line_319 $$ Statement statement = conn.createStatement()[ CD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_319 $$ conn.createStatement()[ CD ]
Line_295 $$ Connection conn = getConnection()-->Line_319 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_319 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_319 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_319 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_319 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_319 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_319 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_319 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_319 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_319 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_319 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_319 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_319 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_319 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_319 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_319 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_319 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_319 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_319 $$ conn.createStatement()[ FD ]
Line_318 $$ public void fillSimpleTable1(Connection conn) -->Line_320 $$ statement.execute("INSERT INTO " + SIMPLE_TABLE1 + " VALUES(2, 5, 7)")[ CD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_320 $$ statement.execute("INSERT INTO " + SIMPLE_TABLE1 + " VALUES(2, 5, 7)")[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_320 $$ statement.execute("INSERT INTO " + SIMPLE_TABLE1 + " VALUES(2, 5, 7)")[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_320 $$ statement.execute("INSERT INTO " + SIMPLE_TABLE1 + " VALUES(2, 5, 7)")[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_320 $$ statement.execute("INSERT INTO " + SIMPLE_TABLE1 + " VALUES(2, 5, 7)")[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_320 $$ statement.execute("INSERT INTO " + SIMPLE_TABLE1 + " VALUES(2, 5, 7)")[ FD ]
Line_0 $$ Entry-->Line_324 $$ //37
public class func [ CD ]
Line_324 $$ //37
public class func -->Line_325 $$ public void doInConnection(java.sql.Connection connection) [ CD ]
Line_325 $$ public void doInConnection(java.sql.Connection connection) -->Line_326 $$ Statement statement = connection.createStatement()[ CD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_326 $$ connection.createStatement()[ CD ]
Line_226 $$ Connection connection = createConnection()-->Line_326 $$ connection.createStatement()[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_326 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_326 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_326 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_326 $$ connection.createStatement()[ FD ]
Line_325 $$ public void doInConnection(java.sql.Connection connection) -->Line_327 $$ statement.execute("set constraints all deferred;")[ CD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_327 $$ statement.execute("set constraints all deferred;")[ FD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_327 $$ statement.execute("set constraints all deferred;")[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_327 $$ statement.execute("set constraints all deferred;")[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_327 $$ statement.execute("set constraints all deferred;")[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_327 $$ statement.execute("set constraints all deferred;")[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_327 $$ statement.execute("set constraints all deferred;")[ FD ]
Line_0 $$ Entry-->Line_331 $$ //38
public class func [ CD ]
Line_331 $$ //38
public class func -->Line_332 $$ public void createTable() [ CD ]
Line_332 $$ public void createTable() -->Line_333 $$ Connection connection = createConnection()[ CD ]
Line_333 $$ Connection connection = createConnection()-->Line_333 $$ createConnection()[ CD ]
Line_332 $$ public void createTable() -->Line_334 $$ Statement statement = connection.createStatement()[ CD ]
Line_334 $$ Statement statement = connection.createStatement()-->Line_334 $$ connection.createStatement()[ CD ]
Line_333 $$ Connection connection = createConnection()-->Line_334 $$ connection.createStatement()[ FD ]
Line_226 $$ Connection connection = createConnection()-->Line_334 $$ connection.createStatement()[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_334 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_334 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_334 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_334 $$ connection.createStatement()[ FD ]
Line_332 $$ public void createTable() -->Line_335 $$ statement.execute("create table ACCOUNT ( ACC_ID INTEGER , ACC_FIRST_NAME VARCHAR(255), ACC_LAST_NAME VARCHAR(255), ACC_EMAIL VARCHAR(255)  )")[ CD ]
Line_334 $$ Statement statement = connection.createStatement()-->Line_335 $$ statement.execute("create table ACCOUNT ( ACC_ID INTEGER , ACC_FIRST_NAME VARCHAR(255), ACC_LAST_NAME VARCHAR(255), ACC_EMAIL VARCHAR(255)  )")[ FD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_335 $$ statement.execute("create table ACCOUNT ( ACC_ID INTEGER , ACC_FIRST_NAME VARCHAR(255), ACC_LAST_NAME VARCHAR(255), ACC_EMAIL VARCHAR(255)  )")[ FD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_335 $$ statement.execute("create table ACCOUNT ( ACC_ID INTEGER , ACC_FIRST_NAME VARCHAR(255), ACC_LAST_NAME VARCHAR(255), ACC_EMAIL VARCHAR(255)  )")[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_335 $$ statement.execute("create table ACCOUNT ( ACC_ID INTEGER , ACC_FIRST_NAME VARCHAR(255), ACC_LAST_NAME VARCHAR(255), ACC_EMAIL VARCHAR(255)  )")[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_335 $$ statement.execute("create table ACCOUNT ( ACC_ID INTEGER , ACC_FIRST_NAME VARCHAR(255), ACC_LAST_NAME VARCHAR(255), ACC_EMAIL VARCHAR(255)  )")[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_335 $$ statement.execute("create table ACCOUNT ( ACC_ID INTEGER , ACC_FIRST_NAME VARCHAR(255), ACC_LAST_NAME VARCHAR(255), ACC_EMAIL VARCHAR(255)  )")[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_335 $$ statement.execute("create table ACCOUNT ( ACC_ID INTEGER , ACC_FIRST_NAME VARCHAR(255), ACC_LAST_NAME VARCHAR(255), ACC_EMAIL VARCHAR(255)  )")[ FD ]
Line_0 $$ Entry-->Line_339 $$ //39
public class func [ CD ]
Line_339 $$ //39
public class func -->Line_340 $$ public void runSql(ConnectionProvider provider, String sql) [ CD ]
Line_340 $$ public void runSql(ConnectionProvider provider, String sql) -->Line_341 $$ Connection connection = provider.getConnection()[ CD ]
Line_341 $$ Connection connection = provider.getConnection()-->Line_341 $$ provider.getConnection()[ CD ]
Line_340 $$ public void runSql(ConnectionProvider provider, String sql) -->Line_342 $$ Statement statement = connection.createStatement()[ CD ]
Line_342 $$ Statement statement = connection.createStatement()-->Line_342 $$ connection.createStatement()[ CD ]
Line_341 $$ Connection connection = provider.getConnection()-->Line_342 $$ connection.createStatement()[ FD ]
Line_333 $$ Connection connection = createConnection()-->Line_342 $$ connection.createStatement()[ FD ]
Line_226 $$ Connection connection = createConnection()-->Line_342 $$ connection.createStatement()[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_342 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_342 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_342 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_342 $$ connection.createStatement()[ FD ]
Line_340 $$ public void runSql(ConnectionProvider provider, String sql) -->Line_343 $$ statement.execute(sql)[ CD ]
Line_342 $$ Statement statement = connection.createStatement()-->Line_343 $$ statement.execute(sql)[ FD ]
Line_334 $$ Statement statement = connection.createStatement()-->Line_343 $$ statement.execute(sql)[ FD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_343 $$ statement.execute(sql)[ FD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_343 $$ statement.execute(sql)[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_343 $$ statement.execute(sql)[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_343 $$ statement.execute(sql)[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_343 $$ statement.execute(sql)[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_343 $$ statement.execute(sql)[ FD ]
Line_0 $$ Entry-->Line_347 $$ //40
public class func [ CD ]
Line_347 $$ //40
public class func -->Line_348 $$ public void testLobServerMemory() [ CD ]
Line_348 $$ public void testLobServerMemory() -->Line_349 $$ deleteDb("lob")[ CD ]
Line_348 $$ public void testLobServerMemory() -->Line_350 $$ Connection conn = getConnection("lob")[ CD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_350 $$ getConnection("lob")[ CD ]
Line_348 $$ public void testLobServerMemory() -->Line_351 $$ Statement stat = conn.createStatement()[ CD ]
Line_351 $$ Statement stat = conn.createStatement()-->Line_351 $$ conn.createStatement()[ CD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_351 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_351 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_351 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_351 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_351 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_351 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_351 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_351 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_351 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_351 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_351 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_351 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_351 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_351 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_351 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_351 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_351 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_351 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_351 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_351 $$ conn.createStatement()[ FD ]
Line_348 $$ public void testLobServerMemory() -->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ CD ]
Line_351 $$ Statement stat = conn.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_288 $$ Statement stat = conn.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_352 $$ stat.execute("CREATE TABLE TEST(ID INT, DATA CLOB)")[ FD ]
Line_0 $$ Entry-->Line_356 $$ //41
public class func [ CD ]
Line_356 $$ //41
public class func -->Line_357 $$ public void fillCustomersTable(Connection conn) [ CD ]
Line_357 $$ public void fillCustomersTable(Connection conn) -->Line_358 $$ Statement statement = conn.createStatement()[ CD ]
Line_358 $$ Statement statement = conn.createStatement()-->Line_358 $$ conn.createStatement()[ CD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_358 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_358 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_358 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_358 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_358 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_358 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_358 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_358 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_358 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_358 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_358 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_358 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_358 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_358 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_358 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_358 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_358 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_358 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_358 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_358 $$ conn.createStatement()[ FD ]
Line_357 $$ public void fillCustomersTable(Connection conn) -->Line_359 $$ statement.execute(DatabaseCreator.INSERT_CUSTOMERS7)[ CD ]
Line_358 $$ Statement statement = conn.createStatement()-->Line_359 $$ statement.execute(DatabaseCreator.INSERT_CUSTOMERS7)[ FD ]
Line_342 $$ Statement statement = connection.createStatement()-->Line_359 $$ statement.execute(DatabaseCreator.INSERT_CUSTOMERS7)[ FD ]
Line_334 $$ Statement statement = connection.createStatement()-->Line_359 $$ statement.execute(DatabaseCreator.INSERT_CUSTOMERS7)[ FD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_359 $$ statement.execute(DatabaseCreator.INSERT_CUSTOMERS7)[ FD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_359 $$ statement.execute(DatabaseCreator.INSERT_CUSTOMERS7)[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_359 $$ statement.execute(DatabaseCreator.INSERT_CUSTOMERS7)[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_359 $$ statement.execute(DatabaseCreator.INSERT_CUSTOMERS7)[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_359 $$ statement.execute(DatabaseCreator.INSERT_CUSTOMERS7)[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_359 $$ statement.execute(DatabaseCreator.INSERT_CUSTOMERS7)[ FD ]
Line_0 $$ Entry-->Line_363 $$ //42
public class func [ CD ]
Line_363 $$ //42
public class func -->Line_364 $$ public void execute(String sql) [ CD ]
Line_364 $$ public void execute(String sql) -->Line_365 $$ MyBatisComponent component = camelContext.getComponent("mybatis", MyBatisComponent.class)[ CD ]
Line_365 $$ MyBatisComponent component = camelContext.getComponent("mybatis", MyBatisComponent.class)-->Line_365 $$ camelContext.getComponent("mybatis", MyBatisComponent.class)[ CD ]
Line_364 $$ public void execute(String sql) -->Line_366 $$ Connection con = component.getSqlSessionFactory().getConfiguration().getEnvironment().getDataSource().getConnection()[ CD ]
Line_366 $$ Connection con = component.getSqlSessionFactory().getConfiguration().getEnvironment().getDataSource().getConnection()-->Line_366 $$ component.getSqlSessionFactory().getConfiguration().getEnvironment().getDataSource().getConnection()[ CD ]
Line_365 $$ MyBatisComponent component = camelContext.getComponent("mybatis", MyBatisComponent.class)-->Line_366 $$ component.getSqlSessionFactory()[ FD ]
Line_364 $$ public void execute(String sql) -->Line_367 $$ Statement stm = con.createStatement()[ CD ]
Line_367 $$ Statement stm = con.createStatement()-->Line_367 $$ con.createStatement()[ CD ]
Line_366 $$ Connection con = component.getSqlSessionFactory().getConfiguration().getEnvironment().getDataSource().getConnection()-->Line_367 $$ con.createStatement()[ FD ]
Line_364 $$ public void execute(String sql) -->Line_368 $$ stm.execute(sql)[ CD ]
Line_367 $$ Statement stm = con.createStatement()-->Line_368 $$ stm.execute(sql)[ FD ]
Line_0 $$ Entry-->Line_372 $$ //43
public class func [ CD ]
Line_372 $$ //43
public class func -->Line_373 $$ public void setupDatabase() [ CD ]
Line_373 $$ public void setupDatabase() -->Line_374 $$ basicDataSource.setDriverClassName(jdbcDriver.class.getName())[ CD ]
Line_373 $$ public void setupDatabase() -->Line_375 $$ basicDataSource.setUrl("jdbc:hsqldb:mem:db")[ CD ]
Line_373 $$ public void setupDatabase() -->Line_376 $$ basicDataSource.setUsername("sa")[ CD ]
Line_373 $$ public void setupDatabase() -->Line_377 $$ basicDataSource.setPassword("")[ CD ]
Line_373 $$ public void setupDatabase() -->Line_378 $$ Connection connection = basicDataSource.getConnection()[ CD ]
Line_378 $$ Connection connection = basicDataSource.getConnection()-->Line_378 $$ basicDataSource.getConnection()[ CD ]
Line_373 $$ public void setupDatabase() -->Line_379 $$ Statement statement = connection.createStatement()[ CD ]
Line_379 $$ Statement statement = connection.createStatement()-->Line_379 $$ connection.createStatement()[ CD ]
Line_378 $$ Connection connection = basicDataSource.getConnection()-->Line_379 $$ connection.createStatement()[ FD ]
Line_341 $$ Connection connection = provider.getConnection()-->Line_379 $$ connection.createStatement()[ FD ]
Line_333 $$ Connection connection = createConnection()-->Line_379 $$ connection.createStatement()[ FD ]
Line_226 $$ Connection connection = createConnection()-->Line_379 $$ connection.createStatement()[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_379 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_379 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_379 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_379 $$ connection.createStatement()[ FD ]
Line_373 $$ public void setupDatabase() -->Line_380 $$ statement.execute("create table licenses (license varchar(512))")[ CD ]
Line_379 $$ Statement statement = connection.createStatement()-->Line_380 $$ statement.execute("create table licenses (license varchar(512))")[ FD ]
Line_358 $$ Statement statement = conn.createStatement()-->Line_380 $$ statement.execute("create table licenses (license varchar(512))")[ FD ]
Line_342 $$ Statement statement = connection.createStatement()-->Line_380 $$ statement.execute("create table licenses (license varchar(512))")[ FD ]
Line_334 $$ Statement statement = connection.createStatement()-->Line_380 $$ statement.execute("create table licenses (license varchar(512))")[ FD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_380 $$ statement.execute("create table licenses (license varchar(512))")[ FD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_380 $$ statement.execute("create table licenses (license varchar(512))")[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_380 $$ statement.execute("create table licenses (license varchar(512))")[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_380 $$ statement.execute("create table licenses (license varchar(512))")[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_380 $$ statement.execute("create table licenses (license varchar(512))")[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_380 $$ statement.execute("create table licenses (license varchar(512))")[ FD ]
Line_0 $$ Entry-->Line_384 $$ //44
public class func [ CD ]
Line_384 $$ //44
public class func -->Line_385 $$ public void fillTestTable5(Connection conn) [ CD ]
Line_385 $$ public void fillTestTable5(Connection conn) -->Line_386 $$ Statement statement = conn.createStatement()[ CD ]
Line_386 $$ Statement statement = conn.createStatement()-->Line_386 $$ conn.createStatement()[ CD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_386 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_386 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_386 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_386 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_386 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_386 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_386 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_386 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_386 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_386 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_386 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_386 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_386 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_386 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_386 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_386 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_386 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_386 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_386 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_386 $$ conn.createStatement()[ FD ]
Line_385 $$ public void fillTestTable5(Connection conn) -->Line_387 $$ statement.execute("INSERT INTO " + TEST_TABLE5 + " VALUES(3, '4')")[ CD ]
Line_386 $$ Statement statement = conn.createStatement()-->Line_387 $$ statement.execute("INSERT INTO " + TEST_TABLE5 + " VALUES(3, '4')")[ FD ]
Line_379 $$ Statement statement = connection.createStatement()-->Line_387 $$ statement.execute("INSERT INTO " + TEST_TABLE5 + " VALUES(3, '4')")[ FD ]
Line_358 $$ Statement statement = conn.createStatement()-->Line_387 $$ statement.execute("INSERT INTO " + TEST_TABLE5 + " VALUES(3, '4')")[ FD ]
Line_342 $$ Statement statement = connection.createStatement()-->Line_387 $$ statement.execute("INSERT INTO " + TEST_TABLE5 + " VALUES(3, '4')")[ FD ]
Line_334 $$ Statement statement = connection.createStatement()-->Line_387 $$ statement.execute("INSERT INTO " + TEST_TABLE5 + " VALUES(3, '4')")[ FD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_387 $$ statement.execute("INSERT INTO " + TEST_TABLE5 + " VALUES(3, '4')")[ FD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_387 $$ statement.execute("INSERT INTO " + TEST_TABLE5 + " VALUES(3, '4')")[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_387 $$ statement.execute("INSERT INTO " + TEST_TABLE5 + " VALUES(3, '4')")[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_387 $$ statement.execute("INSERT INTO " + TEST_TABLE5 + " VALUES(3, '4')")[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_387 $$ statement.execute("INSERT INTO " + TEST_TABLE5 + " VALUES(3, '4')")[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_387 $$ statement.execute("INSERT INTO " + TEST_TABLE5 + " VALUES(3, '4')")[ FD ]
Line_0 $$ Entry-->Line_391 $$ //45
public class func [ CD ]
Line_391 $$ //45
public class func -->Line_392 $$ public void fillOrdersTable(Connection conn) [ CD ]
Line_392 $$ public void fillOrdersTable(Connection conn) -->Line_393 $$ Statement statement = conn.createStatement()[ CD ]
Line_393 $$ Statement statement = conn.createStatement()-->Line_393 $$ conn.createStatement()[ CD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_393 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_393 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_393 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_393 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_393 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_393 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_393 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_393 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_393 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_393 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_393 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_393 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_393 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_393 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_393 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_393 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_393 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_393 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_393 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_393 $$ conn.createStatement()[ FD ]
Line_392 $$ public void fillOrdersTable(Connection conn) -->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ CD ]
Line_393 $$ Statement statement = conn.createStatement()-->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ FD ]
Line_386 $$ Statement statement = conn.createStatement()-->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ FD ]
Line_379 $$ Statement statement = connection.createStatement()-->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ FD ]
Line_358 $$ Statement statement = conn.createStatement()-->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ FD ]
Line_342 $$ Statement statement = connection.createStatement()-->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ FD ]
Line_334 $$ Statement statement = connection.createStatement()-->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ FD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ FD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_394 $$ statement.execute(DatabaseCreator.INSERT_ORDERS10)[ FD ]
Line_0 $$ Entry-->Line_398 $$ //46
public class func [ CD ]
Line_398 $$ //46
public class func -->Line_399 $$ public void dropTable(Connection con, String table) [ CD ]
Line_399 $$ public void dropTable(Connection con, String table) -->Line_400 $$ Statement stmt = con.createStatement()[ CD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_400 $$ con.createStatement()[ CD ]
Line_366 $$ Connection con = component.getSqlSessionFactory().getConfiguration().getEnvironment().getDataSource().getConnection()-->Line_400 $$ con.createStatement()[ FD ]
Line_399 $$ public void dropTable(Connection con, String table) -->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ CD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_401 $$ stmt.execute("DROP TABLE " + table + " IF EXISTS;")[ FD ]
Line_0 $$ Entry-->Line_405 $$ //47
public class func [ CD ]
Line_405 $$ //47
public class func -->Line_406 $$ public void initializeConnection(Connection connection) [ CD ]
Line_406 $$ public void initializeConnection(Connection connection) -->Line_407 $$ Statement stmt = connection.createStatement()[ CD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_407 $$ connection.createStatement()[ CD ]
Line_378 $$ Connection connection = basicDataSource.getConnection()-->Line_407 $$ connection.createStatement()[ FD ]
Line_341 $$ Connection connection = provider.getConnection()-->Line_407 $$ connection.createStatement()[ FD ]
Line_333 $$ Connection connection = createConnection()-->Line_407 $$ connection.createStatement()[ FD ]
Line_226 $$ Connection connection = createConnection()-->Line_407 $$ connection.createStatement()[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_407 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_407 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_407 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_407 $$ connection.createStatement()[ FD ]
Line_406 $$ public void initializeConnection(Connection connection) -->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ CD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_408 $$ stmt.execute("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'SYYYY-MM-DD HH24:MI:SS'")[ FD ]
Line_0 $$ Entry-->Line_412 $$ //48
public class func [ CD ]
Line_412 $$ //48
public class func -->Line_413 $$ public void fillFKStrictTable(Connection conn) [ CD ]
Line_413 $$ public void fillFKStrictTable(Connection conn) -->Line_414 $$ Statement statement = conn.createStatement()[ CD ]
Line_414 $$ Statement statement = conn.createStatement()-->Line_414 $$ conn.createStatement()[ CD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_414 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_414 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_414 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_414 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_414 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_414 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_414 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_414 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_414 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_414 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_414 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_414 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_414 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_414 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_414 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_414 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_414 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_414 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_414 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_414 $$ conn.createStatement()[ FD ]
Line_413 $$ public void fillFKStrictTable(Connection conn) -->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ CD ]
Line_414 $$ Statement statement = conn.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_393 $$ Statement statement = conn.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_386 $$ Statement statement = conn.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_379 $$ Statement statement = connection.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_358 $$ Statement statement = conn.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_342 $$ Statement statement = connection.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_334 $$ Statement statement = connection.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_415 $$ statement.execute("INSERT INTO " + FKSTRICT_TABLE + " VALUES(3, 1, '3')")[ FD ]
Line_0 $$ Entry-->Line_420 $$ //49
public class func [ CD ]
Line_420 $$ //49
public class func -->Line_421 $$ public void removeTable(Connection conn, String name) [ CD ]
Line_421 $$ public void removeTable(Connection conn, String name) -->Line_422 $$ Statement stat = conn.createStatement()[ CD ]
Line_422 $$ Statement stat = conn.createStatement()-->Line_422 $$ conn.createStatement()[ CD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_422 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_422 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_422 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_422 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_422 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_422 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_422 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_422 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_422 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_422 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_422 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_422 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_422 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_422 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_422 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_422 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_422 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_422 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_422 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_422 $$ conn.createStatement()[ FD ]
Line_421 $$ public void removeTable(Connection conn, String name) -->Line_423 $$ stat.execute("DROP TABLE " + name)[ CD ]
Line_422 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_351 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_288 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_423 $$ stat.execute("DROP TABLE " + name)[ FD ]
Line_0 $$ Entry-->Line_427 $$ //50
public class func [ CD ]
Line_427 $$ //50
public class func -->Line_428 $$ public void testReadOnlyConnect() [ CD ]
Line_428 $$ public void testReadOnlyConnect() -->Line_429 $$ deleteDb("readonlyConnect")[ CD ]
Line_428 $$ public void testReadOnlyConnect() -->Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")[ CD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_430 $$ getConnection("readonlyConnect;OPEN_NEW=TRUE")[ CD ]
Line_428 $$ public void testReadOnlyConnect() -->Line_431 $$ Statement stat = conn.createStatement()[ CD ]
Line_431 $$ Statement stat = conn.createStatement()-->Line_431 $$ conn.createStatement()[ CD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_431 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_431 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_431 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_431 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_431 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_431 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_431 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_431 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_431 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_431 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_431 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_431 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_431 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_431 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_431 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_431 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_431 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_431 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_431 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_431 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_431 $$ conn.createStatement()[ FD ]
Line_428 $$ public void testReadOnlyConnect() -->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ CD ]
Line_431 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_422 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_351 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_288 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_432 $$ stat.execute("insert into test select x from system_range(1, 11)")[ FD ]
Line_0 $$ Entry-->Line_436 $$ //51
public class func [ CD ]
Line_436 $$ //51
public class func -->Line_437 $$ public void runStatement(VersionedPostgisDataStore dataStore, String sqlStatement) [ CD ]
Line_437 $$ public void runStatement(VersionedPostgisDataStore dataStore, String sqlStatement) -->Line_438 $$ dataStore.getConnection(Transaction.AUTO_COMMIT)[ CD ]
Line_437 $$ public void runStatement(VersionedPostgisDataStore dataStore, String sqlStatement) -->Line_439 $$ conn.createStatement()[ CD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_439 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_439 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_439 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_439 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_439 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_439 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_439 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_439 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_439 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_439 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_439 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_439 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_439 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_439 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_439 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_439 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_439 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_439 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_439 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_439 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_439 $$ conn.createStatement()[ FD ]
Line_437 $$ public void runStatement(VersionedPostgisDataStore dataStore, String sqlStatement) -->Line_440 $$ st.execute(sqlStatement)[ CD ]
Line_270 $$ Statement st = conn.createStatement()-->Line_440 $$ st.execute(sqlStatement)[ FD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_440 $$ st.execute(sqlStatement)[ FD ]
Line_437 $$ public void runStatement(VersionedPostgisDataStore dataStore, String sqlStatement) -->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ CD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_441 $$ JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null)[ FD ]
Line_0 $$ Entry-->Line_445 $$ //52
public class func [ CD ]
Line_445 $$ //52
public class func -->Line_446 $$ public void forceQuery(Connection c, String query) [ CD ]
Line_446 $$ public void forceQuery(Connection c, String query) -->Line_447 $$ Statement stmt = c.createStatement()[ CD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_447 $$ c.createStatement()[ CD ]
Line_251 $$ Connection c = getConnection("compatibility;MODE=MYSQL")-->Line_447 $$ c.createStatement()[ FD ]
Line_446 $$ public void forceQuery(Connection c, String query) -->Line_448 $$ stmt.execute(query)[ CD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_448 $$ stmt.execute(query)[ FD ]
Line_0 $$ Entry-->Line_452 $$ //53
public class func [ CD ]
Line_452 $$ //53
public class func -->Line_453 $$ public void fillSalesPeopleTable(Connection conn) [ CD ]
Line_453 $$ public void fillSalesPeopleTable(Connection conn) -->Line_454 $$ Statement statement = conn.createStatement()[ CD ]
Line_454 $$ Statement statement = conn.createStatement()-->Line_454 $$ conn.createStatement()[ CD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_454 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_454 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_454 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_454 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_454 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_454 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_454 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_454 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_454 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_454 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_454 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_454 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_454 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_454 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_454 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_454 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_454 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_454 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_454 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_454 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_454 $$ conn.createStatement()[ FD ]
Line_453 $$ public void fillSalesPeopleTable(Connection conn) -->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ CD ]
Line_454 $$ Statement statement = conn.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_414 $$ Statement statement = conn.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_393 $$ Statement statement = conn.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_386 $$ Statement statement = conn.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_379 $$ Statement statement = connection.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_358 $$ Statement statement = conn.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_342 $$ Statement statement = connection.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_334 $$ Statement statement = connection.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_455 $$ statement.execute(DatabaseCreator.INSERT_SALESPEOPLE6)[ FD ]
Line_0 $$ Entry-->Line_459 $$ //54
public class func [ CD ]
Line_459 $$ //54
public class func -->Line_460 $$ public void testSortedSelect() [ CD ]
Line_460 $$ public void testSortedSelect() -->Line_461 $$ deleteDb("cases")[ CD ]
Line_460 $$ public void testSortedSelect() -->Line_462 $$ Connection conn = getConnection("cases")[ CD ]
Line_462 $$ Connection conn = getConnection("cases")-->Line_462 $$ getConnection("cases")[ CD ]
Line_460 $$ public void testSortedSelect() -->Line_463 $$ Statement stat = conn.createStatement()[ CD ]
Line_463 $$ Statement stat = conn.createStatement()-->Line_463 $$ conn.createStatement()[ CD ]
Line_462 $$ Connection conn = getConnection("cases")-->Line_463 $$ conn.createStatement()[ FD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_463 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_463 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_463 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_463 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_463 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_463 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_463 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_463 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_463 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_463 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_463 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_463 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_463 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_463 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_463 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_463 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_463 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_463 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_463 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_463 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_463 $$ conn.createStatement()[ FD ]
Line_460 $$ public void testSortedSelect() -->Line_464 $$ stat.execute("drop table test")[ CD ]
Line_463 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_431 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_422 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_351 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_288 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_464 $$ stat.execute("drop table test")[ FD ]
Line_0 $$ Entry-->Line_468 $$ //55
public class func [ CD ]
Line_468 $$ //55
public class func -->Line_469 $$ public void setupDatabase(Connection con) [ CD ]
Line_469 $$ public void setupDatabase(Connection con) -->Line_470 $$ Statement stmt = con.createStatement()[ CD ]
Line_470 $$ Statement stmt = con.createStatement()-->Line_470 $$ con.createStatement()[ CD ]
Line_366 $$ Connection con = component.getSqlSessionFactory().getConfiguration().getEnvironment().getDataSource().getConnection()-->Line_470 $$ con.createStatement()[ FD ]
Line_469 $$ public void setupDatabase(Connection con) -->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ CD ]
Line_470 $$ Statement stmt = con.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_471 $$ stmt.execute("CREATE TABLE " + TABLE_INDEX + "(name text, statement text, category text)")[ FD ]
Line_0 $$ Entry-->Line_476 $$ //56
public class func [ CD ]
Line_476 $$ //56
public class func -->Line_477 $$ public void testClearSyntaxException() [ CD ]
Line_477 $$ public void testClearSyntaxException() -->Line_478 $$ Connection conn = getConnection("cases")[ CD ]
Line_478 $$ Connection conn = getConnection("cases")-->Line_478 $$ getConnection("cases")[ CD ]
Line_477 $$ public void testClearSyntaxException() -->Line_479 $$ Statement stat = conn.createStatement()[ CD ]
Line_479 $$ Statement stat = conn.createStatement()-->Line_479 $$ conn.createStatement()[ CD ]
Line_478 $$ Connection conn = getConnection("cases")-->Line_479 $$ conn.createStatement()[ FD ]
Line_462 $$ Connection conn = getConnection("cases")-->Line_479 $$ conn.createStatement()[ FD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_479 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_479 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_479 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_479 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_479 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_479 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_479 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_479 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_479 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_479 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_479 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_479 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_479 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_479 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_479 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_479 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_479 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_479 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_479 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_479 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_479 $$ conn.createStatement()[ FD ]
Line_477 $$ public void testClearSyntaxException() -->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ CD ]
Line_479 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_463 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_431 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_422 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_351 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_288 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_480 $$ stat.execute("select t.x, t.x t.y from dual t")[ FD ]
Line_0 $$ Entry-->Line_484 $$ //57
public class func [ CD ]
Line_484 $$ //57
public class func -->Line_485 $$ public void runConsistencyChecker(Connection con, String tableName) [ CD ]
Line_485 $$ public void runConsistencyChecker(Connection con, String tableName) -->Line_486 $$ Statement stmt = con.createStatement()[ CD ]
Line_486 $$ Statement stmt = con.createStatement()-->Line_486 $$ con.createStatement()[ CD ]
Line_366 $$ Connection con = component.getSqlSessionFactory().getConfiguration().getEnvironment().getDataSource().getConnection()-->Line_486 $$ con.createStatement()[ FD ]
Line_485 $$ public void runConsistencyChecker(Connection con, String tableName) -->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ CD ]
Line_486 $$ Statement stmt = con.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_470 $$ Statement stmt = con.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_487 $$ stmt.execute("values SYSCS_UTIL.SYSCS_CHECK_TABLE('APP',  'EMP')")[ FD ]
Line_0 $$ Entry-->Line_491 $$ //58
public class func [ CD ]
Line_491 $$ //58
public class func -->Line_492 $$ public void truncate() [ CD ]
Line_492 $$ public void truncate() -->Line_493 $$ SymfonyDbFactory.getInstance().createConnection()[ CD ]
Line_492 $$ public void truncate() -->Line_494 $$ Statement statement = connection.createStatement()[ CD ]
Line_494 $$ Statement statement = connection.createStatement()-->Line_494 $$ connection.createStatement()[ CD ]
Line_378 $$ Connection connection = basicDataSource.getConnection()-->Line_494 $$ connection.createStatement()[ FD ]
Line_341 $$ Connection connection = provider.getConnection()-->Line_494 $$ connection.createStatement()[ FD ]
Line_333 $$ Connection connection = createConnection()-->Line_494 $$ connection.createStatement()[ FD ]
Line_226 $$ Connection connection = createConnection()-->Line_494 $$ connection.createStatement()[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_494 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_494 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_494 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_494 $$ connection.createStatement()[ FD ]
Line_492 $$ public void truncate() -->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ CD ]
Line_494 $$ Statement statement = connection.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_454 $$ Statement statement = conn.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_414 $$ Statement statement = conn.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_393 $$ Statement statement = conn.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_386 $$ Statement statement = conn.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_379 $$ Statement statement = connection.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_358 $$ Statement statement = conn.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_342 $$ Statement statement = connection.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_334 $$ Statement statement = connection.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_495 $$ statement.execute(QUERY_TRUNCATE)[ FD ]
Line_0 $$ Entry-->Line_499 $$ //59
public class func [ CD ]
Line_499 $$ //59
public class func -->Line_500 $$ public void setup(Connection conn) [ CD ]
Line_500 $$ public void setup(Connection conn) -->Line_501 $$ Statement stmt = conn.createStatement()[ CD ]
Line_501 $$ Statement stmt = conn.createStatement()-->Line_501 $$ conn.createStatement()[ CD ]
Line_478 $$ Connection conn = getConnection("cases")-->Line_501 $$ conn.createStatement()[ FD ]
Line_462 $$ Connection conn = getConnection("cases")-->Line_501 $$ conn.createStatement()[ FD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_501 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_501 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_501 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_501 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_501 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_501 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_501 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_501 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_501 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_501 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_501 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_501 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_501 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_501 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_501 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_501 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_501 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_501 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_501 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_501 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_501 $$ conn.createStatement()[ FD ]
Line_500 $$ public void setup(Connection conn) -->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ CD ]
Line_501 $$ Statement stmt = conn.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_486 $$ Statement stmt = con.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_470 $$ Statement stmt = con.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_502 $$ stmt.execute("delete from departments where department_id >= 300")[ FD ]
Line_0 $$ Entry-->Line_506 $$ //60
public class func [ CD ]
Line_506 $$ //60
public class func -->Line_507 $$ public void tablesExist(Connection c) [ CD ]
Line_507 $$ public void tablesExist(Connection c) -->Line_508 $$ final Statement stmt = c.createStatement()[ CD ]
Line_508 $$ final Statement stmt = c.createStatement()-->Line_508 $$ c.createStatement()[ CD ]
Line_251 $$ Connection c = getConnection("compatibility;MODE=MYSQL")-->Line_508 $$ c.createStatement()[ FD ]
Line_507 $$ public void tablesExist(Connection c) -->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ CD ]
Line_508 $$ final Statement stmt = c.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_501 $$ Statement stmt = conn.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_486 $$ Statement stmt = con.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_470 $$ Statement stmt = con.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_509 $$ stmt.execute("SELECT count(*) FROM COP_WORKFLOW_INSTANCE")[ FD ]
Line_0 $$ Entry-->Line_513 $$ //61
public class func [ CD ]
Line_513 $$ //61
public class func -->Line_514 $$ public void initializeConnection(Connection cx) [ CD ]
Line_514 $$ public void initializeConnection(Connection cx) -->Line_515 $$ Statement st = cx.createStatement()[ CD ]
Line_515 $$ Statement st = cx.createStatement()-->Line_515 $$ cx.createStatement()[ CD ]
Line_514 $$ public void initializeConnection(Connection cx) -->Line_516 $$ st.execute("set lockmode session where level=mvcc")[ CD ]
Line_515 $$ Statement st = cx.createStatement()-->Line_516 $$ st.execute("set lockmode session where level=mvcc")[ FD ]
Line_270 $$ Statement st = conn.createStatement()-->Line_516 $$ st.execute("set lockmode session where level=mvcc")[ FD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_516 $$ st.execute("set lockmode session where level=mvcc")[ FD ]
Line_0 $$ Entry-->Line_520 $$ //62
public class func [ CD ]
Line_520 $$ //62
public class func -->Line_521 $$ public void initDatabaseAccess(Connection con) [ CD ]
Line_521 $$ public void initDatabaseAccess(Connection con) -->Line_522 $$ Statement stmt = con.createStatement()[ CD ]
Line_522 $$ Statement stmt = con.createStatement()-->Line_522 $$ con.createStatement()[ CD ]
Line_366 $$ Connection con = component.getSqlSessionFactory().getConfiguration().getEnvironment().getDataSource().getConnection()-->Line_522 $$ con.createStatement()[ FD ]
Line_521 $$ public void initDatabaseAccess(Connection con) -->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ CD ]
Line_522 $$ Statement stmt = con.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_508 $$ final Statement stmt = c.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_501 $$ Statement stmt = conn.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_486 $$ Statement stmt = con.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_470 $$ Statement stmt = con.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_523 $$ stmt.execute("CREATE ALIAS IF NOT EXISTS NOW_MILLIS FOR \"java.lang.System.currentTimeMillis\";")[ FD ]
Line_0 $$ Entry-->Line_527 $$ //63
public class func [ CD ]
Line_527 $$ //63
public class func -->Line_528 $$ public void testQueryTimeout() [ CD ]
Line_528 $$ public void testQueryTimeout() -->Line_529 $$ deleteDb("cancel")[ CD ]
Line_528 $$ public void testQueryTimeout() -->Line_530 $$ Connection conn = getConnection("cancel")[ CD ]
Line_530 $$ Connection conn = getConnection("cancel")-->Line_530 $$ getConnection("cancel")[ CD ]
Line_528 $$ public void testQueryTimeout() -->Line_531 $$ Statement stat = conn.createStatement()[ CD ]
Line_531 $$ Statement stat = conn.createStatement()-->Line_531 $$ conn.createStatement()[ CD ]
Line_530 $$ Connection conn = getConnection("cancel")-->Line_531 $$ conn.createStatement()[ FD ]
Line_478 $$ Connection conn = getConnection("cases")-->Line_531 $$ conn.createStatement()[ FD ]
Line_462 $$ Connection conn = getConnection("cases")-->Line_531 $$ conn.createStatement()[ FD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_531 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_531 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_531 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_531 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_531 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_531 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_531 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_531 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_531 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_531 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_531 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_531 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_531 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_531 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_531 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_531 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_531 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_531 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_531 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_531 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_531 $$ conn.createStatement()[ FD ]
Line_528 $$ public void testQueryTimeout() -->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ CD ]
Line_531 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_479 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_463 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_431 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_422 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_351 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_288 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_532 $$ stat.execute("SET QUERY_TIMEOUT 10")[ FD ]
Line_528 $$ public void testQueryTimeout() -->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat).executeQuery("SELECT MAX(RAND()) " + "FROM SYSTEM_RANGE(1, 100000000)")[ CD ]
Line_531 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_479 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_463 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_431 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_422 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_351 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_288 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_533 $$ assertThrows(ErrorCode.STATEMENT_WAS_CANCELED, stat)[ FD ]
Line_0 $$ Entry-->Line_539 $$ //64
public class func [ CD ]
Line_539 $$ //64
public class func -->Line_540 $$ public void executeSql(String sql, Connection connection) [ CD ]
Line_540 $$ public void executeSql(String sql, Connection connection) -->Line_541 $$ Statement statement = connection.createStatement()[ CD ]
Line_541 $$ Statement statement = connection.createStatement()-->Line_541 $$ connection.createStatement()[ CD ]
Line_378 $$ Connection connection = basicDataSource.getConnection()-->Line_541 $$ connection.createStatement()[ FD ]
Line_341 $$ Connection connection = provider.getConnection()-->Line_541 $$ connection.createStatement()[ FD ]
Line_333 $$ Connection connection = createConnection()-->Line_541 $$ connection.createStatement()[ FD ]
Line_226 $$ Connection connection = createConnection()-->Line_541 $$ connection.createStatement()[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_541 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_541 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_541 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_541 $$ connection.createStatement()[ FD ]
Line_540 $$ public void executeSql(String sql, Connection connection) -->Line_542 $$ statement.execute(sql)[ CD ]
Line_541 $$ Statement statement = connection.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_494 $$ Statement statement = connection.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_454 $$ Statement statement = conn.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_414 $$ Statement statement = conn.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_393 $$ Statement statement = conn.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_386 $$ Statement statement = conn.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_379 $$ Statement statement = connection.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_358 $$ Statement statement = conn.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_342 $$ Statement statement = connection.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_334 $$ Statement statement = connection.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_542 $$ statement.execute(sql)[ FD ]
Line_0 $$ Entry-->Line_546 $$ //65
public class func [ CD ]
Line_546 $$ //65
public class func -->Line_547 $$ public void dropAll(Connection conn) [ CD ]
Line_547 $$ public void dropAll(Connection conn) -->Line_548 $$ Statement stat = conn.createStatement()[ CD ]
Line_548 $$ Statement stat = conn.createStatement()-->Line_548 $$ conn.createStatement()[ CD ]
Line_530 $$ Connection conn = getConnection("cancel")-->Line_548 $$ conn.createStatement()[ FD ]
Line_478 $$ Connection conn = getConnection("cases")-->Line_548 $$ conn.createStatement()[ FD ]
Line_462 $$ Connection conn = getConnection("cases")-->Line_548 $$ conn.createStatement()[ FD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_548 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_548 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_548 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_548 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_548 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_548 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_548 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_548 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_548 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_548 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_548 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_548 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_548 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_548 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_548 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_548 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_548 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_548 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_548 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_548 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_548 $$ conn.createStatement()[ FD ]
Line_547 $$ public void dropAll(Connection conn) -->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ CD ]
Line_548 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_531 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_479 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_463 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_431 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_422 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_351 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_288 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_549 $$ stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA)[ FD ]
Line_0 $$ Entry-->Line_553 $$ //66
public class func [ CD ]
Line_553 $$ //66
public class func -->Line_554 $$ public void fillParentTable(Connection conn) [ CD ]
Line_554 $$ public void fillParentTable(Connection conn) -->Line_555 $$ Statement statement = conn.createStatement()[ CD ]
Line_555 $$ Statement statement = conn.createStatement()-->Line_555 $$ conn.createStatement()[ CD ]
Line_530 $$ Connection conn = getConnection("cancel")-->Line_555 $$ conn.createStatement()[ FD ]
Line_478 $$ Connection conn = getConnection("cases")-->Line_555 $$ conn.createStatement()[ FD ]
Line_462 $$ Connection conn = getConnection("cases")-->Line_555 $$ conn.createStatement()[ FD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_555 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_555 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_555 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_555 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_555 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_555 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_555 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_555 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_555 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_555 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_555 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_555 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_555 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_555 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_555 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_555 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_555 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_555 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_555 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_555 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_555 $$ conn.createStatement()[ FD ]
Line_554 $$ public void fillParentTable(Connection conn) -->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ CD ]
Line_555 $$ Statement statement = conn.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_541 $$ Statement statement = connection.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_494 $$ Statement statement = connection.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_454 $$ Statement statement = conn.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_414 $$ Statement statement = conn.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_393 $$ Statement statement = conn.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_386 $$ Statement statement = conn.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_379 $$ Statement statement = connection.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_358 $$ Statement statement = conn.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_342 $$ Statement statement = connection.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_334 $$ Statement statement = connection.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_326 $$ Statement statement = connection.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_319 $$ Statement statement = conn.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_312 $$ Statement statement = conn.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_227 $$ Statement statement = connection.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_219 $$ Statement statement = connection.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_139 $$ final Statement statement = connection.createStatement()-->Line_556 $$ statement.execute("INSERT INTO " + PARENT_TABLE + " VALUES(3, 'test3')")[ FD ]
Line_0 $$ Entry-->Line_561 $$ //67
public class func [ CD ]
Line_561 $$ //67
public class func -->Line_562 $$ public void work(Connection conn) [ CD ]
Line_562 $$ public void work(Connection conn) -->Line_563 $$ Statement stat = conn.createStatement()[ CD ]
Line_563 $$ Statement stat = conn.createStatement()-->Line_563 $$ conn.createStatement()[ CD ]
Line_530 $$ Connection conn = getConnection("cancel")-->Line_563 $$ conn.createStatement()[ FD ]
Line_478 $$ Connection conn = getConnection("cases")-->Line_563 $$ conn.createStatement()[ FD ]
Line_462 $$ Connection conn = getConnection("cases")-->Line_563 $$ conn.createStatement()[ FD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_563 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_563 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_563 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_563 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_563 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_563 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_563 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_563 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_563 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_563 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_563 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_563 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_563 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_563 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_563 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_563 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_563 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_563 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_563 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_563 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_563 $$ conn.createStatement()[ FD ]
Line_562 $$ public void work(Connection conn) -->Line_564 $$ stat.execute("insert into temp values(1)")[ CD ]
Line_563 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_548 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_531 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_479 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_463 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_431 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_422 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_351 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_288 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_564 $$ stat.execute("insert into temp values(1)")[ FD ]
Line_0 $$ Entry-->Line_569 $$ //68
public class func [ CD ]
Line_569 $$ //68
public class func -->Line_570 $$ public void testEmptyColumn() [ CD ]
Line_570 $$ public void testEmptyColumn() -->Line_571 $$ deleteDb("view")[ CD ]
Line_570 $$ public void testEmptyColumn() -->Line_572 $$ Connection conn = getConnection("view")[ CD ]
Line_572 $$ Connection conn = getConnection("view")-->Line_572 $$ getConnection("view")[ CD ]
Line_570 $$ public void testEmptyColumn() -->Line_573 $$ Statement stat = conn.createStatement()[ CD ]
Line_573 $$ Statement stat = conn.createStatement()-->Line_573 $$ conn.createStatement()[ CD ]
Line_572 $$ Connection conn = getConnection("view")-->Line_573 $$ conn.createStatement()[ FD ]
Line_530 $$ Connection conn = getConnection("cancel")-->Line_573 $$ conn.createStatement()[ FD ]
Line_478 $$ Connection conn = getConnection("cases")-->Line_573 $$ conn.createStatement()[ FD ]
Line_462 $$ Connection conn = getConnection("cases")-->Line_573 $$ conn.createStatement()[ FD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_573 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_573 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_573 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_573 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_573 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_573 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_573 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_573 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_573 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_573 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_573 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_573 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_573 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_573 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_573 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_573 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_573 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_573 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_573 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_573 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_573 $$ conn.createStatement()[ FD ]
Line_570 $$ public void testEmptyColumn() -->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ CD ]
Line_573 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_563 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_548 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_531 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_479 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_463 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_431 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_422 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_351 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_288 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_279 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_261 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_252 $$ Statement stat = c.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_201 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_192 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_183 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_174 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_165 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_88 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_71 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_30 $$ Statement stat = conn.createStatement()-->Line_574 $$ stat.execute("select * from test_view where a between 1 and 2 and b = 2")[ FD ]
Line_0 $$ Entry-->Line_578 $$ //69
public class func [ CD ]
Line_578 $$ //69
public class func -->Line_579 $$ public void runSQL(String sql, Connection cx) [ CD ]
Line_579 $$ public void runSQL(String sql, Connection cx) -->Line_580 $$ Statement st = cx.createStatement()[ CD ]
Line_580 $$ Statement st = cx.createStatement()-->Line_580 $$ cx.createStatement()[ CD ]
Line_579 $$ public void runSQL(String sql, Connection cx) -->Line_581 $$ st.execute(sql)[ CD ]
Line_580 $$ Statement st = cx.createStatement()-->Line_581 $$ st.execute(sql)[ FD ]
Line_515 $$ Statement st = cx.createStatement()-->Line_581 $$ st.execute(sql)[ FD ]
Line_270 $$ Statement st = conn.createStatement()-->Line_581 $$ st.execute(sql)[ FD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_581 $$ st.execute(sql)[ FD ]
Line_579 $$ public void runSQL(String sql, Connection cx) -->Line_582 $$ close(st)[ CD ]
Line_580 $$ Statement st = cx.createStatement()-->Line_582 $$ close(st)[ FD ]
Line_515 $$ Statement st = cx.createStatement()-->Line_582 $$ close(st)[ FD ]
Line_270 $$ Statement st = conn.createStatement()-->Line_582 $$ close(st)[ FD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_582 $$ close(st)[ FD ]
Line_0 $$ Entry-->Line_586 $$ //70
public class func [ CD ]
Line_586 $$ //70
public class func -->Line_587 $$ public void dropDataIdsTempTable(Connection connection, String dataIdsTableName) [ CD ]
Line_587 $$ public void dropDataIdsTempTable(Connection connection, String dataIdsTableName) -->Line_588 $$ Statement stmt = connection.createStatement()[ CD ]
Line_588 $$ Statement stmt = connection.createStatement()-->Line_588 $$ connection.createStatement()[ CD ]
Line_378 $$ Connection connection = basicDataSource.getConnection()-->Line_588 $$ connection.createStatement()[ FD ]
Line_341 $$ Connection connection = provider.getConnection()-->Line_588 $$ connection.createStatement()[ FD ]
Line_333 $$ Connection connection = createConnection()-->Line_588 $$ connection.createStatement()[ FD ]
Line_226 $$ Connection connection = createConnection()-->Line_588 $$ connection.createStatement()[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_588 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_588 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_588 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_588 $$ connection.createStatement()[ FD ]
Line_587 $$ public void dropDataIdsTempTable(Connection connection, String dataIdsTableName) -->Line_589 $$ stmt.execute(query)[ CD ]
Line_588 $$ Statement stmt = connection.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_522 $$ Statement stmt = con.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_508 $$ final Statement stmt = c.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_501 $$ Statement stmt = conn.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_486 $$ Statement stmt = con.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_470 $$ Statement stmt = con.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_589 $$ stmt.execute(query)[ FD ]
Line_0 $$ Entry-->Line_593 $$ //71
public class func [ CD ]
Line_593 $$ //71
public class func -->Line_594 $$ public void truncate(Connection con) [ CD ]
Line_594 $$ public void truncate(Connection con) -->Line_595 $$ con.createStatement()[ CD ]
Line_366 $$ Connection con = component.getSqlSessionFactory().getConfiguration().getEnvironment().getDataSource().getConnection()-->Line_595 $$ con.createStatement()[ FD ]
Line_594 $$ public void truncate(Connection con) -->Line_596 $$ st.execute(sql)[ CD ]
Line_580 $$ Statement st = cx.createStatement()-->Line_596 $$ st.execute(sql)[ FD ]
Line_515 $$ Statement st = cx.createStatement()-->Line_596 $$ st.execute(sql)[ FD ]
Line_270 $$ Statement st = conn.createStatement()-->Line_596 $$ st.execute(sql)[ FD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_596 $$ st.execute(sql)[ FD ]
Line_594 $$ public void truncate(Connection con) -->Line_597 $$ close(st)[ CD ]
Line_580 $$ Statement st = cx.createStatement()-->Line_597 $$ close(st)[ FD ]
Line_515 $$ Statement st = cx.createStatement()-->Line_597 $$ close(st)[ FD ]
Line_270 $$ Statement st = conn.createStatement()-->Line_597 $$ close(st)[ FD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_597 $$ close(st)[ FD ]
Line_0 $$ Entry-->Line_601 $$ //72
public class func [ CD ]
Line_601 $$ //72
public class func -->Line_602 $$ public void setupTestTableWithData(String tableName, Path dataFilePath, Connection hs2Conn) [ CD ]
Line_602 $$ public void setupTestTableWithData(String tableName, Path dataFilePath, Connection hs2Conn) -->Line_603 $$ Statement stmt = hs2Conn.createStatement()[ CD ]
Line_603 $$ Statement stmt = hs2Conn.createStatement()-->Line_603 $$ hs2Conn.createStatement()[ CD ]
Line_602 $$ public void setupTestTableWithData(String tableName, Path dataFilePath, Connection hs2Conn) -->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ CD ]
Line_603 $$ Statement stmt = hs2Conn.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_588 $$ Statement stmt = connection.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_522 $$ Statement stmt = con.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_508 $$ final Statement stmt = c.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_501 $$ Statement stmt = conn.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_486 $$ Statement stmt = con.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_470 $$ Statement stmt = con.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_604 $$ stmt.execute("create table " + tableName + " (under_col int comment 'the under column', value string)")[ FD ]
Line_0 $$ Entry-->Line_609 $$ //73
public class func [ CD ]
Line_609 $$ //73
public class func -->Line_610 $$ public void dropTab1(final Connection c) [ CD ]
Line_610 $$ public void dropTab1(final Connection c) -->Line_611 $$ final Statement stmt = c.createStatement()[ CD ]
Line_611 $$ final Statement stmt = c.createStatement()-->Line_611 $$ c.createStatement()[ CD ]
Line_251 $$ Connection c = getConnection("compatibility;MODE=MYSQL")-->Line_611 $$ c.createStatement()[ FD ]
Line_610 $$ public void dropTab1(final Connection c) -->Line_612 $$ stmt.execute("drop table tab1")[ CD ]
Line_611 $$ final Statement stmt = c.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_603 $$ Statement stmt = hs2Conn.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_588 $$ Statement stmt = connection.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_522 $$ Statement stmt = con.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_508 $$ final Statement stmt = c.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_501 $$ Statement stmt = conn.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_486 $$ Statement stmt = con.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_470 $$ Statement stmt = con.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_612 $$ stmt.execute("drop table tab1")[ FD ]
Line_0 $$ Entry-->Line_616 $$ //74
public class func [ CD ]
Line_616 $$ //74
public class func -->Line_617 $$ public void getExecutedStatementWhereLoginName(String loginName) [ CD ]
Line_617 $$ public void getExecutedStatementWhereLoginName(String loginName) -->Line_618 $$ Connection conn = getConnection()[ CD ]
Line_618 $$ Connection conn = getConnection()-->Line_618 $$ getConnection()[ CD ]
Line_617 $$ public void getExecutedStatementWhereLoginName(String loginName) -->Line_619 $$ Statement stmt = conn.createStatement()[ CD ]
Line_619 $$ Statement stmt = conn.createStatement()-->Line_619 $$ conn.createStatement()[ CD ]
Line_618 $$ Connection conn = getConnection()-->Line_619 $$ conn.createStatement()[ FD ]
Line_572 $$ Connection conn = getConnection("view")-->Line_619 $$ conn.createStatement()[ FD ]
Line_530 $$ Connection conn = getConnection("cancel")-->Line_619 $$ conn.createStatement()[ FD ]
Line_478 $$ Connection conn = getConnection("cases")-->Line_619 $$ conn.createStatement()[ FD ]
Line_462 $$ Connection conn = getConnection("cases")-->Line_619 $$ conn.createStatement()[ FD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_619 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_619 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_619 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_619 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_619 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_619 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_619 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_619 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_619 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_619 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_619 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_619 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_619 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_619 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_619 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_619 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_619 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_619 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_619 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_619 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_619 $$ conn.createStatement()[ FD ]
Line_617 $$ public void getExecutedStatementWhereLoginName(String loginName) -->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ CD ]
Line_619 $$ Statement stmt = conn.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_611 $$ final Statement stmt = c.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_603 $$ Statement stmt = hs2Conn.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_588 $$ Statement stmt = connection.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_522 $$ Statement stmt = con.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_508 $$ final Statement stmt = c.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_501 $$ Statement stmt = conn.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_486 $$ Statement stmt = con.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_470 $$ Statement stmt = con.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_620 $$ stmt.execute("select * from users where " + COLUMN_LOGIN + "='" + loginName + "'")[ FD ]
Line_0 $$ Entry-->Line_624 $$ //75
public class func [ CD ]
Line_624 $$ //75
public class func -->Line_625 $$ public void dumpTable(Connection conn) [ CD ]
Line_625 $$ public void dumpTable(Connection conn) -->Line_626 $$ Statement stmt = conn.createStatement()[ CD ]
Line_626 $$ Statement stmt = conn.createStatement()-->Line_626 $$ conn.createStatement()[ CD ]
Line_618 $$ Connection conn = getConnection()-->Line_626 $$ conn.createStatement()[ FD ]
Line_572 $$ Connection conn = getConnection("view")-->Line_626 $$ conn.createStatement()[ FD ]
Line_530 $$ Connection conn = getConnection("cancel")-->Line_626 $$ conn.createStatement()[ FD ]
Line_478 $$ Connection conn = getConnection("cases")-->Line_626 $$ conn.createStatement()[ FD ]
Line_462 $$ Connection conn = getConnection("cases")-->Line_626 $$ conn.createStatement()[ FD ]
Line_430 $$ Connection conn = getConnection("readonlyConnect;OPEN_NEW=TRUE")-->Line_626 $$ conn.createStatement()[ FD ]
Line_350 $$ Connection conn = getConnection("lob")-->Line_626 $$ conn.createStatement()[ FD ]
Line_295 $$ Connection conn = getConnection()-->Line_626 $$ conn.createStatement()[ FD ]
Line_287 $$ Connection conn = getConnection("cases")-->Line_626 $$ conn.createStatement()[ FD ]
Line_278 $$ Connection conn = getConnection("cases")-->Line_626 $$ conn.createStatement()[ FD ]
Line_268 $$ Connection conn = getConnection()-->Line_626 $$ conn.createStatement()[ FD ]
Line_260 $$ Connection conn = getConnection("cases")-->Line_626 $$ conn.createStatement()[ FD ]
Line_200 $$ Connection conn = getConnection("lob")-->Line_626 $$ conn.createStatement()[ FD ]
Line_182 $$ Connection conn = getConnection("sequence")-->Line_626 $$ conn.createStatement()[ FD ]
Line_173 $$ Connection conn = getConnection("sequence")-->Line_626 $$ conn.createStatement()[ FD ]
Line_164 $$ Connection conn = getConnection("sequence")-->Line_626 $$ conn.createStatement()[ FD ]
Line_146 $$ Connection conn = dataSource.getConnection()-->Line_626 $$ conn.createStatement()[ FD ]
Line_97 $$ Connection conn = ds.getConnection("root", "password")-->Line_626 $$ conn.createStatement()[ FD ]
Line_87 $$ Connection conn = getConnection("cases")-->Line_626 $$ conn.createStatement()[ FD ]
Line_70 $$ Connection conn = getConnection("cases")-->Line_626 $$ conn.createStatement()[ FD ]
Line_61 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_626 $$ conn.createStatement()[ FD ]
Line_53 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:race", "sa", "")-->Line_626 $$ conn.createStatement()[ FD ]
Line_29 $$ Connection conn = getConnection("cases")-->Line_626 $$ conn.createStatement()[ FD ]
Line_20 $$ Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "")-->Line_626 $$ conn.createStatement()[ FD ]
Line_12 $$ Connection conn = DriverManager.getConnection(create_url)-->Line_626 $$ conn.createStatement()[ FD ]
Line_4 $$ Connection conn = DriverManager.getConnection("jdbc:default:connection")-->Line_626 $$ conn.createStatement()[ FD ]
Line_625 $$ public void dumpTable(Connection conn) -->Line_627 $$ ResultSet rset = stmt.executeQuery("select region_id, region_name from regions order by region_id")[ CD ]
Line_627 $$ ResultSet rset = stmt.executeQuery("select region_id, region_name from regions order by region_id")-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ CD ]
Line_626 $$ Statement stmt = conn.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_619 $$ Statement stmt = conn.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_611 $$ final Statement stmt = c.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_603 $$ Statement stmt = hs2Conn.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_588 $$ Statement stmt = connection.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_522 $$ Statement stmt = con.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_508 $$ final Statement stmt = c.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_501 $$ Statement stmt = conn.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_486 $$ Statement stmt = con.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_470 $$ Statement stmt = con.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_627 $$ stmt.executeQuery("select region_id, region_name from regions order by region_id")[ FD ]
Line_625 $$ public void dumpTable(Connection conn) -->Line_628 $$ while (rset.next()) System.out.println(rset.getInt(1) + " " + rset.getString(2));[ CD ]
Line_625 $$ public void dumpTable(Connection conn) -->Line_625 $$ public void dumpTable(Connection conn) [ CD ]
Line_628 $$ while (rset.next()) System.out.println(rset.getInt(1) + " " + rset.getString(2));-->Line_628 $$ rset.next()[ CD ]
Line_627 $$ ResultSet rset = stmt.executeQuery("select region_id, region_name from regions order by region_id")-->Line_628 $$ rset.next()[ FD ]
Line_628 $$ while (rset.next()) System.out.println(rset.getInt(1) + " " + rset.getString(2));-->Line_629 $$ System.out.println(rset.getInt(1) + " " + rset.getString(2))[ CD ]
Line_627 $$ ResultSet rset = stmt.executeQuery("select region_id, region_name from regions order by region_id")-->Line_629 $$ rset.getInt(1)[ FD ]
Line_627 $$ ResultSet rset = stmt.executeQuery("select region_id, region_name from regions order by region_id")-->Line_629 $$ rset.getString(2)[ FD ]
Line_625 $$ public void dumpTable(Connection conn) -->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ CD ]
Line_626 $$ Statement stmt = conn.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_619 $$ Statement stmt = conn.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_611 $$ final Statement stmt = c.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_603 $$ Statement stmt = hs2Conn.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_588 $$ Statement stmt = connection.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_522 $$ Statement stmt = con.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_508 $$ final Statement stmt = c.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_501 $$ Statement stmt = conn.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_486 $$ Statement stmt = con.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_470 $$ Statement stmt = con.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_447 $$ Statement stmt = c.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_407 $$ Statement stmt = connection.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_400 $$ Statement stmt = con.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_304 $$ Statement stmt = con.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_297 $$ Statement stmt = conn.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_147 $$ Statement stmt = conn.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_107 $$ Statement stmt = connection.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_98 $$ Statement stmt = conn.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_80 $$ Statement stmt = connection.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_62 $$ Statement stmt = conn.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_54 $$ Statement stmt = conn.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_21 $$ Statement stmt = conn.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_13 $$ Statement stmt = conn.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_5 $$ Statement stmt = conn.createStatement()-->Line_630 $$ stmt.execute("delete from regions where region_id > 100")[ FD ]
Line_0 $$ Entry-->Line_634 $$ //76
public class func [ CD ]
Line_634 $$ //76
public class func -->Line_635 $$ public void testNoBegin() [ CD ]
Line_635 $$ public void testNoBegin() -->Line_636 $$ Connection connection = ConnectionHelper.getConnection(null)[ CD ]
Line_636 $$ Connection connection = ConnectionHelper.getConnection(null)-->Line_636 $$ ConnectionHelper.getConnection(null)[ CD ]
Line_635 $$ public void testNoBegin() -->Line_637 $$ Statement st = connection.createStatement()[ CD ]
Line_637 $$ Statement st = connection.createStatement()-->Line_637 $$ connection.createStatement()[ CD ]
Line_636 $$ Connection connection = ConnectionHelper.getConnection(null)-->Line_637 $$ connection.createStatement()[ FD ]
Line_378 $$ Connection connection = basicDataSource.getConnection()-->Line_637 $$ connection.createStatement()[ FD ]
Line_341 $$ Connection connection = provider.getConnection()-->Line_637 $$ connection.createStatement()[ FD ]
Line_333 $$ Connection connection = createConnection()-->Line_637 $$ connection.createStatement()[ FD ]
Line_226 $$ Connection connection = createConnection()-->Line_637 $$ connection.createStatement()[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_637 $$ connection.createStatement()[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_637 $$ connection.createStatement()[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_637 $$ connection.createStatement()[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_637 $$ connection.createStatement()[ FD ]
Line_635 $$ public void testNoBegin() -->Line_638 $$ String sql = getValidationQuery(connection)[ CD ]
Line_638 $$ String sql = getValidationQuery(connection)-->Line_638 $$ getValidationQuery(connection)[ CD ]
Line_636 $$ Connection connection = ConnectionHelper.getConnection(null)-->Line_638 $$ getValidationQuery(connection)[ FD ]
Line_378 $$ Connection connection = basicDataSource.getConnection()-->Line_638 $$ getValidationQuery(connection)[ FD ]
Line_341 $$ Connection connection = provider.getConnection()-->Line_638 $$ getValidationQuery(connection)[ FD ]
Line_333 $$ Connection connection = createConnection()-->Line_638 $$ getValidationQuery(connection)[ FD ]
Line_226 $$ Connection connection = createConnection()-->Line_638 $$ getValidationQuery(connection)[ FD ]
Line_218 $$ Connection connection = createConnection()-->Line_638 $$ getValidationQuery(connection)[ FD ]
Line_138 $$ final Connection connection = dataSource.getConnection()-->Line_638 $$ getValidationQuery(connection)[ FD ]
Line_106 $$ java.sql.Connection connection = dataSource.getConnection()-->Line_638 $$ getValidationQuery(connection)[ FD ]
Line_79 $$ Connection connection = dataSource.getConnection()-->Line_638 $$ getValidationQuery(connection)[ FD ]
Line_635 $$ public void testNoBegin() -->Line_639 $$ st.execute(sql)[ CD ]
Line_637 $$ Statement st = connection.createStatement()-->Line_639 $$ st.execute(sql)[ FD ]
Line_580 $$ Statement st = cx.createStatement()-->Line_639 $$ st.execute(sql)[ FD ]
Line_515 $$ Statement st = cx.createStatement()-->Line_639 $$ st.execute(sql)[ FD ]
Line_270 $$ Statement st = conn.createStatement()-->Line_639 $$ st.execute(sql)[ FD ]
Line_42 $$ Statement st = connection.createStatement()-->Line_639 $$ st.execute(sql)[ FD ]
Line_638 $$ String sql = getValidationQuery(connection)-->Line_639 $$ st.execute(sql)[ FD ]
Line_45 $$ int row = 0-->Line_45 $$ ++row[ FD ]
Line_45 $$ int row = 0-->Line_46 $$ gen.getVerifyText(row)[ FD ]
