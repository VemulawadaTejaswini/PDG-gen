Line_0 $$ Entry-->Line_2 $$ //24
public class func [ CD ]
Line_2 $$ //24
public class func -->Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) [ CD ]
Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_4 $$ inputBuffer.clear()[ CD ]
Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_5 $$ inputBuffer.limit(BlockCompressedStreamConstants.BLOCK_HEADER_LENGTH)[ CD ]
Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_6 $$ channel.read(inputBuffer)[ CD ]
Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_7 $$ inputBuffer.flip()[ CD ]
Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_8 $$ if (inputBuffer.remaining() != BlockCompressedStreamConstants.BLOCK_HEADER_LENGTH)
    throw new ReviewedGATKException("BUG: unable to read a the complete block header in one pass.");[ CD ]
Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_10 $$ if (unpackUByte8(inputBuffer, 0) != BlockCompressedStreamConstants.GZIP_ID1 || unpackUByte8(inputBuffer, 1) != BlockCompressedStreamConstants.GZIP_ID2 || unpackUByte8(inputBuffer, 3) != BlockCompressedStreamConstants.GZIP_FLG || unpackUInt16(inputBuffer, 10) != BlockCompressedStreamConstants.GZIP_XLEN || unpackUByte8(inputBuffer, 12) != BlockCompressedStreamConstants.BGZF_ID1 || unpackUByte8(inputBuffer, 13) != BlockCompressedStreamConstants.BGZF_ID2) [ CD ]
Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_18 $$ inputBuffer.position(BlockCompressedStreamConstants.BLOCK_LENGTH_OFFSET)[ CD ]
Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_20 $$ inputBuffer.limit(bufferSize)[ CD ]
Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_21 $$ inputBuffer.position(BlockCompressedStreamConstants.BLOCK_HEADER_LENGTH)[ CD ]
Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_22 $$ channel.read(inputBuffer)[ CD ]
Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_23 $$ inputBuffer.getInt(inputBuffer.limit() - 4)[ CD ]
Line_3 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_24 $$ inputBuffer.flip()[ CD ]
