Line_0 $$ Entry-->Line_2 $$ //44
public class func [ CD ]
Line_2 $$ //44
public class func -->Line_3 $$ public void storeFilesUpgradeable(File neoStoreFile) [ CD ]
Line_6 $$ String expectedVersion = fileNamesToExpectedVersions.get(fileName)-->Line_6 $$ fileNamesToExpectedVersions.get(fileName)[ CD ]
Line_4 $$ String fileName-->Line_6 $$ fileNamesToExpectedVersions.get(fileName)[ FD ]
Line_8 $$ byte[] expectedVersionBytes = UTF8.encode(expectedVersion)-->Line_8 $$ UTF8.encode(expectedVersion)[ CD ]
Line_6 $$ String expectedVersion = fileNamesToExpectedVersions.get(fileName)-->Line_8 $$ UTF8.encode(expectedVersion)[ FD ]
Line_12 $$ if (!storeFile.exists()) -->Line_12 $$ !storeFile.exists()[ CD ]
Line_12 $$ !storeFile.exists()-->Line_12 $$ storeFile.exists()[ CD ]
Line_11 $$ File storeFile = new File(storeDirectory, fileName)-->Line_12 $$ storeFile.exists()[ FD ]
Line_12 $$ if (!storeFile.exists()) -->Line_13 $$ return false;[ CD ]
Line_7 $$ FileChannel fileChannel = null-->Line_15 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()[ FD ]
Line_15 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_15 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()[ FD ]
Line_15 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_15 $$ new RandomAccessFile(storeFile, "r").getChannel()[ CD ]
Line_7 $$ FileChannel fileChannel = null-->Line_16 $$ fileChannel.position(fileChannel.size() - expectedVersionBytes.length)[ FD ]
Line_15 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_16 $$ fileChannel.position(fileChannel.size() - expectedVersionBytes.length)[ FD ]
Line_7 $$ FileChannel fileChannel = null-->Line_16 $$ fileChannel.size()[ FD ]
Line_15 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_16 $$ fileChannel.size()[ FD ]
Line_7 $$ FileChannel fileChannel = null-->Line_18 $$ fileChannel.read(ByteBuffer.wrap(foundVersionBytes))[ FD ]
Line_15 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_18 $$ fileChannel.read(ByteBuffer.wrap(foundVersionBytes))[ FD ]
Line_17 $$ byte[] foundVersionBytes = new byte[expectedVersionBytes.length]-->Line_18 $$ ByteBuffer.wrap(foundVersionBytes)[ FD ]
Line_19 $$ if (!expectedVersion.equals(UTF8.decode(foundVersionBytes))) -->Line_19 $$ !expectedVersion.equals(UTF8.decode(foundVersionBytes))[ CD ]
Line_19 $$ !expectedVersion.equals(UTF8.decode(foundVersionBytes))-->Line_19 $$ expectedVersion.equals(UTF8.decode(foundVersionBytes))[ CD ]
Line_6 $$ String expectedVersion = fileNamesToExpectedVersions.get(fileName)-->Line_19 $$ expectedVersion.equals(UTF8.decode(foundVersionBytes))[ FD ]
Line_17 $$ byte[] foundVersionBytes = new byte[expectedVersionBytes.length]-->Line_19 $$ UTF8.decode(foundVersionBytes)[ FD ]
Line_19 $$ if (!expectedVersion.equals(UTF8.decode(foundVersionBytes))) -->Line_21 $$ return false;[ CD ]
Line_7 $$ FileChannel fileChannel = null-->Line_28 $$ if (fileChannel != null) [ FD ]
Line_15 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_28 $$ if (fileChannel != null) [ FD ]
Line_7 $$ FileChannel fileChannel = null-->Line_32 $$ fileChannel.close()[ FD ]
Line_15 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_32 $$ fileChannel.close()[ FD ]
