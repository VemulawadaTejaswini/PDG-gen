Line_0 $$ Entry-->Line_2 $$ //2
public class func [ CD ]
Line_2 $$ //2
public class func -->Line_3 $$ public void readValue(byte[] key, int chunk, int valueLocation) [ CD ]
Line_3 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_4 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)[ CD ]
Line_4 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_4 $$ ByteBuffer.allocate(headerSize)[ CD ]
Line_3 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_5 $$ dataFile.read(sizeBuffer, valueLocation)[ CD ]
Line_4 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_5 $$ dataFile.read(sizeBuffer, valueLocation)[ FD ]
Line_3 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_6 $$ short numKeyValues = sizeBuffer.getShort(0)[ CD ]
Line_6 $$ short numKeyValues = sizeBuffer.getShort(0)-->Line_6 $$ sizeBuffer.getShort(0)[ CD ]
Line_4 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_6 $$ sizeBuffer.getShort(0)[ FD ]
Line_3 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_7 $$ int valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT)[ CD ]
Line_7 $$ int valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT)-->Line_7 $$ sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT)[ CD ]
Line_4 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_7 $$ sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT)[ FD ]
Line_3 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_9 $$ do [ CD ]
Line_3 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_3 $$ public void readValue(byte[] key, int chunk, int valueLocation) [ CD ]
Line_9 $$ do -->Line_11 $$ if (keySize == -1 && valueSize == -1) [ CD ]
Line_11 $$ if (keySize == -1 && valueSize == -1) -->Line_12 $$ sizeBuffer.clear()[ CD ]
Line_4 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_12 $$ sizeBuffer.clear()[ FD ]
Line_11 $$ if (keySize == -1 && valueSize == -1) -->Line_16 $$ dataFile.read(sizeBuffer, valueLocation)[ CD ]
Line_4 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_16 $$ dataFile.read(sizeBuffer, valueLocation)[ FD ]
Line_11 $$ if (keySize == -1 && valueSize == -1) -->Line_17 $$ sizeBuffer.getInt(0)[ CD ]
Line_4 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_17 $$ sizeBuffer.getInt(0)[ FD ]
Line_11 $$ if (keySize == -1 && valueSize == -1) -->Line_18 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)[ CD ]
Line_18 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)-->Line_18 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)[ FD ]
Line_7 $$ int valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT)-->Line_18 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)[ FD ]
Line_18 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)-->Line_18 $$ sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)[ CD ]
Line_4 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_18 $$ sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)[ FD ]
Line_11 $$ if (keySize == -1 && valueSize == -1) -->Line_19 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)[ CD ]
Line_19 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)-->Line_19 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)[ FD ]
Line_9 $$ do -->Line_23 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)[ CD ]
Line_23 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_23 $$ ByteBuffer.allocate(keySize + valueSize)[ CD ]
Line_9 $$ do -->Line_24 $$ dataFile.read(buffer, valueLocation)[ CD ]
Line_23 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_24 $$ dataFile.read(buffer, valueLocation)[ FD ]
Line_19 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)-->Line_24 $$ dataFile.read(buffer, valueLocation)[ FD ]
Line_9 $$ do -->Line_27 $$ // Compare key
if (ByteUtils.compare(key, buffer.array(), 0, keySize) == 0) [ CD ]
Line_23 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_27 $$ buffer.array()[ FD ]
Line_27 $$ // Compare key
if (ByteUtils.compare(key, buffer.array(), 0, keySize) == 0) -->Line_28 $$ return ByteUtils.copy(buffer.array(), keySize, keySize + valueSize);[ CD ]
Line_28 $$ return ByteUtils.copy(buffer.array(), keySize, keySize + valueSize);-->Line_28 $$ ByteUtils.copy(buffer.array(), keySize, keySize + valueSize)[ CD ]
Line_23 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_28 $$ buffer.array()[ FD ]
Line_9 $$ do -->Line_30 $$ valueLocation += (keySize + valueSize)[ CD ]
Line_19 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)-->Line_30 $$ valueLocation += (keySize + valueSize)[ FD ]
Line_30 $$ valueLocation += (keySize + valueSize)-->Line_30 $$ valueLocation += (keySize + valueSize)[ FD ]
Line_9 $$ do -->Line_31 $$ valueSize = -1[ CD ]
Line_18 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)-->Line_31 $$ valueSize = -1[ FD ]
Line_31 $$ valueSize = -1-->Line_31 $$ valueSize = -1[ FD ]
Line_7 $$ int valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT)-->Line_31 $$ valueSize = -1[ FD ]
Line_31 $$ valueSize = -1-->Line_31 $$ -1[ CD ]
Line_6 $$ short numKeyValues = sizeBuffer.getShort(0)-->Line_33 $$ --numKeyValues[ FD ]
Line_19 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)-->Line_16 $$ dataFile.read(sizeBuffer, valueLocation)[ FD ]
Line_30 $$ valueLocation += (keySize + valueSize)-->Line_16 $$ dataFile.read(sizeBuffer, valueLocation)[ FD ]
Line_23 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_24 $$ dataFile.read(buffer, valueLocation)[ FD ]
Line_19 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)-->Line_24 $$ dataFile.read(buffer, valueLocation)[ FD ]
Line_30 $$ valueLocation += (keySize + valueSize)-->Line_24 $$ dataFile.read(buffer, valueLocation)[ FD ]
Line_23 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_27 $$ buffer.array()[ FD ]
Line_23 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_28 $$ buffer.array()[ FD ]
