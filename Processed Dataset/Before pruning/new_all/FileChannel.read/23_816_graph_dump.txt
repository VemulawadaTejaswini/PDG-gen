Line_0 $$ Entry-->Line_2 $$ //22
public class func [ CD ]
Line_2 $$ //22
public class func -->Line_3 $$ public void run() [ CD ]
Line_3 $$ public void run() -->Line_4 $$ int read = channel.read(buff.getByteBuffer(), offset)[ CD ]
Line_4 $$ int read = channel.read(buff.getByteBuffer(), offset)-->Line_4 $$ channel.read(buff.getByteBuffer(), offset)[ CD ]
Line_3 $$ public void run() -->Line_5 $$ if (read < 0) [ CD ]
Line_4 $$ int read = channel.read(buff.getByteBuffer(), offset)-->Line_5 $$ if (read < 0) [ FD ]
Line_5 $$ if (read < 0) -->Line_6 $$ if (buff.position() > position) [ CD ]
Line_6 $$ if (buff.position() > position) -->Line_6 $$ buff.position()[ CD ]
Line_6 $$ if (buff.position() > position) -->Line_7 $$ buff.limit(buff.position())[ CD ]
Line_6 $$ if (buff.position() > position) -->Line_8 $$ buff.position(position)[ CD ]
Line_6 $$ if (buff.position() > position) -->Line_9 $$ buff.mark()[ CD ]
Line_6 $$ if (buff.position() > position) -->Line_10 $$ list.add(buff)[ CD ]
Line_6 $$ if (buff.position() > position) -->Line_12 $$ if (Debug.ENABLED)
    buff.lock(0);[ CD ]
Line_12 $$ if (Debug.ENABLED)
    buff.lock(0);-->Line_13 $$ buff.lock(0)[ CD ]
Line_6 $$ if (buff.position() > position) -->Line_15 $$ buff.recycle()[ CD ]
Line_5 $$ if (read < 0) -->Line_19 $$ if (buff.remaining() == 0) [ CD ]
Line_19 $$ if (buff.remaining() == 0) -->Line_20 $$ buff.position(position)[ CD ]
Line_19 $$ if (buff.remaining() == 0) -->Line_21 $$ buff.mark()[ CD ]
Line_19 $$ if (buff.remaining() == 0) -->Line_22 $$ list.add(buff)[ CD ]
Line_19 $$ if (buff.remaining() == 0) -->Line_23 $$ JVMBuff.getWithPosition(Buff.getLargestUnsplitable())[ CD ]
Line_19 $$ if (buff.remaining() == 0) -->Line_24 $$ buff.position()[ CD ]
Line_3 $$ public void run() -->Line_27 $$ list.copyToFixed(buffs)[ CD ]
