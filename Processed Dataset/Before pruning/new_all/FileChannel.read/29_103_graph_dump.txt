Line_0 $$ Entry-->Line_2 $$ //28
public class func [ CD ]
Line_2 $$ //28
public class func -->Line_3 $$ public void read(FileChannel ch, ByteBuffer[] bb, final long start_position) [ CD ]
Line_3 $$ public void read(FileChannel ch, ByteBuffer[] bb, final long start_position) -->Line_4 $$ while (buf.hasRemaining()) [ CD ]
Line_3 $$ public void read(FileChannel ch, ByteBuffer[] bb, final long start_position) -->Line_3 $$ public void read(FileChannel ch, ByteBuffer[] bb, final long start_position) [ CD ]
Line_4 $$ while (buf.hasRemaining()) -->Line_4 $$ buf.hasRemaining()[ CD ]
Line_4 $$ while (buf.hasRemaining()) -->Line_7 $$ int read = ch.read(buf, position)[ CD ]
Line_7 $$ int read = ch.read(buf, position)-->Line_7 $$ ch.read(buf, position)[ CD ]
Line_4 $$ while (buf.hasRemaining()) -->Line_8 $$ if (read >= 0) [ CD ]
Line_7 $$ int read = ch.read(buf, position)-->Line_8 $$ if (read >= 0) [ FD ]
Line_8 $$ if (read >= 0) -->Line_12 $$ if (read == 0) [ CD ]
Line_7 $$ int read = ch.read(buf, position)-->Line_12 $$ if (read == 0) [ FD ]
Line_12 $$ if (read == 0) -->Line_14 $$ Thread.yield()[ CD ]
Line_8 $$ if (read >= 0) -->Line_18 $$ return 0;[ CD ]
Line_7 $$ int read = ch.read(buf, position)-->Line_8 $$ if (read >= 0) [ FD ]
Line_7 $$ int read = ch.read(buf, position)-->Line_12 $$ if (read == 0) [ FD ]
