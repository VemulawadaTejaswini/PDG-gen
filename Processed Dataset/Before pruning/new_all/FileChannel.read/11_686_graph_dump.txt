Line_0 $$ Entry-->Line_2 $$ //10
public class func [ CD ]
Line_2 $$ //10
public class func -->Line_3 $$ public void telnet(Channel channel, String message) [ CD ]
Line_3 $$ public void telnet(Channel channel, String message) -->Line_4 $$ if (file != null && file.exists()) [ CD ]
Line_8 $$ FileChannel filechannel = fis.getChannel()-->Line_8 $$ fis.getChannel()[ CD ]
Line_6 $$ FileInputStream fis = new FileInputStream(file)-->Line_8 $$ fis.getChannel()[ FD ]
Line_8 $$ FileChannel filechannel = fis.getChannel()-->Line_10 $$ filechannel.size()[ FD ]
Line_12 $$ if (size <= SHOW_LOG_LENGTH) -->Line_13 $$ bb = ByteBuffer.allocate((int) size)[ CD ]
Line_11 $$ ByteBuffer bb-->Line_13 $$ bb = ByteBuffer.allocate((int) size)[ FD ]
Line_13 $$ bb = ByteBuffer.allocate((int) size)-->Line_13 $$ bb = ByteBuffer.allocate((int) size)[ FD ]
Line_13 $$ bb = ByteBuffer.allocate((int) size)-->Line_13 $$ ByteBuffer.allocate((int) size)[ CD ]
Line_12 $$ if (size <= SHOW_LOG_LENGTH) -->Line_14 $$ filechannel.read(bb, 0)[ CD ]
Line_8 $$ FileChannel filechannel = fis.getChannel()-->Line_14 $$ filechannel.read(bb, 0)[ FD ]
Line_11 $$ ByteBuffer bb-->Line_14 $$ filechannel.read(bb, 0)[ FD ]
Line_13 $$ bb = ByteBuffer.allocate((int) size)-->Line_14 $$ filechannel.read(bb, 0)[ FD ]
Line_12 $$ if (size <= SHOW_LOG_LENGTH) -->Line_16 $$ int pos = (int) (size - SHOW_LOG_LENGTH)[ CD ]
Line_12 $$ if (size <= SHOW_LOG_LENGTH) -->Line_17 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ CD ]
Line_11 $$ ByteBuffer bb-->Line_17 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ FD ]
Line_13 $$ bb = ByteBuffer.allocate((int) size)-->Line_17 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ FD ]
Line_17 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_17 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ FD ]
Line_17 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_17 $$ ByteBuffer.allocate(SHOW_LOG_LENGTH)[ CD ]
Line_12 $$ if (size <= SHOW_LOG_LENGTH) -->Line_18 $$ filechannel.read(bb, pos)[ CD ]
Line_8 $$ FileChannel filechannel = fis.getChannel()-->Line_18 $$ filechannel.read(bb, pos)[ FD ]
Line_11 $$ ByteBuffer bb-->Line_18 $$ filechannel.read(bb, pos)[ FD ]
Line_13 $$ bb = ByteBuffer.allocate((int) size)-->Line_18 $$ filechannel.read(bb, pos)[ FD ]
Line_17 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_18 $$ filechannel.read(bb, pos)[ FD ]
Line_16 $$ int pos = (int) (size - SHOW_LOG_LENGTH)-->Line_18 $$ filechannel.read(bb, pos)[ FD ]
Line_11 $$ ByteBuffer bb-->Line_20 $$ bb.flip()[ FD ]
Line_13 $$ bb = ByteBuffer.allocate((int) size)-->Line_20 $$ bb.flip()[ FD ]
Line_17 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_20 $$ bb.flip()[ FD ]
Line_21 $$ String content = new String(bb.array()).replace("<", "&lt;").replace(">", "&gt;").replace("\n", "<br/><br/>")-->Line_21 $$ new String(bb.array()).replace("<", "&lt;").replace(">", "&gt;").replace("\n", "<br/><br/>")[ CD ]
Line_11 $$ ByteBuffer bb-->Line_21 $$ bb.array()[ FD ]
Line_13 $$ bb = ByteBuffer.allocate((int) size)-->Line_21 $$ bb.array()[ FD ]
Line_17 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_21 $$ bb.array()[ FD ]
Line_8 $$ FileChannel filechannel = fis.getChannel()-->Line_29 $$ filechannel.close()[ FD ]
Line_6 $$ FileInputStream fis = new FileInputStream(file)-->Line_32 $$ fis.close()[ FD ]
Line_4 $$ if (file != null && file.exists()) -->Line_39 $$ buf.append("\r\nMESSAGE: log file not exists or log appender is console .")[ CD ]
