Line_0 $$ Entry-->Line_2 $$ //11
public class func [ CD ]
Line_2 $$ //11
public class func -->Line_3 $$ public void index(Map<String, Object> context) [ CD ]
Line_3 $$ public void index(Map<String, Object> context) -->Line_4 $$ File file = LoggerFactory.getFile()[ CD ]
Line_4 $$ File file = LoggerFactory.getFile()-->Line_4 $$ LoggerFactory.getFile()[ CD ]
Line_3 $$ public void index(Map<String, Object> context) -->Line_5 $$ if (file != null && file.exists()) [ CD ]
Line_4 $$ File file = LoggerFactory.getFile()-->Line_5 $$ file.exists()[ FD ]
Line_5 $$ if (file != null && file.exists()) -->Line_6 $$ FileInputStream fis = new FileInputStream(file)[ CD ]
Line_5 $$ if (file != null && file.exists()) -->Line_7 $$ FileChannel channel = fis.getChannel()[ CD ]
Line_7 $$ FileChannel channel = fis.getChannel()-->Line_7 $$ fis.getChannel()[ CD ]
Line_6 $$ FileInputStream fis = new FileInputStream(file)-->Line_7 $$ fis.getChannel()[ FD ]
Line_5 $$ if (file != null && file.exists()) -->Line_8 $$ channel.size()[ CD ]
Line_7 $$ FileChannel channel = fis.getChannel()-->Line_8 $$ channel.size()[ FD ]
Line_5 $$ if (file != null && file.exists()) -->Line_9 $$ ByteBuffer bb[ CD ]
Line_5 $$ if (file != null && file.exists()) -->Line_10 $$ if (size <= SHOW_LOG_LENGTH) [ CD ]
Line_10 $$ if (size <= SHOW_LOG_LENGTH) -->Line_11 $$ bb = ByteBuffer.allocate((int) size)[ CD ]
Line_9 $$ ByteBuffer bb-->Line_11 $$ bb = ByteBuffer.allocate((int) size)[ FD ]
Line_11 $$ bb = ByteBuffer.allocate((int) size)-->Line_11 $$ bb = ByteBuffer.allocate((int) size)[ FD ]
Line_11 $$ bb = ByteBuffer.allocate((int) size)-->Line_11 $$ ByteBuffer.allocate((int) size)[ CD ]
Line_10 $$ if (size <= SHOW_LOG_LENGTH) -->Line_12 $$ channel.read(bb, 0)[ CD ]
Line_7 $$ FileChannel channel = fis.getChannel()-->Line_12 $$ channel.read(bb, 0)[ FD ]
Line_9 $$ ByteBuffer bb-->Line_12 $$ channel.read(bb, 0)[ FD ]
Line_11 $$ bb = ByteBuffer.allocate((int) size)-->Line_12 $$ channel.read(bb, 0)[ FD ]
Line_10 $$ if (size <= SHOW_LOG_LENGTH) -->Line_14 $$ int pos = (int) (size - SHOW_LOG_LENGTH)[ CD ]
Line_10 $$ if (size <= SHOW_LOG_LENGTH) -->Line_15 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ CD ]
Line_9 $$ ByteBuffer bb-->Line_15 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ FD ]
Line_11 $$ bb = ByteBuffer.allocate((int) size)-->Line_15 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ FD ]
Line_15 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_15 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ FD ]
Line_15 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_15 $$ ByteBuffer.allocate(SHOW_LOG_LENGTH)[ CD ]
Line_10 $$ if (size <= SHOW_LOG_LENGTH) -->Line_16 $$ channel.read(bb, pos)[ CD ]
Line_7 $$ FileChannel channel = fis.getChannel()-->Line_16 $$ channel.read(bb, pos)[ FD ]
Line_9 $$ ByteBuffer bb-->Line_16 $$ channel.read(bb, pos)[ FD ]
Line_11 $$ bb = ByteBuffer.allocate((int) size)-->Line_16 $$ channel.read(bb, pos)[ FD ]
Line_15 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_16 $$ channel.read(bb, pos)[ FD ]
Line_14 $$ int pos = (int) (size - SHOW_LOG_LENGTH)-->Line_16 $$ channel.read(bb, pos)[ FD ]
Line_5 $$ if (file != null && file.exists()) -->Line_18 $$ bb.flip()[ CD ]
Line_9 $$ ByteBuffer bb-->Line_18 $$ bb.flip()[ FD ]
Line_11 $$ bb = ByteBuffer.allocate((int) size)-->Line_18 $$ bb.flip()[ FD ]
Line_15 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_18 $$ bb.flip()[ FD ]
Line_5 $$ if (file != null && file.exists()) -->Line_19 $$ new String(bb.array()).replace("<", "&lt;").replace(">", "&gt;")[ CD ]
Line_9 $$ ByteBuffer bb-->Line_19 $$ bb.array()[ FD ]
Line_11 $$ bb = ByteBuffer.allocate((int) size)-->Line_19 $$ bb.array()[ FD ]
Line_15 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_19 $$ bb.array()[ FD ]
Line_5 $$ if (file != null && file.exists()) -->Line_20 $$ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(file.lastModified()))[ CD ]
Line_4 $$ File file = LoggerFactory.getFile()-->Line_20 $$ file.lastModified()[ FD ]
