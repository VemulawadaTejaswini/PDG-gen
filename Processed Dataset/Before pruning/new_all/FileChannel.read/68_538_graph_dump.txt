Line_0 $$ Entry-->Line_2 $$ //67
public class func [ CD ]
Line_2 $$ //67
public class func -->Line_3 $$ public void isFilePortionNull(int startByte, int endByte) [ CD ]
Line_3 $$ public void isFilePortionNull(int startByte, int endByte) -->Line_5 $$ fis.getChannel()[ CD ]
Line_3 $$ public void isFilePortionNull(int startByte, int endByte) -->Line_6 $$ fc.position(startByte)[ CD ]
Line_3 $$ public void isFilePortionNull(int startByte, int endByte) -->Line_7 $$ ByteBuffer bb = ByteBuffer.allocateDirect(endByte - startByte)[ CD ]
Line_7 $$ ByteBuffer bb = ByteBuffer.allocateDirect(endByte - startByte)-->Line_7 $$ ByteBuffer.allocateDirect(endByte - startByte)[ CD ]
Line_3 $$ public void isFilePortionNull(int startByte, int endByte) -->Line_8 $$ fc.read(bb)[ CD ]
Line_7 $$ ByteBuffer bb = ByteBuffer.allocateDirect(endByte - startByte)-->Line_8 $$ fc.read(bb)[ FD ]
Line_3 $$ public void isFilePortionNull(int startByte, int endByte) -->Line_9 $$ while (bb.hasRemaining()) [ CD ]
Line_3 $$ public void isFilePortionNull(int startByte, int endByte) -->Line_3 $$ public void isFilePortionNull(int startByte, int endByte) [ CD ]
Line_9 $$ while (bb.hasRemaining()) -->Line_9 $$ bb.hasRemaining()[ CD ]
Line_7 $$ ByteBuffer bb = ByteBuffer.allocateDirect(endByte - startByte)-->Line_9 $$ bb.hasRemaining()[ FD ]
Line_9 $$ while (bb.hasRemaining()) -->Line_11 $$ if (bb.get() != 0) [ CD ]
Line_7 $$ ByteBuffer bb = ByteBuffer.allocateDirect(endByte - startByte)-->Line_11 $$ bb.get()[ FD ]
Line_11 $$ if (bb.get() != 0) -->Line_13 $$ return false;[ CD ]
