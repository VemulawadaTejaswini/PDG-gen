Line_0 $$ Entry-->Line_2 $$ //3
public class func [ CD ]
Line_2 $$ //3
public class func -->Line_3 $$ public void testClose() [ CD ]
Line_3 $$ public void testClose() -->Line_4 $$ assertTrue(channel.isOpen())[ CD ]
Line_3 $$ public void testClose() -->Line_5 $$ channel.close()[ CD ]
Line_3 $$ public void testClose() -->Line_6 $$ assertFalse(channel.isOpen())[ CD ]
Line_3 $$ public void testClose() -->Line_7 $$ channel.position()[ CD ]
Line_3 $$ public void testClose() -->Line_8 $$ channel.position(0)[ CD ]
Line_3 $$ public void testClose() -->Line_9 $$ channel.lock()[ CD ]
Line_3 $$ public void testClose() -->Line_10 $$ channel.lock(0, 10, true)[ CD ]
Line_3 $$ public void testClose() -->Line_11 $$ channel.tryLock()[ CD ]
Line_3 $$ public void testClose() -->Line_12 $$ channel.tryLock(0, 10, true)[ CD ]
Line_3 $$ public void testClose() -->Line_13 $$ channel.force(true)[ CD ]
Line_3 $$ public void testClose() -->Line_14 $$ channel.write(buffer("111"))[ CD ]
Line_3 $$ public void testClose() -->Line_15 $$ channel.write(buffer("111"), 10)[ CD ]
Line_3 $$ public void testClose() -->Line_16 $$ channel.write(new ByteBuffer[] [ CD ]
Line_3 $$ public void testClose() -->Line_17 $$ channel.write(new ByteBuffer[] [ CD ]
Line_3 $$ public void testClose() -->Line_18 $$ channel.transferFrom(new ByteBufferChannel(bytes("1111")), 0, 4)[ CD ]
Line_3 $$ public void testClose() -->Line_19 $$ channel.truncate(0)[ CD ]
Line_3 $$ public void testClose() -->Line_20 $$ channel.read(buffer("111"))[ CD ]
Line_3 $$ public void testClose() -->Line_21 $$ channel.read(buffer("111"), 10)[ CD ]
Line_3 $$ public void testClose() -->Line_22 $$ channel.read(new ByteBuffer[] [ CD ]
Line_3 $$ public void testClose() -->Line_23 $$ channel.read(new ByteBuffer[] [ CD ]
Line_3 $$ public void testClose() -->Line_24 $$ channel.transferTo(0, 10, new ByteBufferChannel(buffer("111")))[ CD ]
