Line_0 $$ Entry-->Line_2 $$ //9
public class func [ CD ]
Line_2 $$ //9
public class func -->Line_3 $$ public void readBackendInfo(File file) [ CD ]
Line_3 $$ public void readBackendInfo(File file) -->Line_4 $$ if (!file.exists() || (file.length() == 0)) [ CD ]
Line_4 $$ !file.exists()-->Line_4 $$ file.exists()[ CD ]
Line_4 $$ if (!file.exists() || (file.length() == 0)) -->Line_5 $$ return new ModelBackendInfo();[ CD ]
Line_3 $$ public void readBackendInfo(File file) -->Line_7 $$ RandomAccessFile raf = new RandomAccessFile(file, "r")[ CD ]
Line_3 $$ public void readBackendInfo(File file) -->Line_8 $$ FileChannel channel = raf.getChannel()[ CD ]
Line_8 $$ FileChannel channel = raf.getChannel()-->Line_8 $$ raf.getChannel()[ CD ]
Line_7 $$ RandomAccessFile raf = new RandomAccessFile(file, "r")-->Line_8 $$ raf.getChannel()[ FD ]
Line_3 $$ public void readBackendInfo(File file) -->Line_9 $$ ByteBuffer bb = ByteBuffer.allocate((int) raf.length())[ CD ]
Line_9 $$ ByteBuffer bb = ByteBuffer.allocate((int) raf.length())-->Line_9 $$ ByteBuffer.allocate((int) raf.length())[ CD ]
Line_7 $$ RandomAccessFile raf = new RandomAccessFile(file, "r")-->Line_9 $$ raf.length()[ FD ]
Line_3 $$ public void readBackendInfo(File file) -->Line_10 $$ channel.read(bb)[ CD ]
Line_8 $$ FileChannel channel = raf.getChannel()-->Line_10 $$ channel.read(bb)[ FD ]
Line_9 $$ ByteBuffer bb = ByteBuffer.allocate((int) raf.length())-->Line_10 $$ channel.read(bb)[ FD ]
Line_3 $$ public void readBackendInfo(File file) -->Line_11 $$ channel.close()[ CD ]
Line_8 $$ FileChannel channel = raf.getChannel()-->Line_11 $$ channel.close()[ FD ]
