Line_0 $$ Entry-->Line_2 $$ //29
public class func [ CD ]
Line_2 $$ //29
public class func -->Line_3 $$ public void read(FileChannel ch, ByteBuffer bb, final long start_position) [ CD ]
Line_3 $$ public void read(FileChannel ch, ByteBuffer bb, final long start_position) -->Line_4 $$ while (bb.hasRemaining()) [ CD ]
Line_3 $$ public void read(FileChannel ch, ByteBuffer bb, final long start_position) -->Line_3 $$ public void read(FileChannel ch, ByteBuffer bb, final long start_position) [ CD ]
Line_4 $$ while (bb.hasRemaining()) -->Line_4 $$ bb.hasRemaining()[ CD ]
Line_4 $$ while (bb.hasRemaining()) -->Line_6 $$ int read = ch.read(bb, position)[ CD ]
Line_6 $$ int read = ch.read(bb, position)-->Line_6 $$ ch.read(bb, position)[ CD ]
Line_4 $$ while (bb.hasRemaining()) -->Line_7 $$ if (read >= 0) [ CD ]
Line_6 $$ int read = ch.read(bb, position)-->Line_7 $$ if (read >= 0) [ FD ]
Line_7 $$ if (read >= 0) -->Line_10 $$ if (read == 0) [ CD ]
Line_6 $$ int read = ch.read(bb, position)-->Line_10 $$ if (read == 0) [ FD ]
Line_10 $$ if (read == 0) -->Line_11 $$ Thread.yield()[ CD ]
Line_7 $$ if (read >= 0) -->Line_14 $$ return 0;[ CD ]
Line_6 $$ int read = ch.read(bb, position)-->Line_7 $$ if (read >= 0) [ FD ]
Line_6 $$ int read = ch.read(bb, position)-->Line_10 $$ if (read == 0) [ FD ]
