Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void transferFileToPublicServer(String kmlFileName, File file) [ CD ]
Line_3 $$ public void transferFileToPublicServer(String kmlFileName, File file) -->Line_5 $$ while ((str = inStream.readLine()) != null) [ CD ]
Line_3 $$ public void transferFileToPublicServer(String kmlFileName, File file) -->Line_3 $$ public void transferFileToPublicServer(String kmlFileName, File file) [ CD ]
Line_5 $$ while ((str = inStream.readLine()) != null) -->Line_6 $$ if (str.equalsIgnoreCase("done")) [ CD ]
Line_6 $$ if (str.equalsIgnoreCase("done")) -->Line_6 $$ str.equalsIgnoreCase("done")[ CD ]
Line_6 $$ if (str.equalsIgnoreCase("done")) -->Line_7 $$ logger.info("Transfer complete.")[ CD ]
Line_6 $$ if (str.equalsIgnoreCase("done")) -->Line_8 $$ inStream.close()[ CD ]
Line_6 $$ if (str.equalsIgnoreCase("done")) -->Line_9 $$ return true;[ CD ]
Line_6 $$ if (str.equalsIgnoreCase("done")) -->Line_11 $$ return false;[ CD ]
Line_3 $$ public void transferFileToPublicServer(String kmlFileName, File file) -->Line_13 $$ inStream.close()[ CD ]
Line_0 $$ Entry-->Line_17 $$ //1
public class func [ CD ]
Line_17 $$ //1
public class func -->Line_18 $$ public void grabPage(String url) [ CD ]
Line_18 $$ public void grabPage(String url) -->Line_20 $$ u.openStream()[ CD ]
Line_18 $$ public void grabPage(String url) -->Line_22 $$ while ((s = dis.readLine()) != null) [ CD ]
Line_18 $$ public void grabPage(String url) -->Line_18 $$ public void grabPage(String url) [ CD ]
Line_22 $$ while ((s = dis.readLine()) != null) -->Line_23 $$ result.append(s).append("\n")[ CD ]
Line_18 $$ public void grabPage(String url) -->Line_25 $$ if (dis != null)
    dis.close();[ CD ]
Line_25 $$ if (dis != null)
    dis.close();-->Line_26 $$ dis.close()[ CD ]
Line_18 $$ public void grabPage(String url) -->Line_27 $$ if (is != null)
    is.close();[ CD ]
Line_27 $$ if (is != null)
    is.close();-->Line_28 $$ is.close()[ CD ]
Line_0 $$ Entry-->Line_32 $$ //2
public class func [ CD ]
Line_32 $$ //2
public class func -->Line_33 $$ public void testRead(String filename) [ CD ]
Line_33 $$ public void testRead(String filename) -->Line_34 $$ DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(filename)))[ CD ]
Line_33 $$ public void testRead(String filename) -->Line_35 $$ while (null != (line = in.readLine())) [ CD ]
Line_33 $$ public void testRead(String filename) -->Line_33 $$ public void testRead(String filename) [ CD ]
Line_34 $$ DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_35 $$ in.readLine()[ FD ]
Line_35 $$ while (null != (line = in.readLine())) -->Line_36 $$ System.out.println("Line " + count++)[ CD ]
Line_35 $$ while (null != (line = in.readLine())) -->Line_37 $$ System.out.println(line)[ CD ]
Line_35 $$ while (null != (line = in.readLine())) -->Line_38 $$ System.out.println(showBytes(line.getBytes(CDM.utf8Charset)))[ CD ]
Line_33 $$ public void testRead(String filename) -->Line_40 $$ in.close()[ CD ]
Line_34 $$ DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_40 $$ in.close()[ FD ]
Line_0 $$ Entry-->Line_44 $$ //3
public class func [ CD ]
Line_44 $$ //3
public class func -->Line_45 $$ public void load(InputStream inStream) [ CD ]
Line_45 $$ public void load(InputStream inStream) -->Line_46 $$ DataInputStream reader = new DataInputStream(inStream)[ CD ]
Line_45 $$ public void load(InputStream inStream) -->Line_47 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_45 $$ public void load(InputStream inStream) -->Line_45 $$ public void load(InputStream inStream) [ CD ]
Line_46 $$ DataInputStream reader = new DataInputStream(inStream)-->Line_47 $$ reader.readLine()[ FD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_49 $$ char c = 0[ CD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_50 $$ int pos = 0[ CD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_52 $$ // Leading whitespaces must be deleted first.
while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_47 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_53 $$ c = line.charAt(pos)-->Line_53 $$ c = line.charAt(pos)[ FD ]
Line_49 $$ char c = 0-->Line_53 $$ c = line.charAt(pos)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_53 $$ line.charAt(pos)[ CD ]
Line_50 $$ int pos = 0-->Line_53 $$ line.charAt(pos)[ FD ]
Line_52 $$ // Leading whitespaces must be deleted first.
while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;-->Line_54 $$ pos++[ CD ]
Line_50 $$ int pos = 0-->Line_54 $$ pos++[ FD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_57 $$ // If empty line or begins with a comment character, skip this line.
if ((line.length() - pos) == 0 || line.charAt(pos) == '#' || line.charAt(pos) == '!')
    continue;[ CD ]
Line_50 $$ int pos = 0-->Line_58 $$ line.charAt(pos)[ FD ]
Line_50 $$ int pos = 0-->Line_58 $$ line.charAt(pos)[ FD ]
Line_50 $$ int pos = 0-->Line_65 $$ line.indexOf('\\', pos)[ FD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_67 $$ while (pos < line.length() && !Character.isWhitespace(c = line.charAt(pos++)) && c != '=' && c != ':') [ CD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_47 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_68 $$ !Character.isWhitespace(c = line.charAt(pos++))-->Line_68 $$ Character.isWhitespace(c = line.charAt(pos++))[ CD ]
Line_68 $$ c = line.charAt(pos++)-->Line_68 $$ c = line.charAt(pos++)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_68 $$ c = line.charAt(pos++)[ FD ]
Line_49 $$ char c = 0-->Line_68 $$ c = line.charAt(pos++)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_68 $$ line.charAt(pos++)[ CD ]
Line_50 $$ int pos = 0-->Line_68 $$ pos++[ FD ]
Line_67 $$ while (pos < line.length() && !Character.isWhitespace(c = line.charAt(pos++)) && c != '=' && c != ':') -->Line_71 $$ if (needsEscape && c == '\\') [ CD ]
Line_71 $$ if (needsEscape && c == '\\') -->Line_73 $$ if (pos == line.length()) [ CD ]
Line_50 $$ int pos = 0-->Line_73 $$ if (pos == line.length()) [ FD ]
Line_73 $$ if (pos == line.length()) -->Line_78 $$ reader.readLine()[ CD ]
Line_46 $$ DataInputStream reader = new DataInputStream(inStream)-->Line_78 $$ reader.readLine()[ FD ]
Line_73 $$ if (pos == line.length()) -->Line_79 $$ if (line == null)
    line = "";[ CD ]
Line_73 $$ if (pos == line.length()) -->Line_81 $$ pos = 0[ CD ]
Line_81 $$ pos = 0-->Line_81 $$ pos = 0[ FD ]
Line_50 $$ int pos = 0-->Line_81 $$ pos = 0[ FD ]
Line_73 $$ if (pos == line.length()) -->Line_82 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_73 $$ if (pos == line.length()) -->Line_73 $$ if (pos == line.length()) [ CD ]
Line_83 $$ c = line.charAt(pos)-->Line_83 $$ c = line.charAt(pos)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_83 $$ c = line.charAt(pos)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_83 $$ c = line.charAt(pos)[ FD ]
Line_49 $$ char c = 0-->Line_83 $$ c = line.charAt(pos)[ FD ]
Line_83 $$ c = line.charAt(pos)-->Line_83 $$ line.charAt(pos)[ CD ]
Line_81 $$ pos = 0-->Line_83 $$ line.charAt(pos)[ FD ]
Line_50 $$ int pos = 0-->Line_83 $$ line.charAt(pos)[ FD ]
Line_82 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;-->Line_84 $$ pos++[ CD ]
Line_81 $$ pos = 0-->Line_84 $$ pos++[ FD ]
Line_50 $$ int pos = 0-->Line_84 $$ pos++[ FD ]
Line_73 $$ if (pos == line.length()) -->Line_88 $$ c = line.charAt(pos++)[ CD ]
Line_83 $$ c = line.charAt(pos)-->Line_88 $$ c = line.charAt(pos++)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_88 $$ c = line.charAt(pos++)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_88 $$ c = line.charAt(pos++)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_88 $$ c = line.charAt(pos++)[ FD ]
Line_49 $$ char c = 0-->Line_88 $$ c = line.charAt(pos++)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_88 $$ line.charAt(pos++)[ CD ]
Line_81 $$ pos = 0-->Line_88 $$ pos++[ FD ]
Line_50 $$ int pos = 0-->Line_88 $$ pos++[ FD ]
Line_81 $$ pos = 0-->Line_104 $$ line.substring(pos, pos + 4)[ FD ]
Line_50 $$ int pos = 0-->Line_104 $$ line.substring(pos, pos + 4)[ FD ]
Line_101 $$ if (pos + 4 <= line.length()) -->Line_105 $$ key.append(uni)[ CD ]
Line_101 $$ if (pos + 4 <= line.length()) -->Line_106 $$ pos += 4[ CD ]
Line_81 $$ pos = 0-->Line_106 $$ pos += 4[ FD ]
Line_106 $$ pos += 4-->Line_106 $$ pos += 4[ FD ]
Line_50 $$ int pos = 0-->Line_106 $$ pos += 4[ FD ]
Line_83 $$ c = line.charAt(pos)-->Line_110 $$ key.append(c)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_110 $$ key.append(c)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_110 $$ key.append(c)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_110 $$ key.append(c)[ FD ]
Line_49 $$ char c = 0-->Line_110 $$ key.append(c)[ FD ]
Line_71 $$ if (needsEscape && c == '\\') -->Line_115 $$ if (needsEscape)
    key.append(c);[ CD ]
Line_115 $$ if (needsEscape)
    key.append(c);-->Line_116 $$ key.append(c)[ CD ]
Line_83 $$ c = line.charAt(pos)-->Line_116 $$ key.append(c)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_116 $$ key.append(c)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_116 $$ key.append(c)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_116 $$ key.append(c)[ FD ]
Line_49 $$ char c = 0-->Line_116 $$ key.append(c)[ FD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_122 $$ if (needsEscape)
    keyString = key.toString();
else if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);[ CD ]
Line_122 $$ if (needsEscape)
    keyString = key.toString();
else if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_123 $$ key.toString()[ CD ]
Line_122 $$ if (needsEscape)
    keyString = key.toString();
else if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_124 $$ if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);[ CD ]
Line_124 $$ if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_124 $$ Character.isWhitespace(c)[ CD ]
Line_83 $$ c = line.charAt(pos)-->Line_124 $$ Character.isWhitespace(c)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_124 $$ Character.isWhitespace(c)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_124 $$ Character.isWhitespace(c)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_124 $$ Character.isWhitespace(c)[ FD ]
Line_49 $$ char c = 0-->Line_124 $$ Character.isWhitespace(c)[ FD ]
Line_124 $$ if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_125 $$ line.substring(start, pos - 1)[ CD ]
Line_124 $$ if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_127 $$ line.substring(start, pos)[ CD ]
Line_81 $$ pos = 0-->Line_127 $$ line.substring(start, pos)[ FD ]
Line_106 $$ pos += 4-->Line_127 $$ line.substring(start, pos)[ FD ]
Line_50 $$ int pos = 0-->Line_127 $$ line.substring(start, pos)[ FD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_129 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_47 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_130 $$ c = line.charAt(pos)-->Line_130 $$ c = line.charAt(pos)[ FD ]
Line_83 $$ c = line.charAt(pos)-->Line_130 $$ c = line.charAt(pos)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_130 $$ c = line.charAt(pos)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_130 $$ c = line.charAt(pos)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_130 $$ c = line.charAt(pos)[ FD ]
Line_49 $$ char c = 0-->Line_130 $$ c = line.charAt(pos)[ FD ]
Line_130 $$ c = line.charAt(pos)-->Line_130 $$ line.charAt(pos)[ CD ]
Line_81 $$ pos = 0-->Line_130 $$ line.charAt(pos)[ FD ]
Line_106 $$ pos += 4-->Line_130 $$ line.charAt(pos)[ FD ]
Line_50 $$ int pos = 0-->Line_130 $$ line.charAt(pos)[ FD ]
Line_129 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;-->Line_131 $$ pos++[ CD ]
Line_81 $$ pos = 0-->Line_131 $$ pos++[ FD ]
Line_106 $$ pos += 4-->Line_131 $$ pos++[ FD ]
Line_50 $$ int pos = 0-->Line_131 $$ pos++[ FD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_133 $$ if (!isDelim && (c == ':' || c == '=')) [ CD ]
Line_133 $$ if (!isDelim && (c == ':' || c == '=')) -->Line_135 $$ pos++[ CD ]
Line_81 $$ pos = 0-->Line_135 $$ pos++[ FD ]
Line_106 $$ pos += 4-->Line_135 $$ pos++[ FD ]
Line_50 $$ int pos = 0-->Line_135 $$ pos++[ FD ]
Line_133 $$ if (!isDelim && (c == ':' || c == '=')) -->Line_136 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_133 $$ if (!isDelim && (c == ':' || c == '=')) -->Line_133 $$ if (!isDelim && (c == ':' || c == '=')) [ CD ]
Line_137 $$ c = line.charAt(pos)-->Line_137 $$ c = line.charAt(pos)[ FD ]
Line_130 $$ c = line.charAt(pos)-->Line_137 $$ c = line.charAt(pos)[ FD ]
Line_83 $$ c = line.charAt(pos)-->Line_137 $$ c = line.charAt(pos)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_137 $$ c = line.charAt(pos)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_137 $$ c = line.charAt(pos)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_137 $$ c = line.charAt(pos)[ FD ]
Line_49 $$ char c = 0-->Line_137 $$ c = line.charAt(pos)[ FD ]
Line_137 $$ c = line.charAt(pos)-->Line_137 $$ line.charAt(pos)[ CD ]
Line_81 $$ pos = 0-->Line_137 $$ line.charAt(pos)[ FD ]
Line_106 $$ pos += 4-->Line_137 $$ line.charAt(pos)[ FD ]
Line_50 $$ int pos = 0-->Line_137 $$ line.charAt(pos)[ FD ]
Line_136 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;-->Line_138 $$ pos++[ CD ]
Line_81 $$ pos = 0-->Line_138 $$ pos++[ FD ]
Line_106 $$ pos += 4-->Line_138 $$ pos++[ FD ]
Line_50 $$ int pos = 0-->Line_138 $$ pos++[ FD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_142 $$ if (!needsEscape) [ CD ]
Line_142 $$ if (!needsEscape) -->Line_144 $$ put(keyString, line.substring(pos))[ CD ]
Line_81 $$ pos = 0-->Line_144 $$ line.substring(pos)[ FD ]
Line_106 $$ pos += 4-->Line_144 $$ line.substring(pos)[ FD ]
Line_50 $$ int pos = 0-->Line_144 $$ line.substring(pos)[ FD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_150 $$ while (pos < line.length()) [ CD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_47 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_81 $$ pos = 0-->Line_150 $$ while (pos < line.length()) [ FD ]
Line_106 $$ pos += 4-->Line_150 $$ while (pos < line.length()) [ FD ]
Line_50 $$ int pos = 0-->Line_150 $$ while (pos < line.length()) [ FD ]
Line_150 $$ while (pos < line.length()) -->Line_152 $$ c = line.charAt(pos++)[ CD ]
Line_152 $$ c = line.charAt(pos++)-->Line_152 $$ c = line.charAt(pos++)[ FD ]
Line_137 $$ c = line.charAt(pos)-->Line_152 $$ c = line.charAt(pos++)[ FD ]
Line_130 $$ c = line.charAt(pos)-->Line_152 $$ c = line.charAt(pos++)[ FD ]
Line_83 $$ c = line.charAt(pos)-->Line_152 $$ c = line.charAt(pos++)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_152 $$ c = line.charAt(pos++)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_152 $$ c = line.charAt(pos++)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_152 $$ c = line.charAt(pos++)[ FD ]
Line_49 $$ char c = 0-->Line_152 $$ c = line.charAt(pos++)[ FD ]
Line_152 $$ c = line.charAt(pos++)-->Line_152 $$ line.charAt(pos++)[ CD ]
Line_81 $$ pos = 0-->Line_152 $$ pos++[ FD ]
Line_106 $$ pos += 4-->Line_152 $$ pos++[ FD ]
Line_50 $$ int pos = 0-->Line_152 $$ pos++[ FD ]
Line_150 $$ while (pos < line.length()) -->Line_153 $$ if (c == '\\') [ CD ]
Line_152 $$ c = line.charAt(pos++)-->Line_153 $$ if (c == '\\') [ FD ]
Line_137 $$ c = line.charAt(pos)-->Line_153 $$ if (c == '\\') [ FD ]
Line_130 $$ c = line.charAt(pos)-->Line_153 $$ if (c == '\\') [ FD ]
Line_83 $$ c = line.charAt(pos)-->Line_153 $$ if (c == '\\') [ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_153 $$ if (c == '\\') [ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_153 $$ if (c == '\\') [ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_153 $$ if (c == '\\') [ FD ]
Line_49 $$ char c = 0-->Line_153 $$ if (c == '\\') [ FD ]
Line_153 $$ if (c == '\\') -->Line_155 $$ if (pos == line.length()) [ CD ]
Line_81 $$ pos = 0-->Line_155 $$ if (pos == line.length()) [ FD ]
Line_106 $$ pos += 4-->Line_155 $$ if (pos == line.length()) [ FD ]
Line_50 $$ int pos = 0-->Line_155 $$ if (pos == line.length()) [ FD ]
Line_155 $$ if (pos == line.length()) -->Line_158 $$ reader.readLine()[ CD ]
Line_46 $$ DataInputStream reader = new DataInputStream(inStream)-->Line_158 $$ reader.readLine()[ FD ]
Line_155 $$ if (pos == line.length()) -->Line_163 $$ if (line == null)
    break;[ CD ]
Line_155 $$ if (pos == line.length()) -->Line_166 $$ pos = 0[ CD ]
Line_166 $$ pos = 0-->Line_166 $$ pos = 0[ FD ]
Line_81 $$ pos = 0-->Line_166 $$ pos = 0[ FD ]
Line_106 $$ pos += 4-->Line_166 $$ pos = 0[ FD ]
Line_50 $$ int pos = 0-->Line_166 $$ pos = 0[ FD ]
Line_155 $$ if (pos == line.length()) -->Line_167 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_155 $$ if (pos == line.length()) -->Line_155 $$ if (pos == line.length()) [ CD ]
Line_168 $$ c = line.charAt(pos)-->Line_168 $$ c = line.charAt(pos)[ FD ]
Line_152 $$ c = line.charAt(pos++)-->Line_168 $$ c = line.charAt(pos)[ FD ]
Line_137 $$ c = line.charAt(pos)-->Line_168 $$ c = line.charAt(pos)[ FD ]
Line_130 $$ c = line.charAt(pos)-->Line_168 $$ c = line.charAt(pos)[ FD ]
Line_83 $$ c = line.charAt(pos)-->Line_168 $$ c = line.charAt(pos)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_168 $$ c = line.charAt(pos)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_168 $$ c = line.charAt(pos)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_168 $$ c = line.charAt(pos)[ FD ]
Line_49 $$ char c = 0-->Line_168 $$ c = line.charAt(pos)[ FD ]
Line_168 $$ c = line.charAt(pos)-->Line_168 $$ line.charAt(pos)[ CD ]
Line_166 $$ pos = 0-->Line_168 $$ line.charAt(pos)[ FD ]
Line_81 $$ pos = 0-->Line_168 $$ line.charAt(pos)[ FD ]
Line_106 $$ pos += 4-->Line_168 $$ line.charAt(pos)[ FD ]
Line_50 $$ int pos = 0-->Line_168 $$ line.charAt(pos)[ FD ]
Line_167 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;-->Line_169 $$ pos++[ CD ]
Line_166 $$ pos = 0-->Line_169 $$ pos++[ FD ]
Line_81 $$ pos = 0-->Line_169 $$ pos++[ FD ]
Line_106 $$ pos += 4-->Line_169 $$ pos++[ FD ]
Line_50 $$ int pos = 0-->Line_169 $$ pos++[ FD ]
Line_155 $$ if (pos == line.length()) -->Line_170 $$ element.ensureCapacity(line.length() - pos + element.length())[ CD ]
Line_155 $$ if (pos == line.length()) -->Line_175 $$ c = line.charAt(pos++)[ CD ]
Line_168 $$ c = line.charAt(pos)-->Line_175 $$ c = line.charAt(pos++)[ FD ]
Line_152 $$ c = line.charAt(pos++)-->Line_175 $$ c = line.charAt(pos++)[ FD ]
Line_175 $$ c = line.charAt(pos++)-->Line_175 $$ c = line.charAt(pos++)[ FD ]
Line_137 $$ c = line.charAt(pos)-->Line_175 $$ c = line.charAt(pos++)[ FD ]
Line_130 $$ c = line.charAt(pos)-->Line_175 $$ c = line.charAt(pos++)[ FD ]
Line_83 $$ c = line.charAt(pos)-->Line_175 $$ c = line.charAt(pos++)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_175 $$ c = line.charAt(pos++)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_175 $$ c = line.charAt(pos++)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_175 $$ c = line.charAt(pos++)[ FD ]
Line_49 $$ char c = 0-->Line_175 $$ c = line.charAt(pos++)[ FD ]
Line_175 $$ c = line.charAt(pos++)-->Line_175 $$ line.charAt(pos++)[ CD ]
Line_166 $$ pos = 0-->Line_175 $$ pos++[ FD ]
Line_81 $$ pos = 0-->Line_175 $$ pos++[ FD ]
Line_106 $$ pos += 4-->Line_175 $$ pos++[ FD ]
Line_50 $$ int pos = 0-->Line_175 $$ pos++[ FD ]
Line_166 $$ pos = 0-->Line_191 $$ line.substring(pos, pos + 4)[ FD ]
Line_81 $$ pos = 0-->Line_191 $$ line.substring(pos, pos + 4)[ FD ]
Line_106 $$ pos += 4-->Line_191 $$ line.substring(pos, pos + 4)[ FD ]
Line_50 $$ int pos = 0-->Line_191 $$ line.substring(pos, pos + 4)[ FD ]
Line_188 $$ if (pos + 4 <= line.length()) -->Line_192 $$ element.append(uni)[ CD ]
Line_188 $$ if (pos + 4 <= line.length()) -->Line_193 $$ pos += 4[ CD ]
Line_166 $$ pos = 0-->Line_193 $$ pos += 4[ FD ]
Line_193 $$ pos += 4-->Line_193 $$ pos += 4[ FD ]
Line_81 $$ pos = 0-->Line_193 $$ pos += 4[ FD ]
Line_106 $$ pos += 4-->Line_193 $$ pos += 4[ FD ]
Line_50 $$ int pos = 0-->Line_193 $$ pos += 4[ FD ]
Line_168 $$ c = line.charAt(pos)-->Line_197 $$ element.append(c)[ FD ]
Line_152 $$ c = line.charAt(pos++)-->Line_197 $$ element.append(c)[ FD ]
Line_175 $$ c = line.charAt(pos++)-->Line_197 $$ element.append(c)[ FD ]
Line_137 $$ c = line.charAt(pos)-->Line_197 $$ element.append(c)[ FD ]
Line_130 $$ c = line.charAt(pos)-->Line_197 $$ element.append(c)[ FD ]
Line_83 $$ c = line.charAt(pos)-->Line_197 $$ element.append(c)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_197 $$ element.append(c)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_197 $$ element.append(c)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_197 $$ element.append(c)[ FD ]
Line_49 $$ char c = 0-->Line_197 $$ element.append(c)[ FD ]
Line_153 $$ if (c == '\\') -->Line_203 $$ element.append(c)[ CD ]
Line_168 $$ c = line.charAt(pos)-->Line_203 $$ element.append(c)[ FD ]
Line_152 $$ c = line.charAt(pos++)-->Line_203 $$ element.append(c)[ FD ]
Line_175 $$ c = line.charAt(pos++)-->Line_203 $$ element.append(c)[ FD ]
Line_137 $$ c = line.charAt(pos)-->Line_203 $$ element.append(c)[ FD ]
Line_130 $$ c = line.charAt(pos)-->Line_203 $$ element.append(c)[ FD ]
Line_83 $$ c = line.charAt(pos)-->Line_203 $$ element.append(c)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_203 $$ element.append(c)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_203 $$ element.append(c)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_203 $$ element.append(c)[ FD ]
Line_49 $$ char c = 0-->Line_203 $$ element.append(c)[ FD ]
Line_47 $$ while ((line = reader.readLine()) != null) -->Line_205 $$ put(keyString, element.toString())[ CD ]
Line_0 $$ Entry-->Line_210 $$ public class func [ CD ]
Line_210 $$ public class func -->Line_211 $$ public void run() [ CD ]
Line_211 $$ public void run() -->Line_212 $$ DataInputStream ds = new DataInputStream(serverInput)[ CD ]
Line_211 $$ public void run() -->Line_213 $$ while ((s = ds.readLine()) != null) [ CD ]
Line_211 $$ public void run() -->Line_211 $$ public void run() [ CD ]
Line_212 $$ DataInputStream ds = new DataInputStream(serverInput)-->Line_213 $$ ds.readLine()[ FD ]
Line_213 $$ while ((s = ds.readLine()) != null) -->Line_214 $$ int len = s.length()[ CD ]
Line_214 $$ int len = s.length()-->Line_214 $$ s.length()[ CD ]
Line_213 $$ while ((s = ds.readLine()) != null) -->Line_215 $$ while (len > 0 && s.charAt(len - 1) <= ' ') len--;[ CD ]
Line_213 $$ while ((s = ds.readLine()) != null) -->Line_213 $$ while ((s = ds.readLine()) != null) [ CD ]
Line_215 $$ while (len > 0 && s.charAt(len - 1) <= ' ') len--;-->Line_216 $$ len--[ CD ]
Line_214 $$ int len = s.length()-->Line_216 $$ len--[ FD ]
Line_213 $$ while ((s = ds.readLine()) != null) -->Line_217 $$ if (len <= 0)
    continue;[ CD ]
Line_214 $$ int len = s.length()-->Line_217 $$ if (len <= 0)
    continue;[ FD ]
Line_213 $$ while ((s = ds.readLine()) != null) -->Line_219 $$ s.charAt(0)[ CD ]
Line_213 $$ while ((s = ds.readLine()) != null) -->Line_220 $$ s.indexOf('\t')[ CD ]
Line_213 $$ while ((s = ds.readLine()) != null) -->Line_223 $$ if (t3 < 0) [ CD ]
Line_214 $$ int len = s.length()-->Line_227 $$ s.substring(t3 + 1, len)[ FD ]
Line_213 $$ while ((s = ds.readLine()) != null) -->Line_229 $$ ps.print("<dt><a href=\"gopher://" + host + port + "/" + s.substring(0, 1) + encodePercent(s.substring(t1 + 1, t2)) + "\">\n")[ CD ]
Line_213 $$ while ((s = ds.readLine()) != null) -->Line_231 $$ ps.print("<img align=middle border=0 width=25 height=32 src=")[ CD ]
Line_213 $$ while ((s = ds.readLine()) != null) -->Line_246 $$ ps.print(".gif align=middle><dd>\n")[ CD ]
Line_213 $$ while ((s = ds.readLine()) != null) -->Line_247 $$ ps.print(s.substring(1, t1) + "</a>\n")[ CD ]
Line_211 $$ public void run() -->Line_249 $$ ps.print("</dl></body>\n")[ CD ]
Line_211 $$ public void run() -->Line_250 $$ ps.close()[ CD ]
Line_0 $$ Entry-->Line_254 $$ public class func [ CD ]
Line_254 $$ public class func -->Line_255 $$ public void downloadURL(String theURL) [ CD ]
Line_255 $$ public void downloadURL(String theURL) -->Line_257 $$ u.openStream()[ CD ]
Line_255 $$ public void downloadURL(String theURL) -->Line_259 $$ while ((s = dis.readLine()) != null) sb.append(s + "\n");[ CD ]
Line_255 $$ public void downloadURL(String theURL) -->Line_255 $$ public void downloadURL(String theURL) [ CD ]
Line_259 $$ while ((s = dis.readLine()) != null) sb.append(s + "\n");-->Line_260 $$ sb.append(s + "\n")[ CD ]
Line_255 $$ public void downloadURL(String theURL) -->Line_261 $$ if (is != null)
    is.close();[ CD ]
Line_261 $$ if (is != null)
    is.close();-->Line_262 $$ is.close()[ CD ]
Line_0 $$ Entry-->Line_266 $$ public class func [ CD ]
Line_266 $$ public class func -->Line_267 $$ public void GetNewCards() [ CD ]
Line_267 $$ public void GetNewCards() -->Line_268 $$ url.openConnection()[ CD ]
Line_267 $$ public void GetNewCards() -->Line_269 $$ urlConn.setDoInput(true)[ CD ]
Line_267 $$ public void GetNewCards() -->Line_270 $$ urlConn.setUseCaches(false)[ CD ]
Line_267 $$ public void GetNewCards() -->Line_271 $$ urlConn.addRequestProperty("Cookie", EASW_KEY + ";" + PhishingKey)[ CD ]
Line_267 $$ public void GetNewCards() -->Line_273 $$ while (null != (str = input.readLine())) [ CD ]
Line_267 $$ public void GetNewCards() -->Line_267 $$ public void GetNewCards() [ CD ]
Line_273 $$ while (null != (str = input.readLine())) -->Line_275 $$ returnStr.append(str)[ CD ]
Line_267 $$ public void GetNewCards() -->Line_277 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_281 $$ public class func [ CD ]
Line_281 $$ public class func -->Line_282 $$ public void getTrade(int TradeID) [ CD ]
Line_282 $$ public void getTrade(int TradeID) -->Line_283 $$ url.openConnection()[ CD ]
Line_282 $$ public void getTrade(int TradeID) -->Line_284 $$ urlConn.setDoInput(true)[ CD ]
Line_282 $$ public void getTrade(int TradeID) -->Line_285 $$ urlConn.setUseCaches(false)[ CD ]
Line_282 $$ public void getTrade(int TradeID) -->Line_286 $$ urlConn.addRequestProperty("Cookie", EASW_KEY + ";" + PhishingKey)[ CD ]
Line_282 $$ public void getTrade(int TradeID) -->Line_288 $$ while (null != (str = input.readLine())) [ CD ]
Line_282 $$ public void getTrade(int TradeID) -->Line_282 $$ public void getTrade(int TradeID) [ CD ]
Line_288 $$ while (null != (str = input.readLine())) -->Line_290 $$ returnStr.append(str)[ CD ]
Line_282 $$ public void getTrade(int TradeID) -->Line_292 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_296 $$ public class func [ CD ]
Line_296 $$ public class func -->Line_297 $$ public void getStreamLines(final InputStream is) [ CD ]
Line_297 $$ public void getStreamLines(final InputStream is) -->Line_298 $$ final DataInputStream dis = new DataInputStream(is)[ CD ]
Line_297 $$ public void getStreamLines(final InputStream is) -->Line_299 $$ if (dis.available() > 0) [ CD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_299 $$ dis.available()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_300 $$ dis.readLine()[ FD ]
Line_299 $$ if (dis.available() > 0) -->Line_301 $$ while (dis.available() > 0) [ CD ]
Line_299 $$ if (dis.available() > 0) -->Line_299 $$ if (dis.available() > 0) [ CD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_301 $$ dis.available()[ FD ]
Line_301 $$ while (dis.available() > 0) -->Line_302 $$ buffer.append("\n").append(dis.readLine())[ CD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_302 $$ dis.readLine()[ FD ]
Line_297 $$ public void getStreamLines(final InputStream is) -->Line_305 $$ dis.close()[ CD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_305 $$ dis.close()[ FD ]
Line_0 $$ Entry-->Line_309 $$ public class func [ CD ]
Line_309 $$ public class func -->Line_310 $$ public void getStreamLines(final InputStream is) [ CD ]
Line_310 $$ public void getStreamLines(final InputStream is) -->Line_311 $$ DataInputStream dis = new DataInputStream(is)[ CD ]
Line_310 $$ public void getStreamLines(final InputStream is) -->Line_312 $$ if (dis.available() > 0) [ CD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_312 $$ dis.available()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_312 $$ dis.available()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_314 $$ dis.readLine()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_314 $$ dis.readLine()[ FD ]
Line_312 $$ if (dis.available() > 0) -->Line_315 $$ while (dis.available() > 0) [ CD ]
Line_312 $$ if (dis.available() > 0) -->Line_312 $$ if (dis.available() > 0) [ CD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_315 $$ dis.available()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_315 $$ dis.available()[ FD ]
Line_315 $$ while (dis.available() > 0) -->Line_317 $$ buffer.append('\n').append(dis.readLine())[ CD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_317 $$ dis.readLine()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_317 $$ dis.readLine()[ FD ]
Line_310 $$ public void getStreamLines(final InputStream is) -->Line_320 $$ dis.close()[ CD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_320 $$ dis.close()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_320 $$ dis.close()[ FD ]
Line_0 $$ Entry-->Line_324 $$ public class func [ CD ]
Line_324 $$ public class func -->Line_325 $$ public void movePlayer(String itemID, String pile) [ CD ]
Line_325 $$ public void movePlayer(String itemID, String pile) -->Line_327 $$ while (null != (str = input.readLine())) [ CD ]
Line_325 $$ public void movePlayer(String itemID, String pile) -->Line_325 $$ public void movePlayer(String itemID, String pile) [ CD ]
Line_327 $$ while (null != (str = input.readLine())) -->Line_329 $$ returnStr.append(str)[ CD ]
Line_325 $$ public void movePlayer(String itemID, String pile) -->Line_331 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_335 $$ public class func [ CD ]
Line_335 $$ public class func -->Line_336 $$ public void readLatinOneFileLines(File file) [ CD ]
Line_336 $$ public void readLatinOneFileLines(File file) -->Line_338 $$ while ((str = infile.readLine()) != null) lines.addElement(str);[ CD ]
Line_336 $$ public void readLatinOneFileLines(File file) -->Line_336 $$ public void readLatinOneFileLines(File file) [ CD ]
Line_338 $$ while ((str = infile.readLine()) != null) lines.addElement(str);-->Line_339 $$ lines.addElement(str)[ CD ]
Line_336 $$ public void readLatinOneFileLines(File file) -->Line_340 $$ infile.close()[ CD ]
Line_0 $$ Entry-->Line_344 $$ public class func [ CD ]
Line_344 $$ public class func -->Line_345 $$ public void buyPack(int packId, String payForIt) [ CD ]
Line_345 $$ public void buyPack(int packId, String payForIt) -->Line_347 $$ while (null != (str = input.readLine())) [ CD ]
Line_345 $$ public void buyPack(int packId, String payForIt) -->Line_345 $$ public void buyPack(int packId, String payForIt) [ CD ]
Line_347 $$ while (null != (str = input.readLine())) -->Line_349 $$ returnStr.append(str)[ CD ]
Line_345 $$ public void buyPack(int packId, String payForIt) -->Line_351 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_355 $$ public class func [ CD ]
Line_355 $$ public class func -->Line_356 $$ public void searchTraining(String level, String type, int start, int count, int MaxB) [ CD ]
Line_356 $$ public void searchTraining(String level, String type, int start, int count, int MaxB) -->Line_357 $$ url.openConnection()[ CD ]
Line_356 $$ public void searchTraining(String level, String type, int start, int count, int MaxB) -->Line_358 $$ urlConn.setDoInput(true)[ CD ]
Line_356 $$ public void searchTraining(String level, String type, int start, int count, int MaxB) -->Line_359 $$ urlConn.setUseCaches(false)[ CD ]
Line_356 $$ public void searchTraining(String level, String type, int start, int count, int MaxB) -->Line_360 $$ urlConn.addRequestProperty("Cookie", EASW_KEY + ";" + PhishingKey)[ CD ]
Line_356 $$ public void searchTraining(String level, String type, int start, int count, int MaxB) -->Line_362 $$ while (null != (str = input.readLine())) [ CD ]
Line_356 $$ public void searchTraining(String level, String type, int start, int count, int MaxB) -->Line_356 $$ public void searchTraining(String level, String type, int start, int count, int MaxB) [ CD ]
Line_362 $$ while (null != (str = input.readLine())) -->Line_364 $$ returnStr.append(str)[ CD ]
Line_356 $$ public void searchTraining(String level, String type, int start, int count, int MaxB) -->Line_366 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_370 $$ public class func [ CD ]
Line_370 $$ public class func -->Line_371 $$ public void run() [ CD ]
Line_371 $$ public void run() -->Line_372 $$ DataInputStream in = new DataInputStream(p.getInputStream())[ CD ]
Line_371 $$ public void run() -->Line_373 $$ while ((line = in.readLine()) != null) pw.println(line);[ CD ]
Line_371 $$ public void run() -->Line_371 $$ public void run() [ CD ]
Line_372 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_373 $$ in.readLine()[ FD ]
Line_34 $$ DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_373 $$ in.readLine()[ FD ]
Line_373 $$ while ((line = in.readLine()) != null) pw.println(line);-->Line_374 $$ pw.println(line)[ CD ]
Line_371 $$ public void run() -->Line_375 $$ in.close()[ CD ]
Line_372 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_375 $$ in.close()[ FD ]
Line_34 $$ DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_375 $$ in.close()[ FD ]
Line_0 $$ Entry-->Line_379 $$ public class func [ CD ]
Line_379 $$ public class func -->Line_380 $$ public void buyTokens() [ CD ]
Line_380 $$ public void buyTokens() -->Line_382 $$ while (null != (str = input.readLine())) [ CD ]
Line_380 $$ public void buyTokens() -->Line_380 $$ public void buyTokens() [ CD ]
Line_382 $$ while (null != (str = input.readLine())) -->Line_384 $$ returnStr.append(str)[ CD ]
Line_380 $$ public void buyTokens() -->Line_386 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_390 $$ public class func [ CD ]
Line_390 $$ public class func -->Line_391 $$ public void tradeOffer(int tradeID, int amount, Collection<String> playerIDs) [ CD ]
Line_391 $$ public void tradeOffer(int tradeID, int amount, Collection<String> playerIDs) -->Line_393 $$ while (null != (str = input.readLine())) [ CD ]
Line_391 $$ public void tradeOffer(int tradeID, int amount, Collection<String> playerIDs) -->Line_391 $$ public void tradeOffer(int tradeID, int amount, Collection<String> playerIDs) [ CD ]
Line_393 $$ while (null != (str = input.readLine())) -->Line_395 $$ returnStr.append(str)[ CD ]
Line_391 $$ public void tradeOffer(int tradeID, int amount, Collection<String> playerIDs) -->Line_397 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_401 $$ public class func [ CD ]
Line_401 $$ public class func -->Line_402 $$ public void search(int start, int count, String level, String formation, String position, int nationality, int league, int team, int minBid, int maxBid, int minBIN, int maxBIN) [ CD ]
Line_402 $$ public void search(int start, int count, String level, String formation, String position, int nationality, int league, int team, int minBid, int maxBid, int minBIN, int maxBIN) -->Line_403 $$ url.openConnection()[ CD ]
Line_402 $$ public void search(int start, int count, String level, String formation, String position, int nationality, int league, int team, int minBid, int maxBid, int minBIN, int maxBIN) -->Line_404 $$ urlConn.setDoInput(true)[ CD ]
Line_402 $$ public void search(int start, int count, String level, String formation, String position, int nationality, int league, int team, int minBid, int maxBid, int minBIN, int maxBIN) -->Line_405 $$ urlConn.setUseCaches(false)[ CD ]
Line_402 $$ public void search(int start, int count, String level, String formation, String position, int nationality, int league, int team, int minBid, int maxBid, int minBIN, int maxBIN) -->Line_406 $$ urlConn.addRequestProperty("Cookie", EASW_KEY + ";" + PhishingKey)[ CD ]
Line_402 $$ public void search(int start, int count, String level, String formation, String position, int nationality, int league, int team, int minBid, int maxBid, int minBIN, int maxBIN) -->Line_408 $$ while (null != (str = input.readLine())) [ CD ]
Line_402 $$ public void search(int start, int count, String level, String formation, String position, int nationality, int league, int team, int minBid, int maxBid, int minBIN, int maxBIN) -->Line_402 $$ public void search(int start, int count, String level, String formation, String position, int nationality, int league, int team, int minBid, int maxBid, int minBIN, int maxBIN) [ CD ]
Line_408 $$ while (null != (str = input.readLine())) -->Line_410 $$ returnStr.append(str)[ CD ]
Line_402 $$ public void search(int start, int count, String level, String formation, String position, int nationality, int league, int team, int minBid, int maxBid, int minBIN, int maxBIN) -->Line_412 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_416 $$ public class func [ CD ]
Line_416 $$ public class func -->Line_417 $$ public void buy(int tradeID, int amount, String playerName) [ CD ]
Line_417 $$ public void buy(int tradeID, int amount, String playerName) -->Line_419 $$ while (null != (str = input.readLine())) [ CD ]
Line_417 $$ public void buy(int tradeID, int amount, String playerName) -->Line_417 $$ public void buy(int tradeID, int amount, String playerName) [ CD ]
Line_419 $$ while (null != (str = input.readLine())) -->Line_421 $$ returnStr.append(str)[ CD ]
Line_417 $$ public void buy(int tradeID, int amount, String playerName) -->Line_423 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_427 $$ public class func [ CD ]
Line_427 $$ public class func -->Line_428 $$ public void postTrade(String itemID, int startBid, int buyNow, int duration) [ CD ]
Line_428 $$ public void postTrade(String itemID, int startBid, int buyNow, int duration) -->Line_430 $$ while (null != (str = input.readLine())) [ CD ]
Line_428 $$ public void postTrade(String itemID, int startBid, int buyNow, int duration) -->Line_428 $$ public void postTrade(String itemID, int startBid, int buyNow, int duration) [ CD ]
Line_430 $$ while (null != (str = input.readLine())) -->Line_432 $$ returnStr.append(str)[ CD ]
Line_428 $$ public void postTrade(String itemID, int startBid, int buyNow, int duration) -->Line_434 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_438 $$ public class func [ CD ]
Line_438 $$ public class func -->Line_439 $$ public void main(String[] args) [ CD ]
Line_439 $$ public void main(String[] args) -->Line_440 $$ FileInputStream inputFile = new FileInputStream(kms.filename)[ CD ]
Line_439 $$ public void main(String[] args) -->Line_441 $$ while ((n = inputFile.read(b)) != -1) [ CD ]
Line_439 $$ public void main(String[] args) -->Line_439 $$ public void main(String[] args) [ CD ]
Line_440 $$ FileInputStream inputFile = new FileInputStream(kms.filename)-->Line_441 $$ inputFile.read(b)[ FD ]
Line_441 $$ while ((n = inputFile.read(b)) != -1) -->Line_442 $$ for (int i = 0; i < n; i++) [ CD ]
Line_441 $$ while ((n = inputFile.read(b)) != -1) -->Line_441 $$ while ((n = inputFile.read(b)) != -1) [ CD ]
Line_442 $$ for (int i = 0; i < n; i++) -->Line_442 $$ int i = 0[ CD ]
Line_442 $$ for (int i = 0; i < n; i++) -->Line_442 $$ i++[ CD ]
Line_442 $$ int i = 0-->Line_442 $$ i++[ FD ]
Line_442 $$ for (int i = 0; i < n; i++) -->Line_443 $$ if (b[i] == '\n')
    numObjects++;[ CD ]
Line_439 $$ public void main(String[] args) -->Line_447 $$ inputFile.close()[ CD ]
Line_440 $$ FileInputStream inputFile = new FileInputStream(kms.filename)-->Line_447 $$ inputFile.close()[ FD ]
Line_439 $$ public void main(String[] args) -->Line_448 $$ inputFile = new FileInputStream(kms.filename)[ CD ]
Line_440 $$ FileInputStream inputFile = new FileInputStream(kms.filename)-->Line_448 $$ inputFile = new FileInputStream(kms.filename)[ FD ]
Line_448 $$ inputFile = new FileInputStream(kms.filename)-->Line_448 $$ inputFile = new FileInputStream(kms.filename)[ FD ]
Line_439 $$ public void main(String[] args) -->Line_449 $$ if ((line = new DataInputStream(inputFile).readLine()) != null) [ CD ]
Line_449 $$ if ((line = new DataInputStream(inputFile).readLine()) != null) -->Line_450 $$ int index = 0[ CD ]
Line_449 $$ if ((line = new DataInputStream(inputFile).readLine()) != null) -->Line_451 $$ boolean prevWhiteSpace = true[ CD ]
Line_449 $$ if ((line = new DataInputStream(inputFile).readLine()) != null) -->Line_452 $$ while (index < line.length()) [ CD ]
Line_449 $$ if ((line = new DataInputStream(inputFile).readLine()) != null) -->Line_449 $$ if ((line = new DataInputStream(inputFile).readLine()) != null) [ CD ]
Line_450 $$ int index = 0-->Line_452 $$ while (index < line.length()) [ FD ]
Line_452 $$ while (index < line.length()) -->Line_453 $$ char c = line.charAt(index++)[ CD ]
Line_453 $$ char c = line.charAt(index++)-->Line_453 $$ line.charAt(index++)[ CD ]
Line_450 $$ int index = 0-->Line_453 $$ index++[ FD ]
Line_452 $$ while (index < line.length()) -->Line_454 $$ boolean currWhiteSpace = Character.isWhitespace(c)[ CD ]
Line_454 $$ boolean currWhiteSpace = Character.isWhitespace(c)-->Line_454 $$ Character.isWhitespace(c)[ CD ]
Line_453 $$ char c = line.charAt(index++)-->Line_454 $$ Character.isWhitespace(c)[ FD ]
Line_168 $$ c = line.charAt(pos)-->Line_454 $$ Character.isWhitespace(c)[ FD ]
Line_152 $$ c = line.charAt(pos++)-->Line_454 $$ Character.isWhitespace(c)[ FD ]
Line_175 $$ c = line.charAt(pos++)-->Line_454 $$ Character.isWhitespace(c)[ FD ]
Line_137 $$ c = line.charAt(pos)-->Line_454 $$ Character.isWhitespace(c)[ FD ]
Line_130 $$ c = line.charAt(pos)-->Line_454 $$ Character.isWhitespace(c)[ FD ]
Line_83 $$ c = line.charAt(pos)-->Line_454 $$ Character.isWhitespace(c)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_454 $$ Character.isWhitespace(c)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_454 $$ Character.isWhitespace(c)[ FD ]
Line_53 $$ c = line.charAt(pos)-->Line_454 $$ Character.isWhitespace(c)[ FD ]
Line_49 $$ char c = 0-->Line_454 $$ Character.isWhitespace(c)[ FD ]
Line_452 $$ while (index < line.length()) -->Line_455 $$ if (prevWhiteSpace && !currWhiteSpace) [ CD ]
Line_451 $$ boolean prevWhiteSpace = true-->Line_455 $$ if (prevWhiteSpace && !currWhiteSpace) [ FD ]
Line_454 $$ boolean currWhiteSpace = Character.isWhitespace(c)-->Line_455 $$ !currWhiteSpace[ FD ]
Line_452 $$ while (index < line.length()) -->Line_458 $$ prevWhiteSpace = currWhiteSpace[ CD ]
Line_458 $$ prevWhiteSpace = currWhiteSpace-->Line_458 $$ prevWhiteSpace = currWhiteSpace[ FD ]
Line_451 $$ boolean prevWhiteSpace = true-->Line_458 $$ prevWhiteSpace = currWhiteSpace[ FD ]
Line_454 $$ boolean currWhiteSpace = Character.isWhitespace(c)-->Line_458 $$ prevWhiteSpace = currWhiteSpace[ FD ]
Line_439 $$ public void main(String[] args) -->Line_461 $$ inputFile.close()[ CD ]
Line_440 $$ FileInputStream inputFile = new FileInputStream(kms.filename)-->Line_461 $$ inputFile.close()[ FD ]
Line_448 $$ inputFile = new FileInputStream(kms.filename)-->Line_461 $$ inputFile.close()[ FD ]
Line_439 $$ public void main(String[] args) -->Line_462 $$ KMeans.readFromFile(inputFile, kms.filename, buf, MAX_LINE_LENGTH)[ CD ]
Line_440 $$ FileInputStream inputFile = new FileInputStream(kms.filename)-->Line_462 $$ KMeans.readFromFile(inputFile, kms.filename, buf, MAX_LINE_LENGTH)[ FD ]
Line_448 $$ inputFile = new FileInputStream(kms.filename)-->Line_462 $$ KMeans.readFromFile(inputFile, kms.filename, buf, MAX_LINE_LENGTH)[ FD ]
Line_0 $$ Entry-->Line_466 $$ public class func [ CD ]
Line_466 $$ public class func -->Line_467 $$ public void doFileUpload(String file_path) [ CD ]
Line_467 $$ public void doFileUpload(String file_path) -->Line_469 $$ while ((str = inStream.readLine()) != null) [ CD ]
Line_467 $$ public void doFileUpload(String file_path) -->Line_467 $$ public void doFileUpload(String file_path) [ CD ]
Line_469 $$ while ((str = inStream.readLine()) != null) -->Line_470 $$ Log.e("doFileUpload", "Server Response" + str)[ CD ]
Line_467 $$ public void doFileUpload(String file_path) -->Line_472 $$ inStream.close()[ CD ]
Line_0 $$ Entry-->Line_476 $$ public class func [ CD ]
Line_476 $$ public class func -->Line_477 $$ public void run() [ CD ]
Line_477 $$ public void run() -->Line_478 $$ DataInputStream input = new DataInputStream(connection.getInputStream())[ CD ]
Line_477 $$ public void run() -->Line_479 $$ while (null != ((response = input.readLine()))) [ CD ]
Line_477 $$ public void run() -->Line_477 $$ public void run() [ CD ]
Line_478 $$ DataInputStream input = new DataInputStream(connection.getInputStream())-->Line_479 $$ input.readLine()[ FD ]
Line_479 $$ while (null != ((response = input.readLine()))) -->Line_480 $$ System.err.println(response)[ CD ]
Line_477 $$ public void run() -->Line_482 $$ input.close()[ CD ]
Line_478 $$ DataInputStream input = new DataInputStream(connection.getInputStream())-->Line_482 $$ input.close()[ FD ]
Line_0 $$ Entry-->Line_486 $$ public class func [ CD ]
Line_486 $$ public class func -->Line_487 $$ public void runJavah() [ CD ]
Line_487 $$ public void runJavah() -->Line_488 $$ DataInputStream in = new DataInputStream(p.getInputStream())[ CD ]
Line_487 $$ public void runJavah() -->Line_489 $$ while ((line = in.readLine()) != null) System.err.println(line);[ CD ]
Line_487 $$ public void runJavah() -->Line_487 $$ public void runJavah() [ CD ]
Line_488 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_489 $$ in.readLine()[ FD ]
Line_372 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_489 $$ in.readLine()[ FD ]
Line_34 $$ DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_489 $$ in.readLine()[ FD ]
Line_489 $$ while ((line = in.readLine()) != null) System.err.println(line);-->Line_490 $$ System.err.println(line)[ CD ]
Line_487 $$ public void runJavah() -->Line_491 $$ in.close()[ CD ]
Line_488 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_491 $$ in.close()[ FD ]
Line_372 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_491 $$ in.close()[ FD ]
Line_34 $$ DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_491 $$ in.close()[ FD ]
Line_0 $$ Entry-->Line_495 $$ public class func [ CD ]
Line_495 $$ public class func -->Line_496 $$ public void readLegacySites(InputStream input) [ CD ]
Line_496 $$ public void readLegacySites(InputStream input) -->Line_497 $$ DataInputStream dis = new DataInputStream(input)[ CD ]
Line_496 $$ public void readLegacySites(InputStream input) -->Line_498 $$ while ((line = dis.readLine()) != null) [ CD ]
Line_496 $$ public void readLegacySites(InputStream input) -->Line_496 $$ public void readLegacySites(InputStream input) [ CD ]
Line_497 $$ DataInputStream dis = new DataInputStream(input)-->Line_498 $$ dis.readLine()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_498 $$ dis.readLine()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_498 $$ dis.readLine()[ FD ]
Line_498 $$ while ((line = dis.readLine()) != null) -->Line_499 $$ int eq = line.indexOf('=')[ CD ]
Line_499 $$ int eq = line.indexOf('=')-->Line_499 $$ line.indexOf('=')[ CD ]
Line_498 $$ while ((line = dis.readLine()) != null) -->Line_500 $$ if (eq != -1) [ CD ]
Line_499 $$ int eq = line.indexOf('=')-->Line_500 $$ if (eq != -1) [ FD ]
Line_500 $$ if (eq != -1) -->Line_501 $$ String name = line.substring(0, eq)[ CD ]
Line_501 $$ String name = line.substring(0, eq)-->Line_501 $$ line.substring(0, eq)[ CD ]
Line_499 $$ int eq = line.indexOf('=')-->Line_501 $$ line.substring(0, eq)[ FD ]
Line_500 $$ if (eq != -1) -->Line_502 $$ String url = line.substring(eq + 1)[ CD ]
Line_502 $$ String url = line.substring(eq + 1)-->Line_502 $$ line.substring(eq + 1)[ CD ]
Line_500 $$ if (eq != -1) -->Line_503 $$ if (Util.isValidURL(url)) [ CD ]
Line_502 $$ String url = line.substring(eq + 1)-->Line_503 $$ if (Util.isValidURL(url)) [ FD ]
Line_503 $$ if (Util.isValidURL(url)) -->Line_503 $$ Util.isValidURL(url)[ CD ]
Line_502 $$ String url = line.substring(eq + 1)-->Line_503 $$ Util.isValidURL(url)[ FD ]
Line_503 $$ if (Util.isValidURL(url)) -->Line_504 $$ sites.add(new Subscription(name, url))[ CD ]
Line_503 $$ if (Util.isValidURL(url)) -->Line_506 $$ TraceUtil.report(new RuntimeException("invalid URL in line: '" + line + "'; URL was: " + url))[ CD ]
Line_500 $$ if (eq != -1) -->Line_510 $$ TraceUtil.report(new RuntimeException("missing equals in line: " + line))[ CD ]
Line_0 $$ Entry-->Line_516 $$ public class func [ CD ]
Line_516 $$ public class func -->Line_517 $$ public void readMaze(String inputFileName) [ CD ]
Line_517 $$ public void readMaze(String inputFileName) -->Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) [ CD ]
Line_517 $$ public void readMaze(String inputFileName) -->Line_517 $$ public void readMaze(String inputFileName) [ CD ]
Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_520 $$ String code[ CD ]
Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_521 $$ int[] xy = new int[6][ CD ]
Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_522 $$ int numToken = 0[ CD ]
Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_524 $$ StringTokenizer tok = new StringTokenizer(line)[ CD ]
Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_526 $$ if ((numToken = tok.countTokens()) < 1) [ CD ]
Line_522 $$ int numToken = 0-->Line_526 $$ numToken = tok.countTokens()[ FD ]
Line_526 $$ numToken = tok.countTokens()-->Line_526 $$ numToken = tok.countTokens()[ FD ]
Line_526 $$ numToken = tok.countTokens()-->Line_526 $$ tok.countTokens()[ CD ]
Line_524 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_526 $$ tok.countTokens()[ FD ]
Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_530 $$ code = tok.nextToken()[ CD ]
Line_520 $$ String code-->Line_530 $$ code = tok.nextToken()[ FD ]
Line_530 $$ code = tok.nextToken()-->Line_530 $$ code = tok.nextToken()[ FD ]
Line_530 $$ code = tok.nextToken()-->Line_530 $$ tok.nextToken()[ CD ]
Line_524 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_530 $$ tok.nextToken()[ FD ]
Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_532 $$ if (code.equals("#")) [ CD ]
Line_520 $$ String code-->Line_532 $$ if (code.equals("#")) [ FD ]
Line_530 $$ code = tok.nextToken()-->Line_532 $$ if (code.equals("#")) [ FD ]
Line_532 $$ if (code.equals("#")) -->Line_532 $$ code.equals("#")[ CD ]
Line_520 $$ String code-->Line_532 $$ code.equals("#")[ FD ]
Line_530 $$ code = tok.nextToken()-->Line_532 $$ code.equals("#")[ FD ]
Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_536 $$ for (int i = 0; i < numToken - 1; i++) [ CD ]
Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) [ CD ]
Line_442 $$ int i = 0-->Line_536 $$ for (int i = 0; i < numToken - 1; i++) [ FD ]
Line_536 $$ for (int i = 0; i < numToken - 1; i++) -->Line_536 $$ int i = 0[ CD ]
Line_536 $$ for (int i = 0; i < numToken - 1; i++) -->Line_536 $$ i++[ CD ]
Line_536 $$ int i = 0-->Line_536 $$ i++[ FD ]
Line_442 $$ int i = 0-->Line_536 $$ i++[ FD ]
Line_536 $$ for (int i = 0; i < numToken - 1; i++) -->Line_537 $$ xy[i] = Integer.parseInt(tok.nextToken())[ CD ]
Line_537 $$ xy[i] = Integer.parseInt(tok.nextToken())-->Line_537 $$ Integer.parseInt(tok.nextToken())[ CD ]
Line_524 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_537 $$ tok.nextToken()[ FD ]
Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_540 $$ if (code.equals("d")) [ CD ]
Line_520 $$ String code-->Line_540 $$ if (code.equals("d")) [ FD ]
Line_530 $$ code = tok.nextToken()-->Line_540 $$ if (code.equals("d")) [ FD ]
Line_540 $$ if (code.equals("d")) -->Line_540 $$ code.equals("d")[ CD ]
Line_520 $$ String code-->Line_540 $$ code.equals("d")[ FD ]
Line_530 $$ code = tok.nextToken()-->Line_540 $$ code.equals("d")[ FD ]
Line_540 $$ if (code.equals("d")) -->Line_542 $$ if (numToken != 4) [ CD ]
Line_522 $$ int numToken = 0-->Line_542 $$ if (numToken != 4) [ FD ]
Line_526 $$ numToken = tok.countTokens()-->Line_542 $$ if (numToken != 4) [ FD ]
Line_542 $$ if (numToken != 4) -->Line_549 $$ if (width < 1 || height < 1 || depth < 1)
    isParseError = true;[ CD ]
Line_540 $$ if (code.equals("d")) -->Line_552 $$ if (code.equals("p")) [ CD ]
Line_520 $$ String code-->Line_552 $$ if (code.equals("p")) [ FD ]
Line_530 $$ code = tok.nextToken()-->Line_552 $$ if (code.equals("p")) [ FD ]
Line_552 $$ if (code.equals("p")) -->Line_552 $$ code.equals("p")[ CD ]
Line_520 $$ String code-->Line_552 $$ code.equals("p")[ FD ]
Line_530 $$ code = tok.nextToken()-->Line_552 $$ code.equals("p")[ FD ]
Line_552 $$ if (code.equals("p")) -->Line_553 $$ if (numToken != 7) [ CD ]
Line_522 $$ int numToken = 0-->Line_553 $$ if (numToken != 7) [ FD ]
Line_526 $$ numToken = tok.countTokens()-->Line_553 $$ if (numToken != 7) [ FD ]
Line_553 $$ if (numToken != 7) -->Line_557 $$ Coordinate.alloc(xy[0], xy[1], xy[2])[ CD ]
Line_553 $$ if (numToken != 7) -->Line_558 $$ Coordinate.alloc(xy[3], xy[4], xy[5])[ CD ]
Line_553 $$ if (numToken != 7) -->Line_560 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) [ CD ]
Line_560 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_560 $$ Coordinate.isEqual(srcPtr, dstPtr)[ CD ]
Line_560 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_564 $$ Pair.alloc(srcPtr, dstPtr)[ CD ]
Line_560 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_565 $$ workListPtr.insert(coordinatePairPtr)[ CD ]
Line_560 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_566 $$ srcVectorPtr.vector_pushBack(srcPtr)[ CD ]
Line_560 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_567 $$ dstVectorPtr.vector_pushBack(dstPtr)[ CD ]
Line_552 $$ if (code.equals("p")) -->Line_571 $$ if (code.equals("w")) [ CD ]
Line_520 $$ String code-->Line_571 $$ if (code.equals("w")) [ FD ]
Line_530 $$ code = tok.nextToken()-->Line_571 $$ if (code.equals("w")) [ FD ]
Line_571 $$ if (code.equals("w")) -->Line_571 $$ code.equals("w")[ CD ]
Line_520 $$ String code-->Line_571 $$ code.equals("w")[ FD ]
Line_530 $$ code = tok.nextToken()-->Line_571 $$ code.equals("w")[ FD ]
Line_571 $$ if (code.equals("w")) -->Line_573 $$ if (numToken != 4) [ CD ]
Line_522 $$ int numToken = 0-->Line_573 $$ if (numToken != 4) [ FD ]
Line_526 $$ numToken = tok.countTokens()-->Line_573 $$ if (numToken != 4) [ FD ]
Line_573 $$ if (numToken != 4) -->Line_576 $$ Coordinate.alloc(xy[0], xy[1], xy[2])[ CD ]
Line_573 $$ if (numToken != 4) -->Line_577 $$ wallVectorPtr.vector_pushBack(wallPtr)[ CD ]
Line_518 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_583 $$ if (isParseError) [ CD ]
Line_583 $$ if (isParseError) -->Line_584 $$ System.out.println("Error: line " + lineNumber + " of " + inputFileName + "invalid")[ CD ]
Line_583 $$ if (isParseError) -->Line_585 $$ System.exit(1)[ CD ]
Line_517 $$ public void readMaze(String inputFileName) -->Line_588 $$ in.close()[ CD ]
Line_488 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_588 $$ in.close()[ FD ]
Line_372 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_588 $$ in.close()[ FD ]
Line_34 $$ DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_588 $$ in.close()[ FD ]
Line_0 $$ Entry-->Line_592 $$ public class func [ CD ]
Line_592 $$ public class func -->Line_593 $$ public void readConfiguration(File file) [ CD ]
Line_593 $$ public void readConfiguration(File file) -->Line_597 $$ while (dis.available() != 0) [ CD ]
Line_593 $$ public void readConfiguration(File file) -->Line_593 $$ public void readConfiguration(File file) [ CD ]
Line_497 $$ DataInputStream dis = new DataInputStream(input)-->Line_597 $$ dis.available()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_597 $$ dis.available()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_597 $$ dis.available()[ FD ]
Line_597 $$ while (dis.available() != 0) -->Line_601 $$ buff.append(dis.readLine()).append("\n")[ CD ]
Line_497 $$ DataInputStream dis = new DataInputStream(input)-->Line_601 $$ dis.readLine()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_601 $$ dis.readLine()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_601 $$ dis.readLine()[ FD ]
Line_593 $$ public void readConfiguration(File file) -->Line_603 $$ fis.close()[ CD ]
Line_0 $$ Entry-->Line_607 $$ public class func [ CD ]
Line_607 $$ public class func -->Line_608 $$ public void readAsString(String filename, String newLineString) [ CD ]
Line_608 $$ public void readAsString(String filename, String newLineString) -->Line_609 $$ File file = new File(filename)[ CD ]
Line_608 $$ public void readAsString(String filename, String newLineString) -->Line_610 $$ FileInputStream fis = new FileInputStream(file)[ CD ]
Line_608 $$ public void readAsString(String filename, String newLineString) -->Line_611 $$ BufferedInputStream bis = new BufferedInputStream(fis)[ CD ]
Line_608 $$ public void readAsString(String filename, String newLineString) -->Line_612 $$ DataInputStream dis = new DataInputStream(bis)[ CD ]
Line_608 $$ public void readAsString(String filename, String newLineString) -->Line_613 $$ while (dis.available() != 0) [ CD ]
Line_608 $$ public void readAsString(String filename, String newLineString) -->Line_608 $$ public void readAsString(String filename, String newLineString) [ CD ]
Line_612 $$ DataInputStream dis = new DataInputStream(bis)-->Line_613 $$ dis.available()[ FD ]
Line_497 $$ DataInputStream dis = new DataInputStream(input)-->Line_613 $$ dis.available()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_613 $$ dis.available()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_613 $$ dis.available()[ FD ]
Line_613 $$ while (dis.available() != 0) -->Line_614 $$ sb.append((new StringBuilder()).append(dis.readLine()).append(newLineString))[ CD ]
Line_612 $$ DataInputStream dis = new DataInputStream(bis)-->Line_614 $$ dis.readLine()[ FD ]
Line_497 $$ DataInputStream dis = new DataInputStream(input)-->Line_614 $$ dis.readLine()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_614 $$ dis.readLine()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_614 $$ dis.readLine()[ FD ]
Line_608 $$ public void readAsString(String filename, String newLineString) -->Line_616 $$ fis.close()[ CD ]
Line_610 $$ FileInputStream fis = new FileInputStream(file)-->Line_616 $$ fis.close()[ FD ]
Line_0 $$ Entry-->Line_620 $$ public class func [ CD ]
Line_620 $$ public class func -->Line_621 $$ public void loadMeta(File current) [ CD ]
Line_621 $$ public void loadMeta(File current) -->Line_622 $$ if (order.exists()) [ CD ]
Line_622 $$ if (order.exists()) -->Line_622 $$ order.exists()[ CD ]
Line_626 $$ line = dis.readLine()-->Line_626 $$ line = dis.readLine()[ FD ]
Line_625 $$ String line = null-->Line_626 $$ line = dis.readLine()[ FD ]
Line_626 $$ line = dis.readLine()-->Line_626 $$ dis.readLine()[ CD ]
Line_624 $$ DataInputStream dis = new DataInputStream(new FileInputStream(order))-->Line_626 $$ dis.readLine()[ FD ]
Line_612 $$ DataInputStream dis = new DataInputStream(bis)-->Line_626 $$ dis.readLine()[ FD ]
Line_497 $$ DataInputStream dis = new DataInputStream(input)-->Line_626 $$ dis.readLine()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_626 $$ dis.readLine()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_626 $$ dis.readLine()[ FD ]
Line_626 $$ while ((line = dis.readLine()) != null) -->Line_627 $$ File file = config.getPodcastRootPath(line)[ CD ]
Line_627 $$ File file = config.getPodcastRootPath(line)-->Line_627 $$ config.getPodcastRootPath(line)[ CD ]
Line_626 $$ line = dis.readLine()-->Line_627 $$ config.getPodcastRootPath(line)[ FD ]
Line_625 $$ String line = null-->Line_627 $$ config.getPodcastRootPath(line)[ FD ]
Line_626 $$ while ((line = dis.readLine()) != null) -->Line_628 $$ if (file.exists()) [ CD ]
Line_627 $$ File file = config.getPodcastRootPath(line)-->Line_628 $$ if (file.exists()) [ FD ]
Line_609 $$ File file = new File(filename)-->Line_628 $$ if (file.exists()) [ FD ]
Line_628 $$ if (file.exists()) -->Line_628 $$ file.exists()[ CD ]
Line_627 $$ File file = config.getPodcastRootPath(line)-->Line_628 $$ file.exists()[ FD ]
Line_609 $$ File file = new File(filename)-->Line_628 $$ file.exists()[ FD ]
Line_628 $$ if (file.exists()) -->Line_629 $$ metas.add(new MetaFile(file))[ CD ]
Line_628 $$ if (file.exists()) -->Line_630 $$ if (currentName != null && currentName.equals(file.getName())) [ CD ]
Line_627 $$ File file = config.getPodcastRootPath(line)-->Line_630 $$ file.getName()[ FD ]
Line_609 $$ File file = new File(filename)-->Line_630 $$ file.getName()[ FD ]
Line_630 $$ if (currentName != null && currentName.equals(file.getName())) -->Line_633 $$ Log.d("CarCast", "currentIndex: " + currentIndex)[ CD ]
Line_0 $$ Entry-->Line_644 $$ public class func [ CD ]
Line_644 $$ public class func -->Line_645 $$ public void isUrlReachable(String url) [ CD ]
Line_645 $$ public void isUrlReachable(String url) -->Line_647 $$ downloadUrl.openStream()[ CD ]
Line_645 $$ public void isUrlReachable(String url) -->Line_649 $$ while (dataInputStream.readLine() != null) [ CD ]
Line_645 $$ public void isUrlReachable(String url) -->Line_645 $$ public void isUrlReachable(String url) [ CD ]
Line_649 $$ while (dataInputStream.readLine() != null) -->Line_650 $$ return true;[ CD ]
Line_0 $$ Entry-->Line_655 $$ public class func [ CD ]
Line_655 $$ public class func -->Line_656 $$ public void read(String filename) [ CD ]
Line_656 $$ public void read(String filename) -->Line_657 $$ File file = new File(filename)[ CD ]
Line_656 $$ public void read(String filename) -->Line_658 $$ FileInputStream fis = new FileInputStream(file)[ CD ]
Line_656 $$ public void read(String filename) -->Line_659 $$ BufferedInputStream bis = new BufferedInputStream(fis)[ CD ]
Line_656 $$ public void read(String filename) -->Line_660 $$ DataInputStream dis = new DataInputStream(bis)[ CD ]
Line_656 $$ public void read(String filename) -->Line_661 $$ while (dis.available() != 0) [ CD ]
Line_656 $$ public void read(String filename) -->Line_656 $$ public void read(String filename) [ CD ]
Line_660 $$ DataInputStream dis = new DataInputStream(bis)-->Line_661 $$ dis.available()[ FD ]
Line_624 $$ DataInputStream dis = new DataInputStream(new FileInputStream(order))-->Line_661 $$ dis.available()[ FD ]
Line_612 $$ DataInputStream dis = new DataInputStream(bis)-->Line_661 $$ dis.available()[ FD ]
Line_497 $$ DataInputStream dis = new DataInputStream(input)-->Line_661 $$ dis.available()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_661 $$ dis.available()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_661 $$ dis.available()[ FD ]
Line_661 $$ while (dis.available() != 0) -->Line_662 $$ output.add(dis.readLine())[ CD ]
Line_660 $$ DataInputStream dis = new DataInputStream(bis)-->Line_662 $$ dis.readLine()[ FD ]
Line_624 $$ DataInputStream dis = new DataInputStream(new FileInputStream(order))-->Line_662 $$ dis.readLine()[ FD ]
Line_612 $$ DataInputStream dis = new DataInputStream(bis)-->Line_662 $$ dis.readLine()[ FD ]
Line_497 $$ DataInputStream dis = new DataInputStream(input)-->Line_662 $$ dis.readLine()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_662 $$ dis.readLine()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_662 $$ dis.readLine()[ FD ]
Line_656 $$ public void read(String filename) -->Line_664 $$ fis.close()[ CD ]
Line_658 $$ FileInputStream fis = new FileInputStream(file)-->Line_664 $$ fis.close()[ FD ]
Line_610 $$ FileInputStream fis = new FileInputStream(file)-->Line_664 $$ fis.close()[ FD ]
Line_0 $$ Entry-->Line_668 $$ public class func [ CD ]
Line_668 $$ public class func -->Line_669 $$ public void main(String[] args) [ CD ]
Line_669 $$ public void main(String[] args) -->Line_670 $$ FileInputStream fis = new FileInputStream(args[0])[ CD ]
Line_669 $$ public void main(String[] args) -->Line_671 $$ DataInputStream dis = new DataInputStream(fis)[ CD ]
Line_669 $$ public void main(String[] args) -->Line_672 $$ while ((line = dis.readLine()) != null) [ CD ]
Line_669 $$ public void main(String[] args) -->Line_669 $$ public void main(String[] args) [ CD ]
Line_671 $$ DataInputStream dis = new DataInputStream(fis)-->Line_672 $$ dis.readLine()[ FD ]
Line_660 $$ DataInputStream dis = new DataInputStream(bis)-->Line_672 $$ dis.readLine()[ FD ]
Line_624 $$ DataInputStream dis = new DataInputStream(new FileInputStream(order))-->Line_672 $$ dis.readLine()[ FD ]
Line_612 $$ DataInputStream dis = new DataInputStream(bis)-->Line_672 $$ dis.readLine()[ FD ]
Line_497 $$ DataInputStream dis = new DataInputStream(input)-->Line_672 $$ dis.readLine()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_672 $$ dis.readLine()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_672 $$ dis.readLine()[ FD ]
Line_672 $$ while ((line = dis.readLine()) != null) -->Line_673 $$ if (isWindows) [ CD ]
Line_673 $$ if (isWindows) -->Line_674 $$ line.replace('/', File.separatorChar)[ CD ]
Line_626 $$ line = dis.readLine()-->Line_674 $$ line.replace('/', File.separatorChar)[ FD ]
Line_625 $$ String line = null-->Line_674 $$ line.replace('/', File.separatorChar)[ FD ]
Line_672 $$ while ((line = dis.readLine()) != null) -->Line_676 $$ roots.add(line)[ CD ]
Line_626 $$ line = dis.readLine()-->Line_676 $$ roots.add(line)[ FD ]
Line_625 $$ String line = null-->Line_676 $$ roots.add(line)[ FD ]
Line_0 $$ Entry-->Line_681 $$ public class func [ CD ]
Line_681 $$ public class func -->Line_682 $$ public void connect() [ CD ]
Line_682 $$ public void connect() -->Line_684 $$ while (null != ((str = input.readLine()))) [ CD ]
Line_682 $$ public void connect() -->Line_682 $$ public void connect() [ CD ]
Line_478 $$ DataInputStream input = new DataInputStream(connection.getInputStream())-->Line_684 $$ input.readLine()[ FD ]
Line_682 $$ public void connect() -->Line_687 $$ Map<String, List<String>> cm = urlConn.getHeaderFields()[ CD ]
Line_687 $$ Map<String, List<String>> cm = urlConn.getHeaderFields()-->Line_687 $$ urlConn.getHeaderFields()[ CD ]
Line_682 $$ public void connect() -->Line_688 $$ List<String> cl = cm.get("Set-Cookie")[ CD ]
Line_688 $$ List<String> cl = cm.get("Set-Cookie")-->Line_688 $$ cm.get("Set-Cookie")[ CD ]
Line_687 $$ Map<String, List<String>> cm = urlConn.getHeaderFields()-->Line_688 $$ cm.get("Set-Cookie")[ FD ]
Line_0 $$ Entry-->Line_692 $$ public class func [ CD ]
Line_692 $$ public class func -->Line_693 $$ public void readNotify() [ CD ]
Line_693 $$ public void readNotify() -->Line_694 $$ DataInputStream din = new DataInputStream(in)[ CD ]
Line_693 $$ public void readNotify() -->Line_695 $$ while ((line = din.readLine()) != null) message += line + lineSeparator;[ CD ]
Line_693 $$ public void readNotify() -->Line_693 $$ public void readNotify() [ CD ]
Line_694 $$ DataInputStream din = new DataInputStream(in)-->Line_695 $$ din.readLine()[ FD ]
Line_0 $$ Entry-->Line_700 $$ public class func [ CD ]
Line_700 $$ public class func -->Line_701 $$ public void exec(Tuple input) [ CD ]
Line_701 $$ public void exec(Tuple input) -->Line_702 $$ DataInputStream in = fs.open(new Path(lookupFile))[ CD ]
Line_702 $$ DataInputStream in = fs.open(new Path(lookupFile))-->Line_702 $$ fs.open(new Path(lookupFile))[ CD ]
Line_701 $$ public void exec(Tuple input) -->Line_703 $$ while ((line = in.readLine()) != null) [ CD ]
Line_701 $$ public void exec(Tuple input) -->Line_701 $$ public void exec(Tuple input) [ CD ]
Line_702 $$ DataInputStream in = fs.open(new Path(lookupFile))-->Line_703 $$ in.readLine()[ FD ]
Line_488 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_703 $$ in.readLine()[ FD ]
Line_372 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_703 $$ in.readLine()[ FD ]
Line_34 $$ DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_703 $$ in.readLine()[ FD ]
Line_703 $$ while ((line = in.readLine()) != null) -->Line_704 $$ String[] toks = new String[2][ CD ]
Line_703 $$ while ((line = in.readLine()) != null) -->Line_705 $$ toks = line.split(":", 2)[ CD ]
Line_704 $$ String[] toks = new String[2]-->Line_705 $$ toks = line.split(":", 2)[ FD ]
Line_705 $$ toks = line.split(":", 2)-->Line_705 $$ toks = line.split(":", 2)[ FD ]
Line_705 $$ toks = line.split(":", 2)-->Line_705 $$ line.split(":", 2)[ CD ]
Line_626 $$ line = dis.readLine()-->Line_705 $$ line.split(":", 2)[ FD ]
Line_625 $$ String line = null-->Line_705 $$ line.split(":", 2)[ FD ]
Line_703 $$ while ((line = in.readLine()) != null) -->Line_706 $$ lookup.put(toks[0], toks[1])[ CD ]
Line_701 $$ public void exec(Tuple input) -->Line_708 $$ in.close()[ CD ]
Line_702 $$ DataInputStream in = fs.open(new Path(lookupFile))-->Line_708 $$ in.close()[ FD ]
Line_488 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_708 $$ in.close()[ FD ]
Line_372 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_708 $$ in.close()[ FD ]
Line_34 $$ DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_708 $$ in.close()[ FD ]
Line_0 $$ Entry-->Line_712 $$ public class func [ CD ]
Line_712 $$ public class func -->Line_713 $$ public void addFile(File qf) [ CD ]
Line_713 $$ public void addFile(File qf) -->Line_714 $$ while (dis.available() != 0) [ CD ]
Line_713 $$ public void addFile(File qf) -->Line_713 $$ public void addFile(File qf) [ CD ]
Line_671 $$ DataInputStream dis = new DataInputStream(fis)-->Line_714 $$ dis.available()[ FD ]
Line_660 $$ DataInputStream dis = new DataInputStream(bis)-->Line_714 $$ dis.available()[ FD ]
Line_624 $$ DataInputStream dis = new DataInputStream(new FileInputStream(order))-->Line_714 $$ dis.available()[ FD ]
Line_612 $$ DataInputStream dis = new DataInputStream(bis)-->Line_714 $$ dis.available()[ FD ]
Line_497 $$ DataInputStream dis = new DataInputStream(input)-->Line_714 $$ dis.available()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_714 $$ dis.available()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_714 $$ dis.available()[ FD ]
Line_714 $$ while (dis.available() != 0) -->Line_715 $$ qsb.append(dis.readLine() + "\n")[ CD ]
Line_671 $$ DataInputStream dis = new DataInputStream(fis)-->Line_715 $$ dis.readLine()[ FD ]
Line_660 $$ DataInputStream dis = new DataInputStream(bis)-->Line_715 $$ dis.readLine()[ FD ]
Line_624 $$ DataInputStream dis = new DataInputStream(new FileInputStream(order))-->Line_715 $$ dis.readLine()[ FD ]
Line_612 $$ DataInputStream dis = new DataInputStream(bis)-->Line_715 $$ dis.readLine()[ FD ]
Line_497 $$ DataInputStream dis = new DataInputStream(input)-->Line_715 $$ dis.readLine()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_715 $$ dis.readLine()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_715 $$ dis.readLine()[ FD ]
Line_713 $$ public void addFile(File qf) -->Line_717 $$ qMap.put(qf.getName(), qsb.toString())[ CD ]
Line_0 $$ Entry-->Line_721 $$ public class func [ CD ]
Line_721 $$ public class func -->Line_722 $$ public void ThemeMap(File file) [ CD ]
Line_722 $$ public void ThemeMap(File file) -->Line_723 $$ while (dataStream.available() != 0) [ CD ]
Line_722 $$ public void ThemeMap(File file) -->Line_722 $$ public void ThemeMap(File file) [ CD ]
Line_723 $$ while (dataStream.available() != 0) -->Line_724 $$ lines.add(dataStream.readLine())[ CD ]
Line_722 $$ public void ThemeMap(File file) -->Line_726 $$ fileStream.close()[ CD ]
Line_0 $$ Entry-->Line_730 $$ public class func [ CD ]
Line_730 $$ public class func -->Line_731 $$ public void upload(String file, String server, final String fileKey, final String fileName, final String mimeType, JSONObject params, boolean trustEveryone) [ CD ]
Line_731 $$ public void upload(String file, String server, final String fileKey, final String fileName, final String mimeType, JSONObject params, boolean trustEveryone) -->Line_732 $$ while ((line = inStream.readLine()) != null) [ CD ]
Line_731 $$ public void upload(String file, String server, final String fileKey, final String fileName, final String mimeType, JSONObject params, boolean trustEveryone) -->Line_731 $$ public void upload(String file, String server, final String fileKey, final String fileName, final String mimeType, JSONObject params, boolean trustEveryone) [ CD ]
Line_732 $$ while ((line = inStream.readLine()) != null) -->Line_733 $$ responseString.append(line)[ CD ]
Line_626 $$ line = dis.readLine()-->Line_733 $$ responseString.append(line)[ FD ]
Line_625 $$ String line = null-->Line_733 $$ responseString.append(line)[ FD ]
Line_731 $$ public void upload(String file, String server, final String fileKey, final String fileName, final String mimeType, JSONObject params, boolean trustEveryone) -->Line_735 $$ System.out.println(responseString.toString())[ CD ]
Line_0 $$ Entry-->Line_739 $$ public class func [ CD ]
Line_739 $$ public class func -->Line_740 $$ public void getHadoopMultiUsersList() [ CD ]
Line_740 $$ public void getHadoopMultiUsersList() -->Line_741 $$ while ((strLine = disObj.readLine()) != null) [ CD ]
Line_740 $$ public void getHadoopMultiUsersList() -->Line_740 $$ public void getHadoopMultiUsersList() [ CD ]
Line_741 $$ while ((strLine = disObj.readLine()) != null) -->Line_742 $$ usersList.add(strLine.substring(0, strLine.indexOf(',')))[ CD ]
Line_0 $$ Entry-->Line_747 $$ public class func [ CD ]
Line_747 $$ public class func -->Line_748 $$ public void ping(String hostname) [ CD ]
Line_748 $$ public void ping(String hostname) -->Line_749 $$ while ((line = stdout.readLine()) != null) [ CD ]
Line_748 $$ public void ping(String hostname) -->Line_748 $$ public void ping(String hostname) [ CD ]
Line_749 $$ while ((line = stdout.readLine()) != null) -->Line_751 $$ tmr.cancel()[ CD ]
Line_749 $$ while ((line = stdout.readLine()) != null) -->Line_752 $$ process.destroy()[ CD ]
Line_749 $$ while ((line = stdout.readLine()) != null) -->Line_753 $$ return pingResult;[ CD ]
Line_748 $$ public void ping(String hostname) -->Line_755 $$ process.waitFor()[ CD ]
Line_0 $$ Entry-->Line_759 $$ public class func [ CD ]
Line_759 $$ public class func -->Line_760 $$ public void testReadSpeed(File f) [ CD ]
Line_760 $$ public void testReadSpeed(File f) -->Line_761 $$ while (dis.readLine() != null) [ CD ]
Line_760 $$ public void testReadSpeed(File f) -->Line_760 $$ public void testReadSpeed(File f) [ CD ]
Line_671 $$ DataInputStream dis = new DataInputStream(fis)-->Line_761 $$ dis.readLine()[ FD ]
Line_660 $$ DataInputStream dis = new DataInputStream(bis)-->Line_761 $$ dis.readLine()[ FD ]
Line_624 $$ DataInputStream dis = new DataInputStream(new FileInputStream(order))-->Line_761 $$ dis.readLine()[ FD ]
Line_612 $$ DataInputStream dis = new DataInputStream(bis)-->Line_761 $$ dis.readLine()[ FD ]
Line_497 $$ DataInputStream dis = new DataInputStream(input)-->Line_761 $$ dis.readLine()[ FD ]
Line_311 $$ DataInputStream dis = new DataInputStream(is)-->Line_761 $$ dis.readLine()[ FD ]
Line_298 $$ final DataInputStream dis = new DataInputStream(is)-->Line_761 $$ dis.readLine()[ FD ]
Line_0 $$ Entry-->Line_766 $$ public class func [ CD ]
Line_766 $$ public class func -->Line_767 $$ public void run() [ CD ]
Line_767 $$ public void run() -->Line_768 $$ while (((line = in.readLine()) != null) && !line.equals(".") && isRunning()) [ CD ]
Line_767 $$ public void run() -->Line_767 $$ public void run() [ CD ]
Line_702 $$ DataInputStream in = fs.open(new Path(lookupFile))-->Line_768 $$ in.readLine()[ FD ]
Line_488 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_768 $$ in.readLine()[ FD ]
Line_372 $$ DataInputStream in = new DataInputStream(p.getInputStream())-->Line_768 $$ in.readLine()[ FD ]
Line_34 $$ DataInputStream in = new DataInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_768 $$ in.readLine()[ FD ]
Line_768 $$ !line.equals(".")-->Line_768 $$ line.equals(".")[ CD ]
Line_626 $$ line = dis.readLine()-->Line_768 $$ line.equals(".")[ FD ]
Line_625 $$ String line = null-->Line_768 $$ line.equals(".")[ FD ]
Line_768 $$ while (((line = in.readLine()) != null) && !line.equals(".") && isRunning()) -->Line_769 $$ System.out.println("Readed from socket: " + line)[ CD ]
Line_768 $$ while (((line = in.readLine()) != null) && !line.equals(".") && isRunning()) -->Line_770 $$ parseInput(line)[ CD ]
Line_626 $$ line = dis.readLine()-->Line_770 $$ parseInput(line)[ FD ]
Line_625 $$ String line = null-->Line_770 $$ parseInput(line)[ FD ]
Line_767 $$ public void run() -->Line_772 $$ System.out.println("Closing socket connection " + server.getInetAddress())[ CD ]
Line_767 $$ public void run() -->Line_773 $$ server.close()[ CD ]
Line_0 $$ Entry-->Line_777 $$ public class func [ CD ]
Line_777 $$ public class func -->Line_778 $$ public void runAsRoot(String command) [ CD ]
Line_778 $$ public void runAsRoot(String command) -->Line_779 $$ String line = new String()[ CD ]
Line_778 $$ public void runAsRoot(String command) -->Line_780 $$ while ((line = is.readLine()) != null) [ CD ]
Line_778 $$ public void runAsRoot(String command) -->Line_778 $$ public void runAsRoot(String command) [ CD ]
Line_780 $$ line = is.readLine()-->Line_780 $$ line = is.readLine()[ FD ]
Line_779 $$ String line = new String()-->Line_780 $$ line = is.readLine()[ FD ]
Line_626 $$ line = dis.readLine()-->Line_780 $$ line = is.readLine()[ FD ]
Line_625 $$ String line = null-->Line_780 $$ line = is.readLine()[ FD ]
Line_780 $$ line = is.readLine()-->Line_780 $$ is.readLine()[ CD ]
Line_0 $$ Entry-->Line_786 $$ public class func [ CD ]
Line_786 $$ public class func -->Line_787 $$ public void launchFromInstalledGosu(String jarLoc, String strProgram) [ CD ]
Line_787 $$ public void launchFromInstalledGosu(String jarLoc, String strProgram) -->Line_788 $$ while ((strLine = errIn.readLine()) != null) [ CD ]
Line_787 $$ public void launchFromInstalledGosu(String jarLoc, String strProgram) -->Line_787 $$ public void launchFromInstalledGosu(String jarLoc, String strProgram) [ CD ]
Line_788 $$ while ((strLine = errIn.readLine()) != null) -->Line_789 $$ writer.write(strLine + "\n")[ CD ]
Line_787 $$ public void launchFromInstalledGosu(String jarLoc, String strProgram) -->Line_791 $$ writer.flush()[ CD ]
Line_787 $$ public void launchFromInstalledGosu(String jarLoc, String strProgram) -->Line_792 $$ writer.close()[ CD ]
Line_50 $$ int pos = 0-->Line_58 $$ line.charAt(pos)[ FD ]
Line_50 $$ int pos = 0-->Line_58 $$ line.charAt(pos)[ FD ]
Line_50 $$ int pos = 0-->Line_65 $$ line.indexOf('\\', pos)[ FD ]
Line_49 $$ char c = 0-->Line_124 $$ Character.isWhitespace(c)[ FD ]
Line_50 $$ int pos = 0-->Line_127 $$ line.substring(start, pos)[ FD ]
Line_50 $$ int pos = 0-->Line_135 $$ pos++[ FD ]
Line_50 $$ int pos = 0-->Line_144 $$ line.substring(pos)[ FD ]
Line_81 $$ pos = 0-->Line_68 $$ pos++[ FD ]
Line_106 $$ pos += 4-->Line_68 $$ pos++[ FD ]
Line_81 $$ pos = 0-->Line_73 $$ if (pos == line.length()) [ FD ]
Line_106 $$ pos += 4-->Line_73 $$ if (pos == line.length()) [ FD ]
Line_81 $$ pos = 0-->Line_88 $$ pos++[ FD ]
Line_106 $$ pos += 4-->Line_88 $$ pos++[ FD ]
Line_81 $$ pos = 0-->Line_104 $$ line.substring(pos, pos + 4)[ FD ]
Line_106 $$ pos += 4-->Line_104 $$ line.substring(pos, pos + 4)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_110 $$ key.append(c)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_110 $$ key.append(c)[ FD ]
Line_68 $$ c = line.charAt(pos++)-->Line_116 $$ key.append(c)[ FD ]
Line_88 $$ c = line.charAt(pos++)-->Line_116 $$ key.append(c)[ FD ]
Line_166 $$ pos = 0-->Line_150 $$ while (pos < line.length()) [ FD ]
Line_193 $$ pos += 4-->Line_150 $$ while (pos < line.length()) [ FD ]
Line_166 $$ pos = 0-->Line_150 $$ while (pos < line.length()) [ FD ]
Line_193 $$ pos += 4-->Line_150 $$ while (pos < line.length()) [ FD ]
Line_166 $$ pos = 0-->Line_152 $$ pos++[ FD ]
Line_193 $$ pos += 4-->Line_152 $$ pos++[ FD ]
Line_152 $$ c = line.charAt(pos++)-->Line_153 $$ if (c == '\\') [ FD ]
Line_175 $$ c = line.charAt(pos++)-->Line_153 $$ if (c == '\\') [ FD ]
Line_166 $$ pos = 0-->Line_155 $$ if (pos == line.length()) [ FD ]
Line_193 $$ pos += 4-->Line_155 $$ if (pos == line.length()) [ FD ]
Line_166 $$ pos = 0-->Line_175 $$ pos++[ FD ]
Line_193 $$ pos += 4-->Line_175 $$ pos++[ FD ]
Line_166 $$ pos = 0-->Line_191 $$ line.substring(pos, pos + 4)[ FD ]
Line_193 $$ pos += 4-->Line_191 $$ line.substring(pos, pos + 4)[ FD ]
Line_152 $$ c = line.charAt(pos++)-->Line_197 $$ element.append(c)[ FD ]
Line_175 $$ c = line.charAt(pos++)-->Line_197 $$ element.append(c)[ FD ]
Line_152 $$ c = line.charAt(pos++)-->Line_203 $$ element.append(c)[ FD ]
Line_175 $$ c = line.charAt(pos++)-->Line_203 $$ element.append(c)[ FD ]
Line_214 $$ int len = s.length()-->Line_217 $$ if (len <= 0)
    continue;[ FD ]
Line_214 $$ int len = s.length()-->Line_227 $$ s.substring(t3 + 1, len)[ FD ]
Line_442 $$ int i = 0-->Line_442 $$ for (int i = 0; i < n; i++) [ FD ]
Line_442 $$ int i = 0-->Line_442 $$ for (int i = 0; i < n; i++) [ FD ]
Line_442 $$ int i = 0-->Line_442 $$ i++[ FD ]
Line_453 $$ char c = line.charAt(index++)-->Line_454 $$ Character.isWhitespace(c)[ FD ]
Line_458 $$ prevWhiteSpace = currWhiteSpace-->Line_455 $$ if (prevWhiteSpace && !currWhiteSpace) [ FD ]
Line_454 $$ boolean currWhiteSpace = Character.isWhitespace(c)-->Line_455 $$ !currWhiteSpace[ FD ]
Line_454 $$ boolean currWhiteSpace = Character.isWhitespace(c)-->Line_458 $$ prevWhiteSpace = currWhiteSpace[ FD ]
Line_499 $$ int eq = line.indexOf('=')-->Line_500 $$ if (eq != -1) [ FD ]
Line_499 $$ int eq = line.indexOf('=')-->Line_501 $$ line.substring(0, eq)[ FD ]
Line_502 $$ String url = line.substring(eq + 1)-->Line_503 $$ if (Util.isValidURL(url)) [ FD ]
Line_502 $$ String url = line.substring(eq + 1)-->Line_503 $$ Util.isValidURL(url)[ FD ]
Line_524 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_526 $$ tok.countTokens()[ FD ]
Line_524 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_530 $$ tok.nextToken()[ FD ]
Line_520 $$ String code-->Line_532 $$ if (code.equals("#")) [ FD ]
Line_530 $$ code = tok.nextToken()-->Line_532 $$ if (code.equals("#")) [ FD ]
Line_520 $$ String code-->Line_532 $$ code.equals("#")[ FD ]
Line_530 $$ code = tok.nextToken()-->Line_532 $$ code.equals("#")[ FD ]
Line_520 $$ String code-->Line_540 $$ if (code.equals("d")) [ FD ]
Line_530 $$ code = tok.nextToken()-->Line_540 $$ if (code.equals("d")) [ FD ]
Line_520 $$ String code-->Line_540 $$ code.equals("d")[ FD ]
Line_530 $$ code = tok.nextToken()-->Line_540 $$ code.equals("d")[ FD ]
Line_522 $$ int numToken = 0-->Line_542 $$ if (numToken != 4) [ FD ]
Line_526 $$ numToken = tok.countTokens()-->Line_542 $$ if (numToken != 4) [ FD ]
Line_520 $$ String code-->Line_552 $$ if (code.equals("p")) [ FD ]
Line_530 $$ code = tok.nextToken()-->Line_552 $$ if (code.equals("p")) [ FD ]
Line_520 $$ String code-->Line_552 $$ code.equals("p")[ FD ]
Line_530 $$ code = tok.nextToken()-->Line_552 $$ code.equals("p")[ FD ]
Line_522 $$ int numToken = 0-->Line_553 $$ if (numToken != 7) [ FD ]
Line_526 $$ numToken = tok.countTokens()-->Line_553 $$ if (numToken != 7) [ FD ]
Line_520 $$ String code-->Line_571 $$ if (code.equals("w")) [ FD ]
Line_530 $$ code = tok.nextToken()-->Line_571 $$ if (code.equals("w")) [ FD ]
Line_520 $$ String code-->Line_571 $$ code.equals("w")[ FD ]
Line_530 $$ code = tok.nextToken()-->Line_571 $$ code.equals("w")[ FD ]
Line_522 $$ int numToken = 0-->Line_573 $$ if (numToken != 4) [ FD ]
Line_526 $$ numToken = tok.countTokens()-->Line_573 $$ if (numToken != 4) [ FD ]
Line_536 $$ int i = 0-->Line_536 $$ for (int i = 0; i < numToken - 1; i++) [ FD ]
Line_536 $$ int i = 0-->Line_536 $$ for (int i = 0; i < numToken - 1; i++) [ FD ]
Line_536 $$ int i = 0-->Line_536 $$ i++[ FD ]
Line_626 $$ line = dis.readLine()-->Line_627 $$ config.getPodcastRootPath(line)[ FD ]
Line_627 $$ File file = config.getPodcastRootPath(line)-->Line_628 $$ if (file.exists()) [ FD ]
Line_627 $$ File file = config.getPodcastRootPath(line)-->Line_628 $$ file.exists()[ FD ]
Line_627 $$ File file = config.getPodcastRootPath(line)-->Line_630 $$ file.getName()[ FD ]
