Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) [ CD ]
Line_3 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_4 $$ String line = dis.readLine().trim()[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_4 $$ dis.readLine().trim()[ CD ]
Line_3 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_5 $$ if (line.length() == 0)
    continue;[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_5 $$ line.length()[ FD ]
Line_3 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_7 $$ if (line.equals("exit")) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_7 $$ if (line.equals("exit")) [ FD ]
Line_7 $$ if (line.equals("exit")) -->Line_7 $$ line.equals("exit")[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_7 $$ line.equals("exit")[ FD ]
Line_3 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_10 $$ if (line.equals("help")) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_10 $$ if (line.equals("help")) [ FD ]
Line_10 $$ if (line.equals("help")) -->Line_10 $$ line.equals("help")[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_10 $$ line.equals("help")[ FD ]
Line_10 $$ if (line.equals("help")) -->Line_11 $$ consoleOut.println("Remote paths start with a colon (:).")[ CD ]
Line_10 $$ if (line.equals("help")) -->Line_12 $$ consoleOut.println()[ CD ]
Line_10 $$ if (line.equals("help")) -->Line_13 $$ consoleOut.println("Create directory: +localdir")[ CD ]
Line_10 $$ if (line.equals("help")) -->Line_14 $$ consoleOut.println("                  +:remotedir")[ CD ]
Line_10 $$ if (line.equals("help")) -->Line_15 $$ consoleOut.println("List directory: localdir")[ CD ]
Line_10 $$ if (line.equals("help")) -->Line_16 $$ consoleOut.println("                :remotedir")[ CD ]
Line_10 $$ if (line.equals("help")) -->Line_17 $$ consoleOut.println("Delete file/directory: -localfile")[ CD ]
Line_10 $$ if (line.equals("help")) -->Line_18 $$ consoleOut.println("                       -:remotefile")[ CD ]
Line_10 $$ if (line.equals("help")) -->Line_19 $$ consoleOut.println("Copy file: localfile -> localfile")[ CD ]
Line_10 $$ if (line.equals("help")) -->Line_20 $$ consoleOut.println("           localfile -> :remotefile")[ CD ]
Line_10 $$ if (line.equals("help")) -->Line_21 $$ consoleOut.println("           :remotefile -> localfile")[ CD ]
Line_10 $$ if (line.equals("help")) -->Line_22 $$ consoleOut.println("           :remotefile -> :remotefile")[ CD ]
Line_10 $$ if (line.equals("help")) -->Line_24 $$ if (line.startsWith("+")) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_24 $$ if (line.startsWith("+")) [ FD ]
Line_24 $$ if (line.startsWith("+")) -->Line_24 $$ line.startsWith("+")[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_24 $$ line.startsWith("+")[ FD ]
Line_24 $$ if (line.startsWith("+")) -->Line_26 $$ line = line.substring(1)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_26 $$ line = line.substring(1)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_26 $$ line = line.substring(1)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_26 $$ line.substring(1)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_26 $$ line.substring(1)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_26 $$ line.substring(1)[ FD ]
Line_24 $$ if (line.startsWith("+")) -->Line_27 $$ if (line.startsWith("-")) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_27 $$ if (line.startsWith("-")) [ FD ]
Line_26 $$ line = line.substring(1)-->Line_27 $$ if (line.startsWith("-")) [ FD ]
Line_27 $$ if (line.startsWith("-")) -->Line_27 $$ line.startsWith("-")[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_27 $$ line.startsWith("-")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_27 $$ line.startsWith("-")[ FD ]
Line_27 $$ if (line.startsWith("-")) -->Line_29 $$ line = line.substring(1)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_29 $$ line = line.substring(1)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_29 $$ line = line.substring(1)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_29 $$ line = line.substring(1)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_29 $$ line.substring(1)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_29 $$ line.substring(1)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_29 $$ line.substring(1)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_29 $$ line.substring(1)[ FD ]
Line_27 $$ if (line.startsWith("-")) -->Line_30 $$ if (line.indexOf(" -> ") != -1) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_30 $$ line.indexOf(" -> ")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_30 $$ line.indexOf(" -> ")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_30 $$ line.indexOf(" -> ")[ FD ]
Line_30 $$ if (line.indexOf(" -> ") != -1) -->Line_31 $$ int pos = line.indexOf(" -> ")[ CD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_31 $$ line.indexOf(" -> ")[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_31 $$ line.indexOf(" -> ")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_31 $$ line.indexOf(" -> ")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_31 $$ line.indexOf(" -> ")[ FD ]
Line_30 $$ if (line.indexOf(" -> ") != -1) -->Line_32 $$ String source = line.substring(0, pos).trim()[ CD ]
Line_32 $$ String source = line.substring(0, pos).trim()-->Line_32 $$ line.substring(0, pos).trim()[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_32 $$ line.substring(0, pos)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_32 $$ line.substring(0, pos)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_32 $$ line.substring(0, pos)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_32 $$ line.substring(0, pos)[ FD ]
Line_30 $$ if (line.indexOf(" -> ") != -1) -->Line_33 $$ String dest = line.substring(pos + 4).trim()[ CD ]
Line_33 $$ String dest = line.substring(pos + 4).trim()-->Line_33 $$ line.substring(pos + 4).trim()[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_33 $$ line.substring(pos + 4)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_33 $$ line.substring(pos + 4)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_33 $$ line.substring(pos + 4)[ FD ]
Line_30 $$ if (line.indexOf(" -> ") != -1) -->Line_34 $$ int sourcetarget = 0, desttarget = 0[ CD ]
Line_30 $$ if (line.indexOf(" -> ") != -1) -->Line_35 $$ if (source.startsWith(":")) [ CD ]
Line_32 $$ String source = line.substring(0, pos).trim()-->Line_35 $$ if (source.startsWith(":")) [ FD ]
Line_35 $$ if (source.startsWith(":")) -->Line_35 $$ source.startsWith(":")[ CD ]
Line_32 $$ String source = line.substring(0, pos).trim()-->Line_35 $$ source.startsWith(":")[ FD ]
Line_35 $$ if (source.startsWith(":")) -->Line_36 $$ sourcetarget = 1[ CD ]
Line_34 $$ int sourcetarget = 0, desttarget = 0-->Line_36 $$ sourcetarget = 1[ FD ]
Line_36 $$ sourcetarget = 1-->Line_36 $$ sourcetarget = 1[ FD ]
Line_35 $$ if (source.startsWith(":")) -->Line_37 $$ source = source.substring(1)[ CD ]
Line_32 $$ String source = line.substring(0, pos).trim()-->Line_37 $$ source = source.substring(1)[ FD ]
Line_37 $$ source = source.substring(1)-->Line_37 $$ source = source.substring(1)[ FD ]
Line_37 $$ source = source.substring(1)-->Line_37 $$ source.substring(1)[ CD ]
Line_32 $$ String source = line.substring(0, pos).trim()-->Line_37 $$ source.substring(1)[ FD ]
Line_37 $$ source = source.substring(1)-->Line_37 $$ source.substring(1)[ FD ]
Line_30 $$ if (line.indexOf(" -> ") != -1) -->Line_39 $$ if (dest.startsWith(":")) [ CD ]
Line_33 $$ String dest = line.substring(pos + 4).trim()-->Line_39 $$ if (dest.startsWith(":")) [ FD ]
Line_39 $$ if (dest.startsWith(":")) -->Line_39 $$ dest.startsWith(":")[ CD ]
Line_33 $$ String dest = line.substring(pos + 4).trim()-->Line_39 $$ dest.startsWith(":")[ FD ]
Line_39 $$ if (dest.startsWith(":")) -->Line_40 $$ desttarget = 1[ CD ]
Line_34 $$ int sourcetarget = 0, desttarget = 0-->Line_40 $$ desttarget = 1[ FD ]
Line_40 $$ desttarget = 1-->Line_40 $$ desttarget = 1[ FD ]
Line_39 $$ if (dest.startsWith(":")) -->Line_41 $$ dest = dest.substring(1)[ CD ]
Line_33 $$ String dest = line.substring(pos + 4).trim()-->Line_41 $$ dest = dest.substring(1)[ FD ]
Line_41 $$ dest = dest.substring(1)-->Line_41 $$ dest = dest.substring(1)[ FD ]
Line_41 $$ dest = dest.substring(1)-->Line_41 $$ dest.substring(1)[ CD ]
Line_33 $$ String dest = line.substring(pos + 4).trim()-->Line_41 $$ dest.substring(1)[ FD ]
Line_41 $$ dest = dest.substring(1)-->Line_41 $$ dest.substring(1)[ FD ]
Line_30 $$ if (line.indexOf(" -> ") != -1) -->Line_43 $$ if (sourcetarget == desttarget) [ CD ]
Line_34 $$ int sourcetarget = 0, desttarget = 0-->Line_43 $$ if (sourcetarget == desttarget) [ FD ]
Line_36 $$ sourcetarget = 1-->Line_43 $$ if (sourcetarget == desttarget) [ FD ]
Line_34 $$ int sourcetarget = 0, desttarget = 0-->Line_43 $$ if (sourcetarget == desttarget) [ FD ]
Line_40 $$ desttarget = 1-->Line_43 $$ if (sourcetarget == desttarget) [ FD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_44 $$ stageOut[desttarget].writeByte(javapayload.stage.JCp.JCP_CP_LOCAL)[ CD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_45 $$ stageOut[desttarget].writeUTF(source)[ CD ]
Line_32 $$ String source = line.substring(0, pos).trim()-->Line_45 $$ stageOut[desttarget].writeUTF(source)[ FD ]
Line_37 $$ source = source.substring(1)-->Line_45 $$ stageOut[desttarget].writeUTF(source)[ FD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_46 $$ stageOut[desttarget].writeUTF(dest)[ CD ]
Line_33 $$ String dest = line.substring(pos + 4).trim()-->Line_46 $$ stageOut[desttarget].writeUTF(dest)[ FD ]
Line_41 $$ dest = dest.substring(1)-->Line_46 $$ stageOut[desttarget].writeUTF(dest)[ FD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_47 $$ stageOut[desttarget].flush()[ CD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_48 $$ consoleOut.println(stageIn[desttarget].readUTF())[ CD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_50 $$ stageOut[sourcetarget].writeByte(javapayload.stage.JCp.JCP_CP_SEND)[ CD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_51 $$ stageOut[sourcetarget].writeUTF(source)[ CD ]
Line_32 $$ String source = line.substring(0, pos).trim()-->Line_51 $$ stageOut[sourcetarget].writeUTF(source)[ FD ]
Line_37 $$ source = source.substring(1)-->Line_51 $$ stageOut[sourcetarget].writeUTF(source)[ FD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_52 $$ stageOut[sourcetarget].flush()[ CD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_53 $$ long length = stageIn[sourcetarget].readLong()[ CD ]
Line_53 $$ long length = stageIn[sourcetarget].readLong()-->Line_53 $$ stageIn[sourcetarget].readLong()[ CD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_54 $$ stageOut[desttarget].writeByte(javapayload.stage.JCp.JCP_CP_RECV)[ CD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_55 $$ stageOut[desttarget].writeUTF(dest)[ CD ]
Line_33 $$ String dest = line.substring(pos + 4).trim()-->Line_55 $$ stageOut[desttarget].writeUTF(dest)[ FD ]
Line_41 $$ dest = dest.substring(1)-->Line_55 $$ stageOut[desttarget].writeUTF(dest)[ FD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_56 $$ stageOut[desttarget].writeLong(length)[ CD ]
Line_53 $$ long length = stageIn[sourcetarget].readLong()-->Line_56 $$ stageOut[desttarget].writeLong(length)[ FD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_57 $$ javapayload.stage.JCp.forwardLimited(stageIn[sourcetarget], stageOut[desttarget], length)[ CD ]
Line_53 $$ long length = stageIn[sourcetarget].readLong()-->Line_57 $$ javapayload.stage.JCp.forwardLimited(stageIn[sourcetarget], stageOut[desttarget], length)[ FD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_58 $$ stageOut[desttarget].flush()[ CD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_59 $$ consoleOut.println(stageIn[sourcetarget].readUTF())[ CD ]
Line_43 $$ if (sourcetarget == desttarget) -->Line_60 $$ consoleOut.println(stageIn[desttarget].readUTF())[ CD ]
Line_3 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_66 $$ if (line.startsWith(":")) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_66 $$ if (line.startsWith(":")) [ FD ]
Line_26 $$ line = line.substring(1)-->Line_66 $$ if (line.startsWith(":")) [ FD ]
Line_29 $$ line = line.substring(1)-->Line_66 $$ if (line.startsWith(":")) [ FD ]
Line_66 $$ if (line.startsWith(":")) -->Line_66 $$ line.startsWith(":")[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_66 $$ line.startsWith(":")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_66 $$ line.startsWith(":")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_66 $$ line.startsWith(":")[ FD ]
Line_66 $$ if (line.startsWith(":")) -->Line_68 $$ line = line.substring(1)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_68 $$ line = line.substring(1)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_68 $$ line = line.substring(1)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_68 $$ line = line.substring(1)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_68 $$ line = line.substring(1)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_68 $$ line.substring(1)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_68 $$ line.substring(1)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_68 $$ line.substring(1)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_68 $$ line.substring(1)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_68 $$ line.substring(1)[ FD ]
Line_0 $$ Entry-->Line_73 $$ //1
public class func [ CD ]
Line_73 $$ //1
public class func -->Line_74 $$ public void execute(String param) [ CD ]
Line_74 $$ public void execute(String param) -->Line_75 $$ do [ CD ]
Line_74 $$ public void execute(String param) -->Line_74 $$ public void execute(String param) [ CD ]
Line_75 $$ do -->Line_81 $$ if (line == null)
    throw new CGIServerException("unexpected EOF reading server response");[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_81 $$ if (line == null)
    throw new CGIServerException("unexpected EOF reading server response");[ FD ]
Line_26 $$ line = line.substring(1)-->Line_81 $$ if (line == null)
    throw new CGIServerException("unexpected EOF reading server response");[ FD ]
Line_29 $$ line = line.substring(1)-->Line_81 $$ if (line == null)
    throw new CGIServerException("unexpected EOF reading server response");[ FD ]
Line_68 $$ line = line.substring(1)-->Line_81 $$ if (line == null)
    throw new CGIServerException("unexpected EOF reading server response");[ FD ]
Line_75 $$ do -->Line_85 $$ if (line.toLowerCase().startsWith(key)) [ CD ]
Line_85 $$ if (line.toLowerCase().startsWith(key)) -->Line_85 $$ line.toLowerCase().startsWith(key)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_85 $$ line.toLowerCase()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_85 $$ line.toLowerCase()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_85 $$ line.toLowerCase()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_85 $$ line.toLowerCase()[ FD ]
Line_85 $$ if (line.toLowerCase().startsWith(key)) -->Line_86 $$ if (contentLengthFound)
    // what would we want to do in this case??
    ;[ CD ]
Line_85 $$ if (line.toLowerCase().startsWith(key)) -->Line_89 $$ Integer.parseInt(line.substring(key.length()).trim())[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_89 $$ line.substring(key.length())[ FD ]
Line_26 $$ line = line.substring(1)-->Line_89 $$ line.substring(key.length())[ FD ]
Line_29 $$ line = line.substring(1)-->Line_89 $$ line.substring(key.length())[ FD ]
Line_68 $$ line = line.substring(1)-->Line_89 $$ line.substring(key.length())[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_92 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_92 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_92 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_92 $$ line.length()[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_93 $$ line.charAt(0)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_93 $$ line.charAt(0)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_93 $$ line.charAt(0)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_93 $$ line.charAt(0)[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_93 $$ line.charAt(0)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_93 $$ line.charAt(0)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_93 $$ line.charAt(0)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_93 $$ line.charAt(0)[ FD ]
Line_74 $$ public void execute(String param) -->Line_94 $$ if (!contentLengthFound || responseContentLength < 0)
    throw new CGIServerException("missing or invalid content length in server response");[ CD ]
Line_74 $$ public void execute(String param) -->Line_97 $$ socketIn.readFully(buffer)[ CD ]
Line_0 $$ Entry-->Line_101 $$ //2
public class func [ CD ]
Line_101 $$ //2
public class func -->Line_102 $$ public void HttpInputStream(InputStream in) [ CD ]
Line_102 $$ public void HttpInputStream(InputStream in) -->Line_103 $$ do [ CD ]
Line_102 $$ public void HttpInputStream(InputStream in) -->Line_102 $$ public void HttpInputStream(InputStream in) [ CD ]
Line_103 $$ do -->Line_104 $$ dis.readLine()[ CD ]
Line_103 $$ do -->Line_106 $$ if (RMIMasterSocketFactory.proxyLog.isLoggable(Log.VERBOSE)) [ CD ]
Line_106 $$ if (RMIMasterSocketFactory.proxyLog.isLoggable(Log.VERBOSE)) -->Line_106 $$ RMIMasterSocketFactory.proxyLog.isLoggable(Log.VERBOSE)[ CD ]
Line_106 $$ if (RMIMasterSocketFactory.proxyLog.isLoggable(Log.VERBOSE)) -->Line_107 $$ RMIMasterSocketFactory.proxyLog.log(Log.VERBOSE, "received header line: \"" + line + "\"")[ CD ]
Line_103 $$ do -->Line_111 $$ if (line == null)
    throw new EOFException();[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_111 $$ if (line == null)
    throw new EOFException();[ FD ]
Line_26 $$ line = line.substring(1)-->Line_111 $$ if (line == null)
    throw new EOFException();[ FD ]
Line_29 $$ line = line.substring(1)-->Line_111 $$ if (line == null)
    throw new EOFException();[ FD ]
Line_68 $$ line = line.substring(1)-->Line_111 $$ if (line == null)
    throw new EOFException();[ FD ]
Line_103 $$ do -->Line_114 $$ if (line.toLowerCase().startsWith(key)) [ CD ]
Line_114 $$ if (line.toLowerCase().startsWith(key)) -->Line_114 $$ line.toLowerCase().startsWith(key)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_114 $$ line.toLowerCase()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_114 $$ line.toLowerCase()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_114 $$ line.toLowerCase()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_114 $$ line.toLowerCase()[ FD ]
Line_114 $$ if (line.toLowerCase().startsWith(key)) -->Line_115 $$ if (contentLengthFound)
    // what would we want to do in this case??
    ;[ CD ]
Line_114 $$ if (line.toLowerCase().startsWith(key)) -->Line_118 $$ Integer.parseInt(line.substring(key.length()).trim())[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_118 $$ line.substring(key.length())[ FD ]
Line_26 $$ line = line.substring(1)-->Line_118 $$ line.substring(key.length())[ FD ]
Line_29 $$ line = line.substring(1)-->Line_118 $$ line.substring(key.length())[ FD ]
Line_68 $$ line = line.substring(1)-->Line_118 $$ line.substring(key.length())[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_127 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_127 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_127 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_127 $$ line.length()[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_128 $$ line.charAt(0)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_128 $$ line.charAt(0)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_128 $$ line.charAt(0)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_128 $$ line.charAt(0)[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_128 $$ line.charAt(0)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_128 $$ line.charAt(0)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_128 $$ line.charAt(0)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_128 $$ line.charAt(0)[ FD ]
Line_102 $$ public void HttpInputStream(InputStream in) -->Line_129 $$ if (!contentLengthFound || bytesLeft < 0) [ CD ]
Line_0 $$ Entry-->Line_137 $$ //3
public class func [ CD ]
Line_137 $$ //3
public class func -->Line_138 $$ public void load(InputStream inStream) [ CD ]
Line_138 $$ public void load(InputStream inStream) -->Line_139 $$ while (pos < line.length() && !Character.isWhitespace(c = line.charAt(pos++)) && c != '=' && c != ':') [ CD ]
Line_138 $$ public void load(InputStream inStream) -->Line_138 $$ public void load(InputStream inStream) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_139 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_139 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_139 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_139 $$ line.length()[ FD ]
Line_140 $$ !Character.isWhitespace(c = line.charAt(pos++))-->Line_140 $$ Character.isWhitespace(c = line.charAt(pos++))[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_140 $$ line.charAt(pos++)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_140 $$ line.charAt(pos++)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_140 $$ line.charAt(pos++)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_140 $$ line.charAt(pos++)[ FD ]
Line_139 $$ while (pos < line.length() && !Character.isWhitespace(c = line.charAt(pos++)) && c != '=' && c != ':') -->Line_143 $$ if (needsEscape && c == '\\') [ CD ]
Line_143 $$ if (needsEscape && c == '\\') -->Line_145 $$ if (pos == line.length()) [ CD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_145 $$ if (pos == line.length()) [ FD ]
Line_145 $$ if (pos == line.length()) -->Line_145 $$ line.length()[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_145 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_145 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_145 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_145 $$ line.length()[ FD ]
Line_145 $$ if (pos == line.length()) -->Line_150 $$ reader.readLine()[ CD ]
Line_145 $$ if (pos == line.length()) -->Line_151 $$ if (line == null)
    line = "";[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_151 $$ if (line == null)
    line = "";[ FD ]
Line_26 $$ line = line.substring(1)-->Line_151 $$ if (line == null)
    line = "";[ FD ]
Line_29 $$ line = line.substring(1)-->Line_151 $$ if (line == null)
    line = "";[ FD ]
Line_68 $$ line = line.substring(1)-->Line_151 $$ if (line == null)
    line = "";[ FD ]
Line_145 $$ if (pos == line.length()) -->Line_154 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_145 $$ if (pos == line.length()) -->Line_145 $$ if (pos == line.length()) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_154 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_154 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_154 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_154 $$ line.length()[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_155 $$ line.charAt(pos)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_155 $$ line.charAt(pos)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_155 $$ line.charAt(pos)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_155 $$ line.charAt(pos)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_155 $$ line.charAt(pos)[ FD ]
Line_145 $$ if (pos == line.length()) -->Line_160 $$ line.charAt(pos++)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_160 $$ line.charAt(pos++)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_160 $$ line.charAt(pos++)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_160 $$ line.charAt(pos++)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_160 $$ line.charAt(pos++)[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_173 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_173 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_173 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_173 $$ line.length()[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_176 $$ line.substring(pos, pos + 4)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_176 $$ line.substring(pos, pos + 4)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_176 $$ line.substring(pos, pos + 4)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_176 $$ line.substring(pos, pos + 4)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_176 $$ line.substring(pos, pos + 4)[ FD ]
Line_173 $$ if (pos + 4 <= line.length()) -->Line_177 $$ key.append(uni)[ CD ]
Line_143 $$ if (needsEscape && c == '\\') -->Line_187 $$ if (needsEscape)
    key.append(c);[ CD ]
Line_187 $$ if (needsEscape)
    key.append(c);-->Line_188 $$ key.append(c)[ CD ]
Line_138 $$ public void load(InputStream inStream) -->Line_190 $$ if (needsEscape)
    keyString = key.toString();
else if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);[ CD ]
Line_190 $$ if (needsEscape)
    keyString = key.toString();
else if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_191 $$ key.toString()[ CD ]
Line_190 $$ if (needsEscape)
    keyString = key.toString();
else if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_192 $$ if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);[ CD ]
Line_192 $$ if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_192 $$ Character.isWhitespace(c)[ CD ]
Line_192 $$ if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_193 $$ line.substring(start, pos - 1)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_193 $$ line.substring(start, pos - 1)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_193 $$ line.substring(start, pos - 1)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_193 $$ line.substring(start, pos - 1)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_193 $$ line.substring(start, pos - 1)[ FD ]
Line_192 $$ if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_195 $$ line.substring(start, pos)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_195 $$ line.substring(start, pos)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_195 $$ line.substring(start, pos)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_195 $$ line.substring(start, pos)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_195 $$ line.substring(start, pos)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_195 $$ line.substring(start, pos)[ FD ]
Line_138 $$ public void load(InputStream inStream) -->Line_196 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_138 $$ public void load(InputStream inStream) -->Line_138 $$ public void load(InputStream inStream) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_196 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_196 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_196 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_196 $$ line.length()[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_197 $$ line.charAt(pos)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_197 $$ line.charAt(pos)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_197 $$ line.charAt(pos)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_197 $$ line.charAt(pos)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_197 $$ line.charAt(pos)[ FD ]
Line_138 $$ public void load(InputStream inStream) -->Line_199 $$ if (!isDelim && (c == ':' || c == '=')) [ CD ]
Line_199 $$ if (!isDelim && (c == ':' || c == '=')) -->Line_202 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_199 $$ if (!isDelim && (c == ':' || c == '=')) -->Line_199 $$ if (!isDelim && (c == ':' || c == '=')) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_202 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_202 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_202 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_202 $$ line.length()[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_203 $$ line.charAt(pos)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_203 $$ line.charAt(pos)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_203 $$ line.charAt(pos)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_203 $$ line.charAt(pos)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_203 $$ line.charAt(pos)[ FD ]
Line_138 $$ public void load(InputStream inStream) -->Line_206 $$ if (!needsEscape) [ CD ]
Line_206 $$ if (!needsEscape) -->Line_208 $$ put(keyString, line.substring(pos))[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_208 $$ line.substring(pos)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_208 $$ line.substring(pos)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_208 $$ line.substring(pos)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_208 $$ line.substring(pos)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_208 $$ line.substring(pos)[ FD ]
Line_138 $$ public void load(InputStream inStream) -->Line_211 $$ StringBuilder element = new StringBuilder(line.length() - pos)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_211 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_211 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_211 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_211 $$ line.length()[ FD ]
Line_138 $$ public void load(InputStream inStream) -->Line_212 $$ while (pos < line.length()) [ CD ]
Line_138 $$ public void load(InputStream inStream) -->Line_138 $$ public void load(InputStream inStream) [ CD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_212 $$ while (pos < line.length()) [ FD ]
Line_212 $$ while (pos < line.length()) -->Line_212 $$ line.length()[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_212 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_212 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_212 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_212 $$ line.length()[ FD ]
Line_212 $$ while (pos < line.length()) -->Line_214 $$ line.charAt(pos++)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_214 $$ line.charAt(pos++)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_214 $$ line.charAt(pos++)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_214 $$ line.charAt(pos++)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_214 $$ line.charAt(pos++)[ FD ]
Line_212 $$ while (pos < line.length()) -->Line_215 $$ if (c == '\\') [ CD ]
Line_215 $$ if (c == '\\') -->Line_217 $$ if (pos == line.length()) [ CD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_217 $$ if (pos == line.length()) [ FD ]
Line_217 $$ if (pos == line.length()) -->Line_217 $$ line.length()[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_217 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_217 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_217 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_217 $$ line.length()[ FD ]
Line_217 $$ if (pos == line.length()) -->Line_220 $$ reader.readLine()[ CD ]
Line_217 $$ if (pos == line.length()) -->Line_225 $$ if (line == null)
    break;[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_225 $$ if (line == null)
    break;[ FD ]
Line_26 $$ line = line.substring(1)-->Line_225 $$ if (line == null)
    break;[ FD ]
Line_29 $$ line = line.substring(1)-->Line_225 $$ if (line == null)
    break;[ FD ]
Line_68 $$ line = line.substring(1)-->Line_225 $$ if (line == null)
    break;[ FD ]
Line_217 $$ if (pos == line.length()) -->Line_229 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_217 $$ if (pos == line.length()) -->Line_217 $$ if (pos == line.length()) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_229 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_229 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_229 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_229 $$ line.length()[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_230 $$ line.charAt(pos)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_230 $$ line.charAt(pos)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_230 $$ line.charAt(pos)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_230 $$ line.charAt(pos)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_230 $$ line.charAt(pos)[ FD ]
Line_217 $$ if (pos == line.length()) -->Line_232 $$ element.ensureCapacity(line.length() - pos + element.length())[ CD ]
Line_211 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_232 $$ element.ensureCapacity(line.length() - pos + element.length())[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_232 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_232 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_232 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_232 $$ line.length()[ FD ]
Line_211 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_233 $$ element.length()[ FD ]
Line_217 $$ if (pos == line.length()) -->Line_237 $$ line.charAt(pos++)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_237 $$ line.charAt(pos++)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_237 $$ line.charAt(pos++)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_237 $$ line.charAt(pos++)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_237 $$ line.charAt(pos++)[ FD ]
Line_211 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_241 $$ element.append('\n')[ FD ]
Line_211 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_244 $$ element.append('\t')[ FD ]
Line_211 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_247 $$ element.append('\r')[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_250 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_250 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_250 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_250 $$ line.length()[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_253 $$ line.substring(pos, pos + 4)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_253 $$ line.substring(pos, pos + 4)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_253 $$ line.substring(pos, pos + 4)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_253 $$ line.substring(pos, pos + 4)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_253 $$ line.substring(pos, pos + 4)[ FD ]
Line_250 $$ if (pos + 4 <= line.length()) -->Line_254 $$ element.append(uni)[ CD ]
Line_211 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_254 $$ element.append(uni)[ FD ]
Line_211 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_259 $$ element.append(c)[ FD ]
Line_215 $$ if (c == '\\') -->Line_265 $$ element.append(c)[ CD ]
Line_211 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_265 $$ element.append(c)[ FD ]
Line_138 $$ public void load(InputStream inStream) -->Line_267 $$ put(keyString, element.toString())[ CD ]
Line_211 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_267 $$ element.toString()[ FD ]
Line_0 $$ Entry-->Line_271 $$ public class func [ CD ]
Line_271 $$ public class func -->Line_272 $$ public void start(DataInputStream originalIn, OutputStream out, String[] parameters) [ CD ]
Line_272 $$ public void start(DataInputStream originalIn, OutputStream out, String[] parameters) -->Line_273 $$ String cmd = in.readLine()[ CD ]
Line_273 $$ String cmd = in.readLine()-->Line_273 $$ in.readLine()[ CD ]
Line_272 $$ public void start(DataInputStream originalIn, OutputStream out, String[] parameters) -->Line_274 $$ while (cmd.indexOf("\0$") != -1) [ CD ]
Line_272 $$ public void start(DataInputStream originalIn, OutputStream out, String[] parameters) -->Line_272 $$ public void start(DataInputStream originalIn, OutputStream out, String[] parameters) [ CD ]
Line_273 $$ String cmd = in.readLine()-->Line_274 $$ cmd.indexOf("\0$")[ FD ]
Line_274 $$ while (cmd.indexOf("\0$") != -1) -->Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)[ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)[ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)[ FD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_275 $$ cmd.substring(0, cmd.indexOf("\0$"))[ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_275 $$ cmd.substring(0, cmd.indexOf("\0$"))[ FD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_275 $$ cmd.indexOf("\0$")[ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_275 $$ cmd.indexOf("\0$")[ FD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_275 $$ cmd.substring(cmd.indexOf("\0$") + 2)[ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_275 $$ cmd.substring(cmd.indexOf("\0$") + 2)[ FD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_275 $$ cmd.indexOf("\0$")[ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_275 $$ cmd.indexOf("\0$")[ FD ]
Line_272 $$ public void start(DataInputStream originalIn, OutputStream out, String[] parameters) -->Line_277 $$ if (cmd.length() == 0) [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_277 $$ cmd.length()[ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_277 $$ cmd.length()[ FD ]
Line_272 $$ public void start(DataInputStream originalIn, OutputStream out, String[] parameters) -->Line_280 $$ int pos = cmd.indexOf(' ')[ CD ]
Line_280 $$ int pos = cmd.indexOf(' ')-->Line_280 $$ cmd.indexOf(' ')[ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_280 $$ cmd.indexOf(' ')[ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_280 $$ cmd.indexOf(' ')[ FD ]
Line_272 $$ public void start(DataInputStream originalIn, OutputStream out, String[] parameters) -->Line_281 $$ if (pos != -1) [ CD ]
Line_280 $$ int pos = cmd.indexOf(' ')-->Line_281 $$ if (pos != -1) [ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_281 $$ if (pos != -1) [ FD ]
Line_281 $$ if (pos != -1) -->Line_282 $$ cmd.substring(pos + 1)[ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_282 $$ cmd.substring(pos + 1)[ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_282 $$ cmd.substring(pos + 1)[ FD ]
Line_281 $$ if (pos != -1) -->Line_283 $$ cmd = cmd.substring(0, pos)[ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_283 $$ cmd = cmd.substring(0, pos)[ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_283 $$ cmd = cmd.substring(0, pos)[ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_283 $$ cmd = cmd.substring(0, pos)[ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_283 $$ cmd.substring(0, pos)[ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_283 $$ cmd.substring(0, pos)[ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_283 $$ cmd.substring(0, pos)[ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_283 $$ cmd.substring(0, pos)[ FD ]
Line_280 $$ int pos = cmd.indexOf(' ')-->Line_283 $$ cmd.substring(0, pos)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_283 $$ cmd.substring(0, pos)[ FD ]
Line_272 $$ public void start(DataInputStream originalIn, OutputStream out, String[] parameters) -->Line_285 $$ cmd = cmd.toLowerCase().intern()[ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_285 $$ cmd = cmd.toLowerCase().intern()[ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_285 $$ cmd = cmd.toLowerCase().intern()[ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_285 $$ cmd = cmd.toLowerCase().intern()[ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_285 $$ cmd = cmd.toLowerCase().intern()[ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_285 $$ cmd.toLowerCase().intern()[ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_285 $$ cmd.toLowerCase()[ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_285 $$ cmd.toLowerCase()[ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_285 $$ cmd.toLowerCase()[ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_285 $$ cmd.toLowerCase()[ FD ]
Line_272 $$ public void start(DataInputStream originalIn, OutputStream out, String[] parameters) -->Line_286 $$ if (cmd == "cd" || cmd == "cat" || cmd == "paste") [ CD ]
Line_286 $$ if (cmd == "cd" || cmd == "cat" || cmd == "paste") -->Line_288 $$ if (!fp.isAbsolute())
    fp = new File(pwd, params);[ CD ]
Line_288 $$ if (!fp.isAbsolute())
    fp = new File(pwd, params);-->Line_288 $$ !fp.isAbsolute()[ CD ]
Line_288 $$ !fp.isAbsolute()-->Line_288 $$ fp.isAbsolute()[ CD ]
Line_272 $$ public void start(DataInputStream originalIn, OutputStream out, String[] parameters) -->Line_291 $$ if (cmd == "info") [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_291 $$ if (cmd == "info") [ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_291 $$ if (cmd == "info") [ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_291 $$ if (cmd == "info") [ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_291 $$ if (cmd == "info") [ FD ]
Line_291 $$ if (cmd == "info") -->Line_292 $$ if (params.length() == 0) [ CD ]
Line_292 $$ if (params.length() == 0) -->Line_293 $$ final Enumeration e = System.getProperties().propertyNames()[ CD ]
Line_293 $$ final Enumeration e = System.getProperties().propertyNames()-->Line_293 $$ System.getProperties().propertyNames()[ CD ]
Line_292 $$ if (params.length() == 0) -->Line_294 $$ while (e.hasMoreElements()) [ CD ]
Line_292 $$ if (params.length() == 0) -->Line_292 $$ if (params.length() == 0) [ CD ]
Line_294 $$ while (e.hasMoreElements()) -->Line_294 $$ e.hasMoreElements()[ CD ]
Line_293 $$ final Enumeration e = System.getProperties().propertyNames()-->Line_294 $$ e.hasMoreElements()[ FD ]
Line_294 $$ while (e.hasMoreElements()) -->Line_295 $$ final String property = (String) e.nextElement()[ CD ]
Line_293 $$ final Enumeration e = System.getProperties().propertyNames()-->Line_295 $$ e.nextElement()[ FD ]
Line_294 $$ while (e.hasMoreElements()) -->Line_296 $$ pout.println(property + "=" + System.getProperty(property))[ CD ]
Line_295 $$ final String property = (String) e.nextElement()-->Line_296 $$ System.getProperty(property)[ FD ]
Line_292 $$ if (params.length() == 0) -->Line_299 $$ pout.println(params + "=" + System.getProperty(params))[ CD ]
Line_291 $$ if (cmd == "info") -->Line_301 $$ if (cmd == "pwd") [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_301 $$ if (cmd == "pwd") [ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_301 $$ if (cmd == "pwd") [ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_301 $$ if (cmd == "pwd") [ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_301 $$ if (cmd == "pwd") [ FD ]
Line_301 $$ if (cmd == "pwd") -->Line_302 $$ pout.println(pwd.getPath())[ CD ]
Line_301 $$ if (cmd == "pwd") -->Line_303 $$ if (cmd == "cd") [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_303 $$ if (cmd == "cd") [ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_303 $$ if (cmd == "cd") [ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_303 $$ if (cmd == "cd") [ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_303 $$ if (cmd == "cd") [ FD ]
Line_303 $$ if (cmd == "cd") -->Line_304 $$ if (fp.exists() && fp.isDirectory()) [ CD ]
Line_304 $$ if (fp.exists() && fp.isDirectory()) -->Line_305 $$ fp.getCanonicalFile()[ CD ]
Line_304 $$ if (fp.exists() && fp.isDirectory()) -->Line_307 $$ pout.println("Path not found.")[ CD ]
Line_303 $$ if (cmd == "cd") -->Line_309 $$ pout.println(pwd.getPath())[ CD ]
Line_303 $$ if (cmd == "cd") -->Line_310 $$ if (cmd == "ls") [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_310 $$ if (cmd == "ls") [ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_310 $$ if (cmd == "ls") [ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_310 $$ if (cmd == "ls") [ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_310 $$ if (cmd == "ls") [ FD ]
Line_310 $$ if (cmd == "ls") -->Line_311 $$ final File[] roots = File.listRoots()[ CD ]
Line_311 $$ final File[] roots = File.listRoots()-->Line_311 $$ File.listRoots()[ CD ]
Line_310 $$ if (cmd == "ls") -->Line_312 $$ for (int i = 0; i < roots.length; i++) [ CD ]
Line_310 $$ if (cmd == "ls") -->Line_310 $$ if (cmd == "ls") [ CD ]
Line_312 $$ for (int i = 0; i < roots.length; i++) -->Line_312 $$ int i = 0[ CD ]
Line_312 $$ for (int i = 0; i < roots.length; i++) -->Line_312 $$ i++[ CD ]
Line_312 $$ int i = 0-->Line_312 $$ i++[ FD ]
Line_312 $$ for (int i = 0; i < roots.length; i++) -->Line_313 $$ pout.println(roots[i].getAbsolutePath() + "\t[ROOT]")[ CD ]
Line_310 $$ if (cmd == "ls") -->Line_315 $$ pout.println()[ CD ]
Line_310 $$ if (cmd == "ls") -->Line_316 $$ final File[] dir = pwd.listFiles()[ CD ]
Line_316 $$ final File[] dir = pwd.listFiles()-->Line_316 $$ pwd.listFiles()[ CD ]
Line_310 $$ if (cmd == "ls") -->Line_317 $$ for (int i = 0; i < dir.length; i++) [ CD ]
Line_310 $$ if (cmd == "ls") -->Line_310 $$ if (cmd == "ls") [ CD ]
Line_312 $$ int i = 0-->Line_317 $$ for (int i = 0; i < dir.length; i++) [ FD ]
Line_317 $$ for (int i = 0; i < dir.length; i++) -->Line_317 $$ int i = 0[ CD ]
Line_317 $$ for (int i = 0; i < dir.length; i++) -->Line_317 $$ i++[ CD ]
Line_317 $$ int i = 0-->Line_317 $$ i++[ FD ]
Line_312 $$ int i = 0-->Line_317 $$ i++[ FD ]
Line_317 $$ for (int i = 0; i < dir.length; i++) -->Line_318 $$ pout.println(dir[i].getName() + "\t" + (dir[i].isDirectory() ? "[DIR]" : "" + dir[i].length()) + "\t" + new SimpleDateFormat("yyyy-MM-dd HH:mm").format(new Date(dir[i].lastModified())))[ CD ]
Line_310 $$ if (cmd == "ls") -->Line_320 $$ if (cmd == "exec") [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_320 $$ if (cmd == "exec") [ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_320 $$ if (cmd == "exec") [ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_320 $$ if (cmd == "exec") [ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_320 $$ if (cmd == "exec") [ FD ]
Line_320 $$ if (cmd == "exec") -->Line_321 $$ Process proc[ CD ]
Line_320 $$ if (cmd == "exec") -->Line_322 $$ handleBackgroundJob(in, new Object[] [ CD ]
Line_321 $$ Process proc-->Line_322 $$ proc = Runtime.getRuntime().exec(params)[ FD ]
Line_322 $$ proc = Runtime.getRuntime().exec(params)-->Line_322 $$ proc = Runtime.getRuntime().exec(params)[ FD ]
Line_322 $$ proc = Runtime.getRuntime().exec(params)-->Line_322 $$ Runtime.getRuntime().exec(params)[ CD ]
Line_321 $$ Process proc-->Line_322 $$ proc.getOutputStream()[ FD ]
Line_322 $$ proc = Runtime.getRuntime().exec(params)-->Line_322 $$ proc.getOutputStream()[ FD ]
Line_321 $$ Process proc-->Line_322 $$ proc.getInputStream()[ FD ]
Line_322 $$ proc = Runtime.getRuntime().exec(params)-->Line_322 $$ proc.getInputStream()[ FD ]
Line_321 $$ Process proc-->Line_322 $$ proc.getErrorStream()[ FD ]
Line_322 $$ proc = Runtime.getRuntime().exec(params)-->Line_322 $$ proc.getErrorStream()[ FD ]
Line_320 $$ if (cmd == "exec") -->Line_323 $$ if (cmd == "cat") [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_323 $$ if (cmd == "cat") [ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_323 $$ if (cmd == "cat") [ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_323 $$ if (cmd == "cat") [ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_323 $$ if (cmd == "cat") [ FD ]
Line_323 $$ if (cmd == "cat") -->Line_324 $$ final FileInputStream fis = new FileInputStream(fp)[ CD ]
Line_323 $$ if (cmd == "cat") -->Line_325 $$ forward(fis, pout)[ CD ]
Line_324 $$ final FileInputStream fis = new FileInputStream(fp)-->Line_325 $$ forward(fis, pout)[ FD ]
Line_323 $$ if (cmd == "cat") -->Line_326 $$ if (cmd == "wget") [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_326 $$ if (cmd == "wget") [ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_326 $$ if (cmd == "wget") [ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_326 $$ if (cmd == "wget") [ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_326 $$ if (cmd == "wget") [ FD ]
Line_326 $$ if (cmd == "wget") -->Line_327 $$ pos = params.indexOf(' ')[ CD ]
Line_280 $$ int pos = cmd.indexOf(' ')-->Line_327 $$ pos = params.indexOf(' ')[ FD ]
Line_327 $$ pos = params.indexOf(' ')-->Line_327 $$ pos = params.indexOf(' ')[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_327 $$ pos = params.indexOf(' ')[ FD ]
Line_327 $$ pos = params.indexOf(' ')-->Line_327 $$ params.indexOf(' ')[ CD ]
Line_326 $$ if (cmd == "wget") -->Line_328 $$ if (pos == -1) [ CD ]
Line_280 $$ int pos = cmd.indexOf(' ')-->Line_328 $$ if (pos == -1) [ FD ]
Line_327 $$ pos = params.indexOf(' ')-->Line_328 $$ if (pos == -1) [ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_328 $$ if (pos == -1) [ FD ]
Line_328 $$ if (pos == -1) -->Line_329 $$ pout.println("  Usage: wget <URL> <filename>")[ CD ]
Line_328 $$ if (pos == -1) -->Line_331 $$ File f = new File(params.substring(pos + 1))[ CD ]
Line_328 $$ if (pos == -1) -->Line_332 $$ if (!f.isAbsolute())
    f = new File(pwd, params.substring(pos + 1));[ CD ]
Line_332 $$ if (!f.isAbsolute())
    f = new File(pwd, params.substring(pos + 1));-->Line_332 $$ !f.isAbsolute()[ CD ]
Line_332 $$ !f.isAbsolute()-->Line_332 $$ f.isAbsolute()[ CD ]
Line_331 $$ File f = new File(params.substring(pos + 1))-->Line_332 $$ f.isAbsolute()[ FD ]
Line_332 $$ if (!f.isAbsolute())
    f = new File(pwd, params.substring(pos + 1));-->Line_333 $$ f = new File(pwd, params.substring(pos + 1))[ CD ]
Line_331 $$ File f = new File(params.substring(pos + 1))-->Line_333 $$ f = new File(pwd, params.substring(pos + 1))[ FD ]
Line_333 $$ f = new File(pwd, params.substring(pos + 1))-->Line_333 $$ f = new File(pwd, params.substring(pos + 1))[ FD ]
Line_328 $$ if (pos == -1) -->Line_334 $$ final FileOutputStream fos = new FileOutputStream(f)[ CD ]
Line_328 $$ if (pos == -1) -->Line_335 $$ forward(new URL(params.substring(0, pos)).openStream(), fos)[ CD ]
Line_334 $$ final FileOutputStream fos = new FileOutputStream(f)-->Line_335 $$ forward(new URL(params.substring(0, pos)).openStream(), fos)[ FD ]
Line_280 $$ int pos = cmd.indexOf(' ')-->Line_335 $$ params.substring(0, pos)[ FD ]
Line_327 $$ pos = params.indexOf(' ')-->Line_335 $$ params.substring(0, pos)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_335 $$ params.substring(0, pos)[ FD ]
Line_328 $$ if (pos == -1) -->Line_336 $$ fos.close()[ CD ]
Line_334 $$ final FileOutputStream fos = new FileOutputStream(f)-->Line_336 $$ fos.close()[ FD ]
Line_326 $$ if (cmd == "wget") -->Line_338 $$ if (cmd == "telnet") [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_338 $$ if (cmd == "telnet") [ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_338 $$ if (cmd == "telnet") [ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_338 $$ if (cmd == "telnet") [ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_338 $$ if (cmd == "telnet") [ FD ]
Line_338 $$ if (cmd == "telnet") -->Line_339 $$ pos = params.indexOf(' ')[ CD ]
Line_280 $$ int pos = cmd.indexOf(' ')-->Line_339 $$ pos = params.indexOf(' ')[ FD ]
Line_327 $$ pos = params.indexOf(' ')-->Line_339 $$ pos = params.indexOf(' ')[ FD ]
Line_339 $$ pos = params.indexOf(' ')-->Line_339 $$ pos = params.indexOf(' ')[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_339 $$ pos = params.indexOf(' ')[ FD ]
Line_339 $$ pos = params.indexOf(' ')-->Line_339 $$ params.indexOf(' ')[ CD ]
Line_338 $$ if (cmd == "telnet") -->Line_340 $$ if (pos == -1) [ CD ]
Line_280 $$ int pos = cmd.indexOf(' ')-->Line_340 $$ if (pos == -1) [ FD ]
Line_327 $$ pos = params.indexOf(' ')-->Line_340 $$ if (pos == -1) [ FD ]
Line_339 $$ pos = params.indexOf(' ')-->Line_340 $$ if (pos == -1) [ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_340 $$ if (pos == -1) [ FD ]
Line_340 $$ if (pos == -1) -->Line_341 $$ pout.println("  Usage: telnet <host> <port>")[ CD ]
Line_340 $$ if (pos == -1) -->Line_343 $$ Socket s[ CD ]
Line_340 $$ if (pos == -1) -->Line_344 $$ handleBackgroundJob(in, new Object[] [ CD ]
Line_343 $$ Socket s-->Line_344 $$ s = new Socket(params.substring(0, pos), Integer.parseInt(params.substring(pos + 1)))[ FD ]
Line_344 $$ s = new Socket(params.substring(0, pos), Integer.parseInt(params.substring(pos + 1)))-->Line_344 $$ s = new Socket(params.substring(0, pos), Integer.parseInt(params.substring(pos + 1)))[ FD ]
Line_280 $$ int pos = cmd.indexOf(' ')-->Line_344 $$ params.substring(0, pos)[ FD ]
Line_327 $$ pos = params.indexOf(' ')-->Line_344 $$ params.substring(0, pos)[ FD ]
Line_339 $$ pos = params.indexOf(' ')-->Line_344 $$ params.substring(0, pos)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_344 $$ params.substring(0, pos)[ FD ]
Line_343 $$ Socket s-->Line_344 $$ s.getOutputStream()[ FD ]
Line_344 $$ s = new Socket(params.substring(0, pos), Integer.parseInt(params.substring(pos + 1)))-->Line_344 $$ s.getOutputStream()[ FD ]
Line_343 $$ Socket s-->Line_344 $$ s.getInputStream()[ FD ]
Line_344 $$ s = new Socket(params.substring(0, pos), Integer.parseInt(params.substring(pos + 1)))-->Line_344 $$ s.getInputStream()[ FD ]
Line_338 $$ if (cmd == "telnet") -->Line_346 $$ if (cmd == "paste") [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_346 $$ if (cmd == "paste") [ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_346 $$ if (cmd == "paste") [ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_346 $$ if (cmd == "paste") [ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_346 $$ if (cmd == "paste") [ FD ]
Line_346 $$ if (cmd == "paste") -->Line_348 $$ handleBackgroundJob(in, new Object[] [ CD ]
Line_334 $$ final FileOutputStream fos = new FileOutputStream(f)-->Line_348 $$ fos = new FileOutputStream(fp)[ FD ]
Line_348 $$ fos = new FileOutputStream(fp)-->Line_348 $$ fos = new FileOutputStream(fp)[ FD ]
Line_346 $$ if (cmd == "paste") -->Line_349 $$ if (cmd == "jobs") [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_349 $$ if (cmd == "jobs") [ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_349 $$ if (cmd == "jobs") [ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_349 $$ if (cmd == "jobs") [ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_349 $$ if (cmd == "jobs") [ FD ]
Line_349 $$ if (cmd == "jobs") -->Line_350 $$ if (params.length() == 0) [ CD ]
Line_350 $$ if (params.length() == 0) -->Line_351 $$ for (int i = 0; i < jobs.size(); i++) [ CD ]
Line_350 $$ if (params.length() == 0) -->Line_350 $$ if (params.length() == 0) [ CD ]
Line_317 $$ int i = 0-->Line_351 $$ for (int i = 0; i < jobs.size(); i++) [ FD ]
Line_312 $$ int i = 0-->Line_351 $$ for (int i = 0; i < jobs.size(); i++) [ FD ]
Line_351 $$ for (int i = 0; i < jobs.size(); i++) -->Line_351 $$ int i = 0[ CD ]
Line_351 $$ for (int i = 0; i < jobs.size(); i++) -->Line_351 $$ i++[ CD ]
Line_351 $$ int i = 0-->Line_351 $$ i++[ FD ]
Line_317 $$ int i = 0-->Line_351 $$ i++[ FD ]
Line_312 $$ int i = 0-->Line_351 $$ i++[ FD ]
Line_351 $$ for (int i = 0; i < jobs.size(); i++) -->Line_352 $$ pout.println((i + 1) + "\t" + ((Object[]) jobs.get(i))[0])[ CD ]
Line_351 $$ int i = 0-->Line_352 $$ jobs.get(i)[ FD ]
Line_317 $$ int i = 0-->Line_352 $$ jobs.get(i)[ FD ]
Line_312 $$ int i = 0-->Line_352 $$ jobs.get(i)[ FD ]
Line_350 $$ if (params.length() == 0) -->Line_355 $$ handleBackgroundJob(in, (Object[]) jobs.remove(Integer.parseInt(params) - 1))[ CD ]
Line_349 $$ if (cmd == "jobs") -->Line_357 $$ if (cmd == "exit") [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_357 $$ if (cmd == "exit") [ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_357 $$ if (cmd == "exit") [ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_357 $$ if (cmd == "exit") [ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_357 $$ if (cmd == "exit") [ FD ]
Line_357 $$ if (cmd == "exit") -->Line_359 $$ if (cmd == "help") [ CD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_359 $$ if (cmd == "help") [ FD ]
Line_273 $$ String cmd = in.readLine()-->Line_359 $$ if (cmd == "help") [ FD ]
Line_283 $$ cmd = cmd.substring(0, pos)-->Line_359 $$ if (cmd == "help") [ FD ]
Line_285 $$ cmd = cmd.toLowerCase().intern()-->Line_359 $$ if (cmd == "help") [ FD ]
Line_359 $$ if (cmd == "help") -->Line_360 $$ params.toLowerCase().intern()[ CD ]
Line_359 $$ if (cmd == "help") -->Line_361 $$ if (params == "info") [ CD ]
Line_361 $$ if (params == "info") -->Line_362 $$ pout.println("info: show system properties.")[ CD ]
Line_361 $$ if (params == "info") -->Line_363 $$ pout.println("  Usage: info [property]")[ CD ]
Line_361 $$ if (params == "info") -->Line_364 $$ if (params == "pwd") [ CD ]
Line_364 $$ if (params == "pwd") -->Line_365 $$ pout.println("pwd: show current directory.")[ CD ]
Line_364 $$ if (params == "pwd") -->Line_366 $$ pout.println("  Usage: pwd")[ CD ]
Line_364 $$ if (params == "pwd") -->Line_367 $$ if (params == "cd") [ CD ]
Line_367 $$ if (params == "cd") -->Line_368 $$ pout.println("cd: change directory.")[ CD ]
Line_367 $$ if (params == "cd") -->Line_369 $$ pout.println("  Usage: cd <path>")[ CD ]
Line_367 $$ if (params == "cd") -->Line_370 $$ if (params == "ls") [ CD ]
Line_370 $$ if (params == "ls") -->Line_371 $$ pout.println("ls: list directory.")[ CD ]
Line_370 $$ if (params == "ls") -->Line_372 $$ pout.println("  Usage: ls")[ CD ]
Line_370 $$ if (params == "ls") -->Line_373 $$ if (params == "exec") [ CD ]
Line_373 $$ if (params == "exec") -->Line_374 $$ pout.println("exec: execute native command.")[ CD ]
Line_373 $$ if (params == "exec") -->Line_375 $$ pout.println("  Usage: exec <command>")[ CD ]
Line_373 $$ if (params == "exec") -->Line_376 $$ if (params == "cat") [ CD ]
Line_376 $$ if (params == "cat") -->Line_377 $$ pout.println("cat: show text file.")[ CD ]
Line_376 $$ if (params == "cat") -->Line_378 $$ pout.println("  Usage: cat <filename>")[ CD ]
Line_376 $$ if (params == "cat") -->Line_379 $$ if (params == "wget") [ CD ]
Line_379 $$ if (params == "wget") -->Line_380 $$ pout.println("wget: download file.")[ CD ]
Line_379 $$ if (params == "wget") -->Line_381 $$ pout.println("  Usage: wget <URL> <filename>")[ CD ]
Line_379 $$ if (params == "wget") -->Line_382 $$ if (params == "telnet") [ CD ]
Line_382 $$ if (params == "telnet") -->Line_383 $$ pout.println("telnet: create TCP connection.")[ CD ]
Line_382 $$ if (params == "telnet") -->Line_384 $$ pout.println("  Usage: telnet <host> <port>")[ CD ]
Line_382 $$ if (params == "telnet") -->Line_385 $$ if (params == "paste") [ CD ]
Line_385 $$ if (params == "paste") -->Line_386 $$ pout.println("paste: create text file.")[ CD ]
Line_385 $$ if (params == "paste") -->Line_387 $$ pout.println("  Usage: paste <filename>")[ CD ]
Line_385 $$ if (params == "paste") -->Line_388 $$ if (params == "jobs") [ CD ]
Line_388 $$ if (params == "jobs") -->Line_389 $$ pout.println("jobs: list or continue jobs.")[ CD ]
Line_388 $$ if (params == "jobs") -->Line_390 $$ pout.println("  Usage: jobs [index]")[ CD ]
Line_388 $$ if (params == "jobs") -->Line_391 $$ if (params == "exit") [ CD ]
Line_391 $$ if (params == "exit") -->Line_392 $$ pout.println("exit: Exit JSh.")[ CD ]
Line_391 $$ if (params == "exit") -->Line_393 $$ pout.println("  Usage: exit")[ CD ]
Line_391 $$ if (params == "exit") -->Line_395 $$ pout.println("help: show information about commands.")[ CD ]
Line_391 $$ if (params == "exit") -->Line_396 $$ pout.println("  Usage: help [command]")[ CD ]
Line_391 $$ if (params == "exit") -->Line_397 $$ pout.println()[ CD ]
Line_391 $$ if (params == "exit") -->Line_398 $$ pout.println("Supported commands:")[ CD ]
Line_391 $$ if (params == "exit") -->Line_399 $$ pout.println("    help   - show this help")[ CD ]
Line_391 $$ if (params == "exit") -->Line_400 $$ pout.println("    info   - list system properties")[ CD ]
Line_391 $$ if (params == "exit") -->Line_401 $$ pout.println("    pwd    - show current directory")[ CD ]
Line_391 $$ if (params == "exit") -->Line_402 $$ pout.println("    cd     - change directory")[ CD ]
Line_391 $$ if (params == "exit") -->Line_403 $$ pout.println("    ls     - list directory")[ CD ]
Line_391 $$ if (params == "exit") -->Line_404 $$ pout.println("    exec   - execute native command")[ CD ]
Line_391 $$ if (params == "exit") -->Line_405 $$ pout.println("    cat    - show text file")[ CD ]
Line_391 $$ if (params == "exit") -->Line_406 $$ pout.println("    wget   - download file")[ CD ]
Line_391 $$ if (params == "exit") -->Line_407 $$ pout.println("    telnet - create TCP connection")[ CD ]
Line_391 $$ if (params == "exit") -->Line_408 $$ pout.println("    paste  - create text file")[ CD ]
Line_391 $$ if (params == "exit") -->Line_409 $$ pout.println("    jobs   - list or continue jobs")[ CD ]
Line_391 $$ if (params == "exit") -->Line_410 $$ pout.println("    exit   - Exit JSh")[ CD ]
Line_391 $$ if (params == "exit") -->Line_411 $$ pout.println()[ CD ]
Line_391 $$ if (params == "exit") -->Line_412 $$ pout.println("When inside an interactive command, enter ~. on a new")[ CD ]
Line_391 $$ if (params == "exit") -->Line_413 $$ pout.println("line to exit from that command. Enter ~& to background the command.")[ CD ]
Line_391 $$ if (params == "exit") -->Line_414 $$ pout.println("Enter ~~ to start a line with a ~ character")[ CD ]
Line_359 $$ if (cmd == "help") -->Line_417 $$ pout.println("Unknown command: " + cmd)[ CD ]
Line_359 $$ if (cmd == "help") -->Line_418 $$ pout.println("Type help for more info.")[ CD ]
Line_272 $$ public void start(DataInputStream originalIn, OutputStream out, String[] parameters) -->Line_420 $$ ex.printStackTrace(pout)[ CD ]
Line_0 $$ Entry-->Line_424 $$ public class func [ CD ]
Line_424 $$ public class func -->Line_425 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) [ CD ]
Line_425 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) -->Line_426 $$ String line = in.readLine()[ CD ]
Line_426 $$ String line = in.readLine()-->Line_426 $$ in.readLine()[ CD ]
Line_425 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) -->Line_427 $$ if (line.equals("exit"))
    break;[ CD ]
Line_426 $$ String line = in.readLine()-->Line_427 $$ if (line.equals("exit"))
    break;[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_427 $$ if (line.equals("exit"))
    break;[ FD ]
Line_26 $$ line = line.substring(1)-->Line_427 $$ if (line.equals("exit"))
    break;[ FD ]
Line_29 $$ line = line.substring(1)-->Line_427 $$ if (line.equals("exit"))
    break;[ FD ]
Line_68 $$ line = line.substring(1)-->Line_427 $$ if (line.equals("exit"))
    break;[ FD ]
Line_427 $$ if (line.equals("exit"))
    break;-->Line_427 $$ line.equals("exit")[ CD ]
Line_426 $$ String line = in.readLine()-->Line_427 $$ line.equals("exit")[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_427 $$ line.equals("exit")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_427 $$ line.equals("exit")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_427 $$ line.equals("exit")[ FD ]
Line_68 $$ line = line.substring(1)-->Line_427 $$ line.equals("exit")[ FD ]
Line_425 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) -->Line_428 $$ if (line.startsWith("\"")) [ CD ]
Line_426 $$ String line = in.readLine()-->Line_428 $$ if (line.startsWith("\"")) [ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_428 $$ if (line.startsWith("\"")) [ FD ]
Line_26 $$ line = line.substring(1)-->Line_428 $$ if (line.startsWith("\"")) [ FD ]
Line_29 $$ line = line.substring(1)-->Line_428 $$ if (line.startsWith("\"")) [ FD ]
Line_68 $$ line = line.substring(1)-->Line_428 $$ if (line.startsWith("\"")) [ FD ]
Line_428 $$ if (line.startsWith("\"")) -->Line_428 $$ line.startsWith("\"")[ CD ]
Line_426 $$ String line = in.readLine()-->Line_428 $$ line.startsWith("\"")[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_428 $$ line.startsWith("\"")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_428 $$ line.startsWith("\"")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_428 $$ line.startsWith("\"")[ FD ]
Line_68 $$ line = line.substring(1)-->Line_428 $$ line.startsWith("\"")[ FD ]
Line_428 $$ if (line.startsWith("\"")) -->Line_429 $$ values[++maxUsed] = line.substring(1)[ CD ]
Line_429 $$ values[++maxUsed] = line.substring(1)-->Line_429 $$ line.substring(1)[ CD ]
Line_426 $$ String line = in.readLine()-->Line_429 $$ line.substring(1)[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_429 $$ line.substring(1)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_429 $$ line.substring(1)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_429 $$ line.substring(1)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_429 $$ line.substring(1)[ FD ]
Line_428 $$ if (line.startsWith("\"")) -->Line_431 $$ if (line.indexOf(' ') == -1 && line.indexOf('[') == -1 && line.indexOf('/') == -1)
    line += "/";[ CD ]
Line_426 $$ String line = in.readLine()-->Line_431 $$ line.indexOf(' ')[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_431 $$ line.indexOf(' ')[ FD ]
Line_26 $$ line = line.substring(1)-->Line_431 $$ line.indexOf(' ')[ FD ]
Line_29 $$ line = line.substring(1)-->Line_431 $$ line.indexOf(' ')[ FD ]
Line_68 $$ line = line.substring(1)-->Line_431 $$ line.indexOf(' ')[ FD ]
Line_426 $$ String line = in.readLine()-->Line_431 $$ line.indexOf('[')[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_431 $$ line.indexOf('[')[ FD ]
Line_26 $$ line = line.substring(1)-->Line_431 $$ line.indexOf('[')[ FD ]
Line_29 $$ line = line.substring(1)-->Line_431 $$ line.indexOf('[')[ FD ]
Line_68 $$ line = line.substring(1)-->Line_431 $$ line.indexOf('[')[ FD ]
Line_426 $$ String line = in.readLine()-->Line_431 $$ line.indexOf('/')[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_431 $$ line.indexOf('/')[ FD ]
Line_26 $$ line = line.substring(1)-->Line_431 $$ line.indexOf('/')[ FD ]
Line_29 $$ line = line.substring(1)-->Line_431 $$ line.indexOf('/')[ FD ]
Line_68 $$ line = line.substring(1)-->Line_431 $$ line.indexOf('/')[ FD ]
Line_431 $$ if (line.indexOf(' ') == -1 && line.indexOf('[') == -1 && line.indexOf('/') == -1)
    line += "/";-->Line_432 $$ line += "/"[ CD ]
Line_426 $$ String line = in.readLine()-->Line_432 $$ line += "/"[ FD ]
Line_432 $$ line += "/"-->Line_432 $$ line += "/"[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_432 $$ line += "/"[ FD ]
Line_26 $$ line = line.substring(1)-->Line_432 $$ line += "/"[ FD ]
Line_29 $$ line = line.substring(1)-->Line_432 $$ line += "/"[ FD ]
Line_68 $$ line = line.substring(1)-->Line_432 $$ line += "/"[ FD ]
Line_428 $$ if (line.startsWith("\"")) -->Line_433 $$ int pos = line.indexOf('/')[ CD ]
Line_433 $$ int pos = line.indexOf('/')-->Line_433 $$ line.indexOf('/')[ CD ]
Line_426 $$ String line = in.readLine()-->Line_433 $$ line.indexOf('/')[ FD ]
Line_432 $$ line += "/"-->Line_433 $$ line.indexOf('/')[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_433 $$ line.indexOf('/')[ FD ]
Line_26 $$ line = line.substring(1)-->Line_433 $$ line.indexOf('/')[ FD ]
Line_29 $$ line = line.substring(1)-->Line_433 $$ line.indexOf('/')[ FD ]
Line_68 $$ line = line.substring(1)-->Line_433 $$ line.indexOf('/')[ FD ]
Line_428 $$ if (line.startsWith("\"")) -->Line_434 $$ if (pos != -1) [ CD ]
Line_433 $$ int pos = line.indexOf('/')-->Line_434 $$ if (pos != -1) [ FD ]
Line_280 $$ int pos = cmd.indexOf(' ')-->Line_434 $$ if (pos != -1) [ FD ]
Line_327 $$ pos = params.indexOf(' ')-->Line_434 $$ if (pos != -1) [ FD ]
Line_339 $$ pos = params.indexOf(' ')-->Line_434 $$ if (pos != -1) [ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_434 $$ if (pos != -1) [ FD ]
Line_434 $$ if (pos != -1) -->Line_435 $$ Object obj = values[Integer.parseInt(line.substring(0, pos).trim())][ CD ]
Line_426 $$ String line = in.readLine()-->Line_435 $$ line.substring(0, pos)[ FD ]
Line_432 $$ line += "/"-->Line_435 $$ line.substring(0, pos)[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_435 $$ line.substring(0, pos)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_435 $$ line.substring(0, pos)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_435 $$ line.substring(0, pos)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_435 $$ line.substring(0, pos)[ FD ]
Line_433 $$ int pos = line.indexOf('/')-->Line_435 $$ line.substring(0, pos)[ FD ]
Line_280 $$ int pos = cmd.indexOf(' ')-->Line_435 $$ line.substring(0, pos)[ FD ]
Line_327 $$ pos = params.indexOf(' ')-->Line_435 $$ line.substring(0, pos)[ FD ]
Line_339 $$ pos = params.indexOf(' ')-->Line_435 $$ line.substring(0, pos)[ FD ]
Line_31 $$ int pos = line.indexOf(" -> ")-->Line_435 $$ line.substring(0, pos)[ FD ]
Line_434 $$ if (pos != -1) -->Line_436 $$ if (obj instanceof Object[] && pos == line.length() - 1) [ CD ]
Line_426 $$ String line = in.readLine()-->Line_436 $$ line.length()[ FD ]
Line_432 $$ line += "/"-->Line_436 $$ line.length()[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_436 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_436 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_436 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_436 $$ line.length()[ FD ]
Line_436 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_437 $$ Object[] arr = (Object[]) obj[ CD ]
Line_436 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_438 $$ for (int i = 0; i < arr.length; i++) [ CD ]
Line_436 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_436 $$ if (obj instanceof Object[] && pos == line.length() - 1) [ CD ]
Line_351 $$ int i = 0-->Line_438 $$ for (int i = 0; i < arr.length; i++) [ FD ]
Line_317 $$ int i = 0-->Line_438 $$ for (int i = 0; i < arr.length; i++) [ FD ]
Line_312 $$ int i = 0-->Line_438 $$ for (int i = 0; i < arr.length; i++) [ FD ]
Line_438 $$ for (int i = 0; i < arr.length; i++) -->Line_438 $$ int i = 0[ CD ]
Line_438 $$ for (int i = 0; i < arr.length; i++) -->Line_438 $$ i++[ CD ]
Line_438 $$ int i = 0-->Line_438 $$ i++[ FD ]
Line_351 $$ int i = 0-->Line_438 $$ i++[ FD ]
Line_317 $$ int i = 0-->Line_438 $$ i++[ FD ]
Line_312 $$ int i = 0-->Line_438 $$ i++[ FD ]
Line_438 $$ for (int i = 0; i < arr.length; i++) -->Line_439 $$ values[++maxUsed] = arr[i][ CD ]
Line_436 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_442 $$ Class clazz = obj instanceof Class ? (Class) obj : obj.getClass()[ CD ]
Line_435 $$ Object obj = values[Integer.parseInt(line.substring(0, pos).trim())]-->Line_442 $$ obj.getClass()[ FD ]
Line_436 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_443 $$ Method[] mthds = clazz.getMethods()[ CD ]
Line_443 $$ Method[] mthds = clazz.getMethods()-->Line_443 $$ clazz.getMethods()[ CD ]
Line_442 $$ Class clazz = obj instanceof Class ? (Class) obj : obj.getClass()-->Line_443 $$ clazz.getMethods()[ FD ]
Line_436 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_444 $$ for (int i = 0; i < mthds.length; i++) [ CD ]
Line_436 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_436 $$ if (obj instanceof Object[] && pos == line.length() - 1) [ CD ]
Line_438 $$ int i = 0-->Line_444 $$ for (int i = 0; i < mthds.length; i++) [ FD ]
Line_351 $$ int i = 0-->Line_444 $$ for (int i = 0; i < mthds.length; i++) [ FD ]
Line_317 $$ int i = 0-->Line_444 $$ for (int i = 0; i < mthds.length; i++) [ FD ]
Line_312 $$ int i = 0-->Line_444 $$ for (int i = 0; i < mthds.length; i++) [ FD ]
Line_444 $$ for (int i = 0; i < mthds.length; i++) -->Line_444 $$ int i = 0[ CD ]
Line_444 $$ for (int i = 0; i < mthds.length; i++) -->Line_444 $$ i++[ CD ]
Line_444 $$ int i = 0-->Line_444 $$ i++[ FD ]
Line_438 $$ int i = 0-->Line_444 $$ i++[ FD ]
Line_351 $$ int i = 0-->Line_444 $$ i++[ FD ]
Line_317 $$ int i = 0-->Line_444 $$ i++[ FD ]
Line_312 $$ int i = 0-->Line_444 $$ i++[ FD ]
Line_444 $$ for (int i = 0; i < mthds.length; i++) -->Line_445 $$ if (mthds[i].getName().startsWith(line.substring(pos + 1))) [ CD ]
Line_445 $$ if (mthds[i].getName().startsWith(line.substring(pos + 1))) -->Line_445 $$ mthds[i].getName().startsWith(line.substring(pos + 1))[ CD ]
Line_426 $$ String line = in.readLine()-->Line_445 $$ line.substring(pos + 1)[ FD ]
Line_432 $$ line += "/"-->Line_445 $$ line.substring(pos + 1)[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_445 $$ line.substring(pos + 1)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_445 $$ line.substring(pos + 1)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_445 $$ line.substring(pos + 1)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_445 $$ line.substring(pos + 1)[ FD ]
Line_445 $$ if (mthds[i].getName().startsWith(line.substring(pos + 1))) -->Line_446 $$ values[++maxUsed] = mthds[i][ CD ]
Line_434 $$ if (pos != -1) -->Line_451 $$ StringTokenizer st = new StringTokenizer(line)[ CD ]
Line_451 $$ StringTokenizer st = new StringTokenizer(line)-->Line_452 $$ st.nextToken()[ FD ]
Line_434 $$ if (pos != -1) -->Line_453 $$ String mthIdx = st.nextToken()[ CD ]
Line_453 $$ String mthIdx = st.nextToken()-->Line_453 $$ st.nextToken()[ CD ]
Line_451 $$ StringTokenizer st = new StringTokenizer(line)-->Line_453 $$ st.nextToken()[ FD ]
Line_434 $$ if (pos != -1) -->Line_454 $$ Object[] args = new Object[st.countTokens()][ CD ]
Line_451 $$ StringTokenizer st = new StringTokenizer(line)-->Line_454 $$ st.countTokens()[ FD ]
Line_434 $$ if (pos != -1) -->Line_455 $$ for (int i = 0; i < args.length; i++) [ CD ]
Line_434 $$ if (pos != -1) -->Line_434 $$ if (pos != -1) [ CD ]
Line_444 $$ int i = 0-->Line_455 $$ for (int i = 0; i < args.length; i++) [ FD ]
Line_438 $$ int i = 0-->Line_455 $$ for (int i = 0; i < args.length; i++) [ FD ]
Line_351 $$ int i = 0-->Line_455 $$ for (int i = 0; i < args.length; i++) [ FD ]
Line_317 $$ int i = 0-->Line_455 $$ for (int i = 0; i < args.length; i++) [ FD ]
Line_312 $$ int i = 0-->Line_455 $$ for (int i = 0; i < args.length; i++) [ FD ]
Line_455 $$ for (int i = 0; i < args.length; i++) -->Line_455 $$ int i = 0[ CD ]
Line_455 $$ for (int i = 0; i < args.length; i++) -->Line_455 $$ i++[ CD ]
Line_455 $$ int i = 0-->Line_455 $$ i++[ FD ]
Line_444 $$ int i = 0-->Line_455 $$ i++[ FD ]
Line_438 $$ int i = 0-->Line_455 $$ i++[ FD ]
Line_351 $$ int i = 0-->Line_455 $$ i++[ FD ]
Line_317 $$ int i = 0-->Line_455 $$ i++[ FD ]
Line_312 $$ int i = 0-->Line_455 $$ i++[ FD ]
Line_455 $$ for (int i = 0; i < args.length; i++) -->Line_456 $$ args[i] = values[Integer.parseInt(st.nextToken())][ CD ]
Line_451 $$ StringTokenizer st = new StringTokenizer(line)-->Line_456 $$ st.nextToken()[ FD ]
Line_434 $$ if (pos != -1) -->Line_458 $$ if (mthIdx.equals("[")) [ CD ]
Line_453 $$ String mthIdx = st.nextToken()-->Line_458 $$ if (mthIdx.equals("[")) [ FD ]
Line_458 $$ if (mthIdx.equals("[")) -->Line_458 $$ mthIdx.equals("[")[ CD ]
Line_453 $$ String mthIdx = st.nextToken()-->Line_458 $$ mthIdx.equals("[")[ FD ]
Line_458 $$ if (mthIdx.equals("[")) -->Line_459 $$ Object[] result = (Object[]) Array.newInstance((Class) obj, args.length)[ CD ]
Line_458 $$ if (mthIdx.equals("[")) -->Line_460 $$ System.arraycopy(args, 0, result, 0, args.length)[ CD ]
Line_454 $$ Object[] args = new Object[st.countTokens()]-->Line_460 $$ System.arraycopy(args, 0, result, 0, args.length)[ FD ]
Line_459 $$ Object[] result = (Object[]) Array.newInstance((Class) obj, args.length)-->Line_460 $$ System.arraycopy(args, 0, result, 0, args.length)[ FD ]
Line_458 $$ if (mthIdx.equals("[")) -->Line_461 $$ values[++maxUsed] = result[ CD ]
Line_459 $$ Object[] result = (Object[]) Array.newInstance((Class) obj, args.length)-->Line_461 $$ values[++maxUsed] = result[ FD ]
Line_458 $$ if (mthIdx.equals("[")) -->Line_463 $$ Method mth = (Method) values[Integer.parseInt(mthIdx)][ CD ]
Line_453 $$ String mthIdx = st.nextToken()-->Line_463 $$ Integer.parseInt(mthIdx)[ FD ]
Line_458 $$ if (mthIdx.equals("[")) -->Line_464 $$ values[++maxUsed] = mth.invoke(obj, args)[ CD ]
Line_464 $$ values[++maxUsed] = mth.invoke(obj, args)-->Line_464 $$ mth.invoke(obj, args)[ CD ]
Line_463 $$ Method mth = (Method) values[Integer.parseInt(mthIdx)]-->Line_464 $$ mth.invoke(obj, args)[ FD ]
Line_435 $$ Object obj = values[Integer.parseInt(line.substring(0, pos).trim())]-->Line_464 $$ mth.invoke(obj, args)[ FD ]
Line_454 $$ Object[] args = new Object[st.countTokens()]-->Line_464 $$ mth.invoke(obj, args)[ FD ]
Line_0 $$ Entry-->Line_471 $$ public class func [ CD ]
Line_471 $$ public class func -->Line_472 $$ public void GenJCov(Environment env) [ CD ]
Line_472 $$ public void GenJCov(Environment env) -->Line_473 $$ File outFile = env.getcovFile()[ CD ]
Line_473 $$ File outFile = env.getcovFile()-->Line_473 $$ env.getcovFile()[ CD ]
Line_472 $$ public void GenJCov(Environment env) -->Line_474 $$ if (outFile.exists()) [ CD ]
Line_473 $$ File outFile = env.getcovFile()-->Line_474 $$ if (outFile.exists()) [ FD ]
Line_474 $$ if (outFile.exists()) -->Line_474 $$ outFile.exists()[ CD ]
Line_473 $$ File outFile = env.getcovFile()-->Line_474 $$ outFile.exists()[ FD ]
Line_474 $$ if (outFile.exists()) -->Line_475 $$ DataInputStream JCovd = new DataInputStream(new BufferedInputStream(new FileInputStream(outFile)))[ CD ]
Line_474 $$ if (outFile.exists()) -->Line_478 $$ String CurrLine = null[ CD ]
Line_474 $$ if (outFile.exists()) -->Line_479 $$ boolean first = true[ CD ]
Line_474 $$ if (outFile.exists()) -->Line_480 $$ String Class[ CD ]
Line_474 $$ if (outFile.exists()) -->Line_482 $$ CurrLine = JCovd.readLine()[ CD ]
Line_478 $$ String CurrLine = null-->Line_482 $$ CurrLine = JCovd.readLine()[ FD ]
Line_482 $$ CurrLine = JCovd.readLine()-->Line_482 $$ CurrLine = JCovd.readLine()[ FD ]
Line_482 $$ CurrLine = JCovd.readLine()-->Line_482 $$ JCovd.readLine()[ CD ]
Line_475 $$ DataInputStream JCovd = new DataInputStream(new BufferedInputStream(new FileInputStream(outFile)))-->Line_482 $$ JCovd.readLine()[ FD ]
Line_474 $$ if (outFile.exists()) -->Line_483 $$ if ((CurrLine != null) && CurrLine.startsWith(JcovMagicLine)) [ CD ]
Line_478 $$ String CurrLine = null-->Line_483 $$ CurrLine.startsWith(JcovMagicLine)[ FD ]
Line_482 $$ CurrLine = JCovd.readLine()-->Line_483 $$ CurrLine.startsWith(JcovMagicLine)[ FD ]
Line_483 $$ if ((CurrLine != null) && CurrLine.startsWith(JcovMagicLine)) -->Line_486 $$ while ((CurrLine = JCovd.readLine()) != null) [ CD ]
Line_483 $$ if ((CurrLine != null) && CurrLine.startsWith(JcovMagicLine)) -->Line_483 $$ if ((CurrLine != null) && CurrLine.startsWith(JcovMagicLine)) [ CD ]
Line_486 $$ CurrLine = JCovd.readLine()-->Line_486 $$ CurrLine = JCovd.readLine()[ FD ]
Line_478 $$ String CurrLine = null-->Line_486 $$ CurrLine = JCovd.readLine()[ FD ]
Line_482 $$ CurrLine = JCovd.readLine()-->Line_486 $$ CurrLine = JCovd.readLine()[ FD ]
Line_486 $$ CurrLine = JCovd.readLine()-->Line_486 $$ JCovd.readLine()[ CD ]
Line_475 $$ DataInputStream JCovd = new DataInputStream(new BufferedInputStream(new FileInputStream(outFile)))-->Line_486 $$ JCovd.readLine()[ FD ]
Line_486 $$ while ((CurrLine = JCovd.readLine()) != null) -->Line_487 $$ if (CurrLine.startsWith(JcovClassLine)) [ CD ]
Line_486 $$ CurrLine = JCovd.readLine()-->Line_487 $$ if (CurrLine.startsWith(JcovClassLine)) [ FD ]
Line_478 $$ String CurrLine = null-->Line_487 $$ if (CurrLine.startsWith(JcovClassLine)) [ FD ]
Line_482 $$ CurrLine = JCovd.readLine()-->Line_487 $$ if (CurrLine.startsWith(JcovClassLine)) [ FD ]
Line_487 $$ if (CurrLine.startsWith(JcovClassLine)) -->Line_487 $$ CurrLine.startsWith(JcovClassLine)[ CD ]
Line_486 $$ CurrLine = JCovd.readLine()-->Line_487 $$ CurrLine.startsWith(JcovClassLine)[ FD ]
Line_478 $$ String CurrLine = null-->Line_487 $$ CurrLine.startsWith(JcovClassLine)[ FD ]
Line_482 $$ CurrLine = JCovd.readLine()-->Line_487 $$ CurrLine.startsWith(JcovClassLine)[ FD ]
Line_487 $$ if (CurrLine.startsWith(JcovClassLine)) -->Line_488 $$ first = true[ CD ]
Line_488 $$ first = true-->Line_488 $$ first = true[ FD ]
Line_479 $$ boolean first = true-->Line_488 $$ first = true[ FD ]
Line_487 $$ if (CurrLine.startsWith(JcovClassLine)) -->Line_489 $$ for (Enumeration e = SourceClassList.elements(); e.hasMoreElements(); ) [ CD ]
Line_487 $$ if (CurrLine.startsWith(JcovClassLine)) -->Line_487 $$ if (CurrLine.startsWith(JcovClassLine)) [ CD ]
Line_489 $$ for (Enumeration e = SourceClassList.elements(); e.hasMoreElements(); ) -->Line_489 $$ e.hasMoreElements()[ CD ]
Line_293 $$ final Enumeration e = System.getProperties().propertyNames()-->Line_489 $$ e.hasMoreElements()[ FD ]
Line_489 $$ for (Enumeration e = SourceClassList.elements(); e.hasMoreElements(); ) -->Line_489 $$ Enumeration e = SourceClassList.elements()[ CD ]
Line_489 $$ Enumeration e = SourceClassList.elements()-->Line_489 $$ SourceClassList.elements()[ CD ]
Line_489 $$ for (Enumeration e = SourceClassList.elements(); e.hasMoreElements(); ) -->Line_490 $$ String clsName = CurrLine.substring(JcovClassLine.length())[ CD ]
Line_490 $$ String clsName = CurrLine.substring(JcovClassLine.length())-->Line_490 $$ CurrLine.substring(JcovClassLine.length())[ CD ]
Line_486 $$ CurrLine = JCovd.readLine()-->Line_490 $$ CurrLine.substring(JcovClassLine.length())[ FD ]
Line_478 $$ String CurrLine = null-->Line_490 $$ CurrLine.substring(JcovClassLine.length())[ FD ]
Line_482 $$ CurrLine = JCovd.readLine()-->Line_490 $$ CurrLine.substring(JcovClassLine.length())[ FD ]
Line_489 $$ for (Enumeration e = SourceClassList.elements(); e.hasMoreElements(); ) -->Line_491 $$ int idx = clsName.indexOf(' ')[ CD ]
Line_491 $$ int idx = clsName.indexOf(' ')-->Line_491 $$ clsName.indexOf(' ')[ CD ]
Line_490 $$ String clsName = CurrLine.substring(JcovClassLine.length())-->Line_491 $$ clsName.indexOf(' ')[ FD ]
Line_489 $$ for (Enumeration e = SourceClassList.elements(); e.hasMoreElements(); ) -->Line_493 $$ if (idx != -1) [ CD ]
Line_491 $$ int idx = clsName.indexOf(' ')-->Line_493 $$ if (idx != -1) [ FD ]
Line_493 $$ if (idx != -1) -->Line_494 $$ clsName = clsName.substring(0, idx)[ CD ]
Line_490 $$ String clsName = CurrLine.substring(JcovClassLine.length())-->Line_494 $$ clsName = clsName.substring(0, idx)[ FD ]
Line_494 $$ clsName = clsName.substring(0, idx)-->Line_494 $$ clsName = clsName.substring(0, idx)[ FD ]
Line_494 $$ clsName = clsName.substring(0, idx)-->Line_494 $$ clsName.substring(0, idx)[ CD ]
Line_490 $$ String clsName = CurrLine.substring(JcovClassLine.length())-->Line_494 $$ clsName.substring(0, idx)[ FD ]
Line_494 $$ clsName = clsName.substring(0, idx)-->Line_494 $$ clsName.substring(0, idx)[ FD ]
Line_491 $$ int idx = clsName.indexOf(' ')-->Line_494 $$ clsName.substring(0, idx)[ FD ]
Line_489 $$ for (Enumeration e = SourceClassList.elements(); e.hasMoreElements(); ) -->Line_496 $$ Class = (String) e.nextElement()[ CD ]
Line_496 $$ Class = (String) e.nextElement()-->Line_496 $$ Class = (String) e.nextElement()[ FD ]
Line_480 $$ String Class-->Line_496 $$ Class = (String) e.nextElement()[ FD ]
Line_489 $$ Enumeration e = SourceClassList.elements()-->Line_496 $$ e.nextElement()[ FD ]
Line_293 $$ final Enumeration e = System.getProperties().propertyNames()-->Line_496 $$ e.nextElement()[ FD ]
Line_489 $$ for (Enumeration e = SourceClassList.elements(); e.hasMoreElements(); ) -->Line_497 $$ if (Class.compareTo(clsName) == 0) [ CD ]
Line_496 $$ Class = (String) e.nextElement()-->Line_497 $$ Class.compareTo(clsName)[ FD ]
Line_480 $$ String Class-->Line_497 $$ Class.compareTo(clsName)[ FD ]
Line_490 $$ String clsName = CurrLine.substring(JcovClassLine.length())-->Line_497 $$ Class.compareTo(clsName)[ FD ]
Line_494 $$ clsName = clsName.substring(0, idx)-->Line_497 $$ Class.compareTo(clsName)[ FD ]
Line_497 $$ if (Class.compareTo(clsName) == 0) -->Line_498 $$ first = false[ CD ]
Line_498 $$ first = false-->Line_498 $$ first = false[ FD ]
Line_488 $$ first = true-->Line_498 $$ first = false[ FD ]
Line_479 $$ boolean first = true-->Line_498 $$ first = false[ FD ]
Line_486 $$ while ((CurrLine = JCovd.readLine()) != null) -->Line_503 $$ if (first)
    TmpCovTable.addElement(CurrLine);[ CD ]
Line_503 $$ if (first)
    TmpCovTable.addElement(CurrLine);-->Line_504 $$ TmpCovTable.addElement(CurrLine)[ CD ]
Line_486 $$ CurrLine = JCovd.readLine()-->Line_504 $$ TmpCovTable.addElement(CurrLine)[ FD ]
Line_478 $$ String CurrLine = null-->Line_504 $$ TmpCovTable.addElement(CurrLine)[ FD ]
Line_482 $$ CurrLine = JCovd.readLine()-->Line_504 $$ TmpCovTable.addElement(CurrLine)[ FD ]
Line_474 $$ if (outFile.exists()) -->Line_507 $$ JCovd.close()[ CD ]
Line_475 $$ DataInputStream JCovd = new DataInputStream(new BufferedInputStream(new FileInputStream(outFile)))-->Line_507 $$ JCovd.close()[ FD ]
Line_472 $$ public void GenJCov(Environment env) -->Line_509 $$ PrintStream CovFile = new PrintStream(new DataOutputStream(new FileOutputStream(outFile)))[ CD ]
Line_472 $$ public void GenJCov(Environment env) -->Line_510 $$ CovFile.println(JcovMagicLine)[ CD ]
Line_509 $$ PrintStream CovFile = new PrintStream(new DataOutputStream(new FileOutputStream(outFile)))-->Line_510 $$ CovFile.println(JcovMagicLine)[ FD ]
Line_0 $$ Entry-->Line_514 $$ public class func [ CD ]
Line_514 $$ public class func -->Line_515 $$ public void decode() [ CD ]
Line_515 $$ public void decode() -->Line_516 $$ if (raw != null) [ CD ]
Line_519 $$ String n = br.readLine()-->Line_519 $$ br.readLine()[ CD ]
Line_518 $$ DataInputStream br = new DataInputStream(new ByteArrayInputStream(raw))-->Line_519 $$ br.readLine()[ FD ]
Line_520 $$ !n.startsWith("tree ")-->Line_520 $$ n.startsWith("tree ")[ CD ]
Line_519 $$ String n = br.readLine()-->Line_520 $$ n.startsWith("tree ")[ FD ]
Line_523 $$ n = br.readLine()-->Line_523 $$ n = br.readLine()[ FD ]
Line_519 $$ String n = br.readLine()-->Line_523 $$ n = br.readLine()[ FD ]
Line_523 $$ n = br.readLine()-->Line_523 $$ br.readLine()[ CD ]
Line_518 $$ DataInputStream br = new DataInputStream(new ByteArrayInputStream(raw))-->Line_523 $$ br.readLine()[ FD ]
Line_523 $$ n = br.readLine()-->Line_523 $$ n.startsWith("parent ")[ FD ]
Line_519 $$ String n = br.readLine()-->Line_523 $$ n.startsWith("parent ")[ FD ]
Line_526 $$ !n.startsWith("author ")-->Line_526 $$ n.startsWith("author ")[ CD ]
Line_523 $$ n = br.readLine()-->Line_526 $$ n.startsWith("author ")[ FD ]
Line_519 $$ String n = br.readLine()-->Line_526 $$ n.startsWith("author ")[ FD ]
Line_529 $$ String rawAuthor = n.substring("author ".length())-->Line_529 $$ n.substring("author ".length())[ CD ]
Line_523 $$ n = br.readLine()-->Line_529 $$ n.substring("author ".length())[ FD ]
Line_519 $$ String n = br.readLine()-->Line_529 $$ n.substring("author ".length())[ FD ]
Line_523 $$ n = br.readLine()-->Line_530 $$ n = br.readLine()[ FD ]
Line_519 $$ String n = br.readLine()-->Line_530 $$ n = br.readLine()[ FD ]
Line_530 $$ n = br.readLine()-->Line_530 $$ n = br.readLine()[ FD ]
Line_530 $$ n = br.readLine()-->Line_530 $$ br.readLine()[ CD ]
Line_518 $$ DataInputStream br = new DataInputStream(new ByteArrayInputStream(raw))-->Line_530 $$ br.readLine()[ FD ]
Line_531 $$ !n.startsWith("committer ")-->Line_531 $$ n.startsWith("committer ")[ CD ]
Line_523 $$ n = br.readLine()-->Line_531 $$ n.startsWith("committer ")[ FD ]
Line_519 $$ String n = br.readLine()-->Line_531 $$ n.startsWith("committer ")[ FD ]
Line_530 $$ n = br.readLine()-->Line_531 $$ n.startsWith("committer ")[ FD ]
Line_534 $$ String rawCommitter = n.substring("committer ".length())-->Line_534 $$ n.substring("committer ".length())[ CD ]
Line_523 $$ n = br.readLine()-->Line_534 $$ n.substring("committer ".length())[ FD ]
Line_519 $$ String n = br.readLine()-->Line_534 $$ n.substring("committer ".length())[ FD ]
Line_530 $$ n = br.readLine()-->Line_534 $$ n.substring("committer ".length())[ FD ]
Line_523 $$ n = br.readLine()-->Line_535 $$ n = br.readLine()[ FD ]
Line_519 $$ String n = br.readLine()-->Line_535 $$ n = br.readLine()[ FD ]
Line_530 $$ n = br.readLine()-->Line_535 $$ n = br.readLine()[ FD ]
Line_535 $$ n = br.readLine()-->Line_535 $$ n = br.readLine()[ FD ]
Line_535 $$ n = br.readLine()-->Line_535 $$ br.readLine()[ CD ]
Line_518 $$ DataInputStream br = new DataInputStream(new ByteArrayInputStream(raw))-->Line_535 $$ br.readLine()[ FD ]
Line_523 $$ n = br.readLine()-->Line_536 $$ n.startsWith("encoding")[ FD ]
Line_519 $$ String n = br.readLine()-->Line_536 $$ n.startsWith("encoding")[ FD ]
Line_530 $$ n = br.readLine()-->Line_536 $$ n.startsWith("encoding")[ FD ]
Line_535 $$ n = br.readLine()-->Line_536 $$ n.startsWith("encoding")[ FD ]
Line_536 $$ if (n != null && n.startsWith("encoding"))
    encoding = Charset.forName(n.substring("encoding ".length()));
else if (n == null || !n.equals("")) -->Line_537 $$ Charset.forName(n.substring("encoding ".length()))[ CD ]
Line_523 $$ n = br.readLine()-->Line_537 $$ n.substring("encoding ".length())[ FD ]
Line_519 $$ String n = br.readLine()-->Line_537 $$ n.substring("encoding ".length())[ FD ]
Line_530 $$ n = br.readLine()-->Line_537 $$ n.substring("encoding ".length())[ FD ]
Line_535 $$ n = br.readLine()-->Line_537 $$ n.substring("encoding ".length())[ FD ]
Line_536 $$ if (n != null && n.startsWith("encoding"))
    encoding = Charset.forName(n.substring("encoding ".length()));
else if (n == null || !n.equals("")) -->Line_539 $$ if (n == null || !n.equals("")) [ CD ]
Line_539 $$ !n.equals("")-->Line_539 $$ n.equals("")[ CD ]
Line_523 $$ n = br.readLine()-->Line_539 $$ n.equals("")[ FD ]
Line_519 $$ String n = br.readLine()-->Line_539 $$ n.equals("")[ FD ]
Line_530 $$ n = br.readLine()-->Line_539 $$ n.equals("")[ FD ]
Line_535 $$ n = br.readLine()-->Line_539 $$ n.equals("")[ FD ]
Line_518 $$ DataInputStream br = new DataInputStream(new ByteArrayInputStream(raw))-->Line_543 $$ br.available()[ FD ]
Line_518 $$ DataInputStream br = new DataInputStream(new ByteArrayInputStream(raw))-->Line_544 $$ br.read(readBuf)[ FD ]
Line_543 $$ byte[] readBuf = new byte[br.available()]-->Line_544 $$ br.read(readBuf)[ FD ]
Line_529 $$ String rawAuthor = n.substring("author ".length())-->Line_549 $$ rawAuthor.getBytes()[ FD ]
Line_534 $$ String rawCommitter = n.substring("committer ".length())-->Line_550 $$ rawCommitter.getBytes()[ FD ]
Line_529 $$ String rawAuthor = n.substring("author ".length())-->Line_554 $$ rawAuthor.getBytes()[ FD ]
Line_534 $$ String rawCommitter = n.substring("committer ".length())-->Line_555 $$ rawCommitter.getBytes()[ FD ]
Line_489 $$ Enumeration e = SourceClassList.elements()-->Line_559 $$ e.printStackTrace()[ FD ]
Line_293 $$ final Enumeration e = System.getProperties().propertyNames()-->Line_559 $$ e.printStackTrace()[ FD ]
Line_0 $$ Entry-->Line_567 $$ //8
public class func [ CD ]
Line_567 $$ //8
public class func -->Line_568 $$ public void readHeader(DataInputStream in) [ CD ]
Line_568 $$ public void readHeader(DataInputStream in) -->Line_569 $$ String buf = in.readLine()[ CD ]
Line_569 $$ String buf = in.readLine()-->Line_569 $$ in.readLine()[ CD ]
Line_568 $$ public void readHeader(DataInputStream in) -->Line_570 $$ if (buf == null) [ CD ]
Line_569 $$ String buf = in.readLine()-->Line_570 $$ if (buf == null) [ FD ]
Line_568 $$ public void readHeader(DataInputStream in) -->Line_573 $$ if (buf.charAt(0) == '#' && buf.charAt(1) == '?') [ CD ]
Line_569 $$ String buf = in.readLine()-->Line_573 $$ buf.charAt(0)[ FD ]
Line_569 $$ String buf = in.readLine()-->Line_573 $$ buf.charAt(1)[ FD ]
Line_573 $$ if (buf.charAt(0) == '#' && buf.charAt(1) == '?') -->Line_575 $$ buf.substring(2)[ CD ]
Line_569 $$ String buf = in.readLine()-->Line_575 $$ buf.substring(2)[ FD ]
Line_573 $$ if (buf.charAt(0) == '#' && buf.charAt(1) == '?') -->Line_576 $$ buf = in.readLine()[ CD ]
Line_569 $$ String buf = in.readLine()-->Line_576 $$ buf = in.readLine()[ FD ]
Line_576 $$ buf = in.readLine()-->Line_576 $$ buf = in.readLine()[ FD ]
Line_576 $$ buf = in.readLine()-->Line_576 $$ in.readLine()[ CD ]
Line_573 $$ if (buf.charAt(0) == '#' && buf.charAt(1) == '?') -->Line_577 $$ if (buf == null) [ CD ]
Line_569 $$ String buf = in.readLine()-->Line_577 $$ if (buf == null) [ FD ]
Line_576 $$ buf = in.readLine()-->Line_577 $$ if (buf == null) [ FD ]
Line_0 $$ Entry-->Line_584 $$ //9
public class func [ CD ]
Line_584 $$ //9
public class func -->Line_585 $$ public void decode() [ CD ]
Line_585 $$ public void decode() -->Line_586 $$ String rawCommitter = n.substring("committer ".length())[ CD ]
Line_586 $$ String rawCommitter = n.substring("committer ".length())-->Line_586 $$ n.substring("committer ".length())[ CD ]
Line_523 $$ n = br.readLine()-->Line_586 $$ n.substring("committer ".length())[ FD ]
Line_519 $$ String n = br.readLine()-->Line_586 $$ n.substring("committer ".length())[ FD ]
Line_530 $$ n = br.readLine()-->Line_586 $$ n.substring("committer ".length())[ FD ]
Line_535 $$ n = br.readLine()-->Line_586 $$ n.substring("committer ".length())[ FD ]
Line_585 $$ public void decode() -->Line_587 $$ br.readLine()[ CD ]
Line_518 $$ DataInputStream br = new DataInputStream(new ByteArrayInputStream(raw))-->Line_587 $$ br.readLine()[ FD ]
Line_585 $$ public void decode() -->Line_588 $$ if (n != null && n.startsWith("encoding"))
    encoding = Charset.forName(n.substring("encoding ".length()));
else if (n == null || !n.equals("")) [ CD ]
Line_523 $$ n = br.readLine()-->Line_588 $$ n.startsWith("encoding")[ FD ]
Line_519 $$ String n = br.readLine()-->Line_588 $$ n.startsWith("encoding")[ FD ]
Line_530 $$ n = br.readLine()-->Line_588 $$ n.startsWith("encoding")[ FD ]
Line_535 $$ n = br.readLine()-->Line_588 $$ n.startsWith("encoding")[ FD ]
Line_588 $$ if (n != null && n.startsWith("encoding"))
    encoding = Charset.forName(n.substring("encoding ".length()));
else if (n == null || !n.equals("")) -->Line_589 $$ Charset.forName(n.substring("encoding ".length()))[ CD ]
Line_523 $$ n = br.readLine()-->Line_589 $$ n.substring("encoding ".length())[ FD ]
Line_519 $$ String n = br.readLine()-->Line_589 $$ n.substring("encoding ".length())[ FD ]
Line_530 $$ n = br.readLine()-->Line_589 $$ n.substring("encoding ".length())[ FD ]
Line_535 $$ n = br.readLine()-->Line_589 $$ n.substring("encoding ".length())[ FD ]
Line_588 $$ if (n != null && n.startsWith("encoding"))
    encoding = Charset.forName(n.substring("encoding ".length()));
else if (n == null || !n.equals("")) -->Line_591 $$ if (n == null || !n.equals("")) [ CD ]
Line_591 $$ !n.equals("")-->Line_591 $$ n.equals("")[ CD ]
Line_523 $$ n = br.readLine()-->Line_591 $$ n.equals("")[ FD ]
Line_519 $$ String n = br.readLine()-->Line_591 $$ n.equals("")[ FD ]
Line_530 $$ n = br.readLine()-->Line_591 $$ n.equals("")[ FD ]
Line_535 $$ n = br.readLine()-->Line_591 $$ n.equals("")[ FD ]
Line_585 $$ public void decode() -->Line_595 $$ byte[] readBuf = new byte[br.available()][ CD ]
Line_518 $$ DataInputStream br = new DataInputStream(new ByteArrayInputStream(raw))-->Line_595 $$ br.available()[ FD ]
Line_585 $$ public void decode() -->Line_596 $$ br.read(readBuf)[ CD ]
Line_518 $$ DataInputStream br = new DataInputStream(new ByteArrayInputStream(raw))-->Line_596 $$ br.read(readBuf)[ FD ]
Line_595 $$ byte[] readBuf = new byte[br.available()]-->Line_596 $$ br.read(readBuf)[ FD ]
Line_543 $$ byte[] readBuf = new byte[br.available()]-->Line_596 $$ br.read(readBuf)[ FD ]
Line_585 $$ public void decode() -->Line_597 $$ if (encoding != null) [ CD ]
Line_529 $$ String rawAuthor = n.substring("author ".length())-->Line_599 $$ rawAuthor.getBytes()[ FD ]
Line_586 $$ String rawCommitter = n.substring("committer ".length())-->Line_600 $$ rawCommitter.getBytes()[ FD ]
Line_534 $$ String rawCommitter = n.substring("committer ".length())-->Line_600 $$ rawCommitter.getBytes()[ FD ]
Line_529 $$ String rawAuthor = n.substring("author ".length())-->Line_604 $$ rawAuthor.getBytes()[ FD ]
Line_586 $$ String rawCommitter = n.substring("committer ".length())-->Line_605 $$ rawCommitter.getBytes()[ FD ]
Line_534 $$ String rawCommitter = n.substring("committer ".length())-->Line_605 $$ rawCommitter.getBytes()[ FD ]
Line_0 $$ Entry-->Line_611 $$ //10
public class func [ CD ]
Line_611 $$ //10
public class func -->Line_612 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) [ CD ]
Line_612 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_613 $$ String line = dis.readLine().trim()[ CD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_613 $$ dis.readLine().trim()[ CD ]
Line_612 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_614 $$ if (line.length() == 0)
    continue;[ CD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_614 $$ line.length()[ FD ]
Line_426 $$ String line = in.readLine()-->Line_614 $$ line.length()[ FD ]
Line_432 $$ line += "/"-->Line_614 $$ line.length()[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_614 $$ line.length()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_614 $$ line.length()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_614 $$ line.length()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_614 $$ line.length()[ FD ]
Line_612 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_616 $$ if (line.equals("exit")) [ CD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_616 $$ if (line.equals("exit")) [ FD ]
Line_426 $$ String line = in.readLine()-->Line_616 $$ if (line.equals("exit")) [ FD ]
Line_432 $$ line += "/"-->Line_616 $$ if (line.equals("exit")) [ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_616 $$ if (line.equals("exit")) [ FD ]
Line_26 $$ line = line.substring(1)-->Line_616 $$ if (line.equals("exit")) [ FD ]
Line_29 $$ line = line.substring(1)-->Line_616 $$ if (line.equals("exit")) [ FD ]
Line_68 $$ line = line.substring(1)-->Line_616 $$ if (line.equals("exit")) [ FD ]
Line_616 $$ if (line.equals("exit")) -->Line_616 $$ line.equals("exit")[ CD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_616 $$ line.equals("exit")[ FD ]
Line_426 $$ String line = in.readLine()-->Line_616 $$ line.equals("exit")[ FD ]
Line_432 $$ line += "/"-->Line_616 $$ line.equals("exit")[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_616 $$ line.equals("exit")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_616 $$ line.equals("exit")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_616 $$ line.equals("exit")[ FD ]
Line_68 $$ line = line.substring(1)-->Line_616 $$ line.equals("exit")[ FD ]
Line_616 $$ if (line.equals("exit")) -->Line_617 $$ boolean mayExit = true[ CD ]
Line_616 $$ if (line.equals("exit")) -->Line_618 $$ for (int i = 0; i < runningStages.size(); i++) [ CD ]
Line_616 $$ if (line.equals("exit")) -->Line_616 $$ if (line.equals("exit")) [ CD ]
Line_455 $$ int i = 0-->Line_618 $$ for (int i = 0; i < runningStages.size(); i++) [ FD ]
Line_444 $$ int i = 0-->Line_618 $$ for (int i = 0; i < runningStages.size(); i++) [ FD ]
Line_438 $$ int i = 0-->Line_618 $$ for (int i = 0; i < runningStages.size(); i++) [ FD ]
Line_351 $$ int i = 0-->Line_618 $$ for (int i = 0; i < runningStages.size(); i++) [ FD ]
Line_317 $$ int i = 0-->Line_618 $$ for (int i = 0; i < runningStages.size(); i++) [ FD ]
Line_312 $$ int i = 0-->Line_618 $$ for (int i = 0; i < runningStages.size(); i++) [ FD ]
Line_618 $$ for (int i = 0; i < runningStages.size(); i++) -->Line_618 $$ runningStages.size()[ CD ]
Line_618 $$ for (int i = 0; i < runningStages.size(); i++) -->Line_618 $$ int i = 0[ CD ]
Line_618 $$ for (int i = 0; i < runningStages.size(); i++) -->Line_618 $$ i++[ CD ]
Line_618 $$ int i = 0-->Line_618 $$ i++[ FD ]
Line_455 $$ int i = 0-->Line_618 $$ i++[ FD ]
Line_444 $$ int i = 0-->Line_618 $$ i++[ FD ]
Line_438 $$ int i = 0-->Line_618 $$ i++[ FD ]
Line_351 $$ int i = 0-->Line_618 $$ i++[ FD ]
Line_317 $$ int i = 0-->Line_618 $$ i++[ FD ]
Line_312 $$ int i = 0-->Line_618 $$ i++[ FD ]
Line_618 $$ for (int i = 0; i < runningStages.size(); i++) -->Line_619 $$ Stage stage = (Stage) runningStages.get(i)[ CD ]
Line_618 $$ int i = 0-->Line_619 $$ runningStages.get(i)[ FD ]
Line_455 $$ int i = 0-->Line_619 $$ runningStages.get(i)[ FD ]
Line_444 $$ int i = 0-->Line_619 $$ runningStages.get(i)[ FD ]
Line_438 $$ int i = 0-->Line_619 $$ runningStages.get(i)[ FD ]
Line_351 $$ int i = 0-->Line_619 $$ runningStages.get(i)[ FD ]
Line_317 $$ int i = 0-->Line_619 $$ runningStages.get(i)[ FD ]
Line_312 $$ int i = 0-->Line_619 $$ runningStages.get(i)[ FD ]
Line_618 $$ for (int i = 0; i < runningStages.size(); i++) -->Line_620 $$ if (stage.isAlive()) [ CD ]
Line_619 $$ Stage stage = (Stage) runningStages.get(i)-->Line_620 $$ if (stage.isAlive()) [ FD ]
Line_620 $$ if (stage.isAlive()) -->Line_620 $$ stage.isAlive()[ CD ]
Line_619 $$ Stage stage = (Stage) runningStages.get(i)-->Line_620 $$ stage.isAlive()[ FD ]
Line_620 $$ if (stage.isAlive()) -->Line_621 $$ consoleOut.println("There are still running stages.")[ CD ]
Line_620 $$ if (stage.isAlive()) -->Line_622 $$ mayExit = false[ CD ]
Line_622 $$ mayExit = false-->Line_622 $$ mayExit = false[ FD ]
Line_617 $$ boolean mayExit = true-->Line_622 $$ mayExit = false[ FD ]
Line_616 $$ if (line.equals("exit")) -->Line_626 $$ if (mayExit)
    break;
else
    continue;[ CD ]
Line_612 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_631 $$ if (line.equals("help")) [ CD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_631 $$ if (line.equals("help")) [ FD ]
Line_426 $$ String line = in.readLine()-->Line_631 $$ if (line.equals("help")) [ FD ]
Line_432 $$ line += "/"-->Line_631 $$ if (line.equals("help")) [ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_631 $$ if (line.equals("help")) [ FD ]
Line_26 $$ line = line.substring(1)-->Line_631 $$ if (line.equals("help")) [ FD ]
Line_29 $$ line = line.substring(1)-->Line_631 $$ if (line.equals("help")) [ FD ]
Line_68 $$ line = line.substring(1)-->Line_631 $$ if (line.equals("help")) [ FD ]
Line_631 $$ if (line.equals("help")) -->Line_631 $$ line.equals("help")[ CD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_631 $$ line.equals("help")[ FD ]
Line_426 $$ String line = in.readLine()-->Line_631 $$ line.equals("help")[ FD ]
Line_432 $$ line += "/"-->Line_631 $$ line.equals("help")[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_631 $$ line.equals("help")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_631 $$ line.equals("help")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_631 $$ line.equals("help")[ FD ]
Line_68 $$ line = line.substring(1)-->Line_631 $$ line.equals("help")[ FD ]
Line_631 $$ if (line.equals("help")) -->Line_632 $$ consoleOut.println("Type a number to switch to that stage.")[ CD ]
Line_631 $$ if (line.equals("help")) -->Line_633 $$ consoleOut.println("Type a new stage with args to run it.")[ CD ]
Line_631 $$ if (line.equals("help")) -->Line_634 $$ consoleOut.println("While connected, type ]> to get back to this prompt.")[ CD ]
Line_612 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_637 $$ int number = Integer.parseInt(line)[ CD ]
Line_637 $$ int number = Integer.parseInt(line)-->Line_637 $$ Integer.parseInt(line)[ CD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_637 $$ Integer.parseInt(line)[ FD ]
Line_426 $$ String line = in.readLine()-->Line_637 $$ Integer.parseInt(line)[ FD ]
Line_432 $$ line += "/"-->Line_637 $$ Integer.parseInt(line)[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_637 $$ Integer.parseInt(line)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_637 $$ Integer.parseInt(line)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_637 $$ Integer.parseInt(line)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_637 $$ Integer.parseInt(line)[ FD ]
Line_0 $$ Entry-->Line_641 $$ //11
public class func [ CD ]
Line_641 $$ //11
public class func -->Line_642 $$ public void createWatermarkInTransaction() [ CD ]
Line_642 $$ public void createWatermarkInTransaction() -->Line_643 $$ File file = new File("/system/etc/setup.conf")[ CD ]
Line_642 $$ public void createWatermarkInTransaction() -->Line_646 $$ String line = ind.readLine()[ CD ]
Line_646 $$ String line = ind.readLine()-->Line_646 $$ ind.readLine()[ CD ]
Line_642 $$ public void createWatermarkInTransaction() -->Line_647 $$ if (line != null) [ CD ]
Line_646 $$ String line = ind.readLine()-->Line_647 $$ if (line != null) [ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_647 $$ if (line != null) [ FD ]
Line_426 $$ String line = in.readLine()-->Line_647 $$ if (line != null) [ FD ]
Line_432 $$ line += "/"-->Line_647 $$ if (line != null) [ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_647 $$ if (line != null) [ FD ]
Line_26 $$ line = line.substring(1)-->Line_647 $$ if (line != null) [ FD ]
Line_29 $$ line = line.substring(1)-->Line_647 $$ if (line != null) [ FD ]
Line_68 $$ line = line.substring(1)-->Line_647 $$ if (line != null) [ FD ]
Line_647 $$ if (line != null) -->Line_648 $$ String[] toks = line.split("%")[ CD ]
Line_648 $$ String[] toks = line.split("%")-->Line_648 $$ line.split("%")[ CD ]
Line_646 $$ String line = ind.readLine()-->Line_648 $$ line.split("%")[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_648 $$ line.split("%")[ FD ]
Line_426 $$ String line = in.readLine()-->Line_648 $$ line.split("%")[ FD ]
Line_432 $$ line += "/"-->Line_648 $$ line.split("%")[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_648 $$ line.split("%")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_648 $$ line.split("%")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_648 $$ line.split("%")[ FD ]
Line_68 $$ line = line.substring(1)-->Line_648 $$ line.split("%")[ FD ]
Line_647 $$ if (line != null) -->Line_649 $$ if (toks != null && toks.length > 0) [ CD ]
Line_0 $$ Entry-->Line_657 $$ //12
public class func [ CD ]
Line_657 $$ //12
public class func -->Line_658 $$ public void createWatermark() [ CD ]
Line_658 $$ public void createWatermark() -->Line_659 $$ File file = new File("/system/etc/setup.conf")[ CD ]
Line_658 $$ public void createWatermark() -->Line_661 $$ DataInputStream ind = new DataInputStream(in)[ CD ]
Line_658 $$ public void createWatermark() -->Line_662 $$ String line = ind.readLine()[ CD ]
Line_662 $$ String line = ind.readLine()-->Line_662 $$ ind.readLine()[ CD ]
Line_661 $$ DataInputStream ind = new DataInputStream(in)-->Line_662 $$ ind.readLine()[ FD ]
Line_658 $$ public void createWatermark() -->Line_663 $$ if (line != null) [ CD ]
Line_662 $$ String line = ind.readLine()-->Line_663 $$ if (line != null) [ FD ]
Line_646 $$ String line = ind.readLine()-->Line_663 $$ if (line != null) [ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_663 $$ if (line != null) [ FD ]
Line_426 $$ String line = in.readLine()-->Line_663 $$ if (line != null) [ FD ]
Line_432 $$ line += "/"-->Line_663 $$ if (line != null) [ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_663 $$ if (line != null) [ FD ]
Line_26 $$ line = line.substring(1)-->Line_663 $$ if (line != null) [ FD ]
Line_29 $$ line = line.substring(1)-->Line_663 $$ if (line != null) [ FD ]
Line_68 $$ line = line.substring(1)-->Line_663 $$ if (line != null) [ FD ]
Line_663 $$ if (line != null) -->Line_664 $$ String[] toks = line.split("%")[ CD ]
Line_664 $$ String[] toks = line.split("%")-->Line_664 $$ line.split("%")[ CD ]
Line_662 $$ String line = ind.readLine()-->Line_664 $$ line.split("%")[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_664 $$ line.split("%")[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_664 $$ line.split("%")[ FD ]
Line_426 $$ String line = in.readLine()-->Line_664 $$ line.split("%")[ FD ]
Line_432 $$ line += "/"-->Line_664 $$ line.split("%")[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_664 $$ line.split("%")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_664 $$ line.split("%")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_664 $$ line.split("%")[ FD ]
Line_68 $$ line = line.substring(1)-->Line_664 $$ line.split("%")[ FD ]
Line_663 $$ if (line != null) -->Line_665 $$ if (toks != null && toks.length > 0) [ CD ]
Line_0 $$ Entry-->Line_672 $$ //13
public class func [ CD ]
Line_672 $$ //13
public class func -->Line_673 $$ public void main(String args[]) [ CD ]
Line_673 $$ public void main(String args[]) -->Line_674 $$ PushbackInputStream pis = new PushbackInputStream((new StringBufferInputStream("\r")))[ CD ]
Line_673 $$ public void main(String args[]) -->Line_676 $$ DataInputStream dis = new DataInputStream(pis)[ CD ]
Line_673 $$ public void main(String args[]) -->Line_677 $$ String line = dis.readLine()[ CD ]
Line_677 $$ String line = dis.readLine()-->Line_677 $$ dis.readLine()[ CD ]
Line_676 $$ DataInputStream dis = new DataInputStream(pis)-->Line_677 $$ dis.readLine()[ FD ]
Line_673 $$ public void main(String args[]) -->Line_678 $$ if (line == null) [ CD ]
Line_677 $$ String line = dis.readLine()-->Line_678 $$ if (line == null) [ FD ]
Line_662 $$ String line = ind.readLine()-->Line_678 $$ if (line == null) [ FD ]
Line_646 $$ String line = ind.readLine()-->Line_678 $$ if (line == null) [ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_678 $$ if (line == null) [ FD ]
Line_426 $$ String line = in.readLine()-->Line_678 $$ if (line == null) [ FD ]
Line_432 $$ line += "/"-->Line_678 $$ if (line == null) [ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_678 $$ if (line == null) [ FD ]
Line_26 $$ line = line.substring(1)-->Line_678 $$ if (line == null) [ FD ]
Line_29 $$ line = line.substring(1)-->Line_678 $$ if (line == null) [ FD ]
Line_68 $$ line = line.substring(1)-->Line_678 $$ if (line == null) [ FD ]
Line_673 $$ public void main(String args[]) -->Line_681 $$ int count = pis.available()[ CD ]
Line_681 $$ int count = pis.available()-->Line_681 $$ pis.available()[ CD ]
Line_674 $$ PushbackInputStream pis = new PushbackInputStream((new StringBufferInputStream("\r")))-->Line_681 $$ pis.available()[ FD ]
Line_673 $$ public void main(String args[]) -->Line_682 $$ if (count != 0) [ CD ]
Line_681 $$ int count = pis.available()-->Line_682 $$ if (count != 0) [ FD ]
Line_0 $$ Entry-->Line_689 $$ //14
public class func [ CD ]
Line_689 $$ //14
public class func -->Line_690 $$ public void isRoot() [ CD ]
Line_690 $$ public void isRoot() -->Line_691 $$ String currUid = osRes.readLine()[ CD ]
Line_691 $$ String currUid = osRes.readLine()-->Line_691 $$ osRes.readLine()[ CD ]
Line_690 $$ public void isRoot() -->Line_692 $$ if (null == currUid) [ CD ]
Line_691 $$ String currUid = osRes.readLine()-->Line_692 $$ if (null == currUid) [ FD ]
Line_692 $$ if (null == currUid) -->Line_696 $$ Log.e("ROOT", "Can't get root access or denied by user")[ CD ]
Line_692 $$ if (null == currUid) -->Line_698 $$ if (true == currUid.contains("uid=0")) [ CD ]
Line_691 $$ String currUid = osRes.readLine()-->Line_698 $$ currUid.contains("uid=0")[ FD ]
Line_698 $$ if (true == currUid.contains("uid=0")) -->Line_707 $$ Log.e("ROOT", "Root access rejected: " + currUid)[ CD ]
Line_0 $$ Entry-->Line_712 $$ //15
public class func [ CD ]
Line_712 $$ //15
public class func -->Line_713 $$ public void parseHeader(DataInputStream in) [ CD ]
Line_713 $$ public void parseHeader(DataInputStream in) -->Line_714 $$ String line = in.readLine()[ CD ]
Line_714 $$ String line = in.readLine()-->Line_714 $$ in.readLine()[ CD ]
Line_713 $$ public void parseHeader(DataInputStream in) -->Line_715 $$ if (line == null) [ CD ]
Line_714 $$ String line = in.readLine()-->Line_715 $$ if (line == null) [ FD ]
Line_677 $$ String line = dis.readLine()-->Line_715 $$ if (line == null) [ FD ]
Line_662 $$ String line = ind.readLine()-->Line_715 $$ if (line == null) [ FD ]
Line_646 $$ String line = ind.readLine()-->Line_715 $$ if (line == null) [ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_715 $$ if (line == null) [ FD ]
Line_426 $$ String line = in.readLine()-->Line_715 $$ if (line == null) [ FD ]
Line_432 $$ line += "/"-->Line_715 $$ if (line == null) [ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_715 $$ if (line == null) [ FD ]
Line_26 $$ line = line.substring(1)-->Line_715 $$ if (line == null) [ FD ]
Line_29 $$ line = line.substring(1)-->Line_715 $$ if (line == null) [ FD ]
Line_68 $$ line = line.substring(1)-->Line_715 $$ if (line == null) [ FD ]
Line_715 $$ if (line == null) -->Line_716 $$ return null;[ CD ]
Line_713 $$ public void parseHeader(DataInputStream in) -->Line_718 $$ String[] strs = line.split(" ")[ CD ]
Line_718 $$ String[] strs = line.split(" ")-->Line_718 $$ line.split(" ")[ CD ]
Line_714 $$ String line = in.readLine()-->Line_718 $$ line.split(" ")[ FD ]
Line_677 $$ String line = dis.readLine()-->Line_718 $$ line.split(" ")[ FD ]
Line_662 $$ String line = ind.readLine()-->Line_718 $$ line.split(" ")[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_718 $$ line.split(" ")[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_718 $$ line.split(" ")[ FD ]
Line_426 $$ String line = in.readLine()-->Line_718 $$ line.split(" ")[ FD ]
Line_432 $$ line += "/"-->Line_718 $$ line.split(" ")[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_718 $$ line.split(" ")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_718 $$ line.split(" ")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_718 $$ line.split(" ")[ FD ]
Line_68 $$ line = line.substring(1)-->Line_718 $$ line.split(" ")[ FD ]
Line_0 $$ Entry-->Line_722 $$ //16
public class func [ CD ]
Line_722 $$ //16
public class func -->Line_723 $$ public void initList() [ CD ]
Line_723 $$ public void initList() -->Line_724 $$ String line = dis.readLine()[ CD ]
Line_724 $$ String line = dis.readLine()-->Line_724 $$ dis.readLine()[ CD ]
Line_676 $$ DataInputStream dis = new DataInputStream(pis)-->Line_724 $$ dis.readLine()[ FD ]
Line_723 $$ public void initList() -->Line_725 $$ if (line == null)
    break;[ CD ]
Line_724 $$ String line = dis.readLine()-->Line_725 $$ if (line == null)
    break;[ FD ]
Line_714 $$ String line = in.readLine()-->Line_725 $$ if (line == null)
    break;[ FD ]
Line_677 $$ String line = dis.readLine()-->Line_725 $$ if (line == null)
    break;[ FD ]
Line_662 $$ String line = ind.readLine()-->Line_725 $$ if (line == null)
    break;[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_725 $$ if (line == null)
    break;[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_725 $$ if (line == null)
    break;[ FD ]
Line_426 $$ String line = in.readLine()-->Line_725 $$ if (line == null)
    break;[ FD ]
Line_432 $$ line += "/"-->Line_725 $$ if (line == null)
    break;[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_725 $$ if (line == null)
    break;[ FD ]
Line_26 $$ line = line.substring(1)-->Line_725 $$ if (line == null)
    break;[ FD ]
Line_29 $$ line = line.substring(1)-->Line_725 $$ if (line == null)
    break;[ FD ]
Line_68 $$ line = line.substring(1)-->Line_725 $$ if (line == null)
    break;[ FD ]
Line_723 $$ public void initList() -->Line_726 $$ String[] tokes = line.split(" ")[ CD ]
Line_726 $$ String[] tokes = line.split(" ")-->Line_726 $$ line.split(" ")[ CD ]
Line_724 $$ String line = dis.readLine()-->Line_726 $$ line.split(" ")[ FD ]
Line_714 $$ String line = in.readLine()-->Line_726 $$ line.split(" ")[ FD ]
Line_677 $$ String line = dis.readLine()-->Line_726 $$ line.split(" ")[ FD ]
Line_662 $$ String line = ind.readLine()-->Line_726 $$ line.split(" ")[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_726 $$ line.split(" ")[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_726 $$ line.split(" ")[ FD ]
Line_426 $$ String line = in.readLine()-->Line_726 $$ line.split(" ")[ FD ]
Line_432 $$ line += "/"-->Line_726 $$ line.split(" ")[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_726 $$ line.split(" ")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_726 $$ line.split(" ")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_726 $$ line.split(" ")[ FD ]
Line_68 $$ line = line.substring(1)-->Line_726 $$ line.split(" ")[ FD ]
Line_723 $$ public void initList() -->Line_727 $$ tableList.add(new WMoTable(tokes[0], tokes[1], tokes[2]))[ CD ]
Line_0 $$ Entry-->Line_731 $$ //17
public class func [ CD ]
Line_731 $$ //17
public class func -->Line_732 $$ public void execFg(String cmd) [ CD ]
Line_732 $$ public void execFg(String cmd) -->Line_733 $$ ds.readLine()[ CD ]
Line_732 $$ public void execFg(String cmd) -->Line_734 $$ if (line == null)
    break;[ CD ]
Line_724 $$ String line = dis.readLine()-->Line_734 $$ if (line == null)
    break;[ FD ]
Line_714 $$ String line = in.readLine()-->Line_734 $$ if (line == null)
    break;[ FD ]
Line_677 $$ String line = dis.readLine()-->Line_734 $$ if (line == null)
    break;[ FD ]
Line_662 $$ String line = ind.readLine()-->Line_734 $$ if (line == null)
    break;[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_734 $$ if (line == null)
    break;[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_734 $$ if (line == null)
    break;[ FD ]
Line_426 $$ String line = in.readLine()-->Line_734 $$ if (line == null)
    break;[ FD ]
Line_432 $$ line += "/"-->Line_734 $$ if (line == null)
    break;[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_734 $$ if (line == null)
    break;[ FD ]
Line_26 $$ line = line.substring(1)-->Line_734 $$ if (line == null)
    break;[ FD ]
Line_29 $$ line = line.substring(1)-->Line_734 $$ if (line == null)
    break;[ FD ]
Line_68 $$ line = line.substring(1)-->Line_734 $$ if (line == null)
    break;[ FD ]
Line_732 $$ public void execFg(String cmd) -->Line_736 $$ rc.add(line)[ CD ]
Line_724 $$ String line = dis.readLine()-->Line_736 $$ rc.add(line)[ FD ]
Line_714 $$ String line = in.readLine()-->Line_736 $$ rc.add(line)[ FD ]
Line_677 $$ String line = dis.readLine()-->Line_736 $$ rc.add(line)[ FD ]
Line_662 $$ String line = ind.readLine()-->Line_736 $$ rc.add(line)[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_736 $$ rc.add(line)[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_736 $$ rc.add(line)[ FD ]
Line_426 $$ String line = in.readLine()-->Line_736 $$ rc.add(line)[ FD ]
Line_432 $$ line += "/"-->Line_736 $$ rc.add(line)[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_736 $$ rc.add(line)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_736 $$ rc.add(line)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_736 $$ rc.add(line)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_736 $$ rc.add(line)[ FD ]
Line_732 $$ public void execFg(String cmd) -->Line_737 $$ p.destroy()[ CD ]
Line_0 $$ Entry-->Line_741 $$ //18
public class func [ CD ]
Line_741 $$ //18
public class func -->Line_742 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) [ CD ]
Line_742 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) -->Line_743 $$ String value = in.readLine()[ CD ]
Line_743 $$ String value = in.readLine()-->Line_743 $$ in.readLine()[ CD ]
Line_742 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) -->Line_744 $$ if (value == null)
    return;[ CD ]
Line_743 $$ String value = in.readLine()-->Line_744 $$ if (value == null)
    return;[ FD ]
Line_744 $$ if (value == null)
    return;-->Line_745 $$ return;[ CD ]
Line_0 $$ Entry-->Line_749 $$ //19
public class func [ CD ]
Line_749 $$ //19
public class func -->Line_750 $$ public void readHeader(DataInputStream in) [ CD ]
Line_750 $$ public void readHeader(DataInputStream in) -->Line_751 $$ in.readLine()[ CD ]
Line_750 $$ public void readHeader(DataInputStream in) -->Line_752 $$ if (buf == null) [ CD ]
Line_569 $$ String buf = in.readLine()-->Line_752 $$ if (buf == null) [ FD ]
Line_576 $$ buf = in.readLine()-->Line_752 $$ if (buf == null) [ FD ]
Line_0 $$ Entry-->Line_758 $$ //20
public class func [ CD ]
Line_758 $$ //20
public class func -->Line_759 $$ public void getNumbers() [ CD ]
Line_759 $$ public void getNumbers() -->Line_760 $$ String line = in.readLine().trim()[ CD ]
Line_760 $$ String line = in.readLine().trim()-->Line_760 $$ in.readLine().trim()[ CD ]
Line_759 $$ public void getNumbers() -->Line_761 $$ if (line.startsWith(prefix)) [ CD ]
Line_760 $$ String line = in.readLine().trim()-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_724 $$ String line = dis.readLine()-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_714 $$ String line = in.readLine()-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_677 $$ String line = dis.readLine()-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_662 $$ String line = ind.readLine()-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_646 $$ String line = ind.readLine()-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_426 $$ String line = in.readLine()-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_432 $$ line += "/"-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_26 $$ line = line.substring(1)-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_29 $$ line = line.substring(1)-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_68 $$ line = line.substring(1)-->Line_761 $$ if (line.startsWith(prefix)) [ FD ]
Line_761 $$ if (line.startsWith(prefix)) -->Line_761 $$ line.startsWith(prefix)[ CD ]
Line_760 $$ String line = in.readLine().trim()-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_724 $$ String line = dis.readLine()-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_714 $$ String line = in.readLine()-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_677 $$ String line = dis.readLine()-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_662 $$ String line = ind.readLine()-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_426 $$ String line = in.readLine()-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_432 $$ line += "/"-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_761 $$ line.startsWith(prefix)[ FD ]
Line_761 $$ if (line.startsWith(prefix)) -->Line_762 $$ String[] numbers = line.substring(prefix.length()).split(" +")[ CD ]
Line_762 $$ String[] numbers = line.substring(prefix.length()).split(" +")-->Line_762 $$ line.substring(prefix.length()).split(" +")[ CD ]
Line_760 $$ String line = in.readLine().trim()-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_724 $$ String line = dis.readLine()-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_714 $$ String line = in.readLine()-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_677 $$ String line = dis.readLine()-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_662 $$ String line = ind.readLine()-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_426 $$ String line = in.readLine()-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_432 $$ line += "/"-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_26 $$ line = line.substring(1)-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_29 $$ line = line.substring(1)-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_68 $$ line = line.substring(1)-->Line_762 $$ line.substring(prefix.length())[ FD ]
Line_761 $$ if (line.startsWith(prefix)) -->Line_763 $$ for (int i = 1; i < 17; ++i) [ CD ]
Line_761 $$ if (line.startsWith(prefix)) -->Line_761 $$ if (line.startsWith(prefix)) [ CD ]
Line_618 $$ int i = 0-->Line_763 $$ for (int i = 1; i < 17; ++i) [ FD ]
Line_455 $$ int i = 0-->Line_763 $$ for (int i = 1; i < 17; ++i) [ FD ]
Line_444 $$ int i = 0-->Line_763 $$ for (int i = 1; i < 17; ++i) [ FD ]
Line_438 $$ int i = 0-->Line_763 $$ for (int i = 1; i < 17; ++i) [ FD ]
Line_351 $$ int i = 0-->Line_763 $$ for (int i = 1; i < 17; ++i) [ FD ]
Line_317 $$ int i = 0-->Line_763 $$ for (int i = 1; i < 17; ++i) [ FD ]
Line_312 $$ int i = 0-->Line_763 $$ for (int i = 1; i < 17; ++i) [ FD ]
Line_763 $$ for (int i = 1; i < 17; ++i) -->Line_763 $$ int i = 1[ CD ]
Line_763 $$ for (int i = 1; i < 17; ++i) -->Line_763 $$ ++i[ CD ]
Line_763 $$ int i = 1-->Line_763 $$ ++i[ FD ]
Line_618 $$ int i = 0-->Line_763 $$ ++i[ FD ]
Line_455 $$ int i = 0-->Line_763 $$ ++i[ FD ]
Line_444 $$ int i = 0-->Line_763 $$ ++i[ FD ]
Line_438 $$ int i = 0-->Line_763 $$ ++i[ FD ]
Line_351 $$ int i = 0-->Line_763 $$ ++i[ FD ]
Line_317 $$ int i = 0-->Line_763 $$ ++i[ FD ]
Line_312 $$ int i = 0-->Line_763 $$ ++i[ FD ]
Line_763 $$ for (int i = 1; i < 17; ++i) -->Line_764 $$ if (!numbers[i].equals("0")) [ CD ]
Line_764 $$ if (!numbers[i].equals("0")) -->Line_764 $$ !numbers[i].equals("0")[ CD ]
Line_764 $$ !numbers[i].equals("0")-->Line_764 $$ numbers[i].equals("0")[ CD ]
Line_764 $$ if (!numbers[i].equals("0")) -->Line_765 $$ return numbers;[ CD ]
Line_0 $$ Entry-->Line_773 $$ //21
public class func [ CD ]
Line_773 $$ //21
public class func -->Line_774 $$ public void main(String args[]) [ CD ]
Line_774 $$ public void main(String args[]) -->Line_775 $$ in.readLine()[ CD ]
Line_774 $$ public void main(String args[]) -->Line_776 $$ if (line.startsWith("quit") || line.startsWith("exit"))
    System.exit(0);[ CD ]
Line_760 $$ String line = in.readLine().trim()-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_724 $$ String line = dis.readLine()-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_714 $$ String line = in.readLine()-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_677 $$ String line = dis.readLine()-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_662 $$ String line = ind.readLine()-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_426 $$ String line = in.readLine()-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_432 $$ line += "/"-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_68 $$ line = line.substring(1)-->Line_776 $$ line.startsWith("quit")[ FD ]
Line_760 $$ String line = in.readLine().trim()-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_724 $$ String line = dis.readLine()-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_714 $$ String line = in.readLine()-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_677 $$ String line = dis.readLine()-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_662 $$ String line = ind.readLine()-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_426 $$ String line = in.readLine()-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_432 $$ line += "/"-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_26 $$ line = line.substring(1)-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_29 $$ line = line.substring(1)-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_68 $$ line = line.substring(1)-->Line_776 $$ line.startsWith("exit")[ FD ]
Line_776 $$ if (line.startsWith("quit") || line.startsWith("exit"))
    System.exit(0);-->Line_777 $$ System.exit(0)[ CD ]
Line_774 $$ public void main(String args[]) -->Line_778 $$ line.getBytes()[ CD ]
Line_760 $$ String line = in.readLine().trim()-->Line_778 $$ line.getBytes()[ FD ]
Line_724 $$ String line = dis.readLine()-->Line_778 $$ line.getBytes()[ FD ]
Line_714 $$ String line = in.readLine()-->Line_778 $$ line.getBytes()[ FD ]
Line_677 $$ String line = dis.readLine()-->Line_778 $$ line.getBytes()[ FD ]
Line_662 $$ String line = ind.readLine()-->Line_778 $$ line.getBytes()[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_778 $$ line.getBytes()[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_778 $$ line.getBytes()[ FD ]
Line_426 $$ String line = in.readLine()-->Line_778 $$ line.getBytes()[ FD ]
Line_432 $$ line += "/"-->Line_778 $$ line.getBytes()[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_778 $$ line.getBytes()[ FD ]
Line_26 $$ line = line.substring(1)-->Line_778 $$ line.getBytes()[ FD ]
Line_29 $$ line = line.substring(1)-->Line_778 $$ line.getBytes()[ FD ]
Line_68 $$ line = line.substring(1)-->Line_778 $$ line.getBytes()[ FD ]
Line_774 $$ public void main(String args[]) -->Line_780 $$ send(packet, sockets)[ CD ]
Line_0 $$ Entry-->Line_784 $$ //22
public class func [ CD ]
Line_784 $$ //22
public class func -->Line_785 $$ public void decode() [ CD ]
Line_785 $$ public void decode() -->Line_786 $$ String rawAuthor = n.substring("author ".length())[ CD ]
Line_786 $$ String rawAuthor = n.substring("author ".length())-->Line_786 $$ n.substring("author ".length())[ CD ]
Line_523 $$ n = br.readLine()-->Line_786 $$ n.substring("author ".length())[ FD ]
Line_519 $$ String n = br.readLine()-->Line_786 $$ n.substring("author ".length())[ FD ]
Line_530 $$ n = br.readLine()-->Line_786 $$ n.substring("author ".length())[ FD ]
Line_535 $$ n = br.readLine()-->Line_786 $$ n.substring("author ".length())[ FD ]
Line_785 $$ public void decode() -->Line_787 $$ br.readLine()[ CD ]
Line_518 $$ DataInputStream br = new DataInputStream(new ByteArrayInputStream(raw))-->Line_787 $$ br.readLine()[ FD ]
Line_785 $$ public void decode() -->Line_788 $$ if (n == null || !n.startsWith("committer ")) [ CD ]
Line_788 $$ !n.startsWith("committer ")-->Line_788 $$ n.startsWith("committer ")[ CD ]
Line_523 $$ n = br.readLine()-->Line_788 $$ n.startsWith("committer ")[ FD ]
Line_519 $$ String n = br.readLine()-->Line_788 $$ n.startsWith("committer ")[ FD ]
Line_530 $$ n = br.readLine()-->Line_788 $$ n.startsWith("committer ")[ FD ]
Line_535 $$ n = br.readLine()-->Line_788 $$ n.startsWith("committer ")[ FD ]
Line_0 $$ Entry-->Line_794 $$ //23
public class func [ CD ]
Line_794 $$ //23
public class func -->Line_795 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) [ CD ]
Line_795 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) -->Line_796 $$ in = new DataInputStream(rebuildInputStream())[ CD ]
Line_796 $$ in = new DataInputStream(rebuildInputStream())-->Line_796 $$ in = new DataInputStream(rebuildInputStream())[ FD ]
Line_795 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) -->Line_797 $$ String line = in.readLine()[ CD ]
Line_797 $$ String line = in.readLine()-->Line_797 $$ in.readLine()[ CD ]
Line_796 $$ in = new DataInputStream(rebuildInputStream())-->Line_797 $$ in.readLine()[ FD ]
Line_795 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) -->Line_798 $$ parseLine(line, stages)[ CD ]
Line_797 $$ String line = in.readLine()-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_760 $$ String line = in.readLine().trim()-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_724 $$ String line = dis.readLine()-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_714 $$ String line = in.readLine()-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_677 $$ String line = dis.readLine()-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_662 $$ String line = ind.readLine()-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_426 $$ String line = in.readLine()-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_432 $$ line += "/"-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_798 $$ parseLine(line, stages)[ FD ]
Line_795 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) -->Line_799 $$ if (stage != null)
    break;[ CD ]
Line_619 $$ Stage stage = (Stage) runningStages.get(i)-->Line_799 $$ if (stage != null)
    break;[ FD ]
Line_0 $$ Entry-->Line_804 $$ //24
public class func [ CD ]
Line_804 $$ //24
public class func -->Line_805 $$ public void prompt(DataInputStream in, PrintStream out) [ CD ]
Line_805 $$ public void prompt(DataInputStream in, PrintStream out) -->Line_806 $$ final String commandline = in.readLine().trim()[ CD ]
Line_806 $$ final String commandline = in.readLine().trim()-->Line_806 $$ in.readLine().trim()[ CD ]
Line_796 $$ in = new DataInputStream(rebuildInputStream())-->Line_806 $$ in.readLine()[ FD ]
Line_805 $$ public void prompt(DataInputStream in, PrintStream out) -->Line_807 $$ if (commandline.length() < 1)
    return;[ CD ]
Line_806 $$ final String commandline = in.readLine().trim()-->Line_807 $$ commandline.length()[ FD ]
Line_807 $$ if (commandline.length() < 1)
    return;-->Line_807 $$ return;[ CD ]
Line_0 $$ Entry-->Line_811 $$ //25
public class func [ CD ]
Line_811 $$ //25
public class func -->Line_812 $$ public void main(String args[]) [ CD ]
Line_812 $$ public void main(String args[]) -->Line_813 $$ String input = dinput.readLine()[ CD ]
Line_813 $$ String input = dinput.readLine()-->Line_813 $$ dinput.readLine()[ CD ]
Line_812 $$ public void main(String args[]) -->Line_814 $$ if (null == input || input.trim().length() == 0)
    break;[ CD ]
Line_813 $$ String input = dinput.readLine()-->Line_814 $$ input.trim()[ FD ]
Line_812 $$ public void main(String args[]) -->Line_816 $$ XPath parser = new XPath(new java.io.StringBufferInputStream(input))[ CD ]
Line_0 $$ Entry-->Line_820 $$ //26
public class func [ CD ]
Line_820 $$ //26
public class func -->Line_821 $$ public void getSchema(String location, Job job) [ CD ]
Line_821 $$ public void getSchema(String location, Job job) -->Line_822 $$ DataInputStream in = fs.open(new Path(location + "/_schema"))[ CD ]
Line_822 $$ DataInputStream in = fs.open(new Path(location + "/_schema"))-->Line_822 $$ fs.open(new Path(location + "/_schema"))[ CD ]
Line_821 $$ public void getSchema(String location, Job job) -->Line_823 $$ String line = in.readLine()[ CD ]
Line_823 $$ String line = in.readLine()-->Line_823 $$ in.readLine()[ CD ]
Line_822 $$ DataInputStream in = fs.open(new Path(location + "/_schema"))-->Line_823 $$ in.readLine()[ FD ]
Line_796 $$ in = new DataInputStream(rebuildInputStream())-->Line_823 $$ in.readLine()[ FD ]
Line_821 $$ public void getSchema(String location, Job job) -->Line_824 $$ in.close()[ CD ]
Line_822 $$ DataInputStream in = fs.open(new Path(location + "/_schema"))-->Line_824 $$ in.close()[ FD ]
Line_796 $$ in = new DataInputStream(rebuildInputStream())-->Line_824 $$ in.close()[ FD ]
Line_823 $$ String line = in.readLine()-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_797 $$ String line = in.readLine()-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_760 $$ String line = in.readLine().trim()-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_724 $$ String line = dis.readLine()-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_714 $$ String line = in.readLine()-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_677 $$ String line = dis.readLine()-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_662 $$ String line = ind.readLine()-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_646 $$ String line = ind.readLine()-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_613 $$ String line = dis.readLine().trim()-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_426 $$ String line = in.readLine()-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_432 $$ line += "/"-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_26 $$ line = line.substring(1)-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_29 $$ line = line.substring(1)-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_68 $$ line = line.substring(1)-->Line_825 $$ Utils.getSchemaFromString(line)[ FD ]
Line_821 $$ public void getSchema(String location, Job job) -->Line_826 $$ if (s == null) [ CD ]
Line_343 $$ Socket s-->Line_826 $$ if (s == null) [ FD ]
Line_344 $$ s = new Socket(params.substring(0, pos), Integer.parseInt(params.substring(pos + 1)))-->Line_826 $$ if (s == null) [ FD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_274 $$ cmd.indexOf("\0$")[ FD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_275 $$ cmd.substring(0, cmd.indexOf("\0$"))[ FD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_275 $$ cmd.indexOf("\0$")[ FD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_275 $$ cmd.substring(cmd.indexOf("\0$") + 2)[ FD ]
Line_275 $$ cmd = cmd.substring(0, cmd.indexOf("\0$")) + cmd.substring(cmd.indexOf("\0$") + 2)-->Line_275 $$ cmd.indexOf("\0$")[ FD ]
Line_295 $$ final String property = (String) e.nextElement()-->Line_296 $$ System.getProperty(property)[ FD ]
Line_312 $$ int i = 0-->Line_312 $$ for (int i = 0; i < roots.length; i++) [ FD ]
Line_312 $$ int i = 0-->Line_312 $$ for (int i = 0; i < roots.length; i++) [ FD ]
Line_312 $$ int i = 0-->Line_312 $$ i++[ FD ]
Line_317 $$ int i = 0-->Line_317 $$ for (int i = 0; i < dir.length; i++) [ FD ]
Line_317 $$ int i = 0-->Line_317 $$ for (int i = 0; i < dir.length; i++) [ FD ]
Line_317 $$ int i = 0-->Line_317 $$ i++[ FD ]
Line_351 $$ int i = 0-->Line_351 $$ for (int i = 0; i < jobs.size(); i++) [ FD ]
Line_351 $$ int i = 0-->Line_351 $$ for (int i = 0; i < jobs.size(); i++) [ FD ]
Line_351 $$ int i = 0-->Line_351 $$ i++[ FD ]
Line_351 $$ int i = 0-->Line_352 $$ jobs.get(i)[ FD ]
Line_438 $$ int i = 0-->Line_438 $$ for (int i = 0; i < arr.length; i++) [ FD ]
Line_438 $$ int i = 0-->Line_438 $$ for (int i = 0; i < arr.length; i++) [ FD ]
Line_438 $$ int i = 0-->Line_438 $$ i++[ FD ]
Line_444 $$ int i = 0-->Line_444 $$ for (int i = 0; i < mthds.length; i++) [ FD ]
Line_444 $$ int i = 0-->Line_444 $$ for (int i = 0; i < mthds.length; i++) [ FD ]
Line_444 $$ int i = 0-->Line_444 $$ i++[ FD ]
Line_455 $$ int i = 0-->Line_455 $$ for (int i = 0; i < args.length; i++) [ FD ]
Line_455 $$ int i = 0-->Line_455 $$ for (int i = 0; i < args.length; i++) [ FD ]
Line_455 $$ int i = 0-->Line_455 $$ i++[ FD ]
Line_486 $$ CurrLine = JCovd.readLine()-->Line_487 $$ if (CurrLine.startsWith(JcovClassLine)) [ FD ]
Line_486 $$ CurrLine = JCovd.readLine()-->Line_487 $$ CurrLine.startsWith(JcovClassLine)[ FD ]
Line_486 $$ CurrLine = JCovd.readLine()-->Line_504 $$ TmpCovTable.addElement(CurrLine)[ FD ]
Line_489 $$ Enumeration e = SourceClassList.elements()-->Line_489 $$ e.hasMoreElements()[ FD ]
Line_490 $$ String clsName = CurrLine.substring(JcovClassLine.length())-->Line_491 $$ clsName.indexOf(' ')[ FD ]
Line_494 $$ clsName = clsName.substring(0, idx)-->Line_491 $$ clsName.indexOf(' ')[ FD ]
Line_491 $$ int idx = clsName.indexOf(' ')-->Line_493 $$ if (idx != -1) [ FD ]
Line_490 $$ String clsName = CurrLine.substring(JcovClassLine.length())-->Line_494 $$ clsName.substring(0, idx)[ FD ]
Line_494 $$ clsName = clsName.substring(0, idx)-->Line_494 $$ clsName.substring(0, idx)[ FD ]
Line_491 $$ int idx = clsName.indexOf(' ')-->Line_494 $$ clsName.substring(0, idx)[ FD ]
Line_489 $$ Enumeration e = SourceClassList.elements()-->Line_496 $$ e.nextElement()[ FD ]
Line_496 $$ Class = (String) e.nextElement()-->Line_497 $$ Class.compareTo(clsName)[ FD ]
Line_490 $$ String clsName = CurrLine.substring(JcovClassLine.length())-->Line_497 $$ Class.compareTo(clsName)[ FD ]
Line_494 $$ clsName = clsName.substring(0, idx)-->Line_497 $$ Class.compareTo(clsName)[ FD ]
Line_523 $$ n = br.readLine()-->Line_523 $$ n.startsWith("parent ")[ FD ]
Line_618 $$ int i = 0-->Line_618 $$ for (int i = 0; i < runningStages.size(); i++) [ FD ]
Line_618 $$ int i = 0-->Line_618 $$ for (int i = 0; i < runningStages.size(); i++) [ FD ]
Line_618 $$ int i = 0-->Line_618 $$ i++[ FD ]
Line_618 $$ int i = 0-->Line_619 $$ runningStages.get(i)[ FD ]
Line_619 $$ Stage stage = (Stage) runningStages.get(i)-->Line_620 $$ if (stage.isAlive()) [ FD ]
Line_619 $$ Stage stage = (Stage) runningStages.get(i)-->Line_620 $$ stage.isAlive()[ FD ]
Line_763 $$ int i = 1-->Line_763 $$ for (int i = 1; i < 17; ++i) [ FD ]
Line_763 $$ int i = 1-->Line_763 $$ for (int i = 1; i < 17; ++i) [ FD ]
Line_763 $$ int i = 1-->Line_763 $$ ++i[ FD ]
