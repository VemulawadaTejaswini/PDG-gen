Line_0 $$ Entry-->Line_2 $$ //4
public class func [ CD ]
Line_2 $$ //4
public class func -->Line_3 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) [ CD ]
Line_3 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_4 $$ String line = input.readLine()[ CD ]
Line_4 $$ String line = input.readLine()-->Line_4 $$ input.readLine()[ CD ]
Line_3 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_5 $$ if (line == null) [ CD ]
Line_4 $$ String line = input.readLine()-->Line_5 $$ if (line == null) [ FD ]
Line_3 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_9 $$ while (line != null && line.length() != 0) [ CD ]
Line_3 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_3 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) [ CD ]
Line_4 $$ String line = input.readLine()-->Line_9 $$ line.length()[ FD ]
Line_9 $$ while (line != null && line.length() != 0) -->Line_11 $$ int dot = line.indexOf(':')[ CD ]
Line_11 $$ int dot = line.indexOf(':')-->Line_11 $$ line.indexOf(':')[ CD ]
Line_4 $$ String line = input.readLine()-->Line_11 $$ line.indexOf(':')[ FD ]
Line_9 $$ while (line != null && line.length() != 0) -->Line_12 $$ if (dot != -1) [ CD ]
Line_11 $$ int dot = line.indexOf(':')-->Line_12 $$ if (dot != -1) [ FD ]
Line_12 $$ if (dot != -1) -->Line_13 $$ String key = line.substring(0, dot).trim()[ CD ]
Line_13 $$ String key = line.substring(0, dot).trim()-->Line_13 $$ line.substring(0, dot).trim()[ CD ]
Line_4 $$ String line = input.readLine()-->Line_13 $$ line.substring(0, dot)[ FD ]
Line_11 $$ int dot = line.indexOf(':')-->Line_13 $$ line.substring(0, dot)[ FD ]
Line_12 $$ if (dot != -1) -->Line_14 $$ String value = line.substring(dot + 1).trim()[ CD ]
Line_14 $$ String value = line.substring(dot + 1).trim()-->Line_14 $$ line.substring(dot + 1).trim()[ CD ]
Line_4 $$ String line = input.readLine()-->Line_14 $$ line.substring(dot + 1)[ FD ]
Line_12 $$ if (dot != -1) -->Line_16 $$ if ("Content-Length".equalsIgnoreCase(key)) [ CD ]
Line_13 $$ String key = line.substring(0, dot).trim()-->Line_16 $$ if ("Content-Length".equalsIgnoreCase(key)) [ FD ]
Line_16 $$ if ("Content-Length".equalsIgnoreCase(key)) -->Line_16 $$ "Content-Length".equalsIgnoreCase(key)[ CD ]
Line_13 $$ String key = line.substring(0, dot).trim()-->Line_16 $$ "Content-Length".equalsIgnoreCase(key)[ FD ]
Line_16 $$ if ("Content-Length".equalsIgnoreCase(key)) -->Line_17 $$ Integer.valueOf(value)[ CD ]
Line_14 $$ String value = line.substring(dot + 1).trim()-->Line_17 $$ Integer.valueOf(value)[ FD ]
Line_16 $$ if ("Content-Length".equalsIgnoreCase(key)) -->Line_18 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) [ CD ]
Line_13 $$ String key = line.substring(0, dot).trim()-->Line_18 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) [ FD ]
Line_18 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) -->Line_18 $$ "Transfer-Encoding".equalsIgnoreCase(key)[ CD ]
Line_13 $$ String key = line.substring(0, dot).trim()-->Line_18 $$ "Transfer-Encoding".equalsIgnoreCase(key)[ FD ]
Line_18 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) -->Line_19 $$ "Chunked".equalsIgnoreCase(value)[ CD ]
Line_14 $$ String value = line.substring(dot + 1).trim()-->Line_19 $$ "Chunked".equalsIgnoreCase(value)[ FD ]
Line_9 $$ while (line != null && line.length() != 0) -->Line_23 $$ line = input.readLine()[ CD ]
Line_23 $$ line = input.readLine()-->Line_23 $$ line = input.readLine()[ FD ]
Line_4 $$ String line = input.readLine()-->Line_23 $$ line = input.readLine()[ FD ]
Line_23 $$ line = input.readLine()-->Line_23 $$ input.readLine()[ CD ]
Line_3 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_25 $$ assertTrue("Need either content length or chunked encoding", length != -1 || chunked)[ CD ]
Line_3 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_27 $$ if (chunked) [ CD ]
Line_27 $$ if (chunked) -->Line_28 $$ Integer.parseInt(input.readLine(), 16)[ CD ]
Line_27 $$ if (chunked) -->Line_29 $$ while (length != 0) [ CD ]
Line_27 $$ if (chunked) -->Line_27 $$ if (chunked) [ CD ]
Line_29 $$ while (length != 0) -->Line_30 $$ byte[] buffer = new byte[length][ CD ]
Line_29 $$ while (length != 0) -->Line_31 $$ input.readFully(buffer)[ CD ]
Line_30 $$ byte[] buffer = new byte[length]-->Line_31 $$ input.readFully(buffer)[ FD ]
Line_29 $$ while (length != 0) -->Line_32 $$ input.readLine()[ CD ]
Line_29 $$ while (length != 0) -->Line_33 $$ Integer.parseInt(input.readLine(), 16)[ CD ]
Line_27 $$ if (chunked) -->Line_35 $$ input.readLine()[ CD ]
Line_27 $$ if (chunked) -->Line_37 $$ byte[] buffer = new byte[length][ CD ]
Line_27 $$ if (chunked) -->Line_38 $$ input.readFully(buffer)[ CD ]
Line_30 $$ byte[] buffer = new byte[length]-->Line_38 $$ input.readFully(buffer)[ FD ]
Line_37 $$ byte[] buffer = new byte[length]-->Line_38 $$ input.readFully(buffer)[ FD ]
Line_3 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_40 $$ input.close()[ CD ]
Line_23 $$ line = input.readLine()-->Line_9 $$ line.length()[ FD ]
Line_23 $$ line = input.readLine()-->Line_11 $$ line.indexOf(':')[ FD ]
Line_11 $$ int dot = line.indexOf(':')-->Line_12 $$ if (dot != -1) [ FD ]
Line_23 $$ line = input.readLine()-->Line_13 $$ line.substring(0, dot)[ FD ]
Line_11 $$ int dot = line.indexOf(':')-->Line_13 $$ line.substring(0, dot)[ FD ]
Line_23 $$ line = input.readLine()-->Line_14 $$ line.substring(dot + 1)[ FD ]
Line_13 $$ String key = line.substring(0, dot).trim()-->Line_16 $$ if ("Content-Length".equalsIgnoreCase(key)) [ FD ]
Line_13 $$ String key = line.substring(0, dot).trim()-->Line_16 $$ "Content-Length".equalsIgnoreCase(key)[ FD ]
Line_14 $$ String value = line.substring(dot + 1).trim()-->Line_17 $$ Integer.valueOf(value)[ FD ]
Line_13 $$ String key = line.substring(0, dot).trim()-->Line_18 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) [ FD ]
Line_13 $$ String key = line.substring(0, dot).trim()-->Line_18 $$ "Transfer-Encoding".equalsIgnoreCase(key)[ FD ]
Line_14 $$ String value = line.substring(dot + 1).trim()-->Line_19 $$ "Chunked".equalsIgnoreCase(value)[ FD ]
Line_30 $$ byte[] buffer = new byte[length]-->Line_31 $$ input.readFully(buffer)[ FD ]
