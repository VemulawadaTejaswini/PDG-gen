Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void HTTPConnectSocket(String host, int port, String proxyHost, int proxyPort) [ CD ]
Line_3 $$ public void HTTPConnectSocket(String host, int port, String proxyHost, int proxyPort) -->Line_4 $$ DataInputStream is = new DataInputStream(getInputStream())[ CD ]
Line_3 $$ public void HTTPConnectSocket(String host, int port, String proxyHost, int proxyPort) -->Line_5 $$ String str = is.readLine()[ CD ]
Line_5 $$ String str = is.readLine()-->Line_5 $$ is.readLine()[ CD ]
Line_4 $$ DataInputStream is = new DataInputStream(getInputStream())-->Line_5 $$ is.readLine()[ FD ]
Line_3 $$ public void HTTPConnectSocket(String host, int port, String proxyHost, int proxyPort) -->Line_6 $$ if (!str.startsWith("HTTP/1.0 200 ")) [ CD ]
Line_6 $$ if (!str.startsWith("HTTP/1.0 200 ")) -->Line_6 $$ !str.startsWith("HTTP/1.0 200 ")[ CD ]
Line_6 $$ !str.startsWith("HTTP/1.0 200 ")-->Line_6 $$ str.startsWith("HTTP/1.0 200 ")[ CD ]
Line_5 $$ String str = is.readLine()-->Line_6 $$ str.startsWith("HTTP/1.0 200 ")[ FD ]
Line_6 $$ if (!str.startsWith("HTTP/1.0 200 ")) -->Line_7 $$ if (str.startsWith("HTTP/1.0 "))
    str = str.substring(9);[ CD ]
Line_5 $$ String str = is.readLine()-->Line_7 $$ if (str.startsWith("HTTP/1.0 "))
    str = str.substring(9);[ FD ]
Line_7 $$ if (str.startsWith("HTTP/1.0 "))
    str = str.substring(9);-->Line_7 $$ str.startsWith("HTTP/1.0 ")[ CD ]
Line_5 $$ String str = is.readLine()-->Line_7 $$ str.startsWith("HTTP/1.0 ")[ FD ]
Line_7 $$ if (str.startsWith("HTTP/1.0 "))
    str = str.substring(9);-->Line_8 $$ str = str.substring(9)[ CD ]
Line_5 $$ String str = is.readLine()-->Line_8 $$ str = str.substring(9)[ FD ]
Line_8 $$ str = str.substring(9)-->Line_8 $$ str = str.substring(9)[ FD ]
Line_8 $$ str = str.substring(9)-->Line_8 $$ str.substring(9)[ CD ]
Line_5 $$ String str = is.readLine()-->Line_8 $$ str.substring(9)[ FD ]
Line_8 $$ str = str.substring(9)-->Line_8 $$ str.substring(9)[ FD ]
Line_3 $$ public void HTTPConnectSocket(String host, int port, String proxyHost, int proxyPort) -->Line_11 $$ do [ CD ]
Line_3 $$ public void HTTPConnectSocket(String host, int port, String proxyHost, int proxyPort) -->Line_3 $$ public void HTTPConnectSocket(String host, int port, String proxyHost, int proxyPort) [ CD ]
Line_11 $$ do -->Line_12 $$ str = is.readLine()[ CD ]
Line_12 $$ str = is.readLine()-->Line_12 $$ str = is.readLine()[ FD ]
Line_5 $$ String str = is.readLine()-->Line_12 $$ str = is.readLine()[ FD ]
Line_8 $$ str = str.substring(9)-->Line_12 $$ str = is.readLine()[ FD ]
Line_12 $$ str = is.readLine()-->Line_12 $$ is.readLine()[ CD ]
Line_4 $$ DataInputStream is = new DataInputStream(getInputStream())-->Line_12 $$ is.readLine()[ FD ]
Line_12 $$ str = is.readLine()-->Line_13 $$ str.length()[ FD ]
Line_5 $$ String str = is.readLine()-->Line_13 $$ str.length()[ FD ]
Line_8 $$ str = str.substring(9)-->Line_13 $$ str.length()[ FD ]
Line_0 $$ Entry-->Line_17 $$ //1
public class func [ CD ]
Line_17 $$ //1
public class func -->Line_18 $$ public void getPath(DataInputStream in) [ CD ]
Line_18 $$ public void getPath(DataInputStream in) -->Line_19 $$ String line = in.readLine()[ CD ]
Line_19 $$ String line = in.readLine()-->Line_19 $$ in.readLine()[ CD ]
Line_18 $$ public void getPath(DataInputStream in) -->Line_20 $$ if (line.startsWith("GET /")) [ CD ]
Line_19 $$ String line = in.readLine()-->Line_20 $$ if (line.startsWith("GET /")) [ FD ]
Line_20 $$ if (line.startsWith("GET /")) -->Line_20 $$ line.startsWith("GET /")[ CD ]
Line_19 $$ String line = in.readLine()-->Line_20 $$ line.startsWith("GET /")[ FD ]
Line_20 $$ if (line.startsWith("GET /")) -->Line_21 $$ line = line.substring(5, line.length() - 1).trim()[ CD ]
Line_19 $$ String line = in.readLine()-->Line_21 $$ line = line.substring(5, line.length() - 1).trim()[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_21 $$ line = line.substring(5, line.length() - 1).trim()[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_21 $$ line.substring(5, line.length() - 1).trim()[ CD ]
Line_19 $$ String line = in.readLine()-->Line_21 $$ line.substring(5, line.length() - 1)[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_21 $$ line.substring(5, line.length() - 1)[ FD ]
Line_19 $$ String line = in.readLine()-->Line_21 $$ line.length()[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_21 $$ line.length()[ FD ]
Line_20 $$ if (line.startsWith("GET /")) -->Line_22 $$ int index = line.indexOf(' ')[ CD ]
Line_22 $$ int index = line.indexOf(' ')-->Line_22 $$ line.indexOf(' ')[ CD ]
Line_19 $$ String line = in.readLine()-->Line_22 $$ line.indexOf(' ')[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_22 $$ line.indexOf(' ')[ FD ]
Line_20 $$ if (line.startsWith("GET /")) -->Line_23 $$ if (index != -1) [ CD ]
Line_22 $$ int index = line.indexOf(' ')-->Line_23 $$ if (index != -1) [ FD ]
Line_23 $$ if (index != -1) -->Line_24 $$ line.substring(0, index)[ CD ]
Line_19 $$ String line = in.readLine()-->Line_24 $$ line.substring(0, index)[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_24 $$ line.substring(0, index)[ FD ]
Line_22 $$ int index = line.indexOf(' ')-->Line_24 $$ line.substring(0, index)[ FD ]
Line_18 $$ public void getPath(DataInputStream in) -->Line_27 $$ do [ CD ]
Line_18 $$ public void getPath(DataInputStream in) -->Line_18 $$ public void getPath(DataInputStream in) [ CD ]
Line_27 $$ do -->Line_28 $$ line = in.readLine()[ CD ]
Line_28 $$ line = in.readLine()-->Line_28 $$ line = in.readLine()[ FD ]
Line_19 $$ String line = in.readLine()-->Line_28 $$ line = in.readLine()[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_28 $$ line = in.readLine()[ FD ]
Line_28 $$ line = in.readLine()-->Line_28 $$ in.readLine()[ CD ]
Line_28 $$ line = in.readLine()-->Line_29 $$ line.length()[ FD ]
Line_19 $$ String line = in.readLine()-->Line_29 $$ line.length()[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_29 $$ line.length()[ FD ]
Line_28 $$ line = in.readLine()-->Line_30 $$ line.charAt(0)[ FD ]
Line_19 $$ String line = in.readLine()-->Line_30 $$ line.charAt(0)[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_30 $$ line.charAt(0)[ FD ]
Line_28 $$ line = in.readLine()-->Line_30 $$ line.charAt(0)[ FD ]
Line_19 $$ String line = in.readLine()-->Line_30 $$ line.charAt(0)[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_30 $$ line.charAt(0)[ FD ]
Line_0 $$ Entry-->Line_34 $$ //2
public class func [ CD ]
Line_34 $$ //2
public class func -->Line_35 $$ public void readPGM(InputStream is) [ CD ]
Line_35 $$ public void readPGM(InputStream is) -->Line_36 $$ DataInputStream dis = new DataInputStream(is)[ CD ]
Line_35 $$ public void readPGM(InputStream is) -->Line_37 $$ String p5 = dis.readLine()[ CD ]
Line_37 $$ String p5 = dis.readLine()-->Line_37 $$ dis.readLine()[ CD ]
Line_36 $$ DataInputStream dis = new DataInputStream(is)-->Line_37 $$ dis.readLine()[ FD ]
Line_35 $$ public void readPGM(InputStream is) -->Line_38 $$ if (!p5.equals("P5")) [ CD ]
Line_38 $$ if (!p5.equals("P5")) -->Line_38 $$ !p5.equals("P5")[ CD ]
Line_38 $$ !p5.equals("P5")-->Line_38 $$ p5.equals("P5")[ CD ]
Line_37 $$ String p5 = dis.readLine()-->Line_38 $$ p5.equals("P5")[ FD ]
Line_35 $$ public void readPGM(InputStream is) -->Line_41 $$ String depth = dis.readLine()[ CD ]
Line_41 $$ String depth = dis.readLine()-->Line_41 $$ dis.readLine()[ CD ]
Line_36 $$ DataInputStream dis = new DataInputStream(is)-->Line_41 $$ dis.readLine()[ FD ]
Line_35 $$ public void readPGM(InputStream is) -->Line_42 $$ String[] tmp = dim.split(" ")[ CD ]
Line_42 $$ String[] tmp = dim.split(" ")-->Line_42 $$ dim.split(" ")[ CD ]
Line_35 $$ public void readPGM(InputStream is) -->Line_43 $$ int height = Integer.parseInt(tmp[1])[ CD ]
Line_43 $$ int height = Integer.parseInt(tmp[1])-->Line_43 $$ Integer.parseInt(tmp[1])[ CD ]
Line_35 $$ public void readPGM(InputStream is) -->Line_44 $$ int read = dis.read(buf, 0, width * height)[ CD ]
Line_44 $$ int read = dis.read(buf, 0, width * height)-->Line_44 $$ dis.read(buf, 0, width * height)[ CD ]
Line_36 $$ DataInputStream dis = new DataInputStream(is)-->Line_44 $$ dis.read(buf, 0, width * height)[ FD ]
Line_35 $$ public void readPGM(InputStream is) -->Line_45 $$ if (read != width * height) [ CD ]
Line_44 $$ int read = dis.read(buf, 0, width * height)-->Line_45 $$ if (read != width * height) [ FD ]
Line_35 $$ public void readPGM(InputStream is) -->Line_48 $$ for (int i = 0; i < width * height; i++) [ CD ]
Line_35 $$ public void readPGM(InputStream is) -->Line_35 $$ public void readPGM(InputStream is) [ CD ]
Line_48 $$ for (int i = 0; i < width * height; i++) -->Line_48 $$ int i = 0[ CD ]
Line_48 $$ for (int i = 0; i < width * height; i++) -->Line_48 $$ i++[ CD ]
Line_48 $$ int i = 0-->Line_48 $$ i++[ FD ]
Line_48 $$ for (int i = 0; i < width * height; i++) -->Line_49 $$ y[i] = buf[i] & 0xff[ CD ]
Line_35 $$ public void readPGM(InputStream is) -->Line_51 $$ return new Picture(width, height, new int[][] [ CD ]
Line_0 $$ Entry-->Line_55 $$ //3
public class func [ CD ]
Line_55 $$ //3
public class func -->Line_56 $$ public void parseHeader(DataInputStream in) [ CD ]
Line_56 $$ public void parseHeader(DataInputStream in) -->Line_57 $$ header.file = decodeWebChars(strs[1])[ CD ]
Line_57 $$ header.file = decodeWebChars(strs[1])-->Line_57 $$ decodeWebChars(strs[1])[ CD ]
Line_56 $$ public void parseHeader(DataInputStream in) -->Line_58 $$ if (header.file != null) [ CD ]
Line_58 $$ if (header.file != null) -->Line_59 $$ header.file = URLDecoder.decode(header.file, ISO_8859_1)[ CD ]
Line_59 $$ header.file = URLDecoder.decode(header.file, ISO_8859_1)-->Line_59 $$ URLDecoder.decode(header.file, ISO_8859_1)[ CD ]
Line_58 $$ if (header.file != null) -->Line_61 $$ header.parseGetParams()[ CD ]
Line_56 $$ public void parseHeader(DataInputStream in) -->Line_63 $$ in.readLine()[ CD ]
Line_56 $$ public void parseHeader(DataInputStream in) -->Line_64 $$ while (line != null) [ CD ]
Line_56 $$ public void parseHeader(DataInputStream in) -->Line_56 $$ public void parseHeader(DataInputStream in) [ CD ]
Line_28 $$ line = in.readLine()-->Line_64 $$ while (line != null) [ FD ]
Line_19 $$ String line = in.readLine()-->Line_64 $$ while (line != null) [ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_64 $$ while (line != null) [ FD ]
Line_64 $$ while (line != null) -->Line_65 $$ if (line.isEmpty()) [ CD ]
Line_28 $$ line = in.readLine()-->Line_65 $$ if (line.isEmpty()) [ FD ]
Line_19 $$ String line = in.readLine()-->Line_65 $$ if (line.isEmpty()) [ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_65 $$ if (line.isEmpty()) [ FD ]
Line_65 $$ if (line.isEmpty()) -->Line_65 $$ line.isEmpty()[ CD ]
Line_28 $$ line = in.readLine()-->Line_65 $$ line.isEmpty()[ FD ]
Line_19 $$ String line = in.readLine()-->Line_65 $$ line.isEmpty()[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_65 $$ line.isEmpty()[ FD ]
Line_64 $$ while (line != null) -->Line_69 $$ int index = line.indexOf(':')[ CD ]
Line_69 $$ int index = line.indexOf(':')-->Line_69 $$ line.indexOf(':')[ CD ]
Line_28 $$ line = in.readLine()-->Line_69 $$ line.indexOf(':')[ FD ]
Line_19 $$ String line = in.readLine()-->Line_69 $$ line.indexOf(':')[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_69 $$ line.indexOf(':')[ FD ]
Line_64 $$ while (line != null) -->Line_71 $$ if (index == -1) [ CD ]
Line_69 $$ int index = line.indexOf(':')-->Line_71 $$ if (index == -1) [ FD ]
Line_22 $$ int index = line.indexOf(' ')-->Line_71 $$ if (index == -1) [ FD ]
Line_71 $$ if (index == -1) -->Line_72 $$ header.headers.put(line, "")[ CD ]
Line_28 $$ line = in.readLine()-->Line_72 $$ header.headers.put(line, "")[ FD ]
Line_19 $$ String line = in.readLine()-->Line_72 $$ header.headers.put(line, "")[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_72 $$ header.headers.put(line, "")[ FD ]
Line_71 $$ if (index == -1) -->Line_74 $$ header.headers.put(line.substring(0, index), line.substring(index + 1).trim())[ CD ]
Line_28 $$ line = in.readLine()-->Line_74 $$ line.substring(0, index)[ FD ]
Line_19 $$ String line = in.readLine()-->Line_74 $$ line.substring(0, index)[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_74 $$ line.substring(0, index)[ FD ]
Line_69 $$ int index = line.indexOf(':')-->Line_74 $$ line.substring(0, index)[ FD ]
Line_22 $$ int index = line.indexOf(' ')-->Line_74 $$ line.substring(0, index)[ FD ]
Line_28 $$ line = in.readLine()-->Line_74 $$ line.substring(index + 1)[ FD ]
Line_19 $$ String line = in.readLine()-->Line_74 $$ line.substring(index + 1)[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_74 $$ line.substring(index + 1)[ FD ]
Line_64 $$ while (line != null) -->Line_77 $$ in.readLine()[ CD ]
Line_0 $$ Entry-->Line_82 $$ //4
public class func [ CD ]
Line_82 $$ //4
public class func -->Line_83 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) [ CD ]
Line_83 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_84 $$ String line = input.readLine()[ CD ]
Line_84 $$ String line = input.readLine()-->Line_84 $$ input.readLine()[ CD ]
Line_83 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_85 $$ if (line == null) [ CD ]
Line_84 $$ String line = input.readLine()-->Line_85 $$ if (line == null) [ FD ]
Line_28 $$ line = in.readLine()-->Line_85 $$ if (line == null) [ FD ]
Line_19 $$ String line = in.readLine()-->Line_85 $$ if (line == null) [ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_85 $$ if (line == null) [ FD ]
Line_83 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_89 $$ while (line != null && line.length() != 0) [ CD ]
Line_83 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_83 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) [ CD ]
Line_84 $$ String line = input.readLine()-->Line_89 $$ line.length()[ FD ]
Line_28 $$ line = in.readLine()-->Line_89 $$ line.length()[ FD ]
Line_19 $$ String line = in.readLine()-->Line_89 $$ line.length()[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_89 $$ line.length()[ FD ]
Line_89 $$ while (line != null && line.length() != 0) -->Line_91 $$ int dot = line.indexOf(':')[ CD ]
Line_91 $$ int dot = line.indexOf(':')-->Line_91 $$ line.indexOf(':')[ CD ]
Line_84 $$ String line = input.readLine()-->Line_91 $$ line.indexOf(':')[ FD ]
Line_28 $$ line = in.readLine()-->Line_91 $$ line.indexOf(':')[ FD ]
Line_19 $$ String line = in.readLine()-->Line_91 $$ line.indexOf(':')[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_91 $$ line.indexOf(':')[ FD ]
Line_89 $$ while (line != null && line.length() != 0) -->Line_92 $$ if (dot != -1) [ CD ]
Line_91 $$ int dot = line.indexOf(':')-->Line_92 $$ if (dot != -1) [ FD ]
Line_92 $$ if (dot != -1) -->Line_93 $$ String key = line.substring(0, dot).trim()[ CD ]
Line_93 $$ String key = line.substring(0, dot).trim()-->Line_93 $$ line.substring(0, dot).trim()[ CD ]
Line_84 $$ String line = input.readLine()-->Line_93 $$ line.substring(0, dot)[ FD ]
Line_28 $$ line = in.readLine()-->Line_93 $$ line.substring(0, dot)[ FD ]
Line_19 $$ String line = in.readLine()-->Line_93 $$ line.substring(0, dot)[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_93 $$ line.substring(0, dot)[ FD ]
Line_91 $$ int dot = line.indexOf(':')-->Line_93 $$ line.substring(0, dot)[ FD ]
Line_92 $$ if (dot != -1) -->Line_94 $$ String value = line.substring(dot + 1).trim()[ CD ]
Line_94 $$ String value = line.substring(dot + 1).trim()-->Line_94 $$ line.substring(dot + 1).trim()[ CD ]
Line_84 $$ String line = input.readLine()-->Line_94 $$ line.substring(dot + 1)[ FD ]
Line_28 $$ line = in.readLine()-->Line_94 $$ line.substring(dot + 1)[ FD ]
Line_19 $$ String line = in.readLine()-->Line_94 $$ line.substring(dot + 1)[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_94 $$ line.substring(dot + 1)[ FD ]
Line_92 $$ if (dot != -1) -->Line_96 $$ if ("Content-Length".equalsIgnoreCase(key)) [ CD ]
Line_93 $$ String key = line.substring(0, dot).trim()-->Line_96 $$ if ("Content-Length".equalsIgnoreCase(key)) [ FD ]
Line_96 $$ if ("Content-Length".equalsIgnoreCase(key)) -->Line_96 $$ "Content-Length".equalsIgnoreCase(key)[ CD ]
Line_93 $$ String key = line.substring(0, dot).trim()-->Line_96 $$ "Content-Length".equalsIgnoreCase(key)[ FD ]
Line_96 $$ if ("Content-Length".equalsIgnoreCase(key)) -->Line_97 $$ Integer.valueOf(value)[ CD ]
Line_94 $$ String value = line.substring(dot + 1).trim()-->Line_97 $$ Integer.valueOf(value)[ FD ]
Line_96 $$ if ("Content-Length".equalsIgnoreCase(key)) -->Line_98 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) [ CD ]
Line_93 $$ String key = line.substring(0, dot).trim()-->Line_98 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) [ FD ]
Line_98 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) -->Line_98 $$ "Transfer-Encoding".equalsIgnoreCase(key)[ CD ]
Line_93 $$ String key = line.substring(0, dot).trim()-->Line_98 $$ "Transfer-Encoding".equalsIgnoreCase(key)[ FD ]
Line_98 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) -->Line_99 $$ "Chunked".equalsIgnoreCase(value)[ CD ]
Line_94 $$ String value = line.substring(dot + 1).trim()-->Line_99 $$ "Chunked".equalsIgnoreCase(value)[ FD ]
Line_89 $$ while (line != null && line.length() != 0) -->Line_103 $$ line = input.readLine()[ CD ]
Line_103 $$ line = input.readLine()-->Line_103 $$ line = input.readLine()[ FD ]
Line_84 $$ String line = input.readLine()-->Line_103 $$ line = input.readLine()[ FD ]
Line_28 $$ line = in.readLine()-->Line_103 $$ line = input.readLine()[ FD ]
Line_19 $$ String line = in.readLine()-->Line_103 $$ line = input.readLine()[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_103 $$ line = input.readLine()[ FD ]
Line_103 $$ line = input.readLine()-->Line_103 $$ input.readLine()[ CD ]
Line_83 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_105 $$ assertTrue("Need either content length or chunked encoding", length != -1 || chunked)[ CD ]
Line_83 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_107 $$ if (chunked) [ CD ]
Line_107 $$ if (chunked) -->Line_108 $$ Integer.parseInt(input.readLine(), 16)[ CD ]
Line_107 $$ if (chunked) -->Line_109 $$ while (length != 0) [ CD ]
Line_107 $$ if (chunked) -->Line_107 $$ if (chunked) [ CD ]
Line_109 $$ while (length != 0) -->Line_110 $$ byte[] buffer = new byte[length][ CD ]
Line_109 $$ while (length != 0) -->Line_111 $$ input.readFully(buffer)[ CD ]
Line_110 $$ byte[] buffer = new byte[length]-->Line_111 $$ input.readFully(buffer)[ FD ]
Line_109 $$ while (length != 0) -->Line_112 $$ input.readLine()[ CD ]
Line_109 $$ while (length != 0) -->Line_113 $$ Integer.parseInt(input.readLine(), 16)[ CD ]
Line_107 $$ if (chunked) -->Line_115 $$ input.readLine()[ CD ]
Line_107 $$ if (chunked) -->Line_117 $$ byte[] buffer = new byte[length][ CD ]
Line_107 $$ if (chunked) -->Line_118 $$ input.readFully(buffer)[ CD ]
Line_110 $$ byte[] buffer = new byte[length]-->Line_118 $$ input.readFully(buffer)[ FD ]
Line_117 $$ byte[] buffer = new byte[length]-->Line_118 $$ input.readFully(buffer)[ FD ]
Line_83 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_120 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_124 $$ //5
public class func [ CD ]
Line_124 $$ //5
public class func -->Line_125 $$ public void connect() [ CD ]
Line_125 $$ public void connect() -->Line_126 $$ String line = dataInput.readLine()[ CD ]
Line_126 $$ String line = dataInput.readLine()-->Line_126 $$ dataInput.readLine()[ CD ]
Line_125 $$ public void connect() -->Line_127 $$ if (line == null) [ CD ]
Line_126 $$ String line = dataInput.readLine()-->Line_127 $$ if (line == null) [ FD ]
Line_103 $$ line = input.readLine()-->Line_127 $$ if (line == null) [ FD ]
Line_84 $$ String line = input.readLine()-->Line_127 $$ if (line == null) [ FD ]
Line_28 $$ line = in.readLine()-->Line_127 $$ if (line == null) [ FD ]
Line_19 $$ String line = in.readLine()-->Line_127 $$ if (line == null) [ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_127 $$ if (line == null) [ FD ]
Line_125 $$ public void connect() -->Line_130 $$ parseHeaderLine(line)[ CD ]
Line_126 $$ String line = dataInput.readLine()-->Line_130 $$ parseHeaderLine(line)[ FD ]
Line_103 $$ line = input.readLine()-->Line_130 $$ parseHeaderLine(line)[ FD ]
Line_84 $$ String line = input.readLine()-->Line_130 $$ parseHeaderLine(line)[ FD ]
Line_28 $$ line = in.readLine()-->Line_130 $$ parseHeaderLine(line)[ FD ]
Line_19 $$ String line = in.readLine()-->Line_130 $$ parseHeaderLine(line)[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_130 $$ parseHeaderLine(line)[ FD ]
Line_125 $$ public void connect() -->Line_131 $$ line = dataInput.readLine()[ CD ]
Line_126 $$ String line = dataInput.readLine()-->Line_131 $$ line = dataInput.readLine()[ FD ]
Line_131 $$ line = dataInput.readLine()-->Line_131 $$ line = dataInput.readLine()[ FD ]
Line_103 $$ line = input.readLine()-->Line_131 $$ line = dataInput.readLine()[ FD ]
Line_84 $$ String line = input.readLine()-->Line_131 $$ line = dataInput.readLine()[ FD ]
Line_28 $$ line = in.readLine()-->Line_131 $$ line = dataInput.readLine()[ FD ]
Line_19 $$ String line = in.readLine()-->Line_131 $$ line = dataInput.readLine()[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_131 $$ line = dataInput.readLine()[ FD ]
Line_131 $$ line = dataInput.readLine()-->Line_131 $$ dataInput.readLine()[ CD ]
Line_125 $$ public void connect() -->Line_132 $$ while (line != null && line.length() > 0) [ CD ]
Line_125 $$ public void connect() -->Line_125 $$ public void connect() [ CD ]
Line_126 $$ String line = dataInput.readLine()-->Line_132 $$ line.length()[ FD ]
Line_131 $$ line = dataInput.readLine()-->Line_132 $$ line.length()[ FD ]
Line_103 $$ line = input.readLine()-->Line_132 $$ line.length()[ FD ]
Line_84 $$ String line = input.readLine()-->Line_132 $$ line.length()[ FD ]
Line_28 $$ line = in.readLine()-->Line_132 $$ line.length()[ FD ]
Line_19 $$ String line = in.readLine()-->Line_132 $$ line.length()[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_132 $$ line.length()[ FD ]
Line_132 $$ while (line != null && line.length() > 0) -->Line_133 $$ String[] strs = line.split(":")[ CD ]
Line_133 $$ String[] strs = line.split(":")-->Line_133 $$ line.split(":")[ CD ]
Line_126 $$ String line = dataInput.readLine()-->Line_133 $$ line.split(":")[ FD ]
Line_131 $$ line = dataInput.readLine()-->Line_133 $$ line.split(":")[ FD ]
Line_103 $$ line = input.readLine()-->Line_133 $$ line.split(":")[ FD ]
Line_84 $$ String line = input.readLine()-->Line_133 $$ line.split(":")[ FD ]
Line_28 $$ line = in.readLine()-->Line_133 $$ line.split(":")[ FD ]
Line_19 $$ String line = in.readLine()-->Line_133 $$ line.split(":")[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_133 $$ line.split(":")[ FD ]
Line_132 $$ while (line != null && line.length() > 0) -->Line_135 $$ if (strs.length >= 2) [ CD ]
Line_135 $$ if (strs.length >= 2) -->Line_136 $$ putHeaderField(strs[0], strs[1])[ CD ]
Line_132 $$ while (line != null && line.length() > 0) -->Line_139 $$ line = dataInput.readLine()[ CD ]
Line_139 $$ line = dataInput.readLine()-->Line_139 $$ line = dataInput.readLine()[ FD ]
Line_126 $$ String line = dataInput.readLine()-->Line_139 $$ line = dataInput.readLine()[ FD ]
Line_131 $$ line = dataInput.readLine()-->Line_139 $$ line = dataInput.readLine()[ FD ]
Line_103 $$ line = input.readLine()-->Line_139 $$ line = dataInput.readLine()[ FD ]
Line_84 $$ String line = input.readLine()-->Line_139 $$ line = dataInput.readLine()[ FD ]
Line_28 $$ line = in.readLine()-->Line_139 $$ line = dataInput.readLine()[ FD ]
Line_19 $$ String line = in.readLine()-->Line_139 $$ line = dataInput.readLine()[ FD ]
Line_21 $$ line = line.substring(5, line.length() - 1).trim()-->Line_139 $$ line = dataInput.readLine()[ FD ]
Line_139 $$ line = dataInput.readLine()-->Line_139 $$ dataInput.readLine()[ CD ]
Line_0 $$ Entry-->Line_144 $$ //6
public class func [ CD ]
Line_144 $$ //6
public class func -->Line_145 $$ public void receive(InputStream is) [ CD ]
Line_145 $$ public void receive(InputStream is) -->Line_146 $$ int code = is.read()[ CD ]
Line_146 $$ int code = is.read()-->Line_146 $$ is.read()[ CD ]
Line_4 $$ DataInputStream is = new DataInputStream(getInputStream())-->Line_146 $$ is.read()[ FD ]
Line_145 $$ public void receive(InputStream is) -->Line_147 $$ if (code == -1) [ CD ]
Line_146 $$ int code = is.read()-->Line_147 $$ if (code == -1) [ FD ]
Line_4 $$ DataInputStream is = new DataInputStream(getInputStream())-->Line_158 $$ readLong(is)[ FD ]
Line_4 $$ DataInputStream is = new DataInputStream(getInputStream())-->Line_161 $$ readBytes(is)[ FD ]
Line_0 $$ Entry-->Line_173 $$ //7
public class func [ CD ]
Line_173 $$ //7
public class func -->Line_174 $$ public void run() [ CD ]
Line_174 $$ public void run() -->Line_175 $$ System.out.println(" RECIVER Got : " + is.readLine())[ CD ]
Line_4 $$ DataInputStream is = new DataInputStream(getInputStream())-->Line_175 $$ is.readLine()[ FD ]
Line_0 $$ Entry-->Line_179 $$ //8
public class func [ CD ]
Line_179 $$ //8
public class func -->Line_180 $$ public void EventReader(DataInputStream in) [ CD ]
Line_180 $$ public void EventReader(DataInputStream in) -->Line_181 $$ this.version = in.readLine()[ CD ]
Line_181 $$ this.version = in.readLine()-->Line_181 $$ in.readLine()[ CD ]
Line_0 $$ Entry-->Line_185 $$ //9
public class func [ CD ]
Line_185 $$ //9
public class func -->Line_186 $$ public void EventReader(DataInputStream in) [ CD ]
Line_186 $$ public void EventReader(DataInputStream in) -->Line_187 $$ this.version = in.readLine()[ CD ]
Line_187 $$ this.version = in.readLine()-->Line_187 $$ in.readLine()[ CD ]
Line_0 $$ Entry-->Line_191 $$ //10
public class func [ CD ]
Line_191 $$ //10
public class func -->Line_192 $$ public void run() [ CD ]
Line_192 $$ public void run() -->Line_193 $$ System.out.println(" Sender Got : " + is.readLine())[ CD ]
Line_4 $$ DataInputStream is = new DataInputStream(getInputStream())-->Line_193 $$ is.readLine()[ FD ]
Line_12 $$ str = is.readLine()-->Line_13 $$ str.length()[ FD ]
Line_28 $$ line = in.readLine()-->Line_29 $$ line.length()[ FD ]
Line_28 $$ line = in.readLine()-->Line_30 $$ line.charAt(0)[ FD ]
Line_28 $$ line = in.readLine()-->Line_30 $$ line.charAt(0)[ FD ]
Line_48 $$ int i = 0-->Line_48 $$ for (int i = 0; i < width * height; i++) [ FD ]
Line_48 $$ int i = 0-->Line_48 $$ for (int i = 0; i < width * height; i++) [ FD ]
Line_48 $$ int i = 0-->Line_48 $$ i++[ FD ]
Line_69 $$ int index = line.indexOf(':')-->Line_71 $$ if (index == -1) [ FD ]
Line_69 $$ int index = line.indexOf(':')-->Line_74 $$ line.substring(0, index)[ FD ]
Line_103 $$ line = input.readLine()-->Line_89 $$ line.length()[ FD ]
Line_103 $$ line = input.readLine()-->Line_91 $$ line.indexOf(':')[ FD ]
Line_91 $$ int dot = line.indexOf(':')-->Line_92 $$ if (dot != -1) [ FD ]
Line_103 $$ line = input.readLine()-->Line_93 $$ line.substring(0, dot)[ FD ]
Line_91 $$ int dot = line.indexOf(':')-->Line_93 $$ line.substring(0, dot)[ FD ]
Line_103 $$ line = input.readLine()-->Line_94 $$ line.substring(dot + 1)[ FD ]
Line_93 $$ String key = line.substring(0, dot).trim()-->Line_96 $$ if ("Content-Length".equalsIgnoreCase(key)) [ FD ]
Line_93 $$ String key = line.substring(0, dot).trim()-->Line_96 $$ "Content-Length".equalsIgnoreCase(key)[ FD ]
Line_94 $$ String value = line.substring(dot + 1).trim()-->Line_97 $$ Integer.valueOf(value)[ FD ]
Line_93 $$ String key = line.substring(0, dot).trim()-->Line_98 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) [ FD ]
Line_93 $$ String key = line.substring(0, dot).trim()-->Line_98 $$ "Transfer-Encoding".equalsIgnoreCase(key)[ FD ]
Line_94 $$ String value = line.substring(dot + 1).trim()-->Line_99 $$ "Chunked".equalsIgnoreCase(value)[ FD ]
Line_110 $$ byte[] buffer = new byte[length]-->Line_111 $$ input.readFully(buffer)[ FD ]
Line_139 $$ line = dataInput.readLine()-->Line_132 $$ line.length()[ FD ]
Line_139 $$ line = dataInput.readLine()-->Line_133 $$ line.split(":")[ FD ]
