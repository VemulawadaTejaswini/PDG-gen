Line_0 $$ Entry-->Line_2 $$ //10
public class func [ CD ]
Line_2 $$ //10
public class func -->Line_3 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) [ CD ]
Line_3 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_4 $$ String line = dis.readLine().trim()[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_4 $$ dis.readLine().trim()[ CD ]
Line_3 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_5 $$ if (line.length() == 0)
    continue;[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_5 $$ line.length()[ FD ]
Line_3 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_7 $$ if (line.equals("exit")) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_7 $$ if (line.equals("exit")) [ FD ]
Line_7 $$ if (line.equals("exit")) -->Line_7 $$ line.equals("exit")[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_7 $$ line.equals("exit")[ FD ]
Line_7 $$ if (line.equals("exit")) -->Line_8 $$ boolean mayExit = true[ CD ]
Line_7 $$ if (line.equals("exit")) -->Line_9 $$ for (int i = 0; i < runningStages.size(); i++) [ CD ]
Line_7 $$ if (line.equals("exit")) -->Line_7 $$ if (line.equals("exit")) [ CD ]
Line_9 $$ for (int i = 0; i < runningStages.size(); i++) -->Line_9 $$ runningStages.size()[ CD ]
Line_9 $$ for (int i = 0; i < runningStages.size(); i++) -->Line_9 $$ int i = 0[ CD ]
Line_9 $$ for (int i = 0; i < runningStages.size(); i++) -->Line_9 $$ i++[ CD ]
Line_9 $$ int i = 0-->Line_9 $$ i++[ FD ]
Line_9 $$ for (int i = 0; i < runningStages.size(); i++) -->Line_10 $$ Stage stage = (Stage) runningStages.get(i)[ CD ]
Line_9 $$ int i = 0-->Line_10 $$ runningStages.get(i)[ FD ]
Line_9 $$ for (int i = 0; i < runningStages.size(); i++) -->Line_11 $$ if (stage.isAlive()) [ CD ]
Line_10 $$ Stage stage = (Stage) runningStages.get(i)-->Line_11 $$ if (stage.isAlive()) [ FD ]
Line_11 $$ if (stage.isAlive()) -->Line_11 $$ stage.isAlive()[ CD ]
Line_10 $$ Stage stage = (Stage) runningStages.get(i)-->Line_11 $$ stage.isAlive()[ FD ]
Line_11 $$ if (stage.isAlive()) -->Line_12 $$ consoleOut.println("There are still running stages.")[ CD ]
Line_11 $$ if (stage.isAlive()) -->Line_13 $$ mayExit = false[ CD ]
Line_13 $$ mayExit = false-->Line_13 $$ mayExit = false[ FD ]
Line_8 $$ boolean mayExit = true-->Line_13 $$ mayExit = false[ FD ]
Line_7 $$ if (line.equals("exit")) -->Line_17 $$ if (mayExit)
    break;
else
    continue;[ CD ]
Line_3 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_22 $$ if (line.equals("help")) [ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_22 $$ if (line.equals("help")) [ FD ]
Line_22 $$ if (line.equals("help")) -->Line_22 $$ line.equals("help")[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_22 $$ line.equals("help")[ FD ]
Line_22 $$ if (line.equals("help")) -->Line_23 $$ consoleOut.println("Type a number to switch to that stage.")[ CD ]
Line_22 $$ if (line.equals("help")) -->Line_24 $$ consoleOut.println("Type a new stage with args to run it.")[ CD ]
Line_22 $$ if (line.equals("help")) -->Line_25 $$ consoleOut.println("While connected, type ]> to get back to this prompt.")[ CD ]
Line_3 $$ public void handleStreams(DataOutputStream out, InputStream in, String[] parameters) -->Line_28 $$ int number = Integer.parseInt(line)[ CD ]
Line_28 $$ int number = Integer.parseInt(line)-->Line_28 $$ Integer.parseInt(line)[ CD ]
Line_4 $$ String line = dis.readLine().trim()-->Line_28 $$ Integer.parseInt(line)[ FD ]
Line_9 $$ int i = 0-->Line_9 $$ for (int i = 0; i < runningStages.size(); i++) [ FD ]
Line_9 $$ int i = 0-->Line_9 $$ for (int i = 0; i < runningStages.size(); i++) [ FD ]
Line_9 $$ int i = 0-->Line_9 $$ i++[ FD ]
Line_9 $$ int i = 0-->Line_10 $$ runningStages.get(i)[ FD ]
Line_10 $$ Stage stage = (Stage) runningStages.get(i)-->Line_11 $$ if (stage.isAlive()) [ FD ]
Line_10 $$ Stage stage = (Stage) runningStages.get(i)-->Line_11 $$ stage.isAlive()[ FD ]
