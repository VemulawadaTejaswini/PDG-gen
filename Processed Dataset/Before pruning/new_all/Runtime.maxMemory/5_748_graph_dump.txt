Line_0 $$ Entry-->Line_2 $$ //4
public class func [ CD ]
Line_2 $$ //4
public class func -->Line_3 $$ public void build() [ CD ]
Line_3 $$ public void build() -->Line_4 $$ final Runtime rt = Runtime.getRuntime()[ CD ]
Line_4 $$ final Runtime rt = Runtime.getRuntime()-->Line_4 $$ Runtime.getRuntime()[ CD ]
Line_3 $$ public void build() -->Line_5 $$ final long max = Math.min(1 << 22, rt.maxMemory() - rt.freeMemory() >> 2)[ CD ]
Line_5 $$ final long max = Math.min(1 << 22, rt.maxMemory() - rt.freeMemory() >> 2)-->Line_5 $$ Math.min(1 << 22, rt.maxMemory() - rt.freeMemory() >> 2)[ CD ]
Line_4 $$ final Runtime rt = Runtime.getRuntime()-->Line_5 $$ rt.maxMemory()[ FD ]
Line_4 $$ final Runtime rt = Runtime.getRuntime()-->Line_5 $$ rt.freeMemory()[ FD ]
Line_3 $$ public void build() -->Line_6 $$ int bs = (int) Math.min(meta.filesize, max)[ CD ]
Line_5 $$ final long max = Math.min(1 << 22, rt.maxMemory() - rt.freeMemory() >> 2)-->Line_6 $$ Math.min(meta.filesize, max)[ FD ]
Line_3 $$ public void build() -->Line_7 $$ bs = Math.max(IO.BLOCKSIZE, bs - bs % IO.BLOCKSIZE)[ CD ]
Line_6 $$ int bs = (int) Math.min(meta.filesize, max)-->Line_7 $$ bs = Math.max(IO.BLOCKSIZE, bs - bs % IO.BLOCKSIZE)[ FD ]
Line_7 $$ bs = Math.max(IO.BLOCKSIZE, bs - bs % IO.BLOCKSIZE)-->Line_7 $$ bs = Math.max(IO.BLOCKSIZE, bs - bs % IO.BLOCKSIZE)[ FD ]
Line_7 $$ bs = Math.max(IO.BLOCKSIZE, bs - bs % IO.BLOCKSIZE)-->Line_7 $$ Math.max(IO.BLOCKSIZE, bs - bs % IO.BLOCKSIZE)[ CD ]
