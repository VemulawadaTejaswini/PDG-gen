Line_0 $$ Entry-->Line_2 $$ //13
public class func [ CD ]
Line_2 $$ //13
public class func -->Line_3 $$ public void initialize(Configuration config) [ CD ]
Line_3 $$ public void initialize(Configuration config) -->Line_4 $$ long expirationTime = configuration.get(DB_CACHE_TIME)[ CD ]
Line_4 $$ long expirationTime = configuration.get(DB_CACHE_TIME)-->Line_4 $$ configuration.get(DB_CACHE_TIME)[ CD ]
Line_3 $$ public void initialize(Configuration config) -->Line_5 $$ Preconditions.checkArgument(expirationTime >= 0, "Invalid cache expiration time: %s", expirationTime)[ CD ]
Line_4 $$ long expirationTime = configuration.get(DB_CACHE_TIME)-->Line_5 $$ Preconditions.checkArgument(expirationTime >= 0, "Invalid cache expiration time: %s", expirationTime)[ FD ]
Line_3 $$ public void initialize(Configuration config) -->Line_6 $$ if (expirationTime == 0)
    expirationTime = ETERNAL_CACHE_EXPIRATION;[ CD ]
Line_4 $$ long expirationTime = configuration.get(DB_CACHE_TIME)-->Line_6 $$ if (expirationTime == 0)
    expirationTime = ETERNAL_CACHE_EXPIRATION;[ FD ]
Line_6 $$ if (expirationTime == 0)
    expirationTime = ETERNAL_CACHE_EXPIRATION;-->Line_6 $$ expirationTime = ETERNAL_CACHE_EXPIRATION[ CD ]
Line_4 $$ long expirationTime = configuration.get(DB_CACHE_TIME)-->Line_6 $$ expirationTime = ETERNAL_CACHE_EXPIRATION[ FD ]
Line_6 $$ expirationTime = ETERNAL_CACHE_EXPIRATION-->Line_6 $$ expirationTime = ETERNAL_CACHE_EXPIRATION[ FD ]
Line_3 $$ public void initialize(Configuration config) -->Line_7 $$ double cachesize = configuration.get(DB_CACHE_SIZE)[ CD ]
Line_7 $$ double cachesize = configuration.get(DB_CACHE_SIZE)-->Line_7 $$ configuration.get(DB_CACHE_SIZE)[ CD ]
Line_3 $$ public void initialize(Configuration config) -->Line_8 $$ Preconditions.checkArgument(cachesize > 0.0, "Invalid cache size specified: %s", cachesize)[ CD ]
Line_7 $$ double cachesize = configuration.get(DB_CACHE_SIZE)-->Line_8 $$ Preconditions.checkArgument(cachesize > 0.0, "Invalid cache size specified: %s", cachesize)[ FD ]
Line_3 $$ public void initialize(Configuration config) -->Line_9 $$ if (cachesize < 1.0) [ CD ]
Line_7 $$ double cachesize = configuration.get(DB_CACHE_SIZE)-->Line_9 $$ if (cachesize < 1.0) [ FD ]
Line_9 $$ if (cachesize < 1.0) -->Line_11 $$ Runtime runtime = Runtime.getRuntime()[ CD ]
Line_11 $$ Runtime runtime = Runtime.getRuntime()-->Line_11 $$ Runtime.getRuntime()[ CD ]
Line_11 $$ Runtime runtime = Runtime.getRuntime()-->Line_12 $$ runtime.maxMemory()[ FD ]
Line_11 $$ Runtime runtime = Runtime.getRuntime()-->Line_12 $$ runtime.totalMemory()[ FD ]
Line_11 $$ Runtime runtime = Runtime.getRuntime()-->Line_12 $$ runtime.freeMemory()[ FD ]
Line_9 $$ if (cachesize < 1.0) -->Line_14 $$ Preconditions.checkArgument(cachesize > 1000, "Cache size is too small: %s", cachesize)[ CD ]
Line_7 $$ double cachesize = configuration.get(DB_CACHE_SIZE)-->Line_14 $$ Preconditions.checkArgument(cachesize > 1000, "Cache size is too small: %s", cachesize)[ FD ]
Line_3 $$ public void initialize(Configuration config) -->Line_17 $$ log.info("Configuring total store cache size: [ CD ]
Line_3 $$ public void initialize(Configuration config) -->Line_18 $$ long cleanWaitTime = configuration.get(DB_CACHE_CLEAN_WAIT)[ CD ]
Line_18 $$ long cleanWaitTime = configuration.get(DB_CACHE_CLEAN_WAIT)-->Line_18 $$ configuration.get(DB_CACHE_CLEAN_WAIT)[ CD ]
