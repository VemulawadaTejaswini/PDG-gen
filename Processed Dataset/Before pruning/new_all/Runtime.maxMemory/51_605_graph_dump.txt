Line_0 $$ Entry-->Line_2 $$ //50
public class func [ CD ]
Line_2 $$ //50
public class func -->Line_3 $$ public void notifyWriteSpillBegin(Spillable spillable, int spillSize, String spillReason) [ CD ]
Line_3 $$ public void notifyWriteSpillBegin(Spillable spillable, int spillSize, String spillReason) -->Line_4 $$ int numFiles = spillable.spillCount()[ CD ]
Line_4 $$ int numFiles = spillable.spillCount()-->Line_4 $$ spillable.spillCount()[ CD ]
Line_3 $$ public void notifyWriteSpillBegin(Spillable spillable, int spillSize, String spillReason) -->Line_5 $$ if (numFiles % 10 == 0) [ CD ]
Line_5 $$ if (numFiles % 10 == 0) -->Line_7 $$ LOG.info("spilling grouping: [ CD ]
Line_5 $$ if (numFiles % 10 == 0) -->Line_10 $$ Runtime runtime = Runtime.getRuntime()[ CD ]
Line_10 $$ Runtime runtime = Runtime.getRuntime()-->Line_10 $$ Runtime.getRuntime()[ CD ]
Line_5 $$ if (numFiles % 10 == 0) -->Line_11 $$ long freeMem = runtime.freeMemory() / 1024 / 1024[ CD ]
Line_10 $$ Runtime runtime = Runtime.getRuntime()-->Line_11 $$ runtime.freeMemory()[ FD ]
Line_5 $$ if (numFiles % 10 == 0) -->Line_12 $$ long maxMem = runtime.maxMemory() / 1024 / 1024[ CD ]
Line_10 $$ Runtime runtime = Runtime.getRuntime()-->Line_12 $$ runtime.maxMemory()[ FD ]
Line_5 $$ if (numFiles % 10 == 0) -->Line_13 $$ long totalMem = runtime.totalMemory() / 1024 / 1024[ CD ]
Line_10 $$ Runtime runtime = Runtime.getRuntime()-->Line_13 $$ runtime.totalMemory()[ FD ]
Line_5 $$ if (numFiles % 10 == 0) -->Line_15 $$ LOG.info("mem on spill (mb), free: " + freeMem + ", total: " + totalMem + ", max: " + maxMem)[ CD ]
Line_3 $$ public void notifyWriteSpillBegin(Spillable spillable, int spillSize, String spillReason) -->Line_17 $$ LOG.info("spilling [ CD ]
Line_3 $$ public void notifyWriteSpillBegin(Spillable spillable, int spillSize, String spillReason) -->Line_18 $$ flowProcess.increment(Spill.Num_Tuples_Spilled, spillSize)[ CD ]
