Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void processDatanodesForShutdown(Collection<Thread> threads) [ CD ]
Line_2 $$ public void processDatanodesForShutdown(Collection<Thread> threads) -->Line_3 $$ for (int i = dataNodes.size() - 1; i >= 0; i--) [ CD ]
Line_2 $$ public void processDatanodesForShutdown(Collection<Thread> threads) -->Line_2 $$ public void processDatanodesForShutdown(Collection<Thread> threads) [ CD ]
Line_3 $$ for (int i = dataNodes.size() - 1; i >= 0; i--) -->Line_3 $$ int i = dataNodes.size() - 1[ CD ]
Line_3 $$ for (int i = dataNodes.size() - 1; i >= 0; i--) -->Line_3 $$ i--[ CD ]
Line_3 $$ int i = dataNodes.size() - 1-->Line_3 $$ i--[ FD ]
Line_3 $$ for (int i = dataNodes.size() - 1; i >= 0; i--) -->Line_4 $$ Thread st = new Thread(new ShutDownUtil(dataNodes.get(i)))[ CD ]
Line_3 $$ int i = dataNodes.size() - 1-->Line_4 $$ dataNodes.get(i)[ FD ]
Line_3 $$ for (int i = dataNodes.size() - 1; i >= 0; i--) -->Line_5 $$ st.start()[ CD ]
Line_4 $$ Thread st = new Thread(new ShutDownUtil(dataNodes.get(i)))-->Line_5 $$ st.start()[ FD ]
Line_3 $$ for (int i = dataNodes.size() - 1; i >= 0; i--) -->Line_6 $$ threads.add(st)[ CD ]
Line_4 $$ Thread st = new Thread(new ShutDownUtil(dataNodes.get(i)))-->Line_6 $$ threads.add(st)[ FD ]
Line_3 $$ int i = dataNodes.size() - 1-->Line_3 $$ for (int i = dataNodes.size() - 1; i >= 0; i--) [ FD ]
Line_3 $$ int i = dataNodes.size() - 1-->Line_3 $$ for (int i = dataNodes.size() - 1; i >= 0; i--) [ FD ]
Line_3 $$ int i = dataNodes.size() - 1-->Line_3 $$ i--[ FD ]
Line_3 $$ int i = dataNodes.size() - 1-->Line_4 $$ dataNodes.get(i)[ FD ]
Line_4 $$ Thread st = new Thread(new ShutDownUtil(dataNodes.get(i)))-->Line_5 $$ st.start()[ FD ]
Line_4 $$ Thread st = new Thread(new ShutDownUtil(dataNodes.get(i)))-->Line_6 $$ threads.add(st)[ FD ]
