Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void harvestSqlCommands(BufferedReader reader) [ CD ]
Line_2 $$ public void harvestSqlCommands(BufferedReader reader) -->Line_3 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_2 $$ public void harvestSqlCommands(BufferedReader reader) -->Line_2 $$ public void harvestSqlCommands(BufferedReader reader) [ CD ]
Line_3 $$ while ((line = reader.readLine()) != null) -->Line_4 $$ boolean newCommand = SingleLogLineAnalyser.isItStartOfNewCommand(line)[ CD ]
Line_4 $$ boolean newCommand = SingleLogLineAnalyser.isItStartOfNewCommand(line)-->Line_4 $$ SingleLogLineAnalyser.isItStartOfNewCommand(line)[ CD ]
Line_3 $$ while ((line = reader.readLine()) != null) -->Line_5 $$ harvester.processCommandFragment(line, newCommand)[ CD ]
Line_4 $$ boolean newCommand = SingleLogLineAnalyser.isItStartOfNewCommand(line)-->Line_5 $$ harvester.processCommandFragment(line, newCommand)[ FD ]
Line_2 $$ public void harvestSqlCommands(BufferedReader reader) -->Line_7 $$ return harvester.getCommandsInTime();[ CD ]
Line_7 $$ return harvester.getCommandsInTime();-->Line_7 $$ harvester.getCommandsInTime()[ CD ]
Line_4 $$ boolean newCommand = SingleLogLineAnalyser.isItStartOfNewCommand(line)-->Line_5 $$ harvester.processCommandFragment(line, newCommand)[ FD ]
