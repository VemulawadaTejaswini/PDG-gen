Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testCanMockTypesFromADynamicClassLoader() [ CD ]
Line_2 $$ public void testCanMockTypesFromADynamicClassLoader() -->Line_3 $$ ClassLoader interfaceClassLoader = new SyntheticEmptyInterfaceClassLoader()[ CD ]
Line_2 $$ public void testCanMockTypesFromADynamicClassLoader() -->Line_4 $$ Class<?> interfaceClass = interfaceClassLoader.loadClass("$UniqueTypeName$")[ CD ]
Line_4 $$ Class<?> interfaceClass = interfaceClassLoader.loadClass("$UniqueTypeName$")-->Line_4 $$ interfaceClassLoader.loadClass("$UniqueTypeName$")[ CD ]
Line_3 $$ ClassLoader interfaceClassLoader = new SyntheticEmptyInterfaceClassLoader()-->Line_4 $$ interfaceClassLoader.loadClass("$UniqueTypeName$")[ FD ]
Line_2 $$ public void testCanMockTypesFromADynamicClassLoader() -->Line_6 $$ Object o = imposteriser.imposterise(mockObject, interfaceClass, new Class[0])[ CD ]
Line_6 $$ Object o = imposteriser.imposterise(mockObject, interfaceClass, new Class[0])-->Line_6 $$ imposteriser.imposterise(mockObject, interfaceClass, new Class[0])[ CD ]
Line_4 $$ Class<?> interfaceClass = interfaceClassLoader.loadClass("$UniqueTypeName$")-->Line_6 $$ imposteriser.imposterise(mockObject, interfaceClass, new Class[0])[ FD ]
Line_2 $$ public void testCanMockTypesFromADynamicClassLoader() -->Line_8 $$ assertTrue(interfaceClass.isInstance(o))[ CD ]
Line_4 $$ Class<?> interfaceClass = interfaceClassLoader.loadClass("$UniqueTypeName$")-->Line_8 $$ interfaceClass.isInstance(o)[ FD ]
Line_6 $$ Object o = imposteriser.imposterise(mockObject, interfaceClass, new Class[0])-->Line_8 $$ interfaceClass.isInstance(o)[ FD ]
