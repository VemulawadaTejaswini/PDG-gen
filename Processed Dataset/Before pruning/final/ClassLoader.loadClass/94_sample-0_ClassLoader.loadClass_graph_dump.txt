Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void test_find_file_in_jar() [ CD ]
Line_2 $$ public void test_find_file_in_jar() -->Line_3 $$ URL url = getClass().getResource("/org/nutz/lang/one.jar")[ CD ]
Line_3 $$ URL url = getClass().getResource("/org/nutz/lang/one.jar")-->Line_3 $$ getClass().getResource("/org/nutz/lang/one.jar")[ CD ]
Line_2 $$ public void test_find_file_in_jar() -->Line_4 $$ assertNotNull(url)[ CD ]
Line_3 $$ URL url = getClass().getResource("/org/nutz/lang/one.jar")-->Line_4 $$ assertNotNull(url)[ FD ]
Line_2 $$ public void test_find_file_in_jar() -->Line_5 $$ ClassLoader classLoader = URLClassLoader.newInstance(new URL[] [ CD ]
Line_5 $$ ClassLoader classLoader = URLClassLoader.newInstance(new URL[] -->Line_5 $$ URLClassLoader.newInstance(new URL[] [ CD ]
Line_2 $$ public void test_find_file_in_jar() -->Line_6 $$ InputStream is = Files.findFileAsStream("org/nutz/plugin/Plugin.w", classLoader.loadClass("org.nutz.lang.XXXX"))[ CD ]
Line_6 $$ InputStream is = Files.findFileAsStream("org/nutz/plugin/Plugin.w", classLoader.loadClass("org.nutz.lang.XXXX"))-->Line_6 $$ Files.findFileAsStream("org/nutz/plugin/Plugin.w", classLoader.loadClass("org.nutz.lang.XXXX"))[ CD ]
Line_5 $$ ClassLoader classLoader = URLClassLoader.newInstance(new URL[] -->Line_7 $$ classLoader.loadClass("org.nutz.lang.XXXX")[ FD ]
Line_2 $$ public void test_find_file_in_jar() -->Line_8 $$ assertNotNull(is)[ CD ]
Line_6 $$ InputStream is = Files.findFileAsStream("org/nutz/plugin/Plugin.w", classLoader.loadClass("org.nutz.lang.XXXX"))-->Line_8 $$ assertNotNull(is)[ FD ]
Line_2 $$ public void test_find_file_in_jar() -->Line_9 $$ assertEquals(is.available(), 133)[ CD ]
Line_6 $$ InputStream is = Files.findFileAsStream("org/nutz/plugin/Plugin.w", classLoader.loadClass("org.nutz.lang.XXXX"))-->Line_9 $$ is.available()[ FD ]
