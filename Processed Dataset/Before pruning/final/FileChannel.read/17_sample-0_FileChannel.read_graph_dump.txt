Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void read(final long address, final int size) [ CD ]
Line_2 $$ public void read(final long address, final int size) -->Line_3 $$ final long remainingInBlock = addressUp(address) - address[ CD ]
Line_2 $$ public void read(final long address, final int size) -->Line_4 $$ if (remainingInBlock < maxSize) [ CD ]
Line_3 $$ final long remainingInBlock = addressUp(address) - address-->Line_4 $$ if (remainingInBlock < maxSize) [ FD ]
Line_2 $$ public void read(final long address, final int size) -->Line_7 $$ _readBuffer.limit(maxSize)[ CD ]
Line_2 $$ public void read(final long address, final int size) -->Line_8 $$ while (_readBuffer.remaining() > 0) [ CD ]
Line_2 $$ public void read(final long address, final int size) -->Line_2 $$ public void read(final long address, final int size) [ CD ]
Line_8 $$ while (_readBuffer.remaining() > 0) -->Line_9 $$ final int readSize = fc.read(_readBuffer, offset + address % _blockSize)[ CD ]
Line_9 $$ final int readSize = fc.read(_readBuffer, offset + address % _blockSize)-->Line_9 $$ fc.read(_readBuffer, offset + address % _blockSize)[ CD ]
Line_8 $$ while (_readBuffer.remaining() > 0) -->Line_10 $$ if (readSize < 0) [ CD ]
Line_9 $$ final int readSize = fc.read(_readBuffer, offset + address % _blockSize)-->Line_10 $$ if (readSize < 0) [ FD ]
Line_2 $$ public void read(final long address, final int size) -->Line_15 $$ _readBuffer.flip()[ CD ]
Line_2 $$ public void read(final long address, final int size) -->Line_16 $$ if (_readBuffer.remaining() < size) [ CD ]
Line_9 $$ final int readSize = fc.read(_readBuffer, offset + address % _blockSize)-->Line_10 $$ if (readSize < 0) [ FD ]
