Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void isFilePortionNull(int startByte, int endByte) [ CD ]
Line_2 $$ public void isFilePortionNull(int startByte, int endByte) -->Line_4 $$ fis.getChannel()[ CD ]
Line_2 $$ public void isFilePortionNull(int startByte, int endByte) -->Line_5 $$ fc.position(startByte)[ CD ]
Line_2 $$ public void isFilePortionNull(int startByte, int endByte) -->Line_6 $$ ByteBuffer bb = ByteBuffer.allocateDirect(endByte - startByte)[ CD ]
Line_6 $$ ByteBuffer bb = ByteBuffer.allocateDirect(endByte - startByte)-->Line_6 $$ ByteBuffer.allocateDirect(endByte - startByte)[ CD ]
Line_2 $$ public void isFilePortionNull(int startByte, int endByte) -->Line_7 $$ fc.read(bb)[ CD ]
Line_6 $$ ByteBuffer bb = ByteBuffer.allocateDirect(endByte - startByte)-->Line_7 $$ fc.read(bb)[ FD ]
Line_2 $$ public void isFilePortionNull(int startByte, int endByte) -->Line_8 $$ while (bb.hasRemaining()) [ CD ]
Line_2 $$ public void isFilePortionNull(int startByte, int endByte) -->Line_2 $$ public void isFilePortionNull(int startByte, int endByte) [ CD ]
Line_8 $$ while (bb.hasRemaining()) -->Line_8 $$ bb.hasRemaining()[ CD ]
Line_6 $$ ByteBuffer bb = ByteBuffer.allocateDirect(endByte - startByte)-->Line_8 $$ bb.hasRemaining()[ FD ]
Line_8 $$ while (bb.hasRemaining()) -->Line_10 $$ if (bb.get() != 0) [ CD ]
Line_6 $$ ByteBuffer bb = ByteBuffer.allocateDirect(endByte - startByte)-->Line_10 $$ bb.get()[ FD ]
Line_10 $$ if (bb.get() != 0) -->Line_12 $$ return false;[ CD ]
