Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void matchReplica(int blockIndex, Checksum.Header checksumHeader, FileChannel replica, FileChannel outFile, MessageDigest md) [ CD ]
Line_2 $$ public void matchReplica(int blockIndex, Checksum.Header checksumHeader, FileChannel replica, FileChannel outFile, MessageDigest md) -->Line_3 $$ ByteBuffer.allocate(sizeForChecksumBlock(blockIndex, checksumHeader))[ CD ]
Line_2 $$ public void matchReplica(int blockIndex, Checksum.Header checksumHeader, FileChannel replica, FileChannel outFile, MessageDigest md) -->Line_5 $$ long fileOffset = (long) blockIndex * checksumHeader.blockLength()[ CD ]
Line_2 $$ public void matchReplica(int blockIndex, Checksum.Header checksumHeader, FileChannel replica, FileChannel outFile, MessageDigest md) -->Line_6 $$ int bytesRead = replica.read(replicaBuf, fileOffset)[ CD ]
Line_6 $$ int bytesRead = replica.read(replicaBuf, fileOffset)-->Line_6 $$ replica.read(replicaBuf, fileOffset)[ CD ]
Line_5 $$ long fileOffset = (long) blockIndex * checksumHeader.blockLength()-->Line_6 $$ replica.read(replicaBuf, fileOffset)[ FD ]
Line_2 $$ public void matchReplica(int blockIndex, Checksum.Header checksumHeader, FileChannel replica, FileChannel outFile, MessageDigest md) -->Line_7 $$ if (replicaBuf.hasRemaining()) [ CD ]
Line_7 $$ if (replicaBuf.hasRemaining()) -->Line_7 $$ replicaBuf.hasRemaining()[ CD ]
Line_6 $$ int bytesRead = replica.read(replicaBuf, fileOffset)-->Line_8 $$ String.format("truncated read from replica (%s), read %d " + "bytes but expected %d more bytes", replica, bytesRead, replicaBuf.remaining())[ FD ]
Line_2 $$ public void matchReplica(int blockIndex, Checksum.Header checksumHeader, FileChannel replica, FileChannel outFile, MessageDigest md) -->Line_13 $$ replicaBuf.flip()[ CD ]
