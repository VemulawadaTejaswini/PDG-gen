Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void retrieveParts(int contentId, int[] start, int[] end) [ CD ]
Line_2 $$ public void retrieveParts(int contentId, int[] start, int[] end) -->Line_3 $$ for (int i = 0; i < n; i++) [ CD ]
Line_2 $$ public void retrieveParts(int contentId, int[] start, int[] end) -->Line_2 $$ public void retrieveParts(int contentId, int[] start, int[] end) [ CD ]
Line_3 $$ for (int i = 0; i < n; i++) -->Line_3 $$ int i = 0[ CD ]
Line_3 $$ for (int i = 0; i < n; i++) -->Line_3 $$ i++[ CD ]
Line_3 $$ int i = 0-->Line_3 $$ i++[ FD ]
Line_3 $$ for (int i = 0; i < n; i++) -->Line_4 $$ if (start[i] == -1 && end[i] == -1) [ CD ]
Line_4 $$ if (start[i] == -1 && end[i] == -1) -->Line_5 $$ start[i] = 0[ CD ]
Line_3 $$ for (int i = 0; i < n; i++) -->Line_8 $$ if (start[i] < 0 || end[i] < 0) [ CD ]
Line_3 $$ for (int i = 0; i < n; i++) -->Line_12 $$ if (start[i] > charLength || end[i] > charLength) [ CD ]
Line_3 $$ for (int i = 0; i < n; i++) -->Line_16 $$ if (end[i] <= start[i]) [ CD ]
Line_3 $$ for (int i = 0; i < n; i++) -->Line_21 $$ long startOffsetBytes = e.offset + start[i] * BYTES_PER_CHAR + BYTE_ORDER_MARK_SIZE[ CD ]
Line_3 $$ for (int i = 0; i < n; i++) -->Line_23 $$ int bytesToRead = (end[i] - start[i]) * BYTES_PER_CHAR[ CD ]
Line_3 $$ for (int i = 0; i < n; i++) -->Line_24 $$ ByteBuffer buffer = ByteBuffer.allocate(bytesToRead)[ CD ]
Line_24 $$ ByteBuffer buffer = ByteBuffer.allocate(bytesToRead)-->Line_24 $$ ByteBuffer.allocate(bytesToRead)[ CD ]
Line_23 $$ int bytesToRead = (end[i] - start[i]) * BYTES_PER_CHAR-->Line_24 $$ ByteBuffer.allocate(bytesToRead)[ FD ]
Line_3 $$ for (int i = 0; i < n; i++) -->Line_25 $$ int bytesRead = fileChannel.read(buffer, startOffsetBytes)[ CD ]
Line_25 $$ int bytesRead = fileChannel.read(buffer, startOffsetBytes)-->Line_25 $$ fileChannel.read(buffer, startOffsetBytes)[ CD ]
Line_24 $$ ByteBuffer buffer = ByteBuffer.allocate(bytesToRead)-->Line_25 $$ fileChannel.read(buffer, startOffsetBytes)[ FD ]
Line_21 $$ long startOffsetBytes = e.offset + start[i] * BYTES_PER_CHAR + BYTE_ORDER_MARK_SIZE-->Line_25 $$ fileChannel.read(buffer, startOffsetBytes)[ FD ]
Line_3 $$ for (int i = 0; i < n; i++) -->Line_26 $$ if (bytesRead < bytesToRead)[ CD ]
Line_25 $$ int bytesRead = fileChannel.read(buffer, startOffsetBytes)-->Line_26 $$ if (bytesRead < bytesToRead)[ FD ]
Line_23 $$ int bytesToRead = (end[i] - start[i]) * BYTES_PER_CHAR-->Line_26 $$ if (bytesRead < bytesToRead)[ FD ]
Line_3 $$ for (int i = 0; i < n; i++) -->Line_29 $$ result[i] = new String(buffer.array(), 0, bytesRead, CHAR_ENCODING)[ CD ]
Line_24 $$ ByteBuffer buffer = ByteBuffer.allocate(bytesToRead)-->Line_29 $$ buffer.array()[ FD ]
Line_2 $$ public void retrieveParts(int contentId, int[] start, int[] end) -->Line_31 $$ fileInputStream.close()[ CD ]
Line_3 $$ int i = 0-->Line_3 $$ for (int i = 0; i < n; i++) [ FD ]
Line_3 $$ int i = 0-->Line_3 $$ for (int i = 0; i < n; i++) [ FD ]
Line_3 $$ int i = 0-->Line_3 $$ i++[ FD ]
Line_23 $$ int bytesToRead = (end[i] - start[i]) * BYTES_PER_CHAR-->Line_24 $$ ByteBuffer.allocate(bytesToRead)[ FD ]
Line_24 $$ ByteBuffer buffer = ByteBuffer.allocate(bytesToRead)-->Line_25 $$ fileChannel.read(buffer, startOffsetBytes)[ FD ]
Line_21 $$ long startOffsetBytes = e.offset + start[i] * BYTES_PER_CHAR + BYTE_ORDER_MARK_SIZE-->Line_25 $$ fileChannel.read(buffer, startOffsetBytes)[ FD ]
Line_25 $$ int bytesRead = fileChannel.read(buffer, startOffsetBytes)-->Line_26 $$ if (bytesRead < bytesToRead)[ FD ]
Line_23 $$ int bytesToRead = (end[i] - start[i]) * BYTES_PER_CHAR-->Line_26 $$ if (bytesRead < bytesToRead)[ FD ]
Line_24 $$ ByteBuffer buffer = ByteBuffer.allocate(bytesToRead)-->Line_29 $$ buffer.array()[ FD ]
