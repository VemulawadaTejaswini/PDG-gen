Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testAppendMessages_toOffset() [ CD ]
Line_2 $$ public void testAppendMessages_toOffset() -->Line_3 $$ assertEquals(this.messageStore.nameFromOffset(offset), logs[0].getName())[ CD ]
Line_2 $$ public void testAppendMessages_toOffset() -->Line_4 $$ final FileChannel channel = new RandomAccessFile(logs[0], "rw").getChannel()[ CD ]
Line_4 $$ final FileChannel channel = new RandomAccessFile(logs[0], "rw").getChannel()-->Line_4 $$ new RandomAccessFile(logs[0], "rw").getChannel()[ CD ]
Line_2 $$ public void testAppendMessages_toOffset() -->Line_5 $$ final ByteBuffer buf = ByteBuffer.allocate((int) channel.size())[ CD ]
Line_5 $$ final ByteBuffer buf = ByteBuffer.allocate((int) channel.size())-->Line_5 $$ ByteBuffer.allocate((int) channel.size())[ CD ]
Line_4 $$ final FileChannel channel = new RandomAccessFile(logs[0], "rw").getChannel()-->Line_5 $$ channel.size()[ FD ]
Line_2 $$ public void testAppendMessages_toOffset() -->Line_6 $$ while (buf.hasRemaining()) [ CD ]
Line_2 $$ public void testAppendMessages_toOffset() -->Line_2 $$ public void testAppendMessages_toOffset() [ CD ]
Line_6 $$ while (buf.hasRemaining()) -->Line_6 $$ buf.hasRemaining()[ CD ]
Line_5 $$ final ByteBuffer buf = ByteBuffer.allocate((int) channel.size())-->Line_6 $$ buf.hasRemaining()[ FD ]
Line_6 $$ while (buf.hasRemaining()) -->Line_7 $$ channel.read(buf)[ CD ]
Line_4 $$ final FileChannel channel = new RandomAccessFile(logs[0], "rw").getChannel()-->Line_7 $$ channel.read(buf)[ FD ]
Line_5 $$ final ByteBuffer buf = ByteBuffer.allocate((int) channel.size())-->Line_7 $$ channel.read(buf)[ FD ]
Line_2 $$ public void testAppendMessages_toOffset() -->Line_9 $$ buf.flip()[ CD ]
Line_5 $$ final ByteBuffer buf = ByteBuffer.allocate((int) channel.size())-->Line_9 $$ buf.flip()[ FD ]
Line_2 $$ public void testAppendMessages_toOffset() -->Line_10 $$ final DecodedMessage decodedMessage1 = MessageUtils.decodeMessage(this.topic, buf.array(), 0)[ CD ]
Line_10 $$ final DecodedMessage decodedMessage1 = MessageUtils.decodeMessage(this.topic, buf.array(), 0)-->Line_10 $$ MessageUtils.decodeMessage(this.topic, buf.array(), 0)[ CD ]
Line_5 $$ final ByteBuffer buf = ByteBuffer.allocate((int) channel.size())-->Line_10 $$ buf.array()[ FD ]
Line_2 $$ public void testAppendMessages_toOffset() -->Line_11 $$ MessageUtils.decodeMessage(this.topic, buf.array(), decodedMessage1.newOffset)[ CD ]
Line_5 $$ final ByteBuffer buf = ByteBuffer.allocate((int) channel.size())-->Line_11 $$ buf.array()[ FD ]
