Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void setStatusFromFile(FileChannel channel) [ CD ]
Line_2 $$ public void setStatusFromFile(FileChannel channel) -->Line_3 $$ ByteBuffer.wrap(new byte[(int) channel.size()])[ CD ]
Line_2 $$ public void setStatusFromFile(FileChannel channel) -->Line_4 $$ channel.read(buffer)[ CD ]
Line_2 $$ public void setStatusFromFile(FileChannel channel) -->Line_5 $$ buffer.position(0)[ CD ]
Line_2 $$ public void setStatusFromFile(FileChannel channel) -->Line_6 $$ long onDiskVersion = buffer.getLong()[ CD ]
Line_6 $$ long onDiskVersion = buffer.getLong()-->Line_6 $$ buffer.getLong()[ CD ]
Line_2 $$ public void setStatusFromFile(FileChannel channel) -->Line_7 $$ if (version != onDiskVersion) [ CD ]
Line_6 $$ long onDiskVersion = buffer.getLong()-->Line_7 $$ if (version != onDiskVersion) [ FD ]
Line_7 $$ if (version != onDiskVersion) -->Line_9 $$ CRC32 crc32 = new CRC32()[ CD ]
Line_7 $$ if (version != onDiskVersion) -->Line_10 $$ crc32.update((int) (onDiskVersion >>> 32) & 0xFFFFFFFF)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_10 $$ crc32.update((int) (onDiskVersion >>> 32) & 0xFFFFFFFF)[ FD ]
Line_7 $$ if (version != onDiskVersion) -->Line_11 $$ crc32.update((int) (onDiskVersion >>> 0) & 0xFFFFFFFF)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_11 $$ crc32.update((int) (onDiskVersion >>> 0) & 0xFFFFFFFF)[ FD ]
Line_7 $$ if (version != onDiskVersion) -->Line_12 $$ int size = buffer.getInt()[ CD ]
Line_12 $$ int size = buffer.getInt()-->Line_12 $$ buffer.getInt()[ CD ]
Line_7 $$ if (version != onDiskVersion) -->Line_13 $$ crc32.update(size)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_13 $$ crc32.update(size)[ FD ]
Line_12 $$ int size = buffer.getInt()-->Line_13 $$ crc32.update(size)[ FD ]
Line_7 $$ if (version != onDiskVersion) -->Line_14 $$ LinkedHashMap<String, IndexEntry> newIndexEntries = new LinkedHashMap<String, IndexEntry>()[ CD ]
Line_7 $$ if (version != onDiskVersion) -->Line_15 $$ for (int i = 0; i < size; i++) [ CD ]
Line_7 $$ if (version != onDiskVersion) -->Line_7 $$ if (version != onDiskVersion) [ CD ]
Line_12 $$ int size = buffer.getInt()-->Line_15 $$ for (int i = 0; i < size; i++) [ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_15 $$ int i = 0[ CD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_15 $$ i++[ CD ]
Line_15 $$ int i = 0-->Line_15 $$ i++[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_17 $$ String indexTypeString = readString(buffer, crc32)[ CD ]
Line_17 $$ String indexTypeString = readString(buffer, crc32)-->Line_17 $$ readString(buffer, crc32)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_17 $$ readString(buffer, crc32)[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_18 $$ IndexType indexType[ CD ]
Line_18 $$ IndexType indexType-->Line_21 $$ indexType = IndexType.valueOf(indexTypeString)[ FD ]
Line_21 $$ indexType = IndexType.valueOf(indexTypeString)-->Line_21 $$ indexType = IndexType.valueOf(indexTypeString)[ FD ]
Line_21 $$ indexType = IndexType.valueOf(indexTypeString)-->Line_21 $$ IndexType.valueOf(indexTypeString)[ CD ]
Line_17 $$ String indexTypeString = readString(buffer, crc32)-->Line_21 $$ IndexType.valueOf(indexTypeString)[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_27 $$ String name = readString(buffer, crc32)[ CD ]
Line_27 $$ String name = readString(buffer, crc32)-->Line_27 $$ readString(buffer, crc32)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_27 $$ readString(buffer, crc32)[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_28 $$ String parentName = readString(buffer, crc32)[ CD ]
Line_28 $$ String parentName = readString(buffer, crc32)-->Line_28 $$ readString(buffer, crc32)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_28 $$ readString(buffer, crc32)[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_29 $$ String txStatus = readString(buffer, crc32)[ CD ]
Line_29 $$ String txStatus = readString(buffer, crc32)-->Line_29 $$ readString(buffer, crc32)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_29 $$ readString(buffer, crc32)[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_30 $$ TransactionStatus status[ CD ]
Line_30 $$ TransactionStatus status-->Line_33 $$ status = TransactionStatus.valueOf(txStatus)[ FD ]
Line_33 $$ status = TransactionStatus.valueOf(txStatus)-->Line_33 $$ status = TransactionStatus.valueOf(txStatus)[ FD ]
Line_33 $$ status = TransactionStatus.valueOf(txStatus)-->Line_33 $$ TransactionStatus.valueOf(txStatus)[ CD ]
Line_29 $$ String txStatus = readString(buffer, crc32)-->Line_33 $$ TransactionStatus.valueOf(txStatus)[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_39 $$ String mergeId = readString(buffer, crc32)[ CD ]
Line_39 $$ String mergeId = readString(buffer, crc32)-->Line_39 $$ readString(buffer, crc32)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_39 $$ readString(buffer, crc32)[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_40 $$ long documentCount = buffer.getLong()[ CD ]
Line_40 $$ long documentCount = buffer.getLong()-->Line_40 $$ buffer.getLong()[ CD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_41 $$ crc32.update((int) (documentCount >>> 32) & 0xFFFFFFFF)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_41 $$ crc32.update((int) (documentCount >>> 32) & 0xFFFFFFFF)[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_42 $$ crc32.update((int) (documentCount >>> 0) & 0xFFFFFFFF)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_42 $$ crc32.update((int) (documentCount >>> 0) & 0xFFFFFFFF)[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_43 $$ long deletions = buffer.getLong()[ CD ]
Line_43 $$ long deletions = buffer.getLong()-->Line_43 $$ buffer.getLong()[ CD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_44 $$ crc32.update((int) (deletions >>> 32) & 0xFFFFFFFF)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_44 $$ crc32.update((int) (deletions >>> 32) & 0xFFFFFFFF)[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_45 $$ crc32.update((int) (deletions >>> 0) & 0xFFFFFFFF)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_45 $$ crc32.update((int) (deletions >>> 0) & 0xFFFFFFFF)[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_46 $$ byte deleteOnlyNodesFlag = buffer.get()[ CD ]
Line_46 $$ byte deleteOnlyNodesFlag = buffer.get()-->Line_46 $$ buffer.get()[ CD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_47 $$ crc32.update(deleteOnlyNodesFlag)[ CD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_47 $$ crc32.update(deleteOnlyNodesFlag)[ FD ]
Line_46 $$ byte deleteOnlyNodesFlag = buffer.get()-->Line_47 $$ crc32.update(deleteOnlyNodesFlag)[ FD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_48 $$ boolean isDeletOnlyNodes = deleteOnlyNodesFlag == 1[ CD ]
Line_15 $$ for (int i = 0; i < size; i++) -->Line_49 $$ if (!status.isTransient()) [ CD ]
Line_49 $$ if (!status.isTransient()) -->Line_49 $$ !status.isTransient()[ CD ]
Line_49 $$ !status.isTransient()-->Line_49 $$ status.isTransient()[ CD ]
Line_30 $$ TransactionStatus status-->Line_49 $$ status.isTransient()[ FD ]
Line_33 $$ status = TransactionStatus.valueOf(txStatus)-->Line_49 $$ status.isTransient()[ FD ]
Line_49 $$ if (!status.isTransient()) -->Line_51 $$ newIndexEntries.put(name, new IndexEntry(indexType, name, parentName, status, mergeId, documentCount, deletions, isDeletOnlyNodes))[ CD ]
Line_14 $$ LinkedHashMap<String, IndexEntry> newIndexEntries = new LinkedHashMap<String, IndexEntry>()-->Line_51 $$ newIndexEntries.put(name, new IndexEntry(indexType, name, parentName, status, mergeId, documentCount, deletions, isDeletOnlyNodes))[ FD ]
Line_27 $$ String name = readString(buffer, crc32)-->Line_51 $$ newIndexEntries.put(name, new IndexEntry(indexType, name, parentName, status, mergeId, documentCount, deletions, isDeletOnlyNodes))[ FD ]
Line_7 $$ if (version != onDiskVersion) -->Line_54 $$ long onDiskCRC32 = buffer.getLong()[ CD ]
Line_54 $$ long onDiskCRC32 = buffer.getLong()-->Line_54 $$ buffer.getLong()[ CD ]
Line_7 $$ if (version != onDiskVersion) -->Line_55 $$ if (crc32.getValue() == onDiskCRC32) [ CD ]
Line_54 $$ long onDiskCRC32 = buffer.getLong()-->Line_55 $$ if (crc32.getValue() == onDiskCRC32) [ FD ]
Line_9 $$ CRC32 crc32 = new CRC32()-->Line_55 $$ crc32.getValue()[ FD ]
Line_59 $$ if (entry.getStatus().isTransient()) -->Line_59 $$ entry.getStatus().isTransient()[ CD ]
Line_57 $$ IndexEntry entry-->Line_59 $$ entry.getStatus()[ FD ]
Line_59 $$ if (entry.getStatus().isTransient()) -->Line_61 $$ newIndexEntries.put(entry.getName(), entry)[ CD ]
Line_14 $$ LinkedHashMap<String, IndexEntry> newIndexEntries = new LinkedHashMap<String, IndexEntry>()-->Line_61 $$ newIndexEntries.put(entry.getName(), entry)[ FD ]
Line_57 $$ IndexEntry entry-->Line_61 $$ newIndexEntries.put(entry.getName(), entry)[ FD ]
Line_57 $$ IndexEntry entry-->Line_61 $$ entry.getName()[ FD ]
Line_15 $$ int i = 0-->Line_15 $$ for (int i = 0; i < size; i++) [ FD ]
Line_15 $$ int i = 0-->Line_15 $$ for (int i = 0; i < size; i++) [ FD ]
Line_15 $$ int i = 0-->Line_15 $$ i++[ FD ]
Line_17 $$ String indexTypeString = readString(buffer, crc32)-->Line_21 $$ IndexType.valueOf(indexTypeString)[ FD ]
Line_29 $$ String txStatus = readString(buffer, crc32)-->Line_33 $$ TransactionStatus.valueOf(txStatus)[ FD ]
Line_46 $$ byte deleteOnlyNodesFlag = buffer.get()-->Line_47 $$ crc32.update(deleteOnlyNodesFlag)[ FD ]
Line_30 $$ TransactionStatus status-->Line_49 $$ status.isTransient()[ FD ]
Line_33 $$ status = TransactionStatus.valueOf(txStatus)-->Line_49 $$ status.isTransient()[ FD ]
Line_27 $$ String name = readString(buffer, crc32)-->Line_51 $$ newIndexEntries.put(name, new IndexEntry(indexType, name, parentName, status, mergeId, documentCount, deletions, isDeletOnlyNodes))[ FD ]
