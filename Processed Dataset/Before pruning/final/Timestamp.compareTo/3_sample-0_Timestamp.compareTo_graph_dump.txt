Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void createManufacturingOrder(String facilityId, Date date, String workEffortName, String description, String routingId, String orderId, String orderItemSeqId, String shipGroupSeqId, String shipmentId, boolean useSubstitute, boolean ignoreSupplierProducts) [ CD ]
Line_2 $$ public void createManufacturingOrder(String facilityId, Date date, String workEffortName, String description, String routingId, String orderId, String orderItemSeqId, String shipGroupSeqId, String shipmentId, boolean useSubstitute, boolean ignoreSupplierProducts) -->Line_3 $$ if (maxEndDate == null) [ CD ]
Line_2 $$ public void createManufacturingOrder(String facilityId, Date date, String workEffortName, String description, String routingId, String orderId, String orderItemSeqId, String shipGroupSeqId, String shipmentId, boolean useSubstitute, boolean ignoreSupplierProducts) -->Line_6 $$ if (childEndDate != null && maxEndDate.compareTo(childEndDate) < 0) [ CD ]
Line_2 $$ public void createManufacturingOrder(String facilityId, Date date, String workEffortName, String description, String routingId, String orderId, String orderItemSeqId, String shipGroupSeqId, String shipmentId, boolean useSubstitute, boolean ignoreSupplierProducts) -->Line_9 $$ if (childProductionRunId != null) [ CD ]
Line_9 $$ if (childProductionRunId != null) -->Line_10 $$ childProductionRuns.add(childProductionRunId)[ CD ]
Line_2 $$ public void createManufacturingOrder(String facilityId, Date date, String workEffortName, String description, String routingId, String orderId, String orderItemSeqId, String shipGroupSeqId, String shipmentId, boolean useSubstitute, boolean ignoreSupplierProducts) -->Line_12 $$ Timestamp startDate = UtilDateTime.toTimestamp(UtilDateTime.toDateTimeString(date))[ CD ]
Line_12 $$ Timestamp startDate = UtilDateTime.toTimestamp(UtilDateTime.toDateTimeString(date))-->Line_12 $$ UtilDateTime.toTimestamp(UtilDateTime.toDateTimeString(date))[ CD ]
