Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void HttpInputStream(InputStream in) [ CD ]
Line_2 $$ public void HttpInputStream(InputStream in) -->Line_3 $$ do [ CD ]
Line_2 $$ public void HttpInputStream(InputStream in) -->Line_2 $$ public void HttpInputStream(InputStream in) [ CD ]
Line_3 $$ do -->Line_4 $$ dis.readLine()[ CD ]
Line_3 $$ do -->Line_5 $$ if (RMIMasterSocketFactory.proxyLog.isLoggable(Log.VERBOSE)) [ CD ]
Line_5 $$ if (RMIMasterSocketFactory.proxyLog.isLoggable(Log.VERBOSE)) -->Line_5 $$ RMIMasterSocketFactory.proxyLog.isLoggable(Log.VERBOSE)[ CD ]
Line_5 $$ if (RMIMasterSocketFactory.proxyLog.isLoggable(Log.VERBOSE)) -->Line_6 $$ RMIMasterSocketFactory.proxyLog.log(Log.VERBOSE, "received header line: \"" + line + "\"")[ CD ]
Line_3 $$ do -->Line_9 $$ if (line == null)[ CD ]
Line_3 $$ do -->Line_11 $$ if (line.toLowerCase().startsWith(key)) [ CD ]
Line_11 $$ if (line.toLowerCase().startsWith(key)) -->Line_11 $$ line.toLowerCase().startsWith(key)[ CD ]
Line_11 $$ if (line.toLowerCase().startsWith(key)) -->Line_12 $$ if (contentLengthFound)[ CD ]
Line_11 $$ if (line.toLowerCase().startsWith(key)) -->Line_15 $$ Integer.parseInt(line.substring(key.length()).trim())[ CD ]
Line_2 $$ public void HttpInputStream(InputStream in) -->Line_20 $$ if (!contentLengthFound || bytesLeft < 0) [ CD ]
