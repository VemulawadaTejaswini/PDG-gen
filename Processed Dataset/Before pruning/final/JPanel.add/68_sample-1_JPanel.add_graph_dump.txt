Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void createKeySigPanel(PGPPublicKey key) [ CD ]
Line_2 $$ public void createKeySigPanel(PGPPublicKey key) -->Line_3 $$ Iterator<?> iter = key.getSignatures()[ CD ]
Line_3 $$ Iterator<?> iter = key.getSignatures()-->Line_3 $$ key.getSignatures()[ CD ]
Line_2 $$ public void createKeySigPanel(PGPPublicKey key) -->Line_4 $$ while (iter.hasNext()) [ CD ]
Line_2 $$ public void createKeySigPanel(PGPPublicKey key) -->Line_2 $$ public void createKeySigPanel(PGPPublicKey key) [ CD ]
Line_4 $$ while (iter.hasNext()) -->Line_4 $$ iter.hasNext()[ CD ]
Line_3 $$ Iterator<?> iter = key.getSignatures()-->Line_4 $$ iter.hasNext()[ FD ]
Line_4 $$ while (iter.hasNext()) -->Line_5 $$ PGPSignature sig = (PGPSignature) iter.next()[ CD ]
Line_3 $$ Iterator<?> iter = key.getSignatures()-->Line_5 $$ iter.next()[ FD ]
Line_4 $$ while (iter.hasNext()) -->Line_6 $$ String uid = "0x" + Long.toHexString(sig.getKeyID()).substring(8).toUpperCase()[ CD ]
Line_5 $$ PGPSignature sig = (PGPSignature) iter.next()-->Line_6 $$ sig.getKeyID()[ FD ]
Line_4 $$ while (iter.hasNext()) -->Line_7 $$ p.add(new JLabel(uid))[ CD ]
Line_5 $$ PGPSignature sig = (PGPSignature) iter.next()-->Line_6 $$ sig.getKeyID()[ FD ]
