Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void getAuthenticatedUrl(String mirrorRepoUrl, String username, String password) [ CD ]
Line_2 $$ public void getAuthenticatedUrl(String mirrorRepoUrl, String username, String password) -->Line_3 $$ if (!mirrorRepoUrl.toLowerCase().startsWith("http")) [ CD ]
Line_3 $$ if (!mirrorRepoUrl.toLowerCase().startsWith("http")) -->Line_3 $$ !mirrorRepoUrl.toLowerCase().startsWith("http")[ CD ]
Line_3 $$ !mirrorRepoUrl.toLowerCase().startsWith("http")-->Line_3 $$ mirrorRepoUrl.toLowerCase().startsWith("http")[ CD ]
Line_3 $$ if (!mirrorRepoUrl.toLowerCase().startsWith("http")) -->Line_4 $$ return mirrorRepoUrl;[ CD ]
Line_2 $$ public void getAuthenticatedUrl(String mirrorRepoUrl, String username, String password) -->Line_6 $$ URI uri = URI.create(mirrorRepoUrl)[ CD ]
Line_6 $$ URI uri = URI.create(mirrorRepoUrl)-->Line_6 $$ URI.create(mirrorRepoUrl)[ CD ]
Line_2 $$ public void getAuthenticatedUrl(String mirrorRepoUrl, String username, String password) -->Line_7 $$ return new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment()).toString();[ CD ]
Line_7 $$ return new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment()).toString();-->Line_7 $$ new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment()).toString()[ CD ]
Line_6 $$ URI uri = URI.create(mirrorRepoUrl)-->Line_7 $$ uri.getScheme()[ FD ]
Line_6 $$ URI uri = URI.create(mirrorRepoUrl)-->Line_7 $$ uri.getHost()[ FD ]
Line_6 $$ URI uri = URI.create(mirrorRepoUrl)-->Line_7 $$ uri.getPort()[ FD ]
Line_6 $$ URI uri = URI.create(mirrorRepoUrl)-->Line_8 $$ uri.getPath()[ FD ]
Line_6 $$ URI uri = URI.create(mirrorRepoUrl)-->Line_8 $$ uri.getQuery()[ FD ]
Line_6 $$ URI uri = URI.create(mirrorRepoUrl)-->Line_8 $$ uri.getFragment()[ FD ]
