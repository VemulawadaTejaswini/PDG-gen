Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testToCharOnDate() [ CD ]
Line_2 $$ public void testToCharOnDate() -->Line_3 $$ Properties props = new Properties(TEST_PROPERTIES)[ CD ]
Line_2 $$ public void testToCharOnDate() -->Line_4 $$ Connection conn = DriverManager.getConnection(url, props)[ CD ]
Line_4 $$ Connection conn = DriverManager.getConnection(url, props)-->Line_4 $$ DriverManager.getConnection(url, props)[ CD ]
Line_3 $$ Properties props = new Properties(TEST_PROPERTIES)-->Line_4 $$ DriverManager.getConnection(url, props)[ FD ]
Line_2 $$ public void testToCharOnDate() -->Line_5 $$ PreparedStatement statement = conn.prepareStatement(query)[ CD ]
Line_5 $$ PreparedStatement statement = conn.prepareStatement(query)-->Line_5 $$ conn.prepareStatement(query)[ CD ]
Line_4 $$ Connection conn = DriverManager.getConnection(url, props)-->Line_5 $$ conn.prepareStatement(query)[ FD ]
Line_2 $$ public void testToCharOnDate() -->Line_6 $$ ResultSet rs = statement.executeQuery()[ CD ]
Line_6 $$ ResultSet rs = statement.executeQuery()-->Line_6 $$ statement.executeQuery()[ CD ]
Line_5 $$ PreparedStatement statement = conn.prepareStatement(query)-->Line_6 $$ statement.executeQuery()[ FD ]
Line_2 $$ public void testToCharOnDate() -->Line_7 $$ assertTrue(rs.next())[ CD ]
Line_6 $$ ResultSet rs = statement.executeQuery()-->Line_7 $$ rs.next()[ FD ]
Line_2 $$ public void testToCharOnDate() -->Line_8 $$ assertEquals(DateUtil.DEFAULT_DATE_FORMATTER.format(D1), rs.getString(2))[ CD ]
Line_6 $$ ResultSet rs = statement.executeQuery()-->Line_8 $$ rs.getString(2)[ FD ]
