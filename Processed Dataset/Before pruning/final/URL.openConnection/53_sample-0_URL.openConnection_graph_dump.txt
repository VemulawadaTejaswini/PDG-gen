Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void checkTaskGraphServlet(JobID job) [ CD ]
Line_2 $$ public void checkTaskGraphServlet(JobID job) -->Line_3 $$ URL url = new URL(jtURL + "/taskgraph?jobid=" + job.toString() + "&type=map")[ CD ]
Line_2 $$ public void checkTaskGraphServlet(JobID job) -->Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ CD ]
Line_3 $$ URL url = new URL(jtURL + "/taskgraph?jobid=" + job.toString() + "&type=map")-->Line_4 $$ url.openConnection()[ FD ]
Line_2 $$ public void checkTaskGraphServlet(JobID job) -->Line_5 $$ connection.setRequestMethod("GET")[ CD ]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_5 $$ connection.setRequestMethod("GET")[ FD ]
Line_2 $$ public void checkTaskGraphServlet(JobID job) -->Line_6 $$ connection.connect()[ CD ]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_6 $$ connection.connect()[ FD ]
Line_2 $$ public void checkTaskGraphServlet(JobID job) -->Line_7 $$ assertEquals(200, connection.getResponseCode())[ CD ]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_7 $$ connection.getResponseCode()[ FD ]
Line_2 $$ public void checkTaskGraphServlet(JobID job) -->Line_8 $$ String contents = slurpContents(connection)[ CD ]
Line_8 $$ String contents = slurpContents(connection)-->Line_8 $$ slurpContents(connection)[ CD ]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_8 $$ slurpContents(connection)[ FD ]
Line_2 $$ public void checkTaskGraphServlet(JobID job) -->Line_9 $$ assertTrue("Bad contents for job " + job + ":\n" + contents, contents.contains("</svg>"))[ CD ]
Line_8 $$ String contents = slurpContents(connection)-->Line_10 $$ contents.contains("</svg>")[ FD ]
