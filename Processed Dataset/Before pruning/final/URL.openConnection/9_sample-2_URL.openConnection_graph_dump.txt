Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testAuthorizationRequestHeaderPreventsCaching() [ CD ]
Line_2 $$ public void testAuthorizationRequestHeaderPreventsCaching() -->Line_3 $$ server.enqueue(new MockResponse().addHeader("Last-Modified: " + formatDate(-2, TimeUnit.MINUTES)).addHeader("Cache-Control: max-age=60").setBody("A"))[ CD ]
Line_2 $$ public void testAuthorizationRequestHeaderPreventsCaching() -->Line_7 $$ server.enqueue(new MockResponse().setBody("B"))[ CD ]
Line_2 $$ public void testAuthorizationRequestHeaderPreventsCaching() -->Line_8 $$ server.play()[ CD ]
Line_2 $$ public void testAuthorizationRequestHeaderPreventsCaching() -->Line_9 $$ URL url = server.getUrl("/")[ CD ]
Line_9 $$ URL url = server.getUrl("/")-->Line_9 $$ server.getUrl("/")[ CD ]
Line_2 $$ public void testAuthorizationRequestHeaderPreventsCaching() -->Line_10 $$ URLConnection connection = url.openConnection()[ CD ]
Line_10 $$ URLConnection connection = url.openConnection()-->Line_10 $$ url.openConnection()[ CD ]
Line_9 $$ URL url = server.getUrl("/")-->Line_10 $$ url.openConnection()[ FD ]
Line_2 $$ public void testAuthorizationRequestHeaderPreventsCaching() -->Line_11 $$ connection.addRequestProperty("Authorization", "password")[ CD ]
Line_10 $$ URLConnection connection = url.openConnection()-->Line_11 $$ connection.addRequestProperty("Authorization", "password")[ FD ]
Line_2 $$ public void testAuthorizationRequestHeaderPreventsCaching() -->Line_12 $$ assertEquals("A", readAscii(connection))[ CD ]
Line_10 $$ URLConnection connection = url.openConnection()-->Line_12 $$ readAscii(connection)[ FD ]
Line_2 $$ public void testAuthorizationRequestHeaderPreventsCaching() -->Line_13 $$ assertEquals("B", readAscii(url.openConnection()))[ CD ]
Line_9 $$ URL url = server.getUrl("/")-->Line_13 $$ url.openConnection()[ FD ]
