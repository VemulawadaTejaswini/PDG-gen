Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testWith(String expected, Charset charset) [ CD ]
Line_2 $$ public void testWith(String expected, Charset charset) -->Line_3 $$ URL url = applicationURL()[ CD ]
Line_3 $$ URL url = applicationURL()-->Line_3 $$ applicationURL()[ CD ]
Line_2 $$ public void testWith(String expected, Charset charset) -->Line_4 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_3 $$ URL url = applicationURL()-->Line_4 $$ url.openConnection()[ FD ]
Line_2 $$ public void testWith(String expected, Charset charset) -->Line_5 $$ assertEquals(200, conn.getResponseCode())[ CD ]
Line_4 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_5 $$ conn.getResponseCode()[ FD ]
Line_2 $$ public void testWith(String expected, Charset charset) -->Line_6 $$ Map<String, String> headers = Tools.responseHeaders(conn)[ CD ]
Line_6 $$ Map<String, String> headers = Tools.responseHeaders(conn)-->Line_6 $$ Tools.responseHeaders(conn)[ CD ]
Line_4 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_6 $$ Tools.responseHeaders(conn)[ FD ]
Line_2 $$ public void testWith(String expected, Charset charset) -->Line_7 $$ String contentType = headers.get("Content-Type")[ CD ]
Line_7 $$ String contentType = headers.get("Content-Type")-->Line_7 $$ headers.get("Content-Type")[ CD ]
Line_6 $$ Map<String, String> headers = Tools.responseHeaders(conn)-->Line_7 $$ headers.get("Content-Type")[ FD ]
Line_2 $$ public void testWith(String expected, Charset charset) -->Line_8 $$ assertNotNull(contentType)[ CD ]
Line_7 $$ String contentType = headers.get("Content-Type")-->Line_8 $$ assertNotNull(contentType)[ FD ]
