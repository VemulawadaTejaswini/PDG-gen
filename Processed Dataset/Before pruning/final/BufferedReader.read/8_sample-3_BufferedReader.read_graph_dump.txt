Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void getContent(BufferedReader reader) [ CD ]
Line_2 $$ public void getContent(BufferedReader reader) -->Line_3 $$ while ((ch = reader.read()) != -1) [ CD ]
Line_2 $$ public void getContent(BufferedReader reader) -->Line_2 $$ public void getContent(BufferedReader reader) [ CD ]
Line_3 $$ while ((ch = reader.read()) != -1) -->Line_4 $$ if (ch == '\r' || ch == '\n') [ CD ]
Line_4 $$ if (ch == '\r' || ch == '\n') -->Line_5 $$ if (line.length() > 0) [ CD ]
Line_5 $$ if (line.length() > 0) -->Line_6 $$ fullLog.append(ConsoleNote.removeNotes(line.toString()))[ CD ]
Line_5 $$ if (line.length() > 0) -->Line_7 $$ line.setLength(0)[ CD ]
Line_4 $$ if (ch == '\r' || ch == '\n') -->Line_9 $$ fullLog.append((char) ch)[ CD ]
Line_4 $$ if (ch == '\r' || ch == '\n') -->Line_11 $$ line.append((char) ch)[ CD ]
Line_2 $$ public void getContent(BufferedReader reader) -->Line_14 $$ if (line.length() > 0) [ CD ]
Line_14 $$ if (line.length() > 0) -->Line_15 $$ fullLog.append(ConsoleNote.removeNotes(line.toString()))[ CD ]
Line_2 $$ public void getContent(BufferedReader reader) -->Line_17 $$ StringBuilder content = new StringBuilder()[ CD ]
Line_2 $$ public void getContent(BufferedReader reader) -->Line_18 $$ final Matcher matcher = pattern.matcher(fullLog)[ CD ]
Line_18 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_18 $$ pattern.matcher(fullLog)[ CD ]
Line_2 $$ public void getContent(BufferedReader reader) -->Line_19 $$ while (matcher.find()) [ CD ]
Line_2 $$ public void getContent(BufferedReader reader) -->Line_2 $$ public void getContent(BufferedReader reader) [ CD ]
Line_19 $$ while (matcher.find()) -->Line_19 $$ matcher.find()[ CD ]
Line_18 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_19 $$ matcher.find()[ FD ]
Line_19 $$ while (matcher.find()) -->Line_20 $$ if (maxMatches != 0 && ++numMatches > maxMatches) [ CD ]
Line_19 $$ while (matcher.find()) -->Line_23 $$ if (showTruncatedLines) [ CD ]
Line_23 $$ if (showTruncatedLines) -->Line_24 $$ if (matcher.start() > lastMatchEnd) [ CD ]
Line_24 $$ if (matcher.start() > lastMatchEnd) -->Line_24 $$ matcher.start()[ CD ]
Line_18 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_24 $$ matcher.start()[ FD ]
Line_24 $$ if (matcher.start() > lastMatchEnd) -->Line_25 $$ int numLinesTruncated = countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))[ CD ]
Line_25 $$ int numLinesTruncated = countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))-->Line_25 $$ countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))[ CD ]
Line_18 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_25 $$ matcher.start()[ FD ]
Line_24 $$ if (matcher.start() > lastMatchEnd) -->Line_26 $$ if (numLinesTruncated > 0) [ CD ]
Line_25 $$ int numLinesTruncated = countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))-->Line_26 $$ if (numLinesTruncated > 0) [ FD ]
Line_26 $$ if (numLinesTruncated > 0) -->Line_27 $$ stopPre(content, insidePre)[ CD ]
Line_17 $$ StringBuilder content = new StringBuilder()-->Line_27 $$ stopPre(content, insidePre)[ FD ]
Line_26 $$ if (numLinesTruncated > 0) -->Line_28 $$ appendLinesTruncated(content, numLinesTruncated, asHtml)[ CD ]
Line_17 $$ StringBuilder content = new StringBuilder()-->Line_28 $$ appendLinesTruncated(content, numLinesTruncated, asHtml)[ FD ]
Line_25 $$ int numLinesTruncated = countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))-->Line_28 $$ appendLinesTruncated(content, numLinesTruncated, asHtml)[ FD ]
Line_19 $$ while (matcher.find()) -->Line_32 $$ if (asHtml) [ CD ]
Line_32 $$ if (asHtml) -->Line_33 $$ startPre(content, insidePre)[ CD ]
Line_17 $$ StringBuilder content = new StringBuilder()-->Line_33 $$ startPre(content, insidePre)[ FD ]
Line_19 $$ while (matcher.find()) -->Line_35 $$ if (substText != null) [ CD ]
Line_35 $$ if (substText != null) -->Line_36 $$ final StringBuffer substBuf = new StringBuffer()[ CD ]
Line_35 $$ if (substText != null) -->Line_37 $$ matcher.appendReplacement(substBuf, substText)[ CD ]
Line_18 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_37 $$ matcher.appendReplacement(substBuf, substText)[ FD ]
Line_36 $$ final StringBuffer substBuf = new StringBuffer()-->Line_37 $$ matcher.appendReplacement(substBuf, substText)[ FD ]
Line_35 $$ if (substText != null) -->Line_38 $$ final String segment = substBuf.substring(matcher.start() - lastMatchEnd)[ CD ]
Line_38 $$ final String segment = substBuf.substring(matcher.start() - lastMatchEnd)-->Line_38 $$ substBuf.substring(matcher.start() - lastMatchEnd)[ CD ]
Line_36 $$ final StringBuffer substBuf = new StringBuffer()-->Line_38 $$ substBuf.substring(matcher.start() - lastMatchEnd)[ FD ]
Line_18 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_38 $$ matcher.start()[ FD ]
Line_35 $$ if (substText != null) -->Line_39 $$ appendMatchedSegment(content, segment, escapeHtml, matchedSegmentHtmlStyle)[ CD ]
Line_17 $$ StringBuilder content = new StringBuilder()-->Line_39 $$ appendMatchedSegment(content, segment, escapeHtml, matchedSegmentHtmlStyle)[ FD ]
Line_38 $$ final String segment = substBuf.substring(matcher.start() - lastMatchEnd)-->Line_39 $$ appendMatchedSegment(content, segment, escapeHtml, matchedSegmentHtmlStyle)[ FD ]
Line_35 $$ if (substText != null) -->Line_41 $$ appendMatchedSegment(content, matcher.group(), escapeHtml, matchedSegmentHtmlStyle)[ CD ]
Line_17 $$ StringBuilder content = new StringBuilder()-->Line_41 $$ appendMatchedSegment(content, matcher.group(), escapeHtml, matchedSegmentHtmlStyle)[ FD ]
Line_18 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_41 $$ matcher.group()[ FD ]
Line_19 $$ while (matcher.find()) -->Line_43 $$ matcher.end()[ CD ]
Line_18 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_43 $$ matcher.end()[ FD ]
Line_25 $$ int numLinesTruncated = countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))-->Line_26 $$ if (numLinesTruncated > 0) [ FD ]
Line_25 $$ int numLinesTruncated = countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))-->Line_28 $$ appendLinesTruncated(content, numLinesTruncated, asHtml)[ FD ]
Line_36 $$ final StringBuffer substBuf = new StringBuffer()-->Line_37 $$ matcher.appendReplacement(substBuf, substText)[ FD ]
Line_36 $$ final StringBuffer substBuf = new StringBuffer()-->Line_38 $$ substBuf.substring(matcher.start() - lastMatchEnd)[ FD ]
Line_38 $$ final String segment = substBuf.substring(matcher.start() - lastMatchEnd)-->Line_39 $$ appendMatchedSegment(content, segment, escapeHtml, matchedSegmentHtmlStyle)[ FD ]
