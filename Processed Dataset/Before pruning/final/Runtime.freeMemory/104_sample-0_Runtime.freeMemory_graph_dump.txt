Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void updateState() [ CD ]
Line_2 $$ public void updateState() -->Line_3 $$ final Runtime runtime = Runtime.getRuntime()[ CD ]
Line_3 $$ final Runtime runtime = Runtime.getRuntime()-->Line_3 $$ Runtime.getRuntime()[ CD ]
Line_2 $$ public void updateState() -->Line_4 $$ final long total = runtime.totalMemory() / MEGABYTE[ CD ]
Line_4 $$ final long total = runtime.totalMemory() / MEGABYTE-->Line_4 $$ runtime.totalMemory()[ CD ]
Line_3 $$ final Runtime runtime = Runtime.getRuntime()-->Line_4 $$ runtime.totalMemory()[ FD ]
Line_2 $$ public void updateState() -->Line_5 $$ final long used = total - runtime.freeMemory() / MEGABYTE[ CD ]
Line_3 $$ final Runtime runtime = Runtime.getRuntime()-->Line_5 $$ runtime.freeMemory()[ FD ]
Line_2 $$ public void updateState() -->Line_6 $$ if (total != myLastTotal || used != myLastUsed) [ CD ]
Line_6 $$ if (total != myLastTotal || used != myLastUsed) -->Line_9 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_10 $$ public void run() -->Line_12 $$ repaint()[ CD ]
Line_6 $$ if (total != myLastTotal || used != myLastUsed) -->Line_15 $$ setToolTipText(UIBundle.message("memory.usage.panel.statistics.message", total, used))[ CD ]
Line_4 $$ final long total = runtime.totalMemory() / MEGABYTE-->Line_15 $$ UIBundle.message("memory.usage.panel.statistics.message", total, used)[ FD ]
Line_5 $$ final long used = total - runtime.freeMemory() / MEGABYTE-->Line_15 $$ UIBundle.message("memory.usage.panel.statistics.message", total, used)[ FD ]
