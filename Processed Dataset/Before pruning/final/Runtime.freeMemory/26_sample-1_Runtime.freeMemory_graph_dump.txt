Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void automatic() [ CD ]
Line_2 $$ public void automatic() -->Line_3 $$ Runtime rt = Runtime.getRuntime()[ CD ]
Line_3 $$ Runtime rt = Runtime.getRuntime()-->Line_3 $$ Runtime.getRuntime()[ CD ]
Line_2 $$ public void automatic() -->Line_4 $$ final long max = rt.maxMemory()[ CD ]
Line_4 $$ final long max = rt.maxMemory()-->Line_4 $$ rt.maxMemory()[ CD ]
Line_3 $$ Runtime rt = Runtime.getRuntime()-->Line_4 $$ rt.maxMemory()[ FD ]
Line_2 $$ public void automatic() -->Line_5 $$ final long total = rt.totalMemory()[ CD ]
Line_5 $$ final long total = rt.totalMemory()-->Line_5 $$ rt.totalMemory()[ CD ]
Line_3 $$ Runtime rt = Runtime.getRuntime()-->Line_5 $$ rt.totalMemory()[ FD ]
Line_2 $$ public void automatic() -->Line_6 $$ final long free = rt.freeMemory()[ CD ]
Line_6 $$ final long free = rt.freeMemory()-->Line_6 $$ rt.freeMemory()[ CD ]
Line_3 $$ Runtime rt = Runtime.getRuntime()-->Line_6 $$ rt.freeMemory()[ FD ]
Line_2 $$ public void automatic() -->Line_7 $$ if (sortBufferByteSize < minBufferSizeBytes || totalAvailableBytes > 10 * minBufferSizeBytes) [ CD ]
Line_7 $$ if (sortBufferByteSize < minBufferSizeBytes || totalAvailableBytes > 10 * minBufferSizeBytes) -->Line_9 $$ if (totalAvailableBytes / 2 > minBufferSizeBytes) [ CD ]
Line_9 $$ if (totalAvailableBytes / 2 > minBufferSizeBytes) -->Line_12 $$ Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize)[ CD ]
