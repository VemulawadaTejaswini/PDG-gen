Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void createAsync(SocketDestination dest, KeyedResourcePool<SocketDestination, SocketAndStreams> pool) [ CD ]
Line_2 $$ public void createAsync(SocketDestination dest, KeyedResourcePool<SocketDestination, SocketAndStreams> pool) -->Line_3 $$ socket.connect(new InetSocketAddress(dest.getHost(), dest.getPort()), soTimeoutMs)[ CD ]
Line_2 $$ public void createAsync(SocketDestination dest, KeyedResourcePool<SocketDestination, SocketAndStreams> pool) -->Line_4 $$ recordSocketCreation(dest, socket)[ CD ]
Line_2 $$ public void createAsync(SocketDestination dest, KeyedResourcePool<SocketDestination, SocketAndStreams> pool) -->Line_5 $$ SocketAndStreams sands = new SocketAndStreams(socket, dest.getRequestFormatType())[ CD ]
Line_2 $$ public void createAsync(SocketDestination dest, KeyedResourcePool<SocketDestination, SocketAndStreams> pool) -->Line_6 $$ negotiateProtocol(sands, dest.getRequestFormatType())[ CD ]
Line_5 $$ SocketAndStreams sands = new SocketAndStreams(socket, dest.getRequestFormatType())-->Line_6 $$ negotiateProtocol(sands, dest.getRequestFormatType())[ FD ]
Line_2 $$ public void createAsync(SocketDestination dest, KeyedResourcePool<SocketDestination, SocketAndStreams> pool) -->Line_7 $$ pool.checkin(dest, sands)[ CD ]
Line_5 $$ SocketAndStreams sands = new SocketAndStreams(socket, dest.getRequestFormatType())-->Line_7 $$ pool.checkin(dest, sands)[ FD ]
