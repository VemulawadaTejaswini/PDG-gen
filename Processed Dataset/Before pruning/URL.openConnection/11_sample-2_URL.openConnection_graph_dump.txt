Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void assertAuthorizationRequestFullyCached(MockResponse response) [ CD ]
Line_2 $$ public void assertAuthorizationRequestFullyCached(MockResponse response) -->Line_3 $$ server.enqueue(new MockResponse().setBody("B"))[ CD ]
Line_2 $$ public void assertAuthorizationRequestFullyCached(MockResponse response) -->Line_4 $$ server.play()[ CD ]
Line_2 $$ public void assertAuthorizationRequestFullyCached(MockResponse response) -->Line_5 $$ URL url = server.getUrl("/")[ CD ]
Line_5 $$ URL url = server.getUrl("/")-->Line_5 $$ server.getUrl("/")[ CD ]
Line_2 $$ public void assertAuthorizationRequestFullyCached(MockResponse response) -->Line_6 $$ URLConnection connection = url.openConnection()[ CD ]
Line_6 $$ URLConnection connection = url.openConnection()-->Line_6 $$ url.openConnection()[ CD ]
Line_5 $$ URL url = server.getUrl("/")-->Line_6 $$ url.openConnection()[ FD ]
Line_2 $$ public void assertAuthorizationRequestFullyCached(MockResponse response) -->Line_7 $$ connection.addRequestProperty("Authorization", "password")[ CD ]
Line_6 $$ URLConnection connection = url.openConnection()-->Line_7 $$ connection.addRequestProperty("Authorization", "password")[ FD ]
Line_2 $$ public void assertAuthorizationRequestFullyCached(MockResponse response) -->Line_8 $$ assertEquals("A", readAscii(connection))[ CD ]
Line_6 $$ URLConnection connection = url.openConnection()-->Line_8 $$ readAscii(connection)[ FD ]
Line_2 $$ public void assertAuthorizationRequestFullyCached(MockResponse response) -->Line_9 $$ assertEquals("A", readAscii(url.openConnection()))[ CD ]
Line_5 $$ URL url = server.getUrl("/")-->Line_9 $$ url.openConnection()[ FD ]
