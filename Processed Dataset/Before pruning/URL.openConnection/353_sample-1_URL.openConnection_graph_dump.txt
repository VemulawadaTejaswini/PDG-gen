Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void nextPage() [ CD ]
Line_2 $$ public void nextPage() -->Line_3 $$ if (RELATIVE_LINK_NOT_FOUND.equals(nextPageUrl)) [ CD ]
Line_3 $$ if (RELATIVE_LINK_NOT_FOUND.equals(nextPageUrl)) -->Line_3 $$ RELATIVE_LINK_NOT_FOUND.equals(nextPageUrl)[ CD ]
Line_2 $$ public void nextPage() -->Line_6 $$ URL url = new URL(nextPageUrl)[ CD ]
Line_2 $$ public void nextPage() -->Line_7 $$ LOG.info("GitHub API querying issue page [ CD ]
Line_6 $$ URL url = new URL(nextPageUrl)-->Line_7 $$ queryParamValue(url, "page")[ FD ]
Line_2 $$ public void nextPage() -->Line_8 $$ URLConnection urlConnection = url.openConnection()[ CD ]
Line_8 $$ URLConnection urlConnection = url.openConnection()-->Line_8 $$ url.openConnection()[ CD ]
Line_6 $$ URL url = new URL(nextPageUrl)-->Line_8 $$ url.openConnection()[ FD ]
Line_2 $$ public void nextPage() -->Line_9 $$ LOG.info("GitHub API rate info => Remaining : [ CD ]
Line_8 $$ URLConnection urlConnection = url.openConnection()-->Line_10 $$ urlConnection.getHeaderField("X-RateLimit-Remaining")[ FD ]
Line_8 $$ URLConnection urlConnection = url.openConnection()-->Line_11 $$ urlConnection.getHeaderField("X-RateLimit-Limit")[ FD ]
Line_2 $$ public void nextPage() -->Line_13 $$ extractRelativeLink(urlConnection.getHeaderField("Link"), "next")[ CD ]
Line_8 $$ URLConnection urlConnection = url.openConnection()-->Line_13 $$ urlConnection.getHeaderField("Link")[ FD ]
Line_2 $$ public void nextPage() -->Line_14 $$ return parseJsonFrom(urlConnection);[ CD ]
Line_14 $$ return parseJsonFrom(urlConnection);-->Line_14 $$ parseJsonFrom(urlConnection)[ CD ]
Line_8 $$ URLConnection urlConnection = url.openConnection()-->Line_14 $$ parseJsonFrom(urlConnection)[ FD ]
