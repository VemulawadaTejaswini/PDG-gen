Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void expand(List<URI> inputs) [ CD ]
Line_3 $$ URI input-->Line_4 $$ if (isFileOrDir(input)) [ FD ]
Line_4 $$ if (isFileOrDir(input)) -->Line_4 $$ isFileOrDir(input)[ CD ]
Line_3 $$ URI input-->Line_4 $$ isFileOrDir(input)[ FD ]
Line_4 $$ if (isFileOrDir(input)) -->Line_5 $$ Path inputPath = Paths.get(input)[ CD ]
Line_5 $$ Path inputPath = Paths.get(input)-->Line_5 $$ Paths.get(input)[ CD ]
Line_3 $$ URI input-->Line_5 $$ Paths.get(input)[ FD ]
Line_4 $$ if (isFileOrDir(input)) -->Line_6 $$ if (Files.isDirectory(inputPath)) [ CD ]
Line_5 $$ Path inputPath = Paths.get(input)-->Line_6 $$ if (Files.isDirectory(inputPath)) [ FD ]
Line_6 $$ if (Files.isDirectory(inputPath)) -->Line_6 $$ Files.isDirectory(inputPath)[ CD ]
Line_5 $$ Path inputPath = Paths.get(input)-->Line_6 $$ Files.isDirectory(inputPath)[ FD ]
Line_7 $$ DirectoryStream<Path> childPaths = Files.newDirectoryStream(inputPath)-->Line_7 $$ Files.newDirectoryStream(inputPath)[ CD ]
Line_5 $$ Path inputPath = Paths.get(input)-->Line_7 $$ Files.newDirectoryStream(inputPath)[ FD ]
Line_8 $$ Path childPath-->Line_9 $$ childPath.toUri()[ FD ]
Line_6 $$ if (Files.isDirectory(inputPath)) -->Line_13 $$ expanded.add(input)[ CD ]
Line_3 $$ URI input-->Line_13 $$ expanded.add(input)[ FD ]
Line_4 $$ if (isFileOrDir(input)) -->Line_16 $$ expanded.add(input)[ CD ]
Line_3 $$ URI input-->Line_16 $$ expanded.add(input)[ FD ]
Line_2 $$ public void expand(List<URI> inputs) -->Line_19 $$ for (int i = 0; i < expanded.size(); i++) [ CD ]
Line_2 $$ public void expand(List<URI> inputs) -->Line_2 $$ public void expand(List<URI> inputs) [ CD ]
Line_19 $$ for (int i = 0; i < expanded.size(); i++) -->Line_19 $$ expanded.size()[ CD ]
Line_19 $$ for (int i = 0; i < expanded.size(); i++) -->Line_19 $$ int i = 0[ CD ]
Line_19 $$ for (int i = 0; i < expanded.size(); i++) -->Line_19 $$ i++[ CD ]
Line_19 $$ int i = 0-->Line_19 $$ i++[ FD ]
Line_19 $$ for (int i = 0; i < expanded.size(); i++) -->Line_20 $$ URI input = expanded.get(i)[ CD ]
Line_20 $$ URI input = expanded.get(i)-->Line_20 $$ expanded.get(i)[ CD ]
Line_19 $$ int i = 0-->Line_20 $$ expanded.get(i)[ FD ]
Line_19 $$ for (int i = 0; i < expanded.size(); i++) -->Line_21 $$ if (input.getScheme() == null) [ CD ]
Line_20 $$ URI input = expanded.get(i)-->Line_21 $$ input.getScheme()[ FD ]
Line_3 $$ URI input-->Line_21 $$ input.getScheme()[ FD ]
Line_21 $$ if (input.getScheme() == null) -->Line_22 $$ expanded.set(i, new URI("file", input.getSchemeSpecificPart(), input.getFragment()))[ CD ]
Line_19 $$ int i = 0-->Line_22 $$ expanded.set(i, new URI("file", input.getSchemeSpecificPart(), input.getFragment()))[ FD ]
Line_20 $$ URI input = expanded.get(i)-->Line_22 $$ input.getSchemeSpecificPart()[ FD ]
Line_3 $$ URI input-->Line_22 $$ input.getSchemeSpecificPart()[ FD ]
Line_20 $$ URI input = expanded.get(i)-->Line_22 $$ input.getFragment()[ FD ]
Line_3 $$ URI input-->Line_22 $$ input.getFragment()[ FD ]
Line_19 $$ int i = 0-->Line_19 $$ for (int i = 0; i < expanded.size(); i++) [ FD ]
Line_19 $$ int i = 0-->Line_19 $$ for (int i = 0; i < expanded.size(); i++) [ FD ]
Line_19 $$ int i = 0-->Line_19 $$ i++[ FD ]
Line_19 $$ int i = 0-->Line_20 $$ expanded.get(i)[ FD ]
Line_20 $$ URI input = expanded.get(i)-->Line_21 $$ input.getScheme()[ FD ]
Line_19 $$ int i = 0-->Line_22 $$ expanded.set(i, new URI("file", input.getSchemeSpecificPart(), input.getFragment()))[ FD ]
Line_20 $$ URI input = expanded.get(i)-->Line_22 $$ input.getSchemeSpecificPart()[ FD ]
Line_20 $$ URI input = expanded.get(i)-->Line_22 $$ input.getFragment()[ FD ]
