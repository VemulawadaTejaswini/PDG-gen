Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void start(File dataDir) [ CD ]
Line_2 $$ public void start(File dataDir) -->Line_3 $$ super.start()[ CD ]
Line_2 $$ public void start(File dataDir) -->Line_4 $$ if (!dataDir.exists()) [ CD ]
Line_4 $$ if (!dataDir.exists()) -->Line_4 $$ if (!dataDir.exists()) [ CD ]
Line_4 $$ if (!dataDir.exists()) -->Line_4 $$ if (!dataDir.exists()) [ CD ]
Line_2 $$ public void start(File dataDir) -->Line_4 $$ if (!dataDir.exists()) [ FD ]
Line_2 $$ public void start(File dataDir) -->Line_6 $$ FileUtils.forceMkdir(dataDir)[ FD ]
Line_2 $$ public void start(File dataDir) -->Line_11 $$ if (!dataDir.canRead() || !dataDir.canWrite()) [ CD ]
Line_11 $$ if (!dataDir.canRead() || !dataDir.canWrite()) -->Line_11 $$ if (!dataDir.canRead() || !dataDir.canWrite()) [ CD ]
Line_2 $$ public void start(File dataDir) -->Line_11 $$ if (!dataDir.canRead() || !dataDir.canWrite()) [ FD ]
Line_11 $$ if (!dataDir.canRead() || !dataDir.canWrite()) -->Line_11 $$ if (!dataDir.canRead() || !dataDir.canWrite()) [ CD ]
Line_2 $$ public void start(File dataDir) -->Line_11 $$ if (!dataDir.canRead() || !dataDir.canWrite()) [ FD ]
Line_2 $$ public void start(File dataDir) -->Line_12 $$ throw new CanalMetaManagerException("dir[" + dataDir.getPath() + "] can not read/write")[ FD ]
Line_2 $$ public void start(File dataDir) -->Line_14 $$ if (!memoryLogPositionManager.isStart()) [ CD ]
Line_14 $$ if (!memoryLogPositionManager.isStart()) -->Line_14 $$ if (!memoryLogPositionManager.isStart()) [ CD ]
Line_14 $$ if (!memoryLogPositionManager.isStart()) -->Line_14 $$ if (!memoryLogPositionManager.isStart()) [ CD ]
Line_14 $$ if (!memoryLogPositionManager.isStart()) -->Line_15 $$ memoryLogPositionManager.start()[ CD ]
Line_2 $$ public void start(File dataDir) -->Line_17 $$ executorService.scheduleAtFixedRate(() -> [ CD ]
Line_19 $$ for (String destination : tasks) -->Line_21 $$ flushDataToFile(destination)[ FD ]
Line_19 $$ for (String destination : tasks) -->Line_22 $$ persistTasks.remove(destination)[ FD ]
