Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void createVerticle(String verticleName, ClassLoader classLoader) [ CD ]
Line_2 $$ public void createVerticle(String verticleName, ClassLoader classLoader) -->Line_3 $$ verticleName = VerticleFactory.removePrefix(verticleName)[ CD ]
Line_2 $$ public void createVerticle(String verticleName, ClassLoader classLoader) -->Line_3 $$ verticleName = VerticleFactory.removePrefix(verticleName)[ FD ]
Line_3 $$ verticleName = VerticleFactory.removePrefix(verticleName)-->Line_3 $$ verticleName = VerticleFactory.removePrefix(verticleName)[ FD ]
Line_3 $$ verticleName = VerticleFactory.removePrefix(verticleName)-->Line_3 $$ verticleName = VerticleFactory.removePrefix(verticleName)[ CD ]
Line_2 $$ public void createVerticle(String verticleName, ClassLoader classLoader) -->Line_3 $$ verticleName = VerticleFactory.removePrefix(verticleName)[ FD ]
Line_3 $$ verticleName = VerticleFactory.removePrefix(verticleName)-->Line_3 $$ verticleName = VerticleFactory.removePrefix(verticleName)[ FD ]
Line_2 $$ public void createVerticle(String verticleName, ClassLoader classLoader) -->Line_4 $$ if (verticleName.endsWith(".java")) [ CD ]
Line_2 $$ public void createVerticle(String verticleName, ClassLoader classLoader) -->Line_4 $$ if (verticleName.endsWith(".java")) [ FD ]
Line_3 $$ verticleName = VerticleFactory.removePrefix(verticleName)-->Line_4 $$ if (verticleName.endsWith(".java")) [ FD ]
Line_4 $$ if (verticleName.endsWith(".java")) -->Line_4 $$ if (verticleName.endsWith(".java")) [ CD ]
Line_2 $$ public void createVerticle(String verticleName, ClassLoader classLoader) -->Line_4 $$ if (verticleName.endsWith(".java")) [ FD ]
Line_3 $$ verticleName = VerticleFactory.removePrefix(verticleName)-->Line_4 $$ if (verticleName.endsWith(".java")) [ FD ]
Line_4 $$ if (verticleName.endsWith(".java")) -->Line_5 $$ CompilingClassLoader compilingLoader = new CompilingClassLoader(classLoader, verticleName)[ CD ]
Line_4 $$ if (verticleName.endsWith(".java")) -->Line_6 $$ String className = compilingLoader.resolveMainClassName()[ CD ]
Line_6 $$ String className = compilingLoader.resolveMainClassName()-->Line_6 $$ String className = compilingLoader.resolveMainClassName()[ CD ]
Line_5 $$ CompilingClassLoader compilingLoader = new CompilingClassLoader(classLoader, verticleName)-->Line_6 $$ String className = compilingLoader.resolveMainClassName()[ FD ]
Line_4 $$ if (verticleName.endsWith(".java")) -->Line_7 $$ clazz = compilingLoader.loadClass(className)[ CD ]
Line_5 $$ CompilingClassLoader compilingLoader = new CompilingClassLoader(classLoader, verticleName)-->Line_7 $$ clazz = compilingLoader.loadClass(className)[ FD ]
Line_6 $$ String className = compilingLoader.resolveMainClassName()-->Line_7 $$ clazz = compilingLoader.loadClass(className)[ FD ]
Line_4 $$ if (verticleName.endsWith(".java")) -->Line_9 $$ clazz = classLoader.loadClass(verticleName)[ CD ]
Line_2 $$ public void createVerticle(String verticleName, ClassLoader classLoader) -->Line_9 $$ clazz = classLoader.loadClass(verticleName)[ FD ]
Line_2 $$ public void createVerticle(String verticleName, ClassLoader classLoader) -->Line_9 $$ clazz = classLoader.loadClass(verticleName)[ FD ]
Line_3 $$ verticleName = VerticleFactory.removePrefix(verticleName)-->Line_9 $$ clazz = classLoader.loadClass(verticleName)[ FD ]
Line_2 $$ public void createVerticle(String verticleName, ClassLoader classLoader) -->Line_11 $$ return (Verticle) clazz.newInstance()[ CD ]
