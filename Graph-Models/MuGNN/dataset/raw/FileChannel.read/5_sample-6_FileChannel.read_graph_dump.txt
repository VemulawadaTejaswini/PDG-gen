Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void dump(FileChannel fc) [ CD ]
Line_2 $$ public void dump(FileChannel fc) -->Line_3 $$ int sz = (int) fc.size()[ CD ]
Line_2 $$ public void dump(FileChannel fc) -->Line_3 $$ int sz = (int) fc.size()[ FD ]
Line_2 $$ public void dump(FileChannel fc) -->Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(sz)[ CD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(sz)-->Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(sz)[ CD ]
Line_3 $$ int sz = (int) fc.size()-->Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(sz)[ FD ]
Line_2 $$ public void dump(FileChannel fc) -->Line_5 $$ fc.position(0)[ CD ]
Line_2 $$ public void dump(FileChannel fc) -->Line_5 $$ fc.position(0)[ FD ]
Line_2 $$ public void dump(FileChannel fc) -->Line_6 $$ if (fc.read(bb) != sz)[ CD ]
Line_3 $$ int sz = (int) fc.size()-->Line_6 $$ if (fc.read(bb) != sz)[ FD ]
Line_2 $$ public void dump(FileChannel fc) -->Line_6 $$ if (fc.read(bb) != sz)[ FD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(sz)-->Line_6 $$ if (fc.read(bb) != sz)[ FD ]
Line_2 $$ public void dump(FileChannel fc) -->Line_8 $$ bb.flip()[ CD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(sz)-->Line_8 $$ bb.flip()[ FD ]
Line_2 $$ public void dump(FileChannel fc) -->Line_9 $$ while (bb.hasRemaining() && (n < 32)) [ CD ]
Line_2 $$ public void dump(FileChannel fc) -->Line_2 $$ public void dump(FileChannel fc) [ CD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(sz)-->Line_9 $$ while (bb.hasRemaining() && (n < 32)) [ FD ]
Line_9 $$ while (bb.hasRemaining() && (n < 32)) -->Line_10 $$ byte b = bb.get()[ CD ]
Line_10 $$ byte b = bb.get()-->Line_10 $$ byte b = bb.get()[ CD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(sz)-->Line_10 $$ byte b = bb.get()[ FD ]
Line_9 $$ while (bb.hasRemaining() && (n < 32)) -->Line_11 $$ if (b == prev) [ CD ]
Line_10 $$ byte b = bb.get()-->Line_11 $$ if (b == prev) [ FD ]
Line_9 $$ while (bb.hasRemaining() && (n < 32)) -->Line_15 $$ if (r > 0) [ CD ]
Line_15 $$ if (r > 0) -->Line_16 $$ int c = prev & 0xff[ CD ]
Line_15 $$ if (r > 0) -->Line_17 $$ if (c < 0x10)[ CD ]
Line_16 $$ int c = prev & 0xff-->Line_17 $$ if (c < 0x10)[ FD ]
Line_17 $$ if (c < 0x10)-->Line_18 $$ out.print('0')[ CD ]
Line_15 $$ if (r > 0) -->Line_19 $$ out.print(Integer.toHexString(c))[ CD ]
Line_16 $$ int c = prev & 0xff-->Line_19 $$ out.print(Integer.toHexString(c))[ FD ]
Line_15 $$ if (r > 0) -->Line_20 $$ if (r > 1) [ CD ]
Line_20 $$ if (r > 1) -->Line_21 $$ out.print("[")[ CD ]
Line_20 $$ if (r > 1) -->Line_22 $$ out.print(r)[ CD ]
Line_20 $$ if (r > 1) -->Line_23 $$ out.print("]")[ CD ]
Line_10 $$ byte b = bb.get()-->Line_11 $$ if (b == prev) [ FD ]
Line_16 $$ int c = prev & 0xff-->Line_17 $$ if (c < 0x10)[ FD ]
Line_16 $$ int c = prev & 0xff-->Line_19 $$ out.print(Integer.toHexString(c))[ FD ]
