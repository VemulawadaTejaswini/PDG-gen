Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void getCodeLines(final IFile file) [ CD ]
Line_2 $$ public void getCodeLines(final IFile file) -->Line_3 $$ while ((n = reader.read(readBuffer)) > 0) [ CD ]
Line_2 $$ public void getCodeLines(final IFile file) -->Line_2 $$ public void getCodeLines(final IFile file) [ CD ]
Line_3 $$ while ((n = reader.read(readBuffer)) > 0) -->Line_4 $$ buffer.append(readBuffer, 0, n)[ CD ]
Line_2 $$ public void getCodeLines(final IFile file) -->Line_6 $$ final IContentType contentType = IDE.getContentType(file)[ CD ]
Line_6 $$ final IContentType contentType = IDE.getContentType(file)-->Line_6 $$ final IContentType contentType = IDE.getContentType(file)[ CD ]
Line_2 $$ public void getCodeLines(final IFile file) -->Line_6 $$ final IContentType contentType = IDE.getContentType(file)[ FD ]
Line_2 $$ public void getCodeLines(final IFile file) -->Line_7 $$ final ICodeSubmitContentHandler handler = RCodeLaunching.getCodeSubmitContentHandler((contentType != null) ? contentType.getId() : null)[ CD ]
Line_7 $$ final ICodeSubmitContentHandler handler = RCodeLaunching.getCodeSubmitContentHandler((contentType != null) ? contentType.getId() : null)-->Line_7 $$ final ICodeSubmitContentHandler handler = RCodeLaunching.getCodeSubmitContentHandler((contentType != null) ? contentType.getId() : null)[ CD ]
Line_6 $$ final IContentType contentType = IDE.getContentType(file)-->Line_7 $$ final ICodeSubmitContentHandler handler = RCodeLaunching.getCodeSubmitContentHandler((contentType != null) ? contentType.getId() : null)[ FD ]
