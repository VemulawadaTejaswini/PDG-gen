Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void readInputStreamToString(Socket socket) [ CD ]
Line_2 $$ public void readInputStreamToString(Socket socket) -->Line_3 $$ while ((line = bufferedReader.readLine()) != null) [ CD ]
Line_2 $$ public void readInputStreamToString(Socket socket) -->Line_2 $$ public void readInputStreamToString(Socket socket) [ CD ]
Line_3 $$ while ((line = bufferedReader.readLine()) != null) -->Line_4 $$ if (line.startsWith("Content-Length")) [ CD ]
Line_4 $$ if (line.startsWith("Content-Length")) -->Line_4 $$ if (line.startsWith("Content-Length")) [ CD ]
Line_4 $$ if (line.startsWith("Content-Length")) -->Line_5 $$ contentLength = Integer.parseInt(line.split(":")[1].trim())[ CD ]
Line_3 $$ while ((line = bufferedReader.readLine()) != null) -->Line_7 $$ if (line.length() == 0) [ CD ]
Line_7 $$ if (line.length() == 0) -->Line_8 $$ if (contentLength != null) [ CD ]
Line_8 $$ if (contentLength != null) -->Line_9 $$ result.append('\n')[ CD ]
Line_8 $$ if (contentLength != null) -->Line_10 $$ for (int position = 0; position < contentLength; position++) [ CD ]
Line_8 $$ if (contentLength != null) -->Line_8 $$ if (contentLength != null) [ CD ]
Line_10 $$ for (int position = 0; position < contentLength; position++) -->Line_10 $$ for (int position = 0; position < contentLength; position++) [ CD ]
Line_10 $$ for (int position = 0; position < contentLength; position++) -->Line_10 $$ for (int position = 0; position < contentLength; position++) [ CD ]
Line_10 $$ for (int position = 0; position < contentLength; position++) -->Line_10 $$ for (int position = 0; position < contentLength; position++) [ FD ]
Line_10 $$ for (int position = 0; position < contentLength; position++) -->Line_11 $$ result.append((char) bufferedReader.read())[ CD ]
Line_3 $$ while ((line = bufferedReader.readLine()) != null) -->Line_16 $$ result.append(line).append('\n')[ CD ]
Line_10 $$ for (int position = 0; position < contentLength; position++) -->Line_10 $$ for (int position = 0; position < contentLength; position++) [ FD ]
Line_10 $$ for (int position = 0; position < contentLength; position++) -->Line_10 $$ for (int position = 0; position < contentLength; position++) [ FD ]
Line_10 $$ for (int position = 0; position < contentLength; position++) -->Line_10 $$ for (int position = 0; position < contentLength; position++) [ FD ]
