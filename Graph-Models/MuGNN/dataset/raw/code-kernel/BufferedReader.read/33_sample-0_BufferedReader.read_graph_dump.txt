Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void getText(String path) [ CD ]
Line_2 $$ public void getText(String path) -->Line_3 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(getStream(path), LSystem.encoding))[ CD ]
Line_2 $$ public void getText(String path) -->Line_3 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(getStream(path), LSystem.encoding))[ FD ]
Line_2 $$ public void getText(String path) -->Line_5 $$ while ((numRead = reader.read(buf)) != -1) [ CD ]
Line_2 $$ public void getText(String path) -->Line_2 $$ public void getText(String path) [ CD ]
Line_3 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(getStream(path), LSystem.encoding))-->Line_5 $$ while ((numRead = reader.read(buf)) != -1) [ FD ]
Line_5 $$ while ((numRead = reader.read(buf)) != -1) -->Line_6 $$ String readData = String.valueOf(buf, 0, numRead)[ CD ]
Line_6 $$ String readData = String.valueOf(buf, 0, numRead)-->Line_6 $$ String readData = String.valueOf(buf, 0, numRead)[ CD ]
Line_5 $$ while ((numRead = reader.read(buf)) != -1) -->Line_7 $$ sbr.append(readData.trim())[ CD ]
Line_6 $$ String readData = String.valueOf(buf, 0, numRead)-->Line_7 $$ sbr.append(readData.trim())[ FD ]
Line_2 $$ public void getText(String path) -->Line_9 $$ reader.close()[ CD ]
Line_3 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(getStream(path), LSystem.encoding))-->Line_9 $$ reader.close()[ FD ]
Line_6 $$ String readData = String.valueOf(buf, 0, numRead)-->Line_7 $$ sbr.append(readData.trim())[ FD ]
