Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testStartKeyStopKey() [ CD ]
Line_2 $$ public void testStartKeyStopKey() -->Line_3 $$ conn = DriverManager.getConnection(getUrl(), props)[ CD ]
Line_2 $$ public void testStartKeyStopKey() -->Line_4 $$ Statement statement = conn.createStatement()[ CD ]
Line_4 $$ Statement statement = conn.createStatement()-->Line_4 $$ Statement statement = conn.createStatement()[ CD ]
Line_2 $$ public void testStartKeyStopKey() -->Line_5 $$ statement.execute(query)[ CD ]
Line_4 $$ Statement statement = conn.createStatement()-->Line_5 $$ statement.execute(query)[ FD ]
Line_2 $$ public void testStartKeyStopKey() -->Line_6 $$ PhoenixStatement pstatement = statement.unwrap(PhoenixStatement.class)[ CD ]
Line_6 $$ PhoenixStatement pstatement = statement.unwrap(PhoenixStatement.class)-->Line_6 $$ PhoenixStatement pstatement = statement.unwrap(PhoenixStatement.class)[ CD ]
Line_4 $$ Statement statement = conn.createStatement()-->Line_6 $$ PhoenixStatement pstatement = statement.unwrap(PhoenixStatement.class)[ FD ]
Line_2 $$ public void testStartKeyStopKey() -->Line_7 $$ List<KeyRange> splits = pstatement.getQueryPlan().getSplits()[ CD ]
Line_7 $$ List<KeyRange> splits = pstatement.getQueryPlan().getSplits()-->Line_7 $$ List<KeyRange> splits = pstatement.getQueryPlan().getSplits()[ CD ]
Line_6 $$ PhoenixStatement pstatement = statement.unwrap(PhoenixStatement.class)-->Line_7 $$ List<KeyRange> splits = pstatement.getQueryPlan().getSplits()[ FD ]
Line_2 $$ public void testStartKeyStopKey() -->Line_8 $$ assertTrue(splits.size() > 0)[ CD ]
Line_7 $$ List<KeyRange> splits = pstatement.getQueryPlan().getSplits()-->Line_8 $$ assertTrue(splits.size() > 0)[ FD ]
