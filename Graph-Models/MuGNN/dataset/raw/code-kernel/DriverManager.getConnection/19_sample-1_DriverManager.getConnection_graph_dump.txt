Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testOrderByDropped() [ CD ]
Line_2 $$ public void testOrderByDropped() -->Line_3 $$ Connection conn = DriverManager.getConnection(getUrl())[ CD ]
Line_3 $$ Connection conn = DriverManager.getConnection(getUrl())-->Line_3 $$ Connection conn = DriverManager.getConnection(getUrl())[ CD ]
Line_2 $$ public void testOrderByDropped() -->Line_4 $$ conn.createStatement().execute("CREATE TABLE foo (k VARCHAR NOT NULL PRIMARY KEY, v VARCHAR) IMMUTABLE_ROWS=true")[ CD ]
Line_3 $$ Connection conn = DriverManager.getConnection(getUrl())-->Line_4 $$ conn.createStatement().execute("CREATE TABLE foo (k VARCHAR NOT NULL PRIMARY KEY, v VARCHAR) IMMUTABLE_ROWS=true")[ FD ]
Line_2 $$ public void testOrderByDropped() -->Line_5 $$ PhoenixStatement stmt = conn.createStatement().unwrap(PhoenixStatement.class)[ CD ]
Line_5 $$ PhoenixStatement stmt = conn.createStatement().unwrap(PhoenixStatement.class)-->Line_5 $$ PhoenixStatement stmt = conn.createStatement().unwrap(PhoenixStatement.class)[ CD ]
Line_3 $$ Connection conn = DriverManager.getConnection(getUrl())-->Line_5 $$ PhoenixStatement stmt = conn.createStatement().unwrap(PhoenixStatement.class)[ FD ]
Line_2 $$ public void testOrderByDropped() -->Line_6 $$ QueryPlan plan = stmt.optimizeQuery("SELECT * FROM foo ORDER BY 'a','b','c'")[ CD ]
Line_6 $$ QueryPlan plan = stmt.optimizeQuery("SELECT * FROM foo ORDER BY 'a','b','c'")-->Line_6 $$ QueryPlan plan = stmt.optimizeQuery("SELECT * FROM foo ORDER BY 'a','b','c'")[ CD ]
Line_5 $$ PhoenixStatement stmt = conn.createStatement().unwrap(PhoenixStatement.class)-->Line_6 $$ QueryPlan plan = stmt.optimizeQuery("SELECT * FROM foo ORDER BY 'a','b','c'")[ FD ]
Line_2 $$ public void testOrderByDropped() -->Line_7 $$ assertTrue(plan.getOrderBy().getOrderByExpressions().isEmpty())[ CD ]
Line_6 $$ QueryPlan plan = stmt.optimizeQuery("SELECT * FROM foo ORDER BY 'a','b','c'")-->Line_7 $$ assertTrue(plan.getOrderBy().getOrderByExpressions().isEmpty())[ FD ]
Line_2 $$ public void testOrderByDropped() -->Line_8 $$ conn.close()[ CD ]
Line_3 $$ Connection conn = DriverManager.getConnection(getUrl())-->Line_8 $$ conn.close()[ FD ]
