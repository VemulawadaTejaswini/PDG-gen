Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void compileStatement(String query) [ CD ]
Line_2 $$ public void compileStatement(String query) -->Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)[ CD ]
Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)-->Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)[ CD ]
Line_2 $$ public void compileStatement(String query) -->Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)[ CD ]
Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)-->Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)[ CD ]
Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)-->Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)[ FD ]
Line_2 $$ public void compileStatement(String query) -->Line_5 $$ statement = StatementNormalizer.normalize(statement, resolver)[ CD ]
Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)-->Line_5 $$ statement = StatementNormalizer.normalize(statement, resolver)[ FD ]
Line_2 $$ public void compileStatement(String query) -->Line_6 $$ StatementContext context = new StatementContext(new PhoenixStatement(pconn), resolver, binds, scan)[ CD ]
Line_2 $$ public void compileStatement(String query) -->Line_7 $$ Expression whereClause = WhereCompiler.compile(context, statement)[ CD ]
Line_7 $$ Expression whereClause = WhereCompiler.compile(context, statement)-->Line_7 $$ Expression whereClause = WhereCompiler.compile(context, statement)[ CD ]
Line_6 $$ StatementContext context = new StatementContext(new PhoenixStatement(pconn), resolver, binds, scan)-->Line_7 $$ Expression whereClause = WhereCompiler.compile(context, statement)[ FD ]
Line_2 $$ public void compileStatement(String query) -->Line_8 $$ return WhereOptimizer.pushKeyExpressionsToScan(context, statement, whereClause)[ CD ]
Line_8 $$ return WhereOptimizer.pushKeyExpressionsToScan(context, statement, whereClause)-->Line_8 $$ return WhereOptimizer.pushKeyExpressionsToScan(context, statement, whereClause)[ CD ]
Line_6 $$ StatementContext context = new StatementContext(new PhoenixStatement(pconn), resolver, binds, scan)-->Line_8 $$ return WhereOptimizer.pushKeyExpressionsToScan(context, statement, whereClause)[ FD ]
Line_7 $$ Expression whereClause = WhereCompiler.compile(context, statement)-->Line_8 $$ return WhereOptimizer.pushKeyExpressionsToScan(context, statement, whereClause)[ FD ]
