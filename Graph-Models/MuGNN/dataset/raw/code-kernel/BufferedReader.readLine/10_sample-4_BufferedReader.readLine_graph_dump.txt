Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testWithUnsupportedPayload() [ CD ]
Line_2 $$ public void testWithUnsupportedPayload() -->Line_3 $$ StringBuffer buffer = new StringBuffer(docString)[ CD ]
Line_2 $$ public void testWithUnsupportedPayload() -->Line_4 $$ StringSource source = (StringSource) sourceFactory.createSource(buffer)[ CD ]
Line_3 $$ StringBuffer buffer = new StringBuffer(docString)-->Line_4 $$ StringSource source = (StringSource) sourceFactory.createSource(buffer)[ FD ]
Line_2 $$ public void testWithUnsupportedPayload() -->Line_5 $$ BufferedReader reader = new BufferedReader(source.getReader())[ CD ]
Line_4 $$ StringSource source = (StringSource) sourceFactory.createSource(buffer)-->Line_5 $$ BufferedReader reader = new BufferedReader(source.getReader())[ FD ]
Line_2 $$ public void testWithUnsupportedPayload() -->Line_6 $$ String docAsString = reader.readLine()[ CD ]
Line_6 $$ String docAsString = reader.readLine()-->Line_6 $$ String docAsString = reader.readLine()[ CD ]
Line_5 $$ BufferedReader reader = new BufferedReader(source.getReader())-->Line_6 $$ String docAsString = reader.readLine()[ FD ]
Line_2 $$ public void testWithUnsupportedPayload() -->Line_7 $$ assertXMLEqual("Wrong content in StringSource", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><item>one</item>", docAsString)[ CD ]
Line_6 $$ String docAsString = reader.readLine()-->Line_7 $$ assertXMLEqual("Wrong content in StringSource", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><item>one</item>", docAsString)[ FD ]
