Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) [ CD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_3 $$ showResponse("requestAuthorizationWithoutScope", response)[ CD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_3 $$ showResponse("requestAuthorizationWithoutScope", response)[ FD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_4 $$ assertEquals(response.getStatus(), 302, "Unexpected response code.")[ CD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_4 $$ assertEquals(response.getStatus(), 302, "Unexpected response code.")[ FD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_5 $$ assertNotNull(response.getHeader("Location"), "Unexpected result: " + response.getHeader("Location"))[ CD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_5 $$ assertNotNull(response.getHeader("Location"), "Unexpected result: " + response.getHeader("Location"))[ FD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_5 $$ assertNotNull(response.getHeader("Location"), "Unexpected result: " + response.getHeader("Location"))[ FD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_6 $$ URI uri = new URI(response.getHeader("Location").toString())[ CD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_6 $$ URI uri = new URI(response.getHeader("Location").toString())[ FD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_7 $$ assertNotNull(uri.getFragment(), "Query string is null")[ CD ]
Line_6 $$ URI uri = new URI(response.getHeader("Location").toString())-->Line_7 $$ assertNotNull(uri.getFragment(), "Query string is null")[ FD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_8 $$ Map<String, String> params = QueryStringDecoder.decode(uri.getFragment())[ CD ]
Line_8 $$ Map<String, String> params = QueryStringDecoder.decode(uri.getFragment())-->Line_8 $$ Map<String, String> params = QueryStringDecoder.decode(uri.getFragment())[ CD ]
Line_6 $$ URI uri = new URI(response.getHeader("Location").toString())-->Line_8 $$ Map<String, String> params = QueryStringDecoder.decode(uri.getFragment())[ FD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_9 $$ assertNotNull(params.get(AuthorizeResponseParam.CODE), "The code is null")[ CD ]
Line_8 $$ Map<String, String> params = QueryStringDecoder.decode(uri.getFragment())-->Line_9 $$ assertNotNull(params.get(AuthorizeResponseParam.CODE), "The code is null")[ FD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_10 $$ assertNotNull(params.get(AuthorizeResponseParam.ID_TOKEN), "The id token is null")[ CD ]
Line_8 $$ Map<String, String> params = QueryStringDecoder.decode(uri.getFragment())-->Line_10 $$ assertNotNull(params.get(AuthorizeResponseParam.ID_TOKEN), "The id token is null")[ FD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_11 $$ assertNotNull(params.get(AuthorizeResponseParam.STATE), "The state is null")[ CD ]
Line_8 $$ Map<String, String> params = QueryStringDecoder.decode(uri.getFragment())-->Line_11 $$ assertNotNull(params.get(AuthorizeResponseParam.STATE), "The state is null")[ FD ]
Line_2 $$ public void onResponse(EnhancedMockHttpServletResponse response) -->Line_12 $$ assertEquals(params.get(AuthorizeResponseParam.STATE), state)[ CD ]
Line_8 $$ Map<String, String> params = QueryStringDecoder.decode(uri.getFragment())-->Line_12 $$ assertEquals(params.get(AuthorizeResponseParam.STATE), state)[ FD ]
