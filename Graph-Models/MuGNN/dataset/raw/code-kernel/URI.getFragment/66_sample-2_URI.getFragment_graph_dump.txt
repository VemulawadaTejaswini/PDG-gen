Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testUrl() [ CD ]
Line_2 $$ public void testUrl() -->Line_3 $$ URI uri = new URI("sword://StrongsRealGreek/01909")[ CD ]
Line_2 $$ public void testUrl() -->Line_4 $$ assertEquals("sword", uri.getScheme())[ CD ]
Line_3 $$ URI uri = new URI("sword://StrongsRealGreek/01909")-->Line_4 $$ assertEquals("sword", uri.getScheme())[ FD ]
Line_2 $$ public void testUrl() -->Line_5 $$ assertEquals("StrongsRealGreek", uri.getHost())[ CD ]
Line_3 $$ URI uri = new URI("sword://StrongsRealGreek/01909")-->Line_5 $$ assertEquals("StrongsRealGreek", uri.getHost())[ FD ]
Line_2 $$ public void testUrl() -->Line_6 $$ assertEquals("/01909", uri.getPath())[ CD ]
Line_3 $$ URI uri = new URI("sword://StrongsRealGreek/01909")-->Line_6 $$ assertEquals("/01909", uri.getPath())[ FD ]
Line_2 $$ public void testUrl() -->Line_7 $$ assertEquals("/01909", uri.getRawPath())[ CD ]
Line_3 $$ URI uri = new URI("sword://StrongsRealGreek/01909")-->Line_7 $$ assertEquals("/01909", uri.getRawPath())[ FD ]
Line_2 $$ public void testUrl() -->Line_8 $$ assertEquals(null, uri.getQuery())[ CD ]
Line_3 $$ URI uri = new URI("sword://StrongsRealGreek/01909")-->Line_8 $$ assertEquals(null, uri.getQuery())[ FD ]
Line_2 $$ public void testUrl() -->Line_9 $$ assertEquals(null, uri.getFragment())[ CD ]
Line_3 $$ URI uri = new URI("sword://StrongsRealGreek/01909")-->Line_9 $$ assertEquals(null, uri.getFragment())[ FD ]
