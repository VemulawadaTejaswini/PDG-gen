Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testGetUnknownRemote() [ CD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_3 $$ createWorkspace(SimpleMetaStore.DEFAULT_WORKSPACE_NAME)[ CD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_4 $$ String workspaceId = workspaceIdFromLocation(workspaceLocation)[ CD ]
Line_4 $$ String workspaceId = workspaceIdFromLocation(workspaceLocation)-->Line_4 $$ String workspaceId = workspaceIdFromLocation(workspaceLocation)[ CD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_5 $$ JSONObject project = createProjectOrLink(workspaceLocation, getMethodName().concat("Project"), null)[ CD ]
Line_5 $$ JSONObject project = createProjectOrLink(workspaceLocation, getMethodName().concat("Project"), null)-->Line_5 $$ JSONObject project = createProjectOrLink(workspaceLocation, getMethodName().concat("Project"), null)[ CD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_6 $$ IPath clonePath = getClonePath(workspaceId, project)[ CD ]
Line_6 $$ IPath clonePath = getClonePath(workspaceId, project)-->Line_6 $$ IPath clonePath = getClonePath(workspaceId, project)[ CD ]
Line_4 $$ String workspaceId = workspaceIdFromLocation(workspaceLocation)-->Line_6 $$ IPath clonePath = getClonePath(workspaceId, project)[ FD ]
Line_5 $$ JSONObject project = createProjectOrLink(workspaceLocation, getMethodName().concat("Project"), null)-->Line_6 $$ IPath clonePath = getClonePath(workspaceId, project)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_7 $$ clone(clonePath)[ CD ]
Line_6 $$ IPath clonePath = getClonePath(workspaceId, project)-->Line_7 $$ clone(clonePath)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_8 $$ WebRequest request = getGetRequest(project.getString(ProtocolConstants.KEY_CONTENT_LOCATION))[ CD ]
Line_8 $$ WebRequest request = getGetRequest(project.getString(ProtocolConstants.KEY_CONTENT_LOCATION))-->Line_8 $$ WebRequest request = getGetRequest(project.getString(ProtocolConstants.KEY_CONTENT_LOCATION))[ CD ]
Line_5 $$ JSONObject project = createProjectOrLink(workspaceLocation, getMethodName().concat("Project"), null)-->Line_8 $$ WebRequest request = getGetRequest(project.getString(ProtocolConstants.KEY_CONTENT_LOCATION))[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_9 $$ WebResponse response = webConversation.getResponse(request)[ CD ]
Line_9 $$ WebResponse response = webConversation.getResponse(request)-->Line_9 $$ WebResponse response = webConversation.getResponse(request)[ CD ]
Line_8 $$ WebRequest request = getGetRequest(project.getString(ProtocolConstants.KEY_CONTENT_LOCATION))-->Line_9 $$ WebResponse response = webConversation.getResponse(request)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_10 $$ assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode())[ CD ]
Line_9 $$ WebResponse response = webConversation.getResponse(request)-->Line_10 $$ assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode())[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_11 $$ project = new JSONObject(response.getText())[ CD ]
Line_5 $$ JSONObject project = createProjectOrLink(workspaceLocation, getMethodName().concat("Project"), null)-->Line_11 $$ project = new JSONObject(response.getText())[ FD ]
Line_11 $$ project = new JSONObject(response.getText())-->Line_11 $$ project = new JSONObject(response.getText())[ FD ]
Line_9 $$ WebResponse response = webConversation.getResponse(request)-->Line_11 $$ project = new JSONObject(response.getText())[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_12 $$ JSONObject gitSection = project.optJSONObject(GitConstants.KEY_GIT)[ CD ]
Line_12 $$ JSONObject gitSection = project.optJSONObject(GitConstants.KEY_GIT)-->Line_12 $$ JSONObject gitSection = project.optJSONObject(GitConstants.KEY_GIT)[ CD ]
Line_5 $$ JSONObject project = createProjectOrLink(workspaceLocation, getMethodName().concat("Project"), null)-->Line_12 $$ JSONObject gitSection = project.optJSONObject(GitConstants.KEY_GIT)[ FD ]
Line_11 $$ project = new JSONObject(response.getText())-->Line_12 $$ JSONObject gitSection = project.optJSONObject(GitConstants.KEY_GIT)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_13 $$ assertNotNull(gitSection)[ CD ]
Line_12 $$ JSONObject gitSection = project.optJSONObject(GitConstants.KEY_GIT)-->Line_13 $$ assertNotNull(gitSection)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_14 $$ String gitRemoteUri = gitSection.getString(GitConstants.KEY_REMOTE)[ CD ]
Line_14 $$ String gitRemoteUri = gitSection.getString(GitConstants.KEY_REMOTE)-->Line_14 $$ String gitRemoteUri = gitSection.getString(GitConstants.KEY_REMOTE)[ CD ]
Line_12 $$ JSONObject gitSection = project.optJSONObject(GitConstants.KEY_GIT)-->Line_14 $$ String gitRemoteUri = gitSection.getString(GitConstants.KEY_REMOTE)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_15 $$ request = getGetGitRemoteRequest(gitRemoteUri)[ CD ]
Line_8 $$ WebRequest request = getGetRequest(project.getString(ProtocolConstants.KEY_CONTENT_LOCATION))-->Line_15 $$ request = getGetGitRemoteRequest(gitRemoteUri)[ FD ]
Line_15 $$ request = getGetGitRemoteRequest(gitRemoteUri)-->Line_15 $$ request = getGetGitRemoteRequest(gitRemoteUri)[ FD ]
Line_15 $$ request = getGetGitRemoteRequest(gitRemoteUri)-->Line_15 $$ request = getGetGitRemoteRequest(gitRemoteUri)[ CD ]
Line_14 $$ String gitRemoteUri = gitSection.getString(GitConstants.KEY_REMOTE)-->Line_15 $$ request = getGetGitRemoteRequest(gitRemoteUri)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_16 $$ response = webConversation.getResponse(request)[ CD ]
Line_9 $$ WebResponse response = webConversation.getResponse(request)-->Line_16 $$ response = webConversation.getResponse(request)[ FD ]
Line_16 $$ response = webConversation.getResponse(request)-->Line_16 $$ response = webConversation.getResponse(request)[ FD ]
Line_16 $$ response = webConversation.getResponse(request)-->Line_16 $$ response = webConversation.getResponse(request)[ CD ]
Line_8 $$ WebRequest request = getGetRequest(project.getString(ProtocolConstants.KEY_CONTENT_LOCATION))-->Line_16 $$ response = webConversation.getResponse(request)[ FD ]
Line_15 $$ request = getGetGitRemoteRequest(gitRemoteUri)-->Line_16 $$ response = webConversation.getResponse(request)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_17 $$ assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode())[ CD ]
Line_9 $$ WebResponse response = webConversation.getResponse(request)-->Line_17 $$ assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode())[ FD ]
Line_16 $$ response = webConversation.getResponse(request)-->Line_17 $$ assertEquals(HttpURLConnection.HTTP_OK, response.getResponseCode())[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_18 $$ JSONObject remotes = new JSONObject(response.getText())[ CD ]
Line_9 $$ WebResponse response = webConversation.getResponse(request)-->Line_18 $$ JSONObject remotes = new JSONObject(response.getText())[ FD ]
Line_16 $$ response = webConversation.getResponse(request)-->Line_18 $$ JSONObject remotes = new JSONObject(response.getText())[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_19 $$ JSONArray remotesArray = remotes.getJSONArray(ProtocolConstants.KEY_CHILDREN)[ CD ]
Line_19 $$ JSONArray remotesArray = remotes.getJSONArray(ProtocolConstants.KEY_CHILDREN)-->Line_19 $$ JSONArray remotesArray = remotes.getJSONArray(ProtocolConstants.KEY_CHILDREN)[ CD ]
Line_18 $$ JSONObject remotes = new JSONObject(response.getText())-->Line_19 $$ JSONArray remotesArray = remotes.getJSONArray(ProtocolConstants.KEY_CHILDREN)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_20 $$ assertEquals(1, remotesArray.length())[ CD ]
Line_19 $$ JSONArray remotesArray = remotes.getJSONArray(ProtocolConstants.KEY_CHILDREN)-->Line_20 $$ assertEquals(1, remotesArray.length())[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_21 $$ JSONObject remote = remotesArray.getJSONObject(0)[ CD ]
Line_21 $$ JSONObject remote = remotesArray.getJSONObject(0)-->Line_21 $$ JSONObject remote = remotesArray.getJSONObject(0)[ CD ]
Line_19 $$ JSONArray remotesArray = remotes.getJSONArray(ProtocolConstants.KEY_CHILDREN)-->Line_21 $$ JSONObject remote = remotesArray.getJSONObject(0)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_22 $$ assertNotNull(remote)[ CD ]
Line_21 $$ JSONObject remote = remotesArray.getJSONObject(0)-->Line_22 $$ assertNotNull(remote)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_23 $$ String remoteLocation = remote.getString(ProtocolConstants.KEY_LOCATION)[ CD ]
Line_23 $$ String remoteLocation = remote.getString(ProtocolConstants.KEY_LOCATION)-->Line_23 $$ String remoteLocation = remote.getString(ProtocolConstants.KEY_LOCATION)[ CD ]
Line_21 $$ JSONObject remote = remotesArray.getJSONObject(0)-->Line_23 $$ String remoteLocation = remote.getString(ProtocolConstants.KEY_LOCATION)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_24 $$ assertNotNull(remoteLocation)[ CD ]
Line_23 $$ String remoteLocation = remote.getString(ProtocolConstants.KEY_LOCATION)-->Line_24 $$ assertNotNull(remoteLocation)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))[ CD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))[ CD ]
Line_23 $$ String remoteLocation = remote.getString(ProtocolConstants.KEY_LOCATION)-->Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_26 $$ IPath p = new Path(u.getPath())[ CD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_26 $$ IPath p = new Path(u.getPath())[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))[ CD ]
Line_26 $$ IPath p = new Path(u.getPath())-->Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))-->Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))-->Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))[ CD ]
Line_26 $$ IPath p = new Path(u.getPath())-->Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))-->Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_26 $$ IPath p = new Path(u.getPath())-->Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))-->Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_28 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ CD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_28 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_28 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_28 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_28 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_26 $$ IPath p = new Path(u.getPath())-->Line_28 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))-->Line_28 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_28 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_28 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_29 $$ request = getGetGitRemoteRequest(nu.toString())[ CD ]
Line_8 $$ WebRequest request = getGetRequest(project.getString(ProtocolConstants.KEY_CONTENT_LOCATION))-->Line_29 $$ request = getGetGitRemoteRequest(nu.toString())[ FD ]
Line_15 $$ request = getGetGitRemoteRequest(gitRemoteUri)-->Line_29 $$ request = getGetGitRemoteRequest(nu.toString())[ FD ]
Line_29 $$ request = getGetGitRemoteRequest(nu.toString())-->Line_29 $$ request = getGetGitRemoteRequest(nu.toString())[ FD ]
Line_29 $$ request = getGetGitRemoteRequest(nu.toString())-->Line_29 $$ request = getGetGitRemoteRequest(nu.toString())[ CD ]
Line_28 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())-->Line_29 $$ request = getGetGitRemoteRequest(nu.toString())[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_30 $$ response = webConversation.getResponse(request)[ CD ]
Line_9 $$ WebResponse response = webConversation.getResponse(request)-->Line_30 $$ response = webConversation.getResponse(request)[ FD ]
Line_16 $$ response = webConversation.getResponse(request)-->Line_30 $$ response = webConversation.getResponse(request)[ FD ]
Line_30 $$ response = webConversation.getResponse(request)-->Line_30 $$ response = webConversation.getResponse(request)[ FD ]
Line_30 $$ response = webConversation.getResponse(request)-->Line_30 $$ response = webConversation.getResponse(request)[ CD ]
Line_8 $$ WebRequest request = getGetRequest(project.getString(ProtocolConstants.KEY_CONTENT_LOCATION))-->Line_30 $$ response = webConversation.getResponse(request)[ FD ]
Line_15 $$ request = getGetGitRemoteRequest(gitRemoteUri)-->Line_30 $$ response = webConversation.getResponse(request)[ FD ]
Line_29 $$ request = getGetGitRemoteRequest(nu.toString())-->Line_30 $$ response = webConversation.getResponse(request)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_31 $$ ServerStatus status = waitForTask(response)[ CD ]
Line_31 $$ ServerStatus status = waitForTask(response)-->Line_31 $$ ServerStatus status = waitForTask(response)[ CD ]
Line_9 $$ WebResponse response = webConversation.getResponse(request)-->Line_31 $$ ServerStatus status = waitForTask(response)[ FD ]
Line_16 $$ response = webConversation.getResponse(request)-->Line_31 $$ ServerStatus status = waitForTask(response)[ FD ]
Line_30 $$ response = webConversation.getResponse(request)-->Line_31 $$ ServerStatus status = waitForTask(response)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_32 $$ assertEquals(status.toString(), status.getHttpCode(), HttpURLConnection.HTTP_NOT_FOUND)[ CD ]
Line_31 $$ ServerStatus status = waitForTask(response)-->Line_32 $$ assertEquals(status.toString(), status.getHttpCode(), HttpURLConnection.HTTP_NOT_FOUND)[ FD ]
Line_31 $$ ServerStatus status = waitForTask(response)-->Line_32 $$ assertEquals(status.toString(), status.getHttpCode(), HttpURLConnection.HTTP_NOT_FOUND)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_33 $$ p = new Path(u.getPath())[ CD ]
Line_26 $$ IPath p = new Path(u.getPath())-->Line_33 $$ p = new Path(u.getPath())[ FD ]
Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))-->Line_33 $$ p = new Path(u.getPath())[ FD ]
Line_33 $$ p = new Path(u.getPath())-->Line_33 $$ p = new Path(u.getPath())[ FD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_33 $$ p = new Path(u.getPath())[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ CD ]
Line_26 $$ IPath p = new Path(u.getPath())-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_33 $$ p = new Path(u.getPath())-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ CD ]
Line_26 $$ IPath p = new Path(u.getPath())-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_33 $$ p = new Path(u.getPath())-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_26 $$ IPath p = new Path(u.getPath())-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_33 $$ p = new Path(u.getPath())-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))-->Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ CD ]
Line_28 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())-->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())-->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_26 $$ IPath p = new Path(u.getPath())-->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_27 $$ p = p.uptoSegment(2).append("xxx").append(p.removeFirstSegments(3))-->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_33 $$ p = new Path(u.getPath())-->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_34 $$ p = p.uptoSegment(3).append("xxx").append(p.removeFirstSegments(3))-->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_25 $$ URI u = URI.create(toRelativeURI(remoteLocation))-->Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_36 $$ request = getGetGitRemoteRequest(nu.toString())[ CD ]
Line_8 $$ WebRequest request = getGetRequest(project.getString(ProtocolConstants.KEY_CONTENT_LOCATION))-->Line_36 $$ request = getGetGitRemoteRequest(nu.toString())[ FD ]
Line_15 $$ request = getGetGitRemoteRequest(gitRemoteUri)-->Line_36 $$ request = getGetGitRemoteRequest(nu.toString())[ FD ]
Line_29 $$ request = getGetGitRemoteRequest(nu.toString())-->Line_36 $$ request = getGetGitRemoteRequest(nu.toString())[ FD ]
Line_36 $$ request = getGetGitRemoteRequest(nu.toString())-->Line_36 $$ request = getGetGitRemoteRequest(nu.toString())[ FD ]
Line_36 $$ request = getGetGitRemoteRequest(nu.toString())-->Line_36 $$ request = getGetGitRemoteRequest(nu.toString())[ CD ]
Line_28 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())-->Line_36 $$ request = getGetGitRemoteRequest(nu.toString())[ FD ]
Line_35 $$ nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), p.toString(), u.getQuery(), u.getFragment())-->Line_36 $$ request = getGetGitRemoteRequest(nu.toString())[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_37 $$ response = webConversation.getResponse(request)[ CD ]
Line_9 $$ WebResponse response = webConversation.getResponse(request)-->Line_37 $$ response = webConversation.getResponse(request)[ FD ]
Line_16 $$ response = webConversation.getResponse(request)-->Line_37 $$ response = webConversation.getResponse(request)[ FD ]
Line_30 $$ response = webConversation.getResponse(request)-->Line_37 $$ response = webConversation.getResponse(request)[ FD ]
Line_37 $$ response = webConversation.getResponse(request)-->Line_37 $$ response = webConversation.getResponse(request)[ FD ]
Line_37 $$ response = webConversation.getResponse(request)-->Line_37 $$ response = webConversation.getResponse(request)[ CD ]
Line_8 $$ WebRequest request = getGetRequest(project.getString(ProtocolConstants.KEY_CONTENT_LOCATION))-->Line_37 $$ response = webConversation.getResponse(request)[ FD ]
Line_15 $$ request = getGetGitRemoteRequest(gitRemoteUri)-->Line_37 $$ response = webConversation.getResponse(request)[ FD ]
Line_29 $$ request = getGetGitRemoteRequest(nu.toString())-->Line_37 $$ response = webConversation.getResponse(request)[ FD ]
Line_36 $$ request = getGetGitRemoteRequest(nu.toString())-->Line_37 $$ response = webConversation.getResponse(request)[ FD ]
Line_2 $$ public void testGetUnknownRemote() -->Line_38 $$ assertEquals(HttpURLConnection.HTTP_NOT_FOUND, response.getResponseCode())[ CD ]
Line_9 $$ WebResponse response = webConversation.getResponse(request)-->Line_38 $$ assertEquals(HttpURLConnection.HTTP_NOT_FOUND, response.getResponseCode())[ FD ]
Line_16 $$ response = webConversation.getResponse(request)-->Line_38 $$ assertEquals(HttpURLConnection.HTTP_NOT_FOUND, response.getResponseCode())[ FD ]
Line_30 $$ response = webConversation.getResponse(request)-->Line_38 $$ assertEquals(HttpURLConnection.HTTP_NOT_FOUND, response.getResponseCode())[ FD ]
Line_37 $$ response = webConversation.getResponse(request)-->Line_38 $$ assertEquals(HttpURLConnection.HTTP_NOT_FOUND, response.getResponseCode())[ FD ]
