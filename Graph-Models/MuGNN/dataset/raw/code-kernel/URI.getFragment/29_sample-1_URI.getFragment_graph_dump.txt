Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void getIFile(URL url, boolean bCreateIfNotExists) [ CD ]
Line_2 $$ public void getIFile(URL url, boolean bCreateIfNotExists) -->Line_3 $$ if (url.getProtocol().equals("file")) [ CD ]
Line_3 $$ if (url.getProtocol().equals("file")) -->Line_3 $$ if (url.getProtocol().equals("file")) [ CD ]
Line_2 $$ public void getIFile(URL url, boolean bCreateIfNotExists) -->Line_3 $$ if (url.getProtocol().equals("file")) [ FD ]
Line_5 $$ URI uri = url.toURI()-->Line_5 $$ URI uri = url.toURI()[ CD ]
Line_2 $$ public void getIFile(URL url, boolean bCreateIfNotExists) -->Line_5 $$ URI uri = url.toURI()[ FD ]
Line_5 $$ URI uri = url.toURI()-->Line_6 $$ if (uri.getFragment() != null) [ FD ]
Line_6 $$ if (uri.getFragment() != null) -->Line_7 $$ uri = new URI(uri.getScheme(), uri.getSchemeSpecificPart(), null)[ CD ]
Line_5 $$ URI uri = url.toURI()-->Line_7 $$ uri = new URI(uri.getScheme(), uri.getSchemeSpecificPart(), null)[ FD ]
Line_7 $$ uri = new URI(uri.getScheme(), uri.getSchemeSpecificPart(), null)-->Line_7 $$ uri = new URI(uri.getScheme(), uri.getSchemeSpecificPart(), null)[ FD ]
Line_5 $$ URI uri = url.toURI()-->Line_7 $$ uri = new URI(uri.getScheme(), uri.getSchemeSpecificPart(), null)[ FD ]
Line_7 $$ uri = new URI(uri.getScheme(), uri.getSchemeSpecificPart(), null)-->Line_7 $$ uri = new URI(uri.getScheme(), uri.getSchemeSpecificPart(), null)[ FD ]
Line_5 $$ URI uri = url.toURI()-->Line_7 $$ uri = new URI(uri.getScheme(), uri.getSchemeSpecificPart(), null)[ FD ]
Line_7 $$ uri = new URI(uri.getScheme(), uri.getSchemeSpecificPart(), null)-->Line_7 $$ uri = new URI(uri.getScheme(), uri.getSchemeSpecificPart(), null)[ FD ]
Line_9 $$ return getIFile(new File(uri))-->Line_9 $$ return getIFile(new File(uri))[ CD ]
Line_2 $$ public void getIFile(URL url, boolean bCreateIfNotExists) -->Line_15 $$ throw new IllegalArgumentException("Unable to parse URL " + url.toExternalForm(), ex)[ FD ]
Line_3 $$ if (url.getProtocol().equals("file")) -->Line_17 $$ if (url.getProtocol().equals("jar")) [ CD ]
Line_17 $$ if (url.getProtocol().equals("jar")) -->Line_17 $$ if (url.getProtocol().equals("jar")) [ CD ]
Line_2 $$ public void getIFile(URL url, boolean bCreateIfNotExists) -->Line_17 $$ if (url.getProtocol().equals("jar")) [ FD ]
Line_17 $$ if (url.getProtocol().equals("jar")) -->Line_18 $$ String path = url.getPath()[ CD ]
Line_18 $$ String path = url.getPath()-->Line_18 $$ String path = url.getPath()[ CD ]
Line_2 $$ public void getIFile(URL url, boolean bCreateIfNotExists) -->Line_18 $$ String path = url.getPath()[ FD ]
Line_17 $$ if (url.getProtocol().equals("jar")) -->Line_19 $$ int idx = path.lastIndexOf('!')[ CD ]
Line_19 $$ int idx = path.lastIndexOf('!')-->Line_19 $$ int idx = path.lastIndexOf('!')[ CD ]
Line_18 $$ String path = url.getPath()-->Line_19 $$ int idx = path.lastIndexOf('!')[ FD ]
Line_17 $$ if (url.getProtocol().equals("jar")) -->Line_20 $$ String filePath = path.substring(idx + 1)[ CD ]
Line_20 $$ String filePath = path.substring(idx + 1)-->Line_20 $$ String filePath = path.substring(idx + 1)[ CD ]
Line_18 $$ String path = url.getPath()-->Line_20 $$ String filePath = path.substring(idx + 1)[ FD ]
Line_17 $$ if (url.getProtocol().equals("jar")) -->Line_21 $$ String jarPath = path.substring(0, idx)[ CD ]
Line_21 $$ String jarPath = path.substring(0, idx)-->Line_21 $$ String jarPath = path.substring(0, idx)[ CD ]
Line_18 $$ String path = url.getPath()-->Line_21 $$ String jarPath = path.substring(0, idx)[ FD ]
Line_19 $$ int idx = path.lastIndexOf('!')-->Line_21 $$ String jarPath = path.substring(0, idx)[ FD ]
Line_17 $$ if (url.getProtocol().equals("jar")) -->Line_22 $$ File jarFile[ CD ]
Line_22 $$ File jarFile-->Line_24 $$ jarFile = getIFile(new URL(jarPath)).toJavaFile()[ FD ]
Line_24 $$ jarFile = getIFile(new URL(jarPath)).toJavaFile()-->Line_24 $$ jarFile = getIFile(new URL(jarPath)).toJavaFile()[ FD ]
Line_24 $$ jarFile = getIFile(new URL(jarPath)).toJavaFile()-->Line_24 $$ jarFile = getIFile(new URL(jarPath)).toJavaFile()[ CD ]
Line_17 $$ if (url.getProtocol().equals("jar")) -->Line_29 $$ JarFileDirectoryImpl jarFileDirectory = new JarFileDirectoryImpl(jarFile)[ CD ]
Line_17 $$ if (url.getProtocol().equals("jar")) -->Line_30 $$ if (bCreateIfNotExists) [ CD ]
Line_30 $$ if (bCreateIfNotExists) -->Line_31 $$ return jarFileDirectory.getOrCreateFile(filePath)[ CD ]
Line_31 $$ return jarFileDirectory.getOrCreateFile(filePath)-->Line_31 $$ return jarFileDirectory.getOrCreateFile(filePath)[ CD ]
Line_29 $$ JarFileDirectoryImpl jarFileDirectory = new JarFileDirectoryImpl(jarFile)-->Line_31 $$ return jarFileDirectory.getOrCreateFile(filePath)[ FD ]
Line_20 $$ String filePath = path.substring(idx + 1)-->Line_31 $$ return jarFileDirectory.getOrCreateFile(filePath)[ FD ]
Line_17 $$ if (url.getProtocol().equals("jar")) -->Line_33 $$ return jarFileDirectory.file(filePath)[ CD ]
Line_33 $$ return jarFileDirectory.file(filePath)-->Line_33 $$ return jarFileDirectory.file(filePath)[ CD ]
Line_29 $$ JarFileDirectoryImpl jarFileDirectory = new JarFileDirectoryImpl(jarFile)-->Line_33 $$ return jarFileDirectory.file(filePath)[ FD ]
Line_20 $$ String filePath = path.substring(idx + 1)-->Line_33 $$ return jarFileDirectory.file(filePath)[ FD ]
Line_2 $$ public void getIFile(URL url, boolean bCreateIfNotExists) -->Line_35 $$ throw new RuntimeException("Unrecognized protocol: " + url.getProtocol())[ FD ]
