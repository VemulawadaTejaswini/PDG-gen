Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void dump(String description, URI dburi) [ CD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())[ CD ]
Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())-->Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())[ CD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())[ FD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())[ FD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())[ FD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())[ FD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())[ FD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())[ FD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())[ FD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())[ FD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())[ FD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())[ FD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_16 $$ LOGGER.fine(dumpString)[ CD ]
Line_3 $$ String dumpString = String.format("dump (%s)\n: isOpaque=%s, isAbsolute=%s Scheme=%s,\n SchemeSpecificPart=%s,\n Host=%s,\n Port=%s,\n Path=%s,\n Fragment=%s,\n Query=%s\n", description, dburi.isOpaque(), dburi.isAbsolute(), dburi.getScheme(), dburi.getSchemeSpecificPart(), dburi.getHost(), dburi.getPort(), dburi.getPath(), dburi.getFragment(), dburi.getQuery())-->Line_16 $$ LOGGER.fine(dumpString)[ FD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_17 $$ String query = dburi.getQuery()[ CD ]
Line_17 $$ String query = dburi.getQuery()-->Line_17 $$ String query = dburi.getQuery()[ CD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_17 $$ String query = dburi.getQuery()[ FD ]
Line_2 $$ public void dump(String description, URI dburi) -->Line_18 $$ if (null != query && !query.equals("")) [ CD ]
Line_18 $$ if (null != query && !query.equals("")) -->Line_18 $$ if (null != query && !query.equals("")) [ CD ]
Line_17 $$ String query = dburi.getQuery()-->Line_18 $$ if (null != query && !query.equals("")) [ FD ]
Line_18 $$ if (null != query && !query.equals("")) -->Line_20 $$ String[] params = query.split("&")[ CD ]
Line_20 $$ String[] params = query.split("&")-->Line_20 $$ String[] params = query.split("&")[ CD ]
Line_17 $$ String query = dburi.getQuery()-->Line_20 $$ String[] params = query.split("&")[ FD ]
Line_18 $$ if (null != query && !query.equals("")) -->Line_21 $$ Map<String, String> map = new HashMap<String, String>()[ CD ]
Line_24 $$ String[] splits = param.split("=")-->Line_24 $$ String[] splits = param.split("=")[ CD ]
Line_22 $$ for (String param : params) -->Line_24 $$ String[] splits = param.split("=")[ FD ]
Line_27 $$ if (splits.length > 1) -->Line_29 $$ value = splits[1][ CD ]
Line_26 $$ String value = null-->Line_29 $$ value = splits[1][ FD ]
Line_29 $$ value = splits[1]-->Line_29 $$ value = splits[1][ FD ]
Line_21 $$ Map<String, String> map = new HashMap<String, String>()-->Line_31 $$ map.put(name, value)[ FD ]
Line_25 $$ String name = splits[0]-->Line_31 $$ map.put(name, value)[ FD ]
Line_26 $$ String value = null-->Line_31 $$ map.put(name, value)[ FD ]
Line_29 $$ value = splits[1]-->Line_31 $$ map.put(name, value)[ FD ]
Line_25 $$ String name = splits[0]-->Line_32 $$ LOGGER.fine(String.format("name=%s,value=%s\n", name, value))[ FD ]
Line_26 $$ String value = null-->Line_32 $$ LOGGER.fine(String.format("name=%s,value=%s\n", name, value))[ FD ]
Line_29 $$ value = splits[1]-->Line_32 $$ LOGGER.fine(String.format("name=%s,value=%s\n", name, value))[ FD ]
