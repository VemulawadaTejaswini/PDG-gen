Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) [ CD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_3 $$ if (keys != null && keys.containsKey(key)) [ CD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_3 $$ if (keys != null && keys.containsKey(key)) [ FD ]
Line_3 $$ if (keys != null && keys.containsKey(key)) -->Line_4 $$ name = keys.get(key)[ CD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_4 $$ name = keys.get(key)[ FD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_6 $$ values.append(name + "=[ CD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_7 $$ if (values.length() > 0) [ CD ]
Line_7 $$ if (values.length() > 0) -->Line_8 $$ template.fragment(values.toString())[ CD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_10 $$ UriComponents encoded = template.build().expand(query).encode()[ CD ]
Line_10 $$ UriComponents encoded = template.build().expand(query).encode()-->Line_10 $$ UriComponents encoded = template.build().expand(query).encode()[ CD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_10 $$ UriComponents encoded = template.build().expand(query).encode()[ FD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_11 $$ builder.fragment(encoded.getFragment())[ CD ]
Line_10 $$ UriComponents encoded = template.build().expand(query).encode()-->Line_11 $$ builder.fragment(encoded.getFragment())[ FD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_12 $$ template.fragment(redirectUri.getFragment())[ CD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_13 $$ UriComponents encoded = template.build().expand(query).encode()[ CD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_13 $$ UriComponents encoded = template.build().expand(query).encode()[ FD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_14 $$ builder.query(encoded.getQuery())[ CD ]
Line_10 $$ UriComponents encoded = template.build().expand(query).encode()-->Line_14 $$ builder.query(encoded.getQuery())[ FD ]
Line_2 $$ public void append(String base, Map<String, ?> query, Map<String, String> keys, boolean fragment) -->Line_15 $$ return builder.build().toUriString()[ CD ]
Line_15 $$ return builder.build().toUriString()-->Line_15 $$ return builder.build().toUriString()[ CD ]
