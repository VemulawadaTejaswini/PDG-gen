Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void sendRedirect(String location) [ CD ]
Line_2 $$ public void sendRedirect(String location) -->Line_3 $$ String redirect = getHeader("location")[ CD ]
Line_3 $$ String redirect = getHeader("location")-->Line_3 $$ String redirect = getHeader("location")[ CD ]
Line_2 $$ public void sendRedirect(String location) -->Line_4 $$ URI redirectURI = new URI(redirect)[ CD ]
Line_4 $$ URI redirectURI = new URI(redirect)-->Line_5 $$ newRedirectURI = new URI(scheme, redirectURI.getUserInfo(), redirectURI.getHost(), port, redirectURI.getPath(), redirectURI.getQuery(), redirectURI.getFragment())[ FD ]
Line_4 $$ URI redirectURI = new URI(redirect)-->Line_5 $$ newRedirectURI = new URI(scheme, redirectURI.getUserInfo(), redirectURI.getHost(), port, redirectURI.getPath(), redirectURI.getQuery(), redirectURI.getFragment())[ FD ]
Line_4 $$ URI redirectURI = new URI(redirect)-->Line_5 $$ newRedirectURI = new URI(scheme, redirectURI.getUserInfo(), redirectURI.getHost(), port, redirectURI.getPath(), redirectURI.getQuery(), redirectURI.getFragment())[ FD ]
Line_4 $$ URI redirectURI = new URI(redirect)-->Line_5 $$ newRedirectURI = new URI(scheme, redirectURI.getUserInfo(), redirectURI.getHost(), port, redirectURI.getPath(), redirectURI.getQuery(), redirectURI.getFragment())[ FD ]
Line_4 $$ URI redirectURI = new URI(redirect)-->Line_5 $$ newRedirectURI = new URI(scheme, redirectURI.getUserInfo(), redirectURI.getHost(), port, redirectURI.getPath(), redirectURI.getQuery(), redirectURI.getFragment())[ FD ]
Line_2 $$ public void sendRedirect(String location) -->Line_8 $$ log.warn(sm.getString("remoteIpFilter.invalidLocation", location, scheme, Integer.toString(port)))[ CD ]
Line_2 $$ public void sendRedirect(String location) -->Line_8 $$ log.warn(sm.getString("remoteIpFilter.invalidLocation", location, scheme, Integer.toString(port)))[ FD ]
