Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testInitial() [ CD ]
Line_2 $$ public void testInitial() -->Line_3 $$ TimeZone utcZone = TimeZone.getTimeZone("UTC")[ CD ]
Line_3 $$ TimeZone utcZone = TimeZone.getTimeZone("UTC")-->Line_3 $$ TimeZone utcZone = TimeZone.getTimeZone("UTC")[ CD ]
Line_2 $$ public void testInitial() -->Line_4 $$ Calendar calendar = Calendar.getInstance(utcZone)[ CD ]
Line_4 $$ Calendar calendar = Calendar.getInstance(utcZone)-->Line_4 $$ Calendar calendar = Calendar.getInstance(utcZone)[ CD ]
Line_3 $$ TimeZone utcZone = TimeZone.getTimeZone("UTC")-->Line_4 $$ Calendar calendar = Calendar.getInstance(utcZone)[ FD ]
Line_2 $$ public void testInitial() -->Line_5 $$ calendar.set(Calendar.MILLISECOND, 0)[ CD ]
Line_4 $$ Calendar calendar = Calendar.getInstance(utcZone)-->Line_5 $$ calendar.set(Calendar.MILLISECOND, 0)[ FD ]
Line_2 $$ public void testInitial() -->Line_6 $$ long baseTime = calendar.getTime().getTime() / 1000L[ CD ]
Line_4 $$ Calendar calendar = Calendar.getInstance(utcZone)-->Line_6 $$ long baseTime = calendar.getTime().getTime() / 1000L[ FD ]
Line_2 $$ public void testInitial() -->Line_7 $$ assertEquals(baseTime, -TimeTCPClient.SECONDS_1900_TO_1970)[ CD ]
Line_6 $$ long baseTime = calendar.getTime().getTime() / 1000L-->Line_7 $$ assertEquals(baseTime, -TimeTCPClient.SECONDS_1900_TO_1970)[ FD ]
