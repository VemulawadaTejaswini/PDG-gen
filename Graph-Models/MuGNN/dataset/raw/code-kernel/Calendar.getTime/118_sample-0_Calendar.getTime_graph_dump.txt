Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testDeserInstantFromNumber() [ CD ]
Line_2 $$ public void testDeserInstantFromNumber() -->Line_3 $$ Calendar cal = new GregorianCalendar(TimeZone.getTimeZone("UTC"))[ CD ]
Line_2 $$ public void testDeserInstantFromNumber() -->Line_4 $$ cal.set(Calendar.YEAR, 1972)[ CD ]
Line_3 $$ Calendar cal = new GregorianCalendar(TimeZone.getTimeZone("UTC"))-->Line_4 $$ cal.set(Calendar.YEAR, 1972)[ FD ]
Line_2 $$ public void testDeserInstantFromNumber() -->Line_5 $$ long timepoint = cal.getTime().getTime()[ CD ]
Line_5 $$ long timepoint = cal.getTime().getTime()-->Line_5 $$ long timepoint = cal.getTime().getTime()[ CD ]
Line_3 $$ Calendar cal = new GregorianCalendar(TimeZone.getTimeZone("UTC"))-->Line_5 $$ long timepoint = cal.getTime().getTime()[ FD ]
Line_2 $$ public void testDeserInstantFromNumber() -->Line_6 $$ Instant instant = MAPPER.readValue(String.valueOf(timepoint), Instant.class)[ CD ]
Line_6 $$ Instant instant = MAPPER.readValue(String.valueOf(timepoint), Instant.class)-->Line_6 $$ Instant instant = MAPPER.readValue(String.valueOf(timepoint), Instant.class)[ CD ]
Line_5 $$ long timepoint = cal.getTime().getTime()-->Line_6 $$ Instant instant = MAPPER.readValue(String.valueOf(timepoint), Instant.class)[ FD ]
Line_2 $$ public void testDeserInstantFromNumber() -->Line_7 $$ assertEquals(timepoint, instant.getMillis())[ CD ]
Line_5 $$ long timepoint = cal.getTime().getTime()-->Line_7 $$ assertEquals(timepoint, instant.getMillis())[ FD ]
Line_6 $$ Instant instant = MAPPER.readValue(String.valueOf(timepoint), Instant.class)-->Line_7 $$ assertEquals(timepoint, instant.getMillis())[ FD ]
