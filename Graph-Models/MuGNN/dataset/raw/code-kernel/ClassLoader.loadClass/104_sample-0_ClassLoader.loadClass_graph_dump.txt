Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void process(@Nonnull ClassLoader classLoader, @Nonnull Class<?> type, @Nonnull String line) [ CD ]
Line_2 $$ public void process(@Nonnull ClassLoader classLoader, @Nonnull Class<?> type, @Nonnull String line) -->Line_3 $$ String transformationClassName = parts[1].trim()[ CD ]
Line_3 $$ String transformationClassName = parts[1].trim()-->Line_3 $$ String transformationClassName = parts[1].trim()[ CD ]
Line_2 $$ public void process(@Nonnull ClassLoader classLoader, @Nonnull Class<?> type, @Nonnull String line) -->Line_4 $$ Class<?> transformationClass = classLoader.loadClass(transformationClassName)[ CD ]
Line_4 $$ Class<?> transformationClass = classLoader.loadClass(transformationClassName)-->Line_4 $$ Class<?> transformationClass = classLoader.loadClass(transformationClassName)[ CD ]
Line_2 $$ public void process(@Nonnull ClassLoader classLoader, @Nonnull Class<?> type, @Nonnull String line) -->Line_4 $$ Class<?> transformationClass = classLoader.loadClass(transformationClassName)[ FD ]
Line_3 $$ String transformationClassName = parts[1].trim()-->Line_4 $$ Class<?> transformationClass = classLoader.loadClass(transformationClassName)[ FD ]
Line_2 $$ public void process(@Nonnull ClassLoader classLoader, @Nonnull Class<?> type, @Nonnull String line) -->Line_5 $$ transformations.put(annotationClassName, (Class<? extends ASTTransformation>) transformationClass)[ CD ]
