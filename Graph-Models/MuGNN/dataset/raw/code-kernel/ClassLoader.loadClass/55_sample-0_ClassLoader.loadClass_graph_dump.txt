Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void isType(JvmTypeReference type, Object object, ClassLoader classLoader) [ CD ]
Line_2 $$ public void isType(JvmTypeReference type, Object object, ClassLoader classLoader) -->Line_3 $$ Class<?> typeGuard = classLoader.loadClass(type.getIdentifier())[ CD ]
Line_3 $$ Class<?> typeGuard = classLoader.loadClass(type.getIdentifier())-->Line_3 $$ Class<?> typeGuard = classLoader.loadClass(type.getIdentifier())[ CD ]
Line_2 $$ public void isType(JvmTypeReference type, Object object, ClassLoader classLoader) -->Line_3 $$ Class<?> typeGuard = classLoader.loadClass(type.getIdentifier())[ FD ]
Line_2 $$ public void isType(JvmTypeReference type, Object object, ClassLoader classLoader) -->Line_3 $$ Class<?> typeGuard = classLoader.loadClass(type.getIdentifier())[ FD ]
Line_2 $$ public void isType(JvmTypeReference type, Object object, ClassLoader classLoader) -->Line_4 $$ return typeGuard.isInstance(object)[ CD ]
Line_4 $$ return typeGuard.isInstance(object)-->Line_4 $$ return typeGuard.isInstance(object)[ CD ]
Line_3 $$ Class<?> typeGuard = classLoader.loadClass(type.getIdentifier())-->Line_4 $$ return typeGuard.isInstance(object)[ FD ]
Line_2 $$ public void isType(JvmTypeReference type, Object object, ClassLoader classLoader) -->Line_4 $$ return typeGuard.isInstance(object)[ FD ]
