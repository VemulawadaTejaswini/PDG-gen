Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void doRun(Connection cx) [ CD ]
Line_2 $$ public void doRun(Connection cx) -->Line_3 $$ PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, s, k)))[ CD ]
Line_3 $$ PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, s, k)))-->Line_3 $$ PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, s, k)))[ CD ]
Line_2 $$ public void doRun(Connection cx) -->Line_3 $$ PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, s, k)))[ FD ]
Line_2 $$ public void doRun(Connection cx) -->Line_4 $$ ps.setString(2, k)[ CD ]
Line_3 $$ PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, s, k)))-->Line_4 $$ ps.setString(2, k)[ FD ]
Line_2 $$ public void doRun(Connection cx) -->Line_5 $$ ResultSet rs = open(ps.executeQuery())[ CD ]
Line_5 $$ ResultSet rs = open(ps.executeQuery())-->Line_5 $$ ResultSet rs = open(ps.executeQuery())[ CD ]
Line_3 $$ PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, s, k)))-->Line_5 $$ ResultSet rs = open(ps.executeQuery())[ FD ]
Line_2 $$ public void doRun(Connection cx) -->Line_6 $$ return rs.next() ? rs.getString(1) : null[ CD ]
Line_5 $$ ResultSet rs = open(ps.executeQuery())-->Line_6 $$ return rs.next() ? rs.getString(1) : null[ FD ]
Line_5 $$ ResultSet rs = open(ps.executeQuery())-->Line_6 $$ return rs.next() ? rs.getString(1) : null[ FD ]
