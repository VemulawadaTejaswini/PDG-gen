Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void assertIndexUsed(Connection conn, String query, List<Object> binds, String indexName, boolean expectedToBeUsed) [ CD ]
Line_2 $$ public void assertIndexUsed(Connection conn, String query, List<Object> binds, String indexName, boolean expectedToBeUsed) -->Line_3 $$ for (int i = 0; i < binds.size(); i++) [ CD ]
Line_2 $$ public void assertIndexUsed(Connection conn, String query, List<Object> binds, String indexName, boolean expectedToBeUsed) -->Line_2 $$ public void assertIndexUsed(Connection conn, String query, List<Object> binds, String indexName, boolean expectedToBeUsed) [ CD ]
Line_3 $$ for (int i = 0; i < binds.size(); i++) -->Line_3 $$ for (int i = 0; i < binds.size(); i++) [ CD ]
Line_2 $$ public void assertIndexUsed(Connection conn, String query, List<Object> binds, String indexName, boolean expectedToBeUsed) -->Line_3 $$ for (int i = 0; i < binds.size(); i++) [ FD ]
Line_3 $$ for (int i = 0; i < binds.size(); i++) -->Line_3 $$ for (int i = 0; i < binds.size(); i++) [ CD ]
Line_3 $$ for (int i = 0; i < binds.size(); i++) -->Line_3 $$ for (int i = 0; i < binds.size(); i++) [ CD ]
Line_3 $$ for (int i = 0; i < binds.size(); i++) -->Line_3 $$ for (int i = 0; i < binds.size(); i++) [ FD ]
Line_3 $$ for (int i = 0; i < binds.size(); i++) -->Line_4 $$ stmt.setObject(i + 1, binds.get(i))[ CD ]
Line_2 $$ public void assertIndexUsed(Connection conn, String query, List<Object> binds, String indexName, boolean expectedToBeUsed) -->Line_4 $$ stmt.setObject(i + 1, binds.get(i))[ FD ]
Line_3 $$ for (int i = 0; i < binds.size(); i++) -->Line_4 $$ stmt.setObject(i + 1, binds.get(i))[ FD ]
Line_2 $$ public void assertIndexUsed(Connection conn, String query, List<Object> binds, String indexName, boolean expectedToBeUsed) -->Line_6 $$ ResultSet rs = stmt.executeQuery()[ CD ]
Line_6 $$ ResultSet rs = stmt.executeQuery()-->Line_6 $$ ResultSet rs = stmt.executeQuery()[ CD ]
Line_2 $$ public void assertIndexUsed(Connection conn, String query, List<Object> binds, String indexName, boolean expectedToBeUsed) -->Line_7 $$ String explainPlan = QueryUtil.getExplainPlan(rs)[ CD ]
Line_7 $$ String explainPlan = QueryUtil.getExplainPlan(rs)-->Line_7 $$ String explainPlan = QueryUtil.getExplainPlan(rs)[ CD ]
Line_6 $$ ResultSet rs = stmt.executeQuery()-->Line_7 $$ String explainPlan = QueryUtil.getExplainPlan(rs)[ FD ]
Line_2 $$ public void assertIndexUsed(Connection conn, String query, List<Object> binds, String indexName, boolean expectedToBeUsed) -->Line_8 $$ assertEquals(expectedToBeUsed, explainPlan.contains(" SCAN OVER " + indexName))[ CD ]
Line_2 $$ public void assertIndexUsed(Connection conn, String query, List<Object> binds, String indexName, boolean expectedToBeUsed) -->Line_8 $$ assertEquals(expectedToBeUsed, explainPlan.contains(" SCAN OVER " + indexName))[ FD ]
Line_7 $$ String explainPlan = QueryUtil.getExplainPlan(rs)-->Line_8 $$ assertEquals(expectedToBeUsed, explainPlan.contains(" SCAN OVER " + indexName))[ FD ]
Line_3 $$ for (int i = 0; i < binds.size(); i++) -->Line_3 $$ for (int i = 0; i < binds.size(); i++) [ FD ]
Line_3 $$ for (int i = 0; i < binds.size(); i++) -->Line_3 $$ for (int i = 0; i < binds.size(); i++) [ FD ]
Line_3 $$ for (int i = 0; i < binds.size(); i++) -->Line_3 $$ for (int i = 0; i < binds.size(); i++) [ FD ]
Line_3 $$ for (int i = 0; i < binds.size(); i++) -->Line_4 $$ stmt.setObject(i + 1, binds.get(i))[ FD ]
