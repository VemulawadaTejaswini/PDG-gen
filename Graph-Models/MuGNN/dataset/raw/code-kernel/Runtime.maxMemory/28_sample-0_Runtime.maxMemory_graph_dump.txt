Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void describeMemoryUsage() [ CD ]
Line_2 $$ public void describeMemoryUsage() -->Line_3 $$ Runtime runtime = Runtime.getRuntime()[ CD ]
Line_3 $$ Runtime runtime = Runtime.getRuntime()-->Line_3 $$ Runtime runtime = Runtime.getRuntime()[ CD ]
Line_2 $$ public void describeMemoryUsage() -->Line_4 $$ long free = runtime.freeMemory()[ CD ]
Line_4 $$ long free = runtime.freeMemory()-->Line_4 $$ long free = runtime.freeMemory()[ CD ]
Line_3 $$ Runtime runtime = Runtime.getRuntime()-->Line_4 $$ long free = runtime.freeMemory()[ FD ]
Line_2 $$ public void describeMemoryUsage() -->Line_5 $$ return String.format("%sM used, %sM free, %sM max", (runtime.totalMemory() - free) / 1000000, free / 1000000, runtime.maxMemory() / 1000000)[ CD ]
Line_5 $$ return String.format("%sM used, %sM free, %sM max", (runtime.totalMemory() - free) / 1000000, free / 1000000, runtime.maxMemory() / 1000000)-->Line_5 $$ return String.format("%sM used, %sM free, %sM max", (runtime.totalMemory() - free) / 1000000, free / 1000000, runtime.maxMemory() / 1000000)[ CD ]
Line_3 $$ Runtime runtime = Runtime.getRuntime()-->Line_5 $$ return String.format("%sM used, %sM free, %sM max", (runtime.totalMemory() - free) / 1000000, free / 1000000, runtime.maxMemory() / 1000000)[ FD ]
Line_3 $$ Runtime runtime = Runtime.getRuntime()-->Line_5 $$ return String.format("%sM used, %sM free, %sM max", (runtime.totalMemory() - free) / 1000000, free / 1000000, runtime.maxMemory() / 1000000)[ FD ]
