Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void read() [ CD ]
Line_2 $$ public void read() -->Line_3 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())[ CD ]
Line_3 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())-->Line_3 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())[ CD ]
Line_2 $$ public void read() -->Line_4 $$ buffer.order(ByteOrder.BIG_ENDIAN)[ CD ]
Line_3 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())-->Line_4 $$ buffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_2 $$ public void read() -->Line_5 $$ int j = channel.read(buffer)[ CD ]
Line_5 $$ int j = channel.read(buffer)-->Line_5 $$ int j = channel.read(buffer)[ CD ]
Line_3 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())-->Line_5 $$ int j = channel.read(buffer)[ FD ]
Line_2 $$ public void read() -->Line_6 $$ if (j != buffer.capacity())[ CD ]
Line_5 $$ int j = channel.read(buffer)-->Line_6 $$ if (j != buffer.capacity())[ FD ]
Line_3 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())-->Line_6 $$ if (j != buffer.capacity())[ FD ]
Line_3 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())-->Line_7 $$ throw new IOException("Could not read index in one go, only " + j + " out of " + buffer.capacity() + " read")[ FD ]
Line_2 $$ public void read() -->Line_8 $$ buffer.flip()[ CD ]
Line_3 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())-->Line_8 $$ buffer.flip()[ FD ]
