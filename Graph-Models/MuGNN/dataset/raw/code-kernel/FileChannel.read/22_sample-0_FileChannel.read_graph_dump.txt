Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void run() [ CD ]
Line_2 $$ public void run() -->Line_3 $$ int read = channel.read(buff.getByteBuffer(), offset)[ CD ]
Line_3 $$ int read = channel.read(buff.getByteBuffer(), offset)-->Line_3 $$ int read = channel.read(buff.getByteBuffer(), offset)[ CD ]
Line_2 $$ public void run() -->Line_4 $$ if (read < 0) [ CD ]
Line_3 $$ int read = channel.read(buff.getByteBuffer(), offset)-->Line_4 $$ if (read < 0) [ FD ]
Line_4 $$ if (read < 0) -->Line_5 $$ if (buff.position() > position) [ CD ]
Line_5 $$ if (buff.position() > position) -->Line_5 $$ if (buff.position() > position) [ CD ]
Line_5 $$ if (buff.position() > position) -->Line_6 $$ buff.limit(buff.position())[ CD ]
Line_5 $$ if (buff.position() > position) -->Line_7 $$ buff.position(position)[ CD ]
Line_5 $$ if (buff.position() > position) -->Line_8 $$ buff.mark()[ CD ]
Line_5 $$ if (buff.position() > position) -->Line_9 $$ list.add(buff)[ CD ]
Line_5 $$ if (buff.position() > position) -->Line_11 $$ if (Debug.ENABLED)[ CD ]
Line_11 $$ if (Debug.ENABLED)-->Line_12 $$ buff.lock(0)[ CD ]
Line_5 $$ if (buff.position() > position) -->Line_13 $$ buff.recycle()[ CD ]
Line_4 $$ if (read < 0) -->Line_16 $$ if (buff.remaining() == 0) [ CD ]
Line_16 $$ if (buff.remaining() == 0) -->Line_17 $$ buff.position(position)[ CD ]
Line_16 $$ if (buff.remaining() == 0) -->Line_18 $$ buff.mark()[ CD ]
Line_16 $$ if (buff.remaining() == 0) -->Line_19 $$ list.add(buff)[ CD ]
Line_16 $$ if (buff.remaining() == 0) -->Line_20 $$ buff = JVMBuff.getWithPosition(Buff.getLargestUnsplitable())[ CD ]
Line_16 $$ if (buff.remaining() == 0) -->Line_21 $$ position = buff.position()[ CD ]
Line_2 $$ public void run() -->Line_24 $$ list.copyToFixed(buffs)[ CD ]
