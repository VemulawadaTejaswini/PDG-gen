Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void findHighIdBackwards() [ CD ]
Line_2 $$ public void findHighIdBackwards() -->Line_3 $$ for (long i = highId; i > 0; i--) [ CD ]
Line_2 $$ public void findHighIdBackwards() -->Line_2 $$ public void findHighIdBackwards() [ CD ]
Line_3 $$ for (long i = highId; i > 0; i--) -->Line_3 $$ for (long i = highId; i > 0; i--) [ CD ]
Line_3 $$ for (long i = highId; i > 0; i--) -->Line_3 $$ for (long i = highId; i > 0; i--) [ CD ]
Line_3 $$ for (long i = highId; i > 0; i--) -->Line_3 $$ for (long i = highId; i > 0; i--) [ FD ]
Line_3 $$ for (long i = highId; i > 0; i--) -->Line_5 $$ fileChannel.position(i * recordSize)[ CD ]
Line_3 $$ for (long i = highId; i > 0; i--) -->Line_6 $$ if (fileChannel.read(byteBuffer) > 0) [ CD ]
Line_6 $$ if (fileChannel.read(byteBuffer) > 0) -->Line_8 $$ byteBuffer.flip()[ CD ]
Line_6 $$ if (fileChannel.read(byteBuffer) > 0) -->Line_9 $$ byte inUse = byteBuffer.get()[ CD ]
Line_9 $$ byte inUse = byteBuffer.get()-->Line_9 $$ byte inUse = byteBuffer.get()[ CD ]
Line_6 $$ if (fileChannel.read(byteBuffer) > 0) -->Line_10 $$ byteBuffer.clear()[ CD ]
Line_6 $$ if (fileChannel.read(byteBuffer) > 0) -->Line_11 $$ if (inUse != 0) [ CD ]
Line_9 $$ byte inUse = byteBuffer.get()-->Line_11 $$ if (inUse != 0) [ FD ]
Line_11 $$ if (inUse != 0) -->Line_13 $$ return i[ CD ]
Line_3 $$ for (long i = highId; i > 0; i--) -->Line_3 $$ for (long i = highId; i > 0; i--) [ FD ]
Line_3 $$ for (long i = highId; i > 0; i--) -->Line_3 $$ for (long i = highId; i > 0; i--) [ FD ]
Line_3 $$ for (long i = highId; i > 0; i--) -->Line_3 $$ for (long i = highId; i > 0; i--) [ FD ]
Line_9 $$ byte inUse = byteBuffer.get()-->Line_11 $$ if (inUse != 0) [ FD ]
