Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void rebuildIdGenerator() [ CD ]
Line_2 $$ public void rebuildIdGenerator() -->Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) [ CD ]
Line_2 $$ public void rebuildIdGenerator() -->Line_2 $$ public void rebuildIdGenerator() [ CD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) [ CD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) [ CD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) [ FD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_6 $$ fileChannel.position(i * recordSize)[ CD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_7 $$ fileChannel.read(byteBuffer)[ CD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_8 $$ byteBuffer.flip()[ CD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_9 $$ byte inUse = byteBuffer.get()[ CD ]
Line_9 $$ byte inUse = byteBuffer.get()-->Line_9 $$ byte inUse = byteBuffer.get()[ CD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_10 $$ byteBuffer.flip()[ CD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_11 $$ nextId()[ CD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_12 $$ if ((inUse & 0x1) == Record.NOT_IN_USE.byteValue()) [ CD ]
Line_12 $$ if ((inUse & 0x1) == Record.NOT_IN_USE.byteValue()) -->Line_14 $$ freeIdList.add(i)[ CD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_14 $$ freeIdList.add(i)[ FD ]
Line_12 $$ if ((inUse & 0x1) == Record.NOT_IN_USE.byteValue()) -->Line_19 $$ while (!freeIdList.isEmpty()) [ CD ]
Line_12 $$ if ((inUse & 0x1) == Record.NOT_IN_USE.byteValue()) -->Line_12 $$ if ((inUse & 0x1) == Record.NOT_IN_USE.byteValue()) [ CD ]
Line_19 $$ while (!freeIdList.isEmpty()) -->Line_19 $$ while (!freeIdList.isEmpty()) [ CD ]
Line_19 $$ while (!freeIdList.isEmpty()) -->Line_19 $$ while (!freeIdList.isEmpty()) [ CD ]
Line_19 $$ while (!freeIdList.isEmpty()) -->Line_21 $$ freeId(freeIdList.removeFirst())[ CD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) [ FD ]
Line_3 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_14 $$ freeIdList.add(i)[ FD ]
