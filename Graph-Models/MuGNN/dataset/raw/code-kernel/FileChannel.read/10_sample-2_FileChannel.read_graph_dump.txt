Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void telnet(Channel channel, String message) [ CD ]
Line_2 $$ public void telnet(Channel channel, String message) -->Line_3 $$ if (file != null && file.exists()) [ CD ]
Line_7 $$ FileChannel filechannel = fis.getChannel()-->Line_7 $$ FileChannel filechannel = fis.getChannel()[ CD ]
Line_5 $$ FileInputStream fis = new FileInputStream(file)-->Line_7 $$ FileChannel filechannel = fis.getChannel()[ FD ]
Line_7 $$ FileChannel filechannel = fis.getChannel()-->Line_9 $$ size = filechannel.size()[ FD ]
Line_11 $$ if (size <= SHOW_LOG_LENGTH) -->Line_12 $$ bb = ByteBuffer.allocate((int) size)[ CD ]
Line_10 $$ ByteBuffer bb-->Line_12 $$ bb = ByteBuffer.allocate((int) size)[ FD ]
Line_12 $$ bb = ByteBuffer.allocate((int) size)-->Line_12 $$ bb = ByteBuffer.allocate((int) size)[ FD ]
Line_12 $$ bb = ByteBuffer.allocate((int) size)-->Line_12 $$ bb = ByteBuffer.allocate((int) size)[ CD ]
Line_11 $$ if (size <= SHOW_LOG_LENGTH) -->Line_13 $$ filechannel.read(bb, 0)[ CD ]
Line_7 $$ FileChannel filechannel = fis.getChannel()-->Line_13 $$ filechannel.read(bb, 0)[ FD ]
Line_10 $$ ByteBuffer bb-->Line_13 $$ filechannel.read(bb, 0)[ FD ]
Line_12 $$ bb = ByteBuffer.allocate((int) size)-->Line_13 $$ filechannel.read(bb, 0)[ FD ]
Line_11 $$ if (size <= SHOW_LOG_LENGTH) -->Line_15 $$ int pos = (int) (size - SHOW_LOG_LENGTH)[ CD ]
Line_11 $$ if (size <= SHOW_LOG_LENGTH) -->Line_16 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ CD ]
Line_10 $$ ByteBuffer bb-->Line_16 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ FD ]
Line_12 $$ bb = ByteBuffer.allocate((int) size)-->Line_16 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ FD ]
Line_16 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_16 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ FD ]
Line_16 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_16 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)[ CD ]
Line_11 $$ if (size <= SHOW_LOG_LENGTH) -->Line_17 $$ filechannel.read(bb, pos)[ CD ]
Line_7 $$ FileChannel filechannel = fis.getChannel()-->Line_17 $$ filechannel.read(bb, pos)[ FD ]
Line_10 $$ ByteBuffer bb-->Line_17 $$ filechannel.read(bb, pos)[ FD ]
Line_12 $$ bb = ByteBuffer.allocate((int) size)-->Line_17 $$ filechannel.read(bb, pos)[ FD ]
Line_16 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_17 $$ filechannel.read(bb, pos)[ FD ]
Line_15 $$ int pos = (int) (size - SHOW_LOG_LENGTH)-->Line_17 $$ filechannel.read(bb, pos)[ FD ]
Line_10 $$ ByteBuffer bb-->Line_19 $$ bb.flip()[ FD ]
Line_12 $$ bb = ByteBuffer.allocate((int) size)-->Line_19 $$ bb.flip()[ FD ]
Line_16 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_19 $$ bb.flip()[ FD ]
Line_20 $$ String content = new String(bb.array()).replace("<", "&lt;").replace(">", "&gt;").replace("\n", "<br/><br/>")-->Line_20 $$ String content = new String(bb.array()).replace("<", "&lt;").replace(">", "&gt;").replace("\n", "<br/><br/>")[ CD ]
Line_10 $$ ByteBuffer bb-->Line_20 $$ String content = new String(bb.array()).replace("<", "&lt;").replace(">", "&gt;").replace("\n", "<br/><br/>")[ FD ]
Line_12 $$ bb = ByteBuffer.allocate((int) size)-->Line_20 $$ String content = new String(bb.array()).replace("<", "&lt;").replace(">", "&gt;").replace("\n", "<br/><br/>")[ FD ]
Line_16 $$ bb = ByteBuffer.allocate(SHOW_LOG_LENGTH)-->Line_20 $$ String content = new String(bb.array()).replace("<", "&lt;").replace(">", "&gt;").replace("\n", "<br/><br/>")[ FD ]
Line_7 $$ FileChannel filechannel = fis.getChannel()-->Line_27 $$ filechannel.close()[ FD ]
Line_5 $$ FileInputStream fis = new FileInputStream(file)-->Line_30 $$ fis.close()[ FD ]
Line_3 $$ if (file != null && file.exists()) -->Line_37 $$ buf.append("\r\nMESSAGE: log file not exists or log appender is console .")[ CD ]
