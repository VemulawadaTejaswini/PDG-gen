Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void runTransfer(IProgressMonitor monitor) [ CD ]
Line_2 $$ public void runTransfer(IProgressMonitor monitor) -->Line_3 $$ if (fileChannel.read(buffer) == -1)[ CD ]
Line_2 $$ public void runTransfer(IProgressMonitor monitor) -->Line_5 $$ buffer.flip()[ CD ]
Line_2 $$ public void runTransfer(IProgressMonitor monitor) -->Line_6 $$ while (buffer.remaining() > 0) [ CD ]
Line_2 $$ public void runTransfer(IProgressMonitor monitor) -->Line_2 $$ public void runTransfer(IProgressMonitor monitor) [ CD ]
Line_6 $$ while (buffer.remaining() > 0) -->Line_7 $$ int n = socket.write(buffer)[ CD ]
Line_7 $$ int n = socket.write(buffer)-->Line_7 $$ int n = socket.write(buffer)[ CD ]
Line_6 $$ while (buffer.remaining() > 0) -->Line_9 $$ monitor.worked(n)[ CD ]
Line_2 $$ public void runTransfer(IProgressMonitor monitor) -->Line_9 $$ monitor.worked(n)[ FD ]
Line_7 $$ int n = socket.write(buffer)-->Line_9 $$ monitor.worked(n)[ FD ]
Line_6 $$ while (buffer.remaining() > 0) -->Line_10 $$ monitor.setTaskName("Transfer Probe (" + numberToString(bytesSent) + " of " + numberToString(probeSize) + ")")[ CD ]
Line_2 $$ public void runTransfer(IProgressMonitor monitor) -->Line_10 $$ monitor.setTaskName("Transfer Probe (" + numberToString(bytesSent) + " of " + numberToString(probeSize) + ")")[ FD ]
Line_2 $$ public void runTransfer(IProgressMonitor monitor) -->Line_13 $$ buffer.clear()[ CD ]
Line_7 $$ int n = socket.write(buffer)-->Line_9 $$ monitor.worked(n)[ FD ]
