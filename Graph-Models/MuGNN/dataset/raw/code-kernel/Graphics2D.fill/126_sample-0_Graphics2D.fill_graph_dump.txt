Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void paintTile(Graphics2D g, MapView mv, IVertexRenderer vertexRenderer) [ CD ]
Line_2 $$ public void paintTile(Graphics2D g, MapView mv, IVertexRenderer vertexRenderer) -->Line_3 $$ BlockingDeque<EleVertex> list = getVertices()[ CD ]
Line_3 $$ BlockingDeque<EleVertex> list = getVertices()-->Line_3 $$ BlockingDeque<EleVertex> list = getVertices()[ CD ]
Line_5 $$ Point p0 = mv.getPoint(eleVertex.get(0))-->Line_5 $$ Point p0 = mv.getPoint(eleVertex.get(0))[ CD ]
Line_2 $$ public void paintTile(Graphics2D g, MapView mv, IVertexRenderer vertexRenderer) -->Line_5 $$ Point p0 = mv.getPoint(eleVertex.get(0))[ FD ]
Line_4 $$ for (EleVertex eleVertex : list) -->Line_5 $$ Point p0 = mv.getPoint(eleVertex.get(0))[ FD ]
Line_6 $$ Point p1 = mv.getPoint(eleVertex.get(1))-->Line_6 $$ Point p1 = mv.getPoint(eleVertex.get(1))[ CD ]
Line_2 $$ public void paintTile(Graphics2D g, MapView mv, IVertexRenderer vertexRenderer) -->Line_6 $$ Point p1 = mv.getPoint(eleVertex.get(1))[ FD ]
Line_4 $$ for (EleVertex eleVertex : list) -->Line_6 $$ Point p1 = mv.getPoint(eleVertex.get(1))[ FD ]
Line_7 $$ Point p2 = mv.getPoint(eleVertex.get(2))-->Line_7 $$ Point p2 = mv.getPoint(eleVertex.get(2))[ CD ]
Line_2 $$ public void paintTile(Graphics2D g, MapView mv, IVertexRenderer vertexRenderer) -->Line_7 $$ Point p2 = mv.getPoint(eleVertex.get(2))[ FD ]
Line_4 $$ for (EleVertex eleVertex : list) -->Line_7 $$ Point p2 = mv.getPoint(eleVertex.get(2))[ FD ]
Line_2 $$ public void paintTile(Graphics2D g, MapView mv, IVertexRenderer vertexRenderer) -->Line_9 $$ g.setColor(vertexRenderer.getElevationColor(eleVertex))[ FD ]
Line_2 $$ public void paintTile(Graphics2D g, MapView mv, IVertexRenderer vertexRenderer) -->Line_9 $$ g.setColor(vertexRenderer.getElevationColor(eleVertex))[ FD ]
Line_4 $$ for (EleVertex eleVertex : list) -->Line_9 $$ g.setColor(vertexRenderer.getElevationColor(eleVertex))[ FD ]
Line_2 $$ public void paintTile(Graphics2D g, MapView mv, IVertexRenderer vertexRenderer) -->Line_10 $$ g.fill(shape)[ FD ]
Line_8 $$ Triangle shape = new Triangle(p0, p1, p2)-->Line_10 $$ g.fill(shape)[ FD ]
