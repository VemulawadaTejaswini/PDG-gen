Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void drawHistogram(Graphics2D g2d) [ CD ]
Line_2 $$ public void drawHistogram(Graphics2D g2d) -->Line_3 $$ for (int i = 0; i < histoRect.width; i++) [ CD ]
Line_2 $$ public void drawHistogram(Graphics2D g2d) -->Line_2 $$ public void drawHistogram(Graphics2D g2d) [ CD ]
Line_3 $$ for (int i = 0; i < histoRect.width; i++) -->Line_3 $$ for (int i = 0; i < histoRect.width; i++) [ CD ]
Line_3 $$ for (int i = 0; i < histoRect.width; i++) -->Line_3 $$ for (int i = 0; i < histoRect.width; i++) [ CD ]
Line_3 $$ for (int i = 0; i < histoRect.width; i++) -->Line_3 $$ for (int i = 0; i < histoRect.width; i++) [ FD ]
Line_3 $$ for (int i = 0; i < histoRect.width; i++) -->Line_4 $$ final int binIndex = (int) Math.floor(minViewBinIndex + i * binsPerPixel)[ CD ]
Line_3 $$ for (int i = 0; i < histoRect.width; i++) -->Line_5 $$ double binHeight = 0.0[ CD ]
Line_3 $$ for (int i = 0; i < histoRect.width; i++) -->Line_6 $$ if (binIndex >= 0 && binIndex < histogramBins.length) [ CD ]
Line_6 $$ if (binIndex >= 0 && binIndex < histogramBins.length) -->Line_7 $$ final double counts = histogramBins[binIndex][ CD ]
Line_6 $$ if (binIndex >= 0 && binIndex < histogramBins.length) -->Line_8 $$ binHeight = countsScale * counts[ CD ]
Line_5 $$ double binHeight = 0.0-->Line_8 $$ binHeight = countsScale * counts[ FD ]
Line_8 $$ binHeight = countsScale * counts-->Line_8 $$ binHeight = countsScale * counts[ FD ]
Line_7 $$ final double counts = histogramBins[binIndex]-->Line_8 $$ binHeight = countsScale * counts[ FD ]
Line_3 $$ for (int i = 0; i < histoRect.width; i++) -->Line_10 $$ if (binHeight >= histoRect.height) [ CD ]
Line_5 $$ double binHeight = 0.0-->Line_10 $$ if (binHeight >= histoRect.height) [ FD ]
Line_8 $$ binHeight = countsScale * counts-->Line_10 $$ if (binHeight >= histoRect.height) [ FD ]
Line_10 $$ if (binHeight >= histoRect.height) -->Line_11 $$ binHeight = histoRect.height - 1[ CD ]
Line_5 $$ double binHeight = 0.0-->Line_11 $$ binHeight = histoRect.height - 1[ FD ]
Line_8 $$ binHeight = countsScale * counts-->Line_11 $$ binHeight = histoRect.height - 1[ FD ]
Line_11 $$ binHeight = histoRect.height - 1-->Line_11 $$ binHeight = histoRect.height - 1[ FD ]
Line_3 $$ for (int i = 0; i < histoRect.width; i++) -->Line_13 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ CD ]
Line_5 $$ double binHeight = 0.0-->Line_13 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ FD ]
Line_8 $$ binHeight = countsScale * counts-->Line_13 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ FD ]
Line_11 $$ binHeight = histoRect.height - 1-->Line_13 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ FD ]
Line_3 $$ for (int i = 0; i < histoRect.width; i++) -->Line_14 $$ g2d.fill(r)[ CD ]
Line_2 $$ public void drawHistogram(Graphics2D g2d) -->Line_14 $$ g2d.fill(r)[ FD ]
Line_2 $$ public void drawHistogram(Graphics2D g2d) -->Line_16 $$ g2d.setPaint(oldPaint)[ CD ]
Line_2 $$ public void drawHistogram(Graphics2D g2d) -->Line_16 $$ g2d.setPaint(oldPaint)[ FD ]
Line_3 $$ for (int i = 0; i < histoRect.width; i++) -->Line_3 $$ for (int i = 0; i < histoRect.width; i++) [ FD ]
Line_3 $$ for (int i = 0; i < histoRect.width; i++) -->Line_3 $$ for (int i = 0; i < histoRect.width; i++) [ FD ]
Line_3 $$ for (int i = 0; i < histoRect.width; i++) -->Line_3 $$ for (int i = 0; i < histoRect.width; i++) [ FD ]
Line_7 $$ final double counts = histogramBins[binIndex]-->Line_8 $$ binHeight = countsScale * counts[ FD ]
Line_5 $$ double binHeight = 0.0-->Line_10 $$ if (binHeight >= histoRect.height) [ FD ]
Line_8 $$ binHeight = countsScale * counts-->Line_10 $$ if (binHeight >= histoRect.height) [ FD ]
Line_11 $$ binHeight = histoRect.height - 1-->Line_10 $$ if (binHeight >= histoRect.height) [ FD ]
Line_5 $$ double binHeight = 0.0-->Line_13 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ FD ]
Line_8 $$ binHeight = countsScale * counts-->Line_13 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ FD ]
Line_11 $$ binHeight = histoRect.height - 1-->Line_13 $$ r.setRect(histoRect.x + i, histoRect.y + histoRect.height - 1 - binHeight, 1.0, binHeight)[ FD ]
