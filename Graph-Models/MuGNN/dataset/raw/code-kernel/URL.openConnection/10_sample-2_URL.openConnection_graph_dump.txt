Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testPartialRangeResponsesDoNotCorruptCache() [ CD ]
Line_2 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_3 $$ server.enqueue(new MockResponse().setBody("AA").setResponseCode(HttpURLConnection.HTTP_PARTIAL).addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)).addHeader("Content-Range: bytes 1000-1001/2000"))[ CD ]
Line_2 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_7 $$ server.enqueue(new MockResponse().setBody("BB"))[ CD ]
Line_2 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_8 $$ server.play()[ CD ]
Line_2 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_9 $$ URL url = server.getUrl("/")[ CD ]
Line_9 $$ URL url = server.getUrl("/")-->Line_9 $$ URL url = server.getUrl("/")[ CD ]
Line_2 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_10 $$ URLConnection range = url.openConnection()[ CD ]
Line_10 $$ URLConnection range = url.openConnection()-->Line_10 $$ URLConnection range = url.openConnection()[ CD ]
Line_9 $$ URL url = server.getUrl("/")-->Line_10 $$ URLConnection range = url.openConnection()[ FD ]
Line_2 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_11 $$ range.addRequestProperty("Range", "bytes=1000-1001")[ CD ]
Line_10 $$ URLConnection range = url.openConnection()-->Line_11 $$ range.addRequestProperty("Range", "bytes=1000-1001")[ FD ]
Line_2 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_12 $$ assertEquals("AA", readAscii(range))[ CD ]
Line_10 $$ URLConnection range = url.openConnection()-->Line_12 $$ assertEquals("AA", readAscii(range))[ FD ]
Line_2 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_13 $$ assertEquals("BB", readAscii(url.openConnection()))[ CD ]
Line_9 $$ URL url = server.getUrl("/")-->Line_13 $$ assertEquals("BB", readAscii(url.openConnection()))[ FD ]
