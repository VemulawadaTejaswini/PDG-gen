Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) [ CD ]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) -->Line_3 $$ server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED))[ CD ]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) -->Line_4 $$ server.play()[ CD ]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) -->Line_5 $$ URL url = server.getUrl("/")[ CD ]
Line_5 $$ URL url = server.getUrl("/")-->Line_5 $$ URL url = server.getUrl("/")[ CD ]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) -->Line_6 $$ assertEquals("A", readAscii(url.openConnection()))[ CD ]
Line_5 $$ URL url = server.getUrl("/")-->Line_6 $$ assertEquals("A", readAscii(url.openConnection()))[ FD ]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) -->Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ CD ]
Line_5 $$ URL url = server.getUrl("/")-->Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) -->Line_8 $$ connection.addRequestProperty(conditionName, conditionValue)[ CD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_8 $$ connection.addRequestProperty(conditionName, conditionValue)[ FD ]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) -->Line_8 $$ connection.addRequestProperty(conditionName, conditionValue)[ FD ]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) -->Line_8 $$ connection.addRequestProperty(conditionName, conditionValue)[ FD ]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) -->Line_9 $$ assertEquals(HttpURLConnection.HTTP_NOT_MODIFIED, connection.getResponseCode())[ CD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_9 $$ assertEquals(HttpURLConnection.HTTP_NOT_MODIFIED, connection.getResponseCode())[ FD ]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) -->Line_10 $$ assertEquals("", readAscii(connection))[ CD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_10 $$ assertEquals("", readAscii(connection))[ FD ]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) -->Line_11 $$ return server.takeRequest()[ CD ]
Line_11 $$ return server.takeRequest()-->Line_11 $$ return server.takeRequest()[ CD ]
