Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testExtensionAuthFilter() [ CD ]
Line_2 $$ public void testExtensionAuthFilter() -->Line_3 $$ URL url = new URL("http://localhost:" + port + "/default")[ CD ]
Line_2 $$ public void testExtensionAuthFilter() -->Line_4 $$ HttpURLConnection get = (HttpURLConnection) url.openConnection()[ CD ]
Line_3 $$ URL url = new URL("http://localhost:" + port + "/default")-->Line_4 $$ HttpURLConnection get = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testExtensionAuthFilter() -->Line_5 $$ get.setRequestProperty(DummyAuthFilter.AUTH_HDR, DummyAuthFilter.SECRET_USER)[ CD ]
Line_4 $$ HttpURLConnection get = (HttpURLConnection) url.openConnection()-->Line_5 $$ get.setRequestProperty(DummyAuthFilter.AUTH_HDR, DummyAuthFilter.SECRET_USER)[ FD ]
Line_2 $$ public void testExtensionAuthFilter() -->Line_6 $$ Assert.assertEquals(HttpServletResponse.SC_OK, get.getResponseCode())[ CD ]
Line_4 $$ HttpURLConnection get = (HttpURLConnection) url.openConnection()-->Line_6 $$ Assert.assertEquals(HttpServletResponse.SC_OK, get.getResponseCode())[ FD ]
Line_2 $$ public void testExtensionAuthFilter() -->Line_7 $$ get = (HttpURLConnection) url.openConnection()[ CD ]
Line_4 $$ HttpURLConnection get = (HttpURLConnection) url.openConnection()-->Line_7 $$ get = (HttpURLConnection) url.openConnection()[ FD ]
Line_7 $$ get = (HttpURLConnection) url.openConnection()-->Line_7 $$ get = (HttpURLConnection) url.openConnection()[ FD ]
Line_3 $$ URL url = new URL("http://localhost:" + port + "/default")-->Line_7 $$ get = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testExtensionAuthFilter() -->Line_8 $$ get.setRequestProperty(DummyAuthFilter.AUTH_HDR, "hacker")[ CD ]
Line_4 $$ HttpURLConnection get = (HttpURLConnection) url.openConnection()-->Line_8 $$ get.setRequestProperty(DummyAuthFilter.AUTH_HDR, "hacker")[ FD ]
Line_7 $$ get = (HttpURLConnection) url.openConnection()-->Line_8 $$ get.setRequestProperty(DummyAuthFilter.AUTH_HDR, "hacker")[ FD ]
Line_2 $$ public void testExtensionAuthFilter() -->Line_9 $$ Assert.assertEquals(HttpServletResponse.SC_UNAUTHORIZED, get.getResponseCode())[ CD ]
Line_4 $$ HttpURLConnection get = (HttpURLConnection) url.openConnection()-->Line_9 $$ Assert.assertEquals(HttpServletResponse.SC_UNAUTHORIZED, get.getResponseCode())[ FD ]
Line_7 $$ get = (HttpURLConnection) url.openConnection()-->Line_9 $$ Assert.assertEquals(HttpServletResponse.SC_UNAUTHORIZED, get.getResponseCode())[ FD ]
