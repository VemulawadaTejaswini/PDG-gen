Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void useWireMock() [ CD ]
Line_2 $$ public void useWireMock() -->Line_3 $$ URL uri = new URL("http://localhost:8080/blah")[ CD ]
Line_2 $$ public void useWireMock() -->Line_4 $$ InputStream content = uri.openConnection().getInputStream()[ CD ]
Line_4 $$ InputStream content = uri.openConnection().getInputStream()-->Line_4 $$ InputStream content = uri.openConnection().getInputStream()[ CD ]
Line_3 $$ URL uri = new URL("http://localhost:8080/blah")-->Line_4 $$ InputStream content = uri.openConnection().getInputStream()[ FD ]
Line_2 $$ public void useWireMock() -->Line_5 $$ final String retrievedBody = IOUtils.toString(content)[ CD ]
Line_5 $$ final String retrievedBody = IOUtils.toString(content)-->Line_5 $$ final String retrievedBody = IOUtils.toString(content)[ CD ]
Line_4 $$ InputStream content = uri.openConnection().getInputStream()-->Line_5 $$ final String retrievedBody = IOUtils.toString(content)[ FD ]
Line_2 $$ public void useWireMock() -->Line_6 $$ assertEquals("body", retrievedBody)[ CD ]
Line_5 $$ final String retrievedBody = IOUtils.toString(content)-->Line_6 $$ assertEquals("body", retrievedBody)[ FD ]
Line_2 $$ public void useWireMock() -->Line_7 $$ assertThat(stdOutCapture.toString(), containsString("c.g.t.wiremock.common.Log4jNotifier - Received request to /mappings/new"))[ CD ]
