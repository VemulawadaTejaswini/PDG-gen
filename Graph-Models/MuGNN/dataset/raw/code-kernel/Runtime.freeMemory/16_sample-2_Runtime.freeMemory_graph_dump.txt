Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void generateFrozenDump(String indent) [ CD ]
Line_2 $$ public void generateFrozenDump(String indent) -->Line_3 $$ p.printf("%s   processors: %d%n", indent, r.availableProcessors())[ CD ]
Line_2 $$ public void generateFrozenDump(String indent) -->Line_3 $$ p.printf("%s   processors: %d%n", indent, r.availableProcessors())[ FD ]
Line_2 $$ public void generateFrozenDump(String indent) -->Line_4 $$ p.printf("%s       drift : %d%n", indent, delay)[ CD ]
Line_2 $$ public void generateFrozenDump(String indent) -->Line_4 $$ p.printf("%s       drift : %d%n", indent, delay)[ FD ]
Line_2 $$ public void generateFrozenDump(String indent) -->Line_5 $$ p.printf("%smemory(t/u/f): %d/%d/%d%n", indent, r.totalMemory() / MB, (r.totalMemory() - r.freeMemory()) / MB, r.freeMemory() / MB)[ CD ]
Line_2 $$ public void generateFrozenDump(String indent) -->Line_5 $$ p.printf("%smemory(t/u/f): %d/%d/%d%n", indent, r.totalMemory() / MB, (r.totalMemory() - r.freeMemory()) / MB, r.freeMemory() / MB)[ FD ]
