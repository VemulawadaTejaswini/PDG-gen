Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void getMemoryStats() [ CD ]
Line_2 $$ public void getMemoryStats() -->Line_3 $$ final Runtime runtime = Runtime.getRuntime()[ CD ]
Line_3 $$ final Runtime runtime = Runtime.getRuntime()-->Line_3 $$ final Runtime runtime = Runtime.getRuntime()[ CD ]
Line_2 $$ public void getMemoryStats() -->Line_4 $$ final long free = runtime.freeMemory() / 1024[ CD ]
Line_3 $$ final Runtime runtime = Runtime.getRuntime()-->Line_4 $$ final long free = runtime.freeMemory() / 1024[ FD ]
Line_2 $$ public void getMemoryStats() -->Line_5 $$ final long total = runtime.totalMemory() / 1024[ CD ]
Line_3 $$ final Runtime runtime = Runtime.getRuntime()-->Line_5 $$ final long total = runtime.totalMemory() / 1024[ FD ]
Line_2 $$ public void getMemoryStats() -->Line_6 $$ return "MEMORY - Total: " + fmt.format(total) + "k " + "Used: " + fmt.format(used) + "k " + "Free: " + fmt.format(free) + "k"[ CD ]
Line_5 $$ final long total = runtime.totalMemory() / 1024-->Line_6 $$ return "MEMORY - Total: " + fmt.format(total) + "k " + "Used: " + fmt.format(used) + "k " + "Free: " + fmt.format(free) + "k"[ FD ]
Line_4 $$ final long free = runtime.freeMemory() / 1024-->Line_6 $$ return "MEMORY - Total: " + fmt.format(total) + "k " + "Used: " + fmt.format(used) + "k " + "Free: " + fmt.format(free) + "k"[ FD ]
