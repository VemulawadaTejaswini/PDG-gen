Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void run(StreamsInputSplit in, ProcessorOutput out, ProcessorOutput err, ColumnFactory cf, RowFactory rf, ExtractionLimit limit) [ CD ]
Line_2 $$ public void run(StreamsInputSplit in, ProcessorOutput out, ProcessorOutput err, ColumnFactory cf, RowFactory rf, ExtractionLimit limit) -->Line_3 $$ Runtime runtime = Runtime.getRuntime()[ CD ]
Line_3 $$ Runtime runtime = Runtime.getRuntime()-->Line_3 $$ Runtime runtime = Runtime.getRuntime()[ CD ]
Line_2 $$ public void run(StreamsInputSplit in, ProcessorOutput out, ProcessorOutput err, ColumnFactory cf, RowFactory rf, ExtractionLimit limit) -->Line_4 $$ double p = ((double) runtime.totalMemory()) / runtime.maxMemory() * 100[ CD ]
Line_3 $$ Runtime runtime = Runtime.getRuntime()-->Line_4 $$ double p = ((double) runtime.totalMemory()) / runtime.maxMemory() * 100[ FD ]
Line_3 $$ Runtime runtime = Runtime.getRuntime()-->Line_4 $$ double p = ((double) runtime.totalMemory()) / runtime.maxMemory() * 100[ FD ]
