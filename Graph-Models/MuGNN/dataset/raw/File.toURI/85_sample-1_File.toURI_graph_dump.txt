Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void createXOManagerFactory(Collection<Class<?>> types) [ CD ]
Line_2 $$ public void createXOManagerFactory(Collection<Class<?>> types) -->Line_3 $$ XOUnit xoUnit = XOUnitBuilder.create(database.toURI(), Neo4jXOProvider.class, types.toArray(new Class<?>[0])).property(PROPERTY_NEO4J_CACHE_TYPE, VALUE_NEO4J_CACHE_TYPE_NONE).property(PROPERTY_NEO4J_ALLOW_STORE_UPGRADE, Boolean.TRUE.toString()).property(PROPERTY_NEO4J_KEEP_LOGICAL_LOGS, Boolean.FALSE.toString()).property(PROPERTY_NEO4J_LOCK_MANAGER, NoOpLockFactory.KEY).property(PROPERTY_NEO4J_DBMS_PAGE_CACHE_MEMORY, "100M").create()[ CD ]
Line_3 $$ XOUnit xoUnit = XOUnitBuilder.create(database.toURI(), Neo4jXOProvider.class, types.toArray(new Class<?>[0])).property(PROPERTY_NEO4J_CACHE_TYPE, VALUE_NEO4J_CACHE_TYPE_NONE).property(PROPERTY_NEO4J_ALLOW_STORE_UPGRADE, Boolean.TRUE.toString()).property(PROPERTY_NEO4J_KEEP_LOGICAL_LOGS, Boolean.FALSE.toString()).property(PROPERTY_NEO4J_LOCK_MANAGER, NoOpLockFactory.KEY).property(PROPERTY_NEO4J_DBMS_PAGE_CACHE_MEMORY, "100M").create()-->Line_3 $$ XOUnit xoUnit = XOUnitBuilder.create(database.toURI(), Neo4jXOProvider.class, types.toArray(new Class<?>[0])).property(PROPERTY_NEO4J_CACHE_TYPE, VALUE_NEO4J_CACHE_TYPE_NONE).property(PROPERTY_NEO4J_ALLOW_STORE_UPGRADE, Boolean.TRUE.toString()).property(PROPERTY_NEO4J_KEEP_LOGICAL_LOGS, Boolean.FALSE.toString()).property(PROPERTY_NEO4J_LOCK_MANAGER, NoOpLockFactory.KEY).property(PROPERTY_NEO4J_DBMS_PAGE_CACHE_MEMORY, "100M").create()[ CD ]
Line_2 $$ public void createXOManagerFactory(Collection<Class<?>> types) -->Line_3 $$ XOUnit xoUnit = XOUnitBuilder.create(database.toURI(), Neo4jXOProvider.class, types.toArray(new Class<?>[0])).property(PROPERTY_NEO4J_CACHE_TYPE, VALUE_NEO4J_CACHE_TYPE_NONE).property(PROPERTY_NEO4J_ALLOW_STORE_UPGRADE, Boolean.TRUE.toString()).property(PROPERTY_NEO4J_KEEP_LOGICAL_LOGS, Boolean.FALSE.toString()).property(PROPERTY_NEO4J_LOCK_MANAGER, NoOpLockFactory.KEY).property(PROPERTY_NEO4J_DBMS_PAGE_CACHE_MEMORY, "100M").create()[ FD ]
Line_2 $$ public void createXOManagerFactory(Collection<Class<?>> types) -->Line_7 $$ return XO.createXOManagerFactory(xoUnit)[ CD ]
Line_7 $$ return XO.createXOManagerFactory(xoUnit)-->Line_7 $$ return XO.createXOManagerFactory(xoUnit)[ CD ]
Line_3 $$ XOUnit xoUnit = XOUnitBuilder.create(database.toURI(), Neo4jXOProvider.class, types.toArray(new Class<?>[0])).property(PROPERTY_NEO4J_CACHE_TYPE, VALUE_NEO4J_CACHE_TYPE_NONE).property(PROPERTY_NEO4J_ALLOW_STORE_UPGRADE, Boolean.TRUE.toString()).property(PROPERTY_NEO4J_KEEP_LOGICAL_LOGS, Boolean.FALSE.toString()).property(PROPERTY_NEO4J_LOCK_MANAGER, NoOpLockFactory.KEY).property(PROPERTY_NEO4J_DBMS_PAGE_CACHE_MEMORY, "100M").create()-->Line_7 $$ return XO.createXOManagerFactory(xoUnit)[ FD ]
