Line_8 $$ for (int i = 0; i < K; ++i) -->Line_13 $$ A.get(i).add(Integer.parseInt(str[j]))[ FD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_4 $$ String[] str = br.readLine().split(" ")[ FD ]
Line_7 $$ List<List<Integer>> A = new ArrayList(K)-->Line_13 $$ A.get(i).add(Integer.parseInt(str[j]))[ FD ]
Line_15 $$ int res = 0-->Line_27 $$ res++[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ String[] str = br.readLine().split(" ")[ CD ]
Line_19 $$ for (int j = 0; j < snack.size(); ++j) -->Line_20 $$ if (snack.get(j) == i) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_29 $$ System.out.println(res)[ CD ]
Line_8 $$ for (int i = 0; i < K; ++i) -->Line_11 $$ str = br.readLine().split(" ")[ CD ]
Line_16 $$ for (int i = 1; i <= N; ++i) -->Line_17 $$ boolean have = false[ CD ]
Line_4 $$ String[] str = br.readLine().split(" ")-->Line_11 $$ str = br.readLine().split(" ")[ FD ]
Line_20 $$ if (snack.get(j) == i) -->Line_21 $$ have = true[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_15 $$ int res = 0[ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ List<List<Integer>> A = new ArrayList(K)[ CD ]
Line_6 $$ int K = Integer.parseInt(str[1])-->Line_8 $$ for (int i = 0; i < K; ++i) [ FD ]
Line_5 $$ int N = Integer.parseInt(str[0])-->Line_16 $$ for (int i = 1; i <= N; ++i) [ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ int N = Integer.parseInt(str[0])[ CD ]
Line_16 $$ for (int i = 1; i <= N; ++i) -->Line_27 $$ if (!have)[ CD ]
Line_12 $$ for (int j = 0; j < d; ++j) A.get(i).add(Integer.parseInt(str[j]))-->Line_20 $$ if (snack.get(j) == i) [ FD ]
Line_21 $$ have = true-->Line_27 $$ if (!have)[ FD ]
Line_8 $$ for (int i = 0; i < K; ++i) -->Line_20 $$ if (snack.get(j) == i) [ FD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_10 $$ int d = Integer.parseInt(br.readLine())[ FD ]
Line_7 $$ List<List<Integer>> A = new ArrayList(K)-->Line_9 $$ A.add(new ArrayList())[ FD ]
Line_18 $$ for (List<Integer> snack : A) -->Line_20 $$ if (snack.get(j) == i) [ FD ]
Line_12 $$ for (int j = 0; j < d; ++j) A.get(i).add(Integer.parseInt(str[j]))-->Line_19 $$ for (int j = 0; j < snack.size(); ++j) [ FD ]
Line_16 $$ for (int i = 1; i <= N; ++i) -->Line_20 $$ if (snack.get(j) == i) [ FD ]
Line_17 $$ boolean have = false-->Line_21 $$ have = true[ FD ]
Line_19 $$ for (int j = 0; j < snack.size(); ++j) -->Line_20 $$ if (snack.get(j) == i) [ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_16 $$ for (int i = 1; i <= N; ++i) [ CD ]
Line_17 $$ boolean have = false-->Line_27 $$ if (!have)[ FD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_11 $$ str = br.readLine().split(" ")[ FD ]
Line_15 $$ int res = 0-->Line_29 $$ System.out.println(res)[ FD ]
Line_10 $$ int d = Integer.parseInt(br.readLine())-->Line_12 $$ for (int j = 0; j < d; ++j) A.get(i).add(Integer.parseInt(str[j]))[ FD ]
Line_18 $$ for (List<Integer> snack : A) -->Line_19 $$ for (int j = 0; j < snack.size(); ++j) [ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_8 $$ for (int i = 0; i < K; ++i) [ CD ]
Line_8 $$ for (int i = 0; i < K; ++i) -->Line_10 $$ int d = Integer.parseInt(br.readLine())[ CD ]
Line_8 $$ for (int i = 0; i < K; ++i) -->Line_12 $$ for (int j = 0; j < d; ++j) A.get(i).add(Integer.parseInt(str[j]))[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ int K = Integer.parseInt(str[1])[ CD ]
Line_8 $$ for (int i = 0; i < K; ++i) -->Line_9 $$ A.add(new ArrayList())[ CD ]
Line_12 $$ for (int j = 0; j < d; ++j) A.get(i).add(Integer.parseInt(str[j]))-->Line_13 $$ A.get(i).add(Integer.parseInt(str[j]))[ CD ]
Line_8 $$ for (int i = 0; i < K; ++i) -->Line_16 $$ for (int i = 1; i <= N; ++i) [ FD ]
