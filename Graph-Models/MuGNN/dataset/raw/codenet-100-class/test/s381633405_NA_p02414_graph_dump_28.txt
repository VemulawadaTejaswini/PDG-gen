Line_32 $$ Ci += matrix_A[low_spot][m_term] * matrix_B[m_term][column_spot]-->Line_40 $$ Ci = 0[ FD ]
Line_12 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) -->Line_20 $$ for (int low_spot = 0; low_spot < column_or_row_m; low_spot++) [ FD ]
Line_6 $$ int low_n = Integer.parseInt(array_of_lo_col[0])-->Line_29 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) [ FD ]
Line_40 $$ Ci = 0-->Line_34 $$ matrix_C[low_spot][column_spot] = Ci[ FD ]
Line_13 $$ String elements_A = input.readLine()-->Line_14 $$ String[] array_elements_A = elements_A.split(" ")[ FD ]
Line_23 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) -->Line_37 $$ if (column_spot < remove_blank_last) [ FD ]
Line_30 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) -->Line_40 $$ Ci = 0[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_10 $$ long[][] matrix_B = new long[column_or_row_m][column_l][ CD ]
Line_15 $$ for (int column_spot = 0; column_spot < column_or_row_m; column_spot++) -->Line_17 $$ matrix_A[low_spot][column_spot] = element_A[ CD ]
Line_32 $$ Ci += matrix_A[low_spot][m_term] * matrix_B[m_term][column_spot]-->Line_34 $$ matrix_C[low_spot][column_spot] = Ci[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_8 $$ int column_l = Integer.parseInt(array_of_lo_col[2])[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_9 $$ long[][] matrix_A = new long[low_n][column_or_row_m][ CD ]
Line_7 $$ int column_or_row_m = Integer.parseInt(array_of_lo_col[1])-->Line_15 $$ for (int column_spot = 0; column_spot < column_or_row_m; column_spot++) [ FD ]
Line_23 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) -->Line_24 $$ long element_B = Long.parseLong(array_elements_B[column_spot])[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_12 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) [ CD ]
Line_7 $$ int column_or_row_m = Integer.parseInt(array_of_lo_col[1])-->Line_20 $$ for (int low_spot = 0; low_spot < column_or_row_m; low_spot++) [ FD ]
Line_15 $$ for (int column_spot = 0; column_spot < column_or_row_m; column_spot++) -->Line_30 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) [ FD ]
Line_12 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) -->Line_14 $$ String[] array_elements_A = elements_A.split(" ")[ CD ]
Line_12 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) -->Line_29 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) [ FD ]
Line_30 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) -->Line_37 $$ if (column_spot < remove_blank_last) [ CD ]
Line_24 $$ long element_B = Long.parseLong(array_elements_B[column_spot])-->Line_25 $$ matrix_B[low_spot][column_spot] = element_B[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ BufferedReader input = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_28 $$ long Ci = 0-->Line_34 $$ matrix_C[low_spot][column_spot] = Ci[ FD ]
Line_3 $$ BufferedReader input = new BufferedReader(new InputStreamReader(System.in))-->Line_4 $$ String first_line = input.readLine()[ FD ]
Line_30 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) -->Line_31 $$ for (int m_term = 0; m_term < column_or_row_m; m_term++) [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_28 $$ long Ci = 0[ CD ]
Line_8 $$ int column_l = Integer.parseInt(array_of_lo_col[2])-->Line_30 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) [ FD ]
Line_28 $$ long Ci = 0-->Line_40 $$ Ci = 0[ FD ]
Line_31 $$ for (int m_term = 0; m_term < column_or_row_m; m_term++) -->Line_32 $$ Ci += matrix_A[low_spot][m_term] * matrix_B[m_term][column_spot][ CD ]
Line_3 $$ BufferedReader input = new BufferedReader(new InputStreamReader(System.in))-->Line_21 $$ String elements_B = input.readLine()[ FD ]
Line_29 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) -->Line_42 $$ System.out.println("")[ CD ]
Line_15 $$ for (int column_spot = 0; column_spot < column_or_row_m; column_spot++) -->Line_37 $$ if (column_spot < remove_blank_last) [ FD ]
Line_15 $$ for (int column_spot = 0; column_spot < column_or_row_m; column_spot++) -->Line_16 $$ long element_A = Long.parseLong(array_elements_A[column_spot])[ CD ]
Line_4 $$ String first_line = input.readLine()-->Line_5 $$ String[] array_of_lo_col = first_line.split(" ")[ FD ]
Line_20 $$ for (int low_spot = 0; low_spot < column_or_row_m; low_spot++) -->Line_22 $$ String[] array_elements_B = elements_B.split(" ")[ CD ]
Line_23 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) -->Line_25 $$ matrix_B[low_spot][column_spot] = element_B[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_20 $$ for (int low_spot = 0; low_spot < column_or_row_m; low_spot++) [ CD ]
Line_15 $$ for (int column_spot = 0; column_spot < column_or_row_m; column_spot++) -->Line_23 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) [ FD ]
Line_7 $$ int column_or_row_m = Integer.parseInt(array_of_lo_col[1])-->Line_31 $$ for (int m_term = 0; m_term < column_or_row_m; m_term++) [ FD ]
Line_30 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) -->Line_34 $$ matrix_C[low_spot][column_spot] = Ci[ CD ]
Line_23 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) -->Line_30 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) [ FD ]
Line_21 $$ String elements_B = input.readLine()-->Line_22 $$ String[] array_elements_B = elements_B.split(" ")[ FD ]
Line_20 $$ for (int low_spot = 0; low_spot < column_or_row_m; low_spot++) -->Line_23 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) [ CD ]
Line_12 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) -->Line_13 $$ String elements_A = input.readLine()[ CD ]
Line_37 $$ if (column_spot < remove_blank_last) -->Line_38 $$ System.out.print(" ")[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_11 $$ long[][] matrix_C = new long[low_n][column_l][ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ String first_line = input.readLine()[ CD ]
Line_28 $$ long Ci = 0-->Line_32 $$ Ci += matrix_A[low_spot][m_term] * matrix_B[m_term][column_spot][ FD ]
Line_30 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) -->Line_35 $$ System.out.print(matrix_C[low_spot][column_spot])[ CD ]
Line_16 $$ long element_A = Long.parseLong(array_elements_A[column_spot])-->Line_17 $$ matrix_A[low_spot][column_spot] = element_A[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ int column_or_row_m = Integer.parseInt(array_of_lo_col[1])[ CD ]
Line_8 $$ int column_l = Integer.parseInt(array_of_lo_col[2])-->Line_23 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) [ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_29 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) [ CD ]
Line_29 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) -->Line_30 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) [ CD ]
Line_6 $$ int low_n = Integer.parseInt(array_of_lo_col[0])-->Line_12 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) [ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ String[] array_of_lo_col = first_line.split(" ")[ CD ]
Line_12 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) -->Line_15 $$ for (int column_spot = 0; column_spot < column_or_row_m; column_spot++) [ CD ]
Line_20 $$ for (int low_spot = 0; low_spot < column_or_row_m; low_spot++) -->Line_29 $$ for (int low_spot = 0; low_spot < low_n; low_spot++) [ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ int low_n = Integer.parseInt(array_of_lo_col[0])[ CD ]
Line_3 $$ BufferedReader input = new BufferedReader(new InputStreamReader(System.in))-->Line_13 $$ String elements_A = input.readLine()[ FD ]
Line_20 $$ for (int low_spot = 0; low_spot < column_or_row_m; low_spot++) -->Line_21 $$ String elements_B = input.readLine()[ CD ]
Line_30 $$ for (int column_spot = 0; column_spot < column_l; column_spot++) -->Line_37 $$ if (column_spot < remove_blank_last) [ FD ]
