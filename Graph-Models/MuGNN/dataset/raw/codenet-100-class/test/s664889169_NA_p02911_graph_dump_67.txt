Line_13 $$ for (int j = 1; j <= q; j++) -->Line_16 $$ if (!hp.containsKey(tmp))[ CD ]
Line_5 $$ PrintWriter out = new PrintWriter(outputStream)-->Line_29 $$ out.println("No")[ FD ]
Line_11 $$ HashMap<Integer, Integer> hp = new HashMap()-->Line_16 $$ if (!hp.containsKey(tmp))[ FD ]
Line_15 $$ int tmp = Integer.parseInt(br.readLine())-->Line_19 $$ hp.put(tmp, hp.get(tmp) + 1)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_8 $$ n = Integer.parseInt(st.nextToken())[ CD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(br.readLine())-->Line_9 $$ k = Integer.parseInt(st.nextToken())[ FD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_7 $$ StringTokenizer st = new StringTokenizer(br.readLine())[ FD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_15 $$ int tmp = Integer.parseInt(br.readLine())[ FD ]
Line_26 $$ if (k - q > 0)-->Line_27 $$ out.println("Yes")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_13 $$ for (int j = 1; j <= q; j++) [ CD ]
Line_5 $$ PrintWriter out = new PrintWriter(outputStream)-->Line_27 $$ out.println("Yes")[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_6 $$ int i, n, m, k[ CD ]
Line_21 $$ for (i = 1; i <= n; i++) -->Line_23 $$ if (hp.containsKey(i) && k - (q - hp.get(i)) > 0)[ CD ]
Line_6 $$ int i, n, m, k-->Line_23 $$ if (hp.containsKey(i) && k - (q - hp.get(i)) > 0)[ FD ]
Line_6 $$ int i, n, m, k-->Line_21 $$ for (i = 1; i <= n; i++) [ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_31 $$ out.flush()[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_15 $$ int tmp = Integer.parseInt(br.readLine())-->Line_16 $$ if (!hp.containsKey(tmp))[ FD ]
Line_5 $$ PrintWriter out = new PrintWriter(outputStream)-->Line_24 $$ out.println("Yes")[ FD ]
Line_6 $$ int i, n, m, k-->Line_9 $$ k = Integer.parseInt(st.nextToken())[ FD ]
Line_23 $$ if (hp.containsKey(i) && k - (q - hp.get(i)) > 0)-->Line_24 $$ out.println("Yes")[ CD ]
Line_16 $$ if (!hp.containsKey(tmp))-->Line_17 $$ hp.put(tmp, 1)[ CD ]
Line_23 $$ if (hp.containsKey(i) && k - (q - hp.get(i)) > 0)-->Line_26 $$ if (k - q > 0)[ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws Exception [ CD ]
Line_13 $$ for (int j = 1; j <= q; j++) -->Line_15 $$ int tmp = Integer.parseInt(br.readLine())[ CD ]
Line_5 $$ PrintWriter out = new PrintWriter(outputStream)-->Line_31 $$ out.flush()[ FD ]
Line_26 $$ if (k - q > 0)-->Line_29 $$ out.println("No")[ CD ]
Line_11 $$ HashMap<Integer, Integer> hp = new HashMap()-->Line_23 $$ if (hp.containsKey(i) && k - (q - hp.get(i)) > 0)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_5 $$ PrintWriter out = new PrintWriter(outputStream)[ CD ]
Line_21 $$ for (i = 1; i <= n; i++) -->Line_23 $$ if (hp.containsKey(i) && k - (q - hp.get(i)) > 0)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_7 $$ StringTokenizer st = new StringTokenizer(br.readLine())[ CD ]
Line_8 $$ n = Integer.parseInt(st.nextToken())-->Line_21 $$ for (i = 1; i <= n; i++) [ FD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(br.readLine())-->Line_10 $$ int q = Integer.parseInt(st.nextToken())[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_9 $$ k = Integer.parseInt(st.nextToken())[ CD ]
Line_10 $$ int q = Integer.parseInt(st.nextToken())-->Line_13 $$ for (int j = 1; j <= q; j++) [ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_12 $$ int max = Integer.MIN_VALUE[ CD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(br.readLine())-->Line_8 $$ n = Integer.parseInt(st.nextToken())[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_32 $$ out.close()[ CD ]
Line_11 $$ HashMap<Integer, Integer> hp = new HashMap()-->Line_17 $$ hp.put(tmp, 1)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_21 $$ for (i = 1; i <= n; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_4 $$ OutputStream outputStream = System.out[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_11 $$ HashMap<Integer, Integer> hp = new HashMap()[ CD ]
Line_6 $$ int i, n, m, k-->Line_8 $$ n = Integer.parseInt(st.nextToken())[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_10 $$ int q = Integer.parseInt(st.nextToken())[ CD ]
Line_15 $$ int tmp = Integer.parseInt(br.readLine())-->Line_17 $$ hp.put(tmp, 1)[ FD ]
Line_5 $$ PrintWriter out = new PrintWriter(outputStream)-->Line_32 $$ out.close()[ FD ]
Line_11 $$ HashMap<Integer, Integer> hp = new HashMap()-->Line_19 $$ hp.put(tmp, hp.get(tmp) + 1)[ FD ]
Line_16 $$ if (!hp.containsKey(tmp))-->Line_19 $$ hp.put(tmp, hp.get(tmp) + 1)[ CD ]
