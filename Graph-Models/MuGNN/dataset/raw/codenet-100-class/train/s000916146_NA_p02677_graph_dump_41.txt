Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_7 $$ BigDecimal m = sc.nextBigDecimal()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_25 $$ System.out.println(Math.sqrt(cpow.doubleValue()))[ CD ]
Line_10 $$ BigDecimal diffangle = hangle.subtract(mangle).abs()-->Line_20 $$ BigDecimal cos = new BigDecimal(Math.cos(Math.toRadians(diffangle.doubleValue())))[ FD ]
Line_10 $$ BigDecimal diffangle = hangle.subtract(mangle).abs()-->Line_15 $$ if (diffangle.compareTo(new BigDecimal(90)) == 0) [ FD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ BigDecimal m = sc.nextBigDecimal()[ CD ]
Line_4 $$ BigDecimal a = sc.nextBigDecimal()-->Line_16 $$ BigDecimal apow = a.pow(2)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_14 $$ BigDecimal cpow[ CD ]
Line_20 $$ BigDecimal cos = new BigDecimal(Math.cos(Math.toRadians(diffangle.doubleValue())))-->Line_23 $$ cpow = apow.add(bpow).subtract(new BigDecimal(2).multiply(a).multiply(b).multiply(cos))[ FD ]
Line_11 $$ if (diffangle.compareTo(new BigDecimal(180)) > 0) -->Line_12 $$ diffangle = new BigDecimal(360).subtract(diffangle)[ CD ]
Line_15 $$ if (diffangle.compareTo(new BigDecimal(90)) == 0) -->Line_16 $$ BigDecimal apow = a.pow(2)[ CD ]
Line_16 $$ BigDecimal apow = a.pow(2)-->Line_18 $$ cpow = apow.add(bpow)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_10 $$ BigDecimal diffangle = hangle.subtract(mangle).abs()[ CD ]
Line_12 $$ diffangle = new BigDecimal(360).subtract(diffangle)-->Line_15 $$ if (diffangle.compareTo(new BigDecimal(90)) == 0) [ FD ]
Line_15 $$ if (diffangle.compareTo(new BigDecimal(90)) == 0) -->Line_20 $$ BigDecimal cos = new BigDecimal(Math.cos(Math.toRadians(diffangle.doubleValue())))[ CD ]
Line_14 $$ BigDecimal cpow-->Line_18 $$ cpow = apow.add(bpow)[ FD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ BigDecimal a = sc.nextBigDecimal()[ FD ]
Line_15 $$ if (diffangle.compareTo(new BigDecimal(90)) == 0) -->Line_23 $$ cpow = apow.add(bpow).subtract(new BigDecimal(2).multiply(a).multiply(b).multiply(cos))[ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ BigDecimal b = sc.nextBigDecimal()[ CD ]
Line_17 $$ BigDecimal bpow = b.pow(2)-->Line_18 $$ cpow = apow.add(bpow)[ FD ]
Line_15 $$ if (diffangle.compareTo(new BigDecimal(90)) == 0) -->Line_21 $$ BigDecimal apow = a.pow(2)[ CD ]
Line_5 $$ BigDecimal b = sc.nextBigDecimal()-->Line_23 $$ cpow = apow.add(bpow).subtract(new BigDecimal(2).multiply(a).multiply(b).multiply(cos))[ FD ]
Line_18 $$ cpow = apow.add(bpow)-->Line_23 $$ cpow = apow.add(bpow).subtract(new BigDecimal(2).multiply(a).multiply(b).multiply(cos))[ FD ]
Line_5 $$ BigDecimal b = sc.nextBigDecimal()-->Line_17 $$ BigDecimal bpow = b.pow(2)[ FD ]
Line_4 $$ BigDecimal a = sc.nextBigDecimal()-->Line_21 $$ BigDecimal apow = a.pow(2)[ FD ]
Line_23 $$ cpow = apow.add(bpow).subtract(new BigDecimal(2).multiply(a).multiply(b).multiply(cos))-->Line_25 $$ System.out.println(Math.sqrt(cpow.doubleValue()))[ FD ]
Line_18 $$ cpow = apow.add(bpow)-->Line_25 $$ System.out.println(Math.sqrt(cpow.doubleValue()))[ FD ]
Line_14 $$ BigDecimal cpow-->Line_23 $$ cpow = apow.add(bpow).subtract(new BigDecimal(2).multiply(a).multiply(b).multiply(cos))[ FD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_6 $$ BigDecimal h = sc.nextBigDecimal()[ FD ]
Line_7 $$ BigDecimal m = sc.nextBigDecimal()-->Line_8 $$ BigDecimal hangle = new BigDecimal(360).divide(new BigDecimal(12)).multiply(h).add(m.multiply(new BigDecimal(0.5)))[ FD ]
Line_6 $$ BigDecimal h = sc.nextBigDecimal()-->Line_8 $$ BigDecimal hangle = new BigDecimal(360).divide(new BigDecimal(12)).multiply(h).add(m.multiply(new BigDecimal(0.5)))[ FD ]
Line_7 $$ BigDecimal m = sc.nextBigDecimal()-->Line_9 $$ BigDecimal mangle = new BigDecimal(360).divide(new BigDecimal(60)).multiply(m)[ FD ]
Line_15 $$ if (diffangle.compareTo(new BigDecimal(90)) == 0) -->Line_17 $$ BigDecimal bpow = b.pow(2)[ CD ]
Line_4 $$ BigDecimal a = sc.nextBigDecimal()-->Line_23 $$ cpow = apow.add(bpow).subtract(new BigDecimal(2).multiply(a).multiply(b).multiply(cos))[ FD ]
Line_8 $$ BigDecimal hangle = new BigDecimal(360).divide(new BigDecimal(12)).multiply(h).add(m.multiply(new BigDecimal(0.5)))-->Line_10 $$ BigDecimal diffangle = hangle.subtract(mangle).abs()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_11 $$ if (diffangle.compareTo(new BigDecimal(180)) > 0) [ CD ]
Line_14 $$ BigDecimal cpow-->Line_25 $$ System.out.println(Math.sqrt(cpow.doubleValue()))[ FD ]
Line_17 $$ BigDecimal bpow = b.pow(2)-->Line_23 $$ cpow = apow.add(bpow).subtract(new BigDecimal(2).multiply(a).multiply(b).multiply(cos))[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ BigDecimal h = sc.nextBigDecimal()[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_15 $$ if (diffangle.compareTo(new BigDecimal(90)) == 0) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ BigDecimal hangle = new BigDecimal(360).divide(new BigDecimal(12)).multiply(h).add(m.multiply(new BigDecimal(0.5)))[ CD ]
Line_15 $$ if (diffangle.compareTo(new BigDecimal(90)) == 0) -->Line_18 $$ cpow = apow.add(bpow)[ CD ]
Line_12 $$ diffangle = new BigDecimal(360).subtract(diffangle)-->Line_20 $$ BigDecimal cos = new BigDecimal(Math.cos(Math.toRadians(diffangle.doubleValue())))[ FD ]
Line_5 $$ BigDecimal b = sc.nextBigDecimal()-->Line_22 $$ BigDecimal bpow = b.pow(2)[ FD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_5 $$ BigDecimal b = sc.nextBigDecimal()[ FD ]
Line_15 $$ if (diffangle.compareTo(new BigDecimal(90)) == 0) -->Line_22 $$ BigDecimal bpow = b.pow(2)[ CD ]
Line_10 $$ BigDecimal diffangle = hangle.subtract(mangle).abs()-->Line_11 $$ if (diffangle.compareTo(new BigDecimal(180)) > 0) [ FD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ BigDecimal a = sc.nextBigDecimal()[ CD ]
Line_9 $$ BigDecimal mangle = new BigDecimal(360).divide(new BigDecimal(60)).multiply(m)-->Line_10 $$ BigDecimal diffangle = hangle.subtract(mangle).abs()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ BigDecimal mangle = new BigDecimal(360).divide(new BigDecimal(60)).multiply(m)[ CD ]
Line_10 $$ BigDecimal diffangle = hangle.subtract(mangle).abs()-->Line_12 $$ diffangle = new BigDecimal(360).subtract(diffangle)[ FD ]
Line_16 $$ BigDecimal apow = a.pow(2)-->Line_23 $$ cpow = apow.add(bpow).subtract(new BigDecimal(2).multiply(a).multiply(b).multiply(cos))[ FD ]
