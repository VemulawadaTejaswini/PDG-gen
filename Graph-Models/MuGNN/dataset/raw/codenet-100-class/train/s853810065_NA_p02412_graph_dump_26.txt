Line_13 $$ for (int y = 1; y <= n; y++) -->Line_14 $$ if (y == j || y == i)[ CD ]
Line_24 $$ if (!breakFlag) -->Line_30 $$ duplications.add(dup)[ CD ]
Line_17 $$ for (ArrayList<Integer> dup : duplications) -->Line_18 $$ if (dup.indexOf(i) != -1 && dup.indexOf(j) != -1 && dup.indexOf(y) != -1) [ FD ]
Line_16 $$ Boolean breakFlag = false-->Line_19 $$ breakFlag = true[ FD ]
Line_4 $$ while (true) -->Line_10 $$ for (int i = 1; i <= n; i++) [ CD ]
Line_24 $$ if (!breakFlag) -->Line_28 $$ dup.add(j)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ while (true) [ CD ]
Line_4 $$ while (true) -->Line_7 $$ if (n == 0 && x == 0)[ CD ]
Line_13 $$ for (int y = 1; y <= n; y++) -->Line_18 $$ if (dup.indexOf(i) != -1 && dup.indexOf(j) != -1 && dup.indexOf(y) != -1) [ FD ]
Line_13 $$ for (int y = 1; y <= n; y++) -->Line_29 $$ dup.add(y)[ FD ]
Line_5 $$ int n = sc.nextInt()-->Line_10 $$ for (int i = 1; i <= n; i++) [ FD ]
Line_17 $$ for (ArrayList<Integer> dup : duplications) -->Line_28 $$ dup.add(j)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_5 $$ int n = sc.nextInt()-->Line_11 $$ for (int j = 1; j <= n; j++) [ FD ]
Line_8 $$ int count = 0-->Line_25 $$ count++[ FD ]
Line_24 $$ if (!breakFlag) -->Line_29 $$ dup.add(y)[ CD ]
Line_11 $$ for (int j = 1; j <= n; j++) -->Line_12 $$ if (j == i)[ CD ]
Line_17 $$ for (ArrayList<Integer> dup : duplications) -->Line_30 $$ duplications.add(dup)[ FD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_38 $$ sc.close()[ CD ]
Line_15 $$ if ((i + j + y) == x) -->Line_24 $$ if (!breakFlag) [ CD ]
Line_10 $$ for (int i = 1; i <= n; i++) -->Line_11 $$ for (int j = 1; j <= n; j++) [ CD ]
Line_11 $$ for (int j = 1; j <= n; j++) -->Line_28 $$ dup.add(j)[ FD ]
Line_4 $$ while (true) -->Line_8 $$ int count = 0[ CD ]
Line_9 $$ ArrayList<ArrayList<Integer>> duplications = new ArrayList()-->Line_30 $$ duplications.add(dup)[ FD ]
Line_4 $$ while (true) -->Line_6 $$ int x = sc.nextInt()[ CD ]
Line_16 $$ Boolean breakFlag = false-->Line_24 $$ if (!breakFlag) [ FD ]
Line_18 $$ if (dup.indexOf(i) != -1 && dup.indexOf(j) != -1 && dup.indexOf(y) != -1) -->Line_19 $$ breakFlag = true[ CD ]
Line_6 $$ int x = sc.nextInt()-->Line_15 $$ if ((i + j + y) == x) [ FD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_5 $$ int n = sc.nextInt()[ FD ]
Line_17 $$ for (ArrayList<Integer> dup : duplications) -->Line_27 $$ dup.add(i)[ FD ]
Line_24 $$ if (!breakFlag) -->Line_25 $$ count++[ CD ]
Line_19 $$ breakFlag = true-->Line_24 $$ if (!breakFlag) [ FD ]
Line_4 $$ while (true) -->Line_9 $$ ArrayList<ArrayList<Integer>> duplications = new ArrayList()[ CD ]
Line_8 $$ int count = 0-->Line_36 $$ System.out.println(count)[ FD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_6 $$ int x = sc.nextInt()[ FD ]
Line_11 $$ for (int j = 1; j <= n; j++) -->Line_12 $$ if (j == i)[ FD ]
Line_10 $$ for (int i = 1; i <= n; i++) -->Line_18 $$ if (dup.indexOf(i) != -1 && dup.indexOf(j) != -1 && dup.indexOf(y) != -1) [ FD ]
Line_24 $$ if (!breakFlag) -->Line_27 $$ dup.add(i)[ CD ]
Line_17 $$ for (ArrayList<Integer> dup : duplications) -->Line_29 $$ dup.add(y)[ FD ]
Line_10 $$ for (int i = 1; i <= n; i++) -->Line_12 $$ if (j == i)[ FD ]
Line_13 $$ for (int y = 1; y <= n; y++) -->Line_15 $$ if ((i + j + y) == x) [ CD ]
Line_11 $$ for (int j = 1; j <= n; j++) -->Line_13 $$ for (int y = 1; y <= n; y++) [ CD ]
Line_15 $$ if ((i + j + y) == x) -->Line_16 $$ Boolean breakFlag = false[ CD ]
Line_5 $$ int n = sc.nextInt()-->Line_13 $$ for (int y = 1; y <= n; y++) [ FD ]
Line_11 $$ for (int j = 1; j <= n; j++) -->Line_18 $$ if (dup.indexOf(i) != -1 && dup.indexOf(j) != -1 && dup.indexOf(y) != -1) [ FD ]
Line_4 $$ while (true) -->Line_5 $$ int n = sc.nextInt()[ CD ]
Line_10 $$ for (int i = 1; i <= n; i++) -->Line_27 $$ dup.add(i)[ FD ]
Line_4 $$ while (true) -->Line_36 $$ System.out.println(count)[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_38 $$ sc.close()[ FD ]
