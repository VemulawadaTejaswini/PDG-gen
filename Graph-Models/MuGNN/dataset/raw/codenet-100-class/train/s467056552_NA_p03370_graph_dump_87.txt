Line_5 $$ line = br.readLine()-->Line_14 $$ long num = Long.parseLong(line)[ FD ]
Line_11 $$ long min = 1000-->Line_17 $$ min = num[ FD ]
Line_12 $$ for (int i = 0; i < size; i++) -->Line_16 $$ count = count + 1[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_12 $$ for (int i = 0; i < size; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_3 $$ String line = null[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_10 $$ long count = 0[ CD ]
Line_5 $$ line = br.readLine()-->Line_6 $$ String data[] = line.split(" ")[ FD ]
Line_12 $$ for (int i = 0; i < size; i++) -->Line_15 $$ sum = sum + num[ CD ]
Line_8 $$ long total = Long.parseLong(data[1])-->Line_19 $$ if (total != sum) [ FD ]
Line_4 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_5 $$ line = br.readLine()[ FD ]
Line_7 $$ int size = Integer.parseInt(data[0])-->Line_12 $$ for (int i = 0; i < size; i++) [ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_8 $$ long total = Long.parseLong(data[1])[ CD ]
Line_3 $$ String line = null-->Line_5 $$ line = br.readLine()[ FD ]
Line_10 $$ long count = 0-->Line_21 $$ count = count + (rest / min)[ FD ]
Line_11 $$ long min = 1000-->Line_17 $$ if (num < min)[ FD ]
Line_5 $$ line = br.readLine()-->Line_13 $$ line = br.readLine()[ FD ]
Line_19 $$ if (total != sum) -->Line_20 $$ long rest = total - sum[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_9 $$ long sum = 0[ CD ]
Line_19 $$ if (total != sum) -->Line_21 $$ count = count + (rest / min)[ CD ]
Line_16 $$ count = count + 1-->Line_21 $$ count = count + (rest / min)[ FD ]
Line_12 $$ for (int i = 0; i < size; i++) -->Line_17 $$ if (num < min)[ CD ]
Line_14 $$ long num = Long.parseLong(line)-->Line_15 $$ sum = sum + num[ FD ]
Line_14 $$ long num = Long.parseLong(line)-->Line_17 $$ min = num[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_19 $$ if (total != sum) [ CD ]
Line_21 $$ count = count + (rest / min)-->Line_23 $$ System.out.println(count)[ FD ]
Line_12 $$ for (int i = 0; i < size; i++) -->Line_13 $$ line = br.readLine()[ CD ]
Line_3 $$ String line = null-->Line_6 $$ String data[] = line.split(" ")[ FD ]
Line_13 $$ line = br.readLine()-->Line_14 $$ long num = Long.parseLong(line)[ FD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws Exception [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_5 $$ line = br.readLine()[ CD ]
Line_3 $$ String line = null-->Line_14 $$ long num = Long.parseLong(line)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_7 $$ int size = Integer.parseInt(data[0])[ CD ]
Line_14 $$ long num = Long.parseLong(line)-->Line_17 $$ if (num < min)[ FD ]
Line_9 $$ long sum = 0-->Line_15 $$ sum = sum + num[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_23 $$ System.out.println(count)[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_4 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_11 $$ long min = 1000[ CD ]
Line_16 $$ count = count + 1-->Line_23 $$ System.out.println(count)[ FD ]
Line_3 $$ String line = null-->Line_13 $$ line = br.readLine()[ FD ]
Line_12 $$ for (int i = 0; i < size; i++) -->Line_14 $$ long num = Long.parseLong(line)[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_6 $$ String data[] = line.split(" ")[ CD ]
Line_9 $$ long sum = 0-->Line_19 $$ if (total != sum) [ FD ]
Line_15 $$ sum = sum + num-->Line_19 $$ if (total != sum) [ FD ]
Line_10 $$ long count = 0-->Line_16 $$ count = count + 1[ FD ]
Line_4 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_13 $$ line = br.readLine()[ FD ]
Line_10 $$ long count = 0-->Line_23 $$ System.out.println(count)[ FD ]
