Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_5 $$ String[] input1 = br.readLine().split(" ")[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_16 $$ if (votes[(int) (m - 1)] >= voteCount * (1 / (4 * m))) [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_9 $$ Integer[] votes = new Integer[n][ CD ]
Line_11 $$ for (int i = 0; i < n; i++) -->Line_13 $$ voteCount += votes[i][ CD ]
Line_4 $$ PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out))-->Line_19 $$ out.println("No")[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_7 $$ double m = Double.parseDouble(input1[1])[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_21 $$ out.close()[ CD ]
Line_6 $$ int n = Integer.parseInt(input1[0])-->Line_11 $$ for (int i = 0; i < n; i++) [ FD ]
Line_4 $$ PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out))-->Line_21 $$ out.close()[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_5 $$ String[] input1 = br.readLine().split(" ")[ CD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_8 $$ String[] input2 = br.readLine().split(" ")[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_11 $$ for (int i = 0; i < n; i++) [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws Exception [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_10 $$ int voteCount = 0[ CD ]
Line_9 $$ Integer[] votes = new Integer[n]-->Line_15 $$ Arrays.sort(votes, Collections.reverseOrder())[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_6 $$ int n = Integer.parseInt(input1[0])[ CD ]
Line_16 $$ if (votes[(int) (m - 1)] >= voteCount * (1 / (4 * m))) -->Line_19 $$ out.println("No")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_8 $$ String[] input2 = br.readLine().split(" ")[ CD ]
Line_16 $$ if (votes[(int) (m - 1)] >= voteCount * (1 / (4 * m))) -->Line_17 $$ out.println("Yes")[ CD ]
Line_10 $$ int voteCount = 0-->Line_13 $$ voteCount += votes[i][ FD ]
Line_11 $$ for (int i = 0; i < n; i++) -->Line_12 $$ votes[i] = Integer.valueOf(input2[i])[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_4 $$ PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out))[ CD ]
Line_4 $$ PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out))-->Line_17 $$ out.println("Yes")[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_15 $$ Arrays.sort(votes, Collections.reverseOrder())[ CD ]
