Line_10 $$ if ((c - 'a') >= 0 && (c - 'a') <= 26) -->Line_11 $$ count[c - 'a']++[ CD ]
Line_6 $$ while ((str = br.readLine()) != null) -->Line_8 $$ char[] cArray = str.toCharArray()[ FD ]
Line_3 $$ String str-->Line_8 $$ char[] cArray = str.toCharArray()[ FD ]
Line_7 $$ str = str.toLowerCase()-->Line_8 $$ char[] cArray = str.toCharArray()[ FD ]
Line_6 $$ while ((str = br.readLine()) != null) -->Line_7 $$ str = str.toLowerCase()[ FD ]
Line_3 $$ String str-->Line_7 $$ str = str.toLowerCase()[ FD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ while ((str = br.readLine()) != null) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_15 $$ for (char c = 'a'; c <= 'z'; c++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_15 $$ for (char c = 'a'; c <= 'z'; c++) -->Line_16 $$ System.out.printf("%s : %d%n", c, count[c - 'a'])[ FD ]
Line_6 $$ while ((str = br.readLine()) != null) -->Line_7 $$ str = str.toLowerCase()[ CD ]
Line_3 $$ String str-->Line_6 $$ while ((str = br.readLine()) != null) [ FD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_6 $$ while ((str = br.readLine()) != null) [ FD ]
Line_6 $$ while ((str = br.readLine()) != null) -->Line_8 $$ char[] cArray = str.toCharArray()[ CD ]
Line_15 $$ for (char c = 'a'; c <= 'z'; c++) -->Line_16 $$ System.out.printf("%s : %d%n", c, count[c - 'a'])[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ String str[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ int[] count = new int[26][ CD ]
Line_9 $$ for (char c : cArray) -->Line_16 $$ System.out.printf("%s : %d%n", c, count[c - 'a'])[ FD ]
Line_9 $$ for (char c : cArray) -->Line_15 $$ for (char c = 'a'; c <= 'z'; c++) [ FD ]
