Line_6 $$ int n = Integer.parseInt(str)-->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_18 $$ if (j == 1) -->Line_23 $$ if (j == 2) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ int n = Integer.parseInt(str)[ CD ]
Line_23 $$ if (j == 2) -->Line_28 $$ if (j == 3) [ CD ]
Line_4 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ sb.append("H ").append(k + 1).append("\n")[ FD ]
Line_24 $$ if (list.contains("C " + (k + 1)) == false) -->Line_25 $$ sb.append("C ").append(k + 1).append("\n")[ CD ]
Line_4 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ sb.append("C ").append(k + 1).append("\n")[ FD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_5 $$ String str = br.readLine()[ FD ]
Line_7 $$ ArrayList<String> list = new ArrayList()-->Line_14 $$ if (list.contains("S " + (k + 1)) == false) [ FD ]
Line_28 $$ if (j == 3) -->Line_29 $$ if (list.contains("D " + (k + 1)) == false) [ CD ]
Line_4 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb.append("S ").append(k + 1).append("\n")[ FD ]
Line_12 $$ for (int k = 0; k < 13; k++) -->Line_13 $$ if (j == 0) [ CD ]
Line_4 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ System.out.print(sb)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ String str = br.readLine()[ CD ]
Line_7 $$ ArrayList<String> list = new ArrayList()-->Line_24 $$ if (list.contains("C " + (k + 1)) == false) [ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_14 $$ if (list.contains("S " + (k + 1)) == false) -->Line_15 $$ sb.append("S ").append(k + 1).append("\n")[ CD ]
Line_7 $$ ArrayList<String> list = new ArrayList()-->Line_9 $$ list.add(br.readLine())[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder()-->Line_30 $$ sb.append("D ").append(k + 1).append("\n")[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_11 $$ for (int j = 0; j < 4; j++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ ArrayList<String> list = new ArrayList()[ CD ]
Line_7 $$ ArrayList<String> list = new ArrayList()-->Line_29 $$ if (list.contains("D " + (k + 1)) == false) [ FD ]
Line_11 $$ for (int j = 0; j < 4; j++) -->Line_13 $$ if (j == 0) [ FD ]
Line_18 $$ if (j == 1) -->Line_19 $$ if (list.contains("H " + (k + 1)) == false) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_35 $$ System.out.print(sb)[ CD ]
Line_11 $$ for (int j = 0; j < 4; j++) -->Line_12 $$ for (int k = 0; k < 13; k++) [ CD ]
Line_11 $$ for (int j = 0; j < 4; j++) -->Line_18 $$ if (j == 1) [ FD ]
Line_5 $$ String str = br.readLine()-->Line_6 $$ int n = Integer.parseInt(str)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_8 $$ for (int i = 0; i < n; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_11 $$ for (int j = 0; j < 4; j++) -->Line_23 $$ if (j == 2) [ FD ]
Line_7 $$ ArrayList<String> list = new ArrayList()-->Line_19 $$ if (list.contains("H " + (k + 1)) == false) [ FD ]
Line_13 $$ if (j == 0) -->Line_18 $$ if (j == 1) [ CD ]
Line_29 $$ if (list.contains("D " + (k + 1)) == false) -->Line_30 $$ sb.append("D ").append(k + 1).append("\n")[ CD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_9 $$ list.add(br.readLine())[ FD ]
Line_11 $$ for (int j = 0; j < 4; j++) -->Line_28 $$ if (j == 3) [ FD ]
Line_1 $$ class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_9 $$ list.add(br.readLine())[ CD ]
Line_23 $$ if (j == 2) -->Line_24 $$ if (list.contains("C " + (k + 1)) == false) [ CD ]
Line_19 $$ if (list.contains("H " + (k + 1)) == false) -->Line_20 $$ sb.append("H ").append(k + 1).append("\n")[ CD ]
Line_13 $$ if (j == 0) -->Line_14 $$ if (list.contains("S " + (k + 1)) == false) [ CD ]
