Line_2 $$ private void generateLookups() -->Line_26 $$ gatherTypes(typeOracle.findType("java.lang.Long").getErasedType(), types)[ CD ]
Line_2 $$ private void generateLookups() -->Line_29 $$ gatherTypes(typeOracle.findType("java.lang.Integer").getErasedType(), types)[ CD ]
Line_2 $$ private void generateLookups() -->Line_24 $$ gatherTypes(typeOracle.findType("java.lang.Boolean").getErasedType(), types)[ CD ]
Line_54 $$ Collections.sort(methodStubs, new Comparator<MethodStub>() -->Line_56 $$ return new Integer(o1.methodId).compareTo(o2.methodId)[ CD ]
Line_2 $$ private void generateLookups() -->Line_33 $$ gatherTypes(typeOracle.findType("java.lang.Object").getErasedType(), types)[ CD ]
Line_6 $$ for (JClassType t : p.getTypes()) -->Line_7 $$ gatherTypes(t.getErasedType(), types)[ FD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_21 $$ gatherTypes(typeOracle.findType("java.util.HashMap").getErasedType(), types)[ FD ]
Line_2 $$ private void generateLookups() -->Line_4 $$ JPackage[] packages = typeOracle.getPackages()[ CD ]
Line_2 $$ private void generateLookups() -->Line_20 $$ gatherTypes(typeOracle.findType("java.util.ArrayList").getErasedType(), types)[ CD ]
Line_2 $$ private void generateLookups() -->Line_34 $$ Collections.sort(types, new Comparator<JType>() [ CD ]
Line_50 $$ if (stubSource.equals(""))-->Line_51 $$ stub.unused = true[ CD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_26 $$ gatherTypes(typeOracle.findType("java.lang.Long").getErasedType(), types)[ FD ]
Line_2 $$ private void generateLookups() -->Line_32 $$ gatherTypes(typeOracle.findType("java.lang.Double").getErasedType(), types)[ CD ]
Line_2 $$ private void generateLookups() -->Line_22 $$ gatherTypes(typeOracle.findType("java.util.Map").getErasedType(), types)[ CD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_22 $$ gatherTypes(typeOracle.findType("java.util.Map").getErasedType(), types)[ FD ]
Line_2 $$ private void generateLookups() -->Line_27 $$ gatherTypes(typeOracle.findType("java.lang.Character").getErasedType(), types)[ CD ]
Line_2 $$ private void generateLookups() -->Line_54 $$ Collections.sort(methodStubs, new Comparator<MethodStub>() [ CD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_30 $$ gatherTypes(typeOracle.findType("java.lang.Float").getErasedType(), types)[ FD ]
Line_2 $$ private void generateLookups() -->Line_65 $$ logger.log(Type.INFO, types.size() + " types reflected")[ CD ]
Line_2 $$ private void generateLookups() -->Line_31 $$ gatherTypes(typeOracle.findType("java.lang.CharSequence").getErasedType(), types)[ CD ]
Line_2 $$ private void generateLookups() -->Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()[ CD ]
Line_2 $$ private void generateLookups() -->Line_42 $$ parameterInitialization()[ CD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_20 $$ gatherTypes(typeOracle.findType("java.util.ArrayList").getErasedType(), types)[ FD ]
Line_13 $$ JClassType type = typeOracle.findType(s)-->Line_14 $$ if (type != null)[ FD ]
Line_2 $$ private void generateLookups() -->Line_19 $$ gatherTypes(typeOracle.findType("java.util.List").getErasedType(), types)[ CD ]
Line_14 $$ if (type != null)-->Line_15 $$ gatherTypes(type.getErasedType(), types)[ CD ]
Line_2 $$ private void generateLookups() -->Line_21 $$ gatherTypes(typeOracle.findType("java.util.HashMap").getErasedType(), types)[ CD ]
Line_61 $$ if (stubSource.equals(""))-->Line_62 $$ stub.unused = true[ CD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_25 $$ gatherTypes(typeOracle.findType("java.lang.Byte").getErasedType(), types)[ FD ]
Line_2 $$ private void generateLookups() -->Line_25 $$ gatherTypes(typeOracle.findType("java.lang.Byte").getErasedType(), types)[ CD ]
Line_2 $$ private void generateLookups() -->Line_43 $$ Collections.sort(setterGetterStubs, new Comparator<SetterGetterStub>() [ CD ]
Line_2 $$ private void generateLookups() -->Line_30 $$ gatherTypes(typeOracle.findType("java.lang.Float").getErasedType(), types)[ CD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_13 $$ JClassType type = typeOracle.findType(s)[ FD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_29 $$ gatherTypes(typeOracle.findType("java.lang.Integer").getErasedType(), types)[ FD ]
Line_11 $$ ConfigurationProperty prop = context.getPropertyOracle().getConfigurationProperty("gdx.reflect.include")-->Line_12 $$ for (String s : prop.getValues()) [ FD ]
Line_34 $$ Collections.sort(types, new Comparator<JType>() -->Line_36 $$ return o1.getQualifiedSourceName().compareTo(o2.getQualifiedSourceName())[ CD ]
Line_5 $$ for (JPackage p : packages) -->Line_6 $$ for (JClassType t : p.getTypes()) [ FD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_33 $$ gatherTypes(typeOracle.findType("java.lang.Object").getErasedType(), types)[ FD ]
Line_34 $$ Collections.sort(types, new Comparator<JType>() -->Line_36 $$ return o1.getQualifiedSourceName().compareTo(o2.getQualifiedSourceName())[ FD ]
Line_43 $$ Collections.sort(setterGetterStubs, new Comparator<SetterGetterStub>() -->Line_45 $$ return new Integer(o1.setter).compareTo(o2.setter)[ CD ]
Line_2 $$ private void generateLookups() -->Line_23 $$ gatherTypes(typeOracle.findType("java.lang.String").getErasedType(), types)[ CD ]
Line_2 $$ private void generateLookups() -->Line_28 $$ gatherTypes(typeOracle.findType("java.lang.Short").getErasedType(), types)[ CD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_4 $$ JPackage[] packages = typeOracle.getPackages()[ FD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_24 $$ gatherTypes(typeOracle.findType("java.lang.Boolean").getErasedType(), types)[ FD ]
Line_6 $$ for (JClassType t : p.getTypes()) -->Line_40 $$ p(createTypeGenerator(t))[ FD ]
Line_13 $$ JClassType type = typeOracle.findType(s)-->Line_15 $$ gatherTypes(type.getErasedType(), types)[ FD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_31 $$ gatherTypes(typeOracle.findType("java.lang.CharSequence").getErasedType(), types)[ FD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_28 $$ gatherTypes(typeOracle.findType("java.lang.Short").getErasedType(), types)[ FD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_19 $$ gatherTypes(typeOracle.findType("java.util.List").getErasedType(), types)[ FD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_23 $$ gatherTypes(typeOracle.findType("java.lang.String").getErasedType(), types)[ FD ]
Line_12 $$ for (String s : prop.getValues()) -->Line_13 $$ JClassType type = typeOracle.findType(s)[ FD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_27 $$ gatherTypes(typeOracle.findType("java.lang.Character").getErasedType(), types)[ FD ]
Line_3 $$ TypeOracle typeOracle = context.getTypeOracle()-->Line_32 $$ gatherTypes(typeOracle.findType("java.lang.Double").getErasedType(), types)[ FD ]
