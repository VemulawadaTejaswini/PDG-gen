Line_8 $$ friendlyURL = friendlyURL.substring(0, end)-->Line_23 $$ friendlyURLMapper.populateParams(friendlyURL, params, requestContext)[ FD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_24 $$ String param = getParam(params, "entryId")[ CD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_7 $$ if (end != -1) [ CD ]
Line_25 $$ if (Validator.isNotNull(param)) -->Line_26 $$ long entryId = GetterUtil.getLong(param)[ CD ]
Line_5 $$ String friendlyURL = url.getPath()-->Line_6 $$ int end = friendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR)[ FD ]
Line_7 $$ if (end != -1) -->Line_8 $$ friendlyURL = friendlyURL.substring(0, end)[ CD ]
Line_8 $$ friendlyURL = friendlyURL.substring(0, end)-->Line_17 $$ friendlyURL = url.getPath()[ FD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_15 $$ Portlet portlet = _portletLocalService.getPortletById(portletId)[ CD ]
Line_12 $$ Map<String, String[]> params = new HashMap()-->Line_29 $$ String urlTitle = getParam(params, "urlTitle")[ FD ]
Line_14 $$ String portletId = PortletProviderUtil.getPortletId(BlogsEntry.class.getName(), PortletProvider.Action.VIEW)-->Line_15 $$ Portlet portlet = _portletLocalService.getPortletById(portletId)[ FD ]
Line_5 $$ String friendlyURL = url.getPath()-->Line_8 $$ friendlyURL = friendlyURL.substring(0, end)[ FD ]
Line_25 $$ if (Validator.isNotNull(param)) -->Line_30 $$ entry = _blogsEntryLocalService.getEntry(groupId, urlTitle)[ CD ]
Line_3 $$ BlogsEntry entry = null-->Line_27 $$ entry = _blogsEntryLocalService.getEntry(entryId)[ FD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_11 $$ long groupId = PortalUtil.getScopeGroupId(plid)[ CD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_10 $$ long plid = PortalUtil.getPlidFromFriendlyURL(companyId, friendlyURL)[ FD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_17 $$ friendlyURL = url.getPath()[ CD ]
Line_3 $$ BlogsEntry entry = null-->Line_30 $$ entry = _blogsEntryLocalService.getEntry(groupId, urlTitle)[ FD ]
Line_16 $$ FriendlyURLMapper friendlyURLMapper = portlet.getFriendlyURLMapperInstance()-->Line_23 $$ friendlyURLMapper.populateParams(friendlyURL, params, requestContext)[ FD ]
Line_4 $$ URL url = new URL(_targetURI)-->Line_5 $$ String friendlyURL = url.getPath()[ FD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_12 $$ Map<String, String[]> params = new HashMap()[ CD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_19 $$ if (end != -1) [ CD ]
Line_5 $$ String friendlyURL = url.getPath()-->Line_20 $$ friendlyURL = friendlyURL.substring(end + Portal.FRIENDLY_URL_SEPARATOR.length() - 1)[ FD ]
Line_18 $$ end = friendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR)-->Line_19 $$ if (end != -1) [ FD ]
Line_6 $$ int end = friendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR)-->Line_19 $$ if (end != -1) [ FD ]
Line_25 $$ if (Validator.isNotNull(param)) -->Line_27 $$ entry = _blogsEntryLocalService.getEntry(entryId)[ CD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_6 $$ int end = friendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR)[ CD ]
Line_25 $$ if (Validator.isNotNull(param)) -->Line_29 $$ String urlTitle = getParam(params, "urlTitle")[ CD ]
Line_27 $$ entry = _blogsEntryLocalService.getEntry(entryId)-->Line_30 $$ entry = _blogsEntryLocalService.getEntry(groupId, urlTitle)[ FD ]
Line_29 $$ String urlTitle = getParam(params, "urlTitle")-->Line_30 $$ entry = _blogsEntryLocalService.getEntry(groupId, urlTitle)[ FD ]
Line_4 $$ URL url = new URL(_targetURI)-->Line_17 $$ friendlyURL = url.getPath()[ FD ]
Line_20 $$ friendlyURL = friendlyURL.substring(end + Portal.FRIENDLY_URL_SEPARATOR.length() - 1)-->Line_23 $$ friendlyURLMapper.populateParams(friendlyURL, params, requestContext)[ FD ]
Line_17 $$ friendlyURL = url.getPath()-->Line_23 $$ friendlyURLMapper.populateParams(friendlyURL, params, requestContext)[ FD ]
Line_5 $$ String friendlyURL = url.getPath()-->Line_18 $$ end = friendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR)[ FD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_14 $$ String portletId = PortletProviderUtil.getPortletId(BlogsEntry.class.getName(), PortletProvider.Action.VIEW)[ CD ]
Line_26 $$ long entryId = GetterUtil.getLong(param)-->Line_27 $$ entry = _blogsEntryLocalService.getEntry(entryId)[ FD ]
Line_19 $$ if (end != -1) -->Line_20 $$ friendlyURL = friendlyURL.substring(end + Portal.FRIENDLY_URL_SEPARATOR.length() - 1)[ CD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_4 $$ URL url = new URL(_targetURI)[ CD ]
Line_24 $$ String param = getParam(params, "entryId")-->Line_25 $$ if (Validator.isNotNull(param)) [ FD ]
Line_5 $$ String friendlyURL = url.getPath()-->Line_10 $$ long plid = PortalUtil.getPlidFromFriendlyURL(companyId, friendlyURL)[ FD ]
Line_10 $$ long plid = PortalUtil.getPlidFromFriendlyURL(companyId, friendlyURL)-->Line_11 $$ long groupId = PortalUtil.getScopeGroupId(plid)[ FD ]
Line_17 $$ friendlyURL = url.getPath()-->Line_18 $$ end = friendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR)[ FD ]
Line_12 $$ Map<String, String[]> params = new HashMap()-->Line_23 $$ friendlyURLMapper.populateParams(friendlyURL, params, requestContext)[ FD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_23 $$ friendlyURLMapper.populateParams(friendlyURL, params, requestContext)[ CD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_5 $$ String friendlyURL = url.getPath()[ CD ]
Line_15 $$ Portlet portlet = _portletLocalService.getPortletById(portletId)-->Line_16 $$ FriendlyURLMapper friendlyURLMapper = portlet.getFriendlyURLMapperInstance()[ FD ]
Line_8 $$ friendlyURL = friendlyURL.substring(0, end)-->Line_20 $$ friendlyURL = friendlyURL.substring(end + Portal.FRIENDLY_URL_SEPARATOR.length() - 1)[ FD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_25 $$ if (Validator.isNotNull(param)) [ CD ]
Line_8 $$ friendlyURL = friendlyURL.substring(0, end)-->Line_18 $$ end = friendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR)[ FD ]
Line_11 $$ long groupId = PortalUtil.getScopeGroupId(plid)-->Line_30 $$ entry = _blogsEntryLocalService.getEntry(groupId, urlTitle)[ FD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_3 $$ BlogsEntry entry = null[ CD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_10 $$ long plid = PortalUtil.getPlidFromFriendlyURL(companyId, friendlyURL)[ CD ]
Line_17 $$ friendlyURL = url.getPath()-->Line_20 $$ friendlyURL = friendlyURL.substring(end + Portal.FRIENDLY_URL_SEPARATOR.length() - 1)[ FD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_13 $$ FriendlyURLMapperThreadLocal.setPRPIdentifiers(new HashMap<String, String>())[ CD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_22 $$ Map<String, Object> requestContext = new HashMap()[ CD ]
Line_6 $$ int end = friendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR)-->Line_7 $$ if (end != -1) [ FD ]
Line_12 $$ Map<String, String[]> params = new HashMap()-->Line_24 $$ String param = getParam(params, "entryId")[ FD ]
Line_5 $$ String friendlyURL = url.getPath()-->Line_17 $$ friendlyURL = url.getPath()[ FD ]
Line_6 $$ int end = friendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR)-->Line_18 $$ end = friendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR)[ FD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_16 $$ FriendlyURLMapper friendlyURLMapper = portlet.getFriendlyURLMapperInstance()[ CD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_32 $$ return entry[ CD ]
Line_2 $$ protected BlogsEntry getBlogsEntry(long companyId) throws Exception -->Line_18 $$ end = friendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR)[ CD ]
Line_22 $$ Map<String, Object> requestContext = new HashMap()-->Line_23 $$ friendlyURLMapper.populateParams(friendlyURL, params, requestContext)[ FD ]
Line_24 $$ String param = getParam(params, "entryId")-->Line_26 $$ long entryId = GetterUtil.getLong(param)[ FD ]
Line_5 $$ String friendlyURL = url.getPath()-->Line_23 $$ friendlyURLMapper.populateParams(friendlyURL, params, requestContext)[ FD ]
Line_8 $$ friendlyURL = friendlyURL.substring(0, end)-->Line_10 $$ long plid = PortalUtil.getPlidFromFriendlyURL(companyId, friendlyURL)[ FD ]
Line_6 $$ int end = friendlyURL.indexOf(Portal.FRIENDLY_URL_SEPARATOR)-->Line_8 $$ friendlyURL = friendlyURL.substring(0, end)[ FD ]
