Line_26 $$ path = StringUtil.replace(path, CharPool.BACK_SLASH, CharPool.SLASH)-->Line_60 $$ pos = path.lastIndexOf(CharPool.SLASH, pos)[ FD ]
Line_67 $$ File[] files = dir.listFiles(new FileFilter() -->Line_74 $$ String name = file.getName()[ FD ]
Line_38 $$ if (jarFile.isFile()) -->Line_39 $$ path = jarFilePath + '!' + path.substring(pos + 4)[ CD ]
Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) -->Line_56 $$ String libDirName = classesDirName.substring(0, classesDirName.length() - "classes/".length())[ CD ]
Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) -->Line_47 $$ if (!path.endsWith(pathOfClass)) [ CD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_3 $$ String pathOfClass = StringUtil.replace(className, CharPool.PERIOD, CharPool.SLASH)[ CD ]
Line_3 $$ String pathOfClass = StringUtil.replace(className, CharPool.PERIOD, CharPool.SLASH)-->Line_5 $$ URL url = classloader.getResource(pathOfClass)[ FD ]
Line_26 $$ path = StringUtil.replace(path, CharPool.BACK_SLASH, CharPool.SLASH)-->Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) [ FD ]
Line_22 $$ String path = URLCodec.decodeURL(url.getPath())-->Line_61 $$ dir = new File(path.substring("file:".length(), pos))[ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_23 $$ if (_log.isDebugEnabled()) [ CD ]
Line_22 $$ String path = URLCodec.decodeURL(url.getPath())-->Line_47 $$ if (!path.endsWith(pathOfClass)) [ FD ]
Line_31 $$ path = "file:".concat(path)-->Line_60 $$ pos = path.lastIndexOf(CharPool.SLASH, pos)[ FD ]
Line_42 $$ path = "file:".concat(path)-->Line_61 $$ dir = new File(path.substring("file:".length(), pos))[ FD ]
Line_31 $$ path = "file:".concat(path)-->Line_34 $$ int pos = path.indexOf(".jar/")[ FD ]
Line_22 $$ String path = URLCodec.decodeURL(url.getPath())-->Line_42 $$ path = "file:".concat(path)[ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) [ CD ]
Line_3 $$ String pathOfClass = StringUtil.replace(className, CharPool.PERIOD, CharPool.SLASH)-->Line_51 $$ String classesDirName = path.substring(0, path.length() - pathOfClass.length())[ FD ]
Line_42 $$ path = "file:".concat(path)-->Line_60 $$ pos = path.lastIndexOf(CharPool.SLASH, pos)[ FD ]
Line_35 $$ if (pos != -1) -->Line_37 $$ File jarFile = new File(jarFilePath)[ CD ]
Line_61 $$ dir = new File(path.substring("file:".length(), pos))-->Line_67 $$ File[] files = dir.listFiles(new FileFilter() [ FD ]
Line_34 $$ int pos = path.indexOf(".jar/")-->Line_60 $$ pos = path.lastIndexOf(CharPool.SLASH, pos)[ FD ]
Line_42 $$ path = "file:".concat(path)-->Line_47 $$ if (!path.endsWith(pathOfClass)) [ FD ]
Line_63 $$ if (!dir.isDirectory()) -->Line_65 $$ return StringPool.BLANK[ CD ]
Line_26 $$ path = StringUtil.replace(path, CharPool.BACK_SLASH, CharPool.SLASH)-->Line_31 $$ path = "file:".concat(path)[ FD ]
Line_22 $$ String path = URLCodec.decodeURL(url.getPath())-->Line_36 $$ String jarFilePath = path.substring(0, pos + 4)[ FD ]
Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) -->Line_57 $$ libDirName += "/lib"[ CD ]
Line_31 $$ path = "file:".concat(path)-->Line_47 $$ if (!path.endsWith(pathOfClass)) [ FD ]
Line_67 $$ File[] files = dir.listFiles(new FileFilter() -->Line_78 $$ if (files == null) [ FD ]
Line_58 $$ dir = new File(libDirName)-->Line_63 $$ if (!dir.isDirectory()) [ FD ]
Line_67 $$ File[] files = dir.listFiles(new FileFilter() -->Line_84 $$ sb.append(file.getAbsolutePath())[ FD ]
Line_78 $$ if (files == null) -->Line_79 $$ return StringPool.BLANK[ CD ]
Line_34 $$ int pos = path.indexOf(".jar/")-->Line_35 $$ if (pos != -1) [ FD ]
Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) -->Line_61 $$ dir = new File(path.substring("file:".length(), pos))[ CD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_6 $$ if (_log.isDebugEnabled()) [ CD ]
Line_5 $$ URL url = classloader.getResource(pathOfClass)-->Line_9 $$ String protocol = url.getProtocol()[ FD ]
Line_39 $$ path = jarFilePath + '!' + path.substring(pos + 4)-->Line_42 $$ path = "file:".concat(path)[ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_10 $$ if (protocol.equals("bundle") || protocol.equals("bundleresource")) [ CD ]
Line_26 $$ path = StringUtil.replace(path, CharPool.BACK_SLASH, CharPool.SLASH)-->Line_61 $$ dir = new File(path.substring("file:".length(), pos))[ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_87 $$ sb.setIndex(sb.index() - 1)[ CD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_5 $$ URL url = classloader.getResource(pathOfClass)[ FD ]
Line_67 $$ File[] files = dir.listFiles(new FileFilter() -->Line_71 $$ if (file.isDirectory()) [ CD ]
Line_39 $$ path = jarFilePath + '!' + path.substring(pos + 4)-->Line_47 $$ if (!path.endsWith(pathOfClass)) [ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_88 $$ return sb.toString()[ CD ]
Line_67 $$ File[] files = dir.listFiles(new FileFilter() -->Line_74 $$ String name = file.getName()[ CD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_26 $$ path = StringUtil.replace(path, CharPool.BACK_SLASH, CharPool.SLASH)[ CD ]
Line_3 $$ String pathOfClass = StringUtil.replace(className, CharPool.PERIOD, CharPool.SLASH)-->Line_4 $$ pathOfClass = pathOfClass.concat(".class")[ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_5 $$ URL url = classloader.getResource(pathOfClass)[ CD ]
Line_67 $$ File[] files = dir.listFiles(new FileFilter() -->Line_75 $$ return name.endsWith(".jar")[ CD ]
Line_22 $$ String path = URLCodec.decodeURL(url.getPath())-->Line_26 $$ path = StringUtil.replace(path, CharPool.BACK_SLASH, CharPool.SLASH)[ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_78 $$ if (files == null) [ CD ]
Line_31 $$ path = "file:".concat(path)-->Line_51 $$ String classesDirName = path.substring(0, path.length() - pathOfClass.length())[ FD ]
Line_31 $$ path = "file:".concat(path)-->Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) [ FD ]
Line_26 $$ path = StringUtil.replace(path, CharPool.BACK_SLASH, CharPool.SLASH)-->Line_42 $$ path = "file:".concat(path)[ FD ]
Line_52 $$ if (!classesDirName.endsWith("/WEB-INF/classes/")) -->Line_54 $$ return StringPool.BLANK[ CD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_33 $$ if ((ServerDetector.isJBoss() || ServerDetector.isWildfly()) && (protocol.equals("vfs") || protocol.equals("vfsfile"))) [ CD ]
Line_31 $$ path = "file:".concat(path)-->Line_39 $$ path = jarFilePath + '!' + path.substring(pos + 4)[ FD ]
Line_60 $$ pos = path.lastIndexOf(CharPool.SLASH, pos)-->Line_61 $$ dir = new File(path.substring("file:".length(), pos))[ FD ]
Line_44 $$ File dir = null-->Line_58 $$ dir = new File(libDirName)[ FD ]
Line_22 $$ String path = URLCodec.decodeURL(url.getPath())-->Line_34 $$ int pos = path.indexOf(".jar/")[ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_3 $$ String pathOfClass = StringUtil.replace(className, CharPool.PERIOD, CharPool.SLASH)[ FD ]
Line_58 $$ dir = new File(libDirName)-->Line_61 $$ dir = new File(path.substring("file:".length(), pos))[ FD ]
Line_12 $$ URLConnection urlConnection = url.openConnection()-->Line_13 $$ Class<?> clazz = urlConnection.getClass()[ FD ]
Line_5 $$ URL url = classloader.getResource(pathOfClass)-->Line_12 $$ URLConnection urlConnection = url.openConnection()[ FD ]
Line_61 $$ dir = new File(path.substring("file:".length(), pos))-->Line_63 $$ if (!dir.isDirectory()) [ FD ]
Line_12 $$ URLConnection urlConnection = url.openConnection()-->Line_16 $$ url = (URL) getLocalURLMethod.invoke(urlConnection)[ FD ]
Line_47 $$ if (!path.endsWith(pathOfClass)) -->Line_48 $$ _log.error("Class " + className + " is not loaded from a JAR file")[ CD ]
Line_34 $$ int pos = path.indexOf(".jar/")-->Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) [ FD ]
Line_26 $$ path = StringUtil.replace(path, CharPool.BACK_SLASH, CharPool.SLASH)-->Line_36 $$ String jarFilePath = path.substring(0, pos + 4)[ FD ]
Line_39 $$ path = jarFilePath + '!' + path.substring(pos + 4)-->Line_60 $$ pos = path.lastIndexOf(CharPool.SLASH, pos)[ FD ]
Line_35 $$ if (pos != -1) -->Line_38 $$ if (jarFile.isFile()) [ CD ]
Line_44 $$ File dir = null-->Line_64 $$ _log.error(dir.toString() + " is not a directory")[ FD ]
Line_33 $$ if ((ServerDetector.isJBoss() || ServerDetector.isWildfly()) && (protocol.equals("vfs") || protocol.equals("vfsfile"))) -->Line_35 $$ if (pos != -1) [ CD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_30 $$ if (ServerDetector.isWebLogic() && protocol.equals("zip")) [ CD ]
Line_22 $$ String path = URLCodec.decodeURL(url.getPath())-->Line_39 $$ path = jarFilePath + '!' + path.substring(pos + 4)[ FD ]
Line_47 $$ if (!path.endsWith(pathOfClass)) -->Line_49 $$ return StringPool.BLANK[ CD ]
Line_58 $$ dir = new File(libDirName)-->Line_67 $$ File[] files = dir.listFiles(new FileFilter() [ FD ]
Line_6 $$ if (_log.isDebugEnabled()) -->Line_7 $$ _log.debug("Build class path from " + url)[ CD ]
Line_27 $$ if (_log.isDebugEnabled()) -->Line_28 $$ _log.debug("Decoded path " + path)[ CD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_67 $$ File[] files = dir.listFiles(new FileFilter() [ CD ]
Line_44 $$ File dir = null-->Line_61 $$ dir = new File(path.substring("file:".length(), pos))[ FD ]
Line_4 $$ pathOfClass = pathOfClass.concat(".class")-->Line_47 $$ if (!path.endsWith(pathOfClass)) [ FD ]
Line_22 $$ String path = URLCodec.decodeURL(url.getPath())-->Line_31 $$ path = "file:".concat(path)[ FD ]
Line_34 $$ int pos = path.indexOf(".jar/")-->Line_61 $$ dir = new File(path.substring("file:".length(), pos))[ FD ]
Line_22 $$ String path = URLCodec.decodeURL(url.getPath())-->Line_51 $$ String classesDirName = path.substring(0, path.length() - pathOfClass.length())[ FD ]
Line_14 $$ Method getLocalURLMethod = clazz.getDeclaredMethod("getLocalURL")-->Line_16 $$ url = (URL) getLocalURLMethod.invoke(urlConnection)[ FD ]
Line_22 $$ String path = URLCodec.decodeURL(url.getPath())-->Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) [ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_27 $$ if (_log.isDebugEnabled()) [ CD ]
Line_61 $$ dir = new File(path.substring("file:".length(), pos))-->Line_64 $$ _log.error(dir.toString() + " is not a directory")[ FD ]
Line_33 $$ if ((ServerDetector.isJBoss() || ServerDetector.isWildfly()) && (protocol.equals("vfs") || protocol.equals("vfsfile"))) -->Line_42 $$ path = "file:".concat(path)[ CD ]
Line_35 $$ if (pos != -1) -->Line_36 $$ String jarFilePath = path.substring(0, pos + 4)[ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_30 $$ if (ServerDetector.isWebLogic() && protocol.equals("zip")) [ FD ]
Line_14 $$ Method getLocalURLMethod = clazz.getDeclaredMethod("getLocalURL")-->Line_15 $$ getLocalURLMethod.setAccessible(true)[ FD ]
Line_67 $$ File[] files = dir.listFiles(new FileFilter() -->Line_81 $$ Arrays.sort(files)[ FD ]
Line_67 $$ File[] files = dir.listFiles(new FileFilter() -->Line_71 $$ if (file.isDirectory()) [ FD ]
Line_13 $$ Class<?> clazz = urlConnection.getClass()-->Line_14 $$ Method getLocalURLMethod = clazz.getDeclaredMethod("getLocalURL")[ FD ]
Line_52 $$ if (!classesDirName.endsWith("/WEB-INF/classes/")) -->Line_53 $$ _log.error("Class " + className + " is not loaded from a standard " + "location (/WEB-INF/classes)")[ CD ]
Line_22 $$ String path = URLCodec.decodeURL(url.getPath())-->Line_60 $$ pos = path.lastIndexOf(CharPool.SLASH, pos)[ FD ]
Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) -->Line_52 $$ if (!classesDirName.endsWith("/WEB-INF/classes/")) [ CD ]
Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) -->Line_61 $$ dir = new File(path.substring("file:".length(), pos))[ FD ]
Line_39 $$ path = jarFilePath + '!' + path.substring(pos + 4)-->Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) [ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_9 $$ String protocol = url.getProtocol()[ CD ]
Line_26 $$ path = StringUtil.replace(path, CharPool.BACK_SLASH, CharPool.SLASH)-->Line_47 $$ if (!path.endsWith(pathOfClass)) [ FD ]
Line_42 $$ path = "file:".concat(path)-->Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) [ FD ]
Line_31 $$ path = "file:".concat(path)-->Line_61 $$ dir = new File(path.substring("file:".length(), pos))[ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_4 $$ pathOfClass = pathOfClass.concat(".class")[ CD ]
Line_5 $$ URL url = classloader.getResource(pathOfClass)-->Line_22 $$ String path = URLCodec.decodeURL(url.getPath())[ FD ]
Line_30 $$ if (ServerDetector.isWebLogic() && protocol.equals("zip")) -->Line_31 $$ path = "file:".concat(path)[ CD ]
Line_42 $$ path = "file:".concat(path)-->Line_51 $$ String classesDirName = path.substring(0, path.length() - pathOfClass.length())[ FD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_33 $$ if ((ServerDetector.isJBoss() || ServerDetector.isWildfly()) && (protocol.equals("vfs") || protocol.equals("vfsfile"))) [ FD ]
Line_39 $$ path = jarFilePath + '!' + path.substring(pos + 4)-->Line_61 $$ dir = new File(path.substring("file:".length(), pos))[ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_45 $$ int pos = -1[ CD ]
Line_31 $$ path = "file:".concat(path)-->Line_42 $$ path = "file:".concat(path)[ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_44 $$ File dir = null[ CD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_63 $$ if (!dir.isDirectory()) [ CD ]
Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) -->Line_58 $$ dir = new File(libDirName)[ CD ]
Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) -->Line_51 $$ String classesDirName = path.substring(0, path.length() - pathOfClass.length())[ CD ]
Line_3 $$ String pathOfClass = StringUtil.replace(className, CharPool.PERIOD, CharPool.SLASH)-->Line_47 $$ if (!path.endsWith(pathOfClass)) [ FD ]
Line_58 $$ dir = new File(libDirName)-->Line_64 $$ _log.error(dir.toString() + " is not a directory")[ FD ]
Line_26 $$ path = StringUtil.replace(path, CharPool.BACK_SLASH, CharPool.SLASH)-->Line_39 $$ path = jarFilePath + '!' + path.substring(pos + 4)[ FD ]
Line_4 $$ pathOfClass = pathOfClass.concat(".class")-->Line_5 $$ URL url = classloader.getResource(pathOfClass)[ FD ]
Line_74 $$ String name = file.getName()-->Line_75 $$ return name.endsWith(".jar")[ FD ]
Line_23 $$ if (_log.isDebugEnabled()) -->Line_24 $$ _log.debug("Path " + path)[ CD ]
Line_39 $$ path = jarFilePath + '!' + path.substring(pos + 4)-->Line_51 $$ String classesDirName = path.substring(0, path.length() - pathOfClass.length())[ FD ]
Line_26 $$ path = StringUtil.replace(path, CharPool.BACK_SLASH, CharPool.SLASH)-->Line_34 $$ int pos = path.indexOf(".jar/")[ FD ]
Line_51 $$ String classesDirName = path.substring(0, path.length() - pathOfClass.length())-->Line_52 $$ if (!classesDirName.endsWith("/WEB-INF/classes/")) [ FD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_10 $$ if (protocol.equals("bundle") || protocol.equals("bundleresource")) [ FD ]
Line_33 $$ if ((ServerDetector.isJBoss() || ServerDetector.isWildfly()) && (protocol.equals("vfs") || protocol.equals("vfsfile"))) -->Line_34 $$ int pos = path.indexOf(".jar/")[ CD ]
Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) -->Line_60 $$ pos = path.lastIndexOf(CharPool.SLASH, pos)[ FD ]
Line_5 $$ URL url = classloader.getResource(pathOfClass)-->Line_16 $$ url = (URL) getLocalURLMethod.invoke(urlConnection)[ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_22 $$ String path = URLCodec.decodeURL(url.getPath())[ CD ]
Line_71 $$ if (file.isDirectory()) -->Line_72 $$ return false[ CD ]
Line_31 $$ path = "file:".concat(path)-->Line_36 $$ String jarFilePath = path.substring(0, pos + 4)[ FD ]
Line_56 $$ String libDirName = classesDirName.substring(0, classesDirName.length() - "classes/".length())-->Line_57 $$ libDirName += "/lib"[ FD ]
Line_2 $$ private static String _buildClassPath(ClassLoader classloader, String className) -->Line_81 $$ Arrays.sort(files)[ CD ]
Line_26 $$ path = StringUtil.replace(path, CharPool.BACK_SLASH, CharPool.SLASH)-->Line_51 $$ String classesDirName = path.substring(0, path.length() - pathOfClass.length())[ FD ]
Line_16 $$ url = (URL) getLocalURLMethod.invoke(urlConnection)-->Line_22 $$ String path = URLCodec.decodeURL(url.getPath())[ FD ]
Line_4 $$ pathOfClass = pathOfClass.concat(".class")-->Line_51 $$ String classesDirName = path.substring(0, path.length() - pathOfClass.length())[ FD ]
Line_51 $$ String classesDirName = path.substring(0, path.length() - pathOfClass.length())-->Line_56 $$ String libDirName = classesDirName.substring(0, classesDirName.length() - "classes/".length())[ FD ]
Line_44 $$ File dir = null-->Line_67 $$ File[] files = dir.listFiles(new FileFilter() [ FD ]
Line_63 $$ if (!dir.isDirectory()) -->Line_64 $$ _log.error(dir.toString() + " is not a directory")[ CD ]
Line_44 $$ File dir = null-->Line_63 $$ if (!dir.isDirectory()) [ FD ]
Line_37 $$ File jarFile = new File(jarFilePath)-->Line_38 $$ if (jarFile.isFile()) [ FD ]
Line_46 $$ if (!path.startsWith("file:") || ((pos = path.indexOf(CharPool.EXCLAMATION)) == -1)) -->Line_60 $$ pos = path.lastIndexOf(CharPool.SLASH, pos)[ CD ]
