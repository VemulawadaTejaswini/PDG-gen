Line_36 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) -->Line_46 $$ cachePackages(pu, jarToScan, packages)[ CD ]
Line_9 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_10 $$ if (pu == null) [ FD ]
Line_36 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) -->Line_37 $$ Map<String, Package> uniquePackages = new HashMap<String, Package>()[ CD ]
Line_9 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_49 $$ return getCachedPackages(pu, jarToScan)[ FD ]
Line_9 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_17 $$ if (pu.getAnnotationIndex() != null) [ FD ]
Line_19 $$ if (index == null) -->Line_20 $$ JPA_LOGGER.tracef("No classes to scan for annotations in jar '%s' (jars with classes '%s')", jarToScan, pu.getAnnotationIndex().keySet())[ CD ]
Line_25 $$ String className = classInfo.name().toString()-->Line_31 $$ JPA_LOGGER.cannotLoadEntityClass(e, className)[ FD ]
Line_25 $$ String className = classInfo.name().toString()-->Line_29 $$ JPA_LOGGER.cannotLoadEntityClass(e, className)[ FD ]
Line_9 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_36 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) [ FD ]
Line_39 $$ Package classPackage = classWithAnnotation.getPackage()-->Line_41 $$ JPA_LOGGER.tracef("getPackagesInJar found package %s", classPackage)[ FD ]
Line_17 $$ if (pu.getAnnotationIndex() != null) -->Line_19 $$ if (index == null) [ CD ]
Line_40 $$ if (classPackage != null) -->Line_42 $$ uniquePackages.put(classPackage.getName(), classPackage)[ CD ]
Line_18 $$ Index index = getJarFileIndex(jarToScan, pu)-->Line_23 $$ Collection<ClassInfo> allClasses = index.getKnownClasses()[ FD ]
Line_9 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_27 $$ resultClasses.add(pu.getNewTempClassLoader().loadClass(className))[ FD ]
Line_36 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) -->Line_49 $$ return getCachedPackages(pu, jarToScan)[ CD ]
Line_38 $$ for (Class<?> classWithAnnotation : resultClasses) -->Line_39 $$ Package classPackage = classWithAnnotation.getPackage()[ FD ]
Line_36 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) -->Line_45 $$ Set<Package> packages = new HashSet<Package>(uniquePackages.values())[ CD ]
Line_17 $$ if (pu.getAnnotationIndex() != null) -->Line_23 $$ Collection<ClassInfo> allClasses = index.getKnownClasses()[ CD ]
Line_39 $$ Package classPackage = classWithAnnotation.getPackage()-->Line_40 $$ if (classPackage != null) [ FD ]
Line_24 $$ for (ClassInfo classInfo : allClasses) -->Line_25 $$ String className = classInfo.name().toString()[ FD ]
Line_8 $$ Set<Class<?>> resultClasses = new HashSet<Class<?>>()-->Line_27 $$ resultClasses.add(pu.getNewTempClassLoader().loadClass(className))[ FD ]
Line_37 $$ Map<String, Package> uniquePackages = new HashMap<String, Package>()-->Line_45 $$ Set<Package> packages = new HashSet<Package>(uniquePackages.values())[ FD ]
Line_18 $$ Index index = getJarFileIndex(jarToScan, pu)-->Line_19 $$ if (index == null) [ FD ]
Line_39 $$ Package classPackage = classWithAnnotation.getPackage()-->Line_42 $$ uniquePackages.put(classPackage.getName(), classPackage)[ FD ]
Line_37 $$ Map<String, Package> uniquePackages = new HashMap<String, Package>()-->Line_42 $$ uniquePackages.put(classPackage.getName(), classPackage)[ FD ]
Line_17 $$ if (pu.getAnnotationIndex() != null) -->Line_18 $$ Index index = getJarFileIndex(jarToScan, pu)[ CD ]
Line_9 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_18 $$ Index index = getJarFileIndex(jarToScan, pu)[ FD ]
Line_40 $$ if (classPackage != null) -->Line_41 $$ JPA_LOGGER.tracef("getPackagesInJar found package %s", classPackage)[ CD ]
Line_19 $$ if (index == null) -->Line_21 $$ return new HashSet<Package>()[ CD ]
Line_9 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_20 $$ JPA_LOGGER.tracef("No classes to scan for annotations in jar '%s' (jars with classes '%s')", jarToScan, pu.getAnnotationIndex().keySet())[ FD ]
Line_13 $$ if (annotationsToLookFor.size() > 0) -->Line_17 $$ if (pu.getAnnotationIndex() != null) [ CD ]
Line_9 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_46 $$ cachePackages(pu, jarToScan, packages)[ FD ]
Line_25 $$ String className = classInfo.name().toString()-->Line_27 $$ resultClasses.add(pu.getNewTempClassLoader().loadClass(className))[ FD ]
Line_45 $$ Set<Package> packages = new HashSet<Package>(uniquePackages.values())-->Line_46 $$ cachePackages(pu, jarToScan, packages)[ FD ]
Line_36 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) -->Line_47 $$ return new HashSet<Package>(packages)[ CD ]
