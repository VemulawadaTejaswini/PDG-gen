Line_12 $$ if (file.isDirectory()) -->Line_15 $$ paths.add(childRelativePath)[ CD ]
Line_2 $$ private static List<String> getChildPathsFromFile(URL root) -->Line_21 $$ return paths[ CD ]
Line_10 $$ for (File file : list) -->Line_13 $$ collectFiles(file, childRelativePath)[ FD ]
Line_11 $$ final String childRelativePath = prefix.length() == 0 ? file.getName() : prefix + URL_PATH_SEPARATOR + file.getName()-->Line_13 $$ collectFiles(file, childRelativePath)[ FD ]
Line_5 $$ new Object() -->Line_8 $$ final File[] list = fromFile.listFiles()[ CD ]
Line_2 $$ private static List<String> getChildPathsFromFile(URL root) -->Line_5 $$ new Object() [ CD ]
Line_8 $$ final File[] list = fromFile.listFiles()-->Line_9 $$ if (list != null) [ FD ]
Line_5 $$ new Object() -->Line_8 $$ final File[] list = fromFile.listFiles()[ FD ]
Line_11 $$ final String childRelativePath = prefix.length() == 0 ? file.getName() : prefix + URL_PATH_SEPARATOR + file.getName()-->Line_15 $$ paths.add(childRelativePath)[ FD ]
Line_5 $$ new Object() -->Line_9 $$ if (list != null) [ CD ]
Line_2 $$ private static List<String> getChildPathsFromFile(URL root) -->Line_3 $$ final List<String> paths = new ArrayList<String>()[ CD ]
Line_10 $$ for (File file : list) -->Line_11 $$ final String childRelativePath = prefix.length() == 0 ? file.getName() : prefix + URL_PATH_SEPARATOR + file.getName()[ FD ]
Line_12 $$ if (file.isDirectory()) -->Line_13 $$ collectFiles(file, childRelativePath)[ CD ]
Line_4 $$ final File rootFile = new File(FileUtil.unquote(root.getPath()))-->Line_5 $$ new Object() [ FD ]
Line_10 $$ for (File file : list) -->Line_12 $$ if (file.isDirectory()) [ FD ]
Line_2 $$ private static List<String> getChildPathsFromFile(URL root) -->Line_4 $$ final File rootFile = new File(FileUtil.unquote(root.getPath()))[ CD ]
Line_3 $$ final List<String> paths = new ArrayList<String>()-->Line_15 $$ paths.add(childRelativePath)[ FD ]
Line_2 $$ private static List<String> getChildPathsFromFile(URL root) -->Line_4 $$ final File rootFile = new File(FileUtil.unquote(root.getPath()))[ FD ]
Line_5 $$ new Object() -->Line_11 $$ final String childRelativePath = prefix.length() == 0 ? file.getName() : prefix + URL_PATH_SEPARATOR + file.getName()[ FD ]
