Line_19 $$ ModelNode operation = new ModelNode()-->Line_35 $$ operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD)[ FD ]
Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_39 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_63 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_71 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_44 $$ operation.get(OP_ADDR).set(getSecurityRealmsAddressAuthentication())[ FD ]
Line_29 $$ URL resourcesUrl = tccl.getResource("")-->Line_30 $$ String resourcePath = resourcesUrl.getPath()[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_72 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_66 $$ operation.get(OP_ADDR).set(SSLRealmSetupTool.getRemotingConnectorAddress())[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_44 $$ operation.get(OP_ADDR).set(getSecurityRealmsAddressAuthentication())[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_57 $$ operation.get(OP_ADDR).add("https-listener", "testConnector")[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_60 $$ operation.get("security-realm").set(SECURITY_REALM_NAME)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_72 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_39 $$ result = managementClient.getControllerClient().execute(operation)-->Line_40 $$ log.infof("Setting server-identity ssl for realm %s (password %s, keystore path %s) with result %s", SECURITY_REALM_NAME, SERVER_KEYSTORE_PASSWORD, KEYSTORES_ABSOLUTE_PATH, result.get(OUTCOME))[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_61 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_49 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_72 $$ result = managementClient.getControllerClient().execute(operation)-->Line_73 $$ log.infof("Adding HTTPS connector", result)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_21 $$ operation.get(OP).set(ADD)[ FD ]
Line_39 $$ result = managementClient.getControllerClient().execute(operation)-->Line_73 $$ log.infof("Adding HTTPS connector", result)[ FD ]
Line_39 $$ result = managementClient.getControllerClient().execute(operation)-->Line_50 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_56 $$ operation.get(OP_ADDR).add("server", "default-server")[ FD ]
Line_39 $$ result = managementClient.getControllerClient().execute(operation)-->Line_41 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_37 $$ operation.get("keystore-path").set(KEYSTORES_ABSOLUTE_PATH + File.separator + SERVER_KEYSTORE_FILENAME)[ FD ]
Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_24 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_34 $$ operation.get(OP).set(ADD)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_59 $$ operation.get("enabled").set(true)[ FD ]
Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_73 $$ log.infof("Adding HTTPS connector", result)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_70 $$ operation.get("connector-ref").set("testConnector")[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_58 $$ operation.get("socket-binding").set("https")[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_60 $$ operation.get("security-realm").set(SECURITY_REALM_NAME)[ FD ]
Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_41 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_72 $$ result = managementClient.getControllerClient().execute(operation)-->Line_74 $$ Assert.assertEquals(result.toString(), SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_61 $$ result = managementClient.getControllerClient().execute(operation)-->Line_74 $$ Assert.assertEquals(result.toString(), SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_39 $$ result = managementClient.getControllerClient().execute(operation)-->Line_72 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_61 $$ result = managementClient.getControllerClient().execute(operation)-->Line_72 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_61 $$ result = managementClient.getControllerClient().execute(operation)-->Line_73 $$ log.infof("Adding HTTPS connector", result)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_57 $$ operation.get(OP_ADDR).add("https-listener", "testConnector")[ FD ]
Line_49 $$ result = managementClient.getControllerClient().execute(operation)-->Line_61 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_39 $$ result = managementClient.getControllerClient().execute(operation)-->Line_49 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_67 $$ operation.get(OP).set(ADD)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_46 $$ operation.get("keystore-path").set(resourcePath + "ejb3/ssl/jbossServer.keystore")[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_54 $$ operation.get(OP).set(ADD)[ FD ]
Line_49 $$ result = managementClient.getControllerClient().execute(operation)-->Line_63 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_39 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_38 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_38 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_49 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_49 $$ result = managementClient.getControllerClient().execute(operation)-->Line_72 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_23 $$ log.infof("Adding security realm %s with result %s", SECURITY_REALM_NAME, result)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_56 $$ operation.get(OP_ADDR).add("server", "default-server")[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_68 $$ operation.get(SECURITY_REALM).set(SECURITY_REALM_NAME)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_68 $$ operation.get(SECURITY_REALM).set(SECURITY_REALM_NAME)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_69 $$ operation.get(PROTOCOL).set("https-remoting")[ FD ]
Line_39 $$ result = managementClient.getControllerClient().execute(operation)-->Line_63 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_35 $$ operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_33 $$ operation.get(OP_ADDR).set(getSecurityRealmsAddressSSLIdentity())[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_61 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_39 $$ result = managementClient.getControllerClient().execute(operation)-->Line_61 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_70 $$ operation.get("connector-ref").set("testConnector")[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_67 $$ operation.get(OP).set(ADD)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_48 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_32 $$ operation = new ModelNode()[ FD ]
Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_49 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_59 $$ operation.get("enabled").set(true)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_45 $$ operation.get(OP).set(ADD)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_58 $$ operation.get("socket-binding").set("https")[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_47 $$ operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD)[ FD ]
Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_74 $$ Assert.assertEquals(result.toString(), SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_69 $$ operation.get(PROTOCOL).set("https-remoting")[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_39 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_47 $$ operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD)[ FD ]
Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_61 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_48 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_33 $$ operation.get(OP_ADDR).set(getSecurityRealmsAddressSSLIdentity())[ FD ]
Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_72 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_54 $$ operation.get(OP).set(ADD)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_34 $$ operation.get(OP).set(ADD)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_37 $$ operation.get("keystore-path").set(KEYSTORES_ABSOLUTE_PATH + File.separator + SERVER_KEYSTORE_FILENAME)[ FD ]
Line_49 $$ result = managementClient.getControllerClient().execute(operation)-->Line_73 $$ log.infof("Adding HTTPS connector", result)[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_66 $$ operation.get(OP_ADDR).set(SSLRealmSetupTool.getRemotingConnectorAddress())[ FD ]
Line_49 $$ result = managementClient.getControllerClient().execute(operation)-->Line_74 $$ Assert.assertEquals(result.toString(), SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_61 $$ result = managementClient.getControllerClient().execute(operation)-->Line_63 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_45 $$ operation.get(OP).set(ADD)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_20 $$ operation.get(OP_ADDR).set(secRealmAddress)[ FD ]
Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_50 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_55 $$ operation.get(OP_ADDR).add(SUBSYSTEM, "undertow")[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_55 $$ operation.get(OP_ADDR).add(SUBSYSTEM, "undertow")[ FD ]
Line_22 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_40 $$ log.infof("Setting server-identity ssl for realm %s (password %s, keystore path %s) with result %s", SECURITY_REALM_NAME, SERVER_KEYSTORE_PASSWORD, KEYSTORES_ABSOLUTE_PATH, result.get(OUTCOME))[ FD ]
Line_49 $$ result = managementClient.getControllerClient().execute(operation)-->Line_50 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_39 $$ result = managementClient.getControllerClient().execute(operation)-->Line_74 $$ Assert.assertEquals(result.toString(), SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_19 $$ ModelNode operation = new ModelNode()-->Line_46 $$ operation.get("keystore-path").set(resourcePath + "ejb3/ssl/jbossServer.keystore")[ FD ]
Line_32 $$ operation = new ModelNode()-->Line_71 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
