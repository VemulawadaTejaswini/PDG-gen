Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_40 $$ operation.get("security-realm").set(SECURITY_REALM_NAME)[ CD ]
Line_44 $$ operation = new ModelNode()-->Line_46 $$ operation.get(OP).set(ADD)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_6 $$ operation.get(OP_ADDR).set(secRealmAddress)[ CD ]
Line_41 $$ result = managementClient.getControllerClient().execute(operation)-->Line_53 $$ Assert.assertEquals(result.toString(), SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_17 $$ operation.get(OP).set(ADD)[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_29 $$ operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD)[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_48 $$ operation.get(PROTOCOL).set("https-remoting")[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_49 $$ operation.get("connector-ref").set("testConnector")[ FD ]
Line_22 $$ result = managementClient.getControllerClient().execute(operation)-->Line_53 $$ Assert.assertEquals(result.toString(), SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_7 $$ operation.get(OP).set(ADD)[ FD ]
Line_44 $$ operation = new ModelNode()-->Line_45 $$ operation.get(OP_ADDR).set(SSLRealmSetupTool.getRemotingConnectorAddress())[ FD ]
Line_41 $$ result = managementClient.getControllerClient().execute(operation)-->Line_51 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_46 $$ operation.get(OP).set(ADD)[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_22 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_31 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_48 $$ operation.get(PROTOCOL).set("https-remoting")[ FD ]
Line_41 $$ result = managementClient.getControllerClient().execute(operation)-->Line_52 $$ log.infof("Adding HTTPS connector", result)[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_15 $$ operation = new ModelNode()[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_21 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_26 $$ operation.get(OP_ADDR).set(getSecurityRealmsAddressAuthentication())[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_28 $$ operation.get("keystore-path").set(resourcePath + "ejb3/ssl/jbossServer.keystore")[ FD ]
Line_51 $$ result = managementClient.getControllerClient().execute(operation)-->Line_52 $$ log.infof("Adding HTTPS connector", result)[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_35 $$ operation.get(OP_ADDR).add(SUBSYSTEM, "undertow")[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_40 $$ operation.get("security-realm").set(SECURITY_REALM_NAME)[ FD ]
Line_44 $$ operation = new ModelNode()-->Line_47 $$ operation.get(SECURITY_REALM).set(SECURITY_REALM_NAME)[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_36 $$ operation.get(OP_ADDR).add("server", "default-server")[ FD ]
Line_44 $$ operation = new ModelNode()-->Line_48 $$ operation.get(PROTOCOL).set("https-remoting")[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_30 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_35 $$ operation.get(OP_ADDR).add(SUBSYSTEM, "undertow")[ CD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_29 $$ operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD)[ CD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_44 $$ operation = new ModelNode()[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_17 $$ operation.get(OP).set(ADD)[ FD ]
Line_22 $$ result = managementClient.getControllerClient().execute(operation)-->Line_32 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_41 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_47 $$ operation.get(SECURITY_REALM).set(SECURITY_REALM_NAME)[ CD ]
Line_25 $$ operation = new ModelNode()-->Line_47 $$ operation.get(SECURITY_REALM).set(SECURITY_REALM_NAME)[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_44 $$ operation = new ModelNode()[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_13 $$ String resourcePath = resourcesUrl.getPath()[ CD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_20 $$ operation.get("keystore-path").set(KEYSTORES_ABSOLUTE_PATH + File.separator + SERVER_KEYSTORE_FILENAME)[ CD ]
Line_22 $$ result = managementClient.getControllerClient().execute(operation)-->Line_43 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_47 $$ operation.get(SECURITY_REALM).set(SECURITY_REALM_NAME)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_31 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_22 $$ result = managementClient.getControllerClient().execute(operation)-->Line_52 $$ log.infof("Adding HTTPS connector", result)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_53 $$ Assert.assertEquals(result.toString(), SUCCESS, result.get(OUTCOME).asString())[ CD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_51 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_31 $$ result = managementClient.getControllerClient().execute(operation)-->Line_32 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_51 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_41 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_16 $$ operation.get(OP_ADDR).set(getSecurityRealmsAddressSSLIdentity())[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_33 $$ operation = new ModelNode()[ CD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_48 $$ operation.get(PROTOCOL).set("https-remoting")[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_26 $$ operation.get(OP_ADDR).set(getSecurityRealmsAddressAuthentication())[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_45 $$ operation.get(OP_ADDR).set(SSLRealmSetupTool.getRemotingConnectorAddress())[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_41 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_30 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_31 $$ result = managementClient.getControllerClient().execute(operation)-->Line_52 $$ log.infof("Adding HTTPS connector", result)[ FD ]
Line_31 $$ result = managementClient.getControllerClient().execute(operation)-->Line_51 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_28 $$ operation.get("keystore-path").set(resourcePath + "ejb3/ssl/jbossServer.keystore")[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_34 $$ operation.get(OP).set(ADD)[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_37 $$ operation.get(OP_ADDR).add("https-listener", "testConnector")[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_44 $$ operation = new ModelNode()[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_31 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_5 $$ ModelNode operation = new ModelNode()[ CD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_43 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ CD ]
Line_33 $$ operation = new ModelNode()-->Line_51 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_28 $$ operation.get("keystore-path").set(resourcePath + "ejb3/ssl/jbossServer.keystore")[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_46 $$ operation.get(OP).set(ADD)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)[ CD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_22 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_15 $$ operation = new ModelNode()[ CD ]
Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_43 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_10 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ CD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_22 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_49 $$ operation.get("connector-ref").set("testConnector")[ CD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_11 $$ ClassLoader tccl = Thread.currentThread().getContextClassLoader()[ CD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_38 $$ operation.get("socket-binding").set("https")[ FD ]
Line_22 $$ result = managementClient.getControllerClient().execute(operation)-->Line_31 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_38 $$ operation.get("socket-binding").set("https")[ FD ]
Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_24 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_51 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_44 $$ operation = new ModelNode()-->Line_51 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_9 $$ log.infof("Adding security realm %s with result %s", SECURITY_REALM_NAME, result)[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_39 $$ operation.get("enabled").set(true)[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_50 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_31 $$ result = managementClient.getControllerClient().execute(operation)-->Line_53 $$ Assert.assertEquals(result.toString(), SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_32 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_33 $$ operation = new ModelNode()[ FD ]
Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_31 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_27 $$ operation.get(OP).set(ADD)[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_47 $$ operation.get(SECURITY_REALM).set(SECURITY_REALM_NAME)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_30 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_31 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_9 $$ log.infof("Adding security realm %s with result %s", SECURITY_REALM_NAME, result)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_51 $$ result = managementClient.getControllerClient().execute(operation)[ CD ]
Line_22 $$ result = managementClient.getControllerClient().execute(operation)-->Line_51 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_51 $$ result = managementClient.getControllerClient().execute(operation)-->Line_53 $$ Assert.assertEquals(result.toString(), SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_25 $$ operation = new ModelNode()[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_49 $$ operation.get("connector-ref").set("testConnector")[ FD ]
Line_41 $$ result = managementClient.getControllerClient().execute(operation)-->Line_43 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_45 $$ operation.get(OP_ADDR).set(SSLRealmSetupTool.getRemotingConnectorAddress())[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_20 $$ operation.get("keystore-path").set(KEYSTORES_ABSOLUTE_PATH + File.separator + SERVER_KEYSTORE_FILENAME)[ FD ]
Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_10 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_23 $$ log.infof("Setting server-identity ssl for realm %s (password %s, keystore path %s) with result %s", SECURITY_REALM_NAME, SERVER_KEYSTORE_PASSWORD, KEYSTORES_ABSOLUTE_PATH, result.get(OUTCOME))[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_36 $$ operation.get(OP_ADDR).add("server", "default-server")[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_33 $$ operation = new ModelNode()[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_34 $$ operation.get(OP).set(ADD)[ CD ]
Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_22 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_40 $$ operation.get("security-realm").set(SECURITY_REALM_NAME)[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_36 $$ operation.get(OP_ADDR).add("server", "default-server")[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_41 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_48 $$ operation.get(PROTOCOL).set("https-remoting")[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_36 $$ operation.get(OP_ADDR).add("server", "default-server")[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_25 $$ operation = new ModelNode()[ CD ]
Line_44 $$ operation = new ModelNode()-->Line_50 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_12 $$ URL resourcesUrl = tccl.getResource("")[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_37 $$ operation.get(OP_ADDR).add("https-listener", "testConnector")[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_45 $$ operation.get(OP_ADDR).set(SSLRealmSetupTool.getRemotingConnectorAddress())[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_49 $$ operation.get("connector-ref").set("testConnector")[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_39 $$ operation.get("enabled").set(true)[ CD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_17 $$ operation.get(OP).set(ADD)[ CD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_52 $$ log.infof("Adding HTTPS connector", result)[ CD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_45 $$ operation.get(OP_ADDR).set(SSLRealmSetupTool.getRemotingConnectorAddress())[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_21 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_35 $$ operation.get(OP_ADDR).add(SUBSYSTEM, "undertow")[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_50 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_37 $$ operation.get(OP_ADDR).add("https-listener", "testConnector")[ CD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_4 $$ secRealmAddress.protect()[ CD ]
Line_25 $$ operation = new ModelNode()-->Line_28 $$ operation.get("keystore-path").set(resourcePath + "ejb3/ssl/jbossServer.keystore")[ FD ]
Line_22 $$ result = managementClient.getControllerClient().execute(operation)-->Line_23 $$ log.infof("Setting server-identity ssl for realm %s (password %s, keystore path %s) with result %s", SECURITY_REALM_NAME, SERVER_KEYSTORE_PASSWORD, KEYSTORES_ABSOLUTE_PATH, result.get(OUTCOME))[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_18 $$ operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_3 $$ ModelNode secRealmAddress = getSecurityRealmsAddress()[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_18 $$ operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD)[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_40 $$ operation.get("security-realm").set(SECURITY_REALM_NAME)[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_35 $$ operation.get(OP_ADDR).add(SUBSYSTEM, "undertow")[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_29 $$ operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD)[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_38 $$ operation.get("socket-binding").set("https")[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_3 $$ ModelNode secRealmAddress = getSecurityRealmsAddress()-->Line_6 $$ operation.get(OP_ADDR).set(secRealmAddress)[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_34 $$ operation.get(OP).set(ADD)[ FD ]
Line_12 $$ URL resourcesUrl = tccl.getResource("")-->Line_13 $$ String resourcePath = resourcesUrl.getPath()[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_33 $$ operation = new ModelNode()[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_20 $$ operation.get("keystore-path").set(KEYSTORES_ABSOLUTE_PATH + File.separator + SERVER_KEYSTORE_FILENAME)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_23 $$ log.infof("Setting server-identity ssl for realm %s (password %s, keystore path %s) with result %s", SECURITY_REALM_NAME, SERVER_KEYSTORE_PASSWORD, KEYSTORES_ABSOLUTE_PATH, result.get(OUTCOME))[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_34 $$ operation.get(OP).set(ADD)[ FD ]
Line_44 $$ operation = new ModelNode()-->Line_49 $$ operation.get("connector-ref").set("testConnector")[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_39 $$ operation.get("enabled").set(true)[ FD ]
Line_31 $$ result = managementClient.getControllerClient().execute(operation)-->Line_43 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_41 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_48 $$ operation.get(PROTOCOL).set("https-remoting")[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_41 $$ result = managementClient.getControllerClient().execute(operation)[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_16 $$ operation.get(OP_ADDR).set(getSecurityRealmsAddressSSLIdentity())[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_27 $$ operation.get(OP).set(ADD)[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_44 $$ operation = new ModelNode()[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_47 $$ operation.get(SECURITY_REALM).set(SECURITY_REALM_NAME)[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_46 $$ operation.get(OP).set(ADD)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_42 $$ log.info("creating connector result " + result)[ CD ]
Line_25 $$ operation = new ModelNode()-->Line_34 $$ operation.get(OP).set(ADD)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_22 $$ result = managementClient.getControllerClient().execute(operation)[ CD ]
Line_33 $$ operation = new ModelNode()-->Line_35 $$ operation.get(OP_ADDR).add(SUBSYSTEM, "undertow")[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_40 $$ operation.get("security-realm").set(SECURITY_REALM_NAME)[ FD ]
Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_53 $$ Assert.assertEquals(result.toString(), SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_38 $$ operation.get("socket-binding").set("https")[ CD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_44 $$ operation = new ModelNode()[ CD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_21 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ CD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_6 $$ operation.get(OP_ADDR).set(secRealmAddress)[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_49 $$ operation.get("connector-ref").set("testConnector")[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_18 $$ operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD)[ CD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_51 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_25 $$ operation = new ModelNode()-->Line_37 $$ operation.get(OP_ADDR).add("https-listener", "testConnector")[ FD ]
Line_15 $$ operation = new ModelNode()-->Line_25 $$ operation = new ModelNode()[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_36 $$ operation.get(OP_ADDR).add("server", "default-server")[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_26 $$ operation.get(OP_ADDR).set(getSecurityRealmsAddressAuthentication())[ FD ]
Line_31 $$ result = managementClient.getControllerClient().execute(operation)-->Line_41 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_52 $$ log.infof("Adding HTTPS connector", result)[ FD ]
Line_8 $$ ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_32 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_16 $$ operation.get(OP_ADDR).set(getSecurityRealmsAddressSSLIdentity())[ CD ]
Line_22 $$ result = managementClient.getControllerClient().execute(operation)-->Line_24 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_26 $$ operation.get(OP_ADDR).set(getSecurityRealmsAddressAuthentication())[ CD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_29 $$ operation.get("keystore-password").set(SERVER_KEYSTORE_PASSWORD)[ FD ]
Line_3 $$ ModelNode secRealmAddress = getSecurityRealmsAddress()-->Line_4 $$ secRealmAddress.protect()[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_50 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_39 $$ operation.get("enabled").set(true)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_50 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ CD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_24 $$ Assert.assertEquals(SUCCESS, result.get(OUTCOME).asString())[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_38 $$ operation.get("socket-binding").set("https")[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_45 $$ operation.get(OP_ADDR).set(SSLRealmSetupTool.getRemotingConnectorAddress())[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_41 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_27 $$ operation.get(OP).set(ADD)[ CD ]
Line_15 $$ operation = new ModelNode()-->Line_51 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_14 $$ log.info("Path to resources is " + resourcePath)[ CD ]
Line_11 $$ ClassLoader tccl = Thread.currentThread().getContextClassLoader()-->Line_12 $$ URL resourcesUrl = tccl.getResource("")[ FD ]
Line_22 $$ result = managementClient.getControllerClient().execute(operation)-->Line_41 $$ result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_46 $$ operation.get(OP).set(ADD)[ CD ]
Line_25 $$ operation = new ModelNode()-->Line_50 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_46 $$ operation.get(OP).set(ADD)[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_27 $$ operation.get(OP).set(ADD)[ FD ]
Line_33 $$ operation = new ModelNode()-->Line_37 $$ operation.get(OP_ADDR).add("https-listener", "testConnector")[ FD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_30 $$ operation.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_7 $$ operation.get(OP).set(ADD)[ CD ]
Line_2 $$ public static void setup(final ManagementClient managementClient) throws Exception -->Line_31 $$ result = managementClient.getControllerClient().execute(operation)[ CD ]
Line_5 $$ ModelNode operation = new ModelNode()-->Line_39 $$ operation.get("enabled").set(true)[ FD ]
