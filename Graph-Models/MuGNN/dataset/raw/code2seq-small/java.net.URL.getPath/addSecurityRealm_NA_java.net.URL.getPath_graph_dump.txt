Line_15 $$ final ModelNode addOp = createOpNode("core-service=management/security-realm=" + SECURITY_REALM_NAME, ADD)-->Line_16 $$ addOp.get(OPERATION_HEADERS, ROLLBACK_ON_RUNTIME_FAILURE).set(false)[ FD ]
Line_19 $$ final ModelNode addSslIdentityOp = createOpNode("core-service=management/security-realm=" + SECURITY_REALM_NAME + "/server-identity=ssl", ADD)-->Line_20 $$ addSslIdentityOp.get("keystore-path").set(WSTrustTestCaseSecuritySetupTask.class.getResource("test.keystore").getPath())[ FD ]
Line_19 $$ final ModelNode addSslIdentityOp = createOpNode("core-service=management/security-realm=" + SECURITY_REALM_NAME + "/server-identity=ssl", ADD)-->Line_22 $$ addSslIdentityOp.get("alias").set("tomcat")[ FD ]
Line_19 $$ final ModelNode addSslIdentityOp = createOpNode("core-service=management/security-realm=" + SECURITY_REALM_NAME + "/server-identity=ssl", ADD)-->Line_21 $$ addSslIdentityOp.get("keystore-password").set("changeit")[ FD ]
Line_19 $$ final ModelNode addSslIdentityOp = createOpNode("core-service=management/security-realm=" + SECURITY_REALM_NAME + "/server-identity=ssl", ADD)-->Line_25 $$ CoreUtils.applyUpdate(addSslIdentityOp, managementClient.getControllerClient())[ FD ]
Line_15 $$ final ModelNode addOp = createOpNode("core-service=management/security-realm=" + SECURITY_REALM_NAME, ADD)-->Line_18 $$ CoreUtils.applyUpdate(addOp, managementClient.getControllerClient())[ FD ]
Line_19 $$ final ModelNode addSslIdentityOp = createOpNode("core-service=management/security-realm=" + SECURITY_REALM_NAME + "/server-identity=ssl", ADD)-->Line_24 $$ addSslIdentityOp.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_19 $$ final ModelNode addSslIdentityOp = createOpNode("core-service=management/security-realm=" + SECURITY_REALM_NAME + "/server-identity=ssl", ADD)-->Line_23 $$ addSslIdentityOp.get(OPERATION_HEADERS, ROLLBACK_ON_RUNTIME_FAILURE).set(false)[ FD ]
Line_15 $$ final ModelNode addOp = createOpNode("core-service=management/security-realm=" + SECURITY_REALM_NAME, ADD)-->Line_17 $$ addOp.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
