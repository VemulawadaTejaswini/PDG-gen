Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_15 $$ JPA_LOGGER.tracef("No classes to scan for annotations in jar '%s' (jars with classes '%s')", jarToScan, pu.getAnnotationIndex().keySet())[ FD ]
Line_33 $$ String className = annotationInstance.target().toString()-->Line_42 $$ JPA_LOGGER.cannotLoadEntityClass(e, className)[ FD ]
Line_14 $$ if (index == null) -->Line_15 $$ JPA_LOGGER.tracef("No classes to scan for annotations in jar '%s' (jars with classes '%s')", jarToScan, pu.getAnnotationIndex().keySet())[ CD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_9 $$ if (pu == null) [ FD ]
Line_12 $$ if (pu.getAnnotationIndex() != null) -->Line_18 $$ if (annotationsToLookFor == null) [ CD ]
Line_28 $$ Set<Class<?>> classesForAnnotation = new HashSet<Class<?>>()-->Line_46 $$ cacheClasses(pu, jarToScan, annClass, classesForAnnotation)[ FD ]
Line_12 $$ if (pu.getAnnotationIndex() != null) -->Line_21 $$ if (annotationsToLookFor.size() == 0) [ CD ]
Line_25 $$ for (Class<? extends Annotation> annClass : annotationsToLookFor) -->Line_35 $$ JPA_LOGGER.tracef("getClassesInJar found class %s with annotation %s", className, annClass.getName())[ FD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_46 $$ cacheClasses(pu, jarToScan, annClass, classesForAnnotation)[ FD ]
Line_25 $$ for (Class<? extends Annotation> annClass : annotationsToLookFor) -->Line_26 $$ DotName annotation = DotName.createSimple(annClass.getName())[ FD ]
Line_12 $$ if (pu.getAnnotationIndex() != null) -->Line_50 $$ return getCachedClasses(pu, jarToScan, annotationsToLookFor)[ CD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_13 $$ Index index = getJarFileIndex(jarToScan, pu)[ FD ]
Line_12 $$ if (pu.getAnnotationIndex() != null) -->Line_14 $$ if (index == null) [ CD ]
Line_36 $$ Class<?> clazz = pu.getNewTempClassLoader().loadClass(className)-->Line_37 $$ result.add(clazz)[ FD ]
Line_25 $$ for (Class<? extends Annotation> annClass : annotationsToLookFor) -->Line_46 $$ cacheClasses(pu, jarToScan, annClass, classesForAnnotation)[ FD ]
Line_13 $$ Index index = getJarFileIndex(jarToScan, pu)-->Line_27 $$ List<AnnotationInstance> classesWithAnnotation = index.getAnnotations(annotation)[ FD ]
Line_26 $$ DotName annotation = DotName.createSimple(annClass.getName())-->Line_27 $$ List<AnnotationInstance> classesWithAnnotation = index.getAnnotations(annotation)[ FD ]
Line_13 $$ Index index = getJarFileIndex(jarToScan, pu)-->Line_14 $$ if (index == null) [ FD ]
Line_33 $$ String className = annotationInstance.target().toString()-->Line_36 $$ Class<?> clazz = pu.getNewTempClassLoader().loadClass(className)[ FD ]
Line_14 $$ if (index == null) -->Line_16 $$ return new HashSet<Class<?>>()[ CD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_50 $$ return getCachedClasses(pu, jarToScan, annotationsToLookFor)[ FD ]
Line_12 $$ if (pu.getAnnotationIndex() != null) -->Line_24 $$ Set<Class<?>> result = new HashSet<Class<?>>()[ CD ]
Line_24 $$ Set<Class<?>> result = new HashSet<Class<?>>()-->Line_37 $$ result.add(clazz)[ FD ]
Line_28 $$ Set<Class<?>> classesForAnnotation = new HashSet<Class<?>>()-->Line_38 $$ classesForAnnotation.add(clazz)[ FD ]
Line_36 $$ Class<?> clazz = pu.getNewTempClassLoader().loadClass(className)-->Line_38 $$ classesForAnnotation.add(clazz)[ FD ]
Line_29 $$ for (AnnotationInstance annotationInstance : classesWithAnnotation) -->Line_33 $$ String className = annotationInstance.target().toString()[ FD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_36 $$ Class<?> clazz = pu.getNewTempClassLoader().loadClass(className)[ FD ]
Line_12 $$ if (pu.getAnnotationIndex() != null) -->Line_48 $$ return result[ CD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_12 $$ if (pu.getAnnotationIndex() != null) [ FD ]
Line_12 $$ if (pu.getAnnotationIndex() != null) -->Line_13 $$ Index index = getJarFileIndex(jarToScan, pu)[ CD ]
Line_33 $$ String className = annotationInstance.target().toString()-->Line_40 $$ JPA_LOGGER.cannotLoadEntityClass(e, className)[ FD ]
Line_33 $$ String className = annotationInstance.target().toString()-->Line_35 $$ JPA_LOGGER.tracef("getClassesInJar found class %s with annotation %s", className, annClass.getName())[ FD ]
