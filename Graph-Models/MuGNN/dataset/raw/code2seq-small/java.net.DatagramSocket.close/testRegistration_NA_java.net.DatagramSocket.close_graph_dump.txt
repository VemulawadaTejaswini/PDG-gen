Line_2 $$ public void testRegistration() throws IOException, InterruptedException -->Line_7 $$ byte[] reqBuf = req.getBytes()[ CD ]
Line_8 $$ DatagramSocket s = new DatagramSocket()-->Line_13 $$ s.close()[ FD ]
Line_5 $$ PortmapMapping sent = new PortmapMapping(90000, 1, PortmapMapping.TRANSPORT_TCP, 1234)-->Line_19 $$ if (m.getPort() == sent.getPort() && PortmapMapping.key(m).equals(PortmapMapping.key(sent))) [ FD ]
Line_2 $$ public void testRegistration() throws IOException, InterruptedException -->Line_17 $$ Map<String, PortmapMapping> map = (Map<String, PortmapMapping>) Whitebox.getInternalState(pm.getHandler(), "map")[ CD ]
Line_2 $$ public void testRegistration() throws IOException, InterruptedException -->Line_8 $$ DatagramSocket s = new DatagramSocket()[ CD ]
Line_19 $$ if (m.getPort() == sent.getPort() && PortmapMapping.key(m).equals(PortmapMapping.key(sent))) -->Line_20 $$ found = true[ CD ]
Line_8 $$ DatagramSocket s = new DatagramSocket()-->Line_11 $$ s.send(p)[ FD ]
Line_3 $$ XDR req = new XDR()-->Line_7 $$ byte[] reqBuf = req.getBytes()[ FD ]
Line_16 $$ boolean found = false-->Line_24 $$ Assert.assertTrue("Registration failed", found)[ FD ]
Line_2 $$ public void testRegistration() throws IOException, InterruptedException -->Line_15 $$ Thread.sleep(100)[ CD ]
Line_2 $$ public void testRegistration() throws IOException, InterruptedException -->Line_6 $$ sent.serialize(req)[ CD ]
Line_3 $$ XDR req = new XDR()-->Line_6 $$ sent.serialize(req)[ FD ]
Line_16 $$ boolean found = false-->Line_20 $$ found = true[ FD ]
Line_9 $$ DatagramPacket p = new DatagramPacket(reqBuf, reqBuf.length, pm.getUdpServerLoAddress())-->Line_11 $$ s.send(p)[ FD ]
Line_2 $$ public void testRegistration() throws IOException, InterruptedException -->Line_3 $$ XDR req = new XDR()[ CD ]
Line_5 $$ PortmapMapping sent = new PortmapMapping(90000, 1, PortmapMapping.TRANSPORT_TCP, 1234)-->Line_6 $$ sent.serialize(req)[ FD ]
Line_3 $$ XDR req = new XDR()-->Line_4 $$ RpcCall.getInstance(++xid, RpcProgramPortmap.PROGRAM, RpcProgramPortmap.VERSION, RpcProgramPortmap.PMAPPROC_SET, new CredentialsNone(), new VerifierNone()).write(req)[ FD ]
Line_18 $$ for (PortmapMapping m : map.values()) -->Line_19 $$ if (m.getPort() == sent.getPort() && PortmapMapping.key(m).equals(PortmapMapping.key(sent))) [ FD ]
Line_2 $$ public void testRegistration() throws IOException, InterruptedException -->Line_4 $$ RpcCall.getInstance(++xid, RpcProgramPortmap.PROGRAM, RpcProgramPortmap.VERSION, RpcProgramPortmap.PMAPPROC_SET, new CredentialsNone(), new VerifierNone()).write(req)[ CD ]
Line_2 $$ public void testRegistration() throws IOException, InterruptedException -->Line_9 $$ DatagramPacket p = new DatagramPacket(reqBuf, reqBuf.length, pm.getUdpServerLoAddress())[ CD ]
Line_20 $$ found = true-->Line_24 $$ Assert.assertTrue("Registration failed", found)[ FD ]
Line_17 $$ Map<String, PortmapMapping> map = (Map<String, PortmapMapping>) Whitebox.getInternalState(pm.getHandler(), "map")-->Line_18 $$ for (PortmapMapping m : map.values()) [ FD ]
Line_2 $$ public void testRegistration() throws IOException, InterruptedException -->Line_24 $$ Assert.assertTrue("Registration failed", found)[ CD ]
Line_2 $$ public void testRegistration() throws IOException, InterruptedException -->Line_16 $$ boolean found = false[ CD ]
Line_2 $$ public void testRegistration() throws IOException, InterruptedException -->Line_5 $$ PortmapMapping sent = new PortmapMapping(90000, 1, PortmapMapping.TRANSPORT_TCP, 1234)[ CD ]
