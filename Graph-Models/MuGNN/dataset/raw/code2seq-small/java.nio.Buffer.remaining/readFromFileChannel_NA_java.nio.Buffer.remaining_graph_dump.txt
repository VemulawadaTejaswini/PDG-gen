Line_3 $$ if (dest.isDirect() || (dest.remaining() < READ_CHUNK_SIZE)) -->Line_24 $$ return bytesRead[ CD ]
Line_2 $$ public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException -->Line_8 $$ ByteBuffer tmpBuffer = dest.duplicate()[ FD ]
Line_8 $$ ByteBuffer tmpBuffer = dest.duplicate()-->Line_11 $$ tmpBuffer.limit(Math.min(dest.limit(), tmpBuffer.position() + READ_CHUNK_SIZE))[ FD ]
Line_3 $$ if (dest.isDirect() || (dest.remaining() < READ_CHUNK_SIZE)) -->Line_7 $$ int bytesToRead = dest.remaining()[ CD ]
Line_2 $$ public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException -->Line_18 $$ dest.position(tmpBuffer.position())[ FD ]
Line_2 $$ public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException -->Line_21 $$ dest.position(tmpBuffer.position())[ FD ]
Line_2 $$ public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException -->Line_12 $$ int read = readSingleChunk(channel, channelPosition, tmpBuffer)[ FD ]
Line_10 $$ while (dest.hasRemaining()) -->Line_12 $$ int read = readSingleChunk(channel, channelPosition, tmpBuffer)[ CD ]
Line_17 $$ channelPosition += read-->Line_12 $$ int read = readSingleChunk(channel, channelPosition, tmpBuffer)[ FD ]
Line_2 $$ public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException -->Line_17 $$ channelPosition += read[ FD ]
Line_12 $$ int read = readSingleChunk(channel, channelPosition, tmpBuffer)-->Line_13 $$ if (read < 0) [ FD ]
Line_2 $$ public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException -->Line_4 $$ return readSingleChunk(channel, channelPosition, dest)[ FD ]
Line_3 $$ if (dest.isDirect() || (dest.remaining() < READ_CHUNK_SIZE)) -->Line_8 $$ ByteBuffer tmpBuffer = dest.duplicate()[ CD ]
Line_6 $$ int bytesRead = 0-->Line_16 $$ bytesRead += read[ FD ]
Line_10 $$ while (dest.hasRemaining()) -->Line_17 $$ channelPosition += read[ CD ]
Line_12 $$ int read = readSingleChunk(channel, channelPosition, tmpBuffer)-->Line_16 $$ bytesRead += read[ FD ]
Line_3 $$ if (dest.isDirect() || (dest.remaining() < READ_CHUNK_SIZE)) -->Line_4 $$ return readSingleChunk(channel, channelPosition, dest)[ CD ]
Line_8 $$ ByteBuffer tmpBuffer = dest.duplicate()-->Line_21 $$ dest.position(tmpBuffer.position())[ FD ]
Line_10 $$ while (dest.hasRemaining()) -->Line_11 $$ tmpBuffer.limit(Math.min(dest.limit(), tmpBuffer.position() + READ_CHUNK_SIZE))[ CD ]
Line_2 $$ public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException -->Line_11 $$ tmpBuffer.limit(Math.min(dest.limit(), tmpBuffer.position() + READ_CHUNK_SIZE))[ FD ]
Line_2 $$ public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException -->Line_3 $$ if (dest.isDirect() || (dest.remaining() < READ_CHUNK_SIZE)) [ FD ]
Line_2 $$ public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException -->Line_7 $$ int bytesToRead = dest.remaining()[ FD ]
Line_10 $$ while (dest.hasRemaining()) -->Line_18 $$ dest.position(tmpBuffer.position())[ CD ]
Line_12 $$ int read = readSingleChunk(channel, channelPosition, tmpBuffer)-->Line_17 $$ channelPosition += read[ FD ]
Line_8 $$ ByteBuffer tmpBuffer = dest.duplicate()-->Line_18 $$ dest.position(tmpBuffer.position())[ FD ]
Line_3 $$ if (dest.isDirect() || (dest.remaining() < READ_CHUNK_SIZE)) -->Line_6 $$ int bytesRead = 0[ CD ]
Line_2 $$ public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException -->Line_10 $$ while (dest.hasRemaining()) [ FD ]
Line_10 $$ while (dest.hasRemaining()) -->Line_13 $$ if (read < 0) [ CD ]
Line_2 $$ public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException -->Line_3 $$ if (dest.isDirect() || (dest.remaining() < READ_CHUNK_SIZE)) [ CD ]
Line_10 $$ while (dest.hasRemaining()) -->Line_16 $$ bytesRead += read[ CD ]
Line_13 $$ if (read < 0) -->Line_14 $$ return read[ CD ]
Line_8 $$ ByteBuffer tmpBuffer = dest.duplicate()-->Line_12 $$ int read = readSingleChunk(channel, channelPosition, tmpBuffer)[ FD ]
