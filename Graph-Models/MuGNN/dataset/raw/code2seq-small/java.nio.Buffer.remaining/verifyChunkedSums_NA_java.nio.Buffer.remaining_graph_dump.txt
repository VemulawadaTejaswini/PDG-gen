Line_19 $$ while (data.remaining() > 0) -->Line_23 $$ summer.reset()[ CD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_6 $$ verifyChunkedSums(data.array(), data.arrayOffset() + data.position(), data.remaining(), checksums.array(), checksums.arrayOffset() + checksums.position(), fileName, basePos)[ FD ]
Line_19 $$ while (data.remaining() > 0) -->Line_24 $$ summer.update(buf, 0, n)[ CD ]
Line_17 $$ byte[] buf = new byte[bytesPerChecksum]-->Line_24 $$ summer.update(buf, 0, n)[ FD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_9 $$ if (NativeCrc32.isAvailable()) [ CD ]
Line_20 $$ int n = Math.min(data.remaining(), bytesPerChecksum)-->Line_24 $$ summer.update(buf, 0, n)[ FD ]
Line_18 $$ byte[] sum = new byte[type.size]-->Line_21 $$ checksums.get(sum)[ FD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_15 $$ checksums.mark()[ FD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_28 $$ long errPos = basePos + data.position() - startDataPos - n[ FD ]
Line_19 $$ while (data.remaining() > 0) -->Line_27 $$ if (calculated != stored) [ CD ]
Line_3 $$ if (type.size == 0)-->Line_4 $$ return[ CD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_15 $$ checksums.mark()[ CD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_34 $$ checksums.reset()[ FD ]
Line_9 $$ if (NativeCrc32.isAvailable()) -->Line_10 $$ NativeCrc32.verifyChunkedSums(bytesPerChecksum, type.id, checksums, data, fileName, basePos)[ CD ]
Line_20 $$ int n = Math.min(data.remaining(), bytesPerChecksum)-->Line_22 $$ data.get(buf, 0, n)[ FD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_10 $$ NativeCrc32.verifyChunkedSums(bytesPerChecksum, type.id, checksums, data, fileName, basePos)[ FD ]
Line_5 $$ if (data.hasArray() && checksums.hasArray()) -->Line_7 $$ return[ CD ]
Line_19 $$ while (data.remaining() > 0) -->Line_21 $$ checksums.get(sum)[ CD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_20 $$ int n = Math.min(data.remaining(), bytesPerChecksum)[ FD ]
Line_9 $$ if (NativeCrc32.isAvailable()) -->Line_11 $$ return[ CD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_19 $$ while (data.remaining() > 0) [ FD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_14 $$ data.mark()[ FD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_5 $$ if (data.hasArray() && checksums.hasArray()) [ CD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_33 $$ data.reset()[ FD ]
Line_19 $$ while (data.remaining() > 0) -->Line_22 $$ data.get(buf, 0, n)[ CD ]
Line_5 $$ if (data.hasArray() && checksums.hasArray()) -->Line_6 $$ verifyChunkedSums(data.array(), data.arrayOffset() + data.position(), data.remaining(), checksums.array(), checksums.arrayOffset() + checksums.position(), fileName, basePos)[ CD ]
Line_25 $$ int calculated = (int) summer.getValue()-->Line_27 $$ if (calculated != stored) [ FD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_3 $$ if (type.size == 0)[ CD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_13 $$ int startDataPos = data.position()[ FD ]
Line_19 $$ while (data.remaining() > 0) -->Line_20 $$ int n = Math.min(data.remaining(), bytesPerChecksum)[ CD ]
Line_19 $$ while (data.remaining() > 0) -->Line_26 $$ int stored = (sum[0] << 24 & 0xff000000) | (sum[1] << 16 & 0xff0000) | (sum[2] << 8 & 0xff00) | sum[3] & 0xff[ CD ]
Line_26 $$ int stored = (sum[0] << 24 & 0xff000000) | (sum[1] << 16 & 0xff0000) | (sum[2] << 8 & 0xff00) | sum[3] & 0xff-->Line_27 $$ if (calculated != stored) [ FD ]
Line_27 $$ if (calculated != stored) -->Line_28 $$ long errPos = basePos + data.position() - startDataPos - n[ CD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_5 $$ if (data.hasArray() && checksums.hasArray()) [ FD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_21 $$ checksums.get(sum)[ FD ]
Line_17 $$ byte[] buf = new byte[bytesPerChecksum]-->Line_22 $$ data.get(buf, 0, n)[ FD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_13 $$ int startDataPos = data.position()[ CD ]
Line_19 $$ while (data.remaining() > 0) -->Line_25 $$ int calculated = (int) summer.getValue()[ CD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_14 $$ data.mark()[ CD ]
Line_2 $$ public void verifyChunkedSums(ByteBuffer data, ByteBuffer checksums, String fileName, long basePos) throws ChecksumException -->Line_22 $$ data.get(buf, 0, n)[ FD ]
