Line_8 $$ while (true) -->Line_20 $$ count = channelRead(ch, unwrappedData)[ CD ]
Line_11 $$ count = channelRead(ch, unwrappedDataLengthBuffer)-->Line_20 $$ count = channelRead(ch, unwrappedData)[ FD ]
Line_10 $$ if (unwrappedDataLengthBuffer.remaining() > 0) -->Line_11 $$ count = channelRead(ch, unwrappedDataLengthBuffer)[ CD ]
Line_7 $$ ReadableByteChannel ch = Channels.newChannel(new ByteArrayInputStream(inBuf))-->Line_11 $$ count = channelRead(ch, unwrappedDataLengthBuffer)[ FD ]
Line_23 $$ if (unwrappedData.remaining() == 0) -->Line_26 $$ processOneRpc(unwrappedData.array())[ CD ]
Line_2 $$ private void unwrapPacketAndProcessRpcs(byte[] inBuf) throws WrappedRpcServerException, IOException, InterruptedException -->Line_6 $$ inBuf = saslServer.unwrap(inBuf, 0, inBuf.length)[ FD ]
Line_21 $$ if (count <= 0 || unwrappedData.remaining() > 0)-->Line_22 $$ return[ CD ]
Line_8 $$ while (true) -->Line_21 $$ if (count <= 0 || unwrappedData.remaining() > 0)[ CD ]
Line_2 $$ private void unwrapPacketAndProcessRpcs(byte[] inBuf) throws WrappedRpcServerException, IOException, InterruptedException -->Line_8 $$ while (true) [ CD ]
Line_2 $$ private void unwrapPacketAndProcessRpcs(byte[] inBuf) throws WrappedRpcServerException, IOException, InterruptedException -->Line_7 $$ ReadableByteChannel ch = Channels.newChannel(new ByteArrayInputStream(inBuf))[ CD ]
Line_12 $$ if (count <= 0 || unwrappedDataLengthBuffer.remaining() > 0)-->Line_13 $$ return[ CD ]
Line_10 $$ if (unwrappedDataLengthBuffer.remaining() > 0) -->Line_12 $$ if (count <= 0 || unwrappedDataLengthBuffer.remaining() > 0)[ CD ]
Line_23 $$ if (unwrappedData.remaining() == 0) -->Line_24 $$ unwrappedDataLengthBuffer.clear()[ CD ]
Line_9 $$ int count = -1-->Line_11 $$ count = channelRead(ch, unwrappedDataLengthBuffer)[ FD ]
Line_15 $$ if (unwrappedData == null) -->Line_16 $$ unwrappedDataLengthBuffer.flip()[ CD ]
Line_8 $$ while (true) -->Line_23 $$ if (unwrappedData.remaining() == 0) [ CD ]
Line_3 $$ if (LOG.isDebugEnabled()) -->Line_4 $$ LOG.debug("Have read input token of size " + inBuf.length + " for processing by saslServer.unwrap()")[ CD ]
Line_9 $$ int count = -1-->Line_20 $$ count = channelRead(ch, unwrappedData)[ FD ]
Line_2 $$ private void unwrapPacketAndProcessRpcs(byte[] inBuf) throws WrappedRpcServerException, IOException, InterruptedException -->Line_6 $$ inBuf = saslServer.unwrap(inBuf, 0, inBuf.length)[ CD ]
Line_2 $$ private void unwrapPacketAndProcessRpcs(byte[] inBuf) throws WrappedRpcServerException, IOException, InterruptedException -->Line_3 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_17 $$ int unwrappedDataLength = unwrappedDataLengthBuffer.getInt()-->Line_18 $$ unwrappedData = ByteBuffer.allocate(unwrappedDataLength)[ FD ]
Line_15 $$ if (unwrappedData == null) -->Line_18 $$ unwrappedData = ByteBuffer.allocate(unwrappedDataLength)[ CD ]
Line_15 $$ if (unwrappedData == null) -->Line_17 $$ int unwrappedDataLength = unwrappedDataLengthBuffer.getInt()[ CD ]
Line_8 $$ while (true) -->Line_9 $$ int count = -1[ CD ]
Line_8 $$ while (true) -->Line_15 $$ if (unwrappedData == null) [ CD ]
Line_7 $$ ReadableByteChannel ch = Channels.newChannel(new ByteArrayInputStream(inBuf))-->Line_20 $$ count = channelRead(ch, unwrappedData)[ FD ]
Line_23 $$ if (unwrappedData.remaining() == 0) -->Line_25 $$ unwrappedData.flip()[ CD ]
Line_8 $$ while (true) -->Line_10 $$ if (unwrappedDataLengthBuffer.remaining() > 0) [ CD ]
