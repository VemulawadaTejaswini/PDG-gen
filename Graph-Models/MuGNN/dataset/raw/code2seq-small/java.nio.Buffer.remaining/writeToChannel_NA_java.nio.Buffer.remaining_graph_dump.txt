Line_12 $$ while (tmpBuffer.hasRemaining()) -->Line_13 $$ channel.write(tmpBuffer)[ CD ]
Line_8 $$ ByteBuffer tmpBuffer = byteBuffer.duplicate()-->Line_18 $$ byteBuffer.position(tmpBuffer.position())[ FD ]
Line_2 $$ public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException -->Line_8 $$ ByteBuffer tmpBuffer = byteBuffer.duplicate()[ FD ]
Line_2 $$ public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException -->Line_3 $$ if (byteBuffer.isDirect() || (byteBuffer.remaining() <= WRITE_CHUNK_SIZE)) [ CD ]
Line_2 $$ public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException -->Line_13 $$ channel.write(tmpBuffer)[ FD ]
Line_4 $$ while (byteBuffer.hasRemaining()) -->Line_5 $$ channel.write(byteBuffer)[ CD ]
Line_2 $$ public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException -->Line_4 $$ while (byteBuffer.hasRemaining()) [ FD ]
Line_3 $$ if (byteBuffer.isDirect() || (byteBuffer.remaining() <= WRITE_CHUNK_SIZE)) -->Line_4 $$ while (byteBuffer.hasRemaining()) [ CD ]
Line_3 $$ if (byteBuffer.isDirect() || (byteBuffer.remaining() <= WRITE_CHUNK_SIZE)) -->Line_8 $$ ByteBuffer tmpBuffer = byteBuffer.duplicate()[ CD ]
Line_10 $$ while (byteBuffer.hasRemaining()) -->Line_11 $$ tmpBuffer.limit(Math.min(byteBuffer.limit(), tmpBuffer.position() + WRITE_CHUNK_SIZE))[ CD ]
Line_2 $$ public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException -->Line_5 $$ channel.write(byteBuffer)[ FD ]
Line_2 $$ public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException -->Line_18 $$ byteBuffer.position(tmpBuffer.position())[ FD ]
Line_2 $$ public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException -->Line_15 $$ byteBuffer.position(tmpBuffer.position())[ FD ]
Line_2 $$ public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException -->Line_11 $$ tmpBuffer.limit(Math.min(byteBuffer.limit(), tmpBuffer.position() + WRITE_CHUNK_SIZE))[ FD ]
Line_8 $$ ByteBuffer tmpBuffer = byteBuffer.duplicate()-->Line_12 $$ while (tmpBuffer.hasRemaining()) [ FD ]
Line_10 $$ while (byteBuffer.hasRemaining()) -->Line_15 $$ byteBuffer.position(tmpBuffer.position())[ CD ]
Line_8 $$ ByteBuffer tmpBuffer = byteBuffer.duplicate()-->Line_13 $$ channel.write(tmpBuffer)[ FD ]
Line_10 $$ while (byteBuffer.hasRemaining()) -->Line_12 $$ while (tmpBuffer.hasRemaining()) [ CD ]
Line_2 $$ public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException -->Line_3 $$ if (byteBuffer.isDirect() || (byteBuffer.remaining() <= WRITE_CHUNK_SIZE)) [ FD ]
Line_2 $$ public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException -->Line_10 $$ while (byteBuffer.hasRemaining()) [ FD ]
Line_8 $$ ByteBuffer tmpBuffer = byteBuffer.duplicate()-->Line_11 $$ tmpBuffer.limit(Math.min(byteBuffer.limit(), tmpBuffer.position() + WRITE_CHUNK_SIZE))[ FD ]
Line_8 $$ ByteBuffer tmpBuffer = byteBuffer.duplicate()-->Line_15 $$ byteBuffer.position(tmpBuffer.position())[ FD ]
