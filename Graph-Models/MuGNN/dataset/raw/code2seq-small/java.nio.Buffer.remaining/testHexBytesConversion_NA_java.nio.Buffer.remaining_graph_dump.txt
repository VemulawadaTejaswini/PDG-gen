Line_7 $$ String s = ByteBufferUtil.bytesToHex(bb)-->Line_8 $$ ByteBuffer bb2 = ByteBufferUtil.hexToBytes(s)[ FD ]
Line_2 $$ public void testHexBytesConversion() -->Line_20 $$ assertEquals(bb, bb2)[ CD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(1)-->Line_15 $$ bb.position(1)[ FD ]
Line_7 $$ String s = ByteBufferUtil.bytesToHex(bb)-->Line_21 $$ assertEquals("0102", s)[ FD ]
Line_3 $$ for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) -->Line_9 $$ assertEquals(bb, bb2)[ CD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(1)-->Line_6 $$ bb.clear()[ FD ]
Line_2 $$ public void testHexBytesConversion() -->Line_19 $$ ByteBuffer bb2 = ByteBufferUtil.hexToBytes(s)[ CD ]
Line_2 $$ public void testHexBytesConversion() -->Line_17 $$ assertEquals(2, bb.remaining())[ CD ]
Line_18 $$ String s = ByteBufferUtil.bytesToHex(bb)-->Line_21 $$ assertEquals("0102", s)[ FD ]
Line_2 $$ public void testHexBytesConversion() -->Line_21 $$ assertEquals("0102", s)[ CD ]
Line_11 $$ ByteBuffer bb = ByteBuffer.allocate(4)-->Line_18 $$ String s = ByteBufferUtil.bytesToHex(bb)[ FD ]
Line_18 $$ String s = ByteBufferUtil.bytesToHex(bb)-->Line_19 $$ ByteBuffer bb2 = ByteBufferUtil.hexToBytes(s)[ FD ]
Line_8 $$ ByteBuffer bb2 = ByteBufferUtil.hexToBytes(s)-->Line_9 $$ assertEquals(bb, bb2)[ FD ]
Line_3 $$ for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) -->Line_6 $$ bb.clear()[ CD ]
Line_3 $$ for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) -->Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(1)[ CD ]
Line_8 $$ ByteBuffer bb2 = ByteBufferUtil.hexToBytes(s)-->Line_20 $$ assertEquals(bb, bb2)[ FD ]
Line_7 $$ String s = ByteBufferUtil.bytesToHex(bb)-->Line_19 $$ ByteBuffer bb2 = ByteBufferUtil.hexToBytes(s)[ FD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(1)-->Line_17 $$ assertEquals(2, bb.remaining())[ FD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(1)-->Line_7 $$ String s = ByteBufferUtil.bytesToHex(bb)[ FD ]
Line_12 $$ for (int i = 0; i < 4; i++) -->Line_13 $$ bb.put((byte) i)[ CD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(1)-->Line_9 $$ assertEquals(bb, bb2)[ FD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(1)-->Line_20 $$ assertEquals(bb, bb2)[ FD ]
Line_3 $$ for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) -->Line_7 $$ String s = ByteBufferUtil.bytesToHex(bb)[ CD ]
Line_2 $$ public void testHexBytesConversion() -->Line_18 $$ String s = ByteBufferUtil.bytesToHex(bb)[ CD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(1)-->Line_16 $$ bb.limit(3)[ FD ]
Line_2 $$ public void testHexBytesConversion() -->Line_3 $$ for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) [ CD ]
Line_19 $$ ByteBuffer bb2 = ByteBufferUtil.hexToBytes(s)-->Line_20 $$ assertEquals(bb, bb2)[ FD ]
Line_3 $$ for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) -->Line_8 $$ ByteBuffer bb2 = ByteBufferUtil.hexToBytes(s)[ CD ]
Line_2 $$ public void testHexBytesConversion() -->Line_11 $$ ByteBuffer bb = ByteBuffer.allocate(4)[ CD ]
Line_2 $$ public void testHexBytesConversion() -->Line_12 $$ for (int i = 0; i < 4; i++) [ CD ]
Line_11 $$ ByteBuffer bb = ByteBuffer.allocate(4)-->Line_15 $$ bb.position(1)[ FD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(1)-->Line_13 $$ bb.put((byte) i)[ FD ]
Line_2 $$ public void testHexBytesConversion() -->Line_15 $$ bb.position(1)[ CD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(1)-->Line_5 $$ bb.put((byte) i)[ FD ]
Line_11 $$ ByteBuffer bb = ByteBuffer.allocate(4)-->Line_13 $$ bb.put((byte) i)[ FD ]
Line_2 $$ public void testHexBytesConversion() -->Line_16 $$ bb.limit(3)[ CD ]
Line_11 $$ ByteBuffer bb = ByteBuffer.allocate(4)-->Line_20 $$ assertEquals(bb, bb2)[ FD ]
Line_3 $$ for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) -->Line_12 $$ for (int i = 0; i < 4; i++) [ FD ]
Line_4 $$ ByteBuffer bb = ByteBuffer.allocate(1)-->Line_18 $$ String s = ByteBufferUtil.bytesToHex(bb)[ FD ]
Line_11 $$ ByteBuffer bb = ByteBuffer.allocate(4)-->Line_16 $$ bb.limit(3)[ FD ]
Line_3 $$ for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) -->Line_5 $$ bb.put((byte) i)[ CD ]
Line_11 $$ ByteBuffer bb = ByteBuffer.allocate(4)-->Line_17 $$ assertEquals(2, bb.remaining())[ FD ]
