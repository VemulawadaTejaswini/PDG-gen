Line_5 $$ final Path TEST_PATH = new Path("/a")-->Line_13 $$ DFSTestUtil.createFile(fs, TEST_PATH, TEST_FILE_LENGTH, (short) 1, 7567L)[ FD ]
Line_10 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_12 $$ fs = cluster.getFileSystem()[ FD ]
Line_7 $$ final int TEST_FILE_LENGTH = 12345-->Line_23 $$ IOUtils.readFully(fsIn, original, 0, TEST_FILE_LENGTH)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_15 $$ DFSTestUtil.waitReplication(fs, TEST_PATH, (short) 1)[ FD ]
Line_6 $$ FSDataInputStream fsIn = null-->Line_21 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_21 $$ fsIn = fs.open(TEST_PATH)-->Line_32 $$ fsIn.releaseBuffer(result)[ FD ]
Line_36 $$ if (fs != null)-->Line_37 $$ fs.close()[ CD ]
Line_7 $$ final int TEST_FILE_LENGTH = 12345-->Line_13 $$ DFSTestUtil.createFile(fs, TEST_PATH, TEST_FILE_LENGTH, (short) 1, 7567L)[ FD ]
Line_2 $$ public void testZeroCopyReads() throws Exception -->Line_7 $$ final int TEST_FILE_LENGTH = 12345[ CD ]
Line_28 $$ HdfsDataInputStream dfsIn = (HdfsDataInputStream) fsIn-->Line_29 $$ Assert.assertEquals(4096, dfsIn.getReadStatistics().getTotalBytesRead())[ FD ]
Line_22 $$ byte[] original = new byte[TEST_FILE_LENGTH]-->Line_31 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 0, 4096), byteBufferToArray(result))[ FD ]
Line_6 $$ FSDataInputStream fsIn = null-->Line_32 $$ fsIn.releaseBuffer(result)[ FD ]
Line_5 $$ final Path TEST_PATH = new Path("/a")-->Line_15 $$ DFSTestUtil.waitReplication(fs, TEST_PATH, (short) 1)[ FD ]
Line_25 $$ fsIn = fs.open(TEST_PATH)-->Line_35 $$ fsIn.close()[ FD ]
Line_25 $$ fsIn = fs.open(TEST_PATH)-->Line_32 $$ fsIn.releaseBuffer(result)[ FD ]
Line_21 $$ fsIn = fs.open(TEST_PATH)-->Line_35 $$ fsIn.close()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_13 $$ DFSTestUtil.createFile(fs, TEST_PATH, TEST_FILE_LENGTH, (short) 1, 7567L)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_25 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_2 $$ public void testZeroCopyReads() throws Exception -->Line_6 $$ FSDataInputStream fsIn = null[ CD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_12 $$ fs = cluster.getFileSystem()[ FD ]
Line_5 $$ final Path TEST_PATH = new Path("/a")-->Line_21 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_15 $$ DFSTestUtil.waitReplication(fs, TEST_PATH, (short) 1)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_39 $$ cluster.shutdown()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_21 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_21 $$ fsIn = fs.open(TEST_PATH)-->Line_26 $$ ByteBuffer result = fsIn.read(null, 4096, EnumSet.of(ReadOption.SKIP_CHECKSUMS))[ FD ]
Line_8 $$ FileSystem fs = null-->Line_37 $$ fs.close()[ FD ]
Line_28 $$ HdfsDataInputStream dfsIn = (HdfsDataInputStream) fsIn-->Line_30 $$ Assert.assertEquals(4096, dfsIn.getReadStatistics().getTotalZeroCopyBytesRead())[ FD ]
Line_2 $$ public void testZeroCopyReads() throws Exception -->Line_3 $$ HdfsConfiguration conf = initZeroCopyTest()[ CD ]
Line_6 $$ FSDataInputStream fsIn = null-->Line_23 $$ IOUtils.readFully(fsIn, original, 0, TEST_FILE_LENGTH)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_11 $$ cluster.waitActive()[ FD ]
Line_21 $$ fsIn = fs.open(TEST_PATH)-->Line_25 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_5 $$ final Path TEST_PATH = new Path("/a")-->Line_25 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_6 $$ FSDataInputStream fsIn = null-->Line_34 $$ if (fsIn != null)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_21 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_21 $$ fsIn = fs.open(TEST_PATH)-->Line_23 $$ IOUtils.readFully(fsIn, original, 0, TEST_FILE_LENGTH)[ FD ]
Line_10 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_11 $$ cluster.waitActive()[ FD ]
Line_34 $$ if (fsIn != null)-->Line_35 $$ fsIn.close()[ CD ]
Line_21 $$ fsIn = fs.open(TEST_PATH)-->Line_34 $$ if (fsIn != null)[ FD ]
Line_38 $$ if (cluster != null)-->Line_39 $$ cluster.shutdown()[ CD ]
Line_8 $$ FileSystem fs = null-->Line_12 $$ fs = cluster.getFileSystem()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_37 $$ fs.close()[ FD ]
Line_2 $$ public void testZeroCopyReads() throws Exception -->Line_4 $$ MiniDFSCluster cluster = null[ CD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_38 $$ if (cluster != null)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_10 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()[ FD ]
Line_26 $$ ByteBuffer result = fsIn.read(null, 4096, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_27 $$ Assert.assertEquals(4096, result.remaining())[ FD ]
Line_10 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_39 $$ cluster.shutdown()[ FD ]
Line_26 $$ ByteBuffer result = fsIn.read(null, 4096, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_31 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 0, 4096), byteBufferToArray(result))[ FD ]
Line_8 $$ FileSystem fs = null-->Line_25 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_10 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_38 $$ if (cluster != null)[ FD ]
Line_22 $$ byte[] original = new byte[TEST_FILE_LENGTH]-->Line_23 $$ IOUtils.readFully(fsIn, original, 0, TEST_FILE_LENGTH)[ FD ]
Line_26 $$ ByteBuffer result = fsIn.read(null, 4096, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_32 $$ fsIn.releaseBuffer(result)[ FD ]
Line_6 $$ FSDataInputStream fsIn = null-->Line_24 $$ fsIn.close()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_36 $$ if (fs != null)[ FD ]
Line_25 $$ fsIn = fs.open(TEST_PATH)-->Line_26 $$ ByteBuffer result = fsIn.read(null, 4096, EnumSet.of(ReadOption.SKIP_CHECKSUMS))[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_36 $$ if (fs != null)[ FD ]
Line_2 $$ public void testZeroCopyReads() throws Exception -->Line_5 $$ final Path TEST_PATH = new Path("/a")[ CD ]
Line_8 $$ FileSystem fs = null-->Line_13 $$ DFSTestUtil.createFile(fs, TEST_PATH, TEST_FILE_LENGTH, (short) 1, 7567L)[ FD ]
Line_6 $$ FSDataInputStream fsIn = null-->Line_35 $$ fsIn.close()[ FD ]
Line_6 $$ FSDataInputStream fsIn = null-->Line_25 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_2 $$ public void testZeroCopyReads() throws Exception -->Line_8 $$ FileSystem fs = null[ CD ]
Line_6 $$ FSDataInputStream fsIn = null-->Line_26 $$ ByteBuffer result = fsIn.read(null, 4096, EnumSet.of(ReadOption.SKIP_CHECKSUMS))[ FD ]
Line_21 $$ fsIn = fs.open(TEST_PATH)-->Line_24 $$ fsIn.close()[ FD ]
Line_25 $$ fsIn = fs.open(TEST_PATH)-->Line_34 $$ if (fsIn != null)[ FD ]
