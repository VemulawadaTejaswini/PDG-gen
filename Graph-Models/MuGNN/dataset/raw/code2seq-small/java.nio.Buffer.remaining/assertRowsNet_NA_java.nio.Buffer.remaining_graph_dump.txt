Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_9 $$ ColumnDefinitions meta = result.getColumnDefinitions()[ CD ]
Line_28 $$ if (iter.hasNext()) -->Line_29 $$ while (iter.hasNext()) [ CD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_9 $$ ColumnDefinitions meta = result.getColumnDefinitions()[ FD ]
Line_5 $$ if (rows.length > 0)-->Line_6 $$ Assert.fail(String.format("No rows returned by query but %d expected", rows.length))[ CD ]
Line_19 $$ ByteBuffer expectedByteValue = codec.serialize(expected[j], ProtocolVersion.fromInt(protocolVersion))-->Line_20 $$ int expectedBytes = expectedByteValue == null ? -1 : expectedByteValue.remaining()[ FD ]
Line_18 $$ com.datastax.driver.core.TypeCodec<Object> codec = clusters.get(protocolVersion).getConfiguration().getCodecRegistry().codecFor(type)-->Line_24 $$ Assert.fail(String.format("Invalid value for row %d column %d (%s of type %s), " + "expected <%s> (%d bytes) but got <%s> (%d bytes) " + "(using protocol version %d)", i, j, meta.getName(j), type, codec.format(expected[j]), expectedBytes, codec.format(codec.deserialize(actualValue, ProtocolVersion.fromInt(protocolVersion))), actualBytes, protocolVersion))[ FD ]
Line_29 $$ while (iter.hasNext()) -->Line_30 $$ iter.next()[ CD ]
Line_10 $$ Iterator<Row> iter = result.iterator()-->Line_14 $$ Row actual = iter.next()[ FD ]
Line_12 $$ while (iter.hasNext() && i < rows.length) -->Line_13 $$ Object[] expected = rows[i][ CD ]
Line_9 $$ ColumnDefinitions meta = result.getColumnDefinitions()-->Line_17 $$ DataType type = meta.getType(j)[ FD ]
Line_19 $$ ByteBuffer expectedByteValue = codec.serialize(expected[j], ProtocolVersion.fromInt(protocolVersion))-->Line_23 $$ if (!Objects.equal(expectedByteValue, actualValue))[ FD ]
Line_28 $$ if (iter.hasNext()) -->Line_33 $$ Assert.fail(String.format("Got less rows than expected. Expected %d but got %d (using protocol version %d).", rows.length, i, protocolVersion))[ CD ]
Line_16 $$ for (int j = 0; j < meta.size(); j++) -->Line_20 $$ int expectedBytes = expectedByteValue == null ? -1 : expectedByteValue.remaining()[ CD ]
Line_16 $$ for (int j = 0; j < meta.size(); j++) -->Line_17 $$ DataType type = meta.getType(j)[ FD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_18 $$ com.datastax.driver.core.TypeCodec<Object> codec = clusters.get(protocolVersion).getConfiguration().getCodecRegistry().codecFor(type)[ FD ]
Line_10 $$ Iterator<Row> iter = result.iterator()-->Line_30 $$ iter.next()[ FD ]
Line_12 $$ while (iter.hasNext() && i < rows.length) -->Line_14 $$ Row actual = iter.next()[ CD ]
Line_16 $$ for (int j = 0; j < meta.size(); j++) -->Line_23 $$ if (!Objects.equal(expectedByteValue, actualValue))[ CD ]
Line_20 $$ int expectedBytes = expectedByteValue == null ? -1 : expectedByteValue.remaining()-->Line_24 $$ Assert.fail(String.format("Invalid value for row %d column %d (%s of type %s), " + "expected <%s> (%d bytes) but got <%s> (%d bytes) " + "(using protocol version %d)", i, j, meta.getName(j), type, codec.format(expected[j]), expectedBytes, codec.format(codec.deserialize(actualValue, ProtocolVersion.fromInt(protocolVersion))), actualBytes, protocolVersion))[ FD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_11 $$ int i = 0[ CD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_24 $$ Assert.fail(String.format("Invalid value for row %d column %d (%s of type %s), " + "expected <%s> (%d bytes) but got <%s> (%d bytes) " + "(using protocol version %d)", i, j, meta.getName(j), type, codec.format(expected[j]), expectedBytes, codec.format(codec.deserialize(actualValue, ProtocolVersion.fromInt(protocolVersion))), actualBytes, protocolVersion))[ FD ]
Line_10 $$ Iterator<Row> iter = result.iterator()-->Line_28 $$ if (iter.hasNext()) [ FD ]
Line_11 $$ int i = 0-->Line_33 $$ Assert.fail(String.format("Got less rows than expected. Expected %d but got %d (using protocol version %d).", rows.length, i, protocolVersion))[ FD ]
Line_14 $$ Row actual = iter.next()-->Line_21 $$ ByteBuffer actualValue = actual.getBytesUnsafe(meta.getName(j))[ FD ]
Line_21 $$ ByteBuffer actualValue = actual.getBytesUnsafe(meta.getName(j))-->Line_24 $$ Assert.fail(String.format("Invalid value for row %d column %d (%s of type %s), " + "expected <%s> (%d bytes) but got <%s> (%d bytes) " + "(using protocol version %d)", i, j, meta.getName(j), type, codec.format(expected[j]), expectedBytes, codec.format(codec.deserialize(actualValue, ProtocolVersion.fromInt(protocolVersion))), actualBytes, protocolVersion))[ FD ]
Line_11 $$ int i = 0-->Line_24 $$ Assert.fail(String.format("Invalid value for row %d column %d (%s of type %s), " + "expected <%s> (%d bytes) but got <%s> (%d bytes) " + "(using protocol version %d)", i, j, meta.getName(j), type, codec.format(expected[j]), expectedBytes, codec.format(codec.deserialize(actualValue, ProtocolVersion.fromInt(protocolVersion))), actualBytes, protocolVersion))[ FD ]
Line_4 $$ if (result == null) -->Line_5 $$ if (rows.length > 0)[ CD ]
Line_18 $$ com.datastax.driver.core.TypeCodec<Object> codec = clusters.get(protocolVersion).getConfiguration().getCodecRegistry().codecFor(type)-->Line_19 $$ ByteBuffer expectedByteValue = codec.serialize(expected[j], ProtocolVersion.fromInt(protocolVersion))[ FD ]
Line_21 $$ ByteBuffer actualValue = actual.getBytesUnsafe(meta.getName(j))-->Line_23 $$ if (!Objects.equal(expectedByteValue, actualValue))[ FD ]
Line_17 $$ DataType type = meta.getType(j)-->Line_18 $$ com.datastax.driver.core.TypeCodec<Object> codec = clusters.get(protocolVersion).getConfiguration().getCodecRegistry().codecFor(type)[ FD ]
Line_16 $$ for (int j = 0; j < meta.size(); j++) -->Line_21 $$ ByteBuffer actualValue = actual.getBytesUnsafe(meta.getName(j))[ CD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_35 $$ Assert.assertTrue(String.format("Got %s rows than expected. Expected %d but got %d (using protocol version %d)", rows.length > i ? "less" : "more", rows.length, i, protocolVersion), i == rows.length)[ CD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_4 $$ if (result == null) [ FD ]
Line_12 $$ while (iter.hasNext() && i < rows.length) -->Line_15 $$ Assert.assertEquals(String.format("Invalid number of (expected) values provided for row %d (using protocol version %d)", i, protocolVersion), meta.size(), expected.length)[ CD ]
Line_9 $$ ColumnDefinitions meta = result.getColumnDefinitions()-->Line_16 $$ for (int j = 0; j < meta.size(); j++) [ FD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_33 $$ Assert.fail(String.format("Got less rows than expected. Expected %d but got %d (using protocol version %d).", rows.length, i, protocolVersion))[ FD ]
Line_16 $$ for (int j = 0; j < meta.size(); j++) -->Line_21 $$ ByteBuffer actualValue = actual.getBytesUnsafe(meta.getName(j))[ FD ]
Line_12 $$ while (iter.hasNext() && i < rows.length) -->Line_16 $$ for (int j = 0; j < meta.size(); j++) [ CD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_19 $$ ByteBuffer expectedByteValue = codec.serialize(expected[j], ProtocolVersion.fromInt(protocolVersion))[ FD ]
Line_16 $$ for (int j = 0; j < meta.size(); j++) -->Line_24 $$ Assert.fail(String.format("Invalid value for row %d column %d (%s of type %s), " + "expected <%s> (%d bytes) but got <%s> (%d bytes) " + "(using protocol version %d)", i, j, meta.getName(j), type, codec.format(expected[j]), expectedBytes, codec.format(codec.deserialize(actualValue, ProtocolVersion.fromInt(protocolVersion))), actualBytes, protocolVersion))[ FD ]
Line_9 $$ ColumnDefinitions meta = result.getColumnDefinitions()-->Line_15 $$ Assert.assertEquals(String.format("Invalid number of (expected) values provided for row %d (using protocol version %d)", i, protocolVersion), meta.size(), expected.length)[ FD ]
Line_23 $$ if (!Objects.equal(expectedByteValue, actualValue))-->Line_24 $$ Assert.fail(String.format("Invalid value for row %d column %d (%s of type %s), " + "expected <%s> (%d bytes) but got <%s> (%d bytes) " + "(using protocol version %d)", i, j, meta.getName(j), type, codec.format(expected[j]), expectedBytes, codec.format(codec.deserialize(actualValue, ProtocolVersion.fromInt(protocolVersion))), actualBytes, protocolVersion))[ CD ]
Line_22 $$ int actualBytes = actualValue == null ? -1 : actualValue.remaining()-->Line_24 $$ Assert.fail(String.format("Invalid value for row %d column %d (%s of type %s), " + "expected <%s> (%d bytes) but got <%s> (%d bytes) " + "(using protocol version %d)", i, j, meta.getName(j), type, codec.format(expected[j]), expectedBytes, codec.format(codec.deserialize(actualValue, ProtocolVersion.fromInt(protocolVersion))), actualBytes, protocolVersion))[ FD ]
Line_16 $$ for (int j = 0; j < meta.size(); j++) -->Line_18 $$ com.datastax.driver.core.TypeCodec<Object> codec = clusters.get(protocolVersion).getConfiguration().getCodecRegistry().codecFor(type)[ CD ]
Line_17 $$ DataType type = meta.getType(j)-->Line_24 $$ Assert.fail(String.format("Invalid value for row %d column %d (%s of type %s), " + "expected <%s> (%d bytes) but got <%s> (%d bytes) " + "(using protocol version %d)", i, j, meta.getName(j), type, codec.format(expected[j]), expectedBytes, codec.format(codec.deserialize(actualValue, ProtocolVersion.fromInt(protocolVersion))), actualBytes, protocolVersion))[ FD ]
Line_21 $$ ByteBuffer actualValue = actual.getBytesUnsafe(meta.getName(j))-->Line_22 $$ int actualBytes = actualValue == null ? -1 : actualValue.remaining()[ FD ]
Line_9 $$ ColumnDefinitions meta = result.getColumnDefinitions()-->Line_21 $$ ByteBuffer actualValue = actual.getBytesUnsafe(meta.getName(j))[ FD ]
Line_10 $$ Iterator<Row> iter = result.iterator()-->Line_12 $$ while (iter.hasNext() && i < rows.length) [ FD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_28 $$ if (iter.hasNext()) [ CD ]
Line_11 $$ int i = 0-->Line_35 $$ Assert.assertTrue(String.format("Got %s rows than expected. Expected %d but got %d (using protocol version %d)", rows.length > i ? "less" : "more", rows.length, i, protocolVersion), i == rows.length)[ FD ]
Line_11 $$ int i = 0-->Line_31 $$ i++[ FD ]
Line_16 $$ for (int j = 0; j < meta.size(); j++) -->Line_19 $$ ByteBuffer expectedByteValue = codec.serialize(expected[j], ProtocolVersion.fromInt(protocolVersion))[ CD ]
Line_4 $$ if (result == null) -->Line_7 $$ return[ CD ]
Line_16 $$ for (int j = 0; j < meta.size(); j++) -->Line_17 $$ DataType type = meta.getType(j)[ CD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_15 $$ Assert.assertEquals(String.format("Invalid number of (expected) values provided for row %d (using protocol version %d)", i, protocolVersion), meta.size(), expected.length)[ FD ]
Line_10 $$ Iterator<Row> iter = result.iterator()-->Line_29 $$ while (iter.hasNext()) [ FD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_3 $$ requireNetwork()[ CD ]
Line_11 $$ int i = 0-->Line_15 $$ Assert.assertEquals(String.format("Invalid number of (expected) values provided for row %d (using protocol version %d)", i, protocolVersion), meta.size(), expected.length)[ FD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_10 $$ Iterator<Row> iter = result.iterator()[ FD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_12 $$ while (iter.hasNext() && i < rows.length) [ CD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_35 $$ Assert.assertTrue(String.format("Got %s rows than expected. Expected %d but got %d (using protocol version %d)", rows.length > i ? "less" : "more", rows.length, i, protocolVersion), i == rows.length)[ FD ]
Line_11 $$ int i = 0-->Line_26 $$ i++[ FD ]
Line_29 $$ while (iter.hasNext()) -->Line_31 $$ i++[ CD ]
Line_16 $$ for (int j = 0; j < meta.size(); j++) -->Line_22 $$ int actualBytes = actualValue == null ? -1 : actualValue.remaining()[ CD ]
Line_9 $$ ColumnDefinitions meta = result.getColumnDefinitions()-->Line_24 $$ Assert.fail(String.format("Invalid value for row %d column %d (%s of type %s), " + "expected <%s> (%d bytes) but got <%s> (%d bytes) " + "(using protocol version %d)", i, j, meta.getName(j), type, codec.format(expected[j]), expectedBytes, codec.format(codec.deserialize(actualValue, ProtocolVersion.fromInt(protocolVersion))), actualBytes, protocolVersion))[ FD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_10 $$ Iterator<Row> iter = result.iterator()[ CD ]
Line_2 $$ protected void assertRowsNet(int protocolVersion, ResultSet result, Object[]... rows) -->Line_4 $$ if (result == null) [ CD ]
Line_12 $$ while (iter.hasNext() && i < rows.length) -->Line_26 $$ i++[ CD ]
