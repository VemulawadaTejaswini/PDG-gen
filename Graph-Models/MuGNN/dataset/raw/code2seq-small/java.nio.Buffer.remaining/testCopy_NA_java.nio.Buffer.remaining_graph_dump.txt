Line_2 $$ private void testCopy(byte[] canon, ByteBuffer src, ByteBuffer trg, FastByteOperations.ByteOperations ops) -->Line_6 $$ assert firstdiff(canon, result) < 0[ FD ]
Line_3 $$ byte[] result = new byte[src.remaining()]-->Line_6 $$ assert firstdiff(canon, result) < 0[ FD ]
Line_3 $$ byte[] result = new byte[src.remaining()]-->Line_5 $$ ops.copy(trg, trg.position(), result, 0, trg.remaining())[ FD ]
Line_2 $$ private void testCopy(byte[] canon, ByteBuffer src, ByteBuffer trg, FastByteOperations.ByteOperations ops) -->Line_3 $$ byte[] result = new byte[src.remaining()][ FD ]
Line_2 $$ private void testCopy(byte[] canon, ByteBuffer src, ByteBuffer trg, FastByteOperations.ByteOperations ops) -->Line_4 $$ ops.copy(src, src.position(), trg, trg.position(), src.remaining())[ FD ]
Line_2 $$ private void testCopy(byte[] canon, ByteBuffer src, ByteBuffer trg, FastByteOperations.ByteOperations ops) -->Line_5 $$ ops.copy(trg, trg.position(), result, 0, trg.remaining())[ FD ]
Line_2 $$ private void testCopy(byte[] canon, ByteBuffer src, ByteBuffer trg, FastByteOperations.ByteOperations ops) -->Line_5 $$ ops.copy(trg, trg.position(), result, 0, trg.remaining())[ CD ]
Line_2 $$ private void testCopy(byte[] canon, ByteBuffer src, ByteBuffer trg, FastByteOperations.ByteOperations ops) -->Line_3 $$ byte[] result = new byte[src.remaining()][ CD ]
Line_2 $$ private void testCopy(byte[] canon, ByteBuffer src, ByteBuffer trg, FastByteOperations.ByteOperations ops) -->Line_4 $$ ops.copy(src, src.position(), trg, trg.position(), src.remaining())[ CD ]
