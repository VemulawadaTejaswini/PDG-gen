Line_3 $$ CRC32 crc = new CRC32()-->Line_12 $$ out.writeInt((int) crc.getValue())[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_13 $$ int bufferPos = out.getLength()[ FD ]
Line_2 $$ public void testResetCrc() throws IOException -->Line_30 $$ assertTrue(file.exists())[ CD ]
Line_24 $$ File file = File.createTempFile("testResetCrc", "1")-->Line_31 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_14 $$ out.writeDouble(3.3)[ FD ]
Line_26 $$ try (SequentialWriter writer = SequentialWriter.open(file)) -->Line_27 $$ writer.write(buffer)[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_31 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_2 $$ public void testResetCrc() throws IOException -->Line_24 $$ File file = File.createTempFile("testResetCrc", "1")[ CD ]
Line_10 $$ buffer = out.buffer()-->Line_22 $$ buffer = out.buffer()[ FD ]
Line_22 $$ buffer = out.buffer()-->Line_27 $$ writer.write(buffer)[ FD ]
Line_10 $$ buffer = out.buffer()-->Line_33 $$ reader.limit(buffer.remaining())[ FD ]
Line_17 $$ buffer = out.buffer()-->Line_18 $$ buffer.position(bufferPos)[ FD ]
Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_33 $$ reader.limit(buffer.remaining())[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_17 $$ buffer = out.buffer()[ FD ]
Line_2 $$ public void testResetCrc() throws IOException -->Line_31 $$ assertEquals(buffer.remaining(), file.length())[ CD ]
Line_4 $$ ByteBuffer buffer-->Line_10 $$ buffer = out.buffer()[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_22 $$ buffer = out.buffer()[ FD ]
Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_35 $$ assertEquals(false, reader.readBoolean())[ FD ]
Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_38 $$ assertTrue(reader.checkCrc())[ FD ]
Line_2 $$ public void testResetCrc() throws IOException -->Line_25 $$ file.deleteOnExit()[ CD ]
Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_39 $$ reader.resetCrc()[ FD ]
Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_44 $$ assertEquals(0, reader.bytesRemaining())[ FD ]
Line_24 $$ File file = File.createTempFile("testResetCrc", "1")-->Line_30 $$ assertTrue(file.exists())[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_18 $$ buffer.position(bufferPos)[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_20 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_17 $$ buffer = out.buffer()-->Line_27 $$ writer.write(buffer)[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_27 $$ writer.write(buffer)[ FD ]
Line_24 $$ File file = File.createTempFile("testResetCrc", "1")-->Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) [ FD ]
Line_17 $$ buffer = out.buffer()-->Line_22 $$ buffer = out.buffer()[ FD ]
Line_10 $$ buffer = out.buffer()-->Line_31 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_6 $$ out.write(127)[ FD ]
Line_2 $$ public void testResetCrc() throws IOException -->Line_3 $$ CRC32 crc = new CRC32()[ CD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_8 $$ out.writeByte(10)[ FD ]
Line_10 $$ buffer = out.buffer()-->Line_20 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_16 $$ out.writeInt(42)[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_15 $$ out.writeFloat(2.2f)[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_10 $$ buffer = out.buffer()[ FD ]
Line_24 $$ File file = File.createTempFile("testResetCrc", "1")-->Line_25 $$ file.deleteOnExit()[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_21 $$ out.writeInt((int) crc.getValue())[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_17 $$ buffer = out.buffer()[ FD ]
Line_3 $$ CRC32 crc = new CRC32()-->Line_19 $$ crc.reset()[ FD ]
Line_17 $$ buffer = out.buffer()-->Line_20 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_22 $$ buffer = out.buffer()-->Line_31 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_13 $$ int bufferPos = out.getLength()-->Line_18 $$ buffer.position(bufferPos)[ FD ]
Line_17 $$ buffer = out.buffer()-->Line_33 $$ reader.limit(buffer.remaining())[ FD ]
Line_10 $$ buffer = out.buffer()-->Line_11 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_12 $$ out.writeInt((int) crc.getValue())[ FD ]
Line_3 $$ CRC32 crc = new CRC32()-->Line_21 $$ out.writeInt((int) crc.getValue())[ FD ]
Line_24 $$ File file = File.createTempFile("testResetCrc", "1")-->Line_26 $$ try (SequentialWriter writer = SequentialWriter.open(file)) [ FD ]
Line_3 $$ CRC32 crc = new CRC32()-->Line_20 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_42 $$ assertEquals(42, reader.readInt())[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_9 $$ out.writeChar('t')[ FD ]
Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_34 $$ assertEquals(127, reader.read())[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_22 $$ buffer = out.buffer()[ FD ]
Line_3 $$ CRC32 crc = new CRC32()-->Line_11 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_33 $$ reader.limit(buffer.remaining())[ FD ]
Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_43 $$ assertTrue(reader.checkCrc())[ FD ]
Line_22 $$ buffer = out.buffer()-->Line_33 $$ reader.limit(buffer.remaining())[ FD ]
Line_17 $$ buffer = out.buffer()-->Line_31 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_10 $$ buffer = out.buffer()-->Line_27 $$ writer.write(buffer)[ FD ]
Line_10 $$ buffer = out.buffer()-->Line_17 $$ buffer = out.buffer()[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_7 $$ out.writeBoolean(false)[ FD ]
Line_2 $$ public void testResetCrc() throws IOException -->Line_4 $$ ByteBuffer buffer[ CD ]
Line_10 $$ buffer = out.buffer()-->Line_18 $$ buffer.position(bufferPos)[ FD ]
Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_41 $$ assertEquals(2.2f, reader.readFloat())[ FD ]
Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_37 $$ assertEquals('t', reader.readChar())[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_11 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_40 $$ assertEquals(3.3, reader.readDouble())[ FD ]
Line_32 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_36 $$ assertEquals(10, reader.readByte())[ FD ]
Line_26 $$ try (SequentialWriter writer = SequentialWriter.open(file)) -->Line_28 $$ writer.finish()[ FD ]
