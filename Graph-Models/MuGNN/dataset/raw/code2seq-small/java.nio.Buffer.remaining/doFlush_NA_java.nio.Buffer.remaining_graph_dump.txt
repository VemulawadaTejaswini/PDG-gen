Line_5 $$ int outLen = Math.min(remaining, myOutBuffer.length())-->Line_7 $$ myOutBuffer.delete(0, outLen)[ FD ]
Line_8 $$ if (myOutBuffer.length() != 0)-->Line_9 $$ return CoderResult.OVERFLOW[ CD ]
Line_3 $$ if (myOutBuffer.length() != 0) -->Line_5 $$ int outLen = Math.min(remaining, myOutBuffer.length())[ CD ]
Line_3 $$ if (myOutBuffer.length() != 0) -->Line_8 $$ if (myOutBuffer.length() != 0)[ CD ]
Line_3 $$ if (myOutBuffer.length() != 0) -->Line_6 $$ out.append(myOutBuffer, 0, outLen)[ CD ]
Line_2 $$ private CoderResult doFlush(final CharBuffer out) -->Line_4 $$ int remaining = out.remaining()[ FD ]
Line_3 $$ if (myOutBuffer.length() != 0) -->Line_4 $$ int remaining = out.remaining()[ CD ]
Line_2 $$ private CoderResult doFlush(final CharBuffer out) -->Line_3 $$ if (myOutBuffer.length() != 0) [ CD ]
Line_2 $$ private CoderResult doFlush(final CharBuffer out) -->Line_6 $$ out.append(myOutBuffer, 0, outLen)[ FD ]
Line_4 $$ int remaining = out.remaining()-->Line_5 $$ int outLen = Math.min(remaining, myOutBuffer.length())[ FD ]
Line_2 $$ private CoderResult doFlush(final CharBuffer out) -->Line_11 $$ return CoderResult.UNDERFLOW[ CD ]
Line_5 $$ int outLen = Math.min(remaining, myOutBuffer.length())-->Line_6 $$ out.append(myOutBuffer, 0, outLen)[ FD ]
Line_3 $$ if (myOutBuffer.length() != 0) -->Line_7 $$ myOutBuffer.delete(0, outLen)[ CD ]
