Line_2 $$ public static InputStream inputStream(ByteBuffer bytes) -->Line_3 $$ final ByteBuffer copy = bytes.duplicate()[ FD ]
Line_2 $$ public static InputStream inputStream(ByteBuffer bytes) -->Line_14 $$ copy.get(bytes, off, len)[ FD ]
Line_3 $$ final ByteBuffer copy = bytes.duplicate()-->Line_14 $$ copy.get(bytes, off, len)[ FD ]
Line_3 $$ final ByteBuffer copy = bytes.duplicate()-->Line_8 $$ return copy.get() & 0xFF[ FD ]
Line_3 $$ final ByteBuffer copy = bytes.duplicate()-->Line_11 $$ if (!copy.hasRemaining())[ FD ]
Line_2 $$ public static InputStream inputStream(ByteBuffer bytes) -->Line_4 $$ return new InputStream() [ CD ]
Line_3 $$ final ByteBuffer copy = bytes.duplicate()-->Line_13 $$ len = Math.min(len, copy.remaining())[ FD ]
Line_4 $$ return new InputStream() -->Line_11 $$ if (!copy.hasRemaining())[ CD ]
Line_4 $$ return new InputStream() -->Line_18 $$ return copy.remaining()[ CD ]
Line_4 $$ return new InputStream() -->Line_14 $$ copy.get(bytes, off, len)[ FD ]
Line_11 $$ if (!copy.hasRemaining())-->Line_12 $$ return -1[ CD ]
Line_3 $$ final ByteBuffer copy = bytes.duplicate()-->Line_18 $$ return copy.remaining()[ FD ]
Line_3 $$ final ByteBuffer copy = bytes.duplicate()-->Line_6 $$ if (!copy.hasRemaining())[ FD ]
Line_4 $$ return new InputStream() -->Line_14 $$ copy.get(bytes, off, len)[ CD ]
Line_4 $$ return new InputStream() -->Line_15 $$ return len[ CD ]
Line_2 $$ public static InputStream inputStream(ByteBuffer bytes) -->Line_3 $$ final ByteBuffer copy = bytes.duplicate()[ CD ]
Line_4 $$ return new InputStream() -->Line_8 $$ return copy.get() & 0xFF[ CD ]
Line_4 $$ return new InputStream() -->Line_13 $$ len = Math.min(len, copy.remaining())[ FD ]
Line_4 $$ return new InputStream() -->Line_6 $$ if (!copy.hasRemaining())[ CD ]
Line_13 $$ len = Math.min(len, copy.remaining())-->Line_14 $$ copy.get(bytes, off, len)[ FD ]
Line_6 $$ if (!copy.hasRemaining())-->Line_7 $$ return -1[ CD ]
Line_4 $$ return new InputStream() -->Line_13 $$ len = Math.min(len, copy.remaining())[ CD ]
