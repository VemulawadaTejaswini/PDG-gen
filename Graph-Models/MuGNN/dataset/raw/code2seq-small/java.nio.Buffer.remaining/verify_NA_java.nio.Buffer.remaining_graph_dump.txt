Line_65 $$ prevKey = key-->Line_62 $$ if ((prevKey != null && prevKey.compareTo(key) > 0) || !key.getKey().equals(currentIndexKey) || dataStart != dataStartFromIndex)[ FD ]
Line_13 $$ extended = true-->Line_21 $$ if (!extended)[ FD ]
Line_31 $$ DecoratedKey prevKey = null-->Line_62 $$ if ((prevKey != null && prevKey.compareTo(key) > 0) || !key.getKey().equals(currentIndexKey) || dataStart != dataStartFromIndex)[ FD ]
Line_44 $$ long nextRowPositionFromIndex = 0-->Line_47 $$ nextRowPositionFromIndex = indexFile.isEOF() ? dataFile.length() : rowIndexEntrySerializer.deserialize(indexFile).position[ FD ]
Line_39 $$ key = sstable.decorateKey(ByteBufferUtil.readWithShortLength(dataFile))-->Line_62 $$ if ((prevKey != null && prevKey.compareTo(key) > 0) || !key.getKey().equals(currentIndexKey) || dataStart != dataStartFromIndex)[ FD ]
Line_47 $$ nextRowPositionFromIndex = indexFile.isEOF() ? dataFile.length() : rowIndexEntrySerializer.deserialize(indexFile).position-->Line_67 $$ dataFile.seek(nextRowPositionFromIndex)[ FD ]
Line_39 $$ key = sstable.decorateKey(ByteBufferUtil.readWithShortLength(dataFile))-->Line_65 $$ prevKey = key[ FD ]
Line_2 $$ public void verify(boolean extended) throws IOException -->Line_5 $$ outputHandler.output(String.format("Checking computed hash of %s ", sstable))[ CD ]
Line_62 $$ if ((prevKey != null && prevKey.compareTo(key) > 0) || !key.getKey().equals(currentIndexKey) || dataStart != dataStartFromIndex)-->Line_63 $$ markAndThrow()[ CD ]
Line_32 $$ while (!dataFile.isEOF()) -->Line_52 $$ long dataStartFromIndex = currentIndexKey == null ? -1 : rowStart + 2 + currentIndexKey.remaining()[ CD ]
Line_32 $$ while (!dataFile.isEOF()) -->Line_53 $$ long dataSize = nextRowPositionFromIndex - dataStartFromIndex[ CD ]
Line_54 $$ String keyName = key == null ? "(unreadable key)" : ByteBufferUtil.bytesToHex(key.getKey())-->Line_55 $$ outputHandler.debug(String.format("row %s is %s bytes", keyName, dataSize))[ FD ]
Line_58 $$ if (key == null || dataSize > dataFile.length())-->Line_59 $$ markAndThrow()[ CD ]
Line_44 $$ long nextRowPositionFromIndex = 0-->Line_66 $$ outputHandler.debug(String.format("Row %s at %s valid, moving to next row at %s ", goodRows, rowStart, nextRowPositionFromIndex))[ FD ]
Line_2 $$ public void verify(boolean extended) throws IOException -->Line_78 $$ outputHandler.output("Verify of " + sstable + " succeeded. All " + goodRows + " rows read successfully")[ CD ]
Line_32 $$ while (!dataFile.isEOF()) -->Line_51 $$ long dataStart = dataFile.getFilePointer()[ CD ]
Line_25 $$ ByteBuffer nextIndexKey = ByteBufferUtil.readWithShortLength(indexFile)-->Line_46 $$ nextIndexKey = indexFile.isEOF() ? null : ByteBufferUtil.readWithShortLength(indexFile)[ FD ]
Line_8 $$ if (sstable.descriptor.digestComponent != null && new File(sstable.descriptor.filenameFor(sstable.descriptor.digestComponent)).exists()) -->Line_13 $$ extended = true[ CD ]
Line_53 $$ long dataSize = nextRowPositionFromIndex - dataStartFromIndex-->Line_55 $$ outputHandler.debug(String.format("row %s is %s bytes", keyName, dataSize))[ FD ]
Line_3 $$ long rowStart = 0-->Line_66 $$ outputHandler.debug(String.format("Row %s at %s valid, moving to next row at %s ", goodRows, rowStart, nextRowPositionFromIndex))[ FD ]
Line_2 $$ public void verify(boolean extended) throws IOException -->Line_23 $$ outputHandler.output("Extended Verify requested, proceeding to inspect values")[ CD ]
Line_37 $$ DecoratedKey key = null-->Line_54 $$ String keyName = key == null ? "(unreadable key)" : ByteBufferUtil.bytesToHex(key.getKey())[ FD ]
Line_8 $$ if (sstable.descriptor.digestComponent != null && new File(sstable.descriptor.filenameFor(sstable.descriptor.digestComponent)).exists()) -->Line_10 $$ validator.validate()[ CD ]
Line_32 $$ while (!dataFile.isEOF()) -->Line_55 $$ outputHandler.debug(String.format("row %s is %s bytes", keyName, dataSize))[ CD ]
Line_47 $$ nextRowPositionFromIndex = indexFile.isEOF() ? dataFile.length() : rowIndexEntrySerializer.deserialize(indexFile).position-->Line_66 $$ outputHandler.debug(String.format("Row %s at %s valid, moving to next row at %s ", goodRows, rowStart, nextRowPositionFromIndex))[ FD ]
Line_8 $$ if (sstable.descriptor.digestComponent != null && new File(sstable.descriptor.filenameFor(sstable.descriptor.digestComponent)).exists()) -->Line_12 $$ outputHandler.output("Data digest missing, assuming extended verification of disk values")[ CD ]
Line_43 $$ ByteBuffer currentIndexKey = nextIndexKey-->Line_52 $$ long dataStartFromIndex = currentIndexKey == null ? -1 : rowStart + 2 + currentIndexKey.remaining()[ FD ]
Line_2 $$ public void verify(boolean extended) throws IOException -->Line_3 $$ long rowStart = 0[ CD ]
Line_31 $$ DecoratedKey prevKey = null-->Line_65 $$ prevKey = key[ FD ]
Line_44 $$ long nextRowPositionFromIndex = 0-->Line_67 $$ dataFile.seek(nextRowPositionFromIndex)[ FD ]
Line_32 $$ while (!dataFile.isEOF()) -->Line_54 $$ String keyName = key == null ? "(unreadable key)" : ByteBufferUtil.bytesToHex(key.getKey())[ CD ]
Line_43 $$ ByteBuffer currentIndexKey = nextIndexKey-->Line_62 $$ if ((prevKey != null && prevKey.compareTo(key) > 0) || !key.getKey().equals(currentIndexKey) || dataStart != dataStartFromIndex)[ FD ]
Line_32 $$ while (!dataFile.isEOF()) -->Line_36 $$ outputHandler.debug("Reading row at " + rowStart)[ CD ]
Line_2 $$ public void verify(boolean extended) throws IOException -->Line_21 $$ if (!extended)[ CD ]
Line_37 $$ DecoratedKey key = null-->Line_62 $$ if ((prevKey != null && prevKey.compareTo(key) > 0) || !key.getKey().equals(currentIndexKey) || dataStart != dataStartFromIndex)[ FD ]
Line_32 $$ while (!dataFile.isEOF()) -->Line_33 $$ if (verifyInfo.isStopRequested())[ CD ]
Line_2 $$ public void verify(boolean extended) throws IOException -->Line_13 $$ extended = true[ FD ]
Line_32 $$ while (!dataFile.isEOF()) -->Line_37 $$ DecoratedKey key = null[ CD ]
Line_32 $$ while (!dataFile.isEOF()) -->Line_43 $$ ByteBuffer currentIndexKey = nextIndexKey[ CD ]
Line_35 $$ rowStart = dataFile.getFilePointer()-->Line_66 $$ outputHandler.debug(String.format("Row %s at %s valid, moving to next row at %s ", goodRows, rowStart, nextRowPositionFromIndex))[ FD ]
Line_2 $$ public void verify(boolean extended) throws IOException -->Line_21 $$ if (!extended)[ FD ]
Line_39 $$ key = sstable.decorateKey(ByteBufferUtil.readWithShortLength(dataFile))-->Line_54 $$ String keyName = key == null ? "(unreadable key)" : ByteBufferUtil.bytesToHex(key.getKey())[ FD ]
Line_3 $$ long rowStart = 0-->Line_35 $$ rowStart = dataFile.getFilePointer()[ FD ]
Line_28 $$ if (firstRowPositionFromIndex != 0)-->Line_29 $$ markAndThrow()[ CD ]
Line_21 $$ if (!extended)-->Line_22 $$ return[ CD ]
Line_37 $$ DecoratedKey key = null-->Line_39 $$ key = sstable.decorateKey(ByteBufferUtil.readWithShortLength(dataFile))[ FD ]
Line_27 $$ long firstRowPositionFromIndex = rowIndexEntrySerializer.deserialize(indexFile).position-->Line_28 $$ if (firstRowPositionFromIndex != 0)[ FD ]
Line_32 $$ while (!dataFile.isEOF()) -->Line_44 $$ long nextRowPositionFromIndex = 0[ CD ]
Line_8 $$ if (sstable.descriptor.digestComponent != null && new File(sstable.descriptor.filenameFor(sstable.descriptor.digestComponent)).exists()) -->Line_9 $$ validator = DataIntegrityMetadata.fileDigestValidator(sstable.descriptor)[ CD ]
Line_37 $$ DecoratedKey key = null-->Line_65 $$ prevKey = key[ FD ]
Line_2 $$ public void verify(boolean extended) throws IOException -->Line_4 $$ outputHandler.output(String.format("Verifying %s (%s bytes)", sstable, dataFile.length()))[ CD ]
Line_32 $$ while (!dataFile.isEOF()) -->Line_35 $$ rowStart = dataFile.getFilePointer()[ CD ]
