Line_14 $$ byte[] garbage = new byte[compressed.capacity()]-->Line_16 $$ compressed.put(garbage)[ FD ]
Line_4 $$ int n = RandomAccessReader.DEFAULT_BUFFER_SIZE-->Line_32 $$ for (int i = 0; i < n; ++i) assert srcData[i] == result.get(inOffset + i) : "Failed comparison on index: " + i[ FD ]
Line_8 $$ ByteBuffer src = typeIn.allocate(inOffset + n + inOffset)-->Line_19 $$ assertEquals(inOffset + n, src.position())[ FD ]
Line_5 $$ byte[] srcData = new byte[n]-->Line_6 $$ new Random().nextBytes(srcData)[ FD ]
Line_24 $$ ByteBuffer result = typeOut.allocate(inOffset + n + inOffset)-->Line_25 $$ result.position(inOffset).limit(result.capacity() - inOffset)[ FD ]
Line_4 $$ int n = RandomAccessReader.DEFAULT_BUFFER_SIZE-->Line_10 $$ src.put(srcData, 0, n)[ FD ]
Line_24 $$ ByteBuffer result = typeOut.allocate(inOffset + n + inOffset)-->Line_29 $$ assertEquals(result.capacity() - inOffset, result.limit())[ FD ]
Line_13 $$ ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset)-->Line_18 $$ compressor.compress(src, compressed)[ FD ]
Line_24 $$ ByteBuffer result = typeOut.allocate(inOffset + n + inOffset)-->Line_26 $$ compressor.uncompress(compressed, result)[ FD ]
Line_7 $$ final int inOffset = 2-->Line_11 $$ src.flip().position(inOffset)[ FD ]
Line_8 $$ ByteBuffer src = typeIn.allocate(inOffset + n + inOffset)-->Line_9 $$ src.position(inOffset)[ FD ]
Line_24 $$ ByteBuffer result = typeOut.allocate(inOffset + n + inOffset)-->Line_32 $$ assert srcData[i] == result.get(inOffset + i) : "Failed comparison on index: " + i[ FD ]
Line_2 $$ private void testByteBuffers(BufferType typeIn, BufferType typeComp, BufferType typeOut) throws IOException -->Line_13 $$ ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset)[ FD ]
Line_13 $$ ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset)-->Line_21 $$ assertEquals(compressed.capacity() - outOffset, compressed.limit())[ FD ]
Line_13 $$ ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset)-->Line_27 $$ assertEquals(outOffset + len, compressed.position())[ FD ]
Line_14 $$ byte[] garbage = new byte[compressed.capacity()]-->Line_15 $$ new Random().nextBytes(garbage)[ FD ]
Line_24 $$ ByteBuffer result = typeOut.allocate(inOffset + n + inOffset)-->Line_30 $$ int decompressed = result.position() - inOffset[ FD ]
Line_8 $$ ByteBuffer src = typeIn.allocate(inOffset + n + inOffset)-->Line_18 $$ compressor.compress(src, compressed)[ FD ]
Line_13 $$ ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset)-->Line_28 $$ assertEquals(outOffset + len, compressed.limit())[ FD ]
Line_2 $$ private void testByteBuffers(BufferType typeIn, BufferType typeComp, BufferType typeOut) throws IOException -->Line_24 $$ ByteBuffer result = typeOut.allocate(inOffset + n + inOffset)[ FD ]
Line_2 $$ private void testByteBuffers(BufferType typeIn, BufferType typeComp, BufferType typeOut) throws IOException -->Line_8 $$ ByteBuffer src = typeIn.allocate(inOffset + n + inOffset)[ FD ]
Line_13 $$ ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset)-->Line_22 $$ compressed.flip().position(outOffset)[ FD ]
Line_5 $$ byte[] srcData = new byte[n]-->Line_10 $$ src.put(srcData, 0, n)[ FD ]
Line_12 $$ int outOffset = 5-->Line_17 $$ compressed.position(outOffset).limit(compressed.capacity() - outOffset)[ FD ]
Line_13 $$ ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset)-->Line_17 $$ compressed.position(outOffset).limit(compressed.capacity() - outOffset)[ FD ]
Line_8 $$ ByteBuffer src = typeIn.allocate(inOffset + n + inOffset)-->Line_11 $$ src.flip().position(inOffset)[ FD ]
Line_13 $$ ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset)-->Line_14 $$ byte[] garbage = new byte[compressed.capacity()][ FD ]
Line_8 $$ ByteBuffer src = typeIn.allocate(inOffset + n + inOffset)-->Line_20 $$ assertEquals(inOffset + n, src.limit())[ FD ]
Line_7 $$ final int inOffset = 2-->Line_9 $$ src.position(inOffset)[ FD ]
Line_8 $$ ByteBuffer src = typeIn.allocate(inOffset + n + inOffset)-->Line_10 $$ src.put(srcData, 0, n)[ FD ]
Line_13 $$ ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset)-->Line_26 $$ compressor.uncompress(compressed, result)[ FD ]
Line_13 $$ ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset)-->Line_16 $$ compressed.put(garbage)[ FD ]
Line_13 $$ ByteBuffer compressed = typeComp.allocate(outOffset + compressor.initialCompressedBufferLength(srcData.length) + outOffset)-->Line_23 $$ int len = compressed.remaining()[ FD ]
Line_12 $$ int outOffset = 5-->Line_22 $$ compressed.flip().position(outOffset)[ FD ]
Line_7 $$ final int inOffset = 2-->Line_25 $$ result.position(inOffset).limit(result.capacity() - inOffset)[ FD ]
