Line_3 $$ final ByteBuffer buffer = allocateBuffer(size)-->Line_11 $$ buffer.position(i - offset)[ FD ]
Line_2 $$ private void testRead(int offset, int size, int checkInterval) throws IOException -->Line_3 $$ final ByteBuffer buffer = allocateBuffer(size)[ CD ]
Line_2 $$ private void testRead(int offset, int size, int checkInterval) throws IOException -->Line_3 $$ final ByteBuffer buffer = allocateBuffer(size)[ FD ]
Line_3 $$ final ByteBuffer buffer = allocateBuffer(size)-->Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)[ FD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_16 $$ assertTrue(Arrays.equals(expected, ByteBufferUtil.read(reader, remaining).array()))[ CD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_8 $$ reader.seek(i)[ CD ]
Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)-->Line_9 $$ assertFalse(reader.isEOF())[ FD ]
Line_3 $$ final ByteBuffer buffer = allocateBuffer(size)-->Line_19 $$ assertEquals(buffer.capacity() + offset, reader.getFilePointer())[ FD ]
Line_2 $$ private void testRead(int offset, int size, int checkInterval) throws IOException -->Line_22 $$ reader.close()[ CD ]
Line_3 $$ final ByteBuffer buffer = allocateBuffer(size)-->Line_15 $$ buffer.get(expected)[ FD ]
Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)-->Line_16 $$ assertTrue(Arrays.equals(expected, ByteBufferUtil.read(reader, remaining).array()))[ FD ]
Line_3 $$ final ByteBuffer buffer = allocateBuffer(size)-->Line_4 $$ final String path = buffer.toString()[ FD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_11 $$ buffer.position(i - offset)[ CD ]
Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)-->Line_22 $$ reader.close()[ FD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_15 $$ buffer.get(expected)[ CD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_19 $$ assertEquals(buffer.capacity() + offset, reader.getFilePointer())[ CD ]
Line_2 $$ private void testRead(int offset, int size, int checkInterval) throws IOException -->Line_21 $$ reader.close()[ CD ]
Line_12 $$ int remaining = buffer.remaining()-->Line_13 $$ assertEquals(remaining, reader.bytesRemaining())[ FD ]
Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)-->Line_8 $$ reader.seek(i)[ FD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_10 $$ assertEquals(i, reader.getFilePointer())[ FD ]
Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)-->Line_21 $$ reader.close()[ FD ]
Line_14 $$ byte[] expected = new byte[buffer.remaining()]-->Line_16 $$ assertTrue(Arrays.equals(expected, ByteBufferUtil.read(reader, remaining).array()))[ FD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_13 $$ assertEquals(remaining, reader.bytesRemaining())[ CD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_9 $$ assertFalse(reader.isEOF())[ CD ]
Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)-->Line_17 $$ assertTrue(reader.isEOF())[ FD ]
Line_2 $$ private void testRead(int offset, int size, int checkInterval) throws IOException -->Line_6 $$ assertEquals(path, reader.getPath())[ CD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_18 $$ assertEquals(0, reader.bytesRemaining())[ CD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_12 $$ int remaining = buffer.remaining()[ CD ]
Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)-->Line_18 $$ assertEquals(0, reader.bytesRemaining())[ FD ]
Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)-->Line_6 $$ assertEquals(path, reader.getPath())[ FD ]
Line_3 $$ final ByteBuffer buffer = allocateBuffer(size)-->Line_12 $$ int remaining = buffer.remaining()[ FD ]
Line_2 $$ private void testRead(int offset, int size, int checkInterval) throws IOException -->Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) [ FD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_8 $$ reader.seek(i)[ FD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_10 $$ assertEquals(i, reader.getFilePointer())[ CD ]
Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)-->Line_19 $$ assertEquals(buffer.capacity() + offset, reader.getFilePointer())[ FD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_14 $$ byte[] expected = new byte[buffer.remaining()][ CD ]
Line_4 $$ final String path = buffer.toString()-->Line_6 $$ assertEquals(path, reader.getPath())[ FD ]
Line_3 $$ final ByteBuffer buffer = allocateBuffer(size)-->Line_14 $$ byte[] expected = new byte[buffer.remaining()][ FD ]
Line_12 $$ int remaining = buffer.remaining()-->Line_16 $$ assertTrue(Arrays.equals(expected, ByteBufferUtil.read(reader, remaining).array()))[ FD ]
Line_2 $$ private void testRead(int offset, int size, int checkInterval) throws IOException -->Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) [ CD ]
Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)-->Line_13 $$ assertEquals(remaining, reader.bytesRemaining())[ FD ]
Line_14 $$ byte[] expected = new byte[buffer.remaining()]-->Line_15 $$ buffer.get(expected)[ FD ]
Line_7 $$ for (int i = offset; i < (size + offset); i += checkInterval) -->Line_17 $$ assertTrue(reader.isEOF())[ CD ]
Line_2 $$ private void testRead(int offset, int size, int checkInterval) throws IOException -->Line_4 $$ final String path = buffer.toString()[ CD ]
Line_2 $$ private void testRead(int offset, int size, int checkInterval) throws IOException -->Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)[ CD ]
Line_5 $$ FileSegmentInputStream reader = new FileSegmentInputStream(buffer.duplicate(), path, offset)-->Line_10 $$ assertEquals(i, reader.getFilePointer())[ FD ]
