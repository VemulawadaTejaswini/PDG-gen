Line_12 $$ n = Math.min(n, len)-->Line_13 $$ ((ByteBuffer) uncompressedDirectBuf).get(b, off, n)[ FD ]
Line_16 $$ if (compressedDirectBufLen > 0) -->Line_19 $$ n = decompressBytesDirect()[ CD ]
Line_12 $$ n = Math.min(n, len)-->Line_20 $$ uncompressedDirectBuf.limit(n)[ FD ]
Line_2 $$ public synchronized int decompress(byte[] b, int off, int len) throws IOException -->Line_24 $$ n = Math.min(n, len)[ FD ]
Line_10 $$ n = uncompressedDirectBuf.remaining()-->Line_24 $$ n = Math.min(n, len)[ FD ]
Line_9 $$ int n = 0-->Line_13 $$ ((ByteBuffer) uncompressedDirectBuf).get(b, off, n)[ FD ]
Line_10 $$ n = uncompressedDirectBuf.remaining()-->Line_20 $$ uncompressedDirectBuf.limit(n)[ FD ]
Line_2 $$ public synchronized int decompress(byte[] b, int off, int len) throws IOException -->Line_3 $$ if (b == null) [ CD ]
Line_19 $$ n = decompressBytesDirect()-->Line_24 $$ n = Math.min(n, len)[ FD ]
Line_2 $$ public synchronized int decompress(byte[] b, int off, int len) throws IOException -->Line_6 $$ if (off < 0 || len < 0 || off > b.length - len) [ CD ]
Line_2 $$ public synchronized int decompress(byte[] b, int off, int len) throws IOException -->Line_10 $$ n = uncompressedDirectBuf.remaining()[ CD ]
Line_12 $$ n = Math.min(n, len)-->Line_25 $$ ((ByteBuffer) uncompressedDirectBuf).get(b, off, n)[ FD ]
Line_16 $$ if (compressedDirectBufLen > 0) -->Line_21 $$ if (userBufLen <= 0) [ CD ]
Line_24 $$ n = Math.min(n, len)-->Line_25 $$ ((ByteBuffer) uncompressedDirectBuf).get(b, off, n)[ FD ]
Line_9 $$ int n = 0-->Line_20 $$ uncompressedDirectBuf.limit(n)[ FD ]
Line_10 $$ n = uncompressedDirectBuf.remaining()-->Line_12 $$ n = Math.min(n, len)[ FD ]
Line_9 $$ int n = 0-->Line_19 $$ n = decompressBytesDirect()[ FD ]
Line_10 $$ n = uncompressedDirectBuf.remaining()-->Line_13 $$ ((ByteBuffer) uncompressedDirectBuf).get(b, off, n)[ FD ]
Line_19 $$ n = decompressBytesDirect()-->Line_25 $$ ((ByteBuffer) uncompressedDirectBuf).get(b, off, n)[ FD ]
Line_11 $$ if (n > 0) -->Line_14 $$ return n[ CD ]
Line_9 $$ int n = 0-->Line_11 $$ if (n > 0) [ FD ]
Line_2 $$ public synchronized int decompress(byte[] b, int off, int len) throws IOException -->Line_25 $$ ((ByteBuffer) uncompressedDirectBuf).get(b, off, n)[ FD ]
Line_12 $$ n = Math.min(n, len)-->Line_19 $$ n = decompressBytesDirect()[ FD ]
Line_10 $$ n = uncompressedDirectBuf.remaining()-->Line_25 $$ ((ByteBuffer) uncompressedDirectBuf).get(b, off, n)[ FD ]
Line_11 $$ if (n > 0) -->Line_12 $$ n = Math.min(n, len)[ CD ]
Line_9 $$ int n = 0-->Line_25 $$ ((ByteBuffer) uncompressedDirectBuf).get(b, off, n)[ FD ]
Line_2 $$ public synchronized int decompress(byte[] b, int off, int len) throws IOException -->Line_3 $$ if (b == null) [ FD ]
Line_2 $$ public synchronized int decompress(byte[] b, int off, int len) throws IOException -->Line_27 $$ return n[ CD ]
Line_2 $$ public synchronized int decompress(byte[] b, int off, int len) throws IOException -->Line_16 $$ if (compressedDirectBufLen > 0) [ CD ]
Line_16 $$ if (compressedDirectBufLen > 0) -->Line_20 $$ uncompressedDirectBuf.limit(n)[ CD ]
Line_10 $$ n = uncompressedDirectBuf.remaining()-->Line_11 $$ if (n > 0) [ FD ]
Line_2 $$ public synchronized int decompress(byte[] b, int off, int len) throws IOException -->Line_13 $$ ((ByteBuffer) uncompressedDirectBuf).get(b, off, n)[ FD ]
Line_16 $$ if (compressedDirectBufLen > 0) -->Line_17 $$ uncompressedDirectBuf.rewind()[ CD ]
Line_10 $$ n = uncompressedDirectBuf.remaining()-->Line_19 $$ n = decompressBytesDirect()[ FD ]
Line_2 $$ public synchronized int decompress(byte[] b, int off, int len) throws IOException -->Line_9 $$ int n = 0[ CD ]
Line_2 $$ public synchronized int decompress(byte[] b, int off, int len) throws IOException -->Line_12 $$ n = Math.min(n, len)[ FD ]
Line_9 $$ int n = 0-->Line_12 $$ n = Math.min(n, len)[ FD ]
Line_16 $$ if (compressedDirectBufLen > 0) -->Line_18 $$ uncompressedDirectBuf.limit(directBufferSize)[ CD ]
Line_16 $$ if (compressedDirectBufLen > 0) -->Line_24 $$ n = Math.min(n, len)[ CD ]
Line_9 $$ int n = 0-->Line_24 $$ n = Math.min(n, len)[ FD ]
Line_11 $$ if (n > 0) -->Line_13 $$ ((ByteBuffer) uncompressedDirectBuf).get(b, off, n)[ CD ]
Line_9 $$ int n = 0-->Line_10 $$ n = uncompressedDirectBuf.remaining()[ FD ]
Line_2 $$ public synchronized int decompress(byte[] b, int off, int len) throws IOException -->Line_11 $$ if (n > 0) [ CD ]
Line_19 $$ n = decompressBytesDirect()-->Line_20 $$ uncompressedDirectBuf.limit(n)[ FD ]
Line_16 $$ if (compressedDirectBufLen > 0) -->Line_25 $$ ((ByteBuffer) uncompressedDirectBuf).get(b, off, n)[ CD ]
Line_12 $$ n = Math.min(n, len)-->Line_24 $$ n = Math.min(n, len)[ FD ]
