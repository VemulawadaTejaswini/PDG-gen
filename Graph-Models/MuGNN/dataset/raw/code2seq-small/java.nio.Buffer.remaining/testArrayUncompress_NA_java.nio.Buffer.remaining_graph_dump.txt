Line_14 $$ final int restoreOffset = 5-->Line_19 $$ final int decompressedLength = compressor.uncompress(compressedBytes, outOffset, compressed.remaining(), restored, restoreOffset)[ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_7 $$ src.flip().position(inOffset)[ CD ]
Line_8 $$ final int outOffset = 3-->Line_13 $$ compressed.flip().position(outOffset)[ FD ]
Line_9 $$ final ByteBuffer compressed = makeBB(outOffset + compressor.initialCompressedBufferLength(len))-->Line_10 $$ fillBBWithRandom(compressed)[ FD ]
Line_4 $$ ByteBuffer src = makeBB(len + inOffset)-->Line_7 $$ src.flip().position(inOffset)[ FD ]
Line_17 $$ byte[] compressedBytes = new byte[compressed.capacity()]-->Line_19 $$ final int decompressedLength = compressor.uncompress(compressedBytes, outOffset, compressed.remaining(), restored, restoreOffset)[ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_6 $$ src.put(data, off, len)[ CD ]
Line_8 $$ final int outOffset = 3-->Line_11 $$ compressed.position(outOffset)[ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_14 $$ final int restoreOffset = 5[ CD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_20 $$ assertEquals(decompressedLength, len)[ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_21 $$ assertArrayEquals(Arrays.copyOfRange(data, off, off + len), Arrays.copyOfRange(restored, restoreOffset, restoreOffset + decompressedLength))[ FD ]
Line_17 $$ byte[] compressedBytes = new byte[compressed.capacity()]-->Line_18 $$ ByteBufferUtil.arrayCopy(compressed, outOffset, compressedBytes, outOffset, compressed.capacity() - outOffset)[ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_8 $$ final int outOffset = 3[ CD ]
Line_3 $$ final int inOffset = 2-->Line_7 $$ src.flip().position(inOffset)[ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_19 $$ final int decompressedLength = compressor.uncompress(compressedBytes, outOffset, compressed.remaining(), restored, restoreOffset)[ CD ]
Line_9 $$ final ByteBuffer compressed = makeBB(outOffset + compressor.initialCompressedBufferLength(len))-->Line_17 $$ byte[] compressedBytes = new byte[compressed.capacity()][ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_21 $$ assertArrayEquals(Arrays.copyOfRange(data, off, off + len), Arrays.copyOfRange(restored, restoreOffset, restoreOffset + decompressedLength))[ CD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_6 $$ src.put(data, off, len)[ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_9 $$ final ByteBuffer compressed = makeBB(outOffset + compressor.initialCompressedBufferLength(len))[ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_13 $$ compressed.flip().position(outOffset)[ CD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_17 $$ byte[] compressedBytes = new byte[compressed.capacity()][ CD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_12 $$ compressor.compress(src, compressed)[ CD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_16 $$ new Random().nextBytes(restored)[ CD ]
Line_8 $$ final int outOffset = 3-->Line_19 $$ final int decompressedLength = compressor.uncompress(compressedBytes, outOffset, compressed.remaining(), restored, restoreOffset)[ FD ]
Line_15 $$ final byte[] restored = new byte[restoreOffset + len]-->Line_21 $$ assertArrayEquals(Arrays.copyOfRange(data, off, off + len), Arrays.copyOfRange(restored, restoreOffset, restoreOffset + decompressedLength))[ FD ]
Line_14 $$ final int restoreOffset = 5-->Line_21 $$ assertArrayEquals(Arrays.copyOfRange(data, off, off + len), Arrays.copyOfRange(restored, restoreOffset, restoreOffset + decompressedLength))[ FD ]
Line_9 $$ final ByteBuffer compressed = makeBB(outOffset + compressor.initialCompressedBufferLength(len))-->Line_19 $$ final int decompressedLength = compressor.uncompress(compressedBytes, outOffset, compressed.remaining(), restored, restoreOffset)[ FD ]
Line_4 $$ ByteBuffer src = makeBB(len + inOffset)-->Line_12 $$ compressor.compress(src, compressed)[ FD ]
Line_9 $$ final ByteBuffer compressed = makeBB(outOffset + compressor.initialCompressedBufferLength(len))-->Line_13 $$ compressed.flip().position(outOffset)[ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_3 $$ final int inOffset = 2[ CD ]
Line_4 $$ ByteBuffer src = makeBB(len + inOffset)-->Line_6 $$ src.put(data, off, len)[ FD ]
Line_15 $$ final byte[] restored = new byte[restoreOffset + len]-->Line_19 $$ final int decompressedLength = compressor.uncompress(compressedBytes, outOffset, compressed.remaining(), restored, restoreOffset)[ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_18 $$ ByteBufferUtil.arrayCopy(compressed, outOffset, compressedBytes, outOffset, compressed.capacity() - outOffset)[ CD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_4 $$ ByteBuffer src = makeBB(len + inOffset)[ CD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_15 $$ final byte[] restored = new byte[restoreOffset + len][ CD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_20 $$ assertEquals(decompressedLength, len)[ CD ]
Line_4 $$ ByteBuffer src = makeBB(len + inOffset)-->Line_5 $$ src.position(inOffset)[ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_9 $$ final ByteBuffer compressed = makeBB(outOffset + compressor.initialCompressedBufferLength(len))[ CD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_5 $$ src.position(inOffset)[ CD ]
Line_19 $$ final int decompressedLength = compressor.uncompress(compressedBytes, outOffset, compressed.remaining(), restored, restoreOffset)-->Line_20 $$ assertEquals(decompressedLength, len)[ FD ]
Line_8 $$ final int outOffset = 3-->Line_18 $$ ByteBufferUtil.arrayCopy(compressed, outOffset, compressedBytes, outOffset, compressed.capacity() - outOffset)[ FD ]
Line_9 $$ final ByteBuffer compressed = makeBB(outOffset + compressor.initialCompressedBufferLength(len))-->Line_12 $$ compressor.compress(src, compressed)[ FD ]
Line_9 $$ final ByteBuffer compressed = makeBB(outOffset + compressor.initialCompressedBufferLength(len))-->Line_11 $$ compressed.position(outOffset)[ FD ]
Line_9 $$ final ByteBuffer compressed = makeBB(outOffset + compressor.initialCompressedBufferLength(len))-->Line_18 $$ ByteBufferUtil.arrayCopy(compressed, outOffset, compressedBytes, outOffset, compressed.capacity() - outOffset)[ FD ]
Line_3 $$ final int inOffset = 2-->Line_5 $$ src.position(inOffset)[ FD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_10 $$ fillBBWithRandom(compressed)[ CD ]
Line_2 $$ public void testArrayUncompress(byte[] data, int off, int len) throws IOException -->Line_11 $$ compressed.position(outOffset)[ CD ]
Line_15 $$ final byte[] restored = new byte[restoreOffset + len]-->Line_16 $$ new Random().nextBytes(restored)[ FD ]
