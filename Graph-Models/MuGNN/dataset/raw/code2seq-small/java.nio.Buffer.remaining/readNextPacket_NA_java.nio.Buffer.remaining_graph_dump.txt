Line_2 $$ private void readNextPacket() throws IOException -->Line_4 $$ PacketHeader curHeader = packetReceiver.getHeader()[ CD ]
Line_18 $$ if (verifyChecksum && curDataSlice.remaining() > 0) -->Line_19 $$ checksum.verifyChunkedSums(curDataSlice, packetReceiver.getChecksumSlice(), filename, curHeader.getOffsetInBlock())[ CD ]
Line_13 $$ if (curHeader.getDataLen() > 0) -->Line_21 $$ bytesNeededToFinish -= curHeader.getDataLen()[ CD ]
Line_24 $$ int newPos = (int) (startOffset - curHeader.getOffsetInBlock())-->Line_25 $$ curDataSlice.position(newPos)[ FD ]
Line_13 $$ if (curHeader.getDataLen() > 0) -->Line_15 $$ int checksumsLen = chunks * checksumSize[ CD ]
Line_2 $$ private void readNextPacket() throws IOException -->Line_27 $$ if (bytesNeededToFinish <= 0) [ CD ]
Line_27 $$ if (bytesNeededToFinish <= 0) -->Line_29 $$ if (verifyChecksum) [ CD ]
Line_7 $$ if (LOG.isTraceEnabled()) -->Line_8 $$ LOG.trace("DFSClient readNextPacket got header " + curHeader)[ CD ]
Line_4 $$ PacketHeader curHeader = packetReceiver.getHeader()-->Line_10 $$ if (!curHeader.sanityCheck(lastSeqNo)) [ FD ]
Line_4 $$ PacketHeader curHeader = packetReceiver.getHeader()-->Line_19 $$ checksum.verifyChunkedSums(curDataSlice, packetReceiver.getChecksumSlice(), filename, curHeader.getOffsetInBlock())[ FD ]
Line_4 $$ PacketHeader curHeader = packetReceiver.getHeader()-->Line_24 $$ int newPos = (int) (startOffset - curHeader.getOffsetInBlock())[ FD ]
Line_13 $$ if (curHeader.getDataLen() > 0) -->Line_14 $$ int chunks = 1 + (curHeader.getDataLen() - 1) / bytesPerChecksum[ CD ]
Line_4 $$ PacketHeader curHeader = packetReceiver.getHeader()-->Line_6 $$ assert curDataSlice.capacity() == curHeader.getDataLen()[ FD ]
Line_27 $$ if (bytesNeededToFinish <= 0) -->Line_28 $$ readTrailingEmptyPacket()[ CD ]
Line_2 $$ private void readNextPacket() throws IOException -->Line_5 $$ curDataSlice = packetReceiver.getDataSlice()[ CD ]
Line_2 $$ private void readNextPacket() throws IOException -->Line_13 $$ if (curHeader.getDataLen() > 0) [ CD ]
Line_4 $$ PacketHeader curHeader = packetReceiver.getHeader()-->Line_13 $$ if (curHeader.getDataLen() > 0) [ FD ]
Line_4 $$ PacketHeader curHeader = packetReceiver.getHeader()-->Line_21 $$ bytesNeededToFinish -= curHeader.getDataLen()[ FD ]
Line_2 $$ private void readNextPacket() throws IOException -->Line_7 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_4 $$ PacketHeader curHeader = packetReceiver.getHeader()-->Line_17 $$ lastSeqNo = curHeader.getSeqno()[ FD ]
Line_2 $$ private void readNextPacket() throws IOException -->Line_23 $$ if (curHeader.getOffsetInBlock() < startOffset) [ CD ]
Line_13 $$ if (curHeader.getDataLen() > 0) -->Line_18 $$ if (verifyChecksum && curDataSlice.remaining() > 0) [ CD ]
Line_13 $$ if (curHeader.getDataLen() > 0) -->Line_17 $$ lastSeqNo = curHeader.getSeqno()[ CD ]
Line_2 $$ private void readNextPacket() throws IOException -->Line_10 $$ if (!curHeader.sanityCheck(lastSeqNo)) [ CD ]
Line_29 $$ if (verifyChecksum) -->Line_30 $$ sendReadResult(Status.CHECKSUM_OK)[ CD ]
Line_23 $$ if (curHeader.getOffsetInBlock() < startOffset) -->Line_24 $$ int newPos = (int) (startOffset - curHeader.getOffsetInBlock())[ CD ]
Line_23 $$ if (curHeader.getOffsetInBlock() < startOffset) -->Line_25 $$ curDataSlice.position(newPos)[ CD ]
Line_4 $$ PacketHeader curHeader = packetReceiver.getHeader()-->Line_23 $$ if (curHeader.getOffsetInBlock() < startOffset) [ FD ]
Line_4 $$ PacketHeader curHeader = packetReceiver.getHeader()-->Line_14 $$ int chunks = 1 + (curHeader.getDataLen() - 1) / bytesPerChecksum[ FD ]
Line_29 $$ if (verifyChecksum) -->Line_32 $$ sendReadResult(Status.SUCCESS)[ CD ]
Line_2 $$ private void readNextPacket() throws IOException -->Line_3 $$ packetReceiver.receiveNextPacket(in)[ CD ]
