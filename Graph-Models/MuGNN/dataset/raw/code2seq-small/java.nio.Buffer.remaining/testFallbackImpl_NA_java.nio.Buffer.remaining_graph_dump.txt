Line_7 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 5000)-->Line_8 $$ Assert.assertEquals(5000, result.remaining())[ FD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)[ FD ]
Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)-->Line_10 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 9999999)[ FD ]
Line_7 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 5000)-->Line_13 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)[ FD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_6 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 0, 10), byteBufferToArray(result))[ CD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_5 $$ Assert.assertEquals(10, result.remaining())[ CD ]
Line_3 $$ RestrictedAllocatingByteBufferPool bufferPool = new RestrictedAllocatingByteBufferPool(stream instanceof ByteBufferReadable)-->Line_13 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)[ FD ]
Line_13 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)-->Line_14 $$ Assert.assertNull(result)[ FD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)[ CD ]
Line_7 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 5000)-->Line_12 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 5010, 16385), byteBufferToArray(result))[ FD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_13 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)[ CD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_11 $$ Assert.assertEquals(11375, result.remaining())[ CD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_14 $$ Assert.assertNull(result)[ CD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_7 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 5000)[ FD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_7 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 5000)[ CD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_10 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 9999999)[ FD ]
Line_10 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 9999999)-->Line_11 $$ Assert.assertEquals(11375, result.remaining())[ FD ]
Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)-->Line_12 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 5010, 16385), byteBufferToArray(result))[ FD ]
Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)-->Line_14 $$ Assert.assertNull(result)[ FD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_3 $$ RestrictedAllocatingByteBufferPool bufferPool = new RestrictedAllocatingByteBufferPool(stream instanceof ByteBufferReadable)[ CD ]
Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)-->Line_7 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 5000)[ FD ]
Line_10 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 9999999)-->Line_14 $$ Assert.assertNull(result)[ FD ]
Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)-->Line_8 $$ Assert.assertEquals(5000, result.remaining())[ FD ]
Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)-->Line_9 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 10, 5010), byteBufferToArray(result))[ FD ]
Line_3 $$ RestrictedAllocatingByteBufferPool bufferPool = new RestrictedAllocatingByteBufferPool(stream instanceof ByteBufferReadable)-->Line_7 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 5000)[ FD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_8 $$ Assert.assertEquals(5000, result.remaining())[ CD ]
Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)-->Line_11 $$ Assert.assertEquals(11375, result.remaining())[ FD ]
Line_3 $$ RestrictedAllocatingByteBufferPool bufferPool = new RestrictedAllocatingByteBufferPool(stream instanceof ByteBufferReadable)-->Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)[ FD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_12 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 5010, 16385), byteBufferToArray(result))[ FD ]
Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)-->Line_5 $$ Assert.assertEquals(10, result.remaining())[ FD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_10 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 9999999)[ CD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_6 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 0, 10), byteBufferToArray(result))[ FD ]
Line_7 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 5000)-->Line_9 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 10, 5010), byteBufferToArray(result))[ FD ]
Line_3 $$ RestrictedAllocatingByteBufferPool bufferPool = new RestrictedAllocatingByteBufferPool(stream instanceof ByteBufferReadable)-->Line_10 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 9999999)[ FD ]
Line_7 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 5000)-->Line_11 $$ Assert.assertEquals(11375, result.remaining())[ FD ]
Line_10 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 9999999)-->Line_12 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 5010, 16385), byteBufferToArray(result))[ FD ]
Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)-->Line_13 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)[ FD ]
Line_7 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 5000)-->Line_10 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 9999999)[ FD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_13 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)[ FD ]
Line_4 $$ ByteBuffer result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)-->Line_6 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 0, 10), byteBufferToArray(result))[ FD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_9 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 10, 5010), byteBufferToArray(result))[ CD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_12 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 5010, 16385), byteBufferToArray(result))[ CD ]
Line_10 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 9999999)-->Line_13 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 10)[ FD ]
Line_7 $$ result = ByteBufferUtil.fallbackRead(stream, bufferPool, 5000)-->Line_14 $$ Assert.assertNull(result)[ FD ]
Line_2 $$ private static void testFallbackImpl(InputStream stream, byte[] original) throws Exception -->Line_9 $$ Assert.assertArrayEquals(Arrays.copyOfRange(original, 10, 5010), byteBufferToArray(result))[ FD ]
