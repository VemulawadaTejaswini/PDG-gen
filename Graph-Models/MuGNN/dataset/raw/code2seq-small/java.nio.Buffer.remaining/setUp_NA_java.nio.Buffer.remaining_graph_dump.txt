Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_9 $$ smallM = sb.toString()[ FD ]
Line_20 $$ hole = new BufferedOutputStream(new OutputStream() -->Line_25 $$ bh.consume(b)[ FD ]
Line_20 $$ hole = new BufferedOutputStream(new OutputStream() -->Line_22 $$ bh.consume(b)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_5 $$ sb.append(BufferedDataOutputStreamTest.fourByte)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.append(smallM)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ while (sb.length() < 1024 * 12) [ FD ]
Line_34 $$ streamB = new BufferedDataOutputStreamPlus(new WritableByteChannel() -->Line_42 $$ int remaining = src.remaining()[ CD ]
Line_20 $$ hole = new BufferedOutputStream(new OutputStream() -->Line_25 $$ bh.consume(b)[ CD ]
Line_15 $$ sb = new StringBuilder()-->Line_17 $$ sb.append(smallM)[ FD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_9 $$ smallM = sb.toString()[ CD ]
Line_34 $$ streamB = new BufferedDataOutputStreamPlus(new WritableByteChannel() -->Line_42 $$ int remaining = src.remaining()[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_7 $$ sb.append(BufferedDataOutputStreamTest.twoByte)[ FD ]
Line_10 $$ sb = new StringBuilder()-->Line_11 $$ while (sb.length() < 1024 * 12) [ FD ]
Line_10 $$ sb = new StringBuilder()-->Line_17 $$ sb.append(smallM)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_6 $$ sb.append(BufferedDataOutputStreamTest.threeByte)[ FD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_25 $$ bh.consume(b)[ FD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_14 $$ large = sb.toString()[ CD ]
Line_15 $$ sb = new StringBuilder()-->Line_16 $$ while (sb.length() < 1024 * 12) [ FD ]
Line_34 $$ streamB = new BufferedDataOutputStreamPlus(new WritableByteChannel() -->Line_43 $$ src.position(src.limit())[ CD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_10 $$ sb = new StringBuilder()[ CD ]
Line_11 $$ while (sb.length() < 1024 * 12) -->Line_12 $$ sb.append(small)[ CD ]
Line_34 $$ streamB = new BufferedDataOutputStreamPlus(new WritableByteChannel() -->Line_36 $$ return true[ CD ]
Line_10 $$ sb = new StringBuilder()-->Line_15 $$ sb = new StringBuilder()[ FD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_19 $$ largeM = sb.toString()[ CD ]
Line_15 $$ sb = new StringBuilder()-->Line_19 $$ largeM = sb.toString()[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(small)[ FD ]
Line_20 $$ hole = new BufferedOutputStream(new OutputStream() -->Line_22 $$ bh.consume(b)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ largeM = sb.toString()[ FD ]
Line_20 $$ hole = new BufferedOutputStream(new OutputStream() -->Line_29 $$ bh.consume(a)[ CD ]
Line_20 $$ hole = new BufferedOutputStream(new OutputStream() -->Line_28 $$ bh.consume(b)[ CD ]
Line_34 $$ streamB = new BufferedDataOutputStreamPlus(new WritableByteChannel() -->Line_43 $$ src.position(src.limit())[ FD ]
Line_10 $$ sb = new StringBuilder()-->Line_14 $$ large = sb.toString()[ FD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_16 $$ while (sb.length() < 1024 * 12) [ CD ]
Line_10 $$ sb = new StringBuilder()-->Line_19 $$ largeM = sb.toString()[ FD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_29 $$ bh.consume(a)[ FD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_22 $$ bh.consume(b)[ FD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_30 $$ bh.consume(c)[ FD ]
Line_4 $$ for (int ii = 0; ii < 11; ii++) -->Line_6 $$ sb.append(BufferedDataOutputStreamTest.threeByte)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb = new StringBuilder()[ FD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_11 $$ while (sb.length() < 1024 * 12) [ CD ]
Line_10 $$ sb = new StringBuilder()-->Line_12 $$ sb.append(small)[ FD ]
Line_10 $$ sb = new StringBuilder()-->Line_16 $$ while (sb.length() < 1024 * 12) [ FD ]
Line_34 $$ streamB = new BufferedDataOutputStreamPlus(new WritableByteChannel() -->Line_41 $$ bh.consume(src)[ FD ]
Line_4 $$ for (int ii = 0; ii < 11; ii++) -->Line_5 $$ sb.append(BufferedDataOutputStreamTest.fourByte)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ while (sb.length() < 1024 * 12) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ sb = new StringBuilder()[ FD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_41 $$ bh.consume(src)[ FD ]
Line_4 $$ for (int ii = 0; ii < 11; ii++) -->Line_7 $$ sb.append(BufferedDataOutputStreamTest.twoByte)[ CD ]
Line_20 $$ hole = new BufferedOutputStream(new OutputStream() -->Line_29 $$ bh.consume(a)[ FD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_4 $$ for (int ii = 0; ii < 11; ii++) [ CD ]
Line_20 $$ hole = new BufferedOutputStream(new OutputStream() -->Line_30 $$ bh.consume(c)[ FD ]
Line_34 $$ streamB = new BufferedDataOutputStreamPlus(new WritableByteChannel() -->Line_41 $$ bh.consume(src)[ CD ]
Line_20 $$ hole = new BufferedOutputStream(new OutputStream() -->Line_30 $$ bh.consume(c)[ CD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ large = sb.toString()[ FD ]
Line_20 $$ hole = new BufferedOutputStream(new OutputStream() -->Line_28 $$ bh.consume(b)[ FD ]
Line_34 $$ streamB = new BufferedDataOutputStreamPlus(new WritableByteChannel() -->Line_44 $$ return remaining[ CD ]
Line_16 $$ while (sb.length() < 1024 * 12) -->Line_17 $$ sb.append(smallM)[ CD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_28 $$ bh.consume(b)[ FD ]
Line_2 $$ public void setUp(final Blackhole bh) -->Line_15 $$ sb = new StringBuilder()[ CD ]
