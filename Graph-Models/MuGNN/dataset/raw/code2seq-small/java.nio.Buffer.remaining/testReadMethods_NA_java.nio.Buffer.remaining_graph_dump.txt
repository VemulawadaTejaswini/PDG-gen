Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_47 $$ assertEquals(Short.MIN_VALUE, reader.readShort())[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_24 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_48 $$ assertEquals("utf", reader.readUTF())[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_35 $$ reader.limit(buffer.remaining() + 4)[ FD ]
Line_2 $$ public void testReadMethods() throws IOException -->Line_23 $$ CRC32 crc = new CRC32()[ CD ]
Line_37 $$ byte[] bytes = new byte[b.length]-->Line_39 $$ assertTrue(Arrays.equals(bytes, b))[ FD ]
Line_2 $$ public void testReadMethods() throws IOException -->Line_5 $$ ByteBuffer buffer[ CD ]
Line_3 $$ byte[] b = new byte[RandomAccessReader.DEFAULT_BUFFER_SIZE * 2]-->Line_39 $$ assertTrue(Arrays.equals(bytes, b))[ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_11 $$ out.writeChar('t')[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_21 $$ buffer = out.buffer()[ FD ]
Line_2 $$ public void testReadMethods() throws IOException -->Line_25 $$ File file = File.createTempFile("testReadMethods", "1")[ CD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_41 $$ assertEquals(10, reader.readByte())[ FD ]
Line_3 $$ byte[] b = new byte[RandomAccessReader.DEFAULT_BUFFER_SIZE * 2]-->Line_8 $$ out.write(b)[ FD ]
Line_25 $$ File file = File.createTempFile("testReadMethods", "1")-->Line_26 $$ file.deleteOnExit()[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_28 $$ writer.write(buffer)[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_36 $$ assertEquals(127, reader.read())[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_42 $$ assertEquals('t', reader.readChar())[ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_9 $$ out.writeBoolean(false)[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_40 $$ assertEquals(false, reader.readBoolean())[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_35 $$ reader.limit(buffer.remaining() + 4)[ FD ]
Line_2 $$ public void testReadMethods() throws IOException -->Line_26 $$ file.deleteOnExit()[ CD ]
Line_2 $$ public void testReadMethods() throws IOException -->Line_24 $$ FBUtilities.updateChecksum(crc, buffer)[ CD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_54 $$ reader.checkLimit(0)[ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_20 $$ out.writeBytes("abcdefghi")[ FD ]
Line_23 $$ CRC32 crc = new CRC32()-->Line_29 $$ writer.writeInt((int) crc.getValue())[ FD ]
Line_2 $$ public void testReadMethods() throws IOException -->Line_32 $$ assertTrue(file.exists())[ CD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_53 $$ assertEquals(0, reader.bytesRemaining())[ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_8 $$ out.write(b)[ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_10 $$ out.writeByte(10)[ FD ]
Line_25 $$ File file = File.createTempFile("testReadMethods", "1")-->Line_27 $$ try (SequentialWriter writer = SequentialWriter.open(file)) [ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_13 $$ out.writeFloat(2.2f)[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_44 $$ assertEquals(2.2f, reader.readFloat())[ FD ]
Line_27 $$ try (SequentialWriter writer = SequentialWriter.open(file)) -->Line_29 $$ writer.writeInt((int) crc.getValue())[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_49 $$ assertEquals(67L, reader.readVInt())[ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_12 $$ out.writeDouble(3.3)[ FD ]
Line_25 $$ File file = File.createTempFile("testReadMethods", "1")-->Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) [ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_15 $$ out.writeLong(Long.MAX_VALUE)[ FD ]
Line_2 $$ public void testReadMethods() throws IOException -->Line_4 $$ for (int i = 0; i < b.length; i++) b[i] = (byte) i[ CD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_14 $$ out.writeInt(42)[ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_21 $$ buffer = out.buffer()[ FD ]
Line_27 $$ try (SequentialWriter writer = SequentialWriter.open(file)) -->Line_30 $$ writer.finish()[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_33 $$ assertEquals(buffer.remaining() + 4, file.length())[ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_18 $$ out.writeVInt(67L)[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_46 $$ assertEquals(Long.MAX_VALUE, reader.readLong())[ FD ]
Line_2 $$ public void testReadMethods() throws IOException -->Line_33 $$ assertEquals(buffer.remaining() + 4, file.length())[ CD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_17 $$ out.writeUTF("utf")[ FD ]
Line_23 $$ CRC32 crc = new CRC32()-->Line_24 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_21 $$ buffer = out.buffer()-->Line_33 $$ assertEquals(buffer.remaining() + 4, file.length())[ FD ]
Line_37 $$ byte[] bytes = new byte[b.length]-->Line_38 $$ reader.readFully(bytes)[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_50 $$ assertEquals(88L, reader.readUnsignedVInt())[ FD ]
Line_21 $$ buffer = out.buffer()-->Line_35 $$ reader.limit(buffer.remaining() + 4)[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_52 $$ assertTrue(reader.checkCrc())[ FD ]
Line_21 $$ buffer = out.buffer()-->Line_24 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_25 $$ File file = File.createTempFile("testReadMethods", "1")-->Line_32 $$ assertTrue(file.exists())[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_38 $$ reader.readFully(bytes)[ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_7 $$ out.write(127)[ FD ]
Line_27 $$ try (SequentialWriter writer = SequentialWriter.open(file)) -->Line_28 $$ writer.write(buffer)[ FD ]
Line_21 $$ buffer = out.buffer()-->Line_28 $$ writer.write(buffer)[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_51 $$ assertEquals("abcdefghi", new String(ByteBufferUtil.read(reader, 9).array(), StandardCharsets.UTF_8))[ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_19 $$ out.writeUnsignedVInt(88L)[ FD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_45 $$ assertEquals(42, reader.readInt())[ FD ]
Line_6 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_16 $$ out.writeShort(Short.MIN_VALUE)[ FD ]
Line_25 $$ File file = File.createTempFile("testReadMethods", "1")-->Line_33 $$ assertEquals(buffer.remaining() + 4, file.length())[ FD ]
Line_2 $$ public void testReadMethods() throws IOException -->Line_3 $$ byte[] b = new byte[RandomAccessReader.DEFAULT_BUFFER_SIZE * 2][ CD ]
Line_34 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_43 $$ assertEquals(3.3, reader.readDouble())[ FD ]
