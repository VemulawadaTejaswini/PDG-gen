Line_9 $$ ByteBuffer buf = ByteBuffer.allocate(dob.getLength())-->Line_15 $$ dib.reset(buf.array(), 0, buf.remaining())[ FD ]
Line_2 $$ public void TestDataOutputByteBufferCompatibility() throws IOException -->Line_16 $$ readJunk(dib, r, seed, 1000)[ CD ]
Line_2 $$ public void TestDataOutputByteBufferCompatibility() throws IOException -->Line_13 $$ buf.flip()[ CD ]
Line_5 $$ long seed = r.nextLong()-->Line_8 $$ writeJunk(dob, r, seed, 1000)[ FD ]
Line_14 $$ DataInputBuffer dib = new DataInputBuffer()-->Line_16 $$ readJunk(dib, r, seed, 1000)[ FD ]
Line_14 $$ DataInputBuffer dib = new DataInputBuffer()-->Line_15 $$ dib.reset(buf.array(), 0, buf.remaining())[ FD ]
Line_2 $$ public void TestDataOutputByteBufferCompatibility() throws IOException -->Line_15 $$ dib.reset(buf.array(), 0, buf.remaining())[ CD ]
Line_3 $$ DataOutputByteBuffer dob = new DataOutputByteBuffer()-->Line_8 $$ writeJunk(dob, r, seed, 1000)[ FD ]
Line_5 $$ long seed = r.nextLong()-->Line_16 $$ readJunk(dib, r, seed, 1000)[ FD ]
Line_9 $$ ByteBuffer buf = ByteBuffer.allocate(dob.getLength())-->Line_13 $$ buf.flip()[ FD ]
Line_2 $$ public void TestDataOutputByteBufferCompatibility() throws IOException -->Line_3 $$ DataOutputByteBuffer dob = new DataOutputByteBuffer()[ CD ]
Line_5 $$ long seed = r.nextLong()-->Line_6 $$ r.setSeed(seed)[ FD ]
Line_4 $$ Random r = new Random()-->Line_16 $$ readJunk(dib, r, seed, 1000)[ FD ]
Line_2 $$ public void TestDataOutputByteBufferCompatibility() throws IOException -->Line_9 $$ ByteBuffer buf = ByteBuffer.allocate(dob.getLength())[ CD ]
Line_2 $$ public void TestDataOutputByteBufferCompatibility() throws IOException -->Line_7 $$ System.out.println("SEED: " + seed)[ CD ]
Line_2 $$ public void TestDataOutputByteBufferCompatibility() throws IOException -->Line_5 $$ long seed = r.nextLong()[ CD ]
Line_2 $$ public void TestDataOutputByteBufferCompatibility() throws IOException -->Line_14 $$ DataInputBuffer dib = new DataInputBuffer()[ CD ]
Line_9 $$ ByteBuffer buf = ByteBuffer.allocate(dob.getLength())-->Line_11 $$ buf.put(b)[ FD ]
Line_10 $$ for (ByteBuffer b : dob.getData()) -->Line_11 $$ buf.put(b)[ FD ]
Line_4 $$ Random r = new Random()-->Line_8 $$ writeJunk(dob, r, seed, 1000)[ FD ]
Line_2 $$ public void TestDataOutputByteBufferCompatibility() throws IOException -->Line_4 $$ Random r = new Random()[ CD ]
Line_2 $$ public void TestDataOutputByteBufferCompatibility() throws IOException -->Line_8 $$ writeJunk(dob, r, seed, 1000)[ CD ]
Line_3 $$ DataOutputByteBuffer dob = new DataOutputByteBuffer()-->Line_9 $$ ByteBuffer buf = ByteBuffer.allocate(dob.getLength())[ FD ]
Line_4 $$ Random r = new Random()-->Line_5 $$ long seed = r.nextLong()[ FD ]
Line_3 $$ DataOutputByteBuffer dob = new DataOutputByteBuffer()-->Line_10 $$ for (ByteBuffer b : dob.getData()) [ FD ]
Line_2 $$ public void TestDataOutputByteBufferCompatibility() throws IOException -->Line_6 $$ r.setSeed(seed)[ CD ]
Line_4 $$ Random r = new Random()-->Line_6 $$ r.setSeed(seed)[ FD ]
