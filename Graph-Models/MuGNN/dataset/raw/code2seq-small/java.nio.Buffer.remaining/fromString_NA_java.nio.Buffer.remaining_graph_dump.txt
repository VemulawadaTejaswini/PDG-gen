Line_6 $$ int totalLength = 0, i = 0-->Line_17 $$ ParsedComparator p = parseComparator(i, part)[ FD ]
Line_26 $$ ByteBuffer bb = ByteBuffer.allocate(totalLength)-->Line_29 $$ comparators.get(i).serializeComparator(bb)[ FD ]
Line_2 $$ public ByteBuffer fromString(String source) -->Line_7 $$ boolean lastByteIsOne = false[ CD ]
Line_20 $$ ByteBuffer component = type.fromString(unescape(part))-->Line_31 $$ bb.put(component)[ FD ]
Line_8 $$ boolean lastByteIsMinusOne = false-->Line_35 $$ if (lastByteIsOne)[ FD ]
Line_14 $$ lastByteIsMinusOne = true-->Line_35 $$ if (lastByteIsOne)[ FD ]
Line_17 $$ ParsedComparator p = parseComparator(i, part)-->Line_19 $$ part = p.getRemainingPart()[ FD ]
Line_9 $$ for (String part : parts) -->Line_17 $$ ParsedComparator p = parseComparator(i, part)[ FD ]
Line_19 $$ part = p.getRemainingPart()-->Line_20 $$ ByteBuffer component = type.fromString(unescape(part))[ FD ]
Line_2 $$ public ByteBuffer fromString(String source) -->Line_3 $$ List<String> parts = split(source)[ CD ]
Line_2 $$ public ByteBuffer fromString(String source) -->Line_26 $$ ByteBuffer bb = ByteBuffer.allocate(totalLength)[ CD ]
Line_6 $$ int totalLength = 0, i = 0-->Line_26 $$ ByteBuffer bb = ByteBuffer.allocate(totalLength)[ FD ]
Line_6 $$ int totalLength = 0, i = 0-->Line_33 $$ ++i[ FD ]
Line_9 $$ for (String part : parts) -->Line_20 $$ ByteBuffer component = type.fromString(unescape(part))[ FD ]
Line_26 $$ ByteBuffer bb = ByteBuffer.allocate(totalLength)-->Line_32 $$ bb.put((byte) 0)[ FD ]
Line_27 $$ i = 0-->Line_29 $$ comparators.get(i).serializeComparator(bb)[ FD ]
Line_2 $$ public ByteBuffer fromString(String source) -->Line_4 $$ List<ByteBuffer> components = new ArrayList<ByteBuffer>(parts.size())[ CD ]
Line_18 $$ AbstractType<?> type = p.getAbstractType()-->Line_20 $$ ByteBuffer component = type.fromString(unescape(part))[ FD ]
Line_7 $$ boolean lastByteIsOne = false-->Line_11 $$ lastByteIsOne = true[ FD ]
Line_27 $$ i = 0-->Line_33 $$ ++i[ FD ]
Line_26 $$ ByteBuffer bb = ByteBuffer.allocate(totalLength)-->Line_36 $$ bb.put(bb.limit() - 1, (byte) 1)[ FD ]
Line_2 $$ public ByteBuffer fromString(String source) -->Line_8 $$ boolean lastByteIsMinusOne = false[ CD ]
Line_26 $$ ByteBuffer bb = ByteBuffer.allocate(totalLength)-->Line_38 $$ bb.put(bb.limit() - 1, (byte) -1)[ FD ]
Line_6 $$ int totalLength = 0, i = 0-->Line_24 $$ ++i[ FD ]
Line_9 $$ for (String part : parts) -->Line_13 $$ if (part.equals("_")) [ FD ]
Line_6 $$ int totalLength = 0, i = 0-->Line_27 $$ i = 0[ FD ]
Line_5 $$ List<ParsedComparator> comparators = new ArrayList<ParsedComparator>(parts.size())-->Line_29 $$ comparators.get(i).serializeComparator(bb)[ FD ]
Line_20 $$ ByteBuffer component = type.fromString(unescape(part))-->Line_21 $$ totalLength += p.getComparatorSerializedSize() + 2 + component.remaining() + 1[ FD ]
Line_5 $$ List<ParsedComparator> comparators = new ArrayList<ParsedComparator>(parts.size())-->Line_23 $$ comparators.add(p)[ FD ]
Line_9 $$ for (String part : parts) -->Line_19 $$ part = p.getRemainingPart()[ FD ]
Line_26 $$ ByteBuffer bb = ByteBuffer.allocate(totalLength)-->Line_31 $$ bb.put(component)[ FD ]
Line_26 $$ ByteBuffer bb = ByteBuffer.allocate(totalLength)-->Line_30 $$ ByteBufferUtil.writeShortLength(bb, component.remaining())[ FD ]
Line_2 $$ public ByteBuffer fromString(String source) -->Line_39 $$ bb.rewind()[ CD ]
Line_20 $$ ByteBuffer component = type.fromString(unescape(part))-->Line_30 $$ ByteBufferUtil.writeShortLength(bb, component.remaining())[ FD ]
Line_2 $$ public ByteBuffer fromString(String source) -->Line_40 $$ return bb[ CD ]
Line_26 $$ ByteBuffer bb = ByteBuffer.allocate(totalLength)-->Line_39 $$ bb.rewind()[ FD ]
Line_2 $$ public ByteBuffer fromString(String source) -->Line_35 $$ if (lastByteIsOne)[ CD ]
Line_2 $$ public ByteBuffer fromString(String source) -->Line_6 $$ int totalLength = 0, i = 0[ CD ]
Line_2 $$ public ByteBuffer fromString(String source) -->Line_27 $$ i = 0[ CD ]
Line_35 $$ if (lastByteIsOne)-->Line_37 $$ if (lastByteIsMinusOne)[ CD ]
Line_6 $$ int totalLength = 0, i = 0-->Line_21 $$ totalLength += p.getComparatorSerializedSize() + 2 + component.remaining() + 1[ FD ]
Line_21 $$ totalLength += p.getComparatorSerializedSize() + 2 + component.remaining() + 1-->Line_26 $$ ByteBuffer bb = ByteBuffer.allocate(totalLength)[ FD ]
Line_3 $$ List<String> parts = split(source)-->Line_5 $$ List<ParsedComparator> comparators = new ArrayList<ParsedComparator>(parts.size())[ FD ]
Line_20 $$ ByteBuffer component = type.fromString(unescape(part))-->Line_22 $$ components.add(component)[ FD ]
Line_13 $$ if (part.equals("_")) -->Line_14 $$ lastByteIsMinusOne = true[ CD ]
Line_10 $$ if (part.equals("!")) -->Line_13 $$ if (part.equals("_")) [ CD ]
Line_2 $$ public ByteBuffer fromString(String source) -->Line_5 $$ List<ParsedComparator> comparators = new ArrayList<ParsedComparator>(parts.size())[ CD ]
Line_8 $$ boolean lastByteIsMinusOne = false-->Line_14 $$ lastByteIsMinusOne = true[ FD ]
Line_35 $$ if (lastByteIsOne)-->Line_36 $$ bb.put(bb.limit() - 1, (byte) 1)[ CD ]
Line_17 $$ ParsedComparator p = parseComparator(i, part)-->Line_23 $$ comparators.add(p)[ FD ]
Line_10 $$ if (part.equals("!")) -->Line_11 $$ lastByteIsOne = true[ CD ]
Line_3 $$ List<String> parts = split(source)-->Line_4 $$ List<ByteBuffer> components = new ArrayList<ByteBuffer>(parts.size())[ FD ]
Line_6 $$ int totalLength = 0, i = 0-->Line_29 $$ comparators.get(i).serializeComparator(bb)[ FD ]
Line_17 $$ ParsedComparator p = parseComparator(i, part)-->Line_18 $$ AbstractType<?> type = p.getAbstractType()[ FD ]
Line_2 $$ public ByteBuffer fromString(String source) -->Line_3 $$ List<String> parts = split(source)[ FD ]
Line_4 $$ List<ByteBuffer> components = new ArrayList<ByteBuffer>(parts.size())-->Line_22 $$ components.add(component)[ FD ]
Line_17 $$ ParsedComparator p = parseComparator(i, part)-->Line_21 $$ totalLength += p.getComparatorSerializedSize() + 2 + component.remaining() + 1[ FD ]
Line_37 $$ if (lastByteIsMinusOne)-->Line_38 $$ bb.put(bb.limit() - 1, (byte) -1)[ CD ]
Line_9 $$ for (String part : parts) -->Line_10 $$ if (part.equals("!")) [ FD ]
