Line_2 $$ private static void validateColumnNames(CFMetaData metadata, ByteBuffer superColumnName, Iterable<ByteBuffer> column_names) throws org.apache.cassandra.exceptions.InvalidRequestException -->Line_26 $$ LegacyLayout.LegacyCellName cname = LegacyLayout.decodeCellName(metadata, name)[ FD ]
Line_2 $$ private static void validateColumnNames(CFMetaData metadata, ByteBuffer superColumnName, Iterable<ByteBuffer> column_names) throws org.apache.cassandra.exceptions.InvalidRequestException -->Line_4 $$ if (superColumnName != null) [ CD ]
Line_3 $$ int maxNameLength = LegacyLayout.MAX_CELL_NAME_LENGTH-->Line_5 $$ if (superColumnName.remaining() > maxNameLength)[ FD ]
Line_12 $$ AbstractType<?> comparator = getThriftColumnNameComparator(metadata, superColumnName)-->Line_20 $$ comparator.validate(name)[ FD ]
Line_4 $$ if (superColumnName != null) -->Line_7 $$ if (superColumnName.remaining() == 0)[ CD ]
Line_14 $$ for (ByteBuffer name : column_names) -->Line_26 $$ LegacyLayout.LegacyCellName cname = LegacyLayout.decodeCellName(metadata, name)[ FD ]
Line_28 $$ for (int i = 0; i < cname.clustering.size(); i++) -->Line_29 $$ if (cname.clustering.get(i) == null)[ CD ]
Line_14 $$ for (ByteBuffer name : column_names) -->Line_17 $$ if (name.remaining() == 0)[ FD ]
Line_2 $$ private static void validateColumnNames(CFMetaData metadata, ByteBuffer superColumnName, Iterable<ByteBuffer> column_names) throws org.apache.cassandra.exceptions.InvalidRequestException -->Line_9 $$ if (!metadata.isSuper())[ FD ]
Line_4 $$ if (superColumnName != null) -->Line_9 $$ if (!metadata.isSuper())[ CD ]
Line_2 $$ private static void validateColumnNames(CFMetaData metadata, ByteBuffer superColumnName, Iterable<ByteBuffer> column_names) throws org.apache.cassandra.exceptions.InvalidRequestException -->Line_12 $$ AbstractType<?> comparator = getThriftColumnNameComparator(metadata, superColumnName)[ FD ]
Line_14 $$ for (ByteBuffer name : column_names) -->Line_20 $$ comparator.validate(name)[ FD ]
Line_2 $$ private static void validateColumnNames(CFMetaData metadata, ByteBuffer superColumnName, Iterable<ByteBuffer> column_names) throws org.apache.cassandra.exceptions.InvalidRequestException -->Line_5 $$ if (superColumnName.remaining() > maxNameLength)[ FD ]
Line_2 $$ private static void validateColumnNames(CFMetaData metadata, ByteBuffer superColumnName, Iterable<ByteBuffer> column_names) throws org.apache.cassandra.exceptions.InvalidRequestException -->Line_13 $$ boolean isCQL3Table = !metadata.isThriftCompatible()[ CD ]
Line_2 $$ private static void validateColumnNames(CFMetaData metadata, ByteBuffer superColumnName, Iterable<ByteBuffer> column_names) throws org.apache.cassandra.exceptions.InvalidRequestException -->Line_4 $$ if (superColumnName != null) [ FD ]
Line_14 $$ for (ByteBuffer name : column_names) -->Line_15 $$ if (name.remaining() > maxNameLength)[ FD ]
Line_4 $$ if (superColumnName != null) -->Line_5 $$ if (superColumnName.remaining() > maxNameLength)[ CD ]
Line_2 $$ private static void validateColumnNames(CFMetaData metadata, ByteBuffer superColumnName, Iterable<ByteBuffer> column_names) throws org.apache.cassandra.exceptions.InvalidRequestException -->Line_7 $$ if (superColumnName.remaining() == 0)[ FD ]
Line_28 $$ for (int i = 0; i < cname.clustering.size(); i++) -->Line_29 $$ if (cname.clustering.get(i) == null)[ FD ]
Line_3 $$ int maxNameLength = LegacyLayout.MAX_CELL_NAME_LENGTH-->Line_15 $$ if (name.remaining() > maxNameLength)[ FD ]
Line_2 $$ private static void validateColumnNames(CFMetaData metadata, ByteBuffer superColumnName, Iterable<ByteBuffer> column_names) throws org.apache.cassandra.exceptions.InvalidRequestException -->Line_13 $$ boolean isCQL3Table = !metadata.isThriftCompatible()[ FD ]
Line_2 $$ private static void validateColumnNames(CFMetaData metadata, ByteBuffer superColumnName, Iterable<ByteBuffer> column_names) throws org.apache.cassandra.exceptions.InvalidRequestException -->Line_12 $$ AbstractType<?> comparator = getThriftColumnNameComparator(metadata, superColumnName)[ CD ]
Line_28 $$ for (int i = 0; i < cname.clustering.size(); i++) -->Line_30 $$ throw new org.apache.cassandra.exceptions.InvalidRequestException(String.format("Not enough components (found %d but %d expected) for column name since %s is a CQL3 table", i, metadata.comparator.size() + 1, metadata.cfName))[ FD ]
Line_2 $$ private static void validateColumnNames(CFMetaData metadata, ByteBuffer superColumnName, Iterable<ByteBuffer> column_names) throws org.apache.cassandra.exceptions.InvalidRequestException -->Line_3 $$ int maxNameLength = LegacyLayout.MAX_CELL_NAME_LENGTH[ CD ]
