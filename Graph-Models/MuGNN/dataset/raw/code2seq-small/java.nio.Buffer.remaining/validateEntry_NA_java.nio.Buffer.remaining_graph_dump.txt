Line_4 $$ DataInputPlus di = new DataInputBuffer(buffer, true)-->Line_5 $$ int hintSize = di.readInt()[ FD ]
Line_17 $$ Cell cell = row.cells().iterator().next()-->Line_18 $$ assertEquals(TimeUnit.MILLISECONDS.toMicros(baseTimestamp + idx), cell.timestamp())[ FD ]
Line_4 $$ DataInputPlus di = new DataInputBuffer(buffer, true)-->Line_11 $$ assertEquals((int) crc.getValue(), di.readInt())[ FD ]
Line_12 $$ int idx = (int) (hint.creationTime - baseTimestamp)-->Line_16 $$ assertEquals(bytes(idx), row.clustering().get(0))[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_20 $$ return idx[ CD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_8 $$ assertEquals((int) crc.getValue(), di.readInt())[ CD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_10 $$ updateChecksum(crc, buffer, buffer.position() + 8, hintSize)[ FD ]
Line_14 $$ Row row = hint.mutation.getPartitionUpdates().iterator().next().iterator().next()-->Line_15 $$ assertEquals(1, Iterables.size(row.cells()))[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_11 $$ assertEquals((int) crc.getValue(), di.readInt())[ CD ]
Line_3 $$ CRC32 crc = new CRC32()-->Line_8 $$ assertEquals((int) crc.getValue(), di.readInt())[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_6 $$ assertEquals(hintSize + HintsBuffer.ENTRY_OVERHEAD_SIZE, buffer.remaining())[ CD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_7 $$ updateChecksum(crc, buffer, buffer.position(), 4)[ CD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_18 $$ assertEquals(TimeUnit.MILLISECONDS.toMicros(baseTimestamp + idx), cell.timestamp())[ CD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_19 $$ assertEquals(bytes(idx), cell.value())[ CD ]
Line_14 $$ Row row = hint.mutation.getPartitionUpdates().iterator().next().iterator().next()-->Line_16 $$ assertEquals(bytes(idx), row.clustering().get(0))[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_10 $$ updateChecksum(crc, buffer, buffer.position() + 8, hintSize)[ CD ]
Line_3 $$ CRC32 crc = new CRC32()-->Line_10 $$ updateChecksum(crc, buffer, buffer.position() + 8, hintSize)[ FD ]
Line_4 $$ DataInputPlus di = new DataInputBuffer(buffer, true)-->Line_8 $$ assertEquals((int) crc.getValue(), di.readInt())[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_14 $$ Row row = hint.mutation.getPartitionUpdates().iterator().next().iterator().next()[ CD ]
Line_3 $$ CRC32 crc = new CRC32()-->Line_11 $$ assertEquals((int) crc.getValue(), di.readInt())[ FD ]
Line_5 $$ int hintSize = di.readInt()-->Line_10 $$ updateChecksum(crc, buffer, buffer.position() + 8, hintSize)[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_7 $$ updateChecksum(crc, buffer, buffer.position(), 4)[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_13 $$ assertEquals(hostId, load[idx])[ CD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_17 $$ Cell cell = row.cells().iterator().next()[ CD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_3 $$ CRC32 crc = new CRC32()[ CD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_12 $$ int idx = (int) (hint.creationTime - baseTimestamp)[ CD ]
Line_3 $$ CRC32 crc = new CRC32()-->Line_7 $$ updateChecksum(crc, buffer, buffer.position(), 4)[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_9 $$ Hint hint = Hint.serializer.deserialize(di, MessagingService.current_version)[ CD ]
Line_12 $$ int idx = (int) (hint.creationTime - baseTimestamp)-->Line_19 $$ assertEquals(bytes(idx), cell.value())[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_4 $$ DataInputPlus di = new DataInputBuffer(buffer, true)[ CD ]
Line_4 $$ DataInputPlus di = new DataInputBuffer(buffer, true)-->Line_9 $$ Hint hint = Hint.serializer.deserialize(di, MessagingService.current_version)[ FD ]
Line_17 $$ Cell cell = row.cells().iterator().next()-->Line_19 $$ assertEquals(bytes(idx), cell.value())[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_6 $$ assertEquals(hintSize + HintsBuffer.ENTRY_OVERHEAD_SIZE, buffer.remaining())[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_16 $$ assertEquals(bytes(idx), row.clustering().get(0))[ CD ]
Line_14 $$ Row row = hint.mutation.getPartitionUpdates().iterator().next().iterator().next()-->Line_17 $$ Cell cell = row.cells().iterator().next()[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_5 $$ int hintSize = di.readInt()[ CD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_13 $$ assertEquals(hostId, load[idx])[ FD ]
Line_2 $$ private static int validateEntry(UUID hostId, ByteBuffer buffer, long baseTimestamp, UUID[] load) throws IOException -->Line_15 $$ assertEquals(1, Iterables.size(row.cells()))[ CD ]
