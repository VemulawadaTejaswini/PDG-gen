Line_2 $$ public static void encode(java.nio.ByteBuffer raw, java.nio.CharBuffer encoded) -->Line_6 $$ int rem = Math.min(3, raw.remaining())[ FD ]
Line_2 $$ public static void encode(java.nio.ByteBuffer raw, java.nio.CharBuffer encoded) -->Line_10 $$ encoded.put((char) (enc4[i] & 0xFF))[ FD ]
Line_2 $$ public static void encode(java.nio.ByteBuffer raw, java.nio.CharBuffer encoded) -->Line_5 $$ while (raw.hasRemaining()) [ FD ]
Line_4 $$ byte[] enc4 = new byte[4]-->Line_8 $$ Base64.encode3to4(enc4, raw3, rem, Base64.NO_OPTIONS)[ FD ]
Line_2 $$ public static void encode(java.nio.ByteBuffer raw, java.nio.CharBuffer encoded) -->Line_4 $$ byte[] enc4 = new byte[4][ CD ]
Line_2 $$ public static void encode(java.nio.ByteBuffer raw, java.nio.CharBuffer encoded) -->Line_7 $$ raw.get(raw3, 0, rem)[ FD ]
Line_5 $$ while (raw.hasRemaining()) -->Line_9 $$ for (int i = 0; i < 4; i++) [ CD ]
Line_2 $$ public static void encode(java.nio.ByteBuffer raw, java.nio.CharBuffer encoded) -->Line_3 $$ byte[] raw3 = new byte[3][ CD ]
Line_5 $$ while (raw.hasRemaining()) -->Line_6 $$ int rem = Math.min(3, raw.remaining())[ CD ]
Line_3 $$ byte[] raw3 = new byte[3]-->Line_7 $$ raw.get(raw3, 0, rem)[ FD ]
Line_6 $$ int rem = Math.min(3, raw.remaining())-->Line_7 $$ raw.get(raw3, 0, rem)[ FD ]
Line_2 $$ public static void encode(java.nio.ByteBuffer raw, java.nio.CharBuffer encoded) -->Line_5 $$ while (raw.hasRemaining()) [ CD ]
Line_5 $$ while (raw.hasRemaining()) -->Line_8 $$ Base64.encode3to4(enc4, raw3, rem, Base64.NO_OPTIONS)[ CD ]
Line_6 $$ int rem = Math.min(3, raw.remaining())-->Line_8 $$ Base64.encode3to4(enc4, raw3, rem, Base64.NO_OPTIONS)[ FD ]
Line_9 $$ for (int i = 0; i < 4; i++) -->Line_10 $$ encoded.put((char) (enc4[i] & 0xFF))[ CD ]
Line_5 $$ while (raw.hasRemaining()) -->Line_7 $$ raw.get(raw3, 0, rem)[ CD ]
Line_3 $$ byte[] raw3 = new byte[3]-->Line_8 $$ Base64.encode3to4(enc4, raw3, rem, Base64.NO_OPTIONS)[ FD ]
