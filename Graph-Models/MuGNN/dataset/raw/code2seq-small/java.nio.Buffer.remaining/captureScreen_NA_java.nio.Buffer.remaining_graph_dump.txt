Line_3 $$ ID pool = Foundation.invoke("NSAutoreleasePool", "new")-->Line_26 $$ Foundation.invoke(pool, "release")[ FD ]
Line_11 $$ ID bitmapRep = Foundation.invoke(Foundation.invoke("NSBitmapImageRep", "alloc"), "initWithCGImage:", cgImageRef)-->Line_13 $$ Foundation.invoke(nsImage, "addRepresentation:", bitmapRep)[ FD ]
Line_8 $$ int windowListOptions = cgWindowId != null ? FoundationLibrary.kCGWindowListOptionOnScreenBelowWindow : FoundationLibrary.kCGWindowListOptionAll-->Line_10 $$ ID cgImageRef = Foundation.cgWindowListCreateImage(nsRect, windowListOptions, cgWindowId, windowImageOptions)[ FD ]
Line_5 $$ ID windowId = belowWindow != null ? MacUtil.findWindowFromJavaWindow(belowWindow) : null-->Line_7 $$ ID cgWindowId = windowId != null ? Foundation.invoke(windowId, "windowNumber") : ID.NIL[ FD ]
Line_10 $$ ID cgImageRef = Foundation.cgWindowListCreateImage(nsRect, windowListOptions, cgWindowId, windowImageOptions)-->Line_11 $$ ID bitmapRep = Foundation.invoke(Foundation.invoke("NSBitmapImageRep", "alloc"), "initWithCGImage:", cgImageRef)[ FD ]
Line_15 $$ ID bytes = Foundation.invoke(data, "bytes")-->Line_17 $$ ByteBuffer byteBuffer = Native.getDirectByteBuffer(bytes.longValue(), length.longValue())[ FD ]
Line_6 $$ Foundation.NSRect nsRect = new Foundation.NSRect(rect.x, rect.y, rect.width, rect.height)-->Line_10 $$ ID cgImageRef = Foundation.cgWindowListCreateImage(nsRect, windowListOptions, cgWindowId, windowImageOptions)[ FD ]
Line_2 $$ private static BufferedImage captureScreen(@Nullable Window belowWindow, @NotNull Rectangle rect) -->Line_5 $$ ID windowId = belowWindow != null ? MacUtil.findWindowFromJavaWindow(belowWindow) : null[ FD ]
Line_14 $$ ID data = Foundation.invoke(nsImage, "TIFFRepresentation")-->Line_16 $$ ID length = Foundation.invoke(data, "length")[ FD ]
Line_2 $$ private static BufferedImage captureScreen(@Nullable Window belowWindow, @NotNull Rectangle rect) -->Line_3 $$ ID pool = Foundation.invoke("NSAutoreleasePool", "new")[ CD ]
Line_12 $$ ID nsImage = Foundation.invoke(Foundation.invoke("NSImage", "alloc"), "init")-->Line_14 $$ ID data = Foundation.invoke(nsImage, "TIFFRepresentation")[ FD ]
Line_12 $$ ID nsImage = Foundation.invoke(Foundation.invoke("NSImage", "alloc"), "init")-->Line_18 $$ Foundation.invoke(nsImage, "release")[ FD ]
Line_17 $$ ByteBuffer byteBuffer = Native.getDirectByteBuffer(bytes.longValue(), length.longValue())-->Line_19 $$ byte[] b = new byte[byteBuffer.remaining()][ FD ]
Line_9 $$ int windowImageOptions = FoundationLibrary.kCGWindowImageNominalResolution-->Line_10 $$ ID cgImageRef = Foundation.cgWindowListCreateImage(nsRect, windowListOptions, cgWindowId, windowImageOptions)[ FD ]
Line_12 $$ ID nsImage = Foundation.invoke(Foundation.invoke("NSImage", "alloc"), "init")-->Line_13 $$ Foundation.invoke(nsImage, "addRepresentation:", bitmapRep)[ FD ]
Line_19 $$ byte[] b = new byte[byteBuffer.remaining()]-->Line_20 $$ byteBuffer.get(b)[ FD ]
Line_7 $$ ID cgWindowId = windowId != null ? Foundation.invoke(windowId, "windowNumber") : ID.NIL-->Line_10 $$ ID cgImageRef = Foundation.cgWindowListCreateImage(nsRect, windowListOptions, cgWindowId, windowImageOptions)[ FD ]
Line_16 $$ ID length = Foundation.invoke(data, "length")-->Line_17 $$ ByteBuffer byteBuffer = Native.getDirectByteBuffer(bytes.longValue(), length.longValue())[ FD ]
Line_17 $$ ByteBuffer byteBuffer = Native.getDirectByteBuffer(bytes.longValue(), length.longValue())-->Line_20 $$ byteBuffer.get(b)[ FD ]
Line_14 $$ ID data = Foundation.invoke(nsImage, "TIFFRepresentation")-->Line_15 $$ ID bytes = Foundation.invoke(data, "bytes")[ FD ]
