Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_19 $$ float[] dest = new float[width * height][ CD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_9 $$ byte[] source = null[ CD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_11 $$ if (data.hasArray() && !data.isReadOnly()) [ CD ]
Line_11 $$ if (data.hasArray() && !data.isReadOnly()) -->Line_13 $$ sourceOffset = data.arrayOffset() + startPos[ CD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_11 $$ if (data.hasArray() && !data.isReadOnly()) [ FD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_25 $$ return dest[ CD ]
Line_8 $$ final int startPos = data.position()-->Line_17 $$ data.position(startPos)[ FD ]
Line_9 $$ byte[] source = null-->Line_12 $$ source = data.array()[ FD ]
Line_20 $$ for (int i = 0; i < dest.length; ++i) -->Line_22 $$ v = v < 0 ? 256 + v : v[ CD ]
Line_20 $$ for (int i = 0; i < dest.length; ++i) -->Line_21 $$ int v = source[sourceOffset + i * bytesPerColor][ CD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_20 $$ for (int i = 0; i < dest.length; ++i) [ CD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_10 $$ int sourceOffset = 0[ CD ]
Line_10 $$ int sourceOffset = 0-->Line_13 $$ sourceOffset = data.arrayOffset() + startPos[ FD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_8 $$ final int startPos = data.position()[ FD ]
Line_12 $$ source = data.array()-->Line_15 $$ source = new byte[width * height * bytesPerColor][ FD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_6 $$ if (data.remaining() < (width * height * bytesPerColor))[ FD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_3 $$ final int bytesPerColor = (format == Format.RGB888 ? 3 : (format == Format.RGBA8888 ? 4 : 0))[ CD ]
Line_8 $$ final int startPos = data.position()-->Line_13 $$ sourceOffset = data.arrayOffset() + startPos[ FD ]
Line_20 $$ for (int i = 0; i < dest.length; ++i) -->Line_23 $$ dest[i] = (float) v / 255f[ CD ]
Line_11 $$ if (data.hasArray() && !data.isReadOnly()) -->Line_15 $$ source = new byte[width * height * bytesPerColor][ CD ]
Line_12 $$ source = data.array()-->Line_16 $$ data.get(source)[ FD ]
Line_9 $$ byte[] source = null-->Line_15 $$ source = new byte[width * height * bytesPerColor][ FD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_8 $$ final int startPos = data.position()[ CD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_13 $$ sourceOffset = data.arrayOffset() + startPos[ FD ]
Line_11 $$ if (data.hasArray() && !data.isReadOnly()) -->Line_16 $$ data.get(source)[ CD ]
Line_11 $$ if (data.hasArray() && !data.isReadOnly()) -->Line_17 $$ data.position(startPos)[ CD ]
Line_11 $$ if (data.hasArray() && !data.isReadOnly()) -->Line_12 $$ source = data.array()[ CD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_16 $$ data.get(source)[ FD ]
Line_3 $$ final int bytesPerColor = (format == Format.RGB888 ? 3 : (format == Format.RGBA8888 ? 4 : 0))-->Line_4 $$ if (bytesPerColor == 0)[ FD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_6 $$ if (data.remaining() < (width * height * bytesPerColor))[ CD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_17 $$ data.position(startPos)[ FD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_12 $$ source = data.array()[ FD ]
Line_2 $$ public static float[] heightColorsToMap(final ByteBuffer data, final Pixmap.Format format, int width, int height) -->Line_4 $$ if (bytesPerColor == 0)[ CD ]
Line_21 $$ int v = source[sourceOffset + i * bytesPerColor]-->Line_22 $$ v = v < 0 ? 256 + v : v[ FD ]
Line_15 $$ source = new byte[width * height * bytesPerColor]-->Line_16 $$ data.get(source)[ FD ]
Line_9 $$ byte[] source = null-->Line_16 $$ data.get(source)[ FD ]
