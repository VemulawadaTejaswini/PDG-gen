Line_13 $$ ByteBuffer toChecksum = buf.duplicate()-->Line_14 $$ toChecksum.position(oldpos)[ FD ]
Line_8 $$ dataRead = fillBuffer(dataIn, buf)-->Line_30 $$ dataRead -= offsetFromChunkBoundary[ FD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_23 $$ if (dataRead >= 0) [ CD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_24 $$ buf.position(oldpos + Math.min(offsetFromChunkBoundary, dataRead))[ FD ]
Line_12 $$ if (verifyChecksum) -->Line_17 $$ int numChunks = (toChecksum.remaining() + bytesPerChecksum - 1) / bytesPerChecksum[ CD ]
Line_6 $$ int dataRead = -1-->Line_28 $$ dataRead = 0[ FD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_12 $$ if (verifyChecksum) [ CD ]
Line_6 $$ int dataRead = -1-->Line_23 $$ if (dataRead >= 0) [ FD ]
Line_6 $$ int dataRead = -1-->Line_26 $$ if (dataRead < offsetFromChunkBoundary) [ FD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_7 $$ int oldpos = buf.position()[ FD ]
Line_6 $$ int dataRead = -1-->Line_9 $$ if (dataRead == -1) [ FD ]
Line_9 $$ if (dataRead == -1) -->Line_10 $$ return -1[ CD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_26 $$ if (dataRead < offsetFromChunkBoundary) [ CD ]
Line_12 $$ if (verifyChecksum) -->Line_18 $$ checksumBuff.limit(checksumSize * numChunks)[ CD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_8 $$ dataRead = fillBuffer(dataIn, buf)[ CD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_7 $$ int oldpos = buf.position()[ CD ]
Line_12 $$ if (verifyChecksum) -->Line_20 $$ checksumBuff.flip()[ CD ]
Line_12 $$ if (verifyChecksum) -->Line_14 $$ toChecksum.position(oldpos)[ CD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_33 $$ return dataRead[ CD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_13 $$ ByteBuffer toChecksum = buf.duplicate()[ FD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_3 $$ if (verifyChecksum) [ CD ]
Line_6 $$ int dataRead = -1-->Line_30 $$ dataRead -= offsetFromChunkBoundary[ FD ]
Line_13 $$ ByteBuffer toChecksum = buf.duplicate()-->Line_15 $$ toChecksum.limit(oldpos + dataRead)[ FD ]
Line_12 $$ if (verifyChecksum) -->Line_21 $$ checksum.verifyChunkedSums(toChecksum, checksumBuff, filename, this.startOffset)[ CD ]
Line_26 $$ if (dataRead < offsetFromChunkBoundary) -->Line_30 $$ dataRead -= offsetFromChunkBoundary[ CD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_4 $$ assert buf.remaining() % bytesPerChecksum == 0[ FD ]
Line_6 $$ int dataRead = -1-->Line_8 $$ dataRead = fillBuffer(dataIn, buf)[ FD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_8 $$ dataRead = fillBuffer(dataIn, buf)[ FD ]
Line_13 $$ ByteBuffer toChecksum = buf.duplicate()-->Line_17 $$ int numChunks = (toChecksum.remaining() + bytesPerChecksum - 1) / bytesPerChecksum[ FD ]
Line_7 $$ int oldpos = buf.position()-->Line_14 $$ toChecksum.position(oldpos)[ FD ]
Line_26 $$ if (dataRead < offsetFromChunkBoundary) -->Line_28 $$ dataRead = 0[ CD ]
Line_8 $$ dataRead = fillBuffer(dataIn, buf)-->Line_23 $$ if (dataRead >= 0) [ FD ]
Line_12 $$ if (verifyChecksum) -->Line_13 $$ ByteBuffer toChecksum = buf.duplicate()[ CD ]
Line_12 $$ if (verifyChecksum) -->Line_19 $$ fillBuffer(checksumIn, checksumBuff)[ CD ]
Line_8 $$ dataRead = fillBuffer(dataIn, buf)-->Line_24 $$ buf.position(oldpos + Math.min(offsetFromChunkBoundary, dataRead))[ FD ]
Line_23 $$ if (dataRead >= 0) -->Line_24 $$ buf.position(oldpos + Math.min(offsetFromChunkBoundary, dataRead))[ CD ]
Line_12 $$ if (verifyChecksum) -->Line_16 $$ checksumBuff.clear()[ CD ]
Line_6 $$ int dataRead = -1-->Line_24 $$ buf.position(oldpos + Math.min(offsetFromChunkBoundary, dataRead))[ FD ]
Line_8 $$ dataRead = fillBuffer(dataIn, buf)-->Line_28 $$ dataRead = 0[ FD ]
Line_8 $$ dataRead = fillBuffer(dataIn, buf)-->Line_9 $$ if (dataRead == -1) [ FD ]
Line_13 $$ ByteBuffer toChecksum = buf.duplicate()-->Line_21 $$ checksum.verifyChunkedSums(toChecksum, checksumBuff, filename, this.startOffset)[ FD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_9 $$ if (dataRead == -1) [ CD ]
Line_8 $$ dataRead = fillBuffer(dataIn, buf)-->Line_26 $$ if (dataRead < offsetFromChunkBoundary) [ FD ]
Line_28 $$ dataRead = 0-->Line_30 $$ dataRead -= offsetFromChunkBoundary[ FD ]
Line_12 $$ if (verifyChecksum) -->Line_15 $$ toChecksum.limit(oldpos + dataRead)[ CD ]
Line_2 $$ private synchronized int doByteBufferRead(ByteBuffer buf) throws IOException -->Line_6 $$ int dataRead = -1[ CD ]
