Line_2 $$ public void testSerializedSize() throws Throwable -->Line_20 $$ buffer = new DataOutputBuffer()[ CD ]
Line_6 $$ DataOutputBuffer buffer = new DataOutputBuffer()-->Line_20 $$ buffer = new DataOutputBuffer()[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_23 $$ ByteBuffer bb = buffer.buffer()[ CD ]
Line_17 $$ RowIndexEntry<IndexHelper.IndexInfo> withIndex = RowIndexEntry.create(0xdeadbeef, DeletionTime.LIVE, columnIndex)-->Line_34 $$ serializer.serialize(withIndex, buffer)[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_10 $$ assertEquals(buffer.getLength(), serializer.serializedSize(simple))[ CD ]
Line_20 $$ buffer = new DataOutputBuffer()-->Line_35 $$ bb = buffer.buffer()[ FD ]
Line_6 $$ DataOutputBuffer buffer = new DataOutputBuffer()-->Line_38 $$ bb = buffer.buffer()[ FD ]
Line_6 $$ DataOutputBuffer buffer = new DataOutputBuffer()-->Line_10 $$ assertEquals(buffer.getLength(), serializer.serializedSize(simple))[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_19 $$ assertTrue(columnIndex.columnsIndex.size() >= 3)[ CD ]
Line_17 $$ RowIndexEntry<IndexHelper.IndexInfo> withIndex = RowIndexEntry.create(0xdeadbeef, DeletionTime.LIVE, columnIndex)-->Line_37 $$ serializationCheck(withIndex, indexSerializer, bb, input)[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_9 $$ serializer.serialize(simple, buffer)[ CD ]
Line_20 $$ buffer = new DataOutputBuffer()-->Line_23 $$ ByteBuffer bb = buffer.buffer()[ FD ]
Line_20 $$ buffer = new DataOutputBuffer()-->Line_38 $$ bb = buffer.buffer()[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_11 $$ for (int i = 0; i <= DatabaseDescriptor.getColumnIndexSize() / 4; i++) execute("INSERT INTO %s (a, b, c) VALUES (?, ?, ?)", 0, "" + i, i)[ CD ]
Line_20 $$ buffer = new DataOutputBuffer()-->Line_22 $$ assertEquals(buffer.getLength(), serializer.serializedSize(withIndex))[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_25 $$ serializationCheck(withIndex, indexSerializer, bb, input)[ CD ]
Line_23 $$ ByteBuffer bb = buffer.buffer()-->Line_41 $$ Assert.assertEquals(0, bb.remaining())[ FD ]
Line_24 $$ DataInputBuffer input = new DataInputBuffer(bb, false)-->Line_25 $$ serializationCheck(withIndex, indexSerializer, bb, input)[ FD ]
Line_26 $$ buffer = new DataOutputBuffer() -->Line_38 $$ bb = buffer.buffer()[ FD ]
Line_23 $$ ByteBuffer bb = buffer.buffer()-->Line_37 $$ serializationCheck(withIndex, indexSerializer, bb, input)[ FD ]
Line_17 $$ RowIndexEntry<IndexHelper.IndexInfo> withIndex = RowIndexEntry.create(0xdeadbeef, DeletionTime.LIVE, columnIndex)-->Line_22 $$ assertEquals(buffer.getLength(), serializer.serializedSize(withIndex))[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_34 $$ serializer.serialize(withIndex, buffer)[ CD ]
Line_7 $$ SerializationHeader header = new SerializationHeader(true, cfs.metadata, cfs.metadata.partitionColumns(), EncodingStats.NO_STATS)-->Line_16 $$ ColumnIndex columnIndex = ColumnIndex.writeAndBuildIndex(partition.unfilteredIterator(), writer, header, Collections.emptySet(), BigFormat.latestVersion)[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_22 $$ assertEquals(buffer.getLength(), serializer.serializedSize(withIndex))[ CD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_15 $$ SequentialWriter writer = SequentialWriter.open(tempFile)[ CD ]
Line_6 $$ DataOutputBuffer buffer = new DataOutputBuffer()-->Line_34 $$ serializer.serialize(withIndex, buffer)[ FD ]
Line_16 $$ ColumnIndex columnIndex = ColumnIndex.writeAndBuildIndex(partition.unfilteredIterator(), writer, header, Collections.emptySet(), BigFormat.latestVersion)-->Line_17 $$ RowIndexEntry<IndexHelper.IndexInfo> withIndex = RowIndexEntry.create(0xdeadbeef, DeletionTime.LIVE, columnIndex)[ FD ]
Line_8 $$ RowIndexEntry.Serializer serializer = new RowIndexEntry.Serializer(cfs.metadata, BigFormat.latestVersion, header)-->Line_22 $$ assertEquals(buffer.getLength(), serializer.serializedSize(withIndex))[ FD ]
Line_26 $$ buffer = new DataOutputBuffer() -->Line_34 $$ serializer.serialize(withIndex, buffer)[ FD ]
Line_17 $$ RowIndexEntry<IndexHelper.IndexInfo> withIndex = RowIndexEntry.create(0xdeadbeef, DeletionTime.LIVE, columnIndex)-->Line_21 $$ serializer.serialize(withIndex, buffer)[ FD ]
Line_6 $$ DataOutputBuffer buffer = new DataOutputBuffer()-->Line_22 $$ assertEquals(buffer.getLength(), serializer.serializedSize(withIndex))[ FD ]
Line_6 $$ DataOutputBuffer buffer = new DataOutputBuffer()-->Line_9 $$ serializer.serialize(simple, buffer)[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_5 $$ final RowIndexEntry simple = new RowIndexEntry(123)[ CD ]
Line_5 $$ final RowIndexEntry simple = new RowIndexEntry(123)-->Line_10 $$ assertEquals(buffer.getLength(), serializer.serializedSize(simple))[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_17 $$ RowIndexEntry<IndexHelper.IndexInfo> withIndex = RowIndexEntry.create(0xdeadbeef, DeletionTime.LIVE, columnIndex)[ CD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_18 $$ IndexHelper.IndexInfo.Serializer indexSerializer = new IndexHelper.IndexInfo.Serializer(cfs.metadata, BigFormat.latestVersion, header)[ CD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_35 $$ bb = buffer.buffer()[ CD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_7 $$ SerializationHeader header = new SerializationHeader(true, cfs.metadata, cfs.metadata.partitionColumns(), EncodingStats.NO_STATS)[ CD ]
Line_8 $$ RowIndexEntry.Serializer serializer = new RowIndexEntry.Serializer(cfs.metadata, BigFormat.latestVersion, header)-->Line_10 $$ assertEquals(buffer.getLength(), serializer.serializedSize(simple))[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_8 $$ RowIndexEntry.Serializer serializer = new RowIndexEntry.Serializer(cfs.metadata, BigFormat.latestVersion, header)[ CD ]
Line_17 $$ RowIndexEntry<IndexHelper.IndexInfo> withIndex = RowIndexEntry.create(0xdeadbeef, DeletionTime.LIVE, columnIndex)-->Line_25 $$ serializationCheck(withIndex, indexSerializer, bb, input)[ FD ]
Line_13 $$ File tempFile = File.createTempFile("row_index_entry_test", null)-->Line_14 $$ tempFile.deleteOnExit()[ FD ]
Line_4 $$ ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName)-->Line_12 $$ ImmutableBTreePartition partition = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs).build())[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_26 $$ buffer = new DataOutputBuffer() [ CD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_16 $$ ColumnIndex columnIndex = ColumnIndex.writeAndBuildIndex(partition.unfilteredIterator(), writer, header, Collections.emptySet(), BigFormat.latestVersion)[ CD ]
Line_24 $$ DataInputBuffer input = new DataInputBuffer(bb, false)-->Line_40 $$ RowIndexEntry.Serializer.skip(input, BigFormat.latestVersion)[ FD ]
Line_15 $$ SequentialWriter writer = SequentialWriter.open(tempFile)-->Line_16 $$ ColumnIndex columnIndex = ColumnIndex.writeAndBuildIndex(partition.unfilteredIterator(), writer, header, Collections.emptySet(), BigFormat.latestVersion)[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_6 $$ DataOutputBuffer buffer = new DataOutputBuffer()[ CD ]
Line_5 $$ final RowIndexEntry simple = new RowIndexEntry(123)-->Line_9 $$ serializer.serialize(simple, buffer)[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_37 $$ serializationCheck(withIndex, indexSerializer, bb, input)[ CD ]
Line_20 $$ buffer = new DataOutputBuffer()-->Line_34 $$ serializer.serialize(withIndex, buffer)[ FD ]
Line_26 $$ buffer = new DataOutputBuffer() -->Line_35 $$ bb = buffer.buffer()[ FD ]
Line_6 $$ DataOutputBuffer buffer = new DataOutputBuffer()-->Line_21 $$ serializer.serialize(withIndex, buffer)[ FD ]
Line_23 $$ ByteBuffer bb = buffer.buffer()-->Line_25 $$ serializationCheck(withIndex, indexSerializer, bb, input)[ FD ]
Line_24 $$ DataInputBuffer input = new DataInputBuffer(bb, false)-->Line_37 $$ serializationCheck(withIndex, indexSerializer, bb, input)[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_3 $$ String tableName = createTable("CREATE TABLE %s (a int, b text, c int, PRIMARY KEY(a, b))")[ CD ]
Line_8 $$ RowIndexEntry.Serializer serializer = new RowIndexEntry.Serializer(cfs.metadata, BigFormat.latestVersion, header)-->Line_9 $$ serializer.serialize(simple, buffer)[ FD ]
Line_13 $$ File tempFile = File.createTempFile("row_index_entry_test", null)-->Line_15 $$ SequentialWriter writer = SequentialWriter.open(tempFile)[ FD ]
Line_18 $$ IndexHelper.IndexInfo.Serializer indexSerializer = new IndexHelper.IndexInfo.Serializer(cfs.metadata, BigFormat.latestVersion, header)-->Line_25 $$ serializationCheck(withIndex, indexSerializer, bb, input)[ FD ]
Line_6 $$ DataOutputBuffer buffer = new DataOutputBuffer()-->Line_23 $$ ByteBuffer bb = buffer.buffer()[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_40 $$ RowIndexEntry.Serializer.skip(input, BigFormat.latestVersion)[ CD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_14 $$ tempFile.deleteOnExit()[ CD ]
Line_6 $$ DataOutputBuffer buffer = new DataOutputBuffer()-->Line_26 $$ buffer = new DataOutputBuffer() [ FD ]
Line_12 $$ ImmutableBTreePartition partition = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs).build())-->Line_16 $$ ColumnIndex columnIndex = ColumnIndex.writeAndBuildIndex(partition.unfilteredIterator(), writer, header, Collections.emptySet(), BigFormat.latestVersion)[ FD ]
Line_8 $$ RowIndexEntry.Serializer serializer = new RowIndexEntry.Serializer(cfs.metadata, BigFormat.latestVersion, header)-->Line_21 $$ serializer.serialize(withIndex, buffer)[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_21 $$ serializer.serialize(withIndex, buffer)[ CD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_13 $$ File tempFile = File.createTempFile("row_index_entry_test", null)[ CD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_41 $$ Assert.assertEquals(0, bb.remaining())[ CD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_12 $$ ImmutableBTreePartition partition = Util.getOnlyPartitionUnfiltered(Util.cmd(cfs).build())[ CD ]
Line_6 $$ DataOutputBuffer buffer = new DataOutputBuffer()-->Line_35 $$ bb = buffer.buffer()[ FD ]
Line_18 $$ IndexHelper.IndexInfo.Serializer indexSerializer = new IndexHelper.IndexInfo.Serializer(cfs.metadata, BigFormat.latestVersion, header)-->Line_37 $$ serializationCheck(withIndex, indexSerializer, bb, input)[ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_24 $$ DataInputBuffer input = new DataInputBuffer(bb, false)[ CD ]
Line_20 $$ buffer = new DataOutputBuffer()-->Line_21 $$ serializer.serialize(withIndex, buffer)[ FD ]
Line_3 $$ String tableName = createTable("CREATE TABLE %s (a int, b text, c int, PRIMARY KEY(a, b))")-->Line_4 $$ ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName)[ FD ]
Line_20 $$ buffer = new DataOutputBuffer()-->Line_26 $$ buffer = new DataOutputBuffer() [ FD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_38 $$ bb = buffer.buffer()[ CD ]
Line_2 $$ public void testSerializedSize() throws Throwable -->Line_4 $$ ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(tableName)[ CD ]
Line_8 $$ RowIndexEntry.Serializer serializer = new RowIndexEntry.Serializer(cfs.metadata, BigFormat.latestVersion, header)-->Line_34 $$ serializer.serialize(withIndex, buffer)[ FD ]
Line_26 $$ buffer = new DataOutputBuffer() -->Line_28 $$ return false[ CD ]
