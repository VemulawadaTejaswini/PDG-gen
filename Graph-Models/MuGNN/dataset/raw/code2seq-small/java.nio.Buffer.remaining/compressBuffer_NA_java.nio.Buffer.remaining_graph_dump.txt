Line_6 $$ int chunkLen = buffer.length / 2-->Line_9 $$ def.setInput(buffer, 0, chunkLen)[ FD ]
Line_11 $$ int len = def.deflate(buffer, chunkLen, chunkLen)-->Line_21 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_6 $$ int chunkLen = buffer.length / 2-->Line_12 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_8 $$ input.get(buffer, 0, chunkLen)[ FD ]
Line_6 $$ int chunkLen = buffer.length / 2-->Line_8 $$ input.get(buffer, 0, chunkLen)[ FD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_12 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_3 $$ Deflater def = deflater.get()[ CD ]
Line_3 $$ Deflater def = deflater.get()-->Line_19 $$ while (!def.finished()) [ FD ]
Line_10 $$ while (!def.needsInput()) -->Line_12 $$ output.put(buffer, chunkLen, len)[ CD ]
Line_5 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_21 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_5 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_11 $$ int len = def.deflate(buffer, chunkLen, chunkLen)[ FD ]
Line_5 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_8 $$ input.get(buffer, 0, chunkLen)[ FD ]
Line_15 $$ int inputLength = input.remaining()-->Line_16 $$ input.get(buffer, 0, inputLength)[ FD ]
Line_3 $$ Deflater def = deflater.get()-->Line_10 $$ while (!def.needsInput()) [ FD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_21 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_6 $$ int chunkLen = buffer.length / 2-->Line_7 $$ while (input.remaining() > chunkLen) [ FD ]
Line_6 $$ int chunkLen = buffer.length / 2-->Line_11 $$ int len = def.deflate(buffer, chunkLen, chunkLen)[ FD ]
Line_6 $$ int chunkLen = buffer.length / 2-->Line_21 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_15 $$ int inputLength = input.remaining()[ CD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_15 $$ int inputLength = input.remaining()[ FD ]
Line_5 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_20 $$ int len = def.deflate(buffer, chunkLen, chunkLen)[ FD ]
Line_10 $$ while (!def.needsInput()) -->Line_11 $$ int len = def.deflate(buffer, chunkLen, chunkLen)[ CD ]
Line_6 $$ int chunkLen = buffer.length / 2-->Line_20 $$ int len = def.deflate(buffer, chunkLen, chunkLen)[ FD ]
Line_3 $$ Deflater def = deflater.get()-->Line_18 $$ def.finish()[ FD ]
Line_5 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_16 $$ input.get(buffer, 0, inputLength)[ FD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_7 $$ while (input.remaining() > chunkLen) [ FD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_16 $$ input.get(buffer, 0, inputLength)[ CD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_16 $$ input.get(buffer, 0, inputLength)[ FD ]
Line_19 $$ while (!def.finished()) -->Line_20 $$ int len = def.deflate(buffer, chunkLen, chunkLen)[ CD ]
Line_19 $$ while (!def.finished()) -->Line_21 $$ output.put(buffer, chunkLen, len)[ CD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_5 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()[ CD ]
Line_5 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_12 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_7 $$ while (input.remaining() > chunkLen) [ CD ]
Line_5 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_9 $$ def.setInput(buffer, 0, chunkLen)[ FD ]
Line_7 $$ while (input.remaining() > chunkLen) -->Line_9 $$ def.setInput(buffer, 0, chunkLen)[ CD ]
Line_20 $$ int len = def.deflate(buffer, chunkLen, chunkLen)-->Line_21 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_3 $$ Deflater def = deflater.get()-->Line_4 $$ def.reset()[ FD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_17 $$ def.setInput(buffer, 0, inputLength)[ CD ]
Line_11 $$ int len = def.deflate(buffer, chunkLen, chunkLen)-->Line_12 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_3 $$ Deflater def = deflater.get()-->Line_11 $$ int len = def.deflate(buffer, chunkLen, chunkLen)[ FD ]
Line_3 $$ Deflater def = deflater.get()-->Line_20 $$ int len = def.deflate(buffer, chunkLen, chunkLen)[ FD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_6 $$ int chunkLen = buffer.length / 2[ CD ]
Line_15 $$ int inputLength = input.remaining()-->Line_17 $$ def.setInput(buffer, 0, inputLength)[ FD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_19 $$ while (!def.finished()) [ CD ]
Line_7 $$ while (input.remaining() > chunkLen) -->Line_8 $$ input.get(buffer, 0, chunkLen)[ CD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_18 $$ def.finish()[ CD ]
Line_2 $$ public void compressBuffer(ByteBuffer input, ByteBuffer output) -->Line_4 $$ def.reset()[ CD ]
Line_3 $$ Deflater def = deflater.get()-->Line_9 $$ def.setInput(buffer, 0, chunkLen)[ FD ]
Line_3 $$ Deflater def = deflater.get()-->Line_17 $$ def.setInput(buffer, 0, inputLength)[ FD ]
Line_5 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_17 $$ def.setInput(buffer, 0, inputLength)[ FD ]
Line_7 $$ while (input.remaining() > chunkLen) -->Line_10 $$ while (!def.needsInput()) [ CD ]
