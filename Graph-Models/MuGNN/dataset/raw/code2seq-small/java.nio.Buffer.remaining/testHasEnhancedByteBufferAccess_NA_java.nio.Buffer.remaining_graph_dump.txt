Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_24 $$ expectedData = new byte[n2][ CD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_12 $$ System.arraycopy(data, 0, expectedData, 0, n1)[ CD ]
Line_3 $$ OutputStream out = getOutputStream(defaultBufferSize)-->Line_4 $$ writeData(out)[ FD ]
Line_6 $$ final int len1 = dataLen / 8-->Line_16 $$ readAll(in, readData, 0, len1)[ FD ]
Line_9 $$ byte[] readData = new byte[n1]-->Line_10 $$ buffer.get(readData)[ FD ]
Line_8 $$ int n1 = buffer.remaining()-->Line_12 $$ System.arraycopy(data, 0, expectedData, 0, n1)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_28 $$ in.close()[ CD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_7 $$ ByteBuffer buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))[ CD ]
Line_7 $$ ByteBuffer buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_20 $$ buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_23 $$ buffer.get(readData)[ CD ]
Line_24 $$ expectedData = new byte[n2]-->Line_25 $$ System.arraycopy(data, n1 + len1, expectedData, 0, n2)[ FD ]
Line_9 $$ byte[] readData = new byte[n1]-->Line_13 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_9 $$ byte[] readData = new byte[n1]-->Line_19 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_24 $$ expectedData = new byte[n2]-->Line_26 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_27 $$ ((HasEnhancedByteBufferAccess) in).releaseBuffer(buffer)[ CD ]
Line_7 $$ ByteBuffer buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_8 $$ int n1 = buffer.remaining()[ FD ]
Line_8 $$ int n1 = buffer.remaining()-->Line_18 $$ System.arraycopy(data, n1, expectedData, 0, len1)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_21 $$ int n2 = buffer.remaining()[ CD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_19 $$ Assert.assertArrayEquals(readData, expectedData)[ CD ]
Line_17 $$ expectedData = new byte[len1]-->Line_26 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_6 $$ final int len1 = dataLen / 8-->Line_7 $$ ByteBuffer buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))[ FD ]
Line_20 $$ buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_21 $$ int n2 = buffer.remaining()[ FD ]
Line_7 $$ ByteBuffer buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_27 $$ ((HasEnhancedByteBufferAccess) in).releaseBuffer(buffer)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_9 $$ byte[] readData = new byte[n1][ CD ]
Line_9 $$ byte[] readData = new byte[n1]-->Line_16 $$ readAll(in, readData, 0, len1)[ FD ]
Line_15 $$ readData = new byte[len1]-->Line_23 $$ buffer.get(readData)[ FD ]
Line_11 $$ byte[] expectedData = new byte[n1]-->Line_12 $$ System.arraycopy(data, 0, expectedData, 0, n1)[ FD ]
Line_20 $$ buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_27 $$ ((HasEnhancedByteBufferAccess) in).releaseBuffer(buffer)[ FD ]
Line_15 $$ readData = new byte[len1]-->Line_26 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_7 $$ ByteBuffer buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_14 $$ ((HasEnhancedByteBufferAccess) in).releaseBuffer(buffer)[ FD ]
Line_9 $$ byte[] readData = new byte[n1]-->Line_26 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_7 $$ ByteBuffer buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_10 $$ buffer.get(readData)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_25 $$ System.arraycopy(data, n1 + len1, expectedData, 0, n2)[ CD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_20 $$ buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))[ CD ]
Line_17 $$ expectedData = new byte[len1]-->Line_25 $$ System.arraycopy(data, n1 + len1, expectedData, 0, n2)[ FD ]
Line_5 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_28 $$ in.close()[ FD ]
Line_11 $$ byte[] expectedData = new byte[n1]-->Line_25 $$ System.arraycopy(data, n1 + len1, expectedData, 0, n2)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_22 $$ readData = new byte[n2][ CD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_13 $$ Assert.assertArrayEquals(readData, expectedData)[ CD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_8 $$ int n1 = buffer.remaining()[ CD ]
Line_15 $$ readData = new byte[len1]-->Line_22 $$ readData = new byte[n2][ FD ]
Line_17 $$ expectedData = new byte[len1]-->Line_19 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_11 $$ byte[] expectedData = new byte[n1]-->Line_13 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_17 $$ expectedData = new byte[len1][ CD ]
Line_15 $$ readData = new byte[len1]-->Line_19 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_5 $$ InputStream in = getInputStream(defaultBufferSize)[ CD ]
Line_9 $$ byte[] readData = new byte[n1]-->Line_23 $$ buffer.get(readData)[ FD ]
Line_21 $$ int n2 = buffer.remaining()-->Line_25 $$ System.arraycopy(data, n1 + len1, expectedData, 0, n2)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_26 $$ Assert.assertArrayEquals(readData, expectedData)[ CD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_18 $$ System.arraycopy(data, n1, expectedData, 0, len1)[ CD ]
Line_22 $$ readData = new byte[n2]-->Line_23 $$ buffer.get(readData)[ FD ]
Line_5 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_16 $$ readAll(in, readData, 0, len1)[ FD ]
Line_17 $$ expectedData = new byte[len1]-->Line_18 $$ System.arraycopy(data, n1, expectedData, 0, len1)[ FD ]
Line_11 $$ byte[] expectedData = new byte[n1]-->Line_26 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_15 $$ readData = new byte[len1][ CD ]
Line_9 $$ byte[] readData = new byte[n1]-->Line_15 $$ readData = new byte[len1][ FD ]
Line_17 $$ expectedData = new byte[len1]-->Line_24 $$ expectedData = new byte[n2][ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_16 $$ readAll(in, readData, 0, len1)[ CD ]
Line_6 $$ final int len1 = dataLen / 8-->Line_20 $$ buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))[ FD ]
Line_11 $$ byte[] expectedData = new byte[n1]-->Line_24 $$ expectedData = new byte[n2][ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_14 $$ ((HasEnhancedByteBufferAccess) in).releaseBuffer(buffer)[ CD ]
Line_11 $$ byte[] expectedData = new byte[n1]-->Line_19 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_4 $$ writeData(out)[ CD ]
Line_11 $$ byte[] expectedData = new byte[n1]-->Line_17 $$ expectedData = new byte[len1][ FD ]
Line_7 $$ ByteBuffer buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_23 $$ buffer.get(readData)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_6 $$ final int len1 = dataLen / 8[ CD ]
Line_15 $$ readData = new byte[len1]-->Line_16 $$ readAll(in, readData, 0, len1)[ FD ]
Line_9 $$ byte[] readData = new byte[n1]-->Line_22 $$ readData = new byte[n2][ FD ]
Line_20 $$ buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_23 $$ buffer.get(readData)[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_3 $$ OutputStream out = getOutputStream(defaultBufferSize)[ CD ]
Line_11 $$ byte[] expectedData = new byte[n1]-->Line_18 $$ System.arraycopy(data, n1, expectedData, 0, len1)[ FD ]
Line_22 $$ readData = new byte[n2]-->Line_26 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_7 $$ ByteBuffer buffer = ((HasEnhancedByteBufferAccess) in).read(getBufferPool(), len1, EnumSet.of(ReadOption.SKIP_CHECKSUMS))-->Line_21 $$ int n2 = buffer.remaining()[ FD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_10 $$ buffer.get(readData)[ CD ]
Line_2 $$ public void testHasEnhancedByteBufferAccess() throws Exception -->Line_11 $$ byte[] expectedData = new byte[n1][ CD ]
Line_6 $$ final int len1 = dataLen / 8-->Line_18 $$ System.arraycopy(data, n1, expectedData, 0, len1)[ FD ]
