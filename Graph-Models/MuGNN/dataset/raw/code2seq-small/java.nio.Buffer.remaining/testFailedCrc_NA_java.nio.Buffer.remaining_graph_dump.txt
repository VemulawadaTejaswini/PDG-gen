Line_14 $$ buffer = out.buffer()-->Line_23 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_24 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_29 $$ assertEquals('t', reader.readChar())[ FD ]
Line_3 $$ CRC32 crc = new CRC32()-->Line_12 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_10 $$ buffer = out.buffer()-->Line_12 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_10 $$ buffer = out.buffer()-->Line_25 $$ reader.limit(buffer.remaining())[ FD ]
Line_2 $$ public void testFailedCrc() throws IOException -->Line_23 $$ assertEquals(buffer.remaining(), file.length())[ CD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_13 $$ out.writeInt((int) crc.getValue())[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_12 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_10 $$ buffer = out.buffer()[ FD ]
Line_2 $$ public void testFailedCrc() throws IOException -->Line_4 $$ ByteBuffer buffer[ CD ]
Line_18 $$ try (SequentialWriter writer = SequentialWriter.open(file)) -->Line_20 $$ writer.finish()[ FD ]
Line_10 $$ buffer = out.buffer()-->Line_14 $$ buffer = out.buffer()[ FD ]
Line_18 $$ try (SequentialWriter writer = SequentialWriter.open(file)) -->Line_19 $$ writer.write(buffer)[ FD ]
Line_2 $$ public void testFailedCrc() throws IOException -->Line_3 $$ CRC32 crc = new CRC32()[ CD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_6 $$ out.write(127)[ FD ]
Line_10 $$ buffer = out.buffer()-->Line_19 $$ writer.write(buffer)[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_8 $$ out.writeByte(10)[ FD ]
Line_16 $$ File file = File.createTempFile("testFailedCrc", "1")-->Line_22 $$ assertTrue(file.exists())[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_10 $$ buffer = out.buffer()[ FD ]
Line_16 $$ File file = File.createTempFile("testFailedCrc", "1")-->Line_23 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_24 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_25 $$ reader.limit(buffer.remaining())[ FD ]
Line_16 $$ File file = File.createTempFile("testFailedCrc", "1")-->Line_18 $$ try (SequentialWriter writer = SequentialWriter.open(file)) [ FD ]
Line_10 $$ buffer = out.buffer()-->Line_11 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_10 $$ buffer = out.buffer()-->Line_23 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_16 $$ File file = File.createTempFile("testFailedCrc", "1")-->Line_24 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) [ FD ]
Line_24 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_26 $$ assertEquals(127, reader.read())[ FD ]
Line_24 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_31 $$ assertEquals(0, reader.bytesRemaining())[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_23 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_9 $$ out.writeChar('t')[ FD ]
Line_3 $$ CRC32 crc = new CRC32()-->Line_11 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_2 $$ public void testFailedCrc() throws IOException -->Line_17 $$ file.deleteOnExit()[ CD ]
Line_16 $$ File file = File.createTempFile("testFailedCrc", "1")-->Line_17 $$ file.deleteOnExit()[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_19 $$ writer.write(buffer)[ FD ]
Line_2 $$ public void testFailedCrc() throws IOException -->Line_16 $$ File file = File.createTempFile("testFailedCrc", "1")[ CD ]
Line_3 $$ CRC32 crc = new CRC32()-->Line_13 $$ out.writeInt((int) crc.getValue())[ FD ]
Line_24 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_30 $$ assertFalse(reader.checkCrc())[ FD ]
Line_14 $$ buffer = out.buffer()-->Line_25 $$ reader.limit(buffer.remaining())[ FD ]
Line_2 $$ public void testFailedCrc() throws IOException -->Line_22 $$ assertTrue(file.exists())[ CD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_7 $$ out.writeBoolean(false)[ FD ]
Line_14 $$ buffer = out.buffer()-->Line_19 $$ writer.write(buffer)[ FD ]
Line_24 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_28 $$ assertEquals(10, reader.readByte())[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_14 $$ buffer = out.buffer()[ FD ]
Line_24 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_27 $$ assertEquals(false, reader.readBoolean())[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_11 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_25 $$ reader.limit(buffer.remaining())[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_14 $$ buffer = out.buffer()[ FD ]
