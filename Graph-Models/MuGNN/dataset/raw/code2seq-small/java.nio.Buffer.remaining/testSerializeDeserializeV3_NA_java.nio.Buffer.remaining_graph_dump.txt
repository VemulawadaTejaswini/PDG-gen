Line_4 $$ ByteBuffer serialized = state.serialize(Server.VERSION_3)-->Line_5 $$ assertEquals(serialized.remaining(), state.serializedSize(Server.VERSION_3))[ FD ]
Line_3 $$ PagingState state = makeSomePagingState(Server.VERSION_3)-->Line_6 $$ assertEquals(state, PagingState.deserialize(serialized, Server.VERSION_3))[ FD ]
Line_4 $$ ByteBuffer serialized = state.serialize(Server.VERSION_3)-->Line_6 $$ assertEquals(state, PagingState.deserialize(serialized, Server.VERSION_3))[ FD ]
Line_3 $$ PagingState state = makeSomePagingState(Server.VERSION_3)-->Line_4 $$ ByteBuffer serialized = state.serialize(Server.VERSION_3)[ FD ]
Line_2 $$ public void testSerializeDeserializeV3() -->Line_3 $$ PagingState state = makeSomePagingState(Server.VERSION_3)[ CD ]
Line_3 $$ PagingState state = makeSomePagingState(Server.VERSION_3)-->Line_5 $$ assertEquals(serialized.remaining(), state.serializedSize(Server.VERSION_3))[ FD ]
Line_2 $$ public void testSerializeDeserializeV3() -->Line_4 $$ ByteBuffer serialized = state.serialize(Server.VERSION_3)[ CD ]
Line_2 $$ public void testSerializeDeserializeV3() -->Line_6 $$ assertEquals(state, PagingState.deserialize(serialized, Server.VERSION_3))[ CD ]
Line_2 $$ public void testSerializeDeserializeV3() -->Line_5 $$ assertEquals(serialized.remaining(), state.serializedSize(Server.VERSION_3))[ CD ]
