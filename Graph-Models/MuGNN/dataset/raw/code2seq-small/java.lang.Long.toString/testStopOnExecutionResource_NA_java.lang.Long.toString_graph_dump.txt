Line_10 $$ final long executionId = result.asLong()-->Line_12 $$ final ModelNode executionAddress = Operations.createAddress("deployment", DEPLOYMENT_NAME, "subsystem", "batch-jberet", "job", "test-chunk", "execution", Long.toString(executionId))[ FD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_12 $$ final ModelNode executionAddress = Operations.createAddress("deployment", DEPLOYMENT_NAME, "subsystem", "batch-jberet", "job", "test-chunk", "execution", Long.toString(executionId))[ CD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_18 $$ currentCount = countingItemWriter.getWrittenItemSize()[ CD ]
Line_6 $$ final ModelNode properties = op.get("properties")-->Line_7 $$ properties.get("reader.end").set("20")[ FD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_3 $$ final ModelNode address = Operations.createAddress("deployment", DEPLOYMENT_NAME, "subsystem", "batch-jberet")[ CD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_6 $$ final ModelNode properties = op.get("properties")[ CD ]
Line_15 $$ final JobExecution execution = jobOperator.getJobExecution(executionId)-->Line_19 $$ Assert.assertEquals(BatchStatus.STOPPED, execution.getBatchStatus())[ FD ]
Line_12 $$ final ModelNode executionAddress = Operations.createAddress("deployment", DEPLOYMENT_NAME, "subsystem", "batch-jberet", "job", "test-chunk", "execution", Long.toString(executionId))-->Line_13 $$ executeOperation(Operations.createOperation("stop-job", executionAddress))[ FD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_19 $$ Assert.assertEquals(BatchStatus.STOPPED, execution.getBatchStatus())[ CD ]
Line_10 $$ final long executionId = result.asLong()-->Line_15 $$ final JobExecution execution = jobOperator.getJobExecution(executionId)[ FD ]
Line_15 $$ final JobExecution execution = jobOperator.getJobExecution(executionId)-->Line_16 $$ Assert.assertNotNull(execution)[ FD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_16 $$ Assert.assertNotNull(execution)[ CD ]
Line_9 $$ final ModelNode result = executeOperation(op)-->Line_10 $$ final long executionId = result.asLong()[ FD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_15 $$ final JobExecution execution = jobOperator.getJobExecution(executionId)[ CD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_13 $$ executeOperation(Operations.createOperation("stop-job", executionAddress))[ CD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_11 $$ Assert.assertTrue("Execution id should be greater than 0", executionId > 0L)[ CD ]
Line_15 $$ final JobExecution execution = jobOperator.getJobExecution(executionId)-->Line_17 $$ waitForTermination(execution, 3)[ FD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_4 $$ ModelNode op = Operations.createOperation("start-job", address)[ CD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_17 $$ waitForTermination(execution, 3)[ CD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_5 $$ op.get("job-xml-name").set("test-chunk")[ CD ]
Line_3 $$ final ModelNode address = Operations.createAddress("deployment", DEPLOYMENT_NAME, "subsystem", "batch-jberet")-->Line_4 $$ ModelNode op = Operations.createOperation("start-job", address)[ FD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_8 $$ properties.get("writer.sleep.time").set(Integer.toString(TimeoutUtil.adjust(1000)))[ CD ]
Line_14 $$ final JobOperator jobOperator = BatchRuntime.getJobOperator()-->Line_15 $$ final JobExecution execution = jobOperator.getJobExecution(executionId)[ FD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_7 $$ properties.get("reader.end").set("20")[ CD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_10 $$ final long executionId = result.asLong()[ CD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_14 $$ final JobOperator jobOperator = BatchRuntime.getJobOperator()[ CD ]
Line_4 $$ ModelNode op = Operations.createOperation("start-job", address)-->Line_9 $$ final ModelNode result = executeOperation(op)[ FD ]
Line_4 $$ ModelNode op = Operations.createOperation("start-job", address)-->Line_6 $$ final ModelNode properties = op.get("properties")[ FD ]
Line_2 $$ public void testStopOnExecutionResource() throws Exception -->Line_9 $$ final ModelNode result = executeOperation(op)[ CD ]
Line_6 $$ final ModelNode properties = op.get("properties")-->Line_8 $$ properties.get("writer.sleep.time").set(Integer.toString(TimeoutUtil.adjust(1000)))[ FD ]
Line_4 $$ ModelNode op = Operations.createOperation("start-job", address)-->Line_5 $$ op.get("job-xml-name").set("test-chunk")[ FD ]
