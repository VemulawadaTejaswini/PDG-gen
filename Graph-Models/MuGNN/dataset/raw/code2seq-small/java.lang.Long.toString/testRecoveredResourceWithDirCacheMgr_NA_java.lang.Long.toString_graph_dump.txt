Line_2 $$ public void testRecoveredResourceWithDirCacheMgr() throws Exception -->Line_6 $$ Configuration conf = new YarnConfiguration()[ CD ]
Line_18 $$ final long localizedId1 = 52-->Line_19 $$ Path hierarchicalPath1 = new Path(localDirRoot + "/4/2", Long.toString(localizedId1))[ FD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_28 $$ Assert.assertNull(tracker.getLocalizedResource(lr2))[ FD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_55 $$ Assert.assertNotNull(tracker.getLocalizedResource(lr4))[ FD ]
Line_2 $$ public void testRecoveredResourceWithDirCacheMgr() throws Exception -->Line_9 $$ EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class)[ CD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_8 $$ dispatcher = createDispatcher(conf)[ FD ]
Line_2 $$ public void testRecoveredResourceWithDirCacheMgr() throws Exception -->Line_13 $$ NMStateStoreService stateStore = mock(NMStateStoreService.class)[ CD ]
Line_5 $$ final Path localDirRoot = new Path("/tmp/localdir")-->Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)[ FD ]
Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)-->Line_45 $$ Assert.assertEquals(0, dirMgrRoot.getDirectory("").getCount())[ FD ]
Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)-->Line_26 $$ Assert.assertEquals(1, dirMgrRoot.getDirectory("4/2").getCount())[ FD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_12 $$ dispatcher.register(ContainerEventType.class, containerEventHandler)[ FD ]
Line_48 $$ LocalResourceRequest lr4 = createLocalResourceRequest(user, 4, 4, LocalResourceVisibility.PUBLIC)-->Line_49 $$ Assert.assertNull(tracker.getLocalizedResource(lr4))[ FD ]
Line_10 $$ EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class)-->Line_12 $$ dispatcher.register(ContainerEventType.class, containerEventHandler)[ FD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_43 $$ dispatcher.await()[ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_54 $$ dispatcher.await()[ FD ]
Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)-->Line_58 $$ Assert.assertEquals(2, dirMgrRoot.getDirectory("4/2").getCount())[ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_11 $$ dispatcher.register(LocalizerEventType.class, localizerEventHandler)[ FD ]
Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)-->Line_46 $$ Assert.assertEquals(2, dirMgrRoot.getDirectory("4/2").getCount())[ FD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_62 $$ dispatcher.stop()[ FD ]
Line_2 $$ public void testRecoveredResourceWithDirCacheMgr() throws Exception -->Line_3 $$ final String user = "someuser"[ CD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_61 $$ if (dispatcher != null) [ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_12 $$ dispatcher.register(ContainerEventType.class, containerEventHandler)[ FD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_33 $$ dispatcher.await()[ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_22 $$ dispatcher.await()[ FD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_49 $$ Assert.assertNull(tracker.getLocalizedResource(lr4))[ FD ]
Line_48 $$ LocalResourceRequest lr4 = createLocalResourceRequest(user, 4, 4, LocalResourceVisibility.PUBLIC)-->Line_55 $$ Assert.assertNotNull(tracker.getLocalizedResource(lr4))[ FD ]
Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)-->Line_35 $$ Assert.assertEquals(0, dirMgrRoot.getDirectory("").getCount())[ FD ]
Line_2 $$ public void testRecoveredResourceWithDirCacheMgr() throws Exception -->Line_5 $$ final Path localDirRoot = new Path("/tmp/localdir")[ CD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_38 $$ Assert.assertNull(tracker.getLocalizedResource(lr3))[ FD ]
Line_3 $$ final String user = "someuser"-->Line_37 $$ LocalResourceRequest lr3 = createLocalResourceRequest(user, 3, 3, LocalResourceVisibility.PUBLIC)[ FD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_53 $$ tracker.handle(new ResourceRecoveredEvent(lr4, localizedPath4, 120))[ FD ]
Line_2 $$ public void testRecoveredResourceWithDirCacheMgr() throws Exception -->Line_4 $$ final ApplicationId appId = ApplicationId.newInstance(1, 1)[ CD ]
Line_2 $$ public void testRecoveredResourceWithDirCacheMgr() throws Exception -->Line_8 $$ dispatcher = createDispatcher(conf)[ CD ]
Line_6 $$ Configuration conf = new YarnConfiguration()-->Line_8 $$ dispatcher = createDispatcher(conf)[ FD ]
Line_39 $$ final long localizedId3 = 128-->Line_40 $$ Path hierarchicalPath3 = new Path(localDirRoot + "/4/3", Long.toString(localizedId3))[ FD ]
Line_16 $$ LocalResourceRequest lr1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_17 $$ Assert.assertNull(tracker.getLocalizedResource(lr1))[ FD ]
Line_50 $$ final long localizedId4 = 256-->Line_51 $$ Path hierarchicalPath4 = new Path(localDirRoot + "/4", Long.toString(localizedId4))[ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_62 $$ dispatcher.stop()[ FD ]
Line_27 $$ LocalResourceRequest lr2 = createLocalResourceRequest(user, 2, 2, LocalResourceVisibility.PUBLIC)-->Line_28 $$ Assert.assertNull(tracker.getLocalizedResource(lr2))[ FD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_42 $$ tracker.handle(new ResourceRecoveredEvent(lr3, localizedPath3, 120))[ FD ]
Line_2 $$ public void testRecoveredResourceWithDirCacheMgr() throws Exception -->Line_10 $$ EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class)[ CD ]
Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)-->Line_59 $$ Assert.assertEquals(1, dirMgrRoot.getDirectory("4/3").getCount())[ FD ]
Line_16 $$ LocalResourceRequest lr1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_23 $$ Assert.assertNotNull(tracker.getLocalizedResource(lr1))[ FD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)[ FD ]
Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)-->Line_36 $$ Assert.assertEquals(2, dirMgrRoot.getDirectory("4/2").getCount())[ FD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_22 $$ dispatcher.await()[ FD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_54 $$ dispatcher.await()[ FD ]
Line_3 $$ final String user = "someuser"-->Line_27 $$ LocalResourceRequest lr2 = createLocalResourceRequest(user, 2, 2, LocalResourceVisibility.PUBLIC)[ FD ]
Line_2 $$ public void testRecoveredResourceWithDirCacheMgr() throws Exception -->Line_11 $$ dispatcher.register(LocalizerEventType.class, localizerEventHandler)[ CD ]
Line_37 $$ LocalResourceRequest lr3 = createLocalResourceRequest(user, 3, 3, LocalResourceVisibility.PUBLIC)-->Line_38 $$ Assert.assertNull(tracker.getLocalizedResource(lr3))[ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_43 $$ dispatcher.await()[ FD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_44 $$ Assert.assertNotNull(tracker.getLocalizedResource(lr3))[ FD ]
Line_61 $$ if (dispatcher != null) -->Line_62 $$ dispatcher.stop()[ CD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_23 $$ Assert.assertNotNull(tracker.getLocalizedResource(lr1))[ FD ]
Line_37 $$ LocalResourceRequest lr3 = createLocalResourceRequest(user, 3, 3, LocalResourceVisibility.PUBLIC)-->Line_44 $$ Assert.assertNotNull(tracker.getLocalizedResource(lr3))[ FD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_34 $$ Assert.assertNotNull(tracker.getLocalizedResource(lr2))[ FD ]
Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)-->Line_47 $$ Assert.assertEquals(1, dirMgrRoot.getDirectory("4/3").getCount())[ FD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_21 $$ tracker.handle(new ResourceRecoveredEvent(lr1, localizedPath1, 120))[ FD ]
Line_2 $$ public void testRecoveredResourceWithDirCacheMgr() throws Exception -->Line_7 $$ DrainDispatcher dispatcher = null[ CD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_32 $$ tracker.handle(new ResourceRecoveredEvent(lr2, localizedPath2, 120))[ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_33 $$ dispatcher.await()[ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_61 $$ if (dispatcher != null) [ FD ]
Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)-->Line_56 $$ Assert.assertEquals(0, dirMgrRoot.getDirectory("").getCount())[ FD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_11 $$ dispatcher.register(LocalizerEventType.class, localizerEventHandler)[ FD ]
Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)-->Line_25 $$ Assert.assertEquals(0, dirMgrRoot.getDirectory("").getCount())[ FD ]
Line_29 $$ final long localizedId2 = localizedId1 + 1-->Line_30 $$ Path hierarchicalPath2 = new Path(localDirRoot + "/4/2", Long.toString(localizedId2))[ FD ]
Line_3 $$ final String user = "someuser"-->Line_16 $$ LocalResourceRequest lr1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)[ FD ]
Line_27 $$ LocalResourceRequest lr2 = createLocalResourceRequest(user, 2, 2, LocalResourceVisibility.PUBLIC)-->Line_34 $$ Assert.assertNotNull(tracker.getLocalizedResource(lr2))[ FD ]
Line_9 $$ EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class)-->Line_11 $$ dispatcher.register(LocalizerEventType.class, localizerEventHandler)[ FD ]
Line_24 $$ LocalCacheDirectoryManager dirMgrRoot = tracker.getDirectoryManager(localDirRoot)-->Line_57 $$ Assert.assertEquals(1, dirMgrRoot.getDirectory("4").getCount())[ FD ]
Line_2 $$ public void testRecoveredResourceWithDirCacheMgr() throws Exception -->Line_12 $$ dispatcher.register(ContainerEventType.class, containerEventHandler)[ CD ]
Line_3 $$ final String user = "someuser"-->Line_48 $$ LocalResourceRequest lr4 = createLocalResourceRequest(user, 4, 4, LocalResourceVisibility.PUBLIC)[ FD ]
Line_15 $$ LocalResourcesTrackerImpl tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, true, conf, stateStore)-->Line_17 $$ Assert.assertNull(tracker.getLocalizedResource(lr1))[ FD ]
