Line_22 $$ String errMsg = "[fielddata] Data too large, data for [test] would be larger than limit of [10/10b]"-->Line_23 $$ assertThat("Exception: " + e.toString() + " should contain a CircuitBreakingException", e.toString().contains(errMsg), equalTo(true))[ FD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_10 $$ List<IndexRequestBuilder> reqs = new ArrayList()[ CD ]
Line_3 $$ if (noopBreakerUsed()) -->Line_5 $$ return[ CD ]
Line_16 $$ Settings resetSettings = settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "10b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(), 1.0).build()-->Line_17 $$ assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings))[ FD ]
Line_16 $$ Settings resetSettings = settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "10b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(), 1.0).build()-->Line_27 $$ client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet()[ FD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_26 $$ resetSettings = settingsBuilder().put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "15b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "90%").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(), 1.0).build()[ CD ]
Line_8 $$ Client client = client()-->Line_15 $$ long beforeReqLimit = client.admin().cluster().prepareNodesStats().setBreaker(true).get().getNodes()[0].getBreaker().getStats(CircuitBreaker.REQUEST).getLimit()[ FD ]
Line_9 $$ int docCount = scaledRandomIntBetween(300, 1000)-->Line_11 $$ for (long id = 0; id < docCount; id++) [ FD ]
Line_8 $$ Client client = client()-->Line_25 $$ assertFailures(client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC), RestStatus.INTERNAL_SERVER_ERROR, containsString("Data too large, data for [test] would be larger than limit of [10/10b]"))[ FD ]
Line_8 $$ Client client = client()-->Line_27 $$ client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet()[ FD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_17 $$ assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings))[ CD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_11 $$ for (long id = 0; id < docCount; id++) [ CD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_7 $$ assertAcked(prepareCreate("cb-test", 1, settingsBuilder().put(SETTING_NUMBER_OF_REPLICAS, between(0, 1))))[ CD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_15 $$ long beforeReqLimit = client.admin().cluster().prepareNodesStats().setBreaker(true).get().getNodes()[0].getBreaker().getStats(CircuitBreaker.REQUEST).getLimit()[ CD ]
Line_11 $$ for (long id = 0; id < docCount; id++) -->Line_12 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", "value" + id))[ CD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_3 $$ if (noopBreakerUsed()) [ CD ]
Line_11 $$ for (long id = 0; id < docCount; id++) -->Line_12 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", "value" + id))[ FD ]
Line_22 $$ String errMsg = "[fielddata] Data too large, data for [test] would be larger than limit of [10/10b]"-->Line_33 $$ assertThat("Exception: " + e.toString() + " should contain a CircuitBreakingException", e.toString().contains(errMsg), equalTo(true))[ FD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_27 $$ client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet()[ CD ]
Line_8 $$ Client client = client()-->Line_17 $$ assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings))[ FD ]
Line_8 $$ Client client = client()-->Line_12 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", "value" + id))[ FD ]
Line_10 $$ List<IndexRequestBuilder> reqs = new ArrayList()-->Line_14 $$ indexRandom(true, reqs)[ FD ]
Line_10 $$ List<IndexRequestBuilder> reqs = new ArrayList()-->Line_12 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", "value" + id))[ FD ]
Line_26 $$ resetSettings = settingsBuilder().put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "15b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "90%").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(), 1.0).build()-->Line_27 $$ client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet()[ FD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_9 $$ int docCount = scaledRandomIntBetween(300, 1000)[ CD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_8 $$ Client client = client()[ CD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_25 $$ assertFailures(client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC), RestStatus.INTERNAL_SERVER_ERROR, containsString("Data too large, data for [test] would be larger than limit of [10/10b]"))[ CD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_16 $$ Settings resetSettings = settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "10b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(), 1.0).build()[ CD ]
Line_8 $$ Client client = client()-->Line_29 $$ client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC).get()[ FD ]
Line_8 $$ Client client = client()-->Line_19 $$ client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC).get()[ FD ]
Line_16 $$ Settings resetSettings = settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "10b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(), 1.0).build()-->Line_26 $$ resetSettings = settingsBuilder().put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "15b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "90%").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(), 1.0).build()[ FD ]
Line_2 $$ public void testParentChecking() throws Exception -->Line_14 $$ indexRandom(true, reqs)[ CD ]
