Line_2 $$ private LinkedList<Pair<SvnChangeList, LogHierarchyNode>> getChangeListsAfter(@NotNull ContinuationContext context, final long revision) -->Line_20 $$ return result[ CD ]
Line_2 $$ private LinkedList<Pair<SvnChangeList, LogHierarchyNode>> getChangeListsAfter(@NotNull ContinuationContext context, final long revision) -->Line_12 $$ if (revision < changeList.getNumber()) [ FD ]
Line_12 $$ if (revision < changeList.getNumber()) -->Line_13 $$ result.add(Pair.create(changeList, tree))[ CD ]
Line_7 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_11 $$ indicator.checkCanceled()[ FD ]
Line_2 $$ private LinkedList<Pair<SvnChangeList, LogHierarchyNode>> getChangeListsAfter(@NotNull ContinuationContext context, final long revision) -->Line_7 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_2 $$ private LinkedList<Pair<SvnChangeList, LogHierarchyNode>> getChangeListsAfter(@NotNull ContinuationContext context, final long revision) -->Line_18 $$ finishWithError(context, "Checking revisions for merge fault", Collections.singletonList(e))[ FD ]
Line_9 $$ ((SvnCommittedChangesProvider) myMergeContext.getVcs().getCommittedChangesProvider()).getCommittedChangesWithMergedRevisons(settings, new SvnRepositoryLocation(myMergeContext.getSourceUrl()), 0, new PairConsumer<SvnChangeList, LogHierarchyNode>() -->Line_11 $$ indicator.checkCanceled()[ CD ]
Line_9 $$ ((SvnCommittedChangesProvider) myMergeContext.getVcs().getCommittedChangesProvider()).getCommittedChangesWithMergedRevisons(settings, new SvnRepositoryLocation(myMergeContext.getSourceUrl()), 0, new PairConsumer<SvnChangeList, LogHierarchyNode>() -->Line_13 $$ result.add(Pair.create(changeList, tree))[ FD ]
Line_2 $$ private LinkedList<Pair<SvnChangeList, LogHierarchyNode>> getChangeListsAfter(@NotNull ContinuationContext context, final long revision) -->Line_6 $$ final LinkedList<Pair<SvnChangeList, LogHierarchyNode>> result = ContainerUtil.newLinkedList()[ CD ]
Line_2 $$ private LinkedList<Pair<SvnChangeList, LogHierarchyNode>> getChangeListsAfter(@NotNull ContinuationContext context, final long revision) -->Line_4 $$ settings.CHANGE_AFTER = Long.toString(revision)[ FD ]
Line_2 $$ private LinkedList<Pair<SvnChangeList, LogHierarchyNode>> getChangeListsAfter(@NotNull ContinuationContext context, final long revision) -->Line_3 $$ ChangeBrowserSettings settings = new ChangeBrowserSettings()[ CD ]
Line_2 $$ private LinkedList<Pair<SvnChangeList, LogHierarchyNode>> getChangeListsAfter(@NotNull ContinuationContext context, final long revision) -->Line_5 $$ settings.USE_CHANGE_AFTER_FILTER = true[ CD ]
Line_3 $$ ChangeBrowserSettings settings = new ChangeBrowserSettings()-->Line_9 $$ ((SvnCommittedChangesProvider) myMergeContext.getVcs().getCommittedChangesProvider()).getCommittedChangesWithMergedRevisons(settings, new SvnRepositoryLocation(myMergeContext.getSourceUrl()), 0, new PairConsumer<SvnChangeList, LogHierarchyNode>() [ FD ]
Line_6 $$ final LinkedList<Pair<SvnChangeList, LogHierarchyNode>> result = ContainerUtil.newLinkedList()-->Line_13 $$ result.add(Pair.create(changeList, tree))[ FD ]
Line_2 $$ private LinkedList<Pair<SvnChangeList, LogHierarchyNode>> getChangeListsAfter(@NotNull ContinuationContext context, final long revision) -->Line_4 $$ settings.CHANGE_AFTER = Long.toString(revision)[ CD ]
Line_9 $$ ((SvnCommittedChangesProvider) myMergeContext.getVcs().getCommittedChangesProvider()).getCommittedChangesWithMergedRevisons(settings, new SvnRepositoryLocation(myMergeContext.getSourceUrl()), 0, new PairConsumer<SvnChangeList, LogHierarchyNode>() -->Line_12 $$ if (revision < changeList.getNumber()) [ FD ]
Line_9 $$ ((SvnCommittedChangesProvider) myMergeContext.getVcs().getCommittedChangesProvider()).getCommittedChangesWithMergedRevisons(settings, new SvnRepositoryLocation(myMergeContext.getSourceUrl()), 0, new PairConsumer<SvnChangeList, LogHierarchyNode>() -->Line_12 $$ if (revision < changeList.getNumber()) [ CD ]
