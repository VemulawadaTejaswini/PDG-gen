Line_38 $$ String columnFamily = c.get("columnfamily")-->Line_44 $$ addLine(lines, columnSizes, id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete)[ FD ]
Line_48 $$ StringBuilder buffer = new StringBuilder()-->Line_51 $$ buffer.append(columnSize + 3)[ FD ]
Line_48 $$ StringBuilder buffer = new StringBuilder()-->Line_50 $$ buffer.append("%")[ FD ]
Line_15 $$ StringBuilder builder = new StringBuilder()-->Line_17 $$ builder.append(ksName)[ FD ]
Line_34 $$ long total = Long.parseLong(c.get("total"))-->Line_40 $$ String totalStr = humanReadable ? FileUtils.stringifyFileSize(total) : Long.toString(total)[ FD ]
Line_33 $$ for (Map<String, String> c : compactions) -->Line_35 $$ long completed = Long.parseLong(c.get("completed"))[ FD ]
Line_41 $$ String unit = c.get("unit")-->Line_44 $$ addLine(lines, columnSizes, id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete)[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_4 $$ Map<String, Map<String, Integer>> pendingTaskNumberByTable = (Map<String, Map<String, Integer>>) probe.getCompactionMetric("PendingTasksByTableName")[ FD ]
Line_48 $$ StringBuilder buffer = new StringBuilder()-->Line_55 $$ String format = buffer.toString()[ FD ]
Line_31 $$ int[] columnSizes = new int[] -->Line_32 $$ addLine(lines, columnSizes, "id", "compaction type", "keyspace", "table", "completed", "total", "unit", "progress")[ FD ]
Line_33 $$ for (Map<String, String> c : compactions) -->Line_37 $$ String keyspace = c.get("keyspace")[ FD ]
Line_60 $$ if (compactionThroughput != 0) -->Line_61 $$ long remainingTimeInSecs = remainingBytes / (1024L * 1024L * compactionThroughput)[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_3 $$ CompactionManagerMBean cm = probe.getCompactionManagerProxy()[ FD ]
Line_26 $$ long remainingBytes = 0-->Line_46 $$ remainingBytes += total - completed[ FD ]
Line_28 $$ if (!compactions.isEmpty()) -->Line_60 $$ if (compactionThroughput != 0) [ CD ]
Line_33 $$ for (Map<String, String> c : compactions) -->Line_36 $$ String taskType = c.get("taskType")[ FD ]
Line_35 $$ long completed = Long.parseLong(c.get("completed"))-->Line_39 $$ String completedStr = humanReadable ? FileUtils.stringifyFileSize(completed) : Long.toString(completed)[ FD ]
Line_28 $$ if (!compactions.isEmpty()) -->Line_64 $$ System.out.printf("%25s%10s%n", "Active compaction remaining time : ", remainingTime)[ CD ]
Line_15 $$ StringBuilder builder = new StringBuilder()-->Line_22 $$ System.out.println(builder.toString())[ FD ]
Line_13 $$ String tableName = tableEntry.getKey()-->Line_19 $$ builder.append(tableName)[ FD ]
Line_14 $$ int pendingTaskCount = tableEntry.getValue()-->Line_21 $$ builder.append(pendingTaskCount)[ FD ]
Line_28 $$ if (!compactions.isEmpty()) -->Line_48 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_28 $$ if (!compactions.isEmpty()) [ CD ]
Line_48 $$ StringBuilder buffer = new StringBuilder()-->Line_54 $$ buffer.append("%n")[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_5 $$ int numTotalPendingTask = 0[ CD ]
Line_28 $$ if (!compactions.isEmpty()) -->Line_31 $$ int[] columnSizes = new int[] [ CD ]
Line_33 $$ for (Map<String, String> c : compactions) -->Line_34 $$ long total = Long.parseLong(c.get("total"))[ FD ]
Line_33 $$ for (Map<String, String> c : compactions) -->Line_41 $$ String unit = c.get("unit")[ FD ]
Line_15 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append("- ")[ FD ]
Line_36 $$ String taskType = c.get("taskType")-->Line_44 $$ addLine(lines, columnSizes, id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete)[ FD ]
Line_7 $$ for (Entry<String, Integer> tableEntry : ksEntry.getValue().entrySet()) numTotalPendingTask += tableEntry.getValue()-->Line_13 $$ String tableName = tableEntry.getKey()[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_25 $$ System.out.println()[ CD ]
Line_62 $$ remainingTime = format("%dh%02dm%02ds", remainingTimeInSecs / 3600, (remainingTimeInSecs % 3600) / 60, (remainingTimeInSecs % 60))-->Line_64 $$ System.out.printf("%25s%10s%n", "Active compaction remaining time : ", remainingTime)[ FD ]
Line_15 $$ StringBuilder builder = new StringBuilder()-->Line_18 $$ builder.append('.')[ FD ]
Line_60 $$ if (compactionThroughput != 0) -->Line_62 $$ remainingTime = format("%dh%02dm%02ds", remainingTimeInSecs / 3600, (remainingTimeInSecs % 3600) / 60, (remainingTimeInSecs % 60))[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_27 $$ List<Map<String, String>> compactions = cm.getCompactions()[ CD ]
Line_3 $$ CompactionManagerMBean cm = probe.getCompactionManagerProxy()-->Line_27 $$ List<Map<String, String>> compactions = cm.getCompactions()[ FD ]
Line_45 $$ if (taskType.equals(OperationType.COMPACTION.toString()))-->Line_46 $$ remainingBytes += total - completed[ CD ]
Line_6 $$ for (Entry<String, Map<String, Integer>> ksEntry : pendingTaskNumberByTable.entrySet()) -->Line_11 $$ String ksName = ksEntry.getKey()[ FD ]
Line_36 $$ String taskType = c.get("taskType")-->Line_45 $$ if (taskType.equals(OperationType.COMPACTION.toString()))[ FD ]
Line_6 $$ for (Entry<String, Map<String, Integer>> ksEntry : pendingTaskNumberByTable.entrySet()) -->Line_12 $$ for (Entry<String, Integer> tableEntry : ksEntry.getValue().entrySet()) [ FD ]
Line_48 $$ StringBuilder buffer = new StringBuilder()-->Line_52 $$ buffer.append("s")[ FD ]
Line_29 $$ int compactionThroughput = probe.getCompactionThroughput()-->Line_60 $$ if (compactionThroughput != 0) [ FD ]
Line_35 $$ long completed = Long.parseLong(c.get("completed"))-->Line_46 $$ remainingBytes += total - completed[ FD ]
Line_40 $$ String totalStr = humanReadable ? FileUtils.stringifyFileSize(total) : Long.toString(total)-->Line_44 $$ addLine(lines, columnSizes, id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete)[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_29 $$ int compactionThroughput = probe.getCompactionThroughput()[ FD ]
Line_55 $$ String format = buffer.toString()-->Line_57 $$ System.out.printf(format, line[0], line[1], line[2], line[3], line[4], line[5], line[6], line[7])[ FD ]
Line_27 $$ List<Map<String, String>> compactions = cm.getCompactions()-->Line_28 $$ if (!compactions.isEmpty()) [ FD ]
Line_28 $$ if (!compactions.isEmpty()) -->Line_30 $$ List<String[]> lines = new ArrayList()[ CD ]
Line_15 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append(pendingTaskCount)[ FD ]
Line_33 $$ for (Map<String, String> c : compactions) -->Line_43 $$ String id = c.get("compactionId")[ FD ]
Line_7 $$ for (Entry<String, Integer> tableEntry : ksEntry.getValue().entrySet()) numTotalPendingTask += tableEntry.getValue()-->Line_14 $$ int pendingTaskCount = tableEntry.getValue()[ FD ]
Line_6 $$ for (Entry<String, Map<String, Integer>> ksEntry : pendingTaskNumberByTable.entrySet()) -->Line_7 $$ for (Entry<String, Integer> tableEntry : ksEntry.getValue().entrySet()) numTotalPendingTask += tableEntry.getValue()[ FD ]
Line_15 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ builder.append(tableName)[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_3 $$ CompactionManagerMBean cm = probe.getCompactionManagerProxy()[ CD ]
Line_59 $$ String remainingTime = "n/a"-->Line_62 $$ remainingTime = format("%dh%02dm%02ds", remainingTimeInSecs / 3600, (remainingTimeInSecs % 3600) / 60, (remainingTimeInSecs % 60))[ FD ]
Line_37 $$ String keyspace = c.get("keyspace")-->Line_44 $$ addLine(lines, columnSizes, id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete)[ FD ]
Line_59 $$ String remainingTime = "n/a"-->Line_64 $$ System.out.printf("%25s%10s%n", "Active compaction remaining time : ", remainingTime)[ FD ]
Line_33 $$ for (Map<String, String> c : compactions) -->Line_38 $$ String columnFamily = c.get("columnfamily")[ FD ]
Line_11 $$ String ksName = ksEntry.getKey()-->Line_17 $$ builder.append(ksName)[ FD ]
Line_42 $$ String percentComplete = total == 0 ? "n/a" : new DecimalFormat("0.00").format((double) completed / total * 100) + "%"-->Line_44 $$ addLine(lines, columnSizes, id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete)[ FD ]
Line_28 $$ if (!compactions.isEmpty()) -->Line_59 $$ String remainingTime = "n/a"[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_26 $$ long remainingBytes = 0[ CD ]
Line_43 $$ String id = c.get("compactionId")-->Line_44 $$ addLine(lines, columnSizes, id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete)[ FD ]
Line_31 $$ int[] columnSizes = new int[] -->Line_44 $$ addLine(lines, columnSizes, id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete)[ FD ]
Line_30 $$ List<String[]> lines = new ArrayList()-->Line_32 $$ addLine(lines, columnSizes, "id", "compaction type", "keyspace", "table", "completed", "total", "unit", "progress")[ FD ]
Line_28 $$ if (!compactions.isEmpty()) -->Line_55 $$ String format = buffer.toString()[ CD ]
Line_15 $$ StringBuilder builder = new StringBuilder()-->Line_20 $$ builder.append(": ")[ FD ]
Line_5 $$ int numTotalPendingTask = 0-->Line_7 $$ numTotalPendingTask += tableEntry.getValue()[ FD ]
Line_4 $$ Map<String, Map<String, Integer>> pendingTaskNumberByTable = (Map<String, Map<String, Integer>>) probe.getCompactionMetric("PendingTasksByTableName")-->Line_6 $$ for (Entry<String, Map<String, Integer>> ksEntry : pendingTaskNumberByTable.entrySet()) [ FD ]
Line_39 $$ String completedStr = humanReadable ? FileUtils.stringifyFileSize(completed) : Long.toString(completed)-->Line_44 $$ addLine(lines, columnSizes, id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete)[ FD ]
Line_4 $$ Map<String, Map<String, Integer>> pendingTaskNumberByTable = (Map<String, Map<String, Integer>>) probe.getCompactionMetric("PendingTasksByTableName")-->Line_10 $$ for (Entry<String, Map<String, Integer>> ksEntry : pendingTaskNumberByTable.entrySet()) [ FD ]
Line_28 $$ if (!compactions.isEmpty()) -->Line_54 $$ buffer.append("%n")[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_9 $$ System.out.println("pending tasks: " + numTotalPendingTask)[ CD ]
Line_30 $$ List<String[]> lines = new ArrayList()-->Line_44 $$ addLine(lines, columnSizes, id, taskType, keyspace, columnFamily, completedStr, totalStr, unit, percentComplete)[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_4 $$ Map<String, Map<String, Integer>> pendingTaskNumberByTable = (Map<String, Map<String, Integer>>) probe.getCompactionMetric("PendingTasksByTableName")[ CD ]
Line_34 $$ long total = Long.parseLong(c.get("total"))-->Line_46 $$ remainingBytes += total - completed[ FD ]
Line_28 $$ if (!compactions.isEmpty()) -->Line_32 $$ addLine(lines, columnSizes, "id", "compaction type", "keyspace", "table", "completed", "total", "unit", "progress")[ CD ]
Line_28 $$ if (!compactions.isEmpty()) -->Line_29 $$ int compactionThroughput = probe.getCompactionThroughput()[ CD ]
