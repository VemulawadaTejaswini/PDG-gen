Line_18 $$ Settings settings = settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "100b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(), 1.05).build()-->Line_19 $$ assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(settings))[ FD ]
Line_23 $$ for (NodeStats stat : stats.getNodes()) -->Line_24 $$ CircuitBreakerStats breakerStats = stat.getBreaker().getStats(CircuitBreaker.FIELDDATA)[ FD ]
Line_22 $$ int breaks = 0-->Line_25 $$ breaks += breakerStats.getTrippedCount()[ FD ]
Line_7 $$ final Client client = client()-->Line_21 $$ NodesStatsResponse stats = client.admin().cluster().prepareNodesStats().setBreaker(true).get()[ FD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_17 $$ clearFieldData()[ CD ]
Line_3 $$ if (noopBreakerUsed()) -->Line_5 $$ return[ CD ]
Line_7 $$ final Client client = client()-->Line_16 $$ client.prepareSearch("ramtest").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC).get()[ FD ]
Line_22 $$ int breaks = 0-->Line_27 $$ assertThat(breaks, greaterThanOrEqualTo(1))[ FD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_15 $$ indexRandom(true, false, true, reqs)[ CD ]
Line_7 $$ final Client client = client()-->Line_13 $$ reqs.add(client.prepareIndex("ramtest", "type", Long.toString(id)).setSource("test", "value" + id))[ FD ]
Line_25 $$ breaks += breakerStats.getTrippedCount()-->Line_27 $$ assertThat(breaks, greaterThanOrEqualTo(1))[ FD ]
Line_11 $$ List<IndexRequestBuilder> reqs = new ArrayList()-->Line_15 $$ indexRandom(true, false, true, reqs)[ FD ]
Line_7 $$ final Client client = client()-->Line_19 $$ assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(settings))[ FD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_8 $$ assertAcked(prepareCreate("ramtest").setSource("[ CD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_27 $$ assertThat(breaks, greaterThanOrEqualTo(1))[ CD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_7 $$ final Client client = client()[ CD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_22 $$ int breaks = 0[ CD ]
Line_12 $$ for (long id = 0; id < docCount; id++) -->Line_13 $$ reqs.add(client.prepareIndex("ramtest", "type", Long.toString(id)).setSource("test", "value" + id))[ CD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_3 $$ if (noopBreakerUsed()) [ CD ]
Line_11 $$ List<IndexRequestBuilder> reqs = new ArrayList()-->Line_13 $$ reqs.add(client.prepareIndex("ramtest", "type", Long.toString(id)).setSource("test", "value" + id))[ FD ]
Line_24 $$ CircuitBreakerStats breakerStats = stat.getBreaker().getStats(CircuitBreaker.FIELDDATA)-->Line_25 $$ breaks += breakerStats.getTrippedCount()[ FD ]
Line_10 $$ int docCount = scaledRandomIntBetween(300, 1000)-->Line_12 $$ for (long id = 0; id < docCount; id++) [ FD ]
Line_7 $$ final Client client = client()-->Line_20 $$ assertFailures(client.prepareSearch("ramtest").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC), RestStatus.INTERNAL_SERVER_ERROR, containsString("Data too large, data for [test] would be larger than limit of [100/100b]"))[ FD ]
Line_21 $$ NodesStatsResponse stats = client.admin().cluster().prepareNodesStats().setBreaker(true).get()-->Line_23 $$ for (NodeStats stat : stats.getNodes()) [ FD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_9 $$ ensureGreen("ramtest")[ CD ]
Line_12 $$ for (long id = 0; id < docCount; id++) -->Line_13 $$ reqs.add(client.prepareIndex("ramtest", "type", Long.toString(id)).setSource("test", "value" + id))[ FD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_11 $$ List<IndexRequestBuilder> reqs = new ArrayList()[ CD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_16 $$ client.prepareSearch("ramtest").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC).get()[ CD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_18 $$ Settings settings = settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "100b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(), 1.05).build()[ CD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_10 $$ int docCount = scaledRandomIntBetween(300, 1000)[ CD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_12 $$ for (long id = 0; id < docCount; id++) [ CD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_21 $$ NodesStatsResponse stats = client.admin().cluster().prepareNodesStats().setBreaker(true).get()[ CD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_20 $$ assertFailures(client.prepareSearch("ramtest").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC), RestStatus.INTERNAL_SERVER_ERROR, containsString("Data too large, data for [test] would be larger than limit of [100/100b]"))[ CD ]
Line_2 $$ public void testRamAccountingTermsEnum() throws Exception -->Line_19 $$ assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(settings))[ CD ]
