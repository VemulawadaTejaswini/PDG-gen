Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_24 $$ FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc)[ CD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_14 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()[ CD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_19 $$ Path path = new Path(basedir, "test-file")[ CD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_15 $$ ExecutorService exec = Executors.newSingleThreadExecutor()[ CD ]
Line_15 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_26 $$ exec.shutdown()[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_26 $$ exec.shutdown()[ CD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_17 $$ int size = 512[ CD ]
Line_18 $$ LocalResourceVisibility vis = LocalResourceVisibility.PUBLIC-->Line_21 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_23 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))[ CD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_27 $$ while (!exec.awaitTermination(1000, TimeUnit.MILLISECONDS)) [ CD ]
Line_11 $$ long sharedSeed = rand.nextLong()-->Line_12 $$ rand.setSeed(sharedSeed)[ FD ]
Line_22 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), size, conf)-->Line_23 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))[ CD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_9 $$ Map<LocalResource, LocalResourceVisibility> rsrcVis = new HashMap<LocalResource, LocalResourceVisibility>()[ CD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_4 $$ conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, "077")[ CD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_18 $$ LocalResourceVisibility vis = LocalResourceVisibility.PUBLIC[ CD ]
Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_7 $$ files.mkdir(basedir, null, true)[ FD ]
Line_10 $$ Random rand = new Random()-->Line_12 $$ rand.setSeed(sharedSeed)[ FD ]
Line_18 $$ LocalResourceVisibility vis = LocalResourceVisibility.PUBLIC-->Line_20 $$ LocalResource rsrc = createFile(files, path, size, rand, vis)[ FD ]
Line_20 $$ LocalResource rsrc = createFile(files, path, size, rand, vis)-->Line_25 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_8 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ CD ]
Line_30 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) -->Line_31 $$ p.getValue().get()[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_25 $$ pending.put(rsrc, exec.submit(fsd))[ CD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_12 $$ rand.setSeed(sharedSeed)[ CD ]
Line_20 $$ LocalResource rsrc = createFile(files, path, size, rand, vis)-->Line_21 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_20 $$ LocalResource rsrc = createFile(files, path, size, rand, vis)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_7 $$ files.mkdir(basedir, null, true)[ CD ]
Line_24 $$ FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc)-->Line_25 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_16 $$ LocalDirAllocator dirs = new LocalDirAllocator(TestFSDownload.class.getName())[ CD ]
Line_14 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_25 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_22 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), size, conf)[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_21 $$ rsrcVis.put(rsrc, vis)[ CD ]
Line_15 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_25 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_7 $$ files.mkdir(basedir, null, true)[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_13 $$ System.out.println("SEED: " + sharedSeed)[ CD ]
Line_9 $$ Map<LocalResource, LocalResourceVisibility> rsrcVis = new HashMap<LocalResource, LocalResourceVisibility>()-->Line_21 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_17 $$ int size = 512-->Line_22 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), size, conf)[ FD ]
Line_20 $$ LocalResource rsrc = createFile(files, path, size, rand, vis)-->Line_28 $$ Assert.assertTrue(pending.get(rsrc).isDone())[ FD ]
Line_14 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_30 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) [ FD ]
Line_19 $$ Path path = new Path(basedir, "test-file")-->Line_20 $$ LocalResource rsrc = createFile(files, path, size, rand, vis)[ FD ]
Line_10 $$ Random rand = new Random()-->Line_11 $$ long sharedSeed = rand.nextLong()[ FD ]
Line_17 $$ int size = 512-->Line_20 $$ LocalResource rsrc = createFile(files, path, size, rand, vis)[ FD ]
Line_10 $$ Random rand = new Random()-->Line_20 $$ LocalResource rsrc = createFile(files, path, size, rand, vis)[ FD ]
Line_15 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_27 $$ while (!exec.awaitTermination(1000, TimeUnit.MILLISECONDS)) [ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_22 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), size, conf)[ CD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_20 $$ LocalResource rsrc = createFile(files, path, size, rand, vis)[ CD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_10 $$ Random rand = new Random()[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_11 $$ long sharedSeed = rand.nextLong()[ CD ]
Line_16 $$ LocalDirAllocator dirs = new LocalDirAllocator(TestFSDownload.class.getName())-->Line_22 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), size, conf)[ FD ]
Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_8 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ FD ]
Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_22 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), size, conf)[ FD ]
Line_14 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_28 $$ Assert.assertTrue(pending.get(rsrc).isDone())[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, "077")[ FD ]
Line_2 $$ public void testDownloadBadPublic() throws IOException, URISyntaxException, InterruptedException -->Line_28 $$ Assert.assertTrue(pending.get(rsrc).isDone())[ CD ]
