Line_3 $$ final String user = "someuser"-->Line_17 $$ LocalResourceRequest lr1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.APPLICATION)[ FD ]
Line_2 $$ public void testRecoveredResource() throws Exception -->Line_4 $$ final ApplicationId appId = ApplicationId.newInstance(1, 1)[ CD ]
Line_17 $$ LocalResourceRequest lr1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.APPLICATION)-->Line_18 $$ Assert.assertNull(tracker.getLocalizedResource(lr1))[ FD ]
Line_34 $$ if (dispatcher != null) -->Line_35 $$ dispatcher.stop()[ CD ]
Line_2 $$ public void testRecoveredResource() throws Exception -->Line_3 $$ final String user = "someuser"[ CD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_8 $$ dispatcher = createDispatcher(conf)[ FD ]
Line_15 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, false, conf, stateStore)-->Line_22 $$ tracker.handle(new ResourceRecoveredEvent(lr1, localizedPath1, 120))[ FD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_35 $$ dispatcher.stop()[ FD ]
Line_2 $$ public void testRecoveredResource() throws Exception -->Line_8 $$ dispatcher = createDispatcher(conf)[ CD ]
Line_2 $$ public void testRecoveredResource() throws Exception -->Line_12 $$ dispatcher.register(ContainerEventType.class, containerEventHandler)[ CD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_12 $$ dispatcher.register(ContainerEventType.class, containerEventHandler)[ FD ]
Line_2 $$ public void testRecoveredResource() throws Exception -->Line_9 $$ EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class)[ CD ]
Line_17 $$ LocalResourceRequest lr1 = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.APPLICATION)-->Line_24 $$ Assert.assertNotNull(tracker.getLocalizedResource(lr1))[ FD ]
Line_10 $$ EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class)-->Line_12 $$ dispatcher.register(ContainerEventType.class, containerEventHandler)[ FD ]
Line_15 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, false, conf, stateStore)-->Line_18 $$ Assert.assertNull(tracker.getLocalizedResource(lr1))[ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_29 $$ dispatcher.await()[ FD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_29 $$ dispatcher.await()[ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_11 $$ dispatcher.register(LocalizerEventType.class, localizerEventHandler)[ FD ]
Line_15 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, false, conf, stateStore)-->Line_30 $$ Path hierarchicalPath2 = tracker.getPathForLocalization(lr2, localDir)[ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_35 $$ dispatcher.stop()[ FD ]
Line_3 $$ final String user = "someuser"-->Line_25 $$ LocalResourceRequest lr2 = createLocalResourceRequest(user, 2, 2, LocalResourceVisibility.APPLICATION)[ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_12 $$ dispatcher.register(ContainerEventType.class, containerEventHandler)[ FD ]
Line_25 $$ LocalResourceRequest lr2 = createLocalResourceRequest(user, 2, 2, LocalResourceVisibility.APPLICATION)-->Line_30 $$ Path hierarchicalPath2 = tracker.getPathForLocalization(lr2, localDir)[ FD ]
Line_27 $$ ResourceEvent reqEvent2 = new ResourceRequestEvent(lr2, LocalResourceVisibility.APPLICATION, lc2)-->Line_28 $$ tracker.handle(reqEvent2)[ FD ]
Line_2 $$ public void testRecoveredResource() throws Exception -->Line_13 $$ NMStateStoreService stateStore = mock(NMStateStoreService.class)[ CD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_23 $$ dispatcher.await()[ FD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_34 $$ if (dispatcher != null) [ FD ]
Line_6 $$ Configuration conf = new YarnConfiguration()-->Line_8 $$ dispatcher = createDispatcher(conf)[ FD ]
Line_2 $$ public void testRecoveredResource() throws Exception -->Line_6 $$ Configuration conf = new YarnConfiguration()[ CD ]
Line_15 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, false, conf, stateStore)-->Line_24 $$ Assert.assertNotNull(tracker.getLocalizedResource(lr1))[ FD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_23 $$ dispatcher.await()[ FD ]
Line_19 $$ final long localizedId1 = 52-->Line_20 $$ Path hierarchicalPath1 = new Path(localDir, Long.toString(localizedId1))[ FD ]
Line_30 $$ Path hierarchicalPath2 = tracker.getPathForLocalization(lr2, localDir)-->Line_31 $$ long localizedId2 = Long.parseLong(hierarchicalPath2.getName())[ FD ]
Line_2 $$ public void testRecoveredResource() throws Exception -->Line_11 $$ dispatcher.register(LocalizerEventType.class, localizerEventHandler)[ CD ]
Line_5 $$ final Path localDir = new Path("/tmp/localdir")-->Line_30 $$ Path hierarchicalPath2 = tracker.getPathForLocalization(lr2, localDir)[ FD ]
Line_31 $$ long localizedId2 = Long.parseLong(hierarchicalPath2.getName())-->Line_32 $$ Assert.assertEquals(localizedId1 + 1, localizedId2)[ FD ]
Line_2 $$ public void testRecoveredResource() throws Exception -->Line_10 $$ EventHandler<LocalizerEvent> containerEventHandler = mock(EventHandler.class)[ CD ]
Line_8 $$ dispatcher = createDispatcher(conf)-->Line_11 $$ dispatcher.register(LocalizerEventType.class, localizerEventHandler)[ FD ]
Line_2 $$ public void testRecoveredResource() throws Exception -->Line_7 $$ DrainDispatcher dispatcher = null[ CD ]
Line_7 $$ DrainDispatcher dispatcher = null-->Line_34 $$ if (dispatcher != null) [ FD ]
Line_9 $$ EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class)-->Line_11 $$ dispatcher.register(LocalizerEventType.class, localizerEventHandler)[ FD ]
Line_15 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, appId, dispatcher, false, conf, stateStore)-->Line_28 $$ tracker.handle(reqEvent2)[ FD ]
Line_2 $$ public void testRecoveredResource() throws Exception -->Line_5 $$ final Path localDir = new Path("/tmp/localdir")[ CD ]
