Line_3 $$ if (noopBreakerUsed()) -->Line_5 $$ return[ CD ]
Line_2 $$ public void testRequestBreaker() throws Exception -->Line_13 $$ for (long id = 0; id < docCount; id++) [ CD ]
Line_21 $$ String errMsg = "CircuitBreakingException[[request] Data too large, data for [<reused_arrays>] would be larger than limit of [10/10b]]"-->Line_22 $$ assertThat("Exception: " + e.toString() + " should contain a CircuitBreakingException", e.toString().contains(errMsg), equalTo(true))[ FD ]
Line_2 $$ public void testRequestBreaker() throws Exception -->Line_11 $$ int docCount = scaledRandomIntBetween(300, 1000)[ CD ]
Line_2 $$ public void testRequestBreaker() throws Exception -->Line_3 $$ if (noopBreakerUsed()) [ CD ]
Line_9 $$ Settings resetSettings = settingsBuilder().put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "10b").build()-->Line_10 $$ assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings))[ FD ]
Line_2 $$ public void testRequestBreaker() throws Exception -->Line_7 $$ assertAcked(prepareCreate("cb-test", 1, settingsBuilder().put(SETTING_NUMBER_OF_REPLICAS, between(0, 1))))[ CD ]
Line_8 $$ Client client = client()-->Line_18 $$ client.prepareSearch("cb-test").setQuery(matchAllQuery()).addAggregation(cardinality("card").field("test")).get()[ FD ]
Line_8 $$ Client client = client()-->Line_14 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", id))[ FD ]
Line_2 $$ public void testRequestBreaker() throws Exception -->Line_16 $$ indexRandom(true, reqs)[ CD ]
Line_8 $$ Client client = client()-->Line_10 $$ assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings))[ FD ]
Line_2 $$ public void testRequestBreaker() throws Exception -->Line_12 $$ List<IndexRequestBuilder> reqs = new ArrayList()[ CD ]
Line_12 $$ List<IndexRequestBuilder> reqs = new ArrayList()-->Line_16 $$ indexRandom(true, reqs)[ FD ]
Line_2 $$ public void testRequestBreaker() throws Exception -->Line_10 $$ assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings))[ CD ]
Line_11 $$ int docCount = scaledRandomIntBetween(300, 1000)-->Line_13 $$ for (long id = 0; id < docCount; id++) [ FD ]
Line_12 $$ List<IndexRequestBuilder> reqs = new ArrayList()-->Line_14 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", id))[ FD ]
Line_2 $$ public void testRequestBreaker() throws Exception -->Line_8 $$ Client client = client()[ CD ]
Line_13 $$ for (long id = 0; id < docCount; id++) -->Line_14 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", id))[ CD ]
Line_13 $$ for (long id = 0; id < docCount; id++) -->Line_14 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", id))[ FD ]
Line_2 $$ public void testRequestBreaker() throws Exception -->Line_9 $$ Settings resetSettings = settingsBuilder().put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "10b").build()[ CD ]
