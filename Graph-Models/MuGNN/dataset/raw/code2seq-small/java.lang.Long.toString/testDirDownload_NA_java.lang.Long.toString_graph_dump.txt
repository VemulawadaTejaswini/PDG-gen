Line_37 $$ FileStatus status = files.getFileStatus(localized)-->Line_39 $$ assert (status.isDirectory())[ FD ]
Line_8 $$ Map<LocalResource, LocalResourceVisibility> rsrcVis = new HashMap<LocalResource, LocalResourceVisibility>()-->Line_23 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_21 $$ Path p = new Path(basedir, "dir" + i + ".jar")-->Line_22 $$ LocalResource rsrc = createJar(files, p, vis)[ FD ]
Line_15 $$ LocalDirAllocator dirs = new LocalDirAllocator(TestFSDownload.class.getName())-->Line_24 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), conf)[ FD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_7 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ CD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_9 $$ Random rand = new Random()[ CD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_8 $$ Map<LocalResource, LocalResourceVisibility> rsrcVis = new HashMap<LocalResource, LocalResourceVisibility>()[ CD ]
Line_36 $$ Path localized = p.getValue().get()-->Line_41 $$ verifyPermsRecursively(localized.getFileSystem(conf), files, localized, rsrcVis.get(p.getKey()))[ FD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_4 $$ FileContext files = FileContext.getLocalFSFileContext(conf)[ CD ]
Line_19 $$ vis = LocalResourceVisibility.APPLICATION-->Line_22 $$ LocalResource rsrc = createJar(files, p, vis)[ FD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_15 $$ LocalDirAllocator dirs = new LocalDirAllocator(TestFSDownload.class.getName())[ CD ]
Line_13 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_27 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ FD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_5 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))[ CD ]
Line_19 $$ vis = LocalResourceVisibility.APPLICATION-->Line_23 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_13 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_31 $$ for (Future<Path> path : pending.values()) [ FD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_13 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()[ CD ]
Line_36 $$ Path localized = p.getValue().get()-->Line_37 $$ FileStatus status = files.getFileStatus(localized)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_24 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), conf)[ FD ]
Line_8 $$ Map<LocalResource, LocalResourceVisibility> rsrcVis = new HashMap<LocalResource, LocalResourceVisibility>()-->Line_41 $$ verifyPermsRecursively(localized.getFileSystem(conf), files, localized, rsrcVis.get(p.getKey()))[ FD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_14 $$ ExecutorService exec = Executors.newSingleThreadExecutor()[ CD ]
Line_16 $$ for (int i = 0; i < 5; ++i) -->Line_25 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))[ CD ]
Line_16 $$ for (int i = 0; i < 5; ++i) -->Line_26 $$ FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc)[ CD ]
Line_14 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_29 $$ exec.shutdown()[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_41 $$ verifyPermsRecursively(localized.getFileSystem(conf), files, localized, rsrcVis.get(p.getKey()))[ FD ]
Line_16 $$ for (int i = 0; i < 5; ++i) -->Line_18 $$ if (i % 2 == 1) [ CD ]
Line_4 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_5 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))[ FD ]
Line_18 $$ if (i % 2 == 1) -->Line_19 $$ vis = LocalResourceVisibility.APPLICATION[ CD ]
Line_16 $$ for (int i = 0; i < 5; ++i) -->Line_21 $$ Path p = new Path(basedir, "dir" + i + ".jar")[ CD ]
Line_14 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_27 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_35 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) -->Line_40 $$ assert (rsrcVis.containsKey(p.getKey()))[ FD ]
Line_10 $$ long sharedSeed = rand.nextLong()-->Line_11 $$ rand.setSeed(sharedSeed)[ FD ]
Line_22 $$ LocalResource rsrc = createJar(files, p, vis)-->Line_27 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_31 $$ for (Future<Path> path : pending.values()) -->Line_32 $$ Assert.assertTrue(path.isDone())[ FD ]
Line_14 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_30 $$ while (!exec.awaitTermination(1000, TimeUnit.MILLISECONDS)) [ FD ]
Line_5 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_7 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ FD ]
Line_17 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_19 $$ vis = LocalResourceVisibility.APPLICATION[ FD ]
Line_17 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_22 $$ LocalResource rsrc = createJar(files, p, vis)[ FD ]
Line_22 $$ LocalResource rsrc = createJar(files, p, vis)-->Line_23 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_24 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), conf)-->Line_25 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))[ FD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_30 $$ while (!exec.awaitTermination(1000, TimeUnit.MILLISECONDS)) [ CD ]
Line_9 $$ Random rand = new Random()-->Line_10 $$ long sharedSeed = rand.nextLong()[ FD ]
Line_35 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) -->Line_36 $$ Path localized = p.getValue().get()[ FD ]
Line_16 $$ for (int i = 0; i < 5; ++i) -->Line_24 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), conf)[ CD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_29 $$ exec.shutdown()[ CD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_11 $$ rand.setSeed(sharedSeed)[ CD ]
Line_16 $$ for (int i = 0; i < 5; ++i) -->Line_27 $$ pending.put(rsrc, exec.submit(fsd))[ CD ]
Line_21 $$ Path p = new Path(basedir, "dir" + i + ".jar")-->Line_40 $$ assert (rsrcVis.containsKey(p.getKey()))[ FD ]
Line_17 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_23 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_9 $$ Random rand = new Random()-->Line_11 $$ rand.setSeed(sharedSeed)[ FD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_12 $$ System.out.println("SEED: " + sharedSeed)[ CD ]
Line_16 $$ for (int i = 0; i < 5; ++i) -->Line_22 $$ LocalResource rsrc = createJar(files, p, vis)[ CD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_16 $$ for (int i = 0; i < 5; ++i) [ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ FileContext files = FileContext.getLocalFSFileContext(conf)[ FD ]
Line_5 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_24 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), conf)[ FD ]
Line_4 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_22 $$ LocalResource rsrc = createJar(files, p, vis)[ FD ]
Line_16 $$ for (int i = 0; i < 5; ++i) -->Line_23 $$ rsrcVis.put(rsrc, vis)[ CD ]
Line_16 $$ for (int i = 0; i < 5; ++i) -->Line_17 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE[ CD ]
Line_4 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_41 $$ verifyPermsRecursively(localized.getFileSystem(conf), files, localized, rsrcVis.get(p.getKey()))[ FD ]
Line_8 $$ Map<LocalResource, LocalResourceVisibility> rsrcVis = new HashMap<LocalResource, LocalResourceVisibility>()-->Line_40 $$ assert (rsrcVis.containsKey(p.getKey()))[ FD ]
Line_26 $$ FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc)-->Line_27 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_13 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_35 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) [ FD ]
Line_4 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_37 $$ FileStatus status = files.getFileStatus(localized)[ FD ]
Line_35 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) -->Line_41 $$ verifyPermsRecursively(localized.getFileSystem(conf), files, localized, rsrcVis.get(p.getKey()))[ FD ]
Line_5 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_6 $$ files.mkdir(basedir, null, true)[ FD ]
Line_21 $$ Path p = new Path(basedir, "dir" + i + ".jar")-->Line_36 $$ Path localized = p.getValue().get()[ FD ]
Line_21 $$ Path p = new Path(basedir, "dir" + i + ".jar")-->Line_41 $$ verifyPermsRecursively(localized.getFileSystem(conf), files, localized, rsrcVis.get(p.getKey()))[ FD ]
Line_4 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_6 $$ files.mkdir(basedir, null, true)[ FD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_6 $$ files.mkdir(basedir, null, true)[ CD ]
Line_2 $$ public void testDirDownload() throws IOException, InterruptedException -->Line_10 $$ long sharedSeed = rand.nextLong()[ CD ]
