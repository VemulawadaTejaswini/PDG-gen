Line_7 $$ for (int i = 0; i < numParents; ++i) -->Line_8 $$ for (int j = 0; j < numChildren[i]; ++j) [ CD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_4 $$ assertSearchResponse(response)[ CD ]
Line_16 $$ if (count > 0) -->Line_17 $$ ++uniqueValues[ CD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_25 $$ assertThat(nested.getAggregations().asList().isEmpty(), is(false))[ CD ]
Line_20 $$ Nested nested = response.getAggregations().get("nested")-->Line_25 $$ assertThat(nested.getAggregations().asList().isEmpty(), is(false))[ FD ]
Line_33 $$ if (counts[i] == 0) -->Line_36 $$ Bucket bucket = values.getBucketByKey(key)[ CD ]
Line_20 $$ Nested nested = response.getAggregations().get("nested")-->Line_24 $$ assertThat((long) nested.getProperty("_count"), equalTo(docCount))[ FD ]
Line_31 $$ for (int i = 0; i < counts.length; ++i) -->Line_32 $$ final String key = Long.toString(i)[ FD ]
Line_31 $$ for (int i = 0; i < counts.length; ++i) -->Line_32 $$ final String key = Long.toString(i)[ CD ]
Line_26 $$ LongTerms values = nested.getAggregations().get("values")-->Line_27 $$ assertThat(values, notNullValue())[ FD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_21 $$ assertThat(nested, notNullValue())[ CD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(nested("nested").path("nested").subAggregation(terms("values").field("nested.value").size(100).collectMode(aggCollectionMode))).execute().actionGet()[ CD ]
Line_5 $$ long docCount = 0-->Line_23 $$ assertThat(nested.getDocCount(), equalTo(docCount))[ FD ]
Line_20 $$ Nested nested = response.getAggregations().get("nested")-->Line_23 $$ assertThat(nested.getDocCount(), equalTo(docCount))[ FD ]
Line_32 $$ final String key = Long.toString(i)-->Line_36 $$ Bucket bucket = values.getBucketByKey(key)[ FD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_27 $$ assertThat(values, notNullValue())[ CD ]
Line_26 $$ LongTerms values = nested.getAggregations().get("values")-->Line_29 $$ assertThat(values.getBuckets(), notNullValue())[ FD ]
Line_31 $$ for (int i = 0; i < counts.length; ++i) -->Line_33 $$ if (counts[i] == 0) [ CD ]
Line_14 $$ int uniqueValues = 0-->Line_30 $$ assertThat(values.getBuckets().size(), equalTo(uniqueValues))[ FD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_28 $$ assertThat(values.getName(), equalTo("values"))[ CD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(nested("nested").path("nested").subAggregation(terms("values").field("nested.value").size(100).collectMode(aggCollectionMode))).execute().actionGet()-->Line_20 $$ Nested nested = response.getAggregations().get("nested")[ FD ]
Line_26 $$ LongTerms values = nested.getAggregations().get("values")-->Line_28 $$ assertThat(values.getName(), equalTo("values"))[ FD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_26 $$ LongTerms values = nested.getAggregations().get("values")[ CD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_30 $$ assertThat(values.getBuckets().size(), equalTo(uniqueValues))[ CD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_22 $$ assertThat(nested.getName(), equalTo("nested"))[ CD ]
Line_5 $$ long docCount = 0-->Line_24 $$ assertThat((long) nested.getProperty("_count"), equalTo(docCount))[ FD ]
Line_36 $$ Bucket bucket = values.getBucketByKey(key)-->Line_37 $$ assertNotNull(bucket)[ FD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_20 $$ Nested nested = response.getAggregations().get("nested")[ CD ]
Line_26 $$ LongTerms values = nested.getAggregations().get("values")-->Line_34 $$ assertNull(values.getBucketByKey(key))[ FD ]
Line_33 $$ if (counts[i] == 0) -->Line_38 $$ assertEquals(counts[i], bucket.getDocCount())[ CD ]
Line_32 $$ final String key = Long.toString(i)-->Line_34 $$ assertNull(values.getBucketByKey(key))[ FD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_5 $$ long docCount = 0[ CD ]
Line_26 $$ LongTerms values = nested.getAggregations().get("values")-->Line_30 $$ assertThat(values.getBuckets().size(), equalTo(uniqueValues))[ FD ]
Line_8 $$ for (int j = 0; j < numChildren[i]; ++j) -->Line_11 $$ ++docCount[ CD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_41 $$ assertThat((LongTerms) nested.getProperty("values"), sameInstance(values))[ CD ]
Line_26 $$ LongTerms values = nested.getAggregations().get("values")-->Line_36 $$ Bucket bucket = values.getBucketByKey(key)[ FD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_23 $$ assertThat(nested.getDocCount(), equalTo(docCount))[ CD ]
Line_36 $$ Bucket bucket = values.getBucketByKey(key)-->Line_38 $$ assertEquals(counts[i], bucket.getDocCount())[ FD ]
Line_26 $$ LongTerms values = nested.getAggregations().get("values")-->Line_41 $$ assertThat((LongTerms) nested.getProperty("values"), sameInstance(values))[ FD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_7 $$ for (int i = 0; i < numParents; ++i) [ CD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_24 $$ assertThat((long) nested.getProperty("_count"), equalTo(docCount))[ CD ]
Line_33 $$ if (counts[i] == 0) -->Line_34 $$ assertNull(values.getBucketByKey(key))[ CD ]
Line_15 $$ for (long count : counts) -->Line_16 $$ if (count > 0) [ FD ]
Line_14 $$ int uniqueValues = 0-->Line_17 $$ ++uniqueValues[ FD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_14 $$ int uniqueValues = 0[ CD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(nested("nested").path("nested").subAggregation(terms("values").field("nested.value").size(100).collectMode(aggCollectionMode))).execute().actionGet()-->Line_4 $$ assertSearchResponse(response)[ FD ]
Line_20 $$ Nested nested = response.getAggregations().get("nested")-->Line_41 $$ assertThat((LongTerms) nested.getProperty("values"), sameInstance(values))[ FD ]
Line_8 $$ for (int j = 0; j < numChildren[i]; ++j) -->Line_10 $$ ++counts[value][ CD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_29 $$ assertThat(values.getBuckets(), notNullValue())[ CD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_31 $$ for (int i = 0; i < counts.length; ++i) [ CD ]
Line_5 $$ long docCount = 0-->Line_11 $$ ++docCount[ FD ]
Line_7 $$ for (int i = 0; i < numParents; ++i) -->Line_32 $$ final String key = Long.toString(i)[ FD ]
Line_8 $$ for (int j = 0; j < numChildren[i]; ++j) -->Line_9 $$ final int value = i + 1 + j[ CD ]
Line_20 $$ Nested nested = response.getAggregations().get("nested")-->Line_21 $$ assertThat(nested, notNullValue())[ FD ]
Line_20 $$ Nested nested = response.getAggregations().get("nested")-->Line_22 $$ assertThat(nested.getName(), equalTo("nested"))[ FD ]
Line_7 $$ for (int i = 0; i < numParents; ++i) -->Line_31 $$ for (int i = 0; i < counts.length; ++i) [ FD ]
Line_2 $$ public void testNestedWithSubTermsAgg() throws Exception -->Line_6 $$ long[] counts = new long[numParents + 6][ CD ]
Line_20 $$ Nested nested = response.getAggregations().get("nested")-->Line_26 $$ LongTerms values = nested.getAggregations().get("values")[ FD ]
Line_33 $$ if (counts[i] == 0) -->Line_37 $$ assertNotNull(bucket)[ CD ]
