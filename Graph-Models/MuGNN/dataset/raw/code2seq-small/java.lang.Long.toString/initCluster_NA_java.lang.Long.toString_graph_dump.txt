Line_3 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.set("yarn.scheduler.capacity.root.default.capacity", "100.0")[ FD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_14 $$ conf = mrvl.getConfig()[ CD ]
Line_16 $$ if (files != null) -->Line_21 $$ conf.setStrings(MRJobConfig.CACHE_FILE_TIMESTAMPS, timestamps)[ CD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_15 $$ String[] files = conf.getStrings(MRJobConfig.CACHE_FILES)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.set(GRIDMIX_DEFAULT_QUEUE, "default")[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.set("yarn.scheduler.capacity.root.queues", "default")[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.setBoolean(GRIDMIX_USE_QUEUE_IN_TRACE, false)[ FD ]
Line_16 $$ if (files != null) -->Line_17 $$ String[] timestamps = new String[files.length][ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_13 $$ mrvl = MiniMRClientClusterFactory.create(caller, 2, conf)[ FD ]
Line_14 $$ conf = mrvl.getConfig()-->Line_15 $$ String[] files = conf.getStrings(MRJobConfig.CACHE_FILES)[ FD ]
Line_14 $$ conf = mrvl.getConfig()-->Line_21 $$ conf.setStrings(MRJobConfig.CACHE_FILE_TIMESTAMPS, timestamps)[ FD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_9 $$ dfsCluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_12 $$ conf.set(JTConfig.JT_RETIREJOBS, "false")[ FD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_17 $$ String[] timestamps = new String[files.length]-->Line_21 $$ conf.setStrings(MRJobConfig.CACHE_FILE_TIMESTAMPS, timestamps)[ FD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_8 $$ conf.set(GRIDMIX_DEFAULT_QUEUE, "default")[ CD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_11 $$ dfs = dfsCluster.getFileSystem()[ CD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_13 $$ mrvl = MiniMRClientClusterFactory.create(caller, 2, conf)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_14 $$ conf = mrvl.getConfig()[ FD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_16 $$ if (files != null) [ CD ]
Line_18 $$ for (int i = 0; i < files.length; i++) -->Line_19 $$ timestamps[i] = Long.toString(System.currentTimeMillis())[ CD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_5 $$ conf.set("yarn.scheduler.capacity.root.queues", "default")[ CD ]
Line_16 $$ if (files != null) -->Line_18 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_6 $$ conf.set("yarn.scheduler.capacity.root.default.capacity", "100.0")[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_15 $$ String[] files = conf.getStrings(MRJobConfig.CACHE_FILES)[ FD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_13 $$ mrvl = MiniMRClientClusterFactory.create(caller, 2, conf)[ CD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_12 $$ conf.set(JTConfig.JT_RETIREJOBS, "false")[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_21 $$ conf.setStrings(MRJobConfig.CACHE_FILE_TIMESTAMPS, timestamps)[ FD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_4 $$ conf.set("mapred.queue.names", "default")[ CD ]
Line_15 $$ String[] files = conf.getStrings(MRJobConfig.CACHE_FILES)-->Line_16 $$ if (files != null) [ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.set("mapred.queue.names", "default")[ FD ]
Line_2 $$ public static void initCluster(Class<?> caller) throws IOException -->Line_7 $$ conf.setBoolean(GRIDMIX_USE_QUEUE_IN_TRACE, false)[ CD ]
