Line_17 $$ if (PLACEHOLDER_ARGUMENT_TYPES.equals(match)) -->Line_18 $$ appendArgumentTypes(methodInvocation, matcher, output)[ CD ]
Line_4 $$ StringBuffer output = new StringBuffer()-->Line_22 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(throwable.toString()))[ FD ]
Line_12 $$ if (PLACEHOLDER_TARGET_CLASS_SHORT_NAME.equals(match)) -->Line_15 $$ if (PLACEHOLDER_ARGUMENTS.equals(match)) [ CD ]
Line_6 $$ String match = matcher.group()-->Line_7 $$ if (PLACEHOLDER_METHOD_NAME.equals(match)) [ FD ]
Line_4 $$ StringBuffer output = new StringBuffer()-->Line_11 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(className))[ FD ]
Line_10 $$ String className = getClassForLogging(methodInvocation.getThis()).getName()-->Line_11 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(className))[ FD ]
Line_3 $$ Matcher matcher = PATTERN.matcher(message)-->Line_18 $$ appendArgumentTypes(methodInvocation, matcher, output)[ FD ]
Line_6 $$ String match = matcher.group()-->Line_19 $$ if (PLACEHOLDER_RETURN_VALUE.equals(match)) [ FD ]
Line_3 $$ Matcher matcher = PATTERN.matcher(message)-->Line_22 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(throwable.toString()))[ FD ]
Line_3 $$ Matcher matcher = PATTERN.matcher(message)-->Line_24 $$ matcher.appendReplacement(output, Long.toString(invocationTime))[ FD ]
Line_3 $$ Matcher matcher = PATTERN.matcher(message)-->Line_8 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(methodInvocation.getMethod().getName()))[ FD ]
Line_3 $$ Matcher matcher = PATTERN.matcher(message)-->Line_16 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(StringUtils.arrayToCommaDelimitedString(methodInvocation.getArguments())))[ FD ]
Line_7 $$ if (PLACEHOLDER_METHOD_NAME.equals(match)) -->Line_9 $$ if (PLACEHOLDER_TARGET_CLASS_NAME.equals(match)) [ CD ]
Line_3 $$ Matcher matcher = PATTERN.matcher(message)-->Line_14 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(shortName))[ FD ]
Line_4 $$ StringBuffer output = new StringBuffer()-->Line_20 $$ appendReturnValue(methodInvocation, matcher, output, returnValue)[ FD ]
Line_9 $$ if (PLACEHOLDER_TARGET_CLASS_NAME.equals(match)) -->Line_10 $$ String className = getClassForLogging(methodInvocation.getThis()).getName()[ CD ]
Line_15 $$ if (PLACEHOLDER_ARGUMENTS.equals(match)) -->Line_17 $$ if (PLACEHOLDER_ARGUMENT_TYPES.equals(match)) [ CD ]
Line_3 $$ Matcher matcher = PATTERN.matcher(message)-->Line_11 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(className))[ FD ]
Line_4 $$ StringBuffer output = new StringBuffer()-->Line_24 $$ matcher.appendReplacement(output, Long.toString(invocationTime))[ FD ]
Line_19 $$ if (PLACEHOLDER_RETURN_VALUE.equals(match)) -->Line_20 $$ appendReturnValue(methodInvocation, matcher, output, returnValue)[ CD ]
Line_4 $$ StringBuffer output = new StringBuffer()-->Line_30 $$ return output.toString()[ FD ]
Line_15 $$ if (PLACEHOLDER_ARGUMENTS.equals(match)) -->Line_16 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(StringUtils.arrayToCommaDelimitedString(methodInvocation.getArguments())))[ CD ]
Line_5 $$ while (matcher.find()) -->Line_7 $$ if (PLACEHOLDER_METHOD_NAME.equals(match)) [ CD ]
Line_4 $$ StringBuffer output = new StringBuffer()-->Line_18 $$ appendArgumentTypes(methodInvocation, matcher, output)[ FD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_3 $$ Matcher matcher = PATTERN.matcher(message)[ CD ]
Line_12 $$ if (PLACEHOLDER_TARGET_CLASS_SHORT_NAME.equals(match)) -->Line_13 $$ String shortName = ClassUtils.getShortName(getClassForLogging(methodInvocation.getThis()))[ CD ]
Line_6 $$ String match = matcher.group()-->Line_23 $$ if (PLACEHOLDER_INVOCATION_TIME.equals(match)) [ FD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_29 $$ matcher.appendTail(output)[ CD ]
Line_5 $$ while (matcher.find()) -->Line_6 $$ String match = matcher.group()[ CD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_4 $$ StringBuffer output = new StringBuffer()[ CD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_16 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(StringUtils.arrayToCommaDelimitedString(methodInvocation.getArguments())))[ FD ]
Line_4 $$ StringBuffer output = new StringBuffer()-->Line_14 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(shortName))[ FD ]
Line_4 $$ StringBuffer output = new StringBuffer()-->Line_16 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(StringUtils.arrayToCommaDelimitedString(methodInvocation.getArguments())))[ FD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_13 $$ String shortName = ClassUtils.getShortName(getClassForLogging(methodInvocation.getThis()))[ FD ]
Line_6 $$ String match = matcher.group()-->Line_9 $$ if (PLACEHOLDER_TARGET_CLASS_NAME.equals(match)) [ FD ]
Line_12 $$ if (PLACEHOLDER_TARGET_CLASS_SHORT_NAME.equals(match)) -->Line_14 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(shortName))[ CD ]
Line_21 $$ if (throwable != null && PLACEHOLDER_EXCEPTION.equals(match)) -->Line_23 $$ if (PLACEHOLDER_INVOCATION_TIME.equals(match)) [ CD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_22 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(throwable.toString()))[ FD ]
Line_3 $$ Matcher matcher = PATTERN.matcher(message)-->Line_5 $$ while (matcher.find()) [ FD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_3 $$ Matcher matcher = PATTERN.matcher(message)[ FD ]
Line_17 $$ if (PLACEHOLDER_ARGUMENT_TYPES.equals(match)) -->Line_19 $$ if (PLACEHOLDER_RETURN_VALUE.equals(match)) [ CD ]
Line_6 $$ String match = matcher.group()-->Line_21 $$ if (throwable != null && PLACEHOLDER_EXCEPTION.equals(match)) [ FD ]
Line_3 $$ Matcher matcher = PATTERN.matcher(message)-->Line_29 $$ matcher.appendTail(output)[ FD ]
Line_6 $$ String match = matcher.group()-->Line_17 $$ if (PLACEHOLDER_ARGUMENT_TYPES.equals(match)) [ FD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_24 $$ matcher.appendReplacement(output, Long.toString(invocationTime))[ FD ]
Line_6 $$ String match = matcher.group()-->Line_15 $$ if (PLACEHOLDER_ARGUMENTS.equals(match)) [ FD ]
Line_4 $$ StringBuffer output = new StringBuffer()-->Line_29 $$ matcher.appendTail(output)[ FD ]
Line_9 $$ if (PLACEHOLDER_TARGET_CLASS_NAME.equals(match)) -->Line_12 $$ if (PLACEHOLDER_TARGET_CLASS_SHORT_NAME.equals(match)) [ CD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_30 $$ return output.toString()[ CD ]
Line_9 $$ if (PLACEHOLDER_TARGET_CLASS_NAME.equals(match)) -->Line_11 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(className))[ CD ]
Line_13 $$ String shortName = ClassUtils.getShortName(getClassForLogging(methodInvocation.getThis()))-->Line_14 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(shortName))[ FD ]
Line_21 $$ if (throwable != null && PLACEHOLDER_EXCEPTION.equals(match)) -->Line_22 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(throwable.toString()))[ CD ]
Line_3 $$ Matcher matcher = PATTERN.matcher(message)-->Line_6 $$ String match = matcher.group()[ FD ]
Line_3 $$ Matcher matcher = PATTERN.matcher(message)-->Line_20 $$ appendReturnValue(methodInvocation, matcher, output, returnValue)[ FD ]
Line_19 $$ if (PLACEHOLDER_RETURN_VALUE.equals(match)) -->Line_21 $$ if (throwable != null && PLACEHOLDER_EXCEPTION.equals(match)) [ CD ]
Line_4 $$ StringBuffer output = new StringBuffer()-->Line_8 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(methodInvocation.getMethod().getName()))[ FD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_5 $$ while (matcher.find()) [ CD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_18 $$ appendArgumentTypes(methodInvocation, matcher, output)[ FD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_10 $$ String className = getClassForLogging(methodInvocation.getThis()).getName()[ FD ]
Line_23 $$ if (PLACEHOLDER_INVOCATION_TIME.equals(match)) -->Line_24 $$ matcher.appendReplacement(output, Long.toString(invocationTime))[ CD ]
Line_7 $$ if (PLACEHOLDER_METHOD_NAME.equals(match)) -->Line_8 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(methodInvocation.getMethod().getName()))[ CD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_8 $$ matcher.appendReplacement(output, Matcher.quoteReplacement(methodInvocation.getMethod().getName()))[ FD ]
Line_6 $$ String match = matcher.group()-->Line_12 $$ if (PLACEHOLDER_TARGET_CLASS_SHORT_NAME.equals(match)) [ FD ]
Line_2 $$ protected String replacePlaceholders(String message, MethodInvocation methodInvocation, Object returnValue, Throwable throwable, long invocationTime) -->Line_20 $$ appendReturnValue(methodInvocation, matcher, output, returnValue)[ FD ]
