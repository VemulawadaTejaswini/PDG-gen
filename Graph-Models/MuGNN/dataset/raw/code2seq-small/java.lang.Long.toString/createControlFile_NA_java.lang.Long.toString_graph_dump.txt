Line_2 $$ public static void createControlFile(FileSystem fs, long megaBytes, int numFiles, long seed) throws Exception -->Line_8 $$ long totalSize = 0[ CD ]
Line_13 $$ long size = random.nextLong()-->Line_16 $$ size = size % maxSize[ FD ]
Line_13 $$ long size = random.nextLong()-->Line_14 $$ if (size < 0)[ FD ]
Line_2 $$ public static void createControlFile(FileSystem fs, long megaBytes, int numFiles, long seed) throws Exception -->Line_6 $$ Random random = new Random(seed)[ CD ]
Line_4 $$ Path controlFile = new Path(CONTROL_DIR, "files")-->Line_5 $$ fs.delete(controlFile, true)[ FD ]
Line_11 $$ while (totalSize < megaBytes) -->Line_12 $$ Text name = new Text(Long.toString(random.nextLong()))[ CD ]
Line_13 $$ long size = random.nextLong()-->Line_15 $$ size = -size[ FD ]
Line_2 $$ public static void createControlFile(FileSystem fs, long megaBytes, int numFiles, long seed) throws Exception -->Line_5 $$ fs.delete(controlFile, true)[ CD ]
Line_11 $$ while (totalSize < megaBytes) -->Line_17 $$ writer.append(name, new LongWritable(size))[ CD ]
Line_11 $$ while (totalSize < megaBytes) -->Line_13 $$ long size = random.nextLong()[ CD ]
Line_15 $$ size = -size-->Line_14 $$ if (size < 0)[ FD ]
Line_11 $$ while (totalSize < megaBytes) -->Line_16 $$ size = size % maxSize[ CD ]
Line_8 $$ long totalSize = 0-->Line_18 $$ totalSize += size[ FD ]
Line_2 $$ public static void createControlFile(FileSystem fs, long megaBytes, int numFiles, long seed) throws Exception -->Line_9 $$ long maxSize = ((megaBytes / numFiles) * 2) + 1[ CD ]
Line_14 $$ if (size < 0)-->Line_15 $$ size = -size[ CD ]
Line_2 $$ public static void createControlFile(FileSystem fs, long megaBytes, int numFiles, long seed) throws Exception -->Line_5 $$ fs.delete(controlFile, true)[ FD ]
Line_8 $$ long totalSize = 0-->Line_11 $$ while (totalSize < megaBytes) [ FD ]
Line_4 $$ Path controlFile = new Path(CONTROL_DIR, "files")-->Line_7 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, controlFile, Text.class, LongWritable.class, CompressionType.NONE)[ FD ]
Line_16 $$ size = size % maxSize-->Line_14 $$ if (size < 0)[ FD ]
Line_2 $$ public static void createControlFile(FileSystem fs, long megaBytes, int numFiles, long seed) throws Exception -->Line_3 $$ LOG.info("creating control file: " + megaBytes + " bytes, " + numFiles + " files")[ CD ]
Line_2 $$ public static void createControlFile(FileSystem fs, long megaBytes, int numFiles, long seed) throws Exception -->Line_11 $$ while (totalSize < megaBytes) [ FD ]
Line_6 $$ Random random = new Random(seed)-->Line_12 $$ Text name = new Text(Long.toString(random.nextLong()))[ FD ]
Line_2 $$ public static void createControlFile(FileSystem fs, long megaBytes, int numFiles, long seed) throws Exception -->Line_7 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, controlFile, Text.class, LongWritable.class, CompressionType.NONE)[ CD ]
Line_15 $$ size = -size-->Line_18 $$ totalSize += size[ FD ]
Line_15 $$ size = -size-->Line_16 $$ size = size % maxSize[ FD ]
Line_13 $$ long size = random.nextLong()-->Line_18 $$ totalSize += size[ FD ]
Line_11 $$ while (totalSize < megaBytes) -->Line_14 $$ if (size < 0)[ CD ]
Line_12 $$ Text name = new Text(Long.toString(random.nextLong()))-->Line_17 $$ writer.append(name, new LongWritable(size))[ FD ]
Line_16 $$ size = size % maxSize-->Line_15 $$ size = -size[ FD ]
Line_18 $$ totalSize += size-->Line_11 $$ while (totalSize < megaBytes) [ FD ]
Line_11 $$ while (totalSize < megaBytes) -->Line_18 $$ totalSize += size[ CD ]
Line_16 $$ size = size % maxSize-->Line_18 $$ totalSize += size[ FD ]
Line_7 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, controlFile, Text.class, LongWritable.class, CompressionType.NONE)-->Line_21 $$ writer.close()[ FD ]
Line_6 $$ Random random = new Random(seed)-->Line_13 $$ long size = random.nextLong()[ FD ]
Line_2 $$ public static void createControlFile(FileSystem fs, long megaBytes, int numFiles, long seed) throws Exception -->Line_4 $$ Path controlFile = new Path(CONTROL_DIR, "files")[ CD ]
Line_9 $$ long maxSize = ((megaBytes / numFiles) * 2) + 1-->Line_16 $$ size = size % maxSize[ FD ]
Line_2 $$ public static void createControlFile(FileSystem fs, long megaBytes, int numFiles, long seed) throws Exception -->Line_23 $$ LOG.info("created control file for: " + totalSize + " bytes")[ CD ]
Line_7 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, controlFile, Text.class, LongWritable.class, CompressionType.NONE)-->Line_17 $$ writer.append(name, new LongWritable(size))[ FD ]
Line_2 $$ public static void createControlFile(FileSystem fs, long megaBytes, int numFiles, long seed) throws Exception -->Line_7 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, controlFile, Text.class, LongWritable.class, CompressionType.NONE)[ FD ]
