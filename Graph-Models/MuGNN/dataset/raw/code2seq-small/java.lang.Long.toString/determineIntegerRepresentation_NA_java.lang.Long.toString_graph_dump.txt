Line_4 $$ if (type == NUM_BIG_INTEGER) -->Line_6 $$ if (literalValue.endsWith("bi") || literalValue.endsWith("BI")) [ CD ]
Line_5 $$ String literalValue = text-->Line_19 $$ if (literalValue.endsWith("l") || literalValue.endsWith("L")) [ FD ]
Line_5 $$ String literalValue = text-->Line_7 $$ literalValue = literalValue.substring(0, literalValue.length() - 2)[ FD ]
Line_2 $$ private String determineIntegerRepresentation(String text, int type) -->Line_11 $$ if (type == NUM_INT) [ FD ]
Line_5 $$ String literalValue = text-->Line_22 $$ return Long.valueOf(literalValue).toString()[ FD ]
Line_5 $$ String literalValue = text-->Line_6 $$ if (literalValue.endsWith("bi") || literalValue.endsWith("BI")) [ FD ]
Line_2 $$ private String determineIntegerRepresentation(String text, int type) -->Line_4 $$ if (type == NUM_BIG_INTEGER) [ FD ]
Line_4 $$ if (type == NUM_BIG_INTEGER) -->Line_9 $$ return new BigInteger(literalValue).toString()[ CD ]
Line_19 $$ if (literalValue.endsWith("l") || literalValue.endsWith("L")) -->Line_20 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)[ CD ]
Line_4 $$ if (type == NUM_BIG_INTEGER) -->Line_5 $$ String literalValue = text[ CD ]
Line_2 $$ private String determineIntegerRepresentation(String text, int type) -->Line_13 $$ return Integer.valueOf(text).toString()[ FD ]
Line_7 $$ literalValue = literalValue.substring(0, literalValue.length() - 2)-->Line_20 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)[ FD ]
Line_2 $$ private String determineIntegerRepresentation(String text, int type) -->Line_15 $$ LOG.tracev("Could not format incoming text [[ FD ]
Line_20 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)-->Line_22 $$ return Long.valueOf(literalValue).toString()[ FD ]
Line_7 $$ literalValue = literalValue.substring(0, literalValue.length() - 2)-->Line_19 $$ if (literalValue.endsWith("l") || literalValue.endsWith("L")) [ FD ]
Line_6 $$ if (literalValue.endsWith("bi") || literalValue.endsWith("BI")) -->Line_7 $$ literalValue = literalValue.substring(0, literalValue.length() - 2)[ CD ]
Line_7 $$ literalValue = literalValue.substring(0, literalValue.length() - 2)-->Line_22 $$ return Long.valueOf(literalValue).toString()[ FD ]
Line_5 $$ String literalValue = text-->Line_20 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)[ FD ]
