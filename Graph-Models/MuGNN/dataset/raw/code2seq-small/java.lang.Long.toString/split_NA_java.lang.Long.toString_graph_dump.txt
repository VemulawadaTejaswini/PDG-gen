Line_26 $$ start = end-->Line_22 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + Long.toString(start), colName + " <= " + Long.toString(end)))[ FD ]
Line_11 $$ if (results.getString(1) == null && results.getString(2) == null) -->Line_13 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(colName + " IS NULL", colName + " IS NULL"))[ CD ]
Line_19 $$ for (int i = 1; i < splitPoints.size(); i++) -->Line_26 $$ start = end[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_3 $$ long minVal = results.getLong(1)[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_11 $$ if (results.getString(1) == null && results.getString(2) == null) [ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_28 $$ if (results.getString(1) == null || results.getString(2) == null) [ CD ]
Line_21 $$ if (i == splitPoints.size() - 1) -->Line_22 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + Long.toString(start), colName + " <= " + Long.toString(end)))[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_3 $$ long minVal = results.getLong(1)[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_11 $$ if (results.getString(1) == null && results.getString(2) == null) [ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_6 $$ String highClausePrefix = colName + " < "[ CD ]
Line_8 $$ if (numSplits < 1) -->Line_9 $$ numSplits = 1[ CD ]
Line_20 $$ long end = splitPoints.get(i)-->Line_22 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + Long.toString(start), colName + " <= " + Long.toString(end)))[ FD ]
Line_18 $$ long start = splitPoints.get(0)-->Line_26 $$ start = end[ FD ]
Line_12 $$ List<InputSplit> splits = new ArrayList<InputSplit>()-->Line_13 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(colName + " IS NULL", colName + " IS NULL"))[ FD ]
Line_7 $$ int numSplits = conf.getInt(MRJobConfig.NUM_MAPS, 1)-->Line_8 $$ if (numSplits < 1) [ FD ]
Line_4 $$ long maxVal = results.getLong(2)-->Line_16 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)[ FD ]
Line_20 $$ long end = splitPoints.get(i)-->Line_26 $$ start = end[ FD ]
Line_26 $$ start = end-->Line_24 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + Long.toString(start), highClausePrefix + Long.toString(end)))[ FD ]
Line_16 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)-->Line_20 $$ long end = splitPoints.get(i)[ FD ]
Line_16 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)-->Line_18 $$ long start = splitPoints.get(0)[ FD ]
Line_19 $$ for (int i = 1; i < splitPoints.size(); i++) -->Line_21 $$ if (i == splitPoints.size() - 1) [ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_8 $$ if (numSplits < 1) [ CD ]
Line_7 $$ int numSplits = conf.getInt(MRJobConfig.NUM_MAPS, 1)-->Line_9 $$ numSplits = 1[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_18 $$ long start = splitPoints.get(0)[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_19 $$ for (int i = 1; i < splitPoints.size(); i++) [ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_7 $$ int numSplits = conf.getInt(MRJobConfig.NUM_MAPS, 1)[ FD ]
Line_11 $$ if (results.getString(1) == null && results.getString(2) == null) -->Line_12 $$ List<InputSplit> splits = new ArrayList<InputSplit>()[ CD ]
Line_11 $$ if (results.getString(1) == null && results.getString(2) == null) -->Line_14 $$ return splits[ CD ]
Line_19 $$ for (int i = 1; i < splitPoints.size(); i++) -->Line_21 $$ if (i == splitPoints.size() - 1) [ FD ]
Line_16 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)-->Line_21 $$ if (i == splitPoints.size() - 1) [ FD ]
Line_21 $$ if (i == splitPoints.size() - 1) -->Line_24 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + Long.toString(start), highClausePrefix + Long.toString(end)))[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_28 $$ if (results.getString(1) == null || results.getString(2) == null) [ FD ]
Line_19 $$ for (int i = 1; i < splitPoints.size(); i++) -->Line_20 $$ long end = splitPoints.get(i)[ CD ]
Line_12 $$ List<InputSplit> splits = new ArrayList<InputSplit>()-->Line_24 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + Long.toString(start), highClausePrefix + Long.toString(end)))[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_4 $$ long maxVal = results.getLong(2)[ FD ]
Line_20 $$ long end = splitPoints.get(i)-->Line_24 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + Long.toString(start), highClausePrefix + Long.toString(end)))[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_4 $$ long maxVal = results.getLong(2)[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_31 $$ return splits[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_7 $$ int numSplits = conf.getInt(MRJobConfig.NUM_MAPS, 1)[ CD ]
Line_28 $$ if (results.getString(1) == null || results.getString(2) == null) -->Line_29 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(colName + " IS NULL", colName + " IS NULL"))[ CD ]
Line_9 $$ numSplits = 1-->Line_16 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)[ FD ]
Line_3 $$ long minVal = results.getLong(1)-->Line_16 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)[ FD ]
Line_12 $$ List<InputSplit> splits = new ArrayList<InputSplit>()-->Line_22 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + Long.toString(start), colName + " <= " + Long.toString(end)))[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_16 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)[ CD ]
Line_19 $$ for (int i = 1; i < splitPoints.size(); i++) -->Line_20 $$ long end = splitPoints.get(i)[ FD ]
Line_16 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)-->Line_19 $$ for (int i = 1; i < splitPoints.size(); i++) [ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_5 $$ String lowClausePrefix = colName + " >= "[ CD ]
Line_12 $$ List<InputSplit> splits = new ArrayList<InputSplit>()-->Line_29 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(colName + " IS NULL", colName + " IS NULL"))[ FD ]
Line_18 $$ long start = splitPoints.get(0)-->Line_22 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + Long.toString(start), colName + " <= " + Long.toString(end)))[ FD ]
Line_18 $$ long start = splitPoints.get(0)-->Line_24 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + Long.toString(start), highClausePrefix + Long.toString(end)))[ FD ]
Line_7 $$ int numSplits = conf.getInt(MRJobConfig.NUM_MAPS, 1)-->Line_16 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)[ FD ]
