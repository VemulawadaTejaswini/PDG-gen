Line_2 $$ public void testNoopFielddataBreaker() throws Exception -->Line_6 $$ List<IndexRequestBuilder> reqs = new ArrayList()[ CD ]
Line_2 $$ public void testNoopFielddataBreaker() throws Exception -->Line_5 $$ int docCount = scaledRandomIntBetween(300, 1000)[ CD ]
Line_2 $$ public void testNoopFielddataBreaker() throws Exception -->Line_7 $$ for (long id = 0; id < docCount; id++) [ CD ]
Line_7 $$ for (long id = 0; id < docCount; id++) -->Line_8 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", id))[ FD ]
Line_6 $$ List<IndexRequestBuilder> reqs = new ArrayList()-->Line_8 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", id))[ FD ]
Line_2 $$ public void testNoopFielddataBreaker() throws Exception -->Line_3 $$ assertAcked(prepareCreate("cb-test", 1, settingsBuilder().put(SETTING_NUMBER_OF_REPLICAS, between(0, 1))))[ CD ]
Line_4 $$ Client client = client()-->Line_8 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", id))[ FD ]
Line_4 $$ Client client = client()-->Line_11 $$ client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC).get()[ FD ]
Line_2 $$ public void testNoopFielddataBreaker() throws Exception -->Line_11 $$ client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC).get()[ CD ]
Line_2 $$ public void testNoopFielddataBreaker() throws Exception -->Line_10 $$ indexRandom(true, reqs)[ CD ]
Line_7 $$ for (long id = 0; id < docCount; id++) -->Line_8 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", id))[ CD ]
Line_5 $$ int docCount = scaledRandomIntBetween(300, 1000)-->Line_7 $$ for (long id = 0; id < docCount; id++) [ FD ]
Line_6 $$ List<IndexRequestBuilder> reqs = new ArrayList()-->Line_10 $$ indexRandom(true, reqs)[ FD ]
Line_2 $$ public void testNoopFielddataBreaker() throws Exception -->Line_4 $$ Client client = client()[ CD ]
