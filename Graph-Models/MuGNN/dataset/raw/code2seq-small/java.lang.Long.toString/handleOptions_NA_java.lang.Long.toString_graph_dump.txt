Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_33 $$ Integer duration = null[ CD ]
Line_200 $$ Range<Long> blockSize = null-->Line_215 $$ if ((blockSize.getLower() % bytesPerChecksum) != 0) [ FD ]
Line_214 $$ if (bytesPerChecksum != null) -->Line_218 $$ if ((blockSize.getUpper() % bytesPerChecksum) != 0) [ CD ]
Line_148 $$ Range<Short> replicationAm = null-->Line_156 $$ if (replicationAm.getLower() < minRepl) [ FD ]
Line_69 $$ Integer fileAm = null-->Line_76 $$ if (fileAm <= 0) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_99 $$ if (directoryLimit != null) [ CD ]
Line_202 $$ blockSize = extractor.getBlockSize(opts.getValue(ConfigOption.BLOCK_SIZE.getOpt()))-->Line_206 $$ if (blockSize != null) [ FD ]
Line_243 $$ Range<Long> writeSize = null-->Line_253 $$ if (writeSize.getLower() < 0) [ FD ]
Line_232 $$ if (readSize != null) -->Line_233 $$ if (readSize.getLower() > readSize.getUpper()) [ CD ]
Line_11 $$ if (mapAmount != null) -->Line_15 $$ base.set(ConfigOption.MAPS.getCfgOption(), mapAmount.toString())[ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_137 $$ base.set(ConfigOption.RESULT_FILE.getCfgOption(), fn)[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_190 $$ if (pSize != null) [ CD ]
Line_188 $$ pSize = ConfigOption.PACKET_SIZE.getDefault()-->Line_192 $$ Long packetSize = StringUtils.TraditionalBinaryPrefix.string2long(pSize)[ FD ]
Line_119 $$ String fn = null-->Line_121 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))[ FD ]
Line_226 $$ Range<Long> readSize = null-->Line_228 $$ readSize = extractor.getReadSize(opts.getValue(ConfigOption.READ_SIZE.getOpt()))[ FD ]
Line_35 $$ duration = extractor.getDuration(opts.getValue(ConfigOption.DURATION.getOpt()))-->Line_40 $$ if (duration <= 0) [ FD ]
Line_113 $$ if (basedir != null) -->Line_115 $$ base.set(ConfigOption.BASE_DIR.getCfgOption(), basedir.toString())[ CD ]
Line_283 $$ if (seed != null) -->Line_284 $$ base.set(ConfigOption.RANDOM_SEED.getCfgOption(), seed.toString())[ CD ]
Line_142 $$ base = handleOperations(opts, base, extractor)-->Line_273 $$ base.set(ConfigOption.APPEND_SIZE.getCfgOption(), appendSize.toString())[ FD ]
Line_142 $$ base = handleOperations(opts, base, extractor)-->Line_182 $$ base.set(ConfigOption.SLEEP_TIME.getCfgOption(), sleepRange.toString())[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_202 $$ blockSize = extractor.getBlockSize(opts.getValue(ConfigOption.BLOCK_SIZE.getOpt()))[ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_228 $$ readSize = extractor.getReadSize(opts.getValue(ConfigOption.READ_SIZE.getOpt()))[ FD ]
Line_125 $$ if (fn != null) -->Line_126 $$ base.set(ConfigOption.RESULT_FILE.getCfgOption(), fn)[ CD ]
Line_148 $$ Range<Short> replicationAm = null-->Line_162 $$ if (replicationAm.getLower() <= 0) [ FD ]
Line_226 $$ Range<Long> readSize = null-->Line_239 $$ base.set(ConfigOption.READ_SIZE.getCfgOption(), readSize.toString())[ FD ]
Line_114 $$ basedir = new Path(basedir, Constants.BASE_DIR)-->Line_115 $$ base.set(ConfigOption.BASE_DIR.getCfgOption(), basedir.toString())[ FD ]
Line_119 $$ String fn = null-->Line_136 $$ if (fn != null) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_175 $$ if (sleepRange != null) [ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_187 $$ if (pSize == null) [ CD ]
Line_262 $$ appendSize = extractor.getAppendSize(opts.getValue(ConfigOption.APPEND_SIZE.getOpt()))-->Line_267 $$ if (appendSize.getLower() > appendSize.getUpper()) [ FD ]
Line_186 $$ String pSize = opts.getValue(ConfigOption.PACKET_SIZE.getOpt())-->Line_187 $$ if (pSize == null) [ FD ]
Line_71 $$ fileAm = extractor.getTotalFiles(opts.getValue(ConfigOption.FILES.getOpt()))-->Line_79 $$ base.set(ConfigOption.FILES.getCfgOption(), fileAm.toString())[ FD ]
Line_35 $$ duration = extractor.getDuration(opts.getValue(ConfigOption.DURATION.getOpt()))-->Line_39 $$ if (duration != null) [ FD ]
Line_206 $$ if (blockSize != null) -->Line_214 $$ if (bytesPerChecksum != null) [ CD ]
Line_262 $$ appendSize = extractor.getAppendSize(opts.getValue(ConfigOption.APPEND_SIZE.getOpt()))-->Line_266 $$ if (appendSize != null) [ FD ]
Line_69 $$ Integer fileAm = null-->Line_71 $$ fileAm = extractor.getTotalFiles(opts.getValue(ConfigOption.FILES.getOpt()))[ FD ]
Line_21 $$ reduceAmount = extractor.getMapAmount(opts.getValue(ConfigOption.REDUCES.getOpt()))-->Line_25 $$ if (reduceAmount != null) [ FD ]
Line_7 $$ mapAmount = extractor.getMapAmount(opts.getValue(ConfigOption.MAPS.getOpt()))-->Line_15 $$ base.set(ConfigOption.MAPS.getCfgOption(), mapAmount.toString())[ FD ]
Line_33 $$ Integer duration = null-->Line_43 $$ base.set(ConfigOption.DURATION.getCfgOption(), duration.toString())[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_53 $$ if (operationAmount != null) [ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_148 $$ Range<Short> replicationAm = null[ CD ]
Line_186 $$ String pSize = opts.getValue(ConfigOption.PACKET_SIZE.getOpt())-->Line_190 $$ if (pSize != null) [ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_202 $$ blockSize = extractor.getBlockSize(opts.getValue(ConfigOption.BLOCK_SIZE.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_75 $$ if (fileAm != null) [ CD ]
Line_200 $$ Range<Long> blockSize = null-->Line_222 $$ base.set(ConfigOption.BLOCK_SIZE.getCfgOption(), blockSize.toString())[ FD ]
Line_142 $$ base = handleOperations(opts, base, extractor)-->Line_155 $$ int minRepl = base.getInt(Constants.MIN_REPLICATION, 1)[ FD ]
Line_95 $$ directoryLimit = extractor.getDirSize(opts.getValue(ConfigOption.DIR_SIZE.getOpt()))-->Line_100 $$ if (directoryLimit <= 0) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_7 $$ mapAmount = extractor.getMapAmount(opts.getValue(ConfigOption.MAPS.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_25 $$ if (reduceAmount != null) [ CD ]
Line_154 $$ if (replicationAm != null) -->Line_156 $$ if (replicationAm.getLower() < minRepl) [ CD ]
Line_75 $$ if (fileAm != null) -->Line_79 $$ base.set(ConfigOption.FILES.getCfgOption(), fileAm.toString())[ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_35 $$ duration = extractor.getDuration(opts.getValue(ConfigOption.DURATION.getOpt()))[ FD ]
Line_84 $$ String qname = extractor.getQueueName(opts.getValue(ConfigOption.QUEUE_NAME.getOpt()))-->Line_85 $$ if (qname != null) [ FD ]
Line_200 $$ Range<Long> blockSize = null-->Line_206 $$ if (blockSize != null) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_119 $$ String fn = null[ CD ]
Line_109 $$ basedir = extractor.getBaseDirectory(opts.getValue(ConfigOption.BASE_DIR.getOpt()))-->Line_115 $$ base.set(ConfigOption.BASE_DIR.getCfgOption(), basedir.toString())[ FD ]
Line_35 $$ duration = extractor.getDuration(opts.getValue(ConfigOption.DURATION.getOpt()))-->Line_43 $$ base.set(ConfigOption.DURATION.getCfgOption(), duration.toString())[ FD ]
Line_226 $$ Range<Long> readSize = null-->Line_233 $$ if (readSize.getLower() > readSize.getUpper()) [ FD ]
Line_262 $$ appendSize = extractor.getAppendSize(opts.getValue(ConfigOption.APPEND_SIZE.getOpt()))-->Line_273 $$ base.set(ConfigOption.APPEND_SIZE.getCfgOption(), appendSize.toString())[ FD ]
Line_95 $$ directoryLimit = extractor.getDirSize(opts.getValue(ConfigOption.DIR_SIZE.getOpt()))-->Line_103 $$ base.set(ConfigOption.DIR_SIZE.getCfgOption(), directoryLimit.toString())[ FD ]
Line_202 $$ blockSize = extractor.getBlockSize(opts.getValue(ConfigOption.BLOCK_SIZE.getOpt()))-->Line_210 $$ if (blockSize.getLower() <= 0) [ FD ]
Line_228 $$ readSize = extractor.getReadSize(opts.getValue(ConfigOption.READ_SIZE.getOpt()))-->Line_236 $$ if (readSize.getLower() < 0) [ FD ]
Line_279 $$ seed = extractor.getRandomSeed(opts.getValue(ConfigOption.RANDOM_SEED.getOpt()))-->Line_284 $$ base.set(ConfigOption.RANDOM_SEED.getCfgOption(), seed.toString())[ FD ]
Line_132 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))-->Line_136 $$ if (fn != null) [ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_171 $$ sleepRange = extractor.getSleepRange(opts.getValue(ConfigOption.SLEEP_TIME.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_126 $$ base.set(ConfigOption.RESULT_FILE.getCfgOption(), fn)[ FD ]
Line_245 $$ writeSize = extractor.getWriteSize(opts.getValue(ConfigOption.WRITE_SIZE.getOpt()))-->Line_250 $$ if (writeSize.getLower() > writeSize.getUpper()) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_169 $$ Range<Long> sleepRange = null[ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_39 $$ if (duration != null) [ CD ]
Line_7 $$ mapAmount = extractor.getMapAmount(opts.getValue(ConfigOption.MAPS.getOpt()))-->Line_12 $$ if (mapAmount <= 0) [ FD ]
Line_99 $$ if (directoryLimit != null) -->Line_100 $$ if (directoryLimit <= 0) [ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_63 $$ base.setBoolean(ConfigOption.EXIT_ON_ERROR.getCfgOption(), exitOnError)[ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_121 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))[ FD ]
Line_155 $$ int minRepl = base.getInt(Constants.MIN_REPLICATION, 1)-->Line_156 $$ if (replicationAm.getLower() < minRepl) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_186 $$ String pSize = opts.getValue(ConfigOption.PACKET_SIZE.getOpt())[ CD ]
Line_186 $$ String pSize = opts.getValue(ConfigOption.PACKET_SIZE.getOpt())-->Line_188 $$ pSize = ConfigOption.PACKET_SIZE.getDefault()[ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_213 $$ Long bytesPerChecksum = extractor.getByteCheckSum()[ FD ]
Line_142 $$ base = handleOperations(opts, base, extractor)-->Line_284 $$ base.set(ConfigOption.RANDOM_SEED.getCfgOption(), seed.toString())[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_43 $$ base.set(ConfigOption.DURATION.getCfgOption(), duration.toString())[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_69 $$ Integer fileAm = null[ CD ]
Line_47 $$ Integer operationAmount = null-->Line_54 $$ if (operationAmount <= 0) [ FD ]
Line_169 $$ Range<Long> sleepRange = null-->Line_171 $$ sleepRange = extractor.getSleepRange(opts.getValue(ConfigOption.SLEEP_TIME.getOpt()))[ FD ]
Line_243 $$ Range<Long> writeSize = null-->Line_250 $$ if (writeSize.getLower() > writeSize.getUpper()) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_84 $$ String qname = extractor.getQueueName(opts.getValue(ConfigOption.QUEUE_NAME.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_279 $$ seed = extractor.getRandomSeed(opts.getValue(ConfigOption.RANDOM_SEED.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_262 $$ appendSize = extractor.getAppendSize(opts.getValue(ConfigOption.APPEND_SIZE.getOpt()))[ FD ]
Line_19 $$ Integer reduceAmount = null-->Line_25 $$ if (reduceAmount != null) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_19 $$ Integer reduceAmount = null[ CD ]
Line_142 $$ base = handleOperations(opts, base, extractor)-->Line_222 $$ base.set(ConfigOption.BLOCK_SIZE.getCfgOption(), blockSize.toString())[ FD ]
Line_21 $$ reduceAmount = extractor.getMapAmount(opts.getValue(ConfigOption.REDUCES.getOpt()))-->Line_29 $$ base.set(ConfigOption.REDUCES.getCfgOption(), reduceAmount.toString())[ FD ]
Line_25 $$ if (reduceAmount != null) -->Line_26 $$ if (reduceAmount <= 0) [ CD ]
Line_228 $$ readSize = extractor.getReadSize(opts.getValue(ConfigOption.READ_SIZE.getOpt()))-->Line_232 $$ if (readSize != null) [ FD ]
Line_142 $$ base = handleOperations(opts, base, extractor)-->Line_256 $$ base.set(ConfigOption.WRITE_SIZE.getCfgOption(), writeSize.toString())[ FD ]
Line_150 $$ replicationAm = extractor.getReplication(opts.getValue(ConfigOption.REPLICATION_AM.getOpt()))-->Line_162 $$ if (replicationAm.getLower() <= 0) [ FD ]
Line_232 $$ if (readSize != null) -->Line_239 $$ base.set(ConfigOption.READ_SIZE.getCfgOption(), readSize.toString())[ CD ]
Line_206 $$ if (blockSize != null) -->Line_213 $$ Long bytesPerChecksum = extractor.getByteCheckSum()[ CD ]
Line_202 $$ blockSize = extractor.getBlockSize(opts.getValue(ConfigOption.BLOCK_SIZE.getOpt()))-->Line_222 $$ base.set(ConfigOption.BLOCK_SIZE.getCfgOption(), blockSize.toString())[ FD ]
Line_249 $$ if (writeSize != null) -->Line_253 $$ if (writeSize.getLower() < 0) [ CD ]
Line_109 $$ basedir = extractor.getBaseDirectory(opts.getValue(ConfigOption.BASE_DIR.getOpt()))-->Line_113 $$ if (basedir != null) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_150 $$ replicationAm = extractor.getReplication(opts.getValue(ConfigOption.REPLICATION_AM.getOpt()))[ FD ]
Line_175 $$ if (sleepRange != null) -->Line_176 $$ if (sleepRange.getLower() > sleepRange.getUpper()) [ CD ]
Line_93 $$ Integer directoryLimit = null-->Line_95 $$ directoryLimit = extractor.getDirSize(opts.getValue(ConfigOption.DIR_SIZE.getOpt()))[ FD ]
Line_213 $$ Long bytesPerChecksum = extractor.getByteCheckSum()-->Line_214 $$ if (bytesPerChecksum != null) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_256 $$ base.set(ConfigOption.WRITE_SIZE.getCfgOption(), writeSize.toString())[ FD ]
Line_200 $$ Range<Long> blockSize = null-->Line_207 $$ if (blockSize.getLower() > blockSize.getUpper()) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_284 $$ base.set(ConfigOption.RANDOM_SEED.getCfgOption(), seed.toString())[ FD ]
Line_228 $$ readSize = extractor.getReadSize(opts.getValue(ConfigOption.READ_SIZE.getOpt()))-->Line_239 $$ base.set(ConfigOption.READ_SIZE.getCfgOption(), readSize.toString())[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_49 $$ operationAmount = extractor.getOpCount(opts.getValue(ConfigOption.OPS.getOpt()))[ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_109 $$ basedir = extractor.getBaseDirectory(opts.getValue(ConfigOption.BASE_DIR.getOpt()))[ FD ]
Line_71 $$ fileAm = extractor.getTotalFiles(opts.getValue(ConfigOption.FILES.getOpt()))-->Line_75 $$ if (fileAm != null) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_29 $$ base.set(ConfigOption.REDUCES.getCfgOption(), reduceAmount.toString())[ FD ]
Line_266 $$ if (appendSize != null) -->Line_267 $$ if (appendSize.getLower() > appendSize.getUpper()) [ CD ]
Line_53 $$ if (operationAmount != null) -->Line_54 $$ if (operationAmount <= 0) [ CD ]
Line_93 $$ Integer directoryLimit = null-->Line_103 $$ base.set(ConfigOption.DIR_SIZE.getCfgOption(), directoryLimit.toString())[ FD ]
Line_186 $$ String pSize = opts.getValue(ConfigOption.PACKET_SIZE.getOpt())-->Line_192 $$ Long packetSize = StringUtils.TraditionalBinaryPrefix.string2long(pSize)[ FD ]
Line_277 $$ Long seed = null-->Line_283 $$ if (seed != null) [ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_7 $$ mapAmount = extractor.getMapAmount(opts.getValue(ConfigOption.MAPS.getOpt()))[ FD ]
Line_107 $$ Path basedir = null-->Line_115 $$ base.set(ConfigOption.BASE_DIR.getCfgOption(), basedir.toString())[ FD ]
Line_49 $$ operationAmount = extractor.getOpCount(opts.getValue(ConfigOption.OPS.getOpt()))-->Line_53 $$ if (operationAmount != null) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_142 $$ base = handleOperations(opts, base, extractor)[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_136 $$ if (fn != null) [ CD ]
Line_25 $$ if (reduceAmount != null) -->Line_29 $$ base.set(ConfigOption.REDUCES.getCfgOption(), reduceAmount.toString())[ CD ]
Line_169 $$ Range<Long> sleepRange = null-->Line_179 $$ if (sleepRange.getLower() <= 0) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_125 $$ if (fn != null) [ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_171 $$ sleepRange = extractor.getSleepRange(opts.getValue(ConfigOption.SLEEP_TIME.getOpt()))[ FD ]
Line_107 $$ Path basedir = null-->Line_109 $$ basedir = extractor.getBaseDirectory(opts.getValue(ConfigOption.BASE_DIR.getOpt()))[ FD ]
Line_245 $$ writeSize = extractor.getWriteSize(opts.getValue(ConfigOption.WRITE_SIZE.getOpt()))-->Line_249 $$ if (writeSize != null) [ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_71 $$ fileAm = extractor.getTotalFiles(opts.getValue(ConfigOption.FILES.getOpt()))[ FD ]
Line_200 $$ Range<Long> blockSize = null-->Line_202 $$ blockSize = extractor.getBlockSize(opts.getValue(ConfigOption.BLOCK_SIZE.getOpt()))[ FD ]
Line_200 $$ Range<Long> blockSize = null-->Line_218 $$ if ((blockSize.getUpper() % bytesPerChecksum) != 0) [ FD ]
Line_85 $$ if (qname != null) -->Line_86 $$ base.set(ConfigOption.QUEUE_NAME.getCfgOption(), qname)[ CD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_21 $$ reduceAmount = extractor.getMapAmount(opts.getValue(ConfigOption.REDUCES.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_86 $$ base.set(ConfigOption.QUEUE_NAME.getCfgOption(), qname)[ FD ]
Line_69 $$ Integer fileAm = null-->Line_79 $$ base.set(ConfigOption.FILES.getCfgOption(), fileAm.toString())[ FD ]
Line_99 $$ if (directoryLimit != null) -->Line_103 $$ base.set(ConfigOption.DIR_SIZE.getCfgOption(), directoryLimit.toString())[ CD ]
Line_121 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))-->Line_132 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))[ FD ]
Line_84 $$ String qname = extractor.getQueueName(opts.getValue(ConfigOption.QUEUE_NAME.getOpt()))-->Line_86 $$ base.set(ConfigOption.QUEUE_NAME.getCfgOption(), qname)[ FD ]
Line_169 $$ Range<Long> sleepRange = null-->Line_182 $$ base.set(ConfigOption.SLEEP_TIME.getCfgOption(), sleepRange.toString())[ FD ]
Line_19 $$ Integer reduceAmount = null-->Line_21 $$ reduceAmount = extractor.getMapAmount(opts.getValue(ConfigOption.REDUCES.getOpt()))[ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_262 $$ appendSize = extractor.getAppendSize(opts.getValue(ConfigOption.APPEND_SIZE.getOpt()))[ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_62 $$ boolean exitOnError = extractor.shouldExitOnFirstError(opts.getValue(ConfigOption.EXIT_ON_ERROR.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_132 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))[ FD ]
Line_21 $$ reduceAmount = extractor.getMapAmount(opts.getValue(ConfigOption.REDUCES.getOpt()))-->Line_26 $$ if (reduceAmount <= 0) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_228 $$ readSize = extractor.getReadSize(opts.getValue(ConfigOption.READ_SIZE.getOpt()))[ FD ]
Line_249 $$ if (writeSize != null) -->Line_256 $$ base.set(ConfigOption.WRITE_SIZE.getCfgOption(), writeSize.toString())[ CD ]
Line_202 $$ blockSize = extractor.getBlockSize(opts.getValue(ConfigOption.BLOCK_SIZE.getOpt()))-->Line_215 $$ if ((blockSize.getLower() % bytesPerChecksum) != 0) [ FD ]
Line_95 $$ directoryLimit = extractor.getDirSize(opts.getValue(ConfigOption.DIR_SIZE.getOpt()))-->Line_99 $$ if (directoryLimit != null) [ FD ]
Line_150 $$ replicationAm = extractor.getReplication(opts.getValue(ConfigOption.REPLICATION_AM.getOpt()))-->Line_165 $$ base.set(ConfigOption.REPLICATION_AM.getCfgOption(), replicationAm.toString())[ FD ]
Line_171 $$ sleepRange = extractor.getSleepRange(opts.getValue(ConfigOption.SLEEP_TIME.getOpt()))-->Line_176 $$ if (sleepRange.getLower() > sleepRange.getUpper()) [ FD ]
Line_119 $$ String fn = null-->Line_126 $$ base.set(ConfigOption.RESULT_FILE.getCfgOption(), fn)[ FD ]
Line_93 $$ Integer directoryLimit = null-->Line_100 $$ if (directoryLimit <= 0) [ FD ]
Line_93 $$ Integer directoryLimit = null-->Line_99 $$ if (directoryLimit != null) [ FD ]
Line_154 $$ if (replicationAm != null) -->Line_159 $$ if (replicationAm.getLower() > replicationAm.getUpper()) [ CD ]
Line_266 $$ if (appendSize != null) -->Line_270 $$ if (appendSize.getLower() < 0) [ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_79 $$ base.set(ConfigOption.FILES.getCfgOption(), fileAm.toString())[ FD ]
Line_202 $$ blockSize = extractor.getBlockSize(opts.getValue(ConfigOption.BLOCK_SIZE.getOpt()))-->Line_207 $$ if (blockSize.getLower() > blockSize.getUpper()) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_249 $$ if (writeSize != null) [ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_11 $$ if (mapAmount != null) [ CD ]
Line_260 $$ Range<Long> appendSize = null-->Line_262 $$ appendSize = extractor.getAppendSize(opts.getValue(ConfigOption.APPEND_SIZE.getOpt()))[ FD ]
Line_262 $$ appendSize = extractor.getAppendSize(opts.getValue(ConfigOption.APPEND_SIZE.getOpt()))-->Line_270 $$ if (appendSize.getLower() < 0) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_266 $$ if (appendSize != null) [ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_121 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))[ FD ]
Line_121 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))-->Line_125 $$ if (fn != null) [ FD ]
Line_148 $$ Range<Short> replicationAm = null-->Line_159 $$ if (replicationAm.getLower() > replicationAm.getUpper()) [ FD ]
Line_260 $$ Range<Long> appendSize = null-->Line_273 $$ base.set(ConfigOption.APPEND_SIZE.getCfgOption(), appendSize.toString())[ FD ]
Line_148 $$ Range<Short> replicationAm = null-->Line_150 $$ replicationAm = extractor.getReplication(opts.getValue(ConfigOption.REPLICATION_AM.getOpt()))[ FD ]
Line_142 $$ base = handleOperations(opts, base, extractor)-->Line_165 $$ base.set(ConfigOption.REPLICATION_AM.getCfgOption(), replicationAm.toString())[ FD ]
Line_47 $$ Integer operationAmount = null-->Line_57 $$ base.set(ConfigOption.OPS.getCfgOption(), operationAmount.toString())[ FD ]
Line_245 $$ writeSize = extractor.getWriteSize(opts.getValue(ConfigOption.WRITE_SIZE.getOpt()))-->Line_256 $$ base.set(ConfigOption.WRITE_SIZE.getCfgOption(), writeSize.toString())[ FD ]
Line_277 $$ Long seed = null-->Line_284 $$ base.set(ConfigOption.RANDOM_SEED.getCfgOption(), seed.toString())[ FD ]
Line_206 $$ if (blockSize != null) -->Line_207 $$ if (blockSize.getLower() > blockSize.getUpper()) [ CD ]
Line_119 $$ String fn = null-->Line_137 $$ base.set(ConfigOption.RESULT_FILE.getCfgOption(), fn)[ FD ]
Line_171 $$ sleepRange = extractor.getSleepRange(opts.getValue(ConfigOption.SLEEP_TIME.getOpt()))-->Line_182 $$ base.set(ConfigOption.SLEEP_TIME.getCfgOption(), sleepRange.toString())[ FD ]
Line_19 $$ Integer reduceAmount = null-->Line_26 $$ if (reduceAmount <= 0) [ FD ]
Line_49 $$ operationAmount = extractor.getOpCount(opts.getValue(ConfigOption.OPS.getOpt()))-->Line_54 $$ if (operationAmount <= 0) [ FD ]
Line_19 $$ Integer reduceAmount = null-->Line_29 $$ base.set(ConfigOption.REDUCES.getCfgOption(), reduceAmount.toString())[ FD ]
Line_188 $$ pSize = ConfigOption.PACKET_SIZE.getDefault()-->Line_190 $$ if (pSize != null) [ FD ]
Line_243 $$ Range<Long> writeSize = null-->Line_256 $$ base.set(ConfigOption.WRITE_SIZE.getCfgOption(), writeSize.toString())[ FD ]
Line_49 $$ operationAmount = extractor.getOpCount(opts.getValue(ConfigOption.OPS.getOpt()))-->Line_57 $$ base.set(ConfigOption.OPS.getCfgOption(), operationAmount.toString())[ FD ]
Line_142 $$ base = handleOperations(opts, base, extractor)-->Line_193 $$ base.set(ConfigOption.PACKET_SIZE.getCfgOption(), packetSize.toString())[ FD ]
Line_200 $$ Range<Long> blockSize = null-->Line_210 $$ if (blockSize.getLower() <= 0) [ FD ]
Line_136 $$ if (fn != null) -->Line_137 $$ base.set(ConfigOption.RESULT_FILE.getCfgOption(), fn)[ CD ]
Line_5 $$ Integer mapAmount = null-->Line_15 $$ base.set(ConfigOption.MAPS.getCfgOption(), mapAmount.toString())[ FD ]
Line_39 $$ if (duration != null) -->Line_40 $$ if (duration <= 0) [ CD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_95 $$ directoryLimit = extractor.getDirSize(opts.getValue(ConfigOption.DIR_SIZE.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_243 $$ Range<Long> writeSize = null[ CD ]
Line_279 $$ seed = extractor.getRandomSeed(opts.getValue(ConfigOption.RANDOM_SEED.getOpt()))-->Line_283 $$ if (seed != null) [ FD ]
Line_148 $$ Range<Short> replicationAm = null-->Line_165 $$ base.set(ConfigOption.REPLICATION_AM.getCfgOption(), replicationAm.toString())[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_21 $$ reduceAmount = extractor.getMapAmount(opts.getValue(ConfigOption.REDUCES.getOpt()))[ FD ]
Line_192 $$ Long packetSize = StringUtils.TraditionalBinaryPrefix.string2long(pSize)-->Line_193 $$ base.set(ConfigOption.PACKET_SIZE.getCfgOption(), packetSize.toString())[ FD ]
Line_39 $$ if (duration != null) -->Line_43 $$ base.set(ConfigOption.DURATION.getCfgOption(), duration.toString())[ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_109 $$ basedir = extractor.getBaseDirectory(opts.getValue(ConfigOption.BASE_DIR.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_200 $$ Range<Long> blockSize = null[ CD ]
Line_132 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))-->Line_137 $$ base.set(ConfigOption.RESULT_FILE.getCfgOption(), fn)[ FD ]
Line_107 $$ Path basedir = null-->Line_113 $$ if (basedir != null) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_71 $$ fileAm = extractor.getTotalFiles(opts.getValue(ConfigOption.FILES.getOpt()))[ FD ]
Line_121 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))-->Line_136 $$ if (fn != null) [ FD ]
Line_107 $$ Path basedir = null-->Line_114 $$ basedir = new Path(basedir, Constants.BASE_DIR)[ FD ]
Line_109 $$ basedir = extractor.getBaseDirectory(opts.getValue(ConfigOption.BASE_DIR.getOpt()))-->Line_114 $$ basedir = new Path(basedir, Constants.BASE_DIR)[ FD ]
Line_33 $$ Integer duration = null-->Line_39 $$ if (duration != null) [ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_84 $$ String qname = extractor.getQueueName(opts.getValue(ConfigOption.QUEUE_NAME.getOpt()))[ FD ]
Line_228 $$ readSize = extractor.getReadSize(opts.getValue(ConfigOption.READ_SIZE.getOpt()))-->Line_233 $$ if (readSize.getLower() > readSize.getUpper()) [ FD ]
Line_175 $$ if (sleepRange != null) -->Line_179 $$ if (sleepRange.getLower() <= 0) [ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_182 $$ base.set(ConfigOption.SLEEP_TIME.getCfgOption(), sleepRange.toString())[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_15 $$ base.set(ConfigOption.MAPS.getCfgOption(), mapAmount.toString())[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_206 $$ if (blockSize != null) [ CD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_150 $$ replicationAm = extractor.getReplication(opts.getValue(ConfigOption.REPLICATION_AM.getOpt()))[ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_245 $$ writeSize = extractor.getWriteSize(opts.getValue(ConfigOption.WRITE_SIZE.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_165 $$ base.set(ConfigOption.REPLICATION_AM.getCfgOption(), replicationAm.toString())[ FD ]
Line_75 $$ if (fileAm != null) -->Line_76 $$ if (fileAm <= 0) [ CD ]
Line_119 $$ String fn = null-->Line_132 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_107 $$ Path basedir = null[ CD ]
Line_249 $$ if (writeSize != null) -->Line_250 $$ if (writeSize.getLower() > writeSize.getUpper()) [ CD ]
Line_260 $$ Range<Long> appendSize = null-->Line_266 $$ if (appendSize != null) [ FD ]
Line_266 $$ if (appendSize != null) -->Line_273 $$ base.set(ConfigOption.APPEND_SIZE.getCfgOption(), appendSize.toString())[ CD ]
Line_277 $$ Long seed = null-->Line_279 $$ seed = extractor.getRandomSeed(opts.getValue(ConfigOption.RANDOM_SEED.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_239 $$ base.set(ConfigOption.READ_SIZE.getCfgOption(), readSize.toString())[ FD ]
Line_202 $$ blockSize = extractor.getBlockSize(opts.getValue(ConfigOption.BLOCK_SIZE.getOpt()))-->Line_218 $$ if ((blockSize.getUpper() % bytesPerChecksum) != 0) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_154 $$ if (replicationAm != null) [ CD ]
Line_206 $$ if (blockSize != null) -->Line_210 $$ if (blockSize.getLower() <= 0) [ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_186 $$ String pSize = opts.getValue(ConfigOption.PACKET_SIZE.getOpt())[ FD ]
Line_154 $$ if (replicationAm != null) -->Line_155 $$ int minRepl = base.getInt(Constants.MIN_REPLICATION, 1)[ CD ]
Line_150 $$ replicationAm = extractor.getReplication(opts.getValue(ConfigOption.REPLICATION_AM.getOpt()))-->Line_159 $$ if (replicationAm.getLower() > replicationAm.getUpper()) [ FD ]
Line_187 $$ if (pSize == null) -->Line_188 $$ pSize = ConfigOption.PACKET_SIZE.getDefault()[ CD ]
Line_245 $$ writeSize = extractor.getWriteSize(opts.getValue(ConfigOption.WRITE_SIZE.getOpt()))-->Line_253 $$ if (writeSize.getLower() < 0) [ FD ]
Line_121 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))-->Line_126 $$ base.set(ConfigOption.RESULT_FILE.getCfgOption(), fn)[ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_132 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_232 $$ if (readSize != null) [ CD ]
Line_226 $$ Range<Long> readSize = null-->Line_232 $$ if (readSize != null) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_115 $$ base.set(ConfigOption.BASE_DIR.getCfgOption(), basedir.toString())[ FD ]
Line_171 $$ sleepRange = extractor.getSleepRange(opts.getValue(ConfigOption.SLEEP_TIME.getOpt()))-->Line_179 $$ if (sleepRange.getLower() <= 0) [ FD ]
Line_169 $$ Range<Long> sleepRange = null-->Line_176 $$ if (sleepRange.getLower() > sleepRange.getUpper()) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_193 $$ base.set(ConfigOption.PACKET_SIZE.getCfgOption(), packetSize.toString())[ FD ]
Line_226 $$ Range<Long> readSize = null-->Line_236 $$ if (readSize.getLower() < 0) [ FD ]
Line_232 $$ if (readSize != null) -->Line_236 $$ if (readSize.getLower() < 0) [ CD ]
Line_69 $$ Integer fileAm = null-->Line_75 $$ if (fileAm != null) [ FD ]
Line_243 $$ Range<Long> writeSize = null-->Line_249 $$ if (writeSize != null) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)[ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_103 $$ base.set(ConfigOption.DIR_SIZE.getCfgOption(), directoryLimit.toString())[ FD ]
Line_113 $$ if (basedir != null) -->Line_114 $$ basedir = new Path(basedir, Constants.BASE_DIR)[ CD ]
Line_243 $$ Range<Long> writeSize = null-->Line_245 $$ writeSize = extractor.getWriteSize(opts.getValue(ConfigOption.WRITE_SIZE.getOpt()))[ FD ]
Line_33 $$ Integer duration = null-->Line_40 $$ if (duration <= 0) [ FD ]
Line_5 $$ Integer mapAmount = null-->Line_7 $$ mapAmount = extractor.getMapAmount(opts.getValue(ConfigOption.MAPS.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_47 $$ Integer operationAmount = null[ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_62 $$ boolean exitOnError = extractor.shouldExitOnFirstError(opts.getValue(ConfigOption.EXIT_ON_ERROR.getOpt()))[ FD ]
Line_175 $$ if (sleepRange != null) -->Line_182 $$ base.set(ConfigOption.SLEEP_TIME.getCfgOption(), sleepRange.toString())[ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_273 $$ base.set(ConfigOption.APPEND_SIZE.getCfgOption(), appendSize.toString())[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_95 $$ directoryLimit = extractor.getDirSize(opts.getValue(ConfigOption.DIR_SIZE.getOpt()))[ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_142 $$ base = handleOperations(opts, base, extractor)[ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_49 $$ operationAmount = extractor.getOpCount(opts.getValue(ConfigOption.OPS.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_260 $$ Range<Long> appendSize = null[ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_226 $$ Range<Long> readSize = null[ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_287 $$ return base[ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_222 $$ base.set(ConfigOption.BLOCK_SIZE.getCfgOption(), blockSize.toString())[ FD ]
Line_71 $$ fileAm = extractor.getTotalFiles(opts.getValue(ConfigOption.FILES.getOpt()))-->Line_76 $$ if (fileAm <= 0) [ FD ]
Line_53 $$ if (operationAmount != null) -->Line_57 $$ base.set(ConfigOption.OPS.getCfgOption(), operationAmount.toString())[ CD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_113 $$ if (basedir != null) [ CD ]
Line_33 $$ Integer duration = null-->Line_35 $$ duration = extractor.getDuration(opts.getValue(ConfigOption.DURATION.getOpt()))[ FD ]
Line_121 $$ fn = extractor.getResultFile(opts.getValue(ConfigOption.RESULT_FILE.getOpt()))-->Line_137 $$ base.set(ConfigOption.RESULT_FILE.getCfgOption(), fn)[ FD ]
Line_47 $$ Integer operationAmount = null-->Line_53 $$ if (operationAmount != null) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_155 $$ int minRepl = base.getInt(Constants.MIN_REPLICATION, 1)[ FD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_279 $$ seed = extractor.getRandomSeed(opts.getValue(ConfigOption.RANDOM_SEED.getOpt()))[ FD ]
Line_206 $$ if (blockSize != null) -->Line_222 $$ base.set(ConfigOption.BLOCK_SIZE.getCfgOption(), blockSize.toString())[ CD ]
Line_62 $$ boolean exitOnError = extractor.shouldExitOnFirstError(opts.getValue(ConfigOption.EXIT_ON_ERROR.getOpt()))-->Line_63 $$ base.setBoolean(ConfigOption.EXIT_ON_ERROR.getCfgOption(), exitOnError)[ FD ]
Line_171 $$ sleepRange = extractor.getSleepRange(opts.getValue(ConfigOption.SLEEP_TIME.getOpt()))-->Line_175 $$ if (sleepRange != null) [ FD ]
Line_5 $$ Integer mapAmount = null-->Line_11 $$ if (mapAmount != null) [ FD ]
Line_142 $$ base = handleOperations(opts, base, extractor)-->Line_239 $$ base.set(ConfigOption.READ_SIZE.getCfgOption(), readSize.toString())[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_57 $$ base.set(ConfigOption.OPS.getCfgOption(), operationAmount.toString())[ FD ]
Line_5 $$ Integer mapAmount = null-->Line_12 $$ if (mapAmount <= 0) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_5 $$ Integer mapAmount = null[ CD ]
Line_7 $$ mapAmount = extractor.getMapAmount(opts.getValue(ConfigOption.MAPS.getOpt()))-->Line_11 $$ if (mapAmount != null) [ FD ]
Line_150 $$ replicationAm = extractor.getReplication(opts.getValue(ConfigOption.REPLICATION_AM.getOpt()))-->Line_154 $$ if (replicationAm != null) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_283 $$ if (seed != null) [ CD ]
Line_154 $$ if (replicationAm != null) -->Line_162 $$ if (replicationAm.getLower() <= 0) [ CD ]
Line_3 $$ ConfigExtractor extractor = new ConfigExtractor(base)-->Line_35 $$ duration = extractor.getDuration(opts.getValue(ConfigOption.DURATION.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_245 $$ writeSize = extractor.getWriteSize(opts.getValue(ConfigOption.WRITE_SIZE.getOpt()))[ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_93 $$ Integer directoryLimit = null[ CD ]
Line_11 $$ if (mapAmount != null) -->Line_12 $$ if (mapAmount <= 0) [ CD ]
Line_148 $$ Range<Short> replicationAm = null-->Line_154 $$ if (replicationAm != null) [ FD ]
Line_154 $$ if (replicationAm != null) -->Line_165 $$ base.set(ConfigOption.REPLICATION_AM.getCfgOption(), replicationAm.toString())[ CD ]
Line_169 $$ Range<Long> sleepRange = null-->Line_175 $$ if (sleepRange != null) [ FD ]
Line_260 $$ Range<Long> appendSize = null-->Line_267 $$ if (appendSize.getLower() > appendSize.getUpper()) [ FD ]
Line_119 $$ String fn = null-->Line_125 $$ if (fn != null) [ FD ]
Line_150 $$ replicationAm = extractor.getReplication(opts.getValue(ConfigOption.REPLICATION_AM.getOpt()))-->Line_156 $$ if (replicationAm.getLower() < minRepl) [ FD ]
Line_2 $$ private Configuration handleOptions(ParsedOutput opts, Configuration base) throws ConfigException -->Line_277 $$ Long seed = null[ CD ]
Line_260 $$ Range<Long> appendSize = null-->Line_270 $$ if (appendSize.getLower() < 0) [ FD ]
Line_214 $$ if (bytesPerChecksum != null) -->Line_215 $$ if ((blockSize.getLower() % bytesPerChecksum) != 0) [ CD ]
Line_47 $$ Integer operationAmount = null-->Line_49 $$ operationAmount = extractor.getOpCount(opts.getValue(ConfigOption.OPS.getOpt()))[ FD ]
