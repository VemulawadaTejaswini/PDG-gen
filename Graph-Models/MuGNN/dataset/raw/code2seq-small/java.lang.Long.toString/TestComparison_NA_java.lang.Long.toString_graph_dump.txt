Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_30 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_30 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))[ CD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_23 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_19 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_30 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_23 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_47 $$ for (int i = 0; i < 32; ++i) -->Line_54 $$ int offset = (int) Math.pow(2, i)[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_9 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison of %s and %s, expected <", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_6 $$ String.format("Failed == comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_29 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_30 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_5 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : "Failed == comparison"[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_2 $$ public void TestComparison() -->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ CD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_23 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ CD ]
Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_19 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_30 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_15 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ CD ]
Line_2 $$ public void TestComparison() -->Line_47 $$ for (int i = 0; i < 32; ++i) [ CD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_2 $$ public void TestComparison() -->Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ CD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_23 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_15 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ CD ]
Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_29 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_12 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed comparison of %s and %s, expected > 0", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_19 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_47 $$ for (int i = 0; i < 32; ++i) -->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ CD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_16 $$ Integer intLimit = Integer.MAX_VALUE[ CD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_2 $$ public void TestComparison() -->Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ CD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_48 $$ int offset = (int) Math.pow(2, i)-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_23 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_23 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_20 $$ Long overLimit = (long) (Integer.MAX_VALUE)[ CD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_19 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_2 $$ public void TestComparison() -->Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ CD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_17 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_47 $$ for (int i = 0; i < 32; ++i) -->Line_53 $$ for (int i = 0; i < 32; ++i) [ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_2 $$ public void TestComparison() -->Line_17 $$ d1 = SimpleDateType.instance.fromString("0")[ CD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_2 $$ public void TestComparison() -->Line_29 $$ d1 = SimpleDateType.instance.fromString("256")[ CD ]
Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_25 $$ Long i2 = (long) Math.pow(2, 32) - 1-->Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_30 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_30 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_12 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed comparison of %s and %s, expected > 0", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_12 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed comparison of %s and %s, expected > 0", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_2 $$ public void TestComparison() -->Line_6 $$ String.format("Failed == comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ CD ]
Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_5 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : "Failed == comparison"[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_21 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_53 $$ for (int i = 0; i < 32; ++i) -->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ CD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_29 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")[ FD ]
Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ FD ]
Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_15 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_47 $$ for (int i = 0; i < 32; ++i) -->Line_48 $$ int offset = (int) Math.pow(2, i)[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_21 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_2 $$ public void TestComparison() -->Line_30 $$ d2 = SimpleDateType.instance.fromString("512")[ CD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_21 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_19 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_29 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_19 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_2 $$ public void TestComparison() -->Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ CD ]
Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_17 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_23 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_15 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_23 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_23 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_23 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_29 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_2 $$ public void TestComparison() -->Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")[ CD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ CD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ Integer intLimit = Integer.MAX_VALUE-->Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())[ FD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_23 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_2 $$ public void TestComparison() -->Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ CD ]
Line_53 $$ for (int i = 0; i < 32; ++i) -->Line_54 $$ int offset = (int) Math.pow(2, i)[ CD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_12 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed comparison of %s and %s, expected > 0", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_12 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed comparison of %s and %s, expected > 0", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_6 $$ String.format("Failed == comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_24 $$ Long i1 = 0L-->Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_23 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_2 $$ public void TestComparison() -->Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())[ CD ]
Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_15 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_13 $$ d1 = SimpleDateType.instance.fromString("1")[ FD ]
Line_2 $$ public void TestComparison() -->Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ CD ]
Line_2 $$ public void TestComparison() -->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ CD ]
Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))[ CD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_19 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_29 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_2 $$ public void TestComparison() -->Line_21 $$ d1 = SimpleDateType.instance.fromString("0")[ CD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_19 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_2 $$ public void TestComparison() -->Line_24 $$ Long i1 = 0L[ CD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))[ CD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_19 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_13 $$ d1 = SimpleDateType.instance.fromString("1")[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_15 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_17 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_9 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison of %s and %s, expected <", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")[ CD ]
Line_2 $$ public void TestComparison() -->Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")[ CD ]
Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_53 $$ for (int i = 0; i < 32; ++i) -->Line_54 $$ int offset = (int) Math.pow(2, i)[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_2 $$ public void TestComparison() -->Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ CD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_21 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")[ CD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_13 $$ d1 = SimpleDateType.instance.fromString("1")[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_17 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_9 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison of %s and %s, expected <", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))[ FD ]
Line_2 $$ public void TestComparison() -->Line_13 $$ d1 = SimpleDateType.instance.fromString("1")[ CD ]
Line_20 $$ Long overLimit = (long) (Integer.MAX_VALUE)-->Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ FD ]
Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_53 $$ for (int i = 0; i < 32; ++i) [ CD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_12 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed comparison of %s and %s, expected > 0", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_21 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_35 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_54 $$ int offset = (int) Math.pow(2, i)-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_47 $$ for (int i = 0; i < 32; ++i) -->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ CD ]
Line_53 $$ for (int i = 0; i < 32; ++i) -->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ CD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_14 $$ d2 = SimpleDateType.instance.fromString("1000")[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")-->Line_50 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_15 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_36 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_7 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_15 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_18 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_30 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_42 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_43 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_26 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_57 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_17 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_28 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_34 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_32 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_47 $$ for (int i = 0; i < 32; ++i) -->Line_48 $$ int offset = (int) Math.pow(2, i)[ CD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_44 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_29 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_31 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_10 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_41 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_51 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_29 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_13 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_19 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_49 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_48 $$ int offset = (int) Math.pow(2, i)-->Line_55 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_27 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_40 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_45 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_9 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison of %s and %s, expected <", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_11 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_39 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_22 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_46 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_33 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_56 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_21 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_38 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_3 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_37 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_2 $$ public void TestComparison() -->Line_25 $$ Long i2 = (long) Math.pow(2, 32) - 1[ CD ]
