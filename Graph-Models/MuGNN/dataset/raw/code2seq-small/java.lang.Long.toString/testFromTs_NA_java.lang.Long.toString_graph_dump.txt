Line_2 $$ public void testFromTs() throws Exception -->Line_7 $$ response = r.path("ws").path("v1").path("timeline").path("type_1").queryParam("fromTs", Long.toString(System.currentTimeMillis())).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class)[ CD ]
Line_3 $$ WebResource r = resource()-->Line_4 $$ ClientResponse response = r.path("ws").path("v1").path("timeline").path("type_1").queryParam("fromTs", Long.toString(beforeTime)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class)[ FD ]
Line_4 $$ ClientResponse response = r.path("ws").path("v1").path("timeline").path("type_1").queryParam("fromTs", Long.toString(beforeTime)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class)-->Line_7 $$ response = r.path("ws").path("v1").path("timeline").path("type_1").queryParam("fromTs", Long.toString(System.currentTimeMillis())).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class)[ FD ]
Line_2 $$ public void testFromTs() throws Exception -->Line_8 $$ assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType())[ CD ]
Line_4 $$ ClientResponse response = r.path("ws").path("v1").path("timeline").path("type_1").queryParam("fromTs", Long.toString(beforeTime)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class)-->Line_5 $$ assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType())[ FD ]
Line_4 $$ ClientResponse response = r.path("ws").path("v1").path("timeline").path("type_1").queryParam("fromTs", Long.toString(beforeTime)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class)-->Line_9 $$ assertEquals(2, response.getEntity(TimelineEntities.class).getEntities().size())[ FD ]
Line_4 $$ ClientResponse response = r.path("ws").path("v1").path("timeline").path("type_1").queryParam("fromTs", Long.toString(beforeTime)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class)-->Line_6 $$ assertEquals(0, response.getEntity(TimelineEntities.class).getEntities().size())[ FD ]
Line_7 $$ response = r.path("ws").path("v1").path("timeline").path("type_1").queryParam("fromTs", Long.toString(System.currentTimeMillis())).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class)-->Line_9 $$ assertEquals(2, response.getEntity(TimelineEntities.class).getEntities().size())[ FD ]
Line_2 $$ public void testFromTs() throws Exception -->Line_4 $$ ClientResponse response = r.path("ws").path("v1").path("timeline").path("type_1").queryParam("fromTs", Long.toString(beforeTime)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class)[ CD ]
Line_2 $$ public void testFromTs() throws Exception -->Line_5 $$ assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType())[ CD ]
Line_2 $$ public void testFromTs() throws Exception -->Line_3 $$ WebResource r = resource()[ CD ]
Line_2 $$ public void testFromTs() throws Exception -->Line_6 $$ assertEquals(0, response.getEntity(TimelineEntities.class).getEntities().size())[ CD ]
Line_7 $$ response = r.path("ws").path("v1").path("timeline").path("type_1").queryParam("fromTs", Long.toString(System.currentTimeMillis())).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class)-->Line_8 $$ assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType())[ FD ]
Line_2 $$ public void testFromTs() throws Exception -->Line_9 $$ assertEquals(2, response.getEntity(TimelineEntities.class).getEntities().size())[ CD ]
Line_4 $$ ClientResponse response = r.path("ws").path("v1").path("timeline").path("type_1").queryParam("fromTs", Long.toString(beforeTime)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class)-->Line_8 $$ assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType())[ FD ]
Line_3 $$ WebResource r = resource()-->Line_7 $$ response = r.path("ws").path("v1").path("timeline").path("type_1").queryParam("fromTs", Long.toString(System.currentTimeMillis())).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class)[ FD ]
