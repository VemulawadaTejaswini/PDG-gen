Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_8 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ CD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))[ FD ]
Line_39 $$ Path localized = p.getValue().get()-->Line_40 $$ assertEquals(sizes[Integer.valueOf(localized.getName())], p.getKey().getSize())[ FD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_18 $$ for (int i = 0; i < 10; ++i) [ CD ]
Line_25 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)-->Line_26 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_14 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_34 $$ for (Future<Path> path : pending.values()) [ FD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_12 $$ rand.setSeed(sharedSeed)[ CD ]
Line_29 $$ FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc)-->Line_30 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_34 $$ for (Future<Path> path : pending.values()) -->Line_35 $$ Assert.assertTrue(path.isDone())[ FD ]
Line_38 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) -->Line_39 $$ Path localized = p.getValue().get()[ FD ]
Line_39 $$ Path localized = p.getValue().get()-->Line_44 $$ status = files.getFileStatus(localized)[ FD ]
Line_10 $$ Random rand = new Random()-->Line_12 $$ rand.setSeed(sharedSeed)[ FD ]
Line_24 $$ Path p = new Path(basedir, "" + i)-->Line_40 $$ assertEquals(sizes[Integer.valueOf(localized.getName())], p.getKey().getSize())[ FD ]
Line_10 $$ Random rand = new Random()-->Line_19 $$ sizes[i] = rand.nextInt(512) + 512[ FD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_17 $$ int[] sizes = new int[10][ CD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_25 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)[ FD ]
Line_16 $$ LocalDirAllocator dirs = new LocalDirAllocator(TestFSDownload.class.getName())-->Line_27 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), sizes[i], conf)[ FD ]
Line_18 $$ for (int i = 0; i < 10; ++i) -->Line_29 $$ FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ FD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_32 $$ exec.shutdown()[ CD ]
Line_45 $$ perm = status.getPermission()-->Line_48 $$ Assert.assertTrue("Private file should be 500", perm.toShort() == FSDownload.PRIVATE_FILE_PERMS.toShort())[ FD ]
Line_39 $$ Path localized = p.getValue().get()-->Line_41 $$ FileStatus status = files.getFileStatus(localized.getParent())[ FD ]
Line_21 $$ if (i % 2 == 1) -->Line_22 $$ vis = LocalResourceVisibility.APPLICATION[ CD ]
Line_24 $$ Path p = new Path(basedir, "" + i)-->Line_47 $$ assert (rsrcVis.containsKey(p.getKey()))[ FD ]
Line_38 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) -->Line_46 $$ System.out.println("File permission " + perm + " for rsrc vis " + p.getKey().getVisibility().name())[ FD ]
Line_10 $$ Random rand = new Random()-->Line_11 $$ long sharedSeed = rand.nextLong()[ FD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)[ FD ]
Line_18 $$ for (int i = 0; i < 10; ++i) -->Line_26 $$ rsrcVis.put(rsrc, vis)[ CD ]
Line_18 $$ for (int i = 0; i < 10; ++i) -->Line_30 $$ pending.put(rsrc, exec.submit(fsd))[ CD ]
Line_15 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_30 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_18 $$ for (int i = 0; i < 10; ++i) -->Line_21 $$ if (i % 2 == 1) [ CD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_9 $$ Map<LocalResource, LocalResourceVisibility> rsrcVis = new HashMap<LocalResource, LocalResourceVisibility>()[ CD ]
Line_44 $$ status = files.getFileStatus(localized)-->Line_45 $$ perm = status.getPermission()[ FD ]
Line_42 $$ FsPermission perm = status.getPermission()-->Line_43 $$ assertEquals("Cache directory permissions are incorrect", new FsPermission((short) 0755), perm)[ FD ]
Line_9 $$ Map<LocalResource, LocalResourceVisibility> rsrcVis = new HashMap<LocalResource, LocalResourceVisibility>()-->Line_47 $$ assert (rsrcVis.containsKey(p.getKey()))[ FD ]
Line_20 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_26 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_18 $$ for (int i = 0; i < 10; ++i) -->Line_20 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE[ CD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)[ CD ]
Line_27 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), sizes[i], conf)-->Line_28 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))[ FD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_44 $$ status = files.getFileStatus(localized)[ FD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_4 $$ conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, "077")[ CD ]
Line_9 $$ Map<LocalResource, LocalResourceVisibility> rsrcVis = new HashMap<LocalResource, LocalResourceVisibility>()-->Line_26 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_18 $$ for (int i = 0; i < 10; ++i) -->Line_24 $$ Path p = new Path(basedir, "" + i)[ CD ]
Line_14 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_30 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_25 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)-->Line_30 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_27 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), sizes[i], conf)[ FD ]
Line_38 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) -->Line_40 $$ assertEquals(sizes[Integer.valueOf(localized.getName())], p.getKey().getSize())[ FD ]
Line_42 $$ FsPermission perm = status.getPermission()-->Line_48 $$ Assert.assertTrue("Private file should be 500", perm.toShort() == FSDownload.PRIVATE_FILE_PERMS.toShort())[ FD ]
Line_41 $$ FileStatus status = files.getFileStatus(localized.getParent())-->Line_44 $$ status = files.getFileStatus(localized)[ FD ]
Line_38 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) -->Line_47 $$ assert (rsrcVis.containsKey(p.getKey()))[ FD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_11 $$ long sharedSeed = rand.nextLong()[ CD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_7 $$ files.mkdir(basedir, null, true)[ CD ]
Line_15 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_32 $$ exec.shutdown()[ FD ]
Line_24 $$ Path p = new Path(basedir, "" + i)-->Line_46 $$ System.out.println("File permission " + perm + " for rsrc vis " + p.getKey().getVisibility().name())[ FD ]
Line_18 $$ for (int i = 0; i < 10; ++i) -->Line_28 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))[ CD ]
Line_22 $$ vis = LocalResourceVisibility.APPLICATION-->Line_25 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)[ FD ]
Line_15 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_33 $$ while (!exec.awaitTermination(1000, TimeUnit.MILLISECONDS)) [ FD ]
Line_11 $$ long sharedSeed = rand.nextLong()-->Line_12 $$ rand.setSeed(sharedSeed)[ FD ]
Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_7 $$ files.mkdir(basedir, null, true)[ FD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_16 $$ LocalDirAllocator dirs = new LocalDirAllocator(TestFSDownload.class.getName())[ CD ]
Line_14 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_38 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) [ FD ]
Line_24 $$ Path p = new Path(basedir, "" + i)-->Line_25 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)[ FD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_7 $$ files.mkdir(basedir, null, true)[ FD ]
Line_22 $$ vis = LocalResourceVisibility.APPLICATION-->Line_26 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_10 $$ Random rand = new Random()-->Line_25 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)[ FD ]
Line_41 $$ FileStatus status = files.getFileStatus(localized.getParent())-->Line_42 $$ FsPermission perm = status.getPermission()[ FD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_10 $$ Random rand = new Random()[ CD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_33 $$ while (!exec.awaitTermination(1000, TimeUnit.MILLISECONDS)) [ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, "077")[ FD ]
Line_18 $$ for (int i = 0; i < 10; ++i) -->Line_19 $$ sizes[i] = rand.nextInt(512) + 512[ CD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_13 $$ System.out.println("SEED: " + sharedSeed)[ CD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_14 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()[ CD ]
Line_41 $$ FileStatus status = files.getFileStatus(localized.getParent())-->Line_45 $$ perm = status.getPermission()[ FD ]
Line_18 $$ for (int i = 0; i < 10; ++i) -->Line_25 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)[ CD ]
Line_42 $$ FsPermission perm = status.getPermission()-->Line_45 $$ perm = status.getPermission()[ FD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_41 $$ FileStatus status = files.getFileStatus(localized.getParent())[ FD ]
Line_2 $$ public void testDownload() throws IOException, URISyntaxException, InterruptedException -->Line_15 $$ ExecutorService exec = Executors.newSingleThreadExecutor()[ CD ]
Line_20 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_22 $$ vis = LocalResourceVisibility.APPLICATION[ FD ]
Line_18 $$ for (int i = 0; i < 10; ++i) -->Line_27 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), sizes[i], conf)[ CD ]
Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_27 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), sizes[i], conf)[ FD ]
Line_24 $$ Path p = new Path(basedir, "" + i)-->Line_39 $$ Path localized = p.getValue().get()[ FD ]
Line_20 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_25 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)[ FD ]
Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_8 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ FD ]
