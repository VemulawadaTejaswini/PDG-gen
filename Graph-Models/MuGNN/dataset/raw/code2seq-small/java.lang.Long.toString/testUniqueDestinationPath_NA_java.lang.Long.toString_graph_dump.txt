Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_13 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE[ CD ]
Line_9 $$ LocalDirAllocator dirs = new LocalDirAllocator(TestFSDownload.class.getName())-->Line_10 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), conf)[ FD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_4 $$ FileContext files = FileContext.getLocalFSFileContext(conf)[ CD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_14 $$ LocalResource rsrc = createJar(files, p, vis)[ CD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_19 $$ Assert.assertTrue(rPath.isDone())[ CD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_20 $$ Assert.assertEquals(destPath, rPath.get().getParent())[ CD ]
Line_12 $$ Path p = new Path(basedir, "dir" + 0 + ".jar")-->Line_14 $$ LocalResource rsrc = createJar(files, p, vis)[ FD ]
Line_13 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_14 $$ LocalResource rsrc = createJar(files, p, vis)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ FD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_16 $$ Future<Path> rPath = singleThreadedExec.submit(fsd)[ CD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_12 $$ Path p = new Path(basedir, "dir" + 0 + ".jar")[ CD ]
Line_8 $$ ExecutorService singleThreadedExec = Executors.newSingleThreadExecutor()-->Line_18 $$ while (!singleThreadedExec.awaitTermination(1000, TimeUnit.MILLISECONDS)) [ FD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_18 $$ while (!singleThreadedExec.awaitTermination(1000, TimeUnit.MILLISECONDS)) [ CD ]
Line_4 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_5 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))[ FD ]
Line_8 $$ ExecutorService singleThreadedExec = Executors.newSingleThreadExecutor()-->Line_16 $$ Future<Path> rPath = singleThreadedExec.submit(fsd)[ FD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_10 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), conf)[ CD ]
Line_16 $$ Future<Path> rPath = singleThreadedExec.submit(fsd)-->Line_20 $$ Assert.assertEquals(destPath, rPath.get().getParent())[ FD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_7 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ CD ]
Line_5 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_7 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ FD ]
Line_10 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), conf)-->Line_20 $$ Assert.assertEquals(destPath, rPath.get().getParent())[ FD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_5 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_10 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), conf)[ FD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_6 $$ files.mkdir(basedir, null, true)[ CD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_15 $$ FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc)[ CD ]
Line_4 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_14 $$ LocalResource rsrc = createJar(files, p, vis)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ FileContext files = FileContext.getLocalFSFileContext(conf)[ FD ]
Line_8 $$ ExecutorService singleThreadedExec = Executors.newSingleThreadExecutor()-->Line_17 $$ singleThreadedExec.shutdown()[ FD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_9 $$ LocalDirAllocator dirs = new LocalDirAllocator(TestFSDownload.class.getName())[ CD ]
Line_11 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))-->Line_20 $$ Assert.assertEquals(destPath, rPath.get().getParent())[ FD ]
Line_5 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_10 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), conf)[ FD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_11 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))[ CD ]
Line_15 $$ FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc)-->Line_16 $$ Future<Path> rPath = singleThreadedExec.submit(fsd)[ FD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_8 $$ ExecutorService singleThreadedExec = Executors.newSingleThreadExecutor()[ CD ]
Line_5 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_6 $$ files.mkdir(basedir, null, true)[ FD ]
Line_2 $$ public void testUniqueDestinationPath() throws Exception -->Line_17 $$ singleThreadedExec.shutdown()[ CD ]
Line_10 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), conf)-->Line_11 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))[ FD ]
Line_4 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_6 $$ files.mkdir(basedir, null, true)[ FD ]
Line_16 $$ Future<Path> rPath = singleThreadedExec.submit(fsd)-->Line_19 $$ Assert.assertTrue(rPath.isDone())[ FD ]
