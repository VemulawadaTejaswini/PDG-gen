Line_2 $$ public void testGetAndRollSecrets() throws Exception -->Line_8 $$ byte[] secret3 = Long.toString(rand.nextLong()).getBytes()[ CD ]
Line_12 $$ byte[] currentSecret = secretProvider.getCurrentSecret()-->Line_21 $$ Assert.assertArrayEquals(secret2, currentSecret)[ FD ]
Line_19 $$ currentSecret = secretProvider.getCurrentSecret()-->Line_26 $$ currentSecret = secretProvider.getCurrentSecret()[ FD ]
Line_9 $$ RandomSignerSecretProvider secretProvider = new RandomSignerSecretProvider(seed)-->Line_27 $$ allSecrets = secretProvider.getAllSecrets()[ FD ]
Line_8 $$ byte[] secret3 = Long.toString(rand.nextLong()).getBytes()-->Line_28 $$ Assert.assertArrayEquals(secret3, currentSecret)[ FD ]
Line_2 $$ public void testGetAndRollSecrets() throws Exception -->Line_6 $$ byte[] secret1 = Long.toString(rand.nextLong()).getBytes()[ CD ]
Line_2 $$ public void testGetAndRollSecrets() throws Exception -->Line_9 $$ RandomSignerSecretProvider secretProvider = new RandomSignerSecretProvider(seed)[ CD ]
Line_9 $$ RandomSignerSecretProvider secretProvider = new RandomSignerSecretProvider(seed)-->Line_20 $$ allSecrets = secretProvider.getAllSecrets()[ FD ]
Line_9 $$ RandomSignerSecretProvider secretProvider = new RandomSignerSecretProvider(seed)-->Line_11 $$ secretProvider.init(null, rolloverFrequency)[ FD ]
Line_9 $$ RandomSignerSecretProvider secretProvider = new RandomSignerSecretProvider(seed)-->Line_19 $$ currentSecret = secretProvider.getCurrentSecret()[ FD ]
Line_12 $$ byte[] currentSecret = secretProvider.getCurrentSecret()-->Line_28 $$ Assert.assertArrayEquals(secret3, currentSecret)[ FD ]
Line_6 $$ byte[] secret1 = Long.toString(rand.nextLong()).getBytes()-->Line_14 $$ Assert.assertArrayEquals(secret1, currentSecret)[ FD ]
Line_2 $$ public void testGetAndRollSecrets() throws Exception -->Line_3 $$ long rolloverFrequency = 15 * 1000[ CD ]
Line_5 $$ Random rand = new Random(seed)-->Line_6 $$ byte[] secret1 = Long.toString(rand.nextLong()).getBytes()[ FD ]
Line_19 $$ currentSecret = secretProvider.getCurrentSecret()-->Line_21 $$ Assert.assertArrayEquals(secret2, currentSecret)[ FD ]
Line_7 $$ byte[] secret2 = Long.toString(rand.nextLong()).getBytes()-->Line_31 $$ Assert.assertArrayEquals(secret2, allSecrets[1])[ FD ]
Line_7 $$ byte[] secret2 = Long.toString(rand.nextLong()).getBytes()-->Line_21 $$ Assert.assertArrayEquals(secret2, currentSecret)[ FD ]
Line_9 $$ RandomSignerSecretProvider secretProvider = new RandomSignerSecretProvider(seed)-->Line_13 $$ byte[][] allSecrets = secretProvider.getAllSecrets()[ FD ]
Line_12 $$ byte[] currentSecret = secretProvider.getCurrentSecret()-->Line_19 $$ currentSecret = secretProvider.getCurrentSecret()[ FD ]
Line_13 $$ byte[][] allSecrets = secretProvider.getAllSecrets()-->Line_20 $$ allSecrets = secretProvider.getAllSecrets()[ FD ]
Line_12 $$ byte[] currentSecret = secretProvider.getCurrentSecret()-->Line_26 $$ currentSecret = secretProvider.getCurrentSecret()[ FD ]
Line_2 $$ public void testGetAndRollSecrets() throws Exception -->Line_4 $$ long seed = System.currentTimeMillis()[ CD ]
Line_9 $$ RandomSignerSecretProvider secretProvider = new RandomSignerSecretProvider(seed)-->Line_34 $$ secretProvider.destroy()[ FD ]
Line_6 $$ byte[] secret1 = Long.toString(rand.nextLong()).getBytes()-->Line_24 $$ Assert.assertArrayEquals(secret1, allSecrets[1])[ FD ]
Line_5 $$ Random rand = new Random(seed)-->Line_7 $$ byte[] secret2 = Long.toString(rand.nextLong()).getBytes()[ FD ]
Line_2 $$ public void testGetAndRollSecrets() throws Exception -->Line_7 $$ byte[] secret2 = Long.toString(rand.nextLong()).getBytes()[ CD ]
Line_13 $$ byte[][] allSecrets = secretProvider.getAllSecrets()-->Line_27 $$ allSecrets = secretProvider.getAllSecrets()[ FD ]
Line_20 $$ allSecrets = secretProvider.getAllSecrets()-->Line_27 $$ allSecrets = secretProvider.getAllSecrets()[ FD ]
Line_19 $$ currentSecret = secretProvider.getCurrentSecret()-->Line_28 $$ Assert.assertArrayEquals(secret3, currentSecret)[ FD ]
Line_12 $$ byte[] currentSecret = secretProvider.getCurrentSecret()-->Line_14 $$ Assert.assertArrayEquals(secret1, currentSecret)[ FD ]
Line_6 $$ byte[] secret1 = Long.toString(rand.nextLong()).getBytes()-->Line_16 $$ Assert.assertArrayEquals(secret1, allSecrets[0])[ FD ]
Line_5 $$ Random rand = new Random(seed)-->Line_8 $$ byte[] secret3 = Long.toString(rand.nextLong()).getBytes()[ FD ]
Line_7 $$ byte[] secret2 = Long.toString(rand.nextLong()).getBytes()-->Line_23 $$ Assert.assertArrayEquals(secret2, allSecrets[0])[ FD ]
Line_8 $$ byte[] secret3 = Long.toString(rand.nextLong()).getBytes()-->Line_30 $$ Assert.assertArrayEquals(secret3, allSecrets[0])[ FD ]
Line_2 $$ public void testGetAndRollSecrets() throws Exception -->Line_5 $$ Random rand = new Random(seed)[ CD ]
Line_3 $$ long rolloverFrequency = 15 * 1000-->Line_11 $$ secretProvider.init(null, rolloverFrequency)[ FD ]
Line_9 $$ RandomSignerSecretProvider secretProvider = new RandomSignerSecretProvider(seed)-->Line_12 $$ byte[] currentSecret = secretProvider.getCurrentSecret()[ FD ]
Line_9 $$ RandomSignerSecretProvider secretProvider = new RandomSignerSecretProvider(seed)-->Line_26 $$ currentSecret = secretProvider.getCurrentSecret()[ FD ]
Line_26 $$ currentSecret = secretProvider.getCurrentSecret()-->Line_28 $$ Assert.assertArrayEquals(secret3, currentSecret)[ FD ]
