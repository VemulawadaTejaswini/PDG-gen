Line_2 $$ public void testMergesHappening() throws InterruptedException, IOException, ExecutionException -->Line_31 $$ assertThat(count, Matchers.lessThanOrEqualTo(upperNumberSegments))[ CD ]
Line_9 $$ final int numDocs = scaledRandomIntBetween(100, 1000)-->Line_11 $$ for (int j = 0; j < numDocs; ++j) [ FD ]
Line_10 $$ BulkRequestBuilder request = client().prepareBulk()-->Line_12 $$ request.add(Requests.indexRequest("test").type("type1").id(Long.toString(id++)).source(jsonBuilder().startObject().field("l", randomLong()).endObject()))[ FD ]
Line_2 $$ public void testMergesHappening() throws InterruptedException, IOException, ExecutionException -->Line_21 $$ awaitBusy(() -> [ CD ]
Line_20 $$ final long upperNumberSegments = 2 * numOfShards * 10-->Line_31 $$ assertThat(count, Matchers.lessThanOrEqualTo(upperNumberSegments))[ FD ]
Line_2 $$ public void testMergesHappening() throws InterruptedException, IOException, ExecutionException -->Line_20 $$ final long upperNumberSegments = 2 * numOfShards * 10[ CD ]
Line_3 $$ final int numOfShards = randomIntBetween(1, 5)-->Line_23 $$ logger.info("numshards [ FD ]
Line_25 $$ long count = stats.getPrimaries().getSegments().getCount()-->Line_31 $$ assertThat(count, Matchers.lessThanOrEqualTo(upperNumberSegments))[ FD ]
Line_8 $$ for (int i = 0; i < rounds; ++i) -->Line_14 $$ BulkResponse response = request.execute().actionGet()[ CD ]
Line_2 $$ public void testMergesHappening() throws InterruptedException, IOException, ExecutionException -->Line_3 $$ final int numOfShards = randomIntBetween(1, 5)[ CD ]
Line_2 $$ public void testMergesHappening() throws InterruptedException, IOException, ExecutionException -->Line_6 $$ final int rounds = scaledRandomIntBetween(50, 300)[ CD ]
Line_2 $$ public void testMergesHappening() throws InterruptedException, IOException, ExecutionException -->Line_5 $$ long id = 0[ CD ]
Line_2 $$ public void testMergesHappening() throws InterruptedException, IOException, ExecutionException -->Line_28 $$ IndicesStatsResponse stats = client().admin().indices().prepareStats().setSegments(true).setMerge(true).get()[ CD ]
Line_3 $$ final int numOfShards = randomIntBetween(1, 5)-->Line_4 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numOfShards).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).build()))[ FD ]
Line_2 $$ public void testMergesHappening() throws InterruptedException, IOException, ExecutionException -->Line_4 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numOfShards).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).build()))[ CD ]
Line_8 $$ for (int i = 0; i < rounds; ++i) -->Line_15 $$ refresh()[ CD ]
Line_8 $$ for (int i = 0; i < rounds; ++i) -->Line_10 $$ BulkRequestBuilder request = client().prepareBulk()[ CD ]
Line_8 $$ for (int i = 0; i < rounds; ++i) -->Line_16 $$ assertNoFailures(response)[ CD ]
Line_3 $$ final int numOfShards = randomIntBetween(1, 5)-->Line_29 $$ logger.info("numshards [ FD ]
Line_8 $$ for (int i = 0; i < rounds; ++i) -->Line_9 $$ final int numDocs = scaledRandomIntBetween(100, 1000)[ CD ]
Line_8 $$ for (int i = 0; i < rounds; ++i) -->Line_18 $$ logger.info("index round [[ CD ]
Line_2 $$ public void testMergesHappening() throws InterruptedException, IOException, ExecutionException -->Line_29 $$ logger.info("numshards [ CD ]
Line_2 $$ public void testMergesHappening() throws InterruptedException, IOException, ExecutionException -->Line_7 $$ logger.info("Starting rounds [[ CD ]
Line_2 $$ public void testMergesHappening() throws InterruptedException, IOException, ExecutionException -->Line_30 $$ long count = stats.getPrimaries().getSegments().getCount()[ CD ]
Line_22 $$ IndicesStatsResponse stats = client().admin().indices().prepareStats().setSegments(true).setMerge(true).get()-->Line_24 $$ long current = stats.getPrimaries().getMerge().getCurrent()[ FD ]
Line_8 $$ for (int i = 0; i < rounds; ++i) -->Line_17 $$ IndicesStatsResponse stats = client().admin().indices().prepareStats("test").setSegments(true).setMerge(true).get()[ CD ]
Line_22 $$ IndicesStatsResponse stats = client().admin().indices().prepareStats().setSegments(true).setMerge(true).get()-->Line_23 $$ logger.info("numshards [ FD ]
Line_22 $$ IndicesStatsResponse stats = client().admin().indices().prepareStats().setSegments(true).setMerge(true).get()-->Line_30 $$ long count = stats.getPrimaries().getSegments().getCount()[ FD ]
Line_22 $$ IndicesStatsResponse stats = client().admin().indices().prepareStats().setSegments(true).setMerge(true).get()-->Line_29 $$ logger.info("numshards [ FD ]
Line_6 $$ final int rounds = scaledRandomIntBetween(50, 300)-->Line_7 $$ logger.info("Starting rounds [[ FD ]
Line_6 $$ final int rounds = scaledRandomIntBetween(50, 300)-->Line_8 $$ for (int i = 0; i < rounds; ++i) [ FD ]
Line_11 $$ for (int j = 0; j < numDocs; ++j) -->Line_12 $$ request.add(Requests.indexRequest("test").type("type1").id(Long.toString(id++)).source(jsonBuilder().startObject().field("l", randomLong()).endObject()))[ CD ]
Line_2 $$ public void testMergesHappening() throws InterruptedException, IOException, ExecutionException -->Line_8 $$ for (int i = 0; i < rounds; ++i) [ CD ]
Line_22 $$ IndicesStatsResponse stats = client().admin().indices().prepareStats().setSegments(true).setMerge(true).get()-->Line_25 $$ long count = stats.getPrimaries().getSegments().getCount()[ FD ]
Line_8 $$ for (int i = 0; i < rounds; ++i) -->Line_11 $$ for (int j = 0; j < numDocs; ++j) [ CD ]
Line_8 $$ for (int i = 0; i < rounds; ++i) -->Line_18 $$ logger.info("index round [[ FD ]
Line_10 $$ BulkRequestBuilder request = client().prepareBulk()-->Line_14 $$ BulkResponse response = request.execute().actionGet()[ FD ]
Line_5 $$ long id = 0-->Line_12 $$ request.add(Requests.indexRequest("test").type("type1").id(Long.toString(id++)).source(jsonBuilder().startObject().field("l", randomLong()).endObject()))[ FD ]
