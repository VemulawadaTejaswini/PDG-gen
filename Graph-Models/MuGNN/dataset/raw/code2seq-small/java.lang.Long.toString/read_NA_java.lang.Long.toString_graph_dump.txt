Line_12 $$ Long longValue = Long.valueOf(55819182821331L)-->Line_14 $$ request.setContent(longValue.toString().getBytes("UTF-8"))[ FD ]
Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_9 $$ request.setCharacterEncoding("UTF-16")[ FD ]
Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_4 $$ request.setContentType(MediaType.TEXT_PLAIN_VALUE)[ FD ]
Line_8 $$ Float floatValue = Float.valueOf(123)-->Line_10 $$ request.setContent(floatValue.toString().getBytes("UTF-16"))[ FD ]
Line_2 $$ public void read() throws IOException -->Line_14 $$ request.setContent(longValue.toString().getBytes("UTF-8"))[ CD ]
Line_2 $$ public void read() throws IOException -->Line_10 $$ request.setContent(floatValue.toString().getBytes("UTF-16"))[ CD ]
Line_2 $$ public void read() throws IOException -->Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest()[ CD ]
Line_8 $$ Float floatValue = Float.valueOf(123)-->Line_11 $$ assertEquals(floatValue, this.converter.read(Float.class, new ServletServerHttpRequest(request)))[ FD ]
Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_10 $$ request.setContent(floatValue.toString().getBytes("UTF-16"))[ FD ]
Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_13 $$ request.setCharacterEncoding("UTF-8")[ FD ]
Line_5 $$ Short shortValue = Short.valueOf((short) 781)-->Line_7 $$ assertEquals(shortValue, this.converter.read(Short.class, new ServletServerHttpRequest(request)))[ FD ]
Line_2 $$ public void read() throws IOException -->Line_11 $$ assertEquals(floatValue, this.converter.read(Float.class, new ServletServerHttpRequest(request)))[ CD ]
Line_2 $$ public void read() throws IOException -->Line_8 $$ Float floatValue = Float.valueOf(123)[ CD ]
Line_2 $$ public void read() throws IOException -->Line_15 $$ assertEquals(longValue, this.converter.read(Long.class, new ServletServerHttpRequest(request)))[ CD ]
Line_2 $$ public void read() throws IOException -->Line_4 $$ request.setContentType(MediaType.TEXT_PLAIN_VALUE)[ CD ]
Line_2 $$ public void read() throws IOException -->Line_13 $$ request.setCharacterEncoding("UTF-8")[ CD ]
Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_14 $$ request.setContent(longValue.toString().getBytes("UTF-8"))[ FD ]
Line_12 $$ Long longValue = Long.valueOf(55819182821331L)-->Line_15 $$ assertEquals(longValue, this.converter.read(Long.class, new ServletServerHttpRequest(request)))[ FD ]
Line_2 $$ public void read() throws IOException -->Line_9 $$ request.setCharacterEncoding("UTF-16")[ CD ]
Line_2 $$ public void read() throws IOException -->Line_12 $$ Long longValue = Long.valueOf(55819182821331L)[ CD ]
Line_2 $$ public void read() throws IOException -->Line_5 $$ Short shortValue = Short.valueOf((short) 781)[ CD ]
Line_2 $$ public void read() throws IOException -->Line_7 $$ assertEquals(shortValue, this.converter.read(Short.class, new ServletServerHttpRequest(request)))[ CD ]
Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_6 $$ request.setContent(shortValue.toString().getBytes(StringHttpMessageConverter.DEFAULT_CHARSET))[ FD ]
Line_5 $$ Short shortValue = Short.valueOf((short) 781)-->Line_6 $$ request.setContent(shortValue.toString().getBytes(StringHttpMessageConverter.DEFAULT_CHARSET))[ FD ]
Line_2 $$ public void read() throws IOException -->Line_6 $$ request.setContent(shortValue.toString().getBytes(StringHttpMessageConverter.DEFAULT_CHARSET))[ CD ]
