Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_15 $$ internalCluster().startNodesAsync(2, settings).get()[ CD ]
Line_3 $$ Settings settings = Settings.builder().put(ZenDiscovery.SETTING_JOIN_TIMEOUT, "30s").build()-->Line_18 $$ internalCluster().startNodesAsync(2, settings).get()[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_12 $$ client().prepareIndex("test", "type1", Long.toString(i)).setSource(MapBuilder.<String, Object>newMapBuilder().put("test", "value" + i).map()).execute().actionGet()[ FD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_3 $$ Settings settings = Settings.builder().put(ZenDiscovery.SETTING_JOIN_TIMEOUT, "30s").build()[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_32 $$ refresh()[ CD ]
Line_33 $$ for (int i = 0; i < 10; i++) -->Line_43 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_22 $$ refresh()[ CD ]
Line_43 $$ for (int i = 0; i < 10; i++) -->Line_44 $$ assertHitCount(client().prepareSearch().setSize(0).setQuery(matchAllQuery()).get(), 2000l)[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_8 $$ client().prepareIndex("test", "type1", Long.toString(i)).setSource(MapBuilder.<String, Object>newMapBuilder().put("test", "value" + i).map()).execute().actionGet()[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_33 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_6 $$ final String healthTimeout = "1m"-->Line_16 $$ assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("3"))[ FD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_5 $$ createIndex("test")[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_36 $$ internalCluster().stopRandomDataNode()[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_20 $$ assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("5"))[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_43 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_23 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_6 $$ final String healthTimeout = "1m"-->Line_37 $$ assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("2"))[ FD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_10 $$ flush()[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_43 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_11 $$ for (int i = 1000; i < 2000; i++) -->Line_23 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_33 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_23 $$ for (int i = 0; i < 10; i++) -->Line_33 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_33 $$ for (int i = 0; i < 10; i++) -->Line_34 $$ assertHitCount(client().prepareSearch().setSize(0).setQuery(matchAllQuery()).get(), 2000l)[ CD ]
Line_11 $$ for (int i = 1000; i < 2000; i++) -->Line_12 $$ client().prepareIndex("test", "type1", Long.toString(i)).setSource(MapBuilder.<String, Object>newMapBuilder().put("test", "value" + i).map()).execute().actionGet()[ FD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_29 $$ internalCluster().stopRandomDataNode()[ CD ]
Line_11 $$ for (int i = 1000; i < 2000; i++) -->Line_12 $$ client().prepareIndex("test", "type1", Long.toString(i)).setSource(MapBuilder.<String, Object>newMapBuilder().put("test", "value" + i).map()).execute().actionGet()[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_37 $$ assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("2"))[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_30 $$ assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("3"))[ CD ]
Line_6 $$ final String healthTimeout = "1m"-->Line_20 $$ assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("5"))[ FD ]
Line_6 $$ final String healthTimeout = "1m"-->Line_30 $$ assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("3"))[ FD ]
Line_23 $$ for (int i = 0; i < 10; i++) -->Line_24 $$ assertHitCount(client().prepareSearch().setSize(0).setQuery(matchAllQuery()).get(), 2000l)[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_6 $$ final String healthTimeout = "1m"[ CD ]
Line_6 $$ final String healthTimeout = "1m"-->Line_40 $$ assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForYellowStatus().setWaitForRelocatingShards(0).setWaitForNodes("1"))[ FD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_39 $$ internalCluster().stopRandomDataNode()[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_18 $$ internalCluster().startNodesAsync(2, settings).get()[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_42 $$ refresh()[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_19 $$ setMinimumMasterNodes(3)[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_23 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_4 $$ internalCluster().startNode(settings)[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_8 $$ client().prepareIndex("test", "type1", Long.toString(i)).setSource(MapBuilder.<String, Object>newMapBuilder().put("test", "value" + i).map()).execute().actionGet()[ FD ]
Line_3 $$ Settings settings = Settings.builder().put(ZenDiscovery.SETTING_JOIN_TIMEOUT, "30s").build()-->Line_15 $$ internalCluster().startNodesAsync(2, settings).get()[ FD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_38 $$ setMinimumMasterNodes(1)[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_28 $$ setMinimumMasterNodes(2)[ CD ]
Line_11 $$ for (int i = 1000; i < 2000; i++) -->Line_33 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_6 $$ final String healthTimeout = "1m"-->Line_27 $$ assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("4"))[ FD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_27 $$ assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("4"))[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_16 $$ assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("3"))[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_7 $$ for (int i = 0; i < 1000; i++) [ CD ]
Line_23 $$ for (int i = 0; i < 10; i++) -->Line_43 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_26 $$ internalCluster().stopRandomDataNode()[ CD ]
Line_3 $$ Settings settings = Settings.builder().put(ZenDiscovery.SETTING_JOIN_TIMEOUT, "30s").build()-->Line_4 $$ internalCluster().startNode(settings)[ FD ]
Line_11 $$ for (int i = 1000; i < 2000; i++) -->Line_43 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_40 $$ assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForYellowStatus().setWaitForRelocatingShards(0).setWaitForNodes("1"))[ CD ]
Line_2 $$ public void testFullRollingRestart() throws Exception -->Line_11 $$ for (int i = 1000; i < 2000; i++) [ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_11 $$ for (int i = 1000; i < 2000; i++) [ FD ]
