Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_21 $$ int breaks = 0[ CD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_19 $$ assertFailures(searchRequest, RestStatus.INTERNAL_SERVER_ERROR, containsString("Data too large, data for [test] would be larger than limit of [100/100b]"))[ CD ]
Line_3 $$ if (noopBreakerUsed()) -->Line_5 $$ return[ CD ]
Line_21 $$ int breaks = 0-->Line_26 $$ assertThat(breaks, greaterThanOrEqualTo(1))[ FD ]
Line_9 $$ int docCount = scaledRandomIntBetween(300, 1000)-->Line_11 $$ for (long id = 0; id < docCount; id++) [ FD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_3 $$ if (noopBreakerUsed()) [ CD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_20 $$ NodesStatsResponse stats = client.admin().cluster().prepareNodesStats().setBreaker(true).get()[ CD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_18 $$ SearchRequestBuilder searchRequest = client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC)[ CD ]
Line_11 $$ for (long id = 0; id < docCount; id++) -->Line_12 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", "value" + id))[ CD ]
Line_8 $$ final Client client = client()-->Line_18 $$ SearchRequestBuilder searchRequest = client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC)[ FD ]
Line_11 $$ for (long id = 0; id < docCount; id++) -->Line_12 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", "value" + id))[ FD ]
Line_20 $$ NodesStatsResponse stats = client.admin().cluster().prepareNodesStats().setBreaker(true).get()-->Line_22 $$ for (NodeStats stat : stats.getNodes()) [ FD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_14 $$ indexRandom(true, false, true, reqs)[ CD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_8 $$ final Client client = client()[ CD ]
Line_8 $$ final Client client = client()-->Line_12 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", "value" + id))[ FD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_11 $$ for (long id = 0; id < docCount; id++) [ CD ]
Line_18 $$ SearchRequestBuilder searchRequest = client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC)-->Line_19 $$ assertFailures(searchRequest, RestStatus.INTERNAL_SERVER_ERROR, containsString("Data too large, data for [test] would be larger than limit of [100/100b]"))[ FD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_17 $$ assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(settings))[ CD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_7 $$ assertAcked(prepareCreate("cb-test", 1, settingsBuilder().put(SETTING_NUMBER_OF_REPLICAS, between(0, 1))))[ CD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_9 $$ int docCount = scaledRandomIntBetween(300, 1000)[ CD ]
Line_10 $$ List<IndexRequestBuilder> reqs = new ArrayList()-->Line_12 $$ reqs.add(client.prepareIndex("cb-test", "type", Long.toString(id)).setSource("test", "value" + id))[ FD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_16 $$ Settings settings = settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "100b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(), 1.05).build()[ CD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_26 $$ assertThat(breaks, greaterThanOrEqualTo(1))[ CD ]
Line_8 $$ final Client client = client()-->Line_17 $$ assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(settings))[ FD ]
Line_24 $$ breaks += breakerStats.getTrippedCount()-->Line_26 $$ assertThat(breaks, greaterThanOrEqualTo(1))[ FD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_15 $$ clearFieldData()[ CD ]
Line_22 $$ for (NodeStats stat : stats.getNodes()) -->Line_23 $$ CircuitBreakerStats breakerStats = stat.getBreaker().getStats(CircuitBreaker.FIELDDATA)[ FD ]
Line_2 $$ public void testMemoryBreaker() throws Exception -->Line_10 $$ List<IndexRequestBuilder> reqs = new ArrayList()[ CD ]
Line_21 $$ int breaks = 0-->Line_24 $$ breaks += breakerStats.getTrippedCount()[ FD ]
Line_23 $$ CircuitBreakerStats breakerStats = stat.getBreaker().getStats(CircuitBreaker.FIELDDATA)-->Line_24 $$ breaks += breakerStats.getTrippedCount()[ FD ]
Line_10 $$ List<IndexRequestBuilder> reqs = new ArrayList()-->Line_14 $$ indexRandom(true, false, true, reqs)[ FD ]
Line_8 $$ final Client client = client()-->Line_20 $$ NodesStatsResponse stats = client.admin().cluster().prepareNodesStats().setBreaker(true).get()[ FD ]
Line_16 $$ Settings settings = settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "100b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(), 1.05).build()-->Line_17 $$ assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(settings))[ FD ]
