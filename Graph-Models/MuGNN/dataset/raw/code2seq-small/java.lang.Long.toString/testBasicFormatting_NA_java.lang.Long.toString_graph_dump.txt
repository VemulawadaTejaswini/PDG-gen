Line_14 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_23 $$ checkValue(providers, row6, nowString)[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_18 $$ checkValue(providers, row1, now)[ CD ]
Line_4 $$ String nowString = FORMATTER.print(now)-->Line_19 $$ checkValue(providers, row2, nowString)[ FD ]
Line_4 $$ String nowString = FORMATTER.print(now)-->Line_5 $$ byte[] json = format("[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_21 $$ checkValue(providers, row4, now)[ CD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_5 $$ byte[] json = format("[ CD ]
Line_7 $$ DecoderTestColumnHandle row1 = new DecoderTestColumnHandle("", 0, "row1", BigintType.BIGINT, "a_number", DEFAULT_FIELD_DECODER_NAME, null, false, false, false)-->Line_13 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5, row6)[ FD ]
Line_3 $$ long now = (System.currentTimeMillis() / 1000) * 1000-->Line_20 $$ checkValue(providers, row3, now)[ FD ]
Line_10 $$ DecoderTestColumnHandle row4 = new DecoderTestColumnHandle("", 3, "row4", BigintType.BIGINT, "a_string", RFC2822JsonFieldDecoder.NAME, null, false, false, false)-->Line_13 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5, row6)[ FD ]
Line_12 $$ DecoderTestColumnHandle row6 = new DecoderTestColumnHandle("", 5, "row6", VarcharType.VARCHAR, "a_string", RFC2822JsonFieldDecoder.NAME, null, false, false, false)-->Line_13 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5, row6)[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_4 $$ String nowString = FORMATTER.print(now)[ CD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_16 $$ assertFalse(corrupt)[ CD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_8 $$ DecoderTestColumnHandle row2 = new DecoderTestColumnHandle("", 1, "row2", VarcharType.VARCHAR, "a_string", DEFAULT_FIELD_DECODER_NAME, null, false, false, false)[ CD ]
Line_14 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_19 $$ checkValue(providers, row2, nowString)[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_3 $$ long now = (System.currentTimeMillis() / 1000) * 1000[ CD ]
Line_14 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_21 $$ checkValue(providers, row4, now)[ FD ]
Line_3 $$ long now = (System.currentTimeMillis() / 1000) * 1000-->Line_18 $$ checkValue(providers, row1, now)[ FD ]
Line_11 $$ DecoderTestColumnHandle row5 = new DecoderTestColumnHandle("", 4, "row5", VarcharType.VARCHAR, "a_number", RFC2822JsonFieldDecoder.NAME, null, false, false, false)-->Line_13 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5, row6)[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_15 $$ boolean corrupt = rowDecoder.decodeRow(json, null, providers, columns, map(columns))[ CD ]
Line_13 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5, row6)-->Line_17 $$ assertEquals(providers.size(), columns.size())[ FD ]
Line_12 $$ DecoderTestColumnHandle row6 = new DecoderTestColumnHandle("", 5, "row6", VarcharType.VARCHAR, "a_string", RFC2822JsonFieldDecoder.NAME, null, false, false, false)-->Line_23 $$ checkValue(providers, row6, nowString)[ FD ]
Line_3 $$ long now = (System.currentTimeMillis() / 1000) * 1000-->Line_4 $$ String nowString = FORMATTER.print(now)[ FD ]
Line_14 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_18 $$ checkValue(providers, row1, now)[ FD ]
Line_14 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_15 $$ boolean corrupt = rowDecoder.decodeRow(json, null, providers, columns, map(columns))[ FD ]
Line_14 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_20 $$ checkValue(providers, row3, now)[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_14 $$ Set<FieldValueProvider> providers = new HashSet()[ CD ]
Line_3 $$ long now = (System.currentTimeMillis() / 1000) * 1000-->Line_22 $$ checkValue(providers, row5, Long.toString(now))[ FD ]
Line_9 $$ DecoderTestColumnHandle row3 = new DecoderTestColumnHandle("", 2, "row3", BigintType.BIGINT, "a_number", RFC2822JsonFieldDecoder.NAME, null, false, false, false)-->Line_13 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5, row6)[ FD ]
Line_3 $$ long now = (System.currentTimeMillis() / 1000) * 1000-->Line_5 $$ byte[] json = format("[ FD ]
Line_6 $$ JsonRowDecoder rowDecoder = new JsonRowDecoder(PROVIDER.get())-->Line_15 $$ boolean corrupt = rowDecoder.decodeRow(json, null, providers, columns, map(columns))[ FD ]
Line_8 $$ DecoderTestColumnHandle row2 = new DecoderTestColumnHandle("", 1, "row2", VarcharType.VARCHAR, "a_string", DEFAULT_FIELD_DECODER_NAME, null, false, false, false)-->Line_13 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5, row6)[ FD ]
Line_7 $$ DecoderTestColumnHandle row1 = new DecoderTestColumnHandle("", 0, "row1", BigintType.BIGINT, "a_number", DEFAULT_FIELD_DECODER_NAME, null, false, false, false)-->Line_18 $$ checkValue(providers, row1, now)[ FD ]
Line_14 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_17 $$ assertEquals(providers.size(), columns.size())[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_13 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5, row6)[ CD ]
Line_5 $$ byte[] json = format("-->Line_15 $$ boolean corrupt = rowDecoder.decodeRow(json, null, providers, columns, map(columns))[ FD ]
Line_14 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_22 $$ checkValue(providers, row5, Long.toString(now))[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_17 $$ assertEquals(providers.size(), columns.size())[ CD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_7 $$ DecoderTestColumnHandle row1 = new DecoderTestColumnHandle("", 0, "row1", BigintType.BIGINT, "a_number", DEFAULT_FIELD_DECODER_NAME, null, false, false, false)[ CD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_9 $$ DecoderTestColumnHandle row3 = new DecoderTestColumnHandle("", 2, "row3", BigintType.BIGINT, "a_number", RFC2822JsonFieldDecoder.NAME, null, false, false, false)[ CD ]
Line_10 $$ DecoderTestColumnHandle row4 = new DecoderTestColumnHandle("", 3, "row4", BigintType.BIGINT, "a_string", RFC2822JsonFieldDecoder.NAME, null, false, false, false)-->Line_21 $$ checkValue(providers, row4, now)[ FD ]
Line_11 $$ DecoderTestColumnHandle row5 = new DecoderTestColumnHandle("", 4, "row5", VarcharType.VARCHAR, "a_number", RFC2822JsonFieldDecoder.NAME, null, false, false, false)-->Line_22 $$ checkValue(providers, row5, Long.toString(now))[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_19 $$ checkValue(providers, row2, nowString)[ CD ]
Line_15 $$ boolean corrupt = rowDecoder.decodeRow(json, null, providers, columns, map(columns))-->Line_16 $$ assertFalse(corrupt)[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_10 $$ DecoderTestColumnHandle row4 = new DecoderTestColumnHandle("", 3, "row4", BigintType.BIGINT, "a_string", RFC2822JsonFieldDecoder.NAME, null, false, false, false)[ CD ]
Line_4 $$ String nowString = FORMATTER.print(now)-->Line_23 $$ checkValue(providers, row6, nowString)[ FD ]
Line_8 $$ DecoderTestColumnHandle row2 = new DecoderTestColumnHandle("", 1, "row2", VarcharType.VARCHAR, "a_string", DEFAULT_FIELD_DECODER_NAME, null, false, false, false)-->Line_19 $$ checkValue(providers, row2, nowString)[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_12 $$ DecoderTestColumnHandle row6 = new DecoderTestColumnHandle("", 5, "row6", VarcharType.VARCHAR, "a_string", RFC2822JsonFieldDecoder.NAME, null, false, false, false)[ CD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_11 $$ DecoderTestColumnHandle row5 = new DecoderTestColumnHandle("", 4, "row5", VarcharType.VARCHAR, "a_number", RFC2822JsonFieldDecoder.NAME, null, false, false, false)[ CD ]
Line_13 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5, row6)-->Line_15 $$ boolean corrupt = rowDecoder.decodeRow(json, null, providers, columns, map(columns))[ FD ]
Line_3 $$ long now = (System.currentTimeMillis() / 1000) * 1000-->Line_21 $$ checkValue(providers, row4, now)[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_22 $$ checkValue(providers, row5, Long.toString(now))[ CD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_20 $$ checkValue(providers, row3, now)[ CD ]
Line_9 $$ DecoderTestColumnHandle row3 = new DecoderTestColumnHandle("", 2, "row3", BigintType.BIGINT, "a_number", RFC2822JsonFieldDecoder.NAME, null, false, false, false)-->Line_20 $$ checkValue(providers, row3, now)[ FD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_23 $$ checkValue(providers, row6, nowString)[ CD ]
Line_2 $$ public void testBasicFormatting() throws Exception -->Line_6 $$ JsonRowDecoder rowDecoder = new JsonRowDecoder(PROVIDER.get())[ CD ]
