Line_8 $$ if (caretOffset > 0) -->Line_9 $$ caret.setSelection(caretOffset - 1, caretOffset)[ CD ]
Line_18 $$ if (!isViewer() && doc.isWritable()) -->Line_19 $$ runUndoTransparent(new Runnable() [ CD ]
Line_22 $$ ProperTextRange range = composedTextRange.intersection(new TextRange(0, docLength))-->Line_24 $$ doc.deleteString(range.getStartOffset(), range.getEndOffset())[ FD ]
Line_3 $$ if (myNeedToSelectPreviousChar && SystemInfo.isMac && (Registry.is("ide.mac.pressAndHold.brute.workaround") || Registry.is("ide.mac.pressAndHold.workaround") && (e.getCommittedCharacterCount() > 0 || e.getCaret() == null))) -->Line_5 $$ getCaretModel().runForEachCaret(new CaretAction() [ CD ]
Line_34 $$ for (char c = text.current(); commitCount > 0; c = text.next(), commitCount--) -->Line_36 $$ processKeyTyped(c)[ FD ]
Line_7 $$ int caretOffset = caret.getOffset()-->Line_8 $$ if (caretOffset > 0) [ FD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_3 $$ if (myNeedToSelectPreviousChar && SystemInfo.isMac && (Registry.is("ide.mac.pressAndHold.brute.workaround") || Registry.is("ide.mac.pressAndHold.workaround") && (e.getCommittedCharacterCount() > 0 || e.getCaret() == null))) [ FD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_15 $$ AttributedCharacterIterator text = e.getText()[ FD ]
Line_7 $$ int caretOffset = caret.getOffset()-->Line_9 $$ caret.setSelection(caretOffset - 1, caretOffset)[ FD ]
Line_5 $$ getCaretModel().runForEachCaret(new CaretAction() -->Line_9 $$ caret.setSelection(caretOffset - 1, caretOffset)[ FD ]
Line_31 $$ if (text != null) -->Line_32 $$ text.first()[ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_14 $$ int commitCount = e.getCommittedCharacterCount()[ FD ]
Line_5 $$ getCaretModel().runForEachCaret(new CaretAction() -->Line_7 $$ int caretOffset = caret.getOffset()[ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_3 $$ if (myNeedToSelectPreviousChar && SystemInfo.isMac && (Registry.is("ide.mac.pressAndHold.brute.workaround") || Registry.is("ide.mac.pressAndHold.workaround") && (e.getCommittedCharacterCount() > 0 || e.getCaret() == null))) [ CD ]
Line_5 $$ getCaretModel().runForEachCaret(new CaretAction() -->Line_7 $$ int caretOffset = caret.getOffset()[ FD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_15 $$ AttributedCharacterIterator text = e.getText()[ CD ]
Line_19 $$ runUndoTransparent(new Runnable() -->Line_21 $$ int docLength = doc.getTextLength()[ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_14 $$ int commitCount = e.getCommittedCharacterCount()[ CD ]
Line_19 $$ runUndoTransparent(new Runnable() -->Line_22 $$ ProperTextRange range = composedTextRange.intersection(new TextRange(0, docLength))[ CD ]
Line_5 $$ getCaretModel().runForEachCaret(new CaretAction() -->Line_8 $$ if (caretOffset > 0) [ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_16 $$ final Document doc = getDocument()[ CD ]
Line_23 $$ if (range != null) -->Line_24 $$ doc.deleteString(range.getStartOffset(), range.getEndOffset())[ CD ]
Line_22 $$ ProperTextRange range = composedTextRange.intersection(new TextRange(0, docLength))-->Line_23 $$ if (range != null) [ FD ]
Line_44 $$ runUndoTransparent(new Runnable() -->Line_46 $$ EditorModificationUtil.insertStringAtCaret(EditorImpl.this, composedText, false, false)[ CD ]
Line_42 $$ if (composedTextIndex < text.getEndIndex()) -->Line_44 $$ runUndoTransparent(new Runnable() [ CD ]
Line_31 $$ if (text != null) -->Line_33 $$ if (commitCount > 0) [ CD ]
Line_33 $$ if (commitCount > 0) -->Line_34 $$ for (char c = text.current(); commitCount > 0; c = text.next(), commitCount--) [ CD ]
Line_34 $$ for (char c = text.current(); commitCount > 0; c = text.next(), commitCount--) -->Line_35 $$ if (c >= 0x20 && c != 0x7F) [ CD ]
Line_40 $$ if (!isViewer() && doc.isWritable()) -->Line_41 $$ int composedTextIndex = text.getIndex()[ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_31 $$ if (text != null) [ CD ]
Line_17 $$ if (composedText != null) -->Line_18 $$ if (!isViewer() && doc.isWritable()) [ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_17 $$ if (composedText != null) [ CD ]
Line_31 $$ if (text != null) -->Line_40 $$ if (!isViewer() && doc.isWritable()) [ CD ]
Line_19 $$ runUndoTransparent(new Runnable() -->Line_23 $$ if (range != null) [ CD ]
Line_40 $$ if (!isViewer() && doc.isWritable()) -->Line_42 $$ if (composedTextIndex < text.getEndIndex()) [ CD ]
Line_35 $$ if (c >= 0x20 && c != 0x7F) -->Line_36 $$ processKeyTyped(c)[ CD ]
Line_42 $$ if (composedTextIndex < text.getEndIndex()) -->Line_49 $$ composedTextRange = ProperTextRange.from(getCaretModel().getOffset(), composedText.length())[ CD ]
Line_42 $$ if (composedTextIndex < text.getEndIndex()) -->Line_43 $$ createComposedString(composedTextIndex, text)[ CD ]
