Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_21 $$ assertThat(((ThreadPoolExecutor) oldExecutor).isTerminating(), equalTo(true))[ CD ]
Line_41 $$ found = true-->Line_45 $$ assertThat(found, equalTo(true))[ FD ]
Line_8 $$ final CyclicBarrier barrier = new CyclicBarrier(2)-->Line_12 $$ barrier.await()[ FD ]
Line_8 $$ final CyclicBarrier barrier = new CyclicBarrier(2)-->Line_23 $$ barrier.await(10, TimeUnit.SECONDS)[ FD ]
Line_8 $$ final CyclicBarrier barrier = new CyclicBarrier(2)-->Line_33 $$ barrier.await(10, TimeUnit.SECONDS)[ FD ]
Line_37 $$ boolean found = false-->Line_45 $$ assertThat(found, equalTo(true))[ FD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_32 $$ client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder().put("threadpool.search.queue_size", 500)).execute().actionGet()[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_7 $$ assertThat(((ThreadPoolExecutor) threadPool.executor(Names.SEARCH)).getQueue().remainingCapacity(), equalTo(2000))[ CD ]
Line_8 $$ final CyclicBarrier barrier = new CyclicBarrier(2)-->Line_26 $$ barrier.await()[ FD ]
Line_4 $$ ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class)-->Line_7 $$ assertThat(((ThreadPoolExecutor) threadPool.executor(Names.SEARCH)).getQueue().remainingCapacity(), equalTo(2000))[ FD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_4 $$ ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class)[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_34 $$ NodesInfoResponse nodesInfoResponse = client().admin().cluster().prepareNodesInfo().all().execute().actionGet()[ CD ]
Line_4 $$ ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class)-->Line_19 $$ assertThat(threadPool.executor(Names.SEARCH), not(sameInstance(oldExecutor)))[ FD ]
Line_4 $$ ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class)-->Line_5 $$ assertThat(((ThreadPoolExecutor) threadPool.executor(Names.SEARCH)).getQueue().remainingCapacity(), equalTo(1000))[ FD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_23 $$ barrier.await(10, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_20 $$ assertThat(((ThreadPoolExecutor) oldExecutor).isShutdown(), equalTo(true))[ CD ]
Line_35 $$ for (int i = 0; i < 2; i++) -->Line_37 $$ boolean found = false[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_3 $$ internalCluster().startNodesAsync(2).get()[ CD ]
Line_4 $$ ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class)-->Line_10 $$ threadPool.executor(Names.SEARCH).execute(() -> [ FD ]
Line_4 $$ ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class)-->Line_24 $$ threadPool.executor(Names.SEARCH).execute(() -> [ FD ]
Line_39 $$ if (info.getName().equals(Names.SEARCH)) -->Line_41 $$ found = true[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_8 $$ final CyclicBarrier barrier = new CyclicBarrier(2)[ CD ]
Line_35 $$ for (int i = 0; i < 2; i++) -->Line_36 $$ NodeInfo nodeInfo = nodesInfoResponse.getNodes()[i][ CD ]
Line_34 $$ NodesInfoResponse nodesInfoResponse = client().admin().cluster().prepareNodesInfo().all().execute().actionGet()-->Line_36 $$ NodeInfo nodeInfo = nodesInfoResponse.getNodes()[i][ FD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_24 $$ threadPool.executor(Names.SEARCH).execute(() -> [ CD ]
Line_35 $$ for (int i = 0; i < 2; i++) -->Line_45 $$ assertThat(found, equalTo(true))[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_9 $$ Executor oldExecutor = threadPool.executor(Names.SEARCH)[ CD ]
Line_9 $$ Executor oldExecutor = threadPool.executor(Names.SEARCH)-->Line_19 $$ assertThat(threadPool.executor(Names.SEARCH), not(sameInstance(oldExecutor)))[ FD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_6 $$ client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder().put("threadpool.search.queue_size", 2000).build()).execute().actionGet()[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_35 $$ for (int i = 0; i < 2; i++) [ CD ]
Line_38 $$ for (ThreadPool.Info info : nodeInfo.getThreadPool()) -->Line_40 $$ assertEquals(info.getThreadPoolType(), ThreadPool.ThreadPoolType.FIXED)[ FD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_5 $$ assertThat(((ThreadPoolExecutor) threadPool.executor(Names.SEARCH)).getQueue().remainingCapacity(), equalTo(1000))[ CD ]
Line_4 $$ ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class)-->Line_9 $$ Executor oldExecutor = threadPool.executor(Names.SEARCH)[ FD ]
Line_38 $$ for (ThreadPool.Info info : nodeInfo.getThreadPool()) -->Line_39 $$ if (info.getName().equals(Names.SEARCH)) [ FD ]
Line_39 $$ if (info.getName().equals(Names.SEARCH)) -->Line_40 $$ assertEquals(info.getThreadPoolType(), ThreadPool.ThreadPoolType.FIXED)[ CD ]
Line_37 $$ boolean found = false-->Line_41 $$ found = true[ FD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_33 $$ barrier.await(10, TimeUnit.SECONDS)[ CD ]
Line_36 $$ NodeInfo nodeInfo = nodesInfoResponse.getNodes()[i]-->Line_38 $$ for (ThreadPool.Info info : nodeInfo.getThreadPool()) [ FD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_19 $$ assertThat(threadPool.executor(Names.SEARCH), not(sameInstance(oldExecutor)))[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_22 $$ assertThat(((ThreadPoolExecutor) oldExecutor).isTerminated(), equalTo(false))[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_10 $$ threadPool.executor(Names.SEARCH).execute(() -> [ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_18 $$ client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder().put("threadpool.search.queue_size", 1000).build()).execute().actionGet()[ CD ]
