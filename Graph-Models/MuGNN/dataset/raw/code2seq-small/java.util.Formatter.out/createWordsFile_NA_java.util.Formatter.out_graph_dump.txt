Line_2 $$ private static void createWordsFile(Path inpFile, Configuration conf) throws IOException -->Line_7 $$ FSDataOutputStream out = fs.create(inpFile)[ FD ]
Line_13 $$ for (int j = 1; j <= NUMLINES * NUMWORDSPERLINE; j += NUMWORDSPERLINE) -->Line_14 $$ ((StringBuilder) fmt.out()).setLength(0)[ CD ]
Line_7 $$ FSDataOutputStream out = fs.create(inpFile)-->Line_19 $$ out.writeBytes(fmt.toString())[ FD ]
Line_9 $$ int REPLICAS = 5, NUMLINES = 1024, NUMWORDSPERLINE = 4-->Line_13 $$ for (int j = 1; j <= NUMLINES * NUMWORDSPERLINE; j += NUMWORDSPERLINE) [ FD ]
Line_3 $$ final FileSystem fs = inpFile.getFileSystem(conf)-->Line_4 $$ if (fs.exists(inpFile)) [ FD ]
Line_4 $$ if (fs.exists(inpFile)) -->Line_5 $$ return[ CD ]
Line_11 $$ final Formatter fmt = new Formatter(new StringBuilder())-->Line_19 $$ out.writeBytes(fmt.toString())[ FD ]
Line_11 $$ final Formatter fmt = new Formatter(new StringBuilder())-->Line_16 $$ fmt.format("%s%04d ", WORD, j + k)[ FD ]
Line_15 $$ for (int k = 0; k < NUMWORDSPERLINE; ++k) -->Line_16 $$ fmt.format("%s%04d ", WORD, j + k)[ CD ]
Line_2 $$ private static void createWordsFile(Path inpFile, Configuration conf) throws IOException -->Line_3 $$ final FileSystem fs = inpFile.getFileSystem(conf)[ CD ]
Line_9 $$ int REPLICAS = 5, NUMLINES = 1024, NUMWORDSPERLINE = 4-->Line_15 $$ for (int k = 0; k < NUMWORDSPERLINE; ++k) [ FD ]
Line_12 $$ for (int i = 0; i < REPLICAS; i++) -->Line_13 $$ for (int j = 1; j <= NUMLINES * NUMWORDSPERLINE; j += NUMWORDSPERLINE) [ CD ]
Line_13 $$ for (int j = 1; j <= NUMLINES * NUMWORDSPERLINE; j += NUMWORDSPERLINE) -->Line_18 $$ ((StringBuilder) fmt.out()).append("\n")[ CD ]
Line_7 $$ FSDataOutputStream out = fs.create(inpFile)-->Line_23 $$ out.close()[ FD ]
Line_2 $$ private static void createWordsFile(Path inpFile, Configuration conf) throws IOException -->Line_7 $$ FSDataOutputStream out = fs.create(inpFile)[ CD ]
Line_2 $$ private static void createWordsFile(Path inpFile, Configuration conf) throws IOException -->Line_4 $$ if (fs.exists(inpFile)) [ FD ]
Line_13 $$ for (int j = 1; j <= NUMLINES * NUMWORDSPERLINE; j += NUMWORDSPERLINE) -->Line_19 $$ out.writeBytes(fmt.toString())[ CD ]
Line_2 $$ private static void createWordsFile(Path inpFile, Configuration conf) throws IOException -->Line_4 $$ if (fs.exists(inpFile)) [ CD ]
Line_9 $$ int REPLICAS = 5, NUMLINES = 1024, NUMWORDSPERLINE = 4-->Line_12 $$ for (int i = 0; i < REPLICAS; i++) [ FD ]
Line_13 $$ for (int j = 1; j <= NUMLINES * NUMWORDSPERLINE; j += NUMWORDSPERLINE) -->Line_15 $$ for (int k = 0; k < NUMWORDSPERLINE; ++k) [ CD ]
Line_10 $$ final String WORD = "zymurgy"-->Line_16 $$ fmt.format("%s%04d ", WORD, j + k)[ FD ]
Line_3 $$ final FileSystem fs = inpFile.getFileSystem(conf)-->Line_7 $$ FSDataOutputStream out = fs.create(inpFile)[ FD ]
Line_11 $$ final Formatter fmt = new Formatter(new StringBuilder())-->Line_18 $$ ((StringBuilder) fmt.out()).append("\n")[ FD ]
Line_11 $$ final Formatter fmt = new Formatter(new StringBuilder())-->Line_14 $$ ((StringBuilder) fmt.out()).setLength(0)[ FD ]
Line_2 $$ private static void createWordsFile(Path inpFile, Configuration conf) throws IOException -->Line_3 $$ final FileSystem fs = inpFile.getFileSystem(conf)[ FD ]
