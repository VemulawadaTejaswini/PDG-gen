Line_12 $$ vlen = getValLen(++aKey, nMaps) - 128-->Line_16 $$ vlen = getValLen(++bKey, nMaps)[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_31 $$ while (values.hasNext()) [ FD ]
Line_17 $$ vcCheck = bKey-->Line_39 $$ assertEquals("Bad rec group for " + key, vcCheck, vc)[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_32 $$ final Text val = values.next()[ FD ]
Line_6 $$ final int vcCheck, recCheck-->Line_27 $$ recCheck = nMaps[ FD ]
Line_31 $$ while (values.hasNext()) -->Line_32 $$ final Text val = values.next()[ CD ]
Line_12 $$ vlen = getValLen(++aKey, nMaps) - 128-->Line_20 $$ vlen = vcCheck = -1[ FD ]
Line_20 $$ vlen = vcCheck = -1-->Line_26 $$ vlen = 1000[ FD ]
Line_20 $$ vlen = vcCheck = -1-->Line_39 $$ assertEquals("Bad rec group for " + key, vcCheck, vc)[ FD ]
Line_32 $$ final Text val = values.next()-->Line_33 $$ vc += val.getBytes()[0][ FD ]
Line_6 $$ final int vcCheck, recCheck-->Line_28 $$ vcCheck = (nMaps * (nMaps - 1)) >>> 1[ FD ]
Line_4 $$ final int vlen-->Line_20 $$ vlen = vcCheck = -1[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_30 $$ assertEquals(kb, key)[ FD ]
Line_9 $$ recCheck = 1-->Line_27 $$ recCheck = nMaps[ FD ]
Line_8 $$ if (25 == key.getLength()) -->Line_9 $$ recCheck = 1[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_31 $$ while (values.hasNext()) [ CD ]
Line_32 $$ final Text val = values.next()-->Line_34 $$ assertEquals(0, WritableComparator.compareBytes(vb.getBytes(), 1, vlen - 1, val.getBytes(), 1, val.getLength() - 1))[ FD ]
Line_6 $$ final int vcCheck, recCheck-->Line_23 $$ kb.set((char) key.getBytes()[0] + fmt.format(tagfmt, vcCheck).toString())[ FD ]
Line_33 $$ vc += val.getBytes()[0]-->Line_39 $$ assertEquals("Bad rec group for " + key, vcCheck, vc)[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_35 $$ out.collect(key, val)[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_3 $$ int vc = 0[ CD ]
Line_13 $$ vcCheck = aKey-->Line_23 $$ kb.set((char) key.getBytes()[0] + fmt.format(tagfmt, vcCheck).toString())[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_39 $$ assertEquals("Bad rec group for " + key, vcCheck, vc)[ CD ]
Line_13 $$ vcCheck = aKey-->Line_20 $$ vlen = vcCheck = -1[ FD ]
Line_9 $$ recCheck = 1-->Line_38 $$ assertEquals("Bad rec count for " + key, recCheck, nRec - preRec)[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_6 $$ final int vcCheck, recCheck[ CD ]
Line_3 $$ int vc = 0-->Line_33 $$ vc += val.getBytes()[0][ FD ]
Line_8 $$ if (25 == key.getLength()) -->Line_27 $$ recCheck = nMaps[ CD ]
Line_13 $$ vcCheck = aKey-->Line_28 $$ vcCheck = (nMaps * (nMaps - 1)) >>> 1[ FD ]
Line_4 $$ final int vlen-->Line_12 $$ vlen = getValLen(++aKey, nMaps) - 128[ FD ]
Line_6 $$ final int vcCheck, recCheck-->Line_38 $$ assertEquals("Bad rec count for " + key, recCheck, nRec - preRec)[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_5 $$ final int preRec = nRec[ CD ]
Line_31 $$ while (values.hasNext()) -->Line_35 $$ out.collect(key, val)[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_7 $$ ((StringBuilder) fmt.out()).setLength(keylen)[ CD ]
Line_16 $$ vlen = getValLen(++bKey, nMaps)-->Line_20 $$ vlen = vcCheck = -1[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_8 $$ if (25 == key.getLength()) [ CD ]
Line_13 $$ vcCheck = aKey-->Line_39 $$ assertEquals("Bad rec group for " + key, vcCheck, vc)[ FD ]
Line_27 $$ recCheck = nMaps-->Line_38 $$ assertEquals("Bad rec count for " + key, recCheck, nRec - preRec)[ FD ]
Line_6 $$ final int vcCheck, recCheck-->Line_17 $$ vcCheck = bKey[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_30 $$ assertEquals(kb, key)[ CD ]
Line_8 $$ if (25 == key.getLength()) -->Line_23 $$ kb.set((char) key.getBytes()[0] + fmt.format(tagfmt, vcCheck).toString())[ CD ]
Line_4 $$ final int vlen-->Line_26 $$ vlen = 1000[ FD ]
Line_8 $$ if (25 == key.getLength()) -->Line_25 $$ kb.set(fmt.format(tagfmt, ++nKey).toString())[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_10 $$ switch((char) key.getBytes()[0]) [ FD ]
Line_4 $$ final int vlen-->Line_16 $$ vlen = getValLen(++bKey, nMaps)[ FD ]
Line_6 $$ final int vcCheck, recCheck-->Line_13 $$ vcCheck = aKey[ FD ]
Line_8 $$ if (25 == key.getLength()) -->Line_26 $$ vlen = 1000[ CD ]
Line_17 $$ vcCheck = bKey-->Line_23 $$ kb.set((char) key.getBytes()[0] + fmt.format(tagfmt, vcCheck).toString())[ FD ]
Line_20 $$ vlen = vcCheck = -1-->Line_23 $$ kb.set((char) key.getBytes()[0] + fmt.format(tagfmt, vcCheck).toString())[ FD ]
Line_32 $$ final Text val = values.next()-->Line_35 $$ out.collect(key, val)[ FD ]
Line_3 $$ int vc = 0-->Line_39 $$ assertEquals("Bad rec group for " + key, vcCheck, vc)[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_4 $$ final int vlen[ CD ]
Line_16 $$ vlen = getValLen(++bKey, nMaps)-->Line_26 $$ vlen = 1000[ FD ]
Line_31 $$ while (values.hasNext()) -->Line_33 $$ vc += val.getBytes()[0][ CD ]
Line_6 $$ final int vcCheck, recCheck-->Line_20 $$ vlen = vcCheck = -1[ FD ]
Line_13 $$ vcCheck = aKey-->Line_17 $$ vcCheck = bKey[ FD ]
Line_12 $$ vlen = getValLen(++aKey, nMaps) - 128-->Line_26 $$ vlen = 1000[ FD ]
Line_17 $$ vcCheck = bKey-->Line_28 $$ vcCheck = (nMaps * (nMaps - 1)) >>> 1[ FD ]
Line_20 $$ vlen = vcCheck = -1-->Line_28 $$ vcCheck = (nMaps * (nMaps - 1)) >>> 1[ FD ]
Line_8 $$ if (25 == key.getLength()) -->Line_28 $$ vcCheck = (nMaps * (nMaps - 1)) >>> 1[ CD ]
Line_28 $$ vcCheck = (nMaps * (nMaps - 1)) >>> 1-->Line_39 $$ assertEquals("Bad rec group for " + key, vcCheck, vc)[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_23 $$ kb.set((char) key.getBytes()[0] + fmt.format(tagfmt, vcCheck).toString())[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_8 $$ if (25 == key.getLength()) [ FD ]
Line_6 $$ final int vcCheck, recCheck-->Line_9 $$ recCheck = 1[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_38 $$ assertEquals("Bad rec count for " + key, recCheck, nRec - preRec)[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException -->Line_21 $$ fail("Unexpected tag on record: " + ((char) key.getBytes()[24]))[ FD ]
Line_31 $$ while (values.hasNext()) -->Line_34 $$ assertEquals(0, WritableComparator.compareBytes(vb.getBytes(), 1, vlen - 1, val.getBytes(), 1, val.getLength() - 1))[ CD ]
Line_17 $$ vcCheck = bKey-->Line_20 $$ vlen = vcCheck = -1[ FD ]
Line_6 $$ final int vcCheck, recCheck-->Line_39 $$ assertEquals("Bad rec group for " + key, vcCheck, vc)[ FD ]
