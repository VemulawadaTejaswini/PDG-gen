Line_2 $$ public RetryAction shouldRetry(Exception e, int curRetry, int failovers, boolean isIdempotentOrAtMostOnce) throws Exception -->Line_3 $$ final Pair p = searchPair(curRetry)[ CD ]
Line_2 $$ public RetryAction shouldRetry(Exception e, int curRetry, int failovers, boolean isIdempotentOrAtMostOnce) throws Exception -->Line_3 $$ final Pair p = searchPair(curRetry)[ FD ]
Line_2 $$ public RetryAction shouldRetry(Exception e, int curRetry, int failovers, boolean isIdempotentOrAtMostOnce) throws Exception -->Line_4 $$ if (p == null) [ CD ]
Line_2 $$ public RetryAction shouldRetry(Exception e, int curRetry, int failovers, boolean isIdempotentOrAtMostOnce) throws Exception -->Line_8 $$ final long sleepTime = Math.round(p.sleepMillis * ratio)[ CD ]
Line_3 $$ final Pair p = searchPair(curRetry)-->Line_4 $$ if (p == null) [ FD ]
Line_2 $$ public RetryAction shouldRetry(Exception e, int curRetry, int failovers, boolean isIdempotentOrAtMostOnce) throws Exception -->Line_7 $$ final double ratio = RANDOM.get().nextDouble() + 0.5[ CD ]
Line_4 $$ if (p == null) -->Line_5 $$ return RetryAction.FAIL[ CD ]
Line_2 $$ public RetryAction shouldRetry(Exception e, int curRetry, int failovers, boolean isIdempotentOrAtMostOnce) throws Exception -->Line_9 $$ return new RetryAction(RetryAction.RetryDecision.RETRY, sleepTime)[ CD ]
