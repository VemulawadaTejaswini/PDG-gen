Line_8 $$ for (int i = 1; i <= inListCount; i++) -->Line_9 $$ arguments[i] = constant((long) random.nextInt(), BIGINT)[ CD ]
Line_4 $$ RowExpression[] arguments = new RowExpression[1 + inListCount]-->Line_45 $$ RowExpression filter = call(new Signature(IN, SCALAR, StandardTypes.BOOLEAN), BOOLEAN, arguments)[ FD ]
Line_28 $$ RowExpression project = field(0, prestoType)-->Line_46 $$ processor = new ExpressionCompiler(MetadataManager.createTestMetadataManager()).compilePageProcessor(filter, ImmutableList.of(project))[ FD ]
Line_29 $$ PageBuilder pageBuilder = new PageBuilder(ImmutableList.of(prestoType))-->Line_34 $$ BIGINT.writeLong(pageBuilder.getBlockBuilder(0), random.nextInt())[ FD ]
Line_14 $$ for (int i = 1; i <= inListCount; i++) -->Line_15 $$ arguments[i] = constant(random.nextDouble(), DOUBLE)[ CD ]
Line_20 $$ for (int i = 1; i <= inListCount; i++) -->Line_30 $$ for (int i = 0; i < 10_000; i++) [ FD ]
Line_8 $$ for (int i = 1; i <= inListCount; i++) -->Line_20 $$ for (int i = 1; i <= inListCount; i++) [ FD ]
Line_2 $$ public void setup() -->Line_44 $$ inputPage = pageBuilder.build()[ CD ]
Line_2 $$ public void setup() -->Line_27 $$ arguments[0] = field(0, prestoType)[ CD ]
Line_2 $$ public void setup() -->Line_29 $$ PageBuilder pageBuilder = new PageBuilder(ImmutableList.of(prestoType))[ CD ]
Line_2 $$ public void setup() -->Line_30 $$ for (int i = 0; i < 10_000; i++) [ CD ]
Line_14 $$ for (int i = 1; i <= inListCount; i++) -->Line_30 $$ for (int i = 0; i < 10_000; i++) [ FD ]
Line_3 $$ Random random = new Random()-->Line_15 $$ arguments[i] = constant(random.nextDouble(), DOUBLE)[ FD ]
Line_2 $$ public void setup() -->Line_46 $$ processor = new ExpressionCompiler(MetadataManager.createTestMetadataManager()).compilePageProcessor(filter, ImmutableList.of(project))[ CD ]
Line_2 $$ public void setup() -->Line_4 $$ RowExpression[] arguments = new RowExpression[1 + inListCount][ CD ]
Line_20 $$ for (int i = 1; i <= inListCount; i++) -->Line_21 $$ arguments[i] = constant(Slices.utf8Slice(Long.toString(random.nextLong())), VARCHAR)[ CD ]
Line_29 $$ PageBuilder pageBuilder = new PageBuilder(ImmutableList.of(prestoType))-->Line_44 $$ inputPage = pageBuilder.build()[ FD ]
Line_8 $$ for (int i = 1; i <= inListCount; i++) -->Line_30 $$ for (int i = 0; i < 10_000; i++) [ FD ]
Line_2 $$ public void setup() -->Line_3 $$ Random random = new Random()[ CD ]
Line_30 $$ for (int i = 0; i < 10_000; i++) -->Line_31 $$ pageBuilder.declarePosition()[ CD ]
Line_3 $$ Random random = new Random()-->Line_9 $$ arguments[i] = constant((long) random.nextInt(), BIGINT)[ FD ]
Line_3 $$ Random random = new Random()-->Line_21 $$ arguments[i] = constant(Slices.utf8Slice(Long.toString(random.nextLong())), VARCHAR)[ FD ]
Line_3 $$ Random random = new Random()-->Line_34 $$ BIGINT.writeLong(pageBuilder.getBlockBuilder(0), random.nextInt())[ FD ]
Line_29 $$ PageBuilder pageBuilder = new PageBuilder(ImmutableList.of(prestoType))-->Line_37 $$ DOUBLE.writeDouble(pageBuilder.getBlockBuilder(0), random.nextDouble())[ FD ]
Line_3 $$ Random random = new Random()-->Line_40 $$ VARCHAR.writeSlice(pageBuilder.getBlockBuilder(0), Slices.utf8Slice(Long.toString(random.nextLong())))[ FD ]
Line_2 $$ public void setup() -->Line_28 $$ RowExpression project = field(0, prestoType)[ CD ]
Line_2 $$ public void setup() -->Line_45 $$ RowExpression filter = call(new Signature(IN, SCALAR, StandardTypes.BOOLEAN), BOOLEAN, arguments)[ CD ]
Line_29 $$ PageBuilder pageBuilder = new PageBuilder(ImmutableList.of(prestoType))-->Line_40 $$ VARCHAR.writeSlice(pageBuilder.getBlockBuilder(0), Slices.utf8Slice(Long.toString(random.nextLong())))[ FD ]
Line_29 $$ PageBuilder pageBuilder = new PageBuilder(ImmutableList.of(prestoType))-->Line_31 $$ pageBuilder.declarePosition()[ FD ]
Line_3 $$ Random random = new Random()-->Line_37 $$ DOUBLE.writeDouble(pageBuilder.getBlockBuilder(0), random.nextDouble())[ FD ]
Line_8 $$ for (int i = 1; i <= inListCount; i++) -->Line_14 $$ for (int i = 1; i <= inListCount; i++) [ FD ]
Line_14 $$ for (int i = 1; i <= inListCount; i++) -->Line_20 $$ for (int i = 1; i <= inListCount; i++) [ FD ]
Line_45 $$ RowExpression filter = call(new Signature(IN, SCALAR, StandardTypes.BOOLEAN), BOOLEAN, arguments)-->Line_46 $$ processor = new ExpressionCompiler(MetadataManager.createTestMetadataManager()).compilePageProcessor(filter, ImmutableList.of(project))[ FD ]
