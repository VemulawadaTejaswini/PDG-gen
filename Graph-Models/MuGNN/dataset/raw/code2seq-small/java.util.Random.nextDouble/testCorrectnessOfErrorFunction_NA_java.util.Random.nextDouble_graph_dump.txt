Line_31 $$ String approxValue = BlockAssertions.toValues(accumulator.getFinalType(), result).get(0).toString()-->Line_32 $$ double approx = Double.parseDouble(approxValue.split(" ")[0])[ FD ]
Line_2 $$ private void testCorrectnessOfErrorFunction(List<Number> inputList) throws Exception -->Line_39 $$ int lowerBound = binomial.inverseCumulativeProbability(0.01)[ CD ]
Line_2 $$ private void testCorrectnessOfErrorFunction(List<Number> inputList) throws Exception -->Line_3 $$ int inRange = 0[ CD ]
Line_27 $$ page = OperatorAssertion.appendSampleWeight(ImmutableList.of(page), WEIGHT).get(0)-->Line_28 $$ Accumulator accumulator = getFunction().bind(ImmutableList.of(0), Optional.empty(), Optional.of(page.getChannelCount() - 1), getConfidence()).createAccumulator()[ FD ]
Line_26 $$ Page page = new Page(builder.build())-->Line_27 $$ page = OperatorAssertion.appendSampleWeight(ImmutableList.of(page), WEIGHT).get(0)[ FD ]
Line_8 $$ for (int i = 0; i < numberOfRuns; i++) -->Line_26 $$ Page page = new Page(builder.build())[ CD ]
Line_31 $$ String approxValue = BlockAssertions.toValues(accumulator.getFinalType(), result).get(0).toString()-->Line_33 $$ double error = Double.parseDouble(approxValue.split(" ")[2])[ FD ]
Line_8 $$ for (int i = 0; i < numberOfRuns; i++) -->Line_27 $$ page = OperatorAssertion.appendSampleWeight(ImmutableList.of(page), WEIGHT).get(0)[ CD ]
Line_26 $$ Page page = new Page(builder.build())-->Line_28 $$ Accumulator accumulator = getFunction().bind(ImmutableList.of(0), Optional.empty(), Optional.of(page.getChannelCount() - 1), getConfidence()).createAccumulator()[ FD ]
Line_8 $$ for (int i = 0; i < numberOfRuns; i++) -->Line_15 $$ ImmutableList<Number> list = sampledList.build()[ CD ]
Line_27 $$ page = OperatorAssertion.appendSampleWeight(ImmutableList.of(page), WEIGHT).get(0)-->Line_29 $$ accumulator.addInput(page)[ FD ]
Line_8 $$ for (int i = 0; i < numberOfRuns; i++) -->Line_33 $$ double error = Double.parseDouble(approxValue.split(" ")[2])[ CD ]
Line_16 $$ BlockBuilder builder = getType().createBlockBuilder(new BlockBuilderStatus(), list.size())-->Line_26 $$ Page page = new Page(builder.build())[ FD ]
Line_8 $$ for (int i = 0; i < numberOfRuns; i++) -->Line_9 $$ ImmutableList.Builder<Number> sampledList = ImmutableList.builder()[ CD ]
Line_5 $$ double sampleRatio = 1 / (double) WEIGHT-->Line_11 $$ if (rand.nextDouble() < sampleRatio) [ FD ]
Line_8 $$ for (int i = 0; i < numberOfRuns; i++) -->Line_31 $$ String approxValue = BlockAssertions.toValues(accumulator.getFinalType(), result).get(0).toString()[ CD ]
Line_18 $$ if (getType().equals(BIGINT)) -->Line_20 $$ if (getType().equals(DOUBLE)) [ CD ]
Line_2 $$ private void testCorrectnessOfErrorFunction(List<Number> inputList) throws Exception -->Line_40 $$ int upperBound = binomial.inverseCumulativeProbability(0.99)[ CD ]
Line_8 $$ for (int i = 0; i < numberOfRuns; i++) -->Line_34 $$ if (Math.abs(approx - actual) <= error) [ CD ]
Line_8 $$ for (int i = 0; i < numberOfRuns; i++) -->Line_16 $$ BlockBuilder builder = getType().createBlockBuilder(new BlockBuilderStatus(), list.size())[ CD ]
Line_2 $$ private void testCorrectnessOfErrorFunction(List<Number> inputList) throws Exception -->Line_8 $$ for (int i = 0; i < numberOfRuns; i++) [ CD ]
Line_38 $$ BinomialDistribution binomial = new BinomialDistribution(numberOfRuns, getConfidence())-->Line_39 $$ int lowerBound = binomial.inverseCumulativeProbability(0.01)[ FD ]
Line_3 $$ int inRange = 0-->Line_41 $$ assertTrue(lowerBound < inRange && inRange < upperBound, String.format("%d out of %d passed. Expected [%d, %d]", inRange, numberOfRuns, lowerBound, upperBound))[ FD ]
Line_16 $$ BlockBuilder builder = getType().createBlockBuilder(new BlockBuilderStatus(), list.size())-->Line_19 $$ BIGINT.writeLong(builder, sample.longValue())[ FD ]
Line_8 $$ for (int i = 0; i < numberOfRuns; i++) -->Line_32 $$ double approx = Double.parseDouble(approxValue.split(" ")[0])[ CD ]
Line_2 $$ private void testCorrectnessOfErrorFunction(List<Number> inputList) throws Exception -->Line_5 $$ double sampleRatio = 1 / (double) WEIGHT[ CD ]
Line_17 $$ for (Number sample : list) -->Line_21 $$ DOUBLE.writeDouble(builder, sample.doubleValue())[ FD ]
Line_11 $$ if (rand.nextDouble() < sampleRatio) -->Line_12 $$ sampledList.add(x)[ CD ]
Line_2 $$ private void testCorrectnessOfErrorFunction(List<Number> inputList) throws Exception -->Line_38 $$ BinomialDistribution binomial = new BinomialDistribution(numberOfRuns, getConfidence())[ CD ]
Line_15 $$ ImmutableList<Number> list = sampledList.build()-->Line_16 $$ BlockBuilder builder = getType().createBlockBuilder(new BlockBuilderStatus(), list.size())[ FD ]
Line_9 $$ ImmutableList.Builder<Number> sampledList = ImmutableList.builder()-->Line_15 $$ ImmutableList<Number> list = sampledList.build()[ FD ]
Line_8 $$ for (int i = 0; i < numberOfRuns; i++) -->Line_29 $$ accumulator.addInput(page)[ CD ]
Line_28 $$ Accumulator accumulator = getFunction().bind(ImmutableList.of(0), Optional.empty(), Optional.of(page.getChannelCount() - 1), getConfidence()).createAccumulator()-->Line_31 $$ String approxValue = BlockAssertions.toValues(accumulator.getFinalType(), result).get(0).toString()[ FD ]
Line_17 $$ for (Number sample : list) -->Line_19 $$ BIGINT.writeLong(builder, sample.longValue())[ FD ]
Line_10 $$ for (Number x : inputList) -->Line_12 $$ sampledList.add(x)[ FD ]
Line_34 $$ if (Math.abs(approx - actual) <= error) -->Line_35 $$ inRange++[ CD ]
Line_2 $$ private void testCorrectnessOfErrorFunction(List<Number> inputList) throws Exception -->Line_4 $$ int numberOfRuns = 1000[ CD ]
Line_28 $$ Accumulator accumulator = getFunction().bind(ImmutableList.of(0), Optional.empty(), Optional.of(page.getChannelCount() - 1), getConfidence()).createAccumulator()-->Line_29 $$ accumulator.addInput(page)[ FD ]
Line_40 $$ int upperBound = binomial.inverseCumulativeProbability(0.99)-->Line_41 $$ assertTrue(lowerBound < inRange && inRange < upperBound, String.format("%d out of %d passed. Expected [%d, %d]", inRange, numberOfRuns, lowerBound, upperBound))[ FD ]
Line_20 $$ if (getType().equals(DOUBLE)) -->Line_21 $$ DOUBLE.writeDouble(builder, sample.doubleValue())[ CD ]
Line_16 $$ BlockBuilder builder = getType().createBlockBuilder(new BlockBuilderStatus(), list.size())-->Line_21 $$ DOUBLE.writeDouble(builder, sample.doubleValue())[ FD ]
Line_7 $$ Random rand = new Random(1)-->Line_11 $$ if (rand.nextDouble() < sampleRatio) [ FD ]
Line_8 $$ for (int i = 0; i < numberOfRuns; i++) -->Line_28 $$ Accumulator accumulator = getFunction().bind(ImmutableList.of(0), Optional.empty(), Optional.of(page.getChannelCount() - 1), getConfidence()).createAccumulator()[ CD ]
Line_2 $$ private void testCorrectnessOfErrorFunction(List<Number> inputList) throws Exception -->Line_6 $$ double actual = getExpectedValue(inputList)[ FD ]
Line_30 $$ Block result = getFinalBlock(accumulator)-->Line_31 $$ String approxValue = BlockAssertions.toValues(accumulator.getFinalType(), result).get(0).toString()[ FD ]
Line_2 $$ private void testCorrectnessOfErrorFunction(List<Number> inputList) throws Exception -->Line_7 $$ Random rand = new Random(1)[ CD ]
Line_26 $$ Page page = new Page(builder.build())-->Line_29 $$ accumulator.addInput(page)[ FD ]
Line_2 $$ private void testCorrectnessOfErrorFunction(List<Number> inputList) throws Exception -->Line_41 $$ assertTrue(lowerBound < inRange && inRange < upperBound, String.format("%d out of %d passed. Expected [%d, %d]", inRange, numberOfRuns, lowerBound, upperBound))[ CD ]
Line_2 $$ private void testCorrectnessOfErrorFunction(List<Number> inputList) throws Exception -->Line_6 $$ double actual = getExpectedValue(inputList)[ CD ]
Line_4 $$ int numberOfRuns = 1000-->Line_8 $$ for (int i = 0; i < numberOfRuns; i++) [ FD ]
Line_8 $$ for (int i = 0; i < numberOfRuns; i++) -->Line_30 $$ Block result = getFinalBlock(accumulator)[ CD ]
Line_9 $$ ImmutableList.Builder<Number> sampledList = ImmutableList.builder()-->Line_12 $$ sampledList.add(x)[ FD ]
Line_38 $$ BinomialDistribution binomial = new BinomialDistribution(numberOfRuns, getConfidence())-->Line_40 $$ int upperBound = binomial.inverseCumulativeProbability(0.99)[ FD ]
Line_28 $$ Accumulator accumulator = getFunction().bind(ImmutableList.of(0), Optional.empty(), Optional.of(page.getChannelCount() - 1), getConfidence()).createAccumulator()-->Line_30 $$ Block result = getFinalBlock(accumulator)[ FD ]
Line_18 $$ if (getType().equals(BIGINT)) -->Line_19 $$ BIGINT.writeLong(builder, sample.longValue())[ CD ]
Line_33 $$ double error = Double.parseDouble(approxValue.split(" ")[2])-->Line_34 $$ if (Math.abs(approx - actual) <= error) [ FD ]
Line_4 $$ int numberOfRuns = 1000-->Line_41 $$ assertTrue(lowerBound < inRange && inRange < upperBound, String.format("%d out of %d passed. Expected [%d, %d]", inRange, numberOfRuns, lowerBound, upperBound))[ FD ]
Line_39 $$ int lowerBound = binomial.inverseCumulativeProbability(0.01)-->Line_41 $$ assertTrue(lowerBound < inRange && inRange < upperBound, String.format("%d out of %d passed. Expected [%d, %d]", inRange, numberOfRuns, lowerBound, upperBound))[ FD ]
Line_3 $$ int inRange = 0-->Line_35 $$ inRange++[ FD ]
