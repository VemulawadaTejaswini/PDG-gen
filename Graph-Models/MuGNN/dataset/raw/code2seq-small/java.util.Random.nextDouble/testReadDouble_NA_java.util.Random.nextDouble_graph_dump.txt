Line_2 $$ public void testReadDouble() -->Line_5 $$ DoubleBuffer doubleBuffer = byteBuffer.asDoubleBuffer()[ CD ]
Line_2 $$ public void testReadDouble() -->Line_4 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ CD ]
Line_5 $$ DoubleBuffer doubleBuffer = byteBuffer.asDoubleBuffer()-->Line_9 $$ doubleBuffer.put(doubles[i])[ FD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(_COUNT * 8)-->Line_4 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_2 $$ public void testReadDouble() -->Line_11 $$ Deserializer deserializer = new Deserializer(byteBuffer)[ CD ]
Line_7 $$ for (int i = 0; i < _COUNT; i++) -->Line_9 $$ doubleBuffer.put(doubles[i])[ CD ]
Line_7 $$ for (int i = 0; i < _COUNT; i++) -->Line_8 $$ doubles[i] = _random.nextDouble()[ CD ]
Line_11 $$ Deserializer deserializer = new Deserializer(byteBuffer)-->Line_13 $$ Assert.assertEquals((Double) doubles[i], (Double) deserializer.readDouble())[ FD ]
Line_12 $$ for (int i = 0; i < _COUNT; i++) -->Line_13 $$ Assert.assertEquals((Double) doubles[i], (Double) deserializer.readDouble())[ CD ]
Line_2 $$ public void testReadDouble() -->Line_7 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(_COUNT * 8)-->Line_5 $$ DoubleBuffer doubleBuffer = byteBuffer.asDoubleBuffer()[ FD ]
Line_2 $$ public void testReadDouble() -->Line_6 $$ double[] doubles = new double[_COUNT][ CD ]
Line_2 $$ public void testReadDouble() -->Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(_COUNT * 8)[ CD ]
Line_7 $$ for (int i = 0; i < _COUNT; i++) -->Line_12 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_2 $$ public void testReadDouble() -->Line_12 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
