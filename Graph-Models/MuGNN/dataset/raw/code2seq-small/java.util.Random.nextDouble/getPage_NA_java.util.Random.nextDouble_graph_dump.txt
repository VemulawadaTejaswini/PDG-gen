Line_7 $$ for (int i = 0; i < datapoints; i++) -->Line_9 $$ builder.row(label, mapSliceOf(BigintType.BIGINT, DoubleType.DOUBLE, 0, label + rand.nextGaussian()), "C=1")[ CD ]
Line_5 $$ RowPageBuilder builder = RowPageBuilder.rowPageBuilder(BigintType.BIGINT, mapType, VarcharType.VARCHAR)-->Line_9 $$ builder.row(label, mapSliceOf(BigintType.BIGINT, DoubleType.DOUBLE, 0, label + rand.nextGaussian()), "C=1")[ FD ]
Line_5 $$ RowPageBuilder builder = RowPageBuilder.rowPageBuilder(BigintType.BIGINT, mapType, VarcharType.VARCHAR)-->Line_11 $$ return builder.build()[ FD ]
Line_2 $$ private static Page getPage() throws JsonProcessingException -->Line_5 $$ RowPageBuilder builder = RowPageBuilder.rowPageBuilder(BigintType.BIGINT, mapType, VarcharType.VARCHAR)[ CD ]
Line_2 $$ private static Page getPage() throws JsonProcessingException -->Line_4 $$ int datapoints = 100[ CD ]
Line_2 $$ private static Page getPage() throws JsonProcessingException -->Line_7 $$ for (int i = 0; i < datapoints; i++) [ CD ]
Line_6 $$ Random rand = new Random(0)-->Line_9 $$ builder.row(label, mapSliceOf(BigintType.BIGINT, DoubleType.DOUBLE, 0, label + rand.nextGaussian()), "C=1")[ FD ]
Line_4 $$ int datapoints = 100-->Line_7 $$ for (int i = 0; i < datapoints; i++) [ FD ]
Line_7 $$ for (int i = 0; i < datapoints; i++) -->Line_8 $$ long label = rand.nextDouble() < 0.5 ? 0 : 1[ CD ]
Line_2 $$ private static Page getPage() throws JsonProcessingException -->Line_6 $$ Random rand = new Random(0)[ CD ]
Line_6 $$ Random rand = new Random(0)-->Line_8 $$ long label = rand.nextDouble() < 0.5 ? 0 : 1[ FD ]
Line_2 $$ private static Page getPage() throws JsonProcessingException -->Line_3 $$ Type mapType = typeManager.getParameterizedType("map", ImmutableList.of(parseTypeSignature(StandardTypes.BIGINT), parseTypeSignature(StandardTypes.DOUBLE)), ImmutableList.of())[ CD ]
Line_8 $$ long label = rand.nextDouble() < 0.5 ? 0 : 1-->Line_9 $$ builder.row(label, mapSliceOf(BigintType.BIGINT, DoubleType.DOUBLE, 0, label + rand.nextGaussian()), "C=1")[ FD ]
Line_2 $$ private static Page getPage() throws JsonProcessingException -->Line_11 $$ return builder.build()[ CD ]
Line_3 $$ Type mapType = typeManager.getParameterizedType("map", ImmutableList.of(parseTypeSignature(StandardTypes.BIGINT), parseTypeSignature(StandardTypes.DOUBLE)), ImmutableList.of())-->Line_5 $$ RowPageBuilder builder = RowPageBuilder.rowPageBuilder(BigintType.BIGINT, mapType, VarcharType.VARCHAR)[ FD ]
