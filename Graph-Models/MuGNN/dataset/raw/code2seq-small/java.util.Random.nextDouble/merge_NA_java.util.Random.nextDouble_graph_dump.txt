Line_2 $$ static SampleOfLongs merge(Random rnd, List<SampleOfLongs> merge, int maxSamples) -->Line_26 $$ Arrays.sort(sample)[ CD ]
Line_2 $$ static SampleOfLongs merge(Random rnd, List<SampleOfLongs> merge, int maxSamples) -->Line_17 $$ if (rnd.nextDouble() < p) [ FD ]
Line_5 $$ int maxLength = 0-->Line_19 $$ if (count == maxLength)[ FD ]
Line_2 $$ static SampleOfLongs merge(Random rnd, List<SampleOfLongs> merge, int maxSamples) -->Line_3 $$ double targetp = 1[ CD ]
Line_2 $$ static SampleOfLongs merge(Random rnd, List<SampleOfLongs> merge, int maxSamples) -->Line_24 $$ if (count != maxLength)[ CD ]
Line_6 $$ maxLength += sampleOfLongs.sample.length * (targetp / sampleOfLongs.p)-->Line_24 $$ if (count != maxLength)[ FD ]
Line_5 $$ int maxLength = 0-->Line_9 $$ maxLength = maxSamples[ FD ]
Line_17 $$ if (rnd.nextDouble() < p) -->Line_19 $$ if (count == maxLength)[ CD ]
Line_9 $$ maxLength = maxSamples-->Line_19 $$ if (count == maxLength)[ FD ]
Line_2 $$ static SampleOfLongs merge(Random rnd, List<SampleOfLongs> merge, int maxSamples) -->Line_27 $$ return new SampleOfLongs(sample, targetp)[ CD ]
Line_2 $$ static SampleOfLongs merge(Random rnd, List<SampleOfLongs> merge, int maxSamples) -->Line_8 $$ targetp *= maxSamples / (double) maxLength[ FD ]
Line_3 $$ double targetp = 1-->Line_4 $$ targetp = Math.min(targetp, sampleOfLongs.p)[ FD ]
Line_6 $$ maxLength += sampleOfLongs.sample.length * (targetp / sampleOfLongs.p)-->Line_9 $$ maxLength = maxSamples[ FD ]
Line_2 $$ static SampleOfLongs merge(Random rnd, List<SampleOfLongs> merge, int maxSamples) -->Line_7 $$ if (maxLength > maxSamples) [ CD ]
Line_2 $$ static SampleOfLongs merge(Random rnd, List<SampleOfLongs> merge, int maxSamples) -->Line_12 $$ int count = 0[ CD ]
Line_25 $$ sample = Arrays.copyOf(sample, count)-->Line_26 $$ Arrays.sort(sample)[ FD ]
Line_12 $$ int count = 0-->Line_25 $$ sample = Arrays.copyOf(sample, count)[ FD ]
Line_9 $$ maxLength = maxSamples-->Line_24 $$ if (count != maxLength)[ FD ]
Line_2 $$ static SampleOfLongs merge(Random rnd, List<SampleOfLongs> merge, int maxSamples) -->Line_9 $$ maxLength = maxSamples[ FD ]
Line_11 $$ long[] sample = new long[maxLength]-->Line_25 $$ sample = Arrays.copyOf(sample, count)[ FD ]
Line_12 $$ int count = 0-->Line_18 $$ sample[count++] = in[i][ FD ]
Line_5 $$ int maxLength = 0-->Line_7 $$ if (maxLength > maxSamples) [ FD ]
Line_17 $$ if (rnd.nextDouble() < p) -->Line_18 $$ sample[count++] = in[i][ CD ]
Line_24 $$ if (count != maxLength)-->Line_25 $$ sample = Arrays.copyOf(sample, count)[ CD ]
Line_11 $$ long[] sample = new long[maxLength]-->Line_26 $$ Arrays.sort(sample)[ FD ]
Line_5 $$ int maxLength = 0-->Line_6 $$ maxLength += sampleOfLongs.sample.length * (targetp / sampleOfLongs.p)[ FD ]
Line_6 $$ maxLength += sampleOfLongs.sample.length * (targetp / sampleOfLongs.p)-->Line_7 $$ if (maxLength > maxSamples) [ FD ]
Line_2 $$ static SampleOfLongs merge(Random rnd, List<SampleOfLongs> merge, int maxSamples) -->Line_7 $$ if (maxLength > maxSamples) [ FD ]
Line_15 $$ double p = targetp / latencies.p-->Line_17 $$ if (rnd.nextDouble() < p) [ FD ]
Line_12 $$ int count = 0-->Line_24 $$ if (count != maxLength)[ FD ]
Line_12 $$ int count = 0-->Line_19 $$ if (count == maxLength)[ FD ]
Line_2 $$ static SampleOfLongs merge(Random rnd, List<SampleOfLongs> merge, int maxSamples) -->Line_11 $$ long[] sample = new long[maxLength][ CD ]
Line_16 $$ for (int i = 0; i < in.length; i++) -->Line_17 $$ if (rnd.nextDouble() < p) [ CD ]
Line_3 $$ double targetp = 1-->Line_8 $$ targetp *= maxSamples / (double) maxLength[ FD ]
Line_5 $$ int maxLength = 0-->Line_24 $$ if (count != maxLength)[ FD ]
Line_2 $$ static SampleOfLongs merge(Random rnd, List<SampleOfLongs> merge, int maxSamples) -->Line_5 $$ int maxLength = 0[ CD ]
Line_6 $$ maxLength += sampleOfLongs.sample.length * (targetp / sampleOfLongs.p)-->Line_19 $$ if (count == maxLength)[ FD ]
Line_7 $$ if (maxLength > maxSamples) -->Line_8 $$ targetp *= maxSamples / (double) maxLength[ CD ]
Line_4 $$ targetp = Math.min(targetp, sampleOfLongs.p)-->Line_8 $$ targetp *= maxSamples / (double) maxLength[ FD ]
Line_7 $$ if (maxLength > maxSamples) -->Line_9 $$ maxLength = maxSamples[ CD ]
