Line_40 $$ final String bundleName = myTfBundleName.getText()-->Line_48 $$ Messages.showErrorDialog(UIDesignerBundle.message("error.bundle.does.not.exist", bundleName), CommonBundle.getErrorTitle())[ FD ]
Line_2 $$ private void setupResourceBundleCard() -->Line_3 $$ myTfBundleName.registerKeyboardAction(new AbstractAction() [ CD ]
Line_12 $$ PropertiesFile file = PropertiesUtilBase.getPropertiesFile(bundleNameText, myEditor.getModule(), myLocale)-->Line_13 $$ PsiFile initialPropertiesFile = file == null ? null : file.getContainingFile()[ FD ]
Line_3 $$ myTfBundleName.registerKeyboardAction(new AbstractAction() -->Line_5 $$ myTfBundleName.getButton().doClick()[ CD ]
Line_57 $$ if (descriptor == null) -->Line_58 $$ return[ CD ]
Line_33 $$ myTfKey.registerKeyboardAction(new AbstractAction() -->Line_35 $$ myTfKey.getButton().doClick()[ CD ]
Line_8 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_13 $$ PsiFile initialPropertiesFile = file == null ? null : file.getContainingFile()[ CD ]
Line_38 $$ myTfKey.addActionListener(new ActionListener() -->Line_61 $$ myTfRbValue.setText(descriptor.getResolvedValue())[ CD ]
Line_53 $$ if (!dialog.showAndGet()) -->Line_54 $$ return[ CD ]
Line_47 $$ if (bundle == null) -->Line_49 $$ return[ CD ]
Line_51 $$ final KeyChooserDialog dialog = new KeyChooserDialog(myTfKey, bundle, bundleName, myTfKey.getText(), myEditor)-->Line_53 $$ if (!dialog.showAndGet()) [ FD ]
Line_38 $$ myTfKey.addActionListener(new ActionListener() -->Line_45 $$ final PropertiesReferenceManager manager = PropertiesReferenceManager.getInstance(myEditor.getProject())[ CD ]
Line_2 $$ private void setupResourceBundleCard() -->Line_8 $$ myTfBundleName.addActionListener(new ActionListener() [ CD ]
Line_40 $$ final String bundleName = myTfBundleName.getText()-->Line_41 $$ if (bundleName.length() == 0) [ FD ]
Line_56 $$ final StringDescriptor descriptor = dialog.getDescriptor()-->Line_57 $$ if (descriptor == null) [ FD ]
Line_56 $$ final StringDescriptor descriptor = dialog.getDescriptor()-->Line_61 $$ myTfRbValue.setText(descriptor.getResolvedValue())[ FD ]
Line_8 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_30 $$ myTfBundleName.setText(bundleName)[ CD ]
Line_8 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_15 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() [ CD ]
Line_15 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() -->Line_18 $$ return virtualFile != null && moduleScope.contains(virtualFile)[ CD ]
Line_8 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_14 $$ final GlobalSearchScope moduleScope = GlobalSearchScope.moduleWithDependenciesScope(myEditor.getModule())[ CD ]
Line_40 $$ final String bundleName = myTfBundleName.getText()-->Line_46 $$ final PropertiesFile bundle = manager.findPropertiesFile(myEditor.getModule(), bundleName.replace('/', '.'), myLocale)[ FD ]
Line_8 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_26 $$ final String bundleName = FormReferenceProvider.getBundleName(propertiesFile)[ CD ]
Line_38 $$ myTfKey.addActionListener(new ActionListener() -->Line_57 $$ if (descriptor == null) [ CD ]
Line_8 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_21 $$ fileChooser.showDialog()[ CD ]
Line_15 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() -->Line_17 $$ final VirtualFile virtualFile = file.getVirtualFile()[ FD ]
Line_45 $$ final PropertiesReferenceManager manager = PropertiesReferenceManager.getInstance(myEditor.getProject())-->Line_46 $$ final PropertiesFile bundle = manager.findPropertiesFile(myEditor.getModule(), bundleName.replace('/', '.'), myLocale)[ FD ]
Line_11 $$ final String bundleNameText = myTfBundleName.getText().replace('/', '.')-->Line_12 $$ PropertiesFile file = PropertiesUtilBase.getPropertiesFile(bundleNameText, myEditor.getModule(), myLocale)[ FD ]
Line_38 $$ myTfKey.addActionListener(new ActionListener() -->Line_47 $$ if (bundle == null) [ CD ]
Line_38 $$ myTfKey.addActionListener(new ActionListener() -->Line_56 $$ final StringDescriptor descriptor = dialog.getDescriptor()[ CD ]
Line_51 $$ final KeyChooserDialog dialog = new KeyChooserDialog(myTfKey, bundle, bundleName, myTfKey.getText(), myEditor)-->Line_56 $$ final StringDescriptor descriptor = dialog.getDescriptor()[ FD ]
Line_56 $$ final StringDescriptor descriptor = dialog.getDescriptor()-->Line_60 $$ myTfKey.setText(descriptor.getKey())[ FD ]
Line_23 $$ if (propertiesFile == null) -->Line_24 $$ return[ CD ]
Line_15 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() -->Line_22 $$ PropertiesFile propertiesFile = (PropertiesFile) fileChooser.getSelectedFile()[ FD ]
Line_27 $$ if (bundleName == null) -->Line_28 $$ return[ CD ]
Line_8 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_27 $$ if (bundleName == null) [ CD ]
Line_15 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() -->Line_21 $$ fileChooser.showDialog()[ FD ]
Line_13 $$ PsiFile initialPropertiesFile = file == null ? null : file.getContainingFile()-->Line_15 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() [ FD ]
Line_2 $$ private void setupResourceBundleCard() -->Line_38 $$ myTfKey.addActionListener(new ActionListener() [ CD ]
Line_10 $$ Project project = myEditor.getProject()-->Line_15 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() [ FD ]
Line_2 $$ private void setupResourceBundleCard() -->Line_33 $$ myTfKey.registerKeyboardAction(new AbstractAction() [ CD ]
Line_38 $$ myTfKey.addActionListener(new ActionListener() -->Line_51 $$ final KeyChooserDialog dialog = new KeyChooserDialog(myTfKey, bundle, bundleName, myTfKey.getText(), myEditor)[ CD ]
Line_17 $$ final VirtualFile virtualFile = file.getVirtualFile()-->Line_18 $$ return virtualFile != null && moduleScope.contains(virtualFile)[ FD ]
Line_47 $$ if (bundle == null) -->Line_48 $$ Messages.showErrorDialog(UIDesignerBundle.message("error.bundle.does.not.exist", bundleName), CommonBundle.getErrorTitle())[ CD ]
Line_8 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_10 $$ Project project = myEditor.getProject()[ CD ]
Line_38 $$ myTfKey.addActionListener(new ActionListener() -->Line_53 $$ if (!dialog.showAndGet()) [ CD ]
Line_38 $$ myTfKey.addActionListener(new ActionListener() -->Line_40 $$ final String bundleName = myTfBundleName.getText()[ CD ]
Line_46 $$ final PropertiesFile bundle = manager.findPropertiesFile(myEditor.getModule(), bundleName.replace('/', '.'), myLocale)-->Line_47 $$ if (bundle == null) [ FD ]
Line_8 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_12 $$ PropertiesFile file = PropertiesUtilBase.getPropertiesFile(bundleNameText, myEditor.getModule(), myLocale)[ CD ]
Line_14 $$ final GlobalSearchScope moduleScope = GlobalSearchScope.moduleWithDependenciesScope(myEditor.getModule())-->Line_18 $$ return virtualFile != null && moduleScope.contains(virtualFile)[ FD ]
Line_38 $$ myTfKey.addActionListener(new ActionListener() -->Line_46 $$ final PropertiesFile bundle = manager.findPropertiesFile(myEditor.getModule(), bundleName.replace('/', '.'), myLocale)[ CD ]
Line_12 $$ PropertiesFile file = PropertiesUtilBase.getPropertiesFile(bundleNameText, myEditor.getModule(), myLocale)-->Line_17 $$ final VirtualFile virtualFile = file.getVirtualFile()[ FD ]
Line_8 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_11 $$ final String bundleNameText = myTfBundleName.getText().replace('/', '.')[ CD ]
Line_15 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() -->Line_17 $$ final VirtualFile virtualFile = file.getVirtualFile()[ CD ]
Line_38 $$ myTfKey.addActionListener(new ActionListener() -->Line_41 $$ if (bundleName.length() == 0) [ CD ]
Line_41 $$ if (bundleName.length() == 0) -->Line_43 $$ return[ CD ]
Line_8 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_23 $$ if (propertiesFile == null) [ CD ]
Line_38 $$ myTfKey.addActionListener(new ActionListener() -->Line_60 $$ myTfKey.setText(descriptor.getKey())[ CD ]
Line_41 $$ if (bundleName.length() == 0) -->Line_42 $$ Messages.showErrorDialog(UIDesignerBundle.message("error.specify.bundle.name"), CommonBundle.getErrorTitle())[ CD ]
