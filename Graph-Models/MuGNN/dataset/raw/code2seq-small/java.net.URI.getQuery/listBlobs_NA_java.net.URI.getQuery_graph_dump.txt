Line_4 $$ String fullPrefix = prefix == null ? uri.toString() : new URI(uri.getScheme(), uri.getAuthority(), uri.getPath() + prefix, uri.getQuery(), uri.getFragment()).toString()-->Line_7 $$ for (InMemoryBlockBlobStore.ListBlobEntry current : backingStore.listBlobs(fullPrefix, includeMetadata)) [ FD ]
Line_3 $$ ArrayList<ListBlobItem> ret = new ArrayList<ListBlobItem>()-->Line_15 $$ ret.add(new MockCloudBlobDirectoryWrapper(new URI(directoryName + "/")))[ FD ]
Line_7 $$ for (InMemoryBlockBlobStore.ListBlobEntry current : backingStore.listBlobs(fullPrefix, includeMetadata)) -->Line_10 $$ ret.add(new MockCloudBlockBlobWrapper(new URI(current.getKey()), current.getMetadata(), current.getContentLength()))[ FD ]
Line_7 $$ for (InMemoryBlockBlobStore.ListBlobEntry current : backingStore.listBlobs(fullPrefix, includeMetadata)) -->Line_14 $$ addedDirectories.add(current.getKey())[ FD ]
Line_2 $$ public Iterable<ListBlobItem> listBlobs(String prefix, boolean useFlatBlobListing, EnumSet<BlobListingDetails> listingDetails, BlobRequestOptions options, OperationContext opContext) throws URISyntaxException, StorageException -->Line_9 $$ if (useFlatBlobListing || indexOfSlash < 0) [ FD ]
Line_12 $$ String directoryName = current.getKey().substring(0, indexOfSlash)-->Line_13 $$ if (!addedDirectories.contains(directoryName)) [ FD ]
Line_2 $$ public Iterable<ListBlobItem> listBlobs(String prefix, boolean useFlatBlobListing, EnumSet<BlobListingDetails> listingDetails, BlobRequestOptions options, OperationContext opContext) throws URISyntaxException, StorageException -->Line_5 $$ boolean includeMetadata = listingDetails.contains(BlobListingDetails.METADATA)[ CD ]
Line_2 $$ public Iterable<ListBlobItem> listBlobs(String prefix, boolean useFlatBlobListing, EnumSet<BlobListingDetails> listingDetails, BlobRequestOptions options, OperationContext opContext) throws URISyntaxException, StorageException -->Line_19 $$ return ret[ CD ]
Line_2 $$ public Iterable<ListBlobItem> listBlobs(String prefix, boolean useFlatBlobListing, EnumSet<BlobListingDetails> listingDetails, BlobRequestOptions options, OperationContext opContext) throws URISyntaxException, StorageException -->Line_5 $$ boolean includeMetadata = listingDetails.contains(BlobListingDetails.METADATA)[ FD ]
Line_3 $$ ArrayList<ListBlobItem> ret = new ArrayList<ListBlobItem>()-->Line_10 $$ ret.add(new MockCloudBlockBlobWrapper(new URI(current.getKey()), current.getMetadata(), current.getContentLength()))[ FD ]
Line_2 $$ public Iterable<ListBlobItem> listBlobs(String prefix, boolean useFlatBlobListing, EnumSet<BlobListingDetails> listingDetails, BlobRequestOptions options, OperationContext opContext) throws URISyntaxException, StorageException -->Line_4 $$ String fullPrefix = prefix == null ? uri.toString() : new URI(uri.getScheme(), uri.getAuthority(), uri.getPath() + prefix, uri.getQuery(), uri.getFragment()).toString()[ CD ]
Line_13 $$ if (!addedDirectories.contains(directoryName)) -->Line_14 $$ addedDirectories.add(current.getKey())[ CD ]
Line_6 $$ HashSet<String> addedDirectories = new HashSet<String>()-->Line_13 $$ if (!addedDirectories.contains(directoryName)) [ FD ]
Line_4 $$ String fullPrefix = prefix == null ? uri.toString() : new URI(uri.getScheme(), uri.getAuthority(), uri.getPath() + prefix, uri.getQuery(), uri.getFragment()).toString()-->Line_8 $$ int indexOfSlash = current.getKey().indexOf('/', fullPrefix.length())[ FD ]
Line_5 $$ boolean includeMetadata = listingDetails.contains(BlobListingDetails.METADATA)-->Line_7 $$ for (InMemoryBlockBlobStore.ListBlobEntry current : backingStore.listBlobs(fullPrefix, includeMetadata)) [ FD ]
Line_7 $$ for (InMemoryBlockBlobStore.ListBlobEntry current : backingStore.listBlobs(fullPrefix, includeMetadata)) -->Line_8 $$ int indexOfSlash = current.getKey().indexOf('/', fullPrefix.length())[ FD ]
Line_13 $$ if (!addedDirectories.contains(directoryName)) -->Line_15 $$ ret.add(new MockCloudBlobDirectoryWrapper(new URI(directoryName + "/")))[ CD ]
Line_9 $$ if (useFlatBlobListing || indexOfSlash < 0) -->Line_10 $$ ret.add(new MockCloudBlockBlobWrapper(new URI(current.getKey()), current.getMetadata(), current.getContentLength()))[ CD ]
Line_7 $$ for (InMemoryBlockBlobStore.ListBlobEntry current : backingStore.listBlobs(fullPrefix, includeMetadata)) -->Line_12 $$ String directoryName = current.getKey().substring(0, indexOfSlash)[ FD ]
Line_6 $$ HashSet<String> addedDirectories = new HashSet<String>()-->Line_14 $$ addedDirectories.add(current.getKey())[ FD ]
Line_9 $$ if (useFlatBlobListing || indexOfSlash < 0) -->Line_12 $$ String directoryName = current.getKey().substring(0, indexOfSlash)[ CD ]
Line_2 $$ public Iterable<ListBlobItem> listBlobs(String prefix, boolean useFlatBlobListing, EnumSet<BlobListingDetails> listingDetails, BlobRequestOptions options, OperationContext opContext) throws URISyntaxException, StorageException -->Line_3 $$ ArrayList<ListBlobItem> ret = new ArrayList<ListBlobItem>()[ CD ]
Line_8 $$ int indexOfSlash = current.getKey().indexOf('/', fullPrefix.length())-->Line_12 $$ String directoryName = current.getKey().substring(0, indexOfSlash)[ FD ]
Line_2 $$ public Iterable<ListBlobItem> listBlobs(String prefix, boolean useFlatBlobListing, EnumSet<BlobListingDetails> listingDetails, BlobRequestOptions options, OperationContext opContext) throws URISyntaxException, StorageException -->Line_6 $$ HashSet<String> addedDirectories = new HashSet<String>()[ CD ]
Line_9 $$ if (useFlatBlobListing || indexOfSlash < 0) -->Line_13 $$ if (!addedDirectories.contains(directoryName)) [ CD ]
