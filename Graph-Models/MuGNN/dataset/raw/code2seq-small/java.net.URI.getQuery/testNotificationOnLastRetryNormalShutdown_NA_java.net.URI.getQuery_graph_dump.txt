Line_3 $$ HttpServer2 server = startHttpServer()-->Line_15 $$ server.stop()[ FD ]
Line_4 $$ MRApp app = spy(new MRAppWithCustomContainerAllocator(2, 2, true, this.getClass().getName(), true, 2, true))-->Line_8 $$ JobImpl job = (JobImpl) app.submit(conf)[ FD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_14 $$ Assert.assertEquals(JobState.SUCCEEDED.toString(), JobEndServlet.foundJobState)[ CD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_8 $$ JobImpl job = (JobImpl) app.submit(conf)[ CD ]
Line_8 $$ JobImpl job = (JobImpl) app.submit(conf)-->Line_9 $$ app.waitForInternalState(job, JobStateInternal.SUCCEEDED)[ FD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_6 $$ JobConf conf = new JobConf()[ CD ]
Line_4 $$ MRApp app = spy(new MRAppWithCustomContainerAllocator(2, 2, true, this.getClass().getName(), true, 2, true))-->Line_9 $$ app.waitForInternalState(job, JobStateInternal.SUCCEEDED)[ FD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_13 $$ Assert.assertEquals("jobid=" + job.getID() + "&status=SUCCEEDED", JobEndServlet.requestUri.getQuery())[ CD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_15 $$ server.stop()[ CD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_4 $$ MRApp app = spy(new MRAppWithCustomContainerAllocator(2, 2, true, this.getClass().getName(), true, 2, true))[ CD ]
Line_6 $$ JobConf conf = new JobConf()-->Line_7 $$ conf.set(JobContext.MR_JOB_END_NOTIFICATION_URL, JobEndServlet.baseUrl + "jobend?jobid=$jobId&status=$jobStatus")[ FD ]
Line_4 $$ MRApp app = spy(new MRAppWithCustomContainerAllocator(2, 2, true, this.getClass().getName(), true, 2, true))-->Line_11 $$ Assert.assertTrue(app.isLastAMRetry())[ FD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_10 $$ app.shutDownJob()[ CD ]
Line_8 $$ JobImpl job = (JobImpl) app.submit(conf)-->Line_13 $$ Assert.assertEquals("jobid=" + job.getID() + "&status=SUCCEEDED", JobEndServlet.requestUri.getQuery())[ FD ]
Line_4 $$ MRApp app = spy(new MRAppWithCustomContainerAllocator(2, 2, true, this.getClass().getName(), true, 2, true))-->Line_10 $$ app.shutDownJob()[ FD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_3 $$ HttpServer2 server = startHttpServer()[ CD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_11 $$ Assert.assertTrue(app.isLastAMRetry())[ CD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_7 $$ conf.set(JobContext.MR_JOB_END_NOTIFICATION_URL, JobEndServlet.baseUrl + "jobend?jobid=$jobId&status=$jobStatus")[ CD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_5 $$ doNothing().when(app).sysexit()[ CD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_12 $$ Assert.assertEquals(1, JobEndServlet.calledTimes)[ CD ]
Line_6 $$ JobConf conf = new JobConf()-->Line_8 $$ JobImpl job = (JobImpl) app.submit(conf)[ FD ]
Line_2 $$ public void testNotificationOnLastRetryNormalShutdown() throws Exception -->Line_9 $$ app.waitForInternalState(job, JobStateInternal.SUCCEEDED)[ CD ]
Line_4 $$ MRApp app = spy(new MRAppWithCustomContainerAllocator(2, 2, true, this.getClass().getName(), true, 2, true))-->Line_5 $$ doNothing().when(app).sysexit()[ FD ]
