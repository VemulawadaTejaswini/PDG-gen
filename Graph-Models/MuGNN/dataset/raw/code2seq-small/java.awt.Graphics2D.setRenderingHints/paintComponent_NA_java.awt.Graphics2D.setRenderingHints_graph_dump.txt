Line_2 $$ protected void paintComponent(final Graphics g) -->Line_22 $$ g.setFont(consoleFont)[ FD ]
Line_4 $$ final Pair<Boolean, Argument> nextArg = myNextArg-->Line_5 $$ if (nextArg == null) [ FD ]
Line_13 $$ final int consoleFontType = consoleEditor.getCaretModel().getTextAttributes().getFontType()-->Line_14 $$ final FontMetrics consoleFontMetrics = consoleEditor.getFontMetrics(consoleFontType)[ FD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_20 $$ final boolean argumentRequired = nextArg.first[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_21 $$ final String argumentText = nextArg.second.getHelp().getHelpString()[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_24 $$ final String textToShow = wrapBracesIfNeeded(argumentRequired, StringUtil.isEmpty(argumentText) ? PyBundle.message("commandLine.argumentHint.defaultName") : argumentText)[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_37 $$ final int contentWidth = (int) Math.ceil(trimmedDocumentWidth + consoleEditor.getPrefixTextWidthInPixels())[ CD ]
Line_8 $$ final EditorImpl consoleEditor = PyUtil.as(myConsole.getConsoleEditor(), EditorImpl.class)-->Line_37 $$ final int contentWidth = (int) Math.ceil(trimmedDocumentWidth + consoleEditor.getPrefixTextWidthInPixels())[ FD ]
Line_9 $$ if (consoleEditor == null) -->Line_11 $$ return[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_13 $$ final int consoleFontType = consoleEditor.getCaretModel().getTextAttributes().getFontType()[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_23 $$ g.setColor(argumentRequired ? myRequiredColor : myOptionalColor)[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_31 $$ final double textHeight = Math.floor(consoleFont.getStringBounds(textToShow, consoleFontMetrics.getFontRenderContext()).getY())[ CD ]
Line_15 $$ final Font consoleFont = consoleFontMetrics.getFont()-->Line_31 $$ final double textHeight = Math.floor(consoleFont.getStringBounds(textToShow, consoleFontMetrics.getFontRenderContext()).getY())[ FD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_23 $$ g.setColor(argumentRequired ? myRequiredColor : myOptionalColor)[ FD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_26 $$ if (locations != null) [ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_3 $$ super.paintComponent(g)[ CD ]
Line_15 $$ final Font consoleFont = consoleFontMetrics.getFont()-->Line_36 $$ final double trimmedDocumentWidth = consoleFont.getStringBounds(trimmedDocument, consoleFontMetrics.getFontRenderContext()).getWidth()[ FD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_30 $$ final int consoleEditorTop = consoleEditor.getComponent().getLocation().y[ CD ]
Line_8 $$ final EditorImpl consoleEditor = PyUtil.as(myConsole.getConsoleEditor(), EditorImpl.class)-->Line_14 $$ final FontMetrics consoleFontMetrics = consoleEditor.getFontMetrics(consoleFontType)[ FD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_9 $$ if (consoleEditor == null) [ CD ]
Line_8 $$ final EditorImpl consoleEditor = PyUtil.as(myConsole.getConsoleEditor(), EditorImpl.class)-->Line_13 $$ final int consoleFontType = consoleEditor.getCaretModel().getTextAttributes().getFontType()[ FD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_8 $$ final EditorImpl consoleEditor = PyUtil.as(myConsole.getConsoleEditor(), EditorImpl.class)[ CD ]
Line_5 $$ if (nextArg == null) -->Line_6 $$ return[ CD ]
Line_14 $$ final FontMetrics consoleFontMetrics = consoleEditor.getFontMetrics(consoleFontType)-->Line_15 $$ final Font consoleFont = consoleFontMetrics.getFont()[ FD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_17 $$ if (sourceGraphics2 != null && g instanceof Graphics2D) [ CD ]
Line_16 $$ final Graphics2D sourceGraphics2 = PyUtil.as(consoleEditor.getComponent().getGraphics(), Graphics2D.class)-->Line_18 $$ ((Graphics2D) g).setRenderingHints(sourceGraphics2.getRenderingHints())[ FD ]
Line_24 $$ final String textToShow = wrapBracesIfNeeded(argumentRequired, StringUtil.isEmpty(argumentText) ? PyBundle.message("commandLine.argumentHint.defaultName") : argumentText)-->Line_38 $$ g.drawString(textToShow, Math.max(myCaretPositionPx, contentWidth) + scrollLocation.x + spaceWidth, y + scrollLocation.y)[ FD ]
Line_8 $$ final EditorImpl consoleEditor = PyUtil.as(myConsole.getConsoleEditor(), EditorImpl.class)-->Line_9 $$ if (consoleEditor == null) [ FD ]
Line_8 $$ final EditorImpl consoleEditor = PyUtil.as(myConsole.getConsoleEditor(), EditorImpl.class)-->Line_30 $$ final int consoleEditorTop = consoleEditor.getComponent().getLocation().y[ FD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_4 $$ final Pair<Boolean, Argument> nextArg = myNextArg[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_15 $$ final Font consoleFont = consoleFontMetrics.getFont()[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_36 $$ final double trimmedDocumentWidth = consoleFont.getStringBounds(trimmedDocument, consoleFontMetrics.getFontRenderContext()).getWidth()[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_25 $$ final CaretRectangle[] locations = consoleEditor.getCaretLocations(true)[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_22 $$ g.setFont(consoleFont)[ CD ]
Line_15 $$ final Font consoleFont = consoleFontMetrics.getFont()-->Line_22 $$ g.setFont(consoleFont)[ FD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_38 $$ g.drawString(textToShow, Math.max(myCaretPositionPx, contentWidth) + scrollLocation.x + spaceWidth, y + scrollLocation.y)[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_38 $$ g.drawString(textToShow, Math.max(myCaretPositionPx, contentWidth) + scrollLocation.x + spaceWidth, y + scrollLocation.y)[ FD ]
Line_8 $$ final EditorImpl consoleEditor = PyUtil.as(myConsole.getConsoleEditor(), EditorImpl.class)-->Line_34 $$ final int spaceWidth = EditorUtil.getSpaceWidth(consoleFontType, consoleEditor)[ FD ]
Line_21 $$ final String argumentText = nextArg.second.getHelp().getHelpString()-->Line_24 $$ final String textToShow = wrapBracesIfNeeded(argumentRequired, StringUtil.isEmpty(argumentText) ? PyBundle.message("commandLine.argumentHint.defaultName") : argumentText)[ FD ]
Line_25 $$ final CaretRectangle[] locations = consoleEditor.getCaretLocations(true)-->Line_26 $$ if (locations != null) [ FD ]
Line_9 $$ if (consoleEditor == null) -->Line_10 $$ Logger.getInstance(ArgumentHintLayer.class).warn("Bad editor: " + myConsole.getConsoleEditor())[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_5 $$ if (nextArg == null) [ CD ]
Line_24 $$ final String textToShow = wrapBracesIfNeeded(argumentRequired, StringUtil.isEmpty(argumentText) ? PyBundle.message("commandLine.argumentHint.defaultName") : argumentText)-->Line_31 $$ final double textHeight = Math.floor(consoleFont.getStringBounds(textToShow, consoleFontMetrics.getFontRenderContext()).getY())[ FD ]
Line_35 $$ final String trimmedDocument = StringUtil.trimTrailing(consoleEditor.getDocument().getText())-->Line_36 $$ final double trimmedDocumentWidth = consoleFont.getStringBounds(trimmedDocument, consoleFontMetrics.getFontRenderContext()).getWidth()[ FD ]
Line_8 $$ final EditorImpl consoleEditor = PyUtil.as(myConsole.getConsoleEditor(), EditorImpl.class)-->Line_16 $$ final Graphics2D sourceGraphics2 = PyUtil.as(consoleEditor.getComponent().getGraphics(), Graphics2D.class)[ FD ]
Line_8 $$ final EditorImpl consoleEditor = PyUtil.as(myConsole.getConsoleEditor(), EditorImpl.class)-->Line_33 $$ final Point scrollLocation = consoleEditor.getContentComponent().getLocation()[ FD ]
Line_17 $$ if (sourceGraphics2 != null && g instanceof Graphics2D) -->Line_18 $$ ((Graphics2D) g).setRenderingHints(sourceGraphics2.getRenderingHints())[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_3 $$ super.paintComponent(g)[ FD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_32 $$ final int y = (int) (consoleEditorTop - textHeight)[ CD ]
Line_37 $$ final int contentWidth = (int) Math.ceil(trimmedDocumentWidth + consoleEditor.getPrefixTextWidthInPixels())-->Line_38 $$ g.drawString(textToShow, Math.max(myCaretPositionPx, contentWidth) + scrollLocation.x + spaceWidth, y + scrollLocation.y)[ FD ]
Line_8 $$ final EditorImpl consoleEditor = PyUtil.as(myConsole.getConsoleEditor(), EditorImpl.class)-->Line_25 $$ final CaretRectangle[] locations = consoleEditor.getCaretLocations(true)[ FD ]
Line_13 $$ final int consoleFontType = consoleEditor.getCaretModel().getTextAttributes().getFontType()-->Line_34 $$ final int spaceWidth = EditorUtil.getSpaceWidth(consoleFontType, consoleEditor)[ FD ]
Line_14 $$ final FontMetrics consoleFontMetrics = consoleEditor.getFontMetrics(consoleFontType)-->Line_36 $$ final double trimmedDocumentWidth = consoleFont.getStringBounds(trimmedDocument, consoleFontMetrics.getFontRenderContext()).getWidth()[ FD ]
Line_14 $$ final FontMetrics consoleFontMetrics = consoleEditor.getFontMetrics(consoleFontType)-->Line_31 $$ final double textHeight = Math.floor(consoleFont.getStringBounds(textToShow, consoleFontMetrics.getFontRenderContext()).getY())[ FD ]
Line_26 $$ if (locations != null) -->Line_27 $$ final CaretRectangle rectangle = locations[0][ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_35 $$ final String trimmedDocument = StringUtil.trimTrailing(consoleEditor.getDocument().getText())[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_14 $$ final FontMetrics consoleFontMetrics = consoleEditor.getFontMetrics(consoleFontType)[ CD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_16 $$ final Graphics2D sourceGraphics2 = PyUtil.as(consoleEditor.getComponent().getGraphics(), Graphics2D.class)[ CD ]
Line_20 $$ final boolean argumentRequired = nextArg.first-->Line_24 $$ final String textToShow = wrapBracesIfNeeded(argumentRequired, StringUtil.isEmpty(argumentText) ? PyBundle.message("commandLine.argumentHint.defaultName") : argumentText)[ FD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_33 $$ final Point scrollLocation = consoleEditor.getContentComponent().getLocation()[ CD ]
Line_8 $$ final EditorImpl consoleEditor = PyUtil.as(myConsole.getConsoleEditor(), EditorImpl.class)-->Line_35 $$ final String trimmedDocument = StringUtil.trimTrailing(consoleEditor.getDocument().getText())[ FD ]
Line_2 $$ protected void paintComponent(final Graphics g) -->Line_34 $$ final int spaceWidth = EditorUtil.getSpaceWidth(consoleFontType, consoleEditor)[ CD ]
