Line_12 $$ if ("-keyClass".equals(args[i])) -->Line_14 $$ if ("-splitSample".equals(args[i])) [ CD ]
Line_18 $$ maxSplits = Integer.MAX_VALUE-->Line_25 $$ maxSplits = Integer.MAX_VALUE[ FD ]
Line_3 $$ Job job = new Job(getConf())-->Line_13 $$ job.setMapOutputKeyClass(Class.forName(args[++i]).asSubclass(WritableComparable.class))[ FD ]
Line_6 $$ for (int i = 0; i < args.length; ++i) -->Line_9 $$ job.setNumReduceTasks(Integer.parseInt(args[++i]))[ FD ]
Line_25 $$ maxSplits = Integer.MAX_VALUE-->Line_31 $$ maxSplits = Integer.MAX_VALUE[ FD ]
Line_55 $$ Path outf = new Path(otherArgs.remove(otherArgs.size() - 1))-->Line_56 $$ TotalOrderPartitioner.setPartitionFile(getConf(), outf)[ FD ]
Line_19 $$ sampler = new SplitSampler<K, V>(numSamples, maxSplits)-->Line_52 $$ if (null == sampler) [ FD ]
Line_10 $$ if ("-inFormat".equals(args[i])) -->Line_11 $$ job.setInputFormatClass(Class.forName(args[++i]).asSubclass(InputFormat.class))[ CD ]
Line_19 $$ sampler = new SplitSampler<K, V>(numSamples, maxSplits)-->Line_60 $$ InputSampler.<K, V>writePartitionFile(job, sampler)[ FD ]
Line_10 $$ if ("-inFormat".equals(args[i])) -->Line_12 $$ if ("-keyClass".equals(args[i])) [ CD ]
Line_25 $$ maxSplits = Integer.MAX_VALUE-->Line_24 $$ if (0 >= maxSplits)[ FD ]
Line_44 $$ if (job.getNumReduceTasks() <= 1) -->Line_46 $$ return printUsage()[ CD ]
Line_14 $$ if ("-splitSample".equals(args[i])) -->Line_15 $$ int numSamples = Integer.parseInt(args[++i])[ CD ]
Line_2 $$ public int run(String[] args) throws Exception -->Line_44 $$ if (job.getNumReduceTasks() <= 1) [ CD ]
Line_30 $$ if (0 >= maxSplits)-->Line_31 $$ maxSplits = Integer.MAX_VALUE[ CD ]
Line_14 $$ if ("-splitSample".equals(args[i])) -->Line_20 $$ if ("-splitRandom".equals(args[i])) [ CD ]
Line_2 $$ public int run(String[] args) throws Exception -->Line_52 $$ if (null == sampler) [ CD ]
Line_16 $$ int maxSplits = Integer.parseInt(args[++i])-->Line_25 $$ maxSplits = Integer.MAX_VALUE[ FD ]
Line_19 $$ sampler = new SplitSampler<K, V>(numSamples, maxSplits)-->Line_26 $$ sampler = new RandomSampler<K, V>(pcnt, numSamples, maxSplits)[ FD ]
Line_26 $$ sampler = new RandomSampler<K, V>(pcnt, numSamples, maxSplits)-->Line_53 $$ sampler = new RandomSampler<K, V>(0.1, 10000, 10)[ FD ]
Line_16 $$ int maxSplits = Integer.parseInt(args[++i])-->Line_31 $$ maxSplits = Integer.MAX_VALUE[ FD ]
Line_27 $$ if ("-splitInterval".equals(args[i])) -->Line_28 $$ double pcnt = Double.parseDouble(args[++i])[ CD ]
Line_6 $$ for (int i = 0; i < args.length; ++i) -->Line_28 $$ double pcnt = Double.parseDouble(args[++i])[ FD ]
Line_27 $$ if ("-splitInterval".equals(args[i])) -->Line_30 $$ if (0 >= maxSplits)[ CD ]
Line_20 $$ if ("-splitRandom".equals(args[i])) -->Line_22 $$ int numSamples = Integer.parseInt(args[++i])[ CD ]
Line_52 $$ if (null == sampler) -->Line_53 $$ sampler = new RandomSampler<K, V>(0.1, 10000, 10)[ CD ]
Line_20 $$ if ("-splitRandom".equals(args[i])) -->Line_27 $$ if ("-splitInterval".equals(args[i])) [ CD ]
Line_6 $$ for (int i = 0; i < args.length; ++i) -->Line_11 $$ job.setInputFormatClass(Class.forName(args[++i]).asSubclass(InputFormat.class))[ FD ]
Line_26 $$ sampler = new RandomSampler<K, V>(pcnt, numSamples, maxSplits)-->Line_32 $$ sampler = new IntervalSampler<K, V>(pcnt, maxSplits)[ FD ]
Line_20 $$ if ("-splitRandom".equals(args[i])) -->Line_24 $$ if (0 >= maxSplits)[ CD ]
Line_3 $$ Job job = new Job(getConf())-->Line_11 $$ job.setInputFormatClass(Class.forName(args[++i]).asSubclass(InputFormat.class))[ FD ]
Line_2 $$ public int run(String[] args) throws Exception -->Line_60 $$ InputSampler.<K, V>writePartitionFile(job, sampler)[ CD ]
Line_5 $$ Sampler<K, V> sampler = null-->Line_60 $$ InputSampler.<K, V>writePartitionFile(job, sampler)[ FD ]
Line_20 $$ if ("-splitRandom".equals(args[i])) -->Line_21 $$ double pcnt = Double.parseDouble(args[++i])[ CD ]
Line_4 $$ ArrayList<String> otherArgs = new ArrayList<String>()-->Line_55 $$ Path outf = new Path(otherArgs.remove(otherArgs.size() - 1))[ FD ]
Line_6 $$ for (int i = 0; i < args.length; ++i) -->Line_15 $$ int numSamples = Integer.parseInt(args[++i])[ FD ]
Line_24 $$ if (0 >= maxSplits)-->Line_25 $$ maxSplits = Integer.MAX_VALUE[ CD ]
Line_5 $$ Sampler<K, V> sampler = null-->Line_53 $$ sampler = new RandomSampler<K, V>(0.1, 10000, 10)[ FD ]
Line_16 $$ int maxSplits = Integer.parseInt(args[++i])-->Line_17 $$ if (0 >= maxSplits)[ FD ]
Line_12 $$ if ("-keyClass".equals(args[i])) -->Line_13 $$ job.setMapOutputKeyClass(Class.forName(args[++i]).asSubclass(WritableComparable.class))[ CD ]
Line_26 $$ sampler = new RandomSampler<K, V>(pcnt, numSamples, maxSplits)-->Line_52 $$ if (null == sampler) [ FD ]
Line_27 $$ if ("-splitInterval".equals(args[i])) -->Line_29 $$ int maxSplits = Integer.parseInt(args[++i])[ CD ]
Line_14 $$ if ("-splitSample".equals(args[i])) -->Line_16 $$ int maxSplits = Integer.parseInt(args[++i])[ CD ]
Line_27 $$ if ("-splitInterval".equals(args[i])) -->Line_32 $$ sampler = new IntervalSampler<K, V>(pcnt, maxSplits)[ CD ]
Line_16 $$ int maxSplits = Integer.parseInt(args[++i])-->Line_30 $$ if (0 >= maxSplits)[ FD ]
Line_8 $$ if ("-r".equals(args[i])) -->Line_10 $$ if ("-inFormat".equals(args[i])) [ CD ]
Line_14 $$ if ("-splitSample".equals(args[i])) -->Line_17 $$ if (0 >= maxSplits)[ CD ]
Line_27 $$ if ("-splitInterval".equals(args[i])) -->Line_34 $$ otherArgs.add(args[i])[ CD ]
Line_18 $$ maxSplits = Integer.MAX_VALUE-->Line_24 $$ if (0 >= maxSplits)[ FD ]
Line_2 $$ public int run(String[] args) throws Exception -->Line_3 $$ Job job = new Job(getConf())[ CD ]
Line_3 $$ Job job = new Job(getConf())-->Line_9 $$ job.setNumReduceTasks(Integer.parseInt(args[++i]))[ FD ]
Line_2 $$ public int run(String[] args) throws Exception -->Line_4 $$ ArrayList<String> otherArgs = new ArrayList<String>()[ CD ]
Line_4 $$ ArrayList<String> otherArgs = new ArrayList<String>()-->Line_48 $$ if (otherArgs.size() < 2) [ FD ]
Line_2 $$ public int run(String[] args) throws Exception -->Line_55 $$ Path outf = new Path(otherArgs.remove(otherArgs.size() - 1))[ CD ]
Line_6 $$ for (int i = 0; i < args.length; ++i) -->Line_23 $$ int maxSplits = Integer.parseInt(args[++i])[ FD ]
Line_5 $$ Sampler<K, V> sampler = null-->Line_52 $$ if (null == sampler) [ FD ]
Line_6 $$ for (int i = 0; i < args.length; ++i) -->Line_29 $$ int maxSplits = Integer.parseInt(args[++i])[ FD ]
Line_2 $$ public int run(String[] args) throws Exception -->Line_48 $$ if (otherArgs.size() < 2) [ CD ]
Line_20 $$ if ("-splitRandom".equals(args[i])) -->Line_26 $$ sampler = new RandomSampler<K, V>(pcnt, numSamples, maxSplits)[ CD ]
Line_48 $$ if (otherArgs.size() < 2) -->Line_50 $$ return printUsage()[ CD ]
Line_32 $$ sampler = new IntervalSampler<K, V>(pcnt, maxSplits)-->Line_52 $$ if (null == sampler) [ FD ]
Line_53 $$ sampler = new RandomSampler<K, V>(0.1, 10000, 10)-->Line_60 $$ InputSampler.<K, V>writePartitionFile(job, sampler)[ FD ]
Line_26 $$ sampler = new RandomSampler<K, V>(pcnt, numSamples, maxSplits)-->Line_60 $$ InputSampler.<K, V>writePartitionFile(job, sampler)[ FD ]
Line_4 $$ ArrayList<String> otherArgs = new ArrayList<String>()-->Line_34 $$ otherArgs.add(args[i])[ FD ]
Line_31 $$ maxSplits = Integer.MAX_VALUE-->Line_30 $$ if (0 >= maxSplits)[ FD ]
Line_6 $$ for (int i = 0; i < args.length; ++i) -->Line_13 $$ job.setMapOutputKeyClass(Class.forName(args[++i]).asSubclass(WritableComparable.class))[ FD ]
Line_3 $$ Job job = new Job(getConf())-->Line_44 $$ if (job.getNumReduceTasks() <= 1) [ FD ]
Line_5 $$ Sampler<K, V> sampler = null-->Line_19 $$ sampler = new SplitSampler<K, V>(numSamples, maxSplits)[ FD ]
Line_31 $$ maxSplits = Integer.MAX_VALUE-->Line_17 $$ if (0 >= maxSplits)[ FD ]
Line_32 $$ sampler = new IntervalSampler<K, V>(pcnt, maxSplits)-->Line_60 $$ InputSampler.<K, V>writePartitionFile(job, sampler)[ FD ]
Line_19 $$ sampler = new SplitSampler<K, V>(numSamples, maxSplits)-->Line_53 $$ sampler = new RandomSampler<K, V>(0.1, 10000, 10)[ FD ]
Line_14 $$ if ("-splitSample".equals(args[i])) -->Line_19 $$ sampler = new SplitSampler<K, V>(numSamples, maxSplits)[ CD ]
Line_2 $$ public int run(String[] args) throws Exception -->Line_56 $$ TotalOrderPartitioner.setPartitionFile(getConf(), outf)[ CD ]
Line_19 $$ sampler = new SplitSampler<K, V>(numSamples, maxSplits)-->Line_32 $$ sampler = new IntervalSampler<K, V>(pcnt, maxSplits)[ FD ]
Line_3 $$ Job job = new Job(getConf())-->Line_60 $$ InputSampler.<K, V>writePartitionFile(job, sampler)[ FD ]
Line_16 $$ int maxSplits = Integer.parseInt(args[++i])-->Line_18 $$ maxSplits = Integer.MAX_VALUE[ FD ]
Line_18 $$ maxSplits = Integer.MAX_VALUE-->Line_17 $$ if (0 >= maxSplits)[ FD ]
Line_18 $$ maxSplits = Integer.MAX_VALUE-->Line_31 $$ maxSplits = Integer.MAX_VALUE[ FD ]
Line_25 $$ maxSplits = Integer.MAX_VALUE-->Line_17 $$ if (0 >= maxSplits)[ FD ]
Line_8 $$ if ("-r".equals(args[i])) -->Line_9 $$ job.setNumReduceTasks(Integer.parseInt(args[++i]))[ CD ]
Line_5 $$ Sampler<K, V> sampler = null-->Line_26 $$ sampler = new RandomSampler<K, V>(pcnt, numSamples, maxSplits)[ FD ]
Line_32 $$ sampler = new IntervalSampler<K, V>(pcnt, maxSplits)-->Line_53 $$ sampler = new RandomSampler<K, V>(0.1, 10000, 10)[ FD ]
Line_6 $$ for (int i = 0; i < args.length; ++i) -->Line_22 $$ int numSamples = Integer.parseInt(args[++i])[ FD ]
Line_18 $$ maxSplits = Integer.MAX_VALUE-->Line_30 $$ if (0 >= maxSplits)[ FD ]
Line_17 $$ if (0 >= maxSplits)-->Line_18 $$ maxSplits = Integer.MAX_VALUE[ CD ]
Line_2 $$ public int run(String[] args) throws Exception -->Line_6 $$ for (int i = 0; i < args.length; ++i) [ CD ]
Line_44 $$ if (job.getNumReduceTasks() <= 1) -->Line_45 $$ System.err.println("Sampler requires more than one reducer")[ CD ]
Line_6 $$ for (int i = 0; i < args.length; ++i) -->Line_21 $$ double pcnt = Double.parseDouble(args[++i])[ FD ]
Line_31 $$ maxSplits = Integer.MAX_VALUE-->Line_24 $$ if (0 >= maxSplits)[ FD ]
Line_16 $$ int maxSplits = Integer.parseInt(args[++i])-->Line_24 $$ if (0 >= maxSplits)[ FD ]
Line_2 $$ public int run(String[] args) throws Exception -->Line_61 $$ return 0[ CD ]
Line_3 $$ Job job = new Job(getConf())-->Line_58 $$ FileInputFormat.addInputPath(job, new Path(s))[ FD ]
Line_2 $$ public int run(String[] args) throws Exception -->Line_5 $$ Sampler<K, V> sampler = null[ CD ]
Line_5 $$ Sampler<K, V> sampler = null-->Line_32 $$ sampler = new IntervalSampler<K, V>(pcnt, maxSplits)[ FD ]
Line_48 $$ if (otherArgs.size() < 2) -->Line_49 $$ System.out.println("ERROR: Wrong number of parameters: ")[ CD ]
Line_25 $$ maxSplits = Integer.MAX_VALUE-->Line_30 $$ if (0 >= maxSplits)[ FD ]
Line_6 $$ for (int i = 0; i < args.length; ++i) -->Line_16 $$ int maxSplits = Integer.parseInt(args[++i])[ FD ]
Line_20 $$ if ("-splitRandom".equals(args[i])) -->Line_23 $$ int maxSplits = Integer.parseInt(args[++i])[ CD ]
