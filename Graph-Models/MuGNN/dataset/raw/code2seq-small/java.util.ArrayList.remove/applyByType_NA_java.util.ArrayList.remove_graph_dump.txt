Line_18 $$ settings = (RunnerAndConfigurationSettings) configurable.getSettings()-->Line_19 $$ if (settings.isTemporary()) [ FD ]
Line_57 $$ if (configurable != null) -->Line_58 $$ applyConfiguration(typeNode, configurable)[ CD ]
Line_27 $$ if (configurationBean != null) -->Line_35 $$ if (settings == selectedSettings) [ CD ]
Line_18 $$ settings = (RunnerAndConfigurationSettings) configurable.getSettings()-->Line_35 $$ if (settings == selectedSettings) [ FD ]
Line_8 $$ if (typeNode != null) -->Line_10 $$ List<DefaultMutableTreeNode> configurationNodes = new ArrayList<DefaultMutableTreeNode>()[ CD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_61 $$ Set<RunnerAndConfigurationSettings> toDeleteSettings = new THashSet<RunnerAndConfigurationSettings>()[ CD ]
Line_27 $$ if (configurationBean != null) -->Line_30 $$ if (!names.add(nameText)) [ CD ]
Line_25 $$ configurationBean = new RunConfigurationBean(settings, manager.isConfigurationShared(settings), manager.getBeforeRunTasks(settings.getConfiguration()))-->Line_34 $$ stableConfigurations.add(configurationBean)[ FD ]
Line_62 $$ for (RunConfiguration each : manager.getConfigurationsList(type)) -->Line_63 $$ ContainerUtil.addIfNotNull(toDeleteSettings, manager.getSettings(each))[ FD ]
Line_4 $$ int indexToMove = -1-->Line_70 $$ stableConfigurations.add(indexToMove - shift, stableConfigurations.remove(indexToMove))[ FD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_6 $$ final RunManagerImpl manager = getRunManager()[ CD ]
Line_12 $$ for (DefaultMutableTreeNode node : configurationNodes) -->Line_44 $$ String folderName = (String) node.getUserObject()[ FD ]
Line_12 $$ for (DefaultMutableTreeNode node : configurationNodes) -->Line_31 $$ TreeUtil.selectNode(myTree, node)[ FD ]
Line_3 $$ RunnerAndConfigurationSettings selectedSettings = getSelectedSettings()-->Line_35 $$ if (settings == selectedSettings) [ FD ]
Line_16 $$ if (userObject instanceof SingleConfigurationConfigurable) -->Line_22 $$ configurationBean = new RunConfigurationBean(configurable)[ CD ]
Line_18 $$ settings = (RunnerAndConfigurationSettings) configurable.getSettings()-->Line_24 $$ settings = (RunnerAndConfigurationSettings) userObject[ FD ]
Line_35 $$ if (settings == selectedSettings) -->Line_36 $$ indexToMove = stableConfigurations.size() - 1[ CD ]
Line_61 $$ Set<RunnerAndConfigurationSettings> toDeleteSettings = new THashSet<RunnerAndConfigurationSettings>()-->Line_63 $$ ContainerUtil.addIfNotNull(toDeleteSettings, manager.getSettings(each))[ FD ]
Line_5 $$ DefaultMutableTreeNode typeNode = getConfigurationTypeNode(type)-->Line_58 $$ applyConfiguration(typeNode, configurable)[ FD ]
Line_6 $$ final RunManagerImpl manager = getRunManager()-->Line_63 $$ ContainerUtil.addIfNotNull(toDeleteSettings, manager.getSettings(each))[ FD ]
Line_62 $$ for (RunConfiguration each : manager.getConfigurationsList(type)) -->Line_77 $$ manager.removeConfiguration(each)[ FD ]
Line_23 $$ if (userObject instanceof RunnerAndConfigurationSettingsImpl) -->Line_24 $$ settings = (RunnerAndConfigurationSettings) userObject[ CD ]
Line_8 $$ if (typeNode != null) -->Line_40 $$ List<DefaultMutableTreeNode> folderNodes = new ArrayList<DefaultMutableTreeNode>()[ CD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_3 $$ RunnerAndConfigurationSettings selectedSettings = getSelectedSettings()[ CD ]
Line_22 $$ configurationBean = new RunConfigurationBean(configurable)-->Line_25 $$ configurationBean = new RunConfigurationBean(settings, manager.isConfigurationShared(settings), manager.getBeforeRunTasks(settings.getConfiguration()))[ FD ]
Line_15 $$ RunnerAndConfigurationSettings settings = null-->Line_18 $$ settings = (RunnerAndConfigurationSettings) configurable.getSettings()[ FD ]
Line_7 $$ final ArrayList<RunConfigurationBean> stableConfigurations = new ArrayList<RunConfigurationBean>()-->Line_70 $$ stableConfigurations.add(indexToMove - shift, stableConfigurations.remove(indexToMove))[ FD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_66 $$ if (selectedSettings != null && selectedSettings.getType() == type) [ CD ]
Line_8 $$ if (typeNode != null) -->Line_42 $$ names.clear()[ CD ]
Line_8 $$ if (typeNode != null) -->Line_11 $$ collectNodesRecursively(typeNode, configurationNodes, CONFIGURATION, TEMPORARY_CONFIGURATION)[ CD ]
Line_8 $$ if (typeNode != null) -->Line_41 $$ collectNodesRecursively(typeNode, folderNodes, FOLDER)[ CD ]
Line_10 $$ List<DefaultMutableTreeNode> configurationNodes = new ArrayList<DefaultMutableTreeNode>()-->Line_11 $$ collectNodesRecursively(typeNode, configurationNodes, CONFIGURATION, TEMPORARY_CONFIGURATION)[ FD ]
Line_22 $$ configurationBean = new RunConfigurationBean(configurable)-->Line_27 $$ if (configurationBean != null) [ FD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_5 $$ DefaultMutableTreeNode typeNode = getConfigurationTypeNode(type)[ FD ]
Line_55 $$ for (RunConfigurationBean bean : stableConfigurations) -->Line_56 $$ final SingleConfigurationConfigurable configurable = bean.getConfigurable()[ FD ]
Line_6 $$ final RunManagerImpl manager = getRunManager()-->Line_62 $$ for (RunConfiguration each : manager.getConfigurationsList(type)) [ FD ]
Line_27 $$ if (configurationBean != null) -->Line_29 $$ final String nameText = configurable != null ? configurable.getNameText() : configurationBean.getSettings().getName()[ CD ]
Line_17 $$ final SingleConfigurationConfigurable configurable = (SingleConfigurationConfigurable) userObject-->Line_20 $$ applyConfiguration(typeNode, configurable)[ FD ]
Line_13 $$ final Object userObject = node.getUserObject()-->Line_16 $$ if (userObject instanceof SingleConfigurationConfigurable) [ FD ]
Line_16 $$ if (userObject instanceof SingleConfigurationConfigurable) -->Line_23 $$ if (userObject instanceof RunnerAndConfigurationSettingsImpl) [ CD ]
Line_14 $$ RunConfigurationBean configurationBean = null-->Line_29 $$ final String nameText = configurable != null ? configurable.getNameText() : configurationBean.getSettings().getName()[ FD ]
Line_25 $$ configurationBean = new RunConfigurationBean(settings, manager.isConfigurationShared(settings), manager.getBeforeRunTasks(settings.getConfiguration()))-->Line_27 $$ if (configurationBean != null) [ FD ]
Line_14 $$ RunConfigurationBean configurationBean = null-->Line_28 $$ final SingleConfigurationConfigurable configurable = configurationBean.getConfigurable()[ FD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_8 $$ if (typeNode != null) [ CD ]
Line_3 $$ RunnerAndConfigurationSettings selectedSettings = getSelectedSettings()-->Line_66 $$ if (selectedSettings != null && selectedSettings.getType() == type) [ FD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_65 $$ int shift = 0[ CD ]
Line_8 $$ if (typeNode != null) -->Line_9 $$ final Set<String> names = new HashSet<String>()[ CD ]
Line_49 $$ if (!names.add(folderName)) -->Line_50 $$ TreeUtil.selectNode(myTree, node)[ CD ]
Line_7 $$ final ArrayList<RunConfigurationBean> stableConfigurations = new ArrayList<RunConfigurationBean>()-->Line_34 $$ stableConfigurations.add(configurationBean)[ FD ]
Line_15 $$ RunnerAndConfigurationSettings settings = null-->Line_19 $$ if (settings.isTemporary()) [ FD ]
Line_5 $$ DefaultMutableTreeNode typeNode = getConfigurationTypeNode(type)-->Line_41 $$ collectNodesRecursively(typeNode, folderNodes, FOLDER)[ FD ]
Line_12 $$ for (DefaultMutableTreeNode node : configurationNodes) -->Line_13 $$ final Object userObject = node.getUserObject()[ FD ]
Line_29 $$ final String nameText = configurable != null ? configurable.getNameText() : configurationBean.getSettings().getName()-->Line_30 $$ if (!names.add(nameText)) [ FD ]
Line_12 $$ for (DefaultMutableTreeNode node : configurationNodes) -->Line_50 $$ TreeUtil.selectNode(myTree, node)[ FD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_5 $$ DefaultMutableTreeNode typeNode = getConfigurationTypeNode(type)[ CD ]
Line_6 $$ final RunManagerImpl manager = getRunManager()-->Line_77 $$ manager.removeConfiguration(each)[ FD ]
Line_25 $$ configurationBean = new RunConfigurationBean(settings, manager.isConfigurationShared(settings), manager.getBeforeRunTasks(settings.getConfiguration()))-->Line_28 $$ final SingleConfigurationConfigurable configurable = configurationBean.getConfigurable()[ FD ]
Line_9 $$ final Set<String> names = new HashSet<String>()-->Line_30 $$ if (!names.add(nameText)) [ FD ]
Line_17 $$ final SingleConfigurationConfigurable configurable = (SingleConfigurationConfigurable) userObject-->Line_29 $$ final String nameText = configurable != null ? configurable.getNameText() : configurationBean.getSettings().getName()[ FD ]
Line_17 $$ final SingleConfigurationConfigurable configurable = (SingleConfigurationConfigurable) userObject-->Line_58 $$ applyConfiguration(typeNode, configurable)[ FD ]
Line_14 $$ RunConfigurationBean configurationBean = null-->Line_25 $$ configurationBean = new RunConfigurationBean(settings, manager.isConfigurationShared(settings), manager.getBeforeRunTasks(settings.getConfiguration()))[ FD ]
Line_6 $$ final RunManagerImpl manager = getRunManager()-->Line_74 $$ manager.addConfiguration(each.getSettings(), each.isShared(), each.getStepsBeforeLaunch(), false)[ FD ]
Line_22 $$ configurationBean = new RunConfigurationBean(configurable)-->Line_29 $$ final String nameText = configurable != null ? configurable.getNameText() : configurationBean.getSettings().getName()[ FD ]
Line_36 $$ indexToMove = stableConfigurations.size() - 1-->Line_70 $$ stableConfigurations.add(indexToMove - shift, stableConfigurations.remove(indexToMove))[ FD ]
Line_62 $$ for (RunConfiguration each : manager.getConfigurationsList(type)) -->Line_74 $$ manager.addConfiguration(each.getSettings(), each.isShared(), each.getStepsBeforeLaunch(), false)[ FD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_32 $$ throw new ConfigurationException(type.getDisplayName() + " with name \'" + nameText + "\' already exists")[ FD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_7 $$ final ArrayList<RunConfigurationBean> stableConfigurations = new ArrayList<RunConfigurationBean>()[ CD ]
Line_14 $$ RunConfigurationBean configurationBean = null-->Line_22 $$ configurationBean = new RunConfigurationBean(configurable)[ FD ]
Line_16 $$ if (userObject instanceof SingleConfigurationConfigurable) -->Line_19 $$ if (settings.isTemporary()) [ CD ]
Line_15 $$ RunnerAndConfigurationSettings settings = null-->Line_25 $$ configurationBean = new RunConfigurationBean(settings, manager.isConfigurationShared(settings), manager.getBeforeRunTasks(settings.getConfiguration()))[ FD ]
Line_30 $$ if (!names.add(nameText)) -->Line_31 $$ TreeUtil.selectNode(myTree, node)[ CD ]
Line_27 $$ if (configurationBean != null) -->Line_34 $$ stableConfigurations.add(configurationBean)[ CD ]
Line_24 $$ settings = (RunnerAndConfigurationSettings) userObject-->Line_35 $$ if (settings == selectedSettings) [ FD ]
Line_13 $$ final Object userObject = node.getUserObject()-->Line_23 $$ if (userObject instanceof RunnerAndConfigurationSettingsImpl) [ FD ]
Line_5 $$ DefaultMutableTreeNode typeNode = getConfigurationTypeNode(type)-->Line_20 $$ applyConfiguration(typeNode, configurable)[ FD ]
Line_45 $$ if (folderName.isEmpty()) -->Line_46 $$ TreeUtil.selectNode(myTree, node)[ CD ]
Line_16 $$ if (userObject instanceof SingleConfigurationConfigurable) -->Line_17 $$ final SingleConfigurationConfigurable configurable = (SingleConfigurationConfigurable) userObject[ CD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_69 $$ if (shift != 0 && indexToMove != -1) [ CD ]
Line_6 $$ final RunManagerImpl manager = getRunManager()-->Line_25 $$ configurationBean = new RunConfigurationBean(settings, manager.isConfigurationShared(settings), manager.getBeforeRunTasks(settings.getConfiguration()))[ FD ]
Line_14 $$ RunConfigurationBean configurationBean = null-->Line_34 $$ stableConfigurations.add(configurationBean)[ FD ]
Line_5 $$ DefaultMutableTreeNode typeNode = getConfigurationTypeNode(type)-->Line_11 $$ collectNodesRecursively(typeNode, configurationNodes, CONFIGURATION, TEMPORARY_CONFIGURATION)[ FD ]
Line_22 $$ configurationBean = new RunConfigurationBean(configurable)-->Line_34 $$ stableConfigurations.add(configurationBean)[ FD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_62 $$ for (RunConfiguration each : manager.getConfigurationsList(type)) [ FD ]
Line_7 $$ final ArrayList<RunConfigurationBean> stableConfigurations = new ArrayList<RunConfigurationBean>()-->Line_36 $$ indexToMove = stableConfigurations.size() - 1[ FD ]
Line_16 $$ if (userObject instanceof SingleConfigurationConfigurable) -->Line_18 $$ settings = (RunnerAndConfigurationSettings) configurable.getSettings()[ CD ]
Line_12 $$ for (DefaultMutableTreeNode node : configurationNodes) -->Line_46 $$ TreeUtil.selectNode(myTree, node)[ FD ]
Line_9 $$ final Set<String> names = new HashSet<String>()-->Line_49 $$ if (!names.add(folderName)) [ FD ]
Line_4 $$ int indexToMove = -1-->Line_36 $$ indexToMove = stableConfigurations.size() - 1[ FD ]
Line_17 $$ final SingleConfigurationConfigurable configurable = (SingleConfigurationConfigurable) userObject-->Line_18 $$ settings = (RunnerAndConfigurationSettings) configurable.getSettings()[ FD ]
Line_62 $$ for (RunConfiguration each : manager.getConfigurationsList(type)) -->Line_73 $$ toDeleteSettings.remove(each.getSettings())[ FD ]
Line_18 $$ settings = (RunnerAndConfigurationSettings) configurable.getSettings()-->Line_25 $$ configurationBean = new RunConfigurationBean(settings, manager.isConfigurationShared(settings), manager.getBeforeRunTasks(settings.getConfiguration()))[ FD ]
Line_61 $$ Set<RunnerAndConfigurationSettings> toDeleteSettings = new THashSet<RunnerAndConfigurationSettings>()-->Line_73 $$ toDeleteSettings.remove(each.getSettings())[ FD ]
Line_69 $$ if (shift != 0 && indexToMove != -1) -->Line_70 $$ stableConfigurations.add(indexToMove - shift, stableConfigurations.remove(indexToMove))[ CD ]
Line_19 $$ if (settings.isTemporary()) -->Line_20 $$ applyConfiguration(typeNode, configurable)[ CD ]
Line_17 $$ final SingleConfigurationConfigurable configurable = (SingleConfigurationConfigurable) userObject-->Line_57 $$ if (configurable != null) [ FD ]
Line_15 $$ RunnerAndConfigurationSettings settings = null-->Line_24 $$ settings = (RunnerAndConfigurationSettings) userObject[ FD ]
Line_22 $$ configurationBean = new RunConfigurationBean(configurable)-->Line_28 $$ final SingleConfigurationConfigurable configurable = configurationBean.getConfigurable()[ FD ]
Line_65 $$ int shift = 0-->Line_67 $$ shift = adjustOrder()[ FD ]
Line_14 $$ RunConfigurationBean configurationBean = null-->Line_27 $$ if (configurationBean != null) [ FD ]
Line_2 $$ private void applyByType(@NotNull ConfigurationType type) throws ConfigurationException -->Line_4 $$ int indexToMove = -1[ CD ]
Line_66 $$ if (selectedSettings != null && selectedSettings.getType() == type) -->Line_67 $$ shift = adjustOrder()[ CD ]
Line_25 $$ configurationBean = new RunConfigurationBean(settings, manager.isConfigurationShared(settings), manager.getBeforeRunTasks(settings.getConfiguration()))-->Line_29 $$ final String nameText = configurable != null ? configurable.getNameText() : configurationBean.getSettings().getName()[ FD ]
Line_23 $$ if (userObject instanceof RunnerAndConfigurationSettingsImpl) -->Line_25 $$ configurationBean = new RunConfigurationBean(settings, manager.isConfigurationShared(settings), manager.getBeforeRunTasks(settings.getConfiguration()))[ CD ]
Line_27 $$ if (configurationBean != null) -->Line_28 $$ final SingleConfigurationConfigurable configurable = configurationBean.getConfigurable()[ CD ]
Line_24 $$ settings = (RunnerAndConfigurationSettings) userObject-->Line_25 $$ configurationBean = new RunConfigurationBean(settings, manager.isConfigurationShared(settings), manager.getBeforeRunTasks(settings.getConfiguration()))[ FD ]
Line_15 $$ RunnerAndConfigurationSettings settings = null-->Line_35 $$ if (settings == selectedSettings) [ FD ]
Line_40 $$ List<DefaultMutableTreeNode> folderNodes = new ArrayList<DefaultMutableTreeNode>()-->Line_41 $$ collectNodesRecursively(typeNode, folderNodes, FOLDER)[ FD ]
Line_5 $$ DefaultMutableTreeNode typeNode = getConfigurationTypeNode(type)-->Line_8 $$ if (typeNode != null) [ FD ]
Line_44 $$ String folderName = (String) node.getUserObject()-->Line_45 $$ if (folderName.isEmpty()) [ FD ]
Line_44 $$ String folderName = (String) node.getUserObject()-->Line_49 $$ if (!names.add(folderName)) [ FD ]
Line_9 $$ final Set<String> names = new HashSet<String>()-->Line_42 $$ names.clear()[ FD ]
