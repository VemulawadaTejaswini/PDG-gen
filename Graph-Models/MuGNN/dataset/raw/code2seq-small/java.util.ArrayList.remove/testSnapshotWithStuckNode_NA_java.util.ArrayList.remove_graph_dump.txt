Line_7 $$ Client client = client()-->Line_18 $$ PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.settingsBuilder().put("location", repo).put("random", randomAsciiOfLength(10)).put("wait_after_unblock", 200)).get()[ FD ]
Line_18 $$ PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.settingsBuilder().put("location", repo).put("random", randomAsciiOfLength(10)).put("wait_after_unblock", 200)).get()-->Line_19 $$ assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true))[ FD ]
Line_4 $$ ArrayList<String> nodes = new ArrayList()-->Line_6 $$ nodes.add(internalCluster().startNode())[ FD ]
Line_17 $$ Path repo = randomRepoPath()-->Line_22 $$ int numberOfFilesBeforeSnapshot = numberOfFiles(repo)[ FD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_22 $$ int numberOfFilesBeforeSnapshot = numberOfFiles(repo)[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_5 $$ nodes.add(internalCluster().startNode())[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_26 $$ waitForBlock(blockedNode, "test-repo", TimeValue.timeValueSeconds(60))[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_21 $$ nodes.remove(blockedNode)[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_14 $$ refresh()[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_9 $$ ensureGreen()[ CD ]
Line_4 $$ ArrayList<String> nodes = new ArrayList()-->Line_5 $$ nodes.add(internalCluster().startNode())[ FD ]
Line_20 $$ String blockedNode = blockNodeWithIndex("test-idx")-->Line_26 $$ waitForBlock(blockedNode, "test-repo", TimeValue.timeValueSeconds(60))[ FD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_8 $$ assertAcked(prepareCreate("test-idx", 2, settingsBuilder().put("number_of_shards", 2).put("number_of_replicas", 0)))[ CD ]
Line_20 $$ String blockedNode = blockNodeWithIndex("test-idx")-->Line_30 $$ unblockNode(blockedNode)[ FD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_29 $$ Thread.sleep(100)[ CD ]
Line_34 $$ DeleteSnapshotResponse deleteSnapshotResponse = deleteSnapshotResponseFuture.actionGet()-->Line_35 $$ assertThat(deleteSnapshotResponse.isAcknowledged(), equalTo(true))[ FD ]
Line_7 $$ Client client = client()-->Line_15 $$ assertThat(client.prepareSearch("test-idx").setSize(0).get().getHits().totalHits(), equalTo(100L))[ FD ]
Line_28 $$ ListenableActionFuture<DeleteSnapshotResponse> deleteSnapshotResponseFuture = internalCluster().client(nodes.get(0)).admin().cluster().prepareDeleteSnapshot("test-repo", "test-snap").execute()-->Line_34 $$ DeleteSnapshotResponse deleteSnapshotResponse = deleteSnapshotResponseFuture.actionGet()[ FD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_30 $$ unblockNode(blockedNode)[ CD ]
Line_17 $$ Path repo = randomRepoPath()-->Line_18 $$ PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.settingsBuilder().put("location", repo).put("random", randomAsciiOfLength(10)).put("wait_after_unblock", 200)).get()[ FD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_7 $$ Client client = client()[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_32 $$ stopNode(blockedNode)[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_17 $$ Path repo = randomRepoPath()[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_28 $$ ListenableActionFuture<DeleteSnapshotResponse> deleteSnapshotResponseFuture = internalCluster().client(nodes.get(0)).admin().cluster().prepareDeleteSnapshot("test-repo", "test-snap").execute()[ CD ]
Line_20 $$ String blockedNode = blockNodeWithIndex("test-idx")-->Line_21 $$ nodes.remove(blockedNode)[ FD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_6 $$ nodes.add(internalCluster().startNode())[ CD ]
Line_11 $$ for (int i = 0; i < 100; i++) -->Line_12 $$ index("test-idx", "doc", Integer.toString(i), "foo", "bar" + i)[ FD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_4 $$ ArrayList<String> nodes = new ArrayList()[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_40 $$ assertThat("not all files were deleted during snapshot cancellation", numberOfFilesBeforeSnapshot, equalTo(numberOfFiles(repo) - 1))[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_39 $$ assertThrows(client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").execute(), SnapshotMissingException.class)[ CD ]
Line_11 $$ for (int i = 0; i < 100; i++) -->Line_12 $$ index("test-idx", "doc", Integer.toString(i), "foo", "bar" + i)[ CD ]
Line_4 $$ ArrayList<String> nodes = new ArrayList()-->Line_21 $$ nodes.remove(blockedNode)[ FD ]
Line_17 $$ Path repo = randomRepoPath()-->Line_40 $$ assertThat("not all files were deleted during snapshot cancellation", numberOfFilesBeforeSnapshot, equalTo(numberOfFiles(repo) - 1))[ FD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_15 $$ assertThat(client.prepareSearch("test-idx").setSize(0).get().getHits().totalHits(), equalTo(100L))[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_20 $$ String blockedNode = blockNodeWithIndex("test-idx")[ CD ]
Line_20 $$ String blockedNode = blockNodeWithIndex("test-idx")-->Line_32 $$ stopNode(blockedNode)[ FD ]
Line_4 $$ ArrayList<String> nodes = new ArrayList()-->Line_28 $$ ListenableActionFuture<DeleteSnapshotResponse> deleteSnapshotResponseFuture = internalCluster().client(nodes.get(0)).admin().cluster().prepareDeleteSnapshot("test-repo", "test-snap").execute()[ FD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_19 $$ assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true))[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_24 $$ client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(false).setIndices("test-idx").get()[ CD ]
Line_22 $$ int numberOfFilesBeforeSnapshot = numberOfFiles(repo)-->Line_40 $$ assertThat("not all files were deleted during snapshot cancellation", numberOfFilesBeforeSnapshot, equalTo(numberOfFiles(repo) - 1))[ FD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_18 $$ PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.settingsBuilder().put("location", repo).put("random", randomAsciiOfLength(10)).put("wait_after_unblock", 200)).get()[ CD ]
Line_2 $$ public void testSnapshotWithStuckNode() throws Exception -->Line_11 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_7 $$ Client client = client()-->Line_24 $$ client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(false).setIndices("test-idx").get()[ FD ]
