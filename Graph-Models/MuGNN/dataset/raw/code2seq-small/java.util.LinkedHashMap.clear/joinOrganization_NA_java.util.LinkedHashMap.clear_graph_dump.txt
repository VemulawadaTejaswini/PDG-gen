Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_4 $$ Group group = _groupLocalService.getGroup(themeDisplay.getScopeGroupId())[ FD ]
Line_7 $$ LinkedHashMap<String, Object> userParams = new LinkedHashMap()-->Line_8 $$ userParams.put("userGroupRole", new Long[] [ FD ]
Line_10 $$ if (users.isEmpty()) -->Line_11 $$ Role adminRole = _roleLocalService.getRole(themeDisplay.getCompanyId(), RoleConstants.ADMINISTRATOR)[ CD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_18 $$ _socialRequestLocalService.addRequest(themeDisplay.getUserId(), 0, Organization.class.getName(), organization.getOrganizationId(), MembersRequestKeys.ADD_MEMBER, extraDataJSONObject.toString(), user.getUserId())[ FD ]
Line_7 $$ LinkedHashMap<String, Object> userParams = new LinkedHashMap()-->Line_9 $$ List<User> users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ FD ]
Line_7 $$ LinkedHashMap<String, Object> userParams = new LinkedHashMap()-->Line_12 $$ userParams.clear()[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_9 $$ List<User> users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ FD ]
Line_9 $$ List<User> users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)-->Line_10 $$ if (users.isEmpty()) [ FD ]
Line_2 $$ public void joinOrganization(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_10 $$ if (users.isEmpty()) [ CD ]
Line_2 $$ public void joinOrganization(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_6 $$ Role role = _roleLocalService.getRole(themeDisplay.getCompanyId(), "Organization Administrator")[ CD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_6 $$ Role role = _roleLocalService.getRole(themeDisplay.getCompanyId(), "Organization Administrator")[ FD ]
Line_10 $$ if (users.isEmpty()) -->Line_14 $$ users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ CD ]
Line_16 $$ JSONObject extraDataJSONObject = getExtraDataJSONObject(actionRequest)-->Line_18 $$ _socialRequestLocalService.addRequest(themeDisplay.getUserId(), 0, Organization.class.getName(), organization.getOrganizationId(), MembersRequestKeys.ADD_MEMBER, extraDataJSONObject.toString(), user.getUserId())[ FD ]
Line_2 $$ public void joinOrganization(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_7 $$ LinkedHashMap<String, Object> userParams = new LinkedHashMap()[ CD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_14 $$ users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ FD ]
Line_2 $$ public void joinOrganization(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_5 $$ Organization organization = _organizationLocalService.getOrganization(group.getClassPK())[ CD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_11 $$ Role adminRole = _roleLocalService.getRole(themeDisplay.getCompanyId(), RoleConstants.ADMINISTRATOR)[ FD ]
Line_2 $$ public void joinOrganization(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_16 $$ JSONObject extraDataJSONObject = getExtraDataJSONObject(actionRequest)[ FD ]
Line_5 $$ Organization organization = _organizationLocalService.getOrganization(group.getClassPK())-->Line_18 $$ _socialRequestLocalService.addRequest(themeDisplay.getUserId(), 0, Organization.class.getName(), organization.getOrganizationId(), MembersRequestKeys.ADD_MEMBER, extraDataJSONObject.toString(), user.getUserId())[ FD ]
Line_2 $$ public void joinOrganization(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)[ CD ]
Line_2 $$ public void joinOrganization(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_16 $$ JSONObject extraDataJSONObject = getExtraDataJSONObject(actionRequest)[ CD ]
Line_10 $$ if (users.isEmpty()) -->Line_13 $$ userParams.put("usersRoles", adminRole.getRoleId())[ CD ]
Line_2 $$ public void joinOrganization(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)[ FD ]
Line_10 $$ if (users.isEmpty()) -->Line_12 $$ userParams.clear()[ CD ]
Line_2 $$ public void joinOrganization(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_9 $$ List<User> users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ CD ]
Line_7 $$ LinkedHashMap<String, Object> userParams = new LinkedHashMap()-->Line_14 $$ users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ FD ]
Line_2 $$ public void joinOrganization(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_4 $$ Group group = _groupLocalService.getGroup(themeDisplay.getScopeGroupId())[ CD ]
Line_6 $$ Role role = _roleLocalService.getRole(themeDisplay.getCompanyId(), "Organization Administrator")-->Line_8 $$ userParams.put("userGroupRole", new Long[] [ FD ]
Line_17 $$ for (User user : users) -->Line_18 $$ _socialRequestLocalService.addRequest(themeDisplay.getUserId(), 0, Organization.class.getName(), organization.getOrganizationId(), MembersRequestKeys.ADD_MEMBER, extraDataJSONObject.toString(), user.getUserId())[ FD ]
Line_4 $$ Group group = _groupLocalService.getGroup(themeDisplay.getScopeGroupId())-->Line_8 $$ userParams.put("userGroupRole", new Long[] [ FD ]
Line_2 $$ public void joinOrganization(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_8 $$ userParams.put("userGroupRole", new Long[] [ CD ]
Line_11 $$ Role adminRole = _roleLocalService.getRole(themeDisplay.getCompanyId(), RoleConstants.ADMINISTRATOR)-->Line_13 $$ userParams.put("usersRoles", adminRole.getRoleId())[ FD ]
Line_4 $$ Group group = _groupLocalService.getGroup(themeDisplay.getScopeGroupId())-->Line_5 $$ Organization organization = _organizationLocalService.getOrganization(group.getClassPK())[ FD ]
Line_9 $$ List<User> users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)-->Line_14 $$ users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ FD ]
Line_7 $$ LinkedHashMap<String, Object> userParams = new LinkedHashMap()-->Line_13 $$ userParams.put("usersRoles", adminRole.getRoleId())[ FD ]
