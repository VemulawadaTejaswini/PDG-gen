Line_4 $$ Group group = _groupLocalService.getGroup(themeDisplay.getScopeGroupId())-->Line_6 $$ _userLocalService.addGroupUsers(group.getGroupId(), new long[] [ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_4 $$ Group group = _groupLocalService.getGroup(themeDisplay.getScopeGroupId())[ FD ]
Line_2 $$ public void joinGroup(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_11 $$ userParams.put("userGroupRole", new Long[] [ CD ]
Line_20 $$ for (User user : users) -->Line_21 $$ _socialRequestLocalService.addRequest(themeDisplay.getUserId(), 0, Group.class.getName(), group.getGroupId(), MembersRequestKeys.ADD_MEMBER, extraDataJSONObject.toString(), user.getUserId())[ FD ]
Line_10 $$ LinkedHashMap<String, Object> userParams = new LinkedHashMap()-->Line_11 $$ userParams.put("userGroupRole", new Long[] [ FD ]
Line_2 $$ public void joinGroup(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)[ FD ]
Line_2 $$ public void joinGroup(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_5 $$ if (group.getType() == GroupConstants.TYPE_SITE_OPEN) [ CD ]
Line_13 $$ if (users.isEmpty()) -->Line_16 $$ userParams.put("usersRoles", adminRole.getRoleId())[ CD ]
Line_10 $$ LinkedHashMap<String, Object> userParams = new LinkedHashMap()-->Line_16 $$ userParams.put("usersRoles", adminRole.getRoleId())[ FD ]
Line_9 $$ Role siteAdminRole = _roleLocalService.getRole(themeDisplay.getCompanyId(), RoleConstants.SITE_ADMINISTRATOR)-->Line_11 $$ userParams.put("userGroupRole", new Long[] [ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_12 $$ List<User> users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ FD ]
Line_4 $$ Group group = _groupLocalService.getGroup(themeDisplay.getScopeGroupId())-->Line_11 $$ userParams.put("userGroupRole", new Long[] [ FD ]
Line_2 $$ public void joinGroup(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_13 $$ if (users.isEmpty()) [ CD ]
Line_13 $$ if (users.isEmpty()) -->Line_17 $$ users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ CD ]
Line_10 $$ LinkedHashMap<String, Object> userParams = new LinkedHashMap()-->Line_17 $$ users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ FD ]
Line_12 $$ List<User> users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)-->Line_17 $$ users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ FD ]
Line_19 $$ JSONObject extraDataJSONObject = getExtraDataJSONObject(actionRequest)-->Line_21 $$ _socialRequestLocalService.addRequest(themeDisplay.getUserId(), 0, Group.class.getName(), group.getGroupId(), MembersRequestKeys.ADD_MEMBER, extraDataJSONObject.toString(), user.getUserId())[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_21 $$ _socialRequestLocalService.addRequest(themeDisplay.getUserId(), 0, Group.class.getName(), group.getGroupId(), MembersRequestKeys.ADD_MEMBER, extraDataJSONObject.toString(), user.getUserId())[ FD ]
Line_5 $$ if (group.getType() == GroupConstants.TYPE_SITE_OPEN) -->Line_7 $$ return[ CD ]
Line_13 $$ if (users.isEmpty()) -->Line_15 $$ userParams.clear()[ CD ]
Line_10 $$ LinkedHashMap<String, Object> userParams = new LinkedHashMap()-->Line_12 $$ List<User> users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_17 $$ users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ FD ]
Line_4 $$ Group group = _groupLocalService.getGroup(themeDisplay.getScopeGroupId())-->Line_21 $$ _socialRequestLocalService.addRequest(themeDisplay.getUserId(), 0, Group.class.getName(), group.getGroupId(), MembersRequestKeys.ADD_MEMBER, extraDataJSONObject.toString(), user.getUserId())[ FD ]
Line_2 $$ public void joinGroup(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_10 $$ LinkedHashMap<String, Object> userParams = new LinkedHashMap()[ CD ]
Line_2 $$ public void joinGroup(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_12 $$ List<User> users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)[ CD ]
Line_12 $$ List<User> users = _userLocalService.search(themeDisplay.getCompanyId(), null, WorkflowConstants.STATUS_APPROVED, userParams, QueryUtil.ALL_POS, QueryUtil.ALL_POS, (OrderByComparator<User>) null)-->Line_13 $$ if (users.isEmpty()) [ FD ]
Line_2 $$ public void joinGroup(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_19 $$ JSONObject extraDataJSONObject = getExtraDataJSONObject(actionRequest)[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_6 $$ _userLocalService.addGroupUsers(group.getGroupId(), new long[] [ FD ]
Line_4 $$ Group group = _groupLocalService.getGroup(themeDisplay.getScopeGroupId())-->Line_5 $$ if (group.getType() == GroupConstants.TYPE_SITE_OPEN) [ FD ]
Line_13 $$ if (users.isEmpty()) -->Line_14 $$ Role adminRole = _roleLocalService.getRole(themeDisplay.getCompanyId(), RoleConstants.ADMINISTRATOR)[ CD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_9 $$ Role siteAdminRole = _roleLocalService.getRole(themeDisplay.getCompanyId(), RoleConstants.SITE_ADMINISTRATOR)[ FD ]
Line_5 $$ if (group.getType() == GroupConstants.TYPE_SITE_OPEN) -->Line_6 $$ _userLocalService.addGroupUsers(group.getGroupId(), new long[] [ CD ]
Line_2 $$ public void joinGroup(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_4 $$ Group group = _groupLocalService.getGroup(themeDisplay.getScopeGroupId())[ CD ]
Line_2 $$ public void joinGroup(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)[ CD ]
Line_10 $$ LinkedHashMap<String, Object> userParams = new LinkedHashMap()-->Line_15 $$ userParams.clear()[ FD ]
Line_14 $$ Role adminRole = _roleLocalService.getRole(themeDisplay.getCompanyId(), RoleConstants.ADMINISTRATOR)-->Line_16 $$ userParams.put("usersRoles", adminRole.getRoleId())[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_14 $$ Role adminRole = _roleLocalService.getRole(themeDisplay.getCompanyId(), RoleConstants.ADMINISTRATOR)[ FD ]
Line_2 $$ public void joinGroup(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_19 $$ JSONObject extraDataJSONObject = getExtraDataJSONObject(actionRequest)[ CD ]
Line_2 $$ public void joinGroup(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_9 $$ Role siteAdminRole = _roleLocalService.getRole(themeDisplay.getCompanyId(), RoleConstants.SITE_ADMINISTRATOR)[ CD ]
