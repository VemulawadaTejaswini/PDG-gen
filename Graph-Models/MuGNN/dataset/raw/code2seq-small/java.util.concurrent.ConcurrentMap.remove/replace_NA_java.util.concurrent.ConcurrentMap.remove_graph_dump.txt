Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_4 $$ Object[] newArray = ArrayUtil.toObjectArray(newValue)[ FD ]
Line_6 $$ Object oldValue = map.get(key)-->Line_14 $$ return map.remove(key, oldValue)[ FD ]
Line_10 $$ if (oldValue == null) -->Line_11 $$ return newValueToPut == null || map.putIfAbsent(key, newValueToPut) == null[ CD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_5 $$ Object newValueToPut = newArray.length == 0 ? null : newArray.length == 1 ? newArray[0] : newArray[ CD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_14 $$ return map.remove(key, oldValue)[ FD ]
Line_7 $$ List<V> oldCollection = rawValueToCollection(oldValue)-->Line_8 $$ if (!oldCollection.equals(expectedValue))[ FD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_6 $$ Object oldValue = map.get(key)[ FD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_3 $$ ConcurrentMap<K, Object> map = (ConcurrentMap<K, Object>) myMap[ CD ]
Line_8 $$ if (!oldCollection.equals(expectedValue))-->Line_9 $$ return false[ CD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_6 $$ Object oldValue = map.get(key)[ CD ]
Line_3 $$ ConcurrentMap<K, Object> map = (ConcurrentMap<K, Object>) myMap-->Line_11 $$ return newValueToPut == null || map.putIfAbsent(key, newValueToPut) == null[ FD ]
Line_3 $$ ConcurrentMap<K, Object> map = (ConcurrentMap<K, Object>) myMap-->Line_6 $$ Object oldValue = map.get(key)[ FD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_10 $$ if (oldValue == null) [ CD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_7 $$ List<V> oldCollection = rawValueToCollection(oldValue)[ CD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_8 $$ if (!oldCollection.equals(expectedValue))[ FD ]
Line_3 $$ ConcurrentMap<K, Object> map = (ConcurrentMap<K, Object>) myMap-->Line_14 $$ return map.remove(key, oldValue)[ FD ]
Line_5 $$ Object newValueToPut = newArray.length == 0 ? null : newArray.length == 1 ? newArray[0] : newArray-->Line_11 $$ return newValueToPut == null || map.putIfAbsent(key, newValueToPut) == null[ FD ]
Line_6 $$ Object oldValue = map.get(key)-->Line_7 $$ List<V> oldCollection = rawValueToCollection(oldValue)[ FD ]
Line_5 $$ Object newValueToPut = newArray.length == 0 ? null : newArray.length == 1 ? newArray[0] : newArray-->Line_13 $$ if (newValueToPut == null) [ FD ]
Line_6 $$ Object oldValue = map.get(key)-->Line_10 $$ if (oldValue == null) [ FD ]
Line_13 $$ if (newValueToPut == null) -->Line_14 $$ return map.remove(key, oldValue)[ CD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_16 $$ return map.replace(key, oldValue, newValueToPut)[ FD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_4 $$ Object[] newArray = ArrayUtil.toObjectArray(newValue)[ CD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_8 $$ if (!oldCollection.equals(expectedValue))[ CD ]
Line_6 $$ Object oldValue = map.get(key)-->Line_16 $$ return map.replace(key, oldValue, newValueToPut)[ FD ]
Line_5 $$ Object newValueToPut = newArray.length == 0 ? null : newArray.length == 1 ? newArray[0] : newArray-->Line_16 $$ return map.replace(key, oldValue, newValueToPut)[ FD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_11 $$ return newValueToPut == null || map.putIfAbsent(key, newValueToPut) == null[ FD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_13 $$ if (newValueToPut == null) [ CD ]
Line_2 $$ public boolean replace(@NotNull K key, @NotNull Collection<V> expectedValue, @NotNull Collection<V> newValue) -->Line_16 $$ return map.replace(key, oldValue, newValueToPut)[ CD ]
Line_3 $$ ConcurrentMap<K, Object> map = (ConcurrentMap<K, Object>) myMap-->Line_16 $$ return map.replace(key, oldValue, newValueToPut)[ FD ]
