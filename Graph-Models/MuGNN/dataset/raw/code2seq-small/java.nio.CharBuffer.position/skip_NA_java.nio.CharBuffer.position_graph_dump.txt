Line_7 $$ while (length > 0) -->Line_16 $$ int inputPosition = _inputBuffer.position()[ CD ]
Line_2 $$ public long skip(long length) throws IOException -->Line_7 $$ while (length > 0) [ FD ]
Line_7 $$ while (length > 0) -->Line_22 $$ if (_inputBuffer.remaining() <= 0) [ CD ]
Line_8 $$ int blockSize = (int) Math.min(_outputBuffer.remaining(), length)-->Line_11 $$ length -= blockSize[ FD ]
Line_2 $$ public long skip(long length) throws IOException -->Line_3 $$ if (length < 0) [ CD ]
Line_9 $$ if (blockSize > 0) -->Line_11 $$ length -= blockSize[ CD ]
Line_8 $$ int blockSize = (int) Math.min(_outputBuffer.remaining(), length)-->Line_9 $$ if (blockSize > 0) [ FD ]
Line_2 $$ public long skip(long length) throws IOException -->Line_3 $$ if (length < 0) [ FD ]
Line_2 $$ public long skip(long length) throws IOException -->Line_11 $$ length -= blockSize[ FD ]
Line_11 $$ length -= blockSize-->Line_7 $$ while (length > 0) [ FD ]
Line_7 $$ while (length > 0) -->Line_27 $$ _outputBuffer.flip()[ CD ]
Line_7 $$ while (length > 0) -->Line_28 $$ _inputBuffer.compact()[ CD ]
Line_9 $$ if (blockSize > 0) -->Line_10 $$ _outputBuffer.position(_outputBuffer.position() + blockSize)[ CD ]
Line_2 $$ public long skip(long length) throws IOException -->Line_6 $$ long originalLength = length[ CD ]
Line_7 $$ while (length > 0) -->Line_18 $$ if (result != -1) [ CD ]
Line_16 $$ int inputPosition = _inputBuffer.position()-->Line_17 $$ int result = _reader.read(_inputBuffer.array(), inputPosition, _inputBuffer.remaining())[ FD ]
Line_7 $$ while (length > 0) -->Line_9 $$ if (blockSize > 0) [ CD ]
Line_11 $$ length -= blockSize-->Line_8 $$ int blockSize = (int) Math.min(_outputBuffer.remaining(), length)[ FD ]
Line_18 $$ if (result != -1) -->Line_19 $$ _inputBuffer.position(inputPosition + result)[ CD ]
Line_7 $$ while (length > 0) -->Line_21 $$ _inputBuffer.flip()[ CD ]
Line_2 $$ public long skip(long length) throws IOException -->Line_7 $$ while (length > 0) [ CD ]
Line_2 $$ public long skip(long length) throws IOException -->Line_8 $$ int blockSize = (int) Math.min(_outputBuffer.remaining(), length)[ FD ]
Line_9 $$ if (blockSize > 0) -->Line_12 $$ if (length == 0) [ CD ]
Line_7 $$ while (length > 0) -->Line_8 $$ int blockSize = (int) Math.min(_outputBuffer.remaining(), length)[ CD ]
Line_11 $$ length -= blockSize-->Line_12 $$ if (length == 0) [ FD ]
Line_2 $$ public long skip(long length) throws IOException -->Line_12 $$ if (length == 0) [ FD ]
Line_17 $$ int result = _reader.read(_inputBuffer.array(), inputPosition, _inputBuffer.remaining())-->Line_18 $$ if (result != -1) [ FD ]
Line_7 $$ while (length > 0) -->Line_25 $$ _outputBuffer.clear()[ CD ]
Line_7 $$ while (length > 0) -->Line_26 $$ _charsetEncoder.encode(_inputBuffer, _outputBuffer, true)[ CD ]
Line_7 $$ while (length > 0) -->Line_17 $$ int result = _reader.read(_inputBuffer.array(), inputPosition, _inputBuffer.remaining())[ CD ]
Line_2 $$ public long skip(long length) throws IOException -->Line_30 $$ return originalLength - length[ CD ]
