Line_6 $$ int read = unsyncCharArrayReader.read(charBuffer)-->Line_14 $$ for (int i = 0; i < read; i++) [ FD ]
Line_5 $$ CharBuffer charBuffer = CharBuffer.allocate(size)-->Line_11 $$ charBuffer.position(0)[ FD ]
Line_5 $$ CharBuffer charBuffer = CharBuffer.allocate(size)-->Line_12 $$ read = unsyncCharArrayReader.read(charBuffer)[ FD ]
Line_8 $$ for (int i = 0; i < read; i++) -->Line_9 $$ Assert.assertEquals('a' + i, charBuffer.get(i))[ CD ]
Line_6 $$ int read = unsyncCharArrayReader.read(charBuffer)-->Line_8 $$ for (int i = 0; i < read; i++) [ FD ]
Line_3 $$ UnsyncCharArrayReader unsyncCharArrayReader = new UnsyncCharArrayReader(_BUFFER)-->Line_6 $$ int read = unsyncCharArrayReader.read(charBuffer)[ FD ]
Line_2 $$ public void testBufferRead() throws IOException -->Line_14 $$ for (int i = 0; i < read; i++) [ CD ]
Line_5 $$ CharBuffer charBuffer = CharBuffer.allocate(size)-->Line_6 $$ int read = unsyncCharArrayReader.read(charBuffer)[ FD ]
Line_2 $$ public void testBufferRead() throws IOException -->Line_7 $$ Assert.assertEquals(size, read)[ CD ]
Line_12 $$ read = unsyncCharArrayReader.read(charBuffer)-->Line_13 $$ Assert.assertEquals(_SIZE - size, read)[ FD ]
Line_3 $$ UnsyncCharArrayReader unsyncCharArrayReader = new UnsyncCharArrayReader(_BUFFER)-->Line_12 $$ read = unsyncCharArrayReader.read(charBuffer)[ FD ]
Line_8 $$ for (int i = 0; i < read; i++) -->Line_15 $$ Assert.assertEquals('a' + i + size, charBuffer.get(i))[ FD ]
Line_8 $$ for (int i = 0; i < read; i++) -->Line_9 $$ Assert.assertEquals('a' + i, charBuffer.get(i))[ FD ]
Line_4 $$ int size = _SIZE * 2 / 3-->Line_5 $$ CharBuffer charBuffer = CharBuffer.allocate(size)[ FD ]
Line_6 $$ int read = unsyncCharArrayReader.read(charBuffer)-->Line_7 $$ Assert.assertEquals(size, read)[ FD ]
Line_2 $$ public void testBufferRead() throws IOException -->Line_11 $$ charBuffer.position(0)[ CD ]
Line_12 $$ read = unsyncCharArrayReader.read(charBuffer)-->Line_14 $$ for (int i = 0; i < read; i++) [ FD ]
Line_5 $$ CharBuffer charBuffer = CharBuffer.allocate(size)-->Line_15 $$ Assert.assertEquals('a' + i + size, charBuffer.get(i))[ FD ]
Line_2 $$ public void testBufferRead() throws IOException -->Line_12 $$ read = unsyncCharArrayReader.read(charBuffer)[ CD ]
Line_5 $$ CharBuffer charBuffer = CharBuffer.allocate(size)-->Line_9 $$ Assert.assertEquals('a' + i, charBuffer.get(i))[ FD ]
Line_2 $$ public void testBufferRead() throws IOException -->Line_6 $$ int read = unsyncCharArrayReader.read(charBuffer)[ CD ]
Line_2 $$ public void testBufferRead() throws IOException -->Line_8 $$ for (int i = 0; i < read; i++) [ CD ]
Line_6 $$ int read = unsyncCharArrayReader.read(charBuffer)-->Line_13 $$ Assert.assertEquals(_SIZE - size, read)[ FD ]
Line_2 $$ public void testBufferRead() throws IOException -->Line_13 $$ Assert.assertEquals(_SIZE - size, read)[ CD ]
Line_2 $$ public void testBufferRead() throws IOException -->Line_4 $$ int size = _SIZE * 2 / 3[ CD ]
Line_2 $$ public void testBufferRead() throws IOException -->Line_3 $$ UnsyncCharArrayReader unsyncCharArrayReader = new UnsyncCharArrayReader(_BUFFER)[ CD ]
Line_6 $$ int read = unsyncCharArrayReader.read(charBuffer)-->Line_12 $$ read = unsyncCharArrayReader.read(charBuffer)[ FD ]
Line_8 $$ for (int i = 0; i < read; i++) -->Line_14 $$ for (int i = 0; i < read; i++) [ FD ]
Line_14 $$ for (int i = 0; i < read; i++) -->Line_15 $$ Assert.assertEquals('a' + i + size, charBuffer.get(i))[ CD ]
Line_14 $$ for (int i = 0; i < read; i++) -->Line_15 $$ Assert.assertEquals('a' + i + size, charBuffer.get(i))[ FD ]
Line_4 $$ int size = _SIZE * 2 / 3-->Line_7 $$ Assert.assertEquals(size, read)[ FD ]
Line_2 $$ public void testBufferRead() throws IOException -->Line_5 $$ CharBuffer charBuffer = CharBuffer.allocate(size)[ CD ]
