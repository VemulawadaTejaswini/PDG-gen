Line_2 $$ public void testHasMarker() -->Line_20 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ CD ]
Line_2 $$ public void testHasMarker() -->Line_21 $$ Assert.assertEquals(0, charBuffer.position())[ CD ]
Line_7 $$ char[] marker = "cdef".toCharArray()-->Line_16 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_12 $$ Assert.assertFalse(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_17 $$ Assert.assertEquals(0, charBuffer.position())[ FD ]
Line_3 $$ StripFilter stripFilter = new StripFilter()-->Line_8 $$ Assert.assertFalse(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_2 $$ public void testHasMarker() -->Line_13 $$ Assert.assertEquals(0, charBuffer.position())[ CD ]
Line_3 $$ StripFilter stripFilter = new StripFilter()-->Line_12 $$ Assert.assertFalse(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_10 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_13 $$ Assert.assertEquals(0, charBuffer.position())[ FD ]
Line_2 $$ public void testHasMarker() -->Line_18 $$ charBuffer = CharBuffer.wrap("aBcDef")[ CD ]
Line_18 $$ charBuffer = CharBuffer.wrap("aBcDef")-->Line_20 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_18 $$ charBuffer = CharBuffer.wrap("aBcDef")[ FD ]
Line_2 $$ public void testHasMarker() -->Line_9 $$ Assert.assertEquals(2, charBuffer.position())[ CD ]
Line_7 $$ char[] marker = "cdef".toCharArray()-->Line_15 $$ marker = "abcd".toCharArray()[ FD ]
Line_2 $$ public void testHasMarker() -->Line_10 $$ charBuffer = CharBuffer.wrap("abcdef")[ CD ]
Line_10 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_17 $$ Assert.assertEquals(0, charBuffer.position())[ FD ]
Line_2 $$ public void testHasMarker() -->Line_19 $$ marker = "abcd".toCharArray()[ CD ]
Line_2 $$ public void testHasMarker() -->Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")[ CD ]
Line_10 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_12 $$ Assert.assertFalse(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_2 $$ public void testHasMarker() -->Line_14 $$ charBuffer = CharBuffer.wrap("abcdef")[ CD ]
Line_11 $$ marker = "abce".toCharArray()-->Line_15 $$ marker = "abcd".toCharArray()[ FD ]
Line_2 $$ public void testHasMarker() -->Line_6 $$ charBuffer.limit(4)[ CD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_16 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_2 $$ public void testHasMarker() -->Line_15 $$ marker = "abcd".toCharArray()[ CD ]
Line_15 $$ marker = "abcd".toCharArray()-->Line_16 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_10 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_18 $$ charBuffer = CharBuffer.wrap("aBcDef")[ FD ]
Line_10 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_20 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_7 $$ char[] marker = "cdef".toCharArray()-->Line_8 $$ Assert.assertFalse(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_9 $$ Assert.assertEquals(2, charBuffer.position())[ FD ]
Line_2 $$ public void testHasMarker() -->Line_7 $$ char[] marker = "cdef".toCharArray()[ CD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_6 $$ charBuffer.limit(4)[ FD ]
Line_10 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_14 $$ charBuffer = CharBuffer.wrap("abcdef")[ FD ]
Line_11 $$ marker = "abce".toCharArray()-->Line_16 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_11 $$ marker = "abce".toCharArray()-->Line_19 $$ marker = "abcd".toCharArray()[ FD ]
Line_2 $$ public void testHasMarker() -->Line_11 $$ marker = "abce".toCharArray()[ CD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_21 $$ Assert.assertEquals(0, charBuffer.position())[ FD ]
Line_15 $$ marker = "abcd".toCharArray()-->Line_20 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_18 $$ charBuffer = CharBuffer.wrap("aBcDef")-->Line_21 $$ Assert.assertEquals(0, charBuffer.position())[ FD ]
Line_11 $$ marker = "abce".toCharArray()-->Line_20 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_5 $$ charBuffer.position(2)[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_8 $$ Assert.assertFalse(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_10 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_21 $$ Assert.assertEquals(0, charBuffer.position())[ FD ]
Line_14 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_20 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_2 $$ public void testHasMarker() -->Line_3 $$ StripFilter stripFilter = new StripFilter()[ CD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_20 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_14 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_17 $$ Assert.assertEquals(0, charBuffer.position())[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_10 $$ charBuffer = CharBuffer.wrap("abcdef")[ FD ]
Line_11 $$ marker = "abce".toCharArray()-->Line_12 $$ Assert.assertFalse(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_14 $$ charBuffer = CharBuffer.wrap("abcdef")[ FD ]
Line_7 $$ char[] marker = "cdef".toCharArray()-->Line_19 $$ marker = "abcd".toCharArray()[ FD ]
Line_14 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_21 $$ Assert.assertEquals(0, charBuffer.position())[ FD ]
Line_14 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_18 $$ charBuffer = CharBuffer.wrap("aBcDef")[ FD ]
Line_3 $$ StripFilter stripFilter = new StripFilter()-->Line_16 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_2 $$ public void testHasMarker() -->Line_5 $$ charBuffer.position(2)[ CD ]
Line_14 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_16 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("abcdef")-->Line_13 $$ Assert.assertEquals(0, charBuffer.position())[ FD ]
Line_7 $$ char[] marker = "cdef".toCharArray()-->Line_12 $$ Assert.assertFalse(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_2 $$ public void testHasMarker() -->Line_12 $$ Assert.assertFalse(stripFilter.hasMarker(charBuffer, marker))[ CD ]
Line_3 $$ StripFilter stripFilter = new StripFilter()-->Line_20 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_7 $$ char[] marker = "cdef".toCharArray()-->Line_20 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_19 $$ marker = "abcd".toCharArray()-->Line_20 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_15 $$ marker = "abcd".toCharArray()-->Line_19 $$ marker = "abcd".toCharArray()[ FD ]
Line_7 $$ char[] marker = "cdef".toCharArray()-->Line_11 $$ marker = "abce".toCharArray()[ FD ]
Line_2 $$ public void testHasMarker() -->Line_17 $$ Assert.assertEquals(0, charBuffer.position())[ CD ]
Line_2 $$ public void testHasMarker() -->Line_16 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ CD ]
Line_10 $$ charBuffer = CharBuffer.wrap("abcdef")-->Line_16 $$ Assert.assertTrue(stripFilter.hasMarker(charBuffer, marker))[ FD ]
Line_2 $$ public void testHasMarker() -->Line_8 $$ Assert.assertFalse(stripFilter.hasMarker(charBuffer, marker))[ CD ]
