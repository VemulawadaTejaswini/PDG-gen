Line_17 $$ keyspace = "system_traces"-->Line_32 $$ for (Range<Token> range : getRangesForEndpoint(keyspace, endpoint)) [ FD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_18 $$ Keyspace keyspaceInstance = Schema.instance.getKeyspaceInstance(keyspace)[ FD ]
Line_12 $$ if (nonSystemKeyspaces.contains("system_traces")) -->Line_13 $$ specialTableCount += 1[ CD ]
Line_30 $$ for (InetAddress endpoint : endpoints) -->Line_36 $$ finalOwnership.put(endpoint, ownership)[ FD ]
Line_3 $$ if (keyspace != null) -->Line_4 $$ Keyspace keyspaceInstance = Schema.instance.getKeyspaceInstance(keyspace)[ CD ]
Line_3 $$ if (keyspace != null) -->Line_12 $$ if (nonSystemKeyspaces.contains("system_traces")) [ CD ]
Line_10 $$ List<String> nonSystemKeyspaces = Schema.instance.getNonSystemKeyspaces()-->Line_15 $$ if (nonSystemKeyspaces.size() > specialTableCount)[ FD ]
Line_3 $$ if (keyspace != null) -->Line_18 $$ Keyspace keyspaceInstance = Schema.instance.getKeyspaceInstance(keyspace)[ CD ]
Line_3 $$ if (keyspace != null) -->Line_7 $$ if (keyspaceInstance.getReplicationStrategy() instanceof LocalStrategy)[ CD ]
Line_4 $$ Keyspace keyspaceInstance = Schema.instance.getKeyspaceInstance(keyspace)-->Line_7 $$ if (keyspaceInstance.getReplicationStrategy() instanceof LocalStrategy)[ FD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_32 $$ for (Range<Token> range : getRangesForEndpoint(keyspace, endpoint)) [ FD ]
Line_31 $$ float ownership = 0.0f-->Line_34 $$ ownership += tokenOwnership.get(range.right)[ FD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_3 $$ if (keyspace != null) [ CD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_4 $$ Keyspace keyspaceInstance = Schema.instance.getKeyspaceInstance(keyspace)[ FD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_24 $$ SortedMap<String, Collection<InetAddress>> sortedDcsToEndpoints = new TreeMap()[ CD ]
Line_22 $$ TokenMetadata metadata = tokenMetadata.cloneOnlyTokenMap()-->Line_25 $$ sortedDcsToEndpoints.putAll(metadata.getTopology().getDatacenterEndpoints().asMap())[ FD ]
Line_13 $$ specialTableCount += 1-->Line_15 $$ if (nonSystemKeyspaces.size() > specialTableCount)[ FD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_25 $$ sortedDcsToEndpoints.putAll(metadata.getTopology().getDatacenterEndpoints().asMap())[ CD ]
Line_27 $$ Map<Token, Float> tokenOwnership = tokenMetadata.partitioner.describeOwnership(tokenMetadata.sortedTokens())-->Line_34 $$ ownership += tokenOwnership.get(range.right)[ FD ]
Line_3 $$ if (keyspace != null) -->Line_10 $$ List<String> nonSystemKeyspaces = Schema.instance.getNonSystemKeyspaces()[ CD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_3 $$ if (keyspace != null) [ FD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_27 $$ Map<Token, Float> tokenOwnership = tokenMetadata.partitioner.describeOwnership(tokenMetadata.sortedTokens())[ CD ]
Line_11 $$ int specialTableCount = 0-->Line_13 $$ specialTableCount += 1[ FD ]
Line_3 $$ if (keyspace != null) -->Line_17 $$ keyspace = "system_traces"[ CD ]
Line_33 $$ if (tokenOwnership.containsKey(range.right))-->Line_34 $$ ownership += tokenOwnership.get(range.right)[ CD ]
Line_34 $$ ownership += tokenOwnership.get(range.right)-->Line_36 $$ finalOwnership.put(endpoint, ownership)[ FD ]
Line_3 $$ if (keyspace != null) -->Line_15 $$ if (nonSystemKeyspaces.size() > specialTableCount)[ CD ]
Line_4 $$ Keyspace keyspaceInstance = Schema.instance.getKeyspaceInstance(keyspace)-->Line_5 $$ if (keyspaceInstance == null)[ FD ]
Line_24 $$ SortedMap<String, Collection<InetAddress>> sortedDcsToEndpoints = new TreeMap()-->Line_25 $$ sortedDcsToEndpoints.putAll(metadata.getTopology().getDatacenterEndpoints().asMap())[ FD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_17 $$ keyspace = "system_traces"[ FD ]
Line_24 $$ SortedMap<String, Collection<InetAddress>> sortedDcsToEndpoints = new TreeMap()-->Line_26 $$ for (Collection<InetAddress> endpoints : sortedDcsToEndpoints.values()) endpointsGroupedByDc.add(endpoints)[ FD ]
Line_23 $$ Collection<Collection<InetAddress>> endpointsGroupedByDc = new ArrayList()-->Line_26 $$ endpointsGroupedByDc.add(endpoints)[ FD ]
Line_28 $$ LinkedHashMap<InetAddress, Float> finalOwnership = Maps.newLinkedHashMap()-->Line_36 $$ finalOwnership.put(endpoint, ownership)[ FD ]
Line_11 $$ int specialTableCount = 0-->Line_15 $$ if (nonSystemKeyspaces.size() > specialTableCount)[ FD ]
Line_31 $$ float ownership = 0.0f-->Line_36 $$ finalOwnership.put(endpoint, ownership)[ FD ]
Line_3 $$ if (keyspace != null) -->Line_19 $$ if (keyspaceInstance == null)[ CD ]
Line_30 $$ for (InetAddress endpoint : endpoints) -->Line_32 $$ for (Range<Token> range : getRangesForEndpoint(keyspace, endpoint)) [ FD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_39 $$ return finalOwnership[ CD ]
Line_3 $$ if (keyspace != null) -->Line_11 $$ int specialTableCount = 0[ CD ]
Line_17 $$ keyspace = "system_traces"-->Line_18 $$ Keyspace keyspaceInstance = Schema.instance.getKeyspaceInstance(keyspace)[ FD ]
Line_27 $$ Map<Token, Float> tokenOwnership = tokenMetadata.partitioner.describeOwnership(tokenMetadata.sortedTokens())-->Line_33 $$ if (tokenOwnership.containsKey(range.right))[ FD ]
Line_3 $$ if (keyspace != null) -->Line_5 $$ if (keyspaceInstance == null)[ CD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_22 $$ TokenMetadata metadata = tokenMetadata.cloneOnlyTokenMap()[ CD ]
Line_4 $$ Keyspace keyspaceInstance = Schema.instance.getKeyspaceInstance(keyspace)-->Line_19 $$ if (keyspaceInstance == null)[ FD ]
Line_10 $$ List<String> nonSystemKeyspaces = Schema.instance.getNonSystemKeyspaces()-->Line_12 $$ if (nonSystemKeyspaces.contains("system_traces")) [ FD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_23 $$ Collection<Collection<InetAddress>> endpointsGroupedByDc = new ArrayList()[ CD ]
Line_2 $$ public LinkedHashMap<InetAddress, Float> effectiveOwnership(String keyspace) throws IllegalStateException -->Line_28 $$ LinkedHashMap<InetAddress, Float> finalOwnership = Maps.newLinkedHashMap()[ CD ]
