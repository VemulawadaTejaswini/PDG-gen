Line_57 $$ if (collectionType.kind == CollectionType.Kind.MAP) -->Line_58 $$ el = generateAnyValue(version, values)[ CD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_9 $$ expected.append("[]")[ FD ]
Line_29 $$ bracketOpen = '['-->Line_34 $$ bracketOpen = '[ FD ]
Line_23 $$ CQL3Type values = null-->Line_39 $$ values = ((MapType) collectionType).getValuesType().asCQL3Type()[ FD ]
Line_2 $$ static Value generateCollectionValue(int version, CollectionType collectionType, boolean allowNull) -->Line_5 $$ if (allowNull && randBool(0.05d)) [ CD ]
Line_22 $$ CQL3Type elements-->Line_50 $$ Value el = generateAnyValue(version, elements)[ FD ]
Line_35 $$ bracketClose = '}'-->Line_41 $$ bracketClose = '}'[ FD ]
Line_2 $$ static Value generateCollectionValue(int version, CollectionType collectionType, boolean allowNull) -->Line_50 $$ Value el = generateAnyValue(version, elements)[ FD ]
Line_25 $$ char bracketClose-->Line_35 $$ bracketClose = '}'[ FD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_17 $$ expected.append("null")[ FD ]
Line_23 $$ CQL3Type values = null-->Line_58 $$ el = generateAnyValue(version, values)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_22 $$ CQL3Type elements[ CD ]
Line_29 $$ bracketOpen = '['-->Line_46 $$ expected.append(bracketOpen)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_25 $$ char bracketClose[ CD ]
Line_24 $$ char bracketOpen-->Line_46 $$ expected.append(bracketOpen)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_6 $$ if (collectionType.isMultiCell()) [ CD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_46 $$ expected.append(bracketOpen)[ FD ]
Line_35 $$ bracketClose = '}'-->Line_64 $$ expected.append(bracketClose)[ FD ]
Line_49 $$ for (int i = 0; i < size; i++) -->Line_56 $$ el.cql3Type.toCQLLiteral(el.value, version, expected)[ CD ]
Line_50 $$ Value el = generateAnyValue(version, elements)-->Line_58 $$ el = generateAnyValue(version, values)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_19 $$ buffer = null[ CD ]
Line_49 $$ for (int i = 0; i < size; i++) -->Line_53 $$ buffers.add(el.value.duplicate())[ CD ]
Line_33 $$ elements = ((SetType) collectionType).getElementsType().asCQL3Type()-->Line_38 $$ elements = ((MapType) collectionType).getKeysType().asCQL3Type()[ FD ]
Line_29 $$ bracketOpen = '['-->Line_40 $$ bracketOpen = '[ FD ]
Line_38 $$ elements = ((MapType) collectionType).getKeysType().asCQL3Type()-->Line_50 $$ Value el = generateAnyValue(version, elements)[ FD ]
Line_2 $$ static Value generateCollectionValue(int version, CollectionType collectionType, boolean allowNull) -->Line_61 $$ el.cql3Type.toCQLLiteral(el.value, version, expected)[ FD ]
Line_39 $$ values = ((MapType) collectionType).getValuesType().asCQL3Type()-->Line_58 $$ el = generateAnyValue(version, values)[ FD ]
Line_47 $$ Collection<ByteBuffer> buffers = new ArrayList()-->Line_59 $$ buffers.add(el.value.duplicate())[ FD ]
Line_34 $$ bracketOpen = '-->Line_40 $$ bracketOpen = '[ FD ]
Line_49 $$ for (int i = 0; i < size; i++) -->Line_50 $$ Value el = generateAnyValue(version, elements)[ CD ]
Line_25 $$ char bracketClose-->Line_30 $$ bracketClose = ']'[ FD ]
Line_24 $$ char bracketOpen-->Line_29 $$ bracketOpen = '['[ FD ]
Line_34 $$ bracketOpen = '-->Line_46 $$ expected.append(bracketOpen)[ FD ]
Line_2 $$ static Value generateCollectionValue(int version, CollectionType collectionType, boolean allowNull) -->Line_58 $$ el = generateAnyValue(version, values)[ FD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_54 $$ if (expected.length() > 1)[ FD ]
Line_2 $$ static Value generateCollectionValue(int version, CollectionType collectionType, boolean allowNull) -->Line_67 $$ return new Value(expected.toString(), collectionType.asCQL3Type(), buffer)[ CD ]
Line_2 $$ static Value generateCollectionValue(int version, CollectionType collectionType, boolean allowNull) -->Line_3 $$ StringBuilder expected = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_67 $$ return new Value(expected.toString(), collectionType.asCQL3Type(), buffer)[ FD ]
Line_2 $$ static Value generateCollectionValue(int version, CollectionType collectionType, boolean allowNull) -->Line_4 $$ ByteBuffer buffer[ CD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_47 $$ Collection<ByteBuffer> buffers = new ArrayList()[ CD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_56 $$ el.cql3Type.toCQLLiteral(el.value, version, expected)[ FD ]
Line_30 $$ bracketClose = ']'-->Line_35 $$ bracketClose = '}'[ FD ]
Line_41 $$ bracketClose = '}'-->Line_64 $$ expected.append(bracketClose)[ FD ]
Line_40 $$ bracketOpen = '-->Line_46 $$ expected.append(bracketOpen)[ FD ]
Line_30 $$ bracketClose = ']'-->Line_41 $$ bracketClose = '}'[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_49 $$ for (int i = 0; i < size; i++) [ CD ]
Line_49 $$ for (int i = 0; i < size; i++) -->Line_57 $$ if (collectionType.kind == CollectionType.Kind.MAP) [ CD ]
Line_30 $$ bracketClose = ']'-->Line_64 $$ expected.append(bracketClose)[ FD ]
Line_33 $$ elements = ((SetType) collectionType).getElementsType().asCQL3Type()-->Line_50 $$ Value el = generateAnyValue(version, elements)[ FD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_13 $$ expected.append("[ FD ]
Line_21 $$ int size = randInt(20)-->Line_49 $$ for (int i = 0; i < size; i++) [ FD ]
Line_28 $$ elements = ((ListType) collectionType).getElementsType().asCQL3Type()-->Line_50 $$ Value el = generateAnyValue(version, elements)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_48 $$ Set<ByteBuffer> added = new HashSet()[ CD ]
Line_2 $$ static Value generateCollectionValue(int version, CollectionType collectionType, boolean allowNull) -->Line_56 $$ el.cql3Type.toCQLLiteral(el.value, version, expected)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_24 $$ char bracketOpen[ CD ]
Line_22 $$ CQL3Type elements-->Line_28 $$ elements = ((ListType) collectionType).getElementsType().asCQL3Type()[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_19 $$ buffer = null[ FD ]
Line_28 $$ elements = ((ListType) collectionType).getElementsType().asCQL3Type()-->Line_33 $$ elements = ((SetType) collectionType).getElementsType().asCQL3Type()[ FD ]
Line_25 $$ char bracketClose-->Line_41 $$ bracketClose = '}'[ FD ]
Line_47 $$ Collection<ByteBuffer> buffers = new ArrayList()-->Line_65 $$ buffer = CollectionSerializer.pack(buffers, added.size(), version)[ FD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_60 $$ expected.append(": ")[ FD ]
Line_19 $$ buffer = null-->Line_65 $$ buffer = CollectionSerializer.pack(buffers, added.size(), version)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_46 $$ expected.append(bracketOpen)[ CD ]
Line_2 $$ static Value generateCollectionValue(int version, CollectionType collectionType, boolean allowNull) -->Line_67 $$ return new Value(expected.toString(), collectionType.asCQL3Type(), buffer)[ FD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_64 $$ expected.append(bracketClose)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_64 $$ expected.append(bracketClose)[ CD ]
Line_24 $$ char bracketOpen-->Line_40 $$ bracketOpen = '[ FD ]
Line_47 $$ Collection<ByteBuffer> buffers = new ArrayList()-->Line_53 $$ buffers.add(el.value.duplicate())[ FD ]
Line_25 $$ char bracketClose-->Line_64 $$ expected.append(bracketClose)[ FD ]
Line_6 $$ if (collectionType.isMultiCell()) -->Line_17 $$ expected.append("null")[ CD ]
Line_48 $$ Set<ByteBuffer> added = new HashSet()-->Line_51 $$ if (!added.add(el.value))[ FD ]
Line_2 $$ static Value generateCollectionValue(int version, CollectionType collectionType, boolean allowNull) -->Line_6 $$ if (collectionType.isMultiCell()) [ FD ]
Line_48 $$ Set<ByteBuffer> added = new HashSet()-->Line_65 $$ buffer = CollectionSerializer.pack(buffers, added.size(), version)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_23 $$ CQL3Type values = null[ CD ]
Line_57 $$ if (collectionType.kind == CollectionType.Kind.MAP) -->Line_61 $$ el.cql3Type.toCQLLiteral(el.value, version, expected)[ CD ]
Line_57 $$ if (collectionType.kind == CollectionType.Kind.MAP) -->Line_59 $$ buffers.add(el.value.duplicate())[ CD ]
Line_22 $$ CQL3Type elements-->Line_33 $$ elements = ((SetType) collectionType).getElementsType().asCQL3Type()[ FD ]
Line_49 $$ for (int i = 0; i < size; i++) -->Line_51 $$ if (!added.add(el.value))[ CD ]
Line_49 $$ for (int i = 0; i < size; i++) -->Line_54 $$ if (expected.length() > 1)[ CD ]
Line_54 $$ if (expected.length() > 1)-->Line_55 $$ expected.append(", ")[ CD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_61 $$ el.cql3Type.toCQLLiteral(el.value, version, expected)[ FD ]
Line_2 $$ static Value generateCollectionValue(int version, CollectionType collectionType, boolean allowNull) -->Line_65 $$ buffer = CollectionSerializer.pack(buffers, added.size(), version)[ FD ]
Line_22 $$ CQL3Type elements-->Line_38 $$ elements = ((MapType) collectionType).getKeysType().asCQL3Type()[ FD ]
Line_24 $$ char bracketOpen-->Line_34 $$ bracketOpen = '[ FD ]
Line_28 $$ elements = ((ListType) collectionType).getElementsType().asCQL3Type()-->Line_38 $$ elements = ((MapType) collectionType).getKeysType().asCQL3Type()[ FD ]
Line_2 $$ static Value generateCollectionValue(int version, CollectionType collectionType, boolean allowNull) -->Line_5 $$ if (allowNull && randBool(0.05d)) [ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_21 $$ int size = randInt(20)[ CD ]
Line_57 $$ if (collectionType.kind == CollectionType.Kind.MAP) -->Line_60 $$ expected.append(": ")[ CD ]
Line_4 $$ ByteBuffer buffer-->Line_65 $$ buffer = CollectionSerializer.pack(buffers, added.size(), version)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_65 $$ buffer = CollectionSerializer.pack(buffers, added.size(), version)[ CD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_55 $$ expected.append(", ")[ FD ]
