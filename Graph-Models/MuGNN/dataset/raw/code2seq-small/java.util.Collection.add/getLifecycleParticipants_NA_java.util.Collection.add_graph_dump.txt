Line_2 $$ private Collection<AbstractMavenLifecycleParticipant> getLifecycleParticipants(Collection<MavenProject> projects) -->Line_3 $$ Collection<AbstractMavenLifecycleParticipant> lifecycleListeners = new LinkedHashSet<AbstractMavenLifecycleParticipant>()[ CD ]
Line_12 $$ for (MavenProject project : projects) -->Line_13 $$ ClassLoader projectRealm = project.getClassRealm()[ FD ]
Line_11 $$ Collection<ClassLoader> scannedRealms = new HashSet<ClassLoader>()-->Line_14 $$ if (projectRealm != null && scannedRealms.add(projectRealm)) [ FD ]
Line_14 $$ if (projectRealm != null && scannedRealms.add(projectRealm)) -->Line_15 $$ Thread.currentThread().setContextClassLoader(projectRealm)[ CD ]
Line_13 $$ ClassLoader projectRealm = project.getClassRealm()-->Line_14 $$ if (projectRealm != null && scannedRealms.add(projectRealm)) [ FD ]
Line_4 $$ ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader()-->Line_24 $$ Thread.currentThread().setContextClassLoader(originalClassLoader)[ FD ]
Line_13 $$ ClassLoader projectRealm = project.getClassRealm()-->Line_15 $$ Thread.currentThread().setContextClassLoader(projectRealm)[ FD ]
Line_3 $$ Collection<AbstractMavenLifecycleParticipant> lifecycleListeners = new LinkedHashSet<AbstractMavenLifecycleParticipant>()-->Line_17 $$ lifecycleListeners.addAll(myContainer.lookupList(AbstractMavenLifecycleParticipant.class))[ FD ]
Line_2 $$ private Collection<AbstractMavenLifecycleParticipant> getLifecycleParticipants(Collection<MavenProject> projects) -->Line_26 $$ return lifecycleListeners[ CD ]
Line_2 $$ private Collection<AbstractMavenLifecycleParticipant> getLifecycleParticipants(Collection<MavenProject> projects) -->Line_4 $$ ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader()[ CD ]
Line_3 $$ Collection<AbstractMavenLifecycleParticipant> lifecycleListeners = new LinkedHashSet<AbstractMavenLifecycleParticipant>()-->Line_7 $$ lifecycleListeners.addAll(myContainer.lookupList(AbstractMavenLifecycleParticipant.class))[ FD ]
