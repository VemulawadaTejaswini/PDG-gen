Line_4 $$ while (s.hasMoreData()) -->Line_5 $$ if (s.isEol()) [ CD ]
Line_14 $$ String path = tokens[tokens.length - 1]-->Line_15 $$ path = rootPath + File.separator + GitUtil.unescapePath(path)[ FD ]
Line_2 $$ public static Collection<String> parseDiffForPaths(final String rootPath, final StringScanner s) throws VcsException -->Line_4 $$ while (s.hasMoreData()) [ CD ]
Line_4 $$ while (s.hasMoreData()) -->Line_17 $$ result.add(path)[ CD ]
Line_2 $$ public static Collection<String> parseDiffForPaths(final String rootPath, final StringScanner s) throws VcsException -->Line_6 $$ s.nextLine()[ FD ]
Line_14 $$ String path = tokens[tokens.length - 1]-->Line_17 $$ result.add(path)[ FD ]
Line_2 $$ public static Collection<String> parseDiffForPaths(final String rootPath, final StringScanner s) throws VcsException -->Line_12 $$ assert 'M' != s.peek() : "Moves are not yet handled"[ FD ]
Line_2 $$ public static Collection<String> parseDiffForPaths(final String rootPath, final StringScanner s) throws VcsException -->Line_3 $$ final Collection<String> result = new ArrayList<String>()[ CD ]
Line_15 $$ path = rootPath + File.separator + GitUtil.unescapePath(path)-->Line_17 $$ result.add(path)[ FD ]
Line_3 $$ final Collection<String> result = new ArrayList<String>()-->Line_17 $$ result.add(path)[ FD ]
Line_16 $$ path = FileUtil.toSystemDependentName(path)-->Line_15 $$ path = rootPath + File.separator + GitUtil.unescapePath(path)[ FD ]
Line_2 $$ public static Collection<String> parseDiffForPaths(final String rootPath, final StringScanner s) throws VcsException -->Line_13 $$ String[] tokens = s.line().split("\t")[ FD ]
Line_2 $$ public static Collection<String> parseDiffForPaths(final String rootPath, final StringScanner s) throws VcsException -->Line_19 $$ return result[ CD ]
Line_2 $$ public static Collection<String> parseDiffForPaths(final String rootPath, final StringScanner s) throws VcsException -->Line_4 $$ while (s.hasMoreData()) [ FD ]
Line_4 $$ while (s.hasMoreData()) -->Line_14 $$ String path = tokens[tokens.length - 1][ CD ]
Line_2 $$ public static Collection<String> parseDiffForPaths(final String rootPath, final StringScanner s) throws VcsException -->Line_9 $$ if ("CADUMR".indexOf(s.peek()) == -1) [ FD ]
Line_4 $$ while (s.hasMoreData()) -->Line_15 $$ path = rootPath + File.separator + GitUtil.unescapePath(path)[ CD ]
Line_5 $$ if (s.isEol()) -->Line_6 $$ s.nextLine()[ CD ]
Line_16 $$ path = FileUtil.toSystemDependentName(path)-->Line_17 $$ result.add(path)[ FD ]
Line_4 $$ while (s.hasMoreData()) -->Line_13 $$ String[] tokens = s.line().split("\t")[ CD ]
Line_14 $$ String path = tokens[tokens.length - 1]-->Line_16 $$ path = FileUtil.toSystemDependentName(path)[ FD ]
Line_4 $$ while (s.hasMoreData()) -->Line_9 $$ if ("CADUMR".indexOf(s.peek()) == -1) [ CD ]
Line_2 $$ public static Collection<String> parseDiffForPaths(final String rootPath, final StringScanner s) throws VcsException -->Line_5 $$ if (s.isEol()) [ FD ]
Line_4 $$ while (s.hasMoreData()) -->Line_16 $$ path = FileUtil.toSystemDependentName(path)[ CD ]
Line_15 $$ path = rootPath + File.separator + GitUtil.unescapePath(path)-->Line_16 $$ path = FileUtil.toSystemDependentName(path)[ FD ]
