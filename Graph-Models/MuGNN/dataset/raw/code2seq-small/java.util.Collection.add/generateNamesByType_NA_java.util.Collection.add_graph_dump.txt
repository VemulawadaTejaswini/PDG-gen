Line_2 $$ public static Collection<String> generateNamesByType(@NotNull String name) -->Line_4 $$ name = StringUtil.decapitalize(deleteNonLetterFromString(name.replace('.', '_')))[ CD ]
Line_3 $$ final Collection<String> possibleNames = new LinkedHashSet<String>()-->Line_7 $$ possibleNames.add(name.substring(0, 1))[ FD ]
Line_2 $$ public static Collection<String> generateNamesByType(@NotNull String name) -->Line_3 $$ final Collection<String> possibleNames = new LinkedHashSet<String>()[ CD ]
Line_2 $$ public static Collection<String> generateNamesByType(@NotNull String name) -->Line_7 $$ possibleNames.add(name.substring(0, 1))[ FD ]
Line_2 $$ public static Collection<String> generateNamesByType(@NotNull String name) -->Line_6 $$ possibleNames.add(name)[ FD ]
Line_2 $$ public static Collection<String> generateNamesByType(@NotNull String name) -->Line_4 $$ name = StringUtil.decapitalize(deleteNonLetterFromString(name.replace('.', '_')))[ FD ]
Line_2 $$ public static Collection<String> generateNamesByType(@NotNull String name) -->Line_6 $$ possibleNames.add(name)[ CD ]
Line_2 $$ public static Collection<String> generateNamesByType(@NotNull String name) -->Line_5 $$ name = toUnderscoreCase(name)[ FD ]
Line_2 $$ public static Collection<String> generateNamesByType(@NotNull String name) -->Line_5 $$ name = toUnderscoreCase(name)[ CD ]
Line_2 $$ public static Collection<String> generateNamesByType(@NotNull String name) -->Line_8 $$ return possibleNames[ CD ]
Line_2 $$ public static Collection<String> generateNamesByType(@NotNull String name) -->Line_7 $$ possibleNames.add(name.substring(0, 1))[ CD ]
Line_3 $$ final Collection<String> possibleNames = new LinkedHashSet<String>()-->Line_6 $$ possibleNames.add(name)[ FD ]
