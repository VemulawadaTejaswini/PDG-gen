Line_4 $$ if (myConstantSearch == null) -->Line_5 $$ future = null[ CD ]
Line_3 $$ final Future<Callbacks.ConstantAffection> future-->Line_5 $$ future = null[ FD ]
Line_5 $$ future = null-->Line_9 $$ future = myConstantSearch.request(className.replace('/', '.'), fieldName, changedField.access, isRemoved, accessChanged)[ FD ]
Line_2 $$ void addConstantWork(final int ownerClass, final FieldRepr changedField, final boolean isRemoved, boolean accessChanged) -->Line_4 $$ if (myConstantSearch == null) [ CD ]
Line_2 $$ void addConstantWork(final int ownerClass, final FieldRepr changedField, final boolean isRemoved, boolean accessChanged) -->Line_9 $$ future = myConstantSearch.request(className.replace('/', '.'), fieldName, changedField.access, isRemoved, accessChanged)[ FD ]
Line_4 $$ if (myConstantSearch == null) -->Line_9 $$ future = myConstantSearch.request(className.replace('/', '.'), fieldName, changedField.access, isRemoved, accessChanged)[ CD ]
Line_4 $$ if (myConstantSearch == null) -->Line_7 $$ final String className = myContext.getValue(ownerClass)[ CD ]
Line_2 $$ void addConstantWork(final int ownerClass, final FieldRepr changedField, final boolean isRemoved, boolean accessChanged) -->Line_7 $$ final String className = myContext.getValue(ownerClass)[ FD ]
Line_7 $$ final String className = myContext.getValue(ownerClass)-->Line_9 $$ future = myConstantSearch.request(className.replace('/', '.'), fieldName, changedField.access, isRemoved, accessChanged)[ FD ]
Line_8 $$ final String fieldName = myContext.getValue(changedField.name)-->Line_9 $$ future = myConstantSearch.request(className.replace('/', '.'), fieldName, changedField.access, isRemoved, accessChanged)[ FD ]
Line_4 $$ if (myConstantSearch == null) -->Line_8 $$ final String fieldName = myContext.getValue(changedField.name)[ CD ]
Line_2 $$ void addConstantWork(final int ownerClass, final FieldRepr changedField, final boolean isRemoved, boolean accessChanged) -->Line_3 $$ final Future<Callbacks.ConstantAffection> future[ CD ]
Line_2 $$ void addConstantWork(final int ownerClass, final FieldRepr changedField, final boolean isRemoved, boolean accessChanged) -->Line_11 $$ myQueue.add(new Triple(ownerClass, changedField, future))[ CD ]
Line_3 $$ final Future<Callbacks.ConstantAffection> future-->Line_9 $$ future = myConstantSearch.request(className.replace('/', '.'), fieldName, changedField.access, isRemoved, accessChanged)[ FD ]
