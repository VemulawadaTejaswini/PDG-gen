Line_2 $$ public static CommitDetails parse(String hash, String details) -->Line_23 $$ commit.myMessage = message.toString()[ CD ]
Line_19 $$ if (data != null) -->Line_20 $$ data.getFirst().apply(commit, data.getSecond())[ CD ]
Line_2 $$ public static CommitDetails parse(String hash, String details) -->Line_24 $$ commit.myChanges = changes[ CD ]
Line_7 $$ ParsingStage stage = ParsingStage.MESSAGE-->Line_15 $$ if (stage == ParsingStage.MESSAGE) [ FD ]
Line_9 $$ Pair<Data, String> data = checkDataLine(line)-->Line_10 $$ if (data != null) [ FD ]
Line_8 $$ for (String line : StringUtil.splitByLines(details)) -->Line_12 $$ if (line.matches("[MADR]\\d* [^ ]+ .+")) [ FD ]
Line_6 $$ Collection<Change> changes = new ArrayList<Change>()-->Line_18 $$ changes.add(parseChange(line))[ FD ]
Line_17 $$ if (stage == ParsingStage.CHANGES) -->Line_19 $$ if (data != null) [ CD ]
Line_2 $$ public static CommitDetails parse(String hash, String details) -->Line_25 $$ return commit[ CD ]
Line_17 $$ if (stage == ParsingStage.CHANGES) -->Line_18 $$ changes.add(parseChange(line))[ CD ]
Line_11 $$ stage = ParsingStage.DATA-->Line_13 $$ stage = ParsingStage.CHANGES[ FD ]
Line_2 $$ public static CommitDetails parse(String hash, String details) -->Line_4 $$ commit.myHash = hash[ FD ]
Line_13 $$ stage = ParsingStage.CHANGES-->Line_17 $$ if (stage == ParsingStage.CHANGES) [ FD ]
Line_9 $$ Pair<Data, String> data = checkDataLine(line)-->Line_20 $$ data.getFirst().apply(commit, data.getSecond())[ FD ]
Line_2 $$ public static CommitDetails parse(String hash, String details) -->Line_6 $$ Collection<Change> changes = new ArrayList<Change>()[ CD ]
Line_8 $$ for (String line : StringUtil.splitByLines(details)) -->Line_9 $$ Pair<Data, String> data = checkDataLine(line)[ FD ]
Line_11 $$ stage = ParsingStage.DATA-->Line_17 $$ if (stage == ParsingStage.CHANGES) [ FD ]
Line_7 $$ ParsingStage stage = ParsingStage.MESSAGE-->Line_17 $$ if (stage == ParsingStage.CHANGES) [ FD ]
Line_15 $$ if (stage == ParsingStage.MESSAGE) -->Line_16 $$ message.append(line)[ CD ]
Line_5 $$ StringBuilder message = new StringBuilder()-->Line_23 $$ commit.myMessage = message.toString()[ FD ]
Line_13 $$ stage = ParsingStage.CHANGES-->Line_15 $$ if (stage == ParsingStage.MESSAGE) [ FD ]
Line_2 $$ public static CommitDetails parse(String hash, String details) -->Line_3 $$ CommitDetails commit = new CommitDetails()[ CD ]
Line_2 $$ public static CommitDetails parse(String hash, String details) -->Line_7 $$ ParsingStage stage = ParsingStage.MESSAGE[ CD ]
Line_9 $$ Pair<Data, String> data = checkDataLine(line)-->Line_19 $$ if (data != null) [ FD ]
Line_10 $$ if (data != null) -->Line_11 $$ stage = ParsingStage.DATA[ CD ]
Line_12 $$ if (line.matches("[MADR]\\d* [^ ]+ .+")) -->Line_13 $$ stage = ParsingStage.CHANGES[ CD ]
Line_2 $$ public static CommitDetails parse(String hash, String details) -->Line_4 $$ commit.myHash = hash[ CD ]
Line_7 $$ ParsingStage stage = ParsingStage.MESSAGE-->Line_11 $$ stage = ParsingStage.DATA[ FD ]
Line_5 $$ StringBuilder message = new StringBuilder()-->Line_16 $$ message.append(line)[ FD ]
Line_2 $$ public static CommitDetails parse(String hash, String details) -->Line_5 $$ StringBuilder message = new StringBuilder()[ CD ]
Line_10 $$ if (data != null) -->Line_12 $$ if (line.matches("[MADR]\\d* [^ ]+ .+")) [ CD ]
Line_8 $$ for (String line : StringUtil.splitByLines(details)) -->Line_16 $$ message.append(line)[ FD ]
Line_8 $$ for (String line : StringUtil.splitByLines(details)) -->Line_18 $$ changes.add(parseChange(line))[ FD ]
Line_15 $$ if (stage == ParsingStage.MESSAGE) -->Line_17 $$ if (stage == ParsingStage.CHANGES) [ CD ]
Line_7 $$ ParsingStage stage = ParsingStage.MESSAGE-->Line_13 $$ stage = ParsingStage.CHANGES[ FD ]
Line_11 $$ stage = ParsingStage.DATA-->Line_15 $$ if (stage == ParsingStage.MESSAGE) [ FD ]
Line_6 $$ Collection<Change> changes = new ArrayList<Change>()-->Line_24 $$ commit.myChanges = changes[ FD ]
Line_3 $$ CommitDetails commit = new CommitDetails()-->Line_20 $$ data.getFirst().apply(commit, data.getSecond())[ FD ]
Line_2 $$ public static CommitDetails parse(String hash, String details) -->Line_8 $$ for (String line : StringUtil.splitByLines(details)) [ FD ]
