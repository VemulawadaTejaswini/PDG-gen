Line_2 $$ private void createDirs(@NotNull Collection<String> mockRoots) throws IOException -->Line_4 $$ if (mockRoots.isEmpty()) [ FD ]
Line_2 $$ private void createDirs(@NotNull Collection<String> mockRoots) throws IOException -->Line_7 $$ baseDir = VfsUtilCore.virtualToIoFile(myProject.getBaseDir())[ CD ]
Line_2 $$ private void createDirs(@NotNull Collection<String> mockRoots) throws IOException -->Line_9 $$ File projectDir = createChild(baseDir, maxDepth - 1)[ CD ]
Line_3 $$ File baseDir-->Line_7 $$ baseDir = VfsUtilCore.virtualToIoFile(myProject.getBaseDir())[ FD ]
Line_12 $$ File file = new File(projectDir, path)-->Line_13 $$ file.mkdirs()[ FD ]
Line_14 $$ File mockDir = new File(file, DOT_MOCK)-->Line_17 $$ mockDir.deleteOnExit()[ FD ]
Line_7 $$ baseDir = VfsUtilCore.virtualToIoFile(myProject.getBaseDir())-->Line_9 $$ File projectDir = createChild(baseDir, maxDepth - 1)[ FD ]
Line_2 $$ private void createDirs(@NotNull Collection<String> mockRoots) throws IOException -->Line_8 $$ int maxDepth = findMaxDepthAboveProject(mockRoots)[ FD ]
Line_9 $$ File projectDir = createChild(baseDir, maxDepth - 1)-->Line_10 $$ cd(projectDir.getPath())[ FD ]
Line_14 $$ File mockDir = new File(file, DOT_MOCK)-->Line_16 $$ myFilesToDelete.add(mockDir)[ FD ]
Line_2 $$ private void createDirs(@NotNull Collection<String> mockRoots) throws IOException -->Line_3 $$ File baseDir[ CD ]
Line_4 $$ if (mockRoots.isEmpty()) -->Line_5 $$ return[ CD ]
Line_2 $$ private void createDirs(@NotNull Collection<String> mockRoots) throws IOException -->Line_4 $$ if (mockRoots.isEmpty()) [ CD ]
Line_2 $$ private void createDirs(@NotNull Collection<String> mockRoots) throws IOException -->Line_10 $$ cd(projectDir.getPath())[ CD ]
Line_14 $$ File mockDir = new File(file, DOT_MOCK)-->Line_15 $$ mockDir.mkdirs()[ FD ]
Line_3 $$ File baseDir-->Line_9 $$ File projectDir = createChild(baseDir, maxDepth - 1)[ FD ]
Line_2 $$ private void createDirs(@NotNull Collection<String> mockRoots) throws IOException -->Line_8 $$ int maxDepth = findMaxDepthAboveProject(mockRoots)[ CD ]
Line_14 $$ File mockDir = new File(file, DOT_MOCK)-->Line_18 $$ LocalFileSystem.getInstance().refreshAndFindFileByIoFile(mockDir)[ FD ]
