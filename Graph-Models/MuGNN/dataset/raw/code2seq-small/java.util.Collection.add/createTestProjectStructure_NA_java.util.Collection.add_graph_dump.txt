Line_10 $$ AccessToken token = WriteAction.start()-->Line_23 $$ token.finish()[ FD ]
Line_3 $$ File dir = FileUtil.createTempDirectory(tempName, null, false)-->Line_4 $$ filesToDelete.add(dir)[ FD ]
Line_2 $$ public static VirtualFile createTestProjectStructure(String tempName, final Module module, final String rootPath, final Collection<File> filesToDelete, final boolean addProjectRoots) throws IOException -->Line_12 $$ if (rootPath != null) [ FD ]
Line_19 $$ if (addProjectRoots) -->Line_20 $$ addSourceContentToRoots(module, vDir)[ CD ]
Line_2 $$ public static VirtualFile createTestProjectStructure(String tempName, final Module module, final String rootPath, final Collection<File> filesToDelete, final boolean addProjectRoots) throws IOException -->Line_8 $$ EdtTestUtil.runInEdtAndWait(new ThrowableRunnable<Throwable>() [ CD ]
Line_8 $$ EdtTestUtil.runInEdtAndWait(new ThrowableRunnable<Throwable>() -->Line_10 $$ AccessToken token = WriteAction.start()[ CD ]
Line_2 $$ public static VirtualFile createTestProjectStructure(String tempName, final Module module, final String rootPath, final Collection<File> filesToDelete, final boolean addProjectRoots) throws IOException -->Line_13 $$ VirtualFile vDir1 = LocalFileSystem.getInstance().findFileByPath(rootPath.replace(File.separatorChar, '/'))[ FD ]
Line_2 $$ public static VirtualFile createTestProjectStructure(String tempName, final Module module, final String rootPath, final Collection<File> filesToDelete, final boolean addProjectRoots) throws IOException -->Line_4 $$ filesToDelete.add(dir)[ FD ]
Line_2 $$ public static VirtualFile createTestProjectStructure(String tempName, final Module module, final String rootPath, final Collection<File> filesToDelete, final boolean addProjectRoots) throws IOException -->Line_4 $$ filesToDelete.add(dir)[ CD ]
Line_5 $$ final VirtualFile vDir = LocalFileSystem.getInstance().refreshAndFindFileByPath(dir.getCanonicalPath().replace(File.separatorChar, '/'))-->Line_20 $$ addSourceContentToRoots(module, vDir)[ FD ]
Line_5 $$ final VirtualFile vDir = LocalFileSystem.getInstance().refreshAndFindFileByPath(dir.getCanonicalPath().replace(File.separatorChar, '/'))-->Line_17 $$ VfsUtil.copyDirectory(null, vDir1, vDir, null)[ FD ]
Line_2 $$ public static VirtualFile createTestProjectStructure(String tempName, final Module module, final String rootPath, final Collection<File> filesToDelete, final boolean addProjectRoots) throws IOException -->Line_20 $$ addSourceContentToRoots(module, vDir)[ FD ]
Line_12 $$ if (rootPath != null) -->Line_14 $$ if (vDir1 == null) [ CD ]
Line_12 $$ if (rootPath != null) -->Line_13 $$ VirtualFile vDir1 = LocalFileSystem.getInstance().findFileByPath(rootPath.replace(File.separatorChar, '/'))[ CD ]
Line_2 $$ public static VirtualFile createTestProjectStructure(String tempName, final Module module, final String rootPath, final Collection<File> filesToDelete, final boolean addProjectRoots) throws IOException -->Line_3 $$ File dir = FileUtil.createTempDirectory(tempName, null, false)[ CD ]
Line_2 $$ public static VirtualFile createTestProjectStructure(String tempName, final Module module, final String rootPath, final Collection<File> filesToDelete, final boolean addProjectRoots) throws IOException -->Line_7 $$ PlatformTestCase.synchronizeTempDirVfs(vDir)[ CD ]
Line_13 $$ VirtualFile vDir1 = LocalFileSystem.getInstance().findFileByPath(rootPath.replace(File.separatorChar, '/'))-->Line_14 $$ if (vDir1 == null) [ FD ]
Line_12 $$ if (rootPath != null) -->Line_17 $$ VfsUtil.copyDirectory(null, vDir1, vDir, null)[ CD ]
Line_2 $$ public static VirtualFile createTestProjectStructure(String tempName, final Module module, final String rootPath, final Collection<File> filesToDelete, final boolean addProjectRoots) throws IOException -->Line_5 $$ final VirtualFile vDir = LocalFileSystem.getInstance().refreshAndFindFileByPath(dir.getCanonicalPath().replace(File.separatorChar, '/'))[ CD ]
Line_5 $$ final VirtualFile vDir = LocalFileSystem.getInstance().refreshAndFindFileByPath(dir.getCanonicalPath().replace(File.separatorChar, '/'))-->Line_6 $$ assert vDir != null && vDir.isDirectory() : dir[ FD ]
Line_5 $$ final VirtualFile vDir = LocalFileSystem.getInstance().refreshAndFindFileByPath(dir.getCanonicalPath().replace(File.separatorChar, '/'))-->Line_7 $$ PlatformTestCase.synchronizeTempDirVfs(vDir)[ FD ]
Line_3 $$ File dir = FileUtil.createTempDirectory(tempName, null, false)-->Line_5 $$ final VirtualFile vDir = LocalFileSystem.getInstance().refreshAndFindFileByPath(dir.getCanonicalPath().replace(File.separatorChar, '/'))[ FD ]
Line_13 $$ VirtualFile vDir1 = LocalFileSystem.getInstance().findFileByPath(rootPath.replace(File.separatorChar, '/'))-->Line_17 $$ VfsUtil.copyDirectory(null, vDir1, vDir, null)[ FD ]
Line_2 $$ public static VirtualFile createTestProjectStructure(String tempName, final Module module, final String rootPath, final Collection<File> filesToDelete, final boolean addProjectRoots) throws IOException -->Line_27 $$ return vDir[ CD ]
Line_2 $$ public static VirtualFile createTestProjectStructure(String tempName, final Module module, final String rootPath, final Collection<File> filesToDelete, final boolean addProjectRoots) throws IOException -->Line_3 $$ File dir = FileUtil.createTempDirectory(tempName, null, false)[ FD ]
