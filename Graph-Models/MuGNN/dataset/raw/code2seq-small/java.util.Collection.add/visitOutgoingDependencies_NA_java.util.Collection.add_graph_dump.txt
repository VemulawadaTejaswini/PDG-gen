Line_34 $$ ModuleIdentifier targetModuleId = DefaultModuleIdentifier.newId(dependency.getRequested().getGroup(), dependency.getRequested().getName())-->Line_35 $$ if (isExcluded(resolutionFilter, targetModuleId)) [ FD ]
Line_13 $$ if (transitiveIncoming.isEmpty() && this != resolveState.root) -->Line_22 $$ return[ CD ]
Line_8 $$ for (DependencyEdge edge : incomingEdges) -->Line_10 $$ transitiveIncoming.add(edge)[ FD ]
Line_26 $$ if (previousTraversal.acceptsSameModulesAs(resolutionFilter)) -->Line_29 $$ return[ CD ]
Line_8 $$ for (DependencyEdge edge : incomingEdges) -->Line_9 $$ if (edge.isTransitive()) [ FD ]
Line_7 $$ List<DependencyEdge> transitiveIncoming = new ArrayList<DependencyEdge>()-->Line_10 $$ transitiveIncoming.add(edge)[ FD ]
Line_7 $$ List<DependencyEdge> transitiveIncoming = new ArrayList<DependencyEdge>()-->Line_24 $$ ModuleResolutionFilter resolutionFilter = getModuleResolutionFilter(transitiveIncoming)[ FD ]
Line_26 $$ if (previousTraversal.acceptsSameModulesAs(resolutionFilter)) -->Line_27 $$ LOGGER.debug("Changed edges for [ CD ]
Line_38 $$ DependencyEdge dependencyEdge = new DependencyEdge(this, dependency, resolutionFilter, resolveState)-->Line_40 $$ target.add(dependencyEdge)[ FD ]
Line_2 $$ public void visitOutgoingDependencies(Collection<DependencyEdge> target) -->Line_25 $$ if (previousTraversal != null) [ CD ]
Line_25 $$ if (previousTraversal != null) -->Line_31 $$ removeOutgoingEdges()[ CD ]
Line_7 $$ List<DependencyEdge> transitiveIncoming = new ArrayList<DependencyEdge>()-->Line_13 $$ if (transitiveIncoming.isEmpty() && this != resolveState.root) [ FD ]
Line_17 $$ if (incomingEdges.isEmpty()) -->Line_20 $$ LOGGER.debug("[ CD ]
Line_14 $$ if (previousTraversal != null) -->Line_15 $$ removeOutgoingEdges()[ CD ]
Line_2 $$ public void visitOutgoingDependencies(Collection<DependencyEdge> target) -->Line_13 $$ if (transitiveIncoming.isEmpty() && this != resolveState.root) [ CD ]
Line_13 $$ if (transitiveIncoming.isEmpty() && this != resolveState.root) -->Line_14 $$ if (previousTraversal != null) [ CD ]
Line_24 $$ ModuleResolutionFilter resolutionFilter = getModuleResolutionFilter(transitiveIncoming)-->Line_26 $$ if (previousTraversal.acceptsSameModulesAs(resolutionFilter)) [ FD ]
Line_13 $$ if (transitiveIncoming.isEmpty() && this != resolveState.root) -->Line_17 $$ if (incomingEdges.isEmpty()) [ CD ]
Line_17 $$ if (incomingEdges.isEmpty()) -->Line_18 $$ LOGGER.debug("[ CD ]
Line_3 $$ if (moduleRevision.state != ModuleState.Selected) -->Line_5 $$ return[ CD ]
Line_2 $$ public void visitOutgoingDependencies(Collection<DependencyEdge> target) -->Line_7 $$ List<DependencyEdge> transitiveIncoming = new ArrayList<DependencyEdge>()[ CD ]
Line_38 $$ DependencyEdge dependencyEdge = new DependencyEdge(this, dependency, resolutionFilter, resolveState)-->Line_39 $$ outgoingEdges.add(dependencyEdge)[ FD ]
Line_2 $$ public void visitOutgoingDependencies(Collection<DependencyEdge> target) -->Line_3 $$ if (moduleRevision.state != ModuleState.Selected) [ CD ]
Line_2 $$ public void visitOutgoingDependencies(Collection<DependencyEdge> target) -->Line_40 $$ target.add(dependencyEdge)[ FD ]
Line_9 $$ if (edge.isTransitive()) -->Line_10 $$ transitiveIncoming.add(edge)[ CD ]
Line_24 $$ ModuleResolutionFilter resolutionFilter = getModuleResolutionFilter(transitiveIncoming)-->Line_35 $$ if (isExcluded(resolutionFilter, targetModuleId)) [ FD ]
Line_2 $$ public void visitOutgoingDependencies(Collection<DependencyEdge> target) -->Line_24 $$ ModuleResolutionFilter resolutionFilter = getModuleResolutionFilter(transitiveIncoming)[ CD ]
Line_33 $$ for (DependencyMetaData dependency : metaData.getDependencies()) -->Line_34 $$ ModuleIdentifier targetModuleId = DefaultModuleIdentifier.newId(dependency.getRequested().getGroup(), dependency.getRequested().getName())[ FD ]
Line_25 $$ if (previousTraversal != null) -->Line_26 $$ if (previousTraversal.acceptsSameModulesAs(resolutionFilter)) [ CD ]
Line_3 $$ if (moduleRevision.state != ModuleState.Selected) -->Line_4 $$ LOGGER.debug("version for [ CD ]
