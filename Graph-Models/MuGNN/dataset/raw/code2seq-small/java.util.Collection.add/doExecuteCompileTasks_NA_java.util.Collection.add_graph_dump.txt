Line_9 $$ if (myBefore) -->Line_10 $$ if (context.isRebuild()) [ CD ]
Line_2 $$ private boolean doExecuteCompileTasks(boolean myBefore, @NotNull CompileContext context) -->Line_10 $$ if (context.isRebuild()) [ FD ]
Line_2 $$ private boolean doExecuteCompileTasks(boolean myBefore, @NotNull CompileContext context) -->Line_16 $$ if (context.isRebuild()) [ FD ]
Line_2 $$ private boolean doExecuteCompileTasks(boolean myBefore, @NotNull CompileContext context) -->Line_3 $$ final List<String> modules = ContainerUtil.map(context.getCompileScope().getAffectedModules(), new Function<Module, String>() [ FD ]
Line_2 $$ private boolean doExecuteCompileTasks(boolean myBefore, @NotNull CompileContext context) -->Line_8 $$ final Collection<Phase> phases = ContainerUtil.newArrayList()[ CD ]
Line_16 $$ if (context.isRebuild()) -->Line_17 $$ phases.add(Phase.AFTER_REBUILD)[ CD ]
Line_3 $$ final List<String> modules = ContainerUtil.map(context.getCompileScope().getAffectedModules(), new Function<Module, String>() -->Line_5 $$ return ExternalSystemApiUtil.getExternalProjectPath(module)[ FD ]
Line_3 $$ final List<String> modules = ContainerUtil.map(context.getCompileScope().getAffectedModules(), new Function<Module, String>() -->Line_5 $$ return ExternalSystemApiUtil.getExternalProjectPath(module)[ CD ]
Line_2 $$ private boolean doExecuteCompileTasks(boolean myBefore, @NotNull CompileContext context) -->Line_9 $$ if (myBefore) [ CD ]
Line_9 $$ if (myBefore) -->Line_15 $$ phases.add(Phase.AFTER_COMPILE)[ CD ]
Line_2 $$ private boolean doExecuteCompileTasks(boolean myBefore, @NotNull CompileContext context) -->Line_3 $$ final List<String> modules = ContainerUtil.map(context.getCompileScope().getAffectedModules(), new Function<Module, String>() [ CD ]
Line_3 $$ final List<String> modules = ContainerUtil.map(context.getCompileScope().getAffectedModules(), new Function<Module, String>() -->Line_20 $$ return runTasks(modules, ArrayUtil.toObjectArray(phases, Phase.class))[ FD ]
Line_10 $$ if (context.isRebuild()) -->Line_11 $$ phases.add(Phase.BEFORE_REBUILD)[ CD ]
Line_9 $$ if (myBefore) -->Line_16 $$ if (context.isRebuild()) [ CD ]
Line_2 $$ private boolean doExecuteCompileTasks(boolean myBefore, @NotNull CompileContext context) -->Line_20 $$ return runTasks(modules, ArrayUtil.toObjectArray(phases, Phase.class))[ CD ]
Line_9 $$ if (myBefore) -->Line_13 $$ phases.add(Phase.BEFORE_COMPILE)[ CD ]
