Line_19 $$ File shelvedFile = new File(file.SHELVED_PATH)-->Line_23 $$ FileUtil.copy(shelvedFile, newShelvedFile)[ FD ]
Line_2 $$ private static Collection<String> migrateIfNeededToSchemeDir(@NotNull ShelvedChangeList list, @NotNull File targetDirectory) -->Line_3 $$ if (targetDirectory.exists() || !targetDirectory.mkdirs())[ FD ]
Line_2 $$ private static Collection<String> migrateIfNeededToSchemeDir(@NotNull ShelvedChangeList list, @NotNull File targetDirectory) -->Line_8 $$ File newPatchFile = getPatchFileInConfigDir(targetDirectory)[ FD ]
Line_19 $$ File shelvedFile = new File(file.SHELVED_PATH)-->Line_27 $$ nonMigratedPaths.add(shelvedFile.getPath())[ FD ]
Line_7 $$ if (patchFile.exists()) -->Line_8 $$ File newPatchFile = getPatchFileInConfigDir(targetDirectory)[ CD ]
Line_18 $$ if (file.SHELVED_PATH != null) -->Line_20 $$ if (!StringUtil.isEmptyOrSpaces(file.AFTER_PATH) && shelvedFile.exists()) [ CD ]
Line_8 $$ File newPatchFile = getPatchFileInConfigDir(targetDirectory)-->Line_11 $$ list.PATH = FileUtil.toSystemIndependentName(newPatchFile.getPath())[ FD ]
Line_2 $$ private static Collection<String> migrateIfNeededToSchemeDir(@NotNull ShelvedChangeList list, @NotNull File targetDirectory) -->Line_3 $$ if (targetDirectory.exists() || !targetDirectory.mkdirs())[ CD ]
Line_18 $$ if (file.SHELVED_PATH != null) -->Line_19 $$ File shelvedFile = new File(file.SHELVED_PATH)[ CD ]
Line_19 $$ File shelvedFile = new File(file.SHELVED_PATH)-->Line_20 $$ if (!StringUtil.isEmptyOrSpaces(file.AFTER_PATH) && shelvedFile.exists()) [ FD ]
Line_2 $$ private static Collection<String> migrateIfNeededToSchemeDir(@NotNull ShelvedChangeList list, @NotNull File targetDirectory) -->Line_6 $$ File patchFile = new File(list.PATH)[ CD ]
Line_2 $$ private static Collection<String> migrateIfNeededToSchemeDir(@NotNull ShelvedChangeList list, @NotNull File targetDirectory) -->Line_7 $$ if (patchFile.exists()) [ CD ]
Line_6 $$ File patchFile = new File(list.PATH)-->Line_7 $$ if (patchFile.exists()) [ FD ]
Line_19 $$ File shelvedFile = new File(file.SHELVED_PATH)-->Line_25 $$ FileUtil.delete(shelvedFile)[ FD ]
Line_2 $$ private static Collection<String> migrateIfNeededToSchemeDir(@NotNull ShelvedChangeList list, @NotNull File targetDirectory) -->Line_32 $$ return nonMigratedPaths[ CD ]
Line_8 $$ File newPatchFile = getPatchFileInConfigDir(targetDirectory)-->Line_10 $$ FileUtil.copy(patchFile, newPatchFile)[ FD ]
Line_2 $$ private static Collection<String> migrateIfNeededToSchemeDir(@NotNull ShelvedChangeList list, @NotNull File targetDirectory) -->Line_17 $$ for (ShelvedBinaryFile file : list.getBinaryFiles()) [ FD ]
Line_5 $$ Collection<String> nonMigratedPaths = ContainerUtil.newArrayList()-->Line_27 $$ nonMigratedPaths.add(shelvedFile.getPath())[ FD ]
Line_3 $$ if (targetDirectory.exists() || !targetDirectory.mkdirs())-->Line_4 $$ return ContainerUtil.emptyList()[ CD ]
Line_6 $$ File patchFile = new File(list.PATH)-->Line_10 $$ FileUtil.copy(patchFile, newPatchFile)[ FD ]
Line_5 $$ Collection<String> nonMigratedPaths = ContainerUtil.newArrayList()-->Line_14 $$ nonMigratedPaths.add(list.PATH)[ FD ]
Line_21 $$ File newShelvedFile = new File(targetDirectory, PathUtil.getFileName(file.AFTER_PATH))-->Line_23 $$ FileUtil.copy(shelvedFile, newShelvedFile)[ FD ]
Line_20 $$ if (!StringUtil.isEmptyOrSpaces(file.AFTER_PATH) && shelvedFile.exists()) -->Line_21 $$ File newShelvedFile = new File(targetDirectory, PathUtil.getFileName(file.AFTER_PATH))[ CD ]
Line_6 $$ File patchFile = new File(list.PATH)-->Line_12 $$ FileUtil.delete(patchFile)[ FD ]
Line_21 $$ File newShelvedFile = new File(targetDirectory, PathUtil.getFileName(file.AFTER_PATH))-->Line_24 $$ file.SHELVED_PATH = FileUtil.toSystemIndependentName(newShelvedFile.getPath())[ FD ]
Line_2 $$ private static Collection<String> migrateIfNeededToSchemeDir(@NotNull ShelvedChangeList list, @NotNull File targetDirectory) -->Line_5 $$ Collection<String> nonMigratedPaths = ContainerUtil.newArrayList()[ CD ]
