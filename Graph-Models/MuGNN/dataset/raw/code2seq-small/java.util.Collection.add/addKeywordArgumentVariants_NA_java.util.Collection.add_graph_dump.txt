Line_12 $$ if (callable instanceof PyFunction) -->Line_22 $$ addKeywordArgumentVariantsForCallable(callExpr, ret, parameterNames)[ CD ]
Line_2 $$ public static void addKeywordArgumentVariants(PyCallable callable, PyCallExpression callExpr, List<LookupElement> ret, Collection<PyCallable> visited) -->Line_3 $$ if (visited.contains(callable)) [ FD ]
Line_2 $$ public static void addKeywordArgumentVariants(PyCallable callable, PyCallExpression callExpr, List<LookupElement> ret, Collection<PyCallable> visited) -->Line_6 $$ visited.add(callable)[ FD ]
Line_2 $$ public static void addKeywordArgumentVariants(PyCallable callable, PyCallExpression callExpr, List<LookupElement> ret, Collection<PyCallable> visited) -->Line_12 $$ if (callable instanceof PyFunction) [ CD ]
Line_9 $$ for (final PyParameter parameter : parameters) -->Line_10 $$ parameter.getName()[ FD ]
Line_15 $$ final Collection<String> parameterNames = new ArrayList<String>()-->Line_19 $$ parameterNames.add(name)[ FD ]
Line_2 $$ public static void addKeywordArgumentVariants(PyCallable callable, PyCallExpression callExpr, List<LookupElement> ret, Collection<PyCallable> visited) -->Line_12 $$ if (callable instanceof PyFunction) [ FD ]
Line_9 $$ for (final PyParameter parameter : parameters) -->Line_17 $$ final String name = parameter.getName()[ FD ]
Line_17 $$ final String name = parameter.getName()-->Line_18 $$ if (name != null) [ FD ]
Line_7 $$ final TypeEvalContext context = TypeEvalContext.codeCompletion(callable.getProject(), callable.getContainingFile())-->Line_13 $$ addKeywordArgumentVariantsForFunction(callExpr, ret, visited, (PyFunction) callable, parameters, context)[ FD ]
Line_2 $$ public static void addKeywordArgumentVariants(PyCallable callable, PyCallExpression callExpr, List<LookupElement> ret, Collection<PyCallable> visited) -->Line_8 $$ final List<PyParameter> parameters = PyUtil.getParameters(callable, context)[ FD ]
Line_12 $$ if (callable instanceof PyFunction) -->Line_13 $$ addKeywordArgumentVariantsForFunction(callExpr, ret, visited, (PyFunction) callable, parameters, context)[ CD ]
Line_15 $$ final Collection<String> parameterNames = new ArrayList<String>()-->Line_22 $$ addKeywordArgumentVariantsForCallable(callExpr, ret, parameterNames)[ FD ]
Line_17 $$ final String name = parameter.getName()-->Line_19 $$ parameterNames.add(name)[ FD ]
Line_3 $$ if (visited.contains(callable)) -->Line_4 $$ return[ CD ]
Line_8 $$ final List<PyParameter> parameters = PyUtil.getParameters(callable, context)-->Line_13 $$ addKeywordArgumentVariantsForFunction(callExpr, ret, visited, (PyFunction) callable, parameters, context)[ FD ]
Line_12 $$ if (callable instanceof PyFunction) -->Line_15 $$ final Collection<String> parameterNames = new ArrayList<String>()[ CD ]
Line_2 $$ public static void addKeywordArgumentVariants(PyCallable callable, PyCallExpression callExpr, List<LookupElement> ret, Collection<PyCallable> visited) -->Line_8 $$ final List<PyParameter> parameters = PyUtil.getParameters(callable, context)[ CD ]
Line_2 $$ public static void addKeywordArgumentVariants(PyCallable callable, PyCallExpression callExpr, List<LookupElement> ret, Collection<PyCallable> visited) -->Line_7 $$ final TypeEvalContext context = TypeEvalContext.codeCompletion(callable.getProject(), callable.getContainingFile())[ CD ]
Line_2 $$ public static void addKeywordArgumentVariants(PyCallable callable, PyCallExpression callExpr, List<LookupElement> ret, Collection<PyCallable> visited) -->Line_6 $$ visited.add(callable)[ CD ]
Line_2 $$ public static void addKeywordArgumentVariants(PyCallable callable, PyCallExpression callExpr, List<LookupElement> ret, Collection<PyCallable> visited) -->Line_22 $$ addKeywordArgumentVariantsForCallable(callExpr, ret, parameterNames)[ FD ]
Line_2 $$ public static void addKeywordArgumentVariants(PyCallable callable, PyCallExpression callExpr, List<LookupElement> ret, Collection<PyCallable> visited) -->Line_3 $$ if (visited.contains(callable)) [ CD ]
Line_7 $$ final TypeEvalContext context = TypeEvalContext.codeCompletion(callable.getProject(), callable.getContainingFile())-->Line_8 $$ final List<PyParameter> parameters = PyUtil.getParameters(callable, context)[ FD ]
Line_2 $$ public static void addKeywordArgumentVariants(PyCallable callable, PyCallExpression callExpr, List<LookupElement> ret, Collection<PyCallable> visited) -->Line_7 $$ final TypeEvalContext context = TypeEvalContext.codeCompletion(callable.getProject(), callable.getContainingFile())[ FD ]
Line_2 $$ public static void addKeywordArgumentVariants(PyCallable callable, PyCallExpression callExpr, List<LookupElement> ret, Collection<PyCallable> visited) -->Line_13 $$ addKeywordArgumentVariantsForFunction(callExpr, ret, visited, (PyFunction) callable, parameters, context)[ FD ]
Line_18 $$ if (name != null) -->Line_19 $$ parameterNames.add(name)[ CD ]
