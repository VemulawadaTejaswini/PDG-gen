Line_9 $$ if (isRemote(compiledClass, finder)) -->Line_10 $$ Collection<ClassItem> list = remoteClasses.get(target)[ CD ]
Line_5 $$ final Map<ModuleBuildTarget, Collection<ClassItem>> remoteClasses = new THashMap<ModuleBuildTarget, Collection<ClassItem>>()-->Line_22 $$ if (!remoteClasses.isEmpty()) [ FD ]
Line_2 $$ protected ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_4 $$ if (!outputConsumer.getCompiledClasses().isEmpty()) [ FD ]
Line_5 $$ final Map<ModuleBuildTarget, Collection<ClassItem>> remoteClasses = new THashMap<ModuleBuildTarget, Collection<ClassItem>>()-->Line_13 $$ remoteClasses.put(target, list)[ FD ]
Line_22 $$ if (!remoteClasses.isEmpty()) -->Line_23 $$ exitCode = generateRmiStubs(context, remoteClasses, chunk, outputConsumer)[ CD ]
Line_2 $$ protected ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_23 $$ exitCode = generateRmiStubs(context, remoteClasses, chunk, outputConsumer)[ FD ]
Line_5 $$ final Map<ModuleBuildTarget, Collection<ClassItem>> remoteClasses = new THashMap<ModuleBuildTarget, Collection<ClassItem>>()-->Line_23 $$ exitCode = generateRmiStubs(context, remoteClasses, chunk, outputConsumer)[ FD ]
Line_6 $$ for (ModuleBuildTarget target : chunk.getTargets()) -->Line_10 $$ Collection<ClassItem> list = remoteClasses.get(target)[ FD ]
Line_9 $$ if (isRemote(compiledClass, finder)) -->Line_15 $$ list.add(new ClassItem(compiledClass))[ CD ]
Line_6 $$ for (ModuleBuildTarget target : chunk.getTargets()) -->Line_7 $$ for (CompiledClass compiledClass : outputConsumer.getTargetCompiledClasses(target)) [ FD ]
Line_2 $$ protected ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_18 $$ context.processMessage(new CompilerMessage(getPresentableName(), e))[ FD ]
Line_2 $$ protected ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_6 $$ for (ModuleBuildTarget target : chunk.getTargets()) [ FD ]
Line_2 $$ protected ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_7 $$ for (CompiledClass compiledClass : outputConsumer.getTargetCompiledClasses(target)) [ FD ]
Line_7 $$ for (CompiledClass compiledClass : outputConsumer.getTargetCompiledClasses(target)) -->Line_9 $$ if (isRemote(compiledClass, finder)) [ FD ]
Line_9 $$ if (isRemote(compiledClass, finder)) -->Line_11 $$ if (list == null) [ CD ]
Line_6 $$ for (ModuleBuildTarget target : chunk.getTargets()) -->Line_13 $$ remoteClasses.put(target, list)[ FD ]
Line_10 $$ Collection<ClassItem> list = remoteClasses.get(target)-->Line_12 $$ list = new ArrayList<ClassItem>()[ FD ]
Line_12 $$ list = new ArrayList<ClassItem>()-->Line_15 $$ list.add(new ClassItem(compiledClass))[ FD ]
Line_2 $$ protected ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_3 $$ ExitCode exitCode = ExitCode.NOTHING_DONE[ CD ]
Line_10 $$ Collection<ClassItem> list = remoteClasses.get(target)-->Line_15 $$ list.add(new ClassItem(compiledClass))[ FD ]
Line_11 $$ if (list == null) -->Line_13 $$ remoteClasses.put(target, list)[ CD ]
Line_12 $$ list = new ArrayList<ClassItem>()-->Line_13 $$ remoteClasses.put(target, list)[ FD ]
Line_5 $$ final Map<ModuleBuildTarget, Collection<ClassItem>> remoteClasses = new THashMap<ModuleBuildTarget, Collection<ClassItem>>()-->Line_10 $$ Collection<ClassItem> list = remoteClasses.get(target)[ FD ]
Line_4 $$ if (!outputConsumer.getCompiledClasses().isEmpty()) -->Line_5 $$ final Map<ModuleBuildTarget, Collection<ClassItem>> remoteClasses = new THashMap<ModuleBuildTarget, Collection<ClassItem>>()[ CD ]
Line_10 $$ Collection<ClassItem> list = remoteClasses.get(target)-->Line_11 $$ if (list == null) [ FD ]
Line_4 $$ if (!outputConsumer.getCompiledClasses().isEmpty()) -->Line_22 $$ if (!remoteClasses.isEmpty()) [ CD ]
Line_10 $$ Collection<ClassItem> list = remoteClasses.get(target)-->Line_13 $$ remoteClasses.put(target, list)[ FD ]
Line_2 $$ protected ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_4 $$ if (!outputConsumer.getCompiledClasses().isEmpty()) [ CD ]
Line_2 $$ protected ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_9 $$ if (isRemote(compiledClass, finder)) [ FD ]
Line_3 $$ ExitCode exitCode = ExitCode.NOTHING_DONE-->Line_23 $$ exitCode = generateRmiStubs(context, remoteClasses, chunk, outputConsumer)[ FD ]
Line_2 $$ protected ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_26 $$ return exitCode[ CD ]
Line_11 $$ if (list == null) -->Line_12 $$ list = new ArrayList<ClassItem>()[ CD ]
