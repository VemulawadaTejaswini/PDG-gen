Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_12 $$ if (alreadySeen) [ CD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_17 $$ graph.getNodeValues(node, new HashSet<Object>(), children)[ FD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_18 $$ if (children.isEmpty()) [ CD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_3 $$ final boolean alreadySeen = !rendered.add(node)[ FD ]
Line_4 $$ graphRenderer.visit(new Action<StyledTextOutput>() -->Line_6 $$ nodeRenderer.renderTo(node, output)[ CD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_3 $$ final boolean alreadySeen = !rendered.add(node)[ CD ]
Line_18 $$ if (children.isEmpty()) -->Line_19 $$ return[ CD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_26 $$ graphRenderer.completeChildren()[ FD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_22 $$ for (int i = 0; i < children.size(); i++) [ CD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_21 $$ graphRenderer.startChildren()[ FD ]
Line_22 $$ for (int i = 0; i < children.size(); i++) -->Line_24 $$ renderTo(child, graphRenderer, rendered, i == children.size() - 1)[ CD ]
Line_22 $$ for (int i = 0; i < children.size(); i++) -->Line_23 $$ N child = children.get(i)[ FD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_4 $$ graphRenderer.visit(new Action<StyledTextOutput>() [ CD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_17 $$ graph.getNodeValues(node, new HashSet<Object>(), children)[ CD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_6 $$ nodeRenderer.renderTo(node, output)[ FD ]
Line_4 $$ graphRenderer.visit(new Action<StyledTextOutput>() -->Line_7 $$ if (alreadySeen) [ CD ]
Line_4 $$ graphRenderer.visit(new Action<StyledTextOutput>() -->Line_6 $$ nodeRenderer.renderTo(node, output)[ FD ]
Line_7 $$ if (alreadySeen) -->Line_8 $$ output.text(" (*)")[ CD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_4 $$ graphRenderer.visit(new Action<StyledTextOutput>() [ FD ]
Line_12 $$ if (alreadySeen) -->Line_14 $$ return[ CD ]
Line_22 $$ for (int i = 0; i < children.size(); i++) -->Line_23 $$ N child = children.get(i)[ CD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_24 $$ renderTo(child, graphRenderer, rendered, i == children.size() - 1)[ FD ]
Line_23 $$ N child = children.get(i)-->Line_24 $$ renderTo(child, graphRenderer, rendered, i == children.size() - 1)[ FD ]
Line_4 $$ graphRenderer.visit(new Action<StyledTextOutput>() -->Line_8 $$ output.text(" (*)")[ FD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_26 $$ graphRenderer.completeChildren()[ CD ]
Line_2 $$ private void renderTo(final N node, GraphRenderer graphRenderer, Collection<N> rendered, boolean lastChild) -->Line_21 $$ graphRenderer.startChildren()[ CD ]
