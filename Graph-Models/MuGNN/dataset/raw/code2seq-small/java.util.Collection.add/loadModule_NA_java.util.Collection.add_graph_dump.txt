Line_8 $$ module = ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<Module, Exception>() -->Line_10 $$ return moduleManager.loadModule(normalizedPath)[ CD ]
Line_2 $$ protected Module loadModule(@NotNull String modulePath) -->Line_18 $$ return module[ CD ]
Line_2 $$ protected Module loadModule(@NotNull String modulePath) -->Line_6 $$ Module module[ CD ]
Line_2 $$ protected Module loadModule(@NotNull String modulePath) -->Line_3 $$ final String normalizedPath = FileUtil.toSystemIndependentName(modulePath)[ CD ]
Line_2 $$ protected Module loadModule(@NotNull String modulePath) -->Line_17 $$ myModulesToDispose.add(module)[ CD ]
Line_2 $$ protected Module loadModule(@NotNull String modulePath) -->Line_3 $$ final String normalizedPath = FileUtil.toSystemIndependentName(modulePath)[ FD ]
Line_6 $$ Module module-->Line_8 $$ module = ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<Module, Exception>() [ FD ]
Line_2 $$ protected Module loadModule(@NotNull String modulePath) -->Line_4 $$ LocalFileSystem.getInstance().refreshAndFindFileByPath(normalizedPath)[ CD ]
Line_6 $$ Module module-->Line_17 $$ myModulesToDispose.add(module)[ FD ]
Line_8 $$ module = ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<Module, Exception>() -->Line_17 $$ myModulesToDispose.add(module)[ FD ]
Line_5 $$ final ModuleManager moduleManager = ModuleManager.getInstance(myProject)-->Line_10 $$ return moduleManager.loadModule(normalizedPath)[ FD ]
Line_3 $$ final String normalizedPath = FileUtil.toSystemIndependentName(modulePath)-->Line_10 $$ return moduleManager.loadModule(normalizedPath)[ FD ]
Line_3 $$ final String normalizedPath = FileUtil.toSystemIndependentName(modulePath)-->Line_4 $$ LocalFileSystem.getInstance().refreshAndFindFileByPath(normalizedPath)[ FD ]
Line_2 $$ protected Module loadModule(@NotNull String modulePath) -->Line_5 $$ final ModuleManager moduleManager = ModuleManager.getInstance(myProject)[ CD ]
