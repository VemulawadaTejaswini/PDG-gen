Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_5 $$ Collection<File> bpDataDirs = new ArrayList<File>()[ CD ]
Line_13 $$ BlockPoolSliceStorage bpStorage = this.bpStorageMap.get(bpid)-->Line_15 $$ bpStorage = new BlockPoolSliceStorage(nsInfo.getNamespaceID(), bpid, nsInfo.getCTime(), nsInfo.getClusterID())[ FD ]
Line_3 $$ List<StorageLocation> tmpDataDirs = new ArrayList<StorageLocation>(dataDirs)-->Line_4 $$ addStorageLocations(datanode, nsInfo, tmpDataDirs, startOpt, false, true)[ FD ]
Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_15 $$ bpStorage = new BlockPoolSliceStorage(nsInfo.getNamespaceID(), bpid, nsInfo.getCTime(), nsInfo.getClusterID())[ FD ]
Line_15 $$ bpStorage = new BlockPoolSliceStorage(nsInfo.getNamespaceID(), bpid, nsInfo.getCTime(), nsInfo.getClusterID())-->Line_17 $$ bpStorage.recoverTransitionRead(datanode, nsInfo, bpDataDirs, startOpt)[ FD ]
Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_6 $$ String bpid = nsInfo.getBlockPoolID()[ CD ]
Line_13 $$ BlockPoolSliceStorage bpStorage = this.bpStorageMap.get(bpid)-->Line_14 $$ if (bpStorage == null) [ FD ]
Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_18 $$ addBlockPoolStorage(bpid, bpStorage)[ CD ]
Line_13 $$ BlockPoolSliceStorage bpStorage = this.bpStorageMap.get(bpid)-->Line_18 $$ addBlockPoolStorage(bpid, bpStorage)[ FD ]
Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_17 $$ bpStorage.recoverTransitionRead(datanode, nsInfo, bpDataDirs, startOpt)[ FD ]
Line_5 $$ Collection<File> bpDataDirs = new ArrayList<File>()-->Line_17 $$ bpStorage.recoverTransitionRead(datanode, nsInfo, bpDataDirs, startOpt)[ FD ]
Line_13 $$ BlockPoolSliceStorage bpStorage = this.bpStorageMap.get(bpid)-->Line_17 $$ bpStorage.recoverTransitionRead(datanode, nsInfo, bpDataDirs, startOpt)[ FD ]
Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_17 $$ bpStorage.recoverTransitionRead(datanode, nsInfo, bpDataDirs, startOpt)[ CD ]
Line_6 $$ String bpid = nsInfo.getBlockPoolID()-->Line_9 $$ File bpRoot = BlockPoolSliceStorage.getBpRoot(bpid, new File(dnRoot, STORAGE_DIR_CURRENT))[ FD ]
Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_13 $$ BlockPoolSliceStorage bpStorage = this.bpStorageMap.get(bpid)[ CD ]
Line_6 $$ String bpid = nsInfo.getBlockPoolID()-->Line_18 $$ addBlockPoolStorage(bpid, bpStorage)[ FD ]
Line_5 $$ Collection<File> bpDataDirs = new ArrayList<File>()-->Line_12 $$ makeBlockPoolDataDir(bpDataDirs, null)[ FD ]
Line_14 $$ if (bpStorage == null) -->Line_15 $$ bpStorage = new BlockPoolSliceStorage(nsInfo.getNamespaceID(), bpid, nsInfo.getCTime(), nsInfo.getClusterID())[ CD ]
Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_4 $$ addStorageLocations(datanode, nsInfo, tmpDataDirs, startOpt, false, true)[ FD ]
Line_7 $$ for (StorageLocation dir : dataDirs) -->Line_8 $$ File dnRoot = dir.getFile()[ FD ]
Line_5 $$ Collection<File> bpDataDirs = new ArrayList<File>()-->Line_10 $$ bpDataDirs.add(bpRoot)[ FD ]
Line_6 $$ String bpid = nsInfo.getBlockPoolID()-->Line_13 $$ BlockPoolSliceStorage bpStorage = this.bpStorageMap.get(bpid)[ FD ]
Line_15 $$ bpStorage = new BlockPoolSliceStorage(nsInfo.getNamespaceID(), bpid, nsInfo.getCTime(), nsInfo.getClusterID())-->Line_18 $$ addBlockPoolStorage(bpid, bpStorage)[ FD ]
Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_6 $$ String bpid = nsInfo.getBlockPoolID()[ FD ]
Line_9 $$ File bpRoot = BlockPoolSliceStorage.getBpRoot(bpid, new File(dnRoot, STORAGE_DIR_CURRENT))-->Line_10 $$ bpDataDirs.add(bpRoot)[ FD ]
Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_12 $$ makeBlockPoolDataDir(bpDataDirs, null)[ CD ]
Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_4 $$ addStorageLocations(datanode, nsInfo, tmpDataDirs, startOpt, false, true)[ CD ]
Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_14 $$ if (bpStorage == null) [ CD ]
Line_2 $$ synchronized void addStorageLocations(DataNode datanode, NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException -->Line_3 $$ List<StorageLocation> tmpDataDirs = new ArrayList<StorageLocation>(dataDirs)[ CD ]
