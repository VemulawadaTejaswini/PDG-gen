Line_6 $$ if (startWithCommon) -->Line_12 $$ sentences.add(sentence(words, '.'))[ CD ]
Line_14 $$ while (totalWords < wordsCount) -->Line_16 $$ totalWords += words.length[ CD ]
Line_6 $$ if (startWithCommon) -->Line_7 $$ words = Arrays.copyOfRange(COMMON_P, 0, Math.min(wordsCount, COMMON_P.length))[ CD ]
Line_7 $$ words = Arrays.copyOfRange(COMMON_P, 0, Math.min(wordsCount, COMMON_P.length))-->Line_17 $$ insertCommas(words)[ FD ]
Line_16 $$ totalWords += words.length-->Line_14 $$ while (totalWords < wordsCount) [ FD ]
Line_3 $$ Collection<String> sentences = new LinkedList<String>()-->Line_18 $$ sentences.add(sentence(words))[ FD ]
Line_4 $$ int totalWords = 0-->Line_14 $$ while (totalWords < wordsCount) [ FD ]
Line_14 $$ while (totalWords < wordsCount) -->Line_17 $$ insertCommas(words)[ CD ]
Line_2 $$ public String generate(int wordsCount, boolean startWithCommon) -->Line_5 $$ String[] words[ CD ]
Line_4 $$ int totalWords = 0-->Line_16 $$ totalWords += words.length[ FD ]
Line_6 $$ if (startWithCommon) -->Line_8 $$ if (words.length > 5) [ CD ]
Line_5 $$ String[] words-->Line_15 $$ words = sample(WORDS, Math.min(rand(3, 12) * rand(1, 5), wordsCount - totalWords))[ FD ]
Line_3 $$ Collection<String> sentences = new LinkedList<String>()-->Line_20 $$ return StringUtil.join(sentences, " ")[ FD ]
Line_6 $$ if (startWithCommon) -->Line_11 $$ totalWords += words.length[ CD ]
Line_2 $$ public String generate(int wordsCount, boolean startWithCommon) -->Line_4 $$ int totalWords = 0[ CD ]
Line_2 $$ public String generate(int wordsCount, boolean startWithCommon) -->Line_14 $$ while (totalWords < wordsCount) [ FD ]
Line_15 $$ words = sample(WORDS, Math.min(rand(3, 12) * rand(1, 5), wordsCount - totalWords))-->Line_17 $$ insertCommas(words)[ FD ]
Line_3 $$ Collection<String> sentences = new LinkedList<String>()-->Line_12 $$ sentences.add(sentence(words, '.'))[ FD ]
Line_2 $$ public String generate(int wordsCount, boolean startWithCommon) -->Line_20 $$ return StringUtil.join(sentences, " ")[ CD ]
Line_7 $$ words = Arrays.copyOfRange(COMMON_P, 0, Math.min(wordsCount, COMMON_P.length))-->Line_12 $$ sentences.add(sentence(words, '.'))[ FD ]
Line_11 $$ totalWords += words.length-->Line_14 $$ while (totalWords < wordsCount) [ FD ]
Line_5 $$ String[] words-->Line_18 $$ sentences.add(sentence(words))[ FD ]
Line_7 $$ words = Arrays.copyOfRange(COMMON_P, 0, Math.min(wordsCount, COMMON_P.length))-->Line_15 $$ words = sample(WORDS, Math.min(rand(3, 12) * rand(1, 5), wordsCount - totalWords))[ FD ]
Line_8 $$ if (words.length > 5) -->Line_9 $$ words[4] += ','[ CD ]
Line_2 $$ public String generate(int wordsCount, boolean startWithCommon) -->Line_6 $$ if (startWithCommon) [ CD ]
Line_2 $$ public String generate(int wordsCount, boolean startWithCommon) -->Line_14 $$ while (totalWords < wordsCount) [ CD ]
Line_2 $$ public String generate(int wordsCount, boolean startWithCommon) -->Line_3 $$ Collection<String> sentences = new LinkedList<String>()[ CD ]
Line_5 $$ String[] words-->Line_17 $$ insertCommas(words)[ FD ]
Line_14 $$ while (totalWords < wordsCount) -->Line_18 $$ sentences.add(sentence(words))[ CD ]
Line_4 $$ int totalWords = 0-->Line_11 $$ totalWords += words.length[ FD ]
Line_5 $$ String[] words-->Line_12 $$ sentences.add(sentence(words, '.'))[ FD ]
Line_7 $$ words = Arrays.copyOfRange(COMMON_P, 0, Math.min(wordsCount, COMMON_P.length))-->Line_18 $$ sentences.add(sentence(words))[ FD ]
Line_5 $$ String[] words-->Line_7 $$ words = Arrays.copyOfRange(COMMON_P, 0, Math.min(wordsCount, COMMON_P.length))[ FD ]
Line_2 $$ public String generate(int wordsCount, boolean startWithCommon) -->Line_7 $$ words = Arrays.copyOfRange(COMMON_P, 0, Math.min(wordsCount, COMMON_P.length))[ FD ]
Line_11 $$ totalWords += words.length-->Line_16 $$ totalWords += words.length[ FD ]
Line_15 $$ words = sample(WORDS, Math.min(rand(3, 12) * rand(1, 5), wordsCount - totalWords))-->Line_18 $$ sentences.add(sentence(words))[ FD ]
Line_14 $$ while (totalWords < wordsCount) -->Line_15 $$ words = sample(WORDS, Math.min(rand(3, 12) * rand(1, 5), wordsCount - totalWords))[ CD ]
