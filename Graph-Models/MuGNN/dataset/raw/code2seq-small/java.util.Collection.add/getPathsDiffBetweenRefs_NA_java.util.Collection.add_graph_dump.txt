Line_11 $$ for (StringScanner s = new StringScanner(result.getOutputAsJoinedString()); s.hasMoreData(); ) -->Line_12 $$ final String relative = s.line()[ FD ]
Line_2 $$ public static Collection<String> getPathsDiffBetweenRefs(@NotNull Git git, @NotNull GitRepository repository, @NotNull String beforeRef, @NotNull String afterRef) throws VcsException -->Line_3 $$ List<String> parameters = Arrays.asList("--name-only", "--pretty=format:")[ CD ]
Line_12 $$ final String relative = s.line()-->Line_16 $$ final String path = repository.getRoot().getPath() + "/" + unescapePath(relative)[ FD ]
Line_2 $$ public static Collection<String> getPathsDiffBetweenRefs(@NotNull Git git, @NotNull GitRepository repository, @NotNull String beforeRef, @NotNull String afterRef) throws VcsException -->Line_19 $$ return remoteChanges[ CD ]
Line_11 $$ for (StringScanner s = new StringScanner(result.getOutputAsJoinedString()); s.hasMoreData(); ) -->Line_12 $$ final String relative = s.line()[ CD ]
Line_5 $$ GitCommandResult result = git.diff(repository, parameters, range)-->Line_6 $$ if (!result.success()) [ FD ]
Line_3 $$ List<String> parameters = Arrays.asList("--name-only", "--pretty=format:")-->Line_5 $$ GitCommandResult result = git.diff(repository, parameters, range)[ FD ]
Line_11 $$ for (StringScanner s = new StringScanner(result.getOutputAsJoinedString()); s.hasMoreData(); ) -->Line_16 $$ final String path = repository.getRoot().getPath() + "/" + unescapePath(relative)[ CD ]
Line_2 $$ public static Collection<String> getPathsDiffBetweenRefs(@NotNull Git git, @NotNull GitRepository repository, @NotNull String beforeRef, @NotNull String afterRef) throws VcsException -->Line_5 $$ GitCommandResult result = git.diff(repository, parameters, range)[ FD ]
Line_2 $$ public static Collection<String> getPathsDiffBetweenRefs(@NotNull Git git, @NotNull GitRepository repository, @NotNull String beforeRef, @NotNull String afterRef) throws VcsException -->Line_5 $$ GitCommandResult result = git.diff(repository, parameters, range)[ CD ]
Line_6 $$ if (!result.success()) -->Line_7 $$ LOG.info(String.format("Couldn't get diff in range [%s] for repository [%s]", range, repository.toLogString()))[ CD ]
Line_4 $$ String range = beforeRef + ".." + afterRef-->Line_7 $$ LOG.info(String.format("Couldn't get diff in range [%s] for repository [%s]", range, repository.toLogString()))[ FD ]
Line_2 $$ public static Collection<String> getPathsDiffBetweenRefs(@NotNull Git git, @NotNull GitRepository repository, @NotNull String beforeRef, @NotNull String afterRef) throws VcsException -->Line_11 $$ for (StringScanner s = new StringScanner(result.getOutputAsJoinedString()); s.hasMoreData(); ) [ CD ]
Line_5 $$ GitCommandResult result = git.diff(repository, parameters, range)-->Line_11 $$ for (StringScanner s = new StringScanner(result.getOutputAsJoinedString()); s.hasMoreData(); ) [ FD ]
Line_6 $$ if (!result.success()) -->Line_8 $$ return Collections.emptyList()[ CD ]
Line_4 $$ String range = beforeRef + ".." + afterRef-->Line_5 $$ GitCommandResult result = git.diff(repository, parameters, range)[ FD ]
Line_2 $$ public static Collection<String> getPathsDiffBetweenRefs(@NotNull Git git, @NotNull GitRepository repository, @NotNull String beforeRef, @NotNull String afterRef) throws VcsException -->Line_4 $$ String range = beforeRef + ".." + afterRef[ CD ]
Line_2 $$ public static Collection<String> getPathsDiffBetweenRefs(@NotNull Git git, @NotNull GitRepository repository, @NotNull String beforeRef, @NotNull String afterRef) throws VcsException -->Line_16 $$ final String path = repository.getRoot().getPath() + "/" + unescapePath(relative)[ FD ]
Line_2 $$ public static Collection<String> getPathsDiffBetweenRefs(@NotNull Git git, @NotNull GitRepository repository, @NotNull String beforeRef, @NotNull String afterRef) throws VcsException -->Line_10 $$ final Collection<String> remoteChanges = new HashSet<String>()[ CD ]
Line_11 $$ for (StringScanner s = new StringScanner(result.getOutputAsJoinedString()); s.hasMoreData(); ) -->Line_13 $$ if (StringUtil.isEmptyOrSpaces(relative)) [ CD ]
Line_11 $$ for (StringScanner s = new StringScanner(result.getOutputAsJoinedString()); s.hasMoreData(); ) -->Line_17 $$ remoteChanges.add(path)[ CD ]
Line_12 $$ final String relative = s.line()-->Line_13 $$ if (StringUtil.isEmptyOrSpaces(relative)) [ FD ]
Line_10 $$ final Collection<String> remoteChanges = new HashSet<String>()-->Line_17 $$ remoteChanges.add(path)[ FD ]
Line_16 $$ final String path = repository.getRoot().getPath() + "/" + unescapePath(relative)-->Line_17 $$ remoteChanges.add(path)[ FD ]
Line_2 $$ public static Collection<String> getPathsDiffBetweenRefs(@NotNull Git git, @NotNull GitRepository repository, @NotNull String beforeRef, @NotNull String afterRef) throws VcsException -->Line_6 $$ if (!result.success()) [ CD ]
Line_2 $$ public static Collection<String> getPathsDiffBetweenRefs(@NotNull Git git, @NotNull GitRepository repository, @NotNull String beforeRef, @NotNull String afterRef) throws VcsException -->Line_7 $$ LOG.info(String.format("Couldn't get diff in range [%s] for repository [%s]", range, repository.toLogString()))[ FD ]
