Line_3 $$ final VirtualFile baseDir = project.getBaseDir()-->Line_4 $$ assertNotNull(baseDir)[ FD ]
Line_10 $$ VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(moduleFile)-->Line_12 $$ Module module = ModuleManager.getInstance(project).newModule(virtualFile.getPath(), moduleType.getId())[ FD ]
Line_2 $$ protected static Module doCreateRealModuleIn(String moduleName, final Project project, final ModuleType moduleType) -->Line_5 $$ final File moduleFile = new File(FileUtil.toSystemDependentName(baseDir.getPath()), moduleName + ModuleFileType.DOT_DEFAULT_EXTENSION)[ CD ]
Line_2 $$ protected static Module doCreateRealModuleIn(String moduleName, final Project project, final ModuleType moduleType) -->Line_12 $$ Module module = ModuleManager.getInstance(project).newModule(virtualFile.getPath(), moduleType.getId())[ FD ]
Line_12 $$ Module module = ModuleManager.getInstance(project).newModule(virtualFile.getPath(), moduleType.getId())-->Line_13 $$ module.getModuleFile()[ FD ]
Line_2 $$ protected static Module doCreateRealModuleIn(String moduleName, final Project project, final ModuleType moduleType) -->Line_3 $$ final VirtualFile baseDir = project.getBaseDir()[ CD ]
Line_2 $$ protected static Module doCreateRealModuleIn(String moduleName, final Project project, final ModuleType moduleType) -->Line_4 $$ assertNotNull(baseDir)[ CD ]
Line_5 $$ final File moduleFile = new File(FileUtil.toSystemDependentName(baseDir.getPath()), moduleName + ModuleFileType.DOT_DEFAULT_EXTENSION)-->Line_7 $$ myFilesToDelete.add(moduleFile)[ FD ]
Line_8 $$ return new WriteAction<Module>() -->Line_11 $$ assertNotNull(virtualFile)[ CD ]
Line_10 $$ VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(moduleFile)-->Line_11 $$ assertNotNull(virtualFile)[ FD ]
Line_8 $$ return new WriteAction<Module>() -->Line_14 $$ result.setResult(module)[ FD ]
Line_5 $$ final File moduleFile = new File(FileUtil.toSystemDependentName(baseDir.getPath()), moduleName + ModuleFileType.DOT_DEFAULT_EXTENSION)-->Line_10 $$ VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(moduleFile)[ FD ]
Line_2 $$ protected static Module doCreateRealModuleIn(String moduleName, final Project project, final ModuleType moduleType) -->Line_8 $$ return new WriteAction<Module>() [ CD ]
Line_8 $$ return new WriteAction<Module>() -->Line_10 $$ VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(moduleFile)[ CD ]
Line_2 $$ protected static Module doCreateRealModuleIn(String moduleName, final Project project, final ModuleType moduleType) -->Line_6 $$ FileUtil.createIfDoesntExist(moduleFile)[ CD ]
Line_8 $$ return new WriteAction<Module>() -->Line_12 $$ Module module = ModuleManager.getInstance(project).newModule(virtualFile.getPath(), moduleType.getId())[ CD ]
Line_3 $$ final VirtualFile baseDir = project.getBaseDir()-->Line_5 $$ final File moduleFile = new File(FileUtil.toSystemDependentName(baseDir.getPath()), moduleName + ModuleFileType.DOT_DEFAULT_EXTENSION)[ FD ]
Line_12 $$ Module module = ModuleManager.getInstance(project).newModule(virtualFile.getPath(), moduleType.getId())-->Line_14 $$ result.setResult(module)[ FD ]
Line_2 $$ protected static Module doCreateRealModuleIn(String moduleName, final Project project, final ModuleType moduleType) -->Line_7 $$ myFilesToDelete.add(moduleFile)[ CD ]
Line_8 $$ return new WriteAction<Module>() -->Line_13 $$ module.getModuleFile()[ CD ]
Line_8 $$ return new WriteAction<Module>() -->Line_14 $$ result.setResult(module)[ CD ]
Line_2 $$ protected static Module doCreateRealModuleIn(String moduleName, final Project project, final ModuleType moduleType) -->Line_3 $$ final VirtualFile baseDir = project.getBaseDir()[ FD ]
Line_5 $$ final File moduleFile = new File(FileUtil.toSystemDependentName(baseDir.getPath()), moduleName + ModuleFileType.DOT_DEFAULT_EXTENSION)-->Line_6 $$ FileUtil.createIfDoesntExist(moduleFile)[ FD ]
