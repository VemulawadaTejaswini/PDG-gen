Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_20 $$ if (invalidateBlocks.contains(dn, block)) [ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_39 $$ return storedBlock[ CD ]
Line_11 $$ BlockInfo storedBlock = blocksMap.getStoredBlock(block)-->Line_26 $$ queueReportedBlock(storageInfo, storedBlock, reportedState, QUEUE_REASON_CORRUPT_STATE)[ FD ]
Line_32 $$ if (isBlockUnderConstruction(storedBlock, ucState, reportedState)) -->Line_34 $$ return storedBlock[ CD ]
Line_12 $$ if (storedBlock == null) -->Line_13 $$ toInvalidate.add(new Block(block))[ CD ]
Line_17 $$ if (LOG.isDebugEnabled()) -->Line_18 $$ LOG.debug("In memory blockUCState = " + ucState)[ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_28 $$ toCorrupt.add(c)[ FD ]
Line_24 $$ if (c != null) -->Line_25 $$ if (shouldPostponeBlocksFromFuture) [ CD ]
Line_12 $$ if (storedBlock == null) -->Line_14 $$ return null[ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_7 $$ if (shouldPostponeBlocksFromFuture && namesystem.isGenStampInFuture(block)) [ FD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_5 $$ LOG.debug("Reported block " + block + " on " + dn + " size " + block.getNumBytes() + " replicaState = " + reportedState)[ FD ]
Line_4 $$ if (LOG.isDebugEnabled()) -->Line_5 $$ LOG.debug("Reported block " + block + " on " + dn + " size " + block.getNumBytes() + " replicaState = " + reportedState)[ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_26 $$ queueReportedBlock(storageInfo, storedBlock, reportedState, QUEUE_REASON_CORRUPT_STATE)[ FD ]
Line_11 $$ BlockInfo storedBlock = blocksMap.getStoredBlock(block)-->Line_23 $$ BlockToMarkCorrupt c = checkReplicaCorrupt(block, reportedState, storedBlock, ucState, dn)[ FD ]
Line_11 $$ BlockInfo storedBlock = blocksMap.getStoredBlock(block)-->Line_37 $$ toAdd.add(storedBlock)[ FD ]
Line_3 $$ DatanodeDescriptor dn = storageInfo.getDatanodeDescriptor()-->Line_36 $$ if (reportedState == ReplicaState.FINALIZED && (!storedBlock.findDatanode(dn) || corruptReplicas.isReplicaCorrupt(storedBlock, dn))) [ FD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_3 $$ DatanodeDescriptor dn = storageInfo.getDatanodeDescriptor()[ FD ]
Line_24 $$ if (c != null) -->Line_30 $$ return storedBlock[ CD ]
Line_7 $$ if (shouldPostponeBlocksFromFuture && namesystem.isGenStampInFuture(block)) -->Line_9 $$ return null[ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_12 $$ if (storedBlock == null) [ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_13 $$ toInvalidate.add(new Block(block))[ FD ]
Line_20 $$ if (invalidateBlocks.contains(dn, block)) -->Line_21 $$ return storedBlock[ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_8 $$ queueReportedBlock(storageInfo, block, reportedState, QUEUE_REASON_FUTURE_GENSTAMP)[ FD ]
Line_16 $$ BlockUCState ucState = storedBlock.getBlockUCState()-->Line_23 $$ BlockToMarkCorrupt c = checkReplicaCorrupt(block, reportedState, storedBlock, ucState, dn)[ FD ]
Line_25 $$ if (shouldPostponeBlocksFromFuture) -->Line_26 $$ queueReportedBlock(storageInfo, storedBlock, reportedState, QUEUE_REASON_CORRUPT_STATE)[ CD ]
Line_11 $$ BlockInfo storedBlock = blocksMap.getStoredBlock(block)-->Line_32 $$ if (isBlockUnderConstruction(storedBlock, ucState, reportedState)) [ FD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_24 $$ if (c != null) [ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_11 $$ BlockInfo storedBlock = blocksMap.getStoredBlock(block)[ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_20 $$ if (invalidateBlocks.contains(dn, block)) [ FD ]
Line_11 $$ BlockInfo storedBlock = blocksMap.getStoredBlock(block)-->Line_36 $$ if (reportedState == ReplicaState.FINALIZED && (!storedBlock.findDatanode(dn) || corruptReplicas.isReplicaCorrupt(storedBlock, dn))) [ FD ]
Line_25 $$ if (shouldPostponeBlocksFromFuture) -->Line_28 $$ toCorrupt.add(c)[ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_7 $$ if (shouldPostponeBlocksFromFuture && namesystem.isGenStampInFuture(block)) [ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_23 $$ BlockToMarkCorrupt c = checkReplicaCorrupt(block, reportedState, storedBlock, ucState, dn)[ FD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_33 $$ toUC.add(new StatefulBlockInfo((BlockInfoUnderConstruction) storedBlock, new Block(block), reportedState))[ FD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_11 $$ BlockInfo storedBlock = blocksMap.getStoredBlock(block)[ FD ]
Line_3 $$ DatanodeDescriptor dn = storageInfo.getDatanodeDescriptor()-->Line_20 $$ if (invalidateBlocks.contains(dn, block)) [ FD ]
Line_32 $$ if (isBlockUnderConstruction(storedBlock, ucState, reportedState)) -->Line_33 $$ toUC.add(new StatefulBlockInfo((BlockInfoUnderConstruction) storedBlock, new Block(block), reportedState))[ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_36 $$ if (reportedState == ReplicaState.FINALIZED && (!storedBlock.findDatanode(dn) || corruptReplicas.isReplicaCorrupt(storedBlock, dn))) [ CD ]
Line_16 $$ BlockUCState ucState = storedBlock.getBlockUCState()-->Line_32 $$ if (isBlockUnderConstruction(storedBlock, ucState, reportedState)) [ FD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_3 $$ DatanodeDescriptor dn = storageInfo.getDatanodeDescriptor()[ CD ]
Line_36 $$ if (reportedState == ReplicaState.FINALIZED && (!storedBlock.findDatanode(dn) || corruptReplicas.isReplicaCorrupt(storedBlock, dn))) -->Line_37 $$ toAdd.add(storedBlock)[ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_17 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_23 $$ BlockToMarkCorrupt c = checkReplicaCorrupt(block, reportedState, storedBlock, ucState, dn)[ CD ]
Line_23 $$ BlockToMarkCorrupt c = checkReplicaCorrupt(block, reportedState, storedBlock, ucState, dn)-->Line_24 $$ if (c != null) [ FD ]
Line_7 $$ if (shouldPostponeBlocksFromFuture && namesystem.isGenStampInFuture(block)) -->Line_8 $$ queueReportedBlock(storageInfo, block, reportedState, QUEUE_REASON_FUTURE_GENSTAMP)[ CD ]
Line_11 $$ BlockInfo storedBlock = blocksMap.getStoredBlock(block)-->Line_16 $$ BlockUCState ucState = storedBlock.getBlockUCState()[ FD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_16 $$ BlockUCState ucState = storedBlock.getBlockUCState()[ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_4 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_11 $$ BlockInfo storedBlock = blocksMap.getStoredBlock(block)-->Line_12 $$ if (storedBlock == null) [ FD ]
Line_3 $$ DatanodeDescriptor dn = storageInfo.getDatanodeDescriptor()-->Line_23 $$ BlockToMarkCorrupt c = checkReplicaCorrupt(block, reportedState, storedBlock, ucState, dn)[ FD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_32 $$ if (isBlockUnderConstruction(storedBlock, ucState, reportedState)) [ CD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_37 $$ toAdd.add(storedBlock)[ FD ]
Line_23 $$ BlockToMarkCorrupt c = checkReplicaCorrupt(block, reportedState, storedBlock, ucState, dn)-->Line_28 $$ toCorrupt.add(c)[ FD ]
Line_2 $$ private BlockInfo processReportedBlock(final DatanodeStorageInfo storageInfo, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, final Collection<BlockToMarkCorrupt> toCorrupt, final Collection<StatefulBlockInfo> toUC) -->Line_32 $$ if (isBlockUnderConstruction(storedBlock, ucState, reportedState)) [ FD ]
