Line_2 $$ private RepositoryChainModuleResolution findLatestModule(LinkedList<RepositoryResolveState> queue, Collection<Throwable> failures, Collection<RepositoryResolveState> missing) -->Line_19 $$ missing.add(request)[ FD ]
Line_2 $$ private RepositoryChainModuleResolution findLatestModule(LinkedList<RepositoryResolveState> queue, Collection<Throwable> failures, Collection<RepositoryResolveState> missing) -->Line_4 $$ while (!queue.isEmpty()) [ CD ]
Line_3 $$ RepositoryChainModuleResolution best = null-->Line_24 $$ best = chooseBest(best, moduleResolution)[ FD ]
Line_23 $$ RepositoryChainModuleResolution moduleResolution = new RepositoryChainModuleResolution(request.repository, request.resolveResult.getMetaData())-->Line_24 $$ best = chooseBest(best, moduleResolution)[ FD ]
Line_2 $$ private RepositoryChainModuleResolution findLatestModule(LinkedList<RepositoryResolveState> queue, Collection<Throwable> failures, Collection<RepositoryResolveState> missing) -->Line_4 $$ while (!queue.isEmpty()) [ FD ]
Line_2 $$ private RepositoryChainModuleResolution findLatestModule(LinkedList<RepositoryResolveState> queue, Collection<Throwable> failures, Collection<RepositoryResolveState> missing) -->Line_9 $$ failures.add(t)[ FD ]
Line_5 $$ RepositoryResolveState request = queue.removeFirst()-->Line_7 $$ request.resolve()[ FD ]
Line_5 $$ RepositoryResolveState request = queue.removeFirst()-->Line_18 $$ if (request.canMakeFurtherAttempts()) [ FD ]
Line_2 $$ private RepositoryChainModuleResolution findLatestModule(LinkedList<RepositoryResolveState> queue, Collection<Throwable> failures, Collection<RepositoryResolveState> missing) -->Line_14 $$ failures.add(request.resolveResult.getFailure())[ FD ]
Line_2 $$ private RepositoryChainModuleResolution findLatestModule(LinkedList<RepositoryResolveState> queue, Collection<Throwable> failures, Collection<RepositoryResolveState> missing) -->Line_3 $$ RepositoryChainModuleResolution best = null[ CD ]
Line_2 $$ private RepositoryChainModuleResolution findLatestModule(LinkedList<RepositoryResolveState> queue, Collection<Throwable> failures, Collection<RepositoryResolveState> missing) -->Line_5 $$ RepositoryResolveState request = queue.removeFirst()[ FD ]
Line_18 $$ if (request.canMakeFurtherAttempts()) -->Line_19 $$ missing.add(request)[ CD ]
Line_5 $$ RepositoryResolveState request = queue.removeFirst()-->Line_19 $$ missing.add(request)[ FD ]
Line_2 $$ private RepositoryChainModuleResolution findLatestModule(LinkedList<RepositoryResolveState> queue, Collection<Throwable> failures, Collection<RepositoryResolveState> missing) -->Line_30 $$ return best[ CD ]
Line_4 $$ while (!queue.isEmpty()) -->Line_5 $$ RepositoryResolveState request = queue.removeFirst()[ CD ]
