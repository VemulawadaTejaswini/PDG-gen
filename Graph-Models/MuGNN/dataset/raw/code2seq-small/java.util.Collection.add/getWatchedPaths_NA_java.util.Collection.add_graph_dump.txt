Line_11 $$ if (FileUtil.namesEqual(path, root)) -->Line_12 $$ changedPaths.add(path)[ CD ]
Line_16 $$ String parentPath = new File(path).getParent()-->Line_30 $$ if (parentPath != null && FileUtil.namesEqual(path, parentPath)) [ FD ]
Line_3 $$ if (myFlatWatchRoots.isEmpty() && myRecursiveWatchRoots.isEmpty())-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public Collection<String> getWatchedPaths(@NotNull String reportedPath, boolean isExact, boolean fastPath) -->Line_8 $$ if (fastPath && !changedPaths.isEmpty())[ FD ]
Line_28 $$ if (!isExact) -->Line_29 $$ String parentPath = new File(root).getParent()[ CD ]
Line_6 $$ Collection<String> changedPaths = ContainerUtil.newSmartList()-->Line_37 $$ if (!fastPath && changedPaths.isEmpty() && LOG.isDebugEnabled()) [ FD ]
Line_10 $$ for (String root : myFlatWatchRoots) -->Line_24 $$ if (FileUtil.startsWith(path, root)) [ FD ]
Line_6 $$ Collection<String> changedPaths = ContainerUtil.newSmartList()-->Line_12 $$ changedPaths.add(path)[ FD ]
Line_6 $$ Collection<String> changedPaths = ContainerUtil.newSmartList()-->Line_25 $$ changedPaths.add(path)[ FD ]
Line_10 $$ for (String root : myFlatWatchRoots) -->Line_17 $$ if (parentPath != null && FileUtil.namesEqual(parentPath, root)) [ FD ]
Line_17 $$ if (parentPath != null && FileUtil.namesEqual(parentPath, root)) -->Line_18 $$ changedPaths.add(path)[ CD ]
Line_2 $$ public Collection<String> getWatchedPaths(@NotNull String reportedPath, boolean isExact, boolean fastPath) -->Line_6 $$ Collection<String> changedPaths = ContainerUtil.newSmartList()[ CD ]
Line_2 $$ public Collection<String> getWatchedPaths(@NotNull String reportedPath, boolean isExact, boolean fastPath) -->Line_5 $$ Collection<String> affectedPaths = applyMapping(reportedPath)[ CD ]
Line_24 $$ if (FileUtil.startsWith(path, root)) -->Line_25 $$ changedPaths.add(path)[ CD ]
Line_7 $$ for (String path : affectedPaths) -->Line_18 $$ changedPaths.add(path)[ FD ]
Line_2 $$ public Collection<String> getWatchedPaths(@NotNull String reportedPath, boolean isExact, boolean fastPath) -->Line_37 $$ if (!fastPath && changedPaths.isEmpty() && LOG.isDebugEnabled()) [ FD ]
Line_37 $$ if (!fastPath && changedPaths.isEmpty() && LOG.isDebugEnabled()) -->Line_38 $$ LOG.debug("Not watchable, filtered: " + reportedPath)[ CD ]
Line_7 $$ for (String path : affectedPaths) -->Line_25 $$ changedPaths.add(path)[ FD ]
Line_15 $$ if (isExact) -->Line_17 $$ if (parentPath != null && FileUtil.namesEqual(parentPath, root)) [ CD ]
Line_15 $$ if (isExact) -->Line_16 $$ String parentPath = new File(path).getParent()[ CD ]
Line_6 $$ Collection<String> changedPaths = ContainerUtil.newSmartList()-->Line_8 $$ if (fastPath && !changedPaths.isEmpty())[ FD ]
Line_2 $$ public Collection<String> getWatchedPaths(@NotNull String reportedPath, boolean isExact, boolean fastPath) -->Line_3 $$ if (myFlatWatchRoots.isEmpty() && myRecursiveWatchRoots.isEmpty())[ CD ]
Line_6 $$ Collection<String> changedPaths = ContainerUtil.newSmartList()-->Line_31 $$ changedPaths.add(root)[ FD ]
Line_7 $$ for (String path : affectedPaths) -->Line_11 $$ if (FileUtil.namesEqual(path, root)) [ FD ]
Line_7 $$ for (String path : affectedPaths) -->Line_30 $$ if (parentPath != null && FileUtil.namesEqual(path, parentPath)) [ FD ]
Line_10 $$ for (String root : myFlatWatchRoots) -->Line_11 $$ if (FileUtil.namesEqual(path, root)) [ FD ]
Line_28 $$ if (!isExact) -->Line_30 $$ if (parentPath != null && FileUtil.namesEqual(path, parentPath)) [ CD ]
Line_2 $$ public Collection<String> getWatchedPaths(@NotNull String reportedPath, boolean isExact, boolean fastPath) -->Line_37 $$ if (!fastPath && changedPaths.isEmpty() && LOG.isDebugEnabled()) [ CD ]
Line_6 $$ Collection<String> changedPaths = ContainerUtil.newSmartList()-->Line_18 $$ changedPaths.add(path)[ FD ]
Line_7 $$ for (String path : affectedPaths) -->Line_24 $$ if (FileUtil.startsWith(path, root)) [ FD ]
Line_30 $$ if (parentPath != null && FileUtil.namesEqual(path, parentPath)) -->Line_31 $$ changedPaths.add(root)[ CD ]
Line_2 $$ public Collection<String> getWatchedPaths(@NotNull String reportedPath, boolean isExact, boolean fastPath) -->Line_28 $$ if (!isExact) [ FD ]
Line_7 $$ for (String path : affectedPaths) -->Line_12 $$ changedPaths.add(path)[ FD ]
Line_16 $$ String parentPath = new File(path).getParent()-->Line_17 $$ if (parentPath != null && FileUtil.namesEqual(parentPath, root)) [ FD ]
Line_10 $$ for (String root : myFlatWatchRoots) -->Line_31 $$ changedPaths.add(root)[ FD ]
Line_2 $$ public Collection<String> getWatchedPaths(@NotNull String reportedPath, boolean isExact, boolean fastPath) -->Line_40 $$ return changedPaths[ CD ]
Line_2 $$ public Collection<String> getWatchedPaths(@NotNull String reportedPath, boolean isExact, boolean fastPath) -->Line_5 $$ Collection<String> affectedPaths = applyMapping(reportedPath)[ FD ]
