Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_6 $$ if (Modifier.isStatic(method.getModifiers())) [ CD ]
Line_13 $$ if (parameterTypes.length == 1) -->Line_17 $$ if (taskClassInfo.incremental) [ CD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_9 $$ final Class<?>[] parameterTypes = method.getParameterTypes()[ FD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_22 $$ if (processedMethods.contains(method.getName())) [ FD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_22 $$ if (processedMethods.contains(method.getName())) [ CD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_3 $$ if (method.getAnnotation(TaskAction.class) == null) [ FD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_6 $$ if (Modifier.isStatic(method.getModifiers())) [ FD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_10 $$ if (parameterTypes.length > 1) [ CD ]
Line_3 $$ if (method.getAnnotation(TaskAction.class) == null) -->Line_4 $$ return[ CD ]
Line_22 $$ if (processedMethods.contains(method.getName())) -->Line_23 $$ return[ CD ]
Line_13 $$ if (parameterTypes.length == 1) -->Line_14 $$ if (!parameterTypes[0].equals(IncrementalTaskInputs.class)) [ CD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_25 $$ taskClassInfo.taskActions.add(createActionFactory(method, parameterTypes))[ CD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_7 $$ throw new GradleException(String.format("Cannot use @TaskAction annotation on static method %s.%s().", method.getDeclaringClass().getSimpleName(), method.getName()))[ FD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_9 $$ final Class<?>[] parameterTypes = method.getParameterTypes()[ CD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_3 $$ if (method.getAnnotation(TaskAction.class) == null) [ CD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_26 $$ processedMethods.add(method.getName())[ FD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_15 $$ throw new GradleException(String.format("Cannot use @TaskAction annotation on method %s.%s() because %s is not a valid parameter to an action method.", method.getDeclaringClass().getSimpleName(), method.getName(), parameterTypes[0]))[ FD ]
Line_9 $$ final Class<?>[] parameterTypes = method.getParameterTypes()-->Line_25 $$ taskClassInfo.taskActions.add(createActionFactory(method, parameterTypes))[ FD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_17 $$ if (taskClassInfo.incremental) [ FD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_13 $$ if (parameterTypes.length == 1) [ CD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_11 $$ throw new GradleException(String.format("Cannot use @TaskAction annotation on method %s.%s() as this method takes multiple parameters.", method.getDeclaringClass().getSimpleName(), method.getName()))[ FD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_26 $$ processedMethods.add(method.getName())[ CD ]
Line_13 $$ if (parameterTypes.length == 1) -->Line_20 $$ taskClassInfo.incremental = true[ CD ]
Line_2 $$ private void attachTaskAction(final Method method, TaskClassInfo taskClassInfo, Collection<String> processedMethods) -->Line_25 $$ taskClassInfo.taskActions.add(createActionFactory(method, parameterTypes))[ FD ]
