Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) -->Line_18 $$ if (myUnmergedPaths.contains(relative)) [ CD ]
Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) -->Line_15 $$ char status = s.peek()[ CD ]
Line_17 $$ final String relative = s.line()-->Line_18 $$ if (myUnmergedPaths.contains(relative)) [ FD ]
Line_7 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, myRoot, GitCommand.DIFF)-->Line_9 $$ h.addParameters("--name-status", "--diff-filter=ADMRUX", revisions)[ FD ]
Line_21 $$ String path = root + "/" + GitUtil.unescapePath(relative)-->Line_24 $$ updated.add(path)[ FD ]
Line_21 $$ String path = root + "/" + GitUtil.unescapePath(relative)-->Line_30 $$ removed.add(path)[ FD ]
Line_2 $$ public void getChangedFilesExceptUnmerged(Collection<String> updated, Collection<String> created, Collection<String> removed, String revisions) throws VcsException -->Line_30 $$ removed.add(path)[ FD ]
Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) -->Line_15 $$ char status = s.peek()[ FD ]
Line_2 $$ public void getChangedFilesExceptUnmerged(Collection<String> updated, Collection<String> created, Collection<String> removed, String revisions) throws VcsException -->Line_24 $$ updated.add(path)[ FD ]
Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) -->Line_12 $$ s.nextLine()[ FD ]
Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) -->Line_16 $$ s.boundedToken('\t')[ FD ]
Line_21 $$ String path = root + "/" + GitUtil.unescapePath(relative)-->Line_27 $$ created.add(path)[ FD ]
Line_2 $$ public void getChangedFilesExceptUnmerged(Collection<String> updated, Collection<String> created, Collection<String> removed, String revisions) throws VcsException -->Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) [ CD ]
Line_11 $$ if (s.isEol()) -->Line_12 $$ s.nextLine()[ CD ]
Line_7 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, myRoot, GitCommand.DIFF)-->Line_8 $$ h.setSilent(true)[ FD ]
Line_7 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, myRoot, GitCommand.DIFF)-->Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) [ FD ]
Line_2 $$ public void getChangedFilesExceptUnmerged(Collection<String> updated, Collection<String> created, Collection<String> removed, String revisions) throws VcsException -->Line_7 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, myRoot, GitCommand.DIFF)[ CD ]
Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) -->Line_17 $$ final String relative = s.line()[ FD ]
Line_3 $$ if (revisions == null) -->Line_4 $$ return[ CD ]
Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) -->Line_17 $$ final String relative = s.line()[ CD ]
Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) -->Line_11 $$ if (s.isEol()) [ CD ]
Line_2 $$ public void getChangedFilesExceptUnmerged(Collection<String> updated, Collection<String> created, Collection<String> removed, String revisions) throws VcsException -->Line_3 $$ if (revisions == null) [ CD ]
Line_2 $$ public void getChangedFilesExceptUnmerged(Collection<String> updated, Collection<String> created, Collection<String> removed, String revisions) throws VcsException -->Line_8 $$ h.setSilent(true)[ CD ]
Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) -->Line_21 $$ String path = root + "/" + GitUtil.unescapePath(relative)[ CD ]
Line_2 $$ public void getChangedFilesExceptUnmerged(Collection<String> updated, Collection<String> created, Collection<String> removed, String revisions) throws VcsException -->Line_27 $$ created.add(path)[ FD ]
Line_2 $$ public void getChangedFilesExceptUnmerged(Collection<String> updated, Collection<String> created, Collection<String> removed, String revisions) throws VcsException -->Line_9 $$ h.addParameters("--name-status", "--diff-filter=ADMRUX", revisions)[ CD ]
Line_2 $$ public void getChangedFilesExceptUnmerged(Collection<String> updated, Collection<String> created, Collection<String> removed, String revisions) throws VcsException -->Line_6 $$ String root = myRoot.getPath()[ CD ]
Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) -->Line_16 $$ s.boundedToken('\t')[ CD ]
Line_2 $$ public void getChangedFilesExceptUnmerged(Collection<String> updated, Collection<String> created, Collection<String> removed, String revisions) throws VcsException -->Line_9 $$ h.addParameters("--name-status", "--diff-filter=ADMRUX", revisions)[ FD ]
Line_17 $$ final String relative = s.line()-->Line_21 $$ String path = root + "/" + GitUtil.unescapePath(relative)[ FD ]
Line_2 $$ public void getChangedFilesExceptUnmerged(Collection<String> updated, Collection<String> created, Collection<String> removed, String revisions) throws VcsException -->Line_3 $$ if (revisions == null) [ FD ]
Line_10 $$ for (StringScanner s = new StringScanner(h.run()); s.hasMoreData(); ) -->Line_11 $$ if (s.isEol()) [ FD ]
