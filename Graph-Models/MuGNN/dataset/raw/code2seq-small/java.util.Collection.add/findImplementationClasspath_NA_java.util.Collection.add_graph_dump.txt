Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_9 $$ suffixes.add(String.format("/%s/bin", projectDirName).replace('/', File.separatorChar))[ CD ]
Line_4 $$ Matcher matcher = Pattern.compile("gradle-(.+)").matcher(name)-->Line_5 $$ matcher.matches()[ FD ]
Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_4 $$ Matcher matcher = Pattern.compile("gradle-(.+)").matcher(name)[ FD ]
Line_6 $$ String projectDirName = matcher.group(1)-->Line_13 $$ suffixes.add(String.format("/%s/build/generated-resources/main", projectDirName).replace('/', File.separatorChar))[ FD ]
Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_11 $$ suffixes.add(String.format("/%s/build/classes/main", projectDirName).replace('/', File.separatorChar))[ CD ]
Line_6 $$ String projectDirName = matcher.group(1)-->Line_7 $$ String projectName = toCamelCase(projectDirName)[ FD ]
Line_6 $$ String projectDirName = matcher.group(1)-->Line_11 $$ suffixes.add(String.format("/%s/build/classes/main", projectDirName).replace('/', File.separatorChar))[ FD ]
Line_3 $$ List<String> suffixes = new ArrayList<String>()-->Line_13 $$ suffixes.add(String.format("/%s/build/generated-resources/main", projectDirName).replace('/', File.separatorChar))[ FD ]
Line_3 $$ List<String> suffixes = new ArrayList<String>()-->Line_12 $$ suffixes.add(String.format("/%s/build/resources/main", projectDirName).replace('/', File.separatorChar))[ FD ]
Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_18 $$ implementationClasspath.add(file)[ FD ]
Line_3 $$ List<String> suffixes = new ArrayList<String>()-->Line_9 $$ suffixes.add(String.format("/%s/bin", projectDirName).replace('/', File.separatorChar))[ FD ]
Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_7 $$ String projectName = toCamelCase(projectDirName)[ CD ]
Line_4 $$ Matcher matcher = Pattern.compile("gradle-(.+)").matcher(name)-->Line_6 $$ String projectDirName = matcher.group(1)[ FD ]
Line_3 $$ List<String> suffixes = new ArrayList<String>()-->Line_8 $$ suffixes.add(String.format("/out/production/%s", projectName).replace('/', File.separatorChar))[ FD ]
Line_14 $$ for (File file : classpath) -->Line_15 $$ if (file.isDirectory()) [ FD ]
Line_6 $$ String projectDirName = matcher.group(1)-->Line_10 $$ suffixes.add(String.format("/%s/src/main/resources", projectDirName).replace('/', File.separatorChar))[ FD ]
Line_14 $$ for (File file : classpath) -->Line_17 $$ if (file.getAbsolutePath().endsWith(suffix)) [ FD ]
Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_6 $$ String projectDirName = matcher.group(1)[ CD ]
Line_17 $$ if (file.getAbsolutePath().endsWith(suffix)) -->Line_18 $$ implementationClasspath.add(file)[ CD ]
Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_5 $$ matcher.matches()[ CD ]
Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_12 $$ suffixes.add(String.format("/%s/build/resources/main", projectDirName).replace('/', File.separatorChar))[ CD ]
Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_13 $$ suffixes.add(String.format("/%s/build/generated-resources/main", projectDirName).replace('/', File.separatorChar))[ CD ]
Line_7 $$ String projectName = toCamelCase(projectDirName)-->Line_8 $$ suffixes.add(String.format("/out/production/%s", projectName).replace('/', File.separatorChar))[ FD ]
Line_14 $$ for (File file : classpath) -->Line_18 $$ implementationClasspath.add(file)[ FD ]
Line_6 $$ String projectDirName = matcher.group(1)-->Line_12 $$ suffixes.add(String.format("/%s/build/resources/main", projectDirName).replace('/', File.separatorChar))[ FD ]
Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_4 $$ Matcher matcher = Pattern.compile("gradle-(.+)").matcher(name)[ CD ]
Line_16 $$ for (String suffix : suffixes) -->Line_17 $$ if (file.getAbsolutePath().endsWith(suffix)) [ FD ]
Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_3 $$ List<String> suffixes = new ArrayList<String>()[ CD ]
Line_3 $$ List<String> suffixes = new ArrayList<String>()-->Line_11 $$ suffixes.add(String.format("/%s/build/classes/main", projectDirName).replace('/', File.separatorChar))[ FD ]
Line_3 $$ List<String> suffixes = new ArrayList<String>()-->Line_10 $$ suffixes.add(String.format("/%s/src/main/resources", projectDirName).replace('/', File.separatorChar))[ FD ]
Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_10 $$ suffixes.add(String.format("/%s/src/main/resources", projectDirName).replace('/', File.separatorChar))[ CD ]
Line_6 $$ String projectDirName = matcher.group(1)-->Line_9 $$ suffixes.add(String.format("/%s/bin", projectDirName).replace('/', File.separatorChar))[ FD ]
Line_2 $$ private void findImplementationClasspath(String name, Collection<File> implementationClasspath) -->Line_8 $$ suffixes.add(String.format("/out/production/%s", projectName).replace('/', File.separatorChar))[ CD ]
