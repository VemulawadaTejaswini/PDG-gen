Line_15 $$ if (userBufLen <= 0) -->Line_16 $$ return[ CD ]
Line_56 $$ if (hasComment) -->Line_57 $$ boolean doneWithComment = checkAndSkipBytesUntilNull()[ CD ]
Line_20 $$ if (numExtraFieldBytesRemaining < 0) -->Line_21 $$ int n = Math.min(userBufLen, 2 - localBufOff)[ CD ]
Line_55 $$ if (state == GzipStateLabel.HEADER_COMMENT) -->Line_56 $$ if (hasComment) [ CD ]
Line_3 $$ if (userBufLen <= 0) -->Line_4 $$ return[ CD ]
Line_6 $$ if (state == GzipStateLabel.HEADER_BASIC) -->Line_7 $$ int n = Math.min(userBufLen, 10 - localBufOff)[ CD ]
Line_19 $$ if (hasExtraField) -->Line_33 $$ if (numExtraFieldBytesRemaining == 0) [ CD ]
Line_6 $$ if (state == GzipStateLabel.HEADER_BASIC) -->Line_8 $$ checkAndCopyBytesToLocal(n)[ CD ]
Line_68 $$ if (hasHeaderCRC) -->Line_72 $$ if (localBufOff >= 2) [ CD ]
Line_46 $$ if (!doneWithFilename) -->Line_47 $$ return[ CD ]
Line_2 $$ private void executeHeaderState() throws IOException -->Line_64 $$ if (userBufLen <= 0) [ CD ]
Line_67 $$ if (state == GzipStateLabel.HEADER_CRC) -->Line_68 $$ if (hasHeaderCRC) [ CD ]
Line_19 $$ if (hasExtraField) -->Line_28 $$ if (numExtraFieldBytesRemaining > 0 && userBufLen > 0) [ CD ]
Line_23 $$ if (localBufOff >= 2) -->Line_24 $$ numExtraFieldBytesRemaining = readUShortLE(localBuf, 0)[ CD ]
Line_58 $$ if (!doneWithComment) -->Line_59 $$ return[ CD ]
Line_28 $$ if (numExtraFieldBytesRemaining > 0 && userBufLen > 0) -->Line_30 $$ checkAndSkipBytes(n)[ CD ]
Line_7 $$ int n = Math.min(userBufLen, 10 - localBufOff)-->Line_71 $$ copyBytesToLocal(n)[ FD ]
Line_19 $$ if (hasExtraField) -->Line_20 $$ if (numExtraFieldBytesRemaining < 0) [ CD ]
Line_2 $$ private void executeHeaderState() throws IOException -->Line_67 $$ if (state == GzipStateLabel.HEADER_CRC) [ CD ]
Line_2 $$ private void executeHeaderState() throws IOException -->Line_55 $$ if (state == GzipStateLabel.HEADER_COMMENT) [ CD ]
Line_72 $$ if (localBufOff >= 2) -->Line_78 $$ crc.reset()[ CD ]
Line_2 $$ private void executeHeaderState() throws IOException -->Line_43 $$ if (state == GzipStateLabel.HEADER_FILENAME) [ CD ]
Line_68 $$ if (hasHeaderCRC) -->Line_71 $$ copyBytesToLocal(n)[ CD ]
Line_7 $$ int n = Math.min(userBufLen, 10 - localBufOff)-->Line_22 $$ checkAndCopyBytesToLocal(n)[ FD ]
Line_6 $$ if (state == GzipStateLabel.HEADER_BASIC) -->Line_9 $$ if (localBufOff >= 10) [ CD ]
Line_18 $$ if (state == GzipStateLabel.HEADER_EXTRA_FIELD) -->Line_19 $$ if (hasExtraField) [ CD ]
Line_64 $$ if (userBufLen <= 0) -->Line_65 $$ return[ CD ]
Line_2 $$ private void executeHeaderState() throws IOException -->Line_6 $$ if (state == GzipStateLabel.HEADER_BASIC) [ CD ]
Line_45 $$ boolean doneWithFilename = checkAndSkipBytesUntilNull()-->Line_46 $$ if (!doneWithFilename) [ FD ]
Line_7 $$ int n = Math.min(userBufLen, 10 - localBufOff)-->Line_8 $$ checkAndCopyBytesToLocal(n)[ FD ]
Line_7 $$ int n = Math.min(userBufLen, 10 - localBufOff)-->Line_30 $$ checkAndSkipBytes(n)[ FD ]
Line_68 $$ if (hasHeaderCRC) -->Line_82 $$ crc.reset()[ CD ]
Line_9 $$ if (localBufOff >= 10) -->Line_10 $$ processBasicHeader()[ CD ]
Line_2 $$ private void executeHeaderState() throws IOException -->Line_15 $$ if (userBufLen <= 0) [ CD ]
Line_52 $$ if (userBufLen <= 0) -->Line_53 $$ return[ CD ]
Line_2 $$ private void executeHeaderState() throws IOException -->Line_40 $$ if (userBufLen <= 0) [ CD ]
Line_57 $$ boolean doneWithComment = checkAndSkipBytesUntilNull()-->Line_58 $$ if (!doneWithComment) [ FD ]
Line_72 $$ if (localBufOff >= 2) -->Line_73 $$ long headerCRC = readUShortLE(localBuf, 0)[ CD ]
Line_56 $$ if (hasComment) -->Line_58 $$ if (!doneWithComment) [ CD ]
Line_44 $$ if (hasFilename) -->Line_45 $$ boolean doneWithFilename = checkAndSkipBytesUntilNull()[ CD ]
Line_44 $$ if (hasFilename) -->Line_46 $$ if (!doneWithFilename) [ CD ]
Line_72 $$ if (localBufOff >= 2) -->Line_74 $$ if (headerCRC != (crc.getValue() & 0xffff)) [ CD ]
Line_2 $$ private void executeHeaderState() throws IOException -->Line_3 $$ if (userBufLen <= 0) [ CD ]
Line_68 $$ if (hasHeaderCRC) -->Line_70 $$ int n = Math.min(userBufLen, 2 - localBufOff)[ CD ]
Line_20 $$ if (numExtraFieldBytesRemaining < 0) -->Line_22 $$ checkAndCopyBytesToLocal(n)[ CD ]
Line_40 $$ if (userBufLen <= 0) -->Line_41 $$ return[ CD ]
Line_2 $$ private void executeHeaderState() throws IOException -->Line_52 $$ if (userBufLen <= 0) [ CD ]
Line_28 $$ if (numExtraFieldBytesRemaining > 0 && userBufLen > 0) -->Line_29 $$ int n = Math.min(userBufLen, numExtraFieldBytesRemaining)[ CD ]
Line_20 $$ if (numExtraFieldBytesRemaining < 0) -->Line_23 $$ if (localBufOff >= 2) [ CD ]
Line_2 $$ private void executeHeaderState() throws IOException -->Line_18 $$ if (state == GzipStateLabel.HEADER_EXTRA_FIELD) [ CD ]
Line_43 $$ if (state == GzipStateLabel.HEADER_FILENAME) -->Line_44 $$ if (hasFilename) [ CD ]
Line_73 $$ long headerCRC = readUShortLE(localBuf, 0)-->Line_74 $$ if (headerCRC != (crc.getValue() & 0xffff)) [ FD ]
