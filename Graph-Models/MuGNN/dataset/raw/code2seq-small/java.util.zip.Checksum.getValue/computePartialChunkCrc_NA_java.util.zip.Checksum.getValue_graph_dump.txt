Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_20 $$ if (partialCrc.getValue() != checksum2long(crcbuf)) [ CD ]
Line_7 $$ byte[] buf = new byte[sizePartialChunk]-->Line_12 $$ IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk)[ FD ]
Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_17 $$ partialCrc = DataChecksum.newDataChecksum(diskChecksum.getChecksumType(), diskChecksum.getBytesPerChecksum())[ CD ]
Line_9 $$ ReplicaInputStreams instr = null-->Line_11 $$ instr = datanode.data.getTmpInputStreams(block, blkoff, ckoff)[ FD ]
Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_9 $$ ReplicaInputStreams instr = null[ CD ]
Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_19 $$ LOG.info("Read in partial CRC chunk from disk for " + block)[ CD ]
Line_8 $$ byte[] crcbuf = new byte[checksumSize]-->Line_20 $$ if (partialCrc.getValue() != checksum2long(crcbuf)) [ FD ]
Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_8 $$ byte[] crcbuf = new byte[checksumSize][ CD ]
Line_3 $$ int sizePartialChunk = (int) (blkoff % bytesPerChecksum)-->Line_18 $$ partialCrc.update(buf, 0, sizePartialChunk)[ FD ]
Line_20 $$ if (partialCrc.getValue() != checksum2long(crcbuf)) -->Line_21 $$ String msg = "Partial CRC " + partialCrc.getValue() + " does not match value computed the " + " last time file was closed " + checksum2long(crcbuf)[ CD ]
Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_3 $$ int sizePartialChunk = (int) (blkoff % bytesPerChecksum)[ CD ]
Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_5 $$ blkoff = blkoff - sizePartialChunk[ FD ]
Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_4 $$ int checksumSize = diskChecksum.getChecksumSize()[ CD ]
Line_7 $$ byte[] buf = new byte[sizePartialChunk]-->Line_18 $$ partialCrc.update(buf, 0, sizePartialChunk)[ FD ]
Line_9 $$ ReplicaInputStreams instr = null-->Line_15 $$ IOUtils.closeStream(instr)[ FD ]
Line_8 $$ byte[] crcbuf = new byte[checksumSize]-->Line_13 $$ IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length)[ FD ]
Line_8 $$ byte[] crcbuf = new byte[checksumSize]-->Line_21 $$ String msg = "Partial CRC " + partialCrc.getValue() + " does not match value computed the " + " last time file was closed " + checksum2long(crcbuf)[ FD ]
Line_11 $$ instr = datanode.data.getTmpInputStreams(block, blkoff, ckoff)-->Line_12 $$ IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk)[ FD ]
Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_6 $$ LOG.info("computePartialChunkCrc sizePartialChunk " + sizePartialChunk + " " + block + " block offset " + blkoff + " metafile offset " + ckoff)[ CD ]
Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_11 $$ instr = datanode.data.getTmpInputStreams(block, blkoff, ckoff)[ FD ]
Line_5 $$ blkoff = blkoff - sizePartialChunk-->Line_11 $$ instr = datanode.data.getTmpInputStreams(block, blkoff, ckoff)[ FD ]
Line_11 $$ instr = datanode.data.getTmpInputStreams(block, blkoff, ckoff)-->Line_15 $$ IOUtils.closeStream(instr)[ FD ]
Line_3 $$ int sizePartialChunk = (int) (blkoff % bytesPerChecksum)-->Line_5 $$ blkoff = blkoff - sizePartialChunk[ FD ]
Line_3 $$ int sizePartialChunk = (int) (blkoff % bytesPerChecksum)-->Line_12 $$ IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk)[ FD ]
Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_18 $$ partialCrc.update(buf, 0, sizePartialChunk)[ CD ]
Line_11 $$ instr = datanode.data.getTmpInputStreams(block, blkoff, ckoff)-->Line_13 $$ IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length)[ FD ]
Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_5 $$ blkoff = blkoff - sizePartialChunk[ CD ]
Line_9 $$ ReplicaInputStreams instr = null-->Line_13 $$ IOUtils.readFully(instr.getChecksumIn(), crcbuf, 0, crcbuf.length)[ FD ]
Line_2 $$ private void computePartialChunkCrc(long blkoff, long ckoff, int bytesPerChecksum) throws IOException -->Line_7 $$ byte[] buf = new byte[sizePartialChunk][ CD ]
Line_9 $$ ReplicaInputStreams instr = null-->Line_12 $$ IOUtils.readFully(instr.getDataIn(), buf, 0, sizePartialChunk)[ FD ]
