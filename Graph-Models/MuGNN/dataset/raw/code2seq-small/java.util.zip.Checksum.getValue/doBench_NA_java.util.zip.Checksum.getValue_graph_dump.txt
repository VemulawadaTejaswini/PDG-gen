Line_6 $$ final int trials = BYTES_PER_SIZE / size-->Line_16 $$ for (int i = 0; i < trials; i++) [ FD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_8 $$ final Constructor<? extends Checksum> ctor = clazz.getConstructor()[ FD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_3 $$ final Thread[] threads = new Thread[numThreads][ CD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_16 $$ for (int i = 0; i < trials; i++) [ FD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_7 $$ final double mbProcessed = trials * size / 1024.0 / 1024.0[ CD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_4 $$ final BenchResult[] results = new BenchResult[threads.length][ CD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_34 $$ for (int i = 1; i < results.length; i++) [ CD ]
Line_16 $$ for (int i = 0; i < trials; i++) -->Line_34 $$ for (int i = 1; i < results.length; i++) [ FD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_6 $$ final int trials = BYTES_PER_SIZE / size[ CD ]
Line_8 $$ final Constructor<? extends Checksum> ctor = clazz.getConstructor()-->Line_11 $$ threads[i] = new Thread() [ FD ]
Line_11 $$ threads[i] = new Thread() -->Line_20 $$ double secsElapsed = (et - st) / 1000000000.0d[ CD ]
Line_29 $$ for (int i = 0; i < threads.length; i++) -->Line_34 $$ for (int i = 1; i < results.length; i++) [ FD ]
Line_11 $$ threads[i] = new Thread() -->Line_16 $$ for (int i = 0; i < trials; i++) [ CD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_10 $$ final int index = i[ CD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_36 $$ throw new AssertionError(clazz.getSimpleName() + " results not matched.")[ FD ]
Line_34 $$ for (int i = 1; i < results.length; i++) -->Line_35 $$ if (results[i].value != expected) [ CD ]
Line_16 $$ for (int i = 0; i < trials; i++) -->Line_26 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_26 $$ for (int i = 0; i < threads.length; i++) -->Line_29 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_16 $$ for (int i = 0; i < trials; i++) -->Line_29 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_9 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_11 $$ threads[i] = new Thread() -->Line_15 $$ crc.reset()[ CD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_8 $$ final Constructor<? extends Checksum> ctor = clazz.getConstructor()[ CD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_29 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_26 $$ for (int i = 0; i < threads.length; i++) -->Line_34 $$ for (int i = 1; i < results.length; i++) [ FD ]
Line_11 $$ threads[i] = new Thread() -->Line_14 $$ final long st = System.nanoTime()[ CD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_11 $$ threads[i] = new Thread() [ CD ]
Line_29 $$ for (int i = 0; i < threads.length; i++) -->Line_30 $$ threads[i].join()[ CD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_26 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_11 $$ threads[i] = new Thread() -->Line_19 $$ final long et = System.nanoTime()[ CD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_26 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_29 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_34 $$ for (int i = 1; i < results.length; i++) [ FD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_40 $$ return new BenchResult(expected, sum / results.length)[ CD ]
Line_16 $$ for (int i = 0; i < trials; i++) -->Line_17 $$ crc.update(bytes, 0, size)[ CD ]
Line_2 $$ private static BenchResult doBench(Class<? extends Checksum> clazz, final int numThreads, final byte[] bytes, final int size) throws Exception -->Line_17 $$ crc.update(bytes, 0, size)[ FD ]
Line_11 $$ threads[i] = new Thread() -->Line_21 $$ results[index] = new BenchResult(crc.getValue(), mbProcessed / secsElapsed)[ CD ]
Line_26 $$ for (int i = 0; i < threads.length; i++) -->Line_27 $$ threads[i].start()[ CD ]
