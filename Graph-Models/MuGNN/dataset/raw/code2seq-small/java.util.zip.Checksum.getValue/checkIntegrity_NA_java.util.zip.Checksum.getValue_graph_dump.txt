Line_14 $$ final byte[] buffer = new byte[md.length() > 4096 ? 4096 : (int) md.length()]-->Line_20 $$ input.readBytes(buffer, 0, bytesToRead, false)[ FD ]
Line_19 $$ final int bytesToRead = bytesLeft < buffer.length ? (int) bytesLeft : buffer.length-->Line_22 $$ read += bytesToRead[ FD ]
Line_3 $$ try (IndexInput input = directory.openInput(md.name(), IOContext.READONCE)) -->Line_5 $$ throw new CorruptIndexException("expected length=" + md.length() + " != actual length: " + input.length() + " : file truncated?", input)[ FD ]
Line_17 $$ while (len > read) -->Line_18 $$ final long bytesLeft = len - read[ CD ]
Line_2 $$ public static void checkIntegrity(final StoreFileMetaData md, final Directory directory) throws IOException -->Line_12 $$ if (md.hasLegacyChecksum()) [ FD ]
Line_14 $$ final byte[] buffer = new byte[md.length() > 4096 ? 4096 : (int) md.length()]-->Line_21 $$ checksum.update(buffer, 0, bytesToRead)[ FD ]
Line_19 $$ final int bytesToRead = bytesLeft < buffer.length ? (int) bytesLeft : buffer.length-->Line_20 $$ input.readBytes(buffer, 0, bytesToRead, false)[ FD ]
Line_2 $$ public static void checkIntegrity(final StoreFileMetaData md, final Directory directory) throws IOException -->Line_25 $$ if (!adler32.equals(md.checksum())) [ FD ]
Line_8 $$ String checksum = Store.digestToString(CodecUtil.checksumEntireFile(input))-->Line_21 $$ checksum.update(buffer, 0, bytesToRead)[ FD ]
Line_22 $$ read += bytesToRead-->Line_17 $$ while (len > read) [ FD ]
Line_15 $$ final long len = input.length()-->Line_17 $$ while (len > read) [ FD ]
Line_17 $$ while (len > read) -->Line_19 $$ final int bytesToRead = bytesLeft < buffer.length ? (int) bytesLeft : buffer.length[ CD ]
Line_2 $$ public static void checkIntegrity(final StoreFileMetaData md, final Directory directory) throws IOException -->Line_26 $$ throw new CorruptIndexException("checksum failed (hardware problem?) : expected=" + md.checksum() + " actual=" + adler32, input)[ FD ]
Line_17 $$ while (len > read) -->Line_20 $$ input.readBytes(buffer, 0, bytesToRead, false)[ CD ]
Line_2 $$ public static void checkIntegrity(final StoreFileMetaData md, final Directory directory) throws IOException -->Line_9 $$ if (!checksum.equals(md.checksum())) [ FD ]
Line_3 $$ try (IndexInput input = directory.openInput(md.name(), IOContext.READONCE)) -->Line_4 $$ if (input.length() != md.length()) [ FD ]
Line_16 $$ long read = 0-->Line_17 $$ while (len > read) [ FD ]
Line_17 $$ while (len > read) -->Line_22 $$ read += bytesToRead[ CD ]
Line_12 $$ if (md.hasLegacyChecksum()) -->Line_14 $$ final byte[] buffer = new byte[md.length() > 4096 ? 4096 : (int) md.length()][ CD ]
Line_7 $$ if (md.writtenBy() != null && md.writtenBy().onOrAfter(Version.LUCENE_4_8_0)) -->Line_8 $$ String checksum = Store.digestToString(CodecUtil.checksumEntireFile(input))[ CD ]
Line_2 $$ public static void checkIntegrity(final StoreFileMetaData md, final Directory directory) throws IOException -->Line_3 $$ try (IndexInput input = directory.openInput(md.name(), IOContext.READONCE)) [ FD ]
Line_3 $$ try (IndexInput input = directory.openInput(md.name(), IOContext.READONCE)) -->Line_15 $$ final long len = input.length()[ FD ]
Line_12 $$ if (md.hasLegacyChecksum()) -->Line_17 $$ while (len > read) [ CD ]
Line_12 $$ if (md.hasLegacyChecksum()) -->Line_25 $$ if (!adler32.equals(md.checksum())) [ CD ]
Line_12 $$ if (md.hasLegacyChecksum()) -->Line_16 $$ long read = 0[ CD ]
Line_12 $$ if (md.hasLegacyChecksum()) -->Line_15 $$ final long len = input.length()[ CD ]
Line_17 $$ while (len > read) -->Line_21 $$ checksum.update(buffer, 0, bytesToRead)[ CD ]
Line_2 $$ public static void checkIntegrity(final StoreFileMetaData md, final Directory directory) throws IOException -->Line_7 $$ if (md.writtenBy() != null && md.writtenBy().onOrAfter(Version.LUCENE_4_8_0)) [ FD ]
Line_3 $$ try (IndexInput input = directory.openInput(md.name(), IOContext.READONCE)) -->Line_8 $$ String checksum = Store.digestToString(CodecUtil.checksumEntireFile(input))[ FD ]
Line_7 $$ if (md.writtenBy() != null && md.writtenBy().onOrAfter(Version.LUCENE_4_8_0)) -->Line_12 $$ if (md.hasLegacyChecksum()) [ CD ]
Line_3 $$ try (IndexInput input = directory.openInput(md.name(), IOContext.READONCE)) -->Line_20 $$ input.readBytes(buffer, 0, bytesToRead, false)[ FD ]
Line_8 $$ String checksum = Store.digestToString(CodecUtil.checksumEntireFile(input))-->Line_24 $$ String adler32 = Store.digestToString(checksum.getValue())[ FD ]
Line_7 $$ if (md.writtenBy() != null && md.writtenBy().onOrAfter(Version.LUCENE_4_8_0)) -->Line_9 $$ if (!checksum.equals(md.checksum())) [ CD ]
Line_24 $$ String adler32 = Store.digestToString(checksum.getValue())-->Line_25 $$ if (!adler32.equals(md.checksum())) [ FD ]
Line_2 $$ public static void checkIntegrity(final StoreFileMetaData md, final Directory directory) throws IOException -->Line_5 $$ throw new CorruptIndexException("expected length=" + md.length() + " != actual length: " + input.length() + " : file truncated?", input)[ FD ]
Line_2 $$ public static void checkIntegrity(final StoreFileMetaData md, final Directory directory) throws IOException -->Line_4 $$ if (input.length() != md.length()) [ FD ]
Line_2 $$ public static void checkIntegrity(final StoreFileMetaData md, final Directory directory) throws IOException -->Line_10 $$ throw new CorruptIndexException("inconsistent metadata: lucene checksum=" + checksum + ", metadata checksum=" + md.checksum(), input)[ FD ]
Line_12 $$ if (md.hasLegacyChecksum()) -->Line_24 $$ String adler32 = Store.digestToString(checksum.getValue())[ CD ]
Line_2 $$ public static void checkIntegrity(final StoreFileMetaData md, final Directory directory) throws IOException -->Line_14 $$ final byte[] buffer = new byte[md.length() > 4096 ? 4096 : (int) md.length()][ FD ]
Line_19 $$ final int bytesToRead = bytesLeft < buffer.length ? (int) bytesLeft : buffer.length-->Line_21 $$ checksum.update(buffer, 0, bytesToRead)[ FD ]
Line_8 $$ String checksum = Store.digestToString(CodecUtil.checksumEntireFile(input))-->Line_9 $$ if (!checksum.equals(md.checksum())) [ FD ]
Line_16 $$ long read = 0-->Line_22 $$ read += bytesToRead[ FD ]
