Line_2 $$ private void verifySums(final byte[] b, final int off, int read) throws ChecksumException -->Line_7 $$ while (leftToVerify > 0) [ CD ]
Line_9 $$ int expected = checksumInts.get()-->Line_12 $$ if (expected != calculated) [ FD ]
Line_4 $$ int verifyOff = 0-->Line_17 $$ verifyOff += maxChunkSize[ FD ]
Line_7 $$ while (leftToVerify > 0) -->Line_17 $$ verifyOff += maxChunkSize[ CD ]
Line_10 $$ int calculated = (int) sum.getValue()-->Line_12 $$ if (expected != calculated) [ FD ]
Line_2 $$ private void verifySums(final byte[] b, final int off, int read) throws ChecksumException -->Line_6 $$ checksumInts.limit((read - 1) / maxChunkSize + 1)[ CD ]
Line_12 $$ if (expected != calculated) -->Line_13 $$ long errPos = chunkPos + verifyOff[ CD ]
Line_7 $$ while (leftToVerify > 0) -->Line_9 $$ int expected = checksumInts.get()[ CD ]
Line_7 $$ while (leftToVerify > 0) -->Line_16 $$ leftToVerify -= maxChunkSize[ CD ]
Line_2 $$ private void verifySums(final byte[] b, final int off, int read) throws ChecksumException -->Line_4 $$ int verifyOff = 0[ CD ]
Line_3 $$ int leftToVerify = read-->Line_16 $$ leftToVerify -= maxChunkSize[ FD ]
Line_3 $$ int leftToVerify = read-->Line_7 $$ while (leftToVerify > 0) [ FD ]
Line_7 $$ while (leftToVerify > 0) -->Line_10 $$ int calculated = (int) sum.getValue()[ CD ]
Line_2 $$ private void verifySums(final byte[] b, final int off, int read) throws ChecksumException -->Line_3 $$ int leftToVerify = read[ CD ]
Line_7 $$ while (leftToVerify > 0) -->Line_12 $$ if (expected != calculated) [ CD ]
Line_16 $$ leftToVerify -= maxChunkSize-->Line_7 $$ while (leftToVerify > 0) [ FD ]
Line_16 $$ leftToVerify -= maxChunkSize-->Line_8 $$ sum.update(b, off + verifyOff, Math.min(leftToVerify, maxChunkSize))[ FD ]
Line_7 $$ while (leftToVerify > 0) -->Line_11 $$ sum.reset()[ CD ]
Line_2 $$ private void verifySums(final byte[] b, final int off, int read) throws ChecksumException -->Line_5 $$ checksumInts.rewind()[ CD ]
Line_3 $$ int leftToVerify = read-->Line_8 $$ sum.update(b, off + verifyOff, Math.min(leftToVerify, maxChunkSize))[ FD ]
Line_7 $$ while (leftToVerify > 0) -->Line_8 $$ sum.update(b, off + verifyOff, Math.min(leftToVerify, maxChunkSize))[ CD ]
Line_2 $$ private void verifySums(final byte[] b, final int off, int read) throws ChecksumException -->Line_8 $$ sum.update(b, off + verifyOff, Math.min(leftToVerify, maxChunkSize))[ FD ]
