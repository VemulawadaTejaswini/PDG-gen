Line_2 $$ private void verifyChunkedSums(byte[] data, int dataOff, int dataLen, byte[] checksums, int checksumsOff, String fileName, long basePos) throws ChecksumException -->Line_9 $$ while (remaining > 0) [ CD ]
Line_2 $$ private void verifyChunkedSums(byte[] data, int dataOff, int dataLen, byte[] checksums, int checksumsOff, String fileName, long basePos) throws ChecksumException -->Line_3 $$ if (NativeCrc32.isAvailable()) [ CD ]
Line_14 $$ remaining -= n-->Line_10 $$ int n = Math.min(remaining, bytesPerChecksum)[ FD ]
Line_10 $$ int n = Math.min(remaining, bytesPerChecksum)-->Line_13 $$ dataPos += n[ FD ]
Line_9 $$ while (remaining > 0) -->Line_17 $$ checksumsOff += 4[ CD ]
Line_9 $$ while (remaining > 0) -->Line_11 $$ summer.reset()[ CD ]
Line_16 $$ int stored = (checksums[checksumsOff] << 24 & 0xff000000) | (checksums[checksumsOff + 1] << 16 & 0xff0000) | (checksums[checksumsOff + 2] << 8 & 0xff00) | checksums[checksumsOff + 3] & 0xff-->Line_18 $$ if (calculated != stored) [ FD ]
Line_9 $$ while (remaining > 0) -->Line_18 $$ if (calculated != stored) [ CD ]
Line_9 $$ while (remaining > 0) -->Line_16 $$ int stored = (checksums[checksumsOff] << 24 & 0xff000000) | (checksums[checksumsOff + 1] << 16 & 0xff0000) | (checksums[checksumsOff + 2] << 8 & 0xff00) | checksums[checksumsOff + 3] & 0xff[ CD ]
Line_9 $$ while (remaining > 0) -->Line_10 $$ int n = Math.min(remaining, bytesPerChecksum)[ CD ]
Line_2 $$ private void verifyChunkedSums(byte[] data, int dataOff, int dataLen, byte[] checksums, int checksumsOff, String fileName, long basePos) throws ChecksumException -->Line_4 $$ NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id, checksums, checksumsOff, data, dataOff, dataLen, fileName, basePos)[ FD ]
Line_18 $$ if (calculated != stored) -->Line_19 $$ long errPos = basePos + dataPos - n[ CD ]
Line_7 $$ int remaining = dataLen-->Line_9 $$ while (remaining > 0) [ FD ]
Line_3 $$ if (NativeCrc32.isAvailable()) -->Line_5 $$ return[ CD ]
Line_2 $$ private void verifyChunkedSums(byte[] data, int dataOff, int dataLen, byte[] checksums, int checksumsOff, String fileName, long basePos) throws ChecksumException -->Line_7 $$ int remaining = dataLen[ CD ]
Line_2 $$ private void verifyChunkedSums(byte[] data, int dataOff, int dataLen, byte[] checksums, int checksumsOff, String fileName, long basePos) throws ChecksumException -->Line_8 $$ int dataPos = 0[ CD ]
Line_3 $$ if (NativeCrc32.isAvailable()) -->Line_4 $$ NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id, checksums, checksumsOff, data, dataOff, dataLen, fileName, basePos)[ CD ]
Line_8 $$ int dataPos = 0-->Line_13 $$ dataPos += n[ FD ]
Line_10 $$ int n = Math.min(remaining, bytesPerChecksum)-->Line_12 $$ summer.update(data, dataOff + dataPos, n)[ FD ]
Line_9 $$ while (remaining > 0) -->Line_15 $$ int calculated = (int) summer.getValue()[ CD ]
Line_9 $$ while (remaining > 0) -->Line_14 $$ remaining -= n[ CD ]
Line_15 $$ int calculated = (int) summer.getValue()-->Line_18 $$ if (calculated != stored) [ FD ]
Line_14 $$ remaining -= n-->Line_9 $$ while (remaining > 0) [ FD ]
Line_7 $$ int remaining = dataLen-->Line_14 $$ remaining -= n[ FD ]
Line_2 $$ private void verifyChunkedSums(byte[] data, int dataOff, int dataLen, byte[] checksums, int checksumsOff, String fileName, long basePos) throws ChecksumException -->Line_17 $$ checksumsOff += 4[ FD ]
Line_2 $$ private void verifyChunkedSums(byte[] data, int dataOff, int dataLen, byte[] checksums, int checksumsOff, String fileName, long basePos) throws ChecksumException -->Line_12 $$ summer.update(data, dataOff + dataPos, n)[ FD ]
Line_9 $$ while (remaining > 0) -->Line_13 $$ dataPos += n[ CD ]
Line_7 $$ int remaining = dataLen-->Line_10 $$ int n = Math.min(remaining, bytesPerChecksum)[ FD ]
Line_10 $$ int n = Math.min(remaining, bytesPerChecksum)-->Line_14 $$ remaining -= n[ FD ]
Line_9 $$ while (remaining > 0) -->Line_12 $$ summer.update(data, dataOff + dataPos, n)[ CD ]
