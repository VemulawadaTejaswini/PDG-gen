Line_17 $$ if (PrintSettings.RIGHT.equals(alignment)) -->Line_18 $$ drawStringToGraphics(g, headerText, (float) (x + w - width), yPos)[ CD ]
Line_7 $$ headerText = convertHeaderText(headerText)-->Line_14 $$ drawStringToGraphics(g, headerText, x, yPos)[ FD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_15 $$ if (PrintSettings.CENTER.equals(alignment)) [ FD ]
Line_7 $$ headerText = convertHeaderText(headerText)-->Line_18 $$ drawStringToGraphics(g, headerText, (float) (x + w - width), yPos)[ FD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_17 $$ if (PrintSettings.RIGHT.equals(alignment)) [ FD ]
Line_12 $$ float yPos = (float) (lineHeight - descent + y)-->Line_18 $$ drawStringToGraphics(g, headerText, (float) (x + w - width), yPos)[ FD ]
Line_12 $$ float yPos = (float) (lineHeight - descent + y)-->Line_14 $$ drawStringToGraphics(g, headerText, x, yPos)[ FD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_14 $$ drawStringToGraphics(g, headerText, x, yPos)[ FD ]
Line_6 $$ if (myPerformActualDrawing) -->Line_9 $$ g.setColor(Color.black)[ CD ]
Line_12 $$ float yPos = (float) (lineHeight - descent + y)-->Line_16 $$ drawStringToGraphics(g, headerText, (float) (x + (w - width) / 2), yPos)[ FD ]
Line_7 $$ headerText = convertHeaderText(headerText)-->Line_11 $$ double width = myHeaderFont.getStringBounds(headerText, fontRenderContext).getWidth() + getCharWidth(g)[ FD ]
Line_13 $$ if (PrintSettings.LEFT.equals(alignment)) -->Line_15 $$ if (PrintSettings.CENTER.equals(alignment)) [ CD ]
Line_6 $$ if (myPerformActualDrawing) -->Line_10 $$ float descent = lineMetrics.getDescent()[ CD ]
Line_6 $$ if (myPerformActualDrawing) -->Line_8 $$ g.setFont(myHeaderFont)[ CD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_11 $$ double width = myHeaderFont.getStringBounds(headerText, fontRenderContext).getWidth() + getCharWidth(g)[ FD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_16 $$ drawStringToGraphics(g, headerText, (float) (x + (w - width) / 2), yPos)[ FD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_9 $$ g.setColor(Color.black)[ FD ]
Line_4 $$ LineMetrics lineMetrics = getHeaderFooterLineMetrics(g)-->Line_10 $$ float descent = lineMetrics.getDescent()[ FD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_3 $$ FontRenderContext fontRenderContext = g.getFontRenderContext()[ CD ]
Line_15 $$ if (PrintSettings.CENTER.equals(alignment)) -->Line_16 $$ drawStringToGraphics(g, headerText, (float) (x + (w - width) / 2), yPos)[ CD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_6 $$ if (myPerformActualDrawing) [ CD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_4 $$ LineMetrics lineMetrics = getHeaderFooterLineMetrics(g)[ CD ]
Line_6 $$ if (myPerformActualDrawing) -->Line_11 $$ double width = myHeaderFont.getStringBounds(headerText, fontRenderContext).getWidth() + getCharWidth(g)[ CD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_13 $$ if (PrintSettings.LEFT.equals(alignment)) [ FD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_4 $$ LineMetrics lineMetrics = getHeaderFooterLineMetrics(g)[ FD ]
Line_13 $$ if (PrintSettings.LEFT.equals(alignment)) -->Line_14 $$ drawStringToGraphics(g, headerText, x, yPos)[ CD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_18 $$ drawStringToGraphics(g, headerText, (float) (x + w - width), yPos)[ FD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_7 $$ headerText = convertHeaderText(headerText)[ FD ]
Line_4 $$ LineMetrics lineMetrics = getHeaderFooterLineMetrics(g)-->Line_5 $$ float lineHeight = lineMetrics.getHeight()[ FD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_3 $$ FontRenderContext fontRenderContext = g.getFontRenderContext()[ FD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_8 $$ g.setFont(myHeaderFont)[ FD ]
Line_7 $$ headerText = convertHeaderText(headerText)-->Line_16 $$ drawStringToGraphics(g, headerText, (float) (x + (w - width) / 2), yPos)[ FD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_5 $$ float lineHeight = lineMetrics.getHeight()[ CD ]
Line_15 $$ if (PrintSettings.CENTER.equals(alignment)) -->Line_17 $$ if (PrintSettings.RIGHT.equals(alignment)) [ CD ]
Line_6 $$ if (myPerformActualDrawing) -->Line_13 $$ if (PrintSettings.LEFT.equals(alignment)) [ CD ]
Line_2 $$ private double drawHeaderOrFooterLine(Graphics2D g, double x, double y, double w, String headerText, String alignment) -->Line_21 $$ return lineHeight[ CD ]
Line_6 $$ if (myPerformActualDrawing) -->Line_12 $$ float yPos = (float) (lineHeight - descent + y)[ CD ]
Line_6 $$ if (myPerformActualDrawing) -->Line_7 $$ headerText = convertHeaderText(headerText)[ CD ]
Line_3 $$ FontRenderContext fontRenderContext = g.getFontRenderContext()-->Line_11 $$ double width = myHeaderFont.getStringBounds(headerText, fontRenderContext).getWidth() + getCharWidth(g)[ FD ]
