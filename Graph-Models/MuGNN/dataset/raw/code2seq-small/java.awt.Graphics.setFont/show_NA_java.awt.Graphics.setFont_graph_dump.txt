Line_55 $$ if (isDirty) -->Line_68 $$ int h = myEditor.getLineHeight() - 2[ CD ]
Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() -->Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) [ CD ]
Line_69 $$ for (RangeHighlighterEx ex : myHighlighters) -->Line_70 $$ if (!ex.isValid())[ FD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_123 $$ topArea.add(new Area(new Rectangle.Double(cx - pseudoMajorAxis / 2, cy, pseudoMajorAxis, ry)))[ CD ]
Line_39 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_44 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)[ FD ]
Line_105 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_109 $$ UIUtil.drawImage(g2, myCacheLevel1, 0, 0, this)[ FD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_60 $$ GraphicsUtil.setupAAPainting(g2d)[ FD ]
Line_6 $$ boolean needDelay = false-->Line_8 $$ needDelay = true[ FD ]
Line_36 $$ final AffineTransform t = cg.getTransform()-->Line_45 $$ translateInstance.preConcatenate(t)[ FD ]
Line_38 $$ int lineShift = -myEditor.getLineHeight() * myCacheStartLine-->Line_48 $$ cg.setClip(0, -lineShift, contentComponent.getWidth(), myCacheLevel2.getHeight())[ FD ]
Line_55 $$ if (isDirty) -->Line_59 $$ EditorUIUtil.setupAntialiasing(g2d)[ CD ]
Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() -->Line_16 $$ int width = myEditor.getGutterComponentEx().getWidth() + myEditor.getScrollingModel().getVisibleArea().width - myEditor.getVerticalScrollBar().getWidth()[ CD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_98 $$ g2d.setColor(new JBColor(JBColor.GRAY, Gray._200))[ FD ]
Line_7 $$ if (myEditorPreviewHint == null) -->Line_8 $$ needDelay = true[ CD ]
Line_51 $$ if (myCacheLevel1 == null) -->Line_52 $$ myCacheLevel1 = UIUtil.createImage(size.width, myEditor.getLineHeight() * (2 * myPreviewLines + 1), BufferedImage.TYPE_INT_RGB)[ CD ]
Line_82 $$ int endOfLineOffset = myEditor.getDocument().getLineEndOffset(logicalPosition.line)-->Line_83 $$ logicalPosition = myEditor.offsetToLogicalPosition(endOfLineOffset)[ FD ]
Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() -->Line_28 $$ int gutterWidth = gutterComponentEx.getWidth()[ CD ]
Line_8 $$ needDelay = true-->Line_157 $$ if (needDelay && !myShowInstantly) [ FD ]
Line_92 $$ int rightEdge = rightEdges.get(logicalPosition.line)-->Line_93 $$ placeToShow.x = Math.max(placeToShow.x, rightEdge)[ FD ]
Line_80 $$ s = StringUtil.unescapeXml(s)-->Line_101 $$ g2d.drawString(s, placeToShow.x + R, placeToShow.y + h - g2d.getFontMetrics(g2d.getFont()).getDescent() / 2 - 2)[ FD ]
Line_69 $$ for (RangeHighlighterEx ex : myHighlighters) -->Line_72 $$ int hEndOffset = ex.getAffectedAreaEndOffset()[ FD ]
Line_79 $$ s = s.replaceAll("&nbsp;", " ").replaceAll("\\s+", " ")-->Line_91 $$ int w = g2d.getFontMetrics().stringWidth(s)[ FD ]
Line_76 $$ String s = String.valueOf(tooltip)-->Line_91 $$ int w = g2d.getFontMetrics().stringWidth(s)[ FD ]
Line_28 $$ int gutterWidth = gutterComponentEx.getWidth()-->Line_66 $$ UIUtil.drawImage(g2d, myCacheLevel2, -gutterWidth, 0, null)[ FD ]
Line_76 $$ String s = String.valueOf(tooltip)-->Line_101 $$ g2d.drawString(s, placeToShow.x + R, placeToShow.y + h - g2d.getFontMetrics(g2d.getFont()).getDescent() / 2 - 2)[ FD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_42 $$ cg.setClip(0, -lineShift, gutterWidth, myCacheLevel2.getHeight())[ CD ]
Line_7 $$ if (myEditorPreviewHint == null) -->Line_149 $$ myEditorPreviewHint.setForceLightweightPopup(true)[ CD ]
Line_58 $$ final AffineTransform transform = g2d.getTransform()-->Line_64 $$ translateInstance.preConcatenate(transform)[ FD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_48 $$ cg.setClip(0, -lineShift, contentComponent.getWidth(), myCacheLevel2.getHeight())[ CD ]
Line_55 $$ if (isDirty) -->Line_63 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(gutterWidth, myEditor.getLineHeight() * (myCacheStartLine - myStartVisualLine))[ CD ]
Line_38 $$ int lineShift = -myEditor.getLineHeight() * myCacheStartLine-->Line_39 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)[ FD ]
Line_55 $$ if (isDirty) -->Line_65 $$ g2d.setTransform(translateInstance)[ CD ]
Line_160 $$ alarm.addRequest(new Runnable() -->Line_166 $$ showEditorHint(hintManager, myPointHolder.get(), myHintHolder.get())[ CD ]
Line_24 $$ if (myVisualLine == -1)-->Line_25 $$ return[ CD ]
Line_7 $$ if (myEditorPreviewHint == null) -->Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() [ CD ]
Line_121 $$ Area topArea = new Area(topShape1)-->Line_123 $$ topArea.add(new Area(new Rectangle.Double(cx - pseudoMajorAxis / 2, cy, pseudoMajorAxis, ry)))[ FD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_124 $$ g2.fill(topArea)[ CD ]
Line_157 $$ if (needDelay && !myShowInstantly) -->Line_160 $$ alarm.addRequest(new Runnable() [ CD ]
Line_55 $$ if (isDirty) -->Line_61 $$ g2d.setColor(myEditor.getBackgroundColor())[ CD ]
Line_44 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)-->Line_64 $$ translateInstance.preConcatenate(transform)[ FD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_96 $$ g2d.setColor(MessageType.WARNING.getPopupBackground())[ FD ]
Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() -->Line_27 $$ EditorGutterComponentEx gutterComponentEx = myEditor.getGutterComponentEx()[ CD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_62 $$ g2d.fillRect(0, 0, getWidth(), getHeight())[ FD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_46 $$ cg.setTransform(translateInstance)[ CD ]
Line_105 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_108 $$ g2.setClip(new RoundRectangle2D.Double(0, 0, size.width - .5, size.height - .5, 2, 2))[ FD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_32 $$ if (myCacheLevel2 == null) [ CD ]
Line_125 $$ Area bottomArea = new Area(s)-->Line_128 $$ g2.fill(bottomArea)[ FD ]
Line_79 $$ s = s.replaceAll("&nbsp;", " ").replaceAll("\\s+", " ")-->Line_101 $$ g2d.drawString(s, placeToShow.x + R, placeToShow.y + h - g2d.getFontMetrics(g2d.getFont()).getDescent() / 2 - 2)[ FD ]
Line_39 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_45 $$ translateInstance.preConcatenate(t)[ FD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_66 $$ UIUtil.drawImage(g2d, myCacheLevel2, -gutterWidth, 0, null)[ FD ]
Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() -->Line_55 $$ if (isDirty) [ CD ]
Line_164 $$ if (myEditorPreviewHint == null || !myDelayed)-->Line_165 $$ return[ CD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_61 $$ g2d.setColor(myEditor.getBackgroundColor())[ FD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_97 $$ g2d.fillRoundRect(placeToShow.x, placeToShow.y, w + 2 * R, h, R, R)[ FD ]
Line_27 $$ EditorGutterComponentEx gutterComponentEx = myEditor.getGutterComponentEx()-->Line_28 $$ int gutterWidth = gutterComponentEx.getWidth()[ FD ]
Line_55 $$ if (isDirty) -->Line_58 $$ final AffineTransform transform = g2d.getTransform()[ CD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_39 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)[ CD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_101 $$ g2d.drawString(s, placeToShow.x + R, placeToShow.y + h - g2d.getFontMetrics(g2d.getFont()).getDescent() / 2 - 2)[ FD ]
Line_55 $$ if (isDirty) -->Line_60 $$ GraphicsUtil.setupAAPainting(g2d)[ CD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_45 $$ translateInstance.preConcatenate(t)[ CD ]
Line_39 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_41 $$ cg.setTransform(translateInstance)[ FD ]
Line_35 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_42 $$ cg.setClip(0, -lineShift, gutterWidth, myCacheLevel2.getHeight())[ FD ]
Line_17 $$ if (!ToolWindowManagerEx.getInstanceEx(myEditor.getProject()).getIdsOn(ToolWindowAnchor.LEFT).isEmpty())-->Line_18 $$ width--[ CD ]
Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() -->Line_105 $$ Graphics2D g2 = (Graphics2D) g.create()[ FD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_100 $$ g2d.setColor(JBColor.foreground())[ FD ]
Line_16 $$ int width = myEditor.getGutterComponentEx().getWidth() + myEditor.getScrollingModel().getVisibleArea().width - myEditor.getVerticalScrollBar().getWidth()-->Line_18 $$ width--[ FD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_116 $$ int ry = myEditor.getLineHeight() * 3 / 2[ CD ]
Line_121 $$ Area topArea = new Area(topShape1)-->Line_126 $$ bottomArea.subtract(topArea)[ FD ]
Line_72 $$ int hEndOffset = ex.getAffectedAreaEndOffset()-->Line_81 $$ LogicalPosition logicalPosition = myEditor.offsetToLogicalPosition(hEndOffset)[ FD ]
Line_76 $$ String s = String.valueOf(tooltip)-->Line_77 $$ if (s.isEmpty())[ FD ]
Line_94 $$ rightEdge = Math.max(rightEdge, placeToShow.x + w + 3 * R)-->Line_95 $$ rightEdges.put(logicalPosition.line, rightEdge)[ FD ]
Line_135 $$ myEditorPreviewHint = new LightweightHint(editorFragmentPreviewPanel) -->Line_141 $$ if (myCacheLevel2 != null) [ CD ]
Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() -->Line_51 $$ if (myCacheLevel1 == null) [ CD ]
Line_76 $$ String s = String.valueOf(tooltip)-->Line_79 $$ s = s.replaceAll("&nbsp;", " ").replaceAll("\\s+", " ")[ FD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_41 $$ cg.setTransform(translateInstance)[ CD ]
Line_67 $$ TIntIntHashMap rightEdges = new TIntIntHashMap()-->Line_95 $$ rightEdges.put(logicalPosition.line, rightEdge)[ FD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_35 $$ Graphics2D cg = myCacheLevel2.createGraphics()[ CD ]
Line_81 $$ LogicalPosition logicalPosition = myEditor.offsetToLogicalPosition(hEndOffset)-->Line_84 $$ Point placeToShow = myEditor.logicalPositionToXY(logicalPosition)[ FD ]
Line_27 $$ EditorGutterComponentEx gutterComponentEx = myEditor.getGutterComponentEx()-->Line_43 $$ gutterComponentEx.paint(cg)[ FD ]
Line_55 $$ if (isDirty) -->Line_66 $$ UIUtil.drawImage(g2d, myCacheLevel2, -gutterWidth, 0, null)[ CD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_126 $$ bottomArea.subtract(topArea)[ CD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_127 $$ g2.setPaint(new GradientPaint(0, size.height - ry, Gray._0.withAlpha(10), 0, size.height, Gray._255.withAlpha(30)))[ CD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_117 $$ g2.setPaint(new GradientPaint(0, 0, Gray._255.withAlpha(75), 0, ry, Gray._255.withAlpha(10)))[ CD ]
Line_5 $$ final HintManagerImpl hintManager = HintManagerImpl.getInstanceImpl()-->Line_166 $$ showEditorHint(hintManager, myPointHolder.get(), myHintHolder.get())[ FD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_128 $$ g2.fill(bottomArea)[ CD ]
Line_69 $$ for (RangeHighlighterEx ex : myHighlighters) -->Line_73 $$ Object tooltip = ex.getErrorStripeTooltip()[ FD ]
Line_68 $$ int h = myEditor.getLineHeight() - 2-->Line_99 $$ g2d.drawRoundRect(placeToShow.x, placeToShow.y, w + 2 * R, h, R, R)[ FD ]
Line_55 $$ if (isDirty) -->Line_64 $$ translateInstance.preConcatenate(transform)[ CD ]
Line_135 $$ myEditorPreviewHint = new LightweightHint(editorFragmentPreviewPanel) -->Line_139 $$ super.hide(ok)[ CD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_49 $$ contentComponent.paint(cg)[ CD ]
Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() -->Line_26 $$ Dimension size = getPreferredSize()[ CD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_44 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)[ CD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_58 $$ final AffineTransform transform = g2d.getTransform()[ FD ]
Line_105 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_131 $$ g2.dispose()[ FD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_91 $$ int w = g2d.getFontMetrics().stringWidth(s)[ FD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_43 $$ gutterComponentEx.paint(cg)[ CD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_120 $$ Shape topShape2 = new Ellipse2D.Double(cx - rx + pseudoMajorAxis / 2, cy - ry, 2 * rx, 2 * ry)[ CD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_31 $$ myCacheEndLine = fitLineToEditor(myCacheStartLine + 2 * myCachePreviewLines + 1)[ CD ]
Line_121 $$ Area topArea = new Area(topShape1)-->Line_122 $$ topArea.add(new Area(topShape2))[ FD ]
Line_171 $$ if (!myDelayed) -->Line_172 $$ showEditorHint(hintManager, point, hintInfo)[ CD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_90 $$ g2d.setFont(font.deriveFont(font.getSize() * .8F))[ FD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_113 $$ double cx = size.width / 2[ CD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_114 $$ double cy = 0[ CD ]
Line_35 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_46 $$ cg.setTransform(translateInstance)[ FD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_122 $$ topArea.add(new Area(topShape2))[ CD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_37 $$ EditorUIUtil.setupAntialiasing(cg)[ CD ]
Line_125 $$ Area bottomArea = new Area(s)-->Line_126 $$ bottomArea.subtract(topArea)[ FD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_40 $$ translateInstance.preConcatenate(t)[ CD ]
Line_36 $$ final AffineTransform t = cg.getTransform()-->Line_40 $$ translateInstance.preConcatenate(t)[ FD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_99 $$ g2d.drawRoundRect(placeToShow.x, placeToShow.y, w + 2 * R, h, R, R)[ FD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_65 $$ g2d.setTransform(translateInstance)[ FD ]
Line_67 $$ TIntIntHashMap rightEdges = new TIntIntHashMap()-->Line_92 $$ int rightEdge = rightEdges.get(logicalPosition.line)[ FD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_115 $$ double rx = size.width / 10[ CD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_121 $$ Area topArea = new Area(topShape1)[ CD ]
Line_5 $$ final HintManagerImpl hintManager = HintManagerImpl.getInstanceImpl()-->Line_172 $$ showEditorHint(hintManager, point, hintInfo)[ FD ]
Line_35 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_37 $$ EditorUIUtil.setupAntialiasing(cg)[ FD ]
Line_80 $$ s = StringUtil.unescapeXml(s)-->Line_91 $$ int w = g2d.getFontMetrics().stringWidth(s)[ FD ]
Line_35 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_36 $$ final AffineTransform t = cg.getTransform()[ FD ]
Line_28 $$ int gutterWidth = gutterComponentEx.getWidth()-->Line_63 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(gutterWidth, myEditor.getLineHeight() * (myCacheStartLine - myStartVisualLine))[ FD ]
Line_105 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_128 $$ g2.fill(bottomArea)[ FD ]
Line_105 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_117 $$ g2.setPaint(new GradientPaint(0, 0, Gray._255.withAlpha(75), 0, ry, Gray._255.withAlpha(10)))[ FD ]
Line_35 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_41 $$ cg.setTransform(translateInstance)[ FD ]
Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() -->Line_24 $$ if (myVisualLine == -1)[ CD ]
Line_32 $$ if (myCacheLevel2 == null) -->Line_33 $$ myCacheLevel2 = UIUtil.createImage(size.width, myEditor.getLineHeight() * (2 * myCachePreviewLines + 1), BufferedImage.TYPE_INT_RGB)[ CD ]
Line_121 $$ Area topArea = new Area(topShape1)-->Line_124 $$ g2.fill(topArea)[ FD ]
Line_39 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_65 $$ g2d.setTransform(translateInstance)[ FD ]
Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_59 $$ EditorUIUtil.setupAntialiasing(g2d)[ FD ]
Line_105 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_124 $$ g2.fill(topArea)[ FD ]
Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() -->Line_17 $$ if (!ToolWindowManagerEx.getInstanceEx(myEditor.getProject()).getIdsOn(ToolWindowAnchor.LEFT).isEmpty())[ CD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_38 $$ int lineShift = -myEditor.getLineHeight() * myCacheStartLine[ CD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_30 $$ myCacheStartLine = fitLineToEditor(myVisualLine - myCachePreviewLines)[ CD ]
Line_35 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_48 $$ cg.setClip(0, -lineShift, contentComponent.getWidth(), myCacheLevel2.getHeight())[ FD ]
Line_79 $$ s = s.replaceAll("&nbsp;", " ").replaceAll("\\s+", " ")-->Line_80 $$ s = StringUtil.unescapeXml(s)[ FD ]
Line_92 $$ int rightEdge = rightEdges.get(logicalPosition.line)-->Line_94 $$ rightEdge = Math.max(rightEdge, placeToShow.x + w + 3 * R)[ FD ]
Line_35 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_43 $$ gutterComponentEx.paint(cg)[ FD ]
Line_44 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)-->Line_65 $$ g2d.setTransform(translateInstance)[ FD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_119 $$ Shape topShape1 = new Ellipse2D.Double(cx - rx - pseudoMajorAxis / 2, cy - ry, 2 * rx, 2 * ry)[ CD ]
Line_141 $$ if (myCacheLevel2 != null) -->Line_143 $$ myCacheStartLine = -1[ CD ]
Line_89 $$ Font font = myEditor.getColorsScheme().getFont(EditorFontType.PLAIN)-->Line_90 $$ g2d.setFont(font.deriveFont(font.getSize() * .8F))[ FD ]
Line_105 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_107 $$ GraphicsUtil.setupAAPainting(g2)[ FD ]
Line_81 $$ LogicalPosition logicalPosition = myEditor.offsetToLogicalPosition(hEndOffset)-->Line_83 $$ logicalPosition = myEditor.offsetToLogicalPosition(endOfLineOffset)[ FD ]
Line_44 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)-->Line_45 $$ translateInstance.preConcatenate(t)[ FD ]
Line_6 $$ boolean needDelay = false-->Line_157 $$ if (needDelay && !myShowInstantly) [ FD ]
Line_141 $$ if (myCacheLevel2 != null) -->Line_144 $$ myCacheEndLine = -1[ CD ]
Line_160 $$ alarm.addRequest(new Runnable() -->Line_164 $$ if (myEditorPreviewHint == null || !myDelayed)[ CD ]
Line_47 $$ EditorComponentImpl contentComponent = myEditor.getContentComponent()-->Line_48 $$ cg.setClip(0, -lineShift, contentComponent.getWidth(), myCacheLevel2.getHeight())[ FD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_118 $$ double pseudoMajorAxis = size.width - rx * 9 / 5[ CD ]
Line_38 $$ int lineShift = -myEditor.getLineHeight() * myCacheStartLine-->Line_44 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)[ FD ]
Line_105 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_127 $$ g2.setPaint(new GradientPaint(0, size.height - ry, Gray._0.withAlpha(10), 0, size.height, Gray._255.withAlpha(30)))[ FD ]
Line_39 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_46 $$ cg.setTransform(translateInstance)[ FD ]
Line_55 $$ if (isDirty) -->Line_62 $$ g2d.fillRect(0, 0, getWidth(), getHeight())[ CD ]
Line_92 $$ int rightEdge = rightEdges.get(logicalPosition.line)-->Line_95 $$ rightEdges.put(logicalPosition.line, rightEdge)[ FD ]
Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() -->Line_19 $$ return new Dimension(width - BalloonImpl.POINTER_WIDTH, myEditor.getLineHeight() * (myEndVisualLine - myStartVisualLine))[ CD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_36 $$ final AffineTransform t = cg.getTransform()[ CD ]
Line_47 $$ EditorComponentImpl contentComponent = myEditor.getContentComponent()-->Line_49 $$ contentComponent.paint(cg)[ FD ]
Line_76 $$ String s = String.valueOf(tooltip)-->Line_80 $$ s = StringUtil.unescapeXml(s)[ FD ]
Line_55 $$ if (isDirty) -->Line_67 $$ TIntIntHashMap rightEdges = new TIntIntHashMap()[ CD ]
Line_9 $$ final JPanel editorFragmentPreviewPanel = new JPanel() -->Line_105 $$ Graphics2D g2 = (Graphics2D) g.create()[ CD ]
Line_157 $$ if (needDelay && !myShowInstantly) -->Line_171 $$ if (!myDelayed) [ CD ]
Line_73 $$ Object tooltip = ex.getErrorStripeTooltip()-->Line_76 $$ String s = String.valueOf(tooltip)[ FD ]
Line_28 $$ int gutterWidth = gutterComponentEx.getWidth()-->Line_42 $$ cg.setClip(0, -lineShift, gutterWidth, myCacheLevel2.getHeight())[ FD ]
Line_73 $$ Object tooltip = ex.getErrorStripeTooltip()-->Line_74 $$ if (tooltip == null)[ FD ]
Line_110 $$ if (UIUtil.isUnderDarcula()) -->Line_125 $$ Area bottomArea = new Area(s)[ CD ]
Line_35 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_49 $$ contentComponent.paint(cg)[ FD ]
Line_44 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)-->Line_46 $$ cg.setTransform(translateInstance)[ FD ]
Line_38 $$ int lineShift = -myEditor.getLineHeight() * myCacheStartLine-->Line_42 $$ cg.setClip(0, -lineShift, gutterWidth, myCacheLevel2.getHeight())[ FD ]
Line_55 $$ if (isDirty) -->Line_57 $$ Graphics2D g2d = myCacheLevel1.createGraphics()[ CD ]
Line_68 $$ int h = myEditor.getLineHeight() - 2-->Line_97 $$ g2d.fillRoundRect(placeToShow.x, placeToShow.y, w + 2 * R, h, R, R)[ FD ]
Line_39 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_40 $$ translateInstance.preConcatenate(t)[ FD ]
Line_29 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_47 $$ EditorComponentImpl contentComponent = myEditor.getContentComponent()[ CD ]
Line_83 $$ logicalPosition = myEditor.offsetToLogicalPosition(endOfLineOffset)-->Line_84 $$ Point placeToShow = myEditor.logicalPositionToXY(logicalPosition)[ FD ]
Line_39 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_64 $$ translateInstance.preConcatenate(transform)[ FD ]
Line_135 $$ myEditorPreviewHint = new LightweightHint(editorFragmentPreviewPanel) -->Line_139 $$ super.hide(ok)[ FD ]
