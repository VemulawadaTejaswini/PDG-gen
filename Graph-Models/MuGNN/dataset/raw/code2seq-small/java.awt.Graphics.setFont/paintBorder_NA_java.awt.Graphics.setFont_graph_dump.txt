Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_87 $$ if (computeIntersection2(clipRect, x, y, textLoc.x - 1 - x, height)) [ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_116 $$ final int index = myOriginalTitle.indexOf('&')[ CD ]
Line_83 $$ if (((titlePos == TOP || titlePos == DEFAULT_POSITION) && (grooveRect.y > textLoc.y - ascent)) || (titlePos == BOTTOM && (grooveRect.y + grooveRect.height < textLoc.y + descent))) -->Line_85 $$ Rectangle saveClip = g.getClipBounds()[ CD ]
Line_5 $$ if (getTitle() == null || getTitle().length() == 0) -->Line_6 $$ if (border != null) [ CD ]
Line_84 $$ Rectangle clipRect = new Rectangle()-->Line_98 $$ if (computeIntersection2(clipRect, textLoc.x - 1, textLoc.y + descent, stringWidth + 2, y + height - textLoc.y - descent)) [ FD ]
Line_87 $$ if (computeIntersection2(clipRect, x, y, textLoc.x - 1 - x, height)) -->Line_89 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ CD ]
Line_84 $$ Rectangle clipRect = new Rectangle()-->Line_91 $$ clipRect.setBounds(saveClip)[ FD ]
Line_15 $$ FontMetrics fm = g.getFontMetrics()-->Line_119 $$ int x1 = fm.stringWidth(getTitle().substring(0, index + 1))[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_125 $$ g.setColor(color)[ CD ]
Line_58 $$ if (c.getComponentOrientation().isLeftToRight()) -->Line_59 $$ if (justification == LEADING || justification == DEFAULT_JUSTIFICATION) [ CD ]
Line_84 $$ Rectangle clipRect = new Rectangle()-->Line_104 $$ if (computeIntersection2(clipRect, textLoc.x - 1, y, stringWidth + 2, textLoc.y - ascent - y)) [ FD ]
Line_92 $$ if (computeIntersection2(clipRect, textLoc.x + stringWidth + 1, y, x + width - (textLoc.x + stringWidth + 1), height)) -->Line_94 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_11 $$ Rectangle grooveRect = new Rectangle(x + EDGE_SPACING, y + EDGE_SPACING, width - (EDGE_SPACING * 2), height - (EDGE_SPACING * 2))[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_124 $$ g.setFont(font)[ FD ]
Line_21 $$ Insets insets-->Line_23 $$ insets = border.getBorderInsets(c)[ FD ]
Line_15 $$ FontMetrics fm = g.getFontMetrics()-->Line_18 $$ int ascent = fm.getAscent()[ FD ]
Line_83 $$ if (((titlePos == TOP || titlePos == DEFAULT_POSITION) && (grooveRect.y > textLoc.y - ascent)) || (titlePos == BOTTOM && (grooveRect.y + grooveRect.height < textLoc.y + descent))) -->Line_96 $$ if (titlePos == TOP || titlePos == DEFAULT_POSITION) [ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_105 $$ g.setClip(clipRect)[ FD ]
Line_4 $$ Border border = getBorder()-->Line_7 $$ border.paintBorder(c, g, x, y, width, height)[ FD ]
Line_62 $$ justification = RIGHT-->Line_67 $$ if (justification == TRAILING) [ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_58 $$ if (c.getComponentOrientation().isLeftToRight()) [ CD ]
Line_57 $$ int justification = getTitleJustification()-->Line_67 $$ if (justification == TRAILING) [ FD ]
Line_84 $$ Rectangle clipRect = new Rectangle()-->Line_105 $$ g.setClip(clipRect)[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_114 $$ g.setColor(getTitleColor())[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_18 $$ int ascent = fm.getAscent()[ CD ]
Line_83 $$ if (((titlePos == TOP || titlePos == DEFAULT_POSITION) && (grooveRect.y > textLoc.y - ascent)) || (titlePos == BOTTOM && (grooveRect.y + grooveRect.height < textLoc.y + descent))) -->Line_86 $$ clipRect.setBounds(saveClip)[ CD ]
Line_82 $$ if (border != null) -->Line_83 $$ if (((titlePos == TOP || titlePos == DEFAULT_POSITION) && (grooveRect.y > textLoc.y - ascent)) || (titlePos == BOTTOM && (grooveRect.y + grooveRect.height < textLoc.y + descent))) [ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_7 $$ border.paintBorder(c, g, x, y, width, height)[ FD ]
Line_57 $$ int justification = getTitleJustification()-->Line_60 $$ justification = LEFT[ FD ]
Line_83 $$ if (((titlePos == TOP || titlePos == DEFAULT_POSITION) && (grooveRect.y > textLoc.y - ascent)) || (titlePos == BOTTOM && (grooveRect.y + grooveRect.height < textLoc.y + descent))) -->Line_92 $$ if (computeIntersection2(clipRect, textLoc.x + stringWidth + 1, y, x + width - (textLoc.x + stringWidth + 1), height)) [ CD ]
Line_60 $$ justification = LEFT-->Line_62 $$ justification = RIGHT[ FD ]
Line_4 $$ Border border = getBorder()-->Line_22 $$ if (border != null) [ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_15 $$ FontMetrics fm = g.getFontMetrics()[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_109 $$ g.setClip(saveClip)[ FD ]
Line_16 $$ int fontHeight = fm.getHeight()-->Line_53 $$ grooveRect.height -= fontHeight[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_4 $$ Border border = getBorder()[ CD ]
Line_85 $$ Rectangle saveClip = g.getClipBounds()-->Line_86 $$ clipRect.setBounds(saveClip)[ FD ]
Line_62 $$ justification = RIGHT-->Line_66 $$ justification = RIGHT[ FD ]
Line_5 $$ if (getTitle() == null || getTitle().length() == 0) -->Line_9 $$ return[ CD ]
Line_66 $$ justification = RIGHT-->Line_68 $$ justification = LEFT[ FD ]
Line_57 $$ int justification = getTitleJustification()-->Line_62 $$ justification = RIGHT[ FD ]
Line_87 $$ if (computeIntersection2(clipRect, x, y, textLoc.x - 1 - x, height)) -->Line_88 $$ g.setClip(clipRect)[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_89 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ FD ]
Line_57 $$ int justification = getTitleJustification()-->Line_66 $$ justification = RIGHT[ FD ]
Line_117 $$ if (index != -1 && index != myOriginalTitle.length() - 1 && index == myOriginalTitle.lastIndexOf('&') && g instanceof Graphics2D) -->Line_120 $$ ((Graphics2D) g).setPaint(getTitleColor())[ CD ]
Line_84 $$ Rectangle clipRect = new Rectangle()-->Line_92 $$ if (computeIntersection2(clipRect, textLoc.x + stringWidth + 1, y, x + width - (textLoc.x + stringWidth + 1), height)) [ FD ]
Line_19 $$ int diff-->Line_39 $$ grooveRect.height -= diff[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_114 $$ g.setColor(getTitleColor())[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_115 $$ g.drawString(getTitle(), textLoc.x, textLoc.y)[ FD ]
Line_37 $$ diff = Math.max(0, ((ascent / 2) + TEXT_SPACING) - EDGE_SPACING)-->Line_38 $$ grooveRect.y += diff[ FD ]
Line_104 $$ if (computeIntersection2(clipRect, textLoc.x - 1, y, stringWidth + 2, textLoc.y - ascent - y)) -->Line_105 $$ g.setClip(clipRect)[ CD ]
Line_60 $$ justification = LEFT-->Line_66 $$ justification = RIGHT[ FD ]
Line_30 $$ diff = ascent + descent + (Math.max(EDGE_SPACING, TEXT_SPACING * 2) - EDGE_SPACING)-->Line_38 $$ grooveRect.y += diff[ FD ]
Line_30 $$ diff = ascent + descent + (Math.max(EDGE_SPACING, TEXT_SPACING * 2) - EDGE_SPACING)-->Line_39 $$ grooveRect.height -= diff[ FD ]
Line_84 $$ Rectangle clipRect = new Rectangle()-->Line_97 $$ clipRect.setBounds(saveClip)[ FD ]
Line_96 $$ if (titlePos == TOP || titlePos == DEFAULT_POSITION) -->Line_104 $$ if (computeIntersection2(clipRect, textLoc.x - 1, y, stringWidth + 2, textLoc.y - ascent - y)) [ CD ]
Line_67 $$ if (justification == TRAILING) -->Line_68 $$ justification = LEFT[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_115 $$ g.drawString(getTitle(), textLoc.x, textLoc.y)[ CD ]
Line_83 $$ if (((titlePos == TOP || titlePos == DEFAULT_POSITION) && (grooveRect.y > textLoc.y - ascent)) || (titlePos == BOTTOM && (grooveRect.y + grooveRect.height < textLoc.y + descent))) -->Line_84 $$ Rectangle clipRect = new Rectangle()[ CD ]
Line_15 $$ FontMetrics fm = g.getFontMetrics()-->Line_118 $$ int x0 = fm.stringWidth(getTitle().substring(0, index))[ FD ]
Line_21 $$ Insets insets-->Line_25 $$ insets = new Insets(0, 0, 0, 0)[ FD ]
Line_61 $$ if (justification == TRAILING) -->Line_62 $$ justification = RIGHT[ CD ]
Line_83 $$ if (((titlePos == TOP || titlePos == DEFAULT_POSITION) && (grooveRect.y > textLoc.y - ascent)) || (titlePos == BOTTOM && (grooveRect.y + grooveRect.height < textLoc.y + descent))) -->Line_87 $$ if (computeIntersection2(clipRect, x, y, textLoc.x - 1 - x, height)) [ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_100 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ FD ]
Line_4 $$ Border border = getBorder()-->Line_111 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ FD ]
Line_37 $$ diff = Math.max(0, ((ascent / 2) + TEXT_SPACING) - EDGE_SPACING)-->Line_39 $$ grooveRect.height -= diff[ FD ]
Line_84 $$ Rectangle clipRect = new Rectangle()-->Line_87 $$ if (computeIntersection2(clipRect, x, y, textLoc.x - 1 - x, height)) [ FD ]
Line_15 $$ FontMetrics fm = g.getFontMetrics()-->Line_20 $$ int stringWidth = fm.stringWidth(getTitle())[ FD ]
Line_85 $$ Rectangle saveClip = g.getClipBounds()-->Line_109 $$ g.setClip(saveClip)[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_5 $$ if (getTitle() == null || getTitle().length() == 0) [ CD ]
Line_30 $$ diff = ascent + descent + (Math.max(EDGE_SPACING, TEXT_SPACING * 2) - EDGE_SPACING)-->Line_31 $$ grooveRect.y += diff[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_125 $$ g.setColor(color)[ FD ]
Line_85 $$ Rectangle saveClip = g.getClipBounds()-->Line_97 $$ clipRect.setBounds(saveClip)[ FD ]
Line_116 $$ final int index = myOriginalTitle.indexOf('&')-->Line_118 $$ int x0 = fm.stringWidth(getTitle().substring(0, index))[ FD ]
Line_4 $$ Border border = getBorder()-->Line_94 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ FD ]
Line_84 $$ Rectangle clipRect = new Rectangle()-->Line_103 $$ clipRect.setBounds(saveClip)[ FD ]
Line_23 $$ insets = border.getBorderInsets(c)-->Line_25 $$ insets = new Insets(0, 0, 0, 0)[ FD ]
Line_92 $$ if (computeIntersection2(clipRect, textLoc.x + stringWidth + 1, y, x + width - (textLoc.x + stringWidth + 1), height)) -->Line_93 $$ g.setClip(clipRect)[ CD ]
Line_117 $$ if (index != -1 && index != myOriginalTitle.length() - 1 && index == myOriginalTitle.lastIndexOf('&') && g instanceof Graphics2D) -->Line_118 $$ int x0 = fm.stringWidth(getTitle().substring(0, index))[ CD ]
Line_13 $$ Color color = g.getColor()-->Line_125 $$ g.setColor(color)[ FD ]
Line_19 $$ int diff-->Line_32 $$ grooveRect.height -= diff[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_17 $$ int descent = fm.getDescent()[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_14 $$ g.setFont(getFont(c))[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_124 $$ g.setFont(font)[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_85 $$ Rectangle saveClip = g.getClipBounds()[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_3 $$ Point textLoc = new Point()[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_23 $$ insets = border.getBorderInsets(c)[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_20 $$ int stringWidth = fm.stringWidth(getTitle())[ CD ]
Line_4 $$ Border border = getBorder()-->Line_6 $$ if (border != null) [ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_99 $$ g.setClip(clipRect)[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_19 $$ int diff[ CD ]
Line_66 $$ justification = RIGHT-->Line_67 $$ if (justification == TRAILING) [ FD ]
Line_104 $$ if (computeIntersection2(clipRect, textLoc.x - 1, y, stringWidth + 2, textLoc.y - ascent - y)) -->Line_106 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ CD ]
Line_19 $$ int diff-->Line_38 $$ grooveRect.y += diff[ FD ]
Line_85 $$ Rectangle saveClip = g.getClipBounds()-->Line_91 $$ clipRect.setBounds(saveClip)[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_121 $$ g.drawLine(textLoc.x + x0 - 1, textLoc.y + 1, textLoc.x + x1 - 1, textLoc.y + 1)[ FD ]
Line_4 $$ Border border = getBorder()-->Line_89 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ FD ]
Line_4 $$ Border border = getBorder()-->Line_82 $$ if (border != null) [ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_15 $$ FontMetrics fm = g.getFontMetrics()[ FD ]
Line_15 $$ FontMetrics fm = g.getFontMetrics()-->Line_16 $$ int fontHeight = fm.getHeight()[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_21 $$ Insets insets[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_106 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ FD ]
Line_57 $$ int justification = getTitleJustification()-->Line_61 $$ if (justification == TRAILING) [ FD ]
Line_59 $$ if (justification == LEADING || justification == DEFAULT_JUSTIFICATION) -->Line_61 $$ if (justification == TRAILING) [ CD ]
Line_59 $$ if (justification == LEADING || justification == DEFAULT_JUSTIFICATION) -->Line_60 $$ justification = LEFT[ CD ]
Line_117 $$ if (index != -1 && index != myOriginalTitle.length() - 1 && index == myOriginalTitle.lastIndexOf('&') && g instanceof Graphics2D) -->Line_122 $$ ((Graphics2D) g).setPaint(color)[ CD ]
Line_117 $$ if (index != -1 && index != myOriginalTitle.length() - 1 && index == myOriginalTitle.lastIndexOf('&') && g instanceof Graphics2D) -->Line_121 $$ g.drawLine(textLoc.x + x0 - 1, textLoc.y + 1, textLoc.x + x1 - 1, textLoc.y + 1)[ CD ]
Line_60 $$ justification = LEFT-->Line_61 $$ if (justification == TRAILING) [ FD ]
Line_60 $$ justification = LEFT-->Line_68 $$ justification = LEFT[ FD ]
Line_96 $$ if (titlePos == TOP || titlePos == DEFAULT_POSITION) -->Line_97 $$ clipRect.setBounds(saveClip)[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_111 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_93 $$ g.setClip(clipRect)[ FD ]
Line_117 $$ if (index != -1 && index != myOriginalTitle.length() - 1 && index == myOriginalTitle.lastIndexOf('&') && g instanceof Graphics2D) -->Line_119 $$ int x1 = fm.stringWidth(getTitle().substring(0, index + 1))[ CD ]
Line_30 $$ diff = ascent + descent + (Math.max(EDGE_SPACING, TEXT_SPACING * 2) - EDGE_SPACING)-->Line_32 $$ grooveRect.height -= diff[ FD ]
Line_83 $$ if (((titlePos == TOP || titlePos == DEFAULT_POSITION) && (grooveRect.y > textLoc.y - ascent)) || (titlePos == BOTTOM && (grooveRect.y + grooveRect.height < textLoc.y + descent))) -->Line_109 $$ g.setClip(saveClip)[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_14 $$ g.setFont(getFont(c))[ FD ]
Line_96 $$ if (titlePos == TOP || titlePos == DEFAULT_POSITION) -->Line_98 $$ if (computeIntersection2(clipRect, textLoc.x - 1, textLoc.y + descent, stringWidth + 2, y + height - textLoc.y - descent)) [ CD ]
Line_30 $$ diff = ascent + descent + (Math.max(EDGE_SPACING, TEXT_SPACING * 2) - EDGE_SPACING)-->Line_37 $$ diff = Math.max(0, ((ascent / 2) + TEXT_SPACING) - EDGE_SPACING)[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_12 $$ Font font = g.getFont()[ CD ]
Line_84 $$ Rectangle clipRect = new Rectangle()-->Line_88 $$ g.setClip(clipRect)[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_104 $$ if (computeIntersection2(clipRect, textLoc.x - 1, y, stringWidth + 2, textLoc.y - ascent - y)) [ FD ]
Line_12 $$ Font font = g.getFont()-->Line_124 $$ g.setFont(font)[ FD ]
Line_6 $$ if (border != null) -->Line_7 $$ border.paintBorder(c, g, x, y, width, height)[ CD ]
Line_98 $$ if (computeIntersection2(clipRect, textLoc.x - 1, textLoc.y + descent, stringWidth + 2, y + height - textLoc.y - descent)) -->Line_99 $$ g.setClip(clipRect)[ CD ]
Line_98 $$ if (computeIntersection2(clipRect, textLoc.x - 1, textLoc.y + descent, stringWidth + 2, y + height - textLoc.y - descent)) -->Line_100 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ CD ]
Line_19 $$ int diff-->Line_31 $$ grooveRect.y += diff[ FD ]
Line_96 $$ if (titlePos == TOP || titlePos == DEFAULT_POSITION) -->Line_103 $$ clipRect.setBounds(saveClip)[ CD ]
Line_13 $$ Color color = g.getColor()-->Line_122 $$ ((Graphics2D) g).setPaint(color)[ FD ]
Line_60 $$ justification = LEFT-->Line_67 $$ if (justification == TRAILING) [ FD ]
Line_84 $$ Rectangle clipRect = new Rectangle()-->Line_86 $$ clipRect.setBounds(saveClip)[ FD ]
Line_15 $$ FontMetrics fm = g.getFontMetrics()-->Line_17 $$ int descent = fm.getDescent()[ FD ]
Line_4 $$ Border border = getBorder()-->Line_23 $$ insets = border.getBorderInsets(c)[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_16 $$ int fontHeight = fm.getHeight()[ CD ]
Line_19 $$ int diff-->Line_30 $$ diff = ascent + descent + (Math.max(EDGE_SPACING, TEXT_SPACING * 2) - EDGE_SPACING)[ FD ]
Line_22 $$ if (border != null) -->Line_25 $$ insets = new Insets(0, 0, 0, 0)[ CD ]
Line_84 $$ Rectangle clipRect = new Rectangle()-->Line_93 $$ g.setClip(clipRect)[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_27 $$ int titlePos = getTitlePosition()[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_22 $$ if (border != null) [ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_82 $$ if (border != null) [ CD ]
Line_65 $$ if (justification == LEADING || justification == DEFAULT_JUSTIFICATION) -->Line_66 $$ justification = RIGHT[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_94 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ FD ]
Line_19 $$ int diff-->Line_37 $$ diff = Math.max(0, ((ascent / 2) + TEXT_SPACING) - EDGE_SPACING)[ FD ]
Line_85 $$ Rectangle saveClip = g.getClipBounds()-->Line_103 $$ clipRect.setBounds(saveClip)[ FD ]
Line_83 $$ if (((titlePos == TOP || titlePos == DEFAULT_POSITION) && (grooveRect.y > textLoc.y - ascent)) || (titlePos == BOTTOM && (grooveRect.y + grooveRect.height < textLoc.y + descent))) -->Line_111 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_57 $$ int justification = getTitleJustification()[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_92 $$ if (computeIntersection2(clipRect, textLoc.x + stringWidth + 1, y, x + width - (textLoc.x + stringWidth + 1), height)) [ FD ]
Line_84 $$ Rectangle clipRect = new Rectangle()-->Line_99 $$ g.setClip(clipRect)[ FD ]
Line_4 $$ Border border = getBorder()-->Line_106 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ FD ]
Line_57 $$ int justification = getTitleJustification()-->Line_68 $$ justification = LEFT[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_117 $$ if (index != -1 && index != myOriginalTitle.length() - 1 && index == myOriginalTitle.lastIndexOf('&') && g instanceof Graphics2D) [ CD ]
Line_65 $$ if (justification == LEADING || justification == DEFAULT_JUSTIFICATION) -->Line_67 $$ if (justification == TRAILING) [ CD ]
Line_16 $$ int fontHeight = fm.getHeight()-->Line_49 $$ grooveRect.height -= fontHeight / 2[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_58 $$ if (c.getComponentOrientation().isLeftToRight()) [ FD ]
Line_83 $$ if (((titlePos == TOP || titlePos == DEFAULT_POSITION) && (grooveRect.y > textLoc.y - ascent)) || (titlePos == BOTTOM && (grooveRect.y + grooveRect.height < textLoc.y + descent))) -->Line_91 $$ clipRect.setBounds(saveClip)[ CD ]
Line_62 $$ justification = RIGHT-->Line_68 $$ justification = LEFT[ FD ]
Line_4 $$ Border border = getBorder()-->Line_100 $$ border.paintBorder(c, g, grooveRect.x, grooveRect.y, grooveRect.width, grooveRect.height)[ FD ]
Line_58 $$ if (c.getComponentOrientation().isLeftToRight()) -->Line_65 $$ if (justification == LEADING || justification == DEFAULT_JUSTIFICATION) [ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_13 $$ Color color = g.getColor()[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_12 $$ Font font = g.getFont()[ FD ]
Line_22 $$ if (border != null) -->Line_23 $$ insets = border.getBorderInsets(c)[ CD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_88 $$ g.setClip(clipRect)[ FD ]
Line_2 $$ public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) -->Line_13 $$ Color color = g.getColor()[ CD ]
