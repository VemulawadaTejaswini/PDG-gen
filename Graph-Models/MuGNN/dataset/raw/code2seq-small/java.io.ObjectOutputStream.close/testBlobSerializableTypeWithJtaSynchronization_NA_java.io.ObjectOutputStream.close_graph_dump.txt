Line_12 $$ BlobSerializableType type = new BlobSerializableType(lobHandler, tm)-->Line_17 $$ assertEquals("content", type.nullSafeGet(rs, new String[] [ FD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_9 $$ oos.writeObject("content")[ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_22 $$ synch.afterCompletion(Status.STATUS_COMMITTED)[ CD ]
Line_12 $$ BlobSerializableType type = new BlobSerializableType(lobHandler, tm)-->Line_18 $$ type.nullSafeSet(ps, "content", 1)[ FD ]
Line_12 $$ BlobSerializableType type = new BlobSerializableType(lobHandler, tm)-->Line_15 $$ assertEquals(Serializable.class, type.returnedClass())[ FD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_19 $$ Synchronization synch = transaction.getSynchronization()[ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_4 $$ MockJtaTransaction transaction = new MockJtaTransaction()[ CD ]
Line_19 $$ Synchronization synch = transaction.getSynchronization()-->Line_21 $$ synch.beforeCompletion()[ FD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_3 $$ TransactionManager tm = mock(TransactionManager.class)[ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_15 $$ assertEquals(Serializable.class, type.returnedClass())[ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_5 $$ given(tm.getStatus()).willReturn(Status.STATUS_ACTIVE)[ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_10 $$ oos.close()[ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_16 $$ assertTrue(type.isMutable())[ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_7 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_21 $$ synch.beforeCompletion()[ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_11 $$ given(lobHandler.getBlobAsBinaryStream(rs, "column")).willReturn(new ByteArrayInputStream(baos.toByteArray()))[ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_13 $$ assertEquals(1, type.sqlTypes().length)[ CD ]
Line_8 $$ ObjectOutputStream oos = new ObjectOutputStream(baos)-->Line_10 $$ oos.close()[ FD ]
Line_12 $$ BlobSerializableType type = new BlobSerializableType(lobHandler, tm)-->Line_16 $$ assertTrue(type.isMutable())[ FD ]
Line_12 $$ BlobSerializableType type = new BlobSerializableType(lobHandler, tm)-->Line_14 $$ assertEquals(Types.BLOB, type.sqlTypes()[0])[ FD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_14 $$ assertEquals(Types.BLOB, type.sqlTypes()[0])[ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_23 $$ verify(lobCreator).setBlobAsBytes(ps, 1, baos.toByteArray())[ CD ]
Line_12 $$ BlobSerializableType type = new BlobSerializableType(lobHandler, tm)-->Line_13 $$ assertEquals(1, type.sqlTypes().length)[ FD ]
Line_7 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_23 $$ verify(lobCreator).setBlobAsBytes(ps, 1, baos.toByteArray())[ FD ]
Line_7 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_11 $$ given(lobHandler.getBlobAsBinaryStream(rs, "column")).willReturn(new ByteArrayInputStream(baos.toByteArray()))[ FD ]
Line_4 $$ MockJtaTransaction transaction = new MockJtaTransaction()-->Line_6 $$ given(tm.getTransaction()).willReturn(transaction)[ FD ]
Line_3 $$ TransactionManager tm = mock(TransactionManager.class)-->Line_6 $$ given(tm.getTransaction()).willReturn(transaction)[ FD ]
Line_3 $$ TransactionManager tm = mock(TransactionManager.class)-->Line_5 $$ given(tm.getStatus()).willReturn(Status.STATUS_ACTIVE)[ FD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_8 $$ ObjectOutputStream oos = new ObjectOutputStream(baos)[ CD ]
Line_4 $$ MockJtaTransaction transaction = new MockJtaTransaction()-->Line_19 $$ Synchronization synch = transaction.getSynchronization()[ FD ]
Line_19 $$ Synchronization synch = transaction.getSynchronization()-->Line_22 $$ synch.afterCompletion(Status.STATUS_COMMITTED)[ FD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_12 $$ BlobSerializableType type = new BlobSerializableType(lobHandler, tm)[ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_18 $$ type.nullSafeSet(ps, "content", 1)[ CD ]
Line_19 $$ Synchronization synch = transaction.getSynchronization()-->Line_20 $$ assertNotNull(synch)[ FD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_20 $$ assertNotNull(synch)[ CD ]
Line_8 $$ ObjectOutputStream oos = new ObjectOutputStream(baos)-->Line_9 $$ oos.writeObject("content")[ FD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_17 $$ assertEquals("content", type.nullSafeGet(rs, new String[] [ CD ]
Line_2 $$ public void testBlobSerializableTypeWithJtaSynchronization() throws Exception -->Line_6 $$ given(tm.getTransaction()).willReturn(transaction)[ CD ]
