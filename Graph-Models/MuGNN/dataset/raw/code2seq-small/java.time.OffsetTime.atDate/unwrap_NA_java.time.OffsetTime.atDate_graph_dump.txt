Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_9 $$ if (java.sql.Time.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_16 $$ if (Calendar.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_13 $$ if (Timestamp.class.isAssignableFrom(type)) [ FD ]
Line_9 $$ if (java.sql.Time.class.isAssignableFrom(type)) -->Line_10 $$ return (X) java.sql.Time.valueOf(offsetTime.toLocalTime())[ CD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_20 $$ if (Long.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_6 $$ if (OffsetTime.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_3 $$ if (offsetTime == null) [ FD ]
Line_16 $$ if (Calendar.class.isAssignableFrom(type)) -->Line_17 $$ return (X) GregorianCalendar.from(zonedDateTime)[ CD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_23 $$ if (java.util.Date.class.isAssignableFrom(type)) [ FD ]
Line_23 $$ if (java.util.Date.class.isAssignableFrom(type)) -->Line_24 $$ return (X) java.util.Date.from(instant)[ CD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_6 $$ if (OffsetTime.class.isAssignableFrom(type)) [ FD ]
Line_19 $$ final Instant instant = zonedDateTime.toInstant()-->Line_21 $$ return (X) Long.valueOf(instant.toEpochMilli())[ FD ]
Line_13 $$ if (Timestamp.class.isAssignableFrom(type)) -->Line_14 $$ return (X) Timestamp.valueOf(zonedDateTime.toLocalDateTime())[ CD ]
Line_19 $$ final Instant instant = zonedDateTime.toInstant()-->Line_24 $$ return (X) java.util.Date.from(instant)[ FD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_20 $$ if (Long.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_26 $$ throw unknownUnwrap(type)[ FD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_12 $$ final ZonedDateTime zonedDateTime = offsetTime.atDate(LocalDate.of(1970, 1, 1)).toZonedDateTime()[ FD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_19 $$ final Instant instant = zonedDateTime.toInstant()[ CD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_10 $$ return (X) java.sql.Time.valueOf(offsetTime.toLocalTime())[ FD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_3 $$ if (offsetTime == null) [ CD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_9 $$ if (java.sql.Time.class.isAssignableFrom(type)) [ FD ]
Line_6 $$ if (OffsetTime.class.isAssignableFrom(type)) -->Line_7 $$ return (X) offsetTime[ CD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_12 $$ final ZonedDateTime zonedDateTime = offsetTime.atDate(LocalDate.of(1970, 1, 1)).toZonedDateTime()[ CD ]
Line_3 $$ if (offsetTime == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_13 $$ if (Timestamp.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_16 $$ if (Calendar.class.isAssignableFrom(type)) [ FD ]
Line_12 $$ final ZonedDateTime zonedDateTime = offsetTime.atDate(LocalDate.of(1970, 1, 1)).toZonedDateTime()-->Line_17 $$ return (X) GregorianCalendar.from(zonedDateTime)[ FD ]
Line_12 $$ final ZonedDateTime zonedDateTime = offsetTime.atDate(LocalDate.of(1970, 1, 1)).toZonedDateTime()-->Line_19 $$ final Instant instant = zonedDateTime.toInstant()[ FD ]
Line_2 $$ public <X> X unwrap(OffsetTime offsetTime, Class<X> type, WrapperOptions options) -->Line_23 $$ if (java.util.Date.class.isAssignableFrom(type)) [ CD ]
Line_20 $$ if (Long.class.isAssignableFrom(type)) -->Line_21 $$ return (X) Long.valueOf(instant.toEpochMilli())[ CD ]
Line_12 $$ final ZonedDateTime zonedDateTime = offsetTime.atDate(LocalDate.of(1970, 1, 1)).toZonedDateTime()-->Line_14 $$ return (X) Timestamp.valueOf(zonedDateTime.toLocalDateTime())[ FD ]
