Line_23 $$ for (Map.Entry<Object, Collection<DfaMemoryStateImpl>> entry : groups.entrySet()) -->Line_24 $$ memoryStates.addAll(mergeGroup((List<DfaMemoryStateImpl>) entry.getValue()))[ FD ]
Line_5 $$ final Instruction instruction = state.getInstruction()-->Line_14 $$ mySet.remove(Pair.create(instruction, anotherState))[ FD ]
Line_22 $$ memoryStates = ContainerUtil.newArrayList()-->Line_24 $$ memoryStates.addAll(mergeGroup((List<DfaMemoryStateImpl>) entry.getValue()))[ FD ]
Line_17 $$ if (memoryStates.size() > 1 && joinInstructions.contains(instruction)) -->Line_18 $$ MultiMap<Object, DfaMemoryStateImpl> groups = MultiMap.create()[ CD ]
Line_10 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()-->Line_24 $$ memoryStates.addAll(mergeGroup((List<DfaMemoryStateImpl>) entry.getValue()))[ FD ]
Line_4 $$ DfaInstructionState state = myQueue.poll()-->Line_9 $$ return Collections.singletonList(state)[ FD ]
Line_19 $$ for (DfaMemoryStateImpl memoryState : memoryStates) -->Line_20 $$ groups.putValue(memoryState.getSuperficialKey(), memoryState)[ FD ]
Line_10 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()-->Line_27 $$ return ContainerUtil.map(memoryStates, new Function<DfaMemoryStateImpl, DfaInstructionState>() [ FD ]
Line_27 $$ return ContainerUtil.map(memoryStates, new Function<DfaMemoryStateImpl, DfaInstructionState>() -->Line_31 $$ return new DfaInstructionState(instruction, state)[ CD ]
Line_13 $$ DfaMemoryState anotherState = myQueue.poll().getMemoryState()-->Line_14 $$ mySet.remove(Pair.create(instruction, anotherState))[ FD ]
Line_4 $$ DfaInstructionState state = myQueue.poll()-->Line_11 $$ memoryStates.add((DfaMemoryStateImpl) state.getMemoryState())[ FD ]
Line_12 $$ while (!myQueue.isEmpty() && myQueue.peek().compareTo(state) == 0) -->Line_15 $$ memoryStates.add((DfaMemoryStateImpl) anotherState)[ CD ]
Line_4 $$ DfaInstructionState state = myQueue.poll()-->Line_8 $$ if (next == null || next.compareTo(state) != 0)[ FD ]
Line_18 $$ MultiMap<Object, DfaMemoryStateImpl> groups = MultiMap.create()-->Line_23 $$ for (Map.Entry<Object, Collection<DfaMemoryStateImpl>> entry : groups.entrySet()) [ FD ]
Line_4 $$ DfaInstructionState state = myQueue.poll()-->Line_12 $$ while (!myQueue.isEmpty() && myQueue.peek().compareTo(state) == 0) [ FD ]
Line_7 $$ DfaInstructionState next = myQueue.peek()-->Line_8 $$ if (next == null || next.compareTo(state) != 0)[ FD ]
Line_17 $$ if (memoryStates.size() > 1 && joinInstructions.contains(instruction)) -->Line_22 $$ memoryStates = ContainerUtil.newArrayList()[ CD ]
Line_18 $$ MultiMap<Object, DfaMemoryStateImpl> groups = MultiMap.create()-->Line_20 $$ groups.putValue(memoryState.getSuperficialKey(), memoryState)[ FD ]
Line_12 $$ while (!myQueue.isEmpty() && myQueue.peek().compareTo(state) == 0) -->Line_13 $$ DfaMemoryState anotherState = myQueue.poll().getMemoryState()[ CD ]
Line_5 $$ final Instruction instruction = state.getInstruction()-->Line_6 $$ mySet.remove(Pair.create(instruction, state.getMemoryState()))[ FD ]
Line_8 $$ if (next == null || next.compareTo(state) != 0)-->Line_9 $$ return Collections.singletonList(state)[ CD ]
Line_5 $$ final Instruction instruction = state.getInstruction()-->Line_17 $$ if (memoryStates.size() > 1 && joinInstructions.contains(instruction)) [ FD ]
Line_4 $$ DfaInstructionState state = myQueue.poll()-->Line_6 $$ mySet.remove(Pair.create(instruction, state.getMemoryState()))[ FD ]
Line_10 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()-->Line_11 $$ memoryStates.add((DfaMemoryStateImpl) state.getMemoryState())[ FD ]
Line_12 $$ while (!myQueue.isEmpty() && myQueue.peek().compareTo(state) == 0) -->Line_14 $$ mySet.remove(Pair.create(instruction, anotherState))[ CD ]
Line_10 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()-->Line_15 $$ memoryStates.add((DfaMemoryStateImpl) anotherState)[ FD ]
Line_10 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()-->Line_17 $$ if (memoryStates.size() > 1 && joinInstructions.contains(instruction)) [ FD ]
Line_22 $$ memoryStates = ContainerUtil.newArrayList()-->Line_27 $$ return ContainerUtil.map(memoryStates, new Function<DfaMemoryStateImpl, DfaInstructionState>() [ FD ]
Line_10 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()-->Line_22 $$ memoryStates = ContainerUtil.newArrayList()[ FD ]
Line_4 $$ DfaInstructionState state = myQueue.poll()-->Line_5 $$ final Instruction instruction = state.getInstruction()[ FD ]
