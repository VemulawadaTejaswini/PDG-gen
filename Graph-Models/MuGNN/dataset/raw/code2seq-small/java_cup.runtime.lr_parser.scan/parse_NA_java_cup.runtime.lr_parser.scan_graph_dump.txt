Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_50 $$ return lhs_sym[ CD ]
Line_3 $$ int act-->Line_27 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)[ FD ]
Line_15 $$ for (_done_parsing = false; !_done_parsing; ) -->Line_18 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)[ CD ]
Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_10 $$ user_init()[ CD ]
Line_4 $$ Symbol lhs_sym = null-->Line_37 $$ stack.push(lhs_sym)[ FD ]
Line_3 $$ int act-->Line_28 $$ lhs_sym_num = production_tab[(-act) - 1][0][ FD ]
Line_42 $$ if (!error_recovery(false)) -->Line_44 $$ done_parsing()[ CD ]
Line_18 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_28 $$ lhs_sym_num = production_tab[(-act) - 1][0][ FD ]
Line_27 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)-->Line_46 $$ lhs_sym = (Symbol) stack.peek()[ FD ]
Line_4 $$ Symbol lhs_sym = null-->Line_46 $$ lhs_sym = (Symbol) stack.peek()[ FD ]
Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_6 $$ production_tab = production_table()[ CD ]
Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_26 $$ if (act < 0) [ FD ]
Line_3 $$ int act-->Line_19 $$ if (act > 0) [ FD ]
Line_19 $$ if (act > 0) -->Line_20 $$ cur_token.parse_state = act - 1[ CD ]
Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_8 $$ reduce_tab = reduce_table()[ CD ]
Line_5 $$ short handle_size, lhs_sym_num-->Line_30 $$ for (int i = 0; i < handle_size; i++) [ FD ]
Line_27 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)-->Line_37 $$ stack.push(lhs_sym)[ FD ]
Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_29 $$ handle_size = production_tab[(-act) - 1][1][ FD ]
Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_7 $$ action_tab = action_table()[ CD ]
Line_18 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_20 $$ cur_token.parse_state = act - 1[ FD ]
Line_15 $$ for (_done_parsing = false; !_done_parsing; ) -->Line_19 $$ if (act > 0) [ CD ]
Line_18 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_26 $$ if (act < 0) [ FD ]
Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_27 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)[ FD ]
Line_26 $$ if (act < 0) -->Line_28 $$ lhs_sym_num = production_tab[(-act) - 1][0][ CD ]
Line_46 $$ lhs_sym = (Symbol) stack.peek()-->Line_37 $$ stack.push(lhs_sym)[ FD ]
Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_35 $$ lhs_sym.parse_state = act[ FD ]
Line_28 $$ lhs_sym_num = production_tab[(-act) - 1][0]-->Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)[ FD ]
Line_15 $$ for (_done_parsing = false; !_done_parsing; ) -->Line_16 $$ if (cur_token.used_by_parser)[ CD ]
Line_5 $$ short handle_size, lhs_sym_num-->Line_29 $$ handle_size = production_tab[(-act) - 1][1][ FD ]
Line_26 $$ if (act < 0) -->Line_37 $$ stack.push(lhs_sym)[ CD ]
Line_40 $$ if (act == 0) -->Line_41 $$ syntax_error(cur_token)[ CD ]
Line_18 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_27 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)[ FD ]
Line_18 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)[ FD ]
Line_18 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_40 $$ if (act == 0) [ FD ]
Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_40 $$ if (act == 0) [ FD ]
Line_26 $$ if (act < 0) -->Line_30 $$ for (int i = 0; i < handle_size; i++) [ CD ]
Line_3 $$ int act-->Line_29 $$ handle_size = production_tab[(-act) - 1][1][ FD ]
Line_3 $$ int act-->Line_20 $$ cur_token.parse_state = act - 1[ FD ]
Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_19 $$ if (act > 0) [ FD ]
Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_13 $$ stack.push(getSymbolFactory().startSymbol("START", 0, start_state()))[ CD ]
Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_12 $$ stack.removeAllElements()[ CD ]
Line_3 $$ int act-->Line_18 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)[ FD ]
Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_5 $$ short handle_size, lhs_sym_num[ CD ]
Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_4 $$ Symbol lhs_sym = null[ CD ]
Line_19 $$ if (act > 0) -->Line_21 $$ cur_token.used_by_parser = true[ CD ]
Line_3 $$ int act-->Line_26 $$ if (act < 0) [ FD ]
Line_18 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_29 $$ handle_size = production_tab[(-act) - 1][1][ FD ]
Line_26 $$ if (act < 0) -->Line_40 $$ if (act == 0) [ CD ]
Line_3 $$ int act-->Line_40 $$ if (act == 0) [ FD ]
Line_40 $$ if (act == 0) -->Line_42 $$ if (!error_recovery(false)) [ CD ]
Line_18 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_35 $$ lhs_sym.parse_state = act[ FD ]
Line_26 $$ if (act < 0) -->Line_36 $$ lhs_sym.used_by_parser = true[ CD ]
Line_5 $$ short handle_size, lhs_sym_num-->Line_28 $$ lhs_sym_num = production_tab[(-act) - 1][0][ FD ]
Line_18 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_19 $$ if (act > 0) [ FD ]
Line_42 $$ if (!error_recovery(false)) -->Line_46 $$ lhs_sym = (Symbol) stack.peek()[ CD ]
Line_19 $$ if (act > 0) -->Line_26 $$ if (act < 0) [ CD ]
Line_19 $$ if (act > 0) -->Line_22 $$ stack.push(cur_token)[ CD ]
Line_26 $$ if (act < 0) -->Line_27 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)[ CD ]
Line_42 $$ if (!error_recovery(false)) -->Line_43 $$ unrecovered_syntax_error(cur_token)[ CD ]
Line_26 $$ if (act < 0) -->Line_35 $$ lhs_sym.parse_state = act[ CD ]
Line_26 $$ if (act < 0) -->Line_29 $$ handle_size = production_tab[(-act) - 1][1][ CD ]
Line_3 $$ int act-->Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)[ FD ]
Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_9 $$ init_actions()[ CD ]
Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_3 $$ int act[ CD ]
Line_26 $$ if (act < 0) -->Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)[ CD ]
Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_28 $$ lhs_sym_num = production_tab[(-act) - 1][0][ FD ]
Line_4 $$ Symbol lhs_sym = null-->Line_27 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)[ FD ]
Line_29 $$ handle_size = production_tab[(-act) - 1][1]-->Line_30 $$ for (int i = 0; i < handle_size; i++) [ FD ]
Line_3 $$ int act-->Line_35 $$ lhs_sym.parse_state = act[ FD ]
Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_15 $$ for (_done_parsing = false; !_done_parsing; ) [ CD ]
Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_20 $$ cur_token.parse_state = act - 1[ FD ]
Line_19 $$ if (act > 0) -->Line_24 $$ cur_token = scan()[ CD ]
Line_30 $$ for (int i = 0; i < handle_size; i++) -->Line_31 $$ stack.pop()[ CD ]
Line_5 $$ short handle_size, lhs_sym_num-->Line_34 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)[ FD ]
Line_2 $$ public Symbol parse() throws java.lang.Exception -->Line_11 $$ cur_token = scan()[ CD ]
