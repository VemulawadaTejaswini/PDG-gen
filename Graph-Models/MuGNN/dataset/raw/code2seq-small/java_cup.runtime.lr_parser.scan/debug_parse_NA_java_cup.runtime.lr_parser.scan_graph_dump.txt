Line_5 $$ short handle_size, lhs_sym_num-->Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)[ FD ]
Line_3 $$ int act-->Line_32 $$ lhs_sym_num = production_tab[(-act) - 1][0][ FD ]
Line_30 $$ if (act < 0) -->Line_41 $$ lhs_sym.parse_state = act[ CD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_9 $$ debug_message("# Initializing parser")[ CD ]
Line_32 $$ lhs_sym_num = production_tab[(-act) - 1][0]-->Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)[ FD ]
Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_21 $$ if (act > 0) [ FD ]
Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_41 $$ lhs_sym.parse_state = act[ FD ]
Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_34 $$ debug_reduce((-act) - 1, lhs_sym_num, handle_size)[ FD ]
Line_3 $$ int act-->Line_41 $$ lhs_sym.parse_state = act[ FD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_11 $$ user_init()[ CD ]
Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_31 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)[ FD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_4 $$ Symbol lhs_sym = null[ CD ]
Line_21 $$ if (act > 0) -->Line_27 $$ cur_token = scan()[ CD ]
Line_30 $$ if (act < 0) -->Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)[ CD ]
Line_49 $$ if (!error_recovery(true)) -->Line_53 $$ lhs_sym = (Symbol) stack.peek()[ CD ]
Line_17 $$ for (_done_parsing = false; !_done_parsing; ) -->Line_18 $$ if (cur_token.used_by_parser)[ CD ]
Line_30 $$ if (act < 0) -->Line_35 $$ for (int i = 0; i < handle_size; i++) [ CD ]
Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)[ FD ]
Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_33 $$ handle_size = production_tab[(-act) - 1][1][ FD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_14 $$ stack.removeAllElements()[ CD ]
Line_5 $$ short handle_size, lhs_sym_num-->Line_35 $$ for (int i = 0; i < handle_size; i++) [ FD ]
Line_53 $$ lhs_sym = (Symbol) stack.peek()-->Line_43 $$ stack.push(lhs_sym)[ FD ]
Line_21 $$ if (act > 0) -->Line_23 $$ cur_token.used_by_parser = true[ CD ]
Line_3 $$ int act-->Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)[ FD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_5 $$ short handle_size, lhs_sym_num[ CD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_13 $$ debug_message("# Current Symbol is #" + cur_token.sym)[ CD ]
Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_22 $$ cur_token.parse_state = act - 1[ FD ]
Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_33 $$ handle_size = production_tab[(-act) - 1][1][ FD ]
Line_30 $$ if (act < 0) -->Line_47 $$ if (act == 0) [ CD ]
Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_21 $$ if (act > 0) [ FD ]
Line_31 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)-->Line_53 $$ lhs_sym = (Symbol) stack.peek()[ FD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_6 $$ production_tab = production_table()[ CD ]
Line_33 $$ handle_size = production_tab[(-act) - 1][1]-->Line_35 $$ for (int i = 0; i < handle_size; i++) [ FD ]
Line_3 $$ int act-->Line_21 $$ if (act > 0) [ FD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_15 $$ stack.push(getSymbolFactory().startSymbol("START", 0, start_state()))[ CD ]
Line_3 $$ int act-->Line_22 $$ cur_token.parse_state = act - 1[ FD ]
Line_17 $$ for (_done_parsing = false; !_done_parsing; ) -->Line_21 $$ if (act > 0) [ CD ]
Line_30 $$ if (act < 0) -->Line_42 $$ lhs_sym.used_by_parser = true[ CD ]
Line_49 $$ if (!error_recovery(true)) -->Line_50 $$ unrecovered_syntax_error(cur_token)[ CD ]
Line_5 $$ short handle_size, lhs_sym_num-->Line_33 $$ handle_size = production_tab[(-act) - 1][1][ FD ]
Line_30 $$ if (act < 0) -->Line_32 $$ lhs_sym_num = production_tab[(-act) - 1][0][ CD ]
Line_30 $$ if (act < 0) -->Line_43 $$ stack.push(lhs_sym)[ CD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_17 $$ for (_done_parsing = false; !_done_parsing; ) [ CD ]
Line_21 $$ if (act > 0) -->Line_22 $$ cur_token.parse_state = act - 1[ CD ]
Line_30 $$ if (act < 0) -->Line_34 $$ debug_reduce((-act) - 1, lhs_sym_num, handle_size)[ CD ]
Line_3 $$ int act-->Line_34 $$ debug_reduce((-act) - 1, lhs_sym_num, handle_size)[ FD ]
Line_30 $$ if (act < 0) -->Line_45 $$ debug_message("# Goto state #" + act)[ CD ]
Line_3 $$ int act-->Line_30 $$ if (act < 0) [ FD ]
Line_4 $$ Symbol lhs_sym = null-->Line_53 $$ lhs_sym = (Symbol) stack.peek()[ FD ]
Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_31 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)[ FD ]
Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_47 $$ if (act == 0) [ FD ]
Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_22 $$ cur_token.parse_state = act - 1[ FD ]
Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_30 $$ if (act < 0) [ FD ]
Line_21 $$ if (act > 0) -->Line_30 $$ if (act < 0) [ CD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_7 $$ action_tab = action_table()[ CD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_57 $$ return lhs_sym[ CD ]
Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_47 $$ if (act == 0) [ FD ]
Line_21 $$ if (act > 0) -->Line_28 $$ debug_message("# Current token is " + cur_token)[ CD ]
Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_32 $$ lhs_sym_num = production_tab[(-act) - 1][0][ FD ]
Line_35 $$ for (int i = 0; i < handle_size; i++) -->Line_36 $$ stack.pop()[ CD ]
Line_32 $$ lhs_sym_num = production_tab[(-act) - 1][0]-->Line_34 $$ debug_reduce((-act) - 1, lhs_sym_num, handle_size)[ FD ]
Line_3 $$ int act-->Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)[ FD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_10 $$ init_actions()[ CD ]
Line_17 $$ for (_done_parsing = false; !_done_parsing; ) -->Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)[ CD ]
Line_21 $$ if (act > 0) -->Line_25 $$ stack.push(cur_token)[ CD ]
Line_3 $$ int act-->Line_31 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)[ FD ]
Line_3 $$ int act-->Line_33 $$ handle_size = production_tab[(-act) - 1][1][ FD ]
Line_30 $$ if (act < 0) -->Line_40 $$ debug_message("# Reduce rule: top state " + ((Symbol) stack.peek()).parse_state + ", lhs sym " + lhs_sym_num + " -> state " + act)[ CD ]
Line_5 $$ short handle_size, lhs_sym_num-->Line_34 $$ debug_reduce((-act) - 1, lhs_sym_num, handle_size)[ FD ]
Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_41 $$ lhs_sym.parse_state = act[ FD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_8 $$ reduce_tab = reduce_table()[ CD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_12 $$ cur_token = scan()[ CD ]
Line_21 $$ if (act > 0) -->Line_24 $$ debug_shift(cur_token)[ CD ]
Line_2 $$ public Symbol debug_parse() throws java.lang.Exception -->Line_3 $$ int act[ CD ]
Line_49 $$ if (!error_recovery(true)) -->Line_51 $$ done_parsing()[ CD ]
Line_30 $$ if (act < 0) -->Line_33 $$ handle_size = production_tab[(-act) - 1][1][ CD ]
Line_30 $$ if (act < 0) -->Line_31 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)[ CD ]
Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_30 $$ if (act < 0) [ FD ]
Line_3 $$ int act-->Line_47 $$ if (act == 0) [ FD ]
Line_31 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)-->Line_43 $$ stack.push(lhs_sym)[ FD ]
Line_39 $$ act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num)-->Line_32 $$ lhs_sym_num = production_tab[(-act) - 1][0][ FD ]
Line_47 $$ if (act == 0) -->Line_48 $$ syntax_error(cur_token)[ CD ]
Line_33 $$ handle_size = production_tab[(-act) - 1][1]-->Line_34 $$ debug_reduce((-act) - 1, lhs_sym_num, handle_size)[ FD ]
Line_5 $$ short handle_size, lhs_sym_num-->Line_32 $$ lhs_sym_num = production_tab[(-act) - 1][0][ FD ]
Line_4 $$ Symbol lhs_sym = null-->Line_43 $$ stack.push(lhs_sym)[ FD ]
Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym)-->Line_34 $$ debug_reduce((-act) - 1, lhs_sym_num, handle_size)[ FD ]
Line_47 $$ if (act == 0) -->Line_49 $$ if (!error_recovery(true)) [ CD ]
Line_4 $$ Symbol lhs_sym = null-->Line_31 $$ lhs_sym = do_action((-act) - 1, this, stack, tos)[ FD ]
