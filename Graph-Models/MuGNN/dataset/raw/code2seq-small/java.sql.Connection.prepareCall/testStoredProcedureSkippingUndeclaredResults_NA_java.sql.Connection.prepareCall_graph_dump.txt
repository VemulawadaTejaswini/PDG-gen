Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_4 $$ given(resultSet.next()).willReturn(true, true, false)[ CD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_11 $$ given(connection.prepareCall("[ CD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_14 $$ StoredProcedureWithResultSetMapped sproc = new StoredProcedureWithResultSetMapped(jdbcTemplate)[ CD ]
Line_14 $$ StoredProcedureWithResultSetMapped sproc = new StoredProcedureWithResultSetMapped(jdbcTemplate)-->Line_15 $$ Map<String, Object> res = sproc.execute()[ FD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_5 $$ given(resultSet.getString(2)).willReturn("Foo", "Bar")[ CD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_12 $$ JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource)[ CD ]
Line_3 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_5 $$ given(resultSet.getString(2)).willReturn("Foo", "Bar")[ FD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_10 $$ given(callableStatement.getUpdateCount()).willReturn(-1, -1)[ CD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_13 $$ jdbcTemplate.setSkipUndeclaredResults(true)[ CD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_9 $$ given(callableStatement.getMoreResults()).willReturn(true, false)[ CD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_3 $$ ResultSet resultSet = mock(ResultSet.class)[ CD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_16 $$ assertEquals("incorrect number of returns", 1, res.size())[ CD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_8 $$ given(callableStatement.getResultSet()).willReturn(resultSet)[ CD ]
Line_15 $$ Map<String, Object> res = sproc.execute()-->Line_17 $$ List<String> rs1 = (List<String>) res.get("rs")[ FD ]
Line_17 $$ List<String> rs1 = (List<String>) res.get("rs")-->Line_18 $$ assertEquals(2, rs1.size())[ FD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_19 $$ assertEquals("Foo", rs1.get(0))[ CD ]
Line_3 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_21 $$ verify(resultSet).close()[ FD ]
Line_12 $$ JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource)-->Line_13 $$ jdbcTemplate.setSkipUndeclaredResults(true)[ FD ]
Line_3 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_8 $$ given(callableStatement.getResultSet()).willReturn(resultSet)[ FD ]
Line_17 $$ List<String> rs1 = (List<String>) res.get("rs")-->Line_19 $$ assertEquals("Foo", rs1.get(0))[ FD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_15 $$ Map<String, Object> res = sproc.execute()[ CD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_7 $$ given(callableStatement.getUpdateCount()).willReturn(-1)[ CD ]
Line_15 $$ Map<String, Object> res = sproc.execute()-->Line_16 $$ assertEquals("incorrect number of returns", 1, res.size())[ FD ]
Line_3 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_4 $$ given(resultSet.next()).willReturn(true, true, false)[ FD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_17 $$ List<String> rs1 = (List<String>) res.get("rs")[ CD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_21 $$ verify(resultSet).close()[ CD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_18 $$ assertEquals(2, rs1.size())[ CD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_20 $$ assertEquals("Bar", rs1.get(1))[ CD ]
Line_17 $$ List<String> rs1 = (List<String>) res.get("rs")-->Line_20 $$ assertEquals("Bar", rs1.get(1))[ FD ]
Line_2 $$ public void testStoredProcedureSkippingUndeclaredResults() throws Exception -->Line_6 $$ given(callableStatement.execute()).willReturn(true)[ CD ]
