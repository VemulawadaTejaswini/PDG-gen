Line_20 $$ int sqlColIndx = 1-->Line_27 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType(), declaredParam.getTypeName())[ FD ]
Line_20 $$ int sqlColIndx = 1-->Line_36 $$ StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue)[ FD ]
Line_10 $$ CallableStatement cs = null-->Line_32 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType())[ FD ]
Line_23 $$ Object inValue = this.inParameters.get(declaredParam.getName())-->Line_36 $$ StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue)[ FD ]
Line_24 $$ if (declaredParam instanceof ResultSetSupportingSqlParameter) -->Line_40 $$ if (!this.inParameters.containsKey(declaredParam.getName())) [ CD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_27 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType(), declaredParam.getTypeName())[ FD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_26 $$ if (declaredParam.getTypeName() != null) [ FD ]
Line_22 $$ if (!declaredParam.isResultsParameter()) -->Line_23 $$ Object inValue = this.inParameters.get(declaredParam.getName())[ CD ]
Line_2 $$ public CallableStatement createCallableStatement(Connection con) throws SQLException -->Line_20 $$ int sqlColIndx = 1[ CD ]
Line_24 $$ if (declaredParam instanceof ResultSetSupportingSqlParameter) -->Line_25 $$ if (declaredParam instanceof SqlOutParameter) [ CD ]
Line_22 $$ if (!declaredParam.isResultsParameter()) -->Line_24 $$ if (declaredParam instanceof ResultSetSupportingSqlParameter) [ CD ]
Line_16 $$ CallableStatement csToUse = cs-->Line_36 $$ StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue)[ FD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_24 $$ if (declaredParam instanceof ResultSetSupportingSqlParameter) [ FD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_35 $$ if (declaredParam.isInputValueProvided()) [ FD ]
Line_18 $$ csToUse = nativeJdbcExtractor.getNativeCallableStatement(cs)-->Line_43 $$ StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue)[ FD ]
Line_10 $$ CallableStatement cs = null-->Line_12 $$ cs = con.prepareCall(callString)[ FD ]
Line_2 $$ public CallableStatement createCallableStatement(Connection con) throws SQLException -->Line_4 $$ this.inParameters = this.inParameterMapper.createMap(con)[ FD ]
Line_2 $$ public CallableStatement createCallableStatement(Connection con) throws SQLException -->Line_16 $$ CallableStatement csToUse = cs[ CD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_41 $$ throw new InvalidDataAccessApiUsageException("Required input parameter '" + declaredParam.getName() + "' is missing")[ FD ]
Line_26 $$ if (declaredParam.getTypeName() != null) -->Line_27 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType(), declaredParam.getTypeName())[ CD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_43 $$ StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue)[ FD ]
Line_20 $$ int sqlColIndx = 1-->Line_45 $$ sqlColIndx++[ FD ]
Line_24 $$ if (declaredParam instanceof ResultSetSupportingSqlParameter) -->Line_43 $$ StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue)[ CD ]
Line_14 $$ cs = con.prepareCall(callString, resultSetType, updatableResults ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY)-->Line_27 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType(), declaredParam.getTypeName())[ FD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_40 $$ if (!this.inParameters.containsKey(declaredParam.getName())) [ FD ]
Line_25 $$ if (declaredParam instanceof SqlOutParameter) -->Line_26 $$ if (declaredParam.getTypeName() != null) [ CD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_23 $$ Object inValue = this.inParameters.get(declaredParam.getName())[ FD ]
Line_2 $$ public CallableStatement createCallableStatement(Connection con) throws SQLException -->Line_17 $$ if (nativeJdbcExtractor != null) [ CD ]
Line_10 $$ CallableStatement cs = null-->Line_18 $$ csToUse = nativeJdbcExtractor.getNativeCallableStatement(cs)[ FD ]
Line_12 $$ cs = con.prepareCall(callString)-->Line_14 $$ cs = con.prepareCall(callString, resultSetType, updatableResults ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY)[ FD ]
Line_2 $$ public CallableStatement createCallableStatement(Connection con) throws SQLException -->Line_3 $$ if (this.inParameterMapper != null) [ CD ]
Line_10 $$ CallableStatement cs = null-->Line_27 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType(), declaredParam.getTypeName())[ FD ]
Line_25 $$ if (declaredParam instanceof SqlOutParameter) -->Line_35 $$ if (declaredParam.isInputValueProvided()) [ CD ]
Line_35 $$ if (declaredParam.isInputValueProvided()) -->Line_36 $$ StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue)[ CD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_29 $$ if (declaredParam.getScale() != null) [ FD ]
Line_14 $$ cs = con.prepareCall(callString, resultSetType, updatableResults ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY)-->Line_18 $$ csToUse = nativeJdbcExtractor.getNativeCallableStatement(cs)[ FD ]
Line_11 $$ if (resultSetType == ResultSet.TYPE_FORWARD_ONLY && !updatableResults) -->Line_12 $$ cs = con.prepareCall(callString)[ CD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_30 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType(), declaredParam.getScale())[ FD ]
Line_20 $$ int sqlColIndx = 1-->Line_43 $$ StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue)[ FD ]
Line_23 $$ Object inValue = this.inParameters.get(declaredParam.getName())-->Line_43 $$ StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue)[ FD ]
Line_3 $$ if (this.inParameterMapper != null) -->Line_6 $$ if (this.inParameters == null) [ CD ]
Line_2 $$ public CallableStatement createCallableStatement(Connection con) throws SQLException -->Line_12 $$ cs = con.prepareCall(callString)[ FD ]
Line_3 $$ if (this.inParameterMapper != null) -->Line_4 $$ this.inParameters = this.inParameterMapper.createMap(con)[ CD ]
Line_12 $$ cs = con.prepareCall(callString)-->Line_30 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType(), declaredParam.getScale())[ FD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_22 $$ if (!declaredParam.isResultsParameter()) [ FD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_32 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType())[ FD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_36 $$ StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue)[ FD ]
Line_14 $$ cs = con.prepareCall(callString, resultSetType, updatableResults ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY)-->Line_32 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType())[ FD ]
Line_12 $$ cs = con.prepareCall(callString)-->Line_32 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType())[ FD ]
Line_2 $$ public CallableStatement createCallableStatement(Connection con) throws SQLException -->Line_14 $$ cs = con.prepareCall(callString, resultSetType, updatableResults ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY)[ FD ]
Line_10 $$ CallableStatement cs = null-->Line_14 $$ cs = con.prepareCall(callString, resultSetType, updatableResults ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY)[ FD ]
Line_29 $$ if (declaredParam.getScale() != null) -->Line_30 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType(), declaredParam.getScale())[ CD ]
Line_26 $$ if (declaredParam.getTypeName() != null) -->Line_29 $$ if (declaredParam.getScale() != null) [ CD ]
Line_14 $$ cs = con.prepareCall(callString, resultSetType, updatableResults ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY)-->Line_30 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType(), declaredParam.getScale())[ FD ]
Line_2 $$ public CallableStatement createCallableStatement(Connection con) throws SQLException -->Line_10 $$ CallableStatement cs = null[ CD ]
Line_20 $$ int sqlColIndx = 1-->Line_30 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType(), declaredParam.getScale())[ FD ]
Line_12 $$ cs = con.prepareCall(callString)-->Line_18 $$ csToUse = nativeJdbcExtractor.getNativeCallableStatement(cs)[ FD ]
Line_21 $$ for (SqlParameter declaredParam : declaredParameters) -->Line_25 $$ if (declaredParam instanceof SqlOutParameter) [ FD ]
Line_29 $$ if (declaredParam.getScale() != null) -->Line_32 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType())[ CD ]
Line_20 $$ int sqlColIndx = 1-->Line_32 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType())[ FD ]
Line_16 $$ CallableStatement csToUse = cs-->Line_43 $$ StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue)[ FD ]
Line_22 $$ if (!declaredParam.isResultsParameter()) -->Line_45 $$ sqlColIndx++[ CD ]
Line_2 $$ public CallableStatement createCallableStatement(Connection con) throws SQLException -->Line_48 $$ return cs[ CD ]
Line_2 $$ public CallableStatement createCallableStatement(Connection con) throws SQLException -->Line_11 $$ if (resultSetType == ResultSet.TYPE_FORWARD_ONLY && !updatableResults) [ CD ]
Line_11 $$ if (resultSetType == ResultSet.TYPE_FORWARD_ONLY && !updatableResults) -->Line_14 $$ cs = con.prepareCall(callString, resultSetType, updatableResults ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY)[ CD ]
Line_17 $$ if (nativeJdbcExtractor != null) -->Line_18 $$ csToUse = nativeJdbcExtractor.getNativeCallableStatement(cs)[ CD ]
Line_16 $$ CallableStatement csToUse = cs-->Line_18 $$ csToUse = nativeJdbcExtractor.getNativeCallableStatement(cs)[ FD ]
Line_10 $$ CallableStatement cs = null-->Line_30 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType(), declaredParam.getScale())[ FD ]
Line_18 $$ csToUse = nativeJdbcExtractor.getNativeCallableStatement(cs)-->Line_36 $$ StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParam, inValue)[ FD ]
Line_12 $$ cs = con.prepareCall(callString)-->Line_27 $$ cs.registerOutParameter(sqlColIndx, declaredParam.getSqlType(), declaredParam.getTypeName())[ FD ]
