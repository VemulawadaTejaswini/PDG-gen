Line_4 $$ final CollectionPersister cp = session.getFactory().getCollectionPersister(entity + '.' + property)-->Line_9 $$ Object index = getIndexInParent(property, childEntity, persister, cp, parent)[ FD ]
Line_3 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entity)-->Line_27 $$ if (persister.isSubclassEntityName(ee.getEntityName())) [ FD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_12 $$ final Object unMergedChild = mergeMap.get(childEntity)[ FD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_43 $$ return null[ CD ]
Line_8 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) -->Line_18 $$ if (index != null) [ CD ]
Line_3 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entity)-->Line_14 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_9 $$ Object index = getIndexInParent(property, childEntity, persister, cp, parent)[ FD ]
Line_9 $$ Object index = getIndexInParent(property, childEntity, persister, cp, parent)-->Line_18 $$ if (index != null) [ FD ]
Line_33 $$ if (unMergedInstance != null && unMergedChild != null) -->Line_34 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ CD ]
Line_4 $$ final CollectionPersister cp = session.getFactory().getCollectionPersister(entity + '.' + property)-->Line_34 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_27 $$ if (persister.isSubclassEntityName(ee.getEntityName())) -->Line_30 $$ if (index == null && mergeMap != null) [ CD ]
Line_9 $$ Object index = getIndexInParent(property, childEntity, persister, cp, parent)-->Line_34 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_3 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entity)-->Line_29 $$ Object index = getIndexInParent(property, childEntity, persister, cp, instance)[ FD ]
Line_38 $$ if (index != null) -->Line_39 $$ return index[ CD ]
Line_5 $$ final Object parent = parentsByChild.get(childEntity)-->Line_11 $$ final Object unMergedInstance = mergeMap.get(parent)[ FD ]
Line_13 $$ if (unMergedInstance != null && unMergedChild != null) -->Line_14 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ CD ]
Line_30 $$ if (index == null && mergeMap != null) -->Line_31 $$ final Object unMergedInstance = mergeMap.get(instance)[ CD ]
Line_9 $$ Object index = getIndexInParent(property, childEntity, persister, cp, parent)-->Line_14 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_3 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entity)-->Line_8 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) [ FD ]
Line_12 $$ final Object unMergedChild = mergeMap.get(childEntity)-->Line_34 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_4 $$ final CollectionPersister cp = session.getFactory().getCollectionPersister(entity + '.' + property)-->Line_29 $$ Object index = getIndexInParent(property, childEntity, persister, cp, instance)[ FD ]
Line_11 $$ final Object unMergedInstance = mergeMap.get(parent)-->Line_14 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_3 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entity)-->Line_34 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_27 $$ if (persister.isSubclassEntityName(ee.getEntityName())) -->Line_38 $$ if (index != null) [ CD ]
Line_33 $$ if (unMergedInstance != null && unMergedChild != null) -->Line_35 $$ LOG.debugf("A detached object being merged (corresponding to a managed entity) has an indexed collection that [%s] the detached child being merged. ", (index != null ? "contains" : "does not contain"))[ CD ]
Line_30 $$ if (index == null && mergeMap != null) -->Line_33 $$ if (unMergedInstance != null && unMergedChild != null) [ CD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_32 $$ final Object unMergedChild = mergeMap.get(childEntity)[ FD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_14 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_8 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) -->Line_22 $$ parentsByChild.remove(childEntity)[ CD ]
Line_8 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) -->Line_9 $$ Object index = getIndexInParent(property, childEntity, persister, cp, parent)[ CD ]
Line_5 $$ final Object parent = parentsByChild.get(childEntity)-->Line_9 $$ Object index = getIndexInParent(property, childEntity, persister, cp, parent)[ FD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_11 $$ final Object unMergedInstance = mergeMap.get(parent)[ FD ]
Line_10 $$ if (index == null && mergeMap != null) -->Line_13 $$ if (unMergedInstance != null && unMergedChild != null) [ CD ]
Line_4 $$ final CollectionPersister cp = session.getFactory().getCollectionPersister(entity + '.' + property)-->Line_14 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_6 $$ if (parent != null) -->Line_8 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) [ CD ]
Line_3 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entity)-->Line_9 $$ Object index = getIndexInParent(property, childEntity, persister, cp, parent)[ FD ]
Line_18 $$ if (index != null) -->Line_19 $$ return index[ CD ]
Line_25 $$ for (Entry<Object, EntityEntry> me : reentrantSafeEntityEntries()) -->Line_28 $$ final Object instance = me.getKey()[ FD ]
Line_10 $$ if (index == null && mergeMap != null) -->Line_11 $$ final Object unMergedInstance = mergeMap.get(parent)[ CD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_29 $$ Object index = getIndexInParent(property, childEntity, persister, cp, instance)[ FD ]
Line_14 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)-->Line_34 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_5 $$ final Object parent = parentsByChild.get(childEntity)-->Line_7 $$ final EntityEntry entityEntry = entityEntryContext.getEntityEntry(parent)[ FD ]
Line_25 $$ for (Entry<Object, EntityEntry> me : reentrantSafeEntityEntries()) -->Line_26 $$ final EntityEntry ee = me.getValue()[ FD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_5 $$ final Object parent = parentsByChild.get(childEntity)[ CD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_31 $$ final Object unMergedInstance = mergeMap.get(instance)[ FD ]
Line_11 $$ final Object unMergedInstance = mergeMap.get(parent)-->Line_34 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_14 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)-->Line_38 $$ if (index != null) [ FD ]
Line_10 $$ if (index == null && mergeMap != null) -->Line_12 $$ final Object unMergedChild = mergeMap.get(childEntity)[ CD ]
Line_28 $$ final Object instance = me.getKey()-->Line_31 $$ final Object unMergedInstance = mergeMap.get(instance)[ FD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_22 $$ parentsByChild.remove(childEntity)[ FD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_6 $$ if (parent != null) [ CD ]
Line_14 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)-->Line_18 $$ if (index != null) [ FD ]
Line_6 $$ if (parent != null) -->Line_7 $$ final EntityEntry entityEntry = entityEntryContext.getEntityEntry(parent)[ CD ]
Line_8 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) -->Line_10 $$ if (index == null && mergeMap != null) [ CD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_3 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entity)[ FD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_4 $$ final CollectionPersister cp = session.getFactory().getCollectionPersister(entity + '.' + property)[ CD ]
Line_30 $$ if (index == null && mergeMap != null) -->Line_32 $$ final Object unMergedChild = mergeMap.get(childEntity)[ CD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_34 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_26 $$ final EntityEntry ee = me.getValue()-->Line_27 $$ if (persister.isSubclassEntityName(ee.getEntityName())) [ FD ]
Line_28 $$ final Object instance = me.getKey()-->Line_29 $$ Object index = getIndexInParent(property, childEntity, persister, cp, instance)[ FD ]
Line_34 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)-->Line_38 $$ if (index != null) [ FD ]
Line_27 $$ if (persister.isSubclassEntityName(ee.getEntityName())) -->Line_29 $$ Object index = getIndexInParent(property, childEntity, persister, cp, instance)[ CD ]
Line_27 $$ if (persister.isSubclassEntityName(ee.getEntityName())) -->Line_28 $$ final Object instance = me.getKey()[ CD ]
Line_13 $$ if (unMergedInstance != null && unMergedChild != null) -->Line_15 $$ LOG.debugf("A detached object being merged (corresponding to a parent in parentsByChild) has an indexed collection that [%s] the detached child being merged. ", (index != null ? "contains" : "does not contain"))[ CD ]
Line_9 $$ Object index = getIndexInParent(property, childEntity, persister, cp, parent)-->Line_38 $$ if (index != null) [ FD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_3 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entity)[ CD ]
Line_2 $$ public Object getIndexInOwner(String entity, String property, Object childEntity, Map mergeMap) -->Line_5 $$ final Object parent = parentsByChild.get(childEntity)[ FD ]
Line_7 $$ final EntityEntry entityEntry = entityEntryContext.getEntityEntry(parent)-->Line_8 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) [ FD ]
Line_12 $$ final Object unMergedChild = mergeMap.get(childEntity)-->Line_14 $$ index = getIndexInParent(property, unMergedChild, persister, cp, unMergedInstance)[ FD ]
Line_5 $$ final Object parent = parentsByChild.get(childEntity)-->Line_6 $$ if (parent != null) [ FD ]
