Line_2 $$ public AuthVerifierResult verify(AccessControlContext accessControlContext, Properties properties) throws AuthException -->Line_3 $$ AuthVerifierResult authVerifierResult = new AuthVerifierResult()[ CD ]
Line_14 $$ if (credentials != null) -->Line_21 $$ settings.remove("basic_auth")[ CD ]
Line_2 $$ public AuthVerifierResult verify(AccessControlContext accessControlContext, Properties properties) throws AuthException -->Line_4 $$ HttpServletRequest request = accessControlContext.getRequest()[ CD ]
Line_2 $$ public AuthVerifierResult verify(AccessControlContext accessControlContext, Properties properties) throws AuthException -->Line_4 $$ HttpServletRequest request = accessControlContext.getRequest()[ FD ]
Line_14 $$ if (credentials != null) -->Line_18 $$ ServiceAccessPolicyThreadLocal.addActiveServiceAccessPolicyName(String.valueOf(SyncPolicies.POLICIES[1][0]))[ CD ]
Line_13 $$ String[] credentials = getCredentials(request, accessControlContext.getResponse())-->Line_14 $$ if (credentials != null) [ FD ]
Line_4 $$ HttpServletRequest request = accessControlContext.getRequest()-->Line_13 $$ String[] credentials = getCredentials(request, accessControlContext.getResponse())[ FD ]
Line_6 $$ if (uri.startsWith("/download/")) -->Line_7 $$ String contextPath = request.getContextPath()[ CD ]
Line_14 $$ if (credentials != null) -->Line_20 $$ Map<String, Object> settings = accessControlContext.getSettings()[ CD ]
Line_14 $$ if (credentials != null) -->Line_16 $$ authVerifierResult.setState(AuthVerifierResult.State.SUCCESS)[ CD ]
Line_2 $$ public AuthVerifierResult verify(AccessControlContext accessControlContext, Properties properties) throws AuthException -->Line_6 $$ if (uri.startsWith("/download/")) [ CD ]
Line_20 $$ Map<String, Object> settings = accessControlContext.getSettings()-->Line_21 $$ settings.remove("basic_auth")[ FD ]
Line_4 $$ HttpServletRequest request = accessControlContext.getRequest()-->Line_5 $$ String uri = (String) request.getAttribute(WebKeys.INVOKER_FILTER_URI)[ FD ]
Line_5 $$ String uri = (String) request.getAttribute(WebKeys.INVOKER_FILTER_URI)-->Line_6 $$ if (uri.startsWith("/download/")) [ FD ]
Line_3 $$ AuthVerifierResult authVerifierResult = new AuthVerifierResult()-->Line_15 $$ authVerifierResult.setPassword(credentials[1])[ FD ]
Line_14 $$ if (credentials != null) -->Line_17 $$ authVerifierResult.setUserId(GetterUtil.getLong(credentials[0]))[ CD ]
Line_3 $$ AuthVerifierResult authVerifierResult = new AuthVerifierResult()-->Line_16 $$ authVerifierResult.setState(AuthVerifierResult.State.SUCCESS)[ FD ]
Line_2 $$ public AuthVerifierResult verify(AccessControlContext accessControlContext, Properties properties) throws AuthException -->Line_13 $$ String[] credentials = getCredentials(request, accessControlContext.getResponse())[ FD ]
Line_4 $$ HttpServletRequest request = accessControlContext.getRequest()-->Line_7 $$ String contextPath = request.getContextPath()[ FD ]
Line_3 $$ AuthVerifierResult authVerifierResult = new AuthVerifierResult()-->Line_17 $$ authVerifierResult.setUserId(GetterUtil.getLong(credentials[0]))[ FD ]
Line_14 $$ if (credentials != null) -->Line_15 $$ authVerifierResult.setPassword(credentials[1])[ CD ]
Line_6 $$ if (uri.startsWith("/download/")) -->Line_8 $$ if (!contextPath.equals("/sync-web")) [ CD ]
Line_7 $$ String contextPath = request.getContextPath()-->Line_8 $$ if (!contextPath.equals("/sync-web")) [ FD ]
Line_2 $$ public AuthVerifierResult verify(AccessControlContext accessControlContext, Properties properties) throws AuthException -->Line_5 $$ String uri = (String) request.getAttribute(WebKeys.INVOKER_FILTER_URI)[ CD ]
Line_8 $$ if (!contextPath.equals("/sync-web")) -->Line_9 $$ return authVerifierResult[ CD ]
Line_2 $$ public AuthVerifierResult verify(AccessControlContext accessControlContext, Properties properties) throws AuthException -->Line_20 $$ Map<String, Object> settings = accessControlContext.getSettings()[ FD ]
