Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_14 $$ final String scriptParameters = StringUtil.join(optionsMap.entrySet(), new Function<Map.Entry<String, List<String>>, String>() [ CD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_6 $$ ParsedCommandLine parsedCommandLine = gradleCmdParser.parse(ParametersListUtil.parse(fullCommandLine, true))[ FD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_5 $$ commandLineConverter.configure(gradleCmdParser)[ CD ]
Line_9 $$ final String vmOptions = systemProperties == null ? "" : StringUtil.join(systemProperties, new Function<String, String>() -->Line_16 $$ final List<String> values = entry.getValue()[ FD ]
Line_14 $$ final String scriptParameters = StringUtil.join(optionsMap.entrySet(), new Function<Map.Entry<String, List<String>>, String>() -->Line_17 $$ final String longOptionName = entry.getKey()[ FD ]
Line_3 $$ CommandLineParser gradleCmdParser = new CommandLineParser()-->Line_6 $$ ParsedCommandLine parsedCommandLine = gradleCmdParser.parse(ParametersListUtil.parse(fullCommandLine, true))[ FD ]
Line_16 $$ final List<String> values = entry.getValue()-->Line_18 $$ if (values != null && !values.isEmpty()) [ FD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_36 $$ return new ExternalTaskExecutionInfo(settings, DefaultRunExecutor.EXECUTOR_ID)[ CD ]
Line_19 $$ return StringUtil.join(values, new Function<String, String>() -->Line_21 $$ return "--" + longOptionName + ' ' + entry[ CD ]
Line_18 $$ if (values != null && !values.isEmpty()) -->Line_25 $$ return "--" + longOptionName[ CD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_29 $$ final List<String> tasks = parsedCommandLine.getExtraArguments()[ CD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_6 $$ ParsedCommandLine parsedCommandLine = gradleCmdParser.parse(ParametersListUtil.parse(fullCommandLine, true))[ CD ]
Line_9 $$ final String vmOptions = systemProperties == null ? "" : StringUtil.join(systemProperties, new Function<String, String>() -->Line_11 $$ return "-D" + entry[ CD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_31 $$ settings.setExternalProjectPath(projectPath)[ FD ]
Line_4 $$ GradleCommandLineOptionsConverter commandLineConverter = new GradleCommandLineOptionsConverter()-->Line_7 $$ final Map<String, List<String>> optionsMap = commandLineConverter.convert(parsedCommandLine, new HashMap<String, List<String>>())[ FD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_31 $$ settings.setExternalProjectPath(projectPath)[ CD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_33 $$ settings.setScriptParameters(scriptParameters)[ CD ]
Line_14 $$ final String scriptParameters = StringUtil.join(optionsMap.entrySet(), new Function<Map.Entry<String, List<String>>, String>() -->Line_16 $$ final List<String> values = entry.getValue()[ FD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_35 $$ settings.setExternalSystemIdString(GradleConstants.SYSTEM_ID.toString())[ CD ]
Line_9 $$ final String vmOptions = systemProperties == null ? "" : StringUtil.join(systemProperties, new Function<String, String>() -->Line_34 $$ settings.setVmOptions(vmOptions)[ FD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_9 $$ final String vmOptions = systemProperties == null ? "" : StringUtil.join(systemProperties, new Function<String, String>() [ CD ]
Line_4 $$ GradleCommandLineOptionsConverter commandLineConverter = new GradleCommandLineOptionsConverter()-->Line_5 $$ commandLineConverter.configure(gradleCmdParser)[ FD ]
Line_3 $$ CommandLineParser gradleCmdParser = new CommandLineParser()-->Line_5 $$ commandLineConverter.configure(gradleCmdParser)[ FD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_8 $$ final List<String> systemProperties = optionsMap.remove("system-prop")[ CD ]
Line_9 $$ final String vmOptions = systemProperties == null ? "" : StringUtil.join(systemProperties, new Function<String, String>() -->Line_17 $$ final String longOptionName = entry.getKey()[ FD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_4 $$ GradleCommandLineOptionsConverter commandLineConverter = new GradleCommandLineOptionsConverter()[ CD ]
Line_14 $$ final String scriptParameters = StringUtil.join(optionsMap.entrySet(), new Function<Map.Entry<String, List<String>>, String>() -->Line_17 $$ final String longOptionName = entry.getKey()[ CD ]
Line_16 $$ final List<String> values = entry.getValue()-->Line_19 $$ return StringUtil.join(values, new Function<String, String>() [ FD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_3 $$ CommandLineParser gradleCmdParser = new CommandLineParser()[ CD ]
Line_6 $$ ParsedCommandLine parsedCommandLine = gradleCmdParser.parse(ParametersListUtil.parse(fullCommandLine, true))-->Line_29 $$ final List<String> tasks = parsedCommandLine.getExtraArguments()[ FD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_32 $$ settings.setTaskNames(tasks)[ CD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_7 $$ final Map<String, List<String>> optionsMap = commandLineConverter.convert(parsedCommandLine, new HashMap<String, List<String>>())[ CD ]
Line_7 $$ final Map<String, List<String>> optionsMap = commandLineConverter.convert(parsedCommandLine, new HashMap<String, List<String>>())-->Line_14 $$ final String scriptParameters = StringUtil.join(optionsMap.entrySet(), new Function<Map.Entry<String, List<String>>, String>() [ FD ]
Line_14 $$ final String scriptParameters = StringUtil.join(optionsMap.entrySet(), new Function<Map.Entry<String, List<String>>, String>() -->Line_16 $$ final List<String> values = entry.getValue()[ CD ]
Line_18 $$ if (values != null && !values.isEmpty()) -->Line_19 $$ return StringUtil.join(values, new Function<String, String>() [ CD ]
Line_6 $$ ParsedCommandLine parsedCommandLine = gradleCmdParser.parse(ParametersListUtil.parse(fullCommandLine, true))-->Line_7 $$ final Map<String, List<String>> optionsMap = commandLineConverter.convert(parsedCommandLine, new HashMap<String, List<String>>())[ FD ]
Line_7 $$ final Map<String, List<String>> optionsMap = commandLineConverter.convert(parsedCommandLine, new HashMap<String, List<String>>())-->Line_8 $$ final List<String> systemProperties = optionsMap.remove("system-prop")[ FD ]
Line_14 $$ final String scriptParameters = StringUtil.join(optionsMap.entrySet(), new Function<Map.Entry<String, List<String>>, String>() -->Line_18 $$ if (values != null && !values.isEmpty()) [ CD ]
Line_2 $$ private static ExternalTaskExecutionInfo buildTaskInfo(@NotNull String projectPath, @NotNull String fullCommandLine) throws CommandLineArgumentException -->Line_34 $$ settings.setVmOptions(vmOptions)[ CD ]
Line_8 $$ final List<String> systemProperties = optionsMap.remove("system-prop")-->Line_9 $$ final String vmOptions = systemProperties == null ? "" : StringUtil.join(systemProperties, new Function<String, String>() [ FD ]
