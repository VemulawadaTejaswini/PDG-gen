Line_2 $$ private Optional<FlushingPartition> getFlushingPartition() -->Line_4 $$ PartitionBuilder chosenPartitionBuilder = null[ CD ]
Line_16 $$ if (chosenPartitionBuilder == null) -->Line_17 $$ return Optional.empty()[ CD ]
Line_7 $$ if (entry.getValue().getRowCount() > maxPartitionSize) -->Line_10 $$ chosenPartitionId = entry.getKey()[ CD ]
Line_5 $$ long chosenPartitionId = -1-->Line_20 $$ partitionRows.remove(chosenPartitionId)[ FD ]
Line_7 $$ if (entry.getValue().getRowCount() > maxPartitionSize) -->Line_9 $$ maxPartitionSize = chosenPartitionBuilder.getRowCount()[ CD ]
Line_8 $$ chosenPartitionBuilder = entry.getValue()-->Line_19 $$ FlushingPartition flushingPartition = new FlushingPartition(chosenPartitionBuilder.build())[ FD ]
Line_2 $$ private Optional<FlushingPartition> getFlushingPartition() -->Line_20 $$ partitionRows.remove(chosenPartitionId)[ CD ]
Line_6 $$ for (Map.Entry<Long, PartitionBuilder> entry : partitionRows.entrySet()) -->Line_7 $$ if (entry.getValue().getRowCount() > maxPartitionSize) [ FD ]
Line_3 $$ int maxPartitionSize = 0-->Line_11 $$ if (maxPartitionSize == maxRowCountPerPartition) [ FD ]
Line_10 $$ chosenPartitionId = entry.getKey()-->Line_20 $$ partitionRows.remove(chosenPartitionId)[ FD ]
Line_4 $$ PartitionBuilder chosenPartitionBuilder = null-->Line_8 $$ chosenPartitionBuilder = entry.getValue()[ FD ]
Line_8 $$ chosenPartitionBuilder = entry.getValue()-->Line_9 $$ maxPartitionSize = chosenPartitionBuilder.getRowCount()[ FD ]
Line_8 $$ chosenPartitionBuilder = entry.getValue()-->Line_16 $$ if (chosenPartitionBuilder == null) [ FD ]
Line_19 $$ FlushingPartition flushingPartition = new FlushingPartition(chosenPartitionBuilder.build())-->Line_21 $$ return Optional.of(flushingPartition)[ FD ]
Line_4 $$ PartitionBuilder chosenPartitionBuilder = null-->Line_9 $$ maxPartitionSize = chosenPartitionBuilder.getRowCount()[ FD ]
Line_4 $$ PartitionBuilder chosenPartitionBuilder = null-->Line_16 $$ if (chosenPartitionBuilder == null) [ FD ]
Line_7 $$ if (entry.getValue().getRowCount() > maxPartitionSize) -->Line_11 $$ if (maxPartitionSize == maxRowCountPerPartition) [ CD ]
Line_4 $$ PartitionBuilder chosenPartitionBuilder = null-->Line_19 $$ FlushingPartition flushingPartition = new FlushingPartition(chosenPartitionBuilder.build())[ FD ]
Line_9 $$ maxPartitionSize = chosenPartitionBuilder.getRowCount()-->Line_11 $$ if (maxPartitionSize == maxRowCountPerPartition) [ FD ]
Line_6 $$ for (Map.Entry<Long, PartitionBuilder> entry : partitionRows.entrySet()) -->Line_10 $$ chosenPartitionId = entry.getKey()[ FD ]
Line_5 $$ long chosenPartitionId = -1-->Line_10 $$ chosenPartitionId = entry.getKey()[ FD ]
Line_2 $$ private Optional<FlushingPartition> getFlushingPartition() -->Line_5 $$ long chosenPartitionId = -1[ CD ]
Line_2 $$ private Optional<FlushingPartition> getFlushingPartition() -->Line_21 $$ return Optional.of(flushingPartition)[ CD ]
Line_3 $$ int maxPartitionSize = 0-->Line_9 $$ maxPartitionSize = chosenPartitionBuilder.getRowCount()[ FD ]
Line_2 $$ private Optional<FlushingPartition> getFlushingPartition() -->Line_19 $$ FlushingPartition flushingPartition = new FlushingPartition(chosenPartitionBuilder.build())[ CD ]
Line_7 $$ if (entry.getValue().getRowCount() > maxPartitionSize) -->Line_8 $$ chosenPartitionBuilder = entry.getValue()[ CD ]
Line_3 $$ int maxPartitionSize = 0-->Line_7 $$ if (entry.getValue().getRowCount() > maxPartitionSize) [ FD ]
Line_2 $$ private Optional<FlushingPartition> getFlushingPartition() -->Line_16 $$ if (chosenPartitionBuilder == null) [ CD ]
Line_6 $$ for (Map.Entry<Long, PartitionBuilder> entry : partitionRows.entrySet()) -->Line_8 $$ chosenPartitionBuilder = entry.getValue()[ FD ]
Line_2 $$ private Optional<FlushingPartition> getFlushingPartition() -->Line_3 $$ int maxPartitionSize = 0[ CD ]
