Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_6 $$ hosts[0] = "192.168.1.1"[ CD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_26 $$ ContainerRequestEvent cre = (ContainerRequestEvent) arg.getAllValues().get(1)[ CD ]
Line_10 $$ TaskAttemptImpl mockTaskAttempt = createMapTaskAttemptImplForTest(eventHandler, splitInfo)-->Line_11 $$ TaskAttemptImpl spyTa = spy(mockTaskAttempt)[ FD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_13 $$ spyTa.dataLocalHosts = spyTa.resolveHosts(splitInfo.getLocations())[ CD ]
Line_26 $$ ContainerRequestEvent cre = (ContainerRequestEvent) arg.getAllValues().get(1)-->Line_27 $$ String[] requestedHosts = cre.getHosts()[ FD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_12 $$ when(spyTa.resolveHost(hosts[0])).thenReturn("host1")[ CD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_9 $$ TaskSplitMetaInfo splitInfo = new TaskSplitMetaInfo(hosts, 0, 128 * 1024 * 1024l)[ CD ]
Line_17 $$ ArgumentCaptor<Event> arg = ArgumentCaptor.forClass(Event.class)-->Line_18 $$ verify(eventHandler, times(2)).handle(arg.capture())[ FD ]
Line_9 $$ TaskSplitMetaInfo splitInfo = new TaskSplitMetaInfo(hosts, 0, 128 * 1024 * 1024l)-->Line_10 $$ TaskAttemptImpl mockTaskAttempt = createMapTaskAttemptImplForTest(eventHandler, splitInfo)[ FD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_25 $$ expected.put("host3", true)[ CD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_4 $$ EventHandler eventHandler = mock(EventHandler.class)[ CD ]
Line_22 $$ Map<String, Boolean> expected = new HashMap<String, Boolean>()-->Line_29 $$ expected.remove(h)[ FD ]
Line_4 $$ EventHandler eventHandler = mock(EventHandler.class)-->Line_18 $$ verify(eventHandler, times(2)).handle(arg.capture())[ FD ]
Line_11 $$ TaskAttemptImpl spyTa = spy(mockTaskAttempt)-->Line_16 $$ verify(spyTa).resolveHost(hosts[0])[ FD ]
Line_22 $$ Map<String, Boolean> expected = new HashMap<String, Boolean>()-->Line_25 $$ expected.put("host3", true)[ FD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_19 $$ if (!(arg.getAllValues().get(1) instanceof ContainerRequestEvent)) [ CD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_17 $$ ArgumentCaptor<Event> arg = ArgumentCaptor.forClass(Event.class)[ CD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_27 $$ String[] requestedHosts = cre.getHosts()[ CD ]
Line_28 $$ for (String h : requestedHosts) -->Line_29 $$ expected.remove(h)[ FD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_5 $$ String[] hosts = new String[3][ CD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_14 $$ TaskAttemptEvent mockTAEvent = mock(TaskAttemptEvent.class)[ CD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_15 $$ rct.transition(spyTa, mockTAEvent)[ CD ]
Line_3 $$ TaskAttemptImpl.RequestContainerTransition rct = new TaskAttemptImpl.RequestContainerTransition(false)-->Line_15 $$ rct.transition(spyTa, mockTAEvent)[ FD ]
Line_22 $$ Map<String, Boolean> expected = new HashMap<String, Boolean>()-->Line_23 $$ expected.put("host1", true)[ FD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_7 $$ hosts[1] = "host2"[ CD ]
Line_22 $$ Map<String, Boolean> expected = new HashMap<String, Boolean>()-->Line_31 $$ assertEquals(0, expected.size())[ FD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_10 $$ TaskAttemptImpl mockTaskAttempt = createMapTaskAttemptImplForTest(eventHandler, splitInfo)[ CD ]
Line_14 $$ TaskAttemptEvent mockTAEvent = mock(TaskAttemptEvent.class)-->Line_15 $$ rct.transition(spyTa, mockTAEvent)[ FD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_22 $$ Map<String, Boolean> expected = new HashMap<String, Boolean>()[ CD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_18 $$ verify(eventHandler, times(2)).handle(arg.capture())[ CD ]
Line_11 $$ TaskAttemptImpl spyTa = spy(mockTaskAttempt)-->Line_13 $$ spyTa.dataLocalHosts = spyTa.resolveHosts(splitInfo.getLocations())[ FD ]
Line_19 $$ if (!(arg.getAllValues().get(1) instanceof ContainerRequestEvent)) -->Line_20 $$ Assert.fail("Second Event not of type ContainerRequestEvent")[ CD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_8 $$ hosts[2] = "host3"[ CD ]
Line_17 $$ ArgumentCaptor<Event> arg = ArgumentCaptor.forClass(Event.class)-->Line_26 $$ ContainerRequestEvent cre = (ContainerRequestEvent) arg.getAllValues().get(1)[ FD ]
Line_9 $$ TaskSplitMetaInfo splitInfo = new TaskSplitMetaInfo(hosts, 0, 128 * 1024 * 1024l)-->Line_13 $$ spyTa.dataLocalHosts = spyTa.resolveHosts(splitInfo.getLocations())[ FD ]
Line_17 $$ ArgumentCaptor<Event> arg = ArgumentCaptor.forClass(Event.class)-->Line_19 $$ if (!(arg.getAllValues().get(1) instanceof ContainerRequestEvent)) [ FD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_11 $$ TaskAttemptImpl spyTa = spy(mockTaskAttempt)[ CD ]
Line_11 $$ TaskAttemptImpl spyTa = spy(mockTaskAttempt)-->Line_12 $$ when(spyTa.resolveHost(hosts[0])).thenReturn("host1")[ FD ]
Line_11 $$ TaskAttemptImpl spyTa = spy(mockTaskAttempt)-->Line_15 $$ rct.transition(spyTa, mockTAEvent)[ FD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_3 $$ TaskAttemptImpl.RequestContainerTransition rct = new TaskAttemptImpl.RequestContainerTransition(false)[ CD ]
Line_22 $$ Map<String, Boolean> expected = new HashMap<String, Boolean>()-->Line_24 $$ expected.put("host2", true)[ FD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_16 $$ verify(spyTa).resolveHost(hosts[0])[ CD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_23 $$ expected.put("host1", true)[ CD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_31 $$ assertEquals(0, expected.size())[ CD ]
Line_2 $$ public void testHostResolveAttempt() throws Exception -->Line_24 $$ expected.put("host2", true)[ CD ]
Line_4 $$ EventHandler eventHandler = mock(EventHandler.class)-->Line_10 $$ TaskAttemptImpl mockTaskAttempt = createMapTaskAttemptImplForTest(eventHandler, splitInfo)[ FD ]
