Line_5 $$ if (nodeAndClient != null) -->Line_8 $$ nodes.remove(nodeAndClient.name)[ CD ]
Line_4 $$ NodeAndClient nodeAndClient = getRandomNodeAndClient( nc -> filter.test(nc.node.settings()))-->Line_9 $$ nodeAndClient.close()[ FD ]
Line_5 $$ if (nodeAndClient != null) -->Line_6 $$ logger.info("Closing filtered random node [[ CD ]
Line_2 $$ public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException -->Line_4 $$ NodeAndClient nodeAndClient = getRandomNodeAndClient( nc -> filter.test(nc.node.settings()))[ CD ]
Line_5 $$ if (nodeAndClient != null) -->Line_7 $$ removeDisruptionSchemeFromNode(nodeAndClient)[ CD ]
Line_4 $$ NodeAndClient nodeAndClient = getRandomNodeAndClient( nc -> filter.test(nc.node.settings()))-->Line_7 $$ removeDisruptionSchemeFromNode(nodeAndClient)[ FD ]
Line_2 $$ public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException -->Line_3 $$ ensureOpen()[ CD ]
Line_2 $$ public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException -->Line_5 $$ if (nodeAndClient != null) [ CD ]
Line_5 $$ if (nodeAndClient != null) -->Line_9 $$ nodeAndClient.close()[ CD ]
Line_2 $$ public synchronized void stopRandomNode(final Predicate<Settings> filter) throws IOException -->Line_4 $$ filter.test(nc.node.settings())[ FD ]
Line_4 $$ NodeAndClient nodeAndClient = getRandomNodeAndClient( nc -> filter.test(nc.node.settings()))-->Line_5 $$ if (nodeAndClient != null) [ FD ]
