Line_2 $$ public synchronized ScheduledFuture scheduleTimeout(final int sequenceNumber, long time, TimeUnit unit) -->Line_15 $$ return future[ CD ]
Line_2 $$ public synchronized ScheduledFuture scheduleTimeout(final int sequenceNumber, long time, TimeUnit unit) -->Line_3 $$ if (!files.containsKey(sequenceNumber))[ CD ]
Line_2 $$ public synchronized ScheduledFuture scheduleTimeout(final int sequenceNumber, long time, TimeUnit unit) -->Line_5 $$ ScheduledFuture future = timeoutExecutor.schedule(new Runnable() [ CD ]
Line_2 $$ public synchronized ScheduledFuture scheduleTimeout(final int sequenceNumber, long time, TimeUnit unit) -->Line_5 $$ ScheduledFuture future = timeoutExecutor.schedule(new Runnable() [ FD ]
Line_2 $$ public synchronized ScheduledFuture scheduleTimeout(final int sequenceNumber, long time, TimeUnit unit) -->Line_8 $$ timeoutTasks.remove(sequenceNumber)[ FD ]
Line_3 $$ if (!files.containsKey(sequenceNumber))-->Line_4 $$ return null[ CD ]
Line_2 $$ public synchronized ScheduledFuture scheduleTimeout(final int sequenceNumber, long time, TimeUnit unit) -->Line_13 $$ ScheduledFuture prev = timeoutTasks.put(sequenceNumber, future)[ CD ]
Line_2 $$ public synchronized ScheduledFuture scheduleTimeout(final int sequenceNumber, long time, TimeUnit unit) -->Line_3 $$ if (!files.containsKey(sequenceNumber))[ FD ]
Line_5 $$ ScheduledFuture future = timeoutExecutor.schedule(new Runnable() -->Line_13 $$ ScheduledFuture prev = timeoutTasks.put(sequenceNumber, future)[ FD ]
Line_2 $$ public synchronized ScheduledFuture scheduleTimeout(final int sequenceNumber, long time, TimeUnit unit) -->Line_9 $$ StreamTransferTask.this.complete(sequenceNumber)[ FD ]
Line_2 $$ public synchronized ScheduledFuture scheduleTimeout(final int sequenceNumber, long time, TimeUnit unit) -->Line_13 $$ ScheduledFuture prev = timeoutTasks.put(sequenceNumber, future)[ FD ]
