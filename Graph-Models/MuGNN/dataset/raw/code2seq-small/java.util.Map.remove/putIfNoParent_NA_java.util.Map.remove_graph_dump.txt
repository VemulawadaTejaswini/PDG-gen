Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_7 $$ myKeys.add(key)[ FD ]
Line_14 $$ final Key previous = listIterator.previous()-->Line_15 $$ if (myKeysResemblance.process(previous, key)) [ FD ]
Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_3 $$ if (myMap.put(key, val) != null) [ CD ]
Line_3 $$ if (myMap.put(key, val) != null) -->Line_4 $$ return -1[ CD ]
Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_24 $$ myMap.remove(key)[ FD ]
Line_13 $$ for (final ListIterator<Key> listIterator = myKeys.listIterator(insertionIdx); listIterator.hasPrevious(); ) -->Line_14 $$ final Key previous = listIterator.previous()[ CD ]
Line_11 $$ if (idx < 0) -->Line_12 $$ final int insertionIdx = -idx - 1[ CD ]
Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_20 $$ myKeys.add(insertionIdx, key)[ FD ]
Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_24 $$ myMap.remove(key)[ CD ]
Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_11 $$ if (idx < 0) [ CD ]
Line_15 $$ if (myKeysResemblance.process(previous, key)) -->Line_16 $$ myMap.remove(key)[ CD ]
Line_6 $$ if (myKeys.isEmpty()) -->Line_8 $$ return 0[ CD ]
Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_15 $$ if (myKeysResemblance.process(previous, key)) [ FD ]
Line_15 $$ if (myKeysResemblance.process(previous, key)) -->Line_17 $$ return -1[ CD ]
Line_12 $$ final int insertionIdx = -idx - 1-->Line_20 $$ myKeys.add(insertionIdx, key)[ FD ]
Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_3 $$ if (myMap.put(key, val) != null) [ FD ]
Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_16 $$ myMap.remove(key)[ FD ]
Line_12 $$ final int insertionIdx = -idx - 1-->Line_13 $$ for (final ListIterator<Key> listIterator = myKeys.listIterator(insertionIdx); listIterator.hasPrevious(); ) [ FD ]
Line_13 $$ for (final ListIterator<Key> listIterator = myKeys.listIterator(insertionIdx); listIterator.hasPrevious(); ) -->Line_14 $$ final Key previous = listIterator.previous()[ FD ]
Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_10 $$ final int idx = Collections.binarySearch(myKeys, key, myComparator)[ CD ]
Line_11 $$ if (idx < 0) -->Line_20 $$ myKeys.add(insertionIdx, key)[ CD ]
Line_10 $$ final int idx = Collections.binarySearch(myKeys, key, myComparator)-->Line_12 $$ final int insertionIdx = -idx - 1[ FD ]
Line_11 $$ if (idx < 0) -->Line_13 $$ for (final ListIterator<Key> listIterator = myKeys.listIterator(insertionIdx); listIterator.hasPrevious(); ) [ CD ]
Line_10 $$ final int idx = Collections.binarySearch(myKeys, key, myComparator)-->Line_11 $$ if (idx < 0) [ FD ]
Line_13 $$ for (final ListIterator<Key> listIterator = myKeys.listIterator(insertionIdx); listIterator.hasPrevious(); ) -->Line_15 $$ if (myKeysResemblance.process(previous, key)) [ CD ]
Line_11 $$ if (idx < 0) -->Line_21 $$ return insertionIdx[ CD ]
Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_6 $$ if (myKeys.isEmpty()) [ CD ]
Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_25 $$ return -1[ CD ]
Line_2 $$ protected int putIfNoParent(final Key key, final Val val) -->Line_10 $$ final int idx = Collections.binarySearch(myKeys, key, myComparator)[ FD ]
Line_6 $$ if (myKeys.isEmpty()) -->Line_7 $$ myKeys.add(key)[ CD ]
