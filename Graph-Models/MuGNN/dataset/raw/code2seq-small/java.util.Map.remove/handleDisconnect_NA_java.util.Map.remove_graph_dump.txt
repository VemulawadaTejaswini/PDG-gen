Line_2 $$ private void handleDisconnect(String sessionId, Principal user) -->Line_4 $$ this.subscriptionRegistry.unregisterAllSubscriptions(sessionId)[ CD ]
Line_2 $$ private void handleDisconnect(String sessionId, Principal user) -->Line_6 $$ accessor.setSessionId(sessionId)[ CD ]
Line_2 $$ private void handleDisconnect(String sessionId, Principal user) -->Line_6 $$ accessor.setSessionId(sessionId)[ FD ]
Line_5 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create(SimpMessageType.DISCONNECT_ACK)-->Line_7 $$ accessor.setUser(user)[ FD ]
Line_2 $$ private void handleDisconnect(String sessionId, Principal user) -->Line_9 $$ Message<byte[]> message = MessageBuilder.createMessage(EMPTY_PAYLOAD, accessor.getMessageHeaders())[ CD ]
Line_2 $$ private void handleDisconnect(String sessionId, Principal user) -->Line_10 $$ getClientOutboundChannel().send(message)[ CD ]
Line_5 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create(SimpMessageType.DISCONNECT_ACK)-->Line_8 $$ initHeaders(accessor)[ FD ]
Line_5 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create(SimpMessageType.DISCONNECT_ACK)-->Line_9 $$ Message<byte[]> message = MessageBuilder.createMessage(EMPTY_PAYLOAD, accessor.getMessageHeaders())[ FD ]
Line_2 $$ private void handleDisconnect(String sessionId, Principal user) -->Line_7 $$ accessor.setUser(user)[ CD ]
Line_9 $$ Message<byte[]> message = MessageBuilder.createMessage(EMPTY_PAYLOAD, accessor.getMessageHeaders())-->Line_10 $$ getClientOutboundChannel().send(message)[ FD ]
Line_2 $$ private void handleDisconnect(String sessionId, Principal user) -->Line_3 $$ this.sessions.remove(sessionId)[ CD ]
Line_2 $$ private void handleDisconnect(String sessionId, Principal user) -->Line_7 $$ accessor.setUser(user)[ FD ]
Line_2 $$ private void handleDisconnect(String sessionId, Principal user) -->Line_5 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create(SimpMessageType.DISCONNECT_ACK)[ CD ]
Line_2 $$ private void handleDisconnect(String sessionId, Principal user) -->Line_4 $$ this.subscriptionRegistry.unregisterAllSubscriptions(sessionId)[ FD ]
Line_2 $$ private void handleDisconnect(String sessionId, Principal user) -->Line_3 $$ this.sessions.remove(sessionId)[ FD ]
Line_5 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create(SimpMessageType.DISCONNECT_ACK)-->Line_6 $$ accessor.setSessionId(sessionId)[ FD ]
Line_2 $$ private void handleDisconnect(String sessionId, Principal user) -->Line_8 $$ initHeaders(accessor)[ CD ]
