Line_6 $$ Configuration conf = new Configuration()-->Line_11 $$ final SocketFactory defaultSocketFactory = NetUtils.getDefaultSocketFactory(conf)[ FD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_15 $$ assertSame(toBeCached2, dummyCache.remove(defaultSocketFactory))[ CD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_14 $$ Assert.assertEquals("Equals of both socket factory shouldn't be same", defaultSocketFactory.equals(dummySocketFactory), false)[ CD ]
Line_5 $$ int toBeCached2 = 2-->Line_12 $$ dummyCache.put(defaultSocketFactory, toBeCached2)[ FD ]
Line_11 $$ final SocketFactory defaultSocketFactory = NetUtils.getDefaultSocketFactory(conf)-->Line_12 $$ dummyCache.put(defaultSocketFactory, toBeCached2)[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.set(CommonConfigurationKeys.HADOOP_RPC_SOCKET_FACTORY_CLASS_DEFAULT_KEY, "org.apache.hadoop.ipc.TestSocketFactory$DummySocketFactory")[ FD ]
Line_4 $$ int toBeCached1 = 1-->Line_9 $$ dummyCache.put(dummySocketFactory, toBeCached1)[ FD ]
Line_8 $$ final SocketFactory dummySocketFactory = NetUtils.getDefaultSocketFactory(conf)-->Line_14 $$ Assert.assertEquals("Equals of both socket factory shouldn't be same", defaultSocketFactory.equals(dummySocketFactory), false)[ FD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_3 $$ Map<SocketFactory, Integer> dummyCache = new HashMap<SocketFactory, Integer>()[ CD ]
Line_3 $$ Map<SocketFactory, Integer> dummyCache = new HashMap<SocketFactory, Integer>()-->Line_12 $$ dummyCache.put(defaultSocketFactory, toBeCached2)[ FD ]
Line_11 $$ final SocketFactory defaultSocketFactory = NetUtils.getDefaultSocketFactory(conf)-->Line_15 $$ assertSame(toBeCached2, dummyCache.remove(defaultSocketFactory))[ FD ]
Line_5 $$ int toBeCached2 = 2-->Line_16 $$ dummyCache.put(defaultSocketFactory, toBeCached2)[ FD ]
Line_8 $$ final SocketFactory dummySocketFactory = NetUtils.getDefaultSocketFactory(conf)-->Line_17 $$ assertSame(toBeCached1, dummyCache.remove(dummySocketFactory))[ FD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_12 $$ dummyCache.put(defaultSocketFactory, toBeCached2)[ CD ]
Line_5 $$ int toBeCached2 = 2-->Line_15 $$ assertSame(toBeCached2, dummyCache.remove(defaultSocketFactory))[ FD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_6 $$ Configuration conf = new Configuration()[ CD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_8 $$ final SocketFactory dummySocketFactory = NetUtils.getDefaultSocketFactory(conf)[ FD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_7 $$ conf.set(CommonConfigurationKeys.HADOOP_RPC_SOCKET_FACTORY_CLASS_DEFAULT_KEY, "org.apache.hadoop.ipc.TestSocketFactory$DummySocketFactory")[ CD ]
Line_11 $$ final SocketFactory defaultSocketFactory = NetUtils.getDefaultSocketFactory(conf)-->Line_14 $$ Assert.assertEquals("Equals of both socket factory shouldn't be same", defaultSocketFactory.equals(dummySocketFactory), false)[ FD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_4 $$ int toBeCached1 = 1[ CD ]
Line_3 $$ Map<SocketFactory, Integer> dummyCache = new HashMap<SocketFactory, Integer>()-->Line_13 $$ Assert.assertEquals("The cache contains two elements", 2, dummyCache.size())[ FD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_10 $$ conf.set(CommonConfigurationKeys.HADOOP_RPC_SOCKET_FACTORY_CLASS_DEFAULT_KEY, "org.apache.hadoop.net.StandardSocketFactory")[ CD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_10 $$ conf.set(CommonConfigurationKeys.HADOOP_RPC_SOCKET_FACTORY_CLASS_DEFAULT_KEY, "org.apache.hadoop.net.StandardSocketFactory")[ FD ]
Line_3 $$ Map<SocketFactory, Integer> dummyCache = new HashMap<SocketFactory, Integer>()-->Line_15 $$ assertSame(toBeCached2, dummyCache.remove(defaultSocketFactory))[ FD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_5 $$ int toBeCached2 = 2[ CD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_11 $$ final SocketFactory defaultSocketFactory = NetUtils.getDefaultSocketFactory(conf)[ CD ]
Line_3 $$ Map<SocketFactory, Integer> dummyCache = new HashMap<SocketFactory, Integer>()-->Line_16 $$ dummyCache.put(defaultSocketFactory, toBeCached2)[ FD ]
Line_3 $$ Map<SocketFactory, Integer> dummyCache = new HashMap<SocketFactory, Integer>()-->Line_17 $$ assertSame(toBeCached1, dummyCache.remove(dummySocketFactory))[ FD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_13 $$ Assert.assertEquals("The cache contains two elements", 2, dummyCache.size())[ CD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_16 $$ dummyCache.put(defaultSocketFactory, toBeCached2)[ CD ]
Line_3 $$ Map<SocketFactory, Integer> dummyCache = new HashMap<SocketFactory, Integer>()-->Line_9 $$ dummyCache.put(dummySocketFactory, toBeCached1)[ FD ]
Line_11 $$ final SocketFactory defaultSocketFactory = NetUtils.getDefaultSocketFactory(conf)-->Line_16 $$ dummyCache.put(defaultSocketFactory, toBeCached2)[ FD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_8 $$ final SocketFactory dummySocketFactory = NetUtils.getDefaultSocketFactory(conf)[ CD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_17 $$ assertSame(toBeCached1, dummyCache.remove(dummySocketFactory))[ CD ]
Line_4 $$ int toBeCached1 = 1-->Line_17 $$ assertSame(toBeCached1, dummyCache.remove(dummySocketFactory))[ FD ]
Line_2 $$ public void testSocketFactoryAsKeyInMap() -->Line_9 $$ dummyCache.put(dummySocketFactory, toBeCached1)[ CD ]
Line_8 $$ final SocketFactory dummySocketFactory = NetUtils.getDefaultSocketFactory(conf)-->Line_9 $$ dummyCache.put(dummySocketFactory, toBeCached1)[ FD ]
