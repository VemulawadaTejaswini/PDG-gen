Line_41 $$ entry = pendingCommits.firstEntry()-->Line_33 $$ while (entry != null && entry.getValue().offset <= flushedOffset) [ FD ]
Line_2 $$ private void processCommits(long offset) -->Line_6 $$ if (entry == null || entry.getValue().offset > flushedOffset) [ CD ]
Line_33 $$ while (entry != null && entry.getValue().offset <= flushedOffset) -->Line_36 $$ COMMIT3Response response = new COMMIT3Response(status, wccData, Nfs3Constant.WRITE_COMMIT_VERF)[ CD ]
Line_9 $$ int status = Nfs3Status.NFS3ERR_IO-->Line_20 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_9 $$ int status = Nfs3Status.NFS3ERR_IO-->Line_26 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_20 $$ status = Nfs3Status.NFS3ERR_IO-->Line_30 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_14 $$ if (!pendingWrites.isEmpty()) -->Line_15 $$ LOG.error("Can't sync for fileId: " + latestAttr.getFileId() + ". Channel closed with writes pending.", cce)[ CD ]
Line_41 $$ entry = pendingCommits.firstEntry()-->Line_35 $$ CommitCtx commit = entry.getValue()[ FD ]
Line_2 $$ private void processCommits(long offset) -->Line_3 $$ Preconditions.checkState(offset > 0)[ CD ]
Line_2 $$ private void processCommits(long offset) -->Line_32 $$ WccData wccData = new WccData(Nfs3Utils.getWccAttr(latestAttr), latestAttr)[ CD ]
Line_35 $$ CommitCtx commit = entry.getValue()-->Line_37 $$ Nfs3Utils.writeChannelCommit(commit.getChannel(), response.writeHeaderAndResponse(new XDR(), commit.getXid(), new VerifierNone()), commit.getXid())[ FD ]
Line_35 $$ CommitCtx commit = entry.getValue()-->Line_39 $$ LOG.debug("FileId: " + latestAttr.getFileId() + " Service time:" + (Time.monotonicNow() - commit.getStartTime()) + "ms. Sent response for commit:" + commit)[ FD ]
Line_33 $$ while (entry != null && entry.getValue().offset <= flushedOffset) -->Line_37 $$ Nfs3Utils.writeChannelCommit(commit.getChannel(), response.writeHeaderAndResponse(new XDR(), commit.getXid(), new VerifierNone()), commit.getXid())[ CD ]
Line_2 $$ private void processCommits(long offset) -->Line_9 $$ int status = Nfs3Status.NFS3ERR_IO[ CD ]
Line_26 $$ status = Nfs3Status.NFS3ERR_IO-->Line_30 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_2 $$ private void processCommits(long offset) -->Line_4 $$ long flushedOffset = getFlushedOffset()[ CD ]
Line_17 $$ status = Nfs3Status.NFS3ERR_IO-->Line_20 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_6 $$ if (entry == null || entry.getValue().offset > flushedOffset) -->Line_7 $$ return[ CD ]
Line_12 $$ status = Nfs3Status.NFS3_OK-->Line_30 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_5 $$ Entry<Long, CommitCtx> entry = pendingCommits.firstEntry()-->Line_34 $$ pendingCommits.remove(entry.getKey())[ FD ]
Line_33 $$ while (entry != null && entry.getValue().offset <= flushedOffset) -->Line_38 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_12 $$ status = Nfs3Status.NFS3_OK-->Line_17 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_20 $$ status = Nfs3Status.NFS3ERR_IO-->Line_26 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_17 $$ status = Nfs3Status.NFS3ERR_IO-->Line_26 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_36 $$ COMMIT3Response response = new COMMIT3Response(status, wccData, Nfs3Constant.WRITE_COMMIT_VERF)-->Line_37 $$ Nfs3Utils.writeChannelCommit(commit.getChannel(), response.writeHeaderAndResponse(new XDR(), commit.getXid(), new VerifierNone()), commit.getXid())[ FD ]
Line_9 $$ int status = Nfs3Status.NFS3ERR_IO-->Line_30 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_33 $$ while (entry != null && entry.getValue().offset <= flushedOffset) -->Line_35 $$ CommitCtx commit = entry.getValue()[ CD ]
Line_33 $$ while (entry != null && entry.getValue().offset <= flushedOffset) -->Line_41 $$ entry = pendingCommits.firstEntry()[ CD ]
Line_28 $$ if (latestAttr.getSize() != offset) -->Line_29 $$ LOG.error("After sync, the expect file size: " + offset + ", however actual file size is: " + latestAttr.getSize())[ CD ]
Line_5 $$ Entry<Long, CommitCtx> entry = pendingCommits.firstEntry()-->Line_33 $$ while (entry != null && entry.getValue().offset <= flushedOffset) [ FD ]
Line_12 $$ status = Nfs3Status.NFS3_OK-->Line_26 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_38 $$ if (LOG.isDebugEnabled()) -->Line_39 $$ LOG.debug("FileId: " + latestAttr.getFileId() + " Service time:" + (Time.monotonicNow() - commit.getStartTime()) + "ms. Sent response for commit:" + commit)[ CD ]
Line_33 $$ while (entry != null && entry.getValue().offset <= flushedOffset) -->Line_34 $$ pendingCommits.remove(entry.getKey())[ CD ]
Line_17 $$ status = Nfs3Status.NFS3ERR_IO-->Line_30 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_2 $$ private void processCommits(long offset) -->Line_5 $$ Entry<Long, CommitCtx> entry = pendingCommits.firstEntry()[ CD ]
Line_2 $$ private void processCommits(long offset) -->Line_33 $$ while (entry != null && entry.getValue().offset <= flushedOffset) [ CD ]
Line_5 $$ Entry<Long, CommitCtx> entry = pendingCommits.firstEntry()-->Line_35 $$ CommitCtx commit = entry.getValue()[ FD ]
Line_9 $$ int status = Nfs3Status.NFS3ERR_IO-->Line_12 $$ status = Nfs3Status.NFS3_OK[ FD ]
Line_2 $$ private void processCommits(long offset) -->Line_28 $$ if (latestAttr.getSize() != offset) [ CD ]
Line_28 $$ if (latestAttr.getSize() != offset) -->Line_30 $$ status = Nfs3Status.NFS3ERR_IO[ CD ]
Line_12 $$ status = Nfs3Status.NFS3_OK-->Line_20 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_41 $$ entry = pendingCommits.firstEntry()-->Line_34 $$ pendingCommits.remove(entry.getKey())[ FD ]
Line_2 $$ private void processCommits(long offset) -->Line_28 $$ if (latestAttr.getSize() != offset) [ FD ]
Line_9 $$ int status = Nfs3Status.NFS3ERR_IO-->Line_17 $$ status = Nfs3Status.NFS3ERR_IO[ FD ]
Line_5 $$ Entry<Long, CommitCtx> entry = pendingCommits.firstEntry()-->Line_41 $$ entry = pendingCommits.firstEntry()[ FD ]
Line_5 $$ Entry<Long, CommitCtx> entry = pendingCommits.firstEntry()-->Line_6 $$ if (entry == null || entry.getValue().offset > flushedOffset) [ FD ]
