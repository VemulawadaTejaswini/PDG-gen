Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)-->Line_42 $$ assertThat(diffMap.getUpserts().get(key), equalTo(get(afterMap, key)))[ FD ]
Line_9 $$ for (Integer key : keys) -->Line_17 $$ after.remove(key)[ FD ]
Line_45 $$ if (randomBoolean()) -->Line_51 $$ diffMap = readDiff(in)[ CD ]
Line_12 $$ T beforeMap = createMap(before)-->Line_53 $$ T appliedDiffMap = diffMap.apply(beforeMap)[ FD ]
Line_25 $$ T afterMap = createMap(unmodifiableMap(after))-->Line_42 $$ assertThat(diffMap.getUpserts().get(key), equalTo(get(afterMap, key)))[ FD ]
Line_9 $$ for (Integer key : keys) -->Line_31 $$ assertThat(diffMap.getDiffs().get(key).apply(get(beforeMap, key)), equalTo(get(afterMap, key)))[ FD ]
Line_14 $$ Map<Integer, V> after = new HashMap()-->Line_17 $$ after.remove(key)[ FD ]
Line_28 $$ if (diffableValues()) -->Line_38 $$ assertThat(diffMap.getDiffs(), equalTo(emptyMap()))[ CD ]
Line_8 $$ Map<Integer, V> before = new HashMap()-->Line_12 $$ T beforeMap = createMap(before)[ FD ]
Line_25 $$ T afterMap = createMap(unmodifiableMap(after))-->Line_66 $$ assertThat(get(appliedDiffMap, key), equalTo(get(afterMap, key)))[ FD ]
Line_53 $$ T appliedDiffMap = diffMap.apply(beforeMap)-->Line_62 $$ assertThat(get(appliedDiffMap, key), not(equalTo(get(beforeMap, key))))[ FD ]
Line_28 $$ if (diffableValues()) -->Line_33 $$ assertThat(diffMap.getUpserts().keySet(), equalTo(keysToAdd))[ CD ]
Line_45 $$ if (randomBoolean()) -->Line_49 $$ StreamInput in = StreamInput.wrap(out.bytes())[ CD ]
Line_9 $$ for (Integer key : keys) -->Line_56 $$ assertThat(get(appliedDiffMap, key), nullValue())[ FD ]
Line_9 $$ for (Integer key : keys) -->Line_20 $$ after.put(key, createValue(key, false))[ FD ]
Line_53 $$ T appliedDiffMap = diffMap.apply(beforeMap)-->Line_54 $$ assertThat(size(appliedDiffMap), equalTo(keys.size() - keysToRemove.size() + keysToAdd.size()))[ FD ]
Line_25 $$ T afterMap = createMap(unmodifiableMap(after))-->Line_35 $$ assertThat(diffMap.getUpserts().get(key), equalTo(get(afterMap, key)))[ FD ]
Line_28 $$ if (diffableValues()) -->Line_29 $$ assertThat(diffMap.getDiffs().keySet(), equalTo(keysToOverride))[ CD ]
Line_2 $$ public void execute() throws IOException -->Line_54 $$ assertThat(size(appliedDiffMap), equalTo(keys.size() - keysToRemove.size() + keysToAdd.size()))[ CD ]
Line_9 $$ for (Integer key : keys) -->Line_42 $$ assertThat(diffMap.getUpserts().get(key), equalTo(get(afterMap, key)))[ FD ]
Line_25 $$ T afterMap = createMap(unmodifiableMap(after))-->Line_63 $$ assertThat(get(appliedDiffMap, key), equalTo(get(afterMap, key)))[ FD ]
Line_2 $$ public void execute() throws IOException -->Line_3 $$ logger.debug("Keys in 'before' map: [ CD ]
Line_45 $$ if (randomBoolean()) -->Line_48 $$ diffMap.writeTo(out)[ CD ]
Line_51 $$ diffMap = readDiff(in)-->Line_53 $$ T appliedDiffMap = diffMap.apply(beforeMap)[ FD ]
Line_9 $$ for (Integer key : keys) -->Line_10 $$ before.put(key, createValue(key, true))[ FD ]
Line_47 $$ BytesStreamOutput out = new BytesStreamOutput()-->Line_49 $$ StreamInput in = StreamInput.wrap(out.bytes())[ FD ]
Line_49 $$ StreamInput in = StreamInput.wrap(out.bytes())-->Line_51 $$ diffMap = readDiff(in)[ FD ]
Line_2 $$ public void execute() throws IOException -->Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)[ CD ]
Line_2 $$ public void execute() throws IOException -->Line_6 $$ logger.debug("Keys to add: [ CD ]
Line_9 $$ for (Integer key : keys) -->Line_23 $$ after.put(key, createValue(key, false))[ FD ]
Line_9 $$ for (Integer key : keys) -->Line_59 $$ assertThat(get(appliedDiffMap, key), equalTo(get(beforeMap, key)))[ FD ]
Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)-->Line_38 $$ assertThat(diffMap.getDiffs(), equalTo(emptyMap()))[ FD ]
Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)-->Line_40 $$ assertThat(diffMap.getUpserts().keySet(), equalTo(keysToAddAndOverride))[ FD ]
Line_25 $$ T afterMap = createMap(unmodifiableMap(after))-->Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)[ FD ]
Line_2 $$ public void execute() throws IOException -->Line_28 $$ if (diffableValues()) [ CD ]
Line_14 $$ Map<Integer, V> after = new HashMap()-->Line_20 $$ after.put(key, createValue(key, false))[ FD ]
Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)-->Line_33 $$ assertThat(diffMap.getUpserts().keySet(), equalTo(keysToAdd))[ FD ]
Line_53 $$ T appliedDiffMap = diffMap.apply(beforeMap)-->Line_63 $$ assertThat(get(appliedDiffMap, key), equalTo(get(afterMap, key)))[ FD ]
Line_2 $$ public void execute() throws IOException -->Line_12 $$ T beforeMap = createMap(before)[ CD ]
Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)-->Line_29 $$ assertThat(diffMap.getDiffs().keySet(), equalTo(keysToOverride))[ FD ]
Line_53 $$ T appliedDiffMap = diffMap.apply(beforeMap)-->Line_56 $$ assertThat(get(appliedDiffMap, key), nullValue())[ FD ]
Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)-->Line_27 $$ assertThat(new HashSet(diffMap.getDeletes()), equalTo(keysToRemove))[ FD ]
Line_39 $$ Set<Integer> keysToAddAndOverride = Sets.union(keysToAdd, keysToOverride)-->Line_40 $$ assertThat(diffMap.getUpserts().keySet(), equalTo(keysToAddAndOverride))[ FD ]
Line_53 $$ T appliedDiffMap = diffMap.apply(beforeMap)-->Line_59 $$ assertThat(get(appliedDiffMap, key), equalTo(get(beforeMap, key)))[ FD ]
Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)-->Line_48 $$ diffMap.writeTo(out)[ FD ]
Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)-->Line_51 $$ diffMap = readDiff(in)[ FD ]
Line_14 $$ Map<Integer, V> after = new HashMap()-->Line_15 $$ after.putAll(before)[ FD ]
Line_9 $$ for (Integer key : keys) -->Line_66 $$ assertThat(get(appliedDiffMap, key), equalTo(get(afterMap, key)))[ FD ]
Line_8 $$ Map<Integer, V> before = new HashMap()-->Line_15 $$ after.putAll(before)[ FD ]
Line_9 $$ for (Integer key : keys) -->Line_63 $$ assertThat(get(appliedDiffMap, key), equalTo(get(afterMap, key)))[ FD ]
Line_9 $$ for (Integer key : keys) -->Line_35 $$ assertThat(diffMap.getUpserts().get(key), equalTo(get(afterMap, key)))[ FD ]
Line_2 $$ public void execute() throws IOException -->Line_15 $$ after.putAll(before)[ CD ]
Line_2 $$ public void execute() throws IOException -->Line_14 $$ Map<Integer, V> after = new HashMap()[ CD ]
Line_12 $$ T beforeMap = createMap(before)-->Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)[ FD ]
Line_14 $$ Map<Integer, V> after = new HashMap()-->Line_23 $$ after.put(key, createValue(key, false))[ FD ]
Line_14 $$ Map<Integer, V> after = new HashMap()-->Line_25 $$ T afterMap = createMap(unmodifiableMap(after))[ FD ]
Line_25 $$ T afterMap = createMap(unmodifiableMap(after))-->Line_31 $$ assertThat(diffMap.getDiffs().get(key).apply(get(beforeMap, key)), equalTo(get(afterMap, key)))[ FD ]
Line_45 $$ if (randomBoolean()) -->Line_47 $$ BytesStreamOutput out = new BytesStreamOutput()[ CD ]
Line_2 $$ public void execute() throws IOException -->Line_5 $$ logger.debug("Keys to override: [ CD ]
Line_2 $$ public void execute() throws IOException -->Line_45 $$ if (randomBoolean()) [ CD ]
Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)-->Line_31 $$ assertThat(diffMap.getDiffs().get(key).apply(get(beforeMap, key)), equalTo(get(afterMap, key)))[ FD ]
Line_2 $$ public void execute() throws IOException -->Line_8 $$ Map<Integer, V> before = new HashMap()[ CD ]
Line_12 $$ T beforeMap = createMap(before)-->Line_62 $$ assertThat(get(appliedDiffMap, key), not(equalTo(get(beforeMap, key))))[ FD ]
Line_28 $$ if (diffableValues()) -->Line_39 $$ Set<Integer> keysToAddAndOverride = Sets.union(keysToAdd, keysToOverride)[ CD ]
Line_53 $$ T appliedDiffMap = diffMap.apply(beforeMap)-->Line_66 $$ assertThat(get(appliedDiffMap, key), equalTo(get(afterMap, key)))[ FD ]
Line_9 $$ for (Integer key : keys) -->Line_62 $$ assertThat(get(appliedDiffMap, key), not(equalTo(get(beforeMap, key))))[ FD ]
Line_8 $$ Map<Integer, V> before = new HashMap()-->Line_10 $$ before.put(key, createValue(key, true))[ FD ]
Line_2 $$ public void execute() throws IOException -->Line_25 $$ T afterMap = createMap(unmodifiableMap(after))[ CD ]
Line_12 $$ T beforeMap = createMap(before)-->Line_59 $$ assertThat(get(appliedDiffMap, key), equalTo(get(beforeMap, key)))[ FD ]
Line_47 $$ BytesStreamOutput out = new BytesStreamOutput()-->Line_48 $$ diffMap.writeTo(out)[ FD ]
Line_28 $$ if (diffableValues()) -->Line_40 $$ assertThat(diffMap.getUpserts().keySet(), equalTo(keysToAddAndOverride))[ CD ]
Line_2 $$ public void execute() throws IOException -->Line_27 $$ assertThat(new HashSet(diffMap.getDeletes()), equalTo(keysToRemove))[ CD ]
Line_2 $$ public void execute() throws IOException -->Line_53 $$ T appliedDiffMap = diffMap.apply(beforeMap)[ CD ]
Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)-->Line_53 $$ T appliedDiffMap = diffMap.apply(beforeMap)[ FD ]
Line_26 $$ MapDiff<Integer, V, T> diffMap = diff(beforeMap, afterMap)-->Line_35 $$ assertThat(diffMap.getUpserts().get(key), equalTo(get(afterMap, key)))[ FD ]
Line_2 $$ public void execute() throws IOException -->Line_4 $$ logger.debug("Keys to remove: [ CD ]
Line_12 $$ T beforeMap = createMap(before)-->Line_31 $$ assertThat(diffMap.getDiffs().get(key).apply(get(beforeMap, key)), equalTo(get(afterMap, key)))[ FD ]
