Line_9 $$ final VirtualFile file = filePath.getVirtualFile()-->Line_11 $$ myEditorNotifications.updateNotifications(file)[ FD ]
Line_9 $$ final VirtualFile file = filePath.getVirtualFile()-->Line_12 $$ myFileStatusManager.fileStatusChanged(file)[ FD ]
Line_3 $$ for (Change change : changes) -->Line_4 $$ ContentRevision revision = change.getAfterRevision()[ FD ]
Line_5 $$ if (revision != null) -->Line_6 $$ FilePath filePath = revision.getFile()[ CD ]
Line_6 $$ FilePath filePath = revision.getFile()-->Line_7 $$ String path = filePath.getPath()[ FD ]
Line_5 $$ if (revision != null) -->Line_10 $$ if (wasRemoved != null && file != null) [ CD ]
Line_4 $$ ContentRevision revision = change.getAfterRevision()-->Line_5 $$ if (revision != null) [ FD ]
Line_5 $$ if (revision != null) -->Line_8 $$ final Conflict wasRemoved = myConflicts.remove(path)[ CD ]
Line_7 $$ String path = filePath.getPath()-->Line_8 $$ final Conflict wasRemoved = myConflicts.remove(path)[ FD ]
Line_10 $$ if (wasRemoved != null && file != null) -->Line_11 $$ myEditorNotifications.updateNotifications(file)[ CD ]
Line_6 $$ FilePath filePath = revision.getFile()-->Line_9 $$ final VirtualFile file = filePath.getVirtualFile()[ FD ]
Line_5 $$ if (revision != null) -->Line_7 $$ String path = filePath.getPath()[ CD ]
Line_4 $$ ContentRevision revision = change.getAfterRevision()-->Line_6 $$ FilePath filePath = revision.getFile()[ FD ]
Line_10 $$ if (wasRemoved != null && file != null) -->Line_12 $$ myFileStatusManager.fileStatusChanged(file)[ CD ]
Line_5 $$ if (revision != null) -->Line_9 $$ final VirtualFile file = filePath.getVirtualFile()[ CD ]
