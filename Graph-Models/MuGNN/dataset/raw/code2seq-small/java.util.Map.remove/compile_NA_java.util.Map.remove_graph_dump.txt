Line_17 $$ SecurityManager sm = System.getSecurityManager()-->Line_18 $$ if (sm != null) [ FD ]
Line_2 $$ public Object compile(String script, Map<String, String> params) -->Line_4 $$ if (params.isEmpty()) [ FD ]
Line_17 $$ SecurityManager sm = System.getSecurityManager()-->Line_19 $$ sm.checkPermission(new SpecialPermission())[ FD ]
Line_4 $$ if (params.isEmpty()) -->Line_9 $$ String value = clone.remove(NUMERIC_OVERFLOW)[ CD ]
Line_26 $$ return AccessController.doPrivileged(new PrivilegedAction<Executable>() -->Line_28 $$ return Compiler.compile(loader, "something", script, definition, compilerSettings)[ CD ]
Line_9 $$ String value = clone.remove(NUMERIC_OVERFLOW)-->Line_11 $$ compilerSettings.setNumericOverflow(Boolean.parseBoolean(value))[ FD ]
Line_2 $$ public Object compile(String script, Map<String, String> params) -->Line_3 $$ final CompilerSettings compilerSettings[ CD ]
Line_4 $$ if (params.isEmpty()) -->Line_7 $$ compilerSettings = new CompilerSettings()[ CD ]
Line_7 $$ compilerSettings = new CompilerSettings()-->Line_11 $$ compilerSettings.setNumericOverflow(Boolean.parseBoolean(value))[ FD ]
Line_9 $$ String value = clone.remove(NUMERIC_OVERFLOW)-->Line_10 $$ if (value != null) [ FD ]
Line_8 $$ Map<String, String> clone = new HashMap(params)-->Line_13 $$ if (!clone.isEmpty()) [ FD ]
Line_3 $$ final CompilerSettings compilerSettings-->Line_11 $$ compilerSettings.setNumericOverflow(Boolean.parseBoolean(value))[ FD ]
Line_21 $$ Compiler.Loader loader = AccessController.doPrivileged(new PrivilegedAction<Compiler.Loader>() -->Line_28 $$ return Compiler.compile(loader, "something", script, definition, compilerSettings)[ FD ]
Line_18 $$ if (sm != null) -->Line_19 $$ sm.checkPermission(new SpecialPermission())[ CD ]
Line_2 $$ public Object compile(String script, Map<String, String> params) -->Line_21 $$ Compiler.Loader loader = AccessController.doPrivileged(new PrivilegedAction<Compiler.Loader>() [ CD ]
Line_2 $$ public Object compile(String script, Map<String, String> params) -->Line_18 $$ if (sm != null) [ CD ]
Line_5 $$ compilerSettings = DEFAULT_COMPILER_SETTINGS-->Line_11 $$ compilerSettings.setNumericOverflow(Boolean.parseBoolean(value))[ FD ]
Line_5 $$ compilerSettings = DEFAULT_COMPILER_SETTINGS-->Line_28 $$ return Compiler.compile(loader, "something", script, definition, compilerSettings)[ FD ]
Line_5 $$ compilerSettings = DEFAULT_COMPILER_SETTINGS-->Line_7 $$ compilerSettings = new CompilerSettings()[ FD ]
Line_3 $$ final CompilerSettings compilerSettings-->Line_7 $$ compilerSettings = new CompilerSettings()[ FD ]
Line_2 $$ public Object compile(String script, Map<String, String> params) -->Line_4 $$ if (params.isEmpty()) [ CD ]
Line_2 $$ public Object compile(String script, Map<String, String> params) -->Line_26 $$ return AccessController.doPrivileged(new PrivilegedAction<Executable>() [ CD ]
Line_8 $$ Map<String, String> clone = new HashMap(params)-->Line_9 $$ String value = clone.remove(NUMERIC_OVERFLOW)[ FD ]
Line_2 $$ public Object compile(String script, Map<String, String> params) -->Line_17 $$ SecurityManager sm = System.getSecurityManager()[ CD ]
Line_3 $$ final CompilerSettings compilerSettings-->Line_5 $$ compilerSettings = DEFAULT_COMPILER_SETTINGS[ FD ]
Line_2 $$ public Object compile(String script, Map<String, String> params) -->Line_28 $$ return Compiler.compile(loader, "something", script, definition, compilerSettings)[ FD ]
Line_4 $$ if (params.isEmpty()) -->Line_8 $$ Map<String, String> clone = new HashMap(params)[ CD ]
Line_4 $$ if (params.isEmpty()) -->Line_10 $$ if (value != null) [ CD ]
Line_21 $$ Compiler.Loader loader = AccessController.doPrivileged(new PrivilegedAction<Compiler.Loader>() -->Line_23 $$ return new Compiler.Loader(getClass().getClassLoader())[ CD ]
Line_7 $$ compilerSettings = new CompilerSettings()-->Line_28 $$ return Compiler.compile(loader, "something", script, definition, compilerSettings)[ FD ]
Line_10 $$ if (value != null) -->Line_11 $$ compilerSettings.setNumericOverflow(Boolean.parseBoolean(value))[ CD ]
Line_3 $$ final CompilerSettings compilerSettings-->Line_28 $$ return Compiler.compile(loader, "something", script, definition, compilerSettings)[ FD ]
Line_4 $$ if (params.isEmpty()) -->Line_13 $$ if (!clone.isEmpty()) [ CD ]
Line_4 $$ if (params.isEmpty()) -->Line_5 $$ compilerSettings = DEFAULT_COMPILER_SETTINGS[ CD ]
