Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_6 $$ metamodelBuilder.applyScanEnvironment(new StandardJpaScanEnvironmentImpl(persistenceUnit))[ CD ]
Line_3 $$ if (persistenceUnit.getTempClassLoader() != null) -->Line_4 $$ metamodelBuilder.applyTempClassLoader(persistenceUnit.getTempClassLoader())[ CD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_7 $$ metamodelBuilder.applyScanOptions(new StandardScanOptions((String) configurationValues.get(org.hibernate.cfg.AvailableSettings.SCANNER_DISCOVERY), persistenceUnit.isExcludeUnlistedClasses()))[ FD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_23 $$ if (attributeConverterDefinitions != null) [ FD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_4 $$ metamodelBuilder.applyTempClassLoader(persistenceUnit.getTempClassLoader())[ FD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_3 $$ if (persistenceUnit.getTempClassLoader() != null) [ CD ]
Line_19 $$ for (TypeContributor typeContributor : typeContributorList.getTypeContributors()) -->Line_20 $$ metamodelBuilder.applyTypes(typeContributor)[ FD ]
Line_24 $$ for (AttributeConverterDefinition attributeConverterDefinition : attributeConverterDefinitions) -->Line_25 $$ metamodelBuilder.applyAttributeConverter(attributeConverterDefinition)[ FD ]
Line_17 $$ final TypeContributorList typeContributorList = (TypeContributorList) configurationValues.remove(TYPE_CONTRIBUTORS)-->Line_18 $$ if (typeContributorList != null) [ FD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_6 $$ metamodelBuilder.applyScanEnvironment(new StandardJpaScanEnvironmentImpl(persistenceUnit))[ FD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_7 $$ metamodelBuilder.applyScanOptions(new StandardScanOptions((String) configurationValues.get(org.hibernate.cfg.AvailableSettings.SCANNER_DISCOVERY), persistenceUnit.isExcludeUnlistedClasses()))[ CD ]
Line_13 $$ final Object namingStrategySetting = configurationValues.remove(AvailableSettings.NAMING_STRATEGY)-->Line_14 $$ if (namingStrategySetting != null) [ FD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_25 $$ metamodelBuilder.applyAttributeConverter(attributeConverterDefinition)[ FD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_8 $$ if (mergedSettings.cacheRegionDefinitions != null) [ CD ]
Line_17 $$ final TypeContributorList typeContributorList = (TypeContributorList) configurationValues.remove(TYPE_CONTRIBUTORS)-->Line_19 $$ for (TypeContributor typeContributor : typeContributorList.getTypeContributors()) [ FD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_23 $$ if (attributeConverterDefinitions != null) [ CD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_17 $$ final TypeContributorList typeContributorList = (TypeContributorList) configurationValues.remove(TYPE_CONTRIBUTORS)[ CD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_20 $$ metamodelBuilder.applyTypes(typeContributor)[ FD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_10 $$ metamodelBuilder.applyCacheRegionDefinition(localCacheRegionDefinition)[ FD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_14 $$ if (namingStrategySetting != null) [ CD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_13 $$ final Object namingStrategySetting = configurationValues.remove(AvailableSettings.NAMING_STRATEGY)[ CD ]
Line_2 $$ protected void populate(MetadataBuilder metamodelBuilder, MergedSettings mergedSettings, StandardServiceRegistry ssr, List<AttributeConverterDefinition> attributeConverterDefinitions) -->Line_18 $$ if (typeContributorList != null) [ CD ]
Line_9 $$ for (CacheRegionDefinition localCacheRegionDefinition : mergedSettings.cacheRegionDefinitions) -->Line_10 $$ metamodelBuilder.applyCacheRegionDefinition(localCacheRegionDefinition)[ FD ]
Line_14 $$ if (namingStrategySetting != null) -->Line_15 $$ DeprecationLogger.DEPRECATION_LOGGER.logDeprecatedNamingStrategySetting(AvailableSettings.NAMING_STRATEGY, org.hibernate.cfg.AvailableSettings.IMPLICIT_NAMING_STRATEGY, org.hibernate.cfg.AvailableSettings.PHYSICAL_NAMING_STRATEGY)[ CD ]
