Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_29 $$ final SecurityDomain sd7a = new SecurityDomain.Builder().name(DEP7a).loginModules(loginModuleBuilder.build()).build()[ CD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_5 $$ lmOptions.put("usersProperties", PropertyFilesSetup.FILE_USERS.getAbsolutePath())[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_6 $$ lmOptions.put("rolesProperties", PropertyFilesSetup.FILE_ROLES.getAbsolutePath())[ CD ]
Line_4 $$ final Builder loginModuleBuilder = new SecurityModule.Builder().name("UsersRoles").options(lmOptions)-->Line_15 $$ final SecurityDomain sd4 = new SecurityDomain.Builder().name(DEP4).loginModules(loginModuleBuilder.build()).build()[ FD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_4 $$ final Builder loginModuleBuilder = new SecurityModule.Builder().name("UsersRoles").options(lmOptions)[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_11 $$ final SecurityDomain sd2 = new SecurityDomain.Builder().name(DEP2).loginModules(loginModuleBuilder.build()).build()[ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_17 $$ lmOptions.put("hashUserPassword", "false")[ CD ]
Line_4 $$ final Builder loginModuleBuilder = new SecurityModule.Builder().name("UsersRoles").options(lmOptions)-->Line_31 $$ final SecurityDomain sd7b = new SecurityDomain.Builder().name(DEP7b).loginModules(loginModuleBuilder.build()).build()[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_10 $$ lmOptions.put("hashAlgorithm", "MD5")[ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_30 $$ lmOptions.put("ignorePasswordCase", "false")[ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_32 $$ return new SecurityDomain[] [ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_9 $$ lmOptions.remove("rolesProperties")[ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_13 $$ final SecurityDomain sd3 = new SecurityDomain.Builder().name(DEP3).loginModules(loginModuleBuilder.build()).build()[ CD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_26 $$ lmOptions.remove("hashStorePassword")[ FD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_27 $$ lmOptions.remove("hashAlgorithm")[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_28 $$ lmOptions.put("ignorePasswordCase", "true")[ CD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_24 $$ lmOptions.remove("hashUserPassword")[ FD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_17 $$ lmOptions.put("hashUserPassword", "false")[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_8 $$ lmOptions.remove("usersProperties")[ CD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_19 $$ lmOptions.put("hashUserPassword", "true")[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_23 $$ final SecurityDomain sd6a = new SecurityDomain.Builder().name(DEP6a).loginModules(loginModuleBuilder.build()).build()[ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_4 $$ final Builder loginModuleBuilder = new SecurityModule.Builder().name("UsersRoles").options(lmOptions)[ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_25 $$ final SecurityDomain sd6b = new SecurityDomain.Builder().name(DEP6b).loginModules(loginModuleBuilder.build()).build()[ CD ]
Line_4 $$ final Builder loginModuleBuilder = new SecurityModule.Builder().name("UsersRoles").options(lmOptions)-->Line_7 $$ final SecurityDomain sd1 = new SecurityDomain.Builder().name(DEP1).loginModules(loginModuleBuilder.build()).build()[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_14 $$ lmOptions.put("hashEncoding", "base64")[ CD ]
Line_4 $$ final Builder loginModuleBuilder = new SecurityModule.Builder().name("UsersRoles").options(lmOptions)-->Line_18 $$ final SecurityDomain sd5a = new SecurityDomain.Builder().name(DEP5a).loginModules(loginModuleBuilder.build()).build()[ FD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_8 $$ lmOptions.remove("usersProperties")[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_20 $$ final SecurityDomain sd5b = new SecurityDomain.Builder().name(DEP5b).loginModules(loginModuleBuilder.build()).build()[ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_27 $$ lmOptions.remove("hashAlgorithm")[ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_31 $$ final SecurityDomain sd7b = new SecurityDomain.Builder().name(DEP7b).loginModules(loginModuleBuilder.build()).build()[ CD ]
Line_4 $$ final Builder loginModuleBuilder = new SecurityModule.Builder().name("UsersRoles").options(lmOptions)-->Line_25 $$ final SecurityDomain sd6b = new SecurityDomain.Builder().name(DEP6b).loginModules(loginModuleBuilder.build()).build()[ FD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_6 $$ lmOptions.put("rolesProperties", PropertyFilesSetup.FILE_ROLES.getAbsolutePath())[ FD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_21 $$ lmOptions.put("hashUserPassword", "false")[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_24 $$ lmOptions.remove("hashUserPassword")[ CD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_12 $$ lmOptions.put("hashEncoding", "hex")[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_7 $$ final SecurityDomain sd1 = new SecurityDomain.Builder().name(DEP1).loginModules(loginModuleBuilder.build()).build()[ CD ]
Line_4 $$ final Builder loginModuleBuilder = new SecurityModule.Builder().name("UsersRoles").options(lmOptions)-->Line_29 $$ final SecurityDomain sd7a = new SecurityDomain.Builder().name(DEP7a).loginModules(loginModuleBuilder.build()).build()[ FD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_30 $$ lmOptions.put("ignorePasswordCase", "false")[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_26 $$ lmOptions.remove("hashStorePassword")[ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_18 $$ final SecurityDomain sd5a = new SecurityDomain.Builder().name(DEP5a).loginModules(loginModuleBuilder.build()).build()[ CD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_22 $$ lmOptions.put("hashStorePassword", "true")[ FD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_9 $$ lmOptions.remove("rolesProperties")[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_21 $$ lmOptions.put("hashUserPassword", "false")[ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_12 $$ lmOptions.put("hashEncoding", "hex")[ CD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_14 $$ lmOptions.put("hashEncoding", "base64")[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_16 $$ lmOptions.remove("hashEncoding")[ CD ]
Line_4 $$ final Builder loginModuleBuilder = new SecurityModule.Builder().name("UsersRoles").options(lmOptions)-->Line_23 $$ final SecurityDomain sd6a = new SecurityDomain.Builder().name(DEP6a).loginModules(loginModuleBuilder.build()).build()[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_5 $$ lmOptions.put("usersProperties", PropertyFilesSetup.FILE_USERS.getAbsolutePath())[ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()[ CD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_19 $$ lmOptions.put("hashUserPassword", "true")[ CD ]
Line_4 $$ final Builder loginModuleBuilder = new SecurityModule.Builder().name("UsersRoles").options(lmOptions)-->Line_11 $$ final SecurityDomain sd2 = new SecurityDomain.Builder().name(DEP2).loginModules(loginModuleBuilder.build()).build()[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_15 $$ final SecurityDomain sd4 = new SecurityDomain.Builder().name(DEP4).loginModules(loginModuleBuilder.build()).build()[ CD ]
Line_4 $$ final Builder loginModuleBuilder = new SecurityModule.Builder().name("UsersRoles").options(lmOptions)-->Line_20 $$ final SecurityDomain sd5b = new SecurityDomain.Builder().name(DEP5b).loginModules(loginModuleBuilder.build()).build()[ FD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_10 $$ lmOptions.put("hashAlgorithm", "MD5")[ FD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_28 $$ lmOptions.put("ignorePasswordCase", "true")[ FD ]
Line_2 $$ protected SecurityDomain[] getSecurityDomains() -->Line_22 $$ lmOptions.put("hashStorePassword", "true")[ CD ]
Line_3 $$ final Map<String, String> lmOptions = new HashMap<String, String>()-->Line_16 $$ lmOptions.remove("hashEncoding")[ FD ]
Line_4 $$ final Builder loginModuleBuilder = new SecurityModule.Builder().name("UsersRoles").options(lmOptions)-->Line_13 $$ final SecurityDomain sd3 = new SecurityDomain.Builder().name(DEP3).loginModules(loginModuleBuilder.build()).build()[ FD ]
