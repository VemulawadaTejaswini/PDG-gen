Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_5 $$ if (value != null) [ CD ]
Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_3 $$ element = TreeAnchorizer.getService().createAnchor(element)[ CD ]
Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_12 $$ final boolean reallyRemoved = nodes.remove(node)[ FD ]
Line_4 $$ final Object value = myElementToNodeMap.get(element)-->Line_5 $$ if (value != null) [ FD ]
Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_4 $$ final Object value = myElementToNodeMap.get(element)[ FD ]
Line_6 $$ if (value instanceof DefaultMutableTreeNode) -->Line_12 $$ final boolean reallyRemoved = nodes.remove(node)[ CD ]
Line_14 $$ if (nodes.isEmpty()) -->Line_15 $$ myElementToNodeMap.remove(element)[ CD ]
Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_21 $$ TreeAnchorizer.getService().freeAnchor(element)[ CD ]
Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_7 $$ if (value.equals(node)) [ FD ]
Line_6 $$ if (value instanceof DefaultMutableTreeNode) -->Line_7 $$ if (value.equals(node)) [ CD ]
Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_4 $$ final Object value = myElementToNodeMap.get(element)[ CD ]
Line_4 $$ final Object value = myElementToNodeMap.get(element)-->Line_7 $$ if (value.equals(node)) [ FD ]
Line_11 $$ List<DefaultMutableTreeNode> nodes = (List<DefaultMutableTreeNode>) value-->Line_14 $$ if (nodes.isEmpty()) [ FD ]
Line_6 $$ if (value instanceof DefaultMutableTreeNode) -->Line_11 $$ List<DefaultMutableTreeNode> nodes = (List<DefaultMutableTreeNode>) value[ CD ]
Line_6 $$ if (value instanceof DefaultMutableTreeNode) -->Line_13 $$ if (reallyRemoved) [ CD ]
Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_21 $$ TreeAnchorizer.getService().freeAnchor(element)[ FD ]
Line_4 $$ final Object value = myElementToNodeMap.get(element)-->Line_6 $$ if (value instanceof DefaultMutableTreeNode) [ FD ]
Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_8 $$ myElementToNodeMap.remove(element)[ FD ]
Line_7 $$ if (value.equals(node)) -->Line_8 $$ myElementToNodeMap.remove(element)[ CD ]
Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_20 $$ remapNodeActions(element, elementToPutNodeActionsFor)[ FD ]
Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_3 $$ element = TreeAnchorizer.getService().createAnchor(element)[ FD ]
Line_5 $$ if (value != null) -->Line_6 $$ if (value instanceof DefaultMutableTreeNode) [ CD ]
Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_20 $$ remapNodeActions(element, elementToPutNodeActionsFor)[ CD ]
Line_2 $$ private void removeMapping(@NotNull Object element, DefaultMutableTreeNode node, @Nullable Object elementToPutNodeActionsFor) -->Line_15 $$ myElementToNodeMap.remove(element)[ FD ]
Line_11 $$ List<DefaultMutableTreeNode> nodes = (List<DefaultMutableTreeNode>) value-->Line_12 $$ final boolean reallyRemoved = nodes.remove(node)[ FD ]
Line_13 $$ if (reallyRemoved) -->Line_14 $$ if (nodes.isEmpty()) [ CD ]
