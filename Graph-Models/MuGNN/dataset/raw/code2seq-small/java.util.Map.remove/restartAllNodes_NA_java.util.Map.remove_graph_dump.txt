Line_6 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_30 $$ nodeAndClient.restart(callback)[ FD ]
Line_6 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_50 $$ nodeAndClient.restart(callback)[ FD ]
Line_6 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_13 $$ nodeAndClient.close()[ FD ]
Line_7 $$ if (!callback.doRestart(nodeAndClient.name)) -->Line_9 $$ toRemove.add(nodeAndClient)[ CD ]
Line_2 $$ private void restartAllNodes(boolean rollingRestart, RestartCallback callback) throws Exception -->Line_50 $$ nodeAndClient.restart(callback)[ FD ]
Line_7 $$ if (!callback.doRestart(nodeAndClient.name)) -->Line_10 $$ if (activeDisruptionScheme != null) [ CD ]
Line_7 $$ if (!callback.doRestart(nodeAndClient.name)) -->Line_13 $$ nodeAndClient.close()[ CD ]
Line_2 $$ private void restartAllNodes(boolean rollingRestart, RestartCallback callback) throws Exception -->Line_4 $$ List<NodeAndClient> toRemove = new ArrayList()[ CD ]
Line_4 $$ List<NodeAndClient> toRemove = new ArrayList()-->Line_9 $$ toRemove.add(nodeAndClient)[ FD ]
Line_23 $$ int numNodesRestarted = 0-->Line_25 $$ callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())[ FD ]
Line_27 $$ if (activeDisruptionScheme != null) -->Line_28 $$ activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)[ CD ]
Line_6 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_38 $$ callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())[ FD ]
Line_6 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_25 $$ callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())[ FD ]
Line_7 $$ if (!callback.doRestart(nodeAndClient.name)) -->Line_8 $$ logger.info("Closing node [[ CD ]
Line_47 $$ if (activeDisruptionScheme != null) -->Line_48 $$ activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)[ CD ]
Line_6 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_9 $$ toRemove.add(nodeAndClient)[ FD ]
Line_2 $$ private void restartAllNodes(boolean rollingRestart, RestartCallback callback) throws Exception -->Line_21 $$ logger.info("Restarting remaining nodes rollingRestart [[ CD ]
Line_2 $$ private void restartAllNodes(boolean rollingRestart, RestartCallback callback) throws Exception -->Line_7 $$ if (!callback.doRestart(nodeAndClient.name)) [ FD ]
Line_40 $$ if (activeDisruptionScheme != null) -->Line_41 $$ activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)[ CD ]
Line_23 $$ int numNodesRestarted = 0-->Line_38 $$ callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())[ FD ]
Line_10 $$ if (activeDisruptionScheme != null) -->Line_11 $$ activeDisruptionScheme.removeFromNode(nodeAndClient.name, this)[ CD ]
Line_2 $$ private void restartAllNodes(boolean rollingRestart, RestartCallback callback) throws Exception -->Line_25 $$ callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())[ FD ]
Line_22 $$ if (rollingRestart) -->Line_23 $$ int numNodesRestarted = 0[ CD ]
Line_2 $$ private void restartAllNodes(boolean rollingRestart, RestartCallback callback) throws Exception -->Line_21 $$ logger.info("Restarting remaining nodes rollingRestart [[ FD ]
Line_6 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_43 $$ nodeAndClient.closeNode()[ FD ]
Line_2 $$ private void restartAllNodes(boolean rollingRestart, RestartCallback callback) throws Exception -->Line_22 $$ if (rollingRestart) [ CD ]
Line_2 $$ private void restartAllNodes(boolean rollingRestart, RestartCallback callback) throws Exception -->Line_30 $$ nodeAndClient.restart(callback)[ FD ]
Line_2 $$ private void restartAllNodes(boolean rollingRestart, RestartCallback callback) throws Exception -->Line_38 $$ callback.doAfterNodes(numNodesRestarted++, nodeAndClient.nodeClient())[ FD ]
Line_31 $$ if (activeDisruptionScheme != null) -->Line_32 $$ activeDisruptionScheme.applyToNode(nodeAndClient.name, this)[ CD ]
Line_51 $$ if (activeDisruptionScheme != null) -->Line_52 $$ activeDisruptionScheme.applyToNode(nodeAndClient.name, this)[ CD ]
Line_2 $$ private void restartAllNodes(boolean rollingRestart, RestartCallback callback) throws Exception -->Line_3 $$ ensureOpen()[ CD ]
