Line_2 $$ public synchronized void clear() -->Line_5 $$ store.remove(classLoader)[ CD ]
Line_4 $$ final Map<ClassLoader, T> store = new IdentityHashMap<ClassLoader, T>(this.store)-->Line_5 $$ store.remove(classLoader)[ FD ]
Line_3 $$ ClassLoader classLoader = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_6 $$ if (deploymentClassLoaders.containsKey(classLoader)) [ FD ]
Line_3 $$ ClassLoader classLoader = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_5 $$ store.remove(classLoader)[ FD ]
Line_4 $$ final Map<ClassLoader, T> store = new IdentityHashMap<ClassLoader, T>(this.store)-->Line_8 $$ store.remove(cl)[ FD ]
Line_2 $$ public synchronized void clear() -->Line_11 $$ this.store = store[ CD ]
Line_3 $$ ClassLoader classLoader = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_7 $$ for (ClassLoader cl : deploymentClassLoaders.get(classLoader)) [ FD ]
Line_7 $$ for (ClassLoader cl : deploymentClassLoaders.get(classLoader)) -->Line_8 $$ store.remove(cl)[ FD ]
Line_2 $$ public synchronized void clear() -->Line_6 $$ if (deploymentClassLoaders.containsKey(classLoader)) [ CD ]
Line_2 $$ public synchronized void clear() -->Line_3 $$ ClassLoader classLoader = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()[ CD ]
Line_4 $$ final Map<ClassLoader, T> store = new IdentityHashMap<ClassLoader, T>(this.store)-->Line_11 $$ this.store = store[ FD ]
Line_2 $$ public synchronized void clear() -->Line_4 $$ final Map<ClassLoader, T> store = new IdentityHashMap<ClassLoader, T>(this.store)[ CD ]
