Line_2 $$ private void verifyContainerLogs(LogAggregationService logAggregationService, ApplicationId appId, ContainerId[] expectedContainerIds) throws IOException -->Line_3 $$ AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(this.conf, logAggregationService.getRemoteNodeLogFileForApp(appId, this.user))[ CD ]
Line_36 $$ key = new LogKey()-->Line_37 $$ valueStream = reader.next(key)[ FD ]
Line_3 $$ AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(this.conf, logAggregationService.getRemoteNodeLogFileForApp(appId, this.user))-->Line_5 $$ verifyAcls(reader.getApplicationAcls())[ FD ]
Line_8 $$ DataInputStream valueStream-->Line_37 $$ valueStream = reader.next(key)[ FD ]
Line_44 $$ for (String fileType : new String[] -->Line_47 $$ String foundValue = thisContainerMap.remove(fileType)[ FD ]
Line_3 $$ AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(this.conf, logAggregationService.getRemoteNodeLogFileForApp(appId, this.user))-->Line_10 $$ valueStream = reader.next(key)[ FD ]
Line_11 $$ while (valueStream != null) -->Line_15 $$ while (true) [ CD ]
Line_9 $$ LogKey key = new LogKey()-->Line_37 $$ valueStream = reader.next(key)[ FD ]
Line_17 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_20 $$ String[] writtenLines = baos.toString().split(System.getProperty("line.separator"))[ FD ]
Line_7 $$ Map<String, Map<String, String>> logMap = new HashMap<String, Map<String, String>>()-->Line_42 $$ Map<String, String> thisContainerMap = logMap.remove(containerStr)[ FD ]
Line_9 $$ LogKey key = new LogKey()-->Line_14 $$ logMap.put(key.toString(), perContainerMap)[ FD ]
Line_37 $$ valueStream = reader.next(key)-->Line_11 $$ while (valueStream != null) [ FD ]
Line_36 $$ key = new LogKey()-->Line_14 $$ logMap.put(key.toString(), perContainerMap)[ FD ]
Line_9 $$ LogKey key = new LogKey()-->Line_10 $$ valueStream = reader.next(key)[ FD ]
Line_42 $$ Map<String, String> thisContainerMap = logMap.remove(containerStr)-->Line_43 $$ Assert.assertEquals(3, thisContainerMap.size())[ FD ]
Line_3 $$ AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(this.conf, logAggregationService.getRemoteNodeLogFileForApp(appId, this.user))-->Line_37 $$ valueStream = reader.next(key)[ FD ]
Line_2 $$ private void verifyContainerLogs(LogAggregationService logAggregationService, ApplicationId appId, ContainerId[] expectedContainerIds) throws IOException -->Line_5 $$ verifyAcls(reader.getApplicationAcls())[ CD ]
Line_11 $$ while (valueStream != null) -->Line_36 $$ key = new LogKey()[ CD ]
Line_8 $$ DataInputStream valueStream-->Line_11 $$ while (valueStream != null) [ FD ]
Line_3 $$ AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(this.conf, logAggregationService.getRemoteNodeLogFileForApp(appId, this.user))-->Line_55 $$ reader.close()[ FD ]
Line_11 $$ while (valueStream != null) -->Line_12 $$ LOG.info("Found container " + key.toString())[ CD ]
Line_11 $$ while (valueStream != null) -->Line_14 $$ logMap.put(key.toString(), perContainerMap)[ CD ]
Line_8 $$ DataInputStream valueStream-->Line_10 $$ valueStream = reader.next(key)[ FD ]
Line_36 $$ key = new LogKey()-->Line_12 $$ LOG.info("Found container " + key.toString())[ FD ]
Line_42 $$ Map<String, String> thisContainerMap = logMap.remove(containerStr)-->Line_47 $$ String foundValue = thisContainerMap.remove(fileType)[ FD ]
Line_13 $$ Map<String, String> perContainerMap = new HashMap<String, String>()-->Line_28 $$ perContainerMap.put(fileType, logContents)[ FD ]
Line_45 $$ String expectedValue = containerStr + " Hello " + fileType + "!"-->Line_49 $$ Assert.assertEquals(expectedValue, foundValue)[ FD ]
Line_47 $$ String foundValue = thisContainerMap.remove(fileType)-->Line_49 $$ Assert.assertEquals(expectedValue, foundValue)[ FD ]
Line_11 $$ while (valueStream != null) -->Line_13 $$ Map<String, String> perContainerMap = new HashMap<String, String>()[ CD ]
Line_13 $$ Map<String, String> perContainerMap = new HashMap<String, String>()-->Line_31 $$ LOG.info("Log Contents:\n" + perContainerMap.get(fileType))[ FD ]
Line_20 $$ String[] writtenLines = baos.toString().split(System.getProperty("line.separator"))-->Line_27 $$ String logContents = StringUtils.join(Arrays.copyOfRange(writtenLines, 3, writtenLines.length), "\n")[ FD ]
Line_42 $$ Map<String, String> thisContainerMap = logMap.remove(containerStr)-->Line_51 $$ Assert.assertEquals(0, thisContainerMap.size())[ FD ]
Line_2 $$ private void verifyContainerLogs(LogAggregationService logAggregationService, ApplicationId appId, ContainerId[] expectedContainerIds) throws IOException -->Line_3 $$ AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(this.conf, logAggregationService.getRemoteNodeLogFileForApp(appId, this.user))[ FD ]
Line_10 $$ valueStream = reader.next(key)-->Line_37 $$ valueStream = reader.next(key)[ FD ]
Line_22 $$ String fileType = writtenLines[0].substring(9)-->Line_28 $$ perContainerMap.put(fileType, logContents)[ FD ]
Line_10 $$ valueStream = reader.next(key)-->Line_11 $$ while (valueStream != null) [ FD ]
Line_27 $$ String logContents = StringUtils.join(Arrays.copyOfRange(writtenLines, 3, writtenLines.length), "\n")-->Line_28 $$ perContainerMap.put(fileType, logContents)[ FD ]
Line_24 $$ String fileLengthStr = writtenLines[1].substring(11)-->Line_25 $$ long fileLength = Long.parseLong(fileLengthStr)[ FD ]
Line_13 $$ Map<String, String> perContainerMap = new HashMap<String, String>()-->Line_14 $$ logMap.put(key.toString(), perContainerMap)[ FD ]
Line_9 $$ LogKey key = new LogKey()-->Line_12 $$ LOG.info("Found container " + key.toString())[ FD ]
Line_10 $$ valueStream = reader.next(key)-->Line_19 $$ LogReader.readAContainerLogsForALogType(valueStream, ps)[ FD ]
Line_7 $$ Map<String, Map<String, String>> logMap = new HashMap<String, Map<String, String>>()-->Line_14 $$ logMap.put(key.toString(), perContainerMap)[ FD ]
Line_3 $$ AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(this.conf, logAggregationService.getRemoteNodeLogFileForApp(appId, this.user))-->Line_4 $$ Assert.assertEquals(this.user, reader.getApplicationOwner())[ FD ]
Line_7 $$ Map<String, Map<String, String>> logMap = new HashMap<String, Map<String, String>>()-->Line_53 $$ Assert.assertEquals(0, logMap.size())[ FD ]
Line_18 $$ PrintStream ps = new PrintStream(baos)-->Line_19 $$ LogReader.readAContainerLogsForALogType(valueStream, ps)[ FD ]
Line_22 $$ String fileType = writtenLines[0].substring(9)-->Line_47 $$ String foundValue = thisContainerMap.remove(fileType)[ FD ]
Line_41 $$ String containerStr = ConverterUtils.toString(cId)-->Line_42 $$ Map<String, String> thisContainerMap = logMap.remove(containerStr)[ FD ]
Line_47 $$ String foundValue = thisContainerMap.remove(fileType)-->Line_48 $$ Assert.assertNotNull(cId + " " + fileType + " not present in aggregated log-file!", foundValue)[ FD ]
Line_8 $$ DataInputStream valueStream-->Line_19 $$ LogReader.readAContainerLogsForALogType(valueStream, ps)[ FD ]
Line_40 $$ for (ContainerId cId : expectedContainerIds) -->Line_41 $$ String containerStr = ConverterUtils.toString(cId)[ FD ]
Line_22 $$ String fileType = writtenLines[0].substring(9)-->Line_31 $$ LOG.info("Log Contents:\n" + perContainerMap.get(fileType))[ FD ]
Line_7 $$ Map<String, Map<String, String>> logMap = new HashMap<String, Map<String, String>>()-->Line_39 $$ Assert.assertEquals(expectedContainerIds.length, logMap.size())[ FD ]
Line_11 $$ while (valueStream != null) -->Line_37 $$ valueStream = reader.next(key)[ CD ]
Line_2 $$ private void verifyContainerLogs(LogAggregationService logAggregationService, ApplicationId appId, ContainerId[] expectedContainerIds) throws IOException -->Line_4 $$ Assert.assertEquals(this.user, reader.getApplicationOwner())[ CD ]
Line_9 $$ LogKey key = new LogKey()-->Line_36 $$ key = new LogKey()[ FD ]
