Line_2 $$ private void commitModel(final ModuleModelImpl moduleModel, final Runnable runnable) -->Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() [ CD ]
Line_2 $$ private void commitModel(final ModuleModelImpl moduleModel, final Runnable runnable) -->Line_25 $$ runnable.run()[ FD ]
Line_6 $$ final Collection<Module> oldModules = myModuleModel.myModules.values()-->Line_11 $$ addedModules.removeAll(oldModules)[ FD ]
Line_2 $$ private void commitModel(final ModuleModelImpl moduleModel, final Runnable runnable) -->Line_7 $$ final Collection<Module> newModules = moduleModel.myModules.values()[ CD ]
Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_29 $$ modulesToBeRenamed.removeAll(moduleModel.myModulesToDispose)[ CD ]
Line_28 $$ final Set<Module> modulesToBeRenamed = modulesToNewNamesMap.keySet()-->Line_29 $$ modulesToBeRenamed.removeAll(moduleModel.myModulesToDispose)[ FD ]
Line_31 $$ Map<Module, String> oldNames = ContainerUtil.newHashMap()-->Line_33 $$ oldNames.put(module, module.getName())[ FD ]
Line_47 $$ for (Module addedModule : addedModules) -->Line_50 $$ fireModuleAdded(addedModule)[ FD ]
Line_2 $$ private void commitModel(final ModuleModelImpl moduleModel, final Runnable runnable) -->Line_8 $$ final List<Module> removedModules = new ArrayList<Module>(oldModules)[ CD ]
Line_32 $$ for (final Module module : modulesToBeRenamed) -->Line_33 $$ oldNames.put(module, module.getName())[ FD ]
Line_32 $$ for (final Module module : modulesToBeRenamed) -->Line_34 $$ moduleModel.myModules.remove(module.getName())[ FD ]
Line_2 $$ private void commitModel(final ModuleModelImpl moduleModel, final Runnable runnable) -->Line_4 $$ incModificationCount()[ CD ]
Line_32 $$ for (final Module module : modulesToBeRenamed) -->Line_37 $$ moduleModel.myModules.put(module.getName(), module)[ FD ]
Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_18 $$ List<Module> neverAddedModules = new ArrayList<Module>(moduleModel.myModulesToDispose)[ CD ]
Line_2 $$ private void commitModel(final ModuleModelImpl moduleModel, final Runnable runnable) -->Line_6 $$ final Collection<Module> oldModules = myModuleModel.myModules.values()[ CD ]
Line_2 $$ private void commitModel(final ModuleModelImpl moduleModel, final Runnable runnable) -->Line_11 $$ addedModules.removeAll(oldModules)[ CD ]
Line_2 $$ private void commitModel(final ModuleModelImpl moduleModel, final Runnable runnable) -->Line_9 $$ removedModules.removeAll(newModules)[ CD ]
Line_2 $$ private void commitModel(final ModuleModelImpl moduleModel, final Runnable runnable) -->Line_3 $$ myModuleModel.myModulesCache = null[ CD ]
Line_14 $$ for (Module removedModule : removedModules) -->Line_15 $$ fireBeforeModuleRemoved(removedModule)[ FD ]
Line_32 $$ for (final Module module : modulesToBeRenamed) -->Line_44 $$ Disposer.dispose(module)[ FD ]
Line_32 $$ for (final Module module : modulesToBeRenamed) -->Line_42 $$ fireModuleRemoved(module)[ FD ]
Line_30 $$ List<Module> modules = new ArrayList<Module>()-->Line_35 $$ modules.add(module)[ FD ]
Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_54 $$ fireModulesRenamed(modules, oldNames)[ CD ]
Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_24 $$ if (runnable != null) [ CD ]
Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_27 $$ final Map<Module, String> modulesToNewNamesMap = moduleModel.myModuleToNewName[ CD ]
Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_39 $$ moduleModel.myIsWritable = false[ CD ]
Line_32 $$ for (final Module module : modulesToBeRenamed) -->Line_36 $$ ((ModuleEx) module).rename(modulesToNewNamesMap.get(module))[ FD ]
Line_7 $$ final Collection<Module> newModules = moduleModel.myModules.values()-->Line_9 $$ removedModules.removeAll(newModules)[ FD ]
Line_8 $$ final List<Module> removedModules = new ArrayList<Module>(oldModules)-->Line_9 $$ removedModules.removeAll(newModules)[ FD ]
Line_20 $$ for (final Module neverAddedModule : neverAddedModules) -->Line_21 $$ neverAddedModule.putUserData(DISPOSED_MODULE_NAME, neverAddedModule.getName())[ FD ]
Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_31 $$ Map<Module, String> oldNames = ContainerUtil.newHashMap()[ CD ]
Line_10 $$ final List<Module> addedModules = new ArrayList<Module>(newModules)-->Line_11 $$ addedModules.removeAll(oldModules)[ FD ]
Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_55 $$ cleanCachedStuff()[ CD ]
Line_2 $$ private void commitModel(final ModuleModelImpl moduleModel, final Runnable runnable) -->Line_10 $$ final List<Module> addedModules = new ArrayList<Module>(newModules)[ CD ]
Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_53 $$ cleanCachedStuff()[ CD ]
Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_30 $$ List<Module> modules = new ArrayList<Module>()[ CD ]
Line_31 $$ Map<Module, String> oldNames = ContainerUtil.newHashMap()-->Line_54 $$ fireModulesRenamed(modules, oldNames)[ FD ]
Line_30 $$ List<Module> modules = new ArrayList<Module>()-->Line_54 $$ fireModulesRenamed(modules, oldNames)[ FD ]
Line_2 $$ private void commitModel(final ModuleModelImpl moduleModel, final Runnable runnable) -->Line_5 $$ ApplicationManager.getApplication().assertWriteAccessAllowed()[ CD ]
Line_18 $$ List<Module> neverAddedModules = new ArrayList<Module>(moduleModel.myModulesToDispose)-->Line_19 $$ neverAddedModules.removeAll(myModuleModel.myModules.values())[ FD ]
Line_27 $$ final Map<Module, String> modulesToNewNamesMap = moduleModel.myModuleToNewName-->Line_36 $$ ((ModuleEx) module).rename(modulesToNewNamesMap.get(module))[ FD ]
Line_32 $$ for (final Module module : modulesToBeRenamed) -->Line_35 $$ modules.add(module)[ FD ]
Line_27 $$ final Map<Module, String> modulesToNewNamesMap = moduleModel.myModuleToNewName-->Line_28 $$ final Set<Module> modulesToBeRenamed = modulesToNewNamesMap.keySet()[ FD ]
Line_20 $$ for (final Module neverAddedModule : neverAddedModules) -->Line_22 $$ Disposer.dispose(neverAddedModule)[ FD ]
Line_24 $$ if (runnable != null) -->Line_25 $$ runnable.run()[ CD ]
Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_28 $$ final Set<Module> modulesToBeRenamed = modulesToNewNamesMap.keySet()[ CD ]
Line_2 $$ private void commitModel(final ModuleModelImpl moduleModel, final Runnable runnable) -->Line_24 $$ if (runnable != null) [ FD ]
Line_12 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_19 $$ neverAddedModules.removeAll(myModuleModel.myModules.values())[ CD ]
