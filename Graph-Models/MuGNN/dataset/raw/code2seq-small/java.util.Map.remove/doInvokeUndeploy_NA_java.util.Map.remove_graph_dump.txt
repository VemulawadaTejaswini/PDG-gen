Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_20 $$ Map<Object, ServiceRegistration<?>> serviceRegistrations = _serviceRegistrations.remove(servletContextName)[ CD ]
Line_20 $$ Map<Object, ServiceRegistration<?>> serviceRegistrations = _serviceRegistrations.remove(servletContextName)-->Line_22 $$ for (ServiceRegistration<?> serviceRegistration : serviceRegistrations.values()) [ FD ]
Line_16 $$ if (portalProperties != null) -->Line_17 $$ destroyPortalProperties(servletContextName, portalProperties)[ CD ]
Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_21 $$ if (serviceRegistrations != null) [ CD ]
Line_5 $$ if (_log.isDebugEnabled()) -->Line_6 $$ _log.debug("Invoking undeploy for " + servletContextName)[ CD ]
Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_4 $$ String servletContextName = servletContext.getServletContextName()[ CD ]
Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_27 $$ if (_log.isInfoEnabled()) [ CD ]
Line_3 $$ ServletContext servletContext = hotDeployEvent.getServletContext()-->Line_19 $$ unregisterClpMessageListeners(servletContext)[ FD ]
Line_11 $$ HotDeployListenersContainer hotDeployListenersContainer = _hotDeployListenersContainerMap.remove(servletContextName)-->Line_13 $$ hotDeployListenersContainer.unregisterHotDeployListeners()[ FD ]
Line_15 $$ Properties portalProperties = _portalPropertiesMap.remove(servletContextName)-->Line_16 $$ if (portalProperties != null) [ FD ]
Line_15 $$ Properties portalProperties = _portalPropertiesMap.remove(servletContextName)-->Line_17 $$ destroyPortalProperties(servletContextName, portalProperties)[ FD ]
Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_5 $$ if (_log.isDebugEnabled()) [ CD ]
Line_11 $$ HotDeployListenersContainer hotDeployListenersContainer = _hotDeployListenersContainerMap.remove(servletContextName)-->Line_12 $$ if (hotDeployListenersContainer != null) [ FD ]
Line_4 $$ String servletContextName = servletContext.getServletContextName()-->Line_11 $$ HotDeployListenersContainer hotDeployListenersContainer = _hotDeployListenersContainerMap.remove(servletContextName)[ FD ]
Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_8 $$ if (!_servletContextNames.remove(servletContextName)) [ CD ]
Line_3 $$ ServletContext servletContext = hotDeployEvent.getServletContext()-->Line_4 $$ String servletContextName = servletContext.getServletContextName()[ FD ]
Line_4 $$ String servletContextName = servletContext.getServletContextName()-->Line_8 $$ if (!_servletContextNames.remove(servletContextName)) [ FD ]
Line_27 $$ if (_log.isInfoEnabled()) -->Line_28 $$ _log.info("Hook for " + servletContextName + " was unregistered")[ CD ]
Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_12 $$ if (hotDeployListenersContainer != null) [ CD ]
Line_20 $$ Map<Object, ServiceRegistration<?>> serviceRegistrations = _serviceRegistrations.remove(servletContextName)-->Line_25 $$ serviceRegistrations.clear()[ FD ]
Line_4 $$ String servletContextName = servletContext.getServletContextName()-->Line_15 $$ Properties portalProperties = _portalPropertiesMap.remove(servletContextName)[ FD ]
Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_11 $$ HotDeployListenersContainer hotDeployListenersContainer = _hotDeployListenersContainerMap.remove(servletContextName)[ CD ]
Line_22 $$ for (ServiceRegistration<?> serviceRegistration : serviceRegistrations.values()) -->Line_23 $$ serviceRegistration.unregister()[ FD ]
Line_4 $$ String servletContextName = servletContext.getServletContextName()-->Line_17 $$ destroyPortalProperties(servletContextName, portalProperties)[ FD ]
Line_20 $$ Map<Object, ServiceRegistration<?>> serviceRegistrations = _serviceRegistrations.remove(servletContextName)-->Line_21 $$ if (serviceRegistrations != null) [ FD ]
Line_12 $$ if (hotDeployListenersContainer != null) -->Line_13 $$ hotDeployListenersContainer.unregisterHotDeployListeners()[ CD ]
Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_16 $$ if (portalProperties != null) [ CD ]
Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_15 $$ Properties portalProperties = _portalPropertiesMap.remove(servletContextName)[ CD ]
Line_4 $$ String servletContextName = servletContext.getServletContextName()-->Line_20 $$ Map<Object, ServiceRegistration<?>> serviceRegistrations = _serviceRegistrations.remove(servletContextName)[ FD ]
Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_3 $$ ServletContext servletContext = hotDeployEvent.getServletContext()[ CD ]
Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_19 $$ unregisterClpMessageListeners(servletContext)[ CD ]
Line_21 $$ if (serviceRegistrations != null) -->Line_25 $$ serviceRegistrations.clear()[ CD ]
Line_2 $$ protected void doInvokeUndeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_3 $$ ServletContext servletContext = hotDeployEvent.getServletContext()[ FD ]
Line_8 $$ if (!_servletContextNames.remove(servletContextName)) -->Line_9 $$ return[ CD ]
