Line_2 $$ private static void processActions(DefaultMutableTreeNode node, Object element, @NotNull final Map<Object, List<NodeAction>> nodeActions, @Nullable final Map<Object, List<NodeAction>> secondaryNodeAction) -->Line_11 $$ each.onReady(node)[ FD ]
Line_2 $$ private static void processActions(DefaultMutableTreeNode node, Object element, @NotNull final Map<Object, List<NodeAction>> nodeActions, @Nullable final Map<Object, List<NodeAction>> secondaryNodeAction) -->Line_4 $$ if (actions != null) [ CD ]
Line_7 $$ for (NodeAction each : actions) -->Line_9 $$ secondary.remove(each)[ FD ]
Line_4 $$ if (actions != null) -->Line_6 $$ List<NodeAction> secondary = secondaryNodeAction != null ? secondaryNodeAction.get(element) : null[ CD ]
Line_2 $$ private static void processActions(DefaultMutableTreeNode node, Object element, @NotNull final Map<Object, List<NodeAction>> nodeActions, @Nullable final Map<Object, List<NodeAction>> secondaryNodeAction) -->Line_3 $$ final List<NodeAction> actions = nodeActions.get(element)[ FD ]
Line_3 $$ final List<NodeAction> actions = nodeActions.get(element)-->Line_4 $$ if (actions != null) [ FD ]
Line_2 $$ private static void processActions(DefaultMutableTreeNode node, Object element, @NotNull final Map<Object, List<NodeAction>> nodeActions, @Nullable final Map<Object, List<NodeAction>> secondaryNodeAction) -->Line_5 $$ nodeActions.remove(element)[ FD ]
Line_2 $$ private static void processActions(DefaultMutableTreeNode node, Object element, @NotNull final Map<Object, List<NodeAction>> nodeActions, @Nullable final Map<Object, List<NodeAction>> secondaryNodeAction) -->Line_3 $$ final List<NodeAction> actions = nodeActions.get(element)[ CD ]
Line_7 $$ for (NodeAction each : actions) -->Line_11 $$ each.onReady(node)[ FD ]
Line_2 $$ private static void processActions(DefaultMutableTreeNode node, Object element, @NotNull final Map<Object, List<NodeAction>> nodeActions, @Nullable final Map<Object, List<NodeAction>> secondaryNodeAction) -->Line_6 $$ List<NodeAction> secondary = secondaryNodeAction != null ? secondaryNodeAction.get(element) : null[ FD ]
Line_7 $$ for (NodeAction each : actions) -->Line_8 $$ if (secondary != null && secondary.contains(each)) [ FD ]
Line_6 $$ List<NodeAction> secondary = secondaryNodeAction != null ? secondaryNodeAction.get(element) : null-->Line_8 $$ if (secondary != null && secondary.contains(each)) [ FD ]
Line_8 $$ if (secondary != null && secondary.contains(each)) -->Line_9 $$ secondary.remove(each)[ CD ]
Line_6 $$ List<NodeAction> secondary = secondaryNodeAction != null ? secondaryNodeAction.get(element) : null-->Line_9 $$ secondary.remove(each)[ FD ]
Line_4 $$ if (actions != null) -->Line_5 $$ nodeActions.remove(element)[ CD ]
