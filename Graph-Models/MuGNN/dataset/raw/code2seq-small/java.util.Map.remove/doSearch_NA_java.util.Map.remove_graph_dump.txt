Line_7 $$ while (!queue.isEmpty()) -->Line_8 $$ N node = queue.getFirst()[ CD ]
Line_8 $$ N node = queue.getFirst()-->Line_14 $$ Set<T> cacheValues = cachedNodeValues.get(node)[ FD ]
Line_5 $$ Map<Integer, NodeDetails<N, T>> components = new HashMap<Integer, NodeDetails<N, T>>()-->Line_47 $$ NodeDetails<N, T> rootDetails = components.get(details.minSeen)[ FD ]
Line_2 $$ private Set<T> doSearch() -->Line_7 $$ while (!queue.isEmpty()) [ CD ]
Line_10 $$ if (details == null) -->Line_12 $$ seenNodes.put(node, details)[ CD ]
Line_6 $$ LinkedList<N> queue = new LinkedList<N>(startNodes)-->Line_8 $$ N node = queue.getFirst()[ FD ]
Line_11 $$ details = new NodeDetails<N, T>(node, componentCount++)-->Line_13 $$ components.put(details.component, details)[ FD ]
Line_9 $$ NodeDetails<N, T> details = seenNodes.get(node)-->Line_13 $$ components.put(details.component, details)[ FD ]
Line_9 $$ NodeDetails<N, T> details = seenNodes.get(node)-->Line_11 $$ details = new NodeDetails<N, T>(node, componentCount++)[ FD ]
Line_9 $$ NodeDetails<N, T> details = seenNodes.get(node)-->Line_58 $$ strongComponents.add(details)[ FD ]
Line_4 $$ Map<N, NodeDetails<N, T>> seenNodes = new HashMap<N, NodeDetails<N, T>>()-->Line_36 $$ NodeDetails<N, T> connectedNodeDetails = seenNodes.get(connectedNode)[ FD ]
Line_8 $$ N node = queue.getFirst()-->Line_9 $$ NodeDetails<N, T> details = seenNodes.get(node)[ FD ]
Line_37 $$ if (!connectedNodeDetails.finished) -->Line_39 $$ details.minSeen = minSeen[ CD ]
Line_6 $$ LinkedList<N> queue = new LinkedList<N>(startNodes)-->Line_7 $$ while (!queue.isEmpty()) [ FD ]
Line_10 $$ if (details == null) -->Line_31 $$ queue.removeFirst()[ CD ]
Line_11 $$ details = new NodeDetails<N, T>(node, componentCount++)-->Line_58 $$ strongComponents.add(details)[ FD ]
Line_26 $$ if (!connectedNodeDetails.finished) -->Line_27 $$ details.stronglyConnected = true[ CD ]
Line_38 $$ int minSeen = Math.min(details.minSeen, connectedNodeDetails.minSeen)-->Line_39 $$ details.minSeen = minSeen[ FD ]
Line_14 $$ Set<T> cacheValues = cachedNodeValues.get(node)-->Line_15 $$ if (cacheValues != null) [ FD ]
Line_15 $$ if (cacheValues != null) -->Line_17 $$ details.finished = true[ CD ]
Line_46 $$ if (details.minSeen != details.component) -->Line_47 $$ NodeDetails<N, T> rootDetails = components.get(details.minSeen)[ CD ]
Line_46 $$ if (details.minSeen != details.component) -->Line_50 $$ rootDetails.componentMembers.addAll(details.componentMembers)[ CD ]
Line_2 $$ private Set<T> doSearch() -->Line_6 $$ LinkedList<N> queue = new LinkedList<N>(startNodes)[ CD ]
Line_10 $$ if (details == null) -->Line_11 $$ details = new NodeDetails<N, T>(node, componentCount++)[ CD ]
Line_64 $$ for (N startNode : startNodes) -->Line_65 $$ values.addAll(cachedNodeValues.get(startNode))[ FD ]
Line_22 $$ for (N connectedNode : details.successors) -->Line_44 $$ graph.getEdgeValues(node, connectedNode, details.values)[ FD ]
Line_2 $$ private Set<T> doSearch() -->Line_3 $$ int componentCount = 0[ CD ]
Line_9 $$ NodeDetails<N, T> details = seenNodes.get(node)-->Line_12 $$ seenNodes.put(node, details)[ FD ]
Line_24 $$ if (connectedNodeDetails == null) -->Line_26 $$ if (!connectedNodeDetails.finished) [ CD ]
Line_9 $$ NodeDetails<N, T> details = seenNodes.get(node)-->Line_57 $$ if (details.stronglyConnected) [ FD ]
Line_15 $$ if (cacheValues != null) -->Line_18 $$ queue.removeFirst()[ CD ]
Line_3 $$ int componentCount = 0-->Line_11 $$ details = new NodeDetails<N, T>(node, componentCount++)[ FD ]
Line_4 $$ Map<N, NodeDetails<N, T>> seenNodes = new HashMap<N, NodeDetails<N, T>>()-->Line_12 $$ seenNodes.put(node, details)[ FD ]
Line_46 $$ if (details.minSeen != details.component) -->Line_48 $$ rootDetails.values.addAll(details.values)[ CD ]
Line_4 $$ Map<N, NodeDetails<N, T>> seenNodes = new HashMap<N, NodeDetails<N, T>>()-->Line_23 $$ NodeDetails<N, T> connectedNodeDetails = seenNodes.get(connectedNode)[ FD ]
Line_63 $$ Set<T> values = new LinkedHashSet<T>()-->Line_65 $$ values.addAll(cachedNodeValues.get(startNode))[ FD ]
Line_7 $$ while (!queue.isEmpty()) -->Line_9 $$ NodeDetails<N, T> details = seenNodes.get(node)[ CD ]
Line_22 $$ for (N connectedNode : details.successors) -->Line_23 $$ NodeDetails<N, T> connectedNodeDetails = seenNodes.get(connectedNode)[ FD ]
Line_6 $$ LinkedList<N> queue = new LinkedList<N>(startNodes)-->Line_25 $$ queue.add(0, connectedNode)[ FD ]
Line_10 $$ if (details == null) -->Line_14 $$ Set<T> cacheValues = cachedNodeValues.get(node)[ CD ]
Line_7 $$ while (!queue.isEmpty()) -->Line_10 $$ if (details == null) [ CD ]
Line_23 $$ NodeDetails<N, T> connectedNodeDetails = seenNodes.get(connectedNode)-->Line_24 $$ if (connectedNodeDetails == null) [ FD ]
Line_8 $$ N node = queue.getFirst()-->Line_21 $$ graph.getNodeValues(node, details.values, details.successors)[ FD ]
Line_10 $$ if (details == null) -->Line_21 $$ graph.getNodeValues(node, details.values, details.successors)[ CD ]
Line_37 $$ if (!connectedNodeDetails.finished) -->Line_40 $$ connectedNodeDetails.minSeen = minSeen[ CD ]
Line_46 $$ if (details.minSeen != details.component) -->Line_49 $$ details.values.clear()[ CD ]
Line_37 $$ if (!connectedNodeDetails.finished) -->Line_41 $$ details.stronglyConnected = true[ CD ]
Line_2 $$ private Set<T> doSearch() -->Line_5 $$ Map<Integer, NodeDetails<N, T>> components = new HashMap<Integer, NodeDetails<N, T>>()[ CD ]
Line_24 $$ if (connectedNodeDetails == null) -->Line_25 $$ queue.add(0, connectedNode)[ CD ]
Line_22 $$ for (N connectedNode : details.successors) -->Line_36 $$ NodeDetails<N, T> connectedNodeDetails = seenNodes.get(connectedNode)[ FD ]
Line_6 $$ LinkedList<N> queue = new LinkedList<N>(startNodes)-->Line_18 $$ queue.removeFirst()[ FD ]
Line_11 $$ details = new NodeDetails<N, T>(node, componentCount++)-->Line_12 $$ seenNodes.put(node, details)[ FD ]
Line_8 $$ N node = queue.getFirst()-->Line_32 $$ if (cachedNodeValues.containsKey(node)) [ FD ]
Line_10 $$ if (details == null) -->Line_13 $$ components.put(details.component, details)[ CD ]
Line_10 $$ if (details == null) -->Line_32 $$ if (cachedNodeValues.containsKey(node)) [ CD ]
Line_4 $$ Map<N, NodeDetails<N, T>> seenNodes = new HashMap<N, NodeDetails<N, T>>()-->Line_9 $$ NodeDetails<N, T> details = seenNodes.get(node)[ FD ]
Line_11 $$ details = new NodeDetails<N, T>(node, componentCount++)-->Line_10 $$ if (details == null) [ FD ]
Line_8 $$ N node = queue.getFirst()-->Line_44 $$ graph.getEdgeValues(node, connectedNode, details.values)[ FD ]
Line_2 $$ private Set<T> doSearch() -->Line_4 $$ Map<N, NodeDetails<N, T>> seenNodes = new HashMap<N, NodeDetails<N, T>>()[ CD ]
Line_6 $$ LinkedList<N> queue = new LinkedList<N>(startNodes)-->Line_31 $$ queue.removeFirst()[ FD ]
Line_22 $$ for (N connectedNode : details.successors) -->Line_25 $$ queue.add(0, connectedNode)[ FD ]
Line_11 $$ details = new NodeDetails<N, T>(node, componentCount++)-->Line_57 $$ if (details.stronglyConnected) [ FD ]
Line_14 $$ Set<T> cacheValues = cachedNodeValues.get(node)-->Line_16 $$ details.values = cacheValues[ FD ]
Line_5 $$ Map<Integer, NodeDetails<N, T>> components = new HashMap<Integer, NodeDetails<N, T>>()-->Line_55 $$ components.remove(componentMember.component)[ FD ]
Line_46 $$ if (details.minSeen != details.component) -->Line_57 $$ if (details.stronglyConnected) [ CD ]
Line_5 $$ Map<Integer, NodeDetails<N, T>> components = new HashMap<Integer, NodeDetails<N, T>>()-->Line_13 $$ components.put(details.component, details)[ FD ]
Line_37 $$ if (!connectedNodeDetails.finished) -->Line_38 $$ int minSeen = Math.min(details.minSeen, connectedNodeDetails.minSeen)[ CD ]
Line_10 $$ if (details == null) -->Line_15 $$ if (cacheValues != null) [ CD ]
Line_15 $$ if (cacheValues != null) -->Line_16 $$ details.values = cacheValues[ CD ]
Line_38 $$ int minSeen = Math.min(details.minSeen, connectedNodeDetails.minSeen)-->Line_40 $$ connectedNodeDetails.minSeen = minSeen[ FD ]
Line_2 $$ private Set<T> doSearch() -->Line_67 $$ return values[ CD ]
Line_9 $$ NodeDetails<N, T> details = seenNodes.get(node)-->Line_10 $$ if (details == null) [ FD ]
Line_2 $$ private Set<T> doSearch() -->Line_63 $$ Set<T> values = new LinkedHashSet<T>()[ CD ]
Line_8 $$ N node = queue.getFirst()-->Line_12 $$ seenNodes.put(node, details)[ FD ]
Line_10 $$ if (details == null) -->Line_46 $$ if (details.minSeen != details.component) [ CD ]
Line_57 $$ if (details.stronglyConnected) -->Line_58 $$ strongComponents.add(details)[ CD ]
