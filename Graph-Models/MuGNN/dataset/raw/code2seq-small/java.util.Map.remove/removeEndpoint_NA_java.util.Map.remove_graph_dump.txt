Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_16 $$ logger.debug("removing endpoint [ FD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_6 $$ seeds.remove(endpoint)[ FD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_9 $$ liveEndpoints.remove(endpoint)[ CD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_11 $$ FailureDetector.instance.remove(endpoint)[ FD ]
Line_15 $$ if (logger.isDebugEnabled())-->Line_16 $$ logger.debug("removing endpoint [ CD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_9 $$ liveEndpoints.remove(endpoint)[ FD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_14 $$ MessagingService.instance().destroyConnectionPool(endpoint)[ CD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_4 $$ if (seeds.contains(endpoint)) [ FD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_15 $$ if (logger.isDebugEnabled())[ CD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_10 $$ unreachableEndpoints.remove(endpoint)[ CD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_10 $$ unreachableEndpoints.remove(endpoint)[ FD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_11 $$ FailureDetector.instance.remove(endpoint)[ CD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_4 $$ if (seeds.contains(endpoint)) [ CD ]
Line_4 $$ if (seeds.contains(endpoint)) -->Line_5 $$ buildSeedsList()[ CD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_13 $$ quarantineEndpoint(endpoint)[ CD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_13 $$ quarantineEndpoint(endpoint)[ FD ]
Line_4 $$ if (seeds.contains(endpoint)) -->Line_6 $$ seeds.remove(endpoint)[ CD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_7 $$ logger.info("removed [ FD ]
Line_4 $$ if (seeds.contains(endpoint)) -->Line_7 $$ logger.info("removed [ CD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_14 $$ MessagingService.instance().destroyConnectionPool(endpoint)[ FD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_12 $$ MessagingService.instance().resetVersion(endpoint)[ CD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_12 $$ MessagingService.instance().resetVersion(endpoint)[ FD ]
Line_2 $$ public void removeEndpoint(InetAddress endpoint) -->Line_3 $$ subscriber.onRemove(endpoint)[ FD ]
