Line_2 $$ public static <T> SetDiff<T> diffSetsBy(Set<? extends T> left, Set<? extends T> right, Transformer<?, T> compareBy) -->Line_3 $$ if (left == null) [ FD ]
Line_2 $$ public static <T> SetDiff<T> diffSetsBy(Set<? extends T> left, Set<? extends T> right, Transformer<?, T> compareBy) -->Line_24 $$ return setDiff[ CD ]
Line_13 $$ T rightValue = indexedRight.remove(leftEntry.getKey())-->Line_14 $$ if (rightValue == null) [ FD ]
Line_2 $$ public static <T> SetDiff<T> diffSetsBy(Set<? extends T> left, Set<? extends T> right, Transformer<?, T> compareBy) -->Line_11 $$ Map<Object, T> indexedRight = collectMap(right, compareBy)[ CD ]
Line_13 $$ T rightValue = indexedRight.remove(leftEntry.getKey())-->Line_22 $$ setDiff.rightOnly.add(rightValue)[ FD ]
Line_14 $$ if (rightValue == null) -->Line_17 $$ Pair<T, T> pair = Pair.of(leftEntry.getValue(), rightValue)[ CD ]
Line_2 $$ public static <T> SetDiff<T> diffSetsBy(Set<? extends T> left, Set<? extends T> right, Transformer<?, T> compareBy) -->Line_6 $$ if (right == null) [ CD ]
Line_11 $$ Map<Object, T> indexedRight = collectMap(right, compareBy)-->Line_21 $$ for (T rightValue : indexedRight.values()) [ FD ]
Line_13 $$ T rightValue = indexedRight.remove(leftEntry.getKey())-->Line_17 $$ Pair<T, T> pair = Pair.of(leftEntry.getValue(), rightValue)[ FD ]
Line_14 $$ if (rightValue == null) -->Line_18 $$ setDiff.common.add(pair)[ CD ]
Line_2 $$ public static <T> SetDiff<T> diffSetsBy(Set<? extends T> left, Set<? extends T> right, Transformer<?, T> compareBy) -->Line_11 $$ Map<Object, T> indexedRight = collectMap(right, compareBy)[ FD ]
Line_17 $$ Pair<T, T> pair = Pair.of(leftEntry.getValue(), rightValue)-->Line_18 $$ setDiff.common.add(pair)[ FD ]
Line_12 $$ for (Map.Entry<Object, T> leftEntry : indexedLeft.entrySet()) -->Line_13 $$ T rightValue = indexedRight.remove(leftEntry.getKey())[ FD ]
Line_11 $$ Map<Object, T> indexedRight = collectMap(right, compareBy)-->Line_13 $$ T rightValue = indexedRight.remove(leftEntry.getKey())[ FD ]
Line_14 $$ if (rightValue == null) -->Line_15 $$ setDiff.leftOnly.add(leftEntry.getValue())[ CD ]
Line_2 $$ public static <T> SetDiff<T> diffSetsBy(Set<? extends T> left, Set<? extends T> right, Transformer<?, T> compareBy) -->Line_9 $$ SetDiff<T> setDiff = new SetDiff<T>()[ CD ]
Line_2 $$ public static <T> SetDiff<T> diffSetsBy(Set<? extends T> left, Set<? extends T> right, Transformer<?, T> compareBy) -->Line_6 $$ if (right == null) [ FD ]
Line_10 $$ Map<Object, T> indexedLeft = collectMap(left, compareBy)-->Line_12 $$ for (Map.Entry<Object, T> leftEntry : indexedLeft.entrySet()) [ FD ]
Line_12 $$ for (Map.Entry<Object, T> leftEntry : indexedLeft.entrySet()) -->Line_15 $$ setDiff.leftOnly.add(leftEntry.getValue())[ FD ]
Line_12 $$ for (Map.Entry<Object, T> leftEntry : indexedLeft.entrySet()) -->Line_17 $$ Pair<T, T> pair = Pair.of(leftEntry.getValue(), rightValue)[ FD ]
Line_2 $$ public static <T> SetDiff<T> diffSetsBy(Set<? extends T> left, Set<? extends T> right, Transformer<?, T> compareBy) -->Line_3 $$ if (left == null) [ CD ]
Line_2 $$ public static <T> SetDiff<T> diffSetsBy(Set<? extends T> left, Set<? extends T> right, Transformer<?, T> compareBy) -->Line_10 $$ Map<Object, T> indexedLeft = collectMap(left, compareBy)[ CD ]
Line_2 $$ public static <T> SetDiff<T> diffSetsBy(Set<? extends T> left, Set<? extends T> right, Transformer<?, T> compareBy) -->Line_10 $$ Map<Object, T> indexedLeft = collectMap(left, compareBy)[ FD ]
