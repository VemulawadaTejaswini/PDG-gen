Line_26 $$ for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator(); it.hasNext(); ) -->Line_31 $$ it.remove()[ FD ]
Line_2 $$ protected void destroyBean(String beanName, DisposableBean bean) -->Line_12 $$ if (bean != null) [ FD ]
Line_19 $$ Set<String> containedBeans = this.containedBeanMap.remove(beanName)-->Line_20 $$ if (containedBeans != null) [ FD ]
Line_8 $$ for (String dependentBeanName : dependencies) -->Line_9 $$ destroySingleton(dependentBeanName)[ FD ]
Line_5 $$ if (logger.isDebugEnabled()) -->Line_6 $$ logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies)[ CD ]
Line_2 $$ protected void destroyBean(String beanName, DisposableBean bean) -->Line_3 $$ Set<String> dependencies = this.dependentBeanMap.remove(beanName)[ FD ]
Line_2 $$ protected void destroyBean(String beanName, DisposableBean bean) -->Line_35 $$ this.dependenciesForBeanMap.remove(beanName)[ CD ]
Line_2 $$ protected void destroyBean(String beanName, DisposableBean bean) -->Line_3 $$ Set<String> dependencies = this.dependentBeanMap.remove(beanName)[ CD ]
Line_26 $$ for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator(); it.hasNext(); ) -->Line_29 $$ dependenciesToClean.remove(beanName)[ CD ]
Line_2 $$ protected void destroyBean(String beanName, DisposableBean bean) -->Line_19 $$ Set<String> containedBeans = this.containedBeanMap.remove(beanName)[ FD ]
Line_26 $$ for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator(); it.hasNext(); ) -->Line_28 $$ Set<String> dependenciesToClean = entry.getValue()[ CD ]
Line_2 $$ protected void destroyBean(String beanName, DisposableBean bean) -->Line_12 $$ if (bean != null) [ CD ]
Line_26 $$ for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator(); it.hasNext(); ) -->Line_30 $$ if (dependenciesToClean.isEmpty()) [ CD ]
Line_2 $$ protected void destroyBean(String beanName, DisposableBean bean) -->Line_35 $$ this.dependenciesForBeanMap.remove(beanName)[ FD ]
Line_2 $$ protected void destroyBean(String beanName, DisposableBean bean) -->Line_20 $$ if (containedBeans != null) [ CD ]
Line_2 $$ protected void destroyBean(String beanName, DisposableBean bean) -->Line_14 $$ bean.destroy()[ FD ]
Line_28 $$ Set<String> dependenciesToClean = entry.getValue()-->Line_30 $$ if (dependenciesToClean.isEmpty()) [ FD ]
Line_21 $$ for (String containedBeanName : containedBeans) -->Line_22 $$ destroySingleton(containedBeanName)[ FD ]
Line_26 $$ for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator(); it.hasNext(); ) -->Line_27 $$ Map.Entry<String, Set<String>> entry = it.next()[ FD ]
Line_2 $$ protected void destroyBean(String beanName, DisposableBean bean) -->Line_4 $$ if (dependencies != null) [ CD ]
Line_28 $$ Set<String> dependenciesToClean = entry.getValue()-->Line_29 $$ dependenciesToClean.remove(beanName)[ FD ]
Line_2 $$ protected void destroyBean(String beanName, DisposableBean bean) -->Line_19 $$ Set<String> containedBeans = this.containedBeanMap.remove(beanName)[ CD ]
Line_27 $$ Map.Entry<String, Set<String>> entry = it.next()-->Line_28 $$ Set<String> dependenciesToClean = entry.getValue()[ FD ]
Line_3 $$ Set<String> dependencies = this.dependentBeanMap.remove(beanName)-->Line_4 $$ if (dependencies != null) [ FD ]
Line_30 $$ if (dependenciesToClean.isEmpty()) -->Line_31 $$ it.remove()[ CD ]
Line_4 $$ if (dependencies != null) -->Line_5 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ protected void destroyBean(String beanName, DisposableBean bean) -->Line_29 $$ dependenciesToClean.remove(beanName)[ FD ]
Line_26 $$ for (Iterator<Map.Entry<String, Set<String>>> it = this.dependentBeanMap.entrySet().iterator(); it.hasNext(); ) -->Line_27 $$ Map.Entry<String, Set<String>> entry = it.next()[ CD ]
