Line_2 $$ private void publishToOpxl() -->Line_5 $$ Map<String, Map<String, Integer>> red = dtos.values().stream().flatMap( dto -> dto.getNestedThings().values().stream().map( ppd -> new Intermediate(dto.getName(), ppd.getKey(), ppd.getValue()))).collect(Collectors.groupingBy(Intermediate::<>key, Collectors.groupingBy(Intermediate::<>name, Collectors.summingInt(Intermediate::<>value))))[ CD ]
Line_2 $$ private void publishToOpxl() -->Line_3 $$ Collector<Intermediate, ?, Map<String, Integer>> reducer = Collectors.groupingBy(Intermediate::<>name, Collectors.summingInt(Intermediate::<>value))[ CD ]
Line_3 $$ Collector<Intermediate, ?, Map<String, Integer>> reducer = Collectors.groupingBy(Intermediate::<>name, Collectors.summingInt(Intermediate::<>value))-->Line_4 $$ Map<String, Map<String, Integer>> green = dtos.values().stream().flatMap( dto -> dto.getNestedThings().values().stream().map( ppd -> new Intermediate(dto.getName(), ppd.getKey(), ppd.getValue()))).collect(Collectors.groupingBy(Intermediate::<>key, reducer))[ FD ]
Line_2 $$ private void publishToOpxl() -->Line_4 $$ Map<String, Map<String, Integer>> green = dtos.values().stream().flatMap( dto -> dto.getNestedThings().values().stream().map( ppd -> new Intermediate(dto.getName(), ppd.getKey(), ppd.getValue()))).collect(Collectors.groupingBy(Intermediate::<>key, reducer))[ CD ]
