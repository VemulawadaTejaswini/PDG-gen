Line_2 $$ public void pythagoreanTriangles(Integer num) -->Line_3 $$ Stream<Integer> numbers = IntStream.rangeClosed(1, num).boxed()[ CD ]
Line_2 $$ public void pythagoreanTriangles(Integer num) -->Line_3 $$ Stream<Integer> numbers = IntStream.rangeClosed(1, num).boxed()[ FD ]
Line_2 $$ public void pythagoreanTriangles(Integer num) -->Line_4 $$ Stream<Triplet<Integer, Integer, Integer>> triangles = numbers.flatMap( x -> [ CD ]
Line_3 $$ Stream<Integer> numbers = IntStream.rangeClosed(1, num).boxed()-->Line_4 $$ Stream<Triplet<Integer, Integer, Integer>> triangles = numbers.flatMap( x -> [ FD ]
Line_4 $$ Stream<Triplet<Integer, Integer, Integer>> triangles = numbers.flatMap( x -> -->Line_11 $$ triangles.forEach(System.out::<>println)[ FD ]
Line_2 $$ public void pythagoreanTriangles(Integer num) -->Line_11 $$ triangles.forEach(System.out::<>println)[ CD ]
