Line_7 $$ for (Iterator<InternalExternalProjectInfo> iterator = externalProjects.iterator(); iterator.hasNext(); ) -->Line_10 $$ iterator.remove()[ FD ]
Line_2 $$ private static void doSave(@NotNull final Project project, @NotNull Collection<InternalExternalProjectInfo> externalProjects) throws IOException -->Line_28 $$ out.writeInt(externalProjects.size())[ FD ]
Line_9 $$ if (!validate(externalProject)) -->Line_10 $$ iterator.remove()[ CD ]
Line_2 $$ private static void doSave(@NotNull final Project project, @NotNull Collection<InternalExternalProjectInfo> externalProjects) throws IOException -->Line_7 $$ for (Iterator<InternalExternalProjectInfo> iterator = externalProjects.iterator(); iterator.hasNext(); ) [ CD ]
Line_2 $$ private static void doSave(@NotNull final Project project, @NotNull Collection<InternalExternalProjectInfo> externalProjects) throws IOException -->Line_7 $$ for (Iterator<InternalExternalProjectInfo> iterator = externalProjects.iterator(); iterator.hasNext(); ) [ FD ]
Line_7 $$ for (Iterator<InternalExternalProjectInfo> iterator = externalProjects.iterator(); iterator.hasNext(); ) -->Line_8 $$ InternalExternalProjectInfo externalProject = iterator.next()[ CD ]
Line_13 $$ ExternalSystemApiUtil.visit(externalProject.getExternalProjectStructure(), new Consumer<DataNode<?>>() -->Line_18 $$ dataNode.getDataBytes()[ FD ]
Line_7 $$ for (Iterator<InternalExternalProjectInfo> iterator = externalProjects.iterator(); iterator.hasNext(); ) -->Line_9 $$ if (!validate(externalProject)) [ CD ]
Line_7 $$ for (Iterator<InternalExternalProjectInfo> iterator = externalProjects.iterator(); iterator.hasNext(); ) -->Line_13 $$ ExternalSystemApiUtil.visit(externalProject.getExternalProjectStructure(), new Consumer<DataNode<?>>() [ CD ]
Line_2 $$ private static void doSave(@NotNull final Project project, @NotNull Collection<InternalExternalProjectInfo> externalProjects) throws IOException -->Line_4 $$ if (!FileUtil.createParentDirs(projectConfigurationFile)) [ CD ]
Line_8 $$ InternalExternalProjectInfo externalProject = iterator.next()-->Line_32 $$ os.writeObject(externalProject)[ FD ]
Line_8 $$ InternalExternalProjectInfo externalProject = iterator.next()-->Line_9 $$ if (!validate(externalProject)) [ FD ]
Line_8 $$ InternalExternalProjectInfo externalProject = iterator.next()-->Line_13 $$ ExternalSystemApiUtil.visit(externalProject.getExternalProjectStructure(), new Consumer<DataNode<?>>() [ FD ]
Line_13 $$ ExternalSystemApiUtil.visit(externalProject.getExternalProjectStructure(), new Consumer<DataNode<?>>() -->Line_20 $$ dataNode.clear(true)[ FD ]
Line_2 $$ private static void doSave(@NotNull final Project project, @NotNull Collection<InternalExternalProjectInfo> externalProjects) throws IOException -->Line_3 $$ final File projectConfigurationFile = getProjectConfigurationFile(project)[ FD ]
Line_2 $$ private static void doSave(@NotNull final Project project, @NotNull Collection<InternalExternalProjectInfo> externalProjects) throws IOException -->Line_3 $$ final File projectConfigurationFile = getProjectConfigurationFile(project)[ CD ]
Line_3 $$ final File projectConfigurationFile = getProjectConfigurationFile(project)-->Line_4 $$ if (!FileUtil.createParentDirs(projectConfigurationFile)) [ FD ]
Line_7 $$ for (Iterator<InternalExternalProjectInfo> iterator = externalProjects.iterator(); iterator.hasNext(); ) -->Line_8 $$ InternalExternalProjectInfo externalProject = iterator.next()[ FD ]
