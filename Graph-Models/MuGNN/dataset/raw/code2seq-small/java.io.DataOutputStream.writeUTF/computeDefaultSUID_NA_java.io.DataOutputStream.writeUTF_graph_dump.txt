Line_14 $$ final SerialVersionUIDBuilder serialVersionUIDBuilder = new SerialVersionUIDBuilder(psiClass)-->Line_36 $$ final MemberSignature[] fields = serialVersionUIDBuilder.getNonPrivateFields()[ FD ]
Line_17 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_43 $$ dataOutputStream.flush()[ FD ]
Line_14 $$ final SerialVersionUIDBuilder serialVersionUIDBuilder = new SerialVersionUIDBuilder(psiClass)-->Line_40 $$ final MemberSignature[] constructors = serialVersionUIDBuilder.getNonPrivateConstructors()[ FD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_7 $$ if (serializable == null) [ CD ]
Line_11 $$ if (!isSerializable) -->Line_12 $$ return 0L[ CD ]
Line_23 $$ if (psiClass.isInterface()) -->Line_24 $$ classModifiers |= Modifier.INTERFACE[ CD ]
Line_22 $$ final MemberSignature[] methodSignatures = serialVersionUIDBuilder.getNonPrivateMethodSignatures()-->Line_42 $$ writeSignatures(methodSignatures, dataOutputStream)[ FD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_5 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project)[ CD ]
Line_24 $$ classModifiers |= Modifier.INTERFACE-->Line_26 $$ classModifiers &= ~Modifier.ABSTRACT[ FD ]
Line_21 $$ int classModifiers = classModifierList != null ? MemberSignature.calculateModifierBitmap(classModifierList) : 0-->Line_24 $$ classModifiers |= Modifier.INTERFACE[ FD ]
Line_44 $$ final String algorithm = "SHA"-->Line_45 $$ final MessageDigest digest = MessageDigest.getInstance(algorithm)[ FD ]
Line_21 $$ int classModifiers = classModifierList != null ? MemberSignature.calculateModifierBitmap(classModifierList) : 0-->Line_29 $$ dataOutputStream.writeInt(classModifiers)[ FD ]
Line_14 $$ final SerialVersionUIDBuilder serialVersionUIDBuilder = new SerialVersionUIDBuilder(psiClass)-->Line_38 $$ final MemberSignature[] staticInitializers = serialVersionUIDBuilder.getStaticInitializers()[ FD ]
Line_3 $$ final Project project = psiClass.getProject()-->Line_5 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project)[ FD ]
Line_25 $$ if (methodSignatures.length == 0) -->Line_26 $$ classModifiers &= ~Modifier.ABSTRACT[ CD ]
Line_17 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_19 $$ dataOutputStream.writeUTF(className)[ FD ]
Line_21 $$ int classModifiers = classModifierList != null ? MemberSignature.calculateModifierBitmap(classModifierList) : 0-->Line_26 $$ classModifiers &= ~Modifier.ABSTRACT[ FD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_6 $$ final PsiClass serializable = psiFacade.findClass(CommonClassNames.JAVA_IO_SERIALIZABLE, scope)[ CD ]
Line_24 $$ classModifiers |= Modifier.INTERFACE-->Line_29 $$ dataOutputStream.writeInt(classModifiers)[ FD ]
Line_30 $$ final PsiClass[] interfaces = psiClass.getInterfaces()-->Line_31 $$ Arrays.sort(interfaces, INTERFACE_COMPARATOR)[ FD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_11 $$ if (!isSerializable) [ CD ]
Line_38 $$ final MemberSignature[] staticInitializers = serialVersionUIDBuilder.getStaticInitializers()-->Line_39 $$ writeSignatures(staticInitializers, dataOutputStream)[ FD ]
Line_6 $$ final PsiClass serializable = psiFacade.findClass(CommonClassNames.JAVA_IO_SERIALIZABLE, scope)-->Line_10 $$ final boolean isSerializable = psiClass.isInheritor(serializable, true)[ FD ]
Line_47 $$ long serialVersionUID = 0L-->Line_49 $$ serialVersionUID = serialVersionUID << 8 | digestBytes[i] & 0xFF[ FD ]
Line_10 $$ final boolean isSerializable = psiClass.isInheritor(serializable, true)-->Line_11 $$ if (!isSerializable) [ FD ]
Line_5 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project)-->Line_6 $$ final PsiClass serializable = psiFacade.findClass(CommonClassNames.JAVA_IO_SERIALIZABLE, scope)[ FD ]
Line_17 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_29 $$ dataOutputStream.writeInt(classModifiers)[ FD ]
Line_17 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_34 $$ dataOutputStream.writeUTF(name)[ FD ]
Line_17 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_39 $$ writeSignatures(staticInitializers, dataOutputStream)[ FD ]
Line_48 $$ for (int i = Math.min(digestBytes.length, 8) - 1; i >= 0; i--) -->Line_49 $$ serialVersionUID = serialVersionUID << 8 | digestBytes[i] & 0xFF[ CD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_3 $$ final Project project = psiClass.getProject()[ CD ]
Line_18 $$ final String className = PsiFormatUtil.getExternalName(psiClass)-->Line_19 $$ dataOutputStream.writeUTF(className)[ FD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_30 $$ final PsiClass[] interfaces = psiClass.getInterfaces()[ FD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_18 $$ final String className = PsiFormatUtil.getExternalName(psiClass)[ FD ]
Line_16 $$ final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()-->Line_46 $$ final byte[] digestBytes = digest.digest(byteArrayOutputStream.toByteArray())[ FD ]
Line_26 $$ classModifiers &= ~Modifier.ABSTRACT-->Line_29 $$ dataOutputStream.writeInt(classModifiers)[ FD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_3 $$ final Project project = psiClass.getProject()[ FD ]
Line_7 $$ if (serializable == null) -->Line_8 $$ return -1L[ CD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_14 $$ final SerialVersionUIDBuilder serialVersionUIDBuilder = new SerialVersionUIDBuilder(psiClass)[ CD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_20 $$ final PsiModifierList classModifierList = psiClass.getModifierList()[ FD ]
Line_33 $$ final String name = aInterfaces.getQualifiedName()-->Line_34 $$ dataOutputStream.writeUTF(name)[ FD ]
Line_6 $$ final PsiClass serializable = psiFacade.findClass(CommonClassNames.JAVA_IO_SERIALIZABLE, scope)-->Line_7 $$ if (serializable == null) [ FD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_10 $$ final boolean isSerializable = psiClass.isInheritor(serializable, true)[ FD ]
Line_23 $$ if (psiClass.isInterface()) -->Line_25 $$ if (methodSignatures.length == 0) [ CD ]
Line_17 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_37 $$ writeSignatures(fields, dataOutputStream)[ FD ]
Line_57 $$ final SecurityException securityException = new SecurityException(exception.getMessage())-->Line_58 $$ securityException.initCause(exception)[ FD ]
Line_36 $$ final MemberSignature[] fields = serialVersionUIDBuilder.getNonPrivateFields()-->Line_37 $$ writeSignatures(fields, dataOutputStream)[ FD ]
Line_53 $$ final InternalError internalError = new InternalError(exception.getMessage())-->Line_54 $$ internalError.initCause(exception)[ FD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_4 $$ final GlobalSearchScope scope = GlobalSearchScope.allScope(project)[ CD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_10 $$ final boolean isSerializable = psiClass.isInheritor(serializable, true)[ CD ]
Line_32 $$ for (PsiClass aInterfaces : interfaces) -->Line_33 $$ final String name = aInterfaces.getQualifiedName()[ FD ]
Line_45 $$ final MessageDigest digest = MessageDigest.getInstance(algorithm)-->Line_46 $$ final byte[] digestBytes = digest.digest(byteArrayOutputStream.toByteArray())[ FD ]
Line_2 $$ public static long computeDefaultSUID(PsiClass psiClass) -->Line_23 $$ if (psiClass.isInterface()) [ FD ]
Line_3 $$ final Project project = psiClass.getProject()-->Line_4 $$ final GlobalSearchScope scope = GlobalSearchScope.allScope(project)[ FD ]
Line_40 $$ final MemberSignature[] constructors = serialVersionUIDBuilder.getNonPrivateConstructors()-->Line_41 $$ writeSignatures(constructors, dataOutputStream)[ FD ]
Line_14 $$ final SerialVersionUIDBuilder serialVersionUIDBuilder = new SerialVersionUIDBuilder(psiClass)-->Line_22 $$ final MemberSignature[] methodSignatures = serialVersionUIDBuilder.getNonPrivateMethodSignatures()[ FD ]
Line_17 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_42 $$ writeSignatures(methodSignatures, dataOutputStream)[ FD ]
Line_17 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_41 $$ writeSignatures(constructors, dataOutputStream)[ FD ]
Line_4 $$ final GlobalSearchScope scope = GlobalSearchScope.allScope(project)-->Line_6 $$ final PsiClass serializable = psiFacade.findClass(CommonClassNames.JAVA_IO_SERIALIZABLE, scope)[ FD ]
Line_20 $$ final PsiModifierList classModifierList = psiClass.getModifierList()-->Line_21 $$ int classModifiers = classModifierList != null ? MemberSignature.calculateModifierBitmap(classModifierList) : 0[ FD ]
