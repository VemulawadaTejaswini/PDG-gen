Line_17 $$ for (Map.Entry<EncryptionType, EncryptionKey> keyEntry : KerberosKeyFactory.getKerberosKeys(principalName, passPhrase).entrySet()) -->Line_18 $$ final EncryptionKey key = keyEntry.getValue()[ FD ]
Line_22 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_43 $$ entryDos.write(data)[ FD ]
Line_13 $$ DataOutputStream dos = null-->Line_16 $$ dos.write(Keytab.VERSION_0X502_BYTES)[ FD ]
Line_19 $$ final byte keyVersion = (byte) key.getKeyVersion()-->Line_39 $$ entryDos.write(keyVersion)[ FD ]
Line_22 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_45 $$ IOUtils.closeQuietly(entryDos)[ FD ]
Line_18 $$ final EncryptionKey key = keyEntry.getValue()-->Line_19 $$ final byte keyVersion = (byte) key.getKeyVersion()[ FD ]
Line_22 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_31 $$ entryDos.writeUTF(realm)[ FD ]
Line_15 $$ dos = new DataOutputStream(new FileOutputStream(keytabFile))-->Line_48 $$ dos.writeInt(entryBytes.length)[ FD ]
Line_13 $$ DataOutputStream dos = null-->Line_49 $$ dos.write(entryBytes)[ FD ]
Line_41 $$ byte[] data = key.getKeyValue()-->Line_43 $$ entryDos.write(data)[ FD ]
Line_18 $$ final EncryptionKey key = keyEntry.getValue()-->Line_40 $$ entryDos.writeShort((short) key.getKeyType().getValue())[ FD ]
Line_22 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_40 $$ entryDos.writeShort((short) key.getKeyType().getValue())[ FD ]
Line_22 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_38 $$ entryDos.writeInt((int) (timeStamp.getTime() / 1000))[ FD ]
Line_13 $$ DataOutputStream dos = null-->Line_48 $$ dos.writeInt(entryBytes.length)[ FD ]
Line_18 $$ final EncryptionKey key = keyEntry.getValue()-->Line_41 $$ byte[] data = key.getKeyValue()[ FD ]
Line_22 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_42 $$ entryDos.writeShort((short) data.length)[ FD ]
Line_25 $$ String nameComponent = spnSplit[0]-->Line_27 $$ String[] nameComponents = nameComponent.split("/")[ FD ]
Line_22 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_39 $$ entryDos.write(keyVersion)[ FD ]
Line_15 $$ dos = new DataOutputStream(new FileOutputStream(keytabFile))-->Line_49 $$ dos.write(entryBytes)[ FD ]
Line_12 $$ final KerberosTime timeStamp = new KerberosTime()-->Line_38 $$ entryDos.writeInt((int) (timeStamp.getTime() / 1000))[ FD ]
Line_47 $$ final byte[] entryBytes = baos.toByteArray()-->Line_49 $$ dos.write(entryBytes)[ FD ]
Line_15 $$ dos = new DataOutputStream(new FileOutputStream(keytabFile))-->Line_53 $$ IOUtils.closeQuietly(dos)[ FD ]
Line_26 $$ String realm = spnSplit[1]-->Line_31 $$ entryDos.writeUTF(realm)[ FD ]
Line_15 $$ dos = new DataOutputStream(new FileOutputStream(keytabFile))-->Line_16 $$ dos.write(Keytab.VERSION_0X502_BYTES)[ FD ]
Line_13 $$ DataOutputStream dos = null-->Line_15 $$ dos = new DataOutputStream(new FileOutputStream(keytabFile))[ FD ]
Line_13 $$ DataOutputStream dos = null-->Line_53 $$ IOUtils.closeQuietly(dos)[ FD ]
Line_22 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_34 $$ entryDos.writeUTF(component)[ FD ]
