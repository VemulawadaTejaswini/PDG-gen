Line_29 $$ double mean = (((double) this.wordLengthsRead) / ((double) this.wordsRead))-->Line_30 $$ mean = Math.pow(mean, 2.0)[ FD ]
Line_15 $$ while (st.hasMoreTokens()) -->Line_18 $$ this.wordLengthsRead += word.length()[ CD ]
Line_12 $$ while ((line = br.readLine()) != null) -->Line_13 $$ StringTokenizer st = new StringTokenizer(line)[ CD ]
Line_14 $$ String word-->Line_16 $$ word = st.nextToken()[ FD ]
Line_15 $$ while (st.hasMoreTokens()) -->Line_19 $$ this.wordLengthsReadSquared += (long) Math.pow(word.length(), 2.0)[ CD ]
Line_16 $$ word = st.nextToken()-->Line_19 $$ this.wordLengthsReadSquared += (long) Math.pow(word.length(), 2.0)[ FD ]
Line_8 $$ BufferedReader br = null-->Line_26 $$ br.close()[ FD ]
Line_8 $$ BufferedReader br = null-->Line_12 $$ while ((line = br.readLine()) != null) [ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(new Configuration())-->Line_10 $$ br = new BufferedReader(new InputStreamReader(fs.open(fileStat.getPath())))[ FD ]
Line_2 $$ public double read(String path) throws IOException -->Line_32 $$ double stddev = Math.sqrt((term - mean))[ CD ]
Line_14 $$ String word-->Line_19 $$ this.wordLengthsReadSquared += (long) Math.pow(word.length(), 2.0)[ FD ]
Line_12 $$ while ((line = br.readLine()) != null) -->Line_15 $$ while (st.hasMoreTokens()) [ CD ]
Line_10 $$ br = new BufferedReader(new InputStreamReader(fs.open(fileStat.getPath())))-->Line_26 $$ br.close()[ FD ]
Line_11 $$ String line-->Line_12 $$ while ((line = br.readLine()) != null) [ FD ]
Line_12 $$ while ((line = br.readLine()) != null) -->Line_14 $$ String word[ CD ]
Line_10 $$ br = new BufferedReader(new InputStreamReader(fs.open(fileStat.getPath())))-->Line_12 $$ while ((line = br.readLine()) != null) [ FD ]
Line_2 $$ public double read(String path) throws IOException -->Line_31 $$ double term = (((double) this.wordLengthsReadSquared / ((double) this.wordsRead)))[ CD ]
Line_13 $$ StringTokenizer st = new StringTokenizer(line)-->Line_15 $$ while (st.hasMoreTokens()) [ FD ]
Line_2 $$ public double read(String path) throws IOException -->Line_33 $$ return stddev[ CD ]
Line_2 $$ public double read(String path) throws IOException -->Line_3 $$ FileSystem fs = FileSystem.get(new Configuration())[ CD ]
Line_8 $$ BufferedReader br = null-->Line_10 $$ br = new BufferedReader(new InputStreamReader(fs.open(fileStat.getPath())))[ FD ]
Line_5 $$ for (FileStatus fileStat : files) -->Line_10 $$ br = new BufferedReader(new InputStreamReader(fs.open(fileStat.getPath())))[ FD ]
Line_16 $$ word = st.nextToken()-->Line_18 $$ this.wordLengthsRead += word.length()[ FD ]
Line_13 $$ StringTokenizer st = new StringTokenizer(line)-->Line_16 $$ word = st.nextToken()[ FD ]
Line_15 $$ while (st.hasMoreTokens()) -->Line_16 $$ word = st.nextToken()[ CD ]
Line_2 $$ public double read(String path) throws IOException -->Line_29 $$ double mean = (((double) this.wordLengthsRead) / ((double) this.wordsRead))[ CD ]
Line_15 $$ while (st.hasMoreTokens()) -->Line_17 $$ this.wordsRead++[ CD ]
Line_2 $$ public double read(String path) throws IOException -->Line_30 $$ mean = Math.pow(mean, 2.0)[ CD ]
Line_5 $$ for (FileStatus fileStat : files) -->Line_6 $$ if (!fileStat.isFile())[ FD ]
Line_2 $$ public double read(String path) throws IOException -->Line_4 $$ FileStatus[] files = fs.listStatus(new Path(path))[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(new Configuration())-->Line_4 $$ FileStatus[] files = fs.listStatus(new Path(path))[ FD ]
Line_14 $$ String word-->Line_18 $$ this.wordLengthsRead += word.length()[ FD ]
