Line_19 $$ for (SSTableReader sstable : sstableCandidates.sstables) -->Line_21 $$ sstablesToValidate.add(sstable)[ FD ]
Line_12 $$ sstables = cfs.getSnapshotSSTableReader(snapshotName)-->Line_30 $$ if (sstables == null) [ FD ]
Line_66 $$ if (logger.isTraceEnabled()) -->Line_68 $$ logger.trace("Validation finished in [ CD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_63 $$ cfs.clearSnapshot(snapshotName)[ FD ]
Line_53 $$ while (ci.hasNext()) -->Line_54 $$ if (ci.isStopRequested())[ CD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_52 $$ validator.prepare(cfs, tree)[ FD ]
Line_43 $$ numPartitions += sstable.estimatedKeysForRanges(validator.desc.ranges)-->Line_68 $$ logger.trace("Validation finished in [ FD ]
Line_11 $$ if (isSnapshotValidation) -->Line_13 $$ gcBefore = cfs.gcBefore((int) (cfs.getSnapshotCreationTime(snapshotName) / 1000))[ CD ]
Line_5 $$ Refs<SSTableReader> sstables = null-->Line_30 $$ if (sstables == null) [ FD ]
Line_18 $$ Set<SSTableReader> sstablesToValidate = new HashSet()-->Line_35 $$ prs.addSSTables(cfs.metadata.cfId, sstablesToValidate)[ FD ]
Line_56 $$ try (UnfilteredRowIterator partition = ci.next()) -->Line_57 $$ validator.add(partition)[ FD ]
Line_29 $$ sstables = Refs.tryRef(sstablesToValidate)-->Line_71 $$ if (sstables != null)[ FD ]
Line_8 $$ int gcBefore-->Line_39 $$ gcBefore = getDefaultGcBefore(cfs, nowInSec)[ FD ]
Line_11 $$ if (isSnapshotValidation) -->Line_18 $$ Set<SSTableReader> sstablesToValidate = new HashSet()[ CD ]
Line_7 $$ String snapshotName = validator.desc.sessionId.toString()-->Line_13 $$ gcBefore = cfs.gcBefore((int) (cfs.getSnapshotCreationTime(snapshotName) / 1000))[ FD ]
Line_16 $$ ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(validator.desc.parentSessionId)-->Line_35 $$ prs.addSSTables(cfs.metadata.cfId, sstablesToValidate)[ FD ]
Line_62 $$ if (isSnapshotValidation) -->Line_63 $$ cfs.clearSnapshot(snapshotName)[ CD ]
Line_7 $$ String snapshotName = validator.desc.sessionId.toString()-->Line_10 $$ boolean isSnapshotValidation = cfs.snapshotExists(snapshotName)[ FD ]
Line_11 $$ if (isSnapshotValidation) -->Line_35 $$ prs.addSSTables(cfs.metadata.cfId, sstablesToValidate)[ CD ]
Line_36 $$ if (validator.gcBefore > 0)-->Line_39 $$ gcBefore = getDefaultGcBefore(cfs, nowInSec)[ CD ]
Line_7 $$ String snapshotName = validator.desc.sessionId.toString()-->Line_63 $$ cfs.clearSnapshot(snapshotName)[ FD ]
Line_66 $$ if (logger.isTraceEnabled()) -->Line_67 $$ long duration = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start)[ CD ]
Line_49 $$ try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables, validator.desc.ranges);-->Line_55 $$ throw new CompactionInterruptedException(ci.getCompactionInfo())[ FD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_39 $$ gcBefore = getDefaultGcBefore(cfs, nowInSec)[ FD ]
Line_17 $$ ColumnFamilyStore.RefViewFragment sstableCandidates = cfs.selectAndReference(View.select(SSTableSet.CANONICAL, ( s) -> !prs.isIncremental || !s.isRepaired()))-->Line_34 $$ sstableCandidates.release()[ FD ]
Line_43 $$ numPartitions += sstable.estimatedKeysForRanges(validator.desc.ranges)-->Line_45 $$ int depth = numPartitions > 0 ? (int) Math.min(Math.floor(Math.log(numPartitions)), 20) : 0[ FD ]
Line_5 $$ Refs<SSTableReader> sstables = null-->Line_71 $$ if (sstables != null)[ FD ]
Line_49 $$ try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables, validator.desc.ranges);-->Line_56 $$ try (UnfilteredRowIterator partition = ci.next()) [ FD ]
Line_49 $$ try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables, validator.desc.ranges);-->Line_54 $$ if (ci.isStopRequested())[ FD ]
Line_30 $$ if (sstables == null) -->Line_31 $$ logger.error("Could not reference sstables")[ CD ]
Line_5 $$ Refs<SSTableReader> sstables = null-->Line_49 $$ try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables, validator.desc.ranges);[ FD ]
Line_11 $$ if (isSnapshotValidation) -->Line_34 $$ sstableCandidates.release()[ CD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_60 $$ validator.complete()[ FD ]
Line_5 $$ Refs<SSTableReader> sstables = null-->Line_72 $$ sstables.release()[ FD ]
Line_41 $$ long numPartitions = 0-->Line_43 $$ numPartitions += sstable.estimatedKeysForRanges(validator.desc.ranges)[ FD ]
Line_71 $$ if (sstables != null)-->Line_72 $$ sstables.release()[ CD ]
Line_12 $$ sstables = cfs.getSnapshotSSTableReader(snapshotName)-->Line_71 $$ if (sstables != null)[ FD ]
Line_18 $$ Set<SSTableReader> sstablesToValidate = new HashSet()-->Line_29 $$ sstables = Refs.tryRef(sstablesToValidate)[ FD ]
Line_36 $$ if (validator.gcBefore > 0)-->Line_37 $$ gcBefore = validator.gcBefore[ CD ]
Line_11 $$ if (isSnapshotValidation) -->Line_12 $$ sstables = cfs.getSnapshotSSTableReader(snapshotName)[ CD ]
Line_18 $$ Set<SSTableReader> sstablesToValidate = new HashSet()-->Line_21 $$ sstablesToValidate.add(sstable)[ FD ]
Line_49 $$ try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables, validator.desc.ranges);-->Line_53 $$ while (ci.hasNext()) [ FD ]
Line_46 $$ MerkleTrees tree = new MerkleTrees(cfs.getPartitioner())-->Line_47 $$ tree.addMerkleTrees((int) Math.pow(2, depth), validator.desc.ranges)[ FD ]
Line_11 $$ if (isSnapshotValidation) -->Line_36 $$ if (validator.gcBefore > 0)[ CD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_12 $$ sstables = cfs.getSnapshotSSTableReader(snapshotName)[ FD ]
Line_20 $$ if (new Bounds(sstable.first.getToken(), sstable.last.getToken()).intersects(validator.desc.ranges)) -->Line_21 $$ sstablesToValidate.add(sstable)[ CD ]
Line_5 $$ Refs<SSTableReader> sstables = null-->Line_12 $$ sstables = cfs.getSnapshotSSTableReader(snapshotName)[ FD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_46 $$ MerkleTrees tree = new MerkleTrees(cfs.getPartitioner())[ FD ]
Line_12 $$ sstables = cfs.getSnapshotSSTableReader(snapshotName)-->Line_29 $$ sstables = Refs.tryRef(sstablesToValidate)[ FD ]
Line_46 $$ MerkleTrees tree = new MerkleTrees(cfs.getPartitioner())-->Line_52 $$ validator.prepare(cfs, tree)[ FD ]
Line_29 $$ sstables = Refs.tryRef(sstablesToValidate)-->Line_30 $$ if (sstables == null) [ FD ]
Line_29 $$ sstables = Refs.tryRef(sstablesToValidate)-->Line_72 $$ sstables.release()[ FD ]
Line_25 $$ if (!Sets.intersection(currentlyRepairing, sstablesToValidate).isEmpty()) -->Line_26 $$ logger.error("Cannot start multiple repair sessions over the same sstables")[ CD ]
Line_37 $$ gcBefore = validator.gcBefore-->Line_39 $$ gcBefore = getDefaultGcBefore(cfs, nowInSec)[ FD ]
Line_12 $$ sstables = cfs.getSnapshotSSTableReader(snapshotName)-->Line_72 $$ sstables.release()[ FD ]
Line_19 $$ for (SSTableReader sstable : sstableCandidates.sstables) -->Line_43 $$ numPartitions += sstable.estimatedKeysForRanges(validator.desc.ranges)[ FD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_5 $$ Refs<SSTableReader> sstables = null[ CD ]
Line_11 $$ if (isSnapshotValidation) -->Line_16 $$ ActiveRepairService.ParentRepairSession prs = ActiveRepairService.instance.getParentRepairSession(validator.desc.parentSessionId)[ CD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_49 $$ try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables, validator.desc.ranges);[ FD ]
Line_11 $$ if (isSnapshotValidation) -->Line_30 $$ if (sstables == null) [ CD ]
Line_18 $$ Set<SSTableReader> sstablesToValidate = new HashSet()-->Line_25 $$ if (!Sets.intersection(currentlyRepairing, sstablesToValidate).isEmpty()) [ FD ]
Line_41 $$ long numPartitions = 0-->Line_68 $$ logger.trace("Validation finished in [ FD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_57 $$ validator.add(partition)[ FD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_10 $$ boolean isSnapshotValidation = cfs.snapshotExists(snapshotName)[ FD ]
Line_3 $$ if (!cfs.isValid())-->Line_4 $$ return[ CD ]
Line_41 $$ long numPartitions = 0-->Line_45 $$ int depth = numPartitions > 0 ? (int) Math.min(Math.floor(Math.log(numPartitions)), 20) : 0[ FD ]
Line_13 $$ gcBefore = cfs.gcBefore((int) (cfs.getSnapshotCreationTime(snapshotName) / 1000))-->Line_39 $$ gcBefore = getDefaultGcBefore(cfs, nowInSec)[ FD ]
Line_11 $$ if (isSnapshotValidation) -->Line_25 $$ if (!Sets.intersection(currentlyRepairing, sstablesToValidate).isEmpty()) [ CD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_3 $$ if (!cfs.isValid())[ FD ]
Line_29 $$ sstables = Refs.tryRef(sstablesToValidate)-->Line_49 $$ try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables, validator.desc.ranges);[ FD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_17 $$ ColumnFamilyStore.RefViewFragment sstableCandidates = cfs.selectAndReference(View.select(SSTableSet.CANONICAL, ( s) -> !prs.isIncremental || !s.isRepaired()))[ FD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_13 $$ gcBefore = cfs.gcBefore((int) (cfs.getSnapshotCreationTime(snapshotName) / 1000))[ FD ]
Line_7 $$ String snapshotName = validator.desc.sessionId.toString()-->Line_12 $$ sstables = cfs.getSnapshotSSTableReader(snapshotName)[ FD ]
Line_46 $$ MerkleTrees tree = new MerkleTrees(cfs.getPartitioner())-->Line_68 $$ logger.trace("Validation finished in [ FD ]
Line_45 $$ int depth = numPartitions > 0 ? (int) Math.min(Math.floor(Math.log(numPartitions)), 20) : 0-->Line_47 $$ tree.addMerkleTrees((int) Math.pow(2, depth), validator.desc.ranges)[ FD ]
Line_67 $$ long duration = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start)-->Line_68 $$ logger.trace("Validation finished in [ FD ]
Line_5 $$ Refs<SSTableReader> sstables = null-->Line_29 $$ sstables = Refs.tryRef(sstablesToValidate)[ FD ]
Line_12 $$ sstables = cfs.getSnapshotSSTableReader(snapshotName)-->Line_49 $$ try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables, validator.desc.ranges);[ FD ]
Line_11 $$ if (isSnapshotValidation) -->Line_17 $$ ColumnFamilyStore.RefViewFragment sstableCandidates = cfs.selectAndReference(View.select(SSTableSet.CANONICAL, ( s) -> !prs.isIncremental || !s.isRepaired()))[ CD ]
Line_11 $$ if (isSnapshotValidation) -->Line_29 $$ sstables = Refs.tryRef(sstablesToValidate)[ CD ]
Line_13 $$ gcBefore = cfs.gcBefore((int) (cfs.getSnapshotCreationTime(snapshotName) / 1000))-->Line_37 $$ gcBefore = validator.gcBefore[ FD ]
Line_8 $$ int gcBefore-->Line_13 $$ gcBefore = cfs.gcBefore((int) (cfs.getSnapshotCreationTime(snapshotName) / 1000))[ FD ]
Line_45 $$ int depth = numPartitions > 0 ? (int) Math.min(Math.floor(Math.log(numPartitions)), 20) : 0-->Line_68 $$ logger.trace("Validation finished in [ FD ]
Line_11 $$ if (isSnapshotValidation) -->Line_15 $$ StorageService.instance.forceKeyspaceFlush(cfs.keyspace.getName(), cfs.name)[ CD ]
Line_24 $$ Set<SSTableReader> currentlyRepairing = ActiveRepairService.instance.currentlyRepairing(cfs.metadata.cfId, validator.desc.parentSessionId)-->Line_25 $$ if (!Sets.intersection(currentlyRepairing, sstablesToValidate).isEmpty()) [ FD ]
Line_11 $$ if (isSnapshotValidation) -->Line_24 $$ Set<SSTableReader> currentlyRepairing = ActiveRepairService.instance.currentlyRepairing(cfs.metadata.cfId, validator.desc.parentSessionId)[ CD ]
Line_9 $$ int nowInSec = FBUtilities.nowInSeconds()-->Line_39 $$ gcBefore = getDefaultGcBefore(cfs, nowInSec)[ FD ]
Line_8 $$ int gcBefore-->Line_37 $$ gcBefore = validator.gcBefore[ FD ]
Line_2 $$ private void doValidationCompaction(ColumnFamilyStore cfs, Validator validator) throws IOException -->Line_3 $$ if (!cfs.isValid())[ CD ]
