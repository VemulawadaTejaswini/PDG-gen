Line_24 $$ long square = 0-->Line_39 $$ square = Long.parseLong(squareLit)[ FD ]
Line_23 $$ long length = 0-->Line_36 $$ length = Long.parseLong(lengthLit)[ FD ]
Line_22 $$ long count = 0-->Line_33 $$ count = Long.parseLong(countLit)[ FD ]
Line_18 $$ double stddev = 0-->Line_47 $$ stddev = Math.sqrt((term - mean))[ FD ]
Line_15 $$ Path file = new Path(path, "part-r-00000")-->Line_16 $$ if (!fs.exists(file))[ FD ]
Line_34 $$ if (type.equals(LENGTH.toString())) -->Line_35 $$ String lengthLit = st.nextToken()[ CD ]
Line_34 $$ if (type.equals(LENGTH.toString())) -->Line_36 $$ length = Long.parseLong(lengthLit)[ CD ]
Line_19 $$ BufferedReader br = null-->Line_21 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))[ FD ]
Line_32 $$ String countLit = st.nextToken()-->Line_33 $$ count = Long.parseLong(countLit)[ FD ]
Line_21 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_26 $$ while ((line = br.readLine()) != null) [ FD ]
Line_27 $$ StringTokenizer st = new StringTokenizer(line)-->Line_38 $$ String squareLit = st.nextToken()[ FD ]
Line_25 $$ String line-->Line_26 $$ while ((line = br.readLine()) != null) [ FD ]
Line_37 $$ if (type.equals(SQUARE.toString())) -->Line_38 $$ String squareLit = st.nextToken()[ CD ]
Line_37 $$ if (type.equals(SQUARE.toString())) -->Line_39 $$ square = Long.parseLong(squareLit)[ CD ]
Line_19 $$ BufferedReader br = null-->Line_26 $$ while ((line = br.readLine()) != null) [ FD ]
Line_27 $$ StringTokenizer st = new StringTokenizer(line)-->Line_35 $$ String lengthLit = st.nextToken()[ FD ]
Line_14 $$ FileSystem fs = FileSystem.get(conf)-->Line_21 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))[ FD ]
Line_19 $$ BufferedReader br = null-->Line_51 $$ br.close()[ FD ]
Line_14 $$ FileSystem fs = FileSystem.get(conf)-->Line_16 $$ if (!fs.exists(file))[ FD ]
Line_21 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_51 $$ br.close()[ FD ]
Line_27 $$ StringTokenizer st = new StringTokenizer(line)-->Line_32 $$ String countLit = st.nextToken()[ FD ]
Line_38 $$ String squareLit = st.nextToken()-->Line_39 $$ square = Long.parseLong(squareLit)[ FD ]
Line_15 $$ Path file = new Path(path, "part-r-00000")-->Line_21 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))[ FD ]
Line_50 $$ if (br != null) -->Line_51 $$ br.close()[ CD ]
Line_19 $$ BufferedReader br = null-->Line_50 $$ if (br != null) [ FD ]
Line_21 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_50 $$ if (br != null) [ FD ]
Line_35 $$ String lengthLit = st.nextToken()-->Line_36 $$ length = Long.parseLong(lengthLit)[ FD ]
Line_34 $$ if (type.equals(LENGTH.toString())) -->Line_37 $$ if (type.equals(SQUARE.toString())) [ CD ]
Line_26 $$ while ((line = br.readLine()) != null) -->Line_27 $$ StringTokenizer st = new StringTokenizer(line)[ CD ]
