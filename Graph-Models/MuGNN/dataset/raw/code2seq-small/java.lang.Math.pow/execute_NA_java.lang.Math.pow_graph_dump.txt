Line_25 $$ String keyspaceName = entry.getKey()-->Line_118 $$ System.out.println("\t\tBloom filter false positives: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterFalsePositives"))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_61 $$ System.out.println("\t\tSSTable count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveSSTableCount"))[ FD ]
Line_5 $$ Map<String, List<ColumnFamilyStoreMBean>> tableStoreMap = new HashMap()-->Line_17 $$ tableStoreMap.get(keyspaceName).add(tableProxy)[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_36 $$ long readCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount()[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_90 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_35 $$ long writeCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount()[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_89 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")[ FD ]
Line_81 $$ Long memtableOffHeapSize = null-->Line_106 $$ if (memtableOffHeapSize != null)[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_102 $$ System.out.println("\t\tSSTable Compression Ratio: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionRatio"))[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_109 $$ System.out.println("\t\tLocal read count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount())[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_61 $$ System.out.println("\t\tSSTable count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveSSTableCount"))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_130 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")[ FD ]
Line_130 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")-->Line_131 $$ System.out.println("\t\tAverage live cells per slice (last five minutes): " + histogram.getMean())[ FD ]
Line_11 $$ ColumnFamilyStoreMBean tableProxy = entry.getValue()-->Line_16 $$ if (filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_33 $$ for (ColumnFamilyStoreMBean table : columnFamilies) -->Line_62 $$ int[] leveledSStables = table.getSSTableCountPerLevel()[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_99 $$ System.out.println("\t\tSpace used by snapshots (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "SnapshotsSize"), humanReadable))[ FD ]
Line_130 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")-->Line_135 $$ System.out.println("\t\tMaximum tombstones per slice (last five minutes): " + histogram.getMax())[ FD ]
Line_89 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")-->Line_124 $$ System.out.println("\t\tIndex summary off heap memory used: " + format(indexSummaryOffHeapSize, humanReadable))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_110 $$ double localReadLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getMean() / 1000[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_114 $$ double localWriteLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getMean() / 1000[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_12 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_33 $$ for (ColumnFamilyStoreMBean table : columnFamilies) -->Line_56 $$ String tableName = table.getColumnFamilyName()[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_98 $$ System.out.println("\t\tSpace used (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "TotalDiskSpaceUsed"), humanReadable))[ FD ]
Line_11 $$ ColumnFamilyStoreMBean tableProxy = entry.getValue()-->Line_12 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_113 $$ System.out.println("\t\tLocal write count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount())[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_133 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_104 $$ System.out.println("\t\tMemtable cell count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableColumnsCount"))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_103 $$ System.out.println("\t\tNumber of keys (estimate): " + probe.getColumnFamilyMetric(keyspaceName, tableName, "EstimatedPartitionCount"))[ FD ]
Line_8 $$ while (tables.hasNext()) -->Line_10 $$ String keyspaceName = entry.getKey()[ CD ]
Line_37 $$ if (readCount > 0) -->Line_38 $$ keyspaceReadCount += readCount[ CD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_118 $$ System.out.println("\t\tBloom filter false positives: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterFalsePositives"))[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_109 $$ System.out.println("\t\tLocal read count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount())[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_120 $$ System.out.println("\t\tBloom filter space used: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterDiskSpaceUsed"), humanReadable))[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_110 $$ double localReadLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getMean() / 1000[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_99 $$ System.out.println("\t\tSpace used by snapshots (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "SnapshotsSize"), humanReadable))[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_61 $$ System.out.println("\t\tSSTable count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveSSTableCount"))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_36 $$ long readCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount()[ FD ]
Line_9 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()-->Line_26 $$ List<ColumnFamilyStoreMBean> columnFamilies = entry.getValue()[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_105 $$ System.out.println("\t\tMemtable data size: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableLiveDataSize"), humanReadable))[ FD ]
Line_8 $$ while (tables.hasNext()) -->Line_9 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()[ CD ]
Line_57 $$ if (tableName.contains("."))-->Line_58 $$ System.out.println("\t\tTable (index): " + tableName)[ CD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_87 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")[ FD ]
Line_57 $$ if (tableName.contains("."))-->Line_60 $$ System.out.println("\t\tTable: " + tableName)[ CD ]
Line_63 $$ if (leveledSStables != null) -->Line_64 $$ System.out.print("\t\tSSTables in each level: [")[ CD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_114 $$ double localWriteLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getMean() / 1000[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_110 $$ double localReadLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getMean() / 1000[ FD ]
Line_84 $$ Long compressionMetadataOffHeapSize = null-->Line_126 $$ System.out.println("\t\tCompression metadata off heap memory used: " + format(compressionMetadataOffHeapSize, humanReadable))[ FD ]
Line_35 $$ long writeCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount()-->Line_41 $$ if (writeCount > 0) [ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_129 $$ System.out.println("\t\tCompacted partition mean bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MeanPartitionSize"), humanReadable))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_104 $$ System.out.println("\t\tMemtable cell count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableColumnsCount"))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_90 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_128 $$ System.out.println("\t\tCompacted partition maximum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MaxPartitionSize"), humanReadable))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_98 $$ System.out.println("\t\tSpace used (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "TotalDiskSpaceUsed"), humanReadable))[ FD ]
Line_84 $$ Long compressionMetadataOffHeapSize = null-->Line_90 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")[ FD ]
Line_85 $$ Long offHeapSize = null-->Line_100 $$ if (offHeapSize != null)[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_104 $$ System.out.println("\t\tMemtable cell count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableColumnsCount"))[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_90 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")[ FD ]
Line_82 $$ Long bloomFilterOffHeapSize = null-->Line_88 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_102 $$ System.out.println("\t\tSSTable Compression Ratio: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionRatio"))[ FD ]
Line_123 $$ if (indexSummaryOffHeapSize != null)-->Line_124 $$ System.out.println("\t\tIndex summary off heap memory used: " + format(indexSummaryOffHeapSize, humanReadable))[ CD ]
Line_16 $$ if (filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) -->Line_17 $$ tableStoreMap.get(keyspaceName).add(tableProxy)[ CD ]
Line_65 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_75 $$ if (level < leveledSStables.length - 1)[ CD ]
Line_12 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) -->Line_15 $$ tableStoreMap.put(keyspaceName, columnFamilies)[ CD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_133 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")[ FD ]
Line_130 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")-->Line_133 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")[ FD ]
Line_88 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")-->Line_121 $$ if (bloomFilterOffHeapSize != null)[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_35 $$ long writeCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount()[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_127 $$ System.out.println("\t\tCompacted partition minimum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MinPartitionSize"), humanReadable))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_127 $$ System.out.println("\t\tCompacted partition minimum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MinPartitionSize"), humanReadable))[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_97 $$ System.out.println("\t\tSpace used (live): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveDiskSpaceUsed"), humanReadable))[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_43 $$ keyspaceTotalWriteTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteTotalLatency")[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_39 $$ keyspaceTotalReadTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadTotalLatency")[ FD ]
Line_89 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")-->Line_123 $$ if (indexSummaryOffHeapSize != null)[ FD ]
Line_12 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) -->Line_13 $$ List<ColumnFamilyStoreMBean> columnFamilies = new ArrayList()[ CD ]
Line_100 $$ if (offHeapSize != null)-->Line_101 $$ System.out.println("\t\tOff heap memory used (total): " + format(offHeapSize, humanReadable))[ CD ]
Line_62 $$ int[] leveledSStables = table.getSSTableCountPerLevel()-->Line_63 $$ if (leveledSStables != null) [ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_45 $$ keyspacePendingFlushes += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes")[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_119 $$ System.out.printf("\t\tBloom filter false ratio: %s%n", String.format("%01.5f", probe.getColumnFamilyMetric(keyspaceName, tableName, "RecentBloomFilterFalseRatio")))[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_128 $$ System.out.println("\t\tCompacted partition maximum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MaxPartitionSize"), humanReadable))[ FD ]
Line_106 $$ if (memtableOffHeapSize != null)-->Line_107 $$ System.out.println("\t\tMemtable off heap memory used: " + format(memtableOffHeapSize, humanReadable))[ CD ]
Line_11 $$ ColumnFamilyStoreMBean tableProxy = entry.getValue()-->Line_17 $$ tableStoreMap.get(keyspaceName).add(tableProxy)[ FD ]
Line_29 $$ int keyspacePendingFlushes = 0-->Line_45 $$ keyspacePendingFlushes += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes")[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_130 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")[ FD ]
Line_83 $$ Long indexSummaryOffHeapSize = null-->Line_123 $$ if (indexSummaryOffHeapSize != null)[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_88 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")[ FD ]
Line_9 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()-->Line_12 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_130 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_17 $$ tableStoreMap.get(keyspaceName).add(tableProxy)[ FD ]
Line_11 $$ ColumnFamilyStoreMBean tableProxy = entry.getValue()-->Line_14 $$ columnFamilies.add(tableProxy)[ FD ]
Line_65 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_70 $$ if (level > 0)[ FD ]
Line_81 $$ Long memtableOffHeapSize = null-->Line_87 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_43 $$ keyspaceTotalWriteTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteTotalLatency")[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_35 $$ long writeCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount()[ FD ]
Line_82 $$ Long bloomFilterOffHeapSize = null-->Line_122 $$ System.out.println("\t\tBloom filter off heap memory used: " + format(bloomFilterOffHeapSize, humanReadable))[ FD ]
Line_70 $$ if (level > 0)-->Line_71 $$ maxCount = (long) Math.pow(10, level)[ CD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_105 $$ System.out.println("\t\tMemtable data size: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableLiveDataSize"), humanReadable))[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_133 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_103 $$ System.out.println("\t\tNumber of keys (estimate): " + probe.getColumnFamilyMetric(keyspaceName, tableName, "EstimatedPartitionCount"))[ FD ]
Line_47 $$ double keyspaceReadLatency = keyspaceReadCount > 0 ? keyspaceTotalReadTime / keyspaceReadCount / 1000 : Double.NaN-->Line_50 $$ System.out.println("\tRead Latency: " + String.format("%s", keyspaceReadLatency) + " ms.")[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_97 $$ System.out.println("\t\tSpace used (live): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveDiskSpaceUsed"), humanReadable))[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_127 $$ System.out.println("\t\tCompacted partition minimum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MinPartitionSize"), humanReadable))[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_87 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")[ FD ]
Line_65 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_71 $$ maxCount = (long) Math.pow(10, level)[ FD ]
Line_65 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_75 $$ if (level < leveledSStables.length - 1)[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_39 $$ keyspaceTotalReadTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadTotalLatency")[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_117 $$ System.out.println("\t\tPending flushes: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes"))[ FD ]
Line_91 $$ offHeapSize = memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize + compressionMetadataOffHeapSize-->Line_101 $$ System.out.println("\t\tOff heap memory used (total): " + format(offHeapSize, humanReadable))[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_108 $$ System.out.println("\t\tMemtable switch count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableSwitchCount"))[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_15 $$ tableStoreMap.put(keyspaceName, columnFamilies)[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_99 $$ System.out.println("\t\tSpace used by snapshots (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "SnapshotsSize"), humanReadable))[ FD ]
Line_4 $$ TableStats.OptionFilter filter = new OptionFilter(ignore, tableNames)-->Line_22 $$ filter.verifyColumnFamilies()[ FD ]
Line_91 $$ offHeapSize = memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize + compressionMetadataOffHeapSize-->Line_100 $$ if (offHeapSize != null)[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_119 $$ System.out.printf("\t\tBloom filter false ratio: %s%n", String.format("%01.5f", probe.getColumnFamilyMetric(keyspaceName, tableName, "RecentBloomFilterFalseRatio")))[ FD ]
Line_41 $$ if (writeCount > 0) -->Line_43 $$ keyspaceTotalWriteTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteTotalLatency")[ CD ]
Line_85 $$ Long offHeapSize = null-->Line_101 $$ System.out.println("\t\tOff heap memory used (total): " + format(offHeapSize, humanReadable))[ FD ]
Line_84 $$ Long compressionMetadataOffHeapSize = null-->Line_125 $$ if (compressionMetadataOffHeapSize != null)[ FD ]
Line_8 $$ while (tables.hasNext()) -->Line_12 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ CD ]
Line_63 $$ if (leveledSStables != null) -->Line_65 $$ for (int level = 0; level < leveledSStables.length; level++) [ CD ]
Line_4 $$ TableStats.OptionFilter filter = new OptionFilter(ignore, tableNames)-->Line_16 $$ if (filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_109 $$ System.out.println("\t\tLocal read count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount())[ FD ]
Line_133 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")-->Line_135 $$ System.out.println("\t\tMaximum tombstones per slice (last five minutes): " + histogram.getMax())[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_89 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")[ FD ]
Line_8 $$ while (tables.hasNext()) -->Line_11 $$ ColumnFamilyStoreMBean tableProxy = entry.getValue()[ CD ]
Line_28 $$ long keyspaceWriteCount = 0-->Line_42 $$ keyspaceWriteCount += writeCount[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_117 $$ System.out.println("\t\tPending flushes: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes"))[ FD ]
Line_121 $$ if (bloomFilterOffHeapSize != null)-->Line_122 $$ System.out.println("\t\tBloom filter off heap memory used: " + format(bloomFilterOffHeapSize, humanReadable))[ CD ]
Line_88 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")-->Line_122 $$ System.out.println("\t\tBloom filter off heap memory used: " + format(bloomFilterOffHeapSize, humanReadable))[ FD ]
Line_13 $$ List<ColumnFamilyStoreMBean> columnFamilies = new ArrayList()-->Line_14 $$ columnFamilies.add(tableProxy)[ FD ]
Line_36 $$ long readCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount()-->Line_38 $$ keyspaceReadCount += readCount[ FD ]
Line_65 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_66 $$ int count = leveledSStables[level][ CD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_108 $$ System.out.println("\t\tMemtable switch count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableSwitchCount"))[ FD ]
Line_115 $$ double localWLatency = localWriteLatency > 0 ? localWriteLatency : Double.NaN-->Line_116 $$ System.out.printf("\t\tLocal write latency: %01.3f ms%n", localWLatency)[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_88 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")[ FD ]
Line_82 $$ Long bloomFilterOffHeapSize = null-->Line_121 $$ if (bloomFilterOffHeapSize != null)[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_105 $$ System.out.println("\t\tMemtable data size: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableLiveDataSize"), humanReadable))[ FD ]
Line_30 $$ double keyspaceTotalReadTime = 0.0f-->Line_39 $$ keyspaceTotalReadTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadTotalLatency")[ FD ]
Line_90 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")-->Line_125 $$ if (compressionMetadataOffHeapSize != null)[ FD ]
Line_5 $$ Map<String, List<ColumnFamilyStoreMBean>> tableStoreMap = new HashMap()-->Line_12 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_83 $$ Long indexSummaryOffHeapSize = null-->Line_89 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")[ FD ]
Line_125 $$ if (compressionMetadataOffHeapSize != null)-->Line_126 $$ System.out.println("\t\tCompression metadata off heap memory used: " + format(compressionMetadataOffHeapSize, humanReadable))[ CD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_113 $$ System.out.println("\t\tLocal write count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount())[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_45 $$ keyspacePendingFlushes += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes")[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_89 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")[ FD ]
Line_36 $$ long readCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount()-->Line_37 $$ if (readCount > 0) [ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_120 $$ System.out.println("\t\tBloom filter space used: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterDiskSpaceUsed"), humanReadable))[ FD ]
Line_130 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")-->Line_132 $$ System.out.println("\t\tMaximum live cells per slice (last five minutes): " + histogram.getMax())[ FD ]
Line_75 $$ if (level < leveledSStables.length - 1)-->Line_76 $$ System.out.print(", ")[ CD ]
Line_12 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) -->Line_14 $$ columnFamilies.add(tableProxy)[ CD ]
Line_12 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) -->Line_16 $$ if (filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ CD ]
Line_85 $$ Long offHeapSize = null-->Line_91 $$ offHeapSize = memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize + compressionMetadataOffHeapSize[ FD ]
Line_83 $$ Long indexSummaryOffHeapSize = null-->Line_124 $$ System.out.println("\t\tIndex summary off heap memory used: " + format(indexSummaryOffHeapSize, humanReadable))[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_108 $$ System.out.println("\t\tMemtable switch count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableSwitchCount"))[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_129 $$ System.out.println("\t\tCompacted partition mean bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MeanPartitionSize"), humanReadable))[ FD ]
Line_41 $$ if (writeCount > 0) -->Line_42 $$ keyspaceWriteCount += writeCount[ CD ]
Line_48 $$ double keyspaceWriteLatency = keyspaceWriteCount > 0 ? keyspaceTotalWriteTime / keyspaceWriteCount / 1000 : Double.NaN-->Line_52 $$ System.out.println("\tWrite Latency: " + String.format("%s", keyspaceWriteLatency) + " ms.")[ FD ]
Line_66 $$ int count = leveledSStables[level]-->Line_67 $$ System.out.print(count)[ FD ]
Line_13 $$ List<ColumnFamilyStoreMBean> columnFamilies = new ArrayList()-->Line_15 $$ tableStoreMap.put(keyspaceName, columnFamilies)[ FD ]
Line_33 $$ for (ColumnFamilyStoreMBean table : columnFamilies) -->Line_34 $$ String tableName = table.getColumnFamilyName()[ FD ]
Line_65 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_67 $$ System.out.print(count)[ CD ]
Line_87 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")-->Line_106 $$ if (memtableOffHeapSize != null)[ FD ]
Line_90 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")-->Line_91 $$ offHeapSize = memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize + compressionMetadataOffHeapSize[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_114 $$ double localWriteLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getMean() / 1000[ FD ]
Line_130 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")-->Line_134 $$ System.out.println("\t\tAverage tombstones per slice (last five minutes): " + histogram.getMean())[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_128 $$ System.out.println("\t\tCompacted partition maximum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MaxPartitionSize"), humanReadable))[ FD ]
Line_27 $$ long keyspaceReadCount = 0-->Line_38 $$ keyspaceReadCount += readCount[ FD ]
Line_65 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_70 $$ if (level > 0)[ CD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_88 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")[ FD ]
Line_9 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()-->Line_25 $$ String keyspaceName = entry.getKey()[ FD ]
Line_81 $$ Long memtableOffHeapSize = null-->Line_107 $$ System.out.println("\t\tMemtable off heap memory used: " + format(memtableOffHeapSize, humanReadable))[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_113 $$ System.out.println("\t\tLocal write count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount())[ FD ]
Line_4 $$ TableStats.OptionFilter filter = new OptionFilter(ignore, tableNames)-->Line_12 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_129 $$ System.out.println("\t\tCompacted partition mean bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MeanPartitionSize"), humanReadable))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_119 $$ System.out.printf("\t\tBloom filter false ratio: %s%n", String.format("%01.5f", probe.getColumnFamilyMetric(keyspaceName, tableName, "RecentBloomFilterFalseRatio")))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_118 $$ System.out.println("\t\tBloom filter false positives: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterFalsePositives"))[ FD ]
Line_9 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()-->Line_10 $$ String keyspaceName = entry.getKey()[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_120 $$ System.out.println("\t\tBloom filter space used: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterDiskSpaceUsed"), humanReadable))[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_98 $$ System.out.println("\t\tSpace used (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "TotalDiskSpaceUsed"), humanReadable))[ FD ]
Line_9 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()-->Line_16 $$ if (filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_9 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()-->Line_11 $$ ColumnFamilyStoreMBean tableProxy = entry.getValue()[ FD ]
Line_5 $$ Map<String, List<ColumnFamilyStoreMBean>> tableStoreMap = new HashMap()-->Line_15 $$ tableStoreMap.put(keyspaceName, columnFamilies)[ FD ]
Line_37 $$ if (readCount > 0) -->Line_39 $$ keyspaceTotalReadTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadTotalLatency")[ CD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_97 $$ System.out.println("\t\tSpace used (live): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveDiskSpaceUsed"), humanReadable))[ FD ]
Line_35 $$ long writeCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount()-->Line_42 $$ keyspaceWriteCount += writeCount[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_102 $$ System.out.println("\t\tSSTable Compression Ratio: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionRatio"))[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_103 $$ System.out.println("\t\tNumber of keys (estimate): " + probe.getColumnFamilyMetric(keyspaceName, tableName, "EstimatedPartitionCount"))[ FD ]
Line_87 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")-->Line_107 $$ System.out.println("\t\tMemtable off heap memory used: " + format(memtableOffHeapSize, humanReadable))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_45 $$ keyspacePendingFlushes += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes")[ FD ]
Line_75 $$ if (level < leveledSStables.length - 1)-->Line_78 $$ System.out.println("]")[ CD ]
Line_111 $$ double localRLatency = localReadLatency > 0 ? localReadLatency : Double.NaN-->Line_112 $$ System.out.printf("\t\tLocal read latency: %01.3f ms%n", localRLatency)[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_117 $$ System.out.println("\t\tPending flushes: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes"))[ FD ]
Line_10 $$ String keyspaceName = entry.getKey()-->Line_43 $$ keyspaceTotalWriteTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteTotalLatency")[ FD ]
Line_31 $$ double keyspaceTotalWriteTime = 0.0f-->Line_43 $$ keyspaceTotalWriteTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteTotalLatency")[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_39 $$ keyspaceTotalReadTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadTotalLatency")[ FD ]
Line_25 $$ String keyspaceName = entry.getKey()-->Line_36 $$ long readCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount()[ FD ]
Line_84 $$ Long compressionMetadataOffHeapSize = null-->Line_91 $$ offHeapSize = memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize + compressionMetadataOffHeapSize[ FD ]
Line_90 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")-->Line_126 $$ System.out.println("\t\tCompression metadata off heap memory used: " + format(compressionMetadataOffHeapSize, humanReadable))[ FD ]
Line_133 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")-->Line_134 $$ System.out.println("\t\tAverage tombstones per slice (last five minutes): " + histogram.getMean())[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_57 $$ if (tableName.contains("."))[ FD ]
Line_34 $$ String tableName = table.getColumnFamilyName()-->Line_87 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")[ FD ]
