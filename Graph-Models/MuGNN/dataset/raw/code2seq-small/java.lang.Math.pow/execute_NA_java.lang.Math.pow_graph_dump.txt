Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_121 $$ System.out.println("\t\tCompacted partition mean bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MeanPartitionSize"), humanReadable))[ FD ]
Line_4 $$ Map<String, List<ColumnFamilyStoreMBean>> tableStoreMap = new HashMap()-->Line_20 $$ for (Map.Entry<String, List<ColumnFamilyStoreMBean>> entry : tableStoreMap.entrySet()) [ FD ]
Line_125 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")-->Line_126 $$ System.out.println("\t\tAverage tombstones per slice (last five minutes): " + histogram.getMean())[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_3 $$ TableStats.OptionFilter filter = new OptionFilter(ignore, tableNames)[ CD ]
Line_77 $$ Long compressionMetadataOffHeapSize = null-->Line_117 $$ if (compressionMetadataOffHeapSize != null)[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_109 $$ System.out.println("\t\tPending flushes: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes"))[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_97 $$ System.out.println("\t\tMemtable data size: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableLiveDataSize"), humanReadable))[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_35 $$ keyspaceTotalReadTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadTotalLatency")[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_94 $$ System.out.println("\t\tSSTable Compression Ratio: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionRatio"))[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_121 $$ System.out.println("\t\tCompacted partition mean bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MeanPartitionSize"), humanReadable))[ FD ]
Line_75 $$ Long bloomFilterOffHeapSize = null-->Line_114 $$ System.out.println("\t\tBloom filter off heap memory used: " + format(bloomFilterOffHeapSize, humanReadable))[ FD ]
Line_26 $$ double keyspaceTotalReadTime = 0.0f-->Line_35 $$ keyspaceTotalReadTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadTotalLatency")[ FD ]
Line_10 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) -->Line_14 $$ if (filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ CD ]
Line_78 $$ Long offHeapSize = null-->Line_93 $$ System.out.println("\t\tOff heap memory used (total): " + format(offHeapSize, humanReadable))[ FD ]
Line_3 $$ TableStats.OptionFilter filter = new OptionFilter(ignore, tableNames)-->Line_14 $$ if (filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_41 $$ keyspacePendingFlushes += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes")[ FD ]
Line_23 $$ long keyspaceReadCount = 0-->Line_34 $$ keyspaceReadCount += readCount[ FD ]
Line_32 $$ long readCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount()-->Line_33 $$ if (readCount > 0) [ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_120 $$ System.out.println("\t\tCompacted partition maximum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MaxPartitionSize"), humanReadable))[ FD ]
Line_24 $$ long keyspaceWriteCount = 0-->Line_38 $$ keyspaceWriteCount += writeCount[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_101 $$ System.out.println("\t\tLocal read count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount())[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_95 $$ System.out.println("\t\tNumber of keys (estimate): " + probe.getColumnFamilyMetric(keyspaceName, tableName, "EstimatedPartitionCount"))[ FD ]
Line_11 $$ List<ColumnFamilyStoreMBean> columnFamilies = new ArrayList()-->Line_13 $$ tableStoreMap.put(keyspaceName, columnFamilies)[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_82 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")[ FD ]
Line_29 $$ for (ColumnFamilyStoreMBean table : columnFamilies) -->Line_30 $$ String tableName = table.getColumnFamilyName()[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_111 $$ System.out.printf("\t\tBloom filter false ratio: %s%n", String.format("%01.5f", probe.getColumnFamilyMetric(keyspaceName, tableName, "RecentBloomFilterFalseRatio")))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_121 $$ System.out.println("\t\tCompacted partition mean bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MeanPartitionSize"), humanReadable))[ FD ]
Line_9 $$ ColumnFamilyStoreMBean tableProxy = entry.getValue()-->Line_15 $$ tableStoreMap.get(keyspaceName).add(tableProxy)[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_81 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")[ FD ]
Line_83 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")-->Line_118 $$ System.out.println("\t\tCompression metadata off heap memory used: " + format(compressionMetadataOffHeapSize, humanReadable))[ FD ]
Line_20 $$ for (Map.Entry<String, List<ColumnFamilyStoreMBean>> entry : tableStoreMap.entrySet()) -->Line_22 $$ List<ColumnFamilyStoreMBean> columnFamilies = entry.getValue()[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_31 $$ long writeCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount()[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_80 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_100 $$ System.out.println("\t\tMemtable switch count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableSwitchCount"))[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_111 $$ System.out.printf("\t\tBloom filter false ratio: %s%n", String.format("%01.5f", probe.getColumnFamilyMetric(keyspaceName, tableName, "RecentBloomFilterFalseRatio")))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_35 $$ keyspaceTotalReadTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadTotalLatency")[ FD ]
Line_82 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")-->Line_115 $$ if (indexSummaryOffHeapSize != null)[ FD ]
Line_37 $$ if (writeCount > 0) -->Line_39 $$ keyspaceTotalWriteTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteTotalLatency")[ CD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_31 $$ long writeCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount()[ FD ]
Line_31 $$ long writeCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount()-->Line_38 $$ keyspaceWriteCount += writeCount[ FD ]
Line_7 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()-->Line_9 $$ ColumnFamilyStoreMBean tableProxy = entry.getValue()[ FD ]
Line_4 $$ Map<String, List<ColumnFamilyStoreMBean>> tableStoreMap = new HashMap()-->Line_13 $$ tableStoreMap.put(keyspaceName, columnFamilies)[ FD ]
Line_60 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_64 $$ if (level > 0)[ CD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_90 $$ System.out.println("\t\tSpace used (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "TotalDiskSpaceUsed"), humanReadable))[ FD ]
Line_7 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()-->Line_14 $$ if (filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_10 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) -->Line_12 $$ columnFamilies.add(tableProxy)[ CD ]
Line_58 $$ if (leveledSStables != null) -->Line_60 $$ for (int level = 0; level < leveledSStables.length; level++) [ CD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_80 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_122 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")[ FD ]
Line_3 $$ TableStats.OptionFilter filter = new OptionFilter(ignore, tableNames)-->Line_10 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_105 $$ System.out.println("\t\tLocal write count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount())[ FD ]
Line_84 $$ offHeapSize = memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize + compressionMetadataOffHeapSize-->Line_93 $$ System.out.println("\t\tOff heap memory used (total): " + format(offHeapSize, humanReadable))[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_110 $$ System.out.println("\t\tBloom filter false positives: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterFalsePositives"))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_4 $$ Map<String, List<ColumnFamilyStoreMBean>> tableStoreMap = new HashMap()[ CD ]
Line_31 $$ long writeCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount()-->Line_37 $$ if (writeCount > 0) [ FD ]
Line_63 $$ long maxCount = 4L-->Line_65 $$ maxCount = (long) Math.pow(10, level)[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_82 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_56 $$ System.out.println("\t\tSSTable count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveSSTableCount"))[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_81 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_110 $$ System.out.println("\t\tBloom filter false positives: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterFalsePositives"))[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_39 $$ keyspaceTotalWriteTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteTotalLatency")[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_18 $$ filter.verifyKeyspaces(probe.getKeyspaces())[ CD ]
Line_107 $$ double localWLatency = localWriteLatency > 0 ? localWriteLatency : Double.NaN-->Line_108 $$ System.out.printf("\t\tLocal write latency: %01.3f ms%n", localWLatency)[ FD ]
Line_43 $$ double keyspaceReadLatency = keyspaceReadCount > 0 ? keyspaceTotalReadTime / keyspaceReadCount / 1000 : Double.NaN-->Line_46 $$ System.out.println("\tRead Latency: " + String.format("%s", keyspaceReadLatency) + " ms.")[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_39 $$ keyspaceTotalWriteTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteTotalLatency")[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_101 $$ System.out.println("\t\tLocal read count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount())[ FD ]
Line_11 $$ List<ColumnFamilyStoreMBean> columnFamilies = new ArrayList()-->Line_12 $$ columnFamilies.add(tableProxy)[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_32 $$ long readCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount()[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_81 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_95 $$ System.out.println("\t\tNumber of keys (estimate): " + probe.getColumnFamilyMetric(keyspaceName, tableName, "EstimatedPartitionCount"))[ FD ]
Line_122 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")-->Line_123 $$ System.out.println("\t\tAverage live cells per slice (last five minutes): " + histogram.getMean())[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_13 $$ tableStoreMap.put(keyspaceName, columnFamilies)[ FD ]
Line_115 $$ if (indexSummaryOffHeapSize != null)-->Line_116 $$ System.out.println("\t\tIndex summary off heap memory used: " + format(indexSummaryOffHeapSize, humanReadable))[ CD ]
Line_74 $$ Long memtableOffHeapSize = null-->Line_98 $$ if (memtableOffHeapSize != null)[ FD ]
Line_80 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")-->Line_99 $$ System.out.println("\t\tMemtable off heap memory used: " + format(memtableOffHeapSize, humanReadable))[ FD ]
Line_10 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) -->Line_13 $$ tableStoreMap.put(keyspaceName, columnFamilies)[ CD ]
Line_60 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_68 $$ if (level < leveledSStables.length - 1)[ CD ]
Line_76 $$ Long indexSummaryOffHeapSize = null-->Line_82 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")[ FD ]
Line_77 $$ Long compressionMetadataOffHeapSize = null-->Line_83 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_94 $$ System.out.println("\t\tSSTable Compression Ratio: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionRatio"))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_96 $$ System.out.println("\t\tMemtable cell count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableColumnsCount"))[ FD ]
Line_5 $$ Iterator<Map.Entry<String, ColumnFamilyStoreMBean>> tables = probe.getColumnFamilyStoreMBeanProxies()-->Line_7 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_90 $$ System.out.println("\t\tSpace used (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "TotalDiskSpaceUsed"), humanReadable))[ FD ]
Line_78 $$ Long offHeapSize = null-->Line_92 $$ if (offHeapSize != null)[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_56 $$ System.out.println("\t\tSSTable count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveSSTableCount"))[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_101 $$ System.out.println("\t\tLocal read count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount())[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_89 $$ System.out.println("\t\tSpace used (live): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveDiskSpaceUsed"), humanReadable))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_102 $$ double localReadLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getMean() / 1000[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_80 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")[ FD ]
Line_60 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_65 $$ maxCount = (long) Math.pow(10, level)[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_95 $$ System.out.println("\t\tNumber of keys (estimate): " + probe.getColumnFamilyMetric(keyspaceName, tableName, "EstimatedPartitionCount"))[ FD ]
Line_92 $$ if (offHeapSize != null)-->Line_93 $$ System.out.println("\t\tOff heap memory used (total): " + format(offHeapSize, humanReadable))[ CD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_119 $$ System.out.println("\t\tCompacted partition minimum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MinPartitionSize"), humanReadable))[ FD ]
Line_14 $$ if (filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) -->Line_15 $$ tableStoreMap.get(keyspaceName).add(tableProxy)[ CD ]
Line_122 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")-->Line_124 $$ System.out.println("\t\tMaximum live cells per slice (last five minutes): " + histogram.getMax())[ FD ]
Line_3 $$ TableStats.OptionFilter filter = new OptionFilter(ignore, tableNames)-->Line_18 $$ filter.verifyKeyspaces(probe.getKeyspaces())[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_90 $$ System.out.println("\t\tSpace used (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "TotalDiskSpaceUsed"), humanReadable))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_56 $$ System.out.println("\t\tSSTable count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveSSTableCount"))[ FD ]
Line_9 $$ ColumnFamilyStoreMBean tableProxy = entry.getValue()-->Line_14 $$ if (filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_60 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_66 $$ if (count > maxCount)[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_119 $$ System.out.println("\t\tCompacted partition minimum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MinPartitionSize"), humanReadable))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_39 $$ keyspaceTotalWriteTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteTotalLatency")[ FD ]
Line_60 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_64 $$ if (level > 0)[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_109 $$ System.out.println("\t\tPending flushes: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes"))[ FD ]
Line_83 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")-->Line_117 $$ if (compressionMetadataOffHeapSize != null)[ FD ]
Line_7 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()-->Line_21 $$ String keyspaceName = entry.getKey()[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_97 $$ System.out.println("\t\tMemtable data size: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableLiveDataSize"), humanReadable))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_18 $$ filter.verifyKeyspaces(probe.getKeyspaces())[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_82 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")[ FD ]
Line_6 $$ while (tables.hasNext()) -->Line_10 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ CD ]
Line_29 $$ for (ColumnFamilyStoreMBean table : columnFamilies) -->Line_57 $$ int[] leveledSStables = table.getSSTableCountPerLevel()[ FD ]
Line_60 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_62 $$ System.out.print(count)[ CD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_52 $$ if (tableName.contains("."))[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_81 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")[ FD ]
Line_80 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")-->Line_98 $$ if (memtableOffHeapSize != null)[ FD ]
Line_98 $$ if (memtableOffHeapSize != null)-->Line_99 $$ System.out.println("\t\tMemtable off heap memory used: " + format(memtableOffHeapSize, humanReadable))[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_105 $$ System.out.println("\t\tLocal write count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount())[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_100 $$ System.out.println("\t\tMemtable switch count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableSwitchCount"))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_112 $$ System.out.println("\t\tBloom filter space used: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterDiskSpaceUsed"), humanReadable))[ FD ]
Line_27 $$ double keyspaceTotalWriteTime = 0.0f-->Line_39 $$ keyspaceTotalWriteTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteTotalLatency")[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_106 $$ double localWriteLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getMean() / 1000[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_32 $$ long readCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount()[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_97 $$ System.out.println("\t\tMemtable data size: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableLiveDataSize"), humanReadable))[ FD ]
Line_125 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")-->Line_127 $$ System.out.println("\t\tMaximum tombstones per slice (last five minutes): " + histogram.getMax())[ FD ]
Line_60 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_63 $$ long maxCount = 4L[ CD ]
Line_76 $$ Long indexSummaryOffHeapSize = null-->Line_115 $$ if (indexSummaryOffHeapSize != null)[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_96 $$ System.out.println("\t\tMemtable cell count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableColumnsCount"))[ FD ]
Line_3 $$ TableStats.OptionFilter filter = new OptionFilter(ignore, tableNames)-->Line_19 $$ filter.verifyColumnFamilies()[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_5 $$ Iterator<Map.Entry<String, ColumnFamilyStoreMBean>> tables = probe.getColumnFamilyStoreMBeanProxies()[ CD ]
Line_122 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")-->Line_125 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")[ FD ]
Line_29 $$ for (ColumnFamilyStoreMBean table : columnFamilies) -->Line_51 $$ String tableName = table.getColumnFamilyName()[ FD ]
Line_63 $$ long maxCount = 4L-->Line_66 $$ if (count > maxCount)[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_89 $$ System.out.println("\t\tSpace used (live): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveDiskSpaceUsed"), humanReadable))[ FD ]
Line_7 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()-->Line_8 $$ String keyspaceName = entry.getKey()[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_111 $$ System.out.printf("\t\tBloom filter false ratio: %s%n", String.format("%01.5f", probe.getColumnFamilyMetric(keyspaceName, tableName, "RecentBloomFilterFalseRatio")))[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_31 $$ long writeCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount()[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_105 $$ System.out.println("\t\tLocal write count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount())[ FD ]
Line_122 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")-->Line_126 $$ System.out.println("\t\tAverage tombstones per slice (last five minutes): " + histogram.getMean())[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_39 $$ keyspaceTotalWriteTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteTotalLatency")[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_112 $$ System.out.println("\t\tBloom filter space used: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterDiskSpaceUsed"), humanReadable))[ FD ]
Line_113 $$ if (bloomFilterOffHeapSize != null)-->Line_114 $$ System.out.println("\t\tBloom filter off heap memory used: " + format(bloomFilterOffHeapSize, humanReadable))[ CD ]
Line_10 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) -->Line_11 $$ List<ColumnFamilyStoreMBean> columnFamilies = new ArrayList()[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_91 $$ System.out.println("\t\tSpace used by snapshots (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "SnapshotsSize"), humanReadable))[ FD ]
Line_58 $$ if (leveledSStables != null) -->Line_59 $$ System.out.print("\t\tSSTables in each level: [")[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_101 $$ System.out.println("\t\tLocal read count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount())[ FD ]
Line_6 $$ while (tables.hasNext()) -->Line_7 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()[ CD ]
Line_7 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()-->Line_22 $$ List<ColumnFamilyStoreMBean> columnFamilies = entry.getValue()[ FD ]
Line_81 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")-->Line_114 $$ System.out.println("\t\tBloom filter off heap memory used: " + format(bloomFilterOffHeapSize, humanReadable))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_19 $$ filter.verifyColumnFamilies()[ CD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_100 $$ System.out.println("\t\tMemtable switch count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableSwitchCount"))[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_100 $$ System.out.println("\t\tMemtable switch count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableSwitchCount"))[ FD ]
Line_52 $$ if (tableName.contains("."))-->Line_53 $$ System.out.println("\t\tTable (index): " + tableName)[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_83 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_31 $$ long writeCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount()[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_94 $$ System.out.println("\t\tSSTable Compression Ratio: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionRatio"))[ FD ]
Line_75 $$ Long bloomFilterOffHeapSize = null-->Line_113 $$ if (bloomFilterOffHeapSize != null)[ FD ]
Line_4 $$ Map<String, List<ColumnFamilyStoreMBean>> tableStoreMap = new HashMap()-->Line_15 $$ tableStoreMap.get(keyspaceName).add(tableProxy)[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_110 $$ System.out.println("\t\tBloom filter false positives: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterFalsePositives"))[ FD ]
Line_52 $$ if (tableName.contains("."))-->Line_55 $$ System.out.println("\t\tTable: " + tableName)[ CD ]
Line_6 $$ while (tables.hasNext()) -->Line_8 $$ String keyspaceName = entry.getKey()[ CD ]
Line_60 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_61 $$ int count = leveledSStables[level][ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_122 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_102 $$ double localReadLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getMean() / 1000[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_6 $$ while (tables.hasNext()) [ CD ]
Line_117 $$ if (compressionMetadataOffHeapSize != null)-->Line_118 $$ System.out.println("\t\tCompression metadata off heap memory used: " + format(compressionMetadataOffHeapSize, humanReadable))[ CD ]
Line_61 $$ int count = leveledSStables[level]-->Line_62 $$ System.out.print(count)[ FD ]
Line_74 $$ Long memtableOffHeapSize = null-->Line_99 $$ System.out.println("\t\tMemtable off heap memory used: " + format(memtableOffHeapSize, humanReadable))[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_119 $$ System.out.println("\t\tCompacted partition minimum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MinPartitionSize"), humanReadable))[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_35 $$ keyspaceTotalReadTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadTotalLatency")[ FD ]
Line_60 $$ for (int level = 0; level < leveledSStables.length; level++) -->Line_68 $$ if (level < leveledSStables.length - 1)[ FD ]
Line_9 $$ ColumnFamilyStoreMBean tableProxy = entry.getValue()-->Line_10 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_5 $$ Iterator<Map.Entry<String, ColumnFamilyStoreMBean>> tables = probe.getColumnFamilyStoreMBeanProxies()[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_106 $$ double localWriteLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getMean() / 1000[ FD ]
Line_33 $$ if (readCount > 0) -->Line_35 $$ keyspaceTotalReadTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadTotalLatency")[ CD ]
Line_57 $$ int[] leveledSStables = table.getSSTableCountPerLevel()-->Line_58 $$ if (leveledSStables != null) [ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_109 $$ System.out.println("\t\tPending flushes: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes"))[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_89 $$ System.out.println("\t\tSpace used (live): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveDiskSpaceUsed"), humanReadable))[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_91 $$ System.out.println("\t\tSpace used by snapshots (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "SnapshotsSize"), humanReadable))[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_10 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_78 $$ Long offHeapSize = null-->Line_84 $$ offHeapSize = memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize + compressionMetadataOffHeapSize[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_125 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_32 $$ long readCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount()[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_125 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")[ FD ]
Line_32 $$ long readCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount()-->Line_34 $$ keyspaceReadCount += readCount[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_122 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_82 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")[ FD ]
Line_68 $$ if (level < leveledSStables.length - 1)-->Line_71 $$ System.out.println("]")[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_106 $$ double localWriteLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getMean() / 1000[ FD ]
Line_77 $$ Long compressionMetadataOffHeapSize = null-->Line_118 $$ System.out.println("\t\tCompression metadata off heap memory used: " + format(compressionMetadataOffHeapSize, humanReadable))[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_125 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_41 $$ keyspacePendingFlushes += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes")[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_41 $$ keyspacePendingFlushes += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes")[ FD ]
Line_20 $$ for (Map.Entry<String, List<ColumnFamilyStoreMBean>> entry : tableStoreMap.entrySet()) -->Line_21 $$ String keyspaceName = entry.getKey()[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_94 $$ System.out.println("\t\tSSTable Compression Ratio: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionRatio"))[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_122 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_91 $$ System.out.println("\t\tSpace used by snapshots (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "SnapshotsSize"), humanReadable))[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_105 $$ System.out.println("\t\tLocal write count: " + ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getCount())[ FD ]
Line_37 $$ if (writeCount > 0) -->Line_38 $$ keyspaceWriteCount += writeCount[ CD ]
Line_25 $$ int keyspacePendingFlushes = 0-->Line_41 $$ keyspacePendingFlushes += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes")[ FD ]
Line_84 $$ offHeapSize = memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize + compressionMetadataOffHeapSize-->Line_92 $$ if (offHeapSize != null)[ FD ]
Line_5 $$ Iterator<Map.Entry<String, ColumnFamilyStoreMBean>> tables = probe.getColumnFamilyStoreMBeanProxies()-->Line_6 $$ while (tables.hasNext()) [ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_121 $$ System.out.println("\t\tCompacted partition mean bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MeanPartitionSize"), humanReadable))[ FD ]
Line_83 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")-->Line_84 $$ offHeapSize = memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize + compressionMetadataOffHeapSize[ FD ]
Line_64 $$ if (level > 0)-->Line_65 $$ maxCount = (long) Math.pow(10, level)[ CD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_112 $$ System.out.println("\t\tBloom filter space used: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterDiskSpaceUsed"), humanReadable))[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_96 $$ System.out.println("\t\tMemtable cell count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableColumnsCount"))[ FD ]
Line_7 $$ Map.Entry<String, ColumnFamilyStoreMBean> entry = tables.next()-->Line_10 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_66 $$ if (count > maxCount)-->Line_67 $$ System.out.print("/" + maxCount)[ CD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_109 $$ System.out.println("\t\tPending flushes: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes"))[ FD ]
Line_33 $$ if (readCount > 0) -->Line_34 $$ keyspaceReadCount += readCount[ CD ]
Line_61 $$ int count = leveledSStables[level]-->Line_66 $$ if (count > maxCount)[ FD ]
Line_9 $$ ColumnFamilyStoreMBean tableProxy = entry.getValue()-->Line_12 $$ columnFamilies.add(tableProxy)[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_106 $$ double localWriteLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "WriteLatency")).getMean() / 1000[ FD ]
Line_82 $$ indexSummaryOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "IndexSummaryOffHeapMemoryUsed")-->Line_116 $$ System.out.println("\t\tIndex summary off heap memory used: " + format(indexSummaryOffHeapSize, humanReadable))[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_120 $$ System.out.println("\t\tCompacted partition maximum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MaxPartitionSize"), humanReadable))[ FD ]
Line_122 $$ CassandraMetricsRegistry.JmxHistogramMBean histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveScannedHistogram")-->Line_127 $$ System.out.println("\t\tMaximum tombstones per slice (last five minutes): " + histogram.getMax())[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_90 $$ System.out.println("\t\tSpace used (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "TotalDiskSpaceUsed"), humanReadable))[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_96 $$ System.out.println("\t\tMemtable cell count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableColumnsCount"))[ FD ]
Line_4 $$ Map<String, List<ColumnFamilyStoreMBean>> tableStoreMap = new HashMap()-->Line_10 $$ if (!tableStoreMap.containsKey(keyspaceName) && filter.isColumnFamilyIncluded(entry.getKey(), tableProxy.getColumnFamilyName())) [ FD ]
Line_74 $$ Long memtableOffHeapSize = null-->Line_80 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_83 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_91 $$ System.out.println("\t\tSpace used by snapshots (total): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "SnapshotsSize"), humanReadable))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_89 $$ System.out.println("\t\tSpace used (live): " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveDiskSpaceUsed"), humanReadable))[ FD ]
Line_6 $$ while (tables.hasNext()) -->Line_9 $$ ColumnFamilyStoreMBean tableProxy = entry.getValue()[ CD ]
Line_68 $$ if (level < leveledSStables.length - 1)-->Line_69 $$ System.out.print(", ")[ CD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_35 $$ keyspaceTotalReadTime += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadTotalLatency")[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_80 $$ memtableOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableOffHeapSize")[ FD ]
Line_103 $$ double localRLatency = localReadLatency > 0 ? localReadLatency : Double.NaN-->Line_104 $$ System.out.printf("\t\tLocal read latency: %01.3f ms%n", localRLatency)[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_32 $$ long readCount = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getCount()[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_83 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_112 $$ System.out.println("\t\tBloom filter space used: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterDiskSpaceUsed"), humanReadable))[ FD ]
Line_76 $$ Long indexSummaryOffHeapSize = null-->Line_116 $$ System.out.println("\t\tIndex summary off heap memory used: " + format(indexSummaryOffHeapSize, humanReadable))[ FD ]
Line_65 $$ maxCount = (long) Math.pow(10, level)-->Line_66 $$ if (count > maxCount)[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_83 $$ compressionMetadataOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "CompressionMetadataOffHeapMemoryUsed")[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_102 $$ double localReadLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getMean() / 1000[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_110 $$ System.out.println("\t\tBloom filter false positives: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterFalsePositives"))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_120 $$ System.out.println("\t\tCompacted partition maximum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MaxPartitionSize"), humanReadable))[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_56 $$ System.out.println("\t\tSSTable count: " + probe.getColumnFamilyMetric(keyspaceName, tableName, "LiveSSTableCount"))[ FD ]
Line_77 $$ Long compressionMetadataOffHeapSize = null-->Line_84 $$ offHeapSize = memtableOffHeapSize + bloomFilterOffHeapSize + indexSummaryOffHeapSize + compressionMetadataOffHeapSize[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_95 $$ System.out.println("\t\tNumber of keys (estimate): " + probe.getColumnFamilyMetric(keyspaceName, tableName, "EstimatedPartitionCount"))[ FD ]
Line_81 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")-->Line_113 $$ if (bloomFilterOffHeapSize != null)[ FD ]
Line_75 $$ Long bloomFilterOffHeapSize = null-->Line_81 $$ bloomFilterOffHeapSize = (Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "BloomFilterOffHeapMemoryUsed")[ FD ]
Line_8 $$ String keyspaceName = entry.getKey()-->Line_15 $$ tableStoreMap.get(keyspaceName).add(tableProxy)[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_119 $$ System.out.println("\t\tCompacted partition minimum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MinPartitionSize"), humanReadable))[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_120 $$ System.out.println("\t\tCompacted partition maximum bytes: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MaxPartitionSize"), humanReadable))[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_102 $$ double localReadLatency = ((CassandraMetricsRegistry.JmxTimerMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "ReadLatency")).getMean() / 1000[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_41 $$ keyspacePendingFlushes += (long) probe.getColumnFamilyMetric(keyspaceName, tableName, "PendingFlushes")[ FD ]
Line_44 $$ double keyspaceWriteLatency = keyspaceWriteCount > 0 ? keyspaceTotalWriteTime / keyspaceWriteCount / 1000 : Double.NaN-->Line_48 $$ System.out.println("\tWrite Latency: " + String.format("%s", keyspaceWriteLatency) + " ms.")[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_125 $$ histogram = (CassandraMetricsRegistry.JmxHistogramMBean) probe.getColumnFamilyMetric(keyspaceName, tableName, "TombstoneScannedHistogram")[ FD ]
Line_21 $$ String keyspaceName = entry.getKey()-->Line_97 $$ System.out.println("\t\tMemtable data size: " + format((Long) probe.getColumnFamilyMetric(keyspaceName, tableName, "MemtableLiveDataSize"), humanReadable))[ FD ]
Line_30 $$ String tableName = table.getColumnFamilyName()-->Line_111 $$ System.out.printf("\t\tBloom filter false ratio: %s%n", String.format("%01.5f", probe.getColumnFamilyMetric(keyspaceName, tableName, "RecentBloomFilterFalseRatio")))[ FD ]
