Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_6 $$ log("Performing %d tests of %d operations, with %.2f max size/key-range ratio in batches of ~%d ops", tests, perTestCount, 1 / testKeyRatio, modificationBatchSize)[ FD ]
Line_5 $$ long totalCount = (long) perTestCount * tests-->Line_25 $$ log("Completed %.1f%% (%d of %d operations)", ratio * 100, done, totalCount)[ FD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_33 $$ snap = TREE_TIMER.getSnapshot()[ CD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_35 $$ log("Done")[ CD ]
Line_31 $$ Snapshot snap = BTREE_TIMER.getSnapshot()-->Line_34 $$ log("java: %.2fns, %.2fns, %.2fns", snap.getMedian(), snap.get95thPercentile(), snap.get999thPercentile())[ FD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_4 $$ int testKeyRange = (int) (perTestCount * testKeyRatio)[ CD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_12 $$ int maxRunLength = modificationBatchSize == 1 ? 1 : ThreadLocalRandom.current().nextInt(1, modificationBatchSize)[ FD ]
Line_10 $$ final List<ListenableFutureTask<List<ListenableFuture<?>>>> outer = new ArrayList()-->Line_13 $$ outer.add(doOneTestInsertions(testKeyRange, maxRunLength, modificationBatchSize, batchesPerTest, quickEquality))[ FD ]
Line_31 $$ Snapshot snap = BTREE_TIMER.getSnapshot()-->Line_32 $$ log("btree: %.2fns, %.2fns, %.2fns", snap.getMedian(), snap.get95thPercentile(), snap.get999thPercentile())[ FD ]
Line_4 $$ int testKeyRange = (int) (perTestCount * testKeyRatio)-->Line_13 $$ outer.add(doOneTestInsertions(testKeyRange, maxRunLength, modificationBatchSize, batchesPerTest, quickEquality))[ FD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_31 $$ Snapshot snap = BTREE_TIMER.getSnapshot()[ CD ]
Line_9 $$ for (int chunk = 0; chunk < tests; chunk += chunkSize) -->Line_11 $$ for (int i = 0; i < chunkSize; i++) [ CD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_13 $$ outer.add(doOneTestInsertions(testKeyRange, maxRunLength, modificationBatchSize, batchesPerTest, quickEquality))[ FD ]
Line_9 $$ for (int chunk = 0; chunk < tests; chunk += chunkSize) -->Line_29 $$ Futures.allAsList(inner).get()[ CD ]
Line_12 $$ int maxRunLength = modificationBatchSize == 1 ? 1 : ThreadLocalRandom.current().nextInt(1, modificationBatchSize)-->Line_13 $$ outer.add(doOneTestInsertions(testKeyRange, maxRunLength, modificationBatchSize, batchesPerTest, quickEquality))[ FD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_32 $$ log("btree: %.2fns, %.2fns, %.2fns", snap.getMedian(), snap.get95thPercentile(), snap.get999thPercentile())[ CD ]
Line_11 $$ for (int i = 0; i < chunkSize; i++) -->Line_13 $$ outer.add(doOneTestInsertions(testKeyRange, maxRunLength, modificationBatchSize, batchesPerTest, quickEquality))[ CD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_6 $$ log("Performing %d tests of %d operations, with %.2f max size/key-range ratio in batches of ~%d ops", tests, perTestCount, 1 / testKeyRatio, modificationBatchSize)[ CD ]
Line_22 $$ if (complete - lastReportAt >= reportInterval) -->Line_25 $$ log("Completed %.1f%% (%d of %d operations)", ratio * 100, done, totalCount)[ CD ]
Line_31 $$ Snapshot snap = BTREE_TIMER.getSnapshot()-->Line_33 $$ snap = TREE_TIMER.getSnapshot()[ FD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_3 $$ int batchesPerTest = perTestCount / modificationBatchSize[ CD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_34 $$ log("java: %.2fns, %.2fns, %.2fns", snap.getMedian(), snap.get95thPercentile(), snap.get999thPercentile())[ CD ]
Line_3 $$ int batchesPerTest = perTestCount / modificationBatchSize-->Line_13 $$ outer.add(doOneTestInsertions(testKeyRange, maxRunLength, modificationBatchSize, batchesPerTest, quickEquality))[ FD ]
Line_9 $$ for (int chunk = 0; chunk < tests; chunk += chunkSize) -->Line_17 $$ int reportInterval = Math.max(1000, (int) (totalCount / 10000))[ CD ]
Line_11 $$ for (int i = 0; i < chunkSize; i++) -->Line_12 $$ int maxRunLength = modificationBatchSize == 1 ? 1 : ThreadLocalRandom.current().nextInt(1, modificationBatchSize)[ CD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_9 $$ for (int chunk = 0; chunk < tests; chunk += chunkSize) [ FD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_9 $$ for (int chunk = 0; chunk < tests; chunk += chunkSize) [ CD ]
Line_33 $$ snap = TREE_TIMER.getSnapshot()-->Line_34 $$ log("java: %.2fns, %.2fns, %.2fns", snap.getMedian(), snap.get95thPercentile(), snap.get999thPercentile())[ FD ]
Line_9 $$ for (int chunk = 0; chunk < tests; chunk += chunkSize) -->Line_10 $$ final List<ListenableFutureTask<List<ListenableFuture<?>>>> outer = new ArrayList()[ CD ]
Line_2 $$ private static void testInsertions(int tests, int perTestCount, float testKeyRatio, int modificationBatchSize, boolean quickEquality) throws ExecutionException, InterruptedException -->Line_5 $$ long totalCount = (long) perTestCount * tests[ CD ]
