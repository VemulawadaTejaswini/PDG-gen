Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_5 $$ double powB = Math.pow(srcB, 2.2)[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_13 $$ double deviate_x = (myConfuseYint - yint) / (m - myConfuseM)[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_30 $$ double adjust = Math.max(Math.max((fitR < 0 || 1 < fitR) ? 0 : fitR, (fitG < 0 || 1 < fitG) ? 0 : fitG), (fitB < 0 || 1 < fitB) ? 0 : fitB)[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_35 $$ dstB += adjust * diffB[ CD ]
Line_23 $$ double diffB = +0.0556352 * diffX + 1.0570700 * diffZ-->Line_35 $$ dstB += adjust * diffB[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_5 $$ double powB = Math.pow(srcB, 2.2)[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_34 $$ dstG += adjust * diffG[ CD ]
Line_35 $$ dstB += adjust * diffB-->Line_38 $$ dstB = Math.pow(dstB, 1 / 2.2)[ FD ]
Line_24 $$ double dstR = +3.2407100 * X - 1.537260 * Y - 0.4985710 * Z-->Line_33 $$ dstR += adjust * diffR[ FD ]
Line_24 $$ double dstR = +3.2407100 * X - 1.537260 * Y - 0.4985710 * Z-->Line_39 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_18 $$ double neutral_Z = Y * 0.358271 / 0.329016[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_27 $$ double fitR = ((dstR < 0 ? 0 : 1) - dstR) / diffR[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_6 $$ double X = 0.4124240 * powR + 0.357579 * powG + 0.1804640 * powB[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_19 $$ double diffX = neutral_X - X[ CD ]
Line_22 $$ double diffG = -0.9692580 * diffX + 0.0415557 * diffZ-->Line_34 $$ dstG += adjust * diffG[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_3 $$ double powR = Math.pow(srcR, 2.2)[ FD ]
Line_25 $$ double dstG = -0.9692580 * X + 1.875990 * Y + 0.0415557 * Z-->Line_39 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_16 $$ Z = (1.0 - (deviate_x + deviate_y)) * Y / deviate_y[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_14 $$ double deviate_y = (m * deviate_x) + yint[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_22 $$ double diffG = -0.9692580 * diffX + 0.0415557 * diffZ[ CD ]
Line_36 $$ dstR = Math.pow(dstR, 1 / 2.2)-->Line_39 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_8 $$ double Z = 0.0193324 * powR + 0.119193 * powG + 0.9504440 * powB-->Line_16 $$ Z = (1.0 - (deviate_x + deviate_y)) * Y / deviate_y[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_25 $$ double dstG = -0.9692580 * X + 1.875990 * Y + 0.0415557 * Z[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_38 $$ dstB = Math.pow(dstB, 1 / 2.2)[ CD ]
Line_34 $$ dstG += adjust * diffG-->Line_37 $$ dstG = Math.pow(dstG, 1 / 2.2)[ FD ]
Line_24 $$ double dstR = +3.2407100 * X - 1.537260 * Y - 0.4985710 * Z-->Line_36 $$ dstR = Math.pow(dstR, 1 / 2.2)[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_9 $$ double chroma_x = X / (X + Y + Z)[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_39 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_11 $$ double m = (chroma_y - myConfuseY) / (chroma_x - myConfuseX)[ CD ]
Line_30 $$ double adjust = Math.max(Math.max((fitR < 0 || 1 < fitR) ? 0 : fitR, (fitG < 0 || 1 < fitG) ? 0 : fitG), (fitB < 0 || 1 < fitB) ? 0 : fitB)-->Line_35 $$ dstB += adjust * diffB[ FD ]
Line_30 $$ double adjust = Math.max(Math.max((fitR < 0 || 1 < fitR) ? 0 : fitR, (fitG < 0 || 1 < fitG) ? 0 : fitG), (fitB < 0 || 1 < fitB) ? 0 : fitB)-->Line_33 $$ dstR += adjust * diffR[ FD ]
Line_34 $$ dstG += adjust * diffG-->Line_39 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_30 $$ double adjust = Math.max(Math.max((fitR < 0 || 1 < fitR) ? 0 : fitR, (fitG < 0 || 1 < fitG) ? 0 : fitG), (fitB < 0 || 1 < fitB) ? 0 : fitB)-->Line_34 $$ dstG += adjust * diffG[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_17 $$ double neutral_X = Y * 0.312713 / 0.329016[ CD ]
Line_26 $$ double dstB = +0.0556352 * X - 0.203996 * Y + 1.0570700 * Z-->Line_39 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_26 $$ double dstB = +0.0556352 * X - 0.203996 * Y + 1.0570700 * Z-->Line_38 $$ dstB = Math.pow(dstB, 1 / 2.2)[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_36 $$ dstR = Math.pow(dstR, 1 / 2.2)[ CD ]
Line_33 $$ dstR += adjust * diffR-->Line_36 $$ dstR = Math.pow(dstR, 1 / 2.2)[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_39 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_3 $$ double powR = Math.pow(srcR, 2.2)[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_29 $$ double fitB = ((dstB < 0 ? 0 : 1) - dstB) / diffB[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_4 $$ double powG = Math.pow(srcG, 2.2)[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_15 $$ X = deviate_x * Y / deviate_y[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_20 $$ double diffZ = neutral_Z - Z[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_10 $$ double chroma_y = Y / (X + Y + Z)[ CD ]
Line_25 $$ double dstG = -0.9692580 * X + 1.875990 * Y + 0.0415557 * Z-->Line_34 $$ dstG += adjust * diffG[ FD ]
Line_6 $$ double X = 0.4124240 * powR + 0.357579 * powG + 0.1804640 * powB-->Line_15 $$ X = deviate_x * Y / deviate_y[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_7 $$ double Y = 0.2126560 * powR + 0.715158 * powG + 0.0721856 * powB[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_21 $$ double diffR = +3.2407100 * diffX - 0.4985710 * diffZ[ CD ]
Line_14 $$ double deviate_y = (m * deviate_x) + yint-->Line_15 $$ X = deviate_x * Y / deviate_y[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_37 $$ dstG = Math.pow(dstG, 1 / 2.2)[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_8 $$ double Z = 0.0193324 * powR + 0.119193 * powG + 0.9504440 * powB[ CD ]
Line_25 $$ double dstG = -0.9692580 * X + 1.875990 * Y + 0.0415557 * Z-->Line_37 $$ dstG = Math.pow(dstG, 1 / 2.2)[ FD ]
Line_21 $$ double diffR = +3.2407100 * diffX - 0.4985710 * diffZ-->Line_33 $$ dstR += adjust * diffR[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_33 $$ dstR += adjust * diffR[ CD ]
Line_33 $$ dstR += adjust * diffR-->Line_39 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_4 $$ double powG = Math.pow(srcG, 2.2)[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_26 $$ double dstB = +0.0556352 * X - 0.203996 * Y + 1.0570700 * Z[ CD ]
Line_14 $$ double deviate_y = (m * deviate_x) + yint-->Line_16 $$ Z = (1.0 - (deviate_x + deviate_y)) * Y / deviate_y[ FD ]
Line_26 $$ double dstB = +0.0556352 * X - 0.203996 * Y + 1.0570700 * Z-->Line_35 $$ dstB += adjust * diffB[ FD ]
Line_35 $$ dstB += adjust * diffB-->Line_39 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_12 $$ double yint = chroma_y - chroma_x * m[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_23 $$ double diffB = +0.0556352 * diffX + 1.0570700 * diffZ[ CD ]
Line_38 $$ dstB = Math.pow(dstB, 1 / 2.2)-->Line_39 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_37 $$ dstG = Math.pow(dstG, 1 / 2.2)-->Line_39 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_28 $$ double fitG = ((dstG < 0 ? 0 : 1) - dstG) / diffG[ CD ]
Line_2 $$ int toRGB(int srcR, int srcG, int srcB) -->Line_24 $$ double dstR = +3.2407100 * X - 1.537260 * Y - 0.4985710 * Z[ CD ]
