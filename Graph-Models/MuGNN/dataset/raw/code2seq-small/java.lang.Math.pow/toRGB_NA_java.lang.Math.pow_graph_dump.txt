Line_22 $$ double deviate_y = (m * deviate_x) + yint-->Line_25 $$ Z = (1.0 - (deviate_x + deviate_y)) * Y / deviate_y[ FD ]
Line_39 $$ double dstG = -0.9692580 * X + 1.875990 * Y + 0.0415557 * Z-->Line_50 $$ dstG += adjust * diffG[ FD ]
Line_39 $$ double dstG = -0.9692580 * X + 1.875990 * Y + 0.0415557 * Z-->Line_56 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_51 $$ dstB += adjust * diffB-->Line_56 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_55 $$ dstB = Math.pow(dstB, 1 / 2.2)-->Line_56 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_35 $$ double diffB = +0.0556352 * diffX + 1.0570700 * diffZ-->Line_51 $$ dstB += adjust * diffB[ FD ]
Line_40 $$ double dstB = +0.0556352 * X - 0.203996 * Y + 1.0570700 * Z-->Line_51 $$ dstB += adjust * diffB[ FD ]
Line_50 $$ dstG += adjust * diffG-->Line_54 $$ dstG = Math.pow(dstG, 1 / 2.2)[ FD ]
Line_40 $$ double dstB = +0.0556352 * X - 0.203996 * Y + 1.0570700 * Z-->Line_55 $$ dstB = Math.pow(dstB, 1 / 2.2)[ FD ]
Line_51 $$ dstB += adjust * diffB-->Line_55 $$ dstB = Math.pow(dstB, 1 / 2.2)[ FD ]
Line_50 $$ dstG += adjust * diffG-->Line_56 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_45 $$ double adjust = // highest value-->Line_50 $$ dstG += adjust * diffG[ FD ]
Line_34 $$ double diffG = -0.9692580 * diffX + 0.0415557 * diffZ-->Line_50 $$ dstG += adjust * diffG[ FD ]
Line_39 $$ double dstG = -0.9692580 * X + 1.875990 * Y + 0.0415557 * Z-->Line_54 $$ dstG = Math.pow(dstG, 1 / 2.2)[ FD ]
Line_54 $$ dstG = Math.pow(dstG, 1 / 2.2)-->Line_56 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_45 $$ double adjust = // highest value-->Line_51 $$ dstB += adjust * diffB[ FD ]
Line_40 $$ double dstB = +0.0556352 * X - 0.203996 * Y + 1.0570700 * Z-->Line_56 $$ return toRGB(srcR, srcG, srcB, dstR, dstG, dstB)[ FD ]
Line_11 $$ double Z = 0.0193324 * powR + 0.119193 * powG + 0.9504440 * powB-->Line_25 $$ Z = (1.0 - (deviate_x + deviate_y)) * Y / deviate_y[ FD ]
