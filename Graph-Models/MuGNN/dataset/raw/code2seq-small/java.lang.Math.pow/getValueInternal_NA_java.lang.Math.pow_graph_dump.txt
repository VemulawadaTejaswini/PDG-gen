Line_9 $$ Number leftNumber = (Number) leftOperand-->Line_11 $$ if (leftNumber instanceof BigDecimal) [ FD ]
Line_11 $$ if (leftNumber instanceof BigDecimal) -->Line_12 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)[ CD ]
Line_10 $$ Number rightNumber = (Number) rightOperand-->Line_16 $$ return new TypedValue(leftBigInteger.pow(rightNumber.intValue()))[ FD ]
Line_19 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_20 $$ return new TypedValue(Math.pow(leftNumber.floatValue(), rightNumber.floatValue()))[ CD ]
Line_8 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) -->Line_22 $$ double d = Math.pow(leftNumber.doubleValue(), rightNumber.doubleValue())[ CD ]
Line_10 $$ Number rightNumber = (Number) rightOperand-->Line_22 $$ double d = Math.pow(leftNumber.doubleValue(), rightNumber.doubleValue())[ FD ]
Line_9 $$ Number leftNumber = (Number) leftOperand-->Line_15 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)[ FD ]
Line_8 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) -->Line_10 $$ Number rightNumber = (Number) rightOperand[ CD ]
Line_15 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)-->Line_16 $$ return new TypedValue(leftBigInteger.pow(rightNumber.intValue()))[ FD ]
Line_9 $$ Number leftNumber = (Number) leftOperand-->Line_18 $$ return new TypedValue(Math.pow(leftNumber.doubleValue(), rightNumber.doubleValue()))[ FD ]
Line_6 $$ Object leftOperand = leftOp.getValueInternal(state).getValue()-->Line_29 $$ return state.operate(Operation.POWER, leftOperand, rightOperand)[ FD ]
Line_9 $$ Number leftNumber = (Number) leftOperand-->Line_14 $$ if (leftNumber instanceof BigInteger) [ FD ]
Line_17 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_19 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) [ CD ]
Line_11 $$ if (leftNumber instanceof BigDecimal) -->Line_13 $$ return new TypedValue(leftBigDecimal.pow(rightNumber.intValue()))[ CD ]
Line_17 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_18 $$ return new TypedValue(Math.pow(leftNumber.doubleValue(), rightNumber.doubleValue()))[ CD ]
Line_7 $$ Object rightOperand = rightOp.getValueInternal(state).getValue()-->Line_29 $$ return state.operate(Operation.POWER, leftOperand, rightOperand)[ FD ]
Line_14 $$ if (leftNumber instanceof BigInteger) -->Line_17 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) [ CD ]
Line_14 $$ if (leftNumber instanceof BigInteger) -->Line_16 $$ return new TypedValue(leftBigInteger.pow(rightNumber.intValue()))[ CD ]
Line_4 $$ SpelNodeImpl leftOp = getLeftOperand()-->Line_6 $$ Object leftOperand = leftOp.getValueInternal(state).getValue()[ FD ]
Line_9 $$ Number leftNumber = (Number) leftOperand-->Line_20 $$ return new TypedValue(Math.pow(leftNumber.floatValue(), rightNumber.floatValue()))[ FD ]
Line_23 $$ if (d > Integer.MAX_VALUE || leftNumber instanceof Long || rightNumber instanceof Long) -->Line_24 $$ return new TypedValue((long) d)[ CD ]
Line_8 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) -->Line_9 $$ Number leftNumber = (Number) leftOperand[ CD ]
Line_10 $$ Number rightNumber = (Number) rightOperand-->Line_13 $$ return new TypedValue(leftBigDecimal.pow(rightNumber.intValue()))[ FD ]
Line_14 $$ if (leftNumber instanceof BigInteger) -->Line_15 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)[ CD ]
Line_10 $$ Number rightNumber = (Number) rightOperand-->Line_20 $$ return new TypedValue(Math.pow(leftNumber.floatValue(), rightNumber.floatValue()))[ FD ]
Line_10 $$ Number rightNumber = (Number) rightOperand-->Line_18 $$ return new TypedValue(Math.pow(leftNumber.doubleValue(), rightNumber.doubleValue()))[ FD ]
Line_23 $$ if (d > Integer.MAX_VALUE || leftNumber instanceof Long || rightNumber instanceof Long) -->Line_26 $$ return new TypedValue((int) d)[ CD ]
Line_9 $$ Number leftNumber = (Number) leftOperand-->Line_22 $$ double d = Math.pow(leftNumber.doubleValue(), rightNumber.doubleValue())[ FD ]
Line_11 $$ if (leftNumber instanceof BigDecimal) -->Line_14 $$ if (leftNumber instanceof BigInteger) [ CD ]
Line_8 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) -->Line_11 $$ if (leftNumber instanceof BigDecimal) [ CD ]
Line_5 $$ SpelNodeImpl rightOp = getRightOperand()-->Line_7 $$ Object rightOperand = rightOp.getValueInternal(state).getValue()[ FD ]
Line_9 $$ Number leftNumber = (Number) leftOperand-->Line_12 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)[ FD ]
Line_8 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) -->Line_23 $$ if (d > Integer.MAX_VALUE || leftNumber instanceof Long || rightNumber instanceof Long) [ CD ]
Line_12 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)-->Line_13 $$ return new TypedValue(leftBigDecimal.pow(rightNumber.intValue()))[ FD ]
