Line_3 $$ Range<Token> range = new Range(partitioner.getMinimumToken(), partitioner.getRandomToken())-->Line_4 $$ final RepairJobDesc desc = new RepairJobDesc(UUID.randomUUID(), UUID.randomUUID(), keyspace, columnFamily, Arrays.asList(range))[ FD ]
Line_5 $$ final SimpleCondition lock = new SimpleCondition()-->Line_37 $$ if (!lock.isSignaled())[ FD ]
Line_9 $$ if (message.verb == MessagingService.Verb.REPAIR_MESSAGE) -->Line_13 $$ assertTrue(((ValidationComplete) m).success())[ CD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_37 $$ if (!lock.isSignaled())[ CD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_33 $$ validator.add(EmptyIterators.unfilteredRow(cfs.metadata, new BufferDecoratedKey(mid, ByteBufferUtil.bytes("inconceivable!")), false))[ CD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_32 $$ Token mid = partitioner.midpoint(range.left, range.right)[ CD ]
Line_5 $$ final SimpleCondition lock = new SimpleCondition()-->Line_17 $$ lock.signalAll()[ FD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_29 $$ tree.addMerkleTrees((int) Math.pow(2, 15), validator.desc.ranges)[ CD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_31 $$ assertTrue(tree.size() > 1)[ CD ]
Line_4 $$ final RepairJobDesc desc = new RepairJobDesc(UUID.randomUUID(), UUID.randomUUID(), keyspace, columnFamily, Arrays.asList(range))-->Line_12 $$ assertEquals(desc, m.desc)[ FD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_36 $$ assertNotNull(tree.hash(new Range(min, min)))[ CD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_4 $$ final RepairJobDesc desc = new RepairJobDesc(UUID.randomUUID(), UUID.randomUUID(), keyspace, columnFamily, Arrays.asList(range))[ CD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_34 $$ validator.complete()[ CD ]
Line_9 $$ if (message.verb == MessagingService.Verb.REPAIR_MESSAGE) -->Line_10 $$ RepairMessage m = (RepairMessage) message.payload[ CD ]
Line_6 $$ MessagingService.instance().addMessageSink(new IMessageSink() -->Line_22 $$ return false[ CD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_35 $$ Token min = tree.partitioner().getMinimumToken()[ CD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_30 $$ validator.prepare(cfs, tree)[ CD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_3 $$ Range<Token> range = new Range(partitioner.getMinimumToken(), partitioner.getRandomToken())[ CD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_25 $$ InetAddress remote = InetAddress.getByName("127.0.0.2")[ CD ]
Line_6 $$ MessagingService.instance().addMessageSink(new IMessageSink() -->Line_19 $$ return false[ CD ]
Line_9 $$ if (message.verb == MessagingService.Verb.REPAIR_MESSAGE) -->Line_14 $$ assertNotNull(((ValidationComplete) m).trees)[ CD ]
Line_9 $$ if (message.verb == MessagingService.Verb.REPAIR_MESSAGE) -->Line_12 $$ assertEquals(desc, m.desc)[ CD ]
Line_9 $$ if (message.verb == MessagingService.Verb.REPAIR_MESSAGE) -->Line_11 $$ assertEquals(RepairMessage.Type.VALIDATION_COMPLETE, m.messageType)[ CD ]
Line_5 $$ final SimpleCondition lock = new SimpleCondition()-->Line_38 $$ lock.await()[ FD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_5 $$ final SimpleCondition lock = new SimpleCondition()[ CD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_6 $$ MessagingService.instance().addMessageSink(new IMessageSink() [ CD ]
Line_2 $$ public void testValidatorComplete() throws Throwable -->Line_26 $$ ColumnFamilyStore cfs = Keyspace.open(keyspace).getColumnFamilyStore(columnFamily)[ CD ]
Line_37 $$ if (!lock.isSignaled())-->Line_38 $$ lock.await()[ CD ]
