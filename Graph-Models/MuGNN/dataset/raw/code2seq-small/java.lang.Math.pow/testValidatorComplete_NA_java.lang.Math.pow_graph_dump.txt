Line_11 $$ if (message.verb == MessagingService.Verb.REPAIR_MESSAGE) -->Line_16 $$ assertNotNull(((ValidationComplete) m).trees)[ CD ]
Line_5 $$ final RepairJobDesc desc = new RepairJobDesc(UUID.randomUUID(), UUID.randomUUID(), keyspace, columnFamily, Arrays.asList(range))-->Line_14 $$ assertEquals(desc, m.desc)[ FD ]
Line_6 $$ final SimpleCondition lock = new SimpleCondition()-->Line_19 $$ lock.signalAll()[ FD ]
Line_11 $$ if (message.verb == MessagingService.Verb.REPAIR_MESSAGE) -->Line_14 $$ assertEquals(desc, m.desc)[ CD ]
Line_7 $$ MessagingService.instance().addMessageSink(new IMessageSink() -->Line_25 $$ return false[ CD ]
Line_11 $$ if (message.verb == MessagingService.Verb.REPAIR_MESSAGE) -->Line_13 $$ assertEquals(RepairMessage.Type.VALIDATION_COMPLETE, m.messageType)[ CD ]
Line_6 $$ final SimpleCondition lock = new SimpleCondition()-->Line_44 $$ lock.await()[ FD ]
Line_7 $$ MessagingService.instance().addMessageSink(new IMessageSink() -->Line_21 $$ return false[ CD ]
Line_11 $$ if (message.verb == MessagingService.Verb.REPAIR_MESSAGE) -->Line_15 $$ assertTrue(((ValidationComplete) m).success())[ CD ]
Line_4 $$ Range<Token> range = new Range(partitioner.getMinimumToken(), partitioner.getRandomToken())-->Line_5 $$ final RepairJobDesc desc = new RepairJobDesc(UUID.randomUUID(), UUID.randomUUID(), keyspace, columnFamily, Arrays.asList(range))[ FD ]
Line_11 $$ if (message.verb == MessagingService.Verb.REPAIR_MESSAGE) -->Line_12 $$ RepairMessage m = (RepairMessage) message.payload[ CD ]
Line_43 $$ if (!lock.isSignaled())-->Line_44 $$ lock.await()[ CD ]
Line_6 $$ final SimpleCondition lock = new SimpleCondition()-->Line_43 $$ if (!lock.isSignaled())[ FD ]
