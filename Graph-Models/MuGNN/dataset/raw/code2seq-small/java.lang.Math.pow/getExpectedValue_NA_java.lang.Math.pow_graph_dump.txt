Line_6 $$ double product = 1.0d-->Line_10 $$ return Math.pow(product, 1.0d / length)[ FD ]
Line_3 $$ if (length == 0) -->Line_4 $$ return null[ CD ]
Line_2 $$ public Number getExpectedValue(int start, int length) -->Line_3 $$ if (length == 0) [ FD ]
Line_2 $$ public Number getExpectedValue(int start, int length) -->Line_3 $$ if (length == 0) [ CD ]
Line_2 $$ public Number getExpectedValue(int start, int length) -->Line_7 $$ for (int i = start; i < start + length; i++) [ CD ]
Line_7 $$ for (int i = start; i < start + length; i++) -->Line_8 $$ product *= i[ FD ]
Line_2 $$ public Number getExpectedValue(int start, int length) -->Line_10 $$ return Math.pow(product, 1.0d / length)[ CD ]
Line_7 $$ for (int i = start; i < start + length; i++) -->Line_8 $$ product *= i[ CD ]
Line_8 $$ product *= i-->Line_10 $$ return Math.pow(product, 1.0d / length)[ FD ]
Line_6 $$ double product = 1.0d-->Line_8 $$ product *= i[ FD ]
Line_2 $$ public Number getExpectedValue(int start, int length) -->Line_6 $$ double product = 1.0d[ CD ]
