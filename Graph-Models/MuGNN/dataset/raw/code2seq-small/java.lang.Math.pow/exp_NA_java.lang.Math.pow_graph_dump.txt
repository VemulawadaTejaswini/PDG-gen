Line_2 $$ public Quaternion exp(float alpha) -->Line_5 $$ float theta = (float) Math.acos(w / norm)[ CD ]
Line_2 $$ public Quaternion exp(float alpha) -->Line_4 $$ float normExp = (float) Math.pow(norm, alpha)[ FD ]
Line_6 $$ float coeff = 0-->Line_9 $$ coeff = normExp * alpha / norm[ FD ]
Line_2 $$ public Quaternion exp(float alpha) -->Line_6 $$ float coeff = 0[ CD ]
Line_2 $$ public Quaternion exp(float alpha) -->Line_3 $$ float norm = len()[ CD ]
Line_3 $$ float norm = len()-->Line_4 $$ float normExp = (float) Math.pow(norm, alpha)[ FD ]
Line_6 $$ float coeff = 0-->Line_11 $$ coeff = (float) (normExp * Math.sin(alpha * theta) / (norm * Math.sin(theta)))[ FD ]
Line_5 $$ float theta = (float) Math.acos(w / norm)-->Line_11 $$ coeff = (float) (normExp * Math.sin(alpha * theta) / (norm * Math.sin(theta)))[ FD ]
Line_2 $$ public Quaternion exp(float alpha) -->Line_4 $$ float normExp = (float) Math.pow(norm, alpha)[ CD ]
Line_7 $$ if (Math.abs(theta) < 0.001)-->Line_9 $$ coeff = normExp * alpha / norm[ CD ]
Line_9 $$ coeff = normExp * alpha / norm-->Line_11 $$ coeff = (float) (normExp * Math.sin(alpha * theta) / (norm * Math.sin(theta)))[ FD ]
Line_3 $$ float norm = len()-->Line_9 $$ coeff = normExp * alpha / norm[ FD ]
Line_2 $$ public Quaternion exp(float alpha) -->Line_7 $$ if (Math.abs(theta) < 0.001)[ CD ]
Line_2 $$ public Quaternion exp(float alpha) -->Line_17 $$ return this[ CD ]
Line_5 $$ float theta = (float) Math.acos(w / norm)-->Line_7 $$ if (Math.abs(theta) < 0.001)[ FD ]
Line_7 $$ if (Math.abs(theta) < 0.001)-->Line_11 $$ coeff = (float) (normExp * Math.sin(alpha * theta) / (norm * Math.sin(theta)))[ CD ]
Line_2 $$ public Quaternion exp(float alpha) -->Line_16 $$ nor()[ CD ]
