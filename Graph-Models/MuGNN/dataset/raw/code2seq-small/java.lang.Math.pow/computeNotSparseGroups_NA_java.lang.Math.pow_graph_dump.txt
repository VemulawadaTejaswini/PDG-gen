Line_7 $$ for (; fromInclusive < toExclusive; fromInclusive += bucketSize) -->Line_8 $$ groupList.add(new LazyVariablesGroup(value, fromInclusive, fromInclusive + (Math.min(bucketSize, toExclusive - fromInclusive) - 1), context, ValueType.NUMBER, false))[ CD ]
Line_5 $$ int bucketSize = (int) Math.pow(bucketThreshold, Math.ceil(Math.log(size) / Math.log(bucketThreshold)) - 1)-->Line_7 $$ for (; fromInclusive < toExclusive; fromInclusive += bucketSize) [ FD ]
Line_5 $$ int bucketSize = (int) Math.pow(bucketThreshold, Math.ceil(Math.log(size) / Math.log(bucketThreshold)) - 1)-->Line_8 $$ groupList.add(new LazyVariablesGroup(value, fromInclusive, fromInclusive + (Math.min(bucketSize, toExclusive - fromInclusive) - 1), context, ValueType.NUMBER, false))[ FD ]
Line_6 $$ List<XValueGroup> groupList = new ArrayList<XValueGroup>((int) Math.ceil(size / bucketSize))-->Line_8 $$ groupList.add(new LazyVariablesGroup(value, fromInclusive, fromInclusive + (Math.min(bucketSize, toExclusive - fromInclusive) - 1), context, ValueType.NUMBER, false))[ FD ]
Line_4 $$ int size = toExclusive - fromInclusive-->Line_5 $$ int bucketSize = (int) Math.pow(bucketThreshold, Math.ceil(Math.log(size) / Math.log(bucketThreshold)) - 1)[ FD ]
