Line_4 $$ while (itr.hasMoreTokens()) -->Line_5 $$ String string = itr.nextToken()[ CD ]
Line_2 $$ public void map(Object key, Text value, Context context) throws IOException, InterruptedException -->Line_8 $$ context.write(LENGTH, this.wordLen)[ FD ]
Line_2 $$ public void map(Object key, Text value, Context context) throws IOException, InterruptedException -->Line_3 $$ StringTokenizer itr = new StringTokenizer(value.toString())[ CD ]
Line_2 $$ public void map(Object key, Text value, Context context) throws IOException, InterruptedException -->Line_9 $$ context.write(SQUARE, this.wordLenSq)[ FD ]
Line_4 $$ while (itr.hasMoreTokens()) -->Line_8 $$ context.write(LENGTH, this.wordLen)[ CD ]
Line_5 $$ String string = itr.nextToken()-->Line_7 $$ this.wordLenSq.set((long) Math.pow(string.length(), 2.0))[ FD ]
Line_2 $$ public void map(Object key, Text value, Context context) throws IOException, InterruptedException -->Line_4 $$ while (itr.hasMoreTokens()) [ CD ]
Line_4 $$ while (itr.hasMoreTokens()) -->Line_7 $$ this.wordLenSq.set((long) Math.pow(string.length(), 2.0))[ CD ]
Line_3 $$ StringTokenizer itr = new StringTokenizer(value.toString())-->Line_5 $$ String string = itr.nextToken()[ FD ]
Line_4 $$ while (itr.hasMoreTokens()) -->Line_9 $$ context.write(SQUARE, this.wordLenSq)[ CD ]
Line_2 $$ public void map(Object key, Text value, Context context) throws IOException, InterruptedException -->Line_10 $$ context.write(COUNT, ONE)[ FD ]
Line_2 $$ public void map(Object key, Text value, Context context) throws IOException, InterruptedException -->Line_3 $$ StringTokenizer itr = new StringTokenizer(value.toString())[ FD ]
Line_3 $$ StringTokenizer itr = new StringTokenizer(value.toString())-->Line_4 $$ while (itr.hasMoreTokens()) [ FD ]
Line_4 $$ while (itr.hasMoreTokens()) -->Line_10 $$ context.write(COUNT, ONE)[ CD ]
Line_4 $$ while (itr.hasMoreTokens()) -->Line_6 $$ this.wordLen.set(string.length())[ CD ]
Line_5 $$ String string = itr.nextToken()-->Line_6 $$ this.wordLen.set(string.length())[ FD ]
