Line_12 $$ if (percentile.getPercent() == 0) -->Line_13 $$ assertThat(value, closeTo(minValue, allowedError))[ CD ]
Line_5 $$ for (int i = 0; i < pcts.length; ++i) -->Line_10 $$ assertThat(value, greaterThanOrEqualTo(minValue - allowedError))[ CD ]
Line_2 $$ private void assertConsistent(double[] pcts, Percentiles percentiles, long minValue, long maxValue, int numberSigDigits) -->Line_16 $$ assertThat(value, closeTo(maxValue, allowedError))[ FD ]
Line_8 $$ double value = percentile.getValue()-->Line_10 $$ assertThat(value, greaterThanOrEqualTo(minValue - allowedError))[ FD ]
Line_6 $$ final Percentile percentile = percentileList.get(i)-->Line_12 $$ if (percentile.getPercent() == 0) [ FD ]
Line_3 $$ final List<Percentile> percentileList = CollectionUtils.iterableAsArrayList(percentiles)-->Line_20 $$ assertThat(percentileList.get(i).getValue(), greaterThanOrEqualTo(percentileList.get(i - 1).getValue()))[ FD ]
Line_2 $$ private void assertConsistent(double[] pcts, Percentiles percentiles, long minValue, long maxValue, int numberSigDigits) -->Line_3 $$ final List<Percentile> percentileList = CollectionUtils.iterableAsArrayList(percentiles)[ CD ]
Line_5 $$ for (int i = 0; i < pcts.length; ++i) -->Line_11 $$ assertThat(value, lessThanOrEqualTo(maxValue + allowedError))[ CD ]
Line_2 $$ private void assertConsistent(double[] pcts, Percentiles percentiles, long minValue, long maxValue, int numberSigDigits) -->Line_3 $$ final List<Percentile> percentileList = CollectionUtils.iterableAsArrayList(percentiles)[ FD ]
Line_6 $$ final Percentile percentile = percentileList.get(i)-->Line_15 $$ if (percentile.getPercent() == 100) [ FD ]
Line_19 $$ for (int i = 1; i < percentileList.size(); ++i) -->Line_20 $$ assertThat(percentileList.get(i).getValue(), greaterThanOrEqualTo(percentileList.get(i - 1).getValue()))[ CD ]
Line_2 $$ private void assertConsistent(double[] pcts, Percentiles percentiles, long minValue, long maxValue, int numberSigDigits) -->Line_9 $$ double allowedError = value / Math.pow(10, numberSigDigits)[ FD ]
Line_3 $$ final List<Percentile> percentileList = CollectionUtils.iterableAsArrayList(percentiles)-->Line_4 $$ assertEquals(pcts.length, percentileList.size())[ FD ]
Line_5 $$ for (int i = 0; i < pcts.length; ++i) -->Line_19 $$ for (int i = 1; i < percentileList.size(); ++i) [ FD ]
Line_2 $$ private void assertConsistent(double[] pcts, Percentiles percentiles, long minValue, long maxValue, int numberSigDigits) -->Line_4 $$ assertEquals(pcts.length, percentileList.size())[ CD ]
Line_2 $$ private void assertConsistent(double[] pcts, Percentiles percentiles, long minValue, long maxValue, int numberSigDigits) -->Line_19 $$ for (int i = 1; i < percentileList.size(); ++i) [ CD ]
Line_5 $$ for (int i = 0; i < pcts.length; ++i) -->Line_20 $$ assertThat(percentileList.get(i).getValue(), greaterThanOrEqualTo(percentileList.get(i - 1).getValue()))[ FD ]
Line_5 $$ for (int i = 0; i < pcts.length; ++i) -->Line_12 $$ if (percentile.getPercent() == 0) [ CD ]
Line_8 $$ double value = percentile.getValue()-->Line_16 $$ assertThat(value, closeTo(maxValue, allowedError))[ FD ]
Line_5 $$ for (int i = 0; i < pcts.length; ++i) -->Line_7 $$ assertThat(percentile.getPercent(), equalTo(pcts[i]))[ CD ]
Line_8 $$ double value = percentile.getValue()-->Line_13 $$ assertThat(value, closeTo(minValue, allowedError))[ FD ]
Line_3 $$ final List<Percentile> percentileList = CollectionUtils.iterableAsArrayList(percentiles)-->Line_6 $$ final Percentile percentile = percentileList.get(i)[ FD ]
Line_8 $$ double value = percentile.getValue()-->Line_11 $$ assertThat(value, lessThanOrEqualTo(maxValue + allowedError))[ FD ]
Line_3 $$ final List<Percentile> percentileList = CollectionUtils.iterableAsArrayList(percentiles)-->Line_19 $$ for (int i = 1; i < percentileList.size(); ++i) [ FD ]
Line_5 $$ for (int i = 0; i < pcts.length; ++i) -->Line_6 $$ final Percentile percentile = percentileList.get(i)[ CD ]
Line_5 $$ for (int i = 0; i < pcts.length; ++i) -->Line_9 $$ double allowedError = value / Math.pow(10, numberSigDigits)[ CD ]
Line_6 $$ final Percentile percentile = percentileList.get(i)-->Line_7 $$ assertThat(percentile.getPercent(), equalTo(pcts[i]))[ FD ]
Line_2 $$ private void assertConsistent(double[] pcts, Percentiles percentiles, long minValue, long maxValue, int numberSigDigits) -->Line_13 $$ assertThat(value, closeTo(minValue, allowedError))[ FD ]
Line_5 $$ for (int i = 0; i < pcts.length; ++i) -->Line_6 $$ final Percentile percentile = percentileList.get(i)[ FD ]
Line_9 $$ double allowedError = value / Math.pow(10, numberSigDigits)-->Line_16 $$ assertThat(value, closeTo(maxValue, allowedError))[ FD ]
Line_9 $$ double allowedError = value / Math.pow(10, numberSigDigits)-->Line_13 $$ assertThat(value, closeTo(minValue, allowedError))[ FD ]
Line_2 $$ private void assertConsistent(double[] pcts, Percentiles percentiles, long minValue, long maxValue, int numberSigDigits) -->Line_5 $$ for (int i = 0; i < pcts.length; ++i) [ CD ]
Line_15 $$ if (percentile.getPercent() == 100) -->Line_16 $$ assertThat(value, closeTo(maxValue, allowedError))[ CD ]
Line_5 $$ for (int i = 0; i < pcts.length; ++i) -->Line_15 $$ if (percentile.getPercent() == 100) [ CD ]
Line_19 $$ for (int i = 1; i < percentileList.size(); ++i) -->Line_20 $$ assertThat(percentileList.get(i).getValue(), greaterThanOrEqualTo(percentileList.get(i - 1).getValue()))[ FD ]
Line_6 $$ final Percentile percentile = percentileList.get(i)-->Line_8 $$ double value = percentile.getValue()[ FD ]
Line_5 $$ for (int i = 0; i < pcts.length; ++i) -->Line_8 $$ double value = percentile.getValue()[ CD ]
