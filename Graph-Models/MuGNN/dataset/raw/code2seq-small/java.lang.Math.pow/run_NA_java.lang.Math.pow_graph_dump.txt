Line_16 $$ for (Class<? extends Exception> clazz : exceptionWhiteList) -->Line_17 $$ if (clazz.isInstance(e)) [ FD ]
Line_2 $$ public <V> V run(String callableName, Callable<V> callable) throws Exception -->Line_5 $$ long startTime = System.nanoTime()[ CD ]
Line_6 $$ int attempt = 0-->Line_9 $$ if (attempt > 1) [ FD ]
Line_2 $$ public <V> V run(String callableName, Callable<V> callable) throws Exception -->Line_4 $$ requireNonNull(callable, "callable is null")[ CD ]
Line_2 $$ public <V> V run(String callableName, Callable<V> callable) throws Exception -->Line_7 $$ while (true) [ CD ]
Line_6 $$ int attempt = 0-->Line_24 $$ log.debug("Failed on executing %s with attempt %d, will retry. Exception: %s", callableName, attempt, e.getMessage())[ FD ]
Line_5 $$ long startTime = System.nanoTime()-->Line_21 $$ if (attempt >= maxAttempts || Duration.nanosSince(startTime).compareTo(maxRetryTime) >= 0) [ FD ]
Line_9 $$ if (attempt > 1) -->Line_10 $$ retryRunnable.ifPresent(Runnable::<>run)[ CD ]
Line_7 $$ while (true) -->Line_8 $$ attempt++[ CD ]
Line_2 $$ public <V> V run(String callableName, Callable<V> callable) throws Exception -->Line_3 $$ requireNonNull(callableName, "callableName is null")[ CD ]
Line_2 $$ public <V> V run(String callableName, Callable<V> callable) throws Exception -->Line_13 $$ return callable.call()[ FD ]
Line_6 $$ int attempt = 0-->Line_8 $$ attempt++[ FD ]
Line_2 $$ public <V> V run(String callableName, Callable<V> callable) throws Exception -->Line_3 $$ requireNonNull(callableName, "callableName is null")[ FD ]
Line_7 $$ while (true) -->Line_9 $$ if (attempt > 1) [ CD ]
Line_2 $$ public <V> V run(String callableName, Callable<V> callable) throws Exception -->Line_24 $$ log.debug("Failed on executing %s with attempt %d, will retry. Exception: %s", callableName, attempt, e.getMessage())[ FD ]
Line_2 $$ public <V> V run(String callableName, Callable<V> callable) throws Exception -->Line_6 $$ int attempt = 0[ CD ]
Line_2 $$ public <V> V run(String callableName, Callable<V> callable) throws Exception -->Line_4 $$ requireNonNull(callable, "callable is null")[ FD ]
Line_25 $$ int delayInMs = (int) Math.min(minSleepTime.toMillis() * Math.pow(scaleFactor, attempt - 1), maxSleepTime.toMillis())-->Line_26 $$ TimeUnit.MILLISECONDS.sleep(delayInMs)[ FD ]
