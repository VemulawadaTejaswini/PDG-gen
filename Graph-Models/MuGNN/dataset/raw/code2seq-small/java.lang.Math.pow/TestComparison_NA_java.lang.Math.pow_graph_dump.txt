Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_10 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison of %s and %s, expected <", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_22 $$ Long overLimit = (long) (Integer.MAX_VALUE)-->Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_25 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_32 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")[ FD ]
Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_23 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_21 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ FD ]
Line_49 $$ for (int i = 0; i < 32; ++i) -->Line_50 $$ int offset = (int) Math.pow(2, i)[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_21 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_10 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison of %s and %s, expected <", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_17 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_32 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_21 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_27 $$ Long i2 = (long) Math.pow(2, 32) - 1-->Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_23 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_31 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_6 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : "Failed == comparison"[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_32 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_21 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_17 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ FD ]
Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_31 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_26 $$ Long i1 = 0L-->Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_25 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_15 $$ d1 = SimpleDateType.instance.fromString("1")[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_25 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_23 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_14 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed comparison of %s and %s, expected > 0", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_14 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed comparison of %s and %s, expected > 0", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_25 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_55 $$ for (int i = 0; i < 32; ++i) -->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ CD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_17 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_7 $$ String.format("Failed == comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_25 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_32 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_25 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_56 $$ int offset = (int) Math.pow(2, i)-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_55 $$ for (int i = 0; i < 32; ++i) -->Line_56 $$ int offset = (int) Math.pow(2, i)[ CD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_25 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_17 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_32 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_17 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_10 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison of %s and %s, expected <", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_14 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed comparison of %s and %s, expected > 0", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_55 $$ for (int i = 0; i < 32; ++i) -->Line_56 $$ int offset = (int) Math.pow(2, i)[ FD ]
Line_50 $$ int offset = (int) Math.pow(2, i)-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_31 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_21 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_14 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed comparison of %s and %s, expected > 0", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_31 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_25 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_49 $$ for (int i = 0; i < 32; ++i) -->Line_55 $$ for (int i = 0; i < 32; ++i) [ FD ]
Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_17 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_31 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_7 $$ String.format("Failed == comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_14 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed comparison of %s and %s, expected > 0", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_25 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_23 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_21 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_50 $$ int offset = (int) Math.pow(2, i)-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_19 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_10 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison of %s and %s, expected <", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_25 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_49 $$ for (int i = 0; i < 32; ++i) -->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ CD ]
Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_47 $$ d2 = SimpleDateType.instance.fromString("1970-1-2")[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_15 $$ d1 = SimpleDateType.instance.fromString("1")[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_19 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_21 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_49 $$ for (int i = 0; i < 32; ++i) -->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ CD ]
Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_18 $$ Integer intLimit = Integer.MAX_VALUE-->Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_31 $$ d1 = SimpleDateType.instance.fromString("256")[ FD ]
Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")-->Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")[ FD ]
Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_21 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_32 $$ d2 = SimpleDateType.instance.fromString("512")-->Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_38 $$ d2 = SimpleDateType.instance.fromString("10000-10-10")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_33 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_41 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_52 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_49 $$ for (int i = 0; i < 32; ++i) -->Line_56 $$ int offset = (int) Math.pow(2, i)[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_36 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_25 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_21 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs at integer bounds %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_30 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed limits comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_6 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : "Failed == comparison"[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_45 $$ assert SimpleDateType.instance.compare(d1, d2) == 0 : String.format("Failed == date from string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")[ FD ]
Line_44 $$ d2 = SimpleDateType.instance.fromString("1970-1-1")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))[ FD ]
Line_8 $$ d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_19 $$ d1 = SimpleDateType.instance.fromString("0")[ FD ]
Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_39 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed neg/pos string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_43 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())[ FD ]
Line_40 $$ d1 = SimpleDateType.instance.fromString("1969-12-31")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())-->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_42 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed pre/post epoch comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_19 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_46 $$ d1 = SimpleDateType.instance.fromString("1970-1-1")-->Line_59 $$ assert SimpleDateType.instance.compare(d1, d2) > 0 : String.format("Failed > comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_5 $$ ByteBuffer d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(4))-->Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_34 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0))-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_29 $$ d2 = SimpleDateType.instance.fromString(i2.toString())[ FD ]
Line_24 $$ d2 = SimpleDateType.instance.fromString(overLimit.toString())-->Line_32 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_9 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(10))-->Line_17 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison with string inputs %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_13 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(-10))-->Line_32 $$ d2 = SimpleDateType.instance.fromString("512")[ FD ]
Line_20 $$ d2 = SimpleDateType.instance.fromString(intLimit.toString())-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_16 $$ d2 = SimpleDateType.instance.fromString("1000")-->Line_48 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed post epoch string comparison with %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_35 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(Integer.MAX_VALUE))-->Line_53 $$ assert SimpleDateType.instance.compare(d1, d2) < 0 : String.format("Failed < comparison of %s and %s", SimpleDateSerializer.instance.deserialize(d1), SimpleDateSerializer.instance.deserialize(d2))[ FD ]
Line_4 $$ ByteBuffer d1 = SimpleDateType.instance.fromString("1970-01-05")-->Line_37 $$ d1 = SimpleDateType.instance.fromString("-10000-10-10")[ FD ]
Line_49 $$ for (int i = 0; i < 32; ++i) -->Line_50 $$ int offset = (int) Math.pow(2, i)[ CD ]
Line_31 $$ d1 = SimpleDateType.instance.fromString("256")-->Line_51 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ FD ]
Line_23 $$ d1 = SimpleDateType.instance.fromString("0")-->Line_28 $$ d1 = SimpleDateType.instance.fromString(i1.toString())[ FD ]
Line_15 $$ d1 = SimpleDateType.instance.fromString("1")-->Line_57 $$ d1 = SimpleDateSerializer.instance.serialize(makeUnsigned(offset))[ FD ]
Line_55 $$ for (int i = 0; i < 32; ++i) -->Line_58 $$ d2 = SimpleDateSerializer.instance.serialize(makeUnsigned(0 - offset))[ CD ]
