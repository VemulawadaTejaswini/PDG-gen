Line_32 $$ if (breakpoint != null) -->Line_33 $$ println("LineBreakpoint created at " + file.getVirtualFile().getName() + ":" + (commentLine + 2), ProcessOutputTypes.SYSTEM)[ CD ]
Line_7 $$ int offset = -1-->Line_12 $$ int commentLine = document.getLineNumber(offset)[ FD ]
Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))-->Line_63 $$ breakpoint.setClassFilters(lst.toArray(new ClassFilter[lst.size()]))[ FD ]
Line_15 $$ if (comment.indexOf("Method") != -1) -->Line_17 $$ if (breakpoint != null) [ CD ]
Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")-->Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)[ FD ]
Line_25 $$ if (comment.indexOf("Exception") != -1) -->Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")[ CD ]
Line_13 $$ String comment = document.getText().substring(document.getLineStartOffset(commentLine), document.getLineEndOffset(commentLine))-->Line_52 $$ String classFilters = readValue(comment, "Class filters")[ FD ]
Line_2 $$ public void createBreakpoints(final PsiFile file) -->Line_18 $$ println("MethodBreakpoint created at " + file.getVirtualFile().getName() + ":" + (commentLine + 2), ProcessOutputTypes.SYSTEM)[ FD ]
Line_14 $$ Breakpoint breakpoint-->Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))[ FD ]
Line_20 $$ if (comment.indexOf("Field") != -1) -->Line_22 $$ if (breakpoint != null) [ CD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_43 $$ breakpoint.setCondition(new TextWithImportsImpl(CodeFragmentKind.EXPRESSION, condition))[ FD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_27 $$ if (breakpoint != null) [ FD ]
Line_57 $$ while (tokenizer.hasMoreTokens()) -->Line_59 $$ filter.setEnabled(true)[ CD ]
Line_3 $$ Runnable runnable = new Runnable() -->Line_7 $$ int offset = -1[ CD ]
Line_56 $$ ArrayList<ClassFilter> lst = new ArrayList<ClassFilter>()-->Line_61 $$ lst.add(filter)[ FD ]
Line_13 $$ String comment = document.getText().substring(document.getLineStartOffset(commentLine), document.getLineEndOffset(commentLine))-->Line_25 $$ if (comment.indexOf("Exception") != -1) [ FD ]
Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)-->Line_27 $$ if (breakpoint != null) [ FD ]
Line_41 $$ String condition = readValue(comment, "Condition")-->Line_42 $$ if (condition != null) [ FD ]
Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)-->Line_54 $$ breakpoint.setClassFiltersEnabled(true)[ FD ]
Line_53 $$ if (classFilters != null) -->Line_56 $$ ArrayList<ClassFilter> lst = new ArrayList<ClassFilter>()[ CD ]
Line_14 $$ Breakpoint breakpoint-->Line_49 $$ breakpoint.setCountFilter(Integer.parseInt(passCount))[ FD ]
Line_7 $$ int offset = -1-->Line_10 $$ if (offset == -1)[ FD ]
Line_13 $$ String comment = document.getText().substring(document.getLineStartOffset(commentLine), document.getLineEndOffset(commentLine))-->Line_46 $$ String passCount = readValue(comment, "Pass count")[ FD ]
Line_3 $$ Runnable runnable = new Runnable() -->Line_72 $$ runnable.run()[ FD ]
Line_6 $$ Document document = PsiDocumentManager.getInstance(myProject).getDocument(file)-->Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)[ FD ]
Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)-->Line_38 $$ breakpoint.setSuspendPolicy(suspendPolicy)[ FD ]
Line_14 $$ Breakpoint breakpoint-->Line_43 $$ breakpoint.setCondition(new TextWithImportsImpl(CodeFragmentKind.EXPRESSION, condition))[ FD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_48 $$ breakpoint.setCountFilterEnabled(true)[ FD ]
Line_14 $$ Breakpoint breakpoint-->Line_17 $$ if (breakpoint != null) [ FD ]
Line_46 $$ String passCount = readValue(comment, "Pass count")-->Line_49 $$ breakpoint.setCountFilter(Integer.parseInt(passCount))[ FD ]
Line_3 $$ Runnable runnable = new Runnable() -->Line_8 $$ for (; ; ) [ CD ]
Line_2 $$ public void createBreakpoints(final PsiFile file) -->Line_28 $$ println("ExceptionBreakpoint created at " + file.getVirtualFile().getName() + ":" + (commentLine + 2), ProcessOutputTypes.SYSTEM)[ FD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_54 $$ breakpoint.setClassFiltersEnabled(true)[ FD ]
Line_13 $$ String comment = document.getText().substring(document.getLineStartOffset(commentLine), document.getLineEndOffset(commentLine))-->Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))[ FD ]
Line_69 $$ if (!SwingUtilities.isEventDispatchThread()) -->Line_70 $$ DebuggerInvocationUtil.invokeAndWait(myProject, runnable, ModalityState.defaultModalityState())[ CD ]
Line_42 $$ if (condition != null) -->Line_43 $$ breakpoint.setCondition(new TextWithImportsImpl(CodeFragmentKind.EXPRESSION, condition))[ CD ]
Line_53 $$ if (classFilters != null) -->Line_64 $$ println("Class filters = " + classFilters, ProcessOutputTypes.SYSTEM)[ CD ]
Line_2 $$ public void createBreakpoints(final PsiFile file) -->Line_23 $$ println("FieldBreakpoint created at " + file.getVirtualFile().getName() + ":" + (commentLine + 2), ProcessOutputTypes.SYSTEM)[ FD ]
Line_14 $$ Breakpoint breakpoint-->Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)[ FD ]
Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)-->Line_49 $$ breakpoint.setCountFilter(Integer.parseInt(passCount))[ FD ]
Line_14 $$ Breakpoint breakpoint-->Line_22 $$ if (breakpoint != null) [ FD ]
Line_53 $$ if (classFilters != null) -->Line_54 $$ breakpoint.setClassFiltersEnabled(true)[ CD ]
Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))-->Line_27 $$ if (breakpoint != null) [ FD ]
Line_53 $$ if (classFilters != null) -->Line_55 $$ StringTokenizer tokenizer = new StringTokenizer(classFilters, " ,")[ CD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))[ FD ]
Line_5 $$ BreakpointManager breakpointManager = DebuggerManagerImpl.getInstanceEx(myProject).getBreakpointManager()-->Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")[ FD ]
Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))-->Line_49 $$ breakpoint.setCountFilter(Integer.parseInt(passCount))[ FD ]
Line_57 $$ while (tokenizer.hasMoreTokens()) -->Line_58 $$ ClassFilter filter = new ClassFilter()[ CD ]
Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))-->Line_54 $$ breakpoint.setClassFiltersEnabled(true)[ FD ]
Line_13 $$ String comment = document.getText().substring(document.getLineStartOffset(commentLine), document.getLineEndOffset(commentLine))-->Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")[ FD ]
Line_6 $$ Document document = PsiDocumentManager.getInstance(myProject).getDocument(file)-->Line_9 $$ offset = document.getText().indexOf("Breakpoint!", offset + 1)[ FD ]
Line_14 $$ Breakpoint breakpoint-->Line_27 $$ if (breakpoint != null) [ FD ]
Line_52 $$ String classFilters = readValue(comment, "Class filters")-->Line_53 $$ if (classFilters != null) [ FD ]
Line_55 $$ StringTokenizer tokenizer = new StringTokenizer(classFilters, " ,")-->Line_60 $$ filter.setPattern(tokenizer.nextToken())[ FD ]
Line_8 $$ for (; ; ) -->Line_13 $$ String comment = document.getText().substring(document.getLineStartOffset(commentLine), document.getLineEndOffset(commentLine))[ CD ]
Line_47 $$ if (passCount != null) -->Line_49 $$ breakpoint.setCountFilter(Integer.parseInt(passCount))[ CD ]
Line_14 $$ Breakpoint breakpoint-->Line_38 $$ breakpoint.setSuspendPolicy(suspendPolicy)[ FD ]
Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")-->Line_43 $$ breakpoint.setCondition(new TextWithImportsImpl(CodeFragmentKind.EXPRESSION, condition))[ FD ]
Line_8 $$ for (; ; ) -->Line_47 $$ if (passCount != null) [ CD ]
Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)-->Line_48 $$ breakpoint.setCountFilterEnabled(true)[ FD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_17 $$ if (breakpoint != null) [ FD ]
Line_36 $$ String suspendPolicy = readValue(comment, "suspendPolicy")-->Line_37 $$ if (suspendPolicy != null) [ FD ]
Line_8 $$ for (; ; ) -->Line_37 $$ if (suspendPolicy != null) [ CD ]
Line_58 $$ ClassFilter filter = new ClassFilter()-->Line_59 $$ filter.setEnabled(true)[ FD ]
Line_8 $$ for (; ; ) -->Line_12 $$ int commentLine = document.getLineNumber(offset)[ CD ]
Line_15 $$ if (comment.indexOf("Method") != -1) -->Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)[ CD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")[ FD ]
Line_8 $$ for (; ; ) -->Line_52 $$ String classFilters = readValue(comment, "Class filters")[ CD ]
Line_53 $$ if (classFilters != null) -->Line_63 $$ breakpoint.setClassFilters(lst.toArray(new ClassFilter[lst.size()]))[ CD ]
Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")-->Line_48 $$ breakpoint.setCountFilterEnabled(true)[ FD ]
Line_37 $$ if (suspendPolicy != null) -->Line_39 $$ println("SUSPEND_POLICY = " + suspendPolicy, ProcessOutputTypes.SYSTEM)[ CD ]
Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")-->Line_49 $$ breakpoint.setCountFilter(Integer.parseInt(passCount))[ FD ]
Line_47 $$ if (passCount != null) -->Line_48 $$ breakpoint.setCountFilterEnabled(true)[ CD ]
Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))-->Line_17 $$ if (breakpoint != null) [ FD ]
Line_25 $$ if (comment.indexOf("Exception") != -1) -->Line_32 $$ if (breakpoint != null) [ CD ]
Line_8 $$ for (; ; ) -->Line_15 $$ if (comment.indexOf("Method") != -1) [ CD ]
Line_6 $$ Document document = PsiDocumentManager.getInstance(myProject).getDocument(file)-->Line_13 $$ String comment = document.getText().substring(document.getLineStartOffset(commentLine), document.getLineEndOffset(commentLine))[ FD ]
Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")-->Line_32 $$ if (breakpoint != null) [ FD ]
Line_5 $$ BreakpointManager breakpointManager = DebuggerManagerImpl.getInstanceEx(myProject).getBreakpointManager()-->Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)[ FD ]
Line_2 $$ public void createBreakpoints(final PsiFile file) -->Line_33 $$ println("LineBreakpoint created at " + file.getVirtualFile().getName() + ":" + (commentLine + 2), ProcessOutputTypes.SYSTEM)[ FD ]
Line_15 $$ if (comment.indexOf("Method") != -1) -->Line_20 $$ if (comment.indexOf("Field") != -1) [ CD ]
Line_8 $$ for (; ; ) -->Line_41 $$ String condition = readValue(comment, "Condition")[ CD ]
Line_13 $$ String comment = document.getText().substring(document.getLineStartOffset(commentLine), document.getLineEndOffset(commentLine))-->Line_20 $$ if (comment.indexOf("Field") != -1) [ FD ]
Line_6 $$ Document document = PsiDocumentManager.getInstance(myProject).getDocument(file)-->Line_12 $$ int commentLine = document.getLineNumber(offset)[ FD ]
Line_12 $$ int commentLine = document.getLineNumber(offset)-->Line_13 $$ String comment = document.getText().substring(document.getLineStartOffset(commentLine), document.getLineEndOffset(commentLine))[ FD ]
Line_9 $$ offset = document.getText().indexOf("Breakpoint!", offset + 1)-->Line_10 $$ if (offset == -1)[ FD ]
Line_14 $$ Breakpoint breakpoint-->Line_54 $$ breakpoint.setClassFiltersEnabled(true)[ FD ]
Line_8 $$ for (; ; ) -->Line_9 $$ offset = document.getText().indexOf("Breakpoint!", offset + 1)[ CD ]
Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")-->Line_38 $$ breakpoint.setSuspendPolicy(suspendPolicy)[ FD ]
Line_36 $$ String suspendPolicy = readValue(comment, "suspendPolicy")-->Line_38 $$ breakpoint.setSuspendPolicy(suspendPolicy)[ FD ]
Line_20 $$ if (comment.indexOf("Field") != -1) -->Line_25 $$ if (comment.indexOf("Exception") != -1) [ CD ]
Line_13 $$ String comment = document.getText().substring(document.getLineStartOffset(commentLine), document.getLineEndOffset(commentLine))-->Line_36 $$ String suspendPolicy = readValue(comment, "suspendPolicy")[ FD ]
Line_13 $$ String comment = document.getText().substring(document.getLineStartOffset(commentLine), document.getLineEndOffset(commentLine))-->Line_41 $$ String condition = readValue(comment, "Condition")[ FD ]
Line_8 $$ for (; ; ) -->Line_36 $$ String suspendPolicy = readValue(comment, "suspendPolicy")[ CD ]
Line_55 $$ StringTokenizer tokenizer = new StringTokenizer(classFilters, " ,")-->Line_57 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_2 $$ public void createBreakpoints(final PsiFile file) -->Line_69 $$ if (!SwingUtilities.isEventDispatchThread()) [ CD ]
Line_20 $$ if (comment.indexOf("Field") != -1) -->Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))[ CD ]
Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))-->Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")[ FD ]
Line_53 $$ if (classFilters != null) -->Line_57 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_17 $$ if (breakpoint != null) -->Line_18 $$ println("MethodBreakpoint created at " + file.getVirtualFile().getName() + ":" + (commentLine + 2), ProcessOutputTypes.SYSTEM)[ CD ]
Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))-->Line_22 $$ if (breakpoint != null) [ FD ]
Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")-->Line_54 $$ breakpoint.setClassFiltersEnabled(true)[ FD ]
Line_3 $$ Runnable runnable = new Runnable() -->Line_5 $$ BreakpointManager breakpointManager = DebuggerManagerImpl.getInstanceEx(myProject).getBreakpointManager()[ CD ]
Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")-->Line_63 $$ breakpoint.setClassFilters(lst.toArray(new ClassFilter[lst.size()]))[ FD ]
Line_13 $$ String comment = document.getText().substring(document.getLineStartOffset(commentLine), document.getLineEndOffset(commentLine))-->Line_15 $$ if (comment.indexOf("Method") != -1) [ FD ]
Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))-->Line_32 $$ if (breakpoint != null) [ FD ]
Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)-->Line_22 $$ if (breakpoint != null) [ FD ]
Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")-->Line_27 $$ if (breakpoint != null) [ FD ]
Line_9 $$ offset = document.getText().indexOf("Breakpoint!", offset + 1)-->Line_12 $$ int commentLine = document.getLineNumber(offset)[ FD ]
Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))-->Line_43 $$ breakpoint.setCondition(new TextWithImportsImpl(CodeFragmentKind.EXPRESSION, condition))[ FD ]
Line_3 $$ Runnable runnable = new Runnable() -->Line_6 $$ Document document = PsiDocumentManager.getInstance(myProject).getDocument(file)[ CD ]
Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))-->Line_38 $$ breakpoint.setSuspendPolicy(suspendPolicy)[ FD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_22 $$ if (breakpoint != null) [ FD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_49 $$ breakpoint.setCountFilter(Integer.parseInt(passCount))[ FD ]
Line_58 $$ ClassFilter filter = new ClassFilter()-->Line_60 $$ filter.setPattern(tokenizer.nextToken())[ FD ]
Line_8 $$ for (; ; ) -->Line_46 $$ String passCount = readValue(comment, "Pass count")[ CD ]
Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)-->Line_17 $$ if (breakpoint != null) [ FD ]
Line_8 $$ for (; ; ) -->Line_10 $$ if (offset == -1)[ CD ]
Line_47 $$ if (passCount != null) -->Line_50 $$ println("Pass count = " + passCount, ProcessOutputTypes.SYSTEM)[ CD ]
Line_56 $$ ArrayList<ClassFilter> lst = new ArrayList<ClassFilter>()-->Line_63 $$ breakpoint.setClassFilters(lst.toArray(new ClassFilter[lst.size()]))[ FD ]
Line_46 $$ String passCount = readValue(comment, "Pass count")-->Line_47 $$ if (passCount != null) [ FD ]
Line_14 $$ Breakpoint breakpoint-->Line_32 $$ if (breakpoint != null) [ FD ]
Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)-->Line_63 $$ breakpoint.setClassFilters(lst.toArray(new ClassFilter[lst.size()]))[ FD ]
Line_8 $$ for (; ; ) -->Line_14 $$ Breakpoint breakpoint[ CD ]
Line_25 $$ if (comment.indexOf("Exception") != -1) -->Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)[ CD ]
Line_2 $$ public void createBreakpoints(final PsiFile file) -->Line_3 $$ Runnable runnable = new Runnable() [ CD ]
Line_37 $$ if (suspendPolicy != null) -->Line_38 $$ breakpoint.setSuspendPolicy(suspendPolicy)[ CD ]
Line_6 $$ Document document = PsiDocumentManager.getInstance(myProject).getDocument(file)-->Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))[ FD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_63 $$ breakpoint.setClassFilters(lst.toArray(new ClassFilter[lst.size()]))[ FD ]
Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)-->Line_32 $$ if (breakpoint != null) [ FD ]
Line_14 $$ Breakpoint breakpoint-->Line_63 $$ breakpoint.setClassFilters(lst.toArray(new ClassFilter[lst.size()]))[ FD ]
Line_69 $$ if (!SwingUtilities.isEventDispatchThread()) -->Line_72 $$ runnable.run()[ CD ]
Line_5 $$ BreakpointManager breakpointManager = DebuggerManagerImpl.getInstanceEx(myProject).getBreakpointManager()-->Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)[ FD ]
Line_3 $$ Runnable runnable = new Runnable() -->Line_70 $$ DebuggerInvocationUtil.invokeAndWait(myProject, runnable, ModalityState.defaultModalityState())[ FD ]
Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")-->Line_17 $$ if (breakpoint != null) [ FD ]
Line_14 $$ Breakpoint breakpoint-->Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)[ FD ]
Line_14 $$ Breakpoint breakpoint-->Line_48 $$ breakpoint.setCountFilterEnabled(true)[ FD ]
Line_8 $$ for (; ; ) -->Line_42 $$ if (condition != null) [ CD ]
Line_57 $$ while (tokenizer.hasMoreTokens()) -->Line_61 $$ lst.add(filter)[ CD ]
Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")-->Line_22 $$ if (breakpoint != null) [ FD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_32 $$ if (breakpoint != null) [ FD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)[ FD ]
Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)-->Line_43 $$ breakpoint.setCondition(new TextWithImportsImpl(CodeFragmentKind.EXPRESSION, condition))[ FD ]
Line_8 $$ for (; ; ) -->Line_53 $$ if (classFilters != null) [ CD ]
Line_7 $$ int offset = -1-->Line_9 $$ offset = document.getText().indexOf("Breakpoint!", offset + 1)[ FD ]
Line_6 $$ Document document = PsiDocumentManager.getInstance(myProject).getDocument(file)-->Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)[ FD ]
Line_42 $$ if (condition != null) -->Line_44 $$ println("Condition = " + condition, ProcessOutputTypes.SYSTEM)[ CD ]
Line_57 $$ while (tokenizer.hasMoreTokens()) -->Line_60 $$ filter.setPattern(tokenizer.nextToken())[ CD ]
Line_58 $$ ClassFilter filter = new ClassFilter()-->Line_61 $$ lst.add(filter)[ FD ]
Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))-->Line_48 $$ breakpoint.setCountFilterEnabled(true)[ FD ]
Line_16 $$ breakpoint = breakpointManager.addMethodBreakpoint(document, commentLine + 1)-->Line_38 $$ breakpoint.setSuspendPolicy(suspendPolicy)[ FD ]
Line_2 $$ public void createBreakpoints(final PsiFile file) -->Line_6 $$ Document document = PsiDocumentManager.getInstance(myProject).getDocument(file)[ FD ]
Line_14 $$ Breakpoint breakpoint-->Line_26 $$ breakpoint = breakpointManager.addExceptionBreakpoint(readValue(comment, "Exception"), "")[ FD ]
Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))-->Line_31 $$ breakpoint = breakpointManager.addLineBreakpoint(document, commentLine + 1)[ FD ]
Line_25 $$ if (comment.indexOf("Exception") != -1) -->Line_27 $$ if (breakpoint != null) [ CD ]
Line_27 $$ if (breakpoint != null) -->Line_28 $$ println("ExceptionBreakpoint created at " + file.getVirtualFile().getName() + ":" + (commentLine + 2), ProcessOutputTypes.SYSTEM)[ CD ]
Line_22 $$ if (breakpoint != null) -->Line_23 $$ println("FieldBreakpoint created at " + file.getVirtualFile().getName() + ":" + (commentLine + 2), ProcessOutputTypes.SYSTEM)[ CD ]
Line_5 $$ BreakpointManager breakpointManager = DebuggerManagerImpl.getInstanceEx(myProject).getBreakpointManager()-->Line_21 $$ breakpoint = breakpointManager.addFieldBreakpoint(document, commentLine + 1, readValue(comment, "Field"))[ FD ]
