Line_41 $$ if (SwingUtilities.isEventDispatchThread()) -->Line_42 $$ UIUtil.dispatchAllInvocationEvents()[ CD ]
Line_7 $$ getCompilerManager().addCompilationStatusListener(new CompilationStatusAdapter() -->Line_9 $$ generatedFilePaths.add(relativePath)[ CD ]
Line_17 $$ if (aborted) -->Line_18 $$ Assert.fail("compilation aborted")[ CD ]
Line_14 $$ final CompileStatusNotification callback = new CompileStatusNotification() -->Line_29 $$ action.run(callback)[ FD ]
Line_33 $$ while (!semaphore.waitFor(10)) -->Line_37 $$ if (SwingUtilities.isEventDispatchThread()) [ CD ]
Line_12 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_29 $$ action.run(callback)[ CD ]
Line_14 $$ final CompileStatusNotification callback = new CompileStatusNotification() -->Line_20 $$ ExitStatus status = CompileDriver.getExternalBuildExitStatus(compileContext)[ FD ]
Line_2 $$ private CompilationLog compile(final ParameterizedRunnable<CompileStatusNotification> action) -->Line_32 $$ final long start = System.currentTimeMillis()[ CD ]
Line_3 $$ final Ref<CompilationLog> result = Ref.create(null)-->Line_44 $$ return result.get()[ FD ]
Line_4 $$ final Semaphore semaphore = new Semaphore()-->Line_5 $$ semaphore.down()[ FD ]
Line_2 $$ private CompilationLog compile(final ParameterizedRunnable<CompileStatusNotification> action) -->Line_7 $$ getCompilerManager().addCompilationStatusListener(new CompilationStatusAdapter() [ CD ]
Line_12 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_28 $$ CompilerTestUtil.saveApplicationSettings()[ CD ]
Line_3 $$ final Ref<CompilationLog> result = Ref.create(null)-->Line_21 $$ result.set(new CompilationLog(status == ExitStatus.UP_TO_DATE, generatedFilePaths, compileContext.getMessages(CompilerMessageCategory.ERROR), compileContext.getMessages(CompilerMessageCategory.WARNING)))[ FD ]
Line_4 $$ final Semaphore semaphore = new Semaphore()-->Line_23 $$ semaphore.up()[ FD ]
Line_2 $$ private CompilationLog compile(final ParameterizedRunnable<CompileStatusNotification> action) -->Line_3 $$ final Ref<CompilationLog> result = Ref.create(null)[ CD ]
Line_4 $$ final Semaphore semaphore = new Semaphore()-->Line_33 $$ while (!semaphore.waitFor(10)) [ FD ]
Line_7 $$ getCompilerManager().addCompilationStatusListener(new CompilationStatusAdapter() -->Line_9 $$ generatedFilePaths.add(relativePath)[ FD ]
Line_6 $$ final List<String> generatedFilePaths = new ArrayList<String>()-->Line_9 $$ generatedFilePaths.add(relativePath)[ FD ]
Line_2 $$ private CompilationLog compile(final ParameterizedRunnable<CompileStatusNotification> action) -->Line_29 $$ action.run(callback)[ FD ]
Line_33 $$ while (!semaphore.waitFor(10)) -->Line_34 $$ if (System.currentTimeMillis() - start > 5 * 60 * 1000) [ CD ]
Line_2 $$ private CompilationLog compile(final ParameterizedRunnable<CompileStatusNotification> action) -->Line_5 $$ semaphore.down()[ CD ]
Line_2 $$ private CompilationLog compile(final ParameterizedRunnable<CompileStatusNotification> action) -->Line_44 $$ return result.get()[ CD ]
Line_2 $$ private CompilationLog compile(final ParameterizedRunnable<CompileStatusNotification> action) -->Line_6 $$ final List<String> generatedFilePaths = new ArrayList<String>()[ CD ]
Line_14 $$ final CompileStatusNotification callback = new CompileStatusNotification() -->Line_21 $$ result.set(new CompilationLog(status == ExitStatus.UP_TO_DATE, generatedFilePaths, compileContext.getMessages(CompilerMessageCategory.ERROR), compileContext.getMessages(CompilerMessageCategory.WARNING)))[ FD ]
Line_37 $$ if (SwingUtilities.isEventDispatchThread()) -->Line_38 $$ UIUtil.dispatchAllInvocationEvents()[ CD ]
Line_2 $$ private CompilationLog compile(final ParameterizedRunnable<CompileStatusNotification> action) -->Line_33 $$ while (!semaphore.waitFor(10)) [ CD ]
Line_12 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_27 $$ PlatformTestUtil.saveProject(myProject)[ CD ]
Line_12 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_14 $$ final CompileStatusNotification callback = new CompileStatusNotification() [ CD ]
Line_2 $$ private CompilationLog compile(final ParameterizedRunnable<CompileStatusNotification> action) -->Line_12 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() [ CD ]
Line_2 $$ private CompilationLog compile(final ParameterizedRunnable<CompileStatusNotification> action) -->Line_4 $$ final Semaphore semaphore = new Semaphore()[ CD ]
Line_2 $$ private CompilationLog compile(final ParameterizedRunnable<CompileStatusNotification> action) -->Line_41 $$ if (SwingUtilities.isEventDispatchThread()) [ CD ]
