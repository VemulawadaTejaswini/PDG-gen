Line_12 $$ if (!ioFile.exists()) -->Line_13 $$ getProject().save()[ CD ]
Line_11 $$ File ioFile = new File(module.getModuleFilePath())-->Line_14 $$ assert ioFile.exists() : "File does not exist: " + ioFile.getPath()[ FD ]
Line_11 $$ File ioFile = new File(module.getModuleFilePath())-->Line_12 $$ if (!ioFile.exists()) [ FD ]
Line_10 $$ for (Module module : myModules) -->Line_11 $$ File ioFile = new File(module.getModuleFilePath())[ FD ]
Line_5 $$ final ErrorReportingCallback callback = new ErrorReportingCallback(semaphore)-->Line_26 $$ return callback.getMessages()[ FD ]
Line_3 $$ final Semaphore semaphore = new Semaphore()-->Line_20 $$ while (!semaphore.waitFor(100)) [ FD ]
Line_20 $$ while (!semaphore.waitFor(100)) -->Line_21 $$ if (SwingUtilities.isEventDispatchThread()) [ CD ]
Line_5 $$ final ErrorReportingCallback callback = new ErrorReportingCallback(semaphore)-->Line_17 $$ runnable.consume(callback)[ FD ]
Line_2 $$ private List<CompilerMessage> runCompiler(final Consumer<ErrorReportingCallback> runnable) -->Line_25 $$ callback.throwException()[ CD ]
Line_2 $$ private List<CompilerMessage> runCompiler(final Consumer<ErrorReportingCallback> runnable) -->Line_5 $$ final ErrorReportingCallback callback = new ErrorReportingCallback(semaphore)[ CD ]
Line_2 $$ private List<CompilerMessage> runCompiler(final Consumer<ErrorReportingCallback> runnable) -->Line_26 $$ return callback.getMessages()[ CD ]
Line_6 $$ EdtTestUtil.runInEdtAndWait(new ThrowableRunnable<Throwable>() -->Line_17 $$ runnable.consume(callback)[ CD ]
Line_3 $$ final Semaphore semaphore = new Semaphore()-->Line_4 $$ semaphore.down()[ FD ]
Line_6 $$ EdtTestUtil.runInEdtAndWait(new ThrowableRunnable<Throwable>() -->Line_9 $$ CompilerTestUtil.saveApplicationSettings()[ CD ]
Line_2 $$ private List<CompilerMessage> runCompiler(final Consumer<ErrorReportingCallback> runnable) -->Line_3 $$ final Semaphore semaphore = new Semaphore()[ CD ]
Line_6 $$ EdtTestUtil.runInEdtAndWait(new ThrowableRunnable<Throwable>() -->Line_8 $$ PlatformTestUtil.saveProject(getProject())[ CD ]
Line_2 $$ private List<CompilerMessage> runCompiler(final Consumer<ErrorReportingCallback> runnable) -->Line_6 $$ EdtTestUtil.runInEdtAndWait(new ThrowableRunnable<Throwable>() [ CD ]
Line_5 $$ final ErrorReportingCallback callback = new ErrorReportingCallback(semaphore)-->Line_25 $$ callback.throwException()[ FD ]
Line_2 $$ private List<CompilerMessage> runCompiler(final Consumer<ErrorReportingCallback> runnable) -->Line_17 $$ runnable.consume(callback)[ FD ]
Line_21 $$ if (SwingUtilities.isEventDispatchThread()) -->Line_22 $$ UIUtil.dispatchAllInvocationEvents()[ CD ]
Line_2 $$ private List<CompilerMessage> runCompiler(final Consumer<ErrorReportingCallback> runnable) -->Line_4 $$ semaphore.down()[ CD ]
Line_2 $$ private List<CompilerMessage> runCompiler(final Consumer<ErrorReportingCallback> runnable) -->Line_20 $$ while (!semaphore.waitFor(100)) [ CD ]
