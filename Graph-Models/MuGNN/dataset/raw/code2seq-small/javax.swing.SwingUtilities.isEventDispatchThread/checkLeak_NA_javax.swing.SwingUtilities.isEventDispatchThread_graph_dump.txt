Line_9 $$ walkObjects(suspectClass, roots, new Processor<BackLink>() -->Line_19 $$ return true[ CD ]
Line_11 $$ T leaked = (T) backLink.value-->Line_12 $$ if (markLeaked(leaked) && (isReallyLeak == null || isReallyLeak.process(leaked))) [ FD ]
Line_3 $$ if (SwingUtilities.isEventDispatchThread()) -->Line_4 $$ UIUtil.dispatchAllInvocationEvents()[ CD ]
Line_9 $$ walkObjects(suspectClass, roots, new Processor<BackLink>() -->Line_12 $$ if (markLeaked(leaked) && (isReallyLeak == null || isReallyLeak.process(leaked))) [ CD ]
Line_12 $$ if (markLeaked(leaked) && (isReallyLeak == null || isReallyLeak.process(leaked))) -->Line_16 $$ System.out.println(";-----")[ CD ]
Line_9 $$ walkObjects(suspectClass, roots, new Processor<BackLink>() -->Line_22 $$ return !(leaked instanceof UserDataHolderEx) || ((UserDataHolderEx) leaked).replace(REPORTED_LEAKED, null, Boolean.TRUE)[ CD ]
Line_2 $$ public static <T> void checkLeak(@NotNull Collection<Object> roots, @NotNull Class<T> suspectClass, @Nullable final Processor<? super T> isReallyLeak) throws AssertionError -->Line_12 $$ if (markLeaked(leaked) && (isReallyLeak == null || isReallyLeak.process(leaked))) [ FD ]
Line_2 $$ public static <T> void checkLeak(@NotNull Collection<Object> roots, @NotNull Class<T> suspectClass, @Nullable final Processor<? super T> isReallyLeak) throws AssertionError -->Line_3 $$ if (SwingUtilities.isEventDispatchThread()) [ CD ]
Line_2 $$ public static <T> void checkLeak(@NotNull Collection<Object> roots, @NotNull Class<T> suspectClass, @Nullable final Processor<? super T> isReallyLeak) throws AssertionError -->Line_9 $$ walkObjects(suspectClass, roots, new Processor<BackLink>() [ CD ]
Line_12 $$ if (markLeaked(leaked) && (isReallyLeak == null || isReallyLeak.process(leaked))) -->Line_13 $$ String place = leaked instanceof Project ? PlatformTestCase.getCreationPlace((Project) leaked) : ""[ CD ]
Line_2 $$ public static <T> void checkLeak(@NotNull Collection<Object> roots, @NotNull Class<T> suspectClass, @Nullable final Processor<? super T> isReallyLeak) throws AssertionError -->Line_9 $$ walkObjects(suspectClass, roots, new Processor<BackLink>() [ FD ]
Line_12 $$ if (markLeaked(leaked) && (isReallyLeak == null || isReallyLeak.process(leaked))) -->Line_14 $$ System.out.println("Leaked object found:" + leaked + "; hash: " + System.identityHashCode(leaked) + "; place: " + place)[ CD ]
Line_11 $$ T leaked = (T) backLink.value-->Line_14 $$ System.out.println("Leaked object found:" + leaked + "; hash: " + System.identityHashCode(leaked) + "; place: " + place)[ FD ]
Line_9 $$ walkObjects(suspectClass, roots, new Processor<BackLink>() -->Line_15 $$ System.out.println(backLink)[ FD ]
Line_2 $$ public static <T> void checkLeak(@NotNull Collection<Object> roots, @NotNull Class<T> suspectClass, @Nullable final Processor<? super T> isReallyLeak) throws AssertionError -->Line_8 $$ PersistentEnumeratorBase.clearCacheForTests()[ CD ]
Line_12 $$ if (markLeaked(leaked) && (isReallyLeak == null || isReallyLeak.process(leaked))) -->Line_15 $$ System.out.println(backLink)[ CD ]
Line_9 $$ walkObjects(suspectClass, roots, new Processor<BackLink>() -->Line_11 $$ T leaked = (T) backLink.value[ CD ]
Line_3 $$ if (SwingUtilities.isEventDispatchThread()) -->Line_6 $$ UIUtil.pump()[ CD ]
