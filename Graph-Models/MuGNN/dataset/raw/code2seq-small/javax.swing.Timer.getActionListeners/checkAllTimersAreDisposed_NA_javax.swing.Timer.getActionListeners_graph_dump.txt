Line_27 $$ String text = ""-->Line_30 $$ text = "(delayed for " + delay + "ms)"[ FD ]
Line_5 $$ Object timer-->Line_23 $$ if (timer != null) [ FD ]
Line_5 $$ Object timer-->Line_17 $$ timer = firstTimerF.get(timerQueue)[ FD ]
Line_28 $$ if (timer instanceof Delayed) -->Line_30 $$ text = "(delayed for " + delay + "ms)"[ CD ]
Line_17 $$ timer = firstTimerF.get(timerQueue)-->Line_23 $$ if (timer != null) [ FD ]
Line_28 $$ if (timer instanceof Delayed) -->Line_31 $$ Method getTimer = ReflectionUtil.getDeclaredMethod(timer.getClass(), "getTimer")[ CD ]
Line_11 $$ timerQueue = sharedInstance.invoke(null)-->Line_17 $$ timer = firstTimerF.get(timerQueue)[ FD ]
Line_14 $$ timer = delayQueue.peek()-->Line_17 $$ timer = firstTimerF.get(timerQueue)[ FD ]
Line_14 $$ timer = delayQueue.peek()-->Line_23 $$ if (timer != null) [ FD ]
Line_3 $$ Field firstTimerF-->Line_25 $$ ReflectionUtil.resetField(timerQueue, firstTimerF)[ FD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_4 $$ Object timerQueue[ CD ]
Line_23 $$ if (timer != null) -->Line_27 $$ String text = ""[ CD ]
Line_5 $$ Object timer-->Line_28 $$ if (timer instanceof Delayed) [ FD ]
Line_17 $$ timer = firstTimerF.get(timerQueue)-->Line_34 $$ timer = getTimer.invoke(timer)[ FD ]
Line_31 $$ Method getTimer = ReflectionUtil.getDeclaredMethod(timer.getClass(), "getTimer")-->Line_34 $$ timer = getTimer.invoke(timer)[ FD ]
Line_23 $$ if (timer != null) -->Line_40 $$ Timer t = (Timer) timer[ CD ]
Line_14 $$ timer = delayQueue.peek()-->Line_34 $$ timer = getTimer.invoke(timer)[ FD ]
Line_4 $$ Object timerQueue-->Line_11 $$ timerQueue = sharedInstance.invoke(null)[ FD ]
Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")-->Line_17 $$ timer = firstTimerF.get(timerQueue)[ FD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_36 $$ exceptions.add(e)[ FD ]
Line_14 $$ timer = delayQueue.peek()-->Line_31 $$ Method getTimer = ReflectionUtil.getDeclaredMethod(timer.getClass(), "getTimer")[ FD ]
Line_12 $$ if (firstTimerF == null) -->Line_14 $$ timer = delayQueue.peek()[ CD ]
Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")-->Line_12 $$ if (firstTimerF == null) [ FD ]
Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")-->Line_16 $$ firstTimerF.setAccessible(true)[ FD ]
Line_8 $$ Method sharedInstance = TimerQueueC.getDeclaredMethod("sharedInstance")-->Line_11 $$ timerQueue = sharedInstance.invoke(null)[ FD ]
Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")-->Line_24 $$ if (firstTimerF != null) [ FD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_5 $$ Object timer[ CD ]
Line_3 $$ Field firstTimerF-->Line_16 $$ firstTimerF.setAccessible(true)[ FD ]
Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")-->Line_25 $$ ReflectionUtil.resetField(timerQueue, firstTimerF)[ FD ]
Line_8 $$ Method sharedInstance = TimerQueueC.getDeclaredMethod("sharedInstance")-->Line_9 $$ sharedInstance.setAccessible(true)[ FD ]
Line_12 $$ if (firstTimerF == null) -->Line_17 $$ timer = firstTimerF.get(timerQueue)[ CD ]
Line_3 $$ Field firstTimerF-->Line_12 $$ if (firstTimerF == null) [ FD ]
Line_7 $$ Class<?> TimerQueueC = Class.forName("javax.swing.TimerQueue")-->Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")[ FD ]
Line_23 $$ if (timer != null) -->Line_41 $$ text = "Timer (listeners: " + Arrays.asList(t.getActionListeners()) + ") " + text[ CD ]
Line_23 $$ if (timer != null) -->Line_28 $$ if (timer instanceof Delayed) [ CD ]
Line_30 $$ text = "(delayed for " + delay + "ms)"-->Line_41 $$ text = "Timer (listeners: " + Arrays.asList(t.getActionListeners()) + ") " + text[ FD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_3 $$ Field firstTimerF[ CD ]
Line_11 $$ timerQueue = sharedInstance.invoke(null)-->Line_13 $$ DelayQueue delayQueue = ReflectionUtil.getField(TimerQueueC, timerQueue, DelayQueue.class, "queue")[ FD ]
Line_23 $$ if (timer != null) -->Line_42 $$ exceptions.add(new AssertionFailedError("Not disposed Timer: " + text + "; queue:" + timerQueue))[ CD ]
Line_5 $$ Object timer-->Line_14 $$ timer = delayQueue.peek()[ FD ]
Line_12 $$ if (firstTimerF == null) -->Line_16 $$ firstTimerF.setAccessible(true)[ CD ]
Line_28 $$ if (timer instanceof Delayed) -->Line_29 $$ long delay = ((Delayed) timer).getDelay(TimeUnit.MILLISECONDS)[ CD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_20 $$ exceptions.add(e)[ FD ]
Line_5 $$ Object timer-->Line_31 $$ Method getTimer = ReflectionUtil.getDeclaredMethod(timer.getClass(), "getTimer")[ FD ]
Line_5 $$ Object timer-->Line_34 $$ timer = getTimer.invoke(timer)[ FD ]
Line_11 $$ timerQueue = sharedInstance.invoke(null)-->Line_25 $$ ReflectionUtil.resetField(timerQueue, firstTimerF)[ FD ]
Line_17 $$ timer = firstTimerF.get(timerQueue)-->Line_31 $$ Method getTimer = ReflectionUtil.getDeclaredMethod(timer.getClass(), "getTimer")[ FD ]
Line_7 $$ Class<?> TimerQueueC = Class.forName("javax.swing.TimerQueue")-->Line_8 $$ Method sharedInstance = TimerQueueC.getDeclaredMethod("sharedInstance")[ FD ]
Line_3 $$ Field firstTimerF-->Line_17 $$ timer = firstTimerF.get(timerQueue)[ FD ]
Line_23 $$ if (timer != null) -->Line_24 $$ if (firstTimerF != null) [ CD ]
Line_3 $$ Field firstTimerF-->Line_24 $$ if (firstTimerF != null) [ FD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_42 $$ exceptions.add(new AssertionFailedError("Not disposed Timer: " + text + "; queue:" + timerQueue))[ FD ]
Line_31 $$ Method getTimer = ReflectionUtil.getDeclaredMethod(timer.getClass(), "getTimer")-->Line_32 $$ getTimer.setAccessible(true)[ FD ]
Line_12 $$ if (firstTimerF == null) -->Line_13 $$ DelayQueue delayQueue = ReflectionUtil.getField(TimerQueueC, timerQueue, DelayQueue.class, "queue")[ CD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_23 $$ if (timer != null) [ CD ]
Line_4 $$ Object timerQueue-->Line_25 $$ ReflectionUtil.resetField(timerQueue, firstTimerF)[ FD ]
Line_17 $$ timer = firstTimerF.get(timerQueue)-->Line_28 $$ if (timer instanceof Delayed) [ FD ]
Line_7 $$ Class<?> TimerQueueC = Class.forName("javax.swing.TimerQueue")-->Line_13 $$ DelayQueue delayQueue = ReflectionUtil.getField(TimerQueueC, timerQueue, DelayQueue.class, "queue")[ FD ]
Line_4 $$ Object timerQueue-->Line_17 $$ timer = firstTimerF.get(timerQueue)[ FD ]
Line_28 $$ if (timer instanceof Delayed) -->Line_32 $$ getTimer.setAccessible(true)[ CD ]
Line_40 $$ Timer t = (Timer) timer-->Line_41 $$ text = "Timer (listeners: " + Arrays.asList(t.getActionListeners()) + ") " + text[ FD ]
Line_3 $$ Field firstTimerF-->Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")[ FD ]
Line_14 $$ timer = delayQueue.peek()-->Line_28 $$ if (timer instanceof Delayed) [ FD ]
Line_13 $$ DelayQueue delayQueue = ReflectionUtil.getField(TimerQueueC, timerQueue, DelayQueue.class, "queue")-->Line_14 $$ timer = delayQueue.peek()[ FD ]
Line_27 $$ String text = ""-->Line_41 $$ text = "Timer (listeners: " + Arrays.asList(t.getActionListeners()) + ") " + text[ FD ]
Line_24 $$ if (firstTimerF != null) -->Line_25 $$ ReflectionUtil.resetField(timerQueue, firstTimerF)[ CD ]
Line_4 $$ Object timerQueue-->Line_13 $$ DelayQueue delayQueue = ReflectionUtil.getField(TimerQueueC, timerQueue, DelayQueue.class, "queue")[ FD ]
