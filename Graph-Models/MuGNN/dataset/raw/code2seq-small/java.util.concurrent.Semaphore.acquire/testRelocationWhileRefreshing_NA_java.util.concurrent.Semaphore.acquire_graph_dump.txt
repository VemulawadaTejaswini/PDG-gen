Line_4 $$ int numberOfReplicas = randomBoolean() ? 0 : 1-->Line_11 $$ client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", 1).put("index.number_of_replicas", numberOfReplicas).put("index.refresh_interval", -1)).execute().actionGet()[ FD ]
Line_3 $$ int numberOfRelocations = scaledRandomIntBetween(1, rarely() ? 10 : 4)-->Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) [ FD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_55 $$ assertFalse(client().admin().cluster().prepareHealth().setWaitForRelocatingShards(0).setWaitForEvents(Priority.LANGUID).setTimeout("30s").get().isTimedOut())[ CD ]
Line_14 $$ for (int i = 1; i < numberOfNodes; i++) -->Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) [ FD ]
Line_2 $$ public void testRelocationWhileRefreshing() throws Exception -->Line_22 $$ final Semaphore postRecoveryShards = new Semaphore(0)[ CD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_49 $$ client().admin().cluster().prepareReroute().add(new MoveAllocationCommand(new ShardId("test", 0), nodes[fromNode], nodes[toNode])).get()[ CD ]
Line_22 $$ final Semaphore postRecoveryShards = new Semaphore(0)-->Line_52 $$ postRecoveryShards.acquire(1)[ FD ]
Line_2 $$ public void testRelocationWhileRefreshing() throws Exception -->Line_5 $$ int numberOfNodes = numberOfReplicas == 0 ? 2 : 3[ CD ]
Line_3 $$ int numberOfRelocations = scaledRandomIntBetween(1, rarely() ? 10 : 4)-->Line_6 $$ logger.info("testRelocationWhileIndexingRandom(numRelocations=[ FD ]
Line_2 $$ public void testRelocationWhileRefreshing() throws Exception -->Line_14 $$ for (int i = 1; i < numberOfNodes; i++) [ CD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_36 $$ int fromNode = (i % 2)[ CD ]
Line_36 $$ int fromNode = (i % 2)-->Line_38 $$ fromNode += nodeShiftBased[ FD ]
Line_2 $$ public void testRelocationWhileRefreshing() throws Exception -->Line_6 $$ logger.info("testRelocationWhileIndexingRandom(numRelocations=[ CD ]
Line_2 $$ public void testRelocationWhileRefreshing() throws Exception -->Line_9 $$ nodes[0] = internalCluster().startNode()[ CD ]
Line_2 $$ public void testRelocationWhileRefreshing() throws Exception -->Line_11 $$ client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", 1).put("index.number_of_replicas", numberOfReplicas).put("index.refresh_interval", -1)).execute().actionGet()[ CD ]
Line_45 $$ for (int numDocs = randomIntBetween(10, 30); numDocs > 0; numDocs--) -->Line_46 $$ builders2.add(client().prepareIndex("test", "type").setSource("[ CD ]
Line_2 $$ public void testRelocationWhileRefreshing() throws Exception -->Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) [ CD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_39 $$ toNode += nodeShiftBased[ CD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_52 $$ postRecoveryShards.acquire(1)[ CD ]
Line_2 $$ public void testRelocationWhileRefreshing() throws Exception -->Line_3 $$ int numberOfRelocations = scaledRandomIntBetween(1, rarely() ? 10 : 4)[ CD ]
Line_14 $$ for (int i = 1; i < numberOfNodes; i++) -->Line_16 $$ nodes[i] = internalCluster().startNode()[ CD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_51 $$ indexRandom(false, true, builders1)[ CD ]
Line_14 $$ for (int i = 1; i < numberOfNodes; i++) -->Line_17 $$ if (i != numberOfNodes - 1) [ CD ]
Line_17 $$ if (i != numberOfNodes - 1) -->Line_18 $$ ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes(Integer.toString(i + 1)).setWaitForGreenStatus().execute().actionGet()[ CD ]
Line_22 $$ final Semaphore postRecoveryShards = new Semaphore(0)-->Line_26 $$ postRecoveryShards.release()[ FD ]
Line_23 $$ final IndexEventListener listener = new IndexEventListener() -->Line_31 $$ eventListener.setNewDelegate(listener)[ FD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_38 $$ fromNode += nodeShiftBased[ CD ]
Line_18 $$ ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes(Integer.toString(i + 1)).setWaitForGreenStatus().execute().actionGet()-->Line_19 $$ assertThat(healthResponse.isTimedOut(), equalTo(false))[ FD ]
Line_2 $$ public void testRelocationWhileRefreshing() throws Exception -->Line_13 $$ ensureYellow()[ CD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_40 $$ List<IndexRequestBuilder> builders1 = new ArrayList()[ CD ]
Line_5 $$ int numberOfNodes = numberOfReplicas == 0 ? 2 : 3-->Line_6 $$ logger.info("testRelocationWhileIndexingRandom(numRelocations=[ FD ]
Line_5 $$ int numberOfNodes = numberOfReplicas == 0 ? 2 : 3-->Line_14 $$ for (int i = 1; i < numberOfNodes; i++) [ FD ]
Line_25 $$ if (currentState == IndexShardState.POST_RECOVERY) -->Line_26 $$ postRecoveryShards.release()[ CD ]
Line_41 $$ for (int numDocs = randomIntBetween(10, 30); numDocs > 0; numDocs--) -->Line_42 $$ builders1.add(client().prepareIndex("test", "type").setSource("[ CD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_45 $$ for (int numDocs = randomIntBetween(10, 30); numDocs > 0; numDocs--) [ CD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_37 $$ int toNode = fromNode == 0 ? 1 : 0[ CD ]
Line_23 $$ final IndexEventListener listener = new IndexEventListener() -->Line_25 $$ if (currentState == IndexShardState.POST_RECOVERY) [ FD ]
Line_62 $$ if (expectedCount < 0) -->Line_63 $$ expectedCount = response.getHits().totalHits()[ CD ]
Line_2 $$ public void testRelocationWhileRefreshing() throws Exception -->Line_4 $$ int numberOfReplicas = randomBoolean() ? 0 : 1[ CD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_58 $$ long expectedCount = -1[ CD ]
Line_40 $$ List<IndexRequestBuilder> builders1 = new ArrayList()-->Line_42 $$ builders1.add(client().prepareIndex("test", "type").setSource("[ FD ]
Line_41 $$ for (int numDocs = randomIntBetween(10, 30); numDocs > 0; numDocs--) -->Line_45 $$ for (int numDocs = randomIntBetween(10, 30); numDocs > 0; numDocs--) [ FD ]
Line_40 $$ List<IndexRequestBuilder> builders1 = new ArrayList()-->Line_51 $$ indexRandom(false, true, builders1)[ FD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_41 $$ for (int numDocs = randomIntBetween(10, 30); numDocs > 0; numDocs--) [ CD ]
Line_2 $$ public void testRelocationWhileRefreshing() throws Exception -->Line_7 $$ String[] nodes = new String[numberOfNodes][ CD ]
Line_4 $$ int numberOfReplicas = randomBoolean() ? 0 : 1-->Line_6 $$ logger.info("testRelocationWhileIndexingRandom(numRelocations=[ FD ]
Line_17 $$ if (i != numberOfNodes - 1) -->Line_19 $$ assertThat(healthResponse.isTimedOut(), equalTo(false))[ CD ]
Line_62 $$ if (expectedCount < 0) -->Line_65 $$ assertEquals(expectedCount, response.getHits().totalHits())[ CD ]
Line_23 $$ final IndexEventListener listener = new IndexEventListener() -->Line_25 $$ if (currentState == IndexShardState.POST_RECOVERY) [ CD ]
Line_2 $$ public void testRelocationWhileRefreshing() throws Exception -->Line_23 $$ final IndexEventListener listener = new IndexEventListener() [ CD ]
Line_37 $$ int toNode = fromNode == 0 ? 1 : 0-->Line_39 $$ toNode += nodeShiftBased[ FD ]
Line_14 $$ for (int i = 1; i < numberOfNodes; i++) -->Line_17 $$ if (i != numberOfNodes - 1) [ FD ]
Line_35 $$ for (int i = 0; i < numberOfRelocations; i++) -->Line_54 $$ indexRandom(true, true, builders2)[ CD ]
