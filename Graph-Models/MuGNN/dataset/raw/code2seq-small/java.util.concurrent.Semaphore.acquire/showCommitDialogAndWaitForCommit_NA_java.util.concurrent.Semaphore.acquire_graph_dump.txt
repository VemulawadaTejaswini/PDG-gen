Line_4 $$ final Semaphore sem = new Semaphore(0)-->Line_33 $$ sem.acquire()[ FD ]
Line_4 $$ final Semaphore sem = new Semaphore(0)-->Line_23 $$ sem.release()[ FD ]
Line_2 $$ private boolean showCommitDialogAndWaitForCommit(@NotNull final GitRepository repository, @NotNull final GitCommitWrapper commit, @NotNull final LocalChangeList changeList, @NotNull final String commitMessage) -->Line_5 $$ myPlatformFacade.invokeAndWait(new Runnable() [ CD ]
Line_2 $$ private boolean showCommitDialogAndWaitForCommit(@NotNull final GitRepository repository, @NotNull final GitCommitWrapper commit, @NotNull final LocalChangeList changeList, @NotNull final String commitMessage) -->Line_3 $$ final AtomicBoolean commitSucceeded = new AtomicBoolean()[ CD ]
Line_10 $$ boolean commitNotCancelled = myPlatformFacade.getVcsHelper(myProject).commitChanges(changes, changeList, commitMessage, new CommitResultHandler() -->Line_12 $$ commit.setActualSubject(commitMessage)[ CD ]
Line_10 $$ boolean commitNotCancelled = myPlatformFacade.getVcsHelper(myProject).commitChanges(changes, changeList, commitMessage, new CommitResultHandler() -->Line_14 $$ sem.release()[ CD ]
Line_21 $$ if (!commitNotCancelled) -->Line_22 $$ commitSucceeded.set(false)[ CD ]
Line_4 $$ final Semaphore sem = new Semaphore(0)-->Line_28 $$ sem.release()[ FD ]
Line_2 $$ private boolean showCommitDialogAndWaitForCommit(@NotNull final GitRepository repository, @NotNull final GitCommitWrapper commit, @NotNull final LocalChangeList changeList, @NotNull final String commitMessage) -->Line_8 $$ cancelCherryPick(repository)[ FD ]
Line_3 $$ final AtomicBoolean commitSucceeded = new AtomicBoolean()-->Line_27 $$ commitSucceeded.set(false)[ FD ]
Line_2 $$ private boolean showCommitDialogAndWaitForCommit(@NotNull final GitRepository repository, @NotNull final GitCommitWrapper commit, @NotNull final LocalChangeList changeList, @NotNull final String commitMessage) -->Line_38 $$ return commitSucceeded.get()[ CD ]
Line_3 $$ final AtomicBoolean commitSucceeded = new AtomicBoolean()-->Line_13 $$ commitSucceeded.set(true)[ FD ]
Line_10 $$ boolean commitNotCancelled = myPlatformFacade.getVcsHelper(myProject).commitChanges(changes, changeList, commitMessage, new CommitResultHandler() -->Line_17 $$ commitSucceeded.set(false)[ CD ]
Line_10 $$ boolean commitNotCancelled = myPlatformFacade.getVcsHelper(myProject).commitChanges(changes, changeList, commitMessage, new CommitResultHandler() -->Line_21 $$ if (!commitNotCancelled) [ FD ]
Line_2 $$ private boolean showCommitDialogAndWaitForCommit(@NotNull final GitRepository repository, @NotNull final GitCommitWrapper commit, @NotNull final LocalChangeList changeList, @NotNull final String commitMessage) -->Line_4 $$ final Semaphore sem = new Semaphore(0)[ CD ]
Line_3 $$ final AtomicBoolean commitSucceeded = new AtomicBoolean()-->Line_38 $$ return commitSucceeded.get()[ FD ]
Line_21 $$ if (!commitNotCancelled) -->Line_23 $$ sem.release()[ CD ]
Line_3 $$ final AtomicBoolean commitSucceeded = new AtomicBoolean()-->Line_22 $$ commitSucceeded.set(false)[ FD ]
Line_10 $$ boolean commitNotCancelled = myPlatformFacade.getVcsHelper(myProject).commitChanges(changes, changeList, commitMessage, new CommitResultHandler() -->Line_13 $$ commitSucceeded.set(true)[ CD ]
Line_2 $$ private boolean showCommitDialogAndWaitForCommit(@NotNull final GitRepository repository, @NotNull final GitCommitWrapper commit, @NotNull final LocalChangeList changeList, @NotNull final String commitMessage) -->Line_9 $$ Collection<Change> changes = commit.getCommit().getChanges()[ FD ]
Line_10 $$ boolean commitNotCancelled = myPlatformFacade.getVcsHelper(myProject).commitChanges(changes, changeList, commitMessage, new CommitResultHandler() -->Line_12 $$ commit.setActualSubject(commitMessage)[ FD ]
Line_9 $$ Collection<Change> changes = commit.getCommit().getChanges()-->Line_10 $$ boolean commitNotCancelled = myPlatformFacade.getVcsHelper(myProject).commitChanges(changes, changeList, commitMessage, new CommitResultHandler() [ FD ]
Line_2 $$ private boolean showCommitDialogAndWaitForCommit(@NotNull final GitRepository repository, @NotNull final GitCommitWrapper commit, @NotNull final LocalChangeList changeList, @NotNull final String commitMessage) -->Line_12 $$ commit.setActualSubject(commitMessage)[ FD ]
Line_4 $$ final Semaphore sem = new Semaphore(0)-->Line_18 $$ sem.release()[ FD ]
Line_10 $$ boolean commitNotCancelled = myPlatformFacade.getVcsHelper(myProject).commitChanges(changes, changeList, commitMessage, new CommitResultHandler() -->Line_18 $$ sem.release()[ CD ]
Line_3 $$ final AtomicBoolean commitSucceeded = new AtomicBoolean()-->Line_17 $$ commitSucceeded.set(false)[ FD ]
Line_2 $$ private boolean showCommitDialogAndWaitForCommit(@NotNull final GitRepository repository, @NotNull final GitCommitWrapper commit, @NotNull final LocalChangeList changeList, @NotNull final String commitMessage) -->Line_10 $$ boolean commitNotCancelled = myPlatformFacade.getVcsHelper(myProject).commitChanges(changes, changeList, commitMessage, new CommitResultHandler() [ FD ]
Line_4 $$ final Semaphore sem = new Semaphore(0)-->Line_14 $$ sem.release()[ FD ]
