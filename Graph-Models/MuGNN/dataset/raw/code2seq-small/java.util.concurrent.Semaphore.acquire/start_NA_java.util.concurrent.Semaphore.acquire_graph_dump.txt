Line_7 $$ if (useHttpProxy) -->Line_13 $$ if (proxyAuthentication) [ CD ]
Line_3 $$ Connection c = new Connection(myHost.getHostName(), myHost.getPort())-->Line_17 $$ c.setProxyData(new HTTPProxyData(proxyHost, proxyPort, proxyUser, proxyPassword))[ FD ]
Line_29 $$ Integer exitStatus = s.getExitStatus()-->Line_30 $$ if (exitStatus == null) [ FD ]
Line_7 $$ if (useHttpProxy) -->Line_10 $$ boolean proxyAuthentication = Boolean.valueOf(System.getenv(GitSSHHandler.SSH_PROXY_AUTHENTICATION_ENV))[ CD ]
Line_21 $$ final Session s = c.openSession()-->Line_26 $$ forward("stderr", System.err, s.getStderr(), true)[ FD ]
Line_21 $$ final Session s = c.openSession()-->Line_25 $$ forward("stdout", System.out, s.getStdout(), true)[ FD ]
Line_3 $$ Connection c = new Connection(myHost.getHostName(), myHost.getPort())-->Line_19 $$ c.connect(new HostKeyVerifier())[ FD ]
Line_21 $$ final Session s = c.openSession()-->Line_24 $$ forward("stdin", s.getStdin(), System.in, false)[ FD ]
Line_3 $$ Connection c = new Connection(myHost.getHostName(), myHost.getPort())-->Line_20 $$ authenticate(c)[ FD ]
Line_7 $$ if (useHttpProxy) -->Line_8 $$ String proxyHost = System.getenv(GitSSHHandler.SSH_PROXY_HOST_ENV)[ CD ]
Line_7 $$ if (useHttpProxy) -->Line_9 $$ Integer proxyPort = Integer.valueOf(System.getenv(GitSSHHandler.SSH_PROXY_PORT_ENV))[ CD ]
Line_13 $$ if (proxyAuthentication) -->Line_15 $$ proxyPassword = System.getenv(GitSSHHandler.SSH_PROXY_PASSWORD_ENV)[ CD ]
Line_3 $$ Connection c = new Connection(myHost.getHostName(), myHost.getPort())-->Line_21 $$ final Session s = c.openSession()[ FD ]
Line_29 $$ Integer exitStatus = s.getExitStatus()-->Line_31 $$ exitStatus = 1[ FD ]
Line_30 $$ if (exitStatus == null) -->Line_31 $$ exitStatus = 1[ CD ]
Line_3 $$ Connection c = new Connection(myHost.getHostName(), myHost.getPort())-->Line_38 $$ c.close()[ FD ]
Line_3 $$ Connection c = new Connection(myHost.getHostName(), myHost.getPort())-->Line_5 $$ configureKnownHosts(c)[ FD ]
Line_2 $$ private void start() throws IOException, InterruptedException -->Line_3 $$ Connection c = new Connection(myHost.getHostName(), myHost.getPort())[ CD ]
Line_7 $$ if (useHttpProxy) -->Line_17 $$ c.setProxyData(new HTTPProxyData(proxyHost, proxyPort, proxyUser, proxyPassword))[ CD ]
Line_11 $$ String proxyUser = null-->Line_14 $$ proxyUser = System.getenv(GitSSHHandler.SSH_PROXY_USER_ENV)[ FD ]
Line_21 $$ final Session s = c.openSession()-->Line_35 $$ s.close()[ FD ]
Line_21 $$ final Session s = c.openSession()-->Line_29 $$ Integer exitStatus = s.getExitStatus()[ FD ]
Line_21 $$ final Session s = c.openSession()-->Line_23 $$ s.execCommand(myCommand)[ FD ]
Line_21 $$ final Session s = c.openSession()-->Line_28 $$ s.waitForCondition(ChannelCondition.EXIT_STATUS, Long.MAX_VALUE)[ FD ]
Line_7 $$ if (useHttpProxy) -->Line_11 $$ String proxyUser = null[ CD ]
Line_12 $$ String proxyPassword = null-->Line_15 $$ proxyPassword = System.getenv(GitSSHHandler.SSH_PROXY_PASSWORD_ENV)[ FD ]
Line_7 $$ if (useHttpProxy) -->Line_12 $$ String proxyPassword = null[ CD ]
Line_31 $$ exitStatus = 1-->Line_33 $$ System.exit(exitStatus.intValue() == 0 ? myExitCode : exitStatus.intValue())[ FD ]
Line_29 $$ Integer exitStatus = s.getExitStatus()-->Line_33 $$ System.exit(exitStatus.intValue() == 0 ? myExitCode : exitStatus.intValue())[ FD ]
Line_13 $$ if (proxyAuthentication) -->Line_14 $$ proxyUser = System.getenv(GitSSHHandler.SSH_PROXY_USER_ENV)[ CD ]
