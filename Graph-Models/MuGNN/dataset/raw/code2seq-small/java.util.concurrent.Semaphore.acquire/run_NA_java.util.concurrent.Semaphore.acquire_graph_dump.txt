Line_6 $$ for (int j = 0; j < numberOfIds; j++) -->Line_15 $$ incrementMapValue(j, failedMap)[ FD ]
Line_7 $$ for (int k = 0; k < numberOfUpdatesPerId; ++k) -->Line_8 $$ updateRequestsOutstanding.acquire()[ CD ]
Line_6 $$ for (int j = 0; j < numberOfIds; j++) -->Line_10 $$ UpdateRequest ur = client().prepareUpdate("test", "type1", Integer.toString(j)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(retryOnConflict).setUpsert(jsonBuilder().startObject().field("field", 1).endObject()).request()[ FD ]
Line_6 $$ for (int j = 0; j < numberOfIds; j++) -->Line_7 $$ for (int k = 0; k < numberOfUpdatesPerId; ++k) [ CD ]
Line_26 $$ DeleteRequest dr = client().prepareDelete("test", "type1", Integer.toString(j)).request()-->Line_27 $$ client().delete(dr, new DeleteListener(j))[ FD ]
Line_6 $$ for (int j = 0; j < numberOfIds; j++) -->Line_31 $$ incrementMapValue(j, failedMap)[ FD ]
Line_10 $$ UpdateRequest ur = client().prepareUpdate("test", "type1", Integer.toString(j)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(retryOnConflict).setUpsert(jsonBuilder().startObject().field("field", 1).endObject()).request()-->Line_11 $$ client().update(ur, new UpdateListener(j))[ FD ]
Line_6 $$ for (int j = 0; j < numberOfIds; j++) -->Line_26 $$ DeleteRequest dr = client().prepareDelete("test", "type1", Integer.toString(j)).request()[ FD ]
Line_21 $$ hasWaitedForNoNode = true-->Line_37 $$ hasWaitedForNoNode = true[ FD ]
Line_5 $$ boolean hasWaitedForNoNode = false-->Line_37 $$ hasWaitedForNoNode = true[ FD ]
Line_5 $$ boolean hasWaitedForNoNode = false-->Line_21 $$ hasWaitedForNoNode = true[ FD ]
