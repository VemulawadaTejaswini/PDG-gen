Line_48 $$ final long answer = en[i][j][1]-->Line_51 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_25 $$ final long s = m2.mod(e)-->Line_50 $$ if (s != answer)[ FD ]
Line_11 $$ final long answer = en[i][j][1]-->Line_51 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_34 $$ for (int j = 1; j < en[i].length; j++) -->Line_46 $$ for (int j = 1; j < en[i].length; j++) [ FD ]
Line_25 $$ final long s = m2.mod(e)-->Line_26 $$ if (s != answer)[ FD ]
Line_34 $$ for (int j = 1; j < en[i].length; j++) -->Line_35 $$ final long e = en[i][j][0][ CD ]
Line_19 $$ for (int i = 0; i < en.length; i++) -->Line_20 $$ final long n = en[i][0][0][ CD ]
Line_36 $$ final long answer = en[i][j][1]-->Line_39 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_8 $$ final long n = en[i][0][0]-->Line_21 $$ m2.set(n)[ FD ]
Line_45 $$ final BigInteger N = BigInteger.valueOf(n)-->Line_49 $$ final long s = TWO.modPow(BigInteger.valueOf(e), N).longValue()[ FD ]
Line_36 $$ final long answer = en[i][j][1]-->Line_51 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_11 $$ final long answer = en[i][j][1]-->Line_26 $$ if (s != answer)[ FD ]
Line_24 $$ final long answer = en[i][j][1]-->Line_51 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_12 $$ final long s = Modular.mod(e, n)-->Line_27 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_10 $$ final long e = en[i][j][0]-->Line_49 $$ final long s = TWO.modPow(BigInteger.valueOf(e), N).longValue()[ FD ]
Line_3 $$ final Timer t = new Timer(false)-->Line_6 $$ t.tick("generateEN")[ FD ]
Line_49 $$ final long s = TWO.modPow(BigInteger.valueOf(e), N).longValue()-->Line_51 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_12 $$ final long s = Modular.mod(e, n)-->Line_51 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_2 $$ static void modBenchmarks() -->Line_5 $$ final long[][][] en = generateEN(10000, 10)[ CD ]
Line_10 $$ final long e = en[i][j][0]-->Line_25 $$ final long s = m2.mod(e)[ FD ]
Line_10 $$ final long e = en[i][j][0]-->Line_12 $$ final long s = Modular.mod(e, n)[ FD ]
Line_7 $$ for (int i = 0; i < en.length; i++) -->Line_19 $$ for (int i = 0; i < en.length; i++) [ FD ]
Line_7 $$ for (int i = 0; i < en.length; i++) -->Line_9 $$ for (int j = 1; j < en[i].length; j++) [ CD ]
Line_22 $$ for (int j = 1; j < en[i].length; j++) -->Line_23 $$ final long e = en[i][j][0][ CD ]
Line_31 $$ for (int i = 0; i < en.length; i++) -->Line_43 $$ for (int i = 0; i < en.length; i++) [ FD ]
Line_2 $$ static void modBenchmarks() -->Line_42 $$ t.tick("montgomery.mod2")[ CD ]
Line_2 $$ static void modBenchmarks() -->Line_7 $$ for (int i = 0; i < en.length; i++) [ CD ]
Line_18 $$ final Montgomery2 m2 = new Montgomery2()-->Line_37 $$ final long s = m2.mod2(e)[ FD ]
Line_7 $$ for (int i = 0; i < en.length; i++) -->Line_43 $$ for (int i = 0; i < en.length; i++) [ FD ]
Line_9 $$ for (int j = 1; j < en[i].length; j++) -->Line_46 $$ for (int j = 1; j < en[i].length; j++) [ FD ]
Line_20 $$ final long n = en[i][0][0]-->Line_33 $$ m2.set(n)[ FD ]
Line_25 $$ final long s = m2.mod(e)-->Line_38 $$ if (s != answer)[ FD ]
Line_43 $$ for (int i = 0; i < en.length; i++) -->Line_46 $$ for (int j = 1; j < en[i].length; j++) [ CD ]
Line_22 $$ for (int j = 1; j < en[i].length; j++) -->Line_26 $$ if (s != answer)[ CD ]
Line_34 $$ for (int j = 1; j < en[i].length; j++) -->Line_38 $$ if (s != answer)[ CD ]
Line_18 $$ final Montgomery2 m2 = new Montgomery2()-->Line_33 $$ m2.set(n)[ FD ]
Line_36 $$ final long answer = en[i][j][1]-->Line_50 $$ if (s != answer)[ FD ]
Line_3 $$ final Timer t = new Timer(false)-->Line_42 $$ t.tick("montgomery.mod2")[ FD ]
Line_35 $$ final long e = en[i][j][0]-->Line_37 $$ final long s = m2.mod2(e)[ FD ]
Line_9 $$ for (int j = 1; j < en[i].length; j++) -->Line_13 $$ if (s != answer)[ CD ]
Line_2 $$ static void modBenchmarks() -->Line_54 $$ t.tick("BigInteger.modPow(e, n)")[ CD ]
Line_46 $$ for (int j = 1; j < en[i].length; j++) -->Line_47 $$ final long e = en[i][j][0][ CD ]
Line_25 $$ final long s = m2.mod(e)-->Line_39 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_47 $$ final long e = en[i][j][0]-->Line_49 $$ final long s = TWO.modPow(BigInteger.valueOf(e), N).longValue()[ FD ]
Line_3 $$ final Timer t = new Timer(false)-->Line_17 $$ t.tick("Modular.mod")[ FD ]
Line_2 $$ static void modBenchmarks() -->Line_31 $$ for (int i = 0; i < en.length; i++) [ CD ]
Line_20 $$ final long n = en[i][0][0]-->Line_45 $$ final BigInteger N = BigInteger.valueOf(n)[ FD ]
Line_37 $$ final long s = m2.mod2(e)-->Line_38 $$ if (s != answer)[ FD ]
Line_13 $$ if (s != answer)-->Line_14 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ CD ]
Line_24 $$ final long answer = en[i][j][1]-->Line_39 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_32 $$ final long n = en[i][0][0]-->Line_45 $$ final BigInteger N = BigInteger.valueOf(n)[ FD ]
Line_31 $$ for (int i = 0; i < en.length; i++) -->Line_33 $$ m2.set(n)[ CD ]
Line_11 $$ final long answer = en[i][j][1]-->Line_27 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_9 $$ for (int j = 1; j < en[i].length; j++) -->Line_22 $$ for (int j = 1; j < en[i].length; j++) [ FD ]
Line_43 $$ for (int i = 0; i < en.length; i++) -->Line_44 $$ final long n = en[i][0][0][ CD ]
Line_46 $$ for (int j = 1; j < en[i].length; j++) -->Line_49 $$ final long s = TWO.modPow(BigInteger.valueOf(e), N).longValue()[ CD ]
Line_34 $$ for (int j = 1; j < en[i].length; j++) -->Line_36 $$ final long answer = en[i][j][1][ CD ]
Line_24 $$ final long answer = en[i][j][1]-->Line_27 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_9 $$ for (int j = 1; j < en[i].length; j++) -->Line_11 $$ final long answer = en[i][j][1][ CD ]
Line_12 $$ final long s = Modular.mod(e, n)-->Line_14 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_37 $$ final long s = m2.mod2(e)-->Line_50 $$ if (s != answer)[ FD ]
Line_22 $$ for (int j = 1; j < en[i].length; j++) -->Line_46 $$ for (int j = 1; j < en[i].length; j++) [ FD ]
Line_25 $$ final long s = m2.mod(e)-->Line_27 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_22 $$ for (int j = 1; j < en[i].length; j++) -->Line_25 $$ final long s = m2.mod(e)[ CD ]
Line_18 $$ final Montgomery2 m2 = new Montgomery2()-->Line_25 $$ final long s = m2.mod(e)[ FD ]
Line_3 $$ final Timer t = new Timer(false)-->Line_54 $$ t.tick("BigInteger.modPow(e, n)")[ FD ]
Line_24 $$ final long answer = en[i][j][1]-->Line_38 $$ if (s != answer)[ FD ]
Line_23 $$ final long e = en[i][j][0]-->Line_49 $$ final long s = TWO.modPow(BigInteger.valueOf(e), N).longValue()[ FD ]
Line_11 $$ final long answer = en[i][j][1]-->Line_13 $$ if (s != answer)[ FD ]
Line_3 $$ final Timer t = new Timer(false)-->Line_30 $$ t.tick("montgomery.mod")[ FD ]
Line_9 $$ for (int j = 1; j < en[i].length; j++) -->Line_12 $$ final long s = Modular.mod(e, n)[ CD ]
Line_49 $$ final long s = TWO.modPow(BigInteger.valueOf(e), N).longValue()-->Line_50 $$ if (s != answer)[ FD ]
Line_36 $$ final long answer = en[i][j][1]-->Line_38 $$ if (s != answer)[ FD ]
Line_11 $$ final long answer = en[i][j][1]-->Line_39 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_8 $$ final long n = en[i][0][0]-->Line_45 $$ final BigInteger N = BigInteger.valueOf(n)[ FD ]
Line_7 $$ for (int i = 0; i < en.length; i++) -->Line_8 $$ final long n = en[i][0][0][ CD ]
Line_32 $$ final long n = en[i][0][0]-->Line_33 $$ m2.set(n)[ FD ]
Line_12 $$ final long s = Modular.mod(e, n)-->Line_38 $$ if (s != answer)[ FD ]
Line_7 $$ for (int i = 0; i < en.length; i++) -->Line_31 $$ for (int i = 0; i < en.length; i++) [ FD ]
Line_20 $$ final long n = en[i][0][0]-->Line_21 $$ m2.set(n)[ FD ]
Line_10 $$ final long e = en[i][j][0]-->Line_37 $$ final long s = m2.mod2(e)[ FD ]
Line_12 $$ final long s = Modular.mod(e, n)-->Line_13 $$ if (s != answer)[ FD ]
Line_50 $$ if (s != answer)-->Line_51 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ CD ]
Line_9 $$ for (int j = 1; j < en[i].length; j++) -->Line_34 $$ for (int j = 1; j < en[i].length; j++) [ FD ]
Line_2 $$ static void modBenchmarks() -->Line_4 $$ t.tick("modBenchmarks()")[ CD ]
Line_38 $$ if (s != answer)-->Line_39 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ CD ]
Line_37 $$ final long s = m2.mod2(e)-->Line_39 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_34 $$ for (int j = 1; j < en[i].length; j++) -->Line_37 $$ final long s = m2.mod2(e)[ CD ]
Line_18 $$ final Montgomery2 m2 = new Montgomery2()-->Line_21 $$ m2.set(n)[ FD ]
Line_46 $$ for (int j = 1; j < en[i].length; j++) -->Line_50 $$ if (s != answer)[ CD ]
Line_23 $$ final long e = en[i][j][0]-->Line_37 $$ final long s = m2.mod2(e)[ FD ]
Line_48 $$ final long answer = en[i][j][1]-->Line_50 $$ if (s != answer)[ FD ]
Line_2 $$ static void modBenchmarks() -->Line_17 $$ t.tick("Modular.mod")[ CD ]
Line_2 $$ static void modBenchmarks() -->Line_18 $$ final Montgomery2 m2 = new Montgomery2()[ CD ]
Line_24 $$ final long answer = en[i][j][1]-->Line_26 $$ if (s != answer)[ FD ]
Line_31 $$ for (int i = 0; i < en.length; i++) -->Line_32 $$ final long n = en[i][0][0][ CD ]
Line_46 $$ for (int j = 1; j < en[i].length; j++) -->Line_48 $$ final long answer = en[i][j][1][ CD ]
Line_35 $$ final long e = en[i][j][0]-->Line_49 $$ final long s = TWO.modPow(BigInteger.valueOf(e), N).longValue()[ FD ]
Line_12 $$ final long s = Modular.mod(e, n)-->Line_26 $$ if (s != answer)[ FD ]
Line_31 $$ for (int i = 0; i < en.length; i++) -->Line_34 $$ for (int j = 1; j < en[i].length; j++) [ CD ]
Line_12 $$ final long s = Modular.mod(e, n)-->Line_50 $$ if (s != answer)[ FD ]
Line_2 $$ static void modBenchmarks() -->Line_6 $$ t.tick("generateEN")[ CD ]
Line_11 $$ final long answer = en[i][j][1]-->Line_50 $$ if (s != answer)[ FD ]
Line_19 $$ for (int i = 0; i < en.length; i++) -->Line_22 $$ for (int j = 1; j < en[i].length; j++) [ CD ]
Line_26 $$ if (s != answer)-->Line_27 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ CD ]
Line_22 $$ for (int j = 1; j < en[i].length; j++) -->Line_24 $$ final long answer = en[i][j][1][ CD ]
Line_24 $$ final long answer = en[i][j][1]-->Line_50 $$ if (s != answer)[ FD ]
Line_23 $$ final long e = en[i][j][0]-->Line_25 $$ final long s = m2.mod(e)[ FD ]
Line_19 $$ for (int i = 0; i < en.length; i++) -->Line_43 $$ for (int i = 0; i < en.length; i++) [ FD ]
Line_22 $$ for (int j = 1; j < en[i].length; j++) -->Line_34 $$ for (int j = 1; j < en[i].length; j++) [ FD ]
Line_2 $$ static void modBenchmarks() -->Line_3 $$ final Timer t = new Timer(false)[ CD ]
Line_44 $$ final long n = en[i][0][0]-->Line_45 $$ final BigInteger N = BigInteger.valueOf(n)[ FD ]
Line_11 $$ final long answer = en[i][j][1]-->Line_14 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_43 $$ for (int i = 0; i < en.length; i++) -->Line_45 $$ final BigInteger N = BigInteger.valueOf(n)[ CD ]
Line_9 $$ for (int j = 1; j < en[i].length; j++) -->Line_10 $$ final long e = en[i][j][0][ CD ]
Line_19 $$ for (int i = 0; i < en.length; i++) -->Line_21 $$ m2.set(n)[ CD ]
Line_8 $$ final long n = en[i][0][0]-->Line_12 $$ final long s = Modular.mod(e, n)[ FD ]
Line_2 $$ static void modBenchmarks() -->Line_30 $$ t.tick("montgomery.mod")[ CD ]
Line_2 $$ static void modBenchmarks() -->Line_19 $$ for (int i = 0; i < en.length; i++) [ CD ]
Line_3 $$ final Timer t = new Timer(false)-->Line_4 $$ t.tick("modBenchmarks()")[ FD ]
Line_8 $$ final long n = en[i][0][0]-->Line_33 $$ m2.set(n)[ FD ]
Line_19 $$ for (int i = 0; i < en.length; i++) -->Line_31 $$ for (int i = 0; i < en.length; i++) [ FD ]
Line_25 $$ final long s = m2.mod(e)-->Line_51 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_2 $$ static void modBenchmarks() -->Line_43 $$ for (int i = 0; i < en.length; i++) [ CD ]
Line_37 $$ final long s = m2.mod2(e)-->Line_51 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_12 $$ final long s = Modular.mod(e, n)-->Line_39 $$ assertEquals("e=" + e + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_11 $$ final long answer = en[i][j][1]-->Line_38 $$ if (s != answer)[ FD ]
