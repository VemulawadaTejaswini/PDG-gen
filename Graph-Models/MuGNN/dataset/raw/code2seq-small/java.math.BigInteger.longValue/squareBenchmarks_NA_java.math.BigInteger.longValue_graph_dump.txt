Line_35 $$ for (int j = 1; j < rn[i].length; j++) -->Line_37 $$ final long answer = rn[i][j][1][ CD ]
Line_25 $$ final long answer = rn[i][j][1]-->Line_53 $$ if (s != answer)[ FD ]
Line_24 $$ final long r = rn[i][j][0]-->Line_26 $$ final long s = square(r, n, r2p64)[ FD ]
Line_12 $$ final long s = square_slow(r, n)-->Line_41 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_45 $$ for (int i = 0; i < rn.length; i++) -->Line_46 $$ final long n = rn[i][0][0][ CD ]
Line_33 $$ final long n = rn[i][0][0]-->Line_47 $$ final BigInteger N = BigInteger.valueOf(n)[ FD ]
Line_3 $$ final Timer t = new Timer(false)-->Line_31 $$ t.tick("square")[ FD ]
Line_3 $$ final Timer t = new Timer(false)-->Line_44 $$ t.tick("R.multiply(R).mod(N)")[ FD ]
Line_25 $$ final long answer = rn[i][j][1]-->Line_27 $$ if (s != answer)[ FD ]
Line_7 $$ for (int i = 0; i < rn.length; i++) -->Line_8 $$ final long n = rn[i][0][0][ CD ]
Line_34 $$ final BigInteger N = BigInteger.valueOf(n)-->Line_39 $$ final long s = R.multiply(R).mod(N).longValue()[ FD ]
Line_9 $$ for (int j = 1; j < rn[i].length; j++) -->Line_35 $$ for (int j = 1; j < rn[i].length; j++) [ FD ]
Line_24 $$ final long r = rn[i][j][0]-->Line_51 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_32 $$ for (int i = 0; i < rn.length; i++) -->Line_35 $$ for (int j = 1; j < rn[i].length; j++) [ CD ]
Line_26 $$ final long s = square(r, n, r2p64)-->Line_28 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_26 $$ final long s = square(r, n, r2p64)-->Line_27 $$ if (s != answer)[ FD ]
Line_18 $$ for (int i = 0; i < rn.length; i++) -->Line_19 $$ final long n = rn[i][0][0][ CD ]
Line_12 $$ final long s = square_slow(r, n)-->Line_53 $$ if (s != answer)[ FD ]
Line_2 $$ static void squareBenchmarks() -->Line_45 $$ for (int i = 0; i < rn.length; i++) [ CD ]
Line_19 $$ final long n = rn[i][0][0]-->Line_34 $$ final BigInteger N = BigInteger.valueOf(n)[ FD ]
Line_11 $$ final long answer = rn[i][j][1]-->Line_41 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_10 $$ final long r = rn[i][j][0]-->Line_38 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_38 $$ final BigInteger R = BigInteger.valueOf(r)-->Line_52 $$ final long s = R.modPow(TWO, N).longValue()[ FD ]
Line_35 $$ for (int j = 1; j < rn[i].length; j++) -->Line_36 $$ final long r = rn[i][j][0][ CD ]
Line_21 $$ if (r2p64 >= n)-->Line_22 $$ r2p64 -= n[ CD ]
Line_11 $$ final long answer = rn[i][j][1]-->Line_53 $$ if (s != answer)[ FD ]
Line_26 $$ final long s = square(r, n, r2p64)-->Line_41 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_48 $$ for (int j = 1; j < rn[i].length; j++) -->Line_53 $$ if (s != answer)[ CD ]
Line_22 $$ r2p64 -= n-->Line_26 $$ final long s = square(r, n, r2p64)[ FD ]
Line_35 $$ for (int j = 1; j < rn[i].length; j++) -->Line_39 $$ final long s = R.multiply(R).mod(N).longValue()[ CD ]
Line_11 $$ final long answer = rn[i][j][1]-->Line_14 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_37 $$ final long answer = rn[i][j][1]-->Line_54 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_3 $$ final Timer t = new Timer(false)-->Line_6 $$ t.tick("generateRN")[ FD ]
Line_23 $$ for (int j = 1; j < rn[i].length; j++) -->Line_25 $$ final long answer = rn[i][j][1][ CD ]
Line_25 $$ final long answer = rn[i][j][1]-->Line_41 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_8 $$ final long n = rn[i][0][0]-->Line_22 $$ r2p64 -= n[ FD ]
Line_18 $$ for (int i = 0; i < rn.length; i++) -->Line_23 $$ for (int j = 1; j < rn[i].length; j++) [ CD ]
Line_48 $$ for (int j = 1; j < rn[i].length; j++) -->Line_51 $$ final BigInteger R = BigInteger.valueOf(r)[ CD ]
Line_18 $$ for (int i = 0; i < rn.length; i++) -->Line_20 $$ long r2p64 = (0x4000000000000000L % n) << 1[ CD ]
Line_32 $$ for (int i = 0; i < rn.length; i++) -->Line_45 $$ for (int i = 0; i < rn.length; i++) [ FD ]
Line_37 $$ final long answer = rn[i][j][1]-->Line_53 $$ if (s != answer)[ FD ]
Line_52 $$ final long s = R.modPow(TWO, N).longValue()-->Line_54 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_10 $$ final long r = rn[i][j][0]-->Line_12 $$ final long s = square_slow(r, n)[ FD ]
Line_36 $$ final long r = rn[i][j][0]-->Line_38 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_32 $$ for (int i = 0; i < rn.length; i++) -->Line_33 $$ final long n = rn[i][0][0][ CD ]
Line_23 $$ for (int j = 1; j < rn[i].length; j++) -->Line_27 $$ if (s != answer)[ CD ]
Line_18 $$ for (int i = 0; i < rn.length; i++) -->Line_32 $$ for (int i = 0; i < rn.length; i++) [ FD ]
Line_35 $$ for (int j = 1; j < rn[i].length; j++) -->Line_40 $$ if (s != answer)[ CD ]
Line_26 $$ final long s = square(r, n, r2p64)-->Line_53 $$ if (s != answer)[ FD ]
Line_35 $$ for (int j = 1; j < rn[i].length; j++) -->Line_38 $$ final BigInteger R = BigInteger.valueOf(r)[ CD ]
Line_9 $$ for (int j = 1; j < rn[i].length; j++) -->Line_10 $$ final long r = rn[i][j][0][ CD ]
Line_26 $$ final long s = square(r, n, r2p64)-->Line_40 $$ if (s != answer)[ FD ]
Line_8 $$ final long n = rn[i][0][0]-->Line_21 $$ if (r2p64 >= n)[ FD ]
Line_19 $$ final long n = rn[i][0][0]-->Line_26 $$ final long s = square(r, n, r2p64)[ FD ]
Line_2 $$ static void squareBenchmarks() -->Line_3 $$ final Timer t = new Timer(false)[ CD ]
Line_27 $$ if (s != answer)-->Line_28 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ CD ]
Line_53 $$ if (s != answer)-->Line_54 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ CD ]
Line_23 $$ for (int j = 1; j < rn[i].length; j++) -->Line_26 $$ final long s = square(r, n, r2p64)[ CD ]
Line_8 $$ final long n = rn[i][0][0]-->Line_34 $$ final BigInteger N = BigInteger.valueOf(n)[ FD ]
Line_25 $$ final long answer = rn[i][j][1]-->Line_54 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_19 $$ final long n = rn[i][0][0]-->Line_21 $$ if (r2p64 >= n)[ FD ]
Line_25 $$ final long answer = rn[i][j][1]-->Line_28 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_3 $$ final Timer t = new Timer(false)-->Line_57 $$ t.tick("R.modPow(TWO, N)")[ FD ]
Line_23 $$ for (int j = 1; j < rn[i].length; j++) -->Line_35 $$ for (int j = 1; j < rn[i].length; j++) [ FD ]
Line_2 $$ static void squareBenchmarks() -->Line_18 $$ for (int i = 0; i < rn.length; i++) [ CD ]
Line_32 $$ for (int i = 0; i < rn.length; i++) -->Line_34 $$ final BigInteger N = BigInteger.valueOf(n)[ CD ]
Line_2 $$ static void squareBenchmarks() -->Line_44 $$ t.tick("R.multiply(R).mod(N)")[ CD ]
Line_35 $$ for (int j = 1; j < rn[i].length; j++) -->Line_48 $$ for (int j = 1; j < rn[i].length; j++) [ FD ]
Line_12 $$ final long s = square_slow(r, n)-->Line_54 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_22 $$ r2p64 -= n-->Line_21 $$ if (r2p64 >= n)[ FD ]
Line_7 $$ for (int i = 0; i < rn.length; i++) -->Line_45 $$ for (int i = 0; i < rn.length; i++) [ FD ]
Line_19 $$ final long n = rn[i][0][0]-->Line_47 $$ final BigInteger N = BigInteger.valueOf(n)[ FD ]
Line_2 $$ static void squareBenchmarks() -->Line_4 $$ t.tick("squareBenchmarks(), MAX_SQRT=" + Modular.MAX_SQRT_LONG)[ CD ]
Line_3 $$ final Timer t = new Timer(false)-->Line_17 $$ t.tick("square_slow")[ FD ]
Line_12 $$ final long s = square_slow(r, n)-->Line_40 $$ if (s != answer)[ FD ]
Line_12 $$ final long s = square_slow(r, n)-->Line_13 $$ if (s != answer)[ FD ]
Line_52 $$ final long s = R.modPow(TWO, N).longValue()-->Line_53 $$ if (s != answer)[ FD ]
Line_50 $$ final long answer = rn[i][j][1]-->Line_53 $$ if (s != answer)[ FD ]
Line_45 $$ for (int i = 0; i < rn.length; i++) -->Line_47 $$ final BigInteger N = BigInteger.valueOf(n)[ CD ]
Line_12 $$ final long s = square_slow(r, n)-->Line_27 $$ if (s != answer)[ FD ]
Line_12 $$ final long s = square_slow(r, n)-->Line_28 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_20 $$ long r2p64 = (0x4000000000000000L % n) << 1-->Line_21 $$ if (r2p64 >= n)[ FD ]
Line_9 $$ for (int j = 1; j < rn[i].length; j++) -->Line_12 $$ final long s = square_slow(r, n)[ CD ]
Line_47 $$ final BigInteger N = BigInteger.valueOf(n)-->Line_52 $$ final long s = R.modPow(TWO, N).longValue()[ FD ]
Line_36 $$ final long r = rn[i][j][0]-->Line_51 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_18 $$ for (int i = 0; i < rn.length; i++) -->Line_21 $$ if (r2p64 >= n)[ CD ]
Line_10 $$ final long r = rn[i][j][0]-->Line_51 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_9 $$ for (int j = 1; j < rn[i].length; j++) -->Line_11 $$ final long answer = rn[i][j][1][ CD ]
Line_49 $$ final long r = rn[i][j][0]-->Line_51 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_7 $$ for (int i = 0; i < rn.length; i++) -->Line_32 $$ for (int i = 0; i < rn.length; i++) [ FD ]
Line_2 $$ static void squareBenchmarks() -->Line_32 $$ for (int i = 0; i < rn.length; i++) [ CD ]
Line_50 $$ final long answer = rn[i][j][1]-->Line_54 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_34 $$ final BigInteger N = BigInteger.valueOf(n)-->Line_52 $$ final long s = R.modPow(TWO, N).longValue()[ FD ]
Line_11 $$ final long answer = rn[i][j][1]-->Line_40 $$ if (s != answer)[ FD ]
Line_39 $$ final long s = R.multiply(R).mod(N).longValue()-->Line_40 $$ if (s != answer)[ FD ]
Line_24 $$ final long r = rn[i][j][0]-->Line_38 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_40 $$ if (s != answer)-->Line_41 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ CD ]
Line_25 $$ final long answer = rn[i][j][1]-->Line_40 $$ if (s != answer)[ FD ]
Line_39 $$ final long s = R.multiply(R).mod(N).longValue()-->Line_53 $$ if (s != answer)[ FD ]
Line_26 $$ final long s = square(r, n, r2p64)-->Line_54 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_11 $$ final long answer = rn[i][j][1]-->Line_28 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_45 $$ for (int i = 0; i < rn.length; i++) -->Line_48 $$ for (int j = 1; j < rn[i].length; j++) [ CD ]
Line_11 $$ final long answer = rn[i][j][1]-->Line_27 $$ if (s != answer)[ FD ]
Line_11 $$ final long answer = rn[i][j][1]-->Line_13 $$ if (s != answer)[ FD ]
Line_9 $$ for (int j = 1; j < rn[i].length; j++) -->Line_48 $$ for (int j = 1; j < rn[i].length; j++) [ FD ]
Line_46 $$ final long n = rn[i][0][0]-->Line_47 $$ final BigInteger N = BigInteger.valueOf(n)[ FD ]
Line_9 $$ for (int j = 1; j < rn[i].length; j++) -->Line_23 $$ for (int j = 1; j < rn[i].length; j++) [ FD ]
Line_37 $$ final long answer = rn[i][j][1]-->Line_41 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_11 $$ final long answer = rn[i][j][1]-->Line_54 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_2 $$ static void squareBenchmarks() -->Line_17 $$ t.tick("square_slow")[ CD ]
Line_20 $$ long r2p64 = (0x4000000000000000L % n) << 1-->Line_22 $$ r2p64 -= n[ FD ]
Line_2 $$ static void squareBenchmarks() -->Line_31 $$ t.tick("square")[ CD ]
Line_8 $$ final long n = rn[i][0][0]-->Line_26 $$ final long s = square(r, n, r2p64)[ FD ]
Line_19 $$ final long n = rn[i][0][0]-->Line_22 $$ r2p64 -= n[ FD ]
Line_2 $$ static void squareBenchmarks() -->Line_7 $$ for (int i = 0; i < rn.length; i++) [ CD ]
Line_33 $$ final long n = rn[i][0][0]-->Line_34 $$ final BigInteger N = BigInteger.valueOf(n)[ FD ]
Line_48 $$ for (int j = 1; j < rn[i].length; j++) -->Line_52 $$ final long s = R.modPow(TWO, N).longValue()[ CD ]
Line_10 $$ final long r = rn[i][j][0]-->Line_26 $$ final long s = square(r, n, r2p64)[ FD ]
Line_18 $$ for (int i = 0; i < rn.length; i++) -->Line_45 $$ for (int i = 0; i < rn.length; i++) [ FD ]
Line_48 $$ for (int j = 1; j < rn[i].length; j++) -->Line_49 $$ final long r = rn[i][j][0][ CD ]
Line_23 $$ for (int j = 1; j < rn[i].length; j++) -->Line_24 $$ final long r = rn[i][j][0][ CD ]
Line_3 $$ final Timer t = new Timer(false)-->Line_4 $$ t.tick("squareBenchmarks(), MAX_SQRT=" + Modular.MAX_SQRT_LONG)[ FD ]
Line_7 $$ for (int i = 0; i < rn.length; i++) -->Line_9 $$ for (int j = 1; j < rn[i].length; j++) [ CD ]
Line_2 $$ static void squareBenchmarks() -->Line_5 $$ final long[][][] rn = generateRN(1000, 1000)[ CD ]
Line_13 $$ if (s != answer)-->Line_14 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ CD ]
Line_48 $$ for (int j = 1; j < rn[i].length; j++) -->Line_50 $$ final long answer = rn[i][j][1][ CD ]
Line_8 $$ final long n = rn[i][0][0]-->Line_12 $$ final long s = square_slow(r, n)[ FD ]
Line_12 $$ final long s = square_slow(r, n)-->Line_14 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_9 $$ for (int j = 1; j < rn[i].length; j++) -->Line_13 $$ if (s != answer)[ CD ]
Line_23 $$ for (int j = 1; j < rn[i].length; j++) -->Line_48 $$ for (int j = 1; j < rn[i].length; j++) [ FD ]
Line_39 $$ final long s = R.multiply(R).mod(N).longValue()-->Line_41 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
Line_2 $$ static void squareBenchmarks() -->Line_6 $$ t.tick("generateRN")[ CD ]
Line_51 $$ final BigInteger R = BigInteger.valueOf(r)-->Line_52 $$ final long s = R.modPow(TWO, N).longValue()[ FD ]
Line_8 $$ final long n = rn[i][0][0]-->Line_47 $$ final BigInteger N = BigInteger.valueOf(n)[ FD ]
Line_2 $$ static void squareBenchmarks() -->Line_57 $$ t.tick("R.modPow(TWO, N)")[ CD ]
Line_37 $$ final long answer = rn[i][j][1]-->Line_40 $$ if (s != answer)[ FD ]
Line_38 $$ final BigInteger R = BigInteger.valueOf(r)-->Line_39 $$ final long s = R.multiply(R).mod(N).longValue()[ FD ]
Line_20 $$ long r2p64 = (0x4000000000000000L % n) << 1-->Line_26 $$ final long s = square(r, n, r2p64)[ FD ]
Line_7 $$ for (int i = 0; i < rn.length; i++) -->Line_18 $$ for (int i = 0; i < rn.length; i++) [ FD ]
Line_39 $$ final long s = R.multiply(R).mod(N).longValue()-->Line_54 $$ assertEquals("r=" + r + ", n=" + n + ", answer=" + answer + " but s=" + s, answer, s)[ FD ]
