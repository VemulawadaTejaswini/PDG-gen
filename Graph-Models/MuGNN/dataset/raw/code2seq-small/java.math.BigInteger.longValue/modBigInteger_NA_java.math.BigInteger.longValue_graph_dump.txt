Line_4 $$ mask &= (e & 0xFFFF0000FFFF0000L & mask) == 0 ? 0x0000FFFF0000FFFFL : 0xFFFF0000FFFF0000L-->Line_7 $$ mask &= (e & 0xCCCCCCCCCCCCCCCCL & mask) == 0 ? 0x3333333333333333L : 0xCCCCCCCCCCCCCCCCL[ FD ]
Line_3 $$ long mask = (e & 0xFFFFFFFF00000000L) == 0 ? 0x00000000FFFFFFFFL : 0xFFFFFFFF00000000L-->Line_8 $$ mask &= (e & 0xAAAAAAAAAAAAAAAAL & mask) == 0 ? 0x5555555555555555L : 0xAAAAAAAAAAAAAAAAL[ FD ]
Line_5 $$ mask &= (e & 0xFF00FF00FF00FF00L & mask) == 0 ? 0x00FF00FF00FF00FFL : 0xFF00FF00FF00FF00L-->Line_8 $$ mask &= (e & 0xAAAAAAAAAAAAAAAAL & mask) == 0 ? 0x5555555555555555L : 0xAAAAAAAAAAAAAAAAL[ FD ]
Line_10 $$ long r = 2-->Line_22 $$ if (r >= n)[ FD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_8 $$ mask &= (e & 0xAAAAAAAAAAAAAAAAL & mask) == 0 ? 0x5555555555555555L : 0xAAAAAAAAAAAAAAAAL[ CD ]
Line_13 $$ r *= r-->Line_15 $$ r %= n[ FD ]
Line_18 $$ r = R.multiply(R).mod(N).longValue()-->Line_17 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_13 $$ r *= r-->Line_23 $$ r -= n[ FD ]
Line_10 $$ long r = 2-->Line_15 $$ r %= n[ FD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_4 $$ mask &= (e & 0xFFFF0000FFFF0000L & mask) == 0 ? 0x0000FFFF0000FFFFL : 0xFFFF0000FFFF0000L[ CD ]
Line_13 $$ r *= r-->Line_18 $$ r = R.multiply(R).mod(N).longValue()[ FD ]
Line_13 $$ r *= r-->Line_22 $$ if (r >= n)[ FD ]
Line_12 $$ if (r <= Modular.MAX_SQRT_LONG) -->Line_13 $$ r *= r[ CD ]
Line_20 $$ if ((e & mask) != 0) -->Line_22 $$ if (r >= n)[ CD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_15 $$ r %= n[ FD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_9 $$ final BigInteger N = BigInteger.valueOf(n)[ FD ]
Line_11 $$ for (mask >>= 1; mask > 0; mask >>= 1) -->Line_12 $$ if (r <= Modular.MAX_SQRT_LONG) [ CD ]
Line_3 $$ long mask = (e & 0xFFFFFFFF00000000L) == 0 ? 0x00000000FFFFFFFFL : 0xFFFFFFFF00000000L-->Line_6 $$ mask &= (e & 0xF0F0F0F0F0F0F0F0L & mask) == 0 ? 0x0F0F0F0F0F0F0F0FL : 0xF0F0F0F0F0F0F0F0L[ FD ]
Line_4 $$ mask &= (e & 0xFFFF0000FFFF0000L & mask) == 0 ? 0x0000FFFF0000FFFFL : 0xFFFF0000FFFF0000L-->Line_6 $$ mask &= (e & 0xF0F0F0F0F0F0F0F0L & mask) == 0 ? 0x0F0F0F0F0F0F0F0FL : 0xF0F0F0F0F0F0F0F0L[ FD ]
Line_3 $$ long mask = (e & 0xFFFFFFFF00000000L) == 0 ? 0x00000000FFFFFFFFL : 0xFFFFFFFF00000000L-->Line_5 $$ mask &= (e & 0xFF00FF00FF00FF00L & mask) == 0 ? 0x00FF00FF00FF00FFL : 0xFF00FF00FF00FF00L[ FD ]
Line_18 $$ r = R.multiply(R).mod(N).longValue()-->Line_23 $$ r -= n[ FD ]
Line_17 $$ final BigInteger R = BigInteger.valueOf(r)-->Line_18 $$ r = R.multiply(R).mod(N).longValue()[ FD ]
Line_21 $$ r <<= 1-->Line_14 $$ if (r >= n)[ FD ]
Line_4 $$ mask &= (e & 0xFFFF0000FFFF0000L & mask) == 0 ? 0x0000FFFF0000FFFFL : 0xFFFF0000FFFF0000L-->Line_8 $$ mask &= (e & 0xAAAAAAAAAAAAAAAAL & mask) == 0 ? 0x5555555555555555L : 0xAAAAAAAAAAAAAAAAL[ FD ]
Line_23 $$ r -= n-->Line_12 $$ if (r <= Modular.MAX_SQRT_LONG) [ FD ]
Line_21 $$ r <<= 1-->Line_13 $$ r *= r[ FD ]
Line_10 $$ long r = 2-->Line_21 $$ r <<= 1[ FD ]
Line_23 $$ r -= n-->Line_13 $$ r *= r[ FD ]
Line_23 $$ r -= n-->Line_17 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_22 $$ if (r >= n)[ FD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_23 $$ r -= n[ FD ]
Line_15 $$ r %= n-->Line_12 $$ if (r <= Modular.MAX_SQRT_LONG) [ FD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_7 $$ mask &= (e & 0xCCCCCCCCCCCCCCCCL & mask) == 0 ? 0x3333333333333333L : 0xCCCCCCCCCCCCCCCCL[ CD ]
Line_18 $$ r = R.multiply(R).mod(N).longValue()-->Line_21 $$ r <<= 1[ FD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_11 $$ for (mask >>= 1; mask > 0; mask >>= 1) [ CD ]
Line_15 $$ r %= n-->Line_21 $$ r <<= 1[ FD ]
Line_3 $$ long mask = (e & 0xFFFFFFFF00000000L) == 0 ? 0x00000000FFFFFFFFL : 0xFFFFFFFF00000000L-->Line_4 $$ mask &= (e & 0xFFFF0000FFFF0000L & mask) == 0 ? 0x0000FFFF0000FFFFL : 0xFFFF0000FFFF0000L[ FD ]
Line_10 $$ long r = 2-->Line_18 $$ r = R.multiply(R).mod(N).longValue()[ FD ]
Line_14 $$ if (r >= n)-->Line_15 $$ r %= n[ CD ]
Line_13 $$ r *= r-->Line_17 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_3 $$ long mask = (e & 0xFFFFFFFF00000000L) == 0 ? 0x00000000FFFFFFFFL : 0xFFFFFFFF00000000L[ CD ]
Line_15 $$ r %= n-->Line_23 $$ r -= n[ FD ]
Line_23 $$ r -= n-->Line_22 $$ if (r >= n)[ FD ]
Line_13 $$ r *= r-->Line_12 $$ if (r <= Modular.MAX_SQRT_LONG) [ FD ]
Line_18 $$ r = R.multiply(R).mod(N).longValue()-->Line_22 $$ if (r >= n)[ FD ]
Line_21 $$ r <<= 1-->Line_23 $$ r -= n[ FD ]
Line_10 $$ long r = 2-->Line_17 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_10 $$ long r = 2-->Line_12 $$ if (r <= Modular.MAX_SQRT_LONG) [ FD ]
Line_7 $$ mask &= (e & 0xCCCCCCCCCCCCCCCCL & mask) == 0 ? 0x3333333333333333L : 0xCCCCCCCCCCCCCCCCL-->Line_11 $$ for (mask >>= 1; mask > 0; mask >>= 1) [ FD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_5 $$ mask &= (e & 0xFF00FF00FF00FF00L & mask) == 0 ? 0x00FF00FF00FF00FFL : 0xFF00FF00FF00FF00L[ CD ]
Line_15 $$ r %= n-->Line_22 $$ if (r >= n)[ FD ]
Line_15 $$ r %= n-->Line_17 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_4 $$ mask &= (e & 0xFFFF0000FFFF0000L & mask) == 0 ? 0x0000FFFF0000FFFFL : 0xFFFF0000FFFF0000L-->Line_11 $$ for (mask >>= 1; mask > 0; mask >>= 1) [ FD ]
Line_11 $$ for (mask >>= 1; mask > 0; mask >>= 1) -->Line_20 $$ if ((e & mask) != 0) [ CD ]
Line_7 $$ mask &= (e & 0xCCCCCCCCCCCCCCCCL & mask) == 0 ? 0x3333333333333333L : 0xCCCCCCCCCCCCCCCCL-->Line_8 $$ mask &= (e & 0xAAAAAAAAAAAAAAAAL & mask) == 0 ? 0x5555555555555555L : 0xAAAAAAAAAAAAAAAAL[ FD ]
Line_12 $$ if (r <= Modular.MAX_SQRT_LONG) -->Line_14 $$ if (r >= n)[ CD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_10 $$ long r = 2[ CD ]
Line_6 $$ mask &= (e & 0xF0F0F0F0F0F0F0F0L & mask) == 0 ? 0x0F0F0F0F0F0F0F0FL : 0xF0F0F0F0F0F0F0F0L-->Line_8 $$ mask &= (e & 0xAAAAAAAAAAAAAAAAL & mask) == 0 ? 0x5555555555555555L : 0xAAAAAAAAAAAAAAAAL[ FD ]
Line_10 $$ long r = 2-->Line_23 $$ r -= n[ FD ]
Line_21 $$ r <<= 1-->Line_22 $$ if (r >= n)[ FD ]
Line_20 $$ if ((e & mask) != 0) -->Line_21 $$ r <<= 1[ CD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_9 $$ final BigInteger N = BigInteger.valueOf(n)[ CD ]
Line_21 $$ r <<= 1-->Line_17 $$ final BigInteger R = BigInteger.valueOf(r)[ FD ]
Line_3 $$ long mask = (e & 0xFFFFFFFF00000000L) == 0 ? 0x00000000FFFFFFFFL : 0xFFFFFFFF00000000L-->Line_11 $$ for (mask >>= 1; mask > 0; mask >>= 1) [ FD ]
Line_15 $$ r %= n-->Line_18 $$ r = R.multiply(R).mod(N).longValue()[ FD ]
Line_3 $$ long mask = (e & 0xFFFFFFFF00000000L) == 0 ? 0x00000000FFFFFFFFL : 0xFFFFFFFF00000000L-->Line_7 $$ mask &= (e & 0xCCCCCCCCCCCCCCCCL & mask) == 0 ? 0x3333333333333333L : 0xCCCCCCCCCCCCCCCCL[ FD ]
Line_5 $$ mask &= (e & 0xFF00FF00FF00FF00L & mask) == 0 ? 0x00FF00FF00FF00FFL : 0xFF00FF00FF00FF00L-->Line_7 $$ mask &= (e & 0xCCCCCCCCCCCCCCCCL & mask) == 0 ? 0x3333333333333333L : 0xCCCCCCCCCCCCCCCCL[ FD ]
Line_23 $$ r -= n-->Line_14 $$ if (r >= n)[ FD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_6 $$ mask &= (e & 0xF0F0F0F0F0F0F0F0L & mask) == 0 ? 0x0F0F0F0F0F0F0F0FL : 0xF0F0F0F0F0F0F0F0L[ CD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_26 $$ return r[ CD ]
Line_10 $$ long r = 2-->Line_14 $$ if (r >= n)[ FD ]
Line_5 $$ mask &= (e & 0xFF00FF00FF00FF00L & mask) == 0 ? 0x00FF00FF00FF00FFL : 0xFF00FF00FF00FF00L-->Line_11 $$ for (mask >>= 1; mask > 0; mask >>= 1) [ FD ]
Line_5 $$ mask &= (e & 0xFF00FF00FF00FF00L & mask) == 0 ? 0x00FF00FF00FF00FFL : 0xFF00FF00FF00FF00L-->Line_6 $$ mask &= (e & 0xF0F0F0F0F0F0F0F0L & mask) == 0 ? 0x0F0F0F0F0F0F0F0FL : 0xF0F0F0F0F0F0F0F0L[ FD ]
Line_6 $$ mask &= (e & 0xF0F0F0F0F0F0F0F0L & mask) == 0 ? 0x0F0F0F0F0F0F0F0FL : 0xF0F0F0F0F0F0F0F0L-->Line_11 $$ for (mask >>= 1; mask > 0; mask >>= 1) [ FD ]
Line_22 $$ if (r >= n)-->Line_23 $$ r -= n[ CD ]
Line_9 $$ final BigInteger N = BigInteger.valueOf(n)-->Line_18 $$ r = R.multiply(R).mod(N).longValue()[ FD ]
Line_15 $$ r %= n-->Line_13 $$ r *= r[ FD ]
Line_2 $$ static long modBigInteger(final long e, final long n) -->Line_14 $$ if (r >= n)[ FD ]
Line_18 $$ r = R.multiply(R).mod(N).longValue()-->Line_12 $$ if (r <= Modular.MAX_SQRT_LONG) [ FD ]
Line_15 $$ r %= n-->Line_14 $$ if (r >= n)[ FD ]
Line_10 $$ long r = 2-->Line_13 $$ r *= r[ FD ]
Line_12 $$ if (r <= Modular.MAX_SQRT_LONG) -->Line_17 $$ final BigInteger R = BigInteger.valueOf(r)[ CD ]
Line_4 $$ mask &= (e & 0xFFFF0000FFFF0000L & mask) == 0 ? 0x0000FFFF0000FFFFL : 0xFFFF0000FFFF0000L-->Line_5 $$ mask &= (e & 0xFF00FF00FF00FF00L & mask) == 0 ? 0x00FF00FF00FF00FFL : 0xFF00FF00FF00FF00L[ FD ]
Line_21 $$ r <<= 1-->Line_12 $$ if (r <= Modular.MAX_SQRT_LONG) [ FD ]
Line_8 $$ mask &= (e & 0xAAAAAAAAAAAAAAAAL & mask) == 0 ? 0x5555555555555555L : 0xAAAAAAAAAAAAAAAAL-->Line_11 $$ for (mask >>= 1; mask > 0; mask >>= 1) [ FD ]
Line_18 $$ r = R.multiply(R).mod(N).longValue()-->Line_14 $$ if (r >= n)[ FD ]
Line_12 $$ if (r <= Modular.MAX_SQRT_LONG) -->Line_18 $$ r = R.multiply(R).mod(N).longValue()[ CD ]
Line_6 $$ mask &= (e & 0xF0F0F0F0F0F0F0F0L & mask) == 0 ? 0x0F0F0F0F0F0F0F0FL : 0xF0F0F0F0F0F0F0F0L-->Line_7 $$ mask &= (e & 0xCCCCCCCCCCCCCCCCL & mask) == 0 ? 0x3333333333333333L : 0xCCCCCCCCCCCCCCCCL[ FD ]
Line_13 $$ r *= r-->Line_14 $$ if (r >= n)[ FD ]
Line_13 $$ r *= r-->Line_21 $$ r <<= 1[ FD ]
Line_18 $$ r = R.multiply(R).mod(N).longValue()-->Line_13 $$ r *= r[ FD ]
