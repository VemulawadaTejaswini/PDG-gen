Line_4 $$ final BigInteger bi = ll.toBigInteger()-->Line_11 $$ final String s = String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= " + bi.toString(16) + "\n", a, b)[ FD ]
Line_7 $$ final long expected = bi.shiftRight(i).longValue() & MASK-->Line_9 $$ assertEquals(s, expected, result)[ FD ]
Line_2 $$ static void verifyRightShift(long a, long b) -->Line_11 $$ final String s = String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= " + bi.toString(16) + "\n", a, b)[ FD ]
Line_3 $$ final LongLong ll = new LongLong().set(a, b)-->Line_6 $$ final long result = ll.shiftRight(i) & MASK[ FD ]
Line_5 $$ for (int i = 0; i < LongLong.SIZE >> 1; i++) -->Line_9 $$ assertEquals(s, expected, result)[ CD ]
Line_5 $$ for (int i = 0; i < LongLong.SIZE >> 1; i++) -->Line_6 $$ final long result = ll.shiftRight(i) & MASK[ CD ]
Line_2 $$ static void verifyRightShift(long a, long b) -->Line_12 $$ assertEquals(s, bi, ll.toBigInteger())[ CD ]
Line_3 $$ final LongLong ll = new LongLong().set(a, b)-->Line_4 $$ final BigInteger bi = ll.toBigInteger()[ FD ]
Line_11 $$ final String s = String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= " + bi.toString(16) + "\n", a, b)-->Line_12 $$ assertEquals(s, bi, ll.toBigInteger())[ FD ]
Line_4 $$ final BigInteger bi = ll.toBigInteger()-->Line_7 $$ final long expected = bi.shiftRight(i).longValue() & MASK[ FD ]
Line_2 $$ static void verifyRightShift(long a, long b) -->Line_11 $$ final String s = String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= " + bi.toString(16) + "\n", a, b)[ CD ]
Line_8 $$ final String s = String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= " + bi.toString(16) + "\n", a, b)-->Line_9 $$ assertEquals(s, expected, result)[ FD ]
Line_8 $$ final String s = String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= " + bi.toString(16) + "\n", a, b)-->Line_12 $$ assertEquals(s, bi, ll.toBigInteger())[ FD ]
Line_4 $$ final BigInteger bi = ll.toBigInteger()-->Line_12 $$ assertEquals(s, bi, ll.toBigInteger())[ FD ]
Line_4 $$ final BigInteger bi = ll.toBigInteger()-->Line_8 $$ final String s = String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= " + bi.toString(16) + "\n", a, b)[ FD ]
Line_5 $$ for (int i = 0; i < LongLong.SIZE >> 1; i++) -->Line_6 $$ final long result = ll.shiftRight(i) & MASK[ FD ]
Line_2 $$ static void verifyRightShift(long a, long b) -->Line_5 $$ for (int i = 0; i < LongLong.SIZE >> 1; i++) [ CD ]
Line_6 $$ final long result = ll.shiftRight(i) & MASK-->Line_9 $$ assertEquals(s, expected, result)[ FD ]
Line_5 $$ for (int i = 0; i < LongLong.SIZE >> 1; i++) -->Line_7 $$ final long expected = bi.shiftRight(i).longValue() & MASK[ CD ]
Line_5 $$ for (int i = 0; i < LongLong.SIZE >> 1; i++) -->Line_8 $$ final String s = String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= " + bi.toString(16) + "\n", a, b)[ CD ]
Line_2 $$ static void verifyRightShift(long a, long b) -->Line_3 $$ final LongLong ll = new LongLong().set(a, b)[ CD ]
Line_2 $$ static void verifyRightShift(long a, long b) -->Line_8 $$ final String s = String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= " + bi.toString(16) + "\n", a, b)[ FD ]
Line_2 $$ static void verifyRightShift(long a, long b) -->Line_4 $$ final BigInteger bi = ll.toBigInteger()[ CD ]
Line_5 $$ for (int i = 0; i < LongLong.SIZE >> 1; i++) -->Line_7 $$ final long expected = bi.shiftRight(i).longValue() & MASK[ FD ]
Line_3 $$ final LongLong ll = new LongLong().set(a, b)-->Line_12 $$ assertEquals(s, bi, ll.toBigInteger())[ FD ]
Line_2 $$ static void verifyRightShift(long a, long b) -->Line_3 $$ final LongLong ll = new LongLong().set(a, b)[ FD ]
