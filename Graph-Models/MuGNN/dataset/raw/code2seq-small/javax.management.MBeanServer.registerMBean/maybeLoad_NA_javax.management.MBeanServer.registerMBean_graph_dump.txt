Line_13 $$ Class<?> xsltProcessorClass = Class.forName("mx4j.tools.adaptor.http.XSLTProcessor")-->Line_14 $$ Object xsltProcessor = xsltProcessorClass.newInstance()[ FD ]
Line_14 $$ Object xsltProcessor = xsltProcessorClass.newInstance()-->Line_15 $$ httpAdaptorClass.getMethod("setProcessor", Class.forName("mx4j.tools.adaptor.http.ProcessorMBean")).invoke(httpAdaptor, xsltProcessor)[ FD ]
Line_14 $$ Object xsltProcessor = xsltProcessorClass.newInstance()-->Line_16 $$ mbs.registerMBean(xsltProcessor, processorName)[ FD ]
Line_2 $$ public static boolean maybeLoad() -->Line_25 $$ return false[ CD ]
Line_7 $$ Class<?> httpAdaptorClass = Class.forName("mx4j.tools.adaptor.http.HttpAdaptor")-->Line_15 $$ httpAdaptorClass.getMethod("setProcessor", Class.forName("mx4j.tools.adaptor.http.ProcessorMBean")).invoke(httpAdaptor, xsltProcessor)[ FD ]
Line_5 $$ MBeanServer mbs = ManagementFactory.getPlatformMBeanServer()-->Line_12 $$ mbs.registerMBean(httpAdaptor, httpName)[ FD ]
Line_5 $$ MBeanServer mbs = ManagementFactory.getPlatformMBeanServer()-->Line_16 $$ mbs.registerMBean(xsltProcessor, processorName)[ FD ]
Line_7 $$ Class<?> httpAdaptorClass = Class.forName("mx4j.tools.adaptor.http.HttpAdaptor")-->Line_9 $$ httpAdaptorClass.getMethod("setHost", String.class).invoke(httpAdaptor, getAddress())[ FD ]
Line_8 $$ Object httpAdaptor = httpAdaptorClass.newInstance()-->Line_12 $$ mbs.registerMBean(httpAdaptor, httpName)[ FD ]
Line_6 $$ ObjectName processorName = new ObjectName("Server:name=XSLTProcessor")-->Line_16 $$ mbs.registerMBean(xsltProcessor, processorName)[ FD ]
Line_11 $$ ObjectName httpName = new ObjectName("system:name=http")-->Line_12 $$ mbs.registerMBean(httpAdaptor, httpName)[ FD ]
Line_8 $$ Object httpAdaptor = httpAdaptorClass.newInstance()-->Line_15 $$ httpAdaptorClass.getMethod("setProcessor", Class.forName("mx4j.tools.adaptor.http.ProcessorMBean")).invoke(httpAdaptor, xsltProcessor)[ FD ]
Line_8 $$ Object httpAdaptor = httpAdaptorClass.newInstance()-->Line_17 $$ httpAdaptorClass.getMethod("start").invoke(httpAdaptor)[ FD ]
Line_7 $$ Class<?> httpAdaptorClass = Class.forName("mx4j.tools.adaptor.http.HttpAdaptor")-->Line_17 $$ httpAdaptorClass.getMethod("start").invoke(httpAdaptor)[ FD ]
Line_8 $$ Object httpAdaptor = httpAdaptorClass.newInstance()-->Line_9 $$ httpAdaptorClass.getMethod("setHost", String.class).invoke(httpAdaptor, getAddress())[ FD ]
Line_7 $$ Class<?> httpAdaptorClass = Class.forName("mx4j.tools.adaptor.http.HttpAdaptor")-->Line_10 $$ httpAdaptorClass.getMethod("setPort", Integer.TYPE).invoke(httpAdaptor, getPort())[ FD ]
Line_7 $$ Class<?> httpAdaptorClass = Class.forName("mx4j.tools.adaptor.http.HttpAdaptor")-->Line_8 $$ Object httpAdaptor = httpAdaptorClass.newInstance()[ FD ]
Line_8 $$ Object httpAdaptor = httpAdaptorClass.newInstance()-->Line_10 $$ httpAdaptorClass.getMethod("setPort", Integer.TYPE).invoke(httpAdaptor, getPort())[ FD ]
