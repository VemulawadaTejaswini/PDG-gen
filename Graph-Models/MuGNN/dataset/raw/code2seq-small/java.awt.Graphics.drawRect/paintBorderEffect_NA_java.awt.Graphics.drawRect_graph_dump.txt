Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_67 $$ drawLine(g, start, trailingTopY, trailingRanges.get(i - 1), trailingTopY, rounded)[ FD ]
Line_38 $$ float start = 0-->Line_72 $$ if (start > 0) [ FD ]
Line_43 $$ start = leadingRanges.get(i)-->Line_50 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_6 $$ int endLine = myDocument.getLineNumber(endOffset)[ CD ]
Line_72 $$ if (start > 0) -->Line_77 $$ drawLine(g, start, trailingTopY, 0, leadingBottomY + 1, rounded)[ CD ]
Line_38 $$ float start = 0-->Line_48 $$ drawLine(g, start, leadingBottomY + (i == 0 ? adjustY : 0), start, leadingTopY, rounded)[ FD ]
Line_60 $$ for (int i = trailingRanges.size() - 2; i >= 0; i -= 2) -->Line_63 $$ drawLine(g, end, trailingTopY + (i == 0 ? adjustY : 0), end, trailingBottomY, rounded)[ CD ]
Line_37 $$ int trailingBottomY = trailingTopY + lineHeight-->Line_64 $$ drawLine(g, end, trailingBottomY, start, trailingBottomY, rounded)[ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_75 $$ drawLine(g, 0, trailingTopY - 1, 0, leadingBottomY + 1, rounded)[ FD ]
Line_82 $$ if (lastX < targetX) -->Line_86 $$ drawLine(g, lastX, leadingBottomY, targetX, leadingBottomY, rounded)[ CD ]
Line_32 $$ int maxWidth = Math.max(myView.getMaxWidthInLineRange(startPosition.line, endPosition.line - 1) - 1, (int) trailingRanges.get(trailingRanges.size() - 1))-->Line_54 $$ end = Math.max(end, maxWidth)[ FD ]
Line_16 $$ if (startPosition.line == endPosition.line) -->Line_29 $$ TFloatArrayList leadingRanges = adjustedLogicalRangeToVisualRanges(startOffset, myView.visualPositionToOffset(new VisualPosition(startPosition.line, Integer.MAX_VALUE, true)))[ CD ]
Line_38 $$ float start = 0-->Line_46 $$ drawLine(g, leadingRanges.get(i - 1), leadingBottomY, start, leadingBottomY, rounded)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_63 $$ drawLine(g, end, trailingTopY + (i == 0 ? adjustY : 0), end, trailingBottomY, rounded)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_50 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_16 $$ if (startPosition.line == endPosition.line) -->Line_18 $$ TFloatArrayList ranges = adjustedLogicalRangeToVisualRanges(startOffset, endOffset)[ CD ]
Line_30 $$ TFloatArrayList trailingRanges = adjustedLogicalRangeToVisualRanges(myView.visualPositionToOffset(new VisualPosition(endPosition.line, 0)), endOffset)-->Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) [ FD ]
Line_34 $$ int leadingTopY = myView.visualLineToY(startPosition.line)-->Line_56 $$ drawLine(g, end, leadingTopY, end, trailingTopY - 1, rounded)[ FD ]
Line_29 $$ TFloatArrayList leadingRanges = adjustedLogicalRangeToVisualRanges(startOffset, myView.visualPositionToOffset(new VisualPosition(startPosition.line, Integer.MAX_VALUE, true)))-->Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) [ FD ]
Line_43 $$ start = leadingRanges.get(i)-->Line_55 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) -->Line_60 $$ for (int i = trailingRanges.size() - 2; i >= 0; i -= 2) [ FD ]
Line_30 $$ TFloatArrayList trailingRanges = adjustedLogicalRangeToVisualRanges(myView.visualPositionToOffset(new VisualPosition(endPosition.line, 0)), endOffset)-->Line_62 $$ end = trailingRanges.get(i + 1)[ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_74 $$ drawLine(g, start, trailingTopY - 1, 0, trailingTopY - 1, rounded)[ FD ]
Line_81 $$ targetX = leadingRanges.get(0)-->Line_83 $$ drawLine(g, lastX, leadingBottomY + 1, targetX, leadingBottomY + 1, rounded)[ FD ]
Line_36 $$ int trailingTopY = myView.visualLineToY(endPosition.line)-->Line_73 $$ drawLine(g, start, trailingTopY, start, trailingTopY - 1, rounded)[ FD ]
Line_43 $$ start = leadingRanges.get(i)-->Line_72 $$ if (start > 0) [ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_56 $$ drawLine(g, end, leadingTopY, end, trailingTopY - 1, rounded)[ FD ]
Line_81 $$ targetX = leadingRanges.get(0)-->Line_82 $$ if (lastX < targetX) [ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_39 $$ float end = 0[ CD ]
Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) -->Line_43 $$ start = leadingRanges.get(i)[ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_14 $$ VisualPosition startPosition = myView.offsetToVisualPosition(startOffset, true, false)[ CD ]
Line_43 $$ start = leadingRanges.get(i)-->Line_61 $$ start = trailingRanges.get(i)[ FD ]
Line_16 $$ if (startPosition.line == endPosition.line) -->Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) [ CD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) [ CD ]
Line_19 $$ for (int i = 0; i < ranges.size() - 1; i += 2) -->Line_20 $$ int startX = (int) ranges.get(i)[ FD ]
Line_39 $$ float end = 0-->Line_63 $$ drawLine(g, end, trailingTopY + (i == 0 ? adjustY : 0), end, trailingBottomY, rounded)[ FD ]
Line_54 $$ end = Math.max(end, maxWidth)-->Line_64 $$ drawLine(g, end, trailingBottomY, start, trailingBottomY, rounded)[ FD ]
Line_36 $$ int trailingTopY = myView.visualLineToY(endPosition.line)-->Line_67 $$ drawLine(g, start, trailingTopY, trailingRanges.get(i - 1), trailingTopY, rounded)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_85 $$ drawLine(g, lastX, leadingBottomY + 1, lastX, leadingBottomY, rounded)[ FD ]
Line_60 $$ for (int i = trailingRanges.size() - 2; i >= 0; i -= 2) -->Line_66 $$ if (i > 0) [ FD ]
Line_43 $$ start = leadingRanges.get(i)-->Line_65 $$ drawLine(g, start, trailingBottomY, start, trailingTopY, rounded)[ FD ]
Line_61 $$ start = trailingRanges.get(i)-->Line_77 $$ drawLine(g, start, trailingTopY, 0, leadingBottomY + 1, rounded)[ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_55 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_54 $$ end = Math.max(end, maxWidth)[ CD ]
Line_7 $$ if (startLine + 1 == endLine && startOffset == myDocument.getLineStartOffset(startLine) && endOffset == myDocument.getLineStartOffset(endLine)) -->Line_9 $$ endOffset = myDocument.getLineEndOffset(endLine)[ CD ]
Line_29 $$ TFloatArrayList leadingRanges = adjustedLogicalRangeToVisualRanges(startOffset, myView.visualPositionToOffset(new VisualPosition(startPosition.line, Integer.MAX_VALUE, true)))-->Line_49 $$ if ((i + 2) < leadingRanges.size()) [ FD ]
Line_39 $$ float end = 0-->Line_54 $$ end = Math.max(end, maxWidth)[ FD ]
Line_38 $$ float start = 0-->Line_43 $$ start = leadingRanges.get(i)[ FD ]
Line_17 $$ int y = myView.visualLineToY(startPosition.line)-->Line_25 $$ g.drawRect(startX, y, endX - startX, lineHeight)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_25 $$ g.drawRect(startX, y, endX - startX, lineHeight)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_34 $$ int leadingTopY = myView.visualLineToY(startPosition.line)[ CD ]
Line_49 $$ if ((i + 2) < leadingRanges.size()) -->Line_50 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ CD ]
Line_30 $$ TFloatArrayList trailingRanges = adjustedLogicalRangeToVisualRanges(myView.visualPositionToOffset(new VisualPosition(endPosition.line, 0)), endOffset)-->Line_32 $$ int maxWidth = Math.max(myView.getMaxWidthInLineRange(startPosition.line, endPosition.line - 1) - 1, (int) trailingRanges.get(trailingRanges.size() - 1))[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_46 $$ drawLine(g, leadingRanges.get(i - 1), leadingBottomY, start, leadingBottomY, rounded)[ FD ]
Line_61 $$ start = trailingRanges.get(i)-->Line_72 $$ if (start > 0) [ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_81 $$ targetX = leadingRanges.get(0)[ CD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_55 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ CD ]
Line_35 $$ int leadingBottomY = leadingTopY + lineHeight-->Line_85 $$ drawLine(g, lastX, leadingBottomY + 1, lastX, leadingBottomY, rounded)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_29 $$ TFloatArrayList leadingRanges = adjustedLogicalRangeToVisualRanges(startOffset, myView.visualPositionToOffset(new VisualPosition(startPosition.line, Integer.MAX_VALUE, true)))[ FD ]
Line_38 $$ float start = 0-->Line_67 $$ drawLine(g, start, trailingTopY, trailingRanges.get(i - 1), trailingTopY, rounded)[ FD ]
Line_18 $$ TFloatArrayList ranges = adjustedLogicalRangeToVisualRanges(startOffset, endOffset)-->Line_19 $$ for (int i = 0; i < ranges.size() - 1; i += 2) [ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_6 $$ int endLine = myDocument.getLineNumber(endOffset)[ FD ]
Line_34 $$ int leadingTopY = myView.visualLineToY(startPosition.line)-->Line_50 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_50 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_5 $$ int startLine = myDocument.getLineNumber(startOffset)[ FD ]
Line_5 $$ int startLine = myDocument.getLineNumber(startOffset)-->Line_7 $$ if (startLine + 1 == endLine && startOffset == myDocument.getLineStartOffset(startLine) && endOffset == myDocument.getLineStartOffset(endLine)) [ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_15 $$ VisualPosition endPosition = myView.offsetToVisualPosition(endOffset, false, true)[ CD ]
Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) -->Line_45 $$ if (i > 0) [ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_5 $$ int startLine = myDocument.getLineNumber(startOffset)[ CD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_56 $$ drawLine(g, end, leadingTopY, end, trailingTopY - 1, rounded)[ FD ]
Line_60 $$ for (int i = trailingRanges.size() - 2; i >= 0; i -= 2) -->Line_64 $$ drawLine(g, end, trailingBottomY, start, trailingBottomY, rounded)[ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_77 $$ drawLine(g, start, trailingTopY, 0, leadingBottomY + 1, rounded)[ FD ]
Line_22 $$ if (rounded) -->Line_25 $$ g.drawRect(startX, y, endX - startX, lineHeight)[ CD ]
Line_29 $$ TFloatArrayList leadingRanges = adjustedLogicalRangeToVisualRanges(startOffset, myView.visualPositionToOffset(new VisualPosition(startPosition.line, Integer.MAX_VALUE, true)))-->Line_46 $$ drawLine(g, leadingRanges.get(i - 1), leadingBottomY, start, leadingBottomY, rounded)[ FD ]
Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) -->Line_61 $$ start = trailingRanges.get(i)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_40 $$ float leftGap = leadingRanges.get(0) - (containsInnerLines ? 0 : trailingRanges.get(0))[ CD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_58 $$ drawLine(g, end, trailingTopY - 1, targetX, trailingTopY - 1, rounded)[ CD ]
Line_37 $$ int trailingBottomY = trailingTopY + lineHeight-->Line_65 $$ drawLine(g, start, trailingBottomY, start, trailingTopY, rounded)[ FD ]
Line_38 $$ float start = 0-->Line_77 $$ drawLine(g, start, trailingTopY, 0, leadingBottomY + 1, rounded)[ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_86 $$ drawLine(g, lastX, leadingBottomY, targetX, leadingBottomY, rounded)[ FD ]
Line_38 $$ float start = 0-->Line_65 $$ drawLine(g, start, trailingBottomY, start, trailingTopY, rounded)[ FD ]
Line_54 $$ end = Math.max(end, maxWidth)-->Line_55 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_19 $$ for (int i = 0; i < ranges.size() - 1; i += 2) -->Line_21 $$ int endX = (int) ranges.get(i + 1)[ CD ]
Line_70 $$ float lastX = start-->Line_86 $$ drawLine(g, lastX, leadingBottomY, targetX, leadingBottomY, rounded)[ FD ]
Line_44 $$ end = leadingRanges.get(i + 1)-->Line_54 $$ end = Math.max(end, maxWidth)[ FD ]
Line_44 $$ end = leadingRanges.get(i + 1)-->Line_62 $$ end = trailingRanges.get(i + 1)[ FD ]
Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) -->Line_66 $$ if (i > 0) [ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_51 $$ drawLine(g, end, leadingTopY, end, leadingBottomY, rounded)[ FD ]
Line_57 $$ float targetX = trailingRanges.get(trailingRanges.size() - 1)-->Line_58 $$ drawLine(g, end, trailingTopY - 1, targetX, trailingTopY - 1, rounded)[ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_77 $$ drawLine(g, start, trailingTopY, 0, leadingBottomY + 1, rounded)[ FD ]
Line_71 $$ if (containsInnerLines) -->Line_72 $$ if (start > 0) [ CD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_58 $$ drawLine(g, end, trailingTopY - 1, targetX, trailingTopY - 1, rounded)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_13 $$ g.setColor(attributes.getEffectColor())[ FD ]
Line_12 $$ int lineHeight = myView.getLineHeight() - 1-->Line_25 $$ g.drawRect(startX, y, endX - startX, lineHeight)[ FD ]
Line_30 $$ TFloatArrayList trailingRanges = adjustedLogicalRangeToVisualRanges(myView.visualPositionToOffset(new VisualPosition(endPosition.line, 0)), endOffset)-->Line_57 $$ float targetX = trailingRanges.get(trailingRanges.size() - 1)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_67 $$ drawLine(g, start, trailingTopY, trailingRanges.get(i - 1), trailingTopY, rounded)[ FD ]
Line_62 $$ end = trailingRanges.get(i + 1)-->Line_64 $$ drawLine(g, end, trailingBottomY, start, trailingBottomY, rounded)[ FD ]
Line_44 $$ end = leadingRanges.get(i + 1)-->Line_58 $$ drawLine(g, end, trailingTopY - 1, targetX, trailingTopY - 1, rounded)[ FD ]
Line_43 $$ start = leadingRanges.get(i)-->Line_48 $$ drawLine(g, start, leadingBottomY + (i == 0 ? adjustY : 0), start, leadingTopY, rounded)[ FD ]
Line_61 $$ start = trailingRanges.get(i)-->Line_65 $$ drawLine(g, start, trailingBottomY, start, trailingTopY, rounded)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_70 $$ float lastX = start[ CD ]
Line_79 $$ lastX = 0-->Line_82 $$ if (lastX < targetX) [ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_83 $$ drawLine(g, lastX, leadingBottomY + 1, targetX, leadingBottomY + 1, rounded)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_82 $$ if (lastX < targetX) [ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_86 $$ drawLine(g, lastX, leadingBottomY, targetX, leadingBottomY, rounded)[ FD ]
Line_9 $$ endOffset = myDocument.getLineEndOffset(endLine)-->Line_15 $$ VisualPosition endPosition = myView.offsetToVisualPosition(endOffset, false, true)[ FD ]
Line_16 $$ if (startPosition.line == endPosition.line) -->Line_19 $$ for (int i = 0; i < ranges.size() - 1; i += 2) [ CD ]
Line_9 $$ endOffset = myDocument.getLineEndOffset(endLine)-->Line_18 $$ TFloatArrayList ranges = adjustedLogicalRangeToVisualRanges(startOffset, endOffset)[ FD ]
Line_60 $$ for (int i = trailingRanges.size() - 2; i >= 0; i -= 2) -->Line_61 $$ start = trailingRanges.get(i)[ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX[ CD ]
Line_35 $$ int leadingBottomY = leadingTopY + lineHeight-->Line_46 $$ drawLine(g, leadingRanges.get(i - 1), leadingBottomY, start, leadingBottomY, rounded)[ FD ]
Line_60 $$ for (int i = trailingRanges.size() - 2; i >= 0; i -= 2) -->Line_62 $$ end = trailingRanges.get(i + 1)[ CD ]
Line_39 $$ float end = 0-->Line_62 $$ end = trailingRanges.get(i + 1)[ FD ]
Line_29 $$ TFloatArrayList leadingRanges = adjustedLogicalRangeToVisualRanges(startOffset, myView.visualPositionToOffset(new VisualPosition(startPosition.line, Integer.MAX_VALUE, true)))-->Line_81 $$ targetX = leadingRanges.get(0)[ FD ]
Line_71 $$ if (containsInnerLines) -->Line_79 $$ lastX = 0[ CD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_65 $$ drawLine(g, start, trailingBottomY, start, trailingTopY, rounded)[ FD ]
Line_70 $$ float lastX = start-->Line_83 $$ drawLine(g, lastX, leadingBottomY + 1, targetX, leadingBottomY + 1, rounded)[ FD ]
Line_29 $$ TFloatArrayList leadingRanges = adjustedLogicalRangeToVisualRanges(startOffset, myView.visualPositionToOffset(new VisualPosition(startPosition.line, Integer.MAX_VALUE, true)))-->Line_43 $$ start = leadingRanges.get(i)[ FD ]
Line_54 $$ end = Math.max(end, maxWidth)-->Line_56 $$ drawLine(g, end, leadingTopY, end, trailingTopY - 1, rounded)[ FD ]
Line_61 $$ start = trailingRanges.get(i)-->Line_73 $$ drawLine(g, start, trailingTopY, start, trailingTopY - 1, rounded)[ FD ]
Line_34 $$ int leadingTopY = myView.visualLineToY(startPosition.line)-->Line_55 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) -->Line_45 $$ if (i > 0) [ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_75 $$ drawLine(g, 0, trailingTopY - 1, 0, leadingBottomY + 1, rounded)[ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_46 $$ drawLine(g, leadingRanges.get(i - 1), leadingBottomY, start, leadingBottomY, rounded)[ FD ]
Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) -->Line_49 $$ if ((i + 2) < leadingRanges.size()) [ CD ]
Line_12 $$ int lineHeight = myView.getLineHeight() - 1-->Line_23 $$ UIUtil.drawRectPickedOut(g, startX, y, endX - startX, lineHeight)[ FD ]
Line_30 $$ TFloatArrayList trailingRanges = adjustedLogicalRangeToVisualRanges(myView.visualPositionToOffset(new VisualPosition(endPosition.line, 0)), endOffset)-->Line_60 $$ for (int i = trailingRanges.size() - 2; i >= 0; i -= 2) [ FD ]
Line_57 $$ float targetX = trailingRanges.get(trailingRanges.size() - 1)-->Line_83 $$ drawLine(g, lastX, leadingBottomY + 1, targetX, leadingBottomY + 1, rounded)[ FD ]
Line_22 $$ if (rounded) -->Line_23 $$ UIUtil.drawRectPickedOut(g, startX, y, endX - startX, lineHeight)[ CD ]
Line_38 $$ float start = 0-->Line_64 $$ drawLine(g, end, trailingBottomY, start, trailingBottomY, rounded)[ FD ]
Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) -->Line_43 $$ start = leadingRanges.get(i)[ FD ]
Line_79 $$ lastX = 0-->Line_85 $$ drawLine(g, lastX, leadingBottomY + 1, lastX, leadingBottomY, rounded)[ FD ]
Line_44 $$ end = leadingRanges.get(i + 1)-->Line_50 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_44 $$ end = leadingRanges.get(i + 1)-->Line_51 $$ drawLine(g, end, leadingTopY, end, leadingBottomY, rounded)[ FD ]
Line_44 $$ end = leadingRanges.get(i + 1)-->Line_56 $$ drawLine(g, end, leadingTopY, end, trailingTopY - 1, rounded)[ FD ]
Line_72 $$ if (start > 0) -->Line_73 $$ drawLine(g, start, trailingTopY, start, trailingTopY - 1, rounded)[ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_7 $$ if (startLine + 1 == endLine && startOffset == myDocument.getLineStartOffset(startLine) && endOffset == myDocument.getLineStartOffset(endLine)) [ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_74 $$ drawLine(g, start, trailingTopY - 1, 0, trailingTopY - 1, rounded)[ FD ]
Line_60 $$ for (int i = trailingRanges.size() - 2; i >= 0; i -= 2) -->Line_61 $$ start = trailingRanges.get(i)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_3 $$ if (!clipDetector.rangeCanBeVisible(startOffset, endOffset))[ CD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_59 $$ adjustY = end == targetX ? -2 : -1[ CD ]
Line_16 $$ if (startPosition.line == endPosition.line) -->Line_17 $$ int y = myView.visualLineToY(startPosition.line)[ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_55 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_30 $$ TFloatArrayList trailingRanges = adjustedLogicalRangeToVisualRanges(myView.visualPositionToOffset(new VisualPosition(endPosition.line, 0)), endOffset)-->Line_40 $$ float leftGap = leadingRanges.get(0) - (containsInnerLines ? 0 : trailingRanges.get(0))[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_14 $$ VisualPosition startPosition = myView.offsetToVisualPosition(startOffset, true, false)[ FD ]
Line_37 $$ int trailingBottomY = trailingTopY + lineHeight-->Line_63 $$ drawLine(g, end, trailingTopY + (i == 0 ? adjustY : 0), end, trailingBottomY, rounded)[ FD ]
Line_82 $$ if (lastX < targetX) -->Line_83 $$ drawLine(g, lastX, leadingBottomY + 1, targetX, leadingBottomY + 1, rounded)[ CD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_57 $$ float targetX = trailingRanges.get(trailingRanges.size() - 1)[ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_3 $$ if (!clipDetector.rangeCanBeVisible(startOffset, endOffset))[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_9 $$ endOffset = myDocument.getLineEndOffset(endLine)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_58 $$ drawLine(g, end, trailingTopY - 1, targetX, trailingTopY - 1, rounded)[ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_63 $$ drawLine(g, end, trailingTopY + (i == 0 ? adjustY : 0), end, trailingBottomY, rounded)[ FD ]
Line_43 $$ start = leadingRanges.get(i)-->Line_73 $$ drawLine(g, start, trailingTopY, start, trailingTopY - 1, rounded)[ FD ]
Line_57 $$ float targetX = trailingRanges.get(trailingRanges.size() - 1)-->Line_86 $$ drawLine(g, lastX, leadingBottomY, targetX, leadingBottomY, rounded)[ FD ]
Line_19 $$ for (int i = 0; i < ranges.size() - 1; i += 2) -->Line_60 $$ for (int i = trailingRanges.size() - 2; i >= 0; i -= 2) [ FD ]
Line_54 $$ end = Math.max(end, maxWidth)-->Line_58 $$ drawLine(g, end, trailingTopY - 1, targetX, trailingTopY - 1, rounded)[ FD ]
Line_60 $$ for (int i = trailingRanges.size() - 2; i >= 0; i -= 2) -->Line_66 $$ if (i > 0) [ CD ]
Line_70 $$ float lastX = start-->Line_79 $$ lastX = 0[ FD ]
Line_3 $$ if (!clipDetector.rangeCanBeVisible(startOffset, endOffset))-->Line_4 $$ return[ CD ]
Line_29 $$ TFloatArrayList leadingRanges = adjustedLogicalRangeToVisualRanges(startOffset, myView.visualPositionToOffset(new VisualPosition(startPosition.line, Integer.MAX_VALUE, true)))-->Line_40 $$ float leftGap = leadingRanges.get(0) - (containsInnerLines ? 0 : trailingRanges.get(0))[ FD ]
Line_19 $$ for (int i = 0; i < ranges.size() - 1; i += 2) -->Line_22 $$ if (rounded) [ CD ]
Line_66 $$ if (i > 0) -->Line_67 $$ drawLine(g, start, trailingTopY, trailingRanges.get(i - 1), trailingTopY, rounded)[ CD ]
Line_45 $$ if (i > 0) -->Line_46 $$ drawLine(g, leadingRanges.get(i - 1), leadingBottomY, start, leadingBottomY, rounded)[ CD ]
Line_30 $$ TFloatArrayList trailingRanges = adjustedLogicalRangeToVisualRanges(myView.visualPositionToOffset(new VisualPosition(endPosition.line, 0)), endOffset)-->Line_61 $$ start = trailingRanges.get(i)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_35 $$ int leadingBottomY = leadingTopY + lineHeight[ CD ]
Line_43 $$ start = leadingRanges.get(i)-->Line_74 $$ drawLine(g, start, trailingTopY - 1, 0, trailingTopY - 1, rounded)[ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_73 $$ drawLine(g, start, trailingTopY, start, trailingTopY - 1, rounded)[ FD ]
Line_44 $$ end = leadingRanges.get(i + 1)-->Line_63 $$ drawLine(g, end, trailingTopY + (i == 0 ? adjustY : 0), end, trailingBottomY, rounded)[ FD ]
Line_54 $$ end = Math.max(end, maxWidth)-->Line_62 $$ end = trailingRanges.get(i + 1)[ FD ]
Line_70 $$ float lastX = start-->Line_85 $$ drawLine(g, lastX, leadingBottomY + 1, lastX, leadingBottomY, rounded)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_32 $$ int maxWidth = Math.max(myView.getMaxWidthInLineRange(startPosition.line, endPosition.line - 1) - 1, (int) trailingRanges.get(trailingRanges.size() - 1))[ CD ]
Line_19 $$ for (int i = 0; i < ranges.size() - 1; i += 2) -->Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) [ FD ]
Line_17 $$ int y = myView.visualLineToY(startPosition.line)-->Line_23 $$ UIUtil.drawRectPickedOut(g, startX, y, endX - startX, lineHeight)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_83 $$ drawLine(g, lastX, leadingBottomY + 1, targetX, leadingBottomY + 1, rounded)[ FD ]
Line_36 $$ int trailingTopY = myView.visualLineToY(endPosition.line)-->Line_77 $$ drawLine(g, start, trailingTopY, 0, leadingBottomY + 1, rounded)[ FD ]
Line_29 $$ TFloatArrayList leadingRanges = adjustedLogicalRangeToVisualRanges(startOffset, myView.visualPositionToOffset(new VisualPosition(startPosition.line, Integer.MAX_VALUE, true)))-->Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) [ FD ]
Line_34 $$ int leadingTopY = myView.visualLineToY(startPosition.line)-->Line_48 $$ drawLine(g, start, leadingBottomY + (i == 0 ? adjustY : 0), start, leadingTopY, rounded)[ FD ]
Line_20 $$ int startX = (int) ranges.get(i)-->Line_25 $$ g.drawRect(startX, y, endX - startX, lineHeight)[ FD ]
Line_18 $$ TFloatArrayList ranges = adjustedLogicalRangeToVisualRanges(startOffset, endOffset)-->Line_21 $$ int endX = (int) ranges.get(i + 1)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_51 $$ drawLine(g, end, leadingTopY, end, leadingBottomY, rounded)[ FD ]
Line_44 $$ end = leadingRanges.get(i + 1)-->Line_55 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_61 $$ start = trailingRanges.get(i)-->Line_64 $$ drawLine(g, end, trailingBottomY, start, trailingBottomY, rounded)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_18 $$ TFloatArrayList ranges = adjustedLogicalRangeToVisualRanges(startOffset, endOffset)[ FD ]
Line_29 $$ TFloatArrayList leadingRanges = adjustedLogicalRangeToVisualRanges(startOffset, myView.visualPositionToOffset(new VisualPosition(startPosition.line, Integer.MAX_VALUE, true)))-->Line_44 $$ end = leadingRanges.get(i + 1)[ FD ]
Line_39 $$ float end = 0-->Line_55 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_41 $$ int adjustY = leftGap == 0 ? 2 : leftGap > 0 ? 1 : 0[ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_23 $$ UIUtil.drawRectPickedOut(g, startX, y, endX - startX, lineHeight)[ FD ]
Line_72 $$ if (start > 0) -->Line_75 $$ drawLine(g, 0, trailingTopY - 1, 0, leadingBottomY + 1, rounded)[ CD ]
Line_41 $$ int adjustY = leftGap == 0 ? 2 : leftGap > 0 ? 1 : 0-->Line_59 $$ adjustY = end == targetX ? -2 : -1[ FD ]
Line_38 $$ float start = 0-->Line_55 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_64 $$ drawLine(g, end, trailingBottomY, start, trailingBottomY, rounded)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_36 $$ int trailingTopY = myView.visualLineToY(endPosition.line)[ CD ]
Line_57 $$ float targetX = trailingRanges.get(trailingRanges.size() - 1)-->Line_81 $$ targetX = leadingRanges.get(0)[ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_85 $$ drawLine(g, lastX, leadingBottomY + 1, lastX, leadingBottomY, rounded)[ FD ]
Line_43 $$ start = leadingRanges.get(i)-->Line_67 $$ drawLine(g, start, trailingTopY, trailingRanges.get(i - 1), trailingTopY, rounded)[ FD ]
Line_9 $$ endOffset = myDocument.getLineEndOffset(endLine)-->Line_30 $$ TFloatArrayList trailingRanges = adjustedLogicalRangeToVisualRanges(myView.visualPositionToOffset(new VisualPosition(endPosition.line, 0)), endOffset)[ FD ]
Line_61 $$ start = trailingRanges.get(i)-->Line_67 $$ drawLine(g, start, trailingTopY, trailingRanges.get(i - 1), trailingTopY, rounded)[ FD ]
Line_36 $$ int trailingTopY = myView.visualLineToY(endPosition.line)-->Line_65 $$ drawLine(g, start, trailingBottomY, start, trailingTopY, rounded)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_33 $$ boolean containsInnerLines = endPosition.line > startPosition.line + 1[ CD ]
Line_18 $$ TFloatArrayList ranges = adjustedLogicalRangeToVisualRanges(startOffset, endOffset)-->Line_20 $$ int startX = (int) ranges.get(i)[ FD ]
Line_82 $$ if (lastX < targetX) -->Line_85 $$ drawLine(g, lastX, leadingBottomY + 1, lastX, leadingBottomY, rounded)[ CD ]
Line_70 $$ float lastX = start-->Line_82 $$ if (lastX < targetX) [ FD ]
Line_81 $$ targetX = leadingRanges.get(0)-->Line_86 $$ drawLine(g, lastX, leadingBottomY, targetX, leadingBottomY, rounded)[ FD ]
Line_39 $$ float end = 0-->Line_51 $$ drawLine(g, end, leadingTopY, end, leadingBottomY, rounded)[ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_48 $$ drawLine(g, start, leadingBottomY + (i == 0 ? adjustY : 0), start, leadingTopY, rounded)[ FD ]
Line_61 $$ start = trailingRanges.get(i)-->Line_74 $$ drawLine(g, start, trailingTopY - 1, 0, trailingTopY - 1, rounded)[ FD ]
Line_38 $$ float start = 0-->Line_50 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_35 $$ int leadingBottomY = leadingTopY + lineHeight-->Line_51 $$ drawLine(g, end, leadingTopY, end, leadingBottomY, rounded)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_37 $$ int trailingBottomY = trailingTopY + lineHeight[ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_15 $$ VisualPosition endPosition = myView.offsetToVisualPosition(endOffset, false, true)[ FD ]
Line_19 $$ for (int i = 0; i < ranges.size() - 1; i += 2) -->Line_45 $$ if (i > 0) [ FD ]
Line_39 $$ float end = 0-->Line_50 $$ drawLine(g, start, leadingTopY, end, leadingTopY, rounded)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_73 $$ drawLine(g, start, trailingTopY, start, trailingTopY - 1, rounded)[ FD ]
Line_20 $$ int startX = (int) ranges.get(i)-->Line_23 $$ UIUtil.drawRectPickedOut(g, startX, y, endX - startX, lineHeight)[ FD ]
Line_57 $$ float targetX = trailingRanges.get(trailingRanges.size() - 1)-->Line_82 $$ if (lastX < targetX) [ FD ]
Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) -->Line_48 $$ drawLine(g, start, leadingBottomY + (i == 0 ? adjustY : 0), start, leadingTopY, rounded)[ CD ]
Line_30 $$ TFloatArrayList trailingRanges = adjustedLogicalRangeToVisualRanges(myView.visualPositionToOffset(new VisualPosition(endPosition.line, 0)), endOffset)-->Line_67 $$ drawLine(g, start, trailingTopY, trailingRanges.get(i - 1), trailingTopY, rounded)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_65 $$ drawLine(g, start, trailingBottomY, start, trailingTopY, rounded)[ FD ]
Line_6 $$ int endLine = myDocument.getLineNumber(endOffset)-->Line_8 $$ endLine--[ FD ]
Line_38 $$ float start = 0-->Line_73 $$ drawLine(g, start, trailingTopY, start, trailingTopY - 1, rounded)[ FD ]
Line_79 $$ lastX = 0-->Line_83 $$ drawLine(g, lastX, leadingBottomY + 1, targetX, leadingBottomY + 1, rounded)[ FD ]
Line_43 $$ start = leadingRanges.get(i)-->Line_46 $$ drawLine(g, leadingRanges.get(i - 1), leadingBottomY, start, leadingBottomY, rounded)[ FD ]
Line_39 $$ float end = 0-->Line_44 $$ end = leadingRanges.get(i + 1)[ FD ]
Line_39 $$ float end = 0-->Line_56 $$ drawLine(g, end, leadingTopY, end, trailingTopY - 1, rounded)[ FD ]
Line_49 $$ if ((i + 2) < leadingRanges.size()) -->Line_51 $$ drawLine(g, end, leadingTopY, end, leadingBottomY, rounded)[ CD ]
Line_39 $$ float end = 0-->Line_64 $$ drawLine(g, end, trailingBottomY, start, trailingBottomY, rounded)[ FD ]
Line_60 $$ for (int i = trailingRanges.size() - 2; i >= 0; i -= 2) -->Line_65 $$ drawLine(g, start, trailingBottomY, start, trailingTopY, rounded)[ CD ]
Line_43 $$ start = leadingRanges.get(i)-->Line_64 $$ drawLine(g, end, trailingBottomY, start, trailingBottomY, rounded)[ FD ]
Line_19 $$ for (int i = 0; i < ranges.size() - 1; i += 2) -->Line_20 $$ int startX = (int) ranges.get(i)[ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_48 $$ drawLine(g, start, leadingBottomY + (i == 0 ? adjustY : 0), start, leadingTopY, rounded)[ FD ]
Line_39 $$ float end = 0-->Line_58 $$ drawLine(g, end, trailingTopY - 1, targetX, trailingTopY - 1, rounded)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX[ FD ]
Line_6 $$ int endLine = myDocument.getLineNumber(endOffset)-->Line_9 $$ endOffset = myDocument.getLineEndOffset(endLine)[ FD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_13 $$ g.setColor(attributes.getEffectColor())[ CD ]
Line_38 $$ float start = 0-->Line_61 $$ start = trailingRanges.get(i)[ FD ]
Line_19 $$ for (int i = 0; i < ranges.size() - 1; i += 2) -->Line_43 $$ start = leadingRanges.get(i)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_56 $$ drawLine(g, end, leadingTopY, end, trailingTopY - 1, rounded)[ CD ]
Line_62 $$ end = trailingRanges.get(i + 1)-->Line_63 $$ drawLine(g, end, trailingTopY + (i == 0 ? adjustY : 0), end, trailingBottomY, rounded)[ FD ]
Line_11 $$ boolean rounded = attributes.getEffectType() == EffectType.ROUNDED_BOX-->Line_64 $$ drawLine(g, end, trailingBottomY, start, trailingBottomY, rounded)[ FD ]
Line_19 $$ for (int i = 0; i < ranges.size() - 1; i += 2) -->Line_66 $$ if (i > 0) [ FD ]
Line_35 $$ int leadingBottomY = leadingTopY + lineHeight-->Line_86 $$ drawLine(g, lastX, leadingBottomY, targetX, leadingBottomY, rounded)[ FD ]
Line_54 $$ end = Math.max(end, maxWidth)-->Line_63 $$ drawLine(g, end, trailingTopY + (i == 0 ? adjustY : 0), end, trailingBottomY, rounded)[ FD ]
Line_79 $$ lastX = 0-->Line_86 $$ drawLine(g, lastX, leadingBottomY, targetX, leadingBottomY, rounded)[ FD ]
Line_19 $$ for (int i = 0; i < ranges.size() - 1; i += 2) -->Line_61 $$ start = trailingRanges.get(i)[ FD ]
Line_6 $$ int endLine = myDocument.getLineNumber(endOffset)-->Line_7 $$ if (startLine + 1 == endLine && startOffset == myDocument.getLineStartOffset(startLine) && endOffset == myDocument.getLineStartOffset(endLine)) [ FD ]
Line_42 $$ for (int i = 0; i < leadingRanges.size() - 1; i += 2) -->Line_44 $$ end = leadingRanges.get(i + 1)[ CD ]
Line_38 $$ float start = 0-->Line_74 $$ drawLine(g, start, trailingTopY - 1, 0, trailingTopY - 1, rounded)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_60 $$ for (int i = trailingRanges.size() - 2; i >= 0; i -= 2) [ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_16 $$ if (startPosition.line == endPosition.line) [ CD ]
Line_44 $$ end = leadingRanges.get(i + 1)-->Line_64 $$ drawLine(g, end, trailingBottomY, start, trailingBottomY, rounded)[ FD ]
Line_72 $$ if (start > 0) -->Line_74 $$ drawLine(g, start, trailingTopY - 1, 0, trailingTopY - 1, rounded)[ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_30 $$ TFloatArrayList trailingRanges = adjustedLogicalRangeToVisualRanges(myView.visualPositionToOffset(new VisualPosition(endPosition.line, 0)), endOffset)[ FD ]
Line_16 $$ if (startPosition.line == endPosition.line) -->Line_30 $$ TFloatArrayList trailingRanges = adjustedLogicalRangeToVisualRanges(myView.visualPositionToOffset(new VisualPosition(endPosition.line, 0)), endOffset)[ CD ]
Line_7 $$ if (startLine + 1 == endLine && startOffset == myDocument.getLineStartOffset(startLine) && endOffset == myDocument.getLineStartOffset(endLine)) -->Line_8 $$ endLine--[ CD ]
Line_34 $$ int leadingTopY = myView.visualLineToY(startPosition.line)-->Line_51 $$ drawLine(g, end, leadingTopY, end, leadingBottomY, rounded)[ FD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_38 $$ float start = 0[ CD ]
Line_2 $$ private void paintBorderEffect(Graphics2D g, ClipDetector clipDetector, int startOffset, int endOffset, TextAttributes attributes) -->Line_12 $$ int lineHeight = myView.getLineHeight() - 1[ CD ]
Line_31 $$ if (!leadingRanges.isEmpty() && !trailingRanges.isEmpty()) -->Line_71 $$ if (containsInnerLines) [ CD ]
Line_43 $$ start = leadingRanges.get(i)-->Line_77 $$ drawLine(g, start, trailingTopY, 0, leadingBottomY + 1, rounded)[ FD ]
