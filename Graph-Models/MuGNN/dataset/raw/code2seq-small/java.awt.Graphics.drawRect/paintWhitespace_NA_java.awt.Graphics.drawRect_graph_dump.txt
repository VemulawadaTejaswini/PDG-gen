Line_25 $$ final int charHeight = myView.getCharHeight()-->Line_26 $$ g.drawRect(startX + 2, y - charHeight, endX - startX - 4, charHeight)[ FD ]
Line_7 $$ for (int i = start; i < end; i++) -->Line_8 $$ int charOffset = isRtl ? baseStartOffset - i - 1 : baseStartOffset + i[ CD ]
Line_10 $$ if (" \t　".indexOf(c) >= 0 && whitespacePaintingStrategy.showWhitespaceAtOffset(charOffset)) -->Line_11 $$ int startX = (int) fragment.offsetToX(x, startOffset, isRtl ? baseStartOffset - i : baseStartOffset + i)[ CD ]
Line_13 $$ if (c == ' ') -->Line_15 $$ if (c == '\t') [ CD ]
Line_15 $$ if (c == '\t') -->Line_24 $$ if (c == '　') [ CD ]
Line_20 $$ int top = y - height-->Line_22 $$ UIUtil.drawLine(g, endX, y, endX, top)[ FD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_7 $$ for (int i = start; i < end; i++) [ FD ]
Line_8 $$ int charOffset = isRtl ? baseStartOffset - i - 1 : baseStartOffset + i-->Line_10 $$ if (" \t　".indexOf(c) >= 0 && whitespacePaintingStrategy.showWhitespaceAtOffset(charOffset)) [ FD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_3 $$ g.setColor(myEditor.getColorsScheme().getColor(EditorColors.WHITESPACES_COLOR))[ CD ]
Line_15 $$ if (c == '\t') -->Line_18 $$ int halfHeight = height / 2[ CD ]
Line_12 $$ int endX = (int) fragment.offsetToX(x, startOffset, isRtl ? baseStartOffset - i - 1 : baseStartOffset + i + 1)-->Line_21 $$ UIUtil.drawLine(g, startX, mid, endX, mid)[ FD ]
Line_15 $$ if (c == '\t') -->Line_22 $$ UIUtil.drawLine(g, endX, y, endX, top)[ CD ]
Line_15 $$ if (c == '\t') -->Line_19 $$ int mid = y - halfHeight[ CD ]
Line_15 $$ if (c == '\t') -->Line_21 $$ UIUtil.drawLine(g, startX, mid, endX, mid)[ CD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_4 $$ boolean isRtl = fragment.isRtl()[ FD ]
Line_10 $$ if (" \t　".indexOf(c) >= 0 && whitespacePaintingStrategy.showWhitespaceAtOffset(charOffset)) -->Line_13 $$ if (c == ' ') [ CD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_26 $$ g.drawRect(startX + 2, y - charHeight, endX - startX - 4, charHeight)[ FD ]
Line_6 $$ int startOffset = isRtl ? baseStartOffset - start : baseStartOffset + start-->Line_11 $$ int startX = (int) fragment.offsetToX(x, startOffset, isRtl ? baseStartOffset - i : baseStartOffset + i)[ FD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_10 $$ if (" \t　".indexOf(c) >= 0 && whitespacePaintingStrategy.showWhitespaceAtOffset(charOffset)) [ FD ]
Line_8 $$ int charOffset = isRtl ? baseStartOffset - i - 1 : baseStartOffset + i-->Line_9 $$ char c = text.charAt(charOffset)[ FD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_11 $$ int startX = (int) fragment.offsetToX(x, startOffset, isRtl ? baseStartOffset - i : baseStartOffset + i)[ FD ]
Line_24 $$ if (c == '　') -->Line_26 $$ g.drawRect(startX + 2, y - charHeight, endX - startX - 4, charHeight)[ CD ]
Line_15 $$ if (c == '\t') -->Line_20 $$ int top = y - height[ CD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_4 $$ boolean isRtl = fragment.isRtl()[ CD ]
Line_7 $$ for (int i = start; i < end; i++) -->Line_9 $$ char c = text.charAt(charOffset)[ CD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_6 $$ int startOffset = isRtl ? baseStartOffset - start : baseStartOffset + start[ CD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_12 $$ int endX = (int) fragment.offsetToX(x, startOffset, isRtl ? baseStartOffset - i - 1 : baseStartOffset + i + 1)[ FD ]
Line_19 $$ int mid = y - halfHeight-->Line_21 $$ UIUtil.drawLine(g, startX, mid, endX, mid)[ FD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_9 $$ char c = text.charAt(charOffset)[ FD ]
Line_16 $$ endX -= myView.getPlainSpaceWidth() / 4-->Line_21 $$ UIUtil.drawLine(g, startX, mid, endX, mid)[ FD ]
Line_10 $$ if (" \t　".indexOf(c) >= 0 && whitespacePaintingStrategy.showWhitespaceAtOffset(charOffset)) -->Line_12 $$ int endX = (int) fragment.offsetToX(x, startOffset, isRtl ? baseStartOffset - i - 1 : baseStartOffset + i + 1)[ CD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_5 $$ int baseStartOffset = fragment.getStartOffset()[ FD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_5 $$ int baseStartOffset = fragment.getStartOffset()[ CD ]
Line_9 $$ char c = text.charAt(charOffset)-->Line_10 $$ if (" \t　".indexOf(c) >= 0 && whitespacePaintingStrategy.showWhitespaceAtOffset(charOffset)) [ FD ]
Line_9 $$ char c = text.charAt(charOffset)-->Line_15 $$ if (c == '\t') [ FD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_21 $$ UIUtil.drawLine(g, startX, mid, endX, mid)[ FD ]
Line_11 $$ int startX = (int) fragment.offsetToX(x, startOffset, isRtl ? baseStartOffset - i : baseStartOffset + i)-->Line_21 $$ UIUtil.drawLine(g, startX, mid, endX, mid)[ FD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_22 $$ UIUtil.drawLine(g, endX, y, endX, top)[ FD ]
Line_9 $$ char c = text.charAt(charOffset)-->Line_24 $$ if (c == '　') [ FD ]
Line_24 $$ if (c == '　') -->Line_25 $$ final int charHeight = myView.getCharHeight()[ CD ]
Line_12 $$ int endX = (int) fragment.offsetToX(x, startOffset, isRtl ? baseStartOffset - i - 1 : baseStartOffset + i + 1)-->Line_22 $$ UIUtil.drawLine(g, endX, y, endX, top)[ FD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_3 $$ g.setColor(myEditor.getColorsScheme().getColor(EditorColors.WHITESPACES_COLOR))[ FD ]
Line_15 $$ if (c == '\t') -->Line_17 $$ int height = myView.getCharHeight()[ CD ]
Line_7 $$ for (int i = start; i < end; i++) -->Line_10 $$ if (" \t　".indexOf(c) >= 0 && whitespacePaintingStrategy.showWhitespaceAtOffset(charOffset)) [ CD ]
Line_9 $$ char c = text.charAt(charOffset)-->Line_13 $$ if (c == ' ') [ FD ]
Line_13 $$ if (c == ' ') -->Line_14 $$ g.fillRect((startX + endX) / 2, y, 1, 1)[ CD ]
Line_16 $$ endX -= myView.getPlainSpaceWidth() / 4-->Line_22 $$ UIUtil.drawLine(g, endX, y, endX, top)[ FD ]
Line_12 $$ int endX = (int) fragment.offsetToX(x, startOffset, isRtl ? baseStartOffset - i - 1 : baseStartOffset + i + 1)-->Line_16 $$ endX -= myView.getPlainSpaceWidth() / 4[ FD ]
Line_6 $$ int startOffset = isRtl ? baseStartOffset - start : baseStartOffset + start-->Line_12 $$ int endX = (int) fragment.offsetToX(x, startOffset, isRtl ? baseStartOffset - i - 1 : baseStartOffset + i + 1)[ FD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_14 $$ g.fillRect((startX + endX) / 2, y, 1, 1)[ FD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_23 $$ g.fillPolygon(new int[] [ FD ]
Line_15 $$ if (c == '\t') -->Line_16 $$ endX -= myView.getPlainSpaceWidth() / 4[ CD ]
Line_2 $$ private void paintWhitespace(Graphics2D g, CharSequence text, float x, int y, int start, int end, EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy, VisualLineFragmentsIterator.Fragment fragment) -->Line_7 $$ for (int i = start; i < end; i++) [ CD ]
Line_15 $$ if (c == '\t') -->Line_23 $$ g.fillPolygon(new int[] [ CD ]
