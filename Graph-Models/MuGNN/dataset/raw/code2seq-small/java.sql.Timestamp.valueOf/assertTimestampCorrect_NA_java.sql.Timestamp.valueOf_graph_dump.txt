Line_2 $$ private static void assertTimestampCorrect(String timestampString) -->Line_6 $$ assertEquals(decodedTimestampMillis, timestamp.getTime())[ CD ]
Line_2 $$ private static void assertTimestampCorrect(String timestampString) -->Line_5 $$ long decodedTimestampMillis = getTimestampMillis(timestampBytes)[ CD ]
Line_2 $$ private static void assertTimestampCorrect(String timestampString) -->Line_3 $$ Timestamp timestamp = Timestamp.valueOf(timestampString)[ FD ]
Line_4 $$ Binary timestampBytes = NanoTimeUtils.getNanoTime(timestamp, false).toBinary()-->Line_5 $$ long decodedTimestampMillis = getTimestampMillis(timestampBytes)[ FD ]
Line_5 $$ long decodedTimestampMillis = getTimestampMillis(timestampBytes)-->Line_6 $$ assertEquals(decodedTimestampMillis, timestamp.getTime())[ FD ]
Line_3 $$ Timestamp timestamp = Timestamp.valueOf(timestampString)-->Line_4 $$ Binary timestampBytes = NanoTimeUtils.getNanoTime(timestamp, false).toBinary()[ FD ]
Line_3 $$ Timestamp timestamp = Timestamp.valueOf(timestampString)-->Line_6 $$ assertEquals(decodedTimestampMillis, timestamp.getTime())[ FD ]
Line_2 $$ private static void assertTimestampCorrect(String timestampString) -->Line_4 $$ Binary timestampBytes = NanoTimeUtils.getNanoTime(timestamp, false).toBinary()[ CD ]
Line_2 $$ private static void assertTimestampCorrect(String timestampString) -->Line_3 $$ Timestamp timestamp = Timestamp.valueOf(timestampString)[ CD ]
