Line_34 $$ if (!newValue.isEmpty()) -->Line_35 $$ if (currentValue.isEmpty()) [ CD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_40 $$ for (Map.Entry<Key, Value> e : newValue.entrySet()) [ FD ]
Line_8 $$ if (!currentValue.isEmpty()) -->Line_9 $$ if (newValue.isEmpty()) [ CD ]
Line_14 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_20 $$ if (newValue.containsKey(e.getKey())) [ FD ]
Line_48 $$ if (removedOrChangedKeys == null)-->Line_49 $$ removedOrChangedKeys = Collections.emptyMap()[ CD ]
Line_6 $$ Map<Key, Value> currentValue = getCurrentValue()-->Line_41 $$ if (!currentValue.containsKey(e.getKey())) [ FD ]
Line_3 $$ if (removedOrChangedKeys != null)-->Line_4 $$ return[ CD ]
Line_14 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_41 $$ if (!currentValue.containsKey(e.getKey())) [ FD ]
Line_20 $$ if (newValue.containsKey(e.getKey())) -->Line_21 $$ if (addedKeys == null)[ CD ]
Line_50 $$ if (addedKeys == null)-->Line_51 $$ addedKeys = Collections.emptyMap()[ CD ]
Line_20 $$ if (newValue.containsKey(e.getKey())) -->Line_23 $$ addedKeys.put(e.getKey(), newValueForKey)[ CD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_34 $$ if (!newValue.isEmpty()) [ FD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_9 $$ if (newValue.isEmpty()) [ FD ]
Line_14 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_19 $$ removedOrChangedKeys.put(e.getKey(), e.getValue())[ FD ]
Line_16 $$ if (!Comparing.equal(newValueForKey, e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) -->Line_20 $$ if (newValue.containsKey(e.getKey())) [ CD ]
Line_41 $$ if (!currentValue.containsKey(e.getKey())) -->Line_44 $$ addedKeys.put(e.getKey(), e.getValue())[ CD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_16 $$ if (!Comparing.equal(newValueForKey, e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) [ FD ]
Line_14 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_15 $$ Value newValueForKey = newValue.get(e.getKey())[ FD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_15 $$ Value newValueForKey = newValue.get(e.getKey())[ FD ]
Line_2 $$ private void calcDiff() throws StorageException -->Line_3 $$ if (removedOrChangedKeys != null)[ CD ]
Line_9 $$ if (newValue.isEmpty()) -->Line_12 $$ return[ CD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_28 $$ if (newValue.isEmpty()) [ FD ]
Line_28 $$ if (newValue.isEmpty()) -->Line_31 $$ return[ CD ]
Line_57 $$ if ((totalRequests & 0xFFF) == 0 && DO_INFO_DUMP) -->Line_58 $$ Logger.getInstance(getClass()).info("Incremental index diff update:" + requests + ", removals:" + totalRemovals + "->" + incrementalRemovals + ", additions:" + totalAdditions + "->" + incrementalAdditions)[ CD ]
Line_35 $$ if (currentValue.isEmpty()) -->Line_38 $$ return[ CD ]
Line_14 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_23 $$ addedKeys.put(e.getKey(), newValueForKey)[ FD ]
Line_41 $$ if (!currentValue.containsKey(e.getKey())) -->Line_42 $$ if (addedKeys == null)[ CD ]
Line_14 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_44 $$ addedKeys.put(e.getKey(), e.getValue())[ FD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_54 $$ totalAdditions.addAndGet(newValue.size())[ FD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_20 $$ if (newValue.containsKey(e.getKey())) [ FD ]
Line_8 $$ if (!currentValue.isEmpty()) -->Line_28 $$ if (newValue.isEmpty()) [ CD ]
Line_6 $$ Map<Key, Value> currentValue = getCurrentValue()-->Line_8 $$ if (!currentValue.isEmpty()) [ FD ]
Line_15 $$ Value newValueForKey = newValue.get(e.getKey())-->Line_23 $$ addedKeys.put(e.getKey(), newValueForKey)[ FD ]
Line_16 $$ if (!Comparing.equal(newValueForKey, e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) -->Line_19 $$ removedOrChangedKeys.put(e.getKey(), e.getValue())[ CD ]
Line_14 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_16 $$ if (!Comparing.equal(newValueForKey, e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) [ FD ]
Line_6 $$ Map<Key, Value> currentValue = getCurrentValue()-->Line_14 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) [ FD ]
Line_15 $$ Value newValueForKey = newValue.get(e.getKey())-->Line_16 $$ if (!Comparing.equal(newValueForKey, e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) [ FD ]
Line_6 $$ Map<Key, Value> currentValue = getCurrentValue()-->Line_53 $$ totalRemovals.addAndGet(currentValue.size())[ FD ]
Line_6 $$ Map<Key, Value> currentValue = getCurrentValue()-->Line_35 $$ if (currentValue.isEmpty()) [ FD ]
Line_16 $$ if (!Comparing.equal(newValueForKey, e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) -->Line_17 $$ if (removedOrChangedKeys == null)[ CD ]
