Line_10 $$ int ret = socks[1].getInputStream().read()-->Line_11 $$ if (ret == -1)[ FD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_24 $$ socks[0].getOutputStream().write(1)[ CD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_4 $$ final AtomicBoolean failed = new AtomicBoolean(false)[ CD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_5 $$ final DomainSocket[] socks = DomainSocket.socketpair()[ CD ]
Line_4 $$ final AtomicBoolean failed = new AtomicBoolean(false)-->Line_16 $$ failed.set(true)[ FD ]
Line_4 $$ final AtomicBoolean failed = new AtomicBoolean(false)-->Line_30 $$ Assert.assertFalse(failed.get())[ FD ]
Line_3 $$ final AtomicInteger bytesRead = new AtomicInteger(0)-->Line_31 $$ Assert.assertEquals(3, bytesRead.get())[ FD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_26 $$ socks[0].getOutputStream().write(3)[ CD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_27 $$ Assert.assertTrue(readerThread.isAlive())[ CD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_32 $$ IOUtils.cleanup(null, socks)[ CD ]
Line_5 $$ final DomainSocket[] socks = DomainSocket.socketpair()-->Line_32 $$ IOUtils.cleanup(null, socks)[ FD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_28 $$ socks[0].shutdown()[ CD ]
Line_11 $$ if (ret == -1)-->Line_12 $$ return[ CD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_23 $$ readerThread.start()[ CD ]
Line_3 $$ final AtomicInteger bytesRead = new AtomicInteger(0)-->Line_13 $$ bytesRead.addAndGet(1)[ FD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_31 $$ Assert.assertEquals(3, bytesRead.get())[ CD ]
Line_6 $$ Runnable reader = new Runnable() -->Line_8 $$ while (true) [ CD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_25 $$ socks[0].getOutputStream().write(2)[ CD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_29 $$ readerThread.join()[ CD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_6 $$ Runnable reader = new Runnable() [ CD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_3 $$ final AtomicInteger bytesRead = new AtomicInteger(0)[ CD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_30 $$ Assert.assertFalse(failed.get())[ CD ]
