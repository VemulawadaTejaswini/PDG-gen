Line_5 $$ final boolean toClose = isShowing()-->Line_23 $$ if (state < frameCount) [ FD ]
Line_8 $$ final Runnable runnable = new Runnable() -->Line_30 $$ animator.addRequest(runnable, 10, ModalityState.stateForComponent(getRootPane()))[ FD ]
Line_25 $$ if (toClose) -->Line_26 $$ MessageDialog.super.dispose()[ CD ]
Line_2 $$ private void animate() -->Line_3 $$ final int height = getPreferredSize().height[ CD ]
Line_2 $$ private void animate() -->Line_8 $$ final Runnable runnable = new Runnable() [ CD ]
Line_8 $$ final Runnable runnable = new Runnable() -->Line_18 $$ bounds.height = (int) (height * myLayout.myPhase)[ CD ]
Line_6 $$ final AtomicInteger i = new AtomicInteger(-1)-->Line_10 $$ int state = i.addAndGet(1)[ FD ]
Line_11 $$ double linearProgress = (double) state / frameCount-->Line_13 $$ linearProgress = 1 - linearProgress[ FD ]
Line_8 $$ final Runnable runnable = new Runnable() -->Line_12 $$ if (toClose) [ CD ]
Line_17 $$ Rectangle bounds = window.getBounds()-->Line_19 $$ window.setBounds(bounds)[ FD ]
Line_16 $$ Window window = getPeer().getWindow()-->Line_21 $$ WindowManager.getInstance().requestUserAttention((IdeFrame) window.getOwner(), true)[ FD ]
Line_8 $$ final Runnable runnable = new Runnable() -->Line_15 $$ myLayout.myPhase = (1 - Math.cos(Math.PI * linearProgress)) / 2[ CD ]
Line_8 $$ final Runnable runnable = new Runnable() -->Line_19 $$ window.setBounds(bounds)[ CD ]
Line_8 $$ final Runnable runnable = new Runnable() -->Line_16 $$ Window window = getPeer().getWindow()[ CD ]
Line_16 $$ Window window = getPeer().getWindow()-->Line_19 $$ window.setBounds(bounds)[ FD ]
Line_2 $$ private void animate() -->Line_6 $$ final AtomicInteger i = new AtomicInteger(-1)[ CD ]
Line_8 $$ final Runnable runnable = new Runnable() -->Line_20 $$ if (state == 0 && !toClose && window.getOwner() instanceof IdeFrame) [ CD ]
Line_7 $$ final Alarm animator = new Alarm(myDisposable)-->Line_24 $$ animator.addRequest(this, 10)[ FD ]
Line_16 $$ Window window = getPeer().getWindow()-->Line_17 $$ Rectangle bounds = window.getBounds()[ FD ]
Line_8 $$ final Runnable runnable = new Runnable() -->Line_10 $$ int state = i.addAndGet(1)[ CD ]
Line_2 $$ private void animate() -->Line_5 $$ final boolean toClose = isShowing()[ CD ]
Line_20 $$ if (state == 0 && !toClose && window.getOwner() instanceof IdeFrame) -->Line_21 $$ WindowManager.getInstance().requestUserAttention((IdeFrame) window.getOwner(), true)[ CD ]
Line_12 $$ if (toClose) -->Line_13 $$ linearProgress = 1 - linearProgress[ CD ]
Line_7 $$ final Alarm animator = new Alarm(myDisposable)-->Line_30 $$ animator.addRequest(runnable, 10, ModalityState.stateForComponent(getRootPane()))[ FD ]
Line_10 $$ int state = i.addAndGet(1)-->Line_23 $$ if (state < frameCount) [ FD ]
Line_4 $$ final int frameCount = 10-->Line_23 $$ if (state < frameCount) [ FD ]
Line_2 $$ private void animate() -->Line_30 $$ animator.addRequest(runnable, 10, ModalityState.stateForComponent(getRootPane()))[ CD ]
Line_8 $$ final Runnable runnable = new Runnable() -->Line_17 $$ Rectangle bounds = window.getBounds()[ CD ]
Line_8 $$ final Runnable runnable = new Runnable() -->Line_11 $$ double linearProgress = (double) state / frameCount[ CD ]
Line_23 $$ if (state < frameCount) -->Line_25 $$ if (toClose) [ CD ]
Line_2 $$ private void animate() -->Line_4 $$ final int frameCount = 10[ CD ]
Line_16 $$ Window window = getPeer().getWindow()-->Line_20 $$ if (state == 0 && !toClose && window.getOwner() instanceof IdeFrame) [ FD ]
Line_8 $$ final Runnable runnable = new Runnable() -->Line_23 $$ if (state < frameCount) [ CD ]
Line_2 $$ private void animate() -->Line_7 $$ final Alarm animator = new Alarm(myDisposable)[ CD ]
Line_23 $$ if (state < frameCount) -->Line_24 $$ animator.addRequest(this, 10)[ CD ]
