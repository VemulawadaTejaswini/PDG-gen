Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_28 $$ myDescriptor.setRoots(file)[ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_50 $$ mousePopupGroup.add(newFolderAction)[ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_22 $$ myTreePanel.setVisible(true)[ CD ]
Line_25 $$ final ContentEntry entry = contentEntryEditor.getContentEntry()-->Line_30 $$ final String path = VfsUtilCore.urlToPath(entry.getUrl())[ FD ]
Line_14 $$ if (contentEntryEditor == null) -->Line_17 $$ if (myFileSystemTree != null) [ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_51 $$ myFileSystemTree.registerMouseListener(mousePopupGroup)[ CD ]
Line_33 $$ final Runnable init = new Runnable() -->Line_36 $$ myFileSystemTree.select(file, null)[ CD ]
Line_10 $$ if (myContentEntryEditor != null) -->Line_11 $$ myContentEntryEditor.removeContentEntryEditorListener(myContentEntryEditorListener)[ CD ]
Line_27 $$ final VirtualFile file = entry.getFile()-->Line_36 $$ myFileSystemTree.select(file, null)[ FD ]
Line_27 $$ final VirtualFile file = entry.getFile()-->Line_28 $$ myDescriptor.setRoots(file)[ FD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_49 $$ mousePopupGroup.addSeparator()[ CD ]
Line_25 $$ final ContentEntry entry = contentEntryEditor.getContentEntry()-->Line_27 $$ final VirtualFile file = entry.getFile()[ FD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_14 $$ if (contentEntryEditor == null) [ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_24 $$ myContentEntryEditor.addContentEntryEditorListener(myContentEntryEditorListener)[ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_48 $$ mousePopupGroup.add(myEditingActionsGroup)[ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_44 $$ myFileSystemTree.showHiddens(true)[ CD ]
Line_6 $$ if (myFileSystemTree != null) -->Line_7 $$ Disposer.dispose(myFileSystemTree)[ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_45 $$ Disposer.register(myProject, myFileSystemTree)[ CD ]
Line_30 $$ final String path = VfsUtilCore.urlToPath(entry.getUrl())-->Line_31 $$ myDescriptor.setTitle(FileUtil.toSystemDependentName(path))[ FD ]
Line_14 $$ if (contentEntryEditor == null) -->Line_20 $$ return[ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_27 $$ final VirtualFile file = entry.getFile()[ CD ]
Line_14 $$ if (contentEntryEditor == null) -->Line_16 $$ myTreePanel.setVisible(false)[ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_3 $$ if (myContentEntryEditor != null && myContentEntryEditor.equals(contentEntryEditor)) [ CD ]
Line_17 $$ if (myFileSystemTree != null) -->Line_18 $$ Disposer.dispose(myFileSystemTree)[ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_6 $$ if (myFileSystemTree != null) [ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_3 $$ if (myContentEntryEditor != null && myContentEntryEditor.equals(contentEntryEditor)) [ FD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_14 $$ if (contentEntryEditor == null) [ FD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_29 $$ if (file == null) [ CD ]
Line_14 $$ if (contentEntryEditor == null) -->Line_15 $$ ((DefaultTreeModel) myTree.getModel()).setRoot(EMPTY_TREE_ROOT)[ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_25 $$ final ContentEntry entry = contentEntryEditor.getContentEntry()[ CD ]
Line_29 $$ if (file == null) -->Line_31 $$ myDescriptor.setTitle(FileUtil.toSystemDependentName(path))[ CD ]
Line_3 $$ if (myContentEntryEditor != null && myContentEntryEditor.equals(contentEntryEditor)) -->Line_4 $$ return[ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_10 $$ if (myContentEntryEditor != null) [ CD ]
Line_29 $$ if (file == null) -->Line_30 $$ final String path = VfsUtilCore.urlToPath(entry.getUrl())[ CD ]
Line_27 $$ final VirtualFile file = entry.getFile()-->Line_29 $$ if (file == null) [ FD ]
Line_33 $$ final Runnable init = new Runnable() -->Line_35 $$ myFileSystemTree.updateTree()[ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_25 $$ final ContentEntry entry = contentEntryEditor.getContentEntry()[ FD ]
Line_39 $$ myFileSystemTree = new FileSystemTreeImpl(myProject, myDescriptor, myTree, getContentEntryCellRenderer(), init, null) -->Line_41 $$ return new MyFileTreeBuilder(tree, treeModel, treeStructure, comparator, descriptor, onInitialized)[ CD ]
Line_2 $$ public void setContentEntryEditor(final ContentEntryEditor contentEntryEditor) -->Line_33 $$ final Runnable init = new Runnable() [ CD ]
