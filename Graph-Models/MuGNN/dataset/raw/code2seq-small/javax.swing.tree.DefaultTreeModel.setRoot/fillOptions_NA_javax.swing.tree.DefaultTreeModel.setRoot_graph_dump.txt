Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode()-->Line_15 $$ myTreeModel.setRoot(root)[ FD ]
Line_7 $$ List<String> path = extractPath(description)-->Line_9 $$ MyTreeNode groupNode = ensureGroup(root, path, 0)[ FD ]
Line_2 $$ public void fillOptions(@NotNull ColorAndFontOptions options) -->Line_15 $$ myTreeModel.setRoot(root)[ CD ]
Line_7 $$ List<String> path = extractPath(description)-->Line_10 $$ groupNode.add(new MyTreeNode(description, path.get(path.size() - 1)))[ FD ]
Line_8 $$ if (path != null && path.size() > 1) -->Line_9 $$ MyTreeNode groupNode = ensureGroup(root, path, 0)[ CD ]
Line_8 $$ if (path != null && path.size() > 1) -->Line_12 $$ root.add(new MyTreeNode(description))[ CD ]
Line_7 $$ List<String> path = extractPath(description)-->Line_8 $$ if (path != null && path.size() > 1) [ FD ]
Line_4 $$ for (EditorSchemeAttributeDescriptor description : getOrderedDescriptors(options)) -->Line_7 $$ List<String> path = extractPath(description)[ FD ]
Line_2 $$ public void fillOptions(@NotNull ColorAndFontOptions options) -->Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode()[ CD ]
Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode()-->Line_12 $$ root.add(new MyTreeNode(description))[ FD ]
Line_4 $$ for (EditorSchemeAttributeDescriptor description : getOrderedDescriptors(options)) -->Line_5 $$ if (!description.getGroup().equals(myCategoryName))[ FD ]
Line_8 $$ if (path != null && path.size() > 1) -->Line_10 $$ groupNode.add(new MyTreeNode(description, path.get(path.size() - 1)))[ CD ]
Line_2 $$ public void fillOptions(@NotNull ColorAndFontOptions options) -->Line_4 $$ for (EditorSchemeAttributeDescriptor description : getOrderedDescriptors(options)) [ FD ]
Line_9 $$ MyTreeNode groupNode = ensureGroup(root, path, 0)-->Line_10 $$ groupNode.add(new MyTreeNode(description, path.get(path.size() - 1)))[ FD ]
Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode()-->Line_9 $$ MyTreeNode groupNode = ensureGroup(root, path, 0)[ FD ]
