Line_24 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_31 $$ checkValue(providers, row4, 123)[ FD ]
Line_24 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_27 $$ assertEquals(providers.size(), columns.size())[ FD ]
Line_4 $$ ByteBuffer buf = ByteBuffer.allocate(100)-->Line_15 $$ byte[] row = new byte[buf.position()][ FD ]
Line_23 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5)-->Line_25 $$ boolean corrupt = rowDecoder.decodeRow(row, null, providers, columns, buildMap(columns))[ FD ]
Line_21 $$ DecoderTestColumnHandle row4 = new DecoderTestColumnHandle("", 3, "row4", BigintType.BIGINT, "14", "BYTE", null, false, false, false)-->Line_31 $$ checkValue(providers, row4, 123)[ FD ]
Line_24 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_28 $$ checkValue(providers, row1, 4815162342L)[ FD ]
Line_4 $$ ByteBuffer buf = ByteBuffer.allocate(100)-->Line_16 $$ System.arraycopy(buf.array(), 0, row, 0, buf.position())[ FD ]
Line_21 $$ DecoderTestColumnHandle row4 = new DecoderTestColumnHandle("", 3, "row4", BigintType.BIGINT, "14", "BYTE", null, false, false, false)-->Line_23 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5)[ FD ]
Line_15 $$ byte[] row = new byte[buf.position()]-->Line_16 $$ System.arraycopy(buf.array(), 0, row, 0, buf.position())[ FD ]
Line_20 $$ DecoderTestColumnHandle row3 = new DecoderTestColumnHandle("", 2, "row3", BigintType.BIGINT, "12", "SHORT", null, false, false, false)-->Line_30 $$ checkValue(providers, row3, 4567)[ FD ]
Line_17 $$ RawRowDecoder rowDecoder = new RawRowDecoder()-->Line_25 $$ boolean corrupt = rowDecoder.decodeRow(row, null, providers, columns, buildMap(columns))[ FD ]
Line_24 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_30 $$ checkValue(providers, row3, 4567)[ FD ]
Line_24 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_32 $$ checkValue(providers, row5, "Ich bin zwei Oeltanks")[ FD ]
Line_24 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_25 $$ boolean corrupt = rowDecoder.decodeRow(row, null, providers, columns, buildMap(columns))[ FD ]
Line_22 $$ DecoderTestColumnHandle row5 = new DecoderTestColumnHandle("", 4, "row5", VarcharType.VARCHAR, "15", null, null, false, false, false)-->Line_23 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5)[ FD ]
Line_24 $$ Set<FieldValueProvider> providers = new HashSet()-->Line_29 $$ checkValue(providers, row2, 12345678)[ FD ]
Line_18 $$ DecoderTestColumnHandle row1 = new DecoderTestColumnHandle("", 0, "row1", BigintType.BIGINT, "0", "LONG", null, false, false, false)-->Line_28 $$ checkValue(providers, row1, 4815162342L)[ FD ]
Line_22 $$ DecoderTestColumnHandle row5 = new DecoderTestColumnHandle("", 4, "row5", VarcharType.VARCHAR, "15", null, null, false, false, false)-->Line_32 $$ checkValue(providers, row5, "Ich bin zwei Oeltanks")[ FD ]
Line_18 $$ DecoderTestColumnHandle row1 = new DecoderTestColumnHandle("", 0, "row1", BigintType.BIGINT, "0", "LONG", null, false, false, false)-->Line_23 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5)[ FD ]
Line_23 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5)-->Line_27 $$ assertEquals(providers.size(), columns.size())[ FD ]
Line_19 $$ DecoderTestColumnHandle row2 = new DecoderTestColumnHandle("", 1, "row2", BigintType.BIGINT, "8", "INT", null, false, false, false)-->Line_29 $$ checkValue(providers, row2, 12345678)[ FD ]
Line_25 $$ boolean corrupt = rowDecoder.decodeRow(row, null, providers, columns, buildMap(columns))-->Line_26 $$ assertFalse(corrupt)[ FD ]
Line_19 $$ DecoderTestColumnHandle row2 = new DecoderTestColumnHandle("", 1, "row2", BigintType.BIGINT, "8", "INT", null, false, false, false)-->Line_23 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5)[ FD ]
Line_20 $$ DecoderTestColumnHandle row3 = new DecoderTestColumnHandle("", 2, "row3", BigintType.BIGINT, "12", "SHORT", null, false, false, false)-->Line_23 $$ List<DecoderColumnHandle> columns = ImmutableList.of(row1, row2, row3, row4, row5)[ FD ]
Line_15 $$ byte[] row = new byte[buf.position()]-->Line_25 $$ boolean corrupt = rowDecoder.decodeRow(row, null, providers, columns, buildMap(columns))[ FD ]
