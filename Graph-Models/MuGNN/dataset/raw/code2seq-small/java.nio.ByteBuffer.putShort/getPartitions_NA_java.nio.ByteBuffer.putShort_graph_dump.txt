Line_30 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)-->Line_32 $$ map.put(columnHandle, keyPart)[ FD ]
Line_10 $$ HashMap<ColumnHandle, NullableValue> map = new HashMap()-->Line_32 $$ map.put(columnHandle, keyPart)[ FD ]
Line_20 $$ ByteBuffer component = row.getBytesUnsafe(i)-->Line_28 $$ buffer.put(component)[ FD ]
Line_31 $$ NullableValue keyPart = CassandraType.getColumnValueForPartitionKey(row, i, columnHandle.getCassandraType(), columnHandle.getTypeArguments())-->Line_32 $$ map.put(columnHandle, keyPart)[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_3 $$ Iterable<Row> rows = queryPartitionKeys(table, filterPrefix)[ FD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_32 $$ map.put(columnHandle, keyPart)[ CD ]
Line_3 $$ Iterable<Row> rows = queryPartitionKeys(table, filterPrefix)-->Line_4 $$ if (rows == null) [ FD ]
Line_20 $$ ByteBuffer component = row.getBytesUnsafe(i)-->Line_25 $$ buffer.put(component)[ FD ]
Line_9 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_41 $$ byte[] key = new byte[buffer.limit()][ FD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_37 $$ stringBuilder.append(" = ")[ CD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_31 $$ NullableValue keyPart = CassandraType.getColumnValueForPartitionKey(row, i, columnHandle.getCassandraType(), columnHandle.getTypeArguments())[ CD ]
Line_30 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)-->Line_38 $$ stringBuilder.append(CassandraType.getColumnValueForCql(row, i, columnHandle.getCassandraType()))[ FD ]
Line_12 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_37 $$ stringBuilder.append(" = ")[ FD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_30 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)[ FD ]
Line_15 $$ for (Row row : rows) -->Line_38 $$ stringBuilder.append(CassandraType.getColumnValueForCql(row, i, columnHandle.getCassandraType()))[ FD ]
Line_14 $$ ImmutableList.Builder<CassandraPartition> partitions = ImmutableList.builder()-->Line_49 $$ return partitions.build()[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_14 $$ ImmutableList.Builder<CassandraPartition> partitions = ImmutableList.builder()[ CD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_38 $$ stringBuilder.append(CassandraType.getColumnValueForCql(row, i, columnHandle.getCassandraType()))[ CD ]
Line_21 $$ if (isComposite) -->Line_24 $$ buffer.putShort(len)[ CD ]
Line_9 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_24 $$ buffer.putShort(len)[ FD ]
Line_10 $$ HashMap<ColumnHandle, NullableValue> map = new HashMap()-->Line_17 $$ map.clear()[ FD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_20 $$ ByteBuffer component = row.getBytesUnsafe(i)[ FD ]
Line_9 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_28 $$ buffer.put(component)[ FD ]
Line_12 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_34 $$ stringBuilder.append(" AND ")[ FD ]
Line_12 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_38 $$ stringBuilder.append(CassandraType.getColumnValueForCql(row, i, columnHandle.getCassandraType()))[ FD ]
Line_21 $$ if (isComposite) -->Line_26 $$ buffer.put((byte) 0)[ CD ]
Line_9 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_25 $$ buffer.put(component)[ FD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_36 $$ stringBuilder.append(CassandraCqlUtils.validColumnName(columnHandle.getName()))[ CD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_3 $$ Iterable<Row> rows = queryPartitionKeys(table, filterPrefix)[ CD ]
Line_9 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_40 $$ buffer.flip()[ FD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_38 $$ stringBuilder.append(CassandraType.getColumnValueForCql(row, i, columnHandle.getCassandraType()))[ FD ]
Line_9 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_16 $$ buffer.clear()[ FD ]
Line_11 $$ Set<String> uniquePartitionIds = new HashSet()-->Line_45 $$ if (uniquePartitionIds.add(partitionId)) [ FD ]
Line_12 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_18 $$ stringBuilder.setLength(0)[ FD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_21 $$ if (isComposite) [ CD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_12 $$ StringBuilder stringBuilder = new StringBuilder()[ CD ]
Line_30 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)-->Line_31 $$ NullableValue keyPart = CassandraType.getColumnValueForPartitionKey(row, i, columnHandle.getCassandraType(), columnHandle.getTypeArguments())[ FD ]
Line_33 $$ if (i > 0) -->Line_34 $$ stringBuilder.append(" AND ")[ CD ]
Line_8 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()-->Line_13 $$ boolean isComposite = partitionKeyColumns.size() > 1[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_8 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()[ FD ]
Line_15 $$ for (Row row : rows) -->Line_20 $$ ByteBuffer component = row.getBytesUnsafe(i)[ FD ]
Line_21 $$ if (isComposite) -->Line_25 $$ buffer.put(component)[ CD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_10 $$ HashMap<ColumnHandle, NullableValue> map = new HashMap()[ CD ]
Line_21 $$ if (isComposite) -->Line_28 $$ buffer.put(component)[ CD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_33 $$ if (i > 0) [ FD ]
Line_9 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_42 $$ buffer.get(key)[ FD ]
Line_8 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()-->Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) [ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_8 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()[ CD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_9 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)[ CD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_20 $$ ByteBuffer component = row.getBytesUnsafe(i)[ CD ]
Line_8 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()-->Line_30 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)[ FD ]
Line_12 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_36 $$ stringBuilder.append(CassandraCqlUtils.validColumnName(columnHandle.getName()))[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_13 $$ boolean isComposite = partitionKeyColumns.size() > 1[ CD ]
Line_12 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_44 $$ String partitionId = stringBuilder.toString()[ FD ]
Line_45 $$ if (uniquePartitionIds.add(partitionId)) -->Line_46 $$ partitions.add(new CassandraPartition(key, partitionId, tupleDomain, false))[ CD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_49 $$ return partitions.build()[ CD ]
Line_9 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_26 $$ buffer.put((byte) 0)[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_11 $$ Set<String> uniquePartitionIds = new HashSet()[ CD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_33 $$ if (i > 0) [ CD ]
Line_14 $$ ImmutableList.Builder<CassandraPartition> partitions = ImmutableList.builder()-->Line_46 $$ partitions.add(new CassandraPartition(key, partitionId, tupleDomain, false))[ FD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_30 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)[ CD ]
Line_15 $$ for (Row row : rows) -->Line_31 $$ NullableValue keyPart = CassandraType.getColumnValueForPartitionKey(row, i, columnHandle.getCassandraType(), columnHandle.getTypeArguments())[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_4 $$ if (rows == null) [ CD ]
Line_41 $$ byte[] key = new byte[buffer.limit()]-->Line_42 $$ buffer.get(key)[ FD ]
Line_30 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)-->Line_36 $$ stringBuilder.append(CassandraCqlUtils.validColumnName(columnHandle.getName()))[ FD ]
Line_44 $$ String partitionId = stringBuilder.toString()-->Line_45 $$ if (uniquePartitionIds.add(partitionId)) [ FD ]
Line_19 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_31 $$ NullableValue keyPart = CassandraType.getColumnValueForPartitionKey(row, i, columnHandle.getCassandraType(), columnHandle.getTypeArguments())[ FD ]
Line_10 $$ HashMap<ColumnHandle, NullableValue> map = new HashMap()-->Line_43 $$ TupleDomain<ColumnHandle> tupleDomain = TupleDomain.fromFixedValues(map)[ FD ]
