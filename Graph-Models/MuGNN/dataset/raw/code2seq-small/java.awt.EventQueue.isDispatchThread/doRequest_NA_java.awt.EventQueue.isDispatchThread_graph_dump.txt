Line_10 $$ response = doREST(uri, requestBody, headers, verb)-->Line_54 $$ response.close()[ FD ]
Line_19 $$ if (ret.isJsonNull()) -->Line_20 $$ return createResponse(response)[ CD ]
Line_18 $$ JsonElement ret = parseResponse(entity.getContent())-->Line_40 $$ return createResponse(ret, nextPage, response)[ FD ]
Line_35 $$ nextPage = urlString.substring(begin + 1, end)-->Line_40 $$ return createResponse(ret, nextPage, response)[ FD ]
Line_42 $$ if (e.getCause() instanceof CertificateException) -->Line_43 $$ LOG.info("Host SSL certificate is not trusted", e)[ CD ]
Line_53 $$ if (response != null) -->Line_54 $$ response.close()[ CD ]
Line_14 $$ HttpEntity entity = response.getEntity()-->Line_15 $$ if (entity == null) [ FD ]
Line_10 $$ response = doREST(uri, requestBody, headers, verb)-->Line_53 $$ if (response != null) [ FD ]
Line_10 $$ response = doREST(uri, requestBody, headers, verb)-->Line_23 $$ Header pageHeader = response.getFirstHeader("Link")[ FD ]
Line_8 $$ CloseableHttpResponse response = null-->Line_20 $$ return createResponse(response)[ FD ]
Line_8 $$ CloseableHttpResponse response = null-->Line_14 $$ HttpEntity entity = response.getEntity()[ FD ]
Line_10 $$ response = doREST(uri, requestBody, headers, verb)-->Line_16 $$ return createResponse(response)[ FD ]
Line_8 $$ CloseableHttpResponse response = null-->Line_10 $$ response = doREST(uri, requestBody, headers, verb)[ FD ]
Line_2 $$ private ResponsePage doRequest(@NotNull String uri, @Nullable String requestBody, @NotNull Collection<Header> headers, @NotNull HttpVerb verb) throws IOException -->Line_8 $$ CloseableHttpResponse response = null[ CD ]
Line_56 $$ if (!myReusable) -->Line_57 $$ myClient.close()[ CD ]
Line_25 $$ for (HeaderElement element : pageHeader.getElements()) -->Line_28 $$ String urlString = element.toString()[ FD ]
Line_15 $$ if (entity == null) -->Line_16 $$ return createResponse(response)[ CD ]
Line_27 $$ if (rel != null && "next".equals(rel.getValue())) -->Line_30 $$ int end = urlString.lastIndexOf('>')[ CD ]
Line_27 $$ if (rel != null && "next".equals(rel.getValue())) -->Line_31 $$ if (begin == -1 || end == -1) [ CD ]
Line_26 $$ NameValuePair rel = element.getParameterByName("rel")-->Line_27 $$ if (rel != null && "next".equals(rel.getValue())) [ FD ]
Line_14 $$ HttpEntity entity = response.getEntity()-->Line_18 $$ JsonElement ret = parseResponse(entity.getContent())[ FD ]
Line_2 $$ private ResponsePage doRequest(@NotNull String uri, @Nullable String requestBody, @NotNull Collection<Header> headers, @NotNull HttpVerb verb) throws IOException -->Line_3 $$ if (myAborted)[ CD ]
Line_23 $$ Header pageHeader = response.getFirstHeader("Link")-->Line_32 $$ LOG.error("Invalid 'Link' header", "[ FD ]
Line_28 $$ String urlString = element.toString()-->Line_29 $$ int begin = urlString.indexOf('<')[ FD ]
Line_25 $$ for (HeaderElement element : pageHeader.getElements()) -->Line_26 $$ NameValuePair rel = element.getParameterByName("rel")[ FD ]
Line_23 $$ Header pageHeader = response.getFirstHeader("Link")-->Line_25 $$ for (HeaderElement element : pageHeader.getElements()) [ FD ]
Line_8 $$ CloseableHttpResponse response = null-->Line_54 $$ response.close()[ FD ]
Line_2 $$ private ResponsePage doRequest(@NotNull String uri, @Nullable String requestBody, @NotNull Collection<Header> headers, @NotNull HttpVerb verb) throws IOException -->Line_10 $$ response = doREST(uri, requestBody, headers, verb)[ FD ]
Line_10 $$ response = doREST(uri, requestBody, headers, verb)-->Line_40 $$ return createResponse(ret, nextPage, response)[ FD ]
Line_8 $$ CloseableHttpResponse response = null-->Line_23 $$ Header pageHeader = response.getFirstHeader("Link")[ FD ]
Line_10 $$ response = doREST(uri, requestBody, headers, verb)-->Line_14 $$ HttpEntity entity = response.getEntity()[ FD ]
Line_5 $$ if (EventQueue.isDispatchThread() && !ApplicationManager.getApplication().isUnitTestMode()) -->Line_6 $$ LOG.warn("Network operation in EDT")[ CD ]
Line_8 $$ CloseableHttpResponse response = null-->Line_13 $$ checkStatusCode(response, requestBody)[ FD ]
Line_27 $$ if (rel != null && "next".equals(rel.getValue())) -->Line_35 $$ nextPage = urlString.substring(begin + 1, end)[ CD ]
Line_22 $$ String nextPage = null-->Line_35 $$ nextPage = urlString.substring(begin + 1, end)[ FD ]
Line_10 $$ response = doREST(uri, requestBody, headers, verb)-->Line_20 $$ return createResponse(response)[ FD ]
Line_30 $$ int end = urlString.lastIndexOf('>')-->Line_35 $$ nextPage = urlString.substring(begin + 1, end)[ FD ]
Line_2 $$ private ResponsePage doRequest(@NotNull String uri, @Nullable String requestBody, @NotNull Collection<Header> headers, @NotNull HttpVerb verb) throws IOException -->Line_5 $$ if (EventQueue.isDispatchThread() && !ApplicationManager.getApplication().isUnitTestMode()) [ CD ]
Line_22 $$ String nextPage = null-->Line_40 $$ return createResponse(ret, nextPage, response)[ FD ]
Line_28 $$ String urlString = element.toString()-->Line_35 $$ nextPage = urlString.substring(begin + 1, end)[ FD ]
Line_28 $$ String urlString = element.toString()-->Line_30 $$ int end = urlString.lastIndexOf('>')[ FD ]
Line_8 $$ CloseableHttpResponse response = null-->Line_40 $$ return createResponse(ret, nextPage, response)[ FD ]
Line_27 $$ if (rel != null && "next".equals(rel.getValue())) -->Line_29 $$ int begin = urlString.indexOf('<')[ CD ]
Line_31 $$ if (begin == -1 || end == -1) -->Line_32 $$ LOG.error("Invalid 'Link' header", "[ CD ]
Line_8 $$ CloseableHttpResponse response = null-->Line_53 $$ if (response != null) [ FD ]
Line_2 $$ private ResponsePage doRequest(@NotNull String uri, @Nullable String requestBody, @NotNull Collection<Header> headers, @NotNull HttpVerb verb) throws IOException -->Line_13 $$ checkStatusCode(response, requestBody)[ FD ]
Line_18 $$ JsonElement ret = parseResponse(entity.getContent())-->Line_19 $$ if (ret.isJsonNull()) [ FD ]
Line_27 $$ if (rel != null && "next".equals(rel.getValue())) -->Line_28 $$ String urlString = element.toString()[ CD ]
Line_8 $$ CloseableHttpResponse response = null-->Line_16 $$ return createResponse(response)[ FD ]
Line_10 $$ response = doREST(uri, requestBody, headers, verb)-->Line_13 $$ checkStatusCode(response, requestBody)[ FD ]
Line_23 $$ Header pageHeader = response.getFirstHeader("Link")-->Line_24 $$ if (pageHeader != null) [ FD ]
