Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_4 $$ Writer writer = charPipe.getWriter()[ CD ]
Line_10 $$ charBuffer = CharBuffer.allocate(2)-->Line_14 $$ Assert.assertEquals('a', charBuffer.get())[ FD ]
Line_6 $$ CharBuffer charBuffer = CharBuffer.allocate(0)-->Line_14 $$ Assert.assertEquals('a', charBuffer.get())[ FD ]
Line_3 $$ CharPipe charPipe = new CharPipe(4)-->Line_16 $$ charPipe.close()[ FD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_9 $$ Assert.assertEquals(0, result)[ CD ]
Line_8 $$ int result = reader.read(charBuffer)-->Line_9 $$ Assert.assertEquals(0, result)[ FD ]
Line_3 $$ CharPipe charPipe = new CharPipe(4)-->Line_7 $$ Reader reader = charPipe.getReader()[ FD ]
Line_11 $$ result = reader.read(charBuffer)-->Line_12 $$ Assert.assertEquals(2, result)[ FD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_13 $$ charBuffer.flip()[ CD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_14 $$ Assert.assertEquals('a', charBuffer.get())[ CD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_10 $$ charBuffer = CharBuffer.allocate(2)[ CD ]
Line_6 $$ CharBuffer charBuffer = CharBuffer.allocate(0)-->Line_11 $$ result = reader.read(charBuffer)[ FD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_6 $$ CharBuffer charBuffer = CharBuffer.allocate(0)[ CD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_15 $$ Assert.assertEquals('b', charBuffer.get())[ CD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_3 $$ CharPipe charPipe = new CharPipe(4)[ CD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_11 $$ result = reader.read(charBuffer)[ CD ]
Line_8 $$ int result = reader.read(charBuffer)-->Line_11 $$ result = reader.read(charBuffer)[ FD ]
Line_6 $$ CharBuffer charBuffer = CharBuffer.allocate(0)-->Line_15 $$ Assert.assertEquals('b', charBuffer.get())[ FD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_8 $$ int result = reader.read(charBuffer)[ CD ]
Line_10 $$ charBuffer = CharBuffer.allocate(2)-->Line_13 $$ charBuffer.flip()[ FD ]
Line_4 $$ Writer writer = charPipe.getWriter()-->Line_5 $$ writer.write("abcd")[ FD ]
Line_6 $$ CharBuffer charBuffer = CharBuffer.allocate(0)-->Line_10 $$ charBuffer = CharBuffer.allocate(2)[ FD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_16 $$ charPipe.close()[ CD ]
Line_3 $$ CharPipe charPipe = new CharPipe(4)-->Line_4 $$ Writer writer = charPipe.getWriter()[ FD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_7 $$ Reader reader = charPipe.getReader()[ CD ]
Line_7 $$ Reader reader = charPipe.getReader()-->Line_8 $$ int result = reader.read(charBuffer)[ FD ]
Line_10 $$ charBuffer = CharBuffer.allocate(2)-->Line_15 $$ Assert.assertEquals('b', charBuffer.get())[ FD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_12 $$ Assert.assertEquals(2, result)[ CD ]
Line_2 $$ public void testPipingCharBuffer() throws IOException -->Line_5 $$ writer.write("abcd")[ CD ]
Line_6 $$ CharBuffer charBuffer = CharBuffer.allocate(0)-->Line_8 $$ int result = reader.read(charBuffer)[ FD ]
Line_8 $$ int result = reader.read(charBuffer)-->Line_12 $$ Assert.assertEquals(2, result)[ FD ]
Line_10 $$ charBuffer = CharBuffer.allocate(2)-->Line_11 $$ result = reader.read(charBuffer)[ FD ]
Line_6 $$ CharBuffer charBuffer = CharBuffer.allocate(0)-->Line_13 $$ charBuffer.flip()[ FD ]
Line_7 $$ Reader reader = charPipe.getReader()-->Line_11 $$ result = reader.read(charBuffer)[ FD ]
