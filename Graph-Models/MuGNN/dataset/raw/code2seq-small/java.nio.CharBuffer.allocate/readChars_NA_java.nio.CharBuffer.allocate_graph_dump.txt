Line_4 $$ if (readableBytes == 0) -->Line_5 $$ input.release()[ CD ]
Line_9 $$ if (readableBytes < required) -->Line_15 $$ input.release()[ CD ]
Line_9 $$ if (readableBytes < required) -->Line_13 $$ ChannelBufferToString.readIntoCharBuffer(input, readableBytes, chunkedContent)[ CD ]
Line_9 $$ if (readableBytes < required) -->Line_23 $$ return new JsonReaderEx.CharSequenceBackedByChars(ChannelBufferToString.readIntoCharBuffer(input, required, charBuffer))[ CD ]
Line_2 $$ protected final CharSequence readChars(@NotNull ByteBuf input) throws IOException -->Line_13 $$ ChannelBufferToString.readIntoCharBuffer(input, readableBytes, chunkedContent)[ FD ]
Line_18 $$ CharBuffer charBuffer = chunkedContent-->Line_23 $$ return new JsonReaderEx.CharSequenceBackedByChars(ChannelBufferToString.readIntoCharBuffer(input, required, charBuffer))[ FD ]
Line_9 $$ if (readableBytes < required) -->Line_16 $$ return null[ CD ]
Line_2 $$ protected final CharSequence readChars(@NotNull ByteBuf input) throws IOException -->Line_3 $$ int readableBytes = input.readableBytes()[ FD ]
Line_9 $$ if (readableBytes < required) -->Line_18 $$ CharBuffer charBuffer = chunkedContent[ CD ]
Line_3 $$ int readableBytes = input.readableBytes()-->Line_9 $$ if (readableBytes < required) [ FD ]
Line_9 $$ if (readableBytes < required) -->Line_10 $$ if (chunkedContent == null) [ CD ]
Line_8 $$ int required = contentLength - consumedContentByteCount-->Line_23 $$ return new JsonReaderEx.CharSequenceBackedByChars(ChannelBufferToString.readIntoCharBuffer(input, required, charBuffer))[ FD ]
Line_9 $$ if (readableBytes < required) -->Line_19 $$ if (charBuffer != null) [ CD ]
Line_2 $$ protected final CharSequence readChars(@NotNull ByteBuf input) throws IOException -->Line_9 $$ if (readableBytes < required) [ CD ]
Line_2 $$ protected final CharSequence readChars(@NotNull ByteBuf input) throws IOException -->Line_4 $$ if (readableBytes == 0) [ CD ]
Line_18 $$ CharBuffer charBuffer = chunkedContent-->Line_19 $$ if (charBuffer != null) [ FD ]
Line_2 $$ protected final CharSequence readChars(@NotNull ByteBuf input) throws IOException -->Line_3 $$ int readableBytes = input.readableBytes()[ CD ]
Line_4 $$ if (readableBytes == 0) -->Line_6 $$ return null[ CD ]
Line_2 $$ protected final CharSequence readChars(@NotNull ByteBuf input) throws IOException -->Line_8 $$ int required = contentLength - consumedContentByteCount[ CD ]
Line_3 $$ int readableBytes = input.readableBytes()-->Line_13 $$ ChannelBufferToString.readIntoCharBuffer(input, readableBytes, chunkedContent)[ FD ]
Line_2 $$ protected final CharSequence readChars(@NotNull ByteBuf input) throws IOException -->Line_15 $$ input.release()[ FD ]
Line_10 $$ if (chunkedContent == null) -->Line_11 $$ chunkedContent = CharBuffer.allocate(contentLength)[ CD ]
Line_2 $$ protected final CharSequence readChars(@NotNull ByteBuf input) throws IOException -->Line_23 $$ return new JsonReaderEx.CharSequenceBackedByChars(ChannelBufferToString.readIntoCharBuffer(input, required, charBuffer))[ FD ]
Line_8 $$ int required = contentLength - consumedContentByteCount-->Line_9 $$ if (readableBytes < required) [ FD ]
Line_3 $$ int readableBytes = input.readableBytes()-->Line_4 $$ if (readableBytes == 0) [ FD ]
Line_2 $$ protected final CharSequence readChars(@NotNull ByteBuf input) throws IOException -->Line_5 $$ input.release()[ FD ]
