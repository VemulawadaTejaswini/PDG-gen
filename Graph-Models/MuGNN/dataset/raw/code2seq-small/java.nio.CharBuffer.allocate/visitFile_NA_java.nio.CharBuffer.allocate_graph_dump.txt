Line_14 $$ for (int i = 0; i < length; i++) -->Line_39 $$ if (StringUtil.isHexDigit(text.charAt(nextChar)) && StringUtil.isHexDigit(text.charAt(nextChar + 1)) && StringUtil.isHexDigit(text.charAt(nextChar + 2)) && StringUtil.isHexDigit(text.charAt(nextChar + 3))) [ CD ]
Line_20 $$ int previousChar = i - 1-->Line_21 $$ while (previousChar >= 0 && text.charAt(previousChar) == '\\') [ FD ]
Line_11 $$ final CharBuffer charBuffer = CharBuffer.allocate(1)-->Line_46 $$ charBuffer.clear()[ FD ]
Line_14 $$ for (int i = 0; i < length; i++) -->Line_56 $$ registerErrorAtOffset(file, i, escapeEnd - i, Character.valueOf(d))[ FD ]
Line_10 $$ final CharsetEncoder encoder = charset.newEncoder().onUnmappableCharacter(CodingErrorAction.REPORT)-->Line_48 $$ final CoderResult coderResult = encoder.encode(charBuffer, byteBuffer, true)[ FD ]
Line_39 $$ if (StringUtil.isHexDigit(text.charAt(nextChar)) && StringUtil.isHexDigit(text.charAt(nextChar + 1)) && StringUtil.isHexDigit(text.charAt(nextChar + 2)) && StringUtil.isHexDigit(text.charAt(nextChar + 3))) -->Line_47 $$ charBuffer.put(d).rewind()[ CD ]
Line_15 $$ final char c = text.charAt(i)-->Line_16 $$ if (c != '\\') [ FD ]
Line_11 $$ final CharBuffer charBuffer = CharBuffer.allocate(1)-->Line_48 $$ final CoderResult coderResult = encoder.encode(charBuffer, byteBuffer, true)[ FD ]
Line_11 $$ final CharBuffer charBuffer = CharBuffer.allocate(1)-->Line_47 $$ charBuffer.put(d).rewind()[ FD ]
Line_39 $$ if (StringUtil.isHexDigit(text.charAt(nextChar)) && StringUtil.isHexDigit(text.charAt(nextChar + 1)) && StringUtil.isHexDigit(text.charAt(nextChar + 2)) && StringUtil.isHexDigit(text.charAt(nextChar + 3))) -->Line_46 $$ charBuffer.clear()[ CD ]
Line_14 $$ for (int i = 0; i < length; i++) -->Line_25 $$ if (!isEscape) [ CD ]
Line_19 $$ boolean isEscape = true-->Line_22 $$ isEscape = !isEscape[ FD ]
Line_39 $$ if (StringUtil.isHexDigit(text.charAt(nextChar)) && StringUtil.isHexDigit(text.charAt(nextChar + 1)) && StringUtil.isHexDigit(text.charAt(nextChar + 2)) && StringUtil.isHexDigit(text.charAt(nextChar + 3))) -->Line_53 $$ if (element != null && isSuppressedFor(element)) [ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_52 $$ final PsiElement element = file.findElementAt(i)[ FD ]
Line_14 $$ for (int i = 0; i < length; i++) -->Line_29 $$ do [ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_11 $$ final CharBuffer charBuffer = CharBuffer.allocate(1)[ CD ]
Line_21 $$ while (previousChar >= 0 && text.charAt(previousChar) == '\\') -->Line_23 $$ previousChar--[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_8 $$ final String text = file.getText()[ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_7 $$ final VirtualFile virtualFile = file.getVirtualFile()[ CD ]
Line_8 $$ final String text = file.getText()-->Line_29 $$ do [ FD ]
Line_39 $$ if (StringUtil.isHexDigit(text.charAt(nextChar)) && StringUtil.isHexDigit(text.charAt(nextChar + 1)) && StringUtil.isHexDigit(text.charAt(nextChar + 2)) && StringUtil.isHexDigit(text.charAt(nextChar + 3))) -->Line_49 $$ if (coderResult.isError()) [ CD ]
Line_39 $$ if (StringUtil.isHexDigit(text.charAt(nextChar)) && StringUtil.isHexDigit(text.charAt(nextChar + 1)) && StringUtil.isHexDigit(text.charAt(nextChar + 2)) && StringUtil.isHexDigit(text.charAt(nextChar + 3))) -->Line_52 $$ final PsiElement element = file.findElementAt(i)[ CD ]
Line_8 $$ final String text = file.getText()-->Line_15 $$ final char c = text.charAt(i)[ FD ]
Line_14 $$ for (int i = 0; i < length; i++) -->Line_16 $$ if (c != '\\') [ CD ]
Line_7 $$ final VirtualFile virtualFile = file.getVirtualFile()-->Line_9 $$ final Charset charset = LoadTextUtil.extractCharsetFromFileContent(file.getProject(), virtualFile, text)[ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_56 $$ registerErrorAtOffset(file, i, escapeEnd - i, Character.valueOf(d))[ FD ]
Line_14 $$ for (int i = 0; i < length; i++) -->Line_21 $$ while (previousChar >= 0 && text.charAt(previousChar) == '\\') [ CD ]
Line_14 $$ for (int i = 0; i < length; i++) -->Line_19 $$ boolean isEscape = true[ CD ]
Line_13 $$ final int length = text.length()-->Line_31 $$ if (nextChar >= length) [ FD ]
Line_4 $$ if (InjectedLanguageManager.getInstance(file.getProject()).isInjectedFragment(file) || !file.isPhysical()) -->Line_5 $$ return[ CD ]
Line_22 $$ isEscape = !isEscape-->Line_25 $$ if (!isEscape) [ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_10 $$ final CharsetEncoder encoder = charset.newEncoder().onUnmappableCharacter(CodingErrorAction.REPORT)[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_7 $$ final VirtualFile virtualFile = file.getVirtualFile()[ FD ]
Line_29 $$ do -->Line_31 $$ if (nextChar >= length) [ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_8 $$ final String text = file.getText()[ CD ]
Line_8 $$ final String text = file.getText()-->Line_13 $$ final int length = text.length()[ FD ]
Line_39 $$ if (StringUtil.isHexDigit(text.charAt(nextChar)) && StringUtil.isHexDigit(text.charAt(nextChar + 1)) && StringUtil.isHexDigit(text.charAt(nextChar + 2)) && StringUtil.isHexDigit(text.charAt(nextChar + 3))) -->Line_45 $$ byteBuffer.clear()[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_12 $$ final ByteBuffer byteBuffer = ByteBuffer.allocate(10)[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_4 $$ if (InjectedLanguageManager.getInstance(file.getProject()).isInjectedFragment(file) || !file.isPhysical()) [ CD ]
Line_14 $$ for (int i = 0; i < length; i++) -->Line_20 $$ int previousChar = i - 1[ CD ]
Line_8 $$ final String text = file.getText()-->Line_21 $$ while (previousChar >= 0 && text.charAt(previousChar) == '\\') [ FD ]
Line_14 $$ for (int i = 0; i < length; i++) -->Line_15 $$ final char c = text.charAt(i)[ FD ]
Line_20 $$ int previousChar = i - 1-->Line_23 $$ previousChar--[ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_3 $$ super.visitFile(file)[ FD ]
Line_14 $$ for (int i = 0; i < length; i++) -->Line_36 $$ if (nextChar == i + 1 || nextChar + 3 >= length) [ CD ]
Line_9 $$ final Charset charset = LoadTextUtil.extractCharsetFromFileContent(file.getProject(), virtualFile, text)-->Line_10 $$ final CharsetEncoder encoder = charset.newEncoder().onUnmappableCharacter(CodingErrorAction.REPORT)[ FD ]
Line_13 $$ final int length = text.length()-->Line_14 $$ for (int i = 0; i < length; i++) [ FD ]
Line_8 $$ final String text = file.getText()-->Line_39 $$ if (StringUtil.isHexDigit(text.charAt(nextChar)) && StringUtil.isHexDigit(text.charAt(nextChar + 1)) && StringUtil.isHexDigit(text.charAt(nextChar + 2)) && StringUtil.isHexDigit(text.charAt(nextChar + 3))) [ FD ]
Line_12 $$ final ByteBuffer byteBuffer = ByteBuffer.allocate(10)-->Line_45 $$ byteBuffer.clear()[ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_3 $$ super.visitFile(file)[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_9 $$ final Charset charset = LoadTextUtil.extractCharsetFromFileContent(file.getProject(), virtualFile, text)[ CD ]
Line_19 $$ boolean isEscape = true-->Line_25 $$ if (!isEscape) [ FD ]
Line_8 $$ final String text = file.getText()-->Line_9 $$ final Charset charset = LoadTextUtil.extractCharsetFromFileContent(file.getProject(), virtualFile, text)[ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_14 $$ for (int i = 0; i < length; i++) [ CD ]
Line_14 $$ for (int i = 0; i < length; i++) -->Line_52 $$ final PsiElement element = file.findElementAt(i)[ FD ]
Line_53 $$ if (element != null && isSuppressedFor(element)) -->Line_54 $$ return[ CD ]
Line_8 $$ final String text = file.getText()-->Line_41 $$ final char d = (char) Integer.parseInt(text.substring(nextChar, escapeEnd), 16)[ FD ]
Line_39 $$ if (StringUtil.isHexDigit(text.charAt(nextChar)) && StringUtil.isHexDigit(text.charAt(nextChar + 1)) && StringUtil.isHexDigit(text.charAt(nextChar + 2)) && StringUtil.isHexDigit(text.charAt(nextChar + 3))) -->Line_42 $$ if (Character.isISOControl(d)) [ CD ]
Line_14 $$ for (int i = 0; i < length; i++) -->Line_15 $$ final char c = text.charAt(i)[ CD ]
Line_21 $$ while (previousChar >= 0 && text.charAt(previousChar) == '\\') -->Line_22 $$ isEscape = !isEscape[ CD ]
Line_39 $$ if (StringUtil.isHexDigit(text.charAt(nextChar)) && StringUtil.isHexDigit(text.charAt(nextChar + 1)) && StringUtil.isHexDigit(text.charAt(nextChar + 2)) && StringUtil.isHexDigit(text.charAt(nextChar + 3))) -->Line_48 $$ final CoderResult coderResult = encoder.encode(charBuffer, byteBuffer, true)[ CD ]
Line_39 $$ if (StringUtil.isHexDigit(text.charAt(nextChar)) && StringUtil.isHexDigit(text.charAt(nextChar + 1)) && StringUtil.isHexDigit(text.charAt(nextChar + 2)) && StringUtil.isHexDigit(text.charAt(nextChar + 3))) -->Line_56 $$ registerErrorAtOffset(file, i, escapeEnd - i, Character.valueOf(d))[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_13 $$ final int length = text.length()[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_9 $$ final Charset charset = LoadTextUtil.extractCharsetFromFileContent(file.getProject(), virtualFile, text)[ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_4 $$ if (InjectedLanguageManager.getInstance(file.getProject()).isInjectedFragment(file) || !file.isPhysical()) [ FD ]
Line_12 $$ final ByteBuffer byteBuffer = ByteBuffer.allocate(10)-->Line_48 $$ final CoderResult coderResult = encoder.encode(charBuffer, byteBuffer, true)[ FD ]
