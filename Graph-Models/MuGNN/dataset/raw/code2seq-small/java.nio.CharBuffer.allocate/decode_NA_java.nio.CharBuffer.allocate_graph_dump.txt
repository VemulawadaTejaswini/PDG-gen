Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_24 $$ while (true) [ CD ]
Line_34 $$ int newCapacity = 10 + dest.capacity() + (int) (inbuf.remaining() * decoder.maxCharsPerByte())-->Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)[ FD ]
Line_3 $$ CharsetDecoder decoder-->Line_34 $$ int newCapacity = 10 + dest.capacity() + (int) (inbuf.remaining() * decoder.maxCharsPerByte())[ FD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))[ CD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_4 $$ String encodingName = getEncodingName()[ CD ]
Line_12 $$ action = CodingErrorAction.REPORT-->Line_14 $$ decoder.onMalformedInput(action).onUnmappableCharacter(action)[ FD ]
Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_38 $$ log.error(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_36 $$ if (result.isMalformed() || result.isUnmappable()) -->Line_37 $$ if (!getSource().allowEncodingErrors()) [ CD ]
Line_24 $$ while (true) -->Line_25 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ CD ]
Line_4 $$ String encodingName = getEncodingName()-->Line_6 $$ Charset charset = (this.charset == null) ? Charset.forName(encodingName) : this.charset[ FD ]
Line_37 $$ if (!getSource().allowEncodingErrors()) -->Line_40 $$ log.warning(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ CD ]
Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_45 $$ dest.put((char) 0xfffd)[ FD ]
Line_25 $$ CoderResult result = decoder.decode(inbuf, dest, true)-->Line_33 $$ if (result.isOverflow()) [ FD ]
Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_30 $$ dest.flip()[ FD ]
Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_38 $$ log.error(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_4 $$ String encodingName = getEncodingName()-->Line_19 $$ log.error("unsupported.encoding", encodingName)[ FD ]
Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_43 $$ dest.position(dest.limit())[ FD ]
Line_9 $$ if (ignoreEncodingErrors) -->Line_10 $$ action = CodingErrorAction.REPLACE[ CD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_34 $$ int newCapacity = 10 + dest.capacity() + (int) (inbuf.remaining() * decoder.maxCharsPerByte())[ FD ]
Line_4 $$ String encodingName = getEncodingName()-->Line_16 $$ log.error("unsupported.encoding", encodingName)[ FD ]
Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_25 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ FD ]
Line_36 $$ if (result.isMalformed() || result.isUnmappable()) -->Line_45 $$ dest.put((char) 0xfffd)[ CD ]
Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_34 $$ int newCapacity = 10 + dest.capacity() + (int) (inbuf.remaining() * decoder.maxCharsPerByte())[ FD ]
Line_25 $$ CoderResult result = decoder.decode(inbuf, dest, true)-->Line_42 $$ inbuf.position(inbuf.position() + result.length())[ FD ]
Line_8 $$ CodingErrorAction action-->Line_12 $$ action = CodingErrorAction.REPORT[ FD ]
Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_43 $$ dest.position(dest.limit())[ FD ]
Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)[ FD ]
Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_40 $$ log.warning(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_26 $$ dest.flip()[ FD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_42 $$ inbuf.position(inbuf.position() + result.length())[ FD ]
Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_28 $$ if (dest.limit() == dest.capacity()) [ FD ]
Line_10 $$ action = CodingErrorAction.REPLACE-->Line_14 $$ decoder.onMalformedInput(action).onUnmappableCharacter(action)[ FD ]
Line_28 $$ if (dest.limit() == dest.capacity()) -->Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)[ CD ]
Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_44 $$ dest.limit(dest.capacity())[ FD ]
Line_37 $$ if (!getSource().allowEncodingErrors()) -->Line_38 $$ log.error(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ CD ]
Line_33 $$ if (result.isOverflow()) -->Line_34 $$ int newCapacity = 10 + dest.capacity() + (int) (inbuf.remaining() * decoder.maxCharsPerByte())[ CD ]
Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)[ FD ]
Line_6 $$ Charset charset = (this.charset == null) ? Charset.forName(encodingName) : this.charset-->Line_38 $$ log.error(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_25 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ FD ]
Line_27 $$ if (result.isUnderflow()) -->Line_33 $$ if (result.isOverflow()) [ CD ]
Line_7 $$ decoder = charset.newDecoder()-->Line_22 $$ final float factor = decoder.averageCharsPerByte() * 0.8f + decoder.maxCharsPerByte() * 0.2f[ FD ]
Line_25 $$ CoderResult result = decoder.decode(inbuf, dest, true)-->Line_27 $$ if (result.isUnderflow()) [ FD ]
Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_25 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ FD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_3 $$ CharsetDecoder decoder[ CD ]
Line_24 $$ while (true) -->Line_26 $$ dest.flip()[ CD ]
Line_7 $$ decoder = charset.newDecoder()-->Line_34 $$ int newCapacity = 10 + dest.capacity() + (int) (inbuf.remaining() * decoder.maxCharsPerByte())[ FD ]
Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_44 $$ dest.limit(dest.capacity())[ FD ]
Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_40 $$ log.warning(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_3 $$ CharsetDecoder decoder-->Line_14 $$ decoder.onMalformedInput(action).onUnmappableCharacter(action)[ FD ]
Line_8 $$ CodingErrorAction action-->Line_10 $$ action = CodingErrorAction.REPLACE[ FD ]
Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_45 $$ dest.put((char) 0xfffd)[ FD ]
Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_34 $$ int newCapacity = 10 + dest.capacity() + (int) (inbuf.remaining() * decoder.maxCharsPerByte())[ FD ]
Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)[ FD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))[ FD ]
Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_43 $$ dest.position(dest.limit())[ FD ]
Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_26 $$ dest.flip()[ FD ]
Line_8 $$ CodingErrorAction action-->Line_14 $$ decoder.onMalformedInput(action).onUnmappableCharacter(action)[ FD ]
Line_3 $$ CharsetDecoder decoder-->Line_22 $$ final float factor = decoder.averageCharsPerByte() * 0.8f + decoder.maxCharsPerByte() * 0.2f[ FD ]
Line_36 $$ if (result.isMalformed() || result.isUnmappable()) -->Line_42 $$ inbuf.position(inbuf.position() + result.length())[ CD ]
Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_25 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ FD ]
Line_36 $$ if (result.isMalformed() || result.isUnmappable()) -->Line_43 $$ dest.position(dest.limit())[ CD ]
Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_28 $$ if (dest.limit() == dest.capacity()) [ FD ]
Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_34 $$ int newCapacity = 10 + dest.capacity() + (int) (inbuf.remaining() * decoder.maxCharsPerByte())[ FD ]
Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)[ FD ]
Line_6 $$ Charset charset = (this.charset == null) ? Charset.forName(encodingName) : this.charset-->Line_40 $$ log.warning(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_28 $$ if (dest.limit() == dest.capacity()) [ FD ]
Line_33 $$ if (result.isOverflow()) -->Line_36 $$ if (result.isMalformed() || result.isUnmappable()) [ CD ]
Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_44 $$ dest.limit(dest.capacity())[ FD ]
Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_38 $$ log.error(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_6 $$ Charset charset = (this.charset == null) ? Charset.forName(encodingName) : this.charset-->Line_7 $$ decoder = charset.newDecoder()[ FD ]
Line_33 $$ if (result.isOverflow()) -->Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)[ CD ]
Line_27 $$ if (result.isUnderflow()) -->Line_32 $$ return dest[ CD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_22 $$ final float factor = decoder.averageCharsPerByte() * 0.8f + decoder.maxCharsPerByte() * 0.2f[ CD ]
Line_27 $$ if (result.isUnderflow()) -->Line_28 $$ if (dest.limit() == dest.capacity()) [ CD ]
Line_36 $$ if (result.isMalformed() || result.isUnmappable()) -->Line_44 $$ dest.limit(dest.capacity())[ CD ]
Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_45 $$ dest.put((char) 0xfffd)[ FD ]
Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_26 $$ dest.flip()[ FD ]
Line_9 $$ if (ignoreEncodingErrors) -->Line_12 $$ action = CodingErrorAction.REPORT[ CD ]
Line_25 $$ CoderResult result = decoder.decode(inbuf, dest, true)-->Line_36 $$ if (result.isMalformed() || result.isUnmappable()) [ FD ]
Line_7 $$ decoder = charset.newDecoder()-->Line_25 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ FD ]
Line_35 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_30 $$ dest.flip()[ FD ]
Line_7 $$ decoder = charset.newDecoder()-->Line_14 $$ decoder.onMalformedInput(action).onUnmappableCharacter(action)[ FD ]
Line_24 $$ while (true) -->Line_27 $$ if (result.isUnderflow()) [ CD ]
Line_29 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_40 $$ log.warning(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_3 $$ CharsetDecoder decoder-->Line_7 $$ decoder = charset.newDecoder()[ FD ]
Line_23 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_30 $$ dest.flip()[ FD ]
Line_28 $$ if (dest.limit() == dest.capacity()) -->Line_30 $$ dest.flip()[ CD ]
Line_3 $$ CharsetDecoder decoder-->Line_25 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ FD ]
Line_10 $$ action = CodingErrorAction.REPLACE-->Line_12 $$ action = CodingErrorAction.REPORT[ FD ]
