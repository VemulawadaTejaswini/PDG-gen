Line_13 $$ final LinkedHashMap<Executor, ProgramRunner> availableRunners = new LinkedHashMap<Executor, ProgramRunner>()-->Line_42 $$ performAction(environmentBuilder.runner(availableRunners.get(value)).executor((Executor) value))[ FD ]
Line_13 $$ final LinkedHashMap<Executor, ProgramRunner> availableRunners = new LinkedHashMap<Executor, ProgramRunner>()-->Line_23 $$ performAction(environmentBuilder.runner(availableRunners.get(environment.getExecutor())))[ FD ]
Line_2 $$ void execute(@NotNull AnActionEvent e, @NotNull ExecutionEnvironment environment) -->Line_13 $$ final LinkedHashMap<Executor, ProgramRunner> availableRunners = new LinkedHashMap<Executor, ProgramRunner>()[ CD ]
Line_2 $$ void execute(@NotNull AnActionEvent e, @NotNull ExecutionEnvironment environment) -->Line_23 $$ performAction(environmentBuilder.runner(availableRunners.get(environment.getExecutor())))[ FD ]
Line_2 $$ void execute(@NotNull AnActionEvent e, @NotNull ExecutionEnvironment environment) -->Line_27 $$ list.setSelectedValue(environment.getExecutor(), true)[ FD ]
Line_2 $$ void execute(@NotNull AnActionEvent e, @NotNull ExecutionEnvironment environment) -->Line_9 $$ if (!(event instanceof MouseEvent) || !event.isShiftDown()) [ CD ]
Line_3 $$ MyRunProfile profile = getRunProfile(environment)-->Line_15 $$ final ProgramRunner runner = RunnerRegistry.getInstance().getRunner(ex.getId(), profile)[ FD ]
Line_22 $$ if (availableRunners.size() == 1) -->Line_27 $$ list.setSelectedValue(environment.getExecutor(), true)[ CD ]
Line_2 $$ void execute(@NotNull AnActionEvent e, @NotNull ExecutionEnvironment environment) -->Line_4 $$ if (profile == null) [ CD ]
Line_2 $$ void execute(@NotNull AnActionEvent e, @NotNull ExecutionEnvironment environment) -->Line_8 $$ final InputEvent event = e.getInputEvent()[ FD ]
Line_31 $$ if (value instanceof Executor) -->Line_33 $$ setIcon(((Executor) value).getIcon())[ CD ]
Line_28 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_31 $$ if (value instanceof Executor) [ CD ]
Line_13 $$ final LinkedHashMap<Executor, ProgramRunner> availableRunners = new LinkedHashMap<Executor, ProgramRunner>()-->Line_17 $$ availableRunners.put(ex, runner)[ FD ]
Line_31 $$ if (value instanceof Executor) -->Line_32 $$ setText(UIUtil.removeMnemonic(((Executor) value).getStartActionText()))[ CD ]
Line_2 $$ void execute(@NotNull AnActionEvent e, @NotNull ExecutionEnvironment environment) -->Line_20 $$ if (availableRunners.isEmpty()) [ CD ]
Line_14 $$ for (Executor ex : new Executor[] -->Line_17 $$ availableRunners.put(ex, runner)[ FD ]
Line_7 $$ final ExecutionEnvironmentBuilder environmentBuilder = new ExecutionEnvironmentBuilder(environment).runProfile(profile)-->Line_23 $$ performAction(environmentBuilder.runner(availableRunners.get(environment.getExecutor())))[ FD ]
Line_4 $$ if (profile == null) -->Line_5 $$ return[ CD ]
Line_25 $$ final JBList list = new JBList(availableRunners.keySet())-->Line_26 $$ list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ FD ]
Line_28 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_31 $$ if (value instanceof Executor) [ FD ]
Line_38 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Restart Failed Tests").setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() -->Line_41 $$ if (value instanceof Executor) [ CD ]
Line_38 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Restart Failed Tests").setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() -->Line_40 $$ final Object value = list.getSelectedValue()[ CD ]
Line_13 $$ final LinkedHashMap<Executor, ProgramRunner> availableRunners = new LinkedHashMap<Executor, ProgramRunner>()-->Line_25 $$ final JBList list = new JBList(availableRunners.keySet())[ FD ]
Line_25 $$ final JBList list = new JBList(availableRunners.keySet())-->Line_40 $$ final Object value = list.getSelectedValue()[ FD ]
Line_3 $$ MyRunProfile profile = getRunProfile(environment)-->Line_4 $$ if (profile == null) [ FD ]
Line_28 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_41 $$ if (value instanceof Executor) [ FD ]
Line_7 $$ final ExecutionEnvironmentBuilder environmentBuilder = new ExecutionEnvironmentBuilder(environment).runProfile(profile)-->Line_10 $$ performAction(environmentBuilder)[ FD ]
Line_20 $$ if (availableRunners.isEmpty()) -->Line_22 $$ if (availableRunners.size() == 1) [ CD ]
Line_13 $$ final LinkedHashMap<Executor, ProgramRunner> availableRunners = new LinkedHashMap<Executor, ProgramRunner>()-->Line_22 $$ if (availableRunners.size() == 1) [ FD ]
Line_16 $$ if (runner != null) -->Line_17 $$ availableRunners.put(ex, runner)[ CD ]
Line_40 $$ final Object value = list.getSelectedValue()-->Line_42 $$ performAction(environmentBuilder.runner(availableRunners.get(value)).executor((Executor) value))[ FD ]
Line_28 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_30 $$ final Component component = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ CD ]
Line_8 $$ final InputEvent event = e.getInputEvent()-->Line_9 $$ if (!(event instanceof MouseEvent) || !event.isShiftDown()) [ FD ]
Line_2 $$ void execute(@NotNull AnActionEvent e, @NotNull ExecutionEnvironment environment) -->Line_3 $$ MyRunProfile profile = getRunProfile(environment)[ CD ]
Line_22 $$ if (availableRunners.size() == 1) -->Line_38 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Restart Failed Tests").setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() [ CD ]
Line_28 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_30 $$ final Component component = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_40 $$ final Object value = list.getSelectedValue()-->Line_41 $$ if (value instanceof Executor) [ FD ]
Line_15 $$ final ProgramRunner runner = RunnerRegistry.getInstance().getRunner(ex.getId(), profile)-->Line_16 $$ if (runner != null) [ FD ]
Line_14 $$ for (Executor ex : new Executor[] -->Line_15 $$ final ProgramRunner runner = RunnerRegistry.getInstance().getRunner(ex.getId(), profile)[ FD ]
Line_2 $$ void execute(@NotNull AnActionEvent e, @NotNull ExecutionEnvironment environment) -->Line_21 $$ LOG.error(environment.getExecutor().getActionName() + " is not available now")[ FD ]
Line_22 $$ if (availableRunners.size() == 1) -->Line_25 $$ final JBList list = new JBList(availableRunners.keySet())[ CD ]
Line_3 $$ MyRunProfile profile = getRunProfile(environment)-->Line_7 $$ final ExecutionEnvironmentBuilder environmentBuilder = new ExecutionEnvironmentBuilder(environment).runProfile(profile)[ FD ]
Line_22 $$ if (availableRunners.size() == 1) -->Line_23 $$ performAction(environmentBuilder.runner(availableRunners.get(environment.getExecutor())))[ CD ]
Line_25 $$ final JBList list = new JBList(availableRunners.keySet())-->Line_38 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Restart Failed Tests").setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() [ FD ]
Line_41 $$ if (value instanceof Executor) -->Line_42 $$ performAction(environmentBuilder.runner(availableRunners.get(value)).executor((Executor) value))[ CD ]
Line_7 $$ final ExecutionEnvironmentBuilder environmentBuilder = new ExecutionEnvironmentBuilder(environment).runProfile(profile)-->Line_42 $$ performAction(environmentBuilder.runner(availableRunners.get(value)).executor((Executor) value))[ FD ]
Line_9 $$ if (!(event instanceof MouseEvent) || !event.isShiftDown()) -->Line_11 $$ return[ CD ]
Line_2 $$ void execute(@NotNull AnActionEvent e, @NotNull ExecutionEnvironment environment) -->Line_8 $$ final InputEvent event = e.getInputEvent()[ CD ]
Line_2 $$ void execute(@NotNull AnActionEvent e, @NotNull ExecutionEnvironment environment) -->Line_7 $$ final ExecutionEnvironmentBuilder environmentBuilder = new ExecutionEnvironmentBuilder(environment).runProfile(profile)[ CD ]
Line_25 $$ final JBList list = new JBList(availableRunners.keySet())-->Line_27 $$ list.setSelectedValue(environment.getExecutor(), true)[ FD ]
Line_22 $$ if (availableRunners.size() == 1) -->Line_28 $$ list.setCellRenderer(new DefaultListCellRenderer() [ CD ]
Line_25 $$ final JBList list = new JBList(availableRunners.keySet())-->Line_30 $$ final Component component = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_13 $$ final LinkedHashMap<Executor, ProgramRunner> availableRunners = new LinkedHashMap<Executor, ProgramRunner>()-->Line_20 $$ if (availableRunners.isEmpty()) [ FD ]
Line_28 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_42 $$ performAction(environmentBuilder.runner(availableRunners.get(value)).executor((Executor) value))[ FD ]
Line_8 $$ final InputEvent event = e.getInputEvent()-->Line_38 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Restart Failed Tests").setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() [ FD ]
Line_9 $$ if (!(event instanceof MouseEvent) || !event.isShiftDown()) -->Line_10 $$ performAction(environmentBuilder)[ CD ]
Line_22 $$ if (availableRunners.size() == 1) -->Line_26 $$ list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ CD ]
Line_28 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_40 $$ final Object value = list.getSelectedValue()[ FD ]
Line_28 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_38 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Restart Failed Tests").setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() [ FD ]
Line_2 $$ void execute(@NotNull AnActionEvent e, @NotNull ExecutionEnvironment environment) -->Line_3 $$ MyRunProfile profile = getRunProfile(environment)[ FD ]
Line_28 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_35 $$ return component[ CD ]
Line_25 $$ final JBList list = new JBList(availableRunners.keySet())-->Line_28 $$ list.setCellRenderer(new DefaultListCellRenderer() [ FD ]
Line_15 $$ final ProgramRunner runner = RunnerRegistry.getInstance().getRunner(ex.getId(), profile)-->Line_17 $$ availableRunners.put(ex, runner)[ FD ]
Line_20 $$ if (availableRunners.isEmpty()) -->Line_21 $$ LOG.error(environment.getExecutor().getActionName() + " is not available now")[ CD ]
