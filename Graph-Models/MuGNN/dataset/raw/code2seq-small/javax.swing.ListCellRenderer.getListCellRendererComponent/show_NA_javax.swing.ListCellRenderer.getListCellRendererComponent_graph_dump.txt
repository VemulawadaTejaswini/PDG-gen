Line_76 $$ final JBPopup popup = builder.setTitle(title).setItemChoosenCallback(runnable).setMovable(true).setCancelCallback(new Computable<Boolean>() -->Line_78 $$ HintUpdateSupply.hideHint(list)[ CD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_37 $$ if (value instanceof AdditionalAction) [ CD ]
Line_76 $$ final JBPopup popup = builder.setTitle(title).setItemChoosenCallback(runnable).setMovable(true).setCancelCallback(new Computable<Boolean>() -->Line_84 $$ popup.cancel()[ CD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_40 $$ PsiElementListCellRenderer renderer = getRenderer(value, gotoData.renderers, gotoData)[ CD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_36 $$ return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_91 $$ gotoData.listUpdaterTask.init((AbstractPopup) popup, list, usageView)[ FD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_35 $$ if (value == null)[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_3 $$ final PsiElement[] targets = gotoData.targets[ CD ]
Line_19 $$ final String name = ((PsiNamedElement) gotoData.source).getName()-->Line_83 $$ usageView.set(FindUtil.showInUsageView(gotoData.source, gotoData.targets, getFindUsagesTitle(gotoData.source, name, gotoData.targets.length), project))[ FD ]
Line_51 $$ if (element instanceof AdditionalAction) -->Line_54 $$ Navigatable nav = element instanceof Navigatable ? (Navigatable) element : EditSourceUtil.getDescriptor((PsiElement) element)[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_32 $$ list.setFont(EditorUtil.getEditorFont())[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_9 $$ if (targets.length == 1 && additionalActions.isEmpty()) [ CD ]
Line_27 $$ final JBListWithHintProvider list = new JBListWithHintProvider(new CollectionListModel<Object>(allElements)) -->Line_36 $$ return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_69 $$ if (o instanceof AdditionalAction) -->Line_70 $$ return ((AdditionalAction) o).getText()[ CD ]
Line_24 $$ List<Object> allElements = new ArrayList<Object>(targets.length + additionalActions.size())-->Line_25 $$ Collections.addAll(allElements, targets)[ FD ]
Line_50 $$ for (Object element : selectedElements) -->Line_51 $$ if (element instanceof AdditionalAction) [ FD ]
Line_27 $$ final JBListWithHintProvider list = new JBListWithHintProvider(new CollectionListModel<Object>(allElements)) -->Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() [ FD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_41 $$ return renderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ CD ]
Line_51 $$ if (element instanceof AdditionalAction) -->Line_52 $$ ((AdditionalAction) element).execute()[ CD ]
Line_56 $$ if (nav != null && nav.canNavigate()) -->Line_57 $$ navigateToElement(nav)[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_25 $$ Collections.addAll(allElements, targets)[ CD ]
Line_9 $$ if (targets.length == 1 && additionalActions.isEmpty()) -->Line_10 $$ Navigatable descriptor = targets[0] instanceof Navigatable ? (Navigatable) targets[0] : EditSourceUtil.getDescriptor(targets[0])[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_94 $$ popup.showInBestPositionFor(editor)[ CD ]
Line_24 $$ List<Object> allElements = new ArrayList<Object>(targets.length + additionalActions.size())-->Line_26 $$ allElements.addAll(additionalActions)[ FD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_40 $$ PsiElementListCellRenderer renderer = getRenderer(value, gotoData.renderers, gotoData)[ FD ]
Line_47 $$ if (ids == null || ids.length == 0)-->Line_48 $$ return[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_60 $$ DumbService.getInstance(project).showDumbModeNotification("Navigation is not available while indexing")[ FD ]
Line_10 $$ Navigatable descriptor = targets[0] instanceof Navigatable ? (Navigatable) targets[0] : EditSourceUtil.getDescriptor(targets[0])-->Line_11 $$ if (descriptor != null && descriptor.canNavigate()) [ FD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_49 $$ Object[] selectedElements = list.getSelectedValues()[ FD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_94 $$ popup.showInBestPositionFor(editor)[ FD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_90 $$ if (gotoData.listUpdaterTask != null) [ CD ]
Line_90 $$ if (gotoData.listUpdaterTask != null) -->Line_91 $$ gotoData.listUpdaterTask.init((AbstractPopup) popup, list, usageView)[ CD ]
Line_10 $$ Navigatable descriptor = targets[0] instanceof Navigatable ? (Navigatable) targets[0] : EditSourceUtil.getDescriptor(targets[0])-->Line_12 $$ navigateToElement(descriptor)[ FD ]
Line_67 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_69 $$ if (o instanceof AdditionalAction) [ FD ]
Line_76 $$ final JBPopup popup = builder.setTitle(title).setItemChoosenCallback(runnable).setMovable(true).setCancelCallback(new Computable<Boolean>() -->Line_83 $$ usageView.set(FindUtil.showInUsageView(gotoData.source, gotoData.targets, getFindUsagesTitle(gotoData.source, name, gotoData.targets.length), project))[ CD ]
Line_3 $$ final PsiElement[] targets = gotoData.targets-->Line_22 $$ Arrays.sort(targets, createComparator(gotoData.renderers, gotoData))[ FD ]
Line_27 $$ final JBListWithHintProvider list = new JBListWithHintProvider(new CollectionListModel<Object>(allElements)) -->Line_46 $$ int[] ids = list.getSelectedIndices()[ FD ]
Line_20 $$ final String title = getChooserTitle(gotoData.source, name, targets.length)-->Line_76 $$ final JBPopup popup = builder.setTitle(title).setItemChoosenCallback(runnable).setMovable(true).setCancelCallback(new Computable<Boolean>() [ FD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_27 $$ final JBListWithHintProvider list = new JBListWithHintProvider(new CollectionListModel<Object>(allElements)) [ CD ]
Line_5 $$ if (targets.length == 0 && additionalActions.isEmpty()) -->Line_6 $$ HintManager.getInstance().showErrorHint(editor, getNotFoundMessage(project, editor, file))[ CD ]
Line_76 $$ final JBPopup popup = builder.setTitle(title).setItemChoosenCallback(runnable).setMovable(true).setCancelCallback(new Computable<Boolean>() -->Line_84 $$ popup.cancel()[ FD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_83 $$ usageView.set(FindUtil.showInUsageView(gotoData.source, gotoData.targets, getFindUsagesTitle(gotoData.source, name, gotoData.targets.length), project))[ FD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_21 $$ if (shouldSortTargets()) [ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_5 $$ if (targets.length == 0 && additionalActions.isEmpty()) [ CD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_46 $$ int[] ids = list.getSelectedIndices()[ FD ]
Line_16 $$ for (PsiElement eachTarget : targets) -->Line_17 $$ gotoData.renderers.put(eachTarget, createRenderer(gotoData, eachTarget))[ FD ]
Line_21 $$ if (shouldSortTargets()) -->Line_22 $$ Arrays.sort(targets, createComparator(gotoData.renderers, gotoData))[ CD ]
Line_3 $$ final PsiElement[] targets = gotoData.targets-->Line_25 $$ Collections.addAll(allElements, targets)[ FD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_88 $$ builder.getScrollPane().setBorder(null)[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_67 $$ builder.setFilteringEnabled(new Function<Object, String>() [ CD ]
Line_44 $$ final Runnable runnable = new Runnable() -->Line_49 $$ Object[] selectedElements = list.getSelectedValues()[ CD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_35 $$ if (value == null)[ FD ]
Line_27 $$ final JBListWithHintProvider list = new JBListWithHintProvider(new CollectionListModel<Object>(allElements)) -->Line_29 $$ return selectedValue instanceof PsiElement ? (PsiElement) selectedValue : null[ CD ]
Line_40 $$ PsiElementListCellRenderer renderer = getRenderer(value, gotoData.renderers, gotoData)-->Line_41 $$ return renderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_37 $$ if (value instanceof AdditionalAction) -->Line_38 $$ return myActionElementRenderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ CD ]
Line_11 $$ if (descriptor != null && descriptor.canNavigate()) -->Line_12 $$ navigateToElement(descriptor)[ CD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_78 $$ HintUpdateSupply.hideHint(list)[ FD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_37 $$ if (value instanceof AdditionalAction) [ FD ]
Line_76 $$ final JBPopup popup = builder.setTitle(title).setItemChoosenCallback(runnable).setMovable(true).setCancelCallback(new Computable<Boolean>() -->Line_85 $$ return false[ CD ]
Line_9 $$ if (targets.length == 1 && additionalActions.isEmpty()) -->Line_11 $$ if (descriptor != null && descriptor.canNavigate()) [ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_20 $$ final String title = getChooserTitle(gotoData.source, name, targets.length)[ CD ]
Line_27 $$ final JBListWithHintProvider list = new JBListWithHintProvider(new CollectionListModel<Object>(allElements)) -->Line_91 $$ gotoData.listUpdaterTask.init((AbstractPopup) popup, list, usageView)[ FD ]
Line_54 $$ Navigatable nav = element instanceof Navigatable ? (Navigatable) element : EditSourceUtil.getDescriptor((PsiElement) element)-->Line_56 $$ if (nav != null && nav.canNavigate()) [ FD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() [ CD ]
Line_19 $$ final String name = ((PsiNamedElement) gotoData.source).getName()-->Line_20 $$ final String title = getChooserTitle(gotoData.source, name, targets.length)[ FD ]
Line_27 $$ final JBListWithHintProvider list = new JBListWithHintProvider(new CollectionListModel<Object>(allElements)) -->Line_78 $$ HintUpdateSupply.hideHint(list)[ FD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_17 $$ gotoData.renderers.put(eachTarget, createRenderer(gotoData, eachTarget))[ FD ]
Line_5 $$ if (targets.length == 0 && additionalActions.isEmpty()) -->Line_7 $$ return[ CD ]
Line_4 $$ final List<AdditionalAction> additionalActions = gotoData.additionalActions-->Line_5 $$ if (targets.length == 0 && additionalActions.isEmpty()) [ FD ]
Line_4 $$ final List<AdditionalAction> additionalActions = gotoData.additionalActions-->Line_26 $$ allElements.addAll(additionalActions)[ FD ]
Line_44 $$ final Runnable runnable = new Runnable() -->Line_46 $$ int[] ids = list.getSelectedIndices()[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_89 $$ builder.getScrollPane().setViewportBorder(null)[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_6 $$ HintManager.getInstance().showErrorHint(editor, getNotFoundMessage(project, editor, file))[ FD ]
Line_67 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_72 $$ return getRenderer(o, gotoData.renderers, gotoData).getElementText((PsiElement) o)[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_72 $$ return getRenderer(o, gotoData.renderers, gotoData).getElementText((PsiElement) o)[ FD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_38 $$ return myActionElementRenderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_35 $$ if (value == null)-->Line_36 $$ return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_40 $$ PsiElementListCellRenderer renderer = getRenderer(value, gotoData.renderers, gotoData)[ FD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_76 $$ final JBPopup popup = builder.setTitle(title).setItemChoosenCallback(runnable).setMovable(true).setCancelCallback(new Computable<Boolean>() [ CD ]
Line_76 $$ final JBPopup popup = builder.setTitle(title).setItemChoosenCallback(runnable).setMovable(true).setCancelCallback(new Computable<Boolean>() -->Line_79 $$ return true[ CD ]
Line_9 $$ if (targets.length == 1 && additionalActions.isEmpty()) -->Line_14 $$ return[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_26 $$ allElements.addAll(additionalActions)[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_4 $$ final List<AdditionalAction> additionalActions = gotoData.additionalActions[ CD ]
Line_4 $$ final List<AdditionalAction> additionalActions = gotoData.additionalActions-->Line_9 $$ if (targets.length == 1 && additionalActions.isEmpty()) [ FD ]
Line_90 $$ if (gotoData.listUpdaterTask != null) -->Line_92 $$ ProgressManager.getInstance().run(gotoData.listUpdaterTask)[ CD ]
Line_76 $$ final JBPopup popup = builder.setTitle(title).setItemChoosenCallback(runnable).setMovable(true).setCancelCallback(new Computable<Boolean>() -->Line_94 $$ popup.showInBestPositionFor(editor)[ FD ]
Line_67 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_72 $$ return getRenderer(o, gotoData.renderers, gotoData).getElementText((PsiElement) o)[ FD ]
Line_27 $$ final JBListWithHintProvider list = new JBListWithHintProvider(new CollectionListModel<Object>(allElements)) -->Line_49 $$ Object[] selectedElements = list.getSelectedValues()[ FD ]
Line_27 $$ final JBListWithHintProvider list = new JBListWithHintProvider(new CollectionListModel<Object>(allElements)) -->Line_32 $$ list.setFont(EditorUtil.getEditorFont())[ FD ]
Line_4 $$ final List<AdditionalAction> additionalActions = gotoData.additionalActions-->Line_24 $$ List<Object> allElements = new ArrayList<Object>(targets.length + additionalActions.size())[ FD ]
Line_44 $$ final Runnable runnable = new Runnable() -->Line_47 $$ if (ids == null || ids.length == 0)[ CD ]
Line_54 $$ Navigatable nav = element instanceof Navigatable ? (Navigatable) element : EditSourceUtil.getDescriptor((PsiElement) element)-->Line_57 $$ navigateToElement(nav)[ FD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_24 $$ List<Object> allElements = new ArrayList<Object>(targets.length + additionalActions.size())[ CD ]
Line_33 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_41 $$ return renderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_27 $$ final JBListWithHintProvider list = new JBListWithHintProvider(new CollectionListModel<Object>(allElements)) -->Line_41 $$ return renderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_19 $$ final String name = ((PsiNamedElement) gotoData.source).getName()[ CD ]
Line_2 $$ private void show(@NotNull final Project project, @NotNull Editor editor, @NotNull PsiFile file, @NotNull final GotoData gotoData) -->Line_22 $$ Arrays.sort(targets, createComparator(gotoData.renderers, gotoData))[ FD ]
Line_67 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_69 $$ if (o instanceof AdditionalAction) [ CD ]
Line_27 $$ final JBListWithHintProvider list = new JBListWithHintProvider(new CollectionListModel<Object>(allElements)) -->Line_38 $$ return myActionElementRenderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
