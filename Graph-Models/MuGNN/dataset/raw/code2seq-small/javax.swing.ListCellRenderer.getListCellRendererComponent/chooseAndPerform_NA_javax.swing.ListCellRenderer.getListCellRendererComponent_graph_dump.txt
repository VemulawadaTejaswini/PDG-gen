Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_15 $$ setText(framework.getName())[ CD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_13 $$ TestFramework framework = (TestFramework) value[ CD ]
Line_7 $$ final JList list = new JBList(frameworks.toArray(new TestFramework[frameworks.size()]))-->Line_27 $$ consumer.consume((TestFramework) list.getSelectedValue())[ FD ]
Line_2 $$ private static void chooseAndPerform(Editor editor, List<TestFramework> frameworks, final Consumer<TestFramework> consumer) -->Line_3 $$ if (frameworks.size() == 1) [ FD ]
Line_13 $$ TestFramework framework = (TestFramework) value-->Line_14 $$ setIcon(framework.getIcon())[ FD ]
Line_2 $$ private static void chooseAndPerform(Editor editor, List<TestFramework> frameworks, final Consumer<TestFramework> consumer) -->Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() [ CD ]
Line_3 $$ if (frameworks.size() == 1) -->Line_5 $$ return[ CD ]
Line_25 $$ builder.setTitle("Choose Framework").setItemChoosenCallback(new Runnable() -->Line_27 $$ consumer.consume((TestFramework) list.getSelectedValue())[ CD ]
Line_2 $$ private static void chooseAndPerform(Editor editor, List<TestFramework> frameworks, final Consumer<TestFramework> consumer) -->Line_25 $$ builder.setTitle("Choose Framework").setItemChoosenCallback(new Runnable() [ CD ]
Line_2 $$ private static void chooseAndPerform(Editor editor, List<TestFramework> frameworks, final Consumer<TestFramework> consumer) -->Line_7 $$ final JList list = new JBList(frameworks.toArray(new TestFramework[frameworks.size()]))[ CD ]
Line_20 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_22 $$ return ((TestFramework) o).getName()[ CD ]
Line_11 $$ if (value == null)-->Line_12 $$ return result[ CD ]
Line_13 $$ TestFramework framework = (TestFramework) value-->Line_15 $$ setText(framework.getName())[ FD ]
Line_2 $$ private static void chooseAndPerform(Editor editor, List<TestFramework> frameworks, final Consumer<TestFramework> consumer) -->Line_27 $$ consumer.consume((TestFramework) list.getSelectedValue())[ FD ]
Line_7 $$ final JList list = new JBList(frameworks.toArray(new TestFramework[frameworks.size()]))-->Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() [ FD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_14 $$ setIcon(framework.getIcon())[ CD ]
Line_10 $$ Component result = super.getListCellRendererComponent(list, "", index, isSelected, cellHasFocus)-->Line_11 $$ if (value == null)[ FD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_11 $$ if (value == null)[ FD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_11 $$ if (value == null)[ CD ]
Line_2 $$ private static void chooseAndPerform(Editor editor, List<TestFramework> frameworks, final Consumer<TestFramework> consumer) -->Line_25 $$ builder.setTitle("Choose Framework").setItemChoosenCallback(new Runnable() [ FD ]
Line_2 $$ private static void chooseAndPerform(Editor editor, List<TestFramework> frameworks, final Consumer<TestFramework> consumer) -->Line_20 $$ builder.setFilteringEnabled(new Function<Object, String>() [ CD ]
Line_2 $$ private static void chooseAndPerform(Editor editor, List<TestFramework> frameworks, final Consumer<TestFramework> consumer) -->Line_4 $$ consumer.consume(frameworks.get(0))[ FD ]
Line_2 $$ private static void chooseAndPerform(Editor editor, List<TestFramework> frameworks, final Consumer<TestFramework> consumer) -->Line_3 $$ if (frameworks.size() == 1) [ CD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_16 $$ return result[ CD ]
Line_3 $$ if (frameworks.size() == 1) -->Line_4 $$ consumer.consume(frameworks.get(0))[ CD ]
Line_7 $$ final JList list = new JBList(frameworks.toArray(new TestFramework[frameworks.size()]))-->Line_10 $$ Component result = super.getListCellRendererComponent(list, "", index, isSelected, cellHasFocus)[ FD ]
Line_2 $$ private static void chooseAndPerform(Editor editor, List<TestFramework> frameworks, final Consumer<TestFramework> consumer) -->Line_7 $$ final JList list = new JBList(frameworks.toArray(new TestFramework[frameworks.size()]))[ FD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_27 $$ consumer.consume((TestFramework) list.getSelectedValue())[ FD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_10 $$ Component result = super.getListCellRendererComponent(list, "", index, isSelected, cellHasFocus)[ CD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_10 $$ Component result = super.getListCellRendererComponent(list, "", index, isSelected, cellHasFocus)[ FD ]
