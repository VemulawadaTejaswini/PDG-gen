Line_17 $$ for (DeploymentUnit deployment : deploymentUnits) -->Line_19 $$ final ExplicitBeanArchiveMetadataContainer weldDeploymentMetadata = deployment.getAttachment(ExplicitBeanArchiveMetadataContainer.ATTACHMENT_KEY)[ FD ]
Line_17 $$ for (DeploymentUnit deployment : deploymentUnits) -->Line_31 $$ EEModuleDescription moduleDesc = deployment.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)[ FD ]
Line_17 $$ for (DeploymentUnit deployment : deploymentUnits) -->Line_41 $$ final Module module = deployment.getAttachment(Attachments.MODULE)[ FD ]
Line_53 $$ for (URL url : urls) -->Line_79 $$ existing.add(url)[ FD ]
Line_12 $$ final List<DeploymentUnit> deploymentUnits = new ArrayList<DeploymentUnit>()-->Line_14 $$ deploymentUnits.addAll(deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS))[ FD ]
Line_16 $$ final HashSet<URL> existing = new HashSet<URL>()-->Line_24 $$ existing.add(md.getAdditionalBeansXmlFile().toURL())[ FD ]
Line_50 $$ Set<URL> urls = findExportedLocalBeansXml(dependency)-->Line_51 $$ if (urls != null) [ FD ]
Line_10 $$ final Set<String> ejbClassName = new HashSet()-->Line_35 $$ ejbClassName.add(component.getComponentClassName())[ FD ]
Line_65 $$ final UrlScanner urlScanner = new UrlScanner()-->Line_67 $$ if (!urlScanner.handleBeansXml(url, discoveredClasses)) [ FD ]
Line_4 $$ if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) -->Line_5 $$ return[ CD ]
Line_16 $$ final HashSet<URL> existing = new HashSet<URL>()-->Line_22 $$ existing.add(md.getBeansXmlFile().toURL())[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_13 $$ deploymentUnits.add(deploymentUnit)[ CD ]
Line_71 $$ final BeanDeploymentArchiveImpl bda = new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses), beansXml, dependency, beanArchiveIdPrefix + url.toExternalForm(), BeanArchiveType.EXTERNAL)-->Line_75 $$ bda.getServices().add(JpaInjectionServices.class, jpaInjectionServices)[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_15 $$ PropertyReplacingBeansXmlParser parser = new PropertyReplacingBeansXmlParser(deploymentUnit)[ CD ]
Line_19 $$ final ExplicitBeanArchiveMetadataContainer weldDeploymentMetadata = deployment.getAttachment(ExplicitBeanArchiveMetadataContainer.ATTACHMENT_KEY)-->Line_20 $$ if (weldDeploymentMetadata != null) [ FD ]
Line_15 $$ PropertyReplacingBeansXmlParser parser = new PropertyReplacingBeansXmlParser(deploymentUnit)-->Line_64 $$ final BeansXml beansXml = parseBeansXml(url, parser, deploymentUnit)[ FD ]
Line_73 $$ final JpaInjectionServices jpaInjectionServices = new WeldJpaInjectionServices(deploymentUnit)-->Line_75 $$ bda.getServices().add(JpaInjectionServices.class, jpaInjectionServices)[ FD ]
Line_74 $$ final JaxwsInjectionServices jaxwsInjectionServices = new WeldJaxwsInjectionServices(deploymentUnit)-->Line_76 $$ bda.getServices().add(JaxwsInjectionServices.class, jaxwsInjectionServices)[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_64 $$ final BeansXml beansXml = parseBeansXml(url, parser, deploymentUnit)[ FD ]
Line_19 $$ final ExplicitBeanArchiveMetadataContainer weldDeploymentMetadata = deployment.getAttachment(ExplicitBeanArchiveMetadataContainer.ATTACHMENT_KEY)-->Line_21 $$ for (ExplicitBeanArchiveMetadata md : weldDeploymentMetadata.getBeanArchiveMetadata().values()) [ FD ]
Line_53 $$ for (URL url : urls) -->Line_71 $$ final BeanDeploymentArchiveImpl bda = new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses), beansXml, dependency, beanArchiveIdPrefix + url.toExternalForm(), BeanArchiveType.EXTERNAL)[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_11 $$ final String beanArchiveIdPrefix = deploymentUnit.getName() + ".external."[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_14 $$ deploymentUnits.addAll(deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS))[ FD ]
Line_71 $$ final BeanDeploymentArchiveImpl bda = new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses), beansXml, dependency, beanArchiveIdPrefix + url.toExternalForm(), BeanArchiveType.EXTERNAL)-->Line_72 $$ WeldLogger.DEPLOYMENT_LOGGER.beanArchiveDiscovered(bda)[ FD ]
Line_16 $$ final HashSet<URL> existing = new HashSet<URL>()-->Line_54 $$ if (existing.contains(url)) [ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_4 $$ if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) [ CD ]
Line_71 $$ final BeanDeploymentArchiveImpl bda = new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses), beansXml, dependency, beanArchiveIdPrefix + url.toExternalForm(), BeanArchiveType.EXTERNAL)-->Line_77 $$ deploymentUnit.addToAttachmentList(WeldAttachments.ADDITIONAL_BEAN_DEPLOYMENT_MODULES, bda)[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_7 $$ if (deploymentUnit.getParent() != null) [ CD ]
Line_7 $$ if (deploymentUnit.getParent() != null) -->Line_8 $$ return[ CD ]
Line_66 $$ final List<String> discoveredClasses = new ArrayList<String>()-->Line_70 $$ discoveredClasses.removeAll(ejbClassName)[ FD ]
Line_21 $$ for (ExplicitBeanArchiveMetadata md : weldDeploymentMetadata.getBeanArchiveMetadata().values()) -->Line_24 $$ existing.add(md.getAdditionalBeansXmlFile().toURL())[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_77 $$ deploymentUnit.addToAttachmentList(WeldAttachments.ADDITIONAL_BEAN_DEPLOYMENT_MODULES, bda)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_11 $$ final String beanArchiveIdPrefix = deploymentUnit.getName() + ".external."[ FD ]
Line_41 $$ final Module module = deployment.getAttachment(Attachments.MODULE)-->Line_45 $$ for (DependencySpec dep : module.getDependencies()) [ FD ]
Line_10 $$ final Set<String> ejbClassName = new HashSet()-->Line_70 $$ discoveredClasses.removeAll(ejbClassName)[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_14 $$ deploymentUnits.addAll(deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS))[ CD ]
Line_21 $$ for (ExplicitBeanArchiveMetadata md : weldDeploymentMetadata.getBeanArchiveMetadata().values()) -->Line_22 $$ existing.add(md.getBeansXmlFile().toURL())[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ FD ]
Line_41 $$ final Module module = deployment.getAttachment(Attachments.MODULE)-->Line_42 $$ if (module == null) [ FD ]
Line_83 $$ if (i != j) -->Line_84 $$ i.addBeanDeploymentArchive(j)[ CD ]
Line_23 $$ if (md.getAdditionalBeansXmlFile() != null) -->Line_24 $$ existing.add(md.getAdditionalBeansXmlFile().toURL())[ CD ]
Line_33 $$ for (ComponentDescription component : moduleDesc.getComponentDescriptions()) -->Line_34 $$ if (component instanceof EJBComponentDescription) [ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_10 $$ final Set<String> ejbClassName = new HashSet()[ CD ]
Line_45 $$ for (DependencySpec dep : module.getDependencies()) -->Line_46 $$ final Module dependency = loadModuleDependency(dep)[ FD ]
Line_53 $$ for (URL url : urls) -->Line_54 $$ if (existing.contains(url)) [ FD ]
Line_21 $$ for (ExplicitBeanArchiveMetadata md : weldDeploymentMetadata.getBeanArchiveMetadata().values()) -->Line_23 $$ if (md.getAdditionalBeansXmlFile() != null) [ FD ]
Line_71 $$ final BeanDeploymentArchiveImpl bda = new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses), beansXml, dependency, beanArchiveIdPrefix + url.toExternalForm(), BeanArchiveType.EXTERNAL)-->Line_76 $$ bda.getServices().add(JaxwsInjectionServices.class, jaxwsInjectionServices)[ FD ]
Line_52 $$ List<BeanDeploymentArchiveImpl> moduleBdas = new ArrayList()-->Line_78 $$ moduleBdas.add(bda)[ FD ]
Line_81 $$ for (BeanDeploymentArchiveImpl i : moduleBdas) -->Line_84 $$ i.addBeanDeploymentArchive(j)[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_12 $$ final List<DeploymentUnit> deploymentUnits = new ArrayList<DeploymentUnit>()[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_4 $$ if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) [ FD ]
Line_71 $$ final BeanDeploymentArchiveImpl bda = new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses), beansXml, dependency, beanArchiveIdPrefix + url.toExternalForm(), BeanArchiveType.EXTERNAL)-->Line_78 $$ moduleBdas.add(bda)[ FD ]
Line_82 $$ for (BeanDeploymentArchiveImpl j : moduleBdas) -->Line_84 $$ i.addBeanDeploymentArchive(j)[ FD ]
Line_46 $$ final Module dependency = loadModuleDependency(dep)-->Line_50 $$ Set<URL> urls = findExportedLocalBeansXml(dependency)[ FD ]
Line_53 $$ for (URL url : urls) -->Line_60 $$ if (url.toString().contains("resteasy-cdi")) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_7 $$ if (deploymentUnit.getParent() != null) [ FD ]
Line_53 $$ for (URL url : urls) -->Line_64 $$ final BeansXml beansXml = parseBeansXml(url, parser, deploymentUnit)[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_16 $$ final HashSet<URL> existing = new HashSet<URL>()[ CD ]
Line_34 $$ if (component instanceof EJBComponentDescription) -->Line_35 $$ ejbClassName.add(component.getComponentClassName())[ CD ]
Line_53 $$ for (URL url : urls) -->Line_57 $$ if (url.toString().contains("jsf-impl-2.2")) [ FD ]
Line_42 $$ if (module == null) -->Line_43 $$ return[ CD ]
Line_53 $$ for (URL url : urls) -->Line_63 $$ WeldLogger.DEPLOYMENT_LOGGER.debugf("Found external beans.xml: %s", url.toString())[ FD ]
Line_53 $$ for (URL url : urls) -->Line_67 $$ if (!urlScanner.handleBeansXml(url, discoveredClasses)) [ FD ]
Line_66 $$ final List<String> discoveredClasses = new ArrayList<String>()-->Line_67 $$ if (!urlScanner.handleBeansXml(url, discoveredClasses)) [ FD ]
Line_46 $$ final Module dependency = loadModuleDependency(dep)-->Line_47 $$ if (dependency == null) [ FD ]
Line_82 $$ for (BeanDeploymentArchiveImpl j : moduleBdas) -->Line_83 $$ if (i != j) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_13 $$ deploymentUnits.add(deploymentUnit)[ FD ]
Line_16 $$ final HashSet<URL> existing = new HashSet<URL>()-->Line_79 $$ existing.add(url)[ FD ]
Line_31 $$ EEModuleDescription moduleDesc = deployment.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_32 $$ if (moduleDesc != null) [ FD ]
Line_81 $$ for (BeanDeploymentArchiveImpl i : moduleBdas) -->Line_83 $$ if (i != j) [ FD ]
Line_12 $$ final List<DeploymentUnit> deploymentUnits = new ArrayList<DeploymentUnit>()-->Line_13 $$ deploymentUnits.add(deploymentUnit)[ FD ]
Line_31 $$ EEModuleDescription moduleDesc = deployment.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_33 $$ for (ComponentDescription component : moduleDesc.getComponentDescriptions()) [ FD ]
Line_33 $$ for (ComponentDescription component : moduleDesc.getComponentDescriptions()) -->Line_35 $$ ejbClassName.add(component.getComponentClassName())[ FD ]
Line_51 $$ if (urls != null) -->Line_52 $$ List<BeanDeploymentArchiveImpl> moduleBdas = new ArrayList()[ CD ]
