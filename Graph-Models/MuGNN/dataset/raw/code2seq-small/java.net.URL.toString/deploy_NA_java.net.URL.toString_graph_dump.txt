Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_84 $$ deploymentUnit.addToAttachmentList(WeldAttachments.ADDITIONAL_BEAN_DEPLOYMENT_MODULES, bda)[ FD ]
Line_22 $$ for (ExplicitBeanArchiveMetadata md : weldDeploymentMetadata.getBeanArchiveMetadata().values()) -->Line_23 $$ existing.add(md.getBeansXmlFile().toURL())[ FD ]
Line_52 $$ if (urls != null) -->Line_53 $$ List<BeanDeploymentArchiveImpl> moduleBdas = new ArrayList()[ CD ]
Line_46 $$ for (DependencySpec dep : module.getDependencies()) -->Line_47 $$ final Module dependency = loadModuleDependency(dep)[ FD ]
Line_78 $$ final BeanDeploymentArchiveImpl bda = new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses), beansXml, dependency, beanArchiveIdPrefix + url.toExternalForm(), BeanArchiveType.EXTERNAL)-->Line_83 $$ bda.getServices().add(JaxwsInjectionServices.class, jaxwsInjectionServices)[ FD ]
Line_17 $$ final HashSet<URL> existing = new HashSet<URL>()-->Line_23 $$ existing.add(md.getBeansXmlFile().toURL())[ FD ]
Line_24 $$ if (md.getAdditionalBeansXmlFile() != null) -->Line_25 $$ existing.add(md.getAdditionalBeansXmlFile().toURL())[ CD ]
Line_16 $$ PropertyReplacingBeansXmlParser parser = new PropertyReplacingBeansXmlParser(deploymentUnit)-->Line_71 $$ final BeansXml beansXml = parseBeansXml(url, parser, deploymentUnit)[ FD ]
Line_72 $$ final UrlScanner urlScanner = new UrlScanner()-->Line_74 $$ if (!urlScanner.handleBeansXml(url, discoveredClasses)) [ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_14 $$ deploymentUnits.add(deploymentUnit)[ FD ]
Line_13 $$ final List<DeploymentUnit> deploymentUnits = new ArrayList<DeploymentUnit>()-->Line_15 $$ deploymentUnits.addAll(deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS))[ FD ]
Line_5 $$ if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) -->Line_6 $$ return[ CD ]
Line_78 $$ final BeanDeploymentArchiveImpl bda = new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses), beansXml, dependency, beanArchiveIdPrefix + url.toExternalForm(), BeanArchiveType.EXTERNAL)-->Line_79 $$ WeldLogger.DEPLOYMENT_LOGGER.beanArchiveDiscovered(bda)[ FD ]
Line_18 $$ for (DeploymentUnit deployment : deploymentUnits) -->Line_32 $$ EEModuleDescription moduleDesc = deployment.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)[ FD ]
Line_42 $$ final Module module = deployment.getAttachment(Attachments.MODULE)-->Line_43 $$ if (module == null) [ FD ]
Line_47 $$ final Module dependency = loadModuleDependency(dep)-->Line_48 $$ if (dependency == null) [ FD ]
Line_51 $$ Set<URL> urls = findExportedLocalBeansXml(dependency)-->Line_52 $$ if (urls != null) [ FD ]
Line_81 $$ final JaxwsInjectionServices jaxwsInjectionServices = new WeldJaxwsInjectionServices(deploymentUnit)-->Line_83 $$ bda.getServices().add(JaxwsInjectionServices.class, jaxwsInjectionServices)[ FD ]
Line_54 $$ for (URL url : urls) -->Line_78 $$ final BeanDeploymentArchiveImpl bda = new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses), beansXml, dependency, beanArchiveIdPrefix + url.toExternalForm(), BeanArchiveType.EXTERNAL)[ FD ]
Line_91 $$ for (BeanDeploymentArchiveImpl j : moduleBdas) -->Line_92 $$ if (i != j) [ FD ]
Line_73 $$ final List<String> discoveredClasses = new ArrayList<String>()-->Line_74 $$ if (!urlScanner.handleBeansXml(url, discoveredClasses)) [ FD ]
Line_54 $$ for (URL url : urls) -->Line_71 $$ final BeansXml beansXml = parseBeansXml(url, parser, deploymentUnit)[ FD ]
Line_32 $$ EEModuleDescription moduleDesc = deployment.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_33 $$ if (moduleDesc != null) [ FD ]
Line_34 $$ for (ComponentDescription component : moduleDesc.getComponentDescriptions()) -->Line_36 $$ ejbClassName.add(component.getComponentClassName())[ FD ]
Line_78 $$ final BeanDeploymentArchiveImpl bda = new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses), beansXml, dependency, beanArchiveIdPrefix + url.toExternalForm(), BeanArchiveType.EXTERNAL)-->Line_84 $$ deploymentUnit.addToAttachmentList(WeldAttachments.ADDITIONAL_BEAN_DEPLOYMENT_MODULES, bda)[ FD ]
Line_32 $$ EEModuleDescription moduleDesc = deployment.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_34 $$ for (ComponentDescription component : moduleDesc.getComponentDescriptions()) [ FD ]
Line_11 $$ final Set<String> ejbClassName = new HashSet()-->Line_36 $$ ejbClassName.add(component.getComponentClassName())[ FD ]
Line_22 $$ for (ExplicitBeanArchiveMetadata md : weldDeploymentMetadata.getBeanArchiveMetadata().values()) -->Line_25 $$ existing.add(md.getAdditionalBeansXmlFile().toURL())[ FD ]
Line_42 $$ final Module module = deployment.getAttachment(Attachments.MODULE)-->Line_46 $$ for (DependencySpec dep : module.getDependencies()) [ FD ]
Line_11 $$ final Set<String> ejbClassName = new HashSet()-->Line_77 $$ discoveredClasses.removeAll(ejbClassName)[ FD ]
Line_54 $$ for (URL url : urls) -->Line_55 $$ if (existing.contains(url)) [ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_8 $$ if (deploymentUnit.getParent() != null) [ FD ]
Line_8 $$ if (deploymentUnit.getParent() != null) -->Line_9 $$ return[ CD ]
Line_13 $$ final List<DeploymentUnit> deploymentUnits = new ArrayList<DeploymentUnit>()-->Line_14 $$ deploymentUnits.add(deploymentUnit)[ FD ]
Line_43 $$ if (module == null) -->Line_44 $$ return[ CD ]
Line_17 $$ final HashSet<URL> existing = new HashSet<URL>()-->Line_55 $$ if (existing.contains(url)) [ FD ]
Line_54 $$ for (URL url : urls) -->Line_70 $$ WeldLogger.DEPLOYMENT_LOGGER.debugf("Found external beans.xml: %s", url.toString())[ FD ]
Line_53 $$ List<BeanDeploymentArchiveImpl> moduleBdas = new ArrayList()-->Line_85 $$ moduleBdas.add(bda)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_12 $$ final String beanArchiveIdPrefix = deploymentUnit.getName() + ".external."[ FD ]
Line_35 $$ if (component instanceof EJBComponentDescription) -->Line_36 $$ ejbClassName.add(component.getComponentClassName())[ CD ]
Line_78 $$ final BeanDeploymentArchiveImpl bda = new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses), beansXml, dependency, beanArchiveIdPrefix + url.toExternalForm(), BeanArchiveType.EXTERNAL)-->Line_82 $$ bda.getServices().add(JpaInjectionServices.class, jpaInjectionServices)[ FD ]
Line_20 $$ final ExplicitBeanArchiveMetadataContainer weldDeploymentMetadata = deployment.getAttachment(ExplicitBeanArchiveMetadataContainer.ATTACHMENT_KEY)-->Line_21 $$ if (weldDeploymentMetadata != null) [ FD ]
Line_47 $$ final Module dependency = loadModuleDependency(dep)-->Line_51 $$ Set<URL> urls = findExportedLocalBeansXml(dependency)[ FD ]
Line_17 $$ final HashSet<URL> existing = new HashSet<URL>()-->Line_25 $$ existing.add(md.getAdditionalBeansXmlFile().toURL())[ FD ]
Line_18 $$ for (DeploymentUnit deployment : deploymentUnits) -->Line_20 $$ final ExplicitBeanArchiveMetadataContainer weldDeploymentMetadata = deployment.getAttachment(ExplicitBeanArchiveMetadataContainer.ATTACHMENT_KEY)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_71 $$ final BeansXml beansXml = parseBeansXml(url, parser, deploymentUnit)[ FD ]
Line_54 $$ for (URL url : urls) -->Line_74 $$ if (!urlScanner.handleBeansXml(url, discoveredClasses)) [ FD ]
Line_80 $$ final JpaInjectionServices jpaInjectionServices = new WeldJpaInjectionServices(deploymentUnit)-->Line_82 $$ bda.getServices().add(JpaInjectionServices.class, jpaInjectionServices)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_5 $$ if (!WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) [ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_15 $$ deploymentUnits.addAll(deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS))[ FD ]
Line_91 $$ for (BeanDeploymentArchiveImpl j : moduleBdas) -->Line_93 $$ i.addBeanDeploymentArchive(j)[ FD ]
Line_20 $$ final ExplicitBeanArchiveMetadataContainer weldDeploymentMetadata = deployment.getAttachment(ExplicitBeanArchiveMetadataContainer.ATTACHMENT_KEY)-->Line_22 $$ for (ExplicitBeanArchiveMetadata md : weldDeploymentMetadata.getBeanArchiveMetadata().values()) [ FD ]
Line_92 $$ if (i != j) -->Line_93 $$ i.addBeanDeploymentArchive(j)[ CD ]
Line_34 $$ for (ComponentDescription component : moduleDesc.getComponentDescriptions()) -->Line_35 $$ if (component instanceof EJBComponentDescription) [ FD ]
Line_18 $$ for (DeploymentUnit deployment : deploymentUnits) -->Line_42 $$ final Module module = deployment.getAttachment(Attachments.MODULE)[ FD ]
Line_78 $$ final BeanDeploymentArchiveImpl bda = new BeanDeploymentArchiveImpl(new HashSet<String>(discoveredClasses), beansXml, dependency, beanArchiveIdPrefix + url.toExternalForm(), BeanArchiveType.EXTERNAL)-->Line_85 $$ moduleBdas.add(bda)[ FD ]
Line_73 $$ final List<String> discoveredClasses = new ArrayList<String>()-->Line_77 $$ discoveredClasses.removeAll(ejbClassName)[ FD ]
Line_22 $$ for (ExplicitBeanArchiveMetadata md : weldDeploymentMetadata.getBeanArchiveMetadata().values()) -->Line_24 $$ if (md.getAdditionalBeansXmlFile() != null) [ FD ]
