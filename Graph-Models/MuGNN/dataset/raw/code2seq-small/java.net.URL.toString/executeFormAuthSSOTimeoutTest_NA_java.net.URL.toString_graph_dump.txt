Line_3 $$ URL warA1 = new URL(serverA, "/war1/")-->Line_10 $$ executeFormLogin(httpclient, warA1)[ FD ]
Line_6 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).disableRedirectHandling().build()-->Line_16 $$ checkAccessDenied(httpclient, warA1 + "index.html")[ FD ]
Line_6 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).disableRedirectHandling().build()-->Line_10 $$ executeFormLogin(httpclient, warA1)[ FD ]
Line_2 $$ public static void executeFormAuthSSOTimeoutTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_4 $$ URL warB2 = new URL(serverB, "/war2/")[ CD ]
Line_6 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).disableRedirectHandling().build()-->Line_17 $$ checkAccessDenied(httpclient, warB2 + "index.html")[ FD ]
Line_2 $$ public static void executeFormAuthSSOTimeoutTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_3 $$ URL warA1 = new URL(serverA, "/war1/")[ CD ]
Line_2 $$ public static void executeFormAuthSSOTimeoutTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_5 $$ CookieStore store = new BasicCookieStore()[ CD ]
Line_2 $$ public static void executeFormAuthSSOTimeoutTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_11 $$ String ssoID = processSSOCookie(store, serverA.toString(), serverB.toString())[ FD ]
Line_2 $$ public static void executeFormAuthSSOTimeoutTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_12 $$ log.debug("Saw JSESSIONIDSSO=" + ssoID)[ FD ]
Line_6 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).disableRedirectHandling().build()-->Line_13 $$ checkAccessAllowed(httpclient, warA1 + "set_session_timeout.jsp")[ FD ]
Line_2 $$ public static void executeFormAuthSSOTimeoutTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_9 $$ log.debug("Saw JSESSIONID=" + getSessionIdValueFromState(store))[ FD ]
Line_6 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).disableRedirectHandling().build()-->Line_14 $$ checkAccessAllowed(httpclient, warB2 + "set_session_timeout.jsp")[ FD ]
Line_5 $$ CookieStore store = new BasicCookieStore()-->Line_9 $$ log.debug("Saw JSESSIONID=" + getSessionIdValueFromState(store))[ FD ]
Line_5 $$ CookieStore store = new BasicCookieStore()-->Line_6 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).disableRedirectHandling().build()[ FD ]
Line_2 $$ public static void executeFormAuthSSOTimeoutTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_6 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).disableRedirectHandling().build()[ CD ]
Line_6 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).disableRedirectHandling().build()-->Line_19 $$ HttpClientUtils.closeQuietly(httpclient)[ FD ]
Line_6 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).disableRedirectHandling().build()-->Line_8 $$ checkAccessDenied(httpclient, warA1 + "index.html")[ FD ]
Line_5 $$ CookieStore store = new BasicCookieStore()-->Line_11 $$ String ssoID = processSSOCookie(store, serverA.toString(), serverB.toString())[ FD ]
