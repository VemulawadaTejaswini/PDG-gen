Line_2 $$ public void parentLoader() throws Exception -->Line_3 $$ this.configurer.setApplicationContext(this.applicationContext)[ CD ]
Line_2 $$ public void parentLoader() throws Exception -->Line_6 $$ URLClassLoader urlClassLoader = (URLClassLoader) classLoader[ CD ]
Line_2 $$ public void parentLoader() throws Exception -->Line_13 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()), Matchers.hasSize(2))[ CD ]
Line_6 $$ URLClassLoader urlClassLoader = (URLClassLoader) classLoader-->Line_13 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()), Matchers.hasSize(2))[ FD ]
Line_6 $$ URLClassLoader urlClassLoader = (URLClassLoader) classLoader-->Line_15 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()).get(1).toString(), Matchers.endsWith("org/springframework/web/servlet/view/"))[ FD ]
Line_6 $$ URLClassLoader urlClassLoader = (URLClassLoader) classLoader-->Line_14 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()).get(0).toString(), Matchers.endsWith("org/springframework/web/servlet/view/groovy/"))[ FD ]
Line_2 $$ public void parentLoader() throws Exception -->Line_11 $$ assertNotNull(classLoader)[ CD ]
Line_6 $$ URLClassLoader urlClassLoader = (URLClassLoader) classLoader-->Line_12 $$ urlClassLoader = (URLClassLoader) classLoader[ FD ]
Line_4 $$ ClassLoader classLoader = this.configurer.createTemplateClassLoader()-->Line_11 $$ assertNotNull(classLoader)[ FD ]
Line_12 $$ urlClassLoader = (URLClassLoader) classLoader-->Line_13 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()), Matchers.hasSize(2))[ FD ]
Line_10 $$ classLoader = this.configurer.createTemplateClassLoader()-->Line_11 $$ assertNotNull(classLoader)[ FD ]
Line_2 $$ public void parentLoader() throws Exception -->Line_10 $$ classLoader = this.configurer.createTemplateClassLoader()[ CD ]
Line_2 $$ public void parentLoader() throws Exception -->Line_7 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()), Matchers.hasSize(1))[ CD ]
Line_4 $$ ClassLoader classLoader = this.configurer.createTemplateClassLoader()-->Line_5 $$ assertNotNull(classLoader)[ FD ]
Line_2 $$ public void parentLoader() throws Exception -->Line_15 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()).get(1).toString(), Matchers.endsWith("org/springframework/web/servlet/view/"))[ CD ]
Line_12 $$ urlClassLoader = (URLClassLoader) classLoader-->Line_14 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()).get(0).toString(), Matchers.endsWith("org/springframework/web/servlet/view/groovy/"))[ FD ]
Line_4 $$ ClassLoader classLoader = this.configurer.createTemplateClassLoader()-->Line_10 $$ classLoader = this.configurer.createTemplateClassLoader()[ FD ]
Line_2 $$ public void parentLoader() throws Exception -->Line_8 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()).get(0).toString(), Matchers.endsWith("org/springframework/web/servlet/view/groovy/"))[ CD ]
Line_2 $$ public void parentLoader() throws Exception -->Line_5 $$ assertNotNull(classLoader)[ CD ]
Line_2 $$ public void parentLoader() throws Exception -->Line_9 $$ this.configurer.setResourceLoaderPath(RESOURCE_LOADER_PATH + ",classpath:org/springframework/web/servlet/view/")[ CD ]
Line_2 $$ public void parentLoader() throws Exception -->Line_12 $$ urlClassLoader = (URLClassLoader) classLoader[ CD ]
Line_6 $$ URLClassLoader urlClassLoader = (URLClassLoader) classLoader-->Line_8 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()).get(0).toString(), Matchers.endsWith("org/springframework/web/servlet/view/groovy/"))[ FD ]
Line_2 $$ public void parentLoader() throws Exception -->Line_14 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()).get(0).toString(), Matchers.endsWith("org/springframework/web/servlet/view/groovy/"))[ CD ]
Line_2 $$ public void parentLoader() throws Exception -->Line_4 $$ ClassLoader classLoader = this.configurer.createTemplateClassLoader()[ CD ]
Line_12 $$ urlClassLoader = (URLClassLoader) classLoader-->Line_15 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()).get(1).toString(), Matchers.endsWith("org/springframework/web/servlet/view/"))[ FD ]
Line_6 $$ URLClassLoader urlClassLoader = (URLClassLoader) classLoader-->Line_7 $$ assertThat(Arrays.asList(urlClassLoader.getURLs()), Matchers.hasSize(1))[ FD ]
