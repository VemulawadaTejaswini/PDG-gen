Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_37 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_6 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_48 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_7 $$ HttpResponse response-->Line_26 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_23 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_7 $$ HttpResponse response-->Line_35 $$ state = parseState(response, sessionId)[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))[ FD ]
Line_35 $$ state = parseState(response, sessionId)-->Line_46 $$ state = parseState(response, sessionId)[ FD ]
Line_8 $$ NumberGuessState state-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_35 $$ state = parseState(response, sessionId)[ FD ]
Line_16 $$ String sessionId = state.sessionId-->Line_72 $$ Assert.assertEquals(sessionId, state.sessionId)[ FD ]
Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_67 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_65 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ String sessionId = state.sessionId-->Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_45 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_26 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_57 $$ state = parseState(response, sessionId)-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_8 $$ NumberGuessState state-->Line_46 $$ state = parseState(response, sessionId)[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_34 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_16 $$ String sessionId = state.sessionId-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_65 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_46 $$ state = parseState(response, sessionId)-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_57 $$ state = parseState(response, sessionId)[ FD ]
Line_16 $$ String sessionId = state.sessionId-->Line_17 $$ Assert.assertNotNull(sessionId)[ FD ]
Line_8 $$ NumberGuessState state-->Line_57 $$ state = parseState(response, sessionId)[ FD ]
Line_12 $$ state = parseState(response, null)-->Line_57 $$ state = parseState(response, sessionId)[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_12 $$ state = parseState(response, null)[ FD ]
Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_57 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ HttpResponse response-->Line_14 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_7 $$ HttpResponse response-->Line_65 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_35 $$ state = parseState(response, sessionId)-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_48 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_45 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_16 $$ String sessionId = state.sessionId-->Line_46 $$ state = parseState(response, sessionId)[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_11 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_3 $$ String url1 = baseURL1.toString() + "home.jsf"-->Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))[ FD ]
Line_7 $$ HttpResponse response-->Line_48 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_56 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_12 $$ state = parseState(response, null)-->Line_46 $$ state = parseState(response, sessionId)[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_23 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_45 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_37 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_7 $$ HttpResponse response-->Line_45 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_3 $$ String url1 = baseURL1.toString() + "home.jsf"-->Line_9 $$ response = client.execute(buildGetRequest(url1, null))[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_7 $$ HttpResponse response-->Line_46 $$ state = parseState(response, sessionId)[ FD ]
Line_35 $$ state = parseState(response, sessionId)-->Line_57 $$ state = parseState(response, sessionId)[ FD ]
Line_12 $$ state = parseState(response, null)-->Line_24 $$ state = parseState(response, sessionId)[ FD ]
Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_56 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_7 $$ HttpResponse response-->Line_37 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_8 $$ NumberGuessState state-->Line_35 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ HttpResponse response-->Line_12 $$ state = parseState(response, null)[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_6 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_65 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_59 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_8 $$ NumberGuessState state-->Line_24 $$ state = parseState(response, sessionId)[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_46 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ HttpResponse response-->Line_9 $$ response = client.execute(buildGetRequest(url1, null))[ FD ]
Line_6 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_9 $$ response = client.execute(buildGetRequest(url1, null))[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_34 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_16 $$ String sessionId = state.sessionId-->Line_57 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ HttpResponse response-->Line_57 $$ state = parseState(response, sessionId)[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_35 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ HttpResponse response-->Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_59 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ String sessionId = state.sessionId-->Line_62 $$ Assert.assertEquals(sessionId, state.sessionId)[ FD ]
Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ HttpResponse response-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_2 $$ public void testGracefulSimpleFailover(@ArquillianResource() @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource() @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, InterruptedException, URISyntaxException -->Line_4 $$ String url2 = baseURL2.toString() + "home.jsf"[ CD ]
Line_4 $$ String url2 = baseURL2.toString() + "home.jsf"-->Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))[ FD ]
Line_24 $$ state = parseState(response, sessionId)-->Line_57 $$ state = parseState(response, sessionId)[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_46 $$ state = parseState(response, sessionId)[ FD ]
Line_65 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_46 $$ state = parseState(response, sessionId)[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_46 $$ state = parseState(response, sessionId)[ FD ]
Line_12 $$ state = parseState(response, null)-->Line_35 $$ state = parseState(response, sessionId)[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_57 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ HttpResponse response-->Line_34 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_59 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_67 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ String sessionId = state.sessionId-->Line_35 $$ state = parseState(response, sessionId)[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_34 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_4 $$ String url2 = baseURL2.toString() + "home.jsf"-->Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_2 $$ public void testGracefulSimpleFailover(@ArquillianResource() @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource() @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, InterruptedException, URISyntaxException -->Line_5 $$ log.info("URLs are: " + url1 + ", " + url2)[ CD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_45 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_65 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))[ FD ]
Line_8 $$ NumberGuessState state-->Line_12 $$ state = parseState(response, null)[ FD ]
Line_16 $$ String sessionId = state.sessionId-->Line_40 $$ Assert.assertEquals(sessionId, state.sessionId)[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_7 $$ HttpResponse response-->Line_24 $$ state = parseState(response, sessionId)[ FD ]
Line_3 $$ String url1 = baseURL1.toString() + "home.jsf"-->Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_24 $$ state = parseState(response, sessionId)[ FD ]
Line_16 $$ String sessionId = state.sessionId-->Line_24 $$ state = parseState(response, sessionId)[ FD ]
Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_7 $$ HttpResponse response-->Line_59 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_59 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_48 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_65 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_56 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_2 $$ public void testGracefulSimpleFailover(@ArquillianResource() @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource() @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, InterruptedException, URISyntaxException -->Line_4 $$ String url2 = baseURL2.toString() + "home.jsf"[ FD ]
Line_3 $$ String url1 = baseURL1.toString() + "home.jsf"-->Line_65 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_24 $$ state = parseState(response, sessionId)[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_2 $$ public void testGracefulSimpleFailover(@ArquillianResource() @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource() @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, InterruptedException, URISyntaxException -->Line_3 $$ String url1 = baseURL1.toString() + "home.jsf"[ CD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_67 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_6 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_7 $$ HttpResponse response-->Line_23 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_56 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_24 $$ state = parseState(response, sessionId)-->Line_35 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ HttpResponse response-->Line_11 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_14 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_67 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_7 $$ HttpResponse response-->Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_26 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_57 $$ state = parseState(response, sessionId)[ FD ]
Line_12 $$ state = parseState(response, null)-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ HttpResponse response-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_65 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))-->Line_67 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_24 $$ state = parseState(response, sessionId)-->Line_68 $$ state = parseState(response, sessionId)[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_48 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_37 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_56 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_46 $$ state = parseState(response, sessionId)-->Line_57 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ HttpResponse response-->Line_67 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_59 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_24 $$ state = parseState(response, sessionId)-->Line_46 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ HttpResponse response-->Line_56 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_6 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))[ FD ]
Line_6 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_32 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))[ FD ]
Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_57 $$ state = parseState(response, sessionId)[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_65 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_67 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_54 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_2 $$ public void testGracefulSimpleFailover(@ArquillianResource() @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource() @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, InterruptedException, URISyntaxException -->Line_3 $$ String url1 = baseURL1.toString() + "home.jsf"[ FD ]
Line_9 $$ response = client.execute(buildGetRequest(url1, null))-->Line_35 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ HttpResponse response-->Line_21 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))[ FD ]
Line_7 $$ HttpResponse response-->Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_43 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_65 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
