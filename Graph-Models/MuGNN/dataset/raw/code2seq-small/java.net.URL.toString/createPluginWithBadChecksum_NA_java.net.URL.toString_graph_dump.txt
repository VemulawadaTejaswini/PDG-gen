Line_9 $$ Files.walkFileTree(structure, new SimpleFileVisitor<Path>() -->Line_14 $$ Files.copy(file, stream)[ CD ]
Line_19 $$ if (randomBoolean()) -->Line_22 $$ writeMd5(zip, true)[ CD ]
Line_8 $$ try (ZipOutputStream stream = new ZipOutputStream(Files.newOutputStream(zip))) -->Line_13 $$ stream.putNextEntry(new ZipEntry(structure.relativize(file).toString()))[ FD ]
Line_7 $$ Path zip = createTempDir().resolve(structure.getFileName() + ".zip")-->Line_20 $$ writeSha1(zip, true)[ FD ]
Line_7 $$ Path zip = createTempDir().resolve(structure.getFileName() + ".zip")-->Line_22 $$ writeMd5(zip, true)[ FD ]
Line_9 $$ Files.walkFileTree(structure, new SimpleFileVisitor<Path>() -->Line_13 $$ stream.putNextEntry(new ZipEntry(structure.relativize(file).toString()))[ CD ]
Line_8 $$ try (ZipOutputStream stream = new ZipOutputStream(Files.newOutputStream(zip))) -->Line_14 $$ Files.copy(file, stream)[ FD ]
Line_7 $$ Path zip = createTempDir().resolve(structure.getFileName() + ".zip")-->Line_8 $$ try (ZipOutputStream stream = new ZipOutputStream(Files.newOutputStream(zip))) [ FD ]
Line_9 $$ Files.walkFileTree(structure, new SimpleFileVisitor<Path>() -->Line_15 $$ return FileVisitResult.CONTINUE[ CD ]
Line_9 $$ Files.walkFileTree(structure, new SimpleFileVisitor<Path>() -->Line_14 $$ Files.copy(file, stream)[ FD ]
Line_7 $$ Path zip = createTempDir().resolve(structure.getFileName() + ".zip")-->Line_24 $$ return zip.toUri().toURL().toString()[ FD ]
Line_19 $$ if (randomBoolean()) -->Line_20 $$ writeSha1(zip, true)[ CD ]
Line_9 $$ Files.walkFileTree(structure, new SimpleFileVisitor<Path>() -->Line_13 $$ stream.putNextEntry(new ZipEntry(structure.relativize(file).toString()))[ FD ]
