Line_3 $$ PersistenceUnitReader reader = new PersistenceUnitReader(new PathMatchingResourcePatternResolver(), new JndiDataSourceLookup())-->Line_6 $$ url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/META-INF/persistence.xml"))[ FD ]
Line_4 $$ URL url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/persistence-no-schema.xml"))-->Line_5 $$ assertNull(url)[ FD ]
Line_3 $$ PersistenceUnitReader reader = new PersistenceUnitReader(new PathMatchingResourcePatternResolver(), new JndiDataSourceLookup())-->Line_4 $$ URL url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/persistence-no-schema.xml"))[ FD ]
Line_2 $$ public void testPersistenceUnitRootUrl() throws Exception -->Line_4 $$ URL url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/persistence-no-schema.xml"))[ CD ]
Line_6 $$ url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/META-INF/persistence.xml"))-->Line_7 $$ assertTrue("the containing folder should have been returned", url.toString().endsWith("/org/springframework/orm/jpa"))[ FD ]
Line_4 $$ URL url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/persistence-no-schema.xml"))-->Line_6 $$ url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/META-INF/persistence.xml"))[ FD ]
Line_2 $$ public void testPersistenceUnitRootUrl() throws Exception -->Line_6 $$ url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/META-INF/persistence.xml"))[ CD ]
Line_2 $$ public void testPersistenceUnitRootUrl() throws Exception -->Line_7 $$ assertTrue("the containing folder should have been returned", url.toString().endsWith("/org/springframework/orm/jpa"))[ CD ]
Line_2 $$ public void testPersistenceUnitRootUrl() throws Exception -->Line_3 $$ PersistenceUnitReader reader = new PersistenceUnitReader(new PathMatchingResourcePatternResolver(), new JndiDataSourceLookup())[ CD ]
Line_2 $$ public void testPersistenceUnitRootUrl() throws Exception -->Line_5 $$ assertNull(url)[ CD ]
Line_4 $$ URL url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/persistence-no-schema.xml"))-->Line_7 $$ assertTrue("the containing folder should have been returned", url.toString().endsWith("/org/springframework/orm/jpa"))[ FD ]
