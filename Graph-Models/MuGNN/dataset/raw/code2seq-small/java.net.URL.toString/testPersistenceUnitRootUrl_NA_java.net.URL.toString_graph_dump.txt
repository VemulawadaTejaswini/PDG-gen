Line_5 $$ URL url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/persistence-no-schema.xml"))-->Line_6 $$ assertNull(url)[ FD ]
Line_5 $$ URL url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/persistence-no-schema.xml"))-->Line_7 $$ url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/META-INF/persistence.xml"))[ FD ]
Line_5 $$ URL url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/persistence-no-schema.xml"))-->Line_8 $$ assertTrue("the containing folder should have been returned", url.toString().endsWith("/org/springframework/orm/jpa"))[ FD ]
Line_4 $$ PersistenceUnitReader reader = new PersistenceUnitReader(new PathMatchingResourcePatternResolver(), new JndiDataSourceLookup())-->Line_5 $$ URL url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/persistence-no-schema.xml"))[ FD ]
Line_7 $$ url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/META-INF/persistence.xml"))-->Line_8 $$ assertTrue("the containing folder should have been returned", url.toString().endsWith("/org/springframework/orm/jpa"))[ FD ]
Line_4 $$ PersistenceUnitReader reader = new PersistenceUnitReader(new PathMatchingResourcePatternResolver(), new JndiDataSourceLookup())-->Line_7 $$ url = reader.determinePersistenceUnitRootUrl(new ClassPathResource("/org/springframework/orm/jpa/META-INF/persistence.xml"))[ FD ]
