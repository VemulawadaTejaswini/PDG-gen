Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_20 $$ op.get("interface").set("public")[ CD ]
Line_7 $$ rte.retryTask(new Callable<ModelNode>() -->Line_15 $$ return mode[ CD ]
Line_3 $$ ModelNode op = createOpNode(null, "reload")-->Line_44 $$ result = executeOperation(op)[ FD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_24 $$ op.get("socket-binding").set("test-binding")[ CD ]
Line_3 $$ ModelNode op = createOpNode(null, "reload")-->Line_42 $$ result = executeOperation(op)[ FD ]
Line_7 $$ rte.retryTask(new Callable<ModelNode>() -->Line_12 $$ if (!mode.asString().equals("ADMIN_ONLY")) [ CD ]
Line_7 $$ rte.retryTask(new Callable<ModelNode>() -->Line_9 $$ ModelNode rop = createOpNode(null, READ_ATTRIBUTE_OPERATION)[ CD ]
Line_3 $$ ModelNode op = createOpNode(null, "reload")-->Line_21 $$ op.get("port").set(TEST_PORT)[ FD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_7 $$ rte.retryTask(new Callable<ModelNode>() [ CD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_23 $$ op = createOpNode("subsystem=undertow/server=default-server/http-listener=test", ADD)[ CD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_4 $$ op.get(ADMIN_ONLY).set(true)[ CD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_19 $$ op = createOpNode("socket-binding-group=standard-sockets/socket-binding=test-binding", ADD)[ CD ]
Line_6 $$ RetryTaskExecutor<ModelNode> rte = new RetryTaskExecutor()-->Line_7 $$ rte.retryTask(new Callable<ModelNode>() [ FD ]
Line_9 $$ ModelNode rop = createOpNode(null, READ_ATTRIBUTE_OPERATION)-->Line_33 $$ ModelNode mode = executeOperation(rop)[ FD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_44 $$ result = executeOperation(op)[ CD ]
Line_11 $$ ModelNode mode = executeOperation(rop)-->Line_34 $$ if (!mode.asString().equals("NORMAL")) [ FD ]
Line_3 $$ ModelNode op = createOpNode(null, "reload")-->Line_22 $$ result = executeOperation(op)[ FD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_42 $$ result = executeOperation(op)[ CD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_22 $$ result = executeOperation(op)[ CD ]
Line_9 $$ ModelNode rop = createOpNode(null, READ_ATTRIBUTE_OPERATION)-->Line_10 $$ rop.get(NAME).set("running-mode")[ FD ]
Line_3 $$ ModelNode op = createOpNode(null, "reload")-->Line_24 $$ op.get("socket-binding").set("test-binding")[ FD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_21 $$ op.get("port").set(TEST_PORT)[ CD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_5 $$ ModelNode result = executeOperation(op)[ CD ]
Line_3 $$ ModelNode op = createOpNode(null, "reload")-->Line_20 $$ op.get("interface").set("public")[ FD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_39 $$ Assert.assertTrue("Could not connect to created connector.", WebUtil.testHttpURL(new URL("http", url.getHost(), url.getPort(), "/").toString()))[ CD ]
Line_11 $$ ModelNode mode = executeOperation(rop)-->Line_12 $$ if (!mode.asString().equals("ADMIN_ONLY")) [ FD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_40 $$ Assert.assertTrue("Could not connect to created connector.", WebUtil.testHttpURL(new URL("http", url.getHost(), TEST_PORT, "/").toString()))[ CD ]
Line_3 $$ ModelNode op = createOpNode(null, "reload")-->Line_27 $$ op.get(ADMIN_ONLY).set(false)[ FD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_30 $$ rte.retryTask(() -> [ CD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_27 $$ op.get(ADMIN_ONLY).set(false)[ CD ]
Line_3 $$ ModelNode op = createOpNode(null, "reload")-->Line_5 $$ ModelNode result = executeOperation(op)[ FD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_41 $$ op = createOpNode("subsystem=undertow/server=default-server/http-listener=test", REMOVE)[ CD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_3 $$ ModelNode op = createOpNode(null, "reload")[ CD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_6 $$ RetryTaskExecutor<ModelNode> rte = new RetryTaskExecutor()[ CD ]
Line_3 $$ ModelNode op = createOpNode(null, "reload")-->Line_4 $$ op.get(ADMIN_ONLY).set(true)[ FD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_25 $$ result = executeOperation(op)[ CD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_26 $$ op = createOpNode(null, "reload")[ CD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_28 $$ result = executeOperation(op)[ CD ]
Line_7 $$ rte.retryTask(new Callable<ModelNode>() -->Line_11 $$ ModelNode mode = executeOperation(rop)[ CD ]
Line_9 $$ ModelNode rop = createOpNode(null, READ_ATTRIBUTE_OPERATION)-->Line_32 $$ rop.get(NAME).set("running-mode")[ FD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_18 $$ Assert.assertFalse("Could not connect to created connector.", WebUtil.testHttpURL(new URL("http", url.getHost(), url.getPort(), "/").toString()))[ CD ]
Line_2 $$ public void testManagementOnlyMode() throws Exception -->Line_43 $$ op = createOpNode("socket-binding-group=standard-sockets/socket-binding=test-binding", REMOVE)[ CD ]
Line_7 $$ rte.retryTask(new Callable<ModelNode>() -->Line_10 $$ rop.get(NAME).set("running-mode")[ CD ]
Line_3 $$ ModelNode op = createOpNode(null, "reload")-->Line_28 $$ result = executeOperation(op)[ FD ]
Line_3 $$ ModelNode op = createOpNode(null, "reload")-->Line_25 $$ result = executeOperation(op)[ FD ]
Line_9 $$ ModelNode rop = createOpNode(null, READ_ATTRIBUTE_OPERATION)-->Line_11 $$ ModelNode mode = executeOperation(rop)[ FD ]
Line_6 $$ RetryTaskExecutor<ModelNode> rte = new RetryTaskExecutor()-->Line_30 $$ rte.retryTask(() -> [ FD ]
