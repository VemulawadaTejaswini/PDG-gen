Line_6 $$ CookieStore store = new BasicCookieStore()-->Line_12 $$ String ssoID = processSSOCookie(store, serverA.toString(), serverB.toString())[ FD ]
Line_2 $$ public static void executeNoAuthSingleSignOnTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_5 $$ URL warB6 = new URL(serverB + "/war6/")[ CD ]
Line_7 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).build()-->Line_15 $$ checkAccessAllowed(httpclient, warB2 + "index.html")[ FD ]
Line_2 $$ public static void executeNoAuthSingleSignOnTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_10 $$ log.debug("Saw JSESSIONID=" + getSessionIdValueFromState(store))[ FD ]
Line_2 $$ public static void executeNoAuthSingleSignOnTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_12 $$ String ssoID = processSSOCookie(store, serverA.toString(), serverB.toString())[ FD ]
Line_2 $$ public static void executeNoAuthSingleSignOnTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_13 $$ log.debug("Saw JSESSIONIDSSO=" + ssoID)[ FD ]
Line_2 $$ public static void executeNoAuthSingleSignOnTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_7 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).build()[ CD ]
Line_2 $$ public static void executeNoAuthSingleSignOnTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_6 $$ CookieStore store = new BasicCookieStore()[ CD ]
Line_2 $$ public static void executeNoAuthSingleSignOnTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_3 $$ URL warA1 = new URL(serverA, "/war1/")[ CD ]
Line_6 $$ CookieStore store = new BasicCookieStore()-->Line_7 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).build()[ FD ]
Line_2 $$ public static void executeNoAuthSingleSignOnTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_14 $$ log.debug("Prepare /war2/index.html get")[ FD ]
Line_7 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).build()-->Line_20 $$ HttpClientUtils.closeQuietly(httpclient)[ FD ]
Line_2 $$ public static void executeNoAuthSingleSignOnTest(URL serverA, URL serverB, Logger log) throws Exception -->Line_4 $$ URL warB2 = new URL(serverB + "/war2/")[ CD ]
Line_3 $$ URL warA1 = new URL(serverA, "/war1/")-->Line_11 $$ executeFormLogin(httpclient, warA1)[ FD ]
Line_7 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).build()-->Line_17 $$ checkAccessAllowed(httpclient, warB6 + "index.html")[ FD ]
Line_7 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).build()-->Line_18 $$ checkAccessAllowed(httpclient, warB2 + "EJBServlet")[ FD ]
Line_6 $$ CookieStore store = new BasicCookieStore()-->Line_10 $$ log.debug("Saw JSESSIONID=" + getSessionIdValueFromState(store))[ FD ]
Line_7 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).build()-->Line_16 $$ checkAccessAllowed(httpclient, warB2 + "EJBServlet")[ FD ]
Line_7 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).build()-->Line_9 $$ checkAccessDenied(httpclient, warA1 + "index.html")[ FD ]
Line_7 $$ HttpClient httpclient = TestHttpClientUtils.promiscuousCookieHttpClientBuilder().setDefaultCookieStore(store).build()-->Line_11 $$ executeFormLogin(httpclient, warA1)[ FD ]
