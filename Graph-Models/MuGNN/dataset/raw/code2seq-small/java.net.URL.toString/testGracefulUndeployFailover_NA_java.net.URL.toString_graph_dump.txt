Line_7 $$ NumberGuessState state-->Line_56 $$ state = parseState(response, sessionId)[ FD ]
Line_6 $$ HttpResponse response-->Line_13 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_5 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_8 $$ response = client.execute(buildGetRequest(url1, null))[ FD ]
Line_64 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_23 $$ state = parseState(response, sessionId)-->Line_45 $$ state = parseState(response, sessionId)[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_23 $$ state = parseState(response, sessionId)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_47 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_64 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_11 $$ state = parseState(response, null)-->Line_34 $$ state = parseState(response, sessionId)[ FD ]
Line_15 $$ String sessionId = state.sessionId-->Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_6 $$ HttpResponse response-->Line_44 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_56 $$ state = parseState(response, sessionId)[ FD ]
Line_5 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_64 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_45 $$ state = parseState(response, sessionId)-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_5 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))[ FD ]
Line_4 $$ String url2 = baseURL2.toString() + "home.jsf"-->Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_69 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_2 $$ public void testGracefulUndeployFailover(@ArquillianResource() @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource() @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, InterruptedException, URISyntaxException -->Line_4 $$ String url2 = baseURL2.toString() + "home.jsf"[ CD ]
Line_11 $$ state = parseState(response, null)-->Line_23 $$ state = parseState(response, sessionId)[ FD ]
Line_15 $$ String sessionId = state.sessionId-->Line_45 $$ state = parseState(response, sessionId)[ FD ]
Line_6 $$ HttpResponse response-->Line_55 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_2 $$ public void testGracefulUndeployFailover(@ArquillianResource() @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource() @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, InterruptedException, URISyntaxException -->Line_3 $$ String url1 = baseURL1.toString() + "home.jsf"[ FD ]
Line_7 $$ NumberGuessState state-->Line_34 $$ state = parseState(response, sessionId)[ FD ]
Line_11 $$ state = parseState(response, null)-->Line_56 $$ state = parseState(response, sessionId)[ FD ]
Line_11 $$ state = parseState(response, null)-->Line_45 $$ state = parseState(response, sessionId)[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_55 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_34 $$ state = parseState(response, sessionId)[ FD ]
Line_5 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_3 $$ String url1 = baseURL1.toString() + "home.jsf"-->Line_64 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_15 $$ String sessionId = state.sessionId-->Line_16 $$ Assert.assertNotNull(sessionId)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_34 $$ state = parseState(response, sessionId)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_10 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_5 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_33 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_7 $$ NumberGuessState state-->Line_23 $$ state = parseState(response, sessionId)[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_66 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_6 $$ HttpResponse response-->Line_8 $$ response = client.execute(buildGetRequest(url1, null))[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_25 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_56 $$ state = parseState(response, sessionId)[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_64 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_69 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_13 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_58 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_6 $$ HttpResponse response-->Line_34 $$ state = parseState(response, sessionId)[ FD ]
Line_15 $$ String sessionId = state.sessionId-->Line_71 $$ Assert.assertEquals(sessionId, state.sessionId)[ FD ]
Line_6 $$ HttpResponse response-->Line_33 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_7 $$ NumberGuessState state-->Line_11 $$ state = parseState(response, null)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_6 $$ HttpResponse response-->Line_22 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_5 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_58 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_6 $$ HttpResponse response-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_44 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_2 $$ public void testGracefulUndeployFailover(@ArquillianResource() @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource() @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, InterruptedException, URISyntaxException -->Line_3 $$ String url1 = baseURL1.toString() + "home.jsf"[ CD ]
Line_2 $$ public void testGracefulUndeployFailover(@ArquillianResource() @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource() @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, InterruptedException, URISyntaxException -->Line_4 $$ String url2 = baseURL2.toString() + "home.jsf"[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_56 $$ state = parseState(response, sessionId)[ FD ]
Line_6 $$ HttpResponse response-->Line_64 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_36 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_34 $$ state = parseState(response, sessionId)-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_45 $$ state = parseState(response, sessionId)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_45 $$ state = parseState(response, sessionId)[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_64 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_69 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_15 $$ String sessionId = state.sessionId-->Line_23 $$ state = parseState(response, sessionId)[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_47 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_44 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_45 $$ state = parseState(response, sessionId)-->Line_56 $$ state = parseState(response, sessionId)[ FD ]
Line_64 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))-->Line_69 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_4 $$ String url2 = baseURL2.toString() + "home.jsf"-->Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_55 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_69 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_23 $$ state = parseState(response, sessionId)-->Line_34 $$ state = parseState(response, sessionId)[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_55 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_47 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_11 $$ state = parseState(response, null)-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_66 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_6 $$ HttpResponse response-->Line_69 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_23 $$ state = parseState(response, sessionId)-->Line_56 $$ state = parseState(response, sessionId)[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_55 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_6 $$ HttpResponse response-->Line_11 $$ state = parseState(response, null)[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_45 $$ state = parseState(response, sessionId)[ FD ]
Line_15 $$ String sessionId = state.sessionId-->Line_56 $$ state = parseState(response, sessionId)[ FD ]
Line_56 $$ state = parseState(response, sessionId)-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_7 $$ NumberGuessState state-->Line_45 $$ state = parseState(response, sessionId)[ FD ]
Line_15 $$ String sessionId = state.sessionId-->Line_39 $$ Assert.assertEquals(sessionId, state.sessionId)[ FD ]
Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_58 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_11 $$ state = parseState(response, null)[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_3 $$ String url1 = baseURL1.toString() + "home.jsf"-->Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_56 $$ state = parseState(response, sessionId)[ FD ]
Line_6 $$ HttpResponse response-->Line_45 $$ state = parseState(response, sessionId)[ FD ]
Line_6 $$ HttpResponse response-->Line_10 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_58 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_33 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_34 $$ state = parseState(response, sessionId)-->Line_45 $$ state = parseState(response, sessionId)[ FD ]
Line_3 $$ String url1 = baseURL1.toString() + "home.jsf"-->Line_8 $$ response = client.execute(buildGetRequest(url1, null))[ FD ]
Line_3 $$ String url1 = baseURL1.toString() + "home.jsf"-->Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_6 $$ HttpResponse response-->Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))[ FD ]
Line_7 $$ NumberGuessState state-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_6 $$ HttpResponse response-->Line_47 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_6 $$ HttpResponse response-->Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))[ FD ]
Line_6 $$ HttpResponse response-->Line_56 $$ state = parseState(response, sessionId)[ FD ]
Line_64 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))-->Line_66 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_23 $$ state = parseState(response, sessionId)-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_23 $$ state = parseState(response, sessionId)[ FD ]
Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_56 $$ state = parseState(response, sessionId)[ FD ]
Line_6 $$ HttpResponse response-->Line_66 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_15 $$ String sessionId = state.sessionId-->Line_61 $$ Assert.assertEquals(sessionId, state.sessionId)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))[ FD ]
Line_6 $$ HttpResponse response-->Line_25 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_6 $$ HttpResponse response-->Line_58 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_22 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_6 $$ HttpResponse response-->Line_23 $$ state = parseState(response, sessionId)[ FD ]
Line_6 $$ HttpResponse response-->Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))[ FD ]
Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_64 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_6 $$ HttpResponse response-->Line_36 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_64 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "50"))[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_36 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_44 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_15 $$ String sessionId = state.sessionId-->Line_34 $$ state = parseState(response, sessionId)[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_22 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_55 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_33 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_6 $$ HttpResponse response-->Line_31 $$ response = client.execute(buildPostRequest(url2, state.sessionId, state.jsfViewState, "100"))[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_44 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_69 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_20 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "1"))-->Line_66 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_25 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_66 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_36 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_58 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_15 $$ String sessionId = state.sessionId-->Line_67 $$ state = parseState(response, sessionId)[ FD ]
Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_47 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_53 $$ response = client.execute(buildPostRequest(url1, state.sessionId, state.jsfViewState, "2"))-->Line_66 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_42 $$ response = client.execute(buildPostRequest(url2, sessionId, state.jsfViewState, "99"))-->Line_45 $$ state = parseState(response, sessionId)[ FD ]
Line_34 $$ state = parseState(response, sessionId)-->Line_56 $$ state = parseState(response, sessionId)[ FD ]
Line_8 $$ response = client.execute(buildGetRequest(url1, null))-->Line_34 $$ state = parseState(response, sessionId)[ FD ]
