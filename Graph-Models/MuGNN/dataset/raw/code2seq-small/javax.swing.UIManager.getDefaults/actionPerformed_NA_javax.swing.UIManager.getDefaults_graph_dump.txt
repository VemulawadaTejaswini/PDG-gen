Line_33 $$ final JBTable table = new JBTable(new DefaultTableModel(data, new Object[] -->Line_39 $$ if (isCellEditable(row, column) && e instanceof MouseEvent) [ CD ]
Line_19 $$ new DialogWrapper(project) -->Line_94 $$ TableUtil.ensureSelectionExists(myTable)[ CD ]
Line_8 $$ Object key = keys.nextElement()-->Line_9 $$ data[i][0] = key[ FD ]
Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() -->Line_81 $$ return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)[ FD ]
Line_19 $$ new DialogWrapper(project) -->Line_30 $$ return project == null ? null : "UI.Defaults.Dialog"[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_18 $$ final Project project = getEventProject(e)[ FD ]
Line_7 $$ while (keys.hasMoreElements()) -->Line_10 $$ data[i][1] = defaults.get(key)[ CD ]
Line_58 $$ final Color c = (Color) value-->Line_59 $$ label.setText(String.format("[r=%d,g=%d,b=%d] hex=0x%s", c.getRed(), c.getGreen(), c.getBlue(), ColorUtil.toHex(c)))[ FD ]
Line_39 $$ if (isCellEditable(row, column) && e instanceof MouseEvent) -->Line_42 $$ if (newColor != null) [ CD ]
Line_63 $$ if (value instanceof Icon) -->Line_73 $$ if (value instanceof Border) [ CD ]
Line_65 $$ final Icon icon = new IconWrap((Icon) value)-->Line_67 $$ label.setIcon(icon)[ FD ]
Line_39 $$ if (isCellEditable(row, column) && e instanceof MouseEvent) -->Line_40 $$ final Object color = getValueAt(row, column)[ CD ]
Line_33 $$ final JBTable table = new JBTable(new DefaultTableModel(data, new Object[] -->Line_35 $$ return column == 1 && getValueAt(row, column) instanceof Color[ CD ]
Line_41 $$ final Color newColor = ColorPicker.showDialog(this, "Choose Color", (Color) color, true, null, true)-->Line_42 $$ if (newColor != null) [ FD ]
Line_66 $$ if (icon.getIconHeight() <= 20) -->Line_67 $$ label.setIcon(icon)[ CD ]
Line_19 $$ new DialogWrapper(project) -->Line_90 $$ table.setShowGrid(false)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_19 $$ new DialogWrapper(project) [ CD ]
Line_6 $$ int i = 0-->Line_11 $$ i++[ FD ]
Line_33 $$ final JBTable table = new JBTable(new DefaultTableModel(data, new Object[] -->Line_46 $$ setValueAt(colorUIResource, row, column)[ FD ]
Line_57 $$ if (value instanceof Color) -->Line_58 $$ final Color c = (Color) value[ CD ]
Line_57 $$ if (value instanceof Color) -->Line_60 $$ label.setForeground(ColorUtil.isDark(c) ? Color.white : Color.black)[ CD ]
Line_19 $$ new DialogWrapper(project) -->Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() [ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_3 $$ final UIDefaults defaults = UIManager.getDefaults()[ CD ]
Line_33 $$ final JBTable table = new JBTable(new DefaultTableModel(data, new Object[] -->Line_44 $$ final Object key = getValueAt(row, 0)[ FD ]
Line_85 $$ new TableSpeedSearch(table, new PairFunction<Object, Cell, String>() -->Line_87 $$ return cell.column == 1 ? null : String.valueOf(o)[ CD ]
Line_54 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_92 $$ panel.add(pane, BorderLayout.CENTER)[ FD ]
Line_57 $$ if (value instanceof Color) -->Line_59 $$ label.setText(String.format("[r=%d,g=%d,b=%d] hex=0x%s", c.getRed(), c.getGreen(), c.getBlue(), ColorUtil.toHex(c)))[ CD ]
Line_33 $$ final JBTable table = new JBTable(new DefaultTableModel(data, new Object[] -->Line_40 $$ final Object color = getValueAt(row, column)[ FD ]
Line_33 $$ final JBTable table = new JBTable(new DefaultTableModel(data, new Object[] -->Line_49 $$ return false[ CD ]
Line_7 $$ while (keys.hasMoreElements()) -->Line_11 $$ i++[ CD ]
Line_19 $$ new DialogWrapper(project) -->Line_33 $$ final JBTable table = new JBTable(new DefaultTableModel(data, new Object[] [ CD ]
Line_42 $$ if (newColor != null) -->Line_43 $$ final ColorUIResource colorUIResource = new ColorUIResource(newColor)[ CD ]
Line_3 $$ final UIDefaults defaults = UIManager.getDefaults()-->Line_5 $$ final Object[][] data = new Object[defaults.size()][2][ FD ]
Line_58 $$ final Color c = (Color) value-->Line_61 $$ panel.setBackground(c)[ FD ]
Line_43 $$ final ColorUIResource colorUIResource = new ColorUIResource(newColor)-->Line_46 $$ setValueAt(colorUIResource, row, column)[ FD ]
Line_63 $$ if (value instanceof Icon) -->Line_72 $$ return panel[ CD ]
Line_55 $$ final JLabel label = new JLabel(value == null ? "" : value.toString())-->Line_76 $$ label.setText(String.format("[%d, %d, %d, %d] %s", i.top, i.left, i.bottom, i.right, label.getText()))[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_18 $$ final Project project = getEventProject(e)[ CD ]
Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() -->Line_90 $$ table.setShowGrid(false)[ FD ]
Line_7 $$ while (keys.hasMoreElements()) -->Line_8 $$ Object key = keys.nextElement()[ CD ]
Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() -->Line_55 $$ final JLabel label = new JLabel(value == null ? "" : value.toString())[ CD ]
Line_13 $$ Arrays.sort(data, new Comparator<Object[]>() -->Line_15 $$ return StringUtil.naturalCompare(o1[0].toString(), o2[0].toString())[ CD ]
Line_65 $$ final Icon icon = new IconWrap((Icon) value)-->Line_69 $$ label.setText(String.format("(%dx%d) %s)", icon.getIconWidth(), icon.getIconHeight(), label.getText()))[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_6 $$ int i = 0[ CD ]
Line_42 $$ if (newColor != null) -->Line_45 $$ UIManager.put(key, colorUIResource)[ CD ]
Line_19 $$ new DialogWrapper(project) -->Line_92 $$ panel.add(pane, BorderLayout.CENTER)[ CD ]
Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() -->Line_57 $$ if (value instanceof Color) [ FD ]
Line_55 $$ final JLabel label = new JLabel(value == null ? "" : value.toString())-->Line_59 $$ label.setText(String.format("[r=%d,g=%d,b=%d] hex=0x%s", c.getRed(), c.getGreen(), c.getBlue(), ColorUtil.toHex(c)))[ FD ]
Line_57 $$ if (value instanceof Color) -->Line_63 $$ if (value instanceof Icon) [ CD ]
Line_58 $$ final Color c = (Color) value-->Line_60 $$ label.setForeground(ColorUtil.isDark(c) ? Color.white : Color.black)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_4 $$ Enumeration keys = defaults.keys()[ CD ]
Line_55 $$ final JLabel label = new JLabel(value == null ? "" : value.toString())-->Line_56 $$ panel.add(label, BorderLayout.CENTER)[ FD ]
Line_3 $$ final UIDefaults defaults = UIManager.getDefaults()-->Line_4 $$ Enumeration keys = defaults.keys()[ FD ]
Line_8 $$ Object key = keys.nextElement()-->Line_45 $$ UIManager.put(key, colorUIResource)[ FD ]
Line_54 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_61 $$ panel.setBackground(c)[ FD ]
Line_43 $$ final ColorUIResource colorUIResource = new ColorUIResource(newColor)-->Line_45 $$ UIManager.put(key, colorUIResource)[ FD ]
Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() -->Line_73 $$ if (value instanceof Border) [ FD ]
Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() -->Line_57 $$ if (value instanceof Color) [ CD ]
Line_4 $$ Enumeration keys = defaults.keys()-->Line_7 $$ while (keys.hasMoreElements()) [ FD ]
Line_42 $$ if (newColor != null) -->Line_46 $$ setValueAt(colorUIResource, row, column)[ CD ]
Line_57 $$ if (value instanceof Color) -->Line_62 $$ return panel[ CD ]
Line_33 $$ final JBTable table = new JBTable(new DefaultTableModel(data, new Object[] -->Line_35 $$ return column == 1 && getValueAt(row, column) instanceof Color[ FD ]
Line_8 $$ Object key = keys.nextElement()-->Line_10 $$ data[i][1] = defaults.get(key)[ FD ]
Line_85 $$ new TableSpeedSearch(table, new PairFunction<Object, Cell, String>() -->Line_87 $$ return cell.column == 1 ? null : String.valueOf(o)[ FD ]
Line_19 $$ new DialogWrapper(project) -->Line_27 $$ return myTable[ CD ]
Line_33 $$ final JBTable table = new JBTable(new DefaultTableModel(data, new Object[] -->Line_39 $$ if (isCellEditable(row, column) && e instanceof MouseEvent) [ FD ]
Line_4 $$ Enumeration keys = defaults.keys()-->Line_8 $$ Object key = keys.nextElement()[ FD ]
Line_65 $$ final Icon icon = new IconWrap((Icon) value)-->Line_66 $$ if (icon.getIconHeight() <= 20) [ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_7 $$ while (keys.hasMoreElements()) [ CD ]
Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() -->Line_55 $$ final JLabel label = new JLabel(value == null ? "" : value.toString())[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_13 $$ Arrays.sort(data, new Comparator<Object[]>() [ CD ]
Line_19 $$ new DialogWrapper(project) -->Line_95 $$ return panel[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_5 $$ final Object[][] data = new Object[defaults.size()][2][ CD ]
Line_55 $$ final JLabel label = new JLabel(value == null ? "" : value.toString())-->Line_67 $$ label.setIcon(icon)[ FD ]
Line_33 $$ final JBTable table = new JBTable(new DefaultTableModel(data, new Object[] -->Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() [ FD ]
Line_3 $$ final UIDefaults defaults = UIManager.getDefaults()-->Line_10 $$ data[i][1] = defaults.get(key)[ FD ]
Line_42 $$ if (newColor != null) -->Line_44 $$ final Object key = getValueAt(row, 0)[ CD ]
Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() -->Line_54 $$ final JPanel panel = new JPanel(new BorderLayout())[ CD ]
Line_7 $$ while (keys.hasMoreElements()) -->Line_9 $$ data[i][0] = key[ CD ]
Line_5 $$ final Object[][] data = new Object[defaults.size()][2]-->Line_13 $$ Arrays.sort(data, new Comparator<Object[]>() [ FD ]
Line_55 $$ final JLabel label = new JLabel(value == null ? "" : value.toString())-->Line_69 $$ label.setText(String.format("(%dx%d) %s)", icon.getIconWidth(), icon.getIconHeight(), label.getText()))[ FD ]
Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() -->Line_56 $$ panel.add(label, BorderLayout.CENTER)[ CD ]
Line_33 $$ final JBTable table = new JBTable(new DefaultTableModel(data, new Object[] -->Line_81 $$ return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)[ FD ]
Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() -->Line_81 $$ return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)[ CD ]
Line_52 $$ table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() -->Line_63 $$ if (value instanceof Icon) [ FD ]
Line_55 $$ final JLabel label = new JLabel(value == null ? "" : value.toString())-->Line_60 $$ label.setForeground(ColorUtil.isDark(c) ? Color.white : Color.black)[ FD ]
Line_44 $$ final Object key = getValueAt(row, 0)-->Line_45 $$ UIManager.put(key, colorUIResource)[ FD ]
Line_39 $$ if (isCellEditable(row, column) && e instanceof MouseEvent) -->Line_41 $$ final Color newColor = ColorPicker.showDialog(this, "Choose Color", (Color) color, true, null, true)[ CD ]
Line_54 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_56 $$ panel.add(label, BorderLayout.CENTER)[ FD ]
Line_57 $$ if (value instanceof Color) -->Line_61 $$ panel.setBackground(c)[ CD ]
Line_33 $$ final JBTable table = new JBTable(new DefaultTableModel(data, new Object[] -->Line_90 $$ table.setShowGrid(false)[ FD ]
