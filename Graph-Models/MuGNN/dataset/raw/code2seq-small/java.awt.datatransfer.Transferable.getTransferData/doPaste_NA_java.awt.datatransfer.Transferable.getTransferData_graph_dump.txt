Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_55 $$ int length = text.length()[ CD ]
Line_6 $$ text = (String) content.getTransferData(DataFlavor.stringFlavor)-->Line_10 $$ if (text == null)[ FD ]
Line_24 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_64 $$ selectionModel.removeSelection()[ FD ]
Line_23 $$ final CaretModel caretModel = editor.getCaretModel()-->Line_30 $$ final int caretOffset = caretModel.getOffset()[ FD ]
Line_10 $$ if (text == null)-->Line_11 $$ return[ CD ]
Line_17 $$ if (!data.isEmpty()) -->Line_19 $$ allValues.addAll(data)[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_8 $$ editor.getComponent().getToolkit().beep()[ FD ]
Line_81 $$ if (!indented.get()) -->Line_82 $$ indentBlock(project, editor, bounds.getStartOffset(), bounds.getEndOffset(), blockIndentAnchorColumn)[ CD ]
Line_4 $$ String text = null-->Line_6 $$ text = (String) content.getTransferData(DataFlavor.stringFlavor)[ FD ]
Line_16 $$ List<? extends TextBlockTransferableData> data = processor.extractTransferableData(content)-->Line_17 $$ if (!data.isEmpty()) [ FD ]
Line_48 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_52 $$ EditorModificationUtil.insertStringAtCaret(editor, _text, false, true)[ CD ]
Line_42 $$ int indentOptions = text.equals(newText) ? settings.REFORMAT_ON_PASTE : CodeInsightSettings.REFORMAT_BLOCK-->Line_45 $$ indentOptions = CodeInsightSettings.INDENT_BLOCK[ FD ]
Line_74 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_78 $$ PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(document)[ CD ]
Line_32 $$ blockIndentAnchorColumn = editor.offsetToLogicalPosition(selectionModel.getSelectionStart()).column-->Line_82 $$ indentBlock(project, editor, bounds.getStartOffset(), bounds.getEndOffset(), blockIndentAnchorColumn)[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_62 $$ caretModel.moveToOffset(bounds.getEndOffset())[ CD ]
Line_31 $$ if (selectionModel.hasSelection() && caretOffset >= selectionModel.getSelectionStart()) -->Line_32 $$ blockIndentAnchorColumn = editor.offsetToLogicalPosition(selectionModel.getSelectionStart()).column[ CD ]
Line_24 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_31 $$ if (selectionModel.hasSelection() && caretOffset >= selectionModel.getSelectionStart()) [ FD ]
Line_16 $$ List<? extends TextBlockTransferableData> data = processor.extractTransferableData(content)-->Line_19 $$ allValues.addAll(data)[ FD ]
Line_4 $$ String text = null-->Line_42 $$ int indentOptions = text.equals(newText) ? settings.REFORMAT_ON_PASTE : CodeInsightSettings.REFORMAT_BLOCK[ FD ]
Line_22 $$ text = TextBlockTransferable.convertLineSeparators(editor, text, allValues)-->Line_55 $$ int length = text.length()[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_30 $$ final int caretOffset = caretModel.getOffset()[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_23 $$ final CaretModel caretModel = editor.getCaretModel()[ CD ]
Line_86 $$ if (!indented.get()) -->Line_87 $$ indentEachLine(project, editor, bounds.getStartOffset(), bounds.getEndOffset())[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_47 $$ final String _text = text[ CD ]
Line_6 $$ text = (String) content.getTransferData(DataFlavor.stringFlavor)-->Line_22 $$ text = TextBlockTransferable.convertLineSeparators(editor, text, allValues)[ FD ]
Line_17 $$ if (!data.isEmpty()) -->Line_18 $$ extraData.put(processor, data)[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_25 $$ final int col = caretModel.getLogicalPosition().column[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_99 $$ if (bounds.isValid()) [ CD ]
Line_22 $$ text = TextBlockTransferable.convertLineSeparators(editor, text, allValues)-->Line_43 $$ text = newText[ FD ]
Line_4 $$ String text = null-->Line_22 $$ text = TextBlockTransferable.convertLineSeparators(editor, text, allValues)[ FD ]
Line_14 $$ final Collection<TextBlockTransferableData> allValues = new ArrayList<TextBlockTransferableData>()-->Line_22 $$ text = TextBlockTransferable.convertLineSeparators(editor, text, allValues)[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_22 $$ text = TextBlockTransferable.convertLineSeparators(editor, text, allValues)[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_14 $$ final Collection<TextBlockTransferableData> allValues = new ArrayList<TextBlockTransferableData>()[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_4 $$ String text = null[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_22 $$ text = TextBlockTransferable.convertLineSeparators(editor, text, allValues)[ FD ]
Line_13 $$ final Map<CopyPastePostProcessor, List<? extends TextBlockTransferableData>> extraData = new HashMap<CopyPastePostProcessor, List<? extends TextBlockTransferableData>>()-->Line_66 $$ for (Map.Entry<CopyPastePostProcessor, List<? extends TextBlockTransferableData>> e : extraData.entrySet()) [ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_52 $$ EditorModificationUtil.insertStringAtCaret(editor, _text, false, true)[ FD ]
Line_25 $$ final int col = caretModel.getLogicalPosition().column-->Line_34 $$ blockIndentAnchorColumn = col[ FD ]
Line_31 $$ if (selectionModel.hasSelection() && caretOffset >= selectionModel.getSelectionStart()) -->Line_34 $$ blockIndentAnchorColumn = col[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_57 $$ if (offset < 0) [ CD ]
Line_23 $$ final CaretModel caretModel = editor.getCaretModel()-->Line_56 $$ int offset = caretModel.getOffset() - length[ FD ]
Line_38 $$ String newText = text-->Line_43 $$ text = newText[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_87 $$ indentEachLine(project, editor, bounds.getStartOffset(), bounds.getEndOffset())[ FD ]
Line_23 $$ final CaretModel caretModel = editor.getCaretModel()-->Line_62 $$ caretModel.moveToOffset(bounds.getEndOffset())[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_61 $$ final RangeMarker bounds = document.createRangeMarker(offset, offset + length)[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_72 $$ if (!pastedTextContainsWhiteSpacesOnly && (virtualFile == null || !SingleRootFileViewProvider.isTooLargeForIntelligence(virtualFile))) [ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_3 $$ CopyPasteManager.getInstance().stopKillRings()[ CD ]
Line_38 $$ String newText = text-->Line_40 $$ newText = preProcessor.preprocessOnPaste(project, file, editor, newText, rawText)[ FD ]
Line_13 $$ final Map<CopyPastePostProcessor, List<? extends TextBlockTransferableData>> extraData = new HashMap<CopyPastePostProcessor, List<? extends TextBlockTransferableData>>()-->Line_18 $$ extraData.put(processor, data)[ FD ]
Line_15 $$ for (CopyPastePostProcessor<? extends TextBlockTransferableData> processor : Extensions.getExtensions(CopyPastePostProcessor.EP_NAME)) -->Line_16 $$ List<? extends TextBlockTransferableData> data = processor.extractTransferableData(content)[ FD ]
Line_38 $$ String newText = text-->Line_42 $$ int indentOptions = text.equals(newText) ? settings.REFORMAT_ON_PASTE : CodeInsightSettings.REFORMAT_BLOCK[ FD ]
Line_6 $$ text = (String) content.getTransferData(DataFlavor.stringFlavor)-->Line_55 $$ int length = text.length()[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_48 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_32 $$ blockIndentAnchorColumn = editor.offsetToLogicalPosition(selectionModel.getSelectionStart()).column[ FD ]
Line_4 $$ String text = null-->Line_55 $$ int length = text.length()[ FD ]
Line_23 $$ final CaretModel caretModel = editor.getCaretModel()-->Line_100 $$ caretModel.moveToOffset(bounds.getEndOffset())[ FD ]
Line_40 $$ newText = preProcessor.preprocessOnPaste(project, file, editor, newText, rawText)-->Line_43 $$ text = newText[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_78 $$ PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(document)[ FD ]
Line_6 $$ text = (String) content.getTransferData(DataFlavor.stringFlavor)-->Line_42 $$ int indentOptions = text.equals(newText) ? settings.REFORMAT_ON_PASTE : CodeInsightSettings.REFORMAT_BLOCK[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_31 $$ if (selectionModel.hasSelection() && caretOffset >= selectionModel.getSelectionStart()) [ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_71 $$ VirtualFile virtualFile = file.getVirtualFile()[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_93 $$ reformatBlock(project, editor, bounds.getStartOffset(), bounds.getEndOffset())[ FD ]
Line_43 $$ text = newText-->Line_55 $$ int length = text.length()[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_63 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_34 $$ blockIndentAnchorColumn = col-->Line_82 $$ indentBlock(project, editor, bounds.getStartOffset(), bounds.getEndOffset(), blockIndentAnchorColumn)[ FD ]
Line_99 $$ if (bounds.isValid()) -->Line_100 $$ caretModel.moveToOffset(bounds.getEndOffset())[ CD ]
Line_4 $$ String text = null-->Line_10 $$ if (text == null)[ FD ]
Line_32 $$ blockIndentAnchorColumn = editor.offsetToLogicalPosition(selectionModel.getSelectionStart()).column-->Line_34 $$ blockIndentAnchorColumn = col[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_24 $$ final SelectionModel selectionModel = editor.getSelectionModel()[ CD ]
Line_40 $$ newText = preProcessor.preprocessOnPaste(project, file, editor, newText, rawText)-->Line_42 $$ int indentOptions = text.equals(newText) ? settings.REFORMAT_ON_PASTE : CodeInsightSettings.REFORMAT_BLOCK[ FD ]
Line_72 $$ if (!pastedTextContainsWhiteSpacesOnly && (virtualFile == null || !SingleRootFileViewProvider.isTooLargeForIntelligence(virtualFile))) -->Line_74 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_39 $$ for (CopyPastePreProcessor preProcessor : Extensions.getExtensions(CopyPastePreProcessor.EP_NAME)) -->Line_40 $$ newText = preProcessor.preprocessOnPaste(project, file, editor, newText, rawText)[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_43 $$ text = newText[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_23 $$ final CaretModel caretModel = editor.getCaretModel()[ FD ]
Line_99 $$ if (bounds.isValid()) -->Line_101 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_44 $$ if (LanguageFormatting.INSTANCE.forContext(file) == null && indentOptions != CodeInsightSettings.NO_REFORMAT) [ FD ]
Line_47 $$ final String _text = text-->Line_52 $$ EditorModificationUtil.insertStringAtCaret(editor, _text, false, true)[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_42 $$ int indentOptions = text.equals(newText) ? settings.REFORMAT_ON_PASTE : CodeInsightSettings.REFORMAT_BLOCK[ CD ]
Line_4 $$ String text = null-->Line_43 $$ text = newText[ FD ]
Line_6 $$ text = (String) content.getTransferData(DataFlavor.stringFlavor)-->Line_43 $$ text = newText[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_40 $$ newText = preProcessor.preprocessOnPaste(project, file, editor, newText, rawText)[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_103 $$ editor.putUserData(EditorEx.LAST_PASTED_REGION, TextRange.create(bounds))[ FD ]
Line_16 $$ List<? extends TextBlockTransferableData> data = processor.extractTransferableData(content)-->Line_18 $$ extraData.put(processor, data)[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_10 $$ if (text == null)[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_70 $$ boolean pastedTextContainsWhiteSpacesOnly = CharArrayUtil.shiftForward(document.getCharsSequence(), bounds.getStartOffset(), " \n\t") >= bounds.getEndOffset()[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_71 $$ VirtualFile virtualFile = file.getVirtualFile()[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_56 $$ int offset = caretModel.getOffset() - length[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_12 $$ final CodeInsightSettings settings = CodeInsightSettings.getInstance()[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_64 $$ selectionModel.removeSelection()[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_44 $$ if (LanguageFormatting.INSTANCE.forContext(file) == null && indentOptions != CodeInsightSettings.NO_REFORMAT) [ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_6 $$ text = (String) content.getTransferData(DataFlavor.stringFlavor)[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_82 $$ indentBlock(project, editor, bounds.getStartOffset(), bounds.getEndOffset(), blockIndentAnchorColumn)[ FD ]
Line_24 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_102 $$ selectionModel.removeSelection()[ FD ]
Line_99 $$ if (bounds.isValid()) -->Line_103 $$ editor.putUserData(EditorEx.LAST_PASTED_REGION, TextRange.create(bounds))[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_16 $$ List<? extends TextBlockTransferableData> data = processor.extractTransferableData(content)[ FD ]
Line_44 $$ if (LanguageFormatting.INSTANCE.forContext(file) == null && indentOptions != CodeInsightSettings.NO_REFORMAT) -->Line_45 $$ indentOptions = CodeInsightSettings.INDENT_BLOCK[ CD ]
Line_14 $$ final Collection<TextBlockTransferableData> allValues = new ArrayList<TextBlockTransferableData>()-->Line_19 $$ allValues.addAll(data)[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_61 $$ final RangeMarker bounds = document.createRangeMarker(offset, offset + length)[ FD ]
Line_99 $$ if (bounds.isValid()) -->Line_102 $$ selectionModel.removeSelection()[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_38 $$ String newText = text[ CD ]
Line_23 $$ final CaretModel caretModel = editor.getCaretModel()-->Line_25 $$ final int col = caretModel.getLogicalPosition().column[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_63 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_13 $$ final Map<CopyPastePostProcessor, List<? extends TextBlockTransferableData>> extraData = new HashMap<CopyPastePostProcessor, List<? extends TextBlockTransferableData>>()[ CD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_24 $$ final SelectionModel selectionModel = editor.getSelectionModel()[ FD ]
Line_2 $$ private static void doPaste(final Editor editor, final Project project, final PsiFile file, final Document document, @NotNull final Transferable content) -->Line_101 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_15 $$ for (CopyPastePostProcessor<? extends TextBlockTransferableData> processor : Extensions.getExtensions(CopyPastePostProcessor.EP_NAME)) -->Line_18 $$ extraData.put(processor, data)[ FD ]
Line_22 $$ text = TextBlockTransferable.convertLineSeparators(editor, text, allValues)-->Line_42 $$ int indentOptions = text.equals(newText) ? settings.REFORMAT_ON_PASTE : CodeInsightSettings.REFORMAT_BLOCK[ FD ]
Line_24 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_32 $$ blockIndentAnchorColumn = editor.offsetToLogicalPosition(selectionModel.getSelectionStart()).column[ FD ]
