Line_5 $$ List<File> fileList = (List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor)-->Line_6 $$ return fileList == null ? null : ContainerUtil.filter(fileList, new Condition<File>() [ FD ]
Line_6 $$ return fileList == null ? null : ContainerUtil.filter(fileList, new Condition<File>() -->Line_8 $$ return !StringUtil.isEmptyOrSpaces(file.getPath())[ CD ]
Line_4 $$ if (transferable.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) -->Line_12 $$ return LinuxDragAndDropSupport.getFiles(transferable)[ CD ]
Line_2 $$ public static List<File> getFileList(@NotNull final Transferable transferable) -->Line_4 $$ if (transferable.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) [ FD ]
Line_4 $$ if (transferable.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) -->Line_5 $$ List<File> fileList = (List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor)[ CD ]
Line_6 $$ return fileList == null ? null : ContainerUtil.filter(fileList, new Condition<File>() -->Line_8 $$ return !StringUtil.isEmptyOrSpaces(file.getPath())[ FD ]
Line_4 $$ if (transferable.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) -->Line_6 $$ return fileList == null ? null : ContainerUtil.filter(fileList, new Condition<File>() [ CD ]
Line_2 $$ public static List<File> getFileList(@NotNull final Transferable transferable) -->Line_12 $$ return LinuxDragAndDropSupport.getFiles(transferable)[ FD ]
Line_2 $$ public static List<File> getFileList(@NotNull final Transferable transferable) -->Line_16 $$ return null[ CD ]
Line_2 $$ public static List<File> getFileList(@NotNull final Transferable transferable) -->Line_5 $$ List<File> fileList = (List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor)[ FD ]
