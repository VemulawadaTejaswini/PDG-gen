Line_2 $$ public void doBuildPatchFile(final File olderFile, final File newerFile, final ZipOutputStream patchOutput) throws IOException -->Line_14 $$ final ZipFile olderZip[ CD ]
Line_16 $$ olderZip = new ZipFile(olderFile)-->Line_47 $$ olderZip.close()[ FD ]
Line_2 $$ public void doBuildPatchFile(final File olderFile, final File newerFile, final ZipOutputStream patchOutput) throws IOException -->Line_34 $$ Utils.copyStream(newerEntryIn, patchOutput)[ FD ]
Line_23 $$ processZipFile(newerFile, new Processor() -->Line_36 $$ writeDiff(olderEntryIn, newerEntryIn, patchOutput)[ FD ]
Line_23 $$ processZipFile(newerFile, new Processor() -->Line_25 $$ if (newerEntry.isDirectory())[ CD ]
Line_12 $$ if (filesToProcess.isEmpty())-->Line_13 $$ return[ CD ]
Line_2 $$ public void doBuildPatchFile(final File olderFile, final File newerFile, final ZipOutputStream patchOutput) throws IOException -->Line_36 $$ writeDiff(olderEntryIn, newerEntryIn, patchOutput)[ FD ]
Line_10 $$ final Set<String> filesToProcess = new HashSet<String>(myFilesToCreate)-->Line_11 $$ filesToProcess.addAll(myFilesToUpdate)[ FD ]
Line_23 $$ processZipFile(newerFile, new Processor() -->Line_25 $$ if (newerEntry.isDirectory())[ FD ]
Line_23 $$ processZipFile(newerFile, new Processor() -->Line_27 $$ String name = newerEntry.getName()[ FD ]
Line_14 $$ final ZipFile olderZip-->Line_32 $$ InputStream olderEntryIn = Utils.findEntryInputStream(olderZip, name)[ FD ]
Line_27 $$ String name = newerEntry.getName()-->Line_32 $$ InputStream olderEntryIn = Utils.findEntryInputStream(olderZip, name)[ FD ]
Line_23 $$ processZipFile(newerFile, new Processor() -->Line_28 $$ if (!filesToProcess.contains(name))[ CD ]
Line_2 $$ public void doBuildPatchFile(final File olderFile, final File newerFile, final ZipOutputStream patchOutput) throws IOException -->Line_10 $$ final Set<String> filesToProcess = new HashSet<String>(myFilesToCreate)[ CD ]
Line_10 $$ final Set<String> filesToProcess = new HashSet<String>(myFilesToCreate)-->Line_12 $$ if (filesToProcess.isEmpty())[ FD ]
Line_25 $$ if (newerEntry.isDirectory())-->Line_26 $$ return[ CD ]
Line_14 $$ final ZipFile olderZip-->Line_16 $$ olderZip = new ZipFile(olderFile)[ FD ]
Line_2 $$ public void doBuildPatchFile(final File olderFile, final File newerFile, final ZipOutputStream patchOutput) throws IOException -->Line_11 $$ filesToProcess.addAll(myFilesToUpdate)[ CD ]
Line_27 $$ String name = newerEntry.getName()-->Line_28 $$ if (!filesToProcess.contains(name))[ FD ]
Line_33 $$ if (olderEntryIn == null) -->Line_36 $$ writeDiff(olderEntryIn, newerEntryIn, patchOutput)[ CD ]
Line_10 $$ final Set<String> filesToProcess = new HashSet<String>(myFilesToCreate)-->Line_28 $$ if (!filesToProcess.contains(name))[ FD ]
Line_32 $$ InputStream olderEntryIn = Utils.findEntryInputStream(olderZip, name)-->Line_33 $$ if (olderEntryIn == null) [ FD ]
Line_33 $$ if (olderEntryIn == null) -->Line_34 $$ Utils.copyStream(newerEntryIn, patchOutput)[ CD ]
Line_2 $$ public void doBuildPatchFile(final File olderFile, final File newerFile, final ZipOutputStream patchOutput) throws IOException -->Line_23 $$ processZipFile(newerFile, new Processor() [ FD ]
Line_23 $$ processZipFile(newerFile, new Processor() -->Line_27 $$ String name = newerEntry.getName()[ CD ]
Line_16 $$ olderZip = new ZipFile(olderFile)-->Line_32 $$ InputStream olderEntryIn = Utils.findEntryInputStream(olderZip, name)[ FD ]
Line_2 $$ public void doBuildPatchFile(final File olderFile, final File newerFile, final ZipOutputStream patchOutput) throws IOException -->Line_12 $$ if (filesToProcess.isEmpty())[ CD ]
Line_2 $$ public void doBuildPatchFile(final File olderFile, final File newerFile, final ZipOutputStream patchOutput) throws IOException -->Line_38 $$ patchOutput.closeEntry()[ FD ]
Line_28 $$ if (!filesToProcess.contains(name))-->Line_29 $$ return[ CD ]
Line_23 $$ processZipFile(newerFile, new Processor() -->Line_34 $$ Utils.copyStream(newerEntryIn, patchOutput)[ FD ]
Line_32 $$ InputStream olderEntryIn = Utils.findEntryInputStream(olderZip, name)-->Line_36 $$ writeDiff(olderEntryIn, newerEntryIn, patchOutput)[ FD ]
Line_14 $$ final ZipFile olderZip-->Line_47 $$ olderZip.close()[ FD ]
Line_2 $$ public void doBuildPatchFile(final File olderFile, final File newerFile, final ZipOutputStream patchOutput) throws IOException -->Line_31 $$ patchOutput.putNextEntry(new ZipEntry(myPath + "/" + name))[ FD ]
