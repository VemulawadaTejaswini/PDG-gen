Line_6 $$ ZipOutputStream tos = new ZipOutputStream(os)-->Line_11 $$ tos.putNextEntry(ze)[ FD ]
Line_6 $$ ZipOutputStream tos = new ZipOutputStream(os)-->Line_12 $$ tos.write(data)[ FD ]
Line_2 $$ public void testUnZip() throws IOException -->Line_24 $$ assertTrue(regularFile.exists())[ CD ]
Line_9 $$ byte[] data = "some-content".getBytes("UTF-8")-->Line_12 $$ tos.write(data)[ FD ]
Line_2 $$ public void testUnZip() throws IOException -->Line_19 $$ FileUtil.unZip(simpleZip, tmp)[ CD ]
Line_2 $$ public void testUnZip() throws IOException -->Line_23 $$ regularFile.createNewFile()[ CD ]
Line_6 $$ ZipOutputStream tos = new ZipOutputStream(os)-->Line_13 $$ tos.closeEntry()[ FD ]
Line_2 $$ public void testUnZip() throws IOException -->Line_20 $$ assertTrue(new File(tmp, "foo").exists())[ CD ]
Line_4 $$ final File simpleZip = new File(del, FILE)-->Line_19 $$ FileUtil.unZip(simpleZip, tmp)[ FD ]
Line_4 $$ final File simpleZip = new File(del, FILE)-->Line_26 $$ FileUtil.unZip(simpleZip, regularFile)[ FD ]
Line_2 $$ public void testUnZip() throws IOException -->Line_22 $$ final File regularFile = new File(tmp, "QuickBrownFoxJumpsOverTheLazyDog")[ CD ]
Line_6 $$ ZipOutputStream tos = new ZipOutputStream(os)-->Line_14 $$ tos.flush()[ FD ]
Line_2 $$ public void testUnZip() throws IOException -->Line_5 $$ OutputStream os = new FileOutputStream(simpleZip)[ CD ]
Line_8 $$ ZipEntry ze = new ZipEntry("foo")-->Line_11 $$ tos.putNextEntry(ze)[ FD ]
Line_22 $$ final File regularFile = new File(tmp, "QuickBrownFoxJumpsOverTheLazyDog")-->Line_24 $$ assertTrue(regularFile.exists())[ FD ]
Line_22 $$ final File regularFile = new File(tmp, "QuickBrownFoxJumpsOverTheLazyDog")-->Line_26 $$ FileUtil.unZip(simpleZip, regularFile)[ FD ]
Line_2 $$ public void testUnZip() throws IOException -->Line_3 $$ setupDirs()[ CD ]
Line_22 $$ final File regularFile = new File(tmp, "QuickBrownFoxJumpsOverTheLazyDog")-->Line_23 $$ regularFile.createNewFile()[ FD ]
Line_6 $$ ZipOutputStream tos = new ZipOutputStream(os)-->Line_15 $$ tos.finish()[ FD ]
Line_6 $$ ZipOutputStream tos = new ZipOutputStream(os)-->Line_17 $$ tos.close()[ FD ]
Line_2 $$ public void testUnZip() throws IOException -->Line_4 $$ final File simpleZip = new File(del, FILE)[ CD ]
Line_8 $$ ZipEntry ze = new ZipEntry("foo")-->Line_10 $$ ze.setSize(data.length)[ FD ]
Line_2 $$ public void testUnZip() throws IOException -->Line_21 $$ assertEquals(12, new File(tmp, "foo").length())[ CD ]
Line_2 $$ public void testUnZip() throws IOException -->Line_6 $$ ZipOutputStream tos = new ZipOutputStream(os)[ CD ]
