Line_5 $$ for (int i = 0; i < data.length; i += 2) -->Line_7 $$ stream.write(data[i + 1].getBytes(CharsetToolkit.UTF8_CHARSET))[ CD ]
Line_2 $$ public static File createTestJar(@NotNull File jarFile, @NotNull String... data) throws IOException -->Line_13 $$ return jarFile[ CD ]
Line_2 $$ public static File createTestJar(@NotNull File jarFile, @NotNull String... data) throws IOException -->Line_3 $$ ZipOutputStream stream = new ZipOutputStream(new FileOutputStream(jarFile))[ CD ]
Line_3 $$ ZipOutputStream stream = new ZipOutputStream(new FileOutputStream(jarFile))-->Line_7 $$ stream.write(data[i + 1].getBytes(CharsetToolkit.UTF8_CHARSET))[ FD ]
Line_5 $$ for (int i = 0; i < data.length; i += 2) -->Line_6 $$ stream.putNextEntry(new ZipEntry(data[i]))[ CD ]
Line_3 $$ ZipOutputStream stream = new ZipOutputStream(new FileOutputStream(jarFile))-->Line_11 $$ stream.close()[ FD ]
Line_5 $$ for (int i = 0; i < data.length; i += 2) -->Line_8 $$ stream.closeEntry()[ CD ]
Line_3 $$ ZipOutputStream stream = new ZipOutputStream(new FileOutputStream(jarFile))-->Line_8 $$ stream.closeEntry()[ FD ]
Line_3 $$ ZipOutputStream stream = new ZipOutputStream(new FileOutputStream(jarFile))-->Line_6 $$ stream.putNextEntry(new ZipEntry(data[i]))[ FD ]
