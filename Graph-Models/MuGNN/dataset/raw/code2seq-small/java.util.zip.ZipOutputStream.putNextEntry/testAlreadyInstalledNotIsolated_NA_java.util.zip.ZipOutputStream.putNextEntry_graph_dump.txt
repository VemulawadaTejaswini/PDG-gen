Line_2 $$ public void testAlreadyInstalledNotIsolated() throws Exception -->Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)[ CD ]
Line_19 $$ foundExpectedMessage |= line.contains("already exists")-->Line_21 $$ assertTrue(foundExpectedMessage)[ FD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_11 $$ String pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "isolated", "false", "jvm", "true", "classname", "FakePlugin")[ FD ]
Line_2 $$ public void testAlreadyInstalledNotIsolated() throws Exception -->Line_15 $$ List<String> output = terminal.getTerminalOutput()[ CD ]
Line_3 $$ String pluginName = "fake-plugin"-->Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)[ FD ]
Line_2 $$ public void testAlreadyInstalledNotIsolated() throws Exception -->Line_6 $$ Path pluginJar = pluginDir.resolve("fake-plugin.jar")[ CD ]
Line_2 $$ public void testAlreadyInstalledNotIsolated() throws Exception -->Line_11 $$ String pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "isolated", "false", "jvm", "true", "classname", "FakePlugin")[ CD ]
Line_3 $$ String pluginName = "fake-plugin"-->Line_11 $$ String pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "isolated", "false", "jvm", "true", "classname", "FakePlugin")[ FD ]
Line_2 $$ public void testAlreadyInstalledNotIsolated() throws Exception -->Line_16 $$ assertEquals("unexpected exit status: output: " + output, ExitStatus.IO_ERROR, status)[ CD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_6 $$ Path pluginJar = pluginDir.resolve("fake-plugin.jar")[ FD ]
Line_2 $$ public void testAlreadyInstalledNotIsolated() throws Exception -->Line_5 $$ Files.createDirectories(pluginDir)[ CD ]
Line_17 $$ boolean foundExpectedMessage = false-->Line_19 $$ foundExpectedMessage |= line.contains("already exists")[ FD ]
Line_7 $$ try (ZipOutputStream out = new JarOutputStream(Files.newOutputStream(pluginJar, StandardOpenOption.CREATE))) -->Line_8 $$ out.putNextEntry(new ZipEntry("foo.class"))[ FD ]
Line_12 $$ ExitStatus status = new PluginManagerCliParser(terminal).execute(args("install " + pluginUrl))-->Line_13 $$ assertEquals("unexpected exit status: output: " + terminal.getTerminalOutput(), ExitStatus.OK, status)[ FD ]
Line_2 $$ public void testAlreadyInstalledNotIsolated() throws Exception -->Line_21 $$ assertTrue(foundExpectedMessage)[ CD ]
Line_2 $$ public void testAlreadyInstalledNotIsolated() throws Exception -->Line_3 $$ String pluginName = "fake-plugin"[ CD ]
Line_14 $$ status = new PluginManagerCliParser(terminal).execute(args("install " + pluginUrl))-->Line_16 $$ assertEquals("unexpected exit status: output: " + output, ExitStatus.IO_ERROR, status)[ FD ]
Line_2 $$ public void testAlreadyInstalledNotIsolated() throws Exception -->Line_13 $$ assertEquals("unexpected exit status: output: " + terminal.getTerminalOutput(), ExitStatus.OK, status)[ CD ]
Line_2 $$ public void testAlreadyInstalledNotIsolated() throws Exception -->Line_14 $$ status = new PluginManagerCliParser(terminal).execute(args("install " + pluginUrl))[ CD ]
Line_12 $$ ExitStatus status = new PluginManagerCliParser(terminal).execute(args("install " + pluginUrl))-->Line_14 $$ status = new PluginManagerCliParser(terminal).execute(args("install " + pluginUrl))[ FD ]
Line_6 $$ Path pluginJar = pluginDir.resolve("fake-plugin.jar")-->Line_7 $$ try (ZipOutputStream out = new JarOutputStream(Files.newOutputStream(pluginJar, StandardOpenOption.CREATE))) [ FD ]
Line_2 $$ public void testAlreadyInstalledNotIsolated() throws Exception -->Line_17 $$ boolean foundExpectedMessage = false[ CD ]
Line_18 $$ for (String line : output) -->Line_19 $$ foundExpectedMessage |= line.contains("already exists")[ FD ]
Line_7 $$ try (ZipOutputStream out = new JarOutputStream(Files.newOutputStream(pluginJar, StandardOpenOption.CREATE))) -->Line_9 $$ out.closeEntry()[ FD ]
Line_17 $$ boolean foundExpectedMessage = false-->Line_21 $$ assertTrue(foundExpectedMessage)[ FD ]
Line_12 $$ ExitStatus status = new PluginManagerCliParser(terminal).execute(args("install " + pluginUrl))-->Line_16 $$ assertEquals("unexpected exit status: output: " + output, ExitStatus.IO_ERROR, status)[ FD ]
Line_2 $$ public void testAlreadyInstalledNotIsolated() throws Exception -->Line_12 $$ ExitStatus status = new PluginManagerCliParser(terminal).execute(args("install " + pluginUrl))[ CD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_5 $$ Files.createDirectories(pluginDir)[ FD ]
