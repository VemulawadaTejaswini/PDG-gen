Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_4 $$ r.nextBytes(bytes)[ FD ]
Line_12 $$ LocalResource ret = recordFactory.newRecordInstance(LocalResource.class)-->Line_17 $$ ret.setTimestamp(files.getFileStatus(new Path(p.toString() + ".zip")).getModificationTime())[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_6 $$ archiveFile.createNewFile()[ CD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_13 $$ ret.setResource(ConverterUtils.getYarnUrlFromPath(new Path(p.toString() + ".zip")))[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_7 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(archiveFile))[ CD ]
Line_12 $$ LocalResource ret = recordFactory.newRecordInstance(LocalResource.class)-->Line_14 $$ ret.setSize(len)[ FD ]
Line_7 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(archiveFile))-->Line_11 $$ out.close()[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_15 $$ ret.setType(LocalResourceType.ARCHIVE)[ CD ]
Line_12 $$ LocalResource ret = recordFactory.newRecordInstance(LocalResource.class)-->Line_16 $$ ret.setVisibility(vis)[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_4 $$ r.nextBytes(bytes)[ CD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_14 $$ ret.setSize(len)[ CD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_13 $$ ret.setResource(ConverterUtils.getYarnUrlFromPath(new Path(p.toString() + ".zip")))[ CD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_8 $$ out.putNextEntry(new ZipEntry(p.getName()))[ CD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_14 $$ ret.setSize(len)[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_9 $$ out.write(bytes)[ CD ]
Line_7 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(archiveFile))-->Line_10 $$ out.closeEntry()[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_11 $$ out.close()[ CD ]
Line_7 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(archiveFile))-->Line_8 $$ out.putNextEntry(new ZipEntry(p.getName()))[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_8 $$ out.putNextEntry(new ZipEntry(p.getName()))[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_18 $$ return ret[ CD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_17 $$ ret.setTimestamp(files.getFileStatus(new Path(p.toString() + ".zip")).getModificationTime())[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_16 $$ ret.setVisibility(vis)[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_17 $$ ret.setTimestamp(files.getFileStatus(new Path(p.toString() + ".zip")).getModificationTime())[ CD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_16 $$ ret.setVisibility(vis)[ CD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_10 $$ out.closeEntry()[ CD ]
Line_5 $$ File archiveFile = new File(p.toUri().getPath() + ".zip")-->Line_6 $$ archiveFile.createNewFile()[ FD ]
Line_3 $$ byte[] bytes = new byte[len]-->Line_4 $$ r.nextBytes(bytes)[ FD ]
Line_7 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(archiveFile))-->Line_9 $$ out.write(bytes)[ FD ]
Line_12 $$ LocalResource ret = recordFactory.newRecordInstance(LocalResource.class)-->Line_15 $$ ret.setType(LocalResourceType.ARCHIVE)[ FD ]
Line_3 $$ byte[] bytes = new byte[len]-->Line_9 $$ out.write(bytes)[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_12 $$ LocalResource ret = recordFactory.newRecordInstance(LocalResource.class)[ CD ]
Line_12 $$ LocalResource ret = recordFactory.newRecordInstance(LocalResource.class)-->Line_13 $$ ret.setResource(ConverterUtils.getYarnUrlFromPath(new Path(p.toString() + ".zip")))[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_3 $$ byte[] bytes = new byte[len][ CD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_5 $$ File archiveFile = new File(p.toUri().getPath() + ".zip")[ FD ]
Line_2 $$ static LocalResource createZipFile(FileContext files, Path p, int len, Random r, LocalResourceVisibility vis) throws IOException, URISyntaxException -->Line_5 $$ File archiveFile = new File(p.toUri().getPath() + ".zip")[ CD ]
