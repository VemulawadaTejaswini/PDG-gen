Line_6 $$ ZipEntry entry = new ZipEntry("a.txt")-->Line_9 $$ entry.setSize(text.length)[ FD ]
Line_6 $$ ZipEntry entry = new ZipEntry("a.txt")-->Line_13 $$ output.putNextEntry(entry)[ FD ]
Line_2 $$ public void testPreserveCompressionMethodForEntryExtractedFromOneArchiveAndPackedIntoAnother() throws IOException -->Line_21 $$ JpsArtifact a = addArtifact(archive("b.jar").extractedDir(path, ""))[ CD ]
Line_4 $$ ZipOutputStream output = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(new File(path))))-->Line_15 $$ output.closeEntry()[ FD ]
Line_21 $$ JpsArtifact a = addArtifact(archive("b.jar").extractedDir(path, ""))-->Line_24 $$ final String jarPath = a.getOutputPath() + "/b.jar"[ FD ]
Line_4 $$ ZipOutputStream output = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(new File(path))))-->Line_19 $$ output.close()[ FD ]
Line_21 $$ JpsArtifact a = addArtifact(archive("b.jar").extractedDir(path, ""))-->Line_23 $$ assertOutput(a, fs().archive("b.jar").file("a.txt", "text"))[ FD ]
Line_25 $$ ZipFile zipFile = new ZipFile(new File(jarPath))-->Line_27 $$ ZipEntry entry = zipFile.getEntry("a.txt")[ FD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_12 $$ entry.setCrc(crc32.getValue())[ FD ]
Line_7 $$ byte[] text = "text".getBytes()-->Line_14 $$ output.write(text)[ FD ]
Line_7 $$ byte[] text = "text".getBytes()-->Line_11 $$ crc32.update(text)[ FD ]
Line_4 $$ ZipOutputStream output = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(new File(path))))-->Line_13 $$ output.putNextEntry(entry)[ FD ]
Line_25 $$ ZipFile zipFile = new ZipFile(new File(jarPath))-->Line_31 $$ zipFile.close()[ FD ]
Line_6 $$ ZipEntry entry = new ZipEntry("a.txt")-->Line_12 $$ entry.setCrc(crc32.getValue())[ FD ]
Line_2 $$ public void testPreserveCompressionMethodForEntryExtractedFromOneArchiveAndPackedIntoAnother() throws IOException -->Line_25 $$ ZipFile zipFile = new ZipFile(new File(jarPath))[ CD ]
Line_6 $$ ZipEntry entry = new ZipEntry("a.txt")-->Line_29 $$ assertEquals(ZipEntry.STORED, entry.getMethod())[ FD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_11 $$ crc32.update(text)[ FD ]
Line_4 $$ ZipOutputStream output = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(new File(path))))-->Line_14 $$ output.write(text)[ FD ]
Line_3 $$ String path = createFile("data/a.jar")-->Line_21 $$ JpsArtifact a = addArtifact(archive("b.jar").extractedDir(path, ""))[ FD ]
Line_2 $$ public void testPreserveCompressionMethodForEntryExtractedFromOneArchiveAndPackedIntoAnother() throws IOException -->Line_23 $$ assertOutput(a, fs().archive("b.jar").file("a.txt", "text"))[ CD ]
Line_6 $$ ZipEntry entry = new ZipEntry("a.txt")-->Line_28 $$ assertNotNull(entry)[ FD ]
Line_2 $$ public void testPreserveCompressionMethodForEntryExtractedFromOneArchiveAndPackedIntoAnother() throws IOException -->Line_3 $$ String path = createFile("data/a.jar")[ CD ]
Line_2 $$ public void testPreserveCompressionMethodForEntryExtractedFromOneArchiveAndPackedIntoAnother() throws IOException -->Line_4 $$ ZipOutputStream output = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(new File(path))))[ CD ]
Line_2 $$ public void testPreserveCompressionMethodForEntryExtractedFromOneArchiveAndPackedIntoAnother() throws IOException -->Line_22 $$ buildAll()[ CD ]
Line_2 $$ public void testPreserveCompressionMethodForEntryExtractedFromOneArchiveAndPackedIntoAnother() throws IOException -->Line_24 $$ final String jarPath = a.getOutputPath() + "/b.jar"[ CD ]
Line_6 $$ ZipEntry entry = new ZipEntry("a.txt")-->Line_8 $$ entry.setMethod(ZipEntry.STORED)[ FD ]
