Line_7 $$ try (ZipOutputStream zipOutputStream = new ZipOutputStream(Files.newOutputStream(corrupttedZipFilePath))) -->Line_13 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_7 $$ try (ZipOutputStream zipOutputStream = new ZipOutputStream(Files.newOutputStream(corrupttedZipFilePath))) -->Line_14 $$ zipOutputStream.write(FileServerTestUtil.createRandomData(actualSize))[ FD ]
Line_6 $$ int actualSize = 512-->Line_14 $$ zipOutputStream.write(FileServerTestUtil.createRandomData(actualSize))[ FD ]
Line_2 $$ public void testUnzipCorrupttedFile() throws IOException -->Line_6 $$ int actualSize = 512[ CD ]
Line_8 $$ ZipEntry zipEntry = new ZipEntry(fileEntryName)-->Line_13 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_7 $$ try (ZipOutputStream zipOutputStream = new ZipOutputStream(Files.newOutputStream(corrupttedZipFilePath))) -->Line_15 $$ zipOutputStream.closeEntry()[ FD ]
Line_2 $$ public void testUnzipCorrupttedFile() throws IOException -->Line_5 $$ int annotatedSize = 1024[ CD ]
Line_2 $$ public void testUnzipCorrupttedFile() throws IOException -->Line_3 $$ Path corrupttedZipFilePath = FileServerTestUtil.registerForCleanUp(FileServerTestUtil.createEmptyFile(Paths.get("CorrupttedZipFile")))[ CD ]
Line_9 $$ byte[] buffer = new byte[16]-->Line_11 $$ BigEndianCodec.putLong(buffer, 8, annotatedSize)[ FD ]
Line_5 $$ int annotatedSize = 1024-->Line_11 $$ BigEndianCodec.putLong(buffer, 8, annotatedSize)[ FD ]
Line_9 $$ byte[] buffer = new byte[16]-->Line_10 $$ BigEndianCodec.putLong(buffer, 0, System.currentTimeMillis())[ FD ]
Line_8 $$ ZipEntry zipEntry = new ZipEntry(fileEntryName)-->Line_12 $$ zipEntry.setExtra(buffer)[ FD ]
Line_9 $$ byte[] buffer = new byte[16]-->Line_12 $$ zipEntry.setExtra(buffer)[ FD ]
Line_2 $$ public void testUnzipCorrupttedFile() throws IOException -->Line_4 $$ String fileEntryName = "CorrupttedFile"[ CD ]
Line_3 $$ Path corrupttedZipFilePath = FileServerTestUtil.registerForCleanUp(FileServerTestUtil.createEmptyFile(Paths.get("CorrupttedZipFile")))-->Line_7 $$ try (ZipOutputStream zipOutputStream = new ZipOutputStream(Files.newOutputStream(corrupttedZipFilePath))) [ FD ]
Line_3 $$ Path corrupttedZipFilePath = FileServerTestUtil.registerForCleanUp(FileServerTestUtil.createEmptyFile(Paths.get("CorrupttedZipFile")))-->Line_18 $$ FileHelperUtil.unzip(corrupttedZipFilePath, FileHelperUtil.TEMP_DIR_PATH)[ FD ]
