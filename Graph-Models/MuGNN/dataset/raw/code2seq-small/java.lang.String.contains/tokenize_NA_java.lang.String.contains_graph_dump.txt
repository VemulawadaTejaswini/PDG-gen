Line_2 $$ public void tokenize(@NotNull PsiLiteralExpression element, TokenConsumer consumer) -->Line_10 $$ if (InjectedLanguageUtil.hasInjections(literalExpression))[ CD ]
Line_6 $$ String text = literalExpression.getInnerText()-->Line_16 $$ if (!text.contains("\\")) [ FD ]
Line_7 $$ if (StringUtil.isEmpty(text) || text.length() <= 2) -->Line_8 $$ return[ CD ]
Line_3 $$ PsiLiteralExpressionImpl literalExpression = (PsiLiteralExpressionImpl) element-->Line_10 $$ if (InjectedLanguageUtil.hasInjections(literalExpression))[ FD ]
Line_2 $$ public void tokenize(@NotNull PsiLiteralExpression element, TokenConsumer consumer) -->Line_12 $$ final PsiModifierListOwner listOwner = PsiTreeUtil.getParentOfType(element, PsiModifierListOwner.class)[ FD ]
Line_2 $$ public void tokenize(@NotNull PsiLiteralExpression element, TokenConsumer consumer) -->Line_13 $$ if (listOwner != null && AnnotationUtil.isAnnotated(listOwner, Collections.singleton(AnnotationUtil.NON_NLS), false, false)) [ CD ]
Line_2 $$ public void tokenize(@NotNull PsiLiteralExpression element, TokenConsumer consumer) -->Line_3 $$ PsiLiteralExpressionImpl literalExpression = (PsiLiteralExpressionImpl) element[ CD ]
Line_12 $$ final PsiModifierListOwner listOwner = PsiTreeUtil.getParentOfType(element, PsiModifierListOwner.class)-->Line_13 $$ if (listOwner != null && AnnotationUtil.isAnnotated(listOwner, Collections.singleton(AnnotationUtil.NON_NLS), false, false)) [ FD ]
Line_3 $$ PsiLiteralExpressionImpl literalExpression = (PsiLiteralExpressionImpl) element-->Line_6 $$ String text = literalExpression.getInnerText()[ FD ]
Line_6 $$ String text = literalExpression.getInnerText()-->Line_19 $$ processTextWithEscapeSequences(element, text, consumer)[ FD ]
Line_2 $$ public void tokenize(@NotNull PsiLiteralExpression element, TokenConsumer consumer) -->Line_6 $$ String text = literalExpression.getInnerText()[ CD ]
Line_2 $$ public void tokenize(@NotNull PsiLiteralExpression element, TokenConsumer consumer) -->Line_4 $$ if (literalExpression.getLiteralElementType() != JavaTokenType.STRING_LITERAL)[ CD ]
Line_6 $$ String text = literalExpression.getInnerText()-->Line_7 $$ if (StringUtil.isEmpty(text) || text.length() <= 2) [ FD ]
Line_16 $$ if (!text.contains("\\")) -->Line_19 $$ processTextWithEscapeSequences(element, text, consumer)[ CD ]
Line_2 $$ public void tokenize(@NotNull PsiLiteralExpression element, TokenConsumer consumer) -->Line_19 $$ processTextWithEscapeSequences(element, text, consumer)[ FD ]
Line_10 $$ if (InjectedLanguageUtil.hasInjections(literalExpression))-->Line_11 $$ return[ CD ]
Line_4 $$ if (literalExpression.getLiteralElementType() != JavaTokenType.STRING_LITERAL)-->Line_5 $$ return[ CD ]
Line_2 $$ public void tokenize(@NotNull PsiLiteralExpression element, TokenConsumer consumer) -->Line_12 $$ final PsiModifierListOwner listOwner = PsiTreeUtil.getParentOfType(element, PsiModifierListOwner.class)[ CD ]
Line_2 $$ public void tokenize(@NotNull PsiLiteralExpression element, TokenConsumer consumer) -->Line_17 $$ consumer.consumeToken(element, PlainTextSplitter.getInstance())[ FD ]
Line_2 $$ public void tokenize(@NotNull PsiLiteralExpression element, TokenConsumer consumer) -->Line_7 $$ if (StringUtil.isEmpty(text) || text.length() <= 2) [ CD ]
Line_3 $$ PsiLiteralExpressionImpl literalExpression = (PsiLiteralExpressionImpl) element-->Line_4 $$ if (literalExpression.getLiteralElementType() != JavaTokenType.STRING_LITERAL)[ FD ]
Line_13 $$ if (listOwner != null && AnnotationUtil.isAnnotated(listOwner, Collections.singleton(AnnotationUtil.NON_NLS), false, false)) -->Line_14 $$ return[ CD ]
Line_16 $$ if (!text.contains("\\")) -->Line_17 $$ consumer.consumeToken(element, PlainTextSplitter.getInstance())[ CD ]
Line_2 $$ public void tokenize(@NotNull PsiLiteralExpression element, TokenConsumer consumer) -->Line_16 $$ if (!text.contains("\\")) [ CD ]
