Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_12 $$ planBuilder.addGroup(serverGroups[0], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_9 $$ planBuilder = new RolloutPlanBuilder()[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_10 $$ planBuilder.addGroup(serverGroups[2], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_44 $$ cli.sendLine("ls")[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_4 $$ planBuilder.addGroup(serverGroups[0], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_17 $$ String ls = cli.readOutput()[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_22 $$ long mainTwoTime = Long.valueOf(checkURL("main-two", false))[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_30 $$ cli.sendLine("undeploy RolloutPlanTestCase.war --all-relevant-server-groups")[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_33 $$ mainTwoTime = Long.valueOf(checkURL("main-two", false))[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_41 $$ cli.sendLine("rollout-plan remove --name=testPlan")[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_37 $$ Assert.assertTrue(mainOneTime > otherTwoTime)[ CD ]
Line_24 $$ long otherTwoTime = Long.valueOf(checkURL("other-two", false))-->Line_35 $$ otherTwoTime = Long.valueOf(checkURL("other-two", false))[ FD ]
Line_45 $$ ls = cli.readOutput()-->Line_46 $$ Assert.assertFalse(ls.contains("testPlan"))[ FD ]
Line_3 $$ RolloutPlanBuilder planBuilder = new RolloutPlanBuilder()-->Line_5 $$ planBuilder.addGroup(serverGroups[1], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_27 $$ Assert.assertTrue(mainTwoTime < otherTwoTime)[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_43 $$ cli.sendLine("cd /management-client-content=rollout-plans")[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_31 $$ cli.sendLine("deploy " + warFile.getAbsolutePath() + " --all-server-groups --headers=[ CD ]
Line_23 $$ long mainThreeTime = Long.valueOf(checkURL("main-three", false))-->Line_34 $$ mainThreeTime = Long.valueOf(checkURL("main-three", false))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_21 $$ long mainOneTime = Long.valueOf(checkURL("main-one", false))[ CD ]
Line_21 $$ long mainOneTime = Long.valueOf(checkURL("main-one", false))-->Line_32 $$ mainOneTime = Long.valueOf(checkURL("main-one", false))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_20 $$ cli.sendLine("deploy " + warFile.getAbsolutePath() + " --all-server-groups --headers=[ CD ]
Line_45 $$ ls = cli.readOutput()-->Line_47 $$ Assert.assertFalse(ls.contains("testPlan2"))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_15 $$ cli.sendLine("cd /management-client-content=rollout-plans/rollout-plan")[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_16 $$ cli.sendLine("ls")[ CD ]
Line_17 $$ String ls = cli.readOutput()-->Line_19 $$ Assert.assertTrue(ls.contains("testPlan2"))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_42 $$ cli.sendLine("rollout-plan remove --name=testPlan2")[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_39 $$ Assert.assertTrue(mainThreeTime > otherTwoTime)[ CD ]
Line_17 $$ String ls = cli.readOutput()-->Line_18 $$ Assert.assertTrue(ls.contains("testPlan"))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_46 $$ Assert.assertFalse(ls.contains("testPlan"))[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_3 $$ RolloutPlanBuilder planBuilder = new RolloutPlanBuilder()[ CD ]
Line_3 $$ RolloutPlanBuilder planBuilder = new RolloutPlanBuilder()-->Line_7 $$ String rolloutPlan = planBuilder.buildAsString()[ FD ]
Line_7 $$ String rolloutPlan = planBuilder.buildAsString()-->Line_13 $$ rolloutPlan = planBuilder.buildAsString()[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_28 $$ Assert.assertTrue(mainThreeTime < otherTwoTime)[ CD ]
Line_3 $$ RolloutPlanBuilder planBuilder = new RolloutPlanBuilder()-->Line_12 $$ planBuilder.addGroup(serverGroups[0], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_47 $$ Assert.assertFalse(ls.contains("testPlan2"))[ CD ]
Line_17 $$ String ls = cli.readOutput()-->Line_45 $$ ls = cli.readOutput()[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_13 $$ rolloutPlan = planBuilder.buildAsString()[ CD ]
Line_17 $$ String ls = cli.readOutput()-->Line_46 $$ Assert.assertFalse(ls.contains("testPlan"))[ FD ]
Line_9 $$ planBuilder = new RolloutPlanBuilder()-->Line_13 $$ rolloutPlan = planBuilder.buildAsString()[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_34 $$ mainThreeTime = Long.valueOf(checkURL("main-three", false))[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_19 $$ Assert.assertTrue(ls.contains("testPlan2"))[ CD ]
Line_25 $$ long testOneTime = Long.valueOf(checkURL("test-one", false))-->Line_36 $$ testOneTime = Long.valueOf(checkURL("test-one", false))[ FD ]
Line_9 $$ planBuilder = new RolloutPlanBuilder()-->Line_10 $$ planBuilder.addGroup(serverGroups[2], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_29 $$ Assert.assertTrue(otherTwoTime < testOneTime)[ CD ]
Line_3 $$ RolloutPlanBuilder planBuilder = new RolloutPlanBuilder()-->Line_4 $$ planBuilder.addGroup(serverGroups[0], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ FD ]
Line_3 $$ RolloutPlanBuilder planBuilder = new RolloutPlanBuilder()-->Line_10 $$ planBuilder.addGroup(serverGroups[2], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_7 $$ String rolloutPlan = planBuilder.buildAsString()[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_6 $$ planBuilder.addGroup(serverGroups[2], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ CD ]
Line_3 $$ RolloutPlanBuilder planBuilder = new RolloutPlanBuilder()-->Line_9 $$ planBuilder = new RolloutPlanBuilder()[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_32 $$ mainOneTime = Long.valueOf(checkURL("main-one", false))[ CD ]
Line_17 $$ String ls = cli.readOutput()-->Line_47 $$ Assert.assertFalse(ls.contains("testPlan2"))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_38 $$ Assert.assertTrue(mainTwoTime > otherTwoTime)[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_18 $$ Assert.assertTrue(ls.contains("testPlan"))[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_25 $$ long testOneTime = Long.valueOf(checkURL("test-one", false))[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_26 $$ Assert.assertTrue(mainOneTime < otherTwoTime)[ CD ]
Line_3 $$ RolloutPlanBuilder planBuilder = new RolloutPlanBuilder()-->Line_6 $$ planBuilder.addGroup(serverGroups[2], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_23 $$ long mainThreeTime = Long.valueOf(checkURL("main-three", false))[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_45 $$ ls = cli.readOutput()[ CD ]
Line_9 $$ planBuilder = new RolloutPlanBuilder()-->Line_11 $$ planBuilder.addGroup(serverGroups[1], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_24 $$ long otherTwoTime = Long.valueOf(checkURL("other-two", false))[ CD ]
Line_22 $$ long mainTwoTime = Long.valueOf(checkURL("main-two", false))-->Line_33 $$ mainTwoTime = Long.valueOf(checkURL("main-two", false))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_5 $$ planBuilder.addGroup(serverGroups[1], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ CD ]
Line_9 $$ planBuilder = new RolloutPlanBuilder()-->Line_12 $$ planBuilder.addGroup(serverGroups[0], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_35 $$ otherTwoTime = Long.valueOf(checkURL("other-two", false))[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_11 $$ planBuilder.addGroup(serverGroups[1], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ CD ]
Line_3 $$ RolloutPlanBuilder planBuilder = new RolloutPlanBuilder()-->Line_13 $$ rolloutPlan = planBuilder.buildAsString()[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_36 $$ testOneTime = Long.valueOf(checkURL("test-one", false))[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_8 $$ cli.sendLine("rollout-plan add --name=testPlan --content=" + rolloutPlan)[ CD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_40 $$ Assert.assertTrue(otherTwoTime > testOneTime)[ CD ]
Line_3 $$ RolloutPlanBuilder planBuilder = new RolloutPlanBuilder()-->Line_11 $$ planBuilder.addGroup(serverGroups[1], new RolloutPlanBuilder.RolloutPolicy(true, null, null))[ FD ]
Line_2 $$ public void testInSeriesRolloutPlan() throws Exception -->Line_14 $$ cli.sendLine("rollout-plan add --name=testPlan2 --content=" + rolloutPlan)[ CD ]
