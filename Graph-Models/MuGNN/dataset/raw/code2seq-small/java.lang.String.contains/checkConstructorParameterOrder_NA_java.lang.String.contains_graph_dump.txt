Line_14 $$ int pos = matcher.start(2)-->Line_15 $$ if (previousPos > pos) [ FD ]
Line_6 $$ Matcher matcher = pattern.matcher(javaTerm.getContent())-->Line_7 $$ if (!matcher.find()) [ FD ]
Line_2 $$ protected void checkConstructorParameterOrder(JavaTerm javaTerm) -->Line_6 $$ Matcher matcher = pattern.matcher(javaTerm.getContent())[ FD ]
Line_3 $$ int previousPos = -1-->Line_15 $$ if (previousPos > pos) [ FD ]
Line_2 $$ protected void checkConstructorParameterOrder(JavaTerm javaTerm) -->Line_3 $$ int previousPos = -1[ CD ]
Line_15 $$ if (previousPos > pos) -->Line_16 $$ _javaSourceProcessor.processErrorMessage(_fileName, "Constructor parameter order " + parameterName + ": " + _fileName)[ CD ]
Line_5 $$ Pattern pattern = Pattern.compile("\\-->Line_6 $$ Matcher matcher = pattern.matcher(javaTerm.getContent())[ FD ]
Line_14 $$ int pos = matcher.start(2)-->Line_19 $$ previousPos = pos[ FD ]
Line_15 $$ if (previousPos > pos) -->Line_17 $$ return[ CD ]
Line_10 $$ String beforeParameter = matcher.group(1)-->Line_11 $$ if (beforeParameter.contains(parameterName + " =")) [ FD ]
Line_2 $$ protected void checkConstructorParameterOrder(JavaTerm javaTerm) -->Line_4 $$ for (String parameterName : javaTerm.getParameterNames()) [ FD ]
Line_3 $$ int previousPos = -1-->Line_19 $$ previousPos = pos[ FD ]
Line_6 $$ Matcher matcher = pattern.matcher(javaTerm.getContent())-->Line_10 $$ String beforeParameter = matcher.group(1)[ FD ]
Line_6 $$ Matcher matcher = pattern.matcher(javaTerm.getContent())-->Line_14 $$ int pos = matcher.start(2)[ FD ]
