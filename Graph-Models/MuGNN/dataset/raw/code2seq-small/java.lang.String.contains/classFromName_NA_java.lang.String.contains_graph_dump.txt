Line_3 $$ String className = name.contains(".") ? name : "org.apache.cassandra.db.compaction." + name-->Line_4 $$ Class<AbstractCompactionStrategy> strategyClass = FBUtilities.classForName(className, "compaction strategy")[ FD ]
Line_3 $$ String className = name.contains(".") ? name : "org.apache.cassandra.db.compaction." + name-->Line_6 $$ throw new ConfigurationException(format("Compaction strategy class %s is not derived from AbstractReplicationStrategy", className))[ FD ]
Line_2 $$ private static Class<? extends AbstractCompactionStrategy> classFromName(String name) -->Line_5 $$ if (!AbstractCompactionStrategy.class.isAssignableFrom(strategyClass)) [ CD ]
Line_2 $$ private static Class<? extends AbstractCompactionStrategy> classFromName(String name) -->Line_8 $$ return strategyClass[ CD ]
Line_2 $$ private static Class<? extends AbstractCompactionStrategy> classFromName(String name) -->Line_4 $$ Class<AbstractCompactionStrategy> strategyClass = FBUtilities.classForName(className, "compaction strategy")[ CD ]
Line_2 $$ private static Class<? extends AbstractCompactionStrategy> classFromName(String name) -->Line_3 $$ String className = name.contains(".") ? name : "org.apache.cassandra.db.compaction." + name[ FD ]
Line_2 $$ private static Class<? extends AbstractCompactionStrategy> classFromName(String name) -->Line_3 $$ String className = name.contains(".") ? name : "org.apache.cassandra.db.compaction." + name[ CD ]
Line_4 $$ Class<AbstractCompactionStrategy> strategyClass = FBUtilities.classForName(className, "compaction strategy")-->Line_5 $$ if (!AbstractCompactionStrategy.class.isAssignableFrom(strategyClass)) [ FD ]
