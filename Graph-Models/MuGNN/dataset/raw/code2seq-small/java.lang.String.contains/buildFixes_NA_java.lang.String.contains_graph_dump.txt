Line_5 $$ if (AnnotationUtil.isAnnotated(method, IGNORE, false)) -->Line_6 $$ fixes.add(new RemoveIgnoreAndRename(method))[ CD ]
Line_8 $$ if (TestUtils.isJUnit4TestMethod(method)) -->Line_9 $$ String methodName = method.getName()[ CD ]
Line_2 $$ protected InspectionGadgetsFix[] buildFixes(Object... infos) -->Line_20 $$ final String className = aClass.getName()[ CD ]
Line_10 $$ String newMethodName-->Line_12 $$ newMethodName = null[ FD ]
Line_2 $$ protected InspectionGadgetsFix[] buildFixes(Object... infos) -->Line_3 $$ final List<InspectionGadgetsFix> fixes = new ArrayList(3)[ CD ]
Line_8 $$ if (TestUtils.isJUnit4TestMethod(method)) -->Line_11 $$ if (methodName.startsWith("test")) [ CD ]
Line_10 $$ String newMethodName-->Line_15 $$ newMethodName = "test" + (lowCaseStyle ? "_" + methodName : StringUtil.capitalize(methodName))[ FD ]
Line_2 $$ protected InspectionGadgetsFix[] buildFixes(Object... infos) -->Line_19 $$ final PsiClass aClass = (PsiClass) infos[0][ CD ]
Line_8 $$ if (TestUtils.isJUnit4TestMethod(method)) -->Line_10 $$ String newMethodName[ CD ]
Line_3 $$ final List<InspectionGadgetsFix> fixes = new ArrayList(3)-->Line_6 $$ fixes.add(new RemoveIgnoreAndRename(method))[ FD ]
Line_4 $$ final PsiMethod method = (PsiMethod) infos[1]-->Line_5 $$ if (AnnotationUtil.isAnnotated(method, IGNORE, false)) [ FD ]
Line_11 $$ if (methodName.startsWith("test")) -->Line_15 $$ newMethodName = "test" + (lowCaseStyle ? "_" + methodName : StringUtil.capitalize(methodName))[ CD ]
Line_8 $$ if (TestUtils.isJUnit4TestMethod(method)) -->Line_17 $$ fixes.add(new RemoveTestAnnotationFix(newMethodName))[ CD ]
Line_9 $$ String methodName = method.getName()-->Line_11 $$ if (methodName.startsWith("test")) [ FD ]
Line_9 $$ String methodName = method.getName()-->Line_14 $$ boolean lowCaseStyle = methodName.contains("_")[ FD ]
Line_2 $$ protected InspectionGadgetsFix[] buildFixes(Object... infos) -->Line_22 $$ return fixes.toArray(new InspectionGadgetsFix[fixes.size()])[ CD ]
Line_3 $$ final List<InspectionGadgetsFix> fixes = new ArrayList(3)-->Line_21 $$ fixes.add(new ConvertToJUnit4Fix(className))[ FD ]
Line_11 $$ if (methodName.startsWith("test")) -->Line_12 $$ newMethodName = null[ CD ]
Line_19 $$ final PsiClass aClass = (PsiClass) infos[0]-->Line_20 $$ final String className = aClass.getName()[ FD ]
Line_2 $$ protected InspectionGadgetsFix[] buildFixes(Object... infos) -->Line_21 $$ fixes.add(new ConvertToJUnit4Fix(className))[ CD ]
Line_11 $$ if (methodName.startsWith("test")) -->Line_14 $$ boolean lowCaseStyle = methodName.contains("_")[ CD ]
Line_9 $$ String methodName = method.getName()-->Line_15 $$ newMethodName = "test" + (lowCaseStyle ? "_" + methodName : StringUtil.capitalize(methodName))[ FD ]
Line_2 $$ protected InspectionGadgetsFix[] buildFixes(Object... infos) -->Line_4 $$ final PsiMethod method = (PsiMethod) infos[1][ CD ]
Line_4 $$ final PsiMethod method = (PsiMethod) infos[1]-->Line_8 $$ if (TestUtils.isJUnit4TestMethod(method)) [ FD ]
Line_12 $$ newMethodName = null-->Line_15 $$ newMethodName = "test" + (lowCaseStyle ? "_" + methodName : StringUtil.capitalize(methodName))[ FD ]
Line_3 $$ final List<InspectionGadgetsFix> fixes = new ArrayList(3)-->Line_17 $$ fixes.add(new RemoveTestAnnotationFix(newMethodName))[ FD ]
Line_3 $$ final List<InspectionGadgetsFix> fixes = new ArrayList(3)-->Line_22 $$ return fixes.toArray(new InspectionGadgetsFix[fixes.size()])[ FD ]
Line_2 $$ protected InspectionGadgetsFix[] buildFixes(Object... infos) -->Line_8 $$ if (TestUtils.isJUnit4TestMethod(method)) [ CD ]
Line_2 $$ protected InspectionGadgetsFix[] buildFixes(Object... infos) -->Line_5 $$ if (AnnotationUtil.isAnnotated(method, IGNORE, false)) [ CD ]
Line_4 $$ final PsiMethod method = (PsiMethod) infos[1]-->Line_9 $$ String methodName = method.getName()[ FD ]
