Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_3 $$ String sqlState = getSqlState(ex)[ FD ]
Line_5 $$ String classCode = sqlState.substring(0, 2)-->Line_17 $$ if (CONCURRENCY_FAILURE_CODES.contains(classCode)) [ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_14 $$ return new DataAccessResourceFailureException(buildMessage(task, sql, ex), ex)[ FD ]
Line_5 $$ String classCode = sqlState.substring(0, 2)-->Line_13 $$ if (DATA_ACCESS_RESOURCE_FAILURE_CODES.contains(classCode)) [ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_22 $$ return new QueryTimeoutException(buildMessage(task, sql, ex), ex)[ FD ]
Line_11 $$ if (DATA_INTEGRITY_VIOLATION_CODES.contains(classCode)) -->Line_12 $$ return new DataIntegrityViolationException(buildMessage(task, sql, ex), ex)[ CD ]
Line_5 $$ String classCode = sqlState.substring(0, 2)-->Line_11 $$ if (DATA_INTEGRITY_VIOLATION_CODES.contains(classCode)) [ FD ]
Line_9 $$ if (BAD_SQL_GRAMMAR_CODES.contains(classCode)) -->Line_11 $$ if (DATA_INTEGRITY_VIOLATION_CODES.contains(classCode)) [ CD ]
Line_13 $$ if (DATA_ACCESS_RESOURCE_FAILURE_CODES.contains(classCode)) -->Line_15 $$ if (TRANSIENT_DATA_ACCESS_RESOURCE_CODES.contains(classCode)) [ CD ]
Line_11 $$ if (DATA_INTEGRITY_VIOLATION_CODES.contains(classCode)) -->Line_13 $$ if (DATA_ACCESS_RESOURCE_FAILURE_CODES.contains(classCode)) [ CD ]
Line_5 $$ String classCode = sqlState.substring(0, 2)-->Line_15 $$ if (TRANSIENT_DATA_ACCESS_RESOURCE_CODES.contains(classCode)) [ FD ]
Line_6 $$ if (logger.isDebugEnabled()) -->Line_7 $$ logger.debug("Extracted SQL state class '" + classCode + "' from value '" + sqlState + "'")[ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_24 $$ return null[ CD ]
Line_3 $$ String sqlState = getSqlState(ex)-->Line_4 $$ if (sqlState != null && sqlState.length() >= 2) [ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_16 $$ return new TransientDataAccessResourceException(buildMessage(task, sql, ex), ex)[ FD ]
Line_15 $$ if (TRANSIENT_DATA_ACCESS_RESOURCE_CODES.contains(classCode)) -->Line_16 $$ return new TransientDataAccessResourceException(buildMessage(task, sql, ex), ex)[ CD ]
Line_4 $$ if (sqlState != null && sqlState.length() >= 2) -->Line_6 $$ if (logger.isDebugEnabled()) [ CD ]
Line_13 $$ if (DATA_ACCESS_RESOURCE_FAILURE_CODES.contains(classCode)) -->Line_14 $$ return new DataAccessResourceFailureException(buildMessage(task, sql, ex), ex)[ CD ]
Line_4 $$ if (sqlState != null && sqlState.length() >= 2) -->Line_5 $$ String classCode = sqlState.substring(0, 2)[ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_21 $$ if (ex.getClass().getName().contains("Timeout")) [ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_3 $$ String sqlState = getSqlState(ex)[ CD ]
Line_9 $$ if (BAD_SQL_GRAMMAR_CODES.contains(classCode)) -->Line_10 $$ return new BadSqlGrammarException(task, sql, ex)[ CD ]
Line_21 $$ if (ex.getClass().getName().contains("Timeout")) -->Line_22 $$ return new QueryTimeoutException(buildMessage(task, sql, ex), ex)[ CD ]
Line_15 $$ if (TRANSIENT_DATA_ACCESS_RESOURCE_CODES.contains(classCode)) -->Line_17 $$ if (CONCURRENCY_FAILURE_CODES.contains(classCode)) [ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_21 $$ if (ex.getClass().getName().contains("Timeout")) [ CD ]
Line_3 $$ String sqlState = getSqlState(ex)-->Line_5 $$ String classCode = sqlState.substring(0, 2)[ FD ]
Line_5 $$ String classCode = sqlState.substring(0, 2)-->Line_9 $$ if (BAD_SQL_GRAMMAR_CODES.contains(classCode)) [ FD ]
Line_4 $$ if (sqlState != null && sqlState.length() >= 2) -->Line_9 $$ if (BAD_SQL_GRAMMAR_CODES.contains(classCode)) [ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_18 $$ return new ConcurrencyFailureException(buildMessage(task, sql, ex), ex)[ FD ]
Line_17 $$ if (CONCURRENCY_FAILURE_CODES.contains(classCode)) -->Line_18 $$ return new ConcurrencyFailureException(buildMessage(task, sql, ex), ex)[ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_4 $$ if (sqlState != null && sqlState.length() >= 2) [ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_12 $$ return new DataIntegrityViolationException(buildMessage(task, sql, ex), ex)[ FD ]
