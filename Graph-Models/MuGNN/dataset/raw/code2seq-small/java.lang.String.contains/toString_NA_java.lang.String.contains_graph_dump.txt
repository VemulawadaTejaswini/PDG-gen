Line_13 $$ content = content.substring(0, content.length() - 2)-->Line_16 $$ content = content.substring(0, content.length() - 1)[ FD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_7 $$ outputFormat.setLineSeparator(StringPool.NEW_LINE)[ CD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_5 $$ outputFormat.setExpandEmptyElements(expandEmptyElements)[ CD ]
Line_16 $$ content = content.substring(0, content.length() - 1)-->Line_22 $$ content = StringUtil.replaceFirst(content, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<?xml version=\"1.0\"?>")[ FD ]
Line_16 $$ content = content.substring(0, content.length() - 1)-->Line_18 $$ while (content.contains(" \n")) [ FD ]
Line_11 $$ String content = unsyncByteArrayOutputStream.toString(StringPool.UTF8)-->Line_13 $$ content = content.substring(0, content.length() - 2)[ FD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_10 $$ xmlWriter.write(node)[ FD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_6 $$ outputFormat.setIndent(indent)[ CD ]
Line_11 $$ String content = unsyncByteArrayOutputStream.toString(StringPool.UTF8)-->Line_12 $$ if (content.endsWith("\n\n")) [ FD ]
Line_12 $$ if (content.endsWith("\n\n")) -->Line_13 $$ content = content.substring(0, content.length() - 2)[ CD ]
Line_11 $$ String content = unsyncByteArrayOutputStream.toString(StringPool.UTF8)-->Line_22 $$ content = StringUtil.replaceFirst(content, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<?xml version=\"1.0\"?>")[ FD ]
Line_19 $$ content = StringUtil.replace(content, " \n", "\n")-->Line_18 $$ while (content.contains(" \n")) [ FD ]
Line_11 $$ String content = unsyncByteArrayOutputStream.toString(StringPool.UTF8)-->Line_15 $$ if (content.endsWith("\n")) [ FD ]
Line_21 $$ if (content.startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")) -->Line_22 $$ content = StringUtil.replaceFirst(content, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<?xml version=\"1.0\"?>")[ CD ]
Line_13 $$ content = content.substring(0, content.length() - 2)-->Line_15 $$ if (content.endsWith("\n")) [ FD ]
Line_4 $$ OutputFormat outputFormat = OutputFormat.createPrettyPrint()-->Line_8 $$ outputFormat.setTrimText(trimText)[ FD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_15 $$ if (content.endsWith("\n")) [ CD ]
Line_11 $$ String content = unsyncByteArrayOutputStream.toString(StringPool.UTF8)-->Line_19 $$ content = StringUtil.replace(content, " \n", "\n")[ FD ]
Line_19 $$ content = StringUtil.replace(content, " \n", "\n")-->Line_21 $$ if (content.startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")) [ FD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_8 $$ outputFormat.setTrimText(trimText)[ FD ]
Line_13 $$ content = content.substring(0, content.length() - 2)-->Line_18 $$ while (content.contains(" \n")) [ FD ]
Line_11 $$ String content = unsyncByteArrayOutputStream.toString(StringPool.UTF8)-->Line_21 $$ if (content.startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")) [ FD ]
Line_16 $$ content = content.substring(0, content.length() - 1)-->Line_21 $$ if (content.startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")) [ FD ]
Line_4 $$ OutputFormat outputFormat = OutputFormat.createPrettyPrint()-->Line_6 $$ outputFormat.setIndent(indent)[ FD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_10 $$ xmlWriter.write(node)[ CD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_8 $$ outputFormat.setTrimText(trimText)[ CD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_11 $$ String content = unsyncByteArrayOutputStream.toString(StringPool.UTF8)[ CD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_21 $$ if (content.startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")) [ CD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_12 $$ if (content.endsWith("\n\n")) [ CD ]
Line_11 $$ String content = unsyncByteArrayOutputStream.toString(StringPool.UTF8)-->Line_18 $$ while (content.contains(" \n")) [ FD ]
Line_19 $$ content = StringUtil.replace(content, " \n", "\n")-->Line_22 $$ content = StringUtil.replaceFirst(content, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<?xml version=\"1.0\"?>")[ FD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_4 $$ OutputFormat outputFormat = OutputFormat.createPrettyPrint()[ CD ]
Line_3 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_11 $$ String content = unsyncByteArrayOutputStream.toString(StringPool.UTF8)[ FD ]
Line_9 $$ XMLWriter xmlWriter = new XMLWriter(unsyncByteArrayOutputStream, outputFormat)-->Line_10 $$ xmlWriter.write(node)[ FD ]
Line_18 $$ while (content.contains(" \n")) -->Line_19 $$ content = StringUtil.replace(content, " \n", "\n")[ CD ]
Line_4 $$ OutputFormat outputFormat = OutputFormat.createPrettyPrint()-->Line_5 $$ outputFormat.setExpandEmptyElements(expandEmptyElements)[ FD ]
Line_13 $$ content = content.substring(0, content.length() - 2)-->Line_22 $$ content = StringUtil.replaceFirst(content, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<?xml version=\"1.0\"?>")[ FD ]
Line_15 $$ if (content.endsWith("\n")) -->Line_16 $$ content = content.substring(0, content.length() - 1)[ CD ]
Line_16 $$ content = content.substring(0, content.length() - 1)-->Line_19 $$ content = StringUtil.replace(content, " \n", "\n")[ FD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_24 $$ return content[ CD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_3 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()[ CD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_5 $$ outputFormat.setExpandEmptyElements(expandEmptyElements)[ FD ]
Line_11 $$ String content = unsyncByteArrayOutputStream.toString(StringPool.UTF8)-->Line_16 $$ content = content.substring(0, content.length() - 1)[ FD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_6 $$ outputFormat.setIndent(indent)[ FD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_9 $$ XMLWriter xmlWriter = new XMLWriter(unsyncByteArrayOutputStream, outputFormat)[ CD ]
Line_4 $$ OutputFormat outputFormat = OutputFormat.createPrettyPrint()-->Line_7 $$ outputFormat.setLineSeparator(StringPool.NEW_LINE)[ FD ]
Line_13 $$ content = content.substring(0, content.length() - 2)-->Line_19 $$ content = StringUtil.replace(content, " \n", "\n")[ FD ]
Line_2 $$ public static String toString(Node node, String indent, boolean expandEmptyElements, boolean trimText) throws IOException -->Line_18 $$ while (content.contains(" \n")) [ CD ]
Line_13 $$ content = content.substring(0, content.length() - 2)-->Line_21 $$ if (content.startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")) [ FD ]
