Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_5 $$ boolean shouldPlaceSeparately = eclipseModuleManager.isExpectedModuleSourcePlace(ArrayUtil.find(model.getOrderEntries(), entry))[ FD ]
Line_63 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseSrcVariablePath(srcFile)-->Line_64 $$ if (eclipseSrcVariablePath == null) [ FD ]
Line_26 $$ final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry) entry-->Line_33 $$ setExported(orderEntry, libraryOrderEntry)[ FD ]
Line_51 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)-->Line_84 $$ EJavadocUtil.setupJavadocAttributes(orderEntry, libraryOrderEntry, model)[ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_110 $$ addOrderEntry(EclipseXml.CON_KIND, EclipseXml.JRE_CONTAINER, classpathRoot)[ FD ]
Line_14 $$ relativePath = linkedPath-->Line_18 $$ addOrderEntry(EclipseXml.SRC_KIND, relativePath, classpathRoot, shouldPlaceSeparately && index != -1 ? index : -1)[ FD ]
Line_3 $$ EclipseModuleManager eclipseModuleManager = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule())-->Line_42 $$ if (eclipseVariablePath == null && !eclipseModuleManager.isEclipseLibUrl(files[0])) [ FD ]
Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)-->Line_87 $$ EJavadocUtil.setupAttributes(orderEntry, new Function<String, String>() [ FD ]
Line_44 $$ eclipseVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.CLASSES)-->Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)[ FD ]
Line_62 $$ if (eclipseVariablePath != null) -->Line_63 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseSrcVariablePath(srcFile)[ CD ]
Line_26 $$ final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry) entry-->Line_28 $$ if (libraryOrderEntry.isModuleLevel()) [ FD ]
Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)-->Line_87 $$ EJavadocUtil.setupAttributes(orderEntry, new Function<String, String>() [ FD ]
Line_74 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)-->Line_105 $$ setExported(orderEntry, libraryOrderEntry)[ FD ]
Line_63 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseSrcVariablePath(srcFile)-->Line_67 $$ if (eclipseSrcVariablePath == null) [ FD ]
Line_51 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)-->Line_73 $$ orderEntry.detach()[ FD ]
Line_64 $$ if (eclipseSrcVariablePath == null) -->Line_65 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseLinkedSrcVariablePath(srcFile)[ CD ]
Line_42 $$ if (eclipseVariablePath == null && !eclipseModuleManager.isEclipseLibUrl(files[0])) -->Line_44 $$ eclipseVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.CLASSES)[ CD ]
Line_109 $$ if (!EclipseModuleManagerImpl.getInstance(entry.getOwnerModule()).isForceConfigureJDK()) -->Line_110 $$ addOrderEntry(EclipseXml.CON_KIND, EclipseXml.JRE_CONTAINER, classpathRoot)[ CD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_38 $$ if (eclipseVariablePath == null) [ CD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_54 $$ String eclipseSrcVariablePath = null[ CD ]
Line_98 $$ if (eclipseModuleManager.getUnknownCons().contains(libraryName)) -->Line_100 $$ if (Comparing.strEqual(libraryName, IdeaXml.ECLIPSE_LIBRARY)) [ CD ]
Line_100 $$ if (Comparing.strEqual(libraryName, IdeaXml.ECLIPSE_LIBRARY)) -->Line_101 $$ orderEntry = addOrderEntry(EclipseXml.CON_KIND, EclipseXml.ECLIPSE_PLATFORM, classpathRoot)[ CD ]
Line_51 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)-->Line_93 $$ setExported(orderEntry, libraryOrderEntry)[ FD ]
Line_37 $$ String eclipseVariablePath = eclipseModuleManager.getEclipseVariablePath(files[0])-->Line_40 $$ link = eclipseVariablePath != null[ FD ]
Line_39 $$ eclipseVariablePath = eclipseModuleManager.getEclipseLinkedVarPath(files[0])-->Line_44 $$ eclipseVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.CLASSES)[ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_11 $$ if (!Comparing.equal(contentRoot, EPathUtil.getContentRoot(model))) [ FD ]
Line_26 $$ final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry) entry-->Line_105 $$ setExported(orderEntry, libraryOrderEntry)[ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_25 $$ if (entry instanceof LibraryOrderEntry) [ FD ]
Line_8 $$ for (SourceFolder sourceFolder : contentEntry.getSourceFolders()) -->Line_9 $$ String srcUrl = sourceFolder.getUrl()[ FD ]
Line_68 $$ eclipseSrcVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.SOURCES)-->Line_69 $$ if (eclipseSrcVariablePath != null) [ FD ]
Line_65 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseLinkedSrcVariablePath(srcFile)-->Line_70 $$ eclipseSrcVariablePath = "/" + eclipseSrcVariablePath[ FD ]
Line_51 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)-->Line_74 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)[ FD ]
Line_26 $$ final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry) entry-->Line_84 $$ EJavadocUtil.setupJavadocAttributes(orderEntry, libraryOrderEntry, model)[ FD ]
Line_37 $$ String eclipseVariablePath = eclipseModuleManager.getEclipseVariablePath(files[0])-->Line_62 $$ if (eclipseVariablePath != null) [ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_84 $$ EJavadocUtil.setupJavadocAttributes(orderEntry, libraryOrderEntry, model)[ FD ]
Line_108 $$ if (entry instanceof InheritedJdkOrderEntry) -->Line_124 $$ addOrderEntry(EclipseXml.CON_KIND, jdkLink, classpathRoot)[ CD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)[ FD ]
Line_60 $$ final String srcFile = srcFiles[0]-->Line_65 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseLinkedSrcVariablePath(srcFile)[ FD ]
Line_74 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)-->Line_83 $$ setOrRemoveAttribute(orderEntry, EclipseXml.SOURCEPATH_ATTR, addSrcRoots ? (eclipseSrcVariablePath != null ? eclipseSrcVariablePath : srcRelativePath) : null)[ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_3 $$ EclipseModuleManager eclipseModuleManager = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule())[ CD ]
Line_100 $$ if (Comparing.strEqual(libraryName, IdeaXml.ECLIPSE_LIBRARY)) -->Line_103 $$ orderEntry = addOrderEntry(EclipseXml.CON_KIND, EclipseXml.USER_LIBRARY + '/' + libraryName, classpathRoot)[ CD ]
Line_115 $$ if (jdk == null) -->Line_119 $$ if (jdk.getSdkType() instanceof JavaSdkType) [ CD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_47 $$ if (eclipseVariablePath != null) [ CD ]
Line_25 $$ if (entry instanceof LibraryOrderEntry) -->Line_27 $$ final String libraryName = libraryOrderEntry.getLibraryName()[ CD ]
Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)-->Line_74 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)[ FD ]
Line_3 $$ EclipseModuleManager eclipseModuleManager = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule())-->Line_39 $$ eclipseVariablePath = eclipseModuleManager.getEclipseLinkedVarPath(files[0])[ FD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_42 $$ if (eclipseVariablePath == null && !eclipseModuleManager.isEclipseLibUrl(files[0])) [ CD ]
Line_3 $$ EclipseModuleManager eclipseModuleManager = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule())-->Line_65 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseLinkedSrcVariablePath(srcFile)[ FD ]
Line_51 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)-->Line_83 $$ setOrRemoveAttribute(orderEntry, EclipseXml.SOURCEPATH_ATTR, addSrcRoots ? (eclipseSrcVariablePath != null ? eclipseSrcVariablePath : srcRelativePath) : null)[ FD ]
Line_26 $$ final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry) entry-->Line_93 $$ setExported(orderEntry, libraryOrderEntry)[ FD ]
Line_47 $$ if (eclipseVariablePath != null) -->Line_50 $$ LOG.assertTrue(!StringUtil.isEmptyOrSpaces(files[0]), "Library: " + libraryName)[ CD ]
Line_3 $$ EclipseModuleManager eclipseModuleManager = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule())-->Line_37 $$ String eclipseVariablePath = eclipseModuleManager.getEclipseVariablePath(files[0])[ FD ]
Line_74 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)-->Line_84 $$ EJavadocUtil.setupJavadocAttributes(orderEntry, libraryOrderEntry, model)[ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_21 $$ if (entry instanceof ModuleOrderEntry) [ FD ]
Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)-->Line_84 $$ EJavadocUtil.setupJavadocAttributes(orderEntry, libraryOrderEntry, model)[ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_51 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)[ FD ]
Line_28 $$ if (libraryOrderEntry.isModuleLevel()) -->Line_105 $$ setExported(orderEntry, libraryOrderEntry)[ CD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_107 $$ if (entry instanceof JdkOrderEntry) [ FD ]
Line_54 $$ String eclipseSrcVariablePath = null-->Line_67 $$ if (eclipseSrcVariablePath == null) [ FD ]
Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)-->Line_84 $$ EJavadocUtil.setupJavadocAttributes(orderEntry, libraryOrderEntry, model)[ FD ]
Line_37 $$ String eclipseVariablePath = eclipseModuleManager.getEclipseVariablePath(files[0])-->Line_47 $$ if (eclipseVariablePath != null) [ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_109 $$ if (!EclipseModuleManagerImpl.getInstance(entry.getOwnerModule()).isForceConfigureJDK()) [ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_4 $$ if (entry instanceof ModuleSourceOrderEntry) [ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_4 $$ if (entry instanceof ModuleSourceOrderEntry) [ CD ]
Line_58 $$ srcRelativePath = null-->Line_61 $$ srcRelativePath = EPathUtil.collapse2EclipsePath(srcFile, model)[ FD ]
Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)-->Line_24 $$ setExported(orderEntry, ((ExportableOrderEntry) entry))[ FD ]
Line_3 $$ EclipseModuleManager eclipseModuleManager = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule())-->Line_17 $$ int index = eclipseModuleManager.getSrcPlace(srcUrl)[ FD ]
Line_13 $$ if (linkedPath != null) -->Line_14 $$ relativePath = linkedPath[ CD ]
Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)-->Line_83 $$ setOrRemoveAttribute(orderEntry, EclipseXml.SOURCEPATH_ATTR, addSrcRoots ? (eclipseSrcVariablePath != null ? eclipseSrcVariablePath : srcRelativePath) : null)[ FD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_85 $$ final String[] nativeRoots = libraryOrderEntry.getUrls(NativeLibraryOrderRootType.getInstance())[ CD ]
Line_21 $$ if (entry instanceof ModuleOrderEntry) -->Line_23 $$ setAttributeIfAbsent(orderEntry, EclipseXml.COMBINEACCESSRULES_ATTR, EclipseXml.FALSE_VALUE)[ CD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_103 $$ orderEntry = addOrderEntry(EclipseXml.CON_KIND, EclipseXml.USER_LIBRARY + '/' + libraryName, classpathRoot)[ FD ]
Line_72 $$ if (newVarLibrary) -->Line_73 $$ orderEntry.detach()[ CD ]
Line_51 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)-->Line_105 $$ setExported(orderEntry, libraryOrderEntry)[ FD ]
Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)-->Line_74 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)[ FD ]
Line_25 $$ if (entry instanceof LibraryOrderEntry) -->Line_26 $$ final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry) entry[ CD ]
Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)-->Line_93 $$ setExported(orderEntry, libraryOrderEntry)[ FD ]
Line_6 $$ for (ContentEntry contentEntry : model.getContentEntries()) -->Line_7 $$ VirtualFile contentRoot = contentEntry.getFile()[ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_12 $$ String linkedPath = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule()).getEclipseLinkedSrcVariablePath(srcUrl)[ FD ]
Line_28 $$ if (libraryOrderEntry.isModuleLevel()) -->Line_30 $$ if (files.length > 0) [ CD ]
Line_12 $$ String linkedPath = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule()).getEclipseLinkedSrcVariablePath(srcUrl)-->Line_13 $$ if (linkedPath != null) [ FD ]
Line_108 $$ if (entry instanceof InheritedJdkOrderEntry) -->Line_115 $$ if (jdk == null) [ CD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_57 $$ if (srcFiles.length == 0) [ CD ]
Line_3 $$ EclipseModuleManager eclipseModuleManager = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule())-->Line_63 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseSrcVariablePath(srcFile)[ FD ]
Line_10 $$ String relativePath = EPathUtil.collapse2EclipsePath(srcUrl, model)-->Line_14 $$ relativePath = linkedPath[ FD ]
Line_4 $$ if (entry instanceof ModuleSourceOrderEntry) -->Line_21 $$ if (entry instanceof ModuleOrderEntry) [ CD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_101 $$ orderEntry = addOrderEntry(EclipseXml.CON_KIND, EclipseXml.ECLIPSE_PLATFORM, classpathRoot)[ FD ]
Line_44 $$ eclipseVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.CLASSES)-->Line_47 $$ if (eclipseVariablePath != null) [ FD ]
Line_3 $$ EclipseModuleManager eclipseModuleManager = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule())-->Line_98 $$ if (eclipseModuleManager.getUnknownCons().contains(libraryName)) [ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_18 $$ addOrderEntry(EclipseXml.SRC_KIND, relativePath, classpathRoot, shouldPlaceSeparately && index != -1 ? index : -1)[ FD ]
Line_60 $$ final String srcFile = srcFiles[0]-->Line_63 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseSrcVariablePath(srcFile)[ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_32 $$ final Element orderEntry = addOrderEntry(EclipseXml.CON_KIND, EclipseXml.JUNIT_CONTAINER + "/" + libraryName.substring(IdeaXml.JUNIT.length()), classpathRoot)[ FD ]
Line_37 $$ String eclipseVariablePath = eclipseModuleManager.getEclipseVariablePath(files[0])-->Line_44 $$ eclipseVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.CLASSES)[ FD ]
Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)-->Line_93 $$ setExported(orderEntry, libraryOrderEntry)[ FD ]
Line_27 $$ final String libraryName = libraryOrderEntry.getLibraryName()-->Line_32 $$ final Element orderEntry = addOrderEntry(EclipseXml.CON_KIND, EclipseXml.JUNIT_CONTAINER + "/" + libraryName.substring(IdeaXml.JUNIT.length()), classpathRoot)[ FD ]
Line_54 $$ String eclipseSrcVariablePath = null-->Line_63 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseSrcVariablePath(srcFile)[ FD ]
Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)-->Line_23 $$ setAttributeIfAbsent(orderEntry, EclipseXml.COMBINEACCESSRULES_ATTR, EclipseXml.FALSE_VALUE)[ FD ]
Line_72 $$ if (newVarLibrary) -->Line_74 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)[ CD ]
Line_57 $$ if (srcFiles.length == 0) -->Line_58 $$ srcRelativePath = null[ CD ]
Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)-->Line_33 $$ setExported(orderEntry, libraryOrderEntry)[ FD ]
Line_54 $$ String eclipseSrcVariablePath = null-->Line_64 $$ if (eclipseSrcVariablePath == null) [ FD ]
Line_39 $$ eclipseVariablePath = eclipseModuleManager.getEclipseLinkedVarPath(files[0])-->Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)[ FD ]
Line_27 $$ final String libraryName = libraryOrderEntry.getLibraryName()-->Line_100 $$ if (Comparing.strEqual(libraryName, IdeaXml.ECLIPSE_LIBRARY)) [ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_10 $$ String relativePath = EPathUtil.collapse2EclipsePath(srcUrl, model)[ FD ]
Line_9 $$ String srcUrl = sourceFolder.getUrl()-->Line_17 $$ int index = eclipseModuleManager.getSrcPlace(srcUrl)[ FD ]
Line_42 $$ if (eclipseVariablePath == null && !eclipseModuleManager.isEclipseLibUrl(files[0])) -->Line_43 $$ newVarLibrary = true[ CD ]
Line_72 $$ if (newVarLibrary) -->Line_76 $$ LOG.info("Added root " + srcRelativePath + " (in existing var library) can't be replaced with any variable; src roots placed in .eml only")[ CD ]
Line_9 $$ String srcUrl = sourceFolder.getUrl()-->Line_12 $$ String linkedPath = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule()).getEclipseLinkedSrcVariablePath(srcUrl)[ FD ]
Line_54 $$ String eclipseSrcVariablePath = null-->Line_69 $$ if (eclipseSrcVariablePath != null) [ FD ]
Line_37 $$ String eclipseVariablePath = eclipseModuleManager.getEclipseVariablePath(files[0])-->Line_38 $$ if (eclipseVariablePath == null) [ FD ]
Line_21 $$ if (entry instanceof ModuleOrderEntry) -->Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)[ CD ]
Line_60 $$ final String srcFile = srcFiles[0]-->Line_61 $$ srcRelativePath = EPathUtil.collapse2EclipsePath(srcFile, model)[ FD ]
Line_72 $$ if (newVarLibrary) -->Line_77 $$ addSrcRoots = false[ CD ]
Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)-->Line_83 $$ setOrRemoveAttribute(orderEntry, EclipseXml.SOURCEPATH_ATTR, addSrcRoots ? (eclipseSrcVariablePath != null ? eclipseSrcVariablePath : srcRelativePath) : null)[ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_99 $$ orderEntry = addOrderEntry(EclipseXml.CON_KIND, libraryName, classpathRoot)[ FD ]
Line_39 $$ eclipseVariablePath = eclipseModuleManager.getEclipseLinkedVarPath(files[0])-->Line_62 $$ if (eclipseVariablePath != null) [ FD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_83 $$ setOrRemoveAttribute(orderEntry, EclipseXml.SOURCEPATH_ATTR, addSrcRoots ? (eclipseSrcVariablePath != null ? eclipseSrcVariablePath : srcRelativePath) : null)[ CD ]
Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)-->Line_105 $$ setExported(orderEntry, libraryOrderEntry)[ FD ]
Line_39 $$ eclipseVariablePath = eclipseModuleManager.getEclipseLinkedVarPath(files[0])-->Line_40 $$ link = eclipseVariablePath != null[ FD ]
Line_87 $$ EJavadocUtil.setupAttributes(orderEntry, new Function<String, String>() -->Line_89 $$ return EPathUtil.collapse2EclipsePath(nativeRoot, model)[ FD ]
Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)-->Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)[ FD ]
Line_44 $$ eclipseVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.CLASSES)-->Line_62 $$ if (eclipseVariablePath != null) [ FD ]
Line_69 $$ if (eclipseSrcVariablePath != null) -->Line_72 $$ if (newVarLibrary) [ CD ]
Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)-->Line_73 $$ orderEntry.detach()[ FD ]
Line_74 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)-->Line_87 $$ EJavadocUtil.setupAttributes(orderEntry, new Function<String, String>() [ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_6 $$ for (ContentEntry contentEntry : model.getContentEntries()) [ FD ]
Line_65 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseLinkedSrcVariablePath(srcFile)-->Line_68 $$ eclipseSrcVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.SOURCES)[ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_3 $$ EclipseModuleManager eclipseModuleManager = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule())[ FD ]
Line_63 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseSrcVariablePath(srcFile)-->Line_70 $$ eclipseSrcVariablePath = "/" + eclipseSrcVariablePath[ FD ]
Line_65 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseLinkedSrcVariablePath(srcFile)-->Line_69 $$ if (eclipseSrcVariablePath != null) [ FD ]
Line_53 $$ final String srcRelativePath-->Line_58 $$ srcRelativePath = null[ FD ]
Line_67 $$ if (eclipseSrcVariablePath == null) -->Line_68 $$ eclipseSrcVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.SOURCES)[ CD ]
Line_21 $$ if (entry instanceof ModuleOrderEntry) -->Line_24 $$ setExported(orderEntry, ((ExportableOrderEntry) entry))[ CD ]
Line_87 $$ EJavadocUtil.setupAttributes(orderEntry, new Function<String, String>() -->Line_89 $$ return EPathUtil.collapse2EclipsePath(nativeRoot, model)[ CD ]
Line_26 $$ final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry) entry-->Line_44 $$ eclipseVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.CLASSES)[ FD ]
Line_57 $$ if (srcFiles.length == 0) -->Line_62 $$ if (eclipseVariablePath != null) [ CD ]
Line_30 $$ if (files.length > 0) -->Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) [ CD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_93 $$ setExported(orderEntry, libraryOrderEntry)[ CD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_32 $$ final Element orderEntry = addOrderEntry(EclipseXml.CON_KIND, EclipseXml.JUNIT_CONTAINER + "/" + libraryName.substring(IdeaXml.JUNIT.length()), classpathRoot)[ CD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_56 $$ String[] srcFiles = libraryOrderEntry.getRootUrls(OrderRootType.SOURCES)[ CD ]
Line_85 $$ final String[] nativeRoots = libraryOrderEntry.getUrls(NativeLibraryOrderRootType.getInstance())-->Line_87 $$ EJavadocUtil.setupAttributes(orderEntry, new Function<String, String>() [ FD ]
Line_26 $$ final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry) entry-->Line_29 $$ final String[] files = libraryOrderEntry.getRootUrls(OrderRootType.CLASSES)[ FD ]
Line_39 $$ eclipseVariablePath = eclipseModuleManager.getEclipseLinkedVarPath(files[0])-->Line_47 $$ if (eclipseVariablePath != null) [ FD ]
Line_28 $$ if (libraryOrderEntry.isModuleLevel()) -->Line_98 $$ if (eclipseModuleManager.getUnknownCons().contains(libraryName)) [ CD ]
Line_12 $$ String linkedPath = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule()).getEclipseLinkedSrcVariablePath(srcUrl)-->Line_14 $$ relativePath = linkedPath[ FD ]
Line_37 $$ String eclipseVariablePath = eclipseModuleManager.getEclipseVariablePath(files[0])-->Line_39 $$ eclipseVariablePath = eclipseModuleManager.getEclipseLinkedVarPath(files[0])[ FD ]
Line_47 $$ if (eclipseVariablePath != null) -->Line_51 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)[ CD ]
Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)-->Line_73 $$ orderEntry.detach()[ FD ]
Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)-->Line_51 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)[ FD ]
Line_21 $$ if (entry instanceof ModuleOrderEntry) -->Line_25 $$ if (entry instanceof LibraryOrderEntry) [ CD ]
Line_10 $$ String relativePath = EPathUtil.collapse2EclipsePath(srcUrl, model)-->Line_18 $$ addOrderEntry(EclipseXml.SRC_KIND, relativePath, classpathRoot, shouldPlaceSeparately && index != -1 ? index : -1)[ FD ]
Line_25 $$ if (entry instanceof LibraryOrderEntry) -->Line_107 $$ if (entry instanceof JdkOrderEntry) [ CD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_84 $$ EJavadocUtil.setupJavadocAttributes(orderEntry, libraryOrderEntry, model)[ CD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_36 $$ boolean link = false[ CD ]
Line_67 $$ if (eclipseSrcVariablePath == null) -->Line_69 $$ if (eclipseSrcVariablePath != null) [ CD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_108 $$ if (entry instanceof InheritedJdkOrderEntry) [ FD ]
Line_86 $$ if (nativeRoots.length > 0) -->Line_87 $$ EJavadocUtil.setupAttributes(orderEntry, new Function<String, String>() [ CD ]
Line_54 $$ String eclipseSrcVariablePath = null-->Line_65 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseLinkedSrcVariablePath(srcFile)[ FD ]
Line_63 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseSrcVariablePath(srcFile)-->Line_65 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseLinkedSrcVariablePath(srcFile)[ FD ]
Line_108 $$ if (entry instanceof InheritedJdkOrderEntry) -->Line_109 $$ if (!EclipseModuleManagerImpl.getInstance(entry.getOwnerModule()).isForceConfigureJDK()) [ CD ]
Line_26 $$ final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry) entry-->Line_27 $$ final String libraryName = libraryOrderEntry.getLibraryName()[ FD ]
Line_28 $$ if (libraryOrderEntry.isModuleLevel()) -->Line_29 $$ final String[] files = libraryOrderEntry.getRootUrls(OrderRootType.CLASSES)[ CD ]
Line_37 $$ String eclipseVariablePath = eclipseModuleManager.getEclipseVariablePath(files[0])-->Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)[ FD ]
Line_26 $$ final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry) entry-->Line_68 $$ eclipseSrcVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.SOURCES)[ FD ]
Line_47 $$ if (eclipseVariablePath != null) -->Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)[ CD ]
Line_48 $$ orderEntry = addOrderEntry(link ? EclipseXml.LIB_KIND : EclipseXml.VAR_KIND, eclipseVariablePath, classpathRoot)-->Line_105 $$ setExported(orderEntry, libraryOrderEntry)[ FD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_74 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)[ FD ]
Line_11 $$ if (!Comparing.equal(contentRoot, EPathUtil.getContentRoot(model))) -->Line_13 $$ if (linkedPath != null) [ CD ]
Line_3 $$ EclipseModuleManager eclipseModuleManager = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule())-->Line_5 $$ boolean shouldPlaceSeparately = eclipseModuleManager.isExpectedModuleSourcePlace(ArrayUtil.find(model.getOrderEntries(), entry))[ FD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_86 $$ if (nativeRoots.length > 0) [ CD ]
Line_36 $$ boolean link = false-->Line_40 $$ link = eclipseVariablePath != null[ FD ]
Line_51 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)-->Line_87 $$ EJavadocUtil.setupAttributes(orderEntry, new Function<String, String>() [ FD ]
Line_107 $$ if (entry instanceof JdkOrderEntry) -->Line_108 $$ if (entry instanceof InheritedJdkOrderEntry) [ CD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_55 $$ boolean addSrcRoots = true[ CD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_89 $$ return EPathUtil.collapse2EclipsePath(nativeRoot, model)[ FD ]
Line_62 $$ if (eclipseVariablePath != null) -->Line_67 $$ if (eclipseSrcVariablePath == null) [ CD ]
Line_62 $$ if (eclipseVariablePath != null) -->Line_64 $$ if (eclipseSrcVariablePath == null) [ CD ]
Line_38 $$ if (eclipseVariablePath == null) -->Line_39 $$ eclipseVariablePath = eclipseModuleManager.getEclipseLinkedVarPath(files[0])[ CD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_127 $$ throw new ConversionException("Unknown EclipseProjectModel.ClasspathEntry: " + entry.getClass())[ FD ]
Line_4 $$ if (entry instanceof ModuleSourceOrderEntry) -->Line_5 $$ boolean shouldPlaceSeparately = eclipseModuleManager.isExpectedModuleSourcePlace(ArrayUtil.find(model.getOrderEntries(), entry))[ CD ]
Line_63 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseSrcVariablePath(srcFile)-->Line_68 $$ eclipseSrcVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.SOURCES)[ FD ]
Line_53 $$ final String srcRelativePath-->Line_61 $$ srcRelativePath = EPathUtil.collapse2EclipsePath(srcFile, model)[ FD ]
Line_54 $$ String eclipseSrcVariablePath = null-->Line_68 $$ eclipseSrcVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.SOURCES)[ FD ]
Line_9 $$ String srcUrl = sourceFolder.getUrl()-->Line_10 $$ String relativePath = EPathUtil.collapse2EclipsePath(srcUrl, model)[ FD ]
Line_57 $$ if (srcFiles.length == 0) -->Line_60 $$ final String srcFile = srcFiles[0][ CD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_124 $$ addOrderEntry(EclipseXml.CON_KIND, jdkLink, classpathRoot)[ FD ]
Line_25 $$ if (entry instanceof LibraryOrderEntry) -->Line_28 $$ if (libraryOrderEntry.isModuleLevel()) [ CD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)[ FD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_35 $$ boolean newVarLibrary = false[ CD ]
Line_69 $$ if (eclipseSrcVariablePath != null) -->Line_70 $$ eclipseSrcVariablePath = "/" + eclipseSrcVariablePath[ CD ]
Line_55 $$ boolean addSrcRoots = true-->Line_77 $$ addSrcRoots = false[ FD ]
Line_74 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)-->Line_93 $$ setExported(orderEntry, libraryOrderEntry)[ FD ]
Line_108 $$ if (entry instanceof InheritedJdkOrderEntry) -->Line_113 $$ final Sdk jdk = ((JdkOrderEntry) entry).getJdk()[ CD ]
Line_57 $$ if (srcFiles.length == 0) -->Line_61 $$ srcRelativePath = EPathUtil.collapse2EclipsePath(srcFile, model)[ CD ]
Line_2 $$ private void createClasspathEntry(@NotNull OrderEntry entry, @NotNull Element classpathRoot, @NotNull final ModuleRootModel model) throws ConversionException -->Line_61 $$ srcRelativePath = EPathUtil.collapse2EclipsePath(srcFile, model)[ FD ]
Line_22 $$ Element orderEntry = addOrderEntry(EclipseXml.SRC_KIND, '/' + ((ModuleOrderEntry) entry).getModuleName(), classpathRoot)-->Line_51 $$ orderEntry = addOrderEntry(EclipseXml.LIB_KIND, EPathUtil.collapse2EclipsePath(files[0], model), classpathRoot)[ FD ]
Line_6 $$ for (ContentEntry contentEntry : model.getContentEntries()) -->Line_8 $$ for (SourceFolder sourceFolder : contentEntry.getSourceFolders()) [ FD ]
Line_35 $$ boolean newVarLibrary = false-->Line_43 $$ newVarLibrary = true[ FD ]
Line_65 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseLinkedSrcVariablePath(srcFile)-->Line_67 $$ if (eclipseSrcVariablePath == null) [ FD ]
Line_11 $$ if (!Comparing.equal(contentRoot, EPathUtil.getContentRoot(model))) -->Line_12 $$ String linkedPath = EclipseModuleManagerImpl.getInstance(entry.getOwnerModule()).getEclipseLinkedSrcVariablePath(srcUrl)[ CD ]
Line_54 $$ String eclipseSrcVariablePath = null-->Line_70 $$ eclipseSrcVariablePath = "/" + eclipseSrcVariablePath[ FD ]
Line_27 $$ final String libraryName = libraryOrderEntry.getLibraryName()-->Line_98 $$ if (eclipseModuleManager.getUnknownCons().contains(libraryName)) [ FD ]
Line_26 $$ final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry) entry-->Line_85 $$ final String[] nativeRoots = libraryOrderEntry.getUrls(NativeLibraryOrderRootType.getInstance())[ FD ]
Line_63 $$ eclipseSrcVariablePath = eclipseModuleManager.getEclipseSrcVariablePath(srcFile)-->Line_69 $$ if (eclipseSrcVariablePath != null) [ FD ]
Line_27 $$ final String libraryName = libraryOrderEntry.getLibraryName()-->Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) [ FD ]
Line_27 $$ final String libraryName = libraryOrderEntry.getLibraryName()-->Line_99 $$ orderEntry = addOrderEntry(EclipseXml.CON_KIND, libraryName, classpathRoot)[ FD ]
Line_7 $$ VirtualFile contentRoot = contentEntry.getFile()-->Line_11 $$ if (!Comparing.equal(contentRoot, EPathUtil.getContentRoot(model))) [ FD ]
Line_26 $$ final LibraryOrderEntry libraryOrderEntry = (LibraryOrderEntry) entry-->Line_56 $$ String[] srcFiles = libraryOrderEntry.getRootUrls(OrderRootType.SOURCES)[ FD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_53 $$ final String srcRelativePath[ CD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_37 $$ String eclipseVariablePath = eclipseModuleManager.getEclipseVariablePath(files[0])[ CD ]
Line_68 $$ eclipseSrcVariablePath = EPathUtil.collapse2EclipseVariabledPath(libraryOrderEntry, OrderRootType.SOURCES)-->Line_70 $$ eclipseSrcVariablePath = "/" + eclipseSrcVariablePath[ FD ]
Line_38 $$ if (eclipseVariablePath == null) -->Line_40 $$ link = eclipseVariablePath != null[ CD ]
Line_98 $$ if (eclipseModuleManager.getUnknownCons().contains(libraryName)) -->Line_99 $$ orderEntry = addOrderEntry(EclipseXml.CON_KIND, libraryName, classpathRoot)[ CD ]
Line_31 $$ if (libraryName != null && libraryName.contains(IdeaXml.JUNIT) && Comparing.strEqual(files[0], EclipseClasspathReader.getJunitClsUrl(libraryName.contains("4")))) -->Line_33 $$ setExported(orderEntry, libraryOrderEntry)[ CD ]
