Line_2 $$ boolean doMatch(String text, int from, int end, MatchContext context, PsiElement matchedElement) -->Line_14 $$ context.getResult().addSon(new MatchResultImpl(baseHandlerName + "_" + i, matcher.group(i), new SmartPsiPointer(matchedElement), matcher.start(i), matcher.end(i), target))[ FD ]
Line_2 $$ boolean doMatch(String text, int from, int end, MatchContext context, PsiElement matchedElement) -->Line_9 $$ if (!multiline && text.contains("\n"))[ CD ]
Line_12 $$ if (matcher.matches()) -->Line_16 $$ return true[ CD ]
Line_2 $$ boolean doMatch(String text, int from, int end, MatchContext context, PsiElement matchedElement) -->Line_12 $$ if (matcher.matches()) [ CD ]
Line_2 $$ boolean doMatch(String text, int from, int end, MatchContext context, PsiElement matchedElement) -->Line_3 $$ if (from > 0 || end != -1) [ CD ]
Line_2 $$ boolean doMatch(String text, int from, int end, MatchContext context, PsiElement matchedElement) -->Line_11 $$ final Matcher matcher = pattern.matcher(text)[ FD ]
Line_3 $$ if (from > 0 || end != -1) -->Line_4 $$ text = text.substring(from, end == -1 || end >= text.length() ? text.length() : end)[ CD ]
Line_9 $$ if (!multiline && text.contains("\n"))-->Line_10 $$ setMultiline(true)[ CD ]
Line_2 $$ boolean doMatch(String text, int from, int end, MatchContext context, PsiElement matchedElement) -->Line_9 $$ if (!multiline && text.contains("\n"))[ FD ]
Line_11 $$ final Matcher matcher = pattern.matcher(text)-->Line_13 $$ for (int i = 1; i <= matcher.groupCount(); ++i) [ FD ]
Line_11 $$ final Matcher matcher = pattern.matcher(text)-->Line_12 $$ if (matcher.matches()) [ FD ]
Line_12 $$ if (matcher.matches()) -->Line_18 $$ return false[ CD ]
Line_2 $$ boolean doMatch(String text, int from, int end, MatchContext context, PsiElement matchedElement) -->Line_7 $$ return (caseSensitive) ? text.equals(regexp) : text.equalsIgnoreCase(regexp)[ FD ]
Line_4 $$ text = text.substring(from, end == -1 || end >= text.length() ? text.length() : end)-->Line_9 $$ if (!multiline && text.contains("\n"))[ FD ]
Line_11 $$ final Matcher matcher = pattern.matcher(text)-->Line_14 $$ context.getResult().addSon(new MatchResultImpl(baseHandlerName + "_" + i, matcher.group(i), new SmartPsiPointer(matchedElement), matcher.start(i), matcher.end(i), target))[ FD ]
Line_13 $$ for (int i = 1; i <= matcher.groupCount(); ++i) -->Line_14 $$ context.getResult().addSon(new MatchResultImpl(baseHandlerName + "_" + i, matcher.group(i), new SmartPsiPointer(matchedElement), matcher.start(i), matcher.end(i), target))[ FD ]
Line_6 $$ if (simpleString) -->Line_7 $$ return (caseSensitive) ? text.equals(regexp) : text.equalsIgnoreCase(regexp)[ CD ]
Line_2 $$ boolean doMatch(String text, int from, int end, MatchContext context, PsiElement matchedElement) -->Line_11 $$ final Matcher matcher = pattern.matcher(text)[ CD ]
Line_2 $$ boolean doMatch(String text, int from, int end, MatchContext context, PsiElement matchedElement) -->Line_4 $$ text = text.substring(from, end == -1 || end >= text.length() ? text.length() : end)[ FD ]
Line_4 $$ text = text.substring(from, end == -1 || end >= text.length() ? text.length() : end)-->Line_11 $$ final Matcher matcher = pattern.matcher(text)[ FD ]
Line_12 $$ if (matcher.matches()) -->Line_13 $$ for (int i = 1; i <= matcher.groupCount(); ++i) [ CD ]
Line_13 $$ for (int i = 1; i <= matcher.groupCount(); ++i) -->Line_14 $$ context.getResult().addSon(new MatchResultImpl(baseHandlerName + "_" + i, matcher.group(i), new SmartPsiPointer(matchedElement), matcher.start(i), matcher.end(i), target))[ CD ]
Line_4 $$ text = text.substring(from, end == -1 || end >= text.length() ? text.length() : end)-->Line_7 $$ return (caseSensitive) ? text.equals(regexp) : text.equalsIgnoreCase(regexp)[ FD ]
Line_2 $$ boolean doMatch(String text, int from, int end, MatchContext context, PsiElement matchedElement) -->Line_6 $$ if (simpleString) [ CD ]
