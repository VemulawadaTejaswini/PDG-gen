Line_21 $$ Cluster mockCluster = mock(Cluster.class)-->Line_41 $$ verify(mockCluster, never()).getJob(jobID)[ FD ]
Line_5 $$ JobID jobID = new JobID(String.valueOf(startTime), 12345)-->Line_7 $$ when(mockJobStatus.getJobID()).thenReturn(jobID)[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_40 $$ verify(mockJobStatus).getSchedulingInfo()[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_15 $$ when(mockJobStatus.getUsedMem()).thenReturn(1024)[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_31 $$ verify(mockJobStatus).getStartTime()[ CD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_8 $$ when(mockJobStatus.getState()).thenReturn(JobStatus.State.RUNNING)[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_36 $$ verify(mockJobStatus).getNumReservedSlots()[ CD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_14 $$ when(mockJobStatus.getNumReservedSlots()).thenReturn(1)[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_17 $$ when(mockJobStatus.getNeededMem()).thenReturn(2048)[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_37 $$ verify(mockJobStatus).getUsedMem()[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_16 $$ when(mockJobStatus.getReservedMem()).thenReturn(512)[ CD ]
Line_3 $$ TestJobClient client = new TestJobClient(new JobConf())-->Line_23 $$ client.setCluster(mockCluster)[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_33 $$ verify(mockJobStatus).getQueue()[ CD ]
Line_19 $$ Job mockJob = mock(Job.class)-->Line_42 $$ verify(mockJob, never()).getTaskReports(isA(TaskType.class))[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_34 $$ verify(mockJobStatus).getPriority()[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_16 $$ when(mockJobStatus.getReservedMem()).thenReturn(512)[ FD ]
Line_24 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_26 $$ String commandLineOutput = out.toString()[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_8 $$ when(mockJobStatus.getState()).thenReturn(JobStatus.State.RUNNING)[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_35 $$ verify(mockJobStatus).getNumUsedSlots()[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_13 $$ when(mockJobStatus.getNumUsedSlots()).thenReturn(1)[ CD ]
Line_21 $$ Cluster mockCluster = mock(Cluster.class)-->Line_23 $$ client.setCluster(mockCluster)[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_36 $$ verify(mockJobStatus).getNumReservedSlots()[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_9 $$ when(mockJobStatus.getStartTime()).thenReturn(startTime)[ FD ]
Line_21 $$ Cluster mockCluster = mock(Cluster.class)-->Line_22 $$ when(mockCluster.getJob(jobID)).thenReturn(mockJob)[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_5 $$ JobID jobID = new JobID(String.valueOf(startTime), 12345)[ CD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_30 $$ verify(mockJobStatus).getState()[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_18 $$ when(mockJobStatus.getSchedulingInfo()).thenReturn("NA")[ CD ]
Line_4 $$ long startTime = System.currentTimeMillis()-->Line_9 $$ when(mockJobStatus.getStartTime()).thenReturn(startTime)[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_39 $$ verify(mockJobStatus).getNeededMem()[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_20 $$ when(mockJob.getTaskReports(isA(TaskType.class))).thenReturn(new TaskReport[5])[ CD ]
Line_5 $$ JobID jobID = new JobID(String.valueOf(startTime), 12345)-->Line_22 $$ when(mockCluster.getJob(jobID)).thenReturn(mockJob)[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_31 $$ verify(mockJobStatus).getStartTime()[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_37 $$ verify(mockJobStatus).getUsedMem()[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_13 $$ when(mockJobStatus.getNumUsedSlots()).thenReturn(1)[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_29 $$ verify(mockJobStatus, atLeastOnce()).getJobID()[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_32 $$ verify(mockJobStatus).getUsername()[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_11 $$ when(mockJobStatus.getQueue()).thenReturn("mockqueue")[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_42 $$ verify(mockJob, never()).getTaskReports(isA(TaskType.class))[ CD ]
Line_26 $$ String commandLineOutput = out.toString()-->Line_28 $$ Assert.assertTrue(commandLineOutput.contains("Total jobs:1"))[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_29 $$ verify(mockJobStatus, atLeastOnce()).getJobID()[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_38 $$ verify(mockJobStatus).getReservedMem()[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_10 $$ when(mockJobStatus.getUsername()).thenReturn("mockuser")[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_9 $$ when(mockJobStatus.getStartTime()).thenReturn(startTime)[ CD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_15 $$ when(mockJobStatus.getUsedMem()).thenReturn(1024)[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_4 $$ long startTime = System.currentTimeMillis()[ CD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_40 $$ verify(mockJobStatus).getSchedulingInfo()[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)[ CD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_32 $$ verify(mockJobStatus).getUsername()[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_23 $$ client.setCluster(mockCluster)[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_34 $$ verify(mockJobStatus).getPriority()[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_3 $$ TestJobClient client = new TestJobClient(new JobConf())[ CD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_33 $$ verify(mockJobStatus).getQueue()[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_26 $$ String commandLineOutput = out.toString()[ CD ]
Line_3 $$ TestJobClient client = new TestJobClient(new JobConf())-->Line_25 $$ client.displayJobList(new JobStatus[] [ FD ]
Line_19 $$ Job mockJob = mock(Job.class)-->Line_20 $$ when(mockJob.getTaskReports(isA(TaskType.class))).thenReturn(new TaskReport[5])[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_39 $$ verify(mockJobStatus).getNeededMem()[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_24 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()[ CD ]
Line_4 $$ long startTime = System.currentTimeMillis()-->Line_5 $$ JobID jobID = new JobID(String.valueOf(startTime), 12345)[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_7 $$ when(mockJobStatus.getJobID()).thenReturn(jobID)[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_10 $$ when(mockJobStatus.getUsername()).thenReturn("mockuser")[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_11 $$ when(mockJobStatus.getQueue()).thenReturn("mockqueue")[ FD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_12 $$ when(mockJobStatus.getPriority()).thenReturn(JobPriority.NORMAL)[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_19 $$ Job mockJob = mock(Job.class)[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_14 $$ when(mockJobStatus.getNumReservedSlots()).thenReturn(1)[ CD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_17 $$ when(mockJobStatus.getNeededMem()).thenReturn(2048)[ FD ]
Line_26 $$ String commandLineOutput = out.toString()-->Line_27 $$ System.out.println(commandLineOutput)[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_28 $$ Assert.assertTrue(commandLineOutput.contains("Total jobs:1"))[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_22 $$ when(mockCluster.getJob(jobID)).thenReturn(mockJob)[ CD ]
Line_5 $$ JobID jobID = new JobID(String.valueOf(startTime), 12345)-->Line_41 $$ verify(mockCluster, never()).getJob(jobID)[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_25 $$ client.displayJobList(new JobStatus[] [ CD ]
Line_19 $$ Job mockJob = mock(Job.class)-->Line_22 $$ when(mockCluster.getJob(jobID)).thenReturn(mockJob)[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_38 $$ verify(mockJobStatus).getReservedMem()[ CD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_18 $$ when(mockJobStatus.getSchedulingInfo()).thenReturn("NA")[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_21 $$ Cluster mockCluster = mock(Cluster.class)[ CD ]
Line_6 $$ JobStatus mockJobStatus = mock(JobStatus.class)-->Line_35 $$ verify(mockJobStatus).getNumUsedSlots()[ FD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_41 $$ verify(mockCluster, never()).getJob(jobID)[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_7 $$ when(mockJobStatus.getJobID()).thenReturn(jobID)[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_30 $$ verify(mockJobStatus).getState()[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_27 $$ System.out.println(commandLineOutput)[ CD ]
Line_2 $$ public void testShowJob() throws Exception -->Line_12 $$ when(mockJobStatus.getPriority()).thenReturn(JobPriority.NORMAL)[ CD ]
