Line_2 $$ public void testHttpServer() throws Exception -->Line_18 $$ HttpURLConnection connection = (HttpURLConnection) badUrl.openConnection()[ CD ]
Line_7 $$ IPCLoggerChannel ch = new IPCLoggerChannel(conf, FAKE_NSINFO, journalId, jn.getBoundIpcAddress())-->Line_9 $$ ch.setEpoch(1)[ FD ]
Line_7 $$ IPCLoggerChannel ch = new IPCLoggerChannel(conf, FAKE_NSINFO, journalId, jn.getBoundIpcAddress())-->Line_12 $$ ch.finalizeLogSegment(1, 3).get()[ FD ]
Line_7 $$ IPCLoggerChannel ch = new IPCLoggerChannel(conf, FAKE_NSINFO, journalId, jn.getBoundIpcAddress())-->Line_11 $$ ch.sendEdits(1L, 1, 3, EDITS_DATA).get()[ FD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_16 $$ assertArrayEquals(expected, retrievedViaHttp)[ CD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_8 $$ ch.newEpoch(1).get()[ CD ]
Line_18 $$ HttpURLConnection connection = (HttpURLConnection) badUrl.openConnection()-->Line_22 $$ connection.disconnect()[ FD ]
Line_4 $$ String pageContents = DFSTestUtil.urlGet(new URL(urlRoot + "/jmx"))-->Line_5 $$ assertTrue("Bad contents: " + pageContents, pageContents.contains("Hadoop:service=JournalNode,name=JvmMetrics"))[ FD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_3 $$ String urlRoot = jn.getHttpServerURI()[ CD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_6 $$ byte[] EDITS_DATA = QJMTestUtil.createTxnData(1, 3)[ CD ]
Line_18 $$ HttpURLConnection connection = (HttpURLConnection) badUrl.openConnection()-->Line_20 $$ assertEquals(404, connection.getResponseCode())[ FD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_14 $$ byte[] expected = Bytes.concat(Ints.toByteArray(HdfsConstants.NAMENODE_LAYOUT_VERSION), (new byte[] [ CD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_10 $$ ch.startLogSegment(1, NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION).get()[ CD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_12 $$ ch.finalizeLogSegment(1, 3).get()[ CD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_9 $$ ch.setEpoch(1)[ CD ]
Line_7 $$ IPCLoggerChannel ch = new IPCLoggerChannel(conf, FAKE_NSINFO, journalId, jn.getBoundIpcAddress())-->Line_10 $$ ch.startLogSegment(1, NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION).get()[ FD ]
Line_6 $$ byte[] EDITS_DATA = QJMTestUtil.createTxnData(1, 3)-->Line_14 $$ byte[] expected = Bytes.concat(Ints.toByteArray(HdfsConstants.NAMENODE_LAYOUT_VERSION), (new byte[] [ FD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_13 $$ byte[] retrievedViaHttp = DFSTestUtil.urlGetBytes(new URL(urlRoot + "/getJournal?segmentTxId=1&jid=" + journalId))[ CD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_11 $$ ch.sendEdits(1L, 1, 3, EDITS_DATA).get()[ CD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_5 $$ assertTrue("Bad contents: " + pageContents, pageContents.contains("Hadoop:service=JournalNode,name=JvmMetrics"))[ CD ]
Line_14 $$ byte[] expected = Bytes.concat(Ints.toByteArray(HdfsConstants.NAMENODE_LAYOUT_VERSION), (new byte[] -->Line_16 $$ assertArrayEquals(expected, retrievedViaHttp)[ FD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_17 $$ URL badUrl = new URL(urlRoot + "/getJournal?segmentTxId=12345&jid=" + journalId)[ CD ]
Line_7 $$ IPCLoggerChannel ch = new IPCLoggerChannel(conf, FAKE_NSINFO, journalId, jn.getBoundIpcAddress())-->Line_8 $$ ch.newEpoch(1).get()[ FD ]
Line_17 $$ URL badUrl = new URL(urlRoot + "/getJournal?segmentTxId=12345&jid=" + journalId)-->Line_18 $$ HttpURLConnection connection = (HttpURLConnection) badUrl.openConnection()[ FD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_7 $$ IPCLoggerChannel ch = new IPCLoggerChannel(conf, FAKE_NSINFO, journalId, jn.getBoundIpcAddress())[ CD ]
Line_13 $$ byte[] retrievedViaHttp = DFSTestUtil.urlGetBytes(new URL(urlRoot + "/getJournal?segmentTxId=1&jid=" + journalId))-->Line_16 $$ assertArrayEquals(expected, retrievedViaHttp)[ FD ]
Line_6 $$ byte[] EDITS_DATA = QJMTestUtil.createTxnData(1, 3)-->Line_11 $$ ch.sendEdits(1L, 1, 3, EDITS_DATA).get()[ FD ]
Line_2 $$ public void testHttpServer() throws Exception -->Line_4 $$ String pageContents = DFSTestUtil.urlGet(new URL(urlRoot + "/jmx"))[ CD ]
