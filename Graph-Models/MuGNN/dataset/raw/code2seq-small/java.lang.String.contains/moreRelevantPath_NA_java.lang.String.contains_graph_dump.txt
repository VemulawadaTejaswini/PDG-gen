Line_11 $$ if (i >= 0) -->Line_13 $$ candidateMatched = candidate.dir.toLowerCase().contains(packageAsPath)[ CD ]
Line_8 $$ boolean candidateMatched-->Line_22 $$ candidateMatched = candidate.dir.toLowerCase().contains(pattern)[ FD ]
Line_13 $$ candidateMatched = candidate.dir.toLowerCase().contains(packageAsPath)-->Line_15 $$ if (candidateMatched ^ currentMatched) [ FD ]
Line_14 $$ currentMatched = current.dir.toLowerCase().contains(packageAsPath)-->Line_24 $$ if (candidateMatched ^ currentMatched) [ FD ]
Line_14 $$ currentMatched = current.dir.toLowerCase().contains(packageAsPath)-->Line_23 $$ currentMatched = current.dir.toLowerCase().contains(pattern)[ FD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_20 $$ if (simpleName != null) [ CD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_8 $$ boolean candidateMatched[ CD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_4 $$ if (className == null) [ CD ]
Line_11 $$ if (i >= 0) -->Line_12 $$ String packageAsPath = className.substring(0, i).replace('.', '/').toLowerCase()[ CD ]
Line_8 $$ boolean candidateMatched-->Line_15 $$ if (candidateMatched ^ currentMatched) [ FD ]
Line_13 $$ candidateMatched = candidate.dir.toLowerCase().contains(packageAsPath)-->Line_22 $$ candidateMatched = candidate.dir.toLowerCase().contains(pattern)[ FD ]
Line_20 $$ if (simpleName != null) -->Line_21 $$ String pattern = simpleName.toLowerCase()[ CD ]
Line_8 $$ boolean candidateMatched-->Line_13 $$ candidateMatched = candidate.dir.toLowerCase().contains(packageAsPath)[ FD ]
Line_9 $$ boolean currentMatched-->Line_15 $$ if (candidateMatched ^ currentMatched) [ FD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_7 $$ final TestLocationDescriptor current = currentDescriptors.iterator().next()[ FD ]
Line_10 $$ int i = className.lastIndexOf(".")-->Line_11 $$ if (i >= 0) [ FD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_11 $$ if (i >= 0) [ CD ]
Line_3 $$ final String className = psiClass.getQualifiedName()-->Line_4 $$ if (className == null) [ FD ]
Line_23 $$ currentMatched = current.dir.toLowerCase().contains(pattern)-->Line_24 $$ if (candidateMatched ^ currentMatched) [ FD ]
Line_19 $$ String simpleName = getSimpleClassName(psiClass)-->Line_20 $$ if (simpleName != null) [ FD ]
Line_9 $$ boolean currentMatched-->Line_23 $$ currentMatched = current.dir.toLowerCase().contains(pattern)[ FD ]
Line_12 $$ String packageAsPath = className.substring(0, i).replace('.', '/').toLowerCase()-->Line_13 $$ candidateMatched = candidate.dir.toLowerCase().contains(packageAsPath)[ FD ]
Line_3 $$ final String className = psiClass.getQualifiedName()-->Line_12 $$ String packageAsPath = className.substring(0, i).replace('.', '/').toLowerCase()[ FD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_7 $$ final TestLocationDescriptor current = currentDescriptors.iterator().next()[ CD ]
Line_20 $$ if (simpleName != null) -->Line_22 $$ candidateMatched = candidate.dir.toLowerCase().contains(pattern)[ CD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_28 $$ return false[ CD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_19 $$ String simpleName = getSimpleClassName(psiClass)[ FD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_19 $$ String simpleName = getSimpleClassName(psiClass)[ CD ]
Line_22 $$ candidateMatched = candidate.dir.toLowerCase().contains(pattern)-->Line_24 $$ if (candidateMatched ^ currentMatched) [ FD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_3 $$ final String className = psiClass.getQualifiedName()[ FD ]
Line_11 $$ if (i >= 0) -->Line_15 $$ if (candidateMatched ^ currentMatched) [ CD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_3 $$ final String className = psiClass.getQualifiedName()[ CD ]
Line_12 $$ String packageAsPath = className.substring(0, i).replace('.', '/').toLowerCase()-->Line_14 $$ currentMatched = current.dir.toLowerCase().contains(packageAsPath)[ FD ]
Line_9 $$ boolean currentMatched-->Line_14 $$ currentMatched = current.dir.toLowerCase().contains(packageAsPath)[ FD ]
Line_8 $$ boolean candidateMatched-->Line_24 $$ if (candidateMatched ^ currentMatched) [ FD ]
Line_20 $$ if (simpleName != null) -->Line_23 $$ currentMatched = current.dir.toLowerCase().contains(pattern)[ CD ]
Line_14 $$ currentMatched = current.dir.toLowerCase().contains(packageAsPath)-->Line_15 $$ if (candidateMatched ^ currentMatched) [ FD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_10 $$ int i = className.lastIndexOf(".")[ CD ]
Line_21 $$ String pattern = simpleName.toLowerCase()-->Line_23 $$ currentMatched = current.dir.toLowerCase().contains(pattern)[ FD ]
Line_21 $$ String pattern = simpleName.toLowerCase()-->Line_22 $$ candidateMatched = candidate.dir.toLowerCase().contains(pattern)[ FD ]
Line_11 $$ if (i >= 0) -->Line_14 $$ currentMatched = current.dir.toLowerCase().contains(packageAsPath)[ CD ]
Line_4 $$ if (className == null) -->Line_5 $$ return false[ CD ]
Line_9 $$ boolean currentMatched-->Line_24 $$ if (candidateMatched ^ currentMatched) [ FD ]
Line_13 $$ candidateMatched = candidate.dir.toLowerCase().contains(packageAsPath)-->Line_24 $$ if (candidateMatched ^ currentMatched) [ FD ]
Line_19 $$ String simpleName = getSimpleClassName(psiClass)-->Line_21 $$ String pattern = simpleName.toLowerCase()[ FD ]
Line_20 $$ if (simpleName != null) -->Line_24 $$ if (candidateMatched ^ currentMatched) [ CD ]
Line_3 $$ final String className = psiClass.getQualifiedName()-->Line_10 $$ int i = className.lastIndexOf(".")[ FD ]
Line_24 $$ if (candidateMatched ^ currentMatched) -->Line_25 $$ return candidateMatched[ CD ]
Line_2 $$ private static boolean moreRelevantPath(@NotNull TestLocationDescriptor candidate, @NotNull Set<TestLocationDescriptor> currentDescriptors, @NotNull PsiClass psiClass) -->Line_9 $$ boolean currentMatched[ CD ]
Line_15 $$ if (candidateMatched ^ currentMatched) -->Line_16 $$ return candidateMatched[ CD ]
Line_10 $$ int i = className.lastIndexOf(".")-->Line_12 $$ String packageAsPath = className.substring(0, i).replace('.', '/').toLowerCase()[ FD ]
