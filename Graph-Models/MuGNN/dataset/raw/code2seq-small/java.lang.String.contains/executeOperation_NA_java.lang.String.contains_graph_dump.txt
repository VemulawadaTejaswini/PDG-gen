Line_12 $$ for (String message : error.getMessages()) -->Line_13 $$ if (message.contains(INVALID_OPTION_F) || message.contains(USAGE_CVSNTSRV_SERVER)) [ FD ]
Line_6 $$ final CvsResult result = executor.getResult()-->Line_7 $$ if (result.hasErrors()) [ FD ]
Line_2 $$ private AnnotateOperation executeOperation(File file, String revision, CvsEnvironment root, boolean binary, boolean retryOnFailure) throws VcsException -->Line_7 $$ if (result.hasErrors()) [ CD ]
Line_7 $$ if (result.hasErrors()) -->Line_8 $$ if (!retryOnFailure) [ CD ]
Line_2 $$ private AnnotateOperation executeOperation(File file, String revision, CvsEnvironment root, boolean binary, boolean retryOnFailure) throws VcsException -->Line_15 $$ return executeOperation(file, revision, root, false, false)[ FD ]
Line_11 $$ for (VcsException error : result.getErrors()) -->Line_12 $$ for (String message : error.getMessages()) [ FD ]
Line_6 $$ final CvsResult result = executor.getResult()-->Line_19 $$ throw result.composeError()[ FD ]
Line_2 $$ private AnnotateOperation executeOperation(File file, String revision, CvsEnvironment root, boolean binary, boolean retryOnFailure) throws VcsException -->Line_8 $$ if (!retryOnFailure) [ FD ]
Line_6 $$ final CvsResult result = executor.getResult()-->Line_11 $$ for (VcsException error : result.getErrors()) [ FD ]
Line_13 $$ if (message.contains(INVALID_OPTION_F) || message.contains(USAGE_CVSNTSRV_SERVER)) -->Line_14 $$ ourDoNotAnnotateBinaryRoots.add(root.getCvsRootAsString())[ CD ]
Line_2 $$ private AnnotateOperation executeOperation(File file, String revision, CvsEnvironment root, boolean binary, boolean retryOnFailure) throws VcsException -->Line_21 $$ return operation[ CD ]
Line_2 $$ private AnnotateOperation executeOperation(File file, String revision, CvsEnvironment root, boolean binary, boolean retryOnFailure) throws VcsException -->Line_14 $$ ourDoNotAnnotateBinaryRoots.add(root.getCvsRootAsString())[ FD ]
Line_4 $$ final CvsOperationExecutor executor = new CvsOperationExecutor(myProject)-->Line_5 $$ executor.performActionSync(new CommandCvsHandler(CvsBundle.getAnnotateOperationName(), operation), CvsOperationExecutorCallback.EMPTY)[ FD ]
Line_2 $$ private AnnotateOperation executeOperation(File file, String revision, CvsEnvironment root, boolean binary, boolean retryOnFailure) throws VcsException -->Line_5 $$ executor.performActionSync(new CommandCvsHandler(CvsBundle.getAnnotateOperationName(), operation), CvsOperationExecutorCallback.EMPTY)[ CD ]
Line_2 $$ private AnnotateOperation executeOperation(File file, String revision, CvsEnvironment root, boolean binary, boolean retryOnFailure) throws VcsException -->Line_4 $$ final CvsOperationExecutor executor = new CvsOperationExecutor(myProject)[ CD ]
Line_6 $$ final CvsResult result = executor.getResult()-->Line_9 $$ throw result.composeError()[ FD ]
Line_4 $$ final CvsOperationExecutor executor = new CvsOperationExecutor(myProject)-->Line_6 $$ final CvsResult result = executor.getResult()[ FD ]
Line_2 $$ private AnnotateOperation executeOperation(File file, String revision, CvsEnvironment root, boolean binary, boolean retryOnFailure) throws VcsException -->Line_6 $$ final CvsResult result = executor.getResult()[ CD ]
Line_2 $$ private AnnotateOperation executeOperation(File file, String revision, CvsEnvironment root, boolean binary, boolean retryOnFailure) throws VcsException -->Line_3 $$ final AnnotateOperation operation = new AnnotateOperation(file, revision, root, binary)[ CD ]
Line_13 $$ if (message.contains(INVALID_OPTION_F) || message.contains(USAGE_CVSNTSRV_SERVER)) -->Line_15 $$ return executeOperation(file, revision, root, false, false)[ CD ]
