Line_3 $$ if (!StringUtil.isEmpty(s)) -->Line_4 $$ if (!s.contains("\r") && !s.contains("\n")) [ CD ]
Line_2 $$ public static void initStringToFindNoMultiline(FindModel findModel, String s) -->Line_8 $$ findModel.setRegularExpressions(true)[ FD ]
Line_2 $$ public static void initStringToFindNoMultiline(FindModel findModel, String s) -->Line_5 $$ findModel.setStringToFind(s)[ FD ]
Line_2 $$ public static void initStringToFindNoMultiline(FindModel findModel, String s) -->Line_7 $$ findModel.setStringToFind(StringUtil.escapeToRegexp(s))[ FD ]
Line_4 $$ if (!s.contains("\r") && !s.contains("\n")) -->Line_7 $$ findModel.setStringToFind(StringUtil.escapeToRegexp(s))[ CD ]
Line_4 $$ if (!s.contains("\r") && !s.contains("\n")) -->Line_8 $$ findModel.setRegularExpressions(true)[ CD ]
Line_2 $$ public static void initStringToFindNoMultiline(FindModel findModel, String s) -->Line_4 $$ if (!s.contains("\r") && !s.contains("\n")) [ FD ]
Line_4 $$ if (!s.contains("\r") && !s.contains("\n")) -->Line_5 $$ findModel.setStringToFind(s)[ CD ]
Line_2 $$ public static void initStringToFindNoMultiline(FindModel findModel, String s) -->Line_3 $$ if (!StringUtil.isEmpty(s)) [ CD ]
Line_2 $$ public static void initStringToFindNoMultiline(FindModel findModel, String s) -->Line_3 $$ if (!StringUtil.isEmpty(s)) [ FD ]
