Line_16 $$ final DataNode dataNode = cluster.getDataNodes().get(0)-->Line_25 $$ dataNode.initReplicaRecovery(recoveringBlock)[ FD ]
Line_10 $$ Path path = new Path("/test")-->Line_14 $$ List<LocatedBlock> blocks = DFSTestUtil.getAllBlocks(fs.open(path))[ FD ]
Line_2 $$ public void testRaceBetweenReplicaRecoveryAndFinalizeBlock() throws Exception -->Line_5 $$ conf.set(DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_KEY, "1000")[ CD ]
Line_14 $$ List<LocatedBlock> blocks = DFSTestUtil.getAllBlocks(fs.open(path))-->Line_15 $$ final LocatedBlock block = blocks.get(0)[ FD ]
Line_6 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_16 $$ final DataNode dataNode = cluster.getDataNodes().get(0)[ FD ]
Line_15 $$ final LocatedBlock block = blocks.get(0)-->Line_41 $$ dataNode.updateReplicaUnderRecovery(block.getBlock(), block.getBlock().getGenerationStamp() + 1, block.getBlockSize())[ FD ]
Line_6 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_9 $$ DistributedFileSystem fs = cluster.getFileSystem()[ FD ]
Line_15 $$ final LocatedBlock block = blocks.get(0)-->Line_21 $$ DatanodeInfo[] locations = block.getLocations()[ FD ]
Line_2 $$ public void testRaceBetweenReplicaRecoveryAndFinalizeBlock() throws Exception -->Line_6 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()[ CD ]
Line_4 $$ Configuration conf = new HdfsConfiguration()-->Line_5 $$ conf.set(DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_KEY, "1000")[ FD ]
Line_6 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_8 $$ cluster.waitClusterUp()[ FD ]
Line_43 $$ if (null != cluster) -->Line_44 $$ cluster.shutdown()[ CD ]
Line_9 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_11 $$ FSDataOutputStream out = fs.create(path)[ FD ]
Line_11 $$ FSDataOutputStream out = fs.create(path)-->Line_34 $$ out.close()[ FD ]
Line_17 $$ final AtomicBoolean recoveryInitResult = new AtomicBoolean(true)-->Line_28 $$ recoveryInitResult.set(false)[ FD ]
Line_17 $$ final AtomicBoolean recoveryInitResult = new AtomicBoolean(true)-->Line_40 $$ Assert.assertTrue("Recovery should be initiated successfully", recoveryInitResult.get())[ FD ]
Line_2 $$ public void testRaceBetweenReplicaRecoveryAndFinalizeBlock() throws Exception -->Line_3 $$ tearDown()[ CD ]
Line_11 $$ FSDataOutputStream out = fs.create(path)-->Line_12 $$ out.writeBytes("data")[ FD ]
Line_10 $$ Path path = new Path("/test")-->Line_11 $$ FSDataOutputStream out = fs.create(path)[ FD ]
Line_11 $$ FSDataOutputStream out = fs.create(path)-->Line_13 $$ out.hsync()[ FD ]
Line_9 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_14 $$ List<LocatedBlock> blocks = DFSTestUtil.getAllBlocks(fs.open(path))[ FD ]
Line_18 $$ Thread recoveryThread = new Thread() -->Line_32 $$ recoveryThread.start()[ FD ]
Line_18 $$ Thread recoveryThread = new Thread() -->Line_38 $$ recoveryThread.join()[ FD ]
Line_6 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_44 $$ cluster.shutdown()[ FD ]
Line_16 $$ final DataNode dataNode = cluster.getDataNodes().get(0)-->Line_41 $$ dataNode.updateReplicaUnderRecovery(block.getBlock(), block.getBlock().getGenerationStamp() + 1, block.getBlockSize())[ FD ]
Line_2 $$ public void testRaceBetweenReplicaRecoveryAndFinalizeBlock() throws Exception -->Line_4 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_15 $$ final LocatedBlock block = blocks.get(0)-->Line_22 $$ final RecoveringBlock recoveringBlock = new RecoveringBlock(block.getBlock(), locations, block.getBlock().getGenerationStamp() + 1)[ FD ]
Line_22 $$ final RecoveringBlock recoveringBlock = new RecoveringBlock(block.getBlock(), locations, block.getBlock().getGenerationStamp() + 1)-->Line_25 $$ dataNode.initReplicaRecovery(recoveringBlock)[ FD ]
Line_6 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_43 $$ if (null != cluster) [ FD ]
