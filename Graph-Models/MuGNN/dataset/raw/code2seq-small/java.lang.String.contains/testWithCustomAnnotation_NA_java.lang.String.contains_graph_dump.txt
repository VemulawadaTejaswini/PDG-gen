Line_4 $$ DefaultListableBeanFactory factory = new DefaultListableBeanFactory()-->Line_9 $$ factory.addBeanPostProcessor(rabpp)[ FD ]
Line_13 $$ String message = ex.getCause().getMessage()-->Line_16 $$ assertTrue(message.contains("testBean"))[ FD ]
Line_5 $$ BeanDefinition beanDef = BeanDefinitionBuilder.genericBeanDefinition(RequiredTestBean.class).getBeanDefinition()-->Line_6 $$ factory.registerBeanDefinition("testBean", beanDef)[ FD ]
Line_4 $$ DefaultListableBeanFactory factory = new DefaultListableBeanFactory()-->Line_6 $$ factory.registerBeanDefinition("testBean", beanDef)[ FD ]
Line_7 $$ RequiredAnnotationBeanPostProcessor rabpp = new RequiredAnnotationBeanPostProcessor()-->Line_9 $$ factory.addBeanPostProcessor(rabpp)[ FD ]
Line_13 $$ String message = ex.getCause().getMessage()-->Line_15 $$ assertTrue(message.contains("name"))[ FD ]
Line_7 $$ RequiredAnnotationBeanPostProcessor rabpp = new RequiredAnnotationBeanPostProcessor()-->Line_8 $$ rabpp.setRequiredAnnotationType(MyRequired.class)[ FD ]
Line_4 $$ DefaultListableBeanFactory factory = new DefaultListableBeanFactory()-->Line_10 $$ factory.preInstantiateSingletons()[ FD ]
Line_13 $$ String message = ex.getCause().getMessage()-->Line_14 $$ assertTrue(message.contains("Property"))[ FD ]
