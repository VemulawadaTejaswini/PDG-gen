Line_3 $$ MiniDFSCluster cluster = null-->Line_7 $$ NamenodeProtocols nn = cluster.getNameNodeRpc()[ FD ]
Line_12 $$ NNStorage dstImage = Mockito.mock(NNStorage.class)-->Line_19 $$ Mockito.doReturn(new StorageInfo(1, 1, "X", 1, NodeType.NAME_NODE).toColonSeparatedString()).when(dstImage).toColonSeparatedString()[ FD ]
Line_24 $$ String msg = StringUtils.stringifyException(ioe)-->Line_39 $$ assertTrue(msg, msg.contains("but the secondary expected"))[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_8 $$ URL fsName = DFSUtil.getInfoServer(cluster.getNameNode().getServiceRpcAddress(), conf, DFSUtil.getHttpClientScheme(conf)).toURL()[ FD ]
Line_7 $$ NamenodeProtocols nn = cluster.getNameNodeRpc()-->Line_10 $$ RemoteEditLogManifest manifest = nn.getEditLogManifest(1)[ FD ]
Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).format(true).build()-->Line_42 $$ cleanup(cluster)[ FD ]
Line_8 $$ URL fsName = DFSUtil.getInfoServer(cluster.getNameNode().getServiceRpcAddress(), conf, DFSUtil.getHttpClientScheme(conf)).toURL()-->Line_35 $$ TransferFsImage.uploadImageFromStorage(fsName, conf, dstImage, NameNodeFile.IMAGE, 0)[ FD ]
Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).format(true).build()-->Line_7 $$ NamenodeProtocols nn = cluster.getNameNodeRpc()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).format(true).build()[ FD ]
Line_8 $$ URL fsName = DFSUtil.getInfoServer(cluster.getNameNode().getServiceRpcAddress(), conf, DFSUtil.getHttpClientScheme(conf)).toURL()-->Line_28 $$ TransferFsImage.downloadEditsToStorage(fsName, log, dstImage)[ FD ]
Line_2 $$ public void testNamespaceVerifiedOnFileTransfer() throws IOException -->Line_3 $$ MiniDFSCluster cluster = null[ CD ]
Line_12 $$ NNStorage dstImage = Mockito.mock(NNStorage.class)-->Line_13 $$ Mockito.doReturn(Lists.newArrayList(new File("/wont-be-written"))).when(dstImage).getFiles(Mockito.<NameNodeDirType>anyObject(), Mockito.anyString())[ FD ]
Line_24 $$ String msg = StringUtils.stringifyException(ioe)-->Line_32 $$ assertTrue(msg, msg.contains("but the secondary expected"))[ FD ]
Line_12 $$ NNStorage dstImage = Mockito.mock(NNStorage.class)-->Line_35 $$ TransferFsImage.uploadImageFromStorage(fsName, conf, dstImage, NameNodeFile.IMAGE, 0)[ FD ]
Line_2 $$ public void testNamespaceVerifiedOnFileTransfer() throws IOException -->Line_4 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_12 $$ NNStorage dstImage = Mockito.mock(NNStorage.class)-->Line_21 $$ TransferFsImage.downloadImageToStorage(fsName, 0, dstImage, false)[ FD ]
Line_4 $$ Configuration conf = new HdfsConfiguration()-->Line_8 $$ URL fsName = DFSUtil.getInfoServer(cluster.getNameNode().getServiceRpcAddress(), conf, DFSUtil.getHttpClientScheme(conf)).toURL()[ FD ]
Line_11 $$ RemoteEditLog log = manifest.getLogs().get(0)-->Line_28 $$ TransferFsImage.downloadEditsToStorage(fsName, log, dstImage)[ FD ]
Line_8 $$ URL fsName = DFSUtil.getInfoServer(cluster.getNameNode().getServiceRpcAddress(), conf, DFSUtil.getHttpClientScheme(conf)).toURL()-->Line_21 $$ TransferFsImage.downloadImageToStorage(fsName, 0, dstImage, false)[ FD ]
Line_12 $$ NNStorage dstImage = Mockito.mock(NNStorage.class)-->Line_28 $$ TransferFsImage.downloadEditsToStorage(fsName, log, dstImage)[ FD ]
Line_12 $$ NNStorage dstImage = Mockito.mock(NNStorage.class)-->Line_18 $$ Mockito.doReturn(mockImageFile).when(dstImage).findImageFile(Mockito.any(NameNodeFile.class), Mockito.anyLong())[ FD ]
Line_7 $$ NamenodeProtocols nn = cluster.getNameNodeRpc()-->Line_9 $$ nn.rollEditLog()[ FD ]
Line_4 $$ Configuration conf = new HdfsConfiguration()-->Line_35 $$ TransferFsImage.uploadImageFromStorage(fsName, conf, dstImage, NameNodeFile.IMAGE, 0)[ FD ]
Line_24 $$ String msg = StringUtils.stringifyException(ioe)-->Line_25 $$ assertTrue(msg, msg.contains("but the secondary expected"))[ FD ]
Line_15 $$ FileOutputStream imageFile = new FileOutputStream(mockImageFile)-->Line_16 $$ imageFile.write("data".getBytes())[ FD ]
Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).format(true).build()-->Line_43 $$ cluster = null[ FD ]
Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).format(true).build()-->Line_8 $$ URL fsName = DFSUtil.getInfoServer(cluster.getNameNode().getServiceRpcAddress(), conf, DFSUtil.getHttpClientScheme(conf)).toURL()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_42 $$ cleanup(cluster)[ FD ]
Line_14 $$ File mockImageFile = File.createTempFile("image", "")-->Line_18 $$ Mockito.doReturn(mockImageFile).when(dstImage).findImageFile(Mockito.any(NameNodeFile.class), Mockito.anyLong())[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_43 $$ cluster = null[ FD ]
Line_10 $$ RemoteEditLogManifest manifest = nn.getEditLogManifest(1)-->Line_11 $$ RemoteEditLog log = manifest.getLogs().get(0)[ FD ]
Line_15 $$ FileOutputStream imageFile = new FileOutputStream(mockImageFile)-->Line_17 $$ imageFile.close()[ FD ]
