Line_26 $$ LogRecord logRecord2 = logRecords.get(1)-->Line_27 $$ String message = logRecord2.getMessage()[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_19 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_7 $$ LeadingLogProcessCallable leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_30 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)[ FD ]
Line_19 $$ future = processChannel.getProcessNoticeableFuture()-->Line_35 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LocalProcessExecutor.class.getName(), Level.WARNING)) -->Line_16 $$ logRecords = captureHandler.resetLogLevel(Level.FINE)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_23 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_30 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_31 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_16 $$ logRecords = captureHandler.resetLogLevel(Level.FINE)-->Line_36 $$ Assert.assertEquals(0, logRecords.size())[ FD ]
Line_16 $$ logRecords = captureHandler.resetLogLevel(Level.FINE)-->Line_26 $$ LogRecord logRecord2 = logRecords.get(1)[ FD ]
Line_17 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_31 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_19 $$ future = processChannel.getProcessNoticeableFuture()-->Line_32 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_18 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_19 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_36 $$ Assert.assertEquals(0, logRecords.size())[ FD ]
Line_19 $$ future = processChannel.getProcessNoticeableFuture()-->Line_33 $$ future.get()[ FD ]
Line_9 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_34 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_19 $$ future = processChannel.getProcessNoticeableFuture()-->Line_21 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_9 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_10 $$ future.get()[ FD ]
Line_18 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_31 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_36 $$ Assert.assertEquals(0, logRecords.size())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_26 $$ LogRecord logRecord2 = logRecords.get(1)[ FD ]
Line_14 $$ LogRecord logRecord = logRecords.get(0)-->Line_15 $$ Assert.assertEquals("Found corrupt leading log " + leadingLog, logRecord.getMessage())[ FD ]
Line_7 $$ LeadingLogProcessCallable leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_17 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)[ FD ]
Line_9 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_35 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_9 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_21 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_16 $$ logRecords = captureHandler.resetLogLevel(Level.FINE)-->Line_24 $$ LogRecord logRecord1 = logRecords.get(0)[ FD ]
Line_9 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_20 $$ future.get()[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LocalProcessExecutor.class.getName(), Level.WARNING)) -->Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_31 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_32 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_32 $$ future = processChannel.getProcessNoticeableFuture()-->Line_35 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_19 $$ future = processChannel.getProcessNoticeableFuture()-->Line_34 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_9 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_11 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_8 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_32 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_9 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_22 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LocalProcessExecutor.class.getName(), Level.WARNING)) -->Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_8 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_9 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_24 $$ LogRecord logRecord1 = logRecords.get(0)[ FD ]
Line_17 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_18 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_7 $$ LeadingLogProcessCallable leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_31 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_9 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_33 $$ future.get()[ FD ]
Line_32 $$ future = processChannel.getProcessNoticeableFuture()-->Line_33 $$ future.get()[ FD ]
Line_7 $$ LeadingLogProcessCallable leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_8 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_9 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_19 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_16 $$ logRecords = captureHandler.resetLogLevel(Level.FINE)-->Line_23 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_16 $$ logRecords = captureHandler.resetLogLevel(Level.FINE)-->Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_17 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_30 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)[ FD ]
Line_24 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_25 $$ Assert.assertEquals("Found corrupt leading log " + leadingLog, logRecord1.getMessage())[ FD ]
Line_19 $$ future = processChannel.getProcessNoticeableFuture()-->Line_22 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_19 $$ future = processChannel.getProcessNoticeableFuture()-->Line_20 $$ future.get()[ FD ]
Line_9 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_32 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_18 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_32 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_27 $$ String message = logRecord2.getMessage()-->Line_28 $$ Assert.assertTrue(message.contains("Invoked generic process callable"))[ FD ]
Line_32 $$ future = processChannel.getProcessNoticeableFuture()-->Line_34 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_7 $$ LeadingLogProcessCallable leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_18 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_8 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_18 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_9 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_12 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_8 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_31 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_16 $$ logRecords = captureHandler.resetLogLevel(Level.FINE)[ FD ]
