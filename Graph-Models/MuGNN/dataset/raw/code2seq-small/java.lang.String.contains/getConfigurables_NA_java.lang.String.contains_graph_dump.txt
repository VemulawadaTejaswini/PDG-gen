Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_40 $$ options.add(option)[ FD ]
Line_36 $$ String[] components = REG_EXP.split(optionToCheck)-->Line_38 $$ Collections.addAll(options, components)[ FD ]
Line_50 $$ final Set<String> ids = new HashSet<String>()-->Line_52 $$ ids.add(id.getConfigurableId())[ FD ]
Line_24 $$ if (eachWord.startsWith(optionToCheck)) -->Line_25 $$ hits.getNameHits().add(each)[ CD ]
Line_35 $$ if (options.isEmpty()) -->Line_37 $$ if (components.length > 0) [ CD ]
Line_3 $$ final ConfigurableHit hits = new ConfigurableHit()-->Line_21 $$ hits.getNameHits().add(each)[ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_62 $$ if (CodeStyleFacade.getInstance(project).isUnsuitableCodeStyleConfigurable(configurable)) [ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_71 $$ if (currentConfigurables.equals(contentHits) && !(configurables == null && type == DocumentEvent.EventType.CHANGE)) [ CD ]
Line_5 $$ Set<String> options = getProcessedWordsWithoutStemming(option)-->Line_29 $$ if (options.isEmpty()) [ FD ]
Line_4 $$ final Set<Configurable> contentHits = hits.getContentHits()-->Line_11 $$ contentHits.addAll(configurables)[ FD ]
Line_14 $$ for (Configurable each : contentHits) -->Line_25 $$ hits.getNameHits().add(each)[ FD ]
Line_54 $$ if (helpIds == null) -->Line_55 $$ helpIds = ids[ CD ]
Line_43 $$ Set<String> helpIds = null-->Line_54 $$ if (helpIds == null) [ FD ]
Line_14 $$ for (Configurable each : contentHits) -->Line_20 $$ hits.getNameFullHits().add(each)[ FD ]
Line_17 $$ final String displayName = each.getDisplayName().toLowerCase()-->Line_18 $$ final List<String> allWords = StringUtil.getWordsIn(displayName)[ FD ]
Line_4 $$ final Set<Configurable> contentHits = hits.getContentHits()-->Line_8 $$ contentHits.addAll(SearchUtil.expandGroup(group))[ FD ]
Line_14 $$ for (Configurable each : contentHits) -->Line_21 $$ hits.getNameHits().add(each)[ FD ]
Line_19 $$ if (displayName.contains(optionToCheck)) -->Line_21 $$ hits.getNameHits().add(each)[ CD ]
Line_37 $$ if (components.length > 0) -->Line_40 $$ options.add(option)[ CD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_13 $$ String optionToCheck = option.trim().toLowerCase()[ FD ]
Line_60 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) -->Line_61 $$ Configurable configurable = it.next()[ CD ]
Line_43 $$ Set<String> helpIds = null-->Line_57 $$ helpIds.retainAll(ids)[ FD ]
Line_5 $$ Set<String> options = getProcessedWordsWithoutStemming(option)-->Line_38 $$ Collections.addAll(options, components)[ FD ]
Line_61 $$ Configurable configurable = it.next()-->Line_62 $$ if (CodeStyleFacade.getInstance(project).isUnsuitableCodeStyleConfigurable(configurable)) [ FD ]
Line_66 $$ if (!(configurable instanceof SearchableConfigurable && helpIds.contains(((SearchableConfigurable) configurable).getId()))) -->Line_67 $$ it.remove()[ CD ]
Line_50 $$ final Set<String> ids = new HashSet<String>()-->Line_55 $$ helpIds = ids[ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_74 $$ return hits[ CD ]
Line_5 $$ Set<String> options = getProcessedWordsWithoutStemming(option)-->Line_35 $$ if (options.isEmpty()) [ FD ]
Line_17 $$ final String displayName = each.getDisplayName().toLowerCase()-->Line_19 $$ if (displayName.contains(optionToCheck)) [ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_34 $$ final Set<Configurable> currentConfigurables = new HashSet<Configurable>(contentHits)[ CD ]
Line_46 $$ if (optionIds == null) -->Line_48 $$ return hits[ CD ]
Line_60 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) -->Line_67 $$ it.remove()[ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_35 $$ if (options.isEmpty()) [ CD ]
Line_37 $$ if (components.length > 0) -->Line_38 $$ Collections.addAll(options, components)[ CD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_5 $$ Set<String> options = getProcessedWordsWithoutStemming(option)[ FD ]
Line_4 $$ final Set<Configurable> contentHits = hits.getContentHits()-->Line_47 $$ contentHits.clear()[ FD ]
Line_14 $$ for (Configurable each : contentHits) -->Line_17 $$ final String displayName = each.getDisplayName().toLowerCase()[ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_3 $$ final ConfigurableHit hits = new ConfigurableHit()[ CD ]
Line_3 $$ final ConfigurableHit hits = new ConfigurableHit()-->Line_31 $$ hits.getNameFullHits().add(each)[ FD ]
Line_45 $$ final Set<OptionDescription> optionIds = getAcceptableDescriptions(opt)-->Line_46 $$ if (optionIds == null) [ FD ]
Line_3 $$ final ConfigurableHit hits = new ConfigurableHit()-->Line_30 $$ hits.getNameHits().add(each)[ FD ]
Line_44 $$ for (String opt : options) -->Line_45 $$ final Set<OptionDescription> optionIds = getAcceptableDescriptions(opt)[ FD ]
Line_13 $$ String optionToCheck = option.trim().toLowerCase()-->Line_36 $$ String[] components = REG_EXP.split(optionToCheck)[ FD ]
Line_13 $$ String optionToCheck = option.trim().toLowerCase()-->Line_24 $$ if (eachWord.startsWith(optionToCheck)) [ FD ]
Line_43 $$ Set<String> helpIds = null-->Line_59 $$ if (helpIds != null) [ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_59 $$ if (helpIds != null) [ CD ]
Line_34 $$ final Set<Configurable> currentConfigurables = new HashSet<Configurable>(contentHits)-->Line_71 $$ if (currentConfigurables.equals(contentHits) && !(configurables == null && type == DocumentEvent.EventType.CHANGE)) [ FD ]
Line_14 $$ for (Configurable each : contentHits) -->Line_15 $$ if (each.getDisplayName() == null)[ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_6 $$ if (configurables == null) [ CD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_6 $$ if (configurables == null) [ FD ]
Line_7 $$ for (ConfigurableGroup group : groups) -->Line_8 $$ contentHits.addAll(SearchUtil.expandGroup(group))[ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_43 $$ Set<String> helpIds = null[ CD ]
Line_43 $$ Set<String> helpIds = null-->Line_66 $$ if (!(configurable instanceof SearchableConfigurable && helpIds.contains(((SearchableConfigurable) configurable).getId()))) [ FD ]
Line_60 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) -->Line_66 $$ if (!(configurable instanceof SearchableConfigurable && helpIds.contains(((SearchableConfigurable) configurable).getId()))) [ CD ]
Line_55 $$ helpIds = ids-->Line_57 $$ helpIds.retainAll(ids)[ FD ]
Line_29 $$ if (options.isEmpty()) -->Line_31 $$ hits.getNameFullHits().add(each)[ CD ]
Line_59 $$ if (helpIds != null) -->Line_60 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) [ CD ]
Line_55 $$ helpIds = ids-->Line_66 $$ if (!(configurable instanceof SearchableConfigurable && helpIds.contains(((SearchableConfigurable) configurable).getId()))) [ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_5 $$ Set<String> options = getProcessedWordsWithoutStemming(option)[ CD ]
Line_50 $$ final Set<String> ids = new HashSet<String>()-->Line_57 $$ helpIds.retainAll(ids)[ FD ]
Line_29 $$ if (options.isEmpty()) -->Line_30 $$ hits.getNameHits().add(each)[ CD ]
Line_3 $$ final ConfigurableHit hits = new ConfigurableHit()-->Line_20 $$ hits.getNameFullHits().add(each)[ FD ]
Line_23 $$ for (String eachWord : allWords) -->Line_24 $$ if (eachWord.startsWith(optionToCheck)) [ FD ]
Line_6 $$ if (configurables == null) -->Line_11 $$ contentHits.addAll(configurables)[ CD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_13 $$ String optionToCheck = option.trim().toLowerCase()[ CD ]
Line_13 $$ String optionToCheck = option.trim().toLowerCase()-->Line_19 $$ if (displayName.contains(optionToCheck)) [ FD ]
Line_60 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) -->Line_62 $$ if (CodeStyleFacade.getInstance(project).isUnsuitableCodeStyleConfigurable(configurable)) [ CD ]
Line_43 $$ Set<String> helpIds = null-->Line_55 $$ helpIds = ids[ FD ]
Line_60 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) -->Line_63 $$ it.remove()[ FD ]
Line_60 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) -->Line_61 $$ Configurable configurable = it.next()[ FD ]
Line_51 $$ for (OptionDescription id : optionIds) -->Line_52 $$ ids.add(id.getConfigurableId())[ FD ]
Line_14 $$ for (Configurable each : contentHits) -->Line_31 $$ hits.getNameFullHits().add(each)[ FD ]
Line_71 $$ if (currentConfigurables.equals(contentHits) && !(configurables == null && type == DocumentEvent.EventType.CHANGE)) -->Line_72 $$ return getConfigurables(groups, DocumentEvent.EventType.CHANGE, null, option, project)[ CD ]
Line_62 $$ if (CodeStyleFacade.getInstance(project).isUnsuitableCodeStyleConfigurable(configurable)) -->Line_63 $$ it.remove()[ CD ]
Line_19 $$ if (displayName.contains(optionToCheck)) -->Line_20 $$ hits.getNameFullHits().add(each)[ CD ]
Line_3 $$ final ConfigurableHit hits = new ConfigurableHit()-->Line_4 $$ final Set<Configurable> contentHits = hits.getContentHits()[ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_11 $$ contentHits.addAll(configurables)[ FD ]
Line_46 $$ if (optionIds == null) -->Line_47 $$ contentHits.clear()[ CD ]
Line_4 $$ final Set<Configurable> contentHits = hits.getContentHits()-->Line_71 $$ if (currentConfigurables.equals(contentHits) && !(configurables == null && type == DocumentEvent.EventType.CHANGE)) [ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_72 $$ return getConfigurables(groups, DocumentEvent.EventType.CHANGE, null, option, project)[ FD ]
Line_5 $$ Set<String> options = getProcessedWordsWithoutStemming(option)-->Line_40 $$ options.add(option)[ FD ]
Line_2 $$ public ConfigurableHit getConfigurables(ConfigurableGroup[] groups, final DocumentEvent.EventType type, Set<Configurable> configurables, String option, Project project) -->Line_4 $$ final Set<Configurable> contentHits = hits.getContentHits()[ CD ]
Line_55 $$ helpIds = ids-->Line_59 $$ if (helpIds != null) [ FD ]
Line_4 $$ final Set<Configurable> contentHits = hits.getContentHits()-->Line_60 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) [ FD ]
Line_35 $$ if (options.isEmpty()) -->Line_36 $$ String[] components = REG_EXP.split(optionToCheck)[ CD ]
Line_3 $$ final ConfigurableHit hits = new ConfigurableHit()-->Line_25 $$ hits.getNameHits().add(each)[ FD ]
Line_14 $$ for (Configurable each : contentHits) -->Line_30 $$ hits.getNameHits().add(each)[ FD ]
