Line_9 $$ Connection conn = hikariCP.getConnection()-->Line_12 $$ conns.add(conn)[ FD ]
Line_2 $$ public void testHikariCPConnectionProvider() throws Exception -->Line_7 $$ final List<Connection> conns = new ArrayList<Connection>()[ CD ]
Line_4 $$ ConnectionProviderJdbcConnectionAccess connectionAccess = assertTyping(ConnectionProviderJdbcConnectionAccess.class, jdbcServices.getBootstrapJdbcConnectionAccess())-->Line_5 $$ assertTyping(HikariCPConnectionProvider.class, connectionAccess.getConnectionProvider())[ FD ]
Line_4 $$ ConnectionProviderJdbcConnectionAccess connectionAccess = assertTyping(ConnectionProviderJdbcConnectionAccess.class, jdbcServices.getBootstrapJdbcConnectionAccess())-->Line_6 $$ HikariCPConnectionProvider hikariCP = (HikariCPConnectionProvider) connectionAccess.getConnectionProvider()[ FD ]
Line_2 $$ public void testHikariCPConnectionProvider() throws Exception -->Line_4 $$ ConnectionProviderJdbcConnectionAccess connectionAccess = assertTyping(ConnectionProviderJdbcConnectionAccess.class, jdbcServices.getBootstrapJdbcConnectionAccess())[ CD ]
Line_9 $$ Connection conn = hikariCP.getConnection()-->Line_10 $$ assertNotNull(conn)[ FD ]
Line_9 $$ Connection conn = hikariCP.getConnection()-->Line_22 $$ assertTrue(conn.isClosed())[ FD ]
Line_6 $$ HikariCPConnectionProvider hikariCP = (HikariCPConnectionProvider) connectionAccess.getConnectionProvider()-->Line_9 $$ Connection conn = hikariCP.getConnection()[ FD ]
Line_8 $$ for (int i = 0; i < 2; i++) -->Line_12 $$ conns.add(conn)[ CD ]
Line_3 $$ JdbcServices jdbcServices = serviceRegistry().getService(JdbcServices.class)-->Line_4 $$ ConnectionProviderJdbcConnectionAccess connectionAccess = assertTyping(ConnectionProviderJdbcConnectionAccess.class, jdbcServices.getBootstrapJdbcConnectionAccess())[ FD ]
Line_6 $$ HikariCPConnectionProvider hikariCP = (HikariCPConnectionProvider) connectionAccess.getConnectionProvider()-->Line_21 $$ hikariCP.closeConnection(conn)[ FD ]
Line_8 $$ for (int i = 0; i < 2; i++) -->Line_11 $$ assertFalse(conn.isClosed())[ CD ]
Line_9 $$ Connection conn = hikariCP.getConnection()-->Line_11 $$ assertFalse(conn.isClosed())[ FD ]
Line_2 $$ public void testHikariCPConnectionProvider() throws Exception -->Line_8 $$ for (int i = 0; i < 2; i++) [ CD ]
Line_6 $$ HikariCPConnectionProvider hikariCP = (HikariCPConnectionProvider) connectionAccess.getConnectionProvider()-->Line_15 $$ hikariCP.getConnection()[ FD ]
Line_20 $$ for (Connection conn : conns) -->Line_21 $$ hikariCP.closeConnection(conn)[ FD ]
Line_2 $$ public void testHikariCPConnectionProvider() throws Exception -->Line_6 $$ HikariCPConnectionProvider hikariCP = (HikariCPConnectionProvider) connectionAccess.getConnectionProvider()[ CD ]
Line_7 $$ final List<Connection> conns = new ArrayList<Connection>()-->Line_12 $$ conns.add(conn)[ FD ]
Line_9 $$ Connection conn = hikariCP.getConnection()-->Line_21 $$ hikariCP.closeConnection(conn)[ FD ]
Line_2 $$ public void testHikariCPConnectionProvider() throws Exception -->Line_5 $$ assertTyping(HikariCPConnectionProvider.class, connectionAccess.getConnectionProvider())[ CD ]
Line_8 $$ for (int i = 0; i < 2; i++) -->Line_9 $$ Connection conn = hikariCP.getConnection()[ CD ]
Line_2 $$ public void testHikariCPConnectionProvider() throws Exception -->Line_3 $$ JdbcServices jdbcServices = serviceRegistry().getService(JdbcServices.class)[ CD ]
Line_20 $$ for (Connection conn : conns) -->Line_22 $$ assertTrue(conn.isClosed())[ FD ]
Line_6 $$ HikariCPConnectionProvider hikariCP = (HikariCPConnectionProvider) connectionAccess.getConnectionProvider()-->Line_26 $$ hikariCP.getConnection()[ FD ]
Line_2 $$ public void testHikariCPConnectionProvider() throws Exception -->Line_24 $$ releaseSessionFactory()[ CD ]
Line_8 $$ for (int i = 0; i < 2; i++) -->Line_10 $$ assertNotNull(conn)[ CD ]
