Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_28 $$ assertTrue(!retryIsNecessary)[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_19 $$ final long dataFileLength = fileSys.getFileStatus(dataPath).getLen()[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_8 $$ assertTrue(dir2.exists() && FileUtil.canWrite(dir2))[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_25 $$ FSDataInputStream dataFsdis = fileSys.open(dataPath)[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_36 $$ assertTrue(dir1files != null)[ CD ]
Line_25 $$ FSDataInputStream dataFsdis = fileSys.open(dataPath)-->Line_27 $$ boolean retryIsNecessary = fileSys.reportChecksumFailure(dataPath, dataFsdis, 0, checksumFsdis, 0)[ FD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_5 $$ final File dir1 = new File(base, "dir1")[ CD ]
Line_10 $$ final Path dataPath = new Path(new File(dir2, dataFileName).toURI())-->Line_27 $$ boolean retryIsNecessary = fileSys.reportChecksumFailure(dataPath, dataFsdis, 0, checksumFsdis, 0)[ FD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_4 $$ assertTrue(base.exists() && base.isDirectory())[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_12 $$ final FSDataOutputStream fsdos = fileSys.create(dataPath)[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_22 $$ final long checksumFileLength = fileSys.getFileStatus(checksumPath).getLen()[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_39 $$ File[] badFiles = badFilesDir.listFiles()[ CD ]
Line_45 $$ if (badFile.getName().startsWith(dataFileName)) -->Line_46 $$ assertTrue(dataFileLength == badFile.length())[ CD ]
Line_10 $$ final Path dataPath = new Path(new File(dir2, dataFileName).toURI())-->Line_25 $$ FSDataInputStream dataFsdis = fileSys.open(dataPath)[ FD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_10 $$ final Path dataPath = new Path(new File(dir2, dataFileName).toURI())[ CD ]
Line_10 $$ final Path dataPath = new Path(new File(dir2, dataFileName).toURI())-->Line_29 $$ assertTrue(!fileSys.pathToFile(dataPath).exists())[ FD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_37 $$ assertTrue(dir1files.length == 1)[ CD ]
Line_6 $$ final File dir2 = new File(dir1, "dir2")-->Line_8 $$ assertTrue(dir2.exists() && FileUtil.canWrite(dir2))[ FD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_31 $$ File[] dir1files = dir1.listFiles(new FileFilter() [ CD ]
Line_45 $$ if (badFile.getName().startsWith(dataFileName)) -->Line_48 $$ if (badFile.getName().contains(dataFileName + ".crc")) [ CD ]
Line_11 $$ final Path checksumPath = fileSys.getChecksumFile(dataPath)-->Line_21 $$ assertTrue(fileSys.pathToFile(checksumPath).exists())[ FD ]
Line_5 $$ final File dir1 = new File(base, "dir1")-->Line_31 $$ File[] dir1files = dir1.listFiles(new FileFilter() [ FD ]
Line_6 $$ final File dir2 = new File(dir1, "dir2")-->Line_7 $$ dir2.mkdirs()[ FD ]
Line_10 $$ final Path dataPath = new Path(new File(dir2, dataFileName).toURI())-->Line_11 $$ final Path checksumPath = fileSys.getChecksumFile(dataPath)[ FD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_54 $$ assertTrue(checksumFileFound)[ CD ]
Line_26 $$ FSDataInputStream checksumFsdis = fileSys.open(checksumPath)-->Line_27 $$ boolean retryIsNecessary = fileSys.reportChecksumFailure(dataPath, dataFsdis, 0, checksumFsdis, 0)[ FD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_23 $$ assertTrue(checksumFileLength > 0)[ CD ]
Line_10 $$ final Path dataPath = new Path(new File(dir2, dataFileName).toURI())-->Line_18 $$ assertTrue(fileSys.pathToFile(dataPath).exists())[ FD ]
Line_12 $$ final FSDataOutputStream fsdos = fileSys.create(dataPath)-->Line_16 $$ fsdos.close()[ FD ]
Line_11 $$ final Path checksumPath = fileSys.getChecksumFile(dataPath)-->Line_26 $$ FSDataInputStream checksumFsdis = fileSys.open(checksumPath)[ FD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_7 $$ dir2.mkdirs()[ CD ]
Line_10 $$ final Path dataPath = new Path(new File(dir2, dataFileName).toURI())-->Line_12 $$ final FSDataOutputStream fsdos = fileSys.create(dataPath)[ FD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_27 $$ boolean retryIsNecessary = fileSys.reportChecksumFailure(dataPath, dataFsdis, 0, checksumFsdis, 0)[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_41 $$ assertTrue(badFiles.length == 2)[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_9 $$ final String dataFileName = "corruptedData"[ CD ]
Line_12 $$ final FSDataOutputStream fsdos = fileSys.create(dataPath)-->Line_14 $$ fsdos.writeUTF("foo")[ FD ]
Line_48 $$ if (badFile.getName().contains(dataFileName + ".crc")) -->Line_49 $$ assertTrue(checksumFileLength == badFile.length())[ CD ]
Line_27 $$ boolean retryIsNecessary = fileSys.reportChecksumFailure(dataPath, dataFsdis, 0, checksumFsdis, 0)-->Line_28 $$ assertTrue(!retryIsNecessary)[ FD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_6 $$ final File dir2 = new File(dir1, "dir2")[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_20 $$ assertTrue(dataFileLength > 0)[ CD ]
Line_11 $$ final Path checksumPath = fileSys.getChecksumFile(dataPath)-->Line_22 $$ final long checksumFileLength = fileSys.getFileStatus(checksumPath).getLen()[ FD ]
Line_10 $$ final Path dataPath = new Path(new File(dir2, dataFileName).toURI())-->Line_19 $$ final long dataFileLength = fileSys.getFileStatus(dataPath).getLen()[ FD ]
Line_11 $$ final Path checksumPath = fileSys.getChecksumFile(dataPath)-->Line_30 $$ assertTrue(!fileSys.pathToFile(checksumPath).exists())[ FD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_26 $$ FSDataInputStream checksumFsdis = fileSys.open(checksumPath)[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_3 $$ base.mkdirs()[ CD ]
Line_9 $$ final String dataFileName = "corruptedData"-->Line_45 $$ if (badFile.getName().startsWith(dataFileName)) [ FD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_53 $$ assertTrue(dataFileFound)[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_21 $$ assertTrue(fileSys.pathToFile(checksumPath).exists())[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_40 $$ assertTrue(badFiles != null)[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_30 $$ assertTrue(!fileSys.pathToFile(checksumPath).exists())[ CD ]
Line_31 $$ File[] dir1files = dir1.listFiles(new FileFilter() -->Line_33 $$ return pathname != null && !pathname.getName().equals("dir2")[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_24 $$ FileUtil.setWritable(base, false)[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_18 $$ assertTrue(fileSys.pathToFile(dataPath).exists())[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_11 $$ final Path checksumPath = fileSys.getChecksumFile(dataPath)[ CD ]
Line_2 $$ public void testReportChecksumFailure() throws IOException -->Line_29 $$ assertTrue(!fileSys.pathToFile(dataPath).exists())[ CD ]
Line_31 $$ File[] dir1files = dir1.listFiles(new FileFilter() -->Line_33 $$ return pathname != null && !pathname.getName().equals("dir2")[ FD ]
