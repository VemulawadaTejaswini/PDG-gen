Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)-->Line_44 $$ if (user == null) [ FD ]
Line_32 $$ user = UserImporterUtil.importUser(companyId, emailAddress, StringPool.BLANK)-->Line_41 $$ if (user == null) [ FD ]
Line_55 $$ String currentURL = PortalUtil.getCurrentURL(request)-->Line_56 $$ if (currentURL.contains("/portal/login")) [ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_19 $$ User user = null[ CD ]
Line_44 $$ if (user == null) -->Line_50 $$ if (_log.isDebugEnabled()) [ CD ]
Line_32 $$ user = UserImporterUtil.importUser(companyId, emailAddress, StringPool.BLANK)-->Line_44 $$ if (user == null) [ FD ]
Line_57 $$ String redirect = ParamUtil.getString(request, "redirect")-->Line_63 $$ request.setAttribute(AutoLogin.AUTO_LOGIN_REDIRECT, redirect)[ FD ]
Line_13 $$ String emailAddress = nameValues.get(openSSOConfiguration.emailAddressAttr())-->Line_32 $$ user = UserImporterUtil.importUser(companyId, emailAddress, StringPool.BLANK)[ FD ]
Line_19 $$ User user = null-->Line_22 $$ if (user != null) [ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_11 $$ Map<String, String> nameValues = _openSSO.getAttributes(request, openSSOConfiguration.serviceURL())[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_67 $$ credentials[1] = user.getPassword()[ CD ]
Line_3 $$ long companyId = PortalUtil.getCompanyId(request)-->Line_4 $$ OpenSSOConfiguration openSSOConfiguration = getOpenSSOConfiguration(companyId)[ FD ]
Line_4 $$ OpenSSOConfiguration openSSOConfiguration = getOpenSSOConfiguration(companyId)-->Line_26 $$ if (openSSOConfiguration.importFromLDAP()) [ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_65 $$ String[] credentials = new String[3][ CD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_20 $$ if (PrefsPropsUtil.getBoolean(companyId, PropsKeys.USERS_SCREEN_NAME_ALWAYS_AUTOGENERATE)) [ CD ]
Line_12 $$ String screenName = nameValues.get(openSSOConfiguration.screenNameAttr())-->Line_23 $$ screenName = _screenNameGenerator.generate(companyId, user.getUserId(), emailAddress)[ FD ]
Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)-->Line_66 $$ credentials[0] = String.valueOf(user.getUserId())[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_38 $$ return handleException(request, response, new Exception("Email address is null"))[ FD ]
Line_19 $$ User user = null-->Line_23 $$ screenName = _screenNameGenerator.generate(companyId, user.getUserId(), emailAddress)[ FD ]
Line_44 $$ if (user == null) -->Line_47 $$ if (themeDisplay != null) [ CD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_69 $$ return credentials[ CD ]
Line_58 $$ if (Validator.isNotNull(redirect)) -->Line_61 $$ redirect = PortalUtil.getPathMain()[ CD ]
Line_23 $$ screenName = _screenNameGenerator.generate(companyId, user.getUserId(), emailAddress)-->Line_42 $$ user = _userLocalService.fetchUserByScreenName(companyId, screenName)[ FD ]
Line_42 $$ user = _userLocalService.fetchUserByScreenName(companyId, screenName)-->Line_44 $$ if (user == null) [ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_8 $$ if (!_openSSO.isAuthenticated(request, openSSOConfiguration.serviceURL())) [ CD ]
Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)-->Line_67 $$ credentials[1] = user.getPassword()[ FD ]
Line_45 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_48 $$ locale = themeDisplay.getLocale()[ FD ]
Line_58 $$ if (Validator.isNotNull(redirect)) -->Line_59 $$ redirect = PortalUtil.escapeRedirect(redirect)[ CD ]
Line_14 $$ String firstName = nameValues.get(openSSOConfiguration.firstNameAttr())-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_56 $$ if (currentURL.contains("/portal/login")) -->Line_58 $$ if (Validator.isNotNull(redirect)) [ CD ]
Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)-->Line_67 $$ credentials[1] = user.getPassword()[ FD ]
Line_20 $$ if (PrefsPropsUtil.getBoolean(companyId, PropsKeys.USERS_SCREEN_NAME_ALWAYS_AUTOGENERATE)) -->Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)[ CD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_14 $$ String firstName = nameValues.get(openSSOConfiguration.firstNameAttr())[ CD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_4 $$ OpenSSOConfiguration openSSOConfiguration = getOpenSSOConfiguration(companyId)[ CD ]
Line_57 $$ String redirect = ParamUtil.getString(request, "redirect")-->Line_59 $$ redirect = PortalUtil.escapeRedirect(redirect)[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_12 $$ String screenName = nameValues.get(openSSOConfiguration.screenNameAttr())[ CD ]
Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)-->Line_32 $$ user = UserImporterUtil.importUser(companyId, emailAddress, StringPool.BLANK)[ FD ]
Line_23 $$ screenName = _screenNameGenerator.generate(companyId, user.getUserId(), emailAddress)-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_11 $$ Map<String, String> nameValues = _openSSO.getAttributes(request, openSSOConfiguration.serviceURL())-->Line_13 $$ String emailAddress = nameValues.get(openSSOConfiguration.emailAddressAttr())[ FD ]
Line_22 $$ if (user != null) -->Line_23 $$ screenName = _screenNameGenerator.generate(companyId, user.getUserId(), emailAddress)[ CD ]
Line_48 $$ locale = themeDisplay.getLocale()-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_8 $$ if (!_openSSO.isAuthenticated(request, openSSOConfiguration.serviceURL())) [ FD ]
Line_32 $$ user = UserImporterUtil.importUser(companyId, emailAddress, StringPool.BLANK)-->Line_66 $$ credentials[0] = String.valueOf(user.getUserId())[ FD ]
Line_44 $$ if (user == null) -->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ CD ]
Line_4 $$ OpenSSOConfiguration openSSOConfiguration = getOpenSSOConfiguration(companyId)-->Line_15 $$ String lastName = nameValues.get(openSSOConfiguration.lastNameAttr())[ FD ]
Line_47 $$ if (themeDisplay != null) -->Line_48 $$ locale = themeDisplay.getLocale()[ CD ]
Line_50 $$ if (_log.isDebugEnabled()) -->Line_51 $$ _log.debug("Adding user " + screenName)[ CD ]
Line_42 $$ user = _userLocalService.fetchUserByScreenName(companyId, screenName)-->Line_67 $$ credentials[1] = user.getPassword()[ FD ]
Line_13 $$ String emailAddress = nameValues.get(openSSOConfiguration.emailAddressAttr())-->Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_55 $$ String currentURL = PortalUtil.getCurrentURL(request)[ FD ]
Line_46 $$ Locale locale = LocaleUtil.getDefault()-->Line_48 $$ locale = themeDisplay.getLocale()[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_55 $$ String currentURL = PortalUtil.getCurrentURL(request)[ CD ]
Line_13 $$ String emailAddress = nameValues.get(openSSOConfiguration.emailAddressAttr())-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_13 $$ String emailAddress = nameValues.get(openSSOConfiguration.emailAddressAttr())[ CD ]
Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)-->Line_32 $$ user = UserImporterUtil.importUser(companyId, emailAddress, StringPool.BLANK)[ FD ]
Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)-->Line_66 $$ credentials[0] = String.valueOf(user.getUserId())[ FD ]
Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)-->Line_41 $$ if (user == null) [ FD ]
Line_15 $$ String lastName = nameValues.get(openSSOConfiguration.lastNameAttr())-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_32 $$ user = UserImporterUtil.importUser(companyId, emailAddress, StringPool.BLANK)-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_12 $$ String screenName = nameValues.get(openSSOConfiguration.screenNameAttr())-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_3 $$ long companyId = PortalUtil.getCompanyId(request)-->Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)[ FD ]
Line_4 $$ OpenSSOConfiguration openSSOConfiguration = getOpenSSOConfiguration(companyId)-->Line_14 $$ String firstName = nameValues.get(openSSOConfiguration.firstNameAttr())[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_3 $$ long companyId = PortalUtil.getCompanyId(request)[ FD ]
Line_57 $$ String redirect = ParamUtil.getString(request, "redirect")-->Line_58 $$ if (Validator.isNotNull(redirect)) [ FD ]
Line_19 $$ User user = null-->Line_66 $$ credentials[0] = String.valueOf(user.getUserId())[ FD ]
Line_5 $$ if (!openSSOConfiguration.enabled()) -->Line_6 $$ return null[ CD ]
Line_3 $$ long companyId = PortalUtil.getCompanyId(request)-->Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)[ FD ]
Line_28 $$ String authType = PrefsPropsUtil.getString(companyId, PropsKeys.COMPANY_SECURITY_AUTH_TYPE, PropsValues.COMPANY_SECURITY_AUTH_TYPE)-->Line_29 $$ if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) [ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_68 $$ credentials[2] = Boolean.TRUE.toString()[ CD ]
Line_3 $$ long companyId = PortalUtil.getCompanyId(request)-->Line_42 $$ user = _userLocalService.fetchUserByScreenName(companyId, screenName)[ FD ]
Line_19 $$ User user = null-->Line_42 $$ user = _userLocalService.fetchUserByScreenName(companyId, screenName)[ FD ]
Line_37 $$ if (Validator.isNull(emailAddress)) -->Line_38 $$ return handleException(request, response, new Exception("Email address is null"))[ CD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_11 $$ Map<String, String> nameValues = _openSSO.getAttributes(request, openSSOConfiguration.serviceURL())[ CD ]
Line_59 $$ redirect = PortalUtil.escapeRedirect(redirect)-->Line_63 $$ request.setAttribute(AutoLogin.AUTO_LOGIN_REDIRECT, redirect)[ FD ]
Line_32 $$ user = UserImporterUtil.importUser(companyId, emailAddress, StringPool.BLANK)-->Line_67 $$ credentials[1] = user.getPassword()[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_56 $$ if (currentURL.contains("/portal/login")) [ CD ]
Line_3 $$ long companyId = PortalUtil.getCompanyId(request)-->Line_23 $$ screenName = _screenNameGenerator.generate(companyId, user.getUserId(), emailAddress)[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_45 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)[ FD ]
Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)-->Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)[ FD ]
Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)-->Line_44 $$ if (user == null) [ FD ]
Line_46 $$ Locale locale = LocaleUtil.getDefault()-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_8 $$ if (!_openSSO.isAuthenticated(request, openSSOConfiguration.serviceURL())) -->Line_9 $$ return null[ CD ]
Line_19 $$ User user = null-->Line_44 $$ if (user == null) [ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_66 $$ credentials[0] = String.valueOf(user.getUserId())[ CD ]
Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)-->Line_66 $$ credentials[0] = String.valueOf(user.getUserId())[ FD ]
Line_19 $$ User user = null-->Line_67 $$ credentials[1] = user.getPassword()[ FD ]
Line_56 $$ if (currentURL.contains("/portal/login")) -->Line_57 $$ String redirect = ParamUtil.getString(request, "redirect")[ CD ]
Line_29 $$ if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) -->Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)[ CD ]
Line_19 $$ User user = null-->Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)[ FD ]
Line_3 $$ long companyId = PortalUtil.getCompanyId(request)-->Line_32 $$ user = UserImporterUtil.importUser(companyId, emailAddress, StringPool.BLANK)[ FD ]
Line_12 $$ String screenName = nameValues.get(openSSOConfiguration.screenNameAttr())-->Line_42 $$ user = _userLocalService.fetchUserByScreenName(companyId, screenName)[ FD ]
Line_42 $$ user = _userLocalService.fetchUserByScreenName(companyId, screenName)-->Line_66 $$ credentials[0] = String.valueOf(user.getUserId())[ FD ]
Line_3 $$ long companyId = PortalUtil.getCompanyId(request)-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_41 $$ if (user == null) -->Line_42 $$ user = _userLocalService.fetchUserByScreenName(companyId, screenName)[ CD ]
Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_44 $$ if (user == null) -->Line_46 $$ Locale locale = LocaleUtil.getDefault()[ CD ]
Line_23 $$ screenName = _screenNameGenerator.generate(companyId, user.getUserId(), emailAddress)-->Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_3 $$ long companyId = PortalUtil.getCompanyId(request)[ CD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_15 $$ String lastName = nameValues.get(openSSOConfiguration.lastNameAttr())[ CD ]
Line_12 $$ String screenName = nameValues.get(openSSOConfiguration.screenNameAttr())-->Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)[ FD ]
Line_19 $$ User user = null-->Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)[ FD ]
Line_57 $$ String redirect = ParamUtil.getString(request, "redirect")-->Line_61 $$ redirect = PortalUtil.getPathMain()[ FD ]
Line_11 $$ Map<String, String> nameValues = _openSSO.getAttributes(request, openSSOConfiguration.serviceURL())-->Line_14 $$ String firstName = nameValues.get(openSSOConfiguration.firstNameAttr())[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_63 $$ request.setAttribute(AutoLogin.AUTO_LOGIN_REDIRECT, redirect)[ FD ]
Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)-->Line_42 $$ user = _userLocalService.fetchUserByScreenName(companyId, screenName)[ FD ]
Line_3 $$ long companyId = PortalUtil.getCompanyId(request)-->Line_20 $$ if (PrefsPropsUtil.getBoolean(companyId, PropsKeys.USERS_SCREEN_NAME_ALWAYS_AUTOGENERATE)) [ FD ]
Line_19 $$ User user = null-->Line_41 $$ if (user == null) [ FD ]
Line_26 $$ if (openSSOConfiguration.importFromLDAP()) -->Line_37 $$ if (Validator.isNull(emailAddress)) [ CD ]
Line_44 $$ if (user == null) -->Line_45 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)[ CD ]
Line_42 $$ user = _userLocalService.fetchUserByScreenName(companyId, screenName)-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_45 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_47 $$ if (themeDisplay != null) [ FD ]
Line_16 $$ if (_log.isDebugEnabled()) -->Line_17 $$ _log.debug("Validating user information for " + firstName + " " + lastName + " with screen name " + screenName + " and email address " + emailAddress)[ CD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_57 $$ String redirect = ParamUtil.getString(request, "redirect")[ FD ]
Line_32 $$ user = UserImporterUtil.importUser(companyId, emailAddress, StringPool.BLANK)-->Line_42 $$ user = _userLocalService.fetchUserByScreenName(companyId, screenName)[ FD ]
Line_29 $$ if (authType.equals(CompanyConstants.AUTH_TYPE_SN)) -->Line_32 $$ user = UserImporterUtil.importUser(companyId, emailAddress, StringPool.BLANK)[ CD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_41 $$ if (user == null) [ CD ]
Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)-->Line_41 $$ if (user == null) [ FD ]
Line_56 $$ if (currentURL.contains("/portal/login")) -->Line_63 $$ request.setAttribute(AutoLogin.AUTO_LOGIN_REDIRECT, redirect)[ CD ]
Line_20 $$ if (PrefsPropsUtil.getBoolean(companyId, PropsKeys.USERS_SCREEN_NAME_ALWAYS_AUTOGENERATE)) -->Line_22 $$ if (user != null) [ CD ]
Line_4 $$ OpenSSOConfiguration openSSOConfiguration = getOpenSSOConfiguration(companyId)-->Line_12 $$ String screenName = nameValues.get(openSSOConfiguration.screenNameAttr())[ FD ]
Line_3 $$ long companyId = PortalUtil.getCompanyId(request)-->Line_28 $$ String authType = PrefsPropsUtil.getString(companyId, PropsKeys.COMPANY_SECURITY_AUTH_TYPE, PropsValues.COMPANY_SECURITY_AUTH_TYPE)[ FD ]
Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)-->Line_22 $$ if (user != null) [ FD ]
Line_13 $$ String emailAddress = nameValues.get(openSSOConfiguration.emailAddressAttr())-->Line_37 $$ if (Validator.isNull(emailAddress)) [ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_5 $$ if (!openSSOConfiguration.enabled()) [ CD ]
Line_61 $$ redirect = PortalUtil.getPathMain()-->Line_63 $$ request.setAttribute(AutoLogin.AUTO_LOGIN_REDIRECT, redirect)[ FD ]
Line_59 $$ redirect = PortalUtil.escapeRedirect(redirect)-->Line_61 $$ redirect = PortalUtil.getPathMain()[ FD ]
Line_4 $$ OpenSSOConfiguration openSSOConfiguration = getOpenSSOConfiguration(companyId)-->Line_5 $$ if (!openSSOConfiguration.enabled()) [ FD ]
Line_4 $$ OpenSSOConfiguration openSSOConfiguration = getOpenSSOConfiguration(companyId)-->Line_11 $$ Map<String, String> nameValues = _openSSO.getAttributes(request, openSSOConfiguration.serviceURL())[ FD ]
Line_4 $$ OpenSSOConfiguration openSSOConfiguration = getOpenSSOConfiguration(companyId)-->Line_13 $$ String emailAddress = nameValues.get(openSSOConfiguration.emailAddressAttr())[ FD ]
Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)-->Line_42 $$ user = _userLocalService.fetchUserByScreenName(companyId, screenName)[ FD ]
Line_19 $$ User user = null-->Line_32 $$ user = UserImporterUtil.importUser(companyId, emailAddress, StringPool.BLANK)[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_44 $$ if (user == null) [ CD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_26 $$ if (openSSOConfiguration.importFromLDAP()) [ CD ]
Line_4 $$ OpenSSOConfiguration openSSOConfiguration = getOpenSSOConfiguration(companyId)-->Line_8 $$ if (!_openSSO.isAuthenticated(request, openSSOConfiguration.serviceURL())) [ FD ]
Line_11 $$ Map<String, String> nameValues = _openSSO.getAttributes(request, openSSOConfiguration.serviceURL())-->Line_12 $$ String screenName = nameValues.get(openSSOConfiguration.screenNameAttr())[ FD ]
Line_21 $$ user = _userLocalService.fetchUserByEmailAddress(companyId, emailAddress)-->Line_23 $$ screenName = _screenNameGenerator.generate(companyId, user.getUserId(), emailAddress)[ FD ]
Line_19 $$ User user = null-->Line_53 $$ user = addUser(companyId, firstName, lastName, emailAddress, screenName, locale)[ FD ]
Line_2 $$ protected String[] doLogin(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_16 $$ if (_log.isDebugEnabled()) [ CD ]
Line_11 $$ Map<String, String> nameValues = _openSSO.getAttributes(request, openSSOConfiguration.serviceURL())-->Line_15 $$ String lastName = nameValues.get(openSSOConfiguration.lastNameAttr())[ FD ]
Line_30 $$ user = UserImporterUtil.importUser(companyId, StringPool.BLANK, screenName)-->Line_67 $$ credentials[1] = user.getPassword()[ FD ]
Line_13 $$ String emailAddress = nameValues.get(openSSOConfiguration.emailAddressAttr())-->Line_23 $$ screenName = _screenNameGenerator.generate(companyId, user.getUserId(), emailAddress)[ FD ]
