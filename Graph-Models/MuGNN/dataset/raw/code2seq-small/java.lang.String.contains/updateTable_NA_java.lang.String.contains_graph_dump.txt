Line_5 $$ String tempFileName = getTempFileName()-->Line_42 $$ FileUtil.delete(tempFileName)[ FD ]
Line_23 $$ if (!isAllowUniqueIndexes()) -->Line_24 $$ if (indexSQL.contains("create unique index")) [ CD ]
Line_25 $$ indexSQL = StringUtil.replace(indexSQL, "create unique index ", "create index ")-->Line_30 $$ db.runSQLTemplateString(targetConnection, indexSQL, false, false)[ FD ]
Line_22 $$ for (String indexSQL : indexesSQL) -->Line_25 $$ indexSQL = StringUtil.replace(indexSQL, "create unique index ", "create index ")[ FD ]
Line_12 $$ String createSQL = getCreateSQL()-->Line_17 $$ db.runSQL(targetConnection, createSQL)[ FD ]
Line_32 $$ if (_log.isWarnEnabled()) -->Line_33 $$ _log.warn(e.getMessage() + ": " + indexSQL)[ CD ]
Line_2 $$ protected void updateTable(Connection sourceConnection, Connection targetConnection, boolean deleteSource) throws Exception -->Line_19 $$ populateTable(targetConnection)[ FD ]
Line_22 $$ for (String indexSQL : indexesSQL) -->Line_30 $$ db.runSQLTemplateString(targetConnection, indexSQL, false, false)[ FD ]
Line_24 $$ if (indexSQL.contains("create unique index")) -->Line_25 $$ indexSQL = StringUtil.replace(indexSQL, "create unique index ", "create index ")[ CD ]
Line_7 $$ DB db = DBManagerUtil.getDB()-->Line_15 $$ db.runSQL(sourceConnection, "drop table " + getTableName())[ FD ]
Line_13 $$ if (Validator.isNotNull(createSQL)) -->Line_17 $$ db.runSQL(targetConnection, createSQL)[ CD ]
Line_2 $$ protected void updateTable(Connection sourceConnection, Connection targetConnection, boolean deleteSource) throws Exception -->Line_30 $$ db.runSQLTemplateString(targetConnection, indexSQL, false, false)[ FD ]
Line_7 $$ DB db = DBManagerUtil.getDB()-->Line_30 $$ db.runSQLTemplateString(targetConnection, indexSQL, false, false)[ FD ]
Line_24 $$ if (indexSQL.contains("create unique index")) -->Line_26 $$ dropIndexes = true[ CD ]
Line_2 $$ protected void updateTable(Connection sourceConnection, Connection targetConnection, boolean deleteSource) throws Exception -->Line_10 $$ db.runSQL(sourceConnection, deleteSQL)[ FD ]
Line_2 $$ protected void updateTable(Connection sourceConnection, Connection targetConnection, boolean deleteSource) throws Exception -->Line_15 $$ db.runSQL(sourceConnection, "drop table " + getTableName())[ FD ]
Line_2 $$ protected void updateTable(Connection sourceConnection, Connection targetConnection, boolean deleteSource) throws Exception -->Line_5 $$ String tempFileName = getTempFileName()[ CD ]
Line_22 $$ for (String indexSQL : indexesSQL) -->Line_24 $$ if (indexSQL.contains("create unique index")) [ FD ]
Line_2 $$ protected void updateTable(Connection sourceConnection, Connection targetConnection, boolean deleteSource) throws Exception -->Line_17 $$ db.runSQL(targetConnection, createSQL)[ FD ]
Line_8 $$ if (Validator.isNotNull(tempFileName) && deleteSource) -->Line_10 $$ db.runSQL(sourceConnection, deleteSQL)[ CD ]
Line_21 $$ boolean dropIndexes = false-->Line_26 $$ dropIndexes = true[ FD ]
Line_5 $$ String tempFileName = getTempFileName()-->Line_41 $$ if (Validator.isNotNull(tempFileName) && _deleteTempFile) [ FD ]
Line_2 $$ protected void updateTable(Connection sourceConnection, Connection targetConnection, boolean deleteSource) throws Exception -->Line_4 $$ generateTempFile(sourceConnection)[ FD ]
Line_8 $$ if (Validator.isNotNull(tempFileName) && deleteSource) -->Line_9 $$ String deleteSQL = getDeleteSQL()[ CD ]
Line_7 $$ DB db = DBManagerUtil.getDB()-->Line_17 $$ db.runSQL(targetConnection, createSQL)[ FD ]
Line_2 $$ protected void updateTable(Connection sourceConnection, Connection targetConnection, boolean deleteSource) throws Exception -->Line_4 $$ generateTempFile(sourceConnection)[ CD ]
Line_14 $$ if (deleteSource) -->Line_15 $$ db.runSQL(sourceConnection, "drop table " + getTableName())[ CD ]
Line_12 $$ String createSQL = getCreateSQL()-->Line_13 $$ if (Validator.isNotNull(createSQL)) [ FD ]
Line_7 $$ DB db = DBManagerUtil.getDB()-->Line_10 $$ db.runSQL(sourceConnection, deleteSQL)[ FD ]
Line_37 $$ if (dropIndexes) -->Line_38 $$ StartupHelperUtil.setDropIndexes(true)[ CD ]
Line_9 $$ String deleteSQL = getDeleteSQL()-->Line_10 $$ db.runSQL(sourceConnection, deleteSQL)[ FD ]
Line_5 $$ String tempFileName = getTempFileName()-->Line_8 $$ if (Validator.isNotNull(tempFileName) && deleteSource) [ FD ]
Line_41 $$ if (Validator.isNotNull(tempFileName) && _deleteTempFile) -->Line_42 $$ FileUtil.delete(tempFileName)[ CD ]
Line_13 $$ if (Validator.isNotNull(createSQL)) -->Line_14 $$ if (deleteSource) [ CD ]
Line_2 $$ protected void updateTable(Connection sourceConnection, Connection targetConnection, boolean deleteSource) throws Exception -->Line_8 $$ if (Validator.isNotNull(tempFileName) && deleteSource) [ FD ]
