Line_2 $$ private static ThreadState tryParseThreadStart(final String line) -->Line_6 $$ if (line.contains(" daemon ")) [ FD ]
Line_2 $$ private static ThreadState tryParseThreadStart(final String line) -->Line_4 $$ if (m.find()) [ CD ]
Line_6 $$ if (line.contains(" daemon ")) -->Line_7 $$ state.setDaemon(true)[ CD ]
Line_3 $$ Matcher m = ourThreadStartPattern.matcher(line)-->Line_5 $$ final ThreadState state = new ThreadState(m.group(1), m.group(3))[ FD ]
Line_2 $$ private static ThreadState tryParseThreadStart(final String line) -->Line_11 $$ return null[ CD ]
Line_3 $$ Matcher m = ourThreadStartPattern.matcher(line)-->Line_4 $$ if (m.find()) [ FD ]
Line_2 $$ private static ThreadState tryParseThreadStart(final String line) -->Line_3 $$ Matcher m = ourThreadStartPattern.matcher(line)[ FD ]
Line_2 $$ private static ThreadState tryParseThreadStart(final String line) -->Line_3 $$ Matcher m = ourThreadStartPattern.matcher(line)[ CD ]
Line_4 $$ if (m.find()) -->Line_5 $$ final ThreadState state = new ThreadState(m.group(1), m.group(3))[ CD ]
Line_4 $$ if (m.find()) -->Line_6 $$ if (line.contains(" daemon ")) [ CD ]
Line_4 $$ if (m.find()) -->Line_9 $$ return state[ CD ]
Line_5 $$ final ThreadState state = new ThreadState(m.group(1), m.group(3))-->Line_7 $$ state.setDaemon(true)[ FD ]
