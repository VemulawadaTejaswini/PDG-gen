Line_30 $$ channelContext = new ChannelContext(null)-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_34 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_76 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_9 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_31 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)[ FD ]
Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_77 $$ channelContext = new ChannelContext(sendingQueue)[ FD ]
Line_4 $$ Datagram requestDatagram = null-->Line_67 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_45 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_64 $$ sourceChannel.configureBlocking(true)[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_30 $$ channelContext = new ChannelContext(null)-->Line_73 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_73 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_5 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_75 $$ recordCompletionHandler.waitUntilSubmitted()[ FD ]
Line_66 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_5 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_35 $$ requestDatagram.completionHandler = recordCompletionHandler[ FD ]
Line_66 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_77 $$ channelContext = new ChannelContext(sendingQueue)[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_26 $$ logRecord = logRecords.get(0)[ FD ]
Line_67 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_73 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_5 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_40 $$ Assert.assertNotNull(recordCompletionHandler.getIOException())[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_74 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_27 $$ assertMessageStartWith(logRecord, "Broken write channel, unregister ")[ FD ]
Line_44 $$ Queue<Datagram> sendingQueue = new LinkedList()-->Line_86 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_45 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_60 $$ sourceChannel.read(receiveByteBuffer)[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_31 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_55 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) [ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_77 $$ channelContext = new ChannelContext(sendingQueue)[ FD ]
Line_4 $$ Datagram requestDatagram = null-->Line_33 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_5 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_76 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_51 $$ ByteBuffer receiveByteBuffer = ByteBuffer.allocate(bufferSize + 14)-->Line_60 $$ sourceChannel.read(receiveByteBuffer)[ FD ]
Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_55 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) [ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_68 $$ Object attachment = new Object()-->Line_69 $$ requestDatagram.attachment = attachment[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_30 $$ channelContext = new ChannelContext(null)[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_10 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_30 $$ channelContext = new ChannelContext(null)[ FD ]
Line_45 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_55 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) [ FD ]
Line_77 $$ channelContext = new ChannelContext(sendingQueue)-->Line_86 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_77 $$ channelContext = new ChannelContext(sendingQueue)[ FD ]
Line_2 $$ public void testHandleWriting() throws Exception -->Line_44 $$ Queue<Datagram> sendingQueue = new LinkedList()[ CD ]
Line_34 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_70 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_67 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_82 $$ Assert.assertNull(requestDatagram.getDataByteBuffer())[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_66 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_31 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_38 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_2 $$ public void testHandleWriting() throws Exception -->Line_43 $$ Pipe pipe = Pipe.open()[ CD ]
Line_33 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_73 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_9 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_24 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ assertMessageStartWith(logRecord, "Broken write channel, unregister ")[ FD ]
Line_2 $$ public void testHandleWriting() throws Exception -->Line_86 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ CD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_34 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_71 $$ requestDatagram.completionHandler = recordCompletionHandler[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_23 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_4 $$ Datagram requestDatagram = null-->Line_83 $$ String requestDatagramString = requestDatagram.toString()[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_37 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_86 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_21 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_30 $$ channelContext = new ChannelContext(null)-->Line_37 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_74 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_22 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, _data))[ FD ]
Line_9 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_20 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)[ FD ]
Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_25 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_67 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_78 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_66 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_86 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_51 $$ ByteBuffer receiveByteBuffer = ByteBuffer.allocate(bufferSize + 14)-->Line_57 $$ sourceChannel.read(receiveByteBuffer)[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_37 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_4 $$ Datagram requestDatagram = null-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_45 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_74 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_30 $$ channelContext = new ChannelContext(null)-->Line_86 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_33 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_36 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_50 $$ ByteBuffer sendByteBuffer = ByteBuffer.allocate(bufferSize)-->Line_58 $$ Assert.assertTrue(sendByteBuffer.hasRemaining())[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_21 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_36 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_5 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_70 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_67 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_83 $$ String requestDatagramString = requestDatagram.toString()[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_36 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_34 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_75 $$ recordCompletionHandler.waitUntilSubmitted()[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_10 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_9 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_41 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_43 $$ Pipe pipe = Pipe.open()-->Line_45 $$ try (SourceChannel sourceChannel = pipe.source();[ FD ]
Line_9 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_10 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_30 $$ channelContext = new ChannelContext(null)-->Line_77 $$ channelContext = new ChannelContext(sendingQueue)[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_22 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, _data))[ FD ]
Line_50 $$ ByteBuffer sendByteBuffer = ByteBuffer.allocate(bufferSize)-->Line_61 $$ Assert.assertFalse(sendByteBuffer.hasRemaining())[ FD ]
Line_70 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_75 $$ recordCompletionHandler.waitUntilSubmitted()[ FD ]
Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_4 $$ Datagram requestDatagram = null-->Line_73 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_26 $$ logRecord = logRecords.get(0)-->Line_27 $$ assertMessageStartWith(logRecord, "Broken write channel, unregister ")[ FD ]
Line_54 $$ int count = 0-->Line_56 $$ count++[ FD ]
Line_4 $$ Datagram requestDatagram = null-->Line_78 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_45 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_57 $$ sourceChannel.read(receiveByteBuffer)[ FD ]
Line_30 $$ channelContext = new ChannelContext(null)-->Line_74 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_70 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_71 $$ requestDatagram.completionHandler = recordCompletionHandler[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_74 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_2 $$ public void testHandleWriting() throws Exception -->Line_4 $$ Datagram requestDatagram = null[ CD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_26 $$ logRecord = logRecords.get(0)[ FD ]
Line_66 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_74 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_34 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_35 $$ requestDatagram.completionHandler = recordCompletionHandler[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_66 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_33 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_78 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_77 $$ channelContext = new ChannelContext(sendingQueue)-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_53 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, sendByteBuffer))[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_77 $$ channelContext = new ChannelContext(sendingQueue)[ FD ]
Line_20 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_21 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_73 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_45 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_48 $$ sinkChannel.configureBlocking(false)[ FD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_17 $$ Assert.assertTrue(logRecord.getThrown() instanceof IOException)[ FD ]
Line_30 $$ channelContext = new ChannelContext(null)-->Line_55 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) [ FD ]
Line_30 $$ channelContext = new ChannelContext(null)-->Line_53 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, sendByteBuffer))[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_86 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_20 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_41 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_50 $$ ByteBuffer sendByteBuffer = ByteBuffer.allocate(bufferSize)-->Line_53 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, sendByteBuffer))[ FD ]
Line_67 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_78 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_82 $$ Assert.assertNull(requestDatagram.getDataByteBuffer())[ FD ]
Line_49 $$ int bufferSize = 1024 * 1024 * 10-->Line_50 $$ ByteBuffer sendByteBuffer = ByteBuffer.allocate(bufferSize)[ FD ]
Line_9 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_21 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_37 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_23 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_28 $$ Assert.assertNull(logRecord.getThrown())[ FD ]
Line_70 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_76 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_2 $$ public void testHandleWriting() throws Exception -->Line_3 $$ ChannelContext channelContext = null[ CD ]
Line_30 $$ channelContext = new ChannelContext(null)-->Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_55 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) -->Line_56 $$ count++[ CD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_34 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_39 $$ recordCompletionHandler.waitUntilFailed()[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_53 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, sendByteBuffer))[ FD ]
Line_77 $$ channelContext = new ChannelContext(sendingQueue)-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_55 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) [ FD ]
Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_53 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, sendByteBuffer))[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_41 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_20 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_24 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_51 $$ ByteBuffer receiveByteBuffer = ByteBuffer.allocate(bufferSize + 14)-->Line_62 $$ Assert.assertFalse(receiveByteBuffer.hasRemaining())[ FD ]
Line_78 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_66 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_33 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_83 $$ String requestDatagramString = requestDatagram.toString()[ FD ]
Line_20 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_31 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)[ FD ]
Line_30 $$ channelContext = new ChannelContext(null)-->Line_66 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_26 $$ logRecord = logRecords.get(0)-->Line_28 $$ Assert.assertNull(logRecord.getThrown())[ FD ]
Line_55 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) -->Line_57 $$ sourceChannel.read(receiveByteBuffer)[ CD ]
Line_45 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_47 $$ sourceChannel.configureBlocking(false)[ FD ]
Line_5 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_34 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_2 $$ public void testHandleWriting() throws Exception -->Line_5 $$ RecordCompletionHandler<Object> recordCompletionHandler = null[ CD ]
Line_9 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_13 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_30 $$ channelContext = new ChannelContext(null)-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_86 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_55 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) -->Line_58 $$ Assert.assertTrue(sendByteBuffer.hasRemaining())[ CD ]
Line_34 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_40 $$ Assert.assertNotNull(recordCompletionHandler.getIOException())[ FD ]
Line_83 $$ String requestDatagramString = requestDatagram.toString()-->Line_84 $$ Assert.assertTrue(requestDatagramString.contains("dataChunk=null"))[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_53 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, sendByteBuffer))[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_36 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_25 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_12 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_30 $$ channelContext = new ChannelContext(null)-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_5 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_71 $$ requestDatagram.completionHandler = recordCompletionHandler[ FD ]
Line_66 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_73 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_20 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_38 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_26 $$ logRecord = logRecords.get(0)[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_86 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_68 $$ Object attachment = new Object()-->Line_76 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_5 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_39 $$ recordCompletionHandler.waitUntilFailed()[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_66 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_45 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_65 $$ sinkChannel.configureBlocking(true)[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_11 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, _data))[ FD ]
Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_33 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_82 $$ Assert.assertNull(requestDatagram.getDataByteBuffer())[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_74 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_9 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_38 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_30 $$ channelContext = new ChannelContext(null)-->Line_36 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_22 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, _data))[ FD ]
Line_33 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_78 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_83 $$ String requestDatagramString = requestDatagram.toString()[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_23 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_4 $$ Datagram requestDatagram = null-->Line_82 $$ Assert.assertNull(requestDatagram.getDataByteBuffer())[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_21 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_73 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_11 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, _data))[ FD ]
Line_3 $$ ChannelContext channelContext = null-->Line_12 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_30 $$ channelContext = new ChannelContext(null)[ FD ]
Line_33 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_67 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_19 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_55 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) [ FD ]
Line_45 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_4 $$ Datagram requestDatagram = null-->Line_36 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_73 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_52 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_8 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_66 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
