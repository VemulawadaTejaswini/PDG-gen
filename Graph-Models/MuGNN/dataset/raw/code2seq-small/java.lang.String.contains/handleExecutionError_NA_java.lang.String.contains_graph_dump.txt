Line_36 $$ if (project.isDisposed()) -->Line_37 $$ return[ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_6 $$ LOG.debug(e)[ CD ]
Line_17 $$ listener = new HyperlinkListener() -->Line_47 $$ finalListener.hyperlinkUpdate(event)[ FD ]
Line_45 $$ NotificationListener notificationListener = finalListener == null ? null : new NotificationListener() -->Line_50 $$ ourNotificationGroup.createNotification(title, finalDescription, NotificationType.ERROR, notificationListener).notify(project)[ FD ]
Line_7 $$ String description = e.getMessage()-->Line_8 $$ if (description == null) [ FD ]
Line_26 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_27 $$ LOG.error(fullMessage, e)[ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_50 $$ ourNotificationGroup.createNotification(title, finalDescription, NotificationType.ERROR, notificationListener).notify(project)[ FD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_9 $$ LOG.warn("Execution error without description", e)[ FD ]
Line_7 $$ String description = e.getMessage()-->Line_10 $$ description = "Unknown error"[ FD ]
Line_8 $$ if (description == null) -->Line_10 $$ description = "Unknown error"[ CD ]
Line_17 $$ listener = new HyperlinkListener() -->Line_19 $$ PropertiesComponent.getInstance(project).setValue("dynamic.classpath", "true")[ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_7 $$ String description = e.getMessage()[ FD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_24 $$ final String title = ExecutionBundle.message("error.running.configuration.message", taskName)[ CD ]
Line_34 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_45 $$ NotificationListener notificationListener = finalListener == null ? null : new NotificationListener() [ CD ]
Line_8 $$ if (description == null) -->Line_9 $$ LOG.warn("Execution error without description", e)[ CD ]
Line_34 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_39 $$ ToolWindowManager toolWindowManager = ToolWindowManager.getInstance(project)[ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_13 $$ if ((description.contains("87") || description.contains("111") || description.contains("206")) && e instanceof ProcessNotCreatedException && !PropertiesComponent.getInstance(project).isTrueValue("dynamic.classpath")) [ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_40 $$ if (toolWindowManager.canShowNotification(toolWindowId)) [ FD ]
Line_40 $$ if (toolWindowManager.canShowNotification(toolWindowId)) -->Line_43 $$ Messages.showErrorDialog(project, UIUtil.toHtml(fullMessage), "")[ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_34 $$ UIUtil.invokeLaterIfNeeded(new Runnable() [ CD ]
Line_40 $$ if (toolWindowManager.canShowNotification(toolWindowId)) -->Line_41 $$ toolWindowManager.notifyByBalloon(toolWindowId, MessageType.ERROR, fullMessage, null, finalListener)[ CD ]
Line_45 $$ NotificationListener notificationListener = finalListener == null ? null : new NotificationListener() -->Line_47 $$ finalListener.hyperlinkUpdate(event)[ CD ]
Line_34 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_50 $$ ourNotificationGroup.createNotification(title, finalDescription, NotificationType.ERROR, notificationListener).notify(project)[ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_12 $$ HyperlinkListener listener = null[ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_6 $$ LOG.debug(e)[ FD ]
Line_3 $$ if (e instanceof RunCanceledByUserException) -->Line_4 $$ return[ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_26 $$ if (ApplicationManager.getApplication().isUnitTestMode()) [ CD ]
Line_45 $$ NotificationListener notificationListener = finalListener == null ? null : new NotificationListener() -->Line_47 $$ finalListener.hyperlinkUpdate(event)[ FD ]
Line_12 $$ HyperlinkListener listener = null-->Line_17 $$ listener = new HyperlinkListener() [ FD ]
Line_39 $$ ToolWindowManager toolWindowManager = ToolWindowManager.getInstance(project)-->Line_41 $$ toolWindowManager.notifyByBalloon(toolWindowId, MessageType.ERROR, fullMessage, null, finalListener)[ FD ]
Line_10 $$ description = "Unknown error"-->Line_13 $$ if ((description.contains("87") || description.contains("111") || description.contains("206")) && e instanceof ProcessNotCreatedException && !PropertiesComponent.getInstance(project).isTrueValue("dynamic.classpath")) [ FD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_3 $$ if (e instanceof RunCanceledByUserException) [ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_39 $$ ToolWindowManager toolWindowManager = ToolWindowManager.getInstance(project)[ FD ]
Line_13 $$ if ((description.contains("87") || description.contains("111") || description.contains("206")) && e instanceof ProcessNotCreatedException && !PropertiesComponent.getInstance(project).isTrueValue("dynamic.classpath")) -->Line_14 $$ final String commandLineString = ((ProcessNotCreatedException) e).getCommandLine().getCommandLineString()[ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_13 $$ if ((description.contains("87") || description.contains("111") || description.contains("206")) && e instanceof ProcessNotCreatedException && !PropertiesComponent.getInstance(project).isTrueValue("dynamic.classpath")) [ FD ]
Line_10 $$ description = "Unknown error"-->Line_16 $$ description = "Command line is too long. In order to reduce its length classpath file can be used.<br>" + "Would you like to enable classpath file mode for all run configurations of your project?<br>" + "<a href=\"\">Enable</a>"[ FD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_41 $$ toolWindowManager.notifyByBalloon(toolWindowId, MessageType.ERROR, fullMessage, null, finalListener)[ FD ]
Line_13 $$ if ((description.contains("87") || description.contains("111") || description.contains("206")) && e instanceof ProcessNotCreatedException && !PropertiesComponent.getInstance(project).isTrueValue("dynamic.classpath")) -->Line_15 $$ if (commandLineString.length() > 1024 * 32) [ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_8 $$ if (description == null) [ CD ]
Line_7 $$ String description = e.getMessage()-->Line_16 $$ description = "Command line is too long. In order to reduce its length classpath file can be used.<br>" + "Would you like to enable classpath file mode for all run configurations of your project?<br>" + "<a href=\"\">Enable</a>"[ FD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_24 $$ final String title = ExecutionBundle.message("error.running.configuration.message", taskName)[ FD ]
Line_7 $$ String description = e.getMessage()-->Line_13 $$ if ((description.contains("87") || description.contains("111") || description.contains("206")) && e instanceof ProcessNotCreatedException && !PropertiesComponent.getInstance(project).isTrueValue("dynamic.classpath")) [ FD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_7 $$ String description = e.getMessage()[ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_19 $$ PropertiesComponent.getInstance(project).setValue("dynamic.classpath", "true")[ FD ]
Line_34 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_40 $$ if (toolWindowManager.canShowNotification(toolWindowId)) [ CD ]
Line_15 $$ if (commandLineString.length() > 1024 * 32) -->Line_17 $$ listener = new HyperlinkListener() [ CD ]
Line_14 $$ final String commandLineString = ((ProcessNotCreatedException) e).getCommandLine().getCommandLineString()-->Line_15 $$ if (commandLineString.length() > 1024 * 32) [ FD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_27 $$ LOG.error(fullMessage, e)[ FD ]
Line_34 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_36 $$ if (project.isDisposed()) [ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_29 $$ if (listener == null && e instanceof HyperlinkListener) [ CD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_36 $$ if (project.isDisposed()) [ FD ]
Line_15 $$ if (commandLineString.length() > 1024 * 32) -->Line_16 $$ description = "Command line is too long. In order to reduce its length classpath file can be used.<br>" + "Would you like to enable classpath file mode for all run configurations of your project?<br>" + "<a href=\"\">Enable</a>"[ CD ]
Line_39 $$ ToolWindowManager toolWindowManager = ToolWindowManager.getInstance(project)-->Line_40 $$ if (toolWindowManager.canShowNotification(toolWindowId)) [ FD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_3 $$ if (e instanceof RunCanceledByUserException) [ FD ]
Line_2 $$ public static void handleExecutionError(@NotNull final Project project, @NotNull final String toolWindowId, @NotNull String taskName, @NotNull ExecutionException e) -->Line_43 $$ Messages.showErrorDialog(project, UIUtil.toHtml(fullMessage), "")[ FD ]
