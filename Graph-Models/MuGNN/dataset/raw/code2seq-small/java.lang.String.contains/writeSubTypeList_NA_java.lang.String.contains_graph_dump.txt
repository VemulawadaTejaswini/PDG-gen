Line_2 $$ public void writeSubTypeList() throws Exception -->Line_15 $$ this.converter.writeInternal(beans, typeReference.getType(), outputMessage)[ CD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_10 $$ bar.setString("Bar")[ CD ]
Line_5 $$ MyBean foo = new MyBean()-->Line_6 $$ foo.setString("Foo")[ FD ]
Line_9 $$ MyBean bar = new MyBean()-->Line_10 $$ bar.setString("Bar")[ FD ]
Line_4 $$ List<MyBean> beans = new ArrayList<MyBean>()-->Line_15 $$ this.converter.writeInternal(beans, typeReference.getType(), outputMessage)[ FD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_17 $$ assertTrue(result.contains("\"string\":\"Foo\""))[ CD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_3 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()[ CD ]
Line_13 $$ ParameterizedTypeReference<List<MyInterface>> typeReference = new ParameterizedTypeReference<List<MyInterface>>() -->Line_15 $$ this.converter.writeInternal(beans, typeReference.getType(), outputMessage)[ FD ]
Line_16 $$ String result = outputMessage.getBodyAsString(Charset.forName("UTF-8"))-->Line_18 $$ assertTrue(result.contains("\"number\":42"))[ FD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_20 $$ assertTrue(result.contains("\"number\":123"))[ CD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_18 $$ assertTrue(result.contains("\"number\":42"))[ CD ]
Line_16 $$ String result = outputMessage.getBodyAsString(Charset.forName("UTF-8"))-->Line_20 $$ assertTrue(result.contains("\"number\":123"))[ FD ]
Line_3 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_15 $$ this.converter.writeInternal(beans, typeReference.getType(), outputMessage)[ FD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_5 $$ MyBean foo = new MyBean()[ CD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_12 $$ beans.add(bar)[ CD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_9 $$ MyBean bar = new MyBean()[ CD ]
Line_5 $$ MyBean foo = new MyBean()-->Line_7 $$ foo.setNumber(42)[ FD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_8 $$ beans.add(foo)[ CD ]
Line_9 $$ MyBean bar = new MyBean()-->Line_11 $$ bar.setNumber(123)[ FD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_13 $$ ParameterizedTypeReference<List<MyInterface>> typeReference = new ParameterizedTypeReference<List<MyInterface>>() [ CD ]
Line_16 $$ String result = outputMessage.getBodyAsString(Charset.forName("UTF-8"))-->Line_19 $$ assertTrue(result.contains("\"string\":\"Bar\""))[ FD ]
Line_16 $$ String result = outputMessage.getBodyAsString(Charset.forName("UTF-8"))-->Line_17 $$ assertTrue(result.contains("\"string\":\"Foo\""))[ FD ]
Line_9 $$ MyBean bar = new MyBean()-->Line_12 $$ beans.add(bar)[ FD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_11 $$ bar.setNumber(123)[ CD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_4 $$ List<MyBean> beans = new ArrayList<MyBean>()[ CD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_19 $$ assertTrue(result.contains("\"string\":\"Bar\""))[ CD ]
Line_3 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_16 $$ String result = outputMessage.getBodyAsString(Charset.forName("UTF-8"))[ FD ]
Line_5 $$ MyBean foo = new MyBean()-->Line_8 $$ beans.add(foo)[ FD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_7 $$ foo.setNumber(42)[ CD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_16 $$ String result = outputMessage.getBodyAsString(Charset.forName("UTF-8"))[ CD ]
Line_2 $$ public void writeSubTypeList() throws Exception -->Line_6 $$ foo.setString("Foo")[ CD ]
Line_4 $$ List<MyBean> beans = new ArrayList<MyBean>()-->Line_8 $$ beans.add(foo)[ FD ]
Line_4 $$ List<MyBean> beans = new ArrayList<MyBean>()-->Line_12 $$ beans.add(bar)[ FD ]
