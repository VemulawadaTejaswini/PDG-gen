Line_21 $$ for (int i = 0; i < length; i++) -->Line_23 $$ if (c == '_' || c == '.') [ CD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_29 $$ registerErrorAtOffset(expression, i - digit, digit)[ FD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_9 $$ if (text.startsWith("0") && !text.startsWith("0.")) [ CD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_20 $$ final int length = index > 0 ? index : text.length()[ CD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_12 $$ if (!text.contains("_")) [ CD ]
Line_22 $$ final char c = text.charAt(i)-->Line_36 $$ if (Character.isDigit(c)) [ FD ]
Line_17 $$ boolean dot = false-->Line_34 $$ dot = true[ FD ]
Line_24 $$ if (underscore) -->Line_25 $$ return[ CD ]
Line_36 $$ if (Character.isDigit(c)) -->Line_37 $$ underscore = false[ CD ]
Line_34 $$ dot = true-->Line_43 $$ if (dot ? digit > 3 : digit != 3) [ FD ]
Line_22 $$ final char c = text.charAt(i)-->Line_33 $$ if (c == '.') [ FD ]
Line_27 $$ underscore = true-->Line_37 $$ underscore = false[ FD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_16 $$ boolean group = false[ CD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_8 $$ final String text = expression.getText()[ CD ]
Line_21 $$ for (int i = 0; i < length; i++) -->Line_22 $$ final char c = text.charAt(i)[ FD ]
Line_15 $$ boolean underscore = false-->Line_37 $$ underscore = false[ FD ]
Line_21 $$ for (int i = 0; i < length; i++) -->Line_22 $$ final char c = text.charAt(i)[ CD ]
Line_9 $$ if (text.startsWith("0") && !text.startsWith("0.")) -->Line_10 $$ return[ CD ]
Line_23 $$ if (c == '_' || c == '.') -->Line_27 $$ underscore = true[ CD ]
Line_20 $$ final int length = index > 0 ? index : text.length()-->Line_21 $$ for (int i = 0; i < length; i++) [ FD ]
Line_17 $$ boolean dot = false-->Line_43 $$ if (dot ? digit > 3 : digit != 3) [ FD ]
Line_32 $$ digit = 0-->Line_29 $$ registerErrorAtOffset(expression, i - digit, digit)[ FD ]
Line_18 $$ int digit = 0-->Line_29 $$ registerErrorAtOffset(expression, i - digit, digit)[ FD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_44 $$ registerErrorAtOffset(expression, length - digit, digit)[ FD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_15 $$ boolean underscore = false[ CD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_43 $$ if (dot ? digit > 3 : digit != 3) [ CD ]
Line_23 $$ if (c == '_' || c == '.') -->Line_36 $$ if (Character.isDigit(c)) [ CD ]
Line_16 $$ boolean group = false-->Line_31 $$ group = true[ FD ]
Line_43 $$ if (dot ? digit > 3 : digit != 3) -->Line_44 $$ registerErrorAtOffset(expression, length - digit, digit)[ CD ]
Line_23 $$ if (c == '_' || c == '.') -->Line_32 $$ digit = 0[ CD ]
Line_32 $$ digit = 0-->Line_38 $$ digit++[ FD ]
Line_28 $$ if (digit != 3 && group || digit > 3) -->Line_29 $$ registerErrorAtOffset(expression, i - digit, digit)[ CD ]
Line_8 $$ final String text = expression.getText()-->Line_20 $$ final int length = index > 0 ? index : text.length()[ FD ]
Line_23 $$ if (c == '_' || c == '.') -->Line_24 $$ if (underscore) [ CD ]
Line_18 $$ int digit = 0-->Line_38 $$ digit++[ FD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_4 $$ final PsiType type = expression.getType()[ FD ]
Line_4 $$ final PsiType type = expression.getType()-->Line_5 $$ if (!PsiType.SHORT.equals(type) && !PsiType.INT.equals(type) && !PsiType.LONG.equals(type) && !PsiType.FLOAT.equals(type) && !PsiType.DOUBLE.equals(type)) [ FD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_5 $$ if (!PsiType.SHORT.equals(type) && !PsiType.INT.equals(type) && !PsiType.LONG.equals(type) && !PsiType.FLOAT.equals(type) && !PsiType.DOUBLE.equals(type)) [ CD ]
Line_33 $$ if (c == '.') -->Line_34 $$ dot = true[ CD ]
Line_36 $$ if (Character.isDigit(c)) -->Line_38 $$ digit++[ CD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_8 $$ final String text = expression.getText()[ FD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_3 $$ super.visitLiteralExpression(expression)[ CD ]
Line_15 $$ boolean underscore = false-->Line_27 $$ underscore = true[ FD ]
Line_8 $$ final String text = expression.getText()-->Line_9 $$ if (text.startsWith("0") && !text.startsWith("0.")) [ FD ]
Line_36 $$ if (Character.isDigit(c)) -->Line_40 $$ return[ CD ]
Line_23 $$ if (c == '_' || c == '.') -->Line_28 $$ if (digit != 3 && group || digit > 3) [ CD ]
Line_8 $$ final String text = expression.getText()-->Line_12 $$ if (!text.contains("_")) [ FD ]
Line_32 $$ digit = 0-->Line_44 $$ registerErrorAtOffset(expression, length - digit, digit)[ FD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_21 $$ for (int i = 0; i < length; i++) [ CD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_4 $$ final PsiType type = expression.getType()[ CD ]
Line_18 $$ int digit = 0-->Line_44 $$ registerErrorAtOffset(expression, length - digit, digit)[ FD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_18 $$ int digit = 0[ CD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_19 $$ final int index = StringUtil.indexOfAny(text, "fledFLED")[ CD ]
Line_18 $$ int digit = 0-->Line_32 $$ digit = 0[ FD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_17 $$ boolean dot = false[ CD ]
Line_8 $$ final String text = expression.getText()-->Line_19 $$ final int index = StringUtil.indexOfAny(text, "fledFLED")[ FD ]
Line_23 $$ if (c == '_' || c == '.') -->Line_31 $$ group = true[ CD ]
Line_12 $$ if (!text.contains("_")) -->Line_13 $$ return[ CD ]
Line_8 $$ final String text = expression.getText()-->Line_22 $$ final char c = text.charAt(i)[ FD ]
Line_5 $$ if (!PsiType.SHORT.equals(type) && !PsiType.INT.equals(type) && !PsiType.LONG.equals(type) && !PsiType.FLOAT.equals(type) && !PsiType.DOUBLE.equals(type)) -->Line_6 $$ return[ CD ]
Line_23 $$ if (c == '_' || c == '.') -->Line_33 $$ if (c == '.') [ CD ]
Line_2 $$ public void visitLiteralExpression(PsiLiteralExpression expression) -->Line_3 $$ super.visitLiteralExpression(expression)[ FD ]
