Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_12 $$ result.REPOSITORY = rootString[ FD ]
Line_4 $$ if (rootString.isEmpty()) -->Line_10 $$ if (!StringUtil.startsWithChar(rootString, ':')) [ CD ]
Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_17 $$ result.REPOSITORY = rootString.substring(LOCAL.length())[ FD ]
Line_27 $$ if (suffix.contains("@") || suffix.contains(":")) -->Line_28 $$ final Matcher matcher = ourPattern.matcher(suffix)[ CD ]
Line_20 $$ final String suffix = result.extractMethod(rootString, check)-->Line_27 $$ if (suffix.contains("@") || suffix.contains(":")) [ FD ]
Line_29 $$ if (matcher.matches()) -->Line_30 $$ extractUserNameAndPassword(matcher, result)[ CD ]
Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_44 $$ return result[ CD ]
Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_4 $$ if (rootString.isEmpty()) [ CD ]
Line_15 $$ if (rootString.startsWith(LOCAL)) -->Line_18 $$ return result[ CD ]
Line_20 $$ final String suffix = result.extractMethod(rootString, check)-->Line_41 $$ result.REPOSITORY = suffix[ FD ]
Line_25 $$ if (result.HOST != null && !result.HOST.isEmpty() && result.USER_NAME != null && !result.USER_NAME.isEmpty()) -->Line_27 $$ if (suffix.contains("@") || suffix.contains(":")) [ CD ]
Line_28 $$ final Matcher matcher = ourPattern.matcher(suffix)-->Line_31 $$ extractHostAndPort(matcher, result)[ FD ]
Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_21 $$ if (CvsMethod.LOCAL_METHOD.equals(result.METHOD)) [ CD ]
Line_25 $$ if (result.HOST != null && !result.HOST.isEmpty() && result.USER_NAME != null && !result.USER_NAME.isEmpty()) -->Line_26 $$ result.REPOSITORY = suffix.trim()[ CD ]
Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_3 $$ final CvsRootParser result = new CvsRootParser()[ CD ]
Line_28 $$ final Matcher matcher = ourPattern.matcher(suffix)-->Line_29 $$ if (matcher.matches()) [ FD ]
Line_21 $$ if (CvsMethod.LOCAL_METHOD.equals(result.METHOD)) -->Line_25 $$ if (result.HOST != null && !result.HOST.isEmpty() && result.USER_NAME != null && !result.USER_NAME.isEmpty()) [ CD ]
Line_29 $$ if (matcher.matches()) -->Line_32 $$ extractRepository(matcher, result)[ CD ]
Line_34 $$ if (check) -->Line_37 $$ result.REPOSITORY = suffix[ CD ]
Line_3 $$ final CvsRootParser result = new CvsRootParser()-->Line_31 $$ extractHostAndPort(matcher, result)[ FD ]
Line_4 $$ if (rootString.isEmpty()) -->Line_8 $$ result.METHOD = CvsMethod.PSERVER_METHOD[ CD ]
Line_29 $$ if (matcher.matches()) -->Line_34 $$ if (check) [ CD ]
Line_29 $$ if (matcher.matches()) -->Line_31 $$ extractHostAndPort(matcher, result)[ CD ]
Line_4 $$ if (rootString.isEmpty()) -->Line_5 $$ if (check) [ CD ]
Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_15 $$ if (rootString.startsWith(LOCAL)) [ CD ]
Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_20 $$ final String suffix = result.extractMethod(rootString, check)[ FD ]
Line_10 $$ if (!StringUtil.startsWithChar(rootString, ':')) -->Line_11 $$ result.METHOD = CvsMethod.LOCAL_METHOD[ CD ]
Line_3 $$ final CvsRootParser result = new CvsRootParser()-->Line_30 $$ extractUserNameAndPassword(matcher, result)[ FD ]
Line_20 $$ final String suffix = result.extractMethod(rootString, check)-->Line_37 $$ result.REPOSITORY = suffix[ FD ]
Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_35 $$ throw new CvsRootException(CvsBundle.message("error.message.wrong.remote.repository", rootString))[ FD ]
Line_3 $$ final CvsRootParser result = new CvsRootParser()-->Line_20 $$ final String suffix = result.extractMethod(rootString, check)[ FD ]
Line_15 $$ if (rootString.startsWith(LOCAL)) -->Line_17 $$ result.REPOSITORY = rootString.substring(LOCAL.length())[ CD ]
Line_21 $$ if (CvsMethod.LOCAL_METHOD.equals(result.METHOD)) -->Line_23 $$ skipTrailingRepositorySlash(result)[ CD ]
Line_20 $$ final String suffix = result.extractMethod(rootString, check)-->Line_22 $$ result.REPOSITORY = suffix[ FD ]
Line_15 $$ if (rootString.startsWith(LOCAL)) -->Line_16 $$ result.METHOD = CvsMethod.LOCAL_METHOD[ CD ]
Line_28 $$ final Matcher matcher = ourPattern.matcher(suffix)-->Line_30 $$ extractUserNameAndPassword(matcher, result)[ FD ]
Line_4 $$ if (rootString.isEmpty()) -->Line_9 $$ return result[ CD ]
Line_27 $$ if (suffix.contains("@") || suffix.contains(":")) -->Line_29 $$ if (matcher.matches()) [ CD ]
Line_3 $$ final CvsRootParser result = new CvsRootParser()-->Line_23 $$ skipTrailingRepositorySlash(result)[ FD ]
Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_20 $$ final String suffix = result.extractMethod(rootString, check)[ CD ]
Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_15 $$ if (rootString.startsWith(LOCAL)) [ FD ]
Line_10 $$ if (!StringUtil.startsWithChar(rootString, ':')) -->Line_12 $$ result.REPOSITORY = rootString[ CD ]
Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_4 $$ if (rootString.isEmpty()) [ FD ]
Line_3 $$ final CvsRootParser result = new CvsRootParser()-->Line_32 $$ extractRepository(matcher, result)[ FD ]
Line_28 $$ final Matcher matcher = ourPattern.matcher(suffix)-->Line_32 $$ extractRepository(matcher, result)[ FD ]
Line_2 $$ public static CvsRootParser valueOf(String rootString, boolean check) -->Line_10 $$ if (!StringUtil.startsWithChar(rootString, ':')) [ FD ]
Line_21 $$ if (CvsMethod.LOCAL_METHOD.equals(result.METHOD)) -->Line_22 $$ result.REPOSITORY = suffix[ CD ]
Line_10 $$ if (!StringUtil.startsWithChar(rootString, ':')) -->Line_13 $$ return result[ CD ]
Line_27 $$ if (suffix.contains("@") || suffix.contains(":")) -->Line_41 $$ result.REPOSITORY = suffix[ CD ]
Line_20 $$ final String suffix = result.extractMethod(rootString, check)-->Line_28 $$ final Matcher matcher = ourPattern.matcher(suffix)[ FD ]
Line_20 $$ final String suffix = result.extractMethod(rootString, check)-->Line_26 $$ result.REPOSITORY = suffix.trim()[ FD ]
