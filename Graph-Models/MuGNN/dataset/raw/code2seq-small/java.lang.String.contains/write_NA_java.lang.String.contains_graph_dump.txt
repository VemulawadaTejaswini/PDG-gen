Line_3 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_13 $$ String result = outputMessage.getBodyAsString(utf8)[ FD ]
Line_3 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_11 $$ converter.write(body, null, outputMessage)[ FD ]
Line_4 $$ MyBean body = new MyBean()-->Line_9 $$ body.setBool(true)[ FD ]
Line_13 $$ String result = outputMessage.getBodyAsString(utf8)-->Line_16 $$ assertTrue(result.contains("fraction\":42.0"))[ FD ]
Line_13 $$ String result = outputMessage.getBodyAsString(utf8)-->Line_17 $$ assertTrue(result.contains("\"array\":[\"Foo\",\"Bar\"]"))[ FD ]
Line_3 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_20 $$ assertEquals("Invalid content-type", new MediaType("application", "json", utf8), outputMessage.getHeaders().getContentType())[ FD ]
Line_2 $$ public void write() throws IOException -->Line_4 $$ MyBean body = new MyBean()[ CD ]
Line_13 $$ String result = outputMessage.getBodyAsString(utf8)-->Line_18 $$ assertTrue(result.contains("\"bool\":true"))[ FD ]
Line_4 $$ MyBean body = new MyBean()-->Line_5 $$ body.setString("Foo")[ FD ]
Line_4 $$ MyBean body = new MyBean()-->Line_8 $$ body.setArray(new String[] [ FD ]
Line_13 $$ String result = outputMessage.getBodyAsString(utf8)-->Line_14 $$ assertTrue(result.contains("\"string\":\"Foo\""))[ FD ]
Line_2 $$ public void write() throws IOException -->Line_6 $$ body.setNumber(42)[ CD ]
Line_13 $$ String result = outputMessage.getBodyAsString(utf8)-->Line_15 $$ assertTrue(result.contains("\"number\":42"))[ FD ]
Line_4 $$ MyBean body = new MyBean()-->Line_10 $$ body.setBytes(new byte[] [ FD ]
Line_2 $$ public void write() throws IOException -->Line_11 $$ converter.write(body, null, outputMessage)[ CD ]
Line_2 $$ public void write() throws IOException -->Line_13 $$ String result = outputMessage.getBodyAsString(utf8)[ CD ]
Line_2 $$ public void write() throws IOException -->Line_5 $$ body.setString("Foo")[ CD ]
Line_2 $$ public void write() throws IOException -->Line_9 $$ body.setBool(true)[ CD ]
Line_2 $$ public void write() throws IOException -->Line_8 $$ body.setArray(new String[] [ CD ]
Line_2 $$ public void write() throws IOException -->Line_19 $$ assertTrue(result.contains("\"bytes\":\"AQI=\""))[ CD ]
Line_2 $$ public void write() throws IOException -->Line_12 $$ Charset utf8 = Charset.forName("UTF-8")[ CD ]
Line_4 $$ MyBean body = new MyBean()-->Line_11 $$ converter.write(body, null, outputMessage)[ FD ]
Line_2 $$ public void write() throws IOException -->Line_10 $$ body.setBytes(new byte[] [ CD ]
Line_2 $$ public void write() throws IOException -->Line_15 $$ assertTrue(result.contains("\"number\":42"))[ CD ]
Line_2 $$ public void write() throws IOException -->Line_14 $$ assertTrue(result.contains("\"string\":\"Foo\""))[ CD ]
Line_4 $$ MyBean body = new MyBean()-->Line_7 $$ body.setFraction(42F)[ FD ]
Line_4 $$ MyBean body = new MyBean()-->Line_6 $$ body.setNumber(42)[ FD ]
Line_12 $$ Charset utf8 = Charset.forName("UTF-8")-->Line_13 $$ String result = outputMessage.getBodyAsString(utf8)[ FD ]
Line_2 $$ public void write() throws IOException -->Line_7 $$ body.setFraction(42F)[ CD ]
Line_2 $$ public void write() throws IOException -->Line_18 $$ assertTrue(result.contains("\"bool\":true"))[ CD ]
Line_2 $$ public void write() throws IOException -->Line_16 $$ assertTrue(result.contains("fraction\":42.0"))[ CD ]
Line_2 $$ public void write() throws IOException -->Line_20 $$ assertEquals("Invalid content-type", new MediaType("application", "json", utf8), outputMessage.getHeaders().getContentType())[ CD ]
Line_2 $$ public void write() throws IOException -->Line_17 $$ assertTrue(result.contains("\"array\":[\"Foo\",\"Bar\"]"))[ CD ]
Line_13 $$ String result = outputMessage.getBodyAsString(utf8)-->Line_19 $$ assertTrue(result.contains("\"bytes\":\"AQI=\""))[ FD ]
Line_2 $$ public void write() throws IOException -->Line_3 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()[ CD ]
