Line_6 $$ if (vFile != null) -->Line_7 $$ ProjectFileIndex index = ProjectFileIndex.SERVICE.getInstance(myProject)[ CD ]
Line_5 $$ VirtualFile vFile = LocalFileSystem.getInstance().findFileByPathIfCached(path)-->Line_9 $$ PsiFileSystemItem fileOrDir = vFile.isDirectory() ? PsiManager.getInstance(myProject).findDirectory(vFile) : PsiManager.getInstance(myProject).findFile(vFile)[ FD ]
Line_4 $$ String path = FileUtil.toSystemIndependentName(ChooseByNamePopup.getTransformedPattern(pattern, myModel))-->Line_5 $$ VirtualFile vFile = LocalFileSystem.getInstance().findFileByPathIfCached(path)[ FD ]
Line_5 $$ VirtualFile vFile = LocalFileSystem.getInstance().findFileByPathIfCached(path)-->Line_6 $$ if (vFile != null) [ FD ]
Line_2 $$ public boolean filterElements(@NotNull ChooseByNameBase base, @NotNull String pattern, boolean everywhere, @NotNull ProgressIndicator indicator, @NotNull Processor<Object> consumer) -->Line_3 $$ if (pattern.contains("/") || pattern.contains("\\")) [ FD ]
Line_3 $$ if (pattern.contains("/") || pattern.contains("\\")) -->Line_6 $$ if (vFile != null) [ CD ]
Line_2 $$ public boolean filterElements(@NotNull ChooseByNameBase base, @NotNull String pattern, boolean everywhere, @NotNull ProgressIndicator indicator, @NotNull Processor<Object> consumer) -->Line_16 $$ return super.filterElements(base, pattern, everywhere, indicator, consumer)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull ChooseByNameBase base, @NotNull String pattern, boolean everywhere, @NotNull ProgressIndicator indicator, @NotNull Processor<Object> consumer) -->Line_10 $$ if (fileOrDir != null && !consumer.process(fileOrDir)) [ FD ]
Line_6 $$ if (vFile != null) -->Line_8 $$ if (index.isInContent(vFile) || index.isInLibraryClasses(vFile) || index.isInLibrarySource(vFile)) [ CD ]
Line_8 $$ if (index.isInContent(vFile) || index.isInLibraryClasses(vFile) || index.isInLibrarySource(vFile)) -->Line_10 $$ if (fileOrDir != null && !consumer.process(fileOrDir)) [ CD ]
Line_5 $$ VirtualFile vFile = LocalFileSystem.getInstance().findFileByPathIfCached(path)-->Line_8 $$ if (index.isInContent(vFile) || index.isInLibraryClasses(vFile) || index.isInLibrarySource(vFile)) [ FD ]
Line_2 $$ public boolean filterElements(@NotNull ChooseByNameBase base, @NotNull String pattern, boolean everywhere, @NotNull ProgressIndicator indicator, @NotNull Processor<Object> consumer) -->Line_4 $$ String path = FileUtil.toSystemIndependentName(ChooseByNamePopup.getTransformedPattern(pattern, myModel))[ FD ]
Line_7 $$ ProjectFileIndex index = ProjectFileIndex.SERVICE.getInstance(myProject)-->Line_8 $$ if (index.isInContent(vFile) || index.isInLibraryClasses(vFile) || index.isInLibrarySource(vFile)) [ FD ]
Line_2 $$ public boolean filterElements(@NotNull ChooseByNameBase base, @NotNull String pattern, boolean everywhere, @NotNull ProgressIndicator indicator, @NotNull Processor<Object> consumer) -->Line_3 $$ if (pattern.contains("/") || pattern.contains("\\")) [ CD ]
Line_3 $$ if (pattern.contains("/") || pattern.contains("\\")) -->Line_4 $$ String path = FileUtil.toSystemIndependentName(ChooseByNamePopup.getTransformedPattern(pattern, myModel))[ CD ]
Line_10 $$ if (fileOrDir != null && !consumer.process(fileOrDir)) -->Line_11 $$ return false[ CD ]
Line_2 $$ public boolean filterElements(@NotNull ChooseByNameBase base, @NotNull String pattern, boolean everywhere, @NotNull ProgressIndicator indicator, @NotNull Processor<Object> consumer) -->Line_16 $$ return super.filterElements(base, pattern, everywhere, indicator, consumer)[ CD ]
Line_3 $$ if (pattern.contains("/") || pattern.contains("\\")) -->Line_5 $$ VirtualFile vFile = LocalFileSystem.getInstance().findFileByPathIfCached(path)[ CD ]
Line_9 $$ PsiFileSystemItem fileOrDir = vFile.isDirectory() ? PsiManager.getInstance(myProject).findDirectory(vFile) : PsiManager.getInstance(myProject).findFile(vFile)-->Line_10 $$ if (fileOrDir != null && !consumer.process(fileOrDir)) [ FD ]
Line_8 $$ if (index.isInContent(vFile) || index.isInLibraryClasses(vFile) || index.isInLibrarySource(vFile)) -->Line_9 $$ PsiFileSystemItem fileOrDir = vFile.isDirectory() ? PsiManager.getInstance(myProject).findDirectory(vFile) : PsiManager.getInstance(myProject).findFile(vFile)[ CD ]
