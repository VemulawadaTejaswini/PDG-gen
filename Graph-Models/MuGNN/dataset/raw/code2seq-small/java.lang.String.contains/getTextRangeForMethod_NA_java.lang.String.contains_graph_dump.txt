Line_6 $$ if (method.contains("<init>")) -->Line_7 $$ methods = psiClass.getConstructors()[ CD ]
Line_13 $$ if (methods.length > 0) -->Line_14 $$ if (methods.length == 1) [ CD ]
Line_4 $$ PsiClass psiClass = worker.getPsiClass()-->Line_11 $$ methods = psiClass.findMethodsByName(method, false)[ FD ]
Line_11 $$ methods = psiClass.findMethodsByName(method, false)-->Line_19 $$ final List<PsiMethod> toIterate = selectedMethods == null ? Arrays.asList(methods) : selectedMethods[ FD ]
Line_2 $$ private static List<TextRange> getTextRangeForMethod(final ExceptionWorker worker, Trinity<PsiClass, PsiFile, String> previousLineResult) -->Line_18 $$ List<PsiMethod> selectedMethods = selectMethod(methods, previousLineResult)[ FD ]
Line_3 $$ String method = worker.getMethod()-->Line_8 $$ if (method.contains("$")) [ FD ]
Line_2 $$ private static List<TextRange> getTextRangeForMethod(final ExceptionWorker worker, Trinity<PsiClass, PsiFile, String> previousLineResult) -->Line_4 $$ PsiClass psiClass = worker.getPsiClass()[ FD ]
Line_7 $$ methods = psiClass.getConstructors()-->Line_11 $$ methods = psiClass.findMethodsByName(method, false)[ FD ]
Line_21 $$ for (PsiMethod psiMethod : toIterate) -->Line_22 $$ result.add(psiMethod.getTextRange())[ FD ]
Line_5 $$ PsiMethod[] methods-->Line_7 $$ methods = psiClass.getConstructors()[ FD ]
Line_2 $$ private static List<TextRange> getTextRangeForMethod(final ExceptionWorker worker, Trinity<PsiClass, PsiFile, String> previousLineResult) -->Line_3 $$ String method = worker.getMethod()[ CD ]
Line_6 $$ if (method.contains("<init>")) -->Line_8 $$ if (method.contains("$")) [ CD ]
Line_15 $$ final TextRange range = methods[0].getTextRange()-->Line_16 $$ return Collections.singletonList(range)[ FD ]
Line_7 $$ methods = psiClass.getConstructors()-->Line_19 $$ final List<PsiMethod> toIterate = selectedMethods == null ? Arrays.asList(methods) : selectedMethods[ FD ]
Line_8 $$ if (method.contains("$")) -->Line_9 $$ return null[ CD ]
Line_2 $$ private static List<TextRange> getTextRangeForMethod(final ExceptionWorker worker, Trinity<PsiClass, PsiFile, String> previousLineResult) -->Line_27 $$ return null[ CD ]
Line_14 $$ if (methods.length == 1) -->Line_15 $$ final TextRange range = methods[0].getTextRange()[ CD ]
Line_5 $$ PsiMethod[] methods-->Line_11 $$ methods = psiClass.findMethodsByName(method, false)[ FD ]
Line_14 $$ if (methods.length == 1) -->Line_24 $$ return result[ CD ]
Line_2 $$ private static List<TextRange> getTextRangeForMethod(final ExceptionWorker worker, Trinity<PsiClass, PsiFile, String> previousLineResult) -->Line_13 $$ if (methods.length > 0) [ CD ]
Line_14 $$ if (methods.length == 1) -->Line_18 $$ List<PsiMethod> selectedMethods = selectMethod(methods, previousLineResult)[ CD ]
Line_4 $$ PsiClass psiClass = worker.getPsiClass()-->Line_7 $$ methods = psiClass.getConstructors()[ FD ]
Line_5 $$ PsiMethod[] methods-->Line_18 $$ List<PsiMethod> selectedMethods = selectMethod(methods, previousLineResult)[ FD ]
Line_8 $$ if (method.contains("$")) -->Line_11 $$ methods = psiClass.findMethodsByName(method, false)[ CD ]
Line_2 $$ private static List<TextRange> getTextRangeForMethod(final ExceptionWorker worker, Trinity<PsiClass, PsiFile, String> previousLineResult) -->Line_6 $$ if (method.contains("<init>")) [ CD ]
Line_5 $$ PsiMethod[] methods-->Line_19 $$ final List<PsiMethod> toIterate = selectedMethods == null ? Arrays.asList(methods) : selectedMethods[ FD ]
Line_2 $$ private static List<TextRange> getTextRangeForMethod(final ExceptionWorker worker, Trinity<PsiClass, PsiFile, String> previousLineResult) -->Line_3 $$ String method = worker.getMethod()[ FD ]
Line_14 $$ if (methods.length == 1) -->Line_16 $$ return Collections.singletonList(range)[ CD ]
Line_14 $$ if (methods.length == 1) -->Line_19 $$ final List<PsiMethod> toIterate = selectedMethods == null ? Arrays.asList(methods) : selectedMethods[ CD ]
Line_20 $$ final List<TextRange> result = new ArrayList<TextRange>()-->Line_22 $$ result.add(psiMethod.getTextRange())[ FD ]
Line_2 $$ private static List<TextRange> getTextRangeForMethod(final ExceptionWorker worker, Trinity<PsiClass, PsiFile, String> previousLineResult) -->Line_5 $$ PsiMethod[] methods[ CD ]
Line_2 $$ private static List<TextRange> getTextRangeForMethod(final ExceptionWorker worker, Trinity<PsiClass, PsiFile, String> previousLineResult) -->Line_4 $$ PsiClass psiClass = worker.getPsiClass()[ CD ]
Line_7 $$ methods = psiClass.getConstructors()-->Line_18 $$ List<PsiMethod> selectedMethods = selectMethod(methods, previousLineResult)[ FD ]
Line_14 $$ if (methods.length == 1) -->Line_20 $$ final List<TextRange> result = new ArrayList<TextRange>()[ CD ]
Line_3 $$ String method = worker.getMethod()-->Line_11 $$ methods = psiClass.findMethodsByName(method, false)[ FD ]
Line_3 $$ String method = worker.getMethod()-->Line_6 $$ if (method.contains("<init>")) [ FD ]
Line_11 $$ methods = psiClass.findMethodsByName(method, false)-->Line_18 $$ List<PsiMethod> selectedMethods = selectMethod(methods, previousLineResult)[ FD ]
