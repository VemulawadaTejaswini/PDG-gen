Line_2 $$ public void renderAsPdfWithExporterParameters() throws Exception -->Line_9 $$ assertTrue(new String(output).contains("PDF-1.6"))[ CD ]
Line_2 $$ public void renderAsPdfWithExporterParameters() throws Exception -->Line_7 $$ byte[] output = os.toByteArray()[ CD ]
Line_2 $$ public void renderAsPdfWithExporterParameters() throws Exception -->Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void renderAsPdfWithExporterParameters() throws Exception -->Line_6 $$ JasperReportsUtils.renderAsPdf(getReport(), getParameters(), getData(), os, exporterParameters)[ CD ]
Line_4 $$ Map<JRExporterParameter, Object> exporterParameters = new HashMap<JRExporterParameter, Object>()-->Line_6 $$ JasperReportsUtils.renderAsPdf(getReport(), getParameters(), getData(), os, exporterParameters)[ FD ]
Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_6 $$ JasperReportsUtils.renderAsPdf(getReport(), getParameters(), getData(), os, exporterParameters)[ FD ]
Line_7 $$ byte[] output = os.toByteArray()-->Line_8 $$ assertPdfOutputCorrect(output)[ FD ]
Line_2 $$ public void renderAsPdfWithExporterParameters() throws Exception -->Line_5 $$ exporterParameters.put(JRPdfExporterParameter.PDF_VERSION, JRPdfExporterParameter.PDF_VERSION_1_6.toString())[ CD ]
Line_4 $$ Map<JRExporterParameter, Object> exporterParameters = new HashMap<JRExporterParameter, Object>()-->Line_5 $$ exporterParameters.put(JRPdfExporterParameter.PDF_VERSION, JRPdfExporterParameter.PDF_VERSION_1_6.toString())[ FD ]
Line_2 $$ public void renderAsPdfWithExporterParameters() throws Exception -->Line_4 $$ Map<JRExporterParameter, Object> exporterParameters = new HashMap<JRExporterParameter, Object>()[ CD ]
Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_7 $$ byte[] output = os.toByteArray()[ FD ]
Line_2 $$ public void renderAsPdfWithExporterParameters() throws Exception -->Line_8 $$ assertPdfOutputCorrect(output)[ CD ]
