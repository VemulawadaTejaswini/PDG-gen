Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_8 $$ assertEquals("Exit code", 0, exitCode)[ CD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_12 $$ String attemptId = ("attempt" + jobId.substring(3))[ CD ]
Line_9 $$ String line-->Line_15 $$ if (line.contains(attemptId)) [ FD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_3 $$ CLI jc = createJobClient()[ CD ]
Line_10 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(out.toByteArray())))-->Line_13 $$ while ((line = br.readLine()) != null) [ FD ]
Line_13 $$ while ((line = br.readLine()) != null) -->Line_14 $$ LOG.info("line = " + line)[ CD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_6 $$ assertEquals("Exit code", -1, exitCode)[ CD ]
Line_4 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_7 $$ exitCode = runTool(conf, jc, new String[] [ FD ]
Line_3 $$ CLI jc = createJobClient()-->Line_5 $$ int exitCode = runTool(conf, jc, new String[] [ FD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_5 $$ int exitCode = runTool(conf, jc, new String[] [ FD ]
Line_13 $$ while ((line = br.readLine()) != null) -->Line_15 $$ if (line.contains(attemptId)) [ CD ]
Line_4 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_10 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(out.toByteArray())))[ FD ]
Line_5 $$ int exitCode = runTool(conf, jc, new String[] -->Line_8 $$ assertEquals("Exit code", 0, exitCode)[ FD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_12 $$ String attemptId = ("attempt" + jobId.substring(3))[ FD ]
Line_15 $$ if (line.contains(attemptId)) -->Line_16 $$ counter++[ CD ]
Line_12 $$ String attemptId = ("attempt" + jobId.substring(3))-->Line_15 $$ if (line.contains(attemptId)) [ FD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_9 $$ String line[ CD ]
Line_5 $$ int exitCode = runTool(conf, jc, new String[] -->Line_6 $$ assertEquals("Exit code", -1, exitCode)[ FD ]
Line_3 $$ CLI jc = createJobClient()-->Line_7 $$ exitCode = runTool(conf, jc, new String[] [ FD ]
Line_11 $$ int counter = 0-->Line_19 $$ assertEquals(2, counter)[ FD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_13 $$ while ((line = br.readLine()) != null) [ CD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_5 $$ int exitCode = runTool(conf, jc, new String[] [ CD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_7 $$ exitCode = runTool(conf, jc, new String[] [ CD ]
Line_5 $$ int exitCode = runTool(conf, jc, new String[] -->Line_7 $$ exitCode = runTool(conf, jc, new String[] [ FD ]
Line_13 $$ while ((line = br.readLine()) != null) -->Line_15 $$ if (line.contains(attemptId)) [ FD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_10 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(out.toByteArray())))[ CD ]
Line_9 $$ String line-->Line_13 $$ while ((line = br.readLine()) != null) [ FD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_19 $$ assertEquals(2, counter)[ CD ]
Line_4 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_5 $$ int exitCode = runTool(conf, jc, new String[] [ FD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_11 $$ int counter = 0[ CD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_7 $$ exitCode = runTool(conf, jc, new String[] [ FD ]
Line_11 $$ int counter = 0-->Line_16 $$ counter++[ FD ]
Line_2 $$ private void testJobEvents(String jobId, Configuration conf) throws Exception -->Line_4 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()[ CD ]
Line_7 $$ exitCode = runTool(conf, jc, new String[] -->Line_8 $$ assertEquals("Exit code", 0, exitCode)[ FD ]
