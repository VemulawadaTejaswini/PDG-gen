Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_19 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ FD ]
Line_8 $$ AuthenticationToken token = Mockito.mock(AuthenticationToken.class)-->Line_21 $$ Mockito.verify(token).getUserName()[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_38 $$ dt.decodeFromUrlString(tokenStr)[ CD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_18 $$ Mockito.when(response.getWriter()).thenReturn(pwriter)[ FD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_11 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ FD ]
Line_33 $$ Map json = jsonMapper.readValue(responseOutput, Map.class)-->Line_34 $$ json = (Map) json.get(tokenLabel)[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_17 $$ PrintWriter pwriter = new PrintWriter(writer)[ CD ]
Line_20 $$ if (renewer == null) -->Line_21 $$ Mockito.verify(token).getUserName()[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_13 $$ Mockito.reset(response)[ CD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_26 $$ Mockito.verify(response).setContentType(MediaType.APPLICATION_JSON)[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_27 $$ pwriter.close()[ CD ]
Line_29 $$ String tokenLabel = DelegationTokenAuthenticator.DELEGATION_TOKEN_JSON-->Line_34 $$ json = (Map) json.get(tokenLabel)[ FD ]
Line_3 $$ DelegationTokenAuthenticator.DelegationTokenOperation op = DelegationTokenAuthenticator.DelegationTokenOperation.GETDELEGATIONTOKEN-->Line_6 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString())[ FD ]
Line_20 $$ if (renewer == null) -->Line_23 $$ Mockito.verify(token).getUserName()[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_34 $$ json = (Map) json.get(tokenLabel)[ CD ]
Line_8 $$ AuthenticationToken token = Mockito.mock(AuthenticationToken.class)-->Line_9 $$ Mockito.when(token.getUserName()).thenReturn("user")[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_39 $$ handler.getTokenManager().verifyToken(dt)[ CD ]
Line_17 $$ PrintWriter pwriter = new PrintWriter(writer)-->Line_27 $$ pwriter.close()[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_20 $$ if (renewer == null) [ FD ]
Line_37 $$ Token<DelegationTokenIdentifier> dt = new Token<DelegationTokenIdentifier>()-->Line_38 $$ dt.decodeFromUrlString(tokenStr)[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_3 $$ DelegationTokenAuthenticator.DelegationTokenOperation op = DelegationTokenAuthenticator.DelegationTokenOperation.GETDELEGATIONTOKEN[ CD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_13 $$ Mockito.reset(response)[ FD ]
Line_3 $$ DelegationTokenAuthenticator.DelegationTokenOperation op = DelegationTokenAuthenticator.DelegationTokenOperation.GETDELEGATIONTOKEN-->Line_12 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString() + "&" + DelegationTokenAuthenticator.RENEWER_PARAM + "=" + renewer)[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_31 $$ Assert.assertTrue(responseOutput.contains(DelegationTokenAuthenticator.DELEGATION_TOKEN_URL_STRING_JSON))[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_10 $$ Mockito.when(response.getWriter()).thenReturn(new PrintWriter(new StringWriter()))[ CD ]
Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_6 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString())[ FD ]
Line_28 $$ String responseOutput = writer.toString()-->Line_31 $$ Assert.assertTrue(responseOutput.contains(DelegationTokenAuthenticator.DELEGATION_TOKEN_URL_STRING_JSON))[ FD ]
Line_32 $$ ObjectMapper jsonMapper = new ObjectMapper()-->Line_33 $$ Map json = jsonMapper.readValue(responseOutput, Map.class)[ FD ]
Line_17 $$ PrintWriter pwriter = new PrintWriter(writer)-->Line_18 $$ Mockito.when(response.getWriter()).thenReturn(pwriter)[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_29 $$ String tokenLabel = DelegationTokenAuthenticator.DELEGATION_TOKEN_JSON[ CD ]
Line_36 $$ tokenStr = (String) json.get(DelegationTokenAuthenticator.DELEGATION_TOKEN_URL_STRING_JSON)-->Line_38 $$ dt.decodeFromUrlString(tokenStr)[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_20 $$ if (renewer == null) [ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_15 $$ Mockito.when(token.getUserName()).thenReturn("user")[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_40 $$ Assert.assertEquals(expectedTokenKind, dt.getKind())[ CD ]
Line_28 $$ String responseOutput = writer.toString()-->Line_30 $$ Assert.assertTrue(responseOutput.contains(tokenLabel))[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_33 $$ Map json = jsonMapper.readValue(responseOutput, Map.class)[ CD ]
Line_8 $$ AuthenticationToken token = Mockito.mock(AuthenticationToken.class)-->Line_23 $$ Mockito.verify(token).getUserName()[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_32 $$ ObjectMapper jsonMapper = new ObjectMapper()[ CD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_10 $$ Mockito.when(response.getWriter()).thenReturn(new PrintWriter(new StringWriter()))[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_37 $$ Token<DelegationTokenIdentifier> dt = new Token<DelegationTokenIdentifier>()[ CD ]
Line_8 $$ AuthenticationToken token = Mockito.mock(AuthenticationToken.class)-->Line_19 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ FD ]
Line_37 $$ Token<DelegationTokenIdentifier> dt = new Token<DelegationTokenIdentifier>()-->Line_40 $$ Assert.assertEquals(expectedTokenKind, dt.getKind())[ FD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_19 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ FD ]
Line_33 $$ Map json = jsonMapper.readValue(responseOutput, Map.class)-->Line_36 $$ tokenStr = (String) json.get(DelegationTokenAuthenticator.DELEGATION_TOKEN_URL_STRING_JSON)[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_40 $$ Assert.assertEquals(expectedTokenKind, dt.getKind())[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_30 $$ Assert.assertTrue(responseOutput.contains(tokenLabel))[ CD ]
Line_16 $$ StringWriter writer = new StringWriter()-->Line_28 $$ String responseOutput = writer.toString()[ FD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_25 $$ Mockito.verify(response).setStatus(HttpServletResponse.SC_OK)[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_11 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_26 $$ Mockito.verify(response).setContentType(MediaType.APPLICATION_JSON)[ CD ]
Line_29 $$ String tokenLabel = DelegationTokenAuthenticator.DELEGATION_TOKEN_JSON-->Line_30 $$ Assert.assertTrue(responseOutput.contains(tokenLabel))[ FD ]
Line_8 $$ AuthenticationToken token = Mockito.mock(AuthenticationToken.class)-->Line_11 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ FD ]
Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_7 $$ Mockito.when(request.getMethod()).thenReturn(op.getHttpMethod())[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_18 $$ Mockito.when(response.getWriter()).thenReturn(pwriter)[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_14 $$ Mockito.reset(token)[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_16 $$ StringWriter writer = new StringWriter()[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_9 $$ Mockito.when(token.getUserName()).thenReturn("user")[ CD ]
Line_8 $$ AuthenticationToken token = Mockito.mock(AuthenticationToken.class)-->Line_15 $$ Mockito.when(token.getUserName()).thenReturn("user")[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_8 $$ AuthenticationToken token = Mockito.mock(AuthenticationToken.class)[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_28 $$ String responseOutput = writer.toString()[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_25 $$ Mockito.verify(response).setStatus(HttpServletResponse.SC_OK)[ CD ]
Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_12 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString() + "&" + DelegationTokenAuthenticator.RENEWER_PARAM + "=" + renewer)[ FD ]
Line_37 $$ Token<DelegationTokenIdentifier> dt = new Token<DelegationTokenIdentifier>()-->Line_39 $$ handler.getTokenManager().verifyToken(dt)[ FD ]
Line_35 $$ String tokenStr-->Line_38 $$ dt.decodeFromUrlString(tokenStr)[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_35 $$ String tokenStr[ CD ]
Line_28 $$ String responseOutput = writer.toString()-->Line_33 $$ Map json = jsonMapper.readValue(responseOutput, Map.class)[ FD ]
Line_3 $$ DelegationTokenAuthenticator.DelegationTokenOperation op = DelegationTokenAuthenticator.DelegationTokenOperation.GETDELEGATIONTOKEN-->Line_7 $$ Mockito.when(request.getMethod()).thenReturn(op.getHttpMethod())[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_19 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_7 $$ Mockito.when(request.getMethod()).thenReturn(op.getHttpMethod())[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_12 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString() + "&" + DelegationTokenAuthenticator.RENEWER_PARAM + "=" + renewer)[ CD ]
Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_11 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ FD ]
Line_35 $$ String tokenStr-->Line_36 $$ tokenStr = (String) json.get(DelegationTokenAuthenticator.DELEGATION_TOKEN_URL_STRING_JSON)[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_6 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString())[ CD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)[ CD ]
Line_34 $$ json = (Map) json.get(tokenLabel)-->Line_36 $$ tokenStr = (String) json.get(DelegationTokenAuthenticator.DELEGATION_TOKEN_URL_STRING_JSON)[ FD ]
Line_2 $$ private void testGetToken(String renewer, Text expectedTokenKind) throws Exception -->Line_36 $$ tokenStr = (String) json.get(DelegationTokenAuthenticator.DELEGATION_TOKEN_URL_STRING_JSON)[ CD ]
Line_8 $$ AuthenticationToken token = Mockito.mock(AuthenticationToken.class)-->Line_14 $$ Mockito.reset(token)[ FD ]
