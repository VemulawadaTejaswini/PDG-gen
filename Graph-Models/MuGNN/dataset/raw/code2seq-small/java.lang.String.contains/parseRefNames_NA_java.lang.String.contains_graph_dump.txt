Line_16 $$ List<String> parts = StringUtil.split(item, POINTER)-->Line_17 $$ result.addAll(ContainerUtil.map(parts, new Function<String, String>() [ FD ]
Line_2 $$ private static List<String> parseRefNames(@Nullable final String decoration) -->Line_10 $$ String refs = decoration.substring(startParentheses + 1, endParentheses)[ CD ]
Line_13 $$ for (String item : names) -->Line_15 $$ if (item.contains(POINTER)) [ FD ]
Line_2 $$ private static List<String> parseRefNames(@Nullable final String decoration) -->Line_3 $$ if (decoration == null) [ CD ]
Line_13 $$ for (String item : names) -->Line_23 $$ int colon = item.indexOf(':')[ FD ]
Line_15 $$ if (item.contains(POINTER)) -->Line_16 $$ List<String> parts = StringUtil.split(item, POINTER)[ CD ]
Line_2 $$ private static List<String> parseRefNames(@Nullable final String decoration) -->Line_6 $$ final int startParentheses = decoration.indexOf("(")[ FD ]
Line_2 $$ private static List<String> parseRefNames(@Nullable final String decoration) -->Line_7 $$ final int endParentheses = decoration.indexOf(")")[ FD ]
Line_17 $$ result.addAll(ContainerUtil.map(parts, new Function<String, String>() -->Line_19 $$ return shortBuffer(s.trim())[ FD ]
Line_2 $$ private static List<String> parseRefNames(@Nullable final String decoration) -->Line_27 $$ return result[ CD ]
Line_2 $$ private static List<String> parseRefNames(@Nullable final String decoration) -->Line_6 $$ final int startParentheses = decoration.indexOf("(")[ CD ]
Line_15 $$ if (item.contains(POINTER)) -->Line_23 $$ int colon = item.indexOf(':')[ CD ]
Line_8 $$ if ((startParentheses == -1) || (endParentheses == -1))-->Line_9 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private static List<String> parseRefNames(@Nullable final String decoration) -->Line_8 $$ if ((startParentheses == -1) || (endParentheses == -1))[ CD ]
Line_17 $$ result.addAll(ContainerUtil.map(parts, new Function<String, String>() -->Line_19 $$ return shortBuffer(s.trim())[ CD ]
Line_10 $$ String refs = decoration.substring(startParentheses + 1, endParentheses)-->Line_11 $$ String[] names = refs.split(", ")[ FD ]
Line_2 $$ private static List<String> parseRefNames(@Nullable final String decoration) -->Line_10 $$ String refs = decoration.substring(startParentheses + 1, endParentheses)[ FD ]
Line_2 $$ private static List<String> parseRefNames(@Nullable final String decoration) -->Line_3 $$ if (decoration == null) [ FD ]
Line_12 $$ List<String> result = ContainerUtil.newArrayList()-->Line_17 $$ result.addAll(ContainerUtil.map(parts, new Function<String, String>() [ FD ]
Line_2 $$ private static List<String> parseRefNames(@Nullable final String decoration) -->Line_12 $$ List<String> result = ContainerUtil.newArrayList()[ CD ]
Line_15 $$ if (item.contains(POINTER)) -->Line_17 $$ result.addAll(ContainerUtil.map(parts, new Function<String, String>() [ CD ]
Line_3 $$ if (decoration == null) -->Line_4 $$ return ContainerUtil.emptyList()[ CD ]
Line_14 $$ final String POINTER = " -> "-->Line_15 $$ if (item.contains(POINTER)) [ FD ]
Line_15 $$ if (item.contains(POINTER)) -->Line_24 $$ result.add(shortBuffer(colon > 0 ? item.substring(colon + 1).trim() : item))[ CD ]
Line_2 $$ private static List<String> parseRefNames(@Nullable final String decoration) -->Line_11 $$ String[] names = refs.split(", ")[ CD ]
Line_12 $$ List<String> result = ContainerUtil.newArrayList()-->Line_24 $$ result.add(shortBuffer(colon > 0 ? item.substring(colon + 1).trim() : item))[ FD ]
Line_2 $$ private static List<String> parseRefNames(@Nullable final String decoration) -->Line_7 $$ final int endParentheses = decoration.indexOf(")")[ CD ]
Line_7 $$ final int endParentheses = decoration.indexOf(")")-->Line_10 $$ String refs = decoration.substring(startParentheses + 1, endParentheses)[ FD ]
Line_13 $$ for (String item : names) -->Line_16 $$ List<String> parts = StringUtil.split(item, POINTER)[ FD ]
Line_13 $$ for (String item : names) -->Line_24 $$ result.add(shortBuffer(colon > 0 ? item.substring(colon + 1).trim() : item))[ FD ]
Line_14 $$ final String POINTER = " -> "-->Line_16 $$ List<String> parts = StringUtil.split(item, POINTER)[ FD ]
