Line_2 $$ public void testFullCipher() throws Exception -->Line_4 $$ final String[] args1 = [ CD ]
Line_2 $$ public void testFullCipher() throws Exception -->Line_8 $$ rc = ks.run(args1)[ CD ]
Line_2 $$ public void testFullCipher() throws Exception -->Line_6 $$ KeyShell ks = new KeyShell()[ CD ]
Line_6 $$ KeyShell ks = new KeyShell()-->Line_7 $$ ks.setConf(new Configuration())[ FD ]
Line_6 $$ KeyShell ks = new KeyShell()-->Line_8 $$ rc = ks.run(args1)[ FD ]
Line_2 $$ public void testFullCipher() throws Exception -->Line_3 $$ final String keyName = "key1"[ CD ]
Line_6 $$ KeyShell ks = new KeyShell()-->Line_11 $$ deleteKey(ks, keyName)[ FD ]
Line_5 $$ int rc = 0-->Line_9 $$ assertEquals(0, rc)[ FD ]
Line_5 $$ int rc = 0-->Line_8 $$ rc = ks.run(args1)[ FD ]
Line_4 $$ final String[] args1 = -->Line_8 $$ rc = ks.run(args1)[ FD ]
Line_2 $$ public void testFullCipher() throws Exception -->Line_9 $$ assertEquals(0, rc)[ CD ]
Line_8 $$ rc = ks.run(args1)-->Line_9 $$ assertEquals(0, rc)[ FD ]
Line_2 $$ public void testFullCipher() throws Exception -->Line_5 $$ int rc = 0[ CD ]
Line_2 $$ public void testFullCipher() throws Exception -->Line_10 $$ assertTrue(outContent.toString().contains(keyName + " has been " + "successfully created"))[ CD ]
Line_2 $$ public void testFullCipher() throws Exception -->Line_7 $$ ks.setConf(new Configuration())[ CD ]
Line_2 $$ public void testFullCipher() throws Exception -->Line_11 $$ deleteKey(ks, keyName)[ CD ]
Line_3 $$ final String keyName = "key1"-->Line_11 $$ deleteKey(ks, keyName)[ FD ]
