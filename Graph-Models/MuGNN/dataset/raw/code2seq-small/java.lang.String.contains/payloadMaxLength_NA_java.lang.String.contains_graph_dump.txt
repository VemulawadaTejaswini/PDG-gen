Line_2 $$ public void payloadMaxLength() throws Exception -->Line_9 $$ FilterChain filterChain = new FilterChain() [ CD ]
Line_5 $$ final MockHttpServletRequest request = new MockHttpServletRequest("POST", "/hotels")-->Line_16 $$ filter.doFilter(request, response, filterChain)[ FD ]
Line_2 $$ public void payloadMaxLength() throws Exception -->Line_3 $$ filter.setIncludePayload(true)[ CD ]
Line_2 $$ public void payloadMaxLength() throws Exception -->Line_6 $$ MockHttpServletResponse response = new MockHttpServletResponse()[ CD ]
Line_9 $$ FilterChain filterChain = new FilterChain() -->Line_12 $$ byte[] buf = FileCopyUtils.copyToByteArray(filterRequest.getInputStream())[ CD ]
Line_7 $$ final byte[] requestBody = "Hello World".getBytes("UTF-8")-->Line_8 $$ request.setContent(requestBody)[ FD ]
Line_5 $$ final MockHttpServletRequest request = new MockHttpServletRequest("POST", "/hotels")-->Line_8 $$ request.setContent(requestBody)[ FD ]
Line_2 $$ public void payloadMaxLength() throws Exception -->Line_17 $$ assertNotNull(filter.afterRequestMessage)[ CD ]
Line_2 $$ public void payloadMaxLength() throws Exception -->Line_8 $$ request.setContent(requestBody)[ CD ]
Line_12 $$ byte[] buf = FileCopyUtils.copyToByteArray(filterRequest.getInputStream())-->Line_13 $$ assertArrayEquals(requestBody, buf)[ FD ]
Line_9 $$ FilterChain filterChain = new FilterChain() -->Line_11 $$ ((HttpServletResponse) filterResponse).setStatus(HttpServletResponse.SC_OK)[ CD ]
Line_2 $$ public void payloadMaxLength() throws Exception -->Line_5 $$ final MockHttpServletRequest request = new MockHttpServletRequest("POST", "/hotels")[ CD ]
Line_9 $$ FilterChain filterChain = new FilterChain() -->Line_13 $$ assertArrayEquals(requestBody, buf)[ CD ]
Line_2 $$ public void payloadMaxLength() throws Exception -->Line_7 $$ final byte[] requestBody = "Hello World".getBytes("UTF-8")[ CD ]
Line_2 $$ public void payloadMaxLength() throws Exception -->Line_4 $$ filter.setMaxPayloadLength(3)[ CD ]
Line_2 $$ public void payloadMaxLength() throws Exception -->Line_16 $$ filter.doFilter(request, response, filterChain)[ CD ]
Line_2 $$ public void payloadMaxLength() throws Exception -->Line_19 $$ assertFalse(filter.afterRequestMessage.contains("Hello World"))[ CD ]
Line_2 $$ public void payloadMaxLength() throws Exception -->Line_18 $$ assertTrue(filter.afterRequestMessage.contains("Hel"))[ CD ]
Line_9 $$ FilterChain filterChain = new FilterChain() -->Line_16 $$ filter.doFilter(request, response, filterChain)[ FD ]
Line_9 $$ FilterChain filterChain = new FilterChain() -->Line_12 $$ byte[] buf = FileCopyUtils.copyToByteArray(filterRequest.getInputStream())[ FD ]
Line_6 $$ MockHttpServletResponse response = new MockHttpServletResponse()-->Line_16 $$ filter.doFilter(request, response, filterChain)[ FD ]
Line_7 $$ final byte[] requestBody = "Hello World".getBytes("UTF-8")-->Line_13 $$ assertArrayEquals(requestBody, buf)[ FD ]
