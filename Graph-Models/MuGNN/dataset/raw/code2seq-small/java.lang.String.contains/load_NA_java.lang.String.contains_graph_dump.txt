Line_19 $$ boolean loaded = false-->Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))[ FD ]
Line_12 $$ if (vm != null && vm.contains("Dalvik")) -->Line_17 $$ is64Bit = false[ CD ]
Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")-->Line_56 $$ loaded = true[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")-->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_9 $$ boolean is64Bit = System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64")-->Line_31 $$ if (!is64Bit) [ FD ]
Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")-->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))-->Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))[ FD ]
Line_19 $$ boolean loaded = false-->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))-->Line_56 $$ loaded = true[ FD ]
Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))-->Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")[ FD ]
Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))-->Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")[ FD ]
Line_9 $$ boolean is64Bit = System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64")-->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")-->Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")[ FD ]
Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")-->Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))[ FD ]
Line_28 $$ if (isLinux) -->Line_29 $$ if (libraryFinder != null)[ CD ]
Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))-->Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")[ FD ]
Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")-->Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")[ FD ]
Line_31 $$ if (!is64Bit) -->Line_37 $$ if (isArm)[ CD ]
Line_9 $$ boolean is64Bit = System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64")-->Line_23 $$ if (!is64Bit)[ FD ]
Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")-->Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")[ FD ]
Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))-->Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")[ FD ]
Line_29 $$ if (libraryFinder != null)-->Line_31 $$ if (!is64Bit) [ CD ]
Line_32 $$ if (isArm)-->Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")[ CD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_28 $$ if (isLinux) [ CD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_59 $$ loadedLibraries.add(sharedLibName)[ FD ]
Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")-->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_44 $$ if (libraryFinder != null)-->Line_46 $$ if (!is64Bit)[ CD ]
Line_19 $$ boolean loaded = false-->Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")[ FD ]
Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")-->Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")[ FD ]
Line_17 $$ is64Bit = false-->Line_31 $$ if (!is64Bit) [ FD ]
Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")-->Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")[ FD ]
Line_21 $$ if (libraryFinder != null)-->Line_23 $$ if (!is64Bit)[ CD ]
Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")-->Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")[ FD ]
Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")-->Line_56 $$ loaded = true[ FD ]
Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")-->Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")[ FD ]
Line_17 $$ is64Bit = false-->Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))[ FD ]
Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")-->Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")[ FD ]
Line_17 $$ is64Bit = false-->Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_53 $$ System.loadLibrary(libraryFinder.getSharedLibraryNameAndroid(sharedLibName, nativesZip))[ FD ]
Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))-->Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_19 $$ boolean loaded = false[ CD ]
Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")-->Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_8 $$ boolean isAndroid = false[ CD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_6 $$ boolean isLinux = System.getProperty("os.name").contains("Linux")[ CD ]
Line_52 $$ if (libraryFinder != null)-->Line_53 $$ System.loadLibrary(libraryFinder.getSharedLibraryNameAndroid(sharedLibName, nativesZip))[ CD ]
Line_51 $$ if (isAndroid) -->Line_56 $$ loaded = true[ CD ]
Line_5 $$ boolean isWindows = System.getProperty("os.name").contains("Windows")-->Line_14 $$ isWindows = false[ FD ]
Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))-->Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_9 $$ boolean is64Bit = System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64")-->Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_5 $$ boolean isWindows = System.getProperty("os.name").contains("Windows")[ CD ]
Line_9 $$ boolean is64Bit = System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64")-->Line_17 $$ is64Bit = false[ FD ]
Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")-->Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")[ FD ]
Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")-->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")-->Line_56 $$ loaded = true[ FD ]
Line_17 $$ is64Bit = false-->Line_46 $$ if (!is64Bit)[ FD ]
Line_12 $$ if (vm != null && vm.contains("Dalvik")) -->Line_16 $$ isMac = false[ CD ]
Line_43 $$ if (isMac) -->Line_44 $$ if (libraryFinder != null)[ CD ]
Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))-->Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")[ FD ]
Line_12 $$ if (vm != null && vm.contains("Dalvik")) -->Line_13 $$ isAndroid = true[ CD ]
Line_51 $$ if (isAndroid) -->Line_52 $$ if (libraryFinder != null)[ CD ]
Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")-->Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))[ FD ]
Line_17 $$ is64Bit = false-->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")-->Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")[ FD ]
Line_19 $$ boolean loaded = false-->Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")[ FD ]
Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))-->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")-->Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")[ FD ]
Line_7 $$ boolean isMac = System.getProperty("os.name").contains("Mac")-->Line_16 $$ isMac = false[ FD ]
Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))-->Line_56 $$ loaded = true[ FD ]
Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")-->Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")[ FD ]
Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")-->Line_56 $$ loaded = true[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_7 $$ boolean isMac = System.getProperty("os.name").contains("Mac")[ CD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_20 $$ if (isWindows) [ CD ]
Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")-->Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")[ FD ]
Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")-->Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")[ FD ]
Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")-->Line_56 $$ loaded = true[ FD ]
Line_19 $$ boolean loaded = false-->Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_3 $$ if (loadedLibraries.contains(sharedLibName))[ FD ]
Line_44 $$ if (libraryFinder != null)-->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ CD ]
Line_10 $$ boolean isArm = System.getProperty("os.arch").equals("arm")-->Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_58 $$ if (loaded)[ CD ]
Line_29 $$ if (libraryFinder != null)-->Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))[ CD ]
Line_6 $$ boolean isLinux = System.getProperty("os.name").contains("Linux")-->Line_15 $$ isLinux = false[ FD ]
Line_19 $$ boolean loaded = false-->Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")[ FD ]
Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")-->Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_55 $$ System.loadLibrary(sharedLibName)[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_12 $$ if (vm != null && vm.contains("Dalvik")) [ CD ]
Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))-->Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")[ FD ]
Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))-->Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")[ FD ]
Line_20 $$ if (isWindows) -->Line_21 $$ if (libraryFinder != null)[ CD ]
Line_17 $$ is64Bit = false-->Line_23 $$ if (!is64Bit)[ FD ]
Line_9 $$ boolean is64Bit = System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64")-->Line_46 $$ if (!is64Bit)[ FD ]
Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))-->Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")[ FD ]
Line_23 $$ if (!is64Bit)-->Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")[ CD ]
Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))-->Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")[ FD ]
Line_12 $$ if (vm != null && vm.contains("Dalvik")) -->Line_15 $$ isLinux = false[ CD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_10 $$ boolean isArm = System.getProperty("os.arch").equals("arm")[ CD ]
Line_37 $$ if (isArm)-->Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")[ CD ]
Line_19 $$ boolean loaded = false-->Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")[ FD ]
Line_46 $$ if (!is64Bit)-->Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")[ CD ]
Line_52 $$ if (libraryFinder != null)-->Line_55 $$ System.loadLibrary(sharedLibName)[ CD ]
Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")-->Line_56 $$ loaded = true[ FD ]
Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")-->Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")[ FD ]
Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")-->Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")[ FD ]
Line_19 $$ boolean loaded = false-->Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")[ FD ]
Line_19 $$ boolean loaded = false-->Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_43 $$ if (isMac) [ CD ]
Line_21 $$ if (libraryFinder != null)-->Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))[ CD ]
Line_31 $$ if (!is64Bit) -->Line_32 $$ if (isArm)[ CD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_3 $$ if (loadedLibraries.contains(sharedLibName))[ CD ]
Line_12 $$ if (vm != null && vm.contains("Dalvik")) -->Line_14 $$ isWindows = false[ CD ]
Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")-->Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")[ FD ]
Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))-->Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")[ FD ]
Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")-->Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")[ FD ]
Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")-->Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")[ FD ]
Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")-->Line_56 $$ loaded = true[ FD ]
Line_19 $$ boolean loaded = false-->Line_56 $$ loaded = true[ FD ]
Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))-->Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")[ FD ]
Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")-->Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")[ FD ]
Line_19 $$ boolean loaded = false-->Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")[ FD ]
Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))-->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")-->Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")[ FD ]
Line_46 $$ if (!is64Bit)-->Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")[ CD ]
Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))-->Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")[ FD ]
Line_37 $$ if (isArm)-->Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")[ CD ]
Line_3 $$ if (loadedLibraries.contains(sharedLibName))-->Line_4 $$ return[ CD ]
Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))-->Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")[ FD ]
Line_19 $$ boolean loaded = false-->Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")[ FD ]
Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")-->Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")[ FD ]
Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")-->Line_56 $$ loaded = true[ FD ]
Line_9 $$ boolean is64Bit = System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64")-->Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_11 $$ String vm = System.getProperty("java.vm.name")[ CD ]
Line_58 $$ if (loaded)-->Line_59 $$ loadedLibraries.add(sharedLibName)[ CD ]
Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")-->Line_49 $$ loaded = loadLibrary("lib" + sharedLibName + "64.dylib")[ FD ]
Line_23 $$ if (!is64Bit)-->Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")[ CD ]
Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")-->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_22 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameWindows(sharedLibName, is64Bit, nativesZip))-->Line_30 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameLinux(sharedLibName, is64Bit, isArm, nativesZip))[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_9 $$ boolean is64Bit = System.getProperty("os.arch").equals("amd64") || System.getProperty("os.arch").equals("x86_64")[ CD ]
Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))-->Line_56 $$ loaded = true[ FD ]
Line_2 $$ public synchronized void load(String sharedLibName) -->Line_51 $$ if (isAndroid) [ CD ]
Line_24 $$ loaded = loadLibrary(sharedLibName + ".dll")-->Line_45 $$ loaded = loadLibrary(libraryFinder.getSharedLibraryNameMac(sharedLibName, is64Bit, nativesZip))[ FD ]
Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")-->Line_47 $$ loaded = loadLibrary("lib" + sharedLibName + ".dylib")[ FD ]
Line_32 $$ if (isArm)-->Line_33 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm.so")[ CD ]
Line_11 $$ String vm = System.getProperty("java.vm.name")-->Line_12 $$ if (vm != null && vm.contains("Dalvik")) [ FD ]
Line_8 $$ boolean isAndroid = false-->Line_13 $$ isAndroid = true[ FD ]
Line_35 $$ loaded = loadLibrary("lib" + sharedLibName + ".so")-->Line_40 $$ loaded = loadLibrary("lib" + sharedLibName + "64.so")[ FD ]
Line_26 $$ loaded = loadLibrary(sharedLibName + "64.dll")-->Line_38 $$ loaded = loadLibrary("lib" + sharedLibName + "Arm64.so")[ FD ]
