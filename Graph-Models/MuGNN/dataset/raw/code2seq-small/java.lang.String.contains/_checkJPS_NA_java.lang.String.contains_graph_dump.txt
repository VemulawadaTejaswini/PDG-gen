Line_2 $$ private static void _checkJPS(int processId) throws Exception -->Line_9 $$ byte[] stdErrBytes = objectValuePair.getValue()[ CD ]
Line_2 $$ private static void _checkJPS(int processId) throws Exception -->Line_6 $$ if (!stdOutString.contains(String.valueOf(processId))) [ CD ]
Line_4 $$ ObjectValuePair<byte[], byte[]> objectValuePair = future.get()-->Line_9 $$ byte[] stdErrBytes = objectValuePair.getValue()[ FD ]
Line_4 $$ ObjectValuePair<byte[], byte[]> objectValuePair = future.get()-->Line_5 $$ String stdOutString = new String(objectValuePair.getKey())[ FD ]
Line_2 $$ private static void _checkJPS(int processId) throws Exception -->Line_6 $$ if (!stdOutString.contains(String.valueOf(processId))) [ FD ]
Line_2 $$ private static void _checkJPS(int processId) throws Exception -->Line_5 $$ String stdOutString = new String(objectValuePair.getKey())[ CD ]
Line_3 $$ Future<ObjectValuePair<byte[], byte[]>> future = ProcessUtil.execute(ProcessUtil.COLLECTOR_OUTPUT_PROCESSOR, "jps")-->Line_4 $$ ObjectValuePair<byte[], byte[]> objectValuePair = future.get()[ FD ]
Line_2 $$ private static void _checkJPS(int processId) throws Exception -->Line_10 $$ if (stdErrBytes.length != 0) [ CD ]
Line_5 $$ String stdOutString = new String(objectValuePair.getKey())-->Line_6 $$ if (!stdOutString.contains(String.valueOf(processId))) [ FD ]
Line_2 $$ private static void _checkJPS(int processId) throws Exception -->Line_4 $$ ObjectValuePair<byte[], byte[]> objectValuePair = future.get()[ CD ]
Line_2 $$ private static void _checkJPS(int processId) throws Exception -->Line_3 $$ Future<ObjectValuePair<byte[], byte[]>> future = ProcessUtil.execute(ProcessUtil.COLLECTOR_OUTPUT_PROCESSOR, "jps")[ CD ]
