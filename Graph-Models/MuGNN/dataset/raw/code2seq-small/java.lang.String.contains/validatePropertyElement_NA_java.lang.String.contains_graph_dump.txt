Line_9 $$ String propertyDelimiter = propertyElement.attributeValue("delimiter")-->Line_12 $$ if (!propertyValue.contains(propertyDelimiter)) [ FD ]
Line_2 $$ protected void validatePropertyElement(String fileName, Element propertyElement) -->Line_13 $$ throwValidationException(1006, fileName, propertyElement, "delimiter")[ FD ]
Line_8 $$ if (propertyName.equals("ignore.errors")) -->Line_10 $$ String propertyValue = propertyElement.attributeValue("value")[ CD ]
Line_11 $$ if (propertyDelimiter != null) -->Line_12 $$ if (!propertyValue.contains(propertyDelimiter)) [ CD ]
Line_22 $$ if (attributeName.equals("delimiter") && propertyName.equals("ignore.errors")) -->Line_24 $$ if (attributeName.equals("line-number") || attributeName.equals("name") || attributeName.equals("value")) [ CD ]
Line_16 $$ if (Validator.isNull(propertyValue)) -->Line_17 $$ throwValidationException(1006, fileName, propertyElement, "value")[ CD ]
Line_21 $$ String attributeName = attribute.getName()-->Line_24 $$ if (attributeName.equals("line-number") || attributeName.equals("name") || attributeName.equals("value")) [ FD ]
Line_10 $$ String propertyValue = propertyElement.attributeValue("value")-->Line_16 $$ if (Validator.isNull(propertyValue)) [ FD ]
Line_2 $$ protected void validatePropertyElement(String fileName, Element propertyElement) -->Line_27 $$ throwValidationException(1005, fileName, propertyElement, attributeName)[ FD ]
Line_24 $$ if (attributeName.equals("line-number") || attributeName.equals("name") || attributeName.equals("value")) -->Line_27 $$ throwValidationException(1005, fileName, propertyElement, attributeName)[ CD ]
Line_8 $$ if (propertyName.equals("ignore.errors")) -->Line_11 $$ if (propertyDelimiter != null) [ CD ]
Line_21 $$ String attributeName = attribute.getName()-->Line_22 $$ if (attributeName.equals("delimiter") && propertyName.equals("ignore.errors")) [ FD ]
Line_5 $$ if (!_testCaseAvailablePropertyNames.contains(propertyName)) -->Line_6 $$ throwValidationException(3003, fileName, propertyElement, propertyName)[ CD ]
Line_21 $$ String attributeName = attribute.getName()-->Line_27 $$ throwValidationException(1005, fileName, propertyElement, attributeName)[ FD ]
Line_8 $$ if (propertyName.equals("ignore.errors")) -->Line_16 $$ if (Validator.isNull(propertyValue)) [ CD ]
Line_12 $$ if (!propertyValue.contains(propertyDelimiter)) -->Line_13 $$ throwValidationException(1006, fileName, propertyElement, "delimiter")[ CD ]
Line_2 $$ protected void validatePropertyElement(String fileName, Element propertyElement) -->Line_3 $$ List<Attribute> attributes = propertyElement.attributes()[ FD ]
Line_9 $$ String propertyDelimiter = propertyElement.attributeValue("delimiter")-->Line_11 $$ if (propertyDelimiter != null) [ FD ]
Line_20 $$ for (Attribute attribute : attributes) -->Line_21 $$ String attributeName = attribute.getName()[ FD ]
Line_2 $$ protected void validatePropertyElement(String fileName, Element propertyElement) -->Line_10 $$ String propertyValue = propertyElement.attributeValue("value")[ FD ]
Line_2 $$ protected void validatePropertyElement(String fileName, Element propertyElement) -->Line_6 $$ throwValidationException(3003, fileName, propertyElement, propertyName)[ FD ]
Line_2 $$ protected void validatePropertyElement(String fileName, Element propertyElement) -->Line_4 $$ String propertyName = propertyElement.attributeValue("name")[ FD ]
Line_4 $$ String propertyName = propertyElement.attributeValue("name")-->Line_6 $$ throwValidationException(3003, fileName, propertyElement, propertyName)[ FD ]
Line_2 $$ protected void validatePropertyElement(String fileName, Element propertyElement) -->Line_4 $$ String propertyName = propertyElement.attributeValue("name")[ CD ]
Line_2 $$ protected void validatePropertyElement(String fileName, Element propertyElement) -->Line_3 $$ List<Attribute> attributes = propertyElement.attributes()[ CD ]
Line_8 $$ if (propertyName.equals("ignore.errors")) -->Line_9 $$ String propertyDelimiter = propertyElement.attributeValue("delimiter")[ CD ]
Line_4 $$ String propertyName = propertyElement.attributeValue("name")-->Line_5 $$ if (!_testCaseAvailablePropertyNames.contains(propertyName)) [ FD ]
Line_2 $$ protected void validatePropertyElement(String fileName, Element propertyElement) -->Line_8 $$ if (propertyName.equals("ignore.errors")) [ CD ]
Line_2 $$ protected void validatePropertyElement(String fileName, Element propertyElement) -->Line_17 $$ throwValidationException(1006, fileName, propertyElement, "value")[ FD ]
Line_2 $$ protected void validatePropertyElement(String fileName, Element propertyElement) -->Line_9 $$ String propertyDelimiter = propertyElement.attributeValue("delimiter")[ FD ]
Line_4 $$ String propertyName = propertyElement.attributeValue("name")-->Line_22 $$ if (attributeName.equals("delimiter") && propertyName.equals("ignore.errors")) [ FD ]
Line_4 $$ String propertyName = propertyElement.attributeValue("name")-->Line_8 $$ if (propertyName.equals("ignore.errors")) [ FD ]
Line_2 $$ protected void validatePropertyElement(String fileName, Element propertyElement) -->Line_5 $$ if (!_testCaseAvailablePropertyNames.contains(propertyName)) [ CD ]
Line_10 $$ String propertyValue = propertyElement.attributeValue("value")-->Line_12 $$ if (!propertyValue.contains(propertyDelimiter)) [ FD ]
