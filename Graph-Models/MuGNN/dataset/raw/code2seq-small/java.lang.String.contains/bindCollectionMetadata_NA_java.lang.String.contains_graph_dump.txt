Line_14 $$ final TypeDefinition typeDef = mappingDocument.getMetadataCollector().getTypeDefinition(typeName)-->Line_18 $$ typeParameters.putAll(typeDef.getParameters())[ FD ]
Line_85 $$ if (!sortable.getComparatorName().equals("natural")) -->Line_86 $$ binding.setComparatorClassName(sortable.getComparatorName())[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_24 $$ if (source.getTypeInformation().getParameters() != null) [ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_69 $$ if (source.getCustomSqlInsert() != null) [ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_81 $$ if (source instanceof Sortable) [ CD ]
Line_103 $$ if (condition == null) -->Line_104 $$ final FilterDefinition filterDefinition = mappingDocument.getMetadataCollector().getFilterDefinition(filterSource.getName())[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_3 $$ binding.setRole(source.getAttributeRole().getFullPath())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_11 $$ String typeName = source.getTypeInformation().getName()[ CD ]
Line_98 $$ if (cascadeStyle != null && cascadeStyle.contains("delete-orphan")) -->Line_99 $$ binding.setOrphanDelete(true)[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_4 $$ binding.setInverse(source.isInverse())[ CD ]
Line_15 $$ if (typeDef != null) -->Line_16 $$ typeName = typeDef.getTypeImplementorClass().getName()[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_61 $$ throw new AssertionFailure("Unexpected FetchStyle : " + source.getFetchCharacteristics().getFetchStyle().name())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_55 $$ binding.setSubselectLoadable(true)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_97 $$ final String cascadeStyle = source.getCascadeStyleName()[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_31 $$ binding.setExtraLazy(source.getFetchCharacteristics().isExtraLazy())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_29 $$ if (source.getFetchCharacteristics().getFetchTiming() == FetchTiming.DELAYED) [ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_28 $$ binding.setTypeParameters(typeParameters)[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_25 $$ typeParameters.putAll(source.getTypeInformation().getParameters())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_64 $$ for (String name : source.getSynchronizedTableNames()) [ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_79 $$ binding.setCustomSQLDeleteAll(source.getCustomSqlDeleteAll().getSql(), source.getCustomSqlDeleteAll().isCallable(), source.getCustomSqlDeleteAll().getCheckStyle())[ FD ]
Line_93 $$ if (((Orderable) source).isOrdered()) -->Line_94 $$ binding.setOrderBy(((Orderable) source).getOrder())[ CD ]
Line_82 $$ final Sortable sortable = (Sortable) source-->Line_85 $$ if (!sortable.getComparatorName().equals("natural")) [ FD ]
Line_14 $$ final TypeDefinition typeDef = mappingDocument.getMetadataCollector().getTypeDefinition(typeName)-->Line_17 $$ if (typeDef.getParameters() != null) [ FD ]
Line_21 $$ typeName = mappingDocument.qualifyClassName(typeName)-->Line_27 $$ binding.setTypeName(typeName)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_86 $$ binding.setComparatorClassName(sortable.getComparatorName())[ FD ]
Line_15 $$ if (typeDef != null) -->Line_17 $$ if (typeDef.getParameters() != null) [ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_97 $$ final String cascadeStyle = source.getCascadeStyleName()[ FD ]
Line_82 $$ final Sortable sortable = (Sortable) source-->Line_83 $$ if (sortable.isSorted()) [ FD ]
Line_102 $$ String condition = filterSource.getCondition()-->Line_106 $$ condition = filterDefinition.getDefaultFilterCondition()[ FD ]
Line_83 $$ if (sortable.isSorted()) -->Line_85 $$ if (!sortable.getComparatorName().equals("natural")) [ CD ]
Line_16 $$ typeName = typeDef.getTypeImplementorClass().getName()-->Line_21 $$ typeName = mappingDocument.qualifyClassName(typeName)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_49 $$ binding.setBatchSize(source.getFetchCharacteristics().getBatchSize())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_10 $$ applyCaching(mappingDocument, source.getCaching(), binding)[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_67 $$ binding.setWhere(source.getWhere())[ CD ]
Line_11 $$ String typeName = source.getTypeInformation().getName()-->Line_21 $$ typeName = mappingDocument.qualifyClassName(typeName)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_67 $$ binding.setWhere(source.getWhere())[ FD ]
Line_17 $$ if (typeDef.getParameters() != null) -->Line_18 $$ typeParameters.putAll(typeDef.getParameters())[ CD ]
Line_102 $$ String condition = filterSource.getCondition()-->Line_109 $$ binding.addFilter(filterSource.getName(), condition, filterSource.shouldAutoInjectAliases(), filterSource.getAliasToTableMap(), filterSource.getAliasToEntityMap())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_54 $$ binding.setFetchMode(FetchMode.SELECT)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_89 $$ binding.setSorted(false)[ FD ]
Line_16 $$ typeName = typeDef.getTypeImplementorClass().getName()-->Line_27 $$ binding.setTypeName(typeName)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_14 $$ final TypeDefinition typeDef = mappingDocument.getMetadataCollector().getTypeDefinition(typeName)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_109 $$ binding.addFilter(filterSource.getName(), condition, filterSource.shouldAutoInjectAliases(), filterSource.getAliasToTableMap(), filterSource.getAliasToEntityMap())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_98 $$ if (cascadeStyle != null && cascadeStyle.contains("delete-orphan")) [ CD ]
Line_29 $$ if (source.getFetchCharacteristics().getFetchTiming() == FetchTiming.DELAYED) -->Line_31 $$ binding.setExtraLazy(source.getFetchCharacteristics().isExtraLazy())[ CD ]
Line_92 $$ if (source instanceof Orderable) -->Line_93 $$ if (((Orderable) source).isOrdered()) [ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_65 $$ binding.getSynchronizedTables().add(name)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_13 $$ if (typeName != null) [ CD ]
Line_81 $$ if (source instanceof Sortable) -->Line_82 $$ final Sortable sortable = (Sortable) source[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_78 $$ if (source.getCustomSqlDeleteAll() != null) [ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_73 $$ binding.setCustomSQLUpdate(source.getCustomSqlUpdate().getSql(), source.getCustomSqlUpdate().isCallable(), source.getCustomSqlUpdate().getCheckStyle())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_28 $$ binding.setTypeParameters(typeParameters)[ FD ]
Line_101 $$ for (FilterSource filterSource : source.getFilterSources()) -->Line_109 $$ binding.addFilter(filterSource.getName(), condition, filterSource.shouldAutoInjectAliases(), filterSource.getAliasToTableMap(), filterSource.getAliasToEntityMap())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_3 $$ binding.setRole(source.getAttributeRole().getFullPath())[ CD ]
Line_104 $$ final FilterDefinition filterDefinition = mappingDocument.getMetadataCollector().getFilterDefinition(filterSource.getName())-->Line_106 $$ condition = filterDefinition.getDefaultFilterCondition()[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_10 $$ applyCaching(mappingDocument, source.getCaching(), binding)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_69 $$ if (source.getCustomSqlInsert() != null) [ CD ]
Line_14 $$ final TypeDefinition typeDef = mappingDocument.getMetadataCollector().getTypeDefinition(typeName)-->Line_16 $$ typeName = typeDef.getTypeImplementorClass().getName()[ FD ]
Line_83 $$ if (sortable.isSorted()) -->Line_84 $$ binding.setSorted(true)[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_11 $$ String typeName = source.getTypeInformation().getName()[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_24 $$ if (source.getTypeInformation().getParameters() != null) [ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_68 $$ binding.setLoaderName(source.getCustomLoaderName())[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_78 $$ if (source.getCustomSqlDeleteAll() != null) [ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_76 $$ binding.setCustomSQLDelete(source.getCustomSqlDelete().getSql(), source.getCustomSqlDelete().isCallable(), source.getCustomSqlDelete().getCheckStyle())[ FD ]
Line_81 $$ if (source instanceof Sortable) -->Line_83 $$ if (sortable.isSorted()) [ CD ]
Line_12 $$ Map typeParameters = new HashMap()-->Line_28 $$ binding.setTypeParameters(typeParameters)[ FD ]
Line_13 $$ if (typeName != null) -->Line_15 $$ if (typeDef != null) [ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_70 $$ binding.setCustomSQLInsert(source.getCustomSqlInsert().getSql(), source.getCustomSqlInsert().isCallable(), source.getCustomSqlInsert().getCheckStyle())[ FD ]
Line_83 $$ if (sortable.isSorted()) -->Line_89 $$ binding.setSorted(false)[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_75 $$ if (source.getCustomSqlDelete() != null) [ CD ]
Line_101 $$ for (FilterSource filterSource : source.getFilterSources()) -->Line_104 $$ final FilterDefinition filterDefinition = mappingDocument.getMetadataCollector().getFilterDefinition(filterSource.getName())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_12 $$ Map typeParameters = new HashMap()[ CD ]
Line_11 $$ String typeName = source.getTypeInformation().getName()-->Line_27 $$ binding.setTypeName(typeName)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_27 $$ binding.setTypeName(typeName)[ FD ]
Line_14 $$ final TypeDefinition typeDef = mappingDocument.getMetadataCollector().getTypeDefinition(typeName)-->Line_15 $$ if (typeDef != null) [ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_72 $$ if (source.getCustomSqlUpdate() != null) [ FD ]
Line_101 $$ for (FilterSource filterSource : source.getFilterSources()) -->Line_102 $$ String condition = filterSource.getCondition()[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_6 $$ binding.setOptimisticLocked(source.isIncludedInOptimisticLocking())[ FD ]
Line_24 $$ if (source.getTypeInformation().getParameters() != null) -->Line_25 $$ typeParameters.putAll(source.getTypeInformation().getParameters())[ CD ]
Line_7 $$ if (source.getCustomPersisterClassName() != null) -->Line_8 $$ binding.setCollectionPersisterClass(mappingDocument.getClassLoaderAccess().classForName(mappingDocument.qualifyClassName(source.getCustomPersisterClassName())))[ CD ]
Line_72 $$ if (source.getCustomSqlUpdate() != null) -->Line_73 $$ binding.setCustomSQLUpdate(source.getCustomSqlUpdate().getSql(), source.getCustomSqlUpdate().isCallable(), source.getCustomSqlUpdate().getCheckStyle())[ CD ]
Line_64 $$ for (String name : source.getSynchronizedTableNames()) -->Line_65 $$ binding.getSynchronizedTables().add(name)[ FD ]
Line_75 $$ if (source.getCustomSqlDelete() != null) -->Line_76 $$ binding.setCustomSQLDelete(source.getCustomSqlDelete().getSql(), source.getCustomSqlDelete().isCallable(), source.getCustomSqlDelete().getCheckStyle())[ CD ]
Line_29 $$ if (source.getFetchCharacteristics().getFetchTiming() == FetchTiming.DELAYED) -->Line_33 $$ binding.setLazy(false)[ CD ]
Line_29 $$ if (source.getFetchCharacteristics().getFetchTiming() == FetchTiming.DELAYED) -->Line_30 $$ binding.setLazy(true)[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_92 $$ if (source instanceof Orderable) [ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_7 $$ if (source.getCustomPersisterClassName() != null) [ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_104 $$ final FilterDefinition filterDefinition = mappingDocument.getMetadataCollector().getFilterDefinition(filterSource.getName())[ FD ]
Line_11 $$ String typeName = source.getTypeInformation().getName()-->Line_16 $$ typeName = typeDef.getTypeImplementorClass().getName()[ FD ]
Line_105 $$ if (filterDefinition != null) -->Line_106 $$ condition = filterDefinition.getDefaultFilterCondition()[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_30 $$ binding.setLazy(true)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_56 $$ binding.getOwner().setSubselectLoadableCollections(true)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_21 $$ typeName = mappingDocument.qualifyClassName(typeName)[ FD ]
Line_15 $$ if (typeDef != null) -->Line_21 $$ typeName = mappingDocument.qualifyClassName(typeName)[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_99 $$ binding.setOrphanDelete(true)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_101 $$ for (FilterSource filterSource : source.getFilterSources()) [ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_94 $$ binding.setOrderBy(((Orderable) source).getOrder())[ FD ]
Line_11 $$ String typeName = source.getTypeInformation().getName()-->Line_14 $$ final TypeDefinition typeDef = mappingDocument.getMetadataCollector().getTypeDefinition(typeName)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_7 $$ if (source.getCustomPersisterClassName() != null) [ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_35 $$ switch(source.getFetchCharacteristics().getFetchStyle()) [ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_81 $$ if (source instanceof Sortable) [ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_38 $$ binding.setFetchMode(FetchMode.SELECT)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_84 $$ binding.setSorted(true)[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_29 $$ if (source.getFetchCharacteristics().getFetchTiming() == FetchTiming.DELAYED) [ FD ]
Line_78 $$ if (source.getCustomSqlDeleteAll() != null) -->Line_79 $$ binding.setCustomSQLDeleteAll(source.getCustomSqlDeleteAll().getSql(), source.getCustomSqlDeleteAll().isCallable(), source.getCustomSqlDeleteAll().getCheckStyle())[ CD ]
Line_13 $$ if (typeName != null) -->Line_14 $$ final TypeDefinition typeDef = mappingDocument.getMetadataCollector().getTypeDefinition(typeName)[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_6 $$ binding.setOptimisticLocked(source.isIncludedInOptimisticLocking())[ CD ]
Line_104 $$ final FilterDefinition filterDefinition = mappingDocument.getMetadataCollector().getFilterDefinition(filterSource.getName())-->Line_105 $$ if (filterDefinition != null) [ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_5 $$ binding.setMutable(source.isMutable())[ FD ]
Line_69 $$ if (source.getCustomSqlInsert() != null) -->Line_70 $$ binding.setCustomSQLInsert(source.getCustomSqlInsert().getSql(), source.getCustomSqlInsert().isCallable(), source.getCustomSqlInsert().getCheckStyle())[ CD ]
Line_106 $$ condition = filterDefinition.getDefaultFilterCondition()-->Line_109 $$ binding.addFilter(filterSource.getName(), condition, filterSource.shouldAutoInjectAliases(), filterSource.getAliasToTableMap(), filterSource.getAliasToEntityMap())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_33 $$ binding.setLazy(false)[ FD ]
Line_97 $$ final String cascadeStyle = source.getCascadeStyleName()-->Line_98 $$ if (cascadeStyle != null && cascadeStyle.contains("delete-orphan")) [ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_5 $$ binding.setMutable(source.isMutable())[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_27 $$ binding.setTypeName(typeName)[ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_92 $$ if (source instanceof Orderable) [ FD ]
Line_11 $$ String typeName = source.getTypeInformation().getName()-->Line_13 $$ if (typeName != null) [ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_4 $$ binding.setInverse(source.isInverse())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_43 $$ binding.setFetchMode(FetchMode.JOIN)[ FD ]
Line_102 $$ String condition = filterSource.getCondition()-->Line_103 $$ if (condition == null) [ FD ]
Line_82 $$ final Sortable sortable = (Sortable) source-->Line_86 $$ binding.setComparatorClassName(sortable.getComparatorName())[ FD ]
Line_12 $$ Map typeParameters = new HashMap()-->Line_25 $$ typeParameters.putAll(source.getTypeInformation().getParameters())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_8 $$ binding.setCollectionPersisterClass(mappingDocument.getClassLoaderAccess().classForName(mappingDocument.qualifyClassName(source.getCustomPersisterClassName())))[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_48 $$ binding.setFetchMode(FetchMode.SELECT)[ FD ]
Line_103 $$ if (condition == null) -->Line_105 $$ if (filterDefinition != null) [ CD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_72 $$ if (source.getCustomSqlUpdate() != null) [ CD ]
Line_12 $$ Map typeParameters = new HashMap()-->Line_18 $$ typeParameters.putAll(typeDef.getParameters())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_68 $$ binding.setLoaderName(source.getCustomLoaderName())[ FD ]
Line_2 $$ private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) -->Line_75 $$ if (source.getCustomSqlDelete() != null) [ FD ]
