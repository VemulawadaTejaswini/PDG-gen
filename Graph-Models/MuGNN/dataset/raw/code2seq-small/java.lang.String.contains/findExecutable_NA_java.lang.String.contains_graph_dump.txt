Line_10 $$ File resolved = maybeResolveFile(operatingSystem, new File(pathEntry, name), new File(pathEntry, exeName))-->Line_11 $$ if (resolved != null) [ FD ]
Line_2 $$ private File findExecutable(OperatingSystem operatingSystem, String name) -->Line_3 $$ List<File> path = pathEntries.isEmpty() ? operatingSystem.getPath() : pathEntries[ FD ]
Line_2 $$ private File findExecutable(OperatingSystem operatingSystem, String name) -->Line_3 $$ List<File> path = pathEntries.isEmpty() ? operatingSystem.getPath() : pathEntries[ CD ]
Line_2 $$ private File findExecutable(OperatingSystem operatingSystem, String name) -->Line_7 $$ return maybeResolveFile(operatingSystem, new File(name), new File(exeName))[ FD ]
Line_2 $$ private File findExecutable(OperatingSystem operatingSystem, String name) -->Line_10 $$ File resolved = maybeResolveFile(operatingSystem, new File(pathEntry, name), new File(pathEntry, exeName))[ FD ]
Line_11 $$ if (resolved != null) -->Line_12 $$ return resolved[ CD ]
Line_2 $$ private File findExecutable(OperatingSystem operatingSystem, String name) -->Line_18 $$ return null[ CD ]
Line_2 $$ private File findExecutable(OperatingSystem operatingSystem, String name) -->Line_4 $$ String exeName = operatingSystem.getExecutableName(name)[ FD ]
Line_6 $$ if (name.contains(File.separator)) -->Line_7 $$ return maybeResolveFile(operatingSystem, new File(name), new File(exeName))[ CD ]
Line_2 $$ private File findExecutable(OperatingSystem operatingSystem, String name) -->Line_6 $$ if (name.contains(File.separator)) [ FD ]
Line_2 $$ private File findExecutable(OperatingSystem operatingSystem, String name) -->Line_4 $$ String exeName = operatingSystem.getExecutableName(name)[ CD ]
