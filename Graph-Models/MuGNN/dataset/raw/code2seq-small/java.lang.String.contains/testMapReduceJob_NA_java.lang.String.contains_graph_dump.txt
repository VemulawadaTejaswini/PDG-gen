Line_19 $$ if (outputFiles.length > 0) -->Line_29 $$ reader.close()[ CD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_18 $$ Path[] outputFiles = FileUtil.stat2Paths(fs.listStatus(OUTPUT_DIR, new Utils.OutputFileUtils.OutputFilesFilter()))[ CD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_7 $$ conf.setInputFormat(TextInputFormat.class)[ CD ]
Line_24 $$ while (line != null) -->Line_27 $$ line = reader.readLine()[ CD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_17 $$ RunningJob runningJob = JobClient.runJob(conf)[ CD ]
Line_23 $$ int counter = 0-->Line_25 $$ counter++[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_9 $$ conf.setMapOutputValueClass(Text.class)[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_7 $$ conf.setInputFormat(TextInputFormat.class)[ FD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_6 $$ cleanAndCreateInput(fs)[ CD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)[ CD ]
Line_19 $$ if (outputFiles.length > 0) -->Line_30 $$ assertEquals(4, counter)[ CD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_12 $$ conf.setOutputValueClass(Text.class)[ CD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_10 $$ conf.setOutputFormat(TextOutputFormat.class)[ CD ]
Line_27 $$ line = reader.readLine()-->Line_26 $$ assertTrue(line.contains("hello"))[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_4 $$ conf.setJobName("UserDefinedCounters")[ FD ]
Line_5 $$ FileSystem fs = FileSystem.get(conf)-->Line_6 $$ cleanAndCreateInput(fs)[ FD ]
Line_27 $$ line = reader.readLine()-->Line_24 $$ while (line != null) [ FD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_13 $$ conf.setMapperClass(CountingMapper.class)[ FD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_14 $$ conf.setReducerClass(IdentityReducer.class)[ CD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_4 $$ conf.setJobName("UserDefinedCounters")[ CD ]
Line_22 $$ String line = reader.readLine()-->Line_26 $$ assertTrue(line.contains("hello"))[ FD ]
Line_21 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_29 $$ reader.close()[ FD ]
Line_5 $$ FileSystem fs = FileSystem.get(conf)-->Line_20 $$ InputStream is = fs.open(outputFiles[0])[ FD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_16 $$ FileOutputFormat.setOutputPath(conf, OUTPUT_DIR)[ CD ]
Line_24 $$ while (line != null) -->Line_26 $$ assertTrue(line.contains("hello"))[ CD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_8 $$ conf.setMapOutputKeyClass(LongWritable.class)[ FD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_19 $$ if (outputFiles.length > 0) [ CD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_8 $$ conf.setMapOutputKeyClass(LongWritable.class)[ CD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_15 $$ FileInputFormat.setInputPaths(conf, INPUT_DIR)[ CD ]
Line_19 $$ if (outputFiles.length > 0) -->Line_23 $$ int counter = 0[ CD ]
Line_19 $$ if (outputFiles.length > 0) -->Line_24 $$ while (line != null) [ CD ]
Line_19 $$ if (outputFiles.length > 0) -->Line_22 $$ String line = reader.readLine()[ CD ]
Line_21 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_22 $$ String line = reader.readLine()[ FD ]
Line_22 $$ String line = reader.readLine()-->Line_27 $$ line = reader.readLine()[ FD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_32 $$ verifyCounters(runningJob, 4)[ CD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_5 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_14 $$ conf.setReducerClass(IdentityReducer.class)[ FD ]
Line_21 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_27 $$ line = reader.readLine()[ FD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_13 $$ conf.setMapperClass(CountingMapper.class)[ CD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_11 $$ conf.setOutputKeyClass(LongWritable.class)[ FD ]
Line_19 $$ if (outputFiles.length > 0) -->Line_20 $$ InputStream is = fs.open(outputFiles[0])[ CD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_12 $$ conf.setOutputValueClass(Text.class)[ FD ]
Line_17 $$ RunningJob runningJob = JobClient.runJob(conf)-->Line_32 $$ verifyCounters(runningJob, 4)[ FD ]
Line_22 $$ String line = reader.readLine()-->Line_24 $$ while (line != null) [ FD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_5 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_24 $$ while (line != null) -->Line_25 $$ counter++[ CD ]
Line_19 $$ if (outputFiles.length > 0) -->Line_21 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_9 $$ conf.setMapOutputValueClass(Text.class)[ CD ]
Line_5 $$ FileSystem fs = FileSystem.get(conf)-->Line_18 $$ Path[] outputFiles = FileUtil.stat2Paths(fs.listStatus(OUTPUT_DIR, new Utils.OutputFileUtils.OutputFilesFilter()))[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_17 $$ RunningJob runningJob = JobClient.runJob(conf)[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_16 $$ FileOutputFormat.setOutputPath(conf, OUTPUT_DIR)[ FD ]
Line_23 $$ int counter = 0-->Line_30 $$ assertEquals(4, counter)[ FD ]
Line_2 $$ public void testMapReduceJob() throws Exception -->Line_11 $$ conf.setOutputKeyClass(LongWritable.class)[ CD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_10 $$ conf.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestUserDefinedCounters.class)-->Line_15 $$ FileInputFormat.setInputPaths(conf, INPUT_DIR)[ FD ]
