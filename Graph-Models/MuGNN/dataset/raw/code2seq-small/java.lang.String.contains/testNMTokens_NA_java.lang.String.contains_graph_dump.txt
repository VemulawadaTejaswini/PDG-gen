Line_10 $$ String user = "test"-->Line_17 $$ org.apache.hadoop.yarn.api.records.Token validNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)[ FD ]
Line_29 $$ if (UserGroupInformation.isSecurityEnabled()) -->Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")[ CD ]
Line_3 $$ NMTokenSecretManagerInRM nmTokenSecretManagerRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager()-->Line_53 $$ rollNMTokenMasterKey(nmTokenSecretManagerRM, nmTokenSecretManagerNM)[ FD ]
Line_19 $$ ContainerTokenIdentifier identifier = BuilderUtils.newContainerTokenIdentifier(validContainerToken)-->Line_20 $$ Assert.assertEquals(Priority.newInstance(10), identifier.getPriority())[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)[ CD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_55 $$ sb = new StringBuilder("Container ")[ FD ]
Line_55 $$ sb = new StringBuilder("Container ")-->Line_60 $$ sb = new StringBuilder("Container ")[ FD ]
Line_17 $$ org.apache.hadoop.yarn.api.records.Token validNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)-->Line_46 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, false).isEmpty())[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_5 $$ RMContainerTokenSecretManager containerTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getContainerTokenSecretManager()[ CD ]
Line_6 $$ NodeManager nm = yarnCluster.getNodeManager(0)-->Line_7 $$ waitForNMToReceiveNMTokenKey(nmTokenSecretManagerNM, nm)[ FD ]
Line_22 $$ StringBuilder sb-->Line_38 $$ sb.append(validAppAttemptId.toString()).append(" seems to have been generated illegally.")[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_57 $$ sb.append(" was recently stopped on node manager")[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_44 $$ conf.setInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS, 4 * 60 * 1000)[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_36 $$ org.apache.hadoop.yarn.api.records.Token invalidNMToken = tempManager.createNMToken(validAppAttemptId, validNode, user)[ FD ]
Line_25 $$ do -->Line_27 $$ tempManager.activateNextMasterKey()[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_25 $$ do [ CD ]
Line_14 $$ ContainerId validContainerId = ContainerId.newInstance(validAppAttemptId, 0)-->Line_52 $$ testStopContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false)[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_39 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_42 $$ sb.append(validAppAttemptId).append(" is not valid for current node manager.expected : ").append(validNode.toString()).append(" found : ").append(invalidNode.toString())[ CD ]
Line_4 $$ NMTokenSecretManagerInNM nmTokenSecretManagerNM = yarnCluster.getNodeManager(0).getNMContext().getNMTokenSecretManager()-->Line_54 $$ rollNMTokenMasterKey(nmTokenSecretManagerRM, nmTokenSecretManagerNM)[ FD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_57 $$ sb.append(" was recently stopped on node manager")[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_62 $$ sb.append(" is not handled by this NodeManager")[ FD ]
Line_22 $$ StringBuilder sb-->Line_39 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")-->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_64 $$ ApplicationAttemptId attempt2 = ApplicationAttemptId.newInstance(appId, 2)[ CD ]
Line_5 $$ RMContainerTokenSecretManager containerTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getContainerTokenSecretManager()-->Line_66 $$ org.apache.hadoop.yarn.api.records.Token newContainerToken = containerTokenSecretManager.createContainerToken(ContainerId.newInstance(attempt2, 1), validNode, user, r, Priority.newInstance(0), 0)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_11 $$ Resource r = Resource.newInstance(1024, 1)[ CD ]
Line_22 $$ StringBuilder sb-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ FD ]
Line_17 $$ org.apache.hadoop.yarn.api.records.Token validNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)-->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ FD ]
Line_12 $$ ApplicationId appId = ApplicationId.newInstance(1, 1)-->Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_38 $$ sb.append(validAppAttemptId.toString()).append(" seems to have been generated illegally.")[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")[ CD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_42 $$ sb.append(validAppAttemptId).append(" is not valid for current node manager.expected : ").append(validNode.toString()).append(" found : ").append(invalidNode.toString())[ FD ]
Line_22 $$ StringBuilder sb-->Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")[ FD ]
Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)-->Line_46 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, false).isEmpty())[ FD ]
Line_10 $$ String user = "test"-->Line_40 $$ invalidNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, invalidNode, user)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_8 $$ Assert.assertEquals(nmTokenSecretManagerNM.getCurrentKey().getKeyId(), nmTokenSecretManagerRM.getCurrentKey().getKeyId())[ CD ]
Line_19 $$ ContainerTokenIdentifier identifier = BuilderUtils.newContainerTokenIdentifier(validContainerToken)-->Line_21 $$ Assert.assertEquals(1234, identifier.getCreationTime())[ FD ]
Line_17 $$ org.apache.hadoop.yarn.api.records.Token validNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)-->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_61 $$ sb.append(validContainerId.toString())[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_47 $$ Assert.assertTrue(nmTokenSecretManagerNM.isAppAttemptNMTokenKeyPresent(validAppAttemptId))[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)[ FD ]
Line_16 $$ NodeId invalidNode = NodeId.newInstance("InvalidHost", 1234)-->Line_40 $$ invalidNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, invalidNode, user)[ FD ]
Line_16 $$ NodeId invalidNode = NodeId.newInstance("InvalidHost", 1234)-->Line_42 $$ sb.append(validAppAttemptId).append(" is not valid for current node manager.expected : ").append(validNode.toString()).append(" found : ").append(invalidNode.toString())[ FD ]
Line_10 $$ String user = "test"-->Line_45 $$ validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(0), 0)[ FD ]
Line_55 $$ sb = new StringBuilder("Container ")-->Line_62 $$ sb.append(" is not handled by this NodeManager")[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_47 $$ Assert.assertTrue(nmTokenSecretManagerNM.isAppAttemptNMTokenKeyPresent(validAppAttemptId))[ CD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_60 $$ sb = new StringBuilder("Container ")[ FD ]
Line_23 $$ NMTokenSecretManagerInRM tempManager = new NMTokenSecretManagerInRM(conf)-->Line_24 $$ tempManager.rollMasterKey()[ FD ]
Line_45 $$ validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(0), 0)-->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_60 $$ sb = new StringBuilder("Container ")[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_40 $$ invalidNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, invalidNode, user)[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_39 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_21 $$ Assert.assertEquals(1234, identifier.getCreationTime())[ CD ]
Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_34 $$ String errorMsg = testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, null, true)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()[ CD ]
Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_52 $$ testStopContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false)[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_45 $$ validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(0), 0)[ FD ]
Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)-->Line_45 $$ validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(0), 0)[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_35 $$ Assert.assertTrue(errorMsg.contains(sb.toString()))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_4 $$ NMTokenSecretManagerInNM nmTokenSecretManagerNM = yarnCluster.getNodeManager(0).getNMContext().getNMTokenSecretManager()[ CD ]
Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")-->Line_50 $$ sb.append(validContainerId)[ FD ]
Line_17 $$ org.apache.hadoop.yarn.api.records.Token validNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_38 $$ sb.append(validAppAttemptId.toString()).append(" seems to have been generated illegally.")[ FD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")[ FD ]
Line_55 $$ sb = new StringBuilder("Container ")-->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_67 $$ Assert.assertTrue(testStartContainer(rpc, attempt2, validNode, newContainerToken, attempt1NMToken, false).isEmpty())[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_56 $$ sb.append(validContainerId)[ CD ]
Line_23 $$ NMTokenSecretManagerInRM tempManager = new NMTokenSecretManagerInRM(conf)-->Line_27 $$ tempManager.activateNextMasterKey()[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_17 $$ org.apache.hadoop.yarn.api.records.Token validNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)[ FD ]
Line_5 $$ RMContainerTokenSecretManager containerTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getContainerTokenSecretManager()-->Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)[ FD ]
Line_14 $$ ContainerId validContainerId = ContainerId.newInstance(validAppAttemptId, 0)-->Line_50 $$ sb.append(validContainerId)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_46 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, false).isEmpty())[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_16 $$ NodeId invalidNode = NodeId.newInstance("InvalidHost", 1234)[ CD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ FD ]
Line_22 $$ StringBuilder sb-->Line_60 $$ sb = new StringBuilder("Container ")[ FD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_17 $$ org.apache.hadoop.yarn.api.records.Token validNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")[ FD ]
Line_14 $$ ContainerId validContainerId = ContainerId.newInstance(validAppAttemptId, 0)-->Line_61 $$ sb.append(validContainerId.toString())[ FD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_50 $$ sb.append(validContainerId)[ FD ]
Line_29 $$ if (UserGroupInformation.isSecurityEnabled()) -->Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")[ CD ]
Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)-->Line_34 $$ String errorMsg = testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, null, true)[ FD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_52 $$ testStopContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false)[ FD ]
Line_22 $$ StringBuilder sb-->Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")[ FD ]
Line_25 $$ do -->Line_26 $$ tempManager.rollMasterKey()[ CD ]
Line_14 $$ ContainerId validContainerId = ContainerId.newInstance(validAppAttemptId, 0)-->Line_48 $$ waitForContainerToFinishOnNM(validContainerId)[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_67 $$ Assert.assertTrue(testStartContainer(rpc, attempt2, validNode, newContainerToken, attempt1NMToken, false).isEmpty())[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_38 $$ sb.append(validAppAttemptId.toString()).append(" seems to have been generated illegally.")[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_66 $$ org.apache.hadoop.yarn.api.records.Token newContainerToken = containerTokenSecretManager.createContainerToken(ContainerId.newInstance(attempt2, 1), validNode, user, r, Priority.newInstance(0), 0)[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_7 $$ waitForNMToReceiveNMTokenKey(nmTokenSecretManagerNM, nm)[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_65 $$ Token attempt1NMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_24 $$ tempManager.rollMasterKey()[ CD ]
Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ FD ]
Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")-->Line_57 $$ sb.append(" was recently stopped on node manager")[ FD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_38 $$ sb.append(validAppAttemptId.toString()).append(" seems to have been generated illegally.")[ FD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_56 $$ sb.append(validContainerId)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_48 $$ waitForContainerToFinishOnNM(validContainerId)[ CD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_55 $$ sb = new StringBuilder("Container ")[ FD ]
Line_22 $$ StringBuilder sb-->Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")[ FD ]
Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")-->Line_60 $$ sb = new StringBuilder("Container ")[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_39 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_4 $$ NMTokenSecretManagerInNM nmTokenSecretManagerNM = yarnCluster.getNodeManager(0).getNMContext().getNMTokenSecretManager()-->Line_47 $$ Assert.assertTrue(nmTokenSecretManagerNM.isAppAttemptNMTokenKeyPresent(validAppAttemptId))[ FD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_19 $$ ContainerTokenIdentifier identifier = BuilderUtils.newContainerTokenIdentifier(validContainerToken)[ CD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ FD ]
Line_3 $$ NMTokenSecretManagerInRM nmTokenSecretManagerRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager()-->Line_65 $$ Token attempt1NMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)[ FD ]
Line_23 $$ NMTokenSecretManagerInRM tempManager = new NMTokenSecretManagerInRM(conf)-->Line_36 $$ org.apache.hadoop.yarn.api.records.Token invalidNMToken = tempManager.createNMToken(validAppAttemptId, validNode, user)[ FD ]
Line_22 $$ StringBuilder sb-->Line_57 $$ sb.append(" was recently stopped on node manager")[ FD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_56 $$ sb.append(validContainerId)[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ FD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_40 $$ invalidNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, invalidNode, user)[ FD ]
Line_22 $$ StringBuilder sb-->Line_55 $$ sb = new StringBuilder("Container ")[ FD ]
Line_3 $$ NMTokenSecretManagerInRM nmTokenSecretManagerRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager()-->Line_40 $$ invalidNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, invalidNode, user)[ FD ]
Line_36 $$ org.apache.hadoop.yarn.api.records.Token invalidNMToken = tempManager.createNMToken(validAppAttemptId, validNode, user)-->Line_43 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_34 $$ String errorMsg = testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, null, true)[ CD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")[ FD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_60 $$ sb = new StringBuilder("Container ")[ FD ]
Line_55 $$ sb = new StringBuilder("Container ")-->Line_57 $$ sb.append(" was recently stopped on node manager")[ FD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_50 $$ sb.append(validContainerId)[ FD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_10 $$ String user = "test"-->Line_65 $$ Token attempt1NMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_29 $$ if (UserGroupInformation.isSecurityEnabled()) [ CD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")[ FD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_43 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_50 $$ sb.append(validContainerId)[ FD ]
Line_60 $$ sb = new StringBuilder("Container ")-->Line_62 $$ sb.append(" is not handled by this NodeManager")[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_42 $$ sb.append(validAppAttemptId).append(" is not valid for current node manager.expected : ").append(validNode.toString()).append(" found : ").append(invalidNode.toString())[ FD ]
Line_64 $$ ApplicationAttemptId attempt2 = ApplicationAttemptId.newInstance(appId, 2)-->Line_66 $$ org.apache.hadoop.yarn.api.records.Token newContainerToken = containerTokenSecretManager.createContainerToken(ContainerId.newInstance(attempt2, 1), validNode, user, r, Priority.newInstance(0), 0)[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_42 $$ sb.append(validAppAttemptId).append(" is not valid for current node manager.expected : ").append(validNode.toString()).append(" found : ").append(invalidNode.toString())[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_62 $$ sb.append(" is not handled by this NodeManager")[ CD ]
Line_3 $$ NMTokenSecretManagerInRM nmTokenSecretManagerRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager()-->Line_54 $$ rollNMTokenMasterKey(nmTokenSecretManagerRM, nmTokenSecretManagerNM)[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_42 $$ sb.append(validAppAttemptId).append(" is not valid for current node manager.expected : ").append(validNode.toString()).append(" found : ").append(invalidNode.toString())[ FD ]
Line_14 $$ ContainerId validContainerId = ContainerId.newInstance(validAppAttemptId, 0)-->Line_45 $$ validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(0), 0)[ FD ]
Line_34 $$ String errorMsg = testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, null, true)-->Line_35 $$ Assert.assertTrue(errorMsg.contains(sb.toString()))[ FD ]
Line_23 $$ NMTokenSecretManagerInRM tempManager = new NMTokenSecretManagerInRM(conf)-->Line_25 $$ do [ FD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_61 $$ sb.append(validContainerId.toString())[ FD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_52 $$ testStopContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false)[ CD ]
Line_55 $$ sb = new StringBuilder("Container ")-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_44 $$ conf.setInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS, 4 * 60 * 1000)[ CD ]
Line_55 $$ sb = new StringBuilder("Container ")-->Line_56 $$ sb.append(validContainerId)[ FD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_39 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_14 $$ ContainerId validContainerId = ContainerId.newInstance(validAppAttemptId, 0)-->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_60 $$ sb = new StringBuilder("Container ")[ CD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_56 $$ sb.append(validContainerId)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_45 $$ validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(0), 0)[ CD ]
Line_5 $$ RMContainerTokenSecretManager containerTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getContainerTokenSecretManager()-->Line_45 $$ validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(0), 0)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_23 $$ NMTokenSecretManagerInRM tempManager = new NMTokenSecretManagerInRM(conf)[ CD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_43 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)[ CD ]
Line_11 $$ Resource r = Resource.newInstance(1024, 1)-->Line_45 $$ validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(0), 0)[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_61 $$ sb.append(validContainerId.toString())[ FD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_65 $$ Token attempt1NMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)[ FD ]
Line_4 $$ NMTokenSecretManagerInNM nmTokenSecretManagerNM = yarnCluster.getNodeManager(0).getNMContext().getNMTokenSecretManager()-->Line_8 $$ Assert.assertEquals(nmTokenSecretManagerNM.getCurrentKey().getKeyId(), nmTokenSecretManagerRM.getCurrentKey().getKeyId())[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_38 $$ sb.append(validAppAttemptId.toString()).append(" seems to have been generated illegally.")[ FD ]
Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")-->Line_56 $$ sb.append(validContainerId)[ FD ]
Line_10 $$ String user = "test"-->Line_66 $$ org.apache.hadoop.yarn.api.records.Token newContainerToken = containerTokenSecretManager.createContainerToken(ContainerId.newInstance(attempt2, 1), validNode, user, r, Priority.newInstance(0), 0)[ FD ]
Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)-->Line_19 $$ ContainerTokenIdentifier identifier = BuilderUtils.newContainerTokenIdentifier(validContainerToken)[ FD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_17 $$ org.apache.hadoop.yarn.api.records.Token validNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)[ CD ]
Line_22 $$ StringBuilder sb-->Line_62 $$ sb.append(" is not handled by this NodeManager")[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_62 $$ sb.append(" is not handled by this NodeManager")[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_10 $$ String user = "test"[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_50 $$ sb.append(validContainerId)[ CD ]
Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)-->Line_43 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_23 $$ NMTokenSecretManagerInRM tempManager = new NMTokenSecretManagerInRM(conf)-->Line_26 $$ tempManager.rollMasterKey()[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_61 $$ sb.append(validContainerId.toString())[ CD ]
Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_66 $$ org.apache.hadoop.yarn.api.records.Token newContainerToken = containerTokenSecretManager.createContainerToken(ContainerId.newInstance(attempt2, 1), validNode, user, r, Priority.newInstance(0), 0)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_3 $$ NMTokenSecretManagerInRM nmTokenSecretManagerRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager()[ CD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_61 $$ sb.append(validContainerId.toString())[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")[ FD ]
Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_43 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_39 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_14 $$ ContainerId validContainerId = ContainerId.newInstance(validAppAttemptId, 0)[ CD ]
Line_40 $$ invalidNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, invalidNode, user)-->Line_43 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ FD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ FD ]
Line_60 $$ sb = new StringBuilder("Container ")-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_22 $$ StringBuilder sb-->Line_43 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_43 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_62 $$ sb.append(" is not handled by this NodeManager")[ FD ]
Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")-->Line_61 $$ sb.append(validContainerId.toString())[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_50 $$ sb.append(validContainerId)[ FD ]
Line_6 $$ NodeManager nm = yarnCluster.getNodeManager(0)-->Line_59 $$ nm.getNodeStatusUpdater().clearFinishedContainersFromCache()[ FD ]
Line_10 $$ String user = "test"-->Line_36 $$ org.apache.hadoop.yarn.api.records.Token invalidNMToken = tempManager.createNMToken(validAppAttemptId, validNode, user)[ FD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_60 $$ sb = new StringBuilder("Container ")[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_57 $$ sb.append(" was recently stopped on node manager")[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_22 $$ StringBuilder sb[ CD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_36 $$ org.apache.hadoop.yarn.api.records.Token invalidNMToken = tempManager.createNMToken(validAppAttemptId, validNode, user)[ CD ]
Line_22 $$ StringBuilder sb-->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ FD ]
Line_17 $$ org.apache.hadoop.yarn.api.records.Token validNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)-->Line_52 $$ testStopContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false)[ FD ]
Line_22 $$ StringBuilder sb-->Line_61 $$ sb.append(validContainerId.toString())[ FD ]
Line_60 $$ sb = new StringBuilder("Container ")-->Line_61 $$ sb.append(validContainerId.toString())[ FD ]
Line_10 $$ String user = "test"-->Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)[ FD ]
Line_36 $$ org.apache.hadoop.yarn.api.records.Token invalidNMToken = tempManager.createNMToken(validAppAttemptId, validNode, user)-->Line_39 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_55 $$ sb = new StringBuilder("Container ")[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")[ CD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_43 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)[ CD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_39 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_20 $$ Assert.assertEquals(Priority.newInstance(10), identifier.getPriority())[ CD ]
Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)-->Line_39 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_4 $$ NMTokenSecretManagerInNM nmTokenSecretManagerNM = yarnCluster.getNodeManager(0).getNMContext().getNMTokenSecretManager()-->Line_53 $$ rollNMTokenMasterKey(nmTokenSecretManagerRM, nmTokenSecretManagerNM)[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_57 $$ sb.append(" was recently stopped on node manager")[ FD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ FD ]
Line_22 $$ StringBuilder sb-->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")[ FD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_42 $$ sb.append(validAppAttemptId).append(" is not valid for current node manager.expected : ").append(validNode.toString()).append(" found : ").append(invalidNode.toString())[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ CD ]
Line_36 $$ org.apache.hadoop.yarn.api.records.Token invalidNMToken = tempManager.createNMToken(validAppAttemptId, validNode, user)-->Line_40 $$ invalidNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, invalidNode, user)[ FD ]
Line_3 $$ NMTokenSecretManagerInRM nmTokenSecretManagerRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager()-->Line_8 $$ Assert.assertEquals(nmTokenSecretManagerNM.getCurrentKey().getKeyId(), nmTokenSecretManagerRM.getCurrentKey().getKeyId())[ FD ]
Line_4 $$ NMTokenSecretManagerInNM nmTokenSecretManagerNM = yarnCluster.getNodeManager(0).getNMContext().getNMTokenSecretManager()-->Line_7 $$ waitForNMToReceiveNMTokenKey(nmTokenSecretManagerNM, nm)[ FD ]
Line_22 $$ StringBuilder sb-->Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")[ FD ]
Line_22 $$ StringBuilder sb-->Line_35 $$ Assert.assertTrue(errorMsg.contains(sb.toString()))[ FD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_34 $$ String errorMsg = testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, null, true)[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_46 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, false).isEmpty())[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_54 $$ rollNMTokenMasterKey(nmTokenSecretManagerRM, nmTokenSecretManagerNM)[ CD ]
Line_64 $$ ApplicationAttemptId attempt2 = ApplicationAttemptId.newInstance(appId, 2)-->Line_67 $$ Assert.assertTrue(testStartContainer(rpc, attempt2, validNode, newContainerToken, attempt1NMToken, false).isEmpty())[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_34 $$ String errorMsg = testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, null, true)[ FD ]
Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_67 $$ Assert.assertTrue(testStartContainer(rpc, attempt2, validNode, newContainerToken, attempt1NMToken, false).isEmpty())[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_43 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_12 $$ ApplicationId appId = ApplicationId.newInstance(1, 1)[ CD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_14 $$ ContainerId validContainerId = ContainerId.newInstance(validAppAttemptId, 0)[ FD ]
Line_11 $$ Resource r = Resource.newInstance(1024, 1)-->Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_55 $$ sb = new StringBuilder("Container ")[ CD ]
Line_12 $$ ApplicationId appId = ApplicationId.newInstance(1, 1)-->Line_64 $$ ApplicationAttemptId attempt2 = ApplicationAttemptId.newInstance(appId, 2)[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_56 $$ sb.append(validContainerId)[ FD ]
Line_22 $$ StringBuilder sb-->Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")[ FD ]
Line_45 $$ validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(0), 0)-->Line_46 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, false).isEmpty())[ FD ]
Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")-->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ FD ]
Line_14 $$ ContainerId validContainerId = ContainerId.newInstance(validAppAttemptId, 0)-->Line_56 $$ sb.append(validContainerId)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_53 $$ rollNMTokenMasterKey(nmTokenSecretManagerRM, nmTokenSecretManagerNM)[ CD ]
Line_14 $$ ContainerId validContainerId = ContainerId.newInstance(validAppAttemptId, 0)-->Line_63 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false).contains(sb.toString()))[ FD ]
Line_11 $$ Resource r = Resource.newInstance(1024, 1)-->Line_66 $$ org.apache.hadoop.yarn.api.records.Token newContainerToken = containerTokenSecretManager.createContainerToken(ContainerId.newInstance(attempt2, 1), validNode, user, r, Priority.newInstance(0), 0)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_35 $$ Assert.assertTrue(errorMsg.contains(sb.toString()))[ CD ]
Line_22 $$ StringBuilder sb-->Line_50 $$ sb.append(validContainerId)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_59 $$ nm.getNodeStatusUpdater().clearFinishedContainersFromCache()[ CD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_36 $$ org.apache.hadoop.yarn.api.records.Token invalidNMToken = tempManager.createNMToken(validAppAttemptId, validNode, user)[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")[ CD ]
Line_13 $$ ApplicationAttemptId validAppAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_46 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, false).isEmpty())[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_55 $$ sb = new StringBuilder("Container ")[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_6 $$ NodeManager nm = yarnCluster.getNodeManager(0)[ CD ]
Line_22 $$ StringBuilder sb-->Line_56 $$ sb.append(validContainerId)[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_43 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_14 $$ ContainerId validContainerId = ContainerId.newInstance(validAppAttemptId, 0)-->Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)[ FD ]
Line_3 $$ NMTokenSecretManagerInRM nmTokenSecretManagerRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager()-->Line_25 $$ do [ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_43 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ CD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_57 $$ sb.append(" was recently stopped on node manager")[ FD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_58 $$ Assert.assertTrue(testGetContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, true).contains(sb.toString()))[ FD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_62 $$ sb.append(" is not handled by this NodeManager")[ FD ]
Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")-->Line_62 $$ sb.append(" is not handled by this NodeManager")[ FD ]
Line_65 $$ Token attempt1NMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)-->Line_67 $$ Assert.assertTrue(testStartContainer(rpc, attempt2, validNode, newContainerToken, attempt1NMToken, false).isEmpty())[ FD ]
Line_66 $$ org.apache.hadoop.yarn.api.records.Token newContainerToken = containerTokenSecretManager.createContainerToken(ContainerId.newInstance(attempt2, 1), validNode, user, r, Priority.newInstance(0), 0)-->Line_67 $$ Assert.assertTrue(testStartContainer(rpc, attempt2, validNode, newContainerToken, attempt1NMToken, false).isEmpty())[ FD ]
Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_46 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, false).isEmpty())[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_65 $$ Token attempt1NMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)[ FD ]
Line_55 $$ sb = new StringBuilder("Container ")-->Line_61 $$ sb.append(validContainerId.toString())[ FD ]
Line_3 $$ NMTokenSecretManagerInRM nmTokenSecretManagerRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager()-->Line_17 $$ org.apache.hadoop.yarn.api.records.Token validNMToken = nmTokenSecretManagerRM.createNMToken(validAppAttemptId, validNode, user)[ FD ]
Line_18 $$ org.apache.hadoop.yarn.api.records.Token validContainerToken = containerTokenSecretManager.createContainerToken(validContainerId, validNode, user, r, Priority.newInstance(10), 1234)-->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ FD ]
Line_37 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")[ FD ]
Line_15 $$ NodeId validNode = yarnCluster.getNodeManager(0).getNMContext().getNodeId()-->Line_52 $$ testStopContainer(rpc, validAppAttemptId, validNode, validContainerId, validNMToken, false)[ FD ]
Line_30 $$ sb = new StringBuilder("Client cannot authenticate via:[TOKEN]")-->Line_35 $$ Assert.assertTrue(errorMsg.contains(sb.toString()))[ FD ]
Line_32 $$ sb = new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]")-->Line_39 $$ Assert.assertTrue(sb.toString().contains(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, invalidNMToken, true)))[ FD ]
Line_22 $$ StringBuilder sb-->Line_42 $$ sb.append(validAppAttemptId).append(" is not valid for current node manager.expected : ").append(validNode.toString()).append(" found : ").append(invalidNode.toString())[ FD ]
Line_2 $$ private void testNMTokens(Configuration conf) throws Exception -->Line_51 $$ Assert.assertTrue(testStartContainer(rpc, validAppAttemptId, validNode, validContainerToken, validNMToken, true).contains(sb.toString()))[ CD ]
Line_49 $$ sb = new StringBuilder("Attempt to relaunch the same container with id ")-->Line_55 $$ sb = new StringBuilder("Container ")[ FD ]
Line_41 $$ sb = new StringBuilder("Given NMToken for application : ")-->Line_42 $$ sb.append(validAppAttemptId).append(" is not valid for current node manager.expected : ").append(validNode.toString()).append(" found : ").append(invalidNode.toString())[ FD ]
