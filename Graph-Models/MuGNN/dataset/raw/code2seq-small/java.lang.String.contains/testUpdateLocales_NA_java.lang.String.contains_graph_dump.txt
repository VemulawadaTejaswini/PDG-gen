Line_7 $$ Map<String, Serializable> publishLayoutLocalSettingsMap = ExportImportConfigurationSettingsMapFactory.buildPublishLayoutLocalSettingsMap(user, _sourceGroup.getGroupId(), _targetGroup.getGroupId(), false, ExportImportHelperUtil.getAllLayoutIds(_sourceGroup.getGroupId(), false), parameterMap)-->Line_8 $$ ExportImportConfiguration exportImportConfiguration = ExportImportConfigurationLocalServiceUtil.addDraftExportImportConfiguration(user.getUserId(), ExportImportConfigurationConstants.TYPE_PUBLISH_LAYOUT_LOCAL, publishLayoutLocalSettingsMap)[ FD ]
Line_4 $$ JournalArticle article = JournalTestUtil.addArticle(_sourceGroup.getGroupId(), "Title", "content", LocaleUtil.fromLanguageId(defaultContentLanguageId))-->Line_16 $$ Assert.assertEquals(article.getDefaultLanguageId(), stagingArticle.getDefaultLanguageId())[ FD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_24 $$ Assert.assertEquals(article.getTitle(defaultLanguageId), stagingArticle.getTitle(locale))[ FD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_14 $$ JournalArticle stagingArticle = JournalArticleLocalServiceUtil.getLatestArticle(articleResource.getResourcePrimKey(), WorkflowConstants.STATUS_ANY, false)[ CD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_15 $$ if (languageIds.contains(defaultContentLanguageId)) [ FD ]
Line_20 $$ for (Locale locale : _locales) -->Line_22 $$ Assert.assertEquals(article.getTitle(locale), stagingArticle.getTitle(locale))[ FD ]
Line_8 $$ ExportImportConfiguration exportImportConfiguration = ExportImportConfigurationLocalServiceUtil.addDraftExportImportConfiguration(user.getUserId(), ExportImportConfigurationConstants.TYPE_PUBLISH_LAYOUT_LOCAL, publishLayoutLocalSettingsMap)-->Line_9 $$ File file = ExportImportLocalServiceUtil.exportLayoutsAsFile(exportImportConfiguration)[ FD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_3 $$ GroupTestUtil.enableLocalStaging(_sourceGroup)[ CD ]
Line_4 $$ JournalArticle article = JournalTestUtil.addArticle(_sourceGroup.getGroupId(), "Title", "content", LocaleUtil.fromLanguageId(defaultContentLanguageId))-->Line_12 $$ JournalArticleResource articleResource = JournalArticleResourceLocalServiceUtil.fetchJournalArticleResourceByUuidAndGroupId(article.getArticleResourceUuid(), _targetGroup.getGroupId())[ FD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_18 $$ Assert.assertEquals(defaultLanguageId, stagingArticle.getDefaultLanguageId())[ FD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_4 $$ JournalArticle article = JournalTestUtil.addArticle(_sourceGroup.getGroupId(), "Title", "content", LocaleUtil.fromLanguageId(defaultContentLanguageId))[ CD ]
Line_14 $$ JournalArticle stagingArticle = JournalArticleLocalServiceUtil.getLatestArticle(articleResource.getResourcePrimKey(), WorkflowConstants.STATUS_ANY, false)-->Line_18 $$ Assert.assertEquals(defaultLanguageId, stagingArticle.getDefaultLanguageId())[ FD ]
Line_20 $$ for (Locale locale : _locales) -->Line_24 $$ Assert.assertEquals(article.getTitle(defaultLanguageId), stagingArticle.getTitle(locale))[ FD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_10 $$ CompanyTestUtil.resetCompanyLocales(TestPropsValues.getCompanyId(), languageIds, defaultLanguageId)[ CD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_9 $$ File file = ExportImportLocalServiceUtil.exportLayoutsAsFile(exportImportConfiguration)[ CD ]
Line_8 $$ ExportImportConfiguration exportImportConfiguration = ExportImportConfigurationLocalServiceUtil.addDraftExportImportConfiguration(user.getUserId(), ExportImportConfigurationConstants.TYPE_PUBLISH_LAYOUT_LOCAL, publishLayoutLocalSettingsMap)-->Line_11 $$ ExportImportLocalServiceUtil.importLayouts(exportImportConfiguration, file)[ FD ]
Line_15 $$ if (languageIds.contains(defaultContentLanguageId)) -->Line_16 $$ Assert.assertEquals(article.getDefaultLanguageId(), stagingArticle.getDefaultLanguageId())[ CD ]
Line_12 $$ JournalArticleResource articleResource = JournalArticleResourceLocalServiceUtil.fetchJournalArticleResourceByUuidAndGroupId(article.getArticleResourceUuid(), _targetGroup.getGroupId())-->Line_13 $$ Assert.assertNotNull(articleResource)[ FD ]
Line_4 $$ JournalArticle article = JournalTestUtil.addArticle(_sourceGroup.getGroupId(), "Title", "content", LocaleUtil.fromLanguageId(defaultContentLanguageId))-->Line_22 $$ Assert.assertEquals(article.getTitle(locale), stagingArticle.getTitle(locale))[ FD ]
Line_12 $$ JournalArticleResource articleResource = JournalArticleResourceLocalServiceUtil.fetchJournalArticleResourceByUuidAndGroupId(article.getArticleResourceUuid(), _targetGroup.getGroupId())-->Line_14 $$ JournalArticle stagingArticle = JournalArticleLocalServiceUtil.getLatestArticle(articleResource.getResourcePrimKey(), WorkflowConstants.STATUS_ANY, false)[ FD ]
Line_21 $$ if (languageIds.contains(LocaleUtil.toLanguageId(locale)) || languageIds.contains(defaultContentLanguageId)) -->Line_22 $$ Assert.assertEquals(article.getTitle(locale), stagingArticle.getTitle(locale))[ CD ]
Line_21 $$ if (languageIds.contains(LocaleUtil.toLanguageId(locale)) || languageIds.contains(defaultContentLanguageId)) -->Line_24 $$ Assert.assertEquals(article.getTitle(defaultLanguageId), stagingArticle.getTitle(locale))[ CD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_6 $$ Map<String, String[]> parameterMap = ExportImportConfigurationParameterMapFactory.buildParameterMap()[ CD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_8 $$ ExportImportConfiguration exportImportConfiguration = ExportImportConfigurationLocalServiceUtil.addDraftExportImportConfiguration(user.getUserId(), ExportImportConfigurationConstants.TYPE_PUBLISH_LAYOUT_LOCAL, publishLayoutLocalSettingsMap)[ CD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_7 $$ Map<String, Serializable> publishLayoutLocalSettingsMap = ExportImportConfigurationSettingsMapFactory.buildPublishLayoutLocalSettingsMap(user, _sourceGroup.getGroupId(), _targetGroup.getGroupId(), false, ExportImportHelperUtil.getAllLayoutIds(_sourceGroup.getGroupId(), false), parameterMap)[ CD ]
Line_6 $$ Map<String, String[]> parameterMap = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_7 $$ Map<String, Serializable> publishLayoutLocalSettingsMap = ExportImportConfigurationSettingsMapFactory.buildPublishLayoutLocalSettingsMap(user, _sourceGroup.getGroupId(), _targetGroup.getGroupId(), false, ExportImportHelperUtil.getAllLayoutIds(_sourceGroup.getGroupId(), false), parameterMap)[ FD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_5 $$ User user = TestPropsValues.getUser()[ CD ]
Line_20 $$ for (Locale locale : _locales) -->Line_21 $$ if (languageIds.contains(LocaleUtil.toLanguageId(locale)) || languageIds.contains(defaultContentLanguageId)) [ FD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_11 $$ ExportImportLocalServiceUtil.importLayouts(exportImportConfiguration, file)[ CD ]
Line_5 $$ User user = TestPropsValues.getUser()-->Line_7 $$ Map<String, Serializable> publishLayoutLocalSettingsMap = ExportImportConfigurationSettingsMapFactory.buildPublishLayoutLocalSettingsMap(user, _sourceGroup.getGroupId(), _targetGroup.getGroupId(), false, ExportImportHelperUtil.getAllLayoutIds(_sourceGroup.getGroupId(), false), parameterMap)[ FD ]
Line_14 $$ JournalArticle stagingArticle = JournalArticleLocalServiceUtil.getLatestArticle(articleResource.getResourcePrimKey(), WorkflowConstants.STATUS_ANY, false)-->Line_16 $$ Assert.assertEquals(article.getDefaultLanguageId(), stagingArticle.getDefaultLanguageId())[ FD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_21 $$ if (languageIds.contains(LocaleUtil.toLanguageId(locale)) || languageIds.contains(defaultContentLanguageId)) [ FD ]
Line_4 $$ JournalArticle article = JournalTestUtil.addArticle(_sourceGroup.getGroupId(), "Title", "content", LocaleUtil.fromLanguageId(defaultContentLanguageId))-->Line_24 $$ Assert.assertEquals(article.getTitle(defaultLanguageId), stagingArticle.getTitle(locale))[ FD ]
Line_14 $$ JournalArticle stagingArticle = JournalArticleLocalServiceUtil.getLatestArticle(articleResource.getResourcePrimKey(), WorkflowConstants.STATUS_ANY, false)-->Line_22 $$ Assert.assertEquals(article.getTitle(locale), stagingArticle.getTitle(locale))[ FD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_4 $$ JournalArticle article = JournalTestUtil.addArticle(_sourceGroup.getGroupId(), "Title", "content", LocaleUtil.fromLanguageId(defaultContentLanguageId))[ FD ]
Line_15 $$ if (languageIds.contains(defaultContentLanguageId)) -->Line_18 $$ Assert.assertEquals(defaultLanguageId, stagingArticle.getDefaultLanguageId())[ CD ]
Line_5 $$ User user = TestPropsValues.getUser()-->Line_8 $$ ExportImportConfiguration exportImportConfiguration = ExportImportConfigurationLocalServiceUtil.addDraftExportImportConfiguration(user.getUserId(), ExportImportConfigurationConstants.TYPE_PUBLISH_LAYOUT_LOCAL, publishLayoutLocalSettingsMap)[ FD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_12 $$ JournalArticleResource articleResource = JournalArticleResourceLocalServiceUtil.fetchJournalArticleResourceByUuidAndGroupId(article.getArticleResourceUuid(), _targetGroup.getGroupId())[ CD ]
Line_14 $$ JournalArticle stagingArticle = JournalArticleLocalServiceUtil.getLatestArticle(articleResource.getResourcePrimKey(), WorkflowConstants.STATUS_ANY, false)-->Line_24 $$ Assert.assertEquals(article.getTitle(defaultLanguageId), stagingArticle.getTitle(locale))[ FD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_13 $$ Assert.assertNotNull(articleResource)[ CD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_15 $$ if (languageIds.contains(defaultContentLanguageId)) [ CD ]
Line_2 $$ protected void testUpdateLocales(String defaultLanguageId, String languageIds, String defaultContentLanguageId) throws Exception -->Line_10 $$ CompanyTestUtil.resetCompanyLocales(TestPropsValues.getCompanyId(), languageIds, defaultLanguageId)[ FD ]
Line_9 $$ File file = ExportImportLocalServiceUtil.exportLayoutsAsFile(exportImportConfiguration)-->Line_11 $$ ExportImportLocalServiceUtil.importLayouts(exportImportConfiguration, file)[ FD ]
