Line_2 $$ public void testExportDLReferences() throws Exception -->Line_5 $$ List<String> urls = getURLs(content)[ CD ]
Line_13 $$ List<String> binaryEntries = testReaderWriter.getBinaryEntries()-->Line_14 $$ Assert.assertEquals(binaryEntries.size(), entries.size())[ FD ]
Line_10 $$ TestReaderWriter testReaderWriter = (TestReaderWriter) _portletDataContextExport.getZipWriter()-->Line_13 $$ List<String> binaryEntries = testReaderWriter.getBinaryEntries()[ FD ]
Line_10 $$ TestReaderWriter testReaderWriter = (TestReaderWriter) _portletDataContextExport.getZipWriter()-->Line_15 $$ for (String entry : testReaderWriter.getEntries()) [ FD ]
Line_4 $$ String content = replaceParameters(getContent("dl_references.txt"), _fileEntry)-->Line_8 $$ Assert.assertFalse(content.contains(url))[ FD ]
Line_11 $$ List<String> entries = testReaderWriter.getEntries()-->Line_12 $$ Assert.assertEquals(entries.size(), 1)[ FD ]
Line_4 $$ String content = replaceParameters(getContent("dl_references.txt"), _fileEntry)-->Line_5 $$ List<String> urls = getURLs(content)[ FD ]
Line_2 $$ public void testExportDLReferences() throws Exception -->Line_12 $$ Assert.assertEquals(entries.size(), 1)[ CD ]
Line_4 $$ String content = replaceParameters(getContent("dl_references.txt"), _fileEntry)-->Line_16 $$ Assert.assertTrue(content.contains("[$dl-reference=" + entry + "$]"))[ FD ]
Line_6 $$ content = ExportImportHelperUtil.replaceExportContentReferences(_portletDataContextExport, _referrerStagedModel, content, true)-->Line_16 $$ Assert.assertTrue(content.contains("[$dl-reference=" + entry + "$]"))[ FD ]
Line_2 $$ public void testExportDLReferences() throws Exception -->Line_6 $$ content = ExportImportHelperUtil.replaceExportContentReferences(_portletDataContextExport, _referrerStagedModel, content, true)[ CD ]
Line_10 $$ TestReaderWriter testReaderWriter = (TestReaderWriter) _portletDataContextExport.getZipWriter()-->Line_11 $$ List<String> entries = testReaderWriter.getEntries()[ FD ]
Line_2 $$ public void testExportDLReferences() throws Exception -->Line_14 $$ Assert.assertEquals(binaryEntries.size(), entries.size())[ CD ]
Line_11 $$ List<String> entries = testReaderWriter.getEntries()-->Line_14 $$ Assert.assertEquals(binaryEntries.size(), entries.size())[ FD ]
Line_6 $$ content = ExportImportHelperUtil.replaceExportContentReferences(_portletDataContextExport, _referrerStagedModel, content, true)-->Line_8 $$ Assert.assertFalse(content.contains(url))[ FD ]
Line_2 $$ public void testExportDLReferences() throws Exception -->Line_3 $$ _portletDataContextExport.setZipWriter(new TestReaderWriter())[ CD ]
Line_2 $$ public void testExportDLReferences() throws Exception -->Line_10 $$ TestReaderWriter testReaderWriter = (TestReaderWriter) _portletDataContextExport.getZipWriter()[ CD ]
Line_2 $$ public void testExportDLReferences() throws Exception -->Line_13 $$ List<String> binaryEntries = testReaderWriter.getBinaryEntries()[ CD ]
Line_2 $$ public void testExportDLReferences() throws Exception -->Line_11 $$ List<String> entries = testReaderWriter.getEntries()[ CD ]
Line_2 $$ public void testExportDLReferences() throws Exception -->Line_4 $$ String content = replaceParameters(getContent("dl_references.txt"), _fileEntry)[ CD ]
Line_7 $$ for (String url : urls) -->Line_8 $$ Assert.assertFalse(content.contains(url))[ FD ]
Line_4 $$ String content = replaceParameters(getContent("dl_references.txt"), _fileEntry)-->Line_6 $$ content = ExportImportHelperUtil.replaceExportContentReferences(_portletDataContextExport, _referrerStagedModel, content, true)[ FD ]
