Line_14 $$ Module module = ModuleUtilCore.findModuleForPsiElement(aClass)-->Line_17 $$ PsiClass[] classes = JavaPsiFacade.getInstance(aClass.getProject()).findClasses(qualifiedName, GlobalSearchScope.moduleScope(module))[ FD ]
Line_15 $$ if (module == null)-->Line_16 $$ return null[ CD ]
Line_20 $$ String dupFileName = null-->Line_30 $$ if (dupFileName == null)[ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_34 $$ return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(textRange).descriptionAndTooltip(message).create()[ CD ]
Line_11 $$ numOfClassesToFind = 1-->Line_18 $$ if (classes.length < numOfClassesToFind)[ FD ]
Line_8 $$ int numOfClassesToFind = 2-->Line_18 $$ if (classes.length < numOfClassesToFind)[ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_22 $$ if (dupClass != aClass) [ FD ]
Line_32 $$ String message = JavaErrorMessages.message("duplicate.class.in.other.file", dupFileName)-->Line_34 $$ return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(textRange).descriptionAndTooltip(message).create()[ FD ]
Line_33 $$ TextRange textRange = HighlightNamesUtil.getClassDeclarationTextRange(aClass)-->Line_34 $$ return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(textRange).descriptionAndTooltip(message).create()[ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_3 $$ if (!(aClass.getParent() instanceof PsiFile))[ FD ]
Line_10 $$ qualifiedName = qualifiedName.replaceAll("\\$", ".")-->Line_17 $$ PsiClass[] classes = JavaPsiFacade.getInstance(aClass.getProject()).findClasses(qualifiedName, GlobalSearchScope.moduleScope(module))[ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_3 $$ if (!(aClass.getParent() instanceof PsiFile))[ CD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_8 $$ int numOfClassesToFind = 2[ CD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_14 $$ Module module = ModuleUtilCore.findModuleForPsiElement(aClass)[ FD ]
Line_13 $$ PsiManager manager = aClass.getManager()-->Line_24 $$ if (file != null && manager.isInProject(dupClass)) [ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_13 $$ PsiManager manager = aClass.getManager()[ FD ]
Line_18 $$ if (classes.length < numOfClassesToFind)-->Line_19 $$ return null[ CD ]
Line_30 $$ if (dupFileName == null)-->Line_31 $$ return null[ CD ]
Line_25 $$ dupFileName = FileUtil.toSystemDependentName(file.getPath())-->Line_32 $$ String message = JavaErrorMessages.message("duplicate.class.in.other.file", dupFileName)[ FD ]
Line_9 $$ if (qualifiedName.contains("$")) -->Line_10 $$ qualifiedName = qualifiedName.replaceAll("\\$", ".")[ CD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_5 $$ String qualifiedName = aClass.getQualifiedName()[ CD ]
Line_5 $$ String qualifiedName = aClass.getQualifiedName()-->Line_17 $$ PsiClass[] classes = JavaPsiFacade.getInstance(aClass.getProject()).findClasses(qualifiedName, GlobalSearchScope.moduleScope(module))[ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_15 $$ if (module == null)[ CD ]
Line_20 $$ String dupFileName = null-->Line_32 $$ String message = JavaErrorMessages.message("duplicate.class.in.other.file", dupFileName)[ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_5 $$ String qualifiedName = aClass.getQualifiedName()[ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_33 $$ TextRange textRange = HighlightNamesUtil.getClassDeclarationTextRange(aClass)[ FD ]
Line_22 $$ if (dupClass != aClass) -->Line_24 $$ if (file != null && manager.isInProject(dupClass)) [ CD ]
Line_20 $$ String dupFileName = null-->Line_25 $$ dupFileName = FileUtil.toSystemDependentName(file.getPath())[ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_14 $$ Module module = ModuleUtilCore.findModuleForPsiElement(aClass)[ CD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_32 $$ String message = JavaErrorMessages.message("duplicate.class.in.other.file", dupFileName)[ CD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_33 $$ TextRange textRange = HighlightNamesUtil.getClassDeclarationTextRange(aClass)[ CD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_30 $$ if (dupFileName == null)[ CD ]
Line_8 $$ int numOfClassesToFind = 2-->Line_11 $$ numOfClassesToFind = 1[ FD ]
Line_5 $$ String qualifiedName = aClass.getQualifiedName()-->Line_10 $$ qualifiedName = qualifiedName.replaceAll("\\$", ".")[ FD ]
Line_6 $$ if (qualifiedName == null)-->Line_7 $$ return null[ CD ]
Line_5 $$ String qualifiedName = aClass.getQualifiedName()-->Line_9 $$ if (qualifiedName.contains("$")) [ FD ]
Line_23 $$ VirtualFile file = dupClass.getContainingFile().getVirtualFile()-->Line_25 $$ dupFileName = FileUtil.toSystemDependentName(file.getPath())[ FD ]
Line_21 $$ for (PsiClass dupClass : classes) -->Line_24 $$ if (file != null && manager.isInProject(dupClass)) [ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_13 $$ PsiManager manager = aClass.getManager()[ CD ]
Line_14 $$ Module module = ModuleUtilCore.findModuleForPsiElement(aClass)-->Line_15 $$ if (module == null)[ FD ]
Line_21 $$ for (PsiClass dupClass : classes) -->Line_23 $$ VirtualFile file = dupClass.getContainingFile().getVirtualFile()[ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_17 $$ PsiClass[] classes = JavaPsiFacade.getInstance(aClass.getProject()).findClasses(qualifiedName, GlobalSearchScope.moduleScope(module))[ CD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_18 $$ if (classes.length < numOfClassesToFind)[ CD ]
Line_3 $$ if (!(aClass.getParent() instanceof PsiFile))-->Line_4 $$ return null[ CD ]
Line_5 $$ String qualifiedName = aClass.getQualifiedName()-->Line_6 $$ if (qualifiedName == null)[ FD ]
Line_24 $$ if (file != null && manager.isInProject(dupClass)) -->Line_25 $$ dupFileName = FileUtil.toSystemDependentName(file.getPath())[ CD ]
Line_9 $$ if (qualifiedName.contains("$")) -->Line_11 $$ numOfClassesToFind = 1[ CD ]
Line_22 $$ if (dupClass != aClass) -->Line_23 $$ VirtualFile file = dupClass.getContainingFile().getVirtualFile()[ CD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_9 $$ if (qualifiedName.contains("$")) [ CD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_20 $$ String dupFileName = null[ CD ]
Line_25 $$ dupFileName = FileUtil.toSystemDependentName(file.getPath())-->Line_30 $$ if (dupFileName == null)[ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_6 $$ if (qualifiedName == null)[ CD ]
Line_21 $$ for (PsiClass dupClass : classes) -->Line_22 $$ if (dupClass != aClass) [ FD ]
Line_2 $$ static HighlightInfo checkDuplicateTopLevelClass(PsiClass aClass) -->Line_17 $$ PsiClass[] classes = JavaPsiFacade.getInstance(aClass.getProject()).findClasses(qualifiedName, GlobalSearchScope.moduleScope(module))[ FD ]
