Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_21 $$ vars.put("a", 1)[ FD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_15 $$ ees.setNextVar("b", -2.5)[ FD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_13 $$ assertEquals((Double) ees.run(), -1, 0.001)[ FD ]
Line_42 $$ vars = new HashMap()-->Line_44 $$ vars.put("b", 3)[ FD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_17 $$ assertEquals((Double) ees.run(), -7.5, 0.001)[ FD ]
Line_30 $$ vars = new HashMap()-->Line_44 $$ vars.put("b", 3)[ FD ]
Line_38 $$ message = se.getMessage()-->Line_50 $$ message = se.getMessage()[ FD ]
Line_46 $$ ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_47 $$ ees.run()[ FD ]
Line_26 $$ message = se.getMessage()-->Line_51 $$ assertThat(message + " should have contained process numbers", message.contains("process numbers"), equalTo(true))[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)[ CD ]
Line_26 $$ message = se.getMessage()-->Line_27 $$ assertThat(message + " should have contained number of variables", message.contains("number of variables"), equalTo(true))[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_17 $$ assertEquals((Double) ees.run(), -7.5, 0.001)[ CD ]
Line_20 $$ vars = new HashMap()-->Line_30 $$ vars = new HashMap()[ FD ]
Line_34 $$ ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_47 $$ ees.run()[ FD ]
Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_45 $$ vars.put("xyz", "hello")[ FD ]
Line_38 $$ message = se.getMessage()-->Line_51 $$ assertThat(message + " should have contained process numbers", message.contains("process numbers"), equalTo(true))[ FD ]
Line_38 $$ message = se.getMessage()-->Line_39 $$ assertThat(message + " should have contained does not exist in", message.contains("does not exist in"), equalTo(true))[ FD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_34 $$ ees = new ExpressionExecutableScript(compiledScript, vars)[ FD ]
Line_30 $$ vars = new HashMap()-->Line_42 $$ vars = new HashMap()[ FD ]
Line_26 $$ message = se.getMessage()-->Line_38 $$ message = se.getMessage()[ FD ]
Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_6 $$ vars.put("b", 3)[ FD ]
Line_22 $$ ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_23 $$ ees.run()[ FD ]
Line_20 $$ vars = new HashMap()-->Line_44 $$ vars.put("b", 3)[ FD ]
Line_30 $$ vars = new HashMap()-->Line_45 $$ vars.put("xyz", "hello")[ FD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_46 $$ ees = new ExpressionExecutableScript(compiledScript, vars)[ FD ]
Line_18 $$ String message-->Line_27 $$ assertThat(message + " should have contained number of variables", message.contains("number of variables"), equalTo(true))[ FD ]
Line_22 $$ ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_47 $$ ees.run()[ FD ]
Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_30 $$ vars = new HashMap()[ FD ]
Line_42 $$ vars = new HashMap()-->Line_43 $$ vars.put("a", 1)[ FD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_14 $$ ees.setNextVar("a", -2.5)[ FD ]
Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_31 $$ vars.put("a", 1)[ FD ]
Line_20 $$ vars = new HashMap()-->Line_33 $$ vars.put("c", -1)[ FD ]
Line_26 $$ message = se.getMessage()-->Line_50 $$ message = se.getMessage()[ FD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_47 $$ ees.run()[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_14 $$ ees.setNextVar("a", -2.5)[ CD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_35 $$ ees.run()[ FD ]
Line_34 $$ ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_46 $$ ees = new ExpressionExecutableScript(compiledScript, vars)[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_3 $$ assumeTrue("test creates classes directly, cannot run with security manager", System.getSecurityManager() == null)[ CD ]
Line_18 $$ String message-->Line_38 $$ message = se.getMessage()[ FD ]
Line_22 $$ ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_35 $$ ees.run()[ FD ]
Line_50 $$ message = se.getMessage()-->Line_51 $$ assertThat(message + " should have contained process numbers", message.contains("process numbers"), equalTo(true))[ FD ]
Line_30 $$ vars = new HashMap()-->Line_32 $$ vars.put("b", 3)[ FD ]
Line_18 $$ String message-->Line_51 $$ assertThat(message + " should have contained process numbers", message.contains("process numbers"), equalTo(true))[ FD ]
Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_44 $$ vars.put("b", 3)[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_12 $$ ees.setNextVar("b", -2.5)[ CD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_16 $$ ees.setNextVar("xyz", -2.5)[ CD ]
Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_43 $$ vars.put("a", 1)[ FD ]
Line_34 $$ ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_35 $$ ees.run()[ FD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_16 $$ ees.setNextVar("xyz", -2.5)[ FD ]
Line_22 $$ ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_34 $$ ees = new ExpressionExecutableScript(compiledScript, vars)[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_13 $$ assertEquals((Double) ees.run(), -1, 0.001)[ CD ]
Line_18 $$ String message-->Line_26 $$ message = se.getMessage()[ FD ]
Line_18 $$ String message-->Line_39 $$ assertThat(message + " should have contained does not exist in", message.contains("does not exist in"), equalTo(true))[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_4 $$ Map<String, Object> vars = new HashMap()[ CD ]
Line_20 $$ vars = new HashMap()-->Line_43 $$ vars.put("a", 1)[ FD ]
Line_30 $$ vars = new HashMap()-->Line_33 $$ vars.put("c", -1)[ FD ]
Line_22 $$ ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_46 $$ ees = new ExpressionExecutableScript(compiledScript, vars)[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_6 $$ vars.put("b", 3)[ CD ]
Line_20 $$ vars = new HashMap()-->Line_31 $$ vars.put("a", 1)[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_9 $$ CompiledScript compiledScript = new CompiledScript(ScriptType.INLINE, "", "expression", expr)[ CD ]
Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_32 $$ vars.put("b", 3)[ FD ]
Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_5 $$ vars.put("a", 2.5)[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_7 $$ vars.put("xyz", -1)[ CD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_18 $$ String message[ CD ]
Line_20 $$ vars = new HashMap()-->Line_45 $$ vars.put("xyz", "hello")[ FD ]
Line_42 $$ vars = new HashMap()-->Line_45 $$ vars.put("xyz", "hello")[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_5 $$ vars.put("a", 2.5)[ CD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_12 $$ ees.setNextVar("b", -2.5)[ FD ]
Line_20 $$ vars = new HashMap()-->Line_32 $$ vars.put("b", 3)[ FD ]
Line_30 $$ vars = new HashMap()-->Line_31 $$ vars.put("a", 1)[ FD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_22 $$ ees = new ExpressionExecutableScript(compiledScript, vars)[ FD ]
Line_20 $$ vars = new HashMap()-->Line_21 $$ vars.put("a", 1)[ FD ]
Line_18 $$ String message-->Line_50 $$ message = se.getMessage()[ FD ]
Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_20 $$ vars = new HashMap()[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_15 $$ ees.setNextVar("b", -2.5)[ CD ]
Line_26 $$ message = se.getMessage()-->Line_39 $$ assertThat(message + " should have contained does not exist in", message.contains("does not exist in"), equalTo(true))[ FD ]
Line_30 $$ vars = new HashMap()-->Line_43 $$ vars.put("a", 1)[ FD ]
Line_20 $$ vars = new HashMap()-->Line_42 $$ vars = new HashMap()[ FD ]
Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_33 $$ vars.put("c", -1)[ FD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_23 $$ ees.run()[ FD ]
Line_10 $$ ExpressionExecutableScript ees = new ExpressionExecutableScript(compiledScript, vars)-->Line_11 $$ assertEquals((Double) ees.run(), 4.5, 0.001)[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_11 $$ assertEquals((Double) ees.run(), 4.5, 0.001)[ CD ]
Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_42 $$ vars = new HashMap()[ FD ]
Line_4 $$ Map<String, Object> vars = new HashMap()-->Line_7 $$ vars.put("xyz", -1)[ FD ]
Line_2 $$ public void testExecutableScripts() throws Exception -->Line_8 $$ Expression expr = JavascriptCompiler.compile("a+b+xyz")[ CD ]
