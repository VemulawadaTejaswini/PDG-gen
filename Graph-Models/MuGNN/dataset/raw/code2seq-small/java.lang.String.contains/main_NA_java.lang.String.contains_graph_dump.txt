Line_8 $$ String line = reader.readLine()-->Line_11 $$ final long startTime = getTime(line)[ FD ]
Line_13 $$ if (nextLine != null && nextLine.contains("- Dependency analysis found")) -->Line_16 $$ final int index = line.indexOf(COMPILING_START_STR)[ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder()-->Line_29 $$ if (buf.length() > 0) [ FD ]
Line_8 $$ String line = reader.readLine()-->Line_10 $$ if (line.contains(COMPILING_START_STR)) [ FD ]
Line_20 $$ final char ch = line.charAt(idx)-->Line_24 $$ if (!Character.isDigit(ch)) [ FD ]
Line_6 $$ final BufferedReader reader = new BufferedReader(new FileReader(new File(logPath)))-->Line_36 $$ line = reader.readLine()[ FD ]
Line_19 $$ for (int idx = index + COMPILING_START_STR.length(); idx < line.length(); idx++) -->Line_21 $$ if (ch == ' ' || ch == '\t') [ CD ]
Line_29 $$ if (buf.length() > 0) -->Line_30 $$ final int fileCount = Integer.parseInt(buf.toString())[ CD ]
Line_13 $$ if (nextLine != null && nextLine.contains("- Dependency analysis found")) -->Line_17 $$ if (index > 0) [ CD ]
Line_8 $$ String line = reader.readLine()-->Line_36 $$ line = reader.readLine()[ FD ]
Line_19 $$ for (int idx = index + COMPILING_START_STR.length(); idx < line.length(); idx++) -->Line_20 $$ final char ch = line.charAt(idx)[ FD ]
Line_5 $$ int totalFileCount = 0-->Line_31 $$ totalFileCount += fileCount[ FD ]
Line_9 $$ while (line != null) -->Line_10 $$ if (line.contains(COMPILING_START_STR)) [ CD ]
Line_20 $$ final char ch = line.charAt(idx)-->Line_27 $$ buf.append(ch)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_44 $$ seconds = seconds % 60[ CD ]
Line_42 $$ long seconds = totalTime / 1000-->Line_44 $$ seconds = seconds % 60[ FD ]
Line_9 $$ while (line != null) -->Line_36 $$ line = reader.readLine()[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_42 $$ long seconds = totalTime / 1000[ CD ]
Line_19 $$ for (int idx = index + COMPILING_START_STR.length(); idx < line.length(); idx++) -->Line_27 $$ buf.append(ch)[ CD ]
Line_6 $$ final BufferedReader reader = new BufferedReader(new FileReader(new File(logPath)))-->Line_12 $$ final String nextLine = reader.readLine()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_41 $$ long millis = totalTime % 1000[ CD ]
Line_36 $$ line = reader.readLine()-->Line_11 $$ final long startTime = getTime(line)[ FD ]
Line_12 $$ final String nextLine = reader.readLine()-->Line_14 $$ final long endTime = getTime(nextLine)[ FD ]
Line_8 $$ String line = reader.readLine()-->Line_9 $$ while (line != null) [ FD ]
Line_8 $$ String line = reader.readLine()-->Line_20 $$ final char ch = line.charAt(idx)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ final BufferedReader reader = new BufferedReader(new FileReader(new File(logPath)))[ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder()-->Line_27 $$ buf.append(ch)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ long totalTime = 0L[ CD ]
Line_12 $$ final String nextLine = reader.readLine()-->Line_13 $$ if (nextLine != null && nextLine.contains("- Dependency analysis found")) [ FD ]
Line_36 $$ line = reader.readLine()-->Line_10 $$ if (line.contains(COMPILING_START_STR)) [ FD ]
Line_18 $$ final StringBuilder buf = new StringBuilder()-->Line_30 $$ final int fileCount = Integer.parseInt(buf.toString())[ FD ]
Line_13 $$ if (nextLine != null && nextLine.contains("- Dependency analysis found")) -->Line_14 $$ final long endTime = getTime(nextLine)[ CD ]
Line_13 $$ if (nextLine != null && nextLine.contains("- Dependency analysis found")) -->Line_15 $$ totalTime += (endTime - startTime)[ CD ]
Line_19 $$ for (int idx = index + COMPILING_START_STR.length(); idx < line.length(); idx++) -->Line_24 $$ if (!Character.isDigit(ch)) [ CD ]
Line_4 $$ long totalTime = 0L-->Line_15 $$ totalTime += (endTime - startTime)[ FD ]
Line_10 $$ if (line.contains(COMPILING_START_STR)) -->Line_11 $$ final long startTime = getTime(line)[ CD ]
Line_6 $$ final BufferedReader reader = new BufferedReader(new FileReader(new File(logPath)))-->Line_8 $$ String line = reader.readLine()[ FD ]
Line_36 $$ line = reader.readLine()-->Line_9 $$ while (line != null) [ FD ]
Line_29 $$ if (buf.length() > 0) -->Line_31 $$ totalFileCount += fileCount[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_45 $$ System.out.println("Files compiled: " + totalFileCount)[ CD ]
Line_17 $$ if (index > 0) -->Line_19 $$ for (int idx = index + COMPILING_START_STR.length(); idx < line.length(); idx++) [ CD ]
Line_36 $$ line = reader.readLine()-->Line_16 $$ final int index = line.indexOf(COMPILING_START_STR)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ final String logPath = args[0][ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ int totalFileCount = 0[ CD ]
Line_17 $$ if (index > 0) -->Line_29 $$ if (buf.length() > 0) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_46 $$ System.out.println("Total time spent compiling java " + minutes + " min " + seconds + " sec " + millis + " ms")[ CD ]
Line_10 $$ if (line.contains(COMPILING_START_STR)) -->Line_13 $$ if (nextLine != null && nextLine.contains("- Dependency analysis found")) [ CD ]
Line_8 $$ String line = reader.readLine()-->Line_19 $$ for (int idx = index + COMPILING_START_STR.length(); idx < line.length(); idx++) [ FD ]
Line_6 $$ final BufferedReader reader = new BufferedReader(new FileReader(new File(logPath)))-->Line_39 $$ reader.close()[ FD ]
Line_8 $$ String line = reader.readLine()-->Line_16 $$ final int index = line.indexOf(COMPILING_START_STR)[ FD ]
Line_19 $$ for (int idx = index + COMPILING_START_STR.length(); idx < line.length(); idx++) -->Line_20 $$ final char ch = line.charAt(idx)[ CD ]
Line_17 $$ if (index > 0) -->Line_18 $$ final StringBuilder buf = new StringBuilder()[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_43 $$ long minutes = seconds / 60[ CD ]
Line_10 $$ if (line.contains(COMPILING_START_STR)) -->Line_12 $$ final String nextLine = reader.readLine()[ CD ]
Line_16 $$ final int index = line.indexOf(COMPILING_START_STR)-->Line_17 $$ if (index > 0) [ FD ]
