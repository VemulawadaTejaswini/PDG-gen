Line_9 $$ GrStringInjection last = injections[injections.length - 1]-->Line_10 $$ if (last.getExpression() != null) [ FD ]
Line_18 $$ final String text = removeQuotes(literal.getText())-->Line_19 $$ boolean escapeDoubleQuotes = !text.contains("\n") && grString.isPlainString()[ FD ]
Line_9 $$ GrStringInjection last = injections[injections.length - 1]-->Line_12 $$ wrapInjection(last)[ FD ]
Line_3 $$ GrString grString = (GrString) injection.getParent()-->Line_4 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(grString.getProject())[ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_28 $$ expression.getFirstChild().delete()[ CD ]
Line_5 $$ String literalText-->Line_16 $$ literalText = removeQuotes(literal.getText())[ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_6 $$ if (literal instanceof GrString) [ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_30 $$ if (expression.getFirstChild() != null) [ CD ]
Line_6 $$ if (literal instanceof GrString) -->Line_18 $$ final String text = removeQuotes(literal.getText())[ CD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_26 $$ expression.getFirstChild().delete()[ CD ]
Line_31 $$ if (expression.getFirstChild() == expression.getLastChild()) -->Line_34 $$ node.addChildren(expression.getFirstChild().getNode(), expression.getLastChild().getNode(), injection.getNode())[ CD ]
Line_22 $$ if (literalText.contains("\n")) -->Line_23 $$ wrapGStringInto(grString, TRIPLE_DOUBLE_QUOTES)[ CD ]
Line_29 $$ final ASTNode node = grString.getNode()-->Line_32 $$ node.replaceChild(injection.getNode(), expression.getFirstChild().getNode())[ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_3 $$ GrString grString = (GrString) injection.getParent()[ CD ]
Line_25 $$ final GrExpression expression = factory.createExpressionFromText("\"\"\"$-->Line_31 $$ if (expression.getFirstChild() == expression.getLastChild()) [ FD ]
Line_25 $$ final GrExpression expression = factory.createExpressionFromText("\"\"\"$-->Line_26 $$ expression.getFirstChild().delete()[ FD ]
Line_16 $$ literalText = removeQuotes(literal.getText())-->Line_20 $$ literalText = escapeSymbolsForGString(text, escapeDoubleQuotes, true)[ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_32 $$ node.replaceChild(injection.getNode(), expression.getFirstChild().getNode())[ FD ]
Line_6 $$ if (literal instanceof GrString) -->Line_7 $$ final GrStringInjection[] injections = ((GrString) literal).getInjections()[ CD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_5 $$ String literalText[ CD ]
Line_5 $$ String literalText-->Line_22 $$ if (literalText.contains("\n")) [ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_38 $$ return grString[ CD ]
Line_10 $$ if (last.getExpression() != null) -->Line_11 $$ if (!checkBraceIsUnnecessary(last.getExpression(), injection.getNextSibling())) [ CD ]
Line_31 $$ if (expression.getFirstChild() == expression.getLastChild()) -->Line_35 $$ node.removeChild(injection.getNode())[ CD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_3 $$ GrString grString = (GrString) injection.getParent()[ FD ]
Line_30 $$ if (expression.getFirstChild() != null) -->Line_31 $$ if (expression.getFirstChild() == expression.getLastChild()) [ CD ]
Line_6 $$ if (literal instanceof GrString) -->Line_19 $$ boolean escapeDoubleQuotes = !text.contains("\n") && grString.isPlainString()[ CD ]
Line_5 $$ String literalText-->Line_20 $$ literalText = escapeSymbolsForGString(text, escapeDoubleQuotes, true)[ FD ]
Line_20 $$ literalText = escapeSymbolsForGString(text, escapeDoubleQuotes, true)-->Line_22 $$ if (literalText.contains("\n")) [ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_18 $$ final String text = removeQuotes(literal.getText())[ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_16 $$ literalText = removeQuotes(literal.getText())[ FD ]
Line_3 $$ GrString grString = (GrString) injection.getParent()-->Line_23 $$ wrapGStringInto(grString, TRIPLE_DOUBLE_QUOTES)[ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_11 $$ if (!checkBraceIsUnnecessary(last.getExpression(), injection.getNextSibling())) [ FD ]
Line_16 $$ literalText = removeQuotes(literal.getText())-->Line_22 $$ if (literalText.contains("\n")) [ FD ]
Line_25 $$ final GrExpression expression = factory.createExpressionFromText("\"\"\"$-->Line_28 $$ expression.getFirstChild().delete()[ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_29 $$ final ASTNode node = grString.getNode()[ CD ]
Line_6 $$ if (literal instanceof GrString) -->Line_20 $$ literalText = escapeSymbolsForGString(text, escapeDoubleQuotes, true)[ CD ]
Line_4 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(grString.getProject())-->Line_25 $$ final GrExpression expression = factory.createExpressionFromText("\"\"\"$[ FD ]
Line_6 $$ if (literal instanceof GrString) -->Line_16 $$ literalText = removeQuotes(literal.getText())[ CD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_6 $$ if (literal instanceof GrString) [ CD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_27 $$ expression.getFirstChild().delete()[ CD ]
Line_8 $$ if (injections.length > 0) -->Line_10 $$ if (last.getExpression() != null) [ CD ]
Line_25 $$ final GrExpression expression = factory.createExpressionFromText("\"\"\"$-->Line_34 $$ node.addChildren(expression.getFirstChild().getNode(), expression.getLastChild().getNode(), injection.getNode())[ FD ]
Line_3 $$ GrString grString = (GrString) injection.getParent()-->Line_29 $$ final ASTNode node = grString.getNode()[ FD ]
Line_29 $$ final ASTNode node = grString.getNode()-->Line_34 $$ node.addChildren(expression.getFirstChild().getNode(), expression.getLastChild().getNode(), injection.getNode())[ FD ]
Line_9 $$ GrStringInjection last = injections[injections.length - 1]-->Line_11 $$ if (!checkBraceIsUnnecessary(last.getExpression(), injection.getNextSibling())) [ FD ]
Line_25 $$ final GrExpression expression = factory.createExpressionFromText("\"\"\"$-->Line_30 $$ if (expression.getFirstChild() != null) [ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_34 $$ node.addChildren(expression.getFirstChild().getNode(), expression.getLastChild().getNode(), injection.getNode())[ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_35 $$ node.removeChild(injection.getNode())[ FD ]
Line_18 $$ final String text = removeQuotes(literal.getText())-->Line_20 $$ literalText = escapeSymbolsForGString(text, escapeDoubleQuotes, true)[ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_25 $$ final GrExpression expression = factory.createExpressionFromText("\"\"\"$[ CD ]
Line_19 $$ boolean escapeDoubleQuotes = !text.contains("\n") && grString.isPlainString()-->Line_20 $$ literalText = escapeSymbolsForGString(text, escapeDoubleQuotes, true)[ FD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_4 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(grString.getProject())[ CD ]
Line_3 $$ GrString grString = (GrString) injection.getParent()-->Line_19 $$ boolean escapeDoubleQuotes = !text.contains("\n") && grString.isPlainString()[ FD ]
Line_29 $$ final ASTNode node = grString.getNode()-->Line_35 $$ node.removeChild(injection.getNode())[ FD ]
Line_8 $$ if (injections.length > 0) -->Line_9 $$ GrStringInjection last = injections[injections.length - 1][ CD ]
Line_2 $$ public static GrString replaceStringInjectionByLiteral(GrStringInjection injection, GrLiteral literal) -->Line_22 $$ if (literalText.contains("\n")) [ CD ]
Line_25 $$ final GrExpression expression = factory.createExpressionFromText("\"\"\"$-->Line_27 $$ expression.getFirstChild().delete()[ FD ]
Line_6 $$ if (literal instanceof GrString) -->Line_8 $$ if (injections.length > 0) [ CD ]
Line_25 $$ final GrExpression expression = factory.createExpressionFromText("\"\"\"$-->Line_32 $$ node.replaceChild(injection.getNode(), expression.getFirstChild().getNode())[ FD ]
Line_11 $$ if (!checkBraceIsUnnecessary(last.getExpression(), injection.getNextSibling())) -->Line_12 $$ wrapInjection(last)[ CD ]
Line_31 $$ if (expression.getFirstChild() == expression.getLastChild()) -->Line_32 $$ node.replaceChild(injection.getNode(), expression.getFirstChild().getNode())[ CD ]
