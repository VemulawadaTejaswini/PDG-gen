Line_4 $$ String originalContent = _read(file)-->Line_10 $$ String javadocLessContent = _removeJavadocFromJava(javaClass, originalContent)[ FD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_12 $$ _updateJavadocsXmlFile(fileName, javaClass, document)[ CD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_11 $$ Document document = _getJavadocDocument(javaClass)[ CD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_12 $$ _updateJavadocsXmlFile(fileName, javaClass, document)[ FD ]
Line_11 $$ Document document = _getJavadocDocument(javaClass)-->Line_12 $$ _updateJavadocsXmlFile(fileName, javaClass, document)[ FD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_9 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(originalContent))[ CD ]
Line_13 $$ String newContent = _getUpdateJavaFromDocument(fileName, javadocLessContent, document)-->Line_15 $$ _write(file, newContent)[ FD ]
Line_13 $$ String newContent = _getUpdateJavaFromDocument(fileName, javadocLessContent, document)-->Line_14 $$ if (!originalContent.equals(newContent)) [ FD ]
Line_3 $$ File file = new File(_inputDirName, fileName)-->Line_16 $$ _modifiedFileNames.add(file.getAbsolutePath())[ FD ]
Line_14 $$ if (!originalContent.equals(newContent)) -->Line_16 $$ _modifiedFileNames.add(file.getAbsolutePath())[ CD ]
Line_4 $$ String originalContent = _read(file)-->Line_8 $$ _imports = JavaImportsFormatter.getImports(originalContent)[ FD ]
Line_9 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(originalContent))-->Line_11 $$ Document document = _getJavadocDocument(javaClass)[ FD ]
Line_10 $$ String javadocLessContent = _removeJavadocFromJava(javaClass, originalContent)-->Line_13 $$ String newContent = _getUpdateJavaFromDocument(fileName, javadocLessContent, document)[ FD ]
Line_4 $$ String originalContent = _read(file)-->Line_5 $$ if (fileName.contains("modules/third-party") || fileName.endsWith("Application.java") || fileName.endsWith("JavadocFormatter.java") || fileName.endsWith("Mojo.java") || fileName.endsWith("SourceFormatter.java") || fileName.endsWith("WebProxyPortlet.java") || _hasGeneratedTag(originalContent)) [ FD ]
Line_9 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(originalContent))-->Line_10 $$ String javadocLessContent = _removeJavadocFromJava(javaClass, originalContent)[ FD ]
Line_11 $$ Document document = _getJavadocDocument(javaClass)-->Line_13 $$ String newContent = _getUpdateJavaFromDocument(fileName, javadocLessContent, document)[ FD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_5 $$ if (fileName.contains("modules/third-party") || fileName.endsWith("Application.java") || fileName.endsWith("JavadocFormatter.java") || fileName.endsWith("Mojo.java") || fileName.endsWith("SourceFormatter.java") || fileName.endsWith("WebProxyPortlet.java") || _hasGeneratedTag(originalContent)) [ FD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_9 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(originalContent))[ FD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_10 $$ String javadocLessContent = _removeJavadocFromJava(javaClass, originalContent)[ CD ]
Line_14 $$ if (!originalContent.equals(newContent)) -->Line_17 $$ System.out.println("Writing " + file)[ CD ]
Line_3 $$ File file = new File(_inputDirName, fileName)-->Line_15 $$ _write(file, newContent)[ FD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_13 $$ String newContent = _getUpdateJavaFromDocument(fileName, javadocLessContent, document)[ CD ]
Line_4 $$ String originalContent = _read(file)-->Line_14 $$ if (!originalContent.equals(newContent)) [ FD ]
Line_9 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(originalContent))-->Line_12 $$ _updateJavadocsXmlFile(fileName, javaClass, document)[ FD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_3 $$ File file = new File(_inputDirName, fileName)[ CD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_5 $$ if (fileName.contains("modules/third-party") || fileName.endsWith("Application.java") || fileName.endsWith("JavadocFormatter.java") || fileName.endsWith("Mojo.java") || fileName.endsWith("SourceFormatter.java") || fileName.endsWith("WebProxyPortlet.java") || _hasGeneratedTag(originalContent)) [ CD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_8 $$ _imports = JavaImportsFormatter.getImports(originalContent)[ CD ]
Line_5 $$ if (fileName.contains("modules/third-party") || fileName.endsWith("Application.java") || fileName.endsWith("JavadocFormatter.java") || fileName.endsWith("Mojo.java") || fileName.endsWith("SourceFormatter.java") || fileName.endsWith("WebProxyPortlet.java") || _hasGeneratedTag(originalContent)) -->Line_6 $$ return[ CD ]
Line_14 $$ if (!originalContent.equals(newContent)) -->Line_15 $$ _write(file, newContent)[ CD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_4 $$ String originalContent = _read(file)[ CD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_13 $$ String newContent = _getUpdateJavaFromDocument(fileName, javadocLessContent, document)[ FD ]
Line_3 $$ File file = new File(_inputDirName, fileName)-->Line_4 $$ String originalContent = _read(file)[ FD ]
Line_2 $$ private void _format(String fileName) throws Exception -->Line_14 $$ if (!originalContent.equals(newContent)) [ CD ]
