Line_3 $$ PrintStream oldOutPrintStream = System.out-->Line_44 $$ System.setOut(oldOutPrintStream)[ FD ]
Line_21 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_22 $$ future.get()[ FD ]
Line_2 $$ public void testLogging() throws Exception -->Line_8 $$ ByteArrayOutputStream errByteArrayOutputStream = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testLogging() throws Exception -->Line_7 $$ PrintStream oldErrPrintStream = System.err[ CD ]
Line_14 $$ String logMessage = "Log Message"-->Line_40 $$ Assert.assertTrue(outByteArrayOutputStreamString.contains(logMessage))[ FD ]
Line_4 $$ ByteArrayOutputStream outByteArrayOutputStream = new ByteArrayOutputStream()-->Line_39 $$ String outByteArrayOutputStreamString = outByteArrayOutputStream.toString()[ FD ]
Line_8 $$ ByteArrayOutputStream errByteArrayOutputStream = new ByteArrayOutputStream()-->Line_41 $$ String errByteArrayOutputStreamString = errByteArrayOutputStream.toString()[ FD ]
Line_15 $$ final LoggingProcessCallable loggingProcessCallable = new LoggingProcessCallable(logMessage, signalFile)-->Line_20 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), loggingProcessCallable)[ FD ]
Line_2 $$ public void testLogging() throws Exception -->Line_6 $$ System.setOut(newOutPrintStream)[ CD ]
Line_2 $$ public void testLogging() throws Exception -->Line_4 $$ ByteArrayOutputStream outByteArrayOutputStream = new ByteArrayOutputStream()[ CD ]
Line_17 $$ Thread thread = new Thread() -->Line_30 $$ thread.start()[ FD ]
Line_21 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_23 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_2 $$ public void testLogging() throws Exception -->Line_10 $$ System.setErr(newErrPrintStream)[ CD ]
Line_16 $$ final AtomicReference<Exception> exceptionAtomicReference = new AtomicReference()-->Line_26 $$ exceptionAtomicReference.set(e)[ FD ]
Line_17 $$ Thread thread = new Thread() -->Line_34 $$ thread.join()[ FD ]
Line_7 $$ PrintStream oldErrPrintStream = System.err-->Line_45 $$ System.setErr(oldErrPrintStream)[ FD ]
Line_14 $$ String logMessage = "Log Message"-->Line_42 $$ Assert.assertTrue(errByteArrayOutputStreamString.contains(logMessage))[ FD ]
Line_11 $$ File signalFile = new File("signal")-->Line_12 $$ signalFile.delete()[ FD ]
Line_11 $$ File signalFile = new File("signal")-->Line_33 $$ Assert.assertTrue(signalFile.createNewFile())[ FD ]
Line_11 $$ File signalFile = new File("signal")-->Line_32 $$ _waitForSignalFile(signalFile, false)[ FD ]
Line_20 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), loggingProcessCallable)-->Line_21 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_5 $$ PrintStream newOutPrintStream = new PrintStream(outByteArrayOutputStream, true)-->Line_6 $$ System.setOut(newOutPrintStream)[ FD ]
Line_11 $$ File signalFile = new File("signal")-->Line_46 $$ signalFile.delete()[ FD ]
Line_2 $$ public void testLogging() throws Exception -->Line_5 $$ PrintStream newOutPrintStream = new PrintStream(outByteArrayOutputStream, true)[ CD ]
Line_2 $$ public void testLogging() throws Exception -->Line_11 $$ File signalFile = new File("signal")[ CD ]
Line_2 $$ public void testLogging() throws Exception -->Line_12 $$ signalFile.delete()[ CD ]
Line_21 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_24 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_16 $$ final AtomicReference<Exception> exceptionAtomicReference = new AtomicReference()-->Line_35 $$ Exception e = exceptionAtomicReference.get()[ FD ]
Line_2 $$ public void testLogging() throws Exception -->Line_3 $$ PrintStream oldOutPrintStream = System.out[ CD ]
Line_9 $$ PrintStream newErrPrintStream = new PrintStream(errByteArrayOutputStream, true)-->Line_10 $$ System.setErr(newErrPrintStream)[ FD ]
Line_11 $$ File signalFile = new File("signal")-->Line_31 $$ Assert.assertTrue(signalFile.createNewFile())[ FD ]
Line_2 $$ public void testLogging() throws Exception -->Line_9 $$ PrintStream newErrPrintStream = new PrintStream(errByteArrayOutputStream, true)[ CD ]
