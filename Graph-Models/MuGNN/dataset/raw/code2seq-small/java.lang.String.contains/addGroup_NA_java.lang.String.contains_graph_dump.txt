Line_28 $$ name = named != null ? named : name-->Line_30 $$ if (name.contains("[ FD ]
Line_6 $$ bundle = OptionsBundle.getBundle()-->Line_27 $$ String named = getString(bundle, id + ".named.settings.display.name")[ FD ]
Line_40 $$ String parentId = getString(bundle, id + ".settings.parent")-->Line_43 $$ addGroup(tree, project, parentId, null, bundle)[ FD ]
Line_24 $$ String name = getString(bundle, id + ".settings.display.name")-->Line_28 $$ name = named != null ? named : name[ FD ]
Line_6 $$ bundle = OptionsBundle.getBundle()-->Line_40 $$ String parentId = getString(bundle, id + ".settings.parent")[ FD ]
Line_24 $$ String name = getString(bundle, id + ".settings.display.name")-->Line_31 $$ name = StringUtil.first(MessageFormat.format(name, project.getName()), 30, true)[ FD ]
Line_21 $$ if (node.myValue == null) -->Line_22 $$ int weight = getInt(bundle, id + ".settings.weight")[ CD ]
Line_30 $$ if (name.contains("-->Line_31 $$ name = StringUtil.first(MessageFormat.format(name, project.getName()), 30, true)[ CD ]
Line_3 $$ String id = "configurable.group." + groupId-->Line_17 $$ id = "configurable.group." + groupId[ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_26 $$ if (!project.isDefault() && !name.contains("[ FD ]
Line_41 $$ parentId = Node.cyclic(tree, parentId, "root", groupId, node)-->Line_43 $$ addGroup(tree, project, parentId, null, bundle)[ FD ]
Line_6 $$ bundle = OptionsBundle.getBundle()-->Line_23 $$ String help = getString(bundle, id + ".settings.help.topic")[ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_20 $$ Node<SortedConfigurableGroup> node = Node.get(tree, groupId)[ CD ]
Line_4 $$ ResourceBundle bundle = getBundle(id + ".settings.display.name", configurables, alternative)-->Line_5 $$ if (bundle == null) [ FD ]
Line_6 $$ bundle = OptionsBundle.getBundle()-->Line_22 $$ int weight = getInt(bundle, id + ".settings.weight")[ FD ]
Line_4 $$ ResourceBundle bundle = getBundle(id + ".settings.display.name", configurables, alternative)-->Line_22 $$ int weight = getInt(bundle, id + ".settings.weight")[ FD ]
Line_21 $$ if (node.myValue == null) -->Line_34 $$ node.myValue = new SortedConfigurableGroup(id, name, help, weight)[ CD ]
Line_7 $$ if ("root".equals(groupId)) -->Line_16 $$ groupId = "other"[ CD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_37 $$ node.myValue.myList.addAll(configurables)[ FD ]
Line_4 $$ ResourceBundle bundle = getBundle(id + ".settings.display.name", configurables, alternative)-->Line_24 $$ String name = getString(bundle, id + ".settings.display.name")[ FD ]
Line_16 $$ groupId = "other"-->Line_41 $$ parentId = Node.cyclic(tree, parentId, "root", groupId, node)[ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_36 $$ if (configurables != null) [ CD ]
Line_20 $$ Node<SortedConfigurableGroup> node = Node.get(tree, groupId)-->Line_41 $$ parentId = Node.cyclic(tree, parentId, "root", groupId, node)[ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_3 $$ String id = "configurable.group." + groupId[ CD ]
Line_7 $$ if ("root".equals(groupId)) -->Line_15 $$ LOG.warn("use other group instead of unexpected one: " + groupId)[ CD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_4 $$ ResourceBundle bundle = getBundle(id + ".settings.display.name", configurables, alternative)[ CD ]
Line_21 $$ if (node.myValue == null) -->Line_24 $$ String name = getString(bundle, id + ".settings.display.name")[ CD ]
Line_28 $$ name = named != null ? named : name-->Line_31 $$ name = StringUtil.first(MessageFormat.format(name, project.getName()), 30, true)[ FD ]
Line_36 $$ if (configurables != null) -->Line_37 $$ node.myValue.myList.addAll(configurables)[ CD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_41 $$ parentId = Node.cyclic(tree, parentId, "root", groupId, node)[ FD ]
Line_16 $$ groupId = "other"-->Line_17 $$ id = "configurable.group." + groupId[ FD ]
Line_40 $$ String parentId = getString(bundle, id + ".settings.parent")-->Line_42 $$ node.myParent = Node.add(tree, parentId, groupId)[ FD ]
Line_5 $$ if (bundle == null) -->Line_6 $$ bundle = OptionsBundle.getBundle()[ CD ]
Line_16 $$ groupId = "other"-->Line_20 $$ Node<SortedConfigurableGroup> node = Node.get(tree, groupId)[ FD ]
Line_21 $$ if (node.myValue == null) -->Line_23 $$ String help = getString(bundle, id + ".settings.help.topic")[ CD ]
Line_26 $$ if (!project.isDefault() && !name.contains("-->Line_28 $$ name = named != null ? named : name[ CD ]
Line_6 $$ bundle = OptionsBundle.getBundle()-->Line_43 $$ addGroup(tree, project, parentId, null, bundle)[ FD ]
Line_24 $$ String name = getString(bundle, id + ".settings.display.name")-->Line_30 $$ if (name.contains("[ FD ]
Line_9 $$ String value = bundle.getString("configurable.group.root.settings.display.name")-->Line_10 $$ LOG.error("OptionsBundle does not contain root group", value)[ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_4 $$ ResourceBundle bundle = getBundle(id + ".settings.display.name", configurables, alternative)[ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_43 $$ addGroup(tree, project, parentId, null, bundle)[ FD ]
Line_4 $$ ResourceBundle bundle = getBundle(id + ".settings.display.name", configurables, alternative)-->Line_23 $$ String help = getString(bundle, id + ".settings.help.topic")[ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_36 $$ if (configurables != null) [ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_17 $$ id = "configurable.group." + groupId[ FD ]
Line_25 $$ if (name != null && project != null) -->Line_30 $$ if (name.contains("[ CD ]
Line_39 $$ if (node.myParent == null && !groupId.equals("root")) -->Line_40 $$ String parentId = getString(bundle, id + ".settings.parent")[ CD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_21 $$ if (node.myValue == null) [ CD ]
Line_4 $$ ResourceBundle bundle = getBundle(id + ".settings.display.name", configurables, alternative)-->Line_40 $$ String parentId = getString(bundle, id + ".settings.parent")[ FD ]
Line_25 $$ if (name != null && project != null) -->Line_26 $$ if (!project.isDefault() && !name.contains("[ CD ]
Line_16 $$ groupId = "other"-->Line_42 $$ node.myParent = Node.add(tree, parentId, groupId)[ FD ]
Line_24 $$ String name = getString(bundle, id + ".settings.display.name")-->Line_26 $$ if (!project.isDefault() && !name.contains("[ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_5 $$ if (bundle == null) [ CD ]
Line_21 $$ if (node.myValue == null) -->Line_25 $$ if (name != null && project != null) [ CD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_39 $$ if (node.myParent == null && !groupId.equals("root")) [ CD ]
Line_7 $$ if ("root".equals(groupId)) -->Line_17 $$ id = "configurable.group." + groupId[ CD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_42 $$ node.myParent = Node.add(tree, parentId, groupId)[ FD ]
Line_6 $$ bundle = OptionsBundle.getBundle()-->Line_9 $$ String value = bundle.getString("configurable.group.root.settings.display.name")[ FD ]
Line_39 $$ if (node.myParent == null && !groupId.equals("root")) -->Line_42 $$ node.myParent = Node.add(tree, parentId, groupId)[ CD ]
Line_5 $$ if (bundle == null) -->Line_7 $$ if ("root".equals(groupId)) [ CD ]
Line_41 $$ parentId = Node.cyclic(tree, parentId, "root", groupId, node)-->Line_42 $$ node.myParent = Node.add(tree, parentId, groupId)[ FD ]
Line_40 $$ String parentId = getString(bundle, id + ".settings.parent")-->Line_41 $$ parentId = Node.cyclic(tree, parentId, "root", groupId, node)[ FD ]
Line_4 $$ ResourceBundle bundle = getBundle(id + ".settings.display.name", configurables, alternative)-->Line_43 $$ addGroup(tree, project, parentId, null, bundle)[ FD ]
Line_4 $$ ResourceBundle bundle = getBundle(id + ".settings.display.name", configurables, alternative)-->Line_6 $$ bundle = OptionsBundle.getBundle()[ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_16 $$ groupId = "other"[ FD ]
Line_6 $$ bundle = OptionsBundle.getBundle()-->Line_24 $$ String name = getString(bundle, id + ".settings.display.name")[ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_7 $$ if ("root".equals(groupId)) [ FD ]
Line_16 $$ groupId = "other"-->Line_39 $$ if (node.myParent == null && !groupId.equals("root")) [ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_20 $$ Node<SortedConfigurableGroup> node = Node.get(tree, groupId)[ FD ]
Line_4 $$ ResourceBundle bundle = getBundle(id + ".settings.display.name", configurables, alternative)-->Line_27 $$ String named = getString(bundle, id + ".named.settings.display.name")[ FD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_31 $$ name = StringUtil.first(MessageFormat.format(name, project.getName()), 30, true)[ FD ]
Line_39 $$ if (node.myParent == null && !groupId.equals("root")) -->Line_41 $$ parentId = Node.cyclic(tree, parentId, "root", groupId, node)[ CD ]
Line_2 $$ private static void addGroup(Map<String, Node<SortedConfigurableGroup>> tree, Project project, String groupId, List<Configurable> configurables, ResourceBundle alternative) -->Line_39 $$ if (node.myParent == null && !groupId.equals("root")) [ FD ]
Line_26 $$ if (!project.isDefault() && !name.contains("-->Line_27 $$ String named = getString(bundle, id + ".named.settings.display.name")[ CD ]
Line_4 $$ ResourceBundle bundle = getBundle(id + ".settings.display.name", configurables, alternative)-->Line_9 $$ String value = bundle.getString("configurable.group.root.settings.display.name")[ FD ]
Line_39 $$ if (node.myParent == null && !groupId.equals("root")) -->Line_43 $$ addGroup(tree, project, parentId, null, bundle)[ CD ]
