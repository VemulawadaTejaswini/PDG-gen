Line_2 $$ public void testGetRMDelegationTokenService() -->Line_13 $$ conf.set(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME, "rm1"), "0.0.0.0")[ CD ]
Line_3 $$ String defaultRMAddress = YarnConfiguration.DEFAULT_RM_ADDRESS-->Line_19 $$ assertTrue("Incorrect token service name", service.contains(defaultRMAddress))[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_13 $$ conf.set(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME, "rm1"), "0.0.0.0")[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_15 $$ tokenService = ClientRMProxy.getRMDelegationTokenService(conf)[ FD ]
Line_2 $$ public void testGetRMDelegationTokenService() -->Line_15 $$ tokenService = ClientRMProxy.getRMDelegationTokenService(conf)[ CD ]
Line_2 $$ public void testGetRMDelegationTokenService() -->Line_11 $$ conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true)[ CD ]
Line_2 $$ public void testGetRMDelegationTokenService() -->Line_17 $$ assertEquals(2, services.length)[ CD ]
Line_2 $$ public void testGetRMDelegationTokenService() -->Line_3 $$ String defaultRMAddress = YarnConfiguration.DEFAULT_RM_ADDRESS[ CD ]
Line_5 $$ Text tokenService = ClientRMProxy.getRMDelegationTokenService(conf)-->Line_6 $$ String[] services = tokenService.toString().split(",")[ FD ]
Line_6 $$ String[] services = tokenService.toString().split(",")-->Line_16 $$ services = tokenService.toString().split(",")[ FD ]
Line_2 $$ public void testGetRMDelegationTokenService() -->Line_6 $$ String[] services = tokenService.toString().split(",")[ CD ]
Line_2 $$ public void testGetRMDelegationTokenService() -->Line_5 $$ Text tokenService = ClientRMProxy.getRMDelegationTokenService(conf)[ CD ]
Line_2 $$ public void testGetRMDelegationTokenService() -->Line_12 $$ conf.set(YarnConfiguration.RM_HA_IDS, "rm1,rm2")[ CD ]
Line_8 $$ for (String service : services) -->Line_19 $$ assertTrue("Incorrect token service name", service.contains(defaultRMAddress))[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_11 $$ conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true)[ FD ]
Line_2 $$ public void testGetRMDelegationTokenService() -->Line_16 $$ services = tokenService.toString().split(",")[ CD ]
Line_2 $$ public void testGetRMDelegationTokenService() -->Line_14 $$ conf.set(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME, "rm2"), "0.0.0.0")[ CD ]
Line_5 $$ Text tokenService = ClientRMProxy.getRMDelegationTokenService(conf)-->Line_16 $$ services = tokenService.toString().split(",")[ FD ]
Line_8 $$ for (String service : services) -->Line_9 $$ assertTrue("Incorrect token service name", service.contains(defaultRMAddress))[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_14 $$ conf.set(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME, "rm2"), "0.0.0.0")[ FD ]
Line_2 $$ public void testGetRMDelegationTokenService() -->Line_4 $$ YarnConfiguration conf = new YarnConfiguration()[ CD ]
Line_3 $$ String defaultRMAddress = YarnConfiguration.DEFAULT_RM_ADDRESS-->Line_9 $$ assertTrue("Incorrect token service name", service.contains(defaultRMAddress))[ FD ]
Line_2 $$ public void testGetRMDelegationTokenService() -->Line_7 $$ assertEquals(1, services.length)[ CD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_5 $$ Text tokenService = ClientRMProxy.getRMDelegationTokenService(conf)[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_12 $$ conf.set(YarnConfiguration.RM_HA_IDS, "rm1,rm2")[ FD ]
Line_15 $$ tokenService = ClientRMProxy.getRMDelegationTokenService(conf)-->Line_16 $$ services = tokenService.toString().split(",")[ FD ]
Line_5 $$ Text tokenService = ClientRMProxy.getRMDelegationTokenService(conf)-->Line_15 $$ tokenService = ClientRMProxy.getRMDelegationTokenService(conf)[ FD ]
