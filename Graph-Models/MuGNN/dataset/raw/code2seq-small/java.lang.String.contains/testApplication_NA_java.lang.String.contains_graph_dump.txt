Line_11 $$ Token<AMRMTokenIdentifier> token = new Token<AMRMTokenIdentifier>("user".getBytes(), "password".getBytes(), new Text("kind"), new Text("service"))-->Line_12 $$ TokenCache.setJobToken(token, conf.getCredentials())[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_19 $$ initStdOut(conf)[ FD ]
Line_6 $$ TestTaskReporter reporter = new TestTaskReporter()-->Line_30 $$ assertNotNull(reporter.getCounter("group", "name"))[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_15 $$ fs.setConf(conf)[ FD ]
Line_20 $$ Application<WritableComparable<IntWritable>, Writable, IntWritable, Text> application = new Application<WritableComparable<IntWritable>, Writable, IntWritable, Text>(conf, rReader, output, reporter, IntWritable.class, Text.class)-->Line_23 $$ application.getDownlink().flush()[ FD ]
Line_46 $$ for (File file : psw) -->Line_47 $$ file.deleteOnExit()[ FD ]
Line_2 $$ public void testApplication() throws Throwable -->Line_6 $$ TestTaskReporter reporter = new TestTaskReporter()[ CD ]
Line_26 $$ String stdOut = readStdOut(conf)-->Line_32 $$ stdOut = readFile(new File(workSpace.getAbsolutePath() + File.separator + "outfile"))[ FD ]
Line_2 $$ public void testApplication() throws Throwable -->Line_4 $$ RecordReader<FloatWritable, NullWritable> rReader = new Reader()[ CD ]
Line_20 $$ Application<WritableComparable<IntWritable>, Writable, IntWritable, Text> application = new Application<WritableComparable<IntWritable>, Writable, IntWritable, Text>(conf, rReader, output, reporter, IntWritable.class, Text.class)-->Line_22 $$ application.getDownlink().mapItem(new IntWritable(3), new Text("txt"))[ FD ]
Line_26 $$ String stdOut = readStdOut(conf)-->Line_27 $$ assertTrue(stdOut.contains("key:3"))[ FD ]
Line_6 $$ TestTaskReporter reporter = new TestTaskReporter()-->Line_29 $$ assertEquals(1.0, reporter.getProgress(), 0.01)[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_26 $$ String stdOut = readStdOut(conf)[ FD ]
Line_2 $$ public void testApplication() throws Throwable -->Line_3 $$ JobConf conf = new JobConf()[ CD ]
Line_26 $$ String stdOut = readStdOut(conf)-->Line_28 $$ assertTrue(stdOut.contains("value:txt"))[ FD ]
Line_2 $$ public void testApplication() throws Throwable -->Line_7 $$ File[] psw = cleanTokenPasswordFile()[ CD ]
Line_16 $$ Writer<IntWritable, Text> wr = new Writer<IntWritable, Text>(conf, fs.create(new Path(workSpace.getAbsolutePath() + File.separator + "outfile")), IntWritable.class, Text.class, null, null, true)-->Line_25 $$ wr.close()[ FD ]
Line_6 $$ TestTaskReporter reporter = new TestTaskReporter()-->Line_31 $$ assertEquals(reporter.getStatus(), "PROGRESS")[ FD ]
Line_35 $$ Entry<IntWritable, Text> entry = output.getCollect().entrySet().iterator().next()-->Line_37 $$ assertEquals("value", entry.getValue().toString())[ FD ]
Line_4 $$ RecordReader<FloatWritable, NullWritable> rReader = new Reader()-->Line_33 $$ assertEquals(0.55f, rReader.getProgress(), 0.001)[ FD ]
Line_20 $$ Application<WritableComparable<IntWritable>, Writable, IntWritable, Text> application = new Application<WritableComparable<IntWritable>, Writable, IntWritable, Text>(conf, rReader, output, reporter, IntWritable.class, Text.class)-->Line_21 $$ application.getDownlink().flush()[ FD ]
Line_20 $$ Application<WritableComparable<IntWritable>, Writable, IntWritable, Text> application = new Application<WritableComparable<IntWritable>, Writable, IntWritable, Text>(conf, rReader, output, reporter, IntWritable.class, Text.class)-->Line_24 $$ application.waitForFinish()[ FD ]
Line_7 $$ File[] psw = cleanTokenPasswordFile()-->Line_45 $$ if (psw != null) [ FD ]
Line_13 $$ FakeCollector output = new FakeCollector(new Counters.Counter(), new Progress())-->Line_17 $$ output.setWriter(wr)[ FD ]
Line_14 $$ FileSystem fs = new RawLocalFileSystem()-->Line_16 $$ Writer<IntWritable, Text> wr = new Writer<IntWritable, Text>(conf, fs.create(new Path(workSpace.getAbsolutePath() + File.separator + "outfile")), IntWritable.class, Text.class, null, null, true)[ FD ]
Line_35 $$ Entry<IntWritable, Text> entry = output.getCollect().entrySet().iterator().next()-->Line_36 $$ assertEquals(123, entry.getKey().get())[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_10 $$ conf.set(MRJobConfig.CACHE_LOCALFILES, fCommand.getAbsolutePath())[ FD ]
Line_14 $$ FileSystem fs = new RawLocalFileSystem()-->Line_15 $$ fs.setConf(conf)[ FD ]
Line_16 $$ Writer<IntWritable, Text> wr = new Writer<IntWritable, Text>(conf, fs.create(new Path(workSpace.getAbsolutePath() + File.separator + "outfile")), IntWritable.class, Text.class, null, null, true)-->Line_17 $$ output.setWriter(wr)[ FD ]
Line_20 $$ Application<WritableComparable<IntWritable>, Writable, IntWritable, Text> application = new Application<WritableComparable<IntWritable>, Writable, IntWritable, Text>(conf, rReader, output, reporter, IntWritable.class, Text.class)-->Line_34 $$ application.getDownlink().close()[ FD ]
Line_13 $$ FakeCollector output = new FakeCollector(new Counters.Counter(), new Progress())-->Line_35 $$ Entry<IntWritable, Text> entry = output.getCollect().entrySet().iterator().next()[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_9 $$ conf.set(MRJobConfig.TASK_ATTEMPT_ID, taskName)[ FD ]
Line_20 $$ Application<WritableComparable<IntWritable>, Writable, IntWritable, Text> application = new Application<WritableComparable<IntWritable>, Writable, IntWritable, Text>(conf, rReader, output, reporter, IntWritable.class, Text.class)-->Line_39 $$ application.abort(new Throwable())[ FD ]
Line_2 $$ public void testApplication() throws Throwable -->Line_5 $$ File fCommand = getFileCommand("org.apache.hadoop.mapred.pipes.PipeApplicationStub")[ CD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_18 $$ conf.set(Submitter.PRESERVE_COMMANDFILE, "true")[ FD ]
Line_5 $$ File fCommand = getFileCommand("org.apache.hadoop.mapred.pipes.PipeApplicationStub")-->Line_10 $$ conf.set(MRJobConfig.CACHE_LOCALFILES, fCommand.getAbsolutePath())[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_12 $$ TokenCache.setJobToken(token, conf.getCredentials())[ FD ]
