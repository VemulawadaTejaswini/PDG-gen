Line_12 $$ if (!isConvertablePredicatesMethod(method))-->Line_13 $$ return null[ CD ]
Line_6 $$ if (name.equals("isNull") || name.equals("notNull")) -->Line_9 $$ if (name.equals("equalTo")) [ CD ]
Line_2 $$ static TypeConversionDescriptorBase tryConvertIfPredicates(PsiMethod method, PsiExpression context) -->Line_12 $$ if (!isConvertablePredicatesMethod(method))[ CD ]
Line_6 $$ if (name.equals("isNull") || name.equals("notNull")) -->Line_8 $$ return new TypeConversionDescriptorWithLocalVariable(name, "$x$ -> $x$" + operation + " null")[ CD ]
Line_2 $$ static TypeConversionDescriptorBase tryConvertIfPredicates(PsiMethod method, PsiExpression context) -->Line_15 $$ return new AndOrOrConversionDescriptor(GuavaConversionUtil.addTypeParameters(GuavaPredicateConversionRule.JAVA_PREDICATE, context.getType(), context))[ FD ]
Line_14 $$ if (PREDICATES_AND_OR.contains(name) && canMigrateAndOrOr((PsiMethodCallExpression) context)) -->Line_15 $$ return new AndOrOrConversionDescriptor(GuavaConversionUtil.addTypeParameters(GuavaPredicateConversionRule.JAVA_PREDICATE, context.getType(), context))[ CD ]
Line_9 $$ if (name.equals("equalTo")) -->Line_10 $$ return new TypeConversionDescriptorWithLocalVariable("equalTo", "$x$ -> java.util.Objects.equals($x$, $v$)")[ CD ]
Line_3 $$ final String name = method.getName()-->Line_16 $$ if (PREDICATES_NOT.equals(name)) [ FD ]
Line_2 $$ static TypeConversionDescriptorBase tryConvertIfPredicates(PsiMethod method, PsiExpression context) -->Line_17 $$ return new NotConversionDescriptor(GuavaConversionUtil.addTypeParameters(GuavaPredicateConversionRule.JAVA_PREDICATE, context.getType(), context))[ FD ]
Line_2 $$ static TypeConversionDescriptorBase tryConvertIfPredicates(PsiMethod method, PsiExpression context) -->Line_4 $$ if (name.equals("alwaysTrue") || name.equals("alwaysFalse")) [ CD ]
Line_3 $$ final String name = method.getName()-->Line_9 $$ if (name.equals("equalTo")) [ FD ]
Line_14 $$ if (PREDICATES_AND_OR.contains(name) && canMigrateAndOrOr((PsiMethodCallExpression) context)) -->Line_16 $$ if (PREDICATES_NOT.equals(name)) [ CD ]
Line_16 $$ if (PREDICATES_NOT.equals(name)) -->Line_17 $$ return new NotConversionDescriptor(GuavaConversionUtil.addTypeParameters(GuavaPredicateConversionRule.JAVA_PREDICATE, context.getType(), context))[ CD ]
Line_4 $$ if (name.equals("alwaysTrue") || name.equals("alwaysFalse")) -->Line_6 $$ if (name.equals("isNull") || name.equals("notNull")) [ CD ]
Line_2 $$ static TypeConversionDescriptorBase tryConvertIfPredicates(PsiMethod method, PsiExpression context) -->Line_14 $$ if (PREDICATES_AND_OR.contains(name) && canMigrateAndOrOr((PsiMethodCallExpression) context)) [ CD ]
Line_2 $$ static TypeConversionDescriptorBase tryConvertIfPredicates(PsiMethod method, PsiExpression context) -->Line_3 $$ final String name = method.getName()[ CD ]
Line_2 $$ static TypeConversionDescriptorBase tryConvertIfPredicates(PsiMethod method, PsiExpression context) -->Line_19 $$ return null[ CD ]
Line_3 $$ final String name = method.getName()-->Line_4 $$ if (name.equals("alwaysTrue") || name.equals("alwaysFalse")) [ FD ]
Line_2 $$ static TypeConversionDescriptorBase tryConvertIfPredicates(PsiMethod method, PsiExpression context) -->Line_3 $$ final String name = method.getName()[ FD ]
Line_3 $$ final String name = method.getName()-->Line_5 $$ return new TypeConversionDescriptorWithLocalVariable(name, "$x$ -> " + name.contains("True") + "")[ FD ]
Line_6 $$ if (name.equals("isNull") || name.equals("notNull")) -->Line_7 $$ final String operation = name.equals("isNull") ? "==" : "!="[ CD ]
Line_2 $$ static TypeConversionDescriptorBase tryConvertIfPredicates(PsiMethod method, PsiExpression context) -->Line_12 $$ if (!isConvertablePredicatesMethod(method))[ FD ]
Line_3 $$ final String name = method.getName()-->Line_7 $$ final String operation = name.equals("isNull") ? "==" : "!="[ FD ]
Line_3 $$ final String name = method.getName()-->Line_14 $$ if (PREDICATES_AND_OR.contains(name) && canMigrateAndOrOr((PsiMethodCallExpression) context)) [ FD ]
Line_4 $$ if (name.equals("alwaysTrue") || name.equals("alwaysFalse")) -->Line_5 $$ return new TypeConversionDescriptorWithLocalVariable(name, "$x$ -> " + name.contains("True") + "")[ CD ]
Line_3 $$ final String name = method.getName()-->Line_6 $$ if (name.equals("isNull") || name.equals("notNull")) [ FD ]
