Line_8 $$ for (int i = 0; i < NUM_NN_TEST_CASES; i++) -->Line_11 $$ boolean curAfterRecover = testCase[CURRENT_SHOULD_EXIST_AFTER_RECOVER][ CD ]
Line_3 $$ String[] baseDirs-->Line_17 $$ checkResultNameNode(baseDirs, curAfterRecover, prevAfterRecover)[ FD ]
Line_4 $$ for (int numDirs = 1; numDirs <= 2; numDirs++) -->Line_13 $$ log("NAME_NODE recovery", numDirs, i, testCase)[ FD ]
Line_15 $$ if (shouldRecover) -->Line_16 $$ cluster = createCluster(conf)[ CD ]
Line_2 $$ public void testNNStorageStates() throws Exception -->Line_4 $$ for (int numDirs = 1; numDirs <= 2; numDirs++) [ CD ]
Line_8 $$ for (int i = 0; i < NUM_NN_TEST_CASES; i++) -->Line_29 $$ cluster.shutdown()[ CD ]
Line_11 $$ boolean curAfterRecover = testCase[CURRENT_SHOULD_EXIST_AFTER_RECOVER]-->Line_17 $$ checkResultNameNode(baseDirs, curAfterRecover, prevAfterRecover)[ FD ]
Line_12 $$ boolean prevAfterRecover = testCase[PREVIOUS_SHOULD_EXIST_AFTER_RECOVER]-->Line_17 $$ checkResultNameNode(baseDirs, curAfterRecover, prevAfterRecover)[ FD ]
Line_9 $$ boolean[] testCase = testCases[i]-->Line_13 $$ log("NAME_NODE recovery", numDirs, i, testCase)[ FD ]
Line_2 $$ public void testNNStorageStates() throws Exception -->Line_3 $$ String[] baseDirs[ CD ]
Line_24 $$ if (!testCases[i][CURRENT_EXISTS] && !testCases[i][PREVIOUS_TMP_EXISTS] && !testCases[i][PREVIOUS_EXISTS] && !testCases[i][REMOVED_TMP_EXISTS]) -->Line_25 $$ assertTrue(expected.getLocalizedMessage().contains("NameNode is not formatted"))[ CD ]
Line_8 $$ for (int i = 0; i < NUM_NN_TEST_CASES; i++) -->Line_13 $$ log("NAME_NODE recovery", numDirs, i, testCase)[ FD ]
Line_8 $$ for (int i = 0; i < NUM_NN_TEST_CASES; i++) -->Line_15 $$ if (shouldRecover) [ CD ]
Line_4 $$ for (int numDirs = 1; numDirs <= 2; numDirs++) -->Line_6 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_SCAN_PERIOD_HOURS_KEY, -1)[ CD ]
Line_3 $$ String[] baseDirs-->Line_14 $$ baseDirs = createNameNodeStorageState(testCase)[ FD ]
Line_4 $$ for (int numDirs = 1; numDirs <= 2; numDirs++) -->Line_8 $$ for (int i = 0; i < NUM_NN_TEST_CASES; i++) [ CD ]
Line_8 $$ for (int i = 0; i < NUM_NN_TEST_CASES; i++) -->Line_14 $$ baseDirs = createNameNodeStorageState(testCase)[ CD ]
Line_14 $$ baseDirs = createNameNodeStorageState(testCase)-->Line_17 $$ checkResultNameNode(baseDirs, curAfterRecover, prevAfterRecover)[ FD ]
Line_4 $$ for (int numDirs = 1; numDirs <= 2; numDirs++) -->Line_7 $$ conf = UpgradeUtilities.initializeStorageStateConf(numDirs, conf)[ FD ]
Line_4 $$ for (int numDirs = 1; numDirs <= 2; numDirs++) -->Line_7 $$ conf = UpgradeUtilities.initializeStorageStateConf(numDirs, conf)[ CD ]
Line_15 $$ if (shouldRecover) -->Line_17 $$ checkResultNameNode(baseDirs, curAfterRecover, prevAfterRecover)[ CD ]
Line_8 $$ for (int i = 0; i < NUM_NN_TEST_CASES; i++) -->Line_13 $$ log("NAME_NODE recovery", numDirs, i, testCase)[ CD ]
Line_9 $$ boolean[] testCase = testCases[i]-->Line_14 $$ baseDirs = createNameNodeStorageState(testCase)[ FD ]
Line_8 $$ for (int i = 0; i < NUM_NN_TEST_CASES; i++) -->Line_9 $$ boolean[] testCase = testCases[i][ CD ]
Line_8 $$ for (int i = 0; i < NUM_NN_TEST_CASES; i++) -->Line_12 $$ boolean prevAfterRecover = testCase[PREVIOUS_SHOULD_EXIST_AFTER_RECOVER][ CD ]
Line_15 $$ if (shouldRecover) -->Line_18 $$ cluster.shutdown()[ CD ]
Line_8 $$ for (int i = 0; i < NUM_NN_TEST_CASES; i++) -->Line_10 $$ boolean shouldRecover = testCase[SHOULD_RECOVER][ CD ]
