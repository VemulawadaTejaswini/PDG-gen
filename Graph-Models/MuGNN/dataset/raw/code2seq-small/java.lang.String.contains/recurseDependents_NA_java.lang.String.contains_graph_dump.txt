Line_3 $$ for (String d : dependentClasses) -->Line_4 $$ if (!visited.add(d)) [ FD ]
Line_7 $$ if (!d.contains("$")) -->Line_8 $$ result.add(d)[ CD ]
Line_3 $$ for (String d : dependentClasses) -->Line_8 $$ result.add(d)[ FD ]
Line_10 $$ DependentsSet currentDependents = data.getDependents(d)-->Line_11 $$ recurseDependents(visited, result, currentDependents.getDependentClasses())[ FD ]
Line_3 $$ for (String d : dependentClasses) -->Line_7 $$ if (!d.contains("$")) [ FD ]
Line_2 $$ private void recurseDependents(Set<String> visited, Set<String> result, Set<String> dependentClasses) -->Line_4 $$ if (!visited.add(d)) [ FD ]
Line_2 $$ private void recurseDependents(Set<String> visited, Set<String> result, Set<String> dependentClasses) -->Line_8 $$ result.add(d)[ FD ]
Line_3 $$ for (String d : dependentClasses) -->Line_10 $$ DependentsSet currentDependents = data.getDependents(d)[ FD ]
Line_2 $$ private void recurseDependents(Set<String> visited, Set<String> result, Set<String> dependentClasses) -->Line_11 $$ recurseDependents(visited, result, currentDependents.getDependentClasses())[ FD ]
