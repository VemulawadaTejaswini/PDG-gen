Line_3 $$ File classFile = new File(FileUtil.getTempDirectory(), "ReuseTest.class")-->Line_6 $$ assertNotNull(classFile.getPath(), vFile)[ FD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_24 $$ assertTrue(text2, text2.contains("private int f2"))[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_10 $$ FileUtil.copy(new File(testDir, "pkg/ReuseTestV1.class"), classFile)[ CD ]
Line_13 $$ String text1 = psiFile.getText()-->Line_14 $$ assertTrue(text1, text1.contains("private int f1"))[ FD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_19 $$ FileUtil.copy(new File(testDir, "pkg/ReuseTestV2.class"), classFile)[ CD ]
Line_22 $$ String text2 = psiFile.getText()-->Line_24 $$ assertTrue(text2, text2.contains("private int f2"))[ FD ]
Line_7 $$ PsiFile psiFile = PsiManager.getInstance(getProject()).findFile(vFile)-->Line_18 $$ assertSame(doc1, PsiDocumentManager.getInstance(getProject()).getDocument(psiFile))[ FD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_18 $$ assertSame(doc1, PsiDocumentManager.getInstance(getProject()).getDocument(psiFile))[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_17 $$ assertNotNull(doc1)[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_13 $$ String text1 = psiFile.getText()[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_12 $$ PsiDocumentManager.getInstance(getProject()).commitAllDocuments()[ CD ]
Line_7 $$ PsiFile psiFile = PsiManager.getInstance(getProject()).findFile(vFile)-->Line_13 $$ String text1 = psiFile.getText()[ FD ]
Line_5 $$ VirtualFile vFile = StandardFileSystems.local().findFileByPath(classFile.getPath())-->Line_20 $$ vFile.refresh(false, false)[ FD ]
Line_5 $$ VirtualFile vFile = StandardFileSystems.local().findFileByPath(classFile.getPath())-->Line_25 $$ Document doc2 = FileDocumentManager.getInstance().getCachedDocument(vFile)[ FD ]
Line_25 $$ Document doc2 = FileDocumentManager.getInstance().getCachedDocument(vFile)-->Line_26 $$ assertNotNull(doc2)[ FD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_22 $$ String text2 = psiFile.getText()[ CD ]
Line_25 $$ Document doc2 = FileDocumentManager.getInstance().getCachedDocument(vFile)-->Line_27 $$ assertSame(doc2, PsiDocumentManager.getInstance(getProject()).getDocument(psiFile))[ FD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_4 $$ FileUtil.writeToFile(classFile, "")[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_14 $$ assertTrue(text1, text1.contains("private int f1"))[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_8 $$ assertNotNull(psiFile)[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_16 $$ Document doc1 = FileDocumentManager.getInstance().getCachedDocument(vFile)[ CD ]
Line_5 $$ VirtualFile vFile = StandardFileSystems.local().findFileByPath(classFile.getPath())-->Line_16 $$ Document doc1 = FileDocumentManager.getInstance().getCachedDocument(vFile)[ FD ]
Line_16 $$ Document doc1 = FileDocumentManager.getInstance().getCachedDocument(vFile)-->Line_18 $$ assertSame(doc1, PsiDocumentManager.getInstance(getProject()).getDocument(psiFile))[ FD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_6 $$ assertNotNull(classFile.getPath(), vFile)[ CD ]
Line_3 $$ File classFile = new File(FileUtil.getTempDirectory(), "ReuseTest.class")-->Line_4 $$ FileUtil.writeToFile(classFile, "")[ FD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_25 $$ Document doc2 = FileDocumentManager.getInstance().getCachedDocument(vFile)[ CD ]
Line_5 $$ VirtualFile vFile = StandardFileSystems.local().findFileByPath(classFile.getPath())-->Line_6 $$ assertNotNull(classFile.getPath(), vFile)[ FD ]
Line_7 $$ PsiFile psiFile = PsiManager.getInstance(getProject()).findFile(vFile)-->Line_27 $$ assertSame(doc2, PsiDocumentManager.getInstance(getProject()).getDocument(psiFile))[ FD ]
Line_3 $$ File classFile = new File(FileUtil.getTempDirectory(), "ReuseTest.class")-->Line_10 $$ FileUtil.copy(new File(testDir, "pkg/ReuseTestV1.class"), classFile)[ FD ]
Line_3 $$ File classFile = new File(FileUtil.getTempDirectory(), "ReuseTest.class")-->Line_5 $$ VirtualFile vFile = StandardFileSystems.local().findFileByPath(classFile.getPath())[ FD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_11 $$ vFile.refresh(false, false)[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_9 $$ String testDir = getTestDataDir()[ CD ]
Line_16 $$ Document doc1 = FileDocumentManager.getInstance().getCachedDocument(vFile)-->Line_17 $$ assertNotNull(doc1)[ FD ]
Line_3 $$ File classFile = new File(FileUtil.getTempDirectory(), "ReuseTest.class")-->Line_19 $$ FileUtil.copy(new File(testDir, "pkg/ReuseTestV2.class"), classFile)[ FD ]
Line_13 $$ String text1 = psiFile.getText()-->Line_15 $$ assertFalse(text1, text1.contains("private int f2"))[ FD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_26 $$ assertNotNull(doc2)[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_7 $$ PsiFile psiFile = PsiManager.getInstance(getProject()).findFile(vFile)[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_3 $$ File classFile = new File(FileUtil.getTempDirectory(), "ReuseTest.class")[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_23 $$ assertTrue(text2, text2.contains("private int f1"))[ CD ]
Line_7 $$ PsiFile psiFile = PsiManager.getInstance(getProject()).findFile(vFile)-->Line_22 $$ String text2 = psiFile.getText()[ FD ]
Line_5 $$ VirtualFile vFile = StandardFileSystems.local().findFileByPath(classFile.getPath())-->Line_7 $$ PsiFile psiFile = PsiManager.getInstance(getProject()).findFile(vFile)[ FD ]
Line_7 $$ PsiFile psiFile = PsiManager.getInstance(getProject()).findFile(vFile)-->Line_8 $$ assertNotNull(psiFile)[ FD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_20 $$ vFile.refresh(false, false)[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_21 $$ PsiDocumentManager.getInstance(getProject()).commitAllDocuments()[ CD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_5 $$ VirtualFile vFile = StandardFileSystems.local().findFileByPath(classFile.getPath())[ CD ]
Line_22 $$ String text2 = psiFile.getText()-->Line_23 $$ assertTrue(text2, text2.contains("private int f1"))[ FD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_15 $$ assertFalse(text1, text1.contains("private int f2"))[ CD ]
Line_5 $$ VirtualFile vFile = StandardFileSystems.local().findFileByPath(classFile.getPath())-->Line_11 $$ vFile.refresh(false, false)[ FD ]
Line_2 $$ public void testDocumentReuse() throws IOException -->Line_27 $$ assertSame(doc2, PsiDocumentManager.getInstance(getProject()).getDocument(psiFile))[ CD ]
