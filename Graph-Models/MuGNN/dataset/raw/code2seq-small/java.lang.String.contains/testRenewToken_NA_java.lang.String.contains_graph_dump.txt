Line_12 $$ AuthenticationToken token = Mockito.mock(AuthenticationToken.class)-->Line_14 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ FD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_22 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_8 $$ Assert.assertFalse(handler.managementOperation(null, request, response))[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_13 $$ Mockito.when(token.getUserName()).thenReturn("user")[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_10 $$ Mockito.verify(response).setHeader(Mockito.eq(KerberosAuthenticator.WWW_AUTHENTICATE), Mockito.eq("mock"))[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)[ CD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_14 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ FD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_19 $$ Mockito.when(response.getWriter()).thenReturn(pwriter)[ FD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_20 $$ Token<DelegationTokenIdentifier> dToken = handler.getTokenManager().createToken(UserGroupInformation.getCurrentUser(), "user")[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_25 $$ Assert.assertTrue(writer.toString().contains("long"))[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_17 $$ StringWriter writer = new StringWriter()[ CD ]
Line_20 $$ Token<DelegationTokenIdentifier> dToken = handler.getTokenManager().createToken(UserGroupInformation.getCurrentUser(), "user")-->Line_26 $$ handler.getTokenManager().verifyToken(dToken)[ FD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_11 $$ Mockito.reset(response)[ FD ]
Line_18 $$ PrintWriter pwriter = new PrintWriter(writer)-->Line_24 $$ pwriter.close()[ FD ]
Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_14 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ FD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_8 $$ Assert.assertFalse(handler.managementOperation(null, request, response))[ FD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_15 $$ Mockito.verify(response).sendError(Mockito.eq(HttpServletResponse.SC_BAD_REQUEST), Mockito.contains("requires the parameter [token]"))[ FD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_9 $$ Mockito.verify(response).setStatus(Mockito.eq(HttpServletResponse.SC_UNAUTHORIZED))[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_21 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString() + "&" + DelegationTokenAuthenticator.TOKEN_PARAM + "=" + dToken.encodeToUrlString())[ CD ]
Line_12 $$ AuthenticationToken token = Mockito.mock(AuthenticationToken.class)-->Line_22 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ FD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_23 $$ Mockito.verify(response).setStatus(HttpServletResponse.SC_OK)[ FD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_26 $$ handler.getTokenManager().verifyToken(dToken)[ CD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_10 $$ Mockito.verify(response).setHeader(Mockito.eq(KerberosAuthenticator.WWW_AUTHENTICATE), Mockito.eq("mock"))[ FD ]
Line_17 $$ StringWriter writer = new StringWriter()-->Line_25 $$ Assert.assertTrue(writer.toString().contains("long"))[ FD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)[ CD ]
Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_6 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString())[ FD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_18 $$ PrintWriter pwriter = new PrintWriter(writer)[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_24 $$ pwriter.close()[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_6 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString())[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_3 $$ DelegationTokenAuthenticator.DelegationTokenOperation op = DelegationTokenAuthenticator.DelegationTokenOperation.RENEWDELEGATIONTOKEN[ CD ]
Line_3 $$ DelegationTokenAuthenticator.DelegationTokenOperation op = DelegationTokenAuthenticator.DelegationTokenOperation.RENEWDELEGATIONTOKEN-->Line_6 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString())[ FD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_15 $$ Mockito.verify(response).sendError(Mockito.eq(HttpServletResponse.SC_BAD_REQUEST), Mockito.contains("requires the parameter [token]"))[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_12 $$ AuthenticationToken token = Mockito.mock(AuthenticationToken.class)[ CD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_22 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ FD ]
Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_7 $$ Mockito.when(request.getMethod()).thenReturn(op.getHttpMethod())[ FD ]
Line_3 $$ DelegationTokenAuthenticator.DelegationTokenOperation op = DelegationTokenAuthenticator.DelegationTokenOperation.RENEWDELEGATIONTOKEN-->Line_7 $$ Mockito.when(request.getMethod()).thenReturn(op.getHttpMethod())[ FD ]
Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_21 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString() + "&" + DelegationTokenAuthenticator.TOKEN_PARAM + "=" + dToken.encodeToUrlString())[ FD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_23 $$ Mockito.verify(response).setStatus(HttpServletResponse.SC_OK)[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_16 $$ Mockito.reset(response)[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_7 $$ Mockito.when(request.getMethod()).thenReturn(op.getHttpMethod())[ CD ]
Line_18 $$ PrintWriter pwriter = new PrintWriter(writer)-->Line_19 $$ Mockito.when(response.getWriter()).thenReturn(pwriter)[ FD ]
Line_20 $$ Token<DelegationTokenIdentifier> dToken = handler.getTokenManager().createToken(UserGroupInformation.getCurrentUser(), "user")-->Line_21 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString() + "&" + DelegationTokenAuthenticator.TOKEN_PARAM + "=" + dToken.encodeToUrlString())[ FD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_9 $$ Mockito.verify(response).setStatus(Mockito.eq(HttpServletResponse.SC_UNAUTHORIZED))[ FD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_11 $$ Mockito.reset(response)[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_14 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ CD ]
Line_2 $$ private void testRenewToken() throws Exception -->Line_19 $$ Mockito.when(response.getWriter()).thenReturn(pwriter)[ CD ]
Line_3 $$ DelegationTokenAuthenticator.DelegationTokenOperation op = DelegationTokenAuthenticator.DelegationTokenOperation.RENEWDELEGATIONTOKEN-->Line_21 $$ Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString() + "&" + DelegationTokenAuthenticator.TOKEN_PARAM + "=" + dToken.encodeToUrlString())[ FD ]
Line_12 $$ AuthenticationToken token = Mockito.mock(AuthenticationToken.class)-->Line_13 $$ Mockito.when(token.getUserName()).thenReturn("user")[ FD ]
Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_22 $$ Assert.assertFalse(handler.managementOperation(token, request, response))[ FD ]
Line_4 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_8 $$ Assert.assertFalse(handler.managementOperation(null, request, response))[ FD ]
Line_5 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_16 $$ Mockito.reset(response)[ FD ]
