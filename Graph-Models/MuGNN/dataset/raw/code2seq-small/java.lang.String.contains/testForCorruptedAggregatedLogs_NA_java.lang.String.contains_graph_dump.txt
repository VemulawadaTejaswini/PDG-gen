Line_9 $$ Path srcFilePath = new Path(t, testContainerId.toString())-->Line_11 $$ writeSrcFileAndALog(srcFilePath, "stdout", numChars, remoteAppLogFile, srcFileRoot, testContainerId)[ FD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_8 $$ Path t = new Path(srcFileRoot, testContainerId.getApplicationAttemptId().getApplicationId().toString())[ CD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_12 $$ LogReader logReader = new LogReader(conf, remoteAppLogFile)[ CD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_9 $$ Path srcFilePath = new Path(t, testContainerId.toString())[ CD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_6 $$ Path srcFileRoot = new Path(workDir.getAbsolutePath(), "srcFiles")[ CD ]
Line_7 $$ ContainerId testContainerId = TestContainerId.newContainerId(1, 1, 1, 1)-->Line_9 $$ Path srcFilePath = new Path(t, testContainerId.toString())[ FD ]
Line_13 $$ LogKey rLogKey = new LogKey()-->Line_14 $$ DataInputStream dis = logReader.next(rLogKey)[ FD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_15 $$ Writer writer = new StringWriter()-->Line_17 $$ LogReader.readAcontainerLogs(dis, writer)[ FD ]
Line_10 $$ long numChars = 950000-->Line_11 $$ writeSrcFileAndALog(srcFilePath, "stdout", numChars, remoteAppLogFile, srcFileRoot, testContainerId)[ FD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_15 $$ Writer writer = new StringWriter()[ CD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_13 $$ LogKey rLogKey = new LogKey()[ CD ]
Line_4 $$ File workDir = new File(testWorkDir, "testReadAcontainerLogs1")-->Line_6 $$ Path srcFileRoot = new Path(workDir.getAbsolutePath(), "srcFiles")[ FD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_11 $$ writeSrcFileAndALog(srcFilePath, "stdout", numChars, remoteAppLogFile, srcFileRoot, testContainerId)[ CD ]
Line_5 $$ Path remoteAppLogFile = new Path(workDir.getAbsolutePath(), "aggregatedLogFile")-->Line_11 $$ writeSrcFileAndALog(srcFilePath, "stdout", numChars, remoteAppLogFile, srcFileRoot, testContainerId)[ FD ]
Line_4 $$ File workDir = new File(testWorkDir, "testReadAcontainerLogs1")-->Line_5 $$ Path remoteAppLogFile = new Path(workDir.getAbsolutePath(), "aggregatedLogFile")[ FD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_10 $$ long numChars = 950000[ CD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_4 $$ File workDir = new File(testWorkDir, "testReadAcontainerLogs1")[ CD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_14 $$ DataInputStream dis = logReader.next(rLogKey)[ CD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_7 $$ ContainerId testContainerId = TestContainerId.newContainerId(1, 1, 1, 1)[ CD ]
Line_14 $$ DataInputStream dis = logReader.next(rLogKey)-->Line_17 $$ LogReader.readAcontainerLogs(dis, writer)[ FD ]
Line_19 $$ if (e.toString().contains("NumberFormatException")) -->Line_20 $$ Assert.fail("Aggregated logs are corrupted.")[ CD ]
Line_6 $$ Path srcFileRoot = new Path(workDir.getAbsolutePath(), "srcFiles")-->Line_11 $$ writeSrcFileAndALog(srcFilePath, "stdout", numChars, remoteAppLogFile, srcFileRoot, testContainerId)[ FD ]
Line_2 $$ public void testForCorruptedAggregatedLogs() throws Exception -->Line_5 $$ Path remoteAppLogFile = new Path(workDir.getAbsolutePath(), "aggregatedLogFile")[ CD ]
Line_7 $$ ContainerId testContainerId = TestContainerId.newContainerId(1, 1, 1, 1)-->Line_8 $$ Path t = new Path(srcFileRoot, testContainerId.getApplicationAttemptId().getApplicationId().toString())[ FD ]
Line_12 $$ LogReader logReader = new LogReader(conf, remoteAppLogFile)-->Line_14 $$ DataInputStream dis = logReader.next(rLogKey)[ FD ]
Line_7 $$ ContainerId testContainerId = TestContainerId.newContainerId(1, 1, 1, 1)-->Line_11 $$ writeSrcFileAndALog(srcFilePath, "stdout", numChars, remoteAppLogFile, srcFileRoot, testContainerId)[ FD ]
