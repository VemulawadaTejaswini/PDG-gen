Line_22 $$ if (elementUsage.isNonCodeUsage()) -->Line_26 $$ codeUsageCount++[ CD ]
Line_41 $$ String codeReferencesText = descriptor.getCodeReferencesText(codeUsageCount, codeFiles.size())-->Line_49 $$ if (codeReferencesText.contains("in code")) [ FD ]
Line_48 $$ String generatedCodeString-->Line_50 $$ generatedCodeString = StringUtil.replace(codeReferencesText, "in code", "in generated code")[ FD ]
Line_16 $$ if (usage instanceof PsiElementUsage) -->Line_18 $$ final PsiElement element = elementUsage.getElement()[ CD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_43 $$ final String commentReferencesText = descriptor.getCommentReferencesText(nonCodeUsageCount, nonCodeFiles.size())[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_44 $$ if (commentReferencesText != null) [ CD ]
Line_48 $$ String generatedCodeString-->Line_52 $$ generatedCodeString = codeReferencesText + " in generated code"[ FD ]
Line_43 $$ final String commentReferencesText = descriptor.getCommentReferencesText(nonCodeUsageCount, nonCodeFiles.size())-->Line_45 $$ presentation.setNonCodeUsagesString(commentReferencesText)[ FD ]
Line_16 $$ if (usage instanceof PsiElementUsage) -->Line_19 $$ if (element == null)[ CD ]
Line_21 $$ final PsiFile containingFile = element.getContainingFile()-->Line_27 $$ codeFiles.add(containingFile)[ FD ]
Line_21 $$ final PsiFile containingFile = element.getContainingFile()-->Line_24 $$ nonCodeFiles.add(containingFile)[ FD ]
Line_52 $$ generatedCodeString = codeReferencesText + " in generated code"-->Line_54 $$ presentation.setUsagesInGeneratedCodeString(generatedCodeString)[ FD ]
Line_17 $$ final PsiElementUsage elementUsage = (PsiElementUsage) usage-->Line_22 $$ if (elementUsage.isNonCodeUsage()) [ FD ]
Line_16 $$ if (usage instanceof PsiElementUsage) -->Line_17 $$ final PsiElementUsage elementUsage = (PsiElementUsage) usage[ CD ]
Line_16 $$ if (usage instanceof PsiElementUsage) -->Line_21 $$ final PsiFile containingFile = element.getContainingFile()[ CD ]
Line_49 $$ if (codeReferencesText.contains("in code")) -->Line_50 $$ generatedCodeString = StringUtil.replace(codeReferencesText, "in code", "in generated code")[ CD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_47 $$ presentation.setDynamicUsagesString("Dynamic " + StringUtil.decapitalize(descriptor.getCodeReferencesText(dynamicUsagesCount, dynamicUsagesCodeFiles.size())))[ FD ]
Line_9 $$ int codeUsageCount = 0-->Line_41 $$ String codeReferencesText = descriptor.getCodeReferencesText(codeUsageCount, codeFiles.size())[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_38 $$ codeFiles.remove(null)[ CD ]
Line_41 $$ String codeReferencesText = descriptor.getCodeReferencesText(codeUsageCount, codeFiles.size())-->Line_52 $$ generatedCodeString = codeReferencesText + " in generated code"[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_10 $$ int nonCodeUsageCount = 0[ CD ]
Line_16 $$ if (usage instanceof PsiElementUsage) -->Line_22 $$ if (elementUsage.isNonCodeUsage()) [ CD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_39 $$ nonCodeFiles.remove(null)[ CD ]
Line_17 $$ final PsiElementUsage elementUsage = (PsiElementUsage) usage-->Line_18 $$ final PsiElement element = elementUsage.getElement()[ FD ]
Line_11 $$ int dynamicUsagesCount = 0-->Line_32 $$ dynamicUsagesCount++[ FD ]
Line_13 $$ Set<PsiFile> nonCodeFiles = new HashSet<PsiFile>()-->Line_24 $$ nonCodeFiles.add(containingFile)[ FD ]
Line_22 $$ if (elementUsage.isNonCodeUsage()) -->Line_27 $$ codeFiles.add(containingFile)[ CD ]
Line_29 $$ if (usage instanceof UsageInfo2UsageAdapter) -->Line_30 $$ final UsageInfo usageInfo = ((UsageInfo2UsageAdapter) usage).getUsageInfo()[ CD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_43 $$ final String commentReferencesText = descriptor.getCommentReferencesText(nonCodeUsageCount, nonCodeFiles.size())[ CD ]
Line_3 $$ UsageViewPresentation presentation = new UsageViewPresentation()-->Line_8 $$ presentation.setUsagesString(RefactoringBundle.message("usageView.usagesText"))[ FD ]
Line_12 $$ Set<PsiFile> codeFiles = new HashSet<PsiFile>()-->Line_27 $$ codeFiles.add(containingFile)[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_40 $$ dynamicUsagesCodeFiles.remove(null)[ CD ]
Line_12 $$ Set<PsiFile> codeFiles = new HashSet<PsiFile>()-->Line_38 $$ codeFiles.remove(null)[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_12 $$ Set<PsiFile> codeFiles = new HashSet<PsiFile>()[ CD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_41 $$ String codeReferencesText = descriptor.getCodeReferencesText(codeUsageCount, codeFiles.size())[ CD ]
Line_18 $$ final PsiElement element = elementUsage.getElement()-->Line_19 $$ if (element == null)[ FD ]
Line_3 $$ UsageViewPresentation presentation = new UsageViewPresentation()-->Line_5 $$ presentation.setTargetsNodeText(descriptor.getProcessedElementsHeader())[ FD ]
Line_11 $$ int dynamicUsagesCount = 0-->Line_47 $$ presentation.setDynamicUsagesString("Dynamic " + StringUtil.decapitalize(descriptor.getCodeReferencesText(dynamicUsagesCount, dynamicUsagesCodeFiles.size())))[ FD ]
Line_15 $$ for (Usage usage : usages) -->Line_29 $$ if (usage instanceof UsageInfo2UsageAdapter) [ FD ]
Line_43 $$ final String commentReferencesText = descriptor.getCommentReferencesText(nonCodeUsageCount, nonCodeFiles.size())-->Line_44 $$ if (commentReferencesText != null) [ FD ]
Line_50 $$ generatedCodeString = StringUtil.replace(codeReferencesText, "in code", "in generated code")-->Line_54 $$ presentation.setUsagesInGeneratedCodeString(generatedCodeString)[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_8 $$ presentation.setUsagesString(RefactoringBundle.message("usageView.usagesText"))[ CD ]
Line_15 $$ for (Usage usage : usages) -->Line_16 $$ if (usage instanceof PsiElementUsage) [ FD ]
Line_30 $$ final UsageInfo usageInfo = ((UsageInfo2UsageAdapter) usage).getUsageInfo()-->Line_31 $$ if (usageInfo instanceof MoveRenameUsageInfo && usageInfo.isDynamicUsage()) [ FD ]
Line_44 $$ if (commentReferencesText != null) -->Line_45 $$ presentation.setNonCodeUsagesString(commentReferencesText)[ CD ]
Line_3 $$ UsageViewPresentation presentation = new UsageViewPresentation()-->Line_54 $$ presentation.setUsagesInGeneratedCodeString(generatedCodeString)[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_54 $$ presentation.setUsagesInGeneratedCodeString(generatedCodeString)[ CD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_48 $$ String generatedCodeString[ CD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_9 $$ int codeUsageCount = 0[ CD ]
Line_22 $$ if (elementUsage.isNonCodeUsage()) -->Line_24 $$ nonCodeFiles.add(containingFile)[ CD ]
Line_3 $$ UsageViewPresentation presentation = new UsageViewPresentation()-->Line_47 $$ presentation.setDynamicUsagesString("Dynamic " + StringUtil.decapitalize(descriptor.getCodeReferencesText(dynamicUsagesCount, dynamicUsagesCodeFiles.size())))[ FD ]
Line_31 $$ if (usageInfo instanceof MoveRenameUsageInfo && usageInfo.isDynamicUsage()) -->Line_32 $$ dynamicUsagesCount++[ CD ]
Line_3 $$ UsageViewPresentation presentation = new UsageViewPresentation()-->Line_45 $$ presentation.setNonCodeUsagesString(commentReferencesText)[ FD ]
Line_3 $$ UsageViewPresentation presentation = new UsageViewPresentation()-->Line_42 $$ presentation.setCodeUsagesString(codeReferencesText)[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_42 $$ presentation.setCodeUsagesString(codeReferencesText)[ CD ]
Line_41 $$ String codeReferencesText = descriptor.getCodeReferencesText(codeUsageCount, codeFiles.size())-->Line_42 $$ presentation.setCodeUsagesString(codeReferencesText)[ FD ]
Line_18 $$ final PsiElement element = elementUsage.getElement()-->Line_21 $$ final PsiFile containingFile = element.getContainingFile()[ FD ]
Line_16 $$ if (usage instanceof PsiElementUsage) -->Line_29 $$ if (usage instanceof UsageInfo2UsageAdapter) [ CD ]
Line_14 $$ Set<PsiFile> dynamicUsagesCodeFiles = new HashSet<PsiFile>()-->Line_47 $$ presentation.setDynamicUsagesString("Dynamic " + StringUtil.decapitalize(descriptor.getCodeReferencesText(dynamicUsagesCount, dynamicUsagesCodeFiles.size())))[ FD ]
Line_3 $$ UsageViewPresentation presentation = new UsageViewPresentation()-->Line_4 $$ presentation.setTabText(RefactoringBundle.message("usageView.tabText"))[ FD ]
Line_31 $$ if (usageInfo instanceof MoveRenameUsageInfo && usageInfo.isDynamicUsage()) -->Line_33 $$ dynamicUsagesCodeFiles.add(containingFile)[ CD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_5 $$ presentation.setTargetsNodeText(descriptor.getProcessedElementsHeader())[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_55 $$ return presentation[ CD ]
Line_3 $$ UsageViewPresentation presentation = new UsageViewPresentation()-->Line_6 $$ presentation.setShowReadOnlyStatusAsRed(true)[ FD ]
Line_14 $$ Set<PsiFile> dynamicUsagesCodeFiles = new HashSet<PsiFile>()-->Line_33 $$ dynamicUsagesCodeFiles.add(containingFile)[ FD ]
Line_13 $$ Set<PsiFile> nonCodeFiles = new HashSet<PsiFile>()-->Line_39 $$ nonCodeFiles.remove(null)[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_41 $$ String codeReferencesText = descriptor.getCodeReferencesText(codeUsageCount, codeFiles.size())[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_4 $$ presentation.setTabText(RefactoringBundle.message("usageView.tabText"))[ CD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_14 $$ Set<PsiFile> dynamicUsagesCodeFiles = new HashSet<PsiFile>()[ CD ]
Line_41 $$ String codeReferencesText = descriptor.getCodeReferencesText(codeUsageCount, codeFiles.size())-->Line_50 $$ generatedCodeString = StringUtil.replace(codeReferencesText, "in code", "in generated code")[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_47 $$ presentation.setDynamicUsagesString("Dynamic " + StringUtil.decapitalize(descriptor.getCodeReferencesText(dynamicUsagesCount, dynamicUsagesCodeFiles.size())))[ CD ]
Line_22 $$ if (elementUsage.isNonCodeUsage()) -->Line_23 $$ nonCodeUsageCount++[ CD ]
Line_10 $$ int nonCodeUsageCount = 0-->Line_43 $$ final String commentReferencesText = descriptor.getCommentReferencesText(nonCodeUsageCount, nonCodeFiles.size())[ FD ]
Line_13 $$ Set<PsiFile> nonCodeFiles = new HashSet<PsiFile>()-->Line_43 $$ final String commentReferencesText = descriptor.getCommentReferencesText(nonCodeUsageCount, nonCodeFiles.size())[ FD ]
Line_50 $$ generatedCodeString = StringUtil.replace(codeReferencesText, "in code", "in generated code")-->Line_52 $$ generatedCodeString = codeReferencesText + " in generated code"[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_6 $$ presentation.setShowReadOnlyStatusAsRed(true)[ CD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_7 $$ presentation.setShowCancelButton(true)[ CD ]
Line_21 $$ final PsiFile containingFile = element.getContainingFile()-->Line_33 $$ dynamicUsagesCodeFiles.add(containingFile)[ FD ]
Line_3 $$ UsageViewPresentation presentation = new UsageViewPresentation()-->Line_7 $$ presentation.setShowCancelButton(true)[ FD ]
Line_9 $$ int codeUsageCount = 0-->Line_26 $$ codeUsageCount++[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_5 $$ presentation.setTargetsNodeText(descriptor.getProcessedElementsHeader())[ CD ]
Line_49 $$ if (codeReferencesText.contains("in code")) -->Line_52 $$ generatedCodeString = codeReferencesText + " in generated code"[ CD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_3 $$ UsageViewPresentation presentation = new UsageViewPresentation()[ CD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_11 $$ int dynamicUsagesCount = 0[ CD ]
Line_12 $$ Set<PsiFile> codeFiles = new HashSet<PsiFile>()-->Line_41 $$ String codeReferencesText = descriptor.getCodeReferencesText(codeUsageCount, codeFiles.size())[ FD ]
Line_48 $$ String generatedCodeString-->Line_54 $$ presentation.setUsagesInGeneratedCodeString(generatedCodeString)[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_13 $$ Set<PsiFile> nonCodeFiles = new HashSet<PsiFile>()[ CD ]
Line_10 $$ int nonCodeUsageCount = 0-->Line_23 $$ nonCodeUsageCount++[ FD ]
Line_2 $$ private static UsageViewPresentation createPresentation(@NotNull UsageViewDescriptor descriptor, @NotNull Usage[] usages) -->Line_49 $$ if (codeReferencesText.contains("in code")) [ CD ]
Line_29 $$ if (usage instanceof UsageInfo2UsageAdapter) -->Line_31 $$ if (usageInfo instanceof MoveRenameUsageInfo && usageInfo.isDynamicUsage()) [ CD ]
Line_14 $$ Set<PsiFile> dynamicUsagesCodeFiles = new HashSet<PsiFile>()-->Line_40 $$ dynamicUsagesCodeFiles.remove(null)[ FD ]
