Line_12 $$ JSONWebServiceInvokerAction.InvokerResult invokerResult = (JSONWebServiceInvokerAction.InvokerResult) result-->Line_13 $$ json = invokerResult.toJSONString()[ FD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_16 $$ Assert.assertTrue(json.contains("\"new1\":[ CD ]
Line_3 $$ Map<String, Object> map = new LinkedHashMap()-->Line_9 $$ String json = toJSON(map)[ FD ]
Line_9 $$ String json = toJSON(map)-->Line_17 $$ Assert.assertTrue(json.contains("\"new2\":\"world\""))[ FD ]
Line_4 $$ Map<String, Object> params = new LinkedHashMap()-->Line_7 $$ params.put("$new1 = /foo/bar", innerParam)[ FD ]
Line_10 $$ JSONWebServiceAction jsonWebServiceAction = prepareInvokerAction(json)-->Line_11 $$ Object result = jsonWebServiceAction.invoke()[ FD ]
Line_9 $$ String json = toJSON(map)-->Line_13 $$ json = invokerResult.toJSONString()[ FD ]
Line_3 $$ Map<String, Object> map = new LinkedHashMap()-->Line_5 $$ map.put("/foo/bar", params)[ FD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_4 $$ Map<String, Object> params = new LinkedHashMap()[ CD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_5 $$ map.put("/foo/bar", params)[ CD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_11 $$ Object result = jsonWebServiceAction.invoke()[ CD ]
Line_6 $$ Map<String, Object> innerParam = new LinkedHashMap()-->Line_7 $$ params.put("$new1 = /foo/bar", innerParam)[ FD ]
Line_9 $$ String json = toJSON(map)-->Line_16 $$ Assert.assertTrue(json.contains("\"new1\":[ FD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_6 $$ Map<String, Object> innerParam = new LinkedHashMap()[ CD ]
Line_9 $$ String json = toJSON(map)-->Line_15 $$ Assert.assertFalse(json.contains("\"secret\""))[ FD ]
Line_4 $$ Map<String, Object> params = new LinkedHashMap()-->Line_5 $$ map.put("/foo/bar", params)[ FD ]
Line_13 $$ json = invokerResult.toJSONString()-->Line_14 $$ Assert.assertEquals(2, StringUtil.count(json, "\"array\":[1,2,3]"))[ FD ]
Line_13 $$ json = invokerResult.toJSONString()-->Line_16 $$ Assert.assertTrue(json.contains("\"new1\":[ FD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_15 $$ Assert.assertFalse(json.contains("\"secret\""))[ CD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_9 $$ String json = toJSON(map)[ CD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_7 $$ params.put("$new1 = /foo/bar", innerParam)[ CD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_10 $$ JSONWebServiceAction jsonWebServiceAction = prepareInvokerAction(json)[ CD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_17 $$ Assert.assertTrue(json.contains("\"new2\":\"world\""))[ CD ]
Line_9 $$ String json = toJSON(map)-->Line_10 $$ JSONWebServiceAction jsonWebServiceAction = prepareInvokerAction(json)[ FD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_12 $$ JSONWebServiceInvokerAction.InvokerResult invokerResult = (JSONWebServiceInvokerAction.InvokerResult) result[ CD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_14 $$ Assert.assertEquals(2, StringUtil.count(json, "\"array\":[1,2,3]"))[ CD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_3 $$ Map<String, Object> map = new LinkedHashMap()[ CD ]
Line_6 $$ Map<String, Object> innerParam = new LinkedHashMap()-->Line_8 $$ innerParam.put("$new2 = /foo/hello", Collections.emptyMap())[ FD ]
Line_13 $$ json = invokerResult.toJSONString()-->Line_17 $$ Assert.assertTrue(json.contains("\"new2\":\"world\""))[ FD ]
Line_13 $$ json = invokerResult.toJSONString()-->Line_15 $$ Assert.assertFalse(json.contains("\"secret\""))[ FD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_8 $$ innerParam.put("$new2 = /foo/hello", Collections.emptyMap())[ CD ]
Line_2 $$ public void testPropertyInner() throws Exception -->Line_13 $$ json = invokerResult.toJSONString()[ CD ]
Line_9 $$ String json = toJSON(map)-->Line_14 $$ Assert.assertEquals(2, StringUtil.count(json, "\"array\":[1,2,3]"))[ FD ]
