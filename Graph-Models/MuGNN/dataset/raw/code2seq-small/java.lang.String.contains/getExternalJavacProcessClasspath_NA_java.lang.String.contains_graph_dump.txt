Line_13 $$ final Class<StandardJavaFileManager> optimizedFileManagerClass = getOptimizedFileManagerClass()-->Line_15 $$ cp.add(getResourceFile(optimizedFileManagerClass))[ FD ]
Line_38 $$ final File targetFile = new File(sdkHome, relPath)-->Line_39 $$ cp.add(targetFile)[ FD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_9 $$ cp.add(getResourceFile(JpsModelImpl.class))[ CD ]
Line_25 $$ final File candidate = new File(sdkHome, "lib/tools.jar")-->Line_27 $$ cp.add(candidate)[ FD ]
Line_50 $$ for (JavaSourceTransformer t : loader) -->Line_51 $$ cp.add(getResourceFile(t.getClass()))[ FD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_4 $$ cp.add(getResourceFile(ExternalJavacProcess.class))[ CD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()[ CD ]
Line_14 $$ if (optimizedFileManagerClass != null) -->Line_15 $$ cp.add(getResourceFile(optimizedFileManagerClass))[ CD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_9 $$ cp.add(getResourceFile(JpsModelImpl.class))[ FD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_12 $$ cp.add(getJpsPluginSystemClassesPath())[ FD ]
Line_34 $$ if (relPath.contains("..")) -->Line_35 $$ relPath = FileUtil.getRelativePath(FileUtil.toSystemIndependentName(new File(localJavaHome).getParent()), localJarPath, '/')[ CD ]
Line_25 $$ final File candidate = new File(sdkHome, "lib/tools.jar")-->Line_26 $$ if (candidate.exists()) [ FD ]
Line_31 $$ final String localJarPath = FileUtil.toSystemIndependentName(getResourceFile(systemCompiler.getClass()).getPath())-->Line_32 $$ String relPath = FileUtil.getRelativePath(localJavaHome, localJarPath, '/')[ FD ]
Line_24 $$ final String localJavaHome = FileUtil.toSystemIndependentName(SystemProperties.getJavaHome())-->Line_32 $$ String relPath = FileUtil.getRelativePath(localJavaHome, localJarPath, '/')[ FD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_27 $$ cp.add(candidate)[ FD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_10 $$ cp.add(getResourceFile(Message.class))[ FD ]
Line_30 $$ if (systemCompiler != null) -->Line_33 $$ if (relPath != null) [ CD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_47 $$ cp.addAll(compilingTool.getAdditionalClasspath())[ FD ]
Line_33 $$ if (relPath != null) -->Line_34 $$ if (relPath.contains("..")) [ CD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_49 $$ final ServiceLoader<JavaSourceTransformer> loader = ServiceLoader.load(transformerClass, transformerClass.getClassLoader())[ CD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_11 $$ cp.add(getResourceFile(NetUtil.class))[ CD ]
Line_31 $$ final String localJarPath = FileUtil.toSystemIndependentName(getResourceFile(systemCompiler.getClass()).getPath())-->Line_35 $$ relPath = FileUtil.getRelativePath(FileUtil.toSystemIndependentName(new File(localJavaHome).getParent()), localJarPath, '/')[ FD ]
Line_37 $$ if (relPath != null) -->Line_39 $$ cp.add(targetFile)[ CD ]
Line_26 $$ if (candidate.exists()) -->Line_29 $$ final JavaCompiler systemCompiler = ToolProvider.getSystemJavaCompiler()[ CD ]
Line_33 $$ if (relPath != null) -->Line_37 $$ if (relPath != null) [ CD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_13 $$ final Class<StandardJavaFileManager> optimizedFileManagerClass = getOptimizedFileManagerClass()[ CD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_15 $$ cp.add(getResourceFile(optimizedFileManagerClass))[ FD ]
Line_13 $$ final Class<StandardJavaFileManager> optimizedFileManagerClass = getOptimizedFileManagerClass()-->Line_14 $$ if (optimizedFileManagerClass != null) [ FD ]
Line_32 $$ String relPath = FileUtil.getRelativePath(localJavaHome, localJarPath, '/')-->Line_35 $$ relPath = FileUtil.getRelativePath(FileUtil.toSystemIndependentName(new File(localJavaHome).getParent()), localJarPath, '/')[ FD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_11 $$ cp.add(getResourceFile(NetUtil.class))[ FD ]
Line_35 $$ relPath = FileUtil.getRelativePath(FileUtil.toSystemIndependentName(new File(localJavaHome).getParent()), localJarPath, '/')-->Line_37 $$ if (relPath != null) [ FD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_47 $$ cp.addAll(compilingTool.getAdditionalClasspath())[ FD ]
Line_48 $$ final Class<JavaSourceTransformer> transformerClass = JavaSourceTransformer.class-->Line_49 $$ final ServiceLoader<JavaSourceTransformer> loader = ServiceLoader.load(transformerClass, transformerClass.getClassLoader())[ FD ]
Line_18 $$ final Class<?> cmdLineWrapper = Class.forName("com.intellij.rt.execution.CommandLineWrapper")-->Line_19 $$ cp.add(getResourceFile(cmdLineWrapper))[ FD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_14 $$ if (optimizedFileManagerClass != null) [ CD ]
Line_29 $$ final JavaCompiler systemCompiler = ToolProvider.getSystemJavaCompiler()-->Line_31 $$ final String localJarPath = FileUtil.toSystemIndependentName(getResourceFile(systemCompiler.getClass()).getPath())[ FD ]
Line_37 $$ if (relPath != null) -->Line_38 $$ final File targetFile = new File(sdkHome, relPath)[ CD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_8 $$ cp.add(getResourceFile(JpsModel.class))[ FD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_47 $$ cp.addAll(compilingTool.getAdditionalClasspath())[ CD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_10 $$ cp.add(getResourceFile(Message.class))[ CD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_19 $$ cp.add(getResourceFile(cmdLineWrapper))[ FD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_8 $$ cp.add(getResourceFile(JpsModel.class))[ CD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_6 $$ cp.add(new File(path))[ FD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_39 $$ cp.add(targetFile)[ FD ]
Line_30 $$ if (systemCompiler != null) -->Line_31 $$ final String localJarPath = FileUtil.toSystemIndependentName(getResourceFile(systemCompiler.getClass()).getPath())[ CD ]
Line_32 $$ String relPath = FileUtil.getRelativePath(localJavaHome, localJarPath, '/')-->Line_37 $$ if (relPath != null) [ FD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_4 $$ cp.add(getResourceFile(ExternalJavacProcess.class))[ FD ]
Line_26 $$ if (candidate.exists()) -->Line_30 $$ if (systemCompiler != null) [ CD ]
Line_29 $$ final JavaCompiler systemCompiler = ToolProvider.getSystemJavaCompiler()-->Line_30 $$ if (systemCompiler != null) [ FD ]
Line_30 $$ if (systemCompiler != null) -->Line_32 $$ String relPath = FileUtil.getRelativePath(localJavaHome, localJarPath, '/')[ CD ]
Line_26 $$ if (candidate.exists()) -->Line_27 $$ cp.add(candidate)[ CD ]
Line_32 $$ String relPath = FileUtil.getRelativePath(localJavaHome, localJarPath, '/')-->Line_33 $$ if (relPath != null) [ FD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_12 $$ cp.add(getJpsPluginSystemClassesPath())[ CD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_48 $$ final Class<JavaSourceTransformer> transformerClass = JavaSourceTransformer.class[ CD ]
Line_32 $$ String relPath = FileUtil.getRelativePath(localJavaHome, localJarPath, '/')-->Line_34 $$ if (relPath.contains("..")) [ FD ]
Line_3 $$ final Set<File> cp = new LinkedHashSet<File>()-->Line_51 $$ cp.add(getResourceFile(t.getClass()))[ FD ]
Line_2 $$ public static List<File> getExternalJavacProcessClasspath(String sdkHome, JavaCompilingTool compilingTool) -->Line_53 $$ return new ArrayList<File>(cp)[ CD ]
