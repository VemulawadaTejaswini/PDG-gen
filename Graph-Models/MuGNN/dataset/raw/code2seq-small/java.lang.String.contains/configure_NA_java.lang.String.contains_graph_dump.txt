Line_37 $$ if (defaultMavenProfile == null) -->Line_44 $$ compilerConfiguration.addModuleProcessorProfile(defaultMavenProfile)[ CD ]
Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) -->Line_68 $$ moduleProfile.clearProcessors()[ CD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_77 $$ defaultMavenProfile.removeModuleName(module.getName())[ FD ]
Line_9 $$ if (versionString.contains("1.5") || versionString.contains("1.4") || versionString.contains("1.3") || versionString.contains("1.2")) -->Line_10 $$ return[ CD ]
Line_7 $$ String versionString = sdk.getVersionString()-->Line_9 $$ if (versionString.contains("1.5") || versionString.contains("1.4") || versionString.contains("1.3") || versionString.contains("1.2")) [ FD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_50 $$ if (defaultMavenProfile.getModuleNames().isEmpty()) [ FD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_57 $$ moduleProfile.setEnabled(true)[ FD ]
Line_22 $$ if (shouldEnableAnnotationProcessors(mavenProject)) -->Line_24 $$ if (annotationProcessorDirectory == null) [ CD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_3 $$ if (module == null)[ FD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_76 $$ if (defaultMavenProfile != null) [ FD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_83 $$ compilerConfiguration.removeModuleProcessorProfile(moduleProfile)[ FD ]
Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) -->Line_69 $$ if (processors != null) [ CD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_43 $$ defaultMavenProfile.setGeneratedSourcesDirectoryName(DEFAULT_TEST_ANNOTATION_OUTPUT, true)[ FD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_77 $$ defaultMavenProfile.removeModuleName(module.getName())[ FD ]
Line_14 $$ CompilerConfigurationImpl compilerConfiguration = (CompilerConfigurationImpl) CompilerConfiguration.getInstance(project)-->Line_35 $$ compilerConfiguration.removeModuleProcessorProfile(moduleProfile)[ FD ]
Line_31 $$ Map<String, String> options = mavenProject.getAnnotationProcessorOptions()-->Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) [ FD ]
Line_17 $$ if (currentProfile != compilerConfiguration.getDefaultProcessorProfile() && !MAVEN_DEFAULT_ANNOTATION_PROFILE.equals(currentProfile.getName()) && !moduleProfileName.equals(currentProfile.getName())) -->Line_18 $$ return[ CD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_37 $$ if (defaultMavenProfile == null) [ FD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_39 $$ defaultMavenProfile.setEnabled(true)[ FD ]
Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) -->Line_37 $$ if (defaultMavenProfile == null) [ CD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_68 $$ moduleProfile.clearProcessors()[ FD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_58 $$ moduleProfile.setObtainProcessorsFromClasspath(true)[ FD ]
Line_14 $$ CompilerConfigurationImpl compilerConfiguration = (CompilerConfigurationImpl) CompilerConfiguration.getInstance(project)-->Line_17 $$ if (currentProfile != compilerConfiguration.getDefaultProcessorProfile() && !MAVEN_DEFAULT_ANNOTATION_PROFILE.equals(currentProfile.getName()) && !moduleProfileName.equals(currentProfile.getName())) [ FD ]
Line_23 $$ String annotationProcessorDirectory = getRelativeAnnotationProcessorDirectory(mavenProject, false)-->Line_25 $$ annotationProcessorDirectory = DEFAULT_ANNOTATION_PATH_OUTPUT[ FD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_39 $$ defaultMavenProfile.setEnabled(true)[ FD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_60 $$ compilerConfiguration.addModuleProcessorProfile(moduleProfile)[ FD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_44 $$ compilerConfiguration.addModuleProcessorProfile(defaultMavenProfile)[ FD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_51 $$ compilerConfiguration.removeModuleProcessorProfile(defaultMavenProfile)[ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_3 $$ if (module == null)[ CD ]
Line_15 $$ ProcessorConfigProfile currentProfile = compilerConfiguration.getAnnotationProcessingConfiguration(module)-->Line_17 $$ if (currentProfile != compilerConfiguration.getDefaultProcessorProfile() && !MAVEN_DEFAULT_ANNOTATION_PROFILE.equals(currentProfile.getName()) && !moduleProfileName.equals(currentProfile.getName())) [ FD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_66 $$ moduleProfile.setOption(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_5 $$ Sdk sdk = ModuleRootManager.getInstance(module).getSdk()[ CD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_40 $$ defaultMavenProfile.setOutputRelativeToContentRoot(true)[ FD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_59 $$ moduleProfile.addModuleName(module.getName())[ FD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_50 $$ if (defaultMavenProfile.getModuleNames().isEmpty()) [ FD ]
Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) -->Line_34 $$ if (moduleProfile != null) [ CD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_46 $$ defaultMavenProfile.addModuleName(module.getName())[ FD ]
Line_23 $$ String annotationProcessorDirectory = getRelativeAnnotationProcessorDirectory(mavenProject, false)-->Line_62 $$ moduleProfile.setGeneratedSourcesDirectoryName(annotationProcessorDirectory, false)[ FD ]
Line_22 $$ if (shouldEnableAnnotationProcessors(mavenProject)) -->Line_82 $$ if (moduleProfile != null) [ CD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_56 $$ moduleProfile.setOutputRelativeToContentRoot(true)[ FD ]
Line_8 $$ if (versionString != null) -->Line_9 $$ if (versionString.contains("1.5") || versionString.contains("1.4") || versionString.contains("1.3") || versionString.contains("1.2")) [ CD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_49 $$ defaultMavenProfile.removeModuleName(module.getName())[ FD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_78 $$ if (defaultMavenProfile.getModuleNames().isEmpty()) [ FD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_82 $$ if (moduleProfile != null) [ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_15 $$ ProcessorConfigProfile currentProfile = compilerConfiguration.getAnnotationProcessingConfiguration(module)[ FD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)[ FD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_64 $$ moduleProfile.clearProcessorOptions()[ FD ]
Line_70 $$ for (String processor : processors) -->Line_71 $$ moduleProfile.addProcessor(processor)[ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_31 $$ Map<String, String> options = mavenProject.getAnnotationProcessorOptions()[ FD ]
Line_54 $$ if (moduleProfile == null) -->Line_58 $$ moduleProfile.setObtainProcessorsFromClasspath(true)[ CD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_82 $$ if (moduleProfile != null) [ FD ]
Line_5 $$ Sdk sdk = ModuleRootManager.getInstance(module).getSdk()-->Line_6 $$ if (sdk != null) [ FD ]
Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) -->Line_62 $$ moduleProfile.setGeneratedSourcesDirectoryName(annotationProcessorDirectory, false)[ CD ]
Line_29 $$ testAnnotationProcessorDirectory = DEFAULT_TEST_ANNOTATION_OUTPUT-->Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) [ FD ]
Line_31 $$ Map<String, String> options = mavenProject.getAnnotationProcessorOptions()-->Line_65 $$ for (Map.Entry<String, String> entry : options.entrySet()) [ FD ]
Line_27 $$ String testAnnotationProcessorDirectory = getRelativeAnnotationProcessorDirectory(mavenProject, true)-->Line_63 $$ moduleProfile.setGeneratedSourcesDirectoryName(testAnnotationProcessorDirectory, true)[ FD ]
Line_76 $$ if (defaultMavenProfile != null) -->Line_78 $$ if (defaultMavenProfile.getModuleNames().isEmpty()) [ CD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_43 $$ defaultMavenProfile.setGeneratedSourcesDirectoryName(DEFAULT_TEST_ANNOTATION_OUTPUT, true)[ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)[ CD ]
Line_22 $$ if (shouldEnableAnnotationProcessors(mavenProject)) -->Line_28 $$ if (testAnnotationProcessorDirectory == null) [ CD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_41 $$ defaultMavenProfile.setObtainProcessorsFromClasspath(true)[ FD ]
Line_37 $$ if (defaultMavenProfile == null) -->Line_39 $$ defaultMavenProfile.setEnabled(true)[ CD ]
Line_25 $$ annotationProcessorDirectory = DEFAULT_ANNOTATION_PATH_OUTPUT-->Line_62 $$ moduleProfile.setGeneratedSourcesDirectoryName(annotationProcessorDirectory, false)[ FD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_63 $$ moduleProfile.setGeneratedSourcesDirectoryName(testAnnotationProcessorDirectory, true)[ FD ]
Line_6 $$ if (sdk != null) -->Line_7 $$ String versionString = sdk.getVersionString()[ CD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_34 $$ if (moduleProfile != null) [ FD ]
Line_82 $$ if (moduleProfile != null) -->Line_83 $$ compilerConfiguration.removeModuleProcessorProfile(moduleProfile)[ CD ]
Line_50 $$ if (defaultMavenProfile.getModuleNames().isEmpty()) -->Line_51 $$ compilerConfiguration.removeModuleProcessorProfile(defaultMavenProfile)[ CD ]
Line_14 $$ CompilerConfigurationImpl compilerConfiguration = (CompilerConfigurationImpl) CompilerConfiguration.getInstance(project)-->Line_60 $$ compilerConfiguration.addModuleProcessorProfile(moduleProfile)[ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_32 $$ List<String> processors = mavenProject.getDeclaredAnnotationProcessors()[ FD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_60 $$ compilerConfiguration.addModuleProcessorProfile(moduleProfile)[ FD ]
Line_37 $$ if (defaultMavenProfile == null) -->Line_42 $$ defaultMavenProfile.setGeneratedSourcesDirectoryName(DEFAULT_ANNOTATION_PATH_OUTPUT, false)[ CD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_62 $$ moduleProfile.setGeneratedSourcesDirectoryName(annotationProcessorDirectory, false)[ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_16 $$ String moduleProfileName = PROFILE_PREFIX + module.getName()[ FD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_41 $$ defaultMavenProfile.setObtainProcessorsFromClasspath(true)[ FD ]
Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) -->Line_54 $$ if (moduleProfile == null) [ CD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_27 $$ String testAnnotationProcessorDirectory = getRelativeAnnotationProcessorDirectory(mavenProject, true)[ FD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_40 $$ defaultMavenProfile.setOutputRelativeToContentRoot(true)[ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_16 $$ String moduleProfileName = PROFILE_PREFIX + module.getName()[ CD ]
Line_27 $$ String testAnnotationProcessorDirectory = getRelativeAnnotationProcessorDirectory(mavenProject, true)-->Line_28 $$ if (testAnnotationProcessorDirectory == null) [ FD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_76 $$ if (defaultMavenProfile != null) [ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_14 $$ CompilerConfigurationImpl compilerConfiguration = (CompilerConfigurationImpl) CompilerConfiguration.getInstance(project)[ CD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_15 $$ ProcessorConfigProfile currentProfile = compilerConfiguration.getAnnotationProcessingConfiguration(module)[ CD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_58 $$ moduleProfile.setObtainProcessorsFromClasspath(true)[ FD ]
Line_25 $$ annotationProcessorDirectory = DEFAULT_ANNOTATION_PATH_OUTPUT-->Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) [ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_22 $$ if (shouldEnableAnnotationProcessors(mavenProject)) [ FD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_66 $$ moduleProfile.setOption(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_14 $$ CompilerConfigurationImpl compilerConfiguration = (CompilerConfigurationImpl) CompilerConfiguration.getInstance(project)[ FD ]
Line_54 $$ if (moduleProfile == null) -->Line_56 $$ moduleProfile.setOutputRelativeToContentRoot(true)[ CD ]
Line_22 $$ if (shouldEnableAnnotationProcessors(mavenProject)) -->Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) [ CD ]
Line_22 $$ if (shouldEnableAnnotationProcessors(mavenProject)) -->Line_76 $$ if (defaultMavenProfile != null) [ CD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_56 $$ moduleProfile.setOutputRelativeToContentRoot(true)[ FD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_71 $$ moduleProfile.addProcessor(processor)[ FD ]
Line_27 $$ String testAnnotationProcessorDirectory = getRelativeAnnotationProcessorDirectory(mavenProject, true)-->Line_29 $$ testAnnotationProcessorDirectory = DEFAULT_TEST_ANNOTATION_OUTPUT[ FD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_59 $$ moduleProfile.addModuleName(module.getName())[ FD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_42 $$ defaultMavenProfile.setGeneratedSourcesDirectoryName(DEFAULT_ANNOTATION_PATH_OUTPUT, false)[ FD ]
Line_14 $$ CompilerConfigurationImpl compilerConfiguration = (CompilerConfigurationImpl) CompilerConfiguration.getInstance(project)-->Line_44 $$ compilerConfiguration.addModuleProcessorProfile(defaultMavenProfile)[ FD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_71 $$ moduleProfile.addProcessor(processor)[ FD ]
Line_54 $$ if (moduleProfile == null) -->Line_60 $$ compilerConfiguration.addModuleProcessorProfile(moduleProfile)[ CD ]
Line_37 $$ if (defaultMavenProfile == null) -->Line_40 $$ defaultMavenProfile.setOutputRelativeToContentRoot(true)[ CD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_64 $$ moduleProfile.clearProcessorOptions()[ FD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)[ FD ]
Line_23 $$ String annotationProcessorDirectory = getRelativeAnnotationProcessorDirectory(mavenProject, false)-->Line_24 $$ if (annotationProcessorDirectory == null) [ FD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_78 $$ if (defaultMavenProfile.getModuleNames().isEmpty()) [ FD ]
Line_22 $$ if (shouldEnableAnnotationProcessors(mavenProject)) -->Line_23 $$ String annotationProcessorDirectory = getRelativeAnnotationProcessorDirectory(mavenProject, false)[ CD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_22 $$ if (shouldEnableAnnotationProcessors(mavenProject)) [ CD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_48 $$ if (defaultMavenProfile != null) [ FD ]
Line_5 $$ Sdk sdk = ModuleRootManager.getInstance(module).getSdk()-->Line_7 $$ String versionString = sdk.getVersionString()[ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)[ CD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_5 $$ Sdk sdk = ModuleRootManager.getInstance(module).getSdk()[ FD ]
Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) -->Line_46 $$ defaultMavenProfile.addModuleName(module.getName())[ CD ]
Line_24 $$ if (annotationProcessorDirectory == null) -->Line_25 $$ annotationProcessorDirectory = DEFAULT_ANNOTATION_PATH_OUTPUT[ CD ]
Line_14 $$ CompilerConfigurationImpl compilerConfiguration = (CompilerConfigurationImpl) CompilerConfiguration.getInstance(project)-->Line_79 $$ compilerConfiguration.removeModuleProcessorProfile(defaultMavenProfile)[ FD ]
Line_14 $$ CompilerConfigurationImpl compilerConfiguration = (CompilerConfigurationImpl) CompilerConfiguration.getInstance(project)-->Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)[ FD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_23 $$ String annotationProcessorDirectory = getRelativeAnnotationProcessorDirectory(mavenProject, false)[ FD ]
Line_37 $$ if (defaultMavenProfile == null) -->Line_41 $$ defaultMavenProfile.setObtainProcessorsFromClasspath(true)[ CD ]
Line_14 $$ CompilerConfigurationImpl compilerConfiguration = (CompilerConfigurationImpl) CompilerConfiguration.getInstance(project)-->Line_15 $$ ProcessorConfigProfile currentProfile = compilerConfiguration.getAnnotationProcessingConfiguration(module)[ FD ]
Line_29 $$ testAnnotationProcessorDirectory = DEFAULT_TEST_ANNOTATION_OUTPUT-->Line_63 $$ moduleProfile.setGeneratedSourcesDirectoryName(testAnnotationProcessorDirectory, true)[ FD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_44 $$ compilerConfiguration.addModuleProcessorProfile(defaultMavenProfile)[ FD ]
Line_22 $$ if (shouldEnableAnnotationProcessors(mavenProject)) -->Line_31 $$ Map<String, String> options = mavenProject.getAnnotationProcessorOptions()[ CD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_51 $$ compilerConfiguration.removeModuleProcessorProfile(defaultMavenProfile)[ FD ]
Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) -->Line_63 $$ moduleProfile.setGeneratedSourcesDirectoryName(testAnnotationProcessorDirectory, true)[ CD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_6 $$ if (sdk != null) [ CD ]
Line_23 $$ String annotationProcessorDirectory = getRelativeAnnotationProcessorDirectory(mavenProject, false)-->Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) [ FD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_42 $$ defaultMavenProfile.setGeneratedSourcesDirectoryName(DEFAULT_ANNOTATION_PATH_OUTPUT, false)[ FD ]
Line_78 $$ if (defaultMavenProfile.getModuleNames().isEmpty()) -->Line_79 $$ compilerConfiguration.removeModuleProcessorProfile(defaultMavenProfile)[ CD ]
Line_14 $$ CompilerConfigurationImpl compilerConfiguration = (CompilerConfigurationImpl) CompilerConfiguration.getInstance(project)-->Line_83 $$ compilerConfiguration.removeModuleProcessorProfile(moduleProfile)[ FD ]
Line_48 $$ if (defaultMavenProfile != null) -->Line_50 $$ if (defaultMavenProfile.getModuleNames().isEmpty()) [ CD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_62 $$ moduleProfile.setGeneratedSourcesDirectoryName(annotationProcessorDirectory, false)[ FD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_79 $$ compilerConfiguration.removeModuleProcessorProfile(defaultMavenProfile)[ FD ]
Line_7 $$ String versionString = sdk.getVersionString()-->Line_8 $$ if (versionString != null) [ FD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_49 $$ defaultMavenProfile.removeModuleName(module.getName())[ FD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_35 $$ compilerConfiguration.removeModuleProcessorProfile(moduleProfile)[ FD ]
Line_22 $$ if (shouldEnableAnnotationProcessors(mavenProject)) -->Line_32 $$ List<String> processors = mavenProject.getDeclaredAnnotationProcessors()[ CD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_54 $$ if (moduleProfile == null) [ FD ]
Line_34 $$ if (moduleProfile != null) -->Line_35 $$ compilerConfiguration.removeModuleProcessorProfile(moduleProfile)[ CD ]
Line_14 $$ CompilerConfigurationImpl compilerConfiguration = (CompilerConfigurationImpl) CompilerConfiguration.getInstance(project)-->Line_51 $$ compilerConfiguration.removeModuleProcessorProfile(defaultMavenProfile)[ FD ]
Line_54 $$ if (moduleProfile == null) -->Line_59 $$ moduleProfile.addModuleName(module.getName())[ CD ]
Line_37 $$ if (defaultMavenProfile == null) -->Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)[ CD ]
Line_76 $$ if (defaultMavenProfile != null) -->Line_77 $$ defaultMavenProfile.removeModuleName(module.getName())[ CD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_59 $$ moduleProfile.addModuleName(module.getName())[ FD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_63 $$ moduleProfile.setGeneratedSourcesDirectoryName(testAnnotationProcessorDirectory, true)[ FD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_49 $$ defaultMavenProfile.removeModuleName(module.getName())[ FD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_79 $$ compilerConfiguration.removeModuleProcessorProfile(defaultMavenProfile)[ FD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_83 $$ compilerConfiguration.removeModuleProcessorProfile(moduleProfile)[ FD ]
Line_27 $$ String testAnnotationProcessorDirectory = getRelativeAnnotationProcessorDirectory(mavenProject, true)-->Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) [ FD ]
Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) -->Line_64 $$ moduleProfile.clearProcessorOptions()[ CD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_77 $$ defaultMavenProfile.removeModuleName(module.getName())[ FD ]
Line_54 $$ if (moduleProfile == null) -->Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)[ CD ]
Line_2 $$ public void configure(@NotNull MavenProject mavenProject, @NotNull Project project, @Nullable Module module) -->Line_17 $$ if (currentProfile != compilerConfiguration.getDefaultProcessorProfile() && !MAVEN_DEFAULT_ANNOTATION_PROFILE.equals(currentProfile.getName()) && !moduleProfileName.equals(currentProfile.getName())) [ CD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_48 $$ if (defaultMavenProfile != null) [ FD ]
Line_14 $$ CompilerConfigurationImpl compilerConfiguration = (CompilerConfigurationImpl) CompilerConfiguration.getInstance(project)-->Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)[ FD ]
Line_22 $$ if (shouldEnableAnnotationProcessors(mavenProject)) -->Line_27 $$ String testAnnotationProcessorDirectory = getRelativeAnnotationProcessorDirectory(mavenProject, true)[ CD ]
Line_21 $$ ProcessorConfigProfile defaultMavenProfile = compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_46 $$ defaultMavenProfile.addModuleName(module.getName())[ FD ]
Line_28 $$ if (testAnnotationProcessorDirectory == null) -->Line_29 $$ testAnnotationProcessorDirectory = DEFAULT_TEST_ANNOTATION_OUTPUT[ CD ]
Line_32 $$ List<String> processors = mavenProject.getDeclaredAnnotationProcessors()-->Line_69 $$ if (processors != null) [ FD ]
Line_16 $$ String moduleProfileName = PROFILE_PREFIX + module.getName()-->Line_17 $$ if (currentProfile != compilerConfiguration.getDefaultProcessorProfile() && !MAVEN_DEFAULT_ANNOTATION_PROFILE.equals(currentProfile.getName()) && !moduleProfileName.equals(currentProfile.getName())) [ FD ]
Line_48 $$ if (defaultMavenProfile != null) -->Line_49 $$ defaultMavenProfile.removeModuleName(module.getName())[ CD ]
Line_55 $$ moduleProfile = new ProcessorConfigProfileImpl(moduleProfileName)-->Line_57 $$ moduleProfile.setEnabled(true)[ FD ]
Line_3 $$ if (module == null)-->Line_4 $$ return[ CD ]
Line_6 $$ if (sdk != null) -->Line_8 $$ if (versionString != null) [ CD ]
Line_38 $$ defaultMavenProfile = new ProcessorConfigProfileImpl(MAVEN_DEFAULT_ANNOTATION_PROFILE)-->Line_46 $$ defaultMavenProfile.addModuleName(module.getName())[ FD ]
Line_65 $$ for (Map.Entry<String, String> entry : options.entrySet()) -->Line_66 $$ moduleProfile.setOption(entry.getKey(), entry.getValue())[ FD ]
Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)-->Line_68 $$ moduleProfile.clearProcessors()[ FD ]
Line_16 $$ String moduleProfileName = PROFILE_PREFIX + module.getName()-->Line_20 $$ ProcessorConfigProfile moduleProfile = compilerConfiguration.findModuleProcessorProfile(moduleProfileName)[ FD ]
Line_54 $$ if (moduleProfile == null) -->Line_57 $$ moduleProfile.setEnabled(true)[ CD ]
Line_33 $$ if (processors == null && options.isEmpty() && DEFAULT_ANNOTATION_PATH_OUTPUT.equals(annotationProcessorDirectory.replace('\\', '/')) && DEFAULT_TEST_ANNOTATION_OUTPUT.equals(testAnnotationProcessorDirectory.replace('\\', '/'))) -->Line_48 $$ if (defaultMavenProfile != null) [ CD ]
Line_37 $$ if (defaultMavenProfile == null) -->Line_43 $$ defaultMavenProfile.setGeneratedSourcesDirectoryName(DEFAULT_TEST_ANNOTATION_OUTPUT, true)[ CD ]
