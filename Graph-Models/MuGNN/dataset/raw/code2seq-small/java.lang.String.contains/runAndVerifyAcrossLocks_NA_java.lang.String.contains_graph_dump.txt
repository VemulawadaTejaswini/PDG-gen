Line_5 $$ if (output.getExitCode() == 0) -->Line_9 $$ return[ CD ]
Line_3 $$ for (int i = 0; i < 5; i++) -->Line_11 $$ if (!StringUtil.isEmptyOrSpaces(output.getStderr())) [ CD ]
Line_4 $$ final ProcessOutput output = runner.runClient("svn", null, workingDir, input)-->Line_12 $$ final String stderr = output.getStderr()[ FD ]
Line_3 $$ for (int i = 0; i < 5; i++) -->Line_5 $$ if (output.getExitCode() == 0) [ CD ]
Line_2 $$ public static void runAndVerifyAcrossLocks(File workingDir, final TestClientRunner runner, final String[] input, final Processor<ProcessOutput> verifier, final Processor<ProcessOutput> primitiveVerifier) throws IOException -->Line_22 $$ final ProcessOutput output = runner.runClient("svn", null, workingDir, input)[ CD ]
Line_2 $$ public static void runAndVerifyAcrossLocks(File workingDir, final TestClientRunner runner, final String[] input, final Processor<ProcessOutput> verifier, final Processor<ProcessOutput> primitiveVerifier) throws IOException -->Line_17 $$ if (verifier.process(output)) [ FD ]
Line_12 $$ final String stderr = output.getStderr()-->Line_13 $$ if (stderr.contains("E155004") && stderr.contains("is already locked")) [ FD ]
Line_11 $$ if (!StringUtil.isEmptyOrSpaces(output.getStderr())) -->Line_12 $$ final String stderr = output.getStderr()[ CD ]
Line_4 $$ final ProcessOutput output = runner.runClient("svn", null, workingDir, input)-->Line_5 $$ if (output.getExitCode() == 0) [ FD ]
Line_4 $$ final ProcessOutput output = runner.runClient("svn", null, workingDir, input)-->Line_23 $$ primitiveVerifier.process(output)[ FD ]
Line_3 $$ for (int i = 0; i < 5; i++) -->Line_20 $$ return[ CD ]
Line_3 $$ for (int i = 0; i < 5; i++) -->Line_4 $$ final ProcessOutput output = runner.runClient("svn", null, workingDir, input)[ CD ]
Line_2 $$ public static void runAndVerifyAcrossLocks(File workingDir, final TestClientRunner runner, final String[] input, final Processor<ProcessOutput> verifier, final Processor<ProcessOutput> primitiveVerifier) throws IOException -->Line_4 $$ final ProcessOutput output = runner.runClient("svn", null, workingDir, input)[ FD ]
Line_2 $$ public static void runAndVerifyAcrossLocks(File workingDir, final TestClientRunner runner, final String[] input, final Processor<ProcessOutput> verifier, final Processor<ProcessOutput> primitiveVerifier) throws IOException -->Line_22 $$ final ProcessOutput output = runner.runClient("svn", null, workingDir, input)[ FD ]
Line_11 $$ if (!StringUtil.isEmptyOrSpaces(output.getStderr())) -->Line_13 $$ if (stderr.contains("E155004") && stderr.contains("is already locked")) [ CD ]
Line_2 $$ public static void runAndVerifyAcrossLocks(File workingDir, final TestClientRunner runner, final String[] input, final Processor<ProcessOutput> verifier, final Processor<ProcessOutput> primitiveVerifier) throws IOException -->Line_3 $$ for (int i = 0; i < 5; i++) [ CD ]
Line_4 $$ final ProcessOutput output = runner.runClient("svn", null, workingDir, input)-->Line_6 $$ if (verifier.process(output)) [ FD ]
Line_5 $$ if (output.getExitCode() == 0) -->Line_6 $$ if (verifier.process(output)) [ CD ]
Line_3 $$ for (int i = 0; i < 5; i++) -->Line_17 $$ if (verifier.process(output)) [ CD ]
Line_2 $$ public static void runAndVerifyAcrossLocks(File workingDir, final TestClientRunner runner, final String[] input, final Processor<ProcessOutput> verifier, final Processor<ProcessOutput> primitiveVerifier) throws IOException -->Line_23 $$ primitiveVerifier.process(output)[ CD ]
Line_2 $$ public static void runAndVerifyAcrossLocks(File workingDir, final TestClientRunner runner, final String[] input, final Processor<ProcessOutput> verifier, final Processor<ProcessOutput> primitiveVerifier) throws IOException -->Line_6 $$ if (verifier.process(output)) [ FD ]
Line_2 $$ public static void runAndVerifyAcrossLocks(File workingDir, final TestClientRunner runner, final String[] input, final Processor<ProcessOutput> verifier, final Processor<ProcessOutput> primitiveVerifier) throws IOException -->Line_23 $$ primitiveVerifier.process(output)[ FD ]
Line_4 $$ final ProcessOutput output = runner.runClient("svn", null, workingDir, input)-->Line_17 $$ if (verifier.process(output)) [ FD ]
Line_4 $$ final ProcessOutput output = runner.runClient("svn", null, workingDir, input)-->Line_11 $$ if (!StringUtil.isEmptyOrSpaces(output.getStderr())) [ FD ]
Line_22 $$ final ProcessOutput output = runner.runClient("svn", null, workingDir, input)-->Line_23 $$ primitiveVerifier.process(output)[ FD ]
