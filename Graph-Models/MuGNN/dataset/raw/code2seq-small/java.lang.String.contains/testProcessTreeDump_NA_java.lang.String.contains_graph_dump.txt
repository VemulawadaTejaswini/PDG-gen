Line_23 $$ String[] cmdLines = new String[numProcesses]-->Line_32 $$ writeCmdLineFiles(procfsRootDir, pids, cmdLines)[ FD ]
Line_4 $$ File procfsRootDir = new File(TEST_ROOT_DIR, "proc")-->Line_7 $$ setupPidDirs(procfsRootDir, pids)[ FD ]
Line_38 $$ for (int i = 0; i < 5; i++) -->Line_40 $$ Assert.assertTrue("Process-tree dump doesn't contain the cmdLineDump of process " + p.pid, processTreeDump.contains("\t|- " + p.pid + " " + p.ppid + " " + p.pgrpId + " " + p.session + " (" + p.name + ") " + p.utime + " " + p.stime + " " + p.vmem + " " + p.rssmemPage + " " + cmdLines[i]))[ CD ]
Line_16 $$ ProcessTreeSmapMemInfo[] memInfos = new ProcessTreeSmapMemInfo[6]-->Line_31 $$ writeStatFiles(procfsRootDir, pids, procInfos, memInfos)[ FD ]
Line_4 $$ File procfsRootDir = new File(TEST_ROOT_DIR, "proc")-->Line_31 $$ writeStatFiles(procfsRootDir, pids, procInfos, memInfos)[ FD ]
Line_3 $$ String[] pids = -->Line_7 $$ setupPidDirs(procfsRootDir, pids)[ FD ]
Line_35 $$ String processTreeDump = processTree.getProcessTreeDump()-->Line_40 $$ Assert.assertTrue("Process-tree dump doesn't contain the cmdLineDump of process " + p.pid, processTreeDump.contains("\t|- " + p.pid + " " + p.ppid + " " + p.pgrpId + " " + p.session + " (" + p.name + ") " + p.utime + " " + p.stime + " " + p.vmem + " " + p.rssmemPage + " " + cmdLines[i]))[ FD ]
Line_4 $$ File procfsRootDir = new File(TEST_ROOT_DIR, "proc")-->Line_32 $$ writeCmdLineFiles(procfsRootDir, pids, cmdLines)[ FD ]
Line_9 $$ ProcessStatInfo[] procInfos = new ProcessStatInfo[numProcesses]-->Line_31 $$ writeStatFiles(procfsRootDir, pids, procInfos, memInfos)[ FD ]
Line_35 $$ String processTreeDump = processTree.getProcessTreeDump()-->Line_43 $$ Assert.assertFalse("Process-tree dump shouldn't contain the cmdLineDump of process " + p.pid, processTreeDump.contains("\t|- " + p.pid + " " + p.ppid + " " + p.pgrpId + " " + p.session + " (" + p.name + ") " + p.utime + " " + p.stime + " " + p.vmem + " " + cmdLines[5]))[ FD ]
Line_3 $$ String[] pids = -->Line_31 $$ writeStatFiles(procfsRootDir, pids, procInfos, memInfos)[ FD ]
Line_2 $$ public void testProcessTreeDump() throws IOException -->Line_3 $$ String[] pids = [ CD ]
Line_4 $$ File procfsRootDir = new File(TEST_ROOT_DIR, "proc")-->Line_6 $$ setupProcfsRootDir(procfsRootDir)[ FD ]
Line_4 $$ File procfsRootDir = new File(TEST_ROOT_DIR, "proc")-->Line_33 $$ ProcfsBasedProcessTree processTree = createProcessTree("100", procfsRootDir.getAbsolutePath())[ FD ]
Line_33 $$ ProcfsBasedProcessTree processTree = createProcessTree("100", procfsRootDir.getAbsolutePath())-->Line_35 $$ String processTreeDump = processTree.getProcessTreeDump()[ FD ]
Line_38 $$ for (int i = 0; i < 5; i++) -->Line_39 $$ ProcessStatInfo p = procInfos[i][ CD ]
Line_4 $$ File procfsRootDir = new File(TEST_ROOT_DIR, "proc")-->Line_45 $$ FileUtil.fullyDelete(procfsRootDir)[ FD ]
Line_35 $$ String processTreeDump = processTree.getProcessTreeDump()-->Line_37 $$ Assert.assertTrue("Process-tree dump doesn't start with a proper header", processTreeDump.startsWith("\t|- PID PPID PGRPID SESSID CMD_NAME " + "USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) " + "RSSMEM_USAGE(PAGES) FULL_CMD_LINE\n"))[ FD ]
Line_16 $$ ProcessTreeSmapMemInfo[] memInfos = new ProcessTreeSmapMemInfo[6]-->Line_30 $$ createMemoryMappingInfo(memInfos)[ FD ]
Line_3 $$ String[] pids = -->Line_32 $$ writeCmdLineFiles(procfsRootDir, pids, cmdLines)[ FD ]
Line_2 $$ public void testProcessTreeDump() throws IOException -->Line_4 $$ File procfsRootDir = new File(TEST_ROOT_DIR, "proc")[ CD ]
Line_33 $$ ProcfsBasedProcessTree processTree = createProcessTree("100", procfsRootDir.getAbsolutePath())-->Line_34 $$ processTree.updateProcessTree()[ FD ]
