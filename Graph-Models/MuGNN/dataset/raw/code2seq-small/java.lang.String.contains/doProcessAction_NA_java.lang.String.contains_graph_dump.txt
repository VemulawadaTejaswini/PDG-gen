Line_29 $$ if (cmd.equals(Constants.MOVE_TO_TRASH)) -->Line_31 $$ if (cmd.equals(Constants.RESTORE)) [ CD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_97 $$ actionResponse.setRenderParameter("mvcRenderCommandName", "/blogs/edit_entry")[ FD ]
Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)-->Line_82 $$ if (Validator.isNotNull(redirect)) [ FD ]
Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)-->Line_49 $$ if (redirect.endsWith("/blogs/" + oldUrlTitle) || redirect.contains("/blogs/" + oldUrlTitle + "?") || redirect.contains("/blog/" + oldUrlTitle + "?")) [ FD ]
Line_60 $$ JSONObject blogsEntryFileEntryReferencesJSONObject = JSONFactoryUtil.createJSONObject()-->Line_62 $$ blogsEntryFileEntryReferencesJSONObject.put("fileEntryId", String.valueOf(blogsEntryAttachmentFileEntryReference.getTempBlogsEntryAttachmentFileEntryId()))[ FD ]
Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)-->Line_75 $$ sendRedirect(actionRequest, actionResponse, redirect)[ FD ]
Line_60 $$ JSONObject blogsEntryFileEntryReferencesJSONObject = JSONFactoryUtil.createJSONObject()-->Line_64 $$ jsonArray.put(blogsEntryFileEntryReferencesJSONObject)[ FD ]
Line_78 $$ if (!windowState.equals(LiferayWindowState.POP_UP)) -->Line_81 $$ redirect = PortalUtil.escapeRedirect(redirect)[ CD ]
Line_24 $$ entry = (BlogsEntry) returnValue[0]-->Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_77 $$ WindowState windowState = actionRequest.getWindowState()[ FD ]
Line_41 $$ if (Validator.isNotNull(oldUrlTitle)) -->Line_43 $$ String oldRedirect = HttpUtil.getParameter(redirect, oldRedirectParam, false)[ CD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)[ FD ]
Line_56 $$ if (ajax) -->Line_71 $$ return[ CD ]
Line_49 $$ if (redirect.endsWith("/blogs/" + oldUrlTitle) || redirect.contains("/blogs/" + oldUrlTitle + "?") || redirect.contains("/blog/" + oldUrlTitle + "?")) -->Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())[ CD ]
Line_73 $$ if ((entry != null) && (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT)) -->Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)[ CD ]
Line_83 $$ if (cmd.equals(Constants.ADD) && (entry != null)) -->Line_85 $$ redirect = HttpUtil.addParameter(redirect, namespace + "className", BlogsEntry.class.getName())[ CD ]
Line_42 $$ String oldRedirectParam = PortalUtil.getPortletNamespace(portletId) + "redirect"-->Line_43 $$ String oldRedirect = HttpUtil.getParameter(redirect, oldRedirectParam, false)[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_88 $$ actionRequest.setAttribute(WebKeys.REDIRECT, redirect)[ FD ]
Line_57 $$ JSONObject jsonObject = JSONFactoryUtil.createJSONObject()-->Line_68 $$ jsonObject.put("redirect", redirect)[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)[ FD ]
Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)-->Line_79 $$ sendRedirect(actionRequest, actionResponse, redirect)[ FD ]
Line_21 $$ if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) -->Line_26 $$ blogsEntryAttachmentFileEntryReferences = ((List<BlogsEntryAttachmentFileEntryReference>) returnValue[2])[ CD ]
Line_41 $$ if (Validator.isNotNull(oldUrlTitle)) -->Line_42 $$ String oldRedirectParam = PortalUtil.getPortletNamespace(portletId) + "redirect"[ CD ]
Line_25 $$ oldUrlTitle = ((String) returnValue[1])-->Line_46 $$ newRedirect = StringUtil.replace(newRedirect, oldUrlTitle, entry.getUrlTitle())[ FD ]
Line_9 $$ if (uploadException != null) -->Line_11 $$ if (uploadException.isExceededFileSizeLimit()) [ CD ]
Line_45 $$ String newRedirect = HttpUtil.decodeURL(oldRedirect)-->Line_47 $$ newRedirect = StringUtil.replace(newRedirect, oldRedirectParam, "redirect")[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_28 $$ deleteEntries(actionRequest, false)[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_103 $$ actionResponse.setRenderParameter("mvcPath", "/blogs/error.jsp")[ FD ]
Line_27 $$ if (cmd.equals(Constants.DELETE)) -->Line_29 $$ if (cmd.equals(Constants.MOVE_TO_TRASH)) [ CD ]
Line_41 $$ if (Validator.isNotNull(oldUrlTitle)) -->Line_44 $$ if (Validator.isNotNull(oldRedirect)) [ CD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_82 $$ if (Validator.isNotNull(redirect)) [ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_93 $$ SessionErrors.add(actionRequest, e.getClass(), e)[ FD ]
Line_81 $$ redirect = PortalUtil.escapeRedirect(redirect)-->Line_85 $$ redirect = HttpUtil.addParameter(redirect, namespace + "className", BlogsEntry.class.getName())[ FD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_79 $$ sendRedirect(actionRequest, actionResponse, redirect)[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_30 $$ deleteEntries(actionRequest, true)[ FD ]
Line_73 $$ if ((entry != null) && (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT)) -->Line_77 $$ WindowState windowState = actionRequest.getWindowState()[ CD ]
Line_3 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)-->Line_33 $$ if (cmd.equals(Constants.SUBSCRIBE)) [ FD ]
Line_43 $$ String oldRedirect = HttpUtil.getParameter(redirect, oldRedirectParam, false)-->Line_45 $$ String newRedirect = HttpUtil.decodeURL(oldRedirect)[ FD ]
Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)-->Line_81 $$ redirect = PortalUtil.escapeRedirect(redirect)[ FD ]
Line_52 $$ updateRedirect = true-->Line_69 $$ jsonObject.put("updateRedirect", updateRedirect)[ FD ]
Line_24 $$ entry = (BlogsEntry) returnValue[0]-->Line_86 $$ redirect = HttpUtil.addParameter(redirect, namespace + "classPK", entry.getEntryId())[ FD ]
Line_73 $$ if ((entry != null) && (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT)) -->Line_78 $$ if (!windowState.equals(LiferayWindowState.POP_UP)) [ CD ]
Line_85 $$ redirect = HttpUtil.addParameter(redirect, namespace + "className", BlogsEntry.class.getName())-->Line_88 $$ actionRequest.setAttribute(WebKeys.REDIRECT, redirect)[ FD ]
Line_82 $$ if (Validator.isNotNull(redirect)) -->Line_83 $$ if (cmd.equals(Constants.ADD) && (entry != null)) [ CD ]
Line_85 $$ redirect = HttpUtil.addParameter(redirect, namespace + "className", BlogsEntry.class.getName())-->Line_86 $$ redirect = HttpUtil.addParameter(redirect, namespace + "classPK", entry.getEntryId())[ FD ]
Line_24 $$ entry = (BlogsEntry) returnValue[0]-->Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)[ FD ]
Line_31 $$ if (cmd.equals(Constants.RESTORE)) -->Line_32 $$ restoreTrashEntries(actionRequest)[ CD ]
Line_58 $$ JSONArray jsonArray = JSONFactoryUtil.createJSONArray()-->Line_64 $$ jsonArray.put(blogsEntryFileEntryReferencesJSONObject)[ FD ]
Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())-->Line_68 $$ jsonObject.put("redirect", redirect)[ FD ]
Line_8 $$ UploadException uploadException = (UploadException) actionRequest.getAttribute(WebKeys.UPLOAD_EXCEPTION)-->Line_10 $$ Throwable cause = uploadException.getCause()[ FD ]
Line_56 $$ if (ajax) -->Line_69 $$ jsonObject.put("updateRedirect", updateRedirect)[ CD ]
Line_9 $$ if (uploadException != null) -->Line_21 $$ if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) [ CD ]
Line_21 $$ if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) -->Line_25 $$ oldUrlTitle = ((String) returnValue[1])[ CD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_88 $$ actionRequest.setAttribute(WebKeys.REDIRECT, redirect)[ FD ]
Line_44 $$ if (Validator.isNotNull(oldRedirect)) -->Line_49 $$ if (redirect.endsWith("/blogs/" + oldUrlTitle) || redirect.contains("/blogs/" + oldUrlTitle + "?") || redirect.contains("/blog/" + oldUrlTitle + "?")) [ CD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_8 $$ UploadException uploadException = (UploadException) actionRequest.getAttribute(WebKeys.UPLOAD_EXCEPTION)[ FD ]
Line_44 $$ if (Validator.isNotNull(oldRedirect)) -->Line_45 $$ String newRedirect = HttpUtil.decodeURL(oldRedirect)[ CD ]
Line_73 $$ if ((entry != null) && (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT)) -->Line_75 $$ sendRedirect(actionRequest, actionResponse, redirect)[ CD ]
Line_59 $$ for (BlogsEntryAttachmentFileEntryReference blogsEntryAttachmentFileEntryReference : blogsEntryAttachmentFileEntryReferences) -->Line_63 $$ blogsEntryFileEntryReferencesJSONObject.put("fileEntryUrl", PortletFileRepositoryUtil.getPortletFileEntryURL(null, blogsEntryAttachmentFileEntryReference.getBlogsEntryAttachmentFileEntry(), StringPool.BLANK))[ FD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())[ FD ]
Line_5 $$ BlogsEntry entry = null-->Line_67 $$ jsonObject.put("entryId", entry.getEntryId())[ FD ]
Line_60 $$ JSONObject blogsEntryFileEntryReferencesJSONObject = JSONFactoryUtil.createJSONObject()-->Line_63 $$ blogsEntryFileEntryReferencesJSONObject.put("fileEntryUrl", PortletFileRepositoryUtil.getPortletFileEntryURL(null, blogsEntryAttachmentFileEntryReference.getBlogsEntryAttachmentFileEntry(), StringPool.BLANK))[ FD ]
Line_8 $$ UploadException uploadException = (UploadException) actionRequest.getAttribute(WebKeys.UPLOAD_EXCEPTION)-->Line_9 $$ if (uploadException != null) [ FD ]
Line_40 $$ String portletId = HttpUtil.getParameter(redirect, "p_p_id", false)-->Line_42 $$ String oldRedirectParam = PortalUtil.getPortletNamespace(portletId) + "redirect"[ FD ]
Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())-->Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)[ FD ]
Line_41 $$ if (Validator.isNotNull(oldUrlTitle)) -->Line_52 $$ updateRedirect = true[ CD ]
Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())-->Line_85 $$ redirect = HttpUtil.addParameter(redirect, namespace + "className", BlogsEntry.class.getName())[ FD ]
Line_21 $$ if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) -->Line_22 $$ Callable<Object[]> updateEntryCallable = new UpdateEntryCallable(actionRequest)[ CD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_34 $$ subscribe(actionRequest)[ FD ]
Line_46 $$ newRedirect = StringUtil.replace(newRedirect, oldUrlTitle, entry.getUrlTitle())-->Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_54 $$ int workflowAction = ParamUtil.getInteger(actionRequest, "workflowAction", WorkflowConstants.ACTION_SAVE_DRAFT)[ FD ]
Line_29 $$ if (cmd.equals(Constants.MOVE_TO_TRASH)) -->Line_30 $$ deleteEntries(actionRequest, true)[ CD ]
Line_44 $$ if (Validator.isNotNull(oldRedirect)) -->Line_47 $$ newRedirect = StringUtil.replace(newRedirect, oldRedirectParam, "redirect")[ CD ]
Line_21 $$ if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) -->Line_24 $$ entry = (BlogsEntry) returnValue[0][ CD ]
Line_44 $$ if (Validator.isNotNull(oldRedirect)) -->Line_46 $$ newRedirect = StringUtil.replace(newRedirect, oldUrlTitle, entry.getUrlTitle())[ CD ]
Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)-->Line_79 $$ sendRedirect(actionRequest, actionResponse, redirect)[ FD ]
Line_56 $$ if (ajax) -->Line_70 $$ JSONPortletResponseUtil.writeJSON(actionRequest, actionResponse, jsonObject)[ CD ]
Line_22 $$ Callable<Object[]> updateEntryCallable = new UpdateEntryCallable(actionRequest)-->Line_23 $$ Object[] returnValue = TransactionInvokerUtil.invoke(_transactionAttribute, updateEntryCallable)[ FD ]
Line_6 $$ String oldUrlTitle = StringPool.BLANK-->Line_25 $$ oldUrlTitle = ((String) returnValue[1])[ FD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)[ FD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_40 $$ String portletId = HttpUtil.getParameter(redirect, "p_p_id", false)[ FD ]
Line_81 $$ redirect = PortalUtil.escapeRedirect(redirect)-->Line_88 $$ actionRequest.setAttribute(WebKeys.REDIRECT, redirect)[ FD ]
Line_57 $$ JSONObject jsonObject = JSONFactoryUtil.createJSONObject()-->Line_67 $$ jsonObject.put("entryId", entry.getEntryId())[ FD ]
Line_24 $$ entry = (BlogsEntry) returnValue[0]-->Line_67 $$ jsonObject.put("entryId", entry.getEntryId())[ FD ]
Line_5 $$ BlogsEntry entry = null-->Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)[ FD ]
Line_83 $$ if (cmd.equals(Constants.ADD) && (entry != null)) -->Line_86 $$ redirect = HttpUtil.addParameter(redirect, namespace + "classPK", entry.getEntryId())[ CD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_81 $$ redirect = PortalUtil.escapeRedirect(redirect)[ FD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_49 $$ if (redirect.endsWith("/blogs/" + oldUrlTitle) || redirect.contains("/blogs/" + oldUrlTitle + "?") || redirect.contains("/blog/" + oldUrlTitle + "?")) [ FD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_86 $$ redirect = HttpUtil.addParameter(redirect, namespace + "classPK", entry.getEntryId())[ FD ]
Line_33 $$ if (cmd.equals(Constants.SUBSCRIBE)) -->Line_35 $$ if (cmd.equals(Constants.UNSUBSCRIBE)) [ CD ]
Line_3 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)-->Line_83 $$ if (cmd.equals(Constants.ADD) && (entry != null)) [ FD ]
Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)-->Line_86 $$ redirect = HttpUtil.addParameter(redirect, namespace + "classPK", entry.getEntryId())[ FD ]
Line_6 $$ String oldUrlTitle = StringPool.BLANK-->Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())[ FD ]
Line_57 $$ JSONObject jsonObject = JSONFactoryUtil.createJSONObject()-->Line_66 $$ jsonObject.put("blogsEntryAttachmentReferences", jsonArray)[ FD ]
Line_5 $$ BlogsEntry entry = null-->Line_86 $$ redirect = HttpUtil.addParameter(redirect, namespace + "classPK", entry.getEntryId())[ FD ]
Line_3 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)-->Line_35 $$ if (cmd.equals(Constants.UNSUBSCRIBE)) [ FD ]
Line_8 $$ UploadException uploadException = (UploadException) actionRequest.getAttribute(WebKeys.UPLOAD_EXCEPTION)-->Line_14 $$ if (uploadException.isExceededLiferayFileItemSizeLimit()) [ FD ]
Line_3 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)-->Line_27 $$ if (cmd.equals(Constants.DELETE)) [ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")[ FD ]
Line_47 $$ newRedirect = StringUtil.replace(newRedirect, oldRedirectParam, "redirect")-->Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)[ FD ]
Line_56 $$ if (ajax) -->Line_67 $$ jsonObject.put("entryId", entry.getEntryId())[ CD ]
Line_59 $$ for (BlogsEntryAttachmentFileEntryReference blogsEntryAttachmentFileEntryReference : blogsEntryAttachmentFileEntryReferences) -->Line_62 $$ blogsEntryFileEntryReferencesJSONObject.put("fileEntryId", String.valueOf(blogsEntryAttachmentFileEntryReference.getTempBlogsEntryAttachmentFileEntryId()))[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_75 $$ sendRedirect(actionRequest, actionResponse, redirect)[ FD ]
Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())-->Line_81 $$ redirect = PortalUtil.escapeRedirect(redirect)[ FD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_85 $$ redirect = HttpUtil.addParameter(redirect, namespace + "className", BlogsEntry.class.getName())[ FD ]
Line_82 $$ if (Validator.isNotNull(redirect)) -->Line_88 $$ actionRequest.setAttribute(WebKeys.REDIRECT, redirect)[ CD ]
Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())-->Line_79 $$ sendRedirect(actionRequest, actionResponse, redirect)[ FD ]
Line_6 $$ String oldUrlTitle = StringPool.BLANK-->Line_46 $$ newRedirect = StringUtil.replace(newRedirect, oldUrlTitle, entry.getUrlTitle())[ FD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_68 $$ jsonObject.put("redirect", redirect)[ FD ]
Line_21 $$ if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) -->Line_23 $$ Object[] returnValue = TransactionInvokerUtil.invoke(_transactionAttribute, updateEntryCallable)[ CD ]
Line_21 $$ if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) -->Line_27 $$ if (cmd.equals(Constants.DELETE)) [ CD ]
Line_45 $$ String newRedirect = HttpUtil.decodeURL(oldRedirect)-->Line_46 $$ newRedirect = StringUtil.replace(newRedirect, oldUrlTitle, entry.getUrlTitle())[ FD ]
Line_3 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)-->Line_29 $$ if (cmd.equals(Constants.MOVE_TO_TRASH)) [ FD ]
Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)-->Line_81 $$ redirect = PortalUtil.escapeRedirect(redirect)[ FD ]
Line_44 $$ if (Validator.isNotNull(oldRedirect)) -->Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)[ CD ]
Line_24 $$ entry = (BlogsEntry) returnValue[0]-->Line_46 $$ newRedirect = StringUtil.replace(newRedirect, oldUrlTitle, entry.getUrlTitle())[ FD ]
Line_7 $$ List<BlogsEntryAttachmentFileEntryReference> blogsEntryAttachmentFileEntryReferences = null-->Line_26 $$ blogsEntryAttachmentFileEntryReferences = ((List<BlogsEntryAttachmentFileEntryReference>) returnValue[2])[ FD ]
Line_56 $$ if (ajax) -->Line_57 $$ JSONObject jsonObject = JSONFactoryUtil.createJSONObject()[ CD ]
Line_57 $$ JSONObject jsonObject = JSONFactoryUtil.createJSONObject()-->Line_69 $$ jsonObject.put("updateRedirect", updateRedirect)[ FD ]
Line_39 $$ boolean updateRedirect = false-->Line_69 $$ jsonObject.put("updateRedirect", updateRedirect)[ FD ]
Line_9 $$ if (uploadException != null) -->Line_14 $$ if (uploadException.isExceededLiferayFileItemSizeLimit()) [ CD ]
Line_46 $$ newRedirect = StringUtil.replace(newRedirect, oldUrlTitle, entry.getUrlTitle())-->Line_47 $$ newRedirect = StringUtil.replace(newRedirect, oldRedirectParam, "redirect")[ FD ]
Line_5 $$ BlogsEntry entry = null-->Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())[ FD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_75 $$ sendRedirect(actionRequest, actionResponse, redirect)[ FD ]
Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())-->Line_88 $$ actionRequest.setAttribute(WebKeys.REDIRECT, redirect)[ FD ]
Line_78 $$ if (!windowState.equals(LiferayWindowState.POP_UP)) -->Line_79 $$ sendRedirect(actionRequest, actionResponse, redirect)[ CD ]
Line_3 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)-->Line_31 $$ if (cmd.equals(Constants.RESTORE)) [ FD ]
Line_9 $$ if (uploadException != null) -->Line_17 $$ if (uploadException.isExceededUploadRequestSizeLimit()) [ CD ]
Line_81 $$ redirect = PortalUtil.escapeRedirect(redirect)-->Line_86 $$ redirect = HttpUtil.addParameter(redirect, namespace + "classPK", entry.getEntryId())[ FD ]
Line_58 $$ JSONArray jsonArray = JSONFactoryUtil.createJSONArray()-->Line_66 $$ jsonObject.put("blogsEntryAttachmentReferences", jsonArray)[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)[ CD ]
Line_57 $$ JSONObject jsonObject = JSONFactoryUtil.createJSONObject()-->Line_70 $$ JSONPortletResponseUtil.writeJSON(actionRequest, actionResponse, jsonObject)[ FD ]
Line_39 $$ boolean updateRedirect = false-->Line_52 $$ updateRedirect = true[ FD ]
Line_8 $$ UploadException uploadException = (UploadException) actionRequest.getAttribute(WebKeys.UPLOAD_EXCEPTION)-->Line_17 $$ if (uploadException.isExceededUploadRequestSizeLimit()) [ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_36 $$ unsubscribe(actionRequest)[ FD ]
Line_77 $$ WindowState windowState = actionRequest.getWindowState()-->Line_78 $$ if (!windowState.equals(LiferayWindowState.POP_UP)) [ FD ]
Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)-->Line_75 $$ sendRedirect(actionRequest, actionResponse, redirect)[ FD ]
Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)-->Line_88 $$ actionRequest.setAttribute(WebKeys.REDIRECT, redirect)[ FD ]
Line_81 $$ redirect = PortalUtil.escapeRedirect(redirect)-->Line_82 $$ if (Validator.isNotNull(redirect)) [ FD ]
Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)-->Line_86 $$ redirect = HttpUtil.addParameter(redirect, namespace + "classPK", entry.getEntryId())[ FD ]
Line_5 $$ BlogsEntry entry = null-->Line_24 $$ entry = (BlogsEntry) returnValue[0][ FD ]
Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())-->Line_75 $$ sendRedirect(actionRequest, actionResponse, redirect)[ FD ]
Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())-->Line_82 $$ if (Validator.isNotNull(redirect)) [ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_100 $$ actionResponse.setRenderParameter("mvcPath", "/blogs/error.jsp")[ FD ]
Line_45 $$ String newRedirect = HttpUtil.decodeURL(oldRedirect)-->Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)[ FD ]
Line_27 $$ if (cmd.equals(Constants.DELETE)) -->Line_28 $$ deleteEntries(actionRequest, false)[ CD ]
Line_38 $$ String redirect = ParamUtil.getString(actionRequest, "redirect")-->Line_43 $$ String oldRedirect = HttpUtil.getParameter(redirect, oldRedirectParam, false)[ FD ]
Line_25 $$ oldUrlTitle = ((String) returnValue[1])-->Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())[ FD ]
Line_43 $$ String oldRedirect = HttpUtil.getParameter(redirect, oldRedirectParam, false)-->Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)[ FD ]
Line_78 $$ if (!windowState.equals(LiferayWindowState.POP_UP)) -->Line_82 $$ if (Validator.isNotNull(redirect)) [ CD ]
Line_25 $$ oldUrlTitle = ((String) returnValue[1])-->Line_41 $$ if (Validator.isNotNull(oldUrlTitle)) [ FD ]
Line_3 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)-->Line_21 $$ if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) [ FD ]
Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)-->Line_88 $$ actionRequest.setAttribute(WebKeys.REDIRECT, redirect)[ FD ]
Line_60 $$ JSONObject blogsEntryFileEntryReferencesJSONObject = JSONFactoryUtil.createJSONObject()-->Line_61 $$ blogsEntryFileEntryReferencesJSONObject.put("attributeDataImageId", EditorConstants.ATTRIBUTE_DATA_IMAGE_ID)[ FD ]
Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)-->Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)[ FD ]
Line_83 $$ if (cmd.equals(Constants.ADD) && (entry != null)) -->Line_84 $$ String namespace = PortalUtil.getPortletNamespace(portletId)[ CD ]
Line_5 $$ BlogsEntry entry = null-->Line_46 $$ newRedirect = StringUtil.replace(newRedirect, oldUrlTitle, entry.getUrlTitle())[ FD ]
Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)-->Line_85 $$ redirect = HttpUtil.addParameter(redirect, namespace + "className", BlogsEntry.class.getName())[ FD ]
Line_56 $$ if (ajax) -->Line_58 $$ JSONArray jsonArray = JSONFactoryUtil.createJSONArray()[ CD ]
Line_86 $$ redirect = HttpUtil.addParameter(redirect, namespace + "classPK", entry.getEntryId())-->Line_88 $$ actionRequest.setAttribute(WebKeys.REDIRECT, redirect)[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_96 $$ SessionErrors.add(actionRequest, e.getClass())[ FD ]
Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())-->Line_86 $$ redirect = HttpUtil.addParameter(redirect, namespace + "classPK", entry.getEntryId())[ FD ]
Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)-->Line_68 $$ jsonObject.put("redirect", redirect)[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_55 $$ boolean ajax = ParamUtil.getBoolean(actionRequest, "ajax")[ FD ]
Line_6 $$ String oldUrlTitle = StringPool.BLANK-->Line_41 $$ if (Validator.isNotNull(oldUrlTitle)) [ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_32 $$ restoreTrashEntries(actionRequest)[ FD ]
Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)-->Line_85 $$ redirect = HttpUtil.addParameter(redirect, namespace + "className", BlogsEntry.class.getName())[ FD ]
Line_35 $$ if (cmd.equals(Constants.UNSUBSCRIBE)) -->Line_36 $$ unsubscribe(actionRequest)[ CD ]
Line_43 $$ String oldRedirect = HttpUtil.getParameter(redirect, oldRedirectParam, false)-->Line_44 $$ if (Validator.isNotNull(oldRedirect)) [ FD ]
Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)-->Line_50 $$ redirect = StringUtil.replace(redirect, oldUrlTitle, entry.getUrlTitle())[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_70 $$ JSONPortletResponseUtil.writeJSON(actionRequest, actionResponse, jsonObject)[ FD ]
Line_40 $$ String portletId = HttpUtil.getParameter(redirect, "p_p_id", false)-->Line_84 $$ String namespace = PortalUtil.getPortletNamespace(portletId)[ FD ]
Line_33 $$ if (cmd.equals(Constants.SUBSCRIBE)) -->Line_34 $$ subscribe(actionRequest)[ CD ]
Line_9 $$ if (uploadException != null) -->Line_10 $$ Throwable cause = uploadException.getCause()[ CD ]
Line_56 $$ if (ajax) -->Line_66 $$ jsonObject.put("blogsEntryAttachmentReferences", jsonArray)[ CD ]
Line_8 $$ UploadException uploadException = (UploadException) actionRequest.getAttribute(WebKeys.UPLOAD_EXCEPTION)-->Line_11 $$ if (uploadException.isExceededFileSizeLimit()) [ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_99 $$ SessionErrors.add(actionRequest, e.getClass())[ FD ]
Line_31 $$ if (cmd.equals(Constants.RESTORE)) -->Line_33 $$ if (cmd.equals(Constants.SUBSCRIBE)) [ CD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_79 $$ sendRedirect(actionRequest, actionResponse, redirect)[ FD ]
Line_56 $$ if (ajax) -->Line_68 $$ jsonObject.put("redirect", redirect)[ CD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_94 $$ actionResponse.setRenderParameter("mvcRenderCommandName", "/blogs/edit_entry")[ FD ]
Line_42 $$ String oldRedirectParam = PortalUtil.getPortletNamespace(portletId) + "redirect"-->Line_47 $$ newRedirect = StringUtil.replace(newRedirect, oldRedirectParam, "redirect")[ FD ]
Line_2 $$ protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_74 $$ redirect = getSaveAndContinueRedirect(actionRequest, entry, redirect)[ FD ]
Line_48 $$ redirect = StringUtil.replace(redirect, oldRedirect, newRedirect)-->Line_82 $$ if (Validator.isNotNull(redirect)) [ FD ]
