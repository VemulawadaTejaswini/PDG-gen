Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_8 $$ assertEquals(10, manager.getTimeToNextResize(TimeUnit.MINUTES), 1)[ FD ]
Line_40 $$ if (entry.getKey().contains(CF_STANDARDLOWiINTERVAL))-->Line_41 $$ assertTrue(entry.getValue() >= cfs.metadata.params.minIndexInterval)[ CD ]
Line_32 $$ Map<String, Integer> intervals = manager.getIndexIntervals()-->Line_38 $$ intervals = manager.getIndexIntervals()[ FD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_38 $$ intervals = manager.getIndexIntervals()[ FD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_11 $$ assertEquals(15, manager.getTimeToNextResize(TimeUnit.MINUTES), 2)[ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_16 $$ String cfname = CF_STANDARDLOWiINTERVAL[ CD ]
Line_38 $$ intervals = manager.getIndexIntervals()-->Line_39 $$ for (Map.Entry<String, Integer> entry : intervals.entrySet()) [ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance[ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_6 $$ manager.setResizeIntervalInMinutes(10)[ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_9 $$ manager.setResizeIntervalInMinutes(15)[ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_35 $$ manager.setMemoryPoolCapacityInMB(0)[ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_13 $$ manager.setMemoryPoolCapacityInMB(10)[ CD ]
Line_16 $$ String cfname = CF_STANDARDLOWiINTERVAL-->Line_18 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ FD ]
Line_18 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_29 $$ cfs.forceBlockingFlush()[ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_37 $$ assertTrue(manager.getAverageIndexInterval() > cfs.metadata.params.minIndexInterval)[ CD ]
Line_25 $$ for (int row = 0; row < numRows; row++) -->Line_26 $$ String key = String.format("%3d", row)[ CD ]
Line_22 $$ int numSSTables = 2-->Line_24 $$ for (int sstable = 0; sstable < numSSTables; sstable++) [ FD ]
Line_24 $$ for (int sstable = 0; sstable < numSSTables; sstable++) -->Line_29 $$ cfs.forceBlockingFlush()[ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_32 $$ Map<String, Integer> intervals = manager.getIndexIntervals()[ CD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_32 $$ Map<String, Integer> intervals = manager.getIndexIntervals()[ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_7 $$ assertEquals(10, manager.getResizeIntervalInMinutes())[ CD ]
Line_33 $$ for (Map.Entry<String, Integer> entry : intervals.entrySet()) if (entry.getKey().contains(CF_STANDARDLOWiINTERVAL))-->Line_34 $$ assertEquals(cfs.metadata.params.minIndexInterval, entry.getValue(), 0.001)[ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_18 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ CD ]
Line_18 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_20 $$ cfs.disableAutoCompaction()[ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_38 $$ intervals = manager.getIndexIntervals()[ CD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_4 $$ manager.setResizeIntervalInMinutes(-1)[ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_15 $$ String ksname = KEYSPACE1[ CD ]
Line_32 $$ Map<String, Integer> intervals = manager.getIndexIntervals()-->Line_33 $$ for (Map.Entry<String, Integer> entry : intervals.entrySet()) if (entry.getKey().contains(CF_STANDARDLOWiINTERVAL))[ FD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_36 $$ manager.redistributeSummaries()[ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_23 $$ int numRows = 10[ CD ]
Line_17 $$ Keyspace keyspace = Keyspace.open(ksname)-->Line_18 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ FD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_7 $$ assertEquals(10, manager.getResizeIntervalInMinutes())[ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_24 $$ for (int sstable = 0; sstable < numSSTables; sstable++) [ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_14 $$ assertEquals(10, manager.getMemoryPoolCapacityInMB())[ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_5 $$ assertNull(manager.getTimeToNextResize(TimeUnit.MINUTES))[ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_12 $$ assertTrue(manager.getMemoryPoolCapacityInMB() >= 0)[ CD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_13 $$ manager.setMemoryPoolCapacityInMB(10)[ FD ]
Line_25 $$ for (int row = 0; row < numRows; row++) -->Line_27 $$ new RowUpdateBuilder(cfs.metadata, 0, key).clustering("column").add("val", value).build().applyUnsafe()[ CD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_9 $$ manager.setResizeIntervalInMinutes(15)[ FD ]
Line_33 $$ for (Map.Entry<String, Integer> entry : intervals.entrySet()) if (entry.getKey().contains(CF_STANDARDLOWiINTERVAL))-->Line_40 $$ if (entry.getKey().contains(CF_STANDARDLOWiINTERVAL))[ FD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_12 $$ assertTrue(manager.getMemoryPoolCapacityInMB() >= 0)[ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_4 $$ manager.setResizeIntervalInMinutes(-1)[ CD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_10 $$ assertEquals(15, manager.getResizeIntervalInMinutes())[ FD ]
Line_33 $$ for (Map.Entry<String, Integer> entry : intervals.entrySet()) if (entry.getKey().contains(CF_STANDARDLOWiINTERVAL))-->Line_41 $$ assertTrue(entry.getValue() >= cfs.metadata.params.minIndexInterval)[ FD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_37 $$ assertTrue(manager.getAverageIndexInterval() > cfs.metadata.params.minIndexInterval)[ FD ]
Line_15 $$ String ksname = KEYSPACE1-->Line_17 $$ Keyspace keyspace = Keyspace.open(ksname)[ FD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_35 $$ manager.setMemoryPoolCapacityInMB(0)[ FD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_14 $$ assertEquals(10, manager.getMemoryPoolCapacityInMB())[ FD ]
Line_18 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_19 $$ cfs.truncateBlocking()[ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_8 $$ assertEquals(10, manager.getTimeToNextResize(TimeUnit.MINUTES), 1)[ CD ]
Line_25 $$ for (int row = 0; row < numRows; row++) -->Line_26 $$ String key = String.format("%3d", row)[ FD ]
Line_32 $$ Map<String, Integer> intervals = manager.getIndexIntervals()-->Line_39 $$ for (Map.Entry<String, Integer> entry : intervals.entrySet()) [ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_21 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])[ CD ]
Line_24 $$ for (int sstable = 0; sstable < numSSTables; sstable++) -->Line_25 $$ for (int row = 0; row < numRows; row++) [ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_31 $$ assertTrue(manager.getAverageIndexInterval() >= cfs.metadata.params.minIndexInterval)[ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_17 $$ Keyspace keyspace = Keyspace.open(ksname)[ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_22 $$ int numSSTables = 2[ CD ]
Line_23 $$ int numRows = 10-->Line_25 $$ for (int row = 0; row < numRows; row++) [ FD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_31 $$ assertTrue(manager.getAverageIndexInterval() >= cfs.metadata.params.minIndexInterval)[ FD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_6 $$ manager.setResizeIntervalInMinutes(10)[ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_10 $$ assertEquals(15, manager.getResizeIntervalInMinutes())[ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_11 $$ assertEquals(15, manager.getTimeToNextResize(TimeUnit.MINUTES), 2)[ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_20 $$ cfs.disableAutoCompaction()[ CD ]
Line_21 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])-->Line_27 $$ new RowUpdateBuilder(cfs.metadata, 0, key).clustering("column").add("val", value).build().applyUnsafe()[ FD ]
Line_3 $$ IndexSummaryManager manager = IndexSummaryManager.instance-->Line_5 $$ assertNull(manager.getTimeToNextResize(TimeUnit.MINUTES))[ FD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_19 $$ cfs.truncateBlocking()[ CD ]
Line_33 $$ if (entry.getKey().contains(CF_STANDARDLOWiINTERVAL))-->Line_34 $$ assertEquals(cfs.metadata.params.minIndexInterval, entry.getValue(), 0.001)[ CD ]
Line_2 $$ public void testJMXFunctions() throws IOException -->Line_36 $$ manager.redistributeSummaries()[ CD ]
