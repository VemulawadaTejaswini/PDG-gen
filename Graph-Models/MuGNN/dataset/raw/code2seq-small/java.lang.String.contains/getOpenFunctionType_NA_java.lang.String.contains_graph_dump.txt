Line_8 $$ if (argument instanceof PyKeywordArgument) -->Line_9 $$ argument = ((PyKeywordArgument) argument).getValueExpression()[ CD ]
Line_7 $$ PyExpression argument = entry.getKey()-->Line_9 $$ argument = ((PyKeywordArgument) argument).getValueExpression()[ FD ]
Line_2 $$ private static PyType getOpenFunctionType(@NotNull String callQName, @NotNull Map<PyExpression, PyNamedParameter> arguments, @NotNull PsiElement anchor) -->Line_17 $$ final LanguageLevel level = LanguageLevel.forElement(anchor)[ FD ]
Line_12 $$ mode = ((PyStringLiteralExpression) argument).getStringValue()-->Line_18 $$ if (mode.contains("b")) [ FD ]
Line_18 $$ if (mode.contains("b")) -->Line_22 $$ if (level.isPy3K() || "io.open".equals(callQName)) [ CD ]
Line_22 $$ if (level.isPy3K() || "io.open".equals(callQName)) -->Line_23 $$ return PyTypeParser.getTypeByName(anchor, TEXT_FILE_TYPE)[ CD ]
Line_2 $$ private static PyType getOpenFunctionType(@NotNull String callQName, @NotNull Map<PyExpression, PyNamedParameter> arguments, @NotNull PsiElement anchor) -->Line_25 $$ return PyTypeParser.getTypeByName(anchor, BINARY_FILE_TYPE)[ FD ]
Line_2 $$ private static PyType getOpenFunctionType(@NotNull String callQName, @NotNull Map<PyExpression, PyNamedParameter> arguments, @NotNull PsiElement anchor) -->Line_17 $$ final LanguageLevel level = LanguageLevel.forElement(anchor)[ CD ]
Line_6 $$ if ("mode".equals(parameter.getName())) -->Line_8 $$ if (argument instanceof PyKeywordArgument) [ CD ]
Line_2 $$ private static PyType getOpenFunctionType(@NotNull String callQName, @NotNull Map<PyExpression, PyNamedParameter> arguments, @NotNull PsiElement anchor) -->Line_22 $$ if (level.isPy3K() || "io.open".equals(callQName)) [ FD ]
Line_2 $$ private static PyType getOpenFunctionType(@NotNull String callQName, @NotNull Map<PyExpression, PyNamedParameter> arguments, @NotNull PsiElement anchor) -->Line_18 $$ if (mode.contains("b")) [ CD ]
Line_5 $$ final PyNamedParameter parameter = entry.getValue()-->Line_6 $$ if ("mode".equals(parameter.getName())) [ FD ]
Line_17 $$ final LanguageLevel level = LanguageLevel.forElement(anchor)-->Line_22 $$ if (level.isPy3K() || "io.open".equals(callQName)) [ FD ]
Line_2 $$ private static PyType getOpenFunctionType(@NotNull String callQName, @NotNull Map<PyExpression, PyNamedParameter> arguments, @NotNull PsiElement anchor) -->Line_19 $$ return PyTypeParser.getTypeByName(anchor, BINARY_FILE_TYPE)[ FD ]
Line_3 $$ String mode = "r"-->Line_18 $$ if (mode.contains("b")) [ FD ]
Line_3 $$ String mode = "r"-->Line_12 $$ mode = ((PyStringLiteralExpression) argument).getStringValue()[ FD ]
Line_6 $$ if ("mode".equals(parameter.getName())) -->Line_11 $$ if (argument instanceof PyStringLiteralExpression) [ CD ]
Line_7 $$ PyExpression argument = entry.getKey()-->Line_11 $$ if (argument instanceof PyStringLiteralExpression) [ FD ]
Line_18 $$ if (mode.contains("b")) -->Line_19 $$ return PyTypeParser.getTypeByName(anchor, BINARY_FILE_TYPE)[ CD ]
Line_22 $$ if (level.isPy3K() || "io.open".equals(callQName)) -->Line_25 $$ return PyTypeParser.getTypeByName(anchor, BINARY_FILE_TYPE)[ CD ]
Line_2 $$ private static PyType getOpenFunctionType(@NotNull String callQName, @NotNull Map<PyExpression, PyNamedParameter> arguments, @NotNull PsiElement anchor) -->Line_4 $$ for (Map.Entry<PyExpression, PyNamedParameter> entry : arguments.entrySet()) [ FD ]
Line_4 $$ for (Map.Entry<PyExpression, PyNamedParameter> entry : arguments.entrySet()) -->Line_5 $$ final PyNamedParameter parameter = entry.getValue()[ FD ]
Line_2 $$ private static PyType getOpenFunctionType(@NotNull String callQName, @NotNull Map<PyExpression, PyNamedParameter> arguments, @NotNull PsiElement anchor) -->Line_23 $$ return PyTypeParser.getTypeByName(anchor, TEXT_FILE_TYPE)[ FD ]
Line_9 $$ argument = ((PyKeywordArgument) argument).getValueExpression()-->Line_11 $$ if (argument instanceof PyStringLiteralExpression) [ FD ]
Line_2 $$ private static PyType getOpenFunctionType(@NotNull String callQName, @NotNull Map<PyExpression, PyNamedParameter> arguments, @NotNull PsiElement anchor) -->Line_3 $$ String mode = "r"[ CD ]
Line_4 $$ for (Map.Entry<PyExpression, PyNamedParameter> entry : arguments.entrySet()) -->Line_7 $$ PyExpression argument = entry.getKey()[ FD ]
Line_6 $$ if ("mode".equals(parameter.getName())) -->Line_7 $$ PyExpression argument = entry.getKey()[ CD ]
Line_7 $$ PyExpression argument = entry.getKey()-->Line_8 $$ if (argument instanceof PyKeywordArgument) [ FD ]
Line_11 $$ if (argument instanceof PyStringLiteralExpression) -->Line_12 $$ mode = ((PyStringLiteralExpression) argument).getStringValue()[ CD ]
