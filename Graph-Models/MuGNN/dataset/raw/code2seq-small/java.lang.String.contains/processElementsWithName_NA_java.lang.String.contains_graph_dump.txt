Line_2 $$ public void processElementsWithName(@NotNull String name, @NotNull final Processor<NavigationItem> processor, @NotNull final FindSymbolParameters parameters) -->Line_13 $$ PsiShortNamesCache.getInstance(parameters.getProject()).processClassesWithName(name, new Processor<PsiClass>() [ CD ]
Line_16 $$ if (aClass.getContainingFile().getVirtualFile() == null || !aClass.isPhysical())-->Line_17 $$ return true[ CD ]
Line_5 $$ if (hasDollar) -->Line_6 $$ Matcher matcher = ChooseByNamePopup.patternToDetectAnonymousClasses.matcher(namePattern)[ CD ]
Line_3 $$ String namePattern = StringUtil.getShortName(parameters.getCompletePattern())-->Line_6 $$ Matcher matcher = ChooseByNamePopup.patternToDetectAnonymousClasses.matcher(namePattern)[ FD ]
Line_6 $$ Matcher matcher = ChooseByNamePopup.patternToDetectAnonymousClasses.matcher(namePattern)-->Line_7 $$ if (matcher.matches()) [ FD ]
Line_2 $$ public void processElementsWithName(@NotNull String name, @NotNull final Processor<NavigationItem> processor, @NotNull final FindSymbolParameters parameters) -->Line_13 $$ PsiShortNamesCache.getInstance(parameters.getProject()).processClassesWithName(name, new Processor<PsiClass>() [ FD ]
Line_2 $$ public void processElementsWithName(@NotNull String name, @NotNull final Processor<NavigationItem> processor, @NotNull final FindSymbolParameters parameters) -->Line_27 $$ return processor.process(aClass)[ FD ]
Line_3 $$ String namePattern = StringUtil.getShortName(parameters.getCompletePattern())-->Line_8 $$ namePattern = matcher.group(1)[ FD ]
Line_20 $$ if (innerMatcher != null) -->Line_24 $$ if (jvmQName == null || !innerMatcher.matches(StringUtil.getShortName(jvmQName)))[ CD ]
Line_7 $$ if (matcher.matches()) -->Line_8 $$ namePattern = matcher.group(1)[ CD ]
Line_6 $$ Matcher matcher = ChooseByNamePopup.patternToDetectAnonymousClasses.matcher(namePattern)-->Line_8 $$ namePattern = matcher.group(1)[ FD ]
Line_13 $$ PsiShortNamesCache.getInstance(parameters.getProject()).processClassesWithName(name, new Processor<PsiClass>() -->Line_21 $$ if (aClass.getContainingClass() == null)[ FD ]
Line_8 $$ namePattern = matcher.group(1)-->Line_9 $$ hasDollar = namePattern.contains("$")[ FD ]
Line_5 $$ if (hasDollar) -->Line_7 $$ if (matcher.matches()) [ CD ]
Line_18 $$ if (isAnnotation && !aClass.isAnnotationType())-->Line_19 $$ return true[ CD ]
Line_2 $$ public void processElementsWithName(@NotNull String name, @NotNull final Processor<NavigationItem> processor, @NotNull final FindSymbolParameters parameters) -->Line_4 $$ boolean hasDollar = namePattern.contains("$")[ CD ]
Line_4 $$ boolean hasDollar = namePattern.contains("$")-->Line_9 $$ hasDollar = namePattern.contains("$")[ FD ]
Line_21 $$ if (aClass.getContainingClass() == null)-->Line_22 $$ return true[ CD ]
Line_13 $$ PsiShortNamesCache.getInstance(parameters.getProject()).processClassesWithName(name, new Processor<PsiClass>() -->Line_16 $$ if (aClass.getContainingFile().getVirtualFile() == null || !aClass.isPhysical())[ CD ]
Line_2 $$ public void processElementsWithName(@NotNull String name, @NotNull final Processor<NavigationItem> processor, @NotNull final FindSymbolParameters parameters) -->Line_3 $$ String namePattern = StringUtil.getShortName(parameters.getCompletePattern())[ CD ]
Line_7 $$ if (matcher.matches()) -->Line_9 $$ hasDollar = namePattern.contains("$")[ CD ]
Line_20 $$ if (innerMatcher != null) -->Line_23 $$ String jvmQName = ClassUtil.getJVMClassName(aClass)[ CD ]
Line_13 $$ PsiShortNamesCache.getInstance(parameters.getProject()).processClassesWithName(name, new Processor<PsiClass>() -->Line_20 $$ if (innerMatcher != null) [ CD ]
Line_12 $$ final MinusculeMatcher innerMatcher = hasDollar ? new MinusculeMatcher("*" + namePattern, NameUtil.MatchingCaseSensitivity.NONE) : null-->Line_24 $$ if (jvmQName == null || !innerMatcher.matches(StringUtil.getShortName(jvmQName)))[ FD ]
Line_13 $$ PsiShortNamesCache.getInstance(parameters.getProject()).processClassesWithName(name, new Processor<PsiClass>() -->Line_23 $$ String jvmQName = ClassUtil.getJVMClassName(aClass)[ FD ]
Line_13 $$ PsiShortNamesCache.getInstance(parameters.getProject()).processClassesWithName(name, new Processor<PsiClass>() -->Line_27 $$ return processor.process(aClass)[ FD ]
Line_13 $$ PsiShortNamesCache.getInstance(parameters.getProject()).processClassesWithName(name, new Processor<PsiClass>() -->Line_18 $$ if (isAnnotation && !aClass.isAnnotationType())[ CD ]
Line_3 $$ String namePattern = StringUtil.getShortName(parameters.getCompletePattern())-->Line_4 $$ boolean hasDollar = namePattern.contains("$")[ FD ]
Line_23 $$ String jvmQName = ClassUtil.getJVMClassName(aClass)-->Line_24 $$ if (jvmQName == null || !innerMatcher.matches(StringUtil.getShortName(jvmQName)))[ FD ]
Line_24 $$ if (jvmQName == null || !innerMatcher.matches(StringUtil.getShortName(jvmQName)))-->Line_25 $$ return true[ CD ]
Line_3 $$ String namePattern = StringUtil.getShortName(parameters.getCompletePattern())-->Line_9 $$ hasDollar = namePattern.contains("$")[ FD ]
Line_13 $$ PsiShortNamesCache.getInstance(parameters.getProject()).processClassesWithName(name, new Processor<PsiClass>() -->Line_18 $$ if (isAnnotation && !aClass.isAnnotationType())[ FD ]
Line_2 $$ public void processElementsWithName(@NotNull String name, @NotNull final Processor<NavigationItem> processor, @NotNull final FindSymbolParameters parameters) -->Line_3 $$ String namePattern = StringUtil.getShortName(parameters.getCompletePattern())[ FD ]
Line_20 $$ if (innerMatcher != null) -->Line_21 $$ if (aClass.getContainingClass() == null)[ CD ]
Line_12 $$ final MinusculeMatcher innerMatcher = hasDollar ? new MinusculeMatcher("*" + namePattern, NameUtil.MatchingCaseSensitivity.NONE) : null-->Line_20 $$ if (innerMatcher != null) [ FD ]
Line_2 $$ public void processElementsWithName(@NotNull String name, @NotNull final Processor<NavigationItem> processor, @NotNull final FindSymbolParameters parameters) -->Line_5 $$ if (hasDollar) [ CD ]
Line_13 $$ PsiShortNamesCache.getInstance(parameters.getProject()).processClassesWithName(name, new Processor<PsiClass>() -->Line_16 $$ if (aClass.getContainingFile().getVirtualFile() == null || !aClass.isPhysical())[ FD ]
Line_13 $$ PsiShortNamesCache.getInstance(parameters.getProject()).processClassesWithName(name, new Processor<PsiClass>() -->Line_27 $$ return processor.process(aClass)[ CD ]
Line_2 $$ public void processElementsWithName(@NotNull String name, @NotNull final Processor<NavigationItem> processor, @NotNull final FindSymbolParameters parameters) -->Line_12 $$ final MinusculeMatcher innerMatcher = hasDollar ? new MinusculeMatcher("*" + namePattern, NameUtil.MatchingCaseSensitivity.NONE) : null[ CD ]
