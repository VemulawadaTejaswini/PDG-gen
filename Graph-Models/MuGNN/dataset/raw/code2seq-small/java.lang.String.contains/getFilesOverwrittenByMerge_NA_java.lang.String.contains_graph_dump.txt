Line_11 $$ line = line.trim()-->Line_14 $$ path = myRoot.getPath() + "/" + GitUtil.unescapePath(line)[ FD ]
Line_3 $$ final List<FilePath> paths = new ArrayList<FilePath>()-->Line_17 $$ paths.add(VcsUtil.getFilePath(file, false))[ FD ]
Line_4 $$ for (String line : mergeOutput) -->Line_5 $$ if (StringUtil.isEmptyOrSpaces(line)) [ FD ]
Line_2 $$ private List<FilePath> getFilesOverwrittenByMerge(@NotNull List<String> mergeOutput) -->Line_22 $$ return paths[ CD ]
Line_4 $$ for (String line : mergeOutput) -->Line_14 $$ path = myRoot.getPath() + "/" + GitUtil.unescapePath(line)[ FD ]
Line_12 $$ final String path-->Line_14 $$ path = myRoot.getPath() + "/" + GitUtil.unescapePath(line)[ FD ]
Line_15 $$ final File file = new File(path)-->Line_17 $$ paths.add(VcsUtil.getFilePath(file, false))[ FD ]
Line_2 $$ private List<FilePath> getFilesOverwrittenByMerge(@NotNull List<String> mergeOutput) -->Line_3 $$ final List<FilePath> paths = new ArrayList<FilePath>()[ CD ]
Line_4 $$ for (String line : mergeOutput) -->Line_8 $$ if (line.contains("Please, commit your changes or stash them before you can merge")) [ FD ]
Line_4 $$ for (String line : mergeOutput) -->Line_11 $$ line = line.trim()[ FD ]
Line_15 $$ final File file = new File(path)-->Line_16 $$ if (file.exists()) [ FD ]
Line_16 $$ if (file.exists()) -->Line_17 $$ paths.add(VcsUtil.getFilePath(file, false))[ CD ]
