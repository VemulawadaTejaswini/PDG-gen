Line_26 $$ if (StringUtil.isNotEmpty(defaultPackage)) -->Line_27 $$ final JavaResolveResult resolveResult = advancedResolveInner(psiElement, defaultPackage + "." + qName, containingFile)[ CD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_4 $$ if (!psiElement.isValid())[ CD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_6 $$ final String elementText = psiElement.getText()[ CD ]
Line_28 $$ if (resolveResult != JavaResolveResult.EMPTY) -->Line_29 $$ return resolveResult[ CD ]
Line_23 $$ final String qName = elementText.substring(startOffset, endOffset)-->Line_33 $$ return advancedResolveInner(psiElement, qName, containingFile)[ FD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_22 $$ final int startOffset = myJavaClassReferenceSet.getReference(0).getRangeInElement().getStartOffset()[ CD ]
Line_3 $$ final PsiElement psiElement = getElement()-->Line_4 $$ if (!psiElement.isValid())[ FD ]
Line_7 $$ final PsiElement context = getContext()-->Line_8 $$ if (context instanceof PsiClass) [ FD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_27 $$ final JavaResolveResult resolveResult = advancedResolveInner(psiElement, defaultPackage + "." + qName, containingFile)[ FD ]
Line_16 $$ if (!myInStaticImport && myJavaClassReferenceSet.isAllowDollarInNames()) -->Line_17 $$ return JavaResolveResult.EMPTY[ CD ]
Line_4 $$ if (!psiElement.isValid())-->Line_5 $$ return JavaResolveResult.EMPTY[ CD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_24 $$ if (!qName.contains(".")) [ CD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_23 $$ final String qName = elementText.substring(startOffset, endOffset)[ CD ]
Line_24 $$ if (!qName.contains(".")) -->Line_25 $$ final String defaultPackage = JavaClassReferenceProvider.DEFAULT_PACKAGE.getValue(getOptions())[ CD ]
Line_11 $$ if (psiClass != null) -->Line_12 $$ return new ClassCandidateInfo(psiClass, PsiSubstitutor.EMPTY, false, psiElement)[ CD ]
Line_10 $$ final PsiClass psiClass = ((PsiClass) context).findInnerClassByName(getCanonicalText(), false)-->Line_11 $$ if (psiClass != null) [ FD ]
Line_3 $$ final PsiElement psiElement = getElement()-->Line_27 $$ final JavaResolveResult resolveResult = advancedResolveInner(psiElement, defaultPackage + "." + qName, containingFile)[ FD ]
Line_9 $$ if (isStaticClassReference(elementText, false)) -->Line_15 $$ return member == null ? JavaResolveResult.EMPTY : new CandidateInfo(member, PsiSubstitutor.EMPTY, false, false, psiElement)[ CD ]
Line_9 $$ if (isStaticClassReference(elementText, false)) -->Line_11 $$ if (psiClass != null) [ CD ]
Line_9 $$ if (isStaticClassReference(elementText, false)) -->Line_16 $$ if (!myInStaticImport && myJavaClassReferenceSet.isAllowDollarInNames()) [ CD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_20 $$ final int endOffset = getRangeInElement().getEndOffset()[ CD ]
Line_24 $$ if (!qName.contains(".")) -->Line_26 $$ if (StringUtil.isNotEmpty(defaultPackage)) [ CD ]
Line_6 $$ final String elementText = psiElement.getText()-->Line_23 $$ final String qName = elementText.substring(startOffset, endOffset)[ FD ]
Line_25 $$ final String defaultPackage = JavaClassReferenceProvider.DEFAULT_PACKAGE.getValue(getOptions())-->Line_26 $$ if (StringUtil.isNotEmpty(defaultPackage)) [ FD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_33 $$ return advancedResolveInner(psiElement, qName, containingFile)[ CD ]
Line_9 $$ if (isStaticClassReference(elementText, false)) -->Line_14 $$ PsiElement member = doResolveMember((PsiClass) context, myText)[ CD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_33 $$ return advancedResolveInner(psiElement, qName, containingFile)[ FD ]
Line_27 $$ final JavaResolveResult resolveResult = advancedResolveInner(psiElement, defaultPackage + "." + qName, containingFile)-->Line_28 $$ if (resolveResult != JavaResolveResult.EMPTY) [ FD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_3 $$ final PsiElement psiElement = getElement()[ CD ]
Line_8 $$ if (context instanceof PsiClass) -->Line_9 $$ if (isStaticClassReference(elementText, false)) [ CD ]
Line_26 $$ if (StringUtil.isNotEmpty(defaultPackage)) -->Line_28 $$ if (resolveResult != JavaResolveResult.EMPTY) [ CD ]
Line_3 $$ final PsiElement psiElement = getElement()-->Line_6 $$ final String elementText = psiElement.getText()[ FD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_7 $$ final PsiElement context = getContext()[ CD ]
Line_20 $$ final int endOffset = getRangeInElement().getEndOffset()-->Line_23 $$ final String qName = elementText.substring(startOffset, endOffset)[ FD ]
Line_22 $$ final int startOffset = myJavaClassReferenceSet.getReference(0).getRangeInElement().getStartOffset()-->Line_23 $$ final String qName = elementText.substring(startOffset, endOffset)[ FD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_8 $$ if (context instanceof PsiClass) [ CD ]
Line_9 $$ if (isStaticClassReference(elementText, false)) -->Line_10 $$ final PsiClass psiClass = ((PsiClass) context).findInnerClassByName(getCanonicalText(), false)[ CD ]
Line_6 $$ final String elementText = psiElement.getText()-->Line_21 $$ LOG.assertTrue(endOffset <= elementText.length(), elementText)[ FD ]
Line_2 $$ private JavaResolveResult doAdvancedResolve(@NotNull PsiFile containingFile) -->Line_21 $$ LOG.assertTrue(endOffset <= elementText.length(), elementText)[ CD ]
Line_23 $$ final String qName = elementText.substring(startOffset, endOffset)-->Line_24 $$ if (!qName.contains(".")) [ FD ]
Line_6 $$ final String elementText = psiElement.getText()-->Line_9 $$ if (isStaticClassReference(elementText, false)) [ FD ]
Line_3 $$ final PsiElement psiElement = getElement()-->Line_33 $$ return advancedResolveInner(psiElement, qName, containingFile)[ FD ]
