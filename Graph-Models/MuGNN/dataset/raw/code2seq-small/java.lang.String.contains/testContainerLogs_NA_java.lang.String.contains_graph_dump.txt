Line_31 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)-->Line_32 $$ responseText = response.getEntity(String.class)[ FD ]
Line_25 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path("uhhh").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)-->Line_27 $$ responseText = response.getEntity(String.class)[ FD ]
Line_10 $$ final String logMessage = "log message\n"-->Line_24 $$ assertEquals(logMessage, responseText)[ FD ]
Line_12 $$ MockContainer container = new MockContainer(appAttemptId, new AsyncDispatcher(), new Configuration(), "user", appId, 1)-->Line_14 $$ nmContext.getContainers().put(containerId, container)[ FD ]
Line_5 $$ final String containerIdStr = BuilderUtils.newContainerId(0, 0, 0, 0).toString()-->Line_25 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path("uhhh").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ FD ]
Line_25 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path("uhhh").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)-->Line_26 $$ Assert.assertEquals(Status.NOT_FOUND.getStatusCode(), response.getStatus())[ FD ]
Line_25 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path("uhhh").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)-->Line_31 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ FD ]
Line_15 $$ Path path = dirsHandler.getLogPathForWrite(ContainerLaunch.getRelativeContainerLogDir(appIdStr, containerIdStr) + "/" + filename, false)-->Line_16 $$ File logFile = new File(path.toUri().getPath())[ FD ]
Line_4 $$ final ContainerId containerId = BuilderUtils.newContainerId(0, 0, 0, 0)-->Line_29 $$ nmContext.getContainers().remove(containerId)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_6 $$ final ApplicationAttemptId appAttemptId = containerId.getApplicationAttemptId()[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_5 $$ final String containerIdStr = BuilderUtils.newContainerId(0, 0, 0, 0).toString()[ CD ]
Line_22 $$ ClientResponse response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)-->Line_23 $$ String responseText = response.getEntity(String.class)[ FD ]
Line_12 $$ MockContainer container = new MockContainer(appAttemptId, new AsyncDispatcher(), new Configuration(), "user", appId, 1)-->Line_13 $$ container.setState(ContainerState.RUNNING)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_31 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ CD ]
Line_23 $$ String responseText = response.getEntity(String.class)-->Line_27 $$ responseText = response.getEntity(String.class)[ FD ]
Line_23 $$ String responseText = response.getEntity(String.class)-->Line_33 $$ assertEquals(logMessage, responseText)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_3 $$ WebResource r = resource()[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_23 $$ String responseText = response.getEntity(String.class)[ CD ]
Line_5 $$ final String containerIdStr = BuilderUtils.newContainerId(0, 0, 0, 0).toString()-->Line_31 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_9 $$ final String filename = "logfile1"[ CD ]
Line_19 $$ PrintWriter pw = new PrintWriter(logFile)-->Line_20 $$ pw.print(logMessage)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_4 $$ final ContainerId containerId = BuilderUtils.newContainerId(0, 0, 0, 0)[ CD ]
Line_8 $$ final String appIdStr = appId.toString()-->Line_15 $$ Path path = dirsHandler.getLogPathForWrite(ContainerLaunch.getRelativeContainerLogDir(appIdStr, containerIdStr) + "/" + filename, false)[ FD ]
Line_23 $$ String responseText = response.getEntity(String.class)-->Line_32 $$ responseText = response.getEntity(String.class)[ FD ]
Line_10 $$ final String logMessage = "log message\n"-->Line_20 $$ pw.print(logMessage)[ FD ]
Line_27 $$ responseText = response.getEntity(String.class)-->Line_33 $$ assertEquals(logMessage, responseText)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_29 $$ nmContext.getContainers().remove(containerId)[ CD ]
Line_7 $$ final ApplicationId appId = appAttemptId.getApplicationId()-->Line_11 $$ nmContext.getApplications().put(appId, new ApplicationImpl(null, "user", appId, null, nmContext))[ FD ]
Line_9 $$ final String filename = "logfile1"-->Line_22 $$ ClientResponse response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ FD ]
Line_22 $$ ClientResponse response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)-->Line_27 $$ responseText = response.getEntity(String.class)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_25 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path("uhhh").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_14 $$ nmContext.getContainers().put(containerId, container)[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_18 $$ assertTrue("Failed to create log dir", logFile.getParentFile().mkdirs())[ CD ]
Line_23 $$ String responseText = response.getEntity(String.class)-->Line_28 $$ assertTrue(responseText.contains("Cannot find this log on the local disk."))[ FD ]
Line_16 $$ File logFile = new File(path.toUri().getPath())-->Line_18 $$ assertTrue("Failed to create log dir", logFile.getParentFile().mkdirs())[ FD ]
Line_27 $$ responseText = response.getEntity(String.class)-->Line_28 $$ assertTrue(responseText.contains("Cannot find this log on the local disk."))[ FD ]
Line_23 $$ String responseText = response.getEntity(String.class)-->Line_24 $$ assertEquals(logMessage, responseText)[ FD ]
Line_3 $$ WebResource r = resource()-->Line_22 $$ ClientResponse response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_17 $$ logFile.deleteOnExit()[ CD ]
Line_22 $$ ClientResponse response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)-->Line_26 $$ Assert.assertEquals(Status.NOT_FOUND.getStatusCode(), response.getStatus())[ FD ]
Line_4 $$ final ContainerId containerId = BuilderUtils.newContainerId(0, 0, 0, 0)-->Line_14 $$ nmContext.getContainers().put(containerId, container)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_7 $$ final ApplicationId appId = appAttemptId.getApplicationId()[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_28 $$ assertTrue(responseText.contains("Cannot find this log on the local disk."))[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_20 $$ pw.print(logMessage)[ CD ]
Line_22 $$ ClientResponse response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)-->Line_25 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path("uhhh").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_12 $$ MockContainer container = new MockContainer(appAttemptId, new AsyncDispatcher(), new Configuration(), "user", appId, 1)[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_26 $$ Assert.assertEquals(Status.NOT_FOUND.getStatusCode(), response.getStatus())[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_8 $$ final String appIdStr = appId.toString()[ CD ]
Line_3 $$ WebResource r = resource()-->Line_25 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path("uhhh").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_30 $$ Assert.assertNull(nmContext.getContainers().get(containerId))[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_15 $$ Path path = dirsHandler.getLogPathForWrite(ContainerLaunch.getRelativeContainerLogDir(appIdStr, containerIdStr) + "/" + filename, false)[ CD ]
Line_4 $$ final ContainerId containerId = BuilderUtils.newContainerId(0, 0, 0, 0)-->Line_30 $$ Assert.assertNull(nmContext.getContainers().get(containerId))[ FD ]
Line_4 $$ final ContainerId containerId = BuilderUtils.newContainerId(0, 0, 0, 0)-->Line_6 $$ final ApplicationAttemptId appAttemptId = containerId.getApplicationAttemptId()[ FD ]
Line_19 $$ PrintWriter pw = new PrintWriter(logFile)-->Line_21 $$ pw.close()[ FD ]
Line_25 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path("uhhh").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)-->Line_32 $$ responseText = response.getEntity(String.class)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_24 $$ assertEquals(logMessage, responseText)[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_33 $$ assertEquals(logMessage, responseText)[ CD ]
Line_3 $$ WebResource r = resource()-->Line_31 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_27 $$ responseText = response.getEntity(String.class)[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_16 $$ File logFile = new File(path.toUri().getPath())[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_22 $$ ClientResponse response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ CD ]
Line_27 $$ responseText = response.getEntity(String.class)-->Line_32 $$ responseText = response.getEntity(String.class)[ FD ]
Line_5 $$ final String containerIdStr = BuilderUtils.newContainerId(0, 0, 0, 0).toString()-->Line_15 $$ Path path = dirsHandler.getLogPathForWrite(ContainerLaunch.getRelativeContainerLogDir(appIdStr, containerIdStr) + "/" + filename, false)[ FD ]
Line_32 $$ responseText = response.getEntity(String.class)-->Line_33 $$ assertEquals(logMessage, responseText)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_11 $$ nmContext.getApplications().put(appId, new ApplicationImpl(null, "user", appId, null, nmContext))[ CD ]
Line_9 $$ final String filename = "logfile1"-->Line_31 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_32 $$ responseText = response.getEntity(String.class)[ CD ]
Line_16 $$ File logFile = new File(path.toUri().getPath())-->Line_17 $$ logFile.deleteOnExit()[ FD ]
Line_22 $$ ClientResponse response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)-->Line_32 $$ responseText = response.getEntity(String.class)[ FD ]
Line_10 $$ final String logMessage = "log message\n"-->Line_33 $$ assertEquals(logMessage, responseText)[ FD ]
Line_22 $$ ClientResponse response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)-->Line_31 $$ response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ FD ]
Line_5 $$ final String containerIdStr = BuilderUtils.newContainerId(0, 0, 0, 0).toString()-->Line_22 $$ ClientResponse response = r.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(filename).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class)[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_19 $$ PrintWriter pw = new PrintWriter(logFile)[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_10 $$ final String logMessage = "log message\n"[ CD ]
Line_7 $$ final ApplicationId appId = appAttemptId.getApplicationId()-->Line_8 $$ final String appIdStr = appId.toString()[ FD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_21 $$ pw.close()[ CD ]
Line_2 $$ public void testContainerLogs() throws IOException -->Line_13 $$ container.setState(ContainerState.RUNNING)[ CD ]
Line_6 $$ final ApplicationAttemptId appAttemptId = containerId.getApplicationAttemptId()-->Line_7 $$ final ApplicationId appId = appAttemptId.getApplicationId()[ FD ]
