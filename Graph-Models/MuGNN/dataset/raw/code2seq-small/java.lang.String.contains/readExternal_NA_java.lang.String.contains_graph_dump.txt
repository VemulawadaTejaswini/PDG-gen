Line_42 $$ KeyStroke secondKeyStroke = null-->Line_46 $$ if (secondKeyStroke == null)[ FD ]
Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) -->Line_58 $$ if (stroke == null)[ CD ]
Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) -->Line_71 $$ final ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)[ CD ]
Line_33 $$ String firstKeyStrokeStr = shortcutElement.getAttributeValue(FIRST_KEYSTROKE_ATTRIBUTE)-->Line_39 $$ KeyStroke firstKeyStroke = KeyStrokeAdapter.getKeyStroke(firstKeyStrokeStr)[ FD ]
Line_50 $$ ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)-->Line_81 $$ shortcuts.add(shortcut)[ FD ]
Line_49 $$ Shortcut shortcut = new KeyboardShortcut(firstKeyStroke, secondKeyStroke)-->Line_81 $$ shortcuts.add(shortcut)[ FD ]
Line_25 $$ String id = actionElement.getAttributeValue(ID_ATTRIBUTE)-->Line_50 $$ ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)[ FD ]
Line_20 $$ Map<String, ArrayList<Shortcut>> id2shortcuts = new HashMap<String, ArrayList<Shortcut>>()-->Line_71 $$ final ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)[ FD ]
Line_20 $$ Map<String, ArrayList<Shortcut>> id2shortcuts = new HashMap<String, ArrayList<Shortcut>>()-->Line_93 $$ for (String id : id2shortcuts.keySet()) [ FD ]
Line_31 $$ Element shortcutElement = (Element) o1-->Line_73 $$ if (MOUSE_SHORTCUT.equals(shortcutElement.getName())) [ FD ]
Line_25 $$ String id = actionElement.getAttributeValue(ID_ATTRIBUTE)-->Line_29 $$ id2shortcuts.put(id, new ArrayList<Shortcut>(1))[ FD ]
Line_23 $$ Element actionElement = (Element) o-->Line_24 $$ if (ACTION.equals(actionElement.getName())) [ FD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_9 $$ String parentName = keymapElement.getAttributeValue(PARENT_ATTRIBUTE)[ CD ]
Line_24 $$ if (ACTION.equals(actionElement.getName())) -->Line_26 $$ if (id == null) [ CD ]
Line_33 $$ String firstKeyStrokeStr = shortcutElement.getAttributeValue(FIRST_KEYSTROKE_ATTRIBUTE)-->Line_37 $$ if (skipInserts && firstKeyStrokeStr.contains("INSERT"))[ FD ]
Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) -->Line_60 $$ final String modifierText = shortcutElement.getAttributeValue(KEYBOARD_GESTURE_MODIFIER)[ CD ]
Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) -->Line_70 $$ Shortcut shortcut = KeyboardModifierGestureShortcut.newInstance(modifier, stroke)[ CD ]
Line_49 $$ Shortcut shortcut = new KeyboardShortcut(firstKeyStroke, secondKeyStroke)-->Line_97 $$ addShortcutSilently(id, shortcut, false)[ FD ]
Line_64 $$ if (KeyboardGestureAction.ModifierType.hold.toString().equalsIgnoreCase(modifierText)) -->Line_65 $$ modifier = KeyboardGestureAction.ModifierType.hold[ CD ]
Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) -->Line_50 $$ ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)[ CD ]
Line_73 $$ if (MOUSE_SHORTCUT.equals(shortcutElement.getName())) -->Line_75 $$ if (keystrokeString == null) [ CD ]
Line_31 $$ Element shortcutElement = (Element) o1-->Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) [ FD ]
Line_25 $$ String id = actionElement.getAttributeValue(ID_ATTRIBUTE)-->Line_71 $$ final ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)[ FD ]
Line_62 $$ if (KeyboardGestureAction.ModifierType.dblClick.toString().equalsIgnoreCase(modifierText)) -->Line_63 $$ modifier = KeyboardGestureAction.ModifierType.dblClick[ CD ]
Line_50 $$ ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)-->Line_72 $$ shortcuts.add(shortcut)[ FD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_3 $$ if (!KEY_MAP.equals(keymapElement.getName())) [ FD ]
Line_63 $$ modifier = KeyboardGestureAction.ModifierType.dblClick-->Line_65 $$ modifier = KeyboardGestureAction.ModifierType.hold[ FD ]
Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) -->Line_51 $$ shortcuts.add(shortcut)[ CD ]
Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) -->Line_40 $$ if (firstKeyStroke == null)[ CD ]
Line_57 $$ KeyStroke stroke = KeyStrokeAdapter.getKeyStroke(strokeText)-->Line_70 $$ Shortcut shortcut = KeyboardModifierGestureShortcut.newInstance(modifier, stroke)[ FD ]
Line_24 $$ if (ACTION.equals(actionElement.getName())) -->Line_29 $$ id2shortcuts.put(id, new ArrayList<Shortcut>(1))[ CD ]
Line_20 $$ Map<String, ArrayList<Shortcut>> id2shortcuts = new HashMap<String, ArrayList<Shortcut>>()-->Line_95 $$ ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)[ FD ]
Line_50 $$ ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)-->Line_51 $$ shortcuts.add(shortcut)[ FD ]
Line_6 $$ if (keymapElement.getAttributeValue(VERSION_ATTRIBUTE) == null) -->Line_7 $$ Converter01.convert(keymapElement)[ CD ]
Line_65 $$ modifier = KeyboardGestureAction.ModifierType.hold-->Line_67 $$ if (modifier == null) [ FD ]
Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) -->Line_33 $$ String firstKeyStrokeStr = shortcutElement.getAttributeValue(FIRST_KEYSTROKE_ATTRIBUTE)[ CD ]
Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) -->Line_49 $$ Shortcut shortcut = new KeyboardShortcut(firstKeyStroke, secondKeyStroke)[ CD ]
Line_21 $$ final boolean skipInserts = SystemInfo.isMac && !ApplicationManager.getApplication().isUnitTestMode()-->Line_37 $$ if (skipInserts && firstKeyStrokeStr.contains("INSERT"))[ FD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_22 $$ for (final Object o : keymapElement.getChildren()) [ FD ]
Line_53 $$ final String strokeText = shortcutElement.getAttributeValue(KEYBOARD_GESTURE_KEY)-->Line_54 $$ if (strokeText == null) [ FD ]
Line_49 $$ Shortcut shortcut = new KeyboardShortcut(firstKeyStroke, secondKeyStroke)-->Line_51 $$ shortcuts.add(shortcut)[ FD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_9 $$ String parentName = keymapElement.getAttributeValue(PARENT_ATTRIBUTE)[ FD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_19 $$ myName = keymapElement.getAttributeValue(NAME_ATTRIBUTE)[ FD ]
Line_44 $$ if (secondKeyStrokeStr != null) -->Line_45 $$ secondKeyStroke = KeyStrokeAdapter.getKeyStroke(secondKeyStrokeStr)[ CD ]
Line_31 $$ Element shortcutElement = (Element) o1-->Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) [ FD ]
Line_73 $$ if (MOUSE_SHORTCUT.equals(shortcutElement.getName())) -->Line_74 $$ String keystrokeString = shortcutElement.getAttributeValue(KEYSTROKE_ATTRIBUTE)[ CD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_10 $$ if (parentName != null) [ CD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_6 $$ if (keymapElement.getAttributeValue(VERSION_ATTRIBUTE) == null) [ CD ]
Line_53 $$ final String strokeText = shortcutElement.getAttributeValue(KEYBOARD_GESTURE_KEY)-->Line_57 $$ KeyStroke stroke = KeyStrokeAdapter.getKeyStroke(strokeText)[ FD ]
Line_9 $$ String parentName = keymapElement.getAttributeValue(PARENT_ATTRIBUTE)-->Line_12 $$ if (parentName.equals(existingKeymap.getName())) [ FD ]
Line_31 $$ Element shortcutElement = (Element) o1-->Line_53 $$ final String strokeText = shortcutElement.getAttributeValue(KEYBOARD_GESTURE_KEY)[ FD ]
Line_45 $$ secondKeyStroke = KeyStrokeAdapter.getKeyStroke(secondKeyStrokeStr)-->Line_46 $$ if (secondKeyStroke == null)[ FD ]
Line_74 $$ String keystrokeString = shortcutElement.getAttributeValue(KEYSTROKE_ATTRIBUTE)-->Line_75 $$ if (keystrokeString == null) [ FD ]
Line_60 $$ final String modifierText = shortcutElement.getAttributeValue(KEYBOARD_GESTURE_MODIFIER)-->Line_62 $$ if (KeyboardGestureAction.ModifierType.dblClick.toString().equalsIgnoreCase(modifierText)) [ FD ]
Line_43 $$ String secondKeyStrokeStr = shortcutElement.getAttributeValue(SECOND_KEYSTROKE_ATTRIBUTE)-->Line_44 $$ if (secondKeyStrokeStr != null) [ FD ]
Line_31 $$ Element shortcutElement = (Element) o1-->Line_33 $$ String firstKeyStrokeStr = shortcutElement.getAttributeValue(FIRST_KEYSTROKE_ATTRIBUTE)[ FD ]
Line_44 $$ if (secondKeyStrokeStr != null) -->Line_46 $$ if (secondKeyStroke == null)[ CD ]
Line_60 $$ final String modifierText = shortcutElement.getAttributeValue(KEYBOARD_GESTURE_MODIFIER)-->Line_64 $$ if (KeyboardGestureAction.ModifierType.hold.toString().equalsIgnoreCase(modifierText)) [ FD ]
Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) -->Line_53 $$ final String strokeText = shortcutElement.getAttributeValue(KEYBOARD_GESTURE_KEY)[ CD ]
Line_61 $$ KeyboardGestureAction.ModifierType modifier = null-->Line_67 $$ if (modifier == null) [ FD ]
Line_11 $$ for (Keymap existingKeymap : existingKeymaps) -->Line_12 $$ if (parentName.equals(existingKeymap.getName())) [ FD ]
Line_25 $$ String id = actionElement.getAttributeValue(ID_ATTRIBUTE)-->Line_26 $$ if (id == null) [ FD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_20 $$ Map<String, ArrayList<Shortcut>> id2shortcuts = new HashMap<String, ArrayList<Shortcut>>()[ CD ]
Line_20 $$ Map<String, ArrayList<Shortcut>> id2shortcuts = new HashMap<String, ArrayList<Shortcut>>()-->Line_50 $$ ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)[ FD ]
Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) -->Line_39 $$ KeyStroke firstKeyStroke = KeyStrokeAdapter.getKeyStroke(firstKeyStrokeStr)[ CD ]
Line_9 $$ String parentName = keymapElement.getAttributeValue(PARENT_ATTRIBUTE)-->Line_10 $$ if (parentName != null) [ FD ]
Line_65 $$ modifier = KeyboardGestureAction.ModifierType.hold-->Line_70 $$ Shortcut shortcut = KeyboardModifierGestureShortcut.newInstance(modifier, stroke)[ FD ]
Line_39 $$ KeyStroke firstKeyStroke = KeyStrokeAdapter.getKeyStroke(firstKeyStrokeStr)-->Line_40 $$ if (firstKeyStroke == null)[ FD ]
Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) -->Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) [ CD ]
Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) -->Line_67 $$ if (modifier == null) [ CD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_19 $$ myName = keymapElement.getAttributeValue(NAME_ATTRIBUTE)[ CD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_3 $$ if (!KEY_MAP.equals(keymapElement.getName())) [ CD ]
Line_62 $$ if (KeyboardGestureAction.ModifierType.dblClick.toString().equalsIgnoreCase(modifierText)) -->Line_64 $$ if (KeyboardGestureAction.ModifierType.hold.toString().equalsIgnoreCase(modifierText)) [ CD ]
Line_63 $$ modifier = KeyboardGestureAction.ModifierType.dblClick-->Line_70 $$ Shortcut shortcut = KeyboardModifierGestureShortcut.newInstance(modifier, stroke)[ FD ]
Line_42 $$ KeyStroke secondKeyStroke = null-->Line_45 $$ secondKeyStroke = KeyStrokeAdapter.getKeyStroke(secondKeyStrokeStr)[ FD ]
Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) -->Line_43 $$ String secondKeyStrokeStr = shortcutElement.getAttributeValue(SECOND_KEYSTROKE_ATTRIBUTE)[ CD ]
Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) -->Line_42 $$ KeyStroke secondKeyStroke = null[ CD ]
Line_20 $$ Map<String, ArrayList<Shortcut>> id2shortcuts = new HashMap<String, ArrayList<Shortcut>>()-->Line_80 $$ ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)[ FD ]
Line_33 $$ String firstKeyStrokeStr = shortcutElement.getAttributeValue(FIRST_KEYSTROKE_ATTRIBUTE)-->Line_34 $$ if (firstKeyStrokeStr == null) [ FD ]
Line_63 $$ modifier = KeyboardGestureAction.ModifierType.dblClick-->Line_67 $$ if (modifier == null) [ FD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_21 $$ final boolean skipInserts = SystemInfo.isMac && !ApplicationManager.getApplication().isUnitTestMode()[ CD ]
Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) -->Line_37 $$ if (skipInserts && firstKeyStrokeStr.contains("INSERT"))[ CD ]
Line_74 $$ String keystrokeString = shortcutElement.getAttributeValue(KEYSTROKE_ATTRIBUTE)-->Line_79 $$ MouseShortcut shortcut = KeymapUtil.parseMouseShortcut(keystrokeString)[ FD ]
Line_20 $$ Map<String, ArrayList<Shortcut>> id2shortcuts = new HashMap<String, ArrayList<Shortcut>>()-->Line_29 $$ id2shortcuts.put(id, new ArrayList<Shortcut>(1))[ FD ]
Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) -->Line_61 $$ KeyboardGestureAction.ModifierType modifier = null[ CD ]
Line_61 $$ KeyboardGestureAction.ModifierType modifier = null-->Line_63 $$ modifier = KeyboardGestureAction.ModifierType.dblClick[ FD ]
Line_43 $$ String secondKeyStrokeStr = shortcutElement.getAttributeValue(SECOND_KEYSTROKE_ATTRIBUTE)-->Line_45 $$ secondKeyStroke = KeyStrokeAdapter.getKeyStroke(secondKeyStrokeStr)[ FD ]
Line_25 $$ String id = actionElement.getAttributeValue(ID_ATTRIBUTE)-->Line_94 $$ myActionId2ListOfShortcuts.put(id, new OrderedSet<Shortcut>(2))[ FD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_6 $$ if (keymapElement.getAttributeValue(VERSION_ATTRIBUTE) == null) [ FD ]
Line_31 $$ Element shortcutElement = (Element) o1-->Line_43 $$ String secondKeyStrokeStr = shortcutElement.getAttributeValue(SECOND_KEYSTROKE_ATTRIBUTE)[ FD ]
Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) -->Line_73 $$ if (MOUSE_SHORTCUT.equals(shortcutElement.getName())) [ CD ]
Line_31 $$ Element shortcutElement = (Element) o1-->Line_60 $$ final String modifierText = shortcutElement.getAttributeValue(KEYBOARD_GESTURE_MODIFIER)[ FD ]
Line_61 $$ KeyboardGestureAction.ModifierType modifier = null-->Line_65 $$ modifier = KeyboardGestureAction.ModifierType.hold[ FD ]
Line_25 $$ String id = actionElement.getAttributeValue(ID_ATTRIBUTE)-->Line_95 $$ ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)[ FD ]
Line_25 $$ String id = actionElement.getAttributeValue(ID_ATTRIBUTE)-->Line_80 $$ ArrayList<Shortcut> shortcuts = id2shortcuts.get(id)[ FD ]
Line_25 $$ String id = actionElement.getAttributeValue(ID_ATTRIBUTE)-->Line_97 $$ addShortcutSilently(id, shortcut, false)[ FD ]
Line_2 $$ public void readExternal(Element keymapElement, Keymap[] existingKeymaps) throws InvalidDataException -->Line_7 $$ Converter01.convert(keymapElement)[ FD ]
Line_31 $$ Element shortcutElement = (Element) o1-->Line_74 $$ String keystrokeString = shortcutElement.getAttributeValue(KEYSTROKE_ATTRIBUTE)[ FD ]
Line_61 $$ KeyboardGestureAction.ModifierType modifier = null-->Line_70 $$ Shortcut shortcut = KeyboardModifierGestureShortcut.newInstance(modifier, stroke)[ FD ]
Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) -->Line_54 $$ if (strokeText == null) [ CD ]
Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) -->Line_57 $$ KeyStroke stroke = KeyStrokeAdapter.getKeyStroke(strokeText)[ CD ]
Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) -->Line_72 $$ shortcuts.add(shortcut)[ CD ]
Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) -->Line_44 $$ if (secondKeyStrokeStr != null) [ CD ]
Line_49 $$ Shortcut shortcut = new KeyboardShortcut(firstKeyStroke, secondKeyStroke)-->Line_72 $$ shortcuts.add(shortcut)[ FD ]
Line_24 $$ if (ACTION.equals(actionElement.getName())) -->Line_25 $$ String id = actionElement.getAttributeValue(ID_ATTRIBUTE)[ CD ]
Line_32 $$ if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) -->Line_34 $$ if (firstKeyStrokeStr == null) [ CD ]
Line_57 $$ KeyStroke stroke = KeyStrokeAdapter.getKeyStroke(strokeText)-->Line_58 $$ if (stroke == null)[ FD ]
Line_52 $$ if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) -->Line_62 $$ if (KeyboardGestureAction.ModifierType.dblClick.toString().equalsIgnoreCase(modifierText)) [ CD ]
Line_23 $$ Element actionElement = (Element) o-->Line_25 $$ String id = actionElement.getAttributeValue(ID_ATTRIBUTE)[ FD ]
Line_23 $$ Element actionElement = (Element) o-->Line_30 $$ for (final Object o1 : actionElement.getChildren()) [ FD ]
