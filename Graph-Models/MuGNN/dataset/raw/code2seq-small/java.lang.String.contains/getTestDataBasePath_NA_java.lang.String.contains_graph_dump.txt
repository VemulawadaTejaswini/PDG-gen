Line_8 $$ if (value instanceof PsiExpression) -->Line_10 $$ final PsiConstantEvaluationHelper evaluationHelper = JavaPsiFacade.getInstance(project).getConstantEvaluationHelper()[ CD ]
Line_8 $$ if (value instanceof PsiExpression) -->Line_11 $$ final Object constantValue = evaluationHelper.computeConstantExpression(value, false)[ CD ]
Line_14 $$ if (path.contains(CONTENT_ROOT_VARIABLE)) -->Line_15 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
Line_26 $$ final VirtualFile baseDir = project.getBaseDir()-->Line_30 $$ path = path.replace(PROJECT_ROOT_VARIABLE, baseDir.getPath())[ FD ]
Line_25 $$ if (path.contains(PROJECT_ROOT_VARIABLE)) -->Line_26 $$ final VirtualFile baseDir = project.getBaseDir()[ CD ]
Line_6 $$ if (annotation != null) -->Line_8 $$ if (value instanceof PsiExpression) [ CD ]
Line_14 $$ if (path.contains(CONTENT_ROOT_VARIABLE)) -->Line_16 $$ final VirtualFile file = psiClass.getContainingFile().getVirtualFile()[ CD ]
Line_14 $$ if (path.contains(CONTENT_ROOT_VARIABLE)) -->Line_20 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(file)[ CD ]
Line_12 $$ if (constantValue instanceof String) -->Line_13 $$ String path = (String) constantValue[ CD ]
Line_12 $$ if (constantValue instanceof String) -->Line_25 $$ if (path.contains(PROJECT_ROOT_VARIABLE)) [ CD ]
Line_2 $$ public static String getTestDataBasePath(@Nullable PsiClass psiClass) -->Line_16 $$ final VirtualFile file = psiClass.getContainingFile().getVirtualFile()[ FD ]
Line_9 $$ final Project project = value.getProject()-->Line_26 $$ final VirtualFile baseDir = project.getBaseDir()[ FD ]
Line_26 $$ final VirtualFile baseDir = project.getBaseDir()-->Line_27 $$ if (baseDir == null) [ FD ]
Line_25 $$ if (path.contains(PROJECT_ROOT_VARIABLE)) -->Line_30 $$ path = path.replace(PROJECT_ROOT_VARIABLE, baseDir.getPath())[ CD ]
Line_14 $$ if (path.contains(CONTENT_ROOT_VARIABLE)) -->Line_17 $$ if (file == null) [ CD ]
Line_14 $$ if (path.contains(CONTENT_ROOT_VARIABLE)) -->Line_21 $$ if (contentRoot == null)[ CD ]
Line_12 $$ if (constantValue instanceof String) -->Line_32 $$ return path[ CD ]
Line_2 $$ public static String getTestDataBasePath(@Nullable PsiClass psiClass) -->Line_5 $$ final PsiAnnotation annotation = AnnotationUtil.findAnnotationInHierarchy(psiClass, Collections.singleton(TEST_DATA_PATH_ANNOTATION_QUALIFIED_NAME))[ FD ]
Line_7 $$ final PsiAnnotationMemberValue value = annotation.findAttributeValue(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME)-->Line_8 $$ if (value instanceof PsiExpression) [ FD ]
Line_20 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(file)-->Line_21 $$ if (contentRoot == null)[ FD ]
Line_14 $$ if (path.contains(CONTENT_ROOT_VARIABLE)) -->Line_23 $$ path = path.replace(CONTENT_ROOT_VARIABLE, contentRoot.getPath())[ CD ]
Line_13 $$ String path = (String) constantValue-->Line_25 $$ if (path.contains(PROJECT_ROOT_VARIABLE)) [ FD ]
Line_27 $$ if (baseDir == null) -->Line_28 $$ return null[ CD ]
Line_13 $$ String path = (String) constantValue-->Line_14 $$ if (path.contains(CONTENT_ROOT_VARIABLE)) [ FD ]
Line_9 $$ final Project project = value.getProject()-->Line_15 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
Line_23 $$ path = path.replace(CONTENT_ROOT_VARIABLE, contentRoot.getPath())-->Line_25 $$ if (path.contains(PROJECT_ROOT_VARIABLE)) [ FD ]
Line_9 $$ final Project project = value.getProject()-->Line_10 $$ final PsiConstantEvaluationHelper evaluationHelper = JavaPsiFacade.getInstance(project).getConstantEvaluationHelper()[ FD ]
Line_12 $$ if (constantValue instanceof String) -->Line_14 $$ if (path.contains(CONTENT_ROOT_VARIABLE)) [ CD ]
Line_16 $$ final VirtualFile file = psiClass.getContainingFile().getVirtualFile()-->Line_20 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(file)[ FD ]
Line_15 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_20 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(file)[ FD ]
Line_20 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(file)-->Line_23 $$ path = path.replace(CONTENT_ROOT_VARIABLE, contentRoot.getPath())[ FD ]
Line_16 $$ final VirtualFile file = psiClass.getContainingFile().getVirtualFile()-->Line_17 $$ if (file == null) [ FD ]
Line_2 $$ public static String getTestDataBasePath(@Nullable PsiClass psiClass) -->Line_36 $$ return null[ CD ]
Line_6 $$ if (annotation != null) -->Line_7 $$ final PsiAnnotationMemberValue value = annotation.findAttributeValue(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME)[ CD ]
Line_13 $$ String path = (String) constantValue-->Line_30 $$ path = path.replace(PROJECT_ROOT_VARIABLE, baseDir.getPath())[ FD ]
Line_7 $$ final PsiAnnotationMemberValue value = annotation.findAttributeValue(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME)-->Line_9 $$ final Project project = value.getProject()[ FD ]
Line_3 $$ if (psiClass == null)-->Line_4 $$ return null[ CD ]
Line_5 $$ final PsiAnnotation annotation = AnnotationUtil.findAnnotationInHierarchy(psiClass, Collections.singleton(TEST_DATA_PATH_ANNOTATION_QUALIFIED_NAME))-->Line_6 $$ if (annotation != null) [ FD ]
Line_13 $$ String path = (String) constantValue-->Line_23 $$ path = path.replace(CONTENT_ROOT_VARIABLE, contentRoot.getPath())[ FD ]
Line_8 $$ if (value instanceof PsiExpression) -->Line_9 $$ final Project project = value.getProject()[ CD ]
Line_17 $$ if (file == null) -->Line_18 $$ return null[ CD ]
Line_25 $$ if (path.contains(PROJECT_ROOT_VARIABLE)) -->Line_27 $$ if (baseDir == null) [ CD ]
Line_2 $$ public static String getTestDataBasePath(@Nullable PsiClass psiClass) -->Line_6 $$ if (annotation != null) [ CD ]
Line_2 $$ public static String getTestDataBasePath(@Nullable PsiClass psiClass) -->Line_3 $$ if (psiClass == null)[ FD ]
Line_2 $$ public static String getTestDataBasePath(@Nullable PsiClass psiClass) -->Line_3 $$ if (psiClass == null)[ CD ]
Line_23 $$ path = path.replace(CONTENT_ROOT_VARIABLE, contentRoot.getPath())-->Line_30 $$ path = path.replace(PROJECT_ROOT_VARIABLE, baseDir.getPath())[ FD ]
Line_2 $$ public static String getTestDataBasePath(@Nullable PsiClass psiClass) -->Line_5 $$ final PsiAnnotation annotation = AnnotationUtil.findAnnotationInHierarchy(psiClass, Collections.singleton(TEST_DATA_PATH_ANNOTATION_QUALIFIED_NAME))[ CD ]
Line_8 $$ if (value instanceof PsiExpression) -->Line_12 $$ if (constantValue instanceof String) [ CD ]
Line_10 $$ final PsiConstantEvaluationHelper evaluationHelper = JavaPsiFacade.getInstance(project).getConstantEvaluationHelper()-->Line_11 $$ final Object constantValue = evaluationHelper.computeConstantExpression(value, false)[ FD ]
Line_11 $$ final Object constantValue = evaluationHelper.computeConstantExpression(value, false)-->Line_12 $$ if (constantValue instanceof String) [ FD ]
Line_21 $$ if (contentRoot == null)-->Line_22 $$ return null[ CD ]
Line_7 $$ final PsiAnnotationMemberValue value = annotation.findAttributeValue(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME)-->Line_11 $$ final Object constantValue = evaluationHelper.computeConstantExpression(value, false)[ FD ]
Line_5 $$ final PsiAnnotation annotation = AnnotationUtil.findAnnotationInHierarchy(psiClass, Collections.singleton(TEST_DATA_PATH_ANNOTATION_QUALIFIED_NAME))-->Line_7 $$ final PsiAnnotationMemberValue value = annotation.findAttributeValue(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME)[ FD ]
