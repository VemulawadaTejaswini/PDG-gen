Line_11 $$ for (String key : keys) -->Line_13 $$ if (key.contains("/.sass-cache/") && instruction.matches(key)) [ FD ]
Line_13 $$ if (key.contains("/.sass-cache/") && instruction.matches(key)) -->Line_18 $$ if (resource == null) [ CD ]
Line_2 $$ public boolean analyzeJar(Analyzer analyzer) throws Exception -->Line_10 $$ Set<String> keys = new HashSet<String>(resources.keySet())[ CD ]
Line_13 $$ if (key.contains("/.sass-cache/") && instruction.matches(key)) -->Line_21 $$ jar.putResource(key.replace("/.sass-cache/", "/"), resource, true)[ CD ]
Line_4 $$ if (parameters.isEmpty()) -->Line_5 $$ return false[ CD ]
Line_11 $$ for (String key : keys) -->Line_17 $$ Resource resource = jar.remove(key)[ FD ]
Line_2 $$ public boolean analyzeJar(Analyzer analyzer) throws Exception -->Line_3 $$ Parameters parameters = OSGiHeader.parseHeader(analyzer.getProperty("-sass"))[ CD ]
Line_9 $$ Map<String, Resource> resources = jar.getResources()-->Line_10 $$ Set<String> keys = new HashSet<String>(resources.keySet())[ FD ]
Line_2 $$ public boolean analyzeJar(Analyzer analyzer) throws Exception -->Line_25 $$ return false[ CD ]
Line_2 $$ public boolean analyzeJar(Analyzer analyzer) throws Exception -->Line_9 $$ Map<String, Resource> resources = jar.getResources()[ CD ]
Line_13 $$ if (key.contains("/.sass-cache/") && instruction.matches(key)) -->Line_17 $$ Resource resource = jar.remove(key)[ CD ]
Line_17 $$ Resource resource = jar.remove(key)-->Line_18 $$ if (resource == null) [ FD ]
Line_8 $$ Jar jar = analyzer.getJar()-->Line_17 $$ Resource resource = jar.remove(key)[ FD ]
Line_2 $$ public boolean analyzeJar(Analyzer analyzer) throws Exception -->Line_8 $$ Jar jar = analyzer.getJar()[ FD ]
Line_8 $$ Jar jar = analyzer.getJar()-->Line_9 $$ Map<String, Resource> resources = jar.getResources()[ FD ]
Line_12 $$ for (Instruction instruction : instructions.keySet()) -->Line_13 $$ if (key.contains("/.sass-cache/") && instruction.matches(key)) [ FD ]
Line_2 $$ public boolean analyzeJar(Analyzer analyzer) throws Exception -->Line_3 $$ Parameters parameters = OSGiHeader.parseHeader(analyzer.getProperty("-sass"))[ FD ]
Line_8 $$ Jar jar = analyzer.getJar()-->Line_21 $$ jar.putResource(key.replace("/.sass-cache/", "/"), resource, true)[ FD ]
Line_3 $$ Parameters parameters = OSGiHeader.parseHeader(analyzer.getProperty("-sass"))-->Line_4 $$ if (parameters.isEmpty()) [ FD ]
Line_12 $$ for (Instruction instruction : instructions.keySet()) -->Line_14 $$ if (instruction.isNegated()) [ FD ]
Line_7 $$ Instructions instructions = new Instructions(parameters)-->Line_12 $$ for (Instruction instruction : instructions.keySet()) [ FD ]
Line_11 $$ for (String key : keys) -->Line_21 $$ jar.putResource(key.replace("/.sass-cache/", "/"), resource, true)[ FD ]
Line_2 $$ public boolean analyzeJar(Analyzer analyzer) throws Exception -->Line_8 $$ Jar jar = analyzer.getJar()[ CD ]
Line_2 $$ public boolean analyzeJar(Analyzer analyzer) throws Exception -->Line_4 $$ if (parameters.isEmpty()) [ CD ]
Line_17 $$ Resource resource = jar.remove(key)-->Line_21 $$ jar.putResource(key.replace("/.sass-cache/", "/"), resource, true)[ FD ]
Line_2 $$ public boolean analyzeJar(Analyzer analyzer) throws Exception -->Line_7 $$ Instructions instructions = new Instructions(parameters)[ CD ]
Line_13 $$ if (key.contains("/.sass-cache/") && instruction.matches(key)) -->Line_14 $$ if (instruction.isNegated()) [ CD ]
