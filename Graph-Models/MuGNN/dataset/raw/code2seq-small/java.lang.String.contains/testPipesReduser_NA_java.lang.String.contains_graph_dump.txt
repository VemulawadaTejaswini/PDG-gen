Line_10 $$ PipesReducer<BooleanWritable, Text, IntWritable, Text> reducer = new PipesReducer<BooleanWritable, Text, IntWritable, Text>()-->Line_11 $$ reducer.configure(conf)[ FD ]
Line_12 $$ BooleanWritable bw = new BooleanWritable(true)-->Line_22 $$ reducer.reduce(bw, texts.iterator(), output, reporter)[ FD ]
Line_31 $$ for (File file : psw) -->Line_32 $$ file.deleteOnExit()[ FD ]
Line_24 $$ String stdOut = readStdOut(conf)-->Line_25 $$ assertTrue(stdOut.contains("reducer key :true"))[ FD ]
Line_24 $$ String stdOut = readStdOut(conf)-->Line_28 $$ assertTrue(stdOut.contains("reduce value  :third"))[ FD ]
Line_18 $$ List<Text> texts = new ArrayList<Text>()-->Line_19 $$ texts.add(new Text("first"))[ FD ]
Line_4 $$ JobConf conf = new JobConf()-->Line_11 $$ reducer.configure(conf)[ FD ]
Line_18 $$ List<Text> texts = new ArrayList<Text>()-->Line_22 $$ reducer.reduce(bw, texts.iterator(), output, reporter)[ FD ]
Line_24 $$ String stdOut = readStdOut(conf)-->Line_27 $$ assertTrue(stdOut.contains("reduce value  :second"))[ FD ]
Line_10 $$ PipesReducer<BooleanWritable, Text, IntWritable, Text> reducer = new PipesReducer<BooleanWritable, Text, IntWritable, Text>()-->Line_22 $$ reducer.reduce(bw, texts.iterator(), output, reporter)[ FD ]
Line_4 $$ JobConf conf = new JobConf()-->Line_9 $$ conf.set(MRJobConfig.CACHE_LOCALFILES, fCommand.getAbsolutePath())[ FD ]
Line_24 $$ String stdOut = readStdOut(conf)-->Line_26 $$ assertTrue(stdOut.contains("reduce value  :first"))[ FD ]
Line_2 $$ public void testPipesReduser() throws Exception -->Line_3 $$ File[] psw = cleanTokenPasswordFile()[ CD ]
Line_10 $$ PipesReducer<BooleanWritable, Text, IntWritable, Text> reducer = new PipesReducer<BooleanWritable, Text, IntWritable, Text>()-->Line_23 $$ reducer.close()[ FD ]
Line_4 $$ JobConf conf = new JobConf()-->Line_24 $$ String stdOut = readStdOut(conf)[ FD ]
Line_4 $$ JobConf conf = new JobConf()-->Line_15 $$ conf.setBoolean(MRJobConfig.SKIP_RECORDS, true)[ FD ]
Line_2 $$ public void testPipesReduser() throws Exception -->Line_4 $$ JobConf conf = new JobConf()[ CD ]
Line_4 $$ JobConf conf = new JobConf()-->Line_14 $$ initStdOut(conf)[ FD ]
Line_17 $$ Reporter reporter = new TestTaskReporter()-->Line_22 $$ reducer.reduce(bw, texts.iterator(), output, reporter)[ FD ]
Line_16 $$ CombineOutputCollector<IntWritable, Text> output = new CombineOutputCollector<IntWritable, Text>(new Counters.Counter(), new Progress())-->Line_22 $$ reducer.reduce(bw, texts.iterator(), output, reporter)[ FD ]
Line_4 $$ JobConf conf = new JobConf()-->Line_13 $$ conf.set(MRJobConfig.TASK_ATTEMPT_ID, taskName)[ FD ]
Line_4 $$ JobConf conf = new JobConf()-->Line_7 $$ TokenCache.setJobToken(token, conf.getCredentials())[ FD ]
Line_3 $$ File[] psw = cleanTokenPasswordFile()-->Line_30 $$ if (psw != null) [ FD ]
Line_18 $$ List<Text> texts = new ArrayList<Text>()-->Line_20 $$ texts.add(new Text("second"))[ FD ]
Line_6 $$ Token<AMRMTokenIdentifier> token = new Token<AMRMTokenIdentifier>("user".getBytes(), "password".getBytes(), new Text("kind"), new Text("service"))-->Line_7 $$ TokenCache.setJobToken(token, conf.getCredentials())[ FD ]
Line_8 $$ File fCommand = getFileCommand("org.apache.hadoop.mapred.pipes.PipeReducerStub")-->Line_9 $$ conf.set(MRJobConfig.CACHE_LOCALFILES, fCommand.getAbsolutePath())[ FD ]
Line_18 $$ List<Text> texts = new ArrayList<Text>()-->Line_21 $$ texts.add(new Text("third"))[ FD ]
