Line_5 $$ Integer sqlTypeToUse = null-->Line_43 $$ sqlTypeToUse = Types.VARCHAR[ FD ]
Line_7 $$ String jdbcDriverName = null-->Line_34 $$ jdbcDriverName = dbmd.getDriverName()[ FD ]
Line_34 $$ jdbcDriverName = dbmd.getDriverName()-->Line_40 $$ if (databaseProductName.startsWith("Informix") || (jdbcDriverName.startsWith("Microsoft") && jdbcDriverName.contains("SQL Server"))) [ FD ]
Line_12 $$ jdbcDriverName = dbmd.getDriverName()-->Line_40 $$ if (databaseProductName.startsWith("Informix") || (jdbcDriverName.startsWith("Microsoft") && jdbcDriverName.contains("SQL Server"))) [ FD ]
Line_2 $$ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException -->Line_57 $$ ps.setNull(paramIndex, sqlType)[ FD ]
Line_2 $$ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException -->Line_20 $$ sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex)[ FD ]
Line_40 $$ if (databaseProductName.startsWith("Informix") || (jdbcDriverName.startsWith("Microsoft") && jdbcDriverName.contains("SQL Server"))) -->Line_42 $$ if (databaseProductName.startsWith("DB2") || jdbcDriverName.startsWith("jConnect") || jdbcDriverName.startsWith("SQLServer") || jdbcDriverName.startsWith("Apache Derby")) [ CD ]
Line_31 $$ dbmd = ps.getConnection().getMetaData()-->Line_34 $$ jdbcDriverName = dbmd.getDriverName()[ FD ]
Line_3 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) -->Line_6 $$ DatabaseMetaData dbmd = null[ CD ]
Line_54 $$ if (typeName != null) -->Line_55 $$ ps.setNull(paramIndex, sqlType, typeName)[ CD ]
Line_2 $$ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException -->Line_3 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) [ CD ]
Line_43 $$ sqlTypeToUse = Types.VARCHAR-->Line_52 $$ ps.setNull(paramIndex, sqlTypeToUse)[ FD ]
Line_54 $$ if (typeName != null) -->Line_57 $$ ps.setNull(paramIndex, sqlType)[ CD ]
Line_7 $$ String jdbcDriverName = null-->Line_33 $$ if (jdbcDriverName == null) [ FD ]
Line_6 $$ DatabaseMetaData dbmd = null-->Line_31 $$ dbmd = ps.getConnection().getMetaData()[ FD ]
Line_12 $$ jdbcDriverName = dbmd.getDriverName()-->Line_37 $$ driversWithNoSupportForGetParameterType.add(jdbcDriverName)[ FD ]
Line_11 $$ dbmd = ps.getConnection().getMetaData()-->Line_39 $$ String databaseProductName = dbmd.getDatabaseProductName()[ FD ]
Line_33 $$ if (jdbcDriverName == null) -->Line_34 $$ jdbcDriverName = dbmd.getDriverName()[ CD ]
Line_6 $$ DatabaseMetaData dbmd = null-->Line_34 $$ jdbcDriverName = dbmd.getDriverName()[ FD ]
Line_11 $$ dbmd = ps.getConnection().getMetaData()-->Line_12 $$ jdbcDriverName = dbmd.getDriverName()[ FD ]
Line_12 $$ jdbcDriverName = dbmd.getDriverName()-->Line_13 $$ checkGetParameterType = !driversWithNoSupportForGetParameterType.contains(jdbcDriverName)[ FD ]
Line_20 $$ sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex)-->Line_28 $$ sqlTypeToUse = Types.NULL[ FD ]
Line_31 $$ dbmd = ps.getConnection().getMetaData()-->Line_39 $$ String databaseProductName = dbmd.getDatabaseProductName()[ FD ]
Line_34 $$ jdbcDriverName = dbmd.getDriverName()-->Line_37 $$ driversWithNoSupportForGetParameterType.add(jdbcDriverName)[ FD ]
Line_42 $$ if (databaseProductName.startsWith("DB2") || jdbcDriverName.startsWith("jConnect") || jdbcDriverName.startsWith("SQLServer") || jdbcDriverName.startsWith("Apache Derby")) -->Line_43 $$ sqlTypeToUse = Types.VARCHAR[ CD ]
Line_20 $$ sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex)-->Line_43 $$ sqlTypeToUse = Types.VARCHAR[ FD ]
Line_49 $$ if (useSetObject) -->Line_50 $$ ps.setObject(paramIndex, null)[ CD ]
Line_22 $$ if (logger.isDebugEnabled()) -->Line_23 $$ logger.debug("JDBC 3.0 getParameterType call not supported - using fallback method instead: " + ex)[ CD ]
Line_28 $$ sqlTypeToUse = Types.NULL-->Line_43 $$ sqlTypeToUse = Types.VARCHAR[ FD ]
Line_7 $$ String jdbcDriverName = null-->Line_13 $$ checkGetParameterType = !driversWithNoSupportForGetParameterType.contains(jdbcDriverName)[ FD ]
Line_27 $$ if (sqlTypeToUse == null) -->Line_28 $$ sqlTypeToUse = Types.NULL[ CD ]
Line_5 $$ Integer sqlTypeToUse = null-->Line_28 $$ sqlTypeToUse = Types.NULL[ FD ]
Line_7 $$ String jdbcDriverName = null-->Line_37 $$ driversWithNoSupportForGetParameterType.add(jdbcDriverName)[ FD ]
Line_12 $$ jdbcDriverName = dbmd.getDriverName()-->Line_33 $$ if (jdbcDriverName == null) [ FD ]
Line_6 $$ DatabaseMetaData dbmd = null-->Line_39 $$ String databaseProductName = dbmd.getDatabaseProductName()[ FD ]
Line_28 $$ sqlTypeToUse = Types.NULL-->Line_52 $$ ps.setNull(paramIndex, sqlTypeToUse)[ FD ]
Line_3 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) -->Line_5 $$ Integer sqlTypeToUse = null[ CD ]
Line_39 $$ String databaseProductName = dbmd.getDatabaseProductName()-->Line_40 $$ if (databaseProductName.startsWith("Informix") || (jdbcDriverName.startsWith("Microsoft") && jdbcDriverName.contains("SQL Server"))) [ FD ]
Line_5 $$ Integer sqlTypeToUse = null-->Line_52 $$ ps.setNull(paramIndex, sqlTypeToUse)[ FD ]
Line_3 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) -->Line_54 $$ if (typeName != null) [ CD ]
Line_30 $$ if (dbmd == null) -->Line_31 $$ dbmd = ps.getConnection().getMetaData()[ CD ]
Line_7 $$ String jdbcDriverName = null-->Line_40 $$ if (databaseProductName.startsWith("Informix") || (jdbcDriverName.startsWith("Microsoft") && jdbcDriverName.contains("SQL Server"))) [ FD ]
Line_12 $$ jdbcDriverName = dbmd.getDriverName()-->Line_42 $$ if (databaseProductName.startsWith("DB2") || jdbcDriverName.startsWith("jConnect") || jdbcDriverName.startsWith("SQLServer") || jdbcDriverName.startsWith("Apache Derby")) [ FD ]
Line_2 $$ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException -->Line_31 $$ dbmd = ps.getConnection().getMetaData()[ FD ]
Line_3 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) -->Line_49 $$ if (useSetObject) [ CD ]
Line_34 $$ jdbcDriverName = dbmd.getDriverName()-->Line_42 $$ if (databaseProductName.startsWith("DB2") || jdbcDriverName.startsWith("jConnect") || jdbcDriverName.startsWith("SQLServer") || jdbcDriverName.startsWith("Apache Derby")) [ FD ]
Line_2 $$ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException -->Line_54 $$ if (typeName != null) [ FD ]
Line_6 $$ DatabaseMetaData dbmd = null-->Line_12 $$ jdbcDriverName = dbmd.getDriverName()[ FD ]
Line_20 $$ sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex)-->Line_52 $$ ps.setNull(paramIndex, sqlTypeToUse)[ FD ]
Line_49 $$ if (useSetObject) -->Line_52 $$ ps.setNull(paramIndex, sqlTypeToUse)[ CD ]
Line_2 $$ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException -->Line_52 $$ ps.setNull(paramIndex, sqlTypeToUse)[ FD ]
Line_2 $$ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException -->Line_11 $$ dbmd = ps.getConnection().getMetaData()[ FD ]
Line_3 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) -->Line_8 $$ boolean checkGetParameterType = !shouldIgnoreGetParameterType[ CD ]
Line_5 $$ Integer sqlTypeToUse = null-->Line_27 $$ if (sqlTypeToUse == null) [ FD ]
Line_2 $$ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException -->Line_50 $$ ps.setObject(paramIndex, null)[ FD ]
Line_3 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) -->Line_7 $$ String jdbcDriverName = null[ CD ]
Line_36 $$ if (checkGetParameterType) -->Line_37 $$ driversWithNoSupportForGetParameterType.add(jdbcDriverName)[ CD ]
Line_40 $$ if (databaseProductName.startsWith("Informix") || (jdbcDriverName.startsWith("Microsoft") && jdbcDriverName.contains("SQL Server"))) -->Line_41 $$ useSetObject = true[ CD ]
Line_5 $$ Integer sqlTypeToUse = null-->Line_20 $$ sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex)[ FD ]
Line_39 $$ String databaseProductName = dbmd.getDatabaseProductName()-->Line_42 $$ if (databaseProductName.startsWith("DB2") || jdbcDriverName.startsWith("jConnect") || jdbcDriverName.startsWith("SQLServer") || jdbcDriverName.startsWith("Apache Derby")) [ FD ]
Line_11 $$ dbmd = ps.getConnection().getMetaData()-->Line_34 $$ jdbcDriverName = dbmd.getDriverName()[ FD ]
Line_6 $$ DatabaseMetaData dbmd = null-->Line_30 $$ if (dbmd == null) [ FD ]
Line_7 $$ String jdbcDriverName = null-->Line_42 $$ if (databaseProductName.startsWith("DB2") || jdbcDriverName.startsWith("jConnect") || jdbcDriverName.startsWith("SQLServer") || jdbcDriverName.startsWith("Apache Derby")) [ FD ]
Line_6 $$ DatabaseMetaData dbmd = null-->Line_11 $$ dbmd = ps.getConnection().getMetaData()[ FD ]
Line_3 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) -->Line_18 $$ if (checkGetParameterType) [ CD ]
Line_11 $$ dbmd = ps.getConnection().getMetaData()-->Line_31 $$ dbmd = ps.getConnection().getMetaData()[ FD ]
Line_8 $$ boolean checkGetParameterType = !shouldIgnoreGetParameterType-->Line_9 $$ if (checkGetParameterType && !driversWithNoSupportForGetParameterType.isEmpty()) [ FD ]
Line_7 $$ String jdbcDriverName = null-->Line_12 $$ jdbcDriverName = dbmd.getDriverName()[ FD ]
Line_11 $$ dbmd = ps.getConnection().getMetaData()-->Line_30 $$ if (dbmd == null) [ FD ]
Line_3 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) -->Line_4 $$ boolean useSetObject = false[ CD ]
Line_12 $$ jdbcDriverName = dbmd.getDriverName()-->Line_34 $$ jdbcDriverName = dbmd.getDriverName()[ FD ]
Line_4 $$ boolean useSetObject = false-->Line_41 $$ useSetObject = true[ FD ]
Line_3 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) -->Line_9 $$ if (checkGetParameterType && !driversWithNoSupportForGetParameterType.isEmpty()) [ CD ]
Line_20 $$ sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex)-->Line_27 $$ if (sqlTypeToUse == null) [ FD ]
Line_3 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) -->Line_27 $$ if (sqlTypeToUse == null) [ CD ]
Line_2 $$ private static void setNull(PreparedStatement ps, int paramIndex, int sqlType, String typeName) throws SQLException -->Line_55 $$ ps.setNull(paramIndex, sqlType, typeName)[ FD ]
Line_8 $$ boolean checkGetParameterType = !shouldIgnoreGetParameterType-->Line_13 $$ checkGetParameterType = !driversWithNoSupportForGetParameterType.contains(jdbcDriverName)[ FD ]
