Line_3 $$ MiniDFSCluster cluster = null-->Line_57 $$ cluster = null[ FD ]
Line_5 $$ FileContext fc-->Line_63 $$ assertTrue(fc.getFileLinkStatus(symlink).isSymlink())[ FD ]
Line_57 $$ cluster = null-->Line_60 $$ fs = (cluster.getFileSystem())[ FD ]
Line_2 $$ public void testSaveNamespace() throws IOException -->Line_3 $$ MiniDFSCluster cluster = null[ CD ]
Line_58 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build()-->Line_60 $$ fs = (cluster.getFileSystem())[ FD ]
Line_62 $$ fc = FileContext.getFileContext(cluster.getURI(0))-->Line_63 $$ assertTrue(fc.getFileLinkStatus(symlink).isSymlink())[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_27 $$ Collection<URI> editsDirs = cluster.getNameEditsDirs(0)[ FD ]
Line_60 $$ fs = (cluster.getFileSystem())-->Line_66 $$ fs.close()[ FD ]
Line_38 $$ final int EXPECTED_TXNS_FIRST_SEG = 13-->Line_53 $$ File savedImage = new File(imageDir, "current/" + NNStorage.getImageFileName(EXPECTED_TXNS_FIRST_SEG))[ FD ]
Line_10 $$ fs = (cluster.getFileSystem())-->Line_60 $$ fs = (cluster.getFileSystem())[ FD ]
Line_4 $$ DistributedFileSystem fs = null-->Line_60 $$ fs = (cluster.getFileSystem())[ FD ]
Line_13 $$ String[] args = new String[] -->Line_15 $$ admin.run(args)[ FD ]
Line_60 $$ fs = (cluster.getFileSystem())-->Line_61 $$ checkFile(fs, file, replication)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_60 $$ fs = (cluster.getFileSystem())[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_62 $$ fc = FileContext.getFileContext(cluster.getURI(0))[ FD ]
Line_65 $$ if (fs != null)-->Line_66 $$ fs.close()[ CD ]
Line_57 $$ cluster = null-->Line_62 $$ fc = FileContext.getFileContext(cluster.getURI(0))[ FD ]
Line_57 $$ cluster = null-->Line_67 $$ cleanup(cluster)[ FD ]
Line_24 $$ Path symlink = new Path("file.link")-->Line_26 $$ assertTrue(fc.getFileLinkStatus(symlink).isSymlink())[ FD ]
Line_28 $$ for (URI uri : editsDirs) -->Line_40 $$ File ed = new File(uri.getPath())[ FD ]
Line_11 $$ fc = FileContext.getFileContext(cluster.getURI(0))-->Line_63 $$ assertTrue(fc.getFileLinkStatus(symlink).isSymlink())[ FD ]
Line_13 $$ String[] args = new String[] -->Line_34 $$ admin.run(args)[ FD ]
Line_28 $$ for (URI uri : editsDirs) -->Line_52 $$ File imageDir = new File(uri.getPath())[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_9 $$ cluster.waitActive()[ FD ]
Line_58 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build()-->Line_59 $$ cluster.waitActive()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()[ FD ]
Line_21 $$ Path file = new Path("namespace.dat")-->Line_22 $$ DFSTestUtil.createFile(fs, file, fileSize, fileSize, blockSize, replication, seed)[ FD ]
Line_12 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_15 $$ admin.run(args)[ FD ]
Line_21 $$ Path file = new Path("namespace.dat")-->Line_23 $$ checkFile(fs, file, replication)[ FD ]
Line_43 $$ File originalEdits = new File(curDir, NNStorage.getInProgressEditsFileName(1))-->Line_44 $$ assertFalse(originalEdits.exists())[ FD ]
Line_10 $$ fs = (cluster.getFileSystem())-->Line_22 $$ DFSTestUtil.createFile(fs, file, fileSize, fileSize, blockSize, replication, seed)[ FD ]
Line_10 $$ fs = (cluster.getFileSystem())-->Line_23 $$ checkFile(fs, file, replication)[ FD ]
Line_4 $$ DistributedFileSystem fs = null-->Line_10 $$ fs = (cluster.getFileSystem())[ FD ]
Line_2 $$ public void testSaveNamespace() throws IOException -->Line_4 $$ DistributedFileSystem fs = null[ CD ]
Line_41 $$ File curDir = new File(ed, "current")-->Line_42 $$ LOG.info("Files in " + curDir + ":\n  " + Joiner.on("\n  ").join(curDir.list()))[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_58 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build()[ FD ]
Line_21 $$ Path file = new Path("namespace.dat")-->Line_25 $$ fc.createSymlink(file, symlink, false)[ FD ]
Line_5 $$ FileContext fc-->Line_11 $$ fc = FileContext.getFileContext(cluster.getURI(0))[ FD ]
Line_38 $$ final int EXPECTED_TXNS_FIRST_SEG = 13-->Line_45 $$ File finalizedEdits = new File(curDir, NNStorage.getFinalizedEditsFileName(1, EXPECTED_TXNS_FIRST_SEG))[ FD ]
Line_4 $$ DistributedFileSystem fs = null-->Line_32 $$ fs.setSafeMode(SafeModeAction.SAFEMODE_ENTER)[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_57 $$ cluster = null[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_68 $$ cluster = null[ FD ]
Line_28 $$ for (URI uri : editsDirs) -->Line_29 $$ File ed = new File(uri.getPath())[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_9 $$ cluster.waitActive()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_62 $$ fc = FileContext.getFileContext(cluster.getURI(0))[ FD ]
Line_53 $$ File savedImage = new File(imageDir, "current/" + NNStorage.getImageFileName(EXPECTED_TXNS_FIRST_SEG))-->Line_54 $$ assertTrue("Should have saved image at " + savedImage, savedImage.exists())[ FD ]
Line_57 $$ cluster = null-->Line_58 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_59 $$ cluster.waitActive()[ FD ]
Line_4 $$ DistributedFileSystem fs = null-->Line_61 $$ checkFile(fs, file, replication)[ FD ]
Line_4 $$ DistributedFileSystem fs = null-->Line_66 $$ fs.close()[ FD ]
Line_10 $$ fs = (cluster.getFileSystem())-->Line_32 $$ fs.setSafeMode(SafeModeAction.SAFEMODE_ENTER)[ FD ]
Line_10 $$ fs = (cluster.getFileSystem())-->Line_65 $$ if (fs != null)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_10 $$ fs = (cluster.getFileSystem())[ FD ]
Line_11 $$ fc = FileContext.getFileContext(cluster.getURI(0))-->Line_25 $$ fc.createSymlink(file, symlink, false)[ FD ]
Line_5 $$ FileContext fc-->Line_25 $$ fc.createSymlink(file, symlink, false)[ FD ]
Line_24 $$ Path symlink = new Path("file.link")-->Line_25 $$ fc.createSymlink(file, symlink, false)[ FD ]
Line_58 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build()-->Line_67 $$ cleanup(cluster)[ FD ]
Line_21 $$ Path file = new Path("namespace.dat")-->Line_61 $$ checkFile(fs, file, replication)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_50 $$ Collection<URI> imageDirs = cluster.getNameDirs(0)[ FD ]
Line_11 $$ fc = FileContext.getFileContext(cluster.getURI(0))-->Line_26 $$ assertTrue(fc.getFileLinkStatus(symlink).isSymlink())[ FD ]
Line_5 $$ FileContext fc-->Line_62 $$ fc = FileContext.getFileContext(cluster.getURI(0))[ FD ]
Line_4 $$ DistributedFileSystem fs = null-->Line_23 $$ checkFile(fs, file, replication)[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_10 $$ fs = (cluster.getFileSystem())[ FD ]
Line_45 $$ File finalizedEdits = new File(curDir, NNStorage.getFinalizedEditsFileName(1, EXPECTED_TXNS_FIRST_SEG))-->Line_47 $$ assertTrue(finalizedEdits.length() > Integer.SIZE / Byte.SIZE)[ FD ]
Line_2 $$ public void testSaveNamespace() throws IOException -->Line_5 $$ FileContext fc[ CD ]
Line_60 $$ fs = (cluster.getFileSystem())-->Line_65 $$ if (fs != null)[ FD ]
Line_5 $$ FileContext fc-->Line_26 $$ assertTrue(fc.getFileLinkStatus(symlink).isSymlink())[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_59 $$ cluster.waitActive()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_11 $$ fc = FileContext.getFileContext(cluster.getURI(0))[ FD ]
Line_24 $$ Path symlink = new Path("file.link")-->Line_63 $$ assertTrue(fc.getFileLinkStatus(symlink).isSymlink())[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_27 $$ Collection<URI> editsDirs = cluster.getNameEditsDirs(0)[ FD ]
Line_10 $$ fs = (cluster.getFileSystem())-->Line_61 $$ checkFile(fs, file, replication)[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_56 $$ cluster.shutdown()[ FD ]
Line_4 $$ DistributedFileSystem fs = null-->Line_65 $$ if (fs != null)[ FD ]
Line_57 $$ cluster = null-->Line_59 $$ cluster.waitActive()[ FD ]
Line_58 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build()-->Line_68 $$ cluster = null[ FD ]
Line_45 $$ File finalizedEdits = new File(curDir, NNStorage.getFinalizedEditsFileName(1, EXPECTED_TXNS_FIRST_SEG))-->Line_46 $$ GenericTestUtils.assertExists(finalizedEdits)[ FD ]
Line_57 $$ cluster = null-->Line_68 $$ cluster = null[ FD ]
Line_58 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build()-->Line_62 $$ fc = FileContext.getFileContext(cluster.getURI(0))[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_67 $$ cleanup(cluster)[ FD ]
Line_10 $$ fs = (cluster.getFileSystem())-->Line_66 $$ fs.close()[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_58 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build()[ FD ]
Line_11 $$ fc = FileContext.getFileContext(cluster.getURI(0))-->Line_62 $$ fc = FileContext.getFileContext(cluster.getURI(0))[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_67 $$ cleanup(cluster)[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_50 $$ Collection<URI> imageDirs = cluster.getNameDirs(0)[ FD ]
Line_12 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_34 $$ admin.run(args)[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_68 $$ cluster = null[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_11 $$ fc = FileContext.getFileContext(cluster.getURI(0))[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_56 $$ cluster.shutdown()[ FD ]
Line_4 $$ DistributedFileSystem fs = null-->Line_22 $$ DFSTestUtil.createFile(fs, file, fileSize, fileSize, blockSize, replication, seed)[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(true).build()-->Line_60 $$ fs = (cluster.getFileSystem())[ FD ]
