Line_33 $$ Exception parseException = parser.getParseException()-->Line_34 $$ Assert.assertNull("Caught an expected exception " + parseException, parseException)[ FD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_40 $$ final List<String> originalDiagnostics = job.getDiagnostics()[ FD ]
Line_41 $$ final String historyError = jobInfo.getErrorInfo()-->Line_45 $$ assertTrue(historyError.contains(diagString))[ FD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_11 $$ JobId jobId = job.getID()[ FD ]
Line_31 $$ jobInfo = parser.parse()-->Line_41 $$ final String historyError = jobInfo.getErrorInfo()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setClass(NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class)[ FD ]
Line_30 $$ parser = new JobHistoryParser(in)-->Line_31 $$ jobInfo = parser.parse()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_15 $$ jobHistory.init(conf)[ FD ]
Line_17 $$ JobHistoryParser parser-->Line_30 $$ parser = new JobHistoryParser(in)[ FD ]
Line_18 $$ JobInfo jobInfo-->Line_41 $$ final String historyError = jobInfo.getErrorInfo()[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistoryWithFailedTask(2, 1, true, this.getClass().getName(), true)-->Line_13 $$ app.waitForState(Service.STATE.STOPPED)[ FD ]
Line_2 $$ public void testCountersForFailedTask() throws Exception -->Line_3 $$ LOG.info("STARTING testCountersForFailedTask")[ CD ]
Line_20 $$ Path historyFilePath = fileInfo.getHistoryFile()-->Line_25 $$ in = fc.open(fc.makeQualified(historyFilePath))[ FD ]
Line_35 $$ for (Map.Entry<TaskID, TaskInfo> entry : jobInfo.getAllTasks().entrySet()) -->Line_36 $$ TaskId yarnTaskID = TypeConverter.toYarn(entry.getKey())[ FD ]
Line_24 $$ fc = FileContext.getFileContext(conf)-->Line_25 $$ in = fc.open(fc.makeQualified(historyFilePath))[ FD ]
Line_35 $$ for (Map.Entry<TaskID, TaskInfo> entry : jobInfo.getAllTasks().entrySet()) -->Line_37 $$ CompletedTask ct = new CompletedTask(yarnTaskID, entry.getValue())[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_9 $$ app.submit(conf)[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistoryWithFailedTask(2, 1, true, this.getClass().getName(), true)-->Line_12 $$ app.waitForState(job, JobState.FAILED)[ FD ]
Line_37 $$ CompletedTask ct = new CompletedTask(yarnTaskID, entry.getValue())-->Line_38 $$ Assert.assertNotNull("completed task report has null counters", ct.getReport().getCounters())[ FD ]
Line_44 $$ for (String diagString : originalDiagnostics) -->Line_45 $$ assertTrue(historyError.contains(diagString))[ FD ]
Line_41 $$ final String historyError = jobInfo.getErrorInfo()-->Line_43 $$ assertNotNull("No history error info for a failed job ", historyError)[ FD ]
Line_18 $$ JobInfo jobInfo-->Line_35 $$ for (Map.Entry<TaskID, TaskInfo> entry : jobInfo.getAllTasks().entrySet()) [ FD ]
Line_16 $$ HistoryFileInfo fileInfo = jobHistory.getJobFileInfo(jobId)-->Line_20 $$ Path historyFilePath = fileInfo.getHistoryFile()[ FD ]
Line_11 $$ JobId jobId = job.getID()-->Line_16 $$ HistoryFileInfo fileInfo = jobHistory.getJobFileInfo(jobId)[ FD ]
Line_31 $$ jobInfo = parser.parse()-->Line_35 $$ for (Map.Entry<TaskID, TaskInfo> entry : jobInfo.getAllTasks().entrySet()) [ FD ]
Line_40 $$ final List<String> originalDiagnostics = job.getDiagnostics()-->Line_42 $$ assertTrue("No original diagnostics for a failed job", originalDiagnostics != null && !originalDiagnostics.isEmpty())[ FD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_12 $$ app.waitForState(job, JobState.FAILED)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ RackResolver.init(conf)[ FD ]
Line_21 $$ FSDataInputStream in = null-->Line_25 $$ in = fc.open(fc.makeQualified(historyFilePath))[ FD ]
Line_22 $$ FileContext fc = null-->Line_24 $$ fc = FileContext.getFileContext(conf)[ FD ]
Line_22 $$ FileContext fc = null-->Line_25 $$ in = fc.open(fc.makeQualified(historyFilePath))[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistoryWithFailedTask(2, 1, true, this.getClass().getName(), true)-->Line_9 $$ app.submit(conf)[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistoryWithFailedTask(2, 1, true, this.getClass().getName(), true)-->Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ FD ]
Line_17 $$ JobHistoryParser parser-->Line_31 $$ jobInfo = parser.parse()[ FD ]
Line_18 $$ JobInfo jobInfo-->Line_31 $$ jobInfo = parser.parse()[ FD ]
Line_17 $$ JobHistoryParser parser-->Line_33 $$ Exception parseException = parser.getParseException()[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_15 $$ jobHistory.init(conf)[ FD ]
Line_30 $$ parser = new JobHistoryParser(in)-->Line_33 $$ Exception parseException = parser.getParseException()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_24 $$ fc = FileContext.getFileContext(conf)[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_16 $$ HistoryFileInfo fileInfo = jobHistory.getJobFileInfo(jobId)[ FD ]
