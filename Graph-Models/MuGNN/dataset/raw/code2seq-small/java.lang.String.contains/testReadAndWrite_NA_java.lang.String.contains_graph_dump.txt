Line_2 $$ public void testReadAndWrite() throws Exception -->Line_12 $$ assertEquals(data.length, r.read(buffer))[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_52 $$ assertEquals(15, r.read(data, 0, 15))[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_53 $$ assertTrue(new String(data).contains("Hellodddddddddd"))[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_47 $$ assertEquals(r.read(), -1)[ CD ]
Line_38 $$ ByteBuffer fileContent = ByteBufferUtil.read(r, (int) w.length())-->Line_39 $$ assertEquals(fileContent.limit(), w.length())[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_44 $$ assert r.bytesRemaining() == 0 && r.isEOF()[ FD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_50 $$ r.seek(0)[ FD ]
Line_5 $$ byte[] data = "Hello".getBytes()-->Line_41 $$ data = new byte[bigData.length][ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_47 $$ assertEquals(r.read(), -1)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_35 $$ assertTrue(Arrays.equals(bigData, data))[ CD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_21 $$ assertEquals(w.position(), initialPosition + bigData.length)[ FD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_36 $$ assertTrue(r.bytesRemaining() == 0 && r.isEOF())[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_51 $$ data = new byte[20][ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_38 $$ ByteBuffer fileContent = ByteBufferUtil.read(r, (int) w.length())[ CD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_50 $$ r.seek(0)[ FD ]
Line_18 $$ for (int i = 0; i < bigData.length; i++) bigData[i] = 'd'-->Line_28 $$ for (int i = 0; i < data.length; i++) [ FD ]
Line_17 $$ byte[] bigData = new byte[RandomAccessReader.DEFAULT_BUFFER_SIZE + 10]-->Line_20 $$ w.write(bigData)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_59 $$ channel.close()[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_19 $$ long initialPosition = w.position()[ CD ]
Line_46 $$ data = new byte[10]-->Line_51 $$ data = new byte[20][ FD ]
Line_41 $$ data = new byte[bigData.length]-->Line_45 $$ assertTrue(Arrays.equals(bigData, data))[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_20 $$ w.write(bigData)[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_8 $$ assertEquals(data.length, w.position())[ CD ]
Line_5 $$ byte[] data = "Hello".getBytes()-->Line_35 $$ assertTrue(Arrays.equals(bigData, data))[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_18 $$ for (int i = 0; i < bigData.length; i++) bigData[i] = 'd'[ CD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_34 $$ assertEquals(r.length(), initialPosition + bigData.length)[ FD ]
Line_26 $$ data = new byte[bigData.length]-->Line_45 $$ assertTrue(Arrays.equals(bigData, data))[ FD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_9 $$ w.sync()[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_14 $$ assertEquals(r.read(), -1)[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_41 $$ data = new byte[bigData.length][ CD ]
Line_28 $$ for (int i = 0; i < data.length; i++) -->Line_30 $$ sizeRead++[ CD ]
Line_38 $$ ByteBuffer fileContent = ByteBufferUtil.read(r, (int) w.length())-->Line_40 $$ assert ByteBufferUtil.string(fileContent).equals("Hello" + new String(bigData))[ FD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_44 $$ assert r.bytesRemaining() == 0 && r.isEOF()[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_7 $$ assertEquals(data.length, w.length())[ CD ]
Line_26 $$ data = new byte[bigData.length]-->Line_48 $$ assertEquals(r.read(data), -1)[ FD ]
Line_41 $$ data = new byte[bigData.length]-->Line_52 $$ assertEquals(15, r.read(data, 0, 15))[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_33 $$ assertEquals(r.getFilePointer(), initialPosition + data.length)[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_34 $$ assertEquals(r.length(), initialPosition + bigData.length)[ CD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_19 $$ long initialPosition = w.position()[ FD ]
Line_5 $$ byte[] data = "Hello".getBytes()-->Line_6 $$ w.write(data)[ FD ]
Line_17 $$ byte[] bigData = new byte[RandomAccessReader.DEFAULT_BUFFER_SIZE + 10]-->Line_35 $$ assertTrue(Arrays.equals(bigData, data))[ FD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_22 $$ assertEquals(w.length(), initialPosition + bigData.length)[ FD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_58 $$ r.close()[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_32 $$ assertEquals(sizeRead, data.length)[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_28 $$ for (int i = 0; i < data.length; i++) [ CD ]
Line_5 $$ byte[] data = "Hello".getBytes()-->Line_26 $$ data = new byte[bigData.length][ FD ]
Line_26 $$ data = new byte[bigData.length]-->Line_35 $$ assertTrue(Arrays.equals(bigData, data))[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_37 $$ r.seek(0)[ FD ]
Line_11 $$ byte[] buffer = new byte[data.length]-->Line_12 $$ assertEquals(data.length, r.read(buffer))[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_6 $$ w.write(data)[ CD ]
Line_5 $$ byte[] data = "Hello".getBytes()-->Line_43 $$ r.readFully(data)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_13 $$ assertTrue(Arrays.equals(buffer, data))[ CD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_48 $$ assertEquals(r.read(data), -1)[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_24 $$ r = RandomAccessReader.open(channel)[ FD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_57 $$ w.finish()[ FD ]
Line_11 $$ byte[] buffer = new byte[data.length]-->Line_13 $$ assertTrue(Arrays.equals(buffer, data))[ FD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_47 $$ assertEquals(r.read(), -1)[ FD ]
Line_4 $$ ChannelProxy channel = new ChannelProxy(w.getPath())-->Line_24 $$ r = RandomAccessReader.open(channel)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_36 $$ assertTrue(r.bytesRemaining() == 0 && r.isEOF())[ CD ]
Line_4 $$ ChannelProxy channel = new ChannelProxy(w.getPath())-->Line_59 $$ channel.close()[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_34 $$ assertEquals(r.length(), initialPosition + bigData.length)[ FD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_43 $$ r.readFully(data)[ FD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_52 $$ assertEquals(15, r.read(data, 0, 15))[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_54 $$ for (int i = 16; i < data.length; i++) [ CD ]
Line_26 $$ data = new byte[bigData.length]-->Line_43 $$ r.readFully(data)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_4 $$ ChannelProxy channel = new ChannelProxy(w.getPath())[ CD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_42 $$ r.seek(initialPosition)[ FD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_37 $$ r.seek(0)[ FD ]
Line_5 $$ byte[] data = "Hello".getBytes()-->Line_13 $$ assertTrue(Arrays.equals(buffer, data))[ FD ]
Line_26 $$ data = new byte[bigData.length]-->Line_46 $$ data = new byte[10][ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_17 $$ byte[] bigData = new byte[RandomAccessReader.DEFAULT_BUFFER_SIZE + 10][ CD ]
Line_5 $$ byte[] data = "Hello".getBytes()-->Line_45 $$ assertTrue(Arrays.equals(bigData, data))[ FD ]
Line_28 $$ for (int i = 0; i < data.length; i++) -->Line_29 $$ data[i] = (byte) r.read()[ CD ]
Line_18 $$ for (int i = 0; i < bigData.length; i++) bigData[i] = 'd'-->Line_54 $$ for (int i = 16; i < data.length; i++) [ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_16 $$ r.close()[ CD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_42 $$ r.seek(initialPosition)[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_29 $$ data[i] = (byte) r.read()[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_43 $$ r.readFully(data)[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_14 $$ assertEquals(r.read(), -1)[ FD ]
Line_41 $$ data = new byte[bigData.length]-->Line_46 $$ data = new byte[10][ FD ]
Line_41 $$ data = new byte[bigData.length]-->Line_49 $$ assertEquals(r.read(data, 0, data.length), -1)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_11 $$ byte[] buffer = new byte[data.length][ CD ]
Line_4 $$ ChannelProxy channel = new ChannelProxy(w.getPath())-->Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_49 $$ assertEquals(r.read(data, 0, data.length), -1)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_26 $$ data = new byte[bigData.length][ CD ]
Line_41 $$ data = new byte[bigData.length]-->Line_51 $$ data = new byte[20][ FD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_7 $$ assertEquals(data.length, w.length())[ FD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_6 $$ w.write(data)[ FD ]
Line_26 $$ data = new byte[bigData.length]-->Line_49 $$ assertEquals(r.read(data, 0, data.length), -1)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_23 $$ w.sync()[ CD ]
Line_41 $$ data = new byte[bigData.length]-->Line_43 $$ r.readFully(data)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_27 $$ long sizeRead = 0[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_9 $$ w.sync()[ CD ]
Line_46 $$ data = new byte[10]-->Line_49 $$ assertEquals(r.read(data, 0, data.length), -1)[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_58 $$ r.close()[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_12 $$ assertEquals(data.length, r.read(buffer))[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_15 $$ assert r.bytesRemaining() == 0 && r.isEOF()[ FD ]
Line_5 $$ byte[] data = "Hello".getBytes()-->Line_48 $$ assertEquals(r.read(data), -1)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_3 $$ SequentialWriter w = createTempFile("braf")[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_49 $$ assertEquals(r.read(data, 0, data.length), -1)[ CD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_48 $$ assertEquals(r.read(data), -1)[ FD ]
Line_41 $$ data = new byte[bigData.length]-->Line_48 $$ assertEquals(r.read(data), -1)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_24 $$ r = RandomAccessReader.open(channel)[ CD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_38 $$ ByteBuffer fileContent = ByteBufferUtil.read(r, (int) w.length())[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_36 $$ assertTrue(r.bytesRemaining() == 0 && r.isEOF())[ FD ]
Line_27 $$ long sizeRead = 0-->Line_32 $$ assertEquals(sizeRead, data.length)[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_25 $$ r.seek(initialPosition)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_39 $$ assertEquals(fileContent.limit(), w.length())[ CD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_16 $$ r.close()[ FD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_38 $$ ByteBuffer fileContent = ByteBufferUtil.read(r, (int) w.length())[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_21 $$ assertEquals(w.position(), initialPosition + bigData.length)[ CD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_8 $$ assertEquals(data.length, w.position())[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_48 $$ assertEquals(r.read(data), -1)[ CD ]
Line_46 $$ data = new byte[10]-->Line_48 $$ assertEquals(r.read(data), -1)[ FD ]
Line_5 $$ byte[] data = "Hello".getBytes()-->Line_49 $$ assertEquals(r.read(data, 0, data.length), -1)[ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_52 $$ assertEquals(15, r.read(data, 0, 15))[ FD ]
Line_5 $$ byte[] data = "Hello".getBytes()-->Line_52 $$ assertEquals(15, r.read(data, 0, 15))[ FD ]
Line_26 $$ data = new byte[bigData.length]-->Line_51 $$ data = new byte[20][ FD ]
Line_5 $$ byte[] data = "Hello".getBytes()-->Line_46 $$ data = new byte[10][ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_58 $$ r.close()[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)[ CD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_4 $$ ChannelProxy channel = new ChannelProxy(w.getPath())[ FD ]
Line_19 $$ long initialPosition = w.position()-->Line_42 $$ r.seek(initialPosition)[ FD ]
Line_27 $$ long sizeRead = 0-->Line_30 $$ sizeRead++[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_50 $$ r.seek(0)[ CD ]
Line_19 $$ long initialPosition = w.position()-->Line_25 $$ r.seek(initialPosition)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_43 $$ r.readFully(data)[ CD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_38 $$ ByteBuffer fileContent = ByteBufferUtil.read(r, (int) w.length())[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_45 $$ assertTrue(Arrays.equals(bigData, data))[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_37 $$ r.seek(0)[ CD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_33 $$ assertEquals(r.getFilePointer(), initialPosition + data.length)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_57 $$ w.finish()[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_25 $$ r.seek(initialPosition)[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_46 $$ data = new byte[10][ CD ]
Line_26 $$ data = new byte[bigData.length]-->Line_41 $$ data = new byte[bigData.length][ FD ]
Line_17 $$ byte[] bigData = new byte[RandomAccessReader.DEFAULT_BUFFER_SIZE + 10]-->Line_45 $$ assertTrue(Arrays.equals(bigData, data))[ FD ]
Line_26 $$ data = new byte[bigData.length]-->Line_52 $$ assertEquals(15, r.read(data, 0, 15))[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_22 $$ assertEquals(w.length(), initialPosition + bigData.length)[ CD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_49 $$ assertEquals(r.read(data, 0, data.length), -1)[ FD ]
Line_46 $$ data = new byte[10]-->Line_52 $$ assertEquals(15, r.read(data, 0, 15))[ FD ]
Line_28 $$ for (int i = 0; i < data.length; i++) -->Line_54 $$ for (int i = 16; i < data.length; i++) [ FD ]
Line_10 $$ RandomAccessReader r = RandomAccessReader.open(channel)-->Line_33 $$ assertEquals(r.getFilePointer(), initialPosition + data.length)[ FD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_5 $$ byte[] data = "Hello".getBytes()[ CD ]
Line_2 $$ public void testReadAndWrite() throws Exception -->Line_42 $$ r.seek(initialPosition)[ CD ]
Line_5 $$ byte[] data = "Hello".getBytes()-->Line_51 $$ data = new byte[20][ FD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_23 $$ w.sync()[ FD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_29 $$ data[i] = (byte) r.read()[ FD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_20 $$ w.write(bigData)[ FD ]
Line_24 $$ r = RandomAccessReader.open(channel)-->Line_25 $$ r.seek(initialPosition)[ FD ]
Line_3 $$ SequentialWriter w = createTempFile("braf")-->Line_39 $$ assertEquals(fileContent.limit(), w.length())[ FD ]
Line_51 $$ data = new byte[20]-->Line_52 $$ assertEquals(15, r.read(data, 0, 15))[ FD ]
