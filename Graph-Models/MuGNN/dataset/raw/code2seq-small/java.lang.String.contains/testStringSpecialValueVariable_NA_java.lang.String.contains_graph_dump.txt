Line_8 $$ String message-->Line_16 $$ assertThat(message + "should have contained ScriptException", message.contains("ScriptException"), equalTo(true))[ FD ]
Line_6 $$ SearchRequestBuilder req = client().prepareSearch().setIndices("test")-->Line_10 $$ SearchResponse rsp = req.get()[ FD ]
Line_2 $$ public void testStringSpecialValueVariable() throws Exception -->Line_3 $$ createIndex("test")[ CD ]
Line_12 $$ message = rsp.getShardFailures()[0].reason()-->Line_17 $$ assertThat(message + "should have contained text variable error", message.contains("text variable"), equalTo(true))[ FD ]
Line_2 $$ public void testStringSpecialValueVariable() throws Exception -->Line_5 $$ indexRandom(true, client().prepareIndex("test", "doc", "1").setSource("text", "hello"), client().prepareIndex("test", "doc", "2").setSource("text", "goodbye"), client().prepareIndex("test", "doc", "3").setSource("text", "hello"))[ CD ]
Line_12 $$ message = rsp.getShardFailures()[0].reason()-->Line_14 $$ message = e.toString()[ FD ]
Line_8 $$ String message-->Line_17 $$ assertThat(message + "should have contained text variable error", message.contains("text variable"), equalTo(true))[ FD ]
Line_10 $$ SearchResponse rsp = req.get()-->Line_12 $$ message = rsp.getShardFailures()[0].reason()[ FD ]
Line_2 $$ public void testStringSpecialValueVariable() throws Exception -->Line_6 $$ SearchRequestBuilder req = client().prepareSearch().setIndices("test")[ CD ]
Line_2 $$ public void testStringSpecialValueVariable() throws Exception -->Line_8 $$ String message[ CD ]
Line_14 $$ message = e.toString()-->Line_16 $$ assertThat(message + "should have contained ScriptException", message.contains("ScriptException"), equalTo(true))[ FD ]
Line_2 $$ public void testStringSpecialValueVariable() throws Exception -->Line_17 $$ assertThat(message + "should have contained text variable error", message.contains("text variable"), equalTo(true))[ CD ]
Line_10 $$ SearchResponse rsp = req.get()-->Line_11 $$ assertThat(rsp.getShardFailures().length, greaterThan(0))[ FD ]
Line_6 $$ SearchRequestBuilder req = client().prepareSearch().setIndices("test")-->Line_7 $$ req.setQuery(QueryBuilders.matchAllQuery()).addAggregation(AggregationBuilders.terms("term_agg").field("text").script(new Script("_value", ScriptType.INLINE, ExpressionScriptEngineService.NAME, null)))[ FD ]
Line_8 $$ String message-->Line_14 $$ message = e.toString()[ FD ]
Line_14 $$ message = e.toString()-->Line_17 $$ assertThat(message + "should have contained text variable error", message.contains("text variable"), equalTo(true))[ FD ]
Line_2 $$ public void testStringSpecialValueVariable() throws Exception -->Line_4 $$ ensureGreen("test")[ CD ]
Line_2 $$ public void testStringSpecialValueVariable() throws Exception -->Line_7 $$ req.setQuery(QueryBuilders.matchAllQuery()).addAggregation(AggregationBuilders.terms("term_agg").field("text").script(new Script("_value", ScriptType.INLINE, ExpressionScriptEngineService.NAME, null)))[ CD ]
Line_12 $$ message = rsp.getShardFailures()[0].reason()-->Line_16 $$ assertThat(message + "should have contained ScriptException", message.contains("ScriptException"), equalTo(true))[ FD ]
Line_8 $$ String message-->Line_12 $$ message = rsp.getShardFailures()[0].reason()[ FD ]
Line_2 $$ public void testStringSpecialValueVariable() throws Exception -->Line_16 $$ assertThat(message + "should have contained ScriptException", message.contains("ScriptException"), equalTo(true))[ CD ]
