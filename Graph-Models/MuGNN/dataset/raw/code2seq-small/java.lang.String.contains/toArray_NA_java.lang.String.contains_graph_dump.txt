Line_15 $$ String token = st.nextToken()-->Line_35 $$ list.add(token)[ FD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_6 $$ if (s.isEmpty())[ FD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_45 $$ return list[ CD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_11 $$ boolean first = true[ CD ]
Line_13 $$ int curPos = 0-->Line_16 $$ curPos += token.length()[ FD ]
Line_17 $$ if (separators.contains(token)) -->Line_25 $$ first = true[ CD ]
Line_34 $$ token = token.trim()-->Line_16 $$ curPos += token.length()[ FD ]
Line_34 $$ token = token.trim()-->Line_35 $$ list.add(token)[ FD ]
Line_10 $$ StringTokenizer st = new StringTokenizer(s, separators, true)-->Line_14 $$ while (st.hasMoreTokens()) [ FD ]
Line_25 $$ first = true-->Line_18 $$ if (!first) [ FD ]
Line_17 $$ if (separators.contains(token)) -->Line_36 $$ if (markers != null) [ CD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_21 $$ markers.add(Boolean.valueOf(preCount > 0))[ FD ]
Line_17 $$ if (separators.contains(token)) -->Line_33 $$ if (preCount == 0)[ CD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_8 $$ boolean p2nl = markers != null && mySettings.JD_P_AT_EMPTY_LINES[ CD ]
Line_11 $$ boolean first = true-->Line_25 $$ first = true[ FD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_27 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) [ FD ]
Line_15 $$ String token = st.nextToken()-->Line_17 $$ if (separators.contains(token)) [ FD ]
Line_9 $$ List<String> list = new ArrayList<String>()-->Line_19 $$ list.add("")[ FD ]
Line_12 $$ int preCount = 0-->Line_41 $$ preCount--[ FD ]
Line_34 $$ token = token.trim()-->Line_28 $$ list.add(isSelfClosedPTag(token) ? SELF_CLOSED_P_TAG : "")[ FD ]
Line_17 $$ if (separators.contains(token)) -->Line_35 $$ list.add(token)[ CD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_12 $$ int preCount = 0[ CD ]
Line_27 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) -->Line_28 $$ list.add(isSelfClosedPTag(token) ? SELF_CLOSED_P_TAG : "")[ CD ]
Line_9 $$ List<String> list = new ArrayList<String>()-->Line_28 $$ list.add(isSelfClosedPTag(token) ? SELF_CLOSED_P_TAG : "")[ FD ]
Line_12 $$ int preCount = 0-->Line_38 $$ preCount++[ FD ]
Line_13 $$ int curPos = 0-->Line_27 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) [ FD ]
Line_3 $$ if (s == null)-->Line_4 $$ return null[ CD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_39 $$ markers.add(Boolean.valueOf(preCount > 0))[ FD ]
Line_9 $$ List<String> list = new ArrayList<String>()-->Line_35 $$ list.add(token)[ FD ]
Line_34 $$ token = token.trim()-->Line_40 $$ if (token.contains(PRE_TAG_END))[ FD ]
Line_20 $$ if (markers != null)-->Line_21 $$ markers.add(Boolean.valueOf(preCount > 0))[ CD ]
Line_10 $$ StringTokenizer st = new StringTokenizer(s, separators, true)-->Line_15 $$ String token = st.nextToken()[ FD ]
Line_16 $$ curPos += token.length()-->Line_27 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) [ FD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_17 $$ if (separators.contains(token)) [ FD ]
Line_40 $$ if (token.contains(PRE_TAG_END))-->Line_41 $$ preCount--[ CD ]
Line_37 $$ if (token.contains(PRE_TAG_START))-->Line_38 $$ preCount++[ CD ]
Line_15 $$ String token = st.nextToken()-->Line_16 $$ curPos += token.length()[ FD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_20 $$ if (markers != null)[ FD ]
Line_34 $$ token = token.trim()-->Line_17 $$ if (separators.contains(token)) [ FD ]
Line_34 $$ token = token.trim()-->Line_27 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) [ FD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_3 $$ if (s == null)[ CD ]
Line_14 $$ while (st.hasMoreTokens()) -->Line_16 $$ curPos += token.length()[ CD ]
Line_15 $$ String token = st.nextToken()-->Line_37 $$ if (token.contains(PRE_TAG_START))[ FD ]
Line_36 $$ if (markers != null) -->Line_39 $$ markers.add(Boolean.valueOf(preCount > 0))[ CD ]
Line_11 $$ boolean first = true-->Line_23 $$ first = false[ FD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_3 $$ if (s == null)[ FD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_10 $$ StringTokenizer st = new StringTokenizer(s, separators, true)[ CD ]
Line_27 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) -->Line_29 $$ markers.add(Boolean.valueOf(preCount > 0))[ CD ]
Line_11 $$ boolean first = true-->Line_18 $$ if (!first) [ FD ]
Line_12 $$ int preCount = 0-->Line_33 $$ if (preCount == 0)[ FD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_5 $$ s = s.trim()[ CD ]
Line_36 $$ if (markers != null) -->Line_37 $$ if (token.contains(PRE_TAG_START))[ CD ]
Line_17 $$ if (separators.contains(token)) -->Line_18 $$ if (!first) [ CD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_5 $$ s = s.trim()[ FD ]
Line_23 $$ first = false-->Line_25 $$ first = true[ FD ]
Line_34 $$ token = token.trim()-->Line_37 $$ if (token.contains(PRE_TAG_START))[ FD ]
Line_6 $$ if (s.isEmpty())-->Line_7 $$ return null[ CD ]
Line_17 $$ if (separators.contains(token)) -->Line_23 $$ first = false[ CD ]
Line_33 $$ if (preCount == 0)-->Line_34 $$ token = token.trim()[ CD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_9 $$ List<String> list = new ArrayList<String>()[ CD ]
Line_14 $$ while (st.hasMoreTokens()) -->Line_15 $$ String token = st.nextToken()[ CD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_36 $$ if (markers != null) [ FD ]
Line_15 $$ String token = st.nextToken()-->Line_27 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) [ FD ]
Line_14 $$ while (st.hasMoreTokens()) -->Line_17 $$ if (separators.contains(token)) [ CD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_6 $$ if (s.isEmpty())[ CD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_29 $$ markers.add(Boolean.valueOf(preCount > 0))[ FD ]
Line_15 $$ String token = st.nextToken()-->Line_34 $$ token = token.trim()[ FD ]
Line_15 $$ String token = st.nextToken()-->Line_28 $$ list.add(isSelfClosedPTag(token) ? SELF_CLOSED_P_TAG : "")[ FD ]
Line_26 $$ if (p2nl) -->Line_27 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) [ CD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_13 $$ int curPos = 0[ CD ]
Line_36 $$ if (markers != null) -->Line_40 $$ if (token.contains(PRE_TAG_END))[ CD ]
Line_23 $$ first = false-->Line_18 $$ if (!first) [ FD ]
Line_18 $$ if (!first) -->Line_19 $$ list.add("")[ CD ]
Line_15 $$ String token = st.nextToken()-->Line_40 $$ if (token.contains(PRE_TAG_END))[ FD ]
Line_2 $$ private List<String> toArray(@Nullable String s, @NotNull String separators, @Nullable List<Boolean> markers) -->Line_14 $$ while (st.hasMoreTokens()) [ CD ]
Line_17 $$ if (separators.contains(token)) -->Line_26 $$ if (p2nl) [ CD ]
Line_18 $$ if (!first) -->Line_20 $$ if (markers != null)[ CD ]
