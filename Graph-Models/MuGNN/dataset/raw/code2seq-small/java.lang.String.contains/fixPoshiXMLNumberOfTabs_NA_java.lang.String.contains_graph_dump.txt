Line_12 $$ fixedQuoteStatement = StringUtil.replace(statement, quoteWithSlashMatcher.group(), "\"\"")-->Line_15 $$ Matcher openingTagMatcher = _poshiOpeningTagPattern.matcher(fixedQuoteStatement)[ FD ]
Line_37 $$ if (!replacement.equals(matcher.group(1))) -->Line_38 $$ String newStatement = StringUtil.replace(statement, matcher.group(1), replacement)[ CD ]
Line_9 $$ Matcher quoteWithSlashMatcher = _poshiQuoteWithSlashPattern.matcher(statement)-->Line_11 $$ if (quoteWithSlashMatcher.find()) [ FD ]
Line_5 $$ boolean ignoredCdataBlock = false-->Line_21 $$ ignoredCdataBlock = false[ FD ]
Line_8 $$ String statement = matcher.group()-->Line_9 $$ Matcher quoteWithSlashMatcher = _poshiQuoteWithSlashPattern.matcher(statement)[ FD ]
Line_12 $$ fixedQuoteStatement = StringUtil.replace(statement, quoteWithSlashMatcher.group(), "\"\"")-->Line_14 $$ Matcher closingTagMatcher = _poshiClosingTagPattern.matcher(fixedQuoteStatement)[ FD ]
Line_27 $$ if (statement.contains("<!--")) -->Line_28 $$ ignoredCommentBlock = true[ CD ]
Line_20 $$ if (statement.contains("]]>")) -->Line_22 $$ if (statement.contains("<![CDATA[")) [ CD ]
Line_21 $$ ignoredCdataBlock = false-->Line_30 $$ if (!ignoredCommentBlock && !ignoredCdataBlock) [ FD ]
Line_7 $$ while (matcher.find()) -->Line_8 $$ String statement = matcher.group()[ CD ]
Line_26 $$ ignoredCommentBlock = false-->Line_28 $$ ignoredCommentBlock = true[ FD ]
Line_3 $$ Matcher matcher = _poshiTabsPattern.matcher(content)-->Line_7 $$ while (matcher.find()) [ FD ]
Line_4 $$ int tabCount = 0-->Line_43 $$ tabCount++[ FD ]
Line_7 $$ while (matcher.find()) -->Line_16 $$ Matcher wholeTagMatcher = _poshiWholeTagPattern.matcher(fixedQuoteStatement)[ CD ]
Line_32 $$ for (int i = 0; i < tabCount; i++) -->Line_33 $$ sb.append(StringPool.TAB)[ CD ]
Line_31 $$ StringBundler sb = new StringBundler(tabCount + 1)-->Line_33 $$ sb.append(StringPool.TAB)[ FD ]
Line_2 $$ protected String fixPoshiXMLNumberOfTabs(String content) -->Line_4 $$ int tabCount = 0[ CD ]
Line_7 $$ while (matcher.find()) -->Line_11 $$ if (quoteWithSlashMatcher.find()) [ CD ]
Line_10 $$ String fixedQuoteStatement = statement-->Line_15 $$ Matcher openingTagMatcher = _poshiOpeningTagPattern.matcher(fixedQuoteStatement)[ FD ]
Line_9 $$ Matcher quoteWithSlashMatcher = _poshiQuoteWithSlashPattern.matcher(statement)-->Line_12 $$ fixedQuoteStatement = StringUtil.replace(statement, quoteWithSlashMatcher.group(), "\"\"")[ FD ]
Line_10 $$ String fixedQuoteStatement = statement-->Line_16 $$ Matcher wholeTagMatcher = _poshiWholeTagPattern.matcher(fixedQuoteStatement)[ FD ]
Line_8 $$ String statement = matcher.group()-->Line_20 $$ if (statement.contains("]]>")) [ FD ]
Line_8 $$ String statement = matcher.group()-->Line_22 $$ if (statement.contains("<![CDATA[")) [ FD ]
Line_28 $$ ignoredCommentBlock = true-->Line_30 $$ if (!ignoredCommentBlock && !ignoredCdataBlock) [ FD ]
Line_7 $$ while (matcher.find()) -->Line_10 $$ String fixedQuoteStatement = statement[ CD ]
Line_26 $$ ignoredCommentBlock = false-->Line_30 $$ if (!ignoredCommentBlock && !ignoredCdataBlock) [ FD ]
Line_23 $$ ignoredCdataBlock = true-->Line_30 $$ if (!ignoredCommentBlock && !ignoredCdataBlock) [ FD ]
Line_8 $$ String statement = matcher.group()-->Line_27 $$ if (statement.contains("<!--")) [ FD ]
Line_12 $$ fixedQuoteStatement = StringUtil.replace(statement, quoteWithSlashMatcher.group(), "\"\"")-->Line_16 $$ Matcher wholeTagMatcher = _poshiWholeTagPattern.matcher(fixedQuoteStatement)[ FD ]
Line_5 $$ boolean ignoredCdataBlock = false-->Line_23 $$ ignoredCdataBlock = true[ FD ]
Line_6 $$ boolean ignoredCommentBlock = false-->Line_28 $$ ignoredCommentBlock = true[ FD ]
Line_6 $$ boolean ignoredCommentBlock = false-->Line_30 $$ if (!ignoredCommentBlock && !ignoredCdataBlock) [ FD ]
Line_30 $$ if (!ignoredCommentBlock && !ignoredCdataBlock) -->Line_31 $$ StringBundler sb = new StringBundler(tabCount + 1)[ CD ]
Line_4 $$ int tabCount = 0-->Line_32 $$ for (int i = 0; i < tabCount; i++) [ FD ]
Line_8 $$ String statement = matcher.group()-->Line_38 $$ String newStatement = StringUtil.replace(statement, matcher.group(1), replacement)[ FD ]
Line_7 $$ while (matcher.find()) -->Line_14 $$ Matcher closingTagMatcher = _poshiClosingTagPattern.matcher(fixedQuoteStatement)[ CD ]
Line_8 $$ String statement = matcher.group()-->Line_39 $$ return StringUtil.replaceFirst(content, statement, newStatement, matcher.start())[ FD ]
Line_2 $$ protected String fixPoshiXMLNumberOfTabs(String content) -->Line_5 $$ boolean ignoredCdataBlock = false[ CD ]
Line_10 $$ String fixedQuoteStatement = statement-->Line_14 $$ Matcher closingTagMatcher = _poshiClosingTagPattern.matcher(fixedQuoteStatement)[ FD ]
Line_37 $$ if (!replacement.equals(matcher.group(1))) -->Line_39 $$ return StringUtil.replaceFirst(content, statement, newStatement, matcher.start())[ CD ]
Line_2 $$ protected String fixPoshiXMLNumberOfTabs(String content) -->Line_46 $$ return content[ CD ]
Line_30 $$ if (!ignoredCommentBlock && !ignoredCdataBlock) -->Line_35 $$ sb.append(StringPool.LESS_THAN)[ CD ]
Line_20 $$ if (statement.contains("]]>")) -->Line_21 $$ ignoredCdataBlock = false[ CD ]
Line_11 $$ if (quoteWithSlashMatcher.find()) -->Line_12 $$ fixedQuoteStatement = StringUtil.replace(statement, quoteWithSlashMatcher.group(), "\"\"")[ CD ]
Line_4 $$ int tabCount = 0-->Line_18 $$ tabCount--[ FD ]
Line_31 $$ StringBundler sb = new StringBundler(tabCount + 1)-->Line_36 $$ String replacement = sb.toString()[ FD ]
Line_31 $$ StringBundler sb = new StringBundler(tabCount + 1)-->Line_35 $$ sb.append(StringPool.LESS_THAN)[ FD ]
Line_30 $$ if (!ignoredCommentBlock && !ignoredCdataBlock) -->Line_32 $$ for (int i = 0; i < tabCount; i++) [ CD ]
Line_22 $$ if (statement.contains("<![CDATA[")) -->Line_23 $$ ignoredCdataBlock = true[ CD ]
Line_2 $$ protected String fixPoshiXMLNumberOfTabs(String content) -->Line_7 $$ while (matcher.find()) [ CD ]
Line_21 $$ ignoredCdataBlock = false-->Line_23 $$ ignoredCdataBlock = true[ FD ]
Line_2 $$ protected String fixPoshiXMLNumberOfTabs(String content) -->Line_39 $$ return StringUtil.replaceFirst(content, statement, newStatement, matcher.start())[ FD ]
Line_8 $$ String statement = matcher.group()-->Line_12 $$ fixedQuoteStatement = StringUtil.replace(statement, quoteWithSlashMatcher.group(), "\"\"")[ FD ]
Line_3 $$ Matcher matcher = _poshiTabsPattern.matcher(content)-->Line_39 $$ return StringUtil.replaceFirst(content, statement, newStatement, matcher.start())[ FD ]
Line_3 $$ Matcher matcher = _poshiTabsPattern.matcher(content)-->Line_37 $$ if (!replacement.equals(matcher.group(1))) [ FD ]
Line_7 $$ while (matcher.find()) -->Line_15 $$ Matcher openingTagMatcher = _poshiOpeningTagPattern.matcher(fixedQuoteStatement)[ CD ]
Line_3 $$ Matcher matcher = _poshiTabsPattern.matcher(content)-->Line_8 $$ String statement = matcher.group()[ FD ]
Line_10 $$ String fixedQuoteStatement = statement-->Line_12 $$ fixedQuoteStatement = StringUtil.replace(statement, quoteWithSlashMatcher.group(), "\"\"")[ FD ]
Line_7 $$ while (matcher.find()) -->Line_20 $$ if (statement.contains("]]>")) [ CD ]
Line_30 $$ if (!ignoredCommentBlock && !ignoredCdataBlock) -->Line_36 $$ String replacement = sb.toString()[ CD ]
Line_3 $$ Matcher matcher = _poshiTabsPattern.matcher(content)-->Line_38 $$ String newStatement = StringUtil.replace(statement, matcher.group(1), replacement)[ FD ]
Line_2 $$ protected String fixPoshiXMLNumberOfTabs(String content) -->Line_3 $$ Matcher matcher = _poshiTabsPattern.matcher(content)[ CD ]
Line_2 $$ protected String fixPoshiXMLNumberOfTabs(String content) -->Line_3 $$ Matcher matcher = _poshiTabsPattern.matcher(content)[ FD ]
Line_7 $$ while (matcher.find()) -->Line_30 $$ if (!ignoredCommentBlock && !ignoredCdataBlock) [ CD ]
Line_5 $$ boolean ignoredCdataBlock = false-->Line_30 $$ if (!ignoredCommentBlock && !ignoredCdataBlock) [ FD ]
Line_30 $$ if (!ignoredCommentBlock && !ignoredCdataBlock) -->Line_37 $$ if (!replacement.equals(matcher.group(1))) [ CD ]
Line_7 $$ while (matcher.find()) -->Line_9 $$ Matcher quoteWithSlashMatcher = _poshiQuoteWithSlashPattern.matcher(statement)[ CD ]
Line_2 $$ protected String fixPoshiXMLNumberOfTabs(String content) -->Line_6 $$ boolean ignoredCommentBlock = false[ CD ]
Line_6 $$ boolean ignoredCommentBlock = false-->Line_26 $$ ignoredCommentBlock = false[ FD ]
