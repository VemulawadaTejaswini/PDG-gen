Line_26 $$ if (mask.isEmpty()) -->Line_27 $$ return new ValidationInfo(FindBundle.message("find.filter.empty.file.mask.error"), myFileFilter)[ CD ]
Line_2 $$ private ValidationInfo getValidationInfo(@NotNull FindModel model) -->Line_25 $$ if (mask != null) [ CD ]
Line_24 $$ final String mask = getFileTypeMask()-->Line_33 $$ FindInProjectUtil.createFileMaskCondition(mask)[ FD ]
Line_2 $$ private ValidationInfo getValidationInfo(@NotNull FindModel model) -->Line_39 $$ return null[ CD ]
Line_2 $$ private ValidationInfo getValidationInfo(@NotNull FindModel model) -->Line_4 $$ VirtualFile directory = FindInProjectUtil.getDirectory(model)[ FD ]
Line_3 $$ if (myRbDirectory != null && myRbDirectory.isEnabled() && myRbDirectory.isSelected()) -->Line_4 $$ VirtualFile directory = FindInProjectUtil.getDirectory(model)[ CD ]
Line_2 $$ private ValidationInfo getValidationInfo(@NotNull FindModel model) -->Line_3 $$ if (myRbDirectory != null && myRbDirectory.isEnabled() && myRbDirectory.isSelected()) [ CD ]
Line_16 $$ Pattern pattern = Pattern.compile(toFind, isCaseSensitive ? Pattern.MULTILINE : Pattern.MULTILINE | Pattern.CASE_INSENSITIVE)-->Line_17 $$ if (pattern.matcher("").matches() && !toFind.endsWith("$") && !toFind.startsWith("^")) [ FD ]
Line_13 $$ String toFind = getStringToFind()-->Line_17 $$ if (pattern.matcher("").matches() && !toFind.endsWith("$") && !toFind.startsWith("^")) [ FD ]
Line_13 $$ String toFind = getStringToFind()-->Line_16 $$ Pattern pattern = Pattern.compile(toFind, isCaseSensitive ? Pattern.MULTILINE : Pattern.MULTILINE | Pattern.CASE_INSENSITIVE)[ FD ]
Line_24 $$ final String mask = getFileTypeMask()-->Line_25 $$ if (mask != null) [ FD ]
Line_2 $$ private ValidationInfo getValidationInfo(@NotNull FindModel model) -->Line_24 $$ final String mask = getFileTypeMask()[ CD ]
Line_4 $$ VirtualFile directory = FindInProjectUtil.getDirectory(model)-->Line_5 $$ if (directory == null) [ FD ]
Line_24 $$ final String mask = getFileTypeMask()-->Line_26 $$ if (mask.isEmpty()) [ FD ]
Line_5 $$ if (directory == null) -->Line_6 $$ return new ValidationInfo(FindBundle.message("find.directory.not.found.error", getDirectory()), myDirectoryComboBox)[ CD ]
Line_2 $$ private ValidationInfo getValidationInfo(@NotNull FindModel model) -->Line_9 $$ if (!canSearchThisString()) [ CD ]
Line_29 $$ if (mask.contains(";")) -->Line_30 $$ return new ValidationInfo("File masks should be comma-separated", myFileFilter)[ CD ]
Line_24 $$ final String mask = getFileTypeMask()-->Line_29 $$ if (mask.contains(";")) [ FD ]
Line_24 $$ final String mask = getFileTypeMask()-->Line_35 $$ return new ValidationInfo(FindBundle.message("find.filter.invalid.file.mask.error", mask), myFileFilter)[ FD ]
Line_12 $$ if (myCbRegularExpressions != null && myCbRegularExpressions.isSelected() && myCbRegularExpressions.isEnabled()) -->Line_13 $$ String toFind = getStringToFind()[ CD ]
Line_9 $$ if (!canSearchThisString()) -->Line_10 $$ return new ValidationInfo("String to find is empty", myInputComboBox)[ CD ]
Line_25 $$ if (mask != null) -->Line_29 $$ if (mask.contains(";")) [ CD ]
Line_3 $$ if (myRbDirectory != null && myRbDirectory.isEnabled() && myRbDirectory.isSelected()) -->Line_5 $$ if (directory == null) [ CD ]
Line_13 $$ String toFind = getStringToFind()-->Line_21 $$ return new ValidationInfo(FindBundle.message("find.invalid.regular.expression.error", toFind, e.getDescription()), myInputComboBox)[ FD ]
Line_25 $$ if (mask != null) -->Line_26 $$ if (mask.isEmpty()) [ CD ]
Line_2 $$ private ValidationInfo getValidationInfo(@NotNull FindModel model) -->Line_12 $$ if (myCbRegularExpressions != null && myCbRegularExpressions.isSelected() && myCbRegularExpressions.isEnabled()) [ CD ]
Line_17 $$ if (pattern.matcher("").matches() && !toFind.endsWith("$") && !toFind.startsWith("^")) -->Line_18 $$ return new ValidationInfo(FindBundle.message("find.empty.match.regular.expression.error"), myInputComboBox)[ CD ]
