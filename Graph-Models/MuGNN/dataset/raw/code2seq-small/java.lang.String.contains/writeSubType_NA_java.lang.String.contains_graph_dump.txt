Line_2 $$ public void writeSubType() throws Exception -->Line_8 $$ String result = outputMessage.getBodyAsString(Charset.forName("UTF-8"))[ CD ]
Line_2 $$ public void writeSubType() throws Exception -->Line_3 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()[ CD ]
Line_2 $$ public void writeSubType() throws Exception -->Line_10 $$ assertTrue(result.contains("\"number\":42"))[ CD ]
Line_4 $$ MyBean bean = new MyBean()-->Line_7 $$ this.converter.writeInternal(bean, MyInterface.class, outputMessage)[ FD ]
Line_3 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_8 $$ String result = outputMessage.getBodyAsString(Charset.forName("UTF-8"))[ FD ]
Line_4 $$ MyBean bean = new MyBean()-->Line_5 $$ bean.setString("Foo")[ FD ]
Line_2 $$ public void writeSubType() throws Exception -->Line_7 $$ this.converter.writeInternal(bean, MyInterface.class, outputMessage)[ CD ]
Line_2 $$ public void writeSubType() throws Exception -->Line_4 $$ MyBean bean = new MyBean()[ CD ]
Line_2 $$ public void writeSubType() throws Exception -->Line_9 $$ assertTrue(result.contains("\"string\":\"Foo\""))[ CD ]
Line_4 $$ MyBean bean = new MyBean()-->Line_6 $$ bean.setNumber(42)[ FD ]
Line_2 $$ public void writeSubType() throws Exception -->Line_5 $$ bean.setString("Foo")[ CD ]
Line_8 $$ String result = outputMessage.getBodyAsString(Charset.forName("UTF-8"))-->Line_9 $$ assertTrue(result.contains("\"string\":\"Foo\""))[ FD ]
Line_3 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_7 $$ this.converter.writeInternal(bean, MyInterface.class, outputMessage)[ FD ]
Line_8 $$ String result = outputMessage.getBodyAsString(Charset.forName("UTF-8"))-->Line_10 $$ assertTrue(result.contains("\"number\":42"))[ FD ]
Line_2 $$ public void writeSubType() throws Exception -->Line_6 $$ bean.setNumber(42)[ CD ]
