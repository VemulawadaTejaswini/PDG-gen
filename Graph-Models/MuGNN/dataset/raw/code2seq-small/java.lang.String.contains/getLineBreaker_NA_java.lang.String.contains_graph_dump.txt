Line_2 $$ protected String getLineBreaker(@NotNull PsiElement token) -->Line_12 $$ if (type == GroovyTokenTypes.mSTRING_LITERAL) [ CD ]
Line_12 $$ if (type == GroovyTokenTypes.mSTRING_LITERAL) -->Line_13 $$ return super.getLineBreaker(token).replace('"', '\'')[ CD ]
Line_2 $$ protected String getLineBreaker(@NotNull PsiElement token) -->Line_5 $$ if (text.contains("'''") || text.contains("\"\"\"")) [ CD ]
Line_2 $$ protected String getLineBreaker(@NotNull PsiElement token) -->Line_3 $$ PsiElement parent = GrStringUtil.findContainingLiteral(token)[ CD ]
Line_5 $$ if (text.contains("'''") || text.contains("\"\"\"")) -->Line_6 $$ return "\n"[ CD ]
Line_2 $$ protected String getLineBreaker(@NotNull PsiElement token) -->Line_8 $$ final IElementType type = token.getNode().getElementType()[ CD ]
Line_2 $$ protected String getLineBreaker(@NotNull PsiElement token) -->Line_8 $$ final IElementType type = token.getNode().getElementType()[ FD ]
Line_2 $$ protected String getLineBreaker(@NotNull PsiElement token) -->Line_4 $$ final String text = parent.getText()[ CD ]
Line_2 $$ protected String getLineBreaker(@NotNull PsiElement token) -->Line_9 $$ if (type == GroovyTokenTypes.mGSTRING_LITERAL || type == GroovyTokenTypes.mGSTRING_CONTENT) [ CD ]
Line_2 $$ protected String getLineBreaker(@NotNull PsiElement token) -->Line_3 $$ PsiElement parent = GrStringUtil.findContainingLiteral(token)[ FD ]
Line_2 $$ protected String getLineBreaker(@NotNull PsiElement token) -->Line_15 $$ return "\n"[ CD ]
Line_2 $$ protected String getLineBreaker(@NotNull PsiElement token) -->Line_10 $$ return super.getLineBreaker(token)[ FD ]
Line_3 $$ PsiElement parent = GrStringUtil.findContainingLiteral(token)-->Line_4 $$ final String text = parent.getText()[ FD ]
Line_2 $$ protected String getLineBreaker(@NotNull PsiElement token) -->Line_13 $$ return super.getLineBreaker(token).replace('"', '\'')[ FD ]
Line_8 $$ final IElementType type = token.getNode().getElementType()-->Line_12 $$ if (type == GroovyTokenTypes.mSTRING_LITERAL) [ FD ]
Line_9 $$ if (type == GroovyTokenTypes.mGSTRING_LITERAL || type == GroovyTokenTypes.mGSTRING_CONTENT) -->Line_10 $$ return super.getLineBreaker(token)[ CD ]
Line_4 $$ final String text = parent.getText()-->Line_5 $$ if (text.contains("'''") || text.contains("\"\"\"")) [ FD ]
