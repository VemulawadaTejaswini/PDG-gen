Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_4 $$ final Set<String> patterns = data.getPatterns()[ CD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_5 $$ if (patterns.isEmpty()) [ CD ]
Line_9 $$ for (String pattern : patterns) -->Line_10 $$ final String className = pattern.contains(",") ? StringUtil.getPackageName(pattern, ',') : pattern[ FD ]
Line_3 $$ final JUnitConfiguration.Data data = getConfiguration().getPersistentData()-->Line_4 $$ final Set<String> patterns = data.getPatterns()[ FD ]
Line_10 $$ final String className = pattern.contains(",") ? StringUtil.getPackageName(pattern, ',') : pattern-->Line_11 $$ final PsiClass psiClass = JavaExecutionUtil.findMainClass(getConfiguration().getProject(), className, searchScope)[ FD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_3 $$ final JUnitConfiguration.Data data = getConfiguration().getPersistentData()[ CD ]
Line_8 $$ final GlobalSearchScope searchScope = GlobalSearchScope.allScope(getConfiguration().getProject())-->Line_11 $$ final PsiClass psiClass = JavaExecutionUtil.findMainClass(getConfiguration().getProject(), className, searchScope)[ FD ]
Line_11 $$ final PsiClass psiClass = JavaExecutionUtil.findMainClass(getConfiguration().getProject(), className, searchScope)-->Line_12 $$ if (psiClass != null && !JUnitUtil.isTestClass(psiClass)) [ FD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_8 $$ final GlobalSearchScope searchScope = GlobalSearchScope.allScope(getConfiguration().getProject())[ CD ]
Line_4 $$ final Set<String> patterns = data.getPatterns()-->Line_5 $$ if (patterns.isEmpty()) [ FD ]
