Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_12 $$ if (!isVisible(type)) [ CD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_12 $$ if (!isVisible(type)) [ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_32 $$ if (types.contains(type.getErasedType())) [ CD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_8 $$ if (type.getQualifiedSourceName().contains("-")) [ CD ]
Line_23 $$ prop = context.getPropertyOracle().getConfigurationProperty("gdx.reflect.exclude")-->Line_24 $$ for (String s : prop.getValues()) keep &= !name.equals(s)[ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_37 $$ out(type.getErasedType().getQualifiedSourceName(), nesting)[ CD ]
Line_42 $$ JClassType c = (JClassType) type-->Line_50 $$ JClassType[] interfaces = c.getImplementedInterfaces()[ FD ]
Line_20 $$ keep |= !name.contains(".")-->Line_28 $$ if (!keep) [ FD ]
Line_19 $$ ConfigurationProperty prop-->Line_22 $$ for (String s : prop.getValues()) keep |= name.contains(s)[ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_38 $$ if (type instanceof JPrimitiveType) [ FD ]
Line_38 $$ if (type instanceof JPrimitiveType) -->Line_43 $$ JField[] fields = c.getFields()[ CD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_17 $$ String name = type.getQualifiedSourceName()[ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_4 $$ if (type == null) [ FD ]
Line_45 $$ for (JField field : fields) -->Line_46 $$ gatherTypes(field.getType().getErasedType(), types)[ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_46 $$ gatherTypes(field.getType().getErasedType(), types)[ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_28 $$ if (!keep) [ CD ]
Line_8 $$ if (type.getQualifiedSourceName().contains("-")) -->Line_10 $$ return[ CD ]
Line_32 $$ if (types.contains(type.getErasedType())) -->Line_34 $$ return[ CD ]
Line_19 $$ ConfigurationProperty prop-->Line_21 $$ prop = context.getPropertyOracle().getConfigurationProperty("gdx.reflect.include")[ FD ]
Line_19 $$ ConfigurationProperty prop-->Line_23 $$ prop = context.getPropertyOracle().getConfigurationProperty("gdx.reflect.exclude")[ FD ]
Line_38 $$ if (type instanceof JPrimitiveType) -->Line_50 $$ JClassType[] interfaces = c.getImplementedInterfaces()[ CD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_38 $$ if (type instanceof JPrimitiveType) [ CD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_70 $$ gatherTypes(i.getErasedType(), types)[ FD ]
Line_38 $$ if (type instanceof JPrimitiveType) -->Line_42 $$ JClassType c = (JClassType) type[ CD ]
Line_50 $$ JClassType[] interfaces = c.getImplementedInterfaces()-->Line_51 $$ if (interfaces != null) [ FD ]
Line_52 $$ for (JClassType i : interfaces) -->Line_70 $$ gatherTypes(i.getErasedType(), types)[ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_36 $$ types.add(type.getErasedType())[ FD ]
Line_28 $$ if (!keep) -->Line_30 $$ return[ CD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_16 $$ boolean keep = false[ CD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_59 $$ gatherTypes(m.getReturnType().getErasedType(), types)[ FD ]
Line_21 $$ prop = context.getPropertyOracle().getConfigurationProperty("gdx.reflect.include")-->Line_22 $$ for (String s : prop.getValues()) keep |= name.contains(s)[ FD ]
Line_38 $$ if (type instanceof JPrimitiveType) -->Line_40 $$ return[ CD ]
Line_38 $$ if (type instanceof JPrimitiveType) -->Line_49 $$ gatherTypes(c.getSuperclass(), types)[ CD ]
Line_42 $$ JClassType c = (JClassType) type-->Line_56 $$ JMethod[] methods = c.getMethods()[ FD ]
Line_16 $$ boolean keep = false-->Line_22 $$ keep |= name.contains(s)[ FD ]
Line_38 $$ if (type instanceof JPrimitiveType) -->Line_67 $$ JClassType[] inner = c.getNestedTypes()[ CD ]
Line_16 $$ boolean keep = false-->Line_28 $$ if (!keep) [ FD ]
Line_12 $$ if (!isVisible(type)) -->Line_14 $$ return[ CD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_53 $$ gatherTypes(i.getErasedType(), types)[ FD ]
Line_61 $$ for (JType p : m.getParameterTypes()) -->Line_62 $$ gatherTypes(p.getErasedType(), types)[ FD ]
Line_42 $$ JClassType c = (JClassType) type-->Line_49 $$ gatherTypes(c.getSuperclass(), types)[ FD ]
Line_19 $$ ConfigurationProperty prop-->Line_24 $$ for (String s : prop.getValues()) keep &= !name.equals(s)[ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_4 $$ if (type == null) [ CD ]
Line_58 $$ for (JMethod m : methods) -->Line_60 $$ if (m.getParameterTypes() != null) [ FD ]
Line_4 $$ if (type == null) -->Line_6 $$ return[ CD ]
Line_17 $$ String name = type.getQualifiedSourceName()-->Line_22 $$ keep |= name.contains(s)[ FD ]
Line_22 $$ for (String s : prop.getValues()) keep |= name.contains(s)-->Line_24 $$ keep &= !name.equals(s)[ FD ]
Line_42 $$ JClassType c = (JClassType) type-->Line_67 $$ JClassType[] inner = c.getNestedTypes()[ FD ]
Line_38 $$ if (type instanceof JPrimitiveType) -->Line_51 $$ if (interfaces != null) [ CD ]
Line_20 $$ keep |= !name.contains(".")-->Line_24 $$ keep &= !name.equals(s)[ FD ]
Line_67 $$ JClassType[] inner = c.getNestedTypes()-->Line_68 $$ if (inner != null) [ FD ]
Line_52 $$ for (JClassType i : interfaces) -->Line_53 $$ gatherTypes(i.getErasedType(), types)[ FD ]
Line_38 $$ if (type instanceof JPrimitiveType) -->Line_68 $$ if (inner != null) [ CD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_62 $$ gatherTypes(p.getErasedType(), types)[ FD ]
Line_17 $$ String name = type.getQualifiedSourceName()-->Line_24 $$ keep &= !name.equals(s)[ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_37 $$ out(type.getErasedType().getQualifiedSourceName(), nesting)[ FD ]
Line_58 $$ for (JMethod m : methods) -->Line_61 $$ for (JType p : m.getParameterTypes()) [ FD ]
Line_21 $$ prop = context.getPropertyOracle().getConfigurationProperty("gdx.reflect.include")-->Line_23 $$ prop = context.getPropertyOracle().getConfigurationProperty("gdx.reflect.exclude")[ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_17 $$ String name = type.getQualifiedSourceName()[ CD ]
Line_16 $$ boolean keep = false-->Line_24 $$ keep &= !name.equals(s)[ FD ]
Line_42 $$ JClassType c = (JClassType) type-->Line_43 $$ JField[] fields = c.getFields()[ FD ]
Line_21 $$ prop = context.getPropertyOracle().getConfigurationProperty("gdx.reflect.include")-->Line_24 $$ for (String s : prop.getValues()) keep &= !name.equals(s)[ FD ]
Line_22 $$ keep |= name.contains(s)-->Line_28 $$ if (!keep) [ FD ]
Line_58 $$ for (JMethod m : methods) -->Line_59 $$ gatherTypes(m.getReturnType().getErasedType(), types)[ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_32 $$ if (types.contains(type.getErasedType())) [ FD ]
Line_22 $$ keep |= name.contains(s)-->Line_24 $$ keep &= !name.equals(s)[ FD ]
Line_43 $$ JField[] fields = c.getFields()-->Line_44 $$ if (fields != null) [ FD ]
Line_20 $$ keep |= !name.contains(".")-->Line_22 $$ keep |= name.contains(s)[ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_49 $$ gatherTypes(c.getSuperclass(), types)[ FD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_36 $$ types.add(type.getErasedType())[ CD ]
Line_56 $$ JMethod[] methods = c.getMethods()-->Line_57 $$ if (methods != null) [ FD ]
Line_24 $$ keep &= !name.equals(s)-->Line_28 $$ if (!keep) [ FD ]
Line_38 $$ if (type instanceof JPrimitiveType) -->Line_56 $$ JMethod[] methods = c.getMethods()[ CD ]
Line_16 $$ boolean keep = false-->Line_20 $$ keep |= !name.contains(".")[ FD ]
Line_38 $$ if (type instanceof JPrimitiveType) -->Line_57 $$ if (methods != null) [ CD ]
Line_38 $$ if (type instanceof JPrimitiveType) -->Line_44 $$ if (fields != null) [ CD ]
Line_2 $$ private void gatherTypes(JType type, List<JType> types) -->Line_8 $$ if (type.getQualifiedSourceName().contains("-")) [ FD ]
Line_17 $$ String name = type.getQualifiedSourceName()-->Line_20 $$ keep |= !name.contains(".")[ FD ]
