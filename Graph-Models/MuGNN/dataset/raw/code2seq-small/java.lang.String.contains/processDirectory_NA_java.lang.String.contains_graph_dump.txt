Line_12 $$ if (file.extension().equals("java")) -->Line_27 $$ if (javaContent.contains(JNI_METHOD_MARKER)) [ CD ]
Line_12 $$ if (file.extension().equals("java")) -->Line_15 $$ if (includes != null && !matcher.match(file.path(), includes))[ CD ]
Line_27 $$ if (javaContent.contains(JNI_METHOD_MARKER)) -->Line_29 $$ if (javaSegments.size() == 0) [ CD ]
Line_2 $$ private void processDirectory(FileDescriptor dir) throws Exception -->Line_3 $$ FileDescriptor[] files = dir.list()[ FD ]
Line_21 $$ FileDescriptor cppFile = new FileDescriptor(jniDir + "/" + className + ".cpp")-->Line_22 $$ if (file.lastModified() < cppFile.lastModified()) [ FD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_23 $$ System.out.println("C/C++ for '" + file.path() + "' up to date")[ FD ]
Line_26 $$ String javaContent = file.readString()-->Line_28 $$ ArrayList<JavaSegment> javaSegments = javaMethodParser.parse(javaContent)[ FD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_26 $$ String javaContent = file.readString()[ FD ]
Line_5 $$ if (file.isDirectory()) -->Line_8 $$ if (excludes != null && matcher.match(file.path(), excludes))[ CD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_12 $$ if (file.extension().equals("java")) [ FD ]
Line_22 $$ if (file.lastModified() < cppFile.lastModified()) -->Line_23 $$ System.out.println("C/C++ for '" + file.path() + "' up to date")[ CD ]
Line_28 $$ ArrayList<JavaSegment> javaSegments = javaMethodParser.parse(javaContent)-->Line_29 $$ if (javaSegments.size() == 0) [ FD ]
Line_12 $$ if (file.extension().equals("java")) -->Line_19 $$ String className = getFullyQualifiedClassName(file)[ CD ]
Line_29 $$ if (javaSegments.size() == 0) -->Line_30 $$ System.out.println("Skipping '" + file + "', no JNI code found.")[ CD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_34 $$ generateHFile(file)[ FD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_10 $$ processDirectory(file)[ FD ]
Line_12 $$ if (file.extension().equals("java")) -->Line_26 $$ String javaContent = file.readString()[ CD ]
Line_5 $$ if (file.isDirectory()) -->Line_6 $$ if (file.path().contains(".svn"))[ CD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_17 $$ if (excludes != null && matcher.match(file.path(), excludes))[ FD ]
Line_26 $$ String javaContent = file.readString()-->Line_27 $$ if (javaContent.contains(JNI_METHOD_MARKER)) [ FD ]
Line_28 $$ ArrayList<JavaSegment> javaSegments = javaMethodParser.parse(javaContent)-->Line_35 $$ generateCppFile(javaSegments, hFile, cppFile)[ FD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_13 $$ if (file.name().contains("NativeCodeGenerator"))[ FD ]
Line_12 $$ if (file.extension().equals("java")) -->Line_13 $$ if (file.name().contains("NativeCodeGenerator"))[ CD ]
Line_27 $$ if (javaContent.contains(JNI_METHOD_MARKER)) -->Line_33 $$ System.out.print("Generating C/C++ for '" + file + "'...")[ CD ]
Line_5 $$ if (file.isDirectory()) -->Line_12 $$ if (file.extension().equals("java")) [ CD ]
Line_27 $$ if (javaContent.contains(JNI_METHOD_MARKER)) -->Line_34 $$ generateHFile(file)[ CD ]
Line_27 $$ if (javaContent.contains(JNI_METHOD_MARKER)) -->Line_35 $$ generateCppFile(javaSegments, hFile, cppFile)[ CD ]
Line_27 $$ if (javaContent.contains(JNI_METHOD_MARKER)) -->Line_36 $$ System.out.println("done")[ CD ]
Line_5 $$ if (file.isDirectory()) -->Line_10 $$ processDirectory(file)[ CD ]
Line_12 $$ if (file.extension().equals("java")) -->Line_22 $$ if (file.lastModified() < cppFile.lastModified()) [ CD ]
Line_20 $$ FileDescriptor hFile = new FileDescriptor(jniDir.path() + "/" + className + ".h")-->Line_35 $$ generateCppFile(javaSegments, hFile, cppFile)[ FD ]
Line_21 $$ FileDescriptor cppFile = new FileDescriptor(jniDir + "/" + className + ".cpp")-->Line_35 $$ generateCppFile(javaSegments, hFile, cppFile)[ FD ]
Line_2 $$ private void processDirectory(FileDescriptor dir) throws Exception -->Line_3 $$ FileDescriptor[] files = dir.list()[ CD ]
Line_12 $$ if (file.extension().equals("java")) -->Line_17 $$ if (excludes != null && matcher.match(file.path(), excludes))[ CD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_5 $$ if (file.isDirectory()) [ FD ]
Line_12 $$ if (file.extension().equals("java")) -->Line_20 $$ FileDescriptor hFile = new FileDescriptor(jniDir.path() + "/" + className + ".h")[ CD ]
Line_12 $$ if (file.extension().equals("java")) -->Line_21 $$ FileDescriptor cppFile = new FileDescriptor(jniDir + "/" + className + ".cpp")[ CD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_19 $$ String className = getFullyQualifiedClassName(file)[ FD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_6 $$ if (file.path().contains(".svn"))[ FD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_15 $$ if (includes != null && !matcher.match(file.path(), includes))[ FD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_8 $$ if (excludes != null && matcher.match(file.path(), excludes))[ FD ]
Line_27 $$ if (javaContent.contains(JNI_METHOD_MARKER)) -->Line_28 $$ ArrayList<JavaSegment> javaSegments = javaMethodParser.parse(javaContent)[ CD ]
Line_4 $$ for (FileDescriptor file : files) -->Line_22 $$ if (file.lastModified() < cppFile.lastModified()) [ FD ]
