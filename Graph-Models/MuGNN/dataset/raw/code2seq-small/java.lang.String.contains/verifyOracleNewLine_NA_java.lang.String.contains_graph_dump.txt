Line_2 $$ protected void verifyOracleNewLine() throws Exception -->Line_7 $$ boolean checkNewLine = false[ CD ]
Line_11 $$ if ((content != null) && content.contains("\\n")) -->Line_13 $$ for (int j = 0; j < articles.size(); j++) [ CD ]
Line_13 $$ for (int j = 0; j < articles.size(); j++) -->Line_15 $$ _journalArticleLocalService.checkNewLine(article.getGroupId(), article.getArticleId(), article.getVersion())[ CD ]
Line_12 $$ articles = _journalArticleLocalService.getArticles(DEFAULT_GROUP_ID)-->Line_13 $$ for (int j = 0; j < articles.size(); j++) [ FD ]
Line_21 $$ if (!checkNewLine) -->Line_22 $$ if (_log.isInfoEnabled()) [ CD ]
Line_2 $$ protected void verifyOracleNewLine() throws Exception -->Line_4 $$ if (db.getDBType() != DBType.ORACLE) [ CD ]
Line_11 $$ if ((content != null) && content.contains("\\n")) -->Line_12 $$ articles = _journalArticleLocalService.getArticles(DEFAULT_GROUP_ID)[ CD ]
Line_4 $$ if (db.getDBType() != DBType.ORACLE) -->Line_5 $$ return[ CD ]
Line_7 $$ boolean checkNewLine = false-->Line_17 $$ checkNewLine = true[ FD ]
Line_11 $$ if ((content != null) && content.contains("\\n")) -->Line_17 $$ checkNewLine = true[ CD ]
Line_13 $$ for (int j = 0; j < articles.size(); j++) -->Line_14 $$ article = articles.get(j)[ CD ]
Line_21 $$ if (!checkNewLine) -->Line_25 $$ return[ CD ]
Line_9 $$ for (JournalArticle article : articles) -->Line_15 $$ _journalArticleLocalService.checkNewLine(article.getGroupId(), article.getArticleId(), article.getVersion())[ FD ]
Line_2 $$ protected void verifyOracleNewLine() throws Exception -->Line_21 $$ if (!checkNewLine) [ CD ]
Line_7 $$ boolean checkNewLine = false-->Line_21 $$ if (!checkNewLine) [ FD ]
Line_9 $$ for (JournalArticle article : articles) -->Line_14 $$ article = articles.get(j)[ FD ]
Line_13 $$ for (int j = 0; j < articles.size(); j++) -->Line_14 $$ article = articles.get(j)[ FD ]
Line_2 $$ protected void verifyOracleNewLine() throws Exception -->Line_3 $$ DB db = DBManagerUtil.getDB()[ CD ]
Line_17 $$ checkNewLine = true-->Line_21 $$ if (!checkNewLine) [ FD ]
Line_9 $$ for (JournalArticle article : articles) -->Line_10 $$ String content = article.getContent()[ FD ]
Line_21 $$ if (!checkNewLine) -->Line_27 $$ if (_log.isInfoEnabled()) [ CD ]
Line_8 $$ List<JournalArticle> articles = _journalArticleLocalService.getArticles(DEFAULT_GROUP_ID, 0, NUM_OF_ARTICLES)-->Line_13 $$ for (int j = 0; j < articles.size(); j++) [ FD ]
Line_27 $$ if (_log.isInfoEnabled()) -->Line_28 $$ _log.info("Fix oracle new line")[ CD ]
Line_10 $$ String content = article.getContent()-->Line_11 $$ if ((content != null) && content.contains("\\n")) [ FD ]
Line_8 $$ List<JournalArticle> articles = _journalArticleLocalService.getArticles(DEFAULT_GROUP_ID, 0, NUM_OF_ARTICLES)-->Line_14 $$ article = articles.get(j)[ FD ]
Line_2 $$ protected void verifyOracleNewLine() throws Exception -->Line_8 $$ List<JournalArticle> articles = _journalArticleLocalService.getArticles(DEFAULT_GROUP_ID, 0, NUM_OF_ARTICLES)[ CD ]
Line_12 $$ articles = _journalArticleLocalService.getArticles(DEFAULT_GROUP_ID)-->Line_14 $$ article = articles.get(j)[ FD ]
Line_8 $$ List<JournalArticle> articles = _journalArticleLocalService.getArticles(DEFAULT_GROUP_ID, 0, NUM_OF_ARTICLES)-->Line_12 $$ articles = _journalArticleLocalService.getArticles(DEFAULT_GROUP_ID)[ FD ]
Line_3 $$ DB db = DBManagerUtil.getDB()-->Line_4 $$ if (db.getDBType() != DBType.ORACLE) [ FD ]
Line_22 $$ if (_log.isInfoEnabled()) -->Line_23 $$ _log.info("Do not fix oracle new line")[ CD ]
Line_14 $$ article = articles.get(j)-->Line_15 $$ _journalArticleLocalService.checkNewLine(article.getGroupId(), article.getArticleId(), article.getVersion())[ FD ]
