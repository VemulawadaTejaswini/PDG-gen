Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_9 $$ long maxCommittedUsage = 0[ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_33 $$ if (!event.timestamp.isBefore(operation.getStart())) [ FD ]
Line_52 $$ Matcher matcher = memoryPoolPattern.matcher(line)-->Line_61 $$ long usage = Long.parseLong(matcher.group(3))[ FD ]
Line_47 $$ while (true) -->Line_56 $$ String pool = matcher.group(1).trim()[ CD ]
Line_10 $$ long usageAtPreviousCollection = 0-->Line_27 $$ if (event.start < usageAtPreviousCollection) [ FD ]
Line_37 $$ maxCommittedUsage = Math.max(maxCommittedUsage, event.committed)-->Line_73 $$ maxCommittedUsage = Math.max(maxCommittedUsage, finalCommittedHeap)[ FD ]
Line_62 $$ finalHeapUsage += usage-->Line_71 $$ totalHeapUsage += finalHeapUsage - usageAtPreviousCollection[ FD ]
Line_13 $$ while (true) -->Line_27 $$ if (event.start < usageAtPreviousCollection) [ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_5 $$ Pattern memoryPoolPattern = Pattern.compile("([\\w\\s]+) total (\\d+)K, used (\\d+)K \\[.+")[ CD ]
Line_14 $$ String line = reader.readLine()-->Line_49 $$ if (line == null) [ FD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_75 $$ operation.setTotalHeapUsage(DataAmount.kbytes(BigDecimal.valueOf(totalHeapUsage)))[ FD ]
Line_4 $$ GCEventParser eventParser = new GCEventParser(decimalSeparator)-->Line_22 $$ GCEventParser.GCEvent event = eventParser.parseLine(line)[ FD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_78 $$ operation.setMaxCommittedHeap(DataAmount.kbytes(BigDecimal.valueOf(maxCommittedUsage)))[ FD ]
Line_6 $$ long totalHeapUsage = 0-->Line_71 $$ totalHeapUsage += finalHeapUsage - usageAtPreviousCollection[ FD ]
Line_22 $$ GCEventParser.GCEvent event = eventParser.parseLine(line)-->Line_23 $$ if (event == GCEventParser.GCEvent.IGNORED) [ FD ]
Line_9 $$ long maxCommittedUsage = 0-->Line_37 $$ maxCommittedUsage = Math.max(maxCommittedUsage, event.committed)[ FD ]
Line_46 $$ if (processHeapUsageSummary) -->Line_73 $$ maxCommittedUsage = Math.max(maxCommittedUsage, finalCommittedHeap)[ CD ]
Line_34 $$ totalHeapUsage += event.start - usageAtPreviousCollection-->Line_71 $$ totalHeapUsage += finalHeapUsage - usageAtPreviousCollection[ FD ]
Line_39 $$ usageAtPreviousCollection = event.end-->Line_34 $$ totalHeapUsage += event.start - usageAtPreviousCollection[ FD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_3 $$ char decimalSeparator = (new DecimalFormatSymbols(locale)).getDecimalSeparator()[ CD ]
Line_60 $$ long committed = Long.parseLong(matcher.group(2))-->Line_63 $$ finalCommittedHeap += committed[ FD ]
Line_14 $$ String line = reader.readLine()-->Line_15 $$ if (line == null) [ FD ]
Line_13 $$ while (true) -->Line_18 $$ if (line.equals("Heap")) [ CD ]
Line_47 $$ while (true) -->Line_62 $$ finalHeapUsage += usage[ CD ]
Line_10 $$ long usageAtPreviousCollection = 0-->Line_34 $$ totalHeapUsage += event.start - usageAtPreviousCollection[ FD ]
Line_52 $$ Matcher matcher = memoryPoolPattern.matcher(line)-->Line_53 $$ if (!matcher.lookingAt()) [ FD ]
Line_12 $$ boolean processHeapUsageSummary = false-->Line_19 $$ processHeapUsageSummary = true[ FD ]
Line_48 $$ String line = reader.readLine()-->Line_52 $$ Matcher matcher = memoryPoolPattern.matcher(line)[ FD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_77 $$ operation.setMaxUncollectedHeap(DataAmount.kbytes(BigDecimal.valueOf(maxUncollectedUsage)))[ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_11 $$ int events = 0[ CD ]
Line_45 $$ long finalCommittedHeap = 0-->Line_63 $$ finalCommittedHeap += committed[ FD ]
Line_6 $$ long totalHeapUsage = 0-->Line_34 $$ totalHeapUsage += event.start - usageAtPreviousCollection[ FD ]
Line_35 $$ maxUsage = Math.max(maxUsage, event.start)-->Line_76 $$ operation.setMaxHeapUsage(DataAmount.kbytes(BigDecimal.valueOf(maxUsage)))[ FD ]
Line_62 $$ finalHeapUsage += usage-->Line_72 $$ maxUsage = Math.max(maxUsage, finalHeapUsage)[ FD ]
Line_47 $$ while (true) -->Line_52 $$ Matcher matcher = memoryPoolPattern.matcher(line)[ CD ]
Line_13 $$ while (true) -->Line_23 $$ if (event == GCEventParser.GCEvent.IGNORED) [ CD ]
Line_9 $$ long maxCommittedUsage = 0-->Line_73 $$ maxCommittedUsage = Math.max(maxCommittedUsage, finalCommittedHeap)[ FD ]
Line_10 $$ long usageAtPreviousCollection = 0-->Line_68 $$ if (finalHeapUsage < usageAtPreviousCollection) [ FD ]
Line_33 $$ if (!event.timestamp.isBefore(operation.getStart())) -->Line_37 $$ maxCommittedUsage = Math.max(maxCommittedUsage, event.committed)[ CD ]
Line_35 $$ maxUsage = Math.max(maxUsage, event.start)-->Line_72 $$ maxUsage = Math.max(maxUsage, finalHeapUsage)[ FD ]
Line_62 $$ finalHeapUsage += usage-->Line_68 $$ if (finalHeapUsage < usageAtPreviousCollection) [ FD ]
Line_14 $$ String line = reader.readLine()-->Line_52 $$ Matcher matcher = memoryPoolPattern.matcher(line)[ FD ]
Line_18 $$ if (line.equals("Heap")) -->Line_19 $$ processHeapUsageSummary = true[ CD ]
Line_46 $$ if (processHeapUsageSummary) -->Line_47 $$ while (true) [ CD ]
Line_46 $$ if (processHeapUsageSummary) -->Line_65 $$ if (finalHeapUsage == 0) [ CD ]
Line_45 $$ long finalCommittedHeap = 0-->Line_73 $$ maxCommittedUsage = Math.max(maxCommittedUsage, finalCommittedHeap)[ FD ]
Line_33 $$ if (!event.timestamp.isBefore(operation.getStart())) -->Line_34 $$ totalHeapUsage += event.start - usageAtPreviousCollection[ CD ]
Line_73 $$ maxCommittedUsage = Math.max(maxCommittedUsage, finalCommittedHeap)-->Line_78 $$ operation.setMaxCommittedHeap(DataAmount.kbytes(BigDecimal.valueOf(maxCommittedUsage)))[ FD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_75 $$ operation.setTotalHeapUsage(DataAmount.kbytes(BigDecimal.valueOf(totalHeapUsage)))[ CD ]
Line_10 $$ long usageAtPreviousCollection = 0-->Line_39 $$ usageAtPreviousCollection = event.end[ FD ]
Line_11 $$ int events = 0-->Line_41 $$ if (events == 0) [ FD ]
Line_37 $$ maxCommittedUsage = Math.max(maxCommittedUsage, event.committed)-->Line_78 $$ operation.setMaxCommittedHeap(DataAmount.kbytes(BigDecimal.valueOf(maxCommittedUsage)))[ FD ]
Line_62 $$ finalHeapUsage += usage-->Line_65 $$ if (finalHeapUsage == 0) [ FD ]
Line_39 $$ usageAtPreviousCollection = event.end-->Line_68 $$ if (finalHeapUsage < usageAtPreviousCollection) [ FD ]
Line_52 $$ Matcher matcher = memoryPoolPattern.matcher(line)-->Line_56 $$ String pool = matcher.group(1).trim()[ FD ]
Line_13 $$ while (true) -->Line_14 $$ String line = reader.readLine()[ CD ]
Line_61 $$ long usage = Long.parseLong(matcher.group(3))-->Line_62 $$ finalHeapUsage += usage[ FD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_13 $$ while (true) [ CD ]
Line_34 $$ totalHeapUsage += event.start - usageAtPreviousCollection-->Line_75 $$ operation.setTotalHeapUsage(DataAmount.kbytes(BigDecimal.valueOf(totalHeapUsage)))[ FD ]
Line_9 $$ long maxCommittedUsage = 0-->Line_78 $$ operation.setMaxCommittedHeap(DataAmount.kbytes(BigDecimal.valueOf(maxCommittedUsage)))[ FD ]
Line_5 $$ Pattern memoryPoolPattern = Pattern.compile("([\\w\\s]+) total (\\d+)K, used (\\d+)K \\[.+")-->Line_52 $$ Matcher matcher = memoryPoolPattern.matcher(line)[ FD ]
Line_44 $$ long finalHeapUsage = 0-->Line_62 $$ finalHeapUsage += usage[ FD ]
Line_44 $$ long finalHeapUsage = 0-->Line_65 $$ if (finalHeapUsage == 0) [ FD ]
Line_46 $$ if (processHeapUsageSummary) -->Line_68 $$ if (finalHeapUsage < usageAtPreviousCollection) [ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_30 $$ if (event.timestamp.isAfter(operation.getEnd())) [ FD ]
Line_14 $$ String line = reader.readLine()-->Line_18 $$ if (line.equals("Heap")) [ FD ]
Line_72 $$ maxUsage = Math.max(maxUsage, finalHeapUsage)-->Line_76 $$ operation.setMaxHeapUsage(DataAmount.kbytes(BigDecimal.valueOf(maxUsage)))[ FD ]
Line_11 $$ int events = 0-->Line_26 $$ events++[ FD ]
Line_44 $$ long finalHeapUsage = 0-->Line_72 $$ maxUsage = Math.max(maxUsage, finalHeapUsage)[ FD ]
Line_13 $$ while (true) -->Line_33 $$ if (!event.timestamp.isBefore(operation.getStart())) [ CD ]
Line_47 $$ while (true) -->Line_48 $$ String line = reader.readLine()[ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_41 $$ if (events == 0) [ CD ]
Line_7 $$ long maxUsage = 0-->Line_35 $$ maxUsage = Math.max(maxUsage, event.start)[ FD ]
Line_14 $$ String line = reader.readLine()-->Line_22 $$ GCEventParser.GCEvent event = eventParser.parseLine(line)[ FD ]
Line_13 $$ while (true) -->Line_15 $$ if (line == null) [ CD ]
Line_48 $$ String line = reader.readLine()-->Line_49 $$ if (line == null) [ FD ]
Line_33 $$ if (!event.timestamp.isBefore(operation.getStart())) -->Line_36 $$ maxUncollectedUsage = Math.max(maxUncollectedUsage, event.end)[ CD ]
Line_47 $$ while (true) -->Line_61 $$ long usage = Long.parseLong(matcher.group(3))[ CD ]
Line_6 $$ long totalHeapUsage = 0-->Line_75 $$ operation.setTotalHeapUsage(DataAmount.kbytes(BigDecimal.valueOf(totalHeapUsage)))[ FD ]
Line_47 $$ while (true) -->Line_49 $$ if (line == null) [ CD ]
Line_13 $$ while (true) -->Line_30 $$ if (event.timestamp.isAfter(operation.getEnd())) [ CD ]
Line_13 $$ while (true) -->Line_22 $$ GCEventParser.GCEvent event = eventParser.parseLine(line)[ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_8 $$ long maxUncollectedUsage = 0[ CD ]
Line_39 $$ usageAtPreviousCollection = event.end-->Line_71 $$ totalHeapUsage += finalHeapUsage - usageAtPreviousCollection[ FD ]
Line_56 $$ String pool = matcher.group(1).trim()-->Line_57 $$ if (pool.toLowerCase().contains("perm gen") || pool.toLowerCase().contains("permgen")) [ FD ]
Line_7 $$ long maxUsage = 0-->Line_72 $$ maxUsage = Math.max(maxUsage, finalHeapUsage)[ FD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_77 $$ operation.setMaxUncollectedHeap(DataAmount.kbytes(BigDecimal.valueOf(maxUncollectedUsage)))[ FD ]
Line_7 $$ long maxUsage = 0-->Line_76 $$ operation.setMaxHeapUsage(DataAmount.kbytes(BigDecimal.valueOf(maxUsage)))[ FD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_4 $$ GCEventParser eventParser = new GCEventParser(decimalSeparator)[ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_7 $$ long maxUsage = 0[ CD ]
Line_52 $$ Matcher matcher = memoryPoolPattern.matcher(line)-->Line_60 $$ long committed = Long.parseLong(matcher.group(2))[ FD ]
Line_47 $$ while (true) -->Line_57 $$ if (pool.toLowerCase().contains("perm gen") || pool.toLowerCase().contains("permgen")) [ CD ]
Line_10 $$ long usageAtPreviousCollection = 0-->Line_71 $$ totalHeapUsage += finalHeapUsage - usageAtPreviousCollection[ FD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_12 $$ boolean processHeapUsageSummary = false[ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_6 $$ long totalHeapUsage = 0[ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_44 $$ long finalHeapUsage = 0[ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_76 $$ operation.setMaxHeapUsage(DataAmount.kbytes(BigDecimal.valueOf(maxUsage)))[ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_48 $$ String line = reader.readLine()[ FD ]
Line_71 $$ totalHeapUsage += finalHeapUsage - usageAtPreviousCollection-->Line_75 $$ operation.setTotalHeapUsage(DataAmount.kbytes(BigDecimal.valueOf(totalHeapUsage)))[ FD ]
Line_36 $$ maxUncollectedUsage = Math.max(maxUncollectedUsage, event.end)-->Line_77 $$ operation.setMaxUncollectedHeap(DataAmount.kbytes(BigDecimal.valueOf(maxUncollectedUsage)))[ FD ]
Line_13 $$ while (true) -->Line_39 $$ usageAtPreviousCollection = event.end[ CD ]
Line_39 $$ usageAtPreviousCollection = event.end-->Line_27 $$ if (event.start < usageAtPreviousCollection) [ FD ]
Line_47 $$ while (true) -->Line_63 $$ finalCommittedHeap += committed[ CD ]
Line_33 $$ if (!event.timestamp.isBefore(operation.getStart())) -->Line_35 $$ maxUsage = Math.max(maxUsage, event.start)[ CD ]
Line_8 $$ long maxUncollectedUsage = 0-->Line_36 $$ maxUncollectedUsage = Math.max(maxUncollectedUsage, event.end)[ FD ]
Line_46 $$ if (processHeapUsageSummary) -->Line_72 $$ maxUsage = Math.max(maxUsage, finalHeapUsage)[ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_76 $$ operation.setMaxHeapUsage(DataAmount.kbytes(BigDecimal.valueOf(maxUsage)))[ FD ]
Line_13 $$ while (true) -->Line_26 $$ events++[ CD ]
Line_47 $$ while (true) -->Line_53 $$ if (!matcher.lookingAt()) [ CD ]
Line_44 $$ long finalHeapUsage = 0-->Line_71 $$ totalHeapUsage += finalHeapUsage - usageAtPreviousCollection[ FD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_14 $$ String line = reader.readLine()[ FD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_10 $$ long usageAtPreviousCollection = 0[ CD ]
Line_46 $$ if (processHeapUsageSummary) -->Line_71 $$ totalHeapUsage += finalHeapUsage - usageAtPreviousCollection[ CD ]
Line_8 $$ long maxUncollectedUsage = 0-->Line_77 $$ operation.setMaxUncollectedHeap(DataAmount.kbytes(BigDecimal.valueOf(maxUncollectedUsage)))[ FD ]
Line_47 $$ while (true) -->Line_60 $$ long committed = Long.parseLong(matcher.group(2))[ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_45 $$ long finalCommittedHeap = 0[ CD ]
Line_44 $$ long finalHeapUsage = 0-->Line_68 $$ if (finalHeapUsage < usageAtPreviousCollection) [ FD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_78 $$ operation.setMaxCommittedHeap(DataAmount.kbytes(BigDecimal.valueOf(maxCommittedUsage)))[ CD ]
Line_2 $$ private void collect(WaitingReader reader, MeasuredOperation operation, Locale locale) throws IOException -->Line_46 $$ if (processHeapUsageSummary) [ CD ]
Line_63 $$ finalCommittedHeap += committed-->Line_73 $$ maxCommittedUsage = Math.max(maxCommittedUsage, finalCommittedHeap)[ FD ]
