Line_2 $$ public static Module findModule(final Module contextModule, final Set<String> patterns, final Project project, Condition<PsiClass> isTestMethod) -->Line_23 $$ return null[ CD ]
Line_3 $$ final Set<Module> modules = new HashSet<Module>()-->Line_11 $$ final Module nextModule = modules.iterator().next()[ FD ]
Line_2 $$ public static Module findModule(final Module contextModule, final Set<String> patterns, final Project project, Condition<PsiClass> isTestMethod) -->Line_16 $$ if (contextModule != null && modules.size() > 1) [ CD ]
Line_17 $$ final HashSet<Module> moduleDependencies = new HashSet<Module>()-->Line_19 $$ if (moduleDependencies.containsAll(modules)) [ FD ]
Line_17 $$ final HashSet<Module> moduleDependencies = new HashSet<Module>()-->Line_18 $$ ModuleUtilCore.getDependencies(contextModule, moduleDependencies)[ FD ]
Line_10 $$ if (modules.size() == 1) -->Line_11 $$ final Module nextModule = modules.iterator().next()[ CD ]
Line_6 $$ if (psiClass != null && isTestMethod.value(psiClass)) -->Line_7 $$ modules.add(ModuleUtilCore.findModuleForPsiElement(psiClass))[ CD ]
Line_2 $$ public static Module findModule(final Module contextModule, final Set<String> patterns, final Project project, Condition<PsiClass> isTestMethod) -->Line_3 $$ final Set<Module> modules = new HashSet<Module>()[ CD ]
Line_2 $$ public static Module findModule(final Module contextModule, final Set<String> patterns, final Project project, Condition<PsiClass> isTestMethod) -->Line_6 $$ if (psiClass != null && isTestMethod.value(psiClass)) [ FD ]
Line_4 $$ for (String className : patterns) -->Line_5 $$ final PsiClass psiClass = findMainClass(project, className.contains(",") ? className.substring(0, className.indexOf(',')) : className, GlobalSearchScope.allScope(project))[ FD ]
Line_3 $$ final Set<Module> modules = new HashSet<Module>()-->Line_10 $$ if (modules.size() == 1) [ FD ]
Line_3 $$ final Set<Module> modules = new HashSet<Module>()-->Line_7 $$ modules.add(ModuleUtilCore.findModuleForPsiElement(psiClass))[ FD ]
Line_2 $$ public static Module findModule(final Module contextModule, final Set<String> patterns, final Project project, Condition<PsiClass> isTestMethod) -->Line_18 $$ ModuleUtilCore.getDependencies(contextModule, moduleDependencies)[ FD ]
Line_5 $$ final PsiClass psiClass = findMainClass(project, className.contains(",") ? className.substring(0, className.indexOf(',')) : className, GlobalSearchScope.allScope(project))-->Line_7 $$ modules.add(ModuleUtilCore.findModuleForPsiElement(psiClass))[ FD ]
Line_2 $$ public static Module findModule(final Module contextModule, final Set<String> patterns, final Project project, Condition<PsiClass> isTestMethod) -->Line_10 $$ if (modules.size() == 1) [ CD ]
Line_16 $$ if (contextModule != null && modules.size() > 1) -->Line_19 $$ if (moduleDependencies.containsAll(modules)) [ CD ]
Line_3 $$ final Set<Module> modules = new HashSet<Module>()-->Line_19 $$ if (moduleDependencies.containsAll(modules)) [ FD ]
Line_19 $$ if (moduleDependencies.containsAll(modules)) -->Line_20 $$ return contextModule[ CD ]
Line_12 $$ if (nextModule != null) -->Line_13 $$ return nextModule[ CD ]
Line_2 $$ public static Module findModule(final Module contextModule, final Set<String> patterns, final Project project, Condition<PsiClass> isTestMethod) -->Line_5 $$ final PsiClass psiClass = findMainClass(project, className.contains(",") ? className.substring(0, className.indexOf(',')) : className, GlobalSearchScope.allScope(project))[ FD ]
Line_10 $$ if (modules.size() == 1) -->Line_12 $$ if (nextModule != null) [ CD ]
Line_16 $$ if (contextModule != null && modules.size() > 1) -->Line_18 $$ ModuleUtilCore.getDependencies(contextModule, moduleDependencies)[ CD ]
Line_5 $$ final PsiClass psiClass = findMainClass(project, className.contains(",") ? className.substring(0, className.indexOf(',')) : className, GlobalSearchScope.allScope(project))-->Line_6 $$ if (psiClass != null && isTestMethod.value(psiClass)) [ FD ]
Line_3 $$ final Set<Module> modules = new HashSet<Module>()-->Line_16 $$ if (contextModule != null && modules.size() > 1) [ FD ]
Line_16 $$ if (contextModule != null && modules.size() > 1) -->Line_17 $$ final HashSet<Module> moduleDependencies = new HashSet<Module>()[ CD ]
Line_11 $$ final Module nextModule = modules.iterator().next()-->Line_12 $$ if (nextModule != null) [ FD ]
