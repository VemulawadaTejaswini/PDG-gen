Line_2 $$ public void testUtilities() throws ParseException -->Line_3 $$ SpelExpression expr = (SpelExpression) parser.parseExpression("3+4+5+6+7-2")[ CD ]
Line_5 $$ PrintStream ps = new PrintStream(baos)-->Line_6 $$ SpelUtilities.printAbstractSyntaxTree(ps, expr)[ FD ]
Line_3 $$ SpelExpression expr = (SpelExpression) parser.parseExpression("3+4+5+6+7-2")-->Line_6 $$ SpelUtilities.printAbstractSyntaxTree(ps, expr)[ FD ]
Line_2 $$ public void testUtilities() throws ParseException -->Line_8 $$ String s = baos.toString()[ CD ]
Line_8 $$ String s = baos.toString()-->Line_10 $$ assertTrue(s.contains(" OpPlus  value:((((3 + 4) + 5) + 6) + 7)  #children:2"))[ FD ]
Line_2 $$ public void testUtilities() throws ParseException -->Line_5 $$ PrintStream ps = new PrintStream(baos)[ CD ]
Line_8 $$ String s = baos.toString()-->Line_9 $$ assertTrue(s.contains("===> Expression '3+4+5+6+7-2' - AST start"))[ FD ]
Line_2 $$ public void testUtilities() throws ParseException -->Line_6 $$ SpelUtilities.printAbstractSyntaxTree(ps, expr)[ CD ]
Line_2 $$ public void testUtilities() throws ParseException -->Line_7 $$ ps.flush()[ CD ]
Line_2 $$ public void testUtilities() throws ParseException -->Line_10 $$ assertTrue(s.contains(" OpPlus  value:((((3 + 4) + 5) + 6) + 7)  #children:2"))[ CD ]
Line_4 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_8 $$ String s = baos.toString()[ FD ]
Line_2 $$ public void testUtilities() throws ParseException -->Line_4 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testUtilities() throws ParseException -->Line_9 $$ assertTrue(s.contains("===> Expression '3+4+5+6+7-2' - AST start"))[ CD ]
Line_5 $$ PrintStream ps = new PrintStream(baos)-->Line_7 $$ ps.flush()[ FD ]
