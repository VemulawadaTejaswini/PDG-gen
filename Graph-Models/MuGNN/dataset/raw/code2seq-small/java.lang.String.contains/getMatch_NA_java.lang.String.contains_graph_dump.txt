Line_11 $$ host = parts[0].toLowerCase().trim()-->Line_34 $$ String[] pair = host.split("/")[ FD ]
Line_31 $$ if (LOG.isDebugEnabled()) -->Line_32 $$ LOG.debug("Using CIDR match for '" + host + "' and " + privilege)[ CD ]
Line_42 $$ if (LOG.isDebugEnabled()) -->Line_43 $$ LOG.debug("Using exact match for '" + host + "' and " + privilege)[ CD ]
Line_4 $$ final String host-->Line_36 $$ if (host.contains("*") || host.contains("?") || host.contains("[") || host.contains("]")) [ FD ]
Line_30 $$ if (CIDR_FORMAT_LONG.matcher(host).matches()) -->Line_34 $$ String[] pair = host.split("/")[ CD ]
Line_8 $$ host = parts[0].toLowerCase().trim()-->Line_11 $$ host = parts[0].toLowerCase().trim()[ FD ]
Line_4 $$ final String host-->Line_11 $$ host = parts[0].toLowerCase().trim()[ FD ]
Line_11 $$ host = parts[0].toLowerCase().trim()-->Line_36 $$ if (host.contains("*") || host.contains("?") || host.contains("[") || host.contains("]")) [ FD ]
Line_41 $$ if (HOSTNAME_FORMAT.matcher(host).matches()) -->Line_42 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_11 $$ host = parts[0].toLowerCase().trim()-->Line_25 $$ if (CIDR_FORMAT_SHORT.matcher(host).matches()) [ FD ]
Line_12 $$ String option = parts[1].trim()-->Line_13 $$ if ("rw".equalsIgnoreCase(option)) [ FD ]
Line_8 $$ host = parts[0].toLowerCase().trim()-->Line_41 $$ if (HOSTNAME_FORMAT.matcher(host).matches()) [ FD ]
Line_4 $$ final String host-->Line_20 $$ if (host.equals("*")) [ FD ]
Line_20 $$ if (host.equals("*")) -->Line_21 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_25 $$ if (CIDR_FORMAT_SHORT.matcher(host).matches()) -->Line_29 $$ return new CIDRMatch(privilege, new SubnetUtils(host).getInfo())[ CD ]
Line_4 $$ final String host-->Line_41 $$ if (HOSTNAME_FORMAT.matcher(host).matches()) [ FD ]
Line_2 $$ private static Match getMatch(String line) -->Line_4 $$ final String host[ CD ]
Line_5 $$ AccessPrivilege privilege = AccessPrivilege.READ_ONLY-->Line_14 $$ privilege = AccessPrivilege.READ_WRITE[ FD ]
Line_4 $$ final String host-->Line_30 $$ if (CIDR_FORMAT_LONG.matcher(host).matches()) [ FD ]
Line_20 $$ if (host.equals("*")) -->Line_24 $$ return new AnonymousMatch(privilege)[ CD ]
Line_8 $$ host = parts[0].toLowerCase().trim()-->Line_20 $$ if (host.equals("*")) [ FD ]
Line_8 $$ host = parts[0].toLowerCase().trim()-->Line_30 $$ if (CIDR_FORMAT_LONG.matcher(host).matches()) [ FD ]
Line_11 $$ host = parts[0].toLowerCase().trim()-->Line_20 $$ if (host.equals("*")) [ FD ]
Line_2 $$ private static Match getMatch(String line) -->Line_5 $$ AccessPrivilege privilege = AccessPrivilege.READ_ONLY[ CD ]
Line_21 $$ if (LOG.isDebugEnabled()) -->Line_22 $$ LOG.debug("Using match all for '" + host + "' and " + privilege)[ CD ]
Line_30 $$ if (CIDR_FORMAT_LONG.matcher(host).matches()) -->Line_31 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ private static Match getMatch(String line) -->Line_20 $$ if (host.equals("*")) [ CD ]
Line_2 $$ private static Match getMatch(String line) -->Line_3 $$ String[] parts = line.split("\\s+")[ FD ]
Line_13 $$ if ("rw".equalsIgnoreCase(option)) -->Line_14 $$ privilege = AccessPrivilege.READ_WRITE[ CD ]
Line_41 $$ if (HOSTNAME_FORMAT.matcher(host).matches()) -->Line_45 $$ return new ExactMatch(privilege, host)[ CD ]
Line_25 $$ if (CIDR_FORMAT_SHORT.matcher(host).matches()) -->Line_30 $$ if (CIDR_FORMAT_LONG.matcher(host).matches()) [ CD ]
Line_30 $$ if (CIDR_FORMAT_LONG.matcher(host).matches()) -->Line_36 $$ if (host.contains("*") || host.contains("?") || host.contains("[") || host.contains("]")) [ CD ]
Line_20 $$ if (host.equals("*")) -->Line_25 $$ if (CIDR_FORMAT_SHORT.matcher(host).matches()) [ CD ]
Line_36 $$ if (host.contains("*") || host.contains("?") || host.contains("[") || host.contains("]")) -->Line_37 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_36 $$ if (host.contains("*") || host.contains("?") || host.contains("[") || host.contains("]")) -->Line_40 $$ return new RegexMatch(privilege, host)[ CD ]
Line_11 $$ host = parts[0].toLowerCase().trim()-->Line_30 $$ if (CIDR_FORMAT_LONG.matcher(host).matches()) [ FD ]
Line_8 $$ host = parts[0].toLowerCase().trim()-->Line_25 $$ if (CIDR_FORMAT_SHORT.matcher(host).matches()) [ FD ]
Line_4 $$ final String host-->Line_34 $$ String[] pair = host.split("/")[ FD ]
Line_11 $$ host = parts[0].toLowerCase().trim()-->Line_41 $$ if (HOSTNAME_FORMAT.matcher(host).matches()) [ FD ]
Line_4 $$ final String host-->Line_8 $$ host = parts[0].toLowerCase().trim()[ FD ]
Line_8 $$ host = parts[0].toLowerCase().trim()-->Line_34 $$ String[] pair = host.split("/")[ FD ]
Line_25 $$ if (CIDR_FORMAT_SHORT.matcher(host).matches()) -->Line_26 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_37 $$ if (LOG.isDebugEnabled()) -->Line_38 $$ LOG.debug("Using Regex match for '" + host + "' and " + privilege)[ CD ]
Line_36 $$ if (host.contains("*") || host.contains("?") || host.contains("[") || host.contains("]")) -->Line_41 $$ if (HOSTNAME_FORMAT.matcher(host).matches()) [ CD ]
Line_2 $$ private static Match getMatch(String line) -->Line_3 $$ String[] parts = line.split("\\s+")[ CD ]
Line_4 $$ final String host-->Line_25 $$ if (CIDR_FORMAT_SHORT.matcher(host).matches()) [ FD ]
Line_26 $$ if (LOG.isDebugEnabled()) -->Line_27 $$ LOG.debug("Using CIDR match for '" + host + "' and " + privilege)[ CD ]
Line_30 $$ if (CIDR_FORMAT_LONG.matcher(host).matches()) -->Line_35 $$ return new CIDRMatch(privilege, new SubnetUtils(pair[0], pair[1]).getInfo())[ CD ]
Line_8 $$ host = parts[0].toLowerCase().trim()-->Line_36 $$ if (host.contains("*") || host.contains("?") || host.contains("[") || host.contains("]")) [ FD ]
