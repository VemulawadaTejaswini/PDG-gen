Line_13 $$ final Project project = file.getProject()-->Line_14 $$ if (project == null)[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_19 $$ if (!hasPrefix) [ CD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_7 $$ final boolean hasPrefix = localName.contains(":")[ CD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_18 $$ String nsUri[ CD ]
Line_17 $$ final ArrayDeque<SchemaTypeInfo> queue = new ArrayDeque<SchemaTypeInfo>()-->Line_34 $$ queue.add(typeInfo)[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_40 $$ return result[ CD ]
Line_19 $$ if (!hasPrefix) -->Line_22 $$ nsUri = XmlUtil.findNamespaceByPrefix(nsPrefix, file.getRootTag())[ CD ]
Line_33 $$ if (typeInfo.isIsTypeName()) -->Line_34 $$ queue.add(typeInfo)[ CD ]
Line_6 $$ String localName = name.getValue()-->Line_7 $$ final boolean hasPrefix = localName.contains(":")[ FD ]
Line_14 $$ if (project == null)-->Line_15 $$ return null[ CD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_28 $$ while (!queue.isEmpty()) [ CD ]
Line_18 $$ String nsUri-->Line_24 $$ if (nsUri == null)[ FD ]
Line_3 $$ XmlAttribute name = getNameAttr(xml)-->Line_6 $$ String localName = name.getValue()[ FD ]
Line_9 $$ final String nsPrefix = hasPrefix ? name.getValue().substring(0, name.getValue().indexOf(':')) : null-->Line_22 $$ nsUri = XmlUtil.findNamespaceByPrefix(nsPrefix, file.getRootTag())[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_24 $$ if (nsUri == null)[ CD ]
Line_16 $$ final Set<SchemaTypeInfo> result = new HashSet<SchemaTypeInfo>()-->Line_36 $$ result.add(typeInfo)[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_8 $$ localName = hasPrefix ? localName.substring(localName.indexOf(':') + 1) : localName[ CD ]
Line_18 $$ String nsUri-->Line_20 $$ nsUri = getDefaultNs(file)[ FD ]
Line_29 $$ final SchemaTypeInfo info = queue.removeFirst()-->Line_30 $$ final List<Set<SchemaTypeInfo>> childrenOfType = worker.convert(info.getNamespaceUri(), info.getTagName())[ FD ]
Line_32 $$ for (SchemaTypeInfo typeInfo : infos) -->Line_33 $$ if (typeInfo.isIsTypeName()) [ FD ]
Line_22 $$ nsUri = XmlUtil.findNamespaceByPrefix(nsPrefix, file.getRootTag())-->Line_24 $$ if (nsUri == null)[ FD ]
Line_32 $$ for (SchemaTypeInfo typeInfo : infos) -->Line_34 $$ queue.add(typeInfo)[ FD ]
Line_10 $$ final XmlFile file = XmlUtil.getContainingFile(xml)-->Line_22 $$ nsUri = XmlUtil.findNamespaceByPrefix(nsPrefix, file.getRootTag())[ FD ]
Line_6 $$ String localName = name.getValue()-->Line_8 $$ localName = hasPrefix ? localName.substring(localName.indexOf(':') + 1) : localName[ FD ]
Line_17 $$ final ArrayDeque<SchemaTypeInfo> queue = new ArrayDeque<SchemaTypeInfo>()-->Line_26 $$ queue.add(new SchemaTypeInfo(localName, true, nsUri))[ FD ]
Line_10 $$ final XmlFile file = XmlUtil.getContainingFile(xml)-->Line_27 $$ final PairConvertor<String, String, List<Set<SchemaTypeInfo>>> worker = SchemaTypeInheritanceIndex.getWorker(project, file.getContainingFile().getVirtualFile())[ FD ]
Line_28 $$ while (!queue.isEmpty()) -->Line_29 $$ final SchemaTypeInfo info = queue.removeFirst()[ CD ]
Line_11 $$ if (file == null)-->Line_12 $$ return null[ CD ]
Line_24 $$ if (nsUri == null)-->Line_25 $$ return null[ CD ]
Line_32 $$ for (SchemaTypeInfo typeInfo : infos) -->Line_36 $$ result.add(typeInfo)[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_9 $$ final String nsPrefix = hasPrefix ? name.getValue().substring(0, name.getValue().indexOf(':')) : null[ CD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_11 $$ if (file == null)[ CD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_3 $$ XmlAttribute name = getNameAttr(xml)[ FD ]
Line_18 $$ String nsUri-->Line_22 $$ nsUri = XmlUtil.findNamespaceByPrefix(nsPrefix, file.getRootTag())[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_3 $$ XmlAttribute name = getNameAttr(xml)[ CD ]
Line_3 $$ XmlAttribute name = getNameAttr(xml)-->Line_4 $$ if (name == null || StringUtil.isEmptyOrSpaces(name.getValue()))[ FD ]
Line_13 $$ final Project project = file.getProject()-->Line_27 $$ final PairConvertor<String, String, List<Set<SchemaTypeInfo>>> worker = SchemaTypeInheritanceIndex.getWorker(project, file.getContainingFile().getVirtualFile())[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_14 $$ if (project == null)[ CD ]
Line_10 $$ final XmlFile file = XmlUtil.getContainingFile(xml)-->Line_20 $$ nsUri = getDefaultNs(file)[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_27 $$ final PairConvertor<String, String, List<Set<SchemaTypeInfo>>> worker = SchemaTypeInheritanceIndex.getWorker(project, file.getContainingFile().getVirtualFile())[ CD ]
Line_17 $$ final ArrayDeque<SchemaTypeInfo> queue = new ArrayDeque<SchemaTypeInfo>()-->Line_29 $$ final SchemaTypeInfo info = queue.removeFirst()[ FD ]
Line_17 $$ final ArrayDeque<SchemaTypeInfo> queue = new ArrayDeque<SchemaTypeInfo>()-->Line_28 $$ while (!queue.isEmpty()) [ FD ]
Line_3 $$ XmlAttribute name = getNameAttr(xml)-->Line_9 $$ final String nsPrefix = hasPrefix ? name.getValue().substring(0, name.getValue().indexOf(':')) : null[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_10 $$ final XmlFile file = XmlUtil.getContainingFile(xml)[ CD ]
Line_4 $$ if (name == null || StringUtil.isEmptyOrSpaces(name.getValue()))-->Line_5 $$ return null[ CD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_6 $$ String localName = name.getValue()[ CD ]
Line_28 $$ while (!queue.isEmpty()) -->Line_30 $$ final List<Set<SchemaTypeInfo>> childrenOfType = worker.convert(info.getNamespaceUri(), info.getTagName())[ CD ]
Line_27 $$ final PairConvertor<String, String, List<Set<SchemaTypeInfo>>> worker = SchemaTypeInheritanceIndex.getWorker(project, file.getContainingFile().getVirtualFile())-->Line_30 $$ final List<Set<SchemaTypeInfo>> childrenOfType = worker.convert(info.getNamespaceUri(), info.getTagName())[ FD ]
Line_19 $$ if (!hasPrefix) -->Line_20 $$ nsUri = getDefaultNs(file)[ CD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_4 $$ if (name == null || StringUtil.isEmptyOrSpaces(name.getValue()))[ CD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_13 $$ final Project project = file.getProject()[ CD ]
Line_10 $$ final XmlFile file = XmlUtil.getContainingFile(xml)-->Line_13 $$ final Project project = file.getProject()[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_17 $$ final ArrayDeque<SchemaTypeInfo> queue = new ArrayDeque<SchemaTypeInfo>()[ CD ]
Line_20 $$ nsUri = getDefaultNs(file)-->Line_24 $$ if (nsUri == null)[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_26 $$ queue.add(new SchemaTypeInfo(localName, true, nsUri))[ CD ]
Line_10 $$ final XmlFile file = XmlUtil.getContainingFile(xml)-->Line_11 $$ if (file == null)[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_10 $$ final XmlFile file = XmlUtil.getContainingFile(xml)[ FD ]
Line_2 $$ private Collection<SchemaTypeInfo> gatherInheritors(XmlTagImpl xml) -->Line_16 $$ final Set<SchemaTypeInfo> result = new HashSet<SchemaTypeInfo>()[ CD ]
Line_20 $$ nsUri = getDefaultNs(file)-->Line_22 $$ nsUri = XmlUtil.findNamespaceByPrefix(nsPrefix, file.getRootTag())[ FD ]
Line_7 $$ final boolean hasPrefix = localName.contains(":")-->Line_19 $$ if (!hasPrefix) [ FD ]
