Line_2 $$ public void handleMessageToClientWithUserDestination() -->Line_11 $$ WebSocketMessage<?> textMessage = this.session.getSentMessages().get(0)[ CD ]
Line_2 $$ public void handleMessageToClientWithUserDestination() -->Line_12 $$ assertTrue(((String) textMessage.getPayload()).contains("destination:/user/queue/foo\n"))[ CD ]
Line_8 $$ Message<byte[]> message = MessageBuilder.createMessage(EMPTY_PAYLOAD, headers.getMessageHeaders())-->Line_9 $$ this.protocolHandler.handleMessageToClient(this.session, message)[ FD ]
Line_3 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE)-->Line_7 $$ headers.setNativeHeader(StompHeaderAccessor.ORIGINAL_DESTINATION, "/user/queue/foo")[ FD ]
Line_2 $$ public void handleMessageToClientWithUserDestination() -->Line_13 $$ assertFalse(((String) textMessage.getPayload()).contains(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION))[ CD ]
Line_2 $$ public void handleMessageToClientWithUserDestination() -->Line_8 $$ Message<byte[]> message = MessageBuilder.createMessage(EMPTY_PAYLOAD, headers.getMessageHeaders())[ CD ]
Line_3 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE)-->Line_5 $$ headers.setSubscriptionId("sub0")[ FD ]
Line_3 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE)-->Line_4 $$ headers.setMessageId("mess0")[ FD ]
Line_2 $$ public void handleMessageToClientWithUserDestination() -->Line_7 $$ headers.setNativeHeader(StompHeaderAccessor.ORIGINAL_DESTINATION, "/user/queue/foo")[ CD ]
Line_11 $$ WebSocketMessage<?> textMessage = this.session.getSentMessages().get(0)-->Line_12 $$ assertTrue(((String) textMessage.getPayload()).contains("destination:/user/queue/foo\n"))[ FD ]
Line_11 $$ WebSocketMessage<?> textMessage = this.session.getSentMessages().get(0)-->Line_13 $$ assertFalse(((String) textMessage.getPayload()).contains(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION))[ FD ]
Line_2 $$ public void handleMessageToClientWithUserDestination() -->Line_6 $$ headers.setDestination("/queue/foo-user123")[ CD ]
Line_2 $$ public void handleMessageToClientWithUserDestination() -->Line_9 $$ this.protocolHandler.handleMessageToClient(this.session, message)[ CD ]
Line_2 $$ public void handleMessageToClientWithUserDestination() -->Line_4 $$ headers.setMessageId("mess0")[ CD ]
Line_3 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE)-->Line_6 $$ headers.setDestination("/queue/foo-user123")[ FD ]
Line_2 $$ public void handleMessageToClientWithUserDestination() -->Line_3 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE)[ CD ]
Line_2 $$ public void handleMessageToClientWithUserDestination() -->Line_5 $$ headers.setSubscriptionId("sub0")[ CD ]
Line_3 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE)-->Line_8 $$ Message<byte[]> message = MessageBuilder.createMessage(EMPTY_PAYLOAD, headers.getMessageHeaders())[ FD ]
Line_2 $$ public void handleMessageToClientWithUserDestination() -->Line_10 $$ assertEquals(1, this.session.getSentMessages().size())[ CD ]
