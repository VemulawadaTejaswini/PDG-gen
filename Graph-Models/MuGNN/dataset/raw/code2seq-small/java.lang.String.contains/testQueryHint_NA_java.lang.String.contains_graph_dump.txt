Line_2 $$ public void testQueryHint() -->Line_43 $$ s.getTransaction().commit()[ CD ]
Line_9 $$ Session s = openSession()-->Line_14 $$ s.getTransaction().commit()[ FD ]
Line_9 $$ Session s = openSession()-->Line_20 $$ s.clear()[ FD ]
Line_9 $$ Session s = openSession()-->Line_43 $$ s.getTransaction().commit()[ FD ]
Line_34 $$ results = query.list()-->Line_42 $$ results = criteria.list()[ FD ]
Line_9 $$ Session s = openSession()-->Line_15 $$ s.clear()[ FD ]
Line_2 $$ public void testQueryHint() -->Line_8 $$ employee2.department = department[ CD ]
Line_2 $$ public void testQueryHint() -->Line_9 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_28 $$ s.clear()[ CD ]
Line_9 $$ Session s = openSession()-->Line_35 $$ s.getTransaction().commit()[ FD ]
Line_5 $$ Employee employee1 = new Employee()-->Line_12 $$ s.persist(employee1)[ FD ]
Line_9 $$ Session s = openSession()-->Line_11 $$ s.persist(department)[ FD ]
Line_2 $$ public void testQueryHint() -->Line_14 $$ s.getTransaction().commit()[ CD ]
Line_26 $$ results = query.list()-->Line_42 $$ results = criteria.list()[ FD ]
Line_9 $$ Session s = openSession()-->Line_25 $$ query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").addQueryHint("USE_CONCAT").setParameter("departmentName", "Sales")[ FD ]
Line_2 $$ public void testQueryHint() -->Line_34 $$ results = query.list()[ CD ]
Line_34 $$ results = query.list()-->Line_37 $$ assertEquals(results.size(), 2)[ FD ]
Line_9 $$ Session s = openSession()-->Line_27 $$ s.getTransaction().commit()[ FD ]
Line_17 $$ Query query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").setParameter("departmentName", "Sales")-->Line_33 $$ query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").setComment("this is a test").addQueryHint("ALL_ROWS").setParameter("departmentName", "Sales")[ FD ]
Line_17 $$ Query query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").setParameter("departmentName", "Sales")-->Line_18 $$ List results = query.list()[ FD ]
Line_9 $$ Session s = openSession()-->Line_28 $$ s.clear()[ FD ]
Line_26 $$ results = query.list()-->Line_45 $$ assertEquals(results.size(), 2)[ FD ]
Line_9 $$ Session s = openSession()-->Line_10 $$ s.getTransaction().begin()[ FD ]
Line_18 $$ List results = query.list()-->Line_26 $$ results = query.list()[ FD ]
Line_2 $$ public void testQueryHint() -->Line_15 $$ s.clear()[ CD ]
Line_3 $$ Department department = new Department()-->Line_8 $$ employee2.department = department[ FD ]
Line_2 $$ public void testQueryHint() -->Line_44 $$ s.close()[ CD ]
Line_9 $$ Session s = openSession()-->Line_41 $$ Criteria criteria = s.createCriteria(Employee.class).addQueryHint("ALL_ROWS").createCriteria("department").add(Restrictions.eq("name", "Sales"))[ FD ]
Line_34 $$ results = query.list()-->Line_45 $$ assertEquals(results.size(), 2)[ FD ]
Line_25 $$ query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").addQueryHint("USE_CONCAT").setParameter("departmentName", "Sales")-->Line_33 $$ query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").setComment("this is a test").addQueryHint("ALL_ROWS").setParameter("departmentName", "Sales")[ FD ]
Line_9 $$ Session s = openSession()-->Line_12 $$ s.persist(employee1)[ FD ]
Line_2 $$ public void testQueryHint() -->Line_40 $$ s.getTransaction().begin()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_5 $$ Employee employee1 = new Employee()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_18 $$ List results = query.list()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_24 $$ s.getTransaction().begin()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_45 $$ assertEquals(results.size(), 2)[ CD ]
Line_2 $$ public void testQueryHint() -->Line_26 $$ results = query.list()[ CD ]
Line_3 $$ Department department = new Department()-->Line_6 $$ employee1.department = department[ FD ]
Line_9 $$ Session s = openSession()-->Line_16 $$ s.getTransaction().begin()[ FD ]
Line_9 $$ Session s = openSession()-->Line_33 $$ query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").setComment("this is a test").addQueryHint("ALL_ROWS").setParameter("departmentName", "Sales")[ FD ]
Line_2 $$ public void testQueryHint() -->Line_33 $$ query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").setComment("this is a test").addQueryHint("ALL_ROWS").setParameter("departmentName", "Sales")[ CD ]
Line_25 $$ query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").addQueryHint("USE_CONCAT").setParameter("departmentName", "Sales")-->Line_34 $$ results = query.list()[ FD ]
Line_17 $$ Query query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").setParameter("departmentName", "Sales")-->Line_34 $$ results = query.list()[ FD ]
Line_9 $$ Session s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_2 $$ public void testQueryHint() -->Line_7 $$ Employee employee2 = new Employee()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_16 $$ s.getTransaction().begin()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_31 $$ QueryHintTestDialect.resetProcessedSql()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_10 $$ s.getTransaction().begin()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_35 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_23 $$ QueryHintTestDialect.resetProcessedSql()[ CD ]
Line_26 $$ results = query.list()-->Line_34 $$ results = query.list()[ FD ]
Line_2 $$ public void testQueryHint() -->Line_12 $$ s.persist(employee1)[ CD ]
Line_9 $$ Session s = openSession()-->Line_36 $$ s.clear()[ FD ]
Line_9 $$ Session s = openSession()-->Line_32 $$ s.getTransaction().begin()[ FD ]
Line_2 $$ public void testQueryHint() -->Line_42 $$ results = criteria.list()[ CD ]
Line_26 $$ results = query.list()-->Line_37 $$ assertEquals(results.size(), 2)[ FD ]
Line_2 $$ public void testQueryHint() -->Line_27 $$ s.getTransaction().commit()[ CD ]
Line_18 $$ List results = query.list()-->Line_45 $$ assertEquals(results.size(), 2)[ FD ]
Line_2 $$ public void testQueryHint() -->Line_3 $$ Department department = new Department()[ CD ]
Line_18 $$ List results = query.list()-->Line_42 $$ results = criteria.list()[ FD ]
Line_7 $$ Employee employee2 = new Employee()-->Line_13 $$ s.persist(employee2)[ FD ]
Line_9 $$ Session s = openSession()-->Line_24 $$ s.getTransaction().begin()[ FD ]
Line_2 $$ public void testQueryHint() -->Line_39 $$ QueryHintTestDialect.resetProcessedSql()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_13 $$ s.persist(employee2)[ CD ]
Line_26 $$ results = query.list()-->Line_29 $$ assertEquals(results.size(), 2)[ FD ]
Line_2 $$ public void testQueryHint() -->Line_25 $$ query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").addQueryHint("USE_CONCAT").setParameter("departmentName", "Sales")[ CD ]
Line_2 $$ public void testQueryHint() -->Line_41 $$ Criteria criteria = s.createCriteria(Employee.class).addQueryHint("ALL_ROWS").createCriteria("department").add(Restrictions.eq("name", "Sales"))[ CD ]
Line_42 $$ results = criteria.list()-->Line_45 $$ assertEquals(results.size(), 2)[ FD ]
Line_9 $$ Session s = openSession()-->Line_40 $$ s.getTransaction().begin()[ FD ]
Line_18 $$ List results = query.list()-->Line_34 $$ results = query.list()[ FD ]
Line_25 $$ query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").addQueryHint("USE_CONCAT").setParameter("departmentName", "Sales")-->Line_26 $$ results = query.list()[ FD ]
Line_2 $$ public void testQueryHint() -->Line_29 $$ assertEquals(results.size(), 2)[ CD ]
Line_41 $$ Criteria criteria = s.createCriteria(Employee.class).addQueryHint("ALL_ROWS").createCriteria("department").add(Restrictions.eq("name", "Sales"))-->Line_42 $$ results = criteria.list()[ FD ]
Line_17 $$ Query query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").setParameter("departmentName", "Sales")-->Line_25 $$ query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").addQueryHint("USE_CONCAT").setParameter("departmentName", "Sales")[ FD ]
Line_2 $$ public void testQueryHint() -->Line_22 $$ assertTrue(QueryHintTestDialect.getProcessedSql().contains("select "))[ CD ]
Line_3 $$ Department department = new Department()-->Line_11 $$ s.persist(department)[ FD ]
Line_2 $$ public void testQueryHint() -->Line_17 $$ Query query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").setParameter("departmentName", "Sales")[ CD ]
Line_18 $$ List results = query.list()-->Line_37 $$ assertEquals(results.size(), 2)[ FD ]
Line_2 $$ public void testQueryHint() -->Line_36 $$ s.clear()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_37 $$ assertEquals(results.size(), 2)[ CD ]
Line_2 $$ public void testQueryHint() -->Line_46 $$ assertTrue(QueryHintTestDialect.getProcessedSql().contains("select "))[ CD ]
Line_9 $$ Session s = openSession()-->Line_17 $$ Query query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").setParameter("departmentName", "Sales")[ FD ]
Line_2 $$ public void testQueryHint() -->Line_30 $$ assertTrue(QueryHintTestDialect.getProcessedSql().contains("select "))[ CD ]
Line_33 $$ query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").setComment("this is a test").addQueryHint("ALL_ROWS").setParameter("departmentName", "Sales")-->Line_34 $$ results = query.list()[ FD ]
Line_2 $$ public void testQueryHint() -->Line_21 $$ assertEquals(results.size(), 2)[ CD ]
Line_2 $$ public void testQueryHint() -->Line_20 $$ s.clear()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_38 $$ assertTrue(QueryHintTestDialect.getProcessedSql().contains("select "))[ CD ]
Line_2 $$ public void testQueryHint() -->Line_19 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testQueryHint() -->Line_11 $$ s.persist(department)[ CD ]
Line_18 $$ List results = query.list()-->Line_21 $$ assertEquals(results.size(), 2)[ FD ]
Line_18 $$ List results = query.list()-->Line_29 $$ assertEquals(results.size(), 2)[ FD ]
Line_9 $$ Session s = openSession()-->Line_19 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testQueryHint() -->Line_4 $$ department.name = "Sales"[ CD ]
Line_2 $$ public void testQueryHint() -->Line_32 $$ s.getTransaction().begin()[ CD ]
Line_17 $$ Query query = s.createQuery("FROM QueryHintTest$Employee e WHERE e.department.name = :departmentName").addQueryHint("ALL_ROWS").setParameter("departmentName", "Sales")-->Line_26 $$ results = query.list()[ FD ]
Line_2 $$ public void testQueryHint() -->Line_6 $$ employee1.department = department[ CD ]
Line_9 $$ Session s = openSession()-->Line_13 $$ s.persist(employee2)[ FD ]
