Line_18 $$ Path inDir = new Path("input")-->Line_21 $$ configure(conf, inDir, outDir, input, ExecutionEnvCheckMapClass.class, IdentityReducer.class)[ FD ]
Line_9 $$ String toFind = Shell.WINDOWS ? "C:\\fake\\PATH\\to\\hadoop\\common\\home\\bin" : "/fake/path/to/hadoop/common/home/lib/native"-->Line_10 $$ assertTrue("execution path does not include the hadoop lib location " + toFind, executionPaths.contains(toFind))[ FD ]
Line_19 $$ Path outDir = new Path("output")-->Line_22 $$ launchTest(conf, inDir, outDir, input)[ FD ]
Line_4 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_7 $$ MRApps.setEnvFromInputString(environment, conf.get(MRJobConfig.MAPRED_ADMIN_USER_ENV, MRJobConfig.DEFAULT_MAPRED_ADMIN_USER_ENV), conf)[ FD ]
Line_8 $$ String executionPaths = environment.get(Shell.WINDOWS ? "PATH" : "LD_LIBRARY_PATH")-->Line_10 $$ assertTrue("execution path does not include the hadoop lib location " + toFind, executionPaths.contains(toFind))[ FD ]
Line_5 $$ String setupHadoopHomeCommand = Shell.WINDOWS ? "HADOOP_COMMON_HOME=C:\\fake\\PATH\\to\\hadoop\\common\\home" : "HADOOP_COMMON_HOME=/fake/path/to/hadoop/common/home"-->Line_6 $$ MRApps.setEnvFromInputString(environment, setupHadoopHomeCommand, conf)[ FD ]
Line_20 $$ String input = "The input"-->Line_22 $$ launchTest(conf, inDir, outDir, input)[ FD ]
Line_17 $$ JobConf conf = new JobConf(mr.getConfig())-->Line_21 $$ configure(conf, inDir, outDir, input, ExecutionEnvCheckMapClass.class, IdentityReducer.class)[ FD ]
Line_19 $$ Path outDir = new Path("output")-->Line_21 $$ configure(conf, inDir, outDir, input, ExecutionEnvCheckMapClass.class, IdentityReducer.class)[ FD ]
Line_20 $$ String input = "The input"-->Line_21 $$ configure(conf, inDir, outDir, input, ExecutionEnvCheckMapClass.class, IdentityReducer.class)[ FD ]
Line_4 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_6 $$ MRApps.setEnvFromInputString(environment, setupHadoopHomeCommand, conf)[ FD ]
Line_18 $$ Path inDir = new Path("input")-->Line_22 $$ launchTest(conf, inDir, outDir, input)[ FD ]
Line_17 $$ JobConf conf = new JobConf(mr.getConfig())-->Line_22 $$ launchTest(conf, inDir, outDir, input)[ FD ]
Line_4 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_8 $$ String executionPaths = environment.get(Shell.WINDOWS ? "PATH" : "LD_LIBRARY_PATH")[ FD ]
