Line_6 $$ Log4Json l4j = new Log4Json()-->Line_8 $$ String outcome = l4j.toJson(new StringWriter(), "testNestedException", timeStamp, "INFO", "quoted\"", "new line\n and [ FD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_4 $$ Exception ioe = new IOException("Datacenter problems", e)[ CD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_5 $$ ThrowableInformation ti = new ThrowableInformation(ioe)[ CD ]
Line_8 $$ String outcome = l4j.toJson(new StringWriter(), "testNestedException", timeStamp, "INFO", "quoted\"", "new line\n and -->Line_10 $$ ContainerNode rootNode = Log4Json.parse(outcome)[ FD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_17 $$ node = assertNodeContains(rootNode, Log4Json.DATE)[ CD ]
Line_19 $$ String dateText = node.getTextValue()-->Line_20 $$ assertTrue("No '-' in " + dateText, dateText.contains("-"))[ FD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_6 $$ Log4Json l4j = new Log4Json()[ CD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_15 $$ JsonNode node = assertNodeContains(rootNode, Log4Json.STACK)[ CD ]
Line_15 $$ JsonNode node = assertNodeContains(rootNode, Log4Json.STACK)-->Line_19 $$ String dateText = node.getTextValue()[ FD ]
Line_7 $$ long timeStamp = Time.now()-->Line_13 $$ assertEntryEquals(rootNode, Log4Json.TIME, timeStamp)[ FD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_7 $$ long timeStamp = Time.now()[ CD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_16 $$ assertTrue("Not an array: " + node, node.isArray())[ CD ]
Line_15 $$ JsonNode node = assertNodeContains(rootNode, Log4Json.STACK)-->Line_17 $$ node = assertNodeContains(rootNode, Log4Json.DATE)[ FD ]
Line_17 $$ node = assertNodeContains(rootNode, Log4Json.DATE)-->Line_18 $$ assertTrue("Not a string: " + node, node.isTextual())[ FD ]
Line_5 $$ ThrowableInformation ti = new ThrowableInformation(ioe)-->Line_8 $$ String outcome = l4j.toJson(new StringWriter(), "testNestedException", timeStamp, "INFO", "quoted\"", "new line\n and [ FD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_12 $$ assertEntryEquals(rootNode, Log4Json.NAME, "testNestedException")[ CD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_13 $$ assertEntryEquals(rootNode, Log4Json.TIME, timeStamp)[ CD ]
Line_15 $$ JsonNode node = assertNodeContains(rootNode, Log4Json.STACK)-->Line_18 $$ assertTrue("Not a string: " + node, node.isTextual())[ FD ]
Line_10 $$ ContainerNode rootNode = Log4Json.parse(outcome)-->Line_15 $$ JsonNode node = assertNodeContains(rootNode, Log4Json.STACK)[ FD ]
Line_10 $$ ContainerNode rootNode = Log4Json.parse(outcome)-->Line_12 $$ assertEntryEquals(rootNode, Log4Json.NAME, "testNestedException")[ FD ]
Line_7 $$ long timeStamp = Time.now()-->Line_8 $$ String outcome = l4j.toJson(new StringWriter(), "testNestedException", timeStamp, "INFO", "quoted\"", "new line\n and [ FD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_3 $$ Exception e = new NoRouteToHostException("that box caught fire 3 years ago")[ CD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_10 $$ ContainerNode rootNode = Log4Json.parse(outcome)[ CD ]
Line_4 $$ Exception ioe = new IOException("Datacenter problems", e)-->Line_14 $$ assertEntryEquals(rootNode, Log4Json.EXCEPTION_CLASS, ioe.getClass().getName())[ FD ]
Line_10 $$ ContainerNode rootNode = Log4Json.parse(outcome)-->Line_17 $$ node = assertNodeContains(rootNode, Log4Json.DATE)[ FD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_19 $$ String dateText = node.getTextValue()[ CD ]
Line_8 $$ String outcome = l4j.toJson(new StringWriter(), "testNestedException", timeStamp, "INFO", "quoted\"", "new line\n and -->Line_9 $$ println("testNestedException", outcome)[ FD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_14 $$ assertEntryEquals(rootNode, Log4Json.EXCEPTION_CLASS, ioe.getClass().getName())[ CD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_20 $$ assertTrue("No '-' in " + dateText, dateText.contains("-"))[ CD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_21 $$ assertTrue("No '-' in " + dateText, dateText.contains(":"))[ CD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_18 $$ assertTrue("Not a string: " + node, node.isTextual())[ CD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_9 $$ println("testNestedException", outcome)[ CD ]
Line_17 $$ node = assertNodeContains(rootNode, Log4Json.DATE)-->Line_19 $$ String dateText = node.getTextValue()[ FD ]
Line_19 $$ String dateText = node.getTextValue()-->Line_21 $$ assertTrue("No '-' in " + dateText, dateText.contains(":"))[ FD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_11 $$ assertEntryEquals(rootNode, Log4Json.LEVEL, "INFO")[ CD ]
Line_10 $$ ContainerNode rootNode = Log4Json.parse(outcome)-->Line_11 $$ assertEntryEquals(rootNode, Log4Json.LEVEL, "INFO")[ FD ]
Line_10 $$ ContainerNode rootNode = Log4Json.parse(outcome)-->Line_13 $$ assertEntryEquals(rootNode, Log4Json.TIME, timeStamp)[ FD ]
Line_15 $$ JsonNode node = assertNodeContains(rootNode, Log4Json.STACK)-->Line_16 $$ assertTrue("Not an array: " + node, node.isArray())[ FD ]
Line_10 $$ ContainerNode rootNode = Log4Json.parse(outcome)-->Line_14 $$ assertEntryEquals(rootNode, Log4Json.EXCEPTION_CLASS, ioe.getClass().getName())[ FD ]
Line_2 $$ public void testNestedException() throws Throwable -->Line_8 $$ String outcome = l4j.toJson(new StringWriter(), "testNestedException", timeStamp, "INFO", "quoted\"", "new line\n and [ CD ]
