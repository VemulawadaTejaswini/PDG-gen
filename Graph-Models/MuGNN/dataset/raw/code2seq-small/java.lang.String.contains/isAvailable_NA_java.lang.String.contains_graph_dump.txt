Line_11 $$ final String text = literalExpression.getText()-->Line_14 $$ final String converted = LiteralFormatUtil.format(text, type)[ FD ]
Line_8 $$ final PsiType type = literalExpression.getType()-->Line_9 $$ if (!PsiType.INT.equals(type) && !PsiType.LONG.equals(type) && !PsiType.FLOAT.equals(type) && !PsiType.DOUBLE.equals(type))[ FD ]
Line_2 $$ public boolean isAvailable(@NotNull final Project project, final Editor editor, @NotNull final PsiElement element) -->Line_9 $$ if (!PsiType.INT.equals(type) && !PsiType.LONG.equals(type) && !PsiType.FLOAT.equals(type) && !PsiType.DOUBLE.equals(type))[ CD ]
Line_2 $$ public boolean isAvailable(@NotNull final Project project, final Editor editor, @NotNull final PsiElement element) -->Line_12 $$ if (text == null || text.contains("_"))[ CD ]
Line_2 $$ public boolean isAvailable(@NotNull final Project project, final Editor editor, @NotNull final PsiElement element) -->Line_8 $$ final PsiType type = literalExpression.getType()[ CD ]
Line_2 $$ public boolean isAvailable(@NotNull final Project project, final Editor editor, @NotNull final PsiElement element) -->Line_5 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(element, PsiLiteralExpression.class, false)[ CD ]
Line_2 $$ public boolean isAvailable(@NotNull final Project project, final Editor editor, @NotNull final PsiElement element) -->Line_3 $$ if (!PsiUtil.isLanguageLevel7OrHigher(element))[ CD ]
Line_11 $$ final String text = literalExpression.getText()-->Line_15 $$ return converted.length() != text.length()[ FD ]
Line_2 $$ public boolean isAvailable(@NotNull final Project project, final Editor editor, @NotNull final PsiElement element) -->Line_11 $$ final String text = literalExpression.getText()[ CD ]
Line_9 $$ if (!PsiType.INT.equals(type) && !PsiType.LONG.equals(type) && !PsiType.FLOAT.equals(type) && !PsiType.DOUBLE.equals(type))-->Line_10 $$ return false[ CD ]
Line_2 $$ public boolean isAvailable(@NotNull final Project project, final Editor editor, @NotNull final PsiElement element) -->Line_14 $$ final String converted = LiteralFormatUtil.format(text, type)[ CD ]
Line_2 $$ public boolean isAvailable(@NotNull final Project project, final Editor editor, @NotNull final PsiElement element) -->Line_15 $$ return converted.length() != text.length()[ CD ]
Line_5 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(element, PsiLiteralExpression.class, false)-->Line_6 $$ if (literalExpression == null)[ FD ]
Line_12 $$ if (text == null || text.contains("_"))-->Line_13 $$ return false[ CD ]
Line_3 $$ if (!PsiUtil.isLanguageLevel7OrHigher(element))-->Line_4 $$ return false[ CD ]
Line_2 $$ public boolean isAvailable(@NotNull final Project project, final Editor editor, @NotNull final PsiElement element) -->Line_5 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(element, PsiLiteralExpression.class, false)[ FD ]
Line_5 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(element, PsiLiteralExpression.class, false)-->Line_11 $$ final String text = literalExpression.getText()[ FD ]
Line_5 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(element, PsiLiteralExpression.class, false)-->Line_8 $$ final PsiType type = literalExpression.getType()[ FD ]
Line_11 $$ final String text = literalExpression.getText()-->Line_12 $$ if (text == null || text.contains("_"))[ FD ]
Line_2 $$ public boolean isAvailable(@NotNull final Project project, final Editor editor, @NotNull final PsiElement element) -->Line_6 $$ if (literalExpression == null)[ CD ]
Line_2 $$ public boolean isAvailable(@NotNull final Project project, final Editor editor, @NotNull final PsiElement element) -->Line_3 $$ if (!PsiUtil.isLanguageLevel7OrHigher(element))[ FD ]
Line_6 $$ if (literalExpression == null)-->Line_7 $$ return false[ CD ]
Line_8 $$ final PsiType type = literalExpression.getType()-->Line_14 $$ final String converted = LiteralFormatUtil.format(text, type)[ FD ]
Line_14 $$ final String converted = LiteralFormatUtil.format(text, type)-->Line_15 $$ return converted.length() != text.length()[ FD ]
