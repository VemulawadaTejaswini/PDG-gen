Line_6 $$ for (Module module : modules) -->Line_7 $$ roots.addAll(PyUtil.getSourceRoots(module))[ FD ]
Line_2 $$ protected boolean isTestFolder(@NotNull final VirtualFile virtualFile, @NotNull final Project project) -->Line_10 $$ return name.toLowerCase().contains("test") || roots.contains(virtualFile)[ CD ]
Line_2 $$ protected boolean isTestFolder(@NotNull final VirtualFile virtualFile, @NotNull final Project project) -->Line_10 $$ return name.toLowerCase().contains("test") || roots.contains(virtualFile)[ FD ]
Line_2 $$ protected boolean isTestFolder(@NotNull final VirtualFile virtualFile, @NotNull final Project project) -->Line_3 $$ final String name = virtualFile.getName()[ CD ]
Line_3 $$ final String name = virtualFile.getName()-->Line_10 $$ return name.toLowerCase().contains("test") || roots.contains(virtualFile)[ FD ]
Line_2 $$ protected boolean isTestFolder(@NotNull final VirtualFile virtualFile, @NotNull final Project project) -->Line_4 $$ final HashSet<VirtualFile> roots = Sets.newHashSet()[ CD ]
Line_2 $$ protected boolean isTestFolder(@NotNull final VirtualFile virtualFile, @NotNull final Project project) -->Line_9 $$ Collections.addAll(roots, ProjectRootManager.getInstance(project).getContentRoots())[ CD ]
Line_4 $$ final HashSet<VirtualFile> roots = Sets.newHashSet()-->Line_9 $$ Collections.addAll(roots, ProjectRootManager.getInstance(project).getContentRoots())[ FD ]
Line_2 $$ protected boolean isTestFolder(@NotNull final VirtualFile virtualFile, @NotNull final Project project) -->Line_3 $$ final String name = virtualFile.getName()[ FD ]
Line_2 $$ protected boolean isTestFolder(@NotNull final VirtualFile virtualFile, @NotNull final Project project) -->Line_5 $$ final Module[] modules = ModuleManager.getInstance(project).getModules()[ FD ]
Line_2 $$ protected boolean isTestFolder(@NotNull final VirtualFile virtualFile, @NotNull final Project project) -->Line_9 $$ Collections.addAll(roots, ProjectRootManager.getInstance(project).getContentRoots())[ FD ]
Line_2 $$ protected boolean isTestFolder(@NotNull final VirtualFile virtualFile, @NotNull final Project project) -->Line_5 $$ final Module[] modules = ModuleManager.getInstance(project).getModules()[ CD ]
Line_4 $$ final HashSet<VirtualFile> roots = Sets.newHashSet()-->Line_7 $$ roots.addAll(PyUtil.getSourceRoots(module))[ FD ]
Line_4 $$ final HashSet<VirtualFile> roots = Sets.newHashSet()-->Line_10 $$ return name.toLowerCase().contains("test") || roots.contains(virtualFile)[ FD ]
