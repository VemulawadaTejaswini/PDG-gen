Line_9 $$ if (member != null) -->Line_10 $$ final String name = member.getName()[ CD ]
Line_11 $$ if (INCREMENT_DECREMENT_METHODS.contains(name)) -->Line_15 $$ String replacementMethodName = name.toLowerCase().contains("increment") ? "increment" : "decrement"[ CD ]
Line_10 $$ final String name = member.getName()-->Line_15 $$ String replacementMethodName = name.toLowerCase().contains("increment") ? "increment" : "decrement"[ FD ]
Line_21 $$ if ("set".equals(name) || "lazySet".equals(name) || "getAndSet".equals(name)) -->Line_22 $$ if ("getAndSet".equals(name) && isMethodCallWithIgnoredReturnValue(context))[ CD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_18 $$ if (isMethodCallWithIgnoredReturnValue(context))[ FD ]
Line_10 $$ final String name = member.getName()-->Line_26 $$ if ("get".equals(name)) [ FD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_9 $$ if (member != null) [ FD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_37 $$ return null[ CD ]
Line_9 $$ if (member != null) -->Line_31 $$ if (context instanceof PsiNewExpression) [ CD ]
Line_9 $$ if (member != null) -->Line_11 $$ if (INCREMENT_DECREMENT_METHODS.contains(name)) [ CD ]
Line_11 $$ if (INCREMENT_DECREMENT_METHODS.contains(name)) -->Line_12 $$ if (isMethodCallWithIgnoredReturnValue(context))[ CD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_9 $$ if (member != null) [ CD ]
Line_11 $$ if (INCREMENT_DECREMENT_METHODS.contains(name)) -->Line_16 $$ return new TypeConversionDescriptor("$v$.$method$()", "$v$." + replacementMethodName + "()")[ CD ]
Line_28 $$ if (IDENTICAL_METHODS.contains(name)) -->Line_29 $$ return new TypeConversionDescriptorBase()[ CD ]
Line_3 $$ if (!(from instanceof PsiClassType) || !(from.getCanonicalText().equals(AtomicInteger.class.getName()) || from.getCanonicalText().equals(AtomicLong.class.getName()))) -->Line_4 $$ return null[ CD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_12 $$ if (isMethodCallWithIgnoredReturnValue(context))[ FD ]
Line_18 $$ if (isMethodCallWithIgnoredReturnValue(context))-->Line_19 $$ return null[ CD ]
Line_32 $$ final int parametersCount = getParametersCount((PsiCallExpression) context)-->Line_33 $$ if (parametersCount != -1) [ FD ]
Line_22 $$ if ("getAndSet".equals(name) && isMethodCallWithIgnoredReturnValue(context))-->Line_23 $$ return null[ CD ]
Line_11 $$ if (INCREMENT_DECREMENT_METHODS.contains(name)) -->Line_17 $$ if ("getAndAdd".equals(name) || "addAndGet".equals(name)) [ CD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_31 $$ if (context instanceof PsiNewExpression) [ FD ]
Line_10 $$ final String name = member.getName()-->Line_28 $$ if (IDENTICAL_METHODS.contains(name)) [ FD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_22 $$ if ("getAndSet".equals(name) && isMethodCallWithIgnoredReturnValue(context))[ FD ]
Line_17 $$ if ("getAndAdd".equals(name) || "addAndGet".equals(name)) -->Line_18 $$ if (isMethodCallWithIgnoredReturnValue(context))[ CD ]
Line_31 $$ if (context instanceof PsiNewExpression) -->Line_33 $$ if (parametersCount != -1) [ CD ]
Line_26 $$ if ("get".equals(name)) -->Line_27 $$ return new TypeConversionDescriptor("$l$.get()", "$l$.sum()")[ CD ]
Line_10 $$ final String name = member.getName()-->Line_17 $$ if ("getAndAdd".equals(name) || "addAndGet".equals(name)) [ FD ]
Line_21 $$ if ("set".equals(name) || "lazySet".equals(name) || "getAndSet".equals(name)) -->Line_24 $$ String template = getParametersCount((PsiCallExpression) context.getParent()) == 1 ? "$l$.reset()" : "$l$.add($v$ - $l$.sum())"[ CD ]
Line_33 $$ if (parametersCount != -1) -->Line_34 $$ return new TypeConversionDescriptor("new $className$(" + (parametersCount == 1 ? "$p$" : "") + ")", "new " + JAVA_UTIL_CONCURRENT_ATOMIC_LONG_ADDER + "()")[ CD ]
Line_31 $$ if (context instanceof PsiNewExpression) -->Line_32 $$ final int parametersCount = getParametersCount((PsiCallExpression) context)[ CD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_6 $$ if (!(to instanceof PsiClassType) || !(to.getCanonicalText().equals(JAVA_UTIL_CONCURRENT_ATOMIC_LONG_ADDER))) [ FD ]
Line_10 $$ final String name = member.getName()-->Line_21 $$ if ("set".equals(name) || "lazySet".equals(name) || "getAndSet".equals(name)) [ FD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_24 $$ String template = getParametersCount((PsiCallExpression) context.getParent()) == 1 ? "$l$.reset()" : "$l$.add($v$ - $l$.sum())"[ FD ]
Line_12 $$ if (isMethodCallWithIgnoredReturnValue(context))-->Line_13 $$ return null[ CD ]
Line_6 $$ if (!(to instanceof PsiClassType) || !(to.getCanonicalText().equals(JAVA_UTIL_CONCURRENT_ATOMIC_LONG_ADDER))) -->Line_7 $$ return null[ CD ]
Line_21 $$ if ("set".equals(name) || "lazySet".equals(name) || "getAndSet".equals(name)) -->Line_25 $$ return new TypeConversionDescriptor("$l$.$setMethodName$($v$)", template)[ CD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_3 $$ if (!(from instanceof PsiClassType) || !(from.getCanonicalText().equals(AtomicInteger.class.getName()) || from.getCanonicalText().equals(AtomicLong.class.getName()))) [ FD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_6 $$ if (!(to instanceof PsiClassType) || !(to.getCanonicalText().equals(JAVA_UTIL_CONCURRENT_ATOMIC_LONG_ADDER))) [ CD ]
Line_21 $$ if ("set".equals(name) || "lazySet".equals(name) || "getAndSet".equals(name)) -->Line_26 $$ if ("get".equals(name)) [ CD ]
Line_17 $$ if ("getAndAdd".equals(name) || "addAndGet".equals(name)) -->Line_20 $$ return new TypeConversionDescriptor("$v$.$method$($toAdd$)", "$v$.add($toAdd$)")[ CD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_10 $$ final String name = member.getName()[ FD ]
Line_17 $$ if ("getAndAdd".equals(name) || "addAndGet".equals(name)) -->Line_21 $$ if ("set".equals(name) || "lazySet".equals(name) || "getAndSet".equals(name)) [ CD ]
Line_10 $$ final String name = member.getName()-->Line_11 $$ if (INCREMENT_DECREMENT_METHODS.contains(name)) [ FD ]
Line_2 $$ public TypeConversionDescriptorBase findConversion(PsiType from, PsiType to, PsiMember member, PsiExpression context, TypeMigrationLabeler labeler) -->Line_3 $$ if (!(from instanceof PsiClassType) || !(from.getCanonicalText().equals(AtomicInteger.class.getName()) || from.getCanonicalText().equals(AtomicLong.class.getName()))) [ CD ]
Line_10 $$ final String name = member.getName()-->Line_22 $$ if ("getAndSet".equals(name) && isMethodCallWithIgnoredReturnValue(context))[ FD ]
Line_26 $$ if ("get".equals(name)) -->Line_28 $$ if (IDENTICAL_METHODS.contains(name)) [ CD ]
