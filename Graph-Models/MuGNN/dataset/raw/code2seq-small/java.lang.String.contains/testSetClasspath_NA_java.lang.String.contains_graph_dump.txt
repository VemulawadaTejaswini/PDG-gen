Line_5 $$ Job job = Job.getInstance(conf)-->Line_14 $$ String mrAppClasspath = job.getConfiguration().get(MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH, MRJobConfig.DEFAULT_MAPREDUCE_CROSS_PLATFORM_APPLICATION_CLASSPATH)[ FD ]
Line_9 $$ String yarnAppClasspath = job.getConfiguration().get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH))-->Line_13 $$ assertTrue(environment.get("CLASSPATH").contains(yarnAppClasspath))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ Job job = Job.getInstance(conf)[ FD ]
Line_2 $$ public void testSetClasspath() throws IOException -->Line_10 $$ if (yarnAppClasspath != null) [ CD ]
Line_10 $$ if (yarnAppClasspath != null) -->Line_11 $$ yarnAppClasspath = yarnAppClasspath.replaceAll(",\\s*", ApplicationConstants.CLASS_PATH_SEPARATOR).trim()[ CD ]
Line_6 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_18 $$ assertTrue(environment.get("CLASSPATH").contains(mrAppClasspath))[ FD ]
Line_14 $$ String mrAppClasspath = job.getConfiguration().get(MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH, MRJobConfig.DEFAULT_MAPREDUCE_CROSS_PLATFORM_APPLICATION_CLASSPATH)-->Line_15 $$ if (mrAppClasspath != null) [ FD ]
Line_2 $$ public void testSetClasspath() throws IOException -->Line_18 $$ assertTrue(environment.get("CLASSPATH").contains(mrAppClasspath))[ CD ]
Line_2 $$ public void testSetClasspath() throws IOException -->Line_5 $$ Job job = Job.getInstance(conf)[ CD ]
Line_9 $$ String yarnAppClasspath = job.getConfiguration().get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH))-->Line_11 $$ yarnAppClasspath = yarnAppClasspath.replaceAll(",\\s*", ApplicationConstants.CLASS_PATH_SEPARATOR).trim()[ FD ]
Line_14 $$ String mrAppClasspath = job.getConfiguration().get(MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH, MRJobConfig.DEFAULT_MAPREDUCE_CROSS_PLATFORM_APPLICATION_CLASSPATH)-->Line_16 $$ mrAppClasspath = mrAppClasspath.replaceAll(",\\s*", ApplicationConstants.CLASS_PATH_SEPARATOR).trim()[ FD ]
Line_5 $$ Job job = Job.getInstance(conf)-->Line_7 $$ MRApps.setClasspath(environment, job.getConfiguration())[ FD ]
Line_16 $$ mrAppClasspath = mrAppClasspath.replaceAll(",\\s*", ApplicationConstants.CLASS_PATH_SEPARATOR).trim()-->Line_18 $$ assertTrue(environment.get("CLASSPATH").contains(mrAppClasspath))[ FD ]
Line_5 $$ Job job = Job.getInstance(conf)-->Line_9 $$ String yarnAppClasspath = job.getConfiguration().get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH))[ FD ]
Line_6 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_13 $$ assertTrue(environment.get("CLASSPATH").contains(yarnAppClasspath))[ FD ]
Line_2 $$ public void testSetClasspath() throws IOException -->Line_9 $$ String yarnAppClasspath = job.getConfiguration().get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH))[ CD ]
Line_6 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_7 $$ MRApps.setClasspath(environment, job.getConfiguration())[ FD ]
Line_14 $$ String mrAppClasspath = job.getConfiguration().get(MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH, MRJobConfig.DEFAULT_MAPREDUCE_CROSS_PLATFORM_APPLICATION_CLASSPATH)-->Line_18 $$ assertTrue(environment.get("CLASSPATH").contains(mrAppClasspath))[ FD ]
Line_15 $$ if (mrAppClasspath != null) -->Line_16 $$ mrAppClasspath = mrAppClasspath.replaceAll(",\\s*", ApplicationConstants.CLASS_PATH_SEPARATOR).trim()[ CD ]
Line_2 $$ public void testSetClasspath() throws IOException -->Line_7 $$ MRApps.setClasspath(environment, job.getConfiguration())[ CD ]
Line_2 $$ public void testSetClasspath() throws IOException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_9 $$ String yarnAppClasspath = job.getConfiguration().get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH))-->Line_10 $$ if (yarnAppClasspath != null) [ FD ]
Line_11 $$ yarnAppClasspath = yarnAppClasspath.replaceAll(",\\s*", ApplicationConstants.CLASS_PATH_SEPARATOR).trim()-->Line_13 $$ assertTrue(environment.get("CLASSPATH").contains(yarnAppClasspath))[ FD ]
Line_2 $$ public void testSetClasspath() throws IOException -->Line_4 $$ conf.setBoolean(MRConfig.MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM, true)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setBoolean(MRConfig.MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM, true)[ FD ]
Line_2 $$ public void testSetClasspath() throws IOException -->Line_6 $$ Map<String, String> environment = new HashMap<String, String>()[ CD ]
Line_2 $$ public void testSetClasspath() throws IOException -->Line_14 $$ String mrAppClasspath = job.getConfiguration().get(MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH, MRJobConfig.DEFAULT_MAPREDUCE_CROSS_PLATFORM_APPLICATION_CLASSPATH)[ CD ]
Line_2 $$ public void testSetClasspath() throws IOException -->Line_13 $$ assertTrue(environment.get("CLASSPATH").contains(yarnAppClasspath))[ CD ]
Line_2 $$ public void testSetClasspath() throws IOException -->Line_15 $$ if (mrAppClasspath != null) [ CD ]
