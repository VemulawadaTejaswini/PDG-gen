Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_8 $$ File dataDir1Actual = new File(dataDir1, "1")[ CD ]
Line_19 $$ String si = DataNodeTestUtils.getFSDataset(dn).getStorageInfo()-->Line_20 $$ assertTrue("The DN should have started with this directory", si.contains(dataDir1Actual.getPath()))[ FD ]
Line_12 $$ File dataDir2Actual = new File(dataDir2, "2")-->Line_21 $$ assertFalse("The DN shouldn't have a bad directory.", si.contains(dataDir2Actual.getPath()))[ FD ]
Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_11 $$ prepareDirToFail(dataDir2)[ CD ]
Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_4 $$ cluster.shutdownDataNodes()[ CD ]
Line_8 $$ File dataDir1Actual = new File(dataDir1, "1")-->Line_9 $$ dataDir1Actual.mkdirs()[ FD ]
Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_3 $$ assumeTrue(!System.getProperty("os.name").startsWith("Windows"))[ CD ]
Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_13 $$ conf.set(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY, dataDir1Actual.getPath() + "," + dataDir2Actual.getPath())[ CD ]
Line_8 $$ File dataDir1Actual = new File(dataDir1, "1")-->Line_13 $$ conf.set(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY, dataDir1Actual.getPath() + "," + dataDir2Actual.getPath())[ FD ]
Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_12 $$ File dataDir2Actual = new File(dataDir2, "2")[ CD ]
Line_19 $$ String si = DataNodeTestUtils.getFSDataset(dn).getStorageInfo()-->Line_21 $$ assertFalse("The DN shouldn't have a bad directory.", si.contains(dataDir2Actual.getPath()))[ FD ]
Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_5 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY, 1)[ CD ]
Line_18 $$ DataNode dn = cluster.getDataNodes().get(0)-->Line_19 $$ String si = DataNodeTestUtils.getFSDataset(dn).getStorageInfo()[ FD ]
Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_14 $$ cluster.startDataNodes(conf, 1, false, null, null)[ CD ]
Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_6 $$ File tld = new File(MiniDFSCluster.getBaseDirectory(), "badData")[ CD ]
Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_10 $$ File dataDir2 = new File(tld, "data2")[ CD ]
Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_7 $$ File dataDir1 = new File(tld, "data1")[ CD ]
Line_10 $$ File dataDir2 = new File(tld, "data2")-->Line_11 $$ prepareDirToFail(dataDir2)[ FD ]
Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_9 $$ dataDir1Actual.mkdirs()[ CD ]
Line_8 $$ File dataDir1Actual = new File(dataDir1, "1")-->Line_20 $$ assertTrue("The DN should have started with this directory", si.contains(dataDir1Actual.getPath()))[ FD ]
Line_12 $$ File dataDir2Actual = new File(dataDir2, "2")-->Line_13 $$ conf.set(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY, dataDir1Actual.getPath() + "," + dataDir2Actual.getPath())[ FD ]
Line_2 $$ public void testValidVolumesAtStartup() throws Exception -->Line_15 $$ cluster.waitActive()[ CD ]
Line_10 $$ File dataDir2 = new File(tld, "data2")-->Line_24 $$ FileUtil.chmod(dataDir2.toString(), "755")[ FD ]
