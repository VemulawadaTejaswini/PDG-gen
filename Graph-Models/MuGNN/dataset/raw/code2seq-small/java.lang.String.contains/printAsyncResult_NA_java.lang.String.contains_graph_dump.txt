Line_3 $$ StringWriter writer = new StringWriter()-->Line_5 $$ assertTrue(writer.toString().contains("Async started = true"))[ FD ]
Line_3 $$ StringWriter writer = new StringWriter()-->Line_4 $$ MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResult", "true")).andDo(print(writer)).andExpect(request().asyncStarted()).andReturn()[ FD ]
Line_6 $$ writer = new StringWriter()-->Line_9 $$ assertTrue(writer.toString().contains("Async started = false"))[ FD ]
Line_2 $$ public void printAsyncResult() throws Exception -->Line_5 $$ assertTrue(writer.toString().contains("Async started = true"))[ CD ]
Line_6 $$ writer = new StringWriter()-->Line_8 $$ this.mockMvc.perform(asyncDispatch(mvcResult)).andDo(print(writer)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON)).andExpect(content().string("[ FD ]
Line_2 $$ public void printAsyncResult() throws Exception -->Line_8 $$ this.mockMvc.perform(asyncDispatch(mvcResult)).andDo(print(writer)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON)).andExpect(content().string("[ CD ]
Line_2 $$ public void printAsyncResult() throws Exception -->Line_6 $$ writer = new StringWriter()[ CD ]
Line_3 $$ StringWriter writer = new StringWriter()-->Line_8 $$ this.mockMvc.perform(asyncDispatch(mvcResult)).andDo(print(writer)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON)).andExpect(content().string("[ FD ]
Line_2 $$ public void printAsyncResult() throws Exception -->Line_3 $$ StringWriter writer = new StringWriter()[ CD ]
Line_2 $$ public void printAsyncResult() throws Exception -->Line_7 $$ this.asyncController.onMessage("Joe")[ CD ]
Line_2 $$ public void printAsyncResult() throws Exception -->Line_9 $$ assertTrue(writer.toString().contains("Async started = false"))[ CD ]
Line_3 $$ StringWriter writer = new StringWriter()-->Line_9 $$ assertTrue(writer.toString().contains("Async started = false"))[ FD ]
Line_2 $$ public void printAsyncResult() throws Exception -->Line_4 $$ MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResult", "true")).andDo(print(writer)).andExpect(request().asyncStarted()).andReturn()[ CD ]
Line_4 $$ MvcResult mvcResult = this.mockMvc.perform(get("/1").param("deferredResult", "true")).andDo(print(writer)).andExpect(request().asyncStarted()).andReturn()-->Line_8 $$ this.mockMvc.perform(asyncDispatch(mvcResult)).andDo(print(writer)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON)).andExpect(content().string("[ FD ]
Line_3 $$ StringWriter writer = new StringWriter()-->Line_6 $$ writer = new StringWriter()[ FD ]
