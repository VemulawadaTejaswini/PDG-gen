Line_12 $$ int exitCode = runTool(conf, jc, new String[] -->Line_13 $$ assertEquals("Exit code", -1, exitCode)[ FD ]
Line_3 $$ CLI jc = createJobClient()-->Line_14 $$ exitCode = runTool(conf, jc, new String[] [ FD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_16 $$ String answer = new String(out.toByteArray())[ CD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_14 $$ exitCode = runTool(conf, jc, new String[] [ CD ]
Line_12 $$ int exitCode = runTool(conf, jc, new String[] -->Line_14 $$ exitCode = runTool(conf, jc, new String[] [ FD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_9 $$ String fconUri = new Path(fcon.getAbsolutePath()).makeQualified(localFs.getUri(), localFs.getWorkingDirectory()).toUri().toString()[ CD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_4 $$ Job job = MapReduceTestUtil.createJob(conf, getInputDir(), getOutputDir(), 1, 1, "ping")[ FD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()[ CD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_8 $$ FileSystem localFs = FileSystem.getLocal(conf)[ FD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_6 $$ job.setPriority(JobPriority.NORMAL)[ CD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_3 $$ CLI jc = createJobClient()[ CD ]
Line_7 $$ File fcon = File.createTempFile("config", ".xml")-->Line_9 $$ String fconUri = new Path(fcon.getAbsolutePath()).makeQualified(localFs.getUri(), localFs.getWorkingDirectory()).toUri().toString()[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_16 $$ String answer = new String(out.toByteArray())[ FD ]
Line_14 $$ exitCode = runTool(conf, jc, new String[] -->Line_15 $$ assertEquals("Exit code", 0, exitCode)[ FD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_10 $$ job.getConfiguration().writeXml(new FileOutputStream(fcon))[ CD ]
Line_12 $$ int exitCode = runTool(conf, jc, new String[] -->Line_15 $$ assertEquals("Exit code", 0, exitCode)[ FD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_7 $$ File fcon = File.createTempFile("config", ".xml")[ CD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_13 $$ assertEquals("Exit code", -1, exitCode)[ CD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_17 $$ assertTrue(answer.contains("Created job "))[ CD ]
Line_4 $$ Job job = MapReduceTestUtil.createJob(conf, getInputDir(), getOutputDir(), 1, 1, "ping")-->Line_5 $$ job.setJobName("mr")[ FD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_12 $$ int exitCode = runTool(conf, jc, new String[] [ FD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_12 $$ int exitCode = runTool(conf, jc, new String[] [ CD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_5 $$ job.setJobName("mr")[ CD ]
Line_4 $$ Job job = MapReduceTestUtil.createJob(conf, getInputDir(), getOutputDir(), 1, 1, "ping")-->Line_10 $$ job.getConfiguration().writeXml(new FileOutputStream(fcon))[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_12 $$ int exitCode = runTool(conf, jc, new String[] [ FD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_8 $$ FileSystem localFs = FileSystem.getLocal(conf)[ CD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_14 $$ exitCode = runTool(conf, jc, new String[] [ FD ]
Line_16 $$ String answer = new String(out.toByteArray())-->Line_17 $$ assertTrue(answer.contains("Created job "))[ FD ]
Line_3 $$ CLI jc = createJobClient()-->Line_12 $$ int exitCode = runTool(conf, jc, new String[] [ FD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_4 $$ Job job = MapReduceTestUtil.createJob(conf, getInputDir(), getOutputDir(), 1, 1, "ping")[ CD ]
Line_8 $$ FileSystem localFs = FileSystem.getLocal(conf)-->Line_9 $$ String fconUri = new Path(fcon.getAbsolutePath()).makeQualified(localFs.getUri(), localFs.getWorkingDirectory()).toUri().toString()[ FD ]
Line_4 $$ Job job = MapReduceTestUtil.createJob(conf, getInputDir(), getOutputDir(), 1, 1, "ping")-->Line_6 $$ job.setPriority(JobPriority.NORMAL)[ FD ]
Line_2 $$ private void testSubmit(Configuration conf) throws Exception -->Line_15 $$ assertEquals("Exit code", 0, exitCode)[ CD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_14 $$ exitCode = runTool(conf, jc, new String[] [ FD ]
