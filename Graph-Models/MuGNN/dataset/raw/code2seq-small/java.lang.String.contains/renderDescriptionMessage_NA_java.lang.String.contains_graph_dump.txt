Line_15 $$ message = StringUtil.replace(message, " #loc", "")-->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ FD ]
Line_14 $$ message = StringUtil.replace(message, "#loc ", "")-->Line_25 $$ message = StringUtil.replace(message, "#end", "")[ FD ]
Line_19 $$ message = StringUtil.replace(message, "#ref", ref)-->Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) [ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_16 $$ message = StringUtil.replace(message, "#loc", "")[ FD ]
Line_23 $$ message = message.substring(0, endIndex)-->Line_25 $$ message = StringUtil.replace(message, "#end", "")[ FD ]
Line_19 $$ message = StringUtil.replace(message, "#ref", ref)-->Line_23 $$ message = message.substring(0, endIndex)[ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_13 $$ message = StringUtil.replace(message, "</code>", "'")[ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_25 $$ message = StringUtil.replace(message, "#end", "")[ FD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_13 $$ message = StringUtil.replace(message, "</code>", "'")[ CD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) [ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_15 $$ message = StringUtil.replace(message, " #loc", "")[ FD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_21 $$ final int endIndex = (flags & TRIM_AT_END) != 0 ? message.indexOf("#end") : (flags & TRIM_AT_TREE_END) != 0 ? message.indexOf("#treeend") : -1[ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_16 $$ message = StringUtil.replace(message, "#loc", "")[ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_23 $$ message = message.substring(0, endIndex)[ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_25 $$ message = StringUtil.replace(message, "#end", "")[ FD ]
Line_19 $$ message = StringUtil.replace(message, "#ref", ref)-->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ FD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_23 $$ message = message.substring(0, endIndex)[ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_4 $$ if (message == null)[ FD ]
Line_26 $$ message = StringUtil.replace(message, "#treeend", "")-->Line_28 $$ message = unescapeXmlCode(message)[ FD ]
Line_21 $$ final int endIndex = (flags & TRIM_AT_END) != 0 ? message.indexOf("#end") : (flags & TRIM_AT_TREE_END) != 0 ? message.indexOf("#treeend") : -1-->Line_23 $$ message = message.substring(0, endIndex)[ FD ]
Line_14 $$ message = StringUtil.replace(message, "#loc ", "")-->Line_26 $$ message = StringUtil.replace(message, "#treeend", "")[ FD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_14 $$ message = StringUtil.replace(message, "#loc ", "")[ FD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ FD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_14 $$ message = StringUtil.replace(message, "#loc ", "")[ CD ]
Line_17 $$ if (message.contains("#ref")) -->Line_19 $$ message = StringUtil.replace(message, "#ref", ref)[ CD ]
Line_16 $$ message = StringUtil.replace(message, "#loc", "")-->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ FD ]
Line_17 $$ if (message.contains("#ref")) -->Line_18 $$ String ref = extractHighlightedText(descriptor, element)[ CD ]
Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) -->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ CD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_3 $$ String message = descriptor.getDescriptionTemplate()[ FD ]
Line_13 $$ message = StringUtil.replace(message, "</code>", "'")-->Line_15 $$ message = StringUtil.replace(message, " #loc", "")[ FD ]
Line_26 $$ message = StringUtil.replace(message, "#treeend", "")-->Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) [ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_14 $$ message = StringUtil.replace(message, "#loc ", "")[ FD ]
Line_19 $$ message = StringUtil.replace(message, "#ref", ref)-->Line_21 $$ final int endIndex = (flags & TRIM_AT_END) != 0 ? message.indexOf("#end") : (flags & TRIM_AT_TREE_END) != 0 ? message.indexOf("#treeend") : -1[ FD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_26 $$ message = StringUtil.replace(message, "#treeend", "")[ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_17 $$ if (message.contains("#ref")) [ FD ]
Line_16 $$ message = StringUtil.replace(message, "#loc", "")-->Line_21 $$ final int endIndex = (flags & TRIM_AT_END) != 0 ? message.indexOf("#end") : (flags & TRIM_AT_TREE_END) != 0 ? message.indexOf("#treeend") : -1[ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) [ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_17 $$ if (message.contains("#ref")) [ FD ]
Line_16 $$ message = StringUtil.replace(message, "#loc", "")-->Line_28 $$ message = unescapeXmlCode(message)[ FD ]
Line_15 $$ message = StringUtil.replace(message, " #loc", "")-->Line_19 $$ message = StringUtil.replace(message, "#ref", ref)[ FD ]
Line_16 $$ message = StringUtil.replace(message, "#loc", "")-->Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) [ FD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_17 $$ if (message.contains("#ref")) [ CD ]
Line_23 $$ message = message.substring(0, endIndex)-->Line_28 $$ message = unescapeXmlCode(message)[ FD ]
Line_14 $$ message = StringUtil.replace(message, "#loc ", "")-->Line_19 $$ message = StringUtil.replace(message, "#ref", ref)[ FD ]
Line_14 $$ message = StringUtil.replace(message, "#loc ", "")-->Line_17 $$ if (message.contains("#ref")) [ FD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_22 $$ if (endIndex > 0) [ CD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) [ CD ]
Line_15 $$ message = StringUtil.replace(message, " #loc", "")-->Line_23 $$ message = message.substring(0, endIndex)[ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_12 $$ message = StringUtil.replace(message, "<code>", "'")[ FD ]
Line_15 $$ message = StringUtil.replace(message, " #loc", "")-->Line_21 $$ final int endIndex = (flags & TRIM_AT_END) != 0 ? message.indexOf("#end") : (flags & TRIM_AT_TREE_END) != 0 ? message.indexOf("#treeend") : -1[ FD ]
Line_16 $$ message = StringUtil.replace(message, "#loc", "")-->Line_25 $$ message = StringUtil.replace(message, "#end", "")[ FD ]
Line_14 $$ message = StringUtil.replace(message, "#loc ", "")-->Line_16 $$ message = StringUtil.replace(message, "#loc", "")[ FD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_25 $$ message = StringUtil.replace(message, "#end", "")[ CD ]
Line_19 $$ message = StringUtil.replace(message, "#ref", ref)-->Line_28 $$ message = unescapeXmlCode(message)[ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_13 $$ message = StringUtil.replace(message, "</code>", "'")[ FD ]
Line_14 $$ message = StringUtil.replace(message, "#loc ", "")-->Line_23 $$ message = message.substring(0, endIndex)[ FD ]
Line_16 $$ message = StringUtil.replace(message, "#loc", "")-->Line_23 $$ message = message.substring(0, endIndex)[ FD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_16 $$ message = StringUtil.replace(message, "#loc", "")[ FD ]
Line_22 $$ if (endIndex > 0) -->Line_23 $$ message = message.substring(0, endIndex)[ CD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_16 $$ message = StringUtil.replace(message, "#loc", "")[ CD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_28 $$ message = unescapeXmlCode(message)[ FD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_13 $$ message = StringUtil.replace(message, "</code>", "'")[ FD ]
Line_16 $$ message = StringUtil.replace(message, "#loc", "")-->Line_26 $$ message = StringUtil.replace(message, "#treeend", "")[ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ FD ]
Line_16 $$ message = StringUtil.replace(message, "#loc", "")-->Line_17 $$ if (message.contains("#ref")) [ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")[ FD ]
Line_14 $$ message = StringUtil.replace(message, "#loc ", "")-->Line_15 $$ message = StringUtil.replace(message, " #loc", "")[ FD ]
Line_25 $$ message = StringUtil.replace(message, "#end", "")-->Line_26 $$ message = StringUtil.replace(message, "#treeend", "")[ FD ]
Line_6 $$ if ((flags & APPEND_LINE_NUMBER) != 0 && descriptor instanceof ProblemDescriptor && !message.contains("#ref") && message.contains("#loc")) -->Line_8 $$ if (lineNumber >= 0) [ CD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_15 $$ message = StringUtil.replace(message, " #loc", "")[ FD ]
Line_26 $$ message = StringUtil.replace(message, "#treeend", "")-->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ FD ]
Line_15 $$ message = StringUtil.replace(message, " #loc", "")-->Line_17 $$ if (message.contains("#ref")) [ FD ]
Line_19 $$ message = StringUtil.replace(message, "#ref", ref)-->Line_25 $$ message = StringUtil.replace(message, "#end", "")[ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_28 $$ message = unescapeXmlCode(message)[ FD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_17 $$ if (message.contains("#ref")) [ FD ]
Line_19 $$ message = StringUtil.replace(message, "#ref", ref)-->Line_26 $$ message = StringUtil.replace(message, "#treeend", "")[ FD ]
Line_25 $$ message = StringUtil.replace(message, "#end", "")-->Line_28 $$ message = unescapeXmlCode(message)[ FD ]
Line_15 $$ message = StringUtil.replace(message, " #loc", "")-->Line_16 $$ message = StringUtil.replace(message, "#loc", "")[ FD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_26 $$ message = StringUtil.replace(message, "#treeend", "")[ CD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_21 $$ final int endIndex = (flags & TRIM_AT_END) != 0 ? message.indexOf("#end") : (flags & TRIM_AT_TREE_END) != 0 ? message.indexOf("#treeend") : -1[ CD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_21 $$ final int endIndex = (flags & TRIM_AT_END) != 0 ? message.indexOf("#end") : (flags & TRIM_AT_TREE_END) != 0 ? message.indexOf("#treeend") : -1[ FD ]
Line_4 $$ if (message == null)-->Line_5 $$ return ""[ CD ]
Line_6 $$ if ((flags & APPEND_LINE_NUMBER) != 0 && descriptor instanceof ProblemDescriptor && !message.contains("#ref") && message.contains("#loc")) -->Line_7 $$ final int lineNumber = ((ProblemDescriptor) descriptor).getLineNumber()[ CD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_23 $$ message = message.substring(0, endIndex)[ FD ]
Line_15 $$ message = StringUtil.replace(message, " #loc", "")-->Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) [ FD ]
Line_14 $$ message = StringUtil.replace(message, "#loc ", "")-->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ FD ]
Line_13 $$ message = StringUtil.replace(message, "</code>", "'")-->Line_25 $$ message = StringUtil.replace(message, "#end", "")[ FD ]
Line_15 $$ message = StringUtil.replace(message, " #loc", "")-->Line_28 $$ message = unescapeXmlCode(message)[ FD ]
Line_28 $$ message = unescapeXmlCode(message)-->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ FD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_3 $$ String message = descriptor.getDescriptionTemplate()[ CD ]
Line_15 $$ message = StringUtil.replace(message, " #loc", "")-->Line_26 $$ message = StringUtil.replace(message, "#treeend", "")[ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_14 $$ message = StringUtil.replace(message, "#loc ", "")[ FD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_19 $$ message = StringUtil.replace(message, "#ref", ref)[ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_26 $$ message = StringUtil.replace(message, "#treeend", "")[ FD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_12 $$ message = StringUtil.replace(message, "<code>", "'")[ CD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_4 $$ if (message == null)[ CD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_15 $$ message = StringUtil.replace(message, " #loc", "")[ CD ]
Line_13 $$ message = StringUtil.replace(message, "</code>", "'")-->Line_26 $$ message = StringUtil.replace(message, "#treeend", "")[ FD ]
Line_23 $$ message = message.substring(0, endIndex)-->Line_26 $$ message = StringUtil.replace(message, "#treeend", "")[ FD ]
Line_14 $$ message = StringUtil.replace(message, "#loc ", "")-->Line_28 $$ message = unescapeXmlCode(message)[ FD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_6 $$ if ((flags & APPEND_LINE_NUMBER) != 0 && descriptor instanceof ProblemDescriptor && !message.contains("#ref") && message.contains("#loc")) [ CD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_25 $$ message = StringUtil.replace(message, "#end", "")[ FD ]
Line_13 $$ message = StringUtil.replace(message, "</code>", "'")-->Line_16 $$ message = StringUtil.replace(message, "#loc", "")[ FD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_32 $$ return message[ CD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_6 $$ if ((flags & APPEND_LINE_NUMBER) != 0 && descriptor instanceof ProblemDescriptor && !message.contains("#ref") && message.contains("#loc")) [ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_12 $$ message = StringUtil.replace(message, "<code>", "'")[ FD ]
Line_7 $$ final int lineNumber = ((ProblemDescriptor) descriptor).getLineNumber()-->Line_8 $$ if (lineNumber >= 0) [ FD ]
Line_13 $$ message = StringUtil.replace(message, "</code>", "'")-->Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) [ FD ]
Line_13 $$ message = StringUtil.replace(message, "</code>", "'")-->Line_19 $$ message = StringUtil.replace(message, "#ref", ref)[ FD ]
Line_25 $$ message = StringUtil.replace(message, "#end", "")-->Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) [ FD ]
Line_13 $$ message = StringUtil.replace(message, "</code>", "'")-->Line_23 $$ message = message.substring(0, endIndex)[ FD ]
Line_8 $$ if (lineNumber >= 0) -->Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")[ CD ]
Line_2 $$ public static String renderDescriptionMessage(@NotNull CommonProblemDescriptor descriptor, PsiElement element, @FlagConstant int flags) -->Line_18 $$ String ref = extractHighlightedText(descriptor, element)[ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_19 $$ message = StringUtil.replace(message, "#ref", ref)[ FD ]
Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) -->Line_28 $$ message = unescapeXmlCode(message)[ CD ]
Line_14 $$ message = StringUtil.replace(message, "#loc ", "")-->Line_21 $$ final int endIndex = (flags & TRIM_AT_END) != 0 ? message.indexOf("#end") : (flags & TRIM_AT_TREE_END) != 0 ? message.indexOf("#treeend") : -1[ FD ]
Line_12 $$ message = StringUtil.replace(message, "<code>", "'")-->Line_15 $$ message = StringUtil.replace(message, " #loc", "")[ FD ]
Line_15 $$ message = StringUtil.replace(message, " #loc", "")-->Line_25 $$ message = StringUtil.replace(message, "#end", "")[ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) [ FD ]
Line_13 $$ message = StringUtil.replace(message, "</code>", "'")-->Line_17 $$ if (message.contains("#ref")) [ FD ]
Line_25 $$ message = StringUtil.replace(message, "#end", "")-->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ FD ]
Line_13 $$ message = StringUtil.replace(message, "</code>", "'")-->Line_14 $$ message = StringUtil.replace(message, "#loc ", "")[ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_21 $$ final int endIndex = (flags & TRIM_AT_END) != 0 ? message.indexOf("#end") : (flags & TRIM_AT_TREE_END) != 0 ? message.indexOf("#treeend") : -1[ FD ]
Line_16 $$ message = StringUtil.replace(message, "#loc", "")-->Line_19 $$ message = StringUtil.replace(message, "#ref", ref)[ FD ]
Line_13 $$ message = StringUtil.replace(message, "</code>", "'")-->Line_28 $$ message = unescapeXmlCode(message)[ FD ]
Line_18 $$ String ref = extractHighlightedText(descriptor, element)-->Line_19 $$ message = StringUtil.replace(message, "#ref", ref)[ FD ]
Line_23 $$ message = message.substring(0, endIndex)-->Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) [ FD ]
Line_14 $$ message = StringUtil.replace(message, "#loc ", "")-->Line_27 $$ if (message.contains(XML_CODE_MARKER.first)) [ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_26 $$ message = StringUtil.replace(message, "#treeend", "")[ FD ]
Line_9 $$ message = StringUtil.replace(message, "#loc", "(" + InspectionsBundle.message("inspection.export.results.at.line") + " " + lineNumber + ")")-->Line_28 $$ message = unescapeXmlCode(message)[ FD ]
Line_3 $$ String message = descriptor.getDescriptionTemplate()-->Line_19 $$ message = StringUtil.replace(message, "#ref", ref)[ FD ]
Line_23 $$ message = message.substring(0, endIndex)-->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ FD ]
Line_13 $$ message = StringUtil.replace(message, "</code>", "'")-->Line_21 $$ final int endIndex = (flags & TRIM_AT_END) != 0 ? message.indexOf("#end") : (flags & TRIM_AT_TREE_END) != 0 ? message.indexOf("#treeend") : -1[ FD ]
Line_21 $$ final int endIndex = (flags & TRIM_AT_END) != 0 ? message.indexOf("#end") : (flags & TRIM_AT_TREE_END) != 0 ? message.indexOf("#treeend") : -1-->Line_22 $$ if (endIndex > 0) [ FD ]
Line_13 $$ message = StringUtil.replace(message, "</code>", "'")-->Line_30 $$ message = StringUtil.unescapeXml(message).trim()[ FD ]
