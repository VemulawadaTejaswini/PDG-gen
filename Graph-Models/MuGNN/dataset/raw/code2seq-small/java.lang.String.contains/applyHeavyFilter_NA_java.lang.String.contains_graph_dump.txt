Line_34 $$ PsiTryStatement parent = PsiTreeUtil.getParentOfType(element, PsiTryStatement.class, true, PsiClass.class)-->Line_35 $$ PsiCodeBlock tryBlock = parent != null ? parent.getTryBlock() : null[ FD ]
Line_2 $$ public void applyHeavyFilter(@NotNull final Document copiedFragment, final int startOffset, int startLineNumber, @NotNull final Consumer<AdditionalHighlight> consumer) -->Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) [ CD ]
Line_12 $$ Trinity<TextRange, TextRange, TextRange> info = visited.get(text)-->Line_38 $$ info = worker.getInfo()[ FD ]
Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) -->Line_8 $$ final int lineEndOffset = copiedFragment.getLineEndOffset(i)[ FD ]
Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) -->Line_44 $$ int off = startOffset + lineStartOffset[ CD ]
Line_2 $$ public void applyHeavyFilter(@NotNull final Document copiedFragment, final int startOffset, int startLineNumber, @NotNull final Consumer<AdditionalHighlight> consumer) -->Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) [ FD ]
Line_2 $$ public void applyHeavyFilter(@NotNull final Document copiedFragment, final int startOffset, int startLineNumber, @NotNull final Consumer<AdditionalHighlight> consumer) -->Line_3 $$ Map<String, Trinity<TextRange, TextRange, TextRange>> visited = new THashMap<String, Trinity<TextRange, TextRange, TextRange>>()[ CD ]
Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) -->Line_12 $$ Trinity<TextRange, TextRange, TextRange> info = visited.get(text)[ CD ]
Line_4 $$ final Trinity<TextRange, TextRange, TextRange> emptyInfo = Trinity.create(null, null, null)-->Line_16 $$ info = emptyInfo[ FD ]
Line_9 $$ String text = copiedFragment.getText(new TextRange(lineStartOffset, lineEndOffset))-->Line_19 $$ worker.execute(text, lineEndOffset)[ FD ]
Line_2 $$ public void applyHeavyFilter(@NotNull final Document copiedFragment, final int startOffset, int startLineNumber, @NotNull final Consumer<AdditionalHighlight> consumer) -->Line_9 $$ String text = copiedFragment.getText(new TextRange(lineStartOffset, lineEndOffset))[ FD ]
Line_2 $$ public void applyHeavyFilter(@NotNull final Document copiedFragment, final int startOffset, int startLineNumber, @NotNull final Consumer<AdditionalHighlight> consumer) -->Line_8 $$ final int lineEndOffset = copiedFragment.getLineEndOffset(i)[ FD ]
Line_2 $$ public void applyHeavyFilter(@NotNull final Document copiedFragment, final int startOffset, int startLineNumber, @NotNull final Consumer<AdditionalHighlight> consumer) -->Line_5 $$ final ExceptionWorker worker = new ExceptionWorker(myCache)[ CD ]
Line_16 $$ info = emptyInfo-->Line_13 $$ if (info == emptyInfo)[ FD ]
Line_9 $$ String text = copiedFragment.getText(new TextRange(lineStartOffset, lineEndOffset))-->Line_12 $$ Trinity<TextRange, TextRange, TextRange> info = visited.get(text)[ FD ]
Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) -->Line_46 $$ consumer.consume(new AdditionalHighlight(off + info.first.getStartOffset(), off + info.second.getEndOffset()) [ CD ]
Line_2 $$ public void applyHeavyFilter(@NotNull final Document copiedFragment, final int startOffset, int startLineNumber, @NotNull final Consumer<AdditionalHighlight> consumer) -->Line_7 $$ final int lineStartOffset = copiedFragment.getLineStartOffset(i)[ FD ]
Line_26 $$ OpenFileDescriptor descriptor = ((FileHyperlinkInfo) hyperlinkInfo).getDescriptor()-->Line_27 $$ if (descriptor == null)[ FD ]
Line_3 $$ Map<String, Trinity<TextRange, TextRange, TextRange>> visited = new THashMap<String, Trinity<TextRange, TextRange, TextRange>>()-->Line_41 $$ visited.put(text, info)[ FD ]
Line_12 $$ Trinity<TextRange, TextRange, TextRange> info = visited.get(text)-->Line_13 $$ if (info == emptyInfo)[ FD ]
Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) -->Line_45 $$ final Color color = UIUtil.getInactiveTextColor()[ CD ]
Line_15 $$ if (info == null) -->Line_16 $$ info = emptyInfo[ CD ]
Line_2 $$ public void applyHeavyFilter(@NotNull final Document copiedFragment, final int startOffset, int startLineNumber, @NotNull final Consumer<AdditionalHighlight> consumer) -->Line_46 $$ consumer.consume(new AdditionalHighlight(off + info.first.getStartOffset(), off + info.second.getEndOffset()) [ FD ]
Line_12 $$ Trinity<TextRange, TextRange, TextRange> info = visited.get(text)-->Line_15 $$ if (info == null) [ FD ]
Line_26 $$ OpenFileDescriptor descriptor = ((FileHyperlinkInfo) hyperlinkInfo).getDescriptor()-->Line_29 $$ int offset = descriptor.getOffset()[ FD ]
Line_5 $$ final ExceptionWorker worker = new ExceptionWorker(myCache)-->Line_38 $$ info = worker.getInfo()[ FD ]
Line_4 $$ final Trinity<TextRange, TextRange, TextRange> emptyInfo = Trinity.create(null, null, null)-->Line_13 $$ if (info == emptyInfo)[ FD ]
Line_29 $$ int offset = descriptor.getOffset()-->Line_36 $$ if (tryBlock == null || !tryBlock.getTextRange().contains(offset))[ FD ]
Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) -->Line_9 $$ String text = copiedFragment.getText(new TextRange(lineStartOffset, lineEndOffset))[ CD ]
Line_3 $$ Map<String, Trinity<TextRange, TextRange, TextRange>> visited = new THashMap<String, Trinity<TextRange, TextRange, TextRange>>()-->Line_12 $$ Trinity<TextRange, TextRange, TextRange> info = visited.get(text)[ FD ]
Line_5 $$ final ExceptionWorker worker = new ExceptionWorker(myCache)-->Line_20 $$ Result result = worker.getResult()[ FD ]
Line_33 $$ PsiElement element = psiFile.findElementAt(offset)-->Line_34 $$ PsiTryStatement parent = PsiTreeUtil.getParentOfType(element, PsiTryStatement.class, true, PsiClass.class)[ FD ]
Line_38 $$ info = worker.getInfo()-->Line_13 $$ if (info == emptyInfo)[ FD ]
Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) -->Line_7 $$ final int lineStartOffset = copiedFragment.getLineStartOffset(i)[ FD ]
Line_16 $$ info = emptyInfo-->Line_15 $$ if (info == null) [ FD ]
Line_29 $$ int offset = descriptor.getOffset()-->Line_33 $$ PsiElement element = psiFile.findElementAt(offset)[ FD ]
Line_38 $$ info = worker.getInfo()-->Line_41 $$ visited.put(text, info)[ FD ]
Line_9 $$ String text = copiedFragment.getText(new TextRange(lineStartOffset, lineEndOffset))-->Line_41 $$ visited.put(text, info)[ FD ]
Line_17 $$ AccessToken token = ApplicationManager.getApplication().acquireReadActionLock()-->Line_40 $$ token.finish()[ FD ]
Line_20 $$ Result result = worker.getResult()-->Line_23 $$ HyperlinkInfo hyperlinkInfo = result.getHyperlinkInfo()[ FD ]
Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) -->Line_15 $$ if (info == null) [ CD ]
Line_5 $$ final ExceptionWorker worker = new ExceptionWorker(myCache)-->Line_19 $$ worker.execute(text, lineEndOffset)[ FD ]
Line_30 $$ PsiFile psiFile = worker.getFile()-->Line_33 $$ PsiElement element = psiFile.findElementAt(offset)[ FD ]
Line_15 $$ if (info == null) -->Line_17 $$ AccessToken token = ApplicationManager.getApplication().acquireReadActionLock()[ CD ]
Line_35 $$ PsiCodeBlock tryBlock = parent != null ? parent.getTryBlock() : null-->Line_36 $$ if (tryBlock == null || !tryBlock.getTextRange().contains(offset))[ FD ]
Line_16 $$ info = emptyInfo-->Line_38 $$ info = worker.getInfo()[ FD ]
Line_2 $$ public void applyHeavyFilter(@NotNull final Document copiedFragment, final int startOffset, int startLineNumber, @NotNull final Consumer<AdditionalHighlight> consumer) -->Line_4 $$ final Trinity<TextRange, TextRange, TextRange> emptyInfo = Trinity.create(null, null, null)[ CD ]
Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) -->Line_10 $$ if (!text.contains(".java:"))[ CD ]
Line_12 $$ Trinity<TextRange, TextRange, TextRange> info = visited.get(text)-->Line_16 $$ info = emptyInfo[ FD ]
Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) -->Line_13 $$ if (info == emptyInfo)[ CD ]
Line_16 $$ info = emptyInfo-->Line_41 $$ visited.put(text, info)[ FD ]
Line_9 $$ String text = copiedFragment.getText(new TextRange(lineStartOffset, lineEndOffset))-->Line_10 $$ if (!text.contains(".java:"))[ FD ]
Line_12 $$ Trinity<TextRange, TextRange, TextRange> info = visited.get(text)-->Line_41 $$ visited.put(text, info)[ FD ]
Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) -->Line_8 $$ final int lineEndOffset = copiedFragment.getLineEndOffset(i)[ CD ]
Line_46 $$ consumer.consume(new AdditionalHighlight(off + info.first.getStartOffset(), off + info.second.getEndOffset()) -->Line_48 $$ return new TextAttributes(null, null, color, EffectType.BOLD_DOTTED_LINE, Font.PLAIN)[ CD ]
Line_8 $$ final int lineEndOffset = copiedFragment.getLineEndOffset(i)-->Line_19 $$ worker.execute(text, lineEndOffset)[ FD ]
Line_20 $$ Result result = worker.getResult()-->Line_21 $$ if (result == null)[ FD ]
Line_38 $$ info = worker.getInfo()-->Line_15 $$ if (info == null) [ FD ]
Line_5 $$ final ExceptionWorker worker = new ExceptionWorker(myCache)-->Line_30 $$ PsiFile psiFile = worker.getFile()[ FD ]
Line_6 $$ for (int i = 0; i < copiedFragment.getLineCount(); i++) -->Line_7 $$ final int lineStartOffset = copiedFragment.getLineStartOffset(i)[ CD ]
