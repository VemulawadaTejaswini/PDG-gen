Line_5 $$ if (amInfo.getAppAttemptId().getAttemptId() == id) -->Line_8 $$ int nmHttpPort = amInfo.getNodeManagerHttpPort()[ CD ]
Line_5 $$ if (amInfo.getAppAttemptId().getAttemptId() == id) -->Line_10 $$ WebServicesTestUtils.checkStringMatch("nodeHttpAddress", nmHost + ":" + nmHttpPort, nodeHttpAddress)[ CD ]
Line_2 $$ public void verifyHsJobAttemptsGeneric(Job job, String nodeHttpAddress, String nodeId, int id, long startTime, String containerId, String logsLink) -->Line_15 $$ assertTrue("logsLink", logsLink.contains(localLogsLink))[ FD ]
Line_5 $$ if (amInfo.getAppAttemptId().getAttemptId() == id) -->Line_9 $$ int nmPort = amInfo.getNodeManagerPort()[ CD ]
Line_5 $$ if (amInfo.getAppAttemptId().getAttemptId() == id) -->Line_7 $$ String nmHost = amInfo.getNodeManagerHost()[ CD ]
Line_2 $$ public void verifyHsJobAttemptsGeneric(Job job, String nodeHttpAddress, String nodeId, int id, long startTime, String containerId, String logsLink) -->Line_13 $$ WebServicesTestUtils.checkStringMatch("containerId", amInfo.getContainerId().toString(), containerId)[ FD ]
Line_9 $$ int nmPort = amInfo.getNodeManagerPort()-->Line_11 $$ WebServicesTestUtils.checkStringMatch("nodeId", NodeId.newInstance(nmHost, nmPort).toString(), nodeId)[ FD ]
Line_3 $$ boolean attemptFound = false-->Line_18 $$ assertTrue("attempt: " + id + " was not found", attemptFound)[ FD ]
Line_4 $$ for (AMInfo amInfo : job.getAMInfos()) -->Line_13 $$ WebServicesTestUtils.checkStringMatch("containerId", amInfo.getContainerId().toString(), containerId)[ FD ]
Line_2 $$ public void verifyHsJobAttemptsGeneric(Job job, String nodeHttpAddress, String nodeId, int id, long startTime, String containerId, String logsLink) -->Line_18 $$ assertTrue("attempt: " + id + " was not found", attemptFound)[ CD ]
Line_4 $$ for (AMInfo amInfo : job.getAMInfos()) -->Line_8 $$ int nmHttpPort = amInfo.getNodeManagerHttpPort()[ FD ]
Line_5 $$ if (amInfo.getAppAttemptId().getAttemptId() == id) -->Line_11 $$ WebServicesTestUtils.checkStringMatch("nodeId", NodeId.newInstance(nmHost, nmPort).toString(), nodeId)[ CD ]
Line_2 $$ public void verifyHsJobAttemptsGeneric(Job job, String nodeHttpAddress, String nodeId, int id, long startTime, String containerId, String logsLink) -->Line_5 $$ if (amInfo.getAppAttemptId().getAttemptId() == id) [ FD ]
Line_7 $$ String nmHost = amInfo.getNodeManagerHost()-->Line_11 $$ WebServicesTestUtils.checkStringMatch("nodeId", NodeId.newInstance(nmHost, nmPort).toString(), nodeId)[ FD ]
Line_4 $$ for (AMInfo amInfo : job.getAMInfos()) -->Line_7 $$ String nmHost = amInfo.getNodeManagerHost()[ FD ]
Line_2 $$ public void verifyHsJobAttemptsGeneric(Job job, String nodeHttpAddress, String nodeId, int id, long startTime, String containerId, String logsLink) -->Line_11 $$ WebServicesTestUtils.checkStringMatch("nodeId", NodeId.newInstance(nmHost, nmPort).toString(), nodeId)[ FD ]
Line_14 $$ String localLogsLink = join("hsmockwebapp", ujoin("logs", nodeId, containerId, MRApps.toString(job.getID()), job.getUserName()))-->Line_15 $$ assertTrue("logsLink", logsLink.contains(localLogsLink))[ FD ]
Line_4 $$ for (AMInfo amInfo : job.getAMInfos()) -->Line_9 $$ int nmPort = amInfo.getNodeManagerPort()[ FD ]
Line_2 $$ public void verifyHsJobAttemptsGeneric(Job job, String nodeHttpAddress, String nodeId, int id, long startTime, String containerId, String logsLink) -->Line_10 $$ WebServicesTestUtils.checkStringMatch("nodeHttpAddress", nmHost + ":" + nmHttpPort, nodeHttpAddress)[ FD ]
Line_5 $$ if (amInfo.getAppAttemptId().getAttemptId() == id) -->Line_6 $$ attemptFound = true[ CD ]
Line_5 $$ if (amInfo.getAppAttemptId().getAttemptId() == id) -->Line_15 $$ assertTrue("logsLink", logsLink.contains(localLogsLink))[ CD ]
Line_3 $$ boolean attemptFound = false-->Line_6 $$ attemptFound = true[ FD ]
Line_4 $$ for (AMInfo amInfo : job.getAMInfos()) -->Line_5 $$ if (amInfo.getAppAttemptId().getAttemptId() == id) [ FD ]
Line_2 $$ public void verifyHsJobAttemptsGeneric(Job job, String nodeHttpAddress, String nodeId, int id, long startTime, String containerId, String logsLink) -->Line_14 $$ String localLogsLink = join("hsmockwebapp", ujoin("logs", nodeId, containerId, MRApps.toString(job.getID()), job.getUserName()))[ FD ]
Line_5 $$ if (amInfo.getAppAttemptId().getAttemptId() == id) -->Line_13 $$ WebServicesTestUtils.checkStringMatch("containerId", amInfo.getContainerId().toString(), containerId)[ CD ]
Line_6 $$ attemptFound = true-->Line_18 $$ assertTrue("attempt: " + id + " was not found", attemptFound)[ FD ]
Line_2 $$ public void verifyHsJobAttemptsGeneric(Job job, String nodeHttpAddress, String nodeId, int id, long startTime, String containerId, String logsLink) -->Line_4 $$ for (AMInfo amInfo : job.getAMInfos()) [ FD ]
Line_5 $$ if (amInfo.getAppAttemptId().getAttemptId() == id) -->Line_12 $$ assertTrue("startime not greater than 0", startTime > 0)[ CD ]
Line_5 $$ if (amInfo.getAppAttemptId().getAttemptId() == id) -->Line_14 $$ String localLogsLink = join("hsmockwebapp", ujoin("logs", nodeId, containerId, MRApps.toString(job.getID()), job.getUserName()))[ CD ]
Line_2 $$ public void verifyHsJobAttemptsGeneric(Job job, String nodeHttpAddress, String nodeId, int id, long startTime, String containerId, String logsLink) -->Line_3 $$ boolean attemptFound = false[ CD ]
