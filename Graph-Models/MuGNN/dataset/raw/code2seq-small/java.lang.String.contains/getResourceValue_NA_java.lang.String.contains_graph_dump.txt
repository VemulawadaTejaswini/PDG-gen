Line_20 $$ lookupName = "java:module/" + this.resolvedLookupName.substring(10)-->Line_24 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, lookupName)[ FD ]
Line_13 $$ lookupName = "java:comp/env/" + this.resolvedLookupName-->Line_17 $$ lookupName = "java:jboss/env" + this.resolvedLookupName[ FD ]
Line_24 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, lookupName)-->Line_26 $$ serviceBuilder.addDependency(bindInfo.getBinderServiceName(), ManagedReferenceFactory.class, injector)[ FD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_9 $$ final boolean compUsesModule = resolutionContext.isCompUsesModule()[ CD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_24 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, lookupName)[ CD ]
Line_15 $$ lookupName = "java:module/env/" + this.resolvedLookupName-->Line_17 $$ lookupName = "java:jboss/env" + this.resolvedLookupName[ FD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_6 $$ final String applicationName = resolutionContext.getApplicationName()[ CD ]
Line_19 $$ if (this.resolvedLookupName.startsWith("java:comp/") && compUsesModule) -->Line_20 $$ lookupName = "java:module/" + this.resolvedLookupName.substring(10)[ CD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_26 $$ serviceBuilder.addDependency(bindInfo.getBinderServiceName(), ManagedReferenceFactory.class, injector)[ FD ]
Line_13 $$ lookupName = "java:comp/env/" + this.resolvedLookupName-->Line_22 $$ lookupName = this.resolvedLookupName[ FD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_3 $$ if (error != null) [ CD ]
Line_10 $$ final String lookupName-->Line_20 $$ lookupName = "java:module/" + this.resolvedLookupName.substring(10)[ FD ]
Line_7 $$ final String moduleName = resolutionContext.getModuleName()-->Line_24 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, lookupName)[ FD ]
Line_8 $$ final String componentName = resolutionContext.getComponentName()-->Line_24 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, lookupName)[ FD ]
Line_10 $$ final String lookupName-->Line_24 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, lookupName)[ FD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_10 $$ final String lookupName[ CD ]
Line_14 $$ if (compUsesModule) -->Line_17 $$ lookupName = "java:jboss/env" + this.resolvedLookupName[ CD ]
Line_10 $$ final String lookupName-->Line_13 $$ lookupName = "java:comp/env/" + this.resolvedLookupName[ FD ]
Line_17 $$ lookupName = "java:jboss/env" + this.resolvedLookupName-->Line_20 $$ lookupName = "java:module/" + this.resolvedLookupName.substring(10)[ FD ]
Line_15 $$ lookupName = "java:module/env/" + this.resolvedLookupName-->Line_22 $$ lookupName = this.resolvedLookupName[ FD ]
Line_20 $$ lookupName = "java:module/" + this.resolvedLookupName.substring(10)-->Line_22 $$ lookupName = this.resolvedLookupName[ FD ]
Line_6 $$ final String applicationName = resolutionContext.getApplicationName()-->Line_24 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, lookupName)[ FD ]
Line_17 $$ lookupName = "java:jboss/env" + this.resolvedLookupName-->Line_24 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, lookupName)[ FD ]
Line_22 $$ lookupName = this.resolvedLookupName-->Line_25 $$ if (lookupName.startsWith("java:")) [ FD ]
Line_25 $$ if (lookupName.startsWith("java:")) -->Line_26 $$ serviceBuilder.addDependency(bindInfo.getBinderServiceName(), ManagedReferenceFactory.class, injector)[ CD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_11 $$ if (!this.resolvedLookupName.contains(":")) [ CD ]
Line_13 $$ lookupName = "java:comp/env/" + this.resolvedLookupName-->Line_20 $$ lookupName = "java:module/" + this.resolvedLookupName.substring(10)[ FD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_25 $$ if (lookupName.startsWith("java:")) [ CD ]
Line_12 $$ if (componentName != null && !compUsesModule) -->Line_14 $$ if (compUsesModule) [ CD ]
Line_9 $$ final boolean compUsesModule = resolutionContext.isCompUsesModule()-->Line_19 $$ if (this.resolvedLookupName.startsWith("java:comp/") && compUsesModule) [ FD ]
Line_15 $$ lookupName = "java:module/env/" + this.resolvedLookupName-->Line_24 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, lookupName)[ FD ]
Line_20 $$ lookupName = "java:module/" + this.resolvedLookupName.substring(10)-->Line_25 $$ if (lookupName.startsWith("java:")) [ FD ]
Line_10 $$ final String lookupName-->Line_25 $$ if (lookupName.startsWith("java:")) [ FD ]
Line_19 $$ if (this.resolvedLookupName.startsWith("java:comp/") && compUsesModule) -->Line_22 $$ lookupName = this.resolvedLookupName[ CD ]
Line_17 $$ lookupName = "java:jboss/env" + this.resolvedLookupName-->Line_25 $$ if (lookupName.startsWith("java:")) [ FD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_6 $$ final String applicationName = resolutionContext.getApplicationName()[ FD ]
Line_14 $$ if (compUsesModule) -->Line_15 $$ lookupName = "java:module/env/" + this.resolvedLookupName[ CD ]
Line_22 $$ lookupName = this.resolvedLookupName-->Line_24 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, lookupName)[ FD ]
Line_15 $$ lookupName = "java:module/env/" + this.resolvedLookupName-->Line_20 $$ lookupName = "java:module/" + this.resolvedLookupName.substring(10)[ FD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_8 $$ final String componentName = resolutionContext.getComponentName()[ FD ]
Line_13 $$ lookupName = "java:comp/env/" + this.resolvedLookupName-->Line_15 $$ lookupName = "java:module/env/" + this.resolvedLookupName[ FD ]
Line_10 $$ final String lookupName-->Line_15 $$ lookupName = "java:module/env/" + this.resolvedLookupName[ FD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_7 $$ final String moduleName = resolutionContext.getModuleName()[ FD ]
Line_17 $$ lookupName = "java:jboss/env" + this.resolvedLookupName-->Line_22 $$ lookupName = this.resolvedLookupName[ FD ]
Line_11 $$ if (!this.resolvedLookupName.contains(":")) -->Line_19 $$ if (this.resolvedLookupName.startsWith("java:comp/") && compUsesModule) [ CD ]
Line_12 $$ if (componentName != null && !compUsesModule) -->Line_13 $$ lookupName = "java:comp/env/" + this.resolvedLookupName[ CD ]
Line_15 $$ lookupName = "java:module/env/" + this.resolvedLookupName-->Line_25 $$ if (lookupName.startsWith("java:")) [ FD ]
Line_10 $$ final String lookupName-->Line_17 $$ lookupName = "java:jboss/env" + this.resolvedLookupName[ FD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_7 $$ final String moduleName = resolutionContext.getModuleName()[ CD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_9 $$ final boolean compUsesModule = resolutionContext.isCompUsesModule()[ FD ]
Line_9 $$ final boolean compUsesModule = resolutionContext.isCompUsesModule()-->Line_12 $$ if (componentName != null && !compUsesModule) [ FD ]
Line_11 $$ if (!this.resolvedLookupName.contains(":")) -->Line_12 $$ if (componentName != null && !compUsesModule) [ CD ]
Line_2 $$ public void getResourceValue(final ResolutionContext resolutionContext, final ServiceBuilder<?> serviceBuilder, final DeploymentPhaseContext phaseContext, final Injector<ManagedReferenceFactory> injector) throws DeploymentUnitProcessingException -->Line_8 $$ final String componentName = resolutionContext.getComponentName()[ CD ]
Line_10 $$ final String lookupName-->Line_22 $$ lookupName = this.resolvedLookupName[ FD ]
Line_13 $$ lookupName = "java:comp/env/" + this.resolvedLookupName-->Line_24 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, lookupName)[ FD ]
Line_13 $$ lookupName = "java:comp/env/" + this.resolvedLookupName-->Line_25 $$ if (lookupName.startsWith("java:")) [ FD ]
