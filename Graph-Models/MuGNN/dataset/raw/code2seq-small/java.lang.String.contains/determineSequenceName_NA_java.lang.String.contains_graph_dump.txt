Line_2 $$ protected QualifiedName determineSequenceName(Properties params, Dialect dialect, JdbcEnvironment jdbcEnv) -->Line_9 $$ final Identifier catalog = jdbcEnv.getIdentifierHelper().toIdentifier(ConfigurationHelper.getString(CATALOG, params))[ FD ]
Line_2 $$ protected QualifiedName determineSequenceName(Properties params, Dialect dialect, JdbcEnvironment jdbcEnv) -->Line_4 $$ final String defaultSequenceName = ConfigurationHelper.getBoolean(CONFIG_PREFER_SEQUENCE_PER_ENTITY, params, false) ? params.getProperty(JPA_ENTITY_NAME) + sequencePerEntitySuffix : DEF_SEQUENCE_NAME[ CD ]
Line_6 $$ if (sequenceName.contains(".")) -->Line_7 $$ return QualifiedNameParser.INSTANCE.parse(sequenceName)[ CD ]
Line_2 $$ protected QualifiedName determineSequenceName(Properties params, Dialect dialect, JdbcEnvironment jdbcEnv) -->Line_5 $$ final String sequenceName = ConfigurationHelper.getString(SEQUENCE_PARAM, params, defaultSequenceName)[ CD ]
Line_4 $$ final String defaultSequenceName = ConfigurationHelper.getBoolean(CONFIG_PREFER_SEQUENCE_PER_ENTITY, params, false) ? params.getProperty(JPA_ENTITY_NAME) + sequencePerEntitySuffix : DEF_SEQUENCE_NAME-->Line_5 $$ final String sequenceName = ConfigurationHelper.getString(SEQUENCE_PARAM, params, defaultSequenceName)[ FD ]
Line_5 $$ final String sequenceName = ConfigurationHelper.getString(SEQUENCE_PARAM, params, defaultSequenceName)-->Line_6 $$ if (sequenceName.contains(".")) [ FD ]
Line_6 $$ if (sequenceName.contains(".")) -->Line_10 $$ final Identifier schema = jdbcEnv.getIdentifierHelper().toIdentifier(ConfigurationHelper.getString(SCHEMA, params))[ CD ]
Line_5 $$ final String sequenceName = ConfigurationHelper.getString(SEQUENCE_PARAM, params, defaultSequenceName)-->Line_7 $$ return QualifiedNameParser.INSTANCE.parse(sequenceName)[ FD ]
Line_6 $$ if (sequenceName.contains(".")) -->Line_9 $$ final Identifier catalog = jdbcEnv.getIdentifierHelper().toIdentifier(ConfigurationHelper.getString(CATALOG, params))[ CD ]
Line_2 $$ protected QualifiedName determineSequenceName(Properties params, Dialect dialect, JdbcEnvironment jdbcEnv) -->Line_5 $$ final String sequenceName = ConfigurationHelper.getString(SEQUENCE_PARAM, params, defaultSequenceName)[ FD ]
Line_5 $$ final String sequenceName = ConfigurationHelper.getString(SEQUENCE_PARAM, params, defaultSequenceName)-->Line_11 $$ return new QualifiedNameParser.NameParts(catalog, schema, jdbcEnv.getIdentifierHelper().toIdentifier(sequenceName))[ FD ]
Line_2 $$ protected QualifiedName determineSequenceName(Properties params, Dialect dialect, JdbcEnvironment jdbcEnv) -->Line_11 $$ return new QualifiedNameParser.NameParts(catalog, schema, jdbcEnv.getIdentifierHelper().toIdentifier(sequenceName))[ FD ]
Line_2 $$ protected QualifiedName determineSequenceName(Properties params, Dialect dialect, JdbcEnvironment jdbcEnv) -->Line_10 $$ final Identifier schema = jdbcEnv.getIdentifierHelper().toIdentifier(ConfigurationHelper.getString(SCHEMA, params))[ FD ]
Line_2 $$ protected QualifiedName determineSequenceName(Properties params, Dialect dialect, JdbcEnvironment jdbcEnv) -->Line_6 $$ if (sequenceName.contains(".")) [ CD ]
Line_2 $$ protected QualifiedName determineSequenceName(Properties params, Dialect dialect, JdbcEnvironment jdbcEnv) -->Line_3 $$ final String sequencePerEntitySuffix = ConfigurationHelper.getString(CONFIG_SEQUENCE_PER_ENTITY_SUFFIX, params, DEF_SEQUENCE_SUFFIX)[ CD ]
Line_2 $$ protected QualifiedName determineSequenceName(Properties params, Dialect dialect, JdbcEnvironment jdbcEnv) -->Line_3 $$ final String sequencePerEntitySuffix = ConfigurationHelper.getString(CONFIG_SEQUENCE_PER_ENTITY_SUFFIX, params, DEF_SEQUENCE_SUFFIX)[ FD ]
Line_2 $$ protected QualifiedName determineSequenceName(Properties params, Dialect dialect, JdbcEnvironment jdbcEnv) -->Line_4 $$ final String defaultSequenceName = ConfigurationHelper.getBoolean(CONFIG_PREFER_SEQUENCE_PER_ENTITY, params, false) ? params.getProperty(JPA_ENTITY_NAME) + sequencePerEntitySuffix : DEF_SEQUENCE_NAME[ FD ]
Line_6 $$ if (sequenceName.contains(".")) -->Line_11 $$ return new QualifiedNameParser.NameParts(catalog, schema, jdbcEnv.getIdentifierHelper().toIdentifier(sequenceName))[ CD ]
