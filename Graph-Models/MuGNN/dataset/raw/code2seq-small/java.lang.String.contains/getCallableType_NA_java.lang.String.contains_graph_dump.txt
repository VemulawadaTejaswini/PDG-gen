Line_5 $$ if (qualifiedName != null && qualifiedName.startsWith("PyQt")) -->Line_6 $$ final QualifiedName name = QualifiedName.fromDottedString(qualifiedName)[ CD ]
Line_6 $$ final QualifiedName name = QualifiedName.fromDottedString(qualifiedName)-->Line_7 $$ final String qtVersion = name.getComponents().get(0)[ FD ]
Line_2 $$ public PyType getCallableType(@NotNull PyCallable callable, @NotNull TypeEvalContext context) -->Line_16 $$ return null[ CD ]
Line_2 $$ public PyType getCallableType(@NotNull PyCallable callable, @NotNull TypeEvalContext context) -->Line_3 $$ if (callable instanceof PyFunction) [ FD ]
Line_9 $$ if (docstring != null && docstring.contains("[signal]")) -->Line_11 $$ if (aClass != null)[ CD ]
Line_11 $$ if (aClass != null)-->Line_12 $$ return new PyClassTypeImpl(aClass, false)[ CD ]
Line_5 $$ if (qualifiedName != null && qualifiedName.startsWith("PyQt")) -->Line_7 $$ final String qtVersion = name.getComponents().get(0)[ CD ]
Line_10 $$ final PyClass aClass = PyClassNameIndex.findClass(qtVersion + "." + ourQtBoundSignal, callable.getProject())-->Line_11 $$ if (aClass != null)[ FD ]
Line_9 $$ if (docstring != null && docstring.contains("[signal]")) -->Line_10 $$ final PyClass aClass = PyClassNameIndex.findClass(qtVersion + "." + ourQtBoundSignal, callable.getProject())[ CD ]
Line_3 $$ if (callable instanceof PyFunction) -->Line_5 $$ if (qualifiedName != null && qualifiedName.startsWith("PyQt")) [ CD ]
Line_4 $$ final String qualifiedName = callable.getQualifiedName()-->Line_5 $$ if (qualifiedName != null && qualifiedName.startsWith("PyQt")) [ FD ]
Line_2 $$ public PyType getCallableType(@NotNull PyCallable callable, @NotNull TypeEvalContext context) -->Line_3 $$ if (callable instanceof PyFunction) [ CD ]
Line_4 $$ final String qualifiedName = callable.getQualifiedName()-->Line_6 $$ final QualifiedName name = QualifiedName.fromDottedString(qualifiedName)[ FD ]
Line_8 $$ final String docstring = ((PyFunction) callable).getDocStringValue()-->Line_9 $$ if (docstring != null && docstring.contains("[signal]")) [ FD ]
Line_5 $$ if (qualifiedName != null && qualifiedName.startsWith("PyQt")) -->Line_9 $$ if (docstring != null && docstring.contains("[signal]")) [ CD ]
Line_3 $$ if (callable instanceof PyFunction) -->Line_4 $$ final String qualifiedName = callable.getQualifiedName()[ CD ]
Line_2 $$ public PyType getCallableType(@NotNull PyCallable callable, @NotNull TypeEvalContext context) -->Line_4 $$ final String qualifiedName = callable.getQualifiedName()[ FD ]
Line_5 $$ if (qualifiedName != null && qualifiedName.startsWith("PyQt")) -->Line_8 $$ final String docstring = ((PyFunction) callable).getDocStringValue()[ CD ]
Line_2 $$ public PyType getCallableType(@NotNull PyCallable callable, @NotNull TypeEvalContext context) -->Line_10 $$ final PyClass aClass = PyClassNameIndex.findClass(qtVersion + "." + ourQtBoundSignal, callable.getProject())[ FD ]
