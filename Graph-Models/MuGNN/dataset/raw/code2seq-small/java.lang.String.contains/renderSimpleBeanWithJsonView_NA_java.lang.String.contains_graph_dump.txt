Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_14 $$ assertFalse(content.contains("boo"))[ CD ]
Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_13 $$ assertTrue(content.contains("foo"))[ CD ]
Line_10 $$ String content = response.getContentAsString()-->Line_15 $$ assertFalse(content.contains(JsonView.class.getName()))[ FD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_9 $$ view.render(model, request, response)[ FD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_7 $$ model.put(JsonView.class.getName(), MyJacksonView1.class)[ FD ]
Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_15 $$ assertFalse(content.contains(JsonView.class.getName()))[ CD ]
Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_7 $$ model.put(JsonView.class.getName(), MyJacksonView1.class)[ CD ]
Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_8 $$ view.setUpdateContentLength(true)[ CD ]
Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_6 $$ model.put("foo", bean)[ CD ]
Line_10 $$ String content = response.getContentAsString()-->Line_13 $$ assertTrue(content.contains("foo"))[ FD ]
Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_11 $$ assertTrue(content.length() > 0)[ CD ]
Line_10 $$ String content = response.getContentAsString()-->Line_12 $$ assertEquals(content.length(), response.getContentLength())[ FD ]
Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_10 $$ String content = response.getContentAsString()[ CD ]
Line_3 $$ Object bean = new TestBeanSimple()-->Line_6 $$ model.put("foo", bean)[ FD ]
Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_3 $$ Object bean = new TestBeanSimple()[ CD ]
Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_9 $$ view.render(model, request, response)[ CD ]
Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_5 $$ model.put("bindingResult", mock(BindingResult.class, "binding_result"))[ CD ]
Line_10 $$ String content = response.getContentAsString()-->Line_11 $$ assertTrue(content.length() > 0)[ FD ]
Line_10 $$ String content = response.getContentAsString()-->Line_14 $$ assertFalse(content.contains("boo"))[ FD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_5 $$ model.put("bindingResult", mock(BindingResult.class, "binding_result"))[ FD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_6 $$ model.put("foo", bean)[ FD ]
Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_12 $$ assertEquals(content.length(), response.getContentLength())[ CD ]
Line_2 $$ public void renderSimpleBeanWithJsonView() throws Exception -->Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()[ CD ]
