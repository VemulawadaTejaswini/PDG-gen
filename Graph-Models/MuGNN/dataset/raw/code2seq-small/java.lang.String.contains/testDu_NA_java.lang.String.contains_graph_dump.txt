Line_5 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_15 $$ assertTrue(fs.exists(myPath))[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_5 $$ DistributedFileSystem fs = cluster.getFileSystem()[ FD ]
Line_19 $$ Path myFile2 = new Path("/test/dir/file2")-->Line_20 $$ writeFile(fs, myFile2)[ FD ]
Line_2 $$ public void testDu() throws IOException -->Line_6 $$ PrintStream psBackup = System.out[ CD ]
Line_7 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_32 $$ String returnString = out.toString()[ FD ]
Line_2 $$ public void testDu() throws IOException -->Line_7 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()[ CD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_11 $$ shell.setConf(conf)[ FD ]
Line_10 $$ FsShell shell = new FsShell()-->Line_11 $$ shell.setConf(conf)[ FD ]
Line_16 $$ Path myFile = new Path("/test/dir/file")-->Line_17 $$ writeFile(fs, myFile)[ FD ]
Line_5 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_20 $$ writeFile(fs, myFile2)[ FD ]
Line_22 $$ String[] args = new String[2]-->Line_27 $$ val = shell.run(args)[ FD ]
Line_6 $$ PrintStream psBackup = System.out-->Line_37 $$ System.setOut(psBackup)[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_38 $$ cluster.shutdown()[ FD ]
Line_32 $$ String returnString = out.toString()-->Line_34 $$ assertTrue(returnString.contains("22"))[ FD ]
Line_2 $$ public void testDu() throws IOException -->Line_11 $$ shell.setConf(conf)[ CD ]
Line_2 $$ public void testDu() throws IOException -->Line_5 $$ DistributedFileSystem fs = cluster.getFileSystem()[ CD ]
Line_2 $$ public void testDu() throws IOException -->Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()[ CD ]
Line_2 $$ public void testDu() throws IOException -->Line_10 $$ FsShell shell = new FsShell()[ CD ]
Line_16 $$ Path myFile = new Path("/test/dir/file")-->Line_18 $$ assertTrue(fs.exists(myFile))[ FD ]
Line_19 $$ Path myFile2 = new Path("/test/dir/file2")-->Line_21 $$ assertTrue(fs.exists(myFile2))[ FD ]
Line_2 $$ public void testDu() throws IOException -->Line_8 $$ PrintStream psOut = new PrintStream(out)[ CD ]
Line_5 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_21 $$ assertTrue(fs.exists(myFile2))[ FD ]
Line_7 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_33 $$ out.reset()[ FD ]
Line_5 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_17 $$ writeFile(fs, myFile)[ FD ]
Line_13 $$ Path myPath = new Path("/test/dir")-->Line_14 $$ assertTrue(fs.mkdirs(myPath))[ FD ]
Line_25 $$ int val = -1-->Line_27 $$ val = shell.run(args)[ FD ]
Line_8 $$ PrintStream psOut = new PrintStream(out)-->Line_9 $$ System.setOut(psOut)[ FD ]
Line_32 $$ String returnString = out.toString()-->Line_35 $$ assertTrue(returnString.contains("23"))[ FD ]
Line_2 $$ public void testDu() throws IOException -->Line_9 $$ System.setOut(psOut)[ CD ]
Line_5 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_14 $$ assertTrue(fs.mkdirs(myPath))[ FD ]
Line_13 $$ Path myPath = new Path("/test/dir")-->Line_15 $$ assertTrue(fs.exists(myPath))[ FD ]
Line_10 $$ FsShell shell = new FsShell()-->Line_27 $$ val = shell.run(args)[ FD ]
Line_5 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_18 $$ assertTrue(fs.exists(myFile))[ FD ]
Line_2 $$ public void testDu() throws IOException -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
