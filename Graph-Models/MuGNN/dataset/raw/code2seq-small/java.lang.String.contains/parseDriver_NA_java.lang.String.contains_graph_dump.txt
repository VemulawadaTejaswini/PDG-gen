Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_93 $$ String value = rawElementText(reader)[ FD ]
Line_11 $$ driverName = rawAttributeText(reader, DRIVER_NAME.getXmlName())-->Line_45 $$ driverAddress.add(JDBC_DRIVER_NAME, driverName)[ FD ]
Line_6 $$ String driverName = null-->Line_12 $$ DRIVER_NAME.parseAndSetParameter(driverName, operation, reader)[ FD ]
Line_11 $$ driverName = rawAttributeText(reader, DRIVER_NAME.getXmlName())-->Line_12 $$ DRIVER_NAME.parseAndSetParameter(driverName, operation, reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_94 $$ DRIVER_CLASS_NAME.parseAndSetParameter(value, operation, reader)[ FD ]
Line_6 $$ String driverName = null-->Line_45 $$ driverAddress.add(JDBC_DRIVER_NAME, driverName)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_23 $$ String value = rawAttributeText(reader, DRIVER_MINOR_VERSION.getXmlName())[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_4 $$ final ModelNode operation = new ModelNode()[ CD ]
Line_29 $$ String moduleName = rawAttributeText(reader, DRIVER_MODULE_NAME.getXmlName())-->Line_35 $$ DRIVER_MODULE_NAME.parseAndSetParameter(moduleName, operation, reader)[ FD ]
Line_32 $$ slot = moduleName.substring(moduleName.indexOf(":") + 1)-->Line_36 $$ if (slot != null) [ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_50 $$ boolean datasourceClassMatched = false[ CD ]
Line_6 $$ String driverName = null-->Line_11 $$ driverName = rawAttributeText(reader, DRIVER_NAME.getXmlName())[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_48 $$ boolean driverClassMatched = false[ CD ]
Line_29 $$ String moduleName = rawAttributeText(reader, DRIVER_MODULE_NAME.getXmlName())-->Line_31 $$ if (moduleName.contains(":")) [ FD ]
Line_17 $$ String value = rawAttributeText(reader, DRIVER_MAJOR_VERSION.getXmlName())-->Line_84 $$ DRIVER_XA_DATASOURCE_CLASS_NAME.parseAndSetParameter(value, operation, reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_37 $$ MODULE_SLOT.parseAndSetParameter(slot, operation, reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_84 $$ DRIVER_XA_DATASOURCE_CLASS_NAME.parseAndSetParameter(value, operation, reader)[ FD ]
Line_49 $$ boolean xaDatasourceClassMatched = false-->Line_85 $$ xaDatasourceClassMatched = true[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_47 $$ operation.get(OP_ADDR).set(driverAddress)[ CD ]
Line_4 $$ final ModelNode operation = new ModelNode()-->Line_24 $$ DRIVER_MINOR_VERSION.parseAndSetParameter(value, operation, reader)[ FD ]
Line_31 $$ if (moduleName.contains(":")) -->Line_32 $$ slot = moduleName.substring(moduleName.indexOf(":") + 1)[ CD ]
Line_4 $$ final ModelNode operation = new ModelNode()-->Line_94 $$ DRIVER_CLASS_NAME.parseAndSetParameter(value, operation, reader)[ FD ]
Line_73 $$ String value = rawElementText(reader)-->Line_74 $$ DRIVER_DATASOURCE_CLASS_NAME.parseAndSetParameter(value, operation, reader)[ FD ]
Line_55 $$ if (DataSources.Tag.forName(reader.getLocalName()) == DataSources.Tag.DRIVER) -->Line_59 $$ if (Driver.Tag.forName(reader.getLocalName()) == Driver.Tag.UNKNOWN) [ CD ]
Line_33 $$ moduleName = moduleName.substring(0, moduleName.indexOf(":"))-->Line_35 $$ DRIVER_MODULE_NAME.parseAndSetParameter(moduleName, operation, reader)[ FD ]
Line_31 $$ if (moduleName.contains(":")) -->Line_33 $$ moduleName = moduleName.substring(0, moduleName.indexOf(":"))[ CD ]
Line_4 $$ final ModelNode operation = new ModelNode()-->Line_84 $$ DRIVER_XA_DATASOURCE_CLASS_NAME.parseAndSetParameter(value, operation, reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_73 $$ String value = rawElementText(reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_3 $$ final ModelNode driverAddress = parentAddress.clone()[ CD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_51 $$ while (reader.hasNext()) [ CD ]
Line_3 $$ final ModelNode driverAddress = parentAddress.clone()-->Line_47 $$ operation.get(OP_ADDR).set(driverAddress)[ FD ]
Line_48 $$ boolean driverClassMatched = false-->Line_95 $$ driverClassMatched = true[ FD ]
Line_30 $$ String slot = null-->Line_37 $$ MODULE_SLOT.parseAndSetParameter(slot, operation, reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_11 $$ driverName = rawAttributeText(reader, DRIVER_NAME.getXmlName())[ FD ]
Line_4 $$ final ModelNode operation = new ModelNode()-->Line_74 $$ DRIVER_DATASOURCE_CLASS_NAME.parseAndSetParameter(value, operation, reader)[ FD ]
Line_55 $$ if (DataSources.Tag.forName(reader.getLocalName()) == DataSources.Tag.DRIVER) -->Line_56 $$ list.add(operation)[ CD ]
Line_17 $$ String value = rawAttributeText(reader, DRIVER_MAJOR_VERSION.getXmlName())-->Line_74 $$ DRIVER_DATASOURCE_CLASS_NAME.parseAndSetParameter(value, operation, reader)[ FD ]
Line_4 $$ final ModelNode operation = new ModelNode()-->Line_35 $$ DRIVER_MODULE_NAME.parseAndSetParameter(moduleName, operation, reader)[ FD ]
Line_3 $$ final ModelNode driverAddress = parentAddress.clone()-->Line_46 $$ driverAddress.protect()[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_18 $$ DRIVER_MAJOR_VERSION.parseAndSetParameter(value, operation, reader)[ FD ]
Line_17 $$ String value = rawAttributeText(reader, DRIVER_MAJOR_VERSION.getXmlName())-->Line_24 $$ DRIVER_MINOR_VERSION.parseAndSetParameter(value, operation, reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_99 $$ throw new ParserException(bundle.unexpectedElement(reader.getLocalName()))[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_17 $$ String value = rawAttributeText(reader, DRIVER_MAJOR_VERSION.getXmlName())[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_60 $$ throw new ParserException(bundle.unexpectedEndTag(reader.getLocalName()))[ FD ]
Line_73 $$ String value = rawElementText(reader)-->Line_84 $$ DRIVER_XA_DATASOURCE_CLASS_NAME.parseAndSetParameter(value, operation, reader)[ FD ]
Line_3 $$ final ModelNode driverAddress = parentAddress.clone()-->Line_45 $$ driverAddress.add(JDBC_DRIVER_NAME, driverName)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_24 $$ DRIVER_MINOR_VERSION.parseAndSetParameter(value, operation, reader)[ FD ]
Line_4 $$ final ModelNode operation = new ModelNode()-->Line_47 $$ operation.get(OP_ADDR).set(driverAddress)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_12 $$ DRIVER_NAME.parseAndSetParameter(driverName, operation, reader)[ FD ]
Line_30 $$ String slot = null-->Line_36 $$ if (slot != null) [ FD ]
Line_29 $$ String moduleName = rawAttributeText(reader, DRIVER_MODULE_NAME.getXmlName())-->Line_33 $$ moduleName = moduleName.substring(0, moduleName.indexOf(":"))[ FD ]
Line_32 $$ slot = moduleName.substring(moduleName.indexOf(":") + 1)-->Line_37 $$ MODULE_SLOT.parseAndSetParameter(slot, operation, reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_59 $$ if (Driver.Tag.forName(reader.getLocalName()) == Driver.Tag.UNKNOWN) [ FD ]
Line_4 $$ final ModelNode operation = new ModelNode()-->Line_5 $$ operation.get(OP).set(ADD)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_83 $$ String value = rawElementText(reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_46 $$ driverAddress.protect()[ CD ]
Line_36 $$ if (slot != null) -->Line_37 $$ MODULE_SLOT.parseAndSetParameter(slot, operation, reader)[ CD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_35 $$ DRIVER_MODULE_NAME.parseAndSetParameter(moduleName, operation, reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_52 $$ switch(reader.nextTag()) [ FD ]
Line_4 $$ final ModelNode operation = new ModelNode()-->Line_56 $$ list.add(operation)[ FD ]
Line_50 $$ boolean datasourceClassMatched = false-->Line_75 $$ datasourceClassMatched = true[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_67 $$ switch(Driver.Tag.forName(reader.getLocalName())) [ FD ]
Line_30 $$ String slot = null-->Line_32 $$ slot = moduleName.substring(moduleName.indexOf(":") + 1)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_55 $$ if (DataSources.Tag.forName(reader.getLocalName()) == DataSources.Tag.DRIVER) [ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_45 $$ driverAddress.add(JDBC_DRIVER_NAME, driverName)[ CD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_29 $$ String moduleName = rawAttributeText(reader, DRIVER_MODULE_NAME.getXmlName())[ FD ]
Line_17 $$ String value = rawAttributeText(reader, DRIVER_MAJOR_VERSION.getXmlName())-->Line_94 $$ DRIVER_CLASS_NAME.parseAndSetParameter(value, operation, reader)[ FD ]
Line_73 $$ String value = rawElementText(reader)-->Line_94 $$ DRIVER_CLASS_NAME.parseAndSetParameter(value, operation, reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_3 $$ final ModelNode driverAddress = parentAddress.clone()[ FD ]
Line_17 $$ String value = rawAttributeText(reader, DRIVER_MAJOR_VERSION.getXmlName())-->Line_18 $$ DRIVER_MAJOR_VERSION.parseAndSetParameter(value, operation, reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_74 $$ DRIVER_DATASOURCE_CLASS_NAME.parseAndSetParameter(value, operation, reader)[ FD ]
Line_4 $$ final ModelNode operation = new ModelNode()-->Line_37 $$ MODULE_SLOT.parseAndSetParameter(slot, operation, reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_49 $$ boolean xaDatasourceClassMatched = false[ CD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_51 $$ while (reader.hasNext()) [ FD ]
Line_4 $$ final ModelNode operation = new ModelNode()-->Line_12 $$ DRIVER_NAME.parseAndSetParameter(driverName, operation, reader)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_5 $$ operation.get(OP).set(ADD)[ CD ]
Line_29 $$ String moduleName = rawAttributeText(reader, DRIVER_MODULE_NAME.getXmlName())-->Line_32 $$ slot = moduleName.substring(moduleName.indexOf(":") + 1)[ FD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_6 $$ String driverName = null[ CD ]
Line_4 $$ final ModelNode operation = new ModelNode()-->Line_18 $$ DRIVER_MAJOR_VERSION.parseAndSetParameter(value, operation, reader)[ FD ]
Line_55 $$ if (DataSources.Tag.forName(reader.getLocalName()) == DataSources.Tag.DRIVER) -->Line_57 $$ return[ CD ]
Line_2 $$ private void parseDriver(final XMLExtendedStreamReader reader, final List<ModelNode> list, final ModelNode parentAddress) throws XMLStreamException, ParserException, ValidateException -->Line_56 $$ list.add(operation)[ FD ]
