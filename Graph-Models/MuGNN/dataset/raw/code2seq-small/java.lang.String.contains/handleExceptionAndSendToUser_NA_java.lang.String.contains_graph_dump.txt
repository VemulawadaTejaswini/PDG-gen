Line_10 $$ String payload = clientHandler.actual.get(0).getPayload()-->Line_12 $$ assertTrue(payload.contains("destination:/user/queue/error\n"))[ FD ]
Line_3 $$ String destHeader = "destination:/user/queue/error"-->Line_4 $$ TextMessage m1 = create(StompCommand.SUBSCRIBE).headers("id:subs1", destHeader).build()[ FD ]
Line_10 $$ String payload = clientHandler.actual.get(0).getPayload()-->Line_13 $$ assertTrue(payload.endsWith("Got error: Bad input\0"))[ FD ]
Line_2 $$ public void handleExceptionAndSendToUser() throws Exception -->Line_5 $$ TextMessage m2 = create(StompCommand.SEND).headers("destination:/app/exception").build()[ CD ]
Line_2 $$ public void handleExceptionAndSendToUser() throws Exception -->Line_4 $$ TextMessage m1 = create(StompCommand.SUBSCRIBE).headers("id:subs1", destHeader).build()[ CD ]
Line_6 $$ TestClientWebSocketHandler clientHandler = new TestClientWebSocketHandler(1, m1, m2)-->Line_7 $$ WebSocketSession session = doHandshake(clientHandler, "/ws").get()[ FD ]
Line_7 $$ WebSocketSession session = doHandshake(clientHandler, "/ws").get()-->Line_15 $$ session.close()[ FD ]
Line_2 $$ public void handleExceptionAndSendToUser() throws Exception -->Line_3 $$ String destHeader = "destination:/user/queue/error"[ CD ]
Line_10 $$ String payload = clientHandler.actual.get(0).getPayload()-->Line_11 $$ assertTrue(payload.startsWith("MESSAGE\n"))[ FD ]
Line_2 $$ public void handleExceptionAndSendToUser() throws Exception -->Line_6 $$ TestClientWebSocketHandler clientHandler = new TestClientWebSocketHandler(1, m1, m2)[ CD ]
Line_2 $$ public void handleExceptionAndSendToUser() throws Exception -->Line_7 $$ WebSocketSession session = doHandshake(clientHandler, "/ws").get()[ CD ]
