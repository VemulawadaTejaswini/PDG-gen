Line_9 $$ path = StringUtil.trimEnd(path, "/.")-->Line_11 $$ int index = path.indexOf("/..")[ FD ]
Line_3 $$ path = FileUtil.toSystemIndependentName(path)-->Line_8 $$ path = StringUtil.trimStart(path, "./")[ FD ]
Line_2 $$ public static String normalize(String path) -->Line_8 $$ path = StringUtil.trimStart(path, "./")[ CD ]
Line_2 $$ public static String normalize(String path) -->Line_5 $$ while (path.contains("/./")) [ FD ]
Line_8 $$ path = StringUtil.trimStart(path, "./")-->Line_9 $$ path = StringUtil.trimEnd(path, "/.")[ FD ]
Line_2 $$ public static String normalize(String path) -->Line_6 $$ path = path.replace("/./", "/")[ FD ]
Line_11 $$ int index = path.indexOf("/..")-->Line_14 $$ int slashIndex = path.substring(0, index).lastIndexOf("/")[ FD ]
Line_2 $$ public static String normalize(String path) -->Line_9 $$ path = StringUtil.trimEnd(path, "/.")[ CD ]
Line_2 $$ public static String normalize(String path) -->Line_4 $$ path = StringUtil.trimEnd(path, "/")[ CD ]
Line_6 $$ path = path.replace("/./", "/")-->Line_9 $$ path = StringUtil.trimEnd(path, "/.")[ FD ]
Line_10 $$ while (true) -->Line_12 $$ if (index < 0)[ CD ]
Line_5 $$ while (path.contains("/./")) -->Line_6 $$ path = path.replace("/./", "/")[ CD ]
Line_4 $$ path = StringUtil.trimEnd(path, "/")-->Line_8 $$ path = StringUtil.trimStart(path, "./")[ FD ]
Line_3 $$ path = FileUtil.toSystemIndependentName(path)-->Line_9 $$ path = StringUtil.trimEnd(path, "/.")[ FD ]
Line_4 $$ path = StringUtil.trimEnd(path, "/")-->Line_17 $$ path = path.substring(0, slashIndex) + path.substring(index + 3)[ FD ]
Line_14 $$ int slashIndex = path.substring(0, index).lastIndexOf("/")-->Line_17 $$ path = path.substring(0, slashIndex) + path.substring(index + 3)[ FD ]
Line_2 $$ public static String normalize(String path) -->Line_4 $$ path = StringUtil.trimEnd(path, "/")[ FD ]
Line_6 $$ path = path.replace("/./", "/")-->Line_8 $$ path = StringUtil.trimStart(path, "./")[ FD ]
Line_2 $$ public static String normalize(String path) -->Line_3 $$ path = FileUtil.toSystemIndependentName(path)[ CD ]
Line_17 $$ path = path.substring(0, slashIndex) + path.substring(index + 3)-->Line_11 $$ int index = path.indexOf("/..")[ FD ]
Line_2 $$ public static String normalize(String path) -->Line_11 $$ int index = path.indexOf("/..")[ FD ]
Line_3 $$ path = FileUtil.toSystemIndependentName(path)-->Line_11 $$ int index = path.indexOf("/..")[ FD ]
Line_3 $$ path = FileUtil.toSystemIndependentName(path)-->Line_5 $$ while (path.contains("/./")) [ FD ]
Line_9 $$ path = StringUtil.trimEnd(path, "/.")-->Line_17 $$ path = path.substring(0, slashIndex) + path.substring(index + 3)[ FD ]
Line_10 $$ while (true) -->Line_15 $$ if (slashIndex < 0)[ CD ]
Line_8 $$ path = StringUtil.trimStart(path, "./")-->Line_17 $$ path = path.substring(0, slashIndex) + path.substring(index + 3)[ FD ]
Line_3 $$ path = FileUtil.toSystemIndependentName(path)-->Line_6 $$ path = path.replace("/./", "/")[ FD ]
Line_6 $$ path = path.replace("/./", "/")-->Line_11 $$ int index = path.indexOf("/..")[ FD ]
Line_4 $$ path = StringUtil.trimEnd(path, "/")-->Line_5 $$ while (path.contains("/./")) [ FD ]
Line_6 $$ path = path.replace("/./", "/")-->Line_17 $$ path = path.substring(0, slashIndex) + path.substring(index + 3)[ FD ]
Line_8 $$ path = StringUtil.trimStart(path, "./")-->Line_11 $$ int index = path.indexOf("/..")[ FD ]
Line_2 $$ public static String normalize(String path) -->Line_9 $$ path = StringUtil.trimEnd(path, "/.")[ FD ]
Line_10 $$ while (true) -->Line_17 $$ path = path.substring(0, slashIndex) + path.substring(index + 3)[ CD ]
Line_4 $$ path = StringUtil.trimEnd(path, "/")-->Line_14 $$ int slashIndex = path.substring(0, index).lastIndexOf("/")[ FD ]
Line_2 $$ public static String normalize(String path) -->Line_5 $$ while (path.contains("/./")) [ CD ]
Line_17 $$ path = path.substring(0, slashIndex) + path.substring(index + 3)-->Line_14 $$ int slashIndex = path.substring(0, index).lastIndexOf("/")[ FD ]
Line_2 $$ public static String normalize(String path) -->Line_19 $$ return path[ CD ]
Line_2 $$ public static String normalize(String path) -->Line_10 $$ while (true) [ CD ]
Line_4 $$ path = StringUtil.trimEnd(path, "/")-->Line_9 $$ path = StringUtil.trimEnd(path, "/.")[ FD ]
Line_3 $$ path = FileUtil.toSystemIndependentName(path)-->Line_17 $$ path = path.substring(0, slashIndex) + path.substring(index + 3)[ FD ]
Line_11 $$ int index = path.indexOf("/..")-->Line_12 $$ if (index < 0)[ FD ]
Line_4 $$ path = StringUtil.trimEnd(path, "/")-->Line_6 $$ path = path.replace("/./", "/")[ FD ]
Line_2 $$ public static String normalize(String path) -->Line_14 $$ int slashIndex = path.substring(0, index).lastIndexOf("/")[ FD ]
Line_3 $$ path = FileUtil.toSystemIndependentName(path)-->Line_4 $$ path = StringUtil.trimEnd(path, "/")[ FD ]
Line_6 $$ path = path.replace("/./", "/")-->Line_14 $$ int slashIndex = path.substring(0, index).lastIndexOf("/")[ FD ]
Line_2 $$ public static String normalize(String path) -->Line_3 $$ path = FileUtil.toSystemIndependentName(path)[ FD ]
Line_2 $$ public static String normalize(String path) -->Line_8 $$ path = StringUtil.trimStart(path, "./")[ FD ]
Line_10 $$ while (true) -->Line_14 $$ int slashIndex = path.substring(0, index).lastIndexOf("/")[ CD ]
Line_4 $$ path = StringUtil.trimEnd(path, "/")-->Line_11 $$ int index = path.indexOf("/..")[ FD ]
Line_8 $$ path = StringUtil.trimStart(path, "./")-->Line_14 $$ int slashIndex = path.substring(0, index).lastIndexOf("/")[ FD ]
Line_6 $$ path = path.replace("/./", "/")-->Line_5 $$ while (path.contains("/./")) [ FD ]
Line_10 $$ while (true) -->Line_11 $$ int index = path.indexOf("/..")[ CD ]
Line_2 $$ public static String normalize(String path) -->Line_17 $$ path = path.substring(0, slashIndex) + path.substring(index + 3)[ FD ]
Line_9 $$ path = StringUtil.trimEnd(path, "/.")-->Line_14 $$ int slashIndex = path.substring(0, index).lastIndexOf("/")[ FD ]
Line_3 $$ path = FileUtil.toSystemIndependentName(path)-->Line_14 $$ int slashIndex = path.substring(0, index).lastIndexOf("/")[ FD ]
Line_14 $$ int slashIndex = path.substring(0, index).lastIndexOf("/")-->Line_15 $$ if (slashIndex < 0)[ FD ]
