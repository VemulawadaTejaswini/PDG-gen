Line_2 $$ private static String[] convertMessage(final CompilerMessage message) -->Line_9 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_2 $$ private static String[] convertMessage(final CompilerMessage message) -->Line_7 $$ final List<String> lines = new ArrayList<String>()[ CD ]
Line_8 $$ StringTokenizer tokenizer = new StringTokenizer(text, "\n", false)-->Line_9 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_2 $$ private static String[] convertMessage(final CompilerMessage message) -->Line_8 $$ StringTokenizer tokenizer = new StringTokenizer(text, "\n", false)[ CD ]
Line_9 $$ while (tokenizer.hasMoreTokens()) -->Line_10 $$ lines.add(tokenizer.nextToken())[ CD ]
Line_7 $$ final List<String> lines = new ArrayList<String>()-->Line_12 $$ return ArrayUtil.toStringArray(lines)[ FD ]
Line_4 $$ if (!text.contains("\n")) -->Line_5 $$ return new String[] [ CD ]
Line_2 $$ private static String[] convertMessage(final CompilerMessage message) -->Line_3 $$ String text = message.getMessage()[ CD ]
Line_2 $$ private static String[] convertMessage(final CompilerMessage message) -->Line_3 $$ String text = message.getMessage()[ FD ]
Line_2 $$ private static String[] convertMessage(final CompilerMessage message) -->Line_4 $$ if (!text.contains("\n")) [ CD ]
Line_7 $$ final List<String> lines = new ArrayList<String>()-->Line_10 $$ lines.add(tokenizer.nextToken())[ FD ]
Line_8 $$ StringTokenizer tokenizer = new StringTokenizer(text, "\n", false)-->Line_10 $$ lines.add(tokenizer.nextToken())[ FD ]
Line_2 $$ private static String[] convertMessage(final CompilerMessage message) -->Line_12 $$ return ArrayUtil.toStringArray(lines)[ CD ]
Line_3 $$ String text = message.getMessage()-->Line_4 $$ if (!text.contains("\n")) [ FD ]
