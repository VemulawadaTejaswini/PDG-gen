Line_18 $$ if (negativeOptMap.containsValue(name)) -->Line_19 $$ negative = true[ CD ]
Line_6 $$ if (elements.length == 3) -->Line_7 $$ String name = PyPsiUtils.strValue(elements[0])[ CD ]
Line_9 $$ if (name != null && description != null) -->Line_17 $$ boolean negative = false[ CD ]
Line_9 $$ if (name != null && description != null) -->Line_18 $$ if (negativeOptMap.containsValue(name)) [ CD ]
Line_8 $$ final String description = PyPsiUtils.strValue(elements[2])-->Line_27 $$ return new SetupTask.Option(name, StringUtil.capitalize(description), checkbox, negative)[ FD ]
Line_6 $$ if (elements.length == 3) -->Line_8 $$ final String description = PyPsiUtils.strValue(elements[2])[ CD ]
Line_20 $$ for (Map.Entry<String, String> entry : negativeOptMap.entrySet()) -->Line_21 $$ if (entry.getValue().equals(name)) [ FD ]
Line_2 $$ private static SetupTask.Option createOptionFromTuple(PyExpression tuple, List<String> booleanOptions, Map<String, String> negativeOptMap) -->Line_3 $$ tuple = PyPsiUtils.flattenParens(tuple)[ FD ]
Line_7 $$ String name = PyPsiUtils.strValue(elements[0])-->Line_21 $$ if (entry.getValue().equals(name)) [ FD ]
Line_13 $$ if (description.contains("don't use") || description.contains("deprecated")) -->Line_14 $$ return null[ CD ]
Line_2 $$ private static SetupTask.Option createOptionFromTuple(PyExpression tuple, List<String> booleanOptions, Map<String, String> negativeOptMap) -->Line_4 $$ if (tuple instanceof PyTupleExpression) [ FD ]
Line_4 $$ if (tuple instanceof PyTupleExpression) -->Line_5 $$ final PyExpression[] elements = ((PyTupleExpression) tuple).getElements()[ CD ]
Line_7 $$ String name = PyPsiUtils.strValue(elements[0])-->Line_22 $$ name = entry.getKey()[ FD ]
Line_9 $$ if (name != null && description != null) -->Line_13 $$ if (description.contains("don't use") || description.contains("deprecated")) [ CD ]
Line_2 $$ private static SetupTask.Option createOptionFromTuple(PyExpression tuple, List<String> booleanOptions, Map<String, String> negativeOptMap) -->Line_18 $$ if (negativeOptMap.containsValue(name)) [ FD ]
Line_21 $$ if (entry.getValue().equals(name)) -->Line_22 $$ name = entry.getKey()[ CD ]
Line_9 $$ if (name != null && description != null) -->Line_16 $$ final boolean checkbox = booleanOptions.contains(name)[ CD ]
Line_2 $$ private static SetupTask.Option createOptionFromTuple(PyExpression tuple, List<String> booleanOptions, Map<String, String> negativeOptMap) -->Line_16 $$ final boolean checkbox = booleanOptions.contains(name)[ FD ]
Line_8 $$ final String description = PyPsiUtils.strValue(elements[2])-->Line_13 $$ if (description.contains("don't use") || description.contains("deprecated")) [ FD ]
Line_7 $$ String name = PyPsiUtils.strValue(elements[0])-->Line_16 $$ final boolean checkbox = booleanOptions.contains(name)[ FD ]
Line_17 $$ boolean negative = false-->Line_19 $$ negative = true[ FD ]
Line_4 $$ if (tuple instanceof PyTupleExpression) -->Line_6 $$ if (elements.length == 3) [ CD ]
Line_10 $$ if (negativeOptMap.containsKey(name)) -->Line_11 $$ return null[ CD ]
Line_2 $$ private static SetupTask.Option createOptionFromTuple(PyExpression tuple, List<String> booleanOptions, Map<String, String> negativeOptMap) -->Line_10 $$ if (negativeOptMap.containsKey(name)) [ FD ]
Line_6 $$ if (elements.length == 3) -->Line_9 $$ if (name != null && description != null) [ CD ]
Line_20 $$ for (Map.Entry<String, String> entry : negativeOptMap.entrySet()) -->Line_22 $$ name = entry.getKey()[ FD ]
Line_9 $$ if (name != null && description != null) -->Line_10 $$ if (negativeOptMap.containsKey(name)) [ CD ]
Line_7 $$ String name = PyPsiUtils.strValue(elements[0])-->Line_18 $$ if (negativeOptMap.containsValue(name)) [ FD ]
Line_2 $$ private static SetupTask.Option createOptionFromTuple(PyExpression tuple, List<String> booleanOptions, Map<String, String> negativeOptMap) -->Line_4 $$ if (tuple instanceof PyTupleExpression) [ CD ]
Line_3 $$ tuple = PyPsiUtils.flattenParens(tuple)-->Line_4 $$ if (tuple instanceof PyTupleExpression) [ FD ]
Line_2 $$ private static SetupTask.Option createOptionFromTuple(PyExpression tuple, List<String> booleanOptions, Map<String, String> negativeOptMap) -->Line_31 $$ return null[ CD ]
Line_7 $$ String name = PyPsiUtils.strValue(elements[0])-->Line_10 $$ if (negativeOptMap.containsKey(name)) [ FD ]
Line_2 $$ private static SetupTask.Option createOptionFromTuple(PyExpression tuple, List<String> booleanOptions, Map<String, String> negativeOptMap) -->Line_3 $$ tuple = PyPsiUtils.flattenParens(tuple)[ CD ]
Line_2 $$ private static SetupTask.Option createOptionFromTuple(PyExpression tuple, List<String> booleanOptions, Map<String, String> negativeOptMap) -->Line_20 $$ for (Map.Entry<String, String> entry : negativeOptMap.entrySet()) [ FD ]
Line_9 $$ if (name != null && description != null) -->Line_27 $$ return new SetupTask.Option(name, StringUtil.capitalize(description), checkbox, negative)[ CD ]
