Line_22 $$ if (!matcher.find()) -->Line_23 $$ return[ CD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_25 $$ JavaDocBuilder javaDocBuilder = new JavaDocBuilder()[ CD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_9 $$ if (!ListUtil.isEmpty(javaTerm.getParameterTypes())) [ CD ]
Line_3 $$ String javaTermContent = javaTerm.getContent()-->Line_13 $$ if ((_packagePath == null) || (_constructorCount > 1) || !javaTermContent.contains("[ FD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_28 $$ com.thoughtworks.qdox.model.JavaClass superJavaClass = javaClass.getSuperJavaClass()[ CD ]
Line_3 $$ String javaTermContent = javaTerm.getContent()-->Line_31 $$ _content = StringUtil.replace(_content, javaTermContent, StringPool.BLANK)[ FD ]
Line_17 $$ if ((javaTerm.isPrivate() && !accessModifier.equals(_ACCESS_MODIFIER_PRIVATE)) || (javaTerm.isProtected() && !accessModifier.equals(_ACCESS_MODIFIER_PRIVATE) && !accessModifier.equals(_ACCESS_MODIFIER_PROTECTED))) -->Line_18 $$ return[ CD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_26 $$ javaDocBuilder.addSource(_file)[ CD ]
Line_3 $$ String javaTermContent = javaTerm.getContent()-->Line_6 $$ _content = StringUtil.replace(_content, javaTermContent, newJavaTermContent)[ FD ]
Line_3 $$ String javaTermContent = javaTerm.getContent()-->Line_4 $$ if (javaTermContent.contains(StringPool.TAB + "super();")) [ FD ]
Line_9 $$ if (!ListUtil.isEmpty(javaTerm.getParameterTypes())) -->Line_10 $$ checkConstructorParameterOrder(javaTerm)[ CD ]
Line_4 $$ if (javaTermContent.contains(StringPool.TAB + "super();")) -->Line_7 $$ return[ CD ]
Line_4 $$ if (javaTermContent.contains(StringPool.TAB + "super();")) -->Line_5 $$ String newJavaTermContent = StringUtil.replace(javaTermContent, StringPool.TAB + "super();", StringPool.BLANK)[ CD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_3 $$ String javaTermContent = javaTerm.getContent()[ FD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_22 $$ if (!matcher.find()) [ CD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_3 $$ String javaTermContent = javaTerm.getContent()[ CD ]
Line_9 $$ if (!ListUtil.isEmpty(javaTerm.getParameterTypes())) -->Line_11 $$ return[ CD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_17 $$ if ((javaTerm.isPrivate() && !accessModifier.equals(_ACCESS_MODIFIER_PRIVATE)) || (javaTerm.isProtected() && !accessModifier.equals(_ACCESS_MODIFIER_PRIVATE) && !accessModifier.equals(_ACCESS_MODIFIER_PROTECTED))) [ FD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_21 $$ Matcher matcher = pattern.matcher(_content)[ CD ]
Line_16 $$ String accessModifier = getAccessModifier()-->Line_17 $$ if ((javaTerm.isPrivate() && !accessModifier.equals(_ACCESS_MODIFIER_PRIVATE)) || (javaTerm.isProtected() && !accessModifier.equals(_ACCESS_MODIFIER_PRIVATE) && !accessModifier.equals(_ACCESS_MODIFIER_PROTECTED))) [ FD ]
Line_25 $$ JavaDocBuilder javaDocBuilder = new JavaDocBuilder()-->Line_27 $$ com.thoughtworks.qdox.model.JavaClass javaClass = javaClass = javaDocBuilder.getClassByName(getClassName())[ FD ]
Line_30 $$ if ((superJavaClassConstructor != null) && ArrayUtil.isEmpty(superJavaClassConstructor.getExceptions())) -->Line_31 $$ _content = StringUtil.replace(_content, javaTermContent, StringPool.BLANK)[ CD ]
Line_28 $$ com.thoughtworks.qdox.model.JavaClass superJavaClass = javaClass.getSuperJavaClass()-->Line_29 $$ JavaMethod superJavaClassConstructor = superJavaClass.getMethodBySignature(superJavaClass.getName(), null)[ FD ]
Line_25 $$ JavaDocBuilder javaDocBuilder = new JavaDocBuilder()-->Line_26 $$ javaDocBuilder.addSource(_file)[ FD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_27 $$ com.thoughtworks.qdox.model.JavaClass javaClass = javaClass = javaDocBuilder.getClassByName(getClassName())[ CD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_29 $$ JavaMethod superJavaClassConstructor = superJavaClass.getMethodBySignature(superJavaClass.getName(), null)[ CD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_4 $$ if (javaTermContent.contains(StringPool.TAB + "super();")) [ CD ]
Line_4 $$ if (javaTermContent.contains(StringPool.TAB + "super();")) -->Line_6 $$ _content = StringUtil.replace(_content, javaTermContent, newJavaTermContent)[ CD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_9 $$ if (!ListUtil.isEmpty(javaTerm.getParameterTypes())) [ FD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_16 $$ String accessModifier = getAccessModifier()[ CD ]
Line_29 $$ JavaMethod superJavaClassConstructor = superJavaClass.getMethodBySignature(superJavaClass.getName(), null)-->Line_30 $$ if ((superJavaClassConstructor != null) && ArrayUtil.isEmpty(superJavaClassConstructor.getExceptions())) [ FD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_13 $$ if ((_packagePath == null) || (_constructorCount > 1) || !javaTermContent.contains("[ CD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_20 $$ Pattern pattern = Pattern.compile("class " + _name + "[ \t\n]+extends")[ CD ]
Line_27 $$ com.thoughtworks.qdox.model.JavaClass javaClass = javaClass = javaDocBuilder.getClassByName(getClassName())-->Line_28 $$ com.thoughtworks.qdox.model.JavaClass superJavaClass = javaClass.getSuperJavaClass()[ FD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_30 $$ if ((superJavaClassConstructor != null) && ArrayUtil.isEmpty(superJavaClassConstructor.getExceptions())) [ CD ]
Line_13 $$ if ((_packagePath == null) || (_constructorCount > 1) || !javaTermContent.contains("-->Line_14 $$ return[ CD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_17 $$ if ((javaTerm.isPrivate() && !accessModifier.equals(_ACCESS_MODIFIER_PRIVATE)) || (javaTerm.isProtected() && !accessModifier.equals(_ACCESS_MODIFIER_PRIVATE) && !accessModifier.equals(_ACCESS_MODIFIER_PROTECTED))) [ CD ]
Line_20 $$ Pattern pattern = Pattern.compile("class " + _name + "[ \t\n]+extends")-->Line_21 $$ Matcher matcher = pattern.matcher(_content)[ FD ]
Line_5 $$ String newJavaTermContent = StringUtil.replace(javaTermContent, StringPool.TAB + "super();", StringPool.BLANK)-->Line_6 $$ _content = StringUtil.replace(_content, javaTermContent, newJavaTermContent)[ FD ]
Line_3 $$ String javaTermContent = javaTerm.getContent()-->Line_5 $$ String newJavaTermContent = StringUtil.replace(javaTermContent, StringPool.TAB + "super();", StringPool.BLANK)[ FD ]
Line_2 $$ protected void checkConstructor(JavaTerm javaTerm) throws Exception -->Line_10 $$ checkConstructorParameterOrder(javaTerm)[ FD ]
Line_21 $$ Matcher matcher = pattern.matcher(_content)-->Line_22 $$ if (!matcher.find()) [ FD ]
