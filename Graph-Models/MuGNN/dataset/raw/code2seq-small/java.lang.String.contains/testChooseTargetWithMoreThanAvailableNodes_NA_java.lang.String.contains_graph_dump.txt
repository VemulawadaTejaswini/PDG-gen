Line_3 $$ for (int i = 0; i < 2; i++) -->Line_17 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_3 $$ for (int i = 0; i < 2; i++) [ CD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_7 $$ final Logger logger = Logger.getRootLogger()[ CD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_10 $$ assertEquals(targets.length, NUM_OF_DATANODES - 2)[ CD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_11 $$ final List<LoggingEvent> log = appender.getLog()[ CD ]
Line_6 $$ final LogVerificationAppender appender = new LogVerificationAppender()-->Line_11 $$ final List<LoggingEvent> log = appender.getLog()[ FD ]
Line_11 $$ final List<LoggingEvent> log = appender.getLog()-->Line_13 $$ assertFalse(log.size() == 0)[ FD ]
Line_11 $$ final List<LoggingEvent> log = appender.getLog()-->Line_12 $$ assertNotNull(log)[ FD ]
Line_3 $$ for (int i = 0; i < 2; i++) -->Line_4 $$ updateHeartbeatWithUsage(dataNodes[i], 2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE, 0L, (HdfsConstants.MIN_BLOCKS_FOR_WRITE - 1) * BLOCK_SIZE, 0L, 0L, 0L, 0, 0)[ CD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_17 $$ for (int i = 0; i < 2; i++) [ CD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_13 $$ assertFalse(log.size() == 0)[ CD ]
Line_14 $$ final LoggingEvent lastLogEntry = log.get(log.size() - 1)-->Line_15 $$ assertTrue(Level.WARN.isGreaterOrEqual(lastLogEntry.getLevel()))[ FD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_12 $$ assertNotNull(log)[ CD ]
Line_11 $$ final List<LoggingEvent> log = appender.getLog()-->Line_14 $$ final LoggingEvent lastLogEntry = log.get(log.size() - 1)[ FD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_8 $$ logger.addAppender(appender)[ CD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_15 $$ assertTrue(Level.WARN.isGreaterOrEqual(lastLogEntry.getLevel()))[ CD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_16 $$ assertTrue(((String) lastLogEntry.getMessage()).contains("in need of 2"))[ CD ]
Line_7 $$ final Logger logger = Logger.getRootLogger()-->Line_8 $$ logger.addAppender(appender)[ FD ]
Line_17 $$ for (int i = 0; i < 2; i++) -->Line_18 $$ updateHeartbeatWithUsage(dataNodes[i], 2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE, 0L, HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE, 0L, 0L, 0L, 0, 0)[ CD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_9 $$ DatanodeStorageInfo[] targets = chooseTarget(NUM_OF_DATANODES)[ CD ]
Line_14 $$ final LoggingEvent lastLogEntry = log.get(log.size() - 1)-->Line_16 $$ assertTrue(((String) lastLogEntry.getMessage()).contains("in need of 2"))[ FD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_6 $$ final LogVerificationAppender appender = new LogVerificationAppender()[ CD ]
Line_2 $$ public void testChooseTargetWithMoreThanAvailableNodes() throws Exception -->Line_14 $$ final LoggingEvent lastLogEntry = log.get(log.size() - 1)[ CD ]
Line_6 $$ final LogVerificationAppender appender = new LogVerificationAppender()-->Line_8 $$ logger.addAppender(appender)[ FD ]
