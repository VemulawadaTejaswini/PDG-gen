Line_7 $$ Configuration conf = new HdfsConfiguration()-->Line_29 $$ outStr = runFsck(conf, 0, true, topDir, "-openforwrite")[ FD ]
Line_5 $$ FileSystem fs = null-->Line_41 $$ fs.close()[ FD ]
Line_34 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_37 $$ assertFalse(outStr.contains("OPENFORWRITE"))[ FD ]
Line_3 $$ DFSTestUtil util = new DFSTestUtil.Builder().setName("TestFsck").setNumFiles(4).build()-->Line_15 $$ util.waitReplication(fs, topDir, (short) 3)[ FD ]
Line_2 $$ public void testFsckOpenFiles() throws Exception -->Line_5 $$ FileSystem fs = null[ CD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_13 $$ cluster.waitActive()[ FD ]
Line_7 $$ Configuration conf = new HdfsConfiguration()-->Line_34 $$ outStr = runFsck(conf, 0, true, topDir)[ FD ]
Line_10 $$ String topDir = "/srcdat"-->Line_34 $$ outStr = runFsck(conf, 0, true, topDir)[ FD ]
Line_5 $$ FileSystem fs = null-->Line_19 $$ FSDataOutputStream out = fs.create(openFile)[ FD ]
Line_11 $$ String randomString = "HADOOP  "-->Line_22 $$ out.write(randomString.getBytes())[ FD ]
Line_25 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_37 $$ assertFalse(outStr.contains("OPENFORWRITE"))[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()-->Line_54 $$ cluster.shutdown()[ FD ]
Line_10 $$ String topDir = "/srcdat"-->Line_15 $$ util.waitReplication(fs, topDir, (short) 3)[ FD ]
Line_25 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_28 $$ assertFalse(outStr.contains("OPENFORWRITE"))[ FD ]
Line_2 $$ public void testFsckOpenFiles() throws Exception -->Line_4 $$ MiniDFSCluster cluster = null[ CD ]
Line_10 $$ String topDir = "/srcdat"-->Line_14 $$ util.createFiles(fs, topDir)[ FD ]
Line_3 $$ DFSTestUtil util = new DFSTestUtil.Builder().setName("TestFsck").setNumFiles(4).build()-->Line_38 $$ util.cleanup(fs, topDir)[ FD ]
Line_20 $$ int writeCount = 0-->Line_23 $$ writeCount++[ FD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_26 $$ System.out.println(outStr)[ FD ]
Line_5 $$ FileSystem fs = null-->Line_39 $$ if (fs != null) [ FD ]
Line_2 $$ public void testFsckOpenFiles() throws Exception -->Line_3 $$ DFSTestUtil util = new DFSTestUtil.Builder().setName("TestFsck").setNumFiles(4).build()[ CD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_41 $$ fs.close()[ FD ]
Line_5 $$ FileSystem fs = null-->Line_38 $$ util.cleanup(fs, topDir)[ FD ]
Line_19 $$ FSDataOutputStream out = fs.create(openFile)-->Line_22 $$ out.write(randomString.getBytes())[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_12 $$ fs = cluster.getFileSystem()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_49 $$ fs.close()[ FD ]
Line_29 $$ outStr = runFsck(conf, 0, true, topDir, "-openforwrite")-->Line_31 $$ assertTrue(outStr.contains("OPENFORWRITE"))[ FD ]
Line_5 $$ FileSystem fs = null-->Line_49 $$ fs.close()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_15 $$ util.waitReplication(fs, topDir, (short) 3)[ FD ]
Line_3 $$ DFSTestUtil util = new DFSTestUtil.Builder().setName("TestFsck").setNumFiles(4).build()-->Line_14 $$ util.createFiles(fs, topDir)[ FD ]
Line_29 $$ outStr = runFsck(conf, 0, true, topDir, "-openforwrite")-->Line_34 $$ outStr = runFsck(conf, 0, true, topDir)[ FD ]
Line_21 $$ while (writeCount != 100) -->Line_23 $$ writeCount++[ CD ]
Line_7 $$ Configuration conf = new HdfsConfiguration()-->Line_16 $$ String outStr = runFsck(conf, 0, true, "/")[ FD ]
Line_25 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_30 $$ System.out.println(outStr)[ FD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_27 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_7 $$ Configuration conf = new HdfsConfiguration()-->Line_25 $$ outStr = runFsck(conf, 0, true, topDir)[ FD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_34 $$ outStr = runFsck(conf, 0, true, topDir)[ FD ]
Line_53 $$ if (cluster != null) -->Line_54 $$ cluster.shutdown()[ CD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_37 $$ assertFalse(outStr.contains("OPENFORWRITE"))[ FD ]
Line_29 $$ outStr = runFsck(conf, 0, true, topDir, "-openforwrite")-->Line_30 $$ System.out.println(outStr)[ FD ]
Line_19 $$ FSDataOutputStream out = fs.create(openFile)-->Line_33 $$ out.close()[ FD ]
Line_21 $$ while (writeCount != 100) -->Line_22 $$ out.write(randomString.getBytes())[ CD ]
Line_29 $$ outStr = runFsck(conf, 0, true, topDir, "-openforwrite")-->Line_32 $$ assertTrue(outStr.contains("openFile"))[ FD ]
Line_10 $$ String topDir = "/srcdat"-->Line_25 $$ outStr = runFsck(conf, 0, true, topDir)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_47 $$ if (fs != null) [ FD ]
Line_10 $$ String topDir = "/srcdat"-->Line_29 $$ outStr = runFsck(conf, 0, true, topDir, "-openforwrite")[ FD ]
Line_5 $$ FileSystem fs = null-->Line_14 $$ util.createFiles(fs, topDir)[ FD ]
Line_25 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_34 $$ outStr = runFsck(conf, 0, true, topDir)[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()-->Line_45 $$ cluster.shutdown()[ FD ]
Line_25 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_29 $$ outStr = runFsck(conf, 0, true, topDir, "-openforwrite")[ FD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_25 $$ outStr = runFsck(conf, 0, true, topDir)[ FD ]
Line_29 $$ outStr = runFsck(conf, 0, true, topDir, "-openforwrite")-->Line_35 $$ System.out.println(outStr)[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()-->Line_53 $$ if (cluster != null) [ FD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_35 $$ System.out.println(outStr)[ FD ]
Line_25 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_27 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_39 $$ if (fs != null) [ FD ]
Line_20 $$ int writeCount = 0-->Line_21 $$ while (writeCount != 100) [ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_45 $$ cluster.shutdown()[ FD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_32 $$ assertTrue(outStr.contains("openFile"))[ FD ]
Line_5 $$ FileSystem fs = null-->Line_12 $$ fs = cluster.getFileSystem()[ FD ]
Line_10 $$ String topDir = "/srcdat"-->Line_38 $$ util.cleanup(fs, topDir)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_14 $$ util.createFiles(fs, topDir)[ FD ]
Line_34 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_36 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_17 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_7 $$ Configuration conf = new HdfsConfiguration()-->Line_8 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 10000L)[ FD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_29 $$ outStr = runFsck(conf, 0, true, topDir, "-openforwrite")[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_38 $$ util.cleanup(fs, topDir)[ FD ]
Line_5 $$ FileSystem fs = null-->Line_47 $$ if (fs != null) [ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_53 $$ if (cluster != null) [ FD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_36 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_5 $$ FileSystem fs = null-->Line_15 $$ util.waitReplication(fs, topDir, (short) 3)[ FD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_30 $$ System.out.println(outStr)[ FD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_31 $$ assertTrue(outStr.contains("OPENFORWRITE"))[ FD ]
Line_25 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_36 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()-->Line_12 $$ fs = cluster.getFileSystem()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()[ FD ]
Line_25 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_32 $$ assertTrue(outStr.contains("openFile"))[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()-->Line_13 $$ cluster.waitActive()[ FD ]
Line_25 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_26 $$ System.out.println(outStr)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_54 $$ cluster.shutdown()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_19 $$ FSDataOutputStream out = fs.create(openFile)[ FD ]
Line_18 $$ Path openFile = new Path(topDir + "/openFile")-->Line_19 $$ FSDataOutputStream out = fs.create(openFile)[ FD ]
Line_29 $$ outStr = runFsck(conf, 0, true, topDir, "-openforwrite")-->Line_37 $$ assertFalse(outStr.contains("OPENFORWRITE"))[ FD ]
Line_25 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_35 $$ System.out.println(outStr)[ FD ]
Line_29 $$ outStr = runFsck(conf, 0, true, topDir, "-openforwrite")-->Line_36 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_34 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_35 $$ System.out.println(outStr)[ FD ]
Line_16 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_28 $$ assertFalse(outStr.contains("OPENFORWRITE"))[ FD ]
Line_25 $$ outStr = runFsck(conf, 0, true, topDir)-->Line_31 $$ assertTrue(outStr.contains("OPENFORWRITE"))[ FD ]
