Line_8 $$ String pathInJarFile = null-->Line_26 $$ doRetrieveMatchingJarEntries(absoluteJarPath, pathInJarFile, result)[ FD ]
Line_17 $$ currPath = currPath.substring(dirIndex)-->Line_29 $$ if (getPathMatcher().match(fullPattern, currPath)) [ FD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_9 $$ if (jarFileSep > 0 && jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length() < fullPattern.length()) [ FD ]
Line_29 $$ if (getPathMatcher().match(fullPattern, currPath)) -->Line_30 $$ result.add(new ServletContextResource(servletContext, currPath))[ CD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_20 $$ if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <= StringUtils.countOccurrencesOf(fullPattern, "/"))) [ FD ]
Line_24 $$ String absoluteJarPath = servletContext.getRealPath(currPath)-->Line_26 $$ doRetrieveMatchingJarEntries(absoluteJarPath, pathInJarFile, result)[ FD ]
Line_13 $$ for (String currPath : candidates) -->Line_21 $$ doRetrieveMatchingServletContextResources(servletContext, fullPattern, currPath, result)[ FD ]
Line_13 $$ for (String currPath : candidates) -->Line_14 $$ if (!currPath.startsWith(dir)) [ FD ]
Line_23 $$ if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) -->Line_24 $$ String absoluteJarPath = servletContext.getRealPath(currPath)[ CD ]
Line_17 $$ currPath = currPath.substring(dirIndex)-->Line_20 $$ if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <= StringUtils.countOccurrencesOf(fullPattern, "/"))) [ FD ]
Line_7 $$ String jarFilePath = null-->Line_23 $$ if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) [ FD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_24 $$ String absoluteJarPath = servletContext.getRealPath(currPath)[ FD ]
Line_14 $$ if (!currPath.startsWith(dir)) -->Line_15 $$ int dirIndex = currPath.indexOf(dir)[ CD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_21 $$ doRetrieveMatchingServletContextResources(servletContext, fullPattern, currPath, result)[ FD ]
Line_23 $$ if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) -->Line_25 $$ if (absoluteJarPath != null) [ CD ]
Line_4 $$ if (candidates != null) -->Line_9 $$ if (jarFileSep > 0 && jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length() < fullPattern.length()) [ CD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_5 $$ boolean dirDepthNotFixed = fullPattern.contains("**")[ FD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_3 $$ Set<String> candidates = servletContext.getResourcePaths(dir)[ FD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_30 $$ result.add(new ServletContextResource(servletContext, currPath))[ FD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_4 $$ if (candidates != null) [ CD ]
Line_13 $$ for (String currPath : candidates) -->Line_20 $$ if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <= StringUtils.countOccurrencesOf(fullPattern, "/"))) [ FD ]
Line_8 $$ String pathInJarFile = null-->Line_11 $$ pathInJarFile = fullPattern.substring(jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length())[ FD ]
Line_15 $$ int dirIndex = currPath.indexOf(dir)-->Line_17 $$ currPath = currPath.substring(dirIndex)[ FD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_3 $$ Set<String> candidates = servletContext.getResourcePaths(dir)[ CD ]
Line_17 $$ currPath = currPath.substring(dirIndex)-->Line_23 $$ if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) [ FD ]
Line_6 $$ int jarFileSep = fullPattern.indexOf(ResourceUtils.JAR_URL_SEPARATOR)-->Line_10 $$ jarFilePath = fullPattern.substring(0, jarFileSep)[ FD ]
Line_9 $$ if (jarFileSep > 0 && jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length() < fullPattern.length()) -->Line_10 $$ jarFilePath = fullPattern.substring(0, jarFileSep)[ CD ]
Line_17 $$ currPath = currPath.substring(dirIndex)-->Line_21 $$ doRetrieveMatchingServletContextResources(servletContext, fullPattern, currPath, result)[ FD ]
Line_13 $$ for (String currPath : candidates) -->Line_15 $$ int dirIndex = currPath.indexOf(dir)[ FD ]
Line_13 $$ for (String currPath : candidates) -->Line_17 $$ currPath = currPath.substring(dirIndex)[ FD ]
Line_9 $$ if (jarFileSep > 0 && jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length() < fullPattern.length()) -->Line_11 $$ pathInJarFile = fullPattern.substring(jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length())[ CD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_29 $$ if (getPathMatcher().match(fullPattern, currPath)) [ FD ]
Line_15 $$ int dirIndex = currPath.indexOf(dir)-->Line_16 $$ if (dirIndex != -1) [ FD ]
Line_13 $$ for (String currPath : candidates) -->Line_24 $$ String absoluteJarPath = servletContext.getRealPath(currPath)[ FD ]
Line_4 $$ if (candidates != null) -->Line_6 $$ int jarFileSep = fullPattern.indexOf(ResourceUtils.JAR_URL_SEPARATOR)[ CD ]
Line_14 $$ if (!currPath.startsWith(dir)) -->Line_16 $$ if (dirIndex != -1) [ CD ]
Line_10 $$ jarFilePath = fullPattern.substring(0, jarFileSep)-->Line_23 $$ if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) [ FD ]
Line_11 $$ pathInJarFile = fullPattern.substring(jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length())-->Line_26 $$ doRetrieveMatchingJarEntries(absoluteJarPath, pathInJarFile, result)[ FD ]
Line_16 $$ if (dirIndex != -1) -->Line_17 $$ currPath = currPath.substring(dirIndex)[ CD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_11 $$ pathInJarFile = fullPattern.substring(jarFileSep + ResourceUtils.JAR_URL_SEPARATOR.length())[ FD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_14 $$ if (!currPath.startsWith(dir)) [ FD ]
Line_24 $$ String absoluteJarPath = servletContext.getRealPath(currPath)-->Line_25 $$ if (absoluteJarPath != null) [ FD ]
Line_4 $$ if (candidates != null) -->Line_8 $$ String pathInJarFile = null[ CD ]
Line_17 $$ currPath = currPath.substring(dirIndex)-->Line_24 $$ String absoluteJarPath = servletContext.getRealPath(currPath)[ FD ]
Line_3 $$ Set<String> candidates = servletContext.getResourcePaths(dir)-->Line_4 $$ if (candidates != null) [ FD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_6 $$ int jarFileSep = fullPattern.indexOf(ResourceUtils.JAR_URL_SEPARATOR)[ FD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_26 $$ doRetrieveMatchingJarEntries(absoluteJarPath, pathInJarFile, result)[ FD ]
Line_25 $$ if (absoluteJarPath != null) -->Line_26 $$ doRetrieveMatchingJarEntries(absoluteJarPath, pathInJarFile, result)[ CD ]
Line_4 $$ if (candidates != null) -->Line_5 $$ boolean dirDepthNotFixed = fullPattern.contains("**")[ CD ]
Line_7 $$ String jarFilePath = null-->Line_10 $$ jarFilePath = fullPattern.substring(0, jarFileSep)[ FD ]
Line_4 $$ if (candidates != null) -->Line_7 $$ String jarFilePath = null[ CD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_15 $$ int dirIndex = currPath.indexOf(dir)[ FD ]
Line_13 $$ for (String currPath : candidates) -->Line_23 $$ if (jarFilePath != null && getPathMatcher().match(jarFilePath, currPath)) [ FD ]
Line_2 $$ protected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_10 $$ jarFilePath = fullPattern.substring(0, jarFileSep)[ FD ]
Line_20 $$ if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <= StringUtils.countOccurrencesOf(fullPattern, "/"))) -->Line_21 $$ doRetrieveMatchingServletContextResources(servletContext, fullPattern, currPath, result)[ CD ]
Line_13 $$ for (String currPath : candidates) -->Line_29 $$ if (getPathMatcher().match(fullPattern, currPath)) [ FD ]
