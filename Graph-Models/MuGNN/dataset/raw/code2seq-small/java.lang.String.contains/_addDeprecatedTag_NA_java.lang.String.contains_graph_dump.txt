Line_2 $$ private String _addDeprecatedTag(String comment, AbstractBaseJavaEntity abstractBaseJavaEntity, String indent) throws Exception -->Line_7 $$ if (!comment.contains("* @deprecated ") || _hasAnnotation(abstractBaseJavaEntity, "Deprecated")) [ CD ]
Line_2 $$ private String _addDeprecatedTag(String comment, AbstractBaseJavaEntity abstractBaseJavaEntity, String indent) throws Exception -->Line_10 $$ return comment + indent + "@Deprecated\n"[ CD ]
Line_6 $$ comment = ToolsUtil.stripFullyQualifiedClassNames(comment, _imports)-->Line_7 $$ if (!comment.contains("* @deprecated ") || _hasAnnotation(abstractBaseJavaEntity, "Deprecated")) [ FD ]
Line_7 $$ if (!comment.contains("* @deprecated ") || _hasAnnotation(abstractBaseJavaEntity, "Deprecated")) -->Line_8 $$ return comment[ CD ]
Line_2 $$ private String _addDeprecatedTag(String comment, AbstractBaseJavaEntity abstractBaseJavaEntity, String indent) throws Exception -->Line_6 $$ comment = ToolsUtil.stripFullyQualifiedClassNames(comment, _imports)[ CD ]
Line_2 $$ private String _addDeprecatedTag(String comment, AbstractBaseJavaEntity abstractBaseJavaEntity, String indent) throws Exception -->Line_3 $$ if (comment == null) [ FD ]
Line_2 $$ private String _addDeprecatedTag(String comment, AbstractBaseJavaEntity abstractBaseJavaEntity, String indent) throws Exception -->Line_3 $$ if (comment == null) [ CD ]
Line_2 $$ private String _addDeprecatedTag(String comment, AbstractBaseJavaEntity abstractBaseJavaEntity, String indent) throws Exception -->Line_6 $$ comment = ToolsUtil.stripFullyQualifiedClassNames(comment, _imports)[ FD ]
Line_2 $$ private String _addDeprecatedTag(String comment, AbstractBaseJavaEntity abstractBaseJavaEntity, String indent) throws Exception -->Line_7 $$ if (!comment.contains("* @deprecated ") || _hasAnnotation(abstractBaseJavaEntity, "Deprecated")) [ FD ]
Line_3 $$ if (comment == null) -->Line_4 $$ return null[ CD ]
