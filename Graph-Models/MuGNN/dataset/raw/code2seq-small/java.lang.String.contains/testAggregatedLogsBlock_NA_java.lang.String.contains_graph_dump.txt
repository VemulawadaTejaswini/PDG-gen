Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_9 $$ PrintWriter printWriter = new PrintWriter(data)[ CD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_17 $$ assertTrue(out.contains("test log3"))[ CD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_11 $$ HtmlBlock.Block block = new BlockForTest(html, printWriter, 10, false)[ CD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_16 $$ assertTrue(out.contains("test log2"))[ CD ]
Line_4 $$ Configuration configuration = getConfiguration()-->Line_7 $$ AggregatedLogsBlockForTest aggregatedBlock = getAggregatedLogsBlockForTest(configuration, "admin", "container_0_0001_01_000001")[ FD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_4 $$ Configuration configuration = getConfiguration()[ CD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_5 $$ writeLogs("target/logs/logs/application_0_0001/container_0_0001_01_000001")[ CD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_8 $$ ByteArrayOutputStream data = new ByteArrayOutputStream()[ CD ]
Line_14 $$ String out = data.toString()-->Line_16 $$ assertTrue(out.contains("test log2"))[ FD ]
Line_14 $$ String out = data.toString()-->Line_17 $$ assertTrue(out.contains("test log3"))[ FD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_7 $$ AggregatedLogsBlockForTest aggregatedBlock = getAggregatedLogsBlockForTest(configuration, "admin", "container_0_0001_01_000001")[ CD ]
Line_11 $$ HtmlBlock.Block block = new BlockForTest(html, printWriter, 10, false)-->Line_13 $$ block.getWriter().flush()[ FD ]
Line_11 $$ HtmlBlock.Block block = new BlockForTest(html, printWriter, 10, false)-->Line_12 $$ aggregatedBlock.render(block)[ FD ]
Line_8 $$ ByteArrayOutputStream data = new ByteArrayOutputStream()-->Line_14 $$ String out = data.toString()[ FD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_6 $$ writeLog(configuration, "admin")[ CD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_13 $$ block.getWriter().flush()[ CD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_12 $$ aggregatedBlock.render(block)[ CD ]
Line_7 $$ AggregatedLogsBlockForTest aggregatedBlock = getAggregatedLogsBlockForTest(configuration, "admin", "container_0_0001_01_000001")-->Line_12 $$ aggregatedBlock.render(block)[ FD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_3 $$ FileUtil.fullyDelete(new File("target/logs"))[ CD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_15 $$ assertTrue(out.contains("test log1"))[ CD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_10 $$ HtmlBlock html = new HtmlBlockForTest()[ CD ]
Line_2 $$ public void testAggregatedLogsBlock() throws Exception -->Line_14 $$ String out = data.toString()[ CD ]
Line_14 $$ String out = data.toString()-->Line_15 $$ assertTrue(out.contains("test log1"))[ FD ]
Line_4 $$ Configuration configuration = getConfiguration()-->Line_6 $$ writeLog(configuration, "admin")[ FD ]
