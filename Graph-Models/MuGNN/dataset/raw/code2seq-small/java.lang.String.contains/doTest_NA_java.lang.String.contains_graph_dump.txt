Line_41 $$ final BufferedReader reader = new BufferedReader(new StringReader(myOut.toString()))-->Line_43 $$ line = reader.readLine()[ FD ]
Line_5 $$ for (String name : myMap.keySet()) -->Line_14 $$ final RegExpParseTest.Test test = myMap.get(name)[ FD ]
Line_16 $$ if (test.regExpHost != null) -->Line_19 $$ RegExpLanguageHosts.setRegExpHost(host)[ CD ]
Line_34 $$ if (test.expectedResult == Result.ERR) -->Line_37 $$ e.printStackTrace(System.out)[ CD ]
Line_16 $$ if (test.regExpHost != null) -->Line_18 $$ final RegExpLanguageHost host = aClass.newInstance()[ CD ]
Line_43 $$ line = reader.readLine()-->Line_45 $$ if (line != null) [ FD ]
Line_27 $$ if (test.expectedResult == Result.ERR) -->Line_31 $$ System.out.println("  OK")[ CD ]
Line_27 $$ if (test.expectedResult == Result.ERR) -->Line_28 $$ System.out.println("  FAILED. Expression incorrectly parsed OK: " + test.pattern)[ CD ]
Line_17 $$ final Class<RegExpLanguageHost> aClass = (Class<RegExpLanguageHost>) Class.forName(test.regExpHost)-->Line_18 $$ final RegExpLanguageHost host = aClass.newInstance()[ FD ]
Line_34 $$ if (test.expectedResult == Result.ERR) -->Line_35 $$ System.out.println("  OK")[ CD ]
Line_2 $$ private void doTest(String prefix) throws IOException -->Line_60 $$ assertFalse(failed > 0)[ CD ]
Line_43 $$ line = reader.readLine()-->Line_42 $$ do [ FD ]
Line_43 $$ line = reader.readLine()-->Line_47 $$ System.out.println("ERROR: " + line.replace("java.lang.Error: junit.framework.AssertionFailedError:", ""))[ FD ]
Line_40 $$ String line-->Line_45 $$ if (line != null) [ FD ]
Line_43 $$ line = reader.readLine()-->Line_46 $$ if (line.matches(".*java.lang.Error: junit.framework.AssertionFailedError:.*")) [ FD ]
Line_39 $$ if (myOut.size() > 0) -->Line_42 $$ do [ CD ]
Line_34 $$ if (test.expectedResult == Result.ERR) -->Line_39 $$ if (myOut.size() > 0) [ CD ]
Line_42 $$ do -->Line_43 $$ line = reader.readLine()[ CD ]
Line_2 $$ private void doTest(String prefix) throws IOException -->Line_9 $$ if (prefix != null && !name.startsWith(prefix)) [ FD ]
Line_5 $$ for (String name : myMap.keySet()) -->Line_6 $$ if (prefix == null && name.contains("/")) [ FD ]
Line_2 $$ private void doTest(String prefix) throws IOException -->Line_4 $$ int failed = 0[ CD ]
Line_39 $$ if (myOut.size() > 0) -->Line_40 $$ String line[ CD ]
Line_45 $$ if (line != null) -->Line_46 $$ if (line.matches(".*java.lang.Error: junit.framework.AssertionFailedError:.*")) [ CD ]
Line_39 $$ if (myOut.size() > 0) -->Line_45 $$ if (line != null) [ CD ]
Line_2 $$ private void doTest(String prefix) throws IOException -->Line_59 $$ System.out.println(n + " Tests executed, " + failed + " failed")[ CD ]
Line_27 $$ if (test.expectedResult == Result.ERR) -->Line_29 $$ failed++[ CD ]
Line_16 $$ if (test.regExpHost != null) -->Line_17 $$ final Class<RegExpLanguageHost> aClass = (Class<RegExpLanguageHost>) Class.forName(test.regExpHost)[ CD ]
Line_4 $$ int failed = 0-->Line_53 $$ failed++[ FD ]
Line_40 $$ String line-->Line_47 $$ System.out.println("ERROR: " + line.replace("java.lang.Error: junit.framework.AssertionFailedError:", ""))[ FD ]
Line_39 $$ if (myOut.size() > 0) -->Line_41 $$ final BufferedReader reader = new BufferedReader(new StringReader(myOut.toString()))[ CD ]
Line_3 $$ int n = 0-->Line_13 $$ n++[ FD ]
Line_46 $$ if (line.matches(".*java.lang.Error: junit.framework.AssertionFailedError:.*")) -->Line_47 $$ System.out.println("ERROR: " + line.replace("java.lang.Error: junit.framework.AssertionFailedError:", ""))[ CD ]
Line_4 $$ int failed = 0-->Line_29 $$ failed++[ FD ]
Line_40 $$ String line-->Line_42 $$ do [ FD ]
Line_45 $$ if (line != null) -->Line_50 $$ System.out.println("ERROR: " + myOut.toString())[ CD ]
Line_2 $$ private void doTest(String prefix) throws IOException -->Line_3 $$ int n = 0[ CD ]
Line_34 $$ if (test.expectedResult == Result.ERR) -->Line_53 $$ failed++[ CD ]
Line_40 $$ String line-->Line_43 $$ line = reader.readLine()[ FD ]
Line_5 $$ for (String name : myMap.keySet()) -->Line_9 $$ if (prefix != null && !name.startsWith(prefix)) [ FD ]
Line_40 $$ String line-->Line_46 $$ if (line.matches(".*java.lang.Error: junit.framework.AssertionFailedError:.*")) [ FD ]
Line_2 $$ private void doTest(String prefix) throws IOException -->Line_58 $$ System.out.println("")[ CD ]
Line_34 $$ if (test.expectedResult == Result.ERR) -->Line_38 $$ System.out.println("  FAILED. Expression = " + test.pattern)[ CD ]
Line_18 $$ final RegExpLanguageHost host = aClass.newInstance()-->Line_19 $$ RegExpLanguageHosts.setRegExpHost(host)[ FD ]
