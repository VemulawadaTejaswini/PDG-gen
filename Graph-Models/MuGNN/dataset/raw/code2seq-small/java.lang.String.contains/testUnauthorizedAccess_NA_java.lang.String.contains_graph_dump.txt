Line_10 $$ while (containerManager.containerTokens == null && waitCount++ < 40) -->Line_11 $$ LOG.info("Waiting for AM Launch to happen..")[ CD ]
Line_22 $$ ApplicationMasterProtocol client = currentUser.doAs(new PrivilegedAction<ApplicationMasterProtocol>() -->Line_24 $$ return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class, serviceAddr, conf)[ CD ]
Line_18 $$ final Configuration conf = rm.getConfig()-->Line_24 $$ return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class, serviceAddr, conf)[ FD ]
Line_7 $$ RMApp app = rm.submitApp(1024)-->Line_15 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()[ FD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_21 $$ UserGroupInformation currentUser = UserGroupInformation.createRemoteUser(applicationAttemptId.toString())[ CD ]
Line_9 $$ int waitCount = 0-->Line_10 $$ while (containerManager.containerTokens == null && waitCount++ < 40) [ FD ]
Line_15 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()-->Line_17 $$ waitForLaunchedState(attempt)[ FD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_22 $$ ApplicationMasterProtocol client = currentUser.doAs(new PrivilegedAction<ApplicationMasterProtocol>() [ CD ]
Line_21 $$ UserGroupInformation currentUser = UserGroupInformation.createRemoteUser(applicationAttemptId.toString())-->Line_22 $$ ApplicationMasterProtocol client = currentUser.doAs(new PrivilegedAction<ApplicationMasterProtocol>() [ FD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_16 $$ ApplicationAttemptId applicationAttemptId = attempt.getAppAttemptId()[ CD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_8 $$ nm1.nodeHeartbeat(true)[ CD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_7 $$ RMApp app = rm.submitApp(1024)[ CD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_15 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()[ CD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_17 $$ waitForLaunchedState(attempt)[ CD ]
Line_18 $$ final Configuration conf = rm.getConfig()-->Line_19 $$ final YarnRPC rpc = YarnRPC.create(conf)[ FD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_10 $$ while (containerManager.containerTokens == null && waitCount++ < 40) [ CD ]
Line_15 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()-->Line_16 $$ ApplicationAttemptId applicationAttemptId = attempt.getAppAttemptId()[ FD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_5 $$ rm.start()[ CD ]
Line_10 $$ while (containerManager.containerTokens == null && waitCount++ < 40) -->Line_12 $$ Thread.sleep(1000)[ CD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_18 $$ final Configuration conf = rm.getConfig()[ CD ]
Line_20 $$ final InetSocketAddress serviceAddr = conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT)-->Line_24 $$ return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class, serviceAddr, conf)[ FD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_19 $$ final YarnRPC rpc = YarnRPC.create(conf)[ CD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_3 $$ MyContainerManager containerManager = new MyContainerManager()[ CD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_9 $$ int waitCount = 0[ CD ]
Line_22 $$ ApplicationMasterProtocol client = currentUser.doAs(new PrivilegedAction<ApplicationMasterProtocol>() -->Line_29 $$ client.registerApplicationMaster(request)[ FD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_27 $$ RegisterApplicationMasterRequest request = Records.newRecord(RegisterApplicationMasterRequest.class)[ CD ]
Line_16 $$ ApplicationAttemptId applicationAttemptId = attempt.getAppAttemptId()-->Line_21 $$ UserGroupInformation currentUser = UserGroupInformation.createRemoteUser(applicationAttemptId.toString())[ FD ]
Line_32 $$ if (isCause(AccessControlException.class, e)) -->Line_34 $$ if (UserGroupInformation.isSecurityEnabled()) [ CD ]
Line_32 $$ if (isCause(AccessControlException.class, e)) -->Line_39 $$ Assert.assertTrue(e.getCause().getMessage().contains(expectedMessage))[ CD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_14 $$ Assert.assertNotNull(containerManager.containerTokens)[ CD ]
Line_18 $$ final Configuration conf = rm.getConfig()-->Line_20 $$ final InetSocketAddress serviceAddr = conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT)[ FD ]
Line_19 $$ final YarnRPC rpc = YarnRPC.create(conf)-->Line_24 $$ return (ApplicationMasterProtocol) rpc.getProxy(ApplicationMasterProtocol.class, serviceAddr, conf)[ FD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_20 $$ final InetSocketAddress serviceAddr = conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT)[ CD ]
Line_6 $$ MockNM nm1 = rm.registerNode("localhost:1234", 5120)-->Line_8 $$ nm1.nodeHeartbeat(true)[ FD ]
Line_2 $$ public void testUnauthorizedAccess() throws Exception -->Line_6 $$ MockNM nm1 = rm.registerNode("localhost:1234", 5120)[ CD ]
