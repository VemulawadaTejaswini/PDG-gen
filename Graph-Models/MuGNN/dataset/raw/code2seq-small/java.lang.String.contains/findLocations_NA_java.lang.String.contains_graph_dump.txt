Line_28 $$ final PyFunction method = cls.findMethodByName(methodName, true, null)-->Line_29 $$ if (method == null) [ FD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_11 $$ final PsiFile psiFile = PsiManager.getInstance(project).findFile(virtualFile)[ FD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_35 $$ if (methodName != null) [ FD ]
Line_6 $$ final List<Location> locations = new ArrayList<Location>()-->Line_32 $$ locations.add(new PsiLocation<PyFunction>(project, method))[ FD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_36 $$ for (PyFunction function : PyFunctionNameIndex.find(methodName, project)) [ FD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_50 $$ return locations[ CD ]
Line_18 $$ final PsiFile containingFile = cls.getContainingFile()-->Line_19 $$ final VirtualFile virtualFile = containingFile.getVirtualFile()[ FD ]
Line_8 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(fileName)-->Line_20 $$ final String clsFileName = virtualFile == null ? containingFile.getName() : virtualFile.getPath()[ FD ]
Line_6 $$ final List<Location> locations = new ArrayList<Location>()-->Line_13 $$ locations.add(new PsiLocation<PsiFile>(project, psiFile))[ FD ]
Line_8 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(fileName)-->Line_41 $$ final String clsFileName = virtualFile == null ? containingFile.getName() : virtualFile.getPath()[ FD ]
Line_6 $$ final List<Location> locations = new ArrayList<Location>()-->Line_9 $$ if (virtualFile == null)[ FD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_8 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(fileName)[ FD ]
Line_38 $$ if (function.getContainingClass() == null) -->Line_46 $$ locations.add(new PsiLocation<PyFunction>(project, function))[ CD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_3 $$ if (fileName.contains("%")) [ FD ]
Line_38 $$ if (function.getContainingClass() == null) -->Line_39 $$ final PsiFile containingFile = function.getContainingFile()[ CD ]
Line_16 $$ for (PyClass cls : PyClassNameIndex.find(className, project, false)) -->Line_28 $$ final PyFunction method = cls.findMethodByName(methodName, true, null)[ FD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_7 $$ if (methodName == null && className == null) [ CD ]
Line_7 $$ if (methodName == null && className == null) -->Line_8 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(fileName)[ CD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_43 $$ if (!clsFileNameWithoutExt.endsWith(fileName)) [ FD ]
Line_3 $$ if (fileName.contains("%")) -->Line_4 $$ fileName = fileName.substring(0, fileName.lastIndexOf("%"))[ CD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_22 $$ if (!clsFileNameWithoutExt.endsWith(fileName) && !fileName.equals(clsFileName)) [ FD ]
Line_38 $$ if (function.getContainingClass() == null) -->Line_40 $$ final VirtualFile virtualFile = containingFile.getVirtualFile()[ CD ]
Line_38 $$ if (function.getContainingClass() == null) -->Line_43 $$ if (!clsFileNameWithoutExt.endsWith(fileName)) [ CD ]
Line_21 $$ final String clsFileNameWithoutExt = FileUtil.getNameWithoutExtension(clsFileName)-->Line_43 $$ if (!clsFileNameWithoutExt.endsWith(fileName)) [ FD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_16 $$ for (PyClass cls : PyClassNameIndex.find(className, project, false)) [ FD ]
Line_7 $$ if (methodName == null && className == null) -->Line_11 $$ final PsiFile psiFile = PsiManager.getInstance(project).findFile(virtualFile)[ CD ]
Line_6 $$ final List<Location> locations = new ArrayList<Location>()-->Line_26 $$ locations.add(new PsiLocation<PyClass>(project, cls))[ FD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_3 $$ if (fileName.contains("%")) [ CD ]
Line_18 $$ final PsiFile containingFile = cls.getContainingFile()-->Line_41 $$ final String clsFileName = virtualFile == null ? containingFile.getName() : virtualFile.getPath()[ FD ]
Line_20 $$ final String clsFileName = virtualFile == null ? containingFile.getName() : virtualFile.getPath()-->Line_22 $$ if (!clsFileNameWithoutExt.endsWith(fileName) && !fileName.equals(clsFileName)) [ FD ]
Line_25 $$ if (methodName == null) -->Line_26 $$ locations.add(new PsiLocation<PyClass>(project, cls))[ CD ]
Line_15 $$ if (className != null) -->Line_35 $$ if (methodName != null) [ CD ]
Line_36 $$ for (PyFunction function : PyFunctionNameIndex.find(methodName, project)) -->Line_38 $$ if (function.getContainingClass() == null) [ FD ]
Line_21 $$ final String clsFileNameWithoutExt = FileUtil.getNameWithoutExtension(clsFileName)-->Line_22 $$ if (!clsFileNameWithoutExt.endsWith(fileName) && !fileName.equals(clsFileName)) [ FD ]
Line_20 $$ final String clsFileName = virtualFile == null ? containingFile.getName() : virtualFile.getPath()-->Line_21 $$ final String clsFileNameWithoutExt = FileUtil.getNameWithoutExtension(clsFileName)[ FD ]
Line_18 $$ final PsiFile containingFile = cls.getContainingFile()-->Line_40 $$ final VirtualFile virtualFile = containingFile.getVirtualFile()[ FD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_25 $$ if (methodName == null) [ FD ]
Line_7 $$ if (methodName == null && className == null) -->Line_9 $$ if (virtualFile == null)[ CD ]
Line_25 $$ if (methodName == null) -->Line_32 $$ locations.add(new PsiLocation<PyFunction>(project, method))[ CD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_28 $$ final PyFunction method = cls.findMethodByName(methodName, true, null)[ FD ]
Line_8 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(fileName)-->Line_9 $$ if (virtualFile == null)[ FD ]
Line_20 $$ final String clsFileName = virtualFile == null ? containingFile.getName() : virtualFile.getPath()-->Line_42 $$ final String clsFileNameWithoutExt = FileUtil.getNameWithoutExtension(clsFileName)[ FD ]
Line_6 $$ final List<Location> locations = new ArrayList<Location>()-->Line_46 $$ locations.add(new PsiLocation<PyFunction>(project, function))[ FD ]
Line_8 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(fileName)-->Line_11 $$ final PsiFile psiFile = PsiManager.getInstance(project).findFile(virtualFile)[ FD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_15 $$ if (className != null) [ CD ]
Line_36 $$ for (PyFunction function : PyFunctionNameIndex.find(methodName, project)) -->Line_39 $$ final PsiFile containingFile = function.getContainingFile()[ FD ]
Line_16 $$ for (PyClass cls : PyClassNameIndex.find(className, project, false)) -->Line_18 $$ final PsiFile containingFile = cls.getContainingFile()[ FD ]
Line_7 $$ if (methodName == null && className == null) -->Line_12 $$ if (psiFile != null)[ CD ]
Line_18 $$ final PsiFile containingFile = cls.getContainingFile()-->Line_20 $$ final String clsFileName = virtualFile == null ? containingFile.getName() : virtualFile.getPath()[ FD ]
Line_25 $$ if (methodName == null) -->Line_29 $$ if (method == null) [ CD ]
Line_38 $$ if (function.getContainingClass() == null) -->Line_42 $$ final String clsFileNameWithoutExt = FileUtil.getNameWithoutExtension(clsFileName)[ CD ]
Line_11 $$ final PsiFile psiFile = PsiManager.getInstance(project).findFile(virtualFile)-->Line_12 $$ if (psiFile != null)[ FD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_6 $$ final List<Location> locations = new ArrayList<Location>()[ CD ]
Line_25 $$ if (methodName == null) -->Line_28 $$ final PyFunction method = cls.findMethodByName(methodName, true, null)[ CD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_4 $$ fileName = fileName.substring(0, fileName.lastIndexOf("%"))[ FD ]
Line_12 $$ if (psiFile != null)-->Line_13 $$ locations.add(new PsiLocation<PsiFile>(project, psiFile))[ CD ]
Line_2 $$ public static List<Location> findLocations(@NotNull final Project project, @NotNull String fileName, @Nullable String className, @Nullable String methodName) -->Line_15 $$ if (className != null) [ FD ]
Line_9 $$ if (virtualFile == null)-->Line_10 $$ return locations[ CD ]
