Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_10 $$ final PsiExpression[] args = argumentList.getExpressions()[ CD ]
Line_6 $$ if (!"isAnnotationPresent".equals(methodName) && !"getAnnotation".equals(methodName)) -->Line_7 $$ return[ CD ]
Line_4 $$ final PsiReferenceExpression methodExpression = expression.getMethodExpression()-->Line_5 $$ final String methodName = methodExpression.getReferenceName()[ FD ]
Line_32 $$ final PsiModifierList modifierList = annotationClass.getModifierList()-->Line_36 $$ final PsiAnnotation retentionAnnotation = modifierList.findAnnotation("java.lang.annotation.Retention")[ FD ]
Line_4 $$ final PsiReferenceExpression methodExpression = expression.getMethodExpression()-->Line_21 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()[ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_26 $$ final PsiTypeElement operand = classObjectAccessExpression.getOperand()[ CD ]
Line_28 $$ final PsiClass annotationClass = annotationClassType.resolve()-->Line_29 $$ if (annotationClass == null) [ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_41 $$ final PsiAnnotationParameterList parameters = retentionAnnotation.getParameterList()[ CD ]
Line_14 $$ final PsiExpression arg = args[0]-->Line_54 $$ registerError(arg)[ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_3 $$ super.visitMethodCallExpression(expression)[ CD ]
Line_33 $$ if (modifierList == null) -->Line_34 $$ return[ CD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_27 $$ final PsiClassType annotationClassType = (PsiClassType) operand.getType()[ CD ]
Line_18 $$ if (!(arg instanceof PsiClassObjectAccessExpression)) -->Line_19 $$ return[ CD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_9 $$ final PsiExpressionList argumentList = expression.getArgumentList()[ FD ]
Line_36 $$ final PsiAnnotation retentionAnnotation = modifierList.findAnnotation("java.lang.annotation.Retention")-->Line_37 $$ if (retentionAnnotation == null) [ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_4 $$ final PsiReferenceExpression methodExpression = expression.getMethodExpression()[ CD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_37 $$ if (retentionAnnotation == null) [ CD ]
Line_21 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()-->Line_22 $$ if (!TypeUtils.expressionHasTypeOrSubtype(qualifier, "java.lang.reflect.AnnotatedElement")) [ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_4 $$ final PsiReferenceExpression methodExpression = expression.getMethodExpression()[ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_3 $$ super.visitMethodCallExpression(expression)[ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_25 $$ final PsiClassObjectAccessExpression classObjectAccessExpression = (PsiClassObjectAccessExpression) arg[ CD ]
Line_37 $$ if (retentionAnnotation == null) -->Line_38 $$ registerError(arg)[ CD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_42 $$ final PsiNameValuePair[] attributes = parameters.getAttributes()[ CD ]
Line_27 $$ final PsiClassType annotationClassType = (PsiClassType) operand.getType()-->Line_28 $$ final PsiClass annotationClass = annotationClassType.resolve()[ FD ]
Line_29 $$ if (annotationClass == null) -->Line_30 $$ return[ CD ]
Line_41 $$ final PsiAnnotationParameterList parameters = retentionAnnotation.getParameterList()-->Line_42 $$ final PsiNameValuePair[] attributes = parameters.getAttributes()[ FD ]
Line_53 $$ if (!text.contains("RUNTIME")) -->Line_55 $$ return[ CD ]
Line_32 $$ final PsiModifierList modifierList = annotationClass.getModifierList()-->Line_33 $$ if (modifierList == null) [ FD ]
Line_48 $$ final PsiAnnotationMemberValue value = attribute.getValue()-->Line_52 $$ final String text = value.getText()[ FD ]
Line_53 $$ if (!text.contains("RUNTIME")) -->Line_54 $$ registerError(arg)[ CD ]
Line_44 $$ final String name = attribute.getName()-->Line_45 $$ if (name != null && !"value".equals(name)) [ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_5 $$ final String methodName = methodExpression.getReferenceName()[ CD ]
Line_14 $$ final PsiExpression arg = args[0]-->Line_38 $$ registerError(arg)[ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_22 $$ if (!TypeUtils.expressionHasTypeOrSubtype(qualifier, "java.lang.reflect.AnnotatedElement")) [ CD ]
Line_43 $$ for (PsiNameValuePair attribute : attributes) -->Line_44 $$ final String name = attribute.getName()[ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_18 $$ if (!(arg instanceof PsiClassObjectAccessExpression)) [ CD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_28 $$ final PsiClass annotationClass = annotationClassType.resolve()[ CD ]
Line_36 $$ final PsiAnnotation retentionAnnotation = modifierList.findAnnotation("java.lang.annotation.Retention")-->Line_41 $$ final PsiAnnotationParameterList parameters = retentionAnnotation.getParameterList()[ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_21 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()[ CD ]
Line_11 $$ if (args.length != 1) -->Line_12 $$ return[ CD ]
Line_15 $$ if (arg == null) -->Line_16 $$ return[ CD ]
Line_25 $$ final PsiClassObjectAccessExpression classObjectAccessExpression = (PsiClassObjectAccessExpression) arg-->Line_26 $$ final PsiTypeElement operand = classObjectAccessExpression.getOperand()[ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_32 $$ final PsiModifierList modifierList = annotationClass.getModifierList()[ CD ]
Line_22 $$ if (!TypeUtils.expressionHasTypeOrSubtype(qualifier, "java.lang.reflect.AnnotatedElement")) -->Line_23 $$ return[ CD ]
Line_48 $$ final PsiAnnotationMemberValue value = attribute.getValue()-->Line_49 $$ if (value == null) [ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_9 $$ final PsiExpressionList argumentList = expression.getArgumentList()[ CD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_6 $$ if (!"isAnnotationPresent".equals(methodName) && !"getAnnotation".equals(methodName)) [ CD ]
Line_9 $$ final PsiExpressionList argumentList = expression.getArgumentList()-->Line_10 $$ final PsiExpression[] args = argumentList.getExpressions()[ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_36 $$ final PsiAnnotation retentionAnnotation = modifierList.findAnnotation("java.lang.annotation.Retention")[ CD ]
Line_26 $$ final PsiTypeElement operand = classObjectAccessExpression.getOperand()-->Line_27 $$ final PsiClassType annotationClassType = (PsiClassType) operand.getType()[ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_11 $$ if (args.length != 1) [ CD ]
Line_43 $$ for (PsiNameValuePair attribute : attributes) -->Line_48 $$ final PsiAnnotationMemberValue value = attribute.getValue()[ FD ]
Line_52 $$ final String text = value.getText()-->Line_53 $$ if (!text.contains("RUNTIME")) [ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_33 $$ if (modifierList == null) [ CD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_29 $$ if (annotationClass == null) [ CD ]
Line_28 $$ final PsiClass annotationClass = annotationClassType.resolve()-->Line_32 $$ final PsiModifierList modifierList = annotationClass.getModifierList()[ FD ]
Line_37 $$ if (retentionAnnotation == null) -->Line_39 $$ return[ CD ]
Line_5 $$ final String methodName = methodExpression.getReferenceName()-->Line_6 $$ if (!"isAnnotationPresent".equals(methodName) && !"getAnnotation".equals(methodName)) [ FD ]
Line_14 $$ final PsiExpression arg = args[0]-->Line_15 $$ if (arg == null) [ FD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_15 $$ if (arg == null) [ CD ]
Line_2 $$ public void visitMethodCallExpression(@NotNull PsiMethodCallExpression expression) -->Line_14 $$ final PsiExpression arg = args[0][ CD ]
