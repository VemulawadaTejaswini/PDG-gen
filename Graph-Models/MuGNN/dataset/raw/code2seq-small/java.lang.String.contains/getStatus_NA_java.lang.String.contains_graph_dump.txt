Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_15 $$ String res = reader.readLine()[ CD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_5 $$ filename = filename.substring(1)[ FD ]
Line_9 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_11 $$ int resp = conn.getResponseCode()[ FD ]
Line_9 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_14 $$ reader = new BufferedReader(new InputStreamReader(conn.getErrorStream()))[ FD ]
Line_8 $$ URL url = new URL(TestJettyHelper.getJettyURL(), pathOps)-->Line_9 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_17 $$ Assert.assertTrue(res.contains("XAttr"))[ CD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_10 $$ conn.connect()[ CD ]
Line_15 $$ String res = reader.readLine()-->Line_18 $$ Assert.assertTrue(res.contains("rejected"))[ FD ]
Line_12 $$ BufferedReader reader-->Line_14 $$ reader = new BufferedReader(new InputStreamReader(conn.getErrorStream()))[ FD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_12 $$ BufferedReader reader[ CD ]
Line_15 $$ String res = reader.readLine()-->Line_17 $$ Assert.assertTrue(res.contains("XAttr"))[ FD ]
Line_11 $$ int resp = conn.getResponseCode()-->Line_13 $$ Assert.assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR, resp)[ FD ]
Line_4 $$ if (filename.charAt(0) == '/') -->Line_5 $$ filename = filename.substring(1)[ CD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_13 $$ Assert.assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR, resp)[ CD ]
Line_14 $$ reader = new BufferedReader(new InputStreamReader(conn.getErrorStream()))-->Line_15 $$ String res = reader.readLine()[ FD ]
Line_9 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_10 $$ conn.connect()[ FD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_14 $$ reader = new BufferedReader(new InputStreamReader(conn.getErrorStream()))[ CD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_16 $$ Assert.assertTrue(res.contains("RemoteException"))[ CD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_7 $$ String pathOps = MessageFormat.format("/webhdfs/v1/[ CD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_4 $$ if (filename.charAt(0) == '/') [ FD ]
Line_5 $$ filename = filename.substring(1)-->Line_7 $$ String pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_3 $$ String user = HadoopUsersConfTestHelper.getHadoopUsers()[0][ CD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_11 $$ int resp = conn.getResponseCode()[ CD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_9 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_18 $$ Assert.assertTrue(res.contains("rejected"))[ CD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_7 $$ String pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_12 $$ BufferedReader reader-->Line_15 $$ String res = reader.readLine()[ FD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_4 $$ if (filename.charAt(0) == '/') [ CD ]
Line_15 $$ String res = reader.readLine()-->Line_16 $$ Assert.assertTrue(res.contains("RemoteException"))[ FD ]
Line_2 $$ private void getStatus(String filename, String command) throws Exception -->Line_8 $$ URL url = new URL(TestJettyHelper.getJettyURL(), pathOps)[ CD ]
Line_3 $$ String user = HadoopUsersConfTestHelper.getHadoopUsers()[0]-->Line_7 $$ String pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
