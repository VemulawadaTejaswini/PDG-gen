Line_2 $$ public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception -->Line_14 $$ assertFalse(content.contains("<withoutView>without</withoutView>"))[ CD ]
Line_9 $$ Object returnValue = new JacksonController().handleResponseBody()-->Line_10 $$ processor.handleReturnValue(returnValue, methodReturnType, this.mavContainer, this.webRequest)[ FD ]
Line_2 $$ public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception -->Line_4 $$ HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method)[ CD ]
Line_2 $$ public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception -->Line_13 $$ assertTrue(content.contains("<withView2>with</withView2>"))[ CD ]
Line_2 $$ public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception -->Line_5 $$ MethodParameter methodReturnType = handlerMethod.getReturnType()[ CD ]
Line_2 $$ public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception -->Line_10 $$ processor.handleReturnValue(returnValue, methodReturnType, this.mavContainer, this.webRequest)[ CD ]
Line_5 $$ MethodParameter methodReturnType = handlerMethod.getReturnType()-->Line_10 $$ processor.handleReturnValue(returnValue, methodReturnType, this.mavContainer, this.webRequest)[ FD ]
Line_8 $$ RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice()))-->Line_10 $$ processor.handleReturnValue(returnValue, methodReturnType, this.mavContainer, this.webRequest)[ FD ]
Line_2 $$ public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception -->Line_11 $$ String content = this.servletResponse.getContentAsString()[ CD ]
Line_4 $$ HandlerMethod handlerMethod = new HandlerMethod(new JacksonController(), method)-->Line_5 $$ MethodParameter methodReturnType = handlerMethod.getReturnType()[ FD ]
Line_11 $$ String content = this.servletResponse.getContentAsString()-->Line_14 $$ assertFalse(content.contains("<withoutView>without</withoutView>"))[ FD ]
Line_2 $$ public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception -->Line_3 $$ Method method = JacksonController.class.getMethod("handleResponseBody")[ CD ]
Line_2 $$ public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception -->Line_6 $$ List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>()[ CD ]
Line_6 $$ List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>()-->Line_7 $$ converters.add(new MappingJackson2XmlHttpMessageConverter())[ FD ]
Line_11 $$ String content = this.servletResponse.getContentAsString()-->Line_12 $$ assertFalse(content.contains("<withView1>with</withView1>"))[ FD ]
Line_2 $$ public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception -->Line_7 $$ converters.add(new MappingJackson2XmlHttpMessageConverter())[ CD ]
Line_2 $$ public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception -->Line_8 $$ RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters, null, Collections.singletonList(new JsonViewResponseBodyAdvice()))[ CD ]
Line_2 $$ public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception -->Line_12 $$ assertFalse(content.contains("<withView1>with</withView1>"))[ CD ]
Line_2 $$ public void jacksonJsonViewWithResponseBodyAndXmlMessageConverter() throws Exception -->Line_9 $$ Object returnValue = new JacksonController().handleResponseBody()[ CD ]
Line_11 $$ String content = this.servletResponse.getContentAsString()-->Line_13 $$ assertTrue(content.contains("<withView2>with</withView2>"))[ FD ]
