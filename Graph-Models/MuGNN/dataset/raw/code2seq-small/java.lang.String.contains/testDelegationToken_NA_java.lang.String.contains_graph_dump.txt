Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_82 $$ clientRMWithDT = null[ FD ]
Line_67 $$ token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())-->Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_94 $$ if (clientRMWithDT != null) -->Line_95 $$ RPC.stopProxy(clientRMWithDT)[ CD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_87 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_11 $$ RMDelegationTokenSecretManager rmDtSecretManager = createRMDelegationTokenSecretManager(initialInterval, maxLifetime, renewInterval)-->Line_93 $$ rmDtSecretManager.stopThreads()[ FD ]
Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)-->Line_84 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_26 $$ GetNewApplicationRequest request = Records.newRecord(GetNewApplicationRequest.class)-->Line_71 $$ request = Records.newRecord(GetNewApplicationRequest.class)[ FD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_15 $$ clientRMService.init(conf)[ CD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_9 $$ long maxLifetime = 20000l[ CD ]
Line_14 $$ final ClientRMService clientRMService = new ClientRMServiceForTest(conf, scheduler, rmDtSecretManager)-->Line_84 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_84 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)-->Line_94 $$ if (clientRMWithDT != null) [ FD ]
Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)-->Line_80 $$ if (clientRMWithDT != null) [ FD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_11 $$ RMDelegationTokenSecretManager rmDtSecretManager = createRMDelegationTokenSecretManager(initialInterval, maxLifetime, renewInterval)[ CD ]
Line_26 $$ GetNewApplicationRequest request = Records.newRecord(GetNewApplicationRequest.class)-->Line_57 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_64 $$ RPC.stopProxy(clientRMWithDT)[ FD ]
Line_82 $$ clientRMWithDT = null-->Line_94 $$ if (clientRMWithDT != null) [ FD ]
Line_51 $$ while (System.currentTimeMillis() < renewalTime + renewInterval) -->Line_52 $$ Thread.sleep(500l)[ CD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_87 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_13 $$ LOG.info("Creating DelegationTokenSecretManager with initialInterval: " + initialInterval + ", maxLifetime: " + maxLifetime + ", renewInterval: " + renewInterval)[ CD ]
Line_67 $$ token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())-->Line_79 $$ cancelDelegationToken(loggedInUser, clientRMService, token)[ FD ]
Line_3 $$ final YarnConfiguration conf = new YarnConfiguration()-->Line_5 $$ conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")[ FD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_64 $$ RPC.stopProxy(clientRMWithDT)[ FD ]
Line_26 $$ GetNewApplicationRequest request = Records.newRecord(GetNewApplicationRequest.class)-->Line_73 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_65 $$ clientRMWithDT = null-->Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_45 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)-->Line_94 $$ if (clientRMWithDT != null) [ FD ]
Line_8 $$ long initialInterval = 10000l-->Line_11 $$ RMDelegationTokenSecretManager rmDtSecretManager = createRMDelegationTokenSecretManager(initialInterval, maxLifetime, renewInterval)[ FD ]
Line_14 $$ final ClientRMService clientRMService = new ClientRMServiceForTest(conf, scheduler, rmDtSecretManager)-->Line_37 $$ long nextExpTime = renewDelegationToken(loggedInUser, clientRMService, token)[ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_57 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)-->Line_73 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_14 $$ final ClientRMService clientRMService = new ClientRMServiceForTest(conf, scheduler, rmDtSecretManager)-->Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_84 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)-->Line_95 $$ RPC.stopProxy(clientRMWithDT)[ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_94 $$ if (clientRMWithDT != null) [ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_63 $$ if (clientRMWithDT != null) [ FD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_65 $$ clientRMWithDT = null[ FD ]
Line_82 $$ clientRMWithDT = null-->Line_84 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_94 $$ if (clientRMWithDT != null) [ FD ]
Line_65 $$ clientRMWithDT = null-->Line_73 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_65 $$ clientRMWithDT = null-->Line_84 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_63 $$ if (clientRMWithDT != null) -->Line_65 $$ clientRMWithDT = null[ CD ]
Line_65 $$ clientRMWithDT = null-->Line_82 $$ clientRMWithDT = null[ FD ]
Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)-->Line_87 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_14 $$ final ClientRMService clientRMService = new ClientRMServiceForTest(conf, scheduler, rmDtSecretManager)-->Line_22 $$ org.apache.hadoop.yarn.api.records.Token token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())[ FD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_4 $$ conf.set(YarnConfiguration.RM_PRINCIPAL, "testuser/localhost@apache.org")[ CD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_84 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_22 $$ org.apache.hadoop.yarn.api.records.Token token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())-->Line_79 $$ cancelDelegationToken(loggedInUser, clientRMService, token)[ FD ]
Line_65 $$ clientRMWithDT = null-->Line_95 $$ RPC.stopProxy(clientRMWithDT)[ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_28 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_22 $$ org.apache.hadoop.yarn.api.records.Token token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())-->Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_65 $$ clientRMWithDT = null-->Line_87 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_26 $$ GetNewApplicationRequest request = Records.newRecord(GetNewApplicationRequest.class)-->Line_45 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_81 $$ RPC.stopProxy(clientRMWithDT)[ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_73 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)-->Line_95 $$ RPC.stopProxy(clientRMWithDT)[ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_81 $$ RPC.stopProxy(clientRMWithDT)[ FD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_80 $$ if (clientRMWithDT != null) [ FD ]
Line_65 $$ clientRMWithDT = null-->Line_81 $$ RPC.stopProxy(clientRMWithDT)[ FD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_7 $$ ResourceScheduler scheduler = createMockScheduler(conf)[ CD ]
Line_82 $$ clientRMWithDT = null-->Line_87 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_14 $$ final ClientRMService clientRMService = new ClientRMServiceForTest(conf, scheduler, rmDtSecretManager)-->Line_15 $$ clientRMService.init(conf)[ FD ]
Line_71 $$ request = Records.newRecord(GetNewApplicationRequest.class)-->Line_87 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_95 $$ RPC.stopProxy(clientRMWithDT)[ FD ]
Line_3 $$ final YarnConfiguration conf = new YarnConfiguration()-->Line_7 $$ ResourceScheduler scheduler = createMockScheduler(conf)[ FD ]
Line_34 $$ while (System.currentTimeMillis() < tokenFetchTime + initialInterval / 2) -->Line_35 $$ Thread.sleep(500l)[ CD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_63 $$ if (clientRMWithDT != null) [ FD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)[ FD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_57 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_14 $$ final ClientRMService clientRMService = new ClientRMServiceForTest(conf, scheduler, rmDtSecretManager)-->Line_79 $$ cancelDelegationToken(loggedInUser, clientRMService, token)[ FD ]
Line_19 $$ UserGroupInformation loggedInUser = UserGroupInformation.createRemoteUser("testrenewer@APACHE.ORG")-->Line_67 $$ token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())[ FD ]
Line_14 $$ final ClientRMService clientRMService = new ClientRMServiceForTest(conf, scheduler, rmDtSecretManager)-->Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)[ FD ]
Line_26 $$ GetNewApplicationRequest request = Records.newRecord(GetNewApplicationRequest.class)-->Line_87 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_5 $$ conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")[ CD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_8 $$ long initialInterval = 10000l[ CD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_45 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_80 $$ if (clientRMWithDT != null) -->Line_82 $$ clientRMWithDT = null[ CD ]
Line_10 $$ long renewInterval = 10000l-->Line_11 $$ RMDelegationTokenSecretManager rmDtSecretManager = createRMDelegationTokenSecretManager(initialInterval, maxLifetime, renewInterval)[ FD ]
Line_19 $$ UserGroupInformation loggedInUser = UserGroupInformation.createRemoteUser("testrenewer@APACHE.ORG")-->Line_20 $$ Assert.assertEquals("testrenewer", loggedInUser.getShortUserName())[ FD ]
Line_3 $$ final YarnConfiguration conf = new YarnConfiguration()-->Line_4 $$ conf.set(YarnConfiguration.RM_PRINCIPAL, "testuser/localhost@apache.org")[ FD ]
Line_23 $$ long tokenFetchTime = System.currentTimeMillis()-->Line_68 $$ tokenFetchTime = System.currentTimeMillis()[ FD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_6 $$ UserGroupInformation.setConfiguration(conf)[ CD ]
Line_3 $$ final YarnConfiguration conf = new YarnConfiguration()-->Line_6 $$ UserGroupInformation.setConfiguration(conf)[ FD ]
Line_22 $$ org.apache.hadoop.yarn.api.records.Token token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())-->Line_67 $$ token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())[ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_95 $$ RPC.stopProxy(clientRMWithDT)[ FD ]
Line_22 $$ org.apache.hadoop.yarn.api.records.Token token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())-->Line_37 $$ long nextExpTime = renewDelegationToken(loggedInUser, clientRMService, token)[ FD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_12 $$ rmDtSecretManager.startThreads()[ CD ]
Line_71 $$ request = Records.newRecord(GetNewApplicationRequest.class)-->Line_73 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_3 $$ final YarnConfiguration conf = new YarnConfiguration()-->Line_84 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_22 $$ org.apache.hadoop.yarn.api.records.Token token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())-->Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)[ FD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_17 $$ ApplicationClientProtocol clientRMWithDT = null[ CD ]
Line_63 $$ if (clientRMWithDT != null) -->Line_64 $$ RPC.stopProxy(clientRMWithDT)[ CD ]
Line_67 $$ token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())-->Line_84 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_28 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_11 $$ RMDelegationTokenSecretManager rmDtSecretManager = createRMDelegationTokenSecretManager(initialInterval, maxLifetime, renewInterval)-->Line_12 $$ rmDtSecretManager.startThreads()[ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_84 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_40 $$ while (System.currentTimeMillis() > tokenFetchTime + initialInterval && System.currentTimeMillis() < nextExpTime) -->Line_41 $$ Thread.sleep(500l)[ CD ]
Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)-->Line_81 $$ RPC.stopProxy(clientRMWithDT)[ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)-->Line_82 $$ clientRMWithDT = null[ FD ]
Line_9 $$ long maxLifetime = 20000l-->Line_11 $$ RMDelegationTokenSecretManager rmDtSecretManager = createRMDelegationTokenSecretManager(initialInterval, maxLifetime, renewInterval)[ FD ]
Line_65 $$ clientRMWithDT = null-->Line_94 $$ if (clientRMWithDT != null) [ FD ]
Line_26 $$ GetNewApplicationRequest request = Records.newRecord(GetNewApplicationRequest.class)-->Line_28 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_80 $$ if (clientRMWithDT != null) [ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_65 $$ clientRMWithDT = null[ FD ]
Line_3 $$ final YarnConfiguration conf = new YarnConfiguration()-->Line_15 $$ clientRMService.init(conf)[ FD ]
Line_65 $$ clientRMWithDT = null-->Line_80 $$ if (clientRMWithDT != null) [ FD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_14 $$ final ClientRMService clientRMService = new ClientRMServiceForTest(conf, scheduler, rmDtSecretManager)[ CD ]
Line_14 $$ final ClientRMService clientRMService = new ClientRMServiceForTest(conf, scheduler, rmDtSecretManager)-->Line_16 $$ clientRMService.start()[ FD ]
Line_84 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)-->Line_87 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_10 $$ long renewInterval = 10000l[ CD ]
Line_82 $$ clientRMWithDT = null-->Line_95 $$ RPC.stopProxy(clientRMWithDT)[ FD ]
Line_17 $$ ApplicationClientProtocol clientRMWithDT = null-->Line_73 $$ clientRMWithDT.getNewApplication(request)[ FD ]
Line_14 $$ final ClientRMService clientRMService = new ClientRMServiceForTest(conf, scheduler, rmDtSecretManager)-->Line_67 $$ token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())[ FD ]
Line_22 $$ org.apache.hadoop.yarn.api.records.Token token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())-->Line_84 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_19 $$ UserGroupInformation loggedInUser = UserGroupInformation.createRemoteUser("testrenewer@APACHE.ORG")-->Line_22 $$ org.apache.hadoop.yarn.api.records.Token token = getDelegationToken(loggedInUser, clientRMService, loggedInUser.getShortUserName())[ FD ]
Line_80 $$ if (clientRMWithDT != null) -->Line_81 $$ RPC.stopProxy(clientRMWithDT)[ CD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_3 $$ final YarnConfiguration conf = new YarnConfiguration()[ CD ]
Line_3 $$ final YarnConfiguration conf = new YarnConfiguration()-->Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)[ FD ]
Line_3 $$ final YarnConfiguration conf = new YarnConfiguration()-->Line_70 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser2", conf)[ FD ]
Line_19 $$ UserGroupInformation loggedInUser = UserGroupInformation.createRemoteUser("testrenewer@APACHE.ORG")-->Line_37 $$ long nextExpTime = renewDelegationToken(loggedInUser, clientRMService, token)[ FD ]
Line_25 $$ clientRMWithDT = getClientRMProtocolWithDT(token, clientRMService.getBindAddress(), "loginuser1", conf)-->Line_82 $$ clientRMWithDT = null[ FD ]
Line_2 $$ public void testDelegationToken() throws IOException, InterruptedException -->Line_16 $$ clientRMService.start()[ CD ]
Line_19 $$ UserGroupInformation loggedInUser = UserGroupInformation.createRemoteUser("testrenewer@APACHE.ORG")-->Line_21 $$ loggedInUser.setAuthenticationMethod(AuthenticationMethod.KERBEROS)[ FD ]
Line_19 $$ UserGroupInformation loggedInUser = UserGroupInformation.createRemoteUser("testrenewer@APACHE.ORG")-->Line_79 $$ cancelDelegationToken(loggedInUser, clientRMService, token)[ FD ]
