Line_2 $$ private File getTargetFile(File sourceFile, final String suffix) -->Line_4 $$ assertNotNull(path)[ CD ]
Line_2 $$ private File getTargetFile(File sourceFile, final String suffix) -->Line_8 $$ return new File(workDir, StringUtil.trimEnd(path, suffix))[ CD ]
Line_2 $$ private File getTargetFile(File sourceFile, final String suffix) -->Line_3 $$ String path = FileUtil.getRelativePath(baseDir, sourceFile)[ FD ]
Line_2 $$ private File getTargetFile(File sourceFile, final String suffix) -->Line_3 $$ String path = FileUtil.getRelativePath(baseDir, sourceFile)[ CD ]
Line_2 $$ private File getTargetFile(File sourceFile, final String suffix) -->Line_5 $$ if (!path.contains(File.separator)) [ CD ]
Line_3 $$ String path = FileUtil.getRelativePath(baseDir, sourceFile)-->Line_5 $$ if (!path.contains(File.separator)) [ FD ]
Line_3 $$ String path = FileUtil.getRelativePath(baseDir, sourceFile)-->Line_8 $$ return new File(workDir, StringUtil.trimEnd(path, suffix))[ FD ]
Line_6 $$ path = "src" + File.separator + path-->Line_8 $$ return new File(workDir, StringUtil.trimEnd(path, suffix))[ FD ]
Line_2 $$ private File getTargetFile(File sourceFile, final String suffix) -->Line_8 $$ return new File(workDir, StringUtil.trimEnd(path, suffix))[ FD ]
Line_3 $$ String path = FileUtil.getRelativePath(baseDir, sourceFile)-->Line_4 $$ assertNotNull(path)[ FD ]
Line_3 $$ String path = FileUtil.getRelativePath(baseDir, sourceFile)-->Line_6 $$ path = "src" + File.separator + path[ FD ]
Line_5 $$ if (!path.contains(File.separator)) -->Line_6 $$ path = "src" + File.separator + path[ CD ]
