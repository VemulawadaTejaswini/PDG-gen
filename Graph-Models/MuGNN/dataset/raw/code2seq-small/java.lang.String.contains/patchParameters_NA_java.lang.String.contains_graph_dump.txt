Line_63 $$ final String type = parameters.getVMParametersList().getPropertyValue("xslt.transformer.type")-->Line_75 $$ if (type != null) [ FD ]
Line_30 $$ pluginPath = new File(System.getProperty("xslt-debugger.plugin.path"))-->Line_67 $$ addSaxon(parameters, pluginPath, SAXON_9_JAR)[ FD ]
Line_14 $$ final int port = NetUtils.findAvailableSocketPort()-->Line_15 $$ parameters.getVMParametersList().defineProperty("xslt.debugger.port", String.valueOf(port))[ FD ]
Line_42 $$ if (!(rtClasspath = new File(pluginPath, "classes")).exists()) -->Line_43 $$ if (ApplicationManagerEx.getApplicationEx().isInternal() && new File(pluginPath, "org").exists()) [ CD ]
Line_32 $$ File rtClasspath = new File(pluginPath, "lib" + c + "xslt-debugger-engine.jar")-->Line_33 $$ if (rtClasspath.exists()) [ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_78 $$ if (isValidXalanPresent(parameters) == Boolean.TRUE) [ FD ]
Line_64 $$ if ("saxon".equalsIgnoreCase(type)) -->Line_65 $$ addSaxon(parameters, pluginPath, SAXON_6_JAR)[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_24 $$ final File pluginPath[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_32 $$ File rtClasspath = new File(pluginPath, "lib" + c + "xslt-debugger-engine.jar")[ CD ]
Line_32 $$ File rtClasspath = new File(pluginPath, "lib" + c + "xslt-debugger-engine.jar")-->Line_44 $$ rtClasspath = pluginPath[ FD ]
Line_64 $$ if ("saxon".equalsIgnoreCase(type)) -->Line_66 $$ if ("saxon9".equalsIgnoreCase(type)) [ CD ]
Line_88 $$ level = XsltChecker.LanguageLevel.V1-->Line_90 $$ extensionData.putUserData(VERSION, level)[ FD ]
Line_24 $$ final File pluginPath-->Line_67 $$ addSaxon(parameters, pluginPath, SAXON_9_JAR)[ FD ]
Line_63 $$ final String type = parameters.getVMParametersList().getPropertyValue("xslt.transformer.type")-->Line_68 $$ if ("xalan".equalsIgnoreCase(type)) [ FD ]
Line_57 $$ File trove4j = new File(PathManager.getLibPath() + c + "trove4j.jar")-->Line_59 $$ trove4j = new File(PathManager.getHomePath() + c + "community" + c + "lib" + c + "trove4j.jar")[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_16 $$ extensionData.putUserData(PORT, port)[ FD ]
Line_59 $$ trove4j = new File(PathManager.getHomePath() + c + "community" + c + "lib" + c + "trove4j.jar")-->Line_62 $$ parameters.getClassPath().addTail(trove4j.getAbsolutePath())[ FD ]
Line_43 $$ if (ApplicationManagerEx.getApplicationEx().isInternal() && new File(pluginPath, "org").exists()) -->Line_44 $$ rtClasspath = pluginPath[ CD ]
Line_84 $$ final XsltChecker.LanguageLevel level-->Line_90 $$ extensionData.putUserData(VERSION, level)[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_62 $$ parameters.getClassPath().addTail(trove4j.getAbsolutePath())[ CD ]
Line_70 $$ if (xalanPresent == null) -->Line_72 $$ if (!xalanPresent) [ CD ]
Line_86 $$ level = XsltSupport.getXsltLanguageLevel(psiManager.findFile(xsltFile))-->Line_88 $$ level = XsltChecker.LanguageLevel.V1[ FD ]
Line_28 $$ pluginPath = descriptor.getPath()-->Line_71 $$ addXalan(parameters, pluginPath)[ FD ]
Line_33 $$ if (rtClasspath.exists()) -->Line_52 $$ parameters.getClassPath().addTail(rtClasspath.getAbsolutePath())[ CD ]
Line_14 $$ final int port = NetUtils.findAvailableSocketPort()-->Line_16 $$ extensionData.putUserData(PORT, port)[ FD ]
Line_28 $$ pluginPath = descriptor.getPath()-->Line_94 $$ addSaxon(parameters, pluginPath, SAXON_9_JAR)[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_84 $$ final XsltChecker.LanguageLevel level[ CD ]
Line_85 $$ if (xsltFile != null) -->Line_88 $$ level = XsltChecker.LanguageLevel.V1[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_4 $$ final Sdk jdk = configuration.getEffectiveJDK()[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_4 $$ final Sdk jdk = configuration.getEffectiveJDK()[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_67 $$ addSaxon(parameters, pluginPath, SAXON_9_JAR)[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_100 $$ parameters.getVMParametersList().defineProperty("xslt.main", "org.intellij.plugins.xsltDebugger.rt.XSLTDebuggerMain")[ CD ]
Line_30 $$ pluginPath = new File(System.getProperty("xslt-debugger.plugin.path"))-->Line_97 $$ addSaxon(parameters, pluginPath, SAXON_6_JAR)[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_6 $$ final String ver = jdk.getVersionString()[ CD ]
Line_82 $$ final VirtualFile xsltFile = configuration.findXsltFile()-->Line_86 $$ level = XsltSupport.getXsltLanguageLevel(psiManager.findFile(xsltFile))[ FD ]
Line_33 $$ if (rtClasspath.exists()) -->Line_35 $$ final File rmiStubs = new File(pluginPath, "lib" + c + "rmi-stubs.jar")[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_96 $$ parameters.getVMParametersList().defineProperty("xslt.transformer.type", "saxon")[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_52 $$ parameters.getClassPath().addTail(rtClasspath.getAbsolutePath())[ FD ]
Line_38 $$ final File engineImpl = new File(pluginPath, "lib" + c + "rt" + c + "xslt-debugger-engine-impl.jar")-->Line_40 $$ parameters.getClassPath().addTail(engineImpl.getAbsolutePath())[ FD ]
Line_92 $$ if (level == XsltChecker.LanguageLevel.V2) -->Line_96 $$ parameters.getVMParametersList().defineProperty("xslt.transformer.type", "saxon")[ CD ]
Line_44 $$ rtClasspath = pluginPath-->Line_52 $$ parameters.getClassPath().addTail(rtClasspath.getAbsolutePath())[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_63 $$ final String type = parameters.getVMParametersList().getPropertyValue("xslt.transformer.type")[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_33 $$ if (rtClasspath.exists()) [ CD ]
Line_66 $$ if ("saxon9".equalsIgnoreCase(type)) -->Line_67 $$ addSaxon(parameters, pluginPath, SAXON_9_JAR)[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_69 $$ final Boolean xalanPresent = isValidXalanPresent(parameters)[ FD ]
Line_78 $$ if (isValidXalanPresent(parameters) == Boolean.TRUE) -->Line_79 $$ parameters.getVMParametersList().defineProperty("xslt.transformer.type", "xalan")[ CD ]
Line_42 $$ if (!(rtClasspath = new File(pluginPath, "classes")).exists()) -->Line_44 $$ rtClasspath = pluginPath[ FD ]
Line_86 $$ level = XsltSupport.getXsltLanguageLevel(psiManager.findFile(xsltFile))-->Line_92 $$ if (level == XsltChecker.LanguageLevel.V2) [ FD ]
Line_33 $$ if (rtClasspath.exists()) -->Line_38 $$ final File engineImpl = new File(pluginPath, "lib" + c + "rt" + c + "xslt-debugger-engine-impl.jar")[ CD ]
Line_6 $$ final String ver = jdk.getVersionString()-->Line_7 $$ if (ver == null || (ver.contains("1.0") || ver.contains("1.1") || ver.contains("1.2") || ver.contains("1.3") || ver.contains("1.4"))) [ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_82 $$ final VirtualFile xsltFile = configuration.findXsltFile()[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_15 $$ parameters.getVMParametersList().defineProperty("xslt.debugger.port", String.valueOf(port))[ FD ]
Line_22 $$ final PluginId pluginId = PluginManagerCore.getPluginByClassName(getClass().getName())-->Line_26 $$ final IdeaPluginDescriptor descriptor = PluginManager.getPlugin(pluginId)[ FD ]
Line_58 $$ if (!trove4j.exists()) -->Line_59 $$ trove4j = new File(PathManager.getHomePath() + c + "community" + c + "lib" + c + "trove4j.jar")[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_47 $$ parameters.getClassPath().addTail(engineImplInternal.getAbsolutePath())[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_65 $$ addSaxon(parameters, pluginPath, SAXON_6_JAR)[ FD ]
Line_25 $$ if (pluginId != null) -->Line_26 $$ final IdeaPluginDescriptor descriptor = PluginManager.getPlugin(pluginId)[ CD ]
Line_33 $$ if (rtClasspath.exists()) -->Line_34 $$ parameters.getClassPath().addTail(rtClasspath.getAbsolutePath())[ CD ]
Line_22 $$ final PluginId pluginId = PluginManagerCore.getPluginByClassName(getClass().getName())-->Line_25 $$ if (pluginId != null) [ FD ]
Line_45 $$ final File engineImplInternal = new File(pluginPath, ".." + c + "xslt-debugger-engine-impl")-->Line_46 $$ assert engineImplInternal.exists() : engineImplInternal.getAbsolutePath()[ FD ]
Line_33 $$ if (rtClasspath.exists()) -->Line_40 $$ parameters.getClassPath().addTail(engineImpl.getAbsolutePath())[ CD ]
Line_68 $$ if ("xalan".equalsIgnoreCase(type)) -->Line_69 $$ final Boolean xalanPresent = isValidXalanPresent(parameters)[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_100 $$ parameters.getVMParametersList().defineProperty("xslt.main", "org.intellij.plugins.xsltDebugger.rt.XSLTDebuggerMain")[ FD ]
Line_24 $$ final File pluginPath-->Line_30 $$ pluginPath = new File(System.getProperty("xslt-debugger.plugin.path"))[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_90 $$ extensionData.putUserData(VERSION, level)[ CD ]
Line_32 $$ File rtClasspath = new File(pluginPath, "lib" + c + "xslt-debugger-engine.jar")-->Line_34 $$ parameters.getClassPath().addTail(rtClasspath.getAbsolutePath())[ FD ]
Line_33 $$ if (rtClasspath.exists()) -->Line_55 $$ parameters.getClassPath().addTail(rmiStubs.getAbsolutePath())[ CD ]
Line_35 $$ final File rmiStubs = new File(pluginPath, "lib" + c + "rmi-stubs.jar")-->Line_55 $$ parameters.getClassPath().addTail(rmiStubs.getAbsolutePath())[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_62 $$ parameters.getClassPath().addTail(trove4j.getAbsolutePath())[ FD ]
Line_30 $$ pluginPath = new File(System.getProperty("xslt-debugger.plugin.path"))-->Line_44 $$ rtClasspath = pluginPath[ FD ]
Line_28 $$ pluginPath = descriptor.getPath()-->Line_97 $$ addSaxon(parameters, pluginPath, SAXON_6_JAR)[ FD ]
Line_30 $$ pluginPath = new File(System.getProperty("xslt-debugger.plugin.path"))-->Line_71 $$ addXalan(parameters, pluginPath)[ FD ]
Line_92 $$ if (level == XsltChecker.LanguageLevel.V2) -->Line_97 $$ addSaxon(parameters, pluginPath, SAXON_6_JAR)[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_77 $$ if (parameters.getClassPath().getPathsString().toLowerCase().contains("xalan")) [ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_58 $$ if (!trove4j.exists()) [ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_25 $$ if (pluginId != null) [ CD ]
Line_42 $$ if (!(rtClasspath = new File(pluginPath, "classes")).exists()) -->Line_52 $$ parameters.getClassPath().addTail(rtClasspath.getAbsolutePath())[ FD ]
Line_28 $$ pluginPath = descriptor.getPath()-->Line_44 $$ rtClasspath = pluginPath[ FD ]
Line_86 $$ level = XsltSupport.getXsltLanguageLevel(psiManager.findFile(xsltFile))-->Line_90 $$ extensionData.putUserData(VERSION, level)[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_94 $$ addSaxon(parameters, pluginPath, SAXON_9_JAR)[ FD ]
Line_88 $$ level = XsltChecker.LanguageLevel.V1-->Line_92 $$ if (level == XsltChecker.LanguageLevel.V2) [ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_37 $$ parameters.getClassPath().addTail(rmiStubs.getAbsolutePath())[ FD ]
Line_84 $$ final XsltChecker.LanguageLevel level-->Line_88 $$ level = XsltChecker.LanguageLevel.V1[ FD ]
Line_69 $$ final Boolean xalanPresent = isValidXalanPresent(parameters)-->Line_72 $$ if (!xalanPresent) [ FD ]
Line_84 $$ final XsltChecker.LanguageLevel level-->Line_92 $$ if (level == XsltChecker.LanguageLevel.V2) [ FD ]
Line_69 $$ final Boolean xalanPresent = isValidXalanPresent(parameters)-->Line_70 $$ if (xalanPresent == null) [ FD ]
Line_66 $$ if ("saxon9".equalsIgnoreCase(type)) -->Line_68 $$ if ("xalan".equalsIgnoreCase(type)) [ CD ]
Line_43 $$ if (ApplicationManagerEx.getApplicationEx().isInternal() && new File(pluginPath, "org").exists()) -->Line_47 $$ parameters.getClassPath().addTail(engineImplInternal.getAbsolutePath())[ CD ]
Line_84 $$ final XsltChecker.LanguageLevel level-->Line_86 $$ level = XsltSupport.getXsltLanguageLevel(psiManager.findFile(xsltFile))[ FD ]
Line_26 $$ final IdeaPluginDescriptor descriptor = PluginManager.getPlugin(pluginId)-->Line_28 $$ pluginPath = descriptor.getPath()[ FD ]
Line_35 $$ final File rmiStubs = new File(pluginPath, "lib" + c + "rmi-stubs.jar")-->Line_54 $$ assert rmiStubs.exists() : rmiStubs.getAbsolutePath()[ FD ]
Line_63 $$ final String type = parameters.getVMParametersList().getPropertyValue("xslt.transformer.type")-->Line_64 $$ if ("saxon".equalsIgnoreCase(type)) [ FD ]
Line_24 $$ final File pluginPath-->Line_71 $$ addXalan(parameters, pluginPath)[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_22 $$ final PluginId pluginId = PluginManagerCore.getPluginByClassName(getClass().getName())[ CD ]
Line_85 $$ if (xsltFile != null) -->Line_86 $$ level = XsltSupport.getXsltLanguageLevel(psiManager.findFile(xsltFile))[ CD ]
Line_35 $$ final File rmiStubs = new File(pluginPath, "lib" + c + "rmi-stubs.jar")-->Line_36 $$ assert rmiStubs.exists() : rmiStubs.getAbsolutePath()[ FD ]
Line_4 $$ final Sdk jdk = configuration.getEffectiveJDK()-->Line_6 $$ final String ver = jdk.getVersionString()[ FD ]
Line_24 $$ final File pluginPath-->Line_65 $$ addSaxon(parameters, pluginPath, SAXON_6_JAR)[ FD ]
Line_25 $$ if (pluginId != null) -->Line_30 $$ pluginPath = new File(System.getProperty("xslt-debugger.plugin.path"))[ CD ]
Line_63 $$ final String type = parameters.getVMParametersList().getPropertyValue("xslt.transformer.type")-->Line_66 $$ if ("saxon9".equalsIgnoreCase(type)) [ FD ]
Line_57 $$ File trove4j = new File(PathManager.getLibPath() + c + "trove4j.jar")-->Line_62 $$ parameters.getClassPath().addTail(trove4j.getAbsolutePath())[ FD ]
Line_30 $$ pluginPath = new File(System.getProperty("xslt-debugger.plugin.path"))-->Line_65 $$ addSaxon(parameters, pluginPath, SAXON_6_JAR)[ FD ]
Line_75 $$ if (type != null) -->Line_77 $$ if (parameters.getClassPath().getPathsString().toLowerCase().contains("xalan")) [ CD ]
Line_43 $$ if (ApplicationManagerEx.getApplicationEx().isInternal() && new File(pluginPath, "org").exists()) -->Line_45 $$ final File engineImplInternal = new File(pluginPath, ".." + c + "xslt-debugger-engine-impl")[ CD ]
Line_35 $$ final File rmiStubs = new File(pluginPath, "lib" + c + "rmi-stubs.jar")-->Line_37 $$ parameters.getClassPath().addTail(rmiStubs.getAbsolutePath())[ FD ]
Line_92 $$ if (level == XsltChecker.LanguageLevel.V2) -->Line_94 $$ addSaxon(parameters, pluginPath, SAXON_9_JAR)[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_82 $$ final VirtualFile xsltFile = configuration.findXsltFile()[ CD ]
Line_24 $$ final File pluginPath-->Line_94 $$ addSaxon(parameters, pluginPath, SAXON_9_JAR)[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_85 $$ if (xsltFile != null) [ CD ]
Line_30 $$ pluginPath = new File(System.getProperty("xslt-debugger.plugin.path"))-->Line_94 $$ addSaxon(parameters, pluginPath, SAXON_9_JAR)[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_83 $$ final PsiManager psiManager = PsiManager.getInstance(configuration.getProject())[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_10 $$ if (outputType != XsltRunConfiguration.OutputType.CONSOLE) [ CD ]
Line_57 $$ File trove4j = new File(PathManager.getLibPath() + c + "trove4j.jar")-->Line_58 $$ if (!trove4j.exists()) [ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_3 $$ final XsltRunConfiguration.OutputType outputType = configuration.getOutputType()[ CD ]
Line_28 $$ pluginPath = descriptor.getPath()-->Line_30 $$ pluginPath = new File(System.getProperty("xslt-debugger.plugin.path"))[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_3 $$ final XsltRunConfiguration.OutputType outputType = configuration.getOutputType()[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_63 $$ final String type = parameters.getVMParametersList().getPropertyValue("xslt.transformer.type")[ FD ]
Line_68 $$ if ("xalan".equalsIgnoreCase(type)) -->Line_75 $$ if (type != null) [ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_79 $$ parameters.getVMParametersList().defineProperty("xslt.transformer.type", "xalan")[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_97 $$ addSaxon(parameters, pluginPath, SAXON_6_JAR)[ FD ]
Line_57 $$ File trove4j = new File(PathManager.getLibPath() + c + "trove4j.jar")-->Line_60 $$ assert trove4j.exists() : trove4j.getAbsolutePath()[ FD ]
Line_24 $$ final File pluginPath-->Line_97 $$ addSaxon(parameters, pluginPath, SAXON_6_JAR)[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_64 $$ if ("saxon".equalsIgnoreCase(type)) [ CD ]
Line_91 $$ if (!parameters.getVMParametersList().hasProperty("xslt.transformer.type")) -->Line_92 $$ if (level == XsltChecker.LanguageLevel.V2) [ CD ]
Line_82 $$ final VirtualFile xsltFile = configuration.findXsltFile()-->Line_85 $$ if (xsltFile != null) [ FD ]
Line_45 $$ final File engineImplInternal = new File(pluginPath, ".." + c + "xslt-debugger-engine-impl")-->Line_47 $$ parameters.getClassPath().addTail(engineImplInternal.getAbsolutePath())[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_93 $$ parameters.getVMParametersList().defineProperty("xslt.transformer.type", "saxon9")[ FD ]
Line_68 $$ if ("xalan".equalsIgnoreCase(type)) -->Line_70 $$ if (xalanPresent == null) [ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_91 $$ if (!parameters.getVMParametersList().hasProperty("xslt.transformer.type")) [ FD ]
Line_59 $$ trove4j = new File(PathManager.getHomePath() + c + "community" + c + "lib" + c + "trove4j.jar")-->Line_60 $$ assert trove4j.exists() : trove4j.getAbsolutePath()[ FD ]
Line_77 $$ if (parameters.getClassPath().getPathsString().toLowerCase().contains("xalan")) -->Line_78 $$ if (isValidXalanPresent(parameters) == Boolean.TRUE) [ CD ]
Line_28 $$ pluginPath = descriptor.getPath()-->Line_67 $$ addSaxon(parameters, pluginPath, SAXON_9_JAR)[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_55 $$ parameters.getClassPath().addTail(rmiStubs.getAbsolutePath())[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_34 $$ parameters.getClassPath().addTail(rtClasspath.getAbsolutePath())[ FD ]
Line_33 $$ if (rtClasspath.exists()) -->Line_37 $$ parameters.getClassPath().addTail(rmiStubs.getAbsolutePath())[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_90 $$ extensionData.putUserData(VERSION, level)[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_91 $$ if (!parameters.getVMParametersList().hasProperty("xslt.transformer.type")) [ CD ]
Line_33 $$ if (rtClasspath.exists()) -->Line_42 $$ if (!(rtClasspath = new File(pluginPath, "classes")).exists()) [ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_40 $$ parameters.getClassPath().addTail(engineImpl.getAbsolutePath())[ FD ]
Line_92 $$ if (level == XsltChecker.LanguageLevel.V2) -->Line_93 $$ parameters.getVMParametersList().defineProperty("xslt.transformer.type", "saxon9")[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_71 $$ addXalan(parameters, pluginPath)[ FD ]
Line_28 $$ pluginPath = descriptor.getPath()-->Line_65 $$ addSaxon(parameters, pluginPath, SAXON_6_JAR)[ FD ]
Line_3 $$ final XsltRunConfiguration.OutputType outputType = configuration.getOutputType()-->Line_10 $$ if (outputType != XsltRunConfiguration.OutputType.CONSOLE) [ FD ]
Line_70 $$ if (xalanPresent == null) -->Line_71 $$ addXalan(parameters, pluginPath)[ CD ]
Line_24 $$ final File pluginPath-->Line_44 $$ rtClasspath = pluginPath[ FD ]
Line_83 $$ final PsiManager psiManager = PsiManager.getInstance(configuration.getProject())-->Line_86 $$ level = XsltSupport.getXsltLanguageLevel(psiManager.findFile(xsltFile))[ FD ]
Line_32 $$ File rtClasspath = new File(pluginPath, "lib" + c + "xslt-debugger-engine.jar")-->Line_52 $$ parameters.getClassPath().addTail(rtClasspath.getAbsolutePath())[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_21 $$ final char c = File.separatorChar[ CD ]
Line_25 $$ if (pluginId != null) -->Line_28 $$ pluginPath = descriptor.getPath()[ CD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_83 $$ final PsiManager psiManager = PsiManager.getInstance(configuration.getProject())[ FD ]
Line_38 $$ final File engineImpl = new File(pluginPath, "lib" + c + "rt" + c + "xslt-debugger-engine-impl.jar")-->Line_39 $$ assert engineImpl.exists() : engineImpl.getAbsolutePath()[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_57 $$ File trove4j = new File(PathManager.getLibPath() + c + "trove4j.jar")[ CD ]
Line_24 $$ final File pluginPath-->Line_28 $$ pluginPath = descriptor.getPath()[ FD ]
Line_2 $$ public void patchParameters(final SimpleJavaParameters parameters, XsltRunConfiguration configuration, UserDataHolder extensionData) throws CantRunException -->Line_7 $$ if (ver == null || (ver.contains("1.0") || ver.contains("1.1") || ver.contains("1.2") || ver.contains("1.3") || ver.contains("1.4"))) [ CD ]
Line_32 $$ File rtClasspath = new File(pluginPath, "lib" + c + "xslt-debugger-engine.jar")-->Line_42 $$ if (!(rtClasspath = new File(pluginPath, "classes")).exists()) [ FD ]
