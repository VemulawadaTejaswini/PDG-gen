Line_13 $$ for (String headerToRemove : headersToRemove) -->Line_14 $$ removeHeader(headerToRemove)[ FD ]
Line_6 $$ if (pattern.contains("*")) -->Line_7 $$ headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))[ CD ]
Line_5 $$ if (StringUtils.hasLength(pattern)) -->Line_6 $$ if (pattern.contains("*")) [ CD ]
Line_2 $$ public void removeHeaders(String... headerPatterns) -->Line_3 $$ List<String> headersToRemove = new ArrayList<String>()[ CD ]
Line_4 $$ for (String pattern : headerPatterns) -->Line_7 $$ headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))[ FD ]
Line_4 $$ for (String pattern : headerPatterns) -->Line_9 $$ headersToRemove.add(pattern)[ FD ]
Line_3 $$ List<String> headersToRemove = new ArrayList<String>()-->Line_7 $$ headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))[ FD ]
Line_6 $$ if (pattern.contains("*")) -->Line_9 $$ headersToRemove.add(pattern)[ CD ]
Line_4 $$ for (String pattern : headerPatterns) -->Line_5 $$ if (StringUtils.hasLength(pattern)) [ FD ]
Line_4 $$ for (String pattern : headerPatterns) -->Line_6 $$ if (pattern.contains("*")) [ FD ]
Line_3 $$ List<String> headersToRemove = new ArrayList<String>()-->Line_9 $$ headersToRemove.add(pattern)[ FD ]
