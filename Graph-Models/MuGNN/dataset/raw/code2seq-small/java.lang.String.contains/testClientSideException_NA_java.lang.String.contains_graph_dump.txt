Line_6 $$ List<File> localPath = Collections.singletonList(new File("/xxxxx-does-not-exist/blah"))-->Line_10 $$ TransferFsImage.getFileClient(fsName, id, localPath, mockStorage, false)[ FD ]
Line_5 $$ NNStorage mockStorage = Mockito.mock(NNStorage.class)-->Line_13 $$ Mockito.verify(mockStorage).reportErrorOnFile(localPath.get(0))[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).build()-->Line_16 $$ cluster.shutdown()[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).build()-->Line_8 $$ URL fsName = DFSUtil.getInfoServer(cluster.getNameNode().getServiceRpcAddress(), conf, DFSUtil.getHttpClientScheme(conf)).toURL()[ FD ]
Line_9 $$ String id = "getimage=1&txid=0"-->Line_10 $$ TransferFsImage.getFileClient(fsName, id, localPath, mockStorage, false)[ FD ]
Line_2 $$ public void testClientSideException() throws IOException -->Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).build()[ CD ]
Line_6 $$ List<File> localPath = Collections.singletonList(new File("/xxxxx-does-not-exist/blah"))-->Line_13 $$ Mockito.verify(mockStorage).reportErrorOnFile(localPath.get(0))[ FD ]
Line_5 $$ NNStorage mockStorage = Mockito.mock(NNStorage.class)-->Line_10 $$ TransferFsImage.getFileClient(fsName, id, localPath, mockStorage, false)[ FD ]
Line_8 $$ URL fsName = DFSUtil.getInfoServer(cluster.getNameNode().getServiceRpcAddress(), conf, DFSUtil.getHttpClientScheme(conf)).toURL()-->Line_10 $$ TransferFsImage.getFileClient(fsName, id, localPath, mockStorage, false)[ FD ]
Line_2 $$ public void testClientSideException() throws IOException -->Line_5 $$ NNStorage mockStorage = Mockito.mock(NNStorage.class)[ CD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_8 $$ URL fsName = DFSUtil.getInfoServer(cluster.getNameNode().getServiceRpcAddress(), conf, DFSUtil.getHttpClientScheme(conf)).toURL()[ FD ]
Line_2 $$ public void testClientSideException() throws IOException -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_2 $$ public void testClientSideException() throws IOException -->Line_6 $$ List<File> localPath = Collections.singletonList(new File("/xxxxx-does-not-exist/blah"))[ CD ]
