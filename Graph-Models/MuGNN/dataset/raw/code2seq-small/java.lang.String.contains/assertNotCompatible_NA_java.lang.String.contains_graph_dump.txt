Line_8 $$ for (String conflict : conflicts) -->Line_9 $$ if (conflict.contains(message)) [ FD ]
Line_7 $$ boolean found = false-->Line_10 $$ found = true[ FD ]
Line_2 $$ protected void assertNotCompatible(String msg, MappedFieldType ft1, MappedFieldType ft2, boolean strict, String... messages) -->Line_5 $$ ft1.checkCompatibility(ft2, conflicts, strict)[ FD ]
Line_2 $$ protected void assertNotCompatible(String msg, MappedFieldType ft1, MappedFieldType ft2, boolean strict, String... messages) -->Line_5 $$ ft1.checkCompatibility(ft2, conflicts, strict)[ CD ]
Line_9 $$ if (conflict.contains(message)) -->Line_10 $$ found = true[ CD ]
Line_2 $$ protected void assertNotCompatible(String msg, MappedFieldType ft1, MappedFieldType ft2, boolean strict, String... messages) -->Line_4 $$ List<String> conflicts = new ArrayList()[ CD ]
Line_10 $$ found = true-->Line_13 $$ assertTrue("Missing conflict for " + msg + ": [" + message + "] in conflicts " + conflicts, found)[ FD ]
Line_7 $$ boolean found = false-->Line_13 $$ assertTrue("Missing conflict for " + msg + ": [" + message + "] in conflicts " + conflicts, found)[ FD ]
Line_6 $$ for (String message : messages) -->Line_9 $$ if (conflict.contains(message)) [ FD ]
Line_4 $$ List<String> conflicts = new ArrayList()-->Line_5 $$ ft1.checkCompatibility(ft2, conflicts, strict)[ FD ]
