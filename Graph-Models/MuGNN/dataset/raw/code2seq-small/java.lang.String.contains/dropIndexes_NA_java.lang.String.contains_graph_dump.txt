Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_6 $$ Set<String> validIndexNames = new HashSet()[ CD ]
Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_3 $$ if (_log.isInfoEnabled()) [ CD ]
Line_21 $$ for (Index index : indexes) -->Line_24 $$ String tableName = index.getTableName()[ FD ]
Line_14 $$ for (String line : lines) -->Line_15 $$ if (Validator.isNull(line)) [ FD ]
Line_21 $$ for (Index index : indexes) -->Line_26 $$ boolean unique = index.isUnique()[ FD ]
Line_39 $$ String sql = "drop index " + indexNameUpperCase + " on " + tableName-->Line_43 $$ runSQL(con, sql)[ FD ]
Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_12 $$ String[] lines = StringUtil.splitLines(indexesSQL)[ CD ]
Line_28 $$ if (indexNames.contains(indexNameLowerCase)) -->Line_29 $$ if (unique && indexesSQLLowerCase.contains("create unique index " + indexNameLowerCase + " ")) [ CD ]
Line_26 $$ boolean unique = index.isUnique()-->Line_29 $$ if (unique && indexesSQLLowerCase.contains("create unique index " + indexNameLowerCase + " ")) [ FD ]
Line_24 $$ String tableName = index.getTableName()-->Line_25 $$ String tableNameLowerCase = StringUtil.toLowerCase(tableName)[ FD ]
Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_45 $$ return validIndexNames[ CD ]
Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_7 $$ if (indexes.isEmpty()) [ CD ]
Line_6 $$ Set<String> validIndexNames = new HashSet()-->Line_38 $$ validIndexNames.remove(indexNameUpperCase)[ FD ]
Line_3 $$ if (_log.isInfoEnabled()) -->Line_4 $$ _log.info("Dropping stale indexes")[ CD ]
Line_28 $$ if (indexNames.contains(indexNameLowerCase)) -->Line_32 $$ if (!unique && indexesSQLLowerCase.contains("create index " + indexNameLowerCase + " ")) [ CD ]
Line_10 $$ String tablesSQLLowerCase = StringUtil.toLowerCase(tablesSQL)-->Line_35 $$ if (!tablesSQLLowerCase.contains("create table " + tableNameLowerCase + " (")) [ FD ]
Line_40 $$ if (_log.isInfoEnabled()) -->Line_41 $$ _log.info(sql)[ CD ]
Line_11 $$ String indexesSQLLowerCase = StringUtil.toLowerCase(indexesSQL)-->Line_29 $$ if (unique && indexesSQLLowerCase.contains("create unique index " + indexNameLowerCase + " ")) [ FD ]
Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_10 $$ String tablesSQLLowerCase = StringUtil.toLowerCase(tablesSQL)[ FD ]
Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_13 $$ Set<String> indexNames = new HashSet()[ CD ]
Line_11 $$ String indexesSQLLowerCase = StringUtil.toLowerCase(indexesSQL)-->Line_32 $$ if (!unique && indexesSQLLowerCase.contains("create index " + indexNameLowerCase + " ")) [ FD ]
Line_7 $$ if (indexes.isEmpty()) -->Line_8 $$ return validIndexNames[ CD ]
Line_26 $$ boolean unique = index.isUnique()-->Line_32 $$ if (!unique && indexesSQLLowerCase.contains("create index " + indexNameLowerCase + " ")) [ FD ]
Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_10 $$ String tablesSQLLowerCase = StringUtil.toLowerCase(tablesSQL)[ CD ]
Line_6 $$ Set<String> validIndexNames = new HashSet()-->Line_27 $$ validIndexNames.add(indexNameUpperCase)[ FD ]
Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_11 $$ String indexesSQLLowerCase = StringUtil.toLowerCase(indexesSQL)[ FD ]
Line_13 $$ Set<String> indexNames = new HashSet()-->Line_19 $$ indexNames.add(StringUtil.toLowerCase(indexMetadata.getIndexName()))[ FD ]
Line_18 $$ IndexMetadata indexMetadata = IndexMetadataFactoryUtil.createIndexMetadata(line)-->Line_19 $$ indexNames.add(StringUtil.toLowerCase(indexMetadata.getIndexName()))[ FD ]
Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_11 $$ String indexesSQLLowerCase = StringUtil.toLowerCase(indexesSQL)[ CD ]
Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_12 $$ String[] lines = StringUtil.splitLines(indexesSQL)[ FD ]
Line_22 $$ String indexNameUpperCase = StringUtil.toUpperCase(index.getIndexName())-->Line_23 $$ String indexNameLowerCase = StringUtil.toLowerCase(indexNameUpperCase)[ FD ]
Line_23 $$ String indexNameLowerCase = StringUtil.toLowerCase(indexNameUpperCase)-->Line_28 $$ if (indexNames.contains(indexNameLowerCase)) [ FD ]
Line_22 $$ String indexNameUpperCase = StringUtil.toUpperCase(index.getIndexName())-->Line_38 $$ validIndexNames.remove(indexNameUpperCase)[ FD ]
Line_13 $$ Set<String> indexNames = new HashSet()-->Line_28 $$ if (indexNames.contains(indexNameLowerCase)) [ FD ]
Line_28 $$ if (indexNames.contains(indexNameLowerCase)) -->Line_35 $$ if (!tablesSQLLowerCase.contains("create table " + tableNameLowerCase + " (")) [ CD ]
Line_21 $$ for (Index index : indexes) -->Line_22 $$ String indexNameUpperCase = StringUtil.toUpperCase(index.getIndexName())[ FD ]
Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_7 $$ if (indexes.isEmpty()) [ FD ]
Line_22 $$ String indexNameUpperCase = StringUtil.toUpperCase(index.getIndexName())-->Line_27 $$ validIndexNames.add(indexNameUpperCase)[ FD ]
Line_39 $$ String sql = "drop index " + indexNameUpperCase + " on " + tableName-->Line_41 $$ _log.info(sql)[ FD ]
Line_2 $$ protected Set<String> dropIndexes(Connection con, String tablesSQL, String indexesSQL, List<Index> indexes) throws IOException, SQLException -->Line_43 $$ runSQL(con, sql)[ FD ]
Line_14 $$ for (String line : lines) -->Line_18 $$ IndexMetadata indexMetadata = IndexMetadataFactoryUtil.createIndexMetadata(line)[ FD ]
