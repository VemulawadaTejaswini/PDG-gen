Line_2 $$ private String execute(@NotNull List<String> parameters, @NotNull File path) throws SvnBindException -->Line_12 $$ CommandExecutor command = execute(myVcs, SvnTarget.fromFile(path), SvnCommandName.info, parameters, listener)[ FD ]
Line_6 $$ if (outputType == ProcessOutputTypes.STDOUT) -->Line_7 $$ output.appendStdout(line)[ CD ]
Line_4 $$ LineCommandListener listener = new LineCommandAdapter() -->Line_6 $$ if (outputType == ProcessOutputTypes.STDOUT) [ FD ]
Line_3 $$ final ProcessOutput output = new ProcessOutput()-->Line_7 $$ output.appendStdout(line)[ FD ]
Line_2 $$ private String execute(@NotNull List<String> parameters, @NotNull File path) throws SvnBindException -->Line_3 $$ final ProcessOutput output = new ProcessOutput()[ CD ]
Line_16 $$ if (text.contains("W155010")) -->Line_17 $$ return output.getStdout()[ CD ]
Line_3 $$ final ProcessOutput output = new ProcessOutput()-->Line_19 $$ if (text.contains("is not a working copy") && StringUtil.isNotEmpty(output.getStdout())) [ FD ]
Line_3 $$ final ProcessOutput output = new ProcessOutput()-->Line_20 $$ return output.getStdout() + "</info>"[ FD ]
Line_4 $$ LineCommandListener listener = new LineCommandAdapter() -->Line_7 $$ output.appendStdout(line)[ FD ]
Line_3 $$ final ProcessOutput output = new ProcessOutput()-->Line_17 $$ return output.getStdout()[ FD ]
Line_19 $$ if (text.contains("is not a working copy") && StringUtil.isNotEmpty(output.getStdout())) -->Line_20 $$ return output.getStdout() + "</info>"[ CD ]
Line_4 $$ LineCommandListener listener = new LineCommandAdapter() -->Line_6 $$ if (outputType == ProcessOutputTypes.STDOUT) [ CD ]
Line_2 $$ private String execute(@NotNull List<String> parameters, @NotNull File path) throws SvnBindException -->Line_4 $$ LineCommandListener listener = new LineCommandAdapter() [ CD ]
Line_4 $$ LineCommandListener listener = new LineCommandAdapter() -->Line_12 $$ CommandExecutor command = execute(myVcs, SvnTarget.fromFile(path), SvnCommandName.info, parameters, listener)[ FD ]
