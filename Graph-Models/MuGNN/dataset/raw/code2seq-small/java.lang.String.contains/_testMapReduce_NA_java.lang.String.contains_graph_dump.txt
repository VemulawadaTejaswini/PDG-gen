Line_28 $$ if (outputFiles.length > 0) -->Line_32 $$ int counter = 0[ CD ]
Line_28 $$ if (outputFiles.length > 0) -->Line_38 $$ reader.close()[ CD ]
Line_4 $$ Writer wr = new OutputStreamWriter(os)-->Line_6 $$ wr.write("hello2\n")[ FD ]
Line_14 $$ JobConf conf = createJobConf()-->Line_15 $$ conf.setJobName("mr")[ FD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_3 $$ OutputStream os = getFileSystem().create(new Path(getInputDir(), "text.txt"))[ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_10 $$ if (restart) [ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_16 $$ conf.setInputFormat(TextInputFormat.class)[ CD ]
Line_28 $$ if (outputFiles.length > 0) -->Line_29 $$ InputStream is = getFileSystem().open(outputFiles[0])[ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_26 $$ JobClient.runJob(conf)[ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_28 $$ if (outputFiles.length > 0) [ CD ]
Line_4 $$ Writer wr = new OutputStreamWriter(os)-->Line_5 $$ wr.write("hello1\n")[ FD ]
Line_31 $$ String line = reader.readLine()-->Line_33 $$ while (line != null) [ FD ]
Line_14 $$ JobConf conf = createJobConf()-->Line_24 $$ FileInputFormat.setInputPaths(conf, getInputDir())[ FD ]
Line_30 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_36 $$ line = reader.readLine()[ FD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_4 $$ Writer wr = new OutputStreamWriter(os)[ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_23 $$ conf.setReducerClass(org.apache.hadoop.mapred.lib.IdentityReducer.class)[ CD ]
Line_14 $$ JobConf conf = createJobConf()-->Line_21 $$ conf.setOutputValueClass(Text.class)[ FD ]
Line_33 $$ while (line != null) -->Line_34 $$ counter++[ CD ]
Line_4 $$ Writer wr = new OutputStreamWriter(os)-->Line_9 $$ wr.close()[ FD ]
Line_28 $$ if (outputFiles.length > 0) -->Line_30 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_21 $$ conf.setOutputValueClass(Text.class)[ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_8 $$ wr.write("hello4\n")[ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_14 $$ JobConf conf = createJobConf()[ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_7 $$ wr.write("hello3\n")[ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_20 $$ conf.setOutputKeyClass(LongWritable.class)[ CD ]
Line_14 $$ JobConf conf = createJobConf()-->Line_18 $$ conf.setMapOutputValueClass(Text.class)[ FD ]
Line_4 $$ Writer wr = new OutputStreamWriter(os)-->Line_8 $$ wr.write("hello4\n")[ FD ]
Line_31 $$ String line = reader.readLine()-->Line_36 $$ line = reader.readLine()[ FD ]
Line_10 $$ if (restart) -->Line_11 $$ stopCluster()[ CD ]
Line_32 $$ int counter = 0-->Line_39 $$ assertEquals(4, counter)[ FD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_22 $$ conf.setMapperClass(org.apache.hadoop.mapred.lib.IdentityMapper.class)[ CD ]
Line_28 $$ if (outputFiles.length > 0) -->Line_39 $$ assertEquals(4, counter)[ CD ]
Line_32 $$ int counter = 0-->Line_34 $$ counter++[ FD ]
Line_10 $$ if (restart) -->Line_12 $$ startCluster(false, null)[ CD ]
Line_14 $$ JobConf conf = createJobConf()-->Line_17 $$ conf.setMapOutputKeyClass(LongWritable.class)[ FD ]
Line_14 $$ JobConf conf = createJobConf()-->Line_20 $$ conf.setOutputKeyClass(LongWritable.class)[ FD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_24 $$ FileInputFormat.setInputPaths(conf, getInputDir())[ CD ]
Line_28 $$ if (outputFiles.length > 0) -->Line_33 $$ while (line != null) [ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_9 $$ wr.close()[ CD ]
Line_33 $$ while (line != null) -->Line_35 $$ assertTrue(line.contains("hello"))[ CD ]
Line_36 $$ line = reader.readLine()-->Line_33 $$ while (line != null) [ FD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_18 $$ conf.setMapOutputValueClass(Text.class)[ CD ]
Line_30 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_38 $$ reader.close()[ FD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_17 $$ conf.setMapOutputKeyClass(LongWritable.class)[ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_6 $$ wr.write("hello2\n")[ CD ]
Line_14 $$ JobConf conf = createJobConf()-->Line_19 $$ conf.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_14 $$ JobConf conf = createJobConf()-->Line_25 $$ FileOutputFormat.setOutputPath(conf, getOutputDir())[ FD ]
Line_14 $$ JobConf conf = createJobConf()-->Line_26 $$ JobClient.runJob(conf)[ FD ]
Line_14 $$ JobConf conf = createJobConf()-->Line_23 $$ conf.setReducerClass(org.apache.hadoop.mapred.lib.IdentityReducer.class)[ FD ]
Line_30 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_31 $$ String line = reader.readLine()[ FD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_19 $$ conf.setOutputFormat(TextOutputFormat.class)[ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_25 $$ FileOutputFormat.setOutputPath(conf, getOutputDir())[ CD ]
Line_4 $$ Writer wr = new OutputStreamWriter(os)-->Line_7 $$ wr.write("hello3\n")[ FD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_5 $$ wr.write("hello1\n")[ CD ]
Line_33 $$ while (line != null) -->Line_36 $$ line = reader.readLine()[ CD ]
Line_36 $$ line = reader.readLine()-->Line_35 $$ assertTrue(line.contains("hello"))[ FD ]
Line_28 $$ if (outputFiles.length > 0) -->Line_31 $$ String line = reader.readLine()[ CD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_27 $$ Path[] outputFiles = FileUtil.stat2Paths(getFileSystem().listStatus(getOutputDir(), new Utils.OutputFileUtils.OutputFilesFilter()))[ CD ]
Line_31 $$ String line = reader.readLine()-->Line_35 $$ assertTrue(line.contains("hello"))[ FD ]
Line_2 $$ public void _testMapReduce(boolean restart) throws Exception -->Line_15 $$ conf.setJobName("mr")[ CD ]
Line_14 $$ JobConf conf = createJobConf()-->Line_16 $$ conf.setInputFormat(TextInputFormat.class)[ FD ]
Line_14 $$ JobConf conf = createJobConf()-->Line_22 $$ conf.setMapperClass(org.apache.hadoop.mapred.lib.IdentityMapper.class)[ FD ]
