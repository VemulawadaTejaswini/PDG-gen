Line_9 $$ Map<String, String> env = new HashMap<String, String>()-->Line_10 $$ env.put("APPLICATION_WORKFLOW_CONTEXT", "[ FD ]
Line_5 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")-->Line_17 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] [ FD ]
Line_7 $$ FileOutputStream fos = new FileOutputStream(shellFile)-->Line_14 $$ fos.close()[ FD ]
Line_5 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")-->Line_29 $$ shellFile.delete()[ FD ]
Line_23 $$ diagnostics = e.getMessage()-->Line_25 $$ Assert.assertTrue(diagnostics.contains(Shell.WINDOWS ? "is not recognized as an internal or external command" : "command not found"))[ FD ]
Line_7 $$ FileOutputStream fos = new FileOutputStream(shellFile)-->Line_12 $$ ContainerLaunch.writeLaunchEnv(fos, env, resources, commands)[ FD ]
Line_3 $$ File shellFile = null-->Line_8 $$ FileUtil.setExecutable(shellFile, true)[ FD ]
Line_3 $$ File shellFile = null-->Line_17 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] [ FD ]
Line_2 $$ public void testInvalidEnvSyntaxDiagnostics() throws IOException -->Line_3 $$ File shellFile = null[ CD ]
Line_11 $$ List<String> commands = new ArrayList<String>()-->Line_12 $$ ContainerLaunch.writeLaunchEnv(fos, env, resources, commands)[ FD ]
Line_9 $$ Map<String, String> env = new HashMap<String, String>()-->Line_12 $$ ContainerLaunch.writeLaunchEnv(fos, env, resources, commands)[ FD ]
Line_3 $$ File shellFile = null-->Line_28 $$ if (shellFile != null && shellFile.exists()) [ FD ]
Line_3 $$ File shellFile = null-->Line_5 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")[ FD ]
Line_17 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] -->Line_26 $$ Assert.assertTrue(shexc.getExitCode() != 0)[ FD ]
Line_7 $$ FileOutputStream fos = new FileOutputStream(shellFile)-->Line_13 $$ fos.flush()[ FD ]
Line_28 $$ if (shellFile != null && shellFile.exists()) -->Line_29 $$ shellFile.delete()[ CD ]
Line_18 $$ String diagnostics = null-->Line_25 $$ Assert.assertTrue(diagnostics.contains(Shell.WINDOWS ? "is not recognized as an internal or external command" : "command not found"))[ FD ]
Line_15 $$ Map<String, String> cmdEnv = new HashMap<String, String>()-->Line_16 $$ cmdEnv.put("LANG", "C")[ FD ]
Line_5 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")-->Line_28 $$ if (shellFile != null && shellFile.exists()) [ FD ]
Line_3 $$ File shellFile = null-->Line_29 $$ shellFile.delete()[ FD ]
Line_6 $$ Map<Path, List<String>> resources = new HashMap<Path, List<String>>()-->Line_12 $$ ContainerLaunch.writeLaunchEnv(fos, env, resources, commands)[ FD ]
Line_5 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")-->Line_8 $$ FileUtil.setExecutable(shellFile, true)[ FD ]
Line_17 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] -->Line_20 $$ shexc.execute()[ FD ]
Line_18 $$ String diagnostics = null-->Line_23 $$ diagnostics = e.getMessage()[ FD ]
