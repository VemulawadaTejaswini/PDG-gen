Line_7 $$ methodName = StringUtil.getShortName(pattern, ',')-->Line_28 $$ collectTestMethods(classes, psiClass, methodName, searchScope)[ FD ]
Line_2 $$ public static void fillTestObjects(final Map<PsiClass, Map<PsiMethod, List<String>>> classes, final Set<String> patterns, final TestSearchScope testSearchScope, final ModuleBasedConfiguration config, final GlobalSearchScope searchScope) throws CantRunException -->Line_46 $$ final SourceScope sourceScope = testSearchScope.getSourceScope(config)[ FD ]
Line_3 $$ for (final String pattern : patterns) -->Line_7 $$ methodName = StringUtil.getShortName(pattern, ',')[ FD ]
Line_25 $$ if (StringUtil.isEmpty(methodName)) -->Line_28 $$ collectTestMethods(classes, psiClass, methodName, searchScope)[ CD ]
Line_8 $$ className = StringUtil.getPackageName(pattern, ',')-->Line_15 $$ return ClassUtil.findPsiClass(PsiManager.getInstance(config.getProject()), className.replace('/', '.'), null, true, searchScope)[ FD ]
Line_24 $$ if (hasTest) -->Line_25 $$ if (StringUtil.isEmpty(methodName)) [ CD ]
Line_5 $$ final String methodName-->Line_7 $$ methodName = StringUtil.getShortName(pattern, ',')[ FD ]
Line_19 $$ final Boolean hasTest = ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() -->Line_21 $$ return TestNGUtil.hasTest(psiClass)[ CD ]
Line_49 $$ if (super.isAccepted(psiClass)) -->Line_50 $$ final String qualifiedName = psiClass.getQualifiedName()[ CD ]
Line_52 $$ for (Pattern pattern : compilePatterns) -->Line_53 $$ if (pattern.matcher(qualifiedName).matches())[ FD ]
Line_13 $$ final PsiClass psiClass = ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>() -->Line_28 $$ collectTestMethods(classes, psiClass, methodName, searchScope)[ FD ]
Line_11 $$ methodName = null-->Line_28 $$ collectTestMethods(classes, psiClass, methodName, searchScope)[ FD ]
Line_2 $$ public static void fillTestObjects(final Map<PsiClass, Map<PsiMethod, List<String>>> classes, final Set<String> patterns, final TestSearchScope testSearchScope, final ModuleBasedConfiguration config, final GlobalSearchScope searchScope) throws CantRunException -->Line_26 $$ calculateDependencies(null, classes, searchScope, psiClass)[ FD ]
Line_3 $$ for (final String pattern : patterns) -->Line_8 $$ className = StringUtil.getPackageName(pattern, ',')[ FD ]
Line_3 $$ for (final String pattern : patterns) -->Line_10 $$ className = pattern[ FD ]
Line_50 $$ final String qualifiedName = psiClass.getQualifiedName()-->Line_53 $$ if (pattern.matcher(qualifiedName).matches())[ FD ]
Line_47 $$ TestClassFilter projectFilter = new TestClassFilter(sourceScope != null ? sourceScope.getGlobalSearchScope() : GlobalSearchScope.allScope(config.getProject()), config.getProject(), true, true) -->Line_49 $$ if (super.isAccepted(psiClass)) [ CD ]
Line_6 $$ if (pattern.contains(",")) -->Line_7 $$ methodName = StringUtil.getShortName(pattern, ',')[ CD ]
Line_47 $$ TestClassFilter projectFilter = new TestClassFilter(sourceScope != null ? sourceScope.getGlobalSearchScope() : GlobalSearchScope.allScope(config.getProject()), config.getProject(), true, true) -->Line_50 $$ final String qualifiedName = psiClass.getQualifiedName()[ FD ]
Line_5 $$ final String methodName-->Line_28 $$ collectTestMethods(classes, psiClass, methodName, searchScope)[ FD ]
Line_13 $$ final PsiClass psiClass = ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>() -->Line_18 $$ if (psiClass != null) [ FD ]
Line_53 $$ if (pattern.matcher(qualifiedName).matches())-->Line_54 $$ return true[ CD ]
Line_4 $$ final String className-->Line_8 $$ className = StringUtil.getPackageName(pattern, ',')[ FD ]
Line_47 $$ TestClassFilter projectFilter = new TestClassFilter(sourceScope != null ? sourceScope.getGlobalSearchScope() : GlobalSearchScope.allScope(config.getProject()), config.getProject(), true, true) -->Line_57 $$ return false[ CD ]
Line_35 $$ if (classes.size() != patterns.size()) -->Line_61 $$ if (classes.size() == 0) [ CD ]
Line_35 $$ if (classes.size() != patterns.size()) -->Line_60 $$ calculateDependencies(null, classes, searchScope, TestNGUtil.getAllTestClasses(projectFilter, false))[ CD ]
Line_6 $$ if (pattern.contains(",")) -->Line_11 $$ methodName = null[ CD ]
Line_2 $$ public static void fillTestObjects(final Map<PsiClass, Map<PsiMethod, List<String>>> classes, final Set<String> patterns, final TestSearchScope testSearchScope, final ModuleBasedConfiguration config, final GlobalSearchScope searchScope) throws CantRunException -->Line_60 $$ calculateDependencies(null, classes, searchScope, TestNGUtil.getAllTestClasses(projectFilter, false))[ FD ]
Line_7 $$ methodName = StringUtil.getShortName(pattern, ',')-->Line_11 $$ methodName = null[ FD ]
Line_2 $$ public static void fillTestObjects(final Map<PsiClass, Map<PsiMethod, List<String>>> classes, final Set<String> patterns, final TestSearchScope testSearchScope, final ModuleBasedConfiguration config, final GlobalSearchScope searchScope) throws CantRunException -->Line_61 $$ if (classes.size() == 0) [ FD ]
Line_13 $$ final PsiClass psiClass = ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>() -->Line_50 $$ final String qualifiedName = psiClass.getQualifiedName()[ FD ]
Line_4 $$ final String className-->Line_10 $$ className = pattern[ FD ]
Line_2 $$ public static void fillTestObjects(final Map<PsiClass, Map<PsiMethod, List<String>>> classes, final Set<String> patterns, final TestSearchScope testSearchScope, final ModuleBasedConfiguration config, final GlobalSearchScope searchScope) throws CantRunException -->Line_35 $$ if (classes.size() != patterns.size()) [ CD ]
Line_13 $$ final PsiClass psiClass = ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>() -->Line_15 $$ return ClassUtil.findPsiClass(PsiManager.getInstance(config.getProject()), className.replace('/', '.'), null, true, searchScope)[ CD ]
Line_49 $$ if (super.isAccepted(psiClass)) -->Line_51 $$ LOG.assertTrue(qualifiedName != null)[ CD ]
Line_6 $$ if (pattern.contains(",")) -->Line_10 $$ className = pattern[ CD ]
Line_2 $$ public static void fillTestObjects(final Map<PsiClass, Map<PsiMethod, List<String>>> classes, final Set<String> patterns, final TestSearchScope testSearchScope, final ModuleBasedConfiguration config, final GlobalSearchScope searchScope) throws CantRunException -->Line_15 $$ return ClassUtil.findPsiClass(PsiManager.getInstance(config.getProject()), className.replace('/', '.'), null, true, searchScope)[ FD ]
Line_5 $$ final String methodName-->Line_25 $$ if (StringUtil.isEmpty(methodName)) [ FD ]
Line_3 $$ for (final String pattern : patterns) -->Line_6 $$ if (pattern.contains(",")) [ FD ]
Line_2 $$ public static void fillTestObjects(final Map<PsiClass, Map<PsiMethod, List<String>>> classes, final Set<String> patterns, final TestSearchScope testSearchScope, final ModuleBasedConfiguration config, final GlobalSearchScope searchScope) throws CantRunException -->Line_47 $$ TestClassFilter projectFilter = new TestClassFilter(sourceScope != null ? sourceScope.getGlobalSearchScope() : GlobalSearchScope.allScope(config.getProject()), config.getProject(), true, true) [ FD ]
Line_2 $$ public static void fillTestObjects(final Map<PsiClass, Map<PsiMethod, List<String>>> classes, final Set<String> patterns, final TestSearchScope testSearchScope, final ModuleBasedConfiguration config, final GlobalSearchScope searchScope) throws CantRunException -->Line_28 $$ collectTestMethods(classes, psiClass, methodName, searchScope)[ FD ]
Line_2 $$ public static void fillTestObjects(final Map<PsiClass, Map<PsiMethod, List<String>>> classes, final Set<String> patterns, final TestSearchScope testSearchScope, final ModuleBasedConfiguration config, final GlobalSearchScope searchScope) throws CantRunException -->Line_62 $$ throw new CantRunException("No tests found in for patterns \"" + StringUtil.join(patterns, " || ") + '\"')[ FD ]
Line_13 $$ final PsiClass psiClass = ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>() -->Line_49 $$ if (super.isAccepted(psiClass)) [ FD ]
Line_13 $$ final PsiClass psiClass = ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>() -->Line_26 $$ calculateDependencies(null, classes, searchScope, psiClass)[ FD ]
Line_47 $$ TestClassFilter projectFilter = new TestClassFilter(sourceScope != null ? sourceScope.getGlobalSearchScope() : GlobalSearchScope.allScope(config.getProject()), config.getProject(), true, true) -->Line_49 $$ if (super.isAccepted(psiClass)) [ FD ]
Line_4 $$ final String className-->Line_15 $$ return ClassUtil.findPsiClass(PsiManager.getInstance(config.getProject()), className.replace('/', '.'), null, true, searchScope)[ FD ]
Line_7 $$ methodName = StringUtil.getShortName(pattern, ',')-->Line_25 $$ if (StringUtil.isEmpty(methodName)) [ FD ]
Line_5 $$ final String methodName-->Line_11 $$ methodName = null[ FD ]
Line_18 $$ if (psiClass != null) -->Line_19 $$ final Boolean hasTest = ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() [ CD ]
Line_10 $$ className = pattern-->Line_15 $$ return ClassUtil.findPsiClass(PsiManager.getInstance(config.getProject()), className.replace('/', '.'), null, true, searchScope)[ FD ]
Line_18 $$ if (psiClass != null) -->Line_24 $$ if (hasTest) [ CD ]
Line_13 $$ final PsiClass psiClass = ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>() -->Line_21 $$ return TestNGUtil.hasTest(psiClass)[ FD ]
Line_8 $$ className = StringUtil.getPackageName(pattern, ',')-->Line_10 $$ className = pattern[ FD ]
Line_35 $$ if (classes.size() != patterns.size()) -->Line_46 $$ final SourceScope sourceScope = testSearchScope.getSourceScope(config)[ CD ]
Line_2 $$ public static void fillTestObjects(final Map<PsiClass, Map<PsiMethod, List<String>>> classes, final Set<String> patterns, final TestSearchScope testSearchScope, final ModuleBasedConfiguration config, final GlobalSearchScope searchScope) throws CantRunException -->Line_35 $$ if (classes.size() != patterns.size()) [ FD ]
Line_6 $$ if (pattern.contains(",")) -->Line_8 $$ className = StringUtil.getPackageName(pattern, ',')[ CD ]
Line_3 $$ for (final String pattern : patterns) -->Line_53 $$ if (pattern.matcher(qualifiedName).matches())[ FD ]
Line_11 $$ methodName = null-->Line_25 $$ if (StringUtil.isEmpty(methodName)) [ FD ]
Line_25 $$ if (StringUtil.isEmpty(methodName)) -->Line_26 $$ calculateDependencies(null, classes, searchScope, psiClass)[ CD ]
