Line_15 $$ if (hasUTF16BEBom(content)) -->Line_16 $$ return UTF16BE_BOM.length[ CD ]
Line_2 $$ public static int getBOMLength(@NotNull byte[] content, @NotNull Charset charset) -->Line_15 $$ if (hasUTF16BEBom(content)) [ FD ]
Line_3 $$ if (charset.name().contains(UTF8) && hasUTF8Bom(content)) -->Line_4 $$ return UTF8_BOM.length[ CD ]
Line_2 $$ public static int getBOMLength(@NotNull byte[] content, @NotNull Charset charset) -->Line_9 $$ if (hasUTF32BEBom(content)) [ FD ]
Line_2 $$ public static int getBOMLength(@NotNull byte[] content, @NotNull Charset charset) -->Line_18 $$ return 0[ CD ]
Line_6 $$ if (hasUTF32BEBom(content)) -->Line_7 $$ return UTF32BE_BOM.length[ CD ]
Line_2 $$ public static int getBOMLength(@NotNull byte[] content, @NotNull Charset charset) -->Line_15 $$ if (hasUTF16BEBom(content)) [ CD ]
Line_12 $$ if (hasUTF16LEBom(content)) -->Line_13 $$ return UTF16LE_BOM.length[ CD ]
Line_9 $$ if (hasUTF32BEBom(content)) -->Line_10 $$ return UTF32BE_BOM.length[ CD ]
Line_2 $$ public static int getBOMLength(@NotNull byte[] content, @NotNull Charset charset) -->Line_6 $$ if (hasUTF32BEBom(content)) [ CD ]
Line_2 $$ public static int getBOMLength(@NotNull byte[] content, @NotNull Charset charset) -->Line_12 $$ if (hasUTF16LEBom(content)) [ CD ]
Line_2 $$ public static int getBOMLength(@NotNull byte[] content, @NotNull Charset charset) -->Line_9 $$ if (hasUTF32BEBom(content)) [ CD ]
Line_2 $$ public static int getBOMLength(@NotNull byte[] content, @NotNull Charset charset) -->Line_6 $$ if (hasUTF32BEBom(content)) [ FD ]
Line_2 $$ public static int getBOMLength(@NotNull byte[] content, @NotNull Charset charset) -->Line_12 $$ if (hasUTF16LEBom(content)) [ FD ]
Line_2 $$ public static int getBOMLength(@NotNull byte[] content, @NotNull Charset charset) -->Line_3 $$ if (charset.name().contains(UTF8) && hasUTF8Bom(content)) [ CD ]
Line_2 $$ public static int getBOMLength(@NotNull byte[] content, @NotNull Charset charset) -->Line_3 $$ if (charset.name().contains(UTF8) && hasUTF8Bom(content)) [ FD ]
