Line_66 $$ if (useVariable) -->Line_85 $$ PsiReplacementUtil.replaceExpression(lastExpression, variableName)[ CD ]
Line_53 $$ final PsiCodeBlock codeBlock = PsiTreeUtil.getParentOfType(variable, PsiCodeBlock.class)-->Line_58 $$ codeBlock.accept(visitor)[ FD ]
Line_45 $$ if (arguments.length == 0 || PsiType.INT.equals(arguments[0].getType())) -->Line_46 $$ builder = new StringBuilder()[ CD ]
Line_64 $$ final PsiMethodCallExpression lastExpression = expressions.get(expressions.size() - 1)-->Line_87 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(lastExpression, PsiStatement.class)[ FD ]
Line_4 $$ final PsiElement parent = element.getParent()-->Line_6 $$ if (parent instanceof PsiNewExpression) [ FD ]
Line_34 $$ builder = buildStringExpression(initializer, new StringBuilder())-->Line_46 $$ builder = new StringBuilder()[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_19 $$ final String variableName = variable.getName()[ CD ]
Line_77 $$ if (sibling instanceof PsiWhiteSpace) -->Line_78 $$ statementText.append(sibling.getText())[ CD ]
Line_66 $$ if (useVariable) -->Line_84 $$ addTrailingCommentsAfter(lastExpression)[ CD ]
Line_63 $$ final String expressionText = builder.toString().trim()-->Line_93 $$ PsiReplacementUtil.replaceExpression(lastExpression, expressionText)[ FD ]
Line_73 $$ final StringBuilder statementText = new StringBuilder(modifier).append(CommonClassNames.JAVA_LANG_STRING).append(' ').append(variableName).append("=")-->Line_81 $$ statementText.append(expressionText).append(';')[ FD ]
Line_10 $$ if (stringExpression != null && stringBuilderExpression != null) -->Line_12 $$ addTrailingCommentsAfter(stringBuilderExpression)[ CD ]
Line_32 $$ if (isAppendCall(initializer)) -->Line_35 $$ if (builder == null) [ CD ]
Line_63 $$ final String expressionText = builder.toString().trim()-->Line_81 $$ statementText.append(expressionText).append(';')[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_20 $$ if (variableName == null) [ CD ]
Line_4 $$ final PsiElement parent = element.getParent()-->Line_7 $$ final PsiExpression stringBuilderExpression = getCompleteExpression(parent)[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_54 $$ if (codeBlock == null) [ CD ]
Line_66 $$ if (useVariable) -->Line_68 $$ if (statement == null) [ CD ]
Line_82 $$ final PsiStatement newStatement = factory.createStatementFromText(statementText.toString(), variable)-->Line_83 $$ codeBlock.addBefore(newStatement, statement)[ FD ]
Line_23 $$ final PsiTypeElement originalTypeElement = variable.getTypeElement()-->Line_24 $$ if (originalTypeElement == null) [ FD ]
Line_18 $$ final PsiVariable variable = (PsiVariable) parent-->Line_23 $$ final PsiTypeElement originalTypeElement = variable.getTypeElement()[ FD ]
Line_96 $$ for (int i = 0, size = expressions.size() - 1; i < size; i++) -->Line_97 $$ expressions.get(i).getParent().delete()[ FD ]
Line_41 $$ if (argumentList == null) -->Line_42 $$ return[ CD ]
Line_31 $$ final StringBuilder builder-->Line_34 $$ builder = buildStringExpression(initializer, new StringBuilder())[ FD ]
Line_57 $$ final StringBuildingVisitor visitor = new StringBuildingVisitor(variable, builder)-->Line_58 $$ codeBlock.accept(visitor)[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_57 $$ final StringBuildingVisitor visitor = new StringBuildingVisitor(variable, builder)[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_71 $$ final String modifier = CodeStyleSettingsManager.getSettings(project).GENERATE_FINAL_LOCALS ? "final " : ""[ FD ]
Line_66 $$ if (useVariable) -->Line_87 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(lastExpression, PsiStatement.class)[ CD ]
Line_66 $$ if (useVariable) -->Line_88 $$ if (statement == null) [ CD ]
Line_64 $$ final PsiMethodCallExpression lastExpression = expressions.get(expressions.size() - 1)-->Line_85 $$ PsiReplacementUtil.replaceExpression(lastExpression, variableName)[ FD ]
Line_19 $$ final String variableName = variable.getName()-->Line_20 $$ if (variableName == null) [ FD ]
Line_18 $$ final PsiVariable variable = (PsiVariable) parent-->Line_95 $$ variable.delete()[ FD ]
Line_39 $$ final PsiNewExpression newExpression = (PsiNewExpression) initializer-->Line_40 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_18 $$ final PsiVariable variable = (PsiVariable) parent[ CD ]
Line_64 $$ final PsiMethodCallExpression lastExpression = expressions.get(expressions.size() - 1)-->Line_84 $$ addTrailingCommentsAfter(lastExpression)[ FD ]
Line_66 $$ if (useVariable) -->Line_91 $$ addLeadingCommentsBefore(statement)[ CD ]
Line_73 $$ final StringBuilder statementText = new StringBuilder(modifier).append(CommonClassNames.JAVA_LANG_STRING).append(' ').append(variableName).append("=")-->Line_75 $$ statementText.append(comment.getText())[ FD ]
Line_18 $$ final PsiVariable variable = (PsiVariable) parent-->Line_19 $$ final String variableName = variable.getName()[ FD ]
Line_66 $$ if (useVariable) -->Line_71 $$ final String modifier = CodeStyleSettingsManager.getSettings(project).GENERATE_FINAL_LOCALS ? "final " : ""[ CD ]
Line_66 $$ if (useVariable) -->Line_83 $$ codeBlock.addBefore(newStatement, statement)[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_23 $$ final PsiTypeElement originalTypeElement = variable.getTypeElement()[ CD ]
Line_38 $$ if (initializer instanceof PsiNewExpression) -->Line_40 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()[ CD ]
Line_88 $$ if (statement == null) -->Line_89 $$ return[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_5 $$ if (!(parent instanceof PsiVariable)) [ CD ]
Line_74 $$ for (PsiComment comment : leadingComments) -->Line_76 $$ final PsiElement sibling = comment.getNextSibling()[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_31 $$ final StringBuilder builder[ CD ]
Line_31 $$ final StringBuilder builder-->Line_63 $$ final String expressionText = builder.toString().trim()[ FD ]
Line_96 $$ for (int i = 0, size = expressions.size() - 1; i < size; i++) -->Line_97 $$ expressions.get(i).getParent().delete()[ CD ]
Line_68 $$ if (statement == null) -->Line_69 $$ return[ CD ]
Line_35 $$ if (builder == null) -->Line_36 $$ return[ CD ]
Line_34 $$ builder = buildStringExpression(initializer, new StringBuilder())-->Line_63 $$ final String expressionText = builder.toString().trim()[ FD ]
Line_53 $$ final PsiCodeBlock codeBlock = PsiTreeUtil.getParentOfType(variable, PsiCodeBlock.class)-->Line_83 $$ codeBlock.addBefore(newStatement, statement)[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_66 $$ if (useVariable) [ CD ]
Line_34 $$ builder = buildStringExpression(initializer, new StringBuilder())-->Line_48 $$ builder = new StringBuilder(arguments[0].getText())[ FD ]
Line_27 $$ final PsiExpression initializer = variable.getInitializer()-->Line_34 $$ builder = buildStringExpression(initializer, new StringBuilder())[ FD ]
Line_72 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)-->Line_82 $$ final PsiStatement newStatement = factory.createStatementFromText(statementText.toString(), variable)[ FD ]
Line_66 $$ if (useVariable) -->Line_67 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(variable, PsiStatement.class)[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_28 $$ if (initializer == null) [ CD ]
Line_31 $$ final StringBuilder builder-->Line_35 $$ if (builder == null) [ FD ]
Line_19 $$ final String variableName = variable.getName()-->Line_85 $$ PsiReplacementUtil.replaceExpression(lastExpression, variableName)[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_72 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)[ FD ]
Line_64 $$ final PsiMethodCallExpression lastExpression = expressions.get(expressions.size() - 1)-->Line_65 $$ final boolean useVariable = expressionText.contains("\n") && !isVariableInitializer(lastExpression)[ FD ]
Line_38 $$ if (initializer instanceof PsiNewExpression) -->Line_41 $$ if (argumentList == null) [ CD ]
Line_63 $$ final String expressionText = builder.toString().trim()-->Line_65 $$ final boolean useVariable = expressionText.contains("\n") && !isVariableInitializer(lastExpression)[ FD ]
Line_27 $$ final PsiExpression initializer = variable.getInitializer()-->Line_32 $$ if (isAppendCall(initializer)) [ FD ]
Line_18 $$ final PsiVariable variable = (PsiVariable) parent-->Line_67 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(variable, PsiStatement.class)[ FD ]
Line_73 $$ final StringBuilder statementText = new StringBuilder(modifier).append(CommonClassNames.JAVA_LANG_STRING).append(' ').append(variableName).append("=")-->Line_78 $$ statementText.append(sibling.getText())[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_62 $$ final List<PsiMethodCallExpression> expressions = visitor.getExpressions()[ CD ]
Line_38 $$ if (initializer instanceof PsiNewExpression) -->Line_45 $$ if (arguments.length == 0 || PsiType.INT.equals(arguments[0].getType())) [ CD ]
Line_62 $$ final List<PsiMethodCallExpression> expressions = visitor.getExpressions()-->Line_97 $$ expressions.get(i).getParent().delete()[ FD ]
Line_62 $$ final List<PsiMethodCallExpression> expressions = visitor.getExpressions()-->Line_96 $$ for (int i = 0, size = expressions.size() - 1; i < size; i++) [ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_53 $$ final PsiCodeBlock codeBlock = PsiTreeUtil.getParentOfType(variable, PsiCodeBlock.class)[ CD ]
Line_32 $$ if (isAppendCall(initializer)) -->Line_33 $$ collectComments(parent)[ CD ]
Line_9 $$ final StringBuilder stringExpression = buildStringExpression(stringBuilderExpression, new StringBuilder())-->Line_13 $$ PsiReplacementUtil.replaceExpression(stringBuilderExpression, stringExpression.toString())[ FD ]
Line_3 $$ final PsiElement element = descriptor.getPsiElement()-->Line_4 $$ final PsiElement parent = element.getParent()[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_96 $$ for (int i = 0, size = expressions.size() - 1; i < size; i++) [ CD ]
Line_76 $$ final PsiElement sibling = comment.getNextSibling()-->Line_78 $$ statementText.append(sibling.getText())[ FD ]
Line_40 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()-->Line_44 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_7 $$ final PsiExpression stringBuilderExpression = getCompleteExpression(parent)-->Line_8 $$ collectComments(stringBuilderExpression)[ FD ]
Line_10 $$ if (stringExpression != null && stringBuilderExpression != null) -->Line_13 $$ PsiReplacementUtil.replaceExpression(stringBuilderExpression, stringExpression.toString())[ CD ]
Line_66 $$ if (useVariable) -->Line_93 $$ PsiReplacementUtil.replaceExpression(lastExpression, expressionText)[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_3 $$ final PsiElement element = descriptor.getPsiElement()[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_59 $$ if (visitor.hadProblem()) [ CD ]
Line_45 $$ if (arguments.length == 0 || PsiType.INT.equals(arguments[0].getType())) -->Line_48 $$ builder = new StringBuilder(arguments[0].getText())[ CD ]
Line_62 $$ final List<PsiMethodCallExpression> expressions = visitor.getExpressions()-->Line_64 $$ final PsiMethodCallExpression lastExpression = expressions.get(expressions.size() - 1)[ FD ]
Line_40 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()-->Line_41 $$ if (argumentList == null) [ FD ]
Line_6 $$ if (parent instanceof PsiNewExpression) -->Line_9 $$ final StringBuilder stringExpression = buildStringExpression(stringBuilderExpression, new StringBuilder())[ CD ]
Line_48 $$ builder = new StringBuilder(arguments[0].getText())-->Line_63 $$ final String expressionText = builder.toString().trim()[ FD ]
Line_18 $$ final PsiVariable variable = (PsiVariable) parent-->Line_27 $$ final PsiExpression initializer = variable.getInitializer()[ FD ]
Line_34 $$ builder = buildStringExpression(initializer, new StringBuilder())-->Line_35 $$ if (builder == null) [ FD ]
Line_67 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(variable, PsiStatement.class)-->Line_91 $$ addLeadingCommentsBefore(statement)[ FD ]
Line_67 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(variable, PsiStatement.class)-->Line_68 $$ if (statement == null) [ FD ]
Line_7 $$ final PsiExpression stringBuilderExpression = getCompleteExpression(parent)-->Line_11 $$ addLeadingCommentsBefore(stringBuilderExpression)[ FD ]
Line_27 $$ final PsiExpression initializer = variable.getInitializer()-->Line_28 $$ if (initializer == null) [ FD ]
Line_46 $$ builder = new StringBuilder()-->Line_48 $$ builder = new StringBuilder(arguments[0].getText())[ FD ]
Line_67 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(variable, PsiStatement.class)-->Line_92 $$ addTrailingCommentsAfter(statement)[ FD ]
Line_32 $$ if (isAppendCall(initializer)) -->Line_34 $$ builder = buildStringExpression(initializer, new StringBuilder())[ CD ]
Line_53 $$ final PsiCodeBlock codeBlock = PsiTreeUtil.getParentOfType(variable, PsiCodeBlock.class)-->Line_54 $$ if (codeBlock == null) [ FD ]
Line_18 $$ final PsiVariable variable = (PsiVariable) parent-->Line_82 $$ final PsiStatement newStatement = factory.createStatementFromText(statementText.toString(), variable)[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_4 $$ final PsiElement parent = element.getParent()[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_95 $$ variable.delete()[ CD ]
Line_7 $$ final PsiExpression stringBuilderExpression = getCompleteExpression(parent)-->Line_12 $$ addTrailingCommentsAfter(stringBuilderExpression)[ FD ]
Line_6 $$ if (parent instanceof PsiNewExpression) -->Line_8 $$ collectComments(stringBuilderExpression)[ CD ]
Line_27 $$ final PsiExpression initializer = variable.getInitializer()-->Line_38 $$ if (initializer instanceof PsiNewExpression) [ FD ]
Line_32 $$ if (isAppendCall(initializer)) -->Line_38 $$ if (initializer instanceof PsiNewExpression) [ CD ]
Line_74 $$ for (PsiComment comment : leadingComments) -->Line_75 $$ statementText.append(comment.getText())[ FD ]
Line_59 $$ if (visitor.hadProblem()) -->Line_60 $$ return[ CD ]
Line_5 $$ if (!(parent instanceof PsiVariable)) -->Line_16 $$ return[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_58 $$ codeBlock.accept(visitor)[ CD ]
Line_10 $$ if (stringExpression != null && stringBuilderExpression != null) -->Line_11 $$ addLeadingCommentsBefore(stringBuilderExpression)[ CD ]
Line_67 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(variable, PsiStatement.class)-->Line_88 $$ if (statement == null) [ FD ]
Line_24 $$ if (originalTypeElement == null) -->Line_25 $$ return[ CD ]
Line_4 $$ final PsiElement parent = element.getParent()-->Line_33 $$ collectComments(parent)[ FD ]
Line_19 $$ final String variableName = variable.getName()-->Line_73 $$ final StringBuilder statementText = new StringBuilder(modifier).append(CommonClassNames.JAVA_LANG_STRING).append(' ').append(variableName).append("=")[ FD ]
Line_7 $$ final PsiExpression stringBuilderExpression = getCompleteExpression(parent)-->Line_9 $$ final StringBuilder stringExpression = buildStringExpression(stringBuilderExpression, new StringBuilder())[ FD ]
Line_67 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(variable, PsiStatement.class)-->Line_83 $$ codeBlock.addBefore(newStatement, statement)[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_3 $$ final PsiElement element = descriptor.getPsiElement()[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_63 $$ final String expressionText = builder.toString().trim()[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_65 $$ final boolean useVariable = expressionText.contains("\n") && !isVariableInitializer(lastExpression)[ CD ]
Line_54 $$ if (codeBlock == null) -->Line_55 $$ return[ CD ]
Line_38 $$ if (initializer instanceof PsiNewExpression) -->Line_39 $$ final PsiNewExpression newExpression = (PsiNewExpression) initializer[ CD ]
Line_57 $$ final StringBuildingVisitor visitor = new StringBuildingVisitor(variable, builder)-->Line_59 $$ if (visitor.hadProblem()) [ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_27 $$ final PsiExpression initializer = variable.getInitializer()[ CD ]
Line_6 $$ if (parent instanceof PsiNewExpression) -->Line_10 $$ if (stringExpression != null && stringBuilderExpression != null) [ CD ]
Line_66 $$ if (useVariable) -->Line_82 $$ final PsiStatement newStatement = factory.createStatementFromText(statementText.toString(), variable)[ CD ]
Line_5 $$ if (!(parent instanceof PsiVariable)) -->Line_6 $$ if (parent instanceof PsiNewExpression) [ CD ]
Line_18 $$ final PsiVariable variable = (PsiVariable) parent-->Line_53 $$ final PsiCodeBlock codeBlock = PsiTreeUtil.getParentOfType(variable, PsiCodeBlock.class)[ FD ]
Line_38 $$ if (initializer instanceof PsiNewExpression) -->Line_51 $$ return[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_64 $$ final PsiMethodCallExpression lastExpression = expressions.get(expressions.size() - 1)[ CD ]
Line_38 $$ if (initializer instanceof PsiNewExpression) -->Line_44 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_28 $$ if (initializer == null) -->Line_29 $$ return[ CD ]
Line_46 $$ builder = new StringBuilder()-->Line_63 $$ final String expressionText = builder.toString().trim()[ FD ]
Line_73 $$ final StringBuilder statementText = new StringBuilder(modifier).append(CommonClassNames.JAVA_LANG_STRING).append(' ').append(variableName).append("=")-->Line_82 $$ final PsiStatement newStatement = factory.createStatementFromText(statementText.toString(), variable)[ FD ]
Line_66 $$ if (useVariable) -->Line_81 $$ statementText.append(expressionText).append(';')[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_24 $$ if (originalTypeElement == null) [ CD ]
Line_6 $$ if (parent instanceof PsiNewExpression) -->Line_7 $$ final PsiExpression stringBuilderExpression = getCompleteExpression(parent)[ CD ]
Line_7 $$ final PsiExpression stringBuilderExpression = getCompleteExpression(parent)-->Line_13 $$ PsiReplacementUtil.replaceExpression(stringBuilderExpression, stringExpression.toString())[ FD ]
Line_31 $$ final StringBuilder builder-->Line_48 $$ builder = new StringBuilder(arguments[0].getText())[ FD ]
Line_57 $$ final StringBuildingVisitor visitor = new StringBuildingVisitor(variable, builder)-->Line_62 $$ final List<PsiMethodCallExpression> expressions = visitor.getExpressions()[ FD ]
Line_66 $$ if (useVariable) -->Line_92 $$ addTrailingCommentsAfter(statement)[ CD ]
Line_66 $$ if (useVariable) -->Line_72 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)[ CD ]
Line_64 $$ final PsiMethodCallExpression lastExpression = expressions.get(expressions.size() - 1)-->Line_93 $$ PsiReplacementUtil.replaceExpression(lastExpression, expressionText)[ FD ]
Line_66 $$ if (useVariable) -->Line_73 $$ final StringBuilder statementText = new StringBuilder(modifier).append(CommonClassNames.JAVA_LANG_STRING).append(' ').append(variableName).append("=")[ CD ]
Line_31 $$ final StringBuilder builder-->Line_46 $$ builder = new StringBuilder()[ FD ]
Line_20 $$ if (variableName == null) -->Line_21 $$ return[ CD ]
Line_76 $$ final PsiElement sibling = comment.getNextSibling()-->Line_77 $$ if (sibling instanceof PsiWhiteSpace) [ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) -->Line_32 $$ if (isAppendCall(initializer)) [ CD ]
