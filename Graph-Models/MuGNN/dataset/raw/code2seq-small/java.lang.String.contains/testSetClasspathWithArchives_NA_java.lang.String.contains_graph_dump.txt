Line_11 $$ String testTGZQualifiedPath = FileSystem.getLocal(conf).makeQualified(new Path(testTGZ.getAbsolutePath())).toString()-->Line_12 $$ conf.set(MRJobConfig.CLASSPATH_ARCHIVES, testTGZQualifiedPath)[ FD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_17 $$ String confClasspath = job.getConfiguration().get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH))[ CD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_10 $$ conf = job.getConfiguration()[ CD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_12 $$ conf.set(MRJobConfig.CLASSPATH_ARCHIVES, testTGZQualifiedPath)[ CD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_21 $$ assertTrue(environment.get("CLASSPATH").contains(confClasspath))[ CD ]
Line_10 $$ conf = job.getConfiguration()-->Line_15 $$ MRApps.setClasspath(environment, conf)[ FD ]
Line_4 $$ FileOutputStream out = new FileOutputStream(testTGZ)-->Line_5 $$ out.write(0)[ FD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_9 $$ Job job = Job.getInstance(conf)[ FD ]
Line_14 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_15 $$ MRApps.setClasspath(environment, conf)[ FD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_13 $$ conf.set(MRJobConfig.CACHE_ARCHIVES, testTGZQualifiedPath + "#testTGZ")[ FD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_12 $$ conf.set(MRJobConfig.CLASSPATH_ARCHIVES, testTGZQualifiedPath)[ FD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_11 $$ String testTGZQualifiedPath = FileSystem.getLocal(conf).makeQualified(new Path(testTGZ.getAbsolutePath())).toString()[ CD ]
Line_9 $$ Job job = Job.getInstance(conf)-->Line_10 $$ conf = job.getConfiguration()[ FD ]
Line_4 $$ FileOutputStream out = new FileOutputStream(testTGZ)-->Line_6 $$ out.close()[ FD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_10 $$ conf = job.getConfiguration()[ FD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_4 $$ FileOutputStream out = new FileOutputStream(testTGZ)[ CD ]
Line_10 $$ conf = job.getConfiguration()-->Line_12 $$ conf.set(MRJobConfig.CLASSPATH_ARCHIVES, testTGZQualifiedPath)[ FD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_9 $$ Job job = Job.getInstance(conf)[ CD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_6 $$ out.close()[ CD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setBoolean(MRConfig.MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM, true)[ FD ]
Line_17 $$ String confClasspath = job.getConfiguration().get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH))-->Line_19 $$ confClasspath = confClasspath.replaceAll(",\\s*", ApplicationConstants.CLASS_PATH_SEPARATOR).trim()[ FD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_13 $$ conf.set(MRJobConfig.CACHE_ARCHIVES, testTGZQualifiedPath + "#testTGZ")[ CD ]
Line_10 $$ conf = job.getConfiguration()-->Line_13 $$ conf.set(MRJobConfig.CACHE_ARCHIVES, testTGZQualifiedPath + "#testTGZ")[ FD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_7 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_18 $$ if (confClasspath != null) [ CD ]
Line_9 $$ Job job = Job.getInstance(conf)-->Line_17 $$ String confClasspath = job.getConfiguration().get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH))[ FD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_5 $$ out.write(0)[ CD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_15 $$ MRApps.setClasspath(environment, conf)[ FD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_22 $$ assertTrue(environment.get("CLASSPATH").contains("testTGZ"))[ CD ]
Line_14 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_21 $$ assertTrue(environment.get("CLASSPATH").contains(confClasspath))[ FD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_11 $$ String testTGZQualifiedPath = FileSystem.getLocal(conf).makeQualified(new Path(testTGZ.getAbsolutePath())).toString()[ FD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_15 $$ MRApps.setClasspath(environment, conf)[ CD ]
Line_18 $$ if (confClasspath != null) -->Line_19 $$ confClasspath = confClasspath.replaceAll(",\\s*", ApplicationConstants.CLASS_PATH_SEPARATOR).trim()[ CD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_14 $$ Map<String, String> environment = new HashMap<String, String>()[ CD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_8 $$ conf.setBoolean(MRConfig.MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM, true)[ CD ]
Line_10 $$ conf = job.getConfiguration()-->Line_11 $$ String testTGZQualifiedPath = FileSystem.getLocal(conf).makeQualified(new Path(testTGZ.getAbsolutePath())).toString()[ FD ]
Line_17 $$ String confClasspath = job.getConfiguration().get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH))-->Line_21 $$ assertTrue(environment.get("CLASSPATH").contains(confClasspath))[ FD ]
Line_2 $$ public void testSetClasspathWithArchives() throws IOException -->Line_3 $$ File testTGZ = new File(testWorkDir, "test.tgz")[ CD ]
Line_17 $$ String confClasspath = job.getConfiguration().get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH))-->Line_18 $$ if (confClasspath != null) [ FD ]
Line_3 $$ File testTGZ = new File(testWorkDir, "test.tgz")-->Line_11 $$ String testTGZQualifiedPath = FileSystem.getLocal(conf).makeQualified(new Path(testTGZ.getAbsolutePath())).toString()[ FD ]
Line_19 $$ confClasspath = confClasspath.replaceAll(",\\s*", ApplicationConstants.CLASS_PATH_SEPARATOR).trim()-->Line_21 $$ assertTrue(environment.get("CLASSPATH").contains(confClasspath))[ FD ]
Line_14 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_22 $$ assertTrue(environment.get("CLASSPATH").contains("testTGZ"))[ FD ]
