Line_5 $$ Throwable t = null-->Line_12 $$ Assert.assertTrue(t.getMessage().contains(message))[ FD ]
Line_9 $$ t = thrown-->Line_12 $$ Assert.assertTrue(t.getMessage().contains(message))[ FD ]
Line_5 $$ Throwable t = null-->Line_9 $$ t = thrown[ FD ]
Line_2 $$ public void testRPCServiceExceptionUnwrapping() -->Line_11 $$ Assert.assertTrue(IOException.class.isInstance(t))[ CD ]
Line_2 $$ public void testRPCServiceExceptionUnwrapping() -->Line_5 $$ Throwable t = null[ CD ]
Line_9 $$ t = thrown-->Line_11 $$ Assert.assertTrue(IOException.class.isInstance(t))[ FD ]
Line_3 $$ String message = "ServiceExceptionMessage"-->Line_12 $$ Assert.assertTrue(t.getMessage().contains(message))[ FD ]
Line_2 $$ public void testRPCServiceExceptionUnwrapping() -->Line_4 $$ ServiceException se = new ServiceException(message)[ CD ]
Line_2 $$ public void testRPCServiceExceptionUnwrapping() -->Line_12 $$ Assert.assertTrue(t.getMessage().contains(message))[ CD ]
Line_2 $$ public void testRPCServiceExceptionUnwrapping() -->Line_3 $$ String message = "ServiceExceptionMessage"[ CD ]
Line_4 $$ ServiceException se = new ServiceException(message)-->Line_7 $$ RPCUtil.unwrapAndThrowException(se)[ FD ]
Line_5 $$ Throwable t = null-->Line_11 $$ Assert.assertTrue(IOException.class.isInstance(t))[ FD ]
