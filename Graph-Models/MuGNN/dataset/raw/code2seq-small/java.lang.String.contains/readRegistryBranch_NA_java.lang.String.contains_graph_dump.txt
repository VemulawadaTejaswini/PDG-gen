Line_5 $$ if (output != null) -->Line_6 $$ for (int pos = output.indexOf(location); pos != -1; pos = output.indexOf(location, pos + location.length())) [ CD ]
Line_4 $$ StringBuilder output = readRegistry("reg query \"" + location + "\" /s")-->Line_11 $$ String section = output.substring(pos + location.length() + 1, pos2)[ FD ]
Line_2 $$ public static List<String> readRegistryBranch(@NotNull String location) -->Line_8 $$ if (pos2 <= pos + location.length()) [ FD ]
Line_2 $$ public static List<String> readRegistryBranch(@NotNull String location) -->Line_5 $$ if (output != null) [ CD ]
Line_4 $$ StringBuilder output = readRegistry("reg query \"" + location + "\" /s")-->Line_6 $$ for (int pos = output.indexOf(location); pos != -1; pos = output.indexOf(location, pos + location.length())) [ FD ]
Line_7 $$ int pos2 = output.indexOf("\r\n", pos + location.length())-->Line_11 $$ String section = output.substring(pos + location.length() + 1, pos2)[ FD ]
Line_4 $$ StringBuilder output = readRegistry("reg query \"" + location + "\" /s")-->Line_7 $$ int pos2 = output.indexOf("\r\n", pos + location.length())[ FD ]
Line_3 $$ List<String> result = new ArrayList<String>()-->Line_13 $$ result.add(section)[ FD ]
Line_2 $$ public static List<String> readRegistryBranch(@NotNull String location) -->Line_7 $$ int pos2 = output.indexOf("\r\n", pos + location.length())[ FD ]
Line_2 $$ public static List<String> readRegistryBranch(@NotNull String location) -->Line_11 $$ String section = output.substring(pos + location.length() + 1, pos2)[ FD ]
Line_2 $$ public static List<String> readRegistryBranch(@NotNull String location) -->Line_6 $$ for (int pos = output.indexOf(location); pos != -1; pos = output.indexOf(location, pos + location.length())) [ FD ]
Line_2 $$ public static List<String> readRegistryBranch(@NotNull String location) -->Line_3 $$ List<String> result = new ArrayList<String>()[ CD ]
Line_7 $$ int pos2 = output.indexOf("\r\n", pos + location.length())-->Line_8 $$ if (pos2 <= pos + location.length()) [ FD ]
Line_12 $$ if (!section.contains("\\")) -->Line_13 $$ result.add(section)[ CD ]
Line_11 $$ String section = output.substring(pos + location.length() + 1, pos2)-->Line_13 $$ result.add(section)[ FD ]
Line_2 $$ public static List<String> readRegistryBranch(@NotNull String location) -->Line_17 $$ return result[ CD ]
Line_4 $$ StringBuilder output = readRegistry("reg query \"" + location + "\" /s")-->Line_5 $$ if (output != null) [ FD ]
Line_6 $$ for (int pos = output.indexOf(location); pos != -1; pos = output.indexOf(location, pos + location.length())) -->Line_7 $$ int pos2 = output.indexOf("\r\n", pos + location.length())[ CD ]
Line_2 $$ public static List<String> readRegistryBranch(@NotNull String location) -->Line_4 $$ StringBuilder output = readRegistry("reg query \"" + location + "\" /s")[ CD ]
Line_6 $$ for (int pos = output.indexOf(location); pos != -1; pos = output.indexOf(location, pos + location.length())) -->Line_11 $$ String section = output.substring(pos + location.length() + 1, pos2)[ CD ]
Line_11 $$ String section = output.substring(pos + location.length() + 1, pos2)-->Line_12 $$ if (!section.contains("\\")) [ FD ]
Line_6 $$ for (int pos = output.indexOf(location); pos != -1; pos = output.indexOf(location, pos + location.length())) -->Line_8 $$ if (pos2 <= pos + location.length()) [ CD ]
Line_6 $$ for (int pos = output.indexOf(location); pos != -1; pos = output.indexOf(location, pos + location.length())) -->Line_12 $$ if (!section.contains("\\")) [ CD ]
