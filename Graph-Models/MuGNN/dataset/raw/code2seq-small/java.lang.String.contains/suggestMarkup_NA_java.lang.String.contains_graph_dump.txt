Line_26 $$ if (markup == null) -->Line_30 $$ if (!currentText.contains(fieldName)) [ CD ]
Line_26 $$ if (markup == null) -->Line_27 $$ result.put((ObjectReference) fieldValue, new ValueMarkup(fieldName, autoMarkupColor, createMarkupTooltipText(null, refType, fieldName)))[ CD ]
Line_2 $$ private static Map<ObjectReference, ValueMarkup> suggestMarkup(ObjectReference objRef) -->Line_4 $$ for (ObjectReference ref : getReferringObjects(objRef)) [ FD ]
Line_8 $$ final ReferenceType refType = ((ClassObjectReference) ref).reflectedType()-->Line_32 $$ final String tooltip = createMarkupTooltipText(currentTooltip, refType, fieldName)[ FD ]
Line_24 $$ final String fieldName = field.name()-->Line_32 $$ final String tooltip = createMarkupTooltipText(currentTooltip, refType, fieldName)[ FD ]
Line_30 $$ if (!currentText.contains(fieldName)) -->Line_31 $$ final String currentTooltip = markup.getToolTipText()[ CD ]
Line_3 $$ final Map<ObjectReference, ValueMarkup> result = new HashMap<ObjectReference, ValueMarkup>()-->Line_33 $$ result.put((ObjectReference) fieldValue, new ValueMarkup(currentText + ", " + fieldName, autoMarkupColor, tooltip))[ FD ]
Line_26 $$ if (markup == null) -->Line_29 $$ final String currentText = markup.getText()[ CD ]
Line_31 $$ final String currentTooltip = markup.getToolTipText()-->Line_32 $$ final String tooltip = createMarkupTooltipText(currentTooltip, refType, fieldName)[ FD ]
Line_12 $$ for (Field field : refType.visibleFields()) -->Line_19 $$ final Value fieldValue = refType.getValue(field)[ FD ]
Line_29 $$ final String currentText = markup.getText()-->Line_30 $$ if (!currentText.contains(fieldName)) [ FD ]
Line_8 $$ final ReferenceType refType = ((ClassObjectReference) ref).reflectedType()-->Line_9 $$ if (!refType.isAbstract()) [ FD ]
Line_23 $$ final ValueMarkup markup = result.get((ObjectReference) fieldValue)-->Line_26 $$ if (markup == null) [ FD ]
Line_12 $$ for (Field field : refType.visibleFields()) -->Line_16 $$ if (DebuggerUtils.isPrimitiveType(field.typeName())) [ FD ]
Line_30 $$ if (!currentText.contains(fieldName)) -->Line_32 $$ final String tooltip = createMarkupTooltipText(currentTooltip, refType, fieldName)[ CD ]
Line_2 $$ private static Map<ObjectReference, ValueMarkup> suggestMarkup(ObjectReference objRef) -->Line_38 $$ return result[ CD ]
Line_12 $$ for (Field field : refType.visibleFields()) -->Line_24 $$ final String fieldName = field.name()[ FD ]
Line_30 $$ if (!currentText.contains(fieldName)) -->Line_33 $$ result.put((ObjectReference) fieldValue, new ValueMarkup(currentText + ", " + fieldName, autoMarkupColor, tooltip))[ CD ]
Line_8 $$ final ReferenceType refType = ((ClassObjectReference) ref).reflectedType()-->Line_19 $$ final Value fieldValue = refType.getValue(field)[ FD ]
Line_3 $$ final Map<ObjectReference, ValueMarkup> result = new HashMap<ObjectReference, ValueMarkup>()-->Line_27 $$ result.put((ObjectReference) fieldValue, new ValueMarkup(fieldName, autoMarkupColor, createMarkupTooltipText(null, refType, fieldName)))[ FD ]
Line_12 $$ for (Field field : refType.visibleFields()) -->Line_13 $$ if (!(field.isStatic() && field.isFinal())) [ FD ]
Line_23 $$ final ValueMarkup markup = result.get((ObjectReference) fieldValue)-->Line_29 $$ final String currentText = markup.getText()[ FD ]
Line_24 $$ final String fieldName = field.name()-->Line_30 $$ if (!currentText.contains(fieldName)) [ FD ]
Line_3 $$ final Map<ObjectReference, ValueMarkup> result = new HashMap<ObjectReference, ValueMarkup>()-->Line_23 $$ final ValueMarkup markup = result.get((ObjectReference) fieldValue)[ FD ]
Line_24 $$ final String fieldName = field.name()-->Line_27 $$ result.put((ObjectReference) fieldValue, new ValueMarkup(fieldName, autoMarkupColor, createMarkupTooltipText(null, refType, fieldName)))[ FD ]
Line_8 $$ final ReferenceType refType = ((ClassObjectReference) ref).reflectedType()-->Line_27 $$ result.put((ObjectReference) fieldValue, new ValueMarkup(fieldName, autoMarkupColor, createMarkupTooltipText(null, refType, fieldName)))[ FD ]
Line_2 $$ private static Map<ObjectReference, ValueMarkup> suggestMarkup(ObjectReference objRef) -->Line_3 $$ final Map<ObjectReference, ValueMarkup> result = new HashMap<ObjectReference, ValueMarkup>()[ CD ]
Line_23 $$ final ValueMarkup markup = result.get((ObjectReference) fieldValue)-->Line_31 $$ final String currentTooltip = markup.getToolTipText()[ FD ]
Line_8 $$ final ReferenceType refType = ((ClassObjectReference) ref).reflectedType()-->Line_12 $$ for (Field field : refType.visibleFields()) [ FD ]
