Line_6 $$ for (int i = listOfFiles.length - 1; i >= 0; i--) -->Line_8 $$ currentContainerLogFileIndex = i[ FD ]
Line_21 $$ String sCurrentLine-->Line_24 $$ while ((sCurrentLine = br.readLine()) != null) [ FD ]
Line_16 $$ for (File output : containerFiles[i].listFiles()) -->Line_38 $$ if (Shell.WINDOWS && !count && output.getName().trim().equals("stdout")) [ FD ]
Line_30 $$ if (!Shell.WINDOWS) -->Line_32 $$ numOfline++[ CD ]
Line_29 $$ if (output.getName().trim().equals("stdout")) -->Line_30 $$ if (!Shell.WINDOWS) [ CD ]
Line_22 $$ br = new BufferedReader(new FileReader(output))-->Line_24 $$ while ((sCurrentLine = br.readLine()) != null) [ FD ]
Line_7 $$ if (listOfFiles[i].listFiles().length == containerNum + 1) -->Line_8 $$ currentContainerLogFileIndex = i[ CD ]
Line_18 $$ BufferedReader br = null-->Line_45 $$ if (br != null)[ FD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_14 $$ int numOfWords = 0[ CD ]
Line_22 $$ br = new BufferedReader(new FileReader(output))-->Line_46 $$ br.close()[ FD ]
Line_30 $$ if (!Shell.WINDOWS) -->Line_31 $$ Assert.assertEquals("The current is" + sCurrentLine, expectedContent.get(numOfline), sCurrentLine.trim())[ CD ]
Line_23 $$ int numOfline = 0-->Line_31 $$ Assert.assertEquals("The current is" + sCurrentLine, expectedContent.get(numOfline), sCurrentLine.trim())[ FD ]
Line_18 $$ BufferedReader br = null-->Line_24 $$ while ((sCurrentLine = br.readLine()) != null) [ FD ]
Line_16 $$ for (File output : containerFiles[i].listFiles()) -->Line_17 $$ if (output.getName().trim().contains("stdout")) [ FD ]
Line_21 $$ String sCurrentLine-->Line_26 $$ if (sCurrentLine.contains(expectedWord)) [ FD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_5 $$ int currentContainerLogFileIndex = -1[ CD ]
Line_18 $$ BufferedReader br = null-->Line_46 $$ br.close()[ FD ]
Line_5 $$ int currentContainerLogFileIndex = -1-->Line_8 $$ currentContainerLogFileIndex = i[ FD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_15 $$ for (int i = 0; i < containerFiles.length; i++) [ CD ]
Line_38 $$ if (Shell.WINDOWS && !count && output.getName().trim().equals("stdout")) -->Line_39 $$ Assert.assertTrue(stdOutContent.containsAll(expectedContent))[ CD ]
Line_23 $$ int numOfline = 0-->Line_32 $$ numOfline++[ FD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_6 $$ for (int i = listOfFiles.length - 1; i >= 0; i--) [ CD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_13 $$ File[] containerFiles = listOfFiles[currentContainerLogFileIndex].listFiles()[ CD ]
Line_21 $$ String sCurrentLine-->Line_31 $$ Assert.assertEquals("The current is" + sCurrentLine, expectedContent.get(numOfline), sCurrentLine.trim())[ FD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_3 $$ File logFolder = new File(yarnCluster.getNodeManager(0).getConfig().get(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS))[ CD ]
Line_19 $$ List<String> stdOutContent = new ArrayList<String>()-->Line_34 $$ stdOutContent.add(sCurrentLine.trim())[ FD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_31 $$ Assert.assertEquals("The current is" + sCurrentLine, expectedContent.get(numOfline), sCurrentLine.trim())[ FD ]
Line_3 $$ File logFolder = new File(yarnCluster.getNodeManager(0).getConfig().get(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS))-->Line_4 $$ File[] listOfFiles = logFolder.listFiles()[ FD ]
Line_17 $$ if (output.getName().trim().contains("stdout")) -->Line_18 $$ BufferedReader br = null[ CD ]
Line_16 $$ for (File output : containerFiles[i].listFiles()) -->Line_29 $$ if (output.getName().trim().equals("stdout")) [ FD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_38 $$ if (Shell.WINDOWS && !count && output.getName().trim().equals("stdout")) [ FD ]
Line_26 $$ if (sCurrentLine.contains(expectedWord)) -->Line_27 $$ numOfWords++[ CD ]
Line_25 $$ if (count) -->Line_26 $$ if (sCurrentLine.contains(expectedWord)) [ CD ]
Line_24 $$ while ((sCurrentLine = br.readLine()) != null) -->Line_31 $$ Assert.assertEquals("The current is" + sCurrentLine, expectedContent.get(numOfline), sCurrentLine.trim())[ FD ]
Line_25 $$ if (count) -->Line_29 $$ if (output.getName().trim().equals("stdout")) [ CD ]
Line_30 $$ if (!Shell.WINDOWS) -->Line_34 $$ stdOutContent.add(sCurrentLine.trim())[ CD ]
Line_21 $$ String sCurrentLine-->Line_34 $$ stdOutContent.add(sCurrentLine.trim())[ FD ]
Line_18 $$ BufferedReader br = null-->Line_22 $$ br = new BufferedReader(new FileReader(output))[ FD ]
Line_6 $$ for (int i = listOfFiles.length - 1; i >= 0; i--) -->Line_7 $$ if (listOfFiles[i].listFiles().length == containerNum + 1) [ CD ]
Line_17 $$ if (output.getName().trim().contains("stdout")) -->Line_19 $$ List<String> stdOutContent = new ArrayList<String>()[ CD ]
Line_24 $$ while ((sCurrentLine = br.readLine()) != null) -->Line_25 $$ if (count) [ CD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_26 $$ if (sCurrentLine.contains(expectedWord)) [ FD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_12 $$ Assert.assertTrue(currentContainerLogFileIndex != -1)[ CD ]
Line_19 $$ List<String> stdOutContent = new ArrayList<String>()-->Line_39 $$ Assert.assertTrue(stdOutContent.containsAll(expectedContent))[ FD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_54 $$ return numOfWords[ CD ]
Line_45 $$ if (br != null)-->Line_46 $$ br.close()[ CD ]
Line_14 $$ int numOfWords = 0-->Line_27 $$ numOfWords++[ FD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_39 $$ Assert.assertTrue(stdOutContent.containsAll(expectedContent))[ FD ]
Line_22 $$ br = new BufferedReader(new FileReader(output))-->Line_45 $$ if (br != null)[ FD ]
Line_2 $$ private int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord) -->Line_4 $$ File[] listOfFiles = logFolder.listFiles()[ CD ]
Line_24 $$ while ((sCurrentLine = br.readLine()) != null) -->Line_26 $$ if (sCurrentLine.contains(expectedWord)) [ FD ]
Line_6 $$ for (int i = listOfFiles.length - 1; i >= 0; i--) -->Line_15 $$ for (int i = 0; i < containerFiles.length; i++) [ FD ]
Line_24 $$ while ((sCurrentLine = br.readLine()) != null) -->Line_34 $$ stdOutContent.add(sCurrentLine.trim())[ FD ]
