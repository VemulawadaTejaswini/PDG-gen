Line_15 $$ if (content.contains("ProxyFactory.newServiceTrackedInstance(")) -->Line_16 $$ processErrorMessage(fileName, "Do not use ProxyFactory.newServiceTrackedInstance in " + "modules: " + fileName)[ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_4 $$ if (absolutePath.contains("/src/testIntegration/java/") || absolutePath.contains("/test/integration/")) [ FD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_15 $$ if (content.contains("ProxyFactory.newServiceTrackedInstance(")) [ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_21 $$ if (!absolutePath.contains("/modules/core/") && !absolutePath.contains("/test/") && !absolutePath.contains("/testIntegration/") && content.contains("import com.liferay.registry.Registry")) [ FD ]
Line_4 $$ if (absolutePath.contains("/src/testIntegration/java/") || absolutePath.contains("/test/integration/")) -->Line_11 $$ if ((absolutePath.contains("/test/unit/") || absolutePath.contains("/src/test/java/")) && packagePath.endsWith(".test")) [ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_15 $$ if (content.contains("ProxyFactory.newServiceTrackedInstance(")) [ FD ]
Line_24 $$ if (!absolutePath.contains("/test/") && content.contains("@Meta.OCD") && !content.contains("@ConfigurationAdmin")) -->Line_25 $$ processErrorMessage(fileName, "Specify category using @ConfigurationAdmin: " + fileName)[ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_5 $$ if (content.contains("@RunWith(Arquillian.class)") && content.contains("import org.powermock.")) [ FD ]
Line_19 $$ content = formatOSGIComponents(fileName, absolutePath, content)-->Line_21 $$ if (!absolutePath.contains("/modules/core/") && !absolutePath.contains("/test/") && !absolutePath.contains("/testIntegration/") && content.contains("import com.liferay.registry.Registry")) [ FD ]
Line_4 $$ if (absolutePath.contains("/src/testIntegration/java/") || absolutePath.contains("/test/integration/")) -->Line_5 $$ if (content.contains("@RunWith(Arquillian.class)") && content.contains("import org.powermock.")) [ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_12 $$ processErrorMessage(fileName, "Module unit test should not be under a test subpackage" + fileName)[ FD ]
Line_8 $$ if (!packagePath.endsWith(".test")) -->Line_9 $$ processErrorMessage(fileName, "Module integration test must be under a test " + "subpackage" + fileName)[ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_6 $$ processErrorMessage(fileName, "Do not use PowerMock inside Arquillian tests: " + fileName)[ FD ]
Line_4 $$ if (absolutePath.contains("/src/testIntegration/java/") || absolutePath.contains("/test/integration/")) -->Line_8 $$ if (!packagePath.endsWith(".test")) [ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_19 $$ content = formatOSGIComponents(fileName, absolutePath, content)[ FD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_27 $$ return content[ CD ]
Line_21 $$ if (!absolutePath.contains("/modules/core/") && !absolutePath.contains("/test/") && !absolutePath.contains("/testIntegration/") && content.contains("import com.liferay.registry.Registry")) -->Line_22 $$ processErrorMessage(fileName, "Do not use Registry in modules: " + fileName)[ CD ]
Line_5 $$ if (content.contains("@RunWith(Arquillian.class)") && content.contains("import org.powermock.")) -->Line_6 $$ processErrorMessage(fileName, "Do not use PowerMock inside Arquillian tests: " + fileName)[ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_18 $$ if (content.contains("@Component")) [ FD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_24 $$ if (!absolutePath.contains("/test/") && content.contains("@Meta.OCD") && !content.contains("@ConfigurationAdmin")) [ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_3 $$ if (fileName.endsWith("Test.java")) [ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_11 $$ if ((absolutePath.contains("/test/unit/") || absolutePath.contains("/src/test/java/")) && packagePath.endsWith(".test")) [ FD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_16 $$ processErrorMessage(fileName, "Do not use ProxyFactory.newServiceTrackedInstance in " + "modules: " + fileName)[ FD ]
Line_19 $$ content = formatOSGIComponents(fileName, absolutePath, content)-->Line_24 $$ if (!absolutePath.contains("/test/") && content.contains("@Meta.OCD") && !content.contains("@ConfigurationAdmin")) [ FD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_22 $$ processErrorMessage(fileName, "Do not use Registry in modules: " + fileName)[ FD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_9 $$ processErrorMessage(fileName, "Module integration test must be under a test " + "subpackage" + fileName)[ FD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_21 $$ if (!absolutePath.contains("/modules/core/") && !absolutePath.contains("/test/") && !absolutePath.contains("/testIntegration/") && content.contains("import com.liferay.registry.Registry")) [ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_3 $$ if (fileName.endsWith("Test.java")) [ FD ]
Line_11 $$ if ((absolutePath.contains("/test/unit/") || absolutePath.contains("/src/test/java/")) && packagePath.endsWith(".test")) -->Line_12 $$ processErrorMessage(fileName, "Module unit test should not be under a test subpackage" + fileName)[ CD ]
Line_3 $$ if (fileName.endsWith("Test.java")) -->Line_4 $$ if (absolutePath.contains("/src/testIntegration/java/") || absolutePath.contains("/test/integration/")) [ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_25 $$ processErrorMessage(fileName, "Specify category using @ConfigurationAdmin: " + fileName)[ FD ]
Line_18 $$ if (content.contains("@Component")) -->Line_19 $$ content = formatOSGIComponents(fileName, absolutePath, content)[ CD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_8 $$ if (!packagePath.endsWith(".test")) [ FD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_24 $$ if (!absolutePath.contains("/test/") && content.contains("@Meta.OCD") && !content.contains("@ConfigurationAdmin")) [ FD ]
Line_2 $$ protected String formatModulesFile(String fileName, String absolutePath, String packagePath, String content) -->Line_18 $$ if (content.contains("@Component")) [ CD ]
