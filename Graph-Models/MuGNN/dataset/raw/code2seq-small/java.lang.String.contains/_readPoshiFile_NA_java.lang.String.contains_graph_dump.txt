Line_6 $$ Element rootElement = PoshiRunnerGetterUtil.getRootElementFromFilePath(filePath)-->Line_7 $$ _rootElements.put(classType + "#" + className, rootElement)[ FD ]
Line_5 $$ if (classType.equals("action") || classType.equals("function") || classType.equals("macro") || classType.equals("test-case")) -->Line_51 $$ if (classType.equals("path")) [ CD ]
Line_3 $$ String className = PoshiRunnerGetterUtil.getClassNameFromFilePath(filePath)-->Line_52 $$ _readPathFile(filePath, className, null)[ FD ]
Line_2 $$ private static void _readPoshiFile(String filePath) throws Exception -->Line_3 $$ String className = PoshiRunnerGetterUtil.getClassNameFromFilePath(filePath)[ FD ]
Line_3 $$ String className = PoshiRunnerGetterUtil.getClassNameFromFilePath(filePath)-->Line_47 $$ _functionLocatorCounts.put(className, i)[ FD ]
Line_6 $$ Element rootElement = PoshiRunnerGetterUtil.getRootElementFromFilePath(filePath)-->Line_35 $$ String defaultClassCommandName = className + "#" + rootElement.attributeValue("default")[ FD ]
Line_35 $$ String defaultClassCommandName = className + "#" + rootElement.attributeValue("default")-->Line_38 $$ _commandSummaries.put(classType + "#" + className, _getCommandSummary(defaultClassCommandName, classType, defaultCommandElement))[ FD ]
Line_8 $$ if (classType.equals("test-case")) -->Line_9 $$ _testCaseClassNames.add(className)[ CD ]
Line_5 $$ if (classType.equals("action") || classType.equals("function") || classType.equals("macro") || classType.equals("test-case")) -->Line_7 $$ _rootElements.put(classType + "#" + className, rootElement)[ CD ]
Line_2 $$ private static void _readPoshiFile(String filePath) throws Exception -->Line_6 $$ Element rootElement = PoshiRunnerGetterUtil.getRootElementFromFilePath(filePath)[ FD ]
Line_12 $$ Element setUpElement = rootElement.element("set-up")-->Line_14 $$ _commandElements.put(classType + "#" + classCommandName, setUpElement)[ FD ]
Line_11 $$ if (rootElement.element("set-up") != null) -->Line_14 $$ _commandElements.put(classType + "#" + classCommandName, setUpElement)[ CD ]
Line_2 $$ private static void _readPoshiFile(String filePath) throws Exception -->Line_4 $$ String classType = PoshiRunnerGetterUtil.getClassTypeFromFilePath(filePath)[ CD ]
Line_5 $$ if (classType.equals("action") || classType.equals("function") || classType.equals("macro") || classType.equals("test-case")) -->Line_16 $$ if (rootElement.element("tear-down") != null) [ CD ]
Line_6 $$ Element rootElement = PoshiRunnerGetterUtil.getRootElementFromFilePath(filePath)-->Line_16 $$ if (rootElement.element("tear-down") != null) [ FD ]
Line_17 $$ Element tearDownElement = rootElement.element("tear-down")-->Line_19 $$ _commandElements.put(classType + "#" + classCommandName, tearDownElement)[ FD ]
Line_5 $$ if (classType.equals("action") || classType.equals("function") || classType.equals("macro") || classType.equals("test-case")) -->Line_21 $$ List<Element> commandElements = rootElement.elements("command")[ CD ]
Line_36 $$ Element defaultCommandElement = getFunctionCommandElement(defaultClassCommandName)-->Line_37 $$ _commandElements.put(classType + "#" + className, defaultCommandElement)[ FD ]
Line_40 $$ for (int i = 1; ; i++) -->Line_44 $$ if (i > 1) [ CD ]
Line_11 $$ if (rootElement.element("set-up") != null) -->Line_13 $$ String classCommandName = className + "#set-up"[ CD ]
Line_6 $$ Element rootElement = PoshiRunnerGetterUtil.getRootElementFromFilePath(filePath)-->Line_12 $$ Element setUpElement = rootElement.element("set-up")[ FD ]
Line_34 $$ if (classType.equals("function")) -->Line_40 $$ for (int i = 1; ; i++) [ CD ]
Line_6 $$ Element rootElement = PoshiRunnerGetterUtil.getRootElementFromFilePath(filePath)-->Line_39 $$ String xml = rootElement.asXML()[ FD ]
Line_22 $$ for (Element commandElement : commandElements) -->Line_30 $$ if (Validator.equals(classType, "test-case") && Validator.isNotNull(commandElement.attributeValue("description"))) [ FD ]
Line_34 $$ if (classType.equals("function")) -->Line_35 $$ String defaultClassCommandName = className + "#" + rootElement.attributeValue("default")[ CD ]
Line_39 $$ String xml = rootElement.asXML()-->Line_41 $$ if (xml.contains("$[ FD ]
Line_16 $$ if (rootElement.element("tear-down") != null) -->Line_17 $$ Element tearDownElement = rootElement.element("tear-down")[ CD ]
Line_16 $$ if (rootElement.element("tear-down") != null) -->Line_19 $$ _commandElements.put(classType + "#" + classCommandName, tearDownElement)[ CD ]
Line_11 $$ if (rootElement.element("set-up") != null) -->Line_12 $$ Element setUpElement = rootElement.element("set-up")[ CD ]
Line_4 $$ String classType = PoshiRunnerGetterUtil.getClassTypeFromFilePath(filePath)-->Line_34 $$ if (classType.equals("function")) [ FD ]
Line_36 $$ Element defaultCommandElement = getFunctionCommandElement(defaultClassCommandName)-->Line_38 $$ _commandSummaries.put(classType + "#" + className, _getCommandSummary(defaultClassCommandName, classType, defaultCommandElement))[ FD ]
Line_22 $$ for (Element commandElement : commandElements) -->Line_31 $$ _testCaseDescriptions.put(classCommandName, commandElement.attributeValue("description"))[ FD ]
Line_40 $$ for (int i = 1; ; i++) -->Line_45 $$ i--[ FD ]
Line_40 $$ for (int i = 1; ; i++) -->Line_47 $$ _functionLocatorCounts.put(className, i)[ CD ]
Line_22 $$ for (Element commandElement : commandElements) -->Line_27 $$ _commandElements.put(classType + "#" + classCommandName, commandElement)[ FD ]
Line_22 $$ for (Element commandElement : commandElements) -->Line_29 $$ _commandReturns.put(classType + "#" + classCommandName, _getCommandReturns(commandElement))[ FD ]
Line_40 $$ for (int i = 1; ; i++) -->Line_44 $$ if (i > 1) [ FD ]
Line_4 $$ String classType = PoshiRunnerGetterUtil.getClassTypeFromFilePath(filePath)-->Line_8 $$ if (classType.equals("test-case")) [ FD ]
Line_4 $$ String classType = PoshiRunnerGetterUtil.getClassTypeFromFilePath(filePath)-->Line_30 $$ if (Validator.equals(classType, "test-case") && Validator.isNotNull(commandElement.attributeValue("description"))) [ FD ]
Line_4 $$ String classType = PoshiRunnerGetterUtil.getClassTypeFromFilePath(filePath)-->Line_51 $$ if (classType.equals("path")) [ FD ]
Line_2 $$ private static void _readPoshiFile(String filePath) throws Exception -->Line_3 $$ String className = PoshiRunnerGetterUtil.getClassNameFromFilePath(filePath)[ CD ]
Line_5 $$ if (classType.equals("action") || classType.equals("function") || classType.equals("macro") || classType.equals("test-case")) -->Line_6 $$ Element rootElement = PoshiRunnerGetterUtil.getRootElementFromFilePath(filePath)[ CD ]
Line_3 $$ String className = PoshiRunnerGetterUtil.getClassNameFromFilePath(filePath)-->Line_9 $$ _testCaseClassNames.add(className)[ FD ]
Line_22 $$ for (Element commandElement : commandElements) -->Line_23 $$ String classCommandName = className + "#" + commandElement.attributeValue("name")[ FD ]
Line_13 $$ String classCommandName = className + "#set-up"-->Line_28 $$ _commandSummaries.put(classType + "#" + classCommandName, _getCommandSummary(classCommandName, classType, commandElement))[ FD ]
Line_34 $$ if (classType.equals("function")) -->Line_36 $$ Element defaultCommandElement = getFunctionCommandElement(defaultClassCommandName)[ CD ]
Line_2 $$ private static void _readPoshiFile(String filePath) throws Exception -->Line_5 $$ if (classType.equals("action") || classType.equals("function") || classType.equals("macro") || classType.equals("test-case")) [ CD ]
Line_4 $$ String classType = PoshiRunnerGetterUtil.getClassTypeFromFilePath(filePath)-->Line_5 $$ if (classType.equals("action") || classType.equals("function") || classType.equals("macro") || classType.equals("test-case")) [ FD ]
Line_34 $$ if (classType.equals("function")) -->Line_38 $$ _commandSummaries.put(classType + "#" + className, _getCommandSummary(defaultClassCommandName, classType, defaultCommandElement))[ CD ]
Line_44 $$ if (i > 1) -->Line_45 $$ i--[ CD ]
Line_35 $$ String defaultClassCommandName = className + "#" + rootElement.attributeValue("default")-->Line_36 $$ Element defaultCommandElement = getFunctionCommandElement(defaultClassCommandName)[ FD ]
Line_5 $$ if (classType.equals("action") || classType.equals("function") || classType.equals("macro") || classType.equals("test-case")) -->Line_11 $$ if (rootElement.element("set-up") != null) [ CD ]
Line_5 $$ if (classType.equals("action") || classType.equals("function") || classType.equals("macro") || classType.equals("test-case")) -->Line_34 $$ if (classType.equals("function")) [ CD ]
Line_30 $$ if (Validator.equals(classType, "test-case") && Validator.isNotNull(commandElement.attributeValue("description"))) -->Line_31 $$ _testCaseDescriptions.put(classCommandName, commandElement.attributeValue("description"))[ CD ]
Line_2 $$ private static void _readPoshiFile(String filePath) throws Exception -->Line_4 $$ String classType = PoshiRunnerGetterUtil.getClassTypeFromFilePath(filePath)[ FD ]
Line_6 $$ Element rootElement = PoshiRunnerGetterUtil.getRootElementFromFilePath(filePath)-->Line_11 $$ if (rootElement.element("set-up") != null) [ FD ]
Line_6 $$ Element rootElement = PoshiRunnerGetterUtil.getRootElementFromFilePath(filePath)-->Line_21 $$ List<Element> commandElements = rootElement.elements("command")[ FD ]
Line_6 $$ Element rootElement = PoshiRunnerGetterUtil.getRootElementFromFilePath(filePath)-->Line_17 $$ Element tearDownElement = rootElement.element("tear-down")[ FD ]
Line_22 $$ for (Element commandElement : commandElements) -->Line_28 $$ _commandSummaries.put(classType + "#" + classCommandName, _getCommandSummary(classCommandName, classType, commandElement))[ FD ]
Line_13 $$ String classCommandName = className + "#set-up"-->Line_31 $$ _testCaseDescriptions.put(classCommandName, commandElement.attributeValue("description"))[ FD ]
Line_34 $$ if (classType.equals("function")) -->Line_37 $$ _commandElements.put(classType + "#" + className, defaultCommandElement)[ CD ]
Line_5 $$ if (classType.equals("action") || classType.equals("function") || classType.equals("macro") || classType.equals("test-case")) -->Line_8 $$ if (classType.equals("test-case")) [ CD ]
Line_40 $$ for (int i = 1; ; i++) -->Line_41 $$ if (xml.contains("$[ CD ]
Line_4 $$ String classType = PoshiRunnerGetterUtil.getClassTypeFromFilePath(filePath)-->Line_28 $$ _commandSummaries.put(classType + "#" + classCommandName, _getCommandSummary(classCommandName, classType, commandElement))[ FD ]
Line_51 $$ if (classType.equals("path")) -->Line_52 $$ _readPathFile(filePath, className, null)[ CD ]
Line_2 $$ private static void _readPoshiFile(String filePath) throws Exception -->Line_52 $$ _readPathFile(filePath, className, null)[ FD ]
Line_4 $$ String classType = PoshiRunnerGetterUtil.getClassTypeFromFilePath(filePath)-->Line_38 $$ _commandSummaries.put(classType + "#" + className, _getCommandSummary(defaultClassCommandName, classType, defaultCommandElement))[ FD ]
Line_40 $$ for (int i = 1; ; i++) -->Line_47 $$ _functionLocatorCounts.put(className, i)[ FD ]
Line_22 $$ for (Element commandElement : commandElements) -->Line_25 $$ throw new Exception("Duplicate command name\n" + filePath + ":" + commandElement.attributeValue("line-number"))[ FD ]
Line_34 $$ if (classType.equals("function")) -->Line_39 $$ String xml = rootElement.asXML()[ CD ]
