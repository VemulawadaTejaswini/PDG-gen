Line_20 $$ dn = dns.get(0)-->Line_34 $$ selfSocketAddr = dn.getXferAddress().toString()[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_33 $$ dn = dns.get(0)[ CD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_28 $$ conf.set(DFS_DATANODE_ADDRESS_KEY, "0.0.0.0:0")[ CD ]
Line_21 $$ selfSocketAddr = dn.getXferAddress().toString()-->Line_23 $$ assertTrue(selfSocketAddr.contains("/127.0.0.1:"))[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_28 $$ conf.set(DFS_DATANODE_ADDRESS_KEY, "0.0.0.0:0")[ FD ]
Line_19 $$ dns = cluster.getDataNodes()-->Line_24 $$ for (int i = 0; i < dns.size(); i++) [ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_29 $$ conf.set(DFS_DATANODE_HTTP_ADDRESS_KEY, "0.0.0.0:0")[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_31 $$ cluster.startDataNodes(conf, 1, true, StartupOption.REGULAR, null, null, null, false, true)[ CD ]
Line_12 $$ DataNodeProperties dnp = cluster.stopDataNode(i)-->Line_26 $$ assertNotNull("Should have been able to stop simulated datanode", dnp)[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_34 $$ selfSocketAddr = dn.getXferAddress().toString()[ CD ]
Line_19 $$ dns = cluster.getDataNodes()-->Line_32 $$ dns = cluster.getDataNodes()[ FD ]
Line_19 $$ dns = cluster.getDataNodes()-->Line_20 $$ dn = dns.get(0)[ FD ]
Line_7 $$ DataNode dn = dns.get(0)-->Line_8 $$ String selfSocketAddr = dn.getXferAddress().toString()[ FD ]
Line_7 $$ DataNode dn = dns.get(0)-->Line_33 $$ dn = dns.get(0)[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_5 $$ cluster.waitActive()[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_23 $$ assertTrue(selfSocketAddr.contains("/127.0.0.1:"))[ CD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_7 $$ DataNode dn = dns.get(0)[ CD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_37 $$ cluster.shutdown()[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_16 $$ conf.unset(DFS_DATANODE_HTTP_ADDRESS_KEY)[ CD ]
Line_19 $$ dns = cluster.getDataNodes()-->Line_33 $$ dn = dns.get(0)[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_15 $$ conf.unset(DFS_DATANODE_ADDRESS_KEY)[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_31 $$ cluster.startDataNodes(conf, 1, true, StartupOption.REGULAR, null, null, null, false, true)[ FD ]
Line_8 $$ String selfSocketAddr = dn.getXferAddress().toString()-->Line_36 $$ assertTrue(selfSocketAddr.contains("/0.0.0.0:"))[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()[ CD ]
Line_6 $$ ArrayList<DataNode> dns = cluster.getDataNodes()-->Line_33 $$ dn = dns.get(0)[ FD ]
Line_8 $$ String selfSocketAddr = dn.getXferAddress().toString()-->Line_23 $$ assertTrue(selfSocketAddr.contains("/127.0.0.1:"))[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_8 $$ String selfSocketAddr = dn.getXferAddress().toString()[ CD ]
Line_6 $$ ArrayList<DataNode> dns = cluster.getDataNodes()-->Line_32 $$ dns = cluster.getDataNodes()[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_17 $$ conf.unset(DFS_DATANODE_IPC_ADDRESS_KEY)[ CD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_24 $$ for (int i = 0; i < dns.size(); i++) [ CD ]
Line_25 $$ DataNodeProperties dnp = cluster.stopDataNode(i)-->Line_26 $$ assertNotNull("Should have been able to stop simulated datanode", dnp)[ FD ]
Line_11 $$ for (int i = 0; i < dns.size(); i++) -->Line_25 $$ DataNodeProperties dnp = cluster.stopDataNode(i)[ FD ]
Line_32 $$ dns = cluster.getDataNodes()-->Line_33 $$ dn = dns.get(0)[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_15 $$ conf.unset(DFS_DATANODE_ADDRESS_KEY)[ CD ]
Line_24 $$ for (int i = 0; i < dns.size(); i++) -->Line_26 $$ assertNotNull("Should have been able to stop simulated datanode", dnp)[ CD ]
Line_11 $$ for (int i = 0; i < dns.size(); i++) -->Line_12 $$ DataNodeProperties dnp = cluster.stopDataNode(i)[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_37 $$ cluster.shutdown()[ CD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_18 $$ cluster.startDataNodes(conf, 1, true, StartupOption.REGULAR, null, null, null, false, true)[ FD ]
Line_7 $$ DataNode dn = dns.get(0)-->Line_21 $$ selfSocketAddr = dn.getXferAddress().toString()[ FD ]
Line_21 $$ selfSocketAddr = dn.getXferAddress().toString()-->Line_34 $$ selfSocketAddr = dn.getXferAddress().toString()[ FD ]
Line_6 $$ ArrayList<DataNode> dns = cluster.getDataNodes()-->Line_20 $$ dn = dns.get(0)[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_6 $$ ArrayList<DataNode> dns = cluster.getDataNodes()[ FD ]
Line_11 $$ for (int i = 0; i < dns.size(); i++) -->Line_12 $$ DataNodeProperties dnp = cluster.stopDataNode(i)[ CD ]
Line_7 $$ DataNode dn = dns.get(0)-->Line_20 $$ dn = dns.get(0)[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_11 $$ for (int i = 0; i < dns.size(); i++) [ CD ]
Line_6 $$ ArrayList<DataNode> dns = cluster.getDataNodes()-->Line_19 $$ dns = cluster.getDataNodes()[ FD ]
Line_21 $$ selfSocketAddr = dn.getXferAddress().toString()-->Line_36 $$ assertTrue(selfSocketAddr.contains("/0.0.0.0:"))[ FD ]
Line_6 $$ ArrayList<DataNode> dns = cluster.getDataNodes()-->Line_11 $$ for (int i = 0; i < dns.size(); i++) [ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_32 $$ dns = cluster.getDataNodes()[ CD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_10 $$ assertTrue(selfSocketAddr.contains("/127.0.0.1:"))[ CD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_35 $$ System.out.println("DN Self Socket Addr == " + selfSocketAddr)[ CD ]
Line_8 $$ String selfSocketAddr = dn.getXferAddress().toString()-->Line_34 $$ selfSocketAddr = dn.getXferAddress().toString()[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_21 $$ selfSocketAddr = dn.getXferAddress().toString()[ CD ]
Line_6 $$ ArrayList<DataNode> dns = cluster.getDataNodes()-->Line_24 $$ for (int i = 0; i < dns.size(); i++) [ FD ]
Line_11 $$ for (int i = 0; i < dns.size(); i++) -->Line_24 $$ for (int i = 0; i < dns.size(); i++) [ FD ]
Line_24 $$ for (int i = 0; i < dns.size(); i++) -->Line_25 $$ DataNodeProperties dnp = cluster.stopDataNode(i)[ CD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_9 $$ System.out.println("DN Self Socket Addr == " + selfSocketAddr)[ CD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_30 $$ conf.set(DFS_DATANODE_IPC_ADDRESS_KEY, "0.0.0.0:0")[ CD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_32 $$ dns = cluster.getDataNodes()[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_17 $$ conf.unset(DFS_DATANODE_IPC_ADDRESS_KEY)[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_5 $$ cluster.waitActive()[ CD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_19 $$ dns = cluster.getDataNodes()[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_20 $$ dn = dns.get(0)[ CD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_31 $$ cluster.startDataNodes(conf, 1, true, StartupOption.REGULAR, null, null, null, false, true)[ FD ]
Line_8 $$ String selfSocketAddr = dn.getXferAddress().toString()-->Line_10 $$ assertTrue(selfSocketAddr.contains("/127.0.0.1:"))[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_30 $$ conf.set(DFS_DATANODE_IPC_ADDRESS_KEY, "0.0.0.0:0")[ FD ]
Line_33 $$ dn = dns.get(0)-->Line_34 $$ selfSocketAddr = dn.getXferAddress().toString()[ FD ]
Line_6 $$ ArrayList<DataNode> dns = cluster.getDataNodes()-->Line_7 $$ DataNode dn = dns.get(0)[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_22 $$ System.out.println("DN Self Socket Addr == " + selfSocketAddr)[ CD ]
Line_20 $$ dn = dns.get(0)-->Line_33 $$ dn = dns.get(0)[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_25 $$ DataNodeProperties dnp = cluster.stopDataNode(i)[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_12 $$ DataNodeProperties dnp = cluster.stopDataNode(i)[ FD ]
Line_12 $$ DataNodeProperties dnp = cluster.stopDataNode(i)-->Line_13 $$ assertNotNull("Should have been able to stop simulated datanode", dnp)[ FD ]
Line_20 $$ dn = dns.get(0)-->Line_21 $$ selfSocketAddr = dn.getXferAddress().toString()[ FD ]
Line_34 $$ selfSocketAddr = dn.getXferAddress().toString()-->Line_36 $$ assertTrue(selfSocketAddr.contains("/0.0.0.0:"))[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_36 $$ assertTrue(selfSocketAddr.contains("/0.0.0.0:"))[ CD ]
Line_7 $$ DataNode dn = dns.get(0)-->Line_34 $$ selfSocketAddr = dn.getXferAddress().toString()[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_19 $$ dns = cluster.getDataNodes()[ CD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_16 $$ conf.unset(DFS_DATANODE_HTTP_ADDRESS_KEY)[ FD ]
Line_8 $$ String selfSocketAddr = dn.getXferAddress().toString()-->Line_21 $$ selfSocketAddr = dn.getXferAddress().toString()[ FD ]
Line_11 $$ for (int i = 0; i < dns.size(); i++) -->Line_13 $$ assertNotNull("Should have been able to stop simulated datanode", dnp)[ CD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_18 $$ cluster.startDataNodes(conf, 1, true, StartupOption.REGULAR, null, null, null, false, true)[ FD ]
Line_24 $$ for (int i = 0; i < dns.size(); i++) -->Line_25 $$ DataNodeProperties dnp = cluster.stopDataNode(i)[ FD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_18 $$ cluster.startDataNodes(conf, 1, true, StartupOption.REGULAR, null, null, null, false, true)[ CD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_29 $$ conf.set(DFS_DATANODE_HTTP_ADDRESS_KEY, "0.0.0.0:0")[ CD ]
Line_2 $$ public void testDFSAddressConfig() throws IOException -->Line_6 $$ ArrayList<DataNode> dns = cluster.getDataNodes()[ CD ]
