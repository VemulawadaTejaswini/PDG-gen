Line_11 $$ if (element instanceof GrString) -->Line_12 $$ processGString(element, quote, value, buffer)[ CD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_12 $$ processGString(element, quote, value, buffer)[ FD ]
Line_11 $$ if (element instanceof GrString) -->Line_14 $$ processSimpleString(quote, value, buffer)[ CD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_5 $$ if (!("'".equals(quote) || "\"".equals(quote)))[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_16 $$ final String result = buffer.toString()[ FD ]
Line_3 $$ final String text = element.getText()-->Line_9 $$ String value = GrStringUtil.removeQuotes(text)[ FD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_7 $$ if (!text.contains("\\n"))[ CD ]
Line_17 $$ if (result.endsWith("+\n\"\""))-->Line_18 $$ return result.substring(0, result.length() - 4)[ CD ]
Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)-->Line_5 $$ if (!("'".equals(quote) || "\"".equals(quote)))[ FD ]
Line_16 $$ final String result = buffer.toString()-->Line_17 $$ if (result.endsWith("+\n\"\""))[ FD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_11 $$ if (element instanceof GrString) [ CD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_11 $$ if (element instanceof GrString) [ FD ]
Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)-->Line_14 $$ processSimpleString(quote, value, buffer)[ FD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_3 $$ final String text = element.getText()[ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_14 $$ processSimpleString(quote, value, buffer)[ FD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_19 $$ return result[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_12 $$ processGString(element, quote, value, buffer)[ FD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)[ CD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_17 $$ if (result.endsWith("+\n\"\""))[ CD ]
Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)-->Line_12 $$ processGString(element, quote, value, buffer)[ FD ]
Line_3 $$ final String text = element.getText()-->Line_7 $$ if (!text.contains("\\n"))[ FD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_3 $$ final String text = element.getText()[ CD ]
Line_3 $$ final String text = element.getText()-->Line_5 $$ if (!("'".equals(quote) || "\"".equals(quote)))[ FD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_10 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_9 $$ String value = GrStringUtil.removeQuotes(text)-->Line_14 $$ processSimpleString(quote, value, buffer)[ FD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_9 $$ String value = GrStringUtil.removeQuotes(text)[ CD ]
Line_2 $$ private static String invokeImpl(PsiElement element) -->Line_16 $$ final String result = buffer.toString()[ CD ]
Line_5 $$ if (!("'".equals(quote) || "\"".equals(quote)))-->Line_6 $$ return text[ CD ]
Line_16 $$ final String result = buffer.toString()-->Line_18 $$ return result.substring(0, result.length() - 4)[ FD ]
Line_7 $$ if (!text.contains("\\n"))-->Line_8 $$ return text[ CD ]
Line_9 $$ String value = GrStringUtil.removeQuotes(text)-->Line_12 $$ processGString(element, quote, value, buffer)[ FD ]
Line_3 $$ final String text = element.getText()-->Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)[ FD ]
