Line_6 $$ JobConf conf = new JobConf()-->Line_17 $$ TokenCache.setJobToken(token, conf.getCredentials())[ FD ]
Line_20 $$ PipesMapRunner<FloatWritable, NullWritable, IntWritable, Text> runner = new PipesMapRunner<FloatWritable, NullWritable, IntWritable, Text>()-->Line_22 $$ runner.configure(conf)[ FD ]
Line_2 $$ public void testRunner() throws Exception -->Line_3 $$ File[] psw = cleanTokenPasswordFile()[ CD ]
Line_3 $$ File[] psw = cleanTokenPasswordFile()-->Line_31 $$ if (psw != null) [ FD ]
Line_5 $$ RecordReader<FloatWritable, NullWritable> rReader = new ReaderPipesMapRunner()-->Line_23 $$ runner.run(rReader, output, reporter)[ FD ]
Line_6 $$ JobConf conf = new JobConf()-->Line_8 $$ conf.set(MRJobConfig.TASK_ATTEMPT_ID, taskName)[ FD ]
Line_6 $$ JobConf conf = new JobConf()-->Line_15 $$ conf.set(MRJobConfig.CACHE_LOCALFILES, fCommand.getAbsolutePath())[ FD ]
Line_6 $$ JobConf conf = new JobConf()-->Line_7 $$ conf.set(Submitter.IS_JAVA_RR, "true")[ FD ]
Line_32 $$ for (File file : psw) -->Line_33 $$ file.deleteOnExit()[ FD ]
Line_16 $$ Token<AMRMTokenIdentifier> token = new Token<AMRMTokenIdentifier>("user".getBytes(), "password".getBytes(), new Text("kind"), new Text("service"))-->Line_17 $$ TokenCache.setJobToken(token, conf.getCredentials())[ FD ]
Line_19 $$ TestTaskReporter reporter = new TestTaskReporter()-->Line_23 $$ runner.run(rReader, output, reporter)[ FD ]
Line_9 $$ CombineOutputCollector<IntWritable, Text> output = new CombineOutputCollector<IntWritable, Text>(new Counters.Counter(), new Progress())-->Line_13 $$ output.setWriter(wr)[ FD ]
Line_9 $$ CombineOutputCollector<IntWritable, Text> output = new CombineOutputCollector<IntWritable, Text>(new Counters.Counter(), new Progress())-->Line_23 $$ runner.run(rReader, output, reporter)[ FD ]
Line_10 $$ FileSystem fs = new RawLocalFileSystem()-->Line_11 $$ fs.setConf(conf)[ FD ]
Line_6 $$ JobConf conf = new JobConf()-->Line_24 $$ String stdOut = readStdOut(conf)[ FD ]
Line_10 $$ FileSystem fs = new RawLocalFileSystem()-->Line_12 $$ Writer<IntWritable, Text> wr = new Writer<IntWritable, Text>(conf, fs.create(new Path(workSpace + File.separator + "outfile")), IntWritable.class, Text.class, null, null, true)[ FD ]
Line_24 $$ String stdOut = readStdOut(conf)-->Line_26 $$ assertTrue(stdOut.contains("Key class:org.apache.hadoop.io.FloatWritable"))[ FD ]
Line_24 $$ String stdOut = readStdOut(conf)-->Line_29 $$ assertTrue(stdOut.contains("value:9.0"))[ FD ]
Line_6 $$ JobConf conf = new JobConf()-->Line_11 $$ fs.setConf(conf)[ FD ]
Line_24 $$ String stdOut = readStdOut(conf)-->Line_28 $$ assertTrue(stdOut.contains("value:0.0"))[ FD ]
Line_12 $$ Writer<IntWritable, Text> wr = new Writer<IntWritable, Text>(conf, fs.create(new Path(workSpace + File.separator + "outfile")), IntWritable.class, Text.class, null, null, true)-->Line_13 $$ output.setWriter(wr)[ FD ]
Line_6 $$ JobConf conf = new JobConf()-->Line_21 $$ initStdOut(conf)[ FD ]
Line_6 $$ JobConf conf = new JobConf()-->Line_22 $$ runner.configure(conf)[ FD ]
Line_14 $$ File fCommand = getFileCommand("org.apache.hadoop.mapred.pipes.PipeApplicationRunnableStub")-->Line_15 $$ conf.set(MRJobConfig.CACHE_LOCALFILES, fCommand.getAbsolutePath())[ FD ]
Line_6 $$ JobConf conf = new JobConf()-->Line_18 $$ conf.setBoolean(MRJobConfig.SKIP_RECORDS, true)[ FD ]
Line_24 $$ String stdOut = readStdOut(conf)-->Line_25 $$ assertTrue(stdOut.contains("CURRENT_PROTOCOL_VERSION:0"))[ FD ]
Line_20 $$ PipesMapRunner<FloatWritable, NullWritable, IntWritable, Text> runner = new PipesMapRunner<FloatWritable, NullWritable, IntWritable, Text>()-->Line_23 $$ runner.run(rReader, output, reporter)[ FD ]
Line_24 $$ String stdOut = readStdOut(conf)-->Line_27 $$ assertTrue(stdOut.contains("Value class:org.apache.hadoop.io.NullWritable"))[ FD ]
