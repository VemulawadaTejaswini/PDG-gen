Line_2 $$ public void testAddMessagesConcurrently() throws Exception -->Line_43 $$ Assert.assertTrue("Only " + successCount + " out of " + _userIds.length + " threads added messages successfully", successCount == _userIds.length)[ CD ]
Line_4 $$ for (int i = 0; i < doAsUserThreads.length; i++) -->Line_5 $$ String subject = "Test Message " + i[ CD ]
Line_17 $$ DB db = DBManagerUtil.getDB()-->Line_18 $$ if (db.getDBType() == DBType.SYBASE) [ FD ]
Line_19 $$ for (LoggingEvent loggingEvent : captureAppender1.getLoggingEvents()) -->Line_31 $$ String message = loggingEvent.getRenderedMessage()[ FD ]
Line_8 $$ try (CaptureAppender captureAppender1 = Log4JLoggerTestUtil.configureLog4JLogger(BasePersistenceImpl.class.getName(), Level.ERROR);-->Line_19 $$ for (LoggingEvent loggingEvent : captureAppender1.getLoggingEvents()) [ FD ]
Line_25 $$ StringBundler sb = new StringBundler()-->Line_26 $$ sb.append("com.liferay.portal.kernel.exception.")[ FD ]
Line_4 $$ for (int i = 0; i < doAsUserThreads.length; i++) -->Line_6 $$ doAsUserThreads[i] = new AddMessageThread(_userIds[i], subject)[ CD ]
Line_2 $$ public void testAddMessagesConcurrently() throws Exception -->Line_4 $$ for (int i = 0; i < doAsUserThreads.length; i++) [ CD ]
Line_25 $$ StringBundler sb = new StringBundler()-->Line_27 $$ sb.append("SystemException:")[ FD ]
Line_39 $$ if (doAsUserThread.isSuccess()) -->Line_40 $$ successCount++[ CD ]
Line_20 $$ String message = loggingEvent.getRenderedMessage()-->Line_32 $$ Assert.assertTrue(message.contains("Your server command"))[ FD ]
Line_19 $$ for (LoggingEvent loggingEvent : captureAppender1.getLoggingEvents()) -->Line_24 $$ String message = loggingEvent.getRenderedMessage()[ FD ]
Line_2 $$ public void testAddMessagesConcurrently() throws Exception -->Line_37 $$ int successCount = 0[ CD ]
Line_19 $$ for (LoggingEvent loggingEvent : captureAppender1.getLoggingEvents()) -->Line_20 $$ String message = loggingEvent.getRenderedMessage()[ FD ]
Line_11 $$ for (DoAsUserThread doAsUserThread : doAsUserThreads) -->Line_15 $$ doAsUserThread.join()[ FD ]
Line_11 $$ for (DoAsUserThread doAsUserThread : doAsUserThreads) -->Line_12 $$ doAsUserThread.start()[ FD ]
Line_8 $$ try (CaptureAppender captureAppender1 = Log4JLoggerTestUtil.configureLog4JLogger(BasePersistenceImpl.class.getName(), Level.ERROR);-->Line_23 $$ for (LoggingEvent loggingEvent : captureAppender2.getLoggingEvents()) [ FD ]
Line_37 $$ int successCount = 0-->Line_40 $$ successCount++[ FD ]
Line_25 $$ StringBundler sb = new StringBundler()-->Line_28 $$ Assert.assertTrue(message.startsWith(sb.toString()))[ FD ]
Line_11 $$ for (DoAsUserThread doAsUserThread : doAsUserThreads) -->Line_39 $$ if (doAsUserThread.isSuccess()) [ FD ]
Line_20 $$ String message = loggingEvent.getRenderedMessage()-->Line_28 $$ Assert.assertTrue(message.startsWith(sb.toString()))[ FD ]
Line_20 $$ String message = loggingEvent.getRenderedMessage()-->Line_21 $$ Assert.assertTrue(message.startsWith("Caught unexpected exception"))[ FD ]
Line_2 $$ public void testAddMessagesConcurrently() throws Exception -->Line_3 $$ DoAsUserThread[] doAsUserThreads = new DoAsUserThread[_userIds.length][ CD ]
Line_8 $$ try (CaptureAppender captureAppender1 = Log4JLoggerTestUtil.configureLog4JLogger(BasePersistenceImpl.class.getName(), Level.ERROR);-->Line_30 $$ for (LoggingEvent loggingEvent : captureAppender3.getLoggingEvents()) [ FD ]
Line_20 $$ String message = loggingEvent.getRenderedMessage()-->Line_33 $$ Assert.assertTrue(message.contains("encountered a deadlock situation. Please re-run " + "your command."))[ FD ]
