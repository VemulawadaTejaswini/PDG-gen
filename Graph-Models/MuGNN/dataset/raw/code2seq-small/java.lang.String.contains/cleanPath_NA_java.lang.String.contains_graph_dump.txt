Line_2 $$ public static String cleanPath(String path) -->Line_3 $$ if (path == null) [ FD ]
Line_27 $$ if (TOP_PATH.equals(element)) -->Line_28 $$ tops++[ CD ]
Line_2 $$ public static String cleanPath(String path) -->Line_24 $$ for (int i = pathArray.length - 1; i >= 0; i--) [ CD ]
Line_2 $$ public static String cleanPath(String path) -->Line_8 $$ String prefix = ""[ CD ]
Line_6 $$ String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR)-->Line_14 $$ pathToUse = pathToUse.substring(prefixIndex + 1)[ FD ]
Line_2 $$ public static String cleanPath(String path) -->Line_17 $$ if (pathToUse.startsWith(FOLDER_SEPARATOR)) [ CD ]
Line_10 $$ prefix = pathToUse.substring(0, prefixIndex + 1)-->Line_18 $$ prefix = prefix + FOLDER_SEPARATOR[ FD ]
Line_22 $$ List<String> pathElements = new LinkedList<String>()-->Line_40 $$ return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR)[ FD ]
Line_6 $$ String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR)-->Line_7 $$ int prefixIndex = pathToUse.indexOf(":")[ FD ]
Line_8 $$ String prefix = ""-->Line_11 $$ if (prefix.contains("/")) [ FD ]
Line_2 $$ public static String cleanPath(String path) -->Line_9 $$ if (prefixIndex != -1) [ CD ]
Line_8 $$ String prefix = ""-->Line_10 $$ prefix = pathToUse.substring(0, prefixIndex + 1)[ FD ]
Line_25 $$ String element = pathArray[i]-->Line_26 $$ if (CURRENT_PATH.equals(element)) [ FD ]
Line_2 $$ public static String cleanPath(String path) -->Line_7 $$ int prefixIndex = pathToUse.indexOf(":")[ CD ]
Line_2 $$ public static String cleanPath(String path) -->Line_6 $$ String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR)[ CD ]
Line_23 $$ int tops = 0-->Line_37 $$ for (int i = 0; i < tops; i++) [ FD ]
Line_6 $$ String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR)-->Line_17 $$ if (pathToUse.startsWith(FOLDER_SEPARATOR)) [ FD ]
Line_6 $$ String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR)-->Line_10 $$ prefix = pathToUse.substring(0, prefixIndex + 1)[ FD ]
Line_2 $$ public static String cleanPath(String path) -->Line_37 $$ for (int i = 0; i < tops; i++) [ CD ]
Line_14 $$ pathToUse = pathToUse.substring(prefixIndex + 1)-->Line_21 $$ String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR)[ FD ]
Line_37 $$ for (int i = 0; i < tops; i++) -->Line_38 $$ pathElements.add(0, TOP_PATH)[ CD ]
Line_2 $$ public static String cleanPath(String path) -->Line_21 $$ String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR)[ CD ]
Line_24 $$ for (int i = pathArray.length - 1; i >= 0; i--) -->Line_25 $$ String element = pathArray[i][ CD ]
Line_23 $$ int tops = 0-->Line_28 $$ tops++[ FD ]
Line_27 $$ if (TOP_PATH.equals(element)) -->Line_30 $$ if (tops > 0) [ CD ]
Line_9 $$ if (prefixIndex != -1) -->Line_11 $$ if (prefix.contains("/")) [ CD ]
Line_7 $$ int prefixIndex = pathToUse.indexOf(":")-->Line_9 $$ if (prefixIndex != -1) [ FD ]
Line_24 $$ for (int i = pathArray.length - 1; i >= 0; i--) -->Line_26 $$ if (CURRENT_PATH.equals(element)) [ CD ]
Line_24 $$ for (int i = pathArray.length - 1; i >= 0; i--) -->Line_37 $$ for (int i = 0; i < tops; i++) [ FD ]
Line_17 $$ if (pathToUse.startsWith(FOLDER_SEPARATOR)) -->Line_18 $$ prefix = prefix + FOLDER_SEPARATOR[ CD ]
Line_8 $$ String prefix = ""-->Line_12 $$ prefix = ""[ FD ]
Line_2 $$ public static String cleanPath(String path) -->Line_22 $$ List<String> pathElements = new LinkedList<String>()[ CD ]
Line_22 $$ List<String> pathElements = new LinkedList<String>()-->Line_33 $$ pathElements.add(0, element)[ FD ]
Line_9 $$ if (prefixIndex != -1) -->Line_10 $$ prefix = pathToUse.substring(0, prefixIndex + 1)[ CD ]
Line_3 $$ if (path == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public static String cleanPath(String path) -->Line_23 $$ int tops = 0[ CD ]
Line_11 $$ if (prefix.contains("/")) -->Line_14 $$ pathToUse = pathToUse.substring(prefixIndex + 1)[ CD ]
Line_30 $$ if (tops > 0) -->Line_31 $$ tops--[ CD ]
Line_2 $$ public static String cleanPath(String path) -->Line_6 $$ String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR)[ FD ]
Line_10 $$ prefix = pathToUse.substring(0, prefixIndex + 1)-->Line_11 $$ if (prefix.contains("/")) [ FD ]
Line_14 $$ pathToUse = pathToUse.substring(prefixIndex + 1)-->Line_19 $$ pathToUse = pathToUse.substring(1)[ FD ]
Line_25 $$ String element = pathArray[i]-->Line_27 $$ if (TOP_PATH.equals(element)) [ FD ]
Line_22 $$ List<String> pathElements = new LinkedList<String>()-->Line_38 $$ pathElements.add(0, TOP_PATH)[ FD ]
Line_8 $$ String prefix = ""-->Line_18 $$ prefix = prefix + FOLDER_SEPARATOR[ FD ]
Line_12 $$ prefix = ""-->Line_18 $$ prefix = prefix + FOLDER_SEPARATOR[ FD ]
Line_23 $$ int tops = 0-->Line_31 $$ tops--[ FD ]
Line_25 $$ String element = pathArray[i]-->Line_33 $$ pathElements.add(0, element)[ FD ]
Line_17 $$ if (pathToUse.startsWith(FOLDER_SEPARATOR)) -->Line_19 $$ pathToUse = pathToUse.substring(1)[ CD ]
Line_19 $$ pathToUse = pathToUse.substring(1)-->Line_21 $$ String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR)[ FD ]
Line_26 $$ if (CURRENT_PATH.equals(element)) -->Line_27 $$ if (TOP_PATH.equals(element)) [ CD ]
Line_11 $$ if (prefix.contains("/")) -->Line_12 $$ prefix = ""[ CD ]
Line_6 $$ String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR)-->Line_21 $$ String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR)[ FD ]
Line_23 $$ int tops = 0-->Line_30 $$ if (tops > 0) [ FD ]
Line_30 $$ if (tops > 0) -->Line_33 $$ pathElements.add(0, element)[ CD ]
Line_2 $$ public static String cleanPath(String path) -->Line_40 $$ return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR)[ CD ]
Line_2 $$ public static String cleanPath(String path) -->Line_3 $$ if (path == null) [ CD ]
Line_6 $$ String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR)-->Line_19 $$ pathToUse = pathToUse.substring(1)[ FD ]
Line_10 $$ prefix = pathToUse.substring(0, prefixIndex + 1)-->Line_12 $$ prefix = ""[ FD ]
Line_14 $$ pathToUse = pathToUse.substring(prefixIndex + 1)-->Line_17 $$ if (pathToUse.startsWith(FOLDER_SEPARATOR)) [ FD ]
