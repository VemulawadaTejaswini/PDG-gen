Line_6 $$ String candidateClassName-->Line_58 $$ candidateClassName = "java.math." + name[ FD ]
Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name-->Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name[ FD ]
Line_9 $$ for (int i = 0; i < innerNames.length; i++) -->Line_15 $$ if (i == innerNames.length - 1) [ CD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_21 $$ while (outerClassName != null) [ CD ]
Line_26 $$ candidateClassName = outerClassName + '.' + name-->Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name[ FD ]
Line_25 $$ ClassMetaData outerClass = metaDataRepository.get(outerClassName)-->Line_30 $$ outerClassName = outerClass.getOuterClassName()[ FD ]
Line_9 $$ for (int i = 0; i < innerNames.length; i++) -->Line_10 $$ String innerName = innerNames[i][ CD ]
Line_8 $$ ClassMetaData pos = classMetaData-->Line_18 $$ pos = metaDataRepository.get(candidateClassName)[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_3 $$ if (primitiveTypes.contains(name)) [ CD ]
Line_35 $$ for (String importedClass : classMetaData.getImports()) -->Line_42 $$ if (importedClass.startsWith("java.") && isVisibleClass(candidateClassName)) [ FD ]
Line_9 $$ for (int i = 0; i < innerNames.length; i++) -->Line_12 $$ if (!pos.getInnerClassNames().contains(candidateClassName)) [ CD ]
Line_21 $$ while (outerClassName != null) -->Line_30 $$ outerClassName = outerClass.getOuterClassName()[ CD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_20 $$ String outerClassName = classMetaData.getOuterClassName()[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_20 $$ String outerClassName = classMetaData.getOuterClassName()[ CD ]
Line_26 $$ candidateClassName = outerClassName + '.' + name-->Line_42 $$ if (importedClass.startsWith("java.") && isVisibleClass(candidateClassName)) [ FD ]
Line_3 $$ if (primitiveTypes.contains(name)) -->Line_4 $$ return name[ CD ]
Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name-->Line_53 $$ candidateClassName = "java.lang." + name[ FD ]
Line_36 $$ String baseName = StringUtils.substringAfterLast(importedClass, ".")-->Line_37 $$ if (baseName.equals("*")) [ FD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_58 $$ candidateClassName = "java.math." + name[ FD ]
Line_30 $$ outerClassName = outerClass.getOuterClassName()-->Line_21 $$ while (outerClassName != null) [ FD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_39 $$ if (metaDataRepository.find(candidateClassName) != null) [ FD ]
Line_26 $$ candidateClassName = outerClassName + '.' + name-->Line_27 $$ if (outerClass.getInnerClassNames().contains(candidateClassName)) [ FD ]
Line_63 $$ candidateClassName = prefix + name-->Line_64 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_18 $$ pos = metaDataRepository.get(candidateClassName)-->Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName[ FD ]
Line_58 $$ candidateClassName = "java.math." + name-->Line_64 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_6 $$ String candidateClassName-->Line_64 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name-->Line_64 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_32 $$ if (name.contains(".")) [ FD ]
Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name-->Line_50 $$ if (metaDataRepository.find(candidateClassName) != null) [ FD ]
Line_6 $$ String candidateClassName-->Line_53 $$ candidateClassName = "java.lang." + name[ FD ]
Line_37 $$ if (baseName.equals("*")) -->Line_42 $$ if (importedClass.startsWith("java.") && isVisibleClass(candidateClassName)) [ CD ]
Line_6 $$ String candidateClassName-->Line_42 $$ if (importedClass.startsWith("java.") && isVisibleClass(candidateClassName)) [ FD ]
Line_10 $$ String innerName = innerNames[i]-->Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName[ FD ]
Line_26 $$ candidateClassName = outerClassName + '.' + name-->Line_58 $$ candidateClassName = "java.math." + name[ FD ]
Line_36 $$ String baseName = StringUtils.substringAfterLast(importedClass, ".")-->Line_45 $$ if (name.equals(baseName)) [ FD ]
Line_9 $$ for (int i = 0; i < innerNames.length; i++) -->Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName[ CD ]
Line_50 $$ if (metaDataRepository.find(candidateClassName) != null) -->Line_51 $$ return candidateClassName[ CD ]
Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name-->Line_63 $$ candidateClassName = prefix + name[ FD ]
Line_57 $$ if (classMetaData.isGroovy()) -->Line_59 $$ if (groovyImplicitTypes.contains(candidateClassName)) [ CD ]
Line_26 $$ candidateClassName = outerClassName + '.' + name-->Line_59 $$ if (groovyImplicitTypes.contains(candidateClassName)) [ FD ]
Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name-->Line_50 $$ if (metaDataRepository.find(candidateClassName) != null) [ FD ]
Line_21 $$ while (outerClassName != null) -->Line_22 $$ if (name.equals(StringUtils.substringAfterLast(outerClassName, "."))) [ CD ]
Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name-->Line_58 $$ candidateClassName = "java.math." + name[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_57 $$ if (classMetaData.isGroovy()) [ FD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_63 $$ candidateClassName = prefix + name[ FD ]
Line_21 $$ while (outerClassName != null) -->Line_26 $$ candidateClassName = outerClassName + '.' + name[ CD ]
Line_53 $$ candidateClassName = "java.lang." + name-->Line_58 $$ candidateClassName = "java.math." + name[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_53 $$ candidateClassName = "java.lang." + name[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_63 $$ candidateClassName = prefix + name[ FD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_12 $$ if (!pos.getInnerClassNames().contains(candidateClassName)) [ FD ]
Line_8 $$ ClassMetaData pos = classMetaData-->Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName[ FD ]
Line_18 $$ pos = metaDataRepository.get(candidateClassName)-->Line_12 $$ if (!pos.getInnerClassNames().contains(candidateClassName)) [ FD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_64 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_6 $$ String candidateClassName-->Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name[ FD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name[ FD ]
Line_39 $$ if (metaDataRepository.find(candidateClassName) != null) -->Line_40 $$ return candidateClassName[ CD ]
Line_9 $$ for (int i = 0; i < innerNames.length; i++) -->Line_18 $$ pos = metaDataRepository.get(candidateClassName)[ CD ]
Line_6 $$ String candidateClassName-->Line_26 $$ candidateClassName = outerClassName + '.' + name[ FD ]
Line_37 $$ if (baseName.equals("*")) -->Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name[ CD ]
Line_20 $$ String outerClassName = classMetaData.getOuterClassName()-->Line_25 $$ ClassMetaData outerClass = metaDataRepository.get(outerClassName)[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_58 $$ candidateClassName = "java.math." + name[ FD ]
Line_35 $$ for (String importedClass : classMetaData.getImports()) -->Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name[ FD ]
Line_42 $$ if (importedClass.startsWith("java.") && isVisibleClass(candidateClassName)) -->Line_43 $$ return candidateClassName[ CD ]
Line_26 $$ candidateClassName = outerClassName + '.' + name-->Line_39 $$ if (metaDataRepository.find(candidateClassName) != null) [ FD ]
Line_32 $$ if (name.contains(".")) -->Line_33 $$ return name[ CD ]
Line_6 $$ String candidateClassName-->Line_12 $$ if (!pos.getInnerClassNames().contains(candidateClassName)) [ FD ]
Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name-->Line_39 $$ if (metaDataRepository.find(candidateClassName) != null) [ FD ]
Line_27 $$ if (outerClass.getInnerClassNames().contains(candidateClassName)) -->Line_28 $$ return candidateClassName[ CD ]
Line_35 $$ for (String importedClass : classMetaData.getImports()) -->Line_36 $$ String baseName = StringUtils.substringAfterLast(importedClass, ".")[ FD ]
Line_6 $$ String candidateClassName-->Line_54 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_58 $$ candidateClassName = "java.math." + name-->Line_59 $$ if (groovyImplicitTypes.contains(candidateClassName)) [ FD ]
Line_26 $$ candidateClassName = outerClassName + '.' + name-->Line_63 $$ candidateClassName = prefix + name[ FD ]
Line_54 $$ if (isVisibleClass(candidateClassName)) -->Line_55 $$ return candidateClassName[ CD ]
Line_21 $$ while (outerClassName != null) -->Line_27 $$ if (outerClass.getInnerClassNames().contains(candidateClassName)) [ CD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_50 $$ if (metaDataRepository.find(candidateClassName) != null) [ CD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_59 $$ if (groovyImplicitTypes.contains(candidateClassName)) [ FD ]
Line_6 $$ String candidateClassName-->Line_59 $$ if (groovyImplicitTypes.contains(candidateClassName)) [ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_6 $$ String candidateClassName[ CD ]
Line_45 $$ if (name.equals(baseName)) -->Line_46 $$ return importedClass[ CD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_26 $$ candidateClassName = outerClassName + '.' + name[ FD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_53 $$ candidateClassName = "java.lang." + name[ FD ]
Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name-->Line_42 $$ if (importedClass.startsWith("java.") && isVisibleClass(candidateClassName)) [ FD ]
Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name-->Line_54 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_25 $$ ClassMetaData outerClass = metaDataRepository.get(outerClassName)-->Line_27 $$ if (outerClass.getInnerClassNames().contains(candidateClassName)) [ FD ]
Line_6 $$ String candidateClassName-->Line_50 $$ if (metaDataRepository.find(candidateClassName) != null) [ FD ]
Line_26 $$ candidateClassName = outerClassName + '.' + name-->Line_54 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_6 $$ String candidateClassName-->Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name[ FD ]
Line_6 $$ String candidateClassName-->Line_63 $$ candidateClassName = prefix + name[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_3 $$ if (primitiveTypes.contains(name)) [ FD ]
Line_22 $$ if (name.equals(StringUtils.substringAfterLast(outerClassName, "."))) -->Line_23 $$ return outerClassName[ CD ]
Line_6 $$ String candidateClassName-->Line_27 $$ if (outerClass.getInnerClassNames().contains(candidateClassName)) [ FD ]
Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name-->Line_54 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_59 $$ if (groovyImplicitTypes.contains(candidateClassName)) -->Line_60 $$ return candidateClassName[ CD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_18 $$ pos = metaDataRepository.get(candidateClassName)[ FD ]
Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name-->Line_59 $$ if (groovyImplicitTypes.contains(candidateClassName)) [ FD ]
Line_30 $$ outerClassName = outerClass.getOuterClassName()-->Line_25 $$ ClassMetaData outerClass = metaDataRepository.get(outerClassName)[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_22 $$ if (name.equals(StringUtils.substringAfterLast(outerClassName, "."))) [ FD ]
Line_57 $$ if (classMetaData.isGroovy()) -->Line_58 $$ candidateClassName = "java.math." + name[ CD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_8 $$ ClassMetaData pos = classMetaData[ CD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_26 $$ candidateClassName = outerClassName + '.' + name[ FD ]
Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name-->Line_53 $$ candidateClassName = "java.lang." + name[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_54 $$ if (isVisibleClass(candidateClassName)) [ CD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_54 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_64 $$ if (isVisibleClass(candidateClassName)) -->Line_65 $$ return candidateClassName[ CD ]
Line_20 $$ String outerClassName = classMetaData.getOuterClassName()-->Line_30 $$ outerClassName = outerClass.getOuterClassName()[ FD ]
Line_6 $$ String candidateClassName-->Line_39 $$ if (metaDataRepository.find(candidateClassName) != null) [ FD ]
Line_37 $$ if (baseName.equals("*")) -->Line_39 $$ if (metaDataRepository.find(candidateClassName) != null) [ CD ]
Line_26 $$ candidateClassName = outerClassName + '.' + name-->Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_9 $$ for (int i = 0; i < innerNames.length; i++) [ CD ]
Line_58 $$ candidateClassName = "java.math." + name-->Line_63 $$ candidateClassName = prefix + name[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_53 $$ candidateClassName = "java.lang." + name[ CD ]
Line_53 $$ candidateClassName = "java.lang." + name-->Line_63 $$ candidateClassName = prefix + name[ FD ]
Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name-->Line_64 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_50 $$ if (metaDataRepository.find(candidateClassName) != null) [ FD ]
Line_37 $$ if (baseName.equals("*")) -->Line_45 $$ if (name.equals(baseName)) [ CD ]
Line_30 $$ outerClassName = outerClass.getOuterClassName()-->Line_22 $$ if (name.equals(StringUtils.substringAfterLast(outerClassName, "."))) [ FD ]
Line_20 $$ String outerClassName = classMetaData.getOuterClassName()-->Line_22 $$ if (name.equals(StringUtils.substringAfterLast(outerClassName, "."))) [ FD ]
Line_26 $$ candidateClassName = outerClassName + '.' + name-->Line_53 $$ candidateClassName = "java.lang." + name[ FD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_27 $$ if (outerClass.getInnerClassNames().contains(candidateClassName)) [ FD ]
Line_62 $$ for (String prefix : groovyImplicitImportPackages) -->Line_63 $$ candidateClassName = prefix + name[ FD ]
Line_21 $$ while (outerClassName != null) -->Line_25 $$ ClassMetaData outerClass = metaDataRepository.get(outerClassName)[ CD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_7 $$ String[] innerNames = name.split("\\.")[ FD ]
Line_9 $$ for (int i = 0; i < innerNames.length; i++) -->Line_15 $$ if (i == innerNames.length - 1) [ FD ]
Line_6 $$ String candidateClassName-->Line_18 $$ pos = metaDataRepository.get(candidateClassName)[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_35 $$ for (String importedClass : classMetaData.getImports()) [ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_69 $$ return name[ CD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_7 $$ String[] innerNames = name.split("\\.")[ CD ]
Line_53 $$ candidateClassName = "java.lang." + name-->Line_59 $$ if (groovyImplicitTypes.contains(candidateClassName)) [ FD ]
Line_26 $$ candidateClassName = outerClassName + '.' + name-->Line_50 $$ if (metaDataRepository.find(candidateClassName) != null) [ FD ]
Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name-->Line_58 $$ candidateClassName = "java.math." + name[ FD ]
Line_26 $$ candidateClassName = outerClassName + '.' + name-->Line_64 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_57 $$ if (classMetaData.isGroovy()) [ CD ]
Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name-->Line_63 $$ candidateClassName = prefix + name[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_45 $$ if (name.equals(baseName)) [ FD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_42 $$ if (importedClass.startsWith("java.") && isVisibleClass(candidateClassName)) [ FD ]
Line_20 $$ String outerClassName = classMetaData.getOuterClassName()-->Line_21 $$ while (outerClassName != null) [ FD ]
Line_11 $$ candidateClassName = pos.getClassName() + '.' + innerName-->Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name[ FD ]
Line_8 $$ ClassMetaData pos = classMetaData-->Line_12 $$ if (!pos.getInnerClassNames().contains(candidateClassName)) [ FD ]
Line_15 $$ if (i == innerNames.length - 1) -->Line_16 $$ return candidateClassName[ CD ]
Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name-->Line_59 $$ if (groovyImplicitTypes.contains(candidateClassName)) [ FD ]
Line_6 $$ String candidateClassName-->Line_38 $$ candidateClassName = StringUtils.substringBeforeLast(importedClass, ".") + "." + name[ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_32 $$ if (name.contains(".")) [ CD ]
Line_53 $$ candidateClassName = "java.lang." + name-->Line_54 $$ if (isVisibleClass(candidateClassName)) [ FD ]
Line_2 $$ public String resolve(String name, ClassMetaData classMetaData) -->Line_49 $$ candidateClassName = classMetaData.getPackageName() + "." + name[ CD ]
Line_53 $$ candidateClassName = "java.lang." + name-->Line_64 $$ if (isVisibleClass(candidateClassName)) [ FD ]
