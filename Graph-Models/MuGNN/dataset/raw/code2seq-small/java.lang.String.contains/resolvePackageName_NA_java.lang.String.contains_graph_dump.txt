Line_10 $$ processSubPackages(context, new Processor<PsiPackage>() -->Line_14 $$ packages.add(psiPackage)[ FD ]
Line_5 $$ if (packageName.contains("*")) -->Line_20 $$ return packages[ CD ]
Line_3 $$ if (context == null)-->Line_4 $$ return Collections.emptySet()[ CD ]
Line_7 $$ int indexOf = packageName.indexOf("*")-->Line_8 $$ if (indexOf == 0 || context.getQualifiedName().startsWith(packageName.substring(0, indexOf))) [ FD ]
Line_13 $$ if (name != null && pattern.matcher(name).matches()) -->Line_14 $$ packages.add(psiPackage)[ CD ]
Line_8 $$ if (indexOf == 0 || context.getQualifiedName().startsWith(packageName.substring(0, indexOf))) -->Line_10 $$ processSubPackages(context, new Processor<PsiPackage>() [ CD ]
Line_2 $$ public Collection<PsiPackage> resolvePackageName(@Nullable final PsiPackage context, final String packageName) -->Line_5 $$ if (packageName.contains("*")) [ CD ]
Line_2 $$ public Collection<PsiPackage> resolvePackageName(@Nullable final PsiPackage context, final String packageName) -->Line_10 $$ processSubPackages(context, new Processor<PsiPackage>() [ FD ]
Line_6 $$ final Set<PsiPackage> packages = new LinkedHashSet<PsiPackage>()-->Line_14 $$ packages.add(psiPackage)[ FD ]
Line_5 $$ if (packageName.contains("*")) -->Line_8 $$ if (indexOf == 0 || context.getQualifiedName().startsWith(packageName.substring(0, indexOf))) [ CD ]
Line_10 $$ processSubPackages(context, new Processor<PsiPackage>() -->Line_12 $$ String name = psiPackage.getName()[ CD ]
Line_12 $$ String name = psiPackage.getName()-->Line_13 $$ if (name != null && pattern.matcher(name).matches()) [ FD ]
Line_2 $$ public Collection<PsiPackage> resolvePackageName(@Nullable final PsiPackage context, final String packageName) -->Line_5 $$ if (packageName.contains("*")) [ FD ]
Line_10 $$ processSubPackages(context, new Processor<PsiPackage>() -->Line_16 $$ return true[ CD ]
Line_2 $$ public Collection<PsiPackage> resolvePackageName(@Nullable final PsiPackage context, final String packageName) -->Line_7 $$ int indexOf = packageName.indexOf("*")[ FD ]
Line_2 $$ public Collection<PsiPackage> resolvePackageName(@Nullable final PsiPackage context, final String packageName) -->Line_9 $$ final Pattern pattern = PatternUtil.fromMask(packageName)[ FD ]
Line_2 $$ public Collection<PsiPackage> resolvePackageName(@Nullable final PsiPackage context, final String packageName) -->Line_3 $$ if (context == null)[ FD ]
Line_2 $$ public Collection<PsiPackage> resolvePackageName(@Nullable final PsiPackage context, final String packageName) -->Line_3 $$ if (context == null)[ CD ]
Line_2 $$ public Collection<PsiPackage> resolvePackageName(@Nullable final PsiPackage context, final String packageName) -->Line_8 $$ if (indexOf == 0 || context.getQualifiedName().startsWith(packageName.substring(0, indexOf))) [ FD ]
Line_10 $$ processSubPackages(context, new Processor<PsiPackage>() -->Line_12 $$ String name = psiPackage.getName()[ FD ]
Line_2 $$ public Collection<PsiPackage> resolvePackageName(@Nullable final PsiPackage context, final String packageName) -->Line_22 $$ return super.resolvePackageName(context, packageName)[ CD ]
Line_5 $$ if (packageName.contains("*")) -->Line_6 $$ final Set<PsiPackage> packages = new LinkedHashSet<PsiPackage>()[ CD ]
Line_8 $$ if (indexOf == 0 || context.getQualifiedName().startsWith(packageName.substring(0, indexOf))) -->Line_9 $$ final Pattern pattern = PatternUtil.fromMask(packageName)[ CD ]
Line_9 $$ final Pattern pattern = PatternUtil.fromMask(packageName)-->Line_13 $$ if (name != null && pattern.matcher(name).matches()) [ FD ]
Line_2 $$ public Collection<PsiPackage> resolvePackageName(@Nullable final PsiPackage context, final String packageName) -->Line_22 $$ return super.resolvePackageName(context, packageName)[ FD ]
Line_10 $$ processSubPackages(context, new Processor<PsiPackage>() -->Line_13 $$ if (name != null && pattern.matcher(name).matches()) [ CD ]
Line_5 $$ if (packageName.contains("*")) -->Line_7 $$ int indexOf = packageName.indexOf("*")[ CD ]
