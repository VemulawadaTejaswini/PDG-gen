Line_2 $$ private static PrivateKey read(String fileName) throws IOException -->Line_9 $$ List<String> lines = FileUtilRt.loadLines(fileName, "UTF-8")[ FD ]
Line_15 $$ RSAPrivateCrtKeySpec keySpec = getRSAKeySpec(keyBytes)-->Line_17 $$ return factory.generatePrivate(keySpec)[ FD ]
Line_3 $$ KeyFactory factory-->Line_27 $$ return factory.generatePrivate(keySpec)[ FD ]
Line_13 $$ List<String> strings = lines.subList(i + 1, lines.size())-->Line_14 $$ byte[] keyBytes = readKeyMaterial(P1_END_MARKER, strings)[ FD ]
Line_12 $$ if (line.contains(P1_BEGIN_MARKER)) -->Line_15 $$ RSAPrivateCrtKeySpec keySpec = getRSAKeySpec(keyBytes)[ CD ]
Line_10 $$ for (int i = 0; i < lines.size(); i++) -->Line_22 $$ if (line.contains(P8_BEGIN_MARKER)) [ CD ]
Line_22 $$ if (line.contains(P8_BEGIN_MARKER)) -->Line_24 $$ byte[] keyBytes = readKeyMaterial(P8_END_MARKER, strings)[ CD ]
Line_10 $$ for (int i = 0; i < lines.size(); i++) -->Line_11 $$ String line = lines.get(i)[ CD ]
Line_15 $$ RSAPrivateCrtKeySpec keySpec = getRSAKeySpec(keyBytes)-->Line_27 $$ return factory.generatePrivate(keySpec)[ FD ]
Line_12 $$ if (line.contains(P1_BEGIN_MARKER)) -->Line_13 $$ List<String> strings = lines.subList(i + 1, lines.size())[ CD ]
Line_14 $$ byte[] keyBytes = readKeyMaterial(P1_END_MARKER, strings)-->Line_15 $$ RSAPrivateCrtKeySpec keySpec = getRSAKeySpec(keyBytes)[ FD ]
Line_13 $$ List<String> strings = lines.subList(i + 1, lines.size())-->Line_24 $$ byte[] keyBytes = readKeyMaterial(P8_END_MARKER, strings)[ FD ]
Line_3 $$ KeyFactory factory-->Line_5 $$ factory = KeyFactory.getInstance("RSA")[ FD ]
Line_11 $$ String line = lines.get(i)-->Line_12 $$ if (line.contains(P1_BEGIN_MARKER)) [ FD ]
Line_9 $$ List<String> lines = FileUtilRt.loadLines(fileName, "UTF-8")-->Line_11 $$ String line = lines.get(i)[ FD ]
Line_2 $$ private static PrivateKey read(String fileName) throws IOException -->Line_10 $$ for (int i = 0; i < lines.size(); i++) [ CD ]
Line_9 $$ List<String> lines = FileUtilRt.loadLines(fileName, "UTF-8")-->Line_10 $$ for (int i = 0; i < lines.size(); i++) [ FD ]
Line_9 $$ List<String> lines = FileUtilRt.loadLines(fileName, "UTF-8")-->Line_23 $$ List<String> strings = lines.subList(i + 1, lines.size())[ FD ]
Line_5 $$ factory = KeyFactory.getInstance("RSA")-->Line_27 $$ return factory.generatePrivate(keySpec)[ FD ]
Line_9 $$ List<String> lines = FileUtilRt.loadLines(fileName, "UTF-8")-->Line_13 $$ List<String> strings = lines.subList(i + 1, lines.size())[ FD ]
Line_12 $$ if (line.contains(P1_BEGIN_MARKER)) -->Line_14 $$ byte[] keyBytes = readKeyMaterial(P1_END_MARKER, strings)[ CD ]
Line_22 $$ if (line.contains(P8_BEGIN_MARKER)) -->Line_23 $$ List<String> strings = lines.subList(i + 1, lines.size())[ CD ]
Line_2 $$ private static PrivateKey read(String fileName) throws IOException -->Line_9 $$ List<String> lines = FileUtilRt.loadLines(fileName, "UTF-8")[ CD ]
Line_5 $$ factory = KeyFactory.getInstance("RSA")-->Line_17 $$ return factory.generatePrivate(keySpec)[ FD ]
Line_10 $$ for (int i = 0; i < lines.size(); i++) -->Line_12 $$ if (line.contains(P1_BEGIN_MARKER)) [ CD ]
Line_11 $$ String line = lines.get(i)-->Line_22 $$ if (line.contains(P8_BEGIN_MARKER)) [ FD ]
Line_10 $$ for (int i = 0; i < lines.size(); i++) -->Line_11 $$ String line = lines.get(i)[ FD ]
Line_2 $$ private static PrivateKey read(String fileName) throws IOException -->Line_3 $$ KeyFactory factory[ CD ]
Line_3 $$ KeyFactory factory-->Line_17 $$ return factory.generatePrivate(keySpec)[ FD ]
