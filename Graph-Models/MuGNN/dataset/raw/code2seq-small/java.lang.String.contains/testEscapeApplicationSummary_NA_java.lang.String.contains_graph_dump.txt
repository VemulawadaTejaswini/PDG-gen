Line_3 $$ RMApp app = mock(RMAppImpl.class)-->Line_4 $$ when(app.getApplicationId()).thenReturn(ApplicationId.newInstance(100L, 1))[ FD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_5 $$ when(app.getName()).thenReturn("Multiline\n\n\r\rAppName")[ CD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_16 $$ Assert.assertTrue(msg.contains("Multiline" + escaped + "UserName"))[ CD ]
Line_10 $$ String msg = summary.toString()-->Line_13 $$ Assert.assertFalse(msg.contains("\r"))[ FD ]
Line_10 $$ String msg = summary.toString()-->Line_12 $$ Assert.assertFalse(msg.contains("\n"))[ FD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_13 $$ Assert.assertFalse(msg.contains("\r"))[ CD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_12 $$ Assert.assertFalse(msg.contains("\n"))[ CD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_4 $$ when(app.getApplicationId()).thenReturn(ApplicationId.newInstance(100L, 1))[ CD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_17 $$ Assert.assertTrue(msg.contains("Multiline" + escaped + "QueueName"))[ CD ]
Line_3 $$ RMApp app = mock(RMAppImpl.class)-->Line_8 $$ when(app.getState()).thenReturn(RMAppState.RUNNING)[ FD ]
Line_10 $$ String msg = summary.toString()-->Line_15 $$ Assert.assertTrue(msg.contains("Multiline" + escaped + "AppName"))[ FD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_6 $$ when(app.getUser()).thenReturn("Multiline\n\n\r\rUserName")[ CD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_8 $$ when(app.getState()).thenReturn(RMAppState.RUNNING)[ CD ]
Line_3 $$ RMApp app = mock(RMAppImpl.class)-->Line_5 $$ when(app.getName()).thenReturn("Multiline\n\n\r\rAppName")[ FD ]
Line_3 $$ RMApp app = mock(RMAppImpl.class)-->Line_6 $$ when(app.getUser()).thenReturn("Multiline\n\n\r\rUserName")[ FD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_7 $$ when(app.getQueue()).thenReturn("Multiline\n\n\r\rQueueName")[ CD ]
Line_3 $$ RMApp app = mock(RMAppImpl.class)-->Line_9 $$ RMAppManager.ApplicationSummary.SummaryBuilder summary = new RMAppManager.ApplicationSummary().createAppSummary(app)[ FD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_15 $$ Assert.assertTrue(msg.contains("Multiline" + escaped + "AppName"))[ CD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_3 $$ RMApp app = mock(RMAppImpl.class)[ CD ]
Line_9 $$ RMAppManager.ApplicationSummary.SummaryBuilder summary = new RMAppManager.ApplicationSummary().createAppSummary(app)-->Line_10 $$ String msg = summary.toString()[ FD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_11 $$ LOG.info("summary: " + msg)[ CD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_9 $$ RMAppManager.ApplicationSummary.SummaryBuilder summary = new RMAppManager.ApplicationSummary().createAppSummary(app)[ CD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_14 $$ String escaped = "\\n\\n\\r\\r"[ CD ]
Line_10 $$ String msg = summary.toString()-->Line_17 $$ Assert.assertTrue(msg.contains("Multiline" + escaped + "QueueName"))[ FD ]
Line_2 $$ public void testEscapeApplicationSummary() -->Line_10 $$ String msg = summary.toString()[ CD ]
Line_10 $$ String msg = summary.toString()-->Line_16 $$ Assert.assertTrue(msg.contains("Multiline" + escaped + "UserName"))[ FD ]
Line_3 $$ RMApp app = mock(RMAppImpl.class)-->Line_7 $$ when(app.getQueue()).thenReturn("Multiline\n\n\r\rQueueName")[ FD ]
