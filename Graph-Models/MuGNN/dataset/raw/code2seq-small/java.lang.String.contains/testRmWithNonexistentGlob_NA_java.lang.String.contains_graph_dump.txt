Line_2 $$ public void testRmWithNonexistentGlob() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testRmWithNonexistentGlob() throws Exception -->Line_9 $$ System.setErr(err)[ CD ]
Line_2 $$ public void testRmWithNonexistentGlob() throws Exception -->Line_4 $$ FsShell shell = new FsShell()[ CD ]
Line_4 $$ FsShell shell = new FsShell()-->Line_5 $$ shell.setConf(conf)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ shell.setConf(conf)[ FD ]
Line_2 $$ public void testRmWithNonexistentGlob() throws Exception -->Line_7 $$ final PrintStream err = new PrintStream(bytes)[ CD ]
Line_2 $$ public void testRmWithNonexistentGlob() throws Exception -->Line_10 $$ final String results[ CD ]
Line_10 $$ final String results-->Line_14 $$ results = bytes.toString()[ FD ]
Line_2 $$ public void testRmWithNonexistentGlob() throws Exception -->Line_5 $$ shell.setConf(conf)[ CD ]
Line_12 $$ int exit = shell.run(new String[] -->Line_13 $$ assertEquals(1, exit)[ FD ]
Line_4 $$ FsShell shell = new FsShell()-->Line_12 $$ int exit = shell.run(new String[] [ FD ]
Line_2 $$ public void testRmWithNonexistentGlob() throws Exception -->Line_8 $$ final PrintStream oldErr = System.err[ CD ]
Line_10 $$ final String results-->Line_15 $$ assertTrue(results.contains("rm: `nomatch*': No such file or directory"))[ FD ]
Line_6 $$ final ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_14 $$ results = bytes.toString()[ FD ]
Line_7 $$ final PrintStream err = new PrintStream(bytes)-->Line_9 $$ System.setErr(err)[ FD ]
Line_14 $$ results = bytes.toString()-->Line_15 $$ assertTrue(results.contains("rm: `nomatch*': No such file or directory"))[ FD ]
Line_7 $$ final PrintStream err = new PrintStream(bytes)-->Line_17 $$ IOUtils.closeStream(err)[ FD ]
Line_2 $$ public void testRmWithNonexistentGlob() throws Exception -->Line_6 $$ final ByteArrayOutputStream bytes = new ByteArrayOutputStream()[ CD ]
Line_8 $$ final PrintStream oldErr = System.err-->Line_18 $$ System.setErr(oldErr)[ FD ]
