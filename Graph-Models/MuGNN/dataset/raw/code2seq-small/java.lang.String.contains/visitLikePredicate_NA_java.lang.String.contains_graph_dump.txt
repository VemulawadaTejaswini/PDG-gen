Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_3 $$ Object value = process(node.getValue(), context)[ CD ]
Line_4 $$ if (value == null) -->Line_5 $$ return null[ CD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_21 $$ if (value instanceof Slice && pattern instanceof Slice && (escape == null || escape instanceof Slice)) [ CD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_14 $$ Object escape = null[ CD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_30 $$ if (pattern instanceof Slice && escape == null) [ CD ]
Line_3 $$ Object value = process(node.getValue(), context)-->Line_33 $$ return new ComparisonExpression(ComparisonExpression.Type.EQUAL, toExpression(value, expressionTypes.get(node.getValue())), toExpression(pattern, expressionTypes.get(node.getPattern())))[ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_7 $$ if (value instanceof Slice && node.getPattern() instanceof StringLiteral && (node.getEscape() instanceof StringLiteral || node.getEscape() == null)) [ FD ]
Line_31 $$ String stringPattern = ((Slice) pattern).toStringUtf8()-->Line_32 $$ if (!stringPattern.contains("%") && !stringPattern.contains("_")) [ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_37 $$ if (node.getEscape() != null) [ CD ]
Line_10 $$ Object pattern = process(node.getPattern(), context)-->Line_40 $$ return new LikePredicate(toExpression(value, expressionTypes.get(node.getValue())), toExpression(pattern, expressionTypes.get(node.getPattern())), optimizedEscape)[ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_37 $$ if (node.getEscape() != null) [ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_40 $$ return new LikePredicate(toExpression(value, expressionTypes.get(node.getValue())), toExpression(pattern, expressionTypes.get(node.getPattern())), optimizedEscape)[ FD ]
Line_26 $$ regex = LikeFunctions.likePattern((Slice) pattern, (Slice) escape)-->Line_28 $$ return LikeFunctions.like((Slice) value, regex)[ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_16 $$ escape = process(node.getEscape(), context)[ FD ]
Line_14 $$ Object escape = null-->Line_17 $$ if (escape == null) [ FD ]
Line_37 $$ if (node.getEscape() != null) -->Line_38 $$ optimizedEscape = toExpression(escape, expressionTypes.get(node.getEscape()))[ CD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_4 $$ if (value == null) [ CD ]
Line_11 $$ if (pattern == null) -->Line_12 $$ return null[ CD ]
Line_22 $$ Regex regex-->Line_26 $$ regex = LikeFunctions.likePattern((Slice) pattern, (Slice) escape)[ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_10 $$ Object pattern = process(node.getPattern(), context)[ FD ]
Line_21 $$ if (value instanceof Slice && pattern instanceof Slice && (escape == null || escape instanceof Slice)) -->Line_22 $$ Regex regex[ CD ]
Line_30 $$ if (pattern instanceof Slice && escape == null) -->Line_31 $$ String stringPattern = ((Slice) pattern).toStringUtf8()[ CD ]
Line_17 $$ if (escape == null) -->Line_18 $$ return null[ CD ]
Line_23 $$ if (escape == null) -->Line_26 $$ regex = LikeFunctions.likePattern((Slice) pattern, (Slice) escape)[ CD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_11 $$ if (pattern == null) [ CD ]
Line_10 $$ Object pattern = process(node.getPattern(), context)-->Line_33 $$ return new ComparisonExpression(ComparisonExpression.Type.EQUAL, toExpression(value, expressionTypes.get(node.getValue())), toExpression(pattern, expressionTypes.get(node.getPattern())))[ FD ]
Line_14 $$ Object escape = null-->Line_23 $$ if (escape == null) [ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_7 $$ if (value instanceof Slice && node.getPattern() instanceof StringLiteral && (node.getEscape() instanceof StringLiteral || node.getEscape() == null)) [ CD ]
Line_14 $$ Object escape = null-->Line_38 $$ optimizedEscape = toExpression(escape, expressionTypes.get(node.getEscape()))[ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_10 $$ Object pattern = process(node.getPattern(), context)[ CD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_15 $$ if (node.getEscape() != null) [ CD ]
Line_36 $$ Expression optimizedEscape = null-->Line_38 $$ optimizedEscape = toExpression(escape, expressionTypes.get(node.getEscape()))[ FD ]
Line_24 $$ regex = LikeFunctions.likePattern((Slice) pattern)-->Line_28 $$ return LikeFunctions.like((Slice) value, regex)[ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_38 $$ optimizedEscape = toExpression(escape, expressionTypes.get(node.getEscape()))[ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_33 $$ return new ComparisonExpression(ComparisonExpression.Type.EQUAL, toExpression(value, expressionTypes.get(node.getValue())), toExpression(pattern, expressionTypes.get(node.getPattern())))[ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_3 $$ Object value = process(node.getValue(), context)[ FD ]
Line_7 $$ if (value instanceof Slice && node.getPattern() instanceof StringLiteral && (node.getEscape() instanceof StringLiteral || node.getEscape() == null)) -->Line_8 $$ return LikeFunctions.like((Slice) value, getConstantPattern(node))[ CD ]
Line_14 $$ Object escape = null-->Line_16 $$ escape = process(node.getEscape(), context)[ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_8 $$ return LikeFunctions.like((Slice) value, getConstantPattern(node))[ FD ]
Line_16 $$ escape = process(node.getEscape(), context)-->Line_23 $$ if (escape == null) [ FD ]
Line_21 $$ if (value instanceof Slice && pattern instanceof Slice && (escape == null || escape instanceof Slice)) -->Line_28 $$ return LikeFunctions.like((Slice) value, regex)[ CD ]
Line_21 $$ if (value instanceof Slice && pattern instanceof Slice && (escape == null || escape instanceof Slice)) -->Line_23 $$ if (escape == null) [ CD ]
Line_32 $$ if (!stringPattern.contains("%") && !stringPattern.contains("_")) -->Line_33 $$ return new ComparisonExpression(ComparisonExpression.Type.EQUAL, toExpression(value, expressionTypes.get(node.getValue())), toExpression(pattern, expressionTypes.get(node.getPattern())))[ CD ]
Line_24 $$ regex = LikeFunctions.likePattern((Slice) pattern)-->Line_26 $$ regex = LikeFunctions.likePattern((Slice) pattern, (Slice) escape)[ FD ]
Line_15 $$ if (node.getEscape() != null) -->Line_17 $$ if (escape == null) [ CD ]
Line_3 $$ Object value = process(node.getValue(), context)-->Line_40 $$ return new LikePredicate(toExpression(value, expressionTypes.get(node.getValue())), toExpression(pattern, expressionTypes.get(node.getPattern())), optimizedEscape)[ FD ]
Line_23 $$ if (escape == null) -->Line_24 $$ regex = LikeFunctions.likePattern((Slice) pattern)[ CD ]
Line_22 $$ Regex regex-->Line_28 $$ return LikeFunctions.like((Slice) value, regex)[ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_40 $$ return new LikePredicate(toExpression(value, expressionTypes.get(node.getValue())), toExpression(pattern, expressionTypes.get(node.getPattern())), optimizedEscape)[ CD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_15 $$ if (node.getEscape() != null) [ FD ]
Line_16 $$ escape = process(node.getEscape(), context)-->Line_17 $$ if (escape == null) [ FD ]
Line_16 $$ escape = process(node.getEscape(), context)-->Line_38 $$ optimizedEscape = toExpression(escape, expressionTypes.get(node.getEscape()))[ FD ]
Line_22 $$ Regex regex-->Line_24 $$ regex = LikeFunctions.likePattern((Slice) pattern)[ FD ]
Line_10 $$ Object pattern = process(node.getPattern(), context)-->Line_11 $$ if (pattern == null) [ FD ]
Line_30 $$ if (pattern instanceof Slice && escape == null) -->Line_32 $$ if (!stringPattern.contains("%") && !stringPattern.contains("_")) [ CD ]
Line_3 $$ Object value = process(node.getValue(), context)-->Line_4 $$ if (value == null) [ FD ]
Line_2 $$ protected Object visitLikePredicate(LikePredicate node, Object context) -->Line_36 $$ Expression optimizedEscape = null[ CD ]
Line_15 $$ if (node.getEscape() != null) -->Line_16 $$ escape = process(node.getEscape(), context)[ CD ]
