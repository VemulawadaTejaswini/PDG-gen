Line_2 $$ public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException -->Line_21 $$ DBConnectionManager.getInstance().addConnectionProvider(NON_TX_DATA_SOURCE_PREFIX + getInstanceName(), new ConnectionProvider() [ CD ]
Line_2 $$ public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException -->Line_40 $$ super.initialize(loadHelper, signaler)[ CD ]
Line_9 $$ DBConnectionManager.getInstance().addConnectionProvider(TX_DATA_SOURCE_PREFIX + getInstanceName(), new ConnectionProvider() -->Line_11 $$ return DataSourceUtils.doGetConnection(dataSource)[ CD ]
Line_2 $$ public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException -->Line_40 $$ super.initialize(loadHelper, signaler)[ FD ]
Line_2 $$ public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException -->Line_18 $$ DataSource nonTxDataSource = SchedulerFactoryBean.getConfigTimeNonTransactionalDataSource()[ CD ]
Line_2 $$ public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException -->Line_9 $$ DBConnectionManager.getInstance().addConnectionProvider(TX_DATA_SOURCE_PREFIX + getInstanceName(), new ConnectionProvider() [ CD ]
Line_2 $$ public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException -->Line_4 $$ if (this.dataSource == null) [ CD ]
Line_2 $$ public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException -->Line_20 $$ setNonManagedTXDataSource(NON_TX_DATA_SOURCE_PREFIX + getInstanceName())[ CD ]
Line_21 $$ DBConnectionManager.getInstance().addConnectionProvider(NON_TX_DATA_SOURCE_PREFIX + getInstanceName(), new ConnectionProvider() -->Line_23 $$ return nonTxDataSourceToUse.getConnection()[ CD ]
Line_2 $$ public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException -->Line_3 $$ this.dataSource = SchedulerFactoryBean.getConfigTimeDataSource()[ CD ]
Line_33 $$ if (productName != null && productName.toLowerCase().contains("hsql")) -->Line_35 $$ setLockHandler(new SimpleSemaphore())[ CD ]
Line_2 $$ public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException -->Line_8 $$ setDontSetAutoCommitFalse(true)[ CD ]
Line_2 $$ public void initialize(ClassLoadHelper loadHelper, SchedulerSignaler signaler) throws SchedulerConfigException -->Line_7 $$ setDataSource(TX_DATA_SOURCE_PREFIX + getInstanceName())[ CD ]
Line_33 $$ if (productName != null && productName.toLowerCase().contains("hsql")) -->Line_34 $$ setUseDBLocks(false)[ CD ]
