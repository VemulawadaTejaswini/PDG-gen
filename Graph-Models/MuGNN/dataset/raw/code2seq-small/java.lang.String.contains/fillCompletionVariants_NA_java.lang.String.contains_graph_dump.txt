Line_21 $$ final PsiFile originalFile = parameters.getOriginalFile()-->Line_23 $$ addVariantsFromIndex(result, originalFile, PyFunctionNameIndex.KEY, getFunctionInsertHandler(parent), IS_TOPLEVEL, PyFunction.class)[ FD ]
Line_9 $$ if (parent instanceof PyStringLiteralExpression) -->Line_10 $$ String prefix = parent.getText().substring(0, parameters.getOffset() - parent.getTextRange().getStartOffset())[ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_24 $$ addVariantsFromIndex(result, originalFile, PyVariableNameIndex.KEY, parent instanceof PyStringLiteralExpression ? STRING_LITERAL_INSERT_HANDLER : IMPORTING_INSERT_HANDLER, IS_TOPLEVEL, PyTargetExpression.class)[ FD ]
Line_11 $$ if (prefix.contains(".")) -->Line_12 $$ return[ CD ]
Line_21 $$ final PsiFile originalFile = parameters.getOriginalFile()-->Line_22 $$ addVariantsFromIndex(result, originalFile, PyClassNameIndex.KEY, parent instanceof PyStringLiteralExpression ? STRING_LITERAL_INSERT_HANDLER : IMPORTING_INSERT_HANDLER, Conditions.<PyClass>alwaysTrue(), PyClass.class)[ FD ]
Line_5 $$ final PsiElement parent = element.getParent()-->Line_23 $$ addVariantsFromIndex(result, originalFile, PyFunctionNameIndex.KEY, getFunctionInsertHandler(parent), IS_TOPLEVEL, PyFunction.class)[ FD ]
Line_3 $$ if (parameters.isExtendedCompletion()) -->Line_4 $$ final PsiElement element = parameters.getPosition()[ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_25 $$ addVariantsFromModules(result, originalFile, parent instanceof PyStringLiteralExpression)[ FD ]
Line_3 $$ if (parameters.isExtendedCompletion()) -->Line_22 $$ addVariantsFromIndex(result, originalFile, PyClassNameIndex.KEY, parent instanceof PyStringLiteralExpression ? STRING_LITERAL_INSERT_HANDLER : IMPORTING_INSERT_HANDLER, Conditions.<PyClass>alwaysTrue(), PyClass.class)[ CD ]
Line_3 $$ if (parameters.isExtendedCompletion()) -->Line_15 $$ final FileViewProvider provider = element.getContainingFile().getViewProvider()[ CD ]
Line_4 $$ final PsiElement element = parameters.getPosition()-->Line_18 $$ if (PsiTreeUtil.getParentOfType(element, PyImportStatementBase.class) != null) [ FD ]
Line_3 $$ if (parameters.isExtendedCompletion()) -->Line_6 $$ if (parent instanceof PyReferenceExpression && ((PyReferenceExpression) parent).isQualified()) [ CD ]
Line_16 $$ if (provider instanceof MultiplePsiFilesPerDocumentFileViewProvider)-->Line_17 $$ return[ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_21 $$ final PsiFile originalFile = parameters.getOriginalFile()[ FD ]
Line_3 $$ if (parameters.isExtendedCompletion()) -->Line_25 $$ addVariantsFromModules(result, originalFile, parent instanceof PyStringLiteralExpression)[ CD ]
Line_3 $$ if (parameters.isExtendedCompletion()) -->Line_18 $$ if (PsiTreeUtil.getParentOfType(element, PyImportStatementBase.class) != null) [ CD ]
Line_3 $$ if (parameters.isExtendedCompletion()) -->Line_9 $$ if (parent instanceof PyStringLiteralExpression) [ CD ]
Line_5 $$ final PsiElement parent = element.getParent()-->Line_9 $$ if (parent instanceof PyStringLiteralExpression) [ FD ]
Line_3 $$ if (parameters.isExtendedCompletion()) -->Line_24 $$ addVariantsFromIndex(result, originalFile, PyVariableNameIndex.KEY, parent instanceof PyStringLiteralExpression ? STRING_LITERAL_INSERT_HANDLER : IMPORTING_INSERT_HANDLER, IS_TOPLEVEL, PyTargetExpression.class)[ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_10 $$ String prefix = parent.getText().substring(0, parameters.getOffset() - parent.getTextRange().getStartOffset())[ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_3 $$ if (parameters.isExtendedCompletion()) [ CD ]
Line_4 $$ final PsiElement element = parameters.getPosition()-->Line_5 $$ final PsiElement parent = element.getParent()[ FD ]
Line_3 $$ if (parameters.isExtendedCompletion()) -->Line_5 $$ final PsiElement parent = element.getParent()[ CD ]
Line_3 $$ if (parameters.isExtendedCompletion()) -->Line_21 $$ final PsiFile originalFile = parameters.getOriginalFile()[ CD ]
Line_3 $$ if (parameters.isExtendedCompletion()) -->Line_16 $$ if (provider instanceof MultiplePsiFilesPerDocumentFileViewProvider)[ CD ]
Line_21 $$ final PsiFile originalFile = parameters.getOriginalFile()-->Line_25 $$ addVariantsFromModules(result, originalFile, parent instanceof PyStringLiteralExpression)[ FD ]
Line_5 $$ final PsiElement parent = element.getParent()-->Line_10 $$ String prefix = parent.getText().substring(0, parameters.getOffset() - parent.getTextRange().getStartOffset())[ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_23 $$ addVariantsFromIndex(result, originalFile, PyFunctionNameIndex.KEY, getFunctionInsertHandler(parent), IS_TOPLEVEL, PyFunction.class)[ FD ]
Line_21 $$ final PsiFile originalFile = parameters.getOriginalFile()-->Line_24 $$ addVariantsFromIndex(result, originalFile, PyVariableNameIndex.KEY, parent instanceof PyStringLiteralExpression ? STRING_LITERAL_INSERT_HANDLER : IMPORTING_INSERT_HANDLER, IS_TOPLEVEL, PyTargetExpression.class)[ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_3 $$ if (parameters.isExtendedCompletion()) [ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_4 $$ final PsiElement element = parameters.getPosition()[ FD ]
Line_18 $$ if (PsiTreeUtil.getParentOfType(element, PyImportStatementBase.class) != null) -->Line_19 $$ return[ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_22 $$ addVariantsFromIndex(result, originalFile, PyClassNameIndex.KEY, parent instanceof PyStringLiteralExpression ? STRING_LITERAL_INSERT_HANDLER : IMPORTING_INSERT_HANDLER, Conditions.<PyClass>alwaysTrue(), PyClass.class)[ FD ]
Line_15 $$ final FileViewProvider provider = element.getContainingFile().getViewProvider()-->Line_16 $$ if (provider instanceof MultiplePsiFilesPerDocumentFileViewProvider)[ FD ]
Line_6 $$ if (parent instanceof PyReferenceExpression && ((PyReferenceExpression) parent).isQualified()) -->Line_7 $$ return[ CD ]
Line_3 $$ if (parameters.isExtendedCompletion()) -->Line_23 $$ addVariantsFromIndex(result, originalFile, PyFunctionNameIndex.KEY, getFunctionInsertHandler(parent), IS_TOPLEVEL, PyFunction.class)[ CD ]
Line_10 $$ String prefix = parent.getText().substring(0, parameters.getOffset() - parent.getTextRange().getStartOffset())-->Line_11 $$ if (prefix.contains(".")) [ FD ]
Line_4 $$ final PsiElement element = parameters.getPosition()-->Line_15 $$ final FileViewProvider provider = element.getContainingFile().getViewProvider()[ FD ]
Line_9 $$ if (parent instanceof PyStringLiteralExpression) -->Line_11 $$ if (prefix.contains(".")) [ CD ]
