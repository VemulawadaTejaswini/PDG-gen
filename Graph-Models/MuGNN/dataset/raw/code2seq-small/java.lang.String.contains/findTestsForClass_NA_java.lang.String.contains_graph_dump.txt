Line_2 $$ public Collection<PsiElement> findTestsForClass(@NotNull PsiElement element) -->Line_22 $$ Collection<String> names = PyFunctionNameIndex.allKeys(element.getProject())[ FD ]
Line_6 $$ String sourceName = source.getName()-->Line_13 $$ if (eachName.contains(sourceName)) [ FD ]
Line_9 $$ List<Pair<? extends PsiNamedElement, Integer>> classesWithProximities = new ArrayList<Pair<? extends PsiNamedElement, Integer>>()-->Line_27 $$ classesWithProximities.add(new Pair<PsiNamedElement, Integer>(eachFunction, TestFinderHelper.calcTestNameProximity(sourceName, eachName)))[ FD ]
Line_2 $$ public Collection<PsiElement> findTestsForClass(@NotNull PsiElement element) -->Line_14 $$ for (PyClass eachClass : PyClassNameIndex.find(eachName, element.getProject(), GlobalSearchScope.projectScope(element.getProject()))) [ FD ]
Line_9 $$ List<Pair<? extends PsiNamedElement, Integer>> classesWithProximities = new ArrayList<Pair<? extends PsiNamedElement, Integer>>()-->Line_33 $$ return TestFinderHelper.getSortedElements(classesWithProximities, true)[ FD ]
Line_12 $$ for (String eachName : names) -->Line_14 $$ for (PyClass eachClass : PyClassNameIndex.find(eachName, element.getProject(), GlobalSearchScope.projectScope(element.getProject()))) [ FD ]
Line_14 $$ for (PyClass eachClass : PyClassNameIndex.find(eachName, element.getProject(), GlobalSearchScope.projectScope(element.getProject()))) -->Line_15 $$ if (PythonUnitTestUtil.isTestCaseClass(eachClass) || PythonDocTestUtil.isDocTestClass(eachClass)) [ FD ]
Line_3 $$ PyDocStringOwner source = findSourceElement(element)-->Line_10 $$ if (source instanceof PyClass) [ FD ]
Line_2 $$ public Collection<PsiElement> findTestsForClass(@NotNull PsiElement element) -->Line_11 $$ Collection<String> names = PyClassNameIndex.allKeys(element.getProject())[ FD ]
Line_12 $$ for (String eachName : names) -->Line_13 $$ if (eachName.contains(sourceName)) [ FD ]
Line_2 $$ public Collection<PsiElement> findTestsForClass(@NotNull PsiElement element) -->Line_25 $$ for (PyFunction eachFunction : PyFunctionNameIndex.find(eachName, element.getProject(), GlobalSearchScope.projectScope(element.getProject()))) [ FD ]
Line_12 $$ for (String eachName : names) -->Line_16 $$ classesWithProximities.add(new Pair<PsiNamedElement, Integer>(eachClass, TestFinderHelper.calcTestNameProximity(sourceName, eachName)))[ FD ]
Line_3 $$ PyDocStringOwner source = findSourceElement(element)-->Line_4 $$ if (source == null)[ FD ]
Line_2 $$ public Collection<PsiElement> findTestsForClass(@NotNull PsiElement element) -->Line_6 $$ String sourceName = source.getName()[ CD ]
Line_2 $$ public Collection<PsiElement> findTestsForClass(@NotNull PsiElement element) -->Line_10 $$ if (source instanceof PyClass) [ CD ]
Line_12 $$ for (String eachName : names) -->Line_27 $$ classesWithProximities.add(new Pair<PsiNamedElement, Integer>(eachFunction, TestFinderHelper.calcTestNameProximity(sourceName, eachName)))[ FD ]
Line_2 $$ public Collection<PsiElement> findTestsForClass(@NotNull PsiElement element) -->Line_9 $$ List<Pair<? extends PsiNamedElement, Integer>> classesWithProximities = new ArrayList<Pair<? extends PsiNamedElement, Integer>>()[ CD ]
Line_12 $$ for (String eachName : names) -->Line_24 $$ if (eachName.contains(sourceName)) [ FD ]
Line_2 $$ public Collection<PsiElement> findTestsForClass(@NotNull PsiElement element) -->Line_3 $$ PyDocStringOwner source = findSourceElement(element)[ FD ]
Line_7 $$ if (sourceName == null)-->Line_8 $$ return Collections.emptySet()[ CD ]
Line_10 $$ if (source instanceof PyClass) -->Line_11 $$ Collection<String> names = PyClassNameIndex.allKeys(element.getProject())[ CD ]
Line_2 $$ public Collection<PsiElement> findTestsForClass(@NotNull PsiElement element) -->Line_33 $$ return TestFinderHelper.getSortedElements(classesWithProximities, true)[ CD ]
Line_2 $$ public Collection<PsiElement> findTestsForClass(@NotNull PsiElement element) -->Line_7 $$ if (sourceName == null)[ CD ]
Line_4 $$ if (source == null)-->Line_5 $$ return Collections.emptySet()[ CD ]
Line_6 $$ String sourceName = source.getName()-->Line_7 $$ if (sourceName == null)[ FD ]
Line_6 $$ String sourceName = source.getName()-->Line_27 $$ classesWithProximities.add(new Pair<PsiNamedElement, Integer>(eachFunction, TestFinderHelper.calcTestNameProximity(sourceName, eachName)))[ FD ]
Line_12 $$ for (String eachName : names) -->Line_25 $$ for (PyFunction eachFunction : PyFunctionNameIndex.find(eachName, element.getProject(), GlobalSearchScope.projectScope(element.getProject()))) [ FD ]
Line_25 $$ for (PyFunction eachFunction : PyFunctionNameIndex.find(eachName, element.getProject(), GlobalSearchScope.projectScope(element.getProject()))) -->Line_26 $$ if (PythonUnitTestUtil.isTestCaseFunction(eachFunction) || PythonDocTestUtil.isDocTestFunction(eachFunction)) [ FD ]
Line_10 $$ if (source instanceof PyClass) -->Line_22 $$ Collection<String> names = PyFunctionNameIndex.allKeys(element.getProject())[ CD ]
Line_6 $$ String sourceName = source.getName()-->Line_16 $$ classesWithProximities.add(new Pair<PsiNamedElement, Integer>(eachClass, TestFinderHelper.calcTestNameProximity(sourceName, eachName)))[ FD ]
Line_6 $$ String sourceName = source.getName()-->Line_24 $$ if (eachName.contains(sourceName)) [ FD ]
Line_9 $$ List<Pair<? extends PsiNamedElement, Integer>> classesWithProximities = new ArrayList<Pair<? extends PsiNamedElement, Integer>>()-->Line_16 $$ classesWithProximities.add(new Pair<PsiNamedElement, Integer>(eachClass, TestFinderHelper.calcTestNameProximity(sourceName, eachName)))[ FD ]
Line_2 $$ public Collection<PsiElement> findTestsForClass(@NotNull PsiElement element) -->Line_3 $$ PyDocStringOwner source = findSourceElement(element)[ CD ]
Line_2 $$ public Collection<PsiElement> findTestsForClass(@NotNull PsiElement element) -->Line_4 $$ if (source == null)[ CD ]
Line_3 $$ PyDocStringOwner source = findSourceElement(element)-->Line_6 $$ String sourceName = source.getName()[ FD ]
Line_26 $$ if (PythonUnitTestUtil.isTestCaseFunction(eachFunction) || PythonDocTestUtil.isDocTestFunction(eachFunction)) -->Line_27 $$ classesWithProximities.add(new Pair<PsiNamedElement, Integer>(eachFunction, TestFinderHelper.calcTestNameProximity(sourceName, eachName)))[ CD ]
Line_15 $$ if (PythonUnitTestUtil.isTestCaseClass(eachClass) || PythonDocTestUtil.isDocTestClass(eachClass)) -->Line_16 $$ classesWithProximities.add(new Pair<PsiNamedElement, Integer>(eachClass, TestFinderHelper.calcTestNameProximity(sourceName, eachName)))[ CD ]
