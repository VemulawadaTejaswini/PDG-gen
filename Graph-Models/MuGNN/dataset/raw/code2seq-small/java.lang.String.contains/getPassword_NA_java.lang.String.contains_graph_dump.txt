Line_19 $$ while (true) -->Line_20 $$ String password = getPassword(length, key)[ CD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_7 $$ if (key.contains(KEY2)) [ FD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_19 $$ while (true) [ CD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_10 $$ if (key.contains(KEY3)) [ CD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_13 $$ if (keysCount > length) [ FD ]
Line_3 $$ int keysCount = 0-->Line_17 $$ length = keysCount[ FD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_4 $$ if (key.contains(KEY1)) [ CD ]
Line_21 $$ if (key.contains(KEY1)) -->Line_22 $$ if (Validator.isNull(StringUtil.extractDigits(password))) [ CD ]
Line_3 $$ int keysCount = 0-->Line_8 $$ keysCount++[ FD ]
Line_31 $$ if (key.contains(KEY3)) -->Line_32 $$ if (password.equals(StringUtil.toUpperCase(password))) [ CD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_26 $$ if (key.contains(KEY2)) [ FD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_3 $$ int keysCount = 0[ CD ]
Line_14 $$ if (_log.isWarnEnabled()) -->Line_15 $$ _log.warn("Length is too short")[ CD ]
Line_17 $$ length = keysCount-->Line_20 $$ String password = getPassword(length, key)[ FD ]
Line_3 $$ int keysCount = 0-->Line_13 $$ if (keysCount > length) [ FD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_21 $$ if (key.contains(KEY1)) [ FD ]
Line_7 $$ if (key.contains(KEY2)) -->Line_8 $$ keysCount++[ CD ]
Line_13 $$ if (keysCount > length) -->Line_17 $$ length = keysCount[ CD ]
Line_3 $$ int keysCount = 0-->Line_11 $$ keysCount++[ FD ]
Line_4 $$ if (key.contains(KEY1)) -->Line_5 $$ keysCount++[ CD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_10 $$ if (key.contains(KEY3)) [ FD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_4 $$ if (key.contains(KEY1)) [ FD ]
Line_19 $$ while (true) -->Line_36 $$ return password[ CD ]
Line_19 $$ while (true) -->Line_21 $$ if (key.contains(KEY1)) [ CD ]
Line_20 $$ String password = getPassword(length, key)-->Line_27 $$ if (password.equals(StringUtil.toLowerCase(password))) [ FD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_7 $$ if (key.contains(KEY2)) [ CD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_20 $$ String password = getPassword(length, key)[ FD ]
Line_20 $$ String password = getPassword(length, key)-->Line_32 $$ if (password.equals(StringUtil.toUpperCase(password))) [ FD ]
Line_19 $$ while (true) -->Line_26 $$ if (key.contains(KEY2)) [ CD ]
Line_3 $$ int keysCount = 0-->Line_5 $$ keysCount++[ FD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_13 $$ if (keysCount > length) [ CD ]
Line_10 $$ if (key.contains(KEY3)) -->Line_11 $$ keysCount++[ CD ]
Line_19 $$ while (true) -->Line_31 $$ if (key.contains(KEY3)) [ CD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_31 $$ if (key.contains(KEY3)) [ FD ]
Line_20 $$ String password = getPassword(length, key)-->Line_22 $$ if (Validator.isNull(StringUtil.extractDigits(password))) [ FD ]
Line_26 $$ if (key.contains(KEY2)) -->Line_27 $$ if (password.equals(StringUtil.toLowerCase(password))) [ CD ]
Line_13 $$ if (keysCount > length) -->Line_14 $$ if (_log.isWarnEnabled()) [ CD ]
Line_2 $$ public static String getPassword(String key, int length) -->Line_17 $$ length = keysCount[ FD ]
