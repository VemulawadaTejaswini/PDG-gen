Line_2 $$ protected void doRetrieveMatchingPortletContextResources(PortletContext portletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_8 $$ if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <= StringUtils.countOccurrencesOf(fullPattern, "/"))) [ FD ]
Line_11 $$ if (getPathMatcher().match(fullPattern, currPath)) -->Line_12 $$ result.add(new PortletContextResource(portletContext, currPath))[ CD ]
Line_2 $$ protected void doRetrieveMatchingPortletContextResources(PortletContext portletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_9 $$ doRetrieveMatchingPortletContextResources(portletContext, fullPattern, currPath, result)[ FD ]
Line_8 $$ if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <= StringUtils.countOccurrencesOf(fullPattern, "/"))) -->Line_9 $$ doRetrieveMatchingPortletContextResources(portletContext, fullPattern, currPath, result)[ CD ]
Line_2 $$ protected void doRetrieveMatchingPortletContextResources(PortletContext portletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_3 $$ Set<String> candidates = portletContext.getResourcePaths(dir)[ FD ]
Line_3 $$ Set<String> candidates = portletContext.getResourcePaths(dir)-->Line_4 $$ if (candidates != null) [ FD ]
Line_6 $$ for (Iterator<String> it = candidates.iterator(); it.hasNext(); ) -->Line_7 $$ String currPath = it.next()[ CD ]
Line_3 $$ Set<String> candidates = portletContext.getResourcePaths(dir)-->Line_6 $$ for (Iterator<String> it = candidates.iterator(); it.hasNext(); ) [ FD ]
Line_6 $$ for (Iterator<String> it = candidates.iterator(); it.hasNext(); ) -->Line_7 $$ String currPath = it.next()[ FD ]
Line_2 $$ protected void doRetrieveMatchingPortletContextResources(PortletContext portletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_4 $$ if (candidates != null) [ CD ]
Line_2 $$ protected void doRetrieveMatchingPortletContextResources(PortletContext portletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_12 $$ result.add(new PortletContextResource(portletContext, currPath))[ FD ]
Line_2 $$ protected void doRetrieveMatchingPortletContextResources(PortletContext portletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_5 $$ boolean dirDepthNotFixed = fullPattern.contains("**")[ FD ]
Line_7 $$ String currPath = it.next()-->Line_11 $$ if (getPathMatcher().match(fullPattern, currPath)) [ FD ]
Line_4 $$ if (candidates != null) -->Line_6 $$ for (Iterator<String> it = candidates.iterator(); it.hasNext(); ) [ CD ]
Line_6 $$ for (Iterator<String> it = candidates.iterator(); it.hasNext(); ) -->Line_8 $$ if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <= StringUtils.countOccurrencesOf(fullPattern, "/"))) [ CD ]
Line_7 $$ String currPath = it.next()-->Line_8 $$ if (currPath.endsWith("/") && (dirDepthNotFixed || StringUtils.countOccurrencesOf(currPath, "/") <= StringUtils.countOccurrencesOf(fullPattern, "/"))) [ FD ]
Line_7 $$ String currPath = it.next()-->Line_9 $$ doRetrieveMatchingPortletContextResources(portletContext, fullPattern, currPath, result)[ FD ]
Line_6 $$ for (Iterator<String> it = candidates.iterator(); it.hasNext(); ) -->Line_11 $$ if (getPathMatcher().match(fullPattern, currPath)) [ CD ]
Line_2 $$ protected void doRetrieveMatchingPortletContextResources(PortletContext portletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_11 $$ if (getPathMatcher().match(fullPattern, currPath)) [ FD ]
Line_4 $$ if (candidates != null) -->Line_5 $$ boolean dirDepthNotFixed = fullPattern.contains("**")[ CD ]
Line_2 $$ protected void doRetrieveMatchingPortletContextResources(PortletContext portletContext, String fullPattern, String dir, Set<Resource> result) throws IOException -->Line_3 $$ Set<String> candidates = portletContext.getResourcePaths(dir)[ CD ]
