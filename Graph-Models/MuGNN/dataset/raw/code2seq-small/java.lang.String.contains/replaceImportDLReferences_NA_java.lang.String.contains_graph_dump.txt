Line_25 $$ StringBundler sb = new StringBundler(6)-->Line_27 $$ sb.append(classPK)[ FD ]
Line_6 $$ Element referenceDataElement = portletDataContext.getReferenceDataElement(stagedModel, DLFileEntry.class, classPK)-->Line_8 $$ if (referenceDataElement != null) [ FD ]
Line_24 $$ if (_log.isWarnEnabled()) -->Line_29 $$ sb.append(stagedModel.getModelClassName())[ CD ]
Line_4 $$ for (Element referenceElement : referenceElements) -->Line_13 $$ String className = referenceElement.attributeValue("class-name")[ FD ]
Line_24 $$ if (_log.isWarnEnabled()) -->Line_32 $$ _log.warn(sb.toString())[ CD ]
Line_22 $$ if (_log.isDebugEnabled()) -->Line_23 $$ _log.debug(e, e)[ CD ]
Line_2 $$ protected String replaceImportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_29 $$ sb.append(stagedModel.getModelClassName())[ FD ]
Line_6 $$ Element referenceDataElement = portletDataContext.getReferenceDataElement(stagedModel, DLFileEntry.class, classPK)-->Line_9 $$ path = referenceDataElement.attributeValue("path")[ FD ]
Line_24 $$ if (_log.isWarnEnabled()) -->Line_31 $$ sb.append(stagedModel.getPrimaryKeyObj())[ CD ]
Line_37 $$ FileEntry importedFileEntry = null-->Line_48 $$ String url = DLUtil.getPreviewURL(importedFileEntry, importedFileEntry.getFileVersion(), null, StringPool.BLANK, false, false)[ FD ]
Line_11 $$ long groupId = GetterUtil.getLong(referenceElement.attributeValue("group-id"))-->Line_14 $$ path = ExportImportPathUtil.getModelPath(groupId, className, classPK)[ FD ]
Line_22 $$ if (_log.isDebugEnabled()) -->Line_24 $$ if (_log.isWarnEnabled()) [ CD ]
Line_24 $$ if (_log.isWarnEnabled()) -->Line_27 $$ sb.append(classPK)[ CD ]
Line_7 $$ String path = null-->Line_9 $$ path = referenceDataElement.attributeValue("path")[ FD ]
Line_48 $$ String url = DLUtil.getPreviewURL(importedFileEntry, importedFileEntry.getFileVersion(), null, StringPool.BLANK, false, false)-->Line_49 $$ content = StringUtil.replace(content, "[$dl-reference=" + path + "$]", url)[ FD ]
Line_7 $$ String path = null-->Line_12 $$ if (Validator.isNull(path)) [ FD ]
Line_2 $$ protected String replaceImportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_51 $$ return content[ CD ]
Line_2 $$ protected String replaceImportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_31 $$ sb.append(stagedModel.getPrimaryKeyObj())[ FD ]
Line_5 $$ long classPK = GetterUtil.getLong(referenceElement.attributeValue("class-pk"))-->Line_6 $$ Element referenceDataElement = portletDataContext.getReferenceDataElement(stagedModel, DLFileEntry.class, classPK)[ FD ]
Line_2 $$ protected String replaceImportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_35 $$ Map<Long, Long> dlFileEntryIds = (Map<Long, Long>) portletDataContext.getNewPrimaryKeysMap(DLFileEntry.class)[ FD ]
Line_24 $$ if (_log.isWarnEnabled()) -->Line_30 $$ sb.append(" with primary key ")[ CD ]
Line_25 $$ StringBundler sb = new StringBundler(6)-->Line_26 $$ sb.append("Unable to process file entry ")[ FD ]
Line_25 $$ StringBundler sb = new StringBundler(6)-->Line_29 $$ sb.append(stagedModel.getModelClassName())[ FD ]
Line_8 $$ if (referenceDataElement != null) -->Line_9 $$ path = referenceDataElement.attributeValue("path")[ CD ]
Line_12 $$ if (Validator.isNull(path)) -->Line_14 $$ path = ExportImportPathUtil.getModelPath(groupId, className, classPK)[ CD ]
Line_2 $$ protected String replaceImportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_3 $$ List<Element> referenceElements = portletDataContext.getReferenceElements(stagedModel, DLFileEntry.class)[ CD ]
Line_4 $$ for (Element referenceElement : referenceElements) -->Line_11 $$ long groupId = GetterUtil.getLong(referenceElement.attributeValue("group-id"))[ FD ]
Line_25 $$ StringBundler sb = new StringBundler(6)-->Line_31 $$ sb.append(stagedModel.getPrimaryKeyObj())[ FD ]
Line_43 $$ if (_log.isWarnEnabled()) -->Line_44 $$ _log.warn(pe.getMessage())[ CD ]
Line_2 $$ protected String replaceImportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_3 $$ List<Element> referenceElements = portletDataContext.getReferenceElements(stagedModel, DLFileEntry.class)[ FD ]
Line_5 $$ long classPK = GetterUtil.getLong(referenceElement.attributeValue("class-pk"))-->Line_14 $$ path = ExportImportPathUtil.getModelPath(groupId, className, classPK)[ FD ]
Line_39 $$ importedFileEntry = DLAppLocalServiceUtil.getFileEntry(fileEntryId)-->Line_48 $$ String url = DLUtil.getPreviewURL(importedFileEntry, importedFileEntry.getFileVersion(), null, StringPool.BLANK, false, false)[ FD ]
Line_25 $$ StringBundler sb = new StringBundler(6)-->Line_32 $$ _log.warn(sb.toString())[ FD ]
Line_5 $$ long classPK = GetterUtil.getLong(referenceElement.attributeValue("class-pk"))-->Line_36 $$ long fileEntryId = MapUtil.getLong(dlFileEntryIds, classPK, classPK)[ FD ]
Line_2 $$ protected String replaceImportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_20 $$ StagedModelDataHandlerUtil.importReferenceStagedModel(portletDataContext, stagedModel, DLFileEntry.class, classPK)[ FD ]
Line_4 $$ for (Element referenceElement : referenceElements) -->Line_5 $$ long classPK = GetterUtil.getLong(referenceElement.attributeValue("class-pk"))[ FD ]
Line_2 $$ protected String replaceImportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_49 $$ content = StringUtil.replace(content, "[$dl-reference=" + path + "$]", url)[ FD ]
Line_36 $$ long fileEntryId = MapUtil.getLong(dlFileEntryIds, classPK, classPK)-->Line_39 $$ importedFileEntry = DLAppLocalServiceUtil.getFileEntry(fileEntryId)[ FD ]
Line_35 $$ Map<Long, Long> dlFileEntryIds = (Map<Long, Long>) portletDataContext.getNewPrimaryKeysMap(DLFileEntry.class)-->Line_36 $$ long fileEntryId = MapUtil.getLong(dlFileEntryIds, classPK, classPK)[ FD ]
Line_9 $$ path = referenceDataElement.attributeValue("path")-->Line_14 $$ path = ExportImportPathUtil.getModelPath(groupId, className, classPK)[ FD ]
Line_2 $$ protected String replaceImportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_6 $$ Element referenceDataElement = portletDataContext.getReferenceDataElement(stagedModel, DLFileEntry.class, classPK)[ FD ]
Line_12 $$ if (Validator.isNull(path)) -->Line_13 $$ String className = referenceElement.attributeValue("class-name")[ CD ]
Line_25 $$ StringBundler sb = new StringBundler(6)-->Line_30 $$ sb.append(" with primary key ")[ FD ]
Line_24 $$ if (_log.isWarnEnabled()) -->Line_26 $$ sb.append("Unable to process file entry ")[ CD ]
Line_5 $$ long classPK = GetterUtil.getLong(referenceElement.attributeValue("class-pk"))-->Line_20 $$ StagedModelDataHandlerUtil.importReferenceStagedModel(portletDataContext, stagedModel, DLFileEntry.class, classPK)[ FD ]
Line_9 $$ path = referenceDataElement.attributeValue("path")-->Line_12 $$ if (Validator.isNull(path)) [ FD ]
Line_7 $$ String path = null-->Line_14 $$ path = ExportImportPathUtil.getModelPath(groupId, className, classPK)[ FD ]
Line_2 $$ protected String replaceImportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_16 $$ if (!content.contains("[$dl-reference=" + path + "$]")) [ FD ]
Line_24 $$ if (_log.isWarnEnabled()) -->Line_28 $$ sb.append(" for ")[ CD ]
Line_24 $$ if (_log.isWarnEnabled()) -->Line_25 $$ StringBundler sb = new StringBundler(6)[ CD ]
Line_5 $$ long classPK = GetterUtil.getLong(referenceElement.attributeValue("class-pk"))-->Line_27 $$ sb.append(classPK)[ FD ]
Line_41 $$ if (_log.isDebugEnabled()) -->Line_42 $$ _log.debug(pe, pe)[ CD ]
Line_13 $$ String className = referenceElement.attributeValue("class-name")-->Line_14 $$ path = ExportImportPathUtil.getModelPath(groupId, className, classPK)[ FD ]
Line_41 $$ if (_log.isDebugEnabled()) -->Line_43 $$ if (_log.isWarnEnabled()) [ CD ]
Line_25 $$ StringBundler sb = new StringBundler(6)-->Line_28 $$ sb.append(" for ")[ FD ]
Line_37 $$ FileEntry importedFileEntry = null-->Line_39 $$ importedFileEntry = DLAppLocalServiceUtil.getFileEntry(fileEntryId)[ FD ]
