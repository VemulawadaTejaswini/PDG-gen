Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_49 $$ if (object instanceof CommonCodeStyleSettings.IndentOptions) [ FD ]
Line_51 $$ if (OPTION_TAB_CHAR.equals(key)) -->Line_57 $$ if (OPTION_CONTINUATION_INDENT.equals(key)) [ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_11 $$ if (OPTION_NEW_LINE_AT_EOF.equals(key)) [ FD ]
Line_17 $$ if (OPTION_SPACE_AFTER_BINARY_OPERATOR.equals(key)) -->Line_18 $$ boolean addSpace = valueToBoolean(key, value)[ CD ]
Line_32 $$ boolean insertSpace = valueToBoolean(key, value)-->Line_41 $$ commonSettings.SPACE_BEFORE_DO_LBRACE = insertSpace[ FD ]
Line_59 $$ if (OPTION_TAB_SIZE.equals(key)) -->Line_63 $$ if (continuationTabs >= 0) [ CD ]
Line_31 $$ if (OPTION_SPACE_AFTER_CLOSING_BRACE_IN_BLOCK.equals(key)) -->Line_35 $$ commonSettings.SPACE_BEFORE_FINALLY_KEYWORD = insertSpace[ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_23 $$ int intValue = valueToInt(value)[ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_3 $$ if (key.contains("alignment") && value.matches("\\d*") && object instanceof CommonCodeStyleSettings) [ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_20 $$ if (OPTION_INDENT_CLASS_BODY_DECL.equals(key)) [ FD ]
Line_31 $$ if (OPTION_SPACE_AFTER_CLOSING_BRACE_IN_BLOCK.equals(key)) -->Line_32 $$ boolean insertSpace = valueToBoolean(key, value)[ CD ]
Line_23 $$ int intValue = valueToInt(value)-->Line_29 $$ commonSettings.KEEP_BLANK_LINES_IN_DECLARATIONS = intValue[ FD ]
Line_22 $$ if (OPTION_BLANK_LINES_BEFORE_FIRST_DECLARATION_IN_CLASS.equals(key)) -->Line_25 $$ commonSettings.BLANK_LINES_AFTER_ANONYMOUS_CLASS_HEADER = intValue[ CD ]
Line_26 $$ if (OPTION_EMPTY_LINES_TO_PRESERVE.equals(key)) -->Line_27 $$ int intValue = valueToInt(value)[ CD ]
Line_63 $$ if (continuationTabs >= 0) -->Line_64 $$ indentOptions.CONTINUATION_INDENT_SIZE = continuationTabs * newTabSize[ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_4 $$ if (setAlignmentAndWrappingOptions((CommonCodeStyleSettings) object, key, value))[ FD ]
Line_23 $$ int intValue = valueToInt(value)-->Line_25 $$ commonSettings.BLANK_LINES_AFTER_ANONYMOUS_CLASS_HEADER = intValue[ FD ]
Line_32 $$ boolean insertSpace = valueToBoolean(key, value)-->Line_39 $$ commonSettings.SPACE_BEFORE_FOR_LBRACE = insertSpace[ FD ]
Line_36 $$ if (OPTION_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK.equals(key)) -->Line_41 $$ commonSettings.SPACE_BEFORE_DO_LBRACE = insertSpace[ CD ]
Line_57 $$ if (OPTION_CONTINUATION_INDENT.equals(key)) -->Line_58 $$ indentOptions.CONTINUATION_INDENT_SIZE = indentOptions.TAB_SIZE * valueToInt(value)[ CD ]
Line_23 $$ int intValue = valueToInt(value)-->Line_24 $$ commonSettings.BLANK_LINES_AFTER_CLASS_HEADER = intValue[ FD ]
Line_20 $$ if (OPTION_INDENT_CLASS_BODY_DECL.equals(key)) -->Line_21 $$ commonSettings.DO_NOT_INDENT_TOP_LEVEL_CLASS_MEMBERS = !valueToBoolean(key, value)[ CD ]
Line_59 $$ if (OPTION_TAB_SIZE.equals(key)) -->Line_62 $$ indentOptions.TAB_SIZE = newTabSize[ CD ]
Line_61 $$ int continuationTabs = indentOptions.TAB_SIZE > 0 ? indentOptions.CONTINUATION_INDENT_SIZE / indentOptions.TAB_SIZE : -1-->Line_63 $$ if (continuationTabs >= 0) [ FD ]
Line_59 $$ if (OPTION_TAB_SIZE.equals(key)) -->Line_61 $$ int continuationTabs = indentOptions.TAB_SIZE > 0 ? indentOptions.CONTINUATION_INDENT_SIZE / indentOptions.TAB_SIZE : -1[ CD ]
Line_32 $$ boolean insertSpace = valueToBoolean(key, value)-->Line_40 $$ commonSettings.SPACE_BEFORE_WHILE_LBRACE = insertSpace[ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_58 $$ indentOptions.CONTINUATION_INDENT_SIZE = indentOptions.TAB_SIZE * valueToInt(value)[ FD ]
Line_54 $$ if (TAB_CHAR_SPACE.equals(value)) -->Line_55 $$ indentOptions.USE_TAB_CHARACTER = false[ CD ]
Line_9 $$ if (OPTION_REMOVE_JAVADOC_BLANK_LINES.equals(key)) -->Line_11 $$ if (OPTION_NEW_LINE_AT_EOF.equals(key)) [ CD ]
Line_32 $$ boolean insertSpace = valueToBoolean(key, value)-->Line_44 $$ commonSettings.SPACE_BEFORE_FINALLY_LBRACE = insertSpace[ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_36 $$ if (OPTION_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK.equals(key)) [ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_10 $$ settings.JD_KEEP_EMPTY_LINES = !valueToBoolean(key, value)[ FD ]
Line_17 $$ if (OPTION_SPACE_AFTER_BINARY_OPERATOR.equals(key)) -->Line_20 $$ if (OPTION_INDENT_CLASS_BODY_DECL.equals(key)) [ CD ]
Line_52 $$ if (TAB_CHAR_TAB.equals(value) || TAB_CHAR_MIXED.equals(value)) -->Line_54 $$ if (TAB_CHAR_SPACE.equals(value)) [ CD ]
Line_32 $$ boolean insertSpace = valueToBoolean(key, value)-->Line_34 $$ commonSettings.SPACE_BEFORE_CATCH_KEYWORD = insertSpace[ FD ]
Line_9 $$ if (OPTION_REMOVE_JAVADOC_BLANK_LINES.equals(key)) -->Line_10 $$ settings.JD_KEEP_EMPTY_LINES = !valueToBoolean(key, value)[ CD ]
Line_59 $$ if (OPTION_TAB_SIZE.equals(key)) -->Line_60 $$ int newTabSize = valueToInt(value)[ CD ]
Line_22 $$ if (OPTION_BLANK_LINES_BEFORE_FIRST_DECLARATION_IN_CLASS.equals(key)) -->Line_24 $$ commonSettings.BLANK_LINES_AFTER_CLASS_HEADER = intValue[ CD ]
Line_15 $$ if (object instanceof CommonCodeStyleSettings) -->Line_49 $$ if (object instanceof CommonCodeStyleSettings.IndentOptions) [ CD ]
Line_17 $$ if (OPTION_SPACE_AFTER_BINARY_OPERATOR.equals(key)) -->Line_19 $$ commonSettings.SPACE_AROUND_ADDITIVE_OPERATORS = commonSettings.SPACE_AROUND_BITWISE_OPERATORS = commonSettings.SPACE_AROUND_LOGICAL_OPERATORS = commonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS = commonSettings.SPACE_AROUND_RELATIONAL_OPERATORS = commonSettings.SPACE_AROUND_SHIFT_OPERATORS = commonSettings.SPACE_AROUND_EQUALITY_OPERATORS = addSpace[ CD ]
Line_36 $$ if (OPTION_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK.equals(key)) -->Line_45 $$ commonSettings.SPACE_BEFORE_SYNCHRONIZED_LBRACE = insertSpace[ CD ]
Line_15 $$ if (object instanceof CommonCodeStyleSettings) -->Line_17 $$ if (OPTION_SPACE_AFTER_BINARY_OPERATOR.equals(key)) [ CD ]
Line_20 $$ if (OPTION_INDENT_CLASS_BODY_DECL.equals(key)) -->Line_22 $$ if (OPTION_BLANK_LINES_BEFORE_FIRST_DECLARATION_IN_CLASS.equals(key)) [ CD ]
Line_7 $$ if (object instanceof CodeStyleSettings) -->Line_15 $$ if (object instanceof CommonCodeStyleSettings) [ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_60 $$ int newTabSize = valueToInt(value)[ FD ]
Line_18 $$ boolean addSpace = valueToBoolean(key, value)-->Line_19 $$ commonSettings.SPACE_AROUND_ADDITIVE_OPERATORS = commonSettings.SPACE_AROUND_BITWISE_OPERATORS = commonSettings.SPACE_AROUND_LOGICAL_OPERATORS = commonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS = commonSettings.SPACE_AROUND_RELATIONAL_OPERATORS = commonSettings.SPACE_AROUND_SHIFT_OPERATORS = commonSettings.SPACE_AROUND_EQUALITY_OPERATORS = addSpace[ FD ]
Line_61 $$ int continuationTabs = indentOptions.TAB_SIZE > 0 ? indentOptions.CONTINUATION_INDENT_SIZE / indentOptions.TAB_SIZE : -1-->Line_64 $$ indentOptions.CONTINUATION_INDENT_SIZE = continuationTabs * newTabSize[ FD ]
Line_31 $$ if (OPTION_SPACE_AFTER_CLOSING_BRACE_IN_BLOCK.equals(key)) -->Line_36 $$ if (OPTION_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK.equals(key)) [ CD ]
Line_23 $$ int intValue = valueToInt(value)-->Line_30 $$ commonSettings.KEEP_BLANK_LINES_BEFORE_RBRACE = intValue[ FD ]
Line_31 $$ if (OPTION_SPACE_AFTER_CLOSING_BRACE_IN_BLOCK.equals(key)) -->Line_33 $$ commonSettings.SPACE_BEFORE_ELSE_KEYWORD = insertSpace[ CD ]
Line_36 $$ if (OPTION_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK.equals(key)) -->Line_42 $$ commonSettings.SPACE_BEFORE_TRY_LBRACE = insertSpace[ CD ]
Line_36 $$ if (OPTION_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK.equals(key)) -->Line_46 $$ if (OPTION_JOIN_WRAPPED_LINES.equals(key)) [ CD ]
Line_49 $$ if (object instanceof CommonCodeStyleSettings.IndentOptions) -->Line_50 $$ CommonCodeStyleSettings.IndentOptions indentOptions = (CommonCodeStyleSettings.IndentOptions) object[ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_51 $$ if (OPTION_TAB_CHAR.equals(key)) [ FD ]
Line_26 $$ if (OPTION_EMPTY_LINES_TO_PRESERVE.equals(key)) -->Line_28 $$ commonSettings.KEEP_BLANK_LINES_IN_CODE = intValue[ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_46 $$ if (OPTION_JOIN_WRAPPED_LINES.equals(key)) [ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_59 $$ if (OPTION_TAB_SIZE.equals(key)) [ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_21 $$ commonSettings.DO_NOT_INDENT_TOP_LEVEL_CLASS_MEMBERS = !valueToBoolean(key, value)[ FD ]
Line_36 $$ if (OPTION_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK.equals(key)) -->Line_39 $$ commonSettings.SPACE_BEFORE_FOR_LBRACE = insertSpace[ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_18 $$ boolean addSpace = valueToBoolean(key, value)[ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_27 $$ int intValue = valueToInt(value)[ FD ]
Line_60 $$ int newTabSize = valueToInt(value)-->Line_64 $$ indentOptions.CONTINUATION_INDENT_SIZE = continuationTabs * newTabSize[ FD ]
Line_36 $$ if (OPTION_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK.equals(key)) -->Line_38 $$ commonSettings.SPACE_BEFORE_IF_LBRACE = insertSpace[ CD ]
Line_15 $$ if (object instanceof CommonCodeStyleSettings) -->Line_16 $$ CommonCodeStyleSettings commonSettings = (CommonCodeStyleSettings) object[ CD ]
Line_52 $$ if (TAB_CHAR_TAB.equals(value) || TAB_CHAR_MIXED.equals(value)) -->Line_53 $$ indentOptions.USE_TAB_CHARACTER = true[ CD ]
Line_51 $$ if (OPTION_TAB_CHAR.equals(key)) -->Line_52 $$ if (TAB_CHAR_TAB.equals(value) || TAB_CHAR_MIXED.equals(value)) [ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_26 $$ if (OPTION_EMPTY_LINES_TO_PRESERVE.equals(key)) [ FD ]
Line_22 $$ if (OPTION_BLANK_LINES_BEFORE_FIRST_DECLARATION_IN_CLASS.equals(key)) -->Line_23 $$ int intValue = valueToInt(value)[ CD ]
Line_36 $$ if (OPTION_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK.equals(key)) -->Line_43 $$ commonSettings.SPACE_BEFORE_CATCH_LBRACE = insertSpace[ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_17 $$ if (OPTION_SPACE_AFTER_BINARY_OPERATOR.equals(key)) [ FD ]
Line_23 $$ int intValue = valueToInt(value)-->Line_28 $$ commonSettings.KEEP_BLANK_LINES_IN_CODE = intValue[ FD ]
Line_11 $$ if (OPTION_NEW_LINE_AT_EOF.equals(key)) -->Line_13 $$ editorSettings.setEnsureNewLineAtEOF(valueToBoolean(key, value))[ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_54 $$ if (TAB_CHAR_SPACE.equals(value)) [ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_7 $$ if (object instanceof CodeStyleSettings) [ FD ]
Line_60 $$ int newTabSize = valueToInt(value)-->Line_62 $$ indentOptions.TAB_SIZE = newTabSize[ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_9 $$ if (OPTION_REMOVE_JAVADOC_BLANK_LINES.equals(key)) [ FD ]
Line_32 $$ boolean insertSpace = valueToBoolean(key, value)-->Line_45 $$ commonSettings.SPACE_BEFORE_SYNCHRONIZED_LBRACE = insertSpace[ FD ]
Line_36 $$ if (OPTION_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK.equals(key)) -->Line_40 $$ commonSettings.SPACE_BEFORE_WHILE_LBRACE = insertSpace[ CD ]
Line_22 $$ if (OPTION_BLANK_LINES_BEFORE_FIRST_DECLARATION_IN_CLASS.equals(key)) -->Line_26 $$ if (OPTION_EMPTY_LINES_TO_PRESERVE.equals(key)) [ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_22 $$ if (OPTION_BLANK_LINES_BEFORE_FIRST_DECLARATION_IN_CLASS.equals(key)) [ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_3 $$ if (key.contains("alignment") && value.matches("\\d*") && object instanceof CommonCodeStyleSettings) [ FD ]
Line_7 $$ if (object instanceof CodeStyleSettings) -->Line_8 $$ CodeStyleSettings settings = (CodeStyleSettings) object[ CD ]
Line_7 $$ if (object instanceof CodeStyleSettings) -->Line_9 $$ if (OPTION_REMOVE_JAVADOC_BLANK_LINES.equals(key)) [ CD ]
Line_31 $$ if (OPTION_SPACE_AFTER_CLOSING_BRACE_IN_BLOCK.equals(key)) -->Line_34 $$ commonSettings.SPACE_BEFORE_CATCH_KEYWORD = insertSpace[ CD ]
Line_36 $$ if (OPTION_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK.equals(key)) -->Line_37 $$ boolean insertSpace = valueToBoolean(key, value)[ CD ]
Line_11 $$ if (OPTION_NEW_LINE_AT_EOF.equals(key)) -->Line_12 $$ EditorSettingsExternalizable editorSettings = EditorSettingsExternalizable.getInstance()[ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_57 $$ if (OPTION_CONTINUATION_INDENT.equals(key)) [ FD ]
Line_32 $$ boolean insertSpace = valueToBoolean(key, value)-->Line_33 $$ commonSettings.SPACE_BEFORE_ELSE_KEYWORD = insertSpace[ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_7 $$ if (object instanceof CodeStyleSettings) [ CD ]
Line_26 $$ if (OPTION_EMPTY_LINES_TO_PRESERVE.equals(key)) -->Line_29 $$ commonSettings.KEEP_BLANK_LINES_IN_DECLARATIONS = intValue[ CD ]
Line_36 $$ if (OPTION_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK.equals(key)) -->Line_44 $$ commonSettings.SPACE_BEFORE_FINALLY_LBRACE = insertSpace[ CD ]
Line_4 $$ if (setAlignmentAndWrappingOptions((CommonCodeStyleSettings) object, key, value))-->Line_5 $$ return[ CD ]
Line_32 $$ boolean insertSpace = valueToBoolean(key, value)-->Line_38 $$ commonSettings.SPACE_BEFORE_IF_LBRACE = insertSpace[ FD ]
Line_46 $$ if (OPTION_JOIN_WRAPPED_LINES.equals(key)) -->Line_47 $$ commonSettings.KEEP_LINE_BREAKS = !valueToBoolean(key, value)[ CD ]
Line_12 $$ EditorSettingsExternalizable editorSettings = EditorSettingsExternalizable.getInstance()-->Line_13 $$ editorSettings.setEnsureNewLineAtEOF(valueToBoolean(key, value))[ FD ]
Line_49 $$ if (object instanceof CommonCodeStyleSettings.IndentOptions) -->Line_51 $$ if (OPTION_TAB_CHAR.equals(key)) [ CD ]
Line_26 $$ if (OPTION_EMPTY_LINES_TO_PRESERVE.equals(key)) -->Line_31 $$ if (OPTION_SPACE_AFTER_CLOSING_BRACE_IN_BLOCK.equals(key)) [ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_37 $$ boolean insertSpace = valueToBoolean(key, value)[ FD ]
Line_32 $$ boolean insertSpace = valueToBoolean(key, value)-->Line_42 $$ commonSettings.SPACE_BEFORE_TRY_LBRACE = insertSpace[ FD ]
Line_32 $$ boolean insertSpace = valueToBoolean(key, value)-->Line_35 $$ commonSettings.SPACE_BEFORE_FINALLY_KEYWORD = insertSpace[ FD ]
Line_57 $$ if (OPTION_CONTINUATION_INDENT.equals(key)) -->Line_59 $$ if (OPTION_TAB_SIZE.equals(key)) [ CD ]
Line_26 $$ if (OPTION_EMPTY_LINES_TO_PRESERVE.equals(key)) -->Line_30 $$ commonSettings.KEEP_BLANK_LINES_BEFORE_RBRACE = intValue[ CD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_32 $$ boolean insertSpace = valueToBoolean(key, value)[ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_31 $$ if (OPTION_SPACE_AFTER_CLOSING_BRACE_IN_BLOCK.equals(key)) [ FD ]
Line_3 $$ if (key.contains("alignment") && value.matches("\\d*") && object instanceof CommonCodeStyleSettings) -->Line_4 $$ if (setAlignmentAndWrappingOptions((CommonCodeStyleSettings) object, key, value))[ CD ]
Line_32 $$ boolean insertSpace = valueToBoolean(key, value)-->Line_43 $$ commonSettings.SPACE_BEFORE_CATCH_LBRACE = insertSpace[ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_47 $$ commonSettings.KEEP_LINE_BREAKS = !valueToBoolean(key, value)[ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_52 $$ if (TAB_CHAR_TAB.equals(value) || TAB_CHAR_MIXED.equals(value)) [ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_13 $$ editorSettings.setEnsureNewLineAtEOF(valueToBoolean(key, value))[ FD ]
Line_2 $$ private static void setProgrammatically(@NotNull Object object, @NotNull String key, @NotNull String value) throws SchemeImportException -->Line_15 $$ if (object instanceof CommonCodeStyleSettings) [ FD ]
