Line_2 $$ public void testTasksBlock() throws Exception -->Line_38 $$ assertTrue(data.toString().contains("100011"))[ CD ]
Line_7 $$ TaskId taskId = new TaskIdPBImpl()-->Line_12 $$ when(task.getID()).thenReturn(taskId)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_26 $$ App app = new App(ctx)[ CD ]
Line_4 $$ JobId jobId = new JobIdPBImpl()-->Line_5 $$ jobId.setId(0)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_16 $$ when(report.getStartTime()).thenReturn(100001L)[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_34 $$ assertTrue(data.toString().contains("task_0_0001_m_000000"))[ CD ]
Line_3 $$ ApplicationId appId = ApplicationIdPBImpl.newInstance(0, 1)-->Line_6 $$ jobId.setAppId(appId)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_6 $$ jobId.setAppId(appId)[ CD ]
Line_13 $$ TaskReport report = mock(TaskReport.class)-->Line_15 $$ when(report.getTaskState()).thenReturn(TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_29 $$ taskBlock.addParameter(AMParams.TASK_TYPE, "m")[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_21 $$ Map<TaskId, Task> tasks = new HashMap<TaskId, Task>()[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_23 $$ AppContext ctx = mock(AppContext.class)[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_14 $$ when(report.getProgress()).thenReturn(0.7f)[ CD ]
Line_28 $$ TasksBlockForTest taskBlock = new TasksBlockForTest(app)-->Line_32 $$ taskBlock.render(html)[ FD ]
Line_11 $$ Task task = mock(Task.class)-->Line_12 $$ when(task.getID()).thenReturn(taskId)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_33 $$ pWriter.flush()[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_30 $$ PrintWriter pWriter = new PrintWriter(data)[ CD ]
Line_24 $$ Job job = mock(Job.class)-->Line_25 $$ when(job.getTasks()).thenReturn(tasks)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_11 $$ Task task = mock(Task.class)[ CD ]
Line_13 $$ TaskReport report = mock(TaskReport.class)-->Line_17 $$ when(report.getFinishTime()).thenReturn(100011L)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_20 $$ when(task.getType()).thenReturn(TaskType.MAP)[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_15 $$ when(report.getTaskState()).thenReturn(TaskState.SUCCEEDED)[ CD ]
Line_7 $$ TaskId taskId = new TaskIdPBImpl()-->Line_10 $$ taskId.setJobId(jobId)[ FD ]
Line_28 $$ TasksBlockForTest taskBlock = new TasksBlockForTest(app)-->Line_29 $$ taskBlock.addParameter(AMParams.TASK_TYPE, "m")[ FD ]
Line_11 $$ Task task = mock(Task.class)-->Line_20 $$ when(task.getType()).thenReturn(TaskType.MAP)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_13 $$ TaskReport report = mock(TaskReport.class)[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_3 $$ ApplicationId appId = ApplicationIdPBImpl.newInstance(0, 1)[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_7 $$ TaskId taskId = new TaskIdPBImpl()[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_5 $$ jobId.setId(0)[ CD ]
Line_11 $$ Task task = mock(Task.class)-->Line_22 $$ tasks.put(taskId, task)[ FD ]
Line_31 $$ Block html = new BlockForTest(new HtmlBlockForTest(), pWriter, 0, false)-->Line_32 $$ taskBlock.render(html)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_10 $$ taskId.setJobId(jobId)[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_27 $$ app.setJob(job)[ CD ]
Line_7 $$ TaskId taskId = new TaskIdPBImpl()-->Line_9 $$ taskId.setTaskType(TaskType.MAP)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_28 $$ TasksBlockForTest taskBlock = new TasksBlockForTest(app)[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_19 $$ when(task.getReport()).thenReturn(report)[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_8 $$ taskId.setId(0)[ CD ]
Line_26 $$ App app = new App(ctx)-->Line_27 $$ app.setJob(job)[ FD ]
Line_13 $$ TaskReport report = mock(TaskReport.class)-->Line_16 $$ when(report.getStartTime()).thenReturn(100001L)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_25 $$ when(job.getTasks()).thenReturn(tasks)[ CD ]
Line_21 $$ Map<TaskId, Task> tasks = new HashMap<TaskId, Task>()-->Line_22 $$ tasks.put(taskId, task)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_24 $$ Job job = mock(Job.class)[ CD ]
Line_13 $$ TaskReport report = mock(TaskReport.class)-->Line_14 $$ when(report.getProgress()).thenReturn(0.7f)[ FD ]
Line_4 $$ JobId jobId = new JobIdPBImpl()-->Line_6 $$ jobId.setAppId(appId)[ FD ]
Line_24 $$ Job job = mock(Job.class)-->Line_27 $$ app.setJob(job)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_4 $$ JobId jobId = new JobIdPBImpl()[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_37 $$ assertTrue(data.toString().contains("100001"))[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_31 $$ Block html = new BlockForTest(new HtmlBlockForTest(), pWriter, 0, false)[ CD ]
Line_21 $$ Map<TaskId, Task> tasks = new HashMap<TaskId, Task>()-->Line_25 $$ when(job.getTasks()).thenReturn(tasks)[ FD ]
Line_30 $$ PrintWriter pWriter = new PrintWriter(data)-->Line_33 $$ pWriter.flush()[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_32 $$ taskBlock.render(html)[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_36 $$ assertTrue(data.toString().contains("SUCCEEDED"))[ CD ]
Line_11 $$ Task task = mock(Task.class)-->Line_19 $$ when(task.getReport()).thenReturn(report)[ FD ]
Line_13 $$ TaskReport report = mock(TaskReport.class)-->Line_18 $$ when(report.getStatus()).thenReturn("Dummy Status \n*")[ FD ]
Line_4 $$ JobId jobId = new JobIdPBImpl()-->Line_10 $$ taskId.setJobId(jobId)[ FD ]
Line_7 $$ TaskId taskId = new TaskIdPBImpl()-->Line_22 $$ tasks.put(taskId, task)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_12 $$ when(task.getID()).thenReturn(taskId)[ CD ]
Line_7 $$ TaskId taskId = new TaskIdPBImpl()-->Line_8 $$ taskId.setId(0)[ FD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_39 $$ assertFalse(data.toString().contains("Dummy Status \n*"))[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_35 $$ assertTrue(data.toString().contains("70.00"))[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_18 $$ when(report.getStatus()).thenReturn("Dummy Status \n*")[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_40 $$ assertTrue(data.toString().contains("Dummy Status \\n*"))[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_22 $$ tasks.put(taskId, task)[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_17 $$ when(report.getFinishTime()).thenReturn(100011L)[ CD ]
Line_2 $$ public void testTasksBlock() throws Exception -->Line_9 $$ taskId.setTaskType(TaskType.MAP)[ CD ]
Line_13 $$ TaskReport report = mock(TaskReport.class)-->Line_19 $$ when(task.getReport()).thenReturn(report)[ FD ]
