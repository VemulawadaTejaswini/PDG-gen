Line_40 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)-->Line_41 $$ replicaCount = blocks.get(0).getLocations().length[ FD ]
Line_2 $$ public void testCorruptBlock() throws Exception -->Line_7 $$ DFSClient dfsClient = null[ CD ]
Line_10 $$ Random random = new Random()-->Line_30 $$ int rand = random.nextInt((int) channel.size() / 2)[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_22 $$ outStr = runFsck(conf, 0, true, "/")[ FD ]
Line_17 $$ fs = cluster.getFileSystem()-->Line_36 $$ IOUtils.copyBytes(fs.open(file1), new IOUtils.NullOutputStream(), conf, true)[ FD ]
Line_8 $$ LocatedBlocks blocks = null-->Line_48 $$ replicaCount = blocks.get(0).getLocations().length[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_4 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 1000)[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_51 $$ outStr = runFsck(conf, 1, true, "/")[ FD ]
Line_2 $$ public void testCorruptBlock() throws Exception -->Line_8 $$ LocatedBlocks blocks = null[ CD ]
Line_13 $$ MiniDFSCluster cluster = null-->Line_15 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()[ FD ]
Line_12 $$ short factor = 1-->Line_19 $$ DFSTestUtil.createFile(fs, file1, 1024, factor, 0)[ FD ]
Line_51 $$ outStr = runFsck(conf, 1, true, "/")-->Line_52 $$ System.out.println(outStr)[ FD ]
Line_22 $$ outStr = runFsck(conf, 0, true, "/")-->Line_52 $$ System.out.println(outStr)[ FD ]
Line_2 $$ public void testCorruptBlock() throws Exception -->Line_5 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_RETRY_WINDOW_BASE, 10)[ CD ]
Line_8 $$ LocatedBlocks blocks = null-->Line_40 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)[ FD ]
Line_27 $$ RandomAccessFile raFile = new RandomAccessFile(blockFile, "rw")-->Line_33 $$ raFile.close()[ FD ]
Line_11 $$ String outStr = null-->Line_23 $$ System.out.println(outStr)[ FD ]
Line_2 $$ public void testCorruptBlock() throws Exception -->Line_12 $$ short factor = 1[ CD ]
Line_13 $$ MiniDFSCluster cluster = null-->Line_56 $$ if (cluster != null) [ FD ]
Line_6 $$ FileSystem fs = null-->Line_21 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)[ FD ]
Line_2 $$ public void testCorruptBlock() throws Exception -->Line_4 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 1000)[ CD ]
Line_18 $$ Path file1 = new Path("/testCorruptBlock")-->Line_19 $$ DFSTestUtil.createFile(fs, file1, 1024, factor, 0)[ FD ]
Line_7 $$ DFSClient dfsClient = null-->Line_47 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)[ FD ]
Line_26 $$ if (blockFile != null && blockFile.exists()) -->Line_32 $$ raFile.write(badString.getBytes())[ CD ]
Line_15 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_39 $$ dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)[ FD ]
Line_11 $$ String outStr = null-->Line_24 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_39 $$ dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)-->Line_40 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)[ FD ]
Line_26 $$ if (blockFile != null && blockFile.exists()) -->Line_30 $$ int rand = random.nextInt((int) channel.size() / 2)[ CD ]
Line_2 $$ public void testCorruptBlock() throws Exception -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_15 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_17 $$ fs = cluster.getFileSystem()[ FD ]
Line_18 $$ Path file1 = new Path("/testCorruptBlock")-->Line_20 $$ DFSTestUtil.waitReplication(fs, file1, factor)[ FD ]
Line_22 $$ outStr = runFsck(conf, 0, true, "/")-->Line_51 $$ outStr = runFsck(conf, 1, true, "/")[ FD ]
Line_26 $$ if (blockFile != null && blockFile.exists()) -->Line_33 $$ raFile.close()[ CD ]
Line_26 $$ if (blockFile != null && blockFile.exists()) -->Line_28 $$ FileChannel channel = raFile.getChannel()[ CD ]
Line_27 $$ RandomAccessFile raFile = new RandomAccessFile(blockFile, "rw")-->Line_32 $$ raFile.write(badString.getBytes())[ FD ]
Line_11 $$ String outStr = null-->Line_53 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ FD ]
Line_15 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_16 $$ cluster.waitActive()[ FD ]
Line_40 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)-->Line_48 $$ replicaCount = blocks.get(0).getLocations().length[ FD ]
Line_13 $$ MiniDFSCluster cluster = null-->Line_39 $$ dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)[ FD ]
Line_18 $$ Path file1 = new Path("/testCorruptBlock")-->Line_21 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)[ FD ]
Line_40 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)-->Line_50 $$ assertTrue(blocks.get(0).isCorrupt())[ FD ]
Line_29 $$ String badString = "BADBAD"-->Line_32 $$ raFile.write(badString.getBytes())[ FD ]
Line_51 $$ outStr = runFsck(conf, 1, true, "/")-->Line_54 $$ assertTrue(outStr.contains("testCorruptBlock"))[ FD ]
Line_18 $$ Path file1 = new Path("/testCorruptBlock")-->Line_36 $$ IOUtils.copyBytes(fs.open(file1), new IOUtils.NullOutputStream(), conf, true)[ FD ]
Line_27 $$ RandomAccessFile raFile = new RandomAccessFile(blockFile, "rw")-->Line_28 $$ FileChannel channel = raFile.getChannel()[ FD ]
Line_11 $$ String outStr = null-->Line_22 $$ outStr = runFsck(conf, 0, true, "/")[ FD ]
Line_26 $$ if (blockFile != null && blockFile.exists()) -->Line_31 $$ raFile.seek(rand)[ CD ]
Line_2 $$ public void testCorruptBlock() throws Exception -->Line_13 $$ MiniDFSCluster cluster = null[ CD ]
Line_17 $$ fs = cluster.getFileSystem()-->Line_20 $$ DFSTestUtil.waitReplication(fs, file1, factor)[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_5 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_RETRY_WINDOW_BASE, 10)[ FD ]
Line_7 $$ DFSClient dfsClient = null-->Line_40 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)[ FD ]
Line_48 $$ replicaCount = blocks.get(0).getLocations().length-->Line_42 $$ while (replicaCount != factor) [ FD ]
Line_2 $$ public void testCorruptBlock() throws Exception -->Line_6 $$ FileSystem fs = null[ CD ]
Line_15 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_57 $$ cluster.shutdown()[ FD ]
Line_51 $$ outStr = runFsck(conf, 1, true, "/")-->Line_53 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ FD ]
Line_22 $$ outStr = runFsck(conf, 0, true, "/")-->Line_23 $$ System.out.println(outStr)[ FD ]
Line_17 $$ fs = cluster.getFileSystem()-->Line_21 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_36 $$ IOUtils.copyBytes(fs.open(file1), new IOUtils.NullOutputStream(), conf, true)[ FD ]
Line_2 $$ public void testCorruptBlock() throws Exception -->Line_10 $$ Random random = new Random()[ CD ]
Line_25 $$ File blockFile = MiniDFSCluster.getBlockFile(0, block)-->Line_26 $$ if (blockFile != null && blockFile.exists()) [ FD ]
Line_42 $$ while (replicaCount != factor) -->Line_47 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)[ CD ]
Line_11 $$ String outStr = null-->Line_54 $$ assertTrue(outStr.contains("testCorruptBlock"))[ FD ]
Line_9 $$ int replicaCount = 0-->Line_42 $$ while (replicaCount != factor) [ FD ]
Line_6 $$ FileSystem fs = null-->Line_36 $$ IOUtils.copyBytes(fs.open(file1), new IOUtils.NullOutputStream(), conf, true)[ FD ]
Line_21 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)-->Line_25 $$ File blockFile = MiniDFSCluster.getBlockFile(0, block)[ FD ]
Line_41 $$ replicaCount = blocks.get(0).getLocations().length-->Line_42 $$ while (replicaCount != factor) [ FD ]
Line_13 $$ MiniDFSCluster cluster = null-->Line_16 $$ cluster.waitActive()[ FD ]
Line_2 $$ public void testCorruptBlock() throws Exception -->Line_11 $$ String outStr = null[ CD ]
Line_11 $$ String outStr = null-->Line_51 $$ outStr = runFsck(conf, 1, true, "/")[ FD ]
Line_22 $$ outStr = runFsck(conf, 0, true, "/")-->Line_54 $$ assertTrue(outStr.contains("testCorruptBlock"))[ FD ]
Line_8 $$ LocatedBlocks blocks = null-->Line_50 $$ assertTrue(blocks.get(0).isCorrupt())[ FD ]
Line_13 $$ MiniDFSCluster cluster = null-->Line_57 $$ cluster.shutdown()[ FD ]
Line_39 $$ dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)-->Line_47 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)[ FD ]
Line_6 $$ FileSystem fs = null-->Line_17 $$ fs = cluster.getFileSystem()[ FD ]
Line_6 $$ FileSystem fs = null-->Line_20 $$ DFSTestUtil.waitReplication(fs, file1, factor)[ FD ]
Line_11 $$ String outStr = null-->Line_52 $$ System.out.println(outStr)[ FD ]
Line_12 $$ short factor = 1-->Line_20 $$ DFSTestUtil.waitReplication(fs, file1, factor)[ FD ]
Line_13 $$ MiniDFSCluster cluster = null-->Line_17 $$ fs = cluster.getFileSystem()[ FD ]
Line_8 $$ LocatedBlocks blocks = null-->Line_41 $$ replicaCount = blocks.get(0).getLocations().length[ FD ]
Line_41 $$ replicaCount = blocks.get(0).getLocations().length-->Line_48 $$ replicaCount = blocks.get(0).getLocations().length[ FD ]
Line_22 $$ outStr = runFsck(conf, 0, true, "/")-->Line_53 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ FD ]
Line_9 $$ int replicaCount = 0-->Line_48 $$ replicaCount = blocks.get(0).getLocations().length[ FD ]
Line_27 $$ RandomAccessFile raFile = new RandomAccessFile(blockFile, "rw")-->Line_31 $$ raFile.seek(rand)[ FD ]
Line_28 $$ FileChannel channel = raFile.getChannel()-->Line_30 $$ int rand = random.nextInt((int) channel.size() / 2)[ FD ]
Line_26 $$ if (blockFile != null && blockFile.exists()) -->Line_29 $$ String badString = "BADBAD"[ CD ]
Line_12 $$ short factor = 1-->Line_42 $$ while (replicaCount != factor) [ FD ]
Line_6 $$ FileSystem fs = null-->Line_19 $$ DFSTestUtil.createFile(fs, file1, 1024, factor, 0)[ FD ]
Line_47 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)-->Line_50 $$ assertTrue(blocks.get(0).isCorrupt())[ FD ]
Line_56 $$ if (cluster != null) -->Line_57 $$ cluster.shutdown()[ CD ]
Line_30 $$ int rand = random.nextInt((int) channel.size() / 2)-->Line_31 $$ raFile.seek(rand)[ FD ]
Line_17 $$ fs = cluster.getFileSystem()-->Line_19 $$ DFSTestUtil.createFile(fs, file1, 1024, factor, 0)[ FD ]
Line_18 $$ Path file1 = new Path("/testCorruptBlock")-->Line_40 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)[ FD ]
Line_8 $$ LocatedBlocks blocks = null-->Line_47 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)[ FD ]
Line_22 $$ outStr = runFsck(conf, 0, true, "/")-->Line_24 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_47 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)-->Line_48 $$ replicaCount = blocks.get(0).getLocations().length[ FD ]
Line_7 $$ DFSClient dfsClient = null-->Line_39 $$ dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)[ FD ]
Line_42 $$ while (replicaCount != factor) -->Line_48 $$ replicaCount = blocks.get(0).getLocations().length[ CD ]
Line_15 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_56 $$ if (cluster != null) [ FD ]
Line_40 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)-->Line_47 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)[ FD ]
Line_9 $$ int replicaCount = 0-->Line_41 $$ replicaCount = blocks.get(0).getLocations().length[ FD ]
Line_2 $$ public void testCorruptBlock() throws Exception -->Line_9 $$ int replicaCount = 0[ CD ]
Line_26 $$ if (blockFile != null && blockFile.exists()) -->Line_27 $$ RandomAccessFile raFile = new RandomAccessFile(blockFile, "rw")[ CD ]
Line_18 $$ Path file1 = new Path("/testCorruptBlock")-->Line_47 $$ blocks = dfsClient.getNamenode().getBlockLocations(file1.toString(), 0, Long.MAX_VALUE)[ FD ]
