Line_6 $$ for (Method method : methods) -->Line_13 $$ if (method.getName().contains("m1")) [ FD ]
Line_3 $$ Class<?> cglibLeaf = new ConfigurationClassEnhancer().enhance(Leaf.class, null)-->Line_5 $$ Method[] methods = ReflectionUtils.getUniqueDeclaredMethods(cglibLeaf)[ FD ]
Line_7 $$ if (method.getName().equals("m1")) -->Line_8 $$ m1MethodCount++[ CD ]
Line_4 $$ int m1MethodCount = 0-->Line_11 $$ assertThat(m1MethodCount, is(1))[ FD ]
Line_4 $$ int m1MethodCount = 0-->Line_8 $$ m1MethodCount++[ FD ]
Line_2 $$ public void getUniqueDeclaredMethods_withCovariantReturnType_andCglibRewrittenMethodNames() throws Exception -->Line_11 $$ assertThat(m1MethodCount, is(1))[ CD ]
Line_6 $$ for (Method method : methods) -->Line_14 $$ assertEquals(method.getReturnType(), Integer.class)[ FD ]
Line_2 $$ public void getUniqueDeclaredMethods_withCovariantReturnType_andCglibRewrittenMethodNames() throws Exception -->Line_5 $$ Method[] methods = ReflectionUtils.getUniqueDeclaredMethods(cglibLeaf)[ CD ]
Line_2 $$ public void getUniqueDeclaredMethods_withCovariantReturnType_andCglibRewrittenMethodNames() throws Exception -->Line_3 $$ Class<?> cglibLeaf = new ConfigurationClassEnhancer().enhance(Leaf.class, null)[ CD ]
Line_6 $$ for (Method method : methods) -->Line_7 $$ if (method.getName().equals("m1")) [ FD ]
Line_13 $$ if (method.getName().contains("m1")) -->Line_14 $$ assertEquals(method.getReturnType(), Integer.class)[ CD ]
Line_2 $$ public void getUniqueDeclaredMethods_withCovariantReturnType_andCglibRewrittenMethodNames() throws Exception -->Line_4 $$ int m1MethodCount = 0[ CD ]
