Line_2 $$ public PyType getCallType(@NotNull PyFunction function, @Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_18 $$ return parseNumpyDocType(function, typeName)[ FD ]
Line_23 $$ final List<PyType> members = new ArrayList<PyType>()-->Line_31 $$ if (members.size() > 1)[ FD ]
Line_2 $$ public PyType getCallType(@NotNull PyFunction function, @Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_5 $$ final NumpyDocString docString = forFunction(function, callee)[ FD ]
Line_2 $$ public PyType getCallType(@NotNull PyFunction function, @Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_39 $$ unionMembers.add(facade.createTupleType(members, function))[ FD ]
Line_24 $$ for (int i = 0; i < returns.size(); i++) -->Line_30 $$ if (i != 0) [ FD ]
Line_22 $$ final ArrayList<PyType> unionMembers = new ArrayList<PyType>()-->Line_42 $$ if (unionMembers.isEmpty()) [ FD ]
Line_14 $$ if (StringUtil.isNotEmpty(typeName)) -->Line_15 $$ final PyType genericType = getPsiFacade(function).parseTypeAnnotation("T", function)[ CD ]
Line_26 $$ final String memberTypeName = ret.getType()-->Line_28 $$ final boolean isOptional = StringUtil.isNotEmpty(memberTypeName) && memberTypeName.contains("optional")[ FD ]
Line_2 $$ public PyType getCallType(@NotNull PyFunction function, @Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_3 $$ if (isApplicable(function)) [ FD ]
Line_6 $$ if (docString != null) -->Line_8 $$ final PyPsiFacade facade = getPsiFacade(function)[ CD ]
Line_2 $$ public PyType getCallType(@NotNull PyFunction function, @Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_3 $$ if (isApplicable(function)) [ CD ]
Line_26 $$ final String memberTypeName = ret.getType()-->Line_27 $$ final PyType returnType = StringUtil.isNotEmpty(memberTypeName) ? parseNumpyDocType(function, memberTypeName) : null[ FD ]
Line_2 $$ public PyType getCallType(@NotNull PyFunction function, @Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_43 $$ return facade.createTupleType(members, function)[ FD ]
Line_27 $$ final PyType returnType = StringUtil.isNotEmpty(memberTypeName) ? parseNumpyDocType(function, memberTypeName) : null-->Line_37 $$ members.add(returnType)[ FD ]
Line_24 $$ for (int i = 0; i < returns.size(); i++) -->Line_28 $$ final boolean isOptional = StringUtil.isNotEmpty(memberTypeName) && memberTypeName.contains("optional")[ CD ]
Line_23 $$ final List<PyType> members = new ArrayList<PyType>()-->Line_37 $$ members.add(returnType)[ FD ]
Line_24 $$ for (int i = 0; i < returns.size(); i++) -->Line_25 $$ SectionField ret = returns.get(i)[ FD ]
Line_31 $$ if (members.size() > 1)-->Line_34 $$ unionMembers.add(returnType)[ CD ]
Line_6 $$ if (docString != null) -->Line_7 $$ final List<SectionField> returns = docString.getReturnFields()[ CD ]
Line_25 $$ SectionField ret = returns.get(i)-->Line_26 $$ final String memberTypeName = ret.getType()[ FD ]
Line_3 $$ if (isApplicable(function)) -->Line_4 $$ final PyExpression callee = callSite instanceof PyCallExpression ? ((PyCallExpression) callSite).getCallee() : null[ CD ]
Line_23 $$ final List<PyType> members = new ArrayList<PyType>()-->Line_39 $$ unionMembers.add(facade.createTupleType(members, function))[ FD ]
Line_5 $$ final NumpyDocString docString = forFunction(function, callee)-->Line_6 $$ if (docString != null) [ FD ]
Line_24 $$ for (int i = 0; i < returns.size(); i++) -->Line_25 $$ SectionField ret = returns.get(i)[ CD ]
Line_3 $$ if (isApplicable(function)) -->Line_5 $$ final NumpyDocString docString = forFunction(function, callee)[ CD ]
Line_2 $$ public PyType getCallType(@NotNull PyFunction function, @Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_15 $$ final PyType genericType = getPsiFacade(function).parseTypeAnnotation("T", function)[ FD ]
Line_31 $$ if (members.size() > 1)-->Line_32 $$ unionMembers.add(facade.createTupleType(members, function))[ CD ]
Line_2 $$ public PyType getCallType(@NotNull PyFunction function, @Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_32 $$ unionMembers.add(facade.createTupleType(members, function))[ FD ]
Line_22 $$ final ArrayList<PyType> unionMembers = new ArrayList<PyType>()-->Line_45 $$ return facade.createUnionType(unionMembers)[ FD ]
Line_16 $$ if (isUfuncType(function, typeName))-->Line_17 $$ return genericType[ CD ]
Line_8 $$ final PyPsiFacade facade = getPsiFacade(function)-->Line_43 $$ return facade.createTupleType(members, function)[ FD ]
Line_5 $$ final NumpyDocString docString = forFunction(function, callee)-->Line_7 $$ final List<SectionField> returns = docString.getReturnFields()[ FD ]
Line_7 $$ final List<SectionField> returns = docString.getReturnFields()-->Line_24 $$ for (int i = 0; i < returns.size(); i++) [ FD ]
Line_2 $$ public PyType getCallType(@NotNull PyFunction function, @Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_16 $$ if (isUfuncType(function, typeName))[ FD ]
Line_7 $$ final List<SectionField> returns = docString.getReturnFields()-->Line_9 $$ switch(returns.size()) [ FD ]
Line_15 $$ final PyType genericType = getPsiFacade(function).parseTypeAnnotation("T", function)-->Line_16 $$ if (isUfuncType(function, typeName))[ FD ]
Line_23 $$ final List<PyType> members = new ArrayList<PyType>()-->Line_32 $$ unionMembers.add(facade.createTupleType(members, function))[ FD ]
Line_22 $$ final ArrayList<PyType> unionMembers = new ArrayList<PyType>()-->Line_34 $$ unionMembers.add(returnType)[ FD ]
Line_8 $$ final PyPsiFacade facade = getPsiFacade(function)-->Line_39 $$ unionMembers.add(facade.createTupleType(members, function))[ FD ]
Line_7 $$ final List<SectionField> returns = docString.getReturnFields()-->Line_25 $$ SectionField ret = returns.get(i)[ FD ]
Line_23 $$ final List<PyType> members = new ArrayList<PyType>()-->Line_43 $$ return facade.createTupleType(members, function)[ FD ]
Line_42 $$ if (unionMembers.isEmpty()) -->Line_43 $$ return facade.createTupleType(members, function)[ CD ]
Line_24 $$ for (int i = 0; i < returns.size(); i++) -->Line_27 $$ final PyType returnType = StringUtil.isNotEmpty(memberTypeName) ? parseNumpyDocType(function, memberTypeName) : null[ CD ]
Line_27 $$ final PyType returnType = StringUtil.isNotEmpty(memberTypeName) ? parseNumpyDocType(function, memberTypeName) : null-->Line_34 $$ unionMembers.add(returnType)[ FD ]
Line_38 $$ if (i == returns.size() - 1 && isOptional) -->Line_39 $$ unionMembers.add(facade.createTupleType(members, function))[ CD ]
Line_13 $$ final String typeName = returns.get(0).getType()-->Line_14 $$ if (StringUtil.isNotEmpty(typeName)) [ FD ]
Line_3 $$ if (isApplicable(function)) -->Line_6 $$ if (docString != null) [ CD ]
Line_22 $$ final ArrayList<PyType> unionMembers = new ArrayList<PyType>()-->Line_32 $$ unionMembers.add(facade.createTupleType(members, function))[ FD ]
Line_2 $$ public PyType getCallType(@NotNull PyFunction function, @Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_27 $$ final PyType returnType = StringUtil.isNotEmpty(memberTypeName) ? parseNumpyDocType(function, memberTypeName) : null[ FD ]
Line_7 $$ final List<SectionField> returns = docString.getReturnFields()-->Line_13 $$ final String typeName = returns.get(0).getType()[ FD ]
Line_13 $$ final String typeName = returns.get(0).getType()-->Line_18 $$ return parseNumpyDocType(function, typeName)[ FD ]
Line_8 $$ final PyPsiFacade facade = getPsiFacade(function)-->Line_32 $$ unionMembers.add(facade.createTupleType(members, function))[ FD ]
Line_24 $$ for (int i = 0; i < returns.size(); i++) -->Line_37 $$ members.add(returnType)[ CD ]
Line_24 $$ for (int i = 0; i < returns.size(); i++) -->Line_29 $$ if (isOptional) [ CD ]
Line_24 $$ for (int i = 0; i < returns.size(); i++) -->Line_38 $$ if (i == returns.size() - 1 && isOptional) [ CD ]
Line_28 $$ final boolean isOptional = StringUtil.isNotEmpty(memberTypeName) && memberTypeName.contains("optional")-->Line_38 $$ if (i == returns.size() - 1 && isOptional) [ FD ]
Line_7 $$ final List<SectionField> returns = docString.getReturnFields()-->Line_38 $$ if (i == returns.size() - 1 && isOptional) [ FD ]
Line_22 $$ final ArrayList<PyType> unionMembers = new ArrayList<PyType>()-->Line_39 $$ unionMembers.add(facade.createTupleType(members, function))[ FD ]
Line_8 $$ final PyPsiFacade facade = getPsiFacade(function)-->Line_45 $$ return facade.createUnionType(unionMembers)[ FD ]
Line_2 $$ public PyType getCallType(@NotNull PyFunction function, @Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_49 $$ return null[ CD ]
Line_14 $$ if (StringUtil.isNotEmpty(typeName)) -->Line_18 $$ return parseNumpyDocType(function, typeName)[ CD ]
Line_14 $$ if (StringUtil.isNotEmpty(typeName)) -->Line_16 $$ if (isUfuncType(function, typeName))[ CD ]
Line_13 $$ final String typeName = returns.get(0).getType()-->Line_16 $$ if (isUfuncType(function, typeName))[ FD ]
Line_30 $$ if (i != 0) -->Line_31 $$ if (members.size() > 1)[ CD ]
Line_29 $$ if (isOptional) -->Line_30 $$ if (i != 0) [ CD ]
Line_4 $$ final PyExpression callee = callSite instanceof PyCallExpression ? ((PyCallExpression) callSite).getCallee() : null-->Line_5 $$ final NumpyDocString docString = forFunction(function, callee)[ FD ]
Line_24 $$ for (int i = 0; i < returns.size(); i++) -->Line_26 $$ final String memberTypeName = ret.getType()[ CD ]
Line_2 $$ public PyType getCallType(@NotNull PyFunction function, @Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_8 $$ final PyPsiFacade facade = getPsiFacade(function)[ FD ]
