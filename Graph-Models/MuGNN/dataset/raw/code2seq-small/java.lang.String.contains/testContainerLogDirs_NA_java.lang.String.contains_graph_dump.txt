Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_14 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)[ CD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_3 $$ File absLogDir = new File("target", TestNMWebServer.class.getSimpleName() + "LogDir").getAbsoluteFile()[ CD ]
Line_3 $$ File absLogDir = new File("target", TestNMWebServer.class.getSimpleName() + "LogDir").getAbsoluteFile()-->Line_4 $$ String logdirwithFile = absLogDir.toURI().toString()[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_8 $$ healthChecker.init(conf)[ CD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_5 $$ Configuration conf = new Configuration()[ CD ]
Line_4 $$ String logdirwithFile = absLogDir.toURI().toString()-->Line_6 $$ conf.set(YarnConfiguration.NM_LOG_DIRS, logdirwithFile)[ FD ]
Line_15 $$ Application app = mock(Application.class)-->Line_20 $$ nmContext.getApplications().put(appId, app)[ FD ]
Line_25 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)-->Line_29 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)[ FD ]
Line_14 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)-->Line_17 $$ when(app.getAppId()).thenReturn(appId)[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_11 $$ RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(conf)[ CD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_21 $$ MockContainer container = new MockContainer(appAttemptId, new AsyncDispatcher(), conf, user, appId, 1)[ CD ]
Line_10 $$ NMContext nmContext = new NodeManager.NMContext(null, null, dirsHandler, new ApplicationACLsManager(conf), new NMNullStateStoreService())-->Line_25 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_6 $$ conf.set(YarnConfiguration.NM_LOG_DIRS, logdirwithFile)[ CD ]
Line_15 $$ Application app = mock(Application.class)-->Line_16 $$ when(app.getUser()).thenReturn(user)[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_17 $$ when(app.getAppId()).thenReturn(appId)[ CD ]
Line_14 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)-->Line_18 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)[ FD ]
Line_10 $$ NMContext nmContext = new NodeManager.NMContext(null, null, dirsHandler, new ApplicationACLsManager(conf), new NMNullStateStoreService())-->Line_29 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)[ FD ]
Line_24 $$ List<File> files = null-->Line_26 $$ Assert.assertTrue(!(files.get(0).toString().contains("file:")))[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_11 $$ RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.set(YarnConfiguration.NM_LOG_DIRS, logdirwithFile)[ FD ]
Line_13 $$ long clusterTimeStamp = 1234-->Line_14 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)[ FD ]
Line_12 $$ String user = "nobody"-->Line_25 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)[ FD ]
Line_21 $$ MockContainer container = new MockContainer(appAttemptId, new AsyncDispatcher(), conf, user, appId, 1)-->Line_22 $$ container.setState(ContainerState.RUNNING)[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_7 $$ NodeHealthCheckerService healthChecker = new NodeHealthCheckerService()[ CD ]
Line_19 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)-->Line_28 $$ Assert.assertNull(nmContext.getContainers().get(container1))[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_27 $$ nmContext.getContainers().remove(container1)[ CD ]
Line_10 $$ NMContext nmContext = new NodeManager.NMContext(null, null, dirsHandler, new ApplicationACLsManager(conf), new NMNullStateStoreService())-->Line_28 $$ Assert.assertNull(nmContext.getContainers().get(container1))[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_19 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)[ CD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_10 $$ NMContext nmContext = new NodeManager.NMContext(null, null, dirsHandler, new ApplicationACLsManager(conf), new NMNullStateStoreService())[ CD ]
Line_10 $$ NMContext nmContext = new NodeManager.NMContext(null, null, dirsHandler, new ApplicationACLsManager(conf), new NMNullStateStoreService())-->Line_23 $$ nmContext.getContainers().put(container1, container)[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_24 $$ List<File> files = null[ CD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_9 $$ LocalDirsHandlerService dirsHandler = healthChecker.getDiskHandler()[ CD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_12 $$ String user = "nobody"[ CD ]
Line_24 $$ List<File> files = null-->Line_25 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)[ FD ]
Line_10 $$ NMContext nmContext = new NodeManager.NMContext(null, null, dirsHandler, new ApplicationACLsManager(conf), new NMNullStateStoreService())-->Line_20 $$ nmContext.getApplications().put(appId, app)[ FD ]
Line_19 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)-->Line_25 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)[ FD ]
Line_19 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)-->Line_27 $$ nmContext.getContainers().remove(container1)[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_13 $$ long clusterTimeStamp = 1234[ CD ]
Line_25 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)-->Line_30 $$ Assert.assertTrue(!(files.get(0).toString().contains("file:")))[ FD ]
Line_24 $$ List<File> files = null-->Line_29 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)[ FD ]
Line_7 $$ NodeHealthCheckerService healthChecker = new NodeHealthCheckerService()-->Line_8 $$ healthChecker.init(conf)[ FD ]
Line_19 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)-->Line_23 $$ nmContext.getContainers().put(container1, container)[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_15 $$ Application app = mock(Application.class)[ CD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_30 $$ Assert.assertTrue(!(files.get(0).toString().contains("file:")))[ CD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_4 $$ String logdirwithFile = absLogDir.toURI().toString()[ CD ]
Line_11 $$ RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(conf)-->Line_14 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)[ FD ]
Line_10 $$ NMContext nmContext = new NodeManager.NMContext(null, null, dirsHandler, new ApplicationACLsManager(conf), new NMNullStateStoreService())-->Line_27 $$ nmContext.getContainers().remove(container1)[ FD ]
Line_14 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)-->Line_20 $$ nmContext.getApplications().put(appId, app)[ FD ]
Line_24 $$ List<File> files = null-->Line_30 $$ Assert.assertTrue(!(files.get(0).toString().contains("file:")))[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_25 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)[ CD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_23 $$ nmContext.getContainers().put(container1, container)[ CD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_28 $$ Assert.assertNull(nmContext.getContainers().get(container1))[ CD ]
Line_19 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)-->Line_29 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)[ FD ]
Line_29 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)-->Line_30 $$ Assert.assertTrue(!(files.get(0).toString().contains("file:")))[ FD ]
Line_7 $$ NodeHealthCheckerService healthChecker = new NodeHealthCheckerService()-->Line_9 $$ LocalDirsHandlerService dirsHandler = healthChecker.getDiskHandler()[ FD ]
Line_25 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)-->Line_26 $$ Assert.assertTrue(!(files.get(0).toString().contains("file:")))[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_29 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)[ CD ]
Line_12 $$ String user = "nobody"-->Line_16 $$ when(app.getUser()).thenReturn(user)[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_18 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_8 $$ healthChecker.init(conf)[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_16 $$ when(app.getUser()).thenReturn(user)[ CD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_20 $$ nmContext.getApplications().put(appId, app)[ CD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_22 $$ container.setState(ContainerState.RUNNING)[ CD ]
Line_11 $$ RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(conf)-->Line_19 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)[ FD ]
Line_14 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)-->Line_19 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)[ FD ]
Line_12 $$ String user = "nobody"-->Line_29 $$ files = ContainerLogsUtils.getContainerLogDirs(container1, user, nmContext)[ FD ]
Line_15 $$ Application app = mock(Application.class)-->Line_17 $$ when(app.getAppId()).thenReturn(appId)[ FD ]
Line_2 $$ public void testContainerLogDirs() throws IOException, YarnException -->Line_26 $$ Assert.assertTrue(!(files.get(0).toString().contains("file:")))[ CD ]
Line_21 $$ MockContainer container = new MockContainer(appAttemptId, new AsyncDispatcher(), conf, user, appId, 1)-->Line_23 $$ nmContext.getContainers().put(container1, container)[ FD ]
Line_18 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)-->Line_19 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)[ FD ]
