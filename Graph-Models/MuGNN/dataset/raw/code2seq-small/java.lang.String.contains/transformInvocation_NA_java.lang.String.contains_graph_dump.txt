Line_19 $$ if (!environmentVars.containsKey("GRADLE_OPTS")) -->Line_21 $$ if (!environmentVars.containsKey("JAVA_OPTS")) [ CD ]
Line_7 $$ if (!jvmArg.contains(" ")) -->Line_9 $$ if (jvmArg.startsWith("-D")) [ CD ]
Line_2 $$ protected void transformInvocation(GradleInvocation invocation) -->Line_17 $$ Map<String, String> environmentVars = invocation.environmentVars[ CD ]
Line_18 $$ String jvmOptsEnvVar-->Line_20 $$ jvmOptsEnvVar = "GRADLE_OPTS"[ FD ]
Line_19 $$ if (!environmentVars.containsKey("GRADLE_OPTS")) -->Line_20 $$ jvmOptsEnvVar = "GRADLE_OPTS"[ CD ]
Line_17 $$ Map<String, String> environmentVars = invocation.environmentVars-->Line_27 $$ if (!environmentVars.containsKey("JAVA_HOME")) [ FD ]
Line_2 $$ protected void transformInvocation(GradleInvocation invocation) -->Line_27 $$ if (!environmentVars.containsKey("JAVA_HOME")) [ CD ]
Line_9 $$ if (jvmArg.startsWith("-D")) -->Line_10 $$ invocation.args.add(jvmArg)[ CD ]
Line_17 $$ Map<String, String> environmentVars = invocation.environmentVars-->Line_26 $$ environmentVars.put(jvmOptsEnvVar, toJvmArgsString(invocation.launcherJvmArgs))[ FD ]
Line_20 $$ jvmOptsEnvVar = "GRADLE_OPTS"-->Line_26 $$ environmentVars.put(jvmOptsEnvVar, toJvmArgsString(invocation.launcherJvmArgs))[ FD ]
Line_27 $$ if (!environmentVars.containsKey("JAVA_HOME")) -->Line_28 $$ environmentVars.put("JAVA_HOME", getJavaHome().getAbsolutePath())[ CD ]
Line_17 $$ Map<String, String> environmentVars = invocation.environmentVars-->Line_21 $$ if (!environmentVars.containsKey("JAVA_OPTS")) [ FD ]
Line_17 $$ Map<String, String> environmentVars = invocation.environmentVars-->Line_28 $$ environmentVars.put("JAVA_HOME", getJavaHome().getAbsolutePath())[ FD ]
Line_3 $$ if (getDistribution().isSupportsSpacesInGradleAndJavaOpts()) -->Line_4 $$ invocation.launcherJvmArgs.addAll(invocation.implicitLauncherJvmArgs)[ CD ]
Line_6 $$ for (String jvmArg : invocation.implicitLauncherJvmArgs) -->Line_9 $$ if (jvmArg.startsWith("-D")) [ FD ]
Line_17 $$ Map<String, String> environmentVars = invocation.environmentVars-->Line_19 $$ if (!environmentVars.containsKey("GRADLE_OPTS")) [ FD ]
Line_2 $$ protected void transformInvocation(GradleInvocation invocation) -->Line_19 $$ if (!environmentVars.containsKey("GRADLE_OPTS")) [ CD ]
Line_21 $$ if (!environmentVars.containsKey("JAVA_OPTS")) -->Line_22 $$ jvmOptsEnvVar = "JAVA_OPTS"[ CD ]
Line_6 $$ for (String jvmArg : invocation.implicitLauncherJvmArgs) -->Line_8 $$ invocation.launcherJvmArgs.add(jvmArg)[ FD ]
Line_18 $$ String jvmOptsEnvVar-->Line_22 $$ jvmOptsEnvVar = "JAVA_OPTS"[ FD ]
Line_2 $$ protected void transformInvocation(GradleInvocation invocation) -->Line_26 $$ environmentVars.put(jvmOptsEnvVar, toJvmArgsString(invocation.launcherJvmArgs))[ CD ]
Line_7 $$ if (!jvmArg.contains(" ")) -->Line_8 $$ invocation.launcherJvmArgs.add(jvmArg)[ CD ]
Line_18 $$ String jvmOptsEnvVar-->Line_26 $$ environmentVars.put(jvmOptsEnvVar, toJvmArgsString(invocation.launcherJvmArgs))[ FD ]
Line_6 $$ for (String jvmArg : invocation.implicitLauncherJvmArgs) -->Line_10 $$ invocation.args.add(jvmArg)[ FD ]
Line_6 $$ for (String jvmArg : invocation.implicitLauncherJvmArgs) -->Line_7 $$ if (!jvmArg.contains(" ")) [ FD ]
Line_2 $$ protected void transformInvocation(GradleInvocation invocation) -->Line_3 $$ if (getDistribution().isSupportsSpacesInGradleAndJavaOpts()) [ CD ]
Line_6 $$ for (String jvmArg : invocation.implicitLauncherJvmArgs) -->Line_12 $$ throw new UnsupportedOperationException(String.format("Cannot handle launcher JVM arg '%s' as it contains whitespace. This is not supported by Gradle %s.", jvmArg, getDistribution().getVersion().getVersion()))[ FD ]
Line_2 $$ protected void transformInvocation(GradleInvocation invocation) -->Line_18 $$ String jvmOptsEnvVar[ CD ]
Line_20 $$ jvmOptsEnvVar = "GRADLE_OPTS"-->Line_22 $$ jvmOptsEnvVar = "JAVA_OPTS"[ FD ]
Line_2 $$ protected void transformInvocation(GradleInvocation invocation) -->Line_16 $$ invocation.implicitLauncherJvmArgs.clear()[ CD ]
Line_22 $$ jvmOptsEnvVar = "JAVA_OPTS"-->Line_26 $$ environmentVars.put(jvmOptsEnvVar, toJvmArgsString(invocation.launcherJvmArgs))[ FD ]
