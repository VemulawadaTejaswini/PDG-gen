Line_97 $$ if (!attributeName.equals("argument1") && !attributeName.equals("argument2") && !attributeName.equals("line-number") && !attributeName.equals("selenium")) -->Line_98 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ CD ]
Line_105 $$ if (testCase.contains("#")) -->Line_107 $$ if (x == -1) [ CD ]
Line_67 $$ if (!attributeName.equals("line-number") && !attributeName.equals("macro")) -->Line_68 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ CD ]
Line_22 $$ String testCaseCommand = executeElement.attributeValue("test-case-command")-->Line_131 $$ String testCaseCommandName = testCaseCommand.substring(x + 1)[ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_57 $$ if (attributeName.equals("locator") || attributeName.equals("value") || attributeName.startsWith("locator-key")) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_24 $$ if (action != null) [ CD ]
Line_124 $$ if (testCaseCommand != null) -->Line_144 $$ if (testClass != null) [ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_83 $$ throwValidationException(1006, fileName, executeElement, "macro-mobile")[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_121 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_128 $$ if (testCaseCommand.contains("#")) -->Line_129 $$ int x = testCaseCommand.lastIndexOf("#")[ CD ]
Line_87 $$ if (!attributeName.equals("line-number") && !attributeName.equals("macro")) -->Line_88 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ CD ]
Line_61 $$ if (macro != null) -->Line_62 $$ if (Validator.isNull(macro) || !macro.matches(allowedExecuteAttributeValuesRegex)) [ CD ]
Line_43 $$ if (!attributeValue.contains("-Dfile") || !attributeValue.contains("-Dtoken") || !attributeValue.contains("-Dvalue")) -->Line_44 $$ throwValidationException(1018, fileName, executeElement, new String[] [ CD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_151 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_157 $$ List<Element> elements = executeElement.elements()-->Line_160 $$ Element element = elements.get(0)[ FD ]
Line_128 $$ if (testCaseCommand.contains("#")) -->Line_131 $$ String testCaseCommandName = testCaseCommand.substring(x + 1)[ CD ]
Line_18 $$ String macroDesktop = executeElement.attributeValue("macro-desktop")-->Line_71 $$ if (macroDesktop != null) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_93 $$ throwValidationException(1006, fileName, executeElement, "selenium")[ FD ]
Line_105 $$ if (testCase.contains("#")) -->Line_112 $$ if (Validator.isNull(testCaseCommandName) || Validator.isNull(testCaseName) || !testCaseName.equals("super")) [ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_17 $$ String macro = executeElement.attributeValue("macro")[ FD ]
Line_23 $$ String testClass = executeElement.attributeValue("test-class")-->Line_144 $$ if (testClass != null) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_151 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_37 $$ if (attributeName.equals("value1") && attributeValue.contains("move-file")) -->Line_38 $$ if (!attributeValue.contains("-Dfile") || !attributeValue.contains("-Dtofile")) [ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_21 $$ String testCase = executeElement.attributeValue("test-case")[ FD ]
Line_62 $$ if (Validator.isNull(macro) || !macro.matches(allowedExecuteAttributeValuesRegex)) -->Line_63 $$ throwValidationException(1006, fileName, executeElement, "macro")[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_49 $$ if (Validator.isNull(function) || !function.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_5 $$ for (Attribute attribute : attributes) -->Line_149 $$ String attributeName = attribute.getName()[ FD ]
Line_159 $$ if (!elements.isEmpty()) -->Line_160 $$ Element element = elements.get(0)[ CD ]
Line_12 $$ if (!hasAllowedAttributeName) -->Line_13 $$ throwValidationException(1004, fileName, executeElement, allowedExecuteAttributeNames)[ CD ]
Line_168 $$ if (executeElementName.equals("condition")) -->Line_169 $$ throwValidationException(1002, fileName, element, elementName)[ CD ]
Line_54 $$ if (!attributeName.equals("function") && !attributeName.equals("ignore-javascript-error") && !attributeName.equals("line-number") && !attributeName.startsWith("locator") && !attributeName.startsWith("value")) -->Line_55 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_18 $$ String macroDesktop = executeElement.attributeValue("macro-desktop")[ FD ]
Line_82 $$ if (Validator.isNull(macroMobile) || !macroMobile.matches(allowedExecuteAttributeValuesRegex)) -->Line_83 $$ throwValidationException(1006, fileName, executeElement, "macro-mobile")[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_68 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_3 $$ boolean hasAllowedAttributeName = false-->Line_12 $$ if (!hasAllowedAttributeName) [ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_58 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_102 $$ if (Validator.isNull(testCase) || !testCase.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_158 $$ if (allowedExecuteChildElementNames.length == 0) -->Line_165 $$ String executeElementName = executeElement.getName()[ CD ]
Line_30 $$ if (!attributeName.equals("action") && !attributeName.equals("line-number") && !attributeName.equals("locator1") && !attributeName.equals("locator2") && !attributeName.equals("locator-key1") && !attributeName.equals("locator-key2") && !attributeName.equals("value1") && !attributeName.equals("value2")) -->Line_31 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ CD ]
Line_106 $$ int x = testCase.lastIndexOf("#")-->Line_130 $$ String testCaseName = testCaseCommand.substring(0, x)[ FD ]
Line_160 $$ Element element = elements.get(0)-->Line_162 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_125 $$ if (Validator.isNull(testCaseCommand) || !testCaseCommand.matches(allowedExecuteAttributeValuesRegex)) -->Line_126 $$ throwValidationException(1006, fileName, executeElement, "test-case-command")[ CD ]
Line_159 $$ if (!elements.isEmpty()) -->Line_162 $$ throwValidationException(1002, fileName, element, elementName)[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_4 $$ List<Attribute> attributes = executeElement.attributes()[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_92 $$ if (Validator.isNull(selenium) || !selenium.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_23 $$ String testClass = executeElement.attributeValue("test-class")[ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_42 $$ if (attributeName.equals("value1") && attributeValue.contains("replace-file")) [ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_55 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_7 $$ if (ArrayUtil.contains(allowedExecuteAttributeNames, attributeName)) [ FD ]
Line_21 $$ String testCase = executeElement.attributeValue("test-case")-->Line_116 $$ throwValidationException(1015, fileName, executeElement, testCase)[ FD ]
Line_21 $$ String testCase = executeElement.attributeValue("test-case")-->Line_106 $$ int x = testCase.lastIndexOf("#")[ FD ]
Line_8 $$ hasAllowedAttributeName = true-->Line_12 $$ if (!hasAllowedAttributeName) [ FD ]
Line_38 $$ if (!attributeValue.contains("-Dfile") || !attributeValue.contains("-Dtofile")) -->Line_39 $$ throwValidationException(1018, fileName, executeElement, new String[] [ CD ]
Line_36 $$ String attributeValue = attribute.getValue()-->Line_42 $$ if (attributeName.equals("value1") && attributeValue.contains("replace-file")) [ FD ]
Line_110 $$ String testCaseName = testCase.substring(0, x)-->Line_112 $$ if (Validator.isNull(testCaseCommandName) || Validator.isNull(testCaseName) || !testCaseName.equals("super")) [ FD ]
Line_132 $$ if (Validator.isNull(testCaseCommandName) || Validator.isNull(testCaseName)) -->Line_133 $$ throwValidationException(1015, fileName, executeElement, testCaseCommand)[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_126 $$ throwValidationException(1006, fileName, executeElement, "test-case-command")[ FD ]
Line_124 $$ if (testCaseCommand != null) -->Line_128 $$ if (testCaseCommand.contains("#")) [ CD ]
Line_15 $$ String action = executeElement.attributeValue("action")-->Line_25 $$ if (Validator.isNull(action) || !action.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_106 $$ int x = testCase.lastIndexOf("#")-->Line_107 $$ if (x == -1) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_55 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_71 $$ if (macroDesktop != null) -->Line_81 $$ if (macroMobile != null) [ CD ]
Line_22 $$ String testCaseCommand = executeElement.attributeValue("test-case-command")-->Line_108 $$ throwValidationException(1015, fileName, executeElement, testCaseCommand)[ FD ]
Line_22 $$ String testCaseCommand = executeElement.attributeValue("test-case-command")-->Line_130 $$ String testCaseName = testCaseCommand.substring(0, x)[ FD ]
Line_106 $$ int x = testCase.lastIndexOf("#")-->Line_110 $$ String testCaseName = testCase.substring(0, x)[ FD ]
Line_140 $$ if (!attributeName.equals("line-number") && !attributeName.equals("test-case-command")) -->Line_141 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ CD ]
Line_145 $$ if (Validator.isNull(testClass) || !testClass.matches(allowedExecuteAttributeValuesRegex)) -->Line_146 $$ throwValidationException(1006, fileName, executeElement, "test-class")[ CD ]
Line_161 $$ String elementName = element.getName()-->Line_174 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_5 $$ for (Attribute attribute : attributes) -->Line_6 $$ String attributeName = attribute.getName()[ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_68 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_21 $$ String testCase = executeElement.attributeValue("test-case")-->Line_101 $$ if (testCase != null) [ FD ]
Line_36 $$ String attributeValue = attribute.getValue()-->Line_37 $$ if (attributeName.equals("value1") && attributeValue.contains("move-file")) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_172 $$ validateVarElement(fileName, element)[ FD ]
Line_107 $$ if (x == -1) -->Line_108 $$ throwValidationException(1015, fileName, executeElement, testCaseCommand)[ CD ]
Line_91 $$ if (selenium != null) -->Line_92 $$ if (Validator.isNull(selenium) || !selenium.matches(allowedExecuteAttributeValuesRegex)) [ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_22 $$ String testCaseCommand = executeElement.attributeValue("test-case-command")[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_116 $$ throwValidationException(1015, fileName, executeElement, testCase)[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_82 $$ if (Validator.isNull(macroMobile) || !macroMobile.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_141 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_92 $$ if (Validator.isNull(selenium) || !selenium.matches(allowedExecuteAttributeValuesRegex)) -->Line_93 $$ throwValidationException(1006, fileName, executeElement, "selenium")[ CD ]
Line_91 $$ if (selenium != null) -->Line_101 $$ if (testCase != null) [ CD ]
Line_61 $$ if (macro != null) -->Line_71 $$ if (macroDesktop != null) [ CD ]
Line_7 $$ if (ArrayUtil.contains(allowedExecuteAttributeNames, attributeName)) -->Line_8 $$ hasAllowedAttributeName = true[ CD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_30 $$ if (!attributeName.equals("action") && !attributeName.equals("line-number") && !attributeName.equals("locator1") && !attributeName.equals("locator2") && !attributeName.equals("locator-key1") && !attributeName.equals("locator-key2") && !attributeName.equals("value1") && !attributeName.equals("value2")) [ FD ]
Line_3 $$ boolean hasAllowedAttributeName = false-->Line_8 $$ hasAllowedAttributeName = true[ FD ]
Line_36 $$ String attributeValue = attribute.getValue()-->Line_43 $$ if (!attributeValue.contains("-Dfile") || !attributeValue.contains("-Dtoken") || !attributeValue.contains("-Dvalue")) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_63 $$ throwValidationException(1006, fileName, executeElement, "macro")[ FD ]
Line_21 $$ String testCase = executeElement.attributeValue("test-case")-->Line_111 $$ String testCaseCommandName = testCase.substring(x + 1)[ FD ]
Line_161 $$ String elementName = element.getName()-->Line_171 $$ if (elementName.equals("var")) [ FD ]
Line_16 $$ String function = executeElement.attributeValue("function")-->Line_48 $$ if (function != null) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_157 $$ List<Element> elements = executeElement.elements()[ CD ]
Line_81 $$ if (macroMobile != null) -->Line_82 $$ if (Validator.isNull(macroMobile) || !macroMobile.matches(allowedExecuteAttributeValuesRegex)) [ CD ]
Line_5 $$ for (Attribute attribute : attributes) -->Line_66 $$ String attributeName = attribute.getName()[ FD ]
Line_19 $$ String macroMobile = executeElement.attributeValue("macro-mobile")-->Line_82 $$ if (Validator.isNull(macroMobile) || !macroMobile.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_20 $$ String selenium = executeElement.attributeValue("selenium")-->Line_91 $$ if (selenium != null) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_26 $$ throwValidationException(1006, fileName, executeElement, "action")[ FD ]
Line_111 $$ String testCaseCommandName = testCase.substring(x + 1)-->Line_132 $$ if (Validator.isNull(testCaseCommandName) || Validator.isNull(testCaseName)) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_4 $$ List<Attribute> attributes = executeElement.attributes()[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_169 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_48 $$ if (function != null) -->Line_49 $$ if (Validator.isNull(function) || !function.matches(allowedExecuteAttributeValuesRegex)) [ CD ]
Line_111 $$ String testCaseCommandName = testCase.substring(x + 1)-->Line_112 $$ if (Validator.isNull(testCaseCommandName) || Validator.isNull(testCaseName) || !testCaseName.equals("super")) [ FD ]
Line_22 $$ String testCaseCommand = executeElement.attributeValue("test-case-command")-->Line_128 $$ if (testCaseCommand.contains("#")) [ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_88 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_54 $$ if (!attributeName.equals("function") && !attributeName.equals("ignore-javascript-error") && !attributeName.equals("line-number") && !attributeName.startsWith("locator") && !attributeName.startsWith("value")) [ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_37 $$ if (attributeName.equals("value1") && attributeValue.contains("move-file")) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_155 $$ throwValidationException(0, fileName)[ FD ]
Line_15 $$ String action = executeElement.attributeValue("action")-->Line_24 $$ if (action != null) [ FD ]
Line_49 $$ if (Validator.isNull(function) || !function.matches(allowedExecuteAttributeValuesRegex)) -->Line_50 $$ throwValidationException(1006, fileName, executeElement, "function")[ CD ]
Line_150 $$ if (!attributeName.equals("line-number") && !attributeName.equals("test-class")) -->Line_151 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_15 $$ String action = executeElement.attributeValue("action")[ FD ]
Line_17 $$ String macro = executeElement.attributeValue("macro")-->Line_62 $$ if (Validator.isNull(macro) || !macro.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_16 $$ String function = executeElement.attributeValue("function")[ CD ]
Line_24 $$ if (action != null) -->Line_25 $$ if (Validator.isNull(action) || !action.matches(allowedExecuteAttributeValuesRegex)) [ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_72 $$ if (Validator.isNull(macroDesktop) || !macroDesktop.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_160 $$ Element element = elements.get(0)-->Line_172 $$ validateVarElement(fileName, element)[ FD ]
Line_102 $$ if (Validator.isNull(testCase) || !testCase.matches(allowedExecuteAttributeValuesRegex)) -->Line_103 $$ throwValidationException(1006, fileName, executeElement, "test-case")[ CD ]
Line_5 $$ for (Attribute attribute : attributes) -->Line_36 $$ String attributeValue = attribute.getValue()[ FD ]
Line_17 $$ String macro = executeElement.attributeValue("macro")-->Line_61 $$ if (macro != null) [ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_33 $$ if (attributeName.equals("locator") || attributeName.equals("locator-key") || attributeName.equals("value")) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_25 $$ if (Validator.isNull(action) || !action.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_21 $$ String testCase = executeElement.attributeValue("test-case")-->Line_102 $$ if (Validator.isNull(testCase) || !testCase.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_18 $$ String macroDesktop = executeElement.attributeValue("macro-desktop")-->Line_72 $$ if (Validator.isNull(macroDesktop) || !macroDesktop.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_42 $$ if (attributeName.equals("value1") && attributeValue.contains("replace-file")) -->Line_43 $$ if (!attributeValue.contains("-Dfile") || !attributeValue.contains("-Dtoken") || !attributeValue.contains("-Dvalue")) [ CD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_67 $$ if (!attributeName.equals("line-number") && !attributeName.equals("macro")) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_15 $$ String action = executeElement.attributeValue("action")[ CD ]
Line_5 $$ for (Attribute attribute : attributes) -->Line_53 $$ String attributeName = attribute.getName()[ FD ]
Line_19 $$ String macroMobile = executeElement.attributeValue("macro-mobile")-->Line_81 $$ if (macroMobile != null) [ FD ]
Line_105 $$ if (testCase.contains("#")) -->Line_111 $$ String testCaseCommandName = testCase.substring(x + 1)[ CD ]
Line_105 $$ if (testCase.contains("#")) -->Line_116 $$ throwValidationException(1015, fileName, executeElement, testCase)[ CD ]
Line_160 $$ Element element = elements.get(0)-->Line_174 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_58 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_50 $$ throwValidationException(1006, fileName, executeElement, "function")[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_145 $$ if (Validator.isNull(testClass) || !testClass.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_165 $$ String executeElementName = executeElement.getName()[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_78 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_36 $$ String attributeValue = attribute.getValue()-->Line_38 $$ if (!attributeValue.contains("-Dfile") || !attributeValue.contains("-Dtofile")) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_98 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_87 $$ if (!attributeName.equals("line-number") && !attributeName.equals("macro")) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_13 $$ throwValidationException(1004, fileName, executeElement, allowedExecuteAttributeNames)[ FD ]
Line_23 $$ String testClass = executeElement.attributeValue("test-class")-->Line_145 $$ if (Validator.isNull(testClass) || !testClass.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_19 $$ String macroMobile = executeElement.attributeValue("macro-mobile")[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_34 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_160 $$ Element element = elements.get(0)-->Line_167 $$ String elementName = element.getName()[ FD ]
Line_33 $$ if (attributeName.equals("locator") || attributeName.equals("locator-key") || attributeName.equals("value")) -->Line_34 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_20 $$ String selenium = executeElement.attributeValue("selenium")[ FD ]
Line_101 $$ if (testCase != null) -->Line_102 $$ if (Validator.isNull(testCase) || !testCase.matches(allowedExecuteAttributeValuesRegex)) [ CD ]
Line_157 $$ List<Element> elements = executeElement.elements()-->Line_159 $$ if (!elements.isEmpty()) [ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_141 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_16 $$ String function = executeElement.attributeValue("function")[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_103 $$ throwValidationException(1006, fileName, executeElement, "test-case")[ FD ]
Line_120 $$ if (!attributeName.equals("line-number") && !attributeName.equals("test-case")) -->Line_121 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ CD ]
Line_128 $$ if (testCaseCommand.contains("#")) -->Line_136 $$ throwValidationException(1015, fileName, executeElement, testCaseCommand)[ CD ]
Line_160 $$ Element element = elements.get(0)-->Line_169 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_128 $$ if (testCaseCommand.contains("#")) -->Line_132 $$ if (Validator.isNull(testCaseCommandName) || Validator.isNull(testCaseName)) [ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_174 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_125 $$ if (Validator.isNull(testCaseCommand) || !testCaseCommand.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_21 $$ String testCase = executeElement.attributeValue("test-case")[ CD ]
Line_165 $$ String executeElementName = executeElement.getName()-->Line_168 $$ if (executeElementName.equals("condition")) [ FD ]
Line_160 $$ Element element = elements.get(0)-->Line_161 $$ String elementName = element.getName()[ FD ]
Line_5 $$ for (Attribute attribute : attributes) -->Line_86 $$ String attributeName = attribute.getName()[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_133 $$ throwValidationException(1015, fileName, executeElement, testCaseCommand)[ FD ]
Line_144 $$ if (testClass != null) -->Line_145 $$ if (Validator.isNull(testClass) || !testClass.matches(allowedExecuteAttributeValuesRegex)) [ CD ]
Line_112 $$ if (Validator.isNull(testCaseCommandName) || Validator.isNull(testCaseName) || !testCaseName.equals("super")) -->Line_113 $$ throwValidationException(1015, fileName, executeElement, testCase)[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_44 $$ throwValidationException(1018, fileName, executeElement, new String[] [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_73 $$ throwValidationException(1006, fileName, executeElement, "macro-desktop")[ FD ]
Line_16 $$ String function = executeElement.attributeValue("function")-->Line_49 $$ if (Validator.isNull(function) || !function.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_150 $$ if (!attributeName.equals("line-number") && !attributeName.equals("test-class")) [ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_121 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_171 $$ if (elementName.equals("var")) -->Line_174 $$ throwValidationException(1002, fileName, element, elementName)[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_23 $$ String testClass = executeElement.attributeValue("test-class")[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_17 $$ String macro = executeElement.attributeValue("macro")[ CD ]
Line_77 $$ if (!attributeName.equals("line-number") && !attributeName.equals("macro-desktop") && !attributeName.equals("macro-mobile")) -->Line_78 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_88 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_5 $$ for (Attribute attribute : attributes) -->Line_119 $$ String attributeName = attribute.getName()[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_162 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_140 $$ if (!attributeName.equals("line-number") && !attributeName.equals("test-case-command")) [ FD ]
Line_161 $$ String elementName = element.getName()-->Line_169 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_5 $$ for (Attribute attribute : attributes) -->Line_29 $$ String attributeName = attribute.getName()[ FD ]
Line_124 $$ if (testCaseCommand != null) -->Line_125 $$ if (Validator.isNull(testCaseCommand) || !testCaseCommand.matches(allowedExecuteAttributeValuesRegex)) [ CD ]
Line_48 $$ if (function != null) -->Line_61 $$ if (macro != null) [ CD ]
Line_22 $$ String testCaseCommand = executeElement.attributeValue("test-case-command")-->Line_129 $$ int x = testCaseCommand.lastIndexOf("#")[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_146 $$ throwValidationException(1006, fileName, executeElement, "test-class")[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_108 $$ throwValidationException(1015, fileName, executeElement, testCaseCommand)[ FD ]
Line_22 $$ String testCaseCommand = executeElement.attributeValue("test-case-command")-->Line_124 $$ if (testCaseCommand != null) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_19 $$ String macroMobile = executeElement.attributeValue("macro-mobile")[ FD ]
Line_22 $$ String testCaseCommand = executeElement.attributeValue("test-case-command")-->Line_125 $$ if (Validator.isNull(testCaseCommand) || !testCaseCommand.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_12 $$ if (!hasAllowedAttributeName) [ CD ]
Line_21 $$ String testCase = executeElement.attributeValue("test-case")-->Line_113 $$ throwValidationException(1015, fileName, executeElement, testCase)[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_136 $$ throwValidationException(1015, fileName, executeElement, testCaseCommand)[ FD ]
Line_171 $$ if (elementName.equals("var")) -->Line_172 $$ validateVarElement(fileName, element)[ CD ]
Line_158 $$ if (allowedExecuteChildElementNames.length == 0) -->Line_159 $$ if (!elements.isEmpty()) [ CD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_31 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_39 $$ throwValidationException(1018, fileName, executeElement, new String[] [ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_77 $$ if (!attributeName.equals("line-number") && !attributeName.equals("macro-desktop") && !attributeName.equals("macro-mobile")) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_157 $$ List<Element> elements = executeElement.elements()[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_20 $$ String selenium = executeElement.attributeValue("selenium")[ CD ]
Line_24 $$ if (action != null) -->Line_48 $$ if (function != null) [ CD ]
Line_22 $$ String testCaseCommand = executeElement.attributeValue("test-case-command")-->Line_136 $$ throwValidationException(1015, fileName, executeElement, testCaseCommand)[ FD ]
Line_5 $$ for (Attribute attribute : attributes) -->Line_139 $$ String attributeName = attribute.getName()[ FD ]
Line_20 $$ String selenium = executeElement.attributeValue("selenium")-->Line_92 $$ if (Validator.isNull(selenium) || !selenium.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_98 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_110 $$ String testCaseName = testCase.substring(0, x)-->Line_132 $$ if (Validator.isNull(testCaseCommandName) || Validator.isNull(testCaseName)) [ FD ]
Line_21 $$ String testCase = executeElement.attributeValue("test-case")-->Line_105 $$ if (testCase.contains("#")) [ FD ]
Line_128 $$ if (testCaseCommand.contains("#")) -->Line_130 $$ String testCaseName = testCaseCommand.substring(0, x)[ CD ]
Line_161 $$ String elementName = element.getName()-->Line_162 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_18 $$ String macroDesktop = executeElement.attributeValue("macro-desktop")[ CD ]
Line_159 $$ if (!elements.isEmpty()) -->Line_161 $$ String elementName = element.getName()[ CD ]
Line_144 $$ if (testClass != null) -->Line_155 $$ throwValidationException(0, fileName)[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_3 $$ boolean hasAllowedAttributeName = false[ CD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_78 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_25 $$ if (Validator.isNull(action) || !action.matches(allowedExecuteAttributeValuesRegex)) -->Line_26 $$ throwValidationException(1006, fileName, executeElement, "action")[ CD ]
Line_5 $$ for (Attribute attribute : attributes) -->Line_76 $$ String attributeName = attribute.getName()[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_22 $$ String testCaseCommand = executeElement.attributeValue("test-case-command")[ CD ]
Line_101 $$ if (testCase != null) -->Line_105 $$ if (testCase.contains("#")) [ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_62 $$ if (Validator.isNull(macro) || !macro.matches(allowedExecuteAttributeValuesRegex)) [ FD ]
Line_105 $$ if (testCase.contains("#")) -->Line_106 $$ int x = testCase.lastIndexOf("#")[ CD ]
Line_72 $$ if (Validator.isNull(macroDesktop) || !macroDesktop.matches(allowedExecuteAttributeValuesRegex)) -->Line_73 $$ throwValidationException(1006, fileName, executeElement, "macro-desktop")[ CD ]
Line_57 $$ if (attributeName.equals("locator") || attributeName.equals("value") || attributeName.startsWith("locator-key")) -->Line_58 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ CD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_34 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_105 $$ if (testCase.contains("#")) -->Line_110 $$ String testCaseName = testCase.substring(0, x)[ CD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_113 $$ throwValidationException(1015, fileName, executeElement, testCase)[ FD ]
Line_5 $$ for (Attribute attribute : attributes) -->Line_96 $$ String attributeName = attribute.getName()[ FD ]
Line_81 $$ if (macroMobile != null) -->Line_91 $$ if (selenium != null) [ CD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_120 $$ if (!attributeName.equals("line-number") && !attributeName.equals("test-case")) [ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_158 $$ if (allowedExecuteChildElementNames.length == 0) [ CD ]
Line_101 $$ if (testCase != null) -->Line_124 $$ if (testCaseCommand != null) [ CD ]
Line_71 $$ if (macroDesktop != null) -->Line_72 $$ if (Validator.isNull(macroDesktop) || !macroDesktop.matches(allowedExecuteAttributeValuesRegex)) [ CD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_97 $$ if (!attributeName.equals("argument1") && !attributeName.equals("argument2") && !attributeName.equals("line-number") && !attributeName.equals("selenium")) [ FD ]
Line_22 $$ String testCaseCommand = executeElement.attributeValue("test-case-command")-->Line_133 $$ throwValidationException(1015, fileName, executeElement, testCaseCommand)[ FD ]
Line_2 $$ protected void validateExecuteElement(String fileName, Element executeElement, String[] allowedExecuteAttributeNames, String allowedExecuteAttributeValuesRegex, String[] allowedExecuteChildElementNames) -->Line_31 $$ throwValidationException(1005, fileName, executeElement, attributeName)[ FD ]
Line_21 $$ String testCase = executeElement.attributeValue("test-case")-->Line_110 $$ String testCaseName = testCase.substring(0, x)[ FD ]
Line_6 $$ String attributeName = attribute.getName()-->Line_7 $$ if (ArrayUtil.contains(allowedExecuteAttributeNames, attributeName)) [ FD ]
