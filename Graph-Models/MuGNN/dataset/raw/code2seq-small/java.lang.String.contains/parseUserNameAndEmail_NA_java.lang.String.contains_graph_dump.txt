Line_15 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex).trim()-->Line_24 $$ return Couple.of(userName, email)[ FD ]
Line_10 $$ userName = authorString.substring(0, startEmailIndex).trim()-->Line_14 $$ userName = authorString.substring(startEmailIndex + 1, startDomainIndex).trim()[ FD ]
Line_3 $$ int startEmailIndex = authorString.indexOf('<')-->Line_10 $$ userName = authorString.substring(0, startEmailIndex).trim()[ FD ]
Line_22 $$ email = ""-->Line_24 $$ return Couple.of(userName, email)[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_6 $$ String userName[ CD ]
Line_14 $$ userName = authorString.substring(startEmailIndex + 1, startDomainIndex).trim()-->Line_17 $$ userName = authorString.substring(0, startDomainIndex).trim()[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_4 $$ int startDomainIndex = authorString.indexOf('@')[ CD ]
Line_10 $$ userName = authorString.substring(0, startEmailIndex).trim()-->Line_24 $$ return Couple.of(userName, email)[ FD ]
Line_6 $$ String userName-->Line_17 $$ userName = authorString.substring(0, startDomainIndex).trim()[ FD ]
Line_15 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex).trim()-->Line_18 $$ email = authorString[ FD ]
Line_6 $$ String userName-->Line_21 $$ userName = authorString.trim()[ FD ]
Line_4 $$ int startDomainIndex = authorString.indexOf('@')-->Line_17 $$ userName = authorString.substring(0, startDomainIndex).trim()[ FD ]
Line_6 $$ String userName-->Line_10 $$ userName = authorString.substring(0, startEmailIndex).trim()[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_18 $$ email = authorString[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_5 $$ int endEmailIndex = authorString.indexOf('>')[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_8 $$ if (0 < startEmailIndex && startEmailIndex < startDomainIndex && startDomainIndex < endEmailIndex) [ CD ]
Line_8 $$ if (0 < startEmailIndex && startEmailIndex < startDomainIndex && startDomainIndex < endEmailIndex) -->Line_9 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex)[ CD ]
Line_6 $$ String userName-->Line_24 $$ return Couple.of(userName, email)[ FD ]
Line_14 $$ userName = authorString.substring(startEmailIndex + 1, startDomainIndex).trim()-->Line_21 $$ userName = authorString.trim()[ FD ]
Line_18 $$ email = authorString-->Line_24 $$ return Couple.of(userName, email)[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_7 $$ String email[ CD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_4 $$ int startDomainIndex = authorString.indexOf('@')[ FD ]
Line_13 $$ if (startEmailIndex >= 0 && startDomainIndex > startEmailIndex && startDomainIndex < endEmailIndex) -->Line_17 $$ userName = authorString.substring(0, startDomainIndex).trim()[ CD ]
Line_13 $$ if (startEmailIndex >= 0 && startDomainIndex > startEmailIndex && startDomainIndex < endEmailIndex) -->Line_18 $$ email = authorString[ CD ]
Line_5 $$ int endEmailIndex = authorString.indexOf('>')-->Line_15 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex).trim()[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_12 $$ if (!authorString.contains(" ") && startDomainIndex > 0) [ FD ]
Line_7 $$ String email-->Line_22 $$ email = ""[ FD ]
Line_12 $$ if (!authorString.contains(" ") && startDomainIndex > 0) -->Line_21 $$ userName = authorString.trim()[ CD ]
Line_18 $$ email = authorString-->Line_22 $$ email = ""[ FD ]
Line_13 $$ if (startEmailIndex >= 0 && startDomainIndex > startEmailIndex && startDomainIndex < endEmailIndex) -->Line_14 $$ userName = authorString.substring(startEmailIndex + 1, startDomainIndex).trim()[ CD ]
Line_7 $$ String email-->Line_18 $$ email = authorString[ FD ]
Line_9 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex)-->Line_24 $$ return Couple.of(userName, email)[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_3 $$ int startEmailIndex = authorString.indexOf('<')[ FD ]
Line_8 $$ if (0 < startEmailIndex && startEmailIndex < startDomainIndex && startDomainIndex < endEmailIndex) -->Line_12 $$ if (!authorString.contains(" ") && startDomainIndex > 0) [ CD ]
Line_7 $$ String email-->Line_15 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex).trim()[ FD ]
Line_8 $$ if (0 < startEmailIndex && startEmailIndex < startDomainIndex && startDomainIndex < endEmailIndex) -->Line_10 $$ userName = authorString.substring(0, startEmailIndex).trim()[ CD ]
Line_6 $$ String userName-->Line_14 $$ userName = authorString.substring(startEmailIndex + 1, startDomainIndex).trim()[ FD ]
Line_14 $$ userName = authorString.substring(startEmailIndex + 1, startDomainIndex).trim()-->Line_24 $$ return Couple.of(userName, email)[ FD ]
Line_9 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex)-->Line_18 $$ email = authorString[ FD ]
Line_12 $$ if (!authorString.contains(" ") && startDomainIndex > 0) -->Line_13 $$ if (startEmailIndex >= 0 && startDomainIndex > startEmailIndex && startDomainIndex < endEmailIndex) [ CD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_5 $$ int endEmailIndex = authorString.indexOf('>')[ CD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_14 $$ userName = authorString.substring(startEmailIndex + 1, startDomainIndex).trim()[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_17 $$ userName = authorString.substring(0, startDomainIndex).trim()[ FD ]
Line_10 $$ userName = authorString.substring(0, startEmailIndex).trim()-->Line_17 $$ userName = authorString.substring(0, startDomainIndex).trim()[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_21 $$ userName = authorString.trim()[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_10 $$ userName = authorString.substring(0, startEmailIndex).trim()[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_15 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex).trim()[ FD ]
Line_12 $$ if (!authorString.contains(" ") && startDomainIndex > 0) -->Line_22 $$ email = ""[ CD ]
Line_21 $$ userName = authorString.trim()-->Line_24 $$ return Couple.of(userName, email)[ FD ]
Line_7 $$ String email-->Line_9 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex)[ FD ]
Line_17 $$ userName = authorString.substring(0, startDomainIndex).trim()-->Line_24 $$ return Couple.of(userName, email)[ FD ]
Line_13 $$ if (startEmailIndex >= 0 && startDomainIndex > startEmailIndex && startDomainIndex < endEmailIndex) -->Line_15 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex).trim()[ CD ]
Line_17 $$ userName = authorString.substring(0, startDomainIndex).trim()-->Line_21 $$ userName = authorString.trim()[ FD ]
Line_9 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex)-->Line_22 $$ email = ""[ FD ]
Line_15 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex).trim()-->Line_22 $$ email = ""[ FD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_3 $$ int startEmailIndex = authorString.indexOf('<')[ CD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_24 $$ return Couple.of(userName, email)[ CD ]
Line_2 $$ public static Couple<String> parseUserNameAndEmail(@NotNull String authorString) -->Line_9 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex)[ FD ]
Line_5 $$ int endEmailIndex = authorString.indexOf('>')-->Line_9 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex)[ FD ]
Line_10 $$ userName = authorString.substring(0, startEmailIndex).trim()-->Line_21 $$ userName = authorString.trim()[ FD ]
Line_9 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex)-->Line_15 $$ email = authorString.substring(startEmailIndex + 1, endEmailIndex).trim()[ FD ]
Line_4 $$ int startDomainIndex = authorString.indexOf('@')-->Line_14 $$ userName = authorString.substring(startEmailIndex + 1, startDomainIndex).trim()[ FD ]
Line_7 $$ String email-->Line_24 $$ return Couple.of(userName, email)[ FD ]
