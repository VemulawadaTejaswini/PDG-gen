Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_55 $$ buf.append(res.replace("#end", "").replace("#treeend", ""))[ FD ]
Line_6 $$ if (expression != null) -->Line_20 $$ anchor.append("<font style=\"font-weight:bold; color:#FF0000\";>")[ CD ]
Line_34 $$ String res = descriptionTemplate.replaceAll(reference, anchor.toString())-->Line_55 $$ buf.append(res.replace("#end", "").replace("#treeend", ""))[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_3 $$ PsiElement expression = description instanceof ProblemDescriptor ? ((ProblemDescriptor) description).getPsiElement() : null[ CD ]
Line_6 $$ if (expression != null) -->Line_11 $$ if (myExporter == null) [ CD ]
Line_28 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "<code>", "'")-->Line_30 $$ descriptionTemplate = XmlStringUtil.escapeString(descriptionTemplate)[ FD ]
Line_24 $$ String descriptionTemplate = description.getDescriptionTemplate()-->Line_29 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "</code>", "'")[ FD ]
Line_25 $$ if (XmlStringUtil.isWrappedInHtml(descriptionTemplate)) -->Line_29 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "</code>", "'")[ CD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_24 $$ String descriptionTemplate = description.getDescriptionTemplate()[ FD ]
Line_5 $$ VirtualFile vFile = null-->Line_44 $$ lineAnchor.append(appendURL(vFile, String.valueOf(offset)))[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_37 $$ if (expression != null && lineNumber > 0) [ CD ]
Line_4 $$ StringBuilder anchor = new StringBuilder()-->Line_17 $$ anchor.append(ProblemDescriptorUtil.extractHighlightedText(description, expression).replaceAll("\\$", "\\\\\\$"))[ FD ]
Line_4 $$ StringBuilder anchor = new StringBuilder()-->Line_10 $$ anchor.append("<a HREF=\"")[ FD ]
Line_24 $$ String descriptionTemplate = description.getDescriptionTemplate()-->Line_25 $$ if (XmlStringUtil.isWrappedInHtml(descriptionTemplate)) [ FD ]
Line_24 $$ String descriptionTemplate = description.getDescriptionTemplate()-->Line_34 $$ String res = descriptionTemplate.replaceAll(reference, anchor.toString())[ FD ]
Line_24 $$ String descriptionTemplate = description.getDescriptionTemplate()-->Line_28 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "<code>", "'")[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_4 $$ StringBuilder anchor = new StringBuilder()[ CD ]
Line_25 $$ if (XmlStringUtil.isWrappedInHtml(descriptionTemplate)) -->Line_28 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "<code>", "'")[ CD ]
Line_36 $$ StringBuffer lineAnchor = new StringBuffer()-->Line_44 $$ lineAnchor.append(appendURL(vFile, String.valueOf(offset)))[ FD ]
Line_26 $$ descriptionTemplate = XmlStringUtil.stripHtml(descriptionTemplate)-->Line_29 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "</code>", "'")[ FD ]
Line_7 $$ vFile = expression.getContainingFile().getVirtualFile()-->Line_8 $$ if (vFile instanceof VirtualFileWindow)[ FD ]
Line_42 $$ int offset = doc.getLineStartOffset(lineNumber - 1)-->Line_43 $$ offset = CharArrayUtil.shiftForward(doc.getCharsSequence(), offset, " \t")[ FD ]
Line_34 $$ String res = descriptionTemplate.replaceAll(reference, anchor.toString())-->Line_51 $$ res += " (" + location + ")"[ FD ]
Line_6 $$ if (expression != null) -->Line_7 $$ vFile = expression.getContainingFile().getVirtualFile()[ CD ]
Line_26 $$ descriptionTemplate = XmlStringUtil.stripHtml(descriptionTemplate)-->Line_34 $$ String res = descriptionTemplate.replaceAll(reference, anchor.toString())[ FD ]
Line_6 $$ if (expression != null) -->Line_22 $$ anchor.append("</font>")[ CD ]
Line_30 $$ descriptionTemplate = XmlStringUtil.escapeString(descriptionTemplate)-->Line_34 $$ String res = descriptionTemplate.replaceAll(reference, anchor.toString())[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_36 $$ StringBuffer lineAnchor = new StringBuffer()[ CD ]
Line_5 $$ VirtualFile vFile = null-->Line_12 $$ anchor.append(appendURL(vFile, "descr:" + i))[ FD ]
Line_36 $$ StringBuffer lineAnchor = new StringBuffer()-->Line_45 $$ lineAnchor.append("\">")[ FD ]
Line_9 $$ vFile = ((VirtualFileWindow) vFile).getDelegate()-->Line_38 $$ Document doc = FileDocumentManager.getInstance().getDocument(vFile)[ FD ]
Line_6 $$ if (expression != null) -->Line_17 $$ anchor.append(ProblemDescriptorUtil.extractHighlightedText(description, expression).replaceAll("\\$", "\\\\\\$"))[ CD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_14 $$ anchor.append(myExporter.getURL(refElement))[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_57 $$ composeAdditionalDescription(buf, refElement)[ FD ]
Line_26 $$ descriptionTemplate = XmlStringUtil.stripHtml(descriptionTemplate)-->Line_28 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "<code>", "'")[ FD ]
Line_32 $$ final String reference = "#ref"-->Line_34 $$ String res = descriptionTemplate.replaceAll(reference, anchor.toString())[ FD ]
Line_37 $$ if (expression != null && lineNumber > 0) -->Line_38 $$ Document doc = FileDocumentManager.getInstance().getDocument(vFile)[ CD ]
Line_25 $$ if (XmlStringUtil.isWrappedInHtml(descriptionTemplate)) -->Line_30 $$ descriptionTemplate = XmlStringUtil.escapeString(descriptionTemplate)[ CD ]
Line_5 $$ VirtualFile vFile = null-->Line_38 $$ Document doc = FileDocumentManager.getInstance().getDocument(vFile)[ FD ]
Line_51 $$ res += " (" + location + ")"-->Line_53 $$ res = res.replaceAll(location, lineAnchor.toString())[ FD ]
Line_3 $$ PsiElement expression = description instanceof ProblemDescriptor ? ((ProblemDescriptor) description).getPsiElement() : null-->Line_7 $$ vFile = expression.getContainingFile().getVirtualFile()[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_56 $$ buf.append(BR).append(BR)[ CD ]
Line_36 $$ StringBuffer lineAnchor = new StringBuffer()-->Line_39 $$ lineAnchor.append(InspectionsBundle.message("inspection.export.results.at.line")).append(" ")[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_34 $$ String res = descriptionTemplate.replaceAll(reference, anchor.toString())[ CD ]
Line_5 $$ VirtualFile vFile = null-->Line_7 $$ vFile = expression.getContainingFile().getVirtualFile()[ FD ]
Line_11 $$ if (myExporter == null) -->Line_14 $$ anchor.append(myExporter.getURL(refElement))[ CD ]
Line_36 $$ StringBuffer lineAnchor = new StringBuffer()-->Line_41 $$ lineAnchor.append("<a HREF=\"")[ FD ]
Line_4 $$ StringBuilder anchor = new StringBuilder()-->Line_21 $$ anchor.append(InspectionsBundle.message("inspection.export.results.invalidated.item"))[ FD ]
Line_37 $$ if (expression != null && lineNumber > 0) -->Line_53 $$ res = res.replaceAll(location, lineAnchor.toString())[ CD ]
Line_9 $$ vFile = ((VirtualFileWindow) vFile).getDelegate()-->Line_44 $$ lineAnchor.append(appendURL(vFile, String.valueOf(offset)))[ FD ]
Line_5 $$ VirtualFile vFile = null-->Line_8 $$ if (vFile instanceof VirtualFileWindow)[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_24 $$ String descriptionTemplate = description.getDescriptionTemplate()[ CD ]
Line_6 $$ if (expression != null) -->Line_10 $$ anchor.append("<a HREF=\"")[ CD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_35 $$ final int lineNumber = description instanceof ProblemDescriptor ? ((ProblemDescriptor) description).getLineNumber() : -1[ CD ]
Line_28 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "<code>", "'")-->Line_34 $$ String res = descriptionTemplate.replaceAll(reference, anchor.toString())[ FD ]
Line_28 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "<code>", "'")-->Line_33 $$ final boolean containsReference = descriptionTemplate.contains(reference)[ FD ]
Line_36 $$ StringBuffer lineAnchor = new StringBuffer()-->Line_53 $$ res = res.replaceAll(location, lineAnchor.toString())[ FD ]
Line_6 $$ if (expression != null) -->Line_16 $$ anchor.append("\">")[ CD ]
Line_6 $$ if (expression != null) -->Line_18 $$ anchor.append("</a>")[ CD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_56 $$ buf.append(BR).append(BR)[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_17 $$ anchor.append(ProblemDescriptorUtil.extractHighlightedText(description, expression).replaceAll("\\$", "\\\\\\$"))[ FD ]
Line_24 $$ String descriptionTemplate = description.getDescriptionTemplate()-->Line_26 $$ descriptionTemplate = XmlStringUtil.stripHtml(descriptionTemplate)[ FD ]
Line_25 $$ if (XmlStringUtil.isWrappedInHtml(descriptionTemplate)) -->Line_26 $$ descriptionTemplate = XmlStringUtil.stripHtml(descriptionTemplate)[ CD ]
Line_37 $$ if (expression != null && lineNumber > 0) -->Line_40 $$ if (myExporter == null) [ CD ]
Line_38 $$ Document doc = FileDocumentManager.getInstance().getDocument(vFile)-->Line_43 $$ offset = CharArrayUtil.shiftForward(doc.getCharsSequence(), offset, " \t")[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_55 $$ buf.append(res.replace("#end", "").replace("#treeend", ""))[ CD ]
Line_30 $$ descriptionTemplate = XmlStringUtil.escapeString(descriptionTemplate)-->Line_33 $$ final boolean containsReference = descriptionTemplate.contains(reference)[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_57 $$ composeAdditionalDescription(buf, refElement)[ CD ]
Line_4 $$ StringBuilder anchor = new StringBuilder()-->Line_22 $$ anchor.append("</font>")[ FD ]
Line_28 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "<code>", "'")-->Line_29 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "</code>", "'")[ FD ]
Line_37 $$ if (expression != null && lineNumber > 0) -->Line_49 $$ final String location = "#loc"[ CD ]
Line_36 $$ StringBuffer lineAnchor = new StringBuffer()-->Line_47 $$ lineAnchor.append(Integer.toString(lineNumber))[ FD ]
Line_40 $$ if (myExporter == null) -->Line_42 $$ int offset = doc.getLineStartOffset(lineNumber - 1)[ CD ]
Line_40 $$ if (myExporter == null) -->Line_44 $$ lineAnchor.append(appendURL(vFile, String.valueOf(offset)))[ CD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_32 $$ final String reference = "#ref"[ CD ]
Line_8 $$ if (vFile instanceof VirtualFileWindow)-->Line_9 $$ vFile = ((VirtualFileWindow) vFile).getDelegate()[ CD ]
Line_11 $$ if (myExporter == null) -->Line_12 $$ anchor.append(appendURL(vFile, "descr:" + i))[ CD ]
Line_6 $$ if (expression != null) -->Line_8 $$ if (vFile instanceof VirtualFileWindow)[ CD ]
Line_7 $$ vFile = expression.getContainingFile().getVirtualFile()-->Line_9 $$ vFile = ((VirtualFileWindow) vFile).getDelegate()[ FD ]
Line_7 $$ vFile = expression.getContainingFile().getVirtualFile()-->Line_12 $$ anchor.append(appendURL(vFile, "descr:" + i))[ FD ]
Line_3 $$ PsiElement expression = description instanceof ProblemDescriptor ? ((ProblemDescriptor) description).getPsiElement() : null-->Line_6 $$ if (expression != null) [ FD ]
Line_37 $$ if (expression != null && lineNumber > 0) -->Line_48 $$ lineAnchor.append("</a>")[ CD ]
Line_4 $$ StringBuilder anchor = new StringBuilder()-->Line_16 $$ anchor.append("\">")[ FD ]
Line_5 $$ VirtualFile vFile = null-->Line_9 $$ vFile = ((VirtualFileWindow) vFile).getDelegate()[ FD ]
Line_4 $$ StringBuilder anchor = new StringBuilder()-->Line_12 $$ anchor.append(appendURL(vFile, "descr:" + i))[ FD ]
Line_34 $$ String res = descriptionTemplate.replaceAll(reference, anchor.toString())-->Line_53 $$ res = res.replaceAll(location, lineAnchor.toString())[ FD ]
Line_4 $$ StringBuilder anchor = new StringBuilder()-->Line_20 $$ anchor.append("<font style=\"font-weight:bold; color:#FF0000\";>")[ FD ]
Line_40 $$ if (myExporter == null) -->Line_43 $$ offset = CharArrayUtil.shiftForward(doc.getCharsSequence(), offset, " \t")[ CD ]
Line_53 $$ res = res.replaceAll(location, lineAnchor.toString())-->Line_55 $$ buf.append(res.replace("#end", "").replace("#treeend", ""))[ FD ]
Line_26 $$ descriptionTemplate = XmlStringUtil.stripHtml(descriptionTemplate)-->Line_30 $$ descriptionTemplate = XmlStringUtil.escapeString(descriptionTemplate)[ FD ]
Line_43 $$ offset = CharArrayUtil.shiftForward(doc.getCharsSequence(), offset, " \t")-->Line_44 $$ lineAnchor.append(appendURL(vFile, String.valueOf(offset)))[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_5 $$ VirtualFile vFile = null[ CD ]
Line_49 $$ final String location = "#loc"-->Line_53 $$ res = res.replaceAll(location, lineAnchor.toString())[ FD ]
Line_32 $$ final String reference = "#ref"-->Line_33 $$ final boolean containsReference = descriptionTemplate.contains(reference)[ FD ]
Line_49 $$ final String location = "#loc"-->Line_50 $$ if (!res.contains(location)) [ FD ]
Line_36 $$ StringBuffer lineAnchor = new StringBuffer()-->Line_48 $$ lineAnchor.append("</a>")[ FD ]
Line_37 $$ if (expression != null && lineNumber > 0) -->Line_50 $$ if (!res.contains(location)) [ CD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_25 $$ if (XmlStringUtil.isWrappedInHtml(descriptionTemplate)) [ CD ]
Line_9 $$ vFile = ((VirtualFileWindow) vFile).getDelegate()-->Line_12 $$ anchor.append(appendURL(vFile, "descr:" + i))[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_6 $$ if (expression != null) [ CD ]
Line_34 $$ String res = descriptionTemplate.replaceAll(reference, anchor.toString())-->Line_50 $$ if (!res.contains(location)) [ FD ]
Line_42 $$ int offset = doc.getLineStartOffset(lineNumber - 1)-->Line_44 $$ lineAnchor.append(appendURL(vFile, String.valueOf(offset)))[ FD ]
Line_24 $$ String descriptionTemplate = description.getDescriptionTemplate()-->Line_33 $$ final boolean containsReference = descriptionTemplate.contains(reference)[ FD ]
Line_40 $$ if (myExporter == null) -->Line_41 $$ lineAnchor.append("<a HREF=\"")[ CD ]
Line_29 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "</code>", "'")-->Line_30 $$ descriptionTemplate = XmlStringUtil.escapeString(descriptionTemplate)[ FD ]
Line_26 $$ descriptionTemplate = XmlStringUtil.stripHtml(descriptionTemplate)-->Line_33 $$ final boolean containsReference = descriptionTemplate.contains(reference)[ FD ]
Line_50 $$ if (!res.contains(location)) -->Line_51 $$ res += " (" + location + ")"[ CD ]
Line_3 $$ PsiElement expression = description instanceof ProblemDescriptor ? ((ProblemDescriptor) description).getPsiElement() : null-->Line_17 $$ anchor.append(ProblemDescriptorUtil.extractHighlightedText(description, expression).replaceAll("\\$", "\\\\\\$"))[ FD ]
Line_7 $$ vFile = expression.getContainingFile().getVirtualFile()-->Line_38 $$ Document doc = FileDocumentManager.getInstance().getDocument(vFile)[ FD ]
Line_24 $$ String descriptionTemplate = description.getDescriptionTemplate()-->Line_30 $$ descriptionTemplate = XmlStringUtil.escapeString(descriptionTemplate)[ FD ]
Line_51 $$ res += " (" + location + ")"-->Line_55 $$ buf.append(res.replace("#end", "").replace("#treeend", ""))[ FD ]
Line_2 $$ protected void composeDescription(@NotNull CommonProblemDescriptor description, int i, @NotNull StringBuffer buf, @NotNull RefEntity refElement) -->Line_33 $$ final boolean containsReference = descriptionTemplate.contains(reference)[ CD ]
Line_29 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "</code>", "'")-->Line_33 $$ final boolean containsReference = descriptionTemplate.contains(reference)[ FD ]
Line_29 $$ descriptionTemplate = StringUtil.replace(descriptionTemplate, "</code>", "'")-->Line_34 $$ String res = descriptionTemplate.replaceAll(reference, anchor.toString())[ FD ]
Line_38 $$ Document doc = FileDocumentManager.getInstance().getDocument(vFile)-->Line_42 $$ int offset = doc.getLineStartOffset(lineNumber - 1)[ FD ]
Line_7 $$ vFile = expression.getContainingFile().getVirtualFile()-->Line_44 $$ lineAnchor.append(appendURL(vFile, String.valueOf(offset)))[ FD ]
Line_35 $$ final int lineNumber = description instanceof ProblemDescriptor ? ((ProblemDescriptor) description).getLineNumber() : -1-->Line_47 $$ lineAnchor.append(Integer.toString(lineNumber))[ FD ]
Line_40 $$ if (myExporter == null) -->Line_45 $$ lineAnchor.append("\">")[ CD ]
Line_4 $$ StringBuilder anchor = new StringBuilder()-->Line_18 $$ anchor.append("</a>")[ FD ]
Line_37 $$ if (expression != null && lineNumber > 0) -->Line_39 $$ lineAnchor.append(InspectionsBundle.message("inspection.export.results.at.line")).append(" ")[ CD ]
Line_37 $$ if (expression != null && lineNumber > 0) -->Line_47 $$ lineAnchor.append(Integer.toString(lineNumber))[ CD ]
Line_6 $$ if (expression != null) -->Line_21 $$ anchor.append(InspectionsBundle.message("inspection.export.results.invalidated.item"))[ CD ]
Line_4 $$ StringBuilder anchor = new StringBuilder()-->Line_34 $$ String res = descriptionTemplate.replaceAll(reference, anchor.toString())[ FD ]
Line_4 $$ StringBuilder anchor = new StringBuilder()-->Line_14 $$ anchor.append(myExporter.getURL(refElement))[ FD ]
