Line_13 $$ Map<String, String> env = new HashMap<String, String>()-->Line_16 $$ ContainerLaunch.writeLaunchEnv(fos, env, resources, commands)[ FD ]
Line_3 $$ File shellFile = null-->Line_32 $$ shellFile.delete()[ FD ]
Line_12 $$ FileOutputStream fos = new FileOutputStream(shellFile, true)-->Line_17 $$ fos.flush()[ FD ]
Line_3 $$ File shellFile = null-->Line_19 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] [ FD ]
Line_6 $$ String command = Shell.WINDOWS ? "@echo \"hello\" & @echo \"error\" 1>&2 & exit /b 2" : "echo \"hello\"; echo \"error\" 1>&2; exit 2;"-->Line_9 $$ writer.println(command)[ FD ]
Line_6 $$ String command = Shell.WINDOWS ? "@echo \"hello\" & @echo \"error\" 1>&2 & exit /b 2" : "echo \"hello\"; echo \"error\" 1>&2; exit 2;"-->Line_15 $$ commands.add(command)[ FD ]
Line_12 $$ FileOutputStream fos = new FileOutputStream(shellFile, true)-->Line_18 $$ fos.close()[ FD ]
Line_3 $$ File shellFile = null-->Line_8 $$ FileUtil.setExecutable(shellFile, true)[ FD ]
Line_19 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] -->Line_28 $$ Assert.assertTrue(shexc.getOutput().contains("hello"))[ FD ]
Line_5 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")-->Line_31 $$ if (shellFile != null && shellFile.exists()) [ FD ]
Line_5 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")-->Line_32 $$ shellFile.delete()[ FD ]
Line_14 $$ List<String> commands = new ArrayList<String>()-->Line_15 $$ commands.add(command)[ FD ]
Line_7 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(shellFile))-->Line_10 $$ writer.close()[ FD ]
Line_25 $$ diagnostics = e.getMessage()-->Line_27 $$ Assert.assertTrue(diagnostics.contains("error"))[ FD ]
Line_2 $$ public void testContainerLaunchStdoutAndStderrDiagnostics() throws IOException -->Line_3 $$ File shellFile = null[ CD ]
Line_14 $$ List<String> commands = new ArrayList<String>()-->Line_16 $$ ContainerLaunch.writeLaunchEnv(fos, env, resources, commands)[ FD ]
Line_3 $$ File shellFile = null-->Line_5 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")[ FD ]
Line_12 $$ FileOutputStream fos = new FileOutputStream(shellFile, true)-->Line_16 $$ ContainerLaunch.writeLaunchEnv(fos, env, resources, commands)[ FD ]
Line_19 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] -->Line_29 $$ Assert.assertTrue(shexc.getExitCode() == 2)[ FD ]
Line_19 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] -->Line_22 $$ shexc.execute()[ FD ]
Line_3 $$ File shellFile = null-->Line_31 $$ if (shellFile != null && shellFile.exists()) [ FD ]
Line_20 $$ String diagnostics = null-->Line_27 $$ Assert.assertTrue(diagnostics.contains("error"))[ FD ]
Line_7 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(shellFile))-->Line_9 $$ writer.println(command)[ FD ]
Line_11 $$ Map<Path, List<String>> resources = new HashMap<Path, List<String>>()-->Line_16 $$ ContainerLaunch.writeLaunchEnv(fos, env, resources, commands)[ FD ]
Line_5 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")-->Line_8 $$ FileUtil.setExecutable(shellFile, true)[ FD ]
Line_5 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")-->Line_19 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] [ FD ]
Line_31 $$ if (shellFile != null && shellFile.exists()) -->Line_32 $$ shellFile.delete()[ CD ]
Line_20 $$ String diagnostics = null-->Line_25 $$ diagnostics = e.getMessage()[ FD ]
