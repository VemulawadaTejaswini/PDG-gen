Line_2 $$ public void validUsage() throws Exception -->Line_25 $$ assertTrue(tasks[1].getTaskName().equals(name2))[ CD ]
Line_7 $$ String name1 = "Task 1"-->Line_24 $$ assertTrue(tasks[0].getTaskName().equals(name1))[ FD ]
Line_26 $$ String toString = sw.toString()-->Line_28 $$ assertTrue(toString.contains(name1))[ FD ]
Line_4 $$ StopWatch sw = new StopWatch(id)-->Line_15 $$ sw.start(name2)[ FD ]
Line_2 $$ public void validUsage() throws Exception -->Line_13 $$ assertEquals(name1, sw.currentTaskName())[ CD ]
Line_7 $$ String name1 = "Task 1"-->Line_10 $$ sw.start(name1)[ FD ]
Line_4 $$ StopWatch sw = new StopWatch(id)-->Line_10 $$ sw.start(name1)[ FD ]
Line_2 $$ public void validUsage() throws Exception -->Line_12 $$ assertTrue(sw.isRunning())[ CD ]
Line_7 $$ String name1 = "Task 1"-->Line_13 $$ assertEquals(name1, sw.currentTaskName())[ FD ]
Line_2 $$ public void validUsage() throws Exception -->Line_3 $$ String id = "myId"[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_14 $$ sw.stop()[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_17 $$ sw.stop()[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_19 $$ String pp = sw.prettyPrint()[ CD ]
Line_3 $$ String id = "myId"-->Line_27 $$ assertTrue(toString.contains(id))[ FD ]
Line_2 $$ public void validUsage() throws Exception -->Line_20 $$ assertTrue(pp.contains(name1))[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_7 $$ String name1 = "Task 1"[ CD ]
Line_7 $$ String name1 = "Task 1"-->Line_28 $$ assertTrue(toString.contains(name1))[ FD ]
Line_5 $$ long int1 = 166L-->Line_11 $$ Thread.sleep(int1)[ FD ]
Line_2 $$ public void validUsage() throws Exception -->Line_18 $$ assertTrue(sw.getTaskCount() == 2)[ CD ]
Line_4 $$ StopWatch sw = new StopWatch(id)-->Line_12 $$ assertTrue(sw.isRunning())[ FD ]
Line_7 $$ String name1 = "Task 1"-->Line_20 $$ assertTrue(pp.contains(name1))[ FD ]
Line_2 $$ public void validUsage() throws Exception -->Line_21 $$ assertTrue(pp.contains(name2))[ CD ]
Line_4 $$ StopWatch sw = new StopWatch(id)-->Line_26 $$ String toString = sw.toString()[ FD ]
Line_4 $$ StopWatch sw = new StopWatch(id)-->Line_30 $$ assertEquals(id, sw.getId())[ FD ]
Line_26 $$ String toString = sw.toString()-->Line_29 $$ assertTrue(toString.contains(name2))[ FD ]
Line_19 $$ String pp = sw.prettyPrint()-->Line_21 $$ assertTrue(pp.contains(name2))[ FD ]
Line_8 $$ String name2 = "Task 2"-->Line_29 $$ assertTrue(toString.contains(name2))[ FD ]
Line_4 $$ StopWatch sw = new StopWatch(id)-->Line_13 $$ assertEquals(name1, sw.currentTaskName())[ FD ]
Line_4 $$ StopWatch sw = new StopWatch(id)-->Line_17 $$ sw.stop()[ FD ]
Line_19 $$ String pp = sw.prettyPrint()-->Line_20 $$ assertTrue(pp.contains(name1))[ FD ]
Line_8 $$ String name2 = "Task 2"-->Line_15 $$ sw.start(name2)[ FD ]
Line_2 $$ public void validUsage() throws Exception -->Line_23 $$ assertTrue(tasks.length == 2)[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_29 $$ assertTrue(toString.contains(name2))[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_16 $$ Thread.sleep(int2)[ CD ]
Line_4 $$ StopWatch sw = new StopWatch(id)-->Line_18 $$ assertTrue(sw.getTaskCount() == 2)[ FD ]
Line_2 $$ public void validUsage() throws Exception -->Line_27 $$ assertTrue(toString.contains(id))[ CD ]
Line_4 $$ StopWatch sw = new StopWatch(id)-->Line_9 $$ assertFalse(sw.isRunning())[ FD ]
Line_2 $$ public void validUsage() throws Exception -->Line_28 $$ assertTrue(toString.contains(name1))[ CD ]
Line_6 $$ long int2 = 45L-->Line_16 $$ Thread.sleep(int2)[ FD ]
Line_2 $$ public void validUsage() throws Exception -->Line_30 $$ assertEquals(id, sw.getId())[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_8 $$ String name2 = "Task 2"[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_26 $$ String toString = sw.toString()[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_5 $$ long int1 = 166L[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_24 $$ assertTrue(tasks[0].getTaskName().equals(name1))[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_22 $$ StopWatch.TaskInfo[] tasks = sw.getTaskInfo()[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_9 $$ assertFalse(sw.isRunning())[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_15 $$ sw.start(name2)[ CD ]
Line_4 $$ StopWatch sw = new StopWatch(id)-->Line_22 $$ StopWatch.TaskInfo[] tasks = sw.getTaskInfo()[ FD ]
Line_8 $$ String name2 = "Task 2"-->Line_25 $$ assertTrue(tasks[1].getTaskName().equals(name2))[ FD ]
Line_26 $$ String toString = sw.toString()-->Line_27 $$ assertTrue(toString.contains(id))[ FD ]
Line_4 $$ StopWatch sw = new StopWatch(id)-->Line_14 $$ sw.stop()[ FD ]
Line_2 $$ public void validUsage() throws Exception -->Line_6 $$ long int2 = 45L[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_11 $$ Thread.sleep(int1)[ CD ]
Line_3 $$ String id = "myId"-->Line_30 $$ assertEquals(id, sw.getId())[ FD ]
Line_8 $$ String name2 = "Task 2"-->Line_21 $$ assertTrue(pp.contains(name2))[ FD ]
Line_2 $$ public void validUsage() throws Exception -->Line_4 $$ StopWatch sw = new StopWatch(id)[ CD ]
Line_2 $$ public void validUsage() throws Exception -->Line_10 $$ sw.start(name1)[ CD ]
Line_4 $$ StopWatch sw = new StopWatch(id)-->Line_19 $$ String pp = sw.prettyPrint()[ FD ]
