Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_3 $$ final PsiMethodCallExpression methodCall = (PsiMethodCallExpression) descriptor.getPsiElement()[ CD ]
Line_10 $$ if ("assertFalse".equals(methodName) || "assertTrue".equals(methodName)) -->Line_13 $$ final boolean negate = methodName.contains("False")[ CD ]
Line_25 $$ final PsiExpression replaced = TypeConversionDescriptor.replaceExpression(methodCall, templatePair.getFirst(), templatePair.getSecond())-->Line_36 $$ AddOnDemandStaticImportAction.invoke(project, replaced.getContainingFile(), null, identifier)[ FD ]
Line_24 $$ templatePair = buildFullTemplate(templatePair, method)-->Line_25 $$ final PsiExpression replaced = TypeConversionDescriptor.replaceExpression(methodCall, templatePair.getFirst(), templatePair.getSecond())[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_9 $$ Pair<String, String> templatePair = null[ CD ]
Line_14 $$ if (conditionExpression instanceof PsiBinaryExpression) -->Line_15 $$ templatePair = getSuitableMatcherForBinaryExpressionInsideBooleanAssert((PsiBinaryExpression) conditionExpression, negate)[ CD ]
Line_12 $$ final PsiExpression conditionExpression = expressions[expressions.length - 1]-->Line_16 $$ if (conditionExpression instanceof PsiMethodCallExpression) [ FD ]
Line_15 $$ templatePair = getSuitableMatcherForBinaryExpressionInsideBooleanAssert((PsiBinaryExpression) conditionExpression, negate)-->Line_25 $$ final PsiExpression replaced = TypeConversionDescriptor.replaceExpression(methodCall, templatePair.getFirst(), templatePair.getSecond())[ FD ]
Line_15 $$ templatePair = getSuitableMatcherForBinaryExpressionInsideBooleanAssert((PsiBinaryExpression) conditionExpression, negate)-->Line_21 $$ templatePair = ASSERT_METHODS.get(methodName)[ FD ]
Line_21 $$ templatePair = ASSERT_METHODS.get(methodName)-->Line_25 $$ final PsiExpression replaced = TypeConversionDescriptor.replaceExpression(methodCall, templatePair.getFirst(), templatePair.getSecond())[ FD ]
Line_34 $$ final PsiIdentifier identifier = PsiTreeUtil.getChildOfType(ref, PsiIdentifier.class)-->Line_35 $$ if (identifier != null) [ FD ]
Line_4 $$ final PsiMethod method = methodCall.resolveMethod()-->Line_8 $$ final String methodName = method.getName()[ FD ]
Line_8 $$ final String methodName = method.getName()-->Line_13 $$ final boolean negate = methodName.contains("False")[ FD ]
Line_9 $$ Pair<String, String> templatePair = null-->Line_15 $$ templatePair = getSuitableMatcherForBinaryExpressionInsideBooleanAssert((PsiBinaryExpression) conditionExpression, negate)[ FD ]
Line_16 $$ if (conditionExpression instanceof PsiMethodCallExpression) -->Line_17 $$ templatePair = getSuitableMatcherForMethodCallInsideBooleanAssert((PsiMethodCallExpression) conditionExpression, negate)[ CD ]
Line_31 $$ if (resolvedElement instanceof PsiClass) -->Line_33 $$ if (qName != null && qName.startsWith("org.hamcrest")) [ CD ]
Line_12 $$ final PsiExpression conditionExpression = expressions[expressions.length - 1]-->Line_14 $$ if (conditionExpression instanceof PsiBinaryExpression) [ FD ]
Line_10 $$ if ("assertFalse".equals(methodName) || "assertTrue".equals(methodName)) -->Line_11 $$ final PsiExpression[] expressions = methodCall.getArgumentList().getExpressions()[ CD ]
Line_14 $$ if (conditionExpression instanceof PsiBinaryExpression) -->Line_16 $$ if (conditionExpression instanceof PsiMethodCallExpression) [ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_5 $$ if (method == null) [ CD ]
Line_13 $$ final boolean negate = methodName.contains("False")-->Line_15 $$ templatePair = getSuitableMatcherForBinaryExpressionInsideBooleanAssert((PsiBinaryExpression) conditionExpression, negate)[ FD ]
Line_15 $$ templatePair = getSuitableMatcherForBinaryExpressionInsideBooleanAssert((PsiBinaryExpression) conditionExpression, negate)-->Line_20 $$ if (templatePair == null) [ FD ]
Line_17 $$ templatePair = getSuitableMatcherForMethodCallInsideBooleanAssert((PsiMethodCallExpression) conditionExpression, negate)-->Line_20 $$ if (templatePair == null) [ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_4 $$ final PsiMethod method = methodCall.resolveMethod()[ CD ]
Line_8 $$ final String methodName = method.getName()-->Line_21 $$ templatePair = ASSERT_METHODS.get(methodName)[ FD ]
Line_15 $$ templatePair = getSuitableMatcherForBinaryExpressionInsideBooleanAssert((PsiBinaryExpression) conditionExpression, negate)-->Line_24 $$ templatePair = buildFullTemplate(templatePair, method)[ FD ]
Line_15 $$ templatePair = getSuitableMatcherForBinaryExpressionInsideBooleanAssert((PsiBinaryExpression) conditionExpression, negate)-->Line_17 $$ templatePair = getSuitableMatcherForMethodCallInsideBooleanAssert((PsiMethodCallExpression) conditionExpression, negate)[ FD ]
Line_31 $$ if (resolvedElement instanceof PsiClass) -->Line_32 $$ final String qName = ((PsiClass) resolvedElement).getQualifiedName()[ CD ]
Line_32 $$ final String qName = ((PsiClass) resolvedElement).getQualifiedName()-->Line_33 $$ if (qName != null && qName.startsWith("org.hamcrest")) [ FD ]
Line_34 $$ final PsiIdentifier identifier = PsiTreeUtil.getChildOfType(ref, PsiIdentifier.class)-->Line_36 $$ AddOnDemandStaticImportAction.invoke(project, replaced.getContainingFile(), null, identifier)[ FD ]
Line_33 $$ if (qName != null && qName.startsWith("org.hamcrest")) -->Line_34 $$ final PsiIdentifier identifier = PsiTreeUtil.getChildOfType(ref, PsiIdentifier.class)[ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_20 $$ if (templatePair == null) [ CD ]
Line_17 $$ templatePair = getSuitableMatcherForMethodCallInsideBooleanAssert((PsiMethodCallExpression) conditionExpression, negate)-->Line_24 $$ templatePair = buildFullTemplate(templatePair, method)[ FD ]
Line_17 $$ templatePair = getSuitableMatcherForMethodCallInsideBooleanAssert((PsiMethodCallExpression) conditionExpression, negate)-->Line_25 $$ final PsiExpression replaced = TypeConversionDescriptor.replaceExpression(methodCall, templatePair.getFirst(), templatePair.getSecond())[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_3 $$ final PsiMethodCallExpression methodCall = (PsiMethodCallExpression) descriptor.getPsiElement()[ FD ]
Line_3 $$ final PsiMethodCallExpression methodCall = (PsiMethodCallExpression) descriptor.getPsiElement()-->Line_11 $$ final PsiExpression[] expressions = methodCall.getArgumentList().getExpressions()[ FD ]
Line_27 $$ for (PsiJavaCodeReferenceElement ref : ContainerUtil.reverse(new ArrayList<PsiJavaCodeReferenceElement>(PsiTreeUtil.findChildrenOfType(replaced, PsiJavaCodeReferenceElement.class)))) -->Line_28 $$ if (!ref.isValid())[ FD ]
Line_27 $$ for (PsiJavaCodeReferenceElement ref : ContainerUtil.reverse(new ArrayList<PsiJavaCodeReferenceElement>(PsiTreeUtil.findChildrenOfType(replaced, PsiJavaCodeReferenceElement.class)))) -->Line_30 $$ final PsiElement resolvedElement = ref.resolve()[ FD ]
Line_10 $$ if ("assertFalse".equals(methodName) || "assertTrue".equals(methodName)) -->Line_12 $$ final PsiExpression conditionExpression = expressions[expressions.length - 1][ CD ]
Line_10 $$ if ("assertFalse".equals(methodName) || "assertTrue".equals(methodName)) -->Line_14 $$ if (conditionExpression instanceof PsiBinaryExpression) [ CD ]
Line_9 $$ Pair<String, String> templatePair = null-->Line_21 $$ templatePair = ASSERT_METHODS.get(methodName)[ FD ]
Line_9 $$ Pair<String, String> templatePair = null-->Line_25 $$ final PsiExpression replaced = TypeConversionDescriptor.replaceExpression(methodCall, templatePair.getFirst(), templatePair.getSecond())[ FD ]
Line_9 $$ Pair<String, String> templatePair = null-->Line_24 $$ templatePair = buildFullTemplate(templatePair, method)[ FD ]
Line_30 $$ final PsiElement resolvedElement = ref.resolve()-->Line_31 $$ if (resolvedElement instanceof PsiClass) [ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_24 $$ templatePair = buildFullTemplate(templatePair, method)[ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_26 $$ if (myStaticallyImportMatchers) [ CD ]
Line_5 $$ if (method == null) -->Line_6 $$ return[ CD ]
Line_4 $$ final PsiMethod method = methodCall.resolveMethod()-->Line_24 $$ templatePair = buildFullTemplate(templatePair, method)[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_25 $$ final PsiExpression replaced = TypeConversionDescriptor.replaceExpression(methodCall, templatePair.getFirst(), templatePair.getSecond())[ CD ]
Line_20 $$ if (templatePair == null) -->Line_21 $$ templatePair = ASSERT_METHODS.get(methodName)[ CD ]
Line_4 $$ final PsiMethod method = methodCall.resolveMethod()-->Line_5 $$ if (method == null) [ FD ]
Line_13 $$ final boolean negate = methodName.contains("False")-->Line_17 $$ templatePair = getSuitableMatcherForMethodCallInsideBooleanAssert((PsiMethodCallExpression) conditionExpression, negate)[ FD ]
Line_8 $$ final String methodName = method.getName()-->Line_10 $$ if ("assertFalse".equals(methodName) || "assertTrue".equals(methodName)) [ FD ]
Line_17 $$ templatePair = getSuitableMatcherForMethodCallInsideBooleanAssert((PsiMethodCallExpression) conditionExpression, negate)-->Line_21 $$ templatePair = ASSERT_METHODS.get(methodName)[ FD ]
Line_3 $$ final PsiMethodCallExpression methodCall = (PsiMethodCallExpression) descriptor.getPsiElement()-->Line_4 $$ final PsiMethod method = methodCall.resolveMethod()[ FD ]
Line_9 $$ Pair<String, String> templatePair = null-->Line_17 $$ templatePair = getSuitableMatcherForMethodCallInsideBooleanAssert((PsiMethodCallExpression) conditionExpression, negate)[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_23 $$ LOG.assertTrue(templatePair != null)[ CD ]
Line_35 $$ if (identifier != null) -->Line_36 $$ AddOnDemandStaticImportAction.invoke(project, replaced.getContainingFile(), null, identifier)[ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_8 $$ final String methodName = method.getName()[ CD ]
Line_3 $$ final PsiMethodCallExpression methodCall = (PsiMethodCallExpression) descriptor.getPsiElement()-->Line_25 $$ final PsiExpression replaced = TypeConversionDescriptor.replaceExpression(methodCall, templatePair.getFirst(), templatePair.getSecond())[ FD ]
Line_25 $$ final PsiExpression replaced = TypeConversionDescriptor.replaceExpression(methodCall, templatePair.getFirst(), templatePair.getSecond())-->Line_27 $$ for (PsiJavaCodeReferenceElement ref : ContainerUtil.reverse(new ArrayList<PsiJavaCodeReferenceElement>(PsiTreeUtil.findChildrenOfType(replaced, PsiJavaCodeReferenceElement.class)))) [ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_36 $$ AddOnDemandStaticImportAction.invoke(project, replaced.getContainingFile(), null, identifier)[ FD ]
Line_33 $$ if (qName != null && qName.startsWith("org.hamcrest")) -->Line_35 $$ if (identifier != null) [ CD ]
Line_21 $$ templatePair = ASSERT_METHODS.get(methodName)-->Line_24 $$ templatePair = buildFullTemplate(templatePair, method)[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_10 $$ if ("assertFalse".equals(methodName) || "assertTrue".equals(methodName)) [ CD ]
Line_9 $$ Pair<String, String> templatePair = null-->Line_20 $$ if (templatePair == null) [ FD ]
Line_27 $$ for (PsiJavaCodeReferenceElement ref : ContainerUtil.reverse(new ArrayList<PsiJavaCodeReferenceElement>(PsiTreeUtil.findChildrenOfType(replaced, PsiJavaCodeReferenceElement.class)))) -->Line_34 $$ final PsiIdentifier identifier = PsiTreeUtil.getChildOfType(ref, PsiIdentifier.class)[ FD ]
