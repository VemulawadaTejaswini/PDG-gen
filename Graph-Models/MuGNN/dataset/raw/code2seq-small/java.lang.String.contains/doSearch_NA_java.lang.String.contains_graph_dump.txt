Line_7 $$ params = new LinkedHashMap(params)-->Line_11 $$ Boolean manualMembership = (Boolean) params.remove("manualMembership")[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_9 $$ List<Long> excludedGroupIds = (List<Long>) params.remove("excludedGroupIds")[ CD ]
Line_98 $$ if (resourceBlockLocalService.isSupported(rolePermissions.getName())) -->Line_99 $$ List<ResourceTypePermission> resourceTypePermissions = resourceTypePermissionPersistence.findByRoleId(rolePermissions.getRoleId())[ CD ]
Line_7 $$ params = new LinkedHashMap(params)-->Line_8 $$ Boolean active = (Boolean) params.remove("active")[ FD ]
Line_111 $$ if ((resourcePermission.getRoleId() == rolePermissions.getRoleId()) && resourcePermission.hasAction(resourceAction)) -->Line_112 $$ Group group = groupPersistence.fetchByPrimaryKey(GetterUtil.getLong(resourcePermission.getPrimKey()))[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_13 $$ Boolean site = (Boolean) params.remove("site")[ CD ]
Line_111 $$ if ((resourcePermission.getRoleId() == rolePermissions.getRoleId()) && resourcePermission.hasAction(resourceAction)) -->Line_113 $$ if (group != null) [ CD ]
Line_102 $$ Group group = groupPersistence.fetchByPrimaryKey(resourceTypePermission.getGroupId())-->Line_104 $$ rolePermissionsGroups.add(group)[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_131 $$ if (inherit) [ CD ]
Line_123 $$ if (roleId != null) -->Line_124 $$ groups.retainAll(rolePersistence.getGroups(roleId))[ CD ]
Line_22 $$ Group group = iterator.next()-->Line_73 $$ if ((membershipRestriction != null) && (membershipRestriction != group.getMembershipRestriction())) [ FD ]
Line_59 $$ if (treePath.contains(groupTreePath)) -->Line_60 $$ matched = true[ CD ]
Line_21 $$ while (iterator.hasNext()) -->Line_84 $$ if (type == 4) [ CD ]
Line_16 $$ Long userId = (Long) params.remove("usersGroups")-->Line_129 $$ Set<Group> joinedGroups = new HashSet(userPersistence.getGroups(userId))[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_151 $$ if (joinedGroups.size() > groups.size()) [ CD ]
Line_93 $$ RolePermissions rolePermissions = (RolePermissions) params.remove("rolePermissions")-->Line_101 $$ if ((resourceTypePermission.getCompanyId() == companyId) && Validator.equals(rolePermissions.getName(), resourceTypePermission.getName()) && resourceTypePermission.hasAction(resourceAction)) [ FD ]
Line_7 $$ params = new LinkedHashMap(params)-->Line_10 $$ List<Group> groupsTree = (List<Group>) params.remove("groupsTree")[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_7 $$ params = new LinkedHashMap(params)[ FD ]
Line_34 $$ if (groupKey.equals(GroupConstants.CONTROL_PANEL)) -->Line_35 $$ iterator.remove()[ CD ]
Line_126 $$ if (userId == null) -->Line_127 $$ return groups[ CD ]
Line_102 $$ Group group = groupPersistence.fetchByPrimaryKey(resourceTypePermission.getGroupId())-->Line_136 $$ joinedGroups.add(group)[ FD ]
Line_93 $$ RolePermissions rolePermissions = (RolePermissions) params.remove("rolePermissions")-->Line_111 $$ if ((resourcePermission.getRoleId() == rolePermissions.getRoleId()) && resourcePermission.hasAction(resourceAction)) [ FD ]
Line_21 $$ while (iterator.hasNext()) -->Line_34 $$ if (groupKey.equals(GroupConstants.CONTROL_PANEL)) [ CD ]
Line_21 $$ while (iterator.hasNext()) -->Line_38 $$ boolean containsName = matches(group.getNameCurrentValue(), names)[ CD ]
Line_129 $$ Set<Group> joinedGroups = new HashSet(userPersistence.getGroups(userId))-->Line_151 $$ if (joinedGroups.size() > groups.size()) [ FD ]
Line_54 $$ if (groupsTree != null) -->Line_64 $$ if (!matched) [ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_21 $$ while (iterator.hasNext()) [ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_3 $$ boolean parentGroupIdEquals = true[ CD ]
Line_122 $$ Long roleId = (Long) params.remove("groupsRoles")-->Line_123 $$ if (roleId != null) [ FD ]
Line_22 $$ Group group = iterator.next()-->Line_33 $$ String groupKey = group.getGroupKey()[ FD ]
Line_21 $$ while (iterator.hasNext()) -->Line_69 $$ if ((manualMembership != null) && (manualMembership != group.isManualMembership())) [ CD ]
Line_22 $$ Group group = iterator.next()-->Line_135 $$ if (organizationId == group.getClassPK()) [ FD ]
Line_22 $$ Group group = iterator.next()-->Line_104 $$ rolePermissionsGroups.add(group)[ FD ]
Line_21 $$ while (iterator.hasNext()) -->Line_77 $$ if (site != null) [ CD ]
Line_15 $$ Collection<Group> groups = new HashSet()-->Line_155 $$ joinedGroups.retainAll(groups)[ FD ]
Line_101 $$ if ((resourceTypePermission.getCompanyId() == companyId) && Validator.equals(rolePermissions.getName(), resourceTypePermission.getName()) && resourceTypePermission.hasAction(resourceAction)) -->Line_102 $$ Group group = groupPersistence.fetchByPrimaryKey(resourceTypePermission.getGroupId())[ CD ]
Line_100 $$ for (ResourceTypePermission resourceTypePermission : resourceTypePermissions) -->Line_102 $$ Group group = groupPersistence.fetchByPrimaryKey(resourceTypePermission.getGroupId())[ FD ]
Line_98 $$ if (resourceBlockLocalService.isSupported(rolePermissions.getName())) -->Line_109 $$ List<ResourcePermission> resourcePermissions = resourcePermissionPersistence.findByC_N_S(companyId, rolePermissions.getName(), rolePermissions.getScope())[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_14 $$ List<Integer> types = (List<Integer>) params.remove("types")[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_38 $$ boolean containsName = matches(group.getNameCurrentValue(), names)[ FD ]
Line_93 $$ RolePermissions rolePermissions = (RolePermissions) params.remove("rolePermissions")-->Line_99 $$ List<ResourceTypePermission> resourceTypePermissions = resourceTypePermissionPersistence.findByRoleId(rolePermissions.getRoleId())[ FD ]
Line_17 $$ for (long classNameId : classNameIds) -->Line_18 $$ groups.addAll(groupPersistence.findByC_C(companyId, classNameId))[ FD ]
Line_110 $$ for (ResourcePermission resourcePermission : resourcePermissions) -->Line_112 $$ Group group = groupPersistence.fetchByPrimaryKey(GetterUtil.getLong(resourcePermission.getPrimKey()))[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_40 $$ if ((andOperator && (!containsName || !containsDescription)) || (!andOperator && !containsName && !containsDescription)) [ FD ]
Line_94 $$ if (rolePermissions != null) -->Line_96 $$ if (resourceAction != null) [ CD ]
Line_22 $$ Group group = iterator.next()-->Line_55 $$ String treePath = group.getTreePath()[ FD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_70 $$ iterator.remove()[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_10 $$ List<Group> groupsTree = (List<Group>) params.remove("groupsTree")[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_93 $$ RolePermissions rolePermissions = (RolePermissions) params.remove("rolePermissions")[ CD ]
Line_110 $$ for (ResourcePermission resourcePermission : resourcePermissions) -->Line_111 $$ if ((resourcePermission.getRoleId() == rolePermissions.getRoleId()) && resourcePermission.hasAction(resourceAction)) [ FD ]
Line_93 $$ RolePermissions rolePermissions = (RolePermissions) params.remove("rolePermissions")-->Line_95 $$ ResourceAction resourceAction = resourceActionLocalService.fetchResourceAction(rolePermissions.getName(), rolePermissions.getActionId())[ FD ]
Line_21 $$ while (iterator.hasNext()) -->Line_54 $$ if (groupsTree != null) [ CD ]
Line_77 $$ if (site != null) -->Line_78 $$ if (site != group.isSite()) [ CD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_30 $$ iterator.remove()[ FD ]
Line_103 $$ if (group != null) -->Line_104 $$ rolePermissionsGroups.add(group)[ CD ]
Line_151 $$ if (joinedGroups.size() > groups.size()) -->Line_156 $$ return joinedGroups[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_12 $$ Integer membershipRestriction = (Integer) params.remove("membershipRestriction")[ FD ]
Line_60 $$ matched = true-->Line_64 $$ if (!matched) [ FD ]
Line_39 $$ boolean containsDescription = matches(group.getDescriptionCurrentValue(), descriptions)-->Line_40 $$ if ((andOperator && (!containsName || !containsDescription)) || (!andOperator && !containsName && !containsDescription)) [ FD ]
Line_38 $$ boolean containsName = matches(group.getNameCurrentValue(), names)-->Line_40 $$ if ((andOperator && (!containsName || !containsDescription)) || (!andOperator && !containsName && !containsDescription)) [ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_13 $$ Boolean site = (Boolean) params.remove("site")[ FD ]
Line_101 $$ if ((resourceTypePermission.getCompanyId() == companyId) && Validator.equals(rolePermissions.getName(), resourceTypePermission.getName()) && resourceTypePermission.hasAction(resourceAction)) -->Line_103 $$ if (group != null) [ CD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_85 $$ iterator.remove()[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_148 $$ if (_log.isDebugEnabled() && !params.isEmpty()) [ CD ]
Line_44 $$ if (active != null) -->Line_45 $$ if (active != group.isActive()) [ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_39 $$ boolean containsDescription = matches(group.getDescriptionCurrentValue(), descriptions)[ FD ]
Line_58 $$ String groupTreePath = StringUtil.quote(String.valueOf(groupTree.getGroupId()), StringPool.SLASH)-->Line_59 $$ if (treePath.contains(groupTreePath)) [ FD ]
Line_21 $$ while (iterator.hasNext()) -->Line_33 $$ String groupKey = group.getGroupKey()[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_15 $$ Collection<Group> groups = new HashSet()[ CD ]
Line_95 $$ ResourceAction resourceAction = resourceActionLocalService.fetchResourceAction(rolePermissions.getName(), rolePermissions.getActionId())-->Line_101 $$ if ((resourceTypePermission.getCompanyId() == companyId) && Validator.equals(rolePermissions.getName(), resourceTypePermission.getName()) && resourceTypePermission.hasAction(resourceAction)) [ FD ]
Line_7 $$ params = new LinkedHashMap(params)-->Line_93 $$ RolePermissions rolePermissions = (RolePermissions) params.remove("rolePermissions")[ FD ]
Line_56 $$ boolean matched = false-->Line_64 $$ if (!matched) [ FD ]
Line_55 $$ String treePath = group.getTreePath()-->Line_59 $$ if (treePath.contains(groupTreePath)) [ FD ]
Line_33 $$ String groupKey = group.getGroupKey()-->Line_34 $$ if (groupKey.equals(GroupConstants.CONTROL_PANEL)) [ FD ]
Line_93 $$ RolePermissions rolePermissions = (RolePermissions) params.remove("rolePermissions")-->Line_94 $$ if (rolePermissions != null) [ FD ]
Line_100 $$ for (ResourceTypePermission resourceTypePermission : resourceTypePermissions) -->Line_101 $$ if ((resourceTypePermission.getCompanyId() == companyId) && Validator.equals(rolePermissions.getName(), resourceTypePermission.getName()) && resourceTypePermission.hasAction(resourceAction)) [ FD ]
Line_102 $$ Group group = groupPersistence.fetchByPrimaryKey(resourceTypePermission.getGroupId())-->Line_114 $$ rolePermissionsGroups.add(group)[ FD ]
Line_16 $$ Long userId = (Long) params.remove("usersGroups")-->Line_143 $$ long[] userGroupIds = userPersistence.getUserGroupPrimaryKeys(userId)[ FD ]
Line_22 $$ Group group = iterator.next()-->Line_103 $$ if (group != null) [ FD ]
Line_23 $$ long liveGroupId = group.getLiveGroupId()-->Line_24 $$ if (liveGroupId != 0) [ FD ]
Line_3 $$ boolean parentGroupIdEquals = true-->Line_5 $$ parentGroupIdEquals = false[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_123 $$ if (roleId != null) [ CD ]
Line_133 $$ for (long organizationId : organizationIds) -->Line_141 $$ joinedGroups.addAll(organizationPersistence.getGroups(organizationId))[ FD ]
Line_10 $$ List<Group> groupsTree = (List<Group>) params.remove("groupsTree")-->Line_54 $$ if (groupsTree != null) [ FD ]
Line_22 $$ Group group = iterator.next()-->Line_113 $$ if (group != null) [ FD ]
Line_21 $$ while (iterator.hasNext()) -->Line_39 $$ boolean containsDescription = matches(group.getDescriptionCurrentValue(), descriptions)[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_109 $$ List<ResourcePermission> resourcePermissions = resourcePermissionPersistence.findByC_N_S(companyId, rolePermissions.getName(), rolePermissions.getScope())[ FD ]
Line_102 $$ Group group = groupPersistence.fetchByPrimaryKey(resourceTypePermission.getGroupId())-->Line_103 $$ if (group != null) [ FD ]
Line_7 $$ params = new LinkedHashMap(params)-->Line_12 $$ Integer membershipRestriction = (Integer) params.remove("membershipRestriction")[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_14 $$ List<Integer> types = (List<Integer>) params.remove("types")[ FD ]
Line_22 $$ Group group = iterator.next()-->Line_23 $$ long liveGroupId = group.getLiveGroupId()[ FD ]
Line_9 $$ List<Long> excludedGroupIds = (List<Long>) params.remove("excludedGroupIds")-->Line_50 $$ if ((excludedGroupIds != null) && excludedGroupIds.contains(group.getGroupId())) [ FD ]
Line_131 $$ if (inherit) -->Line_132 $$ long[] organizationIds = userPersistence.getOrganizationPrimaryKeys(userId)[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_4 $$ if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) [ CD ]
Line_15 $$ Collection<Group> groups = new HashSet()-->Line_18 $$ groups.addAll(groupPersistence.findByC_C(companyId, classNameId))[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_20 $$ Iterator<Group> iterator = groups.iterator()[ CD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_35 $$ iterator.remove()[ FD ]
Line_22 $$ Group group = iterator.next()-->Line_78 $$ if (site != group.isSite()) [ FD ]
Line_83 $$ int type = group.getType()-->Line_88 $$ if ((types != null) && !types.contains(type)) [ FD ]
Line_22 $$ Group group = iterator.next()-->Line_50 $$ if ((excludedGroupIds != null) && excludedGroupIds.contains(group.getGroupId())) [ FD ]
Line_93 $$ RolePermissions rolePermissions = (RolePermissions) params.remove("rolePermissions")-->Line_109 $$ List<ResourcePermission> resourcePermissions = resourcePermissionPersistence.findByC_N_S(companyId, rolePermissions.getName(), rolePermissions.getScope())[ FD ]
Line_7 $$ params = new LinkedHashMap(params)-->Line_122 $$ Long roleId = (Long) params.remove("groupsRoles")[ FD ]
Line_15 $$ Collection<Group> groups = new HashSet()-->Line_152 $$ groups.retainAll(joinedGroups)[ FD ]
Line_151 $$ if (joinedGroups.size() > groups.size()) -->Line_153 $$ return groups[ CD ]
Line_8 $$ Boolean active = (Boolean) params.remove("active")-->Line_44 $$ if (active != null) [ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_94 $$ if (rolePermissions != null) [ CD ]
Line_56 $$ boolean matched = false-->Line_60 $$ matched = true[ FD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_46 $$ iterator.remove()[ FD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_65 $$ iterator.remove()[ FD ]
Line_22 $$ Group group = iterator.next()-->Line_39 $$ boolean containsDescription = matches(group.getDescriptionCurrentValue(), descriptions)[ FD ]
Line_7 $$ params = new LinkedHashMap(params)-->Line_16 $$ Long userId = (Long) params.remove("usersGroups")[ FD ]
Line_45 $$ if (active != group.isActive()) -->Line_46 $$ iterator.remove()[ CD ]
Line_144 $$ for (long userGroupId : userGroupIds) -->Line_145 $$ joinedGroups.addAll(userGroupPersistence.getGroups(userGroupId))[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_148 $$ if (_log.isDebugEnabled() && !params.isEmpty()) [ FD ]
Line_113 $$ if (group != null) -->Line_114 $$ rolePermissionsGroups.add(group)[ CD ]
Line_16 $$ Long userId = (Long) params.remove("usersGroups")-->Line_126 $$ if (userId == null) [ FD ]
Line_7 $$ params = new LinkedHashMap(params)-->Line_14 $$ List<Integer> types = (List<Integer>) params.remove("types")[ FD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_22 $$ Group group = iterator.next()[ FD ]
Line_78 $$ if (site != group.isSite()) -->Line_79 $$ iterator.remove()[ CD ]
Line_97 $$ Set<Group> rolePermissionsGroups = new HashSet()-->Line_119 $$ groups.retainAll(rolePermissionsGroups)[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_122 $$ Long roleId = (Long) params.remove("groupsRoles")[ FD ]
Line_16 $$ Long userId = (Long) params.remove("usersGroups")-->Line_132 $$ long[] organizationIds = userPersistence.getOrganizationPrimaryKeys(userId)[ FD ]
Line_7 $$ params = new LinkedHashMap(params)-->Line_148 $$ if (_log.isDebugEnabled() && !params.isEmpty()) [ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_11 $$ Boolean manualMembership = (Boolean) params.remove("manualMembership")[ FD ]
Line_21 $$ while (iterator.hasNext()) -->Line_44 $$ if (active != null) [ CD ]
Line_24 $$ if (liveGroupId != 0) -->Line_25 $$ iterator.remove()[ CD ]
Line_7 $$ params = new LinkedHashMap(params)-->Line_13 $$ Boolean site = (Boolean) params.remove("site")[ FD ]
Line_22 $$ Group group = iterator.next()-->Line_45 $$ if (active != group.isActive()) [ FD ]
Line_95 $$ ResourceAction resourceAction = resourceActionLocalService.fetchResourceAction(rolePermissions.getName(), rolePermissions.getActionId())-->Line_111 $$ if ((resourcePermission.getRoleId() == rolePermissions.getRoleId()) && resourcePermission.hasAction(resourceAction)) [ FD ]
Line_151 $$ if (joinedGroups.size() > groups.size()) -->Line_155 $$ joinedGroups.retainAll(groups)[ CD ]
Line_129 $$ Set<Group> joinedGroups = new HashSet(userPersistence.getGroups(userId))-->Line_155 $$ joinedGroups.retainAll(groups)[ FD ]
Line_97 $$ Set<Group> rolePermissionsGroups = new HashSet()-->Line_114 $$ rolePermissionsGroups.add(group)[ FD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_74 $$ iterator.remove()[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_18 $$ groups.addAll(groupPersistence.findByC_C(companyId, classNameId))[ FD ]
Line_15 $$ Collection<Group> groups = new HashSet()-->Line_124 $$ groups.retainAll(rolePersistence.getGroups(roleId))[ FD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_89 $$ iterator.remove()[ FD ]
Line_83 $$ int type = group.getType()-->Line_84 $$ if (type == 4) [ FD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_21 $$ while (iterator.hasNext()) [ FD ]
Line_7 $$ params = new LinkedHashMap(params)-->Line_130 $$ boolean inherit = GetterUtil.getBoolean(params.remove("inherit"), true)[ FD ]
Line_15 $$ Collection<Group> groups = new HashSet()-->Line_20 $$ Iterator<Group> iterator = groups.iterator()[ FD ]
Line_96 $$ if (resourceAction != null) -->Line_97 $$ Set<Group> rolePermissionsGroups = new HashSet()[ CD ]
Line_21 $$ while (iterator.hasNext()) -->Line_40 $$ if ((andOperator && (!containsName || !containsDescription)) || (!andOperator && !containsName && !containsDescription)) [ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_93 $$ RolePermissions rolePermissions = (RolePermissions) params.remove("rolePermissions")[ FD ]
Line_8 $$ Boolean active = (Boolean) params.remove("active")-->Line_45 $$ if (active != group.isActive()) [ FD ]
Line_22 $$ Group group = iterator.next()-->Line_38 $$ boolean containsName = matches(group.getNameCurrentValue(), names)[ FD ]
Line_84 $$ if (type == 4) -->Line_85 $$ iterator.remove()[ CD ]
Line_96 $$ if (resourceAction != null) -->Line_98 $$ if (resourceBlockLocalService.isSupported(rolePermissions.getName())) [ CD ]
Line_57 $$ for (Group groupTree : groupsTree) -->Line_58 $$ String groupTreePath = StringUtil.quote(String.valueOf(groupTree.getGroupId()), StringPool.SLASH)[ FD ]
Line_22 $$ Group group = iterator.next()-->Line_114 $$ rolePermissionsGroups.add(group)[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_10 $$ List<Group> groupsTree = (List<Group>) params.remove("groupsTree")[ CD ]
Line_93 $$ RolePermissions rolePermissions = (RolePermissions) params.remove("rolePermissions")-->Line_98 $$ if (resourceBlockLocalService.isSupported(rolePermissions.getName())) [ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_11 $$ Boolean manualMembership = (Boolean) params.remove("manualMembership")[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_8 $$ Boolean active = (Boolean) params.remove("active")[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_16 $$ Long userId = (Long) params.remove("usersGroups")[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_4 $$ if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) [ FD ]
Line_22 $$ Group group = iterator.next()-->Line_28 $$ long groupParentGroupId = group.getParentGroupId()[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_7 $$ params = new LinkedHashMap(params)[ CD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_79 $$ iterator.remove()[ FD ]
Line_73 $$ if ((membershipRestriction != null) && (membershipRestriction != group.getMembershipRestriction())) -->Line_74 $$ iterator.remove()[ CD ]
Line_151 $$ if (joinedGroups.size() > groups.size()) -->Line_152 $$ groups.retainAll(joinedGroups)[ CD ]
Line_4 $$ if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) -->Line_5 $$ parentGroupIdEquals = false[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_130 $$ boolean inherit = GetterUtil.getBoolean(params.remove("inherit"), true)[ FD ]
Line_3 $$ boolean parentGroupIdEquals = true-->Line_29 $$ if ((parentGroupIdEquals && (groupParentGroupId != parentGroupId)) || (!parentGroupIdEquals && (groupParentGroupId == parentGroupId))) [ FD ]
Line_102 $$ Group group = groupPersistence.fetchByPrimaryKey(resourceTypePermission.getGroupId())-->Line_135 $$ if (organizationId == group.getClassPK()) [ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_130 $$ boolean inherit = GetterUtil.getBoolean(params.remove("inherit"), true)[ CD ]
Line_29 $$ if ((parentGroupIdEquals && (groupParentGroupId != parentGroupId)) || (!parentGroupIdEquals && (groupParentGroupId == parentGroupId))) -->Line_30 $$ iterator.remove()[ CD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_51 $$ iterator.remove()[ FD ]
Line_88 $$ if ((types != null) && !types.contains(type)) -->Line_89 $$ iterator.remove()[ CD ]
Line_129 $$ Set<Group> joinedGroups = new HashSet(userPersistence.getGroups(userId))-->Line_136 $$ joinedGroups.add(group)[ FD ]
Line_22 $$ Group group = iterator.next()-->Line_83 $$ int type = group.getType()[ FD ]
Line_13 $$ Boolean site = (Boolean) params.remove("site")-->Line_78 $$ if (site != group.isSite()) [ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_16 $$ Long userId = (Long) params.remove("usersGroups")[ FD ]
Line_95 $$ ResourceAction resourceAction = resourceActionLocalService.fetchResourceAction(rolePermissions.getName(), rolePermissions.getActionId())-->Line_96 $$ if (resourceAction != null) [ FD ]
Line_122 $$ Long roleId = (Long) params.remove("groupsRoles")-->Line_124 $$ groups.retainAll(rolePersistence.getGroups(roleId))[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_126 $$ if (userId == null) [ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_8 $$ Boolean active = (Boolean) params.remove("active")[ FD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_41 $$ iterator.remove()[ FD ]
Line_14 $$ List<Integer> types = (List<Integer>) params.remove("types")-->Line_88 $$ if ((types != null) && !types.contains(type)) [ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_9 $$ List<Long> excludedGroupIds = (List<Long>) params.remove("excludedGroupIds")[ FD ]
Line_21 $$ while (iterator.hasNext()) -->Line_22 $$ Group group = iterator.next()[ CD ]
Line_69 $$ if ((manualMembership != null) && (manualMembership != group.isManualMembership())) -->Line_70 $$ iterator.remove()[ CD ]
Line_21 $$ while (iterator.hasNext()) -->Line_88 $$ if ((types != null) && !types.contains(type)) [ CD ]
Line_21 $$ while (iterator.hasNext()) -->Line_29 $$ if ((parentGroupIdEquals && (groupParentGroupId != parentGroupId)) || (!parentGroupIdEquals && (groupParentGroupId == parentGroupId))) [ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_149 $$ _log.debug("Unprocessed parameters " + MapUtil.toString(params))[ FD ]
Line_129 $$ Set<Group> joinedGroups = new HashSet(userPersistence.getGroups(userId))-->Line_145 $$ joinedGroups.addAll(userGroupPersistence.getGroups(userGroupId))[ FD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_129 $$ Set<Group> joinedGroups = new HashSet(userPersistence.getGroups(userId))[ CD ]
Line_13 $$ Boolean site = (Boolean) params.remove("site")-->Line_77 $$ if (site != null) [ FD ]
Line_7 $$ params = new LinkedHashMap(params)-->Line_9 $$ List<Long> excludedGroupIds = (List<Long>) params.remove("excludedGroupIds")[ FD ]
Line_102 $$ Group group = groupPersistence.fetchByPrimaryKey(resourceTypePermission.getGroupId())-->Line_113 $$ if (group != null) [ FD ]
Line_133 $$ for (long organizationId : organizationIds) -->Line_135 $$ if (organizationId == group.getClassPK()) [ FD ]
Line_21 $$ while (iterator.hasNext()) -->Line_73 $$ if ((membershipRestriction != null) && (membershipRestriction != group.getMembershipRestriction())) [ CD ]
Line_148 $$ if (_log.isDebugEnabled() && !params.isEmpty()) -->Line_149 $$ _log.debug("Unprocessed parameters " + MapUtil.toString(params))[ CD ]
Line_7 $$ params = new LinkedHashMap(params)-->Line_149 $$ _log.debug("Unprocessed parameters " + MapUtil.toString(params))[ FD ]
Line_97 $$ Set<Group> rolePermissionsGroups = new HashSet()-->Line_104 $$ rolePermissionsGroups.add(group)[ FD ]
Line_131 $$ if (inherit) -->Line_143 $$ long[] userGroupIds = userPersistence.getUserGroupPrimaryKeys(userId)[ CD ]
Line_15 $$ Collection<Group> groups = new HashSet()-->Line_119 $$ groups.retainAll(rolePermissionsGroups)[ FD ]
Line_135 $$ if (organizationId == group.getClassPK()) -->Line_136 $$ joinedGroups.add(group)[ CD ]
Line_22 $$ Group group = iterator.next()-->Line_69 $$ if ((manualMembership != null) && (manualMembership != group.isManualMembership())) [ FD ]
Line_129 $$ Set<Group> joinedGroups = new HashSet(userPersistence.getGroups(userId))-->Line_141 $$ joinedGroups.addAll(organizationPersistence.getGroups(organizationId))[ FD ]
Line_50 $$ if ((excludedGroupIds != null) && excludedGroupIds.contains(group.getGroupId())) -->Line_51 $$ iterator.remove()[ CD ]
Line_5 $$ parentGroupIdEquals = false-->Line_29 $$ if ((parentGroupIdEquals && (groupParentGroupId != parentGroupId)) || (!parentGroupIdEquals && (groupParentGroupId == parentGroupId))) [ FD ]
Line_21 $$ while (iterator.hasNext()) -->Line_23 $$ long liveGroupId = group.getLiveGroupId()[ CD ]
Line_54 $$ if (groupsTree != null) -->Line_55 $$ String treePath = group.getTreePath()[ CD ]
Line_54 $$ if (groupsTree != null) -->Line_56 $$ boolean matched = false[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_12 $$ Integer membershipRestriction = (Integer) params.remove("membershipRestriction")[ CD ]
Line_2 $$ protected Collection<Group> doSearch(long companyId, long[] classNameIds, long parentGroupId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_122 $$ Long roleId = (Long) params.remove("groupsRoles")[ CD ]
Line_21 $$ while (iterator.hasNext()) -->Line_28 $$ long groupParentGroupId = group.getParentGroupId()[ CD ]
Line_22 $$ Group group = iterator.next()-->Line_136 $$ joinedGroups.add(group)[ FD ]
Line_129 $$ Set<Group> joinedGroups = new HashSet(userPersistence.getGroups(userId))-->Line_152 $$ groups.retainAll(joinedGroups)[ FD ]
Line_21 $$ while (iterator.hasNext()) -->Line_24 $$ if (liveGroupId != 0) [ CD ]
Line_40 $$ if ((andOperator && (!containsName || !containsDescription)) || (!andOperator && !containsName && !containsDescription)) -->Line_41 $$ iterator.remove()[ CD ]
Line_21 $$ while (iterator.hasNext()) -->Line_50 $$ if ((excludedGroupIds != null) && excludedGroupIds.contains(group.getGroupId())) [ CD ]
Line_64 $$ if (!matched) -->Line_65 $$ iterator.remove()[ CD ]
Line_96 $$ if (resourceAction != null) -->Line_119 $$ groups.retainAll(rolePermissionsGroups)[ CD ]
Line_15 $$ Collection<Group> groups = new HashSet()-->Line_151 $$ if (joinedGroups.size() > groups.size()) [ FD ]
Line_20 $$ Iterator<Group> iterator = groups.iterator()-->Line_25 $$ iterator.remove()[ FD ]
Line_94 $$ if (rolePermissions != null) -->Line_95 $$ ResourceAction resourceAction = resourceActionLocalService.fetchResourceAction(rolePermissions.getName(), rolePermissions.getActionId())[ CD ]
Line_21 $$ while (iterator.hasNext()) -->Line_83 $$ int type = group.getType()[ CD ]
