Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_5 $$ doAnswer(new Answer<TaskCompletionEvent[]>() [ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_41 $$ System.out.println("The output of job.toString() is : \n" + job.toString())[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_10 $$ doReturn(new TaskReport[5]).when(job).getTaskReports(isA(TaskType.class))[ CD ]
Line_28 $$ while ((line = r.readLine()) != null) -->Line_33 $$ if (foundHundred)[ CD ]
Line_3 $$ JobStatus jobStatus_1 = new JobStatus(new JobID("job_000", 1), 1f, 0.1f, 0.1f, 0f, State.RUNNING, JobPriority.HIGH, "tmp-user", "tmp-jobname", "tmp-queue", "tmp-jobfile", "tmp-url", true)-->Line_11 $$ when(clientProtocol.getJobStatus(any(JobID.class))).thenReturn(jobStatus_1, jobStatus_2)[ FD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_36 $$ line = r.readLine()[ CD ]
Line_28 $$ while ((line = r.readLine()) != null) -->Line_29 $$ if (line.contains(uberModeMatch)) [ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_12 $$ Layout layout = Logger.getRootLogger().getAppender("stdout").getLayout()[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_37 $$ foundComplete = line.contains(completionMatch)[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_40 $$ assertTrue(foundComplete)[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_18 $$ job.monitorAndPrintJob()[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_39 $$ assertTrue(foundHundred)[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_28 $$ while ((line = r.readLine()) != null) [ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_43 $$ assertTrue(job.toString().contains("Number of reduces: 5\n"))[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_38 $$ assertTrue(foundUber)[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_3 $$ JobStatus jobStatus_1 = new JobStatus(new JobID("job_000", 1), 1f, 0.1f, 0.1f, 0f, State.RUNNING, JobPriority.HIGH, "tmp-user", "tmp-jobname", "tmp-queue", "tmp-jobfile", "tmp-url", true)[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_11 $$ when(clientProtocol.getJobStatus(any(JobID.class))).thenReturn(jobStatus_1, jobStatus_2)[ CD ]
Line_4 $$ JobStatus jobStatus_2 = new JobStatus(new JobID("job_000", 1), 1f, 1f, 1f, 1f, State.SUCCEEDED, JobPriority.HIGH, "tmp-user", "tmp-jobname", "tmp-queue", "tmp-jobfile", "tmp-url", true)-->Line_11 $$ when(clientProtocol.getJobStatus(any(JobID.class))).thenReturn(jobStatus_1, jobStatus_2)[ FD ]
Line_28 $$ while ((line = r.readLine()) != null) -->Line_32 $$ foundHundred = line.contains(progressMatch)[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_15 $$ appender.setThreshold(Level.ALL)[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_4 $$ JobStatus jobStatus_2 = new JobStatus(new JobID("job_000", 1), 1f, 1f, 1f, 1f, State.SUCCEEDED, JobPriority.HIGH, "tmp-user", "tmp-jobname", "tmp-queue", "tmp-jobfile", "tmp-url", true)[ CD ]
Line_5 $$ doAnswer(new Answer<TaskCompletionEvent[]>() -->Line_7 $$ return new TaskCompletionEvent[0][ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_16 $$ Logger qlogger = Logger.getLogger(Job.class)[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_19 $$ qlogger.removeAppender(appender)[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_17 $$ qlogger.addAppender(appender)[ CD ]
Line_2 $$ public void testJobMonitorAndPrint() throws Exception -->Line_42 $$ assertTrue(job.toString().contains("Number of maps: 5\n"))[ CD ]
