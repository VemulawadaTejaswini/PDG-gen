Line_14 $$ UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(new UnsyncStringReader(imports))-->Line_16 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ FD ]
Line_3 $$ if (fileName.endsWith("init-ext.jsp")) -->Line_4 $$ return content[ CD ]
Line_6 $$ Matcher matcher = pattern.matcher(content)-->Line_7 $$ if (!matcher.find()) [ FD ]
Line_29 $$ String beforeImports = content.substring(0, matcher.start())-->Line_36 $$ content = beforeImports + imports[ FD ]
Line_24 $$ imports = StringUtil.replace(imports, unneededImport, StringPool.BLANK)-->Line_28 $$ imports = importsFormatter.format(imports)[ FD ]
Line_16 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_17 $$ if (line.contains("import=")) [ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_10 $$ String imports = matcher.group()[ CD ]
Line_12 $$ if (checkUnusedImports) -->Line_15 $$ String line = null[ CD ]
Line_35 $$ imports = StringUtil.replaceLast(imports, "\n", StringPool.BLANK)-->Line_36 $$ content = beforeImports + imports[ FD ]
Line_12 $$ if (checkUnusedImports) -->Line_16 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ CD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_22 $$ addJSPUnusedImports(fileName, importLines, unneededImports)[ FD ]
Line_15 $$ String line = null-->Line_17 $$ if (line.contains("import=")) [ FD ]
Line_15 $$ String line = null-->Line_16 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ FD ]
Line_13 $$ List<String> importLines = new ArrayList()-->Line_22 $$ addJSPUnusedImports(fileName, importLines, unneededImports)[ FD ]
Line_33 $$ String afterImports = content.substring(matcher.end())-->Line_34 $$ if (Validator.isNull(afterImports)) [ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_30 $$ if (Validator.isNull(imports)) [ CD ]
Line_16 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_18 $$ importLines.add(line)[ FD ]
Line_12 $$ if (checkUnusedImports) -->Line_22 $$ addJSPUnusedImports(fileName, importLines, unneededImports)[ CD ]
Line_11 $$ imports = StringUtil.replace(imports, new String[] -->Line_36 $$ content = beforeImports + imports[ FD ]
Line_6 $$ Matcher matcher = pattern.matcher(content)-->Line_29 $$ String beforeImports = content.substring(0, matcher.start())[ FD ]
Line_34 $$ if (Validator.isNull(afterImports)) -->Line_37 $$ return content[ CD ]
Line_34 $$ if (Validator.isNull(afterImports)) -->Line_35 $$ imports = StringUtil.replaceLast(imports, "\n", StringPool.BLANK)[ CD ]
Line_16 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_17 $$ if (line.contains("import=")) [ CD ]
Line_12 $$ if (checkUnusedImports) -->Line_13 $$ List<String> importLines = new ArrayList()[ CD ]
Line_33 $$ String afterImports = content.substring(matcher.end())-->Line_39 $$ content = beforeImports + imports + "\n" + afterImports[ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_33 $$ String afterImports = content.substring(matcher.end())[ CD ]
Line_24 $$ imports = StringUtil.replace(imports, unneededImport, StringPool.BLANK)-->Line_36 $$ content = beforeImports + imports[ FD ]
Line_13 $$ List<String> importLines = new ArrayList()-->Line_21 $$ List<String> unneededImports = getJSPDuplicateImports(fileName, content, importLines)[ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_6 $$ Matcher matcher = pattern.matcher(content)[ CD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_40 $$ return content[ CD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_7 $$ if (!matcher.find()) [ CD ]
Line_7 $$ if (!matcher.find()) -->Line_8 $$ return content[ CD ]
Line_36 $$ content = beforeImports + imports-->Line_39 $$ content = beforeImports + imports + "\n" + afterImports[ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_3 $$ if (fileName.endsWith("init-ext.jsp")) [ FD ]
Line_10 $$ String imports = matcher.group()-->Line_30 $$ if (Validator.isNull(imports)) [ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_36 $$ content = beforeImports + imports[ FD ]
Line_15 $$ String line = null-->Line_18 $$ importLines.add(line)[ FD ]
Line_10 $$ String imports = matcher.group()-->Line_36 $$ content = beforeImports + imports[ FD ]
Line_31 $$ beforeImports = StringUtil.replaceLast(beforeImports, "\n", StringPool.BLANK)-->Line_36 $$ content = beforeImports + imports[ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_29 $$ String beforeImports = content.substring(0, matcher.start())[ CD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_27 $$ ImportsFormatter importsFormatter = new JSPImportsFormatter()[ CD ]
Line_21 $$ List<String> unneededImports = getJSPDuplicateImports(fileName, content, importLines)-->Line_22 $$ addJSPUnusedImports(fileName, importLines, unneededImports)[ FD ]
Line_28 $$ imports = importsFormatter.format(imports)-->Line_30 $$ if (Validator.isNull(imports)) [ FD ]
Line_11 $$ imports = StringUtil.replace(imports, new String[] -->Line_35 $$ imports = StringUtil.replaceLast(imports, "\n", StringPool.BLANK)[ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_3 $$ if (fileName.endsWith("init-ext.jsp")) [ CD ]
Line_27 $$ ImportsFormatter importsFormatter = new JSPImportsFormatter()-->Line_28 $$ imports = importsFormatter.format(imports)[ FD ]
Line_12 $$ if (checkUnusedImports) -->Line_21 $$ List<String> unneededImports = getJSPDuplicateImports(fileName, content, importLines)[ CD ]
Line_10 $$ String imports = matcher.group()-->Line_35 $$ imports = StringUtil.replaceLast(imports, "\n", StringPool.BLANK)[ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_34 $$ if (Validator.isNull(afterImports)) [ CD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_12 $$ if (checkUnusedImports) [ CD ]
Line_10 $$ String imports = matcher.group()-->Line_11 $$ imports = StringUtil.replace(imports, new String[] [ FD ]
Line_30 $$ if (Validator.isNull(imports)) -->Line_31 $$ beforeImports = StringUtil.replaceLast(beforeImports, "\n", StringPool.BLANK)[ CD ]
Line_24 $$ imports = StringUtil.replace(imports, unneededImport, StringPool.BLANK)-->Line_35 $$ imports = StringUtil.replaceLast(imports, "\n", StringPool.BLANK)[ FD ]
Line_34 $$ if (Validator.isNull(afterImports)) -->Line_36 $$ content = beforeImports + imports[ CD ]
Line_11 $$ imports = StringUtil.replace(imports, new String[] -->Line_28 $$ imports = importsFormatter.format(imports)[ FD ]
Line_23 $$ for (String unneededImport : unneededImports) -->Line_24 $$ imports = StringUtil.replace(imports, unneededImport, StringPool.BLANK)[ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_39 $$ content = beforeImports + imports + "\n" + afterImports[ CD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_6 $$ Matcher matcher = pattern.matcher(content)[ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_33 $$ String afterImports = content.substring(matcher.end())[ FD ]
Line_10 $$ String imports = matcher.group()-->Line_24 $$ imports = StringUtil.replace(imports, unneededImport, StringPool.BLANK)[ FD ]
Line_11 $$ imports = StringUtil.replace(imports, new String[] -->Line_24 $$ imports = StringUtil.replace(imports, unneededImport, StringPool.BLANK)[ FD ]
Line_28 $$ imports = importsFormatter.format(imports)-->Line_35 $$ imports = StringUtil.replaceLast(imports, "\n", StringPool.BLANK)[ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_39 $$ content = beforeImports + imports + "\n" + afterImports[ FD ]
Line_24 $$ imports = StringUtil.replace(imports, unneededImport, StringPool.BLANK)-->Line_30 $$ if (Validator.isNull(imports)) [ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_28 $$ imports = importsFormatter.format(imports)[ CD ]
Line_11 $$ imports = StringUtil.replace(imports, new String[] -->Line_30 $$ if (Validator.isNull(imports)) [ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_21 $$ List<String> unneededImports = getJSPDuplicateImports(fileName, content, importLines)[ FD ]
Line_17 $$ if (line.contains("import=")) -->Line_18 $$ importLines.add(line)[ CD ]
Line_10 $$ String imports = matcher.group()-->Line_28 $$ imports = importsFormatter.format(imports)[ FD ]
Line_28 $$ imports = importsFormatter.format(imports)-->Line_36 $$ content = beforeImports + imports[ FD ]
Line_6 $$ Matcher matcher = pattern.matcher(content)-->Line_10 $$ String imports = matcher.group()[ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_29 $$ String beforeImports = content.substring(0, matcher.start())[ FD ]
Line_6 $$ Matcher matcher = pattern.matcher(content)-->Line_33 $$ String afterImports = content.substring(matcher.end())[ FD ]
Line_12 $$ if (checkUnusedImports) -->Line_14 $$ UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(new UnsyncStringReader(imports))[ CD ]
Line_13 $$ List<String> importLines = new ArrayList()-->Line_18 $$ importLines.add(line)[ FD ]
Line_29 $$ String beforeImports = content.substring(0, matcher.start())-->Line_31 $$ beforeImports = StringUtil.replaceLast(beforeImports, "\n", StringPool.BLANK)[ FD ]
Line_2 $$ protected String formatJSPImportsOrTaglibs(String fileName, String content, Pattern pattern, boolean checkUnusedImports) throws IOException -->Line_11 $$ imports = StringUtil.replace(imports, new String[] [ CD ]
