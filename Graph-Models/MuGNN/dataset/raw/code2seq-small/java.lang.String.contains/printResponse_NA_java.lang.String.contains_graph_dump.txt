Line_2 $$ public void printResponse() throws Exception -->Line_21 $$ headers.setContentType(MediaType.TEXT_PLAIN)[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_8 $$ enigmaCookie.setPath("/crumbs")[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_13 $$ this.response.getWriter().print("content")[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_14 $$ this.response.setForwardedUrl("redirectFoo")[ CD ]
Line_23 $$ String heading = "MockHttpServletResponse"-->Line_26 $$ assertValue(heading, "Headers", headers)[ FD ]
Line_3 $$ Cookie enigmaCookie = new Cookie("enigma", "42")-->Line_8 $$ enigmaCookie.setPath("/crumbs")[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_12 $$ this.response.setContentType("text/plain")[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_33 $$ assertEquals(2, cookies.length)[ CD ]
Line_31 $$ Map<String, Map<String, Object>> printedValues = this.handler.getPrinter().printedValues-->Line_32 $$ String[] cookies = (String[]) printedValues.get(heading).get("Cookies")[ FD ]
Line_23 $$ String heading = "MockHttpServletResponse"-->Line_27 $$ assertValue(heading, "Content type", this.response.getContentType())[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_37 $$ assertTrue(cookie1.contains("name = 'cookie', value = 'cookieValue'"))[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_38 $$ assertTrue(cookie1.endsWith("]"))[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_17 $$ this.response.addCookie(enigmaCookie)[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_27 $$ assertValue(heading, "Content type", this.response.getContentType())[ CD ]
Line_23 $$ String heading = "MockHttpServletResponse"-->Line_30 $$ assertValue(heading, "Redirected URL", this.response.getRedirectedUrl())[ FD ]
Line_3 $$ Cookie enigmaCookie = new Cookie("enigma", "42")-->Line_5 $$ enigmaCookie.setHttpOnly(true)[ FD ]
Line_35 $$ String cookie2 = cookies[1]-->Line_40 $$ assertTrue(cookie2.contains("name = 'enigma', value = '42', comment = 'This is a comment', domain = '.example.com', maxAge = 1234, path = '/crumbs', secure = true, version = 0, httpOnly = true"))[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_41 $$ assertTrue(cookie2.endsWith("]"))[ CD ]
Line_35 $$ String cookie2 = cookies[1]-->Line_41 $$ assertTrue(cookie2.endsWith("]"))[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_32 $$ String[] cookies = (String[]) printedValues.get(heading).get("Cookies")[ CD ]
Line_34 $$ String cookie1 = cookies[0]-->Line_37 $$ assertTrue(cookie1.contains("name = 'cookie', value = 'cookieValue'"))[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_7 $$ enigmaCookie.setDomain(".example.com")[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_5 $$ enigmaCookie.setHttpOnly(true)[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_39 $$ assertTrue(cookie2.startsWith("[" + Cookie.class.getSimpleName()))[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_11 $$ this.response.addHeader("header", "headerValue")[ CD ]
Line_23 $$ String heading = "MockHttpServletResponse"-->Line_29 $$ assertValue(heading, "Forwarded URL", this.response.getForwardedUrl())[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_19 $$ HttpHeaders headers = new HttpHeaders()[ CD ]
Line_19 $$ HttpHeaders headers = new HttpHeaders()-->Line_20 $$ headers.set("header", "headerValue")[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_3 $$ Cookie enigmaCookie = new Cookie("enigma", "42")[ CD ]
Line_3 $$ Cookie enigmaCookie = new Cookie("enigma", "42")-->Line_9 $$ enigmaCookie.setSecure(true)[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_20 $$ headers.set("header", "headerValue")[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_25 $$ assertValue(heading, "Error message", response.getErrorMessage())[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_35 $$ String cookie2 = cookies[1][ CD ]
Line_34 $$ String cookie1 = cookies[0]-->Line_38 $$ assertTrue(cookie1.endsWith("]"))[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_31 $$ Map<String, Map<String, Object>> printedValues = this.handler.getPrinter().printedValues[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_36 $$ assertTrue(cookie1.startsWith("[" + Cookie.class.getSimpleName()))[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_16 $$ this.response.addCookie(new Cookie("cookie", "cookieValue"))[ CD ]
Line_19 $$ HttpHeaders headers = new HttpHeaders()-->Line_21 $$ headers.setContentType(MediaType.TEXT_PLAIN)[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_29 $$ assertValue(heading, "Forwarded URL", this.response.getForwardedUrl())[ CD ]
Line_23 $$ String heading = "MockHttpServletResponse"-->Line_32 $$ String[] cookies = (String[]) printedValues.get(heading).get("Cookies")[ FD ]
Line_3 $$ Cookie enigmaCookie = new Cookie("enigma", "42")-->Line_7 $$ enigmaCookie.setDomain(".example.com")[ FD ]
Line_23 $$ String heading = "MockHttpServletResponse"-->Line_25 $$ assertValue(heading, "Error message", response.getErrorMessage())[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_26 $$ assertValue(heading, "Headers", headers)[ CD ]
Line_23 $$ String heading = "MockHttpServletResponse"-->Line_28 $$ assertValue(heading, "Body", this.response.getContentAsString())[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_9 $$ enigmaCookie.setSecure(true)[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_4 $$ enigmaCookie.setComment("This is a comment")[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_24 $$ assertValue(heading, "Status", this.response.getStatus())[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_6 $$ enigmaCookie.setMaxAge(1234)[ CD ]
Line_23 $$ String heading = "MockHttpServletResponse"-->Line_24 $$ assertValue(heading, "Status", this.response.getStatus())[ FD ]
Line_3 $$ Cookie enigmaCookie = new Cookie("enigma", "42")-->Line_4 $$ enigmaCookie.setComment("This is a comment")[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_23 $$ String heading = "MockHttpServletResponse"[ CD ]
Line_19 $$ HttpHeaders headers = new HttpHeaders()-->Line_26 $$ assertValue(heading, "Headers", headers)[ FD ]
Line_34 $$ String cookie1 = cookies[0]-->Line_36 $$ assertTrue(cookie1.startsWith("[" + Cookie.class.getSimpleName()))[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_30 $$ assertValue(heading, "Redirected URL", this.response.getRedirectedUrl())[ CD ]
Line_3 $$ Cookie enigmaCookie = new Cookie("enigma", "42")-->Line_17 $$ this.response.addCookie(enigmaCookie)[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_22 $$ headers.setLocation(new URI("/redirectFoo"))[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_10 $$ this.response.setStatus(400, "error")[ CD ]
Line_19 $$ HttpHeaders headers = new HttpHeaders()-->Line_22 $$ headers.setLocation(new URI("/redirectFoo"))[ FD ]
Line_3 $$ Cookie enigmaCookie = new Cookie("enigma", "42")-->Line_6 $$ enigmaCookie.setMaxAge(1234)[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_28 $$ assertValue(heading, "Body", this.response.getContentAsString())[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_18 $$ this.handler.handle(this.mvcResult)[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_15 $$ this.response.sendRedirect("/redirectFoo")[ CD ]
Line_2 $$ public void printResponse() throws Exception -->Line_34 $$ String cookie1 = cookies[0][ CD ]
Line_35 $$ String cookie2 = cookies[1]-->Line_39 $$ assertTrue(cookie2.startsWith("[" + Cookie.class.getSimpleName()))[ FD ]
Line_2 $$ public void printResponse() throws Exception -->Line_40 $$ assertTrue(cookie2.contains("name = 'enigma', value = '42', comment = 'This is a comment', domain = '.example.com', maxAge = 1234, path = '/crumbs', secure = true, version = 0, httpOnly = true"))[ CD ]
