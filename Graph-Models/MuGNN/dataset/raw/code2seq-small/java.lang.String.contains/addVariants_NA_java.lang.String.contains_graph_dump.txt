Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_6 $$ final String prefix = attribute.getName().contains(":") && ((XmlAttributeImpl) attribute).getRealLocalName().length() > 0 ? attribute.getNamespacePrefix() + ":" : null[ FD ]
Line_36 $$ element = element.withCaseSensitivity(caseSensitive).withInsertHandler(insertHandler)-->Line_37 $$ result.addElement(descriptor.isRequired() ? PrioritizedLookupElement.withPriority(element.appendTailText("(required)", true), 100) : HtmlUtil.isOwnHtmlAttribute(descriptor) ? PrioritizedLookupElement.withPriority(element, 50) : element)[ FD ]
Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_16 $$ if (replacementInsertHandler != null) [ FD ]
Line_28 $$ LookupElementBuilder element = LookupElementBuilder.create(name)-->Line_36 $$ element = element.withCaseSensitivity(caseSensitive).withInsertHandler(insertHandler)[ FD ]
Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_10 $$ if (isValidVariant(attribute, descriptor, attributes, extension)) [ FD ]
Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_3 $$ final XmlTag tag = attribute.getParent()[ FD ]
Line_16 $$ if (replacementInsertHandler != null) -->Line_17 $$ insertHandler = replacementInsertHandler[ CD ]
Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_3 $$ final XmlTag tag = attribute.getParent()[ CD ]
Line_24 $$ if (prefix == null || name.startsWith(prefix)) -->Line_33 $$ if (separator > 0) [ CD ]
Line_5 $$ final XmlExtension extension = XmlExtension.getExtension(file)-->Line_10 $$ if (isValidVariant(attribute, descriptor, attributes, extension)) [ FD ]
Line_11 $$ String name = descriptor.getName(tag)-->Line_25 $$ if (prefix != null && name.length() > prefix.length()) [ FD ]
Line_28 $$ LookupElementBuilder element = LookupElementBuilder.create(name)-->Line_30 $$ element = element.withIcon(((PsiPresentableMetaData) descriptor).getIcon())[ FD ]
Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_37 $$ result.addElement(descriptor.isRequired() ? PrioritizedLookupElement.withPriority(element.appendTailText("(required)", true), 100) : HtmlUtil.isOwnHtmlAttribute(descriptor) ? PrioritizedLookupElement.withPriority(element, 50) : element)[ FD ]
Line_6 $$ final String prefix = attribute.getName().contains(":") && ((XmlAttributeImpl) attribute).getRealLocalName().length() > 0 ? attribute.getNamespacePrefix() + ":" : null-->Line_24 $$ if (prefix == null || name.startsWith(prefix)) [ FD ]
Line_14 $$ insertHandler = null-->Line_36 $$ element = element.withCaseSensitivity(caseSensitive).withInsertHandler(insertHandler)[ FD ]
Line_26 $$ name = descriptor.getName(tag).substring(prefix.length())-->Line_28 $$ LookupElementBuilder element = LookupElementBuilder.create(name)[ FD ]
Line_10 $$ if (isValidVariant(attribute, descriptor, attributes, extension)) -->Line_24 $$ if (prefix == null || name.startsWith(prefix)) [ CD ]
Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_5 $$ final XmlExtension extension = XmlExtension.getExtension(file)[ CD ]
Line_11 $$ String name = descriptor.getName(tag)-->Line_20 $$ if (file instanceof XmlFile && namespace != null && namespace.length() > 0 && !name.contains(":") && tag.getPrefixByNamespace(namespace) == null) [ FD ]
Line_29 $$ if (descriptor instanceof PsiPresentableMetaData) -->Line_30 $$ element = element.withIcon(((PsiPresentableMetaData) descriptor).getIcon())[ CD ]
Line_8 $$ boolean caseSensitive = !(completionData instanceof HtmlCompletionData) || ((HtmlCompletionData) completionData).isCaseSensitive()-->Line_36 $$ element = element.withCaseSensitivity(caseSensitive).withInsertHandler(insertHandler)[ FD ]
Line_11 $$ String name = descriptor.getName(tag)-->Line_34 $$ element = element.withLookupString(name.substring(separator + 1))[ FD ]
Line_17 $$ insertHandler = replacementInsertHandler-->Line_36 $$ element = element.withCaseSensitivity(caseSensitive).withInsertHandler(insertHandler)[ FD ]
Line_26 $$ name = descriptor.getName(tag).substring(prefix.length())-->Line_34 $$ element = element.withLookupString(name.substring(separator + 1))[ FD ]
Line_6 $$ final String prefix = attribute.getName().contains(":") && ((XmlAttributeImpl) attribute).getRealLocalName().length() > 0 ? attribute.getNamespacePrefix() + ":" : null-->Line_26 $$ name = descriptor.getName(tag).substring(prefix.length())[ FD ]
Line_9 $$ for (XmlAttributeDescriptor descriptor : descriptors) -->Line_37 $$ result.addElement(descriptor.isRequired() ? PrioritizedLookupElement.withPriority(element.appendTailText("(required)", true), 100) : HtmlUtil.isOwnHtmlAttribute(descriptor) ? PrioritizedLookupElement.withPriority(element, 50) : element)[ FD ]
Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_17 $$ insertHandler = replacementInsertHandler[ FD ]
Line_25 $$ if (prefix != null && name.length() > prefix.length()) -->Line_26 $$ name = descriptor.getName(tag).substring(prefix.length())[ CD ]
Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_7 $$ CompletionData completionData = CompletionUtil.getCompletionDataByElement(attribute, attribute.getContainingFile().getOriginalFile())[ FD ]
Line_24 $$ if (prefix == null || name.startsWith(prefix)) -->Line_28 $$ LookupElementBuilder element = LookupElementBuilder.create(name)[ CD ]
Line_12 $$ InsertHandler<LookupElement> insertHandler = XmlAttributeInsertHandler.INSTANCE-->Line_17 $$ insertHandler = replacementInsertHandler[ FD ]
Line_6 $$ final String prefix = attribute.getName().contains(":") && ((XmlAttributeImpl) attribute).getRealLocalName().length() > 0 ? attribute.getNamespacePrefix() + ":" : null-->Line_25 $$ if (prefix != null && name.length() > prefix.length()) [ FD ]
Line_11 $$ String name = descriptor.getName(tag)-->Line_28 $$ LookupElementBuilder element = LookupElementBuilder.create(name)[ FD ]
Line_3 $$ final XmlTag tag = attribute.getParent()-->Line_4 $$ final PsiFile file = tag.getContainingFile()[ FD ]
Line_11 $$ String name = descriptor.getName(tag)-->Line_32 $$ final int separator = name.indexOf(':')[ FD ]
Line_3 $$ final XmlTag tag = attribute.getParent()-->Line_20 $$ if (file instanceof XmlFile && namespace != null && namespace.length() > 0 && !name.contains(":") && tag.getPrefixByNamespace(namespace) == null) [ FD ]
Line_30 $$ element = element.withIcon(((PsiPresentableMetaData) descriptor).getIcon())-->Line_36 $$ element = element.withCaseSensitivity(caseSensitive).withInsertHandler(insertHandler)[ FD ]
Line_30 $$ element = element.withIcon(((PsiPresentableMetaData) descriptor).getIcon())-->Line_34 $$ element = element.withLookupString(name.substring(separator + 1))[ FD ]
Line_24 $$ if (prefix == null || name.startsWith(prefix)) -->Line_25 $$ if (prefix != null && name.length() > prefix.length()) [ CD ]
Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_8 $$ boolean caseSensitive = !(completionData instanceof HtmlCompletionData) || ((HtmlCompletionData) completionData).isCaseSensitive()[ CD ]
Line_9 $$ for (XmlAttributeDescriptor descriptor : descriptors) -->Line_11 $$ String name = descriptor.getName(tag)[ FD ]
Line_11 $$ String name = descriptor.getName(tag)-->Line_26 $$ name = descriptor.getName(tag).substring(prefix.length())[ FD ]
Line_4 $$ final PsiFile file = tag.getContainingFile()-->Line_5 $$ final XmlExtension extension = XmlExtension.getExtension(file)[ FD ]
Line_3 $$ final XmlTag tag = attribute.getParent()-->Line_11 $$ String name = descriptor.getName(tag)[ FD ]
Line_11 $$ String name = descriptor.getName(tag)-->Line_24 $$ if (prefix == null || name.startsWith(prefix)) [ FD ]
Line_34 $$ element = element.withLookupString(name.substring(separator + 1))-->Line_36 $$ element = element.withCaseSensitivity(caseSensitive).withInsertHandler(insertHandler)[ FD ]
Line_24 $$ if (prefix == null || name.startsWith(prefix)) -->Line_32 $$ final int separator = name.indexOf(':')[ CD ]
Line_10 $$ if (isValidVariant(attribute, descriptor, attributes, extension)) -->Line_16 $$ if (replacementInsertHandler != null) [ CD ]
Line_9 $$ for (XmlAttributeDescriptor descriptor : descriptors) -->Line_26 $$ name = descriptor.getName(tag).substring(prefix.length())[ FD ]
Line_33 $$ if (separator > 0) -->Line_34 $$ element = element.withLookupString(name.substring(separator + 1))[ CD ]
Line_18 $$ if (descriptor instanceof NamespaceAwareXmlAttributeDescriptor) -->Line_20 $$ if (file instanceof XmlFile && namespace != null && namespace.length() > 0 && !name.contains(":") && tag.getPrefixByNamespace(namespace) == null) [ CD ]
Line_24 $$ if (prefix == null || name.startsWith(prefix)) -->Line_37 $$ result.addElement(descriptor.isRequired() ? PrioritizedLookupElement.withPriority(element.appendTailText("(required)", true), 100) : HtmlUtil.isOwnHtmlAttribute(descriptor) ? PrioritizedLookupElement.withPriority(element, 50) : element)[ CD ]
Line_14 $$ insertHandler = null-->Line_17 $$ insertHandler = replacementInsertHandler[ FD ]
Line_32 $$ final int separator = name.indexOf(':')-->Line_33 $$ if (separator > 0) [ FD ]
Line_26 $$ name = descriptor.getName(tag).substring(prefix.length())-->Line_32 $$ final int separator = name.indexOf(':')[ FD ]
Line_17 $$ insertHandler = replacementInsertHandler-->Line_21 $$ insertHandler = new XmlAttributeInsertHandler(namespace)[ FD ]
Line_3 $$ final XmlTag tag = attribute.getParent()-->Line_26 $$ name = descriptor.getName(tag).substring(prefix.length())[ FD ]
Line_13 $$ if (tag instanceof HtmlTag && HtmlUtil.isShortNotationOfBooleanAttributePreferred() && HtmlUtil.isBooleanAttribute(descriptor, tag)) -->Line_14 $$ insertHandler = null[ CD ]
Line_19 $$ final String namespace = ((NamespaceAwareXmlAttributeDescriptor) descriptor).getNamespace(tag)-->Line_20 $$ if (file instanceof XmlFile && namespace != null && namespace.length() > 0 && !name.contains(":") && tag.getPrefixByNamespace(namespace) == null) [ FD ]
Line_21 $$ insertHandler = new XmlAttributeInsertHandler(namespace)-->Line_36 $$ element = element.withCaseSensitivity(caseSensitive).withInsertHandler(insertHandler)[ FD ]
Line_3 $$ final XmlTag tag = attribute.getParent()-->Line_19 $$ final String namespace = ((NamespaceAwareXmlAttributeDescriptor) descriptor).getNamespace(tag)[ FD ]
Line_24 $$ if (prefix == null || name.startsWith(prefix)) -->Line_36 $$ element = element.withCaseSensitivity(caseSensitive).withInsertHandler(insertHandler)[ CD ]
Line_28 $$ LookupElementBuilder element = LookupElementBuilder.create(name)-->Line_34 $$ element = element.withLookupString(name.substring(separator + 1))[ FD ]
Line_10 $$ if (isValidVariant(attribute, descriptor, attributes, extension)) -->Line_12 $$ InsertHandler<LookupElement> insertHandler = XmlAttributeInsertHandler.INSTANCE[ CD ]
Line_10 $$ if (isValidVariant(attribute, descriptor, attributes, extension)) -->Line_11 $$ String name = descriptor.getName(tag)[ CD ]
Line_20 $$ if (file instanceof XmlFile && namespace != null && namespace.length() > 0 && !name.contains(":") && tag.getPrefixByNamespace(namespace) == null) -->Line_21 $$ insertHandler = new XmlAttributeInsertHandler(namespace)[ CD ]
Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_7 $$ CompletionData completionData = CompletionUtil.getCompletionDataByElement(attribute, attribute.getContainingFile().getOriginalFile())[ CD ]
Line_9 $$ for (XmlAttributeDescriptor descriptor : descriptors) -->Line_10 $$ if (isValidVariant(attribute, descriptor, attributes, extension)) [ FD ]
Line_18 $$ if (descriptor instanceof NamespaceAwareXmlAttributeDescriptor) -->Line_19 $$ final String namespace = ((NamespaceAwareXmlAttributeDescriptor) descriptor).getNamespace(tag)[ CD ]
Line_16 $$ if (replacementInsertHandler != null) -->Line_18 $$ if (descriptor instanceof NamespaceAwareXmlAttributeDescriptor) [ CD ]
Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_6 $$ final String prefix = attribute.getName().contains(":") && ((XmlAttributeImpl) attribute).getRealLocalName().length() > 0 ? attribute.getNamespacePrefix() + ":" : null[ CD ]
Line_2 $$ private static void addVariants(final CompletionResultSet result, final XmlAttribute[] attributes, final XmlAttributeDescriptor[] descriptors, XmlAttribute attribute, @Nullable InsertHandler<LookupElement> replacementInsertHandler) -->Line_4 $$ final PsiFile file = tag.getContainingFile()[ CD ]
Line_9 $$ for (XmlAttributeDescriptor descriptor : descriptors) -->Line_18 $$ if (descriptor instanceof NamespaceAwareXmlAttributeDescriptor) [ FD ]
Line_12 $$ InsertHandler<LookupElement> insertHandler = XmlAttributeInsertHandler.INSTANCE-->Line_36 $$ element = element.withCaseSensitivity(caseSensitive).withInsertHandler(insertHandler)[ FD ]
Line_10 $$ if (isValidVariant(attribute, descriptor, attributes, extension)) -->Line_13 $$ if (tag instanceof HtmlTag && HtmlUtil.isShortNotationOfBooleanAttributePreferred() && HtmlUtil.isBooleanAttribute(descriptor, tag)) [ CD ]
Line_12 $$ InsertHandler<LookupElement> insertHandler = XmlAttributeInsertHandler.INSTANCE-->Line_14 $$ insertHandler = null[ FD ]
Line_24 $$ if (prefix == null || name.startsWith(prefix)) -->Line_29 $$ if (descriptor instanceof PsiPresentableMetaData) [ CD ]
Line_3 $$ final XmlTag tag = attribute.getParent()-->Line_13 $$ if (tag instanceof HtmlTag && HtmlUtil.isShortNotationOfBooleanAttributePreferred() && HtmlUtil.isBooleanAttribute(descriptor, tag)) [ FD ]
Line_12 $$ InsertHandler<LookupElement> insertHandler = XmlAttributeInsertHandler.INSTANCE-->Line_21 $$ insertHandler = new XmlAttributeInsertHandler(namespace)[ FD ]
Line_28 $$ LookupElementBuilder element = LookupElementBuilder.create(name)-->Line_37 $$ result.addElement(descriptor.isRequired() ? PrioritizedLookupElement.withPriority(element.appendTailText("(required)", true), 100) : HtmlUtil.isOwnHtmlAttribute(descriptor) ? PrioritizedLookupElement.withPriority(element, 50) : element)[ FD ]
Line_9 $$ for (XmlAttributeDescriptor descriptor : descriptors) -->Line_29 $$ if (descriptor instanceof PsiPresentableMetaData) [ FD ]
Line_14 $$ insertHandler = null-->Line_21 $$ insertHandler = new XmlAttributeInsertHandler(namespace)[ FD ]
Line_9 $$ for (XmlAttributeDescriptor descriptor : descriptors) -->Line_13 $$ if (tag instanceof HtmlTag && HtmlUtil.isShortNotationOfBooleanAttributePreferred() && HtmlUtil.isBooleanAttribute(descriptor, tag)) [ FD ]
Line_30 $$ element = element.withIcon(((PsiPresentableMetaData) descriptor).getIcon())-->Line_37 $$ result.addElement(descriptor.isRequired() ? PrioritizedLookupElement.withPriority(element.appendTailText("(required)", true), 100) : HtmlUtil.isOwnHtmlAttribute(descriptor) ? PrioritizedLookupElement.withPriority(element, 50) : element)[ FD ]
Line_34 $$ element = element.withLookupString(name.substring(separator + 1))-->Line_37 $$ result.addElement(descriptor.isRequired() ? PrioritizedLookupElement.withPriority(element.appendTailText("(required)", true), 100) : HtmlUtil.isOwnHtmlAttribute(descriptor) ? PrioritizedLookupElement.withPriority(element, 50) : element)[ FD ]
