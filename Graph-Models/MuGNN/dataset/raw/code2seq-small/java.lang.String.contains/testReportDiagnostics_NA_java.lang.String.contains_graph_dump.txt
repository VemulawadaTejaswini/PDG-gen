Line_8 $$ AppContext mockContext = mock(AppContext.class)-->Line_9 $$ when(mockContext.hasSuccessfullyUnregistered()).thenReturn(true)[ FD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_7 $$ MRAppMetrics mrAppMetrics = MRAppMetrics.create()[ CD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_19 $$ Assert.assertNotNull(diagnostics)[ CD ]
Line_18 $$ diagnostics = job.getReport().getDiagnostics()-->Line_19 $$ Assert.assertNotNull(diagnostics)[ FD ]
Line_15 $$ job = new JobImpl(jobId, Records.newRecord(ApplicationAttemptId.class), new Configuration(), mock(EventHandler.class), null, mock(JobTokenSecretManager.class), null, new SystemClock(), null, mrAppMetrics, null, true, null, 0, null, mockContext, null, null)-->Line_17 $$ job.handle(diagUpdateEvent)[ FD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_20 $$ Assert.assertTrue(diagnostics.contains(diagMsg))[ CD ]
Line_12 $$ String diagnostics = job.getReport().getDiagnostics()-->Line_19 $$ Assert.assertNotNull(diagnostics)[ FD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_10 $$ JobImpl job = new JobImpl(jobId, Records.newRecord(ApplicationAttemptId.class), new Configuration(), mock(EventHandler.class), null, mock(JobTokenSecretManager.class), null, new SystemClock(), null, mrAppMetrics, null, true, null, 0, null, mockContext, null, null)[ CD ]
Line_10 $$ JobImpl job = new JobImpl(jobId, Records.newRecord(ApplicationAttemptId.class), new Configuration(), mock(EventHandler.class), null, mock(JobTokenSecretManager.class), null, new SystemClock(), null, mrAppMetrics, null, true, null, 0, null, mockContext, null, null)-->Line_12 $$ String diagnostics = job.getReport().getDiagnostics()[ FD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_4 $$ JobId jobId = TypeConverter.toYarn(jobID)[ CD ]
Line_10 $$ JobImpl job = new JobImpl(jobId, Records.newRecord(ApplicationAttemptId.class), new Configuration(), mock(EventHandler.class), null, mock(JobTokenSecretManager.class), null, new SystemClock(), null, mrAppMetrics, null, true, null, 0, null, mockContext, null, null)-->Line_18 $$ diagnostics = job.getReport().getDiagnostics()[ FD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_14 $$ Assert.assertTrue(diagnostics.contains(diagMsg))[ CD ]
Line_10 $$ JobImpl job = new JobImpl(jobId, Records.newRecord(ApplicationAttemptId.class), new Configuration(), mock(EventHandler.class), null, mock(JobTokenSecretManager.class), null, new SystemClock(), null, mrAppMetrics, null, true, null, 0, null, mockContext, null, null)-->Line_15 $$ job = new JobImpl(jobId, Records.newRecord(ApplicationAttemptId.class), new Configuration(), mock(EventHandler.class), null, mock(JobTokenSecretManager.class), null, new SystemClock(), null, mrAppMetrics, null, true, null, 0, null, mockContext, null, null)[ FD ]
Line_15 $$ job = new JobImpl(jobId, Records.newRecord(ApplicationAttemptId.class), new Configuration(), mock(EventHandler.class), null, mock(JobTokenSecretManager.class), null, new SystemClock(), null, mrAppMetrics, null, true, null, 0, null, mockContext, null, null)-->Line_16 $$ job.handle(new JobEvent(jobId, JobEventType.JOB_KILL))[ FD ]
Line_6 $$ final JobDiagnosticsUpdateEvent diagUpdateEvent = new JobDiagnosticsUpdateEvent(jobId, diagMsg)-->Line_17 $$ job.handle(diagUpdateEvent)[ FD ]
Line_12 $$ String diagnostics = job.getReport().getDiagnostics()-->Line_20 $$ Assert.assertTrue(diagnostics.contains(diagMsg))[ FD ]
Line_18 $$ diagnostics = job.getReport().getDiagnostics()-->Line_20 $$ Assert.assertTrue(diagnostics.contains(diagMsg))[ FD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_9 $$ when(mockContext.hasSuccessfullyUnregistered()).thenReturn(true)[ CD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_17 $$ job.handle(diagUpdateEvent)[ CD ]
Line_12 $$ String diagnostics = job.getReport().getDiagnostics()-->Line_13 $$ Assert.assertNotNull(diagnostics)[ FD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_3 $$ JobID jobID = JobID.forName("job_1234567890000_0001")[ CD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_16 $$ job.handle(new JobEvent(jobId, JobEventType.JOB_KILL))[ CD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_5 $$ final String diagMsg = "some diagnostic message"[ CD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_15 $$ job = new JobImpl(jobId, Records.newRecord(ApplicationAttemptId.class), new Configuration(), mock(EventHandler.class), null, mock(JobTokenSecretManager.class), null, new SystemClock(), null, mrAppMetrics, null, true, null, 0, null, mockContext, null, null)[ CD ]
Line_6 $$ final JobDiagnosticsUpdateEvent diagUpdateEvent = new JobDiagnosticsUpdateEvent(jobId, diagMsg)-->Line_11 $$ job.handle(diagUpdateEvent)[ FD ]
Line_3 $$ JobID jobID = JobID.forName("job_1234567890000_0001")-->Line_4 $$ JobId jobId = TypeConverter.toYarn(jobID)[ FD ]
Line_10 $$ JobImpl job = new JobImpl(jobId, Records.newRecord(ApplicationAttemptId.class), new Configuration(), mock(EventHandler.class), null, mock(JobTokenSecretManager.class), null, new SystemClock(), null, mrAppMetrics, null, true, null, 0, null, mockContext, null, null)-->Line_11 $$ job.handle(diagUpdateEvent)[ FD ]
Line_10 $$ JobImpl job = new JobImpl(jobId, Records.newRecord(ApplicationAttemptId.class), new Configuration(), mock(EventHandler.class), null, mock(JobTokenSecretManager.class), null, new SystemClock(), null, mrAppMetrics, null, true, null, 0, null, mockContext, null, null)-->Line_16 $$ job.handle(new JobEvent(jobId, JobEventType.JOB_KILL))[ FD ]
Line_5 $$ final String diagMsg = "some diagnostic message"-->Line_20 $$ Assert.assertTrue(diagnostics.contains(diagMsg))[ FD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_8 $$ AppContext mockContext = mock(AppContext.class)[ CD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_6 $$ final JobDiagnosticsUpdateEvent diagUpdateEvent = new JobDiagnosticsUpdateEvent(jobId, diagMsg)[ CD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_12 $$ String diagnostics = job.getReport().getDiagnostics()[ CD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_18 $$ diagnostics = job.getReport().getDiagnostics()[ CD ]
Line_10 $$ JobImpl job = new JobImpl(jobId, Records.newRecord(ApplicationAttemptId.class), new Configuration(), mock(EventHandler.class), null, mock(JobTokenSecretManager.class), null, new SystemClock(), null, mrAppMetrics, null, true, null, 0, null, mockContext, null, null)-->Line_17 $$ job.handle(diagUpdateEvent)[ FD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_11 $$ job.handle(diagUpdateEvent)[ CD ]
Line_15 $$ job = new JobImpl(jobId, Records.newRecord(ApplicationAttemptId.class), new Configuration(), mock(EventHandler.class), null, mock(JobTokenSecretManager.class), null, new SystemClock(), null, mrAppMetrics, null, true, null, 0, null, mockContext, null, null)-->Line_18 $$ diagnostics = job.getReport().getDiagnostics()[ FD ]
Line_12 $$ String diagnostics = job.getReport().getDiagnostics()-->Line_14 $$ Assert.assertTrue(diagnostics.contains(diagMsg))[ FD ]
Line_2 $$ public void testReportDiagnostics() throws Exception -->Line_13 $$ Assert.assertNotNull(diagnostics)[ CD ]
Line_12 $$ String diagnostics = job.getReport().getDiagnostics()-->Line_18 $$ diagnostics = job.getReport().getDiagnostics()[ FD ]
Line_5 $$ final String diagMsg = "some diagnostic message"-->Line_14 $$ Assert.assertTrue(diagnostics.contains(diagMsg))[ FD ]
