Line_7 $$ String classpath = "java.class.path"-->Line_13 $$ assertTrue(value.contains(classpath))[ FD ]
Line_11 $$ value = MRApps.getSystemPropertiesToLog(conf)-->Line_13 $$ assertTrue(value.contains(classpath))[ FD ]
Line_11 $$ value = MRApps.getSystemPropertiesToLog(conf)-->Line_12 $$ assertNotNull(value)[ FD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_7 $$ String classpath = "java.class.path"[ CD ]
Line_5 $$ String value = MRApps.getSystemPropertiesToLog(conf)-->Line_15 $$ assertFalse(value.contains(version))[ FD ]
Line_5 $$ String value = MRApps.getSystemPropertiesToLog(conf)-->Line_13 $$ assertTrue(value.contains(classpath))[ FD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_10 $$ conf.set(MRJobConfig.MAPREDUCE_JVM_SYSTEM_PROPERTIES_TO_LOG, classpath + ", " + os)[ CD ]
Line_8 $$ String os = "os.name"-->Line_14 $$ assertTrue(value.contains(os))[ FD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_6 $$ assertNull(value)[ CD ]
Line_5 $$ String value = MRApps.getSystemPropertiesToLog(conf)-->Line_6 $$ assertNull(value)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ String value = MRApps.getSystemPropertiesToLog(conf)[ FD ]
Line_5 $$ String value = MRApps.getSystemPropertiesToLog(conf)-->Line_11 $$ value = MRApps.getSystemPropertiesToLog(conf)[ FD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_4 $$ conf.set(MRJobConfig.MAPREDUCE_JVM_SYSTEM_PROPERTIES_TO_LOG, " ")[ CD ]
Line_5 $$ String value = MRApps.getSystemPropertiesToLog(conf)-->Line_12 $$ assertNotNull(value)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_11 $$ value = MRApps.getSystemPropertiesToLog(conf)[ FD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_8 $$ String os = "os.name"[ CD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_9 $$ String version = "java.version"[ CD ]
Line_11 $$ value = MRApps.getSystemPropertiesToLog(conf)-->Line_15 $$ assertFalse(value.contains(version))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_10 $$ conf.set(MRJobConfig.MAPREDUCE_JVM_SYSTEM_PROPERTIES_TO_LOG, classpath + ", " + os)[ FD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_15 $$ assertFalse(value.contains(version))[ CD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_12 $$ assertNotNull(value)[ CD ]
Line_9 $$ String version = "java.version"-->Line_15 $$ assertFalse(value.contains(version))[ FD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_11 $$ value = MRApps.getSystemPropertiesToLog(conf)[ CD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_5 $$ String value = MRApps.getSystemPropertiesToLog(conf)[ CD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_13 $$ assertTrue(value.contains(classpath))[ CD ]
Line_11 $$ value = MRApps.getSystemPropertiesToLog(conf)-->Line_14 $$ assertTrue(value.contains(os))[ FD ]
Line_5 $$ String value = MRApps.getSystemPropertiesToLog(conf)-->Line_14 $$ assertTrue(value.contains(os))[ FD ]
Line_2 $$ public void testLogSystemProperties() throws Exception -->Line_14 $$ assertTrue(value.contains(os))[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.set(MRJobConfig.MAPREDUCE_JVM_SYSTEM_PROPERTIES_TO_LOG, " ")[ FD ]
