Line_7 $$ while (matcher.find()) -->Line_8 $$ int pos = matcher.start()[ CD ]
Line_2 $$ protected void checkLogLevel(String content, String fileName) -->Line_19 $$ int lineCount = StringUtil.count(content.substring(0, matcher.start(1)), StringPool.NEW_LINE)[ FD ]
Line_9 $$ while (true) -->Line_12 $$ if (c != CharPool.TAB) [ CD ]
Line_2 $$ protected void checkLogLevel(String content, String fileName) -->Line_3 $$ if (fileName.contains("Log")) [ FD ]
Line_6 $$ Matcher matcher = _logLevelPattern.matcher(content)-->Line_17 $$ String s = "_log.is" + StringUtil.upperCaseFirstLetter(matcher.group(2)) + "Enabled()"[ FD ]
Line_7 $$ while (matcher.find()) -->Line_16 $$ String codeBlock = content.substring(pos, matcher.start())[ CD ]
Line_2 $$ protected void checkLogLevel(String content, String fileName) -->Line_6 $$ Matcher matcher = _logLevelPattern.matcher(content)[ CD ]
Line_8 $$ int pos = matcher.start()-->Line_10 $$ pos = content.lastIndexOf(StringPool.NEW_LINE + StringPool.TAB, pos - 1)[ FD ]
Line_6 $$ Matcher matcher = _logLevelPattern.matcher(content)-->Line_7 $$ while (matcher.find()) [ FD ]
Line_10 $$ pos = content.lastIndexOf(StringPool.NEW_LINE + StringPool.TAB, pos - 1)-->Line_16 $$ String codeBlock = content.substring(pos, matcher.start())[ FD ]
Line_11 $$ char c = content.charAt(pos + 2)-->Line_12 $$ if (c != CharPool.TAB) [ FD ]
Line_18 $$ if (!codeBlock.contains(s)) -->Line_19 $$ int lineCount = StringUtil.count(content.substring(0, matcher.start(1)), StringPool.NEW_LINE)[ CD ]
Line_2 $$ protected void checkLogLevel(String content, String fileName) -->Line_11 $$ char c = content.charAt(pos + 2)[ FD ]
Line_9 $$ while (true) -->Line_10 $$ pos = content.lastIndexOf(StringPool.NEW_LINE + StringPool.TAB, pos - 1)[ CD ]
Line_8 $$ int pos = matcher.start()-->Line_16 $$ String codeBlock = content.substring(pos, matcher.start())[ FD ]
Line_2 $$ protected void checkLogLevel(String content, String fileName) -->Line_7 $$ while (matcher.find()) [ CD ]
Line_6 $$ Matcher matcher = _logLevelPattern.matcher(content)-->Line_8 $$ int pos = matcher.start()[ FD ]
Line_2 $$ protected void checkLogLevel(String content, String fileName) -->Line_21 $$ processErrorMessage(fileName, "Use " + s + ": " + fileName + " " + lineCount)[ FD ]
Line_6 $$ Matcher matcher = _logLevelPattern.matcher(content)-->Line_16 $$ String codeBlock = content.substring(pos, matcher.start())[ FD ]
Line_2 $$ protected void checkLogLevel(String content, String fileName) -->Line_10 $$ pos = content.lastIndexOf(StringPool.NEW_LINE + StringPool.TAB, pos - 1)[ FD ]
Line_18 $$ if (!codeBlock.contains(s)) -->Line_21 $$ processErrorMessage(fileName, "Use " + s + ": " + fileName + " " + lineCount)[ CD ]
Line_6 $$ Matcher matcher = _logLevelPattern.matcher(content)-->Line_19 $$ int lineCount = StringUtil.count(content.substring(0, matcher.start(1)), StringPool.NEW_LINE)[ FD ]
Line_2 $$ protected void checkLogLevel(String content, String fileName) -->Line_6 $$ Matcher matcher = _logLevelPattern.matcher(content)[ FD ]
Line_2 $$ protected void checkLogLevel(String content, String fileName) -->Line_3 $$ if (fileName.contains("Log")) [ CD ]
Line_7 $$ while (matcher.find()) -->Line_9 $$ while (true) [ CD ]
Line_2 $$ protected void checkLogLevel(String content, String fileName) -->Line_16 $$ String codeBlock = content.substring(pos, matcher.start())[ FD ]
Line_7 $$ while (matcher.find()) -->Line_18 $$ if (!codeBlock.contains(s)) [ CD ]
Line_3 $$ if (fileName.contains("Log")) -->Line_4 $$ return[ CD ]
Line_9 $$ while (true) -->Line_11 $$ char c = content.charAt(pos + 2)[ CD ]
