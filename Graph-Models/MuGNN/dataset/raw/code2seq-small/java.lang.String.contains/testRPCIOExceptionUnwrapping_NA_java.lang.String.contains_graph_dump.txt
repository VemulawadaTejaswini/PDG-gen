Line_2 $$ public void testRPCIOExceptionUnwrapping() -->Line_13 $$ Assert.assertTrue(t.getMessage().contains(message))[ CD ]
Line_2 $$ public void testRPCIOExceptionUnwrapping() -->Line_3 $$ String message = "DirectIOExceptionMessage"[ CD ]
Line_2 $$ public void testRPCIOExceptionUnwrapping() -->Line_5 $$ ServiceException se = new ServiceException(ioException)[ CD ]
Line_10 $$ t = thrown-->Line_13 $$ Assert.assertTrue(t.getMessage().contains(message))[ FD ]
Line_2 $$ public void testRPCIOExceptionUnwrapping() -->Line_12 $$ Assert.assertTrue(FileNotFoundException.class.isInstance(t))[ CD ]
Line_6 $$ Throwable t = null-->Line_10 $$ t = thrown[ FD ]
Line_3 $$ String message = "DirectIOExceptionMessage"-->Line_13 $$ Assert.assertTrue(t.getMessage().contains(message))[ FD ]
Line_2 $$ public void testRPCIOExceptionUnwrapping() -->Line_6 $$ Throwable t = null[ CD ]
Line_2 $$ public void testRPCIOExceptionUnwrapping() -->Line_4 $$ IOException ioException = new FileNotFoundException(message)[ CD ]
Line_10 $$ t = thrown-->Line_12 $$ Assert.assertTrue(FileNotFoundException.class.isInstance(t))[ FD ]
Line_5 $$ ServiceException se = new ServiceException(ioException)-->Line_8 $$ RPCUtil.unwrapAndThrowException(se)[ FD ]
Line_6 $$ Throwable t = null-->Line_12 $$ Assert.assertTrue(FileNotFoundException.class.isInstance(t))[ FD ]
Line_6 $$ Throwable t = null-->Line_13 $$ Assert.assertTrue(t.getMessage().contains(message))[ FD ]
