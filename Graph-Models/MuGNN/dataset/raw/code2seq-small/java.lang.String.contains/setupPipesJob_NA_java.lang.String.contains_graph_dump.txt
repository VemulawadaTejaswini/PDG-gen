Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_8 $$ if (!getIsJavaReducer(conf)) [ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_16 $$ setIfUnset(conf, MRJobConfig.MAP_OUTPUT_VALUE_CLASS, textClassname)[ CD ]
Line_14 $$ String textClassname = Text.class.getName()-->Line_15 $$ setIfUnset(conf, MRJobConfig.MAP_OUTPUT_KEY_CLASS, textClassname)[ FD ]
Line_32 $$ URI[] fileCache = DistributedCache.getCacheFiles(conf)-->Line_38 $$ fileCache = tmp[ FD ]
Line_32 $$ URI[] fileCache = DistributedCache.getCacheFiles(conf)-->Line_34 $$ fileCache = new URI[1][ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_32 $$ URI[] fileCache = DistributedCache.getCacheFiles(conf)[ CD ]
Line_33 $$ if (fileCache == null) -->Line_36 $$ URI[] tmp = new URI[fileCache.length + 1][ CD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_5 $$ setJavaPartitioner(conf, conf.getPartitionerClass())[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_27 $$ if (exec.contains("#")) [ CD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_18 $$ setIfUnset(conf, MRJobConfig.OUTPUT_VALUE_CLASS, textClassname)[ CD ]
Line_38 $$ fileCache = tmp-->Line_47 $$ DistributedCache.setCacheFiles(fileCache, conf)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_15 $$ setIfUnset(conf, MRJobConfig.MAP_OUTPUT_KEY_CLASS, textClassname)[ CD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_11 $$ conf.setOutputFormat(NullOutputFormat.class)[ FD ]
Line_14 $$ String textClassname = Text.class.getName()-->Line_17 $$ setIfUnset(conf, MRJobConfig.OUTPUT_KEY_CLASS, textClassname)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_8 $$ if (!getIsJavaReducer(conf)) [ CD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_3 $$ if (!getIsJavaMapper(conf)) [ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_6 $$ conf.setPartitionerClass(PipesPartitioner.class)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_30 $$ setIfUnset(conf, MRJobConfig.REDUCE_DEBUG_SCRIPT, defScript)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_23 $$ String exec = getExecutable(conf)[ CD ]
Line_14 $$ String textClassname = Text.class.getName()-->Line_18 $$ setIfUnset(conf, MRJobConfig.OUTPUT_VALUE_CLASS, textClassname)[ FD ]
Line_28 $$ String defScript = "$HADOOP_PREFIX/src/c++/pipes/debug/pipes-default-script"-->Line_29 $$ setIfUnset(conf, MRJobConfig.MAP_DEBUG_SCRIPT, defScript)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_19 $$ if (!getIsJavaRecordReader(conf) && !getIsJavaMapper(conf)) [ FD ]
Line_36 $$ URI[] tmp = new URI[fileCache.length + 1]-->Line_38 $$ fileCache = tmp[ FD ]
Line_34 $$ fileCache = new URI[1]-->Line_38 $$ fileCache = tmp[ FD ]
Line_8 $$ if (!getIsJavaReducer(conf)) -->Line_10 $$ if (!getIsJavaRecordWriter(conf)) [ CD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_17 $$ setIfUnset(conf, MRJobConfig.OUTPUT_KEY_CLASS, textClassname)[ FD ]
Line_19 $$ if (!getIsJavaRecordReader(conf) && !getIsJavaMapper(conf)) -->Line_21 $$ conf.setInputFormat(PipesNonJavaInputFormat.class)[ CD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_33 $$ if (fileCache == null) [ CD ]
Line_32 $$ URI[] fileCache = DistributedCache.getCacheFiles(conf)-->Line_37 $$ System.arraycopy(fileCache, 0, tmp, 1, fileCache.length)[ FD ]
Line_33 $$ if (fileCache == null) -->Line_37 $$ System.arraycopy(fileCache, 0, tmp, 1, fileCache.length)[ CD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_10 $$ if (!getIsJavaRecordWriter(conf)) [ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_20 $$ conf.setClass(Submitter.INPUT_FORMAT, conf.getInputFormat().getClass(), InputFormat.class)[ FD ]
Line_33 $$ if (fileCache == null) -->Line_34 $$ fileCache = new URI[1][ CD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_32 $$ URI[] fileCache = DistributedCache.getCacheFiles(conf)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_21 $$ conf.setInputFormat(PipesNonJavaInputFormat.class)[ FD ]
Line_27 $$ if (exec.contains("#")) -->Line_28 $$ String defScript = "$HADOOP_PREFIX/src/c++/pipes/debug/pipes-default-script"[ CD ]
Line_36 $$ URI[] tmp = new URI[fileCache.length + 1]-->Line_37 $$ System.arraycopy(fileCache, 0, tmp, 1, fileCache.length)[ FD ]
Line_27 $$ if (exec.contains("#")) -->Line_30 $$ setIfUnset(conf, MRJobConfig.REDUCE_DEBUG_SCRIPT, defScript)[ CD ]
Line_23 $$ String exec = getExecutable(conf)-->Line_27 $$ if (exec.contains("#")) [ FD ]
Line_3 $$ if (!getIsJavaMapper(conf)) -->Line_4 $$ conf.setMapRunnerClass(PipesMapRunner.class)[ CD ]
Line_19 $$ if (!getIsJavaRecordReader(conf) && !getIsJavaMapper(conf)) -->Line_20 $$ conf.setClass(Submitter.INPUT_FORMAT, conf.getInputFormat().getClass(), InputFormat.class)[ CD ]
Line_32 $$ URI[] fileCache = DistributedCache.getCacheFiles(conf)-->Line_47 $$ DistributedCache.setCacheFiles(fileCache, conf)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_9 $$ conf.setReducerClass(PipesReducer.class)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_23 $$ String exec = getExecutable(conf)[ FD ]
Line_8 $$ if (!getIsJavaReducer(conf)) -->Line_9 $$ conf.setReducerClass(PipesReducer.class)[ CD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_47 $$ DistributedCache.setCacheFiles(fileCache, conf)[ CD ]
Line_34 $$ fileCache = new URI[1]-->Line_47 $$ DistributedCache.setCacheFiles(fileCache, conf)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_47 $$ DistributedCache.setCacheFiles(fileCache, conf)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_19 $$ if (!getIsJavaRecordReader(conf) && !getIsJavaMapper(conf)) [ CD ]
Line_27 $$ if (exec.contains("#")) -->Line_29 $$ setIfUnset(conf, MRJobConfig.MAP_DEBUG_SCRIPT, defScript)[ CD ]
Line_23 $$ String exec = getExecutable(conf)-->Line_24 $$ if (exec == null) [ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_18 $$ setIfUnset(conf, MRJobConfig.OUTPUT_VALUE_CLASS, textClassname)[ FD ]
Line_43 $$ IOException ie = new IOException("Problem parsing execable URI " + exec)-->Line_44 $$ ie.initCause(e)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_3 $$ if (!getIsJavaMapper(conf)) [ CD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_17 $$ setIfUnset(conf, MRJobConfig.OUTPUT_KEY_CLASS, textClassname)[ CD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_4 $$ conf.setMapRunnerClass(PipesMapRunner.class)[ FD ]
Line_14 $$ String textClassname = Text.class.getName()-->Line_16 $$ setIfUnset(conf, MRJobConfig.MAP_OUTPUT_VALUE_CLASS, textClassname)[ FD ]
Line_34 $$ fileCache = new URI[1]-->Line_37 $$ System.arraycopy(fileCache, 0, tmp, 1, fileCache.length)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_16 $$ setIfUnset(conf, MRJobConfig.MAP_OUTPUT_VALUE_CLASS, textClassname)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_24 $$ if (exec == null) [ CD ]
Line_32 $$ URI[] fileCache = DistributedCache.getCacheFiles(conf)-->Line_33 $$ if (fileCache == null) [ FD ]
Line_3 $$ if (!getIsJavaMapper(conf)) -->Line_5 $$ setJavaPartitioner(conf, conf.getPartitionerClass())[ CD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_15 $$ setIfUnset(conf, MRJobConfig.MAP_OUTPUT_KEY_CLASS, textClassname)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_14 $$ String textClassname = Text.class.getName()[ CD ]
Line_10 $$ if (!getIsJavaRecordWriter(conf)) -->Line_11 $$ conf.setOutputFormat(NullOutputFormat.class)[ CD ]
Line_33 $$ if (fileCache == null) -->Line_38 $$ fileCache = tmp[ CD ]
Line_28 $$ String defScript = "$HADOOP_PREFIX/src/c++/pipes/debug/pipes-default-script"-->Line_30 $$ setIfUnset(conf, MRJobConfig.REDUCE_DEBUG_SCRIPT, defScript)[ FD ]
Line_2 $$ private static void setupPipesJob(JobConf conf) throws IOException -->Line_29 $$ setIfUnset(conf, MRJobConfig.MAP_DEBUG_SCRIPT, defScript)[ FD ]
Line_3 $$ if (!getIsJavaMapper(conf)) -->Line_6 $$ conf.setPartitionerClass(PipesPartitioner.class)[ CD ]
