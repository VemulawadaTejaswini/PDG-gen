Line_2 $$ public void testQuorumOutputStreamReport() throws Exception -->Line_8 $$ Assert.assertFalse("Report should be plain text", report.contains("<"))[ CD ]
Line_2 $$ public void testQuorumOutputStreamReport() throws Exception -->Line_3 $$ futureReturns(null).when(spyLoggers.get(0)).startLogSegment(Mockito.anyLong(), Mockito.eq(NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION))[ CD ]
Line_2 $$ public void testQuorumOutputStreamReport() throws Exception -->Line_4 $$ futureReturns(null).when(spyLoggers.get(1)).startLogSegment(Mockito.anyLong(), Mockito.eq(NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION))[ CD ]
Line_6 $$ QuorumOutputStream os = (QuorumOutputStream) qjm.startLogSegment(1, NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION)-->Line_7 $$ String report = os.generateReport()[ FD ]
Line_2 $$ public void testQuorumOutputStreamReport() throws Exception -->Line_6 $$ QuorumOutputStream os = (QuorumOutputStream) qjm.startLogSegment(1, NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION)[ CD ]
Line_2 $$ public void testQuorumOutputStreamReport() throws Exception -->Line_5 $$ futureReturns(null).when(spyLoggers.get(2)).startLogSegment(Mockito.anyLong(), Mockito.eq(NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION))[ CD ]
Line_7 $$ String report = os.generateReport()-->Line_8 $$ Assert.assertFalse("Report should be plain text", report.contains("<"))[ FD ]
Line_2 $$ public void testQuorumOutputStreamReport() throws Exception -->Line_7 $$ String report = os.generateReport()[ CD ]
