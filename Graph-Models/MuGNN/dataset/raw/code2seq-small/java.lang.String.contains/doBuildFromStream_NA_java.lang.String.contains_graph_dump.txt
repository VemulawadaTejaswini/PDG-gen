Line_17 $$ read = buf.readLine()-->Line_66 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_47 $$ do -->Line_48 $$ if (StringUtil.toUpperCase(read).contains(H2) && !read.toUpperCase(Locale.ENGLISH).contains("H2")) [ CD ]
Line_9 $$ if (baseUrl != null) -->Line_10 $$ data.append("<base href=\"").append(baseUrl).append("\">")[ CD ]
Line_51 $$ if (endSection.matcher(read).find() || StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) != -1) -->Line_54 $$ if (!skip) [ CD ]
Line_14 $$ String contentEncoding = null-->Line_21 $$ contentEncoding = foundEncoding[ FD ]
Line_13 $$ String read-->Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) [ FD ]
Line_47 $$ do -->Line_63 $$ appendLine(classDetails, read)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_77 $$ appendLine(data, read)[ FD ]
Line_51 $$ if (endSection.matcher(read).find() || StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) != -1) -->Line_52 $$ data.append(HTML_CLOSE)[ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_8 $$ URL baseUrl = VfsUtilCore.convertToURL(url)[ FD ]
Line_17 $$ read = buf.readLine()-->Line_77 $$ appendLine(data, read)[ FD ]
Line_13 $$ String read-->Line_47 $$ do [ FD ]
Line_51 $$ if (endSection.matcher(read).find() || StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) != -1) -->Line_53 $$ return[ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_75 $$ while (((read = buf.readLine()) != null) && !endSection.matcher(read).find() && StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) == -1) [ CD ]
Line_19 $$ String foundEncoding = parseContentEncoding(read)-->Line_21 $$ contentEncoding = foundEncoding[ FD ]
Line_34 $$ if (read == null) -->Line_43 $$ return[ CD ]
Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) -->Line_68 $$ appendLine(data, read.replaceAll(DT, DT + BR))[ FD ]
Line_59 $$ StringBuilder classDetails = new StringBuilder()-->Line_70 $$ data.append(classDetails)[ FD ]
Line_18 $$ if (read != null && searchForEncoding && read.contains("charset")) -->Line_19 $$ String foundEncoding = parseContentEncoding(read)[ CD ]
Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) -->Line_75 $$ while (((read = buf.readLine()) != null) && !endSection.matcher(read).find() && StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) == -1) [ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_3 $$ ParseSettings settings = getParseSettings(url)[ CD ]
Line_13 $$ String read-->Line_19 $$ String foundEncoding = parseContentEncoding(read)[ FD ]
Line_17 $$ read = buf.readLine()-->Line_63 $$ appendLine(classDetails, read)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_9 $$ if (baseUrl != null) [ CD ]
Line_21 $$ contentEncoding = foundEncoding-->Line_25 $$ if (input instanceof MyReader && contentEncoding != null && !contentEncoding.equalsIgnoreCase(CharsetToolkit.UTF8) && !contentEncoding.equals(((MyReader) input).getEncoding())) [ FD ]
Line_16 $$ do -->Line_17 $$ read = buf.readLine()[ CD ]
Line_13 $$ String read-->Line_34 $$ if (read == null) [ FD ]
Line_61 $$ if (reachTheEnd(data, read, classDetails, endSection))-->Line_62 $$ return[ CD ]
Line_47 $$ do -->Line_68 $$ appendLine(data, read.replaceAll(DT, DT + BR))[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_80 $$ data.append(HTML_CLOSE)[ CD ]
Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) -->Line_75 $$ while (((read = buf.readLine()) != null) && !endSection.matcher(read).find() && StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) == -1) [ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_70 $$ data.append(classDetails)[ FD ]
Line_45 $$ if (useDt) -->Line_46 $$ boolean skip = false[ CD ]
Line_13 $$ String read-->Line_16 $$ do [ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_58 $$ data.append(DL)[ FD ]
Line_15 $$ BufferedReader buf = new BufferedReader(input)-->Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) [ FD ]
Line_17 $$ read = buf.readLine()-->Line_68 $$ appendLine(data, read.replaceAll(DT, DT + BR))[ FD ]
Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) -->Line_68 $$ appendLine(data, read.replaceAll(DT, DT + BR))[ CD ]
Line_15 $$ BufferedReader buf = new BufferedReader(input)-->Line_17 $$ read = buf.readLine()[ FD ]
Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) -->Line_63 $$ appendLine(classDetails, read)[ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_34 $$ if (read == null) [ CD ]
Line_46 $$ boolean skip = false-->Line_50 $$ skip = true[ FD ]
Line_45 $$ if (useDt) -->Line_58 $$ data.append(DL)[ CD ]
Line_13 $$ String read-->Line_66 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_15 $$ BufferedReader buf = new BufferedReader(input)[ CD ]
Line_45 $$ if (useDt) -->Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) [ CD ]
Line_47 $$ do -->Line_76 $$ if (!StringUtil.toUpperCase(read).contains(HR) && !StringUtil.containsIgnoreCase(read, "<ul class=\"blockList\">") && !StringUtil.containsIgnoreCase(read, "<li class=\"blockList\">")) [ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_68 $$ appendLine(data, read.replaceAll(DT, DT + BR))[ FD ]
Line_13 $$ String read-->Line_18 $$ if (read != null && searchForEncoding && read.contains("charset")) [ FD ]
Line_66 $$ if (reachTheEnd(data, read, classDetails, endSection))-->Line_67 $$ return[ CD ]
Line_13 $$ String read-->Line_68 $$ appendLine(data, read.replaceAll(DT, DT + BR))[ FD ]
Line_13 $$ String read-->Line_77 $$ appendLine(data, read)[ FD ]
Line_17 $$ read = buf.readLine()-->Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) [ FD ]
Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) -->Line_66 $$ if (reachTheEnd(data, read, classDetails, endSection))[ CD ]
Line_45 $$ if (useDt) -->Line_73 $$ appendLine(data, read)[ CD ]
Line_13 $$ String read-->Line_75 $$ while (((read = buf.readLine()) != null) && !endSection.matcher(read).find() && StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) == -1) [ FD ]
Line_20 $$ if (foundEncoding != null) -->Line_21 $$ contentEncoding = foundEncoding[ CD ]
Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) -->Line_73 $$ appendLine(data, read)[ FD ]
Line_47 $$ do -->Line_48 $$ if (StringUtil.toUpperCase(read).contains(H2) && !read.toUpperCase(Locale.ENGLISH).contains("H2")) [ FD ]
Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) -->Line_77 $$ appendLine(data, read)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_27 $$ data.setLength(0)[ FD ]
Line_17 $$ read = buf.readLine()-->Line_51 $$ if (endSection.matcher(read).find() || StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) != -1) [ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_7 $$ data.append(HTML)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_4 $$ Pattern startSection = settings.startPattern[ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_28 $$ doBuildFromStream(url, new MyReader(((MyReader) input).myInputStream, contentEncoding), data, false, true)[ FD ]
Line_13 $$ String read-->Line_61 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_8 $$ URL baseUrl = VfsUtilCore.convertToURL(url)-->Line_9 $$ if (baseUrl != null) [ FD ]
Line_17 $$ read = buf.readLine()-->Line_75 $$ while (((read = buf.readLine()) != null) && !endSection.matcher(read).find() && StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) == -1) [ FD ]
Line_38 $$ final MyReader reader = contentEncoding != null ? new MyReader(((MyReader) input).myInputStream, contentEncoding) : new MyReader(((MyReader) input).myInputStream, ((MyReader) input).getEncoding())-->Line_39 $$ doBuildFromStream(url, reader, data, false, false)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_14 $$ String contentEncoding = null[ CD ]
Line_50 $$ skip = true-->Line_54 $$ if (!skip) [ FD ]
Line_15 $$ BufferedReader buf = new BufferedReader(input)-->Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) [ FD ]
Line_15 $$ BufferedReader buf = new BufferedReader(input)-->Line_47 $$ do [ FD ]
Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) -->Line_73 $$ appendLine(data, read)[ FD ]
Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) -->Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) [ FD ]
Line_16 $$ do -->Line_18 $$ if (read != null && searchForEncoding && read.contains("charset")) [ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_80 $$ data.append(HTML_CLOSE)[ FD ]
Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) -->Line_68 $$ appendLine(data, read.replaceAll(DT, DT + BR))[ FD ]
Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) -->Line_61 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_13 $$ String read-->Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) [ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_5 $$ Pattern endSection = settings.endPattern[ CD ]
Line_75 $$ while (((read = buf.readLine()) != null) && !endSection.matcher(read).find() && StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) == -1) -->Line_76 $$ if (!StringUtil.toUpperCase(read).contains(HR) && !StringUtil.containsIgnoreCase(read, "<ul class=\"blockList\">") && !StringUtil.containsIgnoreCase(read, "<li class=\"blockList\">")) [ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_49 $$ data.append(H2)[ FD ]
Line_17 $$ read = buf.readLine()-->Line_18 $$ if (read != null && searchForEncoding && read.contains("charset")) [ FD ]
Line_13 $$ String read-->Line_55 $$ appendLine(data, read)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_12 $$ data.append("<style type=\"text/css\">" + "  ul.inheritance [ FD ]
Line_15 $$ BufferedReader buf = new BufferedReader(input)-->Line_75 $$ while (((read = buf.readLine()) != null) && !endSection.matcher(read).find() && StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) == -1) [ FD ]
Line_17 $$ read = buf.readLine()-->Line_47 $$ do [ FD ]
Line_17 $$ read = buf.readLine()-->Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) [ FD ]
Line_45 $$ if (useDt) -->Line_71 $$ data.append(P)[ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_16 $$ do [ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_71 $$ data.append(P)[ FD ]
Line_47 $$ do -->Line_77 $$ appendLine(data, read)[ FD ]
Line_45 $$ if (useDt) -->Line_70 $$ data.append(classDetails)[ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_25 $$ if (input instanceof MyReader && contentEncoding != null && !contentEncoding.equalsIgnoreCase(CharsetToolkit.UTF8) && !contentEncoding.equals(((MyReader) input).getEncoding())) [ CD ]
Line_75 $$ while (((read = buf.readLine()) != null) && !endSection.matcher(read).find() && StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) == -1) -->Line_76 $$ if (!StringUtil.toUpperCase(read).contains(HR) && !StringUtil.containsIgnoreCase(read, "<ul class=\"blockList\">") && !StringUtil.containsIgnoreCase(read, "<li class=\"blockList\">")) [ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_45 $$ if (useDt) [ CD ]
Line_47 $$ do -->Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) [ FD ]
Line_17 $$ read = buf.readLine()-->Line_19 $$ String foundEncoding = parseContentEncoding(read)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_52 $$ data.append(HTML_CLOSE)[ FD ]
Line_59 $$ StringBuilder classDetails = new StringBuilder()-->Line_61 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_47 $$ do -->Line_66 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_19 $$ String foundEncoding = parseContentEncoding(read)-->Line_20 $$ if (foundEncoding != null) [ FD ]
Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) -->Line_76 $$ if (!StringUtil.toUpperCase(read).contains(HR) && !StringUtil.containsIgnoreCase(read, "<ul class=\"blockList\">") && !StringUtil.containsIgnoreCase(read, "<li class=\"blockList\">")) [ FD ]
Line_48 $$ if (StringUtil.toUpperCase(read).contains(H2) && !read.toUpperCase(Locale.ENGLISH).contains("H2")) -->Line_50 $$ skip = true[ CD ]
Line_59 $$ StringBuilder classDetails = new StringBuilder()-->Line_66 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_39 $$ doBuildFromStream(url, reader, data, false, false)[ FD ]
Line_76 $$ if (!StringUtil.toUpperCase(read).contains(HR) && !StringUtil.containsIgnoreCase(read, "<ul class=\"blockList\">") && !StringUtil.containsIgnoreCase(read, "<li class=\"blockList\">")) -->Line_77 $$ appendLine(data, read)[ CD ]
Line_47 $$ do -->Line_55 $$ appendLine(data, read)[ FD ]
Line_25 $$ if (input instanceof MyReader && contentEncoding != null && !contentEncoding.equalsIgnoreCase(CharsetToolkit.UTF8) && !contentEncoding.equals(((MyReader) input).getEncoding())) -->Line_32 $$ return[ CD ]
Line_47 $$ do -->Line_75 $$ while (((read = buf.readLine()) != null) && !endSection.matcher(read).find() && StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) == -1) [ FD ]
Line_5 $$ Pattern endSection = settings.endPattern-->Line_66 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_75 $$ while (((read = buf.readLine()) != null) && !endSection.matcher(read).find() && StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) == -1) -->Line_77 $$ appendLine(data, read)[ FD ]
Line_13 $$ String read-->Line_76 $$ if (!StringUtil.toUpperCase(read).contains(HR) && !StringUtil.containsIgnoreCase(read, "<ul class=\"blockList\">") && !StringUtil.containsIgnoreCase(read, "<li class=\"blockList\">")) [ FD ]
Line_5 $$ Pattern endSection = settings.endPattern-->Line_51 $$ if (endSection.matcher(read).find() || StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) != -1) [ FD ]
Line_17 $$ read = buf.readLine()-->Line_76 $$ if (!StringUtil.toUpperCase(read).contains(HR) && !StringUtil.containsIgnoreCase(read, "<ul class=\"blockList\">") && !StringUtil.containsIgnoreCase(read, "<li class=\"blockList\">")) [ FD ]
Line_48 $$ if (StringUtil.toUpperCase(read).contains(H2) && !read.toUpperCase(Locale.ENGLISH).contains("H2")) -->Line_49 $$ data.append(H2)[ CD ]
Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) -->Line_76 $$ if (!StringUtil.toUpperCase(read).contains(HR) && !StringUtil.containsIgnoreCase(read, "<ul class=\"blockList\">") && !StringUtil.containsIgnoreCase(read, "<li class=\"blockList\">")) [ FD ]
Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) -->Line_63 $$ appendLine(classDetails, read)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_61 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) -->Line_66 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) -->Line_61 $$ if (reachTheEnd(data, read, classDetails, endSection))[ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_10 $$ data.append("<base href=\"").append(baseUrl).append("\">")[ FD ]
Line_17 $$ read = buf.readLine()-->Line_61 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_13 $$ String read-->Line_51 $$ if (endSection.matcher(read).find() || StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) != -1) [ FD ]
Line_34 $$ if (read == null) -->Line_35 $$ data.setLength(0)[ CD ]
Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) -->Line_66 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_47 $$ do -->Line_73 $$ appendLine(data, read)[ FD ]
Line_48 $$ if (StringUtil.toUpperCase(read).contains(H2) && !read.toUpperCase(Locale.ENGLISH).contains("H2")) -->Line_51 $$ if (endSection.matcher(read).find() || StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) != -1) [ CD ]
Line_46 $$ boolean skip = false-->Line_54 $$ if (!skip) [ FD ]
Line_60 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) -->Line_77 $$ appendLine(data, read)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_3 $$ ParseSettings settings = getParseSettings(url)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_66 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_5 $$ Pattern endSection = settings.endPattern-->Line_75 $$ while (((read = buf.readLine()) != null) && !endSection.matcher(read).find() && StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) == -1) [ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_8 $$ URL baseUrl = VfsUtilCore.convertToURL(url)[ CD ]
Line_17 $$ read = buf.readLine()-->Line_34 $$ if (read == null) [ FD ]
Line_18 $$ if (read != null && searchForEncoding && read.contains("charset")) -->Line_20 $$ if (foundEncoding != null) [ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_7 $$ data.append(HTML)[ CD ]
Line_17 $$ read = buf.readLine()-->Line_48 $$ if (StringUtil.toUpperCase(read).contains(H2) && !read.toUpperCase(Locale.ENGLISH).contains("H2")) [ FD ]
Line_13 $$ String read-->Line_48 $$ if (StringUtil.toUpperCase(read).contains(H2) && !read.toUpperCase(Locale.ENGLISH).contains("H2")) [ FD ]
Line_45 $$ if (useDt) -->Line_59 $$ StringBuilder classDetails = new StringBuilder()[ CD ]
Line_45 $$ if (useDt) -->Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) [ CD ]
Line_47 $$ do -->Line_65 $$ while (((read = buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) [ FD ]
Line_17 $$ read = buf.readLine()-->Line_16 $$ do [ FD ]
Line_14 $$ String contentEncoding = null-->Line_25 $$ if (input instanceof MyReader && contentEncoding != null && !contentEncoding.equalsIgnoreCase(CharsetToolkit.UTF8) && !contentEncoding.equals(((MyReader) input).getEncoding())) [ FD ]
Line_5 $$ Pattern endSection = settings.endPattern-->Line_61 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_47 $$ do -->Line_51 $$ if (endSection.matcher(read).find() || StringUtil.indexOfIgnoreCase(read, GREATEST_END_SECTION, 0) != -1) [ FD ]
Line_17 $$ read = buf.readLine()-->Line_55 $$ appendLine(data, read)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_6 $$ boolean useDt = settings.useDt[ CD ]
Line_54 $$ if (!skip) -->Line_55 $$ appendLine(data, read)[ CD ]
Line_13 $$ String read-->Line_63 $$ appendLine(classDetails, read)[ FD ]
Line_8 $$ URL baseUrl = VfsUtilCore.convertToURL(url)-->Line_10 $$ data.append("<base href=\"").append(baseUrl).append("\">")[ FD ]
Line_45 $$ if (useDt) -->Line_47 $$ do [ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_55 $$ appendLine(data, read)[ FD ]
Line_34 $$ if (read == null) -->Line_36 $$ if (matchStart && !settings.forcePatternSearch && input instanceof MyReader) [ CD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_35 $$ data.setLength(0)[ FD ]
Line_4 $$ Pattern startSection = settings.startPattern-->Line_16 $$ do [ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_73 $$ appendLine(data, read)[ FD ]
Line_17 $$ read = buf.readLine()-->Line_73 $$ appendLine(data, read)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_12 $$ data.append("<style type=\"text/css\">" + "  ul.inheritance [ CD ]
Line_47 $$ do -->Line_61 $$ if (reachTheEnd(data, read, classDetails, endSection))[ FD ]
Line_13 $$ String read-->Line_17 $$ read = buf.readLine()[ FD ]
Line_59 $$ StringBuilder classDetails = new StringBuilder()-->Line_63 $$ appendLine(classDetails, read)[ FD ]
Line_13 $$ String read-->Line_73 $$ appendLine(data, read)[ FD ]
Line_2 $$ protected void doBuildFromStream(final String url, Reader input, final StringBuilder data, boolean searchForEncoding, boolean matchStart) throws IOException -->Line_13 $$ String read[ CD ]
