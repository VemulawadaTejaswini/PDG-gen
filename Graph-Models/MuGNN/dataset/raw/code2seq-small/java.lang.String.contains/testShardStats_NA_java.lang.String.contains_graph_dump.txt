Line_2 $$ public void testShardStats() throws IOException -->Line_28 $$ assumeFalse("Some path weirdness on windows", Constants.WINDOWS)[ CD ]
Line_18 $$ XContentBuilder builder = XContentFactory.jsonBuilder()-->Line_21 $$ builder.endObject()[ FD ]
Line_15 $$ StreamInput in = StreamInput.wrap(out.bytes())-->Line_16 $$ stats = ShardStats.readShardStats(in)[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_23 $$ StringBuilder expectedSubSequence = new StringBuilder("\"shard_path\":[ CD ]
Line_7 $$ IndexShard shard = test.getShardOrNull(0)-->Line_24 $$ expectedSubSequence.append(shard.shardPath().getRootStatePath().toString())[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_11 $$ assertEquals(shard.shardPath().isCustomDataPath(), stats.isCustomDataPath())[ CD ]
Line_7 $$ IndexShard shard = test.getShardOrNull(0)-->Line_8 $$ ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(shard, new CommonStatsFlags()), shard.commitStats())[ FD ]
Line_8 $$ ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(shard, new CommonStatsFlags()), shard.commitStats())-->Line_20 $$ stats.toXContent(builder, EMPTY_PARAMS)[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_10 $$ assertEquals(shard.shardPath().getRootStatePath().toString(), stats.getStatePath())[ CD ]
Line_7 $$ IndexShard shard = test.getShardOrNull(0)-->Line_11 $$ assertEquals(shard.shardPath().isCustomDataPath(), stats.isCustomDataPath())[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_26 $$ expectedSubSequence.append(shard.shardPath().getRootDataPath().toString())[ CD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_24 $$ expectedSubSequence.append(shard.shardPath().getRootStatePath().toString())[ CD ]
Line_23 $$ StringBuilder expectedSubSequence = new StringBuilder("\"shard_path\":-->Line_26 $$ expectedSubSequence.append(shard.shardPath().getRootDataPath().toString())[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_4 $$ ensureGreen()[ CD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_5 $$ IndicesService indicesService = getInstanceFromNode(IndicesService.class)[ CD ]
Line_12 $$ if (randomBoolean() || true) -->Line_15 $$ StreamInput in = StreamInput.wrap(out.bytes())[ CD ]
Line_23 $$ StringBuilder expectedSubSequence = new StringBuilder("\"shard_path\":-->Line_24 $$ expectedSubSequence.append(shard.shardPath().getRootStatePath().toString())[ FD ]
Line_18 $$ XContentBuilder builder = XContentFactory.jsonBuilder()-->Line_19 $$ builder.startObject()[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_25 $$ expectedSubSequence.append("\",\"data_path\":\"")[ CD ]
Line_7 $$ IndexShard shard = test.getShardOrNull(0)-->Line_27 $$ expectedSubSequence.append("\",\"is_custom_data_path\":").append(shard.shardPath().isCustomDataPath()).append("}")[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_22 $$ String xContent = builder.string()[ CD ]
Line_8 $$ ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(shard, new CommonStatsFlags()), shard.commitStats())-->Line_16 $$ stats = ShardStats.readShardStats(in)[ FD ]
Line_8 $$ ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(shard, new CommonStatsFlags()), shard.commitStats())-->Line_9 $$ assertEquals(shard.shardPath().getRootDataPath().toString(), stats.getDataPath())[ FD ]
Line_7 $$ IndexShard shard = test.getShardOrNull(0)-->Line_10 $$ assertEquals(shard.shardPath().getRootStatePath().toString(), stats.getStatePath())[ FD ]
Line_13 $$ BytesStreamOutput out = new BytesStreamOutput()-->Line_14 $$ stats.writeTo(out)[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_19 $$ builder.startObject()[ CD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_27 $$ expectedSubSequence.append("\",\"is_custom_data_path\":").append(shard.shardPath().isCustomDataPath()).append("}")[ CD ]
Line_6 $$ IndexService test = indicesService.indexService("test")-->Line_7 $$ IndexShard shard = test.getShardOrNull(0)[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_29 $$ assertTrue(xContent.contains(expectedSubSequence))[ CD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_18 $$ XContentBuilder builder = XContentFactory.jsonBuilder()[ CD ]
Line_18 $$ XContentBuilder builder = XContentFactory.jsonBuilder()-->Line_20 $$ stats.toXContent(builder, EMPTY_PARAMS)[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_3 $$ createIndex("test")[ CD ]
Line_13 $$ BytesStreamOutput out = new BytesStreamOutput()-->Line_15 $$ StreamInput in = StreamInput.wrap(out.bytes())[ FD ]
Line_12 $$ if (randomBoolean() || true) -->Line_13 $$ BytesStreamOutput out = new BytesStreamOutput()[ CD ]
Line_8 $$ ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(shard, new CommonStatsFlags()), shard.commitStats())-->Line_11 $$ assertEquals(shard.shardPath().isCustomDataPath(), stats.isCustomDataPath())[ FD ]
Line_23 $$ StringBuilder expectedSubSequence = new StringBuilder("\"shard_path\":-->Line_25 $$ expectedSubSequence.append("\",\"data_path\":\"")[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_8 $$ ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(shard, new CommonStatsFlags()), shard.commitStats())[ CD ]
Line_12 $$ if (randomBoolean() || true) -->Line_14 $$ stats.writeTo(out)[ CD ]
Line_8 $$ ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(shard, new CommonStatsFlags()), shard.commitStats())-->Line_10 $$ assertEquals(shard.shardPath().getRootStatePath().toString(), stats.getStatePath())[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_7 $$ IndexShard shard = test.getShardOrNull(0)[ CD ]
Line_8 $$ ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(shard, new CommonStatsFlags()), shard.commitStats())-->Line_14 $$ stats.writeTo(out)[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_20 $$ stats.toXContent(builder, EMPTY_PARAMS)[ CD ]
Line_22 $$ String xContent = builder.string()-->Line_29 $$ assertTrue(xContent.contains(expectedSubSequence))[ FD ]
Line_7 $$ IndexShard shard = test.getShardOrNull(0)-->Line_26 $$ expectedSubSequence.append(shard.shardPath().getRootDataPath().toString())[ FD ]
Line_16 $$ stats = ShardStats.readShardStats(in)-->Line_20 $$ stats.toXContent(builder, EMPTY_PARAMS)[ FD ]
Line_23 $$ StringBuilder expectedSubSequence = new StringBuilder("\"shard_path\":-->Line_29 $$ assertTrue(xContent.contains(expectedSubSequence))[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_12 $$ if (randomBoolean() || true) [ CD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_6 $$ IndexService test = indicesService.indexService("test")[ CD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_21 $$ builder.endObject()[ CD ]
Line_5 $$ IndicesService indicesService = getInstanceFromNode(IndicesService.class)-->Line_6 $$ IndexService test = indicesService.indexService("test")[ FD ]
Line_2 $$ public void testShardStats() throws IOException -->Line_9 $$ assertEquals(shard.shardPath().getRootDataPath().toString(), stats.getDataPath())[ CD ]
Line_23 $$ StringBuilder expectedSubSequence = new StringBuilder("\"shard_path\":-->Line_27 $$ expectedSubSequence.append("\",\"is_custom_data_path\":").append(shard.shardPath().isCustomDataPath()).append("}")[ FD ]
Line_18 $$ XContentBuilder builder = XContentFactory.jsonBuilder()-->Line_22 $$ String xContent = builder.string()[ FD ]
Line_12 $$ if (randomBoolean() || true) -->Line_16 $$ stats = ShardStats.readShardStats(in)[ CD ]
Line_7 $$ IndexShard shard = test.getShardOrNull(0)-->Line_9 $$ assertEquals(shard.shardPath().getRootDataPath().toString(), stats.getDataPath())[ FD ]
