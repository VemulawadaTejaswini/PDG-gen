Line_12 $$ PrintWriter pWriter = new PrintWriter(data)-->Line_20 $$ pWriter.flush()[ FD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_10 $$ when(ctx.getJob(any(JobId.class))).thenReturn(job)[ CD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_9 $$ when(job.loadConfFile()).thenReturn(configuration)[ CD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_8 $$ when(job.getConfFile()).thenReturn(path)[ CD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_19 $$ configurationBlock.render(html)[ CD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_5 $$ Path path = new Path("conf")[ CD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_15 $$ pWriter.flush()[ CD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_16 $$ assertTrue(data.toString().contains("Sorry, can't do anything without a JobID"))[ CD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_17 $$ configurationBlock.addParameter(AMParams.JOB_ID, "job_01_01")[ CD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_20 $$ pWriter.flush()[ CD ]
Line_4 $$ Job job = mock(Job.class)-->Line_8 $$ when(job.getConfFile()).thenReturn(path)[ FD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_3 $$ AppContext ctx = mock(AppContext.class)[ CD ]
Line_3 $$ AppContext ctx = mock(AppContext.class)-->Line_10 $$ when(ctx.getJob(any(JobId.class))).thenReturn(job)[ FD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_13 $$ Block html = new BlockForTest(new HtmlBlockForTest(), pWriter, 0, false)[ CD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_22 $$ assertTrue(data.toString().contains("Value for test"))[ CD ]
Line_5 $$ Path path = new Path("conf")-->Line_8 $$ when(job.getConfFile()).thenReturn(path)[ FD ]
Line_12 $$ PrintWriter pWriter = new PrintWriter(data)-->Line_15 $$ pWriter.flush()[ FD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_21 $$ assertTrue(data.toString().contains("Key for test"))[ CD ]
Line_11 $$ ConfBlockForTest configurationBlock = new ConfBlockForTest(ctx)-->Line_17 $$ configurationBlock.addParameter(AMParams.JOB_ID, "job_01_01")[ FD ]
Line_4 $$ Job job = mock(Job.class)-->Line_10 $$ when(ctx.getJob(any(JobId.class))).thenReturn(job)[ FD ]
Line_11 $$ ConfBlockForTest configurationBlock = new ConfBlockForTest(ctx)-->Line_19 $$ configurationBlock.render(html)[ FD ]
Line_6 $$ Configuration configuration = new Configuration()-->Line_9 $$ when(job.loadConfFile()).thenReturn(configuration)[ FD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_4 $$ Job job = mock(Job.class)[ CD ]
Line_4 $$ Job job = mock(Job.class)-->Line_9 $$ when(job.loadConfFile()).thenReturn(configuration)[ FD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_7 $$ configuration.set("Key for test", "Value for test")[ CD ]
Line_6 $$ Configuration configuration = new Configuration()-->Line_7 $$ configuration.set("Key for test", "Value for test")[ FD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_11 $$ ConfBlockForTest configurationBlock = new ConfBlockForTest(ctx)[ CD ]
Line_11 $$ ConfBlockForTest configurationBlock = new ConfBlockForTest(ctx)-->Line_14 $$ configurationBlock.render(html)[ FD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_14 $$ configurationBlock.render(html)[ CD ]
Line_13 $$ Block html = new BlockForTest(new HtmlBlockForTest(), pWriter, 0, false)-->Line_19 $$ configurationBlock.render(html)[ FD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_6 $$ Configuration configuration = new Configuration()[ CD ]
Line_13 $$ Block html = new BlockForTest(new HtmlBlockForTest(), pWriter, 0, false)-->Line_14 $$ configurationBlock.render(html)[ FD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_18 $$ data.reset()[ CD ]
Line_2 $$ public void testConfigurationBlock() throws Exception -->Line_12 $$ PrintWriter pWriter = new PrintWriter(data)[ CD ]
