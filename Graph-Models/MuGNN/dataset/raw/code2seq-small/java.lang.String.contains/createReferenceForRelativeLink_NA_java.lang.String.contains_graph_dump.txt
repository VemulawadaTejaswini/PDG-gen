Line_24 $$ packageName = pathWithPackage.second-->Line_26 $$ String qualifiedTargetName = packageName.isEmpty() ? relativeLink : packageName + "." + relativeLink[ FD ]
Line_37 $$ targetElement = method-->Line_52 $$ return DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL + JavaDocUtil.getReferenceText(targetElement.getProject(), targetElement) + (fragment == null ? "" : DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL_REF_SEPARATOR + fragment)[ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_10 $$ if (relativeLink.isEmpty()) [ FD ]
Line_5 $$ if (hashPosition >= 0) -->Line_7 $$ relativeLink = relativeLink.substring(0, hashPosition)[ CD ]
Line_6 $$ fragment = relativeLink.substring(hashPosition + 1)-->Line_46 $$ fragment = null[ FD ]
Line_34 $$ for (PsiMethod method : ((PsiClass) targetElement).getMethods()) -->Line_35 $$ Set<String> signatures = JavaDocumentationProvider.getHtmlMethodSignatures(method, true)[ FD ]
Line_36 $$ if (signatures.contains(fragment)) -->Line_37 $$ targetElement = method[ CD ]
Line_36 $$ if (signatures.contains(fragment)) -->Line_38 $$ fragment = null[ CD ]
Line_6 $$ fragment = relativeLink.substring(hashPosition + 1)-->Line_38 $$ fragment = null[ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_10 $$ if (relativeLink.isEmpty()) [ CD ]
Line_21 $$ if (pathWithPackage == null)-->Line_22 $$ return null[ CD ]
Line_35 $$ Set<String> signatures = JavaDocumentationProvider.getHtmlMethodSignatures(method, true)-->Line_36 $$ if (signatures.contains(fragment)) [ FD ]
Line_17 $$ String packageName = getPackageName(contextElement)-->Line_18 $$ if (packageName == null)[ FD ]
Line_11 $$ targetElement = (contextElement instanceof PsiField || contextElement instanceof PsiMethod) ? ((PsiMember) contextElement).getContainingClass() : contextElement-->Line_28 $$ targetElement = "package-summary".equals(StringUtil.getShortName(qualifiedTargetName)) ? javaPsiFacade.findPackage(StringUtil.getPackageName(qualifiedTargetName)) : javaPsiFacade.findClass(qualifiedTargetName, contextElement.getResolveScope())[ FD ]
Line_10 $$ if (relativeLink.isEmpty()) -->Line_28 $$ targetElement = "package-summary".equals(StringUtil.getShortName(qualifiedTargetName)) ? javaPsiFacade.findPackage(StringUtil.getPackageName(qualifiedTargetName)) : javaPsiFacade.findClass(qualifiedTargetName, contextElement.getResolveScope())[ CD ]
Line_6 $$ fragment = relativeLink.substring(hashPosition + 1)-->Line_33 $$ if (fragment.contains("-") || fragment.contains("(")) [ FD ]
Line_10 $$ if (relativeLink.isEmpty()) -->Line_13 $$ if (!relativeLink.toLowerCase().endsWith(".htm") && !relativeLink.toLowerCase().endsWith(".html")) [ CD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_32 $$ if (fragment != null && targetElement instanceof PsiClass) [ CD ]
Line_9 $$ PsiElement targetElement-->Line_28 $$ targetElement = "package-summary".equals(StringUtil.getShortName(qualifiedTargetName)) ? javaPsiFacade.findPackage(StringUtil.getPackageName(qualifiedTargetName)) : javaPsiFacade.findClass(qualifiedTargetName, contextElement.getResolveScope())[ FD ]
Line_17 $$ String packageName = getPackageName(contextElement)-->Line_24 $$ packageName = pathWithPackage.second[ FD ]
Line_28 $$ targetElement = "package-summary".equals(StringUtil.getShortName(qualifiedTargetName)) ? javaPsiFacade.findPackage(StringUtil.getPackageName(qualifiedTargetName)) : javaPsiFacade.findClass(qualifiedTargetName, contextElement.getResolveScope())-->Line_45 $$ targetElement = field[ FD ]
Line_3 $$ String fragment = null-->Line_6 $$ fragment = relativeLink.substring(hashPosition + 1)[ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_7 $$ relativeLink = relativeLink.substring(0, hashPosition)[ FD ]
Line_11 $$ targetElement = (contextElement instanceof PsiField || contextElement instanceof PsiMethod) ? ((PsiMember) contextElement).getContainingClass() : contextElement-->Line_37 $$ targetElement = method[ FD ]
Line_9 $$ PsiElement targetElement-->Line_52 $$ return DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL + JavaDocUtil.getReferenceText(targetElement.getProject(), targetElement) + (fragment == null ? "" : DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL_REF_SEPARATOR + fragment)[ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_52 $$ return DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL + JavaDocUtil.getReferenceText(targetElement.getProject(), targetElement) + (fragment == null ? "" : DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL_REF_SEPARATOR + fragment)[ CD ]
Line_3 $$ String fragment = null-->Line_38 $$ fragment = null[ FD ]
Line_11 $$ targetElement = (contextElement instanceof PsiField || contextElement instanceof PsiMethod) ? ((PsiMember) contextElement).getContainingClass() : contextElement-->Line_52 $$ return DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL + JavaDocUtil.getReferenceText(targetElement.getProject(), targetElement) + (fragment == null ? "" : DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL_REF_SEPARATOR + fragment)[ FD ]
Line_28 $$ targetElement = "package-summary".equals(StringUtil.getShortName(qualifiedTargetName)) ? javaPsiFacade.findPackage(StringUtil.getPackageName(qualifiedTargetName)) : javaPsiFacade.findClass(qualifiedTargetName, contextElement.getResolveScope())-->Line_52 $$ return DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL + JavaDocUtil.getReferenceText(targetElement.getProject(), targetElement) + (fragment == null ? "" : DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL_REF_SEPARATOR + fragment)[ FD ]
Line_3 $$ String fragment = null-->Line_36 $$ if (signatures.contains(fragment)) [ FD ]
Line_3 $$ String fragment = null-->Line_44 $$ if (fragment.equals(field.getName())) [ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_30 $$ if (targetElement == null)[ CD ]
Line_30 $$ if (targetElement == null)-->Line_31 $$ return null[ CD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_27 $$ JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(contextElement.getProject())[ FD ]
Line_10 $$ if (relativeLink.isEmpty()) -->Line_17 $$ String packageName = getPackageName(contextElement)[ CD ]
Line_6 $$ fragment = relativeLink.substring(hashPosition + 1)-->Line_36 $$ if (signatures.contains(fragment)) [ FD ]
Line_11 $$ targetElement = (contextElement instanceof PsiField || contextElement instanceof PsiMethod) ? ((PsiMember) contextElement).getContainingClass() : contextElement-->Line_30 $$ if (targetElement == null)[ FD ]
Line_10 $$ if (relativeLink.isEmpty()) -->Line_21 $$ if (pathWithPackage == null)[ CD ]
Line_9 $$ PsiElement targetElement-->Line_11 $$ targetElement = (contextElement instanceof PsiField || contextElement instanceof PsiMethod) ? ((PsiMember) contextElement).getContainingClass() : contextElement[ FD ]
Line_9 $$ PsiElement targetElement-->Line_30 $$ if (targetElement == null)[ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_28 $$ targetElement = "package-summary".equals(StringUtil.getShortName(qualifiedTargetName)) ? javaPsiFacade.findPackage(StringUtil.getPackageName(qualifiedTargetName)) : javaPsiFacade.findClass(qualifiedTargetName, contextElement.getResolveScope())[ FD ]
Line_20 $$ Couple<String> pathWithPackage = removeParentReferences(Couple.of(relativeLink, packageName))-->Line_21 $$ if (pathWithPackage == null)[ FD ]
Line_26 $$ String qualifiedTargetName = packageName.isEmpty() ? relativeLink : packageName + "." + relativeLink-->Line_28 $$ targetElement = "package-summary".equals(StringUtil.getShortName(qualifiedTargetName)) ? javaPsiFacade.findPackage(StringUtil.getPackageName(qualifiedTargetName)) : javaPsiFacade.findClass(qualifiedTargetName, contextElement.getResolveScope())[ FD ]
Line_6 $$ fragment = relativeLink.substring(hashPosition + 1)-->Line_44 $$ if (fragment.equals(field.getName())) [ FD ]
Line_10 $$ if (relativeLink.isEmpty()) -->Line_11 $$ targetElement = (contextElement instanceof PsiField || contextElement instanceof PsiMethod) ? ((PsiMember) contextElement).getContainingClass() : contextElement[ CD ]
Line_10 $$ if (relativeLink.isEmpty()) -->Line_16 $$ relativeLink = relativeLink.substring(0, relativeLink.lastIndexOf('.'))[ CD ]
Line_11 $$ targetElement = (contextElement instanceof PsiField || contextElement instanceof PsiMethod) ? ((PsiMember) contextElement).getContainingClass() : contextElement-->Line_45 $$ targetElement = field[ FD ]
Line_10 $$ if (relativeLink.isEmpty()) -->Line_18 $$ if (packageName == null)[ CD ]
Line_34 $$ for (PsiMethod method : ((PsiClass) targetElement).getMethods()) -->Line_37 $$ targetElement = method[ FD ]
Line_27 $$ JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(contextElement.getProject())-->Line_28 $$ targetElement = "package-summary".equals(StringUtil.getShortName(qualifiedTargetName)) ? javaPsiFacade.findPackage(StringUtil.getPackageName(qualifiedTargetName)) : javaPsiFacade.findClass(qualifiedTargetName, contextElement.getResolveScope())[ FD ]
Line_13 $$ if (!relativeLink.toLowerCase().endsWith(".htm") && !relativeLink.toLowerCase().endsWith(".html")) -->Line_14 $$ return null[ CD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_5 $$ if (hashPosition >= 0) [ CD ]
Line_10 $$ if (relativeLink.isEmpty()) -->Line_25 $$ relativeLink = relativeLink.replace('/', '.')[ CD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_9 $$ PsiElement targetElement[ CD ]
Line_10 $$ if (relativeLink.isEmpty()) -->Line_20 $$ Couple<String> pathWithPackage = removeParentReferences(Couple.of(relativeLink, packageName))[ CD ]
Line_28 $$ targetElement = "package-summary".equals(StringUtil.getShortName(qualifiedTargetName)) ? javaPsiFacade.findPackage(StringUtil.getPackageName(qualifiedTargetName)) : javaPsiFacade.findClass(qualifiedTargetName, contextElement.getResolveScope())-->Line_30 $$ if (targetElement == null)[ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_16 $$ relativeLink = relativeLink.substring(0, relativeLink.lastIndexOf('.'))[ FD ]
Line_17 $$ String packageName = getPackageName(contextElement)-->Line_20 $$ Couple<String> pathWithPackage = removeParentReferences(Couple.of(relativeLink, packageName))[ FD ]
Line_38 $$ fragment = null-->Line_44 $$ if (fragment.equals(field.getName())) [ FD ]
Line_37 $$ targetElement = method-->Line_45 $$ targetElement = field[ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_17 $$ String packageName = getPackageName(contextElement)[ FD ]
Line_3 $$ String fragment = null-->Line_46 $$ fragment = null[ FD ]
Line_43 $$ for (PsiField field : ((PsiClass) targetElement).getFields()) -->Line_44 $$ if (fragment.equals(field.getName())) [ FD ]
Line_38 $$ fragment = null-->Line_46 $$ fragment = null[ FD ]
Line_9 $$ PsiElement targetElement-->Line_45 $$ targetElement = field[ FD ]
Line_18 $$ if (packageName == null)-->Line_19 $$ return null[ CD ]
Line_32 $$ if (fragment != null && targetElement instanceof PsiClass) -->Line_33 $$ if (fragment.contains("-") || fragment.contains("(")) [ CD ]
Line_44 $$ if (fragment.equals(field.getName())) -->Line_46 $$ fragment = null[ CD ]
Line_10 $$ if (relativeLink.isEmpty()) -->Line_27 $$ JavaPsiFacade javaPsiFacade = JavaPsiFacade.getInstance(contextElement.getProject())[ CD ]
Line_4 $$ int hashPosition = relativeLink.indexOf('#')-->Line_5 $$ if (hashPosition >= 0) [ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_13 $$ if (!relativeLink.toLowerCase().endsWith(".htm") && !relativeLink.toLowerCase().endsWith(".html")) [ FD ]
Line_5 $$ if (hashPosition >= 0) -->Line_6 $$ fragment = relativeLink.substring(hashPosition + 1)[ CD ]
Line_17 $$ String packageName = getPackageName(contextElement)-->Line_26 $$ String qualifiedTargetName = packageName.isEmpty() ? relativeLink : packageName + "." + relativeLink[ FD ]
Line_9 $$ PsiElement targetElement-->Line_37 $$ targetElement = method[ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_25 $$ relativeLink = relativeLink.replace('/', '.')[ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_4 $$ int hashPosition = relativeLink.indexOf('#')[ CD ]
Line_3 $$ String fragment = null-->Line_33 $$ if (fragment.contains("-") || fragment.contains("(")) [ FD ]
Line_45 $$ targetElement = field-->Line_52 $$ return DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL + JavaDocUtil.getReferenceText(targetElement.getProject(), targetElement) + (fragment == null ? "" : DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL_REF_SEPARATOR + fragment)[ FD ]
Line_4 $$ int hashPosition = relativeLink.indexOf('#')-->Line_7 $$ relativeLink = relativeLink.substring(0, hashPosition)[ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_20 $$ Couple<String> pathWithPackage = removeParentReferences(Couple.of(relativeLink, packageName))[ FD ]
Line_10 $$ if (relativeLink.isEmpty()) -->Line_24 $$ packageName = pathWithPackage.second[ CD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_3 $$ String fragment = null[ CD ]
Line_43 $$ for (PsiField field : ((PsiClass) targetElement).getFields()) -->Line_45 $$ targetElement = field[ FD ]
Line_10 $$ if (relativeLink.isEmpty()) -->Line_26 $$ String qualifiedTargetName = packageName.isEmpty() ? relativeLink : packageName + "." + relativeLink[ CD ]
Line_28 $$ targetElement = "package-summary".equals(StringUtil.getShortName(qualifiedTargetName)) ? javaPsiFacade.findPackage(StringUtil.getPackageName(qualifiedTargetName)) : javaPsiFacade.findClass(qualifiedTargetName, contextElement.getResolveScope())-->Line_37 $$ targetElement = method[ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_4 $$ int hashPosition = relativeLink.indexOf('#')[ FD ]
Line_2 $$ static String createReferenceForRelativeLink(@NotNull @NonNls String relativeLink, @NotNull PsiElement contextElement) -->Line_6 $$ fragment = relativeLink.substring(hashPosition + 1)[ FD ]
Line_44 $$ if (fragment.equals(field.getName())) -->Line_45 $$ targetElement = field[ CD ]
