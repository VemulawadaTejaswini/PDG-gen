Line_15 $$ String out = writer.toString()-->Line_18 $$ System.out.println(out)[ FD ]
Line_5 $$ while (true) -->Line_6 $$ s = TimedOutTestsListener.buildDeadlockInfo()[ CD ]
Line_2 $$ public void testThreadDumpAndDeadlocks() throws Exception -->Line_11 $$ Assert.assertEquals(3, countStringOccurrences(s, "BLOCKED"))[ CD ]
Line_2 $$ public void testThreadDumpAndDeadlocks() throws Exception -->Line_14 $$ new TimedOutTestsListener(new PrintWriter(writer)).testFailure(failure)[ CD ]
Line_2 $$ public void testThreadDumpAndDeadlocks() throws Exception -->Line_17 $$ Assert.assertTrue(out.contains("DEADLOCKS DETECTED"))[ CD ]
Line_12 $$ Failure failure = new Failure(null, new Exception(TimedOutTestsListener.TEST_TIMED_OUT_PREFIX))-->Line_14 $$ new TimedOutTestsListener(new PrintWriter(writer)).testFailure(failure)[ FD ]
Line_2 $$ public void testThreadDumpAndDeadlocks() throws Exception -->Line_18 $$ System.out.println(out)[ CD ]
Line_2 $$ public void testThreadDumpAndDeadlocks() throws Exception -->Line_13 $$ StringWriter writer = new StringWriter()[ CD ]
Line_6 $$ s = TimedOutTestsListener.buildDeadlockInfo()-->Line_7 $$ if (s != null)[ FD ]
Line_5 $$ while (true) -->Line_9 $$ Thread.sleep(100)[ CD ]
Line_6 $$ s = TimedOutTestsListener.buildDeadlockInfo()-->Line_11 $$ Assert.assertEquals(3, countStringOccurrences(s, "BLOCKED"))[ FD ]
Line_15 $$ String out = writer.toString()-->Line_17 $$ Assert.assertTrue(out.contains("DEADLOCKS DETECTED"))[ FD ]
Line_4 $$ String s = null-->Line_6 $$ s = TimedOutTestsListener.buildDeadlockInfo()[ FD ]
Line_2 $$ public void testThreadDumpAndDeadlocks() throws Exception -->Line_4 $$ String s = null[ CD ]
Line_2 $$ public void testThreadDumpAndDeadlocks() throws Exception -->Line_5 $$ while (true) [ CD ]
Line_2 $$ public void testThreadDumpAndDeadlocks() throws Exception -->Line_15 $$ String out = writer.toString()[ CD ]
Line_2 $$ public void testThreadDumpAndDeadlocks() throws Exception -->Line_16 $$ Assert.assertTrue(out.contains("THREAD DUMP"))[ CD ]
Line_5 $$ while (true) -->Line_7 $$ if (s != null)[ CD ]
Line_13 $$ StringWriter writer = new StringWriter()-->Line_15 $$ String out = writer.toString()[ FD ]
Line_4 $$ String s = null-->Line_7 $$ if (s != null)[ FD ]
Line_4 $$ String s = null-->Line_11 $$ Assert.assertEquals(3, countStringOccurrences(s, "BLOCKED"))[ FD ]
Line_2 $$ public void testThreadDumpAndDeadlocks() throws Exception -->Line_12 $$ Failure failure = new Failure(null, new Exception(TimedOutTestsListener.TEST_TIMED_OUT_PREFIX))[ CD ]
Line_15 $$ String out = writer.toString()-->Line_16 $$ Assert.assertTrue(out.contains("THREAD DUMP"))[ FD ]
