Line_7 $$ content = ExportImportHelperUtil.replaceExportContentReferences(_portletDataContextExport, _referrerStagedModel, content, true)-->Line_10 $$ Assert.assertFalse(content.contains(_stagingGroup.getFriendlyURL()))[ FD ]
Line_2 $$ public void testExportLayoutReferencesWithoutContext() throws Exception -->Line_6 $$ String content = replaceParameters(getContent("layout_references.txt"), _fileEntry)[ CD ]
Line_6 $$ String content = replaceParameters(getContent("layout_references.txt"), _fileEntry)-->Line_8 $$ Assert.assertFalse(content.contains(PropsValues.LAYOUT_FRIENDLY_URL_PRIVATE_GROUP_SERVLET_MAPPING))[ FD ]
Line_2 $$ public void testExportLayoutReferencesWithoutContext() throws Exception -->Line_13 $$ setFinalStaticField(ExportImportHelperImpl.class.getDeclaredField("_PRIVATE_USER_SERVLET_MAPPING"), PropsValues.LAYOUT_FRIENDLY_URL_PRIVATE_USER_SERVLET_MAPPING + StringPool.SLASH)[ CD ]
Line_2 $$ public void testExportLayoutReferencesWithoutContext() throws Exception -->Line_10 $$ Assert.assertFalse(content.contains(_stagingGroup.getFriendlyURL()))[ CD ]
Line_2 $$ public void testExportLayoutReferencesWithoutContext() throws Exception -->Line_7 $$ content = ExportImportHelperUtil.replaceExportContentReferences(_portletDataContextExport, _referrerStagedModel, content, true)[ CD ]
Line_2 $$ public void testExportLayoutReferencesWithoutContext() throws Exception -->Line_9 $$ Assert.assertFalse(content.contains(PropsValues.LAYOUT_FRIENDLY_URL_PUBLIC_SERVLET_MAPPING))[ CD ]
Line_2 $$ public void testExportLayoutReferencesWithoutContext() throws Exception -->Line_8 $$ Assert.assertFalse(content.contains(PropsValues.LAYOUT_FRIENDLY_URL_PRIVATE_GROUP_SERVLET_MAPPING))[ CD ]
Line_7 $$ content = ExportImportHelperUtil.replaceExportContentReferences(_portletDataContextExport, _referrerStagedModel, content, true)-->Line_11 $$ Assert.assertFalse(content.contains("/en/en"))[ FD ]
Line_2 $$ public void testExportLayoutReferencesWithoutContext() throws Exception -->Line_12 $$ setFinalStaticField(PropsValues.class.getDeclaredField("LAYOUT_FRIENDLY_URL_PRIVATE_USER_SERVLET_MAPPING"), _OLD_LAYOUT_FRIENDLY_URL_PRIVATE_USER_SERVLET_MAPPING)[ CD ]
Line_6 $$ String content = replaceParameters(getContent("layout_references.txt"), _fileEntry)-->Line_7 $$ content = ExportImportHelperUtil.replaceExportContentReferences(_portletDataContextExport, _referrerStagedModel, content, true)[ FD ]
Line_6 $$ String content = replaceParameters(getContent("layout_references.txt"), _fileEntry)-->Line_10 $$ Assert.assertFalse(content.contains(_stagingGroup.getFriendlyURL()))[ FD ]
Line_2 $$ public void testExportLayoutReferencesWithoutContext() throws Exception -->Line_5 $$ setFinalStaticField(ExportImportHelperImpl.class.getDeclaredField("_PRIVATE_USER_SERVLET_MAPPING"), "/en/")[ CD ]
Line_2 $$ public void testExportLayoutReferencesWithoutContext() throws Exception -->Line_11 $$ Assert.assertFalse(content.contains("/en/en"))[ CD ]
Line_6 $$ String content = replaceParameters(getContent("layout_references.txt"), _fileEntry)-->Line_9 $$ Assert.assertFalse(content.contains(PropsValues.LAYOUT_FRIENDLY_URL_PUBLIC_SERVLET_MAPPING))[ FD ]
Line_7 $$ content = ExportImportHelperUtil.replaceExportContentReferences(_portletDataContextExport, _referrerStagedModel, content, true)-->Line_9 $$ Assert.assertFalse(content.contains(PropsValues.LAYOUT_FRIENDLY_URL_PUBLIC_SERVLET_MAPPING))[ FD ]
Line_7 $$ content = ExportImportHelperUtil.replaceExportContentReferences(_portletDataContextExport, _referrerStagedModel, content, true)-->Line_8 $$ Assert.assertFalse(content.contains(PropsValues.LAYOUT_FRIENDLY_URL_PRIVATE_GROUP_SERVLET_MAPPING))[ FD ]
Line_2 $$ public void testExportLayoutReferencesWithoutContext() throws Exception -->Line_4 $$ setFinalStaticField(PropsValues.class.getField("LAYOUT_FRIENDLY_URL_PRIVATE_USER_SERVLET_MAPPING"), "/en")[ CD ]
Line_6 $$ String content = replaceParameters(getContent("layout_references.txt"), _fileEntry)-->Line_11 $$ Assert.assertFalse(content.contains("/en/en"))[ FD ]
