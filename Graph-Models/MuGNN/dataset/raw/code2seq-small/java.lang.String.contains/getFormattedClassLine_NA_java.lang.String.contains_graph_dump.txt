Line_7 $$ classSingleLine = indent + classSingleLine-->Line_11 $$ lines.add(classSingleLine)[ FD ]
Line_20 $$ x = newLine.indexOf(" implements ", x + 1)-->Line_22 $$ x = y[ FD ]
Line_38 $$ x = -1-->Line_44 $$ x = newLine.length()[ FD ]
Line_2 $$ protected String getFormattedClassLine(String indent, String classLine) -->Line_3 $$ while (classLine.contains(StringPool.TAB + StringPool.SPACE)) [ CD ]
Line_18 $$ int y = newLine.indexOf(" extends ", x + 1)-->Line_22 $$ x = y[ FD ]
Line_30 $$ newIndent = newIndent + StringPool.TAB-->Line_33 $$ newLine = newIndent + newLine.substring(x + 1)[ FD ]
Line_17 $$ while (true) -->Line_28 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) [ CD ]
Line_38 $$ x = -1-->Line_27 $$ String linePart = newLine.substring(0, x)[ FD ]
Line_8 $$ List<String> lines = new ArrayList()-->Line_41 $$ if (lines.isEmpty()) [ FD ]
Line_9 $$ while (true) -->Line_10 $$ if (getLineLength(classSingleLine) <= _MAX_LINE_LENGTH) [ CD ]
Line_9 $$ while (true) -->Line_17 $$ while (true) [ CD ]
Line_70 $$ formattedClassLine = "\n" + line-->Line_72 $$ formattedClassLine = formattedClassLine + "\n" + line[ FD ]
Line_22 $$ x = y-->Line_27 $$ String linePart = newLine.substring(0, x)[ FD ]
Line_20 $$ x = newLine.indexOf(" implements ", x + 1)-->Line_46 $$ x = newLine.lastIndexOf(", ", x - 1)[ FD ]
Line_30 $$ newIndent = newIndent + StringPool.TAB-->Line_58 $$ newLine = newIndent + newLine.substring(x + 2)[ FD ]
Line_38 $$ x = -1-->Line_24 $$ if (x == -1) [ FD ]
Line_18 $$ int y = newLine.indexOf(" extends ", x + 1)-->Line_19 $$ if (y == -1) [ FD ]
Line_8 $$ List<String> lines = new ArrayList()-->Line_11 $$ lines.add(classSingleLine)[ FD ]
Line_4 $$ classLine = StringUtil.replace(classLine, StringPool.TAB + StringPool.SPACE, StringPool.TAB)-->Line_6 $$ String classSingleLine = StringUtil.replace(classLine.substring(1), new String[] [ FD ]
Line_47 $$ if (x == -1) -->Line_48 $$ return null[ CD ]
Line_27 $$ String linePart = newLine.substring(0, x)-->Line_52 $$ lines.add(linePart)[ FD ]
Line_9 $$ while (true) -->Line_41 $$ if (lines.isEmpty()) [ CD ]
Line_22 $$ x = y-->Line_47 $$ if (x == -1) [ FD ]
Line_22 $$ x = y-->Line_24 $$ if (x == -1) [ FD ]
Line_68 $$ for (String line : lines) -->Line_70 $$ formattedClassLine = "\n" + line[ FD ]
Line_58 $$ newLine = newIndent + newLine.substring(x + 2)-->Line_50 $$ String linePart = newLine.substring(0, x + 1)[ FD ]
Line_51 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) -->Line_63 $$ x = newLine.length()[ CD ]
Line_15 $$ String newLine = classSingleLine-->Line_27 $$ String linePart = newLine.substring(0, x)[ FD ]
Line_16 $$ int x = -1-->Line_24 $$ if (x == -1) [ FD ]
Line_67 $$ String formattedClassLine = null-->Line_72 $$ formattedClassLine = formattedClassLine + "\n" + line[ FD ]
Line_58 $$ newLine = newIndent + newLine.substring(x + 2)-->Line_59 $$ if (getLineLength(newLine) <= _MAX_LINE_LENGTH) [ FD ]
Line_19 $$ if (y == -1) -->Line_22 $$ x = y[ CD ]
Line_67 $$ String formattedClassLine = null-->Line_70 $$ formattedClassLine = "\n" + line[ FD ]
Line_34 $$ if (getLineLength(newLine) <= _MAX_LINE_LENGTH) -->Line_35 $$ lines.add(newLine)[ CD ]
Line_20 $$ x = newLine.indexOf(" implements ", x + 1)-->Line_63 $$ x = newLine.length()[ FD ]
Line_28 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) -->Line_33 $$ newLine = newIndent + newLine.substring(x + 1)[ CD ]
Line_44 $$ x = newLine.length()-->Line_47 $$ if (x == -1) [ FD ]
Line_58 $$ newLine = newIndent + newLine.substring(x + 2)-->Line_60 $$ lines.add(newLine)[ FD ]
Line_8 $$ List<String> lines = new ArrayList()-->Line_35 $$ lines.add(newLine)[ FD ]
Line_6 $$ String classSingleLine = StringUtil.replace(classLine.substring(1), new String[] -->Line_11 $$ lines.add(classSingleLine)[ FD ]
Line_22 $$ x = y-->Line_46 $$ x = newLine.lastIndexOf(", ", x - 1)[ FD ]
Line_38 $$ x = -1-->Line_47 $$ if (x == -1) [ FD ]
Line_29 $$ if (lines.isEmpty()) -->Line_30 $$ newIndent = newIndent + StringPool.TAB[ CD ]
Line_45 $$ while (true) -->Line_46 $$ x = newLine.lastIndexOf(", ", x - 1)[ CD ]
Line_17 $$ while (true) -->Line_24 $$ if (x == -1) [ CD ]
Line_14 $$ String newIndent = indent-->Line_30 $$ newIndent = newIndent + StringPool.TAB[ FD ]
Line_16 $$ int x = -1-->Line_22 $$ x = y[ FD ]
Line_15 $$ String newLine = classSingleLine-->Line_50 $$ String linePart = newLine.substring(0, x + 1)[ FD ]
Line_8 $$ List<String> lines = new ArrayList()-->Line_60 $$ lines.add(newLine)[ FD ]
Line_2 $$ protected String getFormattedClassLine(String indent, String classLine) -->Line_8 $$ List<String> lines = new ArrayList()[ CD ]
Line_15 $$ String newLine = classSingleLine-->Line_18 $$ int y = newLine.indexOf(" extends ", x + 1)[ FD ]
Line_56 $$ newIndent = newIndent + "\t\t   "-->Line_58 $$ newLine = newIndent + newLine.substring(x + 2)[ FD ]
Line_17 $$ while (true) -->Line_27 $$ String linePart = newLine.substring(0, x)[ CD ]
Line_14 $$ String newIndent = indent-->Line_54 $$ newIndent = newIndent + "\t\t"[ FD ]
Line_67 $$ String formattedClassLine = null-->Line_69 $$ if (formattedClassLine == null) [ FD ]
Line_22 $$ x = y-->Line_44 $$ x = newLine.length()[ FD ]
Line_46 $$ x = newLine.lastIndexOf(", ", x - 1)-->Line_47 $$ if (x == -1) [ FD ]
Line_15 $$ String newLine = classSingleLine-->Line_34 $$ if (getLineLength(newLine) <= _MAX_LINE_LENGTH) [ FD ]
Line_53 $$ if (linePart.contains("\textends")) -->Line_54 $$ newIndent = newIndent + "\t\t"[ CD ]
Line_19 $$ if (y == -1) -->Line_20 $$ x = newLine.indexOf(" implements ", x + 1)[ CD ]
Line_46 $$ x = newLine.lastIndexOf(", ", x - 1)-->Line_63 $$ x = newLine.length()[ FD ]
Line_33 $$ newLine = newIndent + newLine.substring(x + 1)-->Line_20 $$ x = newLine.indexOf(" implements ", x + 1)[ FD ]
Line_41 $$ if (lines.isEmpty()) -->Line_42 $$ return null[ CD ]
Line_51 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) -->Line_52 $$ lines.add(linePart)[ CD ]
Line_51 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) -->Line_58 $$ newLine = newIndent + newLine.substring(x + 2)[ CD ]
Line_9 $$ while (true) -->Line_15 $$ String newLine = classSingleLine[ CD ]
Line_33 $$ newLine = newIndent + newLine.substring(x + 1)-->Line_59 $$ if (getLineLength(newLine) <= _MAX_LINE_LENGTH) [ FD ]
Line_6 $$ String classSingleLine = StringUtil.replace(classLine.substring(1), new String[] -->Line_10 $$ if (getLineLength(classSingleLine) <= _MAX_LINE_LENGTH) [ FD ]
Line_45 $$ while (true) -->Line_51 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) [ CD ]
Line_16 $$ int x = -1-->Line_63 $$ x = newLine.length()[ FD ]
Line_58 $$ newLine = newIndent + newLine.substring(x + 2)-->Line_46 $$ x = newLine.lastIndexOf(", ", x - 1)[ FD ]
Line_8 $$ List<String> lines = new ArrayList()-->Line_29 $$ if (lines.isEmpty()) [ FD ]
Line_9 $$ while (true) -->Line_14 $$ String newIndent = indent[ CD ]
Line_16 $$ int x = -1-->Line_27 $$ String linePart = newLine.substring(0, x)[ FD ]
Line_51 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) -->Line_53 $$ if (linePart.contains("\textends")) [ CD ]
Line_15 $$ String newLine = classSingleLine-->Line_60 $$ lines.add(newLine)[ FD ]
Line_15 $$ String newLine = classSingleLine-->Line_35 $$ lines.add(newLine)[ FD ]
Line_58 $$ newLine = newIndent + newLine.substring(x + 2)-->Line_63 $$ x = newLine.length()[ FD ]
Line_56 $$ newIndent = newIndent + "\t\t   "-->Line_54 $$ newIndent = newIndent + "\t\t"[ FD ]
Line_2 $$ protected String getFormattedClassLine(String indent, String classLine) -->Line_6 $$ String classSingleLine = StringUtil.replace(classLine.substring(1), new String[] [ FD ]
Line_38 $$ x = -1-->Line_46 $$ x = newLine.lastIndexOf(", ", x - 1)[ FD ]
Line_55 $$ if (linePart.contains("\timplements")) -->Line_56 $$ newIndent = newIndent + "\t\t   "[ CD ]
Line_54 $$ newIndent = newIndent + "\t\t"-->Line_58 $$ newLine = newIndent + newLine.substring(x + 2)[ FD ]
Line_14 $$ String newIndent = indent-->Line_58 $$ newLine = newIndent + newLine.substring(x + 2)[ FD ]
Line_15 $$ String newLine = classSingleLine-->Line_59 $$ if (getLineLength(newLine) <= _MAX_LINE_LENGTH) [ FD ]
Line_15 $$ String newLine = classSingleLine-->Line_63 $$ x = newLine.length()[ FD ]
Line_14 $$ String newIndent = indent-->Line_56 $$ newIndent = newIndent + "\t\t   "[ FD ]
Line_20 $$ x = newLine.indexOf(" implements ", x + 1)-->Line_24 $$ if (x == -1) [ FD ]
Line_16 $$ int x = -1-->Line_44 $$ x = newLine.length()[ FD ]
Line_17 $$ while (true) -->Line_18 $$ int y = newLine.indexOf(" extends ", x + 1)[ CD ]
Line_16 $$ int x = -1-->Line_20 $$ x = newLine.indexOf(" implements ", x + 1)[ FD ]
Line_51 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) -->Line_59 $$ if (getLineLength(newLine) <= _MAX_LINE_LENGTH) [ CD ]
Line_9 $$ while (true) -->Line_44 $$ x = newLine.length()[ CD ]
Line_2 $$ protected String getFormattedClassLine(String indent, String classLine) -->Line_4 $$ classLine = StringUtil.replace(classLine, StringPool.TAB + StringPool.SPACE, StringPool.TAB)[ FD ]
Line_17 $$ while (true) -->Line_19 $$ if (y == -1) [ CD ]
Line_6 $$ String classSingleLine = StringUtil.replace(classLine.substring(1), new String[] -->Line_7 $$ classSingleLine = indent + classSingleLine[ FD ]
Line_69 $$ if (formattedClassLine == null) -->Line_70 $$ formattedClassLine = "\n" + line[ CD ]
Line_2 $$ protected String getFormattedClassLine(String indent, String classLine) -->Line_75 $$ return formattedClassLine[ CD ]
Line_33 $$ newLine = newIndent + newLine.substring(x + 1)-->Line_18 $$ int y = newLine.indexOf(" extends ", x + 1)[ FD ]
Line_16 $$ int x = -1-->Line_38 $$ x = -1[ FD ]
Line_27 $$ String linePart = newLine.substring(0, x)-->Line_32 $$ lines.add(linePart)[ FD ]
Line_8 $$ List<String> lines = new ArrayList()-->Line_52 $$ lines.add(linePart)[ FD ]
Line_27 $$ String linePart = newLine.substring(0, x)-->Line_55 $$ if (linePart.contains("\timplements")) [ FD ]
Line_15 $$ String newLine = classSingleLine-->Line_46 $$ x = newLine.lastIndexOf(", ", x - 1)[ FD ]
Line_50 $$ String linePart = newLine.substring(0, x + 1)-->Line_52 $$ lines.add(linePart)[ FD ]
Line_33 $$ newLine = newIndent + newLine.substring(x + 1)-->Line_44 $$ x = newLine.length()[ FD ]
Line_7 $$ classSingleLine = indent + classSingleLine-->Line_10 $$ if (getLineLength(classSingleLine) <= _MAX_LINE_LENGTH) [ FD ]
Line_33 $$ newLine = newIndent + newLine.substring(x + 1)-->Line_46 $$ x = newLine.lastIndexOf(", ", x - 1)[ FD ]
Line_27 $$ String linePart = newLine.substring(0, x)-->Line_28 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) [ FD ]
Line_28 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) -->Line_29 $$ if (lines.isEmpty()) [ CD ]
Line_15 $$ String newLine = classSingleLine-->Line_33 $$ newLine = newIndent + newLine.substring(x + 1)[ FD ]
Line_22 $$ x = y-->Line_38 $$ x = -1[ FD ]
Line_50 $$ String linePart = newLine.substring(0, x + 1)-->Line_55 $$ if (linePart.contains("\timplements")) [ FD ]
Line_2 $$ protected String getFormattedClassLine(String indent, String classLine) -->Line_7 $$ classSingleLine = indent + classSingleLine[ FD ]
Line_30 $$ newIndent = newIndent + StringPool.TAB-->Line_54 $$ newIndent = newIndent + "\t\t"[ FD ]
Line_2 $$ protected String getFormattedClassLine(String indent, String classLine) -->Line_7 $$ classSingleLine = indent + classSingleLine[ CD ]
Line_33 $$ newLine = newIndent + newLine.substring(x + 1)-->Line_34 $$ if (getLineLength(newLine) <= _MAX_LINE_LENGTH) [ FD ]
Line_20 $$ x = newLine.indexOf(" implements ", x + 1)-->Line_27 $$ String linePart = newLine.substring(0, x)[ FD ]
Line_15 $$ String newLine = classSingleLine-->Line_20 $$ x = newLine.indexOf(" implements ", x + 1)[ FD ]
Line_8 $$ List<String> lines = new ArrayList()-->Line_32 $$ lines.add(linePart)[ FD ]
Line_45 $$ while (true) -->Line_47 $$ if (x == -1) [ CD ]
Line_69 $$ if (formattedClassLine == null) -->Line_72 $$ formattedClassLine = formattedClassLine + "\n" + line[ CD ]
Line_33 $$ newLine = newIndent + newLine.substring(x + 1)-->Line_50 $$ String linePart = newLine.substring(0, x + 1)[ FD ]
Line_9 $$ while (true) -->Line_16 $$ int x = -1[ CD ]
Line_30 $$ newIndent = newIndent + StringPool.TAB-->Line_56 $$ newIndent = newIndent + "\t\t   "[ FD ]
Line_2 $$ protected String getFormattedClassLine(String indent, String classLine) -->Line_67 $$ String formattedClassLine = null[ CD ]
Line_63 $$ x = newLine.length()-->Line_47 $$ if (x == -1) [ FD ]
Line_28 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) -->Line_34 $$ if (getLineLength(newLine) <= _MAX_LINE_LENGTH) [ CD ]
Line_2 $$ protected String getFormattedClassLine(String indent, String classLine) -->Line_3 $$ while (classLine.contains(StringPool.TAB + StringPool.SPACE)) [ FD ]
Line_15 $$ String newLine = classSingleLine-->Line_58 $$ newLine = newIndent + newLine.substring(x + 2)[ FD ]
Line_14 $$ String newIndent = indent-->Line_33 $$ newLine = newIndent + newLine.substring(x + 1)[ FD ]
Line_38 $$ x = -1-->Line_63 $$ x = newLine.length()[ FD ]
Line_20 $$ x = newLine.indexOf(" implements ", x + 1)-->Line_38 $$ x = -1[ FD ]
Line_33 $$ newLine = newIndent + newLine.substring(x + 1)-->Line_63 $$ x = newLine.length()[ FD ]
Line_53 $$ if (linePart.contains("\textends")) -->Line_55 $$ if (linePart.contains("\timplements")) [ CD ]
Line_59 $$ if (getLineLength(newLine) <= _MAX_LINE_LENGTH) -->Line_60 $$ lines.add(newLine)[ CD ]
Line_22 $$ x = y-->Line_63 $$ x = newLine.length()[ FD ]
Line_20 $$ x = newLine.indexOf(" implements ", x + 1)-->Line_44 $$ x = newLine.length()[ FD ]
Line_3 $$ while (classLine.contains(StringPool.TAB + StringPool.SPACE)) -->Line_4 $$ classLine = StringUtil.replace(classLine, StringPool.TAB + StringPool.SPACE, StringPool.TAB)[ CD ]
Line_27 $$ String linePart = newLine.substring(0, x)-->Line_53 $$ if (linePart.contains("\textends")) [ FD ]
Line_20 $$ x = newLine.indexOf(" implements ", x + 1)-->Line_47 $$ if (x == -1) [ FD ]
Line_44 $$ x = newLine.length()-->Line_63 $$ x = newLine.length()[ FD ]
Line_54 $$ newIndent = newIndent + "\t\t"-->Line_56 $$ newIndent = newIndent + "\t\t   "[ FD ]
Line_33 $$ newLine = newIndent + newLine.substring(x + 1)-->Line_35 $$ lines.add(newLine)[ FD ]
Line_50 $$ String linePart = newLine.substring(0, x + 1)-->Line_51 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) [ FD ]
Line_68 $$ for (String line : lines) -->Line_72 $$ formattedClassLine = formattedClassLine + "\n" + line[ FD ]
Line_45 $$ while (true) -->Line_50 $$ String linePart = newLine.substring(0, x + 1)[ CD ]
Line_2 $$ protected String getFormattedClassLine(String indent, String classLine) -->Line_6 $$ String classSingleLine = StringUtil.replace(classLine.substring(1), new String[] [ CD ]
Line_33 $$ newLine = newIndent + newLine.substring(x + 1)-->Line_58 $$ newLine = newIndent + newLine.substring(x + 2)[ FD ]
Line_28 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) -->Line_38 $$ x = -1[ CD ]
Line_33 $$ newLine = newIndent + newLine.substring(x + 1)-->Line_60 $$ lines.add(newLine)[ FD ]
Line_16 $$ int x = -1-->Line_46 $$ x = newLine.lastIndexOf(", ", x - 1)[ FD ]
Line_28 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) -->Line_32 $$ lines.add(linePart)[ CD ]
Line_50 $$ String linePart = newLine.substring(0, x + 1)-->Line_53 $$ if (linePart.contains("\textends")) [ FD ]
Line_10 $$ if (getLineLength(classSingleLine) <= _MAX_LINE_LENGTH) -->Line_11 $$ lines.add(classSingleLine)[ CD ]
Line_16 $$ int x = -1-->Line_47 $$ if (x == -1) [ FD ]
Line_4 $$ classLine = StringUtil.replace(classLine, StringPool.TAB + StringPool.SPACE, StringPool.TAB)-->Line_3 $$ while (classLine.contains(StringPool.TAB + StringPool.SPACE)) [ FD ]
Line_27 $$ String linePart = newLine.substring(0, x)-->Line_51 $$ if ((StringUtil.count(linePart, StringPool.GREATER_THAN) == StringUtil.count(linePart, StringPool.LESS_THAN)) && (getLineLength(linePart) <= _MAX_LINE_LENGTH)) [ FD ]
Line_9 $$ while (true) -->Line_45 $$ while (true) [ CD ]
Line_44 $$ x = newLine.length()-->Line_46 $$ x = newLine.lastIndexOf(", ", x - 1)[ FD ]
Line_33 $$ newLine = newIndent + newLine.substring(x + 1)-->Line_27 $$ String linePart = newLine.substring(0, x)[ FD ]
Line_15 $$ String newLine = classSingleLine-->Line_44 $$ x = newLine.length()[ FD ]
