Line_2 $$ protected String getLocator(String locator, String locatorKey, Map<String, String> variables) throws Exception -->Line_20 $$ throw new Exception("Variable \"" + variableKey + "\" found in \"" + pathLocators.get(locatorKey) + "\" is not set")[ FD ]
Line_2 $$ protected String getLocator(String locator, String locatorKey, Map<String, String> variables) throws Exception -->Line_3 $$ if (locator != null) [ CD ]
Line_6 $$ if (pathLocators.containsKey(locatorKey)) -->Line_8 $$ if (locatorValue.contains("$[ CD ]
Line_11 $$ Matcher matcher = pattern.matcher(locatorValue)-->Line_13 $$ String variable = matcher.group()[ FD ]
Line_7 $$ String locatorValue = pathLocators.get(locatorKey)-->Line_8 $$ if (locatorValue.contains("$[ FD ]
Line_2 $$ protected String getLocator(String locator, String locatorKey, Map<String, String> variables) throws Exception -->Line_6 $$ if (pathLocators.containsKey(locatorKey)) [ CD ]
Line_13 $$ String variable = matcher.group()-->Line_15 $$ int y = variable.indexOf("}")[ FD ]
Line_8 $$ if (locatorValue.contains("$-->Line_10 $$ Pattern pattern = Pattern.compile(regex)[ CD ]
Line_15 $$ int y = variable.indexOf("}")-->Line_16 $$ String variableKey = variable.substring(x + 2, y)[ FD ]
Line_2 $$ protected String getLocator(String locator, String locatorKey, Map<String, String> variables) throws Exception -->Line_17 $$ if (variables.containsKey(variableKey)) [ FD ]
Line_16 $$ String variableKey = variable.substring(x + 2, y)-->Line_18 $$ locatorValue = locatorValue.replaceFirst(regex, variables.get(variableKey))[ FD ]
Line_12 $$ while (matcher.find()) -->Line_17 $$ if (variables.containsKey(variableKey)) [ CD ]
Line_12 $$ while (matcher.find()) -->Line_14 $$ int x = variable.indexOf("$[ CD ]
Line_13 $$ String variable = matcher.group()-->Line_14 $$ int x = variable.indexOf("$[ FD ]
Line_12 $$ while (matcher.find()) -->Line_16 $$ String variableKey = variable.substring(x + 2, y)[ CD ]
Line_9 $$ String regex = "\\$\\-->Line_10 $$ Pattern pattern = Pattern.compile(regex)[ FD ]
Line_12 $$ while (matcher.find()) -->Line_13 $$ String variable = matcher.group()[ CD ]
Line_7 $$ String locatorValue = pathLocators.get(locatorKey)-->Line_18 $$ locatorValue = locatorValue.replaceFirst(regex, variables.get(variableKey))[ FD ]
Line_8 $$ if (locatorValue.contains("$-->Line_11 $$ Matcher matcher = pattern.matcher(locatorValue)[ CD ]
Line_2 $$ protected String getLocator(String locator, String locatorKey, Map<String, String> variables) throws Exception -->Line_7 $$ String locatorValue = pathLocators.get(locatorKey)[ FD ]
Line_7 $$ String locatorValue = pathLocators.get(locatorKey)-->Line_11 $$ Matcher matcher = pattern.matcher(locatorValue)[ FD ]
Line_12 $$ while (matcher.find()) -->Line_15 $$ int y = variable.indexOf("}")[ CD ]
Line_17 $$ if (variables.containsKey(variableKey)) -->Line_18 $$ locatorValue = locatorValue.replaceFirst(regex, variables.get(variableKey))[ CD ]
Line_2 $$ protected String getLocator(String locator, String locatorKey, Map<String, String> variables) throws Exception -->Line_6 $$ if (pathLocators.containsKey(locatorKey)) [ FD ]
Line_6 $$ if (pathLocators.containsKey(locatorKey)) -->Line_7 $$ String locatorValue = pathLocators.get(locatorKey)[ CD ]
Line_8 $$ if (locatorValue.contains("$-->Line_12 $$ while (matcher.find()) [ CD ]
Line_16 $$ String variableKey = variable.substring(x + 2, y)-->Line_17 $$ if (variables.containsKey(variableKey)) [ FD ]
Line_6 $$ if (pathLocators.containsKey(locatorKey)) -->Line_24 $$ return locatorValue[ CD ]
Line_13 $$ String variable = matcher.group()-->Line_16 $$ String variableKey = variable.substring(x + 2, y)[ FD ]
Line_9 $$ String regex = "\\$\\-->Line_18 $$ locatorValue = locatorValue.replaceFirst(regex, variables.get(variableKey))[ FD ]
Line_3 $$ if (locator != null) -->Line_4 $$ return locator[ CD ]
Line_10 $$ Pattern pattern = Pattern.compile(regex)-->Line_11 $$ Matcher matcher = pattern.matcher(locatorValue)[ FD ]
Line_2 $$ protected String getLocator(String locator, String locatorKey, Map<String, String> variables) throws Exception -->Line_18 $$ locatorValue = locatorValue.replaceFirst(regex, variables.get(variableKey))[ FD ]
Line_8 $$ if (locatorValue.contains("$-->Line_9 $$ String regex = "\\$\\[ CD ]
Line_11 $$ Matcher matcher = pattern.matcher(locatorValue)-->Line_12 $$ while (matcher.find()) [ FD ]
Line_2 $$ protected String getLocator(String locator, String locatorKey, Map<String, String> variables) throws Exception -->Line_3 $$ if (locator != null) [ FD ]
Line_2 $$ protected String getLocator(String locator, String locatorKey, Map<String, String> variables) throws Exception -->Line_26 $$ return locatorKey[ CD ]
