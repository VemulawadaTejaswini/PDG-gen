Line_20 $$ int i = str.indexOf(macroNameWithParamStart)-->Line_23 $$ if (j > i) [ FD ]
Line_14 $$ expanded = ""-->Line_13 $$ if (expanded == null) [ FD ]
Line_6 $$ Macro macro = macros.next()-->Line_12 $$ String expanded = macro.expand(dataContext)[ FD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_12 $$ String expanded = macro.expand(dataContext)[ FD ]
Line_10 $$ String macroNameWithParamStart = "$" + macro.getName() + "("-->Line_22 $$ int j = str.indexOf(macroNameWithParamEnd, i + macroNameWithParamStart.length())[ FD ]
Line_23 $$ if (j > i) -->Line_31 $$ toReplace.put(macroNameWithParamStart + param + macroNameWithParamEnd, expanded)[ CD ]
Line_26 $$ toReplace = new THashMap<String, String>()-->Line_25 $$ if (toReplace == null)[ FD ]
Line_28 $$ if (expanded == null) -->Line_29 $$ expanded = ""[ CD ]
Line_39 $$ str = StringUtil.replace(str, entry.getKey(), entry.getValue())-->Line_11 $$ if (str.contains(name)) [ FD ]
Line_32 $$ i = j + macroNameWithParamEnd.length()-->Line_21 $$ while (i != -1) [ FD ]
Line_32 $$ i = j + macroNameWithParamEnd.length()-->Line_23 $$ if (j > i) [ FD ]
Line_14 $$ expanded = ""-->Line_29 $$ expanded = ""[ FD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_44 $$ return str[ CD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_7 $$ if (macro instanceof SecondQueueExpandMacro && firstQueueExpand)[ FD ]
Line_21 $$ while (i != -1) -->Line_23 $$ if (j > i) [ CD ]
Line_12 $$ String expanded = macro.expand(dataContext)-->Line_29 $$ expanded = ""[ FD ]
Line_25 $$ if (toReplace == null)-->Line_26 $$ toReplace = new THashMap<String, String>()[ CD ]
Line_21 $$ while (i != -1) -->Line_22 $$ int j = str.indexOf(macroNameWithParamEnd, i + macroNameWithParamStart.length())[ CD ]
Line_12 $$ String expanded = macro.expand(dataContext)-->Line_16 $$ str = StringUtil.replace(str, name, expanded)[ FD ]
Line_22 $$ int j = str.indexOf(macroNameWithParamEnd, i + macroNameWithParamStart.length())-->Line_24 $$ String param = str.substring(i + macroNameWithParamStart.length(), j)[ FD ]
Line_17 $$ if (str.contains(macroNameWithParamStart)) -->Line_18 $$ String macroNameWithParamEnd = ")$"[ CD ]
Line_12 $$ String expanded = macro.expand(dataContext)-->Line_14 $$ expanded = ""[ FD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_16 $$ str = StringUtil.replace(str, name, expanded)[ FD ]
Line_27 $$ String expanded = macro.expand(dataContext, param)-->Line_31 $$ toReplace.put(macroNameWithParamStart + param + macroNameWithParamEnd, expanded)[ FD ]
Line_10 $$ String macroNameWithParamStart = "$" + macro.getName() + "("-->Line_17 $$ if (str.contains(macroNameWithParamStart)) [ FD ]
Line_17 $$ if (str.contains(macroNameWithParamStart)) -->Line_37 $$ if (toReplace != null) [ CD ]
Line_39 $$ str = StringUtil.replace(str, entry.getKey(), entry.getValue())-->Line_16 $$ str = StringUtil.replace(str, name, expanded)[ FD ]
Line_23 $$ if (j > i) -->Line_24 $$ String param = str.substring(i + macroNameWithParamStart.length(), j)[ CD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_24 $$ String param = str.substring(i + macroNameWithParamStart.length(), j)[ FD ]
Line_6 $$ Macro macro = macros.next()-->Line_10 $$ String macroNameWithParamStart = "$" + macro.getName() + "("[ FD ]
Line_5 $$ while (macros.hasNext()) -->Line_6 $$ Macro macro = macros.next()[ CD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_17 $$ if (str.contains(macroNameWithParamStart)) [ FD ]
Line_12 $$ String expanded = macro.expand(dataContext)-->Line_31 $$ toReplace.put(macroNameWithParamStart + param + macroNameWithParamEnd, expanded)[ FD ]
Line_11 $$ if (str.contains(name)) -->Line_13 $$ if (expanded == null) [ CD ]
Line_16 $$ str = StringUtil.replace(str, name, expanded)-->Line_22 $$ int j = str.indexOf(macroNameWithParamEnd, i + macroNameWithParamStart.length())[ FD ]
Line_14 $$ expanded = ""-->Line_28 $$ if (expanded == null) [ FD ]
Line_39 $$ str = StringUtil.replace(str, entry.getKey(), entry.getValue())-->Line_17 $$ if (str.contains(macroNameWithParamStart)) [ FD ]
Line_16 $$ str = StringUtil.replace(str, name, expanded)-->Line_17 $$ if (str.contains(macroNameWithParamStart)) [ FD ]
Line_27 $$ String expanded = macro.expand(dataContext, param)-->Line_28 $$ if (expanded == null) [ FD ]
Line_24 $$ String param = str.substring(i + macroNameWithParamStart.length(), j)-->Line_27 $$ String expanded = macro.expand(dataContext, param)[ FD ]
Line_20 $$ int i = str.indexOf(macroNameWithParamStart)-->Line_21 $$ while (i != -1) [ FD ]
Line_19 $$ Map<String, String> toReplace = null-->Line_31 $$ toReplace.put(macroNameWithParamStart + param + macroNameWithParamEnd, expanded)[ FD ]
Line_5 $$ while (macros.hasNext()) -->Line_7 $$ if (macro instanceof SecondQueueExpandMacro && firstQueueExpand)[ CD ]
Line_5 $$ while (macros.hasNext()) -->Line_10 $$ String macroNameWithParamStart = "$" + macro.getName() + "("[ CD ]
Line_18 $$ String macroNameWithParamEnd = ")$"-->Line_22 $$ int j = str.indexOf(macroNameWithParamEnd, i + macroNameWithParamStart.length())[ FD ]
Line_5 $$ while (macros.hasNext()) -->Line_9 $$ String name = "$" + macro.getName() + "$"[ CD ]
Line_23 $$ if (j > i) -->Line_25 $$ if (toReplace == null)[ CD ]
Line_22 $$ int j = str.indexOf(macroNameWithParamEnd, i + macroNameWithParamStart.length())-->Line_23 $$ if (j > i) [ FD ]
Line_14 $$ expanded = ""-->Line_16 $$ str = StringUtil.replace(str, name, expanded)[ FD ]
Line_18 $$ String macroNameWithParamEnd = ")$"-->Line_32 $$ i = j + macroNameWithParamEnd.length()[ FD ]
Line_23 $$ if (j > i) -->Line_28 $$ if (expanded == null) [ CD ]
Line_19 $$ Map<String, String> toReplace = null-->Line_37 $$ if (toReplace != null) [ FD ]
Line_6 $$ Macro macro = macros.next()-->Line_9 $$ String name = "$" + macro.getName() + "$"[ FD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_27 $$ String expanded = macro.expand(dataContext, param)[ FD ]
Line_26 $$ toReplace = new THashMap<String, String>()-->Line_31 $$ toReplace.put(macroNameWithParamStart + param + macroNameWithParamEnd, expanded)[ FD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_39 $$ str = StringUtil.replace(str, entry.getKey(), entry.getValue())[ FD ]
Line_17 $$ if (str.contains(macroNameWithParamStart)) -->Line_19 $$ Map<String, String> toReplace = null[ CD ]
Line_3 $$ if (str == null)-->Line_4 $$ return null[ CD ]
Line_11 $$ if (str.contains(name)) -->Line_16 $$ str = StringUtil.replace(str, name, expanded)[ CD ]
Line_11 $$ if (str.contains(name)) -->Line_17 $$ if (str.contains(macroNameWithParamStart)) [ CD ]
Line_5 $$ while (macros.hasNext()) -->Line_11 $$ if (str.contains(name)) [ CD ]
Line_16 $$ str = StringUtil.replace(str, name, expanded)-->Line_11 $$ if (str.contains(name)) [ FD ]
Line_9 $$ String name = "$" + macro.getName() + "$"-->Line_16 $$ str = StringUtil.replace(str, name, expanded)[ FD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_20 $$ int i = str.indexOf(macroNameWithParamStart)[ FD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_5 $$ while (macros.hasNext()) [ CD ]
Line_19 $$ Map<String, String> toReplace = null-->Line_25 $$ if (toReplace == null)[ FD ]
Line_19 $$ Map<String, String> toReplace = null-->Line_26 $$ toReplace = new THashMap<String, String>()[ FD ]
Line_20 $$ int i = str.indexOf(macroNameWithParamStart)-->Line_32 $$ i = j + macroNameWithParamEnd.length()[ FD ]
Line_26 $$ toReplace = new THashMap<String, String>()-->Line_38 $$ for (Map.Entry<String, String> entry : toReplace.entrySet()) [ FD ]
Line_12 $$ String expanded = macro.expand(dataContext)-->Line_28 $$ if (expanded == null) [ FD ]
Line_29 $$ expanded = ""-->Line_28 $$ if (expanded == null) [ FD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_11 $$ if (str.contains(name)) [ FD ]
Line_22 $$ int j = str.indexOf(macroNameWithParamEnd, i + macroNameWithParamStart.length())-->Line_32 $$ i = j + macroNameWithParamEnd.length()[ FD ]
Line_10 $$ String macroNameWithParamStart = "$" + macro.getName() + "("-->Line_20 $$ int i = str.indexOf(macroNameWithParamStart)[ FD ]
Line_16 $$ str = StringUtil.replace(str, name, expanded)-->Line_24 $$ String param = str.substring(i + macroNameWithParamStart.length(), j)[ FD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_3 $$ if (str == null)[ CD ]
Line_16 $$ str = StringUtil.replace(str, name, expanded)-->Line_39 $$ str = StringUtil.replace(str, entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_3 $$ if (str == null)[ FD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_5 $$ while (macros.hasNext()) [ FD ]
Line_10 $$ String macroNameWithParamStart = "$" + macro.getName() + "("-->Line_24 $$ String param = str.substring(i + macroNameWithParamStart.length(), j)[ FD ]
Line_9 $$ String name = "$" + macro.getName() + "$"-->Line_11 $$ if (str.contains(name)) [ FD ]
Line_27 $$ String expanded = macro.expand(dataContext, param)-->Line_29 $$ expanded = ""[ FD ]
Line_11 $$ if (str.contains(name)) -->Line_12 $$ String expanded = macro.expand(dataContext)[ CD ]
Line_29 $$ expanded = ""-->Line_31 $$ toReplace.put(macroNameWithParamStart + param + macroNameWithParamEnd, expanded)[ FD ]
Line_13 $$ if (expanded == null) -->Line_14 $$ expanded = ""[ CD ]
Line_17 $$ if (str.contains(macroNameWithParamStart)) -->Line_21 $$ while (i != -1) [ CD ]
Line_23 $$ if (j > i) -->Line_32 $$ i = j + macroNameWithParamEnd.length()[ CD ]
Line_19 $$ Map<String, String> toReplace = null-->Line_38 $$ for (Map.Entry<String, String> entry : toReplace.entrySet()) [ FD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_22 $$ int j = str.indexOf(macroNameWithParamEnd, i + macroNameWithParamStart.length())[ FD ]
Line_39 $$ str = StringUtil.replace(str, entry.getKey(), entry.getValue())-->Line_20 $$ int i = str.indexOf(macroNameWithParamStart)[ FD ]
Line_17 $$ if (str.contains(macroNameWithParamStart)) -->Line_20 $$ int i = str.indexOf(macroNameWithParamStart)[ CD ]
Line_2 $$ private String expandMacroSet(String str, boolean firstQueueExpand, DataContext dataContext, Iterator<Macro> macros) throws Macro.ExecutionCancelledException -->Line_6 $$ Macro macro = macros.next()[ FD ]
Line_26 $$ toReplace = new THashMap<String, String>()-->Line_37 $$ if (toReplace != null) [ FD ]
Line_12 $$ String expanded = macro.expand(dataContext)-->Line_13 $$ if (expanded == null) [ FD ]
Line_14 $$ expanded = ""-->Line_31 $$ toReplace.put(macroNameWithParamStart + param + macroNameWithParamEnd, expanded)[ FD ]
Line_16 $$ str = StringUtil.replace(str, name, expanded)-->Line_20 $$ int i = str.indexOf(macroNameWithParamStart)[ FD ]
Line_6 $$ Macro macro = macros.next()-->Line_27 $$ String expanded = macro.expand(dataContext, param)[ FD ]
Line_23 $$ if (j > i) -->Line_27 $$ String expanded = macro.expand(dataContext, param)[ CD ]
