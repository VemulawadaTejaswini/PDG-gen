Line_7 $$ if (matcher.matches()) -->Line_14 $$ if (matcher.matches()) [ CD ]
Line_6 $$ Matcher matcher = NEW_FORMAT_PATTERN.matcher(line)-->Line_10 $$ String javaHome = matcher.group(3)[ FD ]
Line_13 $$ matcher = OLD_FORMAT_PATTERN.matcher(line)-->Line_15 $$ String version = matcher.group(1)[ FD ]
Line_6 $$ Matcher matcher = NEW_FORMAT_PATTERN.matcher(line)-->Line_13 $$ matcher = OLD_FORMAT_PATTERN.matcher(line)[ FD ]
Line_14 $$ if (matcher.matches()) -->Line_15 $$ String version = matcher.group(1)[ CD ]
Line_13 $$ matcher = OLD_FORMAT_PATTERN.matcher(line)-->Line_8 $$ String version = matcher.group(1)[ FD ]
Line_6 $$ Matcher matcher = NEW_FORMAT_PATTERN.matcher(line)-->Line_7 $$ if (matcher.matches()) [ FD ]
Line_4 $$ BufferedReader reader = new BufferedReader(output)-->Line_5 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ FD ]
Line_6 $$ Matcher matcher = NEW_FORMAT_PATTERN.matcher(line)-->Line_8 $$ String version = matcher.group(1)[ FD ]
Line_6 $$ Matcher matcher = NEW_FORMAT_PATTERN.matcher(line)-->Line_15 $$ String version = matcher.group(1)[ FD ]
Line_8 $$ String version = matcher.group(1)-->Line_11 $$ result.add(new JvmInstallation(JavaVersion.toVersion(version), version, new File(javaHome), true, toArch(arch)))[ FD ]
Line_5 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_13 $$ matcher = OLD_FORMAT_PATTERN.matcher(line)[ FD ]
Line_13 $$ matcher = OLD_FORMAT_PATTERN.matcher(line)-->Line_16 $$ String arch = matcher.group(2)[ FD ]
Line_13 $$ matcher = OLD_FORMAT_PATTERN.matcher(line)-->Line_17 $$ String javaHome = matcher.group(3)[ FD ]
Line_3 $$ ArrayList<JvmInstallation> result = new ArrayList<JvmInstallation>()-->Line_11 $$ result.add(new JvmInstallation(JavaVersion.toVersion(version), version, new File(javaHome), true, toArch(arch)))[ FD ]
Line_6 $$ Matcher matcher = NEW_FORMAT_PATTERN.matcher(line)-->Line_17 $$ String javaHome = matcher.group(3)[ FD ]
Line_5 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_7 $$ if (matcher.matches()) [ CD ]
Line_14 $$ if (matcher.matches()) -->Line_18 $$ result.add(new JvmInstallation(JavaVersion.toVersion(version), version, new File(javaHome), true, toArch(arch)))[ CD ]
Line_2 $$ public List<JvmInstallation> parse(Reader output) throws IOException -->Line_22 $$ return result[ CD ]
Line_2 $$ public List<JvmInstallation> parse(Reader output) throws IOException -->Line_3 $$ ArrayList<JvmInstallation> result = new ArrayList<JvmInstallation>()[ CD ]
Line_8 $$ String version = matcher.group(1)-->Line_18 $$ result.add(new JvmInstallation(JavaVersion.toVersion(version), version, new File(javaHome), true, toArch(arch)))[ FD ]
Line_7 $$ if (matcher.matches()) -->Line_13 $$ matcher = OLD_FORMAT_PATTERN.matcher(line)[ CD ]
Line_13 $$ matcher = OLD_FORMAT_PATTERN.matcher(line)-->Line_10 $$ String javaHome = matcher.group(3)[ FD ]
Line_6 $$ Matcher matcher = NEW_FORMAT_PATTERN.matcher(line)-->Line_9 $$ String arch = matcher.group(2)[ FD ]
Line_3 $$ ArrayList<JvmInstallation> result = new ArrayList<JvmInstallation>()-->Line_18 $$ result.add(new JvmInstallation(JavaVersion.toVersion(version), version, new File(javaHome), true, toArch(arch)))[ FD ]
Line_5 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_6 $$ Matcher matcher = NEW_FORMAT_PATTERN.matcher(line)[ CD ]
Line_7 $$ if (matcher.matches()) -->Line_11 $$ result.add(new JvmInstallation(JavaVersion.toVersion(version), version, new File(javaHome), true, toArch(arch)))[ CD ]
Line_2 $$ public List<JvmInstallation> parse(Reader output) throws IOException -->Line_4 $$ BufferedReader reader = new BufferedReader(output)[ CD ]
Line_6 $$ Matcher matcher = NEW_FORMAT_PATTERN.matcher(line)-->Line_16 $$ String arch = matcher.group(2)[ FD ]
Line_9 $$ String arch = matcher.group(2)-->Line_18 $$ result.add(new JvmInstallation(JavaVersion.toVersion(version), version, new File(javaHome), true, toArch(arch)))[ FD ]
Line_13 $$ matcher = OLD_FORMAT_PATTERN.matcher(line)-->Line_14 $$ if (matcher.matches()) [ FD ]
Line_5 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_6 $$ Matcher matcher = NEW_FORMAT_PATTERN.matcher(line)[ FD ]
Line_13 $$ matcher = OLD_FORMAT_PATTERN.matcher(line)-->Line_9 $$ String arch = matcher.group(2)[ FD ]
Line_7 $$ if (matcher.matches()) -->Line_9 $$ String arch = matcher.group(2)[ CD ]
Line_2 $$ public List<JvmInstallation> parse(Reader output) throws IOException -->Line_5 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ CD ]
Line_14 $$ if (matcher.matches()) -->Line_17 $$ String javaHome = matcher.group(3)[ CD ]
Line_13 $$ matcher = OLD_FORMAT_PATTERN.matcher(line)-->Line_7 $$ if (matcher.matches()) [ FD ]
Line_9 $$ String arch = matcher.group(2)-->Line_11 $$ result.add(new JvmInstallation(JavaVersion.toVersion(version), version, new File(javaHome), true, toArch(arch)))[ FD ]
Line_14 $$ if (matcher.matches()) -->Line_16 $$ String arch = matcher.group(2)[ CD ]
Line_7 $$ if (matcher.matches()) -->Line_10 $$ String javaHome = matcher.group(3)[ CD ]
Line_7 $$ if (matcher.matches()) -->Line_8 $$ String version = matcher.group(1)[ CD ]
Line_6 $$ Matcher matcher = NEW_FORMAT_PATTERN.matcher(line)-->Line_14 $$ if (matcher.matches()) [ FD ]
