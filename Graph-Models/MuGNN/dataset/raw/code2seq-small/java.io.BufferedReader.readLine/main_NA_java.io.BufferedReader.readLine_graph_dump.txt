Line_11 $$ while (true) -->Line_12 $$ String msg = reader.readLine()[ CD ]
Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()))-->Line_12 $$ String msg = reader.readLine()[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_52 $$ if (!void.class.isAssignableFrom(m.getReturnType())) [ CD ]
Line_11 $$ while (true) -->Line_13 $$ if ("TERM".equals(msg)) [ CD ]
Line_5 $$ Thread t = new Thread(new Runnable() -->Line_28 $$ t.setDaemon(true)[ FD ]
Line_15 $$ if ("BREAK".equals(msg)) -->Line_17 $$ if ("STOP".equals(msg)) [ CD ]
Line_48 $$ if (!Modifier.isStatic(m.getModifiers())) -->Line_49 $$ System.err.println("main method should be static")[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_3 $$ if (!ourHasSecurityProblem) [ CD ]
Line_13 $$ if ("TERM".equals(msg)) -->Line_14 $$ return[ CD ]
Line_17 $$ if ("STOP".equals(msg)) -->Line_18 $$ System.exit(1)[ CD ]
Line_52 $$ if (!void.class.isAssignableFrom(m.getReturnType())) -->Line_53 $$ System.err.println("main method must return a value of type void")[ CD ]
Line_52 $$ if (!void.class.isAssignableFrom(m.getReturnType())) -->Line_54 $$ return[ CD ]
Line_48 $$ if (!Modifier.isStatic(m.getModifiers())) -->Line_50 $$ return[ CD ]
Line_15 $$ if ("BREAK".equals(msg)) -->Line_16 $$ triggerControlBreak()[ CD ]
Line_3 $$ if (!ourHasSecurityProblem) -->Line_4 $$ final int portNumber = Integer.getInteger(PROPERTY_PORT_NUMBER).intValue()[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_48 $$ if (!Modifier.isStatic(m.getModifiers())) [ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_35 $$ for (int j = 1; j < args.length; j++) [ CD ]
Line_8 $$ ServerSocket socket = new ServerSocket(portNumber)-->Line_9 $$ Socket client = socket.accept()[ FD ]
Line_3 $$ if (!ourHasSecurityProblem) -->Line_5 $$ Thread t = new Thread(new Runnable() [ CD ]
Line_12 $$ String msg = reader.readLine()-->Line_13 $$ if ("TERM".equals(msg)) [ FD ]
Line_12 $$ String msg = reader.readLine()-->Line_15 $$ if ("BREAK".equals(msg)) [ FD ]
Line_13 $$ if ("TERM".equals(msg)) -->Line_15 $$ if ("BREAK".equals(msg)) [ CD ]
Line_9 $$ Socket client = socket.accept()-->Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()))[ FD ]
Line_12 $$ String msg = reader.readLine()-->Line_17 $$ if ("STOP".equals(msg)) [ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_38 $$ final Class appClass = Class.forName(mainClass)[ CD ]
Line_35 $$ for (int j = 1; j < args.length; j++) -->Line_36 $$ parms[j - 1] = args[j][ CD ]
Line_5 $$ Thread t = new Thread(new Runnable() -->Line_29 $$ t.start()[ FD ]
