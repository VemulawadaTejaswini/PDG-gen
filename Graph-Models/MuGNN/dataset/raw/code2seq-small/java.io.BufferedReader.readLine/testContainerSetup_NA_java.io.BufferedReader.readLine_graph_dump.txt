Line_2 $$ public void testContainerSetup() throws Exception -->Line_45 $$ Assert.assertTrue(targetFile.getAbsolutePath() + " doesn't exist!!", targetFile.exists())[ CD ]
Line_6 $$ File file = new File(dir, "file")-->Line_12 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(file.getAbsolutePath())))[ FD ]
Line_20 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_22 $$ containerLaunchContext.setLocalResources(localResources)[ FD ]
Line_4 $$ File dir = new File(tmpDir, "dir")-->Line_5 $$ dir.mkdirs()[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_24 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_33 $$ File userDir = new File(userCacheDir, user)[ CD ]
Line_19 $$ String destinationFile = "dest_file"-->Line_21 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_21 $$ localResources.put(destinationFile, rsrc_alpha)[ CD ]
Line_13 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_21 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_40 $$ File containerSysDir = new File(appSysDir, containerIDStr)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_27 $$ containerManager.startContainers(allRequests)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_36 $$ File containerDir = new File(appDir, containerIDStr)[ CD ]
Line_20 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_21 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_10 $$ ContainerId cId = createContainerId(0)-->Line_23 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))[ FD ]
Line_24 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_25 $$ list.add(scRequest)[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_15 $$ rsrc_alpha.setSize(-1)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_38 $$ File sysDir = new File(localDir, ResourceLocalizationService.NM_PRIVATE_DIR)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_39 $$ File appSysDir = new File(sysDir, appIDStr)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_4 $$ File dir = new File(tmpDir, "dir")[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_29 $$ ApplicationId appId = cId.getApplicationAttemptId().getApplicationId()[ CD ]
Line_10 $$ ContainerId cId = createContainerId(0)-->Line_29 $$ ApplicationId appId = cId.getApplicationAttemptId().getApplicationId()[ FD ]
Line_41 $$ for (File f : new File[] -->Line_42 $$ Assert.assertTrue(f.getAbsolutePath() + " doesn't exist!!", f.exists())[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_25 $$ list.add(scRequest)[ CD ]
Line_46 $$ BufferedReader reader = new BufferedReader(new FileReader(targetFile))-->Line_48 $$ Assert.assertEquals(null, reader.readLine())[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_13 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)[ CD ]
Line_41 $$ for (File f : new File[] -->Line_43 $$ Assert.assertTrue(f.getAbsolutePath() + " is not a directory!!", f.isDirectory())[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_16 $$ rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_30 $$ String appIDStr = ConverterUtils.toString(appId)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_37 $$ File targetFile = new File(containerDir, destinationFile)[ CD ]
Line_23 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))-->Line_25 $$ list.add(scRequest)[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_12 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(file.getAbsolutePath())))[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_26 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_3 $$ containerManager.start()[ CD ]
Line_10 $$ ContainerId cId = createContainerId(0)-->Line_31 $$ String containerIDStr = ConverterUtils.toString(cId)[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_34 $$ File appCache = new File(userDir, ContainerLocalizer.APPCACHE)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_48 $$ Assert.assertEquals(null, reader.readLine())[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_9 $$ fileWriter.close()[ CD ]
Line_13 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_15 $$ rsrc_alpha.setSize(-1)[ FD ]
Line_13 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_14 $$ rsrc_alpha.setResource(resource_alpha)[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_7 $$ PrintWriter fileWriter = new PrintWriter(file)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_47 $$ Assert.assertEquals("Hello World!", reader.readLine())[ CD ]
Line_12 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(file.getAbsolutePath())))-->Line_14 $$ rsrc_alpha.setResource(resource_alpha)[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_20 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()[ CD ]
Line_10 $$ ContainerId cId = createContainerId(0)-->Line_28 $$ BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE)[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_17 $$ rsrc_alpha.setType(LocalResourceType.FILE)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_35 $$ File appDir = new File(appCache, appIDStr)[ CD ]
Line_13 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_17 $$ rsrc_alpha.setType(LocalResourceType.FILE)[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_46 $$ BufferedReader reader = new BufferedReader(new FileReader(targetFile))[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_23 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_31 $$ String containerIDStr = ConverterUtils.toString(cId)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_19 $$ String destinationFile = "dest_file"[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_14 $$ rsrc_alpha.setResource(resource_alpha)[ CD ]
Line_46 $$ BufferedReader reader = new BufferedReader(new FileReader(targetFile))-->Line_47 $$ Assert.assertEquals("Hello World!", reader.readLine())[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_5 $$ dir.mkdirs()[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_11 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)[ CD ]
Line_13 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_18 $$ rsrc_alpha.setTimestamp(file.lastModified())[ FD ]
Line_24 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_26 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ FD ]
Line_26 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)-->Line_27 $$ containerManager.startContainers(allRequests)[ FD ]
Line_7 $$ PrintWriter fileWriter = new PrintWriter(file)-->Line_9 $$ fileWriter.close()[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_8 $$ fileWriter.write("Hello World!")[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_18 $$ rsrc_alpha.setTimestamp(file.lastModified())[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_22 $$ containerLaunchContext.setLocalResources(localResources)[ CD ]
Line_6 $$ File file = new File(dir, "file")-->Line_18 $$ rsrc_alpha.setTimestamp(file.lastModified())[ FD ]
Line_11 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_22 $$ containerLaunchContext.setLocalResources(localResources)[ FD ]
Line_11 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_23 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_28 $$ BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE)[ CD ]
Line_29 $$ ApplicationId appId = cId.getApplicationAttemptId().getApplicationId()-->Line_30 $$ String appIDStr = ConverterUtils.toString(appId)[ FD ]
Line_7 $$ PrintWriter fileWriter = new PrintWriter(file)-->Line_8 $$ fileWriter.write("Hello World!")[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_32 $$ File userCacheDir = new File(localDir, ContainerLocalizer.USERCACHE)[ CD ]
Line_13 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_16 $$ rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION)[ FD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_10 $$ ContainerId cId = createContainerId(0)[ CD ]
Line_2 $$ public void testContainerSetup() throws Exception -->Line_6 $$ File file = new File(dir, "file")[ CD ]
Line_37 $$ File targetFile = new File(containerDir, destinationFile)-->Line_45 $$ Assert.assertTrue(targetFile.getAbsolutePath() + " doesn't exist!!", targetFile.exists())[ FD ]
