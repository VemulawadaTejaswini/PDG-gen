Line_8 $$ BufferedReader rdr = new BufferedReader(new FileReader(merged))-->Line_12 $$ Assert.assertNull("Expected end of file reading merged file.", rdr.readLine())[ FD ]
Line_2 $$ public void testCopyMergeSingleDirectory() throws IOException -->Line_5 $$ Assert.assertTrue("Expected successful copyMerge result.", copyMergeResult)[ CD ]
Line_4 $$ boolean copyMergeResult = copyMerge("partitioned", "tmp/merged")-->Line_5 $$ Assert.assertTrue("Expected successful copyMerge result.", copyMergeResult)[ FD ]
Line_2 $$ public void testCopyMergeSingleDirectory() throws IOException -->Line_8 $$ BufferedReader rdr = new BufferedReader(new FileReader(merged))[ CD ]
Line_2 $$ public void testCopyMergeSingleDirectory() throws IOException -->Line_3 $$ setupDirs()[ CD ]
Line_8 $$ BufferedReader rdr = new BufferedReader(new FileReader(merged))-->Line_11 $$ Assert.assertEquals("Line 2 of merged file must contain \"bar\".", "bar", rdr.readLine())[ FD ]
Line_2 $$ public void testCopyMergeSingleDirectory() throws IOException -->Line_7 $$ Assert.assertTrue("File tmp/merged must exist after copyMerge.", merged.exists())[ CD ]
Line_8 $$ BufferedReader rdr = new BufferedReader(new FileReader(merged))-->Line_14 $$ rdr.close()[ FD ]
Line_6 $$ File merged = new File(TEST_DIR, "tmp/merged")-->Line_7 $$ Assert.assertTrue("File tmp/merged must exist after copyMerge.", merged.exists())[ FD ]
Line_2 $$ public void testCopyMergeSingleDirectory() throws IOException -->Line_4 $$ boolean copyMergeResult = copyMerge("partitioned", "tmp/merged")[ CD ]
Line_8 $$ BufferedReader rdr = new BufferedReader(new FileReader(merged))-->Line_10 $$ Assert.assertEquals("Line 1 of merged file must contain \"foo\".", "foo", rdr.readLine())[ FD ]
Line_2 $$ public void testCopyMergeSingleDirectory() throws IOException -->Line_6 $$ File merged = new File(TEST_DIR, "tmp/merged")[ CD ]
