Line_2 $$ private void verifyOutput(Path outputPath) throws IOException -->Line_7 $$ BufferedReader r = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ FileSystem fs = FileSystem.getLocal(conf)[ FD ]
Line_2 $$ private void verifyOutput(Path outputPath) throws IOException -->Line_9 $$ assertTrue("Line does not have correct key", line.startsWith("0\t"))[ CD ]
Line_4 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_6 $$ InputStream is = fs.open(outputFile)[ FD ]
Line_8 $$ String line = r.readLine().trim()-->Line_9 $$ assertTrue("Line does not have correct key", line.startsWith("0\t"))[ FD ]
Line_2 $$ private void verifyOutput(Path outputPath) throws IOException -->Line_12 $$ r.close()[ CD ]
Line_2 $$ private void verifyOutput(Path outputPath) throws IOException -->Line_10 $$ int count = Integer.valueOf(line.substring(2))[ CD ]
Line_7 $$ BufferedReader r = new BufferedReader(new InputStreamReader(is))-->Line_12 $$ r.close()[ FD ]
Line_2 $$ private void verifyOutput(Path outputPath) throws IOException -->Line_5 $$ Path outputFile = new Path(outputPath, "part-r-00000")[ CD ]
Line_2 $$ private void verifyOutput(Path outputPath) throws IOException -->Line_4 $$ FileSystem fs = FileSystem.getLocal(conf)[ CD ]
Line_2 $$ private void verifyOutput(Path outputPath) throws IOException -->Line_11 $$ assertEquals("Incorrect count generated!", TOTAL_RECORDS, count)[ CD ]
Line_5 $$ Path outputFile = new Path(outputPath, "part-r-00000")-->Line_6 $$ InputStream is = fs.open(outputFile)[ FD ]
Line_7 $$ BufferedReader r = new BufferedReader(new InputStreamReader(is))-->Line_8 $$ String line = r.readLine().trim()[ FD ]
Line_8 $$ String line = r.readLine().trim()-->Line_10 $$ int count = Integer.valueOf(line.substring(2))[ FD ]
Line_10 $$ int count = Integer.valueOf(line.substring(2))-->Line_11 $$ assertEquals("Incorrect count generated!", TOTAL_RECORDS, count)[ FD ]
Line_2 $$ private void verifyOutput(Path outputPath) throws IOException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ private void verifyOutput(Path outputPath) throws IOException -->Line_6 $$ InputStream is = fs.open(outputFile)[ CD ]
Line_2 $$ private void verifyOutput(Path outputPath) throws IOException -->Line_8 $$ String line = r.readLine().trim()[ CD ]
