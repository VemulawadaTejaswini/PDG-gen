Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_17 $$ if (!defines.containsKey("__GNUC__")) [ CD ]
Line_7 $$ while ((line = reader.readLine()) != null) -->Line_8 $$ Matcher matcher = DEFINE_PATTERN.matcher(line)[ FD ]
Line_5 $$ Map<String, String> defines = new HashMap<String, String>()-->Line_35 $$ minor = toInt(defines.get("__GNUC_MINOR__"))[ FD ]
Line_7 $$ while ((line = reader.readLine()) != null) -->Line_8 $$ Matcher matcher = DEFINE_PATTERN.matcher(line)[ CD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_22 $$ int patch[ CD ]
Line_5 $$ Map<String, String> defines = new HashMap<String, String>()-->Line_29 $$ patch = toInt(defines.get("__clang_patchlevel__"))[ FD ]
Line_4 $$ String line-->Line_7 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_7 $$ while ((line = reader.readLine()) != null) -->Line_12 $$ defines.put(matcher.group(1), matcher.group(2))[ CD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_20 $$ int major[ CD ]
Line_5 $$ Map<String, String> defines = new HashMap<String, String>()-->Line_31 $$ if (defines.containsKey("__clang__")) [ FD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_32 $$ return new BrokenResult(String.format("XCode %s is a wrapper around Clang. Treating it as Clang and not GCC.", gccBinary.getName()))[ FD ]
Line_5 $$ Map<String, String> defines = new HashMap<String, String>()-->Line_12 $$ defines.put(matcher.group(1), matcher.group(2))[ FD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_4 $$ String line[ CD ]
Line_5 $$ Map<String, String> defines = new HashMap<String, String>()-->Line_27 $$ major = toInt(defines.get("__clang_major__"))[ FD ]
Line_9 $$ if (!matcher.matches()) -->Line_10 $$ return new BrokenResult(String.format("Could not determine %s version: %s produced unexpected output.", getDescription(), gccBinary.getName()))[ CD ]
Line_21 $$ int minor-->Line_35 $$ minor = toInt(defines.get("__GNUC_MINOR__"))[ FD ]
Line_28 $$ minor = toInt(defines.get("__clang_minor__"))-->Line_35 $$ minor = toInt(defines.get("__GNUC_MINOR__"))[ FD ]
Line_23 $$ if (clang) -->Line_31 $$ if (defines.containsKey("__clang__")) [ CD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_5 $$ Map<String, String> defines = new HashMap<String, String>()[ CD ]
Line_3 $$ BufferedReader reader = new BufferedReader(new StringReader(output))-->Line_7 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_23 $$ if (clang) -->Line_29 $$ patch = toInt(defines.get("__clang_patchlevel__"))[ CD ]
Line_31 $$ if (defines.containsKey("__clang__")) -->Line_32 $$ return new BrokenResult(String.format("XCode %s is a wrapper around Clang. Treating it as Clang and not GCC.", gccBinary.getName()))[ CD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_21 $$ int minor[ CD ]
Line_5 $$ Map<String, String> defines = new HashMap<String, String>()-->Line_38 $$ final ArchitectureInternal architecture = determineArchitecture(defines)[ FD ]
Line_5 $$ Map<String, String> defines = new HashMap<String, String>()-->Line_28 $$ minor = toInt(defines.get("__clang_minor__"))[ FD ]
Line_4 $$ String line-->Line_8 $$ Matcher matcher = DEFINE_PATTERN.matcher(line)[ FD ]
Line_8 $$ Matcher matcher = DEFINE_PATTERN.matcher(line)-->Line_12 $$ defines.put(matcher.group(1), matcher.group(2))[ FD ]
Line_23 $$ if (clang) -->Line_24 $$ if (!defines.containsKey("__clang__")) [ CD ]
Line_5 $$ Map<String, String> defines = new HashMap<String, String>()-->Line_36 $$ patch = toInt(defines.get("__GNUC_PATCHLEVEL__"))[ FD ]
Line_21 $$ int minor-->Line_28 $$ minor = toInt(defines.get("__clang_minor__"))[ FD ]
Line_22 $$ int patch-->Line_29 $$ patch = toInt(defines.get("__clang_patchlevel__"))[ FD ]
Line_27 $$ major = toInt(defines.get("__clang_major__"))-->Line_34 $$ major = toInt(defines.get("__GNUC__"))[ FD ]
Line_7 $$ while ((line = reader.readLine()) != null) -->Line_9 $$ if (!matcher.matches()) [ CD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_10 $$ return new BrokenResult(String.format("Could not determine %s version: %s produced unexpected output.", getDescription(), gccBinary.getName()))[ FD ]
Line_20 $$ int major-->Line_27 $$ major = toInt(defines.get("__clang_major__"))[ FD ]
Line_8 $$ Matcher matcher = DEFINE_PATTERN.matcher(line)-->Line_9 $$ if (!matcher.matches()) [ FD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_38 $$ final ArchitectureInternal architecture = determineArchitecture(defines)[ CD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_3 $$ BufferedReader reader = new BufferedReader(new StringReader(output))[ CD ]
Line_29 $$ patch = toInt(defines.get("__clang_patchlevel__"))-->Line_36 $$ patch = toInt(defines.get("__GNUC_PATCHLEVEL__"))[ FD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_18 $$ return new BrokenResult(String.format("Could not determine %s version: %s produced unexpected output.", getDescription(), gccBinary.getName()))[ FD ]
Line_20 $$ int major-->Line_34 $$ major = toInt(defines.get("__GNUC__"))[ FD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_39 $$ return new DefaultGccVersionResult(new VersionNumber(major, minor, patch, null), architecture, clang)[ CD ]
Line_17 $$ if (!defines.containsKey("__GNUC__")) -->Line_18 $$ return new BrokenResult(String.format("Could not determine %s version: %s produced unexpected output.", getDescription(), gccBinary.getName()))[ CD ]
Line_5 $$ Map<String, String> defines = new HashMap<String, String>()-->Line_34 $$ major = toInt(defines.get("__GNUC__"))[ FD ]
Line_23 $$ if (clang) -->Line_28 $$ minor = toInt(defines.get("__clang_minor__"))[ CD ]
Line_23 $$ if (clang) -->Line_36 $$ patch = toInt(defines.get("__GNUC_PATCHLEVEL__"))[ CD ]
Line_22 $$ int patch-->Line_36 $$ patch = toInt(defines.get("__GNUC_PATCHLEVEL__"))[ FD ]
Line_23 $$ if (clang) -->Line_34 $$ major = toInt(defines.get("__GNUC__"))[ CD ]
Line_23 $$ if (clang) -->Line_27 $$ major = toInt(defines.get("__clang_major__"))[ CD ]
Line_5 $$ Map<String, String> defines = new HashMap<String, String>()-->Line_24 $$ if (!defines.containsKey("__clang__")) [ FD ]
Line_24 $$ if (!defines.containsKey("__clang__")) -->Line_25 $$ return new BrokenResult(String.format("%s appears to be GCC rather than Clang. Treating it as GCC.", gccBinary.getName()))[ CD ]
Line_23 $$ if (clang) -->Line_35 $$ minor = toInt(defines.get("__GNUC_MINOR__"))[ CD ]
Line_5 $$ Map<String, String> defines = new HashMap<String, String>()-->Line_17 $$ if (!defines.containsKey("__GNUC__")) [ FD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_23 $$ if (clang) [ CD ]
Line_2 $$ private GccVersionResult transform(String output, File gccBinary) -->Line_25 $$ return new BrokenResult(String.format("%s appears to be GCC rather than Clang. Treating it as GCC.", gccBinary.getName()))[ FD ]
