Line_29 $$ String line-->Line_32 $$ LOG.info(line)[ FD ]
Line_20 $$ UserGroupInformation ugi = UserGroupInformation.getCurrentUser()-->Line_25 $$ when(logValue.getUser()).thenReturn(randomUser).thenReturn(ugi.getShortUserName())[ FD ]
Line_35 $$ line = sb.toString()-->Line_50 $$ Assert.assertTrue(line.contains(data + testContainerId1.toString() + stdout))[ FD ]
Line_20 $$ UserGroupInformation ugi = UserGroupInformation.getCurrentUser()-->Line_36 $$ String expectedOwner = ugi.getShortUserName()[ FD ]
Line_29 $$ String line-->Line_50 $$ Assert.assertTrue(line.contains(data + testContainerId1.toString() + stdout))[ FD ]
Line_20 $$ UserGroupInformation ugi = UserGroupInformation.getCurrentUser()-->Line_39 $$ if (Arrays.asList(ugi.getGroupNames()).contains(adminsGroupString)) [ FD ]
Line_31 $$ while ((line = in.readLine()) != null) -->Line_50 $$ Assert.assertTrue(line.contains(data + testContainerId1.toString() + stdout))[ FD ]
Line_23 $$ String randomUser = "randomUser"-->Line_25 $$ when(logValue.getUser()).thenReturn(randomUser).thenReturn(ugi.getShortUserName())[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_49 $$ Assert.assertFalse(line.contains(data + testContainerId1.toString() + stderr))[ CD ]
Line_7 $$ File workDir = new File(testWorkDir, "testContainerLogsFileAccess1")-->Line_8 $$ Path remoteAppLogFile = new Path(workDir.getAbsolutePath(), "aggregatedLogFile")[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_11 $$ ApplicationId applicationId = ApplicationId.newInstance(1, 1)[ CD ]
Line_13 $$ ContainerId testContainerId1 = ContainerId.newInstance(applicationAttemptId, 1)-->Line_45 $$ String stdoutFile2 = StringUtils.join(File.separator, Arrays.asList(new String[] [ FD ]
Line_29 $$ String line-->Line_47 $$ Assert.assertTrue(line.contains(message1))[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_19 $$ writeSrcFile(srcFilePath1, stderr, data + testContainerId1.toString() + stderr)[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_13 $$ ContainerId testContainerId1 = ContainerId.newInstance(applicationAttemptId, 1)[ CD ]
Line_37 $$ if (Path.WINDOWS) -->Line_39 $$ if (Arrays.asList(ugi.getGroupNames()).contains(adminsGroupString)) [ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_8 $$ Path remoteAppLogFile = new Path(workDir.getAbsolutePath(), "aggregatedLogFile")[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")[ FD ]
Line_15 $$ Path srcFilePath1 = new Path(appDir, testContainerId1.toString())-->Line_18 $$ writeSrcFile(srcFilePath1, stdout, data + testContainerId1.toString() + stdout)[ FD ]
Line_31 $$ while ((line = in.readLine()) != null) -->Line_33 $$ sb.append(line)[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_37 $$ if (Path.WINDOWS) [ CD ]
Line_21 $$ LogWriter logWriter = new LogWriter(conf, remoteAppLogFile, ugi)-->Line_27 $$ logWriter.close()[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_27 $$ logWriter.close()[ CD ]
Line_7 $$ File workDir = new File(testWorkDir, "testContainerLogsFileAccess1")-->Line_45 $$ String stdoutFile2 = StringUtils.join(File.separator, Arrays.asList(new String[] [ FD ]
Line_8 $$ Path remoteAppLogFile = new Path(workDir.getAbsolutePath(), "aggregatedLogFile")-->Line_28 $$ BufferedReader in = new BufferedReader(new FileReader(new File(remoteAppLogFile.toUri().getRawPath())))[ FD ]
Line_35 $$ line = sb.toString()-->Line_49 $$ Assert.assertFalse(line.contains(data + testContainerId1.toString() + stderr))[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_6 $$ UserGroupInformation.setConfiguration(conf)[ FD ]
Line_31 $$ while ((line = in.readLine()) != null) -->Line_33 $$ sb.append(line)[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_29 $$ String line[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_10 $$ String data = "Log File content for container : "[ CD ]
Line_29 $$ String line-->Line_33 $$ sb.append(line)[ FD ]
Line_21 $$ LogWriter logWriter = new LogWriter(conf, remoteAppLogFile, ugi)-->Line_26 $$ logWriter.append(logKey, logValue)[ FD ]
Line_31 $$ while ((line = in.readLine()) != null) -->Line_32 $$ LOG.info(line)[ CD ]
Line_44 $$ String message1 = "Owner '" + expectedOwner + "' for path " + stdoutFile1 + " did not match expected owner '" + randomUser + "'"-->Line_47 $$ Assert.assertTrue(line.contains(message1))[ FD ]
Line_46 $$ String message2 = "Owner '" + expectedOwner + "' for path " + stdoutFile2 + " did not match expected owner '" + ugi.getShortUserName() + "'"-->Line_48 $$ Assert.assertFalse(line.contains(message2))[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_46 $$ String message2 = "Owner '" + expectedOwner + "' for path " + stdoutFile2 + " did not match expected owner '" + ugi.getShortUserName() + "'"[ CD ]
Line_31 $$ while ((line = in.readLine()) != null) -->Line_35 $$ line = sb.toString()[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_20 $$ UserGroupInformation ugi = UserGroupInformation.getCurrentUser()[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_14 $$ Path appDir = new Path(srcFileRoot, testContainerId1.getApplicationAttemptId().getApplicationId().toString())[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_44 $$ String message1 = "Owner '" + expectedOwner + "' for path " + stdoutFile1 + " did not match expected owner '" + randomUser + "'"[ CD ]
Line_29 $$ String line-->Line_31 $$ while ((line = in.readLine()) != null) [ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_50 $$ Assert.assertTrue(line.contains(data + testContainerId1.toString() + stdout))[ CD ]
Line_13 $$ ContainerId testContainerId1 = ContainerId.newInstance(applicationAttemptId, 1)-->Line_19 $$ writeSrcFile(srcFilePath1, stderr, data + testContainerId1.toString() + stderr)[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_15 $$ Path srcFilePath1 = new Path(appDir, testContainerId1.toString())[ CD ]
Line_28 $$ BufferedReader in = new BufferedReader(new FileReader(new File(remoteAppLogFile.toUri().getRawPath())))-->Line_31 $$ while ((line = in.readLine()) != null) [ FD ]
Line_13 $$ ContainerId testContainerId1 = ContainerId.newInstance(applicationAttemptId, 1)-->Line_50 $$ Assert.assertTrue(line.contains(data + testContainerId1.toString() + stdout))[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_25 $$ when(logValue.getUser()).thenReturn(randomUser).thenReturn(ugi.getShortUserName())[ CD ]
Line_17 $$ String stderr = "stderr"-->Line_19 $$ writeSrcFile(srcFilePath1, stderr, data + testContainerId1.toString() + stderr)[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_12 $$ ApplicationAttemptId applicationAttemptId = ApplicationAttemptId.newInstance(applicationId, 1)[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_47 $$ Assert.assertTrue(line.contains(message1))[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_9 $$ Path srcFileRoot = new Path(workDir.getAbsolutePath(), "srcFiles")[ CD ]
Line_31 $$ while ((line = in.readLine()) != null) -->Line_32 $$ LOG.info(line)[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_28 $$ BufferedReader in = new BufferedReader(new FileReader(new File(remoteAppLogFile.toUri().getRawPath())))[ CD ]
Line_31 $$ while ((line = in.readLine()) != null) -->Line_47 $$ Assert.assertTrue(line.contains(message1))[ FD ]
Line_29 $$ String line-->Line_49 $$ Assert.assertFalse(line.contains(data + testContainerId1.toString() + stderr))[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_17 $$ String stderr = "stderr"[ CD ]
Line_7 $$ File workDir = new File(testWorkDir, "testContainerLogsFileAccess1")-->Line_43 $$ String stdoutFile1 = StringUtils.join(File.separator, Arrays.asList(new String[] [ FD ]
Line_22 $$ LogKey logKey = new LogKey(testContainerId1)-->Line_26 $$ logWriter.append(logKey, logValue)[ FD ]
Line_39 $$ if (Arrays.asList(ugi.getGroupNames()).contains(adminsGroupString)) -->Line_40 $$ expectedOwner = adminsGroupString[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_35 $$ line = sb.toString()[ CD ]
Line_15 $$ Path srcFilePath1 = new Path(appDir, testContainerId1.toString())-->Line_19 $$ writeSrcFile(srcFilePath1, stderr, data + testContainerId1.toString() + stderr)[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_22 $$ LogKey logKey = new LogKey(testContainerId1)[ CD ]
Line_35 $$ line = sb.toString()-->Line_48 $$ Assert.assertFalse(line.contains(message2))[ FD ]
Line_35 $$ line = sb.toString()-->Line_47 $$ Assert.assertTrue(line.contains(message1))[ FD ]
Line_36 $$ String expectedOwner = ugi.getShortUserName()-->Line_40 $$ expectedOwner = adminsGroupString[ FD ]
Line_13 $$ ContainerId testContainerId1 = ContainerId.newInstance(applicationAttemptId, 1)-->Line_49 $$ Assert.assertFalse(line.contains(data + testContainerId1.toString() + stderr))[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_7 $$ File workDir = new File(testWorkDir, "testContainerLogsFileAccess1")[ CD ]
Line_13 $$ ContainerId testContainerId1 = ContainerId.newInstance(applicationAttemptId, 1)-->Line_43 $$ String stdoutFile1 = StringUtils.join(File.separator, Arrays.asList(new String[] [ FD ]
Line_11 $$ ApplicationId applicationId = ApplicationId.newInstance(1, 1)-->Line_12 $$ ApplicationAttemptId applicationAttemptId = ApplicationAttemptId.newInstance(applicationId, 1)[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_21 $$ LogWriter logWriter = new LogWriter(conf, remoteAppLogFile, ugi)[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_5 $$ conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_45 $$ String stdoutFile2 = StringUtils.join(File.separator, Arrays.asList(new String[] [ CD ]
Line_9 $$ Path srcFileRoot = new Path(workDir.getAbsolutePath(), "srcFiles")-->Line_24 $$ LogValue logValue = spy(new LogValue(Collections.singletonList(srcFileRoot.toString()), testContainerId1, randomUser))[ FD ]
Line_13 $$ ContainerId testContainerId1 = ContainerId.newInstance(applicationAttemptId, 1)-->Line_15 $$ Path srcFilePath1 = new Path(appDir, testContainerId1.toString())[ FD ]
Line_7 $$ File workDir = new File(testWorkDir, "testContainerLogsFileAccess1")-->Line_9 $$ Path srcFileRoot = new Path(workDir.getAbsolutePath(), "srcFiles")[ FD ]
Line_38 $$ final String adminsGroupString = "Administrators"-->Line_39 $$ if (Arrays.asList(ugi.getGroupNames()).contains(adminsGroupString)) [ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_26 $$ logWriter.append(logKey, logValue)[ CD ]
Line_38 $$ final String adminsGroupString = "Administrators"-->Line_40 $$ expectedOwner = adminsGroupString[ FD ]
Line_30 $$ StringBuffer sb = new StringBuffer("")-->Line_35 $$ line = sb.toString()[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_18 $$ writeSrcFile(srcFilePath1, stdout, data + testContainerId1.toString() + stdout)[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_24 $$ LogValue logValue = spy(new LogValue(Collections.singletonList(srcFileRoot.toString()), testContainerId1, randomUser))[ CD ]
Line_29 $$ String line-->Line_48 $$ Assert.assertFalse(line.contains(message2))[ FD ]
Line_31 $$ while ((line = in.readLine()) != null) -->Line_49 $$ Assert.assertFalse(line.contains(data + testContainerId1.toString() + stderr))[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_16 $$ String stdout = "stdout"[ CD ]
Line_13 $$ ContainerId testContainerId1 = ContainerId.newInstance(applicationAttemptId, 1)-->Line_14 $$ Path appDir = new Path(srcFileRoot, testContainerId1.getApplicationAttemptId().getApplicationId().toString())[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_30 $$ StringBuffer sb = new StringBuffer("")[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_31 $$ while ((line = in.readLine()) != null) [ CD ]
Line_13 $$ ContainerId testContainerId1 = ContainerId.newInstance(applicationAttemptId, 1)-->Line_18 $$ writeSrcFile(srcFilePath1, stdout, data + testContainerId1.toString() + stdout)[ FD ]
Line_16 $$ String stdout = "stdout"-->Line_18 $$ writeSrcFile(srcFilePath1, stdout, data + testContainerId1.toString() + stdout)[ FD ]
Line_37 $$ if (Path.WINDOWS) -->Line_38 $$ final String adminsGroupString = "Administrators"[ CD ]
Line_29 $$ String line-->Line_35 $$ line = sb.toString()[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_48 $$ Assert.assertFalse(line.contains(message2))[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_6 $$ UserGroupInformation.setConfiguration(conf)[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_23 $$ String randomUser = "randomUser"[ CD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_36 $$ String expectedOwner = ugi.getShortUserName()[ CD ]
Line_24 $$ LogValue logValue = spy(new LogValue(Collections.singletonList(srcFileRoot.toString()), testContainerId1, randomUser))-->Line_26 $$ logWriter.append(logKey, logValue)[ FD ]
Line_30 $$ StringBuffer sb = new StringBuffer("")-->Line_33 $$ sb.append(line)[ FD ]
Line_24 $$ LogValue logValue = spy(new LogValue(Collections.singletonList(srcFileRoot.toString()), testContainerId1, randomUser))-->Line_25 $$ when(logValue.getUser()).thenReturn(randomUser).thenReturn(ugi.getShortUserName())[ FD ]
Line_31 $$ while ((line = in.readLine()) != null) -->Line_48 $$ Assert.assertFalse(line.contains(message2))[ FD ]
Line_12 $$ ApplicationAttemptId applicationAttemptId = ApplicationAttemptId.newInstance(applicationId, 1)-->Line_13 $$ ContainerId testContainerId1 = ContainerId.newInstance(applicationAttemptId, 1)[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_43 $$ String stdoutFile1 = StringUtils.join(File.separator, Arrays.asList(new String[] [ CD ]
Line_20 $$ UserGroupInformation ugi = UserGroupInformation.getCurrentUser()-->Line_46 $$ String message2 = "Owner '" + expectedOwner + "' for path " + stdoutFile2 + " did not match expected owner '" + ugi.getShortUserName() + "'"[ FD ]
Line_2 $$ public void testContainerLogsFileAccess() throws IOException -->Line_3 $$ Assume.assumeTrue(NativeIO.isAvailable())[ CD ]
