Line_3 $$ StructureGenerator sg = new StructureGenerator()-->Line_37 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_3 $$ StructureGenerator sg = new StructureGenerator()-->Line_49 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_4 $$ String[] args = new String[] -->Line_12 $$ assertEquals(0, sg.run(args))[ FD ]
Line_27 $$ oldArg = args[MIN_WIDTH]-->Line_34 $$ args[MAX_WIDTH] = oldArg[ FD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_31 $$ oldArg = args[MAX_WIDTH][ FD ]
Line_31 $$ oldArg = args[MAX_WIDTH]-->Line_34 $$ args[MAX_WIDTH] = oldArg[ FD ]
Line_31 $$ oldArg = args[MAX_WIDTH]-->Line_43 $$ oldArg = args[AVG_FILE_SIZE][ FD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_35 $$ oldArg = args[NUM_OF_FILES][ FD ]
Line_35 $$ oldArg = args[NUM_OF_FILES]-->Line_43 $$ oldArg = args[AVG_FILE_SIZE][ FD ]
Line_2 $$ public void testStructureGenerator() throws Exception -->Line_3 $$ StructureGenerator sg = new StructureGenerator()[ CD ]
Line_3 $$ StructureGenerator sg = new StructureGenerator()-->Line_12 $$ assertEquals(0, sg.run(args))[ FD ]
Line_35 $$ oldArg = args[NUM_OF_FILES]-->Line_39 $$ oldArg = args[NUM_OF_FILES][ FD ]
Line_31 $$ oldArg = args[MAX_WIDTH]-->Line_42 $$ args[NUM_OF_FILES] = oldArg[ FD ]
Line_39 $$ oldArg = args[NUM_OF_FILES]-->Line_50 $$ args[SEED] = oldArg[ FD ]
Line_4 $$ String[] args = new String[] -->Line_33 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_38 $$ args[NUM_OF_FILES] = oldArg[ FD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_46 $$ args[AVG_FILE_SIZE] = oldArg[ FD ]
Line_43 $$ oldArg = args[AVG_FILE_SIZE]-->Line_50 $$ args[SEED] = oldArg[ FD ]
Line_4 $$ String[] args = new String[] -->Line_29 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_13 $$ BufferedReader in = new BufferedReader(new FileReader(DIR_STRUCTURE_FILE))-->Line_15 $$ assertEquals(DIR_STRUCTURE_SECOND_LINE, in.readLine())[ FD ]
Line_2 $$ public void testStructureGenerator() throws Exception -->Line_10 $$ final int SEED = 13[ CD ]
Line_4 $$ String[] args = new String[] -->Line_25 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_27 $$ oldArg = args[MIN_WIDTH]-->Line_35 $$ oldArg = args[NUM_OF_FILES][ FD ]
Line_35 $$ oldArg = args[NUM_OF_FILES]-->Line_42 $$ args[NUM_OF_FILES] = oldArg[ FD ]
Line_13 $$ BufferedReader in = new BufferedReader(new FileReader(DIR_STRUCTURE_FILE))-->Line_17 $$ in.close()[ FD ]
Line_31 $$ oldArg = args[MAX_WIDTH]-->Line_46 $$ args[AVG_FILE_SIZE] = oldArg[ FD ]
Line_39 $$ oldArg = args[NUM_OF_FILES]-->Line_42 $$ args[NUM_OF_FILES] = oldArg[ FD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_42 $$ args[NUM_OF_FILES] = oldArg[ FD ]
Line_35 $$ oldArg = args[NUM_OF_FILES]-->Line_38 $$ args[NUM_OF_FILES] = oldArg[ FD ]
Line_3 $$ StructureGenerator sg = new StructureGenerator()-->Line_25 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_31 $$ oldArg = args[MAX_WIDTH]-->Line_39 $$ oldArg = args[NUM_OF_FILES][ FD ]
Line_13 $$ BufferedReader in = new BufferedReader(new FileReader(DIR_STRUCTURE_FILE))-->Line_21 $$ assertEquals(null, in.readLine())[ FD ]
Line_27 $$ oldArg = args[MIN_WIDTH]-->Line_46 $$ args[AVG_FILE_SIZE] = oldArg[ FD ]
Line_13 $$ BufferedReader in = new BufferedReader(new FileReader(DIR_STRUCTURE_FILE))-->Line_16 $$ assertEquals(null, in.readLine())[ FD ]
Line_13 $$ BufferedReader in = new BufferedReader(new FileReader(DIR_STRUCTURE_FILE))-->Line_18 $$ in = new BufferedReader(new FileReader(FILE_STRUCTURE_FILE))[ FD ]
Line_18 $$ in = new BufferedReader(new FileReader(FILE_STRUCTURE_FILE))-->Line_21 $$ assertEquals(null, in.readLine())[ FD ]
Line_18 $$ in = new BufferedReader(new FileReader(FILE_STRUCTURE_FILE))-->Line_19 $$ assertEquals(FILE_STRUCTURE_FIRST_LINE, in.readLine())[ FD ]
Line_31 $$ oldArg = args[MAX_WIDTH]-->Line_35 $$ oldArg = args[NUM_OF_FILES][ FD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_43 $$ oldArg = args[AVG_FILE_SIZE][ FD ]
Line_27 $$ oldArg = args[MIN_WIDTH]-->Line_50 $$ args[SEED] = oldArg[ FD ]
Line_13 $$ BufferedReader in = new BufferedReader(new FileReader(DIR_STRUCTURE_FILE))-->Line_20 $$ assertEquals(FILE_STRUCTURE_SECOND_LINE, in.readLine())[ FD ]
Line_4 $$ String[] args = new String[] -->Line_45 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_13 $$ BufferedReader in = new BufferedReader(new FileReader(DIR_STRUCTURE_FILE))-->Line_22 $$ in.close()[ FD ]
Line_27 $$ oldArg = args[MIN_WIDTH]-->Line_31 $$ oldArg = args[MAX_WIDTH][ FD ]
Line_18 $$ in = new BufferedReader(new FileReader(FILE_STRUCTURE_FILE))-->Line_20 $$ assertEquals(FILE_STRUCTURE_SECOND_LINE, in.readLine())[ FD ]
Line_43 $$ oldArg = args[AVG_FILE_SIZE]-->Line_47 $$ oldArg = args[SEED][ FD ]
Line_39 $$ oldArg = args[NUM_OF_FILES]-->Line_46 $$ args[AVG_FILE_SIZE] = oldArg[ FD ]
Line_35 $$ oldArg = args[NUM_OF_FILES]-->Line_47 $$ oldArg = args[SEED][ FD ]
Line_43 $$ oldArg = args[AVG_FILE_SIZE]-->Line_46 $$ args[AVG_FILE_SIZE] = oldArg[ FD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_47 $$ oldArg = args[SEED][ FD ]
Line_31 $$ oldArg = args[MAX_WIDTH]-->Line_47 $$ oldArg = args[SEED][ FD ]
Line_18 $$ in = new BufferedReader(new FileReader(FILE_STRUCTURE_FILE))-->Line_22 $$ in.close()[ FD ]
Line_27 $$ oldArg = args[MIN_WIDTH]-->Line_38 $$ args[NUM_OF_FILES] = oldArg[ FD ]
Line_3 $$ StructureGenerator sg = new StructureGenerator()-->Line_33 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_30 $$ args[MIN_WIDTH] = oldArg[ FD ]
Line_2 $$ public void testStructureGenerator() throws Exception -->Line_6 $$ final int MIN_WIDTH = 3[ CD ]
Line_27 $$ oldArg = args[MIN_WIDTH]-->Line_42 $$ args[NUM_OF_FILES] = oldArg[ FD ]
Line_39 $$ oldArg = args[NUM_OF_FILES]-->Line_43 $$ oldArg = args[AVG_FILE_SIZE][ FD ]
Line_3 $$ StructureGenerator sg = new StructureGenerator()-->Line_41 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_13 $$ BufferedReader in = new BufferedReader(new FileReader(DIR_STRUCTURE_FILE))-->Line_14 $$ assertEquals(DIR_STRUCTURE_FIRST_LINE, in.readLine())[ FD ]
Line_2 $$ public void testStructureGenerator() throws Exception -->Line_4 $$ String[] args = new String[] [ CD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_34 $$ args[MAX_WIDTH] = oldArg[ FD ]
Line_3 $$ StructureGenerator sg = new StructureGenerator()-->Line_29 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_27 $$ oldArg = args[MIN_WIDTH]-->Line_47 $$ oldArg = args[SEED][ FD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_27 $$ oldArg = args[MIN_WIDTH][ FD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_50 $$ args[SEED] = oldArg[ FD ]
Line_4 $$ String[] args = new String[] -->Line_41 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_27 $$ oldArg = args[MIN_WIDTH]-->Line_39 $$ oldArg = args[NUM_OF_FILES][ FD ]
Line_39 $$ oldArg = args[NUM_OF_FILES]-->Line_47 $$ oldArg = args[SEED][ FD ]
Line_2 $$ public void testStructureGenerator() throws Exception -->Line_9 $$ final int AVG_FILE_SIZE = 9[ CD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_26 $$ args[MAX_DEPTH] = oldArg[ FD ]
Line_13 $$ BufferedReader in = new BufferedReader(new FileReader(DIR_STRUCTURE_FILE))-->Line_19 $$ assertEquals(FILE_STRUCTURE_FIRST_LINE, in.readLine())[ FD ]
Line_23 $$ String oldArg = args[MAX_DEPTH]-->Line_39 $$ oldArg = args[NUM_OF_FILES][ FD ]
Line_31 $$ oldArg = args[MAX_WIDTH]-->Line_38 $$ args[NUM_OF_FILES] = oldArg[ FD ]
Line_3 $$ StructureGenerator sg = new StructureGenerator()-->Line_45 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_27 $$ oldArg = args[MIN_WIDTH]-->Line_43 $$ oldArg = args[AVG_FILE_SIZE][ FD ]
Line_35 $$ oldArg = args[NUM_OF_FILES]-->Line_46 $$ args[AVG_FILE_SIZE] = oldArg[ FD ]
Line_2 $$ public void testStructureGenerator() throws Exception -->Line_8 $$ final int NUM_OF_FILES = 7[ CD ]
Line_47 $$ oldArg = args[SEED]-->Line_50 $$ args[SEED] = oldArg[ FD ]
Line_4 $$ String[] args = new String[] -->Line_49 $$ assertEquals(-1, sg.run(args))[ FD ]
Line_27 $$ oldArg = args[MIN_WIDTH]-->Line_30 $$ args[MIN_WIDTH] = oldArg[ FD ]
Line_31 $$ oldArg = args[MAX_WIDTH]-->Line_50 $$ args[SEED] = oldArg[ FD ]
Line_35 $$ oldArg = args[NUM_OF_FILES]-->Line_50 $$ args[SEED] = oldArg[ FD ]
Line_2 $$ public void testStructureGenerator() throws Exception -->Line_5 $$ final int MAX_DEPTH = 1[ CD ]
Line_2 $$ public void testStructureGenerator() throws Exception -->Line_7 $$ final int MAX_WIDTH = 5[ CD ]
Line_4 $$ String[] args = new String[] -->Line_37 $$ assertEquals(-1, sg.run(args))[ FD ]
