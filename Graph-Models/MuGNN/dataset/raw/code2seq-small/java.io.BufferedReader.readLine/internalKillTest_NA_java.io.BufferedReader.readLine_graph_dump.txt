Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_66 $$ if (Shell.WINDOWS || !delayed) [ CD ]
Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))-->Line_15 $$ writer.println("@ping -n 100 127.0.0.1 >nul")[ FD ]
Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))-->Line_14 $$ writer.println("@echo " + cId + "> " + processStartFile)[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_32 $$ rsrc_alpha.setSize(-1)[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_59 $$ containerIds.add(cId)[ CD ]
Line_11 $$ if (Shell.WINDOWS) -->Line_19 $$ writer.println("hello=\"Got SIGTERM\"")[ CD ]
Line_11 $$ if (Shell.WINDOWS) -->Line_18 $$ writer.println("echo \"Running testscript for delayed kill\"")[ CD ]
Line_28 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_39 $$ containerLaunchContext.setLocalResources(localResources)[ FD ]
Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))-->Line_19 $$ writer.println("hello=\"Got SIGTERM\"")[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_55 $$ Assert.assertTrue("ProcessStartFile doesn't exist!", processStartFile.exists())[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_4 $$ containerManager.start()[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_56 $$ NMContainerStatus nmContainerStatus = containerManager.getContext().getContainers().get(cId).getNMContainerStatus()[ CD ]
Line_11 $$ if (Shell.WINDOWS) -->Line_14 $$ writer.println("@echo " + cId + "> " + processStartFile)[ CD ]
Line_69 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_72 $$ String line = reader.readLine()[ FD ]
Line_72 $$ String line = reader.readLine()-->Line_73 $$ if (line == null) [ FD ]
Line_58 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()-->Line_60 $$ StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds)[ FD ]
Line_66 $$ if (Shell.WINDOWS || !delayed) -->Line_71 $$ while (true) [ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_37 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()[ CD ]
Line_42 $$ Priority priority = Priority.newInstance(10)-->Line_57 $$ Assert.assertEquals(priority, nmContainerStatus.getPriority())[ FD ]
Line_8 $$ File processStartFile = new File(tmpDir, "pid.txt").getAbsoluteFile()-->Line_55 $$ Assert.assertTrue("ProcessStartFile doesn't exist!", processStartFile.exists())[ FD ]
Line_72 $$ String line = reader.readLine()-->Line_76 $$ if (line.contains("SIGTERM")) [ FD ]
Line_46 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_48 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ FD ]
Line_66 $$ if (Shell.WINDOWS || !delayed) -->Line_67 $$ Assert.assertFalse("Process is still alive!", DefaultContainerExecutor.containerIsAlive(cId.toString()))[ CD ]
Line_43 $$ long createTime = 1234-->Line_44 $$ Token containerToken = createContainerToken(cId, priority, createTime)[ FD ]
Line_56 $$ NMContainerStatus nmContainerStatus = containerManager.getContext().getContainers().get(cId).getNMContainerStatus()-->Line_57 $$ Assert.assertEquals(priority, nmContainerStatus.getPriority())[ FD ]
Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))-->Line_20 $$ writer.println("umask 0")[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_8 $$ File processStartFile = new File(tmpDir, "pid.txt").getAbsoluteFile()[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_44 $$ Token containerToken = createContainerToken(cId, priority, createTime)[ CD ]
Line_30 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_35 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ FD ]
Line_42 $$ Priority priority = Priority.newInstance(10)-->Line_44 $$ Token containerToken = createContainerToken(cId, priority, createTime)[ FD ]
Line_71 $$ while (true) -->Line_73 $$ if (line == null) [ CD ]
Line_30 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_31 $$ rsrc_alpha.setResource(resource_alpha)[ FD ]
Line_48 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)-->Line_49 $$ containerManager.startContainers(allRequests)[ FD ]
Line_66 $$ if (Shell.WINDOWS || !delayed) -->Line_69 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))[ CD ]
Line_9 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "testscript")-->Line_40 $$ List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile))[ FD ]
Line_8 $$ File processStartFile = new File(tmpDir, "pid.txt").getAbsoluteFile()-->Line_51 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ FD ]
Line_70 $$ boolean foundSigTermMessage = false-->Line_77 $$ foundSigTermMessage = true[ FD ]
Line_77 $$ foundSigTermMessage = true-->Line_81 $$ Assert.assertTrue("Did not find sigterm message", foundSigTermMessage)[ FD ]
Line_9 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "testscript")-->Line_29 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())))[ FD ]
Line_30 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_32 $$ rsrc_alpha.setSize(-1)[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_27 $$ FileUtil.setExecutable(scriptFile, true)[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_66 $$ if (Shell.WINDOWS || !delayed) [ FD ]
Line_66 $$ if (Shell.WINDOWS || !delayed) -->Line_70 $$ boolean foundSigTermMessage = false[ CD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_44 $$ Token containerToken = createContainerToken(cId, priority, createTime)[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_45 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken)[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_50 $$ int timeoutSecs = 0[ CD ]
Line_71 $$ while (true) -->Line_72 $$ String line = reader.readLine()[ CD ]
Line_30 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_33 $$ rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION)[ FD ]
Line_11 $$ if (Shell.WINDOWS) -->Line_21 $$ writer.println("trap \"echo $hello >> " + processStartFile + "\" SIGTERM")[ CD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_67 $$ Assert.assertFalse("Process is still alive!", DefaultContainerExecutor.containerIsAlive(cId.toString()))[ FD ]
Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_62 $$ BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE)[ CD ]
Line_64 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)-->Line_65 $$ Assert.assertEquals(ContainerExitStatus.KILLED_BY_APPMASTER, containerStatus.getExitStatus())[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_48 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ CD ]
Line_66 $$ if (Shell.WINDOWS || !delayed) -->Line_81 $$ Assert.assertTrue("Did not find sigterm message", foundSigTermMessage)[ CD ]
Line_11 $$ if (Shell.WINDOWS) -->Line_22 $$ writer.println("echo \"Writing pid to start file\"")[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_41 $$ containerLaunchContext.setCommands(commands)[ CD ]
Line_66 $$ if (Shell.WINDOWS || !delayed) -->Line_82 $$ reader.close()[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_65 $$ Assert.assertEquals(ContainerExitStatus.KILLED_BY_APPMASTER, containerStatus.getExitStatus())[ CD ]
Line_11 $$ if (Shell.WINDOWS) -->Line_24 $$ writer.println("while true; do\nsleep 1s;\ndone")[ CD ]
Line_11 $$ if (Shell.WINDOWS) -->Line_13 $$ writer.println("@echo \"Writing pid to start file\"")[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_34 $$ rsrc_alpha.setType(LocalResourceType.FILE)[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_40 $$ List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile))[ CD ]
Line_9 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "testscript")-->Line_27 $$ FileUtil.setExecutable(scriptFile, true)[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1)[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_11 $$ if (Shell.WINDOWS) [ CD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_56 $$ NMContainerStatus nmContainerStatus = containerManager.getContext().getContainers().get(cId).getNMContainerStatus()[ FD ]
Line_11 $$ if (Shell.WINDOWS) -->Line_20 $$ writer.println("umask 0")[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_61 $$ containerManager.stopContainers(stopRequest)[ CD ]
Line_37 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_38 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_36 $$ String destinationFile = "dest_file.sh"[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)[ CD ]
Line_45 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken)-->Line_47 $$ list.add(scRequest)[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_42 $$ Priority priority = Priority.newInstance(10)[ CD ]
Line_70 $$ boolean foundSigTermMessage = false-->Line_81 $$ Assert.assertTrue("Did not find sigterm message", foundSigTermMessage)[ FD ]
Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))-->Line_13 $$ writer.println("@echo \"Writing pid to start file\"")[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_5 $$ ApplicationId appId = ApplicationId.newInstance(1, 1)[ CD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_62 $$ BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE)[ FD ]
Line_11 $$ if (Shell.WINDOWS) -->Line_15 $$ writer.println("@ping -n 100 127.0.0.1 >nul")[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_3 $$ conf.setLong(YarnConfiguration.NM_SLEEP_DELAY_BEFORE_SIGKILL_MS, delayed ? 1000 : 0)[ CD ]
Line_30 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_38 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_11 $$ if (Shell.WINDOWS) -->Line_17 $$ writer.println("#!/bin/bash\n\n")[ CD ]
Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))-->Line_18 $$ writer.println("echo \"Running testscript for delayed kill\"")[ FD ]
Line_29 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())))-->Line_31 $$ rsrc_alpha.setResource(resource_alpha)[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_64 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_30 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_9 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "testscript")[ CD ]
Line_76 $$ if (line.contains("SIGTERM")) -->Line_77 $$ foundSigTermMessage = true[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_47 $$ list.add(scRequest)[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_28 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_49 $$ containerManager.startContainers(allRequests)[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_58 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_29 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())))[ CD ]
Line_50 $$ int timeoutSecs = 0-->Line_51 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_31 $$ rsrc_alpha.setResource(resource_alpha)[ CD ]
Line_5 $$ ApplicationId appId = ApplicationId.newInstance(1, 1)-->Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1)[ FD ]
Line_11 $$ if (Shell.WINDOWS) -->Line_12 $$ writer.println("@echo \"Running testscript for delayed kill\"")[ CD ]
Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))-->Line_21 $$ writer.println("trap \"echo $hello >> " + processStartFile + "\" SIGTERM")[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_60 $$ StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds)[ CD ]
Line_63 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)-->Line_64 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)[ FD ]
Line_37 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_39 $$ containerLaunchContext.setLocalResources(localResources)[ FD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_59 $$ containerIds.add(cId)[ FD ]
Line_40 $$ List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile))-->Line_41 $$ containerLaunchContext.setCommands(commands)[ FD ]
Line_36 $$ String destinationFile = "dest_file.sh"-->Line_38 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))-->Line_26 $$ writer.close()[ FD ]
Line_58 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()-->Line_59 $$ containerIds.add(cId)[ FD ]
Line_60 $$ StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds)-->Line_61 $$ containerManager.stopContainers(stopRequest)[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_33 $$ rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION)[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_57 $$ Assert.assertEquals(priority, nmContainerStatus.getPriority())[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_63 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)[ CD ]
Line_58 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()-->Line_63 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)[ FD ]
Line_71 $$ while (true) -->Line_76 $$ if (line.contains("SIGTERM")) [ CD ]
Line_9 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "testscript")-->Line_35 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ FD ]
Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))-->Line_12 $$ writer.println("@echo \"Running testscript for delayed kill\"")[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_43 $$ long createTime = 1234[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_46 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_35 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_39 $$ containerLaunchContext.setLocalResources(localResources)[ CD ]
Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))-->Line_24 $$ writer.println("while true; do\nsleep 1s;\ndone")[ FD ]
Line_44 $$ Token containerToken = createContainerToken(cId, priority, createTime)-->Line_45 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken)[ FD ]
Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))-->Line_17 $$ writer.println("#!/bin/bash\n\n")[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_26 $$ writer.close()[ CD ]
Line_10 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(scriptFile))-->Line_22 $$ writer.println("echo \"Writing pid to start file\"")[ FD ]
Line_69 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_82 $$ reader.close()[ FD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_38 $$ localResources.put(destinationFile, rsrc_alpha)[ CD ]
Line_46 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_47 $$ list.add(scRequest)[ FD ]
Line_30 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_34 $$ rsrc_alpha.setType(LocalResourceType.FILE)[ FD ]
Line_28 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_45 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken)[ FD ]
Line_51 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) -->Line_52 $$ Thread.sleep(1000)[ CD ]
Line_2 $$ private void internalKillTest(boolean delayed) throws Exception -->Line_51 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ CD ]
Line_51 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) -->Line_53 $$ LOG.info("Waiting for process start-file to be created")[ CD ]
Line_28 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_41 $$ containerLaunchContext.setCommands(commands)[ FD ]
