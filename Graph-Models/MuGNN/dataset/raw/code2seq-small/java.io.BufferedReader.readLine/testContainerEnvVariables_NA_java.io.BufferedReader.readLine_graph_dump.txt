Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_143 $$ int expectedExitCode = ContainerExitStatus.KILLED_BY_APPMASTER[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_9 $$ userSetEnv.put(Environment.CONTAINER_ID.name(), "user_set_container_id")[ CD ]
Line_123 $$ obtainedPWD = containerLaunchContext.getEnvironment().get(Environment.PWD.name())-->Line_125 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) [ FD ]
Line_79 $$ List<String> localDirs = dirsHandler.getLocalDirs()-->Line_81 $$ List<Path> appDirs = new ArrayList<Path>(localDirs.size())[ FD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_36 $$ fileWriter.println("@ping -n 100 127.0.0.1 >nul")[ FD ]
Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_132 $$ String pid = reader.readLine().trim()[ FD ]
Line_63 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_65 $$ containerLaunchContext.setLocalResources(localResources)[ FD ]
Line_88 $$ List<String> containerLogDirs = new ArrayList<String>()-->Line_119 $$ Assert.assertEquals(StringUtils.join(",", containerLogDirs), containerLaunchContext.getEnvironment().get(Environment.LOG_DIRS.name()))[ FD ]
Line_102 $$ boolean found = false-->Line_109 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ FD ]
Line_102 $$ boolean found = false-->Line_130 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_22 $$ if (Shell.WINDOWS) [ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_19 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "scriptFile")[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_60 $$ rsrc_alpha.setType(LocalResourceType.FILE)[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_120 $$ Assert.assertEquals(user, containerLaunchContext.getEnvironment().get(Environment.USER.name()))[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_54 $$ fileWriter.close()[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_10 $$ userSetEnv.put(Environment.NM_HOST.name(), "user_set_NM_HOST")[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_38 $$ fileWriter.write("\numask 0")[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_12 $$ userSetEnv.put(Environment.NM_HTTP_PORT.name(), "user_set_NM_HTTP_PORT")[ CD ]
Line_56 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_64 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_26 $$ fileWriter.println("@echo " + Environment.NM_HTTP_PORT.$() + ">> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_13 $$ userSetEnv.put(Environment.LOCAL_DIRS.name(), "user_set_LOCAL_DIR")[ CD ]
Line_55 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())))-->Line_57 $$ rsrc_alpha.setResource(resource_alpha)[ FD ]
Line_69 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_70 $$ list.add(scRequest)[ FD ]
Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_101 $$ String obtainedPWD = reader.readLine()[ FD ]
Line_105 $$ found = true-->Line_130 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_136 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_72 $$ containerManager.startContainers(allRequests)[ CD ]
Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_99 $$ Assert.assertEquals(user, reader.readLine())[ FD ]
Line_101 $$ String obtainedPWD = reader.readLine()-->Line_104 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) [ FD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_52 $$ fileWriter.write("\nexec sleep 100")[ FD ]
Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_95 $$ Assert.assertEquals(context.getNodeId().getHost(), reader.readLine())[ FD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_125 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) [ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_135 $$ Assert.assertTrue("Process is not alive!", DefaultContainerExecutor.containerIsAlive(pid))[ CD ]
Line_68 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, Priority.newInstance(0), 0))-->Line_70 $$ list.add(scRequest)[ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_47 $$ fileWriter.write("\necho $" + Environment.HOME.name() + " >> " + processStartFile)[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_46 $$ fileWriter.write("\necho $" + Environment.PWD.name() + " >> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_138 $$ StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds)[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_40 $$ fileWriter.write("\necho $" + Environment.NM_HOST.name() + " >> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_130 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_33 $$ fileWriter.println("@echo %" + AuxiliaryServiceHelper.NM_AUX_SERVICE + serviceName + "%>> " + processStartFile)[ FD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_35 $$ fileWriter.println("@echo " + cId + ">> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_14 $$ userSetEnv.put(Environment.USER.key(), "user_set_" + Environment.USER.key())[ CD ]
Line_21 $$ File processStartFile = new File(tmpDir, "env_vars.txt").getAbsoluteFile()-->Line_78 $$ Assert.assertTrue("ProcessStartFile doesn't exist!", processStartFile.exists())[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_66 $$ List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile))[ CD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_123 $$ obtainedPWD = containerLaunchContext.getEnvironment().get(Environment.PWD.name())[ FD ]
Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_133 $$ Assert.assertEquals(null, reader.readLine())[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_141 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_144 $$ Assert.assertEquals(expectedExitCode, containerStatus.getExitStatus())[ CD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_115 $$ Assert.assertEquals(context.getNodeId().getHost(), containerLaunchContext.getEnvironment().get(Environment.NM_HOST.name()))[ FD ]
Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_94 $$ Assert.assertEquals(cId.toString(), reader.readLine())[ FD ]
Line_81 $$ List<Path> appDirs = new ArrayList<Path>(localDirs.size())-->Line_98 $$ Assert.assertEquals(StringUtils.join(",", appDirs), reader.readLine())[ FD ]
Line_8 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_13 $$ userSetEnv.put(Environment.LOCAL_DIRS.name(), "user_set_LOCAL_DIR")[ FD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_104 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) [ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_29 $$ fileWriter.println("@echo " + Environment.LOGNAME.$() + ">> " + processStartFile)[ CD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_120 $$ Assert.assertEquals(user, containerLaunchContext.getEnvironment().get(Environment.USER.name()))[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_131 $$ Assert.assertEquals(conf.get(YarnConfiguration.NM_USER_HOME_DIR, YarnConfiguration.DEFAULT_NM_USER_HOME_DIR), containerLaunchContext.getEnvironment().get(Environment.HOME.name()))[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_133 $$ Assert.assertEquals(null, reader.readLine())[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_134 $$ Assert.assertTrue("Process is not alive!", DefaultContainerExecutor.containerIsAlive(pid))[ CD ]
Line_138 $$ StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds)-->Line_139 $$ containerManager.stopContainers(stopRequest)[ FD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_137 $$ containerIds.add(cId)[ FD ]
Line_8 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_12 $$ userSetEnv.put(Environment.NM_HTTP_PORT.name(), "user_set_NM_HTTP_PORT")[ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_25 $$ fileWriter.println("@echo " + Environment.NM_PORT.$() + ">> " + processStartFile)[ CD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_35 $$ fileWriter.println("@echo " + cId + ">> " + processStartFile)[ CD ]
Line_71 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)-->Line_72 $$ containerManager.startContainers(allRequests)[ FD ]
Line_8 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_11 $$ userSetEnv.put(Environment.NM_PORT.name(), "user_set_NM_PORT")[ FD ]
Line_88 $$ List<String> containerLogDirs = new ArrayList<String>()-->Line_91 $$ containerLogDirs.add(logDir + Path.SEPARATOR + relativeContainerLogDir)[ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_23 $$ fileWriter.println("@echo " + Environment.CONTAINER_ID.$() + "> " + processStartFile)[ CD ]
Line_66 $$ List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile))-->Line_67 $$ containerLaunchContext.setCommands(commands)[ FD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_30 $$ fileWriter.println("@echo " + Environment.PWD.$() + ">> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1)[ CD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_44 $$ fileWriter.write("\necho $" + Environment.USER.name() + " >> " + processStartFile)[ CD ]
Line_102 $$ boolean found = false-->Line_122 $$ found = false[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_114 $$ Assert.assertEquals(cId.toString(), containerLaunchContext.getEnvironment().get(Environment.CONTAINER_ID.name()))[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_41 $$ fileWriter.write("\necho $" + Environment.NM_PORT.name() + " >> " + processStartFile)[ FD ]
Line_122 $$ found = false-->Line_126 $$ found = true[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_58 $$ rsrc_alpha.setSize(-1)[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_54 $$ fileWriter.close()[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_122 $$ found = false[ CD ]
Line_63 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_64 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_78 $$ Assert.assertTrue("ProcessStartFile doesn't exist!", processStartFile.exists())[ CD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_121 $$ Assert.assertEquals(user, containerLaunchContext.getEnvironment().get(Environment.LOGNAME.name()))[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_140 $$ BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE)[ CD ]
Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_96 $$ Assert.assertEquals(String.valueOf(context.getNodeId().getPort()), reader.readLine())[ FD ]
Line_56 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_58 $$ rsrc_alpha.setSize(-1)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_27 $$ fileWriter.println("@echo " + Environment.LOCAL_DIRS.$() + ">> " + processStartFile)[ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_36 $$ fileWriter.println("@ping -n 100 127.0.0.1 >nul")[ CD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_42 $$ fileWriter.write("\necho $" + Environment.NM_HTTP_PORT.name() + " >> " + processStartFile)[ CD ]
Line_19 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "scriptFile")-->Line_66 $$ List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile))[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_73 $$ int timeoutSecs = 0[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_39 $$ fileWriter.write("\necho $" + Environment.CONTAINER_ID.name() + " > " + processStartFile)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_117 $$ Assert.assertEquals(String.valueOf(HTTP_PORT), containerLaunchContext.getEnvironment().get(Environment.NM_HTTP_PORT.name()))[ CD ]
Line_56 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_57 $$ rsrc_alpha.setResource(resource_alpha)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_71 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ CD ]
Line_132 $$ String pid = reader.readLine().trim()-->Line_134 $$ Assert.assertTrue("Process is not alive!", DefaultContainerExecutor.containerIsAlive(pid))[ FD ]
Line_101 $$ String obtainedPWD = reader.readLine()-->Line_123 $$ obtainedPWD = containerLaunchContext.getEnvironment().get(Environment.PWD.name())[ FD ]
Line_69 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_71 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_88 $$ List<String> containerLogDirs = new ArrayList<String>()[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_142 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_55 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())))[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_132 $$ String pid = reader.readLine().trim()[ CD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_118 $$ Assert.assertEquals(StringUtils.join(",", appDirs), containerLaunchContext.getEnvironment().get(Environment.LOCAL_DIRS.name()))[ FD ]
Line_5 $$ ApplicationId appId = ApplicationId.newInstance(0, 0)-->Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_8 $$ Map<String, String> userSetEnv = new HashMap<String, String>()[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_49 $$ fileWriter.write("\necho $" + AuxiliaryServiceHelper.NM_AUX_SERVICE + serviceName + " >> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_89 $$ String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(appId.toString(), cId.toString())[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_18 $$ containerLaunchContext.setEnvironment(userSetEnv)[ CD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_67 $$ containerLaunchContext.setCommands(commands)[ FD ]
Line_56 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_60 $$ rsrc_alpha.setType(LocalResourceType.FILE)[ FD ]
Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)[ FD ]
Line_132 $$ String pid = reader.readLine().trim()-->Line_135 $$ Assert.assertTrue("Process is not alive!", DefaultContainerExecutor.containerIsAlive(pid))[ FD ]
Line_143 $$ int expectedExitCode = ContainerExitStatus.KILLED_BY_APPMASTER-->Line_144 $$ Assert.assertEquals(expectedExitCode, containerStatus.getExitStatus())[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_137 $$ containerIds.add(cId)[ CD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_30 $$ fileWriter.println("@echo " + Environment.PWD.$() + ">> " + processStartFile)[ CD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_40 $$ fileWriter.write("\necho $" + Environment.NM_HOST.name() + " >> " + processStartFile)[ CD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_68 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, Priority.newInstance(0), 0))[ FD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_119 $$ Assert.assertEquals(StringUtils.join(",", containerLogDirs), containerLaunchContext.getEnvironment().get(Environment.LOG_DIRS.name()))[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_56 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_81 $$ List<Path> appDirs = new ArrayList<Path>(localDirs.size())[ CD ]
Line_126 $$ found = true-->Line_130 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ FD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_131 $$ Assert.assertEquals(conf.get(YarnConfiguration.NM_USER_HOME_DIR, YarnConfiguration.DEFAULT_NM_USER_HOME_DIR), containerLaunchContext.getEnvironment().get(Environment.HOME.name()))[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_123 $$ obtainedPWD = containerLaunchContext.getEnvironment().get(Environment.PWD.name())[ CD ]
Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_112 $$ Assert.assertEquals(containerManager.getAuxServiceMetaData().get(serviceName), ByteBuffer.wrap(Base64.decodeBase64(reader.readLine().getBytes())))[ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_31 $$ fileWriter.println("@echo " + Environment.HOME.$() + ">> " + processStartFile)[ CD ]
Line_8 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_14 $$ userSetEnv.put(Environment.USER.key(), "user_set_" + Environment.USER.key())[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_110 $$ Assert.assertEquals(conf.get(YarnConfiguration.NM_USER_HOME_DIR, YarnConfiguration.DEFAULT_NM_USER_HOME_DIR), reader.readLine())[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_5 $$ ApplicationId appId = ApplicationId.newInstance(0, 0)[ CD ]
Line_62 $$ String destinationFile = "dest_file"-->Line_64 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_96 $$ Assert.assertEquals(String.valueOf(context.getNodeId().getPort()), reader.readLine())[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_43 $$ fileWriter.write("\necho $" + Environment.LOCAL_DIRS.name() + " >> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_64 $$ localResources.put(destinationFile, rsrc_alpha)[ CD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_89 $$ String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(appId.toString(), cId.toString())[ FD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_28 $$ fileWriter.println("@echo " + Environment.USER.$() + ">> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_101 $$ String obtainedPWD = reader.readLine()[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_42 $$ fileWriter.write("\necho $" + Environment.NM_HTTP_PORT.name() + " >> " + processStartFile)[ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_27 $$ fileWriter.println("@echo " + Environment.LOCAL_DIRS.$() + ">> " + processStartFile)[ CD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_140 $$ BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE)[ FD ]
Line_5 $$ ApplicationId appId = ApplicationId.newInstance(0, 0)-->Line_89 $$ String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(appId.toString(), cId.toString())[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_21 $$ File processStartFile = new File(tmpDir, "env_vars.txt").getAbsoluteFile()[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_116 $$ Assert.assertEquals(String.valueOf(context.getNodeId().getPort()), containerLaunchContext.getEnvironment().get(Environment.NM_PORT.name()))[ CD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_117 $$ Assert.assertEquals(String.valueOf(HTTP_PORT), containerLaunchContext.getEnvironment().get(Environment.NM_HTTP_PORT.name()))[ FD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_18 $$ containerLaunchContext.setEnvironment(userSetEnv)[ FD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_65 $$ containerLaunchContext.setLocalResources(localResources)[ FD ]
Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_98 $$ Assert.assertEquals(StringUtils.join(",", appDirs), reader.readLine())[ FD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_24 $$ fileWriter.println("@echo " + Environment.NM_HOST.$() + ">> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_59 $$ rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION)[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_15 $$ userSetEnv.put(Environment.LOGNAME.name(), "user_set_LOGNAME")[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_16 $$ userSetEnv.put(Environment.PWD.name(), "user_set_PWD")[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_68 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, Priority.newInstance(0), 0))[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_119 $$ Assert.assertEquals(StringUtils.join(",", containerLogDirs), containerLaunchContext.getEnvironment().get(Environment.LOG_DIRS.name()))[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_98 $$ Assert.assertEquals(StringUtils.join(",", appDirs), reader.readLine())[ CD ]
Line_136 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()-->Line_137 $$ containerIds.add(cId)[ FD ]
Line_141 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)-->Line_142 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)[ FD ]
Line_132 $$ String pid = reader.readLine().trim()-->Line_145 $$ Assert.assertFalse("Process is still alive!", DefaultContainerExecutor.containerIsAlive(pid))[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_3 $$ containerManager.start()[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_62 $$ String destinationFile = "dest_file"[ CD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_114 $$ Assert.assertEquals(cId.toString(), containerLaunchContext.getEnvironment().get(Environment.CONTAINER_ID.name()))[ FD ]
Line_104 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) -->Line_105 $$ found = true[ CD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_28 $$ fileWriter.println("@echo " + Environment.USER.$() + ">> " + processStartFile)[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_95 $$ Assert.assertEquals(context.getNodeId().getHost(), reader.readLine())[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_121 $$ Assert.assertEquals(user, containerLaunchContext.getEnvironment().get(Environment.LOGNAME.name()))[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_80 $$ List<String> logDirs = dirsHandler.getLogDirs()[ CD ]
Line_125 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) -->Line_126 $$ found = true[ CD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_41 $$ fileWriter.write("\necho $" + Environment.NM_PORT.name() + " >> " + processStartFile)[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_23 $$ fileWriter.println("@echo " + Environment.CONTAINER_ID.$() + "> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_63 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_31 $$ fileWriter.println("@echo " + Environment.HOME.$() + ">> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_145 $$ Assert.assertFalse("Process is still alive!", DefaultContainerExecutor.containerIsAlive(pid))[ CD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_24 $$ fileWriter.println("@echo " + Environment.NM_HOST.$() + ">> " + processStartFile)[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_61 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ CD ]
Line_8 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_16 $$ userSetEnv.put(Environment.PWD.name(), "user_set_PWD")[ FD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_29 $$ fileWriter.println("@echo " + Environment.LOGNAME.$() + ">> " + processStartFile)[ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_45 $$ fileWriter.write("\necho $" + Environment.LOGNAME.name() + " >> " + processStartFile)[ CD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_68 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, Priority.newInstance(0), 0))[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_74 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ CD ]
Line_73 $$ int timeoutSecs = 0-->Line_74 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ FD ]
Line_74 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) -->Line_76 $$ LOG.info("Waiting for process start-file to be created")[ CD ]
Line_32 $$ for (String serviceName : containerManager.getAuxServiceMetaData().keySet()) -->Line_112 $$ Assert.assertEquals(containerManager.getAuxServiceMetaData().get(serviceName), ByteBuffer.wrap(Base64.decodeBase64(reader.readLine().getBytes())))[ FD ]
Line_136 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()-->Line_138 $$ StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_11 $$ userSetEnv.put(Environment.NM_PORT.name(), "user_set_NM_PORT")[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_70 $$ list.add(scRequest)[ CD ]
Line_136 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()-->Line_141 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)[ FD ]
Line_105 $$ found = true-->Line_126 $$ found = true[ FD ]
Line_74 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) -->Line_75 $$ Thread.sleep(1000)[ CD ]
Line_105 $$ found = true-->Line_109 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_39 $$ fileWriter.write("\necho $" + Environment.CONTAINER_ID.name() + " > " + processStartFile)[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_25 $$ fileWriter.println("@echo " + Environment.NM_PORT.$() + ">> " + processStartFile)[ FD ]
Line_8 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_9 $$ userSetEnv.put(Environment.CONTAINER_ID.name(), "user_set_container_id")[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_17 $$ userSetEnv.put(Environment.HOME.name(), "user_set_HOME")[ CD ]
Line_8 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_18 $$ containerLaunchContext.setEnvironment(userSetEnv)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)[ CD ]
Line_102 $$ boolean found = false-->Line_105 $$ found = true[ FD ]
Line_81 $$ List<Path> appDirs = new ArrayList<Path>(localDirs.size())-->Line_118 $$ Assert.assertEquals(StringUtils.join(",", appDirs), containerLaunchContext.getEnvironment().get(Environment.LOCAL_DIRS.name()))[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_139 $$ containerManager.stopContainers(stopRequest)[ CD ]
Line_56 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_59 $$ rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION)[ FD ]
Line_8 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_17 $$ userSetEnv.put(Environment.HOME.name(), "user_set_HOME")[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_67 $$ containerLaunchContext.setCommands(commands)[ CD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_94 $$ Assert.assertEquals(cId.toString(), reader.readLine())[ FD ]
Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_110 $$ Assert.assertEquals(conf.get(YarnConfiguration.NM_USER_HOME_DIR, YarnConfiguration.DEFAULT_NM_USER_HOME_DIR), reader.readLine())[ FD ]
Line_142 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)-->Line_144 $$ Assert.assertEquals(expectedExitCode, containerStatus.getExitStatus())[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_97 $$ Assert.assertEquals(String.valueOf(HTTP_PORT), reader.readLine())[ CD ]
Line_5 $$ ApplicationId appId = ApplicationId.newInstance(0, 0)-->Line_86 $$ appDirs.add(new Path(appsdir, appId.toString()))[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_109 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ CD ]
Line_19 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "scriptFile")-->Line_61 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_94 $$ Assert.assertEquals(cId.toString(), reader.readLine())[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_100 $$ Assert.assertEquals(user, reader.readLine())[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_45 $$ fileWriter.write("\necho $" + Environment.LOGNAME.name() + " >> " + processStartFile)[ FD ]
Line_8 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_15 $$ userSetEnv.put(Environment.LOGNAME.name(), "user_set_LOGNAME")[ FD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_114 $$ Assert.assertEquals(cId.toString(), containerLaunchContext.getEnvironment().get(Environment.CONTAINER_ID.name()))[ FD ]
Line_105 $$ found = true-->Line_122 $$ found = false[ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_46 $$ fileWriter.write("\necho $" + Environment.PWD.name() + " >> " + processStartFile)[ CD ]
Line_101 $$ String obtainedPWD = reader.readLine()-->Line_125 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) [ FD ]
Line_21 $$ File processStartFile = new File(tmpDir, "env_vars.txt").getAbsoluteFile()-->Line_74 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_69 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_79 $$ List<String> localDirs = dirsHandler.getLocalDirs()[ CD ]
Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_97 $$ Assert.assertEquals(String.valueOf(HTTP_PORT), reader.readLine())[ FD ]
Line_93 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_100 $$ Assert.assertEquals(user, reader.readLine())[ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_26 $$ fileWriter.println("@echo " + Environment.NM_HTTP_PORT.$() + ">> " + processStartFile)[ CD ]
Line_122 $$ found = false-->Line_130 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_118 $$ Assert.assertEquals(StringUtils.join(",", appDirs), containerLaunchContext.getEnvironment().get(Environment.LOCAL_DIRS.name()))[ CD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_47 $$ fileWriter.write("\necho $" + Environment.HOME.name() + " >> " + processStartFile)[ FD ]
Line_81 $$ List<Path> appDirs = new ArrayList<Path>(localDirs.size())-->Line_86 $$ appDirs.add(new Path(appsdir, appId.toString()))[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_115 $$ Assert.assertEquals(context.getNodeId().getHost(), containerLaunchContext.getEnvironment().get(Environment.NM_HOST.name()))[ CD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_38 $$ fileWriter.write("\numask 0")[ CD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_116 $$ Assert.assertEquals(String.valueOf(context.getNodeId().getPort()), containerLaunchContext.getEnvironment().get(Environment.NM_PORT.name()))[ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_52 $$ fileWriter.write("\nexec sleep 100")[ CD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_43 $$ fileWriter.write("\necho $" + Environment.LOCAL_DIRS.name() + " >> " + processStartFile)[ CD ]
Line_8 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_10 $$ userSetEnv.put(Environment.NM_HOST.name(), "user_set_NM_HOST")[ FD ]
Line_102 $$ boolean found = false-->Line_126 $$ found = true[ FD ]
Line_56 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_61 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ FD ]
Line_20 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_44 $$ fileWriter.write("\necho $" + Environment.USER.name() + " >> " + processStartFile)[ FD ]
Line_19 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "scriptFile")-->Line_55 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())))[ FD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_57 $$ rsrc_alpha.setResource(resource_alpha)[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_65 $$ containerLaunchContext.setLocalResources(localResources)[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_99 $$ Assert.assertEquals(user, reader.readLine())[ CD ]
Line_2 $$ public void testContainerEnvVariables() throws Exception -->Line_102 $$ boolean found = false[ CD ]
