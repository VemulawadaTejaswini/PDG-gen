Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_15 $$ conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_12 $$ reader.close()[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_9 $$ Assert.assertEquals(conn.getResponseCode(), HttpURLConnection.HTTP_OK)[ FD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_16 $$ Assert.assertEquals(conn.getResponseCode(), HttpURLConnection.HTTP_BAD_REQUEST)[ CD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_6 $$ Assert.assertEquals(conn.getResponseCode(), HttpURLConnection.HTTP_UNAUTHORIZED)[ CD ]
Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))-->Line_12 $$ reader.close()[ FD ]
Line_8 $$ conn = (HttpURLConnection) url.openConnection()-->Line_16 $$ Assert.assertEquals(conn.getResponseCode(), HttpURLConnection.HTTP_BAD_REQUEST)[ FD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_4 $$ URL url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1?user.name=[ CD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_14 $$ url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1/foo?user.name=[ CD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_15 $$ conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_6 $$ Assert.assertEquals(conn.getResponseCode(), HttpURLConnection.HTTP_UNAUTHORIZED)[ FD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))[ FD ]
Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))-->Line_11 $$ String line = reader.readLine()[ FD ]
Line_4 $$ URL url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1?user.name=-->Line_15 $$ conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_14 $$ url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1/foo?user.name=-->Line_15 $$ conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_4 $$ URL url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1?user.name=-->Line_7 $$ url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1?user.name=[ FD ]
Line_7 $$ url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1?user.name=-->Line_8 $$ conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_11 $$ String line = reader.readLine()[ CD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_3 $$ createHttpFSServer(false)[ CD ]
Line_8 $$ conn = (HttpURLConnection) url.openConnection()-->Line_15 $$ conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_7 $$ url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1?user.name=[ CD ]
Line_8 $$ conn = (HttpURLConnection) url.openConnection()-->Line_9 $$ Assert.assertEquals(conn.getResponseCode(), HttpURLConnection.HTTP_OK)[ FD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_8 $$ conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_13 $$ Assert.assertTrue(line.contains("\"counters\":[ CD ]
Line_8 $$ conn = (HttpURLConnection) url.openConnection()-->Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))[ FD ]
Line_7 $$ url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1?user.name=-->Line_14 $$ url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1/foo?user.name=[ FD ]
Line_15 $$ conn = (HttpURLConnection) url.openConnection()-->Line_16 $$ Assert.assertEquals(conn.getResponseCode(), HttpURLConnection.HTTP_BAD_REQUEST)[ FD ]
Line_4 $$ URL url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1?user.name=-->Line_14 $$ url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1/foo?user.name=[ FD ]
Line_4 $$ URL url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1?user.name=-->Line_8 $$ conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_16 $$ Assert.assertEquals(conn.getResponseCode(), HttpURLConnection.HTTP_BAD_REQUEST)[ FD ]
Line_2 $$ public void instrumentation() throws Exception -->Line_9 $$ Assert.assertEquals(conn.getResponseCode(), HttpURLConnection.HTTP_OK)[ CD ]
Line_7 $$ url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1?user.name=-->Line_15 $$ conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_8 $$ conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_4 $$ URL url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1?user.name=-->Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_11 $$ String line = reader.readLine()-->Line_13 $$ Assert.assertTrue(line.contains("\"counters\":[ FD ]
