Line_8 $$ PrintWriter reportWriter = null-->Line_51 $$ reporter.basicReport(noOperations, reportWriter)[ FD ]
Line_21 $$ String op = (data.getOperationType())-->Line_22 $$ if (op != null) [ FD ]
Line_2 $$ private void writeReport(ConfigExtractor cfg) throws Exception -->Line_5 $$ FileSystem fs = dn.getFileSystem(cfg.getConfig())[ CD ]
Line_50 $$ if (!noOperations.isEmpty()) -->Line_51 $$ reporter.basicReport(noOperations, reportWriter)[ CD ]
Line_5 $$ FileSystem fs = dn.getFileSystem(cfg.getConfig())-->Line_6 $$ FileStatus[] reduceFiles = fs.listStatus(dn)[ FD ]
Line_2 $$ private void writeReport(ConfigExtractor cfg) throws Exception -->Line_3 $$ Path dn = cfg.getOutputPath()[ CD ]
Line_45 $$ reportWriter = new PrintWriter(new FileOutputStream(resFile))-->Line_60 $$ if (reportWriter != null) [ FD ]
Line_10 $$ List<OperationOutput> noOperations = new ArrayList<OperationOutput>()-->Line_50 $$ if (!noOperations.isEmpty()) [ FD ]
Line_2 $$ private void writeReport(ConfigExtractor cfg) throws Exception -->Line_41 $$ resFile = new File(cfg.getResultFile())[ FD ]
Line_15 $$ fileReader = new BufferedReader(new InputStreamReader(new DataInputStream(fs.open(fn.getPath()))))-->Line_17 $$ while ((line = fileReader.readLine()) != null) [ FD ]
Line_22 $$ if (op != null) -->Line_24 $$ if (opList == null) [ CD ]
Line_45 $$ reportWriter = new PrintWriter(new FileOutputStream(resFile))-->Line_54 $$ reporter.opReport(opType, splitTypes.get(opType), reportWriter)[ FD ]
Line_2 $$ private void writeReport(ConfigExtractor cfg) throws Exception -->Line_4 $$ LOG.info("Writing report using contents of " + dn)[ CD ]
Line_23 $$ List<OperationOutput> opList = splitTypes.get(op)-->Line_27 $$ opList.add(data)[ FD ]
Line_11 $$ Map<String, List<OperationOutput>> splitTypes = new TreeMap<String, List<OperationOutput>>()-->Line_54 $$ reporter.opReport(opType, splitTypes.get(opType), reportWriter)[ FD ]
Line_8 $$ PrintWriter reportWriter = null-->Line_60 $$ if (reportWriter != null) [ FD ]
Line_53 $$ for (String opType : splitTypes.keySet()) -->Line_54 $$ reporter.opReport(opType, splitTypes.get(opType), reportWriter)[ FD ]
Line_2 $$ private void writeReport(ConfigExtractor cfg) throws Exception -->Line_8 $$ PrintWriter reportWriter = null[ CD ]
Line_39 $$ File resFile = null-->Line_43 $$ if (resFile != null) [ FD ]
Line_17 $$ while ((line = fileReader.readLine()) != null) -->Line_18 $$ String[] pieces = line.split("\t", 2)[ FD ]
Line_57 $$ if (fileReader != null) -->Line_58 $$ fileReader.close()[ CD ]
Line_37 $$ fileReader = null-->Line_58 $$ fileReader.close()[ FD ]
Line_23 $$ List<OperationOutput> opList = splitTypes.get(op)-->Line_28 $$ splitTypes.put(op, opList)[ FD ]
Line_8 $$ PrintWriter reportWriter = null-->Line_61 $$ reportWriter.close()[ FD ]
Line_25 $$ opList = new ArrayList<OperationOutput>()-->Line_28 $$ splitTypes.put(op, opList)[ FD ]
Line_24 $$ if (opList == null) -->Line_25 $$ opList = new ArrayList<OperationOutput>()[ CD ]
Line_22 $$ if (op != null) -->Line_23 $$ List<OperationOutput> opList = splitTypes.get(op)[ CD ]
Line_20 $$ OperationOutput data = new OperationOutput(pieces[0], pieces[1])-->Line_21 $$ String op = (data.getOperationType())[ FD ]
Line_20 $$ OperationOutput data = new OperationOutput(pieces[0], pieces[1])-->Line_27 $$ opList.add(data)[ FD ]
Line_25 $$ opList = new ArrayList<OperationOutput>()-->Line_24 $$ if (opList == null) [ FD ]
Line_19 $$ if (pieces.length == 2) -->Line_21 $$ String op = (data.getOperationType())[ CD ]
Line_22 $$ if (op != null) -->Line_27 $$ opList.add(data)[ CD ]
Line_8 $$ PrintWriter reportWriter = null-->Line_45 $$ reportWriter = new PrintWriter(new FileOutputStream(resFile))[ FD ]
Line_7 $$ BufferedReader fileReader = null-->Line_15 $$ fileReader = new BufferedReader(new InputStreamReader(new DataInputStream(fs.open(fn.getPath()))))[ FD ]
Line_16 $$ String line-->Line_18 $$ String[] pieces = line.split("\t", 2)[ FD ]
Line_7 $$ BufferedReader fileReader = null-->Line_57 $$ if (fileReader != null) [ FD ]
Line_21 $$ String op = (data.getOperationType())-->Line_23 $$ List<OperationOutput> opList = splitTypes.get(op)[ FD ]
Line_49 $$ ReportWriter reporter = new ReportWriter()-->Line_51 $$ reporter.basicReport(noOperations, reportWriter)[ FD ]
Line_17 $$ while ((line = fileReader.readLine()) != null) -->Line_19 $$ if (pieces.length == 2) [ CD ]
Line_45 $$ reportWriter = new PrintWriter(new FileOutputStream(resFile))-->Line_61 $$ reportWriter.close()[ FD ]
Line_22 $$ if (op != null) -->Line_28 $$ splitTypes.put(op, opList)[ CD ]
Line_10 $$ List<OperationOutput> noOperations = new ArrayList<OperationOutput>()-->Line_30 $$ noOperations.add(data)[ FD ]
Line_43 $$ if (resFile != null) -->Line_44 $$ LOG.info("Report results being placed to logging output and to file " + resFile.getCanonicalPath())[ CD ]
Line_22 $$ if (op != null) -->Line_30 $$ noOperations.add(data)[ CD ]
Line_3 $$ Path dn = cfg.getOutputPath()-->Line_5 $$ FileSystem fs = dn.getFileSystem(cfg.getConfig())[ FD ]
Line_15 $$ fileReader = new BufferedReader(new InputStreamReader(new DataInputStream(fs.open(fn.getPath()))))-->Line_58 $$ fileReader.close()[ FD ]
Line_39 $$ File resFile = null-->Line_41 $$ resFile = new File(cfg.getResultFile())[ FD ]
Line_19 $$ if (pieces.length == 2) -->Line_22 $$ if (op != null) [ CD ]
Line_5 $$ FileSystem fs = dn.getFileSystem(cfg.getConfig())-->Line_15 $$ fileReader = new BufferedReader(new InputStreamReader(new DataInputStream(fs.open(fn.getPath()))))[ FD ]
Line_41 $$ resFile = new File(cfg.getResultFile())-->Line_43 $$ if (resFile != null) [ FD ]
Line_11 $$ Map<String, List<OperationOutput>> splitTypes = new TreeMap<String, List<OperationOutput>>()-->Line_28 $$ splitTypes.put(op, opList)[ FD ]
Line_43 $$ if (resFile != null) -->Line_47 $$ LOG.info("Report results being placed to logging output")[ CD ]
Line_41 $$ resFile = new File(cfg.getResultFile())-->Line_44 $$ LOG.info("Report results being placed to logging output and to file " + resFile.getCanonicalPath())[ FD ]
Line_16 $$ String line-->Line_17 $$ while ((line = fileReader.readLine()) != null) [ FD ]
Line_20 $$ OperationOutput data = new OperationOutput(pieces[0], pieces[1])-->Line_30 $$ noOperations.add(data)[ FD ]
Line_23 $$ List<OperationOutput> opList = splitTypes.get(op)-->Line_24 $$ if (opList == null) [ FD ]
Line_11 $$ Map<String, List<OperationOutput>> splitTypes = new TreeMap<String, List<OperationOutput>>()-->Line_23 $$ List<OperationOutput> opList = splitTypes.get(op)[ FD ]
Line_2 $$ private void writeReport(ConfigExtractor cfg) throws Exception -->Line_7 $$ BufferedReader fileReader = null[ CD ]
Line_12 $$ for (FileStatus fn : reduceFiles) -->Line_15 $$ fileReader = new BufferedReader(new InputStreamReader(new DataInputStream(fs.open(fn.getPath()))))[ FD ]
Line_43 $$ if (resFile != null) -->Line_45 $$ reportWriter = new PrintWriter(new FileOutputStream(resFile))[ CD ]
Line_39 $$ File resFile = null-->Line_44 $$ LOG.info("Report results being placed to logging output and to file " + resFile.getCanonicalPath())[ FD ]
Line_15 $$ fileReader = new BufferedReader(new InputStreamReader(new DataInputStream(fs.open(fn.getPath()))))-->Line_37 $$ fileReader = null[ FD ]
Line_10 $$ List<OperationOutput> noOperations = new ArrayList<OperationOutput>()-->Line_51 $$ reporter.basicReport(noOperations, reportWriter)[ FD ]
Line_3 $$ Path dn = cfg.getOutputPath()-->Line_6 $$ FileStatus[] reduceFiles = fs.listStatus(dn)[ FD ]
Line_37 $$ fileReader = null-->Line_57 $$ if (fileReader != null) [ FD ]
Line_2 $$ private void writeReport(ConfigExtractor cfg) throws Exception -->Line_3 $$ Path dn = cfg.getOutputPath()[ FD ]
Line_7 $$ BufferedReader fileReader = null-->Line_37 $$ fileReader = null[ FD ]
Line_40 $$ if (cfg.getResultFile() != null) -->Line_41 $$ resFile = new File(cfg.getResultFile())[ CD ]
Line_15 $$ fileReader = new BufferedReader(new InputStreamReader(new DataInputStream(fs.open(fn.getPath()))))-->Line_36 $$ fileReader.close()[ FD ]
Line_49 $$ ReportWriter reporter = new ReportWriter()-->Line_54 $$ reporter.opReport(opType, splitTypes.get(opType), reportWriter)[ FD ]
Line_23 $$ List<OperationOutput> opList = splitTypes.get(op)-->Line_25 $$ opList = new ArrayList<OperationOutput>()[ FD ]
Line_11 $$ Map<String, List<OperationOutput>> splitTypes = new TreeMap<String, List<OperationOutput>>()-->Line_53 $$ for (String opType : splitTypes.keySet()) [ FD ]
Line_2 $$ private void writeReport(ConfigExtractor cfg) throws Exception -->Line_6 $$ FileStatus[] reduceFiles = fs.listStatus(dn)[ CD ]
Line_15 $$ fileReader = new BufferedReader(new InputStreamReader(new DataInputStream(fs.open(fn.getPath()))))-->Line_57 $$ if (fileReader != null) [ FD ]
Line_25 $$ opList = new ArrayList<OperationOutput>()-->Line_27 $$ opList.add(data)[ FD ]
Line_21 $$ String op = (data.getOperationType())-->Line_28 $$ splitTypes.put(op, opList)[ FD ]
Line_45 $$ reportWriter = new PrintWriter(new FileOutputStream(resFile))-->Line_51 $$ reporter.basicReport(noOperations, reportWriter)[ FD ]
Line_7 $$ BufferedReader fileReader = null-->Line_36 $$ fileReader.close()[ FD ]
Line_8 $$ PrintWriter reportWriter = null-->Line_54 $$ reporter.opReport(opType, splitTypes.get(opType), reportWriter)[ FD ]
Line_17 $$ while ((line = fileReader.readLine()) != null) -->Line_18 $$ String[] pieces = line.split("\t", 2)[ CD ]
Line_7 $$ BufferedReader fileReader = null-->Line_17 $$ while ((line = fileReader.readLine()) != null) [ FD ]
Line_19 $$ if (pieces.length == 2) -->Line_20 $$ OperationOutput data = new OperationOutput(pieces[0], pieces[1])[ CD ]
Line_60 $$ if (reportWriter != null) -->Line_61 $$ reportWriter.close()[ CD ]
Line_2 $$ private void writeReport(ConfigExtractor cfg) throws Exception -->Line_5 $$ FileSystem fs = dn.getFileSystem(cfg.getConfig())[ FD ]
Line_12 $$ for (FileStatus fn : reduceFiles) -->Line_13 $$ if (!fn.getPath().getName().startsWith("part"))[ FD ]
Line_2 $$ private void writeReport(ConfigExtractor cfg) throws Exception -->Line_40 $$ if (cfg.getResultFile() != null) [ FD ]
Line_7 $$ BufferedReader fileReader = null-->Line_58 $$ fileReader.close()[ FD ]
