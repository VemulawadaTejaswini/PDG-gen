Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_7 $$ assertNotNull("zlibDecompressor is null!", zlibDecompressor)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY, false)[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_5 $$ assertFalse("ZlibFactory is using native libs against request", ZlibFactory.isNativeZlibLoaded(conf))[ CD ]
Line_12 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(f.toString()))))-->Line_14 $$ bw.write(msg)[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_19 $$ FileSystem fs = FileSystem.getLocal(conf)[ CD ]
Line_18 $$ Decompressor decompressor = CodecPool.getDecompressor(codec)-->Line_21 $$ is = codec.createInputStream(is, decompressor)[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_14 $$ bw.write(msg)[ CD ]
Line_13 $$ final String msg = "This is the message in the file!"-->Line_24 $$ assertEquals("Didn't get the same message back!", msg, line)[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_10 $$ String tmpDir = System.getProperty("test.build.data", "/tmp/")[ CD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_17 $$ CompressionCodec codec = ccf.getCodec(f)-->Line_21 $$ is = codec.createInputStream(is, decompressor)[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_20 $$ InputStream is = fs.open(f)[ CD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_16 $$ CompressionCodecFactory ccf = new CompressionCodecFactory(conf)[ CD ]
Line_22 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_25 $$ br.close()[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_8 $$ assertTrue("ZlibFactory returned unexpected inflator", zlibDecompressor instanceof BuiltInZlibInflater)[ CD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_21 $$ is = codec.createInputStream(is, decompressor)[ CD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_22 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_4 $$ conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY, false)[ CD ]
Line_6 $$ Decompressor zlibDecompressor = ZlibFactory.getZlibDecompressor(conf)-->Line_9 $$ CodecPool.returnDecompressor(zlibDecompressor)[ FD ]
Line_23 $$ String line = br.readLine()-->Line_24 $$ assertEquals("Didn't get the same message back!", msg, line)[ FD ]
Line_19 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_20 $$ InputStream is = fs.open(f)[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_24 $$ assertEquals("Didn't get the same message back!", msg, line)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_19 $$ FileSystem fs = FileSystem.getLocal(conf)[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_25 $$ br.close()[ CD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_12 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(f.toString()))))[ CD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_23 $$ String line = br.readLine()[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_6 $$ Decompressor zlibDecompressor = ZlibFactory.getZlibDecompressor(conf)[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_11 $$ Path f = new Path(new Path(tmpDir), "testGzipCodecRead.txt.gz")[ CD ]
Line_12 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(f.toString()))))-->Line_15 $$ bw.close()[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ assertFalse("ZlibFactory is using native libs against request", ZlibFactory.isNativeZlibLoaded(conf))[ FD ]
Line_13 $$ final String msg = "This is the message in the file!"-->Line_14 $$ bw.write(msg)[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_17 $$ CompressionCodec codec = ccf.getCodec(f)[ CD ]
Line_20 $$ InputStream is = fs.open(f)-->Line_21 $$ is = codec.createInputStream(is, decompressor)[ FD ]
Line_11 $$ Path f = new Path(new Path(tmpDir), "testGzipCodecRead.txt.gz")-->Line_12 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(f.toString()))))[ FD ]
Line_16 $$ CompressionCodecFactory ccf = new CompressionCodecFactory(conf)-->Line_17 $$ CompressionCodec codec = ccf.getCodec(f)[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_6 $$ Decompressor zlibDecompressor = ZlibFactory.getZlibDecompressor(conf)[ CD ]
Line_17 $$ CompressionCodec codec = ccf.getCodec(f)-->Line_18 $$ Decompressor decompressor = CodecPool.getDecompressor(codec)[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_13 $$ final String msg = "This is the message in the file!"[ CD ]
Line_11 $$ Path f = new Path(new Path(tmpDir), "testGzipCodecRead.txt.gz")-->Line_20 $$ InputStream is = fs.open(f)[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_9 $$ CodecPool.returnDecompressor(zlibDecompressor)[ CD ]
Line_6 $$ Decompressor zlibDecompressor = ZlibFactory.getZlibDecompressor(conf)-->Line_7 $$ assertNotNull("zlibDecompressor is null!", zlibDecompressor)[ FD ]
Line_11 $$ Path f = new Path(new Path(tmpDir), "testGzipCodecRead.txt.gz")-->Line_17 $$ CompressionCodec codec = ccf.getCodec(f)[ FD ]
Line_22 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_23 $$ String line = br.readLine()[ FD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_15 $$ bw.close()[ CD ]
Line_2 $$ public void testGzipCodecRead() throws IOException -->Line_18 $$ Decompressor decompressor = CodecPool.getDecompressor(codec)[ CD ]
