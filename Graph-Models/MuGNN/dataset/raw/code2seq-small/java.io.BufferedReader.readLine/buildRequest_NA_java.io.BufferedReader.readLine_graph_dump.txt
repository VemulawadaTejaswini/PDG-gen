Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_142 $$ final Class clazz = loadTestClass(suiteClassName)[ FD ]
Line_130 $$ return Request.aClass(clazz).filterWith(new Filter() -->Line_132 $$ if (description.isTest() && description.getDisplayName().startsWith("warning(junit.framework.TestSuite$")) [ FD ]
Line_12 $$ BufferedReader reader = new BufferedReader(new FileReader(suiteClassName.substring(1)))-->Line_14 $$ final String packageName = reader.readLine()[ FD ]
Line_49 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_103 $$ return ignoredTestFilter.shouldRun(description)[ FD ]
Line_51 $$ if (description.isTest()) -->Line_64 $$ if (testClass != null) [ CD ]
Line_101 $$ return classRequest.filterWith(new Filter() -->Line_135 $$ return methodFilter.shouldRun(description)[ FD ]
Line_19 $$ String line-->Line_30 $$ methodNames.add(line.substring(idx + 1))[ FD ]
Line_26 $$ if (methodNames == null) -->Line_27 $$ methodNames = new HashSet()[ CD ]
Line_20 $$ while ((line = reader.readLine()) != null) -->Line_22 $$ final int idx = line.indexOf(',')[ CD ]
Line_68 $$ if (idx > -1) -->Line_69 $$ return methods.contains(methodName.substring(0, idx))[ CD ]
Line_51 $$ if (description.isTest()) -->Line_53 $$ if (methods == null) [ CD ]
Line_132 $$ if (description.isTest() && description.getDisplayName().startsWith("warning(junit.framework.TestSuite$")) -->Line_133 $$ return true[ CD ]
Line_9 $$ if (suiteClassName.charAt(0) == '@') -->Line_151 $$ appendTestClass(result, suiteClassName)[ CD ]
Line_21 $$ String className = line-->Line_32 $$ appendTestClass(result, className)[ FD ]
Line_6 $$ Vector result = new Vector()-->Line_164 $$ return Request.classes(getArrayOfClasses(result))[ FD ]
Line_19 $$ String line-->Line_22 $$ final int idx = line.indexOf(',')[ FD ]
Line_56 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_128 $$ return Request.method(clazz, methodName)[ FD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_61 $$ return methodName.endsWith(name) && methods.contains(methodName.substring(0, methodName.length() - name.length()))[ FD ]
Line_12 $$ BufferedReader reader = new BufferedReader(new FileReader(suiteClassName.substring(1)))-->Line_17 $$ final String categoryName = reader.readLine()[ FD ]
Line_141 $$ if (name != null && suiteClassNames.length == 1) -->Line_142 $$ final Class clazz = loadTestClass(suiteClassName)[ CD ]
Line_18 $$ final Class category = categoryName != null && categoryName.length() > 0 ? loadTestClass(categoryName) : null-->Line_43 $$ allClasses = JUnit46ClassesRequestBuilder.getClassesRequest(suiteName, classes, classMethods, category)[ FD ]
Line_3 $$ if (suiteClassNames.length == 0) -->Line_4 $$ return null[ CD ]
Line_67 $$ final int idx = methodName.indexOf("[")-->Line_68 $$ if (idx > -1) [ FD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_3 $$ if (suiteClassNames.length == 0) [ CD ]
Line_51 $$ if (description.isTest()) -->Line_60 $$ if (name != null) [ CD ]
Line_51 $$ if (description.isTest()) -->Line_57 $$ if (methods.contains(methodName)) [ CD ]
Line_52 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))-->Line_57 $$ if (methods.contains(methodName)) [ FD ]
Line_20 $$ while ((line = reader.readLine()) != null) -->Line_23 $$ if (idx != -1) [ CD ]
Line_25 $$ Set methodNames = (Set) classMethods.get(className)-->Line_28 $$ classMethods.put(className, methodNames)[ FD ]
Line_64 $$ if (testClass != null) -->Line_65 $$ final RunWith classAnnotation = (RunWith) testClass.getAnnotation(RunWith.class)[ CD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_92 $$ final String methodName = suiteClassName.substring(index + 1)[ FD ]
Line_157 $$ if (clazz.getAnnotation(Ignore.class) != null) -->Line_158 $$ return createIgnoreIgnoredClassRequest(clazz, false)[ CD ]
Line_19 $$ String line-->Line_20 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_11 $$ final Map classMethods = new HashMap()-->Line_25 $$ Set methodNames = (Set) classMethods.get(className)[ FD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_89 $$ int index = suiteClassName.indexOf(',')[ FD ]
Line_95 $$ if (clazzAnnotation == null) -->Line_114 $$ if (request != null) [ CD ]
Line_15 $$ if (packageName == null)-->Line_16 $$ return null[ CD ]
Line_143 $$ if (clazz != null) -->Line_145 $$ final Request request = getParameterizedRequest(name, null, clazz, clazzAnnotation)[ CD ]
Line_23 $$ if (idx != -1) -->Line_25 $$ Set methodNames = (Set) classMethods.get(className)[ CD ]
Line_56 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_94 $$ final Description testMethodDescription = Description.createTestDescription(clazz, methodName)[ FD ]
Line_22 $$ final int idx = line.indexOf(',')-->Line_24 $$ className = line.substring(0, idx)[ FD ]
Line_23 $$ if (idx != -1) -->Line_30 $$ methodNames.add(line.substring(idx + 1))[ CD ]
Line_130 $$ return Request.aClass(clazz).filterWith(new Filter() -->Line_132 $$ if (description.isTest() && description.getDisplayName().startsWith("warning(junit.framework.TestSuite$")) [ CD ]
Line_90 $$ if (index != -1) -->Line_141 $$ if (name != null && suiteClassNames.length == 1) [ CD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_164 $$ return Request.classes(getArrayOfClasses(result))[ CD ]
Line_25 $$ Set methodNames = (Set) classMethods.get(className)-->Line_26 $$ if (methodNames == null) [ FD ]
Line_56 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_69 $$ return methods.contains(methodName.substring(0, idx))[ FD ]
Line_19 $$ String line-->Line_24 $$ className = line.substring(0, idx)[ FD ]
Line_36 $$ if (classes.length == 0) -->Line_38 $$ return null[ CD ]
Line_90 $$ if (index != -1) -->Line_91 $$ final Class clazz = loadTestClass(suiteClassName.substring(0, index))[ CD ]
Line_25 $$ Set methodNames = (Set) classMethods.get(className)-->Line_27 $$ methodNames = new HashSet()[ FD ]
Line_63 $$ final Class testClass = description.getTestClass()-->Line_64 $$ if (testClass != null) [ FD ]
Line_63 $$ final Class testClass = description.getTestClass()-->Line_65 $$ final RunWith classAnnotation = (RunWith) testClass.getAnnotation(RunWith.class)[ FD ]
Line_56 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_97 $$ final Method method = clazz.getMethod(methodName, null)[ FD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_12 $$ BufferedReader reader = new BufferedReader(new FileReader(suiteClassName.substring(1)))[ FD ]
Line_49 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_78 $$ return "Tests"[ CD ]
Line_23 $$ if (idx != -1) -->Line_24 $$ className = line.substring(0, idx)[ CD ]
Line_51 $$ if (description.isTest()) -->Line_73 $$ return false[ CD ]
Line_90 $$ if (index != -1) -->Line_95 $$ if (clazzAnnotation == null) [ CD ]
Line_101 $$ return classRequest.filterWith(new Filter() -->Line_103 $$ return ignoredTestFilter.shouldRun(description)[ CD ]
Line_90 $$ if (index != -1) -->Line_130 $$ return Request.aClass(clazz).filterWith(new Filter() [ CD ]
Line_27 $$ methodNames = new HashSet()-->Line_30 $$ methodNames.add(line.substring(idx + 1))[ FD ]
Line_66 $$ if (classAnnotation != null && Parameterized.class.isAssignableFrom(classAnnotation.value())) -->Line_68 $$ if (idx > -1) [ CD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_91 $$ final Class clazz = loadTestClass(suiteClassName.substring(0, index))[ FD ]
Line_22 $$ final int idx = line.indexOf(',')-->Line_69 $$ return methods.contains(methodName.substring(0, idx))[ FD ]
Line_11 $$ final Map classMethods = new HashMap()-->Line_28 $$ classMethods.put(className, methodNames)[ FD ]
Line_49 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_51 $$ if (description.isTest()) [ FD ]
Line_7 $$ for (int i = 0; i < suiteClassNames.length; i++) -->Line_8 $$ String suiteClassName = suiteClassNames[i][ CD ]
Line_119 $$ if (clazz.getMethod("suite", new Class[0]) != null && !methodName.equals("suite")) -->Line_120 $$ return Request.classWithoutSuiteMethod(clazz).filterWith(testMethodDescription)[ CD ]
Line_36 $$ if (classes.length == 0) -->Line_37 $$ System.out.println(TestRunnerUtil.testsFoundInPackageMesage(0, suiteName))[ CD ]
Line_24 $$ className = line.substring(0, idx)-->Line_32 $$ appendTestClass(result, className)[ FD ]
Line_20 $$ while ((line = reader.readLine()) != null) -->Line_21 $$ String className = line[ CD ]
Line_22 $$ final int idx = line.indexOf(',')-->Line_68 $$ if (idx > -1) [ FD ]
Line_52 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))-->Line_61 $$ return methodName.endsWith(name) && methods.contains(methodName.substring(0, methodName.length() - name.length()))[ FD ]
Line_56 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_61 $$ return methodName.endsWith(name) && methods.contains(methodName.substring(0, methodName.length() - name.length()))[ FD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_7 $$ for (int i = 0; i < suiteClassNames.length; i++) [ CD ]
Line_114 $$ if (request != null) -->Line_115 $$ return request[ CD ]
Line_146 $$ if (request != null) -->Line_147 $$ return request[ CD ]
Line_17 $$ final String categoryName = reader.readLine()-->Line_18 $$ final Class category = categoryName != null && categoryName.length() > 0 ? loadTestClass(categoryName) : null[ FD ]
Line_11 $$ final Map classMethods = new HashMap()-->Line_52 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))[ FD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_113 $$ final Request request = getParameterizedRequest(name, methodName, clazz, clazzAnnotation)[ FD ]
Line_98 $$ if (method != null && notForked && (method.getAnnotation(Ignore.class) != null || clazz.getAnnotation(Ignore.class) != null)) -->Line_99 $$ final Request classRequest = createIgnoreIgnoredClassRequest(clazz, true)[ CD ]
Line_21 $$ String className = line-->Line_25 $$ Set methodNames = (Set) classMethods.get(className)[ FD ]
Line_49 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_63 $$ final Class testClass = description.getTestClass()[ FD ]
Line_56 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_119 $$ if (clazz.getMethod("suite", new Class[0]) != null && !methodName.equals("suite")) [ FD ]
Line_141 $$ if (name != null && suiteClassNames.length == 1) -->Line_143 $$ if (clazz != null) [ CD ]
Line_67 $$ final int idx = methodName.indexOf("[")-->Line_69 $$ return methods.contains(methodName.substring(0, idx))[ FD ]
Line_20 $$ while ((line = reader.readLine()) != null) -->Line_22 $$ final int idx = line.indexOf(',')[ FD ]
Line_24 $$ className = line.substring(0, idx)-->Line_25 $$ Set methodNames = (Set) classMethods.get(className)[ FD ]
Line_90 $$ if (index != -1) -->Line_94 $$ final Description testMethodDescription = Description.createTestDescription(clazz, methodName)[ CD ]
Line_130 $$ return Request.aClass(clazz).filterWith(new Filter() -->Line_135 $$ return methodFilter.shouldRun(description)[ FD ]
Line_64 $$ if (testClass != null) -->Line_66 $$ if (classAnnotation != null && Parameterized.class.isAssignableFrom(classAnnotation.value())) [ CD ]
Line_21 $$ String className = line-->Line_24 $$ className = line.substring(0, idx)[ FD ]
Line_23 $$ if (idx != -1) -->Line_26 $$ if (methodNames == null) [ CD ]
Line_56 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_113 $$ final Request request = getParameterizedRequest(name, methodName, clazz, clazzAnnotation)[ FD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_151 $$ appendTestClass(result, suiteClassName)[ FD ]
Line_101 $$ return classRequest.filterWith(new Filter() -->Line_106 $$ return "Ignored " + methodName[ CD ]
Line_98 $$ if (method != null && notForked && (method.getAnnotation(Ignore.class) != null || clazz.getAnnotation(Ignore.class) != null)) -->Line_101 $$ return classRequest.filterWith(new Filter() [ CD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_9 $$ if (suiteClassName.charAt(0) == '@') [ FD ]
Line_11 $$ final Map classMethods = new HashMap()-->Line_49 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() [ FD ]
Line_101 $$ return classRequest.filterWith(new Filter() -->Line_103 $$ return ignoredTestFilter.shouldRun(description)[ FD ]
Line_60 $$ if (name != null) -->Line_61 $$ return methodName.endsWith(name) && methods.contains(methodName.substring(0, methodName.length() - name.length()))[ CD ]
Line_101 $$ return classRequest.filterWith(new Filter() -->Line_132 $$ if (description.isTest() && description.getDisplayName().startsWith("warning(junit.framework.TestSuite$")) [ FD ]
Line_56 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_67 $$ final int idx = methodName.indexOf("[")[ FD ]
Line_26 $$ if (methodNames == null) -->Line_28 $$ classMethods.put(className, methodNames)[ CD ]
Line_9 $$ if (suiteClassName.charAt(0) == '@') -->Line_90 $$ if (index != -1) [ CD ]
Line_12 $$ BufferedReader reader = new BufferedReader(new FileReader(suiteClassName.substring(1)))-->Line_82 $$ reader.close()[ FD ]
Line_95 $$ if (clazzAnnotation == null) -->Line_113 $$ final Request request = getParameterizedRequest(name, methodName, clazz, clazzAnnotation)[ CD ]
Line_27 $$ methodNames = new HashSet()-->Line_26 $$ if (methodNames == null) [ FD ]
Line_49 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_51 $$ if (description.isTest()) [ CD ]
Line_49 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_52 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))[ FD ]
Line_20 $$ while ((line = reader.readLine()) != null) -->Line_32 $$ appendTestClass(result, className)[ CD ]
Line_22 $$ final int idx = line.indexOf(',')-->Line_23 $$ if (idx != -1) [ FD ]
Line_6 $$ Vector result = new Vector()-->Line_32 $$ appendTestClass(result, className)[ FD ]
Line_24 $$ className = line.substring(0, idx)-->Line_28 $$ classMethods.put(className, methodNames)[ FD ]
Line_25 $$ Set methodNames = (Set) classMethods.get(className)-->Line_30 $$ methodNames.add(line.substring(idx + 1))[ FD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_145 $$ final Request request = getParameterizedRequest(name, null, clazz, clazzAnnotation)[ FD ]
Line_12 $$ BufferedReader reader = new BufferedReader(new FileReader(suiteClassName.substring(1)))-->Line_20 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_98 $$ if (method != null && notForked && (method.getAnnotation(Ignore.class) != null || clazz.getAnnotation(Ignore.class) != null)) -->Line_100 $$ final Filter ignoredTestFilter = Filter.matchMethodDescription(testMethodDescription)[ CD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_6 $$ Vector result = new Vector()[ CD ]
Line_21 $$ String className = line-->Line_28 $$ classMethods.put(className, methodNames)[ FD ]
Line_52 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))-->Line_69 $$ return methods.contains(methodName.substring(0, idx))[ FD ]
Line_7 $$ for (int i = 0; i < suiteClassNames.length; i++) -->Line_9 $$ if (suiteClassName.charAt(0) == '@') [ CD ]
Line_56 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_57 $$ if (methods.contains(methodName)) [ FD ]
Line_51 $$ if (description.isTest()) -->Line_63 $$ final Class testClass = description.getTestClass()[ CD ]
Line_65 $$ final RunWith classAnnotation = (RunWith) testClass.getAnnotation(RunWith.class)-->Line_66 $$ if (classAnnotation != null && Parameterized.class.isAssignableFrom(classAnnotation.value())) [ FD ]
Line_49 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_132 $$ if (description.isTest() && description.getDisplayName().startsWith("warning(junit.framework.TestSuite$")) [ FD ]
Line_49 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_135 $$ return methodFilter.shouldRun(description)[ FD ]
Line_130 $$ return Request.aClass(clazz).filterWith(new Filter() -->Line_135 $$ return methodFilter.shouldRun(description)[ CD ]
Line_49 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_75 $$ return true[ CD ]
Line_6 $$ Vector result = new Vector()-->Line_151 $$ appendTestClass(result, suiteClassName)[ FD ]
Line_9 $$ if (suiteClassName.charAt(0) == '@') -->Line_89 $$ int index = suiteClassName.indexOf(',')[ CD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_60 $$ if (name != null) [ FD ]
Line_6 $$ Vector result = new Vector()-->Line_154 $$ if (result.size() == 1) [ FD ]
Line_14 $$ final String packageName = reader.readLine()-->Line_15 $$ if (packageName == null)[ FD ]
Line_90 $$ if (index != -1) -->Line_92 $$ final String methodName = suiteClassName.substring(index + 1)[ CD ]
Line_51 $$ if (description.isTest()) -->Line_56 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)[ CD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_154 $$ if (result.size() == 1) [ CD ]
Line_14 $$ final String packageName = reader.readLine()-->Line_34 $$ String suiteName = packageName.length() == 0 ? "<default package>" : packageName[ FD ]
Line_49 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_56 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)[ FD ]
Line_57 $$ if (methods.contains(methodName)) -->Line_58 $$ return true[ CD ]
Line_20 $$ while ((line = reader.readLine()) != null) -->Line_30 $$ methodNames.add(line.substring(idx + 1))[ FD ]
Line_154 $$ if (result.size() == 1) -->Line_162 $$ return Request.aClass(clazz)[ CD ]
Line_130 $$ return Request.aClass(clazz).filterWith(new Filter() -->Line_138 $$ return methodFilter.describe()[ CD ]
Line_143 $$ if (clazz != null) -->Line_146 $$ if (request != null) [ CD ]
Line_6 $$ Vector result = new Vector()-->Line_35 $$ Class[] classes = getArrayOfClasses(result)[ FD ]
Line_51 $$ if (description.isTest()) -->Line_52 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))[ CD ]
Line_53 $$ if (methods == null) -->Line_54 $$ return true[ CD ]
Line_6 $$ Vector result = new Vector()-->Line_155 $$ final Class clazz = (Class) result.get(0)[ FD ]
Line_20 $$ while ((line = reader.readLine()) != null) -->Line_24 $$ className = line.substring(0, idx)[ FD ]
Line_11 $$ final Map classMethods = new HashMap()-->Line_43 $$ allClasses = JUnit46ClassesRequestBuilder.getClassesRequest(suiteName, classes, classMethods, category)[ FD ]
Line_66 $$ if (classAnnotation != null && Parameterized.class.isAssignableFrom(classAnnotation.value())) -->Line_67 $$ final int idx = methodName.indexOf("[")[ CD ]
Line_27 $$ methodNames = new HashSet()-->Line_28 $$ classMethods.put(className, methodNames)[ FD ]
Line_52 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))-->Line_53 $$ if (methods == null) [ FD ]
