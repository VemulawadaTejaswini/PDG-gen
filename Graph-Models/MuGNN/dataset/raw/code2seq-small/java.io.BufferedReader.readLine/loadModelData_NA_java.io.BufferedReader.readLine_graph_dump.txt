Line_163 $$ if (uvs.size > 0)-->Line_164 $$ uvs.clear()[ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_106 $$ if (hasNorms) [ CD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_89 $$ if (groups.size < 1)[ CD ]
Line_107 $$ int normIndex = faces.get(i++) * 3-->Line_109 $$ finalVerts[vi++] = norms.get(normIndex++)[ FD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_57 $$ parts = tokens[++i].split("/")[ FD ]
Line_7 $$ char firstChar-->Line_35 $$ if (firstChar == 'f') [ FD ]
Line_159 $$ if (verts.size > 0)-->Line_160 $$ verts.clear()[ CD ]
Line_11 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(file.read()), 4096)-->Line_79 $$ reader.close()[ FD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_103 $$ finalVerts[vi++] = verts.get(vertIndex++)[ CD ]
Line_36 $$ String[] parts-->Line_51 $$ parts = tokens[++i].split("/")[ FD ]
Line_39 $$ parts = tokens[1].split("/")-->Line_57 $$ parts = tokens[++i].split("/")[ FD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_83 $$ for (int i = 0; i < groups.size; i++) [ FD ]
Line_23 $$ if (tokens[0].length() == 1) -->Line_24 $$ verts.add(Float.parseFloat(tokens[1]))[ CD ]
Line_83 $$ for (int i = 0; i < groups.size; i++) -->Line_102 $$ int vertIndex = faces.get(i++) * 3[ FD ]
Line_37 $$ Array<Integer> faces = activeGroup.faces-->Line_113 $$ int uvIndex = faces.get(i++) * 2[ FD ]
Line_14 $$ while ((line = reader.readLine()) != null) -->Line_18 $$ if (tokens[0].length() == 0) [ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_113 $$ int uvIndex = faces.get(i++) * 2[ FD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_61 $$ if (parts.length > 1 && parts[1].length() > 0)[ CD ]
Line_11 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(file.read()), 4096)-->Line_14 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_106 $$ if (hasNorms) -->Line_108 $$ finalVerts[vi++] = norms.get(normIndex++)[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_153 $$ mesh.parts = new ModelMeshPart[] [ CD ]
Line_41 $$ if (parts.length > 2) -->Line_44 $$ faces.add(getIndex(parts[2], norms.size))[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_157 $$ data.materials.add(mm)[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_63 $$ activeGroup.numFaces++[ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_108 $$ finalVerts[vi++] = norms.get(normIndex++)[ FD ]
Line_161 $$ if (norms.size > 0)-->Line_162 $$ norms.clear()[ CD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_163 $$ if (uvs.size > 0)[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_51 $$ parts = tokens[++i].split("/")[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_57 $$ parts = tokens[++i].split("/")[ CD ]
Line_23 $$ if (tokens[0].length() == 1) -->Line_27 $$ if (tokens[0].charAt(1) == 'n') [ CD ]
Line_35 $$ if (firstChar == 'f') -->Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) [ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_121 $$ for (int i = 0; i < numIndices; i++) [ FD ]
Line_95 $$ Array<Integer> faces = group.faces-->Line_102 $$ int vertIndex = faces.get(i++) * 3[ FD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_6 $$ String[] tokens[ CD ]
Line_61 $$ if (parts.length > 1 && parts[1].length() > 0)-->Line_62 $$ faces.add(getIndex(parts[1], uvs.size))[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_102 $$ int vertIndex = faces.get(i++) * 3[ FD ]
Line_65 $$ if (firstChar == 'o' || firstChar == 'g') -->Line_66 $$ if (tokens.length > 1)[ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_107 $$ int normIndex = faces.get(i++) * 3[ FD ]
Line_83 $$ for (int i = 0; i < groups.size; i++) -->Line_86 $$ i--[ FD ]
Line_89 $$ if (groups.size < 1)-->Line_90 $$ return null[ CD ]
Line_72 $$ if (tokens[0].equals("usemtl")) -->Line_73 $$ if (tokens.length == 1)[ CD ]
Line_37 $$ Array<Integer> faces = activeGroup.faces-->Line_58 $$ faces.add(getIndex(parts[0], verts.size))[ FD ]
Line_41 $$ if (parts.length > 2) -->Line_42 $$ if (i == 1)[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_96 $$ final int numElements = faces.size[ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_115 $$ finalVerts[vi++] = uvs.get(uvIndex)[ FD ]
Line_37 $$ Array<Integer> faces = activeGroup.faces-->Line_40 $$ faces.add(getIndex(parts[0], verts.size))[ FD ]
Line_5 $$ String line-->Line_15 $$ tokens = line.split("\\s+")[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_94 $$ Group group = groups.get(g)[ CD ]
Line_59 $$ if (parts.length > 2)-->Line_60 $$ faces.add(getIndex(parts[2], norms.size))[ CD ]
Line_83 $$ for (int i = 0; i < groups.size; i++) -->Line_113 $$ int uvIndex = faces.get(i++) * 2[ FD ]
Line_3 $$ if (logWarning)-->Line_4 $$ Gdx.app.error("ObjLoader", "Wavefront (OBJ) is not fully supported, consult the documentation for more information")[ CD ]
Line_23 $$ if (tokens[0].length() == 1) -->Line_25 $$ verts.add(Float.parseFloat(tokens[2]))[ CD ]
Line_31 $$ if (tokens[0].charAt(1) == 't') -->Line_33 $$ uvs.add((flipV ? 1 - Float.parseFloat(tokens[2]) : Float.parseFloat(tokens[2])))[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_99 $$ final boolean hasUVs = group.hasUVs[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) [ FD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_8 $$ MtlLoader mtl = new MtlLoader()[ CD ]
Line_9 $$ Group activeGroup = new Group("default")-->Line_67 $$ activeGroup = setActiveGroup(tokens[1])[ FD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_104 $$ finalVerts[vi++] = verts.get(vertIndex++)[ FD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_121 $$ for (int i = 0; i < numIndices; i++) [ FD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_46 $$ if (parts.length > 1 && parts[1].length() > 0) [ CD ]
Line_66 $$ if (tokens.length > 1)-->Line_67 $$ activeGroup = setActiveGroup(tokens[1])[ CD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_83 $$ for (int i = 0; i < groups.size; i++) [ CD ]
Line_8 $$ MtlLoader mtl = new MtlLoader()-->Line_156 $$ ModelMaterial mm = mtl.getMaterial(group.materialName)[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_127 $$ if (hasNorms)[ CD ]
Line_12 $$ int id = 0-->Line_131 $$ String stringId = Integer.toString(++id)[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_144 $$ node.parts = new ModelNodePart[] [ CD ]
Line_102 $$ int vertIndex = faces.get(i++) * 3-->Line_104 $$ finalVerts[vi++] = verts.get(vertIndex++)[ FD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_159 $$ if (verts.size > 0)[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_59 $$ if (parts.length > 2)[ CD ]
Line_91 $$ final int numGroups = groups.size-->Line_93 $$ for (int g = 0; g < numGroups; g++) [ FD ]
Line_7 $$ char firstChar-->Line_22 $$ if (firstChar == 'v') [ FD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_40 $$ faces.add(getIndex(parts[0], verts.size))[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_140 $$ node.rotation = new Quaternion()[ CD ]
Line_46 $$ if (parts.length > 1 && parts[1].length() > 0) -->Line_47 $$ if (i == 1)[ CD ]
Line_100 $$ final float[] finalVerts = new float[(numFaces * 3) * (3 + (hasNorms ? 3 : 0) + (hasUVs ? 2 : 0))]-->Line_152 $$ mesh.vertices = finalVerts[ FD ]
Line_22 $$ if (firstChar == 'v') -->Line_23 $$ if (tokens[0].length() == 1) [ CD ]
Line_39 $$ parts = tokens[1].split("/")-->Line_51 $$ parts = tokens[++i].split("/")[ FD ]
Line_37 $$ Array<Integer> faces = activeGroup.faces-->Line_62 $$ faces.add(getIndex(parts[1], uvs.size))[ FD ]
Line_18 $$ if (tokens[0].length() == 0) -->Line_20 $$ if ((firstChar = tokens[0].toLowerCase().charAt(0)) == '#') [ CD ]
Line_66 $$ if (tokens.length > 1)-->Line_69 $$ activeGroup = setActiveGroup("default")[ CD ]
Line_70 $$ if (tokens[0].equals("mtllib")) -->Line_71 $$ mtl.load(file.parent().child(tokens[1]))[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_47 $$ if (i == 1)[ FD ]
Line_42 $$ if (i == 1)-->Line_43 $$ activeGroup.hasNorms = true[ CD ]
Line_37 $$ Array<Integer> faces = activeGroup.faces-->Line_54 $$ faces.add(getIndex(parts[2], norms.size))[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_98 $$ final boolean hasNorms = group.hasNorms[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_131 $$ String stringId = Integer.toString(++id)[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_52 $$ faces.add(getIndex(parts[0], verts.size))[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_95 $$ Array<Integer> faces = group.faces[ CD ]
Line_22 $$ if (firstChar == 'v') -->Line_35 $$ if (firstChar == 'f') [ CD ]
Line_37 $$ Array<Integer> faces = activeGroup.faces-->Line_52 $$ faces.add(getIndex(parts[0], verts.size))[ FD ]
Line_113 $$ int uvIndex = faces.get(i++) * 2-->Line_115 $$ finalVerts[vi++] = uvs.get(uvIndex)[ FD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_53 $$ if (parts.length > 2)[ CD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_5 $$ String line[ CD ]
Line_27 $$ if (tokens[0].charAt(1) == 'n') -->Line_29 $$ norms.add(Float.parseFloat(tokens[2]))[ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_112 $$ if (hasUVs) [ CD ]
Line_106 $$ if (hasNorms) -->Line_110 $$ finalVerts[vi++] = norms.get(normIndex)[ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_114 $$ finalVerts[vi++] = uvs.get(uvIndex++)[ FD ]
Line_37 $$ Array<Integer> faces = activeGroup.faces-->Line_60 $$ faces.add(getIndex(parts[2], norms.size))[ FD ]
Line_73 $$ if (tokens.length == 1)-->Line_74 $$ activeGroup.materialName = "default"[ CD ]
Line_36 $$ String[] parts-->Line_39 $$ parts = tokens[1].split("/")[ FD ]
Line_83 $$ for (int i = 0; i < groups.size; i++) -->Line_121 $$ for (int i = 0; i < numIndices; i++) [ FD ]
Line_95 $$ Array<Integer> faces = group.faces-->Line_107 $$ int normIndex = faces.get(i++) * 3[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_129 $$ if (hasUVs)[ CD ]
Line_73 $$ if (tokens.length == 1)-->Line_76 $$ activeGroup.materialName = tokens[1].replace('.', '_')[ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_109 $$ finalVerts[vi++] = norms.get(normIndex++)[ FD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_167 $$ return data[ CD ]
Line_95 $$ Array<Integer> faces = group.faces-->Line_113 $$ int uvIndex = faces.get(i++) * 2[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_138 $$ node.scale = new Vector3(1, 1, 1)[ CD ]
Line_14 $$ while ((line = reader.readLine()) != null) -->Line_15 $$ tokens = line.split("\\s+")[ CD ]
Line_84 $$ if (groups.get(i).numFaces < 1) -->Line_85 $$ groups.removeIndex(i)[ CD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_10 $$ groups.add(activeGroup)[ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_102 $$ int vertIndex = faces.get(i++) * 3[ CD ]
Line_37 $$ Array<Integer> faces = activeGroup.faces-->Line_56 $$ faces.add(getIndex(parts[1], uvs.size))[ FD ]
Line_14 $$ while ((line = reader.readLine()) != null) -->Line_15 $$ tokens = line.split("\\s+")[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_100 $$ final float[] finalVerts = new float[(numFaces * 3) * (3 + (hasNorms ? 3 : 0) + (hasUVs ? 2 : 0))][ CD ]
Line_96 $$ final int numElements = faces.size-->Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) [ FD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_11 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(file.read()), 4096)[ CD ]
Line_112 $$ if (hasUVs) -->Line_113 $$ int uvIndex = faces.get(i++) * 2[ CD ]
Line_37 $$ Array<Integer> faces = activeGroup.faces-->Line_102 $$ int vertIndex = faces.get(i++) * 3[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_155 $$ data.meshes.add(mesh)[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_42 $$ if (i == 1)[ FD ]
Line_70 $$ if (tokens[0].equals("mtllib")) -->Line_72 $$ if (tokens[0].equals("usemtl")) [ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_105 $$ finalVerts[vi++] = verts.get(vertIndex)[ FD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_39 $$ parts = tokens[1].split("/")[ CD ]
Line_106 $$ if (hasNorms) -->Line_109 $$ finalVerts[vi++] = norms.get(normIndex++)[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_148 $$ part.primitiveType = GL20.GL_TRIANGLES[ CD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_92 $$ final ModelData data = new ModelData()[ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_102 $$ int vertIndex = faces.get(i++) * 3[ FD ]
Line_7 $$ char firstChar-->Line_20 $$ if ((firstChar = tokens[0].toLowerCase().charAt(0)) == '#') [ FD ]
Line_37 $$ Array<Integer> faces = activeGroup.faces-->Line_49 $$ faces.add(getIndex(parts[1], uvs.size))[ FD ]
Line_121 $$ for (int i = 0; i < numIndices; i++) -->Line_122 $$ finalIndices[i] = (short) i[ CD ]
Line_55 $$ if (parts.length > 1 && parts[1].length() > 0)-->Line_56 $$ faces.add(getIndex(parts[1], uvs.size))[ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_110 $$ finalVerts[vi++] = norms.get(normIndex)[ FD ]
Line_83 $$ for (int i = 0; i < groups.size; i++) -->Line_85 $$ groups.removeIndex(i)[ FD ]
Line_102 $$ int vertIndex = faces.get(i++) * 3-->Line_103 $$ finalVerts[vi++] = verts.get(vertIndex++)[ FD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_12 $$ int id = 0[ CD ]
Line_9 $$ Group activeGroup = new Group("default")-->Line_69 $$ activeGroup = setActiveGroup("default")[ FD ]
Line_51 $$ parts = tokens[++i].split("/")-->Line_57 $$ parts = tokens[++i].split("/")[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_97 $$ final int numFaces = group.numFaces[ CD ]
Line_127 $$ if (hasNorms)-->Line_128 $$ attributes.add(new VertexAttribute(Usage.Normal, 3, ShaderProgram.NORMAL_ATTRIBUTE))[ CD ]
Line_36 $$ String[] parts-->Line_57 $$ parts = tokens[++i].split("/")[ FD ]
Line_27 $$ if (tokens[0].charAt(1) == 'n') -->Line_31 $$ if (tokens[0].charAt(1) == 't') [ CD ]
Line_106 $$ if (hasNorms) -->Line_107 $$ int normIndex = faces.get(i++) * 3[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_139 $$ node.translation = new Vector3()[ CD ]
Line_83 $$ for (int i = 0; i < groups.size; i++) -->Line_84 $$ if (groups.get(i).numFaces < 1) [ FD ]
Line_112 $$ if (hasUVs) -->Line_115 $$ finalVerts[vi++] = uvs.get(uvIndex)[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_156 $$ ModelMaterial mm = mtl.getMaterial(group.materialName)[ CD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_71 $$ mtl.load(file.parent().child(tokens[1]))[ FD ]
Line_46 $$ if (parts.length > 1 && parts[1].length() > 0) -->Line_49 $$ faces.add(getIndex(parts[1], uvs.size))[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_58 $$ faces.add(getIndex(parts[0], verts.size))[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_94 $$ Group group = groups.get(g)[ FD ]
Line_113 $$ int uvIndex = faces.get(i++) * 2-->Line_114 $$ finalVerts[vi++] = uvs.get(uvIndex++)[ FD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_85 $$ groups.removeIndex(i)[ FD ]
Line_20 $$ if ((firstChar = tokens[0].toLowerCase().charAt(0)) == '#') -->Line_22 $$ if (firstChar == 'v') [ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_120 $$ if (numIndices > 0) [ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_84 $$ if (groups.get(i).numFaces < 1) [ FD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_165 $$ if (groups.size > 0)[ CD ]
Line_37 $$ Array<Integer> faces = activeGroup.faces-->Line_44 $$ faces.add(getIndex(parts[2], norms.size))[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_151 $$ mesh.attributes = attributes.toArray(VertexAttribute.class)[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_126 $$ attributes.add(new VertexAttribute(Usage.Position, 3, ShaderProgram.POSITION_ATTRIBUTE))[ CD ]
Line_9 $$ Group activeGroup = new Group("default")-->Line_10 $$ groups.add(activeGroup)[ FD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_113 $$ int uvIndex = faces.get(i++) * 2[ FD ]
Line_27 $$ if (tokens[0].charAt(1) == 'n') -->Line_28 $$ norms.add(Float.parseFloat(tokens[1]))[ CD ]
Line_107 $$ int normIndex = faces.get(i++) * 3-->Line_110 $$ finalVerts[vi++] = norms.get(normIndex)[ FD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_103 $$ finalVerts[vi++] = verts.get(vertIndex++)[ FD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_3 $$ if (logWarning)[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_55 $$ if (parts.length > 1 && parts[1].length() > 0)[ CD ]
Line_83 $$ for (int i = 0; i < groups.size; i++) -->Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) [ FD ]
Line_27 $$ if (tokens[0].charAt(1) == 'n') -->Line_30 $$ norms.add(Float.parseFloat(tokens[3]))[ CD ]
Line_5 $$ String line-->Line_14 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_86 $$ i--[ FD ]
Line_107 $$ int normIndex = faces.get(i++) * 3-->Line_108 $$ finalVerts[vi++] = norms.get(normIndex++)[ FD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_161 $$ if (norms.size > 0)[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_51 $$ parts = tokens[++i].split("/")[ FD ]
Line_6 $$ String[] tokens-->Line_15 $$ tokens = line.split("\\s+")[ FD ]
Line_165 $$ if (groups.size > 0)-->Line_166 $$ groups.clear()[ CD ]
Line_65 $$ if (firstChar == 'o' || firstChar == 'g') -->Line_70 $$ if (tokens[0].equals("mtllib")) [ CD ]
Line_35 $$ if (firstChar == 'f') -->Line_65 $$ if (firstChar == 'o' || firstChar == 'g') [ CD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_91 $$ final int numGroups = groups.size[ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_105 $$ finalVerts[vi++] = verts.get(vertIndex)[ CD ]
Line_35 $$ if (firstChar == 'f') -->Line_36 $$ String[] parts[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_41 $$ if (parts.length > 2) [ CD ]
Line_31 $$ if (tokens[0].charAt(1) == 't') -->Line_32 $$ uvs.add(Float.parseFloat(tokens[1]))[ CD ]
Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) -->Line_104 $$ finalVerts[vi++] = verts.get(vertIndex++)[ CD ]
Line_38 $$ for (int i = 1; i < tokens.length - 2; i--) -->Line_107 $$ int normIndex = faces.get(i++) * 3[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_101 $$ for (int i = 0, vi = 0; i < numElements; ) [ CD ]
Line_129 $$ if (hasUVs)-->Line_130 $$ attributes.add(new VertexAttribute(Usage.TextureCoordinates, 2, ShaderProgram.TEXCOORD_ATTRIBUTE + "0"))[ CD ]
Line_102 $$ int vertIndex = faces.get(i++) * 3-->Line_105 $$ finalVerts[vi++] = verts.get(vertIndex)[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_143 $$ pm.materialId = group.materialName[ CD ]
Line_20 $$ if ((firstChar = tokens[0].toLowerCase().charAt(0)) == '#') -->Line_35 $$ if (firstChar == 'f') [ FD ]
Line_83 $$ for (int i = 0; i < groups.size; i++) -->Line_107 $$ int normIndex = faces.get(i++) * 3[ FD ]
Line_35 $$ if (firstChar == 'f') -->Line_37 $$ Array<Integer> faces = activeGroup.faces[ CD ]
Line_47 $$ if (i == 1)-->Line_48 $$ activeGroup.hasUVs = true[ CD ]
Line_53 $$ if (parts.length > 2)-->Line_54 $$ faces.add(getIndex(parts[2], norms.size))[ CD ]
Line_83 $$ for (int i = 0; i < groups.size; i++) -->Line_84 $$ if (groups.get(i).numFaces < 1) [ CD ]
Line_37 $$ Array<Integer> faces = activeGroup.faces-->Line_107 $$ int normIndex = faces.get(i++) * 3[ FD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_9 $$ Group activeGroup = new Group("default")[ CD ]
Line_14 $$ while ((line = reader.readLine()) != null) -->Line_16 $$ if (tokens.length < 1)[ CD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_7 $$ char firstChar[ CD ]
Line_120 $$ if (numIndices > 0) -->Line_121 $$ for (int i = 0; i < numIndices; i++) [ CD ]
Line_8 $$ MtlLoader mtl = new MtlLoader()-->Line_71 $$ mtl.load(file.parent().child(tokens[1]))[ FD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_152 $$ mesh.vertices = finalVerts[ CD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_93 $$ for (int g = 0; g < numGroups; g++) [ CD ]
Line_112 $$ if (hasUVs) -->Line_114 $$ finalVerts[vi++] = uvs.get(uvIndex++)[ CD ]
Line_20 $$ if ((firstChar = tokens[0].toLowerCase().charAt(0)) == '#') -->Line_22 $$ if (firstChar == 'v') [ FD ]
Line_23 $$ if (tokens[0].length() == 1) -->Line_26 $$ verts.add(Float.parseFloat(tokens[3]))[ CD ]
Line_93 $$ for (int g = 0; g < numGroups; g++) -->Line_154 $$ data.nodes.add(node)[ CD ]
Line_2 $$ protected ModelData loadModelData(FileHandle file, boolean flipV) -->Line_11 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(file.read()), 4096)[ FD ]
Line_84 $$ if (groups.get(i).numFaces < 1) -->Line_86 $$ i--[ CD ]
Line_67 $$ activeGroup = setActiveGroup(tokens[1])-->Line_69 $$ activeGroup = setActiveGroup("default")[ FD ]
