Line_10 $$ line = br.readLine()-->Line_13 $$ Assert.assertTrue(("4 44" + TAB + "1").equals(line))[ FD ]
Line_8 $$ String line = br.readLine()-->Line_12 $$ line = br.readLine()[ FD ]
Line_2 $$ private void checkResult() throws Exception -->Line_5 $$ Assert.assertTrue(success.exists())[ CD ]
Line_2 $$ private void checkResult() throws Exception -->Line_12 $$ line = br.readLine()[ CD ]
Line_2 $$ private void checkResult() throws Exception -->Line_9 $$ Assert.assertTrue(("1 44" + TAB + "2").equals(line))[ CD ]
Line_8 $$ String line = br.readLine()-->Line_10 $$ line = br.readLine()[ FD ]
Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(fis, "UTF-8"))-->Line_12 $$ line = br.readLine()[ FD ]
Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(fis, "UTF-8"))-->Line_10 $$ line = br.readLine()[ FD ]
Line_2 $$ private void checkResult() throws Exception -->Line_3 $$ File result = new File(outdir.getAbsolutePath() + File.separator + "part-00000")[ CD ]
Line_10 $$ line = br.readLine()-->Line_11 $$ Assert.assertTrue(("3 44" + TAB + "1").equals(line))[ FD ]
Line_4 $$ File success = new File(outdir.getAbsolutePath() + File.separator + "_SUCCESS")-->Line_5 $$ Assert.assertTrue(success.exists())[ FD ]
Line_8 $$ String line = br.readLine()-->Line_11 $$ Assert.assertTrue(("3 44" + TAB + "1").equals(line))[ FD ]
Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(fis, "UTF-8"))-->Line_8 $$ String line = br.readLine()[ FD ]
Line_2 $$ private void checkResult() throws Exception -->Line_8 $$ String line = br.readLine()[ CD ]
Line_2 $$ private void checkResult() throws Exception -->Line_13 $$ Assert.assertTrue(("4 44" + TAB + "1").equals(line))[ CD ]
Line_2 $$ private void checkResult() throws Exception -->Line_11 $$ Assert.assertTrue(("3 44" + TAB + "1").equals(line))[ CD ]
Line_8 $$ String line = br.readLine()-->Line_13 $$ Assert.assertTrue(("4 44" + TAB + "1").equals(line))[ FD ]
Line_2 $$ private void checkResult() throws Exception -->Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(fis, "UTF-8"))[ CD ]
Line_12 $$ line = br.readLine()-->Line_13 $$ Assert.assertTrue(("4 44" + TAB + "1").equals(line))[ FD ]
Line_2 $$ private void checkResult() throws Exception -->Line_4 $$ File success = new File(outdir.getAbsolutePath() + File.separator + "_SUCCESS")[ CD ]
Line_10 $$ line = br.readLine()-->Line_12 $$ line = br.readLine()[ FD ]
Line_2 $$ private void checkResult() throws Exception -->Line_14 $$ br.close()[ CD ]
Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(fis, "UTF-8"))-->Line_14 $$ br.close()[ FD ]
Line_8 $$ String line = br.readLine()-->Line_9 $$ Assert.assertTrue(("1 44" + TAB + "2").equals(line))[ FD ]
Line_2 $$ private void checkResult() throws Exception -->Line_10 $$ line = br.readLine()[ CD ]
Line_2 $$ private void checkResult() throws Exception -->Line_6 $$ FileInputStream fis = new FileInputStream(result)[ CD ]
