Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build()-->Line_31 $$ DataNode datanode = cluster.getDataNode(datanodeinfo.getIpcPort())[ FD ]
Line_5 $$ final int DATANODE_NUM = 3-->Line_16 $$ HdfsDataOutputStream out = create(dfs, fpath, DATANODE_NUM)[ FD ]
Line_16 $$ HdfsDataOutputStream out = create(dfs, fpath, DATANODE_NUM)-->Line_17 $$ out.write("something".getBytes())[ FD ]
Line_10 $$ DistributedFileSystem dfs = null-->Line_16 $$ HdfsDataOutputStream out = create(dfs, fpath, DATANODE_NUM)[ FD ]
Line_2 $$ public void testLeaseExpireHardLimit() throws Exception -->Line_4 $$ final long leasePeriod = 1000[ CD ]
Line_6 $$ Configuration conf = new HdfsConfiguration()-->Line_7 $$ conf.setInt(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY, 1000)[ FD ]
Line_2 $$ public void testLeaseExpireHardLimit() throws Exception -->Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build()[ CD ]
Line_33 $$ Block b = DataNodeTestUtils.getFSDataset(datanode).getStoredBlock(blk.getBlockPoolId(), blk.getBlockId())-->Line_34 $$ final File blockfile = DataNodeTestUtils.getFile(datanode, blk.getBlockPoolId(), b.getBlockId())[ FD ]
Line_2 $$ public void testLeaseExpireHardLimit() throws Exception -->Line_6 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_31 $$ DataNode datanode = cluster.getDataNode(datanodeinfo.getIpcPort())-->Line_34 $$ final File blockfile = DataNodeTestUtils.getFile(datanode, blk.getBlockPoolId(), b.getBlockId())[ FD ]
Line_28 $$ LocatedBlock locatedblock = locations.getLocatedBlocks().get(0)-->Line_30 $$ for (DatanodeInfo datanodeinfo : locatedblock.getLocations()) [ FD ]
Line_32 $$ ExtendedBlock blk = locatedblock.getBlock()-->Line_33 $$ Block b = DataNodeTestUtils.getFSDataset(datanode).getStoredBlock(blk.getBlockPoolId(), blk.getBlockId())[ FD ]
Line_2 $$ public void testLeaseExpireHardLimit() throws Exception -->Line_7 $$ conf.setInt(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY, 1000)[ CD ]
Line_29 $$ int successcount = 0-->Line_40 $$ successcount++[ FD ]
Line_13 $$ dfs = cluster.getFileSystem()-->Line_16 $$ HdfsDataOutputStream out = create(dfs, fpath, DATANODE_NUM)[ FD ]
Line_26 $$ LocatedBlocks locations = dfs.dfs.getNamenode().getBlockLocations(f, 0, Long.MAX_VALUE)-->Line_28 $$ LocatedBlock locatedblock = locations.getLocatedBlocks().get(0)[ FD ]
Line_36 $$ if (blockfile != null) -->Line_39 $$ in.close()[ CD ]
Line_14 $$ final String f = DIR + "foo"-->Line_26 $$ LocatedBlocks locations = dfs.dfs.getNamenode().getBlockLocations(f, 0, Long.MAX_VALUE)[ FD ]
Line_37 $$ BufferedReader in = new BufferedReader(new FileReader(blockfile))-->Line_39 $$ in.close()[ FD ]
Line_37 $$ BufferedReader in = new BufferedReader(new FileReader(blockfile))-->Line_38 $$ assertEquals("something", in.readLine())[ FD ]
Line_2 $$ public void testLeaseExpireHardLimit() throws Exception -->Line_10 $$ DistributedFileSystem dfs = null[ CD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build()-->Line_21 $$ cluster.setLeasePeriod(leasePeriod, leasePeriod)[ FD ]
Line_4 $$ final long leasePeriod = 1000-->Line_21 $$ cluster.setLeasePeriod(leasePeriod, leasePeriod)[ FD ]
Line_34 $$ final File blockfile = DataNodeTestUtils.getFile(datanode, blk.getBlockPoolId(), b.getBlockId())-->Line_36 $$ if (blockfile != null) [ FD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build()-->Line_12 $$ cluster.waitActive()[ FD ]
Line_2 $$ public void testLeaseExpireHardLimit() throws Exception -->Line_3 $$ System.out.println("testLeaseExpireHardLimit start")[ CD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build()-->Line_13 $$ dfs = cluster.getFileSystem()[ FD ]
Line_30 $$ for (DatanodeInfo datanodeinfo : locatedblock.getLocations()) -->Line_31 $$ DataNode datanode = cluster.getDataNode(datanodeinfo.getIpcPort())[ FD ]
Line_2 $$ public void testLeaseExpireHardLimit() throws Exception -->Line_5 $$ final int DATANODE_NUM = 3[ CD ]
Line_36 $$ if (blockfile != null) -->Line_40 $$ successcount++[ CD ]
Line_5 $$ final int DATANODE_NUM = 3-->Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build()[ FD ]
Line_31 $$ DataNode datanode = cluster.getDataNode(datanodeinfo.getIpcPort())-->Line_33 $$ Block b = DataNodeTestUtils.getFSDataset(datanode).getStoredBlock(blk.getBlockPoolId(), blk.getBlockId())[ FD ]
Line_16 $$ HdfsDataOutputStream out = create(dfs, fpath, DATANODE_NUM)-->Line_18 $$ out.hflush()[ FD ]
Line_15 $$ final Path fpath = new Path(f)-->Line_16 $$ HdfsDataOutputStream out = create(dfs, fpath, DATANODE_NUM)[ FD ]
Line_28 $$ LocatedBlock locatedblock = locations.getLocatedBlocks().get(0)-->Line_32 $$ ExtendedBlock blk = locatedblock.getBlock()[ FD ]
Line_13 $$ dfs = cluster.getFileSystem()-->Line_46 $$ IOUtils.closeStream(dfs)[ FD ]
Line_10 $$ DistributedFileSystem dfs = null-->Line_46 $$ IOUtils.closeStream(dfs)[ FD ]
Line_10 $$ DistributedFileSystem dfs = null-->Line_13 $$ dfs = cluster.getFileSystem()[ FD ]
Line_6 $$ Configuration conf = new HdfsConfiguration()-->Line_8 $$ conf.setInt(DFS_HEARTBEAT_INTERVAL_KEY, 1)[ FD ]
Line_32 $$ ExtendedBlock blk = locatedblock.getBlock()-->Line_34 $$ final File blockfile = DataNodeTestUtils.getFile(datanode, blk.getBlockPoolId(), b.getBlockId())[ FD ]
Line_26 $$ LocatedBlocks locations = dfs.dfs.getNamenode().getBlockLocations(f, 0, Long.MAX_VALUE)-->Line_27 $$ assertEquals(1, locations.locatedBlockCount())[ FD ]
Line_36 $$ if (blockfile != null) -->Line_37 $$ BufferedReader in = new BufferedReader(new FileReader(blockfile))[ CD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build()-->Line_47 $$ cluster.shutdown()[ FD ]
Line_16 $$ HdfsDataOutputStream out = create(dfs, fpath, DATANODE_NUM)-->Line_19 $$ int actualRepl = out.getCurrentBlockReplication()[ FD ]
Line_2 $$ public void testLeaseExpireHardLimit() throws Exception -->Line_8 $$ conf.setInt(DFS_HEARTBEAT_INTERVAL_KEY, 1)[ CD ]
Line_2 $$ public void testLeaseExpireHardLimit() throws Exception -->Line_49 $$ System.out.println("testLeaseExpireHardLimit successful")[ CD ]
Line_36 $$ if (blockfile != null) -->Line_38 $$ assertEquals("something", in.readLine())[ CD ]
