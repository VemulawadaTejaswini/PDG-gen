Line_16 $$ if (tc.matches()) -->Line_17 $$ if (runningMultipleThreadCounts) [ CD ]
Line_22 $$ mode = ReadingMode.METRICS-->Line_64 $$ mode = ReadingMode.START[ FD ]
Line_62 $$ json = new JSONObject()-->Line_54 $$ json.put("test", stressSettings.graph.operation)[ FD ]
Line_62 $$ json = new JSONObject()-->Line_59 $$ json.put("command", StringUtils.join(stressArguments, " "))[ FD ]
Line_2 $$ private JSONArray parseLogStats(InputStream log, JSONArray stats) -->Line_8 $$ Pattern threadCountMessage = Pattern.compile("Running ([A-Z]+) with ([0-9]+) threads .*")[ CD ]
Line_11 $$ String line-->Line_13 $$ if (line.startsWith("Thread count was not specified"))[ FD ]
Line_22 $$ mode = ReadingMode.METRICS-->Line_46 $$ if (mode == ReadingMode.AGGREGATES) [ FD ]
Line_25 $$ mode = ReadingMode.AGGREGATES-->Line_32 $$ if (mode == ReadingMode.METRICS) [ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_21 $$ if (line.equals(StressMetrics.HEAD)) [ FD ]
Line_52 $$ if (mode == ReadingMode.NEXTITERATION) -->Line_62 $$ json = new JSONObject()[ CD ]
Line_5 $$ JSONArray intervals = new JSONArray()-->Line_63 $$ intervals = new JSONArray()[ FD ]
Line_3 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(log))-->Line_12 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_62 $$ json = new JSONObject()-->Line_61 $$ stats.add(json)[ FD ]
Line_9 $$ ReadingMode mode = ReadingMode.START-->Line_25 $$ mode = ReadingMode.AGGREGATES[ FD ]
Line_25 $$ mode = ReadingMode.AGGREGATES-->Line_64 $$ mode = ReadingMode.START[ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_29 $$ if (line.equals("END") || line.equals("FAILURE")) [ FD ]
Line_4 $$ JSONObject json = new JSONObject()-->Line_58 $$ json.put("revision", String.format("%s - %s threads", stressSettings.graph.revision, currentThreadCount))[ FD ]
Line_25 $$ mode = ReadingMode.AGGREGATES-->Line_52 $$ if (mode == ReadingMode.NEXTITERATION) [ FD ]
Line_25 $$ mode = ReadingMode.AGGREGATES-->Line_46 $$ if (mode == ReadingMode.AGGREGATES) [ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_32 $$ if (mode == ReadingMode.METRICS) [ CD ]
Line_28 $$ mode = ReadingMode.NEXTITERATION-->Line_46 $$ if (mode == ReadingMode.AGGREGATES) [ FD ]
Line_11 $$ String line-->Line_12 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_13 $$ if (line.startsWith("Thread count was not specified"))[ CD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_47 $$ String[] parts = line.split(":", 2)[ FD ]
Line_64 $$ mode = ReadingMode.START-->Line_32 $$ if (mode == ReadingMode.METRICS) [ FD ]
Line_22 $$ mode = ReadingMode.METRICS-->Line_32 $$ if (mode == ReadingMode.METRICS) [ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_15 $$ Matcher tc = threadCountMessage.matcher(line)[ CD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_15 $$ Matcher tc = threadCountMessage.matcher(line)[ FD ]
Line_18 $$ currentThreadCount = tc.group(2)-->Line_55 $$ if (currentThreadCount == null)[ FD ]
Line_4 $$ JSONObject json = new JSONObject()-->Line_62 $$ json = new JSONObject()[ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_27 $$ if (mode == ReadingMode.AGGREGATES && line.equals("")) [ FD ]
Line_6 $$ boolean runningMultipleThreadCounts = false-->Line_14 $$ runningMultipleThreadCounts = true[ FD ]
Line_11 $$ String line-->Line_27 $$ if (mode == ReadingMode.AGGREGATES && line.equals("")) [ FD ]
Line_4 $$ JSONObject json = new JSONObject()-->Line_53 $$ json.put("metrics", Arrays.asList(StressMetrics.HEADMETRICS))[ FD ]
Line_11 $$ String line-->Line_15 $$ Matcher tc = threadCountMessage.matcher(line)[ FD ]
Line_21 $$ if (line.equals(StressMetrics.HEAD)) -->Line_24 $$ if (line.equals("Results:")) [ CD ]
Line_38 $$ for (String m : parts) -->Line_40 $$ metrics.add(new BigDecimal(m.trim()))[ FD ]
Line_62 $$ json = new JSONObject()-->Line_56 $$ json.put("revision", stressSettings.graph.revision)[ FD ]
Line_52 $$ if (mode == ReadingMode.NEXTITERATION) -->Line_54 $$ json.put("test", stressSettings.graph.operation)[ CD ]
Line_25 $$ mode = ReadingMode.AGGREGATES-->Line_28 $$ mode = ReadingMode.NEXTITERATION[ FD ]
Line_2 $$ private JSONArray parseLogStats(InputStream log, JSONArray stats) -->Line_4 $$ JSONObject json = new JSONObject()[ CD ]
Line_15 $$ Matcher tc = threadCountMessage.matcher(line)-->Line_18 $$ currentThreadCount = tc.group(2)[ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_24 $$ if (line.equals("Results:")) [ FD ]
Line_7 $$ String currentThreadCount = null-->Line_58 $$ json.put("revision", String.format("%s - %s threads", stressSettings.graph.revision, currentThreadCount))[ FD ]
Line_52 $$ if (mode == ReadingMode.NEXTITERATION) -->Line_61 $$ stats.add(json)[ CD ]
Line_22 $$ mode = ReadingMode.METRICS-->Line_25 $$ mode = ReadingMode.AGGREGATES[ FD ]
Line_4 $$ JSONObject json = new JSONObject()-->Line_61 $$ stats.add(json)[ FD ]
Line_9 $$ ReadingMode mode = ReadingMode.START-->Line_64 $$ mode = ReadingMode.START[ FD ]
Line_5 $$ JSONArray intervals = new JSONArray()-->Line_60 $$ json.put("intervals", intervals)[ FD ]
Line_11 $$ String line-->Line_29 $$ if (line.equals("END") || line.equals("FAILURE")) [ FD ]
Line_52 $$ if (mode == ReadingMode.NEXTITERATION) -->Line_59 $$ json.put("command", StringUtils.join(stressArguments, " "))[ CD ]
Line_24 $$ if (line.equals("Results:")) -->Line_27 $$ if (mode == ReadingMode.AGGREGATES && line.equals("")) [ CD ]
Line_4 $$ JSONObject json = new JSONObject()-->Line_51 $$ json.put(parts[0].trim(), parts[1].trim())[ FD ]
Line_62 $$ json = new JSONObject()-->Line_60 $$ json.put("intervals", intervals)[ FD ]
Line_22 $$ mode = ReadingMode.METRICS-->Line_52 $$ if (mode == ReadingMode.NEXTITERATION) [ FD ]
Line_63 $$ intervals = new JSONArray()-->Line_60 $$ json.put("intervals", intervals)[ FD ]
Line_55 $$ if (currentThreadCount == null)-->Line_56 $$ json.put("revision", stressSettings.graph.revision)[ CD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_16 $$ if (tc.matches()) [ CD ]
Line_62 $$ json = new JSONObject()-->Line_53 $$ json.put("metrics", Arrays.asList(StressMetrics.HEADMETRICS))[ FD ]
Line_32 $$ if (mode == ReadingMode.METRICS) -->Line_45 $$ intervals.add(metrics)[ CD ]
Line_17 $$ if (runningMultipleThreadCounts) -->Line_18 $$ currentThreadCount = tc.group(2)[ CD ]
Line_11 $$ String line-->Line_34 $$ String[] parts = line.split(",")[ FD ]
Line_46 $$ if (mode == ReadingMode.AGGREGATES) -->Line_48 $$ if (parts.length != 2) [ CD ]
Line_28 $$ mode = ReadingMode.NEXTITERATION-->Line_32 $$ if (mode == ReadingMode.METRICS) [ FD ]
Line_21 $$ if (line.equals(StressMetrics.HEAD)) -->Line_22 $$ mode = ReadingMode.METRICS[ CD ]
Line_4 $$ JSONObject json = new JSONObject()-->Line_60 $$ json.put("intervals", intervals)[ FD ]
Line_55 $$ if (currentThreadCount == null)-->Line_58 $$ json.put("revision", String.format("%s - %s threads", stressSettings.graph.revision, currentThreadCount))[ CD ]
Line_27 $$ if (mode == ReadingMode.AGGREGATES && line.equals("")) -->Line_28 $$ mode = ReadingMode.NEXTITERATION[ CD ]
Line_11 $$ String line-->Line_24 $$ if (line.equals("Results:")) [ FD ]
Line_52 $$ if (mode == ReadingMode.NEXTITERATION) -->Line_55 $$ if (currentThreadCount == null)[ CD ]
Line_62 $$ json = new JSONObject()-->Line_70 $$ stats.add(json)[ FD ]
Line_2 $$ private JSONArray parseLogStats(InputStream log, JSONArray stats) -->Line_71 $$ return stats[ CD ]
Line_9 $$ ReadingMode mode = ReadingMode.START-->Line_28 $$ mode = ReadingMode.NEXTITERATION[ FD ]
Line_9 $$ ReadingMode mode = ReadingMode.START-->Line_32 $$ if (mode == ReadingMode.METRICS) [ FD ]
Line_24 $$ if (line.equals("Results:")) -->Line_25 $$ mode = ReadingMode.AGGREGATES[ CD ]
Line_13 $$ if (line.startsWith("Thread count was not specified"))-->Line_14 $$ runningMultipleThreadCounts = true[ CD ]
Line_32 $$ if (mode == ReadingMode.METRICS) -->Line_46 $$ if (mode == ReadingMode.AGGREGATES) [ CD ]
Line_62 $$ json = new JSONObject()-->Line_58 $$ json.put("revision", String.format("%s - %s threads", stressSettings.graph.revision, currentThreadCount))[ FD ]
Line_62 $$ json = new JSONObject()-->Line_51 $$ json.put(parts[0].trim(), parts[1].trim())[ FD ]
Line_4 $$ JSONObject json = new JSONObject()-->Line_54 $$ json.put("test", stressSettings.graph.operation)[ FD ]
Line_52 $$ if (mode == ReadingMode.NEXTITERATION) -->Line_64 $$ mode = ReadingMode.START[ CD ]
Line_15 $$ Matcher tc = threadCountMessage.matcher(line)-->Line_16 $$ if (tc.matches()) [ FD ]
Line_32 $$ if (mode == ReadingMode.METRICS) -->Line_35 $$ if (parts.length != StressMetrics.HEADMETRICS.length) [ CD ]
Line_7 $$ String currentThreadCount = null-->Line_18 $$ currentThreadCount = tc.group(2)[ FD ]
Line_33 $$ JSONArray metrics = new JSONArray()-->Line_45 $$ intervals.add(metrics)[ FD ]
Line_2 $$ private JSONArray parseLogStats(InputStream log, JSONArray stats) -->Line_70 $$ stats.add(json)[ CD ]
Line_2 $$ private JSONArray parseLogStats(InputStream log, JSONArray stats) -->Line_3 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(log))[ CD ]
Line_2 $$ private JSONArray parseLogStats(InputStream log, JSONArray stats) -->Line_61 $$ stats.add(json)[ FD ]
Line_32 $$ if (mode == ReadingMode.METRICS) -->Line_33 $$ JSONArray metrics = new JSONArray()[ CD ]
Line_32 $$ if (mode == ReadingMode.METRICS) -->Line_34 $$ String[] parts = line.split(",")[ CD ]
Line_52 $$ if (mode == ReadingMode.NEXTITERATION) -->Line_60 $$ json.put("intervals", intervals)[ CD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_34 $$ String[] parts = line.split(",")[ FD ]
Line_46 $$ if (mode == ReadingMode.AGGREGATES) -->Line_52 $$ if (mode == ReadingMode.NEXTITERATION) [ CD ]
Line_33 $$ JSONArray metrics = new JSONArray()-->Line_42 $$ metrics.add(null)[ FD ]
Line_28 $$ mode = ReadingMode.NEXTITERATION-->Line_64 $$ mode = ReadingMode.START[ FD ]
Line_9 $$ ReadingMode mode = ReadingMode.START-->Line_46 $$ if (mode == ReadingMode.AGGREGATES) [ FD ]
Line_33 $$ JSONArray metrics = new JSONArray()-->Line_40 $$ metrics.add(new BigDecimal(m.trim()))[ FD ]
Line_64 $$ mode = ReadingMode.START-->Line_52 $$ if (mode == ReadingMode.NEXTITERATION) [ FD ]
Line_46 $$ if (mode == ReadingMode.AGGREGATES) -->Line_51 $$ json.put(parts[0].trim(), parts[1].trim())[ CD ]
Line_8 $$ Pattern threadCountMessage = Pattern.compile("Running ([A-Z]+) with ([0-9]+) threads .*")-->Line_15 $$ Matcher tc = threadCountMessage.matcher(line)[ FD ]
Line_5 $$ JSONArray intervals = new JSONArray()-->Line_45 $$ intervals.add(metrics)[ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_13 $$ if (line.startsWith("Thread count was not specified"))[ FD ]
Line_2 $$ private JSONArray parseLogStats(InputStream log, JSONArray stats) -->Line_7 $$ String currentThreadCount = null[ CD ]
Line_2 $$ private JSONArray parseLogStats(InputStream log, JSONArray stats) -->Line_9 $$ ReadingMode mode = ReadingMode.START[ CD ]
Line_46 $$ if (mode == ReadingMode.AGGREGATES) -->Line_47 $$ String[] parts = line.split(":", 2)[ CD ]
Line_4 $$ JSONObject json = new JSONObject()-->Line_56 $$ json.put("revision", stressSettings.graph.revision)[ FD ]
Line_64 $$ mode = ReadingMode.START-->Line_46 $$ if (mode == ReadingMode.AGGREGATES) [ FD ]
Line_4 $$ JSONObject json = new JSONObject()-->Line_59 $$ json.put("command", StringUtils.join(stressArguments, " "))[ FD ]
Line_52 $$ if (mode == ReadingMode.NEXTITERATION) -->Line_53 $$ json.put("metrics", Arrays.asList(StressMetrics.HEADMETRICS))[ CD ]
Line_9 $$ ReadingMode mode = ReadingMode.START-->Line_22 $$ mode = ReadingMode.METRICS[ FD ]
Line_28 $$ mode = ReadingMode.NEXTITERATION-->Line_52 $$ if (mode == ReadingMode.NEXTITERATION) [ FD ]
Line_18 $$ currentThreadCount = tc.group(2)-->Line_58 $$ json.put("revision", String.format("%s - %s threads", stressSettings.graph.revision, currentThreadCount))[ FD ]
Line_52 $$ if (mode == ReadingMode.NEXTITERATION) -->Line_63 $$ intervals = new JSONArray()[ CD ]
Line_2 $$ private JSONArray parseLogStats(InputStream log, JSONArray stats) -->Line_5 $$ JSONArray intervals = new JSONArray()[ CD ]
Line_11 $$ String line-->Line_21 $$ if (line.equals(StressMetrics.HEAD)) [ FD ]
Line_2 $$ private JSONArray parseLogStats(InputStream log, JSONArray stats) -->Line_6 $$ boolean runningMultipleThreadCounts = false[ CD ]
Line_7 $$ String currentThreadCount = null-->Line_55 $$ if (currentThreadCount == null)[ FD ]
Line_27 $$ if (mode == ReadingMode.AGGREGATES && line.equals("")) -->Line_29 $$ if (line.equals("END") || line.equals("FAILURE")) [ CD ]
Line_9 $$ ReadingMode mode = ReadingMode.START-->Line_52 $$ if (mode == ReadingMode.NEXTITERATION) [ FD ]
Line_4 $$ JSONObject json = new JSONObject()-->Line_70 $$ stats.add(json)[ FD ]
Line_63 $$ intervals = new JSONArray()-->Line_45 $$ intervals.add(metrics)[ FD ]
Line_11 $$ String line-->Line_47 $$ String[] parts = line.split(":", 2)[ FD ]
Line_2 $$ private JSONArray parseLogStats(InputStream log, JSONArray stats) -->Line_70 $$ stats.add(json)[ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_21 $$ if (line.equals(StressMetrics.HEAD)) [ CD ]
Line_22 $$ mode = ReadingMode.METRICS-->Line_28 $$ mode = ReadingMode.NEXTITERATION[ FD ]
