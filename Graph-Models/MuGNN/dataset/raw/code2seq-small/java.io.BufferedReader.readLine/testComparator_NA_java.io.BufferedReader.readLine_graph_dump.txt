Line_19 $$ if (outputFiles.length > 0) -->Line_23 $$ if (expect == 1) [ CD ]
Line_22 $$ String line = reader.readLine()-->Line_26 $$ assertTrue(line.startsWith(line2))[ FD ]
Line_9 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, line1 + "\n" + line2 + "\n")-->Line_17 $$ assertTrue(job.isSuccessful())[ FD ]
Line_9 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, line1 + "\n" + line2 + "\n")-->Line_14 $$ job.setSortComparatorClass(KeyFieldBasedComparator.class)[ FD ]
Line_28 $$ line = reader.readLine()-->Line_32 $$ assertTrue(line.startsWith(line1))[ FD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_16 $$ job.waitForCompletion(true)[ CD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_9 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, line1 + "\n" + line2 + "\n")[ CD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_11 $$ job.setReducerClass(Reducer.class)[ CD ]
Line_28 $$ line = reader.readLine()-->Line_30 $$ assertTrue(line.startsWith(line2))[ FD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_12 $$ job.setOutputKeyClass(Text.class)[ CD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_4 $$ Path inDir = new Path(root, "test_cmp/in")[ CD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_7 $$ conf.set("mapreduce.partition.keypartitioner.options", "-k1.1,1.1")[ CD ]
Line_9 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, line1 + "\n" + line2 + "\n")-->Line_10 $$ job.setMapperClass(InverseMapper.class)[ FD ]
Line_9 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, line1 + "\n" + line2 + "\n")-->Line_16 $$ job.waitForCompletion(true)[ FD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_25 $$ if (expect == 2) [ FD ]
Line_9 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, line1 + "\n" + line2 + "\n")-->Line_15 $$ job.setPartitionerClass(KeyFieldBasedPartitioner.class)[ FD ]
Line_9 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, line1 + "\n" + line2 + "\n")-->Line_12 $$ job.setOutputKeyClass(Text.class)[ FD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_3 $$ String root = System.getProperty("test.build.data", "/tmp")[ CD ]
Line_29 $$ if (expect == 1) -->Line_30 $$ assertTrue(line.startsWith(line2))[ CD ]
Line_9 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, line1 + "\n" + line2 + "\n")-->Line_11 $$ job.setReducerClass(Reducer.class)[ FD ]
Line_19 $$ if (outputFiles.length > 0) -->Line_20 $$ InputStream is = getFileSystem().open(outputFiles[0])[ CD ]
Line_21 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_34 $$ reader.close()[ FD ]
Line_19 $$ if (outputFiles.length > 0) -->Line_29 $$ if (expect == 1) [ CD ]
Line_23 $$ if (expect == 1) -->Line_25 $$ if (expect == 2) [ CD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_29 $$ if (expect == 1) [ FD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_18 $$ Path[] outputFiles = FileUtil.stat2Paths(getFileSystem().listStatus(outDir, new Utils.OutputFileUtils.OutputFilesFilter()))[ CD ]
Line_5 $$ Path outDir = new Path(root, "test_cmp/out")-->Line_18 $$ Path[] outputFiles = FileUtil.stat2Paths(getFileSystem().listStatus(outDir, new Utils.OutputFileUtils.OutputFilesFilter()))[ FD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_6 $$ conf.set("mapreduce.partition.keycomparator.options", keySpec)[ FD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_5 $$ Path outDir = new Path(root, "test_cmp/out")[ CD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_19 $$ if (outputFiles.length > 0) [ CD ]
Line_22 $$ String line = reader.readLine()-->Line_30 $$ assertTrue(line.startsWith(line2))[ FD ]
Line_22 $$ String line = reader.readLine()-->Line_32 $$ assertTrue(line.startsWith(line1))[ FD ]
Line_19 $$ if (outputFiles.length > 0) -->Line_22 $$ String line = reader.readLine()[ CD ]
Line_5 $$ Path outDir = new Path(root, "test_cmp/out")-->Line_9 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, line1 + "\n" + line2 + "\n")[ FD ]
Line_21 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_22 $$ String line = reader.readLine()[ FD ]
Line_19 $$ if (outputFiles.length > 0) -->Line_28 $$ line = reader.readLine()[ CD ]
Line_9 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, line1 + "\n" + line2 + "\n")-->Line_13 $$ job.setOutputValueClass(LongWritable.class)[ FD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_31 $$ if (expect == 2) [ FD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_23 $$ if (expect == 1) [ FD ]
Line_4 $$ Path inDir = new Path(root, "test_cmp/in")-->Line_9 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, line1 + "\n" + line2 + "\n")[ FD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_14 $$ job.setSortComparatorClass(KeyFieldBasedComparator.class)[ CD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_17 $$ assertTrue(job.isSuccessful())[ CD ]
Line_25 $$ if (expect == 2) -->Line_26 $$ assertTrue(line.startsWith(line2))[ CD ]
Line_29 $$ if (expect == 1) -->Line_31 $$ if (expect == 2) [ CD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_13 $$ job.setOutputValueClass(LongWritable.class)[ CD ]
Line_19 $$ if (outputFiles.length > 0) -->Line_34 $$ reader.close()[ CD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_6 $$ conf.set("mapreduce.partition.keycomparator.options", keySpec)[ CD ]
Line_22 $$ String line = reader.readLine()-->Line_28 $$ line = reader.readLine()[ FD ]
Line_19 $$ if (outputFiles.length > 0) -->Line_21 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_15 $$ job.setPartitionerClass(KeyFieldBasedPartitioner.class)[ CD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_8 $$ conf.set(MRJobConfig.MAP_OUTPUT_KEY_FIELD_SEPERATOR, " ")[ CD ]
Line_2 $$ private void testComparator(String keySpec, int expect) throws Exception -->Line_10 $$ job.setMapperClass(InverseMapper.class)[ CD ]
Line_21 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_28 $$ line = reader.readLine()[ FD ]
Line_23 $$ if (expect == 1) -->Line_24 $$ assertTrue(line.startsWith(line1))[ CD ]
Line_22 $$ String line = reader.readLine()-->Line_24 $$ assertTrue(line.startsWith(line1))[ FD ]
Line_31 $$ if (expect == 2) -->Line_32 $$ assertTrue(line.startsWith(line1))[ CD ]
