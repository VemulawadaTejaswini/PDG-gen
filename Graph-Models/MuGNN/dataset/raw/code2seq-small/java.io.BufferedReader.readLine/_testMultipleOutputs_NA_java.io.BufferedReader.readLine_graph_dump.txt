Line_45 $$ line = reader.readLine()-->Line_44 $$ assertTrue(line.endsWith("text"))[ FD ]
Line_34 $$ for (FileStatus status : statuses) -->Line_35 $$ if (status.getPath().getName().equals("text-m-00000") || status.getPath().getName().equals("text-m-00001") || status.getPath().getName().equals("text-r-00000") || status.getPath().getName().equals("sequence_A-m-00000") || status.getPath().getName().equals("sequence_A-m-00001") || status.getPath().getName().equals("sequence_B-m-00000") || status.getPath().getName().equals("sequence_B-m-00001") || status.getPath().getName().equals("sequence_B-r-00000") || status.getPath().getName().equals("sequence_C-r-00000")) [ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_11 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ CD ]
Line_29 $$ while (!job.isComplete()) -->Line_30 $$ Thread.sleep(100)[ CD ]
Line_3 $$ Path inDir = getDir(IN_DIR)-->Line_25 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_62 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())-->Line_69 $$ assertEquals(4, counters.getCounter("sequence_B"))[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_22 $$ MultipleOutputs.setCountersEnabled(conf, withCounters)[ FD ]
Line_56 $$ while (seqReader.next(key, value)) -->Line_57 $$ assertEquals("sequence", value.toString())[ CD ]
Line_63 $$ if (!withCounters) -->Line_67 $$ assertEquals(4, counters.getCounter("text"))[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_17 $$ conf.setMapOutputKeyClass(LongWritable.class)[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_19 $$ conf.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_14 $$ conf.setInputFormat(TextInputFormat.class)[ CD ]
Line_10 $$ file = fs.create(new Path(inDir, "part-1"))-->Line_12 $$ file.close()[ FD ]
Line_56 $$ while (seqReader.next(key, value)) -->Line_58 $$ count++[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_52 $$ assertEquals(Text.class, seqReader.getValueClass())[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_63 $$ if (!withCounters) [ CD ]
Line_4 $$ Path outDir = getDir(OUT_DIR)-->Line_33 $$ FileStatus[] statuses = fs.listStatus(outDir)[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_40 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(new Path(FileOutputFormat.getOutputPath(conf), "text-r-00000"))))[ CD ]
Line_43 $$ while (line != null) -->Line_44 $$ assertTrue(line.endsWith("text"))[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_53 $$ count = 0[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_39 $$ assertEquals(9, namedOutputCount)[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_32 $$ int namedOutputCount = 0[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_13 $$ conf.setJobName("mo")[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_4 $$ Path outDir = getDir(OUT_DIR)[ CD ]
Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_8 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ FD ]
Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_11 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_15 $$ conf.setOutputKeyClass(LongWritable.class)[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_33 $$ FileStatus[] statuses = fs.listStatus(outDir)[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_60 $$ seqReader.close()[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_8 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ CD ]
Line_42 $$ String line = reader.readLine()-->Line_45 $$ line = reader.readLine()[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_28 $$ RunningJob job = jc.submitJob(conf)[ CD ]
Line_42 $$ String line = reader.readLine()-->Line_44 $$ assertTrue(line.endsWith("text"))[ FD ]
Line_4 $$ Path outDir = getDir(OUT_DIR)-->Line_26 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_21 $$ MultipleOutputs.addMultiNamedOutput(conf, "sequence", SequenceFileOutputFormat.class, LongWritable.class, Text.class)[ FD ]
Line_10 $$ file = fs.create(new Path(inDir, "part-1"))-->Line_11 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_23 $$ conf.setMapperClass(MOMap.class)[ CD ]
Line_28 $$ RunningJob job = jc.submitJob(conf)-->Line_29 $$ while (!job.isComplete()) [ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_62 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())[ CD ]
Line_50 $$ SequenceFile.Reader seqReader = new SequenceFile.Reader(fs, new Path(FileOutputFormat.getOutputPath(conf), "sequence_B-r-00000"), conf)-->Line_56 $$ while (seqReader.next(key, value)) [ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_12 $$ file.close()[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ CD ]
Line_43 $$ while (line != null) -->Line_45 $$ line = reader.readLine()[ CD ]
Line_62 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())-->Line_67 $$ assertEquals(4, counters.getCounter("text"))[ FD ]
Line_41 $$ int count = 0-->Line_53 $$ count = 0[ FD ]
Line_63 $$ if (!withCounters) -->Line_68 $$ assertEquals(2, counters.getCounter("sequence_A"))[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_16 $$ conf.setOutputValueClass(Text.class)[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_26 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_40 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(new Path(FileOutputFormat.getOutputPath(conf), "text-r-00000"))))-->Line_42 $$ String line = reader.readLine()[ FD ]
Line_41 $$ int count = 0-->Line_46 $$ count++[ FD ]
Line_62 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())-->Line_64 $$ assertEquals(0, counters.size())[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_19 $$ conf.setOutputFormat(TextOutputFormat.class)[ CD ]
Line_6 $$ FileSystem fs = FileSystem.get(conf)-->Line_40 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(new Path(FileOutputFormat.getOutputPath(conf), "text-r-00000"))))[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_50 $$ SequenceFile.Reader seqReader = new SequenceFile.Reader(fs, new Path(FileOutputFormat.getOutputPath(conf), "sequence_B-r-00000"), conf)[ CD ]
Line_63 $$ if (!withCounters) -->Line_69 $$ assertEquals(4, counters.getCounter("sequence_B"))[ CD ]
Line_62 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())-->Line_68 $$ assertEquals(2, counters.getCounter("sequence_A"))[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_17 $$ conf.setMapOutputKeyClass(LongWritable.class)[ FD ]
Line_41 $$ int count = 0-->Line_58 $$ count++[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_26 $$ FileOutputFormat.setOutputPath(conf, outDir)[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_49 $$ assertFalse(count == 0)[ CD ]
Line_62 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())-->Line_66 $$ assertEquals(4, counters.size())[ FD ]
Line_32 $$ int namedOutputCount = 0-->Line_36 $$ namedOutputCount++[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_20 $$ MultipleOutputs.addNamedOutput(conf, "text", TextOutputFormat.class, LongWritable.class, Text.class)[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_48 $$ reader.close()[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_21 $$ MultipleOutputs.addMultiNamedOutput(conf, "sequence", SequenceFileOutputFormat.class, LongWritable.class, Text.class)[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_51 $$ assertEquals(LongWritable.class, seqReader.getKeyClass())[ CD ]
Line_35 $$ if (status.getPath().getName().equals("text-m-00000") || status.getPath().getName().equals("text-m-00001") || status.getPath().getName().equals("text-r-00000") || status.getPath().getName().equals("sequence_A-m-00000") || status.getPath().getName().equals("sequence_A-m-00001") || status.getPath().getName().equals("sequence_B-m-00000") || status.getPath().getName().equals("sequence_B-m-00001") || status.getPath().getName().equals("sequence_B-r-00000") || status.getPath().getName().equals("sequence_C-r-00000")) -->Line_36 $$ namedOutputCount++[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_54 $$ LongWritable key = new LongWritable()[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_25 $$ FileInputFormat.setInputPaths(conf, inDir)[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_24 $$ conf.setReducerClass(MOReduce.class)[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_22 $$ MultipleOutputs.setCountersEnabled(conf, withCounters)[ CD ]
Line_63 $$ if (!withCounters) -->Line_70 $$ assertEquals(2, counters.getCounter("sequence_C"))[ CD ]
Line_28 $$ RunningJob job = jc.submitJob(conf)-->Line_62 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())[ FD ]
Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_10 $$ file = fs.create(new Path(inDir, "part-1"))[ FD ]
Line_55 $$ Text value = new Text()-->Line_56 $$ while (seqReader.next(key, value)) [ FD ]
Line_54 $$ LongWritable key = new LongWritable()-->Line_56 $$ while (seqReader.next(key, value)) [ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_3 $$ Path inDir = getDir(IN_DIR)[ CD ]
Line_63 $$ if (!withCounters) -->Line_64 $$ assertEquals(0, counters.size())[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_24 $$ conf.setReducerClass(MOReduce.class)[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_13 $$ conf.setJobName("mo")[ FD ]
Line_50 $$ SequenceFile.Reader seqReader = new SequenceFile.Reader(fs, new Path(FileOutputFormat.getOutputPath(conf), "sequence_B-r-00000"), conf)-->Line_60 $$ seqReader.close()[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_6 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_14 $$ conf.setInputFormat(TextInputFormat.class)[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_43 $$ while (line != null) [ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_18 $$ conf.setMapOutputValueClass(Text.class)[ CD ]
Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_12 $$ file.close()[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_18 $$ conf.setMapOutputValueClass(Text.class)[ FD ]
Line_55 $$ Text value = new Text()-->Line_57 $$ assertEquals("sequence", value.toString())[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_55 $$ Text value = new Text()[ CD ]
Line_53 $$ count = 0-->Line_58 $$ count++[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_29 $$ while (!job.isComplete()) [ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_5 $$ JobConf conf = createJobConf()[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_42 $$ String line = reader.readLine()[ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_63 $$ if (!withCounters) [ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_22 $$ MultipleOutputs.setCountersEnabled(conf, withCounters)[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_56 $$ while (seqReader.next(key, value)) [ CD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_9 $$ file.close()[ CD ]
Line_6 $$ FileSystem fs = FileSystem.get(conf)-->Line_33 $$ FileStatus[] statuses = fs.listStatus(outDir)[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_61 $$ assertFalse(count == 0)[ CD ]
Line_63 $$ if (!withCounters) -->Line_66 $$ assertEquals(4, counters.size())[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_25 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_62 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())-->Line_70 $$ assertEquals(2, counters.getCounter("sequence_C"))[ FD ]
Line_6 $$ FileSystem fs = FileSystem.get(conf)-->Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ FD ]
Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_9 $$ file.close()[ FD ]
Line_40 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(new Path(FileOutputFormat.getOutputPath(conf), "text-r-00000"))))-->Line_45 $$ line = reader.readLine()[ FD ]
Line_27 $$ JobClient jc = new JobClient(conf)-->Line_28 $$ RunningJob job = jc.submitJob(conf)[ FD ]
Line_42 $$ String line = reader.readLine()-->Line_43 $$ while (line != null) [ FD ]
Line_40 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(new Path(FileOutputFormat.getOutputPath(conf), "text-r-00000"))))-->Line_48 $$ reader.close()[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_27 $$ JobClient jc = new JobClient(conf)[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_15 $$ conf.setOutputKeyClass(LongWritable.class)[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_6 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_10 $$ file = fs.create(new Path(inDir, "part-1"))[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_23 $$ conf.setMapperClass(MOMap.class)[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_28 $$ RunningJob job = jc.submitJob(conf)[ FD ]
Line_50 $$ SequenceFile.Reader seqReader = new SequenceFile.Reader(fs, new Path(FileOutputFormat.getOutputPath(conf), "sequence_B-r-00000"), conf)-->Line_51 $$ assertEquals(LongWritable.class, seqReader.getKeyClass())[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_16 $$ conf.setOutputValueClass(Text.class)[ FD ]
Line_50 $$ SequenceFile.Reader seqReader = new SequenceFile.Reader(fs, new Path(FileOutputFormat.getOutputPath(conf), "sequence_B-r-00000"), conf)-->Line_52 $$ assertEquals(Text.class, seqReader.getValueClass())[ FD ]
Line_6 $$ FileSystem fs = FileSystem.get(conf)-->Line_10 $$ file = fs.create(new Path(inDir, "part-1"))[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_20 $$ MultipleOutputs.addNamedOutput(conf, "text", TextOutputFormat.class, LongWritable.class, Text.class)[ FD ]
Line_2 $$ protected void _testMultipleOutputs(boolean withCounters) throws Exception -->Line_41 $$ int count = 0[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_40 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(new Path(FileOutputFormat.getOutputPath(conf), "text-r-00000"))))[ FD ]
Line_32 $$ int namedOutputCount = 0-->Line_39 $$ assertEquals(9, namedOutputCount)[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_50 $$ SequenceFile.Reader seqReader = new SequenceFile.Reader(fs, new Path(FileOutputFormat.getOutputPath(conf), "sequence_B-r-00000"), conf)[ FD ]
Line_45 $$ line = reader.readLine()-->Line_43 $$ while (line != null) [ FD ]
Line_43 $$ while (line != null) -->Line_46 $$ count++[ CD ]
