Line_4 $$ final BufferedReader perDirReader = new BufferedReader(new FileReader(myWorkingDirsPath))-->Line_6 $$ final String packageName = perDirReader.readLine()[ FD ]
Line_12 $$ List classNames = new ArrayList()-->Line_23 $$ final int childResult = startPerModuleFork(moduleName, classNames, packageName, workingDir, classpath, result)[ FD ]
Line_4 $$ final BufferedReader perDirReader = new BufferedReader(new FileReader(myWorkingDirsPath))-->Line_8 $$ while ((workingDir = perDirReader.readLine()) != null) [ FD ]
Line_7 $$ String workingDir-->Line_23 $$ final int childResult = startPerModuleFork(moduleName, classNames, packageName, workingDir, classpath, result)[ FD ]
Line_3 $$ int result = 0-->Line_23 $$ final int childResult = startPerModuleFork(moduleName, classNames, packageName, workingDir, classpath, result)[ FD ]
Line_4 $$ final BufferedReader perDirReader = new BufferedReader(new FileReader(myWorkingDirsPath))-->Line_9 $$ final String moduleName = perDirReader.readLine()[ FD ]
Line_14 $$ for (int i = 0; i < classNamesSize; i++) -->Line_21 $$ classNames.add(className)[ CD ]
Line_16 $$ if (className == null) -->Line_17 $$ System.err.println("Class name is expected. Working dir: " + workingDir)[ CD ]
Line_2 $$ protected int splitPerModule() throws IOException -->Line_3 $$ int result = 0[ CD ]
Line_10 $$ final String classpath = perDirReader.readLine()-->Line_23 $$ final int childResult = startPerModuleFork(moduleName, classNames, packageName, workingDir, classpath, result)[ FD ]
Line_12 $$ List classNames = new ArrayList()-->Line_21 $$ classNames.add(className)[ FD ]
Line_8 $$ while ((workingDir = perDirReader.readLine()) != null) -->Line_9 $$ final String moduleName = perDirReader.readLine()[ CD ]
Line_14 $$ for (int i = 0; i < classNamesSize; i++) -->Line_15 $$ String className = perDirReader.readLine()[ CD ]
Line_2 $$ protected int splitPerModule() throws IOException -->Line_32 $$ return result[ CD ]
Line_8 $$ while ((workingDir = perDirReader.readLine()) != null) -->Line_23 $$ final int childResult = startPerModuleFork(moduleName, classNames, packageName, workingDir, classpath, result)[ FD ]
Line_18 $$ result = -1-->Line_24 $$ result = Math.min(childResult, result)[ FD ]
Line_4 $$ final BufferedReader perDirReader = new BufferedReader(new FileReader(myWorkingDirsPath))-->Line_15 $$ String className = perDirReader.readLine()[ FD ]
Line_6 $$ final String packageName = perDirReader.readLine()-->Line_23 $$ final int childResult = startPerModuleFork(moduleName, classNames, packageName, workingDir, classpath, result)[ FD ]
Line_3 $$ int result = 0-->Line_18 $$ result = -1[ FD ]
Line_9 $$ final String moduleName = perDirReader.readLine()-->Line_23 $$ final int childResult = startPerModuleFork(moduleName, classNames, packageName, workingDir, classpath, result)[ FD ]
Line_2 $$ protected int splitPerModule() throws IOException -->Line_4 $$ final BufferedReader perDirReader = new BufferedReader(new FileReader(myWorkingDirsPath))[ CD ]
Line_16 $$ if (className == null) -->Line_18 $$ result = -1[ CD ]
Line_18 $$ result = -1-->Line_23 $$ final int childResult = startPerModuleFork(moduleName, classNames, packageName, workingDir, classpath, result)[ FD ]
Line_8 $$ while ((workingDir = perDirReader.readLine()) != null) -->Line_10 $$ final String classpath = perDirReader.readLine()[ CD ]
Line_4 $$ final BufferedReader perDirReader = new BufferedReader(new FileReader(myWorkingDirsPath))-->Line_30 $$ perDirReader.close()[ FD ]
Line_3 $$ int result = 0-->Line_24 $$ result = Math.min(childResult, result)[ FD ]
Line_7 $$ String workingDir-->Line_8 $$ while ((workingDir = perDirReader.readLine()) != null) [ FD ]
Line_15 $$ String className = perDirReader.readLine()-->Line_21 $$ classNames.add(className)[ FD ]
Line_15 $$ String className = perDirReader.readLine()-->Line_16 $$ if (className == null) [ FD ]
Line_4 $$ final BufferedReader perDirReader = new BufferedReader(new FileReader(myWorkingDirsPath))-->Line_10 $$ final String classpath = perDirReader.readLine()[ FD ]
Line_4 $$ final BufferedReader perDirReader = new BufferedReader(new FileReader(myWorkingDirsPath))-->Line_13 $$ final int classNamesSize = Integer.parseInt(perDirReader.readLine())[ FD ]
Line_14 $$ for (int i = 0; i < classNamesSize; i++) -->Line_16 $$ if (className == null) [ CD ]
Line_24 $$ result = Math.min(childResult, result)-->Line_23 $$ final int childResult = startPerModuleFork(moduleName, classNames, packageName, workingDir, classpath, result)[ FD ]
Line_13 $$ final int classNamesSize = Integer.parseInt(perDirReader.readLine())-->Line_14 $$ for (int i = 0; i < classNamesSize; i++) [ FD ]
