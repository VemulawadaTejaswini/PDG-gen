Line_6 $$ br = new BufferedReader(new InputStreamReader(process.getInputStream()))-->Line_36 $$ if (br != null) [ FD ]
Line_8 $$ while ((line = br.readLine()) != null) -->Line_9 $$ String[] nameId = line.split(regex)[ CD ]
Line_14 $$ final Integer key = staticMapping.get(parseId(nameId[1]))-->Line_29 $$ map.put(key, value)[ FD ]
Line_2 $$ public static void updateMapInternal(BiMap<Integer, String> map, String mapName, String command, String regex, Map<Integer, Integer> staticMapping) throws IOException -->Line_3 $$ BufferedReader br = null[ CD ]
Line_2 $$ public static void updateMapInternal(BiMap<Integer, String> map, String mapName, String command, String regex, Map<Integer, Integer> staticMapping) throws IOException -->Line_29 $$ map.put(key, value)[ FD ]
Line_3 $$ BufferedReader br = null-->Line_38 $$ br.close()[ FD ]
Line_8 $$ while ((line = br.readLine()) != null) -->Line_16 $$ if (map.containsKey(key)) [ CD ]
Line_15 $$ final String value = nameId[0]-->Line_24 $$ if (map.containsValue(value)) [ FD ]
Line_15 $$ final String value = nameId[0]-->Line_25 $$ final Integer prevKey = map.inverse().get(value)[ FD ]
Line_7 $$ String line = null-->Line_9 $$ String[] nameId = line.split(regex)[ FD ]
Line_2 $$ public static void updateMapInternal(BiMap<Integer, String> map, String mapName, String command, String regex, Map<Integer, Integer> staticMapping) throws IOException -->Line_9 $$ String[] nameId = line.split(regex)[ FD ]
Line_6 $$ br = new BufferedReader(new InputStreamReader(process.getInputStream()))-->Line_38 $$ br.close()[ FD ]
Line_14 $$ final Integer key = staticMapping.get(parseId(nameId[1]))-->Line_17 $$ final String prevValue = map.get(key)[ FD ]
Line_8 $$ while ((line = br.readLine()) != null) -->Line_15 $$ final String value = nameId[0][ CD ]
Line_16 $$ if (map.containsKey(key)) -->Line_17 $$ final String prevValue = map.get(key)[ CD ]
Line_8 $$ while ((line = br.readLine()) != null) -->Line_10 $$ if ((nameId == null) || (nameId.length != 2)) [ CD ]
Line_17 $$ final String prevValue = map.get(key)-->Line_18 $$ if (value.equals(prevValue)) [ FD ]
Line_15 $$ final String value = nameId[0]-->Line_26 $$ reportDuplicateEntry("Got multiple ids associated with the same name: ", key, value, prevKey, value)[ FD ]
Line_14 $$ final Integer key = staticMapping.get(parseId(nameId[1]))-->Line_16 $$ if (map.containsKey(key)) [ FD ]
Line_24 $$ if (map.containsValue(value)) -->Line_26 $$ reportDuplicateEntry("Got multiple ids associated with the same name: ", key, value, prevKey, value)[ CD ]
Line_24 $$ if (map.containsValue(value)) -->Line_25 $$ final Integer prevKey = map.inverse().get(value)[ CD ]
Line_15 $$ final String value = nameId[0]-->Line_21 $$ reportDuplicateEntry("Got multiple names associated with the same id: ", key, value, key, prevValue)[ FD ]
Line_8 $$ while ((line = br.readLine()) != null) -->Line_29 $$ map.put(key, value)[ CD ]
Line_15 $$ final String value = nameId[0]-->Line_18 $$ if (value.equals(prevValue)) [ FD ]
Line_15 $$ final String value = nameId[0]-->Line_29 $$ map.put(key, value)[ FD ]
Line_8 $$ while ((line = br.readLine()) != null) -->Line_13 $$ LOG.debug("add to " + mapName + "map:" + nameId[0] + " id:" + nameId[1])[ CD ]
Line_16 $$ if (map.containsKey(key)) -->Line_21 $$ reportDuplicateEntry("Got multiple names associated with the same id: ", key, value, key, prevValue)[ CD ]
Line_5 $$ Process process = Runtime.getRuntime().exec(new String[] -->Line_6 $$ br = new BufferedReader(new InputStreamReader(process.getInputStream()))[ FD ]
Line_3 $$ BufferedReader br = null-->Line_8 $$ while ((line = br.readLine()) != null) [ FD ]
Line_6 $$ br = new BufferedReader(new InputStreamReader(process.getInputStream()))-->Line_8 $$ while ((line = br.readLine()) != null) [ FD ]
Line_25 $$ final Integer prevKey = map.inverse().get(value)-->Line_26 $$ reportDuplicateEntry("Got multiple ids associated with the same name: ", key, value, prevKey, value)[ FD ]
Line_2 $$ public static void updateMapInternal(BiMap<Integer, String> map, String mapName, String command, String regex, Map<Integer, Integer> staticMapping) throws IOException -->Line_25 $$ final Integer prevKey = map.inverse().get(value)[ FD ]
Line_8 $$ while ((line = br.readLine()) != null) -->Line_24 $$ if (map.containsValue(value)) [ CD ]
Line_3 $$ BufferedReader br = null-->Line_6 $$ br = new BufferedReader(new InputStreamReader(process.getInputStream()))[ FD ]
Line_7 $$ String line = null-->Line_8 $$ while ((line = br.readLine()) != null) [ FD ]
Line_17 $$ final String prevValue = map.get(key)-->Line_21 $$ reportDuplicateEntry("Got multiple names associated with the same id: ", key, value, key, prevValue)[ FD ]
Line_2 $$ public static void updateMapInternal(BiMap<Integer, String> map, String mapName, String command, String regex, Map<Integer, Integer> staticMapping) throws IOException -->Line_24 $$ if (map.containsValue(value)) [ FD ]
Line_14 $$ final Integer key = staticMapping.get(parseId(nameId[1]))-->Line_21 $$ reportDuplicateEntry("Got multiple names associated with the same id: ", key, value, key, prevValue)[ FD ]
Line_14 $$ final Integer key = staticMapping.get(parseId(nameId[1]))-->Line_26 $$ reportDuplicateEntry("Got multiple ids associated with the same name: ", key, value, prevKey, value)[ FD ]
Line_8 $$ while ((line = br.readLine()) != null) -->Line_9 $$ String[] nameId = line.split(regex)[ FD ]
Line_3 $$ BufferedReader br = null-->Line_36 $$ if (br != null) [ FD ]
Line_2 $$ public static void updateMapInternal(BiMap<Integer, String> map, String mapName, String command, String regex, Map<Integer, Integer> staticMapping) throws IOException -->Line_14 $$ final Integer key = staticMapping.get(parseId(nameId[1]))[ FD ]
Line_2 $$ public static void updateMapInternal(BiMap<Integer, String> map, String mapName, String command, String regex, Map<Integer, Integer> staticMapping) throws IOException -->Line_16 $$ if (map.containsKey(key)) [ FD ]
Line_2 $$ public static void updateMapInternal(BiMap<Integer, String> map, String mapName, String command, String regex, Map<Integer, Integer> staticMapping) throws IOException -->Line_31 $$ LOG.info("Updated " + mapName + " map size: " + map.size())[ FD ]
Line_16 $$ if (map.containsKey(key)) -->Line_18 $$ if (value.equals(prevValue)) [ CD ]
Line_2 $$ public static void updateMapInternal(BiMap<Integer, String> map, String mapName, String command, String regex, Map<Integer, Integer> staticMapping) throws IOException -->Line_17 $$ final String prevValue = map.get(key)[ FD ]
Line_8 $$ while ((line = br.readLine()) != null) -->Line_14 $$ final Integer key = staticMapping.get(parseId(nameId[1]))[ CD ]
