Line_2 $$ private static ClassLoader buildMainLoader(String argsPath) -->Line_12 $$ final List<URL> urls = new ArrayList<URL>()[ CD ]
Line_15 $$ String classpath = reader.readLine()-->Line_16 $$ for (String s : classpath.split(File.pathSeparator)) [ FD ]
Line_2 $$ private static ClassLoader buildMainLoader(String argsPath) -->Line_27 $$ final ClassLoader[] ref = new ClassLoader[1][ CD ]
Line_2 $$ private static ClassLoader buildMainLoader(String argsPath) -->Line_28 $$ new Runnable() [ CD ]
Line_2 $$ private static ClassLoader buildMainLoader(String argsPath) -->Line_3 $$ Set<URL> bootstrapUrls = new HashSet<URL>()[ CD ]
Line_3 $$ Set<URL> bootstrapUrls = new HashSet<URL>()-->Line_18 $$ if (!bootstrapUrls.contains(url)) [ FD ]
Line_5 $$ Method method = ClassLoader.class.getDeclaredMethod("getBootstrapClassPath")-->Line_7 $$ URLClassPath ucp = (URLClassPath) method.invoke(null)[ FD ]
Line_12 $$ final List<URL> urls = new ArrayList<URL>()-->Line_19 $$ urls.add(url)[ FD ]
Line_14 $$ BufferedReader reader = new BufferedReader(new FileReader(argsPath))-->Line_15 $$ String classpath = reader.readLine()[ FD ]
Line_5 $$ Method method = ClassLoader.class.getDeclaredMethod("getBootstrapClassPath")-->Line_6 $$ method.setAccessible(true)[ FD ]
Line_28 $$ new Runnable() -->Line_30 $$ ref[0] = UrlClassLoader.build().urls(urls).useCache().get()[ CD ]
Line_12 $$ final List<URL> urls = new ArrayList<URL>()-->Line_30 $$ ref[0] = UrlClassLoader.build().urls(urls).useCache().get()[ FD ]
Line_3 $$ Set<URL> bootstrapUrls = new HashSet<URL>()-->Line_8 $$ Collections.addAll(bootstrapUrls, ucp.getURLs())[ FD ]
Line_7 $$ URLClassPath ucp = (URLClassPath) method.invoke(null)-->Line_8 $$ Collections.addAll(bootstrapUrls, ucp.getURLs())[ FD ]
Line_17 $$ URL url = new File(s).toURI().toURL()-->Line_19 $$ urls.add(url)[ FD ]
Line_14 $$ BufferedReader reader = new BufferedReader(new FileReader(argsPath))-->Line_22 $$ reader.close()[ FD ]
Line_18 $$ if (!bootstrapUrls.contains(url)) -->Line_19 $$ urls.add(url)[ CD ]
Line_17 $$ URL url = new File(s).toURI().toURL()-->Line_18 $$ if (!bootstrapUrls.contains(url)) [ FD ]
Line_2 $$ private static ClassLoader buildMainLoader(String argsPath) -->Line_33 $$ return ref[0][ CD ]
