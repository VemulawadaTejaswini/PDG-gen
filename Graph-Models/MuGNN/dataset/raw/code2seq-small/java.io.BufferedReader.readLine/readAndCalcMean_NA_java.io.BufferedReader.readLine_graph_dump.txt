Line_28 $$ if (br != null) -->Line_29 $$ br.close()[ CD ]
Line_13 $$ while ((line = br.readLine()) != null) -->Line_14 $$ StringTokenizer st = new StringTokenizer(line)[ CD ]
Line_2 $$ private double readAndCalcMean(Path path, Configuration conf) throws IOException -->Line_3 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_7 $$ BufferedReader br = null-->Line_13 $$ while ((line = br.readLine()) != null) [ FD ]
Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_29 $$ br.close()[ FD ]
Line_11 $$ long length = 0-->Line_21 $$ length = Long.parseLong(lengthLit)[ FD ]
Line_2 $$ private double readAndCalcMean(Path path, Configuration conf) throws IOException -->Line_3 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_13 $$ while ((line = br.readLine()) != null) [ FD ]
Line_7 $$ BufferedReader br = null-->Line_29 $$ br.close()[ FD ]
Line_2 $$ private double readAndCalcMean(Path path, Configuration conf) throws IOException -->Line_7 $$ BufferedReader br = null[ CD ]
Line_14 $$ StringTokenizer st = new StringTokenizer(line)-->Line_15 $$ String type = st.nextToken()[ FD ]
Line_13 $$ while ((line = br.readLine()) != null) -->Line_15 $$ String type = st.nextToken()[ CD ]
Line_14 $$ StringTokenizer st = new StringTokenizer(line)-->Line_17 $$ String countLit = st.nextToken()[ FD ]
Line_12 $$ String line-->Line_13 $$ while ((line = br.readLine()) != null) [ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_5 $$ if (!fs.exists(file))[ FD ]
Line_2 $$ private double readAndCalcMean(Path path, Configuration conf) throws IOException -->Line_4 $$ Path file = new Path(path, "part-r-00000")[ CD ]
Line_4 $$ Path file = new Path(path, "part-r-00000")-->Line_5 $$ if (!fs.exists(file))[ FD ]
Line_16 $$ if (type.equals(COUNT.toString())) -->Line_18 $$ count = Long.parseLong(countLit)[ CD ]
Line_16 $$ if (type.equals(COUNT.toString())) -->Line_19 $$ if (type.equals(LENGTH.toString())) [ CD ]
Line_10 $$ long count = 0-->Line_18 $$ count = Long.parseLong(countLit)[ FD ]
Line_7 $$ BufferedReader br = null-->Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))[ FD ]
Line_15 $$ String type = st.nextToken()-->Line_19 $$ if (type.equals(LENGTH.toString())) [ FD ]
Line_20 $$ String lengthLit = st.nextToken()-->Line_21 $$ length = Long.parseLong(lengthLit)[ FD ]
Line_15 $$ String type = st.nextToken()-->Line_16 $$ if (type.equals(COUNT.toString())) [ FD ]
Line_13 $$ while ((line = br.readLine()) != null) -->Line_16 $$ if (type.equals(COUNT.toString())) [ CD ]
Line_19 $$ if (type.equals(LENGTH.toString())) -->Line_20 $$ String lengthLit = st.nextToken()[ CD ]
Line_2 $$ private double readAndCalcMean(Path path, Configuration conf) throws IOException -->Line_5 $$ if (!fs.exists(file))[ CD ]
Line_19 $$ if (type.equals(LENGTH.toString())) -->Line_21 $$ length = Long.parseLong(lengthLit)[ CD ]
Line_17 $$ String countLit = st.nextToken()-->Line_18 $$ count = Long.parseLong(countLit)[ FD ]
Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_28 $$ if (br != null) [ FD ]
Line_4 $$ Path file = new Path(path, "part-r-00000")-->Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))[ FD ]
Line_14 $$ StringTokenizer st = new StringTokenizer(line)-->Line_20 $$ String lengthLit = st.nextToken()[ FD ]
Line_7 $$ BufferedReader br = null-->Line_28 $$ if (br != null) [ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))[ FD ]
Line_16 $$ if (type.equals(COUNT.toString())) -->Line_17 $$ String countLit = st.nextToken()[ CD ]
