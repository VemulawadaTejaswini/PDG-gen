Line_3 $$ JobConf conf = new JobConf()-->Line_19 $$ InputStream in = CompressionEmulationUtil.getPossiblyDecompressedInputStream(compressedFile, conf, 0)[ FD ]
Line_11 $$ Path tempDir = new Path(rootTempDir, "TestPossiblyCompressedDecompressedStreams")-->Line_12 $$ lfs.delete(tempDir, true)[ FD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_12 $$ lfs.delete(tempDir, true)[ CD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_4 $$ FileSystem lfs = FileSystem.getLocal(conf)[ FD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_7 $$ CompressionEmulationUtil.setInputCompressionEmulationEnabled(conf, true)[ CD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_19 $$ InputStream in = CompressionEmulationUtil.getPossiblyDecompressedInputStream(compressedFile, conf, 0)[ CD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_21 $$ String readLine = reader.readLine()[ CD ]
Line_20 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_21 $$ String readLine = reader.readLine()[ FD ]
Line_18 $$ compressedFile = compressedFile.suffix(".gz")-->Line_19 $$ InputStream in = CompressionEmulationUtil.getPossiblyDecompressedInputStream(compressedFile, conf, 0)[ FD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_13 $$ Path compressedFile = new Path(tempDir, "test")[ CD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_9 $$ conf.setClass(FileOutputFormat.COMPRESS_CODEC, GzipCodec.class, CompressionCodec.class)[ CD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_18 $$ compressedFile = compressedFile.suffix(".gz")[ CD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_8 $$ conf.setBoolean(FileOutputFormat.COMPRESS, true)[ CD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_5 $$ String inputLine = "Hi Hello!"[ CD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_15 $$ BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out))[ CD ]
Line_13 $$ Path compressedFile = new Path(tempDir, "test")-->Line_18 $$ compressedFile = compressedFile.suffix(".gz")[ FD ]
Line_4 $$ FileSystem lfs = FileSystem.getLocal(conf)-->Line_12 $$ lfs.delete(tempDir, true)[ FD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_4 $$ FileSystem lfs = FileSystem.getLocal(conf)[ CD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_7 $$ CompressionEmulationUtil.setInputCompressionEmulationEnabled(conf, true)[ FD ]
Line_4 $$ FileSystem lfs = FileSystem.getLocal(conf)-->Line_10 $$ Path rootTempDir = new Path(System.getProperty("test.build.data", "/tmp")).makeQualified(lfs.getUri(), lfs.getWorkingDirectory())[ FD ]
Line_5 $$ String inputLine = "Hi Hello!"-->Line_22 $$ assertEquals("Compression/Decompression error", inputLine, readLine)[ FD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_3 $$ JobConf conf = new JobConf()[ CD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_14 $$ OutputStream out = CompressionEmulationUtil.getPossiblyCompressedOutputStream(compressedFile, conf)[ CD ]
Line_20 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_23 $$ reader.close()[ FD ]
Line_21 $$ String readLine = reader.readLine()-->Line_22 $$ assertEquals("Compression/Decompression error", inputLine, readLine)[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_8 $$ conf.setBoolean(FileOutputFormat.COMPRESS, true)[ FD ]
Line_15 $$ BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_17 $$ writer.close()[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_6 $$ CompressionEmulationUtil.setCompressionEmulationEnabled(conf, true)[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_14 $$ OutputStream out = CompressionEmulationUtil.getPossiblyCompressedOutputStream(compressedFile, conf)[ FD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_16 $$ writer.write(inputLine)[ CD ]
Line_13 $$ Path compressedFile = new Path(tempDir, "test")-->Line_19 $$ InputStream in = CompressionEmulationUtil.getPossiblyDecompressedInputStream(compressedFile, conf, 0)[ FD ]
Line_5 $$ String inputLine = "Hi Hello!"-->Line_16 $$ writer.write(inputLine)[ FD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_23 $$ reader.close()[ CD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_22 $$ assertEquals("Compression/Decompression error", inputLine, readLine)[ CD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_20 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))[ CD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_17 $$ writer.close()[ CD ]
Line_13 $$ Path compressedFile = new Path(tempDir, "test")-->Line_14 $$ OutputStream out = CompressionEmulationUtil.getPossiblyCompressedOutputStream(compressedFile, conf)[ FD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_11 $$ Path tempDir = new Path(rootTempDir, "TestPossiblyCompressedDecompressedStreams")[ CD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_6 $$ CompressionEmulationUtil.setCompressionEmulationEnabled(conf, true)[ CD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_9 $$ conf.setClass(FileOutputFormat.COMPRESS_CODEC, GzipCodec.class, CompressionCodec.class)[ FD ]
Line_15 $$ BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_16 $$ writer.write(inputLine)[ FD ]
Line_2 $$ public void testPossiblyCompressedDecompressedStreams() throws IOException -->Line_10 $$ Path rootTempDir = new Path(System.getProperty("test.build.data", "/tmp")).makeQualified(lfs.getUri(), lfs.getWorkingDirectory())[ CD ]
