Line_23 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_34 $$ line = reader.readLine()[ FD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_11 $$ conf.setLong(GenerateData.GRIDMIX_GEN_BYTES, dataSize)[ CD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_17 $$ runDataGenJob(conf, tempDir)[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_12 $$ conf.set("mapreduce.job.hdfs-servers", "")[ FD ]
Line_15 $$ Path tempDir = new Path(rootTempDir, "TestRandomCompressedTextDataGenr")-->Line_18 $$ FileStatus[] files = lfs.listStatus(tempDir, new Utils.OutputFileUtils.OutputFilesFilter())[ FD ]
Line_34 $$ line = reader.readLine()-->Line_30 $$ while (line != null) [ FD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_14 $$ Path rootTempDir = new Path(System.getProperty("test.build.data", "/tmp")).makeQualified(lfs.getUri(), lfs.getWorkingDirectory())[ CD ]
Line_4 $$ int listSize = 20-->Line_9 $$ conf.setInt(RandomTextDataGenerator.GRIDMIX_DATAGEN_RANDOMTEXT_LISTSIZE, listSize)[ FD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_19 $$ long size = 0[ CD ]
Line_15 $$ Path tempDir = new Path(rootTempDir, "TestRandomCompressedTextDataGenr")-->Line_17 $$ runDataGenJob(conf, tempDir)[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_11 $$ conf.setLong(GenerateData.GRIDMIX_GEN_BYTES, dataSize)[ FD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_3 $$ int wordSize = 10[ CD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_13 $$ FileSystem lfs = FileSystem.getLocal(conf)[ FD ]
Line_20 $$ long maxLineSize = 0-->Line_27 $$ if (lineSize > maxLineSize) [ FD ]
Line_19 $$ long size = 0-->Line_32 $$ size += word.getBytes().length[ FD ]
Line_23 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_24 $$ String line = reader.readLine()[ FD ]
Line_24 $$ String line = reader.readLine()-->Line_34 $$ line = reader.readLine()[ FD ]
Line_13 $$ FileSystem lfs = FileSystem.getLocal(conf)-->Line_14 $$ Path rootTempDir = new Path(System.getProperty("test.build.data", "/tmp")).makeQualified(lfs.getUri(), lfs.getWorkingDirectory())[ FD ]
Line_26 $$ long lineSize = line.getBytes().length-->Line_28 $$ maxLineSize = lineSize[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_7 $$ CompressionEmulationUtil.setCompressionEmulationEnabled(conf, true)[ FD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_4 $$ int listSize = 20[ CD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_13 $$ FileSystem lfs = FileSystem.getLocal(conf)[ CD ]
Line_13 $$ FileSystem lfs = FileSystem.getLocal(conf)-->Line_16 $$ lfs.delete(tempDir, true)[ FD ]
Line_27 $$ if (lineSize > maxLineSize) -->Line_28 $$ maxLineSize = lineSize[ CD ]
Line_30 $$ while (line != null) -->Line_34 $$ line = reader.readLine()[ CD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_16 $$ lfs.delete(tempDir, true)[ CD ]
Line_24 $$ String line = reader.readLine()-->Line_31 $$ for (String word : line.split("\\s")) [ FD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_12 $$ conf.set("mapreduce.job.hdfs-servers", "")[ CD ]
Line_25 $$ if (line != null) -->Line_27 $$ if (lineSize > maxLineSize) [ CD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_18 $$ FileStatus[] files = lfs.listStatus(tempDir, new Utils.OutputFileUtils.OutputFilesFilter())[ CD ]
Line_13 $$ FileSystem lfs = FileSystem.getLocal(conf)-->Line_18 $$ FileStatus[] files = lfs.listStatus(tempDir, new Utils.OutputFileUtils.OutputFilesFilter())[ FD ]
Line_23 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_37 $$ reader.close()[ FD ]
Line_24 $$ String line = reader.readLine()-->Line_25 $$ if (line != null) [ FD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_39 $$ assertTrue(size >= dataSize)[ CD ]
Line_25 $$ if (line != null) -->Line_30 $$ while (line != null) [ CD ]
Line_24 $$ String line = reader.readLine()-->Line_26 $$ long lineSize = line.getBytes().length[ FD ]
Line_26 $$ long lineSize = line.getBytes().length-->Line_27 $$ if (lineSize > maxLineSize) [ FD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_6 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_15 $$ Path tempDir = new Path(rootTempDir, "TestRandomCompressedTextDataGenr")[ CD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_5 $$ long dataSize = 10 * 1024 * 1024[ CD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_20 $$ long maxLineSize = 0[ CD ]
Line_21 $$ for (FileStatus status : files) -->Line_22 $$ InputStream in = CompressionEmulationUtil.getPossiblyDecompressedInputStream(status.getPath(), conf, 0)[ FD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_10 $$ conf.setInt(RandomTextDataGenerator.GRIDMIX_DATAGEN_RANDOMTEXT_WORDSIZE, wordSize)[ CD ]
Line_20 $$ long maxLineSize = 0-->Line_28 $$ maxLineSize = lineSize[ FD ]
Line_5 $$ long dataSize = 10 * 1024 * 1024-->Line_11 $$ conf.setLong(GenerateData.GRIDMIX_GEN_BYTES, dataSize)[ FD ]
Line_24 $$ String line = reader.readLine()-->Line_30 $$ while (line != null) [ FD ]
Line_34 $$ line = reader.readLine()-->Line_31 $$ for (String word : line.split("\\s")) [ FD ]
Line_31 $$ for (String word : line.split("\\s")) -->Line_32 $$ size += word.getBytes().length[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_10 $$ conf.setInt(RandomTextDataGenerator.GRIDMIX_DATAGEN_RANDOMTEXT_WORDSIZE, wordSize)[ FD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_7 $$ CompressionEmulationUtil.setCompressionEmulationEnabled(conf, true)[ CD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_9 $$ conf.setInt(RandomTextDataGenerator.GRIDMIX_DATAGEN_RANDOMTEXT_LISTSIZE, listSize)[ CD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_8 $$ CompressionEmulationUtil.setInputCompressionEmulationEnabled(conf, true)[ CD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_9 $$ conf.setInt(RandomTextDataGenerator.GRIDMIX_DATAGEN_RANDOMTEXT_LISTSIZE, listSize)[ FD ]
Line_15 $$ Path tempDir = new Path(rootTempDir, "TestRandomCompressedTextDataGenr")-->Line_16 $$ lfs.delete(tempDir, true)[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_22 $$ InputStream in = CompressionEmulationUtil.getPossiblyDecompressedInputStream(status.getPath(), conf, 0)[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_8 $$ CompressionEmulationUtil.setInputCompressionEmulationEnabled(conf, true)[ FD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_40 $$ assertTrue(size <= dataSize + maxLineSize)[ CD ]
Line_3 $$ int wordSize = 10-->Line_10 $$ conf.setInt(RandomTextDataGenerator.GRIDMIX_DATAGEN_RANDOMTEXT_WORDSIZE, wordSize)[ FD ]
Line_25 $$ if (line != null) -->Line_26 $$ long lineSize = line.getBytes().length[ CD ]
Line_2 $$ public void testRandomCompressedTextDataGenerator() throws Exception -->Line_17 $$ runDataGenJob(conf, tempDir)[ CD ]
