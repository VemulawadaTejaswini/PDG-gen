Line_44 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_45 $$ Assert.assertEquals("Hello World!", reader.readLine())[ FD ]
Line_31 $$ List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile))-->Line_32 $$ containerLaunchContext.setCommands(commands)[ FD ]
Line_5 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_11 $$ fileWriter.println("@ping -n 100 127.0.0.1 >nul")[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_23 $$ rsrc_alpha.setSize(-1)[ CD ]
Line_57 $$ int expectedExitCode = ContainerExitStatus.KILLED_BY_APPMASTER-->Line_58 $$ Assert.assertEquals(expectedExitCode, containerStatus.getExitStatus())[ FD ]
Line_34 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_35 $$ list.add(scRequest)[ FD ]
Line_38 $$ int timeoutSecs = 0-->Line_39 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_55 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)[ CD ]
Line_8 $$ if (Shell.WINDOWS) -->Line_10 $$ fileWriter.println("@echo " + cId + ">> " + processStartFile)[ CD ]
Line_46 $$ String pid = reader.readLine().trim()-->Line_59 $$ Assert.assertFalse("Process is still alive!", DefaultContainerExecutor.containerIsAlive(pid))[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_25 $$ rsrc_alpha.setType(LocalResourceType.FILE)[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_51 $$ containerIds.add(cId)[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_57 $$ int expectedExitCode = ContainerExitStatus.KILLED_BY_APPMASTER[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_47 $$ Assert.assertEquals(null, reader.readLine())[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_39 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_58 $$ Assert.assertEquals(expectedExitCode, containerStatus.getExitStatus())[ CD ]
Line_4 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "scriptFile")-->Line_31 $$ List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile))[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_3 $$ containerManager.start()[ CD ]
Line_56 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)-->Line_58 $$ Assert.assertEquals(expectedExitCode, containerStatus.getExitStatus())[ FD ]
Line_19 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_33 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))[ FD ]
Line_8 $$ if (Shell.WINDOWS) -->Line_11 $$ fileWriter.println("@ping -n 100 127.0.0.1 >nul")[ CD ]
Line_5 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_13 $$ fileWriter.write("\numask 0")[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_19 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)[ CD ]
Line_7 $$ ContainerId cId = createContainerId(0)-->Line_33 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_50 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_30 $$ containerLaunchContext.setLocalResources(localResources)[ CD ]
Line_7 $$ ContainerId cId = createContainerId(0)-->Line_51 $$ containerIds.add(cId)[ FD ]
Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_25 $$ rsrc_alpha.setType(LocalResourceType.FILE)[ FD ]
Line_8 $$ if (Shell.WINDOWS) -->Line_13 $$ fileWriter.write("\numask 0")[ CD ]
Line_55 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)-->Line_56 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)[ FD ]
Line_8 $$ if (Shell.WINDOWS) -->Line_9 $$ fileWriter.println("@echo Hello World!> " + processStartFile)[ CD ]
Line_5 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_16 $$ fileWriter.write("\nexec sleep 100")[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_31 $$ List<String> commands = Arrays.asList(Shell.getRunScriptCommand(scriptFile))[ CD ]
Line_44 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_47 $$ Assert.assertEquals(null, reader.readLine())[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_28 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()[ CD ]
Line_6 $$ File processStartFile = new File(tmpDir, "start_file.txt").getAbsoluteFile()-->Line_39 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_36 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ CD ]
Line_46 $$ String pid = reader.readLine().trim()-->Line_49 $$ Assert.assertTrue("Process is not alive!", DefaultContainerExecutor.containerIsAlive(pid))[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_29 $$ localResources.put(destinationFile, rsrc_alpha)[ CD ]
Line_20 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())))-->Line_22 $$ rsrc_alpha.setResource(resource_alpha)[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_38 $$ int timeoutSecs = 0[ CD ]
Line_5 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_18 $$ fileWriter.close()[ FD ]
Line_50 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()-->Line_55 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)[ FD ]
Line_5 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_10 $$ fileWriter.println("@echo " + cId + ">> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_18 $$ fileWriter.close()[ CD ]
Line_7 $$ ContainerId cId = createContainerId(0)-->Line_54 $$ BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE)[ FD ]
Line_52 $$ StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds)-->Line_53 $$ containerManager.stopContainers(stopRequest)[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_43 $$ Assert.assertTrue("ProcessStartFile doesn't exist!", processStartFile.exists())[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_52 $$ StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds)[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_24 $$ rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION)[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_4 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "scriptFile")[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_49 $$ Assert.assertTrue("Process is not alive!", DefaultContainerExecutor.containerIsAlive(pid))[ CD ]
Line_4 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "scriptFile")-->Line_26 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ FD ]
Line_4 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "scriptFile")-->Line_20 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())))[ FD ]
Line_46 $$ String pid = reader.readLine().trim()-->Line_48 $$ Assert.assertTrue("Process is not alive!", DefaultContainerExecutor.containerIsAlive(pid))[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_26 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_33 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))[ CD ]
Line_8 $$ if (Shell.WINDOWS) -->Line_14 $$ fileWriter.write("\necho Hello World! > " + processStartFile)[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_27 $$ String destinationFile = "dest_file"[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_37 $$ containerManager.startContainers(allRequests)[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_44 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))[ CD ]
Line_36 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)-->Line_37 $$ containerManager.startContainers(allRequests)[ FD ]
Line_5 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_9 $$ fileWriter.println("@echo Hello World!> " + processStartFile)[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_22 $$ rsrc_alpha.setResource(resource_alpha)[ CD ]
Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_22 $$ rsrc_alpha.setResource(resource_alpha)[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_48 $$ Assert.assertTrue("Process is not alive!", DefaultContainerExecutor.containerIsAlive(pid))[ CD ]
Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_23 $$ rsrc_alpha.setSize(-1)[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_5 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_6 $$ File processStartFile = new File(tmpDir, "start_file.txt").getAbsoluteFile()[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_46 $$ String pid = reader.readLine().trim()[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_54 $$ BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE)[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_56 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_35 $$ list.add(scRequest)[ CD ]
Line_39 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) -->Line_41 $$ LOG.info("Waiting for process start-file to be created")[ CD ]
Line_27 $$ String destinationFile = "dest_file"-->Line_29 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_28 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_30 $$ containerLaunchContext.setLocalResources(localResources)[ FD ]
Line_44 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_46 $$ String pid = reader.readLine().trim()[ FD ]
Line_33 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))-->Line_35 $$ list.add(scRequest)[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_7 $$ ContainerId cId = createContainerId(0)[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)[ CD ]
Line_19 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_30 $$ containerLaunchContext.setLocalResources(localResources)[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_32 $$ containerLaunchContext.setCommands(commands)[ CD ]
Line_39 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) -->Line_40 $$ Thread.sleep(1000)[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_8 $$ if (Shell.WINDOWS) [ CD ]
Line_50 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()-->Line_52 $$ StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds)[ FD ]
Line_19 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_32 $$ containerLaunchContext.setCommands(commands)[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_59 $$ Assert.assertFalse("Process is still alive!", DefaultContainerExecutor.containerIsAlive(pid))[ CD ]
Line_6 $$ File processStartFile = new File(tmpDir, "start_file.txt").getAbsoluteFile()-->Line_43 $$ Assert.assertTrue("ProcessStartFile doesn't exist!", processStartFile.exists())[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_20 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())))[ CD ]
Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_26 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ FD ]
Line_5 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_14 $$ fileWriter.write("\necho Hello World! > " + processStartFile)[ FD ]
Line_50 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()-->Line_51 $$ containerIds.add(cId)[ FD ]
Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_29 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_53 $$ containerManager.stopContainers(stopRequest)[ CD ]
Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_24 $$ rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION)[ FD ]
Line_28 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_29 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_45 $$ Assert.assertEquals("Hello World!", reader.readLine())[ CD ]
Line_8 $$ if (Shell.WINDOWS) -->Line_16 $$ fileWriter.write("\nexec sleep 100")[ CD ]
Line_2 $$ public void testContainerLaunchAndStop() throws IOException, InterruptedException, YarnException -->Line_34 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()[ CD ]
Line_34 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_36 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ FD ]
