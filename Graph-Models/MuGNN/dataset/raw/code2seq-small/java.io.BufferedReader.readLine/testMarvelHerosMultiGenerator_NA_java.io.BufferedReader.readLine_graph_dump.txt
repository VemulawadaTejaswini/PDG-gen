Line_30 $$ while ((line = reader.readLine()) != null) -->Line_35 $$ writer.addDocument(doc)[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_13 $$ mapping.put("body", new Analyzer() [ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_66 $$ assertThat(corrections.length, equalTo(1))[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_70 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("quasar ii"))[ CD ]
Line_19 $$ mapping.put("body_reverse", new Analyzer() -->Line_21 $$ Tokenizer t = new StandardTokenizer()[ CD ]
Line_4 $$ Map<String, Analyzer> mapping = new HashMap()-->Line_5 $$ mapping.put("body_ngram", new Analyzer() [ FD ]
Line_30 $$ while ((line = reader.readLine()) != null) -->Line_34 $$ doc.add(new Field("body_ngram", line, TextField.TYPE_NOT_STORED))[ CD ]
Line_13 $$ mapping.put("body", new Analyzer() -->Line_15 $$ Tokenizer t = new StandardTokenizer()[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_53 $$ assertThat(corrections.length, equalTo(0))[ CD ]
Line_30 $$ while ((line = reader.readLine()) != null) -->Line_32 $$ doc.add(new Field("body", line, TextField.TYPE_NOT_STORED))[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_60 $$ assertThat(corrections[1].join(new BytesRef(" ")).utf8ToString(), equalTo("zorr the god jewel"))[ CD ]
Line_5 $$ mapping.put("body_ngram", new Analyzer() -->Line_9 $$ tf.setOutputUnigrams(false)[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_69 $$ assertThat(corrections.length, equalTo(1))[ CD ]
Line_5 $$ mapping.put("body_ngram", new Analyzer() -->Line_10 $$ return new TokenStreamComponents(t, new LowerCaseFilter(tf))[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_58 $$ assertThat(corrections.length, equalTo(4))[ CD ]
Line_4 $$ Map<String, Analyzer> mapping = new HashMap()-->Line_13 $$ mapping.put("body", new Analyzer() [ FD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_61 $$ assertThat(corrections[2].join(new BytesRef(" ")).utf8ToString(), equalTo("four the god jewel"))[ CD ]
Line_31 $$ Document doc = new Document()-->Line_34 $$ doc.add(new Field("body_ngram", line, TextField.TYPE_NOT_STORED))[ FD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_51 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("american ace"))[ CD ]
Line_31 $$ Document doc = new Document()-->Line_32 $$ doc.add(new Field("body", line, TextField.TYPE_NOT_STORED))[ FD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_56 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("american ace"))[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_55 $$ assertThat(corrections.length, equalTo(1))[ CD ]
Line_31 $$ Document doc = new Document()-->Line_33 $$ doc.add(new Field("body_reverse", line, TextField.TYPE_NOT_STORED))[ FD ]
Line_8 $$ ShingleFilter tf = new ShingleFilter(t, 2, 3)-->Line_9 $$ tf.setOutputUnigrams(false)[ FD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_63 $$ assertThat(corrections.length, equalTo(1))[ CD ]
Line_13 $$ mapping.put("body", new Analyzer() -->Line_16 $$ return new TokenStreamComponents(t, new LowerCaseFilter(t))[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_5 $$ mapping.put("body_ngram", new Analyzer() [ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_59 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_37 $$ DirectoryReader ir = DirectoryReader.open(writer, false)[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_50 $$ assertThat(corrections.length, equalTo(1))[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_41 $$ spellchecker.setMinQueryLength(1)[ CD ]
Line_31 $$ Document doc = new Document()-->Line_35 $$ writer.addDocument(doc)[ FD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_67 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_19 $$ mapping.put("body_reverse", new Analyzer() [ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_3 $$ RAMDirectory dir = new RAMDirectory()[ CD ]
Line_5 $$ mapping.put("body_ngram", new Analyzer() -->Line_8 $$ ShingleFilter tf = new ShingleFilter(t, 2, 3)[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_30 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_30 $$ while ((line = reader.readLine()) != null) -->Line_31 $$ Document doc = new Document()[ CD ]
Line_4 $$ Map<String, Analyzer> mapping = new HashMap()-->Line_19 $$ mapping.put("body_reverse", new Analyzer() [ FD ]
Line_30 $$ while ((line = reader.readLine()) != null) -->Line_33 $$ doc.add(new Field("body_reverse", line, TextField.TYPE_NOT_STORED))[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_47 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("american ace"))[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_46 $$ assertThat(corrections.length, equalTo(1))[ CD ]
Line_19 $$ mapping.put("body_reverse", new Analyzer() -->Line_22 $$ return new TokenStreamComponents(t, new ReverseStringFilter(new LowerCaseFilter(t)))[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_4 $$ Map<String, Analyzer> mapping = new HashMap()[ CD ]
Line_2 $$ public void testMarvelHerosMultiGenerator() throws IOException -->Line_64 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the god jewel"))[ CD ]
Line_5 $$ mapping.put("body_ngram", new Analyzer() -->Line_7 $$ Tokenizer t = new StandardTokenizer()[ CD ]
