Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_44 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_77 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("captain america"))[ CD ]
Line_24 $$ while ((line = reader.readLine()) != null) -->Line_26 $$ doc.add(new Field("body", line, TextField.TYPE_NOT_STORED))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_83 $$ assertThat(corrections.length, equalTo(2))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_43 $$ assertThat(corrections.length, equalTo(4))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_55 $$ assertThat(corrections.length, equalTo(1))[ CD ]
Line_24 $$ while ((line = reader.readLine()) != null) -->Line_27 $$ doc.add(new Field("body_ngram", line, TextField.TYPE_NOT_STORED))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_37 $$ assertThat(corrections.length, equalTo(1))[ CD ]
Line_57 $$ Analyzer analyzer = new Analyzer() -->Line_59 $$ Tokenizer t = new StandardTokenizer()[ CD ]
Line_4 $$ Map<String, Analyzer> mapping = new HashMap()-->Line_5 $$ mapping.put("body_ngram", new Analyzer() [ FD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_4 $$ Map<String, Analyzer> mapping = new HashMap()[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_45 $$ assertThat(corrections[1].join(new BytesRef(" ")).utf8ToString(), equalTo("xor the god jewel"))[ CD ]
Line_13 $$ mapping.put("body", new Analyzer() -->Line_15 $$ Tokenizer t = new StandardTokenizer()[ CD ]
Line_5 $$ mapping.put("body_ngram", new Analyzer() -->Line_9 $$ tf.setOutputUnigrams(false)[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_47 $$ assertThat(corrections[3].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the got jewel"))[ CD ]
Line_25 $$ Document doc = new Document()-->Line_27 $$ doc.add(new Field("body_ngram", line, TextField.TYPE_NOT_STORED))[ FD ]
Line_5 $$ mapping.put("body_ngram", new Analyzer() -->Line_10 $$ return new TokenStreamComponents(t, new LowerCaseFilter(tf))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_85 $$ assertThat(corrections[1].join(new BytesRef(" ")).utf8ToString(), equalTo("xor the god jewel"))[ CD ]
Line_4 $$ Map<String, Analyzer> mapping = new HashMap()-->Line_13 $$ mapping.put("body", new Analyzer() [ FD ]
Line_62 $$ SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer())-->Line_63 $$ parser.parse(new StringReader("usa => usa, america, american\nursa => usa, america, american"))[ FD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_80 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("captain america"))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_53 $$ assertThat(corrections[3].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the got jewel"))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_40 $$ assertThat(corrections.length, equalTo(0))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_46 $$ assertThat(corrections[2].join(new BytesRef(" ")).utf8ToString(), equalTo("xorn the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_49 $$ assertThat(corrections.length, equalTo(4))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_34 $$ spellchecker.setMinQueryLength(1)[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_50 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_38 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("american ace"))[ CD ]
Line_8 $$ ShingleFilter tf = new ShingleFilter(t, 2, 3)-->Line_9 $$ tf.setOutputUnigrams(false)[ FD ]
Line_13 $$ mapping.put("body", new Analyzer() -->Line_16 $$ return new TokenStreamComponents(t, new LowerCaseFilter(t))[ CD ]
Line_25 $$ Document doc = new Document()-->Line_26 $$ doc.add(new Field("body", line, TextField.TYPE_NOT_STORED))[ FD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_71 $$ spellchecker.setAccuracy(0.0f)[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_84 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_24 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_73 $$ spellchecker.setMinQueryLength(1)[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_51 $$ assertThat(corrections[1].join(new BytesRef(" ")).utf8ToString(), equalTo("xor the god jewel"))[ CD ]
Line_60 $$ TokenFilter filter = new LowerCaseFilter(t)-->Line_64 $$ filter = new SynonymFilter(filter, parser.build(), true)[ FD ]
Line_57 $$ Analyzer analyzer = new Analyzer() -->Line_60 $$ TokenFilter filter = new LowerCaseFilter(t)[ CD ]
Line_25 $$ Document doc = new Document()-->Line_28 $$ writer.addDocument(doc)[ FD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_5 $$ mapping.put("body_ngram", new Analyzer() [ CD ]
Line_24 $$ while ((line = reader.readLine()) != null) -->Line_28 $$ writer.addDocument(doc)[ CD ]
Line_5 $$ mapping.put("body_ngram", new Analyzer() -->Line_8 $$ ShingleFilter tf = new ShingleFilter(t, 2, 3)[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_30 $$ DirectoryReader ir = DirectoryReader.open(writer, false)[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_72 $$ spellchecker.setMinPrefix(1)[ CD ]
Line_24 $$ while ((line = reader.readLine()) != null) -->Line_25 $$ Document doc = new Document()[ CD ]
Line_57 $$ Analyzer analyzer = new Analyzer() -->Line_68 $$ return new TokenStreamComponents(t, filter)[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_56 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("xorr the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_52 $$ assertThat(corrections[2].join(new BytesRef(" ")).utf8ToString(), equalTo("xorn the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_13 $$ mapping.put("body", new Analyzer() [ CD ]
Line_2 $$ public void testMarvelHerosTrigram() throws IOException -->Line_3 $$ RAMDirectory dir = new RAMDirectory()[ CD ]
Line_5 $$ mapping.put("body_ngram", new Analyzer() -->Line_7 $$ Tokenizer t = new StandardTokenizer()[ CD ]
Line_62 $$ SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer())-->Line_64 $$ filter = new SynonymFilter(filter, parser.build(), true)[ FD ]
