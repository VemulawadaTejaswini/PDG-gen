Line_35 $$ if (runningJob.isSuccessful()) -->Line_46 $$ line = br.readLine()[ CD ]
Line_46 $$ line = br.readLine()-->Line_49 $$ line = br.readLine()[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_26 $$ job.setMapOutputValueClass(LongWritable.class)[ CD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_45 $$ output.add(line.substring(0, 1) + line.substring(4, 5))[ CD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_50 $$ Assert.assertNull(line)[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_33 $$ RunningJob runningJob = client.submitJob(job)[ CD ]
Line_41 $$ BufferedReader br = new BufferedReader(new FileReader(new File(out, "part-00000")))-->Line_51 $$ br.close()[ FD ]
Line_18 $$ JobConf job = new JobConf()-->Line_20 $$ TextInputFormat.setInputPaths(job, new Path(in.getPath()))[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_17 $$ pw.close()[ CD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_51 $$ br.close()[ CD ]
Line_46 $$ line = br.readLine()-->Line_47 $$ Assert.assertNotNull(line)[ FD ]
Line_18 $$ JobConf job = new JobConf()-->Line_26 $$ job.setMapOutputValueClass(LongWritable.class)[ FD ]
Line_18 $$ JobConf job = new JobConf()-->Line_30 $$ job.setCombinerKeyGroupingComparator(GroupComparator.class)[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_10 $$ File out = new File(TEST_ROOT_DIR, "output")[ CD ]
Line_11 $$ PrintWriter pw = new PrintWriter(new FileWriter(new File(in, "data.txt")))-->Line_16 $$ pw.println("B|c,5")[ FD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_43 $$ String line = br.readLine()[ CD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_57 $$ Assert.fail("Job failed")[ CD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_55 $$ Assert.assertEquals(expected, output)[ CD ]
Line_6 $$ File in = new File(TEST_ROOT_DIR, "input")-->Line_7 $$ if (!in.mkdirs()) [ FD ]
Line_49 $$ line = br.readLine()-->Line_50 $$ Assert.assertNull(line)[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_34 $$ runningJob.waitForCompletion()[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_27 $$ job.setOutputFormat(TextOutputFormat.class)[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_29 $$ job.setCombinerClass(Combiner.class)[ CD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_37 $$ long combinerInputRecords = counters.getGroup("org.apache.hadoop.mapreduce.TaskCounter").getCounter("COMBINE_INPUT_RECORDS")[ CD ]
Line_18 $$ JobConf job = new JobConf()-->Line_25 $$ job.setMapOutputKeyClass(Text.class)[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_3 $$ if (!new File(TEST_ROOT_DIR).mkdirs()) [ CD ]
Line_11 $$ PrintWriter pw = new PrintWriter(new FileWriter(new File(in, "data.txt")))-->Line_13 $$ pw.println("A|b,2")[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_7 $$ if (!in.mkdirs()) [ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_12 $$ pw.println("A|a,1")[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_20 $$ TextInputFormat.setInputPaths(job, new Path(in.getPath()))[ CD ]
Line_36 $$ Counters counters = runningJob.getCounters()-->Line_38 $$ long combinerOutputRecords = counters.getGroup("org.apache.hadoop.mapreduce.TaskCounter").getCounter("COMBINE_OUTPUT_RECORDS")[ FD ]
Line_42 $$ Set<String> output = new HashSet<String>()-->Line_45 $$ output.add(line.substring(0, 1) + line.substring(4, 5))[ FD ]
Line_43 $$ String line = br.readLine()-->Line_45 $$ output.add(line.substring(0, 1) + line.substring(4, 5))[ FD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_53 $$ expected.add("A2")[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_32 $$ JobClient client = new JobClient(job)[ CD ]
Line_36 $$ Counters counters = runningJob.getCounters()-->Line_37 $$ long combinerInputRecords = counters.getGroup("org.apache.hadoop.mapreduce.TaskCounter").getCounter("COMBINE_INPUT_RECORDS")[ FD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_47 $$ Assert.assertNotNull(line)[ CD ]
Line_42 $$ Set<String> output = new HashSet<String>()-->Line_48 $$ output.add(line.substring(0, 1) + line.substring(4, 5))[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_13 $$ pw.println("A|b,2")[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_23 $$ job.setReducerClass(Reduce.class)[ CD ]
Line_18 $$ JobConf job = new JobConf()-->Line_24 $$ job.setInputFormat(TextInputFormat.class)[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_6 $$ File in = new File(TEST_ROOT_DIR, "input")[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_11 $$ PrintWriter pw = new PrintWriter(new FileWriter(new File(in, "data.txt")))[ CD ]
Line_18 $$ JobConf job = new JobConf()-->Line_27 $$ job.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_42 $$ Set<String> output = new HashSet<String>()[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_14 $$ pw.println("B|a,3")[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_18 $$ JobConf job = new JobConf()[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_22 $$ job.setMapperClass(Map.class)[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_25 $$ job.setMapOutputKeyClass(Text.class)[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_28 $$ job.setOutputValueGroupingComparator(GroupComparator.class)[ CD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_40 $$ Assert.assertTrue(combinerInputRecords > combinerOutputRecords)[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_16 $$ pw.println("B|c,5")[ CD ]
Line_43 $$ String line = br.readLine()-->Line_46 $$ line = br.readLine()[ FD ]
Line_43 $$ String line = br.readLine()-->Line_49 $$ line = br.readLine()[ FD ]
Line_43 $$ String line = br.readLine()-->Line_50 $$ Assert.assertNull(line)[ FD ]
Line_18 $$ JobConf job = new JobConf()-->Line_22 $$ job.setMapperClass(Map.class)[ FD ]
Line_43 $$ String line = br.readLine()-->Line_48 $$ output.add(line.substring(0, 1) + line.substring(4, 5))[ FD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_54 $$ expected.add("B5")[ CD ]
Line_52 $$ Set<String> expected = new HashSet<String>()-->Line_55 $$ Assert.assertEquals(expected, output)[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_35 $$ if (runningJob.isSuccessful()) [ CD ]
Line_18 $$ JobConf job = new JobConf()-->Line_23 $$ job.setReducerClass(Reduce.class)[ FD ]
Line_6 $$ File in = new File(TEST_ROOT_DIR, "input")-->Line_20 $$ TextInputFormat.setInputPaths(job, new Path(in.getPath()))[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_15 $$ pw.println("B|b,4")[ CD ]
Line_52 $$ Set<String> expected = new HashSet<String>()-->Line_53 $$ expected.add("A2")[ FD ]
Line_33 $$ RunningJob runningJob = client.submitJob(job)-->Line_36 $$ Counters counters = runningJob.getCounters()[ FD ]
Line_41 $$ BufferedReader br = new BufferedReader(new FileReader(new File(out, "part-00000")))-->Line_43 $$ String line = br.readLine()[ FD ]
Line_43 $$ String line = br.readLine()-->Line_47 $$ Assert.assertNotNull(line)[ FD ]
Line_11 $$ PrintWriter pw = new PrintWriter(new FileWriter(new File(in, "data.txt")))-->Line_15 $$ pw.println("B|b,4")[ FD ]
Line_46 $$ line = br.readLine()-->Line_50 $$ Assert.assertNull(line)[ FD ]
Line_18 $$ JobConf job = new JobConf()-->Line_21 $$ TextOutputFormat.setOutputPath(job, new Path(out.getPath()))[ FD ]
Line_43 $$ String line = br.readLine()-->Line_44 $$ Assert.assertNotNull(line)[ FD ]
Line_18 $$ JobConf job = new JobConf()-->Line_28 $$ job.setOutputValueGroupingComparator(GroupComparator.class)[ FD ]
Line_46 $$ line = br.readLine()-->Line_48 $$ output.add(line.substring(0, 1) + line.substring(4, 5))[ FD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_36 $$ Counters counters = runningJob.getCounters()[ CD ]
Line_33 $$ RunningJob runningJob = client.submitJob(job)-->Line_35 $$ if (runningJob.isSuccessful()) [ FD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_48 $$ output.add(line.substring(0, 1) + line.substring(4, 5))[ CD ]
Line_10 $$ File out = new File(TEST_ROOT_DIR, "output")-->Line_21 $$ TextOutputFormat.setOutputPath(job, new Path(out.getPath()))[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_21 $$ TextOutputFormat.setOutputPath(job, new Path(out.getPath()))[ CD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_39 $$ Assert.assertTrue(combinerInputRecords > 0)[ CD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_52 $$ Set<String> expected = new HashSet<String>()[ CD ]
Line_41 $$ BufferedReader br = new BufferedReader(new FileReader(new File(out, "part-00000")))-->Line_49 $$ line = br.readLine()[ FD ]
Line_11 $$ PrintWriter pw = new PrintWriter(new FileWriter(new File(in, "data.txt")))-->Line_14 $$ pw.println("B|a,3")[ FD ]
Line_32 $$ JobClient client = new JobClient(job)-->Line_33 $$ RunningJob runningJob = client.submitJob(job)[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_30 $$ job.setCombinerKeyGroupingComparator(GroupComparator.class)[ CD ]
Line_41 $$ BufferedReader br = new BufferedReader(new FileReader(new File(out, "part-00000")))-->Line_46 $$ line = br.readLine()[ FD ]
Line_11 $$ PrintWriter pw = new PrintWriter(new FileWriter(new File(in, "data.txt")))-->Line_12 $$ pw.println("A|a,1")[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_19 $$ job.set("mapreduce.framework.name", "local")[ CD ]
Line_11 $$ PrintWriter pw = new PrintWriter(new FileWriter(new File(in, "data.txt")))-->Line_17 $$ pw.close()[ FD ]
Line_42 $$ Set<String> output = new HashSet<String>()-->Line_55 $$ Assert.assertEquals(expected, output)[ FD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_44 $$ Assert.assertNotNull(line)[ CD ]
Line_18 $$ JobConf job = new JobConf()-->Line_29 $$ job.setCombinerClass(Combiner.class)[ FD ]
Line_18 $$ JobConf job = new JobConf()-->Line_31 $$ job.setInt("min.num.spills.for.combine", 0)[ FD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_31 $$ job.setInt("min.num.spills.for.combine", 0)[ CD ]
Line_2 $$ public void testCombiner() throws Exception -->Line_24 $$ job.setInputFormat(TextInputFormat.class)[ CD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_38 $$ long combinerOutputRecords = counters.getGroup("org.apache.hadoop.mapreduce.TaskCounter").getCounter("COMBINE_OUTPUT_RECORDS")[ CD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_49 $$ line = br.readLine()[ CD ]
Line_18 $$ JobConf job = new JobConf()-->Line_19 $$ job.set("mapreduce.framework.name", "local")[ FD ]
Line_35 $$ if (runningJob.isSuccessful()) -->Line_41 $$ BufferedReader br = new BufferedReader(new FileReader(new File(out, "part-00000")))[ CD ]
Line_33 $$ RunningJob runningJob = client.submitJob(job)-->Line_34 $$ runningJob.waitForCompletion()[ FD ]
Line_52 $$ Set<String> expected = new HashSet<String>()-->Line_54 $$ expected.add("B5")[ FD ]
Line_18 $$ JobConf job = new JobConf()-->Line_33 $$ RunningJob runningJob = client.submitJob(job)[ FD ]
