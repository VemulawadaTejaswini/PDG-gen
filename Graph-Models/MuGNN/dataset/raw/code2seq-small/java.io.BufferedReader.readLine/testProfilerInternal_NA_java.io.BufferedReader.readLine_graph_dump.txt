Line_12 $$ if (!useDefault) -->Line_13 $$ sleepConf.set(MRJobConfig.TASK_MAP_PROFILE_PARAMS, "-agentlib:hprof=cpu=times,heap=sites,force=n,thread=y,verbose=n," + "file=%s")[ CD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_22 $$ final ApplicationId appID = jobId.getAppId()[ CD ]
Line_58 $$ final TaskAttemptID tid = dirEntry.getKey()-->Line_62 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) [ FD ]
Line_46 $$ while ((line = br.readLine()) != null) -->Line_77 $$ while ((line = br.readLine()) != null) [ FD ]
Line_24 $$ while (true) -->Line_25 $$ Thread.sleep(1000)[ CD ]
Line_17 $$ final Job job = sleepJob.createJob(2, 2, 500, 1, 500, 1)-->Line_20 $$ job.waitForCompletion(true)[ FD ]
Line_3 $$ if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) -->Line_4 $$ LOG.info("MRAppJar " + MiniMRYarnCluster.APPJAR + " not found. Not running test.")[ CD ]
Line_59 $$ final Path profilePath = new Path(dirEntry.getValue(), TaskLog.LogName.PROFILE.toString())-->Line_72 $$ Assert.assertFalse("hprof file should not exist", localFs.exists(profilePath))[ FD ]
Line_24 $$ while (true) -->Line_26 $$ pollElapsed += 1000[ CD ]
Line_30 $$ if (pollElapsed >= 60000) -->Line_31 $$ LOG.warn("application did not reach terminal state within 60 seconds")[ CD ]
Line_62 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) -->Line_67 $$ Assert.assertEquals(0L, localFs.getFileStatus(stdoutPath).getLen())[ CD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_39 $$ final String containerGlob = "container_" + appIdSuffix + "_*_*"[ CD ]
Line_44 $$ final BufferedReader br = new BufferedReader(new InputStreamReader(localFs.open(fileStatus.getPath())))-->Line_83 $$ br.close()[ FD ]
Line_44 $$ final BufferedReader br = new BufferedReader(new InputStreamReader(localFs.open(fileStatus.getPath())))-->Line_64 $$ final String line = br.readLine()[ FD ]
Line_3 $$ if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) -->Line_5 $$ return[ CD ]
Line_23 $$ int pollElapsed = 0-->Line_26 $$ pollElapsed += 1000[ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_9 $$ sleepConf.setProfileEnabled(true)[ CD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_16 $$ sleepJob.setConf(sleepConf)[ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_37 $$ final String appIdStr = appID.toString()[ CD ]
Line_48 $$ if (m.matches()) -->Line_49 $$ taLogDirs.put(TaskAttemptID.forName(m.group(1)), fileStatus.getPath().getParent())[ CD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_14 $$ sleepConf.set(MRJobConfig.TASK_REDUCE_PROFILE_PARAMS, "-Xprof")[ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_21 $$ final JobId jobId = TypeConverter.toYarn(job.getJobID())[ CD ]
Line_40 $$ final Map<TaskAttemptID, Path> taLogDirs = new HashMap<TaskAttemptID, Path>()-->Line_56 $$ Assert.assertEquals(4, taLogDirs.size())[ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_61 $$ if (useDefault || tid.getTaskType() == TaskType.MAP) [ FD ]
Line_77 $$ while ((line = br.readLine()) != null) -->Line_78 $$ if (line.startsWith("Flat profile")) [ CD ]
Line_24 $$ while (true) -->Line_30 $$ if (pollElapsed >= 60000) [ CD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_19 $$ job.addFileToClassPath(APP_JAR)[ CD ]
Line_7 $$ final SleepJob sleepJob = new SleepJob()-->Line_17 $$ final Job job = sleepJob.createJob(2, 2, 500, 1, 500, 1)[ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_41 $$ final Pattern taskPattern = Pattern.compile(".*Task:(attempt_" + appIdSuffix + "_[rm]_" + "[0-9]+_[0-9]+).*")[ CD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_11 $$ sleepConf.setProfileTaskRange(false, String.valueOf(PROFILED_TASK_ID))[ FD ]
Line_47 $$ final Matcher m = taskPattern.matcher(line)-->Line_48 $$ if (m.matches()) [ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_10 $$ sleepConf.setProfileTaskRange(true, String.valueOf(PROFILED_TASK_ID))[ CD ]
Line_46 $$ while ((line = br.readLine()) != null) -->Line_65 $$ Assert.assertTrue("No hprof content found!", line != null && line.startsWith("JAVA PROFILE"))[ FD ]
Line_60 $$ final Path stdoutPath = new Path(dirEntry.getValue(), TaskLog.LogName.STDOUT.toString())-->Line_86 $$ Assert.assertEquals(0L, localFs.getFileStatus(stdoutPath).getLen())[ FD ]
Line_60 $$ final Path stdoutPath = new Path(dirEntry.getValue(), TaskLog.LogName.STDOUT.toString())-->Line_74 $$ final BufferedReader br = new BufferedReader(new InputStreamReader(localFs.open(stdoutPath)))[ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())[ CD ]
Line_45 $$ String line-->Line_46 $$ while ((line = br.readLine()) != null) [ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_38 $$ final String appIdSuffix = appIdStr.substring("application_".length(), appIdStr.length())[ CD ]
Line_75 $$ boolean flatProfFound = false-->Line_84 $$ Assert.assertTrue("Xprof flat profile not found!", flatProfFound)[ FD ]
Line_17 $$ final Job job = sleepJob.createJob(2, 2, 500, 1, 500, 1)-->Line_21 $$ final JobId jobId = TypeConverter.toYarn(job.getJobID())[ FD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_13 $$ sleepConf.set(MRJobConfig.TASK_MAP_PROFILE_PARAMS, "-agentlib:hprof=cpu=times,heap=sites,force=n,thread=y,verbose=n," + "file=%s")[ FD ]
Line_60 $$ final Path stdoutPath = new Path(dirEntry.getValue(), TaskLog.LogName.STDOUT.toString())-->Line_67 $$ Assert.assertEquals(0L, localFs.getFileStatus(stdoutPath).getLen())[ FD ]
Line_62 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) -->Line_69 $$ Assert.assertFalse("hprof file should not exist", localFs.exists(profilePath))[ CD ]
Line_44 $$ final BufferedReader br = new BufferedReader(new InputStreamReader(localFs.open(fileStatus.getPath())))-->Line_66 $$ br.close()[ FD ]
Line_58 $$ final TaskAttemptID tid = dirEntry.getKey()-->Line_61 $$ if (useDefault || tid.getTaskType() == TaskType.MAP) [ FD ]
Line_46 $$ while ((line = br.readLine()) != null) -->Line_47 $$ final Matcher m = taskPattern.matcher(line)[ FD ]
Line_73 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) -->Line_84 $$ Assert.assertTrue("Xprof flat profile not found!", flatProfFound)[ CD ]
Line_41 $$ final Pattern taskPattern = Pattern.compile(".*Task:(attempt_" + appIdSuffix + "_[rm]_" + "[0-9]+_[0-9]+).*")-->Line_47 $$ final Matcher m = taskPattern.matcher(line)[ FD ]
Line_75 $$ boolean flatProfFound = false-->Line_79 $$ flatProfFound = true[ FD ]
Line_26 $$ pollElapsed += 1000-->Line_30 $$ if (pollElapsed >= 60000) [ FD ]
Line_46 $$ while ((line = br.readLine()) != null) -->Line_47 $$ final Matcher m = taskPattern.matcher(line)[ CD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_9 $$ sleepConf.setProfileEnabled(true)[ FD ]
Line_61 $$ if (useDefault || tid.getTaskType() == TaskType.MAP) -->Line_62 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) [ CD ]
Line_17 $$ final Job job = sleepJob.createJob(2, 2, 500, 1, 500, 1)-->Line_18 $$ job.setJarByClass(SleepJob.class)[ FD ]
Line_43 $$ for (FileStatus fileStatus : localFs.globStatus(new Path(logDir + Path.SEPARATOR + appIdStr + Path.SEPARATOR + containerGlob + Path.SEPARATOR + TaskLog.LogName.SYSLOG))) -->Line_44 $$ final BufferedReader br = new BufferedReader(new InputStreamReader(localFs.open(fileStatus.getPath())))[ FD ]
Line_7 $$ final SleepJob sleepJob = new SleepJob()-->Line_16 $$ sleepJob.setConf(sleepConf)[ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_12 $$ if (!useDefault) [ FD ]
Line_22 $$ final ApplicationId appID = jobId.getAppId()-->Line_27 $$ if (TERMINAL_RM_APP_STATES.contains(mrCluster.getResourceManager().getRMContext().getRMApps().get(appID).getState())) [ FD ]
Line_62 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) -->Line_64 $$ final String line = br.readLine()[ CD ]
Line_59 $$ final Path profilePath = new Path(dirEntry.getValue(), TaskLog.LogName.PROFILE.toString())-->Line_63 $$ final BufferedReader br = new BufferedReader(new InputStreamReader(localFs.open(profilePath)))[ FD ]
Line_58 $$ final TaskAttemptID tid = dirEntry.getKey()-->Line_73 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) [ FD ]
Line_40 $$ final Map<TaskAttemptID, Path> taLogDirs = new HashMap<TaskAttemptID, Path>()-->Line_57 $$ for (Map.Entry<TaskAttemptID, Path> dirEntry : taLogDirs.entrySet()) [ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_11 $$ sleepConf.setProfileTaskRange(false, String.valueOf(PROFILED_TASK_ID))[ CD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_24 $$ while (true) [ CD ]
Line_57 $$ for (Map.Entry<TaskAttemptID, Path> dirEntry : taLogDirs.entrySet()) -->Line_60 $$ final Path stdoutPath = new Path(dirEntry.getValue(), TaskLog.LogName.STDOUT.toString())[ FD ]
Line_45 $$ String line-->Line_65 $$ Assert.assertTrue("No hprof content found!", line != null && line.startsWith("JAVA PROFILE"))[ FD ]
Line_45 $$ String line-->Line_78 $$ if (line.startsWith("Flat profile")) [ FD ]
Line_46 $$ while ((line = br.readLine()) != null) -->Line_78 $$ if (line.startsWith("Flat profile")) [ FD ]
Line_57 $$ for (Map.Entry<TaskAttemptID, Path> dirEntry : taLogDirs.entrySet()) -->Line_58 $$ final TaskAttemptID tid = dirEntry.getKey()[ FD ]
Line_23 $$ int pollElapsed = 0-->Line_30 $$ if (pollElapsed >= 60000) [ FD ]
Line_44 $$ final BufferedReader br = new BufferedReader(new InputStreamReader(localFs.open(fileStatus.getPath())))-->Line_77 $$ while ((line = br.readLine()) != null) [ FD ]
Line_59 $$ final Path profilePath = new Path(dirEntry.getValue(), TaskLog.LogName.PROFILE.toString())-->Line_69 $$ Assert.assertFalse("hprof file should not exist", localFs.exists(profilePath))[ FD ]
Line_43 $$ for (FileStatus fileStatus : localFs.globStatus(new Path(logDir + Path.SEPARATOR + appIdStr + Path.SEPARATOR + containerGlob + Path.SEPARATOR + TaskLog.LogName.SYSLOG))) -->Line_49 $$ taLogDirs.put(TaskAttemptID.forName(m.group(1)), fileStatus.getPath().getParent())[ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_20 $$ job.waitForCompletion(true)[ CD ]
Line_79 $$ flatProfFound = true-->Line_84 $$ Assert.assertTrue("Xprof flat profile not found!", flatProfFound)[ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_18 $$ job.setJarByClass(SleepJob.class)[ CD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_36 $$ final Configuration nmConf = mrCluster.getNodeManager(0).getConfig()[ CD ]
Line_73 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) -->Line_83 $$ br.close()[ CD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_40 $$ final Map<TaskAttemptID, Path> taLogDirs = new HashMap<TaskAttemptID, Path>()[ CD ]
Line_62 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) -->Line_66 $$ br.close()[ CD ]
Line_22 $$ final ApplicationId appID = jobId.getAppId()-->Line_37 $$ final String appIdStr = appID.toString()[ FD ]
Line_47 $$ final Matcher m = taskPattern.matcher(line)-->Line_49 $$ taLogDirs.put(TaskAttemptID.forName(m.group(1)), fileStatus.getPath().getParent())[ FD ]
Line_36 $$ final Configuration nmConf = mrCluster.getNodeManager(0).getConfig()-->Line_42 $$ for (String logDir : nmConf.getTrimmedStrings(YarnConfiguration.NM_LOG_DIRS)) [ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_3 $$ if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) [ CD ]
Line_61 $$ if (useDefault || tid.getTaskType() == TaskType.MAP) -->Line_73 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) [ CD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_10 $$ sleepConf.setProfileTaskRange(true, String.valueOf(PROFILED_TASK_ID))[ FD ]
Line_62 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) -->Line_65 $$ Assert.assertTrue("No hprof content found!", line != null && line.startsWith("JAVA PROFILE"))[ CD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_56 $$ Assert.assertEquals(4, taLogDirs.size())[ CD ]
Line_40 $$ final Map<TaskAttemptID, Path> taLogDirs = new HashMap<TaskAttemptID, Path>()-->Line_49 $$ taLogDirs.put(TaskAttemptID.forName(m.group(1)), fileStatus.getPath().getParent())[ FD ]
Line_61 $$ if (useDefault || tid.getTaskType() == TaskType.MAP) -->Line_72 $$ Assert.assertFalse("hprof file should not exist", localFs.exists(profilePath))[ CD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_23 $$ int pollElapsed = 0[ CD ]
Line_44 $$ final BufferedReader br = new BufferedReader(new InputStreamReader(localFs.open(fileStatus.getPath())))-->Line_46 $$ while ((line = br.readLine()) != null) [ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_35 $$ Assert.assertEquals(RMAppState.FINISHED, mrCluster.getResourceManager().getRMContext().getRMApps().get(appID).getState())[ CD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_12 $$ if (!useDefault) [ CD ]
Line_24 $$ while (true) -->Line_27 $$ if (TERMINAL_RM_APP_STATES.contains(mrCluster.getResourceManager().getRMContext().getRMApps().get(appID).getState())) [ CD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_7 $$ final SleepJob sleepJob = new SleepJob()[ CD ]
Line_73 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) -->Line_77 $$ while ((line = br.readLine()) != null) [ CD ]
Line_12 $$ if (!useDefault) -->Line_14 $$ sleepConf.set(MRJobConfig.TASK_REDUCE_PROFILE_PARAMS, "-Xprof")[ CD ]
Line_77 $$ while ((line = br.readLine()) != null) -->Line_78 $$ if (line.startsWith("Flat profile")) [ FD ]
Line_78 $$ if (line.startsWith("Flat profile")) -->Line_79 $$ flatProfFound = true[ CD ]
Line_22 $$ final ApplicationId appID = jobId.getAppId()-->Line_35 $$ Assert.assertEquals(RMAppState.FINISHED, mrCluster.getResourceManager().getRMContext().getRMApps().get(appID).getState())[ FD ]
Line_46 $$ while ((line = br.readLine()) != null) -->Line_48 $$ if (m.matches()) [ CD ]
Line_73 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) -->Line_86 $$ Assert.assertEquals(0L, localFs.getFileStatus(stdoutPath).getLen())[ CD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_17 $$ final Job job = sleepJob.createJob(2, 2, 500, 1, 500, 1)[ CD ]
Line_37 $$ final String appIdStr = appID.toString()-->Line_38 $$ final String appIdSuffix = appIdStr.substring("application_".length(), appIdStr.length())[ FD ]
Line_44 $$ final BufferedReader br = new BufferedReader(new InputStreamReader(localFs.open(fileStatus.getPath())))-->Line_53 $$ br.close()[ FD ]
Line_45 $$ String line-->Line_77 $$ while ((line = br.readLine()) != null) [ FD ]
Line_21 $$ final JobId jobId = TypeConverter.toYarn(job.getJobID())-->Line_22 $$ final ApplicationId appID = jobId.getAppId()[ FD ]
Line_57 $$ for (Map.Entry<TaskAttemptID, Path> dirEntry : taLogDirs.entrySet()) -->Line_59 $$ final Path profilePath = new Path(dirEntry.getValue(), TaskLog.LogName.PROFILE.toString())[ FD ]
Line_73 $$ if (tid.getTaskID().getId() == PROFILED_TASK_ID) -->Line_75 $$ boolean flatProfFound = false[ CD ]
Line_45 $$ String line-->Line_47 $$ final Matcher m = taskPattern.matcher(line)[ FD ]
Line_2 $$ private void testProfilerInternal(boolean useDefault) throws Exception -->Line_16 $$ sleepJob.setConf(sleepConf)[ CD ]
Line_17 $$ final Job job = sleepJob.createJob(2, 2, 500, 1, 500, 1)-->Line_19 $$ job.addFileToClassPath(APP_JAR)[ FD ]
