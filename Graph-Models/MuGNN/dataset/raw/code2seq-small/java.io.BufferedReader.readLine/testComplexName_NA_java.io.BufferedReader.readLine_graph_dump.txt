Line_4 $$ Writer wr = new OutputStreamWriter(os)-->Line_6 $$ wr.close()[ FD ]
Line_19 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_21 $$ assertNull(reader.readLine())[ FD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_7 $$ JobConf conf = createJobConf()[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_16 $$ Path[] outputFiles = FileUtil.stat2Paths(getFileSystem().listStatus(getOutputDir(), new Utils.OutputFileUtils.OutputFilesFilter()))[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_19 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_7 $$ JobConf conf = createJobConf()-->Line_12 $$ conf.setMapperClass(IdentityMapper.class)[ FD ]
Line_7 $$ JobConf conf = createJobConf()-->Line_15 $$ JobClient.runJob(conf)[ FD ]
Line_19 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_20 $$ assertEquals("0\tb a", reader.readLine())[ FD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_15 $$ JobClient.runJob(conf)[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_6 $$ wr.close()[ CD ]
Line_19 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_22 $$ reader.close()[ FD ]
Line_7 $$ JobConf conf = createJobConf()-->Line_14 $$ FileOutputFormat.setOutputPath(conf, getOutputDir())[ FD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_11 $$ conf.setOutputValueClass(Text.class)[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_13 $$ FileInputFormat.setInputPaths(conf, getInputDir())[ CD ]
Line_7 $$ JobConf conf = createJobConf()-->Line_9 $$ conf.setInputFormat(TextInputFormat.class)[ FD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_8 $$ conf.setJobName("[name][some other value that gets truncated internally that this test attempts to aggravate]")[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_20 $$ assertEquals("0\tb a", reader.readLine())[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_5 $$ wr.write("b a\n")[ CD ]
Line_7 $$ JobConf conf = createJobConf()-->Line_10 $$ conf.setOutputKeyClass(LongWritable.class)[ FD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_21 $$ assertNull(reader.readLine())[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_18 $$ InputStream is = getFileSystem().open(outputFiles[0])[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_10 $$ conf.setOutputKeyClass(LongWritable.class)[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_4 $$ Writer wr = new OutputStreamWriter(os)[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_3 $$ OutputStream os = getFileSystem().create(new Path(getInputDir(), "text.txt"))[ CD ]
Line_7 $$ JobConf conf = createJobConf()-->Line_13 $$ FileInputFormat.setInputPaths(conf, getInputDir())[ FD ]
Line_4 $$ Writer wr = new OutputStreamWriter(os)-->Line_5 $$ wr.write("b a\n")[ FD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_17 $$ assertEquals(1, outputFiles.length)[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_14 $$ FileOutputFormat.setOutputPath(conf, getOutputDir())[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_22 $$ reader.close()[ CD ]
Line_7 $$ JobConf conf = createJobConf()-->Line_11 $$ conf.setOutputValueClass(Text.class)[ FD ]
Line_7 $$ JobConf conf = createJobConf()-->Line_8 $$ conf.setJobName("[name][some other value that gets truncated internally that this test attempts to aggravate]")[ FD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_12 $$ conf.setMapperClass(IdentityMapper.class)[ CD ]
Line_2 $$ public void testComplexName() throws Exception -->Line_9 $$ conf.setInputFormat(TextInputFormat.class)[ CD ]
