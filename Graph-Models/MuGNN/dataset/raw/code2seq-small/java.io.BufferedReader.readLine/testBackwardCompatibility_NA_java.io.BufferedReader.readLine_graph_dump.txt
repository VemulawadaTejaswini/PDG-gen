Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_9 $$ assertEquals(Arrays.toString(parts), 7, parts.length)[ CD ]
Line_3 $$ try (BufferedReader reader = new BufferedReader(new InputStreamReader(RoutingBackwardCompatibilityTests.class.getResourceAsStream("/org/elasticsearch/cluster/routing/shard_routes.txt"), "UTF-8"))) -->Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ FD ]
Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_15 $$ final int pre20ExpectedShardId = Integer.parseInt(parts[5])[ CD ]
Line_13 $$ final String id = parts[3]-->Line_27 $$ final int shardId = operationRouting.indexShards(clusterState, index, type, id, routing).shardId().getId()[ FD ]
Line_18 $$ for (Version version : VersionUtils.allVersions()) -->Line_19 $$ if (version.onOrAfter(Version.V_2_0_0) == false) [ FD ]
Line_11 $$ final int numberOfShards = Integer.parseInt(parts[1])-->Line_23 $$ IndexMetaData indexMetaData = IndexMetaData.builder(index).settings(settings).numberOfShards(numberOfShards).numberOfReplicas(randomInt(3)).build()[ FD ]
Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_8 $$ String[] parts = line.split("\t")[ FD ]
Line_18 $$ for (Version version : VersionUtils.allVersions()) -->Line_22 $$ final Settings settings = settings(version).build()[ FD ]
Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_8 $$ String[] parts = line.split("\t")[ CD ]
Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_5 $$ if (line.startsWith("#")) [ FD ]
Line_8 $$ String[] parts = line.split("\t")-->Line_9 $$ assertEquals(Arrays.toString(parts), 7, parts.length)[ FD ]
Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_12 $$ final String type = parts[2][ CD ]
Line_14 $$ final String routing = "null".equals(parts[4]) ? null : parts[4]-->Line_27 $$ final int shardId = operationRouting.indexShards(clusterState, index, type, id, routing).shardId().getId()[ FD ]
Line_22 $$ final Settings settings = settings(version).build()-->Line_23 $$ IndexMetaData indexMetaData = IndexMetaData.builder(index).settings(settings).numberOfShards(numberOfShards).numberOfReplicas(randomInt(3)).build()[ FD ]
Line_27 $$ final int shardId = operationRouting.indexShards(clusterState, index, type, id, routing).shardId().getId()-->Line_28 $$ assertEquals(currentExpectedShard, shardId)[ FD ]
Line_10 $$ final String index = parts[0]-->Line_23 $$ IndexMetaData indexMetaData = IndexMetaData.builder(index).settings(settings).numberOfShards(numberOfShards).numberOfReplicas(randomInt(3)).build()[ FD ]
Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_17 $$ OperationRouting operationRouting = new OperationRouting(Settings.EMPTY, null)[ CD ]
Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_16 $$ final int currentExpectedShard = Integer.parseInt(parts[6])[ CD ]
Line_10 $$ final String index = parts[0]-->Line_27 $$ final int shardId = operationRouting.indexShards(clusterState, index, type, id, routing).shardId().getId()[ FD ]
Line_12 $$ final String type = parts[2]-->Line_27 $$ final int shardId = operationRouting.indexShards(clusterState, index, type, id, routing).shardId().getId()[ FD ]
Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_14 $$ final String routing = "null".equals(parts[4]) ? null : parts[4][ CD ]
Line_16 $$ final int currentExpectedShard = Integer.parseInt(parts[6])-->Line_28 $$ assertEquals(currentExpectedShard, shardId)[ FD ]
Line_23 $$ IndexMetaData indexMetaData = IndexMetaData.builder(index).settings(settings).numberOfShards(numberOfShards).numberOfReplicas(randomInt(3)).build()-->Line_25 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(indexMetaData).build()[ FD ]
Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_10 $$ final String index = parts[0][ CD ]
Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_13 $$ final String id = parts[3][ CD ]
Line_25 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(indexMetaData).build()-->Line_26 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()[ FD ]
Line_26 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_27 $$ final int shardId = operationRouting.indexShards(clusterState, index, type, id, routing).shardId().getId()[ FD ]
Line_24 $$ MetaData.Builder metaData = MetaData.builder().put(indexMetaData, false)-->Line_26 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()[ FD ]
Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_11 $$ final int numberOfShards = Integer.parseInt(parts[1])[ CD ]
Line_17 $$ OperationRouting operationRouting = new OperationRouting(Settings.EMPTY, null)-->Line_27 $$ final int shardId = operationRouting.indexShards(clusterState, index, type, id, routing).shardId().getId()[ FD ]
Line_4 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_5 $$ if (line.startsWith("#")) [ CD ]
Line_23 $$ IndexMetaData indexMetaData = IndexMetaData.builder(index).settings(settings).numberOfShards(numberOfShards).numberOfReplicas(randomInt(3)).build()-->Line_24 $$ MetaData.Builder metaData = MetaData.builder().put(indexMetaData, false)[ FD ]
