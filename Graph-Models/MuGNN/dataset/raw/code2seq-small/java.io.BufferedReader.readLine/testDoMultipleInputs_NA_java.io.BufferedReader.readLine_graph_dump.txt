Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_37 $$ assertTrue(output.readLine().equals("b 2"))[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_8 $$ fs.delete(outDir, true)[ CD ]
Line_12 $$ DataOutputStream file2 = fs.create(new Path(in2Dir, "part-0"))-->Line_13 $$ file2.writeBytes("a\tblah\nb\tblah\nc\tblah\nd\tblah\ne\tblah")[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_36 $$ assertTrue(output.readLine().equals("a 2"))[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_6 $$ Configuration conf = createJobConf()[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_24 $$ FileOutputFormat.setOutputPath(job, outDir)[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_14 $$ file2.close()[ CD ]
Line_35 $$ BufferedReader output = new BufferedReader(new InputStreamReader(fs.open(new Path(outDir, "part-r-00000"))))-->Line_37 $$ assertTrue(output.readLine().equals("b 2"))[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_25 $$ boolean success = false[ CD ]
Line_35 $$ BufferedReader output = new BufferedReader(new InputStreamReader(fs.open(new Path(outDir, "part-r-00000"))))-->Line_39 $$ assertTrue(output.readLine().equals("d 2"))[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_40 $$ assertTrue(output.readLine().equals("e 2"))[ CD ]
Line_15 $$ Job job = Job.getInstance(conf)-->Line_23 $$ job.setReducerClass(ReducerClass.class)[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_19 $$ job.setMapOutputKeyClass(Text.class)[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_38 $$ assertTrue(output.readLine().equals("c 2"))[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_23 $$ job.setReducerClass(ReducerClass.class)[ CD ]
Line_6 $$ Configuration conf = createJobConf()-->Line_7 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_4 $$ Path in2Dir = getDir(IN2_DIR)-->Line_18 $$ MultipleInputs.addInputPath(job, in2Dir, KeyValueTextInputFormat.class, KeyValueMapClass.class)[ FD ]
Line_15 $$ Job job = Job.getInstance(conf)-->Line_22 $$ job.setOutputValueClass(Text.class)[ FD ]
Line_15 $$ Job job = Job.getInstance(conf)-->Line_24 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_11 $$ file1.close()[ CD ]
Line_5 $$ Path outDir = getDir(OUT_DIR)-->Line_8 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_7 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_12 $$ DataOutputStream file2 = fs.create(new Path(in2Dir, "part-0"))-->Line_14 $$ file2.close()[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_3 $$ Path in1Dir = getDir(IN1_DIR)[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_10 $$ file1.writeBytes("a\nb\nc\nd\ne")[ CD ]
Line_15 $$ Job job = Job.getInstance(conf)-->Line_27 $$ success = job.waitForCompletion(true)[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_35 $$ BufferedReader output = new BufferedReader(new InputStreamReader(fs.open(new Path(outDir, "part-r-00000"))))[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_5 $$ Path outDir = getDir(OUT_DIR)[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_21 $$ job.setOutputKeyClass(NullWritable.class)[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_22 $$ job.setOutputValueClass(Text.class)[ CD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_35 $$ BufferedReader output = new BufferedReader(new InputStreamReader(fs.open(new Path(outDir, "part-r-00000"))))[ FD ]
Line_15 $$ Job job = Job.getInstance(conf)-->Line_18 $$ MultipleInputs.addInputPath(job, in2Dir, KeyValueTextInputFormat.class, KeyValueMapClass.class)[ FD ]
Line_27 $$ success = job.waitForCompletion(true)-->Line_33 $$ if (!success)[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_4 $$ Path in2Dir = getDir(IN2_DIR)[ CD ]
Line_15 $$ Job job = Job.getInstance(conf)-->Line_19 $$ job.setMapOutputKeyClass(Text.class)[ FD ]
Line_15 $$ Job job = Job.getInstance(conf)-->Line_16 $$ job.setJobName("mi")[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_8 $$ fs.delete(outDir, true)[ FD ]
Line_15 $$ Job job = Job.getInstance(conf)-->Line_20 $$ job.setMapOutputValueClass(Text.class)[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_13 $$ file2.writeBytes("a\tblah\nb\tblah\nc\tblah\nd\tblah\ne\tblah")[ CD ]
Line_3 $$ Path in1Dir = getDir(IN1_DIR)-->Line_17 $$ MultipleInputs.addInputPath(job, in1Dir, TextInputFormat.class, MapClass.class)[ FD ]
Line_6 $$ Configuration conf = createJobConf()-->Line_15 $$ Job job = Job.getInstance(conf)[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_18 $$ MultipleInputs.addInputPath(job, in2Dir, KeyValueTextInputFormat.class, KeyValueMapClass.class)[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_39 $$ assertTrue(output.readLine().equals("d 2"))[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_33 $$ if (!success)[ CD ]
Line_25 $$ boolean success = false-->Line_27 $$ success = job.waitForCompletion(true)[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_9 $$ DataOutputStream file1 = fs.create(new Path(in1Dir, "part-0"))[ FD ]
Line_9 $$ DataOutputStream file1 = fs.create(new Path(in1Dir, "part-0"))-->Line_10 $$ file1.writeBytes("a\nb\nc\nd\ne")[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_12 $$ DataOutputStream file2 = fs.create(new Path(in2Dir, "part-0"))[ FD ]
Line_35 $$ BufferedReader output = new BufferedReader(new InputStreamReader(fs.open(new Path(outDir, "part-r-00000"))))-->Line_38 $$ assertTrue(output.readLine().equals("c 2"))[ FD ]
Line_15 $$ Job job = Job.getInstance(conf)-->Line_17 $$ MultipleInputs.addInputPath(job, in1Dir, TextInputFormat.class, MapClass.class)[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_12 $$ DataOutputStream file2 = fs.create(new Path(in2Dir, "part-0"))[ CD ]
Line_25 $$ boolean success = false-->Line_33 $$ if (!success)[ FD ]
Line_5 $$ Path outDir = getDir(OUT_DIR)-->Line_24 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
Line_9 $$ DataOutputStream file1 = fs.create(new Path(in1Dir, "part-0"))-->Line_11 $$ file1.close()[ FD ]
Line_15 $$ Job job = Job.getInstance(conf)-->Line_21 $$ job.setOutputKeyClass(NullWritable.class)[ FD ]
Line_35 $$ BufferedReader output = new BufferedReader(new InputStreamReader(fs.open(new Path(outDir, "part-r-00000"))))-->Line_40 $$ assertTrue(output.readLine().equals("e 2"))[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_9 $$ DataOutputStream file1 = fs.create(new Path(in1Dir, "part-0"))[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_16 $$ job.setJobName("mi")[ CD ]
Line_35 $$ BufferedReader output = new BufferedReader(new InputStreamReader(fs.open(new Path(outDir, "part-r-00000"))))-->Line_36 $$ assertTrue(output.readLine().equals("a 2"))[ FD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_20 $$ job.setMapOutputValueClass(Text.class)[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_15 $$ Job job = Job.getInstance(conf)[ CD ]
Line_2 $$ public void testDoMultipleInputs() throws IOException -->Line_17 $$ MultipleInputs.addInputPath(job, in1Dir, TextInputFormat.class, MapClass.class)[ CD ]
