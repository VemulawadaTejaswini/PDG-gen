Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_13 $$ pp = Runtime.getRuntime().exec(Shell.WINDOWS ? Shell.WINUTILS + " groups -F" : "id -Gn")[ CD ]
Line_3 $$ Process pp = Runtime.getRuntime().exec("whoami")-->Line_13 $$ pp = Runtime.getRuntime().exec(Shell.WINDOWS ? Shell.WINUTILS + " groups -F" : "id -Gn")[ FD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_30 $$ for (int i = 0; i < gi.length; i++) [ CD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_4 $$ BufferedReader br = new BufferedReader(new InputStreamReader(pp.getInputStream()))[ CD ]
Line_9 $$ userName = userName.substring(sp + 1)-->Line_27 $$ assertEquals(userName, loginUserName)[ FD ]
Line_17 $$ Set<String> groups = new LinkedHashSet<String>()-->Line_29 $$ assertEquals(groups.size(), gi.length)[ FD ]
Line_34 $$ fakeUser.doAs(new PrivilegedExceptionAction<Object>() -->Line_39 $$ assertEquals(0, current.getGroupNames().length)[ CD ]
Line_14 $$ br = new BufferedReader(new InputStreamReader(pp.getInputStream()))-->Line_15 $$ String line = br.readLine()[ FD ]
Line_8 $$ if (sp != -1) -->Line_9 $$ userName = userName.substring(sp + 1)[ CD ]
Line_6 $$ if (Shell.WINDOWS) -->Line_7 $$ int sp = userName.lastIndexOf('\\')[ CD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_23 $$ String loginUserName = login.getShortUserName()[ CD ]
Line_22 $$ final UserGroupInformation login = UserGroupInformation.getCurrentUser()-->Line_28 $$ String[] gi = login.getGroupNames()[ FD ]
Line_23 $$ String loginUserName = login.getShortUserName()-->Line_25 $$ loginUserName = loginUserName.toLowerCase()[ FD ]
Line_3 $$ Process pp = Runtime.getRuntime().exec("whoami")-->Line_14 $$ br = new BufferedReader(new InputStreamReader(pp.getInputStream()))[ FD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_18 $$ String[] tokens = line.split(Shell.TOKEN_SEPARATOR_REGEX)[ CD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_24 $$ if (Shell.WINDOWS) [ CD ]
Line_6 $$ if (Shell.WINDOWS) -->Line_11 $$ userName = userName.toLowerCase()[ CD ]
Line_5 $$ String userName = br.readLine().trim()-->Line_27 $$ assertEquals(userName, loginUserName)[ FD ]
Line_17 $$ Set<String> groups = new LinkedHashSet<String>()-->Line_31 $$ assertTrue(groups.contains(gi[i]))[ FD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_33 $$ final UserGroupInformation fakeUser = UserGroupInformation.createRemoteUser("foo.bar")[ CD ]
Line_24 $$ if (Shell.WINDOWS) -->Line_25 $$ loginUserName = loginUserName.toLowerCase()[ CD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_6 $$ if (Shell.WINDOWS) [ CD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_29 $$ assertEquals(groups.size(), gi.length)[ CD ]
Line_11 $$ userName = userName.toLowerCase()-->Line_27 $$ assertEquals(userName, loginUserName)[ FD ]
Line_34 $$ fakeUser.doAs(new PrivilegedExceptionAction<Object>() -->Line_36 $$ UserGroupInformation current = UserGroupInformation.getCurrentUser()[ CD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_3 $$ Process pp = Runtime.getRuntime().exec("whoami")[ CD ]
Line_4 $$ BufferedReader br = new BufferedReader(new InputStreamReader(pp.getInputStream()))-->Line_15 $$ String line = br.readLine()[ FD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_16 $$ System.out.println(userName + ":" + line)[ CD ]
Line_15 $$ String line = br.readLine()-->Line_18 $$ String[] tokens = line.split(Shell.TOKEN_SEPARATOR_REGEX)[ FD ]
Line_5 $$ String userName = br.readLine().trim()-->Line_7 $$ int sp = userName.lastIndexOf('\\')[ FD ]
Line_19 $$ for (String s : tokens) -->Line_20 $$ groups.add(s)[ FD ]
Line_22 $$ final UserGroupInformation login = UserGroupInformation.getCurrentUser()-->Line_23 $$ String loginUserName = login.getShortUserName()[ FD ]
Line_4 $$ BufferedReader br = new BufferedReader(new InputStreamReader(pp.getInputStream()))-->Line_5 $$ String userName = br.readLine().trim()[ FD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_22 $$ final UserGroupInformation login = UserGroupInformation.getCurrentUser()[ CD ]
Line_30 $$ for (int i = 0; i < gi.length; i++) -->Line_31 $$ assertTrue(groups.contains(gi[i]))[ CD ]
Line_5 $$ String userName = br.readLine().trim()-->Line_9 $$ userName = userName.substring(sp + 1)[ FD ]
Line_36 $$ UserGroupInformation current = UserGroupInformation.getCurrentUser()-->Line_37 $$ assertFalse(current.equals(login))[ FD ]
Line_4 $$ BufferedReader br = new BufferedReader(new InputStreamReader(pp.getInputStream()))-->Line_14 $$ br = new BufferedReader(new InputStreamReader(pp.getInputStream()))[ FD ]
Line_6 $$ if (Shell.WINDOWS) -->Line_8 $$ if (sp != -1) [ CD ]
Line_9 $$ userName = userName.substring(sp + 1)-->Line_11 $$ userName = userName.toLowerCase()[ FD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_17 $$ Set<String> groups = new LinkedHashSet<String>()[ CD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_27 $$ assertEquals(userName, loginUserName)[ CD ]
Line_25 $$ loginUserName = loginUserName.toLowerCase()-->Line_27 $$ assertEquals(userName, loginUserName)[ FD ]
Line_22 $$ final UserGroupInformation login = UserGroupInformation.getCurrentUser()-->Line_37 $$ assertFalse(current.equals(login))[ FD ]
Line_13 $$ pp = Runtime.getRuntime().exec(Shell.WINDOWS ? Shell.WINUTILS + " groups -F" : "id -Gn")-->Line_14 $$ br = new BufferedReader(new InputStreamReader(pp.getInputStream()))[ FD ]
Line_7 $$ int sp = userName.lastIndexOf('\\')-->Line_8 $$ if (sp != -1) [ FD ]
Line_36 $$ UserGroupInformation current = UserGroupInformation.getCurrentUser()-->Line_38 $$ assertEquals(current, fakeUser)[ FD ]
Line_17 $$ Set<String> groups = new LinkedHashSet<String>()-->Line_20 $$ groups.add(s)[ FD ]
Line_23 $$ String loginUserName = login.getShortUserName()-->Line_27 $$ assertEquals(userName, loginUserName)[ FD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_34 $$ fakeUser.doAs(new PrivilegedExceptionAction<Object>() [ CD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_14 $$ br = new BufferedReader(new InputStreamReader(pp.getInputStream()))[ CD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_15 $$ String line = br.readLine()[ CD ]
Line_34 $$ fakeUser.doAs(new PrivilegedExceptionAction<Object>() -->Line_37 $$ assertFalse(current.equals(login))[ CD ]
Line_33 $$ final UserGroupInformation fakeUser = UserGroupInformation.createRemoteUser("foo.bar")-->Line_34 $$ fakeUser.doAs(new PrivilegedExceptionAction<Object>() [ FD ]
Line_34 $$ fakeUser.doAs(new PrivilegedExceptionAction<Object>() -->Line_38 $$ assertEquals(current, fakeUser)[ CD ]
Line_5 $$ String userName = br.readLine().trim()-->Line_11 $$ userName = userName.toLowerCase()[ FD ]
Line_3 $$ Process pp = Runtime.getRuntime().exec("whoami")-->Line_4 $$ BufferedReader br = new BufferedReader(new InputStreamReader(pp.getInputStream()))[ FD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_28 $$ String[] gi = login.getGroupNames()[ CD ]
Line_33 $$ final UserGroupInformation fakeUser = UserGroupInformation.createRemoteUser("foo.bar")-->Line_38 $$ assertEquals(current, fakeUser)[ FD ]
Line_2 $$ public void testGetServerSideGroups() throws IOException, InterruptedException -->Line_5 $$ String userName = br.readLine().trim()[ CD ]
Line_36 $$ UserGroupInformation current = UserGroupInformation.getCurrentUser()-->Line_39 $$ assertEquals(0, current.getGroupNames().length)[ FD ]
Line_34 $$ fakeUser.doAs(new PrivilegedExceptionAction<Object>() -->Line_40 $$ return null[ CD ]
