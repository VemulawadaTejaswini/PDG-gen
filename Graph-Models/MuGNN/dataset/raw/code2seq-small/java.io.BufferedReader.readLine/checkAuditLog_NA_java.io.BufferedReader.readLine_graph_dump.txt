Line_3 $$ Pattern successPattern = Pattern.compile(regex)-->Line_9 $$ if (successPattern.matcher(line).find()) [ FD ]
Line_6 $$ String line-->Line_8 $$ while (null != (line = reader.readLine())) [ FD ]
Line_2 $$ private void checkAuditLog(BufferedReader reader, String regex) throws Exception -->Line_3 $$ Pattern successPattern = Pattern.compile(regex)[ FD ]
Line_8 $$ while (null != (line = reader.readLine())) -->Line_9 $$ if (successPattern.matcher(line).find()) [ CD ]
Line_7 $$ while (true) -->Line_8 $$ while (null != (line = reader.readLine())) [ CD ]
Line_8 $$ while (null != (line = reader.readLine())) -->Line_9 $$ if (successPattern.matcher(line).find()) [ FD ]
Line_6 $$ String line-->Line_9 $$ if (successPattern.matcher(line).find()) [ FD ]
Line_7 $$ while (true) -->Line_13 $$ if (System.currentTimeMillis() > startTime + INTERVAL) [ CD ]
Line_2 $$ private void checkAuditLog(BufferedReader reader, String regex) throws Exception -->Line_6 $$ String line[ CD ]
Line_2 $$ private void checkAuditLog(BufferedReader reader, String regex) throws Exception -->Line_3 $$ Pattern successPattern = Pattern.compile(regex)[ CD ]
Line_2 $$ private void checkAuditLog(BufferedReader reader, String regex) throws Exception -->Line_4 $$ final long INTERVAL = 5000[ CD ]
Line_2 $$ private void checkAuditLog(BufferedReader reader, String regex) throws Exception -->Line_8 $$ while (null != (line = reader.readLine())) [ FD ]
Line_2 $$ private void checkAuditLog(BufferedReader reader, String regex) throws Exception -->Line_5 $$ long startTime = System.currentTimeMillis()[ CD ]
