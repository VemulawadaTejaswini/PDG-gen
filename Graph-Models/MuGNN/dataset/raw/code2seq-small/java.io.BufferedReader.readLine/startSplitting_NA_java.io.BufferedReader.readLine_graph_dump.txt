Line_2 $$ public int startSplitting(String[] args, String configName, String commandLinePath) throws Exception -->Line_5 $$ final BufferedReader bufferedReader = new BufferedReader(new FileReader(commandLinePath))[ CD ]
Line_9 $$ while ((line = bufferedReader.readLine()) != null) -->Line_10 $$ myVMParameters.add(line)[ FD ]
Line_5 $$ final BufferedReader bufferedReader = new BufferedReader(new FileReader(commandLinePath))-->Line_9 $$ while ((line = bufferedReader.readLine()) != null) [ FD ]
Line_8 $$ String line-->Line_10 $$ myVMParameters.add(line)[ FD ]
Line_5 $$ final BufferedReader bufferedReader = new BufferedReader(new FileReader(commandLinePath))-->Line_13 $$ bufferedReader.close()[ FD ]
Line_2 $$ public int startSplitting(String[] args, String configName, String commandLinePath) throws Exception -->Line_16 $$ int result = startSplitting(args, configName)[ CD ]
Line_2 $$ public int startSplitting(String[] args, String configName, String commandLinePath) throws Exception -->Line_19 $$ return result[ CD ]
Line_2 $$ public int startSplitting(String[] args, String configName, String commandLinePath) throws Exception -->Line_6 $$ myDynamicClasspath = bufferedReader.readLine()[ CD ]
Line_3 $$ args = myForkedDebuggerHelper.excludeDebugPortFromArgs(args)-->Line_16 $$ int result = startSplitting(args, configName)[ FD ]
Line_2 $$ public int startSplitting(String[] args, String configName, String commandLinePath) throws Exception -->Line_3 $$ args = myForkedDebuggerHelper.excludeDebugPortFromArgs(args)[ FD ]
Line_2 $$ public int startSplitting(String[] args, String configName, String commandLinePath) throws Exception -->Line_18 $$ sendTime(time)[ CD ]
Line_8 $$ String line-->Line_9 $$ while ((line = bufferedReader.readLine()) != null) [ FD ]
Line_9 $$ while ((line = bufferedReader.readLine()) != null) -->Line_10 $$ myVMParameters.add(line)[ CD ]
Line_2 $$ public int startSplitting(String[] args, String configName, String commandLinePath) throws Exception -->Line_15 $$ long time = System.currentTimeMillis()[ CD ]
Line_15 $$ long time = System.currentTimeMillis()-->Line_18 $$ sendTime(time)[ FD ]
Line_2 $$ public int startSplitting(String[] args, String configName, String commandLinePath) throws Exception -->Line_17 $$ myForkedDebuggerHelper.closeDebugSocket()[ CD ]
Line_5 $$ final BufferedReader bufferedReader = new BufferedReader(new FileReader(commandLinePath))-->Line_6 $$ myDynamicClasspath = bufferedReader.readLine()[ FD ]
Line_2 $$ public int startSplitting(String[] args, String configName, String commandLinePath) throws Exception -->Line_16 $$ int result = startSplitting(args, configName)[ FD ]
Line_2 $$ public int startSplitting(String[] args, String configName, String commandLinePath) throws Exception -->Line_3 $$ args = myForkedDebuggerHelper.excludeDebugPortFromArgs(args)[ CD ]
