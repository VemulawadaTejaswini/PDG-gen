Line_12 $$ while ((line = br.readLine()) != null) -->Line_14 $$ String currLen = st.nextToken()[ CD ]
Line_12 $$ while ((line = br.readLine()) != null) -->Line_13 $$ StringTokenizer st = new StringTokenizer(line)[ CD ]
Line_2 $$ private double readAndFindMedian(String path, int medianIndex1, int medianIndex2, Configuration conf) throws IOException -->Line_3 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_13 $$ StringTokenizer st = new StringTokenizer(line)-->Line_23 $$ String nextCurrLen = st.nextToken()[ FD ]
Line_12 $$ while ((line = br.readLine()) != null) -->Line_18 $$ if (medianIndex2 >= prevNum && medianIndex1 <= num) [ CD ]
Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_20 $$ br.close()[ FD ]
Line_14 $$ String currLen = st.nextToken()-->Line_24 $$ double theMedian = (Integer.parseInt(currLen) + Integer.parseInt(nextCurrLen)) / 2.0[ FD ]
Line_2 $$ private double readAndFindMedian(String path, int medianIndex1, int medianIndex2, Configuration conf) throws IOException -->Line_4 $$ Path file = new Path(path, "part-r-00000")[ CD ]
Line_2 $$ private double readAndFindMedian(String path, int medianIndex1, int medianIndex2, Configuration conf) throws IOException -->Line_3 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_22 $$ if (medianIndex2 >= prevNum && medianIndex1 < num) -->Line_26 $$ br.close()[ CD ]
Line_18 $$ if (medianIndex2 >= prevNum && medianIndex1 <= num) -->Line_20 $$ br.close()[ CD ]
Line_7 $$ BufferedReader br = null-->Line_31 $$ if (br != null) [ FD ]
Line_14 $$ String currLen = st.nextToken()-->Line_21 $$ return Double.parseDouble(currLen)[ FD ]
Line_11 $$ String line-->Line_12 $$ while ((line = br.readLine()) != null) [ FD ]
Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_32 $$ br.close()[ FD ]
Line_31 $$ if (br != null) -->Line_32 $$ br.close()[ CD ]
Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_12 $$ while ((line = br.readLine()) != null) [ FD ]
Line_10 $$ int num = 0-->Line_17 $$ num += Integer.parseInt(lengthFreq)[ FD ]
Line_13 $$ StringTokenizer st = new StringTokenizer(line)-->Line_14 $$ String currLen = st.nextToken()[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_5 $$ if (!fs.exists(file))[ FD ]
Line_7 $$ BufferedReader br = null-->Line_26 $$ br.close()[ FD ]
Line_4 $$ Path file = new Path(path, "part-r-00000")-->Line_5 $$ if (!fs.exists(file))[ FD ]
Line_18 $$ if (medianIndex2 >= prevNum && medianIndex1 <= num) -->Line_22 $$ if (medianIndex2 >= prevNum && medianIndex1 < num) [ CD ]
Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_31 $$ if (br != null) [ FD ]
Line_2 $$ private double readAndFindMedian(String path, int medianIndex1, int medianIndex2, Configuration conf) throws IOException -->Line_5 $$ if (!fs.exists(file))[ CD ]
Line_12 $$ while ((line = br.readLine()) != null) -->Line_15 $$ String lengthFreq = st.nextToken()[ CD ]
Line_7 $$ BufferedReader br = null-->Line_20 $$ br.close()[ FD ]
Line_18 $$ if (medianIndex2 >= prevNum && medianIndex1 <= num) -->Line_19 $$ System.out.println("The median is: " + currLen)[ CD ]
Line_13 $$ StringTokenizer st = new StringTokenizer(line)-->Line_15 $$ String lengthFreq = st.nextToken()[ FD ]
Line_7 $$ BufferedReader br = null-->Line_12 $$ while ((line = br.readLine()) != null) [ FD ]
Line_22 $$ if (medianIndex2 >= prevNum && medianIndex1 < num) -->Line_27 $$ return theMedian[ CD ]
Line_18 $$ if (medianIndex2 >= prevNum && medianIndex1 <= num) -->Line_21 $$ return Double.parseDouble(currLen)[ CD ]
Line_7 $$ BufferedReader br = null-->Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))[ FD ]
Line_12 $$ while ((line = br.readLine()) != null) -->Line_16 $$ int prevNum = num[ CD ]
Line_23 $$ String nextCurrLen = st.nextToken()-->Line_24 $$ double theMedian = (Integer.parseInt(currLen) + Integer.parseInt(nextCurrLen)) / 2.0[ FD ]
Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_26 $$ br.close()[ FD ]
Line_15 $$ String lengthFreq = st.nextToken()-->Line_17 $$ num += Integer.parseInt(lengthFreq)[ FD ]
Line_4 $$ Path file = new Path(path, "part-r-00000")-->Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))[ FD ]
Line_12 $$ while ((line = br.readLine()) != null) -->Line_17 $$ num += Integer.parseInt(lengthFreq)[ CD ]
Line_22 $$ if (medianIndex2 >= prevNum && medianIndex1 < num) -->Line_25 $$ System.out.println("The median is: " + theMedian)[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_9 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))[ FD ]
Line_2 $$ private double readAndFindMedian(String path, int medianIndex1, int medianIndex2, Configuration conf) throws IOException -->Line_7 $$ BufferedReader br = null[ CD ]
Line_22 $$ if (medianIndex2 >= prevNum && medianIndex1 < num) -->Line_24 $$ double theMedian = (Integer.parseInt(currLen) + Integer.parseInt(nextCurrLen)) / 2.0[ CD ]
Line_22 $$ if (medianIndex2 >= prevNum && medianIndex1 < num) -->Line_23 $$ String nextCurrLen = st.nextToken()[ CD ]
Line_2 $$ private double readAndFindMedian(String path, int medianIndex1, int medianIndex2, Configuration conf) throws IOException -->Line_35 $$ return -1[ CD ]
Line_7 $$ BufferedReader br = null-->Line_32 $$ br.close()[ FD ]
