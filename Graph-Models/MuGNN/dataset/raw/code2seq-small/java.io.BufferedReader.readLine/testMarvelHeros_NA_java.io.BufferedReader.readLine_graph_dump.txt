Line_2 $$ public void testMarvelHeros() throws IOException -->Line_72 $$ assertThat(corrections[2].join(space).utf8ToString(), equalTo("xorn the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_51 $$ assertThat(corrections.length, equalTo(4))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_42 $$ result = suggester.getCorrections(wrapper, new BytesRef("american ame"), generator, 1, 1, ir, "body", wordScorer, 0, 1)[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_99 $$ assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo("<em>captain america</em>"))[ CD ]
Line_24 $$ while ((line = reader.readLine()) != null) -->Line_26 $$ doc.add(new Field("body", line, TextField.TYPE_NOT_STORED))[ CD ]
Line_24 $$ while ((line = reader.readLine()) != null) -->Line_27 $$ doc.add(new Field("body_ngram", line, TextField.TYPE_NOT_STORED))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_30 $$ DirectoryReader ir = DirectoryReader.open(writer, false)[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_54 $$ assertThat(corrections[2].join(space).utf8ToString(), equalTo("xorn the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_40 $$ assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo("american <em>ace</em>"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_38 $$ assertThat(corrections.length, equalTo(1))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_57 $$ assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo("xor the <em>god</em> jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_46 $$ assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo("american ame"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_69 $$ assertThat(corrections.length, equalTo(4))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_73 $$ assertThat(corrections[3].join(space).utf8ToString(), equalTo("xor teh god jewel"))[ CD ]
Line_4 $$ Map<String, Analyzer> mapping = new HashMap()-->Line_5 $$ mapping.put("body_ngram", new Analyzer() [ FD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_74 $$ assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo("<em>xorr the god</em> jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_77 $$ assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo("xor teh <em>god</em> jewel"))[ CD ]
Line_13 $$ mapping.put("body", new Analyzer() -->Line_15 $$ Tokenizer t = new StandardTokenizer()[ CD ]
Line_81 $$ TokenFilter filter = new LowerCaseFilter(t)-->Line_85 $$ filter = new SynonymFilter(filter, parser.build(), true)[ FD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_94 $$ spellchecker.setMinQueryLength(1)[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_45 $$ assertThat(corrections[0].join(space).utf8ToString(), equalTo("american ame"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_58 $$ assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo("<em>xorn</em> the <em>god</em> jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_44 $$ assertThat(corrections.length, equalTo(1))[ CD ]
Line_5 $$ mapping.put("body_ngram", new Analyzer() -->Line_9 $$ tf.setOutputUnigrams(false)[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_5 $$ mapping.put("body_ngram", new Analyzer() [ CD ]
Line_5 $$ mapping.put("body_ngram", new Analyzer() -->Line_10 $$ return new TokenStreamComponents(t, new LowerCaseFilter(tf))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_13 $$ mapping.put("body", new Analyzer() [ CD ]
Line_25 $$ Document doc = new Document()-->Line_27 $$ doc.add(new Field("body_ngram", line, TextField.TYPE_NOT_STORED))[ FD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_34 $$ spellchecker.setMinQueryLength(1)[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_93 $$ spellchecker.setMinPrefix(1)[ CD ]
Line_4 $$ Map<String, Analyzer> mapping = new HashMap()-->Line_13 $$ mapping.put("body", new Analyzer() [ FD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_59 $$ assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo("<em>xorr</em> the got jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_24 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_41 $$ assertThat(result.cutoffScore, greaterThan(0d))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_55 $$ assertThat(corrections[3].join(space).utf8ToString(), equalTo("xorr the got jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_56 $$ assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo("<em>xorr</em> the <em>god</em> jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_71 $$ assertThat(corrections[1].join(space).utf8ToString(), equalTo("xor the god jewel"))[ CD ]
Line_83 $$ SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer())-->Line_85 $$ filter = new SynonymFilter(filter, parser.build(), true)[ FD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_63 $$ assertThat(corrections[1].join(space).utf8ToString(), equalTo("xor the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_62 $$ assertThat(corrections[0].join(space).utf8ToString(), equalTo("xorr the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_103 $$ assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo("<em>captain america</em>"))[ CD ]
Line_83 $$ SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer())-->Line_84 $$ parser.parse(new StringReader("usa => usa, america, american\nursa => usa, america, american"))[ FD ]
Line_8 $$ ShingleFilter tf = new ShingleFilter(t, 2, 3)-->Line_9 $$ tf.setOutputUnigrams(false)[ FD ]
Line_13 $$ mapping.put("body", new Analyzer() -->Line_16 $$ return new TokenStreamComponents(t, new LowerCaseFilter(t))[ CD ]
Line_25 $$ Document doc = new Document()-->Line_26 $$ doc.add(new Field("body", line, TextField.TYPE_NOT_STORED))[ FD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_102 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("captain america"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_75 $$ assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo("xor <em>the god</em> jewel"))[ CD ]
Line_78 $$ Analyzer analyzer = new Analyzer() -->Line_80 $$ Tokenizer t = new StandardTokenizer()[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_61 $$ assertThat(corrections.length, equalTo(4))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_107 $$ assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo("captain <em>america</em>"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_64 $$ assertThat(corrections[2].join(space).utf8ToString(), equalTo("xorn the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_52 $$ assertThat(corrections[0].join(space).utf8ToString(), equalTo("xorr the god jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_70 $$ assertThat(corrections[0].join(space).utf8ToString(), equalTo("xorr the god jewel"))[ CD ]
Line_78 $$ Analyzer analyzer = new Analyzer() -->Line_81 $$ TokenFilter filter = new LowerCaseFilter(t)[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_92 $$ spellchecker.setAccuracy(0.0f)[ CD ]
Line_25 $$ Document doc = new Document()-->Line_28 $$ writer.addDocument(doc)[ FD ]
Line_24 $$ while ((line = reader.readLine()) != null) -->Line_28 $$ writer.addDocument(doc)[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_47 $$ assertThat(result.cutoffScore, equalTo(Double.MIN_VALUE))[ CD ]
Line_5 $$ mapping.put("body_ngram", new Analyzer() -->Line_8 $$ ShingleFilter tf = new ShingleFilter(t, 2, 3)[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_65 $$ assertThat(corrections[3].join(space).utf8ToString(), equalTo("xorr the got jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_53 $$ assertThat(corrections[1].join(space).utf8ToString(), equalTo("xor the god jewel"))[ CD ]
Line_24 $$ while ((line = reader.readLine()) != null) -->Line_25 $$ Document doc = new Document()[ CD ]
Line_78 $$ Analyzer analyzer = new Analyzer() -->Line_89 $$ return new TokenStreamComponents(t, filter)[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_98 $$ assertThat(corrections[0].join(space).utf8ToString(), equalTo("captain america"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_3 $$ RAMDirectory dir = new RAMDirectory()[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_76 $$ assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo("<em>xorn the god</em> jewel"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_106 $$ assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("captain america"))[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_4 $$ Map<String, Analyzer> mapping = new HashMap()[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_36 $$ Result result = suggester.getCorrections(wrapper, new BytesRef("american ame"), generator, 1, 1, ir, "body", wordScorer, 1, 2)[ CD ]
Line_5 $$ mapping.put("body_ngram", new Analyzer() -->Line_7 $$ Tokenizer t = new StandardTokenizer()[ CD ]
Line_2 $$ public void testMarvelHeros() throws IOException -->Line_39 $$ assertThat(corrections[0].join(space).utf8ToString(), equalTo("american ace"))[ CD ]
