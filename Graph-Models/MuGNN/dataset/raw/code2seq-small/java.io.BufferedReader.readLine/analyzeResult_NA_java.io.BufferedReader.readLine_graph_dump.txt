Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_6 $$ long time = 0[ CD ]
Line_14 $$ String line-->Line_15 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_40 $$ res = new PrintStream(new FileOutputStream(new File(resFileName), true))-->Line_46 $$ if (res != null)[ FD ]
Line_38 $$ PrintStream res = null-->Line_46 $$ if (res != null)[ FD ]
Line_32 $$ if (lines != null)-->Line_33 $$ lines.close()[ CD ]
Line_15 $$ while ((line = lines.readLine()) != null) -->Line_18 $$ if (attr.endsWith(":tasks"))[ CD ]
Line_17 $$ String attr = tokens.nextToken()-->Line_26 $$ if (attr.endsWith(":sqrate"))[ FD ]
Line_24 $$ if (attr.endsWith(":rate"))-->Line_25 $$ rate = Float.parseFloat(tokens.nextToken())[ CD ]
Line_26 $$ if (attr.endsWith(":sqrate"))-->Line_27 $$ sqrate = Float.parseFloat(tokens.nextToken())[ CD ]
Line_10 $$ BufferedReader lines = null-->Line_33 $$ lines.close()[ FD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_38 $$ PrintStream res = null[ CD ]
Line_41 $$ for (int i = 0; i < resultLines.length; i++) -->Line_43 $$ res.println(resultLines[i])[ CD ]
Line_13 $$ lines = new BufferedReader(new InputStreamReader(in))-->Line_15 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_17 $$ String attr = tokens.nextToken()-->Line_22 $$ if (attr.endsWith(":time"))[ FD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_37 $$ String[] resultLines = [ CD ]
Line_12 $$ in = new DataInputStream(fs.open(reduceFile))-->Line_31 $$ in.close()[ FD ]
Line_9 $$ DataInputStream in = null-->Line_31 $$ in.close()[ FD ]
Line_20 $$ if (attr.endsWith(":size"))-->Line_22 $$ if (attr.endsWith(":time"))[ CD ]
Line_38 $$ PrintStream res = null-->Line_47 $$ res.close()[ FD ]
Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")-->Line_17 $$ String attr = tokens.nextToken()[ FD ]
Line_8 $$ float sqrate = 0-->Line_27 $$ sqrate = Float.parseFloat(tokens.nextToken())[ FD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_8 $$ float sqrate = 0[ CD ]
Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")-->Line_23 $$ time = Long.parseLong(tokens.nextToken())[ FD ]
Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")-->Line_19 $$ tasks = Long.parseLong(tokens.nextToken())[ FD ]
Line_41 $$ for (int i = 0; i < resultLines.length; i++) -->Line_42 $$ LOG.info(resultLines[i])[ CD ]
Line_10 $$ BufferedReader lines = null-->Line_15 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_7 $$ float rate = 0-->Line_25 $$ rate = Float.parseFloat(tokens.nextToken())[ FD ]
Line_22 $$ if (attr.endsWith(":time"))-->Line_24 $$ if (attr.endsWith(":rate"))[ CD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_10 $$ BufferedReader lines = null[ CD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_3 $$ Path reduceFile = getReduceFilePath(testType)[ CD ]
Line_22 $$ if (attr.endsWith(":time"))-->Line_23 $$ time = Long.parseLong(tokens.nextToken())[ CD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_12 $$ in = new DataInputStream(fs.open(reduceFile))[ FD ]
Line_12 $$ in = new DataInputStream(fs.open(reduceFile))-->Line_30 $$ if (in != null)[ FD ]
Line_17 $$ String attr = tokens.nextToken()-->Line_24 $$ if (attr.endsWith(":rate"))[ FD ]
Line_10 $$ BufferedReader lines = null-->Line_32 $$ if (lines != null)[ FD ]
Line_38 $$ PrintStream res = null-->Line_40 $$ res = new PrintStream(new FileOutputStream(new File(resFileName), true))[ FD ]
Line_9 $$ DataInputStream in = null-->Line_12 $$ in = new DataInputStream(fs.open(reduceFile))[ FD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_3 $$ Path reduceFile = getReduceFilePath(testType)[ FD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_5 $$ long size = 0[ CD ]
Line_20 $$ if (attr.endsWith(":size"))-->Line_21 $$ size = Long.parseLong(tokens.nextToken())[ CD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_4 $$ long tasks = 0[ CD ]
Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")-->Line_25 $$ rate = Float.parseFloat(tokens.nextToken())[ FD ]
Line_17 $$ String attr = tokens.nextToken()-->Line_18 $$ if (attr.endsWith(":tasks"))[ FD ]
Line_13 $$ lines = new BufferedReader(new InputStreamReader(in))-->Line_33 $$ lines.close()[ FD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_35 $$ double med = rate / 1000 / tasks[ CD ]
Line_9 $$ DataInputStream in = null-->Line_30 $$ if (in != null)[ FD ]
Line_6 $$ long time = 0-->Line_23 $$ time = Long.parseLong(tokens.nextToken())[ FD ]
Line_46 $$ if (res != null)-->Line_47 $$ res.close()[ CD ]
Line_13 $$ lines = new BufferedReader(new InputStreamReader(in))-->Line_32 $$ if (lines != null)[ FD ]
Line_21 $$ size = Long.parseLong(tokens.nextToken())-->Line_37 $$ String[] resultLines = [ FD ]
Line_30 $$ if (in != null)-->Line_31 $$ in.close()[ CD ]
Line_24 $$ if (attr.endsWith(":rate"))-->Line_26 $$ if (attr.endsWith(":sqrate"))[ CD ]
Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")-->Line_27 $$ sqrate = Float.parseFloat(tokens.nextToken())[ FD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_36 $$ double stdDev = Math.sqrt(Math.abs(sqrate / 1000 / tasks - med * med))[ CD ]
Line_15 $$ while ((line = lines.readLine()) != null) -->Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")[ CD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_9 $$ DataInputStream in = null[ CD ]
Line_10 $$ BufferedReader lines = null-->Line_13 $$ lines = new BufferedReader(new InputStreamReader(in))[ FD ]
Line_18 $$ if (attr.endsWith(":tasks"))-->Line_19 $$ tasks = Long.parseLong(tokens.nextToken())[ CD ]
Line_2 $$ private void analyzeResult(FileSystem fs, TestType testType, long execTime, String resFileName) throws IOException -->Line_7 $$ float rate = 0[ CD ]
Line_15 $$ while ((line = lines.readLine()) != null) -->Line_17 $$ String attr = tokens.nextToken()[ CD ]
Line_5 $$ long size = 0-->Line_37 $$ String[] resultLines = [ FD ]
Line_38 $$ PrintStream res = null-->Line_43 $$ res.println(resultLines[i])[ FD ]
Line_18 $$ if (attr.endsWith(":tasks"))-->Line_20 $$ if (attr.endsWith(":size"))[ CD ]
Line_5 $$ long size = 0-->Line_21 $$ size = Long.parseLong(tokens.nextToken())[ FD ]
Line_4 $$ long tasks = 0-->Line_19 $$ tasks = Long.parseLong(tokens.nextToken())[ FD ]
Line_40 $$ res = new PrintStream(new FileOutputStream(new File(resFileName), true))-->Line_43 $$ res.println(resultLines[i])[ FD ]
Line_17 $$ String attr = tokens.nextToken()-->Line_20 $$ if (attr.endsWith(":size"))[ FD ]
Line_40 $$ res = new PrintStream(new FileOutputStream(new File(resFileName), true))-->Line_47 $$ res.close()[ FD ]
Line_3 $$ Path reduceFile = getReduceFilePath(testType)-->Line_12 $$ in = new DataInputStream(fs.open(reduceFile))[ FD ]
Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")-->Line_21 $$ size = Long.parseLong(tokens.nextToken())[ FD ]
