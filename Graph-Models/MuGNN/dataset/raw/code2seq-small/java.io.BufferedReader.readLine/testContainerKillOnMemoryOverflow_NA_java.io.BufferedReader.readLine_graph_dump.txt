Line_18 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_53 $$ BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE, 60)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_60 $$ Pattern pat = Pattern.compile(expectedMsgPattern)[ CD ]
Line_39 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_40 $$ list.add(scRequest)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_61 $$ Assert.assertEquals("Expected message pattern is: " + expectedMsgPattern + "\n\nObserved message is: " + containerStatus.getDiagnostics(), true, pat.matcher(containerStatus.getDiagnostics()).find())[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_27 $$ String destinationFile = "dest_file"[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_25 $$ rsrc_alpha.setType(LocalResourceType.FILE)[ CD ]
Line_7 $$ File scriptFile = new File(tmpDir, "scriptFile.sh")-->Line_20 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())))[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_28 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_22 $$ rsrc_alpha.setResource(resource_alpha)[ CD ]
Line_51 $$ String pid = reader.readLine().trim()-->Line_62 $$ Assert.assertFalse("Process is still alive!", exec.signalContainer(user, pid, Signal.NULL))[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_59 $$ String expectedMsgPattern = "Container \\[pid=" + pid + ",containerID=" + cId + "\\] is running beyond virtual memory limits. Current usage: " + "[0-9.]+ ?[KMGTPE]?B of [0-9.]+ ?[KMGTPE]?B physical memory used; " + "[0-9.]+ ?[KMGTPE]?B of [0-9.]+ ?[KMGTPE]?B virtual memory used. " + "Killing container.\nDump of the process-tree for " + cId + " :\n"[ CD ]
Line_41 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)-->Line_42 $$ containerManager.startContainers(allRequests)[ FD ]
Line_38 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken)-->Line_40 $$ list.add(scRequest)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_56 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)[ CD ]
Line_60 $$ Pattern pat = Pattern.compile(expectedMsgPattern)-->Line_61 $$ Assert.assertEquals("Expected message pattern is: " + expectedMsgPattern + "\n\nObserved message is: " + containerStatus.getDiagnostics(), true, pat.matcher(containerStatus.getDiagnostics()).find())[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_50 $$ Assert.assertEquals("Hello World!", reader.readLine())[ CD ]
Line_44 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) -->Line_46 $$ LOG.info("Waiting for process start-file to be created")[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_8 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)[ CD ]
Line_56 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)-->Line_57 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_6 $$ containerManager.start()[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_39 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()[ CD ]
Line_15 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_38 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_43 $$ int timeoutSecs = 0[ CD ]
Line_49 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_50 $$ Assert.assertEquals("Hello World!", reader.readLine())[ FD ]
Line_37 $$ Token containerToken = BuilderUtils.newContainerToken(context.getNodeId(), containerManager.getContext().getContainerTokenSecretManager().createPassword(containerIdentifier), containerIdentifier)-->Line_38 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken)[ FD ]
Line_9 $$ File processStartFile = new File(tmpDir, "start_file.txt").getAbsoluteFile()-->Line_48 $$ Assert.assertTrue("ProcessStartFile doesn't exist!", processStartFile.exists())[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_29 $$ localResources.put(destinationFile, rsrc_alpha)[ CD ]
Line_59 $$ String expectedMsgPattern = "Container \\[pid=" + pid + ",containerID=" + cId + "\\] is running beyond virtual memory limits. Current usage: " + "[0-9.]+ ?[KMGTPE]?B of [0-9.]+ ?[KMGTPE]?B physical memory used; " + "[0-9.]+ ?[KMGTPE]?B of [0-9.]+ ?[KMGTPE]?B virtual memory used. " + "Killing container.\nDump of the process-tree for " + cId + " :\n"-->Line_60 $$ Pattern pat = Pattern.compile(expectedMsgPattern)[ FD ]
Line_7 $$ File scriptFile = new File(tmpDir, "scriptFile.sh")-->Line_33 $$ commands.add(scriptFile.getAbsolutePath())[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_42 $$ containerManager.startContainers(allRequests)[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_55 $$ containerIds.add(cId)[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_17 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1)[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_19 $$ int port = 12345[ CD ]
Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_25 $$ rsrc_alpha.setType(LocalResourceType.FILE)[ FD ]
Line_8 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_11 $$ fileWriter.write("\necho Hello World! > " + processStartFile)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_38 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken)[ CD ]
Line_54 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()-->Line_55 $$ containerIds.add(cId)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_13 $$ fileWriter.write("\nsleep 15")[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_34 $$ containerLaunchContext.setCommands(commands)[ CD ]
Line_17 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_18 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_57 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)[ CD ]
Line_8 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_14 $$ fileWriter.close()[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_26 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ CD ]
Line_20 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())))-->Line_22 $$ rsrc_alpha.setResource(resource_alpha)[ FD ]
Line_7 $$ File scriptFile = new File(tmpDir, "scriptFile.sh")-->Line_26 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ FD ]
Line_15 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_30 $$ containerLaunchContext.setLocalResources(localResources)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_51 $$ String pid = reader.readLine().trim()[ CD ]
Line_57 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)-->Line_58 $$ Assert.assertEquals(ContainerExitStatus.KILLED_EXCEEDED_VMEM, containerStatus.getExitStatus())[ FD ]
Line_3 $$ if (!ProcfsBasedProcessTree.isAvailable()) -->Line_4 $$ return[ CD ]
Line_43 $$ int timeoutSecs = 0-->Line_44 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ FD ]
Line_8 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_10 $$ fileWriter.write("\numask 0")[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_20 $$ URL resource_alpha = ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())))[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_3 $$ if (!ProcfsBasedProcessTree.isAvailable()) [ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_62 $$ Assert.assertFalse("Process is still alive!", exec.signalContainer(user, pid, Signal.NULL))[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_35 $$ Resource r = BuilderUtils.newResource(8 * 1024 * 1024, 1)[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_10 $$ fileWriter.write("\numask 0")[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_11 $$ fileWriter.write("\necho Hello World! > " + processStartFile)[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_31 $$ List<String> commands = new ArrayList<String>()[ CD ]
Line_31 $$ List<String> commands = new ArrayList<String>()-->Line_33 $$ commands.add(scriptFile.getAbsolutePath())[ FD ]
Line_36 $$ ContainerTokenIdentifier containerIdentifier = new ContainerTokenIdentifier(cId, context.getNodeId().toString(), user, r, System.currentTimeMillis() + 120000, 123, DUMMY_RM_IDENTIFIER, Priority.newInstance(0), 0)-->Line_37 $$ Token containerToken = BuilderUtils.newContainerToken(context.getNodeId(), containerManager.getContext().getContainerTokenSecretManager().createPassword(containerIdentifier), containerIdentifier)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_49 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))[ CD ]
Line_31 $$ List<String> commands = new ArrayList<String>()-->Line_32 $$ commands.add("/bin/bash")[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_54 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_52 $$ Assert.assertEquals(null, reader.readLine())[ CD ]
Line_31 $$ List<String> commands = new ArrayList<String>()-->Line_34 $$ containerLaunchContext.setCommands(commands)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_23 $$ rsrc_alpha.setSize(-1)[ CD ]
Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_22 $$ rsrc_alpha.setResource(resource_alpha)[ FD ]
Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_23 $$ rsrc_alpha.setSize(-1)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_30 $$ containerLaunchContext.setLocalResources(localResources)[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_48 $$ Assert.assertTrue("ProcessStartFile doesn't exist!", processStartFile.exists())[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_15 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_16 $$ ApplicationId appId = ApplicationId.newInstance(0, 0)[ CD ]
Line_27 $$ String destinationFile = "dest_file"-->Line_29 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_28 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_30 $$ containerLaunchContext.setLocalResources(localResources)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_36 $$ ContainerTokenIdentifier containerIdentifier = new ContainerTokenIdentifier(cId, context.getNodeId().toString(), user, r, System.currentTimeMillis() + 120000, 123, DUMMY_RM_IDENTIFIER, Priority.newInstance(0), 0)[ CD ]
Line_39 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_41 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ FD ]
Line_44 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) -->Line_45 $$ Thread.sleep(1000)[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_40 $$ list.add(scRequest)[ CD ]
Line_15 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_34 $$ containerLaunchContext.setCommands(commands)[ FD ]
Line_49 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_52 $$ Assert.assertEquals(null, reader.readLine())[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_18 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_44 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_53 $$ BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE, 60)[ CD ]
Line_16 $$ ApplicationId appId = ApplicationId.newInstance(0, 0)-->Line_17 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_33 $$ commands.add(scriptFile.getAbsolutePath())[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_24 $$ rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION)[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_37 $$ Token containerToken = BuilderUtils.newContainerToken(context.getNodeId(), containerManager.getContext().getContainerTokenSecretManager().createPassword(containerIdentifier), containerIdentifier)[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_7 $$ File scriptFile = new File(tmpDir, "scriptFile.sh")[ CD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_58 $$ Assert.assertEquals(ContainerExitStatus.KILLED_EXCEEDED_VMEM, containerStatus.getExitStatus())[ CD ]
Line_18 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_55 $$ containerIds.add(cId)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_41 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ CD ]
Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_26 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_14 $$ fileWriter.close()[ CD ]
Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_29 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_32 $$ commands.add("/bin/bash")[ CD ]
Line_49 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_51 $$ String pid = reader.readLine().trim()[ FD ]
Line_9 $$ File processStartFile = new File(tmpDir, "start_file.txt").getAbsoluteFile()-->Line_44 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ FD ]
Line_8 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_13 $$ fileWriter.write("\nsleep 15")[ FD ]
Line_54 $$ List<ContainerId> containerIds = new ArrayList<ContainerId>()-->Line_56 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)[ FD ]
Line_21 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_24 $$ rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION)[ FD ]
Line_28 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_29 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_57 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)-->Line_61 $$ Assert.assertEquals("Expected message pattern is: " + expectedMsgPattern + "\n\nObserved message is: " + containerStatus.getDiagnostics(), true, pat.matcher(containerStatus.getDiagnostics()).find())[ FD ]
Line_2 $$ public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException, YarnException -->Line_9 $$ File processStartFile = new File(tmpDir, "start_file.txt").getAbsoluteFile()[ CD ]
