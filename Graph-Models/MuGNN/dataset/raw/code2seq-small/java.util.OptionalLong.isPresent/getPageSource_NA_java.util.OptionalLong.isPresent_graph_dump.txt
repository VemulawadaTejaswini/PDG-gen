Line_9 $$ ImmutableList.Builder<Integer> columnIndexes = ImmutableList.builder()-->Line_34 $$ return new OrcPageSource(shardRewriter, recordReader, dataSource, columnIds, columnTypes, columnIndexes.build(), shardUuid, systemMemoryUsage)[ FD ]
Line_2 $$ public ConnectorPageSource getPageSource(UUID shardUuid, List<Long> columnIds, List<Type> columnTypes, TupleDomain<RaptorColumnHandle> effectivePredicate, ReaderAttributes readerAttributes, OptionalLong transactionId) -->Line_11 $$ long columnId = columnIds.get(i)[ FD ]
Line_9 $$ ImmutableList.Builder<Integer> columnIndexes = ImmutableList.builder()-->Line_22 $$ columnIndexes.add(OrcPageSource.NULL_COLUMN)[ FD ]
Line_10 $$ for (int i = 0; i < columnIds.size(); i++) -->Line_11 $$ long columnId = columnIds.get(i)[ CD ]
Line_6 $$ OrcReader reader = new OrcReader(dataSource, new OrcMetadataReader(), readerAttributes.getMaxMergeDistance(), readerAttributes.getMaxReadSize())-->Line_29 $$ OrcRecordReader recordReader = reader.createRecordReader(includedColumns.build(), predicate, UTC, systemMemoryUsage)[ FD ]
Line_11 $$ long columnId = columnIds.get(i)-->Line_16 $$ if (isShardUuidColumn(columnId)) [ FD ]
Line_3 $$ OrcDataSource dataSource = openShard(shardUuid, readerAttributes)-->Line_37 $$ dataSource.close()[ FD ]
Line_6 $$ OrcReader reader = new OrcReader(dataSource, new OrcMetadataReader(), readerAttributes.getMaxMergeDistance(), readerAttributes.getMaxReadSize())-->Line_7 $$ Map<Long, Integer> indexMap = columnIdIndex(reader.getColumnNames())[ FD ]
Line_11 $$ long columnId = columnIds.get(i)-->Line_20 $$ Integer index = indexMap.get(columnId)[ FD ]
Line_2 $$ public ConnectorPageSource getPageSource(UUID shardUuid, List<Long> columnIds, List<Type> columnTypes, TupleDomain<RaptorColumnHandle> effectivePredicate, ReaderAttributes readerAttributes, OptionalLong transactionId) -->Line_31 $$ if (transactionId.isPresent()) [ FD ]
Line_10 $$ for (int i = 0; i < columnIds.size(); i++) -->Line_25 $$ includedColumns.put(index, columnTypes.get(i))[ FD ]
Line_21 $$ if (index == null) -->Line_25 $$ includedColumns.put(index, columnTypes.get(i))[ CD ]
Line_20 $$ Integer index = indexMap.get(columnId)-->Line_25 $$ includedColumns.put(index, columnTypes.get(i))[ FD ]
Line_2 $$ public ConnectorPageSource getPageSource(UUID shardUuid, List<Long> columnIds, List<Type> columnTypes, TupleDomain<RaptorColumnHandle> effectivePredicate, ReaderAttributes readerAttributes, OptionalLong transactionId) -->Line_6 $$ OrcReader reader = new OrcReader(dataSource, new OrcMetadataReader(), readerAttributes.getMaxMergeDistance(), readerAttributes.getMaxReadSize())[ FD ]
Line_8 $$ ImmutableMap.Builder<Integer, Type> includedColumns = ImmutableMap.builder()-->Line_29 $$ OrcRecordReader recordReader = reader.createRecordReader(includedColumns.build(), predicate, UTC, systemMemoryUsage)[ FD ]
Line_30 $$ Optional<ShardRewriter> shardRewriter = Optional.empty()-->Line_32 $$ shardRewriter = Optional.of(createShardRewriter(transactionId.getAsLong(), shardUuid))[ FD ]
Line_9 $$ ImmutableList.Builder<Integer> columnIndexes = ImmutableList.builder()-->Line_13 $$ columnIndexes.add(OrcPageSource.ROWID_COLUMN)[ FD ]
Line_11 $$ long columnId = columnIds.get(i)-->Line_12 $$ if (isShardRowIdColumn(columnId)) [ FD ]
Line_10 $$ for (int i = 0; i < columnIds.size(); i++) -->Line_11 $$ long columnId = columnIds.get(i)[ FD ]
Line_8 $$ ImmutableMap.Builder<Integer, Type> includedColumns = ImmutableMap.builder()-->Line_25 $$ includedColumns.put(index, columnTypes.get(i))[ FD ]
Line_7 $$ Map<Long, Integer> indexMap = columnIdIndex(reader.getColumnNames())-->Line_28 $$ OrcPredicate predicate = getPredicate(effectivePredicate, indexMap)[ FD ]
Line_28 $$ OrcPredicate predicate = getPredicate(effectivePredicate, indexMap)-->Line_29 $$ OrcRecordReader recordReader = reader.createRecordReader(includedColumns.build(), predicate, UTC, systemMemoryUsage)[ FD ]
Line_2 $$ public ConnectorPageSource getPageSource(UUID shardUuid, List<Long> columnIds, List<Type> columnTypes, TupleDomain<RaptorColumnHandle> effectivePredicate, ReaderAttributes readerAttributes, OptionalLong transactionId) -->Line_25 $$ includedColumns.put(index, columnTypes.get(i))[ FD ]
Line_20 $$ Integer index = indexMap.get(columnId)-->Line_21 $$ if (index == null) [ FD ]
Line_2 $$ public ConnectorPageSource getPageSource(UUID shardUuid, List<Long> columnIds, List<Type> columnTypes, TupleDomain<RaptorColumnHandle> effectivePredicate, ReaderAttributes readerAttributes, OptionalLong transactionId) -->Line_3 $$ OrcDataSource dataSource = openShard(shardUuid, readerAttributes)[ CD ]
Line_12 $$ if (isShardRowIdColumn(columnId)) -->Line_13 $$ columnIndexes.add(OrcPageSource.ROWID_COLUMN)[ CD ]
Line_9 $$ ImmutableList.Builder<Integer> columnIndexes = ImmutableList.builder()-->Line_17 $$ columnIndexes.add(OrcPageSource.SHARD_UUID_COLUMN)[ FD ]
Line_21 $$ if (index == null) -->Line_22 $$ columnIndexes.add(OrcPageSource.NULL_COLUMN)[ CD ]
Line_10 $$ for (int i = 0; i < columnIds.size(); i++) -->Line_21 $$ if (index == null) [ CD ]
Line_2 $$ public ConnectorPageSource getPageSource(UUID shardUuid, List<Long> columnIds, List<Type> columnTypes, TupleDomain<RaptorColumnHandle> effectivePredicate, ReaderAttributes readerAttributes, OptionalLong transactionId) -->Line_3 $$ OrcDataSource dataSource = openShard(shardUuid, readerAttributes)[ FD ]
Line_10 $$ for (int i = 0; i < columnIds.size(); i++) -->Line_20 $$ Integer index = indexMap.get(columnId)[ CD ]
Line_9 $$ ImmutableList.Builder<Integer> columnIndexes = ImmutableList.builder()-->Line_24 $$ columnIndexes.add(index)[ FD ]
Line_2 $$ public ConnectorPageSource getPageSource(UUID shardUuid, List<Long> columnIds, List<Type> columnTypes, TupleDomain<RaptorColumnHandle> effectivePredicate, ReaderAttributes readerAttributes, OptionalLong transactionId) -->Line_10 $$ for (int i = 0; i < columnIds.size(); i++) [ FD ]
Line_31 $$ if (transactionId.isPresent()) -->Line_32 $$ shardRewriter = Optional.of(createShardRewriter(transactionId.getAsLong(), shardUuid))[ CD ]
Line_2 $$ public ConnectorPageSource getPageSource(UUID shardUuid, List<Long> columnIds, List<Type> columnTypes, TupleDomain<RaptorColumnHandle> effectivePredicate, ReaderAttributes readerAttributes, OptionalLong transactionId) -->Line_32 $$ shardRewriter = Optional.of(createShardRewriter(transactionId.getAsLong(), shardUuid))[ FD ]
Line_2 $$ public ConnectorPageSource getPageSource(UUID shardUuid, List<Long> columnIds, List<Type> columnTypes, TupleDomain<RaptorColumnHandle> effectivePredicate, ReaderAttributes readerAttributes, OptionalLong transactionId) -->Line_28 $$ OrcPredicate predicate = getPredicate(effectivePredicate, indexMap)[ FD ]
Line_7 $$ Map<Long, Integer> indexMap = columnIdIndex(reader.getColumnNames())-->Line_20 $$ Integer index = indexMap.get(columnId)[ FD ]
Line_4 $$ AggregatedMemoryContext systemMemoryUsage = new AggregatedMemoryContext()-->Line_29 $$ OrcRecordReader recordReader = reader.createRecordReader(includedColumns.build(), predicate, UTC, systemMemoryUsage)[ FD ]
Line_21 $$ if (index == null) -->Line_24 $$ columnIndexes.add(index)[ CD ]
Line_10 $$ for (int i = 0; i < columnIds.size(); i++) -->Line_12 $$ if (isShardRowIdColumn(columnId)) [ CD ]
Line_20 $$ Integer index = indexMap.get(columnId)-->Line_24 $$ columnIndexes.add(index)[ FD ]
Line_16 $$ if (isShardUuidColumn(columnId)) -->Line_17 $$ columnIndexes.add(OrcPageSource.SHARD_UUID_COLUMN)[ CD ]
Line_2 $$ public ConnectorPageSource getPageSource(UUID shardUuid, List<Long> columnIds, List<Type> columnTypes, TupleDomain<RaptorColumnHandle> effectivePredicate, ReaderAttributes readerAttributes, OptionalLong transactionId) -->Line_4 $$ AggregatedMemoryContext systemMemoryUsage = new AggregatedMemoryContext()[ CD ]
Line_10 $$ for (int i = 0; i < columnIds.size(); i++) -->Line_16 $$ if (isShardUuidColumn(columnId)) [ CD ]
