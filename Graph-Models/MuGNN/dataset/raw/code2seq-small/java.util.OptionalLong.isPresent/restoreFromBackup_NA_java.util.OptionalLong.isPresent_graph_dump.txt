Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_4 $$ if (!backupStore.get().shardExists(shardUuid)) [ FD ]
Line_3 $$ File storageFile = storageService.getStorageFile(shardUuid)-->Line_31 $$ storageService.createParents(storageFile)[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_16 $$ storageService.createParents(stagingFile)[ CD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_41 $$ if (!storageFile.exists() || (shardSize.isPresent() && (storageFile.length() != shardSize.getAsLong()))) [ CD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_29 $$ stats.addShardRecoveryDataRate(rate, size, duration)[ CD ]
Line_41 $$ if (!storageFile.exists() || (shardSize.isPresent() && (storageFile.length() != shardSize.getAsLong()))) -->Line_43 $$ log.info("Files do not match after recovery. Deleting local file: " + shardUuid)[ CD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_20 $$ backupStore.get().restoreShard(shardUuid, stagingFile)[ FD ]
Line_26 $$ Duration duration = nanosSince(start)-->Line_28 $$ DataSize rate = dataRate(size, duration).convertToMostSuccinctDataSize()[ FD ]
Line_15 $$ File stagingFile = temporarySuffix(storageService.getStagingFile(shardUuid))-->Line_27 $$ DataSize size = new DataSize(stagingFile.length(), BYTE)[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_30 $$ log.info("Copied shard %s from backup in %s (%s at %s/s)", shardUuid, duration, size, rate)[ CD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_17 $$ log.info("Copying shard %s from backup...", shardUuid)[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_18 $$ long start = System.nanoTime()[ CD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_8 $$ if (storageFile.exists()) [ CD ]
Line_8 $$ if (storageFile.exists()) -->Line_9 $$ if (!shardSize.isPresent() || (storageFile.length() == shardSize.getAsLong())) [ CD ]
Line_8 $$ if (storageFile.exists()) -->Line_12 $$ log.warn("Local shard file is corrupt. Deleting local file: %s", storageFile)[ CD ]
Line_3 $$ File storageFile = storageService.getStorageFile(shardUuid)-->Line_41 $$ if (!storageFile.exists() || (shardSize.isPresent() && (storageFile.length() != shardSize.getAsLong()))) [ FD ]
Line_28 $$ DataSize rate = dataRate(size, duration).convertToMostSuccinctDataSize()-->Line_30 $$ log.info("Copied shard %s from backup in %s (%s at %s/s)", shardUuid, duration, size, rate)[ FD ]
Line_3 $$ File storageFile = storageService.getStorageFile(shardUuid)-->Line_33 $$ Files.move(stagingFile.toPath(), storageFile.toPath(), ATOMIC_MOVE)[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_47 $$ stats.incrementShardRecoverySuccess()[ CD ]
Line_3 $$ File storageFile = storageService.getStorageFile(shardUuid)-->Line_8 $$ if (storageFile.exists()) [ FD ]
Line_15 $$ File stagingFile = temporarySuffix(storageService.getStagingFile(shardUuid))-->Line_39 $$ stagingFile.delete()[ FD ]
Line_41 $$ if (!storageFile.exists() || (shardSize.isPresent() && (storageFile.length() != shardSize.getAsLong()))) -->Line_42 $$ stats.incrementShardRecoveryFailure()[ CD ]
Line_9 $$ if (!shardSize.isPresent() || (storageFile.length() == shardSize.getAsLong())) -->Line_10 $$ return[ CD ]
Line_3 $$ File storageFile = storageService.getStorageFile(shardUuid)-->Line_13 $$ storageFile.delete()[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_17 $$ log.info("Copying shard %s from backup...", shardUuid)[ CD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_30 $$ log.info("Copied shard %s from backup in %s (%s at %s/s)", shardUuid, duration, size, rate)[ FD ]
Line_15 $$ File stagingFile = temporarySuffix(storageService.getStagingFile(shardUuid))-->Line_16 $$ storageService.createParents(stagingFile)[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_31 $$ storageService.createParents(storageFile)[ CD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_15 $$ File stagingFile = temporarySuffix(storageService.getStagingFile(shardUuid))[ CD ]
Line_3 $$ File storageFile = storageService.getStorageFile(shardUuid)-->Line_44 $$ storageFile.delete()[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_26 $$ Duration duration = nanosSince(start)[ CD ]
Line_41 $$ if (!storageFile.exists() || (shardSize.isPresent() && (storageFile.length() != shardSize.getAsLong()))) -->Line_44 $$ storageFile.delete()[ CD ]
Line_26 $$ Duration duration = nanosSince(start)-->Line_30 $$ log.info("Copied shard %s from backup in %s (%s at %s/s)", shardUuid, duration, size, rate)[ FD ]
Line_3 $$ File storageFile = storageService.getStorageFile(shardUuid)-->Line_12 $$ log.warn("Local shard file is corrupt. Deleting local file: %s", storageFile)[ FD ]
Line_4 $$ if (!backupStore.get().shardExists(shardUuid)) -->Line_5 $$ stats.incrementShardRecoveryBackupNotFound()[ CD ]
Line_27 $$ DataSize size = new DataSize(stagingFile.length(), BYTE)-->Line_29 $$ stats.addShardRecoveryDataRate(rate, size, duration)[ FD ]
Line_15 $$ File stagingFile = temporarySuffix(storageService.getStagingFile(shardUuid))-->Line_33 $$ Files.move(stagingFile.toPath(), storageFile.toPath(), ATOMIC_MOVE)[ FD ]
Line_8 $$ if (storageFile.exists()) -->Line_13 $$ storageFile.delete()[ CD ]
Line_28 $$ DataSize rate = dataRate(size, duration).convertToMostSuccinctDataSize()-->Line_29 $$ stats.addShardRecoveryDataRate(rate, size, duration)[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_9 $$ if (!shardSize.isPresent() || (storageFile.length() == shardSize.getAsLong())) [ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_41 $$ if (!storageFile.exists() || (shardSize.isPresent() && (storageFile.length() != shardSize.getAsLong()))) [ FD ]
Line_18 $$ long start = System.nanoTime()-->Line_26 $$ Duration duration = nanosSince(start)[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_3 $$ File storageFile = storageService.getStorageFile(shardUuid)[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_3 $$ File storageFile = storageService.getStorageFile(shardUuid)[ CD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_15 $$ File stagingFile = temporarySuffix(storageService.getStagingFile(shardUuid))[ FD ]
Line_27 $$ DataSize size = new DataSize(stagingFile.length(), BYTE)-->Line_28 $$ DataSize rate = dataRate(size, duration).convertToMostSuccinctDataSize()[ FD ]
Line_15 $$ File stagingFile = temporarySuffix(storageService.getStagingFile(shardUuid))-->Line_20 $$ backupStore.get().restoreShard(shardUuid, stagingFile)[ FD ]
Line_26 $$ Duration duration = nanosSince(start)-->Line_29 $$ stats.addShardRecoveryDataRate(rate, size, duration)[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_28 $$ DataSize rate = dataRate(size, duration).convertToMostSuccinctDataSize()[ CD ]
Line_27 $$ DataSize size = new DataSize(stagingFile.length(), BYTE)-->Line_30 $$ log.info("Copied shard %s from backup in %s (%s at %s/s)", shardUuid, duration, size, rate)[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_27 $$ DataSize size = new DataSize(stagingFile.length(), BYTE)[ CD ]
Line_15 $$ File stagingFile = temporarySuffix(storageService.getStagingFile(shardUuid))-->Line_23 $$ stagingFile.delete()[ FD ]
Line_2 $$ void restoreFromBackup(UUID shardUuid, OptionalLong shardSize) -->Line_4 $$ if (!backupStore.get().shardExists(shardUuid)) [ CD ]
Line_3 $$ File storageFile = storageService.getStorageFile(shardUuid)-->Line_9 $$ if (!shardSize.isPresent() || (storageFile.length() == shardSize.getAsLong())) [ FD ]
