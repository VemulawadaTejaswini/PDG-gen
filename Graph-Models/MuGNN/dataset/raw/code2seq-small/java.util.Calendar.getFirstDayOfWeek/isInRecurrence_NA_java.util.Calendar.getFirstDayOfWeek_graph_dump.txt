Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_19 $$ if (candidateIsInRecurrence(candidate, debug)) [ FD ]
Line_12 $$ if (debug) -->Line_13 $$ System.err.println("current < start")[ CD ]
Line_18 $$ while ((candidate.getTime().getTime() + duration.getInterval()) > myCurrent.getTime().getTime()) -->Line_23 $$ if (candidate.getTime().getTime() < dtStart.getTime().getTime()) [ CD ]
Line_29 $$ candidate = getCandidateStartTime(candidate)-->Line_22 $$ candidate.add(Calendar.SECOND, -1)[ FD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_10 $$ myCurrent.set(Calendar.MILLISECOND, 0)[ CD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_8 $$ myCurrent.setFirstDayOfWeek(dtStart.getFirstDayOfWeek())[ CD ]
Line_17 $$ Calendar candidate = getCandidateStartTime(myCurrent)-->Line_29 $$ candidate = getCandidateStartTime(candidate)[ FD ]
Line_3 $$ Calendar myCurrent = (Calendar) current.clone()-->Line_4 $$ myCurrent.clear(Calendar.ZONE_OFFSET)[ FD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_7 $$ myCurrent.setMinimalDaysInFirstWeek(4)[ CD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_17 $$ Calendar candidate = getCandidateStartTime(myCurrent)[ CD ]
Line_19 $$ if (candidateIsInRecurrence(candidate, debug)) -->Line_20 $$ return true[ CD ]
Line_29 $$ candidate = getCandidateStartTime(candidate)-->Line_23 $$ if (candidate.getTime().getTime() < dtStart.getTime().getTime()) [ FD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_31 $$ if (debug) [ CD ]
Line_18 $$ while ((candidate.getTime().getTime() + duration.getInterval()) > myCurrent.getTime().getTime()) -->Line_29 $$ candidate = getCandidateStartTime(candidate)[ CD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_18 $$ while ((candidate.getTime().getTime() + duration.getInterval()) > myCurrent.getTime().getTime()) [ CD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_5 $$ myCurrent.clear(Calendar.DST_OFFSET)[ CD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_3 $$ Calendar myCurrent = (Calendar) current.clone()[ CD ]
Line_24 $$ if (debug) -->Line_25 $$ System.err.println("No candidates after dtStart")[ CD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_6 $$ myCurrent.setTimeZone(TimeZoneUtil.getTimeZone(StringPool.UTC))[ CD ]
Line_11 $$ if (myCurrent.getTime().getTime() < dtStart.getTime().getTime()) -->Line_12 $$ if (debug) [ CD ]
Line_3 $$ Calendar myCurrent = (Calendar) current.clone()-->Line_17 $$ Calendar candidate = getCandidateStartTime(myCurrent)[ FD ]
Line_3 $$ Calendar myCurrent = (Calendar) current.clone()-->Line_10 $$ myCurrent.set(Calendar.MILLISECOND, 0)[ FD ]
Line_29 $$ candidate = getCandidateStartTime(candidate)-->Line_18 $$ while ((candidate.getTime().getTime() + duration.getInterval()) > myCurrent.getTime().getTime()) [ FD ]
Line_18 $$ while ((candidate.getTime().getTime() + duration.getInterval()) > myCurrent.getTime().getTime()) -->Line_22 $$ candidate.add(Calendar.SECOND, -1)[ CD ]
Line_23 $$ if (candidate.getTime().getTime() < dtStart.getTime().getTime()) -->Line_24 $$ if (debug) [ CD ]
Line_29 $$ candidate = getCandidateStartTime(candidate)-->Line_19 $$ if (candidateIsInRecurrence(candidate, debug)) [ FD ]
Line_17 $$ Calendar candidate = getCandidateStartTime(myCurrent)-->Line_19 $$ if (candidateIsInRecurrence(candidate, debug)) [ FD ]
Line_17 $$ Calendar candidate = getCandidateStartTime(myCurrent)-->Line_23 $$ if (candidate.getTime().getTime() < dtStart.getTime().getTime()) [ FD ]
Line_3 $$ Calendar myCurrent = (Calendar) current.clone()-->Line_9 $$ myCurrent.set(Calendar.SECOND, 0)[ FD ]
Line_17 $$ Calendar candidate = getCandidateStartTime(myCurrent)-->Line_18 $$ while ((candidate.getTime().getTime() + duration.getInterval()) > myCurrent.getTime().getTime()) [ FD ]
Line_17 $$ Calendar candidate = getCandidateStartTime(myCurrent)-->Line_22 $$ candidate.add(Calendar.SECOND, -1)[ FD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_34 $$ return false[ CD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_3 $$ Calendar myCurrent = (Calendar) current.clone()[ FD ]
Line_11 $$ if (myCurrent.getTime().getTime() < dtStart.getTime().getTime()) -->Line_15 $$ return false[ CD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_4 $$ myCurrent.clear(Calendar.ZONE_OFFSET)[ CD ]
Line_31 $$ if (debug) -->Line_32 $$ System.err.println("No matching candidates")[ CD ]
Line_18 $$ while ((candidate.getTime().getTime() + duration.getInterval()) > myCurrent.getTime().getTime()) -->Line_19 $$ if (candidateIsInRecurrence(candidate, debug)) [ CD ]
Line_3 $$ Calendar myCurrent = (Calendar) current.clone()-->Line_18 $$ while ((candidate.getTime().getTime() + duration.getInterval()) > myCurrent.getTime().getTime()) [ FD ]
Line_3 $$ Calendar myCurrent = (Calendar) current.clone()-->Line_6 $$ myCurrent.setTimeZone(TimeZoneUtil.getTimeZone(StringPool.UTC))[ FD ]
Line_3 $$ Calendar myCurrent = (Calendar) current.clone()-->Line_5 $$ myCurrent.clear(Calendar.DST_OFFSET)[ FD ]
Line_3 $$ Calendar myCurrent = (Calendar) current.clone()-->Line_7 $$ myCurrent.setMinimalDaysInFirstWeek(4)[ FD ]
Line_23 $$ if (candidate.getTime().getTime() < dtStart.getTime().getTime()) -->Line_27 $$ return false[ CD ]
Line_3 $$ Calendar myCurrent = (Calendar) current.clone()-->Line_11 $$ if (myCurrent.getTime().getTime() < dtStart.getTime().getTime()) [ FD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_11 $$ if (myCurrent.getTime().getTime() < dtStart.getTime().getTime()) [ CD ]
Line_2 $$ public boolean isInRecurrence(Calendar current, boolean debug) -->Line_9 $$ myCurrent.set(Calendar.SECOND, 0)[ CD ]
Line_3 $$ Calendar myCurrent = (Calendar) current.clone()-->Line_8 $$ myCurrent.setFirstDayOfWeek(dtStart.getFirstDayOfWeek())[ FD ]
