Line_2 $$ public Calendar getCandidateStartTime(Calendar current) -->Line_7 $$ Calendar candidate = (Calendar) current.clone()[ CD ]
Line_2 $$ public Calendar getCandidateStartTime(Calendar current) -->Line_15 $$ if (frequency == NO_RECURRENCE) [ CD ]
Line_7 $$ Calendar candidate = (Calendar) current.clone()-->Line_29 $$ reduce_day_of_month(dtStart, candidate)[ FD ]
Line_2 $$ public Calendar getCandidateStartTime(Calendar current) -->Line_3 $$ if (dtStart.getTime().getTime() > current.getTime().getTime()) [ FD ]
Line_15 $$ if (frequency == NO_RECURRENCE) -->Line_17 $$ return candidate[ CD ]
Line_8 $$ if (true) -->Line_10 $$ candidate.clear(Calendar.DST_OFFSET)[ CD ]
Line_8 $$ if (true) -->Line_12 $$ candidate.setMinimalDaysInFirstWeek(4)[ CD ]
Line_7 $$ Calendar candidate = (Calendar) current.clone()-->Line_10 $$ candidate.clear(Calendar.DST_OFFSET)[ FD ]
Line_7 $$ Calendar candidate = (Calendar) current.clone()-->Line_21 $$ reduce_constant_length_field(Calendar.HOUR_OF_DAY, dtStart, candidate)[ FD ]
Line_7 $$ Calendar candidate = (Calendar) current.clone()-->Line_11 $$ candidate.setTimeZone(TimeZoneUtil.getTimeZone(StringPool.UTC))[ FD ]
Line_7 $$ Calendar candidate = (Calendar) current.clone()-->Line_9 $$ candidate.clear(Calendar.ZONE_OFFSET)[ FD ]
Line_2 $$ public Calendar getCandidateStartTime(Calendar current) -->Line_3 $$ if (dtStart.getTime().getTime() > current.getTime().getTime()) [ CD ]
Line_2 $$ public Calendar getCandidateStartTime(Calendar current) -->Line_20 $$ reduce_constant_length_field(Calendar.MINUTE, dtStart, candidate)[ CD ]
Line_7 $$ Calendar candidate = (Calendar) current.clone()-->Line_16 $$ candidate.setTime(dtStart.getTime())[ FD ]
Line_7 $$ Calendar candidate = (Calendar) current.clone()-->Line_20 $$ reduce_constant_length_field(Calendar.MINUTE, dtStart, candidate)[ FD ]
Line_2 $$ public Calendar getCandidateStartTime(Calendar current) -->Line_35 $$ return candidate[ CD ]
Line_8 $$ if (true) -->Line_13 $$ candidate.setFirstDayOfWeek(dtStart.getFirstDayOfWeek())[ CD ]
Line_2 $$ public Calendar getCandidateStartTime(Calendar current) -->Line_6 $$ int minInterval = getMinimumInterval()[ CD ]
Line_7 $$ Calendar candidate = (Calendar) current.clone()-->Line_12 $$ candidate.setMinimalDaysInFirstWeek(4)[ FD ]
Line_7 $$ Calendar candidate = (Calendar) current.clone()-->Line_19 $$ reduce_constant_length_field(Calendar.SECOND, dtStart, candidate)[ FD ]
Line_2 $$ public Calendar getCandidateStartTime(Calendar current) -->Line_21 $$ reduce_constant_length_field(Calendar.HOUR_OF_DAY, dtStart, candidate)[ CD ]
Line_7 $$ Calendar candidate = (Calendar) current.clone()-->Line_13 $$ candidate.setFirstDayOfWeek(dtStart.getFirstDayOfWeek())[ FD ]
Line_15 $$ if (frequency == NO_RECURRENCE) -->Line_16 $$ candidate.setTime(dtStart.getTime())[ CD ]
Line_7 $$ Calendar candidate = (Calendar) current.clone()-->Line_26 $$ reduce_constant_length_field(Calendar.DAY_OF_WEEK, dtStart, candidate)[ FD ]
Line_7 $$ Calendar candidate = (Calendar) current.clone()-->Line_32 $$ reduce_day_of_year(dtStart, candidate)[ FD ]
Line_2 $$ public Calendar getCandidateStartTime(Calendar current) -->Line_19 $$ reduce_constant_length_field(Calendar.SECOND, dtStart, candidate)[ CD ]
Line_8 $$ if (true) -->Line_9 $$ candidate.clear(Calendar.ZONE_OFFSET)[ CD ]
Line_2 $$ public Calendar getCandidateStartTime(Calendar current) -->Line_8 $$ if (true) [ CD ]
Line_2 $$ public Calendar getCandidateStartTime(Calendar current) -->Line_7 $$ Calendar candidate = (Calendar) current.clone()[ FD ]
Line_8 $$ if (true) -->Line_11 $$ candidate.setTimeZone(TimeZoneUtil.getTimeZone(StringPool.UTC))[ CD ]
