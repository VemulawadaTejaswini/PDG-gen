Line_3 $$ if (isIgnoredFilePath(filePath)) -->Line_4 $$ return[ CD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_34 $$ if (syncFile == null) [ CD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_35 $$ fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_CREATE, filePath)[ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_37 $$ fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_MODIFY, filePath)[ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_43 $$ return FileVisitResult.CONTINUE[ CD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_8 $$ if (ioe != null) [ CD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_3 $$ if (isIgnoredFilePath(filePath)) [ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_8 $$ if (ioe != null) [ FD ]
Line_18 $$ SyncFile syncFile = SyncFileService.fetchSyncFile(filePath.toString())-->Line_19 $$ if (syncFile == null) [ FD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() [ CD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_9 $$ _failedFilePaths.add(filePath)[ FD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_18 $$ SyncFile syncFile = SyncFileService.fetchSyncFile(filePath.toString())[ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_19 $$ if (syncFile == null) [ CD ]
Line_34 $$ if (syncFile == null) -->Line_36 $$ if (FileUtil.isModified(syncFile, filePath)) [ CD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_9 $$ _failedFilePaths.add(filePath)[ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_15 $$ if (filePath.equals(_baseFilePath.resolve(".data")) || isIgnoredFilePath(filePath)) [ CD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_42 $$ _failedFilePaths.add(filePath)[ FD ]
Line_19 $$ if (syncFile == null) -->Line_20 $$ fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_CREATE, filePath)[ CD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_42 $$ _failedFilePaths.add(filePath)[ CD ]
Line_33 $$ SyncFile syncFile = SyncFileService.fetchSyncFile(filePath.toString())-->Line_36 $$ if (FileUtil.isModified(syncFile, filePath)) [ FD ]
Line_33 $$ SyncFile syncFile = SyncFileService.fetchSyncFile(filePath.toString())-->Line_34 $$ if (syncFile == null) [ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_33 $$ SyncFile syncFile = SyncFileService.fetchSyncFile(filePath.toString())[ FD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_36 $$ if (FileUtil.isModified(syncFile, filePath)) [ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_36 $$ if (FileUtil.isModified(syncFile, filePath)) [ FD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() [ FD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_37 $$ fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_MODIFY, filePath)[ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_18 $$ SyncFile syncFile = SyncFileService.fetchSyncFile(filePath.toString())[ CD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_23 $$ registerFilePath(filePath)[ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_18 $$ SyncFile syncFile = SyncFileService.fetchSyncFile(filePath.toString())[ FD ]
Line_18 $$ SyncFile syncFile = SyncFileService.fetchSyncFile(filePath.toString())-->Line_36 $$ if (FileUtil.isModified(syncFile, filePath)) [ FD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_23 $$ registerFilePath(filePath)[ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_30 $$ if (Files.notExists(filePath) || isIgnoredFilePath(filePath)) [ CD ]
Line_8 $$ if (ioe != null) -->Line_10 $$ return FileVisitResult.CONTINUE[ CD ]
Line_8 $$ if (ioe != null) -->Line_9 $$ _failedFilePaths.add(filePath)[ CD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_12 $$ return super.postVisitDirectory(filePath, null)[ CD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_35 $$ fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_CREATE, filePath)[ FD ]
Line_15 $$ if (filePath.equals(_baseFilePath.resolve(".data")) || isIgnoredFilePath(filePath)) -->Line_16 $$ return FileVisitResult.SKIP_SUBTREE[ CD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_15 $$ if (filePath.equals(_baseFilePath.resolve(".data")) || isIgnoredFilePath(filePath)) [ FD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_15 $$ if (filePath.equals(_baseFilePath.resolve(".data")) || isIgnoredFilePath(filePath)) [ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_20 $$ fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_CREATE, filePath)[ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_27 $$ return FileVisitResult.CONTINUE[ CD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_42 $$ _failedFilePaths.add(filePath)[ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_25 $$ _logger.error(ioe.getMessage(), ioe)[ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_30 $$ if (Files.notExists(filePath) || isIgnoredFilePath(filePath)) [ FD ]
Line_30 $$ if (Files.notExists(filePath) || isIgnoredFilePath(filePath)) -->Line_31 $$ return FileVisitResult.CONTINUE[ CD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_39 $$ return FileVisitResult.CONTINUE[ CD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_33 $$ SyncFile syncFile = SyncFileService.fetchSyncFile(filePath.toString())[ CD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_20 $$ fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_CREATE, filePath)[ FD ]
Line_34 $$ if (syncFile == null) -->Line_35 $$ fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_CREATE, filePath)[ CD ]
Line_18 $$ SyncFile syncFile = SyncFileService.fetchSyncFile(filePath.toString())-->Line_34 $$ if (syncFile == null) [ FD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_30 $$ if (Files.notExists(filePath) || isIgnoredFilePath(filePath)) [ FD ]
Line_6 $$ Files.walkFileTree(filePath, new SimpleFileVisitor<Path>() -->Line_12 $$ return super.postVisitDirectory(filePath, null)[ FD ]
Line_36 $$ if (FileUtil.isModified(syncFile, filePath)) -->Line_37 $$ fireWatchEventListener(SyncWatchEvent.EVENT_TYPE_MODIFY, filePath)[ CD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_12 $$ return super.postVisitDirectory(filePath, null)[ FD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_33 $$ SyncFile syncFile = SyncFileService.fetchSyncFile(filePath.toString())[ FD ]
Line_2 $$ public void walkFileTree(Path filePath) throws IOException -->Line_3 $$ if (isIgnoredFilePath(filePath)) [ CD ]
