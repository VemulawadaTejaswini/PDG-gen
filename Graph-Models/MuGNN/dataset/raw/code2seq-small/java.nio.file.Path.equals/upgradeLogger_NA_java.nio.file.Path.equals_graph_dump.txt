Line_4 $$ Path archiveFilePath = logsFolderPath.resolve("archive")-->Line_9 $$ Path archiveZipFilePath = archiveFilePath.resolve("sync-" + dateFormat.format(calendar.getTime()) + ".log.zip")[ FD ]
Line_13 $$ for (Path filePath : filePaths) -->Line_19 $$ InputStream inputStream = Files.newInputStream(filePath)[ FD ]
Line_9 $$ Path archiveZipFilePath = archiveFilePath.resolve("sync-" + dateFormat.format(calendar.getTime()) + ".log.zip")-->Line_10 $$ FileOutputStream fileOutputStream = new FileOutputStream(archiveZipFilePath.toFile())[ FD ]
Line_4 $$ Path archiveFilePath = logsFolderPath.resolve("archive")-->Line_5 $$ Files.createDirectories(archiveFilePath)[ FD ]
Line_13 $$ for (Path filePath : filePaths) -->Line_27 $$ Files.delete(filePath)[ FD ]
Line_3 $$ Path logsFolderPath = Paths.get(PropsValues.SYNC_CONFIGURATION_DIRECTORY, "logs")-->Line_4 $$ Path archiveFilePath = logsFolderPath.resolve("archive")[ FD ]
Line_11 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(fileOutputStream)-->Line_18 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_20 $$ byte[] bytes = new byte[4096]-->Line_23 $$ zipOutputStream.write(bytes, 0, length)[ FD ]
Line_2 $$ protected void upgradeLogger() throws Exception -->Line_11 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(fileOutputStream)[ CD ]
Line_4 $$ Path archiveFilePath = logsFolderPath.resolve("archive")-->Line_14 $$ if (filePath.equals(archiveFilePath)) [ FD ]
Line_22 $$ while ((length = inputStream.read(bytes)) > 0) -->Line_23 $$ zipOutputStream.write(bytes, 0, length)[ CD ]
Line_2 $$ protected void upgradeLogger() throws Exception -->Line_6 $$ Calendar calendar = Calendar.getInstance()[ CD ]
Line_11 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(fileOutputStream)-->Line_23 $$ zipOutputStream.write(bytes, 0, length)[ FD ]
Line_17 $$ ZipEntry zipEntry = new ZipEntry(String.valueOf(filePath.getFileName()))-->Line_18 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_20 $$ byte[] bytes = new byte[4096]-->Line_22 $$ while ((length = inputStream.read(bytes)) > 0) [ FD ]
Line_13 $$ for (Path filePath : filePaths) -->Line_14 $$ if (filePath.equals(archiveFilePath)) [ FD ]
Line_2 $$ protected void upgradeLogger() throws Exception -->Line_4 $$ Path archiveFilePath = logsFolderPath.resolve("archive")[ CD ]
Line_6 $$ Calendar calendar = Calendar.getInstance()-->Line_9 $$ Path archiveZipFilePath = archiveFilePath.resolve("sync-" + dateFormat.format(calendar.getTime()) + ".log.zip")[ FD ]
Line_2 $$ protected void upgradeLogger() throws Exception -->Line_3 $$ Path logsFolderPath = Paths.get(PropsValues.SYNC_CONFIGURATION_DIRECTORY, "logs")[ CD ]
Line_11 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(fileOutputStream)-->Line_32 $$ StreamUtil.cleanUp(zipOutputStream)[ FD ]
Line_19 $$ InputStream inputStream = Files.newInputStream(filePath)-->Line_22 $$ while ((length = inputStream.read(bytes)) > 0) [ FD ]
Line_13 $$ for (Path filePath : filePaths) -->Line_17 $$ ZipEntry zipEntry = new ZipEntry(String.valueOf(filePath.getFileName()))[ FD ]
Line_22 $$ while ((length = inputStream.read(bytes)) > 0) -->Line_23 $$ zipOutputStream.write(bytes, 0, length)[ FD ]
Line_2 $$ protected void upgradeLogger() throws Exception -->Line_8 $$ SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd")[ CD ]
Line_11 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(fileOutputStream)-->Line_25 $$ zipOutputStream.closeEntry()[ FD ]
Line_21 $$ int length = 0-->Line_22 $$ while ((length = inputStream.read(bytes)) > 0) [ FD ]
Line_2 $$ protected void upgradeLogger() throws Exception -->Line_7 $$ calendar.add(Calendar.DAY_OF_MONTH, -7)[ CD ]
Line_8 $$ SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd")-->Line_9 $$ Path archiveZipFilePath = archiveFilePath.resolve("sync-" + dateFormat.format(calendar.getTime()) + ".log.zip")[ FD ]
Line_19 $$ InputStream inputStream = Files.newInputStream(filePath)-->Line_26 $$ StreamUtil.cleanUp(inputStream)[ FD ]
Line_2 $$ protected void upgradeLogger() throws Exception -->Line_34 $$ UpgradeUtil.copyLoggerConfiguration()[ CD ]
Line_6 $$ Calendar calendar = Calendar.getInstance()-->Line_7 $$ calendar.add(Calendar.DAY_OF_MONTH, -7)[ FD ]
Line_2 $$ protected void upgradeLogger() throws Exception -->Line_10 $$ FileOutputStream fileOutputStream = new FileOutputStream(archiveZipFilePath.toFile())[ CD ]
Line_2 $$ protected void upgradeLogger() throws Exception -->Line_5 $$ Files.createDirectories(archiveFilePath)[ CD ]
Line_3 $$ Path logsFolderPath = Paths.get(PropsValues.SYNC_CONFIGURATION_DIRECTORY, "logs")-->Line_12 $$ try (DirectoryStream<Path> filePaths = Files.newDirectoryStream(logsFolderPath)) [ FD ]
Line_21 $$ int length = 0-->Line_23 $$ zipOutputStream.write(bytes, 0, length)[ FD ]
Line_11 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(fileOutputStream)-->Line_29 $$ zipOutputStream.close()[ FD ]
Line_2 $$ protected void upgradeLogger() throws Exception -->Line_9 $$ Path archiveZipFilePath = archiveFilePath.resolve("sync-" + dateFormat.format(calendar.getTime()) + ".log.zip")[ CD ]
