Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_19 $$ problems.add("Cannot declare a constructor that takes arguments")[ FD ]
Line_7 $$ if (source.getEnclosingClass() != null) -->Line_8 $$ if (Modifier.isStatic(modifiers)) [ CD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_3 $$ int modifiers = source.getModifiers()[ CD ]
Line_3 $$ int modifiers = source.getModifiers()-->Line_8 $$ if (Modifier.isStatic(modifiers)) [ FD ]
Line_8 $$ if (Modifier.isStatic(modifiers)) -->Line_13 $$ problems.add("Enclosed classes must be static and non private")[ CD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_7 $$ if (source.getEnclosingClass() != null) [ CD ]
Line_3 $$ int modifiers = source.getModifiers()-->Line_4 $$ if (Modifier.isInterface(modifiers)) [ FD ]
Line_9 $$ if (Modifier.isPrivate(modifiers)) -->Line_10 $$ problems.add("Class cannot be private")[ CD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_10 $$ problems.add("Class cannot be private")[ FD ]
Line_24 $$ for (Field field : fields) -->Line_25 $$ int fieldModifiers = field.getModifiers()[ FD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_7 $$ if (source.getEnclosingClass() != null) [ FD ]
Line_4 $$ if (Modifier.isInterface(modifiers)) -->Line_5 $$ problems.add("Must be a class, not an interface")[ CD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_16 $$ Constructor<?>[] constructors = source.getDeclaredConstructors()[ FD ]
Line_8 $$ if (Modifier.isStatic(modifiers)) -->Line_9 $$ if (Modifier.isPrivate(modifiers)) [ CD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_16 $$ Constructor<?>[] constructors = source.getDeclaredConstructors()[ CD ]
Line_24 $$ for (Field field : fields) -->Line_27 $$ problems.add(field, "Fields must be static final.")[ FD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_3 $$ int modifiers = source.getModifiers()[ FD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_23 $$ Field[] fields = source.getDeclaredFields()[ CD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_23 $$ Field[] fields = source.getDeclaredFields()[ FD ]
Line_25 $$ int fieldModifiers = field.getModifiers()-->Line_26 $$ if (!field.isSynthetic() && !(Modifier.isStatic(fieldModifiers) && Modifier.isFinal(fieldModifiers))) [ FD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_4 $$ if (Modifier.isInterface(modifiers)) [ CD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_5 $$ problems.add("Must be a class, not an interface")[ FD ]
Line_18 $$ if (constructor.getParameterTypes().length > 0) -->Line_19 $$ problems.add("Cannot declare a constructor that takes arguments")[ CD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_13 $$ problems.add("Enclosed classes must be static and non private")[ FD ]
Line_24 $$ for (Field field : fields) -->Line_26 $$ if (!field.isSynthetic() && !(Modifier.isStatic(fieldModifiers) && Modifier.isFinal(fieldModifiers))) [ FD ]
Line_26 $$ if (!field.isSynthetic() && !(Modifier.isStatic(fieldModifiers) && Modifier.isFinal(fieldModifiers))) -->Line_27 $$ problems.add(field, "Fields must be static final.")[ CD ]
Line_2 $$ private void validateClass(Class<?> source, ValidationProblemCollector problems) -->Line_27 $$ problems.add(field, "Fields must be static final.")[ FD ]
Line_17 $$ for (Constructor<?> constructor : constructors) -->Line_18 $$ if (constructor.getParameterTypes().length > 0) [ FD ]
Line_3 $$ int modifiers = source.getModifiers()-->Line_9 $$ if (Modifier.isPrivate(modifiers)) [ FD ]
