Line_2 $$ private void benchShort() -->Line_7 $$ for (int j = 0; j < NUM_MB; j++) [ CD ]
Line_2 $$ private void benchShort() -->Line_18 $$ start = TimeUtils.nanoTime()[ CD ]
Line_13 $$ for (int j = 0; j < NUM_MB; j++) -->Line_15 $$ for (int i = 0; i < len; i++) sb.put(i, shorts[i])[ CD ]
Line_13 $$ for (int j = 0; j < NUM_MB; j++) -->Line_19 $$ for (int j = 0; j < NUM_MB; j++) [ FD ]
Line_2 $$ private void benchShort() -->Line_13 $$ for (int j = 0; j < NUM_MB; j++) [ CD ]
Line_2 $$ private void benchShort() -->Line_5 $$ int len = shorts.length[ CD ]
Line_2 $$ private void benchShort() -->Line_6 $$ long start = TimeUtils.nanoTime()[ CD ]
Line_19 $$ for (int j = 0; j < NUM_MB; j++) -->Line_25 $$ for (int j = 0; j < NUM_MB; j++) [ FD ]
Line_5 $$ int len = shorts.length-->Line_15 $$ for (int i = 0; i < len; i++) sb.put(i, shorts[i])[ FD ]
Line_7 $$ for (int j = 0; j < NUM_MB; j++) -->Line_9 $$ for (int i = 0; i < len; i++) sb.put(shorts[i])[ CD ]
Line_9 $$ for (int i = 0; i < len; i++) sb.put(shorts[i])-->Line_15 $$ sb.put(i, shorts[i])[ FD ]
Line_7 $$ for (int j = 0; j < NUM_MB; j++) -->Line_25 $$ for (int j = 0; j < NUM_MB; j++) [ FD ]
Line_3 $$ ShortBuffer sb = BufferUtils.newShortBuffer(1024 * 1024 / 2)-->Line_20 $$ sb.clear()[ FD ]
Line_2 $$ private void benchShort() -->Line_29 $$ Gdx.app.log("BufferUtilsTest", "ShortBuffer native bulk put: " + (TimeUtils.nanoTime() - start) / 1000000000.0f)[ CD ]
Line_3 $$ ShortBuffer sb = BufferUtils.newShortBuffer(1024 * 1024 / 2)-->Line_14 $$ sb.clear()[ FD ]
Line_3 $$ ShortBuffer sb = BufferUtils.newShortBuffer(1024 * 1024 / 2)-->Line_9 $$ sb.put(shorts[i])[ FD ]
Line_19 $$ for (int j = 0; j < NUM_MB; j++) -->Line_20 $$ sb.clear()[ CD ]
Line_12 $$ start = TimeUtils.nanoTime()-->Line_24 $$ start = TimeUtils.nanoTime()[ FD ]
Line_5 $$ int len = shorts.length-->Line_27 $$ BufferUtils.copy(shorts, 0, sb, len)[ FD ]
Line_7 $$ for (int j = 0; j < NUM_MB; j++) -->Line_8 $$ sb.clear()[ CD ]
Line_25 $$ for (int j = 0; j < NUM_MB; j++) -->Line_27 $$ BufferUtils.copy(shorts, 0, sb, len)[ CD ]
Line_13 $$ for (int j = 0; j < NUM_MB; j++) -->Line_14 $$ sb.clear()[ CD ]
Line_2 $$ private void benchShort() -->Line_24 $$ start = TimeUtils.nanoTime()[ CD ]
Line_2 $$ private void benchShort() -->Line_3 $$ ShortBuffer sb = BufferUtils.newShortBuffer(1024 * 1024 / 2)[ CD ]
Line_6 $$ long start = TimeUtils.nanoTime()-->Line_12 $$ start = TimeUtils.nanoTime()[ FD ]
Line_5 $$ int len = shorts.length-->Line_9 $$ for (int i = 0; i < len; i++) sb.put(shorts[i])[ FD ]
Line_2 $$ private void benchShort() -->Line_12 $$ start = TimeUtils.nanoTime()[ CD ]
Line_12 $$ start = TimeUtils.nanoTime()-->Line_18 $$ start = TimeUtils.nanoTime()[ FD ]
Line_3 $$ ShortBuffer sb = BufferUtils.newShortBuffer(1024 * 1024 / 2)-->Line_27 $$ BufferUtils.copy(shorts, 0, sb, len)[ FD ]
Line_4 $$ short[] shorts = new short[1024 * 1024 / 2]-->Line_21 $$ sb.put(shorts)[ FD ]
Line_2 $$ private void benchShort() -->Line_11 $$ Gdx.app.log("BufferUtilsTest", "ShortBuffer relative put: " + (TimeUtils.nanoTime() - start) / 1000000000.0f)[ CD ]
Line_6 $$ long start = TimeUtils.nanoTime()-->Line_24 $$ start = TimeUtils.nanoTime()[ FD ]
Line_2 $$ private void benchShort() -->Line_23 $$ Gdx.app.log("BufferUtilsTest", "ShortBuffer bulk put: " + (TimeUtils.nanoTime() - start) / 1000000000.0f)[ CD ]
Line_3 $$ ShortBuffer sb = BufferUtils.newShortBuffer(1024 * 1024 / 2)-->Line_26 $$ sb.clear()[ FD ]
Line_2 $$ private void benchShort() -->Line_17 $$ Gdx.app.log("BufferUtilsTest", "ShortBuffer absolute put: " + (TimeUtils.nanoTime() - start) / 1000000000.0f)[ CD ]
Line_18 $$ start = TimeUtils.nanoTime()-->Line_24 $$ start = TimeUtils.nanoTime()[ FD ]
Line_6 $$ long start = TimeUtils.nanoTime()-->Line_18 $$ start = TimeUtils.nanoTime()[ FD ]
Line_19 $$ for (int j = 0; j < NUM_MB; j++) -->Line_21 $$ sb.put(shorts)[ CD ]
Line_3 $$ ShortBuffer sb = BufferUtils.newShortBuffer(1024 * 1024 / 2)-->Line_15 $$ sb.put(i, shorts[i])[ FD ]
Line_4 $$ short[] shorts = new short[1024 * 1024 / 2]-->Line_27 $$ BufferUtils.copy(shorts, 0, sb, len)[ FD ]
Line_7 $$ for (int j = 0; j < NUM_MB; j++) -->Line_19 $$ for (int j = 0; j < NUM_MB; j++) [ FD ]
Line_9 $$ for (int i = 0; i < len; i++) sb.put(shorts[i])-->Line_15 $$ for (int i = 0; i < len; i++) sb.put(i, shorts[i])[ FD ]
Line_13 $$ for (int j = 0; j < NUM_MB; j++) -->Line_25 $$ for (int j = 0; j < NUM_MB; j++) [ FD ]
Line_2 $$ private void benchShort() -->Line_4 $$ short[] shorts = new short[1024 * 1024 / 2][ CD ]
Line_7 $$ for (int j = 0; j < NUM_MB; j++) -->Line_13 $$ for (int j = 0; j < NUM_MB; j++) [ FD ]
Line_3 $$ ShortBuffer sb = BufferUtils.newShortBuffer(1024 * 1024 / 2)-->Line_21 $$ sb.put(shorts)[ FD ]
Line_2 $$ private void benchShort() -->Line_25 $$ for (int j = 0; j < NUM_MB; j++) [ CD ]
Line_2 $$ private void benchShort() -->Line_19 $$ for (int j = 0; j < NUM_MB; j++) [ CD ]
Line_3 $$ ShortBuffer sb = BufferUtils.newShortBuffer(1024 * 1024 / 2)-->Line_8 $$ sb.clear()[ FD ]
Line_25 $$ for (int j = 0; j < NUM_MB; j++) -->Line_26 $$ sb.clear()[ CD ]
