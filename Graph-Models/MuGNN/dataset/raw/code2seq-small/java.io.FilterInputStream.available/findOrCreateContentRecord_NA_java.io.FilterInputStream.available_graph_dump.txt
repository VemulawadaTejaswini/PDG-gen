Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_11 $$ long done = DUMP_STATISTICS ? System.nanoTime() - started : 0[ CD ]
Line_21 $$ if (page <= largestId) -->Line_25 $$ if (DO_HARD_CONSISTENCY_CHECK) [ CD ]
Line_25 $$ if (DO_HARD_CONSISTENCY_CHECK) -->Line_27 $$ int i = offset[ CD ]
Line_18 $$ PersistentBTreeEnumerator<byte[]> hashesEnumerator = getContentHashesEnumerator()-->Line_19 $$ final int largestId = hashesEnumerator.getLargestId()[ FD ]
Line_26 $$ DataInputStream stream = doReadContentById(page)-->Line_32 $$ if (bytes[i++] != stream.readByte()) [ FD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_9 $$ myDigest.update(bytes, offset, length)[ CD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_8 $$ myDigest.update("\0".getBytes(Charset.defaultCharset()))[ CD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_19 $$ final int largestId = hashesEnumerator.getLargestId()[ CD ]
Line_21 $$ if (page <= largestId) -->Line_40 $$ return page[ CD ]
Line_18 $$ PersistentBTreeEnumerator<byte[]> hashesEnumerator = getContentHashesEnumerator()-->Line_50 $$ byte[] bytes1 = hashesEnumerator.valueOf(page)[ FD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_7 $$ myDigest.update(String.valueOf(length - offset).getBytes(Charset.defaultCharset()))[ CD ]
Line_46 $$ if (DO_HARD_CONSISTENCY_CHECK) -->Line_51 $$ if (!Arrays.equals(digest, bytes1)) [ CD ]
Line_15 $$ if (DUMP_STATISTICS && (contents & 0x3FFF) == 0) -->Line_16 $$ LOG.info("Contents:" + contents + " of " + totalContents + ", reuses:" + reuses + " of " + totalReuses + " for " + (time / 1000000))[ CD ]
Line_28 $$ for (int c = 0; c < length; ++c) -->Line_29 $$ if (stream.available() == 0) [ CD ]
Line_46 $$ if (DO_HARD_CONSISTENCY_CHECK) -->Line_47 $$ if (hashesEnumerator.enumerate(digest) != page) [ CD ]
Line_46 $$ if (DO_HARD_CONSISTENCY_CHECK) -->Line_50 $$ byte[] bytes1 = hashesEnumerator.valueOf(page)[ CD ]
Line_4 $$ byte[] digest-->Line_20 $$ int page = hashesEnumerator.enumerate(digest)[ FD ]
Line_19 $$ final int largestId = hashesEnumerator.getLargestId()-->Line_21 $$ if (page <= largestId) [ FD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_21 $$ if (page <= largestId) [ CD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_28 $$ for (int c = 0; c < length; ++c) [ FD ]
Line_10 $$ digest = myDigest.digest()-->Line_47 $$ if (hashesEnumerator.enumerate(digest) != page) [ FD ]
Line_10 $$ digest = myDigest.digest()-->Line_51 $$ if (!Arrays.equals(digest, bytes1)) [ FD ]
Line_25 $$ if (DO_HARD_CONSISTENCY_CHECK) -->Line_36 $$ if (stream.available() > 0) [ CD ]
Line_21 $$ if (page <= largestId) -->Line_55 $$ return -page[ CD ]
Line_20 $$ int page = hashesEnumerator.enumerate(digest)-->Line_50 $$ byte[] bytes1 = hashesEnumerator.valueOf(page)[ FD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_9 $$ myDigest.update(bytes, offset, length)[ FD ]
Line_4 $$ byte[] digest-->Line_10 $$ digest = myDigest.digest()[ FD ]
Line_26 $$ DataInputStream stream = doReadContentById(page)-->Line_36 $$ if (stream.available() > 0) [ FD ]
Line_21 $$ if (page <= largestId) -->Line_46 $$ if (DO_HARD_CONSISTENCY_CHECK) [ CD ]
Line_26 $$ DataInputStream stream = doReadContentById(page)-->Line_29 $$ if (stream.available() == 0) [ FD ]
Line_21 $$ if (page <= largestId) -->Line_43 $$ if (page != newRecord) [ CD ]
Line_28 $$ for (int c = 0; c < length; ++c) -->Line_32 $$ if (bytes[i++] != stream.readByte()) [ CD ]
Line_4 $$ byte[] digest-->Line_51 $$ if (!Arrays.equals(digest, bytes1)) [ FD ]
Line_4 $$ byte[] digest-->Line_47 $$ if (hashesEnumerator.enumerate(digest) != page) [ FD ]
Line_10 $$ digest = myDigest.digest()-->Line_20 $$ int page = hashesEnumerator.enumerate(digest)[ FD ]
Line_25 $$ if (DO_HARD_CONSISTENCY_CHECK) -->Line_26 $$ DataInputStream stream = doReadContentById(page)[ CD ]
Line_50 $$ byte[] bytes1 = hashesEnumerator.valueOf(page)-->Line_51 $$ if (!Arrays.equals(digest, bytes1)) [ FD ]
Line_20 $$ int page = hashesEnumerator.enumerate(digest)-->Line_21 $$ if (page <= largestId) [ FD ]
Line_25 $$ if (DO_HARD_CONSISTENCY_CHECK) -->Line_28 $$ for (int c = 0; c < length; ++c) [ CD ]
Line_20 $$ int page = hashesEnumerator.enumerate(digest)-->Line_55 $$ return -page[ FD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_6 $$ myDigest.reset()[ CD ]
Line_21 $$ if (page <= largestId) -->Line_42 $$ int newRecord = getContentStorage().acquireNewRecord()[ CD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_18 $$ PersistentBTreeEnumerator<byte[]> hashesEnumerator = getContentHashesEnumerator()[ CD ]
Line_21 $$ if (page <= largestId) -->Line_23 $$ getContentStorage().acquireRecord(page)[ CD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_20 $$ int page = hashesEnumerator.enumerate(digest)[ CD ]
Line_27 $$ int i = offset-->Line_32 $$ if (bytes[i++] != stream.readByte()) [ FD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_10 $$ digest = myDigest.digest()[ CD ]
Line_20 $$ int page = hashesEnumerator.enumerate(digest)-->Line_26 $$ DataInputStream stream = doReadContentById(page)[ FD ]
Line_20 $$ int page = hashesEnumerator.enumerate(digest)-->Line_23 $$ getContentStorage().acquireRecord(page)[ FD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_4 $$ byte[] digest[ CD ]
Line_20 $$ int page = hashesEnumerator.enumerate(digest)-->Line_43 $$ if (page != newRecord) [ FD ]
Line_42 $$ int newRecord = getContentStorage().acquireNewRecord()-->Line_43 $$ if (page != newRecord) [ FD ]
Line_20 $$ int page = hashesEnumerator.enumerate(digest)-->Line_47 $$ if (hashesEnumerator.enumerate(digest) != page) [ FD ]
Line_18 $$ PersistentBTreeEnumerator<byte[]> hashesEnumerator = getContentHashesEnumerator()-->Line_20 $$ int page = hashesEnumerator.enumerate(digest)[ FD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_5 $$ long started = DUMP_STATISTICS ? System.nanoTime() : 0[ CD ]
Line_2 $$ private static int findOrCreateContentRecord(byte[] bytes, int offset, int length) throws IOException -->Line_15 $$ if (DUMP_STATISTICS && (contents & 0x3FFF) == 0) [ CD ]
Line_18 $$ PersistentBTreeEnumerator<byte[]> hashesEnumerator = getContentHashesEnumerator()-->Line_47 $$ if (hashesEnumerator.enumerate(digest) != page) [ FD ]
