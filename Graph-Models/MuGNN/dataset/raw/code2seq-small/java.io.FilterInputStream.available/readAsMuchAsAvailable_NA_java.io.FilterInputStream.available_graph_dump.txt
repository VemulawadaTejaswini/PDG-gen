Line_4 $$ int available-->Line_5 $$ while ((available = inputStream.available()) > 0) [ FD ]
Line_2 $$ private static void readAsMuchAsAvailable(DataInputStream inputStream, byte[] data, int maxLength) throws IOException -->Line_6 $$ if (available + offset > maxLength) [ FD ]
Line_5 $$ while ((available = inputStream.available()) > 0) -->Line_10 $$ inputStream.readFully(data, offset, available)[ FD ]
Line_2 $$ private static void readAsMuchAsAvailable(DataInputStream inputStream, byte[] data, int maxLength) throws IOException -->Line_5 $$ while ((available = inputStream.available()) > 0) [ CD ]
Line_11 $$ offset += available-->Line_10 $$ inputStream.readFully(data, offset, available)[ FD ]
Line_2 $$ private static void readAsMuchAsAvailable(DataInputStream inputStream, byte[] data, int maxLength) throws IOException -->Line_5 $$ while ((available = inputStream.available()) > 0) [ FD ]
Line_11 $$ offset += available-->Line_7 $$ inputStream.readFully(data, offset, maxLength - offset)[ FD ]
Line_6 $$ if (available + offset > maxLength) -->Line_7 $$ inputStream.readFully(data, offset, maxLength - offset)[ CD ]
Line_2 $$ private static void readAsMuchAsAvailable(DataInputStream inputStream, byte[] data, int maxLength) throws IOException -->Line_3 $$ int offset = 0[ CD ]
Line_2 $$ private static void readAsMuchAsAvailable(DataInputStream inputStream, byte[] data, int maxLength) throws IOException -->Line_7 $$ inputStream.readFully(data, offset, maxLength - offset)[ FD ]
Line_3 $$ int offset = 0-->Line_10 $$ inputStream.readFully(data, offset, available)[ FD ]
Line_6 $$ if (available + offset > maxLength) -->Line_8 $$ return[ CD ]
Line_2 $$ private static void readAsMuchAsAvailable(DataInputStream inputStream, byte[] data, int maxLength) throws IOException -->Line_10 $$ inputStream.readFully(data, offset, available)[ FD ]
Line_5 $$ while ((available = inputStream.available()) > 0) -->Line_6 $$ if (available + offset > maxLength) [ CD ]
Line_5 $$ while ((available = inputStream.available()) > 0) -->Line_10 $$ inputStream.readFully(data, offset, available)[ CD ]
Line_4 $$ int available-->Line_10 $$ inputStream.readFully(data, offset, available)[ FD ]
Line_5 $$ while ((available = inputStream.available()) > 0) -->Line_11 $$ offset += available[ FD ]
Line_3 $$ int offset = 0-->Line_11 $$ offset += available[ FD ]
Line_2 $$ private static void readAsMuchAsAvailable(DataInputStream inputStream, byte[] data, int maxLength) throws IOException -->Line_4 $$ int available[ CD ]
Line_5 $$ while ((available = inputStream.available()) > 0) -->Line_11 $$ offset += available[ CD ]
Line_4 $$ int available-->Line_11 $$ offset += available[ FD ]
Line_3 $$ int offset = 0-->Line_7 $$ inputStream.readFully(data, offset, maxLength - offset)[ FD ]
