Line_31 $$ for (int i = 0; i < chunkOffsetTable.length; ++i) -->Line_33 $$ for (int j = 0; j < FACTOR; ++j) [ CD ]
Line_16 $$ while (chunkLengthStream.available() != 0) -->Line_22 $$ chunkLengthTable[chunkLengthTableLength++] = (short) chunkLength[ CD ]
Line_40 $$ for (int i = 0; i < chunkLengthTableLength; ++i) -->Line_41 $$ calcOffsetOfPage(i)[ FD ]
Line_3 $$ if (myChunkLengthTable != null)-->Line_4 $$ return[ CD ]
Line_5 $$ File chunkLengthFile = getChunkLengthFile()-->Line_6 $$ if (chunkLengthFile.exists()) [ FD ]
Line_31 $$ for (int i = 0; i < chunkOffsetTable.length; ++i) -->Line_32 $$ int start = i * FACTOR[ CD ]
Line_60 $$ if (myUncompressedFileLength == -1) -->Line_61 $$ long tempFileLength = getIncompleteChunkFile().length()[ CD ]
Line_63 $$ if (myUncompressedFileLength != myFileLength + tempFileLength) -->Line_64 $$ if (CompressionUtil.DUMP_COMPRESSION_STATS) [ CD ]
Line_64 $$ if (CompressionUtil.DUMP_COMPRESSION_STATS) -->Line_65 $$ System.out.println(myUncompressedFileLength + "->" + (myFileLength + tempFileLength) + " for " + myBaseFile)[ CD ]
Line_23 $$ if (doDebug)-->Line_24 $$ myCompressedChunksFileOffsets.add(o)[ CD ]
Line_7 $$ final DataInputStream chunkLengthStream = new DataInputStream(new BufferedInputStream(new LimitedInputStream(new FileInputStream(chunkLengthFile), (int) chunkLengthFile.length()) -->Line_50 $$ chunkLengthStream.close()[ FD ]
Line_2 $$ private synchronized void initChunkLengthTable() throws IOException -->Line_60 $$ if (myUncompressedFileLength == -1) [ CD ]
Line_40 $$ for (int i = 0; i < chunkLengthTableLength; ++i) -->Line_41 $$ calcOffsetOfPage(i)[ CD ]
Line_5 $$ File chunkLengthFile = getChunkLengthFile()-->Line_13 $$ short[] chunkLengthTable = new short[(int) (chunkLengthFile.length() / 2)][ FD ]
Line_16 $$ while (chunkLengthStream.available() != 0) -->Line_23 $$ if (doDebug)[ CD ]
Line_39 $$ if (doDebug) -->Line_40 $$ for (int i = 0; i < chunkLengthTableLength; ++i) [ CD ]
Line_28 $$ if (myChunkTableLength >= FACTOR) -->Line_39 $$ if (doDebug) [ CD ]
Line_7 $$ final DataInputStream chunkLengthStream = new DataInputStream(new BufferedInputStream(new LimitedInputStream(new FileInputStream(chunkLengthFile), (int) chunkLengthFile.length()) -->Line_16 $$ while (chunkLengthStream.available() != 0) [ FD ]
Line_16 $$ while (chunkLengthStream.available() != 0) -->Line_19 $$ if (chunkLengthTableLength == chunkLengthTable.length) [ CD ]
Line_31 $$ for (int i = 0; i < chunkOffsetTable.length; ++i) -->Line_41 $$ calcOffsetOfPage(i)[ FD ]
Line_2 $$ private synchronized void initChunkLengthTable() throws IOException -->Line_5 $$ File chunkLengthFile = getChunkLengthFile()[ CD ]
Line_2 $$ private synchronized void initChunkLengthTable() throws IOException -->Line_6 $$ if (chunkLengthFile.exists()) [ CD ]
Line_31 $$ for (int i = 0; i < chunkOffsetTable.length; ++i) -->Line_40 $$ for (int i = 0; i < chunkLengthTableLength; ++i) [ FD ]
Line_19 $$ if (chunkLengthTableLength == chunkLengthTable.length) -->Line_20 $$ chunkLengthTable = reallocShortTable(chunkLengthTable)[ CD ]
Line_28 $$ if (myChunkTableLength >= FACTOR) -->Line_31 $$ for (int i = 0; i < chunkOffsetTable.length; ++i) [ CD ]
Line_7 $$ final DataInputStream chunkLengthStream = new DataInputStream(new BufferedInputStream(new LimitedInputStream(new FileInputStream(chunkLengthFile), (int) chunkLengthFile.length()) -->Line_9 $$ return remainingLimit()[ CD ]
Line_60 $$ if (myUncompressedFileLength == -1) -->Line_63 $$ if (myUncompressedFileLength != myFileLength + tempFileLength) [ CD ]
Line_16 $$ while (chunkLengthStream.available() != 0) -->Line_17 $$ int chunkLength = DataInputOutputUtil.readINT(chunkLengthStream)[ CD ]
Line_6 $$ if (chunkLengthFile.exists()) -->Line_7 $$ final DataInputStream chunkLengthStream = new DataInputStream(new BufferedInputStream(new LimitedInputStream(new FileInputStream(chunkLengthFile), (int) chunkLengthFile.length()) [ CD ]
Line_7 $$ final DataInputStream chunkLengthStream = new DataInputStream(new BufferedInputStream(new LimitedInputStream(new FileInputStream(chunkLengthFile), (int) chunkLengthFile.length()) -->Line_17 $$ int chunkLength = DataInputOutputUtil.readINT(chunkLengthStream)[ FD ]
Line_2 $$ private synchronized void initChunkLengthTable() throws IOException -->Line_3 $$ if (myChunkLengthTable != null)[ CD ]
Line_5 $$ File chunkLengthFile = getChunkLengthFile()-->Line_7 $$ final DataInputStream chunkLengthStream = new DataInputStream(new BufferedInputStream(new LimitedInputStream(new FileInputStream(chunkLengthFile), (int) chunkLengthFile.length()) [ FD ]
