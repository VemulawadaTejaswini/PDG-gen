Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_12 $$ size = parseSize(din, false, -1)[ FD ]
Line_24 $$ if (prev != null) -->Line_25 $$ val.prev = prev[ CD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_4 $$ byte type = din.readByte()[ CD ]
Line_15 $$ if (size == 0)-->Line_16 $$ return result[ CD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_7 $$ valueType = din.readByte()[ FD ]
Line_11 $$ if (type == '#') -->Line_15 $$ if (size == 0)[ CD ]
Line_24 $$ if (prev != null) -->Line_26 $$ prev.next = val[ CD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_37 $$ return result[ CD ]
Line_35 $$ type = valueType == 0 ? din.readByte() : valueType-->Line_22 $$ final JsonValue val = parse(din, type)[ FD ]
Line_8 $$ type = din.readByte()-->Line_11 $$ if (type == '#') [ FD ]
Line_4 $$ byte type = din.readByte()-->Line_8 $$ type = din.readByte()[ FD ]
Line_22 $$ final JsonValue val = parse(din, type)-->Line_29 $$ result.child = val[ FD ]
Line_3 $$ JsonValue result = new JsonValue(JsonValue.ValueType.array)-->Line_23 $$ val.parent = result[ FD ]
Line_6 $$ if (type == '$') -->Line_7 $$ valueType = din.readByte()[ CD ]
Line_4 $$ byte type = din.readByte()-->Line_35 $$ type = valueType == 0 ? din.readByte() : valueType[ FD ]
Line_4 $$ byte type = din.readByte()-->Line_22 $$ final JsonValue val = parse(din, type)[ FD ]
Line_19 $$ JsonValue prev = null-->Line_25 $$ val.prev = prev[ FD ]
Line_24 $$ if (prev != null) -->Line_27 $$ result.size++[ CD ]
Line_17 $$ type = valueType == 0 ? din.readByte() : valueType-->Line_22 $$ final JsonValue val = parse(din, type)[ FD ]
Line_11 $$ if (type == '#') -->Line_13 $$ if (size < 0)[ CD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_35 $$ type = valueType == 0 ? din.readByte() : valueType[ FD ]
Line_22 $$ final JsonValue val = parse(din, type)-->Line_26 $$ prev.next = val[ FD ]
Line_11 $$ if (type == '#') -->Line_12 $$ size = parseSize(din, false, -1)[ CD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_11 $$ if (type == '#') [ CD ]
Line_12 $$ size = parseSize(din, false, -1)-->Line_13 $$ if (size < 0)[ FD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_20 $$ long c = 0[ CD ]
Line_24 $$ if (prev != null) -->Line_29 $$ result.child = val[ CD ]
Line_24 $$ if (prev != null) -->Line_30 $$ result.size = 1[ CD ]
Line_4 $$ byte type = din.readByte()-->Line_11 $$ if (type == '#') [ FD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_10 $$ long size = -1[ CD ]
Line_10 $$ long size = -1-->Line_13 $$ if (size < 0)[ FD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_3 $$ JsonValue result = new JsonValue(JsonValue.ValueType.array)[ CD ]
Line_8 $$ type = din.readByte()-->Line_35 $$ type = valueType == 0 ? din.readByte() : valueType[ FD ]
Line_32 $$ prev = val-->Line_24 $$ if (prev != null) [ FD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_6 $$ if (type == '$') [ CD ]
Line_10 $$ long size = -1-->Line_15 $$ if (size == 0)[ FD ]
Line_21 $$ while (din.available() > 0 && type != ']') -->Line_32 $$ prev = val[ CD ]
Line_4 $$ byte type = din.readByte()-->Line_6 $$ if (type == '$') [ FD ]
Line_21 $$ while (din.available() > 0 && type != ']') -->Line_33 $$ if (size > 0 && ++c >= size)[ CD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_17 $$ type = valueType == 0 ? din.readByte() : valueType[ FD ]
Line_6 $$ if (type == '$') -->Line_8 $$ type = din.readByte()[ CD ]
Line_4 $$ byte type = din.readByte()-->Line_17 $$ type = valueType == 0 ? din.readByte() : valueType[ FD ]
Line_22 $$ final JsonValue val = parse(din, type)-->Line_32 $$ prev = val[ FD ]
Line_11 $$ if (type == '#') -->Line_17 $$ type = valueType == 0 ? din.readByte() : valueType[ CD ]
Line_21 $$ while (din.available() > 0 && type != ']') -->Line_22 $$ final JsonValue val = parse(din, type)[ CD ]
Line_21 $$ while (din.available() > 0 && type != ']') -->Line_24 $$ if (prev != null) [ CD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_4 $$ byte type = din.readByte()[ FD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_22 $$ final JsonValue val = parse(din, type)[ FD ]
Line_32 $$ prev = val-->Line_25 $$ val.prev = prev[ FD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_8 $$ type = din.readByte()[ FD ]
Line_8 $$ type = din.readByte()-->Line_22 $$ final JsonValue val = parse(din, type)[ FD ]
Line_10 $$ long size = -1-->Line_12 $$ size = parseSize(din, false, -1)[ FD ]
Line_8 $$ type = din.readByte()-->Line_17 $$ type = valueType == 0 ? din.readByte() : valueType[ FD ]
Line_5 $$ byte valueType = 0-->Line_7 $$ valueType = din.readByte()[ FD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_21 $$ while (din.available() > 0 && type != ']') [ CD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_5 $$ byte valueType = 0[ CD ]
Line_12 $$ size = parseSize(din, false, -1)-->Line_15 $$ if (size == 0)[ FD ]
Line_21 $$ while (din.available() > 0 && type != ']') -->Line_23 $$ val.parent = result[ CD ]
Line_19 $$ JsonValue prev = null-->Line_24 $$ if (prev != null) [ FD ]
Line_19 $$ JsonValue prev = null-->Line_32 $$ prev = val[ FD ]
Line_20 $$ long c = 0-->Line_33 $$ if (size > 0 && ++c >= size)[ FD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_21 $$ while (din.available() > 0 && type != ']') [ FD ]
Line_21 $$ while (din.available() > 0 && type != ']') -->Line_35 $$ type = valueType == 0 ? din.readByte() : valueType[ CD ]
Line_17 $$ type = valueType == 0 ? din.readByte() : valueType-->Line_35 $$ type = valueType == 0 ? din.readByte() : valueType[ FD ]
Line_3 $$ JsonValue result = new JsonValue(JsonValue.ValueType.array)-->Line_15 $$ if (size == 0)[ FD ]
Line_2 $$ protected JsonValue parseArray(final DataInputStream din) throws IOException -->Line_19 $$ JsonValue prev = null[ CD ]
