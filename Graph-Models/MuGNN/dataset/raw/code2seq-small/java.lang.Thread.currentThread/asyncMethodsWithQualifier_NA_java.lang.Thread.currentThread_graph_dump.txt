Line_5 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_6 $$ context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncMethodWithQualifierBean.class))[ FD ]
Line_5 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_7 $$ context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class))[ FD ]
Line_5 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_13 $$ AsyncMethodWithQualifierBean asyncTest = context.getBean("asyncTest", AsyncMethodWithQualifierBean.class)[ FD ]
Line_16 $$ Future<String> future = asyncTest.returnSomething(20)-->Line_17 $$ assertEquals("20", future.get())[ FD ]
Line_13 $$ AsyncMethodWithQualifierBean asyncTest = context.getBean("asyncTest", AsyncMethodWithQualifierBean.class)-->Line_18 $$ Future<String> future2 = asyncTest.returnSomething2(30)[ FD ]
Line_5 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_12 $$ context.refresh()[ FD ]
Line_5 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_10 $$ context.registerBeanDefinition("e1", new RootBeanDefinition(ThreadPoolTaskExecutor.class))[ FD ]
Line_5 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_11 $$ context.registerBeanDefinition("e2", new RootBeanDefinition(ThreadPoolTaskExecutor.class))[ FD ]
Line_13 $$ AsyncMethodWithQualifierBean asyncTest = context.getBean("asyncTest", AsyncMethodWithQualifierBean.class)-->Line_16 $$ Future<String> future = asyncTest.returnSomething(20)[ FD ]
Line_13 $$ AsyncMethodWithQualifierBean asyncTest = context.getBean("asyncTest", AsyncMethodWithQualifierBean.class)-->Line_15 $$ asyncTest.doSomething(10)[ FD ]
Line_5 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_8 $$ context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class))[ FD ]
Line_18 $$ Future<String> future2 = asyncTest.returnSomething2(30)-->Line_19 $$ assertEquals("30", future2.get())[ FD ]
Line_13 $$ AsyncMethodWithQualifierBean asyncTest = context.getBean("asyncTest", AsyncMethodWithQualifierBean.class)-->Line_14 $$ asyncTest.doNothing(5)[ FD ]
Line_5 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_9 $$ context.registerBeanDefinition("e0", new RootBeanDefinition(ThreadPoolTaskExecutor.class))[ FD ]
