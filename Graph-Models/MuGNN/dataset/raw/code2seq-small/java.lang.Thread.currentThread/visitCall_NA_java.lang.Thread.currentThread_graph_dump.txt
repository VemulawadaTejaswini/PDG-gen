Line_40 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) -->Line_42 $$ if (method.type().parameterCount() > 0 && method.type().parameterType(0) == ConnectorSession.class) [ CD ]
Line_36 $$ function = registry.getScalarFunctionImplementation(signature)-->Line_41 $$ MethodHandle method = function.getMethodHandle()[ FD ]
Line_41 $$ MethodHandle method = function.getMethodHandle()-->Line_43 $$ method = method.bindTo(session)[ FD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_63 $$ return call(signature, typeManager.getType(signature.getReturnType()), arguments)[ CD ]
Line_13 $$ if (optimizedOperand instanceof ConstantExpression) -->Line_15 $$ checkState(constantOperand.getType().equals(BOOLEAN), "Operand of IF function should be BOOLEAN type. Get type " + constantOperand.getType().getDisplayName())[ CD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_50 $$ return constantNull(call.getType())[ FD ]
Line_5 $$ if (signature.getName().equals(CAST)) -->Line_6 $$ Signature functionSignature = registry.getCoercion(call.getArguments().get(0).getType(), call.getType())[ CD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_6 $$ Signature functionSignature = registry.getCoercion(call.getArguments().get(0).getType(), call.getType())[ FD ]
Line_14 $$ ConstantExpression constantOperand = (ConstantExpression) optimizedOperand-->Line_15 $$ checkState(constantOperand.getType().equals(BOOLEAN), "Operand of IF function should be BOOLEAN type. Get type " + constantOperand.getType().getDisplayName())[ FD ]
Line_3 $$ ScalarFunctionImplementation function-->Line_40 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) [ FD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_4 $$ Signature signature = call.getSignature()[ CD ]
Line_41 $$ MethodHandle method = function.getMethodHandle()-->Line_56 $$ return constant(method.invokeWithArguments(constantArguments), call.getType())[ FD ]
Line_13 $$ if (optimizedOperand instanceof ConstantExpression) -->Line_14 $$ ConstantExpression constantOperand = (ConstantExpression) optimizedOperand[ CD ]
Line_4 $$ Signature signature = call.getSignature()-->Line_9 $$ switch(signature.getName()) [ FD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_17 $$ return call.getArguments().get(1).accept(this, context)[ FD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_39 $$ argument.accept(this, context)[ FD ]
Line_12 $$ RowExpression optimizedOperand = call.getArguments().get(0).accept(this, context)-->Line_13 $$ if (optimizedOperand instanceof ConstantExpression) [ FD ]
Line_45 $$ int index = 0-->Line_49 $$ if (value == null && !function.getNullableArguments().get(index)) [ FD ]
Line_43 $$ method = method.bindTo(session)-->Line_56 $$ return constant(method.invokeWithArguments(constantArguments), call.getType())[ FD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_40 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) [ CD ]
Line_46 $$ List<Object> constantArguments = new ArrayList()-->Line_56 $$ return constant(method.invokeWithArguments(constantArguments), call.getType())[ FD ]
Line_7 $$ function = registry.getScalarFunctionImplementation(functionSignature)-->Line_40 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) [ FD ]
Line_36 $$ function = registry.getScalarFunctionImplementation(signature)-->Line_40 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) [ FD ]
Line_14 $$ ConstantExpression constantOperand = (ConstantExpression) optimizedOperand-->Line_16 $$ if (Boolean.TRUE.equals(constantOperand.getValue())) [ FD ]
Line_3 $$ ScalarFunctionImplementation function-->Line_36 $$ function = registry.getScalarFunctionImplementation(signature)[ FD ]
Line_4 $$ Signature signature = call.getSignature()-->Line_36 $$ function = registry.getScalarFunctionImplementation(signature)[ FD ]
Line_33 $$ List<RowExpression> arguments = call.getArguments().stream().map( argument -> argument.accept(this, null)).collect(toImmutableList())-->Line_40 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) [ FD ]
Line_3 $$ ScalarFunctionImplementation function-->Line_49 $$ if (value == null && !function.getNullableArguments().get(index)) [ FD ]
Line_7 $$ function = registry.getScalarFunctionImplementation(functionSignature)-->Line_41 $$ MethodHandle method = function.getMethodHandle()[ FD ]
Line_7 $$ function = registry.getScalarFunctionImplementation(functionSignature)-->Line_49 $$ if (value == null && !function.getNullableArguments().get(index)) [ FD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_20 $$ return call.getArguments().get(2).accept(this, context)[ FD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_34 $$ return call(signature, call.getType(), arguments)[ FD ]
Line_16 $$ if (Boolean.TRUE.equals(constantOperand.getValue())) -->Line_20 $$ return call.getArguments().get(2).accept(this, context)[ CD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_39 $$ List<RowExpression> arguments = call.getArguments().stream().map( argument -> argument.accept(this, context)).collect(toImmutableList())[ CD ]
Line_40 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) -->Line_41 $$ MethodHandle method = function.getMethodHandle()[ CD ]
Line_16 $$ if (Boolean.TRUE.equals(constantOperand.getValue())) -->Line_17 $$ return call.getArguments().get(1).accept(this, context)[ CD ]
Line_36 $$ function = registry.getScalarFunctionImplementation(signature)-->Line_49 $$ if (value == null && !function.getNullableArguments().get(index)) [ FD ]
Line_48 $$ Object value = ((ConstantExpression) argument).getValue()-->Line_52 $$ constantArguments.add(value)[ FD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_56 $$ return constant(method.invokeWithArguments(constantArguments), call.getType())[ FD ]
Line_5 $$ if (signature.getName().equals(CAST)) -->Line_7 $$ function = registry.getScalarFunctionImplementation(functionSignature)[ CD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_11 $$ checkState(call.getArguments().size() == 3, "IF function should have 3 arguments. Get " + call.getArguments().size())[ FD ]
Line_7 $$ function = registry.getScalarFunctionImplementation(functionSignature)-->Line_36 $$ function = registry.getScalarFunctionImplementation(signature)[ FD ]
Line_6 $$ Signature functionSignature = registry.getCoercion(call.getArguments().get(0).getType(), call.getType())-->Line_7 $$ function = registry.getScalarFunctionImplementation(functionSignature)[ FD ]
Line_46 $$ List<Object> constantArguments = new ArrayList()-->Line_52 $$ constantArguments.add(value)[ FD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_4 $$ Signature signature = call.getSignature()[ FD ]
Line_45 $$ int index = 0-->Line_53 $$ index++[ FD ]
Line_3 $$ ScalarFunctionImplementation function-->Line_7 $$ function = registry.getScalarFunctionImplementation(functionSignature)[ FD ]
Line_41 $$ MethodHandle method = function.getMethodHandle()-->Line_42 $$ if (method.type().parameterCount() > 0 && method.type().parameterType(0) == ConnectorSession.class) [ FD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_3 $$ ScalarFunctionImplementation function[ CD ]
Line_33 $$ List<RowExpression> arguments = call.getArguments().stream().map( argument -> argument.accept(this, null)).collect(toImmutableList())-->Line_63 $$ return call(signature, typeManager.getType(signature.getReturnType()), arguments)[ FD ]
Line_33 $$ List<RowExpression> arguments = call.getArguments().stream().map( argument -> argument.accept(this, null)).collect(toImmutableList())-->Line_34 $$ return call(signature, call.getType(), arguments)[ FD ]
Line_49 $$ if (value == null && !function.getNullableArguments().get(index)) -->Line_50 $$ return constantNull(call.getType())[ CD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_33 $$ List<RowExpression> arguments = call.getArguments().stream().map( argument -> argument.accept(this, null)).collect(toImmutableList())[ FD ]
Line_4 $$ Signature signature = call.getSignature()-->Line_5 $$ if (signature.getName().equals(CAST)) [ FD ]
Line_3 $$ ScalarFunctionImplementation function-->Line_41 $$ MethodHandle method = function.getMethodHandle()[ FD ]
Line_4 $$ Signature signature = call.getSignature()-->Line_63 $$ return call(signature, typeManager.getType(signature.getReturnType()), arguments)[ FD ]
Line_40 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) -->Line_45 $$ int index = 0[ CD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_39 $$ List<RowExpression> arguments = call.getArguments().stream().map( argument -> argument.accept(this, context)).collect(toImmutableList())[ FD ]
Line_58 $$ if (e instanceof InterruptedException) -->Line_59 $$ Thread.currentThread().interrupt()[ CD ]
Line_42 $$ if (method.type().parameterCount() > 0 && method.type().parameterType(0) == ConnectorSession.class) -->Line_43 $$ method = method.bindTo(session)[ CD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_12 $$ RowExpression optimizedOperand = call.getArguments().get(0).accept(this, context)[ FD ]
Line_13 $$ if (optimizedOperand instanceof ConstantExpression) -->Line_16 $$ if (Boolean.TRUE.equals(constantOperand.getValue())) [ CD ]
Line_4 $$ Signature signature = call.getSignature()-->Line_34 $$ return call(signature, call.getType(), arguments)[ FD ]
Line_40 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) -->Line_46 $$ List<Object> constantArguments = new ArrayList()[ CD ]
Line_2 $$ public RowExpression visitCall(CallExpression call, Void context) -->Line_5 $$ if (signature.getName().equals(CAST)) [ CD ]
