Line_15 $$ if (optimizedOperand instanceof ConstantExpression) -->Line_18 $$ if (Boolean.TRUE.equals(constantOperand.getValue())) [ CD ]
Line_6 $$ if (signature.getName().equals(CAST)) -->Line_8 $$ function = registry.getScalarFunctionImplementation(functionSignature)[ CD ]
Line_4 $$ ScalarFunctionImplementation function-->Line_42 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) [ FD ]
Line_42 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) -->Line_47 $$ int index = 0[ CD ]
Line_35 $$ List<RowExpression> arguments = call.getArguments().stream().map( argument -> argument.accept(this, null)).collect(toImmutableList())-->Line_67 $$ return call(signature, typeManager.getType(signature.getReturnType()), arguments)[ FD ]
Line_61 $$ if (e instanceof InterruptedException) -->Line_62 $$ Thread.currentThread().interrupt()[ CD ]
Line_16 $$ ConstantExpression constantOperand = (ConstantExpression) optimizedOperand-->Line_17 $$ checkState(constantOperand.getType().equals(BOOLEAN), "Operand of IF function should be BOOLEAN type. Get type " + constantOperand.getType().getDisplayName())[ FD ]
Line_35 $$ List<RowExpression> arguments = call.getArguments().stream().map( argument -> argument.accept(this, null)).collect(toImmutableList())-->Line_42 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) [ FD ]
Line_5 $$ Signature signature = call.getSignature()-->Line_38 $$ function = registry.getScalarFunctionImplementation(signature)[ FD ]
Line_4 $$ ScalarFunctionImplementation function-->Line_8 $$ function = registry.getScalarFunctionImplementation(functionSignature)[ FD ]
Line_16 $$ ConstantExpression constantOperand = (ConstantExpression) optimizedOperand-->Line_18 $$ if (Boolean.TRUE.equals(constantOperand.getValue())) [ FD ]
Line_48 $$ List<Object> constantArguments = new ArrayList()-->Line_59 $$ return constant(method.invokeWithArguments(constantArguments), call.getType())[ FD ]
Line_15 $$ if (optimizedOperand instanceof ConstantExpression) -->Line_17 $$ checkState(constantOperand.getType().equals(BOOLEAN), "Operand of IF function should be BOOLEAN type. Get type " + constantOperand.getType().getDisplayName())[ CD ]
Line_8 $$ function = registry.getScalarFunctionImplementation(functionSignature)-->Line_38 $$ function = registry.getScalarFunctionImplementation(signature)[ FD ]
Line_4 $$ ScalarFunctionImplementation function-->Line_38 $$ function = registry.getScalarFunctionImplementation(signature)[ FD ]
Line_7 $$ Signature functionSignature = registry.getCoercion(call.getArguments().get(0).getType(), call.getType())-->Line_8 $$ function = registry.getScalarFunctionImplementation(functionSignature)[ FD ]
Line_4 $$ ScalarFunctionImplementation function-->Line_43 $$ MethodHandle method = function.getMethodHandle()[ FD ]
Line_42 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) -->Line_44 $$ if (method.type().parameterCount() > 0 && method.type().parameterType(0) == ConnectorSession.class) [ CD ]
Line_50 $$ Object value = ((ConstantExpression) argument).getValue()-->Line_55 $$ constantArguments.add(value)[ FD ]
Line_42 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) -->Line_43 $$ MethodHandle method = function.getMethodHandle()[ CD ]
Line_48 $$ List<Object> constantArguments = new ArrayList()-->Line_55 $$ constantArguments.add(value)[ FD ]
Line_38 $$ function = registry.getScalarFunctionImplementation(signature)-->Line_43 $$ MethodHandle method = function.getMethodHandle()[ FD ]
Line_8 $$ function = registry.getScalarFunctionImplementation(functionSignature)-->Line_43 $$ MethodHandle method = function.getMethodHandle()[ FD ]
Line_44 $$ if (method.type().parameterCount() > 0 && method.type().parameterType(0) == ConnectorSession.class) -->Line_45 $$ method = method.bindTo(session)[ CD ]
Line_45 $$ method = method.bindTo(session)-->Line_59 $$ return constant(method.invokeWithArguments(constantArguments), call.getType())[ FD ]
Line_8 $$ function = registry.getScalarFunctionImplementation(functionSignature)-->Line_42 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) [ FD ]
Line_18 $$ if (Boolean.TRUE.equals(constantOperand.getValue())) -->Line_22 $$ return call.getArguments().get(2).accept(this, context)[ CD ]
Line_5 $$ Signature signature = call.getSignature()-->Line_6 $$ if (signature.getName().equals(CAST)) [ FD ]
Line_5 $$ Signature signature = call.getSignature()-->Line_10 $$ switch(signature.getName()) [ FD ]
Line_47 $$ int index = 0-->Line_56 $$ index++[ FD ]
Line_38 $$ function = registry.getScalarFunctionImplementation(signature)-->Line_42 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) [ FD ]
Line_42 $$ if (Iterables.all(arguments, instanceOf(ConstantExpression.class)) && function.isDeterministic()) -->Line_48 $$ List<Object> constantArguments = new ArrayList()[ CD ]
Line_14 $$ RowExpression optimizedOperand = call.getArguments().get(0).accept(this, context)-->Line_15 $$ if (optimizedOperand instanceof ConstantExpression) [ FD ]
Line_35 $$ List<RowExpression> arguments = call.getArguments().stream().map( argument -> argument.accept(this, null)).collect(toImmutableList())-->Line_36 $$ return call(signature, call.getType(), arguments)[ FD ]
Line_5 $$ Signature signature = call.getSignature()-->Line_36 $$ return call(signature, call.getType(), arguments)[ FD ]
Line_6 $$ if (signature.getName().equals(CAST)) -->Line_7 $$ Signature functionSignature = registry.getCoercion(call.getArguments().get(0).getType(), call.getType())[ CD ]
Line_43 $$ MethodHandle method = function.getMethodHandle()-->Line_44 $$ if (method.type().parameterCount() > 0 && method.type().parameterType(0) == ConnectorSession.class) [ FD ]
Line_15 $$ if (optimizedOperand instanceof ConstantExpression) -->Line_16 $$ ConstantExpression constantOperand = (ConstantExpression) optimizedOperand[ CD ]
Line_43 $$ MethodHandle method = function.getMethodHandle()-->Line_45 $$ method = method.bindTo(session)[ FD ]
Line_5 $$ Signature signature = call.getSignature()-->Line_67 $$ return call(signature, typeManager.getType(signature.getReturnType()), arguments)[ FD ]
Line_43 $$ MethodHandle method = function.getMethodHandle()-->Line_59 $$ return constant(method.invokeWithArguments(constantArguments), call.getType())[ FD ]
Line_18 $$ if (Boolean.TRUE.equals(constantOperand.getValue())) -->Line_19 $$ return call.getArguments().get(1).accept(this, context)[ CD ]
