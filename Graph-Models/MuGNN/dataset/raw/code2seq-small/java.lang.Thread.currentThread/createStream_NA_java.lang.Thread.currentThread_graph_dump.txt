Line_4 $$ return new PrintStream(new OutputStream() -->Line_27 $$ if (line.size() > 0) [ CD ]
Line_4 $$ return new PrintStream(new OutputStream() -->Line_8 $$ if (Thread.currentThread() != thread) [ CD ]
Line_23 $$ if (Thread.currentThread() != thread) -->Line_24 $$ overridden.flush()[ CD ]
Line_23 $$ if (Thread.currentThread() != thread) -->Line_25 $$ return[ CD ]
Line_4 $$ return new PrintStream(new OutputStream() -->Line_20 $$ return b == '\n' || b == '\r'[ CD ]
Line_4 $$ return new PrintStream(new OutputStream() -->Line_23 $$ if (Thread.currentThread() != thread) [ CD ]
Line_4 $$ return new PrintStream(new OutputStream() -->Line_9 $$ overridden.write(b)[ FD ]
Line_8 $$ if (Thread.currentThread() != thread) -->Line_10 $$ return[ CD ]
Line_3 $$ final Thread thread = Thread.currentThread()-->Line_8 $$ if (Thread.currentThread() != thread) [ FD ]
Line_27 $$ if (line.size() > 0) -->Line_30 $$ hasLineSeparator = false[ CD ]
Line_2 $$ private static PrintStream createStream(final GroovycOutputParser parser, final Key type, final PrintStream overridden) -->Line_28 $$ parser.notifyTextAvailable(StringUtil.convertLineSeparators(line.toString()), type)[ FD ]
Line_2 $$ private static PrintStream createStream(final GroovycOutputParser parser, final Key type, final PrintStream overridden) -->Line_9 $$ overridden.write(b)[ FD ]
Line_8 $$ if (Thread.currentThread() != thread) -->Line_9 $$ overridden.write(b)[ CD ]
Line_2 $$ private static PrintStream createStream(final GroovycOutputParser parser, final Key type, final PrintStream overridden) -->Line_4 $$ return new PrintStream(new OutputStream() [ CD ]
Line_4 $$ return new PrintStream(new OutputStream() -->Line_17 $$ line.write(b)[ FD ]
Line_27 $$ if (line.size() > 0) -->Line_28 $$ parser.notifyTextAvailable(StringUtil.convertLineSeparators(line.toString()), type)[ CD ]
Line_4 $$ return new PrintStream(new OutputStream() -->Line_12 $$ if (hasLineSeparator && !isLineSeparator(b)) [ FD ]
Line_2 $$ private static PrintStream createStream(final GroovycOutputParser parser, final Key type, final PrintStream overridden) -->Line_24 $$ overridden.flush()[ FD ]
Line_4 $$ return new PrintStream(new OutputStream() -->Line_15 $$ hasLineSeparator |= isLineSeparator(b)[ FD ]
Line_2 $$ private static PrintStream createStream(final GroovycOutputParser parser, final Key type, final PrintStream overridden) -->Line_3 $$ final Thread thread = Thread.currentThread()[ CD ]
Line_4 $$ return new PrintStream(new OutputStream() -->Line_17 $$ line.write(b)[ CD ]
Line_12 $$ if (hasLineSeparator && !isLineSeparator(b)) -->Line_15 $$ hasLineSeparator |= isLineSeparator(b)[ CD ]
Line_12 $$ if (hasLineSeparator && !isLineSeparator(b)) -->Line_13 $$ flush()[ CD ]
Line_3 $$ final Thread thread = Thread.currentThread()-->Line_23 $$ if (Thread.currentThread() != thread) [ FD ]
Line_4 $$ return new PrintStream(new OutputStream() -->Line_12 $$ if (hasLineSeparator && !isLineSeparator(b)) [ CD ]
Line_15 $$ hasLineSeparator |= isLineSeparator(b)-->Line_30 $$ hasLineSeparator = false[ FD ]
