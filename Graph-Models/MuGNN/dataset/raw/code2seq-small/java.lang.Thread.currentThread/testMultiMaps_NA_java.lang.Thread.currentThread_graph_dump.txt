Line_3 $$ Job job = Job.getInstance()-->Line_16 $$ FileInputFormat.addInputPath(job, inputPath)[ FD ]
Line_37 $$ for (int i = 0; i < 10; i++) -->Line_39 $$ ReflectionUtils.logThreadInfo(LOG, "multimap threads", 0)[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_12 $$ job.setReducerClass(CountingReducer.class)[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_8 $$ if (fs.exists(outputPath)) [ CD ]
Line_8 $$ if (fs.exists(outputPath)) -->Line_9 $$ fs.delete(outputPath, true)[ CD ]
Line_3 $$ Job job = Job.getInstance()-->Line_15 $$ job.getConfiguration().set(MRJobConfig.IO_SORT_MB, "25")[ FD ]
Line_37 $$ for (int i = 0; i < 10; i++) -->Line_40 $$ Thread.sleep(1000)[ CD ]
Line_37 $$ for (int i = 0; i < 10; i++) -->Line_38 $$ LOG.fatal("Dumping stacks")[ CD ]
Line_19 $$ Thread interrupter = new Thread() -->Line_45 $$ interrupter.interrupt()[ FD ]
Line_4 $$ Path inputPath = createMultiMapsInput()-->Line_16 $$ FileInputFormat.addInputPath(job, inputPath)[ FD ]
Line_5 $$ Path outputPath = getOutputPath()-->Line_9 $$ fs.delete(outputPath, true)[ FD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_17 $$ FileOutputFormat.setOutputPath(job, outputPath)[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_28 $$ LOG.info("Submitting job...")[ CD ]
Line_3 $$ Job job = Job.getInstance()-->Line_12 $$ job.setReducerClass(CountingReducer.class)[ FD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_31 $$ interrupter.start()[ CD ]
Line_5 $$ Path outputPath = getOutputPath()-->Line_17 $$ FileOutputFormat.setOutputPath(job, outputPath)[ FD ]
Line_3 $$ Job job = Job.getInstance()-->Line_17 $$ FileOutputFormat.setOutputPath(job, outputPath)[ FD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_6 $$ Configuration conf = new Configuration()[ CD ]
Line_5 $$ Path outputPath = getOutputPath()-->Line_8 $$ if (fs.exists(outputPath)) [ FD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_19 $$ Thread interrupter = new Thread() [ CD ]
Line_19 $$ Thread interrupter = new Thread() -->Line_31 $$ interrupter.start()[ FD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_18 $$ final Thread toInterrupt = Thread.currentThread()[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_3 $$ Job job = Job.getInstance()[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_16 $$ FileInputFormat.addInputPath(job, inputPath)[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_29 $$ job.submit()[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_30 $$ LOG.info("Starting thread to interrupt main thread in 2 minutes")[ CD ]
Line_3 $$ Job job = Job.getInstance()-->Line_14 $$ LocalJobRunner.setLocalMaxRunningMaps(job, 6)[ FD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_45 $$ interrupter.interrupt()[ CD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_7 $$ FileSystem fs = FileSystem.getLocal(conf)[ FD ]
Line_5 $$ Path outputPath = getOutputPath()-->Line_51 $$ verifyOutput(outputPath)[ FD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_5 $$ Path outputPath = getOutputPath()[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_32 $$ LOG.info("Waiting for job to complete...")[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_13 $$ job.setNumReduceTasks(1)[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_7 $$ FileSystem fs = FileSystem.getLocal(conf)[ CD ]
Line_3 $$ Job job = Job.getInstance()-->Line_34 $$ job.waitForCompletion(true)[ FD ]
Line_18 $$ final Thread toInterrupt = Thread.currentThread()-->Line_23 $$ toInterrupt.interrupt()[ FD ]
Line_7 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_9 $$ fs.delete(outputPath, true)[ FD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_11 $$ job.setMapperClass(StressMapper.class)[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_44 $$ LOG.info("Job completed, stopping interrupter")[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_50 $$ LOG.info("Verifying output")[ CD ]
Line_3 $$ Job job = Job.getInstance()-->Line_13 $$ job.setNumReduceTasks(1)[ FD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_14 $$ LocalJobRunner.setLocalMaxRunningMaps(job, 6)[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_4 $$ Path inputPath = createMultiMapsInput()[ CD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_15 $$ job.getConfiguration().set(MRJobConfig.IO_SORT_MB, "25")[ CD ]
Line_7 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_8 $$ if (fs.exists(outputPath)) [ FD ]
Line_3 $$ Job job = Job.getInstance()-->Line_29 $$ job.submit()[ FD ]
Line_2 $$ public void testMultiMaps() throws Exception -->Line_51 $$ verifyOutput(outputPath)[ CD ]
Line_19 $$ Thread interrupter = new Thread() -->Line_47 $$ interrupter.join()[ FD ]
Line_3 $$ Job job = Job.getInstance()-->Line_11 $$ job.setMapperClass(StressMapper.class)[ FD ]
