Line_44 $$ for (int i = 0; i < 10; i++) -->Line_46 $$ ReflectionUtils.logThreadInfo(LOG, "multimap threads", 0)[ CD ]
Line_8 $$ Job job = Job.getInstance()-->Line_22 $$ FileOutputFormat.setOutputPath(job, outputPath)[ FD ]
Line_9 $$ Path inputPath = createMultiMapsInput()-->Line_21 $$ FileInputFormat.addInputPath(job, inputPath)[ FD ]
Line_44 $$ for (int i = 0; i < 10; i++) -->Line_47 $$ Thread.sleep(1000)[ CD ]
Line_8 $$ Job job = Job.getInstance()-->Line_19 $$ LocalJobRunner.setLocalMaxRunningMaps(job, 6)[ FD ]
Line_13 $$ if (fs.exists(outputPath)) -->Line_14 $$ fs.delete(outputPath, true)[ CD ]
Line_10 $$ Path outputPath = getOutputPath()-->Line_14 $$ fs.delete(outputPath, true)[ FD ]
Line_10 $$ Path outputPath = getOutputPath()-->Line_59 $$ verifyOutput(outputPath)[ FD ]
Line_10 $$ Path outputPath = getOutputPath()-->Line_13 $$ if (fs.exists(outputPath)) [ FD ]
Line_24 $$ Thread interrupter = new Thread() -->Line_38 $$ interrupter.start()[ FD ]
Line_12 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_14 $$ fs.delete(outputPath, true)[ FD ]
Line_8 $$ Job job = Job.getInstance()-->Line_20 $$ job.getConfiguration().set(MRJobConfig.IO_SORT_MB, "25")[ FD ]
Line_24 $$ Thread interrupter = new Thread() -->Line_52 $$ interrupter.interrupt()[ FD ]
Line_8 $$ Job job = Job.getInstance()-->Line_17 $$ job.setReducerClass(CountingReducer.class)[ FD ]
Line_44 $$ for (int i = 0; i < 10; i++) -->Line_45 $$ LOG.fatal("Dumping stacks")[ CD ]
Line_12 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_13 $$ if (fs.exists(outputPath)) [ FD ]
Line_8 $$ Job job = Job.getInstance()-->Line_41 $$ job.waitForCompletion(true)[ FD ]
Line_8 $$ Job job = Job.getInstance()-->Line_16 $$ job.setMapperClass(StressMapper.class)[ FD ]
Line_24 $$ Thread interrupter = new Thread() -->Line_54 $$ interrupter.join()[ FD ]
Line_8 $$ Job job = Job.getInstance()-->Line_21 $$ FileInputFormat.addInputPath(job, inputPath)[ FD ]
Line_8 $$ Job job = Job.getInstance()-->Line_18 $$ job.setNumReduceTasks(1)[ FD ]
Line_10 $$ Path outputPath = getOutputPath()-->Line_22 $$ FileOutputFormat.setOutputPath(job, outputPath)[ FD ]
Line_23 $$ final Thread toInterrupt = Thread.currentThread()-->Line_30 $$ toInterrupt.interrupt()[ FD ]
Line_11 $$ Configuration conf = new Configuration()-->Line_12 $$ FileSystem fs = FileSystem.getLocal(conf)[ FD ]
Line_8 $$ Job job = Job.getInstance()-->Line_36 $$ job.submit()[ FD ]
