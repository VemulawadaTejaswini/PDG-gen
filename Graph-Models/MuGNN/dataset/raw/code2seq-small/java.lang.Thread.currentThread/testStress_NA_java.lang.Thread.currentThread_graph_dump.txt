Line_2 $$ public void testStress() throws Throwable -->Line_32 $$ if (e != null) [ CD ]
Line_2 $$ public void testStress() throws Throwable -->Line_30 $$ latch.await()[ CD ]
Line_5 $$ final AtomicReference<Throwable> exception = new AtomicReference()-->Line_21 $$ exception.set(e)[ FD ]
Line_2 $$ public void testStress() throws Throwable -->Line_8 $$ List<Thread> threads = new ArrayList()[ CD ]
Line_9 $$ for (int i = 0; i < threadsNumber; i++) -->Line_10 $$ Thread thread = new Thread(String.valueOf(i)) [ FD ]
Line_8 $$ List<Thread> threads = new ArrayList()-->Line_28 $$ threads.add(thread)[ FD ]
Line_5 $$ final AtomicReference<Throwable> exception = new AtomicReference()-->Line_31 $$ final Throwable e = exception.get()[ FD ]
Line_13 $$ int remains = iterationsNumber-->Line_14 $$ while (remains-- > 0) [ FD ]
Line_2 $$ public void testStress() throws Throwable -->Line_9 $$ for (int i = 0; i < threadsNumber; i++) [ CD ]
Line_5 $$ final AtomicReference<Throwable> exception = new AtomicReference()-->Line_15 $$ if (exception.get() != null) [ FD ]
Line_2 $$ public void testStress() throws Throwable -->Line_6 $$ final CountDownLatch latch = new CountDownLatch(threadsNumber)[ CD ]
Line_2 $$ public void testStress() throws Throwable -->Line_4 $$ final int iterationsNumber = 100[ CD ]
Line_9 $$ for (int i = 0; i < threadsNumber; i++) -->Line_28 $$ threads.add(thread)[ CD ]
Line_10 $$ Thread thread = new Thread(String.valueOf(i)) -->Line_28 $$ threads.add(thread)[ FD ]
Line_9 $$ for (int i = 0; i < threadsNumber; i++) -->Line_10 $$ Thread thread = new Thread(String.valueOf(i)) [ CD ]
Line_2 $$ public void testStress() throws Throwable -->Line_7 $$ final MessageBus parentBus = MessageBusFactory.newMessageBus("parent")[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(threadsNumber)-->Line_23 $$ latch.countDown()[ FD ]
Line_9 $$ for (int i = 0; i < threadsNumber; i++) -->Line_27 $$ thread.start()[ CD ]
Line_2 $$ public void testStress() throws Throwable -->Line_31 $$ final Throwable e = exception.get()[ CD ]
Line_2 $$ public void testStress() throws Throwable -->Line_5 $$ final AtomicReference<Throwable> exception = new AtomicReference()[ CD ]
Line_14 $$ while (remains-- > 0) -->Line_15 $$ if (exception.get() != null) [ CD ]
Line_10 $$ Thread thread = new Thread(String.valueOf(i)) -->Line_36 $$ thread.join()[ FD ]
Line_3 $$ final int threadsNumber = 10-->Line_9 $$ for (int i = 0; i < threadsNumber; i++) [ FD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(threadsNumber)-->Line_30 $$ latch.await()[ FD ]
Line_10 $$ Thread thread = new Thread(String.valueOf(i)) -->Line_27 $$ thread.start()[ FD ]
Line_2 $$ public void testStress() throws Throwable -->Line_3 $$ final int threadsNumber = 10[ CD ]
Line_13 $$ int remains = iterationsNumber-->Line_18 $$ new MessageBusImpl(String.format("child-%s-%s", Thread.currentThread().getName(), remains), parentBus)[ FD ]
