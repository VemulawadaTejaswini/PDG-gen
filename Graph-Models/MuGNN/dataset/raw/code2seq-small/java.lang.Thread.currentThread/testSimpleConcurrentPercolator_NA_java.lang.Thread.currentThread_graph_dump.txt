Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_9 $$ final BytesReference onlyField1 = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1", 1).endObject().endObject().bytes()[ CD ]
Line_17 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_29 $$ start.await()[ FD ]
Line_18 $$ final AtomicBoolean stop = new AtomicBoolean(false)-->Line_33 $$ stop.set(true)[ FD ]
Line_40 $$ if (count % 3 == 1) -->Line_46 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ CD ]
Line_45 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()-->Line_39 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContainingInAnyOrder("test1", "test2"))[ FD ]
Line_11 $$ final BytesReference bothFields = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1", 1).field("field2", "value").endObject().endObject().bytes()-->Line_37 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()[ FD ]
Line_20 $$ final AtomicReference<Throwable> exceptionHolder = new AtomicReference()-->Line_65 $$ Throwable assertionError = exceptionHolder.get()[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_20 $$ final AtomicReference<Throwable> exceptionHolder = new AtomicReference()[ CD ]
Line_37 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_43 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test1"))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_8 $$ ensureGreen()[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_21 $$ Thread[] threads = new Thread[scaledRandomIntBetween(2, 5)][ CD ]
Line_45 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()-->Line_38 $$ assertThat(percolate.getMatches(), arrayWithSize(2))[ FD ]
Line_9 $$ final BytesReference onlyField1 = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1", 1).endObject().endObject().bytes()-->Line_45 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()[ FD ]
Line_35 $$ PercolateResponse percolate-->Line_39 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContainingInAnyOrder("test1", "test2"))[ FD ]
Line_37 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_46 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_23 $$ for (int i = 0; i < threads.length; i++) -->Line_24 $$ Runnable r = new Runnable() [ CD ]
Line_41 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_42 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_40 $$ if (count % 3 == 1) -->Line_42 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ CD ]
Line_41 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_45 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()[ FD ]
Line_37 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_39 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContainingInAnyOrder("test1", "test2"))[ FD ]
Line_18 $$ final AtomicBoolean stop = new AtomicBoolean(false)-->Line_30 $$ while (!stop.get()) [ FD ]
Line_20 $$ final AtomicReference<Throwable> exceptionHolder = new AtomicReference()-->Line_53 $$ exceptionHolder.set(e)[ FD ]
Line_30 $$ while (!stop.get()) -->Line_31 $$ int count = counts.incrementAndGet()[ CD ]
Line_17 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_61 $$ start.countDown()[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_10 $$ final BytesReference onlyField2 = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field2", "value").endObject().endObject().bytes()[ CD ]
Line_41 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_39 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContainingInAnyOrder("test1", "test2"))[ FD ]
Line_23 $$ for (int i = 0; i < threads.length; i++) -->Line_58 $$ threads[i] = new Thread(r)[ CD ]
Line_36 $$ if (count % 3 == 0) -->Line_40 $$ if (count % 3 == 1) [ CD ]
Line_40 $$ if (count % 3 == 1) -->Line_43 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test1"))[ CD ]
Line_35 $$ PercolateResponse percolate-->Line_37 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()[ FD ]
Line_35 $$ PercolateResponse percolate-->Line_42 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_22 $$ final int numberOfPercolations = scaledRandomIntBetween(1000, 10000)[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_61 $$ start.countDown()[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_69 $$ assertThat(assertionError + " should be null", assertionError, nullValue())[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_13 $$ client().prepareIndex("index", PercolatorService.TYPE_NAME, "test1").setSource(XContentFactory.jsonBuilder().startObject().field("query", termQuery("field2", "value")).endObject()).execute().actionGet()[ CD ]
Line_45 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()-->Line_42 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_37 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_45 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_19 $$ final AtomicInteger counts = new AtomicInteger(0)[ CD ]
Line_36 $$ if (count % 3 == 0) -->Line_37 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()[ CD ]
Line_30 $$ while (!stop.get()) -->Line_35 $$ PercolateResponse percolate[ CD ]
Line_23 $$ for (int i = 0; i < threads.length; i++) -->Line_59 $$ threads[i].start()[ CD ]
Line_45 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()-->Line_47 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test2"))[ FD ]
Line_40 $$ if (count % 3 == 1) -->Line_41 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_12 $$ client().prepareIndex("index", "type", "1").setSource(XContentFactory.jsonBuilder().startObject().field("field1", 1).field("field2", "value").endObject()).execute().actionGet()[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_17 $$ final CountDownLatch start = new CountDownLatch(1)[ CD ]
Line_37 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_47 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test2"))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_66 $$ if (assertionError != null) [ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_18 $$ final AtomicBoolean stop = new AtomicBoolean(false)[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_14 $$ client().prepareIndex("index", PercolatorService.TYPE_NAME, "test2").setSource(XContentFactory.jsonBuilder().startObject().field("query", termQuery("field1", 1)).endObject()).execute().actionGet()[ CD ]
Line_30 $$ while (!stop.get()) -->Line_32 $$ if ((count > numberOfPercolations)) [ CD ]
Line_37 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_42 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_35 $$ PercolateResponse percolate-->Line_38 $$ assertThat(percolate.getMatches(), arrayWithSize(2))[ FD ]
Line_36 $$ if (count % 3 == 0) -->Line_39 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContainingInAnyOrder("test1", "test2"))[ CD ]
Line_66 $$ if (assertionError != null) -->Line_67 $$ assertionError.printStackTrace()[ CD ]
Line_19 $$ final AtomicInteger counts = new AtomicInteger(0)-->Line_31 $$ int count = counts.incrementAndGet()[ FD ]
Line_32 $$ if ((count > numberOfPercolations)) -->Line_33 $$ stop.set(true)[ CD ]
Line_41 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_47 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test2"))[ FD ]
Line_35 $$ PercolateResponse percolate-->Line_46 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_30 $$ while (!stop.get()) -->Line_36 $$ if (count % 3 == 0) [ CD ]
Line_35 $$ PercolateResponse percolate-->Line_41 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()[ FD ]
Line_41 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_46 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_41 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_43 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test1"))[ FD ]
Line_35 $$ PercolateResponse percolate-->Line_47 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test2"))[ FD ]
Line_35 $$ PercolateResponse percolate-->Line_45 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()[ FD ]
Line_41 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_38 $$ assertThat(percolate.getMatches(), arrayWithSize(2))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_11 $$ final BytesReference bothFields = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1", 1).field("field2", "value").endObject().endObject().bytes()[ CD ]
Line_36 $$ if (count % 3 == 0) -->Line_38 $$ assertThat(percolate.getMatches(), arrayWithSize(2))[ CD ]
Line_45 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()-->Line_43 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test1"))[ FD ]
Line_40 $$ if (count % 3 == 1) -->Line_45 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()[ CD ]
Line_10 $$ final BytesReference onlyField2 = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field2", "value").endObject().endObject().bytes()-->Line_41 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_23 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_40 $$ if (count % 3 == 1) -->Line_47 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test2"))[ CD ]
Line_45 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()-->Line_46 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_37 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_41 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()[ FD ]
Line_35 $$ PercolateResponse percolate-->Line_43 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test1"))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_65 $$ Throwable assertionError = exceptionHolder.get()[ CD ]
Line_37 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_38 $$ assertThat(percolate.getMatches(), arrayWithSize(2))[ FD ]
