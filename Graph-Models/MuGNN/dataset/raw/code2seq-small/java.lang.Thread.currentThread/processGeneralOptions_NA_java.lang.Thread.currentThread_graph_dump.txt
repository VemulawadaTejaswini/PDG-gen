Line_28 $$ if (libjars != null && libjars.length > 0) -->Line_29 $$ conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()))[ CD ]
Line_24 $$ if (line.hasOption("libjars")) -->Line_25 $$ conf.set("tmpjars", validateFiles(line.getOptionValue("libjars"), conf), "from -libjars command line option")[ CD ]
Line_12 $$ String optionValue = line.getOptionValue("jt")-->Line_16 $$ conf.set("yarn.resourcemanager.address", optionValue, "from -jt command line option")[ FD ]
Line_11 $$ if (line.hasOption("jt")) -->Line_16 $$ conf.set("yarn.resourcemanager.address", optionValue, "from -jt command line option")[ CD ]
Line_11 $$ if (line.hasOption("jt")) -->Line_13 $$ if (optionValue.equalsIgnoreCase("local")) [ CD ]
Line_39 $$ if (line.hasOption('D')) -->Line_40 $$ String[] property = line.getOptionValues('D')[ CD ]
Line_11 $$ if (line.hasOption("jt")) -->Line_12 $$ String optionValue = line.getOptionValue("jt")[ CD ]
Line_43 $$ if (keyval.length == 2) -->Line_44 $$ conf.set(keyval[0], keyval[1], "from command line")[ CD ]
Line_33 $$ if (line.hasOption("files")) -->Line_34 $$ conf.set("tmpfiles", validateFiles(line.getOptionValue("files"), conf), "from -files command line option")[ CD ]
Line_12 $$ String optionValue = line.getOptionValue("jt")-->Line_14 $$ conf.set("mapreduce.framework.name", optionValue)[ FD ]
Line_36 $$ if (line.hasOption("archives")) -->Line_37 $$ conf.set("tmparchives", validateFiles(line.getOptionValue("archives"), conf), "from -archives command line option")[ CD ]
Line_54 $$ Path p = localFs.makeQualified(new Path(fileName))-->Line_61 $$ UserGroupInformation.getCurrentUser().addCredentials(Credentials.readTokenStorageFile(p, conf))[ FD ]
Line_54 $$ Path p = localFs.makeQualified(new Path(fileName))-->Line_55 $$ if (!localFs.exists(p)) [ FD ]
Line_18 $$ if (line.hasOption("conf")) -->Line_19 $$ String[] values = line.getOptionValues("conf")[ CD ]
Line_12 $$ String optionValue = line.getOptionValue("jt")-->Line_13 $$ if (optionValue.equalsIgnoreCase("local")) [ FD ]
Line_54 $$ Path p = localFs.makeQualified(new Path(fileName))-->Line_62 $$ conf.set("mapreduce.job.credentials.json", p.toString(), "from -tokenCacheFile command line option")[ FD ]
Line_24 $$ if (line.hasOption("libjars")) -->Line_28 $$ if (libjars != null && libjars.length > 0) [ CD ]
Line_8 $$ if (line.hasOption("fs")) -->Line_9 $$ FileSystem.setDefaultUri(conf, line.getOptionValue("fs"))[ CD ]
Line_28 $$ if (libjars != null && libjars.length > 0) -->Line_30 $$ Thread.currentThread().setContextClassLoader(new URLClassLoader(libjars, Thread.currentThread().getContextClassLoader()))[ CD ]
Line_13 $$ if (optionValue.equalsIgnoreCase("local")) -->Line_14 $$ conf.set("mapreduce.framework.name", optionValue)[ CD ]
Line_41 $$ for (String prop : property) -->Line_42 $$ String[] keyval = prop.split("=", 2)[ FD ]
Line_58 $$ if (LOG.isDebugEnabled()) -->Line_59 $$ LOG.debug("setting conf tokensFile: " + fileName)[ CD ]
