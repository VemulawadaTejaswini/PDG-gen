Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_16 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.STS_TOKEN_USE_CERT_FOR_KEYINFO), "true")[ CD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_9 $$ ctx.put(SecurityConstants.ENCRYPT_USERNAME, "myservicekey")[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_6 $$ ctx.put(SecurityConstants.SIGNATURE_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ CD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_15 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.STS_TOKEN_PROPERTIES), Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ FD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_17 $$ ctx.put(SecurityConstants.STS_CLIENT, stsClient)[ FD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_14 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.STS_TOKEN_USERNAME), "myclientkey")[ FD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_16 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.STS_TOKEN_USE_CERT_FOR_KEYINFO), "true")[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_4 $$ STSClient stsClient = new STSClient(bus)[ CD ]
Line_4 $$ STSClient stsClient = new STSClient(bus)-->Line_17 $$ ctx.put(SecurityConstants.STS_CLIENT, stsClient)[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()[ CD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_12 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.ENCRYPT_PROPERTIES), Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_15 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.STS_TOKEN_PROPERTIES), Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ CD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_7 $$ ctx.put(SecurityConstants.ENCRYPT_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()[ FD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_5 $$ ctx.put(SecurityConstants.CALLBACK_HANDLER, new ClientCallbackHandler())[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_12 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.ENCRYPT_PROPERTIES), Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_10 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.USERNAME), "alice")[ CD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_10 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.USERNAME), "alice")[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_13 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.ENCRYPT_USERNAME), "mystskey")[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_11 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.CALLBACK_HANDLER), new ClientCallbackHandler())[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_7 $$ ctx.put(SecurityConstants.ENCRYPT_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_5 $$ ctx.put(SecurityConstants.CALLBACK_HANDLER, new ClientCallbackHandler())[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_9 $$ ctx.put(SecurityConstants.ENCRYPT_USERNAME, "myservicekey")[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_8 $$ ctx.put(SecurityConstants.SIGNATURE_USERNAME, "myclientkey")[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_17 $$ ctx.put(SecurityConstants.STS_CLIENT, stsClient)[ CD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_11 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.CALLBACK_HANDLER), new ClientCallbackHandler())[ FD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_6 $$ ctx.put(SecurityConstants.SIGNATURE_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientBearer(BindingProvider proxy, Bus bus) -->Line_14 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.STS_TOKEN_USERNAME), "myclientkey")[ CD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_8 $$ ctx.put(SecurityConstants.SIGNATURE_USERNAME, "myclientkey")[ FD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_13 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.ENCRYPT_USERNAME), "mystskey")[ FD ]
