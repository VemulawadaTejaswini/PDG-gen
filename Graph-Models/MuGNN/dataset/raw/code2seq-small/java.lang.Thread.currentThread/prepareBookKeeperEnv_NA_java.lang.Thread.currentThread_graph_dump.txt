Line_8 $$ if (KeeperException.Code.OK.intValue() == rc || KeeperException.Code.NODEEXISTS.intValue() == rc) -->Line_10 $$ success.set(true)[ CD ]
Line_6 $$ StringCallback callback = new StringCallback() -->Line_13 $$ LOG.error("Error : " + KeeperException.create(code, path).getMessage() + ", failed to create bookie available path : " + zkAvailablePath)[ FD ]
Line_6 $$ StringCallback callback = new StringCallback() -->Line_8 $$ if (KeeperException.Code.OK.intValue() == rc || KeeperException.Code.NODEEXISTS.intValue() == rc) [ CD ]
Line_2 $$ private void prepareBookKeeperEnv() throws IOException -->Line_3 $$ final String zkAvailablePath = conf.get(BKJM_ZK_LEDGERS_AVAILABLE_PATH, BKJM_ZK_LEDGERS_AVAILABLE_PATH_DEFAULT)[ CD ]
Line_12 $$ KeeperException.Code code = KeeperException.Code.get(rc)-->Line_13 $$ LOG.error("Error : " + KeeperException.create(code, path).getMessage() + ", failed to create bookie available path : " + zkAvailablePath)[ FD ]
Line_8 $$ if (KeeperException.Code.OK.intValue() == rc || KeeperException.Code.NODEEXISTS.intValue() == rc) -->Line_9 $$ LOG.info("Successfully created bookie available path : " + zkAvailablePath)[ CD ]
Line_6 $$ StringCallback callback = new StringCallback() -->Line_15 $$ zkPathLatch.countDown()[ CD ]
Line_2 $$ private void prepareBookKeeperEnv() throws IOException -->Line_6 $$ StringCallback callback = new StringCallback() [ CD ]
Line_3 $$ final String zkAvailablePath = conf.get(BKJM_ZK_LEDGERS_AVAILABLE_PATH, BKJM_ZK_LEDGERS_AVAILABLE_PATH_DEFAULT)-->Line_18 $$ ZkUtils.asyncCreateFullPathOptimistic(zkc, zkAvailablePath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, callback, null)[ FD ]
Line_4 $$ final CountDownLatch zkPathLatch = new CountDownLatch(1)-->Line_20 $$ if (!zkPathLatch.await(zkc.getSessionTimeout(), TimeUnit.MILLISECONDS) || !success.get()) [ FD ]
Line_5 $$ final AtomicBoolean success = new AtomicBoolean(false)-->Line_20 $$ if (!zkPathLatch.await(zkc.getSessionTimeout(), TimeUnit.MILLISECONDS) || !success.get()) [ FD ]
Line_4 $$ final CountDownLatch zkPathLatch = new CountDownLatch(1)-->Line_15 $$ zkPathLatch.countDown()[ FD ]
Line_2 $$ private void prepareBookKeeperEnv() throws IOException -->Line_18 $$ ZkUtils.asyncCreateFullPathOptimistic(zkc, zkAvailablePath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, callback, null)[ CD ]
Line_8 $$ if (KeeperException.Code.OK.intValue() == rc || KeeperException.Code.NODEEXISTS.intValue() == rc) -->Line_13 $$ LOG.error("Error : " + KeeperException.create(code, path).getMessage() + ", failed to create bookie available path : " + zkAvailablePath)[ CD ]
Line_2 $$ private void prepareBookKeeperEnv() throws IOException -->Line_4 $$ final CountDownLatch zkPathLatch = new CountDownLatch(1)[ CD ]
Line_6 $$ StringCallback callback = new StringCallback() -->Line_12 $$ KeeperException.Code code = KeeperException.Code.get(rc)[ FD ]
Line_2 $$ private void prepareBookKeeperEnv() throws IOException -->Line_5 $$ final AtomicBoolean success = new AtomicBoolean(false)[ CD ]
Line_5 $$ final AtomicBoolean success = new AtomicBoolean(false)-->Line_10 $$ success.set(true)[ FD ]
Line_8 $$ if (KeeperException.Code.OK.intValue() == rc || KeeperException.Code.NODEEXISTS.intValue() == rc) -->Line_12 $$ KeeperException.Code code = KeeperException.Code.get(rc)[ CD ]
Line_6 $$ StringCallback callback = new StringCallback() -->Line_18 $$ ZkUtils.asyncCreateFullPathOptimistic(zkc, zkAvailablePath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, callback, null)[ FD ]
