Line_2 $$ public boolean runBombed(final Runnable runnable) -->Line_6 $$ final Semaphore finished = new Semaphore()[ CD ]
Line_2 $$ public boolean runBombed(final Runnable runnable) -->Line_5 $$ canStart.down()[ CD ]
Line_11 $$ ProgressManager.getInstance().runProcess(new Runnable() -->Line_13 $$ mockIndicator.cancel()[ CD ]
Line_2 $$ public boolean runBombed(final Runnable runnable) -->Line_25 $$ ProgressManager.getInstance().runProcess(new Runnable() [ CD ]
Line_25 $$ ProgressManager.getInstance().runProcess(new Runnable() -->Line_27 $$ canStart.waitFor()[ CD ]
Line_2 $$ public boolean runBombed(final Runnable runnable) -->Line_29 $$ runnable.run()[ FD ]
Line_4 $$ final Semaphore canStart = new Semaphore()-->Line_27 $$ canStart.waitFor()[ FD ]
Line_6 $$ final Semaphore finished = new Semaphore()-->Line_7 $$ finished.down()[ FD ]
Line_10 $$ final ProgressIndicatorBase mockIndicator = new ProgressIndicatorBase()-->Line_11 $$ ProgressManager.getInstance().runProcess(new Runnable() [ FD ]
Line_2 $$ public boolean runBombed(final Runnable runnable) -->Line_8 $$ Future<?> future = ApplicationManager.getApplication().executeOnPooledThread(new Runnable() [ CD ]
Line_11 $$ ProgressManager.getInstance().runProcess(new Runnable() -->Line_14 $$ canStart.up()[ CD ]
Line_2 $$ public boolean runBombed(final Runnable runnable) -->Line_43 $$ return isCanceled()[ CD ]
Line_2 $$ public boolean runBombed(final Runnable runnable) -->Line_4 $$ final Semaphore canStart = new Semaphore()[ CD ]
Line_8 $$ Future<?> future = ApplicationManager.getApplication().executeOnPooledThread(new Runnable() -->Line_11 $$ ProgressManager.getInstance().runProcess(new Runnable() [ CD ]
Line_10 $$ final ProgressIndicatorBase mockIndicator = new ProgressIndicatorBase()-->Line_13 $$ mockIndicator.cancel()[ FD ]
Line_11 $$ ProgressManager.getInstance().runProcess(new Runnable() -->Line_15 $$ finished.waitFor()[ CD ]
Line_6 $$ final Semaphore finished = new Semaphore()-->Line_32 $$ finished.up()[ FD ]
Line_2 $$ public boolean runBombed(final Runnable runnable) -->Line_7 $$ finished.down()[ CD ]
Line_6 $$ final Semaphore finished = new Semaphore()-->Line_15 $$ finished.waitFor()[ FD ]
Line_4 $$ final Semaphore canStart = new Semaphore()-->Line_14 $$ canStart.up()[ FD ]
Line_4 $$ final Semaphore canStart = new Semaphore()-->Line_5 $$ canStart.down()[ FD ]
Line_2 $$ public boolean runBombed(final Runnable runnable) -->Line_3 $$ myThread = Thread.currentThread()[ CD ]
Line_8 $$ Future<?> future = ApplicationManager.getApplication().executeOnPooledThread(new Runnable() -->Line_37 $$ future.get()[ FD ]
Line_8 $$ Future<?> future = ApplicationManager.getApplication().executeOnPooledThread(new Runnable() -->Line_10 $$ final ProgressIndicatorBase mockIndicator = new ProgressIndicatorBase()[ CD ]
