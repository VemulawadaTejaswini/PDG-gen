Line_3 $$ if (isLight(project)) -->Line_11 $$ if (!isProjectOpened(project))[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_23 $$ if (checkCanClose && !ensureCouldCloseIfUnableToSave(project)) [ FD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_3 $$ if (isLight(project)) [ CD ]
Line_16 $$ final ShutDownTracker shutDownTracker = ShutDownTracker.getInstance()-->Line_37 $$ shutDownTracker.unregisterStopperThread(Thread.currentThread())[ FD ]
Line_4 $$ if (!((ProjectImpl) project).isTemporarilyDisposed()) -->Line_5 $$ ((ProjectImpl) project).setTemporarilyDisposed(true)[ CD ]
Line_11 $$ if (!isProjectOpened(project))-->Line_12 $$ return true[ CD ]
Line_4 $$ if (!((ProjectImpl) project).isTemporarilyDisposed()) -->Line_6 $$ removeFromOpened(project)[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_16 $$ final ShutDownTracker shutDownTracker = ShutDownTracker.getInstance()[ CD ]
Line_23 $$ if (checkCanClose && !ensureCouldCloseIfUnableToSave(project)) -->Line_24 $$ return false[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_14 $$ if (checkCanClose && !canClose(project))[ CD ]
Line_19 $$ if (save) -->Line_21 $$ project.save()[ CD ]
Line_3 $$ if (isLight(project)) -->Line_4 $$ if (!((ProjectImpl) project).isTemporarilyDisposed()) [ CD ]
Line_27 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_30 $$ fireProjectClosed(project)[ CD ]
Line_16 $$ final ShutDownTracker shutDownTracker = ShutDownTracker.getInstance()-->Line_17 $$ shutDownTracker.registerStopperThread(Thread.currentThread())[ FD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_39 $$ return true[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_14 $$ if (checkCanClose && !canClose(project))[ FD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_17 $$ shutDownTracker.registerStopperThread(Thread.currentThread())[ CD ]
Line_19 $$ if (save) -->Line_20 $$ FileDocumentManager.getInstance().saveAllDocuments()[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_32 $$ Disposer.dispose(project)[ FD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_6 $$ removeFromOpened(project)[ FD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_3 $$ if (isLight(project)) [ FD ]
Line_3 $$ if (isLight(project)) -->Line_9 $$ ((ProjectImpl) project).setTemporarilyDisposed(false)[ CD ]
Line_14 $$ if (checkCanClose && !canClose(project))-->Line_15 $$ return false[ CD ]
Line_31 $$ if (dispose) -->Line_32 $$ Disposer.dispose(project)[ CD ]
Line_27 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_31 $$ if (dispose) [ CD ]
Line_4 $$ if (!((ProjectImpl) project).isTemporarilyDisposed()) -->Line_7 $$ return true[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_26 $$ fireProjectClosing(project)[ FD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_21 $$ project.save()[ FD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_29 $$ removeFromOpened(project)[ FD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_30 $$ fireProjectClosed(project)[ FD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_11 $$ if (!isProjectOpened(project))[ FD ]
Line_27 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_29 $$ removeFromOpened(project)[ CD ]
