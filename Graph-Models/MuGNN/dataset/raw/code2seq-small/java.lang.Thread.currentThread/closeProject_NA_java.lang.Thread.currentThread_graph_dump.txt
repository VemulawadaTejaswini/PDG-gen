Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_3 $$ if (isLight(project)) [ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_36 $$ Disposer.dispose(project)[ FD ]
Line_12 $$ if (!isProjectOpened(project))-->Line_13 $$ return true[ CD ]
Line_24 $$ if (checkCanClose && !ensureCouldCloseIfUnableToSave(project)) -->Line_25 $$ return false[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_18 $$ shutDownTracker.registerStopperThread(Thread.currentThread())[ CD ]
Line_17 $$ final ShutDownTracker shutDownTracker = ShutDownTracker.getInstance()-->Line_41 $$ shutDownTracker.unregisterStopperThread(Thread.currentThread())[ FD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_12 $$ if (!isProjectOpened(project))[ FD ]
Line_15 $$ if (checkCanClose && !canClose(project))-->Line_16 $$ return false[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_7 $$ removeFromOpened(project)[ FD ]
Line_29 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_35 $$ if (dispose) [ CD ]
Line_35 $$ if (dispose) -->Line_36 $$ Disposer.dispose(project)[ CD ]
Line_29 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_34 $$ fireProjectClosed(project)[ CD ]
Line_20 $$ if (save) -->Line_22 $$ project.save()[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_15 $$ if (checkCanClose && !canClose(project))[ FD ]
Line_3 $$ if (isLight(project)) -->Line_12 $$ if (!isProjectOpened(project))[ CD ]
Line_3 $$ if (isLight(project)) -->Line_10 $$ ((ProjectImpl) project).setTemporarilyDisposed(false)[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_33 $$ removeFromOpened(project)[ FD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_24 $$ if (checkCanClose && !ensureCouldCloseIfUnableToSave(project)) [ FD ]
Line_17 $$ final ShutDownTracker shutDownTracker = ShutDownTracker.getInstance()-->Line_18 $$ shutDownTracker.registerStopperThread(Thread.currentThread())[ FD ]
Line_20 $$ if (save) -->Line_21 $$ FileDocumentManager.getInstance().saveAllDocuments()[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_15 $$ if (checkCanClose && !canClose(project))[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_34 $$ fireProjectClosed(project)[ FD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_43 $$ return true[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_17 $$ final ShutDownTracker shutDownTracker = ShutDownTracker.getInstance()[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_22 $$ project.save()[ FD ]
Line_29 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_33 $$ removeFromOpened(project)[ CD ]
Line_2 $$ public boolean closeProject(@NotNull final Project project, final boolean save, final boolean dispose, boolean checkCanClose) -->Line_3 $$ if (isLight(project)) [ FD ]
