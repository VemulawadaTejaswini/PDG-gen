Line_4 $$ Stat baseStat = null-->Line_6 $$ if ((baseStat = zkc.exists(basePath, false)) != null) [ FD ]
Line_5 $$ Stat ledgerStat = null-->Line_7 $$ if ((ledgerStat = zkc.exists(ledgerPath, false)) != null) [ FD ]
Line_6 $$ if ((baseStat = zkc.exists(basePath, false)) != null) -->Line_7 $$ if ((ledgerStat = zkc.exists(ledgerPath, false)) != null) [ CD ]
Line_19 $$ VersionProto.Builder builder = VersionProto.newBuilder()-->Line_21 $$ byte[] data = TextFormat.printToString(builder.build()).getBytes(UTF_8)[ FD ]
Line_8 $$ for (EditLogLedgerMetadata l : getLedgerList(true)) -->Line_10 $$ bkc.deleteLedger(l.getLedgerId())[ FD ]
Line_8 $$ for (EditLogLedgerMetadata l : getLedgerList(true)) -->Line_12 $$ LOG.warn("Ledger " + l.getLedgerId() + " does not exist;" + " Cannot delete.")[ FD ]
Line_2 $$ public void format(NamespaceInfo ns) throws IOException -->Line_20 $$ builder.setNamespaceInfo(PBHelper.convert(ns)).setLayoutVersion(BKJM_LAYOUT_VERSION)[ FD ]
Line_19 $$ VersionProto.Builder builder = VersionProto.newBuilder()-->Line_20 $$ builder.setNamespaceInfo(PBHelper.convert(ns)).setLayoutVersion(BKJM_LAYOUT_VERSION)[ FD ]
Line_21 $$ byte[] data = TextFormat.printToString(builder.build()).getBytes(UTF_8)-->Line_22 $$ zkc.create(versionPath, data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT)[ FD ]
Line_6 $$ if ((baseStat = zkc.exists(basePath, false)) != null) -->Line_16 $$ ZKUtil.deleteRecursive(zkc, basePath)[ CD ]
