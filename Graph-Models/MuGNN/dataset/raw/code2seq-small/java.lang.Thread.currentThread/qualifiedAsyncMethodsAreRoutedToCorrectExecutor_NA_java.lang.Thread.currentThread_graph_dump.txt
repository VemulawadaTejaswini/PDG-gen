Line_21 $$ ListenableFuture<Thread> e1Thread = obj.e1Work()-->Line_22 $$ assertThat(e1Thread.get().getName(), startsWith("e1-"))[ FD ]
Line_18 $$ Future<Thread> defaultThread = obj.defaultWork()-->Line_19 $$ assertThat(defaultThread.get(), not(Thread.currentThread()))[ FD ]
Line_14 $$ DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory()-->Line_16 $$ AnnotationAsyncExecutionAspect.aspectOf().setBeanFactory(beanFactory)[ FD ]
Line_17 $$ ClassWithQualifiedAsyncMethods obj = new ClassWithQualifiedAsyncMethods()-->Line_18 $$ Future<Thread> defaultThread = obj.defaultWork()[ FD ]
Line_17 $$ ClassWithQualifiedAsyncMethods obj = new ClassWithQualifiedAsyncMethods()-->Line_23 $$ CompletableFuture<Thread> e1OtherThread = obj.e1OtherWork()[ FD ]
Line_23 $$ CompletableFuture<Thread> e1OtherThread = obj.e1OtherWork()-->Line_24 $$ assertThat(e1OtherThread.get().getName(), startsWith("e1-"))[ FD ]
Line_18 $$ Future<Thread> defaultThread = obj.defaultWork()-->Line_20 $$ assertThat(defaultThread.get().getName(), not(startsWith("e1-")))[ FD ]
Line_14 $$ DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory()-->Line_15 $$ beanFactory.registerBeanDefinition("e1", new RootBeanDefinition(ThreadPoolTaskExecutor.class))[ FD ]
Line_17 $$ ClassWithQualifiedAsyncMethods obj = new ClassWithQualifiedAsyncMethods()-->Line_21 $$ ListenableFuture<Thread> e1Thread = obj.e1Work()[ FD ]
