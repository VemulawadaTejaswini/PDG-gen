Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_4 $$ Future<State> futureChange = stateMachine.getStateChange(initialState)[ FD ]
Line_5 $$ SettableFuture<State> listenerChange = SettableFuture.create()-->Line_30 $$ assertEquals(listenerChange.isDone(), isTerminalState)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_31 $$ listenerChange.cancel(true)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_16 $$ boolean isTerminalState = stateMachine.isTerminalState(initialState)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_18 $$ assertEquals(stateMachine.getStateChangeListeners(), ImmutableSet.of())[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_6 $$ stateMachine.addStateChangeListener(listenerChange::<>set)[ FD ]
Line_3 $$ State initialState = stateMachine.get()-->Line_16 $$ boolean isTerminalState = stateMachine.isTerminalState(initialState)[ FD ]
Line_4 $$ Future<State> futureChange = stateMachine.getStateChange(initialState)-->Line_28 $$ assertEquals(futureChange.isDone(), isTerminalState)[ FD ]
Line_7 $$ Future<State> waitChange = executor.submit(() -> -->Line_35 $$ assertEquals(waitChange.isDone(), isTerminalState)[ FD ]
Line_17 $$ if (isTerminalState) -->Line_18 $$ assertEquals(stateMachine.getStateChangeListeners(), ImmutableSet.of())[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_35 $$ assertEquals(waitChange.isDone(), isTerminalState)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_28 $$ assertEquals(futureChange.isDone(), isTerminalState)[ CD ]
Line_3 $$ State initialState = stateMachine.get()-->Line_4 $$ Future<State> futureChange = stateMachine.getStateChange(initialState)[ FD ]
Line_32 $$ if (isTerminalState) -->Line_33 $$ tryGetFutureValue(waitChange, 1, SECONDS)[ CD ]
Line_3 $$ State initialState = stateMachine.get()-->Line_9 $$ stateMachine.waitForStateChange(initialState, new Duration(10, SECONDS))[ FD ]
Line_7 $$ Future<State> waitChange = executor.submit(() -> -->Line_23 $$ waitChange.get(50, MILLISECONDS)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_3 $$ State initialState = stateMachine.get()[ CD ]
Line_7 $$ Future<State> waitChange = executor.submit(() -> -->Line_36 $$ waitChange.cancel(true)[ FD ]
Line_3 $$ State initialState = stateMachine.get()-->Line_21 $$ assertEquals(stateMachine.get(), initialState)[ FD ]
Line_16 $$ boolean isTerminalState = stateMachine.isTerminalState(initialState)-->Line_35 $$ assertEquals(waitChange.isDone(), isTerminalState)[ FD ]
Line_16 $$ boolean isTerminalState = stateMachine.isTerminalState(initialState)-->Line_30 $$ assertEquals(listenerChange.isDone(), isTerminalState)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_21 $$ assertEquals(stateMachine.get(), initialState)[ CD ]
Line_7 $$ Future<State> waitChange = executor.submit(() -> -->Line_33 $$ tryGetFutureValue(waitChange, 1, SECONDS)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_17 $$ if (isTerminalState) [ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_32 $$ if (isTerminalState) [ CD ]
Line_16 $$ boolean isTerminalState = stateMachine.isTerminalState(initialState)-->Line_28 $$ assertEquals(futureChange.isDone(), isTerminalState)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_3 $$ State initialState = stateMachine.get()[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_6 $$ stateMachine.addStateChangeListener(listenerChange::<>set)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_20 $$ stateChange.run()[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_5 $$ SettableFuture<State> listenerChange = SettableFuture.create()[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_20 $$ stateChange.run()[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_30 $$ assertEquals(listenerChange.isDone(), isTerminalState)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_7 $$ Future<State> waitChange = executor.submit(() -> [ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_21 $$ assertEquals(stateMachine.get(), initialState)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_29 $$ futureChange.cancel(true)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_4 $$ Future<State> futureChange = stateMachine.getStateChange(initialState)[ CD ]
Line_5 $$ SettableFuture<State> listenerChange = SettableFuture.create()-->Line_31 $$ listenerChange.cancel(true)[ FD ]
Line_4 $$ Future<State> futureChange = stateMachine.getStateChange(initialState)-->Line_29 $$ futureChange.cancel(true)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_10 $$ return stateMachine.get()[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_36 $$ waitChange.cancel(true)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_16 $$ boolean isTerminalState = stateMachine.isTerminalState(initialState)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_9 $$ stateMachine.waitForStateChange(initialState, new Duration(10, SECONDS))[ FD ]
