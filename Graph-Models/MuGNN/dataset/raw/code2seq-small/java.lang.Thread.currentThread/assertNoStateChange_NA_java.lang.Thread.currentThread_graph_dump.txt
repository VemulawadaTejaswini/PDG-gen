Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_3 $$ State initialState = stateMachine.get()[ CD ]
Line_3 $$ State initialState = stateMachine.get()-->Line_9 $$ stateMachine.waitForStateChange(initialState, new Duration(10, SECONDS))[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_38 $$ if (isTerminalState) [ CD ]
Line_7 $$ Future<State> waitChange = executor.submit(() -> -->Line_43 $$ waitChange.cancel(true)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_10 $$ return stateMachine.get()[ FD ]
Line_4 $$ Future<State> futureChange = stateMachine.getStateChange(initialState)-->Line_35 $$ futureChange.cancel(true)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_35 $$ futureChange.cancel(true)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_22 $$ assertEquals(stateMachine.get(), initialState)[ CD ]
Line_5 $$ SettableFuture<State> listenerChange = SettableFuture.create()-->Line_37 $$ listenerChange.cancel(true)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_6 $$ stateMachine.addStateChangeListener(listenerChange::<>set)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_22 $$ assertEquals(stateMachine.get(), initialState)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_43 $$ waitChange.cancel(true)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_37 $$ listenerChange.cancel(true)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_21 $$ stateChange.run()[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_6 $$ stateMachine.addStateChangeListener(listenerChange::<>set)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_42 $$ assertEquals(waitChange.isDone(), isTerminalState)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_19 $$ assertEquals(stateMachine.getStateChangeListeners(), ImmutableSet.of())[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_4 $$ Future<State> futureChange = stateMachine.getStateChange(initialState)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_3 $$ State initialState = stateMachine.get()[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_7 $$ Future<State> waitChange = executor.submit(() -> [ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_21 $$ stateChange.run()[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_4 $$ Future<State> futureChange = stateMachine.getStateChange(initialState)[ FD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_5 $$ SettableFuture<State> listenerChange = SettableFuture.create()[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_36 $$ assertEquals(listenerChange.isDone(), isTerminalState)[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_18 $$ if (isTerminalState) [ CD ]
Line_18 $$ if (isTerminalState) -->Line_19 $$ assertEquals(stateMachine.getStateChangeListeners(), ImmutableSet.of())[ CD ]
Line_2 $$ private void assertNoStateChange(StateMachine<State> stateMachine, StateChanger stateChange) throws Exception -->Line_9 $$ stateMachine.waitForStateChange(initialState, new Duration(10, SECONDS))[ FD ]
Line_7 $$ Future<State> waitChange = executor.submit(() -> -->Line_42 $$ assertEquals(waitChange.isDone(), isTerminalState)[ FD ]
Line_5 $$ SettableFuture<State> listenerChange = SettableFuture.create()-->Line_36 $$ assertEquals(listenerChange.isDone(), isTerminalState)[ FD ]
Line_3 $$ State initialState = stateMachine.get()-->Line_22 $$ assertEquals(stateMachine.get(), initialState)[ FD ]
Line_3 $$ State initialState = stateMachine.get()-->Line_4 $$ Future<State> futureChange = stateMachine.getStateChange(initialState)[ FD ]
