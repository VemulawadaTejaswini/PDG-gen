Line_7 $$ Object hikariDataSource = hikariDataSourceClazz.newInstance()-->Line_33 $$ BeanUtil.setProperty(hikariDataSource, key, value)[ FD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_5 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()[ CD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_8 $$ for (Map.Entry<Object, Object> entry : properties.entrySet()) [ FD ]
Line_9 $$ String key = (String) entry.getKey()-->Line_13 $$ key = "jdbcUrl"[ FD ]
Line_8 $$ for (Map.Entry<Object, Object> entry : properties.entrySet()) -->Line_10 $$ String value = (String) entry.getValue()[ FD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_4 $$ Thread currentThread = Thread.currentThread()[ CD ]
Line_9 $$ String key = (String) entry.getKey()-->Line_33 $$ BeanUtil.setProperty(hikariDataSource, key, value)[ FD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_6 $$ Class<?> hikariDataSourceClazz = contextClassLoader.loadClass(_HIKARICP_DATASOURCE_CLASS_NAME)[ CD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_7 $$ Object hikariDataSource = hikariDataSourceClazz.newInstance()[ CD ]
Line_10 $$ String value = (String) entry.getValue()-->Line_33 $$ BeanUtil.setProperty(hikariDataSource, key, value)[ FD ]
Line_5 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()-->Line_6 $$ Class<?> hikariDataSourceClazz = contextClassLoader.loadClass(_HIKARICP_DATASOURCE_CLASS_NAME)[ FD ]
Line_13 $$ key = "jdbcUrl"-->Line_33 $$ BeanUtil.setProperty(hikariDataSource, key, value)[ FD ]
Line_6 $$ Class<?> hikariDataSourceClazz = contextClassLoader.loadClass(_HIKARICP_DATASOURCE_CLASS_NAME)-->Line_7 $$ Object hikariDataSource = hikariDataSourceClazz.newInstance()[ FD ]
Line_35 $$ if (_log.isWarnEnabled()) -->Line_36 $$ _log.warn("Property " + key + " is an invalid HikariCP property")[ CD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_41 $$ return (DataSource) hikariDataSource[ CD ]
Line_8 $$ for (Map.Entry<Object, Object> entry : properties.entrySet()) -->Line_9 $$ String key = (String) entry.getKey()[ FD ]
Line_4 $$ Thread currentThread = Thread.currentThread()-->Line_5 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()[ FD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_40 $$ registerConnectionPoolMetrics(new HikariConnectionPoolMetrics(hikariDataSource))[ CD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_3 $$ testLiferayPoolProviderClass(_HIKARICP_DATASOURCE_CLASS_NAME)[ CD ]
