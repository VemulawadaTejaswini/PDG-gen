Line_6 $$ WorkListener workListenerToUse = workListener-->Line_26 $$ workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))[ FD ]
Line_6 $$ WorkListener workListenerToUse = workListener-->Line_34 $$ workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))[ FD ]
Line_11 $$ DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)-->Line_14 $$ ((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)[ FD ]
Line_2 $$ protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) throws WorkException -->Line_36 $$ if (blockUntilStarted) [ CD ]
Line_19 $$ WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)-->Line_30 $$ wex.setErrorCode(WorkException.INTERNAL)[ FD ]
Line_40 $$ while (!workHandle.started) -->Line_41 $$ workHandle.monitor.wait()[ CD ]
Line_2 $$ protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) throws WorkException -->Line_4 $$ throw new WorkException("SimpleTaskWorkManager does not supported imported XIDs: " + executionContext.getXid())[ FD ]
Line_36 $$ if (blockUntilStarted) -->Line_47 $$ return (System.currentTimeMillis() - acceptanceTime)[ CD ]
Line_10 $$ boolean isAsync = (taskExecutor instanceof AsyncTaskExecutor)-->Line_11 $$ DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)[ FD ]
Line_2 $$ protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) throws WorkException -->Line_11 $$ DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)[ CD ]
Line_2 $$ protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) throws WorkException -->Line_33 $$ if (isAsync) [ CD ]
Line_33 $$ if (isAsync) -->Line_34 $$ workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))[ CD ]
Line_2 $$ protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) throws WorkException -->Line_6 $$ WorkListener workListenerToUse = workListener[ CD ]
Line_36 $$ if (blockUntilStarted) -->Line_37 $$ long acceptanceTime = System.currentTimeMillis()[ CD ]
Line_2 $$ protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) throws WorkException -->Line_7 $$ if (workListenerToUse == null) [ CD ]
Line_6 $$ WorkListener workListenerToUse = workListener-->Line_7 $$ if (workListenerToUse == null) [ FD ]
Line_13 $$ if (isAsync) -->Line_16 $$ taskExecutor.execute(workHandle)[ CD ]
Line_13 $$ if (isAsync) -->Line_14 $$ ((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)[ CD ]
Line_19 $$ WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)-->Line_20 $$ wex.setErrorCode(WorkException.START_TIMED_OUT)[ FD ]
Line_8 $$ workListenerToUse = new WorkAdapter()-->Line_26 $$ workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))[ FD ]
Line_7 $$ if (workListenerToUse == null) -->Line_8 $$ workListenerToUse = new WorkAdapter()[ CD ]
Line_8 $$ workListenerToUse = new WorkAdapter()-->Line_21 $$ workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))[ FD ]
Line_36 $$ if (blockUntilStarted) -->Line_49 $$ return WorkManager.UNKNOWN[ CD ]
Line_2 $$ protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) throws WorkException -->Line_14 $$ ((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)[ FD ]
Line_11 $$ DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)-->Line_16 $$ taskExecutor.execute(workHandle)[ FD ]
Line_8 $$ workListenerToUse = new WorkAdapter()-->Line_34 $$ workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))[ FD ]
Line_6 $$ WorkListener workListenerToUse = workListener-->Line_8 $$ workListenerToUse = new WorkAdapter()[ FD ]
Line_2 $$ protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) throws WorkException -->Line_3 $$ if (executionContext != null && executionContext.getXid() != null) [ CD ]
Line_2 $$ protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) throws WorkException -->Line_3 $$ if (executionContext != null && executionContext.getXid() != null) [ FD ]
Line_2 $$ protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) throws WorkException -->Line_10 $$ boolean isAsync = (taskExecutor instanceof AsyncTaskExecutor)[ CD ]
Line_19 $$ WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)-->Line_25 $$ wex.setErrorCode(WorkException.INTERNAL)[ FD ]
Line_2 $$ protected long executeWork(TaskExecutor taskExecutor, Work work, long startTimeout, boolean blockUntilStarted, ExecutionContext executionContext, WorkListener workListener) throws WorkException -->Line_16 $$ taskExecutor.execute(workHandle)[ FD ]
Line_6 $$ WorkListener workListenerToUse = workListener-->Line_21 $$ workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))[ FD ]
