Line_11 $$ for (int i = 0; i < numOfThreads; i++) -->Line_21 $$ threads.add(thread)[ CD ]
Line_6 $$ List<Thread> threads = new ArrayList()-->Line_21 $$ threads.add(thread)[ FD ]
Line_2 $$ private static void runReadWrites(final int readIterations, final int writeIterations, int expectedMs) throws InterruptedException -->Line_4 $$ Disposable disposable = Disposer.newDisposable()[ CD ]
Line_12 $$ Thread thread = new Thread(() -> -->Line_21 $$ threads.add(thread)[ FD ]
Line_3 $$ final ApplicationImpl application = (ApplicationImpl) ApplicationManager.getApplication()-->Line_15 $$ application.runReadAction(() -> [ FD ]
Line_4 $$ Disposable disposable = Disposer.newDisposable()-->Line_5 $$ application.disableEventsUntil(disposable)[ FD ]
Line_23 $$ if (writeIterations > 0) -->Line_29 $$ System.out.println("write end")[ CD ]
Line_2 $$ private static void runReadWrites(final int readIterations, final int writeIterations, int expectedMs) throws InterruptedException -->Line_5 $$ application.disableEventsUntil(disposable)[ CD ]
Line_9 $$ final int numOfThreads = JobSchedulerImpl.CORES_COUNT-->Line_11 $$ for (int i = 0; i < numOfThreads; i++) [ FD ]
Line_23 $$ if (writeIterations > 0) -->Line_24 $$ System.out.println("write start")[ CD ]
Line_23 $$ if (writeIterations > 0) -->Line_25 $$ for (int i = 0; i < writeIterations; i++) [ CD ]
Line_12 $$ Thread thread = new Thread(() -> -->Line_36 $$ thread.join()[ FD ]
Line_25 $$ for (int i = 0; i < writeIterations; i++) -->Line_26 $$ ApplicationManager.getApplication().runWriteAction(() -> [ CD ]
Line_11 $$ for (int i = 0; i < numOfThreads; i++) -->Line_12 $$ Thread thread = new Thread(() -> [ CD ]
Line_14 $$ for (int i1 = 0; i1 < readIterations; i1++) -->Line_15 $$ application.runReadAction(() -> [ CD ]
Line_35 $$ for (Thread thread : threads) -->Line_36 $$ thread.join()[ FD ]
Line_10 $$ final CountDownLatch reads = new CountDownLatch(numOfThreads)-->Line_31 $$ reads.await()[ FD ]
Line_2 $$ private static void runReadWrites(final int readIterations, final int writeIterations, int expectedMs) throws InterruptedException -->Line_8 $$ PlatformTestUtil.startPerformanceTest("lock performance", expectedMs, () -> [ FD ]
Line_2 $$ private static void runReadWrites(final int readIterations, final int writeIterations, int expectedMs) throws InterruptedException -->Line_25 $$ for (int i = 0; i < writeIterations; i++) [ FD ]
Line_2 $$ private static void runReadWrites(final int readIterations, final int writeIterations, int expectedMs) throws InterruptedException -->Line_14 $$ for (int i1 = 0; i1 < readIterations; i1++) [ FD ]
Line_2 $$ private static void runReadWrites(final int readIterations, final int writeIterations, int expectedMs) throws InterruptedException -->Line_3 $$ final ApplicationImpl application = (ApplicationImpl) ApplicationManager.getApplication()[ CD ]
Line_11 $$ for (int i = 0; i < numOfThreads; i++) -->Line_20 $$ thread.start()[ CD ]
Line_3 $$ final ApplicationImpl application = (ApplicationImpl) ApplicationManager.getApplication()-->Line_5 $$ application.disableEventsUntil(disposable)[ FD ]
Line_4 $$ Disposable disposable = Disposer.newDisposable()-->Line_34 $$ Disposer.dispose(disposable)[ FD ]
Line_10 $$ final CountDownLatch reads = new CountDownLatch(numOfThreads)-->Line_18 $$ reads.countDown()[ FD ]
Line_11 $$ for (int i = 0; i < numOfThreads; i++) -->Line_25 $$ for (int i = 0; i < writeIterations; i++) [ FD ]
Line_2 $$ private static void runReadWrites(final int readIterations, final int writeIterations, int expectedMs) throws InterruptedException -->Line_6 $$ List<Thread> threads = new ArrayList()[ CD ]
Line_12 $$ Thread thread = new Thread(() -> -->Line_20 $$ thread.start()[ FD ]
Line_2 $$ private static void runReadWrites(final int readIterations, final int writeIterations, int expectedMs) throws InterruptedException -->Line_23 $$ if (writeIterations > 0) [ FD ]
