Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_3 $$ conf.setBoolean(DFSConfigKeys.DFS_DATANODE_TRANSFERTO_ALLOWED_KEY, transferToAllowed)[ CD ]
Line_16 $$ if (syncType == SyncType.APPEND) -->Line_18 $$ outputStream = fileSystem.append(file)[ CD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_69 $$ tailer.start()[ CD ]
Line_16 $$ if (syncType == SyncType.APPEND) -->Line_17 $$ outputStream.close()[ CD ]
Line_18 $$ outputStream = fileSystem.append(file)-->Line_23 $$ outputStream.write(writeBuf)[ FD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_6 $$ final int numWrites = 2000[ CD ]
Line_21 $$ for (int i = 0; !error.get() && i < numWrites; i++) -->Line_24 $$ if (syncType == SyncType.SYNC) [ CD ]
Line_15 $$ FSDataOutputStream outputStream = fileSystem.create(file)-->Line_23 $$ outputStream.write(writeBuf)[ FD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_10 $$ final Thread writer = new Thread(new Runnable() [ CD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_3 $$ conf.setBoolean(DFSConfigKeys.DFS_DATANODE_TRANSFERTO_ALLOWED_KEY, transferToAllowed)[ FD ]
Line_21 $$ for (int i = 0; !error.get() && i < numWrites; i++) -->Line_27 $$ writerStarted.set(true)[ CD ]
Line_18 $$ outputStream = fileSystem.append(file)-->Line_33 $$ outputStream.close()[ FD ]
Line_10 $$ final Thread writer = new Thread(new Runnable() -->Line_62 $$ writer.interrupt()[ FD ]
Line_21 $$ for (int i = 0; !error.get() && i < numWrites; i++) -->Line_23 $$ outputStream.write(writeBuf)[ CD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_4 $$ init(conf)[ FD ]
Line_5 $$ final Path file = new Path("/block-being-written-to")-->Line_18 $$ outputStream = fileSystem.append(file)[ FD ]
Line_8 $$ final AtomicBoolean writerStarted = new AtomicBoolean(false)-->Line_27 $$ writerStarted.set(true)[ FD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_4 $$ init(conf)[ CD ]
Line_9 $$ final AtomicBoolean error = new AtomicBoolean(false)-->Line_73 $$ assertFalse("error occurred, see log above", error.get())[ FD ]
Line_7 $$ final AtomicBoolean writerDone = new AtomicBoolean(false)-->Line_48 $$ while (!writerDone.get() && !error.get()) [ FD ]
Line_9 $$ final AtomicBoolean error = new AtomicBoolean(false)-->Line_60 $$ error.set(true)[ FD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_24 $$ if (syncType == SyncType.SYNC) [ FD ]
Line_7 $$ final AtomicBoolean writerDone = new AtomicBoolean(false)-->Line_35 $$ writerDone.set(true)[ FD ]
Line_5 $$ final Path file = new Path("/block-being-written-to")-->Line_53 $$ LOG.error(String.format("error tailing file %s", file), e)[ FD ]
Line_9 $$ final AtomicBoolean error = new AtomicBoolean(false)-->Line_30 $$ error.set(true)[ FD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_5 $$ final Path file = new Path("/block-being-written-to")[ CD ]
Line_5 $$ final Path file = new Path("/block-being-written-to")-->Line_51 $$ startPos = tailFile(file, startPos)[ FD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_68 $$ writer.start()[ CD ]
Line_18 $$ outputStream = fileSystem.append(file)-->Line_25 $$ outputStream.hflush()[ FD ]
Line_10 $$ final Thread writer = new Thread(new Runnable() -->Line_68 $$ writer.start()[ FD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_7 $$ final AtomicBoolean writerDone = new AtomicBoolean(false)[ CD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_16 $$ if (syncType == SyncType.APPEND) [ FD ]
Line_21 $$ for (int i = 0; !error.get() && i < numWrites; i++) -->Line_22 $$ final byte[] writeBuf = DFSTestUtil.generateSequentialBytes(i * writeSize, writeSize)[ CD ]
Line_15 $$ FSDataOutputStream outputStream = fileSystem.create(file)-->Line_17 $$ outputStream.close()[ FD ]
Line_24 $$ if (syncType == SyncType.SYNC) -->Line_25 $$ outputStream.hflush()[ CD ]
Line_15 $$ FSDataOutputStream outputStream = fileSystem.create(file)-->Line_33 $$ outputStream.close()[ FD ]
Line_59 $$ if (e.getCause() instanceof ChecksumException) -->Line_60 $$ error.set(true)[ CD ]
Line_9 $$ final AtomicBoolean error = new AtomicBoolean(false)-->Line_48 $$ while (!writerDone.get() && !error.get()) [ FD ]
Line_5 $$ final Path file = new Path("/block-being-written-to")-->Line_15 $$ FSDataOutputStream outputStream = fileSystem.create(file)[ FD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_8 $$ final AtomicBoolean writerStarted = new AtomicBoolean(false)[ CD ]
Line_22 $$ final byte[] writeBuf = DFSTestUtil.generateSequentialBytes(i * writeSize, writeSize)-->Line_23 $$ outputStream.write(writeBuf)[ FD ]
Line_8 $$ final AtomicBoolean writerStarted = new AtomicBoolean(false)-->Line_49 $$ if (writerStarted.get()) [ FD ]
Line_47 $$ long startPos = 0-->Line_51 $$ startPos = tailFile(file, startPos)[ FD ]
Line_9 $$ final AtomicBoolean error = new AtomicBoolean(false)-->Line_21 $$ for (int i = 0; !error.get() && i < numWrites; i++) [ FD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_9 $$ final AtomicBoolean error = new AtomicBoolean(false)[ CD ]
Line_15 $$ FSDataOutputStream outputStream = fileSystem.create(file)-->Line_25 $$ outputStream.hflush()[ FD ]
Line_15 $$ FSDataOutputStream outputStream = fileSystem.create(file)-->Line_18 $$ outputStream = fileSystem.append(file)[ FD ]
Line_10 $$ final Thread writer = new Thread(new Runnable() -->Line_71 $$ writer.join()[ FD ]
Line_2 $$ private void runTestUnfinishedBlockCRCError(final boolean transferToAllowed, final SyncType syncType, final int writeSize, Configuration conf) throws IOException -->Line_22 $$ final byte[] writeBuf = DFSTestUtil.generateSequentialBytes(i * writeSize, writeSize)[ FD ]
Line_48 $$ while (!writerDone.get() && !error.get()) -->Line_49 $$ if (writerStarted.get()) [ CD ]
