Line_9 $$ while (true) -->Line_10 $$ Collection<Thread> threads = abstractQueuedSynchronizer.getQueuedThreads()[ CD ]
Line_2 $$ protected Future<?> actionOnMPIWaiting(final boolean countDownOrInterrupt) -->Line_26 $$ return futureTask[ CD ]
Line_11 $$ if (threads.contains(currentThread)) -->Line_12 $$ if (countDownOrInterrupt) [ CD ]
Line_8 $$ AbstractQueuedSynchronizer abstractQueuedSynchronizer = ReflectionTestUtil.getFieldValue(_mockRemoteSPI.countDownLatch, "sync")-->Line_10 $$ Collection<Thread> threads = abstractQueuedSynchronizer.getQueuedThreads()[ FD ]
Line_4 $$ FutureTask<?> futureTask = new FutureTask(new Callable<Object>() -->Line_8 $$ AbstractQueuedSynchronizer abstractQueuedSynchronizer = ReflectionTestUtil.getFieldValue(_mockRemoteSPI.countDownLatch, "sync")[ CD ]
Line_9 $$ while (true) -->Line_11 $$ if (threads.contains(currentThread)) [ CD ]
Line_3 $$ final Thread currentThread = Thread.currentThread()-->Line_11 $$ if (threads.contains(currentThread)) [ FD ]
Line_3 $$ final Thread currentThread = Thread.currentThread()-->Line_16 $$ currentThread.interrupt()[ FD ]
Line_10 $$ Collection<Thread> threads = abstractQueuedSynchronizer.getQueuedThreads()-->Line_11 $$ if (threads.contains(currentThread)) [ FD ]
Line_13 $$ CountDownLatch countDownLatch = _mockRemoteSPI.countDownLatch-->Line_14 $$ countDownLatch.countDown()[ FD ]
Line_4 $$ FutureTask<?> futureTask = new FutureTask(new Callable<Object>() -->Line_9 $$ while (true) [ CD ]
Line_4 $$ FutureTask<?> futureTask = new FutureTask(new Callable<Object>() -->Line_21 $$ return null[ CD ]
Line_2 $$ protected Future<?> actionOnMPIWaiting(final boolean countDownOrInterrupt) -->Line_25 $$ thread.start()[ CD ]
Line_12 $$ if (countDownOrInterrupt) -->Line_14 $$ countDownLatch.countDown()[ CD ]
Line_12 $$ if (countDownOrInterrupt) -->Line_16 $$ currentThread.interrupt()[ CD ]
Line_12 $$ if (countDownOrInterrupt) -->Line_13 $$ CountDownLatch countDownLatch = _mockRemoteSPI.countDownLatch[ CD ]
Line_2 $$ protected Future<?> actionOnMPIWaiting(final boolean countDownOrInterrupt) -->Line_4 $$ FutureTask<?> futureTask = new FutureTask(new Callable<Object>() [ CD ]
Line_2 $$ protected Future<?> actionOnMPIWaiting(final boolean countDownOrInterrupt) -->Line_3 $$ final Thread currentThread = Thread.currentThread()[ CD ]
