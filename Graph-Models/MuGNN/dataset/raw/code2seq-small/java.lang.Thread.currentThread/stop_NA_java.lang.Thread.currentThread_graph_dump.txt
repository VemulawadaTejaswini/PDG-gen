Line_2 $$ public void stop() -->Line_6 $$ if (logger.isInfoEnabled()) [ CD ]
Line_11 $$ Set<String> countDownBeanNames = Collections.synchronizedSet(new LinkedHashSet<String>())-->Line_22 $$ if (latch.getCount() > 0 && !countDownBeanNames.isEmpty() && logger.isWarnEnabled()) [ FD ]
Line_2 $$ public void stop() -->Line_10 $$ CountDownLatch latch = new CountDownLatch(this.smartMemberCount)[ CD ]
Line_10 $$ CountDownLatch latch = new CountDownLatch(this.smartMemberCount)-->Line_14 $$ doStop(this.lifecycleBeans, member.name, latch, countDownBeanNames)[ FD ]
Line_11 $$ Set<String> countDownBeanNames = Collections.synchronizedSet(new LinkedHashSet<String>())-->Line_14 $$ doStop(this.lifecycleBeans, member.name, latch, countDownBeanNames)[ FD ]
Line_10 $$ CountDownLatch latch = new CountDownLatch(this.smartMemberCount)-->Line_21 $$ latch.await(this.timeout, TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ public void stop() -->Line_9 $$ Collections.sort(this.members, Collections.reverseOrder())[ CD ]
Line_11 $$ Set<String> countDownBeanNames = Collections.synchronizedSet(new LinkedHashSet<String>())-->Line_23 $$ logger.warn("Failed to shut down " + countDownBeanNames.size() + " bean" + (countDownBeanNames.size() > 1 ? "s" : "") + " with phase value " + this.phase + " within timeout of " + this.timeout + ": " + countDownBeanNames)[ FD ]
Line_6 $$ if (logger.isInfoEnabled()) -->Line_7 $$ logger.info("Stopping beans in phase " + this.phase)[ CD ]
Line_22 $$ if (latch.getCount() > 0 && !countDownBeanNames.isEmpty() && logger.isWarnEnabled()) -->Line_23 $$ logger.warn("Failed to shut down " + countDownBeanNames.size() + " bean" + (countDownBeanNames.size() > 1 ? "s" : "") + " with phase value " + this.phase + " within timeout of " + this.timeout + ": " + countDownBeanNames)[ CD ]
Line_2 $$ public void stop() -->Line_3 $$ if (this.members.isEmpty()) [ CD ]
Line_13 $$ if (this.lifecycleBeans.containsKey(member.name)) -->Line_14 $$ doStop(this.lifecycleBeans, member.name, latch, countDownBeanNames)[ CD ]
Line_13 $$ if (this.lifecycleBeans.containsKey(member.name)) -->Line_15 $$ if (member.bean instanceof SmartLifecycle) [ CD ]
Line_10 $$ CountDownLatch latch = new CountDownLatch(this.smartMemberCount)-->Line_22 $$ if (latch.getCount() > 0 && !countDownBeanNames.isEmpty() && logger.isWarnEnabled()) [ FD ]
Line_2 $$ public void stop() -->Line_11 $$ Set<String> countDownBeanNames = Collections.synchronizedSet(new LinkedHashSet<String>())[ CD ]
Line_3 $$ if (this.members.isEmpty()) -->Line_4 $$ return[ CD ]
