Line_4 $$ Map<Node, CommandResponse<AtomicReference<T>>> results = Collections.emptyMap()-->Line_10 $$ Iterator<CommandResponse<AtomicReference<T>>> responses = results.values().iterator()[ FD ]
Line_10 $$ Iterator<CommandResponse<AtomicReference<T>>> responses = results.values().iterator()-->Line_13 $$ responses.remove()[ FD ]
Line_5 $$ while (results.isEmpty()) -->Line_10 $$ Iterator<CommandResponse<AtomicReference<T>>> responses = results.values().iterator()[ CD ]
Line_9 $$ results = this.dispatcher.executeOnCluster(new SingletonValueCommand<T>())-->Line_10 $$ Iterator<CommandResponse<AtomicReference<T>>> responses = results.values().iterator()[ FD ]
Line_5 $$ while (results.isEmpty()) -->Line_17 $$ if (count > 1) [ CD ]
Line_20 $$ if (count == 0) -->Line_22 $$ if (this.registration.getProviders().size() < this.quorum) [ CD ]
Line_4 $$ Map<Node, CommandResponse<AtomicReference<T>>> results = Collections.emptyMap()-->Line_5 $$ while (results.isEmpty()) [ FD ]
Line_9 $$ results = this.dispatcher.executeOnCluster(new SingletonValueCommand<T>())-->Line_5 $$ while (results.isEmpty()) [ FD ]
Line_9 $$ results = this.dispatcher.executeOnCluster(new SingletonValueCommand<T>())-->Line_16 $$ int count = results.size()[ FD ]
Line_9 $$ results = this.dispatcher.executeOnCluster(new SingletonValueCommand<T>())-->Line_31 $$ return results.values().iterator().next().get()[ FD ]
Line_12 $$ if (responses.next().get() == null) -->Line_13 $$ responses.remove()[ CD ]
Line_4 $$ Map<Node, CommandResponse<AtomicReference<T>>> results = Collections.emptyMap()-->Line_31 $$ return results.values().iterator().next().get()[ FD ]
Line_10 $$ Iterator<CommandResponse<AtomicReference<T>>> responses = results.values().iterator()-->Line_12 $$ if (responses.next().get() == null) [ FD ]
Line_5 $$ while (results.isEmpty()) -->Line_11 $$ while (responses.hasNext()) [ CD ]
Line_5 $$ while (results.isEmpty()) -->Line_16 $$ int count = results.size()[ CD ]
Line_20 $$ if (count == 0) -->Line_21 $$ ClusteringServerLogger.ROOT_LOGGER.noResponseFromMaster(this.singletonServiceName.getCanonicalName())[ CD ]
Line_5 $$ while (results.isEmpty()) -->Line_20 $$ if (count == 0) [ CD ]
Line_20 $$ if (count == 0) -->Line_25 $$ if (Thread.currentThread().isInterrupted()) [ CD ]
Line_5 $$ while (results.isEmpty()) -->Line_6 $$ if (!this.started) [ CD ]
Line_4 $$ Map<Node, CommandResponse<AtomicReference<T>>> results = Collections.emptyMap()-->Line_16 $$ int count = results.size()[ FD ]
Line_10 $$ Iterator<CommandResponse<AtomicReference<T>>> responses = results.values().iterator()-->Line_11 $$ while (responses.hasNext()) [ FD ]
Line_5 $$ while (results.isEmpty()) -->Line_9 $$ results = this.dispatcher.executeOnCluster(new SingletonValueCommand<T>())[ CD ]
Line_11 $$ while (responses.hasNext()) -->Line_12 $$ if (responses.next().get() == null) [ CD ]
Line_4 $$ Map<Node, CommandResponse<AtomicReference<T>>> results = Collections.emptyMap()-->Line_9 $$ results = this.dispatcher.executeOnCluster(new SingletonValueCommand<T>())[ FD ]
Line_20 $$ if (count == 0) -->Line_28 $$ Thread.yield()[ CD ]
