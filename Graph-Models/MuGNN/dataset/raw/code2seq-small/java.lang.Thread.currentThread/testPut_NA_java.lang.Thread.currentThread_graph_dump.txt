Line_16 $$ final Thread copy2ndFileThread = new Thread() -->Line_39 $$ copy2ndFileThread.start()[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_50 $$ dfs.copyFromLocalFile(false, false, new Path(f1.getPath()), dst)[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_5 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_35 $$ if (!t.toString().contains("DataNode")) -->Line_36 $$ String s = "" + Arrays.asList(t.getStackTrace())[ CD ]
Line_12 $$ final File f2 = createLocalFile(new File(TEST_ROOT_DIR, "f2"))-->Line_77 $$ f2.delete()[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_74 $$ assertTrue(dfs.exists(srcs[0]))[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_57 $$ final Path destmultiple = mkdir(dfs, new Path("/test/putmultiple"))[ FD ]
Line_12 $$ final File f2 = createLocalFile(new File(TEST_ROOT_DIR, "f2"))-->Line_71 $$ assertFalse(f2.exists())[ FD ]
Line_34 $$ Thread t = Thread.currentThread()-->Line_35 $$ if (!t.toString().contains("DataNode")) [ FD ]
Line_2 $$ public void testPut() throws IOException -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_5 $$ FileSystem fs = cluster.getFileSystem()-->Line_6 $$ assertTrue("Not a HDFS: " + fs.getUri(), fs instanceof DistributedFileSystem)[ FD ]
Line_2 $$ public void testPut() throws IOException -->Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()[ CD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_64 $$ assertTrue(dfs.exists(srcs[0]))[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_75 $$ assertTrue(dfs.exists(srcs[1]))[ FD ]
Line_11 $$ final File f1 = createLocalFile(new File(TEST_ROOT_DIR, "f1"))-->Line_76 $$ f1.delete()[ FD ]
Line_14 $$ final Path dst = new Path(root, "dst")-->Line_50 $$ dfs.copyFromLocalFile(false, false, new Path(f1.getPath()), dst)[ FD ]
Line_14 $$ final Path dst = new Path(root, "dst")-->Line_20 $$ dfs.copyFromLocalFile(false, false, new Path(f2.getPath()), dst)[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_61 $$ dfs.copyFromLocalFile(false, false, srcs, destmultiple)[ FD ]
Line_34 $$ Thread t = Thread.currentThread()-->Line_36 $$ String s = "" + Arrays.asList(t.getStackTrace())[ FD ]
Line_11 $$ final File f1 = createLocalFile(new File(TEST_ROOT_DIR, "f1"))-->Line_70 $$ assertFalse(f1.exists())[ FD ]
Line_2 $$ public void testPut() throws IOException -->Line_5 $$ FileSystem fs = cluster.getFileSystem()[ CD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_65 $$ assertTrue(dfs.exists(srcs[1]))[ FD ]
Line_37 $$ if (s.contains("FileUtil.copyContent")) -->Line_39 $$ copy2ndFileThread.start()[ CD ]
Line_16 $$ final Thread copy2ndFileThread = new Thread() -->Line_53 $$ copy2ndFileThread.join()[ FD ]
Line_11 $$ final File f1 = createLocalFile(new File(TEST_ROOT_DIR, "f1"))-->Line_59 $$ srcs[0] = new Path(f1.getPath())[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_80 $$ dfs.close()[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_13 $$ final Path root = mkdir(dfs, new Path("/test/put"))[ FD ]
Line_2 $$ public void testPut() throws IOException -->Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs[ CD ]
Line_36 $$ String s = "" + Arrays.asList(t.getStackTrace())-->Line_37 $$ if (s.contains("FileUtil.copyContent")) [ FD ]
Line_12 $$ final File f2 = createLocalFile(new File(TEST_ROOT_DIR, "f2"))-->Line_68 $$ srcs[1] = new Path(f2.getPath())[ FD ]
Line_11 $$ final File f1 = createLocalFile(new File(TEST_ROOT_DIR, "f1"))-->Line_67 $$ srcs[0] = new Path(f1.getPath())[ FD ]
Line_30 $$ System.setSecurityManager(new SecurityManager() -->Line_33 $$ if (firstTime) [ CD ]
Line_35 $$ if (!t.toString().contains("DataNode")) -->Line_37 $$ if (s.contains("FileUtil.copyContent")) [ CD ]
Line_33 $$ if (firstTime) -->Line_35 $$ if (!t.toString().contains("DataNode")) [ CD ]
Line_11 $$ final File f1 = createLocalFile(new File(TEST_ROOT_DIR, "f1"))-->Line_50 $$ dfs.copyFromLocalFile(false, false, new Path(f1.getPath()), dst)[ FD ]
Line_2 $$ public void testPut() throws IOException -->Line_6 $$ assertTrue("Not a HDFS: " + fs.getUri(), fs instanceof DistributedFileSystem)[ CD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_69 $$ dfs.moveFromLocalFile(srcs, destmultiple2)[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_20 $$ dfs.copyFromLocalFile(false, false, new Path(f2.getPath()), dst)[ FD ]
Line_12 $$ final File f2 = createLocalFile(new File(TEST_ROOT_DIR, "f2"))-->Line_20 $$ dfs.copyFromLocalFile(false, false, new Path(f2.getPath()), dst)[ FD ]
Line_33 $$ if (firstTime) -->Line_34 $$ Thread t = Thread.currentThread()[ CD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_83 $$ cluster.shutdown()[ FD ]
Line_37 $$ if (s.contains("FileUtil.copyContent")) -->Line_38 $$ firstTime = false[ CD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_66 $$ final Path destmultiple2 = mkdir(dfs, new Path("/test/movemultiple"))[ FD ]
Line_16 $$ final Thread copy2ndFileThread = new Thread() -->Line_25 $$ assertTrue(false)[ CD ]
Line_12 $$ final File f2 = createLocalFile(new File(TEST_ROOT_DIR, "f2"))-->Line_60 $$ srcs[1] = new Path(f2.getPath())[ FD ]
