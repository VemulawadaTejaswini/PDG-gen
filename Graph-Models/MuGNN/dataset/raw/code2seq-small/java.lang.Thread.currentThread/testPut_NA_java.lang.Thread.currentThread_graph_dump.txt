Line_8 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_92 $$ dfs.close()[ FD ]
Line_46 $$ if (s.contains("FileUtil.copyContent")) -->Line_49 $$ copy2ndFileThread.start()[ CD ]
Line_16 $$ final Path dst = new Path(root, "dst")-->Line_24 $$ dfs.copyFromLocalFile(false, false, new Path(f2.getPath()), dst)[ FD ]
Line_44 $$ if (!t.toString().contains("DataNode")) -->Line_46 $$ if (s.contains("FileUtil.copyContent")) [ CD ]
Line_14 $$ final File f2 = createLocalFile(new File(TEST_ROOT_DIR, "f2"))-->Line_24 $$ dfs.copyFromLocalFile(false, false, new Path(f2.getPath()), dst)[ FD ]
Line_13 $$ final File f1 = createLocalFile(new File(TEST_ROOT_DIR, "f1"))-->Line_79 $$ srcs[0] = new Path(f1.getPath())[ FD ]
Line_14 $$ final File f2 = createLocalFile(new File(TEST_ROOT_DIR, "f2"))-->Line_83 $$ assertFalse(f2.exists())[ FD ]
Line_8 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_86 $$ assertTrue(dfs.exists(srcs[0]))[ FD ]
Line_13 $$ final File f1 = createLocalFile(new File(TEST_ROOT_DIR, "f1"))-->Line_82 $$ assertFalse(f1.exists())[ FD ]
Line_5 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_6 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_8 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_76 $$ assertTrue(dfs.exists(srcs[1]))[ FD ]
Line_43 $$ Thread t = Thread.currentThread()-->Line_45 $$ String s = "" + Arrays.asList(t.getStackTrace())[ FD ]
Line_8 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_75 $$ assertTrue(dfs.exists(srcs[0]))[ FD ]
Line_8 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_24 $$ dfs.copyFromLocalFile(false, false, new Path(f2.getPath()), dst)[ FD ]
Line_13 $$ final File f1 = createLocalFile(new File(TEST_ROOT_DIR, "f1"))-->Line_88 $$ f1.delete()[ FD ]
Line_8 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_87 $$ assertTrue(dfs.exists(srcs[1]))[ FD ]
Line_8 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_72 $$ dfs.copyFromLocalFile(false, false, srcs, destmultiple)[ FD ]
Line_13 $$ final File f1 = createLocalFile(new File(TEST_ROOT_DIR, "f1"))-->Line_60 $$ dfs.copyFromLocalFile(false, false, new Path(f1.getPath()), dst)[ FD ]
Line_14 $$ final File f2 = createLocalFile(new File(TEST_ROOT_DIR, "f2"))-->Line_80 $$ srcs[1] = new Path(f2.getPath())[ FD ]
Line_5 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_95 $$ cluster.shutdown()[ FD ]
Line_8 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_60 $$ dfs.copyFromLocalFile(false, false, new Path(f1.getPath()), dst)[ FD ]
Line_36 $$ System.setSecurityManager(new SecurityManager() -->Line_42 $$ if (firstTime) [ CD ]
Line_44 $$ if (!t.toString().contains("DataNode")) -->Line_45 $$ String s = "" + Arrays.asList(t.getStackTrace())[ CD ]
Line_18 $$ final Thread copy2ndFileThread = new Thread() -->Line_49 $$ copy2ndFileThread.start()[ FD ]
Line_16 $$ final Path dst = new Path(root, "dst")-->Line_60 $$ dfs.copyFromLocalFile(false, false, new Path(f1.getPath()), dst)[ FD ]
Line_43 $$ Thread t = Thread.currentThread()-->Line_44 $$ if (!t.toString().contains("DataNode")) [ FD ]
Line_8 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_81 $$ dfs.moveFromLocalFile(srcs, destmultiple2)[ FD ]
Line_14 $$ final File f2 = createLocalFile(new File(TEST_ROOT_DIR, "f2"))-->Line_89 $$ f2.delete()[ FD ]
Line_18 $$ final Thread copy2ndFileThread = new Thread() -->Line_63 $$ copy2ndFileThread.join()[ FD ]
Line_42 $$ if (firstTime) -->Line_43 $$ Thread t = Thread.currentThread()[ CD ]
Line_14 $$ final File f2 = createLocalFile(new File(TEST_ROOT_DIR, "f2"))-->Line_71 $$ srcs[1] = new Path(f2.getPath())[ FD ]
Line_42 $$ if (firstTime) -->Line_44 $$ if (!t.toString().contains("DataNode")) [ CD ]
Line_6 $$ FileSystem fs = cluster.getFileSystem()-->Line_7 $$ assertTrue("Not a HDFS: " + fs.getUri(), fs instanceof DistributedFileSystem)[ FD ]
Line_45 $$ String s = "" + Arrays.asList(t.getStackTrace())-->Line_46 $$ if (s.contains("FileUtil.copyContent")) [ FD ]
Line_13 $$ final File f1 = createLocalFile(new File(TEST_ROOT_DIR, "f1"))-->Line_70 $$ srcs[0] = new Path(f1.getPath())[ FD ]
Line_8 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_15 $$ final Path root = mkdir(dfs, new Path("/test/put"))[ FD ]
