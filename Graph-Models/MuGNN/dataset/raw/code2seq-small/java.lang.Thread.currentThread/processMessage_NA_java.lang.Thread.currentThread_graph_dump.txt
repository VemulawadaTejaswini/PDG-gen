Line_36 $$ if (ejbDeploymentInformation == null) -->Line_38 $$ return[ CD ]
Line_24 $$ final String moduleName-->Line_151 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_15 $$ methodParamTypes = signature.split(String.valueOf(METHOD_PARAM_TYPE_SEPARATOR))-->Line_64 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_26 $$ final String beanName-->Line_37 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_26 $$ final String beanName-->Line_35 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_91 $$ runnable = new Runnable() -->Line_163 $$ runnable.run()[ FD ]
Line_25 $$ final String distinctName-->Line_117 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_30 $$ distinctName = (String) unmarshaller.readObject()-->Line_64 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_115 $$ if (throwable instanceof EJBComponentUnavailableException) -->Line_120 $$ MethodInvocationMessageHandler.this.writeException(channelAssociation, MethodInvocationMessageHandler.this.marshallerFactory, invocationId, throwable, attachments)[ CD ]
Line_26 $$ final String beanName-->Line_31 $$ beanName = (String) unmarshaller.readObject()[ FD ]
Line_30 $$ distinctName = (String) unmarshaller.readObject()-->Line_117 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_31 $$ beanName = (String) unmarshaller.readObject()-->Line_37 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_35 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)-->Line_36 $$ if (ejbDeploymentInformation == null) [ FD ]
Line_55 $$ final String viewClassName = locator.getViewType().getName()-->Line_64 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_11 $$ final String signature = input.readUTF()-->Line_15 $$ methodParamTypes = signature.split(String.valueOf(METHOD_PARAM_TYPE_SEPARATOR))[ FD ]
Line_29 $$ moduleName = (String) unmarshaller.readObject()-->Line_58 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_28 $$ appName = (String) unmarshaller.readObject()-->Line_58 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_62 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_125 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_30 $$ distinctName = (String) unmarshaller.readObject()-->Line_127 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_62 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_63 $$ if (invokedMethod == null) [ FD ]
Line_67 $$ final Object[] methodParams = new Object[methodParamTypes.length]-->Line_110 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_29 $$ moduleName = (String) unmarshaller.readObject()-->Line_127 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_25 $$ final String distinctName-->Line_37 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_51 $$ locator = (EJBLocator<?>) unmarshaller.readObject()-->Line_55 $$ final String viewClassName = locator.getViewType().getName()[ FD ]
Line_137 $$ if (locator instanceof StatefulEJBLocator && componentView.getComponent() instanceof StatefulSessionComponent) -->Line_138 $$ final StatefulSessionComponent statefulSessionComponent = (StatefulSessionComponent) componentView.getComponent()[ CD ]
Line_4 $$ final DataInputStream input = new DataInputStream(inputStream)-->Line_11 $$ final String signature = input.readUTF()[ FD ]
Line_149 $$ boolean isAsyncVoid = componentView.isAsynchronous(invokedMethod) && invokedMethod.getReturnType().equals(Void.TYPE)-->Line_150 $$ if (!isAsyncVoid)[ FD ]
Line_29 $$ moduleName = (String) unmarshaller.readObject()-->Line_151 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_30 $$ distinctName = (String) unmarshaller.readObject()-->Line_58 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_24 $$ final String moduleName-->Line_58 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_110 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)-->Line_147 $$ writeMethodInvocationResponse(channelAssociation, invocationId, result, attachments, invokedMethod, componentView)[ FD ]
Line_140 $$ if (componentView.getComponent() instanceof StatelessSessionComponent) -->Line_141 $$ final StatelessSessionComponent statelessSessionComponent = (StatelessSessionComponent) componentView.getComponent()[ CD ]
Line_41 $$ Runnable runnable = null-->Line_163 $$ runnable.run()[ FD ]
Line_62 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_149 $$ boolean isAsyncVoid = componentView.isAsynchronous(invokedMethod) && invokedMethod.getReturnType().equals(Void.TYPE)[ FD ]
Line_21 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_72 $$ methodParams[i] = unmarshaller.readObject()[ FD ]
Line_55 $$ final String viewClassName = locator.getViewType().getName()-->Line_58 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_28 $$ appName = (String) unmarshaller.readObject()-->Line_151 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_24 $$ final String moduleName-->Line_29 $$ moduleName = (String) unmarshaller.readObject()[ FD ]
Line_61 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_141 $$ final StatelessSessionComponent statelessSessionComponent = (StatelessSessionComponent) componentView.getComponent()[ FD ]
Line_141 $$ final StatelessSessionComponent statelessSessionComponent = (StatelessSessionComponent) componentView.getComponent()-->Line_142 $$ weakAffinity = statelessSessionComponent.getWeakAffinity()[ FD ]
Line_61 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_110 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_61 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_138 $$ final StatefulSessionComponent statefulSessionComponent = (StatefulSessionComponent) componentView.getComponent()[ FD ]
Line_24 $$ final String moduleName-->Line_125 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_28 $$ appName = (String) unmarshaller.readObject()-->Line_127 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_21 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_83 $$ attachments = this.readAttachments(unmarshaller)[ FD ]
Line_55 $$ final String viewClassName = locator.getViewType().getName()-->Line_61 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)[ FD ]
Line_61 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_62 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)[ FD ]
Line_137 $$ if (locator instanceof StatefulEJBLocator && componentView.getComponent() instanceof StatefulSessionComponent) -->Line_139 $$ weakAffinity = MethodInvocationMessageHandler.this.getWeakAffinity(statefulSessionComponent, (StatefulEJBLocator<?>) locator)[ CD ]
Line_24 $$ final String moduleName-->Line_35 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_26 $$ final String beanName-->Line_116 $$ EjbLogger.EJB3_INVOCATION_LOGGER.debugf("Cannot handle method invocation: %s on bean: %s due to EJB component unavailability exception. Returning a no such EJB available message back to client", invokedMethod, beanName)[ FD ]
Line_11 $$ final String signature = input.readUTF()-->Line_12 $$ if (signature.isEmpty()) [ FD ]
Line_13 $$ methodParamTypes = new String[0]-->Line_15 $$ methodParamTypes = signature.split(String.valueOf(METHOD_PARAM_TYPE_SEPARATOR))[ FD ]
Line_21 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_30 $$ distinctName = (String) unmarshaller.readObject()[ FD ]
Line_61 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_149 $$ boolean isAsyncVoid = componentView.isAsynchronous(invokedMethod) && invokedMethod.getReturnType().equals(Void.TYPE)[ FD ]
Line_144 $$ if (weakAffinity != null) -->Line_145 $$ attachments.put(Affinity.WEAK_AFFINITY_CONTEXT_KEY, weakAffinity)[ CD ]
Line_25 $$ final String distinctName-->Line_35 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_25 $$ final String distinctName-->Line_30 $$ distinctName = (String) unmarshaller.readObject()[ FD ]
Line_28 $$ appName = (String) unmarshaller.readObject()-->Line_125 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_24 $$ final String moduleName-->Line_127 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_21 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_51 $$ locator = (EJBLocator<?>) unmarshaller.readObject()[ FD ]
Line_51 $$ locator = (EJBLocator<?>) unmarshaller.readObject()-->Line_110 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_26 $$ final String beanName-->Line_117 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_31 $$ beanName = (String) unmarshaller.readObject()-->Line_151 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_26 $$ final String beanName-->Line_64 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_63 $$ if (invokedMethod == null) -->Line_64 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ CD ]
Line_137 $$ if (locator instanceof StatefulEJBLocator && componentView.getComponent() instanceof StatefulSessionComponent) -->Line_140 $$ if (componentView.getComponent() instanceof StatelessSessionComponent) [ CD ]
Line_26 $$ final String beanName-->Line_58 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_31 $$ beanName = (String) unmarshaller.readObject()-->Line_35 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_24 $$ final String moduleName-->Line_37 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_25 $$ final String distinctName-->Line_151 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_31 $$ beanName = (String) unmarshaller.readObject()-->Line_125 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_12 $$ if (signature.isEmpty()) -->Line_15 $$ methodParamTypes = signature.split(String.valueOf(METHOD_PARAM_TYPE_SEPARATOR))[ CD ]
Line_138 $$ final StatefulSessionComponent statefulSessionComponent = (StatefulSessionComponent) componentView.getComponent()-->Line_139 $$ weakAffinity = MethodInvocationMessageHandler.this.getWeakAffinity(statefulSessionComponent, (StatefulEJBLocator<?>) locator)[ FD ]
Line_142 $$ weakAffinity = statelessSessionComponent.getWeakAffinity()-->Line_144 $$ if (weakAffinity != null) [ FD ]
Line_31 $$ beanName = (String) unmarshaller.readObject()-->Line_58 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_91 $$ runnable = new Runnable() -->Line_161 $$ executorService.submit(runnable)[ FD ]
Line_40 $$ final ClassLoader tccl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_157 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(tccl)[ FD ]
Line_41 $$ Runnable runnable = null-->Line_91 $$ runnable = new Runnable() [ FD ]
Line_41 $$ Runnable runnable = null-->Line_161 $$ executorService.submit(runnable)[ FD ]
Line_30 $$ distinctName = (String) unmarshaller.readObject()-->Line_125 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_26 $$ final String beanName-->Line_127 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_25 $$ final String distinctName-->Line_127 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_62 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_116 $$ EjbLogger.EJB3_INVOCATION_LOGGER.debugf("Cannot handle method invocation: %s on bean: %s due to EJB component unavailability exception. Returning a no such EJB available message back to client", invokedMethod, beanName)[ FD ]
Line_115 $$ if (throwable instanceof EJBComponentUnavailableException) -->Line_116 $$ EjbLogger.EJB3_INVOCATION_LOGGER.debugf("Cannot handle method invocation: %s on bean: %s due to EJB component unavailability exception. Returning a no such EJB available message back to client", invokedMethod, beanName)[ CD ]
Line_28 $$ appName = (String) unmarshaller.readObject()-->Line_37 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_30 $$ distinctName = (String) unmarshaller.readObject()-->Line_37 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_28 $$ appName = (String) unmarshaller.readObject()-->Line_117 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_61 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_137 $$ if (locator instanceof StatefulEJBLocator && componentView.getComponent() instanceof StatefulSessionComponent) [ FD ]
Line_62 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_103 $$ EjbLogger.REMOTE_LOGGER.failedToSendAsyncMethodIndicatorToClient(t, invokedMethod)[ FD ]
Line_62 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_110 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_91 $$ runnable = new Runnable() -->Line_108 $$ SecurityActions.remotingContextSetConnection(channelAssociation.getChannel().getConnection())[ CD ]
Line_83 $$ attachments = this.readAttachments(unmarshaller)-->Line_120 $$ MethodInvocationMessageHandler.this.writeException(channelAssociation, MethodInvocationMessageHandler.this.marshallerFactory, invocationId, throwable, attachments)[ FD ]
Line_30 $$ distinctName = (String) unmarshaller.readObject()-->Line_151 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_24 $$ final String moduleName-->Line_64 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_31 $$ beanName = (String) unmarshaller.readObject()-->Line_117 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_25 $$ final String distinctName-->Line_125 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_62 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_127 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_55 $$ final String viewClassName = locator.getViewType().getName()-->Line_117 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_63 $$ if (invokedMethod == null) -->Line_65 $$ return[ CD ]
Line_139 $$ weakAffinity = MethodInvocationMessageHandler.this.getWeakAffinity(statefulSessionComponent, (StatefulEJBLocator<?>) locator)-->Line_145 $$ attachments.put(Affinity.WEAK_AFFINITY_CONTEXT_KEY, weakAffinity)[ FD ]
Line_150 $$ if (!isAsyncVoid)-->Line_151 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ CD ]
Line_29 $$ moduleName = (String) unmarshaller.readObject()-->Line_35 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_83 $$ attachments = this.readAttachments(unmarshaller)-->Line_147 $$ writeMethodInvocationResponse(channelAssociation, invocationId, result, attachments, invokedMethod, componentView)[ FD ]
Line_62 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_151 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_13 $$ methodParamTypes = new String[0]-->Line_62 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)[ FD ]
Line_140 $$ if (componentView.getComponent() instanceof StatelessSessionComponent) -->Line_142 $$ weakAffinity = statelessSessionComponent.getWeakAffinity()[ CD ]
Line_24 $$ final String moduleName-->Line_117 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_142 $$ weakAffinity = statelessSessionComponent.getWeakAffinity()-->Line_145 $$ attachments.put(Affinity.WEAK_AFFINITY_CONTEXT_KEY, weakAffinity)[ FD ]
Line_13 $$ methodParamTypes = new String[0]-->Line_64 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_36 $$ if (ejbDeploymentInformation == null) -->Line_37 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ CD ]
Line_28 $$ appName = (String) unmarshaller.readObject()-->Line_64 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_29 $$ moduleName = (String) unmarshaller.readObject()-->Line_64 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_21 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_31 $$ beanName = (String) unmarshaller.readObject()[ FD ]
Line_28 $$ appName = (String) unmarshaller.readObject()-->Line_35 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_25 $$ final String distinctName-->Line_58 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_29 $$ moduleName = (String) unmarshaller.readObject()-->Line_37 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_25 $$ final String distinctName-->Line_64 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_83 $$ attachments = this.readAttachments(unmarshaller)-->Line_145 $$ attachments.put(Affinity.WEAK_AFFINITY_CONTEXT_KEY, weakAffinity)[ FD ]
Line_26 $$ final String beanName-->Line_125 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_31 $$ beanName = (String) unmarshaller.readObject()-->Line_64 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_139 $$ weakAffinity = MethodInvocationMessageHandler.this.getWeakAffinity(statefulSessionComponent, (StatefulEJBLocator<?>) locator)-->Line_144 $$ if (weakAffinity != null) [ FD ]
Line_21 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_29 $$ moduleName = (String) unmarshaller.readObject()[ FD ]
Line_26 $$ final String beanName-->Line_151 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_15 $$ methodParamTypes = signature.split(String.valueOf(METHOD_PARAM_TYPE_SEPARATOR))-->Line_62 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)[ FD ]
Line_29 $$ moduleName = (String) unmarshaller.readObject()-->Line_125 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_29 $$ moduleName = (String) unmarshaller.readObject()-->Line_117 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_31 $$ beanName = (String) unmarshaller.readObject()-->Line_116 $$ EjbLogger.EJB3_INVOCATION_LOGGER.debugf("Cannot handle method invocation: %s on bean: %s due to EJB component unavailability exception. Returning a no such EJB available message back to client", invokedMethod, beanName)[ FD ]
Line_139 $$ weakAffinity = MethodInvocationMessageHandler.this.getWeakAffinity(statefulSessionComponent, (StatefulEJBLocator<?>) locator)-->Line_142 $$ weakAffinity = statelessSessionComponent.getWeakAffinity()[ FD ]
Line_12 $$ if (signature.isEmpty()) -->Line_13 $$ methodParamTypes = new String[0][ CD ]
Line_61 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_140 $$ if (componentView.getComponent() instanceof StatelessSessionComponent) [ FD ]
Line_4 $$ final DataInputStream input = new DataInputStream(inputStream)-->Line_21 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)[ FD ]
Line_35 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)-->Line_61 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)[ FD ]
Line_30 $$ distinctName = (String) unmarshaller.readObject()-->Line_35 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_62 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_147 $$ writeMethodInvocationResponse(channelAssociation, invocationId, result, attachments, invokedMethod, componentView)[ FD ]
Line_31 $$ beanName = (String) unmarshaller.readObject()-->Line_127 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_115 $$ if (throwable instanceof EJBComponentUnavailableException) -->Line_117 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ CD ]
Line_83 $$ attachments = this.readAttachments(unmarshaller)-->Line_110 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_61 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_147 $$ writeMethodInvocationResponse(channelAssociation, invocationId, result, attachments, invokedMethod, componentView)[ FD ]
Line_21 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_28 $$ appName = (String) unmarshaller.readObject()[ FD ]
