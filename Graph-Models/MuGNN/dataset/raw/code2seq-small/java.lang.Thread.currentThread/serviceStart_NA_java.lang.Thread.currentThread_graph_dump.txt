Line_13 $$ ContainerEvent event = null-->Line_17 $$ event = events.take()[ FD ]
Line_33 $$ if (threadPoolSize < idealThreadPoolSize) -->Line_38 $$ LOG.info("Set NMClientAsync thread pool size to " + newThreadPoolSize + " as the number of nodes to talk to is " + nodeNum)[ CD ]
Line_15 $$ while (!stopped.get() && !Thread.currentThread().isInterrupted()) -->Line_24 $$ allNodes.add(event.getNodeId().toString())[ CD ]
Line_9 $$ eventDispatcherThread = new Thread() -->Line_13 $$ ContainerEvent event = null[ CD ]
Line_33 $$ if (threadPoolSize < idealThreadPoolSize) -->Line_39 $$ threadPool.setCorePoolSize(newThreadPoolSize)[ CD ]
Line_9 $$ eventDispatcherThread = new Thread() -->Line_15 $$ while (!stopped.get() && !Thread.currentThread().isInterrupted()) [ CD ]
Line_13 $$ ContainerEvent event = null-->Line_24 $$ allNodes.add(event.getNodeId().toString())[ FD ]
Line_19 $$ if (!stopped.get()) -->Line_20 $$ LOG.error("Returning, thread interrupted", e)[ CD ]
Line_15 $$ while (!stopped.get() && !Thread.currentThread().isInterrupted()) -->Line_25 $$ int threadPoolSize = threadPool.getCorePoolSize()[ CD ]
Line_14 $$ Set<String> allNodes = new HashSet<String>()-->Line_24 $$ allNodes.add(event.getNodeId().toString())[ FD ]
Line_17 $$ event = events.take()-->Line_24 $$ allNodes.add(event.getNodeId().toString())[ FD ]
Line_25 $$ int threadPoolSize = threadPool.getCorePoolSize()-->Line_33 $$ if (threadPoolSize < idealThreadPoolSize) [ FD ]
Line_9 $$ eventDispatcherThread = new Thread() -->Line_14 $$ Set<String> allNodes = new HashSet<String>()[ CD ]
Line_32 $$ int idealThreadPoolSize = Math.min(maxThreadPoolSize, nodeNum)-->Line_33 $$ if (threadPoolSize < idealThreadPoolSize) [ FD ]
