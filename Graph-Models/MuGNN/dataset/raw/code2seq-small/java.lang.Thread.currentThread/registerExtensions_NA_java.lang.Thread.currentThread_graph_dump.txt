Line_2 $$ public void registerExtensions(@NotNull MyAllCustomElement element, @NotNull DomExtensionsRegistrar registrar) -->Line_19 $$ System.out.println(Thread.currentThread() + ":    " + element.getXmlTag().getName() + element.getXmlTag().hashCode())[ FD ]
Line_4 $$ DomElement parent = element-->Line_5 $$ while (parent != null) [ FD ]
Line_7 $$ DomElement childParent = child.getParent()-->Line_8 $$ if (!parent.equals(childParent)) [ FD ]
Line_6 $$ for (DomElement child : DomUtil.getDefinedChildren(parent, true, true)) -->Line_10 $$ String childText = child.getXmlElement().getText()[ FD ]
Line_6 $$ for (DomElement child : DomUtil.getDefinedChildren(parent, true, true)) -->Line_7 $$ DomElement childParent = child.getParent()[ FD ]
Line_8 $$ if (!parent.equals(childParent)) -->Line_12 $$ parent.equals(childParent)[ CD ]
Line_6 $$ for (DomElement child : DomUtil.getDefinedChildren(parent, true, true)) -->Line_11 $$ child.getParent()[ FD ]
Line_4 $$ DomElement parent = element-->Line_13 $$ throw new AssertionError(parent.getXmlElement() + "; " + childParent + "; " + child.getXmlElement().getText())[ FD ]
Line_16 $$ parent = parent.getParent()-->Line_8 $$ if (!parent.equals(childParent)) [ FD ]
Line_8 $$ if (!parent.equals(childParent)) -->Line_10 $$ String childText = child.getXmlElement().getText()[ CD ]
Line_4 $$ DomElement parent = element-->Line_16 $$ parent = parent.getParent()[ FD ]
Line_16 $$ parent = parent.getParent()-->Line_5 $$ while (parent != null) [ FD ]
Line_4 $$ DomElement parent = element-->Line_12 $$ parent.equals(childParent)[ FD ]
Line_2 $$ public void registerExtensions(@NotNull MyAllCustomElement element, @NotNull DomExtensionsRegistrar registrar) -->Line_22 $$ registrar.registerCustomChildrenExtension(MyAllCustomElement.class)[ CD ]
Line_16 $$ parent = parent.getParent()-->Line_9 $$ String parentText = parent.getXmlTag().getText()[ FD ]
Line_5 $$ while (parent != null) -->Line_16 $$ parent = parent.getParent()[ CD ]
Line_16 $$ parent = parent.getParent()-->Line_6 $$ for (DomElement child : DomUtil.getDefinedChildren(parent, true, true)) [ FD ]
Line_2 $$ public void registerExtensions(@NotNull MyAllCustomElement element, @NotNull DomExtensionsRegistrar registrar) -->Line_22 $$ registrar.registerCustomChildrenExtension(MyAllCustomElement.class)[ FD ]
Line_4 $$ DomElement parent = element-->Line_6 $$ for (DomElement child : DomUtil.getDefinedChildren(parent, true, true)) [ FD ]
Line_4 $$ DomElement parent = element-->Line_8 $$ if (!parent.equals(childParent)) [ FD ]
Line_8 $$ if (!parent.equals(childParent)) -->Line_11 $$ child.getParent()[ CD ]
Line_8 $$ if (!parent.equals(childParent)) -->Line_9 $$ String parentText = parent.getXmlTag().getText()[ CD ]
Line_16 $$ parent = parent.getParent()-->Line_13 $$ throw new AssertionError(parent.getXmlElement() + "; " + childParent + "; " + child.getXmlElement().getText())[ FD ]
Line_4 $$ DomElement parent = element-->Line_9 $$ String parentText = parent.getXmlTag().getText()[ FD ]
Line_16 $$ parent = parent.getParent()-->Line_12 $$ parent.equals(childParent)[ FD ]
Line_6 $$ for (DomElement child : DomUtil.getDefinedChildren(parent, true, true)) -->Line_13 $$ throw new AssertionError(parent.getXmlElement() + "; " + childParent + "; " + child.getXmlElement().getText())[ FD ]
Line_7 $$ DomElement childParent = child.getParent()-->Line_12 $$ parent.equals(childParent)[ FD ]
