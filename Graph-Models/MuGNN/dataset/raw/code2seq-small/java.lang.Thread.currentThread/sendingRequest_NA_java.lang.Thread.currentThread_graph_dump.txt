Line_17 $$ long sleepDuration = (long) (sleepMultiple * lastLatency)-->Line_19 $$ sleepDuration = 0[ FD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_29 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_10 $$ if (urlConnection.getRequestMethod().equalsIgnoreCase("PUT")) [ CD ]
Line_29 $$ if (LOG.isDebugEnabled()) -->Line_30 $$ boolean isFirstRequest = (lastLatency == 0)[ CD ]
Line_4 $$ boolean operationIsRead-->Line_11 $$ operationIsRead = false[ FD ]
Line_29 $$ if (LOG.isDebugEnabled()) -->Line_31 $$ long threadId = Thread.currentThread().getId()[ CD ]
Line_10 $$ if (urlConnection.getRequestMethod().equalsIgnoreCase("PUT")) -->Line_12 $$ sleepMultiple = (1 / writeFactor) - 1[ CD ]
Line_18 $$ if (sleepDuration < 0) -->Line_19 $$ sleepDuration = 0[ CD ]
Line_19 $$ sleepDuration = 0-->Line_32 $$ LOG.debug(String.format(" SelfThrottlingIntercept:: SendingRequest:   threadId=%d, requestType=%s, isFirstRequest=%b, sleepDuration=%d", threadId, operationIsRead ? "read " : "write", isFirstRequest, sleepDuration))[ FD ]
Line_10 $$ if (urlConnection.getRequestMethod().equalsIgnoreCase("PUT")) -->Line_14 $$ operationIsRead = true[ CD ]
Line_30 $$ boolean isFirstRequest = (lastLatency == 0)-->Line_32 $$ LOG.debug(String.format(" SelfThrottlingIntercept:: SendingRequest:   threadId=%d, requestType=%s, isFirstRequest=%b, sleepDuration=%d", threadId, operationIsRead ? "read " : "write", isFirstRequest, sleepDuration))[ FD ]
Line_8 $$ float sleepMultiple-->Line_12 $$ sleepMultiple = (1 / writeFactor) - 1[ FD ]
Line_21 $$ if (sleepDuration > 0) -->Line_27 $$ sendEvent.getRequestResult().setStartDate(new Date())[ CD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_9 $$ HttpURLConnection urlConnection = (HttpURLConnection) sendEvent.getConnectionObject()[ FD ]
Line_4 $$ boolean operationIsRead-->Line_14 $$ operationIsRead = true[ FD ]
Line_17 $$ long sleepDuration = (long) (sleepMultiple * lastLatency)-->Line_21 $$ if (sleepDuration > 0) [ FD ]
Line_9 $$ HttpURLConnection urlConnection = (HttpURLConnection) sendEvent.getConnectionObject()-->Line_10 $$ if (urlConnection.getRequestMethod().equalsIgnoreCase("PUT")) [ FD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_3 $$ long lastLatency[ CD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_8 $$ float sleepMultiple[ CD ]
Line_19 $$ sleepDuration = 0-->Line_21 $$ if (sleepDuration > 0) [ FD ]
Line_17 $$ long sleepDuration = (long) (sleepMultiple * lastLatency)-->Line_32 $$ LOG.debug(String.format(" SelfThrottlingIntercept:: SendingRequest:   threadId=%d, requestType=%s, isFirstRequest=%b, sleepDuration=%d", threadId, operationIsRead ? "read " : "write", isFirstRequest, sleepDuration))[ FD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_21 $$ if (sleepDuration > 0) [ CD ]
Line_12 $$ sleepMultiple = (1 / writeFactor) - 1-->Line_15 $$ sleepMultiple = (1 / readFactor) - 1[ FD ]
Line_19 $$ sleepDuration = 0-->Line_23 $$ Thread.sleep(sleepDuration)[ FD ]
Line_17 $$ long sleepDuration = (long) (sleepMultiple * lastLatency)-->Line_18 $$ if (sleepDuration < 0) [ FD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_17 $$ long sleepDuration = (long) (sleepMultiple * lastLatency)[ CD ]
Line_8 $$ float sleepMultiple-->Line_15 $$ sleepMultiple = (1 / readFactor) - 1[ FD ]
Line_11 $$ operationIsRead = false-->Line_14 $$ operationIsRead = true[ FD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_4 $$ boolean operationIsRead[ CD ]
Line_3 $$ long lastLatency-->Line_6 $$ lastLatency = this.lastE2Elatency[ FD ]
Line_10 $$ if (urlConnection.getRequestMethod().equalsIgnoreCase("PUT")) -->Line_11 $$ operationIsRead = false[ CD ]
Line_31 $$ long threadId = Thread.currentThread().getId()-->Line_32 $$ LOG.debug(String.format(" SelfThrottlingIntercept:: SendingRequest:   threadId=%d, requestType=%s, isFirstRequest=%b, sleepDuration=%d", threadId, operationIsRead ? "read " : "write", isFirstRequest, sleepDuration))[ FD ]
Line_17 $$ long sleepDuration = (long) (sleepMultiple * lastLatency)-->Line_23 $$ Thread.sleep(sleepDuration)[ FD ]
Line_29 $$ if (LOG.isDebugEnabled()) -->Line_32 $$ LOG.debug(String.format(" SelfThrottlingIntercept:: SendingRequest:   threadId=%d, requestType=%s, isFirstRequest=%b, sleepDuration=%d", threadId, operationIsRead ? "read " : "write", isFirstRequest, sleepDuration))[ CD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_18 $$ if (sleepDuration < 0) [ CD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_9 $$ HttpURLConnection urlConnection = (HttpURLConnection) sendEvent.getConnectionObject()[ CD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_27 $$ sendEvent.getRequestResult().setStartDate(new Date())[ FD ]
Line_10 $$ if (urlConnection.getRequestMethod().equalsIgnoreCase("PUT")) -->Line_15 $$ sleepMultiple = (1 / readFactor) - 1[ CD ]
