Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_37 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_21 $$ if (sleepDuration < 0) [ CD ]
Line_3 $$ long lastLatency-->Line_7 $$ lastLatency = this.lastE2Elatency[ FD ]
Line_21 $$ if (sleepDuration < 0) -->Line_22 $$ sleepDuration = 0[ CD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_20 $$ long sleepDuration = (long) (sleepMultiple * lastLatency)[ CD ]
Line_20 $$ long sleepDuration = (long) (sleepMultiple * lastLatency)-->Line_21 $$ if (sleepDuration < 0) [ FD ]
Line_37 $$ if (LOG.isDebugEnabled()) -->Line_38 $$ boolean isFirstRequest = (lastLatency == 0)[ CD ]
Line_15 $$ sleepMultiple = (1 / writeFactor) - 1-->Line_18 $$ sleepMultiple = (1 / readFactor) - 1[ FD ]
Line_39 $$ long threadId = Thread.currentThread().getId()-->Line_40 $$ LOG.debug(String.format(" SelfThrottlingIntercept:: SendingRequest:   threadId=%d, requestType=%s, isFirstRequest=%b, sleepDuration=%d", threadId, operationIsRead ? "read " : "write", isFirstRequest, sleepDuration))[ FD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_10 $$ HttpURLConnection urlConnection = (HttpURLConnection) sendEvent.getConnectionObject()[ CD ]
Line_14 $$ operationIsRead = false-->Line_17 $$ operationIsRead = true[ FD ]
Line_20 $$ long sleepDuration = (long) (sleepMultiple * lastLatency)-->Line_40 $$ LOG.debug(String.format(" SelfThrottlingIntercept:: SendingRequest:   threadId=%d, requestType=%s, isFirstRequest=%b, sleepDuration=%d", threadId, operationIsRead ? "read " : "write", isFirstRequest, sleepDuration))[ FD ]
Line_9 $$ float sleepMultiple-->Line_15 $$ sleepMultiple = (1 / writeFactor) - 1[ FD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_3 $$ long lastLatency[ CD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_10 $$ HttpURLConnection urlConnection = (HttpURLConnection) sendEvent.getConnectionObject()[ FD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_9 $$ float sleepMultiple[ CD ]
Line_9 $$ float sleepMultiple-->Line_18 $$ sleepMultiple = (1 / readFactor) - 1[ FD ]
Line_37 $$ if (LOG.isDebugEnabled()) -->Line_39 $$ long threadId = Thread.currentThread().getId()[ CD ]
Line_20 $$ long sleepDuration = (long) (sleepMultiple * lastLatency)-->Line_22 $$ sleepDuration = 0[ FD ]
Line_22 $$ sleepDuration = 0-->Line_40 $$ LOG.debug(String.format(" SelfThrottlingIntercept:: SendingRequest:   threadId=%d, requestType=%s, isFirstRequest=%b, sleepDuration=%d", threadId, operationIsRead ? "read " : "write", isFirstRequest, sleepDuration))[ FD ]
Line_38 $$ boolean isFirstRequest = (lastLatency == 0)-->Line_40 $$ LOG.debug(String.format(" SelfThrottlingIntercept:: SendingRequest:   threadId=%d, requestType=%s, isFirstRequest=%b, sleepDuration=%d", threadId, operationIsRead ? "read " : "write", isFirstRequest, sleepDuration))[ FD ]
Line_22 $$ sleepDuration = 0-->Line_24 $$ if (sleepDuration > 0) [ FD ]
Line_37 $$ if (LOG.isDebugEnabled()) -->Line_40 $$ LOG.debug(String.format(" SelfThrottlingIntercept:: SendingRequest:   threadId=%d, requestType=%s, isFirstRequest=%b, sleepDuration=%d", threadId, operationIsRead ? "read " : "write", isFirstRequest, sleepDuration))[ CD ]
Line_20 $$ long sleepDuration = (long) (sleepMultiple * lastLatency)-->Line_24 $$ if (sleepDuration > 0) [ FD ]
Line_2 $$ public void sendingRequest(SendingRequestEvent sendEvent) -->Line_24 $$ if (sleepDuration > 0) [ CD ]
