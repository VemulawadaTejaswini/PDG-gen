Line_22 $$ while (!openerDone.get()) -->Line_24 $$ out.hflush()[ CD ]
Line_17 $$ final Thread writer = new Thread(new Runnable() -->Line_57 $$ writer.start()[ FD ]
Line_15 $$ final AtomicReference<String> errorMessage = new AtomicReference<String>()-->Line_65 $$ assertNull(errorMessage.get(), errorMessage.get())[ FD ]
Line_15 $$ final AtomicReference<String> errorMessage = new AtomicReference<String>()-->Line_48 $$ errorMessage.set(String.format("got exception : %s", StringUtils.stringifyException(e)))[ FD ]
Line_14 $$ final AtomicBoolean openerDone = new AtomicBoolean(false)-->Line_45 $$ openerDone.set(true)[ FD ]
Line_7 $$ final int blockSize = 64 * 1024-->Line_10 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, blockSize)[ FD ]
Line_12 $$ final int requiredSuccessfulOpens = 100-->Line_42 $$ for (int i = 0; i < requiredSuccessfulOpens; i++) [ FD ]
Line_9 $$ Configuration conf = new Configuration()-->Line_10 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, blockSize)[ FD ]
Line_16 $$ final FSDataOutputStream out = fileSystem.create(file)-->Line_23 $$ out.write(DFSTestUtil.generateSequentialBytes(0, writeSize))[ FD ]
Line_9 $$ Configuration conf = new Configuration()-->Line_11 $$ init(conf)[ FD ]
Line_17 $$ final Thread writer = new Thread(new Runnable() -->Line_52 $$ writer.interrupt()[ FD ]
Line_15 $$ final AtomicReference<String> errorMessage = new AtomicReference<String>()-->Line_51 $$ errorMessage.set(String.format("got exception : %s", StringUtils.stringifyException(e)))[ FD ]
Line_14 $$ final AtomicBoolean openerDone = new AtomicBoolean(false)-->Line_50 $$ openerDone.set(true)[ FD ]
Line_14 $$ final AtomicBoolean openerDone = new AtomicBoolean(false)-->Line_47 $$ openerDone.set(true)[ FD ]
Line_13 $$ final Path file = new Path("/file1")-->Line_16 $$ final FSDataOutputStream out = fileSystem.create(file)[ FD ]
Line_16 $$ final FSDataOutputStream out = fileSystem.create(file)-->Line_24 $$ out.hflush()[ FD ]
Line_8 $$ final int writeSize = 10 * blockSize-->Line_23 $$ out.write(DFSTestUtil.generateSequentialBytes(0, writeSize))[ FD ]
Line_16 $$ final FSDataOutputStream out = fileSystem.create(file)-->Line_30 $$ out.close()[ FD ]
Line_17 $$ final Thread writer = new Thread(new Runnable() -->Line_60 $$ writer.join()[ FD ]
Line_14 $$ final AtomicBoolean openerDone = new AtomicBoolean(false)-->Line_22 $$ while (!openerDone.get()) [ FD ]
Line_22 $$ while (!openerDone.get()) -->Line_23 $$ out.write(DFSTestUtil.generateSequentialBytes(0, writeSize))[ CD ]
Line_13 $$ final Path file = new Path("/file1")-->Line_43 $$ fileSystem.open(file).close()[ FD ]
Line_42 $$ for (int i = 0; i < requiredSuccessfulOpens; i++) -->Line_43 $$ fileSystem.open(file).close()[ CD ]
