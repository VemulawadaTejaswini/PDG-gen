Line_11 $$ final AtomicReference<String> errorMessage = new AtomicReference<String>()-->Line_40 $$ errorMessage.set(String.format("got exception : %s", StringUtils.stringifyException(e)))[ FD ]
Line_13 $$ final Thread writer = new Thread(new Runnable() -->Line_52 $$ writer.join()[ FD ]
Line_10 $$ final AtomicBoolean openerDone = new AtomicBoolean(false)-->Line_37 $$ openerDone.set(true)[ FD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_57 $$ assertNull(errorMessage.get(), errorMessage.get())[ CD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_8 $$ final int requiredSuccessfulOpens = 100[ CD ]
Line_10 $$ final AtomicBoolean openerDone = new AtomicBoolean(false)-->Line_42 $$ openerDone.set(true)[ FD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_10 $$ final AtomicBoolean openerDone = new AtomicBoolean(false)[ CD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_3 $$ final int blockSize = 64 * 1024[ CD ]
Line_11 $$ final AtomicReference<String> errorMessage = new AtomicReference<String>()-->Line_43 $$ errorMessage.set(String.format("got exception : %s", StringUtils.stringifyException(e)))[ FD ]
Line_9 $$ final Path file = new Path("/file1")-->Line_12 $$ final FSDataOutputStream out = fileSystem.create(file)[ FD ]
Line_13 $$ final Thread writer = new Thread(new Runnable() -->Line_49 $$ writer.start()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ init(conf)[ FD ]
Line_8 $$ final int requiredSuccessfulOpens = 100-->Line_34 $$ for (int i = 0; i < requiredSuccessfulOpens; i++) [ FD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_7 $$ init(conf)[ CD ]
Line_10 $$ final AtomicBoolean openerDone = new AtomicBoolean(false)-->Line_39 $$ openerDone.set(true)[ FD ]
Line_12 $$ final FSDataOutputStream out = fileSystem.create(file)-->Line_18 $$ out.hflush()[ FD ]
Line_12 $$ final FSDataOutputStream out = fileSystem.create(file)-->Line_17 $$ out.write(DFSTestUtil.generateSequentialBytes(0, writeSize))[ FD ]
Line_34 $$ for (int i = 0; i < requiredSuccessfulOpens; i++) -->Line_35 $$ fileSystem.open(file).close()[ CD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_12 $$ final FSDataOutputStream out = fileSystem.create(file)[ CD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_9 $$ final Path file = new Path("/file1")[ CD ]
Line_12 $$ final FSDataOutputStream out = fileSystem.create(file)-->Line_24 $$ out.close()[ FD ]
Line_16 $$ while (!openerDone.get()) -->Line_18 $$ out.hflush()[ CD ]
Line_9 $$ final Path file = new Path("/file1")-->Line_35 $$ fileSystem.open(file).close()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, blockSize)[ FD ]
Line_3 $$ final int blockSize = 64 * 1024-->Line_6 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, blockSize)[ FD ]
Line_10 $$ final AtomicBoolean openerDone = new AtomicBoolean(false)-->Line_16 $$ while (!openerDone.get()) [ FD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_4 $$ final int writeSize = 10 * blockSize[ CD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_50 $$ opener.start()[ CD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_6 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, blockSize)[ CD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_13 $$ final Thread writer = new Thread(new Runnable() [ CD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_5 $$ Configuration conf = new Configuration()[ CD ]
Line_11 $$ final AtomicReference<String> errorMessage = new AtomicReference<String>()-->Line_57 $$ assertNull(errorMessage.get(), errorMessage.get())[ FD ]
Line_16 $$ while (!openerDone.get()) -->Line_17 $$ out.write(DFSTestUtil.generateSequentialBytes(0, writeSize))[ CD ]
Line_4 $$ final int writeSize = 10 * blockSize-->Line_17 $$ out.write(DFSTestUtil.generateSequentialBytes(0, writeSize))[ FD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_11 $$ final AtomicReference<String> errorMessage = new AtomicReference<String>()[ CD ]
Line_2 $$ public void testImmediateReadOfNewFile() throws IOException -->Line_49 $$ writer.start()[ CD ]
Line_13 $$ final Thread writer = new Thread(new Runnable() -->Line_44 $$ writer.interrupt()[ FD ]
