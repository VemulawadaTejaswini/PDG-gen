Line_87 $$ for (int i = 0; i < busiestThreads; i++) -->Line_129 $$ if (done[i])[ FD ]
Line_152 $$ if (allInfos[i][t] != null) -->Line_153 $$ final StackTraceElement[] show = allInfos[i][t].getStackTrace()[ CD ]
Line_103 $$ if ("wait".equals(type)) -->Line_104 $$ time = hotties.get(t).waitedTime[ CD ]
Line_56 $$ if (info == null) -->Line_57 $$ threadInfos.remove(threadId)[ CD ]
Line_61 $$ if (data != null) -->Line_62 $$ data.setDelta(cpu, info)[ CD ]
Line_102 $$ time = hotties.get(t).cpuTime-->Line_104 $$ time = hotties.get(t).waitedTime[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_157 $$ sb.append(String.format(Locale.ROOT, "    %s%n", show[l]))[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_171 $$ threadBean.setThreadCpuTimeEnabled(false)[ FD ]
Line_100 $$ long time = 0-->Line_106 $$ time = hotties.get(t).blockedTime[ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_13 $$ sb.append(busiestThreads)[ CD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_50 $$ long cpu = threadBean.getThreadCpuTime(threadId)[ FD ]
Line_133 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_146 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) [ FD ]
Line_69 $$ final int busiestThreads = Math.min(this.busiestThreads, hotties.size())-->Line_87 $$ for (int i = 0; i < busiestThreads; i++) [ FD ]
Line_105 $$ if ("block".equals(type)) -->Line_106 $$ time = hotties.get(t).blockedTime[ CD ]
Line_28 $$ Map<Long, MyThreadInfo> threadInfos = new HashMap()-->Line_64 $$ threadInfos.remove(threadId)[ FD ]
Line_133 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_141 $$ if (similarity == maxSim)[ CD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_34 $$ long cpu = threadBean.getThreadCpuTime(threadId)[ FD ]
Line_133 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_134 $$ if (done[j])[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_6 $$ return sb.toString()[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(", busiestThreads=")[ FD ]
Line_106 $$ time = hotties.get(t).blockedTime-->Line_124 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_9 $$ sb.append(DATE_TIME_FORMATTER.printer().print(System.currentTimeMillis()))[ FD ]
Line_141 $$ if (similarity == maxSim)-->Line_142 $$ similars[j] = true[ CD ]
Line_128 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_152 $$ if (allInfos[i][t] != null) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append(busiestThreads)[ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_42 $$ threadInfos.put(threadId, new MyThreadInfo(cpu, info))[ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_8 $$ sb.append("Hot threads at ")[ CD ]
Line_99 $$ for (int t = 0; t < busiestThreads; t++) -->Line_128 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append(":\n")[ FD ]
Line_146 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_147 $$ if (similars[j]) [ FD ]
Line_28 $$ Map<Long, MyThreadInfo> threadInfos = new HashMap()-->Line_52 $$ threadInfos.remove(threadId)[ FD ]
Line_110 $$ if (info != null && info[t] != null) -->Line_111 $$ if (ignoreIdleThreads && isIdleThread(info[t])) [ CD ]
Line_87 $$ for (int i = 0; i < busiestThreads; i++) -->Line_88 $$ MyThreadInfo info = hotties.get(i)[ CD ]
Line_138 $$ maxSim = similarity-->Line_141 $$ if (similarity == maxSim)[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_23 $$ threadBean.setThreadCpuTimeEnabled(true)[ FD ]
Line_100 $$ long time = 0-->Line_102 $$ time = hotties.get(t).cpuTime[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_20 $$ if (threadBean.isThreadCpuTimeSupported()) [ FD ]
Line_154 $$ if (count == 1) -->Line_161 $$ for (int l = show.length - maxSim; l < show.length; l++) [ CD ]
Line_128 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_133 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) [ CD ]
Line_4 $$ if (Constants.FREE_BSD) -->Line_5 $$ sb.append("hot_threads is not supported on FreeBSD")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append(interval)[ FD ]
Line_128 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_129 $$ if (done[i])[ FD ]
Line_123 $$ double percent = (((double) time) / interval.nanos()) * 100-->Line_124 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_101 $$ if ("cpu".equals(type)) -->Line_103 $$ if ("wait".equals(type)) [ CD ]
Line_34 $$ long cpu = threadBean.getThreadCpuTime(threadId)-->Line_35 $$ if (cpu == -1) [ FD ]
Line_115 $$ threadName = info[t].getThreadName()-->Line_124 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb.append(ignoreIdleThreads)[ FD ]
Line_136 $$ int similarity = similarity(allInfos[i][t], allInfos[j][t])-->Line_137 $$ if (similarity > maxSim) [ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_16 $$ sb.append(":\n")[ CD ]
Line_115 $$ threadName = info[t].getThreadName()-->Line_119 $$ if (threadName == null) [ FD ]
Line_132 $$ boolean[] similars = new boolean[threadElementsSnapshotCount]-->Line_139 $$ similars = new boolean[threadElementsSnapshotCount][ FD ]
Line_104 $$ time = hotties.get(t).waitedTime-->Line_106 $$ time = hotties.get(t).blockedTime[ FD ]
Line_21 $$ if (!threadBean.isThreadCpuTimeEnabled()) -->Line_22 $$ enabledCpu = true[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_8 $$ sb.append("Hot threads at ")[ FD ]
Line_152 $$ if (allInfos[i][t] != null) -->Line_154 $$ if (count == 1) [ CD ]
Line_77 $$ if ("wait".equals(type)) -->Line_78 $$ return (int) (o2.waitedTime - o1.waitedTime)[ CD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_11 $$ sb.append(interval)[ CD ]
Line_51 $$ if (cpu == -1) -->Line_52 $$ threadInfos.remove(threadId)[ CD ]
Line_87 $$ for (int i = 0; i < busiestThreads; i++) -->Line_128 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_124 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_21 $$ if (!threadBean.isThreadCpuTimeEnabled()) [ FD ]
Line_99 $$ for (int t = 0; t < busiestThreads; t++) -->Line_123 $$ double percent = (((double) time) / interval.nanos()) * 100[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ sb.append(", interval=")[ FD ]
Line_133 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_137 $$ if (similarity > maxSim) [ CD ]
Line_18 $$ boolean enabledCpu = false-->Line_22 $$ enabledCpu = true[ FD ]
Line_154 $$ if (count == 1) -->Line_156 $$ for (int l = 0; l < show.length; l++) [ CD ]
Line_99 $$ for (int t = 0; t < busiestThreads; t++) -->Line_124 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ CD ]
Line_110 $$ if (info != null && info[t] != null) -->Line_115 $$ threadName = info[t].getThreadName()[ CD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_52 $$ threadInfos.remove(threadId)[ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_9 $$ sb.append(DATE_TIME_FORMATTER.printer().print(System.currentTimeMillis()))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_162 $$ sb.append(String.format(Locale.ROOT, "    %s%n", show[l]))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append(", ignoreIdleThreads=")[ FD ]
Line_139 $$ similars = new boolean[threadElementsSnapshotCount]-->Line_147 $$ if (similars[j]) [ FD ]
Line_92 $$ for (int j = 0; j < threadElementsSnapshotCount; j++) -->Line_133 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_155 $$ sb.append(String.format(Locale.ROOT, "  unique snapshot%n"))[ FD ]
Line_21 $$ if (!threadBean.isThreadCpuTimeEnabled()) -->Line_23 $$ threadBean.setThreadCpuTimeEnabled(true)[ CD ]
Line_60 $$ MyThreadInfo data = threadInfos.get(threadId)-->Line_62 $$ data.setDelta(cpu, info)[ FD ]
Line_108 $$ String threadName = null-->Line_119 $$ if (threadName == null) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_5 $$ sb.append("hot_threads is not supported on FreeBSD")[ FD ]
Line_38 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)-->Line_56 $$ if (info == null) [ FD ]
Line_75 $$ if ("cpu".equals(type)) -->Line_77 $$ if ("wait".equals(type)) [ CD ]
Line_77 $$ if ("wait".equals(type)) -->Line_79 $$ if ("block".equals(type)) [ CD ]
Line_137 $$ if (similarity > maxSim) -->Line_138 $$ maxSim = similarity[ CD ]
Line_103 $$ if ("wait".equals(type)) -->Line_105 $$ if ("block".equals(type)) [ CD ]
Line_131 $$ int maxSim = 1-->Line_141 $$ if (similarity == maxSim)[ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_57 $$ threadInfos.remove(threadId)[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_38 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)[ FD ]
Line_156 $$ for (int l = 0; l < show.length; l++) -->Line_161 $$ for (int l = show.length - maxSim; l < show.length; l++) [ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()[ CD ]
Line_147 $$ if (similars[j]) -->Line_148 $$ done[j] = true[ CD ]
Line_92 $$ for (int j = 0; j < threadElementsSnapshotCount; j++) -->Line_134 $$ if (done[j])[ FD ]
Line_136 $$ int similarity = similarity(allInfos[i][t], allInfos[j][t])-->Line_138 $$ maxSim = similarity[ FD ]
Line_128 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_129 $$ if (done[i])[ CD ]
Line_133 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_134 $$ if (done[j])[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_168 $$ return sb.toString()[ FD ]
Line_99 $$ for (int t = 0; t < busiestThreads; t++) -->Line_106 $$ time = hotties.get(t).blockedTime[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_50 $$ long cpu = threadBean.getThreadCpuTime(threadId)[ FD ]
Line_138 $$ maxSim = similarity-->Line_137 $$ if (similarity > maxSim) [ FD ]
Line_100 $$ long time = 0-->Line_104 $$ time = hotties.get(t).waitedTime[ FD ]
Line_111 $$ if (ignoreIdleThreads && isIdleThread(info[t])) -->Line_112 $$ info[t] = null[ CD ]
Line_161 $$ for (int l = show.length - maxSim; l < show.length; l++) -->Line_162 $$ sb.append(String.format(Locale.ROOT, "    %s%n", show[l]))[ CD ]
Line_92 $$ for (int j = 0; j < threadElementsSnapshotCount; j++) -->Line_97 $$ Thread.sleep(threadElementsSnapshotDelay.millis())[ CD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_18 $$ boolean enabledCpu = false[ CD ]
Line_132 $$ boolean[] similars = new boolean[threadElementsSnapshotCount]-->Line_147 $$ if (similars[j]) [ FD ]
Line_104 $$ time = hotties.get(t).waitedTime-->Line_124 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_64 $$ threadInfos.remove(threadId)[ FD ]
Line_99 $$ for (int t = 0; t < busiestThreads; t++) -->Line_104 $$ time = hotties.get(t).waitedTime[ FD ]
Line_136 $$ int similarity = similarity(allInfos[i][t], allInfos[j][t])-->Line_141 $$ if (similarity == maxSim)[ FD ]
Line_146 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_147 $$ if (similars[j]) [ CD ]
Line_138 $$ maxSim = similarity-->Line_160 $$ sb.append(String.format(Locale.ROOT, "  %d/%d snapshots sharing following %d elements%n", count, threadElementsSnapshotCount, maxSim))[ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_55 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_55 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)[ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_15 $$ sb.append(ignoreIdleThreads)[ CD ]
Line_4 $$ if (Constants.FREE_BSD) -->Line_6 $$ return sb.toString()[ CD ]
Line_99 $$ for (int t = 0; t < busiestThreads; t++) -->Line_102 $$ time = hotties.get(t).cpuTime[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_160 $$ sb.append(String.format(Locale.ROOT, "  %d/%d snapshots sharing following %d elements%n", count, threadElementsSnapshotCount, maxSim))[ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_4 $$ if (Constants.FREE_BSD) [ CD ]
Line_100 $$ long time = 0-->Line_124 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_38 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)-->Line_39 $$ if (info == null) [ FD ]
Line_34 $$ long cpu = threadBean.getThreadCpuTime(threadId)-->Line_51 $$ if (cpu == -1) [ FD ]
Line_108 $$ String threadName = null-->Line_124 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_87 $$ for (int i = 0; i < busiestThreads; i++) -->Line_89 $$ ids[i] = info.info.getThreadId()[ CD ]
Line_61 $$ if (data != null) -->Line_64 $$ threadInfos.remove(threadId)[ CD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_45 $$ for (long threadId : threadBean.getAllThreadIds()) [ FD ]
Line_131 $$ int maxSim = 1-->Line_137 $$ if (similarity > maxSim) [ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_38 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)[ FD ]
Line_92 $$ for (int j = 0; j < threadElementsSnapshotCount; j++) -->Line_146 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) [ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_34 $$ long cpu = threadBean.getThreadCpuTime(threadId)[ FD ]
Line_133 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_136 $$ int similarity = similarity(allInfos[i][t], allInfos[j][t])[ CD ]
Line_102 $$ time = hotties.get(t).cpuTime-->Line_124 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_101 $$ if ("cpu".equals(type)) -->Line_102 $$ time = hotties.get(t).cpuTime[ CD ]
Line_20 $$ if (threadBean.isThreadCpuTimeSupported()) -->Line_21 $$ if (!threadBean.isThreadCpuTimeEnabled()) [ CD ]
Line_28 $$ Map<Long, MyThreadInfo> threadInfos = new HashMap()-->Line_57 $$ threadInfos.remove(threadId)[ FD ]
Line_154 $$ if (count == 1) -->Line_155 $$ sb.append(String.format(Locale.ROOT, "  unique snapshot%n"))[ CD ]
Line_34 $$ long cpu = threadBean.getThreadCpuTime(threadId)-->Line_62 $$ data.setDelta(cpu, info)[ FD ]
Line_87 $$ for (int i = 0; i < busiestThreads; i++) -->Line_88 $$ MyThreadInfo info = hotties.get(i)[ FD ]
Line_99 $$ for (int t = 0; t < busiestThreads; t++) -->Line_100 $$ long time = 0[ CD ]
Line_69 $$ final int busiestThreads = Math.min(this.busiestThreads, hotties.size())-->Line_99 $$ for (int t = 0; t < busiestThreads; t++) [ FD ]
Line_28 $$ Map<Long, MyThreadInfo> threadInfos = new HashMap()-->Line_42 $$ threadInfos.put(threadId, new MyThreadInfo(cpu, info))[ FD ]
Line_99 $$ for (int t = 0; t < busiestThreads; t++) -->Line_119 $$ if (threadName == null) [ CD ]
Line_154 $$ if (count == 1) -->Line_160 $$ sb.append(String.format(Locale.ROOT, "  %d/%d snapshots sharing following %d elements%n", count, threadElementsSnapshotCount, maxSim))[ CD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_12 $$ sb.append(", busiestThreads=")[ CD ]
Line_137 $$ if (similarity > maxSim) -->Line_139 $$ similars = new boolean[threadElementsSnapshotCount][ CD ]
Line_99 $$ for (int t = 0; t < busiestThreads; t++) -->Line_101 $$ if ("cpu".equals(type)) [ CD ]
Line_79 $$ if ("block".equals(type)) -->Line_80 $$ return (int) (o2.blockedTime - o1.blockedTime)[ CD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_60 $$ MyThreadInfo data = threadInfos.get(threadId)[ FD ]
Line_102 $$ time = hotties.get(t).cpuTime-->Line_106 $$ time = hotties.get(t).blockedTime[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) [ FD ]
Line_131 $$ int maxSim = 1-->Line_138 $$ maxSim = similarity[ FD ]
Line_92 $$ for (int j = 0; j < threadElementsSnapshotCount; j++) -->Line_147 $$ if (similars[j]) [ FD ]
Line_75 $$ if ("cpu".equals(type)) -->Line_76 $$ return (int) (o2.cpuTime - o1.cpuTime)[ CD ]
Line_170 $$ if (enabledCpu) -->Line_171 $$ threadBean.setThreadCpuTimeEnabled(false)[ CD ]
Line_156 $$ for (int l = 0; l < show.length; l++) -->Line_157 $$ sb.append(String.format(Locale.ROOT, "    %s%n", show[l]))[ CD ]
Line_131 $$ int maxSim = 1-->Line_160 $$ sb.append(String.format(Locale.ROOT, "  %d/%d snapshots sharing following %d elements%n", count, threadElementsSnapshotCount, maxSim))[ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_14 $$ sb.append(", ignoreIdleThreads=")[ CD ]
Line_128 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_131 $$ int maxSim = 1[ CD ]
Line_133 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_147 $$ if (similars[j]) [ FD ]
Line_108 $$ String threadName = null-->Line_115 $$ threadName = info[t].getThreadName()[ FD ]
Line_128 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_132 $$ boolean[] similars = new boolean[threadElementsSnapshotCount][ CD ]
Line_28 $$ Map<Long, MyThreadInfo> threadInfos = new HashMap()-->Line_60 $$ MyThreadInfo data = threadInfos.get(threadId)[ FD ]
Line_60 $$ MyThreadInfo data = threadInfos.get(threadId)-->Line_61 $$ if (data != null) [ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_10 $$ sb.append(", interval=")[ CD ]
Line_38 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)-->Line_62 $$ data.setDelta(cpu, info)[ FD ]
Line_99 $$ for (int t = 0; t < busiestThreads; t++) -->Line_108 $$ String threadName = null[ CD ]
Line_128 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_146 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) [ CD ]
