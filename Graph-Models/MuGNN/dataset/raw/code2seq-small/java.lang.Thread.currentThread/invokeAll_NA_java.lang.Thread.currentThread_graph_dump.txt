Line_5 $$ for (Future<? extends V> future : futures) -->Line_7 $$ results.add(new Result<V>(future.get(), null))[ FD ]
Line_3 $$ List<Result<V>> results = ContainerUtil.newArrayListWithCapacity(futures.size())-->Line_9 $$ results.add(new Result<V>(null, e))[ FD ]
Line_3 $$ List<Result<V>> results = ContainerUtil.newArrayListWithCapacity(futures.size())-->Line_7 $$ results.add(new Result<V>(future.get(), null))[ FD ]
Line_2 $$ public static <V> Collection<Result<V>> invokeAll(@NotNull Collection<? extends Future<? extends V>> futures) -->Line_3 $$ List<Result<V>> results = ContainerUtil.newArrayListWithCapacity(futures.size())[ CD ]
Line_2 $$ public static <V> Collection<Result<V>> invokeAll(@NotNull Collection<? extends Future<? extends V>> futures) -->Line_3 $$ List<Result<V>> results = ContainerUtil.newArrayListWithCapacity(futures.size())[ FD ]
Line_2 $$ public static <V> Collection<Result<V>> invokeAll(@NotNull Collection<? extends Future<? extends V>> futures) -->Line_16 $$ return results[ CD ]
