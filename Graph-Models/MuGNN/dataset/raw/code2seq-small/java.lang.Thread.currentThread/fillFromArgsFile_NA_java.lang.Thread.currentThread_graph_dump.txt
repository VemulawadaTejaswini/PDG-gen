Line_4 $$ BufferedReader reader = null-->Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))[ FD ]
Line_20 $$ if (line.equals("class2src")) -->Line_21 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) [ CD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_13 $$ if (!GroovyRtConstants.SRC_FILE.equals(line)) [ CD ]
Line_11 $$ String line-->Line_12 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_37 $$ addExceptionInfo(compilerMessages, e, "Couldn't instantiate " + s)[ FD ]
Line_47 $$ line = reader.readLine()-->Line_42 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) [ FD ]
Line_21 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_40 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) [ FD ]
Line_21 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_42 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) [ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_13 $$ if (!GroovyRtConstants.SRC_FILE.equals(line)) [ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_21 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) [ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_5 $$ FileInputStream stream[ CD ]
Line_11 $$ String line-->Line_44 $$ if (line.startsWith(GroovyRtConstants.FINAL_OUTPUTPATH)) [ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_24 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) [ FD ]
Line_19 $$ while (line != null) -->Line_20 $$ if (line.equals("class2src")) [ CD ]
Line_47 $$ line = reader.readLine()-->Line_24 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) [ FD ]
Line_4 $$ BufferedReader reader = null-->Line_47 $$ line = reader.readLine()[ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_19 $$ while (line != null) [ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_4 $$ BufferedReader reader = null[ CD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_22 $$ class2File.put(line, new File(reader.readLine()))[ FD ]
Line_4 $$ BufferedReader reader = null-->Line_21 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) [ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_20 $$ if (line.equals("class2src")) [ FD ]
Line_11 $$ String line-->Line_22 $$ class2File.put(line, new File(reader.readLine()))[ FD ]
Line_24 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) -->Line_25 $$ final ClassLoader classLoader = Thread.currentThread().getContextClassLoader()[ CD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_31 $$ patchers.add(patcher)[ FD ]
Line_21 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_22 $$ class2File.put(line, new File(reader.readLine()))[ CD ]
Line_42 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) -->Line_44 $$ if (line.startsWith(GroovyRtConstants.FINAL_OUTPUTPATH)) [ CD ]
Line_11 $$ String line-->Line_40 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) [ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_33 $$ addExceptionInfo(compilerMessages, e, "Couldn't instantiate " + s)[ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_62 $$ return moduleClasspath[ CD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_3 $$ String moduleClasspath = null[ CD ]
Line_5 $$ FileInputStream stream-->Line_7 $$ stream = new FileInputStream(argsFile)[ FD ]
Line_11 $$ String line-->Line_24 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) [ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_16 $$ final File file = new File(reader.readLine())[ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_44 $$ if (line.startsWith(GroovyRtConstants.FINAL_OUTPUTPATH)) [ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_42 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) [ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_59 $$ argsFile.delete()[ FD ]
Line_20 $$ if (line.equals("class2src")) -->Line_24 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) [ CD ]
Line_21 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_24 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) [ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_40 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) [ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_55 $$ reader.close()[ FD ]
Line_21 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_22 $$ class2File.put(line, new File(reader.readLine()))[ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_43 $$ compilerConfiguration.setTargetDirectory(reader.readLine())[ FD ]
Line_4 $$ BufferedReader reader = null-->Line_45 $$ finalOutputs[0] = reader.readLine()[ FD ]
Line_4 $$ BufferedReader reader = null-->Line_16 $$ final File file = new File(reader.readLine())[ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_27 $$ while (!GroovyRtConstants.END.equals(s = reader.readLine())) [ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_17 $$ srcFiles.add(file)[ FD ]
Line_44 $$ if (line.startsWith(GroovyRtConstants.FINAL_OUTPUTPATH)) -->Line_45 $$ finalOutputs[0] = reader.readLine()[ CD ]
Line_4 $$ BufferedReader reader = null-->Line_27 $$ while (!GroovyRtConstants.END.equals(s = reader.readLine())) [ FD ]
Line_30 $$ final CompilationUnitPatcher patcher = (CompilationUnitPatcher) patcherClass.newInstance()-->Line_31 $$ patchers.add(patcher)[ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_41 $$ compilerConfiguration.setSourceEncoding(reader.readLine())[ FD ]
Line_47 $$ line = reader.readLine()-->Line_44 $$ if (line.startsWith(GroovyRtConstants.FINAL_OUTPUTPATH)) [ FD ]
Line_42 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) -->Line_43 $$ compilerConfiguration.setTargetDirectory(reader.readLine())[ CD ]
Line_40 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) -->Line_42 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) [ CD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_17 $$ srcFiles.add(file)[ CD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_47 $$ line = reader.readLine()[ FD ]
Line_24 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) -->Line_40 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) [ CD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_47 $$ line = reader.readLine()[ FD ]
Line_29 $$ final Class<?> patcherClass = classLoader.loadClass(s)-->Line_30 $$ final CompilationUnitPatcher patcher = (CompilationUnitPatcher) patcherClass.newInstance()[ FD ]
Line_47 $$ line = reader.readLine()-->Line_40 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) [ FD ]
Line_11 $$ String line-->Line_19 $$ while (line != null) [ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_12 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_45 $$ finalOutputs[0] = reader.readLine()[ FD ]
Line_11 $$ String line-->Line_42 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) [ FD ]
Line_21 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_44 $$ if (line.startsWith(GroovyRtConstants.FINAL_OUTPUTPATH)) [ FD ]
Line_4 $$ BufferedReader reader = null-->Line_22 $$ class2File.put(line, new File(reader.readLine()))[ FD ]
Line_4 $$ BufferedReader reader = null-->Line_55 $$ reader.close()[ FD ]
Line_4 $$ BufferedReader reader = null-->Line_12 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_11 $$ String line-->Line_21 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) [ FD ]
Line_4 $$ BufferedReader reader = null-->Line_41 $$ compilerConfiguration.setSourceEncoding(reader.readLine())[ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_35 $$ addExceptionInfo(compilerMessages, e, "Couldn't instantiate " + s)[ FD ]
Line_47 $$ line = reader.readLine()-->Line_19 $$ while (line != null) [ FD ]
Line_47 $$ line = reader.readLine()-->Line_20 $$ if (line.equals("class2src")) [ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_22 $$ class2File.put(line, new File(reader.readLine()))[ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_43 $$ compilerConfiguration.setTargetDirectory(reader.readLine())[ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_22 $$ class2File.put(line, new File(reader.readLine()))[ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_21 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) [ FD ]
Line_11 $$ String line-->Line_47 $$ line = reader.readLine()[ FD ]
Line_11 $$ String line-->Line_20 $$ if (line.equals("class2src")) [ FD ]
Line_19 $$ while (line != null) -->Line_47 $$ line = reader.readLine()[ CD ]
Line_21 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_47 $$ line = reader.readLine()[ FD ]
Line_12 $$ while ((line = reader.readLine()) != null) -->Line_16 $$ final File file = new File(reader.readLine())[ CD ]
Line_40 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) -->Line_41 $$ compilerConfiguration.setSourceEncoding(reader.readLine())[ CD ]
Line_4 $$ BufferedReader reader = null-->Line_43 $$ compilerConfiguration.setTargetDirectory(reader.readLine())[ FD ]
Line_11 $$ String line-->Line_13 $$ if (!GroovyRtConstants.SRC_FILE.equals(line)) [ FD ]
Line_24 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) -->Line_27 $$ while (!GroovyRtConstants.END.equals(s = reader.readLine())) [ CD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_41 $$ compilerConfiguration.setSourceEncoding(reader.readLine())[ FD ]
Line_16 $$ final File file = new File(reader.readLine())-->Line_17 $$ srcFiles.add(file)[ FD ]
