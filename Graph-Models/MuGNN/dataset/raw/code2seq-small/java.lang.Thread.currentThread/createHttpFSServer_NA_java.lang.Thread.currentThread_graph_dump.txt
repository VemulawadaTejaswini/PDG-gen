Line_2 $$ private void createHttpFSServer() throws Exception -->Line_29 $$ File httpfsSite = new File(new File(homeDir, "conf"), "httpfs-site.xml")[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_7 $$ HttpFSServerWebApp.setHomeDirForCurrentThread(homeDir.getAbsolutePath())[ CD ]
Line_24 $$ conf = new Configuration(false)-->Line_31 $$ conf.writeXml(os)[ FD ]
Line_24 $$ conf = new Configuration(false)-->Line_25 $$ conf.set("httpfs.hadoop.config.dir", hadoopConfDir.toString())[ FD ]
Line_21 $$ OutputStream os = new FileOutputStream(hdfsSite)-->Line_32 $$ os.close()[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_11 $$ w.close()[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_17 $$ Configuration conf = new Configuration(false)[ CD ]
Line_34 $$ URL url = cl.getResource("webapp")-->Line_38 $$ WebAppContext context = new WebAppContext(url.getPath(), "/webhdfs")[ FD ]
Line_39 $$ Server server = TestJettyHelper.getJettyServer()-->Line_41 $$ server.start()[ FD ]
Line_17 $$ Configuration conf = new Configuration(false)-->Line_18 $$ conf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, fsDefaultName)[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_27 $$ conf.set("httpfs.proxyuser." + HadoopUsersConfTestHelper.getHadoopProxyUser() + ".hosts", HadoopUsersConfTestHelper.getHadoopProxyUserHosts())[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_24 $$ conf = new Configuration(false)[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_41 $$ server.start()[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_22 $$ conf.writeXml(os)[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_40 $$ server.addHandler(context)[ CD ]
Line_3 $$ File homeDir = TestDirHelper.getTestDir()-->Line_7 $$ HttpFSServerWebApp.setHomeDirForCurrentThread(homeDir.getAbsolutePath())[ FD ]
Line_30 $$ os = new FileOutputStream(httpfsSite)-->Line_32 $$ os.close()[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_6 $$ Assert.assertTrue(new File(homeDir, "temp").mkdir())[ CD ]
Line_30 $$ os = new FileOutputStream(httpfsSite)-->Line_31 $$ conf.writeXml(os)[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_38 $$ WebAppContext context = new WebAppContext(url.getPath(), "/webhdfs")[ CD ]
Line_33 $$ ClassLoader cl = Thread.currentThread().getContextClassLoader()-->Line_34 $$ URL url = cl.getResource("webapp")[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_28 $$ conf.set("httpfs.authentication.signature.secret.file", secretFile.getAbsolutePath())[ CD ]
Line_8 $$ File secretFile = new File(new File(homeDir, "conf"), "secret")-->Line_28 $$ conf.set("httpfs.authentication.signature.secret.file", secretFile.getAbsolutePath())[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_39 $$ Server server = TestJettyHelper.getJettyServer()[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_12 $$ File hadoopConfDir = new File(new File(homeDir, "conf"), "hadoop-conf")[ CD ]
Line_17 $$ Configuration conf = new Configuration(false)-->Line_22 $$ conf.writeXml(os)[ FD ]
Line_9 $$ Writer w = new FileWriter(secretFile)-->Line_11 $$ w.close()[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_26 $$ conf.set("httpfs.proxyuser." + HadoopUsersConfTestHelper.getHadoopProxyUser() + ".groups", HadoopUsersConfTestHelper.getHadoopProxyUserGroups())[ CD ]
Line_17 $$ Configuration conf = new Configuration(false)-->Line_26 $$ conf.set("httpfs.proxyuser." + HadoopUsersConfTestHelper.getHadoopProxyUser() + ".groups", HadoopUsersConfTestHelper.getHadoopProxyUserGroups())[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_3 $$ File homeDir = TestDirHelper.getTestDir()[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_23 $$ os.close()[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_4 $$ Assert.assertTrue(new File(homeDir, "conf").mkdir())[ CD ]
Line_24 $$ conf = new Configuration(false)-->Line_26 $$ conf.set("httpfs.proxyuser." + HadoopUsersConfTestHelper.getHadoopProxyUser() + ".groups", HadoopUsersConfTestHelper.getHadoopProxyUserGroups())[ FD ]
Line_12 $$ File hadoopConfDir = new File(new File(homeDir, "conf"), "hadoop-conf")-->Line_25 $$ conf.set("httpfs.hadoop.config.dir", hadoopConfDir.toString())[ FD ]
Line_17 $$ Configuration conf = new Configuration(false)-->Line_28 $$ conf.set("httpfs.authentication.signature.secret.file", secretFile.getAbsolutePath())[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_10 $$ w.write("secret")[ CD ]
Line_24 $$ conf = new Configuration(false)-->Line_28 $$ conf.set("httpfs.authentication.signature.secret.file", secretFile.getAbsolutePath())[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_25 $$ conf.set("httpfs.hadoop.config.dir", hadoopConfDir.toString())[ CD ]
Line_21 $$ OutputStream os = new FileOutputStream(hdfsSite)-->Line_22 $$ conf.writeXml(os)[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_21 $$ OutputStream os = new FileOutputStream(hdfsSite)[ CD ]
Line_17 $$ Configuration conf = new Configuration(false)-->Line_25 $$ conf.set("httpfs.hadoop.config.dir", hadoopConfDir.toString())[ FD ]
Line_12 $$ File hadoopConfDir = new File(new File(homeDir, "conf"), "hadoop-conf")-->Line_13 $$ if (!hadoopConfDir.mkdirs()) [ FD ]
Line_24 $$ conf = new Configuration(false)-->Line_27 $$ conf.set("httpfs.proxyuser." + HadoopUsersConfTestHelper.getHadoopProxyUser() + ".hosts", HadoopUsersConfTestHelper.getHadoopProxyUserHosts())[ FD ]
Line_21 $$ OutputStream os = new FileOutputStream(hdfsSite)-->Line_30 $$ os = new FileOutputStream(httpfsSite)[ FD ]
Line_21 $$ OutputStream os = new FileOutputStream(hdfsSite)-->Line_31 $$ conf.writeXml(os)[ FD ]
Line_39 $$ Server server = TestJettyHelper.getJettyServer()-->Line_40 $$ server.addHandler(context)[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_35 $$ if (url == null) [ CD ]
Line_9 $$ Writer w = new FileWriter(secretFile)-->Line_10 $$ w.write("secret")[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_20 $$ File hdfsSite = new File(hadoopConfDir, "hdfs-site.xml")[ CD ]
Line_38 $$ WebAppContext context = new WebAppContext(url.getPath(), "/webhdfs")-->Line_40 $$ server.addHandler(context)[ FD ]
Line_34 $$ URL url = cl.getResource("webapp")-->Line_35 $$ if (url == null) [ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_32 $$ os.close()[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_16 $$ String fsDefaultName = nnConf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY)[ CD ]
Line_17 $$ Configuration conf = new Configuration(false)-->Line_24 $$ conf = new Configuration(false)[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_31 $$ conf.writeXml(os)[ CD ]
Line_16 $$ String fsDefaultName = nnConf.get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY)-->Line_18 $$ conf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, fsDefaultName)[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_30 $$ os = new FileOutputStream(httpfsSite)[ CD ]
Line_17 $$ Configuration conf = new Configuration(false)-->Line_19 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY, false)[ FD ]
Line_17 $$ Configuration conf = new Configuration(false)-->Line_31 $$ conf.writeXml(os)[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_13 $$ if (!hadoopConfDir.mkdirs()) [ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_18 $$ conf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, fsDefaultName)[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_8 $$ File secretFile = new File(new File(homeDir, "conf"), "secret")[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_19 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY, false)[ CD ]
Line_21 $$ OutputStream os = new FileOutputStream(hdfsSite)-->Line_23 $$ os.close()[ FD ]
Line_17 $$ Configuration conf = new Configuration(false)-->Line_27 $$ conf.set("httpfs.proxyuser." + HadoopUsersConfTestHelper.getHadoopProxyUser() + ".hosts", HadoopUsersConfTestHelper.getHadoopProxyUserHosts())[ FD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_5 $$ Assert.assertTrue(new File(homeDir, "log").mkdir())[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_34 $$ URL url = cl.getResource("webapp")[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_33 $$ ClassLoader cl = Thread.currentThread().getContextClassLoader()[ CD ]
Line_2 $$ private void createHttpFSServer() throws Exception -->Line_9 $$ Writer w = new FileWriter(secretFile)[ CD ]
