Line_56 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_60 $$ allArtifacts.addAll(artifacts)[ CD ]
Line_45 $$ ArtifactResolutionRequest collectionRequest = request-->Line_74 $$ collectionRequest.setProxies(request.getProxies())[ FD ]
Line_46 $$ if (request.isResolveTransitively()) -->Line_49 $$ metadataRequest.setResolveManagedVersions(managedVersions == null)[ CD ]
Line_7 $$ Set<Artifact> artifacts = request.getArtifactDependencies()-->Line_60 $$ allArtifacts.addAll(artifacts)[ FD ]
Line_47 $$ MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request)-->Line_48 $$ metadataRequest.setArtifact(rootArtifact)[ FD ]
Line_6 $$ Artifact rootArtifact = request.getArtifact()-->Line_77 $$ ArtifactResolutionException are = new ArtifactResolutionException("Unable to get dependency information for " + rootArtifact.getId() + ": " + e.getMessage(), rootArtifact, metadataRequest.getRemoteRepositories(), e)[ FD ]
Line_46 $$ if (request.isResolveTransitively()) -->Line_47 $$ MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request)[ CD ]
Line_45 $$ ArtifactResolutionRequest collectionRequest = request-->Line_75 $$ collectionRequest.setRemoteRepositories(resolutionGroup.getResolutionRepositories())[ FD ]
Line_62 $$ Map<String, Artifact> mergedArtifacts = new LinkedHashMap<String, Artifact>()-->Line_66 $$ mergedArtifacts.put(conflictId, artifact)[ FD ]
Line_9 $$ List<ResolutionListener> listeners = request.getListeners()-->Line_21 $$ if (listeners == null) [ FD ]
Line_6 $$ Artifact rootArtifact = request.getArtifact()-->Line_118 $$ allArtifacts.add(rootArtifact)[ FD ]
Line_7 $$ Set<Artifact> artifacts = request.getArtifactDependencies()-->Line_69 $$ artifacts = new LinkedHashSet<Artifact>(mergedArtifacts.values())[ FD ]
Line_28 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_41 $$ result.addMissingArtifact(request.getArtifact())[ FD ]
Line_8 $$ Map<String, Artifact> managedVersions = request.getManagedVersionMap()-->Line_52 $$ if (managedVersions == null) [ FD ]
Line_55 $$ Set<Artifact> directArtifacts = resolutionGroup.getArtifacts()-->Line_61 $$ allArtifacts.addAll(directArtifacts)[ FD ]
Line_9 $$ List<ResolutionListener> listeners = request.getListeners()-->Line_24 $$ listeners.add(new DebugResolutionListener(logger))[ FD ]
Line_12 $$ RepositorySystemSession session = getSession(request.getLocalRepository())-->Line_36 $$ resolve(rootArtifact, request.getRemoteRepositories(), session)[ FD ]
Line_11 $$ ArtifactFilter resolutionFilter = request.getResolutionFilter()-->Line_101 $$ if (resolutionFilter == null || resolutionFilter.include(artifact)) [ FD ]
Line_99 $$ for (ResolutionNode node : result.getArtifactResolutionNodes()) -->Line_100 $$ Artifact artifact = node.getArtifact()[ FD ]
Line_47 $$ MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request)-->Line_51 $$ ResolutionGroup resolutionGroup = source.retrieve(metadataRequest)[ FD ]
Line_77 $$ ArtifactResolutionException are = new ArtifactResolutionException("Unable to get dependency information for " + rootArtifact.getId() + ": " + e.getMessage(), rootArtifact, metadataRequest.getRemoteRepositories(), e)-->Line_78 $$ result.addMetadataResolutionException(are)[ FD ]
Line_28 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_120 $$ result.setArtifacts(allArtifacts)[ FD ]
Line_28 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_98 $$ CountDownLatch latch = new CountDownLatch(result.getArtifactResolutionNodes().size())[ FD ]
Line_21 $$ if (listeners == null) -->Line_23 $$ if (logger.isDebugEnabled()) [ CD ]
Line_56 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_59 $$ List<Artifact> allArtifacts = new ArrayList<Artifact>()[ CD ]
Line_64 $$ String conflictId = artifact.getDependencyConflictId()-->Line_65 $$ if (!mergedArtifacts.containsKey(conflictId)) [ FD ]
Line_45 $$ ArtifactResolutionRequest collectionRequest = request-->Line_72 $$ collectionRequest.setServers(request.getServers())[ FD ]
Line_82 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_83 $$ if (request.isResolveRoot()) [ CD ]
Line_28 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_78 $$ result.addMetadataResolutionException(are)[ FD ]
Line_62 $$ Map<String, Artifact> mergedArtifacts = new LinkedHashMap<String, Artifact>()-->Line_65 $$ if (!mergedArtifacts.containsKey(conflictId)) [ FD ]
Line_56 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_62 $$ Map<String, Artifact> mergedArtifacts = new LinkedHashMap<String, Artifact>()[ CD ]
Line_96 $$ if (result.getArtifactResolutionNodes() != null) -->Line_97 $$ ClassLoader classLoader = Thread.currentThread().getContextClassLoader()[ CD ]
Line_8 $$ Map<String, Artifact> managedVersions = request.getManagedVersionMap()-->Line_53 $$ managedVersions = resolutionGroup.getManagedVersions()[ FD ]
Line_101 $$ if (resolutionFilter == null || resolutionFilter.include(artifact)) -->Line_104 $$ latch.countDown()[ CD ]
Line_59 $$ List<Artifact> allArtifacts = new ArrayList<Artifact>()-->Line_118 $$ allArtifacts.add(rootArtifact)[ FD ]
Line_46 $$ if (request.isResolveTransitively()) -->Line_48 $$ metadataRequest.setArtifact(rootArtifact)[ CD ]
Line_22 $$ listeners = new ArrayList<ResolutionListener>()-->Line_24 $$ listeners.add(new DebugResolutionListener(logger))[ FD ]
Line_21 $$ if (listeners == null) -->Line_22 $$ listeners = new ArrayList<ResolutionListener>()[ CD ]
Line_52 $$ if (managedVersions == null) -->Line_53 $$ managedVersions = resolutionGroup.getManagedVersions()[ CD ]
Line_51 $$ ResolutionGroup resolutionGroup = source.retrieve(metadataRequest)-->Line_55 $$ Set<Artifact> directArtifacts = resolutionGroup.getArtifacts()[ FD ]
Line_7 $$ Set<Artifact> artifacts = request.getArtifactDependencies()-->Line_82 $$ if (artifacts == null || artifacts.isEmpty()) [ FD ]
Line_62 $$ Map<String, Artifact> mergedArtifacts = new LinkedHashMap<String, Artifact>()-->Line_69 $$ artifacts = new LinkedHashSet<Artifact>(mergedArtifacts.values())[ FD ]
Line_47 $$ MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request)-->Line_77 $$ ArtifactResolutionException are = new ArtifactResolutionException("Unable to get dependency information for " + rootArtifact.getId() + ": " + e.getMessage(), rootArtifact, metadataRequest.getRemoteRepositories(), e)[ FD ]
Line_28 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_84 $$ result.addArtifact(rootArtifact)[ FD ]
Line_57 $$ artifacts = directArtifacts-->Line_82 $$ if (artifacts == null || artifacts.isEmpty()) [ FD ]
Line_82 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_86 $$ return result[ CD ]
Line_98 $$ CountDownLatch latch = new CountDownLatch(result.getArtifactResolutionNodes().size())-->Line_108 $$ latch.await()[ FD ]
Line_65 $$ if (!mergedArtifacts.containsKey(conflictId)) -->Line_66 $$ mergedArtifacts.put(conflictId, artifact)[ CD ]
Line_71 $$ collectionRequest = new ArtifactResolutionRequest(request)-->Line_75 $$ collectionRequest.setRemoteRepositories(resolutionGroup.getResolutionRepositories())[ FD ]
Line_56 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_69 $$ artifacts = new LinkedHashSet<Artifact>(mergedArtifacts.values())[ CD ]
Line_63 $$ for (Artifact artifact : allArtifacts) -->Line_64 $$ String conflictId = artifact.getDependencyConflictId()[ FD ]
Line_28 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_119 $$ allArtifacts.addAll(result.getArtifacts())[ FD ]
Line_101 $$ if (resolutionFilter == null || resolutionFilter.include(artifact)) -->Line_102 $$ executor.execute(new ResolveTask(classLoader, latch, artifact, session, node.getRemoteRepositories(), result))[ CD ]
Line_63 $$ for (Artifact artifact : allArtifacts) -->Line_101 $$ if (resolutionFilter == null || resolutionFilter.include(artifact)) [ FD ]
Line_56 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_61 $$ allArtifacts.addAll(directArtifacts)[ CD ]
Line_64 $$ String conflictId = artifact.getDependencyConflictId()-->Line_66 $$ mergedArtifacts.put(conflictId, artifact)[ FD ]
Line_7 $$ Set<Artifact> artifacts = request.getArtifactDependencies()-->Line_57 $$ artifacts = directArtifacts[ FD ]
Line_9 $$ List<ResolutionListener> listeners = request.getListeners()-->Line_26 $$ listeners.add(new WarningResolutionListener(logger))[ FD ]
Line_59 $$ List<Artifact> allArtifacts = new ArrayList<Artifact>()-->Line_119 $$ allArtifacts.addAll(result.getArtifacts())[ FD ]
Line_28 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_99 $$ for (ResolutionNode node : result.getArtifactResolutionNodes()) [ FD ]
Line_51 $$ ResolutionGroup resolutionGroup = source.retrieve(metadataRequest)-->Line_75 $$ collectionRequest.setRemoteRepositories(resolutionGroup.getResolutionRepositories())[ FD ]
Line_22 $$ listeners = new ArrayList<ResolutionListener>()-->Line_26 $$ listeners.add(new WarningResolutionListener(logger))[ FD ]
Line_59 $$ List<Artifact> allArtifacts = new ArrayList<Artifact>()-->Line_60 $$ allArtifacts.addAll(artifacts)[ FD ]
Line_9 $$ List<ResolutionListener> listeners = request.getListeners()-->Line_22 $$ listeners = new ArrayList<ResolutionListener>()[ FD ]
Line_98 $$ CountDownLatch latch = new CountDownLatch(result.getArtifactResolutionNodes().size())-->Line_104 $$ latch.countDown()[ FD ]
Line_59 $$ List<Artifact> allArtifacts = new ArrayList<Artifact>()-->Line_61 $$ allArtifacts.addAll(directArtifacts)[ FD ]
Line_28 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_38 $$ result.addErrorArtifactException(e)[ FD ]
Line_28 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_96 $$ if (result.getArtifactResolutionNodes() != null) [ FD ]
Line_71 $$ collectionRequest = new ArtifactResolutionRequest(request)-->Line_73 $$ collectionRequest.setMirrors(request.getMirrors())[ FD ]
Line_21 $$ if (listeners == null) -->Line_26 $$ listeners.add(new WarningResolutionListener(logger))[ CD ]
Line_63 $$ for (Artifact artifact : allArtifacts) -->Line_66 $$ mergedArtifacts.put(conflictId, artifact)[ FD ]
Line_45 $$ ArtifactResolutionRequest collectionRequest = request-->Line_73 $$ collectionRequest.setMirrors(request.getMirrors())[ FD ]
Line_56 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_57 $$ artifacts = directArtifacts[ CD ]
Line_59 $$ List<Artifact> allArtifacts = new ArrayList<Artifact>()-->Line_120 $$ result.setArtifacts(allArtifacts)[ FD ]
Line_69 $$ artifacts = new LinkedHashSet<Artifact>(mergedArtifacts.values())-->Line_82 $$ if (artifacts == null || artifacts.isEmpty()) [ FD ]
Line_6 $$ Artifact rootArtifact = request.getArtifact()-->Line_84 $$ result.addArtifact(rootArtifact)[ FD ]
Line_99 $$ for (ResolutionNode node : result.getArtifactResolutionNodes()) -->Line_102 $$ executor.execute(new ResolveTask(classLoader, latch, artifact, session, node.getRemoteRepositories(), result))[ FD ]
Line_28 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_110 $$ result.addErrorArtifactException(new ArtifactResolutionException("Resolution interrupted", rootArtifact, e))[ FD ]
Line_71 $$ collectionRequest = new ArtifactResolutionRequest(request)-->Line_74 $$ collectionRequest.setProxies(request.getProxies())[ FD ]
Line_45 $$ ArtifactResolutionRequest collectionRequest = request-->Line_71 $$ collectionRequest = new ArtifactResolutionRequest(request)[ FD ]
Line_57 $$ artifacts = directArtifacts-->Line_69 $$ artifacts = new LinkedHashSet<Artifact>(mergedArtifacts.values())[ FD ]
Line_6 $$ Artifact rootArtifact = request.getArtifact()-->Line_36 $$ resolve(rootArtifact, request.getRemoteRepositories(), session)[ FD ]
Line_6 $$ Artifact rootArtifact = request.getArtifact()-->Line_48 $$ metadataRequest.setArtifact(rootArtifact)[ FD ]
Line_51 $$ ResolutionGroup resolutionGroup = source.retrieve(metadataRequest)-->Line_53 $$ managedVersions = resolutionGroup.getManagedVersions()[ FD ]
Line_96 $$ if (result.getArtifactResolutionNodes() != null) -->Line_98 $$ CountDownLatch latch = new CountDownLatch(result.getArtifactResolutionNodes().size())[ CD ]
Line_47 $$ MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request)-->Line_49 $$ metadataRequest.setResolveManagedVersions(managedVersions == null)[ FD ]
Line_57 $$ artifacts = directArtifacts-->Line_60 $$ allArtifacts.addAll(artifacts)[ FD ]
Line_83 $$ if (request.isResolveRoot()) -->Line_84 $$ result.addArtifact(rootArtifact)[ CD ]
Line_55 $$ Set<Artifact> directArtifacts = resolutionGroup.getArtifacts()-->Line_57 $$ artifacts = directArtifacts[ FD ]
Line_23 $$ if (logger.isDebugEnabled()) -->Line_24 $$ listeners.add(new DebugResolutionListener(logger))[ CD ]
Line_7 $$ Set<Artifact> artifacts = request.getArtifactDependencies()-->Line_56 $$ if (artifacts == null || artifacts.isEmpty()) [ FD ]
Line_71 $$ collectionRequest = new ArtifactResolutionRequest(request)-->Line_72 $$ collectionRequest.setServers(request.getServers())[ FD ]
