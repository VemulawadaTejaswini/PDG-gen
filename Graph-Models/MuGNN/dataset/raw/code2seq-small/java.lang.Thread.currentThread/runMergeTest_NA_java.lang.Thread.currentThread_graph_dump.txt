Line_21 $$ submittedJob = client.submitJob(job)-->Line_32 $$ verifyOutput(submittedJob, fileSystem)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_7 $$ FileInputFormat.setInputPaths(job, INPUT_DIR)[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_18 $$ job.setNumReduceTasks(NUM_REDUCERS)[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_12 $$ job.setMapOutputValueClass(Text.class)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_23 $$ if (!client.monitorAndPrintJob(job, submittedJob)) [ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_10 $$ job.setInputFormat(TextInputFormat.class)[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_13 $$ job.setOutputKeyClass(Text.class)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_9 $$ job.set("mapreduce.output.textoutputformat.separator", " ")[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_11 $$ job.setMapOutputKeyClass(Text.class)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_19 $$ job.set(JobContext.MAP_OUTPUT_COLLECTOR_CLASS_ATTR, MapOutputCopier.class.getName())[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_15 $$ job.setMapperClass(MyMapper.class)[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_16 $$ job.setPartitionerClass(MyPartitioner.class)[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_11 $$ job.setMapOutputKeyClass(Text.class)[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_3 $$ fileSystem.delete(OUTPUT, true)[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_14 $$ job.setOutputValueClass(Text.class)[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_5 $$ JobClient client = new JobClient(job)[ CD ]
Line_21 $$ submittedJob = client.submitJob(job)-->Line_23 $$ if (!client.monitorAndPrintJob(job, submittedJob)) [ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_10 $$ job.setInputFormat(TextInputFormat.class)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_12 $$ job.setMapOutputValueClass(Text.class)[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_7 $$ FileInputFormat.setInputPaths(job, INPUT_DIR)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_17 $$ job.setOutputFormat(TextOutputFormat.class)[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_4 $$ job.setJobName("MergeTest")[ CD ]
Line_5 $$ JobClient client = new JobClient(job)-->Line_21 $$ submittedJob = client.submitJob(job)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_14 $$ job.setOutputValueClass(Text.class)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_32 $$ verifyOutput(submittedJob, fileSystem)[ FD ]
Line_6 $$ RunningJob submittedJob = null-->Line_23 $$ if (!client.monitorAndPrintJob(job, submittedJob)) [ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_13 $$ job.setOutputKeyClass(Text.class)[ CD ]
Line_6 $$ RunningJob submittedJob = null-->Line_32 $$ verifyOutput(submittedJob, fileSystem)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_18 $$ job.setNumReduceTasks(NUM_REDUCERS)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_8 $$ FileOutputFormat.setOutputPath(job, OUTPUT)[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_16 $$ job.setPartitionerClass(MyPartitioner.class)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_8 $$ FileOutputFormat.setOutputPath(job, OUTPUT)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_17 $$ job.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_15 $$ job.setMapperClass(MyMapper.class)[ FD ]
Line_5 $$ JobClient client = new JobClient(job)-->Line_23 $$ if (!client.monitorAndPrintJob(job, submittedJob)) [ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_3 $$ fileSystem.delete(OUTPUT, true)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_19 $$ job.set(JobContext.MAP_OUTPUT_COLLECTOR_CLASS_ATTR, MapOutputCopier.class.getName())[ CD ]
Line_6 $$ RunningJob submittedJob = null-->Line_21 $$ submittedJob = client.submitJob(job)[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_9 $$ job.set("mapreduce.output.textoutputformat.separator", " ")[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_6 $$ RunningJob submittedJob = null[ CD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_4 $$ job.setJobName("MergeTest")[ FD ]
Line_2 $$ private void runMergeTest(JobConf job, FileSystem fileSystem) throws Exception -->Line_21 $$ submittedJob = client.submitJob(job)[ FD ]
