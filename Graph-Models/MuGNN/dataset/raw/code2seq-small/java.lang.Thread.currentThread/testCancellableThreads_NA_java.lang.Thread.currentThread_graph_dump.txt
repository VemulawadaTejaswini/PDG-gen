Line_64 $$ for (int i = 0; i < threads.length; i++) -->Line_79 $$ assertThat(interrupted[plan.id], Matchers.equalTo(plan.presetInterrupt))[ CD ]
Line_10 $$ final TestPlan plan = new TestPlan(i)-->Line_25 $$ if (plan.exceptBeforeCancel) [ FD ]
Line_10 $$ final TestPlan plan = new TestPlan(i)-->Line_11 $$ plans[i] = plan[ FD ]
Line_7 $$ final CancellableThreads cancellableThreads = new CancellableThreads()-->Line_59 $$ cancellableThreads.cancel("test")[ FD ]
Line_65 $$ TestPlan plan = plans[i]-->Line_68 $$ if (plan.exitBeforeCancel) [ FD ]
Line_2 $$ public void testCancellableThreads() throws InterruptedException -->Line_7 $$ final CancellableThreads cancellableThreads = new CancellableThreads()[ CD ]
Line_12 $$ threads[i] = new Thread(new Runnable() -->Line_52 $$ interrupted[plan.id] = Thread.currentThread().isInterrupted()[ CD ]
Line_2 $$ public void testCancellableThreads() throws InterruptedException -->Line_6 $$ final boolean[] interrupted = new boolean[threads.length][ CD ]
Line_2 $$ public void testCancellableThreads() throws InterruptedException -->Line_9 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_2 $$ public void testCancellableThreads() throws InterruptedException -->Line_58 $$ readyForCancel.await()[ CD ]
Line_32 $$ if (plan.busySpin) -->Line_33 $$ while (!Thread.currentThread().isInterrupted()) [ CD ]
Line_10 $$ final TestPlan plan = new TestPlan(i)-->Line_68 $$ if (plan.exitBeforeCancel) [ FD ]
Line_10 $$ final TestPlan plan = new TestPlan(i)-->Line_32 $$ if (plan.busySpin) [ FD ]
Line_66 $$ if (plan.exceptBeforeCancel) -->Line_68 $$ if (plan.exitBeforeCancel) [ CD ]
Line_68 $$ if (plan.exitBeforeCancel) -->Line_73 $$ if (plan.exceptAfterCancel) [ CD ]
Line_20 $$ cancellableThreads.execute(new Interruptable() -->Line_30 $$ readyForCancel.countDown()[ CD ]
Line_2 $$ public void testCancellableThreads() throws InterruptedException -->Line_59 $$ cancellableThreads.cancel("test")[ CD ]
Line_68 $$ if (plan.exitBeforeCancel) -->Line_69 $$ assertNull(throwables[i])[ CD ]
Line_10 $$ final TestPlan plan = new TestPlan(i)-->Line_17 $$ if (plan.presetInterrupt) [ FD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_64 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_8 $$ final CountDownLatch readyForCancel = new CountDownLatch(threads.length)-->Line_30 $$ readyForCancel.countDown()[ FD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_56 $$ threads[i].start()[ CD ]
Line_27 $$ if (plan.exitBeforeCancel) -->Line_28 $$ return[ CD ]
Line_73 $$ if (plan.exceptAfterCancel) -->Line_76 $$ assertThat(throwables[i].getSuppressed(), Matchers.emptyArray())[ CD ]
Line_32 $$ if (plan.busySpin) -->Line_36 $$ Thread.sleep(50000)[ CD ]
Line_10 $$ final TestPlan plan = new TestPlan(i)-->Line_73 $$ if (plan.exceptAfterCancel) [ FD ]
Line_12 $$ threads[i] = new Thread(new Runnable() -->Line_48 $$ if (plan.exceptBeforeCancel || plan.exitBeforeCancel) [ CD ]
Line_10 $$ final TestPlan plan = new TestPlan(i)-->Line_27 $$ if (plan.exitBeforeCancel) [ FD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_10 $$ final TestPlan plan = new TestPlan(i)[ CD ]
Line_2 $$ public void testCancellableThreads() throws InterruptedException -->Line_3 $$ Thread[] threads = new Thread[randomIntBetween(3, 10)][ CD ]
Line_17 $$ if (plan.presetInterrupt) -->Line_18 $$ Thread.currentThread().interrupt()[ CD ]
Line_7 $$ final CancellableThreads cancellableThreads = new CancellableThreads()-->Line_20 $$ cancellableThreads.execute(new Interruptable() [ FD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_55 $$ threads[i].setDaemon(true)[ CD ]
Line_8 $$ final CountDownLatch readyForCancel = new CountDownLatch(threads.length)-->Line_58 $$ readyForCancel.await()[ FD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_11 $$ plans[i] = plan[ CD ]
Line_66 $$ if (plan.exceptBeforeCancel) -->Line_67 $$ assertThat(throwables[i], Matchers.instanceOf(CustomException.class))[ CD ]
Line_10 $$ final TestPlan plan = new TestPlan(i)-->Line_66 $$ if (plan.exceptBeforeCancel) [ FD ]
Line_64 $$ for (int i = 0; i < threads.length; i++) -->Line_66 $$ if (plan.exceptBeforeCancel) [ CD ]
Line_2 $$ public void testCancellableThreads() throws InterruptedException -->Line_4 $$ final TestPlan[] plans = new TestPlan[threads.length][ CD ]
Line_2 $$ public void testCancellableThreads() throws InterruptedException -->Line_64 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_10 $$ final TestPlan plan = new TestPlan(i)-->Line_39 $$ if (plan.exceptAfterCancel) [ FD ]
Line_65 $$ TestPlan plan = plans[i]-->Line_73 $$ if (plan.exceptAfterCancel) [ FD ]
Line_25 $$ if (plan.exceptBeforeCancel) -->Line_27 $$ if (plan.exitBeforeCancel) [ CD ]
Line_20 $$ cancellableThreads.execute(new Interruptable() -->Line_24 $$ assertFalse("interrupt thread should have been clear", Thread.currentThread().isInterrupted())[ CD ]
Line_2 $$ public void testCancellableThreads() throws InterruptedException -->Line_5 $$ final Throwable[] throwables = new Throwable[threads.length][ CD ]
Line_2 $$ public void testCancellableThreads() throws InterruptedException -->Line_8 $$ final CountDownLatch readyForCancel = new CountDownLatch(threads.length)[ CD ]
Line_65 $$ TestPlan plan = plans[i]-->Line_66 $$ if (plan.exceptBeforeCancel) [ FD ]
Line_64 $$ for (int i = 0; i < threads.length; i++) -->Line_65 $$ TestPlan plan = plans[i][ CD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_12 $$ threads[i] = new Thread(new Runnable() [ CD ]
Line_20 $$ cancellableThreads.execute(new Interruptable() -->Line_25 $$ if (plan.exceptBeforeCancel) [ CD ]
Line_73 $$ if (plan.exceptAfterCancel) -->Line_74 $$ assertThat(throwables[i].getSuppressed(), Matchers.arrayContaining(Matchers.instanceOf(CustomException.class)))[ CD ]
