Line_35 $$ ClassLoader classLoader = cls.getClassLoader()-->Line_37 $$ Set<Class<?>> classes = classesByLoader.get(classLoader)[ FD ]
Line_12 $$ ret = lookupDone(cls)-->Line_13 $$ if (ret != null) [ FD ]
Line_36 $$ if (classLoader != null) -->Line_37 $$ Set<Class<?>> classes = classesByLoader.get(classLoader)[ CD ]
Line_32 $$ if (created) -->Line_35 $$ ClassLoader classLoader = cls.getClassLoader()[ CD ]
Line_9 $$ boolean created = false-->Line_26 $$ created = true[ FD ]
Line_36 $$ if (classLoader != null) -->Line_41 $$ classes.add(cls)[ CD ]
Line_8 $$ ContainerAnalysis ret = null-->Line_13 $$ if (ret != null) [ FD ]
Line_35 $$ ClassLoader classLoader = cls.getClassLoader()-->Line_36 $$ if (classLoader != null) [ FD ]
Line_35 $$ ClassLoader classLoader = cls.getClassLoader()-->Line_39 $$ classesByLoader.put(classLoader, classes = new HashSet<Class<?>>())[ FD ]
Line_32 $$ if (created) -->Line_36 $$ if (classLoader != null) [ CD ]
Line_32 $$ if (created) -->Line_33 $$ workInProgress.remove(new InProgressKey(cls, Thread.currentThread()))[ CD ]
Line_37 $$ Set<Class<?>> classes = classesByLoader.get(classLoader)-->Line_41 $$ classes.add(cls)[ FD ]
Line_39 $$ classesByLoader.put(classLoader, classes = new HashSet<Class<?>>())-->Line_41 $$ classes.add(cls)[ FD ]
Line_8 $$ ContainerAnalysis ret = null-->Line_24 $$ ret = createWorkInProgress(cls)[ FD ]
Line_8 $$ ContainerAnalysis ret = null-->Line_12 $$ ret = lookupDone(cls)[ FD ]
Line_37 $$ Set<Class<?>> classes = classesByLoader.get(classLoader)-->Line_38 $$ if (classes == null) [ FD ]
Line_32 $$ if (created) -->Line_34 $$ workDone.put(cls, new SoftReference<ContainerAnalysis>(ret))[ CD ]
Line_38 $$ if (classes == null) -->Line_39 $$ classesByLoader.put(classLoader, classes = new HashSet<Class<?>>())[ CD ]
Line_13 $$ if (ret != null) -->Line_14 $$ return ret[ CD ]
Line_36 $$ if (classLoader != null) -->Line_38 $$ if (classes == null) [ CD ]
Line_12 $$ ret = lookupDone(cls)-->Line_24 $$ ret = createWorkInProgress(cls)[ FD ]
Line_37 $$ Set<Class<?>> classes = classesByLoader.get(classLoader)-->Line_39 $$ classesByLoader.put(classLoader, classes = new HashSet<Class<?>>())[ FD ]
