Line_37 $$ if (!myApplication.tryRunReadAction(runnable)) -->Line_39 $$ return null[ CD ]
Line_57 $$ for (int i = documentsToApplyInEDT.size() - 1; i >= 0; i--) -->Line_59 $$ boolean taskIsValid = !queuedTask.removed[ CD ]
Line_8 $$ Runnable runnable = new Runnable() -->Line_13 $$ if (project.isDisposed())[ CD ]
Line_27 $$ if (finishProcessor != null) -->Line_28 $$ finishProcessors.add(finishProcessor)[ CD ]
Line_77 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)-->Line_81 $$ log("after call finishCommit", task, synchronously, success)[ FD ]
Line_8 $$ Runnable runnable = new Runnable() -->Line_12 $$ myApplication.assertReadAccessAllowed()[ CD ]
Line_57 $$ for (int i = documentsToApplyInEDT.size() - 1; i >= 0; i--) -->Line_60 $$ if (task == queuedTask) [ CD ]
Line_8 $$ Runnable runnable = new Runnable() -->Line_19 $$ if (viewProvider == null) [ CD ]
Line_6 $$ final Document document = task.document-->Line_16 $$ if (documentManager.isCommitted(document))[ FD ]
Line_34 $$ if (synchronously) -->Line_35 $$ myApplication.assertWriteAccessAllowed()[ CD ]
Line_51 $$ Project project = task.project-->Line_75 $$ PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)[ FD ]
Line_77 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)-->Line_82 $$ if (synchronously || success) [ FD ]
Line_46 $$ return new Runnable() -->Line_51 $$ Project project = task.project[ CD ]
Line_56 $$ boolean isValid = !task.removed-->Line_70 $$ if (!isValid) [ FD ]
Line_46 $$ return new Runnable() -->Line_81 $$ log("after call finishCommit", task, synchronously, success)[ CD ]
Line_18 $$ FileViewProvider viewProvider = documentManager.getCachedViewProvider(document)-->Line_19 $$ if (viewProvider == null) [ FD ]
Line_60 $$ if (task == queuedTask) -->Line_63 $$ isValid &= taskIsValid[ CD ]
Line_46 $$ return new Runnable() -->Line_50 $$ myApplication.assertIsDispatchThread()[ CD ]
Line_34 $$ if (synchronously) -->Line_37 $$ if (!myApplication.tryRunReadAction(runnable)) [ CD ]
Line_59 $$ boolean taskIsValid = !queuedTask.removed-->Line_65 $$ if (!taskIsValid) [ FD ]
Line_8 $$ Runnable runnable = new Runnable() -->Line_36 $$ runnable.run()[ FD ]
Line_5 $$ final Project project = task.project-->Line_75 $$ PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)[ FD ]
Line_26 $$ Processor<Document> finishProcessor = doCommit(task, file, synchronously)-->Line_28 $$ finishProcessors.add(finishProcessor)[ FD ]
Line_37 $$ if (!myApplication.tryRunReadAction(runnable)) -->Line_38 $$ log("Could not start read action", task, synchronously, myApplication.isReadAccessAllowed(), Thread.currentThread())[ CD ]
Line_46 $$ return new Runnable() -->Line_76 $$ log("Executing later finishCommit", task, false)[ CD ]
Line_8 $$ Runnable runnable = new Runnable() -->Line_16 $$ if (documentManager.isCommitted(document))[ CD ]
Line_54 $$ Document document = task.document-->Line_83 $$ assert !documentManager.isInUncommittedSet(document)[ FD ]
Line_46 $$ return new Runnable() -->Line_85 $$ if (!success) [ CD ]
Line_57 $$ for (int i = documentsToApplyInEDT.size() - 1; i >= 0; i--) -->Line_66 $$ documentsToApplyInEDT.remove(i)[ FD ]
Line_25 $$ if (file.isValid()) -->Line_27 $$ if (finishProcessor != null) [ CD ]
Line_34 $$ if (synchronously) -->Line_36 $$ runnable.run()[ CD ]
Line_63 $$ isValid &= taskIsValid-->Line_70 $$ if (!isValid) [ FD ]
Line_8 $$ Runnable runnable = new Runnable() -->Line_37 $$ if (!myApplication.tryRunReadAction(runnable)) [ FD ]
Line_46 $$ return new Runnable() -->Line_78 $$ if (synchronously) [ CD ]
Line_65 $$ if (!taskIsValid) -->Line_66 $$ documentsToApplyInEDT.remove(i)[ CD ]
Line_8 $$ Runnable runnable = new Runnable() -->Line_15 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)[ CD ]
Line_25 $$ if (file.isValid()) -->Line_26 $$ Processor<Document> finishProcessor = doCommit(task, file, synchronously)[ CD ]
Line_43 $$ if (canceled || task.removed) -->Line_44 $$ return null[ CD ]
Line_5 $$ final Project project = task.project-->Line_15 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)[ FD ]
Line_77 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)-->Line_85 $$ if (!success) [ FD ]
Line_15 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_77 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ FD ]
Line_5 $$ final Project project = task.project-->Line_52 $$ if (project.isDisposed())[ FD ]
Line_75 $$ PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_77 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ FD ]
Line_65 $$ if (!taskIsValid) -->Line_67 $$ log("Task invalid, removed from documentsToApplyInEDT", queuedTask, false)[ CD ]
Line_13 $$ if (project.isDisposed())-->Line_14 $$ return[ CD ]
Line_7 $$ final List<Processor<Document>> finishProcessors = new SmartList<Processor<Document>>()-->Line_77 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ FD ]
Line_15 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_18 $$ FileViewProvider viewProvider = documentManager.getCachedViewProvider(document)[ FD ]
Line_8 $$ Runnable runnable = new Runnable() -->Line_23 $$ List<PsiFile> psiFiles = viewProvider.getAllFiles()[ CD ]
Line_46 $$ return new Runnable() -->Line_77 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ CD ]
Line_19 $$ if (viewProvider == null) -->Line_21 $$ return[ CD ]
Line_6 $$ final Document document = task.document-->Line_77 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ FD ]
Line_70 $$ if (!isValid) -->Line_71 $$ log("Marked as already committed in EDT apply queue, return", task, true)[ CD ]
Line_24 $$ for (PsiFile file : psiFiles) -->Line_26 $$ Processor<Document> finishProcessor = doCommit(task, file, synchronously)[ FD ]
Line_52 $$ if (project.isDisposed())-->Line_53 $$ return[ CD ]
Line_16 $$ if (documentManager.isCommitted(document))-->Line_17 $$ return[ CD ]
Line_15 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_16 $$ if (documentManager.isCommitted(document))[ FD ]
Line_18 $$ FileViewProvider viewProvider = documentManager.getCachedViewProvider(document)-->Line_23 $$ List<PsiFile> psiFiles = viewProvider.getAllFiles()[ FD ]
Line_6 $$ final Document document = task.document-->Line_18 $$ FileViewProvider viewProvider = documentManager.getCachedViewProvider(document)[ FD ]
Line_5 $$ final Project project = task.project-->Line_13 $$ if (project.isDisposed())[ FD ]
Line_46 $$ return new Runnable() -->Line_82 $$ if (synchronously || success) [ CD ]
Line_7 $$ final List<Processor<Document>> finishProcessors = new SmartList<Processor<Document>>()-->Line_28 $$ finishProcessors.add(finishProcessor)[ FD ]
Line_19 $$ if (viewProvider == null) -->Line_20 $$ finishProcessors.add(handleCommitWithoutPsi(documentManager, document, task, synchronously))[ CD ]
Line_57 $$ for (int i = documentsToApplyInEDT.size() - 1; i >= 0; i--) -->Line_58 $$ CommitTask queuedTask = documentsToApplyInEDT.get(i)[ CD ]
Line_70 $$ if (!isValid) -->Line_72 $$ return[ CD ]
Line_54 $$ Document document = task.document-->Line_77 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ FD ]
Line_60 $$ if (task == queuedTask) -->Line_65 $$ if (!taskIsValid) [ CD ]
Line_7 $$ final List<Processor<Document>> finishProcessors = new SmartList<Processor<Document>>()-->Line_20 $$ finishProcessors.add(handleCommitWithoutPsi(documentManager, document, task, synchronously))[ FD ]
Line_75 $$ PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_83 $$ assert !documentManager.isInUncommittedSet(document)[ FD ]
Line_6 $$ final Document document = task.document-->Line_20 $$ finishProcessors.add(handleCommitWithoutPsi(documentManager, document, task, synchronously))[ FD ]
Line_46 $$ return new Runnable() -->Line_52 $$ if (project.isDisposed())[ CD ]
Line_46 $$ return new Runnable() -->Line_54 $$ Document document = task.document[ CD ]
Line_59 $$ boolean taskIsValid = !queuedTask.removed-->Line_63 $$ isValid &= taskIsValid[ FD ]
Line_60 $$ if (task == queuedTask) -->Line_64 $$ log("Task matched, removed from documentsToApplyInEDT", queuedTask, false, task)[ CD ]
Line_24 $$ for (PsiFile file : psiFiles) -->Line_25 $$ if (file.isValid()) [ FD ]
Line_8 $$ Runnable runnable = new Runnable() -->Line_18 $$ FileViewProvider viewProvider = documentManager.getCachedViewProvider(document)[ CD ]
Line_58 $$ CommitTask queuedTask = documentsToApplyInEDT.get(i)-->Line_67 $$ log("Task invalid, removed from documentsToApplyInEDT", queuedTask, false)[ FD ]
Line_56 $$ boolean isValid = !task.removed-->Line_63 $$ isValid &= taskIsValid[ FD ]
Line_57 $$ for (int i = documentsToApplyInEDT.size() - 1; i >= 0; i--) -->Line_58 $$ CommitTask queuedTask = documentsToApplyInEDT.get(i)[ FD ]
Line_26 $$ Processor<Document> finishProcessor = doCommit(task, file, synchronously)-->Line_27 $$ if (finishProcessor != null) [ FD ]
Line_58 $$ CommitTask queuedTask = documentsToApplyInEDT.get(i)-->Line_60 $$ if (task == queuedTask) [ FD ]
Line_15 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_20 $$ finishProcessors.add(handleCommitWithoutPsi(documentManager, document, task, synchronously))[ FD ]
Line_15 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_83 $$ assert !documentManager.isInUncommittedSet(document)[ FD ]
Line_51 $$ Project project = task.project-->Line_52 $$ if (project.isDisposed())[ FD ]
Line_46 $$ return new Runnable() -->Line_75 $$ PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)[ CD ]
Line_6 $$ final Document document = task.document-->Line_83 $$ assert !documentManager.isInUncommittedSet(document)[ FD ]
Line_58 $$ CommitTask queuedTask = documentsToApplyInEDT.get(i)-->Line_64 $$ log("Task matched, removed from documentsToApplyInEDT", queuedTask, false, task)[ FD ]
