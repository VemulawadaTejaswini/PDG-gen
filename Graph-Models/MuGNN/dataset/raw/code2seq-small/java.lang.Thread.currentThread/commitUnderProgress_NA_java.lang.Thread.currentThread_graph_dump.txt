Line_52 $$ CommitTask queuedTask = documentsToApplyInEDT.get(i)-->Line_57 $$ log("Task matched, removed from documentsToApplyInEDT", queuedTask, false, task)[ FD ]
Line_53 $$ boolean taskIsValid = !queuedTask.removed-->Line_58 $$ if (!taskIsValid) [ FD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_3 $$ final Project project = task.project[ CD ]
Line_70 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)-->Line_74 $$ log("after call finishCommit", task, synchronously, success)[ FD ]
Line_52 $$ CommitTask queuedTask = documentsToApplyInEDT.get(i)-->Line_54 $$ if (task == queuedTask) [ FD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_4 $$ final Document document = task.document[ CD ]
Line_9 $$ if (project.isDisposed())-->Line_10 $$ return[ CD ]
Line_14 $$ FileViewProvider viewProvider = documentManager.getCachedViewProvider(document)-->Line_15 $$ if (viewProvider == null) [ FD ]
Line_51 $$ for (int i = documentsToApplyInEDT.size() - 1; i >= 0; i--) -->Line_54 $$ if (task == queuedTask) [ CD ]
Line_11 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_14 $$ FileViewProvider viewProvider = documentManager.getCachedViewProvider(document)[ FD ]
Line_78 $$ if (!success) -->Line_79 $$ queueCommit(project, document, "Re-added back", task.myCreationModalityState)[ CD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_37 $$ boolean canceled = task.indicator.isCanceled()[ CD ]
Line_42 $$ return new Runnable() -->Line_48 $$ Document document = task.document[ CD ]
Line_6 $$ Runnable runnable = new Runnable() -->Line_14 $$ FileViewProvider viewProvider = documentManager.getCachedViewProvider(document)[ CD ]
Line_6 $$ Runnable runnable = new Runnable() -->Line_11 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)[ CD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_39 $$ if (canceled || task.removed) [ CD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_64 $$ log("Marked as already committed in EDT apply queue, return", task, true)[ FD ]
Line_51 $$ for (int i = documentsToApplyInEDT.size() - 1; i >= 0; i--) -->Line_59 $$ documentsToApplyInEDT.remove(i)[ FD ]
Line_4 $$ final Document document = task.document-->Line_16 $$ finishProcessors.add(handleCommitWithoutPsi(documentManager, document, task, synchronously))[ FD ]
Line_20 $$ for (PsiFile file : psiFiles) -->Line_21 $$ if (file.isValid()) [ FD ]
Line_42 $$ return new Runnable() -->Line_44 $$ myApplication.assertIsDispatchThread()[ CD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_57 $$ log("Task matched, removed from documentsToApplyInEDT", queuedTask, false, task)[ FD ]
Line_70 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)-->Line_75 $$ if (synchronously || success) [ FD ]
Line_42 $$ return new Runnable() -->Line_45 $$ Project project = task.project[ CD ]
Line_4 $$ final Document document = task.document-->Line_14 $$ FileViewProvider viewProvider = documentManager.getCachedViewProvider(document)[ FD ]
Line_50 $$ boolean isValid = !task.removed-->Line_63 $$ if (!isValid) [ FD ]
Line_5 $$ final List<Processor<Document>> finishProcessors = new SmartList<Processor<Document>>()-->Line_70 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ FD ]
Line_11 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_70 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ FD ]
Line_11 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_76 $$ assert !documentManager.isInUncommittedSet(document)[ FD ]
Line_33 $$ if (!myApplication.tryRunReadAction(runnable)) -->Line_34 $$ log("Could not start read action", task, synchronously, myApplication.isReadAccessAllowed(), Thread.currentThread())[ CD ]
Line_3 $$ final Project project = task.project-->Line_46 $$ if (project.isDisposed())[ FD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_22 $$ Processor<Document> finishProcessor = doCommit(task, file, synchronously)[ FD ]
Line_22 $$ Processor<Document> finishProcessor = doCommit(task, file, synchronously)-->Line_24 $$ finishProcessors.add(finishProcessor)[ FD ]
Line_42 $$ return new Runnable() -->Line_70 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ CD ]
Line_56 $$ isValid &= taskIsValid-->Line_63 $$ if (!isValid) [ FD ]
Line_46 $$ if (project.isDisposed())-->Line_47 $$ return[ CD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_30 $$ if (synchronously) [ CD ]
Line_11 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_16 $$ finishProcessors.add(handleCommitWithoutPsi(documentManager, document, task, synchronously))[ FD ]
Line_21 $$ if (file.isValid()) -->Line_22 $$ Processor<Document> finishProcessor = doCommit(task, file, synchronously)[ CD ]
Line_14 $$ FileViewProvider viewProvider = documentManager.getCachedViewProvider(document)-->Line_19 $$ List<PsiFile> psiFiles = viewProvider.getAllFiles()[ FD ]
Line_30 $$ if (synchronously) -->Line_32 $$ runnable.run()[ CD ]
Line_45 $$ Project project = task.project-->Line_46 $$ if (project.isDisposed())[ FD ]
Line_42 $$ return new Runnable() -->Line_78 $$ if (!success) [ CD ]
Line_48 $$ Document document = task.document-->Line_79 $$ queueCommit(project, document, "Re-added back", task.myCreationModalityState)[ FD ]
Line_12 $$ if (documentManager.isCommitted(document))-->Line_13 $$ return[ CD ]
Line_51 $$ for (int i = documentsToApplyInEDT.size() - 1; i >= 0; i--) -->Line_55 $$ documentsToApplyInEDT.remove(i)[ FD ]
Line_42 $$ return new Runnable() -->Line_75 $$ if (synchronously || success) [ CD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_42 $$ return new Runnable() [ CD ]
Line_4 $$ final Document document = task.document-->Line_12 $$ if (documentManager.isCommitted(document))[ FD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_69 $$ log("Executing later finishCommit", task, false)[ FD ]
Line_58 $$ if (!taskIsValid) -->Line_59 $$ documentsToApplyInEDT.remove(i)[ CD ]
Line_45 $$ Project project = task.project-->Line_79 $$ queueCommit(project, document, "Re-added back", task.myCreationModalityState)[ FD ]
Line_4 $$ final Document document = task.document-->Line_76 $$ assert !documentManager.isInUncommittedSet(document)[ FD ]
Line_54 $$ if (task == queuedTask) -->Line_56 $$ isValid &= taskIsValid[ CD ]
Line_6 $$ Runnable runnable = new Runnable() -->Line_8 $$ myApplication.assertReadAccessAllowed()[ CD ]
Line_4 $$ final Document document = task.document-->Line_79 $$ queueCommit(project, document, "Re-added back", task.myCreationModalityState)[ FD ]
Line_52 $$ CommitTask queuedTask = documentsToApplyInEDT.get(i)-->Line_60 $$ log("Task invalid, removed from documentsToApplyInEDT", queuedTask, false)[ FD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_16 $$ finishProcessors.add(handleCommitWithoutPsi(documentManager, document, task, synchronously))[ FD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_75 $$ if (synchronously || success) [ FD ]
Line_51 $$ for (int i = documentsToApplyInEDT.size() - 1; i >= 0; i--) -->Line_52 $$ CommitTask queuedTask = documentsToApplyInEDT.get(i)[ CD ]
Line_30 $$ if (synchronously) -->Line_33 $$ if (!myApplication.tryRunReadAction(runnable)) [ CD ]
Line_3 $$ final Project project = task.project-->Line_9 $$ if (project.isDisposed())[ FD ]
Line_63 $$ if (!isValid) -->Line_64 $$ log("Marked as already committed in EDT apply queue, return", task, true)[ CD ]
Line_6 $$ Runnable runnable = new Runnable() -->Line_33 $$ if (!myApplication.tryRunReadAction(runnable)) [ FD ]
Line_54 $$ if (task == queuedTask) -->Line_55 $$ documentsToApplyInEDT.remove(i)[ CD ]
Line_39 $$ if (canceled || task.removed) -->Line_40 $$ return null[ CD ]
Line_53 $$ boolean taskIsValid = !queuedTask.removed-->Line_56 $$ isValid &= taskIsValid[ FD ]
Line_4 $$ final Document document = task.document-->Line_70 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ FD ]
Line_48 $$ Document document = task.document-->Line_70 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ FD ]
Line_3 $$ final Project project = task.project-->Line_79 $$ queueCommit(project, document, "Re-added back", task.myCreationModalityState)[ FD ]
Line_11 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_12 $$ if (documentManager.isCommitted(document))[ FD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_70 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ FD ]
Line_6 $$ Runnable runnable = new Runnable() -->Line_32 $$ runnable.run()[ FD ]
Line_3 $$ final Project project = task.project-->Line_11 $$ final PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)[ FD ]
Line_6 $$ Runnable runnable = new Runnable() -->Line_12 $$ if (documentManager.isCommitted(document))[ CD ]
Line_15 $$ if (viewProvider == null) -->Line_17 $$ return[ CD ]
Line_70 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)-->Line_78 $$ if (!success) [ FD ]
Line_68 $$ PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_70 $$ boolean success = documentManager.finishCommit(document, finishProcessors, synchronously, task.reason)[ FD ]
Line_5 $$ final List<Processor<Document>> finishProcessors = new SmartList<Processor<Document>>()-->Line_24 $$ finishProcessors.add(finishProcessor)[ FD ]
Line_33 $$ if (!myApplication.tryRunReadAction(runnable)) -->Line_35 $$ return null[ CD ]
Line_6 $$ Runnable runnable = new Runnable() -->Line_19 $$ List<PsiFile> psiFiles = viewProvider.getAllFiles()[ CD ]
Line_3 $$ final Project project = task.project-->Line_68 $$ PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)[ FD ]
Line_54 $$ if (task == queuedTask) -->Line_58 $$ if (!taskIsValid) [ CD ]
Line_42 $$ return new Runnable() -->Line_68 $$ PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)[ CD ]
Line_15 $$ if (viewProvider == null) -->Line_16 $$ finishProcessors.add(handleCommitWithoutPsi(documentManager, document, task, synchronously))[ CD ]
Line_6 $$ Runnable runnable = new Runnable() -->Line_15 $$ if (viewProvider == null) [ CD ]
Line_20 $$ for (PsiFile file : psiFiles) -->Line_22 $$ Processor<Document> finishProcessor = doCommit(task, file, synchronously)[ FD ]
Line_30 $$ if (synchronously) -->Line_31 $$ myApplication.assertWriteAccessAllowed()[ CD ]
Line_54 $$ if (task == queuedTask) -->Line_57 $$ log("Task matched, removed from documentsToApplyInEDT", queuedTask, false, task)[ CD ]
Line_21 $$ if (file.isValid()) -->Line_23 $$ if (finishProcessor != null) [ CD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_5 $$ final List<Processor<Document>> finishProcessors = new SmartList<Processor<Document>>()[ CD ]
Line_50 $$ boolean isValid = !task.removed-->Line_56 $$ isValid &= taskIsValid[ FD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_74 $$ log("after call finishCommit", task, synchronously, success)[ FD ]
Line_48 $$ Document document = task.document-->Line_76 $$ assert !documentManager.isInUncommittedSet(document)[ FD ]
Line_68 $$ PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)-->Line_76 $$ assert !documentManager.isInUncommittedSet(document)[ FD ]
Line_5 $$ final List<Processor<Document>> finishProcessors = new SmartList<Processor<Document>>()-->Line_16 $$ finishProcessors.add(handleCommitWithoutPsi(documentManager, document, task, synchronously))[ FD ]
Line_45 $$ Project project = task.project-->Line_68 $$ PsiDocumentManagerBase documentManager = (PsiDocumentManagerBase) PsiDocumentManager.getInstance(project)[ FD ]
Line_58 $$ if (!taskIsValid) -->Line_60 $$ log("Task invalid, removed from documentsToApplyInEDT", queuedTask, false)[ CD ]
Line_42 $$ return new Runnable() -->Line_74 $$ log("after call finishCommit", task, synchronously, success)[ CD ]
Line_42 $$ return new Runnable() -->Line_71 $$ if (synchronously) [ CD ]
Line_51 $$ for (int i = documentsToApplyInEDT.size() - 1; i >= 0; i--) -->Line_52 $$ CommitTask queuedTask = documentsToApplyInEDT.get(i)[ FD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_54 $$ if (task == queuedTask) [ FD ]
Line_23 $$ if (finishProcessor != null) -->Line_24 $$ finishProcessors.add(finishProcessor)[ CD ]
Line_6 $$ Runnable runnable = new Runnable() -->Line_9 $$ if (project.isDisposed())[ CD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_34 $$ log("Could not start read action", task, synchronously, myApplication.isReadAccessAllowed(), Thread.currentThread())[ FD ]
Line_42 $$ return new Runnable() -->Line_46 $$ if (project.isDisposed())[ CD ]
Line_22 $$ Processor<Document> finishProcessor = doCommit(task, file, synchronously)-->Line_23 $$ if (finishProcessor != null) [ FD ]
Line_2 $$ private Runnable commitUnderProgress(@NotNull final CommitTask task, final boolean synchronously) -->Line_6 $$ Runnable runnable = new Runnable() [ CD ]
Line_42 $$ return new Runnable() -->Line_69 $$ log("Executing later finishCommit", task, false)[ CD ]
Line_63 $$ if (!isValid) -->Line_65 $$ return[ CD ]
Line_51 $$ for (int i = documentsToApplyInEDT.size() - 1; i >= 0; i--) -->Line_53 $$ boolean taskIsValid = !queuedTask.removed[ CD ]
