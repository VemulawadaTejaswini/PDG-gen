Line_8 $$ ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)-->Line_9 $$ threadPool.setClusterSettings(clusterSettings)[ FD ]
Line_7 $$ threadPool = new ThreadPool(nodeSettings)-->Line_31 $$ terminateThreadPoolIfNeeded(threadPool)[ FD ]
Line_4 $$ ThreadPool threadPool = null-->Line_13 $$ threadPool.executor(threadPoolName).execute(() -> [ FD ]
Line_3 $$ String threadPoolName = randomThreadPool(ThreadPool.ThreadPoolType.FIXED)-->Line_22 $$ assertThat(threadPool.executor(threadPoolName), not(sameInstance(oldExecutor)))[ FD ]
Line_8 $$ ClusterSettings clusterSettings = new ClusterSettings(nodeSettings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)-->Line_21 $$ clusterSettings.applySettings(settingsBuilder().put("threadpool." + threadPoolName + ".queue_size", 2000).build())[ FD ]
Line_4 $$ ThreadPool threadPool = null-->Line_22 $$ assertThat(threadPool.executor(threadPoolName), not(sameInstance(oldExecutor)))[ FD ]
Line_3 $$ String threadPoolName = randomThreadPool(ThreadPool.ThreadPoolType.FIXED)-->Line_13 $$ threadPool.executor(threadPoolName).execute(() -> [ FD ]
Line_7 $$ threadPool = new ThreadPool(nodeSettings)-->Line_13 $$ threadPool.executor(threadPoolName).execute(() -> [ FD ]
Line_7 $$ threadPool = new ThreadPool(nodeSettings)-->Line_9 $$ threadPool.setClusterSettings(clusterSettings)[ FD ]
Line_4 $$ ThreadPool threadPool = null-->Line_10 $$ assertEquals(info(threadPool, threadPoolName).getQueueSize().getSingles(), 1000L)[ FD ]
Line_12 $$ ThreadPoolExecutor oldExecutor = (ThreadPoolExecutor) threadPool.executor(threadPoolName)-->Line_23 $$ assertThat(oldExecutor.isShutdown(), equalTo(true))[ FD ]
Line_11 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_17 $$ latch.countDown()[ FD ]
Line_3 $$ String threadPoolName = randomThreadPool(ThreadPool.ThreadPoolType.FIXED)-->Line_10 $$ assertEquals(info(threadPool, threadPoolName).getQueueSize().getSingles(), 1000L)[ FD ]
Line_4 $$ ThreadPool threadPool = null-->Line_12 $$ ThreadPoolExecutor oldExecutor = (ThreadPoolExecutor) threadPool.executor(threadPoolName)[ FD ]
Line_12 $$ ThreadPoolExecutor oldExecutor = (ThreadPoolExecutor) threadPool.executor(threadPoolName)-->Line_25 $$ assertThat(oldExecutor.isTerminated(), equalTo(false))[ FD ]
Line_7 $$ threadPool = new ThreadPool(nodeSettings)-->Line_12 $$ ThreadPoolExecutor oldExecutor = (ThreadPoolExecutor) threadPool.executor(threadPoolName)[ FD ]
Line_2 $$ public void testShutdownNowInterrupts() throws Exception -->Line_3 $$ String threadPoolName = randomThreadPool(ThreadPool.ThreadPoolType.FIXED)[ CD ]
Line_12 $$ ThreadPoolExecutor oldExecutor = (ThreadPoolExecutor) threadPool.executor(threadPoolName)-->Line_22 $$ assertThat(threadPool.executor(threadPoolName), not(sameInstance(oldExecutor)))[ FD ]
Line_4 $$ ThreadPool threadPool = null-->Line_7 $$ threadPool = new ThreadPool(nodeSettings)[ FD ]
Line_12 $$ ThreadPoolExecutor oldExecutor = (ThreadPoolExecutor) threadPool.executor(threadPoolName)-->Line_24 $$ assertThat(oldExecutor.isTerminating(), equalTo(true))[ FD ]
Line_3 $$ String threadPoolName = randomThreadPool(ThreadPool.ThreadPoolType.FIXED)-->Line_12 $$ ThreadPoolExecutor oldExecutor = (ThreadPoolExecutor) threadPool.executor(threadPoolName)[ FD ]
Line_4 $$ ThreadPool threadPool = null-->Line_31 $$ terminateThreadPoolIfNeeded(threadPool)[ FD ]
Line_7 $$ threadPool = new ThreadPool(nodeSettings)-->Line_22 $$ assertThat(threadPool.executor(threadPoolName), not(sameInstance(oldExecutor)))[ FD ]
Line_2 $$ public void testShutdownNowInterrupts() throws Exception -->Line_4 $$ ThreadPool threadPool = null[ CD ]
Line_7 $$ threadPool = new ThreadPool(nodeSettings)-->Line_10 $$ assertEquals(info(threadPool, threadPoolName).getQueueSize().getSingles(), 1000L)[ FD ]
Line_4 $$ ThreadPool threadPool = null-->Line_9 $$ threadPool.setClusterSettings(clusterSettings)[ FD ]
