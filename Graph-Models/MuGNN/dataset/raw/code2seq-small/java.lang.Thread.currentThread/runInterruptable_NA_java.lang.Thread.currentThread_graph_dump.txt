Line_3 $$ ScheduledFuture<?> future = null-->Line_6 $$ future = addCancellationListener(indicator, thread)[ FD ]
Line_3 $$ ScheduledFuture<?> future = null-->Line_10 $$ future.cancel(true)[ FD ]
Line_3 $$ ScheduledFuture<?> future = null-->Line_9 $$ if (future != null)[ FD ]
Line_2 $$ public static <T> T runInterruptable(@NotNull final ProgressIndicator indicator, @NotNull ThrowableComputable<T, IOException> task) throws IOException -->Line_6 $$ future = addCancellationListener(indicator, thread)[ FD ]
Line_2 $$ public static <T> T runInterruptable(@NotNull final ProgressIndicator indicator, @NotNull ThrowableComputable<T, IOException> task) throws IOException -->Line_3 $$ ScheduledFuture<?> future = null[ CD ]
Line_6 $$ future = addCancellationListener(indicator, thread)-->Line_9 $$ if (future != null)[ FD ]
Line_5 $$ final Thread thread = Thread.currentThread()-->Line_6 $$ future = addCancellationListener(indicator, thread)[ FD ]
Line_9 $$ if (future != null)-->Line_10 $$ future.cancel(true)[ CD ]
Line_2 $$ public static <T> T runInterruptable(@NotNull final ProgressIndicator indicator, @NotNull ThrowableComputable<T, IOException> task) throws IOException -->Line_7 $$ return task.compute()[ FD ]
Line_6 $$ future = addCancellationListener(indicator, thread)-->Line_10 $$ future.cancel(true)[ FD ]
