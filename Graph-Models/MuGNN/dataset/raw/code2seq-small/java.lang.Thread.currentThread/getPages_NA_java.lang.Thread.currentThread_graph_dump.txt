Line_19 $$ while (responseSize < maxSize.toBytes()) -->Line_20 $$ page = pages.poll()[ CD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_17 $$ responsePages.add(page)[ CD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_3 $$ if (completed.get() && pages.isEmpty()) [ CD ]
Line_25 $$ responseSize += page.getSizeInBytes()-->Line_19 $$ while (responseSize < maxSize.toBytes()) [ FD ]
Line_7 $$ Page page = null-->Line_21 $$ if (page == null) [ FD ]
Line_7 $$ Page page = null-->Line_25 $$ responseSize += page.getSizeInBytes()[ FD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_13 $$ if (page == null) [ CD ]
Line_7 $$ Page page = null-->Line_24 $$ responsePages.add(page)[ FD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_28 $$ BufferResult bufferResult = new BufferResult(TASK_INSTANCE_ID, token.get(), nextToken, false, responsePages)[ CD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_6 $$ assertEquals(sequenceId, token.get(), "token")[ FD ]
Line_19 $$ while (responseSize < maxSize.toBytes()) -->Line_25 $$ responseSize += page.getSizeInBytes()[ CD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_7 $$ Page page = null[ CD ]
Line_18 $$ long responseSize = page.getSizeInBytes()-->Line_19 $$ while (responseSize < maxSize.toBytes()) [ FD ]
Line_18 $$ long responseSize = page.getSizeInBytes()-->Line_25 $$ responseSize += page.getSizeInBytes()[ FD ]
Line_13 $$ if (page == null) -->Line_14 $$ return BufferResult.emptyResults(TASK_INSTANCE_ID, token.get(), false)[ CD ]
Line_27 $$ long nextToken = token.get() + responsePages.size()-->Line_29 $$ token.set(nextToken)[ FD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_16 $$ List<Page> responsePages = new ArrayList()[ CD ]
Line_16 $$ List<Page> responsePages = new ArrayList()-->Line_27 $$ long nextToken = token.get() + responsePages.size()[ FD ]
Line_19 $$ while (responseSize < maxSize.toBytes()) -->Line_24 $$ responsePages.add(page)[ CD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_19 $$ while (responseSize < maxSize.toBytes()) [ FD ]
Line_7 $$ Page page = null-->Line_17 $$ responsePages.add(page)[ FD ]
Line_9 $$ page = pages.poll(10, TimeUnit.MILLISECONDS)-->Line_21 $$ if (page == null) [ FD ]
Line_9 $$ page = pages.poll(10, TimeUnit.MILLISECONDS)-->Line_18 $$ long responseSize = page.getSizeInBytes()[ FD ]
Line_3 $$ if (completed.get() && pages.isEmpty()) -->Line_4 $$ return BufferResult.emptyResults(TASK_INSTANCE_ID, token.get(), true)[ CD ]
Line_9 $$ page = pages.poll(10, TimeUnit.MILLISECONDS)-->Line_24 $$ responsePages.add(page)[ FD ]
Line_19 $$ while (responseSize < maxSize.toBytes()) -->Line_21 $$ if (page == null) [ CD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_19 $$ while (responseSize < maxSize.toBytes()) [ CD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_18 $$ long responseSize = page.getSizeInBytes()[ CD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_6 $$ assertEquals(sequenceId, token.get(), "token")[ CD ]
Line_7 $$ Page page = null-->Line_18 $$ long responseSize = page.getSizeInBytes()[ FD ]
Line_20 $$ page = pages.poll()-->Line_21 $$ if (page == null) [ FD ]
Line_7 $$ Page page = null-->Line_20 $$ page = pages.poll()[ FD ]
Line_9 $$ page = pages.poll(10, TimeUnit.MILLISECONDS)-->Line_17 $$ responsePages.add(page)[ FD ]
Line_7 $$ Page page = null-->Line_9 $$ page = pages.poll(10, TimeUnit.MILLISECONDS)[ FD ]
Line_9 $$ page = pages.poll(10, TimeUnit.MILLISECONDS)-->Line_13 $$ if (page == null) [ FD ]
Line_9 $$ page = pages.poll(10, TimeUnit.MILLISECONDS)-->Line_25 $$ responseSize += page.getSizeInBytes()[ FD ]
Line_9 $$ page = pages.poll(10, TimeUnit.MILLISECONDS)-->Line_20 $$ page = pages.poll()[ FD ]
Line_20 $$ page = pages.poll()-->Line_25 $$ responseSize += page.getSizeInBytes()[ FD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_29 $$ token.set(nextToken)[ CD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_30 $$ return bufferResult[ CD ]
Line_20 $$ page = pages.poll()-->Line_24 $$ responsePages.add(page)[ FD ]
Line_16 $$ List<Page> responsePages = new ArrayList()-->Line_17 $$ responsePages.add(page)[ FD ]
Line_2 $$ public BufferResult getPages(long sequenceId, DataSize maxSize) -->Line_27 $$ long nextToken = token.get() + responsePages.size()[ CD ]
Line_16 $$ List<Page> responsePages = new ArrayList()-->Line_24 $$ responsePages.add(page)[ FD ]
Line_7 $$ Page page = null-->Line_13 $$ if (page == null) [ FD ]
