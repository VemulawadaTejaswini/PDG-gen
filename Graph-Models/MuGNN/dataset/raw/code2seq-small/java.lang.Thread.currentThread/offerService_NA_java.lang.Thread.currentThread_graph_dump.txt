Line_9 $$ if (!dn.areHeartbeatsDisabledForTests()) -->Line_18 $$ long startProcessCommands = now()[ CD ]
Line_9 $$ if (!dn.areHeartbeatsDisabledForTests()) -->Line_22 $$ if (endProcessCommands - startProcessCommands > 2000) [ CD ]
Line_10 $$ HeartbeatResponse resp = sendHeartBeat()-->Line_23 $$ LOG.info("Took " + (endProcessCommands - startProcessCommands) + "ms to process " + resp.getCommands().length + " commands from NN")[ FD ]
Line_7 $$ if (startTime - lastHeartbeat >= dnConf.heartBeatInterval) -->Line_9 $$ if (!dn.areHeartbeatsDisabledForTests()) [ CD ]
Line_2 $$ private void offerService() throws Exception -->Line_3 $$ LOG.info("For namenode " + nnAddr + " using" + " DELETEREPORT_INTERVAL of " + dnConf.deleteReportInterval + " msec " + " BLOCKREPORT_INTERVAL of " + dnConf.blockReportInterval + "msec" + " CACHEREPORT_INTERVAL of " + dnConf.cacheReportInterval + "msec" + " Initial delay: " + dnConf.initialBlockReportDelay + "msec" + "; heartBeatInterval=" + dnConf.heartBeatInterval)[ CD ]
Line_22 $$ if (endProcessCommands - startProcessCommands > 2000) -->Line_23 $$ LOG.info("Took " + (endProcessCommands - startProcessCommands) + "ms to process " + resp.getCommands().length + " commands from NN")[ CD ]
Line_9 $$ if (!dn.areHeartbeatsDisabledForTests()) -->Line_13 $$ bpos.updateActorStatesFromHeartbeat(this, resp.getNameNodeHaState())[ CD ]
Line_9 $$ if (!dn.areHeartbeatsDisabledForTests()) -->Line_15 $$ if (state == HAServiceState.ACTIVE) [ CD ]
Line_57 $$ long sleepTime = Math.min(1000, dnConf.heartBeatInterval)-->Line_58 $$ Thread.sleep(sleepTime)[ FD ]
Line_9 $$ if (!dn.areHeartbeatsDisabledForTests()) -->Line_19 $$ if (!processCommand(resp.getCommands()))[ CD ]
Line_10 $$ HeartbeatResponse resp = sendHeartBeat()-->Line_14 $$ state = resp.getNameNodeHaState().getState()[ FD ]
Line_9 $$ if (!dn.areHeartbeatsDisabledForTests()) -->Line_14 $$ state = resp.getNameNodeHaState().getState()[ CD ]
Line_35 $$ if (dn.blockScanner != null) -->Line_36 $$ dn.blockScanner.addBlockPool(bpos.getBlockPoolId())[ CD ]
Line_10 $$ HeartbeatResponse resp = sendHeartBeat()-->Line_13 $$ bpos.updateActorStatesFromHeartbeat(this, resp.getNameNodeHaState())[ FD ]
Line_9 $$ if (!dn.areHeartbeatsDisabledForTests()) -->Line_10 $$ HeartbeatResponse resp = sendHeartBeat()[ CD ]
Line_27 $$ if (sendImmediateIBR || (startTime - lastDeletedReport > dnConf.deleteReportInterval)) -->Line_28 $$ reportReceivedDeletedBlocks()[ CD ]
Line_9 $$ if (!dn.areHeartbeatsDisabledForTests()) -->Line_21 $$ long endProcessCommands = now()[ CD ]
Line_15 $$ if (state == HAServiceState.ACTIVE) -->Line_16 $$ handleRollingUpgradeStatus(resp)[ CD ]
Line_50 $$ if (UnregisteredNodeException.class.getName().equals(reClass) || DisallowedDatanodeException.class.getName().equals(reClass) || IncorrectVersionException.class.getName().equals(reClass)) -->Line_53 $$ return[ CD ]
Line_9 $$ if (!dn.areHeartbeatsDisabledForTests()) -->Line_12 $$ dn.getMetrics().addHeartbeat(now() - startTime)[ CD ]
Line_49 $$ String reClass = re.getClassName()-->Line_50 $$ if (UnregisteredNodeException.class.getName().equals(reClass) || DisallowedDatanodeException.class.getName().equals(reClass) || IncorrectVersionException.class.getName().equals(reClass)) [ FD ]
Line_10 $$ HeartbeatResponse resp = sendHeartBeat()-->Line_16 $$ handleRollingUpgradeStatus(resp)[ FD ]
Line_10 $$ HeartbeatResponse resp = sendHeartBeat()-->Line_19 $$ if (!processCommand(resp.getCommands()))[ FD ]
Line_2 $$ private void offerService() throws Exception -->Line_4 $$ while (shouldRun()) [ CD ]
Line_38 $$ long waitTime = dnConf.heartBeatInterval - (Time.now() - lastHeartbeat)-->Line_42 $$ pendingIncrementalBRperStorage.wait(waitTime)[ FD ]
Line_50 $$ if (UnregisteredNodeException.class.getName().equals(reClass) || DisallowedDatanodeException.class.getName().equals(reClass) || IncorrectVersionException.class.getName().equals(reClass)) -->Line_51 $$ LOG.warn(this + " is shutting down", re)[ CD ]
Line_31 $$ List<DatanodeCommand> cmds = blockReport()-->Line_32 $$ processCommand(cmds == null ? null : cmds.toArray(new DatanodeCommand[cmds.size()]))[ FD ]
