Line_6 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")-->Line_9 $$ ms.registerSink("collector", "Collector of values from all threads.", sink)[ FD ]
Line_6 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")-->Line_15 $$ sources[i] = ms.register("threadSource" + i, "A source of my threaded goodness.", new TestSource("threadSourceRec" + i))[ FD ]
Line_16 $$ threads[i] = new Thread(new Runnable() -->Line_45 $$ sources[mySource].g1.set(230)[ CD ]
Line_16 $$ threads[i] = new Thread(new Runnable() -->Line_46 $$ ms.publishMetricsNow()[ CD ]
Line_62 $$ assertTrue(StringUtils.join("\n", Arrays.asList(results)), Iterables.all(Arrays.asList(results), new Predicate<String>() -->Line_66 $$ return input.equalsIgnoreCase("Passed")[ FD ]
Line_6 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")-->Line_69 $$ ms.stop()[ FD ]
Line_4 $$ final int numThreads = 10-->Line_5 $$ new ConfigBuilder().add("*.period", 80).add("test.sink.collector." + MetricsConfig.QUEUE_CAPACITY_KEY, numThreads).save(TestMetricsConfig.getTestFilename("hadoop-metrics2-test"))[ FD ]
Line_14 $$ for (int i = 0; i < numThreads; i++) -->Line_16 $$ threads[i] = new Thread(new Runnable() [ CD ]
Line_12 $$ final String[] results = new String[numThreads]-->Line_62 $$ assertTrue(StringUtils.join("\n", Arrays.asList(results)), Iterables.all(Arrays.asList(results), new Predicate<String>() [ FD ]
Line_51 $$ if (sink.collected[mySource].get() != 230L) -->Line_53 $$ return[ CD ]
Line_16 $$ threads[i] = new Thread(new Runnable() -->Line_51 $$ if (sink.collected[mySource].get() != 230L) [ CD ]
Line_37 $$ if (sink.collected[mySource].get() != 0L) -->Line_39 $$ return[ CD ]
Line_16 $$ threads[i] = new Thread(new Runnable() -->Line_37 $$ if (sink.collected[mySource].get() != 0L) [ CD ]
Line_62 $$ assertTrue(StringUtils.join("\n", Arrays.asList(results)), Iterables.all(Arrays.asList(results), new Predicate<String>() -->Line_66 $$ return input.equalsIgnoreCase("Passed")[ CD ]
Line_13 $$ final CyclicBarrier barrier1 = new CyclicBarrier(numThreads), barrier2 = new CyclicBarrier(numThreads)-->Line_20 $$ barrier1.await(2, TimeUnit.SECONDS)[ FD ]
Line_16 $$ threads[i] = new Thread(new Runnable() -->Line_55 $$ results[mySource] = "Passed"[ CD ]
Line_4 $$ final int numThreads = 10-->Line_14 $$ for (int i = 0; i < numThreads; i++) [ FD ]
Line_6 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")-->Line_70 $$ ms.shutdown()[ FD ]
Line_6 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")-->Line_7 $$ ms.start()[ FD ]
Line_8 $$ final CollectingSink sink = new CollectingSink(numThreads)-->Line_9 $$ ms.registerSink("collector", "Collector of values from all threads.", sink)[ FD ]
Line_16 $$ threads[i] = new Thread(new Runnable() -->Line_31 $$ return true[ CD ]
Line_37 $$ if (sink.collected[mySource].get() != 0L) -->Line_38 $$ results[mySource] = "Someone else collected my metric!"[ CD ]
Line_16 $$ threads[i] = new Thread(new Runnable() -->Line_36 $$ int mySource = Integer.parseInt(Thread.currentThread().getName())[ CD ]
Line_51 $$ if (sink.collected[mySource].get() != 230L) -->Line_52 $$ results[mySource] = "Metric not collected!"[ CD ]
Line_6 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")-->Line_46 $$ ms.publishMetricsNow()[ FD ]
Line_14 $$ for (int i = 0; i < numThreads; i++) -->Line_15 $$ sources[i] = ms.register("threadSource" + i, "A source of my threaded goodness.", new TestSource("threadSourceRec" + i))[ CD ]
