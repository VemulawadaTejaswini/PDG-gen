Line_3 $$ final int numThreads = 10-->Line_13 $$ for (int i = 0; i < numThreads; i++) [ FD ]
Line_5 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")-->Line_6 $$ ms.start()[ FD ]
Line_13 $$ for (int i = 0; i < numThreads; i++) -->Line_15 $$ threads[i] = new Thread(new Runnable() [ CD ]
Line_33 $$ if (sink.collected[mySource].get() != 0L) -->Line_35 $$ return[ CD ]
Line_15 $$ threads[i] = new Thread(new Runnable() -->Line_40 $$ ms.publishMetricsNow()[ CD ]
Line_12 $$ final CyclicBarrier barrier1 = new CyclicBarrier(numThreads), barrier2 = new CyclicBarrier(numThreads)-->Line_41 $$ if (!safeAwait(mySource, barrier2))[ FD ]
Line_12 $$ final CyclicBarrier barrier1 = new CyclicBarrier(numThreads), barrier2 = new CyclicBarrier(numThreads)-->Line_37 $$ if (!safeAwait(mySource, barrier1))[ FD ]
Line_54 $$ assertTrue(StringUtils.join("\n", Arrays.asList(results)), Iterables.all(Arrays.asList(results), new Predicate<String>() -->Line_56 $$ return input.equalsIgnoreCase("Passed")[ FD ]
Line_15 $$ threads[i] = new Thread(new Runnable() -->Line_29 $$ return true[ CD ]
Line_43 $$ if (sink.collected[mySource].get() != 230L) -->Line_45 $$ return[ CD ]
Line_5 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")-->Line_14 $$ sources[i] = ms.register("threadSource" + i, "A source of my threaded goodness.", new TestSource("threadSourceRec" + i))[ FD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_10 $$ final Thread[] threads = new Thread[numThreads][ CD ]
Line_15 $$ threads[i] = new Thread(new Runnable() -->Line_37 $$ if (!safeAwait(mySource, barrier1))[ CD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_5 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")[ CD ]
Line_32 $$ int mySource = Integer.parseInt(Thread.currentThread().getName())-->Line_37 $$ if (!safeAwait(mySource, barrier1))[ FD ]
Line_3 $$ final int numThreads = 10-->Line_4 $$ new ConfigBuilder().add("*.period", 80).add("test.sink.collector." + MetricsConfig.QUEUE_CAPACITY_KEY, numThreads).save(TestMetricsConfig.getTestFilename("hadoop-metrics2-test"))[ FD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_6 $$ ms.start()[ CD ]
Line_15 $$ threads[i] = new Thread(new Runnable() -->Line_43 $$ if (sink.collected[mySource].get() != 230L) [ CD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_8 $$ ms.registerSink("collector", "Collector of values from all threads.", sink)[ CD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_12 $$ final CyclicBarrier barrier1 = new CyclicBarrier(numThreads), barrier2 = new CyclicBarrier(numThreads)[ CD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_59 $$ ms.stop()[ CD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_4 $$ new ConfigBuilder().add("*.period", 80).add("test.sink.collector." + MetricsConfig.QUEUE_CAPACITY_KEY, numThreads).save(TestMetricsConfig.getTestFilename("hadoop-metrics2-test"))[ CD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_3 $$ final int numThreads = 10[ CD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_11 $$ final String[] results = new String[numThreads][ CD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_7 $$ final CollectingSink sink = new CollectingSink(numThreads)[ CD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_13 $$ for (int i = 0; i < numThreads; i++) [ CD ]
Line_15 $$ threads[i] = new Thread(new Runnable() -->Line_41 $$ if (!safeAwait(mySource, barrier2))[ CD ]
Line_5 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")-->Line_59 $$ ms.stop()[ FD ]
Line_37 $$ if (!safeAwait(mySource, barrier1))-->Line_38 $$ return[ CD ]
Line_15 $$ threads[i] = new Thread(new Runnable() -->Line_32 $$ int mySource = Integer.parseInt(Thread.currentThread().getName())[ CD ]
Line_32 $$ int mySource = Integer.parseInt(Thread.currentThread().getName())-->Line_41 $$ if (!safeAwait(mySource, barrier2))[ FD ]
Line_11 $$ final String[] results = new String[numThreads]-->Line_54 $$ assertTrue(StringUtils.join("\n", Arrays.asList(results)), Iterables.all(Arrays.asList(results), new Predicate<String>() [ FD ]
Line_13 $$ for (int i = 0; i < numThreads; i++) -->Line_14 $$ sources[i] = ms.register("threadSource" + i, "A source of my threaded goodness.", new TestSource("threadSourceRec" + i))[ CD ]
Line_5 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")-->Line_40 $$ ms.publishMetricsNow()[ FD ]
Line_43 $$ if (sink.collected[mySource].get() != 230L) -->Line_44 $$ results[mySource] = "Metric not collected!"[ CD ]
Line_5 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")-->Line_60 $$ ms.shutdown()[ FD ]
Line_41 $$ if (!safeAwait(mySource, barrier2))-->Line_42 $$ return[ CD ]
Line_15 $$ threads[i] = new Thread(new Runnable() -->Line_47 $$ results[mySource] = "Passed"[ CD ]
Line_33 $$ if (sink.collected[mySource].get() != 0L) -->Line_34 $$ results[mySource] = "Someone else collected my metric!"[ CD ]
Line_15 $$ threads[i] = new Thread(new Runnable() -->Line_37 $$ if (!safeAwait(mySource, barrier1))[ FD ]
Line_15 $$ threads[i] = new Thread(new Runnable() -->Line_33 $$ if (sink.collected[mySource].get() != 0L) [ CD ]
Line_15 $$ threads[i] = new Thread(new Runnable() -->Line_39 $$ sources[mySource].g1.set(230)[ CD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_60 $$ ms.shutdown()[ CD ]
Line_15 $$ threads[i] = new Thread(new Runnable() -->Line_41 $$ if (!safeAwait(mySource, barrier2))[ FD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_54 $$ assertTrue(StringUtils.join("\n", Arrays.asList(results)), Iterables.all(Arrays.asList(results), new Predicate<String>() [ CD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_53 $$ assertEquals(0L, ms.droppedPubAll.value())[ CD ]
Line_12 $$ final CyclicBarrier barrier1 = new CyclicBarrier(numThreads), barrier2 = new CyclicBarrier(numThreads)-->Line_18 $$ barrier1.await(2, TimeUnit.SECONDS)[ FD ]
Line_54 $$ assertTrue(StringUtils.join("\n", Arrays.asList(results)), Iterables.all(Arrays.asList(results), new Predicate<String>() -->Line_56 $$ return input.equalsIgnoreCase("Passed")[ CD ]
Line_2 $$ public void testMultiThreadedPublish() throws Exception -->Line_9 $$ final TestSource[] sources = new TestSource[numThreads][ CD ]
Line_7 $$ final CollectingSink sink = new CollectingSink(numThreads)-->Line_8 $$ ms.registerSink("collector", "Collector of values from all threads.", sink)[ FD ]
Line_5 $$ final MetricsSystemImpl ms = new MetricsSystemImpl("Test")-->Line_8 $$ ms.registerSink("collector", "Collector of values from all threads.", sink)[ FD ]
