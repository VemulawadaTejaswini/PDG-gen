Line_4 $$ Thread currentThread = Thread.currentThread()-->Line_18 $$ Assert.assertFalse(currentThread.isInterrupted())[ FD ]
Line_2 $$ public void testInterruptionException() throws Exception -->Line_5 $$ currentThread.interrupt()[ CD ]
Line_4 $$ Thread currentThread = Thread.currentThread()-->Line_11 $$ Assert.assertFalse(currentThread.isInterrupted())[ FD ]
Line_4 $$ Thread currentThread = Thread.currentThread()-->Line_12 $$ currentThread.interrupt()[ FD ]
Line_2 $$ public void testInterruptionException() throws Exception -->Line_4 $$ Thread currentThread = Thread.currentThread()[ CD ]
Line_3 $$ NoticeableFuture<Object> noticeableFutureConverter = new NopNoticeableFutureConverter(_defaultNoticeableFuture)-->Line_7 $$ noticeableFutureConverter.get()[ FD ]
Line_4 $$ Thread currentThread = Thread.currentThread()-->Line_5 $$ currentThread.interrupt()[ FD ]
Line_2 $$ public void testInterruptionException() throws Exception -->Line_12 $$ currentThread.interrupt()[ CD ]
Line_2 $$ public void testInterruptionException() throws Exception -->Line_18 $$ Assert.assertFalse(currentThread.isInterrupted())[ CD ]
Line_2 $$ public void testInterruptionException() throws Exception -->Line_3 $$ NoticeableFuture<Object> noticeableFutureConverter = new NopNoticeableFutureConverter(_defaultNoticeableFuture)[ CD ]
Line_2 $$ public void testInterruptionException() throws Exception -->Line_11 $$ Assert.assertFalse(currentThread.isInterrupted())[ CD ]
Line_3 $$ NoticeableFuture<Object> noticeableFutureConverter = new NopNoticeableFutureConverter(_defaultNoticeableFuture)-->Line_14 $$ noticeableFutureConverter.get(1, TimeUnit.MILLISECONDS)[ FD ]
