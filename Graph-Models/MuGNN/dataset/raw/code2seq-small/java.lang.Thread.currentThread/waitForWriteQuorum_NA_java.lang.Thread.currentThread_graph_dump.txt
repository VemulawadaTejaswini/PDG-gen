Line_2 $$ <V> Map<AsyncLogger, V> waitForWriteQuorum(QuorumCall<AsyncLogger, V> q, int timeoutMs, String operationName) throws IOException -->Line_5 $$ q.waitFor(loggers.size(), majority, majority, timeoutMs, operationName)[ FD ]
Line_2 $$ <V> Map<AsyncLogger, V> waitForWriteQuorum(QuorumCall<AsyncLogger, V> q, int timeoutMs, String operationName) throws IOException -->Line_18 $$ return q.getResults()[ FD ]
Line_2 $$ <V> Map<AsyncLogger, V> waitForWriteQuorum(QuorumCall<AsyncLogger, V> q, int timeoutMs, String operationName) throws IOException -->Line_18 $$ return q.getResults()[ CD ]
Line_3 $$ int majority = getMajoritySize()-->Line_5 $$ q.waitFor(loggers.size(), majority, majority, timeoutMs, operationName)[ FD ]
Line_2 $$ <V> Map<AsyncLogger, V> waitForWriteQuorum(QuorumCall<AsyncLogger, V> q, int timeoutMs, String operationName) throws IOException -->Line_15 $$ if (q.countSuccesses() < majority) [ FD ]
Line_3 $$ int majority = getMajoritySize()-->Line_15 $$ if (q.countSuccesses() < majority) [ FD ]
Line_2 $$ <V> Map<AsyncLogger, V> waitForWriteQuorum(QuorumCall<AsyncLogger, V> q, int timeoutMs, String operationName) throws IOException -->Line_16 $$ q.rethrowException("Got too many exceptions to achieve quorum size " + getMajorityString())[ FD ]
Line_15 $$ if (q.countSuccesses() < majority) -->Line_16 $$ q.rethrowException("Got too many exceptions to achieve quorum size " + getMajorityString())[ CD ]
Line_2 $$ <V> Map<AsyncLogger, V> waitForWriteQuorum(QuorumCall<AsyncLogger, V> q, int timeoutMs, String operationName) throws IOException -->Line_15 $$ if (q.countSuccesses() < majority) [ CD ]
Line_2 $$ <V> Map<AsyncLogger, V> waitForWriteQuorum(QuorumCall<AsyncLogger, V> q, int timeoutMs, String operationName) throws IOException -->Line_3 $$ int majority = getMajoritySize()[ CD ]
