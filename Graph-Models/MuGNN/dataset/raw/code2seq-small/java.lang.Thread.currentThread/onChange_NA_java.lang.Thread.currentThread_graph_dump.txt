Line_2 $$ public void onChange(FileWatcher watcher, FileWatcherEvent event) -->Line_10 $$ File file = event.getFile()[ FD ]
Line_2 $$ public void onChange(FileWatcher watcher, FileWatcherEvent event) -->Line_3 $$ lock.lock()[ CD ]
Line_10 $$ File file = event.getFile()-->Line_12 $$ if (!Thread.currentThread().isInterrupted() && watcher.isRunning() && file.isDirectory() && event.getType().equals(FileWatcherEvent.Type.CREATE)) [ FD ]
Line_2 $$ public void onChange(FileWatcher watcher, FileWatcherEvent event) -->Line_7 $$ deliverEventToDelegate(watcher, event)[ FD ]
Line_2 $$ public void onChange(FileWatcher watcher, FileWatcherEvent event) -->Line_12 $$ if (!Thread.currentThread().isInterrupted() && watcher.isRunning() && file.isDirectory() && event.getType().equals(FileWatcherEvent.Type.CREATE)) [ FD ]
Line_10 $$ File file = event.getFile()-->Line_14 $$ newDirectory(watcher, file)[ FD ]
Line_2 $$ public void onChange(FileWatcher watcher, FileWatcherEvent event) -->Line_5 $$ if (event.getType().equals(FileWatcherEvent.Type.UNDEFINED) || event.getFile() == null) [ FD ]
Line_5 $$ if (event.getType().equals(FileWatcherEvent.Type.UNDEFINED) || event.getFile() == null) -->Line_8 $$ return[ CD ]
Line_5 $$ if (event.getType().equals(FileWatcherEvent.Type.UNDEFINED) || event.getFile() == null) -->Line_7 $$ deliverEventToDelegate(watcher, event)[ CD ]
Line_2 $$ public void onChange(FileWatcher watcher, FileWatcherEvent event) -->Line_6 $$ LOG.debug("Calling onChange with event [ FD ]
Line_2 $$ public void onChange(FileWatcher watcher, FileWatcherEvent event) -->Line_14 $$ newDirectory(watcher, file)[ FD ]
Line_5 $$ if (event.getType().equals(FileWatcherEvent.Type.UNDEFINED) || event.getFile() == null) -->Line_6 $$ LOG.debug("Calling onChange with event [ CD ]
Line_2 $$ public void onChange(FileWatcher watcher, FileWatcherEvent event) -->Line_11 $$ maybeFire(watcher, event)[ FD ]
