Line_16 $$ for (int i = 0; i < threads.length; i++) -->Line_19 $$ Runnable r = new Runnable() [ CD ]
Line_6 $$ final long docs = randomIntBetween(1, 50)-->Line_18 $$ assertHitCount(client().prepareSearch("test").setSize(0).setQuery(QueryBuilders.termQuery("field", threadNum)).get(), docs)[ FD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_7 $$ for (int i = 0; i < docs; i++) [ CD ]
Line_7 $$ for (int i = 0; i < docs; i++) -->Line_49 $$ assertHitCount(client().prepareSearch("test").setSize(0).setQuery(QueryBuilders.termQuery("field", i)).get(), 0)[ FD ]
Line_6 $$ final long docs = randomIntBetween(1, 50)-->Line_26 $$ assertDBQResponse(rsp, docs, docs, 0L, 0L)[ FD ]
Line_16 $$ for (int i = 0; i < threads.length; i++) -->Line_36 $$ threads[i].start()[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_16 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_14 $$ final CountDownLatch start = new CountDownLatch(1)[ CD ]
Line_48 $$ for (int i = 0; i < threads.length; i++) -->Line_49 $$ assertHitCount(client().prepareSearch("test").setSize(0).setQuery(QueryBuilders.termQuery("field", i)).get(), 0)[ FD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_43 $$ if (assertionError != null) [ CD ]
Line_7 $$ for (int i = 0; i < docs; i++) -->Line_8 $$ for (int j = 0; j < threads.length; j++) [ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_5 $$ final Thread[] threads = new Thread[scaledRandomIntBetween(2, 5)][ CD ]
Line_16 $$ for (int i = 0; i < threads.length; i++) -->Line_18 $$ assertHitCount(client().prepareSearch("test").setSize(0).setQuery(QueryBuilders.termQuery("field", threadNum)).get(), docs)[ CD ]
Line_16 $$ for (int i = 0; i < threads.length; i++) -->Line_48 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_16 $$ for (int i = 0; i < threads.length; i++) -->Line_17 $$ final int threadNum = i[ CD ]
Line_8 $$ for (int j = 0; j < threads.length; j++) -->Line_9 $$ index("test", "test", String.valueOf(i * 10 + j), "field", j)[ FD ]
Line_15 $$ final AtomicReference<Throwable> exceptionHolder = new AtomicReference()-->Line_42 $$ Throwable assertionError = exceptionHolder.get()[ FD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_15 $$ final AtomicReference<Throwable> exceptionHolder = new AtomicReference()[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_47 $$ refresh()[ CD ]
Line_14 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_38 $$ start.countDown()[ FD ]
Line_15 $$ final AtomicReference<Throwable> exceptionHolder = new AtomicReference()-->Line_30 $$ exceptionHolder.set(e)[ FD ]
Line_7 $$ for (int i = 0; i < docs; i++) -->Line_48 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_25 $$ DeleteByQueryResponse rsp = newDeleteByQuery().setQuery(QueryBuilders.termQuery("field", threadNum)).get()-->Line_26 $$ assertDBQResponse(rsp, docs, docs, 0L, 0L)[ FD ]
Line_17 $$ final int threadNum = i-->Line_18 $$ assertHitCount(client().prepareSearch("test").setSize(0).setQuery(QueryBuilders.termQuery("field", threadNum)).get(), docs)[ FD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_6 $$ final long docs = randomIntBetween(1, 50)[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_3 $$ createIndex("test")[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_46 $$ assertThat(assertionError + " should be null", assertionError, nullValue())[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_12 $$ refresh()[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_42 $$ Throwable assertionError = exceptionHolder.get()[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_38 $$ start.countDown()[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_48 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_51 $$ assertSearchContextsClosed()[ CD ]
Line_14 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_24 $$ start.await()[ FD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Exception -->Line_13 $$ assertHitCount(client().prepareSearch("test").setSize(0).get(), docs * threads.length)[ CD ]
Line_7 $$ for (int i = 0; i < docs; i++) -->Line_16 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_16 $$ for (int i = 0; i < threads.length; i++) -->Line_49 $$ assertHitCount(client().prepareSearch("test").setSize(0).setQuery(QueryBuilders.termQuery("field", i)).get(), 0)[ FD ]
Line_8 $$ for (int j = 0; j < threads.length; j++) -->Line_9 $$ index("test", "test", String.valueOf(i * 10 + j), "field", j)[ CD ]
Line_16 $$ for (int i = 0; i < threads.length; i++) -->Line_35 $$ threads[i] = new Thread(r)[ CD ]
Line_6 $$ final long docs = randomIntBetween(1, 50)-->Line_7 $$ for (int i = 0; i < docs; i++) [ FD ]
Line_43 $$ if (assertionError != null) -->Line_44 $$ assertionError.printStackTrace()[ CD ]
Line_48 $$ for (int i = 0; i < threads.length; i++) -->Line_49 $$ assertHitCount(client().prepareSearch("test").setSize(0).setQuery(QueryBuilders.termQuery("field", i)).get(), 0)[ CD ]
Line_17 $$ final int threadNum = i-->Line_25 $$ DeleteByQueryResponse rsp = newDeleteByQuery().setQuery(QueryBuilders.termQuery("field", threadNum)).get()[ FD ]
