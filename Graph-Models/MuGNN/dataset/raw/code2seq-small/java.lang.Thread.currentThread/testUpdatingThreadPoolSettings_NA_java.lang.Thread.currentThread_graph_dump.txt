Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_41 $$ for (int i = 0; i < 2; i++) [ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_24 $$ assertThat(((ThreadPoolExecutor) oldExecutor).isTerminating(), equalTo(true))[ CD ]
Line_44 $$ for (ThreadPool.Info info : nodeInfo.getThreadPool()) -->Line_46 $$ assertEquals(info.getThreadPoolType(), ThreadPool.ThreadPoolType.FIXED)[ FD ]
Line_41 $$ for (int i = 0; i < 2; i++) -->Line_42 $$ NodeInfo nodeInfo = nodesInfoResponse.getNodes()[i][ CD ]
Line_41 $$ for (int i = 0; i < 2; i++) -->Line_43 $$ boolean found = false[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_7 $$ client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder().put("threadpool.search.queue_size", 2000).build()).execute().actionGet()[ CD ]
Line_43 $$ boolean found = false-->Line_51 $$ assertThat(found, equalTo(true))[ FD ]
Line_42 $$ NodeInfo nodeInfo = nodesInfoResponse.getNodes()[i]-->Line_44 $$ for (ThreadPool.Info info : nodeInfo.getThreadPool()) [ FD ]
Line_41 $$ for (int i = 0; i < 2; i++) -->Line_51 $$ assertThat(found, equalTo(true))[ CD ]
Line_43 $$ boolean found = false-->Line_47 $$ found = true[ FD ]
Line_4 $$ ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class)-->Line_8 $$ assertThat(((ThreadPoolExecutor) threadPool.executor(Names.SEARCH)).getQueue().remainingCapacity(), equalTo(2000))[ FD ]
Line_44 $$ for (ThreadPool.Info info : nodeInfo.getThreadPool()) -->Line_45 $$ if (info.getName().equals(Names.SEARCH)) [ FD ]
Line_47 $$ found = true-->Line_51 $$ assertThat(found, equalTo(true))[ FD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_37 $$ client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder().put("threadpool.search.queue_size", 500)).execute().actionGet()[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_12 $$ threadPool.executor(Names.SEARCH).execute(() -> [ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_8 $$ assertThat(((ThreadPoolExecutor) threadPool.executor(Names.SEARCH)).getQueue().remainingCapacity(), equalTo(2000))[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_21 $$ client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder().put("threadpool.search.queue_size", 1000).build()).execute().actionGet()[ CD ]
Line_11 $$ Executor oldExecutor = threadPool.executor(Names.SEARCH)-->Line_22 $$ assertThat(threadPool.executor(Names.SEARCH), not(sameInstance(oldExecutor)))[ FD ]
Line_45 $$ if (info.getName().equals(Names.SEARCH)) -->Line_46 $$ assertEquals(info.getThreadPoolType(), ThreadPool.ThreadPoolType.FIXED)[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_22 $$ assertThat(threadPool.executor(Names.SEARCH), not(sameInstance(oldExecutor)))[ CD ]
Line_4 $$ ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class)-->Line_11 $$ Executor oldExecutor = threadPool.executor(Names.SEARCH)[ FD ]
Line_4 $$ ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class)-->Line_12 $$ threadPool.executor(Names.SEARCH).execute(() -> [ FD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_38 $$ barrier.await(10, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_25 $$ assertThat(((ThreadPoolExecutor) oldExecutor).isTerminated(), equalTo(false))[ CD ]
Line_45 $$ if (info.getName().equals(Names.SEARCH)) -->Line_47 $$ found = true[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_11 $$ Executor oldExecutor = threadPool.executor(Names.SEARCH)[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_23 $$ assertThat(((ThreadPoolExecutor) oldExecutor).isShutdown(), equalTo(true))[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_3 $$ internalCluster().startNodesAsync(2).get()[ CD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_4 $$ ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class)[ CD ]
Line_4 $$ ThreadPool threadPool = internalCluster().getDataNodeInstance(ThreadPool.class)-->Line_22 $$ assertThat(threadPool.executor(Names.SEARCH), not(sameInstance(oldExecutor)))[ FD ]
Line_2 $$ public void testUpdatingThreadPoolSettings() throws Exception -->Line_26 $$ barrier.await(10, TimeUnit.SECONDS)[ CD ]
