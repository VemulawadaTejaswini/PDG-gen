Line_14 $$ Throwable throwable = ee.getCause()-->Line_15 $$ Assert.assertSame(InterruptedException.class, throwable.getClass())[ FD ]
Line_8 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(builder.build(), new ReturnProcessCallable<String>("Test result"))-->Line_9 $$ NoticeableFuture<String> noticeableFuture = fabricWorker.getProcessNoticeableFuture()[ FD ]
Line_9 $$ NoticeableFuture<String> noticeableFuture = fabricWorker.getProcessNoticeableFuture()-->Line_11 $$ noticeableFuture.get()[ FD ]
Line_17 $$ Collection<? extends FabricWorker<?>> fabricWorkers = nettyFabricAgentStub.getFabricWorkers()-->Line_18 $$ Assert.assertTrue(fabricWorkers.isEmpty())[ FD ]
Line_4 $$ NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, Long.MAX_VALUE)-->Line_17 $$ Collection<? extends FabricWorker<?>> fabricWorkers = nettyFabricAgentStub.getFabricWorkers()[ FD ]
Line_7 $$ Builder builder = new Builder()-->Line_8 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(builder.build(), new ReturnProcessCallable<String>("Test result"))[ FD ]
Line_5 $$ Thread currentThread = Thread.currentThread()-->Line_6 $$ currentThread.interrupt()[ FD ]
Line_4 $$ NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, Long.MAX_VALUE)-->Line_8 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(builder.build(), new ReturnProcessCallable<String>("Test result"))[ FD ]
