Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_17 $$ return null[ CD ]
Line_7 $$ final SvnAuthenticationNotifier.AuthenticationRequest obj = new SvnAuthenticationNotifier.AuthenticationRequest(myProject, kind, url, realm)-->Line_8 $$ final SVNURL wcUrl = myAuthenticationNotifier.getWcUrl(obj)[ FD ]
Line_3 $$ if (ApplicationManager.getApplication().isUnitTestMode() && ISVNAuthenticationManager.USERNAME.equals(kind)) -->Line_5 $$ return new SVNUserNameAuthentication(userName, false)[ CD ]
Line_7 $$ final SvnAuthenticationNotifier.AuthenticationRequest obj = new SvnAuthenticationNotifier.AuthenticationRequest(myProject, kind, url, realm)-->Line_13 $$ if (myAuthenticationNotifier.ensureNotify(obj)) [ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_3 $$ if (ApplicationManager.getApplication().isUnitTestMode() && ISVNAuthenticationManager.USERNAME.equals(kind)) [ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_14 $$ return myAuthenticationManager.requestFromCache(kind, url, realm, errorMessage, previousAuth, authMayBeStored)[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_7 $$ final SvnAuthenticationNotifier.AuthenticationRequest obj = new SvnAuthenticationNotifier.AuthenticationRequest(myProject, kind, url, realm)[ CD ]
Line_3 $$ if (ApplicationManager.getApplication().isUnitTestMode() && ISVNAuthenticationManager.USERNAME.equals(kind)) -->Line_4 $$ final String userName = previousAuth != null && previousAuth.getUserName() != null ? previousAuth.getUserName() : SystemProperties.getUserName()[ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_8 $$ final SVNURL wcUrl = myAuthenticationNotifier.getWcUrl(obj)[ CD ]
Line_13 $$ if (myAuthenticationNotifier.ensureNotify(obj)) -->Line_14 $$ return myAuthenticationManager.requestFromCache(kind, url, realm, errorMessage, previousAuth, authMayBeStored)[ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_4 $$ final String userName = previousAuth != null && previousAuth.getUserName() != null ? previousAuth.getUserName() : SystemProperties.getUserName()[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_3 $$ if (ApplicationManager.getApplication().isUnitTestMode() && ISVNAuthenticationManager.USERNAME.equals(kind)) [ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_9 $$ if (wcUrl == null || ourForceInteractive.contains(Thread.currentThread())) [ CD ]
Line_9 $$ if (wcUrl == null || ourForceInteractive.contains(Thread.currentThread())) -->Line_13 $$ if (myAuthenticationNotifier.ensureNotify(obj)) [ CD ]
