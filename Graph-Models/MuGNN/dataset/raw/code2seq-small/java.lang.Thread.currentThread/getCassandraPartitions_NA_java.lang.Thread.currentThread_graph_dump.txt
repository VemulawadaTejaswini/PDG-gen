Line_2 $$ private List<CassandraPartition> getCassandraPartitions(CassandraTable table, TupleDomain<ColumnHandle> tupleDomain) -->Line_7 $$ if (partitionKeysSet.isEmpty()) [ CD ]
Line_10 $$ ImmutableList.Builder<ListenableFuture<List<CassandraPartition>>> getPartitionResults = ImmutableList.builder()-->Line_15 $$ for (ListenableFuture<List<CassandraPartition>> result : getPartitionResults.build()) [ FD ]
Line_2 $$ private List<CassandraPartition> getCassandraPartitions(CassandraTable table, TupleDomain<ColumnHandle> tupleDomain) -->Line_3 $$ if (tupleDomain.isNone()) [ FD ]
Line_10 $$ ImmutableList.Builder<ListenableFuture<List<CassandraPartition>>> getPartitionResults = ImmutableList.builder()-->Line_12 $$ getPartitionResults.add(executor.submit(() -> schemaProvider.getPartitions(table, partitionKeys)))[ FD ]
Line_14 $$ ImmutableList.Builder<CassandraPartition> partitions = ImmutableList.builder()-->Line_25 $$ return partitions.build()[ FD ]
Line_2 $$ private List<CassandraPartition> getCassandraPartitions(CassandraTable table, TupleDomain<ColumnHandle> tupleDomain) -->Line_8 $$ return schemaProvider.getAllPartitions(table)[ FD ]
Line_2 $$ private List<CassandraPartition> getCassandraPartitions(CassandraTable table, TupleDomain<ColumnHandle> tupleDomain) -->Line_12 $$ schemaProvider.getPartitions(table, partitionKeys)[ FD ]
Line_14 $$ ImmutableList.Builder<CassandraPartition> partitions = ImmutableList.builder()-->Line_17 $$ partitions.addAll(result.get())[ FD ]
Line_2 $$ private List<CassandraPartition> getCassandraPartitions(CassandraTable table, TupleDomain<ColumnHandle> tupleDomain) -->Line_3 $$ if (tupleDomain.isNone()) [ CD ]
Line_2 $$ private List<CassandraPartition> getCassandraPartitions(CassandraTable table, TupleDomain<ColumnHandle> tupleDomain) -->Line_6 $$ Set<List<Object>> partitionKeysSet = getPartitionKeysSet(table, tupleDomain)[ CD ]
Line_2 $$ private List<CassandraPartition> getCassandraPartitions(CassandraTable table, TupleDomain<ColumnHandle> tupleDomain) -->Line_14 $$ ImmutableList.Builder<CassandraPartition> partitions = ImmutableList.builder()[ CD ]
Line_7 $$ if (partitionKeysSet.isEmpty()) -->Line_8 $$ return schemaProvider.getAllPartitions(table)[ CD ]
Line_2 $$ private List<CassandraPartition> getCassandraPartitions(CassandraTable table, TupleDomain<ColumnHandle> tupleDomain) -->Line_25 $$ return partitions.build()[ CD ]
Line_2 $$ private List<CassandraPartition> getCassandraPartitions(CassandraTable table, TupleDomain<ColumnHandle> tupleDomain) -->Line_10 $$ ImmutableList.Builder<ListenableFuture<List<CassandraPartition>>> getPartitionResults = ImmutableList.builder()[ CD ]
Line_11 $$ for (List<Object> partitionKeys : partitionKeysSet) -->Line_12 $$ schemaProvider.getPartitions(table, partitionKeys)[ FD ]
Line_6 $$ Set<List<Object>> partitionKeysSet = getPartitionKeysSet(table, tupleDomain)-->Line_7 $$ if (partitionKeysSet.isEmpty()) [ FD ]
Line_3 $$ if (tupleDomain.isNone()) -->Line_4 $$ return ImmutableList.of()[ CD ]
Line_15 $$ for (ListenableFuture<List<CassandraPartition>> result : getPartitionResults.build()) -->Line_17 $$ partitions.addAll(result.get())[ FD ]
Line_2 $$ private List<CassandraPartition> getCassandraPartitions(CassandraTable table, TupleDomain<ColumnHandle> tupleDomain) -->Line_6 $$ Set<List<Object>> partitionKeysSet = getPartitionKeysSet(table, tupleDomain)[ FD ]
