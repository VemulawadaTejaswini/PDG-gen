Line_11 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_13 $$ ctx.put(SecurityConstants.SIGNATURE_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("actasKeystore.properties"))[ FD ]
Line_17 $$ STSClient stsClient = new STSClient(bus)-->Line_24 $$ ctx.put(SecurityConstants.STS_CLIENT, stsClient)[ FD ]
Line_2 $$ public String sayHello(String host, String port) -->Line_3 $$ Bus bus = BusFactory.newInstance().createBus()[ CD ]
Line_7 $$ final QName serviceName = new QName("http://www.jboss.org/jbossws/ws-extensions/wssecuritypolicy", "SecurityService")-->Line_9 $$ Service service = Service.create(wsdlURL, serviceName)[ FD ]
Line_11 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_24 $$ ctx.put(SecurityConstants.STS_CLIENT, stsClient)[ FD ]
Line_8 $$ final URL wsdlURL = new URL(serviceURL + "?wsdl")-->Line_9 $$ Service service = Service.create(wsdlURL, serviceName)[ FD ]
Line_11 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_15 $$ ctx.put(SecurityConstants.ENCRYPT_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("../../META-INF/clientKeystore.properties"))[ FD ]
Line_11 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_14 $$ ctx.put(SecurityConstants.SIGNATURE_USERNAME, "myactaskey")[ FD ]
Line_18 $$ Map<String, Object> props = stsClient.getProperties()-->Line_21 $$ props.put(SecurityConstants.STS_TOKEN_USERNAME, "myactaskey")[ FD ]
Line_18 $$ Map<String, Object> props = stsClient.getProperties()-->Line_20 $$ props.put(SecurityConstants.ENCRYPT_USERNAME, "mystskey")[ FD ]
Line_11 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_16 $$ ctx.put(SecurityConstants.ENCRYPT_USERNAME, "myservicekey")[ FD ]
Line_18 $$ Map<String, Object> props = stsClient.getProperties()-->Line_19 $$ props.put(SecurityConstants.USERNAME, "alice")[ FD ]
Line_10 $$ ServiceIface proxy = (ServiceIface) service.getPort(ServiceIface.class)-->Line_25 $$ return "ActAs " + proxy.sayHello()[ FD ]
Line_18 $$ Map<String, Object> props = stsClient.getProperties()-->Line_22 $$ props.put(SecurityConstants.STS_TOKEN_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("actasKeystore.properties"))[ FD ]
Line_18 $$ Map<String, Object> props = stsClient.getProperties()-->Line_23 $$ props.put(SecurityConstants.STS_TOKEN_USE_CERT_FOR_KEYINFO, "true")[ FD ]
Line_17 $$ STSClient stsClient = new STSClient(bus)-->Line_18 $$ Map<String, Object> props = stsClient.getProperties()[ FD ]
Line_3 $$ Bus bus = BusFactory.newInstance().createBus()-->Line_30 $$ bus.shutdown(true)[ FD ]
Line_11 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_12 $$ ctx.put(SecurityConstants.CALLBACK_HANDLER, new ActAsCallbackHandler())[ FD ]
Line_9 $$ Service service = Service.create(wsdlURL, serviceName)-->Line_10 $$ ServiceIface proxy = (ServiceIface) service.getPort(ServiceIface.class)[ FD ]
Line_3 $$ Bus bus = BusFactory.newInstance().createBus()-->Line_5 $$ BusFactory.setThreadDefaultBus(bus)[ FD ]
