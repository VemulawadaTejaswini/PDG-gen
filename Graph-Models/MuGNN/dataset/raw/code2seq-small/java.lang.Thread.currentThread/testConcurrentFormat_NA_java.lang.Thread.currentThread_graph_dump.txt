Line_18 $$ BookKeeperJournalManager bkjm = null-->Line_22 $$ bkjm.format(nsi)[ FD ]
Line_4 $$ final NamespaceInfo nsi = newNSInfo()-->Line_6 $$ bkjm.format(nsi)[ FD ]
Line_18 $$ BookKeeperJournalManager bkjm = null-->Line_37 $$ bkjm.close()[ FD ]
Line_12 $$ final int numThreads = 40-->Line_46 $$ ExecutorService service = Executors.newFixedThreadPool(numThreads)[ FD ]
Line_5 $$ BookKeeperJournalManager bkjm = new BookKeeperJournalManager(conf, uri, nsi)-->Line_22 $$ bkjm.format(nsi)[ FD ]
Line_7 $$ for (int i = 1; i < 100 * 2; i += 2) -->Line_8 $$ bkjm.startLogSegment(i, NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION)[ CD ]
Line_15 $$ for (int i = 0; i < numThreads; i++) -->Line_16 $$ threads.add(new Callable<ThreadStatus>() [ CD ]
Line_7 $$ for (int i = 1; i < 100 * 2; i += 2) -->Line_15 $$ for (int i = 0; i < numThreads; i++) [ FD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_5 $$ BookKeeperJournalManager bkjm = new BookKeeperJournalManager(conf, uri, nsi)[ CD ]
Line_20 $$ bkjm = new BookKeeperJournalManager(conf, uri, nsi)-->Line_22 $$ bkjm.format(nsi)[ FD ]
Line_5 $$ BookKeeperJournalManager bkjm = new BookKeeperJournalManager(conf, uri, nsi)-->Line_11 $$ bkjm.close()[ FD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_14 $$ final CyclicBarrier barrier = new CyclicBarrier(numThreads)[ CD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_57 $$ assertTrue("No thread managed to complete formatting", numCompleted > 0)[ CD ]
Line_13 $$ List<Callable<ThreadStatus>> threads = new ArrayList<Callable<ThreadStatus>>()-->Line_47 $$ List<Future<ThreadStatus>> statuses = service.invokeAll(threads, 60, TimeUnit.SECONDS)[ FD ]
Line_7 $$ for (int i = 1; i < 100 * 2; i += 2) -->Line_9 $$ bkjm.finalizeLogSegment(i, i + 1)[ CD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_6 $$ bkjm.format(nsi)[ CD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_56 $$ LOG.info("Completed " + numCompleted + " formats")[ CD ]
Line_7 $$ for (int i = 1; i < 100 * 2; i += 2) -->Line_9 $$ bkjm.finalizeLogSegment(i, i + 1)[ FD ]
Line_14 $$ final CyclicBarrier barrier = new CyclicBarrier(numThreads)-->Line_21 $$ barrier.await()[ FD ]
Line_5 $$ BookKeeperJournalManager bkjm = new BookKeeperJournalManager(conf, uri, nsi)-->Line_8 $$ bkjm.startLogSegment(i, NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION)[ FD ]
Line_5 $$ BookKeeperJournalManager bkjm = new BookKeeperJournalManager(conf, uri, nsi)-->Line_9 $$ bkjm.finalizeLogSegment(i, i + 1)[ FD ]
Line_5 $$ BookKeeperJournalManager bkjm = new BookKeeperJournalManager(conf, uri, nsi)-->Line_20 $$ bkjm = new BookKeeperJournalManager(conf, uri, nsi)[ FD ]
Line_20 $$ bkjm = new BookKeeperJournalManager(conf, uri, nsi)-->Line_37 $$ bkjm.close()[ FD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_13 $$ List<Callable<ThreadStatus>> threads = new ArrayList<Callable<ThreadStatus>>()[ CD ]
Line_13 $$ List<Callable<ThreadStatus>> threads = new ArrayList<Callable<ThreadStatus>>()-->Line_16 $$ threads.add(new Callable<ThreadStatus>() [ FD ]
Line_5 $$ BookKeeperJournalManager bkjm = new BookKeeperJournalManager(conf, uri, nsi)-->Line_37 $$ bkjm.close()[ FD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_15 $$ for (int i = 0; i < numThreads; i++) [ CD ]
Line_16 $$ threads.add(new Callable<ThreadStatus>() -->Line_18 $$ BookKeeperJournalManager bkjm = null[ CD ]
Line_4 $$ final NamespaceInfo nsi = newNSInfo()-->Line_22 $$ bkjm.format(nsi)[ FD ]
Line_20 $$ bkjm = new BookKeeperJournalManager(conf, uri, nsi)-->Line_35 $$ if (bkjm != null) [ FD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_12 $$ final int numThreads = 40[ CD ]
Line_7 $$ for (int i = 1; i < 100 * 2; i += 2) -->Line_8 $$ bkjm.startLogSegment(i, NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION)[ FD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_4 $$ final NamespaceInfo nsi = newNSInfo()[ CD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_46 $$ ExecutorService service = Executors.newFixedThreadPool(numThreads)[ CD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_7 $$ for (int i = 1; i < 100 * 2; i += 2) [ CD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_47 $$ List<Future<ThreadStatus>> statuses = service.invokeAll(threads, 60, TimeUnit.SECONDS)[ CD ]
Line_5 $$ BookKeeperJournalManager bkjm = new BookKeeperJournalManager(conf, uri, nsi)-->Line_35 $$ if (bkjm != null) [ FD ]
Line_5 $$ BookKeeperJournalManager bkjm = new BookKeeperJournalManager(conf, uri, nsi)-->Line_6 $$ bkjm.format(nsi)[ FD ]
Line_12 $$ final int numThreads = 40-->Line_15 $$ for (int i = 0; i < numThreads; i++) [ FD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_11 $$ bkjm.close()[ CD ]
Line_18 $$ BookKeeperJournalManager bkjm = null-->Line_20 $$ bkjm = new BookKeeperJournalManager(conf, uri, nsi)[ FD ]
Line_2 $$ public void testConcurrentFormat() throws Exception -->Line_3 $$ final URI uri = BKJMUtil.createJournalURI("/hdfsjournal-concurrentformat")[ CD ]
Line_18 $$ BookKeeperJournalManager bkjm = null-->Line_35 $$ if (bkjm != null) [ FD ]
