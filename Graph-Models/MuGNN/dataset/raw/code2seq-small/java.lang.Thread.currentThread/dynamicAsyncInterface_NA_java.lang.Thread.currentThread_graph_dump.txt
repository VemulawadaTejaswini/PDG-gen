Line_2 $$ public void dynamicAsyncInterface() throws Exception -->Line_10 $$ asyncTest.doSomething(10)[ CD ]
Line_2 $$ public void dynamicAsyncInterface() throws Exception -->Line_12 $$ assertEquals("20", future.get())[ CD ]
Line_2 $$ public void dynamicAsyncInterface() throws Exception -->Line_5 $$ context.registerBeanDefinition("asyncTest", new RootBeanDefinition(DynamicAsyncInterfaceBean.class))[ CD ]
Line_2 $$ public void dynamicAsyncInterface() throws Exception -->Line_4 $$ GenericApplicationContext context = new GenericApplicationContext()[ CD ]
Line_4 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_5 $$ context.registerBeanDefinition("asyncTest", new RootBeanDefinition(DynamicAsyncInterfaceBean.class))[ FD ]
Line_2 $$ public void dynamicAsyncInterface() throws Exception -->Line_6 $$ context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class))[ CD ]
Line_4 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_6 $$ context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class))[ FD ]
Line_2 $$ public void dynamicAsyncInterface() throws Exception -->Line_7 $$ context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class))[ CD ]
Line_4 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_8 $$ context.refresh()[ FD ]
Line_2 $$ public void dynamicAsyncInterface() throws Exception -->Line_11 $$ Future<String> future = asyncTest.returnSomething(20)[ CD ]
Line_9 $$ AsyncInterface asyncTest = context.getBean("asyncTest", AsyncInterface.class)-->Line_10 $$ asyncTest.doSomething(10)[ FD ]
Line_2 $$ public void dynamicAsyncInterface() throws Exception -->Line_3 $$ originalThreadName = Thread.currentThread().getName()[ CD ]
Line_9 $$ AsyncInterface asyncTest = context.getBean("asyncTest", AsyncInterface.class)-->Line_11 $$ Future<String> future = asyncTest.returnSomething(20)[ FD ]
Line_4 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_9 $$ AsyncInterface asyncTest = context.getBean("asyncTest", AsyncInterface.class)[ FD ]
Line_11 $$ Future<String> future = asyncTest.returnSomething(20)-->Line_12 $$ assertEquals("20", future.get())[ FD ]
Line_2 $$ public void dynamicAsyncInterface() throws Exception -->Line_9 $$ AsyncInterface asyncTest = context.getBean("asyncTest", AsyncInterface.class)[ CD ]
Line_4 $$ GenericApplicationContext context = new GenericApplicationContext()-->Line_7 $$ context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class))[ FD ]
Line_2 $$ public void dynamicAsyncInterface() throws Exception -->Line_8 $$ context.refresh()[ CD ]
