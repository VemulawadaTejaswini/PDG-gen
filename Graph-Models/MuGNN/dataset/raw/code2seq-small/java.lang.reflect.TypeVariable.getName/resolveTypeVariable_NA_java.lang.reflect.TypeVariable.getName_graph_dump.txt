Line_2 $$ private static Type resolveTypeVariable(TypeVariable typeVariable, ParameterizedType context) -->Line_7 $$ return resolveType(context.getActualTypeArguments()[idx], context)[ FD ]
Line_2 $$ private static Type resolveTypeVariable(TypeVariable typeVariable, ParameterizedType context) -->Line_3 $$ Class clazz = extractClass(context.getRawType())[ FD ]
Line_2 $$ private static Type resolveTypeVariable(TypeVariable typeVariable, ParameterizedType context) -->Line_3 $$ Class clazz = extractClass(context.getRawType())[ CD ]
Line_2 $$ private static Type resolveTypeVariable(TypeVariable typeVariable, ParameterizedType context) -->Line_10 $$ return typeVariable[ CD ]
Line_3 $$ Class clazz = extractClass(context.getRawType())-->Line_4 $$ TypeVariable[] typeParameters = clazz.getTypeParameters()[ FD ]
Line_2 $$ private static Type resolveTypeVariable(TypeVariable typeVariable, ParameterizedType context) -->Line_6 $$ if (typeVariable.getName().equals(typeParameters[idx].getName())) [ FD ]
Line_2 $$ private static Type resolveTypeVariable(TypeVariable typeVariable, ParameterizedType context) -->Line_4 $$ TypeVariable[] typeParameters = clazz.getTypeParameters()[ CD ]
Line_2 $$ private static Type resolveTypeVariable(TypeVariable typeVariable, ParameterizedType context) -->Line_5 $$ for (int idx = 0; idx < typeParameters.length; idx++) [ CD ]
Line_5 $$ for (int idx = 0; idx < typeParameters.length; idx++) -->Line_6 $$ if (typeVariable.getName().equals(typeParameters[idx].getName())) [ CD ]
Line_6 $$ if (typeVariable.getName().equals(typeParameters[idx].getName())) -->Line_7 $$ return resolveType(context.getActualTypeArguments()[idx], context)[ CD ]
