Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_4 $$ Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>()[ CD ]
Line_19 $$ EventMapping eventMapping = AnnotationUtils.findAnnotation(method, EventMapping.class)-->Line_29 $$ if (eventMapping != null) [ FD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_36 $$ throw new IllegalStateException("Mode mappings conflict between method and type level: " + Arrays.asList(modeKeys) + " versus " + Arrays.asList(typeMapping.value()))[ FD ]
Line_17 $$ RenderMapping renderMapping = AnnotationUtils.findAnnotation(method, RenderMapping.class)-->Line_24 $$ if (renderMapping != null) [ FD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_12 $$ String[] params = new String[0][ CD ]
Line_21 $$ if (actionMapping != null) -->Line_22 $$ params = StringUtils.mergeStringArrays(params, actionMapping.params())[ CD ]
Line_23 $$ predicate = new ActionMappingPredicate(actionMapping.name(), params)-->Line_41 $$ predicate = new MethodLevelMappingPredicate(params)[ FD ]
Line_24 $$ if (renderMapping != null) -->Line_27 $$ if (resourceMapping != null) [ CD ]
Line_4 $$ Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>()-->Line_5 $$ handlerTypes.add(handlerType)[ FD ]
Line_21 $$ if (actionMapping != null) -->Line_23 $$ predicate = new ActionMappingPredicate(actionMapping.name(), params)[ CD ]
Line_23 $$ predicate = new ActionMappingPredicate(actionMapping.name(), params)-->Line_40 $$ if (predicate == null) [ FD ]
Line_3 $$ final Set<Boolean> handlersRegistered = new HashSet<Boolean>(1)-->Line_55 $$ handlersRegistered.add(Boolean.TRUE)[ FD ]
Line_32 $$ if (requestMapping != null) -->Line_33 $$ modeKeys = requestMapping.value()[ CD ]
Line_10 $$ PortletRequestMappingPredicate predicate = null-->Line_40 $$ if (predicate == null) [ FD ]
Line_41 $$ predicate = new MethodLevelMappingPredicate(params)-->Line_54 $$ registerHandler(new PortletMode(modeKey), beanName, predicate)[ FD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_11 $$ String[] modeKeys = new String[0][ CD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_13 $$ if (typeMapping != null) [ FD ]
Line_10 $$ PortletRequestMappingPredicate predicate = null-->Line_41 $$ predicate = new MethodLevelMappingPredicate(params)[ FD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_47 $$ modeKeys = typeMapping.value()[ FD ]
Line_26 $$ predicate = new RenderMappingPredicate(renderMapping.windowState(), params)-->Line_30 $$ predicate = new EventMappingPredicate(eventMapping.value())[ FD ]
Line_45 $$ if (modeKeys.length == 0) -->Line_46 $$ if (typeMapping != null) [ CD ]
Line_18 $$ ResourceMapping resourceMapping = AnnotationUtils.findAnnotation(method, ResourceMapping.class)-->Line_27 $$ if (resourceMapping != null) [ FD ]
Line_44 $$ if (predicate != null) -->Line_45 $$ if (modeKeys.length == 0) [ CD ]
Line_12 $$ String[] params = new String[0]-->Line_22 $$ params = StringUtils.mergeStringArrays(params, actionMapping.params())[ FD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_54 $$ registerHandler(new PortletMode(modeKey), beanName, predicate)[ FD ]
Line_25 $$ params = StringUtils.mergeStringArrays(params, renderMapping.params())-->Line_39 $$ params = StringUtils.mergeStringArrays(params, requestMapping.params())[ FD ]
Line_30 $$ predicate = new EventMappingPredicate(eventMapping.value())-->Line_40 $$ if (predicate == null) [ FD ]
Line_26 $$ predicate = new RenderMappingPredicate(renderMapping.windowState(), params)-->Line_41 $$ predicate = new MethodLevelMappingPredicate(params)[ FD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_14 $$ params = StringUtils.mergeStringArrays(typeMapping.params(), params)[ FD ]
Line_32 $$ if (requestMapping != null) -->Line_39 $$ params = StringUtils.mergeStringArrays(params, requestMapping.params())[ CD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_20 $$ RequestMapping requestMapping = AnnotationUtils.findAnnotation(method, RequestMapping.class)[ FD ]
Line_26 $$ predicate = new RenderMappingPredicate(renderMapping.windowState(), params)-->Line_44 $$ if (predicate != null) [ FD ]
Line_12 $$ String[] params = new String[0]-->Line_39 $$ params = StringUtils.mergeStringArrays(params, requestMapping.params())[ FD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_16 $$ ActionMapping actionMapping = AnnotationUtils.findAnnotation(method, ActionMapping.class)[ CD ]
Line_28 $$ predicate = new ResourceMappingPredicate(resourceMapping.value())-->Line_30 $$ predicate = new EventMappingPredicate(eventMapping.value())[ FD ]
Line_10 $$ PortletRequestMappingPredicate predicate = null-->Line_54 $$ registerHandler(new PortletMode(modeKey), beanName, predicate)[ FD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_18 $$ ResourceMapping resourceMapping = AnnotationUtils.findAnnotation(method, ResourceMapping.class)[ FD ]
Line_7 $$ for (Class<?> currentHandlerType : handlerTypes) -->Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() [ FD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_46 $$ if (typeMapping != null) [ FD ]
Line_11 $$ String[] modeKeys = new String[0]-->Line_35 $$ if (!PortletAnnotationMappingUtils.validateModeMapping(modeKeys, typeMapping.value())) [ FD ]
Line_26 $$ predicate = new RenderMappingPredicate(renderMapping.windowState(), params)-->Line_40 $$ if (predicate == null) [ FD ]
Line_10 $$ PortletRequestMappingPredicate predicate = null-->Line_28 $$ predicate = new ResourceMappingPredicate(resourceMapping.value())[ FD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_35 $$ if (!PortletAnnotationMappingUtils.validateModeMapping(modeKeys, typeMapping.value())) [ FD ]
Line_33 $$ modeKeys = requestMapping.value()-->Line_47 $$ modeKeys = typeMapping.value()[ FD ]
Line_40 $$ if (predicate == null) -->Line_41 $$ predicate = new MethodLevelMappingPredicate(params)[ CD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_16 $$ ActionMapping actionMapping = AnnotationUtils.findAnnotation(method, ActionMapping.class)[ FD ]
Line_32 $$ if (requestMapping != null) -->Line_40 $$ if (predicate == null) [ CD ]
Line_14 $$ params = StringUtils.mergeStringArrays(typeMapping.params(), params)-->Line_22 $$ params = StringUtils.mergeStringArrays(params, actionMapping.params())[ FD ]
Line_26 $$ predicate = new RenderMappingPredicate(renderMapping.windowState(), params)-->Line_28 $$ predicate = new ResourceMappingPredicate(resourceMapping.value())[ FD ]
Line_26 $$ predicate = new RenderMappingPredicate(renderMapping.windowState(), params)-->Line_54 $$ registerHandler(new PortletMode(modeKey), beanName, predicate)[ FD ]
Line_10 $$ PortletRequestMappingPredicate predicate = null-->Line_23 $$ predicate = new ActionMappingPredicate(actionMapping.name(), params)[ FD ]
Line_11 $$ String[] modeKeys = new String[0]-->Line_36 $$ throw new IllegalStateException("Mode mappings conflict between method and type level: " + Arrays.asList(modeKeys) + " versus " + Arrays.asList(typeMapping.value()))[ FD ]
Line_33 $$ modeKeys = requestMapping.value()-->Line_35 $$ if (!PortletAnnotationMappingUtils.validateModeMapping(modeKeys, typeMapping.value())) [ FD ]
Line_3 $$ final Set<Boolean> handlersRegistered = new HashSet<Boolean>(1)-->Line_61 $$ return !handlersRegistered.isEmpty()[ FD ]
Line_12 $$ String[] params = new String[0]-->Line_25 $$ params = StringUtils.mergeStringArrays(params, renderMapping.params())[ FD ]
Line_23 $$ predicate = new ActionMappingPredicate(actionMapping.name(), params)-->Line_44 $$ if (predicate != null) [ FD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_10 $$ PortletRequestMappingPredicate predicate = null[ CD ]
Line_28 $$ predicate = new ResourceMappingPredicate(resourceMapping.value())-->Line_44 $$ if (predicate != null) [ FD ]
Line_10 $$ PortletRequestMappingPredicate predicate = null-->Line_44 $$ if (predicate != null) [ FD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_44 $$ if (predicate != null) [ CD ]
Line_23 $$ predicate = new ActionMappingPredicate(actionMapping.name(), params)-->Line_30 $$ predicate = new EventMappingPredicate(eventMapping.value())[ FD ]
Line_23 $$ predicate = new ActionMappingPredicate(actionMapping.name(), params)-->Line_54 $$ registerHandler(new PortletMode(modeKey), beanName, predicate)[ FD ]
Line_27 $$ if (resourceMapping != null) -->Line_29 $$ if (eventMapping != null) [ CD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_17 $$ RenderMapping renderMapping = AnnotationUtils.findAnnotation(method, RenderMapping.class)[ FD ]
Line_24 $$ if (renderMapping != null) -->Line_26 $$ predicate = new RenderMappingPredicate(renderMapping.windowState(), params)[ CD ]
Line_10 $$ PortletRequestMappingPredicate predicate = null-->Line_30 $$ predicate = new EventMappingPredicate(eventMapping.value())[ FD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_61 $$ return !handlersRegistered.isEmpty()[ CD ]
Line_16 $$ ActionMapping actionMapping = AnnotationUtils.findAnnotation(method, ActionMapping.class)-->Line_23 $$ predicate = new ActionMappingPredicate(actionMapping.name(), params)[ FD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_3 $$ final Set<Boolean> handlersRegistered = new HashSet<Boolean>(1)[ CD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_19 $$ EventMapping eventMapping = AnnotationUtils.findAnnotation(method, EventMapping.class)[ CD ]
Line_34 $$ if (typeMapping != null) -->Line_35 $$ if (!PortletAnnotationMappingUtils.validateModeMapping(modeKeys, typeMapping.value())) [ CD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_21 $$ if (actionMapping != null) [ CD ]
Line_11 $$ String[] modeKeys = new String[0]-->Line_33 $$ modeKeys = requestMapping.value()[ FD ]
Line_28 $$ predicate = new ResourceMappingPredicate(resourceMapping.value())-->Line_40 $$ if (predicate == null) [ FD ]
Line_11 $$ String[] modeKeys = new String[0]-->Line_47 $$ modeKeys = typeMapping.value()[ FD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_19 $$ EventMapping eventMapping = AnnotationUtils.findAnnotation(method, EventMapping.class)[ FD ]
Line_14 $$ params = StringUtils.mergeStringArrays(typeMapping.params(), params)-->Line_39 $$ params = StringUtils.mergeStringArrays(params, requestMapping.params())[ FD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_17 $$ RenderMapping renderMapping = AnnotationUtils.findAnnotation(method, RenderMapping.class)[ CD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_18 $$ ResourceMapping resourceMapping = AnnotationUtils.findAnnotation(method, ResourceMapping.class)[ CD ]
Line_21 $$ if (actionMapping != null) -->Line_24 $$ if (renderMapping != null) [ CD ]
Line_27 $$ if (resourceMapping != null) -->Line_28 $$ predicate = new ResourceMappingPredicate(resourceMapping.value())[ CD ]
Line_19 $$ EventMapping eventMapping = AnnotationUtils.findAnnotation(method, EventMapping.class)-->Line_30 $$ predicate = new EventMappingPredicate(eventMapping.value())[ FD ]
Line_23 $$ predicate = new ActionMappingPredicate(actionMapping.name(), params)-->Line_28 $$ predicate = new ResourceMappingPredicate(resourceMapping.value())[ FD ]
Line_22 $$ params = StringUtils.mergeStringArrays(params, actionMapping.params())-->Line_39 $$ params = StringUtils.mergeStringArrays(params, requestMapping.params())[ FD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_34 $$ if (typeMapping != null) [ FD ]
Line_12 $$ String[] params = new String[0]-->Line_14 $$ params = StringUtils.mergeStringArrays(typeMapping.params(), params)[ FD ]
Line_10 $$ PortletRequestMappingPredicate predicate = null-->Line_26 $$ predicate = new RenderMappingPredicate(renderMapping.windowState(), params)[ FD ]
Line_32 $$ if (requestMapping != null) -->Line_34 $$ if (typeMapping != null) [ CD ]
Line_30 $$ predicate = new EventMappingPredicate(eventMapping.value())-->Line_44 $$ if (predicate != null) [ FD ]
Line_22 $$ params = StringUtils.mergeStringArrays(params, actionMapping.params())-->Line_25 $$ params = StringUtils.mergeStringArrays(params, renderMapping.params())[ FD ]
Line_16 $$ ActionMapping actionMapping = AnnotationUtils.findAnnotation(method, ActionMapping.class)-->Line_21 $$ if (actionMapping != null) [ FD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_20 $$ RequestMapping requestMapping = AnnotationUtils.findAnnotation(method, RequestMapping.class)[ CD ]
Line_28 $$ predicate = new ResourceMappingPredicate(resourceMapping.value())-->Line_41 $$ predicate = new MethodLevelMappingPredicate(params)[ FD ]
Line_30 $$ predicate = new EventMappingPredicate(eventMapping.value())-->Line_54 $$ registerHandler(new PortletMode(modeKey), beanName, predicate)[ FD ]
Line_4 $$ Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>()-->Line_6 $$ handlerTypes.addAll(Arrays.asList(handlerType.getInterfaces()))[ FD ]
Line_45 $$ if (modeKeys.length == 0) -->Line_49 $$ if (modeKeys.length == 0) [ CD ]
Line_17 $$ RenderMapping renderMapping = AnnotationUtils.findAnnotation(method, RenderMapping.class)-->Line_26 $$ predicate = new RenderMappingPredicate(renderMapping.windowState(), params)[ FD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_32 $$ if (requestMapping != null) [ CD ]
Line_41 $$ predicate = new MethodLevelMappingPredicate(params)-->Line_44 $$ if (predicate != null) [ FD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_5 $$ handlerTypes.add(handlerType)[ CD ]
Line_20 $$ RequestMapping requestMapping = AnnotationUtils.findAnnotation(method, RequestMapping.class)-->Line_33 $$ modeKeys = requestMapping.value()[ FD ]
Line_17 $$ RenderMapping renderMapping = AnnotationUtils.findAnnotation(method, RenderMapping.class)-->Line_25 $$ params = StringUtils.mergeStringArrays(params, renderMapping.params())[ FD ]
Line_8 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_13 $$ if (typeMapping != null) [ CD ]
Line_20 $$ RequestMapping requestMapping = AnnotationUtils.findAnnotation(method, RequestMapping.class)-->Line_32 $$ if (requestMapping != null) [ FD ]
Line_46 $$ if (typeMapping != null) -->Line_47 $$ modeKeys = typeMapping.value()[ CD ]
Line_14 $$ params = StringUtils.mergeStringArrays(typeMapping.params(), params)-->Line_25 $$ params = StringUtils.mergeStringArrays(params, renderMapping.params())[ FD ]
Line_23 $$ predicate = new ActionMappingPredicate(actionMapping.name(), params)-->Line_26 $$ predicate = new RenderMappingPredicate(renderMapping.windowState(), params)[ FD ]
Line_33 $$ modeKeys = requestMapping.value()-->Line_36 $$ throw new IllegalStateException("Mode mappings conflict between method and type level: " + Arrays.asList(modeKeys) + " versus " + Arrays.asList(typeMapping.value()))[ FD ]
Line_30 $$ predicate = new EventMappingPredicate(eventMapping.value())-->Line_41 $$ predicate = new MethodLevelMappingPredicate(params)[ FD ]
Line_20 $$ RequestMapping requestMapping = AnnotationUtils.findAnnotation(method, RequestMapping.class)-->Line_39 $$ params = StringUtils.mergeStringArrays(params, requestMapping.params())[ FD ]
Line_29 $$ if (eventMapping != null) -->Line_30 $$ predicate = new EventMappingPredicate(eventMapping.value())[ CD ]
Line_28 $$ predicate = new ResourceMappingPredicate(resourceMapping.value())-->Line_54 $$ registerHandler(new PortletMode(modeKey), beanName, predicate)[ FD ]
Line_16 $$ ActionMapping actionMapping = AnnotationUtils.findAnnotation(method, ActionMapping.class)-->Line_22 $$ params = StringUtils.mergeStringArrays(params, actionMapping.params())[ FD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_6 $$ handlerTypes.addAll(Arrays.asList(handlerType.getInterfaces()))[ CD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_5 $$ handlerTypes.add(handlerType)[ FD ]
Line_2 $$ protected boolean detectHandlerMethods(Class<?> handlerType, final String beanName, final RequestMapping typeMapping) -->Line_6 $$ handlerTypes.addAll(Arrays.asList(handlerType.getInterfaces()))[ FD ]
Line_18 $$ ResourceMapping resourceMapping = AnnotationUtils.findAnnotation(method, ResourceMapping.class)-->Line_28 $$ predicate = new ResourceMappingPredicate(resourceMapping.value())[ FD ]
Line_24 $$ if (renderMapping != null) -->Line_25 $$ params = StringUtils.mergeStringArrays(params, renderMapping.params())[ CD ]
Line_13 $$ if (typeMapping != null) -->Line_14 $$ params = StringUtils.mergeStringArrays(typeMapping.params(), params)[ CD ]
