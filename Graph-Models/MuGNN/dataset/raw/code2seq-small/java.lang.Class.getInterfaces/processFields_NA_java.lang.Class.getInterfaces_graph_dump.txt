Line_2 $$ private static Field processFields(@NotNull Class clazz, @NotNull Condition<Field> checker) -->Line_3 $$ for (Field field : clazz.getDeclaredFields()) [ FD ]
Line_2 $$ private static Field processFields(@NotNull Class clazz, @NotNull Condition<Field> checker) -->Line_15 $$ final Class[] interfaces = clazz.getInterfaces()[ CD ]
Line_2 $$ private static Field processFields(@NotNull Class clazz, @NotNull Condition<Field> checker) -->Line_17 $$ Field result = processFields(each, checker)[ FD ]
Line_3 $$ for (Field field : clazz.getDeclaredFields()) -->Line_5 $$ field.setAccessible(true)[ FD ]
Line_4 $$ if (checker.value(field)) -->Line_5 $$ field.setAccessible(true)[ CD ]
Line_12 $$ if (result != null)-->Line_13 $$ return result[ CD ]
Line_2 $$ private static Field processFields(@NotNull Class clazz, @NotNull Condition<Field> checker) -->Line_4 $$ if (checker.value(field)) [ FD ]
Line_9 $$ final Class superClass = clazz.getSuperclass()-->Line_10 $$ if (superClass != null) [ FD ]
Line_11 $$ Field result = processFields(superClass, checker)-->Line_12 $$ if (result != null)[ FD ]
Line_2 $$ private static Field processFields(@NotNull Class clazz, @NotNull Condition<Field> checker) -->Line_10 $$ if (superClass != null) [ CD ]
Line_2 $$ private static Field processFields(@NotNull Class clazz, @NotNull Condition<Field> checker) -->Line_9 $$ final Class superClass = clazz.getSuperclass()[ CD ]
Line_10 $$ if (superClass != null) -->Line_11 $$ Field result = processFields(superClass, checker)[ CD ]
Line_10 $$ if (superClass != null) -->Line_12 $$ if (result != null)[ CD ]
Line_3 $$ for (Field field : clazz.getDeclaredFields()) -->Line_4 $$ if (checker.value(field)) [ FD ]
Line_9 $$ final Class superClass = clazz.getSuperclass()-->Line_11 $$ Field result = processFields(superClass, checker)[ FD ]
Line_16 $$ for (Class each : interfaces) -->Line_17 $$ Field result = processFields(each, checker)[ FD ]
Line_11 $$ Field result = processFields(superClass, checker)-->Line_18 $$ if (result != null)[ FD ]
Line_4 $$ if (checker.value(field)) -->Line_6 $$ return field[ CD ]
Line_2 $$ private static Field processFields(@NotNull Class clazz, @NotNull Condition<Field> checker) -->Line_11 $$ Field result = processFields(superClass, checker)[ FD ]
Line_2 $$ private static Field processFields(@NotNull Class clazz, @NotNull Condition<Field> checker) -->Line_9 $$ final Class superClass = clazz.getSuperclass()[ FD ]
Line_18 $$ if (result != null)-->Line_19 $$ return result[ CD ]
Line_2 $$ private static Field processFields(@NotNull Class clazz, @NotNull Condition<Field> checker) -->Line_21 $$ return null[ CD ]
Line_2 $$ private static Field processFields(@NotNull Class clazz, @NotNull Condition<Field> checker) -->Line_15 $$ final Class[] interfaces = clazz.getInterfaces()[ FD ]
