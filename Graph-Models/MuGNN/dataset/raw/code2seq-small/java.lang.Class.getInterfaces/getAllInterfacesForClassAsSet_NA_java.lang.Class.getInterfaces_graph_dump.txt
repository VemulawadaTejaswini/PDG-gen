Line_2 $$ public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) -->Line_8 $$ while (clazz != null) [ FD ]
Line_2 $$ public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) -->Line_9 $$ Class<?>[] ifcs = clazz.getInterfaces()[ FD ]
Line_2 $$ public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) -->Line_4 $$ if (clazz.isInterface() && isVisible(clazz, classLoader)) [ CD ]
Line_4 $$ if (clazz.isInterface() && isVisible(clazz, classLoader)) -->Line_5 $$ return Collections.<Class<?>>singleton(clazz)[ CD ]
Line_10 $$ for (Class<?> ifc : ifcs) -->Line_11 $$ interfaces.addAll(getAllInterfacesForClassAsSet(ifc, classLoader))[ FD ]
Line_8 $$ while (clazz != null) -->Line_13 $$ clazz = clazz.getSuperclass()[ CD ]
Line_2 $$ public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) -->Line_13 $$ clazz = clazz.getSuperclass()[ FD ]
Line_7 $$ Set<Class<?>> interfaces = new LinkedHashSet<Class<?>>()-->Line_11 $$ interfaces.addAll(getAllInterfacesForClassAsSet(ifc, classLoader))[ FD ]
Line_2 $$ public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) -->Line_7 $$ Set<Class<?>> interfaces = new LinkedHashSet<Class<?>>()[ CD ]
Line_2 $$ public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) -->Line_3 $$ Assert.notNull(clazz, "Class must not be null")[ CD ]
Line_13 $$ clazz = clazz.getSuperclass()-->Line_8 $$ while (clazz != null) [ FD ]
Line_2 $$ public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) -->Line_3 $$ Assert.notNull(clazz, "Class must not be null")[ FD ]
Line_2 $$ public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) -->Line_8 $$ while (clazz != null) [ CD ]
Line_2 $$ public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) -->Line_5 $$ return Collections.<Class<?>>singleton(clazz)[ FD ]
Line_8 $$ while (clazz != null) -->Line_9 $$ Class<?>[] ifcs = clazz.getInterfaces()[ CD ]
Line_13 $$ clazz = clazz.getSuperclass()-->Line_9 $$ Class<?>[] ifcs = clazz.getInterfaces()[ FD ]
Line_2 $$ public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) -->Line_11 $$ interfaces.addAll(getAllInterfacesForClassAsSet(ifc, classLoader))[ FD ]
Line_2 $$ public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) -->Line_15 $$ return interfaces[ CD ]
Line_2 $$ public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, ClassLoader classLoader) -->Line_4 $$ if (clazz.isInterface() && isVisible(clazz, classLoader)) [ FD ]
