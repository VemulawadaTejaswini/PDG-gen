Line_3 $$ Class<?> sourceClass = invocation.getDelegate().getClass()-->Line_11 $$ queue.add(sourceClass)[ FD ]
Line_4 $$ Method match-->Line_25 $$ match.setAccessible(true)[ FD ]
Line_2 $$ private Method locateMethod(MethodInvocation invocation) -->Line_6 $$ match = sourceClass.getMethod(invocation.getName(), invocation.getParameterTypes())[ FD ]
Line_2 $$ private Method locateMethod(MethodInvocation invocation) -->Line_10 $$ LinkedList<Class<?>> queue = new LinkedList<Class<?>>()[ CD ]
Line_10 $$ LinkedList<Class<?>> queue = new LinkedList<Class<?>>()-->Line_19 $$ queue.addFirst(interfaceType)[ FD ]
Line_10 $$ LinkedList<Class<?>> queue = new LinkedList<Class<?>>()-->Line_11 $$ queue.add(sourceClass)[ FD ]
Line_15 $$ match = c.getMethod(invocation.getName(), invocation.getParameterTypes())-->Line_25 $$ match.setAccessible(true)[ FD ]
Line_10 $$ LinkedList<Class<?>> queue = new LinkedList<Class<?>>()-->Line_13 $$ Class<?> c = queue.removeFirst()[ FD ]
Line_13 $$ Class<?> c = queue.removeFirst()-->Line_22 $$ queue.addFirst(c.getSuperclass())[ FD ]
Line_2 $$ private Method locateMethod(MethodInvocation invocation) -->Line_15 $$ match = c.getMethod(invocation.getName(), invocation.getParameterTypes())[ FD ]
Line_2 $$ private Method locateMethod(MethodInvocation invocation) -->Line_11 $$ queue.add(sourceClass)[ CD ]
Line_2 $$ private Method locateMethod(MethodInvocation invocation) -->Line_26 $$ return match[ CD ]
Line_18 $$ for (Class<?> interfaceType : c.getInterfaces()) -->Line_19 $$ queue.addFirst(interfaceType)[ FD ]
Line_4 $$ Method match-->Line_15 $$ match = c.getMethod(invocation.getName(), invocation.getParameterTypes())[ FD ]
Line_2 $$ private Method locateMethod(MethodInvocation invocation) -->Line_12 $$ while (!queue.isEmpty()) [ CD ]
Line_2 $$ private Method locateMethod(MethodInvocation invocation) -->Line_3 $$ Class<?> sourceClass = invocation.getDelegate().getClass()[ FD ]
Line_6 $$ match = sourceClass.getMethod(invocation.getName(), invocation.getParameterTypes())-->Line_25 $$ match.setAccessible(true)[ FD ]
Line_12 $$ while (!queue.isEmpty()) -->Line_13 $$ Class<?> c = queue.removeFirst()[ CD ]
Line_4 $$ Method match-->Line_6 $$ match = sourceClass.getMethod(invocation.getName(), invocation.getParameterTypes())[ FD ]
Line_13 $$ Class<?> c = queue.removeFirst()-->Line_15 $$ match = c.getMethod(invocation.getName(), invocation.getParameterTypes())[ FD ]
Line_3 $$ Class<?> sourceClass = invocation.getDelegate().getClass()-->Line_6 $$ match = sourceClass.getMethod(invocation.getName(), invocation.getParameterTypes())[ FD ]
Line_6 $$ match = sourceClass.getMethod(invocation.getName(), invocation.getParameterTypes())-->Line_15 $$ match = c.getMethod(invocation.getName(), invocation.getParameterTypes())[ FD ]
Line_12 $$ while (!queue.isEmpty()) -->Line_21 $$ if (c.getSuperclass() != null) [ CD ]
Line_10 $$ LinkedList<Class<?>> queue = new LinkedList<Class<?>>()-->Line_22 $$ queue.addFirst(c.getSuperclass())[ FD ]
Line_10 $$ LinkedList<Class<?>> queue = new LinkedList<Class<?>>()-->Line_12 $$ while (!queue.isEmpty()) [ FD ]
Line_13 $$ Class<?> c = queue.removeFirst()-->Line_18 $$ for (Class<?> interfaceType : c.getInterfaces()) [ FD ]
Line_2 $$ private Method locateMethod(MethodInvocation invocation) -->Line_4 $$ Method match[ CD ]
Line_13 $$ Class<?> c = queue.removeFirst()-->Line_21 $$ if (c.getSuperclass() != null) [ FD ]
Line_2 $$ private Method locateMethod(MethodInvocation invocation) -->Line_3 $$ Class<?> sourceClass = invocation.getDelegate().getClass()[ CD ]
Line_2 $$ private Method locateMethod(MethodInvocation invocation) -->Line_25 $$ match.setAccessible(true)[ CD ]
Line_21 $$ if (c.getSuperclass() != null) -->Line_22 $$ queue.addFirst(c.getSuperclass())[ CD ]
