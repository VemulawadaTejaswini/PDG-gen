Line_2 $$ public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) -->Line_10 $$ handlerTypes.addAll(Arrays.asList(targetType.getInterfaces()))[ CD ]
Line_2 $$ public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) -->Line_26 $$ return methodMap[ CD ]
Line_2 $$ public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) -->Line_7 $$ handlerTypes.add(targetType)[ FD ]
Line_12 $$ final Class<?> targetClass = (specificHandlerType != null ? specificHandlerType : currentHandlerType)-->Line_15 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)[ FD ]
Line_11 $$ for (Class<?> currentHandlerType : handlerTypes) -->Line_13 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() [ FD ]
Line_2 $$ public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) -->Line_10 $$ handlerTypes.addAll(Arrays.asList(targetType.getInterfaces()))[ FD ]
Line_16 $$ T result = metadataLookup.inspect(specificMethod)-->Line_17 $$ if (result != null) [ FD ]
Line_15 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_20 $$ methodMap.put(specificMethod, result)[ FD ]
Line_2 $$ public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) -->Line_16 $$ T result = metadataLookup.inspect(specificMethod)[ FD ]
Line_17 $$ if (result != null) -->Line_19 $$ if (bridgedMethod == specificMethod || metadataLookup.inspect(bridgedMethod) == null) [ CD ]
Line_15 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_18 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)[ FD ]
Line_3 $$ final Map<Method, T> methodMap = new LinkedHashMap<Method, T>()-->Line_20 $$ methodMap.put(specificMethod, result)[ FD ]
Line_2 $$ public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) -->Line_8 $$ specificHandlerType = targetType[ FD ]
Line_15 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_16 $$ T result = metadataLookup.inspect(specificMethod)[ FD ]
Line_17 $$ if (result != null) -->Line_18 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)[ CD ]
Line_2 $$ public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) -->Line_5 $$ Class<?> specificHandlerType = null[ CD ]
Line_6 $$ if (!Proxy.isProxyClass(targetType)) -->Line_7 $$ handlerTypes.add(targetType)[ CD ]
Line_2 $$ public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) -->Line_6 $$ if (!Proxy.isProxyClass(targetType)) [ FD ]
Line_13 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_17 $$ if (result != null) [ CD ]
Line_19 $$ if (bridgedMethod == specificMethod || metadataLookup.inspect(bridgedMethod) == null) -->Line_20 $$ methodMap.put(specificMethod, result)[ CD ]
Line_16 $$ T result = metadataLookup.inspect(specificMethod)-->Line_20 $$ methodMap.put(specificMethod, result)[ FD ]
Line_18 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)-->Line_19 $$ if (bridgedMethod == specificMethod || metadataLookup.inspect(bridgedMethod) == null) [ FD ]
Line_4 $$ Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>()-->Line_10 $$ handlerTypes.addAll(Arrays.asList(targetType.getInterfaces()))[ FD ]
Line_4 $$ Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>()-->Line_7 $$ handlerTypes.add(targetType)[ FD ]
Line_2 $$ public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) -->Line_3 $$ final Map<Method, T> methodMap = new LinkedHashMap<Method, T>()[ CD ]
Line_13 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_16 $$ T result = metadataLookup.inspect(specificMethod)[ CD ]
Line_13 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_15 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)[ CD ]
Line_2 $$ public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) -->Line_4 $$ Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>()[ CD ]
Line_5 $$ Class<?> specificHandlerType = null-->Line_8 $$ specificHandlerType = targetType[ FD ]
Line_2 $$ public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) -->Line_6 $$ if (!Proxy.isProxyClass(targetType)) [ CD ]
Line_13 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_15 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)[ FD ]
Line_2 $$ public static <T> Map<Method, T> selectMethods(Class<?> targetType, final MetadataLookup<T> metadataLookup) -->Line_19 $$ if (bridgedMethod == specificMethod || metadataLookup.inspect(bridgedMethod) == null) [ FD ]
Line_6 $$ if (!Proxy.isProxyClass(targetType)) -->Line_8 $$ specificHandlerType = targetType[ CD ]
