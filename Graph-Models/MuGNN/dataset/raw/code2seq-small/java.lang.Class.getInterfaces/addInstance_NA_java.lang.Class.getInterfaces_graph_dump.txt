Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_15 $$ addInstance(registry, target, state, clazz.getSuperclass(), bean)[ FD ]
Line_3 $$ if (clazz == null)-->Line_4 $$ return[ CD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_15 $$ addInstance(registry, target, state, clazz.getSuperclass(), bean)[ CD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_16 $$ Class<?>[] ifaces = clazz.getInterfaces()[ CD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_3 $$ if (clazz == null)[ FD ]
Line_6 $$ ServiceBuilder<Set<Object>> builder = target.addService(name, new InstancesService(clazz))-->Line_7 $$ InstancesService service = putIfAbsent(registry, name, builder)[ FD ]
Line_10 $$ TypeBeanStateKey key = new TypeBeanStateKey(clazz, state)-->Line_11 $$ if (beans.containsKey(key) == false)[ FD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_7 $$ InstancesService service = putIfAbsent(registry, name, builder)[ CD ]
Line_10 $$ TypeBeanStateKey key = new TypeBeanStateKey(clazz, state)-->Line_12 $$ beans.put(key, service.instances)[ FD ]
Line_5 $$ ServiceName name = BeanMetaDataConfig.toInstancesName(clazz, state)-->Line_6 $$ ServiceBuilder<Set<Object>> builder = target.addService(name, new InstancesService(clazz))[ FD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_9 $$ service.instances.add(bean)[ FD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_5 $$ ServiceName name = BeanMetaDataConfig.toInstancesName(clazz, state)[ FD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_17 $$ addInstance(registry, target, state, iface, bean)[ FD ]
Line_11 $$ if (beans.containsKey(key) == false)-->Line_12 $$ beans.put(key, service.instances)[ CD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_3 $$ if (clazz == null)[ CD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_6 $$ ServiceBuilder<Set<Object>> builder = target.addService(name, new InstancesService(clazz))[ CD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_16 $$ Class<?>[] ifaces = clazz.getInterfaces()[ FD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_13 $$ invokeCallbacks(incallbacks, state, clazz, bean)[ FD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_6 $$ ServiceBuilder<Set<Object>> builder = target.addService(name, new InstancesService(clazz))[ FD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_5 $$ ServiceName name = BeanMetaDataConfig.toInstancesName(clazz, state)[ CD ]
Line_2 $$ private static void addInstance(ServiceRegistry registry, ServiceTarget target, BeanState state, final Class<?> clazz, Object bean) throws StartException -->Line_7 $$ InstancesService service = putIfAbsent(registry, name, builder)[ FD ]
Line_5 $$ ServiceName name = BeanMetaDataConfig.toInstancesName(clazz, state)-->Line_7 $$ InstancesService service = putIfAbsent(registry, name, builder)[ FD ]
