Line_2 $$ public void init(final Class<?> handlerType) -->Line_28 $$ this.sessionAttributesFound = (sessionAttributes != null)[ CD ]
Line_14 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_17 $$ handlerMethods.add(specificMethod)[ FD ]
Line_20 $$ if (isModelAttributeMethod(specificMethod) && (bridgedMethod == specificMethod || !isModelAttributeMethod(bridgedMethod))) -->Line_21 $$ modelAttributeMethods.add(specificMethod)[ CD ]
Line_15 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)-->Line_18 $$ if (isInitBinderMethod(specificMethod) && (bridgedMethod == specificMethod || !isInitBinderMethod(bridgedMethod))) [ FD ]
Line_14 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_15 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)[ FD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_5 $$ if (!Proxy.isProxyClass(handlerType)) [ FD ]
Line_15 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)-->Line_20 $$ if (isModelAttributeMethod(specificMethod) && (bridgedMethod == specificMethod || !isModelAttributeMethod(bridgedMethod))) [ FD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_9 $$ handlerTypes.addAll(Arrays.asList(handlerType.getInterfaces()))[ FD ]
Line_11 $$ final Class<?> targetClass = (specificHandlerType != null ? specificHandlerType : currentHandlerType)-->Line_14 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)[ FD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_29 $$ if (this.sessionAttributesFound) [ CD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_27 $$ SessionAttributes sessionAttributes = AnnotationUtils.findAnnotation(handlerType, SessionAttributes.class)[ CD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_4 $$ Class<?> specificHandlerType = null[ CD ]
Line_14 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_16 $$ if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) [ FD ]
Line_14 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_20 $$ if (isModelAttributeMethod(specificMethod) && (bridgedMethod == specificMethod || !isModelAttributeMethod(bridgedMethod))) [ FD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_27 $$ SessionAttributes sessionAttributes = AnnotationUtils.findAnnotation(handlerType, SessionAttributes.class)[ FD ]
Line_29 $$ if (this.sessionAttributesFound) -->Line_31 $$ this.sessionAttributeTypes.addAll(Arrays.asList(sessionAttributes.types()))[ CD ]
Line_4 $$ Class<?> specificHandlerType = null-->Line_7 $$ specificHandlerType = handlerType[ FD ]
Line_12 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_16 $$ if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) [ CD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_5 $$ if (!Proxy.isProxyClass(handlerType)) [ CD ]
Line_3 $$ Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>()-->Line_6 $$ handlerTypes.add(handlerType)[ FD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_6 $$ handlerTypes.add(handlerType)[ FD ]
Line_14 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_18 $$ if (isInitBinderMethod(specificMethod) && (bridgedMethod == specificMethod || !isInitBinderMethod(bridgedMethod))) [ FD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_26 $$ this.typeLevelMapping = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)[ CD ]
Line_14 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_21 $$ modelAttributeMethods.add(specificMethod)[ FD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_7 $$ specificHandlerType = handlerType[ FD ]
Line_14 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_19 $$ initBinderMethods.add(specificMethod)[ FD ]
Line_16 $$ if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) -->Line_18 $$ if (isInitBinderMethod(specificMethod) && (bridgedMethod == specificMethod || !isInitBinderMethod(bridgedMethod))) [ CD ]
Line_12 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_14 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)[ CD ]
Line_18 $$ if (isInitBinderMethod(specificMethod) && (bridgedMethod == specificMethod || !isInitBinderMethod(bridgedMethod))) -->Line_20 $$ if (isModelAttributeMethod(specificMethod) && (bridgedMethod == specificMethod || !isModelAttributeMethod(bridgedMethod))) [ CD ]
Line_12 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_14 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)[ FD ]
Line_5 $$ if (!Proxy.isProxyClass(handlerType)) -->Line_7 $$ specificHandlerType = handlerType[ CD ]
Line_15 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)-->Line_16 $$ if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) [ FD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_26 $$ this.typeLevelMapping = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class)[ FD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_9 $$ handlerTypes.addAll(Arrays.asList(handlerType.getInterfaces()))[ CD ]
Line_18 $$ if (isInitBinderMethod(specificMethod) && (bridgedMethod == specificMethod || !isInitBinderMethod(bridgedMethod))) -->Line_19 $$ initBinderMethods.add(specificMethod)[ CD ]
Line_3 $$ Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>()-->Line_9 $$ handlerTypes.addAll(Arrays.asList(handlerType.getInterfaces()))[ FD ]
Line_16 $$ if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) -->Line_17 $$ handlerMethods.add(specificMethod)[ CD ]
Line_12 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_15 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)[ CD ]
Line_10 $$ for (Class<?> currentHandlerType : handlerTypes) -->Line_12 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() [ FD ]
Line_5 $$ if (!Proxy.isProxyClass(handlerType)) -->Line_6 $$ handlerTypes.add(handlerType)[ CD ]
Line_2 $$ public void init(final Class<?> handlerType) -->Line_3 $$ Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>()[ CD ]
Line_29 $$ if (this.sessionAttributesFound) -->Line_30 $$ this.sessionAttributeNames.addAll(Arrays.asList(sessionAttributes.names()))[ CD ]
