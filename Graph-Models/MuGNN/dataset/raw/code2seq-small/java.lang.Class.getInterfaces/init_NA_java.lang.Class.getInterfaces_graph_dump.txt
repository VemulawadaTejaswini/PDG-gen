Line_16 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_22 $$ if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) [ CD ]
Line_35 $$ if (this.sessionAttributesFound) -->Line_37 $$ this.sessionAttributeTypes.addAll(Arrays.asList(sessionAttributes.types()))[ CD ]
Line_7 $$ Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>()-->Line_10 $$ handlerTypes.add(handlerType)[ FD ]
Line_9 $$ if (!Proxy.isProxyClass(handlerType)) -->Line_10 $$ handlerTypes.add(handlerType)[ CD ]
Line_22 $$ if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) -->Line_24 $$ if (isInitBinderMethod(specificMethod) && (bridgedMethod == specificMethod || !isInitBinderMethod(bridgedMethod))) [ CD ]
Line_21 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)-->Line_22 $$ if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) [ FD ]
Line_21 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)-->Line_26 $$ if (isModelAttributeMethod(specificMethod) && (bridgedMethod == specificMethod || !isModelAttributeMethod(bridgedMethod))) [ FD ]
Line_26 $$ if (isModelAttributeMethod(specificMethod) && (bridgedMethod == specificMethod || !isModelAttributeMethod(bridgedMethod))) -->Line_27 $$ modelAttributeMethods.add(specificMethod)[ CD ]
Line_24 $$ if (isInitBinderMethod(specificMethod) && (bridgedMethod == specificMethod || !isInitBinderMethod(bridgedMethod))) -->Line_25 $$ initBinderMethods.add(specificMethod)[ CD ]
Line_20 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_21 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)[ FD ]
Line_14 $$ for (Class<?> currentHandlerType : handlerTypes) -->Line_16 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() [ FD ]
Line_20 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_27 $$ modelAttributeMethods.add(specificMethod)[ FD ]
Line_22 $$ if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) -->Line_23 $$ handlerMethods.add(specificMethod)[ CD ]
Line_9 $$ if (!Proxy.isProxyClass(handlerType)) -->Line_11 $$ specificHandlerType = handlerType[ CD ]
Line_16 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_20 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)[ FD ]
Line_16 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_20 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)[ CD ]
Line_35 $$ if (this.sessionAttributesFound) -->Line_36 $$ this.sessionAttributeNames.addAll(Arrays.asList(sessionAttributes.names()))[ CD ]
Line_15 $$ final Class<?> targetClass = (specificHandlerType != null ? specificHandlerType : currentHandlerType)-->Line_20 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)[ FD ]
Line_20 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_26 $$ if (isModelAttributeMethod(specificMethod) && (bridgedMethod == specificMethod || !isModelAttributeMethod(bridgedMethod))) [ FD ]
Line_7 $$ Set<Class<?>> handlerTypes = new LinkedHashSet<Class<?>>()-->Line_13 $$ handlerTypes.addAll(Arrays.asList(handlerType.getInterfaces()))[ FD ]
Line_20 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_24 $$ if (isInitBinderMethod(specificMethod) && (bridgedMethod == specificMethod || !isInitBinderMethod(bridgedMethod))) [ FD ]
Line_20 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_25 $$ initBinderMethods.add(specificMethod)[ FD ]
Line_8 $$ Class<?> specificHandlerType = null-->Line_11 $$ specificHandlerType = handlerType[ FD ]
Line_20 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_23 $$ handlerMethods.add(specificMethod)[ FD ]
Line_20 $$ Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass)-->Line_22 $$ if (isHandlerMethod(specificMethod) && (bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) [ FD ]
Line_16 $$ ReflectionUtils.doWithMethods(currentHandlerType, new ReflectionUtils.MethodCallback() -->Line_21 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)[ CD ]
Line_21 $$ Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)-->Line_24 $$ if (isInitBinderMethod(specificMethod) && (bridgedMethod == specificMethod || !isInitBinderMethod(bridgedMethod))) [ FD ]
Line_24 $$ if (isInitBinderMethod(specificMethod) && (bridgedMethod == specificMethod || !isInitBinderMethod(bridgedMethod))) -->Line_26 $$ if (isModelAttributeMethod(specificMethod) && (bridgedMethod == specificMethod || !isModelAttributeMethod(bridgedMethod))) [ CD ]
