Line_3 $$ T[] value = myBackingMap.get(aClass)-->Line_5 $$ if (value != null) [ FD ]
Line_4 $$ List<T> result = null-->Line_14 $$ result = addFromUpper(result, superclass)[ FD ]
Line_4 $$ List<T> result = null-->Line_10 $$ result = addFromUpper(result, aClass1)[ FD ]
Line_2 $$ private List<T> getFromBackingMap(Class aClass) -->Line_12 $$ final Class superclass = aClass.getSuperclass()[ FD ]
Line_2 $$ private List<T> getFromBackingMap(Class aClass) -->Line_12 $$ final Class superclass = aClass.getSuperclass()[ CD ]
Line_2 $$ private List<T> getFromBackingMap(Class aClass) -->Line_13 $$ if (superclass != null) [ CD ]
Line_4 $$ List<T> result = null-->Line_7 $$ result = new ArrayList<T>(Arrays.asList(value))[ FD ]
Line_9 $$ for (final Class aClass1 : aClass.getInterfaces()) -->Line_10 $$ result = addFromUpper(result, aClass1)[ FD ]
Line_3 $$ T[] value = myBackingMap.get(aClass)-->Line_7 $$ result = new ArrayList<T>(Arrays.asList(value))[ FD ]
Line_7 $$ result = new ArrayList<T>(Arrays.asList(value))-->Line_14 $$ result = addFromUpper(result, superclass)[ FD ]
Line_12 $$ final Class superclass = aClass.getSuperclass()-->Line_13 $$ if (superclass != null) [ FD ]
Line_2 $$ private List<T> getFromBackingMap(Class aClass) -->Line_4 $$ List<T> result = null[ CD ]
Line_5 $$ if (value != null) -->Line_7 $$ result = new ArrayList<T>(Arrays.asList(value))[ CD ]
Line_12 $$ final Class superclass = aClass.getSuperclass()-->Line_14 $$ result = addFromUpper(result, superclass)[ FD ]
Line_7 $$ result = new ArrayList<T>(Arrays.asList(value))-->Line_10 $$ result = addFromUpper(result, aClass1)[ FD ]
Line_13 $$ if (superclass != null) -->Line_14 $$ result = addFromUpper(result, superclass)[ CD ]
Line_2 $$ private List<T> getFromBackingMap(Class aClass) -->Line_3 $$ T[] value = myBackingMap.get(aClass)[ CD ]
Line_2 $$ private List<T> getFromBackingMap(Class aClass) -->Line_3 $$ T[] value = myBackingMap.get(aClass)[ FD ]
Line_2 $$ private List<T> getFromBackingMap(Class aClass) -->Line_9 $$ for (final Class aClass1 : aClass.getInterfaces()) [ FD ]
Line_2 $$ private List<T> getFromBackingMap(Class aClass) -->Line_16 $$ return result[ CD ]
Line_10 $$ result = addFromUpper(result, aClass1)-->Line_14 $$ result = addFromUpper(result, superclass)[ FD ]
Line_2 $$ private List<T> getFromBackingMap(Class aClass) -->Line_5 $$ if (value != null) [ CD ]
