Line_2 $$ public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException -->Line_3 $$ Class<?> beanClass = bean.getClass()[ FD ]
Line_2 $$ public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException -->Line_3 $$ Class<?> beanClass = bean.getClass()[ CD ]
Line_3 $$ Class<?> beanClass = bean.getClass()-->Line_9 $$ bean = ProxyUtil.newProxyInstance(ClassLoaderUtil.getContextClassLoader(), beanClass.getInterfaces(), invocationHandler)[ FD ]
Line_4 $$ for (ObjectValuePair<BeanMatcher, InvocationHandlerFactory> objectValuePair : _beanMatcherInvocationHandlerFactories) -->Line_7 $$ InvocationHandlerFactory invocationHandlerFactory = objectValuePair.getValue()[ FD ]
Line_5 $$ BeanMatcher beanMatcher = objectValuePair.getKey()-->Line_6 $$ if (beanMatcher.match(beanClass, beanName)) [ FD ]
Line_7 $$ InvocationHandlerFactory invocationHandlerFactory = objectValuePair.getValue()-->Line_8 $$ InvocationHandler invocationHandler = invocationHandlerFactory.createInvocationHandler(bean)[ FD ]
Line_6 $$ if (beanMatcher.match(beanClass, beanName)) -->Line_8 $$ InvocationHandler invocationHandler = invocationHandlerFactory.createInvocationHandler(bean)[ CD ]
Line_4 $$ for (ObjectValuePair<BeanMatcher, InvocationHandlerFactory> objectValuePair : _beanMatcherInvocationHandlerFactories) -->Line_5 $$ BeanMatcher beanMatcher = objectValuePair.getKey()[ FD ]
Line_8 $$ InvocationHandler invocationHandler = invocationHandlerFactory.createInvocationHandler(bean)-->Line_9 $$ bean = ProxyUtil.newProxyInstance(ClassLoaderUtil.getContextClassLoader(), beanClass.getInterfaces(), invocationHandler)[ FD ]
Line_6 $$ if (beanMatcher.match(beanClass, beanName)) -->Line_9 $$ bean = ProxyUtil.newProxyInstance(ClassLoaderUtil.getContextClassLoader(), beanClass.getInterfaces(), invocationHandler)[ CD ]
Line_2 $$ public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException -->Line_8 $$ InvocationHandler invocationHandler = invocationHandlerFactory.createInvocationHandler(bean)[ FD ]
Line_2 $$ public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException -->Line_12 $$ return bean[ CD ]
Line_2 $$ public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException -->Line_9 $$ bean = ProxyUtil.newProxyInstance(ClassLoaderUtil.getContextClassLoader(), beanClass.getInterfaces(), invocationHandler)[ FD ]
Line_3 $$ Class<?> beanClass = bean.getClass()-->Line_6 $$ if (beanMatcher.match(beanClass, beanName)) [ FD ]
Line_2 $$ public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException -->Line_6 $$ if (beanMatcher.match(beanClass, beanName)) [ FD ]
Line_6 $$ if (beanMatcher.match(beanClass, beanName)) -->Line_7 $$ InvocationHandlerFactory invocationHandlerFactory = objectValuePair.getValue()[ CD ]
