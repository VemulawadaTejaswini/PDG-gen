Line_4 $$ if (interfaces.length == 0) -->Line_5 $$ return true[ CD ]
Line_2 $$ private boolean exposesNoInterfaceView(Class<?> beanClass) -->Line_4 $$ if (interfaces.length == 0) [ CD ]
Line_3 $$ Class<?>[] interfaces = beanClass.getInterfaces()-->Line_7 $$ List<Class<?>> implementedInterfaces = new ArrayList<Class<?>>(Arrays.asList(interfaces))[ FD ]
Line_2 $$ private boolean exposesNoInterfaceView(Class<?> beanClass) -->Line_8 $$ List<Class<?>> filteredInterfaces = this.filterInterfaces(implementedInterfaces)[ CD ]
Line_2 $$ private boolean exposesNoInterfaceView(Class<?> beanClass) -->Line_3 $$ Class<?>[] interfaces = beanClass.getInterfaces()[ CD ]
Line_2 $$ private boolean exposesNoInterfaceView(Class<?> beanClass) -->Line_7 $$ List<Class<?>> implementedInterfaces = new ArrayList<Class<?>>(Arrays.asList(interfaces))[ CD ]
Line_7 $$ List<Class<?>> implementedInterfaces = new ArrayList<Class<?>>(Arrays.asList(interfaces))-->Line_8 $$ List<Class<?>> filteredInterfaces = this.filterInterfaces(implementedInterfaces)[ FD ]
Line_2 $$ private boolean exposesNoInterfaceView(Class<?> beanClass) -->Line_9 $$ return filteredInterfaces.isEmpty()[ CD ]
Line_2 $$ private boolean exposesNoInterfaceView(Class<?> beanClass) -->Line_3 $$ Class<?>[] interfaces = beanClass.getInterfaces()[ FD ]
Line_8 $$ List<Class<?>> filteredInterfaces = this.filterInterfaces(implementedInterfaces)-->Line_9 $$ return filteredInterfaces.isEmpty()[ FD ]
