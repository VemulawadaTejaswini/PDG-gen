Line_2 $$ private static void removeInstance(ServiceRegistry registry, BeanState state, final Class<?> clazz, Object bean) -->Line_6 $$ if (controller != null) [ CD ]
Line_2 $$ private static void removeInstance(ServiceRegistry registry, BeanState state, final Class<?> clazz, Object bean) -->Line_18 $$ Class<?>[] ifaces = clazz.getInterfaces()[ FD ]
Line_11 $$ if (service.instances.isEmpty()) -->Line_12 $$ beans.remove(new TypeBeanStateKey(clazz, state))[ CD ]
Line_2 $$ private static void removeInstance(ServiceRegistry registry, BeanState state, final Class<?> clazz, Object bean) -->Line_19 $$ removeInstance(registry, state, iface, bean)[ FD ]
Line_2 $$ private static void removeInstance(ServiceRegistry registry, BeanState state, final Class<?> clazz, Object bean) -->Line_5 $$ ServiceController controller = registry.getService(BeanMetaDataConfig.toInstancesName(clazz, state))[ FD ]
Line_2 $$ private static void removeInstance(ServiceRegistry registry, BeanState state, final Class<?> clazz, Object bean) -->Line_3 $$ if (clazz == null)[ CD ]
Line_2 $$ private static void removeInstance(ServiceRegistry registry, BeanState state, final Class<?> clazz, Object bean) -->Line_17 $$ removeInstance(registry, state, clazz.getSuperclass(), bean)[ CD ]
Line_2 $$ private static void removeInstance(ServiceRegistry registry, BeanState state, final Class<?> clazz, Object bean) -->Line_9 $$ service.instances.remove(bean)[ FD ]
Line_2 $$ private static void removeInstance(ServiceRegistry registry, BeanState state, final Class<?> clazz, Object bean) -->Line_17 $$ removeInstance(registry, state, clazz.getSuperclass(), bean)[ FD ]
Line_5 $$ ServiceController controller = registry.getService(BeanMetaDataConfig.toInstancesName(clazz, state))-->Line_6 $$ if (controller != null) [ FD ]
Line_3 $$ if (clazz == null)-->Line_4 $$ return[ CD ]
Line_2 $$ private static void removeInstance(ServiceRegistry registry, BeanState state, final Class<?> clazz, Object bean) -->Line_5 $$ ServiceController controller = registry.getService(BeanMetaDataConfig.toInstancesName(clazz, state))[ CD ]
Line_11 $$ if (service.instances.isEmpty()) -->Line_13 $$ controller.setMode(ServiceController.Mode.REMOVE)[ CD ]
Line_2 $$ private static void removeInstance(ServiceRegistry registry, BeanState state, final Class<?> clazz, Object bean) -->Line_18 $$ Class<?>[] ifaces = clazz.getInterfaces()[ CD ]
Line_5 $$ ServiceController controller = registry.getService(BeanMetaDataConfig.toInstancesName(clazz, state))-->Line_13 $$ controller.setMode(ServiceController.Mode.REMOVE)[ FD ]
Line_5 $$ ServiceController controller = registry.getService(BeanMetaDataConfig.toInstancesName(clazz, state))-->Line_7 $$ InstancesService service = (InstancesService) controller.getService()[ FD ]
Line_2 $$ private static void removeInstance(ServiceRegistry registry, BeanState state, final Class<?> clazz, Object bean) -->Line_3 $$ if (clazz == null)[ FD ]
Line_2 $$ private static void removeInstance(ServiceRegistry registry, BeanState state, final Class<?> clazz, Object bean) -->Line_10 $$ invokeCallbacks(uncallbacks, state, clazz, bean)[ FD ]
Line_6 $$ if (controller != null) -->Line_7 $$ InstancesService service = (InstancesService) controller.getService()[ CD ]
