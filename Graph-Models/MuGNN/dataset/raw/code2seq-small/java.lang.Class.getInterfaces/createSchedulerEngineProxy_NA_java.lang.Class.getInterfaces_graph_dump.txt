Line_3 $$ SchedulerEngineProxyBean schedulerEngineProxyBean = new SchedulerEngineProxyBean()-->Line_4 $$ schedulerEngineProxyBean.setDestinationName(DestinationNames.SCHEDULER_ENGINE)[ FD ]
Line_3 $$ SchedulerEngineProxyBean schedulerEngineProxyBean = new SchedulerEngineProxyBean()-->Line_6 $$ schedulerEngineProxyBean.setSynchronousMessageSenderMode(SynchronousMessageSender.Mode.DIRECT)[ FD ]
Line_3 $$ SchedulerEngineProxyBean schedulerEngineProxyBean = new SchedulerEngineProxyBean()-->Line_7 $$ schedulerEngineProxyBean.afterPropertiesSet()[ FD ]
Line_10 $$ Class<?> beanClass = schedulerEngineProxyBean.getClass()-->Line_11 $$ return (SchedulerEngine) ProxyUtil.newProxyInstance(beanClass.getClassLoader(), beanClass.getInterfaces(), invocationHandler)[ FD ]
Line_2 $$ protected SchedulerEngine createSchedulerEngineProxy() -->Line_8 $$ InvocationHandlerFactory invocationHandlerFactory = MessagingProxyInvocationHandler.getInvocationHandlerFactory()[ CD ]
Line_3 $$ SchedulerEngineProxyBean schedulerEngineProxyBean = new SchedulerEngineProxyBean()-->Line_10 $$ Class<?> beanClass = schedulerEngineProxyBean.getClass()[ FD ]
Line_2 $$ protected SchedulerEngine createSchedulerEngineProxy() -->Line_6 $$ schedulerEngineProxyBean.setSynchronousMessageSenderMode(SynchronousMessageSender.Mode.DIRECT)[ CD ]
Line_2 $$ protected SchedulerEngine createSchedulerEngineProxy() -->Line_7 $$ schedulerEngineProxyBean.afterPropertiesSet()[ CD ]
Line_8 $$ InvocationHandlerFactory invocationHandlerFactory = MessagingProxyInvocationHandler.getInvocationHandlerFactory()-->Line_9 $$ InvocationHandler invocationHandler = invocationHandlerFactory.createInvocationHandler(schedulerEngineProxyBean)[ FD ]
Line_3 $$ SchedulerEngineProxyBean schedulerEngineProxyBean = new SchedulerEngineProxyBean()-->Line_5 $$ schedulerEngineProxyBean.setSynchronousDestinationName(DestinationNames.SCHEDULER_ENGINE)[ FD ]
Line_2 $$ protected SchedulerEngine createSchedulerEngineProxy() -->Line_3 $$ SchedulerEngineProxyBean schedulerEngineProxyBean = new SchedulerEngineProxyBean()[ CD ]
Line_2 $$ protected SchedulerEngine createSchedulerEngineProxy() -->Line_9 $$ InvocationHandler invocationHandler = invocationHandlerFactory.createInvocationHandler(schedulerEngineProxyBean)[ CD ]
Line_3 $$ SchedulerEngineProxyBean schedulerEngineProxyBean = new SchedulerEngineProxyBean()-->Line_9 $$ InvocationHandler invocationHandler = invocationHandlerFactory.createInvocationHandler(schedulerEngineProxyBean)[ FD ]
Line_9 $$ InvocationHandler invocationHandler = invocationHandlerFactory.createInvocationHandler(schedulerEngineProxyBean)-->Line_11 $$ return (SchedulerEngine) ProxyUtil.newProxyInstance(beanClass.getClassLoader(), beanClass.getInterfaces(), invocationHandler)[ FD ]
Line_2 $$ protected SchedulerEngine createSchedulerEngineProxy() -->Line_5 $$ schedulerEngineProxyBean.setSynchronousDestinationName(DestinationNames.SCHEDULER_ENGINE)[ CD ]
Line_2 $$ protected SchedulerEngine createSchedulerEngineProxy() -->Line_4 $$ schedulerEngineProxyBean.setDestinationName(DestinationNames.SCHEDULER_ENGINE)[ CD ]
Line_2 $$ protected SchedulerEngine createSchedulerEngineProxy() -->Line_11 $$ return (SchedulerEngine) ProxyUtil.newProxyInstance(beanClass.getClassLoader(), beanClass.getInterfaces(), invocationHandler)[ CD ]
Line_2 $$ protected SchedulerEngine createSchedulerEngineProxy() -->Line_10 $$ Class<?> beanClass = schedulerEngineProxyBean.getClass()[ CD ]
