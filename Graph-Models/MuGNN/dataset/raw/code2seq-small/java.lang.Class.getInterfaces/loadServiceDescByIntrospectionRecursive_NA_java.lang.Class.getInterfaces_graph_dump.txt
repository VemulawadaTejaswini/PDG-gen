Line_18 $$ Class superClass = superClasses[i]-->Line_19 $$ if (!superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) [ FD ]
Line_18 $$ Class superClass = superClasses[i]-->Line_20 $$ loadServiceDescByIntrospectionRecursive(superClass)[ FD ]
Line_15 $$ if (implClass.isInterface()) -->Line_24 $$ Class superClass = implClass.getSuperclass()[ CD ]
Line_10 $$ for (int i = 0; i < methods.length; i++) -->Line_17 $$ for (int i = 0; i < superClasses.length; i++) [ FD ]
Line_18 $$ Class superClass = superClasses[i]-->Line_25 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) [ FD ]
Line_25 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) -->Line_26 $$ loadServiceDescByIntrospectionRecursive(superClass)[ CD ]
Line_15 $$ if (implClass.isInterface()) -->Line_17 $$ for (int i = 0; i < superClasses.length; i++) [ CD ]
Line_17 $$ for (int i = 0; i < superClasses.length; i++) -->Line_19 $$ if (!superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) [ CD ]
Line_24 $$ Class superClass = implClass.getSuperclass()-->Line_26 $$ loadServiceDescByIntrospectionRecursive(superClass)[ FD ]
Line_11 $$ if (Modifier.isPublic(methods[i].getModifiers()) && !isServiceLifeCycleMethod(implClass, methods[i])) -->Line_12 $$ getSyncedOperationsForName(implClass, methods[i].getName())[ CD ]
Line_10 $$ for (int i = 0; i < methods.length; i++) -->Line_11 $$ if (Modifier.isPublic(methods[i].getModifiers()) && !isServiceLifeCycleMethod(implClass, methods[i])) [ CD ]
Line_24 $$ Class superClass = implClass.getSuperclass()-->Line_25 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) [ FD ]
Line_17 $$ for (int i = 0; i < superClasses.length; i++) -->Line_18 $$ Class superClass = superClasses[i][ CD ]
Line_18 $$ Class superClass = superClasses[i]-->Line_26 $$ loadServiceDescByIntrospectionRecursive(superClass)[ FD ]
Line_15 $$ if (implClass.isInterface()) -->Line_16 $$ Class[] superClasses = implClass.getInterfaces()[ CD ]
Line_6 $$ if (Skeleton.class.equals(implClass)) -->Line_7 $$ return[ CD ]
Line_19 $$ if (!superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) -->Line_20 $$ loadServiceDescByIntrospectionRecursive(superClass)[ CD ]
Line_15 $$ if (implClass.isInterface()) -->Line_25 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) [ CD ]
