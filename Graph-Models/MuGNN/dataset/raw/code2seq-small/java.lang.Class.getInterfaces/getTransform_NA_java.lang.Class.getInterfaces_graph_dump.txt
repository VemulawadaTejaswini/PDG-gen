Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_5 $$ if (fromClass.equals(toClass)) [ CD ]
Line_22 $$ fromClass = fromClass.getSuperclass()-->Line_9 $$ fromStruct = definition.classes.get(fromClass)[ FD ]
Line_9 $$ fromStruct = definition.classes.get(fromClass)-->Line_15 $$ if (fromStruct != null) [ FD ]
Line_3 $$ Struct fromStruct = null-->Line_24 $$ if (fromStruct != null) [ FD ]
Line_4 $$ Struct toStruct = null-->Line_31 $$ toStruct = definition.classes.get(iface)[ FD ]
Line_26 $$ toStruct = definition.classes.get(toClass)-->Line_36 $$ if (toStruct != null) [ FD ]
Line_4 $$ Struct toStruct = null-->Line_27 $$ if (toStruct != null) [ FD ]
Line_31 $$ toStruct = definition.classes.get(iface)-->Line_42 $$ if (toStruct != null) [ FD ]
Line_9 $$ fromStruct = definition.classes.get(fromClass)-->Line_14 $$ fromStruct = definition.classes.get(iface)[ FD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_30 $$ for (final Class iface : toClass.getInterfaces()) [ FD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_5 $$ if (fromClass.equals(toClass)) [ FD ]
Line_26 $$ toStruct = definition.classes.get(toClass)-->Line_42 $$ if (toStruct != null) [ FD ]
Line_39 $$ toClass = toClass.getSuperclass()-->Line_25 $$ while (toClass != null) [ FD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_24 $$ if (fromStruct != null) [ CD ]
Line_42 $$ if (toStruct != null) -->Line_44 $$ final Type toType = definition.getType(toStruct.name)[ CD ]
Line_9 $$ fromStruct = definition.classes.get(fromClass)-->Line_19 $$ if (fromStruct != null) [ FD ]
Line_22 $$ fromClass = fromClass.getSuperclass()-->Line_13 $$ for (final Class iface : fromClass.getInterfaces()) [ FD ]
Line_45 $$ final Cast cast = new Cast(fromType, toType)-->Line_46 $$ return definition.transforms.get(cast)[ FD ]
Line_9 $$ fromStruct = definition.classes.get(fromClass)-->Line_24 $$ if (fromStruct != null) [ FD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_4 $$ Struct toStruct = null[ CD ]
Line_25 $$ while (toClass != null) -->Line_36 $$ if (toStruct != null) [ CD ]
Line_3 $$ Struct fromStruct = null-->Line_10 $$ if (fromStruct != null) [ FD ]
Line_3 $$ Struct fromStruct = null-->Line_14 $$ fromStruct = definition.classes.get(iface)[ FD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_9 $$ fromStruct = definition.classes.get(fromClass)[ FD ]
Line_14 $$ fromStruct = definition.classes.get(iface)-->Line_15 $$ if (fromStruct != null) [ FD ]
Line_4 $$ Struct toStruct = null-->Line_26 $$ toStruct = definition.classes.get(toClass)[ FD ]
Line_26 $$ toStruct = definition.classes.get(toClass)-->Line_27 $$ if (toStruct != null) [ FD ]
Line_26 $$ toStruct = definition.classes.get(toClass)-->Line_31 $$ toStruct = definition.classes.get(iface)[ FD ]
Line_13 $$ for (final Class iface : fromClass.getInterfaces()) -->Line_31 $$ toStruct = definition.classes.get(iface)[ FD ]
Line_26 $$ toStruct = definition.classes.get(toClass)-->Line_32 $$ if (toStruct != null) [ FD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_3 $$ Struct fromStruct = null[ CD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_8 $$ while (fromClass != null) [ FD ]
Line_8 $$ while (fromClass != null) -->Line_10 $$ if (fromStruct != null) [ CD ]
Line_8 $$ while (fromClass != null) -->Line_9 $$ fromStruct = definition.classes.get(fromClass)[ CD ]
Line_8 $$ while (fromClass != null) -->Line_22 $$ fromClass = fromClass.getSuperclass()[ CD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_22 $$ fromClass = fromClass.getSuperclass()[ FD ]
Line_25 $$ while (toClass != null) -->Line_39 $$ toClass = toClass.getSuperclass()[ CD ]
Line_5 $$ if (fromClass.equals(toClass)) -->Line_6 $$ return null[ CD ]
Line_42 $$ if (toStruct != null) -->Line_45 $$ final Cast cast = new Cast(fromType, toType)[ CD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_26 $$ toStruct = definition.classes.get(toClass)[ FD ]
Line_4 $$ Struct toStruct = null-->Line_42 $$ if (toStruct != null) [ FD ]
Line_39 $$ toClass = toClass.getSuperclass()-->Line_26 $$ toStruct = definition.classes.get(toClass)[ FD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_39 $$ toClass = toClass.getSuperclass()[ FD ]
Line_14 $$ fromStruct = definition.classes.get(iface)-->Line_10 $$ if (fromStruct != null) [ FD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_8 $$ while (fromClass != null) [ CD ]
Line_22 $$ fromClass = fromClass.getSuperclass()-->Line_8 $$ while (fromClass != null) [ FD ]
Line_25 $$ while (toClass != null) -->Line_26 $$ toStruct = definition.classes.get(toClass)[ CD ]
Line_31 $$ toStruct = definition.classes.get(iface)-->Line_27 $$ if (toStruct != null) [ FD ]
Line_24 $$ if (fromStruct != null) -->Line_25 $$ while (toClass != null) [ CD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_13 $$ for (final Class iface : fromClass.getInterfaces()) [ FD ]
Line_31 $$ toStruct = definition.classes.get(iface)-->Line_36 $$ if (toStruct != null) [ FD ]
Line_3 $$ Struct fromStruct = null-->Line_15 $$ if (fromStruct != null) [ FD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_25 $$ while (toClass != null) [ FD ]
Line_30 $$ for (final Class iface : toClass.getInterfaces()) -->Line_31 $$ toStruct = definition.classes.get(iface)[ FD ]
Line_14 $$ fromStruct = definition.classes.get(iface)-->Line_19 $$ if (fromStruct != null) [ FD ]
Line_3 $$ Struct fromStruct = null-->Line_9 $$ fromStruct = definition.classes.get(fromClass)[ FD ]
Line_13 $$ for (final Class iface : fromClass.getInterfaces()) -->Line_14 $$ fromStruct = definition.classes.get(iface)[ FD ]
Line_4 $$ Struct toStruct = null-->Line_36 $$ if (toStruct != null) [ FD ]
Line_8 $$ while (fromClass != null) -->Line_19 $$ if (fromStruct != null) [ CD ]
Line_42 $$ if (toStruct != null) -->Line_43 $$ final Type fromType = definition.getType(fromStruct.name)[ CD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_43 $$ final Type fromType = definition.getType(fromStruct.name)[ FD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_44 $$ final Type toType = definition.getType(toStruct.name)[ FD ]
Line_39 $$ toClass = toClass.getSuperclass()-->Line_30 $$ for (final Class iface : toClass.getInterfaces()) [ FD ]
Line_42 $$ if (toStruct != null) -->Line_46 $$ return definition.transforms.get(cast)[ CD ]
Line_31 $$ toStruct = definition.classes.get(iface)-->Line_32 $$ if (toStruct != null) [ FD ]
Line_9 $$ fromStruct = definition.classes.get(fromClass)-->Line_10 $$ if (fromStruct != null) [ FD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_42 $$ if (toStruct != null) [ CD ]
Line_4 $$ Struct toStruct = null-->Line_32 $$ if (toStruct != null) [ FD ]
Line_14 $$ fromStruct = definition.classes.get(iface)-->Line_24 $$ if (fromStruct != null) [ FD ]
Line_3 $$ Struct fromStruct = null-->Line_19 $$ if (fromStruct != null) [ FD ]
Line_2 $$ public static Transform getTransform(Class<?> fromClass, Class<?> toClass, final Definition definition) -->Line_48 $$ return null[ CD ]
Line_25 $$ while (toClass != null) -->Line_27 $$ if (toStruct != null) [ CD ]
