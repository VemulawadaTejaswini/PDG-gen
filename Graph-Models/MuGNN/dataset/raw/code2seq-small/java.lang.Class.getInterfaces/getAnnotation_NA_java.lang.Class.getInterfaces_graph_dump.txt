Line_4 $$ if (checkType) -->Line_6 $$ if (annotation != null) [ CD ]
Line_3 $$ A annotation-->Line_6 $$ if (annotation != null) [ FD ]
Line_5 $$ annotation = type.getAnnotation(annotationType)-->Line_12 $$ annotation = getAnnotation(anInterface, annotationType, true)[ FD ]
Line_2 $$ private static <A extends Annotation> A getAnnotation(Class<?> type, Class<A> annotationType, boolean checkType) -->Line_5 $$ annotation = type.getAnnotation(annotationType)[ FD ]
Line_3 $$ A annotation-->Line_13 $$ if (annotation != null) [ FD ]
Line_2 $$ private static <A extends Annotation> A getAnnotation(Class<?> type, Class<A> annotationType, boolean checkType) -->Line_12 $$ annotation = getAnnotation(anInterface, annotationType, true)[ FD ]
Line_2 $$ private static <A extends Annotation> A getAnnotation(Class<?> type, Class<A> annotationType, boolean checkType) -->Line_10 $$ if (annotationType.getAnnotation(Inherited.class) != null) [ FD ]
Line_5 $$ annotation = type.getAnnotation(annotationType)-->Line_13 $$ if (annotation != null) [ FD ]
Line_2 $$ private static <A extends Annotation> A getAnnotation(Class<?> type, Class<A> annotationType, boolean checkType) -->Line_3 $$ A annotation[ CD ]
Line_2 $$ private static <A extends Annotation> A getAnnotation(Class<?> type, Class<A> annotationType, boolean checkType) -->Line_21 $$ return getAnnotation(type.getSuperclass(), annotationType, false)[ FD ]
Line_2 $$ private static <A extends Annotation> A getAnnotation(Class<?> type, Class<A> annotationType, boolean checkType) -->Line_11 $$ for (Class<?> anInterface : type.getInterfaces()) [ FD ]
Line_5 $$ annotation = type.getAnnotation(annotationType)-->Line_6 $$ if (annotation != null) [ FD ]
Line_4 $$ if (checkType) -->Line_5 $$ annotation = type.getAnnotation(annotationType)[ CD ]
Line_2 $$ private static <A extends Annotation> A getAnnotation(Class<?> type, Class<A> annotationType, boolean checkType) -->Line_18 $$ if (type.isInterface() || type.equals(Object.class)) [ CD ]
Line_3 $$ A annotation-->Line_12 $$ annotation = getAnnotation(anInterface, annotationType, true)[ FD ]
Line_18 $$ if (type.isInterface() || type.equals(Object.class)) -->Line_19 $$ return null[ CD ]
Line_3 $$ A annotation-->Line_5 $$ annotation = type.getAnnotation(annotationType)[ FD ]
Line_2 $$ private static <A extends Annotation> A getAnnotation(Class<?> type, Class<A> annotationType, boolean checkType) -->Line_10 $$ if (annotationType.getAnnotation(Inherited.class) != null) [ CD ]
Line_6 $$ if (annotation != null) -->Line_7 $$ return annotation[ CD ]
Line_2 $$ private static <A extends Annotation> A getAnnotation(Class<?> type, Class<A> annotationType, boolean checkType) -->Line_18 $$ if (type.isInterface() || type.equals(Object.class)) [ FD ]
Line_13 $$ if (annotation != null) -->Line_14 $$ return annotation[ CD ]
Line_18 $$ if (type.isInterface() || type.equals(Object.class)) -->Line_21 $$ return getAnnotation(type.getSuperclass(), annotationType, false)[ CD ]
Line_2 $$ private static <A extends Annotation> A getAnnotation(Class<?> type, Class<A> annotationType, boolean checkType) -->Line_4 $$ if (checkType) [ CD ]
Line_12 $$ annotation = getAnnotation(anInterface, annotationType, true)-->Line_13 $$ if (annotation != null) [ FD ]
Line_11 $$ for (Class<?> anInterface : type.getInterfaces()) -->Line_12 $$ annotation = getAnnotation(anInterface, annotationType, true)[ FD ]
