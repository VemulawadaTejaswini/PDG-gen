Line_24 $$ if (classLoader instanceof SmartClassLoader && ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) -->Line_25 $$ enhancer.setUseCache(false)[ CD ]
Line_8 $$ Class<?> rootClass = this.advised.getTargetClass()-->Line_12 $$ proxySuperClass = rootClass.getSuperclass()[ FD ]
Line_14 $$ for (Class<?> additionalInterface : additionalInterfaces) -->Line_15 $$ this.advised.addInterface(additionalInterface)[ FD ]
Line_12 $$ proxySuperClass = rootClass.getSuperclass()-->Line_28 $$ enhancer.setSuperclass(proxySuperClass)[ FD ]
Line_34 $$ for (int x = 0; x < types.length; x++) -->Line_35 $$ types[x] = callbacks[x].getClass()[ CD ]
Line_4 $$ if (logger.isDebugEnabled()) -->Line_5 $$ logger.debug("Creating CGLIB proxy: target source is " + this.advised.getTargetSource())[ CD ]
Line_11 $$ if (ClassUtils.isCglibProxyClass(rootClass)) -->Line_12 $$ proxySuperClass = rootClass.getSuperclass()[ CD ]
Line_22 $$ if (classLoader != null) -->Line_23 $$ enhancer.setClassLoader(classLoader)[ CD ]
Line_11 $$ if (ClassUtils.isCglibProxyClass(rootClass)) -->Line_13 $$ Class<?>[] additionalInterfaces = rootClass.getInterfaces()[ CD ]
Line_33 $$ Class<?>[] types = new Class<?>[callbacks.length]-->Line_39 $$ enhancer.setCallbackTypes(types)[ FD ]
Line_8 $$ Class<?> rootClass = this.advised.getTargetClass()-->Line_32 $$ Callback[] callbacks = getCallbacks(rootClass)[ FD ]
Line_22 $$ if (classLoader != null) -->Line_24 $$ if (classLoader instanceof SmartClassLoader && ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) [ CD ]
Line_8 $$ Class<?> rootClass = this.advised.getTargetClass()-->Line_11 $$ if (ClassUtils.isCglibProxyClass(rootClass)) [ FD ]
Line_10 $$ Class<?> proxySuperClass = rootClass-->Line_28 $$ enhancer.setSuperclass(proxySuperClass)[ FD ]
Line_12 $$ proxySuperClass = rootClass.getSuperclass()-->Line_24 $$ if (classLoader instanceof SmartClassLoader && ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) [ FD ]
Line_10 $$ Class<?> proxySuperClass = rootClass-->Line_12 $$ proxySuperClass = rootClass.getSuperclass()[ FD ]
Line_10 $$ Class<?> proxySuperClass = rootClass-->Line_24 $$ if (classLoader instanceof SmartClassLoader && ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) [ FD ]
Line_8 $$ Class<?> rootClass = this.advised.getTargetClass()-->Line_13 $$ Class<?>[] additionalInterfaces = rootClass.getInterfaces()[ FD ]
