Line_2 $$ public Object getProxy(ClassLoader classLoader) -->Line_17 $$ validateClassIfNecessary(proxySuperClass, classLoader)[ FD ]
Line_11 $$ proxySuperClass = rootClass.getSuperclass()-->Line_17 $$ validateClassIfNecessary(proxySuperClass, classLoader)[ FD ]
Line_7 $$ Class<?> rootClass = this.advised.getTargetClass()-->Line_11 $$ proxySuperClass = rootClass.getSuperclass()[ FD ]
Line_21 $$ if (classLoader instanceof SmartClassLoader && ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) -->Line_22 $$ enhancer.setUseCache(false)[ CD ]
Line_19 $$ if (classLoader != null) -->Line_21 $$ if (classLoader instanceof SmartClassLoader && ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) [ CD ]
Line_7 $$ Class<?> rootClass = this.advised.getTargetClass()-->Line_10 $$ if (ClassUtils.isCglibProxyClass(rootClass)) [ FD ]
Line_9 $$ Class<?> proxySuperClass = rootClass-->Line_11 $$ proxySuperClass = rootClass.getSuperclass()[ FD ]
Line_18 $$ Enhancer enhancer = createEnhancer()-->Line_25 $$ enhancer.setSuperclass(proxySuperClass)[ FD ]
Line_18 $$ Enhancer enhancer = createEnhancer()-->Line_27 $$ enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)[ FD ]
Line_18 $$ Enhancer enhancer = createEnhancer()-->Line_28 $$ enhancer.setStrategy(new ClassLoaderAwareUndeclaredThrowableStrategy(classLoader))[ FD ]
Line_10 $$ if (ClassUtils.isCglibProxyClass(rootClass)) -->Line_12 $$ Class<?>[] additionalInterfaces = rootClass.getInterfaces()[ CD ]
Line_19 $$ if (classLoader != null) -->Line_20 $$ enhancer.setClassLoader(classLoader)[ CD ]
Line_9 $$ Class<?> proxySuperClass = rootClass-->Line_17 $$ validateClassIfNecessary(proxySuperClass, classLoader)[ FD ]
Line_7 $$ Class<?> rootClass = this.advised.getTargetClass()-->Line_29 $$ Callback[] callbacks = getCallbacks(rootClass)[ FD ]
Line_18 $$ Enhancer enhancer = createEnhancer()-->Line_26 $$ enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised))[ FD ]
Line_9 $$ Class<?> proxySuperClass = rootClass-->Line_21 $$ if (classLoader instanceof SmartClassLoader && ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) [ FD ]
Line_18 $$ Enhancer enhancer = createEnhancer()-->Line_35 $$ enhancer.setCallbackTypes(types)[ FD ]
Line_18 $$ Enhancer enhancer = createEnhancer()-->Line_20 $$ enhancer.setClassLoader(classLoader)[ FD ]
Line_3 $$ if (logger.isDebugEnabled()) -->Line_4 $$ logger.debug("Creating CGLIB proxy: target source is " + this.advised.getTargetSource())[ CD ]
Line_2 $$ public Object getProxy(ClassLoader classLoader) -->Line_20 $$ enhancer.setClassLoader(classLoader)[ FD ]
Line_10 $$ if (ClassUtils.isCglibProxyClass(rootClass)) -->Line_11 $$ proxySuperClass = rootClass.getSuperclass()[ CD ]
Line_18 $$ Enhancer enhancer = createEnhancer()-->Line_36 $$ return createProxyClassAndInstance(enhancer, callbacks)[ FD ]
Line_31 $$ for (int x = 0; x < types.length; x++) -->Line_32 $$ types[x] = callbacks[x].getClass()[ CD ]
Line_13 $$ for (Class<?> additionalInterface : additionalInterfaces) -->Line_14 $$ this.advised.addInterface(additionalInterface)[ FD ]
Line_18 $$ Enhancer enhancer = createEnhancer()-->Line_34 $$ enhancer.setCallbackFilter(new ProxyCallbackFilter(this.advised.getConfigurationOnlyCopy(), this.fixedInterceptorMap, this.fixedInterceptorOffset))[ FD ]
Line_7 $$ Class<?> rootClass = this.advised.getTargetClass()-->Line_12 $$ Class<?>[] additionalInterfaces = rootClass.getInterfaces()[ FD ]
Line_18 $$ Enhancer enhancer = createEnhancer()-->Line_22 $$ enhancer.setUseCache(false)[ FD ]
Line_9 $$ Class<?> proxySuperClass = rootClass-->Line_25 $$ enhancer.setSuperclass(proxySuperClass)[ FD ]
Line_11 $$ proxySuperClass = rootClass.getSuperclass()-->Line_25 $$ enhancer.setSuperclass(proxySuperClass)[ FD ]
Line_29 $$ Callback[] callbacks = getCallbacks(rootClass)-->Line_36 $$ return createProxyClassAndInstance(enhancer, callbacks)[ FD ]
Line_2 $$ public Object getProxy(ClassLoader classLoader) -->Line_3 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ public Object getProxy(ClassLoader classLoader) -->Line_19 $$ if (classLoader != null) [ FD ]
Line_11 $$ proxySuperClass = rootClass.getSuperclass()-->Line_21 $$ if (classLoader instanceof SmartClassLoader && ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) [ FD ]
Line_30 $$ Class<?>[] types = new Class<?>[callbacks.length]-->Line_35 $$ enhancer.setCallbackTypes(types)[ FD ]
