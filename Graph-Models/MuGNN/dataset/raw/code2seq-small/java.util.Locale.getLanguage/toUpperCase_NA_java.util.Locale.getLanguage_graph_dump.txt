Line_2 $$ public String toUpperCase(Locale locale) -->Line_6 $$ int firstLower[ CD ]
Line_35 $$ srcChar = (int) value[offset + i]-->Line_45 $$ upperChar = Character.toUpperCaseEx(srcChar)[ FD ]
Line_43 $$ upperChar = ConditionalSpecialCasing.toUpperCaseEx(this, i, locale)-->Line_58 $$ upperCharArray = Character.toChars(upperChar)[ FD ]
Line_52 $$ upperCharArray = Character.toUpperCaseCharArray(srcChar)-->Line_58 $$ upperCharArray = Character.toChars(upperChar)[ FD ]
Line_33 $$ int srcCount-->Line_40 $$ srcCount = 1[ FD ]
Line_10 $$ int srcCount-->Line_40 $$ srcCount = 1[ FD ]
Line_8 $$ for (firstLower = 0; firstLower < count; ) -->Line_21 $$ firstLower += srcCount[ FD ]
Line_60 $$ int mapLen = upperCharArray.length-->Line_61 $$ if (mapLen > srcCount) [ FD ]
Line_11 $$ if ((c >= Character.MIN_HIGH_SURROGATE) && (c <= Character.MAX_HIGH_SURROGATE)) -->Line_15 $$ srcCount = 1[ CD ]
Line_43 $$ upperChar = ConditionalSpecialCasing.toUpperCaseEx(this, i, locale)-->Line_45 $$ upperChar = Character.toUpperCaseEx(srcChar)[ FD ]
Line_25 $$ char[] result = new char[count]-->Line_63 $$ System.arraycopy(result, 0, result2, 0, i + resultOffset)[ FD ]
Line_10 $$ int srcCount-->Line_38 $$ srcCount = Character.charCount(srcChar)[ FD ]
Line_8 $$ for (firstLower = 0; firstLower < count; ) -->Line_18 $$ if ((upperCaseChar == Character.ERROR) || (c != upperCaseChar)) [ CD ]
Line_50 $$ upperCharArray = ConditionalSpecialCasing.toUpperCaseCharArray(this, i, locale)-->Line_52 $$ upperCharArray = Character.toUpperCaseCharArray(srcChar)[ FD ]
Line_30 $$ char[] upperCharArray-->Line_50 $$ upperCharArray = ConditionalSpecialCasing.toUpperCaseCharArray(this, i, locale)[ FD ]
Line_64 $$ result = result2-->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ FD ]
Line_31 $$ int upperChar-->Line_58 $$ upperCharArray = Character.toChars(upperChar)[ FD ]
Line_42 $$ if (localeDependent) -->Line_45 $$ upperChar = Character.toUpperCaseEx(srcChar)[ CD ]
Line_11 $$ if ((c >= Character.MIN_HIGH_SURROGATE) && (c <= Character.MAX_HIGH_SURROGATE)) -->Line_12 $$ c = codePointAt(firstLower)[ CD ]
Line_30 $$ char[] upperCharArray-->Line_58 $$ upperCharArray = Character.toChars(upperChar)[ FD ]
Line_33 $$ int srcCount-->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ FD ]
Line_32 $$ int srcChar-->Line_38 $$ srcCount = Character.charCount(srcChar)[ FD ]
Line_31 $$ int upperChar-->Line_48 $$ if (upperChar == Character.ERROR) [ FD ]
Line_25 $$ char[] result = new char[count]-->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ FD ]
Line_37 $$ srcChar = codePointAt(i)-->Line_45 $$ upperChar = Character.toUpperCaseEx(srcChar)[ FD ]
Line_43 $$ upperChar = ConditionalSpecialCasing.toUpperCaseEx(this, i, locale)-->Line_48 $$ if (upperChar == Character.ERROR) [ FD ]
Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount-->Line_69 $$ resultOffset += (mapLen - srcCount)[ FD ]
Line_66 $$ for (int x = 0; x < mapLen; ++x) -->Line_67 $$ result[i + resultOffset + x] = upperCharArray[x][ CD ]
Line_33 $$ int srcCount-->Line_34 $$ for (int i = firstLower; i < count; i += srcCount) [ FD ]
Line_54 $$ if (srcCount == 2) -->Line_58 $$ upperCharArray = Character.toChars(upperChar)[ CD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_74 $$ return new String(0, count + resultOffset, result)[ CD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_34 $$ for (int i = firstLower; i < count; i += srcCount) [ CD ]
Line_36 $$ if ((char) srcChar >= Character.MIN_HIGH_SURROGATE && (char) srcChar <= Character.MAX_HIGH_SURROGATE) -->Line_40 $$ srcCount = 1[ CD ]
Line_34 $$ for (int i = firstLower; i < count; i += srcCount) -->Line_37 $$ srcChar = codePointAt(i)[ FD ]
Line_34 $$ for (int i = firstLower; i < count; i += srcCount) -->Line_43 $$ upperChar = ConditionalSpecialCasing.toUpperCaseEx(this, i, locale)[ FD ]
Line_10 $$ int srcCount-->Line_61 $$ if (mapLen > srcCount) [ FD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_29 $$ boolean localeDependent = (lang == "tr" || lang == "az" || lang == "lt")[ CD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_3 $$ if (locale == null) [ FD ]
Line_32 $$ int srcChar-->Line_52 $$ upperCharArray = Character.toUpperCaseCharArray(srcChar)[ FD ]
Line_42 $$ if (localeDependent) -->Line_43 $$ upperChar = ConditionalSpecialCasing.toUpperCaseEx(this, i, locale)[ CD ]
Line_47 $$ if ((upperChar == Character.ERROR) || (upperChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) -->Line_71 $$ result[i + resultOffset] = (char) upperChar[ CD ]
Line_47 $$ if ((upperChar == Character.ERROR) || (upperChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) -->Line_69 $$ resultOffset += (mapLen - srcCount)[ CD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_33 $$ int srcCount[ CD ]
Line_54 $$ if (srcCount == 2) -->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ CD ]
Line_8 $$ for (firstLower = 0; firstLower < count; ) -->Line_11 $$ if ((c >= Character.MIN_HIGH_SURROGATE) && (c <= Character.MAX_HIGH_SURROGATE)) [ CD ]
Line_9 $$ int c = (int) value[offset + firstLower]-->Line_12 $$ c = codePointAt(firstLower)[ FD ]
Line_38 $$ srcCount = Character.charCount(srcChar)-->Line_40 $$ srcCount = 1[ FD ]
Line_34 $$ for (int i = firstLower; i < count; i += srcCount) -->Line_47 $$ if ((upperChar == Character.ERROR) || (upperChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) [ CD ]
Line_40 $$ srcCount = 1-->Line_61 $$ if (mapLen > srcCount) [ FD ]
Line_35 $$ srcChar = (int) value[offset + i]-->Line_37 $$ srcChar = codePointAt(i)[ FD ]
Line_10 $$ int srcCount-->Line_15 $$ srcCount = 1[ FD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_26 $$ int resultOffset = 0[ CD ]
Line_15 $$ srcCount = 1-->Line_61 $$ if (mapLen > srcCount) [ FD ]
Line_48 $$ if (upperChar == Character.ERROR) -->Line_54 $$ if (srcCount == 2) [ CD ]
Line_34 $$ for (int i = firstLower; i < count; i += srcCount) -->Line_42 $$ if (localeDependent) [ CD ]
Line_10 $$ int srcCount-->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ FD ]
Line_13 $$ srcCount = Character.charCount(c)-->Line_40 $$ srcCount = 1[ FD ]
Line_38 $$ srcCount = Character.charCount(srcChar)-->Line_61 $$ if (mapLen > srcCount) [ FD ]
Line_13 $$ srcCount = Character.charCount(c)-->Line_15 $$ srcCount = 1[ FD ]
Line_30 $$ char[] upperCharArray-->Line_52 $$ upperCharArray = Character.toUpperCaseCharArray(srcChar)[ FD ]
Line_13 $$ srcCount = Character.charCount(c)-->Line_54 $$ if (srcCount == 2) [ FD ]
Line_40 $$ srcCount = 1-->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ FD ]
Line_10 $$ int srcCount-->Line_54 $$ if (srcCount == 2) [ FD ]
Line_8 $$ for (firstLower = 0; firstLower < count; ) -->Line_9 $$ int c = (int) value[offset + firstLower][ CD ]
Line_12 $$ c = codePointAt(firstLower)-->Line_17 $$ int upperCaseChar = Character.toUpperCaseEx(c)[ FD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_43 $$ upperChar = ConditionalSpecialCasing.toUpperCaseEx(this, i, locale)[ FD ]
Line_34 $$ for (int i = firstLower; i < count; i += srcCount) -->Line_50 $$ upperCharArray = ConditionalSpecialCasing.toUpperCaseCharArray(this, i, locale)[ FD ]
Line_8 $$ for (firstLower = 0; firstLower < count; ) -->Line_10 $$ int srcCount[ CD ]
Line_62 $$ char[] result2 = new char[result.length + mapLen - srcCount]-->Line_63 $$ System.arraycopy(result, 0, result2, 0, i + resultOffset)[ FD ]
Line_49 $$ if (localeDependent) -->Line_52 $$ upperCharArray = Character.toUpperCaseCharArray(srcChar)[ CD ]
Line_15 $$ srcCount = 1-->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ FD ]
Line_47 $$ if ((upperChar == Character.ERROR) || (upperChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) -->Line_61 $$ if (mapLen > srcCount) [ CD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_30 $$ char[] upperCharArray[ CD ]
Line_49 $$ if (localeDependent) -->Line_50 $$ upperCharArray = ConditionalSpecialCasing.toUpperCaseCharArray(this, i, locale)[ CD ]
Line_26 $$ int resultOffset = 0-->Line_69 $$ resultOffset += (mapLen - srcCount)[ FD ]
Line_6 $$ int firstLower-->Line_21 $$ firstLower += srcCount[ FD ]
Line_8 $$ for (firstLower = 0; firstLower < count; ) -->Line_21 $$ firstLower += srcCount[ CD ]
Line_21 $$ firstLower += srcCount-->Line_8 $$ for (firstLower = 0; firstLower < count; ) [ FD ]
Line_64 $$ result = result2-->Line_63 $$ System.arraycopy(result, 0, result2, 0, i + resultOffset)[ FD ]
Line_26 $$ int resultOffset = 0-->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ FD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_28 $$ String lang = locale.getLanguage()[ CD ]
Line_48 $$ if (upperChar == Character.ERROR) -->Line_49 $$ if (localeDependent) [ CD ]
Line_15 $$ srcCount = 1-->Line_54 $$ if (srcCount == 2) [ FD ]
Line_15 $$ srcCount = 1-->Line_38 $$ srcCount = Character.charCount(srcChar)[ FD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_32 $$ int srcChar[ CD ]
Line_32 $$ int srcChar-->Line_37 $$ srcChar = codePointAt(i)[ FD ]
Line_25 $$ char[] result = new char[count]-->Line_64 $$ result = result2[ FD ]
Line_35 $$ srcChar = (int) value[offset + i]-->Line_38 $$ srcCount = Character.charCount(srcChar)[ FD ]
Line_33 $$ int srcCount-->Line_38 $$ srcCount = Character.charCount(srcChar)[ FD ]
Line_12 $$ c = codePointAt(firstLower)-->Line_13 $$ srcCount = Character.charCount(c)[ FD ]
Line_31 $$ int upperChar-->Line_45 $$ upperChar = Character.toUpperCaseEx(srcChar)[ FD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_3 $$ if (locale == null) [ CD ]
Line_62 $$ char[] result2 = new char[result.length + mapLen - srcCount]-->Line_64 $$ result = result2[ FD ]
Line_47 $$ if ((upperChar == Character.ERROR) || (upperChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) -->Line_66 $$ for (int x = 0; x < mapLen; ++x) [ CD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_25 $$ char[] result = new char[count][ CD ]
Line_37 $$ srcChar = codePointAt(i)-->Line_38 $$ srcCount = Character.charCount(srcChar)[ FD ]
Line_6 $$ int firstLower-->Line_8 $$ for (firstLower = 0; firstLower < count; ) [ FD ]
Line_47 $$ if ((upperChar == Character.ERROR) || (upperChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) -->Line_48 $$ if (upperChar == Character.ERROR) [ CD ]
Line_11 $$ if ((c >= Character.MIN_HIGH_SURROGATE) && (c <= Character.MAX_HIGH_SURROGATE)) -->Line_13 $$ srcCount = Character.charCount(c)[ CD ]
Line_38 $$ srcCount = Character.charCount(srcChar)-->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ FD ]
Line_15 $$ srcCount = 1-->Line_34 $$ for (int i = firstLower; i < count; i += srcCount) [ FD ]
Line_60 $$ int mapLen = upperCharArray.length-->Line_66 $$ for (int x = 0; x < mapLen; ++x) [ FD ]
Line_9 $$ int c = (int) value[offset + firstLower]-->Line_13 $$ srcCount = Character.charCount(c)[ FD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_50 $$ upperCharArray = ConditionalSpecialCasing.toUpperCaseCharArray(this, i, locale)[ FD ]
Line_47 $$ if ((upperChar == Character.ERROR) || (upperChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) -->Line_60 $$ int mapLen = upperCharArray.length[ CD ]
Line_45 $$ upperChar = Character.toUpperCaseEx(srcChar)-->Line_58 $$ upperCharArray = Character.toChars(upperChar)[ FD ]
Line_32 $$ int srcChar-->Line_35 $$ srcChar = (int) value[offset + i][ FD ]
Line_6 $$ int firstLower-->Line_27 $$ System.arraycopy(value, offset, result, 0, firstLower)[ FD ]
Line_37 $$ srcChar = codePointAt(i)-->Line_52 $$ upperCharArray = Character.toUpperCaseCharArray(srcChar)[ FD ]
Line_25 $$ char[] result = new char[count]-->Line_27 $$ System.arraycopy(value, offset, result, 0, firstLower)[ FD ]
Line_13 $$ srcCount = Character.charCount(c)-->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ FD ]
Line_31 $$ int upperChar-->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ FD ]
Line_61 $$ if (mapLen > srcCount) -->Line_64 $$ result = result2[ CD ]
Line_8 $$ for (firstLower = 0; firstLower < count; ) -->Line_27 $$ System.arraycopy(value, offset, result, 0, firstLower)[ FD ]
Line_8 $$ for (firstLower = 0; firstLower < count; ) -->Line_12 $$ c = codePointAt(firstLower)[ FD ]
Line_35 $$ srcChar = (int) value[offset + i]-->Line_52 $$ upperCharArray = Character.toUpperCaseCharArray(srcChar)[ FD ]
Line_9 $$ int c = (int) value[offset + firstLower]-->Line_17 $$ int upperCaseChar = Character.toUpperCaseEx(c)[ FD ]
Line_61 $$ if (mapLen > srcCount) -->Line_62 $$ char[] result2 = new char[result.length + mapLen - srcCount][ CD ]
Line_13 $$ srcCount = Character.charCount(c)-->Line_34 $$ for (int i = firstLower; i < count; i += srcCount) [ FD ]
Line_40 $$ srcCount = 1-->Line_54 $$ if (srcCount == 2) [ FD ]
Line_45 $$ upperChar = Character.toUpperCaseEx(srcChar)-->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ FD ]
Line_6 $$ int firstLower-->Line_12 $$ c = codePointAt(firstLower)[ FD ]
Line_10 $$ int srcCount-->Line_34 $$ for (int i = firstLower; i < count; i += srcCount) [ FD ]
Line_36 $$ if ((char) srcChar >= Character.MIN_HIGH_SURROGATE && (char) srcChar <= Character.MAX_HIGH_SURROGATE) -->Line_37 $$ srcChar = codePointAt(i)[ CD ]
Line_38 $$ srcCount = Character.charCount(srcChar)-->Line_54 $$ if (srcCount == 2) [ FD ]
Line_33 $$ int srcCount-->Line_54 $$ if (srcCount == 2) [ FD ]
Line_10 $$ int srcCount-->Line_21 $$ firstLower += srcCount[ FD ]
Line_36 $$ if ((char) srcChar >= Character.MIN_HIGH_SURROGATE && (char) srcChar <= Character.MAX_HIGH_SURROGATE) -->Line_38 $$ srcCount = Character.charCount(srcChar)[ CD ]
Line_50 $$ upperCharArray = ConditionalSpecialCasing.toUpperCaseCharArray(this, i, locale)-->Line_58 $$ upperCharArray = Character.toChars(upperChar)[ FD ]
Line_40 $$ srcCount = 1-->Line_34 $$ for (int i = firstLower; i < count; i += srcCount) [ FD ]
Line_45 $$ upperChar = Character.toUpperCaseEx(srcChar)-->Line_48 $$ if (upperChar == Character.ERROR) [ FD ]
Line_21 $$ firstLower += srcCount-->Line_12 $$ c = codePointAt(firstLower)[ FD ]
Line_33 $$ int srcCount-->Line_61 $$ if (mapLen > srcCount) [ FD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_28 $$ String lang = locale.getLanguage()[ FD ]
Line_21 $$ firstLower += srcCount-->Line_27 $$ System.arraycopy(value, offset, result, 0, firstLower)[ FD ]
Line_34 $$ for (int i = firstLower; i < count; i += srcCount) -->Line_35 $$ srcChar = (int) value[offset + i][ CD ]
Line_34 $$ for (int i = firstLower; i < count; i += srcCount) -->Line_36 $$ if ((char) srcChar >= Character.MIN_HIGH_SURROGATE && (char) srcChar <= Character.MAX_HIGH_SURROGATE) [ CD ]
Line_32 $$ int srcChar-->Line_45 $$ upperChar = Character.toUpperCaseEx(srcChar)[ FD ]
Line_15 $$ srcCount = 1-->Line_21 $$ firstLower += srcCount[ FD ]
Line_15 $$ srcCount = 1-->Line_40 $$ srcCount = 1[ FD ]
Line_8 $$ for (firstLower = 0; firstLower < count; ) -->Line_17 $$ int upperCaseChar = Character.toUpperCaseEx(c)[ CD ]
Line_61 $$ if (mapLen > srcCount) -->Line_63 $$ System.arraycopy(result, 0, result2, 0, i + resultOffset)[ CD ]
Line_13 $$ srcCount = Character.charCount(c)-->Line_38 $$ srcCount = Character.charCount(srcChar)[ FD ]
Line_38 $$ srcCount = Character.charCount(srcChar)-->Line_34 $$ for (int i = firstLower; i < count; i += srcCount) [ FD ]
Line_10 $$ int srcCount-->Line_13 $$ srcCount = Character.charCount(c)[ FD ]
Line_13 $$ srcCount = Character.charCount(c)-->Line_61 $$ if (mapLen > srcCount) [ FD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_27 $$ System.arraycopy(value, offset, result, 0, firstLower)[ CD ]
Line_43 $$ upperChar = ConditionalSpecialCasing.toUpperCaseEx(this, i, locale)-->Line_55 $$ resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount[ FD ]
Line_13 $$ srcCount = Character.charCount(c)-->Line_21 $$ firstLower += srcCount[ FD ]
Line_31 $$ int upperChar-->Line_43 $$ upperChar = ConditionalSpecialCasing.toUpperCaseEx(this, i, locale)[ FD ]
Line_2 $$ public String toUpperCase(Locale locale) -->Line_31 $$ int upperChar[ CD ]
