Line_5 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new CallerRunsPolicy(), Executors.defaultThreadFactory(), markerThreadPoolHandler)-->Line_11 $$ threadPoolExecutor.execute(markerBlockingJob)[ FD ]
Line_4 $$ MarkerThreadPoolHandler markerThreadPoolHandler = new MarkerThreadPoolHandler()-->Line_17 $$ Assert.assertTrue(markerThreadPoolHandler.isBeforeExecuteRan())[ FD ]
Line_4 $$ MarkerThreadPoolHandler markerThreadPoolHandler = new MarkerThreadPoolHandler()-->Line_18 $$ Assert.assertTrue(markerThreadPoolHandler.isAfterExecuteRan())[ FD ]
Line_5 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new CallerRunsPolicy(), Executors.defaultThreadFactory(), markerThreadPoolHandler)-->Line_7 $$ threadPoolExecutor.execute(new MarkerBlockingJob(true))[ FD ]
Line_9 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob(false, true)-->Line_15 $$ Assert.assertTrue(markerBlockingJob.isStarted())[ FD ]
Line_9 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob(false, true)-->Line_11 $$ threadPoolExecutor.execute(markerBlockingJob)[ FD ]
Line_5 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new CallerRunsPolicy(), Executors.defaultThreadFactory(), markerThreadPoolHandler)-->Line_20 $$ TestUtil.closePool(threadPoolExecutor, true)[ FD ]
Line_9 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob(false, true)-->Line_16 $$ Assert.assertFalse(markerBlockingJob.isEnded())[ FD ]
Line_5 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new CallerRunsPolicy(), Executors.defaultThreadFactory(), markerThreadPoolHandler)-->Line_8 $$ threadPoolExecutor.execute(new MarkerBlockingJob(true))[ FD ]
