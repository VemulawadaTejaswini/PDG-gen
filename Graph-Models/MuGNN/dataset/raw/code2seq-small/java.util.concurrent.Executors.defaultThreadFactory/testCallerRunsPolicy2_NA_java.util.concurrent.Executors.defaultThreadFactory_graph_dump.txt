Line_2 $$ public void testCallerRunsPolicy2() -->Line_4 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new CallerRunsPolicy(), Executors.defaultThreadFactory(), markerThreadPoolHandler)[ CD ]
Line_2 $$ public void testCallerRunsPolicy2() -->Line_3 $$ MarkerThreadPoolHandler markerThreadPoolHandler = new MarkerThreadPoolHandler()[ CD ]
Line_3 $$ MarkerThreadPoolHandler markerThreadPoolHandler = new MarkerThreadPoolHandler()-->Line_11 $$ Assert.assertTrue(markerThreadPoolHandler.isBeforeExecuteRan())[ FD ]
Line_3 $$ MarkerThreadPoolHandler markerThreadPoolHandler = new MarkerThreadPoolHandler()-->Line_12 $$ Assert.assertTrue(markerThreadPoolHandler.isAfterExecuteRan())[ FD ]
Line_4 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new CallerRunsPolicy(), Executors.defaultThreadFactory(), markerThreadPoolHandler)-->Line_7 $$ threadPoolExecutor.execute(new MarkerBlockingJob(true))[ FD ]
Line_8 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_10 $$ Assert.assertTrue(markerBlockingJob.isEnded())[ FD ]
Line_8 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_9 $$ threadPoolExecutor.execute(markerBlockingJob)[ FD ]
Line_4 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new CallerRunsPolicy(), Executors.defaultThreadFactory(), markerThreadPoolHandler)-->Line_6 $$ threadPoolExecutor.execute(new MarkerBlockingJob(true))[ FD ]
Line_4 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new CallerRunsPolicy(), Executors.defaultThreadFactory(), markerThreadPoolHandler)-->Line_9 $$ threadPoolExecutor.execute(markerBlockingJob)[ FD ]
Line_4 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new CallerRunsPolicy(), Executors.defaultThreadFactory(), markerThreadPoolHandler)-->Line_14 $$ TestUtil.closePool(threadPoolExecutor, true)[ FD ]
