Line_4 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 2, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 3, new CallerRunsPolicy(), Executors.defaultThreadFactory(), markerThreadPoolHandler)-->Line_7 $$ threadPoolExecutor.execute(markerBlockingJob)[ FD ]
Line_4 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 2, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 3, new CallerRunsPolicy(), Executors.defaultThreadFactory(), markerThreadPoolHandler)-->Line_5 $$ threadPoolExecutor.shutdown()[ FD ]
Line_3 $$ MarkerThreadPoolHandler markerThreadPoolHandler = new MarkerThreadPoolHandler()-->Line_10 $$ Assert.assertFalse(markerThreadPoolHandler.isAfterExecuteRan())[ FD ]
Line_2 $$ public void testCallerRunsPolicy1() -->Line_7 $$ threadPoolExecutor.execute(markerBlockingJob)[ CD ]
Line_6 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_8 $$ Assert.assertFalse(markerBlockingJob.isStarted())[ FD ]
Line_2 $$ public void testCallerRunsPolicy1() -->Line_4 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 2, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 3, new CallerRunsPolicy(), Executors.defaultThreadFactory(), markerThreadPoolHandler)[ CD ]
Line_6 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_7 $$ threadPoolExecutor.execute(markerBlockingJob)[ FD ]
Line_2 $$ public void testCallerRunsPolicy1() -->Line_9 $$ Assert.assertFalse(markerThreadPoolHandler.isBeforeExecuteRan())[ CD ]
Line_2 $$ public void testCallerRunsPolicy1() -->Line_5 $$ threadPoolExecutor.shutdown()[ CD ]
Line_3 $$ MarkerThreadPoolHandler markerThreadPoolHandler = new MarkerThreadPoolHandler()-->Line_9 $$ Assert.assertFalse(markerThreadPoolHandler.isBeforeExecuteRan())[ FD ]
Line_2 $$ public void testCallerRunsPolicy1() -->Line_6 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()[ CD ]
Line_2 $$ public void testCallerRunsPolicy1() -->Line_3 $$ MarkerThreadPoolHandler markerThreadPoolHandler = new MarkerThreadPoolHandler()[ CD ]
Line_2 $$ public void testCallerRunsPolicy1() -->Line_10 $$ Assert.assertFalse(markerThreadPoolHandler.isAfterExecuteRan())[ CD ]
Line_2 $$ public void testCallerRunsPolicy1() -->Line_8 $$ Assert.assertFalse(markerBlockingJob.isStarted())[ CD ]
