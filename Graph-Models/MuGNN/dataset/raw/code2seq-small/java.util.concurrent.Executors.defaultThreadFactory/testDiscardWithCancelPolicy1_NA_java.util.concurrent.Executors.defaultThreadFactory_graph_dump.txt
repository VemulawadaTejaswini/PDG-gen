Line_5 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_7 $$ Assert.assertFalse(markerBlockingJob.isEnded())[ FD ]
Line_5 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_6 $$ threadPoolExecutor.execute(markerBlockingJob)[ FD ]
Line_2 $$ public void testDiscardWithCancelPolicy1() -->Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardWithCancelPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())[ CD ]
Line_2 $$ public void testDiscardWithCancelPolicy1() -->Line_7 $$ Assert.assertFalse(markerBlockingJob.isEnded())[ CD ]
Line_2 $$ public void testDiscardWithCancelPolicy1() -->Line_4 $$ threadPoolExecutor.shutdown()[ CD ]
Line_8 $$ markerBlockingJob = new MarkerBlockingJob()-->Line_10 $$ Assert.assertFalse(markerBlockingJob.isEnded())[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardWithCancelPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_6 $$ threadPoolExecutor.execute(markerBlockingJob)[ FD ]
Line_5 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_8 $$ markerBlockingJob = new MarkerBlockingJob()[ FD ]
Line_5 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_10 $$ Assert.assertFalse(markerBlockingJob.isEnded())[ FD ]
Line_2 $$ public void testDiscardWithCancelPolicy1() -->Line_6 $$ threadPoolExecutor.execute(markerBlockingJob)[ CD ]
Line_2 $$ public void testDiscardWithCancelPolicy1() -->Line_9 $$ Future<?> future = threadPoolExecutor.submit(markerBlockingJob)[ CD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardWithCancelPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_4 $$ threadPoolExecutor.shutdown()[ FD ]
Line_9 $$ Future<?> future = threadPoolExecutor.submit(markerBlockingJob)-->Line_11 $$ Assert.assertTrue(future.isCancelled())[ FD ]
Line_2 $$ public void testDiscardWithCancelPolicy1() -->Line_11 $$ Assert.assertTrue(future.isCancelled())[ CD ]
Line_2 $$ public void testDiscardWithCancelPolicy1() -->Line_5 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()[ CD ]
Line_2 $$ public void testDiscardWithCancelPolicy1() -->Line_8 $$ markerBlockingJob = new MarkerBlockingJob()[ CD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardWithCancelPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_9 $$ Future<?> future = threadPoolExecutor.submit(markerBlockingJob)[ FD ]
Line_2 $$ public void testDiscardWithCancelPolicy1() -->Line_10 $$ Assert.assertFalse(markerBlockingJob.isEnded())[ CD ]
Line_5 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_9 $$ Future<?> future = threadPoolExecutor.submit(markerBlockingJob)[ FD ]
Line_8 $$ markerBlockingJob = new MarkerBlockingJob()-->Line_9 $$ Future<?> future = threadPoolExecutor.submit(markerBlockingJob)[ FD ]
