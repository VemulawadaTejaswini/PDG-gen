Line_6 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_9 $$ markerBlockingJob = new MarkerBlockingJob()[ FD ]
Line_9 $$ markerBlockingJob = new MarkerBlockingJob()-->Line_10 $$ Future<?> future = threadPoolExecutor.submit(markerBlockingJob)[ FD ]
Line_6 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_10 $$ Future<?> future = threadPoolExecutor.submit(markerBlockingJob)[ FD ]
Line_6 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_11 $$ Assert.assertFalse(markerBlockingJob.isEnded())[ FD ]
Line_9 $$ markerBlockingJob = new MarkerBlockingJob()-->Line_11 $$ Assert.assertFalse(markerBlockingJob.isEnded())[ FD ]
Line_4 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardWithCancelPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_5 $$ threadPoolExecutor.shutdown()[ FD ]
Line_6 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_8 $$ Assert.assertFalse(markerBlockingJob.isEnded())[ FD ]
Line_4 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardWithCancelPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_7 $$ threadPoolExecutor.execute(markerBlockingJob)[ FD ]
Line_10 $$ Future<?> future = threadPoolExecutor.submit(markerBlockingJob)-->Line_12 $$ Assert.assertTrue(future.isCancelled())[ FD ]
Line_4 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardWithCancelPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_10 $$ Future<?> future = threadPoolExecutor.submit(markerBlockingJob)[ FD ]
Line_6 $$ MarkerBlockingJob markerBlockingJob = new MarkerBlockingJob()-->Line_7 $$ threadPoolExecutor.execute(markerBlockingJob)[ FD ]
