Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_15 $$ Assert.assertEquals(1, threadPoolExecutor.getActiveCount())[ FD ]
Line_6 $$ MarkerBlockingJob markerBlockingJob2 = new MarkerBlockingJob(true)-->Line_22 $$ markerBlockingJob2.unBlock()[ FD ]
Line_6 $$ MarkerBlockingJob markerBlockingJob2 = new MarkerBlockingJob(true)-->Line_18 $$ markerBlockingJob2.waitUntilBlock()[ FD ]
Line_7 $$ MarkerBlockingJob markerBlockingJob3 = new MarkerBlockingJob()-->Line_13 $$ threadPoolExecutor.execute(markerBlockingJob3)[ FD ]
Line_5 $$ MarkerBlockingJob markerBlockingJob1 = new MarkerBlockingJob(true)-->Line_9 $$ markerBlockingJob1.waitUntilBlock()[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_25 $$ Assert.assertEquals(0, threadPoolExecutor.getPendingTaskCount())[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_27 $$ TestUtil.closePool(threadPoolExecutor)[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_21 $$ Assert.assertEquals(0, threadPoolExecutor.getPendingTaskCount())[ FD ]
Line_7 $$ MarkerBlockingJob markerBlockingJob3 = new MarkerBlockingJob()-->Line_14 $$ Assert.assertFalse(markerBlockingJob3.isStarted())[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_11 $$ Assert.assertEquals(1, threadPoolExecutor.getActiveCount())[ FD ]
Line_5 $$ MarkerBlockingJob markerBlockingJob1 = new MarkerBlockingJob(true)-->Line_17 $$ markerBlockingJob1.unBlock()[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_16 $$ Assert.assertEquals(1, threadPoolExecutor.getPendingTaskCount())[ FD ]
Line_6 $$ MarkerBlockingJob markerBlockingJob2 = new MarkerBlockingJob(true)-->Line_10 $$ threadPoolExecutor.execute(markerBlockingJob2)[ FD ]
Line_5 $$ MarkerBlockingJob markerBlockingJob1 = new MarkerBlockingJob(true)-->Line_8 $$ threadPoolExecutor.execute(markerBlockingJob1)[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_20 $$ Assert.assertEquals(1, threadPoolExecutor.getActiveCount())[ FD ]
Line_6 $$ MarkerBlockingJob markerBlockingJob2 = new MarkerBlockingJob(true)-->Line_23 $$ TestUtil.waitUntilEnded(markerBlockingJob2)[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_24 $$ Assert.assertEquals(0, threadPoolExecutor.getActiveCount())[ FD ]
Line_5 $$ MarkerBlockingJob markerBlockingJob1 = new MarkerBlockingJob(true)-->Line_19 $$ Assert.assertTrue(markerBlockingJob1.isEnded())[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_13 $$ threadPoolExecutor.execute(markerBlockingJob3)[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_8 $$ threadPoolExecutor.execute(markerBlockingJob1)[ FD ]
Line_2 $$ public void testDiscardPolicy2() throws InterruptedException -->Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())[ CD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_12 $$ Assert.assertEquals(1, threadPoolExecutor.getPendingTaskCount())[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1, new DiscardPolicy(), Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_10 $$ threadPoolExecutor.execute(markerBlockingJob2)[ FD ]
