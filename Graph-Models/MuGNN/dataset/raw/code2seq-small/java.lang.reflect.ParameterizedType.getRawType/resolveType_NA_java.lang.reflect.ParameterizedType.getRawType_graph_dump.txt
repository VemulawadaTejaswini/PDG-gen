Line_2 $$ Type resolveType(Type toResolve) -->Line_7 $$ if (toResolve == original) [ FD ]
Line_2 $$ Type resolveType(Type toResolve) -->Line_32 $$ if (toResolve instanceof WildcardType) [ FD ]
Line_12 $$ Type componentType = original.getGenericComponentType()-->Line_13 $$ Type newComponentType = resolveType(componentType)[ FD ]
Line_32 $$ if (toResolve instanceof WildcardType) -->Line_47 $$ return original[ CD ]
Line_6 $$ toResolve = MoreTypes.resolveTypeVariable(type, rawType, original)-->Line_7 $$ if (toResolve == original) [ FD ]
Line_41 $$ if (originalUpperBound.length == 1) -->Line_43 $$ if (upperBound != originalUpperBound[0]) [ CD ]
Line_5 $$ TypeVariable original = (TypeVariable) toResolve-->Line_20 $$ Type[] args = original.getActualTypeArguments()[ FD ]
Line_32 $$ if (toResolve instanceof WildcardType) -->Line_34 $$ Type[] originalLowerBound = original.getLowerBounds()[ CD ]
Line_6 $$ toResolve = MoreTypes.resolveTypeVariable(type, rawType, original)-->Line_10 $$ if (toResolve instanceof GenericArrayType) [ FD ]
Line_15 $$ if (toResolve instanceof ParameterizedType) -->Line_21 $$ for (int t = 0, length = args.length; t < length; t++) [ CD ]
Line_22 $$ Type resolvedTypeArgument = resolveType(args[t])-->Line_23 $$ if (resolvedTypeArgument != args[t]) [ FD ]
Line_15 $$ if (toResolve instanceof ParameterizedType) -->Line_18 $$ Type newOwnerType = resolveType(ownerType)[ CD ]
Line_5 $$ TypeVariable original = (TypeVariable) toResolve-->Line_17 $$ Type ownerType = original.getOwnerType()[ FD ]
Line_32 $$ if (toResolve instanceof WildcardType) -->Line_35 $$ Type[] originalUpperBound = original.getUpperBounds()[ CD ]
Line_43 $$ if (upperBound != originalUpperBound[0]) -->Line_44 $$ return Types.subtypeOf(upperBound)[ CD ]
Line_5 $$ TypeVariable original = (TypeVariable) toResolve-->Line_7 $$ if (toResolve == original) [ FD ]
Line_15 $$ if (toResolve instanceof ParameterizedType) -->Line_19 $$ boolean changed = newOwnerType != ownerType[ CD ]
Line_5 $$ TypeVariable original = (TypeVariable) toResolve-->Line_34 $$ Type[] originalLowerBound = original.getLowerBounds()[ FD ]
Line_21 $$ for (int t = 0, length = args.length; t < length; t++) -->Line_22 $$ Type resolvedTypeArgument = resolveType(args[t])[ CD ]
Line_36 $$ if (originalLowerBound.length == 1) -->Line_41 $$ if (originalUpperBound.length == 1) [ CD ]
Line_36 $$ if (originalLowerBound.length == 1) -->Line_37 $$ Type lowerBound = resolveType(originalLowerBound[0])[ CD ]
Line_4 $$ if (toResolve instanceof TypeVariable) -->Line_10 $$ if (toResolve instanceof GenericArrayType) [ CD ]
Line_19 $$ boolean changed = newOwnerType != ownerType-->Line_24 $$ if (!changed) [ FD ]
Line_4 $$ if (toResolve instanceof TypeVariable) -->Line_6 $$ toResolve = MoreTypes.resolveTypeVariable(type, rawType, original)[ CD ]
Line_2 $$ Type resolveType(Type toResolve) -->Line_3 $$ while (true) [ CD ]
Line_2 $$ Type resolveType(Type toResolve) -->Line_10 $$ if (toResolve instanceof GenericArrayType) [ FD ]
Line_13 $$ Type newComponentType = resolveType(componentType)-->Line_14 $$ return componentType == newComponentType ? original : Types.arrayOf(newComponentType)[ FD ]
Line_5 $$ TypeVariable original = (TypeVariable) toResolve-->Line_6 $$ toResolve = MoreTypes.resolveTypeVariable(type, rawType, original)[ FD ]
Line_10 $$ if (toResolve instanceof GenericArrayType) -->Line_15 $$ if (toResolve instanceof ParameterizedType) [ CD ]
Line_5 $$ TypeVariable original = (TypeVariable) toResolve-->Line_35 $$ Type[] originalUpperBound = original.getUpperBounds()[ FD ]
Line_2 $$ Type resolveType(Type toResolve) -->Line_15 $$ if (toResolve instanceof ParameterizedType) [ FD ]
Line_32 $$ if (toResolve instanceof WildcardType) -->Line_36 $$ if (originalLowerBound.length == 1) [ CD ]
Line_36 $$ if (originalLowerBound.length == 1) -->Line_38 $$ if (lowerBound != originalLowerBound[0]) [ CD ]
Line_18 $$ Type newOwnerType = resolveType(ownerType)-->Line_31 $$ return changed ? Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original[ FD ]
Line_10 $$ if (toResolve instanceof GenericArrayType) -->Line_13 $$ Type newComponentType = resolveType(componentType)[ CD ]
Line_3 $$ while (true) -->Line_4 $$ if (toResolve instanceof TypeVariable) [ CD ]
Line_15 $$ if (toResolve instanceof ParameterizedType) -->Line_17 $$ Type ownerType = original.getOwnerType()[ CD ]
Line_32 $$ if (toResolve instanceof WildcardType) -->Line_49 $$ return toResolve[ CD ]
Line_26 $$ changed = true-->Line_24 $$ if (!changed) [ FD ]
Line_4 $$ if (toResolve instanceof TypeVariable) -->Line_5 $$ TypeVariable original = (TypeVariable) toResolve[ CD ]
Line_5 $$ TypeVariable original = (TypeVariable) toResolve-->Line_12 $$ Type componentType = original.getGenericComponentType()[ FD ]
Line_17 $$ Type ownerType = original.getOwnerType()-->Line_18 $$ Type newOwnerType = resolveType(ownerType)[ FD ]
Line_2 $$ Type resolveType(Type toResolve) -->Line_4 $$ if (toResolve instanceof TypeVariable) [ FD ]
Line_22 $$ Type resolvedTypeArgument = resolveType(args[t])-->Line_28 $$ args[t] = resolvedTypeArgument[ FD ]
Line_15 $$ if (toResolve instanceof ParameterizedType) -->Line_32 $$ if (toResolve instanceof WildcardType) [ CD ]
Line_15 $$ if (toResolve instanceof ParameterizedType) -->Line_20 $$ Type[] args = original.getActualTypeArguments()[ CD ]
Line_23 $$ if (resolvedTypeArgument != args[t]) -->Line_28 $$ args[t] = resolvedTypeArgument[ CD ]
Line_7 $$ if (toResolve == original) -->Line_8 $$ return toResolve[ CD ]
Line_6 $$ toResolve = MoreTypes.resolveTypeVariable(type, rawType, original)-->Line_32 $$ if (toResolve instanceof WildcardType) [ FD ]
Line_19 $$ boolean changed = newOwnerType != ownerType-->Line_26 $$ changed = true[ FD ]
Line_15 $$ if (toResolve instanceof ParameterizedType) -->Line_31 $$ return changed ? Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original[ CD ]
Line_24 $$ if (!changed) -->Line_26 $$ changed = true[ CD ]
Line_41 $$ if (originalUpperBound.length == 1) -->Line_42 $$ Type upperBound = resolveType(originalUpperBound[0])[ CD ]
Line_23 $$ if (resolvedTypeArgument != args[t]) -->Line_24 $$ if (!changed) [ CD ]
Line_2 $$ Type resolveType(Type toResolve) -->Line_6 $$ toResolve = MoreTypes.resolveTypeVariable(type, rawType, original)[ FD ]
Line_25 $$ args = args.clone()-->Line_31 $$ return changed ? Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original[ FD ]
Line_38 $$ if (lowerBound != originalLowerBound[0]) -->Line_39 $$ return Types.supertypeOf(lowerBound)[ CD ]
Line_10 $$ if (toResolve instanceof GenericArrayType) -->Line_14 $$ return componentType == newComponentType ? original : Types.arrayOf(newComponentType)[ CD ]
Line_24 $$ if (!changed) -->Line_25 $$ args = args.clone()[ CD ]
Line_6 $$ toResolve = MoreTypes.resolveTypeVariable(type, rawType, original)-->Line_4 $$ if (toResolve instanceof TypeVariable) [ FD ]
Line_5 $$ TypeVariable original = (TypeVariable) toResolve-->Line_31 $$ return changed ? Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original[ FD ]
Line_4 $$ if (toResolve instanceof TypeVariable) -->Line_7 $$ if (toResolve == original) [ CD ]
Line_21 $$ for (int t = 0, length = args.length; t < length; t++) -->Line_23 $$ if (resolvedTypeArgument != args[t]) [ CD ]
Line_20 $$ Type[] args = original.getActualTypeArguments()-->Line_31 $$ return changed ? Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original[ FD ]
Line_6 $$ toResolve = MoreTypes.resolveTypeVariable(type, rawType, original)-->Line_15 $$ if (toResolve instanceof ParameterizedType) [ FD ]
Line_20 $$ Type[] args = original.getActualTypeArguments()-->Line_25 $$ args = args.clone()[ FD ]
Line_10 $$ if (toResolve instanceof GenericArrayType) -->Line_12 $$ Type componentType = original.getGenericComponentType()[ CD ]
