Line_5 $$ if (JAXBElement.class == parameterizedType.getRawType() && parameterizedType.getActualTypeArguments().length == 1) -->Line_7 $$ if (typeArgument instanceof Class) [ CD ]
Line_7 $$ if (typeArgument instanceof Class) -->Line_9 $$ return (((classArgument.isArray() && Byte.TYPE == classArgument.getComponentType())) || isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) || supportsInternal(classArgument, false))[ CD ]
Line_2 $$ public boolean supports(Type genericType) -->Line_15 $$ if (genericType instanceof Class) [ FD ]
Line_2 $$ public boolean supports(Type genericType) -->Line_19 $$ return false[ CD ]
Line_5 $$ if (JAXBElement.class == parameterizedType.getRawType() && parameterizedType.getActualTypeArguments().length == 1) -->Line_6 $$ Type typeArgument = parameterizedType.getActualTypeArguments()[0][ CD ]
Line_3 $$ if (genericType instanceof ParameterizedType) -->Line_5 $$ if (JAXBElement.class == parameterizedType.getRawType() && parameterizedType.getActualTypeArguments().length == 1) [ CD ]
Line_3 $$ if (genericType instanceof ParameterizedType) -->Line_4 $$ ParameterizedType parameterizedType = (ParameterizedType) genericType[ CD ]
Line_11 $$ GenericArrayType arrayType = (GenericArrayType) typeArgument-->Line_12 $$ return (Byte.TYPE == arrayType.getGenericComponentType())[ FD ]
Line_2 $$ public boolean supports(Type genericType) -->Line_3 $$ if (genericType instanceof ParameterizedType) [ FD ]
Line_6 $$ Type typeArgument = parameterizedType.getActualTypeArguments()[0]-->Line_7 $$ if (typeArgument instanceof Class) [ FD ]
Line_10 $$ if (typeArgument instanceof GenericArrayType) -->Line_11 $$ GenericArrayType arrayType = (GenericArrayType) typeArgument[ CD ]
Line_16 $$ Class<?> clazz = (Class<?>) genericType-->Line_17 $$ return supportsInternal(clazz, this.checkForXmlRootElement)[ FD ]
Line_8 $$ Class<?> classArgument = (Class<?>) typeArgument-->Line_9 $$ return (((classArgument.isArray() && Byte.TYPE == classArgument.getComponentType())) || isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) || supportsInternal(classArgument, false))[ FD ]
Line_2 $$ public boolean supports(Type genericType) -->Line_3 $$ if (genericType instanceof ParameterizedType) [ CD ]
Line_7 $$ if (typeArgument instanceof Class) -->Line_10 $$ if (typeArgument instanceof GenericArrayType) [ CD ]
Line_10 $$ if (typeArgument instanceof GenericArrayType) -->Line_12 $$ return (Byte.TYPE == arrayType.getGenericComponentType())[ CD ]
Line_3 $$ if (genericType instanceof ParameterizedType) -->Line_15 $$ if (genericType instanceof Class) [ CD ]
Line_4 $$ ParameterizedType parameterizedType = (ParameterizedType) genericType-->Line_5 $$ if (JAXBElement.class == parameterizedType.getRawType() && parameterizedType.getActualTypeArguments().length == 1) [ FD ]
Line_15 $$ if (genericType instanceof Class) -->Line_16 $$ Class<?> clazz = (Class<?>) genericType[ CD ]
Line_4 $$ ParameterizedType parameterizedType = (ParameterizedType) genericType-->Line_6 $$ Type typeArgument = parameterizedType.getActualTypeArguments()[0][ FD ]
Line_15 $$ if (genericType instanceof Class) -->Line_17 $$ return supportsInternal(clazz, this.checkForXmlRootElement)[ CD ]
Line_6 $$ Type typeArgument = parameterizedType.getActualTypeArguments()[0]-->Line_10 $$ if (typeArgument instanceof GenericArrayType) [ FD ]
Line_7 $$ if (typeArgument instanceof Class) -->Line_8 $$ Class<?> classArgument = (Class<?>) typeArgument[ CD ]
