Line_4 $$ ParameterizedType parameterizedTargetType = (ParameterizedType) targetType-->Line_20 $$ Type targetKeyType = getElementType(parameterizedTargetType, 0)[ FD ]
Line_4 $$ ParameterizedType parameterizedTargetType = (ParameterizedType) targetType-->Line_6 $$ Class<?> rawClass = (Class<?>) parameterizedTargetType.getRawType()[ FD ]
Line_6 $$ Class<?> rawClass = (Class<?>) parameterizedTargetType.getRawType()-->Line_13 $$ if (rawClass.equals(DomainObjectSet.class)) [ FD ]
Line_2 $$ private Object convert(Object value, Type targetType) -->Line_30 $$ if (targetType instanceof Class) [ CD ]
Line_7 $$ if (Iterable.class.isAssignableFrom(rawClass)) -->Line_9 $$ Collection<Object> convertedElements = collectionMapper.createEmptyCollection(rawClass)[ CD ]
Line_19 $$ if (Map.class.isAssignableFrom(rawClass)) -->Line_21 $$ Type targetValueType = getElementType(parameterizedTargetType, 1)[ CD ]
Line_23 $$ for (Map.Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) -->Line_24 $$ convertedElements.put(convert(entry.getKey(), targetKeyType), convert(entry.getValue(), targetValueType))[ FD ]
Line_4 $$ ParameterizedType parameterizedTargetType = (ParameterizedType) targetType-->Line_21 $$ Type targetValueType = getElementType(parameterizedTargetType, 1)[ FD ]
Line_13 $$ if (rawClass.equals(DomainObjectSet.class)) -->Line_16 $$ return convertedElements[ CD ]
Line_30 $$ if (targetType instanceof Class) -->Line_31 $$ if (((Class) targetType).isPrimitive()) [ CD ]
Line_7 $$ if (Iterable.class.isAssignableFrom(rawClass)) -->Line_13 $$ if (rawClass.equals(DomainObjectSet.class)) [ CD ]
Line_6 $$ Class<?> rawClass = (Class<?>) parameterizedTargetType.getRawType()-->Line_9 $$ Collection<Object> convertedElements = collectionMapper.createEmptyCollection(rawClass)[ FD ]
Line_6 $$ Class<?> rawClass = (Class<?>) parameterizedTargetType.getRawType()-->Line_22 $$ Map<Object, Object> convertedElements = collectionMapper.createEmptyMap(rawClass)[ FD ]
Line_3 $$ if (targetType instanceof ParameterizedType) -->Line_4 $$ ParameterizedType parameterizedTargetType = (ParameterizedType) targetType[ CD ]
Line_2 $$ private Object convert(Object value, Type targetType) -->Line_3 $$ if (targetType instanceof ParameterizedType) [ FD ]
Line_20 $$ Type targetKeyType = getElementType(parameterizedTargetType, 0)-->Line_24 $$ convertedElements.put(convert(entry.getKey(), targetKeyType), convert(entry.getValue(), targetValueType))[ FD ]
Line_6 $$ Class<?> rawClass = (Class<?>) parameterizedTargetType.getRawType()-->Line_19 $$ if (Map.class.isAssignableFrom(rawClass)) [ FD ]
Line_21 $$ Type targetValueType = getElementType(parameterizedTargetType, 1)-->Line_24 $$ convertedElements.put(convert(entry.getKey(), targetKeyType), convert(entry.getValue(), targetValueType))[ FD ]
Line_8 $$ Type targetElementType = getElementType(parameterizedTargetType, 0)-->Line_11 $$ convertedElements.add(convert(element, targetElementType))[ FD ]
Line_9 $$ Collection<Object> convertedElements = collectionMapper.createEmptyCollection(rawClass)-->Line_24 $$ convertedElements.put(convert(entry.getKey(), targetKeyType), convert(entry.getValue(), targetValueType))[ FD ]
Line_5 $$ if (parameterizedTargetType.getRawType() instanceof Class) -->Line_6 $$ Class<?> rawClass = (Class<?>) parameterizedTargetType.getRawType()[ CD ]
Line_10 $$ for (Object element : (Iterable<?>) value) -->Line_11 $$ convertedElements.add(convert(element, targetElementType))[ FD ]
Line_19 $$ if (Map.class.isAssignableFrom(rawClass)) -->Line_26 $$ return convertedElements[ CD ]
Line_2 $$ private Object convert(Object value, Type targetType) -->Line_36 $$ throw new UnsupportedOperationException(String.format("Cannot convert object of %s to %s.", value.getClass(), targetType))[ FD ]
Line_7 $$ if (Iterable.class.isAssignableFrom(rawClass)) -->Line_8 $$ Type targetElementType = getElementType(parameterizedTargetType, 0)[ CD ]
Line_4 $$ ParameterizedType parameterizedTargetType = (ParameterizedType) targetType-->Line_8 $$ Type targetElementType = getElementType(parameterizedTargetType, 0)[ FD ]
Line_9 $$ Collection<Object> convertedElements = collectionMapper.createEmptyCollection(rawClass)-->Line_11 $$ convertedElements.add(convert(element, targetElementType))[ FD ]
Line_4 $$ ParameterizedType parameterizedTargetType = (ParameterizedType) targetType-->Line_5 $$ if (parameterizedTargetType.getRawType() instanceof Class) [ FD ]
Line_19 $$ if (Map.class.isAssignableFrom(rawClass)) -->Line_20 $$ Type targetKeyType = getElementType(parameterizedTargetType, 0)[ CD ]
Line_30 $$ if (targetType instanceof Class) -->Line_34 $$ return adapt((Class) targetType, value, mapping)[ CD ]
Line_31 $$ if (((Class) targetType).isPrimitive()) -->Line_32 $$ return value[ CD ]
Line_5 $$ if (parameterizedTargetType.getRawType() instanceof Class) -->Line_7 $$ if (Iterable.class.isAssignableFrom(rawClass)) [ CD ]
Line_3 $$ if (targetType instanceof ParameterizedType) -->Line_5 $$ if (parameterizedTargetType.getRawType() instanceof Class) [ CD ]
Line_19 $$ if (Map.class.isAssignableFrom(rawClass)) -->Line_22 $$ Map<Object, Object> convertedElements = collectionMapper.createEmptyMap(rawClass)[ CD ]
Line_5 $$ if (parameterizedTargetType.getRawType() instanceof Class) -->Line_19 $$ if (Map.class.isAssignableFrom(rawClass)) [ CD ]
Line_13 $$ if (rawClass.equals(DomainObjectSet.class)) -->Line_14 $$ return new ImmutableDomainObjectSet(convertedElements)[ CD ]
Line_2 $$ private Object convert(Object value, Type targetType) -->Line_3 $$ if (targetType instanceof ParameterizedType) [ CD ]
Line_2 $$ private Object convert(Object value, Type targetType) -->Line_30 $$ if (targetType instanceof Class) [ FD ]
Line_2 $$ private Object convert(Object value, Type targetType) -->Line_34 $$ return adapt((Class) targetType, value, mapping)[ FD ]
Line_6 $$ Class<?> rawClass = (Class<?>) parameterizedTargetType.getRawType()-->Line_7 $$ if (Iterable.class.isAssignableFrom(rawClass)) [ FD ]
