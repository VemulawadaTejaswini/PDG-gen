Line_2 $$ public Object createValue(Type type, final FList<Type> types, List<Type> elementTypes) throws Exception -->Line_5 $$ FList<Type> processedTypes = types.prepend(type)[ CD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_7 $$ if (String.class.isAssignableFrom(valueClass)) [ FD ]
Line_20 $$ if (Map.class.isAssignableFrom(valueClass) && type instanceof ParameterizedType) -->Line_22 $$ if (valueClass.isArray()) [ CD ]
Line_15 $$ if (valueClass.isEnum()) -->Line_16 $$ final Object[] constants = valueClass.getEnumConstants()[ CD ]
Line_2 $$ public Object createValue(Type type, final FList<Type> types, List<Type> elementTypes) throws Exception -->Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()[ CD ]
Line_9 $$ if (byte.class.isAssignableFrom(valueClass) || Byte.class.isAssignableFrom(valueClass) || short.class.isAssignableFrom(valueClass) || Short.class.isAssignableFrom(valueClass) || int.class.isAssignableFrom(valueClass) || Integer.class.isAssignableFrom(valueClass) || long.class.isAssignableFrom(valueClass) || Long.class.isAssignableFrom(valueClass)) -->Line_10 $$ return myNum++ % 127[ CD ]
Line_22 $$ if (valueClass.isArray()) -->Line_24 $$ if (Element.class.isAssignableFrom(valueClass)) [ CD ]
Line_15 $$ if (valueClass.isEnum()) -->Line_18 $$ if (Collection.class.isAssignableFrom(valueClass) && type instanceof ParameterizedType) [ CD ]
Line_5 $$ FList<Type> processedTypes = types.prepend(type)-->Line_27 $$ return createObject(valueClass, processedTypes)[ FD ]
Line_2 $$ public Object createValue(Type type, final FList<Type> types, List<Type> elementTypes) throws Exception -->Line_3 $$ if (types.contains(type))[ CD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_9 $$ if (byte.class.isAssignableFrom(valueClass) || Byte.class.isAssignableFrom(valueClass) || short.class.isAssignableFrom(valueClass) || Short.class.isAssignableFrom(valueClass) || int.class.isAssignableFrom(valueClass) || Integer.class.isAssignableFrom(valueClass) || long.class.isAssignableFrom(valueClass) || Long.class.isAssignableFrom(valueClass)) [ FD ]
Line_11 $$ if (double.class.isAssignableFrom(valueClass) || Double.class.isAssignableFrom(valueClass) || float.class.isAssignableFrom(valueClass) || Float.class.isAssignableFrom(valueClass)) -->Line_13 $$ if (boolean.class.isAssignableFrom(valueClass) || Boolean.class.isAssignableFrom(valueClass)) [ CD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_23 $$ return createArray(valueClass, processedTypes, elementTypes)[ FD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_18 $$ if (Collection.class.isAssignableFrom(valueClass) && type instanceof ParameterizedType) [ FD ]
Line_2 $$ public Object createValue(Type type, final FList<Type> types, List<Type> elementTypes) throws Exception -->Line_19 $$ return createCollection(valueClass, (ParameterizedType) type, processedTypes, elementTypes)[ FD ]
Line_5 $$ FList<Type> processedTypes = types.prepend(type)-->Line_21 $$ return createMap((ParameterizedType) type, processedTypes)[ FD ]
Line_13 $$ if (boolean.class.isAssignableFrom(valueClass) || Boolean.class.isAssignableFrom(valueClass)) -->Line_15 $$ if (valueClass.isEnum()) [ CD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_19 $$ return createCollection(valueClass, (ParameterizedType) type, processedTypes, elementTypes)[ FD ]
Line_2 $$ public Object createValue(Type type, final FList<Type> types, List<Type> elementTypes) throws Exception -->Line_7 $$ if (String.class.isAssignableFrom(valueClass)) [ CD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_11 $$ if (double.class.isAssignableFrom(valueClass) || Double.class.isAssignableFrom(valueClass) || float.class.isAssignableFrom(valueClass) || Float.class.isAssignableFrom(valueClass)) [ FD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_20 $$ if (Map.class.isAssignableFrom(valueClass) && type instanceof ParameterizedType) [ FD ]
Line_5 $$ FList<Type> processedTypes = types.prepend(type)-->Line_23 $$ return createArray(valueClass, processedTypes, elementTypes)[ FD ]
Line_13 $$ if (boolean.class.isAssignableFrom(valueClass) || Boolean.class.isAssignableFrom(valueClass)) -->Line_14 $$ return (myNum++ % 2) == 0[ CD ]
Line_5 $$ FList<Type> processedTypes = types.prepend(type)-->Line_19 $$ return createCollection(valueClass, (ParameterizedType) type, processedTypes, elementTypes)[ FD ]
Line_11 $$ if (double.class.isAssignableFrom(valueClass) || Double.class.isAssignableFrom(valueClass) || float.class.isAssignableFrom(valueClass) || Float.class.isAssignableFrom(valueClass)) -->Line_12 $$ return 0.5 + myNum++[ CD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_27 $$ return createObject(valueClass, processedTypes)[ FD ]
Line_24 $$ if (Element.class.isAssignableFrom(valueClass)) -->Line_27 $$ return createObject(valueClass, processedTypes)[ CD ]
Line_3 $$ if (types.contains(type))-->Line_4 $$ return null[ CD ]
Line_2 $$ public Object createValue(Type type, final FList<Type> types, List<Type> elementTypes) throws Exception -->Line_3 $$ if (types.contains(type))[ FD ]
Line_15 $$ if (valueClass.isEnum()) -->Line_17 $$ return constants[(myNum++) % constants.length][ CD ]
Line_18 $$ if (Collection.class.isAssignableFrom(valueClass) && type instanceof ParameterizedType) -->Line_20 $$ if (Map.class.isAssignableFrom(valueClass) && type instanceof ParameterizedType) [ CD ]
Line_20 $$ if (Map.class.isAssignableFrom(valueClass) && type instanceof ParameterizedType) -->Line_21 $$ return createMap((ParameterizedType) type, processedTypes)[ CD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_24 $$ if (Element.class.isAssignableFrom(valueClass)) [ FD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_16 $$ final Object[] constants = valueClass.getEnumConstants()[ FD ]
Line_2 $$ public Object createValue(Type type, final FList<Type> types, List<Type> elementTypes) throws Exception -->Line_5 $$ FList<Type> processedTypes = types.prepend(type)[ FD ]
Line_7 $$ if (String.class.isAssignableFrom(valueClass)) -->Line_9 $$ if (byte.class.isAssignableFrom(valueClass) || Byte.class.isAssignableFrom(valueClass) || short.class.isAssignableFrom(valueClass) || Short.class.isAssignableFrom(valueClass) || int.class.isAssignableFrom(valueClass) || Integer.class.isAssignableFrom(valueClass) || long.class.isAssignableFrom(valueClass) || Long.class.isAssignableFrom(valueClass)) [ CD ]
Line_2 $$ public Object createValue(Type type, final FList<Type> types, List<Type> elementTypes) throws Exception -->Line_23 $$ return createArray(valueClass, processedTypes, elementTypes)[ FD ]
Line_7 $$ if (String.class.isAssignableFrom(valueClass)) -->Line_8 $$ return "value" + (myNum++)[ CD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_15 $$ if (valueClass.isEnum()) [ FD ]
Line_22 $$ if (valueClass.isArray()) -->Line_23 $$ return createArray(valueClass, processedTypes, elementTypes)[ CD ]
Line_24 $$ if (Element.class.isAssignableFrom(valueClass)) -->Line_25 $$ return new Element("customElement" + (myNum++)).setAttribute("attribute", "value" + (myNum++)).addContent(new Element("child" + (myNum++)))[ CD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_22 $$ if (valueClass.isArray()) [ FD ]
Line_9 $$ if (byte.class.isAssignableFrom(valueClass) || Byte.class.isAssignableFrom(valueClass) || short.class.isAssignableFrom(valueClass) || Short.class.isAssignableFrom(valueClass) || int.class.isAssignableFrom(valueClass) || Integer.class.isAssignableFrom(valueClass) || long.class.isAssignableFrom(valueClass) || Long.class.isAssignableFrom(valueClass)) -->Line_11 $$ if (double.class.isAssignableFrom(valueClass) || Double.class.isAssignableFrom(valueClass) || float.class.isAssignableFrom(valueClass) || Float.class.isAssignableFrom(valueClass)) [ CD ]
Line_18 $$ if (Collection.class.isAssignableFrom(valueClass) && type instanceof ParameterizedType) -->Line_19 $$ return createCollection(valueClass, (ParameterizedType) type, processedTypes, elementTypes)[ CD ]
Line_6 $$ final Class<?> valueClass = type instanceof Class ? (Class<Object>) type : (Class<Object>) ((ParameterizedType) type).getRawType()-->Line_13 $$ if (boolean.class.isAssignableFrom(valueClass) || Boolean.class.isAssignableFrom(valueClass)) [ FD ]
