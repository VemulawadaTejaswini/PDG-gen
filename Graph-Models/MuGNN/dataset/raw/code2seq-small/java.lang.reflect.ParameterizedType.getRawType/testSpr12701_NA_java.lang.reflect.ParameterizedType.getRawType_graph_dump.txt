Line_2 $$ public void testSpr12701() throws Exception -->Line_5 $$ assertThat(type, is(instanceOf(ParameterizedType.class)))[ CD ]
Line_4 $$ Type type = resolvableType.getType()-->Line_5 $$ assertThat(type, is(instanceOf(ParameterizedType.class)))[ FD ]
Line_2 $$ public void testSpr12701() throws Exception -->Line_4 $$ Type type = resolvableType.getType()[ CD ]
Line_3 $$ ResolvableType resolvableType = ResolvableType.forClassWithGenerics(Callable.class, String.class)-->Line_4 $$ Type type = resolvableType.getType()[ FD ]
Line_2 $$ public void testSpr12701() throws Exception -->Line_3 $$ ResolvableType resolvableType = ResolvableType.forClassWithGenerics(Callable.class, String.class)[ CD ]
Line_2 $$ public void testSpr12701() throws Exception -->Line_6 $$ assertThat(((ParameterizedType) type).getRawType(), is(equalTo(Callable.class)))[ CD ]
Line_2 $$ public void testSpr12701() throws Exception -->Line_8 $$ assertThat(((ParameterizedType) type).getActualTypeArguments()[0], is(equalTo(String.class)))[ CD ]
Line_2 $$ public void testSpr12701() throws Exception -->Line_7 $$ assertThat(((ParameterizedType) type).getActualTypeArguments().length, is(equalTo(1)))[ CD ]
