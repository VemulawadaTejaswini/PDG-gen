Line_2 $$ public T read(Type type, Class<?> contextClass, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_5 $$ Class<?> elementClass = (Class<?>) parameterizedType.getActualTypeArguments()[0][ CD ]
Line_4 $$ T result = createCollection((Class<?>) parameterizedType.getRawType())-->Line_14 $$ result.add(unmarshaller.unmarshal(streamReader, elementClass).getValue())[ FD ]
Line_5 $$ Class<?> elementClass = (Class<?>) parameterizedType.getActualTypeArguments()[0]-->Line_14 $$ result.add(unmarshaller.unmarshal(streamReader, elementClass).getValue())[ FD ]
Line_5 $$ Class<?> elementClass = (Class<?>) parameterizedType.getActualTypeArguments()[0]-->Line_13 $$ if (elementClass.isAnnotationPresent(XmlType.class)) [ FD ]
Line_9 $$ int event = moveToFirstChildOfRootElement(streamReader)-->Line_18 $$ event = moveToNextElement(streamReader)[ FD ]
Line_5 $$ Class<?> elementClass = (Class<?>) parameterizedType.getActualTypeArguments()[0]-->Line_7 $$ Unmarshaller unmarshaller = createUnmarshaller(elementClass)[ FD ]
Line_5 $$ Class<?> elementClass = (Class<?>) parameterizedType.getActualTypeArguments()[0]-->Line_11 $$ if (elementClass.isAnnotationPresent(XmlRootElement.class)) [ FD ]
Line_18 $$ event = moveToNextElement(streamReader)-->Line_10 $$ while (event != XMLStreamReader.END_DOCUMENT) [ FD ]
Line_2 $$ public T read(Type type, Class<?> contextClass, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_3 $$ ParameterizedType parameterizedType = (ParameterizedType) type[ CD ]
Line_4 $$ T result = createCollection((Class<?>) parameterizedType.getRawType())-->Line_12 $$ result.add(unmarshaller.unmarshal(streamReader))[ FD ]
Line_9 $$ int event = moveToFirstChildOfRootElement(streamReader)-->Line_10 $$ while (event != XMLStreamReader.END_DOCUMENT) [ FD ]
Line_7 $$ Unmarshaller unmarshaller = createUnmarshaller(elementClass)-->Line_14 $$ result.add(unmarshaller.unmarshal(streamReader, elementClass).getValue())[ FD ]
Line_8 $$ XMLStreamReader streamReader = this.inputFactory.createXMLStreamReader(inputMessage.getBody())-->Line_14 $$ result.add(unmarshaller.unmarshal(streamReader, elementClass).getValue())[ FD ]
Line_8 $$ XMLStreamReader streamReader = this.inputFactory.createXMLStreamReader(inputMessage.getBody())-->Line_18 $$ event = moveToNextElement(streamReader)[ FD ]
Line_8 $$ XMLStreamReader streamReader = this.inputFactory.createXMLStreamReader(inputMessage.getBody())-->Line_12 $$ result.add(unmarshaller.unmarshal(streamReader))[ FD ]
Line_3 $$ ParameterizedType parameterizedType = (ParameterizedType) type-->Line_4 $$ T result = createCollection((Class<?>) parameterizedType.getRawType())[ FD ]
Line_3 $$ ParameterizedType parameterizedType = (ParameterizedType) type-->Line_5 $$ Class<?> elementClass = (Class<?>) parameterizedType.getActualTypeArguments()[0][ FD ]
Line_11 $$ if (elementClass.isAnnotationPresent(XmlRootElement.class)) -->Line_13 $$ if (elementClass.isAnnotationPresent(XmlType.class)) [ CD ]
Line_2 $$ public T read(Type type, Class<?> contextClass, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_4 $$ T result = createCollection((Class<?>) parameterizedType.getRawType())[ CD ]
Line_10 $$ while (event != XMLStreamReader.END_DOCUMENT) -->Line_11 $$ if (elementClass.isAnnotationPresent(XmlRootElement.class)) [ CD ]
Line_8 $$ XMLStreamReader streamReader = this.inputFactory.createXMLStreamReader(inputMessage.getBody())-->Line_9 $$ int event = moveToFirstChildOfRootElement(streamReader)[ FD ]
Line_13 $$ if (elementClass.isAnnotationPresent(XmlType.class)) -->Line_14 $$ result.add(unmarshaller.unmarshal(streamReader, elementClass).getValue())[ CD ]
Line_11 $$ if (elementClass.isAnnotationPresent(XmlRootElement.class)) -->Line_12 $$ result.add(unmarshaller.unmarshal(streamReader))[ CD ]
Line_10 $$ while (event != XMLStreamReader.END_DOCUMENT) -->Line_18 $$ event = moveToNextElement(streamReader)[ CD ]
Line_2 $$ public T read(Type type, Class<?> contextClass, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_8 $$ XMLStreamReader streamReader = this.inputFactory.createXMLStreamReader(inputMessage.getBody())[ FD ]
Line_7 $$ Unmarshaller unmarshaller = createUnmarshaller(elementClass)-->Line_12 $$ result.add(unmarshaller.unmarshal(streamReader))[ FD ]
