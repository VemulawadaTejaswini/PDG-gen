Line_17 $$ final List<?> value = (List<?>) eachValue-->Line_18 $$ System.out.printf(format, value.toArray(new Object[value.size()]))[ FD ]
Line_6 $$ if (snapshotDetails.isEmpty()) -->Line_7 $$ System.out.printf("There are no snapshots")[ CD ]
Line_14 $$ for (final Map.Entry<String, TabularData> snapshotDetail : snapshotDetails.entrySet()) -->Line_15 $$ Set<?> values = snapshotDetail.getValue().keySet()[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_5 $$ final Map<String, TabularData> snapshotDetails = probe.getSnapshotDetails()[ FD ]
Line_5 $$ final Map<String, TabularData> snapshotDetails = probe.getSnapshotDetails()-->Line_12 $$ final List<String> indexNames = snapshotDetails.entrySet().iterator().next().getValue().getTabularType().getIndexNames()[ FD ]
Line_11 $$ final String format = "%-20s%-29s%-29s%-19s%-19s%n"-->Line_18 $$ System.out.printf(format, value.toArray(new Object[value.size()]))[ FD ]
Line_5 $$ final Map<String, TabularData> snapshotDetails = probe.getSnapshotDetails()-->Line_6 $$ if (snapshotDetails.isEmpty()) [ FD ]
Line_6 $$ if (snapshotDetails.isEmpty()) -->Line_8 $$ return[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_10 $$ final long trueSnapshotsSize = probe.trueSnapshotsSize()[ FD ]
Line_10 $$ final long trueSnapshotsSize = probe.trueSnapshotsSize()-->Line_21 $$ System.out.println("\nTotal TrueDiskSpaceUsed: " + FileUtils.stringifyFileSize(trueSnapshotsSize) + "\n")[ FD ]
Line_11 $$ final String format = "%-20s%-29s%-29s%-19s%-19s%n"-->Line_13 $$ System.out.printf(format, (Object[]) indexNames.toArray(new String[indexNames.size()]))[ FD ]
Line_5 $$ final Map<String, TabularData> snapshotDetails = probe.getSnapshotDetails()-->Line_14 $$ for (final Map.Entry<String, TabularData> snapshotDetail : snapshotDetails.entrySet()) [ FD ]
Line_12 $$ final List<String> indexNames = snapshotDetails.entrySet().iterator().next().getValue().getTabularType().getIndexNames()-->Line_13 $$ System.out.printf(format, (Object[]) indexNames.toArray(new String[indexNames.size()]))[ FD ]
