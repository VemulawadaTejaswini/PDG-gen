Line_7 $$ if (Boolean.valueOf(myHint).booleanValue()) -->Line_9 $$ query.forEach(new Processor<Pair<PsiMethod, PsiMethod>>() [ CD ]
Line_18 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_20 $$ SafeDeleteHandler.invoke(project, PsiUtilCore.toPsiElementArray(psiElements), false)[ CD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_18 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ FD ]
Line_3 $$ final PsiMethod psiMethod = PsiTreeUtil.getParentOfType(descriptor.getPsiElement(), PsiMethod.class, false)-->Line_8 $$ final Query<Pair<PsiMethod, PsiMethod>> query = AllOverridingMethodsSearch.search(psiMethod.getContainingClass())[ FD ]
Line_11 $$ if (pair.first == psiMethod) -->Line_12 $$ psiElements.add(pair.second)[ CD ]
Line_3 $$ final PsiMethod psiMethod = PsiTreeUtil.getParentOfType(descriptor.getPsiElement(), PsiMethod.class, false)-->Line_6 $$ psiElements.add(psiMethod)[ FD ]
Line_4 $$ if (psiMethod != null) -->Line_7 $$ if (Boolean.valueOf(myHint).booleanValue()) [ CD ]
Line_5 $$ final List<PsiElement> psiElements = new ArrayList<PsiElement>()-->Line_20 $$ SafeDeleteHandler.invoke(project, PsiUtilCore.toPsiElementArray(psiElements), false)[ FD ]
Line_3 $$ final PsiMethod psiMethod = PsiTreeUtil.getParentOfType(descriptor.getPsiElement(), PsiMethod.class, false)-->Line_4 $$ if (psiMethod != null) [ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_3 $$ final PsiMethod psiMethod = PsiTreeUtil.getParentOfType(descriptor.getPsiElement(), PsiMethod.class, false)[ CD ]
Line_9 $$ query.forEach(new Processor<Pair<PsiMethod, PsiMethod>>() -->Line_14 $$ return true[ CD ]
Line_4 $$ if (psiMethod != null) -->Line_6 $$ psiElements.add(psiMethod)[ CD ]
Line_3 $$ final PsiMethod psiMethod = PsiTreeUtil.getParentOfType(descriptor.getPsiElement(), PsiMethod.class, false)-->Line_11 $$ if (pair.first == psiMethod) [ FD ]
Line_4 $$ if (psiMethod != null) -->Line_18 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_3 $$ final PsiMethod psiMethod = PsiTreeUtil.getParentOfType(descriptor.getPsiElement(), PsiMethod.class, false)[ FD ]
Line_5 $$ final List<PsiElement> psiElements = new ArrayList<PsiElement>()-->Line_6 $$ psiElements.add(psiMethod)[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_4 $$ if (psiMethod != null) [ CD ]
Line_8 $$ final Query<Pair<PsiMethod, PsiMethod>> query = AllOverridingMethodsSearch.search(psiMethod.getContainingClass())-->Line_9 $$ query.forEach(new Processor<Pair<PsiMethod, PsiMethod>>() [ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_20 $$ SafeDeleteHandler.invoke(project, PsiUtilCore.toPsiElementArray(psiElements), false)[ FD ]
Line_5 $$ final List<PsiElement> psiElements = new ArrayList<PsiElement>()-->Line_12 $$ psiElements.add(pair.second)[ FD ]
Line_7 $$ if (Boolean.valueOf(myHint).booleanValue()) -->Line_8 $$ final Query<Pair<PsiMethod, PsiMethod>> query = AllOverridingMethodsSearch.search(psiMethod.getContainingClass())[ CD ]
Line_4 $$ if (psiMethod != null) -->Line_5 $$ final List<PsiElement> psiElements = new ArrayList<PsiElement>()[ CD ]
Line_9 $$ query.forEach(new Processor<Pair<PsiMethod, PsiMethod>>() -->Line_11 $$ if (pair.first == psiMethod) [ CD ]
