Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_7 $$ String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()[ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_40 $$ return unitInfo[ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_28 $$ String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_7 $$ String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()[ FD ]
Line_11 $$ String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)-->Line_12 $$ if (StringUtils.hasText(jtaDataSource)) [ FD ]
Line_25 $$ String excludeText = DomUtils.getTextValue(excludeUnlistedClasses)-->Line_26 $$ unitInfo.setExcludeUnlistedClasses(!StringUtils.hasText(excludeText) || Boolean.valueOf(excludeText))[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_38 $$ parseMappingFiles(persistenceUnit, unitInfo)[ CD ]
Line_32 $$ String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)-->Line_34 $$ unitInfo.setValidationMode(ValidationMode.valueOf(validationMode))[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_29 $$ if (StringUtils.hasText(cacheMode)) [ CD ]
Line_8 $$ if (StringUtils.hasText(txType)) -->Line_9 $$ unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))[ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_39 $$ parseJarFiles(persistenceUnit, unitInfo)[ CD ]
Line_7 $$ String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()-->Line_9 $$ unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_5 $$ unitInfo.setPersistenceUnitRootUrl(rootUrl)[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_11 $$ String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)[ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_8 $$ if (StringUtils.hasText(txType)) [ CD ]
Line_19 $$ String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)-->Line_21 $$ unitInfo.setPersistenceProviderClassName(provider.trim())[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_15 $$ String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_24 $$ if (excludeUnlistedClasses != null) [ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_32 $$ String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)[ CD ]
Line_20 $$ if (StringUtils.hasText(provider)) -->Line_21 $$ unitInfo.setPersistenceProviderClassName(provider.trim())[ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_39 $$ parseJarFiles(persistenceUnit, unitInfo)[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_19 $$ String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)[ FD ]
Line_11 $$ String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)-->Line_13 $$ unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_23 $$ Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)[ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_11 $$ String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)[ FD ]
Line_24 $$ if (excludeUnlistedClasses != null) -->Line_26 $$ unitInfo.setExcludeUnlistedClasses(!StringUtils.hasText(excludeText) || Boolean.valueOf(excludeText))[ CD ]
Line_28 $$ String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)-->Line_29 $$ if (StringUtils.hasText(cacheMode)) [ FD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_9 $$ unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))[ FD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_5 $$ unitInfo.setPersistenceUnitRootUrl(rootUrl)[ FD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_21 $$ unitInfo.setPersistenceProviderClassName(provider.trim())[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_37 $$ parseManagedClasses(persistenceUnit, unitInfo)[ FD ]
Line_28 $$ String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)-->Line_30 $$ unitInfo.setSharedCacheMode(SharedCacheMode.valueOf(cacheMode))[ FD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_6 $$ unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())[ FD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_39 $$ parseJarFiles(persistenceUnit, unitInfo)[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_38 $$ parseMappingFiles(persistenceUnit, unitInfo)[ FD ]
Line_29 $$ if (StringUtils.hasText(cacheMode)) -->Line_30 $$ unitInfo.setSharedCacheMode(SharedCacheMode.valueOf(cacheMode))[ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()[ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_5 $$ unitInfo.setPersistenceUnitRootUrl(rootUrl)[ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_15 $$ String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)[ CD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_17 $$ unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_23 $$ Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)[ FD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_4 $$ unitInfo.setPersistenceXMLSchemaVersion(version)[ FD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_26 $$ unitInfo.setExcludeUnlistedClasses(!StringUtils.hasText(excludeText) || Boolean.valueOf(excludeText))[ FD ]
Line_15 $$ String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)-->Line_16 $$ if (StringUtils.hasText(nonJtaDataSource)) [ FD ]
Line_33 $$ if (StringUtils.hasText(validationMode)) -->Line_34 $$ unitInfo.setValidationMode(ValidationMode.valueOf(validationMode))[ CD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_36 $$ parseProperties(persistenceUnit, unitInfo)[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_28 $$ String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)[ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_16 $$ if (StringUtils.hasText(nonJtaDataSource)) [ CD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_37 $$ parseManagedClasses(persistenceUnit, unitInfo)[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_4 $$ unitInfo.setPersistenceXMLSchemaVersion(version)[ FD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_13 $$ unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_19 $$ String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)[ CD ]
Line_12 $$ if (StringUtils.hasText(jtaDataSource)) -->Line_13 $$ unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))[ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_6 $$ unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())[ CD ]
Line_23 $$ Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)-->Line_24 $$ if (excludeUnlistedClasses != null) [ FD ]
Line_32 $$ String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)-->Line_33 $$ if (StringUtils.hasText(validationMode)) [ FD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_34 $$ unitInfo.setValidationMode(ValidationMode.valueOf(validationMode))[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_36 $$ parseProperties(persistenceUnit, unitInfo)[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_20 $$ if (StringUtils.hasText(provider)) [ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_37 $$ parseManagedClasses(persistenceUnit, unitInfo)[ CD ]
Line_19 $$ String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)-->Line_20 $$ if (StringUtils.hasText(provider)) [ FD ]
Line_23 $$ Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)-->Line_25 $$ String excludeText = DomUtils.getTextValue(excludeUnlistedClasses)[ FD ]
Line_24 $$ if (excludeUnlistedClasses != null) -->Line_25 $$ String excludeText = DomUtils.getTextValue(excludeUnlistedClasses)[ CD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_30 $$ unitInfo.setSharedCacheMode(SharedCacheMode.valueOf(cacheMode))[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_33 $$ if (StringUtils.hasText(validationMode)) [ CD ]
Line_15 $$ String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)-->Line_17 $$ unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_12 $$ if (StringUtils.hasText(jtaDataSource)) [ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_36 $$ parseProperties(persistenceUnit, unitInfo)[ CD ]
Line_16 $$ if (StringUtils.hasText(nonJtaDataSource)) -->Line_17 $$ unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))[ CD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_6 $$ unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_4 $$ unitInfo.setPersistenceXMLSchemaVersion(version)[ CD ]
Line_3 $$ SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()-->Line_38 $$ parseMappingFiles(persistenceUnit, unitInfo)[ FD ]
Line_2 $$ protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) throws IOException -->Line_32 $$ String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)[ FD ]
Line_7 $$ String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()-->Line_8 $$ if (StringUtils.hasText(txType)) [ FD ]
