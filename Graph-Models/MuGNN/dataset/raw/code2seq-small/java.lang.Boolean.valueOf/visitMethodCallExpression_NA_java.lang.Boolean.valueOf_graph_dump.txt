Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_30 $$ registerMethodCallError(expression, Boolean.valueOf(count > 1))[ FD ]
Line_7 $$ final PsiExpressionList argumentList = expression.getArgumentList()-->Line_8 $$ final PsiExpression formatArgument = FormatUtils.getFormatArgument(argumentList)[ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_27 $$ if (count == 0) [ CD ]
Line_17 $$ int count = 0-->Line_27 $$ if (count == 0) [ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_8 $$ final PsiExpression formatArgument = FormatUtils.getFormatArgument(argumentList)[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_12 $$ if (!(formatArgument instanceof PsiPolyadicExpression)) [ CD ]
Line_17 $$ int count = 0-->Line_23 $$ if (count > 1) [ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_17 $$ int count = 0[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_9 $$ if (!ExpressionUtils.hasStringType(formatArgument)) [ CD ]
Line_4 $$ if (!FormatUtils.isFormatCall(expression)) -->Line_5 $$ return[ CD ]
Line_17 $$ int count = 0-->Line_22 $$ count++[ FD ]
Line_8 $$ final PsiExpression formatArgument = FormatUtils.getFormatArgument(argumentList)-->Line_9 $$ if (!ExpressionUtils.hasStringType(formatArgument)) [ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_30 $$ registerMethodCallError(expression, Boolean.valueOf(count > 1))[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_3 $$ super.visitMethodCallExpression(expression)[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_7 $$ final PsiExpressionList argumentList = expression.getArgumentList()[ CD ]
Line_9 $$ if (!ExpressionUtils.hasStringType(formatArgument)) -->Line_10 $$ return[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_3 $$ super.visitMethodCallExpression(expression)[ FD ]
Line_27 $$ if (count == 0) -->Line_28 $$ return[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_15 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) formatArgument[ CD ]
Line_12 $$ if (!(formatArgument instanceof PsiPolyadicExpression)) -->Line_13 $$ return[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_4 $$ if (!FormatUtils.isFormatCall(expression)) [ CD ]
Line_15 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) formatArgument-->Line_16 $$ final PsiExpression[] operands = polyadicExpression.getOperands()[ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_7 $$ final PsiExpressionList argumentList = expression.getArgumentList()[ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_16 $$ final PsiExpression[] operands = polyadicExpression.getOperands()[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_4 $$ if (!FormatUtils.isFormatCall(expression)) [ FD ]
