Line_9 $$ type = getClass(className)-->Line_75 $$ Collection result = type.isInterface() ? new ArrayList() : (Collection) newInstance(type)[ FD ]
Line_9 $$ type = getClass(className)-->Line_80 $$ Class componentType = type.getComponentType()[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_18 $$ if (type == null) [ FD ]
Line_19 $$ if (defaultSerializer != null)-->Line_20 $$ return (T) defaultSerializer.read(this, jsonData, type)[ CD ]
Line_49 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_71 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.addLast(readValue(elementType, null, child))[ FD ]
Line_119 $$ String string = jsonData.asString()-->Line_126 $$ return (T) Float.valueOf(string)[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_118 $$ if (jsonData.isString()) [ FD ]
Line_64 $$ if (ClassReflection.isAssignableFrom(Array.class, type)) -->Line_66 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_82 $$ elementType = componentType[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_79 $$ if (type.isArray()) [ FD ]
Line_139 $$ if (type == char.class || type == Character.class)-->Line_140 $$ return (T) (Character) string.charAt(0)[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_61 $$ if (jsonData.isArray()) [ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_63 $$ type = (Class<T>) Array.class[ FD ]
Line_44 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_49 $$ result.put(child.name(), readValue(elementType, null, child))[ FD ]
Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_71 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.addLast(readValue(elementType, null, child))[ FD ]
Line_79 $$ if (type.isArray()) -->Line_86 $$ return (T) result[ CD ]
Line_71 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.addLast(readValue(elementType, null, child))-->Line_76 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))[ FD ]
Line_108 $$ jsonData = new JsonValue(jsonData.asString())-->Line_113 $$ return (T) (Boolean) jsonData.asBoolean()[ FD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_151 $$ throw new SerializationException("Unable to convert value to required type: " + jsonData + " (" + type.getName() + ")")[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_49 $$ result.put(child.name(), readValue(elementType, null, child))[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_99 $$ return (T) (Double) jsonData.asDouble()[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_3 $$ if (jsonData == null)[ FD ]
Line_9 $$ type = getClass(className)-->Line_79 $$ if (type.isArray()) [ FD ]
Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_85 $$ ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_92 $$ if (type == null || type == float.class || type == Float.class)-->Line_93 $$ return (T) (Float) jsonData.asFloat()[ CD ]
Line_49 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_76 $$ result.add(readValue(elementType, null, child))[ FD ]
Line_33 $$ if (object instanceof Serializable) -->Line_34 $$ ((Serializable) object).read(this, jsonData)[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_80 $$ Class componentType = type.getComponentType()[ FD ]
Line_56 $$ if (type != null) -->Line_58 $$ if (serializer != null)[ CD ]
Line_9 $$ type = getClass(className)-->Line_142 $$ Enum[] constants = (Enum[]) type.getEnumConstants()[ FD ]
Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_49 $$ result.put(child.name(), readValue(elementType, null, child))[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_63 $$ type = (Class<T>) Array.class[ FD ]
Line_127 $$ if (type == long.class || type == Long.class)-->Line_128 $$ return (T) Long.valueOf(string)[ CD ]
Line_69 $$ if (ClassReflection.isAssignableFrom(Queue.class, type)) -->Line_71 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.addLast(readValue(elementType, null, child))[ CD ]
Line_44 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_71 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.addLast(readValue(elementType, null, child))[ FD ]
Line_74 $$ if (ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_76 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))[ CD ]
Line_56 $$ if (type != null) -->Line_57 $$ Serializer serializer = classToSerializer.get(type)[ CD ]
Line_38 $$ ObjectMap result = (ObjectMap) object-->Line_71 $$ result.addLast(readValue(elementType, null, child))[ FD ]
Line_76 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))-->Line_85 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_26 $$ Serializer serializer = classToSerializer.get(type)[ CD ]
Line_119 $$ String string = jsonData.asString()-->Line_130 $$ return (T) Double.valueOf(string)[ FD ]
Line_71 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.addLast(readValue(elementType, null, child))-->Line_85 $$ ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_9 $$ type = getClass(className)-->Line_88 $$ throw new SerializationException("Unable to convert value to required type: " + jsonData + " (" + type.getName() + ")")[ FD ]
Line_119 $$ String string = jsonData.asString()-->Line_132 $$ return (T) Short.valueOf(string)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_103 $$ return (T) (Short) jsonData.asShort()[ FD ]
Line_79 $$ if (type.isArray()) -->Line_84 $$ int i = 0[ CD ]
Line_84 $$ int i = 0-->Line_143 $$ for (int i = 0, n = constants.length; i < n; i++) [ FD ]
Line_32 $$ Object object = newInstance(type)-->Line_47 $$ if (object instanceof Map) [ FD ]
Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_37 $$ if (object instanceof ObjectMap) [ CD ]
Line_79 $$ if (type.isArray()) -->Line_80 $$ Class componentType = type.getComponentType()[ CD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_100 $$ if (type == String.class)[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_59 $$ return (T) serializer.read(this, jsonData, type)[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_30 $$ return readValue("value", type, jsonData)[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_28 $$ return (T) serializer.read(this, jsonData, type)[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_103 $$ return (T) (Short) jsonData.asShort()[ FD ]
Line_37 $$ if (object instanceof ObjectMap) -->Line_40 $$ return (T) result[ CD ]
Line_81 $$ if (elementType == null)-->Line_82 $$ elementType = componentType[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_3 $$ if (jsonData == null)[ CD ]
Line_71 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.addLast(readValue(elementType, null, child))-->Line_85 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_20 $$ return (T) defaultSerializer.read(this, jsonData, type)[ FD ]
Line_49 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_85 $$ ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_32 $$ Object object = newInstance(type)-->Line_52 $$ readFields(object, jsonData)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_116 $$ jsonData = new JsonValue(jsonData.asString())[ FD ]
Line_44 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_85 $$ ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_9 $$ type = getClass(className)-->Line_149 $$ if (type == CharSequence.class)[ FD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_65 $$ Array result = type == Array.class ? new Array() : (Array) newInstance(type)[ FD ]
Line_44 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_66 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))[ FD ]
Line_125 $$ if (type == float.class || type == Float.class)-->Line_126 $$ return (T) Float.valueOf(string)[ CD ]
Line_129 $$ if (type == double.class || type == Double.class)-->Line_130 $$ return (T) Double.valueOf(string)[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_24 $$ jsonData = jsonData.get("items")[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_34 $$ ((Serializable) object).read(this, jsonData)[ FD ]
Line_66 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))-->Line_76 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_8 $$ jsonData.remove(typeName)[ FD ]
Line_5 $$ if (jsonData.isObject()) -->Line_7 $$ if (className != null) [ CD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_113 $$ return (T) (Boolean) jsonData.asBoolean()[ FD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_79 $$ if (type.isArray()) [ FD ]
Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_53 $$ return (T) object[ CD ]
Line_66 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))-->Line_85 $$ ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_141 $$ if (ClassReflection.isAssignableFrom(Enum.class, type)) -->Line_143 $$ for (int i = 0, n = constants.length; i < n; i++) [ CD ]
Line_5 $$ if (jsonData.isObject()) -->Line_6 $$ String className = typeName == null ? null : jsonData.getString(typeName, null)[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_151 $$ throw new SerializationException("Unable to convert value to required type: " + jsonData + " (" + type.getName() + ")")[ FD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_149 $$ if (type == CharSequence.class)[ FD ]
Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_76 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_29 $$ if (type == String.class || type == Integer.class || type == Boolean.class || type == Float.class || type == Long.class || type == Double.class || type == Short.class || type == Byte.class || type == Character.class || ClassReflection.isAssignableFrom(Enum.class, type)) [ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_32 $$ Object object = newInstance(type)[ FD ]
Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_85 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_33 $$ if (object instanceof Serializable) -->Line_35 $$ return (T) object[ CD ]
Line_7 $$ if (className != null) -->Line_9 $$ type = getClass(className)[ CD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_56 $$ if (type != null) [ FD ]
Line_29 $$ if (type == String.class || type == Integer.class || type == Boolean.class || type == Float.class || type == Long.class || type == Double.class || type == Short.class || type == Byte.class || type == Character.class || ClassReflection.isAssignableFrom(Enum.class, type)) -->Line_30 $$ return readValue("value", type, jsonData)[ CD ]
Line_119 $$ String string = jsonData.asString()-->Line_145 $$ if (string.equals(convertToString(e)))[ FD ]
Line_5 $$ if (jsonData.isObject()) -->Line_18 $$ if (type == null) [ CD ]
Line_9 $$ type = getClass(className)-->Line_74 $$ if (ClassReflection.isAssignableFrom(Collection.class, type)) [ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_93 $$ return (T) (Float) jsonData.asFloat()[ FD ]
Line_7 $$ if (className != null) -->Line_10 $$ if (type == null) [ CD ]
Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_33 $$ if (object instanceof Serializable) [ CD ]
Line_61 $$ if (jsonData.isArray()) -->Line_64 $$ if (ClassReflection.isAssignableFrom(Array.class, type)) [ CD ]
Line_66 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))-->Line_85 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_6 $$ String className = typeName == null ? null : jsonData.getString(typeName, null)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_52 $$ readFields(object, jsonData)[ FD ]
Line_79 $$ if (type.isArray()) -->Line_85 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) ArrayReflection.set(result, i++, readValue(elementType, null, child))[ CD ]
Line_9 $$ type = getClass(className)-->Line_69 $$ if (ClassReflection.isAssignableFrom(Queue.class, type)) [ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_108 $$ jsonData = new JsonValue(jsonData.asString())[ FD ]
Line_149 $$ if (type == CharSequence.class)-->Line_150 $$ return (T) string[ CD ]
Line_66 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))-->Line_76 $$ result.add(readValue(elementType, null, child))[ FD ]
Line_9 $$ type = getClass(className)-->Line_30 $$ return readValue("value", type, jsonData)[ FD ]
Line_38 $$ ObjectMap result = (ObjectMap) object-->Line_66 $$ result.add(readValue(elementType, null, child))[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_20 $$ return (T) defaultSerializer.read(this, jsonData, type)[ FD ]
Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_52 $$ readFields(object, jsonData)[ CD ]
Line_66 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))-->Line_71 $$ result.addLast(readValue(elementType, null, child))[ FD ]
Line_49 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_76 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))[ FD ]
Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_32 $$ Object object = newInstance(type)[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_142 $$ Enum[] constants = (Enum[]) type.getEnumConstants()[ FD ]
Line_123 $$ if (type == int.class || type == Integer.class)-->Line_124 $$ return (T) Integer.valueOf(string)[ CD ]
Line_118 $$ if (jsonData.isString()) -->Line_137 $$ if (type == boolean.class || type == Boolean.class)[ CD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_75 $$ Collection result = type.isInterface() ? new ArrayList() : (Collection) newInstance(type)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_39 $$ result.put(child.name(), readValue(elementType, null, child))[ FD ]
Line_108 $$ jsonData = new JsonValue(jsonData.asString())-->Line_119 $$ String string = jsonData.asString()[ FD ]
Line_37 $$ if (object instanceof ObjectMap) -->Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_118 $$ if (jsonData.isString()) [ CD ]
Line_66 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))-->Line_71 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.addLast(readValue(elementType, null, child))[ FD ]
Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_29 $$ if (type == String.class || type == Integer.class || type == Boolean.class || type == Float.class || type == Long.class || type == Double.class || type == Short.class || type == Byte.class || type == Character.class || ClassReflection.isAssignableFrom(Enum.class, type)) [ CD ]
Line_9 $$ type = getClass(className)-->Line_64 $$ if (ClassReflection.isAssignableFrom(Array.class, type)) [ FD ]
Line_100 $$ if (type == String.class)-->Line_101 $$ return (T) jsonData.asString()[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_149 $$ if (type == CharSequence.class)[ FD ]
Line_49 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_85 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_9 $$ type = getClass(className)-->Line_29 $$ if (type == String.class || type == Integer.class || type == Boolean.class || type == Float.class || type == Long.class || type == Double.class || type == Short.class || type == Byte.class || type == Character.class || ClassReflection.isAssignableFrom(Enum.class, type)) [ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_10 $$ if (type == null) [ FD ]
Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_42 $$ if (object instanceof ArrayMap) [ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_69 $$ if (ClassReflection.isAssignableFrom(Queue.class, type)) [ FD ]
Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_76 $$ result.add(readValue(elementType, null, child))[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_9 $$ type = getClass(className)[ FD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_80 $$ Class componentType = type.getComponentType()[ FD ]
Line_26 $$ Serializer serializer = classToSerializer.get(type)-->Line_28 $$ return (T) serializer.read(this, jsonData, type)[ FD ]
Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_27 $$ if (serializer != null)[ CD ]
Line_62 $$ if (type == null || type == Object.class)-->Line_63 $$ type = (Class<T>) Array.class[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_113 $$ return (T) (Boolean) jsonData.asBoolean()[ FD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_141 $$ if (ClassReflection.isAssignableFrom(Enum.class, type)) [ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_81 $$ if (elementType == null)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_110 $$ if (jsonData.isBoolean()) [ FD ]
Line_98 $$ if (type == double.class || type == Double.class)-->Line_99 $$ return (T) (Double) jsonData.asDouble()[ CD ]
Line_120 $$ if (type == null || type == String.class)-->Line_121 $$ return (T) string[ CD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_18 $$ if (type == null) [ FD ]
Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_44 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))[ FD ]
Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_44 $$ result.put(child.name(), readValue(elementType, null, child))[ FD ]
Line_84 $$ int i = 0-->Line_85 $$ ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_3 $$ if (jsonData == null)-->Line_4 $$ return null[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_12 $$ type = (Class<T>) ClassReflection.forName(className)[ FD ]
Line_119 $$ String string = jsonData.asString()-->Line_124 $$ return (T) Integer.valueOf(string)[ FD ]
Line_9 $$ type = getClass(className)-->Line_12 $$ type = (Class<T>) ClassReflection.forName(className)[ FD ]
Line_145 $$ if (string.equals(convertToString(e)))-->Line_146 $$ return (T) e[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_56 $$ if (type != null) [ CD ]
Line_32 $$ Object object = newInstance(type)-->Line_37 $$ if (object instanceof ObjectMap) [ FD ]
Line_137 $$ if (type == boolean.class || type == Boolean.class)-->Line_138 $$ return (T) Boolean.valueOf(string)[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_30 $$ return readValue("value", type, jsonData)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_71 $$ result.addLast(readValue(elementType, null, child))[ FD ]
Line_102 $$ if (type == short.class || type == Short.class)-->Line_103 $$ return (T) (Short) jsonData.asShort()[ CD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_52 $$ readFields(object, jsonData)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_28 $$ return (T) serializer.read(this, jsonData, type)[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_26 $$ Serializer serializer = classToSerializer.get(type)[ FD ]
Line_49 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_71 $$ result.addLast(readValue(elementType, null, child))[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_95 $$ return (T) (Integer) jsonData.asInt()[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_93 $$ return (T) (Float) jsonData.asFloat()[ FD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_74 $$ if (ClassReflection.isAssignableFrom(Collection.class, type)) [ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_95 $$ return (T) (Integer) jsonData.asInt()[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_85 $$ ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_144 $$ Enum e = constants[i]-->Line_145 $$ if (string.equals(convertToString(e)))[ FD ]
Line_118 $$ if (jsonData.isString()) -->Line_149 $$ if (type == CharSequence.class)[ CD ]
Line_119 $$ String string = jsonData.asString()-->Line_134 $$ return (T) Byte.valueOf(string)[ FD ]
Line_74 $$ if (ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_77 $$ return (T) result[ CD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_105 $$ return (T) (Byte) jsonData.asByte()[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_90 $$ if (jsonData.isNumber()) [ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_90 $$ if (jsonData.isNumber()) [ CD ]
Line_32 $$ Object object = newInstance(type)-->Line_33 $$ if (object instanceof Serializable) [ FD ]
Line_9 $$ type = getClass(className)-->Line_57 $$ Serializer serializer = classToSerializer.get(type)[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_149 $$ if (type == CharSequence.class)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_90 $$ if (jsonData.isNumber()) [ FD ]
Line_119 $$ String string = jsonData.asString()-->Line_138 $$ return (T) Boolean.valueOf(string)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_108 $$ jsonData = new JsonValue(jsonData.asString())[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_69 $$ if (ClassReflection.isAssignableFrom(Queue.class, type)) [ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_65 $$ Array result = type == Array.class ? new Array() : (Array) newInstance(type)[ FD ]
Line_79 $$ if (type.isArray()) -->Line_81 $$ if (elementType == null)[ CD ]
Line_90 $$ if (jsonData.isNumber()) -->Line_108 $$ jsonData = new JsonValue(jsonData.asString())[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_5 $$ if (jsonData.isObject()) [ CD ]
Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_24 $$ jsonData = jsonData.get("items")[ CD ]
Line_44 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_66 $$ result.add(readValue(elementType, null, child))[ FD ]
Line_26 $$ Serializer serializer = classToSerializer.get(type)-->Line_27 $$ if (serializer != null)[ FD ]
Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_49 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_116 $$ jsonData = new JsonValue(jsonData.asString())[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_44 $$ result.put(child.name(), readValue(elementType, null, child))[ FD ]
Line_9 $$ type = getClass(className)-->Line_63 $$ type = (Class<T>) Array.class[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_30 $$ return readValue("value", type, jsonData)[ FD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_142 $$ Enum[] constants = (Enum[]) type.getEnumConstants()[ FD ]
Line_119 $$ String string = jsonData.asString()-->Line_140 $$ return (T) (Character) string.charAt(0)[ FD ]
Line_96 $$ if (type == long.class || type == Long.class)-->Line_97 $$ return (T) (Long) jsonData.asLong()[ CD ]
Line_5 $$ if (jsonData.isObject()) -->Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) [ CD ]
Line_58 $$ if (serializer != null)-->Line_59 $$ return (T) serializer.read(this, jsonData, type)[ CD ]
Line_9 $$ type = getClass(className)-->Line_151 $$ throw new SerializationException("Unable to convert value to required type: " + jsonData + " (" + type.getName() + ")")[ FD ]
Line_71 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.addLast(readValue(elementType, null, child))-->Line_76 $$ result.add(readValue(elementType, null, child))[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_65 $$ Array result = type == Array.class ? new Array() : (Array) newInstance(type)[ FD ]
Line_9 $$ type = getClass(className)-->Line_141 $$ if (ClassReflection.isAssignableFrom(Enum.class, type)) [ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_76 $$ result.add(readValue(elementType, null, child))[ FD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_88 $$ throw new SerializationException("Unable to convert value to required type: " + jsonData + " (" + type.getName() + ")")[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_97 $$ return (T) (Long) jsonData.asLong()[ FD ]
Line_9 $$ type = getClass(className)-->Line_59 $$ return (T) serializer.read(this, jsonData, type)[ FD ]
Line_9 $$ type = getClass(className)-->Line_100 $$ if (type == String.class)[ FD ]
Line_108 $$ jsonData = new JsonValue(jsonData.asString())-->Line_116 $$ jsonData = new JsonValue(jsonData.asString())[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_101 $$ return (T) jsonData.asString()[ FD ]
Line_9 $$ type = getClass(className)-->Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) [ FD ]
Line_6 $$ String className = typeName == null ? null : jsonData.getString(typeName, null)-->Line_12 $$ type = (Class<T>) ClassReflection.forName(className)[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_142 $$ Enum[] constants = (Enum[]) type.getEnumConstants()[ FD ]
Line_9 $$ type = getClass(className)-->Line_28 $$ return (T) serializer.read(this, jsonData, type)[ FD ]
Line_44 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_49 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))[ FD ]
Line_26 $$ Serializer serializer = classToSerializer.get(type)-->Line_58 $$ if (serializer != null)[ FD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_64 $$ if (ClassReflection.isAssignableFrom(Array.class, type)) [ FD ]
Line_38 $$ ObjectMap result = (ObjectMap) object-->Line_85 $$ ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_70 $$ Queue result = type == Queue.class ? new Queue() : (Queue) newInstance(type)[ FD ]
Line_18 $$ if (type == null) -->Line_19 $$ if (defaultSerializer != null)[ CD ]
Line_116 $$ jsonData = new JsonValue(jsonData.asString())-->Line_118 $$ if (jsonData.isString()) [ FD ]
Line_47 $$ if (object instanceof Map) -->Line_50 $$ return (T) result[ CD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_80 $$ Class componentType = type.getComponentType()[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_100 $$ if (type == String.class)[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_74 $$ if (ClassReflection.isAssignableFrom(Collection.class, type)) [ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_32 $$ Object object = newInstance(type)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_66 $$ result.add(readValue(elementType, null, child))[ FD ]
Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) -->Line_47 $$ if (object instanceof Map) [ CD ]
Line_82 $$ elementType = componentType-->Line_85 $$ ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_108 $$ jsonData = new JsonValue(jsonData.asString())-->Line_110 $$ if (jsonData.isBoolean()) [ FD ]
Line_42 $$ if (object instanceof ArrayMap) -->Line_45 $$ return (T) result[ CD ]
Line_118 $$ if (jsonData.isString()) -->Line_119 $$ String string = jsonData.asString()[ CD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_141 $$ if (ClassReflection.isAssignableFrom(Enum.class, type)) [ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_153 $$ return null[ CD ]
Line_9 $$ type = getClass(className)-->Line_32 $$ Object object = newInstance(type)[ FD ]
Line_44 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_85 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_57 $$ Serializer serializer = classToSerializer.get(type)[ FD ]
Line_49 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_66 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))[ FD ]
Line_38 $$ ObjectMap result = (ObjectMap) object-->Line_49 $$ result.put(child.name(), readValue(elementType, null, child))[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_26 $$ Serializer serializer = classToSerializer.get(type)[ FD ]
Line_32 $$ Object object = newInstance(type)-->Line_42 $$ if (object instanceof ArrayMap) [ FD ]
Line_9 $$ type = getClass(className)-->Line_65 $$ Array result = type == Array.class ? new Array() : (Array) newInstance(type)[ FD ]
Line_9 $$ type = getClass(className)-->Line_20 $$ return (T) defaultSerializer.read(this, jsonData, type)[ FD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_70 $$ Queue result = type == Queue.class ? new Queue() : (Queue) newInstance(type)[ FD ]
Line_110 $$ if (jsonData.isBoolean()) -->Line_116 $$ jsonData = new JsonValue(jsonData.asString())[ CD ]
Line_141 $$ if (ClassReflection.isAssignableFrom(Enum.class, type)) -->Line_142 $$ Enum[] constants = (Enum[]) type.getEnumConstants()[ CD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_64 $$ if (ClassReflection.isAssignableFrom(Array.class, type)) [ FD ]
Line_143 $$ for (int i = 0, n = constants.length; i < n; i++) -->Line_144 $$ Enum e = constants[i][ CD ]
Line_118 $$ if (jsonData.isString()) -->Line_120 $$ if (type == null || type == String.class)[ CD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) [ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_61 $$ if (jsonData.isArray()) [ FD ]
Line_79 $$ if (type.isArray()) -->Line_83 $$ Object result = ArrayReflection.newInstance(componentType, jsonData.size)[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_74 $$ if (ClassReflection.isAssignableFrom(Collection.class, type)) [ FD ]
Line_61 $$ if (jsonData.isArray()) -->Line_62 $$ if (type == null || type == Object.class)[ CD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_59 $$ return (T) serializer.read(this, jsonData, type)[ FD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_69 $$ if (ClassReflection.isAssignableFrom(Queue.class, type)) [ FD ]
Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_71 $$ result.addLast(readValue(elementType, null, child))[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_57 $$ Serializer serializer = classToSerializer.get(type)[ FD ]
Line_61 $$ if (jsonData.isArray()) -->Line_74 $$ if (ClassReflection.isAssignableFrom(Collection.class, type)) [ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_119 $$ String string = jsonData.asString()[ FD ]
Line_76 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))-->Line_85 $$ ArrayReflection.set(result, i++, readValue(elementType, null, child))[ FD ]
Line_42 $$ if (object instanceof ArrayMap) -->Line_44 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))[ CD ]
Line_7 $$ if (className != null) -->Line_8 $$ jsonData.remove(typeName)[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_110 $$ if (jsonData.isBoolean()) [ CD ]
Line_37 $$ if (object instanceof ObjectMap) -->Line_38 $$ ObjectMap result = (ObjectMap) object[ CD ]
Line_44 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_76 $$ result.add(readValue(elementType, null, child))[ FD ]
Line_6 $$ String className = typeName == null ? null : jsonData.getString(typeName, null)-->Line_7 $$ if (className != null) [ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_64 $$ if (ClassReflection.isAssignableFrom(Array.class, type)) [ FD ]
Line_133 $$ if (type == byte.class || type == Byte.class)-->Line_134 $$ return (T) Byte.valueOf(string)[ CD ]
Line_61 $$ if (jsonData.isArray()) -->Line_79 $$ if (type.isArray()) [ CD ]
Line_80 $$ Class componentType = type.getComponentType()-->Line_83 $$ Object result = ArrayReflection.newInstance(componentType, jsonData.size)[ FD ]
Line_131 $$ if (type == short.class || type == Short.class)-->Line_132 $$ return (T) Short.valueOf(string)[ CD ]
Line_63 $$ type = (Class<T>) Array.class-->Line_75 $$ Collection result = type.isInterface() ? new ArrayList() : (Collection) newInstance(type)[ FD ]
Line_116 $$ jsonData = new JsonValue(jsonData.asString())-->Line_119 $$ String string = jsonData.asString()[ FD ]
Line_38 $$ ObjectMap result = (ObjectMap) object-->Line_39 $$ result.put(child.name(), readValue(elementType, null, child))[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_141 $$ if (ClassReflection.isAssignableFrom(Enum.class, type)) [ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_61 $$ if (jsonData.isArray()) [ FD ]
Line_69 $$ if (ClassReflection.isAssignableFrom(Queue.class, type)) -->Line_72 $$ return (T) result[ CD ]
Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_66 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_151 $$ throw new SerializationException("Unable to convert value to required type: " + jsonData + " (" + type.getName() + ")")[ FD ]
Line_80 $$ Class componentType = type.getComponentType()-->Line_82 $$ elementType = componentType[ FD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_119 $$ String string = jsonData.asString()[ FD ]
Line_9 $$ type = getClass(className)-->Line_18 $$ if (type == null) [ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_56 $$ if (type != null) [ FD ]
Line_118 $$ if (jsonData.isString()) -->Line_141 $$ if (ClassReflection.isAssignableFrom(Enum.class, type)) [ CD ]
Line_104 $$ if (type == byte.class || type == Byte.class)-->Line_105 $$ return (T) (Byte) jsonData.asByte()[ CD ]
Line_9 $$ type = getClass(className)-->Line_26 $$ Serializer serializer = classToSerializer.get(type)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_105 $$ return (T) (Byte) jsonData.asByte()[ FD ]
Line_112 $$ if (type == null || type == boolean.class || type == Boolean.class)-->Line_113 $$ return (T) (Boolean) jsonData.asBoolean()[ CD ]
Line_39 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_66 $$ result.add(readValue(elementType, null, child))[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_79 $$ if (type.isArray()) [ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_97 $$ return (T) (Long) jsonData.asLong()[ FD ]
Line_9 $$ type = getClass(className)-->Line_10 $$ if (type == null) [ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_101 $$ return (T) jsonData.asString()[ FD ]
Line_6 $$ String className = typeName == null ? null : jsonData.getString(typeName, null)-->Line_9 $$ type = getClass(className)[ FD ]
Line_38 $$ ObjectMap result = (ObjectMap) object-->Line_76 $$ result.add(readValue(elementType, null, child))[ FD ]
Line_9 $$ type = getClass(className)-->Line_70 $$ Queue result = type == Queue.class ? new Queue() : (Queue) newInstance(type)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_99 $$ return (T) (Double) jsonData.asDouble()[ FD ]
Line_18 $$ if (type == null) -->Line_21 $$ return (T) jsonData[ CD ]
Line_24 $$ jsonData = jsonData.get("items")-->Line_110 $$ if (jsonData.isBoolean()) [ FD ]
Line_47 $$ if (object instanceof Map) -->Line_49 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_34 $$ ((Serializable) object).read(this, jsonData)[ FD ]
Line_143 $$ for (int i = 0, n = constants.length; i < n; i++) -->Line_145 $$ if (string.equals(convertToString(e)))[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_5 $$ if (jsonData.isObject()) [ FD ]
Line_9 $$ type = getClass(className)-->Line_56 $$ if (type != null) [ FD ]
Line_27 $$ if (serializer != null)-->Line_28 $$ return (T) serializer.read(this, jsonData, type)[ CD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_28 $$ return (T) serializer.read(this, jsonData, type)[ FD ]
Line_119 $$ String string = jsonData.asString()-->Line_128 $$ return (T) Long.valueOf(string)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_100 $$ if (type == String.class)[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_70 $$ Queue result = type == Queue.class ? new Queue() : (Queue) newInstance(type)[ FD ]
Line_108 $$ jsonData = new JsonValue(jsonData.asString())-->Line_118 $$ if (jsonData.isString()) [ FD ]
Line_64 $$ if (ClassReflection.isAssignableFrom(Array.class, type)) -->Line_67 $$ return (T) result[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_118 $$ if (jsonData.isString()) [ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_29 $$ if (type == String.class || type == Integer.class || type == Boolean.class || type == Float.class || type == Long.class || type == Double.class || type == Short.class || type == Byte.class || type == Character.class || ClassReflection.isAssignableFrom(Enum.class, type)) [ FD ]
Line_49 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_66 $$ result.add(readValue(elementType, null, child))[ FD ]
Line_44 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_76 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.add(readValue(elementType, null, child))[ FD ]
Line_118 $$ if (jsonData.isString()) -->Line_139 $$ if (type == char.class || type == Character.class)[ CD ]
Line_44 $$ for (JsonValue child = jsonData.child; child != null; child = child.next) result.put(child.name(), readValue(elementType, null, child))-->Line_71 $$ result.addLast(readValue(elementType, null, child))[ FD ]
Line_38 $$ ObjectMap result = (ObjectMap) object-->Line_44 $$ result.put(child.name(), readValue(elementType, null, child))[ FD ]
Line_12 $$ type = (Class<T>) ClassReflection.forName(className)-->Line_88 $$ throw new SerializationException("Unable to convert value to required type: " + jsonData + " (" + type.getName() + ")")[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_59 $$ return (T) serializer.read(this, jsonData, type)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_23 $$ if (typeName != null && ClassReflection.isAssignableFrom(Collection.class, type)) [ FD ]
Line_61 $$ if (jsonData.isArray()) -->Line_69 $$ if (ClassReflection.isAssignableFrom(Queue.class, type)) [ CD ]
Line_94 $$ if (type == int.class || type == Integer.class)-->Line_95 $$ return (T) (Integer) jsonData.asInt()[ CD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_75 $$ Collection result = type.isInterface() ? new ArrayList() : (Collection) newInstance(type)[ FD ]
Line_26 $$ Serializer serializer = classToSerializer.get(type)-->Line_59 $$ return (T) serializer.read(this, jsonData, type)[ FD ]
Line_2 $$ public <T> T readValue(Class<T> type, Class elementType, JsonValue jsonData) -->Line_88 $$ throw new SerializationException("Unable to convert value to required type: " + jsonData + " (" + type.getName() + ")")[ FD ]
