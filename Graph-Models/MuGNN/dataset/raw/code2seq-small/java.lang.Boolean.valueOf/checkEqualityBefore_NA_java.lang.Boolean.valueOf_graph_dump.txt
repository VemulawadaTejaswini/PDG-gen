Line_2 $$ private void checkEqualityBefore(PsiExpression expression, boolean equals, PsiVariable variable1, PsiVariable variable2) -->Line_4 $$ if (parent instanceof PsiBinaryExpression) [ CD ]
Line_2 $$ private void checkEqualityBefore(PsiExpression expression, boolean equals, PsiVariable variable1, PsiVariable variable2) -->Line_3 $$ final PsiElement parent = PsiTreeUtil.skipParentsOfType(expression, PsiParenthesizedExpression.class)[ FD ]
Line_7 $$ final PsiExpression lhs = binaryExpression.getLOperand()-->Line_8 $$ if (isEquality(lhs, equals, variable1, variable2)) [ FD ]
Line_2 $$ private void checkEqualityBefore(PsiExpression expression, boolean equals, PsiVariable variable1, PsiVariable variable2) -->Line_14 $$ registerError(expression, variable1.getName(), variable2.getName(), Boolean.valueOf(equals))[ CD ]
Line_5 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) parent-->Line_6 $$ if (PsiTreeUtil.isAncestor(binaryExpression.getROperand(), expression, false)) [ FD ]
Line_8 $$ if (isEquality(lhs, equals, variable1, variable2)) -->Line_9 $$ registerError(binaryExpression, variable1.getName(), variable2.getName(), Boolean.valueOf(equals))[ CD ]
Line_2 $$ private void checkEqualityBefore(PsiExpression expression, boolean equals, PsiVariable variable1, PsiVariable variable2) -->Line_6 $$ if (PsiTreeUtil.isAncestor(binaryExpression.getROperand(), expression, false)) [ FD ]
Line_6 $$ if (PsiTreeUtil.isAncestor(binaryExpression.getROperand(), expression, false)) -->Line_8 $$ if (isEquality(lhs, equals, variable1, variable2)) [ CD ]
Line_2 $$ private void checkEqualityBefore(PsiExpression expression, boolean equals, PsiVariable variable1, PsiVariable variable2) -->Line_14 $$ registerError(expression, variable1.getName(), variable2.getName(), Boolean.valueOf(equals))[ FD ]
Line_2 $$ private void checkEqualityBefore(PsiExpression expression, boolean equals, PsiVariable variable1, PsiVariable variable2) -->Line_8 $$ if (isEquality(lhs, equals, variable1, variable2)) [ FD ]
Line_4 $$ if (parent instanceof PsiBinaryExpression) -->Line_6 $$ if (PsiTreeUtil.isAncestor(binaryExpression.getROperand(), expression, false)) [ CD ]
Line_6 $$ if (PsiTreeUtil.isAncestor(binaryExpression.getROperand(), expression, false)) -->Line_7 $$ final PsiExpression lhs = binaryExpression.getLOperand()[ CD ]
Line_5 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) parent-->Line_7 $$ final PsiExpression lhs = binaryExpression.getLOperand()[ FD ]
Line_2 $$ private void checkEqualityBefore(PsiExpression expression, boolean equals, PsiVariable variable1, PsiVariable variable2) -->Line_3 $$ final PsiElement parent = PsiTreeUtil.skipParentsOfType(expression, PsiParenthesizedExpression.class)[ CD ]
Line_5 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) parent-->Line_9 $$ registerError(binaryExpression, variable1.getName(), variable2.getName(), Boolean.valueOf(equals))[ FD ]
Line_2 $$ private void checkEqualityBefore(PsiExpression expression, boolean equals, PsiVariable variable1, PsiVariable variable2) -->Line_9 $$ registerError(binaryExpression, variable1.getName(), variable2.getName(), Boolean.valueOf(equals))[ FD ]
Line_8 $$ if (isEquality(lhs, equals, variable1, variable2)) -->Line_10 $$ return[ CD ]
Line_4 $$ if (parent instanceof PsiBinaryExpression) -->Line_5 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) parent[ CD ]
Line_3 $$ final PsiElement parent = PsiTreeUtil.skipParentsOfType(expression, PsiParenthesizedExpression.class)-->Line_4 $$ if (parent instanceof PsiBinaryExpression) [ FD ]
