Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_3 $$ Props prop = new Props(definition)[ CD ]
Line_16 $$ col = new ArrayList<CacheOperation>(2)-->Line_40 $$ col.add(op)[ FD ]
Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)-->Line_37 $$ col = new ArrayList<CacheOperation>(2)[ FD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_44 $$ String name = prop.merge(opElement, parserContext.getReaderContext())[ FD ]
Line_11 $$ CacheableOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheableOperation())-->Line_54 $$ col.add(op)[ FD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_23 $$ String name = prop.merge(opElement, parserContext.getReaderContext())[ FD ]
Line_9 $$ TypedStringValue nameHolder = new TypedStringValue(name)-->Line_38 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_9 $$ TypedStringValue nameHolder = new TypedStringValue(name)-->Line_25 $$ nameHolder.setSource(parserContext.extractSource(opElement))[ FD ]
Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)-->Line_17 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_16 $$ col = new ArrayList<CacheOperation>(2)-->Line_19 $$ col.add(op)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_26 $$ CacheEvictOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheEvictOperation())[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_6 $$ List<Element> cacheableCacheMethods = DomUtils.getChildElementsByTagName(definition, CACHEABLE_ELEMENT)[ FD ]
Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)-->Line_15 $$ if (col == null) [ FD ]
Line_4 $$ ManagedMap<TypedStringValue, Collection<CacheOperation>> cacheOpMap = new ManagedMap<TypedStringValue, Collection<CacheOperation>>()-->Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)[ FD ]
Line_32 $$ if (StringUtils.hasText(after)) -->Line_33 $$ op.setBeforeInvocation(Boolean.valueOf(after.trim()))[ CD ]
Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)-->Line_52 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_26 $$ CacheEvictOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheEvictOperation())[ FD ]
Line_4 $$ ManagedMap<TypedStringValue, Collection<CacheOperation>> cacheOpMap = new ManagedMap<TypedStringValue, Collection<CacheOperation>>()-->Line_38 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_27 $$ String wide = opElement.getAttribute("all-entries")-->Line_29 $$ op.setCacheWide(Boolean.valueOf(wide.trim()))[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_6 $$ List<Element> cacheableCacheMethods = DomUtils.getChildElementsByTagName(definition, CACHEABLE_ELEMENT)[ CD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_13 $$ op.setSync(Boolean.valueOf(getAttributeValue(opElement, "sync", "false")))[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_42 $$ List<Element> putCacheMethods = DomUtils.getChildElementsByTagName(definition, CACHE_PUT_ELEMENT)[ FD ]
Line_4 $$ ManagedMap<TypedStringValue, Collection<CacheOperation>> cacheOpMap = new ManagedMap<TypedStringValue, Collection<CacheOperation>>()-->Line_17 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_44 $$ String name = prop.merge(opElement, parserContext.getReaderContext())[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_56 $$ RootBeanDefinition attributeSourceDefinition = new RootBeanDefinition(NameMatchCacheOperationSource.class)[ CD ]
Line_28 $$ if (StringUtils.hasText(wide)) -->Line_29 $$ op.setCacheWide(Boolean.valueOf(wide.trim()))[ CD ]
Line_31 $$ String after = opElement.getAttribute("before-invocation")-->Line_33 $$ op.setBeforeInvocation(Boolean.valueOf(after.trim()))[ FD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_8 $$ String name = prop.merge(opElement, parserContext.getReaderContext())[ FD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_10 $$ nameHolder.setSource(parserContext.extractSource(opElement))[ FD ]
Line_11 $$ CacheableOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheableOperation())-->Line_12 $$ op.setUnless(getAttributeValue(opElement, "unless", ""))[ FD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_12 $$ op.setUnless(getAttributeValue(opElement, "unless", ""))[ FD ]
Line_50 $$ if (col == null) -->Line_51 $$ col = new ArrayList<CacheOperation>(2)[ CD ]
Line_9 $$ TypedStringValue nameHolder = new TypedStringValue(name)-->Line_52 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_47 $$ CachePutOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CachePutOperation())[ FD ]
Line_16 $$ col = new ArrayList<CacheOperation>(2)-->Line_38 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_3 $$ Props prop = new Props(definition)-->Line_11 $$ CacheableOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheableOperation())[ FD ]
Line_9 $$ TypedStringValue nameHolder = new TypedStringValue(name)-->Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)[ FD ]
Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)-->Line_54 $$ col.add(op)[ FD ]
Line_51 $$ col = new ArrayList<CacheOperation>(2)-->Line_52 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_11 $$ CacheableOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheableOperation())-->Line_13 $$ op.setSync(Boolean.valueOf(getAttributeValue(opElement, "sync", "false")))[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_21 $$ List<Element> evictCacheMethods = DomUtils.getChildElementsByTagName(definition, CACHE_EVICT_ELEMENT)[ CD ]
Line_9 $$ TypedStringValue nameHolder = new TypedStringValue(name)-->Line_49 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)[ FD ]
Line_16 $$ col = new ArrayList<CacheOperation>(2)-->Line_52 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_11 $$ CacheableOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheableOperation())-->Line_48 $$ op.setUnless(getAttributeValue(opElement, "unless", ""))[ FD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_11 $$ CacheableOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheableOperation())[ FD ]
Line_11 $$ CacheableOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheableOperation())-->Line_19 $$ col.add(op)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_8 $$ String name = prop.merge(opElement, parserContext.getReaderContext())[ FD ]
Line_11 $$ CacheableOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheableOperation())-->Line_40 $$ col.add(op)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_23 $$ String name = prop.merge(opElement, parserContext.getReaderContext())[ FD ]
Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)-->Line_36 $$ if (col == null) [ FD ]
Line_27 $$ String wide = opElement.getAttribute("all-entries")-->Line_28 $$ if (StringUtils.hasText(wide)) [ FD ]
Line_15 $$ if (col == null) -->Line_16 $$ col = new ArrayList<CacheOperation>(2)[ CD ]
Line_4 $$ ManagedMap<TypedStringValue, Collection<CacheOperation>> cacheOpMap = new ManagedMap<TypedStringValue, Collection<CacheOperation>>()-->Line_52 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_58 $$ attributeSourceDefinition.getPropertyValues().add("nameMap", cacheOpMap)[ CD ]
Line_16 $$ col = new ArrayList<CacheOperation>(2)-->Line_17 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_11 $$ CacheableOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheableOperation())-->Line_29 $$ op.setCacheWide(Boolean.valueOf(wide.trim()))[ FD ]
Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)-->Line_51 $$ col = new ArrayList<CacheOperation>(2)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_59 $$ return attributeSourceDefinition[ CD ]
Line_36 $$ if (col == null) -->Line_37 $$ col = new ArrayList<CacheOperation>(2)[ CD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_25 $$ nameHolder.setSource(parserContext.extractSource(opElement))[ FD ]
Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)-->Line_50 $$ if (col == null) [ FD ]
Line_3 $$ Props prop = new Props(definition)-->Line_44 $$ String name = prop.merge(opElement, parserContext.getReaderContext())[ FD ]
Line_4 $$ ManagedMap<TypedStringValue, Collection<CacheOperation>> cacheOpMap = new ManagedMap<TypedStringValue, Collection<CacheOperation>>()-->Line_35 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_5 $$ cacheOpMap.setSource(parserContext.extractSource(definition))[ FD ]
Line_16 $$ col = new ArrayList<CacheOperation>(2)-->Line_50 $$ if (col == null) [ FD ]
Line_16 $$ col = new ArrayList<CacheOperation>(2)-->Line_36 $$ if (col == null) [ FD ]
Line_37 $$ col = new ArrayList<CacheOperation>(2)-->Line_51 $$ col = new ArrayList<CacheOperation>(2)[ FD ]
Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)-->Line_16 $$ col = new ArrayList<CacheOperation>(2)[ FD ]
Line_37 $$ col = new ArrayList<CacheOperation>(2)-->Line_50 $$ if (col == null) [ FD ]
Line_9 $$ TypedStringValue nameHolder = new TypedStringValue(name)-->Line_10 $$ nameHolder.setSource(parserContext.extractSource(opElement))[ FD ]
Line_37 $$ col = new ArrayList<CacheOperation>(2)-->Line_40 $$ col.add(op)[ FD ]
Line_56 $$ RootBeanDefinition attributeSourceDefinition = new RootBeanDefinition(NameMatchCacheOperationSource.class)-->Line_58 $$ attributeSourceDefinition.getPropertyValues().add("nameMap", cacheOpMap)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_10 $$ nameHolder.setSource(parserContext.extractSource(opElement))[ FD ]
Line_36 $$ if (col == null) -->Line_38 $$ cacheOpMap.put(nameHolder, col)[ CD ]
Line_3 $$ Props prop = new Props(definition)-->Line_26 $$ CacheEvictOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheEvictOperation())[ FD ]
Line_11 $$ CacheableOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheableOperation())-->Line_33 $$ op.setBeforeInvocation(Boolean.valueOf(after.trim()))[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_46 $$ nameHolder.setSource(parserContext.extractSource(opElement))[ FD ]
Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)-->Line_19 $$ col.add(op)[ FD ]
Line_9 $$ TypedStringValue nameHolder = new TypedStringValue(name)-->Line_17 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_57 $$ attributeSourceDefinition.setSource(parserContext.extractSource(definition))[ CD ]
Line_9 $$ TypedStringValue nameHolder = new TypedStringValue(name)-->Line_35 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)[ FD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_46 $$ nameHolder.setSource(parserContext.extractSource(opElement))[ FD ]
Line_37 $$ col = new ArrayList<CacheOperation>(2)-->Line_38 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_5 $$ cacheOpMap.setSource(parserContext.extractSource(definition))[ CD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_27 $$ String wide = opElement.getAttribute("all-entries")[ FD ]
Line_56 $$ RootBeanDefinition attributeSourceDefinition = new RootBeanDefinition(NameMatchCacheOperationSource.class)-->Line_57 $$ attributeSourceDefinition.setSource(parserContext.extractSource(definition))[ FD ]
Line_15 $$ if (col == null) -->Line_17 $$ cacheOpMap.put(nameHolder, col)[ CD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_11 $$ CacheableOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CacheableOperation())[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_21 $$ List<Element> evictCacheMethods = DomUtils.getChildElementsByTagName(definition, CACHE_EVICT_ELEMENT)[ FD ]
Line_37 $$ col = new ArrayList<CacheOperation>(2)-->Line_54 $$ col.add(op)[ FD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_25 $$ nameHolder.setSource(parserContext.extractSource(opElement))[ FD ]
Line_37 $$ col = new ArrayList<CacheOperation>(2)-->Line_52 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_31 $$ String after = opElement.getAttribute("before-invocation")-->Line_32 $$ if (StringUtils.hasText(after)) [ FD ]
Line_16 $$ col = new ArrayList<CacheOperation>(2)-->Line_51 $$ col = new ArrayList<CacheOperation>(2)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_4 $$ ManagedMap<TypedStringValue, Collection<CacheOperation>> cacheOpMap = new ManagedMap<TypedStringValue, Collection<CacheOperation>>()[ CD ]
Line_4 $$ ManagedMap<TypedStringValue, Collection<CacheOperation>> cacheOpMap = new ManagedMap<TypedStringValue, Collection<CacheOperation>>()-->Line_49 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)[ FD ]
Line_16 $$ col = new ArrayList<CacheOperation>(2)-->Line_54 $$ col.add(op)[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_42 $$ List<Element> putCacheMethods = DomUtils.getChildElementsByTagName(definition, CACHE_PUT_ELEMENT)[ CD ]
Line_4 $$ ManagedMap<TypedStringValue, Collection<CacheOperation>> cacheOpMap = new ManagedMap<TypedStringValue, Collection<CacheOperation>>()-->Line_5 $$ cacheOpMap.setSource(parserContext.extractSource(definition))[ FD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_48 $$ op.setUnless(getAttributeValue(opElement, "unless", ""))[ FD ]
Line_3 $$ Props prop = new Props(definition)-->Line_8 $$ String name = prop.merge(opElement, parserContext.getReaderContext())[ FD ]
Line_2 $$ private RootBeanDefinition parseDefinitionSource(Element definition, ParserContext parserContext) -->Line_57 $$ attributeSourceDefinition.setSource(parserContext.extractSource(definition))[ FD ]
Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)-->Line_38 $$ cacheOpMap.put(nameHolder, col)[ FD ]
Line_14 $$ Collection<CacheOperation> col = cacheOpMap.get(nameHolder)-->Line_40 $$ col.add(op)[ FD ]
Line_4 $$ ManagedMap<TypedStringValue, Collection<CacheOperation>> cacheOpMap = new ManagedMap<TypedStringValue, Collection<CacheOperation>>()-->Line_58 $$ attributeSourceDefinition.getPropertyValues().add("nameMap", cacheOpMap)[ FD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_47 $$ CachePutOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CachePutOperation())[ FD ]
Line_3 $$ Props prop = new Props(definition)-->Line_23 $$ String name = prop.merge(opElement, parserContext.getReaderContext())[ FD ]
Line_7 $$ for (Element opElement : cacheableCacheMethods) -->Line_31 $$ String after = opElement.getAttribute("before-invocation")[ FD ]
Line_16 $$ col = new ArrayList<CacheOperation>(2)-->Line_37 $$ col = new ArrayList<CacheOperation>(2)[ FD ]
Line_51 $$ col = new ArrayList<CacheOperation>(2)-->Line_54 $$ col.add(op)[ FD ]
Line_9 $$ TypedStringValue nameHolder = new TypedStringValue(name)-->Line_46 $$ nameHolder.setSource(parserContext.extractSource(opElement))[ FD ]
Line_3 $$ Props prop = new Props(definition)-->Line_47 $$ CachePutOperation op = prop.merge(opElement, parserContext.getReaderContext(), new CachePutOperation())[ FD ]
Line_50 $$ if (col == null) -->Line_52 $$ cacheOpMap.put(nameHolder, col)[ CD ]
