Line_9 $$ String value = e.getAttributeValue(ATTRIBUTE_VALUE)-->Line_11 $$ table.setLineComment(value)[ FD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_40 $$ if (ELEMENT_KEYWORDS4.equals(element.getName())) [ FD ]
Line_9 $$ String value = e.getAttributeValue(ATTRIBUTE_VALUE)-->Line_17 $$ table.setHexPrefix(value)[ FD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_15 $$ table.setEndComment(value)[ FD ]
Line_9 $$ String value = e.getAttributeValue(ATTRIBUTE_VALUE)-->Line_19 $$ table.setNumPostfixChars(value)[ FD ]
Line_14 $$ if (VALUE_COMMENT_END.equals(name)) -->Line_16 $$ if (VALUE_HEX_PREFIX.equals(name)) [ CD ]
Line_36 $$ if (ELEMENT_KEYWORDS2.equals(element.getName())) -->Line_38 $$ if (ELEMENT_KEYWORDS3.equals(element.getName())) [ CD ]
Line_32 $$ if (ELEMENT_KEYWORDS.equals(element.getName())) -->Line_34 $$ table.setIgnoreCase(ignoreCase)[ CD ]
Line_2 $$ public static SyntaxTable readSyntaxTable(@NotNull Element root) -->Line_4 $$ for (Element element : root.getChildren()) [ FD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_41 $$ loadKeywords(element, table.getKeywords4())[ FD ]
Line_2 $$ public static SyntaxTable readSyntaxTable(@NotNull Element root) -->Line_44 $$ boolean DUMP_TABLE = false[ CD ]
Line_8 $$ String name = e.getAttributeValue(ATTRIBUTE_NAME)-->Line_24 $$ if (VALUE_HAS_BRACKETS.equals(name)) [ FD ]
Line_38 $$ if (ELEMENT_KEYWORDS3.equals(element.getName())) -->Line_39 $$ loadKeywords(element, table.getKeywords3())[ CD ]
Line_9 $$ String value = e.getAttributeValue(ATTRIBUTE_VALUE)-->Line_29 $$ table.setHasStringEscapes(Boolean.valueOf(value).booleanValue())[ FD ]
Line_7 $$ Element e = (Element) o1-->Line_8 $$ String name = e.getAttributeValue(ATTRIBUTE_NAME)[ FD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_6 $$ for (final Object o1 : element.getChildren(ELEMENT_OPTION)) [ FD ]
Line_32 $$ if (ELEMENT_KEYWORDS.equals(element.getName())) -->Line_36 $$ if (ELEMENT_KEYWORDS2.equals(element.getName())) [ CD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_35 $$ loadKeywords(element, table.getKeywords1())[ FD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_32 $$ if (ELEMENT_KEYWORDS.equals(element.getName())) [ FD ]
Line_2 $$ public static SyntaxTable readSyntaxTable(@NotNull Element root) -->Line_45 $$ if (DUMP_TABLE) [ CD ]
Line_8 $$ String name = e.getAttributeValue(ATTRIBUTE_NAME)-->Line_18 $$ if (VALUE_NUM_POSTFIXES.equals(name)) [ FD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_11 $$ table.setLineComment(value)[ FD ]
Line_7 $$ Element e = (Element) o1-->Line_9 $$ String value = e.getAttributeValue(ATTRIBUTE_VALUE)[ FD ]
Line_14 $$ if (VALUE_COMMENT_END.equals(name)) -->Line_15 $$ table.setEndComment(value)[ CD ]
Line_8 $$ String name = e.getAttributeValue(ATTRIBUTE_NAME)-->Line_12 $$ if (VALUE_COMMENT_START.equals(name)) [ FD ]
Line_26 $$ if (VALUE_HAS_PARENS.equals(name)) -->Line_28 $$ if (VALUE_HAS_STRING_ESCAPES.equals(name)) [ CD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_47 $$ writeTable(element, table)[ FD ]
Line_8 $$ String name = e.getAttributeValue(ATTRIBUTE_NAME)-->Line_16 $$ if (VALUE_HEX_PREFIX.equals(name)) [ FD ]
Line_8 $$ String name = e.getAttributeValue(ATTRIBUTE_NAME)-->Line_10 $$ if (VALUE_LINE_COMMENT.equals(name)) [ FD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_37 $$ loadKeywords(element, table.getKeywords2())[ FD ]
Line_10 $$ if (VALUE_LINE_COMMENT.equals(name)) -->Line_12 $$ if (VALUE_COMMENT_START.equals(name)) [ CD ]
Line_28 $$ if (VALUE_HAS_STRING_ESCAPES.equals(name)) -->Line_29 $$ table.setHasStringEscapes(Boolean.valueOf(value).booleanValue())[ CD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_36 $$ if (ELEMENT_KEYWORDS2.equals(element.getName())) [ FD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_39 $$ loadKeywords(element, table.getKeywords3())[ FD ]
Line_20 $$ if (VALUE_LINE_COMMENT_AT_START.equals(name)) -->Line_21 $$ table.lineCommentOnlyAtStart = Boolean.valueOf(value).booleanValue()[ CD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_13 $$ table.setStartComment(value)[ FD ]
Line_8 $$ String name = e.getAttributeValue(ATTRIBUTE_NAME)-->Line_20 $$ if (VALUE_LINE_COMMENT_AT_START.equals(name)) [ FD ]
Line_33 $$ boolean ignoreCase = Boolean.valueOf(element.getAttributeValue(ATTRIBUTE_IGNORE_CASE)).booleanValue()-->Line_34 $$ table.setIgnoreCase(ignoreCase)[ FD ]
Line_48 $$ XMLOutputter outputter = JDOMUtil.createOutputter("\n")-->Line_50 $$ outputter.output((Element) element.getContent().get(0), System.out)[ FD ]
Line_9 $$ String value = e.getAttributeValue(ATTRIBUTE_VALUE)-->Line_25 $$ table.setHasBrackets(Boolean.valueOf(value).booleanValue())[ FD ]
Line_8 $$ String name = e.getAttributeValue(ATTRIBUTE_NAME)-->Line_14 $$ if (VALUE_COMMENT_END.equals(name)) [ FD ]
Line_2 $$ public static SyntaxTable readSyntaxTable(@NotNull Element root) -->Line_3 $$ SyntaxTable table = new SyntaxTable()[ CD ]
Line_12 $$ if (VALUE_COMMENT_START.equals(name)) -->Line_13 $$ table.setStartComment(value)[ CD ]
Line_36 $$ if (ELEMENT_KEYWORDS2.equals(element.getName())) -->Line_37 $$ loadKeywords(element, table.getKeywords2())[ CD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_5 $$ if (ELEMENT_OPTIONS.equals(element.getName())) [ FD ]
Line_22 $$ if (VALUE_HAS_BRACES.equals(name)) -->Line_24 $$ if (VALUE_HAS_BRACKETS.equals(name)) [ CD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_38 $$ if (ELEMENT_KEYWORDS3.equals(element.getName())) [ FD ]
Line_32 $$ if (ELEMENT_KEYWORDS.equals(element.getName())) -->Line_33 $$ boolean ignoreCase = Boolean.valueOf(element.getAttributeValue(ATTRIBUTE_IGNORE_CASE)).booleanValue()[ CD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_17 $$ table.setHexPrefix(value)[ FD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_29 $$ table.setHasStringEscapes(Boolean.valueOf(value).booleanValue())[ FD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_35 $$ loadKeywords(element, table.getKeywords1())[ FD ]
Line_38 $$ if (ELEMENT_KEYWORDS3.equals(element.getName())) -->Line_40 $$ if (ELEMENT_KEYWORDS4.equals(element.getName())) [ CD ]
Line_16 $$ if (VALUE_HEX_PREFIX.equals(name)) -->Line_17 $$ table.setHexPrefix(value)[ CD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_33 $$ boolean ignoreCase = Boolean.valueOf(element.getAttributeValue(ATTRIBUTE_IGNORE_CASE)).booleanValue()[ FD ]
Line_20 $$ if (VALUE_LINE_COMMENT_AT_START.equals(name)) -->Line_22 $$ if (VALUE_HAS_BRACES.equals(name)) [ CD ]
Line_45 $$ if (DUMP_TABLE) -->Line_47 $$ writeTable(element, table)[ CD ]
Line_2 $$ public static SyntaxTable readSyntaxTable(@NotNull Element root) -->Line_54 $$ return table[ CD ]
Line_8 $$ String name = e.getAttributeValue(ATTRIBUTE_NAME)-->Line_22 $$ if (VALUE_HAS_BRACES.equals(name)) [ FD ]
Line_12 $$ if (VALUE_COMMENT_START.equals(name)) -->Line_14 $$ if (VALUE_COMMENT_END.equals(name)) [ CD ]
Line_18 $$ if (VALUE_NUM_POSTFIXES.equals(name)) -->Line_19 $$ table.setNumPostfixChars(value)[ CD ]
Line_8 $$ String name = e.getAttributeValue(ATTRIBUTE_NAME)-->Line_26 $$ if (VALUE_HAS_PARENS.equals(name)) [ FD ]
Line_9 $$ String value = e.getAttributeValue(ATTRIBUTE_VALUE)-->Line_27 $$ table.setHasParens(Boolean.valueOf(value).booleanValue())[ FD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_41 $$ loadKeywords(element, table.getKeywords4())[ FD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_37 $$ loadKeywords(element, table.getKeywords2())[ FD ]
Line_9 $$ String value = e.getAttributeValue(ATTRIBUTE_VALUE)-->Line_15 $$ table.setEndComment(value)[ FD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_50 $$ outputter.output((Element) element.getContent().get(0), System.out)[ FD ]
Line_32 $$ if (ELEMENT_KEYWORDS.equals(element.getName())) -->Line_35 $$ loadKeywords(element, table.getKeywords1())[ CD ]
Line_18 $$ if (VALUE_NUM_POSTFIXES.equals(name)) -->Line_20 $$ if (VALUE_LINE_COMMENT_AT_START.equals(name)) [ CD ]
Line_5 $$ if (ELEMENT_OPTIONS.equals(element.getName())) -->Line_32 $$ if (ELEMENT_KEYWORDS.equals(element.getName())) [ CD ]
Line_9 $$ String value = e.getAttributeValue(ATTRIBUTE_VALUE)-->Line_13 $$ table.setStartComment(value)[ FD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_25 $$ table.setHasBrackets(Boolean.valueOf(value).booleanValue())[ FD ]
Line_9 $$ String value = e.getAttributeValue(ATTRIBUTE_VALUE)-->Line_23 $$ table.setHasBraces(Boolean.valueOf(value).booleanValue())[ FD ]
Line_22 $$ if (VALUE_HAS_BRACES.equals(name)) -->Line_23 $$ table.setHasBraces(Boolean.valueOf(value).booleanValue())[ CD ]
Line_24 $$ if (VALUE_HAS_BRACKETS.equals(name)) -->Line_25 $$ table.setHasBrackets(Boolean.valueOf(value).booleanValue())[ CD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_27 $$ table.setHasParens(Boolean.valueOf(value).booleanValue())[ FD ]
Line_16 $$ if (VALUE_HEX_PREFIX.equals(name)) -->Line_18 $$ if (VALUE_NUM_POSTFIXES.equals(name)) [ CD ]
Line_45 $$ if (DUMP_TABLE) -->Line_48 $$ XMLOutputter outputter = JDOMUtil.createOutputter("\n")[ CD ]
Line_9 $$ String value = e.getAttributeValue(ATTRIBUTE_VALUE)-->Line_21 $$ table.lineCommentOnlyAtStart = Boolean.valueOf(value).booleanValue()[ FD ]
Line_40 $$ if (ELEMENT_KEYWORDS4.equals(element.getName())) -->Line_41 $$ loadKeywords(element, table.getKeywords4())[ CD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_39 $$ loadKeywords(element, table.getKeywords3())[ FD ]
Line_10 $$ if (VALUE_LINE_COMMENT.equals(name)) -->Line_11 $$ table.setLineComment(value)[ CD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_19 $$ table.setNumPostfixChars(value)[ FD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_34 $$ table.setIgnoreCase(ignoreCase)[ FD ]
Line_4 $$ for (Element element : root.getChildren()) -->Line_47 $$ writeTable(element, table)[ FD ]
Line_26 $$ if (VALUE_HAS_PARENS.equals(name)) -->Line_27 $$ table.setHasParens(Boolean.valueOf(value).booleanValue())[ CD ]
Line_3 $$ SyntaxTable table = new SyntaxTable()-->Line_23 $$ table.setHasBraces(Boolean.valueOf(value).booleanValue())[ FD ]
Line_8 $$ String name = e.getAttributeValue(ATTRIBUTE_NAME)-->Line_28 $$ if (VALUE_HAS_STRING_ESCAPES.equals(name)) [ FD ]
Line_24 $$ if (VALUE_HAS_BRACKETS.equals(name)) -->Line_26 $$ if (VALUE_HAS_PARENS.equals(name)) [ CD ]
