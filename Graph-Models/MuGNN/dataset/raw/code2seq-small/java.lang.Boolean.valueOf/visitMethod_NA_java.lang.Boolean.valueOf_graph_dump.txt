Line_47 $$ if (aClass.findFieldByName(computedFieldName, true) == null && aClass.findFieldByName(computedStaticFieldName, true) == null) -->Line_48 $$ return[ CD ]
Line_15 $$ setter = false-->Line_23 $$ setter = false[ FD ]
Line_36 $$ final String decapitalized = decapitalize(extractedFieldName)-->Line_37 $$ final String computedFieldName = codeStyleManager.propertyNameToVariableName(decapitalized, VariableKind.FIELD)[ FD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_35 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(method.getProject())[ CD ]
Line_7 $$ final String extractedFieldName-->Line_14 $$ extractedFieldName = name.substring(3)[ FD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_7 $$ final String extractedFieldName[ CD ]
Line_39 $$ if (fieldName.equals(computedFieldName) || fieldName.equals(computedStaticFieldName)) -->Line_40 $$ return[ CD ]
Line_38 $$ final String computedStaticFieldName = codeStyleManager.propertyNameToVariableName(decapitalized, VariableKind.STATIC_FINAL_FIELD)-->Line_39 $$ if (fieldName.equals(computedFieldName) || fieldName.equals(computedStaticFieldName)) [ FD ]
Line_5 $$ final String fieldName-->Line_21 $$ fieldName = getterField.getName()[ FD ]
Line_24 $$ if (nameStartsWith(name, "set")) -->Line_26 $$ if (setterField == null) [ CD ]
Line_37 $$ final String computedFieldName = codeStyleManager.propertyNameToVariableName(decapitalized, VariableKind.FIELD)-->Line_47 $$ if (aClass.findFieldByName(computedFieldName, true) == null && aClass.findFieldByName(computedStaticFieldName, true) == null) [ FD ]
Line_16 $$ if (nameStartsWith(name, "is")) -->Line_22 $$ extractedFieldName = name.substring(2)[ CD ]
Line_16 $$ if (nameStartsWith(name, "is")) -->Line_17 $$ final PsiField getterField = PropertyUtil.getFieldOfGetter(method)[ CD ]
Line_4 $$ final String name = method.getName()-->Line_8 $$ if (nameStartsWith(name, "get")) [ FD ]
Line_6 $$ final boolean setter-->Line_15 $$ setter = false[ FD ]
Line_5 $$ final String fieldName-->Line_29 $$ fieldName = setterField.getName()[ FD ]
Line_16 $$ if (nameStartsWith(name, "is")) -->Line_23 $$ setter = false[ CD ]
Line_24 $$ if (nameStartsWith(name, "set")) -->Line_30 $$ extractedFieldName = name.substring(3)[ CD ]
Line_14 $$ extractedFieldName = name.substring(3)-->Line_36 $$ final String decapitalized = decapitalize(extractedFieldName)[ FD ]
Line_9 $$ final PsiField getterField = PropertyUtil.getFieldOfGetter(method)-->Line_18 $$ if (getterField == null) [ FD ]
Line_25 $$ final PsiField setterField = PropertyUtil.getFieldOfSetter(method)-->Line_26 $$ if (setterField == null) [ FD ]
Line_26 $$ if (setterField == null) -->Line_27 $$ return[ CD ]
Line_6 $$ final boolean setter-->Line_51 $$ registerMethodError(method, Boolean.valueOf(setter), fieldName)[ FD ]
Line_35 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(method.getProject())-->Line_38 $$ final String computedStaticFieldName = codeStyleManager.propertyNameToVariableName(decapitalized, VariableKind.STATIC_FINAL_FIELD)[ FD ]
Line_8 $$ if (nameStartsWith(name, "get")) -->Line_9 $$ final PsiField getterField = PropertyUtil.getFieldOfGetter(method)[ CD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_43 $$ final PsiClass aClass = method.getContainingClass()[ FD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_25 $$ final PsiField setterField = PropertyUtil.getFieldOfSetter(method)[ FD ]
Line_38 $$ final String computedStaticFieldName = codeStyleManager.propertyNameToVariableName(decapitalized, VariableKind.STATIC_FINAL_FIELD)-->Line_47 $$ if (aClass.findFieldByName(computedFieldName, true) == null && aClass.findFieldByName(computedStaticFieldName, true) == null) [ FD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_42 $$ if (onlyWarnWhenFieldPresent) [ CD ]
Line_21 $$ fieldName = getterField.getName()-->Line_39 $$ if (fieldName.equals(computedFieldName) || fieldName.equals(computedStaticFieldName)) [ FD ]
Line_31 $$ setter = true-->Line_51 $$ registerMethodError(method, Boolean.valueOf(setter), fieldName)[ FD ]
Line_5 $$ final String fieldName-->Line_51 $$ registerMethodError(method, Boolean.valueOf(setter), fieldName)[ FD ]
Line_8 $$ if (nameStartsWith(name, "get")) -->Line_15 $$ setter = false[ CD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_17 $$ final PsiField getterField = PropertyUtil.getFieldOfGetter(method)[ FD ]
Line_16 $$ if (nameStartsWith(name, "is")) -->Line_24 $$ if (nameStartsWith(name, "set")) [ CD ]
Line_8 $$ if (nameStartsWith(name, "get")) -->Line_16 $$ if (nameStartsWith(name, "is")) [ CD ]
Line_15 $$ setter = false-->Line_51 $$ registerMethodError(method, Boolean.valueOf(setter), fieldName)[ FD ]
Line_29 $$ fieldName = setterField.getName()-->Line_51 $$ registerMethodError(method, Boolean.valueOf(setter), fieldName)[ FD ]
Line_5 $$ final String fieldName-->Line_13 $$ fieldName = getterField.getName()[ FD ]
Line_15 $$ setter = false-->Line_31 $$ setter = true[ FD ]
Line_4 $$ final String name = method.getName()-->Line_24 $$ if (nameStartsWith(name, "set")) [ FD ]
Line_13 $$ fieldName = getterField.getName()-->Line_29 $$ fieldName = setterField.getName()[ FD ]
Line_9 $$ final PsiField getterField = PropertyUtil.getFieldOfGetter(method)-->Line_13 $$ fieldName = getterField.getName()[ FD ]
Line_8 $$ if (nameStartsWith(name, "get")) -->Line_10 $$ if (getterField == null) [ CD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_4 $$ final String name = method.getName()[ FD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_3 $$ super.visitMethod(method)[ CD ]
Line_10 $$ if (getterField == null) -->Line_11 $$ return[ CD ]
Line_18 $$ if (getterField == null) -->Line_19 $$ return[ CD ]
Line_37 $$ final String computedFieldName = codeStyleManager.propertyNameToVariableName(decapitalized, VariableKind.FIELD)-->Line_39 $$ if (fieldName.equals(computedFieldName) || fieldName.equals(computedStaticFieldName)) [ FD ]
Line_7 $$ final String extractedFieldName-->Line_36 $$ final String decapitalized = decapitalize(extractedFieldName)[ FD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_9 $$ final PsiField getterField = PropertyUtil.getFieldOfGetter(method)[ FD ]
Line_13 $$ fieldName = getterField.getName()-->Line_21 $$ fieldName = getterField.getName()[ FD ]
Line_42 $$ if (onlyWarnWhenFieldPresent) -->Line_43 $$ final PsiClass aClass = method.getContainingClass()[ CD ]
Line_8 $$ if (nameStartsWith(name, "get")) -->Line_13 $$ fieldName = getterField.getName()[ CD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_36 $$ final String decapitalized = decapitalize(extractedFieldName)[ CD ]
Line_16 $$ if (nameStartsWith(name, "is")) -->Line_18 $$ if (getterField == null) [ CD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_3 $$ super.visitMethod(method)[ FD ]
Line_25 $$ final PsiField setterField = PropertyUtil.getFieldOfSetter(method)-->Line_29 $$ fieldName = setterField.getName()[ FD ]
Line_24 $$ if (nameStartsWith(name, "set")) -->Line_29 $$ fieldName = setterField.getName()[ CD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_38 $$ final String computedStaticFieldName = codeStyleManager.propertyNameToVariableName(decapitalized, VariableKind.STATIC_FINAL_FIELD)[ CD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_37 $$ final String computedFieldName = codeStyleManager.propertyNameToVariableName(decapitalized, VariableKind.FIELD)[ CD ]
Line_23 $$ setter = false-->Line_31 $$ setter = true[ FD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_5 $$ final String fieldName[ CD ]
Line_6 $$ final boolean setter-->Line_31 $$ setter = true[ FD ]
Line_29 $$ fieldName = setterField.getName()-->Line_39 $$ if (fieldName.equals(computedFieldName) || fieldName.equals(computedStaticFieldName)) [ FD ]
Line_4 $$ final String name = method.getName()-->Line_22 $$ extractedFieldName = name.substring(2)[ FD ]
Line_21 $$ fieldName = getterField.getName()-->Line_29 $$ fieldName = setterField.getName()[ FD ]
Line_6 $$ final boolean setter-->Line_23 $$ setter = false[ FD ]
Line_22 $$ extractedFieldName = name.substring(2)-->Line_30 $$ extractedFieldName = name.substring(3)[ FD ]
Line_9 $$ final PsiField getterField = PropertyUtil.getFieldOfGetter(method)-->Line_21 $$ fieldName = getterField.getName()[ FD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_51 $$ registerMethodError(method, Boolean.valueOf(setter), fieldName)[ CD ]
Line_22 $$ extractedFieldName = name.substring(2)-->Line_36 $$ final String decapitalized = decapitalize(extractedFieldName)[ FD ]
Line_24 $$ if (nameStartsWith(name, "set")) -->Line_31 $$ setter = true[ CD ]
Line_23 $$ setter = false-->Line_51 $$ registerMethodError(method, Boolean.valueOf(setter), fieldName)[ FD ]
Line_4 $$ final String name = method.getName()-->Line_16 $$ if (nameStartsWith(name, "is")) [ FD ]
Line_7 $$ final String extractedFieldName-->Line_22 $$ extractedFieldName = name.substring(2)[ FD ]
Line_4 $$ final String name = method.getName()-->Line_14 $$ extractedFieldName = name.substring(3)[ FD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_39 $$ if (fieldName.equals(computedFieldName) || fieldName.equals(computedStaticFieldName)) [ CD ]
Line_30 $$ extractedFieldName = name.substring(3)-->Line_36 $$ final String decapitalized = decapitalize(extractedFieldName)[ FD ]
Line_4 $$ final String name = method.getName()-->Line_30 $$ extractedFieldName = name.substring(3)[ FD ]
Line_14 $$ extractedFieldName = name.substring(3)-->Line_22 $$ extractedFieldName = name.substring(2)[ FD ]
Line_13 $$ fieldName = getterField.getName()-->Line_39 $$ if (fieldName.equals(computedFieldName) || fieldName.equals(computedStaticFieldName)) [ FD ]
Line_36 $$ final String decapitalized = decapitalize(extractedFieldName)-->Line_38 $$ final String computedStaticFieldName = codeStyleManager.propertyNameToVariableName(decapitalized, VariableKind.STATIC_FINAL_FIELD)[ FD ]
Line_21 $$ fieldName = getterField.getName()-->Line_51 $$ registerMethodError(method, Boolean.valueOf(setter), fieldName)[ FD ]
Line_13 $$ fieldName = getterField.getName()-->Line_51 $$ registerMethodError(method, Boolean.valueOf(setter), fieldName)[ FD ]
Line_8 $$ if (nameStartsWith(name, "get")) -->Line_14 $$ extractedFieldName = name.substring(3)[ CD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_35 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(method.getProject())[ FD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_6 $$ final boolean setter[ CD ]
Line_5 $$ final String fieldName-->Line_39 $$ if (fieldName.equals(computedFieldName) || fieldName.equals(computedStaticFieldName)) [ FD ]
Line_35 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(method.getProject())-->Line_37 $$ final String computedFieldName = codeStyleManager.propertyNameToVariableName(decapitalized, VariableKind.FIELD)[ FD ]
Line_42 $$ if (onlyWarnWhenFieldPresent) -->Line_44 $$ if (aClass == null) [ CD ]
Line_7 $$ final String extractedFieldName-->Line_30 $$ extractedFieldName = name.substring(3)[ FD ]
Line_16 $$ if (nameStartsWith(name, "is")) -->Line_21 $$ fieldName = getterField.getName()[ CD ]
Line_14 $$ extractedFieldName = name.substring(3)-->Line_30 $$ extractedFieldName = name.substring(3)[ FD ]
Line_43 $$ final PsiClass aClass = method.getContainingClass()-->Line_47 $$ if (aClass.findFieldByName(computedFieldName, true) == null && aClass.findFieldByName(computedStaticFieldName, true) == null) [ FD ]
Line_24 $$ if (nameStartsWith(name, "set")) -->Line_25 $$ final PsiField setterField = PropertyUtil.getFieldOfSetter(method)[ CD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_8 $$ if (nameStartsWith(name, "get")) [ CD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_51 $$ registerMethodError(method, Boolean.valueOf(setter), fieldName)[ FD ]
Line_24 $$ if (nameStartsWith(name, "set")) -->Line_33 $$ return[ CD ]
Line_43 $$ final PsiClass aClass = method.getContainingClass()-->Line_44 $$ if (aClass == null) [ FD ]
Line_42 $$ if (onlyWarnWhenFieldPresent) -->Line_47 $$ if (aClass.findFieldByName(computedFieldName, true) == null && aClass.findFieldByName(computedStaticFieldName, true) == null) [ CD ]
Line_44 $$ if (aClass == null) -->Line_45 $$ return[ CD ]
Line_2 $$ public void visitMethod(PsiMethod method) -->Line_4 $$ final String name = method.getName()[ CD ]
Line_9 $$ final PsiField getterField = PropertyUtil.getFieldOfGetter(method)-->Line_10 $$ if (getterField == null) [ FD ]
