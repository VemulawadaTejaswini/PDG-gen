Line_39 $$ if (!myTabs.myHorizontalSide && selectedToolbar != null && !selectedToolbar.isEmpty()) -->Line_40 $$ xAddin = selectedToolbar.getPreferredSize().width + 1[ CD ]
Line_24 $$ width = label.getPreferredSize().width + deltaToFit-->Line_28 $$ myTabs.layout(label, eachX, eachY, width, row < data.table.size() - 1 ? myTabs.myHeaderFitSize.height - tabUnderlineFix : myTabs.myHeaderFitSize.height)[ FD ]
Line_22 $$ int width-->Line_28 $$ myTabs.layout(label, eachX, eachY, width, row < data.table.size() - 1 ? myTabs.myHeaderFitSize.height - tabUnderlineFix : myTabs.myHeaderFitSize.height)[ FD ]
Line_36 $$ if (myTabs.getSelectedInfo() != null) -->Line_37 $$ final JBTabsImpl.Toolbar selectedToolbar = myTabs.myInfo2Toolbar.get(myTabs.getSelectedInfo())[ CD ]
Line_11 $$ eachX = insets.left-->Line_31 $$ eachX += width + (lastCell ? 0 : myTabs.getInterTabSpaceLength())[ FD ]
Line_22 $$ int width-->Line_24 $$ width = label.getPreferredSize().width + deltaToFit[ FD ]
Line_7 $$ int eachX-->Line_26 $$ width = data.toFitRec.width + insets.left - eachX[ FD ]
Line_2 $$ public LayoutPassInfo layoutTable(List<TabInfo> visibleInfos) -->Line_7 $$ int eachX[ CD ]
Line_13 $$ boolean toAjust = false-->Line_21 $$ label.putClientProperty(JBTabsImpl.STRETCHED_BY_WIDTH, Boolean.valueOf(toAjust))[ FD ]
Line_20 $$ final TabLabel label = myTabs.myInfo2Label.get(tabInfo)-->Line_28 $$ myTabs.layout(label, eachX, eachY, width, row < data.table.size() - 1 ? myTabs.myHeaderFitSize.height - tabUnderlineFix : myTabs.myHeaderFitSize.height)[ FD ]
Line_12 $$ int deltaToFit = 0-->Line_24 $$ width = label.getPreferredSize().width + deltaToFit[ FD ]
Line_36 $$ if (myTabs.getSelectedInfo() != null) -->Line_39 $$ if (!myTabs.myHorizontalSide && selectedToolbar != null && !selectedToolbar.isEmpty()) [ CD ]
Line_13 $$ boolean toAjust = false-->Line_23 $$ if (i < eachRow.myColumns.size() - 1 || !toAjust) [ FD ]
Line_18 $$ for (int i = 0; i < eachRow.myColumns.size(); i++) -->Line_28 $$ myTabs.layout(label, eachX, eachY, width, row < data.table.size() - 1 ? myTabs.myHeaderFitSize.height - tabUnderlineFix : myTabs.myHeaderFitSize.height)[ CD ]
Line_40 $$ xAddin = selectedToolbar.getPreferredSize().width + 1-->Line_43 $$ myTabs.layoutComp(xAddin, eachY + (myTabs.isEditorTabs() ? 0 : 2) - myTabs.getLayoutInsets().top, myTabs.getSelectedInfo().getComponent(), 0, 0)[ FD ]
Line_2 $$ public LayoutPassInfo layoutTable(List<TabInfo> visibleInfos) -->Line_3 $$ myTabs.resetLayout(true)[ CD ]
Line_26 $$ width = data.toFitRec.width + insets.left - eachX-->Line_31 $$ eachX += width + (lastCell ? 0 : myTabs.getInterTabSpaceLength())[ FD ]
Line_38 $$ int xAddin = 0-->Line_40 $$ xAddin = selectedToolbar.getPreferredSize().width + 1[ FD ]
Line_18 $$ for (int i = 0; i < eachRow.myColumns.size(); i++) -->Line_22 $$ int width[ CD ]
Line_11 $$ eachX = insets.left-->Line_26 $$ width = data.toFitRec.width + insets.left - eachX[ FD ]
Line_31 $$ eachX += width + (lastCell ? 0 : myTabs.getInterTabSpaceLength())-->Line_26 $$ width = data.toFitRec.width + insets.left - eachX[ FD ]
Line_22 $$ int width-->Line_26 $$ width = data.toFitRec.width + insets.left - eachX[ FD ]
Line_18 $$ for (int i = 0; i < eachRow.myColumns.size(); i++) -->Line_21 $$ label.putClientProperty(JBTabsImpl.STRETCHED_BY_WIDTH, Boolean.valueOf(toAjust))[ CD ]
Line_18 $$ for (int i = 0; i < eachRow.myColumns.size(); i++) -->Line_19 $$ TabInfo tabInfo = eachRow.myColumns.get(i)[ CD ]
Line_18 $$ for (int i = 0; i < eachRow.myColumns.size(); i++) -->Line_19 $$ TabInfo tabInfo = eachRow.myColumns.get(i)[ FD ]
Line_2 $$ public LayoutPassInfo layoutTable(List<TabInfo> visibleInfos) -->Line_6 $$ int eachY = insets.top[ CD ]
Line_7 $$ int eachX-->Line_28 $$ myTabs.layout(label, eachX, eachY, width, row < data.table.size() - 1 ? myTabs.myHeaderFitSize.height - tabUnderlineFix : myTabs.myHeaderFitSize.height)[ FD ]
Line_26 $$ width = data.toFitRec.width + insets.left - eachX-->Line_28 $$ myTabs.layout(label, eachX, eachY, width, row < data.table.size() - 1 ? myTabs.myHeaderFitSize.height - tabUnderlineFix : myTabs.myHeaderFitSize.height)[ FD ]
Line_18 $$ for (int i = 0; i < eachRow.myColumns.size(); i++) -->Line_31 $$ eachX += width + (lastCell ? 0 : myTabs.getInterTabSpaceLength())[ CD ]
Line_24 $$ width = label.getPreferredSize().width + deltaToFit-->Line_31 $$ eachX += width + (lastCell ? 0 : myTabs.getInterTabSpaceLength())[ FD ]
Line_18 $$ for (int i = 0; i < eachRow.myColumns.size(); i++) -->Line_23 $$ if (i < eachRow.myColumns.size() - 1 || !toAjust) [ CD ]
Line_22 $$ int width-->Line_31 $$ eachX += width + (lastCell ? 0 : myTabs.getInterTabSpaceLength())[ FD ]
Line_6 $$ int eachY = insets.top-->Line_28 $$ myTabs.layout(label, eachX, eachY, width, row < data.table.size() - 1 ? myTabs.myHeaderFitSize.height - tabUnderlineFix : myTabs.myHeaderFitSize.height)[ FD ]
Line_23 $$ if (i < eachRow.myColumns.size() - 1 || !toAjust) -->Line_24 $$ width = label.getPreferredSize().width + deltaToFit[ CD ]
Line_2 $$ public LayoutPassInfo layoutTable(List<TabInfo> visibleInfos) -->Line_9 $$ final int tabUnderlineFix = myTabs.isEditorTabs() ? myTabs.getActiveTabUnderlineHeight() : 0[ CD ]
Line_37 $$ final JBTabsImpl.Toolbar selectedToolbar = myTabs.myInfo2Toolbar.get(myTabs.getSelectedInfo())-->Line_40 $$ xAddin = selectedToolbar.getPreferredSize().width + 1[ FD ]
Line_2 $$ public LayoutPassInfo layoutTable(List<TabInfo> visibleInfos) -->Line_46 $$ return data[ CD ]
Line_38 $$ int xAddin = 0-->Line_43 $$ myTabs.layoutComp(xAddin, eachY + (myTabs.isEditorTabs() ? 0 : 2) - myTabs.getLayoutInsets().top, myTabs.getSelectedInfo().getComponent(), 0, 0)[ FD ]
Line_14 $$ if (eachRow.width < data.toFitRec.width && data.table.size() > 1) -->Line_15 $$ deltaToFit = (int) Math.floor((double) (data.toFitRec.width - eachRow.width) / (double) eachRow.myColumns.size())[ CD ]
Line_19 $$ TabInfo tabInfo = eachRow.myColumns.get(i)-->Line_20 $$ final TabLabel label = myTabs.myInfo2Label.get(tabInfo)[ FD ]
Line_8 $$ int row = 0-->Line_34 $$ row++[ FD ]
Line_2 $$ public LayoutPassInfo layoutTable(List<TabInfo> visibleInfos) -->Line_4 $$ final TablePassInfo data = computeLayoutTable(visibleInfos)[ FD ]
Line_36 $$ if (myTabs.getSelectedInfo() != null) -->Line_38 $$ int xAddin = 0[ CD ]
Line_18 $$ for (int i = 0; i < eachRow.myColumns.size(); i++) -->Line_20 $$ final TabLabel label = myTabs.myInfo2Label.get(tabInfo)[ CD ]
Line_20 $$ final TabLabel label = myTabs.myInfo2Label.get(tabInfo)-->Line_24 $$ width = label.getPreferredSize().width + deltaToFit[ FD ]
Line_18 $$ for (int i = 0; i < eachRow.myColumns.size(); i++) -->Line_29 $$ label.setAlignmentToCenter(deltaToFit > 0)[ CD ]
Line_18 $$ for (int i = 0; i < eachRow.myColumns.size(); i++) -->Line_30 $$ boolean lastCell = i == eachRow.myColumns.size() - 1[ CD ]
Line_7 $$ int eachX-->Line_11 $$ eachX = insets.left[ FD ]
Line_16 $$ toAjust = true-->Line_23 $$ if (i < eachRow.myColumns.size() - 1 || !toAjust) [ FD ]
Line_2 $$ public LayoutPassInfo layoutTable(List<TabInfo> visibleInfos) -->Line_8 $$ int row = 0[ CD ]
Line_37 $$ final JBTabsImpl.Toolbar selectedToolbar = myTabs.myInfo2Toolbar.get(myTabs.getSelectedInfo())-->Line_41 $$ myTabs.layout(selectedToolbar, insets.left + 1, eachY + 1, selectedToolbar.getPreferredSize().width, myTabs.getHeight() - eachY - insets.bottom - 2)[ FD ]
Line_31 $$ eachX += width + (lastCell ? 0 : myTabs.getInterTabSpaceLength())-->Line_28 $$ myTabs.layout(label, eachX, eachY, width, row < data.table.size() - 1 ? myTabs.myHeaderFitSize.height - tabUnderlineFix : myTabs.myHeaderFitSize.height)[ FD ]
Line_16 $$ toAjust = true-->Line_21 $$ label.putClientProperty(JBTabsImpl.STRETCHED_BY_WIDTH, Boolean.valueOf(toAjust))[ FD ]
Line_24 $$ width = label.getPreferredSize().width + deltaToFit-->Line_26 $$ width = data.toFitRec.width + insets.left - eachX[ FD ]
Line_23 $$ if (i < eachRow.myColumns.size() - 1 || !toAjust) -->Line_26 $$ width = data.toFitRec.width + insets.left - eachX[ CD ]
Line_39 $$ if (!myTabs.myHorizontalSide && selectedToolbar != null && !selectedToolbar.isEmpty()) -->Line_41 $$ myTabs.layout(selectedToolbar, insets.left + 1, eachY + 1, selectedToolbar.getPreferredSize().width, myTabs.getHeight() - eachY - insets.bottom - 2)[ CD ]
Line_11 $$ eachX = insets.left-->Line_28 $$ myTabs.layout(label, eachX, eachY, width, row < data.table.size() - 1 ? myTabs.myHeaderFitSize.height - tabUnderlineFix : myTabs.myHeaderFitSize.height)[ FD ]
Line_2 $$ public LayoutPassInfo layoutTable(List<TabInfo> visibleInfos) -->Line_5 $$ final Insets insets = myTabs.getLayoutInsets()[ CD ]
Line_12 $$ int deltaToFit = 0-->Line_15 $$ deltaToFit = (int) Math.floor((double) (data.toFitRec.width - eachRow.width) / (double) eachRow.myColumns.size())[ FD ]
Line_15 $$ deltaToFit = (int) Math.floor((double) (data.toFitRec.width - eachRow.width) / (double) eachRow.myColumns.size())-->Line_24 $$ width = label.getPreferredSize().width + deltaToFit[ FD ]
Line_20 $$ final TabLabel label = myTabs.myInfo2Label.get(tabInfo)-->Line_29 $$ label.setAlignmentToCenter(deltaToFit > 0)[ FD ]
Line_7 $$ int eachX-->Line_31 $$ eachX += width + (lastCell ? 0 : myTabs.getInterTabSpaceLength())[ FD ]
Line_6 $$ int eachY = insets.top-->Line_33 $$ eachY += myTabs.myHeaderFitSize.height - 1 + myTabs.getInterTabSpaceLength() - (row < data.table.size() - 1 ? tabUnderlineFix : 0)[ FD ]
Line_13 $$ boolean toAjust = false-->Line_16 $$ toAjust = true[ FD ]
Line_14 $$ if (eachRow.width < data.toFitRec.width && data.table.size() > 1) -->Line_16 $$ toAjust = true[ CD ]
Line_2 $$ public LayoutPassInfo layoutTable(List<TabInfo> visibleInfos) -->Line_36 $$ if (myTabs.getSelectedInfo() != null) [ CD ]
Line_37 $$ final JBTabsImpl.Toolbar selectedToolbar = myTabs.myInfo2Toolbar.get(myTabs.getSelectedInfo())-->Line_39 $$ if (!myTabs.myHorizontalSide && selectedToolbar != null && !selectedToolbar.isEmpty()) [ FD ]
Line_2 $$ public LayoutPassInfo layoutTable(List<TabInfo> visibleInfos) -->Line_4 $$ final TablePassInfo data = computeLayoutTable(visibleInfos)[ CD ]
Line_20 $$ final TabLabel label = myTabs.myInfo2Label.get(tabInfo)-->Line_21 $$ label.putClientProperty(JBTabsImpl.STRETCHED_BY_WIDTH, Boolean.valueOf(toAjust))[ FD ]
Line_36 $$ if (myTabs.getSelectedInfo() != null) -->Line_43 $$ myTabs.layoutComp(xAddin, eachY + (myTabs.isEditorTabs() ? 0 : 2) - myTabs.getLayoutInsets().top, myTabs.getSelectedInfo().getComponent(), 0, 0)[ CD ]
