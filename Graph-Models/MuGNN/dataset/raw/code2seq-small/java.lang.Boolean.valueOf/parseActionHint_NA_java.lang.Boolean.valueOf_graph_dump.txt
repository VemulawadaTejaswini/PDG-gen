Line_11 $$ Matcher matcher = pattern.matcher(contents)-->Line_13 $$ final String text = matcher.group(1)[ FD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_12 $$ assertTrue("No comment found in " + file.getVirtualFile(), matcher.matches())[ CD ]
Line_5 $$ String comment = commenter.getLineCommentPrefix()-->Line_10 $$ Pattern pattern = Pattern.compile("^" + comment.replace("*", "\\*") + actionPattern, Pattern.DOTALL)[ FD ]
Line_5 $$ String comment = commenter.getLineCommentPrefix()-->Line_7 $$ comment = commenter.getBlockCommentPrefix()[ FD ]
Line_6 $$ if (comment == null) -->Line_7 $$ comment = commenter.getBlockCommentPrefix()[ CD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_11 $$ Matcher matcher = pattern.matcher(contents)[ CD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_4 $$ final Commenter commenter = LanguageCommenters.INSTANCE.forLanguage(hostFile.getLanguage())[ CD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_12 $$ assertTrue("No comment found in " + file.getVirtualFile(), matcher.matches())[ FD ]
Line_7 $$ comment = commenter.getBlockCommentPrefix()-->Line_10 $$ Pattern pattern = Pattern.compile("^" + comment.replace("*", "\\*") + actionPattern, Pattern.DOTALL)[ FD ]
Line_11 $$ Matcher matcher = pattern.matcher(contents)-->Line_12 $$ assertTrue("No comment found in " + file.getVirtualFile(), matcher.matches())[ FD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_5 $$ String comment = commenter.getLineCommentPrefix()[ CD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_11 $$ Matcher matcher = pattern.matcher(contents)[ FD ]
Line_14 $$ final Boolean actionShouldBeAvailable = Boolean.valueOf(matcher.group(2))-->Line_15 $$ return Pair.create(text, actionShouldBeAvailable)[ FD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_3 $$ PsiFile hostFile = InjectedLanguageManager.getInstance(file.getProject()).getTopLevelFile(file)[ FD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_15 $$ return Pair.create(text, actionShouldBeAvailable)[ CD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_3 $$ PsiFile hostFile = InjectedLanguageManager.getInstance(file.getProject()).getTopLevelFile(file)[ CD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_10 $$ Pattern pattern = Pattern.compile("^" + comment.replace("*", "\\*") + actionPattern, Pattern.DOTALL)[ CD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_6 $$ if (comment == null) [ CD ]
Line_13 $$ final String text = matcher.group(1)-->Line_15 $$ return Pair.create(text, actionShouldBeAvailable)[ FD ]
Line_3 $$ PsiFile hostFile = InjectedLanguageManager.getInstance(file.getProject()).getTopLevelFile(file)-->Line_4 $$ final Commenter commenter = LanguageCommenters.INSTANCE.forLanguage(hostFile.getLanguage())[ FD ]
Line_4 $$ final Commenter commenter = LanguageCommenters.INSTANCE.forLanguage(hostFile.getLanguage())-->Line_5 $$ String comment = commenter.getLineCommentPrefix()[ FD ]
Line_4 $$ final Commenter commenter = LanguageCommenters.INSTANCE.forLanguage(hostFile.getLanguage())-->Line_7 $$ comment = commenter.getBlockCommentPrefix()[ FD ]
Line_5 $$ String comment = commenter.getLineCommentPrefix()-->Line_6 $$ if (comment == null) [ FD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_13 $$ final String text = matcher.group(1)[ CD ]
Line_2 $$ public static Pair<String, Boolean> parseActionHint(@NotNull PsiFile file, @NotNull String contents, @NotNull @NonNls @RegExp String actionPattern) -->Line_14 $$ final Boolean actionShouldBeAvailable = Boolean.valueOf(matcher.group(2))[ CD ]
Line_10 $$ Pattern pattern = Pattern.compile("^" + comment.replace("*", "\\*") + actionPattern, Pattern.DOTALL)-->Line_11 $$ Matcher matcher = pattern.matcher(contents)[ FD ]
Line_11 $$ Matcher matcher = pattern.matcher(contents)-->Line_14 $$ final Boolean actionShouldBeAvailable = Boolean.valueOf(matcher.group(2))[ FD ]
