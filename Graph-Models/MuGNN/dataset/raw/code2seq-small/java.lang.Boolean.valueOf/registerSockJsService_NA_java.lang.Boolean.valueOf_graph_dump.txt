Line_18 $$ String registerDefaults = transportHandlersElement.getAttribute("register-defaults")-->Line_19 $$ if (registerDefaults.equals("false")) [ FD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_73 $$ if (!attrValue.isEmpty()) [ FD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_32 $$ ManagedList<? super Object> interceptors = WebSocketNamespaceUtils.parseBeanSubElements(interceptorsElement, context)[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_80 $$ sockJsServiceDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)[ CD ]
Line_4 $$ if (sockJsElement != null) -->Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")[ CD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_57 $$ if (!attrValue.isEmpty()) [ FD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_66 $$ sockJsServiceDef.getPropertyValues().add("heartbeatTime", Long.valueOf(attrValue))[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_66 $$ sockJsServiceDef.getPropertyValues().add("heartbeatTime", Long.valueOf(attrValue))[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")[ FD ]
Line_26 $$ RootBeanDefinition transportHandler = new RootBeanDefinition(WebSocketTransportHandler.class)-->Line_28 $$ transportHandler.getConstructorArgumentValues().addIndexedArgumentValue(0, handshakeHandlerRef)[ FD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_50 $$ sockJsServiceDef.getPropertyValues().add("sessionCookieNeeded", Boolean.valueOf(attrValue))[ FD ]
Line_49 $$ if (!attrValue.isEmpty()) -->Line_50 $$ sockJsServiceDef.getPropertyValues().add("sessionCookieNeeded", Boolean.valueOf(attrValue))[ CD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_54 $$ sockJsServiceDef.getPropertyValues().add("streamBytesLimit", Integer.valueOf(attrValue))[ FD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_62 $$ sockJsServiceDef.getPropertyValues().add("httpMessageCacheSize", Integer.valueOf(attrValue))[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")[ CD ]
Line_4 $$ if (sockJsElement != null) -->Line_73 $$ if (!attrValue.isEmpty()) [ CD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_15 $$ sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(0, scheduler)[ FD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")[ FD ]
Line_24 $$ if (handshakeHandler != null) -->Line_25 $$ RuntimeBeanReference handshakeHandlerRef = new RuntimeBeanReference(handshakeHandler.getAttribute("ref"))[ CD ]
Line_4 $$ if (sockJsElement != null) -->Line_77 $$ if (!attrValue.isEmpty()) [ CD ]
Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")-->Line_77 $$ if (!attrValue.isEmpty()) [ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")[ CD ]
Line_73 $$ if (!attrValue.isEmpty()) -->Line_74 $$ sockJsServiceDef.getPropertyValues().add("messageCodec", new RuntimeBeanReference(attrValue))[ CD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")[ FD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_78 $$ sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue))[ FD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_78 $$ sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue))[ FD ]
Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")-->Line_78 $$ sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue))[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_62 $$ sockJsServiceDef.getPropertyValues().add("httpMessageCacheSize", Integer.valueOf(attrValue))[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_37 $$ originHandshakeInterceptor.getPropertyValues().add("allowedOrigins", allowedOrigins)[ CD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_81 $$ String sockJsServiceName = context.getReaderContext().registerWithGeneratedName(sockJsServiceDef)[ FD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_81 $$ String sockJsServiceName = context.getReaderContext().registerWithGeneratedName(sockJsServiceDef)[ FD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_70 $$ sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue)[ FD ]
Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")-->Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")[ FD ]
Line_32 $$ ManagedList<? super Object> interceptors = WebSocketNamespaceUtils.parseBeanSubElements(interceptorsElement, context)-->Line_39 $$ sockJsServiceDef.getPropertyValues().add("handshakeInterceptors", interceptors)[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")[ FD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_61 $$ if (!attrValue.isEmpty()) [ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")[ FD ]
Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")-->Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")[ FD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")[ FD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_77 $$ if (!attrValue.isEmpty()) [ FD ]
Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")-->Line_69 $$ if (!attrValue.isEmpty()) [ FD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_42 $$ sockJsServiceDef.getPropertyValues().add("name", attrValue)[ FD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")[ FD ]
Line_34 $$ List<String> allowedOrigins = Arrays.asList(StringUtils.tokenizeToStringArray(allowedOriginsAttribute, ","))-->Line_37 $$ originHandshakeInterceptor.getPropertyValues().add("allowedOrigins", allowedOrigins)[ FD ]
Line_24 $$ if (handshakeHandler != null) -->Line_29 $$ sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1, transportHandler)[ CD ]
Line_9 $$ String customTaskSchedulerName = sockJsElement.getAttribute("scheduler")-->Line_10 $$ if (!customTaskSchedulerName.isEmpty()) [ FD ]
Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")-->Line_69 $$ if (!attrValue.isEmpty()) [ FD ]
Line_31 $$ Element interceptorsElement = DomUtils.getChildElementByTagName(element, "handshake-interceptors")-->Line_32 $$ ManagedList<? super Object> interceptors = WebSocketNamespaceUtils.parseBeanSubElements(interceptorsElement, context)[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_77 $$ if (!attrValue.isEmpty()) [ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_33 $$ String allowedOriginsAttribute = element.getAttribute("allowed-origins")[ CD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_29 $$ sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1, transportHandler)[ FD ]
Line_17 $$ if (transportHandlersElement != null) -->Line_18 $$ String registerDefaults = transportHandlersElement.getAttribute("register-defaults")[ CD ]
Line_10 $$ if (!customTaskSchedulerName.isEmpty()) -->Line_13 $$ scheduler = registerScheduler(schedulerName, context, source)[ CD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_65 $$ if (!attrValue.isEmpty()) [ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")[ FD ]
Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")-->Line_78 $$ sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue))[ FD ]
Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")-->Line_66 $$ sockJsServiceDef.getPropertyValues().add("heartbeatTime", Long.valueOf(attrValue))[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_78 $$ sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue))[ FD ]
Line_77 $$ if (!attrValue.isEmpty()) -->Line_78 $$ sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue))[ CD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_53 $$ if (!attrValue.isEmpty()) [ FD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_27 $$ transportHandler.setSource(source)[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_50 $$ sockJsServiceDef.getPropertyValues().add("sessionCookieNeeded", Boolean.valueOf(attrValue))[ FD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_40 $$ String attrValue = sockJsElement.getAttribute("name")[ FD ]
Line_16 $$ Element transportHandlersElement = DomUtils.getChildElementByTagName(sockJsElement, "transport-handlers")-->Line_22 $$ ManagedList<?> transportHandlers = parseBeanSubElements(transportHandlersElement, context)[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_7 $$ sockJsServiceDef.setSource(source)[ CD ]
Line_65 $$ if (!attrValue.isEmpty()) -->Line_66 $$ sockJsServiceDef.getPropertyValues().add("heartbeatTime", Long.valueOf(attrValue))[ CD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_69 $$ if (!attrValue.isEmpty()) [ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_69 $$ if (!attrValue.isEmpty()) [ FD ]
Line_26 $$ RootBeanDefinition transportHandler = new RootBeanDefinition(WebSocketTransportHandler.class)-->Line_29 $$ sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1, transportHandler)[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_65 $$ if (!attrValue.isEmpty()) [ FD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_66 $$ sockJsServiceDef.getPropertyValues().add("heartbeatTime", Long.valueOf(attrValue))[ FD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_66 $$ sockJsServiceDef.getPropertyValues().add("heartbeatTime", Long.valueOf(attrValue))[ FD ]
Line_10 $$ if (!customTaskSchedulerName.isEmpty()) -->Line_11 $$ scheduler = new RuntimeBeanReference(customTaskSchedulerName)[ CD ]
Line_11 $$ scheduler = new RuntimeBeanReference(customTaskSchedulerName)-->Line_15 $$ sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(0, scheduler)[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_57 $$ if (!attrValue.isEmpty()) [ CD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")[ FD ]
Line_24 $$ if (handshakeHandler != null) -->Line_26 $$ RootBeanDefinition transportHandler = new RootBeanDefinition(WebSocketTransportHandler.class)[ CD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_69 $$ if (!attrValue.isEmpty()) [ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_17 $$ if (transportHandlersElement != null) [ CD ]
Line_16 $$ Element transportHandlersElement = DomUtils.getChildElementByTagName(sockJsElement, "transport-handlers")-->Line_18 $$ String registerDefaults = transportHandlersElement.getAttribute("register-defaults")[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_32 $$ ManagedList<? super Object> interceptors = WebSocketNamespaceUtils.parseBeanSubElements(interceptorsElement, context)[ CD ]
Line_4 $$ if (sockJsElement != null) -->Line_40 $$ String attrValue = sockJsElement.getAttribute("name")[ CD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")[ FD ]
Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")-->Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_45 $$ if (!attrValue.isEmpty()) [ CD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_66 $$ sockJsServiceDef.getPropertyValues().add("heartbeatTime", Long.valueOf(attrValue))[ FD ]
Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")-->Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")[ FD ]
Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")-->Line_77 $$ if (!attrValue.isEmpty()) [ FD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_77 $$ if (!attrValue.isEmpty()) [ FD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_78 $$ sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue))[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_42 $$ sockJsServiceDef.getPropertyValues().add("name", attrValue)[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_77 $$ if (!attrValue.isEmpty()) [ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_58 $$ sockJsServiceDef.getPropertyValues().add("disconnectDelay", Long.valueOf(attrValue))[ FD ]
Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")-->Line_65 $$ if (!attrValue.isEmpty()) [ FD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_74 $$ sockJsServiceDef.getPropertyValues().add("messageCodec", new RuntimeBeanReference(attrValue))[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_70 $$ sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue)[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")[ FD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_84 $$ return null[ CD ]
Line_4 $$ if (sockJsElement != null) -->Line_5 $$ Element handshakeHandler = DomUtils.getChildElementByTagName(element, "handshake-handler")[ CD ]
Line_4 $$ if (sockJsElement != null) -->Line_10 $$ if (!customTaskSchedulerName.isEmpty()) [ CD ]
Line_8 $$ Object scheduler-->Line_13 $$ scheduler = registerScheduler(schedulerName, context, source)[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")[ FD ]
Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")-->Line_77 $$ if (!attrValue.isEmpty()) [ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")[ FD ]
Line_32 $$ ManagedList<? super Object> interceptors = WebSocketNamespaceUtils.parseBeanSubElements(interceptorsElement, context)-->Line_38 $$ interceptors.add(originHandshakeInterceptor)[ FD ]
Line_69 $$ if (!attrValue.isEmpty()) -->Line_70 $$ sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue)[ CD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_80 $$ sockJsServiceDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)[ FD ]
Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")-->Line_77 $$ if (!attrValue.isEmpty()) [ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")[ CD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_61 $$ if (!attrValue.isEmpty()) [ FD ]
Line_36 $$ RootBeanDefinition originHandshakeInterceptor = new RootBeanDefinition(OriginHandshakeInterceptor.class)-->Line_37 $$ originHandshakeInterceptor.getPropertyValues().add("allowedOrigins", allowedOrigins)[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_62 $$ sockJsServiceDef.getPropertyValues().add("httpMessageCacheSize", Integer.valueOf(attrValue))[ FD ]
Line_8 $$ Object scheduler-->Line_15 $$ sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(0, scheduler)[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_41 $$ if (!attrValue.isEmpty()) [ CD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_9 $$ String customTaskSchedulerName = sockJsElement.getAttribute("scheduler")[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_46 $$ sockJsServiceDef.getPropertyValues().add("webSocketEnabled", Boolean.valueOf(attrValue))[ FD ]
Line_26 $$ RootBeanDefinition transportHandler = new RootBeanDefinition(WebSocketTransportHandler.class)-->Line_27 $$ transportHandler.setSource(source)[ FD ]
Line_17 $$ if (transportHandlersElement != null) -->Line_19 $$ if (registerDefaults.equals("false")) [ CD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_58 $$ sockJsServiceDef.getPropertyValues().add("disconnectDelay", Long.valueOf(attrValue))[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_61 $$ if (!attrValue.isEmpty()) [ CD ]
Line_36 $$ RootBeanDefinition originHandshakeInterceptor = new RootBeanDefinition(OriginHandshakeInterceptor.class)-->Line_38 $$ interceptors.add(originHandshakeInterceptor)[ FD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")[ FD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_78 $$ sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue))[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_16 $$ Element transportHandlersElement = DomUtils.getChildElementByTagName(sockJsElement, "transport-handlers")[ CD ]
Line_61 $$ if (!attrValue.isEmpty()) -->Line_62 $$ sockJsServiceDef.getPropertyValues().add("httpMessageCacheSize", Integer.valueOf(attrValue))[ CD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")[ FD ]
Line_5 $$ Element handshakeHandler = DomUtils.getChildElementByTagName(element, "handshake-handler")-->Line_24 $$ if (handshakeHandler != null) [ FD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")[ FD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_33 $$ String allowedOriginsAttribute = element.getAttribute("allowed-origins")[ FD ]
Line_11 $$ scheduler = new RuntimeBeanReference(customTaskSchedulerName)-->Line_13 $$ scheduler = registerScheduler(schedulerName, context, source)[ FD ]
Line_5 $$ Element handshakeHandler = DomUtils.getChildElementByTagName(element, "handshake-handler")-->Line_25 $$ RuntimeBeanReference handshakeHandlerRef = new RuntimeBeanReference(handshakeHandler.getAttribute("ref"))[ FD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")[ FD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_54 $$ sockJsServiceDef.getPropertyValues().add("streamBytesLimit", Integer.valueOf(attrValue))[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)[ CD ]
Line_4 $$ if (sockJsElement != null) -->Line_82 $$ return new RuntimeBeanReference(sockJsServiceName)[ CD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_39 $$ sockJsServiceDef.getPropertyValues().add("handshakeInterceptors", interceptors)[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_70 $$ sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue)[ FD ]
Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")-->Line_73 $$ if (!attrValue.isEmpty()) [ FD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_7 $$ sockJsServiceDef.setSource(source)[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_53 $$ if (!attrValue.isEmpty()) [ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_45 $$ if (!attrValue.isEmpty()) [ FD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")[ FD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_57 $$ if (!attrValue.isEmpty()) [ FD ]
Line_19 $$ if (registerDefaults.equals("false")) -->Line_20 $$ sockJsServiceDef.setBeanClass(TransportHandlingSockJsService.class)[ CD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_50 $$ sockJsServiceDef.getPropertyValues().add("sessionCookieNeeded", Boolean.valueOf(attrValue))[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_38 $$ interceptors.add(originHandshakeInterceptor)[ CD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_58 $$ sockJsServiceDef.getPropertyValues().add("disconnectDelay", Long.valueOf(attrValue))[ FD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_62 $$ sockJsServiceDef.getPropertyValues().add("httpMessageCacheSize", Integer.valueOf(attrValue))[ FD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_4 $$ if (sockJsElement != null) [ CD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_65 $$ if (!attrValue.isEmpty()) [ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")[ CD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")[ FD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")[ FD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_4 $$ if (sockJsElement != null) [ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_69 $$ if (!attrValue.isEmpty()) [ FD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_49 $$ if (!attrValue.isEmpty()) [ FD ]
Line_22 $$ ManagedList<?> transportHandlers = parseBeanSubElements(transportHandlersElement, context)-->Line_23 $$ sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1, transportHandlers)[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_73 $$ if (!attrValue.isEmpty()) [ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_69 $$ if (!attrValue.isEmpty()) [ CD ]
Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")-->Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_57 $$ if (!attrValue.isEmpty()) [ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_53 $$ if (!attrValue.isEmpty()) [ CD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_13 $$ scheduler = registerScheduler(schedulerName, context, source)[ FD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_73 $$ if (!attrValue.isEmpty()) [ FD ]
Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")-->Line_73 $$ if (!attrValue.isEmpty()) [ FD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_65 $$ if (!attrValue.isEmpty()) [ FD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_16 $$ Element transportHandlersElement = DomUtils.getChildElementByTagName(sockJsElement, "transport-handlers")[ FD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_31 $$ Element interceptorsElement = DomUtils.getChildElementByTagName(element, "handshake-interceptors")[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_41 $$ if (!attrValue.isEmpty()) [ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_57 $$ if (!attrValue.isEmpty()) [ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_70 $$ sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue)[ FD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_23 $$ sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1, transportHandlers)[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")[ CD ]
Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")-->Line_70 $$ sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue)[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_78 $$ sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue))[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_45 $$ if (!attrValue.isEmpty()) [ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_78 $$ sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue))[ FD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_61 $$ if (!attrValue.isEmpty()) [ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_35 $$ sockJsServiceDef.getPropertyValues().add("allowedOrigins", allowedOrigins)[ CD ]
Line_24 $$ if (handshakeHandler != null) -->Line_28 $$ transportHandler.getConstructorArgumentValues().addIndexedArgumentValue(0, handshakeHandlerRef)[ CD ]
Line_4 $$ if (sockJsElement != null) -->Line_49 $$ if (!attrValue.isEmpty()) [ CD ]
Line_4 $$ if (sockJsElement != null) -->Line_34 $$ List<String> allowedOrigins = Arrays.asList(StringUtils.tokenizeToStringArray(allowedOriginsAttribute, ","))[ CD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_69 $$ if (!attrValue.isEmpty()) [ FD ]
Line_17 $$ if (transportHandlersElement != null) -->Line_22 $$ ManagedList<?> transportHandlers = parseBeanSubElements(transportHandlersElement, context)[ CD ]
Line_4 $$ if (sockJsElement != null) -->Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")[ CD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_49 $$ if (!attrValue.isEmpty()) [ FD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_65 $$ if (!attrValue.isEmpty()) [ CD ]
Line_4 $$ if (sockJsElement != null) -->Line_36 $$ RootBeanDefinition originHandshakeInterceptor = new RootBeanDefinition(OriginHandshakeInterceptor.class)[ CD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_39 $$ sockJsServiceDef.getPropertyValues().add("handshakeInterceptors", interceptors)[ CD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_49 $$ if (!attrValue.isEmpty()) [ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")[ FD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")[ FD ]
Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")-->Line_78 $$ sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue))[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_9 $$ String customTaskSchedulerName = sockJsElement.getAttribute("scheduler")[ CD ]
Line_34 $$ List<String> allowedOrigins = Arrays.asList(StringUtils.tokenizeToStringArray(allowedOriginsAttribute, ","))-->Line_35 $$ sockJsServiceDef.getPropertyValues().add("allowedOrigins", allowedOrigins)[ FD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_35 $$ sockJsServiceDef.getPropertyValues().add("allowedOrigins", allowedOrigins)[ FD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_69 $$ if (!attrValue.isEmpty()) [ FD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_46 $$ sockJsServiceDef.getPropertyValues().add("webSocketEnabled", Boolean.valueOf(attrValue))[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")[ CD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_66 $$ sockJsServiceDef.getPropertyValues().add("heartbeatTime", Long.valueOf(attrValue))[ FD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_65 $$ if (!attrValue.isEmpty()) [ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")[ FD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")[ FD ]
Line_8 $$ Object scheduler-->Line_11 $$ scheduler = new RuntimeBeanReference(customTaskSchedulerName)[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_81 $$ String sockJsServiceName = context.getReaderContext().registerWithGeneratedName(sockJsServiceDef)[ CD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_53 $$ if (!attrValue.isEmpty()) [ FD ]
Line_17 $$ if (transportHandlersElement != null) -->Line_23 $$ sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1, transportHandlers)[ CD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_77 $$ if (!attrValue.isEmpty()) [ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")[ FD ]
Line_45 $$ if (!attrValue.isEmpty()) -->Line_46 $$ sockJsServiceDef.getPropertyValues().add("webSocketEnabled", Boolean.valueOf(attrValue))[ CD ]
Line_24 $$ if (handshakeHandler != null) -->Line_27 $$ transportHandler.setSource(source)[ CD ]
Line_16 $$ Element transportHandlersElement = DomUtils.getChildElementByTagName(sockJsElement, "transport-handlers")-->Line_17 $$ if (transportHandlersElement != null) [ FD ]
Line_53 $$ if (!attrValue.isEmpty()) -->Line_54 $$ sockJsServiceDef.getPropertyValues().add("streamBytesLimit", Integer.valueOf(attrValue))[ CD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_5 $$ Element handshakeHandler = DomUtils.getChildElementByTagName(element, "handshake-handler")[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_53 $$ if (!attrValue.isEmpty()) [ FD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_62 $$ sockJsServiceDef.getPropertyValues().add("httpMessageCacheSize", Integer.valueOf(attrValue))[ FD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_70 $$ sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue)[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_50 $$ sockJsServiceDef.getPropertyValues().add("sessionCookieNeeded", Boolean.valueOf(attrValue))[ FD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_70 $$ sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue)[ FD ]
Line_41 $$ if (!attrValue.isEmpty()) -->Line_42 $$ sockJsServiceDef.getPropertyValues().add("name", attrValue)[ CD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_20 $$ sockJsServiceDef.setBeanClass(TransportHandlingSockJsService.class)[ FD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")[ FD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_7 $$ sockJsServiceDef.setSource(source)[ FD ]
Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")-->Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")[ FD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_58 $$ sockJsServiceDef.getPropertyValues().add("disconnectDelay", Long.valueOf(attrValue))[ FD ]
Line_17 $$ if (transportHandlersElement != null) -->Line_24 $$ if (handshakeHandler != null) [ CD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_62 $$ sockJsServiceDef.getPropertyValues().add("httpMessageCacheSize", Integer.valueOf(attrValue))[ FD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_70 $$ sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue)[ FD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_57 $$ if (!attrValue.isEmpty()) [ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_15 $$ sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(0, scheduler)[ CD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")[ FD ]
Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")-->Line_70 $$ sockJsServiceDef.getPropertyValues().add("sockJsClientLibraryUrl", attrValue)[ FD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")[ FD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")[ FD ]
Line_57 $$ if (!attrValue.isEmpty()) -->Line_58 $$ sockJsServiceDef.getPropertyValues().add("disconnectDelay", Long.valueOf(attrValue))[ CD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_76 $$ attrValue = sockJsElement.getAttribute("suppress-cors")[ FD ]
Line_13 $$ scheduler = registerScheduler(schedulerName, context, source)-->Line_15 $$ sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(0, scheduler)[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")[ FD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_22 $$ ManagedList<?> transportHandlers = parseBeanSubElements(transportHandlersElement, context)[ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_73 $$ if (!attrValue.isEmpty()) [ FD ]
Line_6 $$ RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class)-->Line_46 $$ sockJsServiceDef.getPropertyValues().add("webSocketEnabled", Boolean.valueOf(attrValue))[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_54 $$ sockJsServiceDef.getPropertyValues().add("streamBytesLimit", Integer.valueOf(attrValue))[ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_73 $$ if (!attrValue.isEmpty()) [ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_54 $$ sockJsServiceDef.getPropertyValues().add("streamBytesLimit", Integer.valueOf(attrValue))[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_8 $$ Object scheduler[ CD ]
Line_4 $$ if (sockJsElement != null) -->Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")[ CD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_61 $$ if (!attrValue.isEmpty()) [ FD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_61 $$ if (!attrValue.isEmpty()) [ FD ]
Line_44 $$ attrValue = sockJsElement.getAttribute("websocket-enabled")-->Line_54 $$ sockJsServiceDef.getPropertyValues().add("streamBytesLimit", Integer.valueOf(attrValue))[ FD ]
Line_64 $$ attrValue = sockJsElement.getAttribute("heartbeat-time")-->Line_78 $$ sockJsServiceDef.getPropertyValues().add("suppressCors", Boolean.valueOf(attrValue))[ FD ]
Line_25 $$ RuntimeBeanReference handshakeHandlerRef = new RuntimeBeanReference(handshakeHandler.getAttribute("ref"))-->Line_28 $$ transportHandler.getConstructorArgumentValues().addIndexedArgumentValue(0, handshakeHandlerRef)[ FD ]
Line_2 $$ public static RuntimeBeanReference registerSockJsService(Element element, String schedulerName, ParserContext context, Object source) -->Line_3 $$ Element sockJsElement = DomUtils.getChildElementByTagName(element, "sockjs")[ CD ]
Line_52 $$ attrValue = sockJsElement.getAttribute("stream-bytes-limit")-->Line_58 $$ sockJsServiceDef.getPropertyValues().add("disconnectDelay", Long.valueOf(attrValue))[ FD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_65 $$ if (!attrValue.isEmpty()) [ FD ]
Line_60 $$ attrValue = sockJsElement.getAttribute("message-cache-size")-->Line_62 $$ sockJsServiceDef.getPropertyValues().add("httpMessageCacheSize", Integer.valueOf(attrValue))[ FD ]
Line_4 $$ if (sockJsElement != null) -->Line_31 $$ Element interceptorsElement = DomUtils.getChildElementByTagName(element, "handshake-interceptors")[ CD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_66 $$ sockJsServiceDef.getPropertyValues().add("heartbeatTime", Long.valueOf(attrValue))[ FD ]
Line_33 $$ String allowedOriginsAttribute = element.getAttribute("allowed-origins")-->Line_34 $$ List<String> allowedOrigins = Arrays.asList(StringUtils.tokenizeToStringArray(allowedOriginsAttribute, ","))[ FD ]
Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")-->Line_72 $$ attrValue = sockJsElement.getAttribute("message-codec")[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_58 $$ sockJsServiceDef.getPropertyValues().add("disconnectDelay", Long.valueOf(attrValue))[ FD ]
Line_48 $$ attrValue = sockJsElement.getAttribute("session-cookie-needed")-->Line_77 $$ if (!attrValue.isEmpty()) [ FD ]
Line_40 $$ String attrValue = sockJsElement.getAttribute("name")-->Line_61 $$ if (!attrValue.isEmpty()) [ FD ]
Line_68 $$ attrValue = sockJsElement.getAttribute("client-library-url")-->Line_73 $$ if (!attrValue.isEmpty()) [ FD ]
Line_56 $$ attrValue = sockJsElement.getAttribute("disconnect-delay")-->Line_73 $$ if (!attrValue.isEmpty()) [ FD ]
