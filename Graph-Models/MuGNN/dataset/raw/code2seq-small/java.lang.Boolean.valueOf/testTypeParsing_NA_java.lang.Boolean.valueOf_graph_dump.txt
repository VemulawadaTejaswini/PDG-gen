Line_12 $$ Map<String, Object> configMap = (Map<String, Object>) serializedMap.get("completion")-->Line_14 $$ assertThat(configMap.get("search_analyzer").toString(), is("standard"))[ FD ]
Line_12 $$ Map<String, Object> configMap = (Map<String, Object>) serializedMap.get("completion")-->Line_15 $$ assertThat(Boolean.valueOf(configMap.get("preserve_separators").toString()), is(false))[ FD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_6 $$ assertThat(fieldMapper, instanceOf(CompletionFieldMapper.class))[ CD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_4 $$ DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser().parse("type1", new CompressedXContent(mapping))[ CD ]
Line_7 $$ CompletionFieldMapper completionFieldMapper = (CompletionFieldMapper) fieldMapper-->Line_9 $$ completionFieldMapper.toXContent(builder, ToXContent.EMPTY_PARAMS).endObject()[ FD ]
Line_12 $$ Map<String, Object> configMap = (Map<String, Object>) serializedMap.get("completion")-->Line_16 $$ assertThat(Boolean.valueOf(configMap.get("preserve_position_increments").toString()), is(true))[ FD ]
Line_8 $$ XContentBuilder builder = jsonBuilder().startObject()-->Line_11 $$ Map<String, Object> serializedMap = JsonXContent.jsonXContent.createParser(builder.bytes()).map()[ FD ]
Line_8 $$ XContentBuilder builder = jsonBuilder().startObject()-->Line_10 $$ builder.close()[ FD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_16 $$ assertThat(Boolean.valueOf(configMap.get("preserve_position_increments").toString()), is(true))[ CD ]
Line_12 $$ Map<String, Object> configMap = (Map<String, Object>) serializedMap.get("completion")-->Line_13 $$ assertThat(configMap.get("analyzer").toString(), is("simple"))[ FD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_9 $$ completionFieldMapper.toXContent(builder, ToXContent.EMPTY_PARAMS).endObject()[ CD ]
Line_12 $$ Map<String, Object> configMap = (Map<String, Object>) serializedMap.get("completion")-->Line_17 $$ assertThat(Integer.valueOf(configMap.get("max_input_length").toString()), is(14))[ FD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_12 $$ Map<String, Object> configMap = (Map<String, Object>) serializedMap.get("completion")[ CD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_15 $$ assertThat(Boolean.valueOf(configMap.get("preserve_separators").toString()), is(false))[ CD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_17 $$ assertThat(Integer.valueOf(configMap.get("max_input_length").toString()), is(14))[ CD ]
Line_8 $$ XContentBuilder builder = jsonBuilder().startObject()-->Line_9 $$ completionFieldMapper.toXContent(builder, ToXContent.EMPTY_PARAMS).endObject()[ FD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_5 $$ FieldMapper fieldMapper = defaultMapper.mappers().getMapper("completion")[ CD ]
Line_4 $$ DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser().parse("type1", new CompressedXContent(mapping))-->Line_5 $$ FieldMapper fieldMapper = defaultMapper.mappers().getMapper("completion")[ FD ]
Line_11 $$ Map<String, Object> serializedMap = JsonXContent.jsonXContent.createParser(builder.bytes()).map()-->Line_12 $$ Map<String, Object> configMap = (Map<String, Object>) serializedMap.get("completion")[ FD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_8 $$ XContentBuilder builder = jsonBuilder().startObject()[ CD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_11 $$ Map<String, Object> serializedMap = JsonXContent.jsonXContent.createParser(builder.bytes()).map()[ CD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_13 $$ assertThat(configMap.get("analyzer").toString(), is("simple"))[ CD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_10 $$ builder.close()[ CD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_7 $$ CompletionFieldMapper completionFieldMapper = (CompletionFieldMapper) fieldMapper[ CD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_3 $$ String mapping = jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("completion").field("type", "completion").field("analyzer", "simple").field("search_analyzer", "standard").field("preserve_separators", false).field("preserve_position_increments", true).field("max_input_length", 14).endObject().endObject().endObject().endObject().string()[ CD ]
Line_2 $$ public void testTypeParsing() throws Exception -->Line_14 $$ assertThat(configMap.get("search_analyzer").toString(), is("standard"))[ CD ]
Line_5 $$ FieldMapper fieldMapper = defaultMapper.mappers().getMapper("completion")-->Line_6 $$ assertThat(fieldMapper, instanceOf(CompletionFieldMapper.class))[ FD ]
