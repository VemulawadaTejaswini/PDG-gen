Line_20 $$ if (element instanceof PsiReturnStatement) -->Line_22 $$ result = isNonNlsAnnotatedModifierListOwner(method)[ CD ]
Line_10 $$ final PsiElement element = PsiTreeUtil.getParentOfType(expression, PsiExpressionList.class, PsiAssignmentExpression.class, PsiVariable.class, PsiReturnStatement.class)-->Line_20 $$ if (element instanceof PsiReturnStatement) [ FD ]
Line_12 $$ if (element instanceof PsiExpressionList) -->Line_14 $$ result = isNonNlsAnnotatedParameter(expression, expressionList)[ CD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_10 $$ final PsiElement element = PsiTreeUtil.getParentOfType(expression, PsiExpressionList.class, PsiAssignmentExpression.class, PsiVariable.class, PsiReturnStatement.class)[ FD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_26 $$ putCachedValue(expression, KEY, Boolean.valueOf(result))[ FD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_11 $$ final boolean result[ CD ]
Line_10 $$ final PsiElement element = PsiTreeUtil.getParentOfType(expression, PsiExpressionList.class, PsiAssignmentExpression.class, PsiVariable.class, PsiReturnStatement.class)-->Line_16 $$ result = isNonNlsAnnotatedModifierListOwner(element)[ FD ]
Line_16 $$ result = isNonNlsAnnotatedModifierListOwner(element)-->Line_19 $$ result = isAssignmentToNonNlsAnnotatedVariable(assignmentExpression)[ FD ]
Line_19 $$ result = isAssignmentToNonNlsAnnotatedVariable(assignmentExpression)-->Line_24 $$ result = false[ FD ]
Line_6 $$ final Boolean value = getCachedValue(expression, KEY)-->Line_8 $$ return value.booleanValue()[ FD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_6 $$ final Boolean value = getCachedValue(expression, KEY)[ FD ]
Line_17 $$ if (element instanceof PsiAssignmentExpression) -->Line_18 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) element[ CD ]
Line_22 $$ result = isNonNlsAnnotatedModifierListOwner(method)-->Line_26 $$ putCachedValue(expression, KEY, Boolean.valueOf(result))[ FD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_26 $$ putCachedValue(expression, KEY, Boolean.valueOf(result))[ CD ]
Line_11 $$ final boolean result-->Line_24 $$ result = false[ FD ]
Line_11 $$ final boolean result-->Line_16 $$ result = isNonNlsAnnotatedModifierListOwner(element)[ FD ]
Line_10 $$ final PsiElement element = PsiTreeUtil.getParentOfType(expression, PsiExpressionList.class, PsiAssignmentExpression.class, PsiVariable.class, PsiReturnStatement.class)-->Line_15 $$ if (element instanceof PsiVariable) [ FD ]
Line_16 $$ result = isNonNlsAnnotatedModifierListOwner(element)-->Line_22 $$ result = isNonNlsAnnotatedModifierListOwner(method)[ FD ]
Line_3 $$ if (expression == null) -->Line_4 $$ return false[ CD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_12 $$ if (element instanceof PsiExpressionList) [ CD ]
Line_10 $$ final PsiElement element = PsiTreeUtil.getParentOfType(expression, PsiExpressionList.class, PsiAssignmentExpression.class, PsiVariable.class, PsiReturnStatement.class)-->Line_21 $$ final PsiMethod method = PsiTreeUtil.getParentOfType(element, PsiMethod.class)[ FD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_14 $$ result = isNonNlsAnnotatedParameter(expression, expressionList)[ FD ]
Line_14 $$ result = isNonNlsAnnotatedParameter(expression, expressionList)-->Line_22 $$ result = isNonNlsAnnotatedModifierListOwner(method)[ FD ]
Line_7 $$ if (value != null) -->Line_8 $$ return value.booleanValue()[ CD ]
Line_14 $$ result = isNonNlsAnnotatedParameter(expression, expressionList)-->Line_16 $$ result = isNonNlsAnnotatedModifierListOwner(element)[ FD ]
Line_11 $$ final boolean result-->Line_26 $$ putCachedValue(expression, KEY, Boolean.valueOf(result))[ FD ]
Line_12 $$ if (element instanceof PsiExpressionList) -->Line_15 $$ if (element instanceof PsiVariable) [ CD ]
Line_6 $$ final Boolean value = getCachedValue(expression, KEY)-->Line_7 $$ if (value != null) [ FD ]
Line_19 $$ result = isAssignmentToNonNlsAnnotatedVariable(assignmentExpression)-->Line_26 $$ putCachedValue(expression, KEY, Boolean.valueOf(result))[ FD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_27 $$ return result[ CD ]
Line_20 $$ if (element instanceof PsiReturnStatement) -->Line_21 $$ final PsiMethod method = PsiTreeUtil.getParentOfType(element, PsiMethod.class)[ CD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_3 $$ if (expression == null) [ CD ]
Line_12 $$ if (element instanceof PsiExpressionList) -->Line_13 $$ final PsiExpressionList expressionList = (PsiExpressionList) element[ CD ]
Line_17 $$ if (element instanceof PsiAssignmentExpression) -->Line_20 $$ if (element instanceof PsiReturnStatement) [ CD ]
Line_14 $$ result = isNonNlsAnnotatedParameter(expression, expressionList)-->Line_19 $$ result = isAssignmentToNonNlsAnnotatedVariable(assignmentExpression)[ FD ]
Line_11 $$ final boolean result-->Line_22 $$ result = isNonNlsAnnotatedModifierListOwner(method)[ FD ]
Line_15 $$ if (element instanceof PsiVariable) -->Line_17 $$ if (element instanceof PsiAssignmentExpression) [ CD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_6 $$ final Boolean value = getCachedValue(expression, KEY)[ CD ]
Line_11 $$ final boolean result-->Line_14 $$ result = isNonNlsAnnotatedParameter(expression, expressionList)[ FD ]
Line_21 $$ final PsiMethod method = PsiTreeUtil.getParentOfType(element, PsiMethod.class)-->Line_22 $$ result = isNonNlsAnnotatedModifierListOwner(method)[ FD ]
Line_18 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) element-->Line_19 $$ result = isAssignmentToNonNlsAnnotatedVariable(assignmentExpression)[ FD ]
Line_14 $$ result = isNonNlsAnnotatedParameter(expression, expressionList)-->Line_26 $$ putCachedValue(expression, KEY, Boolean.valueOf(result))[ FD ]
Line_10 $$ final PsiElement element = PsiTreeUtil.getParentOfType(expression, PsiExpressionList.class, PsiAssignmentExpression.class, PsiVariable.class, PsiReturnStatement.class)-->Line_12 $$ if (element instanceof PsiExpressionList) [ FD ]
Line_14 $$ result = isNonNlsAnnotatedParameter(expression, expressionList)-->Line_24 $$ result = false[ FD ]
Line_22 $$ result = isNonNlsAnnotatedModifierListOwner(method)-->Line_24 $$ result = false[ FD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_10 $$ final PsiElement element = PsiTreeUtil.getParentOfType(expression, PsiExpressionList.class, PsiAssignmentExpression.class, PsiVariable.class, PsiReturnStatement.class)[ CD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_3 $$ if (expression == null) [ FD ]
Line_11 $$ final boolean result-->Line_19 $$ result = isAssignmentToNonNlsAnnotatedVariable(assignmentExpression)[ FD ]
Line_20 $$ if (element instanceof PsiReturnStatement) -->Line_24 $$ result = false[ CD ]
Line_17 $$ if (element instanceof PsiAssignmentExpression) -->Line_19 $$ result = isAssignmentToNonNlsAnnotatedVariable(assignmentExpression)[ CD ]
Line_16 $$ result = isNonNlsAnnotatedModifierListOwner(element)-->Line_24 $$ result = false[ FD ]
Line_16 $$ result = isNonNlsAnnotatedModifierListOwner(element)-->Line_26 $$ putCachedValue(expression, KEY, Boolean.valueOf(result))[ FD ]
Line_15 $$ if (element instanceof PsiVariable) -->Line_16 $$ result = isNonNlsAnnotatedModifierListOwner(element)[ CD ]
Line_19 $$ result = isAssignmentToNonNlsAnnotatedVariable(assignmentExpression)-->Line_22 $$ result = isNonNlsAnnotatedModifierListOwner(method)[ FD ]
Line_13 $$ final PsiExpressionList expressionList = (PsiExpressionList) element-->Line_14 $$ result = isNonNlsAnnotatedParameter(expression, expressionList)[ FD ]
Line_10 $$ final PsiElement element = PsiTreeUtil.getParentOfType(expression, PsiExpressionList.class, PsiAssignmentExpression.class, PsiVariable.class, PsiReturnStatement.class)-->Line_17 $$ if (element instanceof PsiAssignmentExpression) [ FD ]
Line_2 $$ public static boolean isNonNlsAnnotatedUse(@Nullable PsiExpression expression) -->Line_7 $$ if (value != null) [ CD ]
Line_24 $$ result = false-->Line_26 $$ putCachedValue(expression, KEY, Boolean.valueOf(result))[ FD ]
