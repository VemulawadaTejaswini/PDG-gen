Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_6 $$ addIDEALibraries(classpath)[ CD ]
Line_9 $$ UrlClassLoader.Builder builder = UrlClassLoader.build().urls(filterClassPath(new ArrayList<URL>(classpath))).allowLock().usePersistentClasspathIndexForLocalClassDirectories().useCache()-->Line_11 $$ builder.allowBootstrapResources()[ FD ]
Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_13 $$ UrlClassLoader newClassLoader = builder.get()[ CD ]
Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_8 $$ addParentClasspath(classpath, true)[ CD ]
Line_4 $$ Collection<URL> classpath = new LinkedHashSet<URL>()-->Line_5 $$ addParentClasspath(classpath, false)[ FD ]
Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_5 $$ addParentClasspath(classpath, false)[ CD ]
Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_4 $$ Collection<URL> classpath = new LinkedHashSet<URL>()[ CD ]
Line_9 $$ UrlClassLoader.Builder builder = UrlClassLoader.build().urls(filterClassPath(new ArrayList<URL>(classpath))).allowLock().usePersistentClasspathIndexForLocalClassDirectories().useCache()-->Line_13 $$ UrlClassLoader newClassLoader = builder.get()[ FD ]
Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_7 $$ addAdditionalClassPath(classpath)[ CD ]
Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_21 $$ Thread.currentThread().setContextClassLoader(newClassLoader)[ CD ]
Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_3 $$ PathManager.loadProperties()[ CD ]
Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_9 $$ UrlClassLoader.Builder builder = UrlClassLoader.build().urls(filterClassPath(new ArrayList<URL>(classpath))).allowLock().usePersistentClasspathIndexForLocalClassDirectories().useCache()[ CD ]
Line_4 $$ Collection<URL> classpath = new LinkedHashSet<URL>()-->Line_7 $$ addAdditionalClassPath(classpath)[ FD ]
Line_13 $$ UrlClassLoader newClassLoader = builder.get()-->Line_21 $$ Thread.currentThread().setContextClassLoader(newClassLoader)[ FD ]
Line_4 $$ Collection<URL> classpath = new LinkedHashSet<URL>()-->Line_6 $$ addIDEALibraries(classpath)[ FD ]
Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_10 $$ if (Boolean.valueOf(System.getProperty(PROPERTY_ALLOW_BOOTSTRAP_RESOURCES, "true"))) [ CD ]
Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_14 $$ if (updatePlugins && !isLoadingOfExternalPluginsDisabled()) [ CD ]
Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_22 $$ return newClassLoader[ CD ]
Line_10 $$ if (Boolean.valueOf(System.getProperty(PROPERTY_ALLOW_BOOTSTRAP_RESOURCES, "true"))) -->Line_11 $$ builder.allowBootstrapResources()[ CD ]
Line_4 $$ Collection<URL> classpath = new LinkedHashSet<URL>()-->Line_8 $$ addParentClasspath(classpath, true)[ FD ]
Line_2 $$ public static ClassLoader initClassLoader(boolean updatePlugins) throws MalformedURLException -->Line_14 $$ if (updatePlugins && !isLoadingOfExternalPluginsDisabled()) [ FD ]
