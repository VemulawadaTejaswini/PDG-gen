Line_14 $$ final String name = isShortName || !isClazz ? object.getName() : ((PsiClass) object).getQualifiedName()-->Line_15 $$ set.add(LookupElementBuilder.create(name))[ FD ]
Line_2 $$ public LookupElement[] calculateLookupItems(@NotNull Expression[] params, ExpressionContext context) -->Line_19 $$ return LookupElement.EMPTY_ARRAY[ CD ]
Line_6 $$ final String secondParamValue = params.length > 1 ? params[1].calculateResult(context).toString() : null-->Line_7 $$ final boolean isShortName = secondParamValue != null && !Boolean.valueOf(secondParamValue)[ FD ]
Line_2 $$ public LookupElement[] calculateLookupItems(@NotNull Expression[] params, ExpressionContext context) -->Line_4 $$ if (query != null) [ CD ]
Line_2 $$ public LookupElement[] calculateLookupItems(@NotNull Expression[] params, ExpressionContext context) -->Line_3 $$ final Query<PsiMember> query = findAnnotated(context, params)[ CD ]
Line_2 $$ public LookupElement[] calculateLookupItems(@NotNull Expression[] params, ExpressionContext context) -->Line_6 $$ final String secondParamValue = params.length > 1 ? params[1].calculateResult(context).toString() : null[ FD ]
Line_4 $$ if (query != null) -->Line_8 $$ final Project project = context.getProject()[ CD ]
Line_4 $$ if (query != null) -->Line_6 $$ final String secondParamValue = params.length > 1 ? params[1].calculateResult(context).toString() : null[ CD ]
Line_4 $$ if (query != null) -->Line_5 $$ Set<LookupElement> set = new LinkedHashSet<LookupElement>()[ CD ]
Line_8 $$ final Project project = context.getProject()-->Line_9 $$ final PsiClass findInClass = secondParamValue != null ? JavaPsiFacade.getInstance(project).findClass(secondParamValue, GlobalSearchScope.allScope(project)) : null[ FD ]
Line_5 $$ Set<LookupElement> set = new LinkedHashSet<LookupElement>()-->Line_17 $$ return set.toArray(new LookupElement[set.size()])[ FD ]
Line_6 $$ final String secondParamValue = params.length > 1 ? params[1].calculateResult(context).toString() : null-->Line_9 $$ final PsiClass findInClass = secondParamValue != null ? JavaPsiFacade.getInstance(project).findClass(secondParamValue, GlobalSearchScope.allScope(project)) : null[ FD ]
Line_10 $$ for (PsiMember object : query.findAll()) -->Line_11 $$ if (findInClass != null && !object.getContainingClass().equals(findInClass))[ FD ]
Line_2 $$ public LookupElement[] calculateLookupItems(@NotNull Expression[] params, ExpressionContext context) -->Line_8 $$ final Project project = context.getProject()[ FD ]
Line_10 $$ for (PsiMember object : query.findAll()) -->Line_14 $$ final String name = isShortName || !isClazz ? object.getName() : ((PsiClass) object).getQualifiedName()[ FD ]
Line_4 $$ if (query != null) -->Line_17 $$ return set.toArray(new LookupElement[set.size()])[ CD ]
Line_2 $$ public LookupElement[] calculateLookupItems(@NotNull Expression[] params, ExpressionContext context) -->Line_3 $$ final Query<PsiMember> query = findAnnotated(context, params)[ FD ]
Line_13 $$ boolean isClazz = object instanceof PsiClass-->Line_14 $$ final String name = isShortName || !isClazz ? object.getName() : ((PsiClass) object).getQualifiedName()[ FD ]
Line_9 $$ final PsiClass findInClass = secondParamValue != null ? JavaPsiFacade.getInstance(project).findClass(secondParamValue, GlobalSearchScope.allScope(project)) : null-->Line_11 $$ if (findInClass != null && !object.getContainingClass().equals(findInClass))[ FD ]
Line_5 $$ Set<LookupElement> set = new LinkedHashSet<LookupElement>()-->Line_15 $$ set.add(LookupElementBuilder.create(name))[ FD ]
Line_4 $$ if (query != null) -->Line_9 $$ final PsiClass findInClass = secondParamValue != null ? JavaPsiFacade.getInstance(project).findClass(secondParamValue, GlobalSearchScope.allScope(project)) : null[ CD ]
Line_3 $$ final Query<PsiMember> query = findAnnotated(context, params)-->Line_4 $$ if (query != null) [ FD ]
Line_4 $$ if (query != null) -->Line_7 $$ final boolean isShortName = secondParamValue != null && !Boolean.valueOf(secondParamValue)[ CD ]
Line_3 $$ final Query<PsiMember> query = findAnnotated(context, params)-->Line_10 $$ for (PsiMember object : query.findAll()) [ FD ]
