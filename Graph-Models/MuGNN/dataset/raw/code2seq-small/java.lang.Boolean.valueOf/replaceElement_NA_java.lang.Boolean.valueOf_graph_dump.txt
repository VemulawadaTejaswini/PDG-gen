Line_2 $$ public void replaceElement(PsiElement element, String varName, Expression expression, boolean alwaysStopAt, boolean skipOnStart) -->Line_5 $$ myVariableNamesMap.put(key, varName)[ CD ]
Line_2 $$ public void replaceElement(PsiElement element, String varName, Expression expression, boolean alwaysStopAt, boolean skipOnStart) -->Line_5 $$ myVariableNamesMap.put(key, varName)[ FD ]
Line_3 $$ final RangeMarker key = wrapElement(element)-->Line_4 $$ myAlwaysStopAtMap.put(key, alwaysStopAt ? Boolean.TRUE : Boolean.FALSE)[ FD ]
Line_3 $$ final RangeMarker key = wrapElement(element)-->Line_5 $$ myVariableNamesMap.put(key, varName)[ FD ]
Line_2 $$ public void replaceElement(PsiElement element, String varName, Expression expression, boolean alwaysStopAt, boolean skipOnStart) -->Line_7 $$ replaceElement(key, expression)[ CD ]
Line_2 $$ public void replaceElement(PsiElement element, String varName, Expression expression, boolean alwaysStopAt, boolean skipOnStart) -->Line_4 $$ myAlwaysStopAtMap.put(key, alwaysStopAt ? Boolean.TRUE : Boolean.FALSE)[ CD ]
Line_2 $$ public void replaceElement(PsiElement element, String varName, Expression expression, boolean alwaysStopAt, boolean skipOnStart) -->Line_6 $$ mySkipOnStartMap.put(key, Boolean.valueOf(skipOnStart))[ CD ]
Line_3 $$ final RangeMarker key = wrapElement(element)-->Line_6 $$ mySkipOnStartMap.put(key, Boolean.valueOf(skipOnStart))[ FD ]
Line_3 $$ final RangeMarker key = wrapElement(element)-->Line_7 $$ replaceElement(key, expression)[ FD ]
Line_2 $$ public void replaceElement(PsiElement element, String varName, Expression expression, boolean alwaysStopAt, boolean skipOnStart) -->Line_6 $$ mySkipOnStartMap.put(key, Boolean.valueOf(skipOnStart))[ FD ]
Line_2 $$ public void replaceElement(PsiElement element, String varName, Expression expression, boolean alwaysStopAt, boolean skipOnStart) -->Line_7 $$ replaceElement(key, expression)[ FD ]
Line_2 $$ public void replaceElement(PsiElement element, String varName, Expression expression, boolean alwaysStopAt, boolean skipOnStart) -->Line_3 $$ final RangeMarker key = wrapElement(element)[ CD ]
Line_2 $$ public void replaceElement(PsiElement element, String varName, Expression expression, boolean alwaysStopAt, boolean skipOnStart) -->Line_3 $$ final RangeMarker key = wrapElement(element)[ FD ]
