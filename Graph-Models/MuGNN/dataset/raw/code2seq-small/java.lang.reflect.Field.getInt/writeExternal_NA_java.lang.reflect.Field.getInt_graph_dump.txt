Line_16 $$ String value = null-->Line_26 $$ value = Long.toString(field.getLong(data))[ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_22 $$ value = Short.toString(field.getShort(data))[ FD ]
Line_42 $$ if (color != null) -->Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)[ CD ]
Line_12 $$ Class type = field.getType()-->Line_23 $$ if (type.equals(int.class)) [ FD ]
Line_24 $$ value = Integer.toString(field.getInt(data))-->Line_39 $$ value = filterXMLCharacters((String) field.get(data))[ FD ]
Line_26 $$ value = Long.toString(field.getLong(data))-->Line_34 $$ value = Boolean.toString(field.getBoolean(data))[ FD ]
Line_12 $$ Class type = field.getType()-->Line_25 $$ if (type.equals(long.class)) [ FD ]
Line_4 $$ for (Field field : fields) -->Line_39 $$ value = filterXMLCharacters((String) field.get(data))[ FD ]
Line_28 $$ value = Float.toString(field.getFloat(data))-->Line_30 $$ value = Double.toString(field.getDouble(data))[ FD ]
Line_4 $$ for (Field field : fields) -->Line_48 $$ element.setAttribute("name", field.getName())[ FD ]
Line_24 $$ value = Integer.toString(field.getInt(data))-->Line_26 $$ value = Long.toString(field.getLong(data))[ FD ]
Line_4 $$ for (Field field : fields) -->Line_22 $$ value = Short.toString(field.getShort(data))[ FD ]
Line_12 $$ Class type = field.getType()-->Line_18 $$ if (type.isPrimitive()) [ FD ]
Line_28 $$ value = Float.toString(field.getFloat(data))-->Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)[ FD ]
Line_30 $$ value = Double.toString(field.getDouble(data))-->Line_67 $$ element.setAttribute("value", value)[ FD ]
Line_16 $$ String value = null-->Line_28 $$ value = Float.toString(field.getFloat(data))[ FD ]
Line_34 $$ value = Boolean.toString(field.getBoolean(data))-->Line_67 $$ element.setAttribute("value", value)[ FD ]
Line_41 $$ Color color = (Color) field.get(data)-->Line_42 $$ if (color != null) [ FD ]
Line_4 $$ for (Field field : fields) -->Line_7 $$ int modifiers = field.getModifiers()[ FD ]
Line_4 $$ for (Field field : fields) -->Line_20 $$ value = Byte.toString(field.getByte(data))[ FD ]
Line_32 $$ value = String.valueOf(field.getChar(data))-->Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)[ FD ]
Line_34 $$ value = Boolean.toString(field.getBoolean(data))-->Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)[ FD ]
Line_4 $$ for (Field field : fields) -->Line_30 $$ value = Double.toString(field.getDouble(data))[ FD ]
Line_30 $$ value = Double.toString(field.getDouble(data))-->Line_39 $$ value = filterXMLCharacters((String) field.get(data))[ FD ]
Line_24 $$ value = Integer.toString(field.getInt(data))-->Line_67 $$ element.setAttribute("value", value)[ FD ]
Line_12 $$ Class type = field.getType()-->Line_19 $$ if (type.equals(byte.class)) [ FD ]
Line_16 $$ String value = null-->Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)[ FD ]
Line_4 $$ for (Field field : fields) -->Line_41 $$ Color color = (Color) field.get(data)[ FD ]
Line_28 $$ value = Float.toString(field.getFloat(data))-->Line_34 $$ value = Boolean.toString(field.getBoolean(data))[ FD ]
Line_23 $$ if (type.equals(int.class)) -->Line_25 $$ if (type.equals(long.class)) [ CD ]
Line_30 $$ value = Double.toString(field.getDouble(data))-->Line_34 $$ value = Boolean.toString(field.getBoolean(data))[ FD ]
Line_40 $$ if (type.equals(Color.class)) -->Line_42 $$ if (color != null) [ CD ]
Line_31 $$ if (type.equals(char.class)) -->Line_33 $$ if (type.equals(boolean.class)) [ CD ]
Line_16 $$ String value = null-->Line_30 $$ value = Double.toString(field.getDouble(data))[ FD ]
Line_4 $$ for (Field field : fields) -->Line_5 $$ if (field.getName().indexOf('$') >= 0)[ FD ]
Line_24 $$ value = Integer.toString(field.getInt(data))-->Line_30 $$ value = Double.toString(field.getDouble(data))[ FD ]
Line_32 $$ value = String.valueOf(field.getChar(data))-->Line_39 $$ value = filterXMLCharacters((String) field.get(data))[ FD ]
Line_34 $$ value = Boolean.toString(field.getBoolean(data))-->Line_39 $$ value = filterXMLCharacters((String) field.get(data))[ FD ]
Line_16 $$ String value = null-->Line_39 $$ value = filterXMLCharacters((String) field.get(data))[ FD ]
Line_18 $$ if (type.isPrimitive()) -->Line_19 $$ if (type.equals(byte.class)) [ CD ]
Line_66 $$ if (value != null) -->Line_67 $$ element.setAttribute("value", value)[ CD ]
Line_27 $$ if (type.equals(float.class)) -->Line_29 $$ if (type.equals(double.class)) [ CD ]
Line_20 $$ value = Byte.toString(field.getByte(data))-->Line_34 $$ value = Boolean.toString(field.getBoolean(data))[ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_20 $$ value = Byte.toString(field.getByte(data))[ FD ]
Line_41 $$ Color color = (Color) field.get(data)-->Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)[ FD ]
Line_12 $$ Class type = field.getType()-->Line_31 $$ if (type.equals(char.class)) [ FD ]
Line_50 $$ if (domValue != null) -->Line_51 $$ Element valueElement = new Element("value")[ CD ]
Line_7 $$ int modifiers = field.getModifiers()-->Line_8 $$ if (!(Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && field.getAnnotation(Transient.class) == null))[ FD ]
Line_45 $$ if (ReflectionUtil.isAssignable(JDOMExternalizable.class, type)) -->Line_57 $$ LOG.debug("Wrong field type: " + type)[ CD ]
Line_33 $$ if (type.equals(boolean.class)) -->Line_34 $$ value = Boolean.toString(field.getBoolean(data))[ CD ]
Line_46 $$ Element element = new Element("option")-->Line_65 $$ element.setAttribute("name", field.getName())[ FD ]
Line_32 $$ value = String.valueOf(field.getChar(data))-->Line_34 $$ value = Boolean.toString(field.getBoolean(data))[ FD ]
Line_32 $$ value = String.valueOf(field.getChar(data))-->Line_67 $$ element.setAttribute("value", value)[ FD ]
Line_4 $$ for (Field field : fields) -->Line_49 $$ JDOMExternalizable domValue = (JDOMExternalizable) field.get(data)[ FD ]
Line_23 $$ if (type.equals(int.class)) -->Line_24 $$ value = Integer.toString(field.getInt(data))[ CD ]
Line_28 $$ value = Float.toString(field.getFloat(data))-->Line_67 $$ element.setAttribute("value", value)[ FD ]
Line_26 $$ value = Long.toString(field.getLong(data))-->Line_39 $$ value = filterXMLCharacters((String) field.get(data))[ FD ]
Line_45 $$ if (ReflectionUtil.isAssignable(JDOMExternalizable.class, type)) -->Line_49 $$ JDOMExternalizable domValue = (JDOMExternalizable) field.get(data)[ CD ]
Line_24 $$ value = Integer.toString(field.getInt(data))-->Line_32 $$ value = String.valueOf(field.getChar(data))[ FD ]
Line_20 $$ value = Byte.toString(field.getByte(data))-->Line_67 $$ element.setAttribute("value", value)[ FD ]
Line_49 $$ JDOMExternalizable domValue = (JDOMExternalizable) field.get(data)-->Line_53 $$ domValue.writeExternal(valueElement)[ FD ]
Line_16 $$ String value = null-->Line_20 $$ value = Byte.toString(field.getByte(data))[ FD ]
Line_27 $$ if (type.equals(float.class)) -->Line_28 $$ value = Float.toString(field.getFloat(data))[ CD ]
Line_20 $$ value = Byte.toString(field.getByte(data))-->Line_22 $$ value = Short.toString(field.getShort(data))[ FD ]
Line_22 $$ value = Short.toString(field.getShort(data))-->Line_28 $$ value = Float.toString(field.getFloat(data))[ FD ]
Line_20 $$ value = Byte.toString(field.getByte(data))-->Line_32 $$ value = String.valueOf(field.getChar(data))[ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_30 $$ value = Double.toString(field.getDouble(data))[ FD ]
Line_30 $$ value = Double.toString(field.getDouble(data))-->Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)[ FD ]
Line_45 $$ if (ReflectionUtil.isAssignable(JDOMExternalizable.class, type)) -->Line_50 $$ if (domValue != null) [ CD ]
Line_46 $$ Element element = new Element("option")-->Line_47 $$ parentNode.addContent(element)[ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_47 $$ parentNode.addContent(element)[ FD ]
Line_22 $$ value = Short.toString(field.getShort(data))-->Line_39 $$ value = filterXMLCharacters((String) field.get(data))[ FD ]
Line_16 $$ String value = null-->Line_66 $$ if (value != null) [ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_64 $$ parentNode.addContent(element)[ FD ]
Line_51 $$ Element valueElement = new Element("value")-->Line_52 $$ element.addContent(valueElement)[ FD ]
Line_12 $$ Class type = field.getType()-->Line_38 $$ if (type.equals(String.class)) [ FD ]
Line_51 $$ Element valueElement = new Element("value")-->Line_53 $$ domValue.writeExternal(valueElement)[ FD ]
Line_20 $$ value = Byte.toString(field.getByte(data))-->Line_24 $$ value = Integer.toString(field.getInt(data))[ FD ]
Line_31 $$ if (type.equals(char.class)) -->Line_32 $$ value = String.valueOf(field.getChar(data))[ CD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_3 $$ Field[] fields = data.getClass().getFields()[ CD ]
Line_4 $$ for (Field field : fields) -->Line_32 $$ value = String.valueOf(field.getChar(data))[ FD ]
Line_28 $$ value = Float.toString(field.getFloat(data))-->Line_39 $$ value = filterXMLCharacters((String) field.get(data))[ FD ]
Line_29 $$ if (type.equals(double.class)) -->Line_30 $$ value = Double.toString(field.getDouble(data))[ CD ]
Line_20 $$ value = Byte.toString(field.getByte(data))-->Line_39 $$ value = filterXMLCharacters((String) field.get(data))[ FD ]
Line_4 $$ for (Field field : fields) -->Line_13 $$ if (filter != null && !filter.isAccept(field) || field.getDeclaringClass().getAnnotation(Transient.class) != null) [ FD ]
Line_22 $$ value = Short.toString(field.getShort(data))-->Line_26 $$ value = Long.toString(field.getLong(data))[ FD ]
Line_25 $$ if (type.equals(long.class)) -->Line_26 $$ value = Long.toString(field.getLong(data))[ CD ]
Line_45 $$ if (ReflectionUtil.isAssignable(JDOMExternalizable.class, type)) -->Line_46 $$ Element element = new Element("option")[ CD ]
Line_4 $$ for (Field field : fields) -->Line_65 $$ element.setAttribute("name", field.getName())[ FD ]
Line_18 $$ if (type.isPrimitive()) -->Line_38 $$ if (type.equals(String.class)) [ CD ]
Line_26 $$ value = Long.toString(field.getLong(data))-->Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)[ FD ]
Line_45 $$ if (ReflectionUtil.isAssignable(JDOMExternalizable.class, type)) -->Line_47 $$ parentNode.addContent(element)[ CD ]
Line_30 $$ value = Double.toString(field.getDouble(data))-->Line_66 $$ if (value != null) [ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_41 $$ Color color = (Color) field.get(data)[ FD ]
Line_20 $$ value = Byte.toString(field.getByte(data))-->Line_66 $$ if (value != null) [ FD ]
Line_21 $$ if (type.equals(short.class)) -->Line_23 $$ if (type.equals(int.class)) [ CD ]
Line_16 $$ String value = null-->Line_32 $$ value = String.valueOf(field.getChar(data))[ FD ]
Line_19 $$ if (type.equals(byte.class)) -->Line_21 $$ if (type.equals(short.class)) [ CD ]
Line_46 $$ Element element = new Element("option")-->Line_67 $$ element.setAttribute("value", value)[ FD ]
Line_12 $$ Class type = field.getType()-->Line_21 $$ if (type.equals(short.class)) [ FD ]
Line_50 $$ if (domValue != null) -->Line_53 $$ domValue.writeExternal(valueElement)[ CD ]
Line_39 $$ value = filterXMLCharacters((String) field.get(data))-->Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)[ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_32 $$ value = String.valueOf(field.getChar(data))[ FD ]
Line_4 $$ for (Field field : fields) -->Line_11 $$ field.setAccessible(true)[ FD ]
Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)-->Line_67 $$ element.setAttribute("value", value)[ FD ]
Line_20 $$ value = Byte.toString(field.getByte(data))-->Line_30 $$ value = Double.toString(field.getDouble(data))[ FD ]
Line_28 $$ value = Float.toString(field.getFloat(data))-->Line_32 $$ value = String.valueOf(field.getChar(data))[ FD ]
Line_30 $$ value = Double.toString(field.getDouble(data))-->Line_32 $$ value = String.valueOf(field.getChar(data))[ FD ]
Line_12 $$ Class type = field.getType()-->Line_33 $$ if (type.equals(boolean.class)) [ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_24 $$ value = Integer.toString(field.getInt(data))[ FD ]
Line_12 $$ Class type = field.getType()-->Line_40 $$ if (type.equals(Color.class)) [ FD ]
Line_22 $$ value = Short.toString(field.getShort(data))-->Line_67 $$ element.setAttribute("value", value)[ FD ]
Line_38 $$ if (type.equals(String.class)) -->Line_40 $$ if (type.equals(Color.class)) [ CD ]
Line_22 $$ value = Short.toString(field.getShort(data))-->Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)[ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_3 $$ Field[] fields = data.getClass().getFields()[ FD ]
Line_22 $$ value = Short.toString(field.getShort(data))-->Line_34 $$ value = Boolean.toString(field.getBoolean(data))[ FD ]
Line_22 $$ value = Short.toString(field.getShort(data))-->Line_30 $$ value = Double.toString(field.getDouble(data))[ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_39 $$ value = filterXMLCharacters((String) field.get(data))[ FD ]
Line_16 $$ String value = null-->Line_67 $$ element.setAttribute("value", value)[ FD ]
Line_24 $$ value = Integer.toString(field.getInt(data))-->Line_66 $$ if (value != null) [ FD ]
Line_26 $$ value = Long.toString(field.getLong(data))-->Line_28 $$ value = Float.toString(field.getFloat(data))[ FD ]
Line_28 $$ value = Float.toString(field.getFloat(data))-->Line_66 $$ if (value != null) [ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_28 $$ value = Float.toString(field.getFloat(data))[ FD ]
Line_24 $$ value = Integer.toString(field.getInt(data))-->Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)[ FD ]
Line_26 $$ value = Long.toString(field.getLong(data))-->Line_66 $$ if (value != null) [ FD ]
Line_26 $$ value = Long.toString(field.getLong(data))-->Line_67 $$ element.setAttribute("value", value)[ FD ]
Line_4 $$ for (Field field : fields) -->Line_8 $$ if (!(Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && field.getAnnotation(Transient.class) == null))[ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_49 $$ JDOMExternalizable domValue = (JDOMExternalizable) field.get(data)[ FD ]
Line_12 $$ Class type = field.getType()-->Line_27 $$ if (type.equals(float.class)) [ FD ]
Line_22 $$ value = Short.toString(field.getShort(data))-->Line_32 $$ value = String.valueOf(field.getChar(data))[ FD ]
Line_50 $$ if (domValue != null) -->Line_52 $$ element.addContent(valueElement)[ CD ]
Line_24 $$ value = Integer.toString(field.getInt(data))-->Line_28 $$ value = Float.toString(field.getFloat(data))[ FD ]
Line_4 $$ for (Field field : fields) -->Line_12 $$ Class type = field.getType()[ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_34 $$ value = Boolean.toString(field.getBoolean(data))[ FD ]
Line_26 $$ value = Long.toString(field.getLong(data))-->Line_30 $$ value = Double.toString(field.getDouble(data))[ FD ]
Line_4 $$ for (Field field : fields) -->Line_26 $$ value = Long.toString(field.getLong(data))[ FD ]
Line_40 $$ if (type.equals(Color.class)) -->Line_41 $$ Color color = (Color) field.get(data)[ CD ]
Line_12 $$ Class type = field.getType()-->Line_29 $$ if (type.equals(double.class)) [ FD ]
Line_22 $$ value = Short.toString(field.getShort(data))-->Line_24 $$ value = Integer.toString(field.getInt(data))[ FD ]
Line_4 $$ for (Field field : fields) -->Line_24 $$ value = Integer.toString(field.getInt(data))[ FD ]
Line_12 $$ Class type = field.getType()-->Line_45 $$ if (ReflectionUtil.isAssignable(JDOMExternalizable.class, type)) [ FD ]
Line_4 $$ for (Field field : fields) -->Line_34 $$ value = Boolean.toString(field.getBoolean(data))[ FD ]
Line_20 $$ value = Byte.toString(field.getByte(data))-->Line_28 $$ value = Float.toString(field.getFloat(data))[ FD ]
Line_25 $$ if (type.equals(long.class)) -->Line_27 $$ if (type.equals(float.class)) [ CD ]
Line_19 $$ if (type.equals(byte.class)) -->Line_20 $$ value = Byte.toString(field.getByte(data))[ CD ]
Line_16 $$ String value = null-->Line_24 $$ value = Integer.toString(field.getInt(data))[ FD ]
Line_21 $$ if (type.equals(short.class)) -->Line_22 $$ value = Short.toString(field.getShort(data))[ CD ]
Line_29 $$ if (type.equals(double.class)) -->Line_31 $$ if (type.equals(char.class)) [ CD ]
Line_20 $$ value = Byte.toString(field.getByte(data))-->Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)[ FD ]
Line_24 $$ value = Integer.toString(field.getInt(data))-->Line_34 $$ value = Boolean.toString(field.getBoolean(data))[ FD ]
Line_32 $$ value = String.valueOf(field.getChar(data))-->Line_66 $$ if (value != null) [ FD ]
Line_38 $$ if (type.equals(String.class)) -->Line_39 $$ value = filterXMLCharacters((String) field.get(data))[ CD ]
Line_46 $$ Element element = new Element("option")-->Line_48 $$ element.setAttribute("name", field.getName())[ FD ]
Line_16 $$ String value = null-->Line_22 $$ value = Short.toString(field.getShort(data))[ FD ]
Line_43 $$ value = Integer.toString(color.getRGB() & 0xFFFFFF, 16)-->Line_66 $$ if (value != null) [ FD ]
Line_4 $$ for (Field field : fields) -->Line_28 $$ value = Float.toString(field.getFloat(data))[ FD ]
Line_40 $$ if (type.equals(Color.class)) -->Line_45 $$ if (ReflectionUtil.isAssignable(JDOMExternalizable.class, type)) [ CD ]
Line_46 $$ Element element = new Element("option")-->Line_64 $$ parentNode.addContent(element)[ FD ]
Line_22 $$ value = Short.toString(field.getShort(data))-->Line_66 $$ if (value != null) [ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_13 $$ if (filter != null && !filter.isAccept(field) || field.getDeclaringClass().getAnnotation(Transient.class) != null) [ FD ]
Line_45 $$ if (ReflectionUtil.isAssignable(JDOMExternalizable.class, type)) -->Line_48 $$ element.setAttribute("name", field.getName())[ CD ]
Line_20 $$ value = Byte.toString(field.getByte(data))-->Line_26 $$ value = Long.toString(field.getLong(data))[ FD ]
Line_49 $$ JDOMExternalizable domValue = (JDOMExternalizable) field.get(data)-->Line_50 $$ if (domValue != null) [ FD ]
Line_34 $$ value = Boolean.toString(field.getBoolean(data))-->Line_66 $$ if (value != null) [ FD ]
Line_2 $$ public static void writeExternal(@NotNull Object data, @NotNull Element parentNode, @Nullable("null means all elements accepted") JDOMFilter filter) throws WriteExternalException -->Line_26 $$ value = Long.toString(field.getLong(data))[ FD ]
Line_16 $$ String value = null-->Line_34 $$ value = Boolean.toString(field.getBoolean(data))[ FD ]
Line_26 $$ value = Long.toString(field.getLong(data))-->Line_32 $$ value = String.valueOf(field.getChar(data))[ FD ]
Line_39 $$ value = filterXMLCharacters((String) field.get(data))-->Line_67 $$ element.setAttribute("value", value)[ FD ]
Line_46 $$ Element element = new Element("option")-->Line_52 $$ element.addContent(valueElement)[ FD ]
Line_39 $$ value = filterXMLCharacters((String) field.get(data))-->Line_66 $$ if (value != null) [ FD ]
