Line_2 $$ protected void paintComponent(Graphics g) -->Line_39 $$ g.setColor(fgColor)[ FD ]
Line_46 $$ if (text.length() != 0) -->Line_49 $$ g.drawString(text, offset, yOffset)[ CD ]
Line_22 $$ int offset = textOffset-->Line_56 $$ g.fillRect(offset, 0, fontMetrics.stringWidth(text), fontMetrics.getHeight() + fontMetrics.getLeading())[ FD ]
Line_44 $$ String text = myText.substring(endIndex, hRegion.startOffset)-->Line_53 $$ text = myText.substring(hRegion.startOffset, hRegion.endOffset)[ FD ]
Line_5 $$ boolean paintHighlightsBackground-->Line_54 $$ if (hRegion.textAttributes.getBackgroundColor() != null && paintHighlightsBackground) [ FD ]
Line_65 $$ if (hRegion.textAttributes.getEffectColor() != null) -->Line_69 $$ UIUtil.drawLine(g, offset, y, offset + fontMetrics.stringWidth(text) - 1, y)[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_47 $$ g.setColor(fgColor)[ FD ]
Line_23 $$ if (isOpaque()) -->Line_24 $$ g.setColor(getBackground())[ CD ]
Line_6 $$ boolean paintHighlightsForeground-->Line_19 $$ paintHighlightsForeground = false[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_5 $$ boolean paintHighlightsBackground[ CD ]
Line_7 $$ if (myIsSelected && (myHasFocus || myPaintUnfocusedSelection)) -->Line_16 $$ paintHighlightsForeground = true[ CD ]
Line_53 $$ text = myText.substring(hRegion.startOffset, hRegion.endOffset)-->Line_69 $$ UIUtil.drawLine(g, offset, y, offset + fontMetrics.stringWidth(text) - 1, y)[ FD ]
Line_23 $$ if (isOpaque()) -->Line_27 $$ g.fillRect(textOffset - 2, 0, getWidth(), getHeight())[ CD ]
Line_50 $$ offset += defFontMetrics.stringWidth(text)-->Line_81 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_8 $$ bgColor = UIUtil.getTreeSelectionBackground()-->Line_13 $$ bgColor = myEnforcedBackground == null ? UIUtil.getTreeTextBackground() : myEnforcedBackground[ FD ]
Line_37 $$ final int yOffset = (getHeight() - defFontMetrics.getMaxAscent() - defFontMetrics.getMaxDescent()) / 2 + defFontMetrics.getMaxAscent() - 1-->Line_49 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_65 $$ if (hRegion.textAttributes.getEffectColor() != null) -->Line_67 $$ int y = yOffset + 2[ CD ]
Line_42 $$ int endIndex = 0-->Line_44 $$ String text = myText.substring(endIndex, hRegion.startOffset)[ FD ]
Line_44 $$ String text = myText.substring(endIndex, hRegion.startOffset)-->Line_78 $$ if (text.length() != 0) [ FD ]
Line_6 $$ boolean paintHighlightsForeground-->Line_58 $$ if (hRegion.textAttributes.getForegroundColor() != null && paintHighlightsForeground) [ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_24 $$ g.setColor(getBackground())[ FD ]
Line_65 $$ if (hRegion.textAttributes.getEffectColor() != null) -->Line_66 $$ g.setColor(hRegion.textAttributes.getEffectColor())[ CD ]
Line_33 $$ FontMetrics defFontMetrics = getFontMetrics(getFont())-->Line_50 $$ offset += defFontMetrics.stringWidth(text)[ FD ]
Line_3 $$ Color bgColor-->Line_8 $$ bgColor = UIUtil.getTreeSelectionBackground()[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_69 $$ UIUtil.drawLine(g, offset, y, offset + fontMetrics.stringWidth(text) - 1, y)[ FD ]
Line_21 $$ int textOffset = getTextOffset()-->Line_40 $$ g.drawString(myText, textOffset, yOffset)[ FD ]
Line_52 $$ FontMetrics fontMetrics = myFontMetrics.get(hRegion.textAttributes.getFontType())-->Line_73 $$ g.drawRect(offset, 0, fontMetrics.stringWidth(text) - 1, fontMetrics.getHeight() + fontMetrics.getLeading() - 1)[ FD ]
Line_54 $$ if (hRegion.textAttributes.getBackgroundColor() != null && paintHighlightsBackground) -->Line_56 $$ g.fillRect(offset, 0, fontMetrics.stringWidth(text), fontMetrics.getHeight() + fontMetrics.getLeading())[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_21 $$ int textOffset = getTextOffset()[ CD ]
Line_42 $$ int endIndex = 0-->Line_77 $$ String text = myText.substring(endIndex, myText.length())[ FD ]
Line_50 $$ offset += defFontMetrics.stringWidth(text)-->Line_56 $$ g.fillRect(offset, 0, fontMetrics.stringWidth(text), fontMetrics.getHeight() + fontMetrics.getLeading())[ FD ]
Line_9 $$ fgColor = UIUtil.getTreeSelectionForeground()-->Line_47 $$ g.setColor(fgColor)[ FD ]
Line_46 $$ if (text.length() != 0) -->Line_47 $$ g.setColor(fgColor)[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_86 $$ UIUtil.drawDottedRectangle(g, textOffset - 2, 0, getWidth() - 1, getHeight() - 1)[ FD ]
Line_9 $$ fgColor = UIUtil.getTreeSelectionForeground()-->Line_14 $$ fgColor = getForeground()[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_48 $$ g.setFont(defFontMetrics.getFont())[ FD ]
Line_71 $$ if (hRegion.textAttributes.getEffectColor() != null && hRegion.textAttributes.getEffectType() == EffectType.BOXED) -->Line_72 $$ g.setColor(hRegion.textAttributes.getEffectColor())[ CD ]
Line_9 $$ fgColor = UIUtil.getTreeSelectionForeground()-->Line_39 $$ g.setColor(fgColor)[ FD ]
Line_38 $$ if (myHighlightedRegions.size() == 0) -->Line_42 $$ int endIndex = 0[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_56 $$ g.fillRect(offset, 0, fontMetrics.stringWidth(text), fontMetrics.getHeight() + fontMetrics.getLeading())[ FD ]
Line_38 $$ if (myHighlightedRegions.size() == 0) -->Line_40 $$ g.drawString(myText, textOffset, yOffset)[ CD ]
Line_33 $$ FontMetrics defFontMetrics = getFontMetrics(getFont())-->Line_37 $$ final int yOffset = (getHeight() - defFontMetrics.getMaxAscent() - defFontMetrics.getMaxDescent()) / 2 + defFontMetrics.getMaxAscent() - 1[ FD ]
Line_6 $$ boolean paintHighlightsForeground-->Line_16 $$ paintHighlightsForeground = true[ FD ]
Line_38 $$ if (myHighlightedRegions.size() == 0) -->Line_78 $$ if (text.length() != 0) [ CD ]
Line_16 $$ paintHighlightsForeground = true-->Line_19 $$ paintHighlightsForeground = false[ FD ]
Line_53 $$ text = myText.substring(hRegion.startOffset, hRegion.endOffset)-->Line_81 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_50 $$ offset += defFontMetrics.stringWidth(text)-->Line_75 $$ offset += fontMetrics.stringWidth(text)[ FD ]
Line_44 $$ String text = myText.substring(endIndex, hRegion.startOffset)-->Line_64 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_67 $$ int y = yOffset + 2-->Line_69 $$ UIUtil.drawLine(g, offset, y, offset + fontMetrics.stringWidth(text) - 1, y)[ FD ]
Line_44 $$ String text = myText.substring(endIndex, hRegion.startOffset)-->Line_81 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_7 $$ if (myIsSelected && (myHasFocus || myPaintUnfocusedSelection)) -->Line_8 $$ bgColor = UIUtil.getTreeSelectionBackground()[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_37 $$ final int yOffset = (getHeight() - defFontMetrics.getMaxAscent() - defFontMetrics.getMaxDescent()) / 2 + defFontMetrics.getMaxAscent() - 1[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_81 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_66 $$ g.setColor(hRegion.textAttributes.getEffectColor())[ FD ]
Line_44 $$ String text = myText.substring(endIndex, hRegion.startOffset)-->Line_73 $$ g.drawRect(offset, 0, fontMetrics.stringWidth(text) - 1, fontMetrics.getHeight() + fontMetrics.getLeading() - 1)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_29 $$ if (myIcon != null) [ CD ]
Line_44 $$ String text = myText.substring(endIndex, hRegion.startOffset)-->Line_56 $$ g.fillRect(offset, 0, fontMetrics.stringWidth(text), fontMetrics.getHeight() + fontMetrics.getLeading())[ FD ]
Line_22 $$ int offset = textOffset-->Line_49 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_52 $$ FontMetrics fontMetrics = myFontMetrics.get(hRegion.textAttributes.getFontType())-->Line_69 $$ UIUtil.drawLine(g, offset, y, offset + fontMetrics.stringWidth(text) - 1, y)[ FD ]
Line_7 $$ if (myIsSelected && (myHasFocus || myPaintUnfocusedSelection)) -->Line_9 $$ fgColor = UIUtil.getTreeSelectionForeground()[ CD ]
Line_50 $$ offset += defFontMetrics.stringWidth(text)-->Line_69 $$ UIUtil.drawLine(g, offset, y, offset + fontMetrics.stringWidth(text) - 1, y)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_88 $$ super.paintComponent(g)[ FD ]
Line_4 $$ Color fgColor-->Line_79 $$ g.setColor(fgColor)[ FD ]
Line_7 $$ if (myIsSelected && (myHasFocus || myPaintUnfocusedSelection)) -->Line_11 $$ paintHighlightsForeground = false[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_32 $$ applyRenderingHints(g)[ CD ]
Line_38 $$ if (myHighlightedRegions.size() == 0) -->Line_39 $$ g.setColor(fgColor)[ CD ]
Line_44 $$ String text = myText.substring(endIndex, hRegion.startOffset)-->Line_50 $$ offset += defFontMetrics.stringWidth(text)[ FD ]
Line_78 $$ if (text.length() != 0) -->Line_79 $$ g.setColor(fgColor)[ CD ]
Line_22 $$ int offset = textOffset-->Line_64 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_33 $$ FontMetrics defFontMetrics = getFontMetrics(getFont())[ CD ]
Line_22 $$ int offset = textOffset-->Line_73 $$ g.drawRect(offset, 0, fontMetrics.stringWidth(text) - 1, fontMetrics.getHeight() + fontMetrics.getLeading() - 1)[ FD ]
Line_53 $$ text = myText.substring(hRegion.startOffset, hRegion.endOffset)-->Line_64 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_80 $$ g.setFont(defFontMetrics.getFont())[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_64 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_27 $$ g.fillRect(textOffset - 2, 0, getWidth(), getHeight())[ FD ]
Line_44 $$ String text = myText.substring(endIndex, hRegion.startOffset)-->Line_75 $$ offset += fontMetrics.stringWidth(text)[ FD ]
Line_44 $$ String text = myText.substring(endIndex, hRegion.startOffset)-->Line_69 $$ UIUtil.drawLine(g, offset, y, offset + fontMetrics.stringWidth(text) - 1, y)[ FD ]
Line_53 $$ text = myText.substring(hRegion.startOffset, hRegion.endOffset)-->Line_75 $$ offset += fontMetrics.stringWidth(text)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_61 $$ g.setColor(fgColor)[ FD ]
Line_4 $$ Color fgColor-->Line_39 $$ g.setColor(fgColor)[ FD ]
Line_78 $$ if (text.length() != 0) -->Line_80 $$ g.setFont(defFontMetrics.getFont())[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_38 $$ if (myHighlightedRegions.size() == 0) [ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_85 $$ g.setColor(UIUtil.getTreeSelectionBorderColor())[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_34 $$ if (myText == null) [ CD ]
Line_7 $$ if (myIsSelected && (myHasFocus || myPaintUnfocusedSelection)) -->Line_15 $$ paintHighlightsBackground = isOpaque()[ CD ]
Line_22 $$ int offset = textOffset-->Line_81 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_11 $$ paintHighlightsForeground = false-->Line_58 $$ if (hRegion.textAttributes.getForegroundColor() != null && paintHighlightsForeground) [ FD ]
Line_22 $$ int offset = textOffset-->Line_75 $$ offset += fontMetrics.stringWidth(text)[ FD ]
Line_18 $$ if (myDoNotHighlight) -->Line_19 $$ paintHighlightsForeground = false[ CD ]
Line_44 $$ String text = myText.substring(endIndex, hRegion.startOffset)-->Line_49 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_53 $$ text = myText.substring(hRegion.startOffset, hRegion.endOffset)-->Line_73 $$ g.drawRect(offset, 0, fontMetrics.stringWidth(text) - 1, fontMetrics.getHeight() + fontMetrics.getLeading() - 1)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_26 $$ g.setColor(bgColor)[ FD ]
Line_11 $$ paintHighlightsForeground = false-->Line_19 $$ paintHighlightsForeground = false[ FD ]
Line_6 $$ boolean paintHighlightsForeground-->Line_11 $$ paintHighlightsForeground = false[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_6 $$ boolean paintHighlightsForeground[ CD ]
Line_37 $$ final int yOffset = (getHeight() - defFontMetrics.getMaxAscent() - defFontMetrics.getMaxDescent()) / 2 + defFontMetrics.getMaxAscent() - 1-->Line_81 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_53 $$ text = myText.substring(hRegion.startOffset, hRegion.endOffset)-->Line_78 $$ if (text.length() != 0) [ FD ]
Line_14 $$ fgColor = getForeground()-->Line_79 $$ g.setColor(fgColor)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_49 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_78 $$ if (text.length() != 0) -->Line_81 $$ g.drawString(text, offset, yOffset)[ CD ]
Line_8 $$ bgColor = UIUtil.getTreeSelectionBackground()-->Line_26 $$ g.setColor(bgColor)[ FD ]
Line_14 $$ fgColor = getForeground()-->Line_47 $$ g.setColor(fgColor)[ FD ]
Line_44 $$ String text = myText.substring(endIndex, hRegion.startOffset)-->Line_46 $$ if (text.length() != 0) [ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_7 $$ if (myIsSelected && (myHasFocus || myPaintUnfocusedSelection)) [ CD ]
Line_3 $$ Color bgColor-->Line_26 $$ g.setColor(bgColor)[ FD ]
Line_10 $$ paintHighlightsBackground = false-->Line_54 $$ if (hRegion.textAttributes.getBackgroundColor() != null && paintHighlightsBackground) [ FD ]
Line_42 $$ int endIndex = 0-->Line_45 $$ endIndex = hRegion.endOffset[ FD ]
Line_38 $$ if (myHighlightedRegions.size() == 0) -->Line_77 $$ String text = myText.substring(endIndex, myText.length())[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_40 $$ g.drawString(myText, textOffset, yOffset)[ FD ]
Line_33 $$ FontMetrics defFontMetrics = getFontMetrics(getFont())-->Line_80 $$ g.setFont(defFontMetrics.getFont())[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_30 $$ myIcon.paintIcon(this, g, 0, (getHeight() - myIcon.getIconHeight()) / 2)[ FD ]
Line_84 $$ if (myIsSelected) -->Line_86 $$ UIUtil.drawDottedRectangle(g, textOffset - 2, 0, getWidth() - 1, getHeight() - 1)[ CD ]
Line_10 $$ paintHighlightsBackground = false-->Line_15 $$ paintHighlightsBackground = isOpaque()[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_32 $$ applyRenderingHints(g)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_79 $$ g.setColor(fgColor)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_18 $$ if (myDoNotHighlight) [ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_22 $$ int offset = textOffset[ CD ]
Line_52 $$ FontMetrics fontMetrics = myFontMetrics.get(hRegion.textAttributes.getFontType())-->Line_63 $$ g.setFont(fontMetrics.getFont())[ FD ]
Line_9 $$ fgColor = UIUtil.getTreeSelectionForeground()-->Line_79 $$ g.setColor(fgColor)[ FD ]
Line_9 $$ fgColor = UIUtil.getTreeSelectionForeground()-->Line_61 $$ g.setColor(fgColor)[ FD ]
Line_58 $$ if (hRegion.textAttributes.getForegroundColor() != null && paintHighlightsForeground) -->Line_61 $$ g.setColor(fgColor)[ CD ]
Line_22 $$ int offset = textOffset-->Line_50 $$ offset += defFontMetrics.stringWidth(text)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_73 $$ g.drawRect(offset, 0, fontMetrics.stringWidth(text) - 1, fontMetrics.getHeight() + fontMetrics.getLeading() - 1)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_4 $$ Color fgColor[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_23 $$ if (isOpaque()) [ CD ]
Line_16 $$ paintHighlightsForeground = true-->Line_58 $$ if (hRegion.textAttributes.getForegroundColor() != null && paintHighlightsForeground) [ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_84 $$ if (myIsSelected) [ CD ]
Line_11 $$ paintHighlightsForeground = false-->Line_16 $$ paintHighlightsForeground = true[ FD ]
Line_5 $$ boolean paintHighlightsBackground-->Line_10 $$ paintHighlightsBackground = false[ FD ]
Line_7 $$ if (myIsSelected && (myHasFocus || myPaintUnfocusedSelection)) -->Line_10 $$ paintHighlightsBackground = false[ CD ]
Line_75 $$ offset += fontMetrics.stringWidth(text)-->Line_81 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_54 $$ if (hRegion.textAttributes.getBackgroundColor() != null && paintHighlightsBackground) -->Line_55 $$ g.setColor(hRegion.textAttributes.getBackgroundColor())[ CD ]
Line_58 $$ if (hRegion.textAttributes.getForegroundColor() != null && paintHighlightsForeground) -->Line_59 $$ g.setColor(hRegion.textAttributes.getForegroundColor())[ CD ]
Line_50 $$ offset += defFontMetrics.stringWidth(text)-->Line_73 $$ g.drawRect(offset, 0, fontMetrics.stringWidth(text) - 1, fontMetrics.getHeight() + fontMetrics.getLeading() - 1)[ FD ]
Line_4 $$ Color fgColor-->Line_14 $$ fgColor = getForeground()[ FD ]
Line_3 $$ Color bgColor-->Line_13 $$ bgColor = myEnforcedBackground == null ? UIUtil.getTreeTextBackground() : myEnforcedBackground[ FD ]
Line_4 $$ Color fgColor-->Line_61 $$ g.setColor(fgColor)[ FD ]
Line_52 $$ FontMetrics fontMetrics = myFontMetrics.get(hRegion.textAttributes.getFontType())-->Line_56 $$ g.fillRect(offset, 0, fontMetrics.stringWidth(text), fontMetrics.getHeight() + fontMetrics.getLeading())[ FD ]
Line_52 $$ FontMetrics fontMetrics = myFontMetrics.get(hRegion.textAttributes.getFontType())-->Line_75 $$ offset += fontMetrics.stringWidth(text)[ FD ]
Line_71 $$ if (hRegion.textAttributes.getEffectColor() != null && hRegion.textAttributes.getEffectType() == EffectType.BOXED) -->Line_73 $$ g.drawRect(offset, 0, fontMetrics.stringWidth(text) - 1, fontMetrics.getHeight() + fontMetrics.getLeading() - 1)[ CD ]
Line_53 $$ text = myText.substring(hRegion.startOffset, hRegion.endOffset)-->Line_56 $$ g.fillRect(offset, 0, fontMetrics.stringWidth(text), fontMetrics.getHeight() + fontMetrics.getLeading())[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_3 $$ Color bgColor[ CD ]
Line_50 $$ offset += defFontMetrics.stringWidth(text)-->Line_64 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_14 $$ fgColor = getForeground()-->Line_61 $$ g.setColor(fgColor)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_72 $$ g.setColor(hRegion.textAttributes.getEffectColor())[ FD ]
Line_4 $$ Color fgColor-->Line_47 $$ g.setColor(fgColor)[ FD ]
Line_84 $$ if (myIsSelected) -->Line_85 $$ g.setColor(UIUtil.getTreeSelectionBorderColor())[ CD ]
Line_46 $$ if (text.length() != 0) -->Line_50 $$ offset += defFontMetrics.stringWidth(text)[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_63 $$ g.setFont(fontMetrics.getFont())[ FD ]
Line_23 $$ if (isOpaque()) -->Line_26 $$ g.setColor(bgColor)[ CD ]
Line_7 $$ if (myIsSelected && (myHasFocus || myPaintUnfocusedSelection)) -->Line_14 $$ fgColor = getForeground()[ CD ]
Line_13 $$ bgColor = myEnforcedBackground == null ? UIUtil.getTreeTextBackground() : myEnforcedBackground-->Line_26 $$ g.setColor(bgColor)[ FD ]
Line_29 $$ if (myIcon != null) -->Line_30 $$ myIcon.paintIcon(this, g, 0, (getHeight() - myIcon.getIconHeight()) / 2)[ CD ]
Line_5 $$ boolean paintHighlightsBackground-->Line_15 $$ paintHighlightsBackground = isOpaque()[ FD ]
Line_14 $$ fgColor = getForeground()-->Line_39 $$ g.setColor(fgColor)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_55 $$ g.setColor(hRegion.textAttributes.getBackgroundColor())[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_59 $$ g.setColor(hRegion.textAttributes.getForegroundColor())[ FD ]
Line_46 $$ if (text.length() != 0) -->Line_48 $$ g.setFont(defFontMetrics.getFont())[ CD ]
Line_4 $$ Color fgColor-->Line_9 $$ fgColor = UIUtil.getTreeSelectionForeground()[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_25 $$ g.fillRect(0, 0, textOffset - 2, getHeight())[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_88 $$ super.paintComponent(g)[ CD ]
Line_22 $$ int offset = textOffset-->Line_69 $$ UIUtil.drawLine(g, offset, y, offset + fontMetrics.stringWidth(text) - 1, y)[ FD ]
Line_15 $$ paintHighlightsBackground = isOpaque()-->Line_54 $$ if (hRegion.textAttributes.getBackgroundColor() != null && paintHighlightsBackground) [ FD ]
Line_37 $$ final int yOffset = (getHeight() - defFontMetrics.getMaxAscent() - defFontMetrics.getMaxDescent()) / 2 + defFontMetrics.getMaxAscent() - 1-->Line_40 $$ g.drawString(myText, textOffset, yOffset)[ FD ]
Line_7 $$ if (myIsSelected && (myHasFocus || myPaintUnfocusedSelection)) -->Line_13 $$ bgColor = myEnforcedBackground == null ? UIUtil.getTreeTextBackground() : myEnforcedBackground[ CD ]
Line_37 $$ final int yOffset = (getHeight() - defFontMetrics.getMaxAscent() - defFontMetrics.getMaxDescent()) / 2 + defFontMetrics.getMaxAscent() - 1-->Line_64 $$ g.drawString(text, offset, yOffset)[ FD ]
Line_45 $$ endIndex = hRegion.endOffset-->Line_77 $$ String text = myText.substring(endIndex, myText.length())[ FD ]
Line_33 $$ FontMetrics defFontMetrics = getFontMetrics(getFont())-->Line_48 $$ g.setFont(defFontMetrics.getFont())[ FD ]
Line_19 $$ paintHighlightsForeground = false-->Line_58 $$ if (hRegion.textAttributes.getForegroundColor() != null && paintHighlightsForeground) [ FD ]
Line_23 $$ if (isOpaque()) -->Line_25 $$ g.fillRect(0, 0, textOffset - 2, getHeight())[ CD ]
