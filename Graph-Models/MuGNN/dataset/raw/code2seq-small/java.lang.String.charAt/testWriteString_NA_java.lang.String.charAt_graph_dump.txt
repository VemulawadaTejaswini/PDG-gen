Line_38 $$ for (int i = 5; i < data.length; i++) -->Line_39 $$ Assert.assertEquals(byteBuffer.get(), data[i])[ CD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_32 $$ for (int i = 0; i < nonAsciiString.length(); i++) [ CD ]
Line_11 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_20 $$ Assert.assertEquals(byteBuffer.get(), data[i])[ FD ]
Line_32 $$ for (int i = 0; i < nonAsciiString.length(); i++) -->Line_38 $$ for (int i = 5; i < data.length; i++) [ FD ]
Line_9 $$ int length = BigEndianCodec.getInt(serializer.buffer, 1)-->Line_28 $$ Assert.assertEquals(nonAsciiString.length(), length)[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_37 $$ data = unsyncByteArrayOutputStream.toByteArray()[ CD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_19 $$ for (int i = 5; i < data.length; i++) [ CD ]
Line_27 $$ length = BigEndianCodec.getInt(serializer.buffer, 1)-->Line_28 $$ Assert.assertEquals(nonAsciiString.length(), length)[ FD ]
Line_16 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_17 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_36 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ CD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_29 $$ byteBuffer = ByteBuffer.allocate(nonAsciiString.length() * 2)[ CD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_17 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ CD ]
Line_3 $$ String asciiString = "abcdefghijklmn"-->Line_11 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())[ FD ]
Line_12 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_13 $$ byteBuffer.put((byte) asciiString.charAt(i))[ CD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_6 $$ serializer.writeString(asciiString)[ CD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_7 $$ Assert.assertEquals(serializer.index, 5 + asciiString.length())[ CD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_16 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()[ CD ]
Line_22 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_28 $$ Assert.assertEquals(nonAsciiString.length(), length)[ FD ]
Line_11 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_15 $$ byteBuffer.flip()[ FD ]
Line_4 $$ Serializer serializer = new Serializer()-->Line_24 $$ serializer.writeString(nonAsciiString)[ FD ]
Line_11 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_30 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_11 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())[ CD ]
Line_35 $$ unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_36 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ FD ]
Line_18 $$ byte[] data = unsyncByteArrayOutputStream.toByteArray()-->Line_37 $$ data = unsyncByteArrayOutputStream.toByteArray()[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_23 $$ serializer = new Serializer()[ CD ]
Line_3 $$ String asciiString = "abcdefghijklmn"-->Line_6 $$ serializer.writeString(asciiString)[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_38 $$ for (int i = 5; i < data.length; i++) [ CD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_3 $$ String asciiString = "abcdefghijklmn"[ CD ]
Line_16 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_18 $$ byte[] data = unsyncByteArrayOutputStream.toByteArray()[ FD ]
Line_12 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_13 $$ byteBuffer.put((byte) asciiString.charAt(i))[ FD ]
Line_9 $$ int length = BigEndianCodec.getInt(serializer.buffer, 1)-->Line_27 $$ length = BigEndianCodec.getInt(serializer.buffer, 1)[ FD ]
Line_32 $$ for (int i = 0; i < nonAsciiString.length(); i++) -->Line_33 $$ charBuffer.put(nonAsciiString.charAt(i))[ FD ]
Line_22 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_29 $$ byteBuffer = ByteBuffer.allocate(nonAsciiString.length() * 2)[ FD ]
Line_3 $$ String asciiString = "abcdefghijklmn"-->Line_10 $$ Assert.assertEquals(asciiString.length(), length)[ FD ]
Line_12 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_38 $$ for (int i = 5; i < data.length; i++) [ FD ]
Line_19 $$ for (int i = 5; i < data.length; i++) -->Line_20 $$ Assert.assertEquals(byteBuffer.get(), data[i])[ CD ]
Line_11 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_39 $$ Assert.assertEquals(byteBuffer.get(), data[i])[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_9 $$ int length = BigEndianCodec.getInt(serializer.buffer, 1)[ CD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_26 $$ Assert.assertFalse(BigEndianCodec.getBoolean(serializer.buffer, 0))[ CD ]
Line_16 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_37 $$ data = unsyncByteArrayOutputStream.toByteArray()[ FD ]
Line_11 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_29 $$ byteBuffer = ByteBuffer.allocate(nonAsciiString.length() * 2)[ FD ]
Line_23 $$ serializer = new Serializer()-->Line_24 $$ serializer.writeString(nonAsciiString)[ FD ]
Line_3 $$ String asciiString = "abcdefghijklmn"-->Line_13 $$ byteBuffer.put((byte) asciiString.charAt(i))[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_12 $$ for (int i = 0; i < asciiString.length(); i++) [ CD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_22 $$ String nonAsciiString = "非ASCII Code中文测试"[ CD ]
Line_11 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_13 $$ byteBuffer.put((byte) asciiString.charAt(i))[ FD ]
Line_16 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_35 $$ unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_5 $$ serializer.buffer = new byte[0][ CD ]
Line_12 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_32 $$ for (int i = 0; i < nonAsciiString.length(); i++) [ FD ]
Line_3 $$ String asciiString = "abcdefghijklmn"-->Line_7 $$ Assert.assertEquals(serializer.index, 5 + asciiString.length())[ FD ]
Line_35 $$ unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_37 $$ data = unsyncByteArrayOutputStream.toByteArray()[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_10 $$ Assert.assertEquals(asciiString.length(), length)[ CD ]
Line_4 $$ Serializer serializer = new Serializer()-->Line_23 $$ serializer = new Serializer()[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_4 $$ Serializer serializer = new Serializer()[ CD ]
Line_4 $$ Serializer serializer = new Serializer()-->Line_6 $$ serializer.writeString(asciiString)[ FD ]
Line_22 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_24 $$ serializer.writeString(nonAsciiString)[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_35 $$ unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()[ CD ]
Line_29 $$ byteBuffer = ByteBuffer.allocate(nonAsciiString.length() * 2)-->Line_30 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_4 $$ Serializer serializer = new Serializer()-->Line_17 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_31 $$ CharBuffer charBuffer = byteBuffer.asCharBuffer()[ CD ]
Line_3 $$ String asciiString = "abcdefghijklmn"-->Line_12 $$ for (int i = 0; i < asciiString.length(); i++) [ FD ]
Line_22 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_33 $$ charBuffer.put(nonAsciiString.charAt(i))[ FD ]
Line_22 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_25 $$ Assert.assertEquals(serializer.index, 5 + nonAsciiString.length() * 2)[ FD ]
Line_29 $$ byteBuffer = ByteBuffer.allocate(nonAsciiString.length() * 2)-->Line_31 $$ CharBuffer charBuffer = byteBuffer.asCharBuffer()[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_8 $$ Assert.assertTrue(BigEndianCodec.getBoolean(serializer.buffer, 0))[ CD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_30 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ CD ]
Line_32 $$ for (int i = 0; i < nonAsciiString.length(); i++) -->Line_33 $$ charBuffer.put(nonAsciiString.charAt(i))[ CD ]
Line_16 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_36 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ FD ]
Line_9 $$ int length = BigEndianCodec.getInt(serializer.buffer, 1)-->Line_10 $$ Assert.assertEquals(asciiString.length(), length)[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_25 $$ Assert.assertEquals(serializer.index, 5 + nonAsciiString.length() * 2)[ CD ]
Line_23 $$ serializer = new Serializer()-->Line_36 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ FD ]
Line_19 $$ for (int i = 5; i < data.length; i++) -->Line_33 $$ charBuffer.put(nonAsciiString.charAt(i))[ FD ]
Line_11 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_31 $$ CharBuffer charBuffer = byteBuffer.asCharBuffer()[ FD ]
Line_4 $$ Serializer serializer = new Serializer()-->Line_36 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ FD ]
Line_31 $$ CharBuffer charBuffer = byteBuffer.asCharBuffer()-->Line_33 $$ charBuffer.put(nonAsciiString.charAt(i))[ FD ]
Line_19 $$ for (int i = 5; i < data.length; i++) -->Line_32 $$ for (int i = 0; i < nonAsciiString.length(); i++) [ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_15 $$ byteBuffer.flip()[ CD ]
Line_12 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_33 $$ charBuffer.put(nonAsciiString.charAt(i))[ FD ]
Line_22 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_32 $$ for (int i = 0; i < nonAsciiString.length(); i++) [ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_27 $$ length = BigEndianCodec.getInt(serializer.buffer, 1)[ CD ]
Line_19 $$ for (int i = 5; i < data.length; i++) -->Line_38 $$ for (int i = 5; i < data.length; i++) [ FD ]
Line_29 $$ byteBuffer = ByteBuffer.allocate(nonAsciiString.length() * 2)-->Line_39 $$ Assert.assertEquals(byteBuffer.get(), data[i])[ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_24 $$ serializer.writeString(nonAsciiString)[ CD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_28 $$ Assert.assertEquals(nonAsciiString.length(), length)[ CD ]
Line_12 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_19 $$ for (int i = 5; i < data.length; i++) [ FD ]
Line_2 $$ public void testWriteString() throws IOException -->Line_18 $$ byte[] data = unsyncByteArrayOutputStream.toByteArray()[ CD ]
