Line_19 $$ if (curChar == escapeChar) -->Line_20 $$ hasPreEscape = true[ CD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_3 $$ if (str == null) [ FD ]
Line_6 $$ StringBuilder result = new StringBuilder(str.length())-->Line_29 $$ return result.toString()[ FD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_10 $$ if (hasPreEscape) [ CD ]
Line_6 $$ StringBuilder result = new StringBuilder(str.length())-->Line_14 $$ result.append(curChar)[ FD ]
Line_9 $$ char curChar = str.charAt(i)-->Line_14 $$ result.append(curChar)[ FD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_3 $$ if (str == null) [ CD ]
Line_15 $$ hasPreEscape = false-->Line_20 $$ hasPreEscape = true[ FD ]
Line_3 $$ if (str == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_6 $$ StringBuilder result = new StringBuilder(str.length())[ FD ]
Line_10 $$ if (hasPreEscape) -->Line_11 $$ if (curChar != escapeChar && !hasChar(charsToEscape, curChar)) [ CD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_29 $$ return result.toString()[ CD ]
Line_9 $$ char curChar = str.charAt(i)-->Line_11 $$ if (curChar != escapeChar && !hasChar(charsToEscape, curChar)) [ FD ]
Line_19 $$ if (curChar == escapeChar) -->Line_22 $$ result.append(curChar)[ CD ]
Line_10 $$ if (hasPreEscape) -->Line_17 $$ if (hasChar(charsToEscape, curChar)) [ CD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_7 $$ boolean hasPreEscape = false[ CD ]
Line_9 $$ char curChar = str.charAt(i)-->Line_17 $$ if (hasChar(charsToEscape, curChar)) [ FD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_19 $$ if (curChar == escapeChar) [ FD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_6 $$ StringBuilder result = new StringBuilder(str.length())[ CD ]
Line_17 $$ if (hasChar(charsToEscape, curChar)) -->Line_19 $$ if (curChar == escapeChar) [ CD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_9 $$ char curChar = str.charAt(i)[ FD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_11 $$ if (curChar != escapeChar && !hasChar(charsToEscape, curChar)) [ FD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_17 $$ if (hasChar(charsToEscape, curChar)) [ FD ]
Line_10 $$ if (hasPreEscape) -->Line_15 $$ hasPreEscape = false[ CD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_9 $$ char curChar = str.charAt(i)[ FD ]
Line_7 $$ boolean hasPreEscape = false-->Line_15 $$ hasPreEscape = false[ FD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_8 $$ for (int i = 0; i < str.length(); i++) [ CD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_8 $$ for (int i = 0; i < str.length(); i++) [ FD ]
Line_7 $$ boolean hasPreEscape = false-->Line_20 $$ hasPreEscape = true[ FD ]
Line_9 $$ char curChar = str.charAt(i)-->Line_22 $$ result.append(curChar)[ FD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_9 $$ char curChar = str.charAt(i)[ CD ]
Line_10 $$ if (hasPreEscape) -->Line_14 $$ result.append(curChar)[ CD ]
Line_9 $$ char curChar = str.charAt(i)-->Line_19 $$ if (curChar == escapeChar) [ FD ]
Line_2 $$ public static String unEscapeString(String str, char escapeChar, char[] charsToEscape) -->Line_26 $$ if (hasPreEscape) [ CD ]
Line_6 $$ StringBuilder result = new StringBuilder(str.length())-->Line_22 $$ result.append(curChar)[ FD ]
