Line_44 $$ if (operationSign == JavaTokenType.EQ) -->Line_53 $$ final PsiExpression rExpression = assignmentExpression.getRExpression()[ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_9 $$ if (parent instanceof PsiAssignmentExpression) [ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_8 $$ final PsiElement parent = context.getParent()[ FD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_37 $$ return new TypeConversionDescriptor(sign + "$qualifier$", "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " 1", labeler, context, operand != null ? operand.getText() + sign.charAt(0) + " 1" : null) + ")")[ FD ]
Line_15 $$ if (context instanceof PsiReferenceExpression) -->Line_18 $$ return new TypeConversionDescriptor("$qualifier$", toPrimitive("$qualifier$.get()", from, context), expression)[ CD ]
Line_30 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) context-->Line_36 $$ final PsiExpression operand = prefixExpression.getOperand()[ FD ]
Line_29 $$ if (context instanceof PsiPrefixExpression) -->Line_31 $$ final PsiJavaToken operationSign = ((PsiPrefixExpression) context).getOperationSign()[ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_28 $$ return new TypeConversionDescriptor("$qualifier$" + sign, "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " 1", labeler, context, postfixExpression.getOperand().getText() + sign.charAt(0) + " 1") + ")")[ FD ]
Line_10 $$ final IElementType operationSign = ((PsiAssignmentExpression) parent).getOperationTokenType()-->Line_44 $$ if (operationSign == JavaTokenType.EQ) [ FD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_5 $$ if (context instanceof PsiArrayAccessExpression) [ FD ]
Line_25 $$ if (context instanceof PsiPostfixExpression) -->Line_28 $$ return new TypeConversionDescriptor("$qualifier$" + sign, "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " 1", labeler, context, postfixExpression.getOperand().getText() + sign.charAt(0) + " 1") + ")")[ CD ]
Line_45 $$ if (lExpression instanceof PsiReferenceExpression) -->Line_47 $$ if (element instanceof PsiVariable && ((PsiVariable) element).hasModifierProperty(PsiModifier.FINAL)) [ CD ]
Line_26 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) context-->Line_28 $$ return new TypeConversionDescriptor("$qualifier$" + sign, "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " 1", labeler, context, postfixExpression.getOperand().getText() + sign.charAt(0) + " 1") + ")")[ FD ]
Line_44 $$ if (operationSign == JavaTokenType.EQ) -->Line_45 $$ if (lExpression instanceof PsiReferenceExpression) [ CD ]
Line_21 $$ final String sign = binaryExpression.getOperationSign().getText()-->Line_37 $$ return new TypeConversionDescriptor(sign + "$qualifier$", "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " 1", labeler, context, operand != null ? operand.getText() + sign.charAt(0) + " 1" : null) + ")")[ FD ]
Line_10 $$ final IElementType operationSign = ((PsiAssignmentExpression) parent).getOperationTokenType()-->Line_32 $$ if (operationSign.getTokenType() == JavaTokenType.EXCL) [ FD ]
Line_38 $$ if (context instanceof PsiAssignmentExpression) -->Line_41 $$ final IElementType operationSign = signToken.getTokenType()[ CD ]
Line_25 $$ if (context instanceof PsiPostfixExpression) -->Line_26 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) context[ CD ]
Line_38 $$ if (context instanceof PsiAssignmentExpression) -->Line_40 $$ final PsiJavaToken signToken = assignmentExpression.getOperationSign()[ CD ]
Line_39 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) context-->Line_53 $$ final PsiExpression rExpression = assignmentExpression.getRExpression()[ FD ]
Line_11 $$ if (operationSign == JavaTokenType.EQ) -->Line_12 $$ return new TypeConversionDescriptor("$qualifier$ = $val$", "$qualifier$.set(" + toBoxed("$val$", from, context) + ")", (PsiAssignmentExpression) parent)[ CD ]
Line_9 $$ if (parent instanceof PsiAssignmentExpression) -->Line_10 $$ final IElementType operationSign = ((PsiAssignmentExpression) parent).getOperationTokenType()[ CD ]
Line_8 $$ final PsiElement parent = context.getParent()-->Line_24 $$ if (parent instanceof PsiExpressionStatement) [ FD ]
Line_44 $$ if (operationSign == JavaTokenType.EQ) -->Line_51 $$ return new TypeConversionDescriptor("$qualifier$ = $val$", "$qualifier$.set(" + toBoxed("$val$", from, context) + ")")[ CD ]
Line_25 $$ if (context instanceof PsiPostfixExpression) -->Line_27 $$ final String sign = postfixExpression.getOperationSign().getText()[ CD ]
Line_38 $$ if (context instanceof PsiAssignmentExpression) -->Line_39 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) context[ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_51 $$ return new TypeConversionDescriptor("$qualifier$ = $val$", "$qualifier$.set(" + toBoxed("$val$", from, context) + ")")[ FD ]
Line_43 $$ final PsiExpression lExpression = assignmentExpression.getLExpression()-->Line_45 $$ if (lExpression instanceof PsiReferenceExpression) [ FD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_8 $$ final PsiElement parent = context.getParent()[ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_19 $$ if (context instanceof PsiBinaryExpression) [ FD ]
Line_44 $$ if (operationSign == JavaTokenType.EQ) -->Line_54 $$ return new TypeConversionDescriptor("$qualifier$" + sign + "$val$", "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " $val$", labeler, context, rExpression != null ? lExpression.getText() + sign.charAt(0) + rExpression.getText() : null) + ")")[ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_4 $$ LOG.assertTrue(toTypeClass != null)[ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_15 $$ if (context instanceof PsiReferenceExpression) [ FD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_25 $$ if (context instanceof PsiPostfixExpression) [ FD ]
Line_29 $$ if (context instanceof PsiPrefixExpression) -->Line_30 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) context[ CD ]
Line_40 $$ final PsiJavaToken signToken = assignmentExpression.getOperationSign()-->Line_42 $$ final String sign = signToken.getText()[ FD ]
Line_36 $$ final PsiExpression operand = prefixExpression.getOperand()-->Line_37 $$ return new TypeConversionDescriptor(sign + "$qualifier$", "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " 1", labeler, context, operand != null ? operand.getText() + sign.charAt(0) + " 1" : null) + ")")[ FD ]
Line_15 $$ if (context instanceof PsiReferenceExpression) -->Line_17 $$ final PsiExpression expression = context.getParent() instanceof PsiMethodCallExpression && qualifierExpression != null ? qualifierExpression : (PsiExpression) context[ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_22 $$ return new TypeConversionDescriptor("$qualifier$" + sign + "$val$", toPrimitive("$qualifier$.get()", from, context) + " " + sign + " $val$")[ FD ]
Line_21 $$ final String sign = binaryExpression.getOperationSign().getText()-->Line_54 $$ return new TypeConversionDescriptor("$qualifier$" + sign + "$val$", "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " $val$", labeler, context, rExpression != null ? lExpression.getText() + sign.charAt(0) + rExpression.getText() : null) + ")")[ FD ]
Line_53 $$ final PsiExpression rExpression = assignmentExpression.getRExpression()-->Line_54 $$ return new TypeConversionDescriptor("$qualifier$" + sign + "$val$", "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " $val$", labeler, context, rExpression != null ? lExpression.getText() + sign.charAt(0) + rExpression.getText() : null) + ")")[ FD ]
Line_15 $$ if (context instanceof PsiReferenceExpression) -->Line_16 $$ final PsiExpression qualifierExpression = ((PsiReferenceExpression) context).getQualifierExpression()[ CD ]
Line_24 $$ if (parent instanceof PsiExpressionStatement) -->Line_25 $$ if (context instanceof PsiPostfixExpression) [ CD ]
Line_39 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) context-->Line_40 $$ final PsiJavaToken signToken = assignmentExpression.getOperationSign()[ FD ]
Line_40 $$ final PsiJavaToken signToken = assignmentExpression.getOperationSign()-->Line_41 $$ final IElementType operationSign = signToken.getTokenType()[ FD ]
Line_21 $$ final String sign = binaryExpression.getOperationSign().getText()-->Line_28 $$ return new TypeConversionDescriptor("$qualifier$" + sign, "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " 1", labeler, context, postfixExpression.getOperand().getText() + sign.charAt(0) + " 1") + ")")[ FD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_17 $$ final PsiExpression expression = context.getParent() instanceof PsiMethodCallExpression && qualifierExpression != null ? qualifierExpression : (PsiExpression) context[ FD ]
Line_39 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) context-->Line_43 $$ final PsiExpression lExpression = assignmentExpression.getLExpression()[ FD ]
Line_10 $$ final IElementType operationSign = ((PsiAssignmentExpression) parent).getOperationTokenType()-->Line_35 $$ final String sign = operationSign.getText()[ FD ]
Line_25 $$ if (context instanceof PsiPostfixExpression) -->Line_29 $$ if (context instanceof PsiPrefixExpression) [ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_48 $$ return wrapWithNewExpression(to, from, ((PsiAssignmentExpression) context).getRExpression())[ FD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_5 $$ if (context instanceof PsiArrayAccessExpression) [ CD ]
Line_10 $$ final IElementType operationSign = ((PsiAssignmentExpression) parent).getOperationTokenType()-->Line_11 $$ if (operationSign == JavaTokenType.EQ) [ FD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_58 $$ return null[ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_15 $$ if (context instanceof PsiReferenceExpression) [ CD ]
Line_29 $$ if (context instanceof PsiPrefixExpression) -->Line_35 $$ final String sign = operationSign.getText()[ CD ]
Line_19 $$ if (context instanceof PsiBinaryExpression) -->Line_20 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) context[ CD ]
Line_38 $$ if (context instanceof PsiAssignmentExpression) -->Line_44 $$ if (operationSign == JavaTokenType.EQ) [ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_24 $$ if (parent instanceof PsiExpressionStatement) [ CD ]
Line_32 $$ if (operationSign.getTokenType() == JavaTokenType.EXCL) -->Line_33 $$ return new TypeConversionDescriptor("!$qualifier$", "!$qualifier$.get()")[ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_3 $$ final PsiClass toTypeClass = PsiUtil.resolveClassInType(to)[ FD ]
Line_47 $$ if (element instanceof PsiVariable && ((PsiVariable) element).hasModifierProperty(PsiModifier.FINAL)) -->Line_48 $$ return wrapWithNewExpression(to, from, ((PsiAssignmentExpression) context).getRExpression())[ CD ]
Line_9 $$ if (parent instanceof PsiAssignmentExpression) -->Line_11 $$ if (operationSign == JavaTokenType.EQ) [ CD ]
Line_5 $$ if (context instanceof PsiArrayAccessExpression) -->Line_6 $$ return new TypeConversionDescriptor("$qualifier$[$val$]", "$qualifier$.get()[$val$]")[ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_54 $$ return new TypeConversionDescriptor("$qualifier$" + sign + "$val$", "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " $val$", labeler, context, rExpression != null ? lExpression.getText() + sign.charAt(0) + rExpression.getText() : null) + ")")[ FD ]
Line_29 $$ if (context instanceof PsiPrefixExpression) -->Line_37 $$ return new TypeConversionDescriptor(sign + "$qualifier$", "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " 1", labeler, context, operand != null ? operand.getText() + sign.charAt(0) + " 1" : null) + ")")[ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_3 $$ final PsiClass toTypeClass = PsiUtil.resolveClassInType(to)[ CD ]
Line_19 $$ if (context instanceof PsiBinaryExpression) -->Line_21 $$ final String sign = binaryExpression.getOperationSign().getText()[ CD ]
Line_8 $$ final PsiElement parent = context.getParent()-->Line_9 $$ if (parent instanceof PsiAssignmentExpression) [ FD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_12 $$ return new TypeConversionDescriptor("$qualifier$ = $val$", "$qualifier$.set(" + toBoxed("$val$", from, context) + ")", (PsiAssignmentExpression) parent)[ FD ]
Line_29 $$ if (context instanceof PsiPrefixExpression) -->Line_32 $$ if (operationSign.getTokenType() == JavaTokenType.EXCL) [ CD ]
Line_45 $$ if (lExpression instanceof PsiReferenceExpression) -->Line_46 $$ final PsiElement element = ((PsiReferenceExpression) lExpression).resolve()[ CD ]
Line_19 $$ if (context instanceof PsiBinaryExpression) -->Line_22 $$ return new TypeConversionDescriptor("$qualifier$" + sign + "$val$", toPrimitive("$qualifier$.get()", from, context) + " " + sign + " $val$")[ CD ]
Line_15 $$ if (context instanceof PsiReferenceExpression) -->Line_19 $$ if (context instanceof PsiBinaryExpression) [ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_38 $$ if (context instanceof PsiAssignmentExpression) [ FD ]
Line_38 $$ if (context instanceof PsiAssignmentExpression) -->Line_42 $$ final String sign = signToken.getText()[ CD ]
Line_29 $$ if (context instanceof PsiPrefixExpression) -->Line_38 $$ if (context instanceof PsiAssignmentExpression) [ CD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_18 $$ return new TypeConversionDescriptor("$qualifier$", toPrimitive("$qualifier$.get()", from, context), expression)[ FD ]
Line_2 $$ public static TypeConversionDescriptor findDirectConversion(PsiElement context, PsiType to, PsiType from, TypeMigrationLabeler labeler) -->Line_29 $$ if (context instanceof PsiPrefixExpression) [ FD ]
Line_20 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) context-->Line_21 $$ final String sign = binaryExpression.getOperationSign().getText()[ FD ]
Line_43 $$ final PsiExpression lExpression = assignmentExpression.getLExpression()-->Line_54 $$ return new TypeConversionDescriptor("$qualifier$" + sign + "$val$", "$qualifier$.set(" + getBoxedWrapper(from, to, toPrimitive("$qualifier$.get()", from, context) + " " + sign.charAt(0) + " $val$", labeler, context, rExpression != null ? lExpression.getText() + sign.charAt(0) + rExpression.getText() : null) + ")")[ FD ]
Line_26 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) context-->Line_27 $$ final String sign = postfixExpression.getOperationSign().getText()[ FD ]
Line_29 $$ if (context instanceof PsiPrefixExpression) -->Line_36 $$ final PsiExpression operand = prefixExpression.getOperand()[ CD ]
Line_38 $$ if (context instanceof PsiAssignmentExpression) -->Line_43 $$ final PsiExpression lExpression = assignmentExpression.getLExpression()[ CD ]
