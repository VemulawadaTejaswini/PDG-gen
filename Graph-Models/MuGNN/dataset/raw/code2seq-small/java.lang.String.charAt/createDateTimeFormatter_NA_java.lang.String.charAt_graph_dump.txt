Line_2 $$ public static DateTimeFormatter createDateTimeFormatter(Slice format) -->Line_4 $$ String formatString = format.toStringUtf8()[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_24 $$ builder.appendDayOfMonth(2)[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_49 $$ builder.appendDayOfYear(3)[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_106 $$ builder.appendYearOfCentury(2, 2)[ FD ]
Line_2 $$ public static DateTimeFormatter createDateTimeFormatter(Slice format) -->Line_4 $$ String formatString = format.toStringUtf8()[ CD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_53 $$ builder.appendHourOfDay(1)[ FD ]
Line_6 $$ for (int i = 0; i < format.length(); i++) -->Line_8 $$ if (escaped) [ CD ]
Line_7 $$ char character = formatString.charAt(i)-->Line_114 $$ throw new PrestoException(INVALID_FUNCTION_ARGUMENT, String.format("%%%s not supported in date format string", character))[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_45 $$ builder.appendMinuteOfHour(2)[ FD ]
Line_7 $$ char character = formatString.charAt(i)-->Line_127 $$ builder.appendLiteral(character)[ FD ]
Line_6 $$ for (int i = 0; i < format.length(); i++) -->Line_7 $$ char character = formatString.charAt(i)[ CD ]
Line_2 $$ public static DateTimeFormatter createDateTimeFormatter(Slice format) -->Line_5 $$ boolean escaped = false[ CD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_12 $$ builder.appendDayOfWeekShortText()[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_36 $$ builder.appendHourOfDay(2)[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_65 $$ builder.appendMonthOfYear(2)[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_78 $$ builder.appendSecondOfMinute(2)[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_41 $$ builder.appendClockhourOfHalfday(2)[ FD ]
Line_2 $$ public static DateTimeFormatter createDateTimeFormatter(Slice format) -->Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()[ CD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_90 $$ builder.appendWeekyear(4, 4)[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_82 $$ builder.appendHourOfDay(2).appendLiteral(':').appendMinuteOfHour(2).appendLiteral(':').appendSecondOfMinute(2)[ FD ]
Line_2 $$ public static DateTimeFormatter createDateTimeFormatter(Slice format) -->Line_6 $$ for (int i = 0; i < format.length(); i++) [ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_73 $$ builder.appendClockhourOfHalfday(2).appendLiteral(':').appendMinuteOfHour(2).appendLiteral(':').appendSecondOfMinute(2).appendLiteral(' ').appendHalfdayOfDayText()[ FD ]
Line_5 $$ boolean escaped = false-->Line_125 $$ escaped = true[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_86 $$ builder.appendWeekOfWeekyear(2)[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_120 $$ builder.appendLiteral(character)[ FD ]
Line_8 $$ if (escaped) -->Line_123 $$ escaped = false[ CD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_127 $$ builder.appendLiteral(character)[ FD ]
Line_2 $$ public static DateTimeFormatter createDateTimeFormatter(Slice format) -->Line_6 $$ for (int i = 0; i < format.length(); i++) [ CD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_102 $$ builder.appendYear(4, 4)[ FD ]
Line_5 $$ boolean escaped = false-->Line_123 $$ escaped = false[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_94 $$ builder.appendDayOfWeekText()[ FD ]
Line_124 $$ if (character == '%') -->Line_125 $$ escaped = true[ CD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_98 $$ builder.appendDayOfWeek(1)[ FD ]
Line_123 $$ escaped = false-->Line_125 $$ escaped = true[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_57 $$ builder.appendClockhourOfHalfday(1)[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_131 $$ return builder.toFormatter()[ FD ]
Line_7 $$ char character = formatString.charAt(i)-->Line_120 $$ builder.appendLiteral(character)[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_69 $$ builder.appendHalfdayOfDayText()[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_32 $$ builder.appendFractionOfSecond(6, 6)[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_61 $$ builder.appendMonthOfYearText()[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_16 $$ builder.appendMonthOfYearShortText()[ FD ]
Line_4 $$ String formatString = format.toStringUtf8()-->Line_7 $$ char character = formatString.charAt(i)[ FD ]
Line_8 $$ if (escaped) -->Line_124 $$ if (character == '%') [ CD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_20 $$ builder.appendMonthOfYear(1)[ FD ]
Line_124 $$ if (character == '%') -->Line_127 $$ builder.appendLiteral(character)[ CD ]
Line_7 $$ char character = formatString.charAt(i)-->Line_124 $$ if (character == '%') [ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_28 $$ builder.appendDayOfMonth(1)[ FD ]
Line_3 $$ DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()-->Line_117 $$ builder.appendLiteral('%')[ FD ]
Line_6 $$ for (int i = 0; i < format.length(); i++) -->Line_7 $$ char character = formatString.charAt(i)[ FD ]
