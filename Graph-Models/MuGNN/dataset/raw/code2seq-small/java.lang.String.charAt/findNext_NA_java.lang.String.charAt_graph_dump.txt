Line_4 $$ for (int i = start; i < str.length(); i++) -->Line_6 $$ if (numPreEscapes == 0 && curChar == separator) [ CD ]
Line_6 $$ if (numPreEscapes == 0 && curChar == separator) -->Line_10 $$ numPreEscapes = (curChar == escapeChar) ? (++numPreEscapes) % 2 : 0[ CD ]
Line_2 $$ public static int findNext(String str, char separator, char escapeChar, int start, StringBuilder split) -->Line_4 $$ for (int i = start; i < str.length(); i++) [ CD ]
Line_2 $$ public static int findNext(String str, char separator, char escapeChar, int start, StringBuilder split) -->Line_9 $$ split.append(curChar)[ FD ]
Line_2 $$ public static int findNext(String str, char separator, char escapeChar, int start, StringBuilder split) -->Line_4 $$ for (int i = start; i < str.length(); i++) [ FD ]
Line_6 $$ if (numPreEscapes == 0 && curChar == separator) -->Line_7 $$ return i[ CD ]
Line_5 $$ char curChar = str.charAt(i)-->Line_9 $$ split.append(curChar)[ FD ]
Line_4 $$ for (int i = start; i < str.length(); i++) -->Line_5 $$ char curChar = str.charAt(i)[ FD ]
Line_3 $$ int numPreEscapes = 0-->Line_10 $$ numPreEscapes = (curChar == escapeChar) ? (++numPreEscapes) % 2 : 0[ FD ]
Line_2 $$ public static int findNext(String str, char separator, char escapeChar, int start, StringBuilder split) -->Line_3 $$ int numPreEscapes = 0[ CD ]
Line_2 $$ public static int findNext(String str, char separator, char escapeChar, int start, StringBuilder split) -->Line_13 $$ return -1[ CD ]
Line_4 $$ for (int i = start; i < str.length(); i++) -->Line_5 $$ char curChar = str.charAt(i)[ CD ]
Line_6 $$ if (numPreEscapes == 0 && curChar == separator) -->Line_9 $$ split.append(curChar)[ CD ]
Line_2 $$ public static int findNext(String str, char separator, char escapeChar, int start, StringBuilder split) -->Line_5 $$ char curChar = str.charAt(i)[ FD ]
