Line_13 $$ for (String category : allCategories) -->Line_22 $$ sb.append(category.substring(1))[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_27 $$ sb.append(' ').append(testsCount).append(' ')[ FD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_30 $$ if (failuresCount > 0) [ CD ]
Line_9 $$ if (allCategories != null) -->Line_10 $$ if (hasNonDefaultCategories(allCategories)) [ CD ]
Line_17 $$ if (!first) -->Line_18 $$ sb.append(", ")[ CD ]
Line_30 $$ if (failuresCount > 0) -->Line_33 $$ sb.append(' ').append(failuresCount)[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_33 $$ sb.append(' ').append(failuresCount)[ FD ]
Line_30 $$ if (failuresCount > 0) -->Line_32 $$ sb.append(SMTestsRunnerBundle.message("sm.test.runner.ui.tests.tree.presentation.labels.failed"))[ CD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_10 $$ if (hasNonDefaultCategories(allCategories)) [ FD ]
Line_35 $$ if (endTime != 0) -->Line_37 $$ sb.append(DOUBLE_SPACE)[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_21 $$ sb.append(first ? firstChar : Character.toLowerCase(firstChar))[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append(DOUBLE_SPACE)[ FD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_27 $$ sb.append(' ').append(testsCount).append(' ')[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.append(SMTestsRunnerBundle.message("sm.test.runner.ui.tests.tree.presentation.labels.of"))[ FD ]
Line_12 $$ boolean first = true-->Line_23 $$ first = false[ FD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_3 $$ final StringBuilder sb = new StringBuilder()[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_41 $$ return sb.toString()[ FD ]
Line_35 $$ if (endTime != 0) -->Line_36 $$ final long time = endTime - startTime[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append(' ')[ FD ]
Line_13 $$ for (String category : allCategories) -->Line_20 $$ final char firstChar = category.charAt(0)[ FD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_33 $$ sb.append(' ').append(failuresCount)[ FD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_41 $$ return sb.toString()[ CD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_35 $$ if (endTime != 0) [ FD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_29 $$ sb.append(' ').append(testsTotal != 0 ? testsTotal : !isFinished ? UNKNOWN_TESTS_COUNT : 0)[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_7 $$ sb.append(SMTestsRunnerBundle.message("sm.test.runner.ui.tests.tree.presentation.labels.done"))[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_22 $$ sb.append(category.substring(1))[ FD ]
Line_4 $$ if (endTime == 0) -->Line_5 $$ sb.append(SMTestsRunnerBundle.message("sm.test.runner.ui.tests.tree.presentation.labels.running"))[ CD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_4 $$ if (endTime == 0) [ CD ]
Line_10 $$ if (hasNonDefaultCategories(allCategories)) -->Line_11 $$ sb.append(' ')[ CD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_30 $$ if (failuresCount > 0) [ FD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_35 $$ if (endTime != 0) [ CD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_29 $$ sb.append(' ').append(testsTotal != 0 ? testsTotal : !isFinished ? UNKNOWN_TESTS_COUNT : 0)[ FD ]
Line_13 $$ for (String category : allCategories) -->Line_14 $$ if (StringUtil.isEmpty(category)) [ FD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_27 $$ sb.append(' ').append(testsCount).append(' ')[ FD ]
Line_30 $$ if (failuresCount > 0) -->Line_31 $$ sb.append(DOUBLE_SPACE)[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_29 $$ sb.append(' ').append(testsTotal != 0 ? testsTotal : !isFinished ? UNKNOWN_TESTS_COUNT : 0)[ FD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_4 $$ if (endTime == 0) [ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append(", ")[ FD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_40 $$ sb.append(DOUBLE_SPACE)[ CD ]
Line_4 $$ if (endTime == 0) -->Line_7 $$ sb.append(SMTestsRunnerBundle.message("sm.test.runner.ui.tests.tree.presentation.labels.done"))[ CD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_9 $$ if (allCategories != null) [ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_37 $$ sb.append(DOUBLE_SPACE)[ FD ]
Line_12 $$ boolean first = true-->Line_17 $$ if (!first) [ FD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_28 $$ sb.append(SMTestsRunnerBundle.message("sm.test.runner.ui.tests.tree.presentation.labels.of"))[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_5 $$ sb.append(SMTestsRunnerBundle.message("sm.test.runner.ui.tests.tree.presentation.labels.running"))[ FD ]
Line_36 $$ final long time = endTime - startTime-->Line_38 $$ sb.append('(').append(StringUtil.formatDuration(time)).append(')')[ FD ]
Line_2 $$ public static String getProgressStatus_Text(final long startTime, final long endTime, final int testsTotal, final int testsCount, final int failuresCount, @Nullable final Set<String> allCategories, final boolean isFinished) -->Line_9 $$ if (allCategories != null) [ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_32 $$ sb.append(SMTestsRunnerBundle.message("sm.test.runner.ui.tests.tree.presentation.labels.failed"))[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_38 $$ sb.append('(').append(StringUtil.formatDuration(time)).append(')')[ FD ]
Line_35 $$ if (endTime != 0) -->Line_38 $$ sb.append('(').append(StringUtil.formatDuration(time)).append(')')[ CD ]
Line_10 $$ if (hasNonDefaultCategories(allCategories)) -->Line_12 $$ boolean first = true[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_40 $$ sb.append(DOUBLE_SPACE)[ FD ]
Line_20 $$ final char firstChar = category.charAt(0)-->Line_21 $$ sb.append(first ? firstChar : Character.toLowerCase(firstChar))[ FD ]
