Line_9 $$ boolean isDigit = false-->Line_39 $$ isDigit = true[ FD ]
Line_2 $$ public final void parseVersion(String version) -->Line_3 $$ this.value = version[ FD ]
Line_39 $$ isDigit = true-->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ FD ]
Line_12 $$ char c = version.charAt(i)-->Line_13 $$ if (c == '.') [ FD ]
Line_43 $$ startIndex = i-->Line_42 $$ list.add(parseItem(true, version.substring(startIndex, i)))[ FD ]
Line_26 $$ startIndex = i + 1-->Line_48 $$ if (version.length() > startIndex) [ FD ]
Line_2 $$ public final void parseVersion(String version) -->Line_51 $$ while (!stack.isEmpty()) [ CD ]
Line_5 $$ version = version.toLowerCase(Locale.ENGLISH)-->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ FD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_12 $$ char c = version.charAt(i)[ CD ]
Line_2 $$ public final void parseVersion(String version) -->Line_55 $$ canonical = items.toString()[ CD ]
Line_10 $$ int startIndex = 0-->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_30 $$ list.add(list = new ListItem())-->Line_53 $$ list.normalize()[ FD ]
Line_29 $$ if ((i + 1 < version.length()) && Character.isDigit(version.charAt(i + 1))) -->Line_30 $$ list.add(list = new ListItem())[ CD ]
Line_43 $$ startIndex = i-->Line_36 $$ list.add(new StringItem(version.substring(startIndex, i), true))[ FD ]
Line_12 $$ char c = version.charAt(i)-->Line_20 $$ if (c == '-') [ FD ]
Line_43 $$ startIndex = i-->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ FD ]
Line_9 $$ boolean isDigit = false-->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ FD ]
Line_29 $$ if ((i + 1 < version.length()) && Character.isDigit(version.charAt(i + 1))) -->Line_31 $$ stack.push(list)[ CD ]
Line_30 $$ list.add(list = new ListItem())-->Line_28 $$ list.normalize()[ FD ]
Line_51 $$ while (!stack.isEmpty()) -->Line_53 $$ list.normalize()[ CD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_13 $$ if (c == '.') [ CD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_19 $$ startIndex = i + 1[ FD ]
Line_14 $$ if (i == startIndex) -->Line_15 $$ list.add(IntegerItem.ZERO)[ CD ]
Line_19 $$ startIndex = i + 1-->Line_43 $$ startIndex = i[ FD ]
Line_10 $$ int startIndex = 0-->Line_36 $$ list.add(new StringItem(version.substring(startIndex, i), true))[ FD ]
Line_34 $$ if (Character.isDigit(c)) -->Line_41 $$ if (isDigit && i > startIndex) [ CD ]
Line_2 $$ public final void parseVersion(String version) -->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ FD ]
Line_26 $$ startIndex = i + 1-->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_19 $$ startIndex = i + 1-->Line_48 $$ if (version.length() > startIndex) [ FD ]
Line_45 $$ isDigit = false-->Line_41 $$ if (isDigit && i > startIndex) [ FD ]
Line_10 $$ int startIndex = 0-->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ FD ]
Line_26 $$ startIndex = i + 1-->Line_37 $$ startIndex = i[ FD ]
Line_10 $$ int startIndex = 0-->Line_21 $$ if (i == startIndex) [ FD ]
Line_52 $$ list = (ListItem) stack.pop()-->Line_53 $$ list.normalize()[ FD ]
Line_6 $$ ListItem list = items-->Line_52 $$ list = (ListItem) stack.pop()[ FD ]
Line_13 $$ if (c == '.') -->Line_19 $$ startIndex = i + 1[ CD ]
Line_2 $$ public final void parseVersion(String version) -->Line_7 $$ Stack<Item> stack = new Stack<Item>()[ CD ]
Line_37 $$ startIndex = i-->Line_14 $$ if (i == startIndex) [ FD ]
Line_14 $$ if (i == startIndex) -->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ CD ]
Line_39 $$ isDigit = true-->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_6 $$ ListItem list = items-->Line_28 $$ list.normalize()[ FD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_26 $$ startIndex = i + 1[ FD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_36 $$ list.add(new StringItem(version.substring(startIndex, i), true))[ FD ]
Line_5 $$ version = version.toLowerCase(Locale.ENGLISH)-->Line_42 $$ list.add(parseItem(true, version.substring(startIndex, i)))[ FD ]
Line_6 $$ ListItem list = items-->Line_8 $$ stack.push(list)[ FD ]
Line_35 $$ if (!isDigit && i > startIndex) -->Line_37 $$ startIndex = i[ CD ]
Line_2 $$ public final void parseVersion(String version) -->Line_11 $$ for (int i = 0; i < version.length(); i++) [ CD ]
Line_2 $$ public final void parseVersion(String version) -->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_10 $$ int startIndex = 0-->Line_42 $$ list.add(parseItem(true, version.substring(startIndex, i)))[ FD ]
Line_39 $$ isDigit = true-->Line_45 $$ isDigit = false[ FD ]
Line_19 $$ startIndex = i + 1-->Line_42 $$ list.add(parseItem(true, version.substring(startIndex, i)))[ FD ]
Line_39 $$ isDigit = true-->Line_35 $$ if (!isDigit && i > startIndex) [ FD ]
Line_9 $$ boolean isDigit = false-->Line_35 $$ if (!isDigit && i > startIndex) [ FD ]
Line_2 $$ public final void parseVersion(String version) -->Line_11 $$ for (int i = 0; i < version.length(); i++) [ FD ]
Line_7 $$ Stack<Item> stack = new Stack<Item>()-->Line_52 $$ list = (ListItem) stack.pop()[ FD ]
Line_6 $$ ListItem list = items-->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_9 $$ boolean isDigit = false-->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_6 $$ ListItem list = items-->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_5 $$ version = version.toLowerCase(Locale.ENGLISH)-->Line_48 $$ if (version.length() > startIndex) [ FD ]
Line_19 $$ startIndex = i + 1-->Line_14 $$ if (i == startIndex) [ FD ]
Line_5 $$ version = version.toLowerCase(Locale.ENGLISH)-->Line_36 $$ list.add(new StringItem(version.substring(startIndex, i), true))[ FD ]
Line_26 $$ startIndex = i + 1-->Line_36 $$ list.add(new StringItem(version.substring(startIndex, i), true))[ FD ]
Line_27 $$ if (isDigit) -->Line_28 $$ list.normalize()[ CD ]
Line_43 $$ startIndex = i-->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_19 $$ startIndex = i + 1-->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ FD ]
Line_30 $$ list.add(list = new ListItem())-->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_6 $$ ListItem list = items-->Line_31 $$ stack.push(list)[ FD ]
Line_45 $$ isDigit = false-->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ FD ]
Line_37 $$ startIndex = i-->Line_21 $$ if (i == startIndex) [ FD ]
Line_2 $$ public final void parseVersion(String version) -->Line_48 $$ if (version.length() > startIndex) [ CD ]
Line_30 $$ list.add(list = new ListItem())-->Line_42 $$ list.add(parseItem(true, version.substring(startIndex, i)))[ FD ]
Line_34 $$ if (Character.isDigit(c)) -->Line_35 $$ if (!isDigit && i > startIndex) [ CD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_12 $$ char c = version.charAt(i)-->Line_34 $$ if (Character.isDigit(c)) [ FD ]
Line_2 $$ public final void parseVersion(String version) -->Line_9 $$ boolean isDigit = false[ CD ]
Line_2 $$ public final void parseVersion(String version) -->Line_42 $$ list.add(parseItem(true, version.substring(startIndex, i)))[ FD ]
Line_39 $$ isDigit = true-->Line_41 $$ if (isDigit && i > startIndex) [ FD ]
Line_39 $$ isDigit = true-->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_48 $$ if (version.length() > startIndex) -->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ CD ]
Line_19 $$ startIndex = i + 1-->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_10 $$ int startIndex = 0-->Line_37 $$ startIndex = i[ FD ]
Line_41 $$ if (isDigit && i > startIndex) -->Line_43 $$ startIndex = i[ CD ]
Line_45 $$ isDigit = false-->Line_35 $$ if (!isDigit && i > startIndex) [ FD ]
Line_5 $$ version = version.toLowerCase(Locale.ENGLISH)-->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_5 $$ version = version.toLowerCase(Locale.ENGLISH)-->Line_29 $$ if ((i + 1 < version.length()) && Character.isDigit(version.charAt(i + 1))) [ FD ]
Line_5 $$ version = version.toLowerCase(Locale.ENGLISH)-->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_30 $$ list.add(list = new ListItem())-->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ FD ]
Line_9 $$ boolean isDigit = false-->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_6 $$ ListItem list = items-->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ FD ]
Line_6 $$ ListItem list = items-->Line_53 $$ list.normalize()[ FD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_12 $$ char c = version.charAt(i)[ FD ]
Line_10 $$ int startIndex = 0-->Line_48 $$ if (version.length() > startIndex) [ FD ]
Line_20 $$ if (c == '-') -->Line_21 $$ if (i == startIndex) [ CD ]
Line_7 $$ Stack<Item> stack = new Stack<Item>()-->Line_8 $$ stack.push(list)[ FD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_34 $$ if (Character.isDigit(c)) -->Line_39 $$ isDigit = true[ CD ]
Line_30 $$ list.add(list = new ListItem())-->Line_31 $$ stack.push(list)[ FD ]
Line_37 $$ startIndex = i-->Line_43 $$ startIndex = i[ FD ]
Line_2 $$ public final void parseVersion(String version) -->Line_8 $$ stack.push(list)[ CD ]
Line_2 $$ public final void parseVersion(String version) -->Line_5 $$ version = version.toLowerCase(Locale.ENGLISH)[ CD ]
Line_37 $$ startIndex = i-->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_9 $$ boolean isDigit = false-->Line_45 $$ isDigit = false[ FD ]
Line_7 $$ Stack<Item> stack = new Stack<Item>()-->Line_31 $$ stack.push(list)[ FD ]
Line_26 $$ startIndex = i + 1-->Line_21 $$ if (i == startIndex) [ FD ]
Line_2 $$ public final void parseVersion(String version) -->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_30 $$ list.add(list = new ListItem())-->Line_15 $$ list.add(IntegerItem.ZERO)[ FD ]
Line_6 $$ ListItem list = items-->Line_15 $$ list.add(IntegerItem.ZERO)[ FD ]
Line_45 $$ isDigit = false-->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_43 $$ startIndex = i[ FD ]
Line_26 $$ startIndex = i + 1-->Line_42 $$ list.add(parseItem(true, version.substring(startIndex, i)))[ FD ]
Line_43 $$ startIndex = i-->Line_21 $$ if (i == startIndex) [ FD ]
Line_37 $$ startIndex = i-->Line_42 $$ list.add(parseItem(true, version.substring(startIndex, i)))[ FD ]
Line_6 $$ ListItem list = items-->Line_22 $$ list.add(IntegerItem.ZERO)[ FD ]
Line_26 $$ startIndex = i + 1-->Line_43 $$ startIndex = i[ FD ]
Line_37 $$ startIndex = i-->Line_36 $$ list.add(new StringItem(version.substring(startIndex, i), true))[ FD ]
Line_21 $$ if (i == startIndex) -->Line_22 $$ list.add(IntegerItem.ZERO)[ CD ]
Line_19 $$ startIndex = i + 1-->Line_36 $$ list.add(new StringItem(version.substring(startIndex, i), true))[ FD ]
Line_5 $$ version = version.toLowerCase(Locale.ENGLISH)-->Line_11 $$ for (int i = 0; i < version.length(); i++) [ FD ]
Line_19 $$ startIndex = i + 1-->Line_21 $$ if (i == startIndex) [ FD ]
Line_2 $$ public final void parseVersion(String version) -->Line_10 $$ int startIndex = 0[ CD ]
Line_2 $$ public final void parseVersion(String version) -->Line_29 $$ if ((i + 1 < version.length()) && Character.isDigit(version.charAt(i + 1))) [ FD ]
Line_5 $$ version = version.toLowerCase(Locale.ENGLISH)-->Line_12 $$ char c = version.charAt(i)[ FD ]
Line_30 $$ list.add(list = new ListItem())-->Line_52 $$ list = (ListItem) stack.pop()[ FD ]
Line_26 $$ startIndex = i + 1-->Line_14 $$ if (i == startIndex) [ FD ]
Line_20 $$ if (c == '-') -->Line_34 $$ if (Character.isDigit(c)) [ CD ]
Line_37 $$ startIndex = i-->Line_48 $$ if (version.length() > startIndex) [ FD ]
Line_30 $$ list.add(list = new ListItem())-->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_19 $$ startIndex = i + 1-->Line_37 $$ startIndex = i[ FD ]
Line_43 $$ startIndex = i-->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_10 $$ int startIndex = 0-->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_2 $$ public final void parseVersion(String version) -->Line_3 $$ this.value = version[ CD ]
Line_45 $$ isDigit = false-->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_26 $$ startIndex = i + 1-->Line_17 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_30 $$ list.add(list = new ListItem())-->Line_36 $$ list.add(new StringItem(version.substring(startIndex, i), true))[ FD ]
Line_2 $$ public final void parseVersion(String version) -->Line_6 $$ ListItem list = items[ CD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_42 $$ list.add(parseItem(true, version.substring(startIndex, i)))[ FD ]
Line_6 $$ ListItem list = items-->Line_30 $$ list.add(list = new ListItem())[ FD ]
Line_19 $$ startIndex = i + 1-->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_43 $$ startIndex = i-->Line_48 $$ if (version.length() > startIndex) [ FD ]
Line_2 $$ public final void parseVersion(String version) -->Line_5 $$ version = version.toLowerCase(Locale.ENGLISH)[ FD ]
Line_51 $$ while (!stack.isEmpty()) -->Line_52 $$ list = (ListItem) stack.pop()[ CD ]
Line_41 $$ if (isDigit && i > startIndex) -->Line_42 $$ list.add(parseItem(true, version.substring(startIndex, i)))[ CD ]
Line_35 $$ if (!isDigit && i > startIndex) -->Line_36 $$ list.add(new StringItem(version.substring(startIndex, i), true))[ CD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_14 $$ if (i == startIndex) [ FD ]
Line_37 $$ startIndex = i-->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ FD ]
Line_34 $$ if (Character.isDigit(c)) -->Line_45 $$ isDigit = false[ CD ]
Line_6 $$ ListItem list = items-->Line_36 $$ list.add(new StringItem(version.substring(startIndex, i), true))[ FD ]
Line_21 $$ if (i == startIndex) -->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ CD ]
Line_10 $$ int startIndex = 0-->Line_14 $$ if (i == startIndex) [ FD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_21 $$ if (i == startIndex) [ FD ]
Line_30 $$ list.add(list = new ListItem())-->Line_22 $$ list.add(IntegerItem.ZERO)[ FD ]
Line_27 $$ if (isDigit) -->Line_29 $$ if ((i + 1 < version.length()) && Character.isDigit(version.charAt(i + 1))) [ CD ]
Line_9 $$ boolean isDigit = false-->Line_41 $$ if (isDigit && i > startIndex) [ FD ]
Line_2 $$ public final void parseVersion(String version) -->Line_48 $$ if (version.length() > startIndex) [ FD ]
Line_11 $$ for (int i = 0; i < version.length(); i++) -->Line_37 $$ startIndex = i[ FD ]
Line_6 $$ ListItem list = items-->Line_42 $$ list.add(parseItem(true, version.substring(startIndex, i)))[ FD ]
Line_7 $$ Stack<Item> stack = new Stack<Item>()-->Line_51 $$ while (!stack.isEmpty()) [ FD ]
Line_43 $$ startIndex = i-->Line_14 $$ if (i == startIndex) [ FD ]
Line_10 $$ int startIndex = 0-->Line_19 $$ startIndex = i + 1[ FD ]
Line_13 $$ if (c == '.') -->Line_14 $$ if (i == startIndex) [ CD ]
Line_2 $$ public final void parseVersion(String version) -->Line_36 $$ list.add(new StringItem(version.substring(startIndex, i), true))[ FD ]
Line_26 $$ startIndex = i + 1-->Line_49 $$ list.add(parseItem(isDigit, version.substring(startIndex)))[ FD ]
Line_13 $$ if (c == '.') -->Line_20 $$ if (c == '-') [ CD ]
Line_10 $$ int startIndex = 0-->Line_26 $$ startIndex = i + 1[ FD ]
Line_10 $$ int startIndex = 0-->Line_43 $$ startIndex = i[ FD ]
Line_37 $$ startIndex = i-->Line_24 $$ list.add(parseItem(isDigit, version.substring(startIndex, i)))[ FD ]
Line_20 $$ if (c == '-') -->Line_27 $$ if (isDigit) [ CD ]
Line_2 $$ public final void parseVersion(String version) -->Line_12 $$ char c = version.charAt(i)[ FD ]
Line_19 $$ startIndex = i + 1-->Line_26 $$ startIndex = i + 1[ FD ]
Line_20 $$ if (c == '-') -->Line_26 $$ startIndex = i + 1[ CD ]
