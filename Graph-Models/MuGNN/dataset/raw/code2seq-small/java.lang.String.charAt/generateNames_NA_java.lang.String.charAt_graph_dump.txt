Line_12 $$ final Collection<String> possibleNames = new LinkedHashSet<String>()-->Line_17 $$ possibleNames.add(candidate)[ FD ]
Line_14 $$ if (Character.isLetter(name.charAt(i)) && (i == 0 || name.charAt(i - 1) == '_' || (Character.isLowerCase(name.charAt(i - 1)) && Character.isUpperCase(name.charAt(i))))) -->Line_16 $$ if (candidate.length() < 25) [ CD ]
Line_14 $$ if (Character.isLetter(name.charAt(i)) && (i == 0 || name.charAt(i - 1) == '_' || (Character.isLowerCase(name.charAt(i - 1)) && Character.isUpperCase(name.charAt(i))))) -->Line_15 $$ final String candidate = StringUtil.decapitalize(toUnderscoreCase(name.substring(i)))[ CD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_7 $$ name = StringUtil.trimStart(name, "is")[ FD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_11 $$ final int length = name.length()[ CD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_15 $$ final String candidate = StringUtil.decapitalize(toUnderscoreCase(name.substring(i)))[ FD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_3 $$ name = StringUtil.decapitalize(deleteNonLetterFromString(StringUtil.unquoteString(name.replace('.', '_'))))[ FD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_8 $$ while (name.startsWith("_")) [ CD ]
Line_15 $$ final String candidate = StringUtil.decapitalize(toUnderscoreCase(name.substring(i)))-->Line_17 $$ possibleNames.add(candidate)[ FD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_5 $$ name = name.substring(3)[ FD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_9 $$ name = name.substring(1)[ FD ]
Line_13 $$ for (int i = 0; i < length; i++) -->Line_14 $$ if (Character.isLetter(name.charAt(i)) && (i == 0 || name.charAt(i - 1) == '_' || (Character.isLowerCase(name.charAt(i - 1)) && Character.isUpperCase(name.charAt(i))))) [ CD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_23 $$ return reversed[ CD ]
Line_4 $$ if (name.startsWith("get")) -->Line_5 $$ name = name.substring(3)[ CD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_12 $$ final Collection<String> possibleNames = new LinkedHashSet<String>()[ CD ]
Line_15 $$ final String candidate = StringUtil.decapitalize(toUnderscoreCase(name.substring(i)))-->Line_16 $$ if (candidate.length() < 25) [ FD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_4 $$ if (name.startsWith("get")) [ FD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_22 $$ Collections.reverse(reversed)[ CD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_11 $$ final int length = name.length()[ FD ]
Line_21 $$ ArrayList<String> reversed = new ArrayList<String>(possibleNames)-->Line_22 $$ Collections.reverse(reversed)[ FD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_8 $$ while (name.startsWith("_")) [ FD ]
Line_13 $$ for (int i = 0; i < length; i++) -->Line_14 $$ if (Character.isLetter(name.charAt(i)) && (i == 0 || name.charAt(i - 1) == '_' || (Character.isLowerCase(name.charAt(i - 1)) && Character.isUpperCase(name.charAt(i))))) [ FD ]
Line_13 $$ for (int i = 0; i < length; i++) -->Line_15 $$ final String candidate = StringUtil.decapitalize(toUnderscoreCase(name.substring(i)))[ FD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_13 $$ for (int i = 0; i < length; i++) [ CD ]
Line_8 $$ while (name.startsWith("_")) -->Line_9 $$ name = name.substring(1)[ CD ]
Line_11 $$ final int length = name.length()-->Line_13 $$ for (int i = 0; i < length; i++) [ FD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_3 $$ name = StringUtil.decapitalize(deleteNonLetterFromString(StringUtil.unquoteString(name.replace('.', '_'))))[ CD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_21 $$ ArrayList<String> reversed = new ArrayList<String>(possibleNames)[ CD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_14 $$ if (Character.isLetter(name.charAt(i)) && (i == 0 || name.charAt(i - 1) == '_' || (Character.isLowerCase(name.charAt(i - 1)) && Character.isUpperCase(name.charAt(i))))) [ FD ]
Line_2 $$ public static Collection<String> generateNames(@NotNull String name) -->Line_4 $$ if (name.startsWith("get")) [ CD ]
Line_16 $$ if (candidate.length() < 25) -->Line_17 $$ possibleNames.add(candidate)[ CD ]
Line_4 $$ if (name.startsWith("get")) -->Line_7 $$ name = StringUtil.trimStart(name, "is")[ CD ]
