Line_2 $$ public void invoke(@NotNull final Project project, final Editor editor, final PsiFile file) throws IncorrectOperationException -->Line_4 $$ if (element != null && PsiUtil.isJavaToken(element, JavaTokenType.CHARACTER_LITERAL)) [ CD ]
Line_10 $$ final PsiElement literal = expression.getFirstChild()-->Line_11 $$ if (literal != null && PsiUtil.isJavaToken(literal, JavaTokenType.STRING_LITERAL)) [ FD ]
Line_2 $$ public void invoke(@NotNull final Project project, final Editor editor, final PsiFile file) throws IncorrectOperationException -->Line_3 $$ final PsiElement element = file.findElementAt(editor.getCaretModel().getOffset())[ FD ]
Line_3 $$ final PsiElement element = file.findElementAt(editor.getCaretModel().getOffset())-->Line_5 $$ final String text = StringUtil.unescapeStringCharacters(element.getText())[ FD ]
Line_4 $$ if (element != null && PsiUtil.isJavaToken(element, JavaTokenType.CHARACTER_LITERAL)) -->Line_6 $$ final int length = text.length()[ CD ]
Line_3 $$ final PsiElement element = file.findElementAt(editor.getCaretModel().getOffset())-->Line_12 $$ element.replace(literal)[ FD ]
Line_2 $$ public void invoke(@NotNull final Project project, final Editor editor, final PsiFile file) throws IncorrectOperationException -->Line_9 $$ final PsiExpression expression = JavaPsiFacade.getElementFactory(project).createExpressionFromText('"' + value + '"', null)[ FD ]
Line_7 $$ if (length > 1 && text.charAt(0) == '\'' && text.charAt(length - 1) == '\'') -->Line_9 $$ final PsiExpression expression = JavaPsiFacade.getElementFactory(project).createExpressionFromText('"' + value + '"', null)[ CD ]
Line_5 $$ final String text = StringUtil.unescapeStringCharacters(element.getText())-->Line_7 $$ if (length > 1 && text.charAt(0) == '\'' && text.charAt(length - 1) == '\'') [ FD ]
Line_9 $$ final PsiExpression expression = JavaPsiFacade.getElementFactory(project).createExpressionFromText('"' + value + '"', null)-->Line_10 $$ final PsiElement literal = expression.getFirstChild()[ FD ]
Line_4 $$ if (element != null && PsiUtil.isJavaToken(element, JavaTokenType.CHARACTER_LITERAL)) -->Line_7 $$ if (length > 1 && text.charAt(0) == '\'' && text.charAt(length - 1) == '\'') [ CD ]
Line_5 $$ final String text = StringUtil.unescapeStringCharacters(element.getText())-->Line_8 $$ final String value = StringUtil.escapeStringCharacters(text.substring(1, length - 1))[ FD ]
Line_7 $$ if (length > 1 && text.charAt(0) == '\'' && text.charAt(length - 1) == '\'') -->Line_11 $$ if (literal != null && PsiUtil.isJavaToken(literal, JavaTokenType.STRING_LITERAL)) [ CD ]
Line_3 $$ final PsiElement element = file.findElementAt(editor.getCaretModel().getOffset())-->Line_4 $$ if (element != null && PsiUtil.isJavaToken(element, JavaTokenType.CHARACTER_LITERAL)) [ FD ]
Line_10 $$ final PsiElement literal = expression.getFirstChild()-->Line_12 $$ element.replace(literal)[ FD ]
Line_2 $$ public void invoke(@NotNull final Project project, final Editor editor, final PsiFile file) throws IncorrectOperationException -->Line_3 $$ final PsiElement element = file.findElementAt(editor.getCaretModel().getOffset())[ CD ]
Line_4 $$ if (element != null && PsiUtil.isJavaToken(element, JavaTokenType.CHARACTER_LITERAL)) -->Line_5 $$ final String text = StringUtil.unescapeStringCharacters(element.getText())[ CD ]
Line_7 $$ if (length > 1 && text.charAt(0) == '\'' && text.charAt(length - 1) == '\'') -->Line_8 $$ final String value = StringUtil.escapeStringCharacters(text.substring(1, length - 1))[ CD ]
Line_5 $$ final String text = StringUtil.unescapeStringCharacters(element.getText())-->Line_6 $$ final int length = text.length()[ FD ]
Line_11 $$ if (literal != null && PsiUtil.isJavaToken(literal, JavaTokenType.STRING_LITERAL)) -->Line_12 $$ element.replace(literal)[ CD ]
Line_7 $$ if (length > 1 && text.charAt(0) == '\'' && text.charAt(length - 1) == '\'') -->Line_10 $$ final PsiElement literal = expression.getFirstChild()[ CD ]
