Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_20 $$ for (int i = 0; i < limit; i++) [ CD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_4 $$ if (transformed == null)[ CD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_3 $$ String transformed = transform.transform(word)[ FD ]
Line_12 $$ for (String rawSuggestion : rawSuggestions) -->Line_13 $$ int distance = EditDistance.levenshtein(transformed, rawSuggestion, true)[ FD ]
Line_11 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())-->Line_21 $$ Suggestion suggestion = suggestions.get(i)[ FD ]
Line_21 $$ Suggestion suggestion = suggestions.get(i)-->Line_25 $$ result.add(i, suggestion.getWord())[ FD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_17 $$ int limit = Math.min(maxSuggestions, suggestions.size())[ CD ]
Line_21 $$ Suggestion suggestion = suggestions.get(i)-->Line_22 $$ if (bestMetrics - suggestion.getMetrics() > quality) [ FD ]
Line_18 $$ List<String> result = new ArrayList<String>(limit)-->Line_25 $$ result.add(i, suggestion.getWord())[ FD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_19 $$ int bestMetrics = suggestions.get(0).getMetrics()[ CD ]
Line_6 $$ List<String> rawSuggestions = new ArrayList<String>()-->Line_8 $$ restore(word.charAt(0), 0, Integer.MAX_VALUE, dictionaries, rawSuggestions)[ FD ]
Line_17 $$ int limit = Math.min(maxSuggestions, suggestions.size())-->Line_20 $$ for (int i = 0; i < limit; i++) [ FD ]
Line_9 $$ if (rawSuggestions.isEmpty())-->Line_10 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_3 $$ String transformed = transform.transform(word)[ CD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_22 $$ if (bestMetrics - suggestion.getMetrics() > quality) [ FD ]
Line_6 $$ List<String> rawSuggestions = new ArrayList<String>()-->Line_9 $$ if (rawSuggestions.isEmpty())[ FD ]
Line_3 $$ String transformed = transform.transform(word)-->Line_7 $$ restore(transformed.charAt(0), 0, Integer.MAX_VALUE, bundledDictionaries, rawSuggestions)[ FD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_8 $$ restore(word.charAt(0), 0, Integer.MAX_VALUE, dictionaries, rawSuggestions)[ FD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_8 $$ restore(word.charAt(0), 0, Integer.MAX_VALUE, dictionaries, rawSuggestions)[ CD ]
Line_20 $$ for (int i = 0; i < limit; i++) -->Line_25 $$ result.add(i, suggestion.getWord())[ CD ]
Line_20 $$ for (int i = 0; i < limit; i++) -->Line_21 $$ Suggestion suggestion = suggestions.get(i)[ CD ]
Line_20 $$ for (int i = 0; i < limit; i++) -->Line_25 $$ result.add(i, suggestion.getWord())[ FD ]
Line_6 $$ List<String> rawSuggestions = new ArrayList<String>()-->Line_7 $$ restore(transformed.charAt(0), 0, Integer.MAX_VALUE, bundledDictionaries, rawSuggestions)[ FD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_7 $$ restore(transformed.charAt(0), 0, Integer.MAX_VALUE, bundledDictionaries, rawSuggestions)[ CD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_9 $$ if (rawSuggestions.isEmpty())[ CD ]
Line_20 $$ for (int i = 0; i < limit; i++) -->Line_21 $$ Suggestion suggestion = suggestions.get(i)[ FD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_6 $$ List<String> rawSuggestions = new ArrayList<String>()[ CD ]
Line_11 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())-->Line_14 $$ suggestions.add(new Suggestion(rawSuggestion, distance))[ FD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_16 $$ Collections.sort(suggestions)[ CD ]
Line_11 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())-->Line_16 $$ Collections.sort(suggestions)[ FD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_11 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())[ CD ]
Line_4 $$ if (transformed == null)-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_18 $$ List<String> result = new ArrayList<String>(limit)[ CD ]
Line_6 $$ List<String> rawSuggestions = new ArrayList<String>()-->Line_11 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())[ FD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_17 $$ int limit = Math.min(maxSuggestions, suggestions.size())[ FD ]
Line_11 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())-->Line_19 $$ int bestMetrics = suggestions.get(0).getMetrics()[ FD ]
Line_11 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())-->Line_17 $$ int limit = Math.min(maxSuggestions, suggestions.size())[ FD ]
Line_2 $$ public List<String> getSuggestions(@NotNull String word, int maxSuggestions, int quality) -->Line_27 $$ return result[ CD ]
Line_3 $$ String transformed = transform.transform(word)-->Line_4 $$ if (transformed == null)[ FD ]
Line_3 $$ String transformed = transform.transform(word)-->Line_13 $$ int distance = EditDistance.levenshtein(transformed, rawSuggestion, true)[ FD ]
Line_20 $$ for (int i = 0; i < limit; i++) -->Line_22 $$ if (bestMetrics - suggestion.getMetrics() > quality) [ CD ]
