Line_2 $$ public Result calculateResult(@NotNull Expression[] params, final ExpressionContext context) -->Line_6 $$ final int offset = context.getStartOffset()[ FD ]
Line_11 $$ for (PsiVariable var : vars) -->Line_15 $$ if (var instanceof PsiLocalVariable) [ FD ]
Line_2 $$ public Result calculateResult(@NotNull Expression[] params, final ExpressionContext context) -->Line_30 $$ return null[ CD ]
Line_8 $$ PsiElement place = file.findElementAt(offset)-->Line_9 $$ PsiVariable[] vars = MacroUtil.getVariablesVisibleAt(place, "")[ FD ]
Line_11 $$ for (PsiVariable var : vars) -->Line_16 $$ PsiElement parent = var.getParent()[ FD ]
Line_12 $$ PsiIdentifier identifier = var.getNameIdentifier()-->Line_23 $$ String name = identifier.getText()[ FD ]
Line_6 $$ final int offset = context.getStartOffset()-->Line_8 $$ PsiElement place = file.findElementAt(offset)[ FD ]
Line_7 $$ PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(context.getEditor().getDocument())-->Line_8 $$ PsiElement place = file.findElementAt(offset)[ FD ]
Line_2 $$ public Result calculateResult(@NotNull Expression[] params, final ExpressionContext context) -->Line_3 $$ if (params.length != 0)[ CD ]
Line_15 $$ if (var instanceof PsiLocalVariable) -->Line_17 $$ if (parent instanceof PsiDeclarationStatement) [ CD ]
Line_16 $$ PsiElement parent = var.getParent()-->Line_18 $$ if (PsiTreeUtil.isAncestor(parent, place, false) && var.getTextRange().getStartOffset() > place.getTextRange().getStartOffset()) [ FD ]
Line_8 $$ PsiElement place = file.findElementAt(offset)-->Line_18 $$ if (PsiTreeUtil.isAncestor(parent, place, false) && var.getTextRange().getStartOffset() > place.getTextRange().getStartOffset()) [ FD ]
Line_15 $$ if (var instanceof PsiLocalVariable) -->Line_16 $$ PsiElement parent = var.getParent()[ CD ]
Line_10 $$ for (char letter = 'i'; letter <= 'z'; letter++) -->Line_28 $$ return new TextResult("" + letter)[ CD ]
Line_11 $$ for (PsiVariable var : vars) -->Line_18 $$ if (PsiTreeUtil.isAncestor(parent, place, false) && var.getTextRange().getStartOffset() > place.getTextRange().getStartOffset()) [ FD ]
Line_2 $$ public Result calculateResult(@NotNull Expression[] params, final ExpressionContext context) -->Line_7 $$ PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(context.getEditor().getDocument())[ FD ]
Line_11 $$ for (PsiVariable var : vars) -->Line_12 $$ PsiIdentifier identifier = var.getNameIdentifier()[ FD ]
Line_16 $$ PsiElement parent = var.getParent()-->Line_17 $$ if (parent instanceof PsiDeclarationStatement) [ FD ]
Line_2 $$ public Result calculateResult(@NotNull Expression[] params, final ExpressionContext context) -->Line_6 $$ final int offset = context.getStartOffset()[ CD ]
Line_2 $$ public Result calculateResult(@NotNull Expression[] params, final ExpressionContext context) -->Line_5 $$ final Project project = context.getProject()[ FD ]
Line_5 $$ final Project project = context.getProject()-->Line_7 $$ PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(context.getEditor().getDocument())[ FD ]
Line_2 $$ public Result calculateResult(@NotNull Expression[] params, final ExpressionContext context) -->Line_9 $$ PsiVariable[] vars = MacroUtil.getVariablesVisibleAt(place, "")[ CD ]
Line_2 $$ public Result calculateResult(@NotNull Expression[] params, final ExpressionContext context) -->Line_8 $$ PsiElement place = file.findElementAt(offset)[ CD ]
Line_17 $$ if (parent instanceof PsiDeclarationStatement) -->Line_18 $$ if (PsiTreeUtil.isAncestor(parent, place, false) && var.getTextRange().getStartOffset() > place.getTextRange().getStartOffset()) [ CD ]
Line_8 $$ PsiElement place = file.findElementAt(offset)-->Line_13 $$ if (identifier == null || place.equals(identifier))[ FD ]
Line_12 $$ PsiIdentifier identifier = var.getNameIdentifier()-->Line_13 $$ if (identifier == null || place.equals(identifier))[ FD ]
Line_23 $$ String name = identifier.getText()-->Line_24 $$ if (name.length() == 1 && name.charAt(0) == letter) [ FD ]
Line_2 $$ public Result calculateResult(@NotNull Expression[] params, final ExpressionContext context) -->Line_5 $$ final Project project = context.getProject()[ CD ]
Line_3 $$ if (params.length != 0)-->Line_4 $$ return null[ CD ]
Line_2 $$ public Result calculateResult(@NotNull Expression[] params, final ExpressionContext context) -->Line_7 $$ PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(context.getEditor().getDocument())[ CD ]
