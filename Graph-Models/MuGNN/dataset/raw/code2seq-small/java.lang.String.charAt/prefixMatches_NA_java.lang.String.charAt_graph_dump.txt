Line_2 $$ public boolean prefixMatches(@NotNull String prefix, @NotNull String variant) -->Line_7 $$ return matches[ CD ]
Line_2 $$ public boolean prefixMatches(@NotNull String prefix, @NotNull String variant) -->Line_4 $$ if (matches && StringUtil.isWhiteSpace(prefix.charAt(prefix.length() - 1))) [ FD ]
Line_4 $$ if (matches && StringUtil.isWhiteSpace(prefix.charAt(prefix.length() - 1))) -->Line_5 $$ return StringUtil.startsWithIgnoreCase(variant, prefix)[ CD ]
Line_2 $$ public boolean prefixMatches(@NotNull String prefix, @NotNull String variant) -->Line_3 $$ boolean matches = new CamelHumpMatcher(prefix, false).prefixMatches(variant.replace(' ', '_'))[ CD ]
Line_3 $$ boolean matches = new CamelHumpMatcher(prefix, false).prefixMatches(variant.replace(' ', '_'))-->Line_4 $$ if (matches && StringUtil.isWhiteSpace(prefix.charAt(prefix.length() - 1))) [ FD ]
Line_2 $$ public boolean prefixMatches(@NotNull String prefix, @NotNull String variant) -->Line_3 $$ boolean matches = new CamelHumpMatcher(prefix, false).prefixMatches(variant.replace(' ', '_'))[ FD ]
Line_2 $$ public boolean prefixMatches(@NotNull String prefix, @NotNull String variant) -->Line_4 $$ if (matches && StringUtil.isWhiteSpace(prefix.charAt(prefix.length() - 1))) [ CD ]
Line_2 $$ public boolean prefixMatches(@NotNull String prefix, @NotNull String variant) -->Line_5 $$ return StringUtil.startsWithIgnoreCase(variant, prefix)[ FD ]
