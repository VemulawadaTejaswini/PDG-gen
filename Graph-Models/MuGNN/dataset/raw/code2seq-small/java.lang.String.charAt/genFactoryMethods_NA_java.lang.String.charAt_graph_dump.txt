Line_4 $$ String retName = method.getReturnType().getSimpleName()-->Line_8 $$ if (isElement(retName) && method.getParameterTypes().length == 0) [ FD ]
Line_3 $$ for (Method method : cls.getDeclaredMethods()) -->Line_4 $$ String retName = method.getReturnType().getSimpleName()[ FD ]
Line_4 $$ String retName = method.getReturnType().getSimpleName()-->Line_9 $$ genFactoryMethod(retName, methodName, indent)[ FD ]
Line_8 $$ if (isElement(retName) && method.getParameterTypes().length == 0) -->Line_9 $$ genFactoryMethod(retName, methodName, indent)[ CD ]
Line_3 $$ for (Method method : cls.getDeclaredMethods()) -->Line_8 $$ if (isElement(retName) && method.getParameterTypes().length == 0) [ FD ]
Line_2 $$ void genFactoryMethods(Class<?> cls, int indent) -->Line_9 $$ genFactoryMethod(retName, methodName, indent)[ FD ]
Line_5 $$ String methodName = method.getName()-->Line_6 $$ if (methodName.charAt(0) == '$')[ FD ]
Line_2 $$ void genFactoryMethods(Class<?> cls, int indent) -->Line_3 $$ for (Method method : cls.getDeclaredMethods()) [ FD ]
Line_5 $$ String methodName = method.getName()-->Line_9 $$ genFactoryMethod(retName, methodName, indent)[ FD ]
Line_3 $$ for (Method method : cls.getDeclaredMethods()) -->Line_5 $$ String methodName = method.getName()[ FD ]
