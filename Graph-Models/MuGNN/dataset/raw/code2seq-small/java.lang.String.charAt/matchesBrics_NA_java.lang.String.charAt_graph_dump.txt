Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_8 $$ for (int i = 0; i < s.length(); i++) [ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder(s.length() * 5)-->Line_11 $$ sb.append("<whitespacechar>")[ FD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_4 $$ if (escaped.equals(s)) [ FD ]
Line_8 $$ for (int i = 0; i < s.length(); i++) -->Line_9 $$ final char c = s.charAt(i)[ FD ]
Line_13 $$ if (Character.isUpperCase(c)) -->Line_14 $$ sb.append('[').append(Character.toUpperCase(c)).append(Character.toLowerCase(c)).append(']')[ CD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_3 $$ final String escaped = StringUtil.escapeToRegexp(s)[ CD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_8 $$ for (int i = 0; i < s.length(); i++) [ CD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_9 $$ final char c = s.charAt(i)[ FD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_5 $$ return equalTo(s)[ FD ]
Line_22 $$ return with(new ValuePatternCondition<String>("matchesBrics") -->Line_26 $$ return runAutomaton.run(str)[ CD ]
Line_10 $$ if (c == ' ') -->Line_13 $$ if (Character.isUpperCase(c)) [ CD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_3 $$ final String escaped = StringUtil.escapeToRegexp(s)[ FD ]
Line_22 $$ return with(new ValuePatternCondition<String>("matchesBrics") -->Line_29 $$ return Collections.singleton(s)[ CD ]
Line_8 $$ for (int i = 0; i < s.length(); i++) -->Line_9 $$ final char c = s.charAt(i)[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder(s.length() * 5)-->Line_19 $$ final RegExp regExp = new RegExp(sb.toString())[ FD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_7 $$ StringBuilder sb = new StringBuilder(s.length() * 5)[ CD ]
Line_22 $$ return with(new ValuePatternCondition<String>("matchesBrics") -->Line_26 $$ return runAutomaton.run(str)[ FD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_21 $$ final RunAutomaton runAutomaton = new RunAutomaton(automaton, true)[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder(s.length() * 5)-->Line_14 $$ sb.append('[').append(Character.toUpperCase(c)).append(Character.toLowerCase(c)).append(']')[ FD ]
Line_10 $$ if (c == ' ') -->Line_11 $$ sb.append("<whitespacechar>")[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder(s.length() * 5)-->Line_16 $$ sb.append(c)[ FD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_19 $$ final RegExp regExp = new RegExp(sb.toString())[ CD ]
Line_22 $$ return with(new ValuePatternCondition<String>("matchesBrics") -->Line_24 $$ if (!str.isEmpty() && (str.charAt(0) == '"' || str.charAt(0) == '\''))[ FD ]
Line_4 $$ if (escaped.equals(s)) -->Line_5 $$ return equalTo(s)[ CD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_20 $$ final Automaton automaton = regExp.toAutomaton(new DatatypesAutomatonProvider())[ CD ]
Line_9 $$ final char c = s.charAt(i)-->Line_10 $$ if (c == ' ') [ FD ]
Line_22 $$ return with(new ValuePatternCondition<String>("matchesBrics") -->Line_24 $$ if (!str.isEmpty() && (str.charAt(0) == '"' || str.charAt(0) == '\''))[ CD ]
Line_22 $$ return with(new ValuePatternCondition<String>("matchesBrics") -->Line_25 $$ str = str.substring(1)[ FD ]
Line_19 $$ final RegExp regExp = new RegExp(sb.toString())-->Line_20 $$ final Automaton automaton = regExp.toAutomaton(new DatatypesAutomatonProvider())[ FD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_22 $$ return with(new ValuePatternCondition<String>("matchesBrics") [ CD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_29 $$ return Collections.singleton(s)[ FD ]
Line_9 $$ final char c = s.charAt(i)-->Line_13 $$ if (Character.isUpperCase(c)) [ FD ]
Line_9 $$ final char c = s.charAt(i)-->Line_14 $$ sb.append('[').append(Character.toUpperCase(c)).append(Character.toLowerCase(c)).append(']')[ FD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_4 $$ if (escaped.equals(s)) [ CD ]
Line_24 $$ if (!str.isEmpty() && (str.charAt(0) == '"' || str.charAt(0) == '\''))-->Line_25 $$ str = str.substring(1)[ CD ]
Line_8 $$ for (int i = 0; i < s.length(); i++) -->Line_10 $$ if (c == ' ') [ CD ]
Line_9 $$ final char c = s.charAt(i)-->Line_16 $$ sb.append(c)[ FD ]
Line_3 $$ final String escaped = StringUtil.escapeToRegexp(s)-->Line_4 $$ if (escaped.equals(s)) [ FD ]
Line_21 $$ final RunAutomaton runAutomaton = new RunAutomaton(automaton, true)-->Line_26 $$ return runAutomaton.run(str)[ FD ]
Line_13 $$ if (Character.isUpperCase(c)) -->Line_16 $$ sb.append(c)[ CD ]
Line_2 $$ public StringPattern matchesBrics(@NonNls @NotNull final String s) -->Line_7 $$ StringBuilder sb = new StringBuilder(s.length() * 5)[ FD ]
