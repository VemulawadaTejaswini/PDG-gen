Line_15 $$ final char lastChar = propertyValue.charAt(propertyValue.length() - 1)-->Line_16 $$ if (!PROPERTY_VALUE_END_CHECK_SYMBOLS.contains(lastChar)) [ FD ]
Line_2 $$ public void check(BidirectionalMap<PropertiesFile, PropertiesFile> parents, List<PropertiesFile> files, Map<PropertiesFile, Set<String>> keysUpToParent, Map<PropertiesFile, Map<String, String>> propertiesFilesNamesMaps, InspectionManager manager, RefManager refManager, ProblemDescriptionsProcessor processor) -->Line_5 $$ PropertiesFile parent = parents.get(file)[ FD ]
Line_2 $$ public void check(BidirectionalMap<PropertiesFile, PropertiesFile> parents, List<PropertiesFile> files, Map<PropertiesFile, Set<String>> keysUpToParent, Map<PropertiesFile, Map<String, String>> propertiesFilesNamesMaps, InspectionManager manager, RefManager refManager, ProblemDescriptionsProcessor processor) -->Line_19 $$ final String parentPropertyValue = propertiesFilesNamesMaps.get(parent).get(commonKey)[ FD ]
Line_25 $$ final String message-->Line_29 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end", lastChar)[ FD ]
Line_25 $$ final String message-->Line_32 $$ processor.addProblemElement(refManager.getReference(file.getContainingFile()), manager.createProblemDescriptor(propertyPsiElement, message, true, LocalQuickFix.EMPTY_ARRAY, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ FD ]
Line_2 $$ public void check(BidirectionalMap<PropertiesFile, PropertiesFile> parents, List<PropertiesFile> files, Map<PropertiesFile, Set<String>> keysUpToParent, Map<PropertiesFile, Map<String, String>> propertiesFilesNamesMaps, InspectionManager manager, RefManager refManager, ProblemDescriptionsProcessor processor) -->Line_36 $$ parent = parents.get(parent)[ FD ]
Line_36 $$ parent = parents.get(parent)-->Line_6 $$ while (parent != null) [ FD ]
Line_3 $$ for (PropertiesFile file : files) -->Line_9 $$ final IProperty property = file.findPropertyByKey(commonKey)[ FD ]
Line_9 $$ final IProperty property = file.findPropertyByKey(commonKey)-->Line_11 $$ final String propertyValue = property.getValue()[ FD ]
Line_6 $$ while (parent != null) -->Line_7 $$ final Collection<String> commonKeys = ContainerUtil.intersection(propertiesFilesNamesMaps.get(parent).keySet(), filePropertyKeys)[ CD ]
Line_23 $$ final char parentLastChar = parentPropertyValue.charAt(parentPropertyValue.length() - 1)-->Line_26 $$ if (PROPERTY_VALUE_END_CHECK_SYMBOLS.contains(parentLastChar)) [ FD ]
Line_26 $$ if (PROPERTY_VALUE_END_CHECK_SYMBOLS.contains(parentLastChar)) -->Line_27 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end.parent.end.from.check.symbols", lastChar, parentLastChar, parent.getName())[ CD ]
Line_3 $$ for (PropertiesFile file : files) -->Line_4 $$ final Set<String> filePropertyKeys = new THashSet<String>(propertiesFilesNamesMaps.get(file).keySet())[ FD ]
Line_23 $$ final char parentLastChar = parentPropertyValue.charAt(parentPropertyValue.length() - 1)-->Line_24 $$ if (lastChar != parentLastChar) [ FD ]
Line_9 $$ final IProperty property = file.findPropertyByKey(commonKey)-->Line_31 $$ final PsiElement propertyPsiElement = property.getPsiElement()[ FD ]
Line_6 $$ while (parent != null) -->Line_36 $$ parent = parents.get(parent)[ CD ]
Line_11 $$ final String propertyValue = property.getValue()-->Line_15 $$ final char lastChar = propertyValue.charAt(propertyValue.length() - 1)[ FD ]
Line_4 $$ final Set<String> filePropertyKeys = new THashSet<String>(propertiesFilesNamesMaps.get(file).keySet())-->Line_7 $$ final Collection<String> commonKeys = ContainerUtil.intersection(propertiesFilesNamesMaps.get(parent).keySet(), filePropertyKeys)[ FD ]
Line_36 $$ parent = parents.get(parent)-->Line_27 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end.parent.end.from.check.symbols", lastChar, parentLastChar, parent.getName())[ FD ]
Line_3 $$ for (PropertiesFile file : files) -->Line_5 $$ PropertiesFile parent = parents.get(file)[ FD ]
Line_19 $$ final String parentPropertyValue = propertiesFilesNamesMaps.get(parent).get(commonKey)-->Line_23 $$ final char parentLastChar = parentPropertyValue.charAt(parentPropertyValue.length() - 1)[ FD ]
Line_2 $$ public void check(BidirectionalMap<PropertiesFile, PropertiesFile> parents, List<PropertiesFile> files, Map<PropertiesFile, Set<String>> keysUpToParent, Map<PropertiesFile, Map<String, String>> propertiesFilesNamesMaps, InspectionManager manager, RefManager refManager, ProblemDescriptionsProcessor processor) -->Line_7 $$ final Collection<String> commonKeys = ContainerUtil.intersection(propertiesFilesNamesMaps.get(parent).keySet(), filePropertyKeys)[ FD ]
Line_36 $$ parent = parents.get(parent)-->Line_19 $$ final String parentPropertyValue = propertiesFilesNamesMaps.get(parent).get(commonKey)[ FD ]
Line_2 $$ public void check(BidirectionalMap<PropertiesFile, PropertiesFile> parents, List<PropertiesFile> files, Map<PropertiesFile, Set<String>> keysUpToParent, Map<PropertiesFile, Map<String, String>> propertiesFilesNamesMaps, InspectionManager manager, RefManager refManager, ProblemDescriptionsProcessor processor) -->Line_32 $$ processor.addProblemElement(refManager.getReference(file.getContainingFile()), manager.createProblemDescriptor(propertyPsiElement, message, true, LocalQuickFix.EMPTY_ARRAY, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ FD ]
Line_5 $$ PropertiesFile parent = parents.get(file)-->Line_27 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end.parent.end.from.check.symbols", lastChar, parentLastChar, parent.getName())[ FD ]
Line_24 $$ if (lastChar != parentLastChar) -->Line_25 $$ final String message[ CD ]
Line_6 $$ while (parent != null) -->Line_35 $$ filePropertyKeys.removeAll(commonKeys)[ CD ]
Line_24 $$ if (lastChar != parentLastChar) -->Line_31 $$ final PsiElement propertyPsiElement = property.getPsiElement()[ CD ]
Line_31 $$ final PsiElement propertyPsiElement = property.getPsiElement()-->Line_32 $$ processor.addProblemElement(refManager.getReference(file.getContainingFile()), manager.createProblemDescriptor(propertyPsiElement, message, true, LocalQuickFix.EMPTY_ARRAY, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ FD ]
Line_11 $$ final String propertyValue = property.getValue()-->Line_12 $$ if (StringUtil.isEmptyOrSpaces(propertyValue)) [ FD ]
Line_24 $$ if (lastChar != parentLastChar) -->Line_32 $$ processor.addProblemElement(refManager.getReference(file.getContainingFile()), manager.createProblemDescriptor(propertyPsiElement, message, true, LocalQuickFix.EMPTY_ARRAY, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ CD ]
Line_29 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end", lastChar)-->Line_32 $$ processor.addProblemElement(refManager.getReference(file.getContainingFile()), manager.createProblemDescriptor(propertyPsiElement, message, true, LocalQuickFix.EMPTY_ARRAY, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ FD ]
Line_7 $$ final Collection<String> commonKeys = ContainerUtil.intersection(propertiesFilesNamesMaps.get(parent).keySet(), filePropertyKeys)-->Line_35 $$ filePropertyKeys.removeAll(commonKeys)[ FD ]
Line_26 $$ if (PROPERTY_VALUE_END_CHECK_SYMBOLS.contains(parentLastChar)) -->Line_29 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end", lastChar)[ CD ]
Line_5 $$ PropertiesFile parent = parents.get(file)-->Line_6 $$ while (parent != null) [ FD ]
Line_36 $$ parent = parents.get(parent)-->Line_7 $$ final Collection<String> commonKeys = ContainerUtil.intersection(propertiesFilesNamesMaps.get(parent).keySet(), filePropertyKeys)[ FD ]
Line_24 $$ if (lastChar != parentLastChar) -->Line_26 $$ if (PROPERTY_VALUE_END_CHECK_SYMBOLS.contains(parentLastChar)) [ CD ]
Line_8 $$ for (final String commonKey : commonKeys) -->Line_9 $$ final IProperty property = file.findPropertyByKey(commonKey)[ FD ]
Line_27 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end.parent.end.from.check.symbols", lastChar, parentLastChar, parent.getName())-->Line_29 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end", lastChar)[ FD ]
Line_15 $$ final char lastChar = propertyValue.charAt(propertyValue.length() - 1)-->Line_29 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end", lastChar)[ FD ]
Line_2 $$ public void check(BidirectionalMap<PropertiesFile, PropertiesFile> parents, List<PropertiesFile> files, Map<PropertiesFile, Set<String>> keysUpToParent, Map<PropertiesFile, Map<String, String>> propertiesFilesNamesMaps, InspectionManager manager, RefManager refManager, ProblemDescriptionsProcessor processor) -->Line_4 $$ final Set<String> filePropertyKeys = new THashSet<String>(propertiesFilesNamesMaps.get(file).keySet())[ FD ]
Line_15 $$ final char lastChar = propertyValue.charAt(propertyValue.length() - 1)-->Line_24 $$ if (lastChar != parentLastChar) [ FD ]
Line_25 $$ final String message-->Line_27 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end.parent.end.from.check.symbols", lastChar, parentLastChar, parent.getName())[ FD ]
Line_27 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end.parent.end.from.check.symbols", lastChar, parentLastChar, parent.getName())-->Line_32 $$ processor.addProblemElement(refManager.getReference(file.getContainingFile()), manager.createProblemDescriptor(propertyPsiElement, message, true, LocalQuickFix.EMPTY_ARRAY, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ FD ]
Line_5 $$ PropertiesFile parent = parents.get(file)-->Line_36 $$ parent = parents.get(parent)[ FD ]
Line_15 $$ final char lastChar = propertyValue.charAt(propertyValue.length() - 1)-->Line_27 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end.parent.end.from.check.symbols", lastChar, parentLastChar, parent.getName())[ FD ]
Line_8 $$ for (final String commonKey : commonKeys) -->Line_19 $$ final String parentPropertyValue = propertiesFilesNamesMaps.get(parent).get(commonKey)[ FD ]
Line_3 $$ for (PropertiesFile file : files) -->Line_32 $$ processor.addProblemElement(refManager.getReference(file.getContainingFile()), manager.createProblemDescriptor(propertyPsiElement, message, true, LocalQuickFix.EMPTY_ARRAY, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ FD ]
Line_5 $$ PropertiesFile parent = parents.get(file)-->Line_19 $$ final String parentPropertyValue = propertiesFilesNamesMaps.get(parent).get(commonKey)[ FD ]
Line_23 $$ final char parentLastChar = parentPropertyValue.charAt(parentPropertyValue.length() - 1)-->Line_27 $$ message = InspectionsBundle.message("inconsistent.bundle.property.inconsistent.end.parent.end.from.check.symbols", lastChar, parentLastChar, parent.getName())[ FD ]
Line_4 $$ final Set<String> filePropertyKeys = new THashSet<String>(propertiesFilesNamesMaps.get(file).keySet())-->Line_35 $$ filePropertyKeys.removeAll(commonKeys)[ FD ]
Line_5 $$ PropertiesFile parent = parents.get(file)-->Line_7 $$ final Collection<String> commonKeys = ContainerUtil.intersection(propertiesFilesNamesMaps.get(parent).keySet(), filePropertyKeys)[ FD ]
Line_19 $$ final String parentPropertyValue = propertiesFilesNamesMaps.get(parent).get(commonKey)-->Line_20 $$ if (parentPropertyValue == null) [ FD ]
