Line_2 $$ public void testReadString() -->Line_10 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(buffer)[ CD ]
Line_2 $$ public void testReadString() -->Line_22 $$ deserializer = new Deserializer(byteBuffer)[ CD ]
Line_14 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_19 $$ BigEndianCodec.putChar(buffer, 5 + i * 2, nonAsciiString.charAt(i))[ FD ]
Line_2 $$ public void testReadString() -->Line_14 $$ String nonAsciiString = "非ASCII Code中文测试"[ CD ]
Line_2 $$ public void testReadString() -->Line_6 $$ BigEndianCodec.putInt(buffer, 1, asciiString.length())[ CD ]
Line_4 $$ byte[] buffer = new byte[asciiString.length() + 5]-->Line_19 $$ BigEndianCodec.putChar(buffer, 5 + i * 2, nonAsciiString.charAt(i))[ FD ]
Line_18 $$ for (int i = 0; i < nonAsciiString.length(); i++) -->Line_19 $$ BigEndianCodec.putChar(buffer, 5 + i * 2, nonAsciiString.charAt(i))[ CD ]
Line_10 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(buffer)-->Line_21 $$ byteBuffer = ByteBuffer.wrap(buffer)[ FD ]
Line_4 $$ byte[] buffer = new byte[asciiString.length() + 5]-->Line_10 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(buffer)[ FD ]
Line_2 $$ public void testReadString() -->Line_13 $$ Assert.assertEquals(asciiString, resultString)[ CD ]
Line_15 $$ buffer = new byte[nonAsciiString.length() * 2 + 5]-->Line_17 $$ BigEndianCodec.putInt(buffer, 1, nonAsciiString.length())[ FD ]
Line_18 $$ for (int i = 0; i < nonAsciiString.length(); i++) -->Line_19 $$ BigEndianCodec.putChar(buffer, 5 + i * 2, nonAsciiString.charAt(i))[ FD ]
Line_7 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_8 $$ buffer[5 + i] = (byte) asciiString.charAt(i)[ FD ]
Line_14 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_24 $$ Assert.assertEquals(nonAsciiString, resultString)[ FD ]
Line_2 $$ public void testReadString() -->Line_4 $$ byte[] buffer = new byte[asciiString.length() + 5][ CD ]
Line_15 $$ buffer = new byte[nonAsciiString.length() * 2 + 5]-->Line_21 $$ byteBuffer = ByteBuffer.wrap(buffer)[ FD ]
Line_23 $$ resultString = deserializer.readString()-->Line_24 $$ Assert.assertEquals(nonAsciiString, resultString)[ FD ]
Line_2 $$ public void testReadString() -->Line_17 $$ BigEndianCodec.putInt(buffer, 1, nonAsciiString.length())[ CD ]
Line_12 $$ String resultString = deserializer.readString()-->Line_23 $$ resultString = deserializer.readString()[ FD ]
Line_7 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_19 $$ BigEndianCodec.putChar(buffer, 5 + i * 2, nonAsciiString.charAt(i))[ FD ]
Line_2 $$ public void testReadString() -->Line_21 $$ byteBuffer = ByteBuffer.wrap(buffer)[ CD ]
Line_11 $$ Deserializer deserializer = new Deserializer(byteBuffer)-->Line_22 $$ deserializer = new Deserializer(byteBuffer)[ FD ]
Line_2 $$ public void testReadString() -->Line_15 $$ buffer = new byte[nonAsciiString.length() * 2 + 5][ CD ]
Line_4 $$ byte[] buffer = new byte[asciiString.length() + 5]-->Line_6 $$ BigEndianCodec.putInt(buffer, 1, asciiString.length())[ FD ]
Line_4 $$ byte[] buffer = new byte[asciiString.length() + 5]-->Line_15 $$ buffer = new byte[nonAsciiString.length() * 2 + 5][ FD ]
Line_14 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_15 $$ buffer = new byte[nonAsciiString.length() * 2 + 5][ FD ]
Line_3 $$ String asciiString = "abcdefghijklmn"-->Line_13 $$ Assert.assertEquals(asciiString, resultString)[ FD ]
Line_3 $$ String asciiString = "abcdefghijklmn"-->Line_7 $$ for (int i = 0; i < asciiString.length(); i++) [ FD ]
Line_11 $$ Deserializer deserializer = new Deserializer(byteBuffer)-->Line_23 $$ resultString = deserializer.readString()[ FD ]
Line_2 $$ public void testReadString() -->Line_23 $$ resultString = deserializer.readString()[ CD ]
Line_2 $$ public void testReadString() -->Line_7 $$ for (int i = 0; i < asciiString.length(); i++) [ CD ]
Line_2 $$ public void testReadString() -->Line_3 $$ String asciiString = "abcdefghijklmn"[ CD ]
Line_12 $$ String resultString = deserializer.readString()-->Line_13 $$ Assert.assertEquals(asciiString, resultString)[ FD ]
Line_2 $$ public void testReadString() -->Line_12 $$ String resultString = deserializer.readString()[ CD ]
Line_2 $$ public void testReadString() -->Line_18 $$ for (int i = 0; i < nonAsciiString.length(); i++) [ CD ]
Line_2 $$ public void testReadString() -->Line_24 $$ Assert.assertEquals(nonAsciiString, resultString)[ CD ]
Line_12 $$ String resultString = deserializer.readString()-->Line_24 $$ Assert.assertEquals(nonAsciiString, resultString)[ FD ]
Line_7 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_18 $$ for (int i = 0; i < nonAsciiString.length(); i++) [ FD ]
Line_14 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_18 $$ for (int i = 0; i < nonAsciiString.length(); i++) [ FD ]
Line_2 $$ public void testReadString() -->Line_5 $$ buffer[0] = 1[ CD ]
Line_3 $$ String asciiString = "abcdefghijklmn"-->Line_6 $$ BigEndianCodec.putInt(buffer, 1, asciiString.length())[ FD ]
Line_11 $$ Deserializer deserializer = new Deserializer(byteBuffer)-->Line_12 $$ String resultString = deserializer.readString()[ FD ]
Line_2 $$ public void testReadString() -->Line_16 $$ buffer[0] = 0[ CD ]
Line_3 $$ String asciiString = "abcdefghijklmn"-->Line_8 $$ buffer[5 + i] = (byte) asciiString.charAt(i)[ FD ]
Line_15 $$ buffer = new byte[nonAsciiString.length() * 2 + 5]-->Line_19 $$ BigEndianCodec.putChar(buffer, 5 + i * 2, nonAsciiString.charAt(i))[ FD ]
Line_4 $$ byte[] buffer = new byte[asciiString.length() + 5]-->Line_21 $$ byteBuffer = ByteBuffer.wrap(buffer)[ FD ]
Line_22 $$ deserializer = new Deserializer(byteBuffer)-->Line_23 $$ resultString = deserializer.readString()[ FD ]
Line_2 $$ public void testReadString() -->Line_11 $$ Deserializer deserializer = new Deserializer(byteBuffer)[ CD ]
Line_3 $$ String asciiString = "abcdefghijklmn"-->Line_4 $$ byte[] buffer = new byte[asciiString.length() + 5][ FD ]
Line_7 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_8 $$ buffer[5 + i] = (byte) asciiString.charAt(i)[ CD ]
Line_4 $$ byte[] buffer = new byte[asciiString.length() + 5]-->Line_17 $$ BigEndianCodec.putInt(buffer, 1, nonAsciiString.length())[ FD ]
Line_14 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_17 $$ BigEndianCodec.putInt(buffer, 1, nonAsciiString.length())[ FD ]
