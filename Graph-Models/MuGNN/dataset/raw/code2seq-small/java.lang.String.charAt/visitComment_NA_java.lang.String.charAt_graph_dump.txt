Line_6 $$ final String origText = comment.getText()-->Line_8 $$ if (commentStart != -1 && (commentStart + 1) < origText.length()) [ FD ]
Line_8 $$ if (commentStart != -1 && (commentStart + 1) < origText.length()) -->Line_10 $$ if (charAfterDash == '!' && comment.getTextRange().getStartOffset() == 0) [ CD ]
Line_8 $$ if (commentStart != -1 && (commentStart + 1) < origText.length()) -->Line_9 $$ final char charAfterDash = origText.charAt(commentStart + 1)[ CD ]
Line_9 $$ final char charAfterDash = origText.charAt(commentStart + 1)-->Line_20 $$ if (!StringUtil.isWhiteSpace(charAfterDash)) [ FD ]
Line_17 $$ final String newText-->Line_28 $$ final PsiComment newComment = elementGenerator.createFromText(LanguageLevel.forElement(comment), PsiComment.class, newText)[ FD ]
Line_6 $$ final String origText = comment.getText()-->Line_9 $$ final char charAfterDash = origText.charAt(commentStart + 1)[ FD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_3 $$ if (!myRange.contains(comment.getTextRange())) [ CD ]
Line_13 $$ if (charAfterDash == '#' || charAfterDash == ':') -->Line_14 $$ return[ CD ]
Line_20 $$ if (!StringUtil.isWhiteSpace(charAfterDash)) -->Line_21 $$ newText = "# " + commentTextWithoutDash[ CD ]
Line_19 $$ newText = "# " + StringUtil.trimLeading(commentTextWithoutDash)-->Line_25 $$ if (!newText.equals(origText)) [ FD ]
Line_28 $$ final PsiComment newComment = elementGenerator.createFromText(LanguageLevel.forElement(comment), PsiComment.class, newText)-->Line_29 $$ myCommentReplacements.add(Couple.of(comment, newComment))[ FD ]
Line_16 $$ final String commentTextWithoutDash = origText.substring(commentStart + 1)-->Line_19 $$ newText = "# " + StringUtil.trimLeading(commentTextWithoutDash)[ FD ]
Line_19 $$ newText = "# " + StringUtil.trimLeading(commentTextWithoutDash)-->Line_26 $$ myDelta += newText.length() - origText.length()[ FD ]
Line_19 $$ newText = "# " + StringUtil.trimLeading(commentTextWithoutDash)-->Line_28 $$ final PsiComment newComment = elementGenerator.createFromText(LanguageLevel.forElement(comment), PsiComment.class, newText)[ FD ]
Line_6 $$ final String origText = comment.getText()-->Line_16 $$ final String commentTextWithoutDash = origText.substring(commentStart + 1)[ FD ]
Line_18 $$ if (isTrailingComment(comment)) -->Line_20 $$ if (!StringUtil.isWhiteSpace(charAfterDash)) [ CD ]
Line_8 $$ if (commentStart != -1 && (commentStart + 1) < origText.length()) -->Line_17 $$ final String newText[ CD ]
Line_17 $$ final String newText-->Line_25 $$ if (!newText.equals(origText)) [ FD ]
Line_25 $$ if (!newText.equals(origText)) -->Line_27 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(myProject)[ CD ]
Line_6 $$ final String origText = comment.getText()-->Line_26 $$ myDelta += newText.length() - origText.length()[ FD ]
Line_27 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(myProject)-->Line_28 $$ final PsiComment newComment = elementGenerator.createFromText(LanguageLevel.forElement(comment), PsiComment.class, newText)[ FD ]
Line_3 $$ if (!myRange.contains(comment.getTextRange())) -->Line_4 $$ return[ CD ]
Line_6 $$ final String origText = comment.getText()-->Line_7 $$ final int commentStart = origText.indexOf('#')[ FD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_8 $$ if (commentStart != -1 && (commentStart + 1) < origText.length()) [ CD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_10 $$ if (charAfterDash == '!' && comment.getTextRange().getStartOffset() == 0) [ FD ]
Line_8 $$ if (commentStart != -1 && (commentStart + 1) < origText.length()) -->Line_25 $$ if (!newText.equals(origText)) [ CD ]
Line_19 $$ newText = "# " + StringUtil.trimLeading(commentTextWithoutDash)-->Line_21 $$ newText = "# " + commentTextWithoutDash[ FD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_18 $$ if (isTrailingComment(comment)) [ FD ]
Line_20 $$ if (!StringUtil.isWhiteSpace(charAfterDash)) -->Line_23 $$ return[ CD ]
Line_6 $$ final String origText = comment.getText()-->Line_25 $$ if (!newText.equals(origText)) [ FD ]
Line_17 $$ final String newText-->Line_19 $$ newText = "# " + StringUtil.trimLeading(commentTextWithoutDash)[ FD ]
Line_25 $$ if (!newText.equals(origText)) -->Line_28 $$ final PsiComment newComment = elementGenerator.createFromText(LanguageLevel.forElement(comment), PsiComment.class, newText)[ CD ]
Line_21 $$ newText = "# " + commentTextWithoutDash-->Line_25 $$ if (!newText.equals(origText)) [ FD ]
Line_21 $$ newText = "# " + commentTextWithoutDash-->Line_26 $$ myDelta += newText.length() - origText.length()[ FD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_28 $$ final PsiComment newComment = elementGenerator.createFromText(LanguageLevel.forElement(comment), PsiComment.class, newText)[ FD ]
Line_10 $$ if (charAfterDash == '!' && comment.getTextRange().getStartOffset() == 0) -->Line_11 $$ return[ CD ]
Line_16 $$ final String commentTextWithoutDash = origText.substring(commentStart + 1)-->Line_21 $$ newText = "# " + commentTextWithoutDash[ FD ]
Line_8 $$ if (commentStart != -1 && (commentStart + 1) < origText.length()) -->Line_18 $$ if (isTrailingComment(comment)) [ CD ]
Line_17 $$ final String newText-->Line_26 $$ myDelta += newText.length() - origText.length()[ FD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_3 $$ if (!myRange.contains(comment.getTextRange())) [ FD ]
Line_25 $$ if (!newText.equals(origText)) -->Line_29 $$ myCommentReplacements.add(Couple.of(comment, newComment))[ CD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_7 $$ final int commentStart = origText.indexOf('#')[ CD ]
Line_21 $$ newText = "# " + commentTextWithoutDash-->Line_28 $$ final PsiComment newComment = elementGenerator.createFromText(LanguageLevel.forElement(comment), PsiComment.class, newText)[ FD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_6 $$ final String origText = comment.getText()[ FD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_29 $$ myCommentReplacements.add(Couple.of(comment, newComment))[ FD ]
Line_8 $$ if (commentStart != -1 && (commentStart + 1) < origText.length()) -->Line_16 $$ final String commentTextWithoutDash = origText.substring(commentStart + 1)[ CD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_6 $$ final String origText = comment.getText()[ CD ]
Line_18 $$ if (isTrailingComment(comment)) -->Line_19 $$ newText = "# " + StringUtil.trimLeading(commentTextWithoutDash)[ CD ]
Line_17 $$ final String newText-->Line_21 $$ newText = "# " + commentTextWithoutDash[ FD ]
Line_8 $$ if (commentStart != -1 && (commentStart + 1) < origText.length()) -->Line_13 $$ if (charAfterDash == '#' || charAfterDash == ':') [ CD ]
