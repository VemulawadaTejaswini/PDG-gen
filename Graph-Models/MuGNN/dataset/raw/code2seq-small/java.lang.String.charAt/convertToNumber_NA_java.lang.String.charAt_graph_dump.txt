Line_2 $$ private static int convertToNumber(String ver) -->Line_26 $$ return Integer.parseInt(ver.substring(parseBegin, parseEnd))[ FD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_18 $$ int parseEnd = parseBegin[ CD ]
Line_8 $$ final int quoteEnd = ver.indexOf('\"', quoteBegin + 1)-->Line_10 $$ ver = ver.substring(quoteBegin + 1, quoteEnd)[ FD ]
Line_19 $$ while (parseEnd < ver.length()) -->Line_20 $$ if (!Character.isDigit(ver.charAt(parseEnd))) [ CD ]
Line_6 $$ final int quoteBegin = ver.indexOf('\"')-->Line_7 $$ if (quoteBegin >= 0) [ FD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_17 $$ final int parseBegin = ver.startsWith(prefix) ? prefix.length() : 0[ FD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_13 $$ if (ver.isEmpty()) [ CD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_7 $$ if (quoteBegin >= 0) [ CD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_6 $$ final int quoteBegin = ver.indexOf('\"')[ CD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_8 $$ final int quoteEnd = ver.indexOf('\"', quoteBegin + 1)[ FD ]
Line_16 $$ final String prefix = "1."-->Line_17 $$ final int parseBegin = ver.startsWith(prefix) ? prefix.length() : 0[ FD ]
Line_10 $$ ver = ver.substring(quoteBegin + 1, quoteEnd)-->Line_17 $$ final int parseBegin = ver.startsWith(prefix) ? prefix.length() : 0[ FD ]
Line_18 $$ int parseEnd = parseBegin-->Line_20 $$ if (!Character.isDigit(ver.charAt(parseEnd))) [ FD ]
Line_13 $$ if (ver.isEmpty()) -->Line_14 $$ return 0[ CD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_13 $$ if (ver.isEmpty()) [ FD ]
Line_8 $$ final int quoteEnd = ver.indexOf('\"', quoteBegin + 1)-->Line_9 $$ if (quoteEnd > quoteBegin) [ FD ]
Line_3 $$ if (ver == null) -->Line_4 $$ return 0[ CD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_19 $$ while (parseEnd < ver.length()) [ CD ]
Line_19 $$ while (parseEnd < ver.length()) -->Line_23 $$ parseEnd++[ CD ]
Line_6 $$ final int quoteBegin = ver.indexOf('\"')-->Line_9 $$ if (quoteEnd > quoteBegin) [ FD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_19 $$ while (parseEnd < ver.length()) [ FD ]
Line_10 $$ ver = ver.substring(quoteBegin + 1, quoteEnd)-->Line_19 $$ while (parseEnd < ver.length()) [ FD ]
Line_10 $$ ver = ver.substring(quoteBegin + 1, quoteEnd)-->Line_26 $$ return Integer.parseInt(ver.substring(parseBegin, parseEnd))[ FD ]
Line_10 $$ ver = ver.substring(quoteBegin + 1, quoteEnd)-->Line_20 $$ if (!Character.isDigit(ver.charAt(parseEnd))) [ FD ]
Line_7 $$ if (quoteBegin >= 0) -->Line_9 $$ if (quoteEnd > quoteBegin) [ CD ]
Line_9 $$ if (quoteEnd > quoteBegin) -->Line_10 $$ ver = ver.substring(quoteBegin + 1, quoteEnd)[ CD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_6 $$ final int quoteBegin = ver.indexOf('\"')[ FD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_20 $$ if (!Character.isDigit(ver.charAt(parseEnd))) [ FD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_3 $$ if (ver == null) [ CD ]
Line_17 $$ final int parseBegin = ver.startsWith(prefix) ? prefix.length() : 0-->Line_26 $$ return Integer.parseInt(ver.substring(parseBegin, parseEnd))[ FD ]
Line_10 $$ ver = ver.substring(quoteBegin + 1, quoteEnd)-->Line_13 $$ if (ver.isEmpty()) [ FD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_17 $$ final int parseBegin = ver.startsWith(prefix) ? prefix.length() : 0[ CD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_10 $$ ver = ver.substring(quoteBegin + 1, quoteEnd)[ FD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_29 $$ return 0[ CD ]
Line_18 $$ int parseEnd = parseBegin-->Line_26 $$ return Integer.parseInt(ver.substring(parseBegin, parseEnd))[ FD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_3 $$ if (ver == null) [ FD ]
Line_7 $$ if (quoteBegin >= 0) -->Line_8 $$ final int quoteEnd = ver.indexOf('\"', quoteBegin + 1)[ CD ]
Line_18 $$ int parseEnd = parseBegin-->Line_19 $$ while (parseEnd < ver.length()) [ FD ]
Line_2 $$ private static int convertToNumber(String ver) -->Line_16 $$ final String prefix = "1."[ CD ]
Line_18 $$ int parseEnd = parseBegin-->Line_23 $$ parseEnd++[ FD ]
