Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull final PsiClass aClass, @NotNull final InspectionManager manager, final boolean isOnTheFly) -->Line_4 $$ final Project project = aClass.getProject()[ FD ]
Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) -->Line_8 $$ final String packageQName = StringUtil.getPackageName(qName)[ CD ]
Line_10 $$ for (int i = 0; i < qName.length(); i++) -->Line_12 $$ names.add(qName.substring(0, i))[ FD ]
Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) -->Line_5 $$ final String qName = aClass.getQualifiedName()[ CD ]
Line_17 $$ for (final String name : names) -->Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() [ FD ]
Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) -->Line_9 $$ final List<String> names = new ArrayList<String>()[ CD ]
Line_9 $$ final List<String> names = new ArrayList<String>()-->Line_16 $$ Collections.reverse(names)[ FD ]
Line_31 $$ final String value = attribute.getValue()-->Line_32 $$ if (value == null)[ FD ]
Line_31 $$ final String value = attribute.getValue()-->Line_34 $$ if (!value.endsWith(".*") && !value.equals(packageQName))[ FD ]
Line_24 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), XmlTag.class)-->Line_25 $$ if (tag == null || !tag.getName().equals("package")) [ FD ]
Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) -->Line_47 $$ LOG.assertTrue(nameIdentifier != null)[ CD ]
Line_22 $$ if (file.findReferenceAt(startOffset) != null) -->Line_37 $$ found[0] = true[ CD ]
Line_5 $$ final String qName = aClass.getQualifiedName()-->Line_6 $$ if (qName == null)[ FD ]
Line_34 $$ if (!value.endsWith(".*") && !value.equals(packageQName))-->Line_35 $$ return true[ CD ]
Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) -->Line_16 $$ Collections.reverse(names)[ CD ]
Line_43 $$ if (found[0])-->Line_44 $$ return null[ CD ]
Line_32 $$ if (value == null)-->Line_33 $$ return true[ CD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull final PsiClass aClass, @NotNull final InspectionManager manager, final boolean isOnTheFly) -->Line_48 $$ return new ProblemDescriptor[] [ FD ]
Line_22 $$ if (file.findReferenceAt(startOffset) != null) -->Line_38 $$ return false[ CD ]
Line_18 $$ final boolean isFullName = qName.equals(name)-->Line_23 $$ if (!isFullName) [ FD ]
Line_4 $$ final Project project = aClass.getProject()-->Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() [ FD ]
Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) -->Line_48 $$ return new ProblemDescriptor[] [ CD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull final PsiClass aClass, @NotNull final InspectionManager manager, final boolean isOnTheFly) -->Line_46 $$ final PsiIdentifier nameIdentifier = aClass.getNameIdentifier()[ FD ]
Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) -->Line_46 $$ final PsiIdentifier nameIdentifier = aClass.getNameIdentifier()[ CD ]
Line_6 $$ if (qName == null)-->Line_7 $$ return null[ CD ]
Line_9 $$ final List<String> names = new ArrayList<String>()-->Line_12 $$ names.add(qName.substring(0, i))[ FD ]
Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) -->Line_4 $$ final Project project = aClass.getProject()[ CD ]
Line_23 $$ if (!isFullName) -->Line_24 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), XmlTag.class)[ CD ]
Line_5 $$ final String qName = aClass.getQualifiedName()-->Line_8 $$ final String packageQName = StringUtil.getPackageName(qName)[ FD ]
Line_10 $$ for (int i = 0; i < qName.length(); i++) -->Line_11 $$ if (qName.charAt(i) == '.') [ CD ]
Line_24 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), XmlTag.class)-->Line_28 $$ final XmlAttribute attribute = tag.getAttribute("name")[ FD ]
Line_10 $$ for (int i = 0; i < qName.length(); i++) -->Line_11 $$ if (qName.charAt(i) == '.') [ FD ]
Line_23 $$ if (!isFullName) -->Line_31 $$ final String value = attribute.getValue()[ CD ]
Line_29 $$ if (attribute == null)-->Line_30 $$ return true[ CD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull final PsiClass aClass, @NotNull final InspectionManager manager, final boolean isOnTheFly) -->Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) [ FD ]
Line_5 $$ final String qName = aClass.getQualifiedName()-->Line_12 $$ names.add(qName.substring(0, i))[ FD ]
Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() -->Line_22 $$ if (file.findReferenceAt(startOffset) != null) [ FD ]
Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) -->Line_15 $$ names.add(qName)[ CD ]
Line_23 $$ if (!isFullName) -->Line_29 $$ if (attribute == null)[ CD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull final PsiClass aClass, @NotNull final InspectionManager manager, final boolean isOnTheFly) -->Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) [ CD ]
Line_19 $$ final boolean[] found = new boolean[] -->Line_43 $$ if (found[0])[ FD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull final PsiClass aClass, @NotNull final InspectionManager manager, final boolean isOnTheFly) -->Line_50 $$ return null[ CD ]
Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) -->Line_6 $$ if (qName == null)[ CD ]
Line_28 $$ final XmlAttribute attribute = tag.getAttribute("name")-->Line_29 $$ if (attribute == null)[ FD ]
Line_23 $$ if (!isFullName) -->Line_34 $$ if (!value.endsWith(".*") && !value.equals(packageQName))[ CD ]
Line_25 $$ if (tag == null || !tag.getName().equals("package")) -->Line_26 $$ return true[ CD ]
Line_11 $$ if (qName.charAt(i) == '.') -->Line_12 $$ names.add(qName.substring(0, i))[ CD ]
Line_23 $$ if (!isFullName) -->Line_32 $$ if (value == null)[ CD ]
Line_5 $$ final String qName = aClass.getQualifiedName()-->Line_18 $$ final boolean isFullName = qName.equals(name)[ FD ]
Line_23 $$ if (!isFullName) -->Line_25 $$ if (tag == null || !tag.getName().equals("package")) [ CD ]
Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() -->Line_40 $$ return true[ CD ]
Line_5 $$ final String qName = aClass.getQualifiedName()-->Line_10 $$ for (int i = 0; i < qName.length(); i++) [ FD ]
Line_22 $$ if (file.findReferenceAt(startOffset) != null) -->Line_23 $$ if (!isFullName) [ CD ]
Line_5 $$ final String qName = aClass.getQualifiedName()-->Line_11 $$ if (qName.charAt(i) == '.') [ FD ]
Line_23 $$ if (!isFullName) -->Line_28 $$ final XmlAttribute attribute = tag.getAttribute("name")[ CD ]
Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() -->Line_22 $$ if (file.findReferenceAt(startOffset) != null) [ CD ]
Line_5 $$ final String qName = aClass.getQualifiedName()-->Line_15 $$ names.add(qName)[ FD ]
Line_17 $$ for (final String name : names) -->Line_18 $$ final boolean isFullName = qName.equals(name)[ FD ]
Line_8 $$ final String packageQName = StringUtil.getPackageName(qName)-->Line_34 $$ if (!value.endsWith(".*") && !value.equals(packageQName))[ FD ]
Line_9 $$ final List<String> names = new ArrayList<String>()-->Line_15 $$ names.add(qName)[ FD ]
Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() -->Line_24 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), XmlTag.class)[ FD ]
Line_3 $$ if (TestNGUtil.hasTest(aClass) && PsiClassUtil.isRunnableClass(aClass, true)) -->Line_10 $$ for (int i = 0; i < qName.length(); i++) [ CD ]
Line_28 $$ final XmlAttribute attribute = tag.getAttribute("name")-->Line_31 $$ final String value = attribute.getValue()[ FD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull final PsiClass aClass, @NotNull final InspectionManager manager, final boolean isOnTheFly) -->Line_5 $$ final String qName = aClass.getQualifiedName()[ FD ]
