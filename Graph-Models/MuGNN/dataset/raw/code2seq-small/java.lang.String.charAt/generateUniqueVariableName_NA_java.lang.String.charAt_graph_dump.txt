Line_5 $$ shortName = className.substring("javax.swing.J".length())-->Line_9 $$ shortName = className.substring(idx + 1)[ FD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_22 $$ return result[ CD ]
Line_16 $$ String result-->Line_17 $$ do [ FD ]
Line_3 $$ final String shortName-->Line_5 $$ shortName = className.substring("javax.swing.J".length())[ FD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_9 $$ shortName = className.substring(idx + 1)[ FD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_17 $$ do [ CD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_11 $$ shortName = className[ FD ]
Line_8 $$ if (idx != -1) -->Line_9 $$ shortName = className.substring(idx + 1)[ CD ]
Line_3 $$ final String shortName-->Line_11 $$ shortName = className[ FD ]
Line_9 $$ shortName = className.substring(idx + 1)-->Line_11 $$ shortName = className[ FD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_15 $$ class2variableIndex.put(className, 0)[ FD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_4 $$ if (className.startsWith("javax.swing.J")) [ CD ]
Line_7 $$ final int idx = className.lastIndexOf('.')-->Line_8 $$ if (idx != -1) [ FD ]
Line_4 $$ if (className.startsWith("javax.swing.J")) -->Line_5 $$ shortName = className.substring("javax.swing.J".length())[ CD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_3 $$ final String shortName[ CD ]
Line_4 $$ if (className.startsWith("javax.swing.J")) -->Line_8 $$ if (idx != -1) [ CD ]
Line_9 $$ shortName = className.substring(idx + 1)-->Line_20 $$ result = Character.toLowerCase(shortName.charAt(0)) + shortName.substring(1) + newIndex[ FD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_17 $$ do [ FD ]
Line_5 $$ shortName = className.substring("javax.swing.J".length())-->Line_11 $$ shortName = className[ FD ]
Line_17 $$ do -->Line_18 $$ class2variableIndex.increment(className)[ CD ]
Line_17 $$ do -->Line_20 $$ result = Character.toLowerCase(shortName.charAt(0)) + shortName.substring(1) + newIndex[ CD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_7 $$ final int idx = className.lastIndexOf('.')[ FD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_4 $$ if (className.startsWith("javax.swing.J")) [ FD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_18 $$ class2variableIndex.increment(className)[ FD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_16 $$ String result[ CD ]
Line_16 $$ String result-->Line_20 $$ result = Character.toLowerCase(shortName.charAt(0)) + shortName.substring(1) + newIndex[ FD ]
Line_8 $$ if (idx != -1) -->Line_11 $$ shortName = className[ CD ]
Line_14 $$ if (!class2variableIndex.containsKey(className))-->Line_15 $$ class2variableIndex.put(className, 0)[ CD ]
Line_3 $$ final String shortName-->Line_20 $$ result = Character.toLowerCase(shortName.charAt(0)) + shortName.substring(1) + newIndex[ FD ]
Line_3 $$ final String shortName-->Line_9 $$ shortName = className.substring(idx + 1)[ FD ]
Line_5 $$ shortName = className.substring("javax.swing.J".length())-->Line_20 $$ result = Character.toLowerCase(shortName.charAt(0)) + shortName.substring(1) + newIndex[ FD ]
Line_19 $$ int newIndex = class2variableIndex.get(className)-->Line_20 $$ result = Character.toLowerCase(shortName.charAt(0)) + shortName.substring(1) + newIndex[ FD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_14 $$ if (!class2variableIndex.containsKey(className))[ FD ]
Line_11 $$ shortName = className-->Line_20 $$ result = Character.toLowerCase(shortName.charAt(0)) + shortName.substring(1) + newIndex[ FD ]
Line_20 $$ result = Character.toLowerCase(shortName.charAt(0)) + shortName.substring(1) + newIndex-->Line_17 $$ do [ FD ]
Line_4 $$ if (className.startsWith("javax.swing.J")) -->Line_7 $$ final int idx = className.lastIndexOf('.')[ CD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_14 $$ if (!class2variableIndex.containsKey(className))[ CD ]
Line_17 $$ do -->Line_19 $$ int newIndex = class2variableIndex.get(className)[ CD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_5 $$ shortName = className.substring("javax.swing.J".length())[ FD ]
Line_2 $$ private static String generateUniqueVariableName(@NonNls final String className, final TObjectIntHashMap<String> class2variableIndex, final PsiClass aClass) -->Line_19 $$ int newIndex = class2variableIndex.get(className)[ FD ]
