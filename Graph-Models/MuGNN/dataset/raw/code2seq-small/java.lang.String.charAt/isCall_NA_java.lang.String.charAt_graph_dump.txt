Line_2 $$ private static boolean isCall(@NotNull PsiBuilder builder) -->Line_8 $$ if (StringUtil.isEmpty(text))[ CD ]
Line_2 $$ private static boolean isCall(@NotNull PsiBuilder builder) -->Line_5 $$ if (TokenSets.BUILT_IN_TYPES.contains(builder.getTokenType()))[ CD ]
Line_2 $$ private static boolean isCall(@NotNull PsiBuilder builder) -->Line_11 $$ final char firstChar = text.charAt(0)[ CD ]
Line_8 $$ if (StringUtil.isEmpty(text))-->Line_9 $$ return false[ CD ]
Line_11 $$ final char firstChar = text.charAt(0)-->Line_12 $$ return (Character.isLowerCase(firstChar) || !Character.isLetter(firstChar)) && (ParserUtils.lookAhead(builder, GroovyTokenTypes.mIDENT, GroovyTokenTypes.mIDENT) || ParserUtils.lookAhead(builder, GroovyTokenTypes.mIDENT, GroovyTokenTypes.mLPAREN))[ FD ]
Line_7 $$ final String text = builder.getTokenText()-->Line_11 $$ final char firstChar = text.charAt(0)[ FD ]
Line_3 $$ if (builder.eof())-->Line_4 $$ return false[ CD ]
Line_5 $$ if (TokenSets.BUILT_IN_TYPES.contains(builder.getTokenType()))-->Line_6 $$ return false[ CD ]
Line_7 $$ final String text = builder.getTokenText()-->Line_8 $$ if (StringUtil.isEmpty(text))[ FD ]
Line_2 $$ private static boolean isCall(@NotNull PsiBuilder builder) -->Line_12 $$ return (Character.isLowerCase(firstChar) || !Character.isLetter(firstChar)) && (ParserUtils.lookAhead(builder, GroovyTokenTypes.mIDENT, GroovyTokenTypes.mIDENT) || ParserUtils.lookAhead(builder, GroovyTokenTypes.mIDENT, GroovyTokenTypes.mLPAREN))[ CD ]
Line_2 $$ private static boolean isCall(@NotNull PsiBuilder builder) -->Line_3 $$ if (builder.eof())[ CD ]
Line_2 $$ private static boolean isCall(@NotNull PsiBuilder builder) -->Line_7 $$ final String text = builder.getTokenText()[ FD ]
Line_2 $$ private static boolean isCall(@NotNull PsiBuilder builder) -->Line_7 $$ final String text = builder.getTokenText()[ CD ]
Line_2 $$ private static boolean isCall(@NotNull PsiBuilder builder) -->Line_3 $$ if (builder.eof())[ FD ]
Line_2 $$ private static boolean isCall(@NotNull PsiBuilder builder) -->Line_12 $$ return (Character.isLowerCase(firstChar) || !Character.isLetter(firstChar)) && (ParserUtils.lookAhead(builder, GroovyTokenTypes.mIDENT, GroovyTokenTypes.mIDENT) || ParserUtils.lookAhead(builder, GroovyTokenTypes.mIDENT, GroovyTokenTypes.mLPAREN))[ FD ]
Line_2 $$ private static boolean isCall(@NotNull PsiBuilder builder) -->Line_5 $$ if (TokenSets.BUILT_IN_TYPES.contains(builder.getTokenType()))[ FD ]
