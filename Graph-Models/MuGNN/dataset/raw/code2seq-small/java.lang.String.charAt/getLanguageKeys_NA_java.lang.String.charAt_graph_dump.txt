Line_9 $$ if (groupCount == 2) -->Line_10 $$ String languageKey = matcher.group(2)[ CD ]
Line_15 $$ String match = matcher.group()-->Line_18 $$ char c = match.charAt(i)[ FD ]
Line_2 $$ protected String[] getLanguageKeys(Matcher matcher) -->Line_14 $$ StringBundler sb = new StringBundler()[ CD ]
Line_15 $$ String match = matcher.group()-->Line_17 $$ for (int i = 0; i < match.length(); i++) [ FD ]
Line_16 $$ int count = 0-->Line_27 $$ count++[ FD ]
Line_17 $$ for (int i = 0; i < match.length(); i++) -->Line_43 $$ sb.append(match.charAt(i))[ FD ]
Line_2 $$ protected String[] getLanguageKeys(Matcher matcher) -->Line_15 $$ String match = matcher.group()[ CD ]
Line_2 $$ protected String[] getLanguageKeys(Matcher matcher) -->Line_5 $$ String languageKey = matcher.group(1)[ FD ]
Line_33 $$ while (i < match.length()) -->Line_34 $$ i++[ CD ]
Line_15 $$ String match = matcher.group()-->Line_33 $$ while (i < match.length()) [ FD ]
Line_2 $$ protected String[] getLanguageKeys(Matcher matcher) -->Line_3 $$ int groupCount = matcher.groupCount()[ FD ]
Line_5 $$ String languageKey = matcher.group(1)-->Line_11 $$ languageKey = TextFormatter.format(languageKey, TextFormatter.P)[ FD ]
Line_2 $$ protected String[] getLanguageKeys(Matcher matcher) -->Line_10 $$ String languageKey = matcher.group(2)[ FD ]
Line_17 $$ for (int i = 0; i < match.length(); i++) -->Line_33 $$ while (i < match.length()) [ FD ]
Line_15 $$ String match = matcher.group()-->Line_37 $$ if (match.startsWith("names")) [ FD ]
Line_17 $$ for (int i = 0; i < match.length(); i++) -->Line_34 $$ i++[ FD ]
Line_17 $$ for (int i = 0; i < match.length(); i++) -->Line_18 $$ char c = match.charAt(i)[ FD ]
Line_4 $$ if (groupCount == 1) -->Line_5 $$ String languageKey = matcher.group(1)[ CD ]
Line_36 $$ String languageKey = sb.toString()-->Line_38 $$ return StringUtil.split(languageKey)[ FD ]
Line_21 $$ if (count <= 1) -->Line_22 $$ return new String[0][ CD ]
Line_37 $$ if (match.startsWith("names")) -->Line_40 $$ return new String[] [ CD ]
Line_4 $$ if (groupCount == 1) -->Line_6 $$ if (Validator.isNotNull(languageKey)) [ CD ]
Line_17 $$ for (int i = 0; i < match.length(); i++) -->Line_18 $$ char c = match.charAt(i)[ CD ]
Line_5 $$ String languageKey = matcher.group(1)-->Line_6 $$ if (Validator.isNotNull(languageKey)) [ FD ]
Line_16 $$ int count = 0-->Line_21 $$ if (count <= 1) [ FD ]
Line_11 $$ languageKey = TextFormatter.format(languageKey, TextFormatter.P)-->Line_38 $$ return StringUtil.split(languageKey)[ FD ]
Line_2 $$ protected String[] getLanguageKeys(Matcher matcher) -->Line_47 $$ return new String[0][ CD ]
Line_15 $$ String match = matcher.group()-->Line_43 $$ sb.append(match.charAt(i))[ FD ]
Line_2 $$ protected String[] getLanguageKeys(Matcher matcher) -->Line_15 $$ String match = matcher.group()[ FD ]
Line_2 $$ protected String[] getLanguageKeys(Matcher matcher) -->Line_16 $$ int count = 0[ CD ]
Line_2 $$ protected String[] getLanguageKeys(Matcher matcher) -->Line_3 $$ int groupCount = matcher.groupCount()[ CD ]
Line_14 $$ StringBundler sb = new StringBundler()-->Line_36 $$ String languageKey = sb.toString()[ FD ]
Line_3 $$ int groupCount = matcher.groupCount()-->Line_9 $$ if (groupCount == 2) [ FD ]
Line_6 $$ if (Validator.isNotNull(languageKey)) -->Line_7 $$ return new String[] [ CD ]
Line_33 $$ while (i < match.length()) -->Line_35 $$ if (match.charAt(i) == CharPool.QUOTE) [ CD ]
Line_35 $$ if (match.charAt(i) == CharPool.QUOTE) -->Line_37 $$ if (match.startsWith("names")) [ CD ]
Line_14 $$ StringBundler sb = new StringBundler()-->Line_43 $$ sb.append(match.charAt(i))[ FD ]
Line_17 $$ for (int i = 0; i < match.length(); i++) -->Line_35 $$ if (match.charAt(i) == CharPool.QUOTE) [ FD ]
Line_2 $$ protected String[] getLanguageKeys(Matcher matcher) -->Line_17 $$ for (int i = 0; i < match.length(); i++) [ CD ]
Line_37 $$ if (match.startsWith("names")) -->Line_38 $$ return StringUtil.split(languageKey)[ CD ]
Line_16 $$ int count = 0-->Line_24 $$ count--[ FD ]
Line_33 $$ while (i < match.length()) -->Line_43 $$ sb.append(match.charAt(i))[ CD ]
Line_16 $$ int count = 0-->Line_30 $$ if (count > 1) [ FD ]
Line_5 $$ String languageKey = matcher.group(1)-->Line_38 $$ return StringUtil.split(languageKey)[ FD ]
Line_9 $$ if (groupCount == 2) -->Line_11 $$ languageKey = TextFormatter.format(languageKey, TextFormatter.P)[ CD ]
Line_35 $$ if (match.charAt(i) == CharPool.QUOTE) -->Line_36 $$ String languageKey = sb.toString()[ CD ]
Line_4 $$ if (groupCount == 1) -->Line_9 $$ if (groupCount == 2) [ CD ]
Line_3 $$ int groupCount = matcher.groupCount()-->Line_4 $$ if (groupCount == 1) [ FD ]
Line_9 $$ if (groupCount == 2) -->Line_12 $$ return new String[] [ CD ]
Line_15 $$ String match = matcher.group()-->Line_35 $$ if (match.charAt(i) == CharPool.QUOTE) [ FD ]
Line_2 $$ protected String[] getLanguageKeys(Matcher matcher) -->Line_4 $$ if (groupCount == 1) [ CD ]
