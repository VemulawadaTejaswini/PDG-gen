Line_2 $$ private static BigInteger bigForString(String str, int sigchars) -->Line_5 $$ for (int i = 0; i < str.length(); i++) [ FD ]
Line_5 $$ for (int i = 0; i < str.length(); i++) -->Line_6 $$ int charpos = 16 * (sigchars - (i + 1))[ CD ]
Line_4 $$ BigInteger big = BigInteger.ZERO-->Line_8 $$ big = big.or(charbig.shiftLeft(charpos))[ FD ]
Line_7 $$ BigInteger charbig = BigInteger.valueOf(str.charAt(i) & 0xFFFF)-->Line_8 $$ big = big.or(charbig.shiftLeft(charpos))[ FD ]
Line_2 $$ private static BigInteger bigForString(String str, int sigchars) -->Line_5 $$ for (int i = 0; i < str.length(); i++) [ CD ]
Line_2 $$ private static BigInteger bigForString(String str, int sigchars) -->Line_10 $$ return big[ CD ]
Line_5 $$ for (int i = 0; i < str.length(); i++) -->Line_8 $$ big = big.or(charbig.shiftLeft(charpos))[ CD ]
Line_2 $$ private static BigInteger bigForString(String str, int sigchars) -->Line_3 $$ assert str.length() <= sigchars[ FD ]
Line_6 $$ int charpos = 16 * (sigchars - (i + 1))-->Line_8 $$ big = big.or(charbig.shiftLeft(charpos))[ FD ]
Line_2 $$ private static BigInteger bigForString(String str, int sigchars) -->Line_4 $$ BigInteger big = BigInteger.ZERO[ CD ]
Line_5 $$ for (int i = 0; i < str.length(); i++) -->Line_7 $$ BigInteger charbig = BigInteger.valueOf(str.charAt(i) & 0xFFFF)[ CD ]
Line_2 $$ private static BigInteger bigForString(String str, int sigchars) -->Line_7 $$ BigInteger charbig = BigInteger.valueOf(str.charAt(i) & 0xFFFF)[ FD ]
Line_5 $$ for (int i = 0; i < str.length(); i++) -->Line_7 $$ BigInteger charbig = BigInteger.valueOf(str.charAt(i) & 0xFFFF)[ FD ]
