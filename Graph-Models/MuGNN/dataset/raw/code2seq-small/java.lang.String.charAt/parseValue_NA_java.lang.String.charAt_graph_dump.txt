Line_2 $$ private static String parseValue(final String arg, final String key) -->Line_5 $$ if (arg.length() <= splitPos + 1 || arg.charAt(splitPos) != '=') [ FD ]
Line_5 $$ if (arg.length() <= splitPos + 1 || arg.charAt(splitPos) != '=') -->Line_8 $$ value = arg.substring(splitPos + 1)[ CD ]
Line_3 $$ String value = null-->Line_8 $$ value = arg.substring(splitPos + 1)[ FD ]
Line_2 $$ private static String parseValue(final String arg, final String key) -->Line_10 $$ return value[ CD ]
Line_2 $$ private static String parseValue(final String arg, final String key) -->Line_8 $$ value = arg.substring(splitPos + 1)[ FD ]
Line_4 $$ int splitPos = key.length()-->Line_5 $$ if (arg.length() <= splitPos + 1 || arg.charAt(splitPos) != '=') [ FD ]
Line_2 $$ private static String parseValue(final String arg, final String key) -->Line_4 $$ int splitPos = key.length()[ CD ]
Line_5 $$ if (arg.length() <= splitPos + 1 || arg.charAt(splitPos) != '=') -->Line_6 $$ usage()[ CD ]
Line_2 $$ private static String parseValue(final String arg, final String key) -->Line_4 $$ int splitPos = key.length()[ FD ]
Line_2 $$ private static String parseValue(final String arg, final String key) -->Line_5 $$ if (arg.length() <= splitPos + 1 || arg.charAt(splitPos) != '=') [ CD ]
Line_2 $$ private static String parseValue(final String arg, final String key) -->Line_3 $$ String value = null[ CD ]
