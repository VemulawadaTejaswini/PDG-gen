Line_8 $$ name = name.substring(1)-->Line_10 $$ int index = name.indexOf(PATH_SEPARATOR)[ FD ]
Line_6 $$ String name = n.getNetworkLocation().substring(getPath(this).length())-->Line_7 $$ if (name.charAt(0) == PATH_SEPARATOR) [ FD ]
Line_11 $$ if (index != -1)-->Line_12 $$ name = name.substring(0, index)[ CD ]
Line_2 $$ private String getNextAncestorName(Node n) -->Line_3 $$ if (!isAncestor(n)) [ FD ]
Line_2 $$ private String getNextAncestorName(Node n) -->Line_11 $$ if (index != -1)[ CD ]
Line_8 $$ name = name.substring(1)-->Line_12 $$ name = name.substring(0, index)[ FD ]
Line_6 $$ String name = n.getNetworkLocation().substring(getPath(this).length())-->Line_12 $$ name = name.substring(0, index)[ FD ]
Line_6 $$ String name = n.getNetworkLocation().substring(getPath(this).length())-->Line_8 $$ name = name.substring(1)[ FD ]
Line_2 $$ private String getNextAncestorName(Node n) -->Line_6 $$ String name = n.getNetworkLocation().substring(getPath(this).length())[ CD ]
Line_6 $$ String name = n.getNetworkLocation().substring(getPath(this).length())-->Line_10 $$ int index = name.indexOf(PATH_SEPARATOR)[ FD ]
Line_2 $$ private String getNextAncestorName(Node n) -->Line_10 $$ int index = name.indexOf(PATH_SEPARATOR)[ CD ]
Line_2 $$ private String getNextAncestorName(Node n) -->Line_6 $$ String name = n.getNetworkLocation().substring(getPath(this).length())[ FD ]
Line_7 $$ if (name.charAt(0) == PATH_SEPARATOR) -->Line_8 $$ name = name.substring(1)[ CD ]
Line_2 $$ private String getNextAncestorName(Node n) -->Line_3 $$ if (!isAncestor(n)) [ CD ]
Line_2 $$ private String getNextAncestorName(Node n) -->Line_7 $$ if (name.charAt(0) == PATH_SEPARATOR) [ CD ]
Line_2 $$ private String getNextAncestorName(Node n) -->Line_13 $$ return name[ CD ]
Line_10 $$ int index = name.indexOf(PATH_SEPARATOR)-->Line_12 $$ name = name.substring(0, index)[ FD ]
Line_10 $$ int index = name.indexOf(PATH_SEPARATOR)-->Line_11 $$ if (index != -1)[ FD ]
