Line_19 $$ int start = length - i - 2-->Line_20 $$ if (start >= 0) [ FD ]
Line_3 $$ int charLength = s.length()-->Line_6 $$ for (int j = i; j < charLength; ++j) [ FD ]
Line_27 $$ int len = length-->Line_35 $$ data[len++] = (byte) (0x80 | c & 0x3F)[ FD ]
Line_11 $$ byteLength += 3-->Line_16 $$ if (byteLength > maxByteLength) [ FD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_42 $$ return this[ CD ]
Line_11 $$ byteLength += 3-->Line_9 $$ byteLength++[ FD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_29 $$ c = s.charAt(j)[ FD ]
Line_32 $$ if (c > '߿') -->Line_35 $$ data[len++] = (byte) (0x80 | c & 0x3F)[ CD ]
Line_13 $$ byteLength += 2-->Line_9 $$ byteLength++[ FD ]
Line_10 $$ if (c > '߿') -->Line_11 $$ byteLength += 3[ CD ]
Line_28 $$ for (int j = i; j < charLength; ++j) -->Line_29 $$ c = s.charAt(j)[ FD ]
Line_8 $$ if (c >= '\001' && c <= '\177') -->Line_9 $$ byteLength++[ CD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_27 $$ int len = length[ CD ]
Line_32 $$ if (c > '߿') -->Line_37 $$ data[len++] = (byte) (0xC0 | c >> 6 & 0x1F)[ CD ]
Line_13 $$ byteLength += 2-->Line_16 $$ if (byteLength > maxByteLength) [ FD ]
Line_27 $$ int len = length-->Line_34 $$ data[len++] = (byte) (0x80 | c >> 6 & 0x3F)[ FD ]
Line_5 $$ char c-->Line_29 $$ c = s.charAt(j)[ FD ]
Line_4 $$ int byteLength = i-->Line_13 $$ byteLength += 2[ FD ]
Line_32 $$ if (c > '߿') -->Line_33 $$ data[len++] = (byte) (0xE0 | c >> 12 & 0xF)[ CD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_3 $$ int charLength = s.length()[ FD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_7 $$ c = s.charAt(j)[ FD ]
Line_30 $$ if (c >= '\001' && c <= '\177') -->Line_32 $$ if (c > '߿') [ CD ]
Line_6 $$ for (int j = i; j < charLength; ++j) -->Line_28 $$ for (int j = i; j < charLength; ++j) [ FD ]
Line_4 $$ int byteLength = i-->Line_9 $$ byteLength++[ FD ]
Line_27 $$ int len = length-->Line_37 $$ data[len++] = (byte) (0xC0 | c >> 6 & 0x1F)[ FD ]
Line_32 $$ if (c > '߿') -->Line_38 $$ data[len++] = (byte) (0x80 | c & 0x3F)[ CD ]
Line_28 $$ for (int j = i; j < charLength; ++j) -->Line_30 $$ if (c >= '\001' && c <= '\177') [ CD ]
Line_28 $$ for (int j = i; j < charLength; ++j) -->Line_29 $$ c = s.charAt(j)[ CD ]
Line_4 $$ int byteLength = i-->Line_11 $$ byteLength += 3[ FD ]
Line_5 $$ char c-->Line_10 $$ if (c > '߿') [ FD ]
Line_6 $$ for (int j = i; j < charLength; ++j) -->Line_29 $$ c = s.charAt(j)[ FD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_5 $$ char c[ CD ]
Line_20 $$ if (start >= 0) -->Line_21 $$ data[start] = (byte) (byteLength >>> 8)[ CD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_24 $$ if (length + byteLength - i > data.length) [ CD ]
Line_27 $$ int len = length-->Line_33 $$ data[len++] = (byte) (0xE0 | c >> 12 & 0xF)[ FD ]
Line_7 $$ c = s.charAt(j)-->Line_10 $$ if (c > '߿') [ FD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_6 $$ for (int j = i; j < charLength; ++j) [ CD ]
Line_5 $$ char c-->Line_7 $$ c = s.charAt(j)[ FD ]
Line_7 $$ c = s.charAt(j)-->Line_29 $$ c = s.charAt(j)[ FD ]
Line_20 $$ if (start >= 0) -->Line_22 $$ data[start + 1] = (byte) byteLength[ CD ]
Line_27 $$ int len = length-->Line_31 $$ data[len++] = (byte) c[ FD ]
Line_8 $$ if (c >= '\001' && c <= '\177') -->Line_10 $$ if (c > '߿') [ CD ]
Line_3 $$ int charLength = s.length()-->Line_28 $$ for (int j = i; j < charLength; ++j) [ FD ]
Line_6 $$ for (int j = i; j < charLength; ++j) -->Line_7 $$ c = s.charAt(j)[ CD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_16 $$ if (byteLength > maxByteLength) [ CD ]
Line_29 $$ c = s.charAt(j)-->Line_32 $$ if (c > '߿') [ FD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_19 $$ int start = length - i - 2[ CD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_16 $$ if (byteLength > maxByteLength) [ FD ]
Line_24 $$ if (length + byteLength - i > data.length) -->Line_25 $$ enlarge(byteLength - i)[ CD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_4 $$ int byteLength = i[ CD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_20 $$ if (start >= 0) [ CD ]
Line_7 $$ c = s.charAt(j)-->Line_32 $$ if (c > '߿') [ FD ]
Line_32 $$ if (c > '߿') -->Line_34 $$ data[len++] = (byte) (0x80 | c >> 6 & 0x3F)[ CD ]
Line_30 $$ if (c >= '\001' && c <= '\177') -->Line_31 $$ data[len++] = (byte) c[ CD ]
Line_6 $$ for (int j = i; j < charLength; ++j) -->Line_7 $$ c = s.charAt(j)[ FD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_3 $$ int charLength = s.length()[ CD ]
Line_27 $$ int len = length-->Line_38 $$ data[len++] = (byte) (0x80 | c & 0x3F)[ FD ]
Line_10 $$ if (c > '߿') -->Line_13 $$ byteLength += 2[ CD ]
Line_4 $$ int byteLength = i-->Line_16 $$ if (byteLength > maxByteLength) [ FD ]
Line_5 $$ char c-->Line_32 $$ if (c > '߿') [ FD ]
Line_2 $$ ByteVector encodeUTF8(final String s, int i, int maxByteLength) -->Line_28 $$ for (int j = i; j < charLength; ++j) [ CD ]
Line_6 $$ for (int j = i; j < charLength; ++j) -->Line_8 $$ if (c >= '\001' && c <= '\177') [ CD ]
Line_11 $$ byteLength += 3-->Line_13 $$ byteLength += 2[ FD ]
