Line_8 $$ final PsiElement parent = element.getParent()-->Line_14 $$ final PsiElement pparent = parent.getParent()[ FD ]
Line_4 $$ String text = element.getContainingFile().getText()-->Line_6 $$ return i >= 0 && (text.charAt(i) == '\n' || text.charAt(i) == '[ FD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_15 $$ if (!(pparent instanceof GrVariableDeclaration))[ CD ]
Line_20 $$ if (variableDeclaration.getTypeElementGroovy() != null)-->Line_21 $$ return false[ CD ]
Line_17 $$ if (((GrVariableDeclaration) pparent).isTuple())-->Line_18 $$ return false[ CD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_4 $$ String text = element.getContainingFile().getText()[ FD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_5 $$ int i = CharArrayUtil.shiftBackward(text, element.getTextRange().getStartOffset() - 1, " \t")[ FD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_11 $$ if (acceptParameter && parent instanceof GrParameter) [ FD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_3 $$ if (element.getParent() instanceof GrTypeDefinitionBody && !(element instanceof PsiComment)) [ FD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_3 $$ if (element.getParent() instanceof GrTypeDefinitionBody && !(element instanceof PsiComment)) [ CD ]
Line_19 $$ final GrVariableDeclaration variableDeclaration = (GrVariableDeclaration) pparent-->Line_20 $$ if (variableDeclaration.getTypeElementGroovy() != null)[ FD ]
Line_3 $$ if (element.getParent() instanceof GrTypeDefinitionBody && !(element instanceof PsiComment)) -->Line_5 $$ int i = CharArrayUtil.shiftBackward(text, element.getTextRange().getStartOffset() - 1, " \t")[ CD ]
Line_11 $$ if (acceptParameter && parent instanceof GrParameter) -->Line_12 $$ return ((GrParameter) parent).getTypeElementGroovy() == null[ CD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_17 $$ if (((GrVariableDeclaration) pparent).isTuple())[ CD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_8 $$ final PsiElement parent = element.getParent()[ FD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_20 $$ if (variableDeclaration.getTypeElementGroovy() != null)[ CD ]
Line_15 $$ if (!(pparent instanceof GrVariableDeclaration))-->Line_16 $$ return false[ CD ]
Line_9 $$ if (!(parent instanceof GrVariable))-->Line_10 $$ return false[ CD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_22 $$ return variableDeclaration.getVariables()[0] == parent[ CD ]
Line_3 $$ if (element.getParent() instanceof GrTypeDefinitionBody && !(element instanceof PsiComment)) -->Line_4 $$ String text = element.getContainingFile().getText()[ CD ]
Line_3 $$ if (element.getParent() instanceof GrTypeDefinitionBody && !(element instanceof PsiComment)) -->Line_6 $$ return i >= 0 && (text.charAt(i) == '\n' || text.charAt(i) == '[ CD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_11 $$ if (acceptParameter && parent instanceof GrParameter) [ CD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_9 $$ if (!(parent instanceof GrVariable))[ CD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_19 $$ final GrVariableDeclaration variableDeclaration = (GrVariableDeclaration) pparent[ CD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_8 $$ final PsiElement parent = element.getParent()[ CD ]
Line_19 $$ final GrVariableDeclaration variableDeclaration = (GrVariableDeclaration) pparent-->Line_22 $$ return variableDeclaration.getVariables()[0] == parent[ FD ]
Line_4 $$ String text = element.getContainingFile().getText()-->Line_5 $$ int i = CharArrayUtil.shiftBackward(text, element.getTextRange().getStartOffset() - 1, " \t")[ FD ]
Line_2 $$ public static boolean isFirstElementAfterPossibleModifiersInVariableDeclaration(PsiElement element, boolean acceptParameter) -->Line_14 $$ final PsiElement pparent = parent.getParent()[ CD ]
Line_5 $$ int i = CharArrayUtil.shiftBackward(text, element.getTextRange().getStartOffset() - 1, " \t")-->Line_6 $$ return i >= 0 && (text.charAt(i) == '\n' || text.charAt(i) == '[ FD ]
