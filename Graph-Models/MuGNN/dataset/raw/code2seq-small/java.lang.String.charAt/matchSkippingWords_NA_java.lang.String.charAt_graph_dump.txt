Line_5 $$ while (true) -->Line_13 $$ if (!allowSpecialChars && myHasDots && !isPatternChar(patternIndex - 1, '.') && StringUtil.contains(name, nameIndex, nextOccurrence, '.')) [ CD ]
Line_13 $$ if (!allowSpecialChars && myHasDots && !isPatternChar(patternIndex - 1, '.') && StringUtil.contains(name, nameIndex, nextOccurrence, '.')) -->Line_14 $$ return null[ CD ]
Line_23 $$ nameIndex = nextOccurrence-->Line_13 $$ if (!allowSpecialChars && myHasDots && !isPatternChar(patternIndex - 1, '.') && StringUtil.contains(name, nameIndex, nextOccurrence, '.')) [ FD ]
Line_2 $$ private FList<TextRange> matchSkippingWords(@NotNull String name, final int patternIndex, int nameIndex, boolean allowSpecialChars, MatchingState matchingState) -->Line_10 $$ if (!allowSpecialChars && !myHasSeparators && !myHasHumps && StringUtil.containsAnyChar(name, myHardSeparators, nameIndex, nextOccurrence)) [ FD ]
Line_23 $$ nameIndex = nextOccurrence-->Line_10 $$ if (!allowSpecialChars && !myHasSeparators && !myHasHumps && StringUtil.containsAnyChar(name, myHardSeparators, nameIndex, nextOccurrence)) [ FD ]
Line_6 $$ int nextOccurrence = star ? indexOfIgnoreCase(name, nameIndex + 1, p, patternIndex, matchingState.isAsciiName) : indexOfWordStart(name, patternIndex, nameIndex)-->Line_13 $$ if (!allowSpecialChars && myHasDots && !isPatternChar(patternIndex - 1, '.') && StringUtil.contains(name, nameIndex, nextOccurrence, '.')) [ FD ]
Line_10 $$ if (!allowSpecialChars && !myHasSeparators && !myHasHumps && StringUtil.containsAnyChar(name, myHardSeparators, nameIndex, nextOccurrence)) -->Line_11 $$ return null[ CD ]
Line_2 $$ private FList<TextRange> matchSkippingWords(@NotNull String name, final int patternIndex, int nameIndex, boolean allowSpecialChars, MatchingState matchingState) -->Line_16 $$ if (!isUpperCase[patternIndex] || Character.isUpperCase(name.charAt(nextOccurrence)) || isWordStart(name, nextOccurrence) || !myHasHumps && myOptions != NameUtil.MatchingCaseSensitivity.ALL) [ FD ]
Line_16 $$ if (!isUpperCase[patternIndex] || Character.isUpperCase(name.charAt(nextOccurrence)) || isWordStart(name, nextOccurrence) || !myHasHumps && myOptions != NameUtil.MatchingCaseSensitivity.ALL) -->Line_19 $$ if (ranges != null) [ CD ]
Line_6 $$ int nextOccurrence = star ? indexOfIgnoreCase(name, nameIndex + 1, p, patternIndex, matchingState.isAsciiName) : indexOfWordStart(name, patternIndex, nameIndex)-->Line_18 $$ FList<TextRange> ranges = matchFragment(name, patternIndex, nextOccurrence, matchingState)[ FD ]
Line_23 $$ nameIndex = nextOccurrence-->Line_6 $$ int nextOccurrence = star ? indexOfIgnoreCase(name, nameIndex + 1, p, patternIndex, matchingState.isAsciiName) : indexOfWordStart(name, patternIndex, nameIndex)[ FD ]
Line_5 $$ while (true) -->Line_6 $$ int nextOccurrence = star ? indexOfIgnoreCase(name, nameIndex + 1, p, patternIndex, matchingState.isAsciiName) : indexOfWordStart(name, patternIndex, nameIndex)[ CD ]
Line_18 $$ FList<TextRange> ranges = matchFragment(name, patternIndex, nextOccurrence, matchingState)-->Line_19 $$ if (ranges != null) [ FD ]
Line_2 $$ private FList<TextRange> matchSkippingWords(@NotNull String name, final int patternIndex, int nameIndex, boolean allowSpecialChars, MatchingState matchingState) -->Line_18 $$ FList<TextRange> ranges = matchFragment(name, patternIndex, nextOccurrence, matchingState)[ FD ]
Line_2 $$ private FList<TextRange> matchSkippingWords(@NotNull String name, final int patternIndex, int nameIndex, boolean allowSpecialChars, MatchingState matchingState) -->Line_4 $$ final char p = myPattern[patternIndex][ CD ]
Line_2 $$ private FList<TextRange> matchSkippingWords(@NotNull String name, final int patternIndex, int nameIndex, boolean allowSpecialChars, MatchingState matchingState) -->Line_13 $$ if (!allowSpecialChars && myHasDots && !isPatternChar(patternIndex - 1, '.') && StringUtil.contains(name, nameIndex, nextOccurrence, '.')) [ FD ]
Line_2 $$ private FList<TextRange> matchSkippingWords(@NotNull String name, final int patternIndex, int nameIndex, boolean allowSpecialChars, MatchingState matchingState) -->Line_6 $$ int nextOccurrence = star ? indexOfIgnoreCase(name, nameIndex + 1, p, patternIndex, matchingState.isAsciiName) : indexOfWordStart(name, patternIndex, nameIndex)[ FD ]
Line_6 $$ int nextOccurrence = star ? indexOfIgnoreCase(name, nameIndex + 1, p, patternIndex, matchingState.isAsciiName) : indexOfWordStart(name, patternIndex, nameIndex)-->Line_7 $$ if (nextOccurrence < 0) [ FD ]
Line_6 $$ int nextOccurrence = star ? indexOfIgnoreCase(name, nameIndex + 1, p, patternIndex, matchingState.isAsciiName) : indexOfWordStart(name, patternIndex, nameIndex)-->Line_16 $$ if (!isUpperCase[patternIndex] || Character.isUpperCase(name.charAt(nextOccurrence)) || isWordStart(name, nextOccurrence) || !myHasHumps && myOptions != NameUtil.MatchingCaseSensitivity.ALL) [ FD ]
Line_5 $$ while (true) -->Line_16 $$ if (!isUpperCase[patternIndex] || Character.isUpperCase(name.charAt(nextOccurrence)) || isWordStart(name, nextOccurrence) || !myHasHumps && myOptions != NameUtil.MatchingCaseSensitivity.ALL) [ CD ]
Line_5 $$ while (true) -->Line_23 $$ nameIndex = nextOccurrence[ CD ]
Line_6 $$ int nextOccurrence = star ? indexOfIgnoreCase(name, nameIndex + 1, p, patternIndex, matchingState.isAsciiName) : indexOfWordStart(name, patternIndex, nameIndex)-->Line_10 $$ if (!allowSpecialChars && !myHasSeparators && !myHasHumps && StringUtil.containsAnyChar(name, myHardSeparators, nameIndex, nextOccurrence)) [ FD ]
Line_19 $$ if (ranges != null) -->Line_20 $$ return ranges[ CD ]
Line_2 $$ private FList<TextRange> matchSkippingWords(@NotNull String name, final int patternIndex, int nameIndex, boolean allowSpecialChars, MatchingState matchingState) -->Line_5 $$ while (true) [ CD ]
Line_5 $$ while (true) -->Line_7 $$ if (nextOccurrence < 0) [ CD ]
Line_6 $$ int nextOccurrence = star ? indexOfIgnoreCase(name, nameIndex + 1, p, patternIndex, matchingState.isAsciiName) : indexOfWordStart(name, patternIndex, nameIndex)-->Line_23 $$ nameIndex = nextOccurrence[ FD ]
Line_16 $$ if (!isUpperCase[patternIndex] || Character.isUpperCase(name.charAt(nextOccurrence)) || isWordStart(name, nextOccurrence) || !myHasHumps && myOptions != NameUtil.MatchingCaseSensitivity.ALL) -->Line_18 $$ FList<TextRange> ranges = matchFragment(name, patternIndex, nextOccurrence, matchingState)[ CD ]
Line_7 $$ if (nextOccurrence < 0) -->Line_8 $$ return null[ CD ]
Line_5 $$ while (true) -->Line_10 $$ if (!allowSpecialChars && !myHasSeparators && !myHasHumps && StringUtil.containsAnyChar(name, myHardSeparators, nameIndex, nextOccurrence)) [ CD ]
Line_2 $$ private FList<TextRange> matchSkippingWords(@NotNull String name, final int patternIndex, int nameIndex, boolean allowSpecialChars, MatchingState matchingState) -->Line_23 $$ nameIndex = nextOccurrence[ FD ]
Line_2 $$ private FList<TextRange> matchSkippingWords(@NotNull String name, final int patternIndex, int nameIndex, boolean allowSpecialChars, MatchingState matchingState) -->Line_3 $$ boolean star = isPatternChar(patternIndex - 1, '*')[ CD ]
Line_4 $$ final char p = myPattern[patternIndex]-->Line_6 $$ int nextOccurrence = star ? indexOfIgnoreCase(name, nameIndex + 1, p, patternIndex, matchingState.isAsciiName) : indexOfWordStart(name, patternIndex, nameIndex)[ FD ]
