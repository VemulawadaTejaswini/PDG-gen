Line_8 $$ pattern = pattern.substring(0, 80)-->Line_12 $$ if (containsOnlyUppercaseLetters(pattern)) [ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_8 $$ pattern = pattern.substring(0, 80)[ FD ]
Line_3 $$ int eol = pattern.indexOf('\n')-->Line_4 $$ if (eol != -1) [ FD ]
Line_51 $$ firstIdentifierLetter = true-->Line_23 $$ if (!firstIdentifierLetter) [ FD ]
Line_49 $$ if (c == ' ') -->Line_51 $$ firstIdentifierLetter = true[ CD ]
Line_33 $$ if (Character.isLowerCase(c)) -->Line_36 $$ buffer.append('|')[ CD ]
Line_11 $$ boolean allowToLower = true-->Line_13 $$ allowToLower = false[ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_5 $$ pattern = pattern.substring(0, eol)[ FD ]
Line_23 $$ if (!firstIdentifierLetter) -->Line_24 $$ buffer.append("[^A-Z]*")[ CD ]
Line_53 $$ firstIdentifierLetter = true-->Line_23 $$ if (!firstIdentifierLetter) [ FD ]
Line_18 $$ boolean firstIdentifierLetter = true-->Line_45 $$ firstIdentifierLetter = true[ FD ]
Line_20 $$ char c = pattern.charAt(i)-->Line_33 $$ if (Character.isLowerCase(c)) [ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_11 $$ boolean allowToLower = true[ CD ]
Line_45 $$ firstIdentifierLetter = true-->Line_53 $$ firstIdentifierLetter = true[ FD ]
Line_42 $$ firstIdentifierLetter = false-->Line_48 $$ firstIdentifierLetter = true[ FD ]
Line_20 $$ char c = pattern.charAt(i)-->Line_35 $$ buffer.append(c)[ FD ]
Line_33 $$ if (Character.isLowerCase(c)) -->Line_40 $$ buffer.append(c)[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_44 $$ buffer.append(".*")[ FD ]
Line_49 $$ if (c == ' ') -->Line_50 $$ buffer.append(".*\\ ")[ CD ]
Line_51 $$ firstIdentifierLetter = true-->Line_53 $$ firstIdentifierLetter = true[ FD ]
Line_48 $$ firstIdentifierLetter = true-->Line_51 $$ firstIdentifierLetter = true[ FD ]
Line_12 $$ if (containsOnlyUppercaseLetters(pattern)) -->Line_13 $$ allowToLower = false[ CD ]
Line_42 $$ firstIdentifierLetter = false-->Line_51 $$ firstIdentifierLetter = true[ FD ]
Line_22 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_23 $$ if (!firstIdentifierLetter) [ CD ]
Line_45 $$ firstIdentifierLetter = true-->Line_48 $$ firstIdentifierLetter = true[ FD ]
Line_20 $$ char c = pattern.charAt(i)-->Line_40 $$ buffer.append(c)[ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_30 $$ buffer.append(Character.toLowerCase(c))[ FD ]
Line_28 $$ if (allowToLower || i == 0) -->Line_29 $$ buffer.append('|')[ CD ]
Line_45 $$ firstIdentifierLetter = true-->Line_51 $$ firstIdentifierLetter = true[ FD ]
Line_15 $$ if (allowToLower) -->Line_16 $$ buffer.append(".*")[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_54 $$ buffer.append("\\x")[ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_24 $$ buffer.append("[^A-Z]*")[ FD ]
Line_19 $$ for (int i = 0; i < pattern.length(); i++) -->Line_20 $$ char c = pattern.charAt(i)[ CD ]
Line_21 $$ if (Character.isLetterOrDigit(c)) -->Line_43 $$ if (c == '*') [ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_32 $$ buffer.append("]")[ FD ]
Line_5 $$ pattern = pattern.substring(0, eol)-->Line_7 $$ if (pattern.length() >= 80) [ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_12 $$ if (containsOnlyUppercaseLetters(pattern)) [ FD ]
Line_21 $$ if (Character.isLetterOrDigit(c)) -->Line_42 $$ firstIdentifierLetter = false[ CD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_19 $$ for (int i = 0; i < pattern.length(); i++) [ CD ]
Line_22 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_26 $$ buffer.append("[")[ CD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_7 $$ if (pattern.length() >= 80) [ FD ]
Line_42 $$ firstIdentifierLetter = false-->Line_45 $$ firstIdentifierLetter = true[ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_26 $$ buffer.append("[")[ FD ]
Line_20 $$ char c = pattern.charAt(i)-->Line_37 $$ buffer.append(Character.toUpperCase(c))[ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_18 $$ boolean firstIdentifierLetter = true[ CD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_4 $$ if (eol != -1) [ CD ]
Line_8 $$ pattern = pattern.substring(0, 80)-->Line_19 $$ for (int i = 0; i < pattern.length(); i++) [ FD ]
Line_20 $$ char c = pattern.charAt(i)-->Line_27 $$ buffer.append(c)[ FD ]
Line_33 $$ if (Character.isLowerCase(c)) -->Line_34 $$ buffer.append('[')[ CD ]
Line_43 $$ if (c == '*') -->Line_46 $$ if (c == '.') [ CD ]
Line_33 $$ if (Character.isLowerCase(c)) -->Line_37 $$ buffer.append(Character.toUpperCase(c))[ CD ]
Line_49 $$ if (c == ' ') -->Line_55 $$ buffer.append(Integer.toHexString(c + 0x20000).substring(3))[ CD ]
Line_46 $$ if (c == '.') -->Line_47 $$ buffer.append("\\.")[ CD ]
Line_18 $$ boolean firstIdentifierLetter = true-->Line_48 $$ firstIdentifierLetter = true[ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_36 $$ buffer.append('|')[ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_16 $$ buffer.append(".*")[ FD ]
Line_22 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_33 $$ if (Character.isLowerCase(c)) [ CD ]
Line_18 $$ boolean firstIdentifierLetter = true-->Line_51 $$ firstIdentifierLetter = true[ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_58 $$ buffer.append(".*")[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_35 $$ buffer.append(c)[ FD ]
Line_49 $$ if (c == ' ') -->Line_53 $$ firstIdentifierLetter = true[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_37 $$ buffer.append(Character.toUpperCase(c))[ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_40 $$ buffer.append(c)[ FD ]
Line_33 $$ if (Character.isLowerCase(c)) -->Line_35 $$ buffer.append(c)[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_50 $$ buffer.append(".*\\ ")[ FD ]
Line_8 $$ pattern = pattern.substring(0, 80)-->Line_20 $$ char c = pattern.charAt(i)[ FD ]
Line_5 $$ pattern = pattern.substring(0, eol)-->Line_20 $$ char c = pattern.charAt(i)[ FD ]
Line_48 $$ firstIdentifierLetter = true-->Line_23 $$ if (!firstIdentifierLetter) [ FD ]
Line_5 $$ pattern = pattern.substring(0, eol)-->Line_19 $$ for (int i = 0; i < pattern.length(); i++) [ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_47 $$ buffer.append("\\.")[ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_15 $$ if (allowToLower) [ CD ]
Line_46 $$ if (c == '.') -->Line_49 $$ if (c == ' ') [ CD ]
Line_5 $$ pattern = pattern.substring(0, eol)-->Line_12 $$ if (containsOnlyUppercaseLetters(pattern)) [ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_34 $$ buffer.append('[')[ FD ]
Line_22 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_27 $$ buffer.append(c)[ CD ]
Line_22 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_28 $$ if (allowToLower || i == 0) [ CD ]
Line_7 $$ if (pattern.length() >= 80) -->Line_8 $$ pattern = pattern.substring(0, 80)[ CD ]
Line_42 $$ firstIdentifierLetter = false-->Line_53 $$ firstIdentifierLetter = true[ FD ]
Line_11 $$ boolean allowToLower = true-->Line_28 $$ if (allowToLower || i == 0) [ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_29 $$ buffer.append('|')[ FD ]
Line_18 $$ boolean firstIdentifierLetter = true-->Line_42 $$ firstIdentifierLetter = false[ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_59 $$ return buffer.toString()[ CD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_12 $$ if (containsOnlyUppercaseLetters(pattern)) [ CD ]
Line_13 $$ allowToLower = false-->Line_28 $$ if (allowToLower || i == 0) [ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_20 $$ char c = pattern.charAt(i)[ FD ]
Line_48 $$ firstIdentifierLetter = true-->Line_53 $$ firstIdentifierLetter = true[ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_7 $$ if (pattern.length() >= 80) [ CD ]
Line_5 $$ pattern = pattern.substring(0, eol)-->Line_8 $$ pattern = pattern.substring(0, 80)[ FD ]
Line_19 $$ for (int i = 0; i < pattern.length(); i++) -->Line_20 $$ char c = pattern.charAt(i)[ FD ]
Line_18 $$ boolean firstIdentifierLetter = true-->Line_23 $$ if (!firstIdentifierLetter) [ FD ]
Line_49 $$ if (c == ' ') -->Line_54 $$ buffer.append("\\x")[ CD ]
Line_43 $$ if (c == '*') -->Line_45 $$ firstIdentifierLetter = true[ CD ]
Line_19 $$ for (int i = 0; i < pattern.length(); i++) -->Line_21 $$ if (Character.isLetterOrDigit(c)) [ CD ]
Line_20 $$ char c = pattern.charAt(i)-->Line_43 $$ if (c == '*') [ FD ]
Line_3 $$ int eol = pattern.indexOf('\n')-->Line_5 $$ pattern = pattern.substring(0, eol)[ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_19 $$ for (int i = 0; i < pattern.length(); i++) [ FD ]
Line_20 $$ char c = pattern.charAt(i)-->Line_21 $$ if (Character.isLetterOrDigit(c)) [ FD ]
Line_43 $$ if (c == '*') -->Line_44 $$ buffer.append(".*")[ CD ]
Line_28 $$ if (allowToLower || i == 0) -->Line_30 $$ buffer.append(Character.toLowerCase(c))[ CD ]
Line_21 $$ if (Character.isLetterOrDigit(c)) -->Line_22 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) [ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_38 $$ buffer.append(']')[ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_59 $$ return buffer.toString()[ FD ]
Line_42 $$ firstIdentifierLetter = false-->Line_23 $$ if (!firstIdentifierLetter) [ FD ]
Line_46 $$ if (c == '.') -->Line_48 $$ firstIdentifierLetter = true[ CD ]
Line_20 $$ char c = pattern.charAt(i)-->Line_49 $$ if (c == ' ') [ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_3 $$ int eol = pattern.indexOf('\n')[ FD ]
Line_20 $$ char c = pattern.charAt(i)-->Line_22 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) [ FD ]
Line_20 $$ char c = pattern.charAt(i)-->Line_30 $$ buffer.append(Character.toLowerCase(c))[ FD ]
Line_22 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_32 $$ buffer.append("]")[ CD ]
Line_45 $$ firstIdentifierLetter = true-->Line_23 $$ if (!firstIdentifierLetter) [ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_10 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_27 $$ buffer.append(c)[ FD ]
Line_18 $$ boolean firstIdentifierLetter = true-->Line_53 $$ firstIdentifierLetter = true[ FD ]
Line_4 $$ if (eol != -1) -->Line_5 $$ pattern = pattern.substring(0, eol)[ CD ]
Line_33 $$ if (Character.isLowerCase(c)) -->Line_38 $$ buffer.append(']')[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_58 $$ buffer.append(".*")[ FD ]
Line_2 $$ static String convertPattern(String pattern) -->Line_3 $$ int eol = pattern.indexOf('\n')[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_55 $$ buffer.append(Integer.toHexString(c + 0x20000).substring(3))[ FD ]
Line_20 $$ char c = pattern.charAt(i)-->Line_46 $$ if (c == '.') [ FD ]
