Line_2 $$ public PsiReference[] createReferences(final GenericDomValue genericDomValue, final PsiElement element, final ConvertContext context) -->Line_5 $$ final int offset = ElementManipulators.getOffsetInElement(element)[ FD ]
Line_2 $$ public PsiReference[] createReferences(final GenericDomValue genericDomValue, final PsiElement element, final ConvertContext context) -->Line_4 $$ if (s != null) [ CD ]
Line_16 $$ if (nextPos == -1) -->Line_17 $$ createReference(element, s.substring(pos + 1), pos + 1 + offset, list)[ CD ]
Line_3 $$ final String s = genericDomValue.getStringValue()-->Line_9 $$ while (pos + 1 < s.length()) [ FD ]
Line_2 $$ public PsiReference[] createReferences(final GenericDomValue genericDomValue, final PsiElement element, final ConvertContext context) -->Line_3 $$ final String s = genericDomValue.getStringValue()[ FD ]
Line_3 $$ final String s = genericDomValue.getStringValue()-->Line_4 $$ if (s != null) [ FD ]
Line_6 $$ final ArrayList<PsiReference> list = new ArrayList<PsiReference>()-->Line_20 $$ createReference(element, s.substring(pos + 1, nextPos), pos + 1 + offset, list)[ FD ]
Line_8 $$ while (true) -->Line_16 $$ if (nextPos == -1) [ CD ]
Line_7 $$ int pos = -1-->Line_13 $$ pos++[ FD ]
Line_3 $$ final String s = genericDomValue.getStringValue()-->Line_15 $$ int nextPos = s.indexOf(',', pos + 1)[ FD ]
Line_4 $$ if (s != null) -->Line_6 $$ final ArrayList<PsiReference> list = new ArrayList<PsiReference>()[ CD ]
Line_16 $$ if (nextPos == -1) -->Line_21 $$ pos = nextPos[ CD ]
Line_4 $$ if (s != null) -->Line_7 $$ int pos = -1[ CD ]
Line_4 $$ if (s != null) -->Line_5 $$ final int offset = ElementManipulators.getOffsetInElement(element)[ CD ]
Line_4 $$ if (s != null) -->Line_24 $$ return list.toArray(new PsiReference[list.size()])[ CD ]
Line_6 $$ final ArrayList<PsiReference> list = new ArrayList<PsiReference>()-->Line_17 $$ createReference(element, s.substring(pos + 1), pos + 1 + offset, list)[ FD ]
Line_9 $$ while (pos + 1 < s.length()) -->Line_10 $$ if (!Character.isWhitespace(s.charAt(pos + 1))) [ CD ]
Line_8 $$ while (true) -->Line_15 $$ int nextPos = s.indexOf(',', pos + 1)[ CD ]
Line_2 $$ public PsiReference[] createReferences(final GenericDomValue genericDomValue, final PsiElement element, final ConvertContext context) -->Line_26 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_7 $$ int pos = -1-->Line_21 $$ pos = nextPos[ FD ]
Line_3 $$ final String s = genericDomValue.getStringValue()-->Line_17 $$ createReference(element, s.substring(pos + 1), pos + 1 + offset, list)[ FD ]
Line_2 $$ public PsiReference[] createReferences(final GenericDomValue genericDomValue, final PsiElement element, final ConvertContext context) -->Line_17 $$ createReference(element, s.substring(pos + 1), pos + 1 + offset, list)[ FD ]
Line_16 $$ if (nextPos == -1) -->Line_20 $$ createReference(element, s.substring(pos + 1, nextPos), pos + 1 + offset, list)[ CD ]
Line_6 $$ final ArrayList<PsiReference> list = new ArrayList<PsiReference>()-->Line_24 $$ return list.toArray(new PsiReference[list.size()])[ FD ]
Line_3 $$ final String s = genericDomValue.getStringValue()-->Line_10 $$ if (!Character.isWhitespace(s.charAt(pos + 1))) [ FD ]
Line_8 $$ while (true) -->Line_9 $$ while (pos + 1 < s.length()) [ CD ]
Line_2 $$ public PsiReference[] createReferences(final GenericDomValue genericDomValue, final PsiElement element, final ConvertContext context) -->Line_20 $$ createReference(element, s.substring(pos + 1, nextPos), pos + 1 + offset, list)[ FD ]
Line_9 $$ while (pos + 1 < s.length()) -->Line_13 $$ pos++[ CD ]
Line_4 $$ if (s != null) -->Line_8 $$ while (true) [ CD ]
Line_2 $$ public PsiReference[] createReferences(final GenericDomValue genericDomValue, final PsiElement element, final ConvertContext context) -->Line_3 $$ final String s = genericDomValue.getStringValue()[ CD ]
Line_3 $$ final String s = genericDomValue.getStringValue()-->Line_20 $$ createReference(element, s.substring(pos + 1, nextPos), pos + 1 + offset, list)[ FD ]
