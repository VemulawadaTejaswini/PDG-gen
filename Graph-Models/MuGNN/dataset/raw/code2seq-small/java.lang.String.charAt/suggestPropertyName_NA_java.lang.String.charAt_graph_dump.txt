Line_2 $$ public static String suggestPropertyName(@NotNull PsiField field, @NotNull String fieldName) -->Line_6 $$ if (!field.hasModifierProperty(PsiModifier.STATIC) && isBoolean(field.getType())) [ CD ]
Line_2 $$ public static String suggestPropertyName(@NotNull PsiField field, @NotNull String fieldName) -->Line_6 $$ if (!field.hasModifierProperty(PsiModifier.STATIC) && isBoolean(field.getType())) [ FD ]
Line_2 $$ public static String suggestPropertyName(@NotNull PsiField field, @NotNull String fieldName) -->Line_3 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(field.getProject())[ FD ]
Line_2 $$ public static String suggestPropertyName(@NotNull PsiField field, @NotNull String fieldName) -->Line_3 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(field.getProject())[ CD ]
Line_7 $$ if (name.startsWith(IS_PREFIX) && name.length() > IS_PREFIX.length() && Character.isUpperCase(name.charAt(IS_PREFIX.length()))) -->Line_8 $$ name = Introspector.decapitalize(name.substring(IS_PREFIX.length()))[ CD ]
Line_4 $$ VariableKind kind = codeStyleManager.getVariableKind(field)-->Line_5 $$ String name = codeStyleManager.variableNameToPropertyName(fieldName, kind)[ FD ]
Line_5 $$ String name = codeStyleManager.variableNameToPropertyName(fieldName, kind)-->Line_8 $$ name = Introspector.decapitalize(name.substring(IS_PREFIX.length()))[ FD ]
Line_2 $$ public static String suggestPropertyName(@NotNull PsiField field, @NotNull String fieldName) -->Line_5 $$ String name = codeStyleManager.variableNameToPropertyName(fieldName, kind)[ CD ]
Line_2 $$ public static String suggestPropertyName(@NotNull PsiField field, @NotNull String fieldName) -->Line_4 $$ VariableKind kind = codeStyleManager.getVariableKind(field)[ CD ]
Line_2 $$ public static String suggestPropertyName(@NotNull PsiField field, @NotNull String fieldName) -->Line_5 $$ String name = codeStyleManager.variableNameToPropertyName(fieldName, kind)[ FD ]
Line_6 $$ if (!field.hasModifierProperty(PsiModifier.STATIC) && isBoolean(field.getType())) -->Line_7 $$ if (name.startsWith(IS_PREFIX) && name.length() > IS_PREFIX.length() && Character.isUpperCase(name.charAt(IS_PREFIX.length()))) [ CD ]
Line_3 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(field.getProject())-->Line_4 $$ VariableKind kind = codeStyleManager.getVariableKind(field)[ FD ]
Line_3 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(field.getProject())-->Line_5 $$ String name = codeStyleManager.variableNameToPropertyName(fieldName, kind)[ FD ]
Line_2 $$ public static String suggestPropertyName(@NotNull PsiField field, @NotNull String fieldName) -->Line_11 $$ return name[ CD ]
Line_5 $$ String name = codeStyleManager.variableNameToPropertyName(fieldName, kind)-->Line_7 $$ if (name.startsWith(IS_PREFIX) && name.length() > IS_PREFIX.length() && Character.isUpperCase(name.charAt(IS_PREFIX.length()))) [ FD ]
Line_2 $$ public static String suggestPropertyName(@NotNull PsiField field, @NotNull String fieldName) -->Line_4 $$ VariableKind kind = codeStyleManager.getVariableKind(field)[ FD ]
