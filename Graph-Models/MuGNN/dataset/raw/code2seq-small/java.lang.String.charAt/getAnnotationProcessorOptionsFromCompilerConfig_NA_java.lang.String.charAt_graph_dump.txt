Line_2 $$ private static Map<String, String> getAnnotationProcessorOptionsFromCompilerConfig(Element compilerConfig) -->Line_4 $$ String compilerArgument = compilerConfig.getChildText("compilerArgument")[ CD ]
Line_14 $$ for (Element e : compilerArgs.getChildren()) -->Line_27 $$ res.put(name.substring(1), e.getTextTrim())[ FD ]
Line_2 $$ private static Map<String, String> getAnnotationProcessorOptionsFromCompilerConfig(Element compilerConfig) -->Line_22 $$ if (compilerArguments != null) [ CD ]
Line_2 $$ private static Map<String, String> getAnnotationProcessorOptionsFromCompilerConfig(Element compilerConfig) -->Line_12 $$ Element compilerArgs = compilerConfig.getChild("compilerArgs")[ CD ]
Line_17 $$ String arg = e.getTextTrim()-->Line_18 $$ addAnnotationProcessorOption(arg, res)[ FD ]
Line_2 $$ private static Map<String, String> getAnnotationProcessorOptionsFromCompilerConfig(Element compilerConfig) -->Line_12 $$ Element compilerArgs = compilerConfig.getChild("compilerArgs")[ FD ]
Line_4 $$ String compilerArgument = compilerConfig.getChildText("compilerArgument")-->Line_7 $$ parametersList.addParametersString(compilerArgument)[ FD ]
Line_14 $$ for (Element e : compilerArgs.getChildren()) -->Line_15 $$ if (!StringUtil.equals(e.getName(), "arg"))[ FD ]
Line_2 $$ private static Map<String, String> getAnnotationProcessorOptionsFromCompilerConfig(Element compilerConfig) -->Line_5 $$ if (!StringUtil.isEmptyOrSpaces(compilerArgument)) [ CD ]
Line_2 $$ private static Map<String, String> getAnnotationProcessorOptionsFromCompilerConfig(Element compilerConfig) -->Line_3 $$ Map<String, String> res = new LinkedHashMap<String, String>()[ CD ]
Line_14 $$ for (Element e : compilerArgs.getChildren()) -->Line_24 $$ String name = e.getName()[ FD ]
Line_2 $$ private static Map<String, String> getAnnotationProcessorOptionsFromCompilerConfig(Element compilerConfig) -->Line_21 $$ Element compilerArguments = compilerConfig.getChild("compilerArguments")[ CD ]
Line_2 $$ private static Map<String, String> getAnnotationProcessorOptionsFromCompilerConfig(Element compilerConfig) -->Line_13 $$ if (compilerArgs != null) [ CD ]
Line_25 $$ name = StringUtil.trimStart(name, "-")-->Line_26 $$ if (name.length() > 1 && name.charAt(0) == 'A') [ FD ]
Line_24 $$ String name = e.getName()-->Line_25 $$ name = StringUtil.trimStart(name, "-")[ FD ]
Line_3 $$ Map<String, String> res = new LinkedHashMap<String, String>()-->Line_9 $$ addAnnotationProcessorOption(param, res)[ FD ]
Line_3 $$ Map<String, String> res = new LinkedHashMap<String, String>()-->Line_18 $$ addAnnotationProcessorOption(arg, res)[ FD ]
Line_8 $$ for (String param : parametersList.getParameters()) -->Line_9 $$ addAnnotationProcessorOption(param, res)[ FD ]
Line_26 $$ if (name.length() > 1 && name.charAt(0) == 'A') -->Line_27 $$ res.put(name.substring(1), e.getTextTrim())[ CD ]
Line_2 $$ private static Map<String, String> getAnnotationProcessorOptionsFromCompilerConfig(Element compilerConfig) -->Line_4 $$ String compilerArgument = compilerConfig.getChildText("compilerArgument")[ FD ]
Line_25 $$ name = StringUtil.trimStart(name, "-")-->Line_27 $$ res.put(name.substring(1), e.getTextTrim())[ FD ]
Line_21 $$ Element compilerArguments = compilerConfig.getChild("compilerArguments")-->Line_23 $$ for (Element e : compilerArguments.getChildren()) [ FD ]
Line_5 $$ if (!StringUtil.isEmptyOrSpaces(compilerArgument)) -->Line_7 $$ parametersList.addParametersString(compilerArgument)[ CD ]
Line_12 $$ Element compilerArgs = compilerConfig.getChild("compilerArgs")-->Line_14 $$ for (Element e : compilerArgs.getChildren()) [ FD ]
Line_21 $$ Element compilerArguments = compilerConfig.getChild("compilerArguments")-->Line_22 $$ if (compilerArguments != null) [ FD ]
Line_12 $$ Element compilerArgs = compilerConfig.getChild("compilerArgs")-->Line_13 $$ if (compilerArgs != null) [ FD ]
Line_3 $$ Map<String, String> res = new LinkedHashMap<String, String>()-->Line_27 $$ res.put(name.substring(1), e.getTextTrim())[ FD ]
Line_4 $$ String compilerArgument = compilerConfig.getChildText("compilerArgument")-->Line_5 $$ if (!StringUtil.isEmptyOrSpaces(compilerArgument)) [ FD ]
Line_2 $$ private static Map<String, String> getAnnotationProcessorOptionsFromCompilerConfig(Element compilerConfig) -->Line_21 $$ Element compilerArguments = compilerConfig.getChild("compilerArguments")[ FD ]
Line_6 $$ ParametersList parametersList = new ParametersList()-->Line_8 $$ for (String param : parametersList.getParameters()) [ FD ]
Line_14 $$ for (Element e : compilerArgs.getChildren()) -->Line_17 $$ String arg = e.getTextTrim()[ FD ]
Line_6 $$ ParametersList parametersList = new ParametersList()-->Line_7 $$ parametersList.addParametersString(compilerArgument)[ FD ]
Line_24 $$ String name = e.getName()-->Line_27 $$ res.put(name.substring(1), e.getTextTrim())[ FD ]
Line_24 $$ String name = e.getName()-->Line_26 $$ if (name.length() > 1 && name.charAt(0) == 'A') [ FD ]
Line_2 $$ private static Map<String, String> getAnnotationProcessorOptionsFromCompilerConfig(Element compilerConfig) -->Line_31 $$ return res[ CD ]
Line_5 $$ if (!StringUtil.isEmptyOrSpaces(compilerArgument)) -->Line_6 $$ ParametersList parametersList = new ParametersList()[ CD ]
