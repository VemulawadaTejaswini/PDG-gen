Line_18 $$ if (str.charAt(idx) != ':')-->Line_19 $$ throwSyntaxError("expecting ':' token")[ CD ]
Line_2 $$ public Pair<Pair<String, ByteBuffer>, List<Pair<ByteBuffer, AbstractType>>> getUserTypeParameters() throws SyntaxException, ConfigurationException -->Line_11 $$ while (skipBlankAndComma()) [ CD ]
Line_26 $$ SyntaxException ex = new SyntaxException(String.format("Exception while parsing '%s' around char %d", str, idx))-->Line_27 $$ ex.initCause(e)[ FD ]
Line_2 $$ public Pair<Pair<String, ByteBuffer>, List<Pair<ByteBuffer, AbstractType>>> getUserTypeParameters() throws SyntaxException, ConfigurationException -->Line_7 $$ String keyspace = readNextIdentifier()[ CD ]
Line_23 $$ AbstractType type = parse()-->Line_24 $$ defs.add(Pair.create(name, type))[ FD ]
Line_10 $$ List<Pair<ByteBuffer, AbstractType>> defs = new ArrayList()-->Line_14 $$ return Pair.create(Pair.create(keyspace, typeName), defs)[ FD ]
Line_11 $$ while (skipBlankAndComma()) -->Line_18 $$ if (str.charAt(idx) != ':')[ CD ]
Line_2 $$ public Pair<Pair<String, ByteBuffer>, List<Pair<ByteBuffer, AbstractType>>> getUserTypeParameters() throws SyntaxException, ConfigurationException -->Line_8 $$ skipBlankAndComma()[ CD ]
Line_2 $$ public Pair<Pair<String, ByteBuffer>, List<Pair<ByteBuffer, AbstractType>>> getUserTypeParameters() throws SyntaxException, ConfigurationException -->Line_10 $$ List<Pair<ByteBuffer, AbstractType>> defs = new ArrayList()[ CD ]
Line_11 $$ while (skipBlankAndComma()) -->Line_16 $$ ByteBuffer name = fromHex(readNextIdentifier())[ CD ]
Line_9 $$ ByteBuffer typeName = fromHex(readNextIdentifier())-->Line_14 $$ return Pair.create(Pair.create(keyspace, typeName), defs)[ FD ]
Line_7 $$ String keyspace = readNextIdentifier()-->Line_14 $$ return Pair.create(Pair.create(keyspace, typeName), defs)[ FD ]
Line_2 $$ public Pair<Pair<String, ByteBuffer>, List<Pair<ByteBuffer, AbstractType>>> getUserTypeParameters() throws SyntaxException, ConfigurationException -->Line_6 $$ skipBlankAndComma()[ CD ]
Line_11 $$ while (skipBlankAndComma()) -->Line_12 $$ if (str.charAt(idx) == ')') [ CD ]
Line_16 $$ ByteBuffer name = fromHex(readNextIdentifier())-->Line_24 $$ defs.add(Pair.create(name, type))[ FD ]
Line_11 $$ while (skipBlankAndComma()) -->Line_17 $$ skipBlank()[ CD ]
Line_10 $$ List<Pair<ByteBuffer, AbstractType>> defs = new ArrayList()-->Line_24 $$ defs.add(Pair.create(name, type))[ FD ]
Line_2 $$ public Pair<Pair<String, ByteBuffer>, List<Pair<ByteBuffer, AbstractType>>> getUserTypeParameters() throws SyntaxException, ConfigurationException -->Line_3 $$ if (isEOS() || str.charAt(idx) != '(')[ CD ]
Line_2 $$ public Pair<Pair<String, ByteBuffer>, List<Pair<ByteBuffer, AbstractType>>> getUserTypeParameters() throws SyntaxException, ConfigurationException -->Line_9 $$ ByteBuffer typeName = fromHex(readNextIdentifier())[ CD ]
Line_11 $$ while (skipBlankAndComma()) -->Line_21 $$ skipBlank()[ CD ]
Line_12 $$ if (str.charAt(idx) == ')') -->Line_14 $$ return Pair.create(Pair.create(keyspace, typeName), defs)[ CD ]
