Line_2 $$ private boolean isFirstCharMatching(@NotNull String name, int nameIndex, int patternIndex) -->Line_3 $$ if (nameIndex >= name.length())[ FD ]
Line_2 $$ private boolean isFirstCharMatching(@NotNull String name, int nameIndex, int patternIndex) -->Line_3 $$ if (nameIndex >= name.length())[ CD ]
Line_3 $$ if (nameIndex >= name.length())-->Line_4 $$ return false[ CD ]
Line_9 $$ if (myOptions == NameUtil.MatchingCaseSensitivity.FIRST_LETTER && (patternIndex == 0 || patternIndex == 1 && isWildcard(0)) && hasCase(patternChar) && Character.isUpperCase(patternChar) != Character.isUpperCase(name.charAt(0))) -->Line_10 $$ return false[ CD ]
Line_5 $$ boolean ignoreCase = myOptions != NameUtil.MatchingCaseSensitivity.ALL-->Line_7 $$ if (!charEquals(patternChar, patternIndex, name.charAt(nameIndex), ignoreCase))[ FD ]
Line_6 $$ char patternChar = myPattern[patternIndex]-->Line_7 $$ if (!charEquals(patternChar, patternIndex, name.charAt(nameIndex), ignoreCase))[ FD ]
Line_7 $$ if (!charEquals(patternChar, patternIndex, name.charAt(nameIndex), ignoreCase))-->Line_8 $$ return false[ CD ]
Line_6 $$ char patternChar = myPattern[patternIndex]-->Line_9 $$ if (myOptions == NameUtil.MatchingCaseSensitivity.FIRST_LETTER && (patternIndex == 0 || patternIndex == 1 && isWildcard(0)) && hasCase(patternChar) && Character.isUpperCase(patternChar) != Character.isUpperCase(name.charAt(0))) [ FD ]
Line_2 $$ private boolean isFirstCharMatching(@NotNull String name, int nameIndex, int patternIndex) -->Line_9 $$ if (myOptions == NameUtil.MatchingCaseSensitivity.FIRST_LETTER && (patternIndex == 0 || patternIndex == 1 && isWildcard(0)) && hasCase(patternChar) && Character.isUpperCase(patternChar) != Character.isUpperCase(name.charAt(0))) [ FD ]
Line_2 $$ private boolean isFirstCharMatching(@NotNull String name, int nameIndex, int patternIndex) -->Line_12 $$ return true[ CD ]
Line_2 $$ private boolean isFirstCharMatching(@NotNull String name, int nameIndex, int patternIndex) -->Line_9 $$ if (myOptions == NameUtil.MatchingCaseSensitivity.FIRST_LETTER && (patternIndex == 0 || patternIndex == 1 && isWildcard(0)) && hasCase(patternChar) && Character.isUpperCase(patternChar) != Character.isUpperCase(name.charAt(0))) [ CD ]
Line_2 $$ private boolean isFirstCharMatching(@NotNull String name, int nameIndex, int patternIndex) -->Line_7 $$ if (!charEquals(patternChar, patternIndex, name.charAt(nameIndex), ignoreCase))[ CD ]
Line_2 $$ private boolean isFirstCharMatching(@NotNull String name, int nameIndex, int patternIndex) -->Line_7 $$ if (!charEquals(patternChar, patternIndex, name.charAt(nameIndex), ignoreCase))[ FD ]
Line_2 $$ private boolean isFirstCharMatching(@NotNull String name, int nameIndex, int patternIndex) -->Line_5 $$ boolean ignoreCase = myOptions != NameUtil.MatchingCaseSensitivity.ALL[ CD ]
Line_2 $$ private boolean isFirstCharMatching(@NotNull String name, int nameIndex, int patternIndex) -->Line_6 $$ char patternChar = myPattern[patternIndex][ CD ]
