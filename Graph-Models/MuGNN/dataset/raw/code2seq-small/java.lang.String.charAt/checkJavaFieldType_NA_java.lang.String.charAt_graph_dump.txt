Line_8 $$ String javaTermContent = javaTerm.getContent()-->Line_9 $$ Matcher matcher = pattern.matcher(javaTermContent)[ FD ]
Line_8 $$ String javaTermContent = javaTerm.getContent()-->Line_20 $$ String modifierDefinition = StringUtil.trim(javaTermContent.substring(matcher.start(1), matcher.start(6)))[ FD ]
Line_9 $$ Matcher matcher = pattern.matcher(javaTermContent)-->Line_23 $$ String javaFieldType = StringUtil.trim(matcher.group(6))[ FD ]
Line_23 $$ String javaFieldType = StringUtil.trim(matcher.group(6))-->Line_24 $$ if (isFinal && isStatic && javaFieldType.startsWith("Map<")) [ FD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_25 $$ checkMutableFieldType(javaTerm)[ FD ]
Line_20 $$ String modifierDefinition = StringUtil.trim(javaTermContent.substring(matcher.start(1), matcher.start(6)))-->Line_21 $$ boolean isFinal = modifierDefinition.contains("final")[ FD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_20 $$ String modifierDefinition = StringUtil.trim(javaTermContent.substring(matcher.start(1), matcher.start(6)))[ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_27 $$ if (!javaTerm.isPrivate()) [ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_13 $$ if ((javaTerm.isPrivate() && !javaTermName.equals("serialVersionUID")) ^ (javaTermName.charAt(0) == CharPool.UNDERLINE)) [ FD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_3 $$ if (!BaseSourceProcessor.portalSource || !javaTerm.isVariable()) [ FD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_39 $$ checkFinalableFieldType(javaTerm, annotationsExclusions, modifierDefinition)[ FD ]
Line_31 $$ if (immutableFieldTypes.contains(javaFieldType)) -->Line_32 $$ if (isStatic) [ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_35 $$ checkStaticableFieldType(javaTerm)[ FD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_6 $$ String javaTermName = javaTerm.getName()[ FD ]
Line_10 $$ if (!matcher.find()) -->Line_11 $$ return[ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_7 $$ Pattern pattern = Pattern.compile("\t(private |protected |public )" + "(((final|static|transient)( |\n))*)([\\s\\S]*?)" + javaTermName)[ CD ]
Line_27 $$ if (!javaTerm.isPrivate()) -->Line_28 $$ return[ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_13 $$ if ((javaTerm.isPrivate() && !javaTermName.equals("serialVersionUID")) ^ (javaTermName.charAt(0) == CharPool.UNDERLINE)) [ CD ]
Line_6 $$ String javaTermName = javaTerm.getName()-->Line_13 $$ if ((javaTerm.isPrivate() && !javaTermName.equals("serialVersionUID")) ^ (javaTermName.charAt(0) == CharPool.UNDERLINE)) [ FD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_3 $$ if (!BaseSourceProcessor.portalSource || !javaTerm.isVariable()) [ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_22 $$ boolean isStatic = modifierDefinition.contains("static")[ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_24 $$ if (isFinal && isStatic && javaFieldType.startsWith("Map<")) [ CD ]
Line_13 $$ if ((javaTerm.isPrivate() && !javaTermName.equals("serialVersionUID")) ^ (javaTermName.charAt(0) == CharPool.UNDERLINE)) -->Line_14 $$ if (javaTerm.isPrivate()) [ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_6 $$ String javaTermName = javaTerm.getName()[ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_8 $$ String javaTermContent = javaTerm.getContent()[ CD ]
Line_23 $$ String javaFieldType = StringUtil.trim(matcher.group(6))-->Line_31 $$ if (immutableFieldTypes.contains(javaFieldType)) [ FD ]
Line_6 $$ String javaTermName = javaTerm.getName()-->Line_15 $$ _content = _content.replaceAll("(?<=[\\W&&[^.\"]])(" + javaTermName + ")\\b", StringPool.UNDERLINE.concat(javaTermName))[ FD ]
Line_20 $$ String modifierDefinition = StringUtil.trim(javaTermContent.substring(matcher.start(1), matcher.start(6)))-->Line_22 $$ boolean isStatic = modifierDefinition.contains("static")[ FD ]
Line_30 $$ if (isFinal) -->Line_31 $$ if (immutableFieldTypes.contains(javaFieldType)) [ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_14 $$ if (javaTerm.isPrivate()) [ FD ]
Line_3 $$ if (!BaseSourceProcessor.portalSource || !javaTerm.isVariable()) -->Line_4 $$ return[ CD ]
Line_14 $$ if (javaTerm.isPrivate()) -->Line_15 $$ _content = _content.replaceAll("(?<=[\\W&&[^.\"]])(" + javaTermName + ")\\b", StringPool.UNDERLINE.concat(javaTermName))[ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_30 $$ if (isFinal) [ CD ]
Line_32 $$ if (isStatic) -->Line_35 $$ checkStaticableFieldType(javaTerm)[ CD ]
Line_32 $$ if (isStatic) -->Line_33 $$ checkImmutableFieldType(javaTerm)[ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_8 $$ String javaTermContent = javaTerm.getContent()[ FD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_31 $$ if (immutableFieldTypes.contains(javaFieldType)) [ FD ]
Line_30 $$ if (isFinal) -->Line_39 $$ checkFinalableFieldType(javaTerm, annotationsExclusions, modifierDefinition)[ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_33 $$ checkImmutableFieldType(javaTerm)[ FD ]
Line_7 $$ Pattern pattern = Pattern.compile("\t(private |protected |public )" + "(((final|static|transient)( |\n))*)([\\s\\S]*?)" + javaTermName)-->Line_9 $$ Matcher matcher = pattern.matcher(javaTermContent)[ FD ]
Line_9 $$ Matcher matcher = pattern.matcher(javaTermContent)-->Line_10 $$ if (!matcher.find()) [ FD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_9 $$ Matcher matcher = pattern.matcher(javaTermContent)[ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_27 $$ if (!javaTerm.isPrivate()) [ FD ]
Line_14 $$ if (javaTerm.isPrivate()) -->Line_17 $$ _javaSourceProcessor.processErrorMessage(_fileName, "Only private var should start with underscore: " + _fileName + " " + javaTerm.getLineCount())[ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_21 $$ boolean isFinal = modifierDefinition.contains("final")[ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_23 $$ String javaFieldType = StringUtil.trim(matcher.group(6))[ CD ]
Line_24 $$ if (isFinal && isStatic && javaFieldType.startsWith("Map<")) -->Line_25 $$ checkMutableFieldType(javaTerm)[ CD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_17 $$ _javaSourceProcessor.processErrorMessage(_fileName, "Only private var should start with underscore: " + _fileName + " " + javaTerm.getLineCount())[ FD ]
Line_2 $$ protected void checkJavaFieldType(JavaTerm javaTerm, Set<String> annotationsExclusions, Set<String> immutableFieldTypes) throws Exception -->Line_10 $$ if (!matcher.find()) [ CD ]
Line_9 $$ Matcher matcher = pattern.matcher(javaTermContent)-->Line_20 $$ String modifierDefinition = StringUtil.trim(javaTermContent.substring(matcher.start(1), matcher.start(6)))[ FD ]
Line_20 $$ String modifierDefinition = StringUtil.trim(javaTermContent.substring(matcher.start(1), matcher.start(6)))-->Line_39 $$ checkFinalableFieldType(javaTerm, annotationsExclusions, modifierDefinition)[ FD ]
