Line_6 $$ if (matchLength == 0) -->Line_7 $$ index = data.searchStart[ CD ]
Line_51 $$ index = searcher.scan(text, data.searchStart, length)-->Line_65 $$ if (index < 0) [ FD ]
Line_5 $$ int index-->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_55 $$ index = searcher.scan(text)-->Line_74 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_41 $$ index = -1-->Line_65 $$ if (index < 0) [ FD ]
Line_7 $$ index = data.searchStart-->Line_74 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_32 $$ lastStart = matcher.start()-->Line_35 $$ index = lastStart[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_5 $$ int index[ CD ]
Line_37 $$ if (matcher.find(data.searchStart) || !nothingIfFailed && matcher.find(0)) -->Line_41 $$ index = -1[ CD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_75 $$ editor.getSelectionModel().removeSelection()[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_6 $$ if (matchLength == 0) [ CD ]
Line_65 $$ if (index < 0) -->Line_68 $$ data.label.setForeground(JBColor.foreground())[ CD ]
Line_27 $$ Matcher matcher = pattern.matcher(text)-->Line_37 $$ if (matcher.find(data.searchStart) || !nothingIfFailed && matcher.find(0)) [ FD ]
Line_65 $$ if (index < 0) -->Line_77 $$ data.ignoreCaretMove = false[ CD ]
Line_65 $$ if (index < 0) -->Line_69 $$ if (matchLength > 0) [ CD ]
Line_35 $$ index = lastStart-->Line_52 $$ index = index < 0 ? -1 : index[ FD ]
Line_51 $$ index = searcher.scan(text, data.searchStart, length)-->Line_52 $$ index = index < 0 ? -1 : index[ FD ]
Line_44 $$ index = -1-->Line_49 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_35 $$ index = lastStart-->Line_55 $$ index = searcher.scan(text)[ FD ]
Line_35 $$ index = lastStart-->Line_74 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_33 $$ lastEnd = matcher.end()-->Line_36 $$ matchLength = lastEnd - lastStart[ FD ]
Line_28 $$ if (searchBack) -->Line_31 $$ while (matcher.find() && matcher.start() < data.searchStart) [ CD ]
Line_35 $$ index = lastStart-->Line_49 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_28 $$ if (searchBack) -->Line_30 $$ int lastEnd = -1[ CD ]
Line_5 $$ int index-->Line_55 $$ index = searcher.scan(text)[ FD ]
Line_51 $$ index = searcher.scan(text, data.searchStart, length)-->Line_55 $$ index = searcher.scan(text)[ FD ]
Line_16 $$ for (int i = 0; i < len; ++i) -->Line_23 $$ buf.append(ch)[ CD ]
Line_7 $$ index = data.searchStart-->Line_35 $$ index = lastStart[ FD ]
Line_65 $$ if (index < 0) -->Line_73 $$ data.ignoreCaretMove = true[ CD ]
Line_47 $$ StringSearcher searcher = new StringSearcher(prefix, caseSensitive, !searchBack)-->Line_49 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_59 $$ if (nothingIfFailed && index < 0)[ FD ]
Line_10 $$ final CharSequence text = document.getCharsSequence()-->Line_51 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_27 $$ Matcher matcher = pattern.matcher(text)-->Line_38 $$ index = matcher.start()[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_5 $$ int index-->Line_74 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_7 $$ index = data.searchStart-->Line_65 $$ if (index < 0) [ FD ]
Line_6 $$ if (matchLength == 0) -->Line_10 $$ final CharSequence text = document.getCharsSequence()[ CD ]
Line_51 $$ index = searcher.scan(text, data.searchStart, length)-->Line_74 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_28 $$ if (searchBack) -->Line_37 $$ if (matcher.find(data.searchStart) || !nothingIfFailed && matcher.find(0)) [ CD ]
Line_26 $$ Pattern pattern = Pattern.compile(buf.toString(), caseSensitive ? 0 : Pattern.CASE_INSENSITIVE)-->Line_27 $$ Matcher matcher = pattern.matcher(text)[ FD ]
Line_38 $$ index = matcher.start()-->Line_41 $$ index = -1[ FD ]
Line_39 $$ matchLength = matcher.end() - matcher.start()-->Line_69 $$ if (matchLength > 0) [ FD ]
Line_52 $$ index = index < 0 ? -1 : index-->Line_65 $$ if (index < 0) [ FD ]
Line_17 $$ final char ch = prefix.charAt(i)-->Line_20 $$ if ("[ FD ]
Line_29 $$ int lastStart = -1-->Line_35 $$ index = lastStart[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_54 $$ if (index < 0 && !nothingIfFailed) [ FD ]
Line_5 $$ int index-->Line_7 $$ index = data.searchStart[ FD ]
Line_29 $$ int lastStart = -1-->Line_36 $$ matchLength = lastEnd - lastStart[ FD ]
Line_5 $$ int index-->Line_44 $$ index = -1[ FD ]
Line_10 $$ final CharSequence text = document.getCharsSequence()-->Line_55 $$ index = searcher.scan(text)[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_47 $$ StringSearcher searcher = new StringSearcher(prefix, caseSensitive, !searchBack)[ FD ]
Line_35 $$ index = lastStart-->Line_41 $$ index = -1[ FD ]
Line_13 $$ if (acceptableRegExp(prefix)) -->Line_15 $$ final int len = prefix.length()[ CD ]
Line_18 $$ if (ch == '*' && i != 0 && i != len - 1) -->Line_20 $$ if ("[ CD ]
Line_4 $$ int matchLength = prefix.length()-->Line_36 $$ matchLength = lastEnd - lastStart[ FD ]
Line_38 $$ index = matcher.start()-->Line_44 $$ index = -1[ FD ]
Line_18 $$ if (ch == '*' && i != 0 && i != len - 1) -->Line_19 $$ buf.append("\\w")[ CD ]
Line_13 $$ if (acceptableRegExp(prefix)) -->Line_47 $$ StringSearcher searcher = new StringSearcher(prefix, caseSensitive, !searchBack)[ CD ]
Line_49 $$ index = searcher.scan(text, 0, data.searchStart)-->Line_65 $$ if (index < 0) [ FD ]
Line_61 $$ if (data.segmentHighlighter != null) -->Line_62 $$ data.segmentHighlighter.dispose()[ CD ]
Line_35 $$ index = lastStart-->Line_65 $$ if (index < 0) [ FD ]
Line_37 $$ if (matcher.find(data.searchStart) || !nothingIfFailed && matcher.find(0)) -->Line_39 $$ matchLength = matcher.end() - matcher.start()[ CD ]
Line_3 $$ final String prefix = data.label.getText()-->Line_14 $$ final StringBuffer buf = new StringBuffer(prefix.length())[ FD ]
Line_5 $$ int index-->Line_41 $$ index = -1[ FD ]
Line_65 $$ if (index < 0) -->Line_78 $$ IdeDocumentHistory.getInstance(data.project).includeCurrentCommandAsNavigation()[ CD ]
Line_6 $$ if (matchLength == 0) -->Line_12 $$ final boolean caseSensitive = detectSmartCaseSensitive(prefix)[ CD ]
Line_31 $$ while (matcher.find() && matcher.start() < data.searchStart) -->Line_32 $$ lastStart = matcher.start()[ CD ]
Line_7 $$ index = data.searchStart-->Line_44 $$ index = -1[ FD ]
Line_54 $$ if (index < 0 && !nothingIfFailed) -->Line_55 $$ index = searcher.scan(text)[ CD ]
Line_16 $$ for (int i = 0; i < len; ++i) -->Line_17 $$ final char ch = prefix.charAt(i)[ FD ]
Line_52 $$ index = index < 0 ? -1 : index-->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_38 $$ index = matcher.start()-->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_44 $$ index = -1-->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_37 $$ if (matcher.find(data.searchStart) || !nothingIfFailed && matcher.find(0)) [ FD ]
Line_3 $$ final String prefix = data.label.getText()-->Line_15 $$ final int len = prefix.length()[ FD ]
Line_41 $$ index = -1-->Line_51 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_6 $$ if (matchLength == 0) -->Line_11 $$ final int length = document.getTextLength()[ CD ]
Line_38 $$ index = matcher.start()-->Line_49 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_3 $$ final String prefix = data.label.getText()[ CD ]
Line_14 $$ final StringBuffer buf = new StringBuffer(prefix.length())-->Line_19 $$ buf.append("\\w")[ FD ]
Line_41 $$ index = -1-->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_35 $$ index = lastStart-->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_38 $$ index = matcher.start()-->Line_51 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_27 $$ Matcher matcher = pattern.matcher(text)-->Line_39 $$ matchLength = matcher.end() - matcher.start()[ FD ]
Line_41 $$ index = -1-->Line_44 $$ index = -1[ FD ]
Line_4 $$ int matchLength = prefix.length()-->Line_69 $$ if (matchLength > 0) [ FD ]
Line_30 $$ int lastEnd = -1-->Line_36 $$ matchLength = lastEnd - lastStart[ FD ]
Line_13 $$ if (acceptableRegExp(prefix)) -->Line_48 $$ if (searchBack) [ CD ]
Line_4 $$ int matchLength = prefix.length()-->Line_39 $$ matchLength = matcher.end() - matcher.start()[ FD ]
Line_55 $$ index = searcher.scan(text)-->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_48 $$ if (searchBack) -->Line_51 $$ index = searcher.scan(text, data.searchStart, length)[ CD ]
Line_44 $$ index = -1-->Line_65 $$ if (index < 0) [ FD ]
Line_44 $$ index = -1-->Line_52 $$ index = index < 0 ? -1 : index[ FD ]
Line_32 $$ lastStart = matcher.start()-->Line_36 $$ matchLength = lastEnd - lastStart[ FD ]
Line_29 $$ int lastStart = -1-->Line_32 $$ lastStart = matcher.start()[ FD ]
Line_35 $$ index = lastStart-->Line_44 $$ index = -1[ FD ]
Line_9 $$ final Document document = editor.getDocument()-->Line_10 $$ final CharSequence text = document.getCharsSequence()[ FD ]
Line_61 $$ if (data.segmentHighlighter != null) -->Line_63 $$ data.segmentHighlighter = null[ CD ]
Line_41 $$ index = -1-->Line_74 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_7 $$ index = data.searchStart-->Line_49 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_5 $$ int index-->Line_51 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_44 $$ index = -1-->Line_55 $$ index = searcher.scan(text)[ FD ]
Line_7 $$ index = data.searchStart-->Line_41 $$ index = -1[ FD ]
Line_38 $$ index = matcher.start()-->Line_74 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_36 $$ matchLength = lastEnd - lastStart-->Line_69 $$ if (matchLength > 0) [ FD ]
Line_7 $$ index = data.searchStart-->Line_51 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_49 $$ index = searcher.scan(text, 0, data.searchStart)-->Line_51 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_51 $$ index = searcher.scan(text, data.searchStart, length)-->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_9 $$ final Document document = editor.getDocument()-->Line_11 $$ final int length = document.getTextLength()[ FD ]
Line_7 $$ index = data.searchStart-->Line_38 $$ index = matcher.start()[ FD ]
Line_69 $$ if (matchLength > 0) -->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ CD ]
Line_3 $$ final String prefix = data.label.getText()-->Line_17 $$ final char ch = prefix.charAt(i)[ FD ]
Line_20 $$ if ("-->Line_21 $$ buf.append('\\')[ CD ]
Line_47 $$ StringSearcher searcher = new StringSearcher(prefix, caseSensitive, !searchBack)-->Line_55 $$ index = searcher.scan(text)[ FD ]
Line_49 $$ index = searcher.scan(text, 0, data.searchStart)-->Line_55 $$ index = searcher.scan(text)[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_74 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_65 $$ if (index < 0) -->Line_76 $$ editor.getScrollingModel().scrollToCaret(ScrollType.CENTER)[ CD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_61 $$ if (data.segmentHighlighter != null) [ CD ]
Line_65 $$ if (index < 0) -->Line_74 $$ editor.getCaretModel().moveToOffset(index)[ CD ]
Line_52 $$ index = index < 0 ? -1 : index-->Line_74 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_59 $$ if (nothingIfFailed && index < 0)-->Line_60 $$ return[ CD ]
Line_14 $$ final StringBuffer buf = new StringBuffer(prefix.length())-->Line_23 $$ buf.append(ch)[ FD ]
Line_41 $$ index = -1-->Line_49 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_70 $$ TextAttributes attributes = editor.getColorsScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES)-->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_11 $$ final int length = document.getTextLength()-->Line_51 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_7 $$ index = data.searchStart-->Line_55 $$ index = searcher.scan(text)[ FD ]
Line_28 $$ if (searchBack) -->Line_29 $$ int lastStart = -1[ CD ]
Line_3 $$ final String prefix = data.label.getText()-->Line_12 $$ final boolean caseSensitive = detectSmartCaseSensitive(prefix)[ FD ]
Line_14 $$ final StringBuffer buf = new StringBuffer(prefix.length())-->Line_21 $$ buf.append('\\')[ FD ]
Line_13 $$ if (acceptableRegExp(prefix)) -->Line_54 $$ if (index < 0 && !nothingIfFailed) [ CD ]
Line_3 $$ final String prefix = data.label.getText()-->Line_13 $$ if (acceptableRegExp(prefix)) [ FD ]
Line_16 $$ for (int i = 0; i < len; ++i) -->Line_18 $$ if (ch == '*' && i != 0 && i != len - 1) [ CD ]
Line_44 $$ index = -1-->Line_74 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_5 $$ int index-->Line_65 $$ if (index < 0) [ FD ]
Line_16 $$ for (int i = 0; i < len; ++i) -->Line_17 $$ final char ch = prefix.charAt(i)[ CD ]
Line_41 $$ index = -1-->Line_52 $$ index = index < 0 ? -1 : index[ FD ]
Line_65 $$ if (index < 0) -->Line_75 $$ editor.getSelectionModel().removeSelection()[ CD ]
Line_27 $$ Matcher matcher = pattern.matcher(text)-->Line_33 $$ lastEnd = matcher.end()[ FD ]
Line_28 $$ if (searchBack) -->Line_36 $$ matchLength = lastEnd - lastStart[ CD ]
Line_13 $$ if (acceptableRegExp(prefix)) -->Line_16 $$ for (int i = 0; i < len; ++i) [ CD ]
Line_5 $$ int index-->Line_49 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_49 $$ index = searcher.scan(text, 0, data.searchStart)-->Line_52 $$ index = index < 0 ? -1 : index[ FD ]
Line_27 $$ Matcher matcher = pattern.matcher(text)-->Line_32 $$ lastStart = matcher.start()[ FD ]
Line_10 $$ final CharSequence text = document.getCharsSequence()-->Line_49 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_4 $$ int matchLength = prefix.length()[ CD ]
Line_49 $$ index = searcher.scan(text, 0, data.searchStart)-->Line_74 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_27 $$ Matcher matcher = pattern.matcher(text)-->Line_31 $$ while (matcher.find() && matcher.start() < data.searchStart) [ FD ]
Line_48 $$ if (searchBack) -->Line_52 $$ index = index < 0 ? -1 : index[ CD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_59 $$ if (nothingIfFailed && index < 0)[ CD ]
Line_5 $$ int index-->Line_38 $$ index = matcher.start()[ FD ]
Line_52 $$ index = index < 0 ? -1 : index-->Line_55 $$ index = searcher.scan(text)[ FD ]
Line_31 $$ while (matcher.find() && matcher.start() < data.searchStart) -->Line_33 $$ lastEnd = matcher.end()[ CD ]
Line_44 $$ index = -1-->Line_51 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_65 $$ if (index < 0) -->Line_66 $$ data.label.setForeground(JBColor.RED)[ CD ]
Line_6 $$ if (matchLength == 0) -->Line_9 $$ final Document document = editor.getDocument()[ CD ]
Line_3 $$ final String prefix = data.label.getText()-->Line_4 $$ int matchLength = prefix.length()[ FD ]
Line_38 $$ index = matcher.start()-->Line_52 $$ index = index < 0 ? -1 : index[ FD ]
Line_47 $$ StringSearcher searcher = new StringSearcher(prefix, caseSensitive, !searchBack)-->Line_51 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_15 $$ final int len = prefix.length()-->Line_16 $$ for (int i = 0; i < len; ++i) [ FD ]
Line_49 $$ index = searcher.scan(text, 0, data.searchStart)-->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_38 $$ index = matcher.start()-->Line_65 $$ if (index < 0) [ FD ]
Line_35 $$ index = lastStart-->Line_51 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_48 $$ if (searchBack) -->Line_49 $$ index = searcher.scan(text, 0, data.searchStart)[ CD ]
Line_30 $$ int lastEnd = -1-->Line_33 $$ lastEnd = matcher.end()[ FD ]
Line_5 $$ int index-->Line_35 $$ index = lastStart[ FD ]
Line_6 $$ if (matchLength == 0) -->Line_13 $$ if (acceptableRegExp(prefix)) [ CD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_9 $$ final Document document = editor.getDocument()[ FD ]
Line_35 $$ index = lastStart-->Line_38 $$ index = matcher.start()[ FD ]
Line_69 $$ if (matchLength > 0) -->Line_70 $$ TextAttributes attributes = editor.getColorsScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES)[ CD ]
Line_7 $$ index = data.searchStart-->Line_71 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_17 $$ final char ch = prefix.charAt(i)-->Line_23 $$ buf.append(ch)[ FD ]
Line_41 $$ index = -1-->Line_55 $$ index = searcher.scan(text)[ FD ]
Line_7 $$ index = data.searchStart-->Line_52 $$ index = index < 0 ? -1 : index[ FD ]
Line_5 $$ int index-->Line_52 $$ index = index < 0 ? -1 : index[ FD ]
Line_4 $$ int matchLength = prefix.length()-->Line_6 $$ if (matchLength == 0) [ FD ]
Line_14 $$ final StringBuffer buf = new StringBuffer(prefix.length())-->Line_26 $$ Pattern pattern = Pattern.compile(buf.toString(), caseSensitive ? 0 : Pattern.CASE_INSENSITIVE)[ FD ]
Line_10 $$ final CharSequence text = document.getCharsSequence()-->Line_27 $$ Matcher matcher = pattern.matcher(text)[ FD ]
Line_36 $$ matchLength = lastEnd - lastStart-->Line_39 $$ matchLength = matcher.end() - matcher.start()[ FD ]
Line_28 $$ if (searchBack) -->Line_35 $$ index = lastStart[ CD ]
Line_38 $$ index = matcher.start()-->Line_55 $$ index = searcher.scan(text)[ FD ]
Line_13 $$ if (acceptableRegExp(prefix)) -->Line_14 $$ final StringBuffer buf = new StringBuffer(prefix.length())[ CD ]
Line_55 $$ index = searcher.scan(text)-->Line_65 $$ if (index < 0) [ FD ]
Line_37 $$ if (matcher.find(data.searchStart) || !nothingIfFailed && matcher.find(0)) -->Line_38 $$ index = matcher.start()[ CD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_76 $$ editor.getScrollingModel().scrollToCaret(ScrollType.CENTER)[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_65 $$ if (index < 0) [ CD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_70 $$ TextAttributes attributes = editor.getColorsScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES)[ FD ]
