Line_2 $$ private static Map<HgFile, HgResolveStatusEnum> handleResult(VirtualFile repo, HgCommandResult result) -->Line_14 $$ return resolveStatus[ CD ]
Line_4 $$ for (String line : result.getOutputLines()) -->Line_5 $$ if (StringUtil.isEmptyOrSpaces(line) || line.length() < ITEM_COUNT) [ FD ]
Line_8 $$ final HgResolveStatusEnum status = HgResolveStatusEnum.valueOf(line.charAt(0))-->Line_11 $$ resolveStatus.put(new HgFile(repo, ioFile), status)[ FD ]
Line_9 $$ if (status != null) -->Line_11 $$ resolveStatus.put(new HgFile(repo, ioFile), status)[ CD ]
Line_2 $$ private static Map<HgFile, HgResolveStatusEnum> handleResult(VirtualFile repo, HgCommandResult result) -->Line_3 $$ final Map<HgFile, HgResolveStatusEnum> resolveStatus = new HashMap<HgFile, HgResolveStatusEnum>()[ CD ]
Line_3 $$ final Map<HgFile, HgResolveStatusEnum> resolveStatus = new HashMap<HgFile, HgResolveStatusEnum>()-->Line_11 $$ resolveStatus.put(new HgFile(repo, ioFile), status)[ FD ]
Line_2 $$ private static Map<HgFile, HgResolveStatusEnum> handleResult(VirtualFile repo, HgCommandResult result) -->Line_4 $$ for (String line : result.getOutputLines()) [ FD ]
Line_4 $$ for (String line : result.getOutputLines()) -->Line_8 $$ final HgResolveStatusEnum status = HgResolveStatusEnum.valueOf(line.charAt(0))[ FD ]
Line_4 $$ for (String line : result.getOutputLines()) -->Line_10 $$ File ioFile = new File(repo.getPath(), line.substring(2))[ FD ]
Line_9 $$ if (status != null) -->Line_10 $$ File ioFile = new File(repo.getPath(), line.substring(2))[ CD ]
Line_8 $$ final HgResolveStatusEnum status = HgResolveStatusEnum.valueOf(line.charAt(0))-->Line_9 $$ if (status != null) [ FD ]
Line_2 $$ private static Map<HgFile, HgResolveStatusEnum> handleResult(VirtualFile repo, HgCommandResult result) -->Line_10 $$ File ioFile = new File(repo.getPath(), line.substring(2))[ FD ]
