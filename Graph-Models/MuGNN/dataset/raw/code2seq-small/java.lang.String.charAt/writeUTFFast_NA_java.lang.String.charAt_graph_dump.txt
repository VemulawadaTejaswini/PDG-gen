Line_4 $$ if (len < STRING_LENGTH_THRESHOLD) -->Line_15 $$ if (isAscii) [ CD ]
Line_4 $$ if (len < STRING_LENGTH_THRESHOLD) -->Line_7 $$ for (int i = 0; i < len; i++) [ CD ]
Line_2 $$ public static void writeUTFFast(@NotNull byte[] buffer, @NotNull DataOutput storage, @NotNull final String value) throws IOException -->Line_4 $$ if (len < STRING_LENGTH_THRESHOLD) [ CD ]
Line_6 $$ boolean isAscii = true-->Line_10 $$ isAscii = false[ FD ]
Line_4 $$ if (len < STRING_LENGTH_THRESHOLD) -->Line_5 $$ buffer[0] = (byte) len[ CD ]
Line_7 $$ for (int i = 0; i < len; i++) -->Line_9 $$ if (c >= 128) [ CD ]
Line_15 $$ if (isAscii) -->Line_17 $$ return[ CD ]
Line_9 $$ if (c >= 128) -->Line_10 $$ isAscii = false[ CD ]
Line_7 $$ for (int i = 0; i < len; i++) -->Line_8 $$ char c = value.charAt(i)[ CD ]
Line_2 $$ public static void writeUTFFast(@NotNull byte[] buffer, @NotNull DataOutput storage, @NotNull final String value) throws IOException -->Line_22 $$ storage.writeUTF(value)[ FD ]
Line_2 $$ public static void writeUTFFast(@NotNull byte[] buffer, @NotNull DataOutput storage, @NotNull final String value) throws IOException -->Line_8 $$ char c = value.charAt(i)[ FD ]
Line_2 $$ public static void writeUTFFast(@NotNull byte[] buffer, @NotNull DataOutput storage, @NotNull final String value) throws IOException -->Line_16 $$ storage.write(buffer, 0, len + STRING_HEADER_SIZE)[ FD ]
Line_2 $$ public static void writeUTFFast(@NotNull byte[] buffer, @NotNull DataOutput storage, @NotNull final String value) throws IOException -->Line_3 $$ int len = value.length()[ FD ]
Line_2 $$ public static void writeUTFFast(@NotNull byte[] buffer, @NotNull DataOutput storage, @NotNull final String value) throws IOException -->Line_20 $$ storage.writeByte((byte) 0xFF)[ FD ]
Line_2 $$ public static void writeUTFFast(@NotNull byte[] buffer, @NotNull DataOutput storage, @NotNull final String value) throws IOException -->Line_20 $$ storage.writeByte((byte) 0xFF)[ CD ]
Line_2 $$ public static void writeUTFFast(@NotNull byte[] buffer, @NotNull DataOutput storage, @NotNull final String value) throws IOException -->Line_24 $$ storage.writeUTF(LONGER_THAN_64K_MARKER)[ FD ]
Line_15 $$ if (isAscii) -->Line_16 $$ storage.write(buffer, 0, len + STRING_HEADER_SIZE)[ CD ]
Line_2 $$ public static void writeUTFFast(@NotNull byte[] buffer, @NotNull DataOutput storage, @NotNull final String value) throws IOException -->Line_3 $$ int len = value.length()[ CD ]
Line_7 $$ for (int i = 0; i < len; i++) -->Line_8 $$ char c = value.charAt(i)[ FD ]
Line_8 $$ char c = value.charAt(i)-->Line_9 $$ if (c >= 128) [ FD ]
Line_4 $$ if (len < STRING_LENGTH_THRESHOLD) -->Line_6 $$ boolean isAscii = true[ CD ]
Line_3 $$ int len = value.length()-->Line_4 $$ if (len < STRING_LENGTH_THRESHOLD) [ FD ]
Line_3 $$ int len = value.length()-->Line_7 $$ for (int i = 0; i < len; i++) [ FD ]
Line_7 $$ for (int i = 0; i < len; i++) -->Line_13 $$ buffer[i + STRING_HEADER_SIZE] = (byte) c[ CD ]
Line_2 $$ public static void writeUTFFast(@NotNull byte[] buffer, @NotNull DataOutput storage, @NotNull final String value) throws IOException -->Line_25 $$ writeString(value, storage)[ FD ]
