Line_2 $$ private static boolean lexemsEqual(final PsiClass classToBind, final PsiClass newClass) -->Line_8 $$ newTextLexer.start(newBuffer)[ CD ]
Line_9 $$ while (true) -->Line_32 $$ oldTextLexer.advance()[ CD ]
Line_18 $$ if (oldLexem != TokenType.WHITE_SPACE && oldLexem != JavaDocElementType.DOC_COMMENT) -->Line_22 $$ int newLength = newTextLexer.getTokenEnd() - newTextLexer.getTokenStart()[ CD ]
Line_5 $$ String oldBuffer = classToBind.getText()-->Line_27 $$ if (oldBuffer.charAt(oldStart + i) != newBuffer.charAt(newStart + i)) [ FD ]
Line_11 $$ IElementType newLexem = newTextLexer.getTokenType()-->Line_15 $$ if (oldLexem != newLexem) [ FD ]
Line_4 $$ Lexer newTextLexer = JavaParserDefinition.createLexer(LanguageLevel.HIGHEST)-->Line_20 $$ int newStart = newTextLexer.getTokenStart()[ FD ]
Line_3 $$ Lexer oldTextLexer = JavaParserDefinition.createLexer(LanguageLevel.HIGHEST)-->Line_32 $$ oldTextLexer.advance()[ FD ]
Line_18 $$ if (oldLexem != TokenType.WHITE_SPACE && oldLexem != JavaDocElementType.DOC_COMMENT) -->Line_19 $$ int oldStart = oldTextLexer.getTokenStart()[ CD ]
Line_9 $$ while (true) -->Line_10 $$ IElementType oldLexem = oldTextLexer.getTokenType()[ CD ]
Line_3 $$ Lexer oldTextLexer = JavaParserDefinition.createLexer(LanguageLevel.HIGHEST)-->Line_21 $$ int oldLength = oldTextLexer.getTokenEnd() - oldTextLexer.getTokenStart()[ FD ]
Line_18 $$ if (oldLexem != TokenType.WHITE_SPACE && oldLexem != JavaDocElementType.DOC_COMMENT) -->Line_20 $$ int newStart = newTextLexer.getTokenStart()[ CD ]
Line_9 $$ while (true) -->Line_11 $$ IElementType newLexem = newTextLexer.getTokenType()[ CD ]
Line_10 $$ IElementType oldLexem = oldTextLexer.getTokenType()-->Line_15 $$ if (oldLexem != newLexem) [ FD ]
Line_3 $$ Lexer oldTextLexer = JavaParserDefinition.createLexer(LanguageLevel.HIGHEST)-->Line_7 $$ oldTextLexer.start(oldBuffer)[ FD ]
Line_18 $$ if (oldLexem != TokenType.WHITE_SPACE && oldLexem != JavaDocElementType.DOC_COMMENT) -->Line_23 $$ if (oldLength != newLength) [ CD ]
Line_2 $$ private static boolean lexemsEqual(final PsiClass classToBind, final PsiClass newClass) -->Line_6 $$ String newBuffer = newClass.getText()[ CD ]
Line_3 $$ Lexer oldTextLexer = JavaParserDefinition.createLexer(LanguageLevel.HIGHEST)-->Line_19 $$ int oldStart = oldTextLexer.getTokenStart()[ FD ]
Line_2 $$ private static boolean lexemsEqual(final PsiClass classToBind, final PsiClass newClass) -->Line_9 $$ while (true) [ CD ]
Line_4 $$ Lexer newTextLexer = JavaParserDefinition.createLexer(LanguageLevel.HIGHEST)-->Line_8 $$ newTextLexer.start(newBuffer)[ FD ]
Line_4 $$ Lexer newTextLexer = JavaParserDefinition.createLexer(LanguageLevel.HIGHEST)-->Line_33 $$ newTextLexer.advance()[ FD ]
Line_3 $$ Lexer oldTextLexer = JavaParserDefinition.createLexer(LanguageLevel.HIGHEST)-->Line_10 $$ IElementType oldLexem = oldTextLexer.getTokenType()[ FD ]
Line_4 $$ Lexer newTextLexer = JavaParserDefinition.createLexer(LanguageLevel.HIGHEST)-->Line_11 $$ IElementType newLexem = newTextLexer.getTokenType()[ FD ]
Line_21 $$ int oldLength = oldTextLexer.getTokenEnd() - oldTextLexer.getTokenStart()-->Line_26 $$ for (int i = 0; i < oldLength; i++) [ FD ]
Line_18 $$ if (oldLexem != TokenType.WHITE_SPACE && oldLexem != JavaDocElementType.DOC_COMMENT) -->Line_21 $$ int oldLength = oldTextLexer.getTokenEnd() - oldTextLexer.getTokenStart()[ CD ]
Line_23 $$ if (oldLength != newLength) -->Line_24 $$ return false[ CD ]
Line_2 $$ private static boolean lexemsEqual(final PsiClass classToBind, final PsiClass newClass) -->Line_7 $$ oldTextLexer.start(oldBuffer)[ CD ]
Line_2 $$ private static boolean lexemsEqual(final PsiClass classToBind, final PsiClass newClass) -->Line_5 $$ String oldBuffer = classToBind.getText()[ FD ]
Line_4 $$ Lexer newTextLexer = JavaParserDefinition.createLexer(LanguageLevel.HIGHEST)-->Line_22 $$ int newLength = newTextLexer.getTokenEnd() - newTextLexer.getTokenStart()[ FD ]
Line_21 $$ int oldLength = oldTextLexer.getTokenEnd() - oldTextLexer.getTokenStart()-->Line_23 $$ if (oldLength != newLength) [ FD ]
Line_6 $$ String newBuffer = newClass.getText()-->Line_8 $$ newTextLexer.start(newBuffer)[ FD ]
Line_12 $$ if (oldLexem == null || newLexem == null) -->Line_13 $$ return oldLexem == null && newLexem == null[ CD ]
Line_22 $$ int newLength = newTextLexer.getTokenEnd() - newTextLexer.getTokenStart()-->Line_23 $$ if (oldLength != newLength) [ FD ]
Line_5 $$ String oldBuffer = classToBind.getText()-->Line_7 $$ oldTextLexer.start(oldBuffer)[ FD ]
Line_15 $$ if (oldLexem != newLexem) -->Line_16 $$ return false[ CD ]
Line_9 $$ while (true) -->Line_33 $$ newTextLexer.advance()[ CD ]
Line_27 $$ if (oldBuffer.charAt(oldStart + i) != newBuffer.charAt(newStart + i)) -->Line_28 $$ return false[ CD ]
Line_2 $$ private static boolean lexemsEqual(final PsiClass classToBind, final PsiClass newClass) -->Line_6 $$ String newBuffer = newClass.getText()[ FD ]
Line_9 $$ while (true) -->Line_12 $$ if (oldLexem == null || newLexem == null) [ CD ]
Line_6 $$ String newBuffer = newClass.getText()-->Line_27 $$ if (oldBuffer.charAt(oldStart + i) != newBuffer.charAt(newStart + i)) [ FD ]
Line_9 $$ while (true) -->Line_15 $$ if (oldLexem != newLexem) [ CD ]
Line_26 $$ for (int i = 0; i < oldLength; i++) -->Line_27 $$ if (oldBuffer.charAt(oldStart + i) != newBuffer.charAt(newStart + i)) [ CD ]
Line_2 $$ private static boolean lexemsEqual(final PsiClass classToBind, final PsiClass newClass) -->Line_3 $$ Lexer oldTextLexer = JavaParserDefinition.createLexer(LanguageLevel.HIGHEST)[ CD ]
Line_18 $$ if (oldLexem != TokenType.WHITE_SPACE && oldLexem != JavaDocElementType.DOC_COMMENT) -->Line_26 $$ for (int i = 0; i < oldLength; i++) [ CD ]
Line_2 $$ private static boolean lexemsEqual(final PsiClass classToBind, final PsiClass newClass) -->Line_5 $$ String oldBuffer = classToBind.getText()[ CD ]
Line_2 $$ private static boolean lexemsEqual(final PsiClass classToBind, final PsiClass newClass) -->Line_4 $$ Lexer newTextLexer = JavaParserDefinition.createLexer(LanguageLevel.HIGHEST)[ CD ]
Line_9 $$ while (true) -->Line_18 $$ if (oldLexem != TokenType.WHITE_SPACE && oldLexem != JavaDocElementType.DOC_COMMENT) [ CD ]
