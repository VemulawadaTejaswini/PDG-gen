Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_16 $$ final String expressionText = expression.getText()[ CD ]
Line_60 $$ final String operationSignText = operationSign.getText()-->Line_61 $$ final char sign = operationSignText.charAt(0)[ FD ]
Line_22 $$ final IElementType tokenType = prefixExpression.getOperationTokenType()-->Line_25 $$ if (JavaTokenType.MINUSMINUS.equals(tokenType)) [ FD ]
Line_22 $$ final IElementType tokenType = prefixExpression.getOperationTokenType()-->Line_23 $$ if (JavaTokenType.PLUSPLUS.equals(tokenType)) [ FD ]
Line_48 $$ newStatement = factory.createStatementFromText(expressionText + '=' + newExpressionText + "+1;", statement)-->Line_50 $$ newStatement = factory.createStatementFromText(expressionText + '=' + newExpressionText + "-1;", statement)[ FD ]
Line_12 $$ final String newExpressionText = buildNewExpressionText(expression, unboxedType)-->Line_70 $$ PsiReplacementUtil.replaceExpression(expression, newExpressionText)[ FD ]
Line_47 $$ if (JavaTokenType.PLUSPLUS.equals(tokenType)) -->Line_50 $$ newStatement = factory.createStatementFromText(expressionText + '=' + newExpressionText + "-1;", statement)[ CD ]
Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_13 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project)[ FD ]
Line_21 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) parent-->Line_26 $$ PsiReplacementUtil.replaceExpression(prefixExpression, expressionText + '=' + newExpressionText + "-1")[ FD ]
Line_9 $$ if (unboxedType == null) -->Line_10 $$ return[ CD ]
Line_59 $$ final PsiJavaToken operationSign = assignmentExpression.getOperationSign()-->Line_60 $$ final String operationSignText = operationSign.getText()[ FD ]
Line_55 $$ if (parent instanceof PsiAssignmentExpression) -->Line_57 $$ final PsiExpression lExpression = assignmentExpression.getLExpression()[ CD ]
Line_55 $$ if (parent instanceof PsiAssignmentExpression) -->Line_73 $$ PsiReplacementUtil.replaceExpression(expression, newExpressionText)[ CD ]
Line_34 $$ if (grandParent instanceof PsiExpressionStatement) -->Line_47 $$ if (JavaTokenType.PLUSPLUS.equals(tokenType)) [ CD ]
Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_14 $$ final PsiElementFactory factory = psiFacade.getElementFactory()[ CD ]
Line_20 $$ if (parent instanceof PsiPrefixExpression && !unboxedType.equalsToText("boolean")) -->Line_30 $$ if (parent instanceof PsiPostfixExpression) [ CD ]
Line_31 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) parent-->Line_32 $$ final IElementType tokenType = postfixExpression.getOperationTokenType()[ FD ]
Line_3 $$ final PsiExpression expression = (PsiExpression) descriptor.getPsiElement()-->Line_73 $$ PsiReplacementUtil.replaceExpression(expression, newExpressionText)[ FD ]
Line_30 $$ if (parent instanceof PsiPostfixExpression) -->Line_33 $$ final PsiElement grandParent = postfixExpression.getParent()[ CD ]
Line_56 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent-->Line_59 $$ final PsiJavaToken operationSign = assignmentExpression.getOperationSign()[ FD ]
Line_62 $$ final PsiExpression rExpression = assignmentExpression.getRExpression()-->Line_66 $$ final String text = lExpression.getText() + '=' + newExpressionText + sign + rExpression.getText()[ FD ]
Line_34 $$ if (grandParent instanceof PsiExpressionStatement) -->Line_43 $$ if (statement == null) [ CD ]
Line_48 $$ newStatement = factory.createStatementFromText(expressionText + '=' + newExpressionText + "+1;", statement)-->Line_53 $$ greatGrandParent.addAfter(newStatement, statement)[ FD ]
Line_5 $$ if (type == null) -->Line_6 $$ return[ CD ]
Line_21 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) parent-->Line_28 $$ PsiReplacementUtil.replaceExpression(prefixExpression, prefixExpression.getOperationSign().getText() + newExpressionText)[ FD ]
Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_12 $$ final String newExpressionText = buildNewExpressionText(expression, unboxedType)[ CD ]
Line_58 $$ if (expression.equals(lExpression)) -->Line_60 $$ final String operationSignText = operationSign.getText()[ CD ]
Line_67 $$ final PsiExpression newExpression = factory.createExpressionFromText(text, assignmentExpression)-->Line_68 $$ assignmentExpression.replace(newExpression)[ FD ]
Line_21 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) parent-->Line_24 $$ PsiReplacementUtil.replaceExpression(prefixExpression, expressionText + '=' + newExpressionText + "+1")[ FD ]
Line_34 $$ if (grandParent instanceof PsiExpressionStatement) -->Line_53 $$ greatGrandParent.addAfter(newStatement, statement)[ CD ]
Line_56 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent-->Line_57 $$ final PsiExpression lExpression = assignmentExpression.getLExpression()[ FD ]
Line_56 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent-->Line_68 $$ assignmentExpression.replace(newExpression)[ FD ]
Line_41 $$ final PsiElement element = postfixExpression.replace(postfixExpression.getOperand())-->Line_42 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)[ FD ]
Line_8 $$ final PsiPrimitiveType unboxedType = (PsiPrimitiveType) ExpectedTypeUtils.findExpectedType(expression, false, true)-->Line_12 $$ final String newExpressionText = buildNewExpressionText(expression, unboxedType)[ FD ]
Line_12 $$ final String newExpressionText = buildNewExpressionText(expression, unboxedType)-->Line_19 $$ PsiReplacementUtil.replaceExpression(typeCastExpression, newExpressionText)[ FD ]
Line_35 $$ if (JavaTokenType.PLUSPLUS.equals(tokenType)) -->Line_37 $$ if (JavaTokenType.MINUSMINUS.equals(tokenType)) [ CD ]
Line_58 $$ if (expression.equals(lExpression)) -->Line_68 $$ assignmentExpression.replace(newExpression)[ CD ]
Line_17 $$ if (parent instanceof PsiTypeCastExpression) -->Line_19 $$ PsiReplacementUtil.replaceExpression(typeCastExpression, newExpressionText)[ CD ]
Line_58 $$ if (expression.equals(lExpression)) -->Line_66 $$ final String text = lExpression.getText() + '=' + newExpressionText + sign + rExpression.getText()[ CD ]
Line_31 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) parent-->Line_41 $$ final PsiElement element = postfixExpression.replace(postfixExpression.getOperand())[ FD ]
Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_4 $$ final PsiType type = expression.getType()[ CD ]
Line_62 $$ final PsiExpression rExpression = assignmentExpression.getRExpression()-->Line_63 $$ if (rExpression == null) [ FD ]
Line_31 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) parent-->Line_38 $$ PsiReplacementUtil.replaceExpression(postfixExpression, expressionText + '=' + newExpressionText + "-1")[ FD ]
Line_42 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_52 $$ final PsiElement greatGrandParent = statement.getParent()[ FD ]
Line_14 $$ final PsiElementFactory factory = psiFacade.getElementFactory()-->Line_50 $$ newStatement = factory.createStatementFromText(expressionText + '=' + newExpressionText + "-1;", statement)[ FD ]
Line_15 $$ final PsiElement parent = expression.getParent()-->Line_55 $$ if (parent instanceof PsiAssignmentExpression) [ FD ]
Line_31 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) parent-->Line_33 $$ final PsiElement grandParent = postfixExpression.getParent()[ FD ]
Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_3 $$ final PsiExpression expression = (PsiExpression) descriptor.getPsiElement()[ FD ]
Line_34 $$ if (grandParent instanceof PsiExpressionStatement) -->Line_42 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)[ CD ]
Line_55 $$ if (parent instanceof PsiAssignmentExpression) -->Line_56 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent[ CD ]
Line_46 $$ final PsiStatement newStatement-->Line_53 $$ greatGrandParent.addAfter(newStatement, statement)[ FD ]
Line_33 $$ final PsiElement grandParent = postfixExpression.getParent()-->Line_34 $$ if (grandParent instanceof PsiExpressionStatement) [ FD ]
Line_50 $$ newStatement = factory.createStatementFromText(expressionText + '=' + newExpressionText + "-1;", statement)-->Line_53 $$ greatGrandParent.addAfter(newStatement, statement)[ FD ]
Line_30 $$ if (parent instanceof PsiPostfixExpression) -->Line_55 $$ if (parent instanceof PsiAssignmentExpression) [ CD ]
Line_46 $$ final PsiStatement newStatement-->Line_48 $$ newStatement = factory.createStatementFromText(expressionText + '=' + newExpressionText + "+1;", statement)[ FD ]
Line_22 $$ final IElementType tokenType = prefixExpression.getOperationTokenType()-->Line_37 $$ if (JavaTokenType.MINUSMINUS.equals(tokenType)) [ FD ]
Line_22 $$ final IElementType tokenType = prefixExpression.getOperationTokenType()-->Line_47 $$ if (JavaTokenType.PLUSPLUS.equals(tokenType)) [ FD ]
Line_8 $$ final PsiPrimitiveType unboxedType = (PsiPrimitiveType) ExpectedTypeUtils.findExpectedType(expression, false, true)-->Line_9 $$ if (unboxedType == null) [ FD ]
Line_52 $$ final PsiElement greatGrandParent = statement.getParent()-->Line_53 $$ greatGrandParent.addAfter(newStatement, statement)[ FD ]
Line_63 $$ if (rExpression == null) -->Line_64 $$ return[ CD ]
Line_42 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_43 $$ if (statement == null) [ FD ]
Line_34 $$ if (grandParent instanceof PsiExpressionStatement) -->Line_35 $$ if (JavaTokenType.PLUSPLUS.equals(tokenType)) [ CD ]
Line_13 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project)-->Line_14 $$ final PsiElementFactory factory = psiFacade.getElementFactory()[ FD ]
Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_5 $$ if (type == null) [ CD ]
Line_57 $$ final PsiExpression lExpression = assignmentExpression.getLExpression()-->Line_58 $$ if (expression.equals(lExpression)) [ FD ]
Line_56 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent-->Line_62 $$ final PsiExpression rExpression = assignmentExpression.getRExpression()[ FD ]
Line_42 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_50 $$ newStatement = factory.createStatementFromText(expressionText + '=' + newExpressionText + "-1;", statement)[ FD ]
Line_3 $$ final PsiExpression expression = (PsiExpression) descriptor.getPsiElement()-->Line_16 $$ final String expressionText = expression.getText()[ FD ]
Line_37 $$ if (JavaTokenType.MINUSMINUS.equals(tokenType)) -->Line_38 $$ PsiReplacementUtil.replaceExpression(postfixExpression, expressionText + '=' + newExpressionText + "-1")[ CD ]
Line_22 $$ final IElementType tokenType = prefixExpression.getOperationTokenType()-->Line_35 $$ if (JavaTokenType.PLUSPLUS.equals(tokenType)) [ FD ]
Line_42 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_48 $$ newStatement = factory.createStatementFromText(expressionText + '=' + newExpressionText + "+1;", statement)[ FD ]
Line_15 $$ final PsiElement parent = expression.getParent()-->Line_17 $$ if (parent instanceof PsiTypeCastExpression) [ FD ]
Line_30 $$ if (parent instanceof PsiPostfixExpression) -->Line_34 $$ if (grandParent instanceof PsiExpressionStatement) [ CD ]
Line_25 $$ if (JavaTokenType.MINUSMINUS.equals(tokenType)) -->Line_28 $$ PsiReplacementUtil.replaceExpression(prefixExpression, prefixExpression.getOperationSign().getText() + newExpressionText)[ CD ]
Line_66 $$ final String text = lExpression.getText() + '=' + newExpressionText + sign + rExpression.getText()-->Line_67 $$ final PsiExpression newExpression = factory.createExpressionFromText(text, assignmentExpression)[ FD ]
Line_15 $$ final PsiElement parent = expression.getParent()-->Line_30 $$ if (parent instanceof PsiPostfixExpression) [ FD ]
Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_13 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project)[ CD ]
Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_3 $$ final PsiExpression expression = (PsiExpression) descriptor.getPsiElement()[ CD ]
Line_58 $$ if (expression.equals(lExpression)) -->Line_63 $$ if (rExpression == null) [ CD ]
Line_3 $$ final PsiExpression expression = (PsiExpression) descriptor.getPsiElement()-->Line_12 $$ final String newExpressionText = buildNewExpressionText(expression, unboxedType)[ FD ]
Line_42 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_53 $$ greatGrandParent.addAfter(newStatement, statement)[ FD ]
Line_14 $$ final PsiElementFactory factory = psiFacade.getElementFactory()-->Line_48 $$ newStatement = factory.createStatementFromText(expressionText + '=' + newExpressionText + "+1;", statement)[ FD ]
Line_18 $$ final PsiTypeCastExpression typeCastExpression = (PsiTypeCastExpression) parent-->Line_19 $$ PsiReplacementUtil.replaceExpression(typeCastExpression, newExpressionText)[ FD ]
Line_30 $$ if (parent instanceof PsiPostfixExpression) -->Line_32 $$ final IElementType tokenType = postfixExpression.getOperationTokenType()[ CD ]
Line_25 $$ if (JavaTokenType.MINUSMINUS.equals(tokenType)) -->Line_26 $$ PsiReplacementUtil.replaceExpression(prefixExpression, expressionText + '=' + newExpressionText + "-1")[ CD ]
Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_8 $$ final PsiPrimitiveType unboxedType = (PsiPrimitiveType) ExpectedTypeUtils.findExpectedType(expression, false, true)[ CD ]
Line_23 $$ if (JavaTokenType.PLUSPLUS.equals(tokenType)) -->Line_24 $$ PsiReplacementUtil.replaceExpression(prefixExpression, expressionText + '=' + newExpressionText + "+1")[ CD ]
Line_31 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) parent-->Line_36 $$ PsiReplacementUtil.replaceExpression(postfixExpression, expressionText + '=' + newExpressionText + "+1")[ FD ]
Line_14 $$ final PsiElementFactory factory = psiFacade.getElementFactory()-->Line_67 $$ final PsiExpression newExpression = factory.createExpressionFromText(text, assignmentExpression)[ FD ]
Line_20 $$ if (parent instanceof PsiPrefixExpression && !unboxedType.equalsToText("boolean")) -->Line_22 $$ final IElementType tokenType = prefixExpression.getOperationTokenType()[ CD ]
Line_58 $$ if (expression.equals(lExpression)) -->Line_62 $$ final PsiExpression rExpression = assignmentExpression.getRExpression()[ CD ]
Line_55 $$ if (parent instanceof PsiAssignmentExpression) -->Line_58 $$ if (expression.equals(lExpression)) [ CD ]
Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_15 $$ final PsiElement parent = expression.getParent()[ CD ]
Line_3 $$ final PsiExpression expression = (PsiExpression) descriptor.getPsiElement()-->Line_58 $$ if (expression.equals(lExpression)) [ FD ]
Line_17 $$ if (parent instanceof PsiTypeCastExpression) -->Line_18 $$ final PsiTypeCastExpression typeCastExpression = (PsiTypeCastExpression) parent[ CD ]
Line_30 $$ if (parent instanceof PsiPostfixExpression) -->Line_31 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) parent[ CD ]
Line_35 $$ if (JavaTokenType.PLUSPLUS.equals(tokenType)) -->Line_36 $$ PsiReplacementUtil.replaceExpression(postfixExpression, expressionText + '=' + newExpressionText + "+1")[ CD ]
Line_47 $$ if (JavaTokenType.PLUSPLUS.equals(tokenType)) -->Line_48 $$ newStatement = factory.createStatementFromText(expressionText + '=' + newExpressionText + "+1;", statement)[ CD ]
Line_58 $$ if (expression.equals(lExpression)) -->Line_70 $$ PsiReplacementUtil.replaceExpression(expression, newExpressionText)[ CD ]
Line_3 $$ final PsiExpression expression = (PsiExpression) descriptor.getPsiElement()-->Line_4 $$ final PsiType type = expression.getType()[ FD ]
Line_12 $$ final String newExpressionText = buildNewExpressionText(expression, unboxedType)-->Line_73 $$ PsiReplacementUtil.replaceExpression(expression, newExpressionText)[ FD ]
Line_34 $$ if (grandParent instanceof PsiExpressionStatement) -->Line_52 $$ final PsiElement greatGrandParent = statement.getParent()[ CD ]
Line_3 $$ final PsiExpression expression = (PsiExpression) descriptor.getPsiElement()-->Line_70 $$ PsiReplacementUtil.replaceExpression(expression, newExpressionText)[ FD ]
Line_20 $$ if (parent instanceof PsiPrefixExpression && !unboxedType.equalsToText("boolean")) -->Line_21 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) parent[ CD ]
Line_56 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent-->Line_67 $$ final PsiExpression newExpression = factory.createExpressionFromText(text, assignmentExpression)[ FD ]
Line_34 $$ if (grandParent instanceof PsiExpressionStatement) -->Line_46 $$ final PsiStatement newStatement[ CD ]
Line_43 $$ if (statement == null) -->Line_44 $$ return[ CD ]
Line_58 $$ if (expression.equals(lExpression)) -->Line_61 $$ final char sign = operationSignText.charAt(0)[ CD ]
Line_3 $$ final PsiExpression expression = (PsiExpression) descriptor.getPsiElement()-->Line_8 $$ final PsiPrimitiveType unboxedType = (PsiPrimitiveType) ExpectedTypeUtils.findExpectedType(expression, false, true)[ FD ]
Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_17 $$ if (parent instanceof PsiTypeCastExpression) [ CD ]
Line_8 $$ final PsiPrimitiveType unboxedType = (PsiPrimitiveType) ExpectedTypeUtils.findExpectedType(expression, false, true)-->Line_20 $$ if (parent instanceof PsiPrefixExpression && !unboxedType.equalsToText("boolean")) [ FD ]
Line_21 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) parent-->Line_22 $$ final IElementType tokenType = prefixExpression.getOperationTokenType()[ FD ]
Line_20 $$ if (parent instanceof PsiPrefixExpression && !unboxedType.equalsToText("boolean")) -->Line_23 $$ if (JavaTokenType.PLUSPLUS.equals(tokenType)) [ CD ]
Line_4 $$ final PsiType type = expression.getType()-->Line_5 $$ if (type == null) [ FD ]
Line_2 $$ public void doFix(Project project, ProblemDescriptor descriptor) -->Line_9 $$ if (unboxedType == null) [ CD ]
Line_34 $$ if (grandParent instanceof PsiExpressionStatement) -->Line_41 $$ final PsiElement element = postfixExpression.replace(postfixExpression.getOperand())[ CD ]
Line_17 $$ if (parent instanceof PsiTypeCastExpression) -->Line_20 $$ if (parent instanceof PsiPrefixExpression && !unboxedType.equalsToText("boolean")) [ CD ]
Line_23 $$ if (JavaTokenType.PLUSPLUS.equals(tokenType)) -->Line_25 $$ if (JavaTokenType.MINUSMINUS.equals(tokenType)) [ CD ]
Line_58 $$ if (expression.equals(lExpression)) -->Line_67 $$ final PsiExpression newExpression = factory.createExpressionFromText(text, assignmentExpression)[ CD ]
Line_57 $$ final PsiExpression lExpression = assignmentExpression.getLExpression()-->Line_66 $$ final String text = lExpression.getText() + '=' + newExpressionText + sign + rExpression.getText()[ FD ]
Line_3 $$ final PsiExpression expression = (PsiExpression) descriptor.getPsiElement()-->Line_15 $$ final PsiElement parent = expression.getParent()[ FD ]
Line_58 $$ if (expression.equals(lExpression)) -->Line_59 $$ final PsiJavaToken operationSign = assignmentExpression.getOperationSign()[ CD ]
Line_46 $$ final PsiStatement newStatement-->Line_50 $$ newStatement = factory.createStatementFromText(expressionText + '=' + newExpressionText + "-1;", statement)[ FD ]
