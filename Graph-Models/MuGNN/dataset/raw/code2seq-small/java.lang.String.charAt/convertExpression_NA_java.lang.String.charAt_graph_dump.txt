Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_17 $$ return expression.getText() + ".0"[ FD ]
Line_19 $$ if (expressionType.equals(PsiType.LONG) && expectedType.equals(PsiType.FLOAT)) -->Line_22 $$ return text.substring(0, length - 1) + ".0F"[ CD ]
Line_6 $$ final PsiType expressionType = expression.getType()-->Line_38 $$ if (expressionType.equals(PsiType.FLOAT) && expectedType.equals(PsiType.DOUBLE)) [ FD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_10 $$ if (expressionType.equals(PsiType.INT) && expectedType.equals(PsiType.LONG)) [ FD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_24 $$ if (expressionType.equals(PsiType.LONG) && expectedType.equals(PsiType.DOUBLE)) [ FD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_14 $$ return expression.getText() + ".0F"[ FD ]
Line_20 $$ final String text = expression.getText()-->Line_32 $$ if (text.charAt(length - 1) == 'd' || text.charAt(length - 1) == 'D') [ FD ]
Line_6 $$ final PsiType expressionType = expression.getType()-->Line_19 $$ if (expressionType.equals(PsiType.LONG) && expectedType.equals(PsiType.FLOAT)) [ FD ]
Line_6 $$ final PsiType expressionType = expression.getType()-->Line_7 $$ if (expressionType == null) [ FD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_30 $$ final String text = expression.getText()[ FD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_3 $$ if (!(expression instanceof PsiLiteralExpression) && !isNegatedLiteral(expression)) [ FD ]
Line_29 $$ if (expressionType.equals(PsiType.DOUBLE) && expectedType.equals(PsiType.FLOAT)) -->Line_30 $$ final String text = expression.getText()[ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_20 $$ final String text = expression.getText()[ FD ]
Line_20 $$ final String text = expression.getText()-->Line_33 $$ return text.substring(0, length - 1) + 'F'[ FD ]
Line_38 $$ if (expressionType.equals(PsiType.FLOAT) && expectedType.equals(PsiType.DOUBLE)) -->Line_41 $$ return text.substring(0, length - 1)[ CD ]
Line_6 $$ final PsiType expressionType = expression.getType()-->Line_29 $$ if (expressionType.equals(PsiType.DOUBLE) && expectedType.equals(PsiType.FLOAT)) [ FD ]
Line_29 $$ if (expressionType.equals(PsiType.DOUBLE) && expectedType.equals(PsiType.FLOAT)) -->Line_32 $$ if (text.charAt(length - 1) == 'd' || text.charAt(length - 1) == 'D') [ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_25 $$ final String text = expression.getText()[ FD ]
Line_6 $$ final PsiType expressionType = expression.getType()-->Line_24 $$ if (expressionType.equals(PsiType.LONG) && expectedType.equals(PsiType.DOUBLE)) [ FD ]
Line_6 $$ final PsiType expressionType = expression.getType()-->Line_10 $$ if (expressionType.equals(PsiType.INT) && expectedType.equals(PsiType.LONG)) [ FD ]
Line_24 $$ if (expressionType.equals(PsiType.LONG) && expectedType.equals(PsiType.DOUBLE)) -->Line_25 $$ final String text = expression.getText()[ CD ]
Line_20 $$ final String text = expression.getText()-->Line_26 $$ final int length = text.length()[ FD ]
Line_24 $$ if (expressionType.equals(PsiType.LONG) && expectedType.equals(PsiType.DOUBLE)) -->Line_27 $$ return text.substring(0, length - 1) + ".0"[ CD ]
Line_38 $$ if (expressionType.equals(PsiType.FLOAT) && expectedType.equals(PsiType.DOUBLE)) -->Line_40 $$ final int length = text.length()[ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_38 $$ if (expressionType.equals(PsiType.FLOAT) && expectedType.equals(PsiType.DOUBLE)) [ FD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_24 $$ if (expressionType.equals(PsiType.LONG) && expectedType.equals(PsiType.DOUBLE)) [ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_6 $$ final PsiType expressionType = expression.getType()[ FD ]
Line_10 $$ if (expressionType.equals(PsiType.INT) && expectedType.equals(PsiType.LONG)) -->Line_11 $$ return expression.getText() + 'L'[ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_39 $$ final String text = expression.getText()[ FD ]
Line_19 $$ if (expressionType.equals(PsiType.LONG) && expectedType.equals(PsiType.FLOAT)) -->Line_21 $$ final int length = text.length()[ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_16 $$ if (expressionType.equals(PsiType.INT) && expectedType.equals(PsiType.DOUBLE)) [ CD ]
Line_24 $$ if (expressionType.equals(PsiType.LONG) && expectedType.equals(PsiType.DOUBLE)) -->Line_26 $$ final int length = text.length()[ CD ]
Line_29 $$ if (expressionType.equals(PsiType.DOUBLE) && expectedType.equals(PsiType.FLOAT)) -->Line_31 $$ final int length = text.length()[ CD ]
Line_20 $$ final String text = expression.getText()-->Line_40 $$ final int length = text.length()[ FD ]
Line_38 $$ if (expressionType.equals(PsiType.FLOAT) && expectedType.equals(PsiType.DOUBLE)) -->Line_39 $$ final String text = expression.getText()[ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_43 $$ return null[ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_3 $$ if (!(expression instanceof PsiLiteralExpression) && !isNegatedLiteral(expression)) [ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_11 $$ return expression.getText() + 'L'[ FD ]
Line_6 $$ final PsiType expressionType = expression.getType()-->Line_16 $$ if (expressionType.equals(PsiType.INT) && expectedType.equals(PsiType.DOUBLE)) [ FD ]
Line_7 $$ if (expressionType == null) -->Line_8 $$ return null[ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_16 $$ if (expressionType.equals(PsiType.INT) && expectedType.equals(PsiType.DOUBLE)) [ FD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_13 $$ if (expressionType.equals(PsiType.INT) && expectedType.equals(PsiType.FLOAT)) [ CD ]
Line_20 $$ final String text = expression.getText()-->Line_21 $$ final int length = text.length()[ FD ]
Line_16 $$ if (expressionType.equals(PsiType.INT) && expectedType.equals(PsiType.DOUBLE)) -->Line_17 $$ return expression.getText() + ".0"[ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_38 $$ if (expressionType.equals(PsiType.FLOAT) && expectedType.equals(PsiType.DOUBLE)) [ CD ]
Line_3 $$ if (!(expression instanceof PsiLiteralExpression) && !isNegatedLiteral(expression)) -->Line_4 $$ return null[ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_7 $$ if (expressionType == null) [ CD ]
Line_19 $$ if (expressionType.equals(PsiType.LONG) && expectedType.equals(PsiType.FLOAT)) -->Line_20 $$ final String text = expression.getText()[ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_10 $$ if (expressionType.equals(PsiType.INT) && expectedType.equals(PsiType.LONG)) [ CD ]
Line_20 $$ final String text = expression.getText()-->Line_41 $$ return text.substring(0, length - 1)[ FD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_13 $$ if (expressionType.equals(PsiType.INT) && expectedType.equals(PsiType.FLOAT)) [ FD ]
Line_20 $$ final String text = expression.getText()-->Line_27 $$ return text.substring(0, length - 1) + ".0"[ FD ]
Line_6 $$ final PsiType expressionType = expression.getType()-->Line_13 $$ if (expressionType.equals(PsiType.INT) && expectedType.equals(PsiType.FLOAT)) [ FD ]
Line_20 $$ final String text = expression.getText()-->Line_22 $$ return text.substring(0, length - 1) + ".0F"[ FD ]
Line_32 $$ if (text.charAt(length - 1) == 'd' || text.charAt(length - 1) == 'D') -->Line_33 $$ return text.substring(0, length - 1) + 'F'[ CD ]
Line_13 $$ if (expressionType.equals(PsiType.INT) && expectedType.equals(PsiType.FLOAT)) -->Line_14 $$ return expression.getText() + ".0F"[ CD ]
Line_20 $$ final String text = expression.getText()-->Line_31 $$ final int length = text.length()[ FD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_29 $$ if (expressionType.equals(PsiType.DOUBLE) && expectedType.equals(PsiType.FLOAT)) [ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_29 $$ if (expressionType.equals(PsiType.DOUBLE) && expectedType.equals(PsiType.FLOAT)) [ FD ]
Line_32 $$ if (text.charAt(length - 1) == 'd' || text.charAt(length - 1) == 'D') -->Line_35 $$ return text + 'F'[ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_19 $$ if (expressionType.equals(PsiType.LONG) && expectedType.equals(PsiType.FLOAT)) [ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_6 $$ final PsiType expressionType = expression.getType()[ CD ]
Line_2 $$ private static String convertExpression(PsiExpression expression, PsiType expectedType) -->Line_19 $$ if (expressionType.equals(PsiType.LONG) && expectedType.equals(PsiType.FLOAT)) [ FD ]
