Line_14 $$ final int overlap = getOverlap(suggestedName, prefix)-->Line_17 $$ if (overlap > longestOverlap) [ FD ]
Line_23 $$ if (lastIndexOfSuffix >= 0 && suffix.length() < suggestion.length() - lastIndexOfSuffix) -->Line_24 $$ suggestion = suggestion.substring(0, lastIndexOfSuffix) + suffix[ CD ]
Line_21 $$ String suggestion = prefix.substring(0, prefix.length() - overlap) + suggestedName-->Line_26 $$ if (!newSuggestions.contains(suggestion)) [ FD ]
Line_4 $$ int longestOverlap = 0-->Line_15 $$ if (overlap < longestOverlap)[ FD ]
Line_11 $$ longestOverlap = prefix.length()-->Line_15 $$ if (overlap < longestOverlap)[ FD ]
Line_2 $$ private static String[] getOverlappedNameVersions(final String prefix, final String[] suggestedNames, String suffix) -->Line_21 $$ String suggestion = prefix.substring(0, prefix.length() - overlap) + suggestedName[ FD ]
Line_17 $$ if (overlap > longestOverlap) -->Line_19 $$ longestOverlap = overlap[ CD ]
Line_2 $$ private static String[] getOverlappedNameVersions(final String prefix, final String[] suggestedNames, String suffix) -->Line_9 $$ if (suggestedName.toUpperCase().startsWith(prefix.toUpperCase())) [ FD ]
Line_22 $$ final int lastIndexOfSuffix = suggestion.lastIndexOf(suffix)-->Line_24 $$ suggestion = suggestion.substring(0, lastIndexOfSuffix) + suffix[ FD ]
Line_5 $$ for (String suggestedName : suggestedNames) -->Line_9 $$ if (suggestedName.toUpperCase().startsWith(prefix.toUpperCase())) [ FD ]
Line_24 $$ suggestion = suggestion.substring(0, lastIndexOfSuffix) + suffix-->Line_26 $$ if (!newSuggestions.contains(suggestion)) [ FD ]
Line_9 $$ if (suggestedName.toUpperCase().startsWith(prefix.toUpperCase())) -->Line_10 $$ newSuggestions.add(suggestedName)[ CD ]
Line_2 $$ private static String[] getOverlappedNameVersions(final String prefix, final String[] suggestedNames, String suffix) -->Line_23 $$ if (lastIndexOfSuffix >= 0 && suffix.length() < suggestion.length() - lastIndexOfSuffix) [ FD ]
Line_3 $$ final List<String> newSuggestions = new ArrayList<String>()-->Line_26 $$ if (!newSuggestions.contains(suggestion)) [ FD ]
Line_5 $$ for (String suggestedName : suggestedNames) -->Line_10 $$ newSuggestions.add(suggestedName)[ FD ]
Line_14 $$ final int overlap = getOverlap(suggestedName, prefix)-->Line_19 $$ longestOverlap = overlap[ FD ]
Line_2 $$ private static String[] getOverlappedNameVersions(final String prefix, final String[] suggestedNames, String suffix) -->Line_11 $$ longestOverlap = prefix.length()[ FD ]
Line_2 $$ private static String[] getOverlappedNameVersions(final String prefix, final String[] suggestedNames, String suffix) -->Line_22 $$ final int lastIndexOfSuffix = suggestion.lastIndexOf(suffix)[ FD ]
Line_5 $$ for (String suggestedName : suggestedNames) -->Line_13 $$ suggestedName = String.valueOf(Character.toUpperCase(suggestedName.charAt(0))) + suggestedName.substring(1)[ FD ]
Line_2 $$ private static String[] getOverlappedNameVersions(final String prefix, final String[] suggestedNames, String suffix) -->Line_24 $$ suggestion = suggestion.substring(0, lastIndexOfSuffix) + suffix[ FD ]
Line_21 $$ String suggestion = prefix.substring(0, prefix.length() - overlap) + suggestedName-->Line_27 $$ newSuggestions.add(suggestion)[ FD ]
Line_11 $$ longestOverlap = prefix.length()-->Line_19 $$ longestOverlap = overlap[ FD ]
Line_21 $$ String suggestion = prefix.substring(0, prefix.length() - overlap) + suggestedName-->Line_23 $$ if (lastIndexOfSuffix >= 0 && suffix.length() < suggestion.length() - lastIndexOfSuffix) [ FD ]
Line_13 $$ suggestedName = String.valueOf(Character.toUpperCase(suggestedName.charAt(0))) + suggestedName.substring(1)-->Line_14 $$ final int overlap = getOverlap(suggestedName, prefix)[ FD ]
Line_9 $$ if (suggestedName.toUpperCase().startsWith(prefix.toUpperCase())) -->Line_11 $$ longestOverlap = prefix.length()[ CD ]
Line_4 $$ int longestOverlap = 0-->Line_19 $$ longestOverlap = overlap[ FD ]
Line_21 $$ String suggestion = prefix.substring(0, prefix.length() - overlap) + suggestedName-->Line_24 $$ suggestion = suggestion.substring(0, lastIndexOfSuffix) + suffix[ FD ]
Line_5 $$ for (String suggestedName : suggestedNames) -->Line_6 $$ if (suggestedName.length() < 3) [ FD ]
Line_2 $$ private static String[] getOverlappedNameVersions(final String prefix, final String[] suggestedNames, String suffix) -->Line_3 $$ final List<String> newSuggestions = new ArrayList<String>()[ CD ]
Line_3 $$ final List<String> newSuggestions = new ArrayList<String>()-->Line_18 $$ newSuggestions.clear()[ FD ]
Line_3 $$ final List<String> newSuggestions = new ArrayList<String>()-->Line_10 $$ newSuggestions.add(suggestedName)[ FD ]
Line_21 $$ String suggestion = prefix.substring(0, prefix.length() - overlap) + suggestedName-->Line_22 $$ final int lastIndexOfSuffix = suggestion.lastIndexOf(suffix)[ FD ]
Line_17 $$ if (overlap > longestOverlap) -->Line_18 $$ newSuggestions.clear()[ CD ]
Line_14 $$ final int overlap = getOverlap(suggestedName, prefix)-->Line_15 $$ if (overlap < longestOverlap)[ FD ]
Line_2 $$ private static String[] getOverlappedNameVersions(final String prefix, final String[] suggestedNames, String suffix) -->Line_30 $$ return ArrayUtil.toStringArray(newSuggestions)[ CD ]
Line_2 $$ private static String[] getOverlappedNameVersions(final String prefix, final String[] suggestedNames, String suffix) -->Line_4 $$ int longestOverlap = 0[ CD ]
Line_4 $$ int longestOverlap = 0-->Line_11 $$ longestOverlap = prefix.length()[ FD ]
Line_11 $$ longestOverlap = prefix.length()-->Line_17 $$ if (overlap > longestOverlap) [ FD ]
Line_26 $$ if (!newSuggestions.contains(suggestion)) -->Line_27 $$ newSuggestions.add(suggestion)[ CD ]
Line_2 $$ private static String[] getOverlappedNameVersions(final String prefix, final String[] suggestedNames, String suffix) -->Line_14 $$ final int overlap = getOverlap(suggestedName, prefix)[ FD ]
Line_3 $$ final List<String> newSuggestions = new ArrayList<String>()-->Line_27 $$ newSuggestions.add(suggestion)[ FD ]
Line_5 $$ for (String suggestedName : suggestedNames) -->Line_14 $$ final int overlap = getOverlap(suggestedName, prefix)[ FD ]
Line_24 $$ suggestion = suggestion.substring(0, lastIndexOfSuffix) + suffix-->Line_27 $$ newSuggestions.add(suggestion)[ FD ]
Line_4 $$ int longestOverlap = 0-->Line_17 $$ if (overlap > longestOverlap) [ FD ]
Line_3 $$ final List<String> newSuggestions = new ArrayList<String>()-->Line_30 $$ return ArrayUtil.toStringArray(newSuggestions)[ FD ]
