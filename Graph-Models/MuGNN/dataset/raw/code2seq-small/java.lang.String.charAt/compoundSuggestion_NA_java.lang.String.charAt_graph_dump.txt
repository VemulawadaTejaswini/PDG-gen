Line_21 $$ word = "_" + word-->Line_28 $$ if (word.equals("_"))[ FD ]
Line_27 $$ if (skip_) -->Line_28 $$ if (word.equals("_"))[ CD ]
Line_25 $$ word = word.toLowerCase()-->Line_19 $$ word = StringUtil.toUpperCase(word)[ FD ]
Line_19 $$ word = StringUtil.toUpperCase(word)-->Line_35 $$ buffer.append(word)[ FD ]
Line_38 $$ if (isArray) -->Line_39 $$ suggestion = StringUtil.pluralize(suggestion)[ CD ]
Line_19 $$ word = StringUtil.toUpperCase(word)-->Line_25 $$ word = word.toLowerCase()[ FD ]
Line_21 $$ word = "_" + word-->Line_31 $$ word = StringUtil.capitalize(word)[ FD ]
Line_21 $$ word = "_" + word-->Line_35 $$ buffer.append(word)[ FD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_11 $$ startWord = Character.toUpperCase(c) + startWord.substring(1)[ FD ]
Line_21 $$ word = "_" + word-->Line_19 $$ word = StringUtil.toUpperCase(word)[ FD ]
Line_31 $$ word = StringUtil.capitalize(word)-->Line_28 $$ if (word.equals("_"))[ FD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_4 $$ buffer.append(prefix)[ CD ]
Line_31 $$ word = StringUtil.capitalize(word)-->Line_21 $$ word = "_" + word[ FD ]
Line_16 $$ String word = words[i]-->Line_20 $$ if (prevWord.charAt(prevWord.length() - 1) != '_' && word.charAt(0) != '_') [ FD ]
Line_16 $$ String word = words[i]-->Line_31 $$ word = StringUtil.capitalize(word)[ FD ]
Line_25 $$ word = word.toLowerCase()-->Line_31 $$ word = StringUtil.capitalize(word)[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_35 $$ buffer.append(word)[ FD ]
Line_38 $$ if (isArray) -->Line_40 $$ if (upperCaseStyle) [ CD ]
Line_17 $$ String prevWord = words[i - 1]-->Line_20 $$ if (prevWord.charAt(prevWord.length() - 1) != '_' && word.charAt(0) != '_') [ FD ]
Line_24 $$ if (prevWord.charAt(prevWord.length() - 1) == '_') -->Line_25 $$ word = word.toLowerCase()[ CD ]
Line_18 $$ if (upperCaseStyle) -->Line_27 $$ if (skip_) [ CD ]
Line_25 $$ word = word.toLowerCase()-->Line_20 $$ if (prevWord.charAt(prevWord.length() - 1) != '_' && word.charAt(0) != '_') [ FD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_14 $$ buffer.append(startWord)[ FD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_6 $$ startWord = StringUtil.toUpperCase(startWord)[ FD ]
Line_18 $$ if (upperCaseStyle) -->Line_20 $$ if (prevWord.charAt(prevWord.length() - 1) != '_' && word.charAt(0) != '_') [ CD ]
Line_17 $$ String prevWord = words[i - 1]-->Line_24 $$ if (prevWord.charAt(prevWord.length() - 1) == '_') [ FD ]
Line_31 $$ word = StringUtil.capitalize(word)-->Line_25 $$ word = word.toLowerCase()[ FD ]
Line_18 $$ if (upperCaseStyle) -->Line_19 $$ word = StringUtil.toUpperCase(word)[ CD ]
Line_18 $$ if (upperCaseStyle) -->Line_24 $$ if (prevWord.charAt(prevWord.length() - 1) == '_') [ CD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_4 $$ buffer.append(prefix)[ FD ]
Line_27 $$ if (skip_) -->Line_30 $$ if (prevWord.equals("_")) [ CD ]
Line_21 $$ word = "_" + word-->Line_25 $$ word = word.toLowerCase()[ FD ]
Line_16 $$ String word = words[i]-->Line_25 $$ word = word.toLowerCase()[ FD ]
Line_19 $$ word = StringUtil.toUpperCase(word)-->Line_28 $$ if (word.equals("_"))[ FD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_9 $$ startWord = startWord.toLowerCase()[ FD ]
Line_20 $$ if (prevWord.charAt(prevWord.length() - 1) != '_' && word.charAt(0) != '_') -->Line_21 $$ word = "_" + word[ CD ]
Line_17 $$ String prevWord = words[i - 1]-->Line_30 $$ if (prevWord.equals("_")) [ FD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_37 $$ String suggestion = buffer.toString()[ CD ]
Line_31 $$ word = StringUtil.capitalize(word)-->Line_19 $$ word = StringUtil.toUpperCase(word)[ FD ]
Line_5 $$ if (upperCaseStyle) -->Line_8 $$ if (prefix.isEmpty() || StringUtil.endsWithChar(prefix, '_')) [ CD ]
Line_25 $$ word = word.toLowerCase()-->Line_21 $$ word = "_" + word[ FD ]
Line_31 $$ word = StringUtil.capitalize(word)-->Line_35 $$ buffer.append(word)[ FD ]
Line_16 $$ String word = words[i]-->Line_19 $$ word = StringUtil.toUpperCase(word)[ FD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_38 $$ if (isArray) [ CD ]
Line_8 $$ if (prefix.isEmpty() || StringUtil.endsWithChar(prefix, '_')) -->Line_9 $$ startWord = startWord.toLowerCase()[ CD ]
Line_15 $$ for (int i = words.length - wordCount + 1; i < words.length; i++) -->Line_17 $$ String prevWord = words[i - 1][ CD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_15 $$ for (int i = words.length - wordCount + 1; i < words.length; i++) [ CD ]
Line_15 $$ for (int i = words.length - wordCount + 1; i < words.length; i++) -->Line_18 $$ if (upperCaseStyle) [ CD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_5 $$ if (upperCaseStyle) [ CD ]
Line_16 $$ String word = words[i]-->Line_28 $$ if (word.equals("_"))[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_37 $$ String suggestion = buffer.toString()[ FD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_44 $$ return suggestion[ CD ]
Line_5 $$ if (upperCaseStyle) -->Line_6 $$ startWord = StringUtil.toUpperCase(startWord)[ CD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_14 $$ buffer.append(startWord)[ CD ]
Line_31 $$ word = StringUtil.capitalize(word)-->Line_20 $$ if (prevWord.charAt(prevWord.length() - 1) != '_' && word.charAt(0) != '_') [ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_4 $$ buffer.append(prefix)[ FD ]
Line_15 $$ for (int i = words.length - wordCount + 1; i < words.length; i++) -->Line_35 $$ buffer.append(word)[ CD ]
Line_16 $$ String word = words[i]-->Line_21 $$ word = "_" + word[ FD ]
Line_15 $$ for (int i = words.length - wordCount + 1; i < words.length; i++) -->Line_16 $$ String word = words[i][ CD ]
Line_37 $$ String suggestion = buffer.toString()-->Line_39 $$ suggestion = StringUtil.pluralize(suggestion)[ FD ]
Line_37 $$ String suggestion = buffer.toString()-->Line_41 $$ suggestion = StringUtil.toUpperCase(suggestion)[ FD ]
Line_2 $$ private static String compoundSuggestion(@NotNull String prefix, boolean upperCaseStyle, @NotNull String[] words, int wordCount, @NotNull String startWord, char c, boolean isArray, boolean skip_) -->Line_8 $$ if (prefix.isEmpty() || StringUtil.endsWithChar(prefix, '_')) [ FD ]
Line_25 $$ word = word.toLowerCase()-->Line_28 $$ if (word.equals("_"))[ FD ]
Line_19 $$ word = StringUtil.toUpperCase(word)-->Line_31 $$ word = StringUtil.capitalize(word)[ FD ]
Line_21 $$ word = "_" + word-->Line_20 $$ if (prevWord.charAt(prevWord.length() - 1) != '_' && word.charAt(0) != '_') [ FD ]
Line_25 $$ word = word.toLowerCase()-->Line_35 $$ buffer.append(word)[ FD ]
Line_39 $$ suggestion = StringUtil.pluralize(suggestion)-->Line_41 $$ suggestion = StringUtil.toUpperCase(suggestion)[ FD ]
Line_16 $$ String word = words[i]-->Line_35 $$ buffer.append(word)[ FD ]
Line_19 $$ word = StringUtil.toUpperCase(word)-->Line_20 $$ if (prevWord.charAt(prevWord.length() - 1) != '_' && word.charAt(0) != '_') [ FD ]
Line_19 $$ word = StringUtil.toUpperCase(word)-->Line_21 $$ word = "_" + word[ FD ]
Line_30 $$ if (prevWord.equals("_")) -->Line_31 $$ word = StringUtil.capitalize(word)[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_14 $$ buffer.append(startWord)[ FD ]
Line_40 $$ if (upperCaseStyle) -->Line_41 $$ suggestion = StringUtil.toUpperCase(suggestion)[ CD ]
