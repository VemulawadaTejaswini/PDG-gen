Line_2 $$ public static Boolean evaluate(Object stringArg, Object regexArgument, Object flagsArgument, Navigator navigator) -->Line_4 $$ String regex = StringFunction.evaluate(regexArgument, navigator)[ FD ]
Line_7 $$ for (int i = 0; i < flagsString.length(); i++) -->Line_14 $$ if (flagsString.charAt(i) == 'x') [ FD ]
Line_6 $$ int flags = 0-->Line_13 $$ flags &= Pattern.DOTALL[ FD ]
Line_6 $$ int flags = 0-->Line_15 $$ flags &= Pattern.COMMENTS[ FD ]
Line_10 $$ if (flagsString.charAt(i) == 'm') -->Line_12 $$ if (flagsString.charAt(i) == 's') [ CD ]
Line_11 $$ flags &= Pattern.MULTILINE-->Line_18 $$ return evaluate(string, regex, flags, navigator)[ FD ]
Line_7 $$ for (int i = 0; i < flagsString.length(); i++) -->Line_8 $$ if (flagsString.charAt(i) == 'i') [ FD ]
Line_10 $$ if (flagsString.charAt(i) == 'm') -->Line_11 $$ flags &= Pattern.MULTILINE[ CD ]
Line_2 $$ public static Boolean evaluate(Object stringArg, Object regexArgument, Object flagsArgument, Navigator navigator) -->Line_3 $$ String string = StringFunction.evaluate(stringArg, navigator)[ FD ]
Line_2 $$ public static Boolean evaluate(Object stringArg, Object regexArgument, Object flagsArgument, Navigator navigator) -->Line_5 $$ String flagsString = StringFunction.evaluate(flagsArgument, navigator)[ FD ]
Line_6 $$ int flags = 0-->Line_11 $$ flags &= Pattern.MULTILINE[ FD ]
Line_15 $$ flags &= Pattern.COMMENTS-->Line_18 $$ return evaluate(string, regex, flags, navigator)[ FD ]
Line_5 $$ String flagsString = StringFunction.evaluate(flagsArgument, navigator)-->Line_10 $$ if (flagsString.charAt(i) == 'm') [ FD ]
Line_14 $$ if (flagsString.charAt(i) == 'x') -->Line_15 $$ flags &= Pattern.COMMENTS[ CD ]
Line_8 $$ if (flagsString.charAt(i) == 'i') -->Line_10 $$ if (flagsString.charAt(i) == 'm') [ CD ]
Line_7 $$ for (int i = 0; i < flagsString.length(); i++) -->Line_8 $$ if (flagsString.charAt(i) == 'i') [ CD ]
Line_13 $$ flags &= Pattern.DOTALL-->Line_18 $$ return evaluate(string, regex, flags, navigator)[ FD ]
Line_5 $$ String flagsString = StringFunction.evaluate(flagsArgument, navigator)-->Line_14 $$ if (flagsString.charAt(i) == 'x') [ FD ]
Line_13 $$ flags &= Pattern.DOTALL-->Line_15 $$ flags &= Pattern.COMMENTS[ FD ]
Line_6 $$ int flags = 0-->Line_9 $$ flags &= Pattern.CASE_INSENSITIVE[ FD ]
Line_12 $$ if (flagsString.charAt(i) == 's') -->Line_13 $$ flags &= Pattern.DOTALL[ CD ]
Line_9 $$ flags &= Pattern.CASE_INSENSITIVE-->Line_15 $$ flags &= Pattern.COMMENTS[ FD ]
Line_6 $$ int flags = 0-->Line_18 $$ return evaluate(string, regex, flags, navigator)[ FD ]
Line_12 $$ if (flagsString.charAt(i) == 's') -->Line_14 $$ if (flagsString.charAt(i) == 'x') [ CD ]
Line_2 $$ public static Boolean evaluate(Object stringArg, Object regexArgument, Object flagsArgument, Navigator navigator) -->Line_7 $$ for (int i = 0; i < flagsString.length(); i++) [ CD ]
Line_2 $$ public static Boolean evaluate(Object stringArg, Object regexArgument, Object flagsArgument, Navigator navigator) -->Line_5 $$ String flagsString = StringFunction.evaluate(flagsArgument, navigator)[ CD ]
Line_11 $$ flags &= Pattern.MULTILINE-->Line_13 $$ flags &= Pattern.DOTALL[ FD ]
Line_3 $$ String string = StringFunction.evaluate(stringArg, navigator)-->Line_18 $$ return evaluate(string, regex, flags, navigator)[ FD ]
Line_9 $$ flags &= Pattern.CASE_INSENSITIVE-->Line_11 $$ flags &= Pattern.MULTILINE[ FD ]
Line_8 $$ if (flagsString.charAt(i) == 'i') -->Line_9 $$ flags &= Pattern.CASE_INSENSITIVE[ CD ]
Line_2 $$ public static Boolean evaluate(Object stringArg, Object regexArgument, Object flagsArgument, Navigator navigator) -->Line_4 $$ String regex = StringFunction.evaluate(regexArgument, navigator)[ CD ]
Line_5 $$ String flagsString = StringFunction.evaluate(flagsArgument, navigator)-->Line_12 $$ if (flagsString.charAt(i) == 's') [ FD ]
Line_7 $$ for (int i = 0; i < flagsString.length(); i++) -->Line_12 $$ if (flagsString.charAt(i) == 's') [ FD ]
Line_9 $$ flags &= Pattern.CASE_INSENSITIVE-->Line_13 $$ flags &= Pattern.DOTALL[ FD ]
Line_2 $$ public static Boolean evaluate(Object stringArg, Object regexArgument, Object flagsArgument, Navigator navigator) -->Line_18 $$ return evaluate(string, regex, flags, navigator)[ FD ]
Line_9 $$ flags &= Pattern.CASE_INSENSITIVE-->Line_18 $$ return evaluate(string, regex, flags, navigator)[ FD ]
Line_2 $$ public static Boolean evaluate(Object stringArg, Object regexArgument, Object flagsArgument, Navigator navigator) -->Line_18 $$ return evaluate(string, regex, flags, navigator)[ CD ]
Line_2 $$ public static Boolean evaluate(Object stringArg, Object regexArgument, Object flagsArgument, Navigator navigator) -->Line_3 $$ String string = StringFunction.evaluate(stringArg, navigator)[ CD ]
Line_5 $$ String flagsString = StringFunction.evaluate(flagsArgument, navigator)-->Line_8 $$ if (flagsString.charAt(i) == 'i') [ FD ]
Line_5 $$ String flagsString = StringFunction.evaluate(flagsArgument, navigator)-->Line_7 $$ for (int i = 0; i < flagsString.length(); i++) [ FD ]
Line_4 $$ String regex = StringFunction.evaluate(regexArgument, navigator)-->Line_18 $$ return evaluate(string, regex, flags, navigator)[ FD ]
Line_2 $$ public static Boolean evaluate(Object stringArg, Object regexArgument, Object flagsArgument, Navigator navigator) -->Line_6 $$ int flags = 0[ CD ]
Line_11 $$ flags &= Pattern.MULTILINE-->Line_15 $$ flags &= Pattern.COMMENTS[ FD ]
Line_7 $$ for (int i = 0; i < flagsString.length(); i++) -->Line_10 $$ if (flagsString.charAt(i) == 'm') [ FD ]
