Line_6 $$ for (int i = 0; i < size; i++) -->Line_7 $$ if (left.charAt(i) == right.charAt(i)) [ CD ]
Line_2 $$ private static String msg(String left, String right) -->Line_7 $$ if (left.charAt(i) == right.charAt(i)) [ FD ]
Line_3 $$ int size = Math.min(left.length(), right.length())-->Line_15 $$ int leftEnd = Math.max(size, left.length()) - 1[ FD ]
Line_4 $$ StringBuilder builder = new StringBuilder("size: " + left.length() + " vs. " + right.length())-->Line_10 $$ builder.append(">> ").append("until offset: ").append(i).append(" [").append(left.charAt(i)).append(" vs.").append(right.charAt(i)).append("] [").append((int) left.charAt(i)).append(" vs.").append((int) right.charAt(i)).append(']')[ FD ]
Line_4 $$ StringBuilder builder = new StringBuilder("size: " + left.length() + " vs. " + right.length())-->Line_18 $$ return builder.toString()[ FD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_10 $$ builder.append(">> ").append("until offset: ").append(i).append(" [").append(left.charAt(i)).append(" vs.").append(right.charAt(i)).append("] [").append((int) left.charAt(i)).append(" vs.").append((int) right.charAt(i)).append(']')[ FD ]
Line_2 $$ private static String msg(String left, String right) -->Line_15 $$ int leftEnd = Math.max(size, left.length()) - 1[ FD ]
Line_14 $$ if (left.length() != right.length()) -->Line_16 $$ int rightEnd = Math.max(size, right.length()) - 1[ CD ]
Line_2 $$ private static String msg(String left, String right) -->Line_8 $$ builder.append(left.charAt(i))[ FD ]
Line_4 $$ StringBuilder builder = new StringBuilder("size: " + left.length() + " vs. " + right.length())-->Line_17 $$ builder.append(">> ").append("until offset: ").append(size).append(" [").append(left.charAt(leftEnd)).append(" vs.").append(right.charAt(rightEnd)).append("] [").append((int) left.charAt(leftEnd)).append(" vs.").append((int) right.charAt(rightEnd)).append(']')[ FD ]
Line_7 $$ if (left.charAt(i) == right.charAt(i)) -->Line_11 $$ return builder.toString()[ CD ]
Line_14 $$ if (left.length() != right.length()) -->Line_15 $$ int leftEnd = Math.max(size, left.length()) - 1[ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder("size: " + left.length() + " vs. " + right.length())-->Line_8 $$ builder.append(left.charAt(i))[ FD ]
Line_2 $$ private static String msg(String left, String right) -->Line_10 $$ builder.append(">> ").append("until offset: ").append(i).append(" [").append(left.charAt(i)).append(" vs.").append(right.charAt(i)).append("] [").append((int) left.charAt(i)).append(" vs.").append((int) right.charAt(i)).append(']')[ FD ]
Line_3 $$ int size = Math.min(left.length(), right.length())-->Line_6 $$ for (int i = 0; i < size; i++) [ FD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_7 $$ if (left.charAt(i) == right.charAt(i)) [ FD ]
Line_2 $$ private static String msg(String left, String right) -->Line_17 $$ builder.append(">> ").append("until offset: ").append(size).append(" [").append(left.charAt(leftEnd)).append(" vs.").append(right.charAt(rightEnd)).append("] [").append((int) left.charAt(leftEnd)).append(" vs.").append((int) right.charAt(rightEnd)).append(']')[ FD ]
Line_2 $$ private static String msg(String left, String right) -->Line_20 $$ return ""[ CD ]
Line_7 $$ if (left.charAt(i) == right.charAt(i)) -->Line_8 $$ builder.append(left.charAt(i))[ CD ]
Line_16 $$ int rightEnd = Math.max(size, right.length()) - 1-->Line_17 $$ builder.append(">> ").append("until offset: ").append(size).append(" [").append(left.charAt(leftEnd)).append(" vs.").append(right.charAt(rightEnd)).append("] [").append((int) left.charAt(leftEnd)).append(" vs.").append((int) right.charAt(rightEnd)).append(']')[ FD ]
Line_2 $$ private static String msg(String left, String right) -->Line_4 $$ StringBuilder builder = new StringBuilder("size: " + left.length() + " vs. " + right.length())[ CD ]
Line_14 $$ if (left.length() != right.length()) -->Line_17 $$ builder.append(">> ").append("until offset: ").append(size).append(" [").append(left.charAt(leftEnd)).append(" vs.").append(right.charAt(rightEnd)).append("] [").append((int) left.charAt(leftEnd)).append(" vs.").append((int) right.charAt(rightEnd)).append(']')[ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder("size: " + left.length() + " vs. " + right.length())-->Line_5 $$ builder.append(" content: <<")[ FD ]
Line_2 $$ private static String msg(String left, String right) -->Line_14 $$ if (left.length() != right.length()) [ FD ]
Line_4 $$ StringBuilder builder = new StringBuilder("size: " + left.length() + " vs. " + right.length())-->Line_11 $$ return builder.toString()[ FD ]
Line_2 $$ private static String msg(String left, String right) -->Line_6 $$ for (int i = 0; i < size; i++) [ CD ]
Line_2 $$ private static String msg(String left, String right) -->Line_5 $$ builder.append(" content: <<")[ CD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_8 $$ builder.append(left.charAt(i))[ FD ]
Line_3 $$ int size = Math.min(left.length(), right.length())-->Line_17 $$ builder.append(">> ").append("until offset: ").append(size).append(" [").append(left.charAt(leftEnd)).append(" vs.").append(right.charAt(rightEnd)).append("] [").append((int) left.charAt(leftEnd)).append(" vs.").append((int) right.charAt(rightEnd)).append(']')[ FD ]
Line_2 $$ private static String msg(String left, String right) -->Line_4 $$ StringBuilder builder = new StringBuilder("size: " + left.length() + " vs. " + right.length())[ FD ]
Line_2 $$ private static String msg(String left, String right) -->Line_3 $$ int size = Math.min(left.length(), right.length())[ FD ]
Line_2 $$ private static String msg(String left, String right) -->Line_3 $$ int size = Math.min(left.length(), right.length())[ CD ]
Line_14 $$ if (left.length() != right.length()) -->Line_18 $$ return builder.toString()[ CD ]
Line_2 $$ private static String msg(String left, String right) -->Line_14 $$ if (left.length() != right.length()) [ CD ]
Line_15 $$ int leftEnd = Math.max(size, left.length()) - 1-->Line_17 $$ builder.append(">> ").append("until offset: ").append(size).append(" [").append(left.charAt(leftEnd)).append(" vs.").append(right.charAt(rightEnd)).append("] [").append((int) left.charAt(leftEnd)).append(" vs.").append((int) right.charAt(rightEnd)).append(']')[ FD ]
Line_3 $$ int size = Math.min(left.length(), right.length())-->Line_16 $$ int rightEnd = Math.max(size, right.length()) - 1[ FD ]
Line_7 $$ if (left.charAt(i) == right.charAt(i)) -->Line_10 $$ builder.append(">> ").append("until offset: ").append(i).append(" [").append(left.charAt(i)).append(" vs.").append(right.charAt(i)).append("] [").append((int) left.charAt(i)).append(" vs.").append((int) right.charAt(i)).append(']')[ CD ]
Line_2 $$ private static String msg(String left, String right) -->Line_16 $$ int rightEnd = Math.max(size, right.length()) - 1[ FD ]
