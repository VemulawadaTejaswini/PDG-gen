Line_3 $$ if (_log.isDebugEnabled()) -->Line_4 $$ _log.debug("Sending file of type " + contentType)[ CD ]
Line_14 $$ boolean ascii = true-->Line_22 $$ if (!ascii) [ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_10 $$ if (Validator.isNull(fileName)) [ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_52 $$ sb.append(contentDispositionType)[ FD ]
Line_13 $$ String contentDispositionFileName = "filename=\"" + fileName + "\""-->Line_55 $$ sb.append(contentDispositionFileName)[ FD ]
Line_25 $$ if (BrowserSnifferUtil.isIe(request)) -->Line_26 $$ contentDispositionFileName = "filename=\"" + encodedFileName + "\""[ CD ]
Line_32 $$ if (_log.isWarnEnabled()) -->Line_33 $$ _log.warn(e)[ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_56 $$ mimeResponse.setProperty(HttpHeaders.CONTENT_DISPOSITION, sb.toString())[ FD ]
Line_15 $$ for (int i = 0; i < fileName.length(); i++) -->Line_16 $$ if (!Validator.isAscii(fileName.charAt(i))) [ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_16 $$ if (!Validator.isAscii(fileName.charAt(i))) [ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_7 $$ mimeResponse.setContentType(contentType)[ FD ]
Line_46 $$ contentDispositionType = HttpHeaders.CONTENT_DISPOSITION_INLINE-->Line_52 $$ sb.append(contentDispositionType)[ FD ]
Line_51 $$ StringBundler sb = new StringBundler(4)-->Line_55 $$ sb.append(contentDispositionFileName)[ FD ]
Line_51 $$ StringBundler sb = new StringBundler(4)-->Line_52 $$ sb.append(contentDispositionType)[ FD ]
Line_26 $$ contentDispositionFileName = "filename=\"" + encodedFileName + "\""-->Line_28 $$ contentDispositionFileName = "filename*=UTF-8''" + encodedFileName[ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_36 $$ if (Validator.isNull(contentDispositionType)) [ FD ]
Line_22 $$ if (!ascii) -->Line_24 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)[ CD ]
Line_28 $$ contentDispositionFileName = "filename*=UTF-8''" + encodedFileName-->Line_55 $$ sb.append(contentDispositionFileName)[ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_48 $$ contentDispositionType = HttpHeaders.CONTENT_DISPOSITION_ATTACHMENT[ FD ]
Line_16 $$ if (!Validator.isAscii(fileName.charAt(i))) -->Line_17 $$ ascii = false[ CD ]
Line_46 $$ contentDispositionType = HttpHeaders.CONTENT_DISPOSITION_INLINE-->Line_48 $$ contentDispositionType = HttpHeaders.CONTENT_DISPOSITION_ATTACHMENT[ FD ]
Line_37 $$ String extension = GetterUtil.getString(FileUtil.getExtension(fileName))-->Line_38 $$ extension = StringUtil.toLowerCase(extension)[ FD ]
Line_43 $$ mimeTypesContentDispositionInline = new String[0]-->Line_45 $$ if (ArrayUtil.contains(mimeTypesContentDispositionInline, extension)) [ FD ]
Line_13 $$ String contentDispositionFileName = "filename=\"" + fileName + "\""-->Line_28 $$ contentDispositionFileName = "filename*=UTF-8''" + encodedFileName[ FD ]
Line_51 $$ StringBundler sb = new StringBundler(4)-->Line_56 $$ mimeResponse.setProperty(HttpHeaders.CONTENT_DISPOSITION, sb.toString())[ FD ]
Line_23 $$ String encodedFileName = HttpUtil.encodeURL(fileName, true)-->Line_28 $$ contentDispositionFileName = "filename*=UTF-8''" + encodedFileName[ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_15 $$ for (int i = 0; i < fileName.length(); i++) [ CD ]
Line_39 $$ String[] mimeTypesContentDispositionInline = null-->Line_41 $$ mimeTypesContentDispositionInline = PropsUtil.getArray("mime.types.content.disposition.inline")[ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_53 $$ sb.append(StringPool.SEMICOLON)[ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_56 $$ mimeResponse.setProperty(HttpHeaders.CONTENT_DISPOSITION, sb.toString())[ CD ]
Line_41 $$ mimeTypesContentDispositionInline = PropsUtil.getArray("mime.types.content.disposition.inline")-->Line_43 $$ mimeTypesContentDispositionInline = new String[0][ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_23 $$ String encodedFileName = HttpUtil.encodeURL(fileName, true)[ FD ]
Line_37 $$ String extension = GetterUtil.getString(FileUtil.getExtension(fileName))-->Line_45 $$ if (ArrayUtil.contains(mimeTypesContentDispositionInline, extension)) [ FD ]
Line_25 $$ if (BrowserSnifferUtil.isIe(request)) -->Line_28 $$ contentDispositionFileName = "filename*=UTF-8''" + encodedFileName[ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_55 $$ sb.append(contentDispositionFileName)[ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_13 $$ String contentDispositionFileName = "filename=\"" + fileName + "\""[ CD ]
Line_48 $$ contentDispositionType = HttpHeaders.CONTENT_DISPOSITION_ATTACHMENT-->Line_52 $$ sb.append(contentDispositionType)[ FD ]
Line_36 $$ if (Validator.isNull(contentDispositionType)) -->Line_38 $$ extension = StringUtil.toLowerCase(extension)[ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_3 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_15 $$ for (int i = 0; i < fileName.length(); i++) [ FD ]
Line_15 $$ for (int i = 0; i < fileName.length(); i++) -->Line_16 $$ if (!Validator.isAscii(fileName.charAt(i))) [ CD ]
Line_22 $$ if (!ascii) -->Line_25 $$ if (BrowserSnifferUtil.isIe(request)) [ CD ]
Line_36 $$ if (Validator.isNull(contentDispositionType)) -->Line_39 $$ String[] mimeTypesContentDispositionInline = null[ CD ]
Line_13 $$ String contentDispositionFileName = "filename=\"" + fileName + "\""-->Line_26 $$ contentDispositionFileName = "filename=\"" + encodedFileName + "\""[ FD ]
Line_51 $$ StringBundler sb = new StringBundler(4)-->Line_53 $$ sb.append(StringPool.SEMICOLON)[ FD ]
Line_45 $$ if (ArrayUtil.contains(mimeTypesContentDispositionInline, extension)) -->Line_46 $$ contentDispositionType = HttpHeaders.CONTENT_DISPOSITION_INLINE[ CD ]
Line_22 $$ if (!ascii) -->Line_23 $$ String encodedFileName = HttpUtil.encodeURL(fileName, true)[ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_37 $$ String extension = GetterUtil.getString(FileUtil.getExtension(fileName))[ FD ]
Line_24 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)-->Line_25 $$ if (BrowserSnifferUtil.isIe(request)) [ FD ]
Line_36 $$ if (Validator.isNull(contentDispositionType)) -->Line_45 $$ if (ArrayUtil.contains(mimeTypesContentDispositionInline, extension)) [ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_10 $$ if (Validator.isNull(fileName)) [ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_9 $$ mimeResponse.setProperty(HttpHeaders.CACHE_CONTROL, HttpHeaders.CACHE_CONTROL_PRIVATE_VALUE)[ CD ]
Line_41 $$ mimeTypesContentDispositionInline = PropsUtil.getArray("mime.types.content.disposition.inline")-->Line_45 $$ if (ArrayUtil.contains(mimeTypesContentDispositionInline, extension)) [ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_24 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)[ FD ]
Line_36 $$ if (Validator.isNull(contentDispositionType)) -->Line_37 $$ String extension = GetterUtil.getString(FileUtil.getExtension(fileName))[ CD ]
Line_14 $$ boolean ascii = true-->Line_17 $$ ascii = false[ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_54 $$ sb.append(StringPool.SPACE)[ CD ]
Line_51 $$ StringBundler sb = new StringBundler(4)-->Line_54 $$ sb.append(StringPool.SPACE)[ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_14 $$ boolean ascii = true[ CD ]
Line_17 $$ ascii = false-->Line_22 $$ if (!ascii) [ FD ]
Line_26 $$ contentDispositionFileName = "filename=\"" + encodedFileName + "\""-->Line_55 $$ sb.append(contentDispositionFileName)[ FD ]
Line_6 $$ if (Validator.isNotNull(contentType)) -->Line_7 $$ mimeResponse.setContentType(contentType)[ CD ]
Line_45 $$ if (ArrayUtil.contains(mimeTypesContentDispositionInline, extension)) -->Line_48 $$ contentDispositionType = HttpHeaders.CONTENT_DISPOSITION_ATTACHMENT[ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_51 $$ StringBundler sb = new StringBundler(4)[ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_6 $$ if (Validator.isNotNull(contentType)) [ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_9 $$ mimeResponse.setProperty(HttpHeaders.CACHE_CONTROL, HttpHeaders.CACHE_CONTROL_PRIVATE_VALUE)[ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_52 $$ sb.append(contentDispositionType)[ CD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_46 $$ contentDispositionType = HttpHeaders.CONTENT_DISPOSITION_INLINE[ FD ]
Line_39 $$ String[] mimeTypesContentDispositionInline = null-->Line_43 $$ mimeTypesContentDispositionInline = new String[0][ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_6 $$ if (Validator.isNotNull(contentType)) [ FD ]
Line_10 $$ if (Validator.isNull(fileName)) -->Line_11 $$ return[ CD ]
Line_39 $$ String[] mimeTypesContentDispositionInline = null-->Line_45 $$ if (ArrayUtil.contains(mimeTypesContentDispositionInline, extension)) [ FD ]
Line_2 $$ protected static void setHeaders(PortletRequest portletRequest, MimeResponse mimeResponse, String fileName, String contentType, String contentDispositionType) -->Line_36 $$ if (Validator.isNull(contentDispositionType)) [ CD ]
Line_38 $$ extension = StringUtil.toLowerCase(extension)-->Line_45 $$ if (ArrayUtil.contains(mimeTypesContentDispositionInline, extension)) [ FD ]
