Line_44 $$ final int currentIndent = Math.max(0, j)-->Line_50 $$ previousLineIndent = currentIndent[ FD ]
Line_22 $$ boolean spaceSeen = false-->Line_53 $$ spaceSeen = true[ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_4 $$ final FileType fileType = file.getFileType()[ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_17 $$ int previousLineIndent = 0[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_46 $$ if (registerError(file, startOffset, true)) [ FD ]
Line_37 $$ if (c == ' ') -->Line_55 $$ if (!spaceSeen) [ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_10 $$ final boolean useTabs = indentOptions.USE_TAB_CHARACTER[ CD ]
Line_13 $$ if (document == null) -->Line_14 $$ return[ CD ]
Line_38 $$ if (useTabs) -->Line_39 $$ if (!smartTabs) [ CD ]
Line_17 $$ int previousLineIndent = 0-->Line_45 $$ if (currentIndent < previousLineIndent) [ FD ]
Line_43 $$ if (!spaceSeen) -->Line_45 $$ if (currentIndent < previousLineIndent) [ CD ]
Line_23 $$ for (int j = 0, length = line.length(); j < length; j++) -->Line_56 $$ previousLineIndent = Math.max(0, j)[ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_11 $$ final boolean smartTabs = indentOptions.SMART_TABS[ CD ]
Line_23 $$ for (int j = 0, length = line.length(); j < length; j++) -->Line_24 $$ final char c = line.charAt(j)[ CD ]
Line_45 $$ if (currentIndent < previousLineIndent) -->Line_46 $$ if (registerError(file, startOffset, true)) [ CD ]
Line_8 $$ final CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(file.getProject())-->Line_9 $$ final CommonCodeStyleSettings.IndentOptions indentOptions = settings.getIndentOptions(fileType)[ FD ]
Line_56 $$ previousLineIndent = Math.max(0, j)-->Line_45 $$ if (currentIndent < previousLineIndent) [ FD ]
Line_18 $$ for (int i = 0; i < lineCount; i++) -->Line_21 $$ final String line = document.getText(new TextRange(startOffset, endOffset))[ CD ]
Line_25 $$ if (c == '\t') -->Line_37 $$ if (c == ' ') [ CD ]
Line_12 $$ final Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)-->Line_13 $$ if (document == null) [ FD ]
Line_43 $$ if (!spaceSeen) -->Line_50 $$ previousLineIndent = currentIndent[ CD ]
Line_33 $$ if (registerError(file, startOffset, false)) -->Line_34 $$ return[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_9 $$ final CommonCodeStyleSettings.IndentOptions indentOptions = settings.getIndentOptions(fileType)[ CD ]
Line_18 $$ for (int i = 0; i < lineCount; i++) -->Line_20 $$ final int endOffset = document.getLineEndOffset(i)[ FD ]
Line_22 $$ boolean spaceSeen = false-->Line_55 $$ if (!spaceSeen) [ FD ]
Line_44 $$ final int currentIndent = Math.max(0, j)-->Line_45 $$ if (currentIndent < previousLineIndent) [ FD ]
Line_46 $$ if (registerError(file, startOffset, true)) -->Line_47 $$ return[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_13 $$ if (document == null) [ CD ]
Line_26 $$ if (useTabs) -->Line_33 $$ if (registerError(file, startOffset, false)) [ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_28 $$ if (registerError(file, startOffset, true)) [ FD ]
Line_11 $$ final boolean smartTabs = indentOptions.SMART_TABS-->Line_39 $$ if (!smartTabs) [ FD ]
Line_40 $$ if (registerError(file, startOffset, true)) -->Line_41 $$ return[ CD ]
Line_17 $$ int previousLineIndent = 0-->Line_56 $$ previousLineIndent = Math.max(0, j)[ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_3 $$ super.visitFile(file)[ FD ]
Line_37 $$ if (c == ' ') -->Line_53 $$ spaceSeen = true[ CD ]
Line_18 $$ for (int i = 0; i < lineCount; i++) -->Line_23 $$ for (int j = 0, length = line.length(); j < length; j++) [ CD ]
Line_53 $$ spaceSeen = true-->Line_27 $$ if (smartTabs && spaceSeen) [ FD ]
Line_53 $$ spaceSeen = true-->Line_55 $$ if (!spaceSeen) [ FD ]
Line_50 $$ previousLineIndent = currentIndent-->Line_56 $$ previousLineIndent = Math.max(0, j)[ FD ]
Line_21 $$ final String line = document.getText(new TextRange(startOffset, endOffset))-->Line_23 $$ for (int j = 0, length = line.length(); j < length; j++) [ FD ]
Line_19 $$ final int startOffset = document.getLineStartOffset(i)-->Line_28 $$ if (registerError(file, startOffset, true)) [ FD ]
Line_16 $$ final int lineCount = document.getLineCount()-->Line_18 $$ for (int i = 0; i < lineCount; i++) [ FD ]
Line_26 $$ if (useTabs) -->Line_27 $$ if (smartTabs && spaceSeen) [ CD ]
Line_24 $$ final char c = line.charAt(j)-->Line_25 $$ if (c == '\t') [ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_18 $$ for (int i = 0; i < lineCount; i++) [ CD ]
Line_18 $$ for (int i = 0; i < lineCount; i++) -->Line_19 $$ final int startOffset = document.getLineStartOffset(i)[ FD ]
Line_23 $$ for (int j = 0, length = line.length(); j < length; j++) -->Line_44 $$ final int currentIndent = Math.max(0, j)[ FD ]
Line_12 $$ final Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)-->Line_20 $$ final int endOffset = document.getLineEndOffset(i)[ FD ]
Line_22 $$ boolean spaceSeen = false-->Line_27 $$ if (smartTabs && spaceSeen) [ FD ]
Line_19 $$ final int startOffset = document.getLineStartOffset(i)-->Line_46 $$ if (registerError(file, startOffset, true)) [ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_4 $$ final FileType fileType = file.getFileType()[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_33 $$ if (registerError(file, startOffset, false)) [ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_3 $$ super.visitFile(file)[ CD ]
Line_5 $$ if (!(fileType instanceof LanguageFileType)) -->Line_6 $$ return[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_40 $$ if (registerError(file, startOffset, true)) [ FD ]
Line_21 $$ final String line = document.getText(new TextRange(startOffset, endOffset))-->Line_24 $$ final char c = line.charAt(j)[ FD ]
Line_17 $$ int previousLineIndent = 0-->Line_50 $$ previousLineIndent = currentIndent[ FD ]
Line_25 $$ if (c == '\t') -->Line_26 $$ if (useTabs) [ CD ]
Line_19 $$ final int startOffset = document.getLineStartOffset(i)-->Line_33 $$ if (registerError(file, startOffset, false)) [ FD ]
Line_18 $$ for (int i = 0; i < lineCount; i++) -->Line_19 $$ final int startOffset = document.getLineStartOffset(i)[ CD ]
Line_37 $$ if (c == ' ') -->Line_38 $$ if (useTabs) [ CD ]
Line_12 $$ final Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)-->Line_19 $$ final int startOffset = document.getLineStartOffset(i)[ FD ]
Line_28 $$ if (registerError(file, startOffset, true)) -->Line_29 $$ return[ CD ]
Line_23 $$ for (int j = 0, length = line.length(); j < length; j++) -->Line_24 $$ final char c = line.charAt(j)[ FD ]
Line_19 $$ final int startOffset = document.getLineStartOffset(i)-->Line_40 $$ if (registerError(file, startOffset, true)) [ FD ]
Line_12 $$ final Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)-->Line_21 $$ final String line = document.getText(new TextRange(startOffset, endOffset))[ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_8 $$ final CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(file.getProject())[ CD ]
Line_27 $$ if (smartTabs && spaceSeen) -->Line_28 $$ if (registerError(file, startOffset, true)) [ CD ]
Line_39 $$ if (!smartTabs) -->Line_43 $$ if (!spaceSeen) [ CD ]
Line_50 $$ previousLineIndent = currentIndent-->Line_45 $$ if (currentIndent < previousLineIndent) [ FD ]
Line_53 $$ spaceSeen = true-->Line_43 $$ if (!spaceSeen) [ FD ]
Line_22 $$ boolean spaceSeen = false-->Line_43 $$ if (!spaceSeen) [ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_16 $$ final int lineCount = document.getLineCount()[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_5 $$ if (!(fileType instanceof LanguageFileType)) [ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_12 $$ final Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)[ FD ]
Line_43 $$ if (!spaceSeen) -->Line_44 $$ final int currentIndent = Math.max(0, j)[ CD ]
Line_18 $$ for (int i = 0; i < lineCount; i++) -->Line_22 $$ boolean spaceSeen = false[ CD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_8 $$ final CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(file.getProject())[ FD ]
Line_4 $$ final FileType fileType = file.getFileType()-->Line_9 $$ final CommonCodeStyleSettings.IndentOptions indentOptions = settings.getIndentOptions(fileType)[ FD ]
Line_18 $$ for (int i = 0; i < lineCount; i++) -->Line_20 $$ final int endOffset = document.getLineEndOffset(i)[ CD ]
Line_39 $$ if (!smartTabs) -->Line_40 $$ if (registerError(file, startOffset, true)) [ CD ]
Line_11 $$ final boolean smartTabs = indentOptions.SMART_TABS-->Line_27 $$ if (smartTabs && spaceSeen) [ FD ]
Line_23 $$ for (int j = 0, length = line.length(); j < length; j++) -->Line_25 $$ if (c == '\t') [ CD ]
Line_24 $$ final char c = line.charAt(j)-->Line_37 $$ if (c == ' ') [ FD ]
Line_2 $$ public void visitFile(PsiFile file) -->Line_12 $$ final Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)[ CD ]
Line_55 $$ if (!spaceSeen) -->Line_56 $$ previousLineIndent = Math.max(0, j)[ CD ]
Line_12 $$ final Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)-->Line_16 $$ final int lineCount = document.getLineCount()[ FD ]
