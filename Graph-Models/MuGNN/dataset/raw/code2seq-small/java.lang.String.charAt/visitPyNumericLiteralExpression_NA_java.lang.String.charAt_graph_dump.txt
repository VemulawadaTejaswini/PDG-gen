Line_17 $$ suffix = " not support a trailing \'l\' or \'L\'."-->Line_39 $$ commonRegisterProblem(message, suffix, len, node, quickFix)[ FD ]
Line_2 $$ public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) -->Line_6 $$ StringBuilder message = new StringBuilder(myCommonMessage)[ CD ]
Line_23 $$ boolean isNull = true-->Line_26 $$ isNull = false[ FD ]
Line_2 $$ public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) -->Line_7 $$ String suffix = ""[ CD ]
Line_31 $$ len = appendLanguageLevel(message, len, languageLevel)-->Line_16 $$ len = appendLanguageLevel(message, len, languageLevel)[ FD ]
Line_15 $$ if (text.endsWith("l") || text.endsWith("L")) -->Line_16 $$ len = appendLanguageLevel(message, len, languageLevel)[ CD ]
Line_10 $$ if (languageLevel.isPy3K()) -->Line_15 $$ if (text.endsWith("l") || text.endsWith("L")) [ CD ]
Line_8 $$ for (int i = 0; i != myVersionsToProcess.size(); ++i) -->Line_9 $$ LanguageLevel languageLevel = myVersionsToProcess.get(i)[ CD ]
Line_22 $$ if (c != 'o' && c != 'b' && c != 'x') -->Line_23 $$ boolean isNull = true[ CD ]
Line_20 $$ if (text.length() > 1 && text.charAt(0) == '0') -->Line_21 $$ final char c = Character.toLowerCase(text.charAt(1))[ CD ]
Line_26 $$ isNull = false-->Line_30 $$ if (!isNull) [ FD ]
Line_16 $$ len = appendLanguageLevel(message, len, languageLevel)-->Line_31 $$ len = appendLanguageLevel(message, len, languageLevel)[ FD ]
Line_30 $$ if (!isNull) -->Line_31 $$ len = appendLanguageLevel(message, len, languageLevel)[ CD ]
Line_4 $$ int len = 0-->Line_39 $$ commonRegisterProblem(message, suffix, len, node, quickFix)[ FD ]
Line_2 $$ public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) -->Line_5 $$ LocalQuickFix quickFix = null[ CD ]
Line_5 $$ LocalQuickFix quickFix = null-->Line_39 $$ commonRegisterProblem(message, suffix, len, node, quickFix)[ FD ]
Line_5 $$ LocalQuickFix quickFix = null-->Line_32 $$ quickFix = new ReplaceOctalNumericLiteralQuickFix()[ FD ]
Line_20 $$ if (text.length() > 1 && text.charAt(0) == '0') -->Line_22 $$ if (c != 'o' && c != 'b' && c != 'x') [ CD ]
Line_30 $$ if (!isNull) -->Line_33 $$ suffix = " not support this syntax. It requires '0o' prefix for octal literals"[ CD ]
Line_10 $$ if (languageLevel.isPy3K()) -->Line_11 $$ if (!node.isIntegerLiteral()) [ CD ]
Line_16 $$ len = appendLanguageLevel(message, len, languageLevel)-->Line_39 $$ commonRegisterProblem(message, suffix, len, node, quickFix)[ FD ]
Line_2 $$ public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) -->Line_3 $$ super.visitPyNumericLiteralExpression(node)[ CD ]
Line_8 $$ for (int i = 0; i != myVersionsToProcess.size(); ++i) -->Line_9 $$ LanguageLevel languageLevel = myVersionsToProcess.get(i)[ FD ]
Line_7 $$ String suffix = ""-->Line_17 $$ suffix = " not support a trailing \'l\' or \'L\'."[ FD ]
Line_17 $$ suffix = " not support a trailing \'l\' or \'L\'."-->Line_33 $$ suffix = " not support this syntax. It requires '0o' prefix for octal literals"[ FD ]
Line_7 $$ String suffix = ""-->Line_33 $$ suffix = " not support this syntax. It requires '0o' prefix for octal literals"[ FD ]
Line_33 $$ suffix = " not support this syntax. It requires '0o' prefix for octal literals"-->Line_39 $$ commonRegisterProblem(message, suffix, len, node, quickFix)[ FD ]
Line_22 $$ if (c != 'o' && c != 'b' && c != 'x') -->Line_30 $$ if (!isNull) [ CD ]
Line_9 $$ LanguageLevel languageLevel = myVersionsToProcess.get(i)-->Line_16 $$ len = appendLanguageLevel(message, len, languageLevel)[ FD ]
Line_2 $$ public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) -->Line_14 $$ final String text = node.getText()[ FD ]
Line_2 $$ public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) -->Line_11 $$ if (!node.isIntegerLiteral()) [ FD ]
Line_2 $$ public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) -->Line_8 $$ for (int i = 0; i != myVersionsToProcess.size(); ++i) [ CD ]
Line_6 $$ StringBuilder message = new StringBuilder(myCommonMessage)-->Line_16 $$ len = appendLanguageLevel(message, len, languageLevel)[ FD ]
Line_15 $$ if (text.endsWith("l") || text.endsWith("L")) -->Line_17 $$ suffix = " not support a trailing \'l\' or \'L\'."[ CD ]
Line_10 $$ if (languageLevel.isPy3K()) -->Line_20 $$ if (text.length() > 1 && text.charAt(0) == '0') [ CD ]
Line_9 $$ LanguageLevel languageLevel = myVersionsToProcess.get(i)-->Line_31 $$ len = appendLanguageLevel(message, len, languageLevel)[ FD ]
Line_8 $$ for (int i = 0; i != myVersionsToProcess.size(); ++i) -->Line_10 $$ if (languageLevel.isPy3K()) [ CD ]
Line_25 $$ if (a != '0') -->Line_26 $$ isNull = false[ CD ]
Line_15 $$ if (text.endsWith("l") || text.endsWith("L")) -->Line_18 $$ quickFix = new RemoveTrailingLQuickFix()[ CD ]
Line_31 $$ len = appendLanguageLevel(message, len, languageLevel)-->Line_39 $$ commonRegisterProblem(message, suffix, len, node, quickFix)[ FD ]
Line_18 $$ quickFix = new RemoveTrailingLQuickFix()-->Line_39 $$ commonRegisterProblem(message, suffix, len, node, quickFix)[ FD ]
Line_24 $$ for (char a : text.toCharArray()) -->Line_25 $$ if (a != '0') [ FD ]
Line_5 $$ LocalQuickFix quickFix = null-->Line_18 $$ quickFix = new RemoveTrailingLQuickFix()[ FD ]
Line_30 $$ if (!isNull) -->Line_32 $$ quickFix = new ReplaceOctalNumericLiteralQuickFix()[ CD ]
Line_4 $$ int len = 0-->Line_31 $$ len = appendLanguageLevel(message, len, languageLevel)[ FD ]
Line_9 $$ LanguageLevel languageLevel = myVersionsToProcess.get(i)-->Line_10 $$ if (languageLevel.isPy3K()) [ FD ]
Line_14 $$ final String text = node.getText()-->Line_15 $$ if (text.endsWith("l") || text.endsWith("L")) [ FD ]
Line_14 $$ final String text = node.getText()-->Line_24 $$ for (char a : text.toCharArray()) [ FD ]
Line_23 $$ boolean isNull = true-->Line_30 $$ if (!isNull) [ FD ]
Line_2 $$ public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) -->Line_39 $$ commonRegisterProblem(message, suffix, len, node, quickFix)[ CD ]
Line_6 $$ StringBuilder message = new StringBuilder(myCommonMessage)-->Line_39 $$ commonRegisterProblem(message, suffix, len, node, quickFix)[ FD ]
Line_7 $$ String suffix = ""-->Line_39 $$ commonRegisterProblem(message, suffix, len, node, quickFix)[ FD ]
Line_4 $$ int len = 0-->Line_16 $$ len = appendLanguageLevel(message, len, languageLevel)[ FD ]
Line_14 $$ final String text = node.getText()-->Line_20 $$ if (text.length() > 1 && text.charAt(0) == '0') [ FD ]
Line_2 $$ public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) -->Line_4 $$ int len = 0[ CD ]
Line_10 $$ if (languageLevel.isPy3K()) -->Line_14 $$ final String text = node.getText()[ CD ]
Line_6 $$ StringBuilder message = new StringBuilder(myCommonMessage)-->Line_31 $$ len = appendLanguageLevel(message, len, languageLevel)[ FD ]
Line_2 $$ public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) -->Line_3 $$ super.visitPyNumericLiteralExpression(node)[ FD ]
Line_14 $$ final String text = node.getText()-->Line_21 $$ final char c = Character.toLowerCase(text.charAt(1))[ FD ]
Line_18 $$ quickFix = new RemoveTrailingLQuickFix()-->Line_32 $$ quickFix = new ReplaceOctalNumericLiteralQuickFix()[ FD ]
Line_2 $$ public void visitPyNumericLiteralExpression(final PyNumericLiteralExpression node) -->Line_39 $$ commonRegisterProblem(message, suffix, len, node, quickFix)[ FD ]
Line_32 $$ quickFix = new ReplaceOctalNumericLiteralQuickFix()-->Line_39 $$ commonRegisterProblem(message, suffix, len, node, quickFix)[ FD ]
