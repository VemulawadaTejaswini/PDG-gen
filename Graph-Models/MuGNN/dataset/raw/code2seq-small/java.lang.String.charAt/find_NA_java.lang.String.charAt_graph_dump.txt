Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_15 $$ DirectoryScanner directoryScanner = new DirectoryScanner()[ CD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_20 $$ String[] includedFiles = directoryScanner.getIncludedFiles()[ CD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_5 $$ if (directory.charAt(directory.length() - 1) == CharPool.SLASH) [ FD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_16 $$ directoryScanner.setBasedir(directory)[ CD ]
Line_21 $$ for (int i = 0; i < includedFiles.length; i++) -->Line_22 $$ includedFiles[i] = directory.concat(StringPool.SLASH).concat(replaceSeparator(includedFiles[i]))[ CD ]
Line_6 $$ directory = directory.substring(0, directory.length() - 1)-->Line_16 $$ directoryScanner.setBasedir(directory)[ FD ]
Line_4 $$ directory = replaceSeparator(directory)-->Line_5 $$ if (directory.charAt(directory.length() - 1) == CharPool.SLASH) [ FD ]
Line_15 $$ DirectoryScanner directoryScanner = new DirectoryScanner()-->Line_18 $$ directoryScanner.setIncludes(StringUtil.split(includes))[ FD ]
Line_15 $$ DirectoryScanner directoryScanner = new DirectoryScanner()-->Line_17 $$ directoryScanner.setExcludes(StringUtil.split(excludes))[ FD ]
Line_4 $$ directory = replaceSeparator(directory)-->Line_6 $$ directory = directory.substring(0, directory.length() - 1)[ FD ]
Line_6 $$ directory = directory.substring(0, directory.length() - 1)-->Line_9 $$ if (!exists(directory)) [ FD ]
Line_5 $$ if (directory.charAt(directory.length() - 1) == CharPool.SLASH) -->Line_6 $$ directory = directory.substring(0, directory.length() - 1)[ CD ]
Line_15 $$ DirectoryScanner directoryScanner = new DirectoryScanner()-->Line_19 $$ directoryScanner.scan()[ FD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_21 $$ for (int i = 0; i < includedFiles.length; i++) [ CD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_6 $$ directory = directory.substring(0, directory.length() - 1)[ FD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_18 $$ directoryScanner.setIncludes(StringUtil.split(includes))[ FD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_24 $$ return includedFiles[ CD ]
Line_15 $$ DirectoryScanner directoryScanner = new DirectoryScanner()-->Line_16 $$ directoryScanner.setBasedir(directory)[ FD ]
Line_4 $$ directory = replaceSeparator(directory)-->Line_22 $$ includedFiles[i] = directory.concat(StringPool.SLASH).concat(replaceSeparator(includedFiles[i]))[ FD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_18 $$ directoryScanner.setIncludes(StringUtil.split(includes))[ CD ]
Line_15 $$ DirectoryScanner directoryScanner = new DirectoryScanner()-->Line_20 $$ String[] includedFiles = directoryScanner.getIncludedFiles()[ FD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_16 $$ directoryScanner.setBasedir(directory)[ FD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_3 $$ if (directory.length() > 0) [ FD ]
Line_3 $$ if (directory.length() > 0) -->Line_5 $$ if (directory.charAt(directory.length() - 1) == CharPool.SLASH) [ CD ]
Line_4 $$ directory = replaceSeparator(directory)-->Line_9 $$ if (!exists(directory)) [ FD ]
Line_4 $$ directory = replaceSeparator(directory)-->Line_16 $$ directoryScanner.setBasedir(directory)[ FD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_4 $$ directory = replaceSeparator(directory)[ FD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_22 $$ includedFiles[i] = directory.concat(StringPool.SLASH).concat(replaceSeparator(includedFiles[i]))[ FD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_17 $$ directoryScanner.setExcludes(StringUtil.split(excludes))[ FD ]
Line_6 $$ directory = directory.substring(0, directory.length() - 1)-->Line_22 $$ includedFiles[i] = directory.concat(StringPool.SLASH).concat(replaceSeparator(includedFiles[i]))[ FD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_9 $$ if (!exists(directory)) [ FD ]
Line_9 $$ if (!exists(directory)) -->Line_10 $$ if (_log.isWarnEnabled()) [ CD ]
Line_9 $$ if (!exists(directory)) -->Line_13 $$ return new String[0][ CD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_3 $$ if (directory.length() > 0) [ CD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_9 $$ if (!exists(directory)) [ CD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_19 $$ directoryScanner.scan()[ CD ]
Line_10 $$ if (_log.isWarnEnabled()) -->Line_11 $$ _log.warn("Directory " + directory + " does not exist")[ CD ]
Line_3 $$ if (directory.length() > 0) -->Line_4 $$ directory = replaceSeparator(directory)[ CD ]
Line_2 $$ public String[] find(String directory, String includes, String excludes) -->Line_17 $$ directoryScanner.setExcludes(StringUtil.split(excludes))[ CD ]
