Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_14 $$ int caretOffset = caretModel.getOffset()[ FD ]
Line_6 $$ List<? extends SoftWrap> softWraps = new ArrayList(getSoftWrapModel().getRegisteredSoftWraps())-->Line_7 $$ assertTrue(!softWraps.isEmpty())[ FD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_41 $$ assertEquals(expectedVisualLine, caretModel.getVisualPosition().line)[ CD ]
Line_12 $$ int caretOffsetBefore = caretModel.getOffset()-->Line_22 $$ caretOffsetBefore = caretOffset[ FD ]
Line_10 $$ while (!softWraps.isEmpty()) -->Line_13 $$ end()[ CD ]
Line_6 $$ List<? extends SoftWrap> softWraps = new ArrayList(getSoftWrapModel().getRegisteredSoftWraps())-->Line_29 $$ softWraps.remove(0)[ FD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_39 $$ assertEquals(lastSymbolOffset, caretModel.getOffset())[ FD ]
Line_11 $$ SoftWrap softWrap = softWraps.get(0)-->Line_16 $$ assertFalse(caretOffset > softWrap.getStart())[ FD ]
Line_10 $$ while (!softWraps.isEmpty()) -->Line_27 $$ assertEquals(softWrap.getStart(), caretOffset)[ CD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_33 $$ int lastNonWhiteSpaceSymbolOffset = text.indexOf("\";") + 2[ CD ]
Line_17 $$ if (caretOffset < softWrap.getStart()) -->Line_18 $$ for (int i = caretOffset; i < softWrap.getStart(); i++) [ CD ]
Line_14 $$ int caretOffset = caretModel.getOffset()-->Line_22 $$ caretOffsetBefore = caretOffset[ FD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_37 $$ end()[ CD ]
Line_11 $$ SoftWrap softWrap = softWraps.get(0)-->Line_27 $$ assertEquals(softWrap.getStart(), caretOffset)[ FD ]
Line_18 $$ for (int i = caretOffset; i < softWrap.getStart(); i++) -->Line_19 $$ char c = text.charAt(i)[ FD ]
Line_24 $$ caretOffset = caretModel.getOffset()-->Line_27 $$ assertEquals(softWrap.getStart(), caretOffset)[ FD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_41 $$ assertEquals(expectedVisualLine, caretModel.getVisualPosition().line)[ FD ]
Line_18 $$ for (int i = caretOffset; i < softWrap.getStart(); i++) -->Line_20 $$ assertTrue(c == ' ' || c == '\t')[ CD ]
Line_14 $$ int caretOffset = caretModel.getOffset()-->Line_17 $$ if (caretOffset < softWrap.getStart()) [ FD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_10 $$ while (!softWraps.isEmpty()) [ CD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_34 $$ assertEquals(lastNonWhiteSpaceSymbolOffset, caretModel.getOffset())[ FD ]
Line_6 $$ List<? extends SoftWrap> softWraps = new ArrayList(getSoftWrapModel().getRegisteredSoftWraps())-->Line_11 $$ SoftWrap softWrap = softWraps.get(0)[ FD ]
Line_33 $$ int lastNonWhiteSpaceSymbolOffset = text.indexOf("\";") + 2-->Line_35 $$ assertEquals(myEditor.offsetToVisualPosition(lastNonWhiteSpaceSymbolOffset), caretModel.getVisualPosition())[ FD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_28 $$ assertEquals(new VisualPosition(expectedVisualLine, myEditor.offsetToVisualPosition(softWrap.getStart() - 1).column + 1), caretModel.getVisualPosition())[ FD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_3 $$ String text = "class Test [ CD ]
Line_11 $$ SoftWrap softWrap = softWraps.get(0)-->Line_28 $$ assertEquals(new VisualPosition(expectedVisualLine, myEditor.offsetToVisualPosition(softWrap.getStart() - 1).column + 1), caretModel.getVisualPosition())[ FD ]
Line_11 $$ SoftWrap softWrap = softWraps.get(0)-->Line_18 $$ for (int i = caretOffset; i < softWrap.getStart(); i++) [ FD ]
Line_24 $$ caretOffset = caretModel.getOffset()-->Line_17 $$ if (caretOffset < softWrap.getStart()) [ FD ]
Line_17 $$ if (caretOffset < softWrap.getStart()) -->Line_25 $$ assertTrue(caretOffset > caretOffsetBefore)[ CD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_9 $$ int expectedVisualLine = caretModel.getVisualPosition().line[ FD ]
Line_14 $$ int caretOffset = caretModel.getOffset()-->Line_27 $$ assertEquals(softWrap.getStart(), caretOffset)[ FD ]
Line_9 $$ int expectedVisualLine = caretModel.getVisualPosition().line-->Line_30 $$ expectedVisualLine++[ FD ]
Line_10 $$ while (!softWraps.isEmpty()) -->Line_30 $$ expectedVisualLine++[ CD ]
Line_3 $$ String text = "class Test -->Line_19 $$ char c = text.charAt(i)[ FD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_12 $$ int caretOffsetBefore = caretModel.getOffset()[ FD ]
Line_24 $$ caretOffset = caretModel.getOffset()-->Line_22 $$ caretOffsetBefore = caretOffset[ FD ]
Line_10 $$ while (!softWraps.isEmpty()) -->Line_29 $$ softWraps.remove(0)[ CD ]
Line_14 $$ int caretOffset = caretModel.getOffset()-->Line_24 $$ caretOffset = caretModel.getOffset()[ FD ]
Line_10 $$ while (!softWraps.isEmpty()) -->Line_17 $$ if (caretOffset < softWrap.getStart()) [ CD ]
Line_17 $$ if (caretOffset < softWrap.getStart()) -->Line_24 $$ caretOffset = caretModel.getOffset()[ CD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_36 $$ assertEquals(expectedVisualLine, caretModel.getVisualPosition().line)[ CD ]
Line_3 $$ String text = "class Test -->Line_4 $$ init(30, text)[ FD ]
Line_10 $$ while (!softWraps.isEmpty()) -->Line_15 $$ assertTrue(caretOffset > caretOffsetBefore)[ CD ]
Line_3 $$ String text = "class Test -->Line_5 $$ myEditor.getCaretModel().moveToOffset(text.indexOf("\n") + 1)[ FD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_4 $$ init(30, text)[ CD ]
Line_18 $$ for (int i = caretOffset; i < softWrap.getStart(); i++) -->Line_19 $$ char c = text.charAt(i)[ CD ]
Line_11 $$ SoftWrap softWrap = softWraps.get(0)-->Line_17 $$ if (caretOffset < softWrap.getStart()) [ FD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_5 $$ myEditor.getCaretModel().moveToOffset(text.indexOf("\n") + 1)[ CD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_32 $$ end()[ CD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_7 $$ assertTrue(!softWraps.isEmpty())[ CD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_6 $$ List<? extends SoftWrap> softWraps = new ArrayList(getSoftWrapModel().getRegisteredSoftWraps())[ CD ]
Line_10 $$ while (!softWraps.isEmpty()) -->Line_11 $$ SoftWrap softWrap = softWraps.get(0)[ CD ]
Line_38 $$ int lastSymbolOffset = myEditor.getDocument().getLineEndOffset(caretModel.getLogicalPosition().line)-->Line_39 $$ assertEquals(lastSymbolOffset, caretModel.getOffset())[ FD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_24 $$ caretOffset = caretModel.getOffset()[ FD ]
Line_10 $$ while (!softWraps.isEmpty()) -->Line_28 $$ assertEquals(new VisualPosition(expectedVisualLine, myEditor.offsetToVisualPosition(softWrap.getStart() - 1).column + 1), caretModel.getVisualPosition())[ CD ]
Line_33 $$ int lastNonWhiteSpaceSymbolOffset = text.indexOf("\";") + 2-->Line_34 $$ assertEquals(lastNonWhiteSpaceSymbolOffset, caretModel.getOffset())[ FD ]
Line_10 $$ while (!softWraps.isEmpty()) -->Line_12 $$ int caretOffsetBefore = caretModel.getOffset()[ CD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_39 $$ assertEquals(lastSymbolOffset, caretModel.getOffset())[ CD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()[ CD ]
Line_38 $$ int lastSymbolOffset = myEditor.getDocument().getLineEndOffset(caretModel.getLogicalPosition().line)-->Line_40 $$ assertEquals(myEditor.offsetToVisualPosition(lastSymbolOffset), caretModel.getVisualPosition())[ FD ]
Line_6 $$ List<? extends SoftWrap> softWraps = new ArrayList(getSoftWrapModel().getRegisteredSoftWraps())-->Line_10 $$ while (!softWraps.isEmpty()) [ FD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_40 $$ assertEquals(myEditor.offsetToVisualPosition(lastSymbolOffset), caretModel.getVisualPosition())[ CD ]
Line_9 $$ int expectedVisualLine = caretModel.getVisualPosition().line-->Line_36 $$ assertEquals(expectedVisualLine, caretModel.getVisualPosition().line)[ FD ]
Line_17 $$ if (caretOffset < softWrap.getStart()) -->Line_22 $$ caretOffsetBefore = caretOffset[ CD ]
Line_9 $$ int expectedVisualLine = caretModel.getVisualPosition().line-->Line_41 $$ assertEquals(expectedVisualLine, caretModel.getVisualPosition().line)[ FD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_35 $$ assertEquals(myEditor.offsetToVisualPosition(lastNonWhiteSpaceSymbolOffset), caretModel.getVisualPosition())[ FD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_9 $$ int expectedVisualLine = caretModel.getVisualPosition().line[ CD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_40 $$ assertEquals(myEditor.offsetToVisualPosition(lastSymbolOffset), caretModel.getVisualPosition())[ FD ]
Line_10 $$ while (!softWraps.isEmpty()) -->Line_14 $$ int caretOffset = caretModel.getOffset()[ CD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_35 $$ assertEquals(myEditor.offsetToVisualPosition(lastNonWhiteSpaceSymbolOffset), caretModel.getVisualPosition())[ CD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_36 $$ assertEquals(expectedVisualLine, caretModel.getVisualPosition().line)[ FD ]
Line_17 $$ if (caretOffset < softWrap.getStart()) -->Line_23 $$ end()[ CD ]
Line_10 $$ while (!softWraps.isEmpty()) -->Line_16 $$ assertFalse(caretOffset > softWrap.getStart())[ CD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_38 $$ int lastSymbolOffset = myEditor.getDocument().getLineEndOffset(caretModel.getLogicalPosition().line)[ FD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_38 $$ int lastSymbolOffset = myEditor.getDocument().getLineEndOffset(caretModel.getLogicalPosition().line)[ CD ]
Line_3 $$ String text = "class Test -->Line_33 $$ int lastNonWhiteSpaceSymbolOffset = text.indexOf("\";") + 2[ FD ]
Line_2 $$ public void testEndProcessing() throws IOException -->Line_34 $$ assertEquals(lastNonWhiteSpaceSymbolOffset, caretModel.getOffset())[ CD ]
