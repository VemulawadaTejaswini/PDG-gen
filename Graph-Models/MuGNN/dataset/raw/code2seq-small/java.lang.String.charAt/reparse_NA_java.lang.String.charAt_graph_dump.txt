Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_33 $$ for (int i = nextDotOrDollar; i < str.length() && Character.isJavaIdentifierPart(str.charAt(i)); ++i) nextDotOrDollar++[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_44 $$ ch = str.charAt(j)[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_59 $$ if (nextDotOrDollar != -1 && nextDotOrDollar < str.length()) [ FD ]
Line_26 $$ nextDotOrDollar = curIndex-->Line_85 $$ if ((currentDot = nextDotOrDollar) < 0) [ FD ]
Line_40 $$ if (ch == '[') -->Line_43 $$ if (j < str.length()) [ CD ]
Line_55 $$ nextDotOrDollar = -1-->Line_69 $$ nextDotOrDollar = -1[ FD ]
Line_12 $$ while (parsingClassNames) -->Line_83 $$ referenceIndex++[ CD ]
Line_45 $$ if (ch == ']') -->Line_47 $$ while (j < str.length() && Character.isWhitespace(str.charAt(j))) ++j[ CD ]
Line_31 $$ if (nextDotOrDollar == -1) -->Line_32 $$ nextDotOrDollar = currentDot + 1[ CD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_82 $$ JavaClassReference currentContextRef = createReference(referenceIndex, subreferenceText, textRange, isStaticImport)[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_36 $$ while (j < str.length() && Character.isWhitespace(str.charAt(j))) ++j[ FD ]
Line_14 $$ for (int curIndex = currentDot + 1; curIndex < str.length(); ++curIndex) -->Line_15 $$ final char ch = str.charAt(curIndex)[ CD ]
Line_85 $$ if ((currentDot = nextDotOrDollar) < 0) -->Line_32 $$ nextDotOrDollar = currentDot + 1[ FD ]
Line_34 $$ parsingClassNames = false-->Line_75 $$ parsingClassNames = false[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_14 $$ for (int curIndex = currentDot + 1; curIndex < str.length(); ++curIndex) [ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_74 $$ myContext.myNestedGenericParameterReferences.add(new JavaClassReferenceSet(str.substring(nextDotOrDollar + 1), myElement, myStartInElement + nextDotOrDollar + 1, isStaticImport, myProvider, this))[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_12 $$ while (parsingClassNames) [ CD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_8 $$ boolean allowDollarInNames = isAllowDollarInNames()[ CD ]
Line_69 $$ nextDotOrDollar = -1-->Line_80 $$ final String subreferenceText = nextDotOrDollar > 0 ? str.substring(beginIndex, nextDotOrDollar) : str.substring(beginIndex)[ FD ]
Line_31 $$ if (nextDotOrDollar == -1) -->Line_34 $$ parsingClassNames = false[ CD ]
Line_9 $$ boolean allowGenerics = false-->Line_22 $$ allowGenerics = !isStaticImport && PsiUtil.isLanguageLevel5OrHigher(element)[ FD ]
Line_71 $$ if (COMMA == c && myContext != null) -->Line_75 $$ parsingClassNames = false[ CD ]
Line_17 $$ nextDotOrDollar = curIndex-->Line_69 $$ nextDotOrDollar = -1[ FD ]
Line_32 $$ nextDotOrDollar = currentDot + 1-->Line_31 $$ if (nextDotOrDollar == -1) [ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_43 $$ if (j < str.length()) [ FD ]
Line_37 $$ if (j < str.length()) -->Line_53 $$ if (aBoolean == null || !aBoolean.booleanValue()) [ CD ]
Line_23 $$ allowGenericsCalculated = true-->Line_21 $$ if (!allowGenericsCalculated) [ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_38 $$ char ch = str.charAt(j)[ FD ]
Line_26 $$ nextDotOrDollar = curIndex-->Line_33 $$ nextDotOrDollar++[ FD ]
Line_10 $$ boolean allowGenericsCalculated = false-->Line_23 $$ allowGenericsCalculated = true[ FD ]
Line_21 $$ if (!allowGenericsCalculated) -->Line_23 $$ allowGenericsCalculated = true[ CD ]
Line_12 $$ while (parsingClassNames) -->Line_85 $$ if ((currentDot = nextDotOrDollar) < 0) [ CD ]
Line_13 $$ int nextDotOrDollar = -1-->Line_31 $$ if (nextDotOrDollar == -1) [ FD ]
Line_69 $$ nextDotOrDollar = -1-->Line_85 $$ if ((currentDot = nextDotOrDollar) < 0) [ FD ]
Line_45 $$ if (ch == ']') -->Line_48 $$ recognized = j == str.length()[ CD ]
Line_12 $$ while (parsingClassNames) -->Line_59 $$ if (nextDotOrDollar != -1 && nextDotOrDollar < str.length()) [ CD ]
Line_20 $$ if (ch == LT || ch == COMMA) -->Line_25 $$ if (allowGenerics) [ CD ]
Line_26 $$ nextDotOrDollar = curIndex-->Line_69 $$ nextDotOrDollar = -1[ FD ]
Line_67 $$ parsingClassNames = false-->Line_75 $$ parsingClassNames = false[ FD ]
Line_13 $$ int nextDotOrDollar = -1-->Line_26 $$ nextDotOrDollar = curIndex[ FD ]
Line_54 $$ if (!recognized)-->Line_55 $$ nextDotOrDollar = -1[ CD ]
Line_17 $$ nextDotOrDollar = curIndex-->Line_26 $$ nextDotOrDollar = curIndex[ FD ]
Line_17 $$ nextDotOrDollar = curIndex-->Line_60 $$ final char c = str.charAt(nextDotOrDollar)[ FD ]
Line_14 $$ for (int curIndex = currentDot + 1; curIndex < str.length(); ++curIndex) -->Line_20 $$ if (ch == LT || ch == COMMA) [ CD ]
Line_37 $$ if (j < str.length()) -->Line_52 $$ final Boolean aBoolean = JavaClassReferenceProvider.JVM_FORMAT.getValue(getOptions())[ CD ]
Line_71 $$ if (COMMA == c && myContext != null) -->Line_74 $$ myContext.myNestedGenericParameterReferences.add(new JavaClassReferenceSet(str.substring(nextDotOrDollar + 1), myElement, myStartInElement + nextDotOrDollar + 1, isStaticImport, myProvider, this))[ CD ]
Line_61 $$ if (c == LT) -->Line_63 $$ if (end != -1 && end > nextDotOrDollar) [ CD ]
Line_14 $$ for (int curIndex = currentDot + 1; curIndex < str.length(); ++curIndex) -->Line_16 $$ if (ch == DOT || ch == DOLLAR && allowDollarInNames) [ CD ]
Line_31 $$ if (nextDotOrDollar == -1) -->Line_33 $$ for (int i = nextDotOrDollar; i < str.length() && Character.isJavaIdentifierPart(str.charAt(i)); ++i) nextDotOrDollar++[ CD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_79 $$ while (beginIndex < nextDotOrDollar && Character.isWhitespace(str.charAt(beginIndex))) beginIndex++[ FD ]
Line_12 $$ while (parsingClassNames) -->Line_31 $$ if (nextDotOrDollar == -1) [ CD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_9 $$ boolean allowGenerics = false[ CD ]
Line_40 $$ if (ch == '[') -->Line_42 $$ while (j < str.length() && Character.isWhitespace(str.charAt(j))) ++j[ CD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_10 $$ boolean allowGenericsCalculated = false[ CD ]
Line_15 $$ final char ch = str.charAt(curIndex)-->Line_44 $$ ch = str.charAt(j)[ FD ]
Line_31 $$ if (nextDotOrDollar == -1) -->Line_37 $$ if (j < str.length()) [ CD ]
Line_43 $$ if (j < str.length()) -->Line_44 $$ ch = str.charAt(j)[ CD ]
Line_43 $$ if (j < str.length()) -->Line_45 $$ if (ch == ']') [ CD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_66 $$ myNestedGenericParameterReferences.add(new JavaClassReferenceSet(str.substring(nextDotOrDollar + 1, end), myElement, myStartInElement + nextDotOrDollar + 1, isStaticImport, myProvider, this))[ FD ]
Line_61 $$ if (c == LT) -->Line_62 $$ int end = str.lastIndexOf('>')[ CD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_15 $$ final char ch = str.charAt(curIndex)[ FD ]
Line_17 $$ nextDotOrDollar = curIndex-->Line_80 $$ final String subreferenceText = nextDotOrDollar > 0 ? str.substring(beginIndex, nextDotOrDollar) : str.substring(beginIndex)[ FD ]
Line_11 $$ boolean parsingClassNames = true-->Line_34 $$ parsingClassNames = false[ FD ]
Line_14 $$ for (int curIndex = currentDot + 1; curIndex < str.length(); ++curIndex) -->Line_15 $$ final char ch = str.charAt(curIndex)[ FD ]
Line_13 $$ int nextDotOrDollar = -1-->Line_80 $$ final String subreferenceText = nextDotOrDollar > 0 ? str.substring(beginIndex, nextDotOrDollar) : str.substring(beginIndex)[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_7 $$ int referenceIndex = 0[ CD ]
Line_12 $$ while (parsingClassNames) -->Line_84 $$ referencesList.add(currentContextRef)[ CD ]
Line_17 $$ nextDotOrDollar = curIndex-->Line_85 $$ if ((currentDot = nextDotOrDollar) < 0) [ FD ]
Line_10 $$ boolean allowGenericsCalculated = false-->Line_21 $$ if (!allowGenericsCalculated) [ FD ]
Line_55 $$ nextDotOrDollar = -1-->Line_60 $$ final char c = str.charAt(nextDotOrDollar)[ FD ]
Line_32 $$ nextDotOrDollar = currentDot + 1-->Line_80 $$ final String subreferenceText = nextDotOrDollar > 0 ? str.substring(beginIndex, nextDotOrDollar) : str.substring(beginIndex)[ FD ]
Line_11 $$ boolean parsingClassNames = true-->Line_67 $$ parsingClassNames = false[ FD ]
Line_12 $$ while (parsingClassNames) -->Line_82 $$ JavaClassReference currentContextRef = createReference(referenceIndex, subreferenceText, textRange, isStaticImport)[ CD ]
Line_6 $$ int currentDot = -1-->Line_32 $$ nextDotOrDollar = currentDot + 1[ FD ]
Line_53 $$ if (aBoolean == null || !aBoolean.booleanValue()) -->Line_54 $$ if (!recognized)[ CD ]
Line_26 $$ nextDotOrDollar = curIndex-->Line_80 $$ final String subreferenceText = nextDotOrDollar > 0 ? str.substring(beginIndex, nextDotOrDollar) : str.substring(beginIndex)[ FD ]
Line_13 $$ int nextDotOrDollar = -1-->Line_85 $$ if ((currentDot = nextDotOrDollar) < 0) [ FD ]
Line_32 $$ nextDotOrDollar = currentDot + 1-->Line_69 $$ nextDotOrDollar = -1[ FD ]
Line_72 $$ if (myContext.myNestedGenericParameterReferences == null)-->Line_73 $$ myContext.myNestedGenericParameterReferences = new ArrayList<JavaClassReferenceSet>(1)[ CD ]
Line_13 $$ int nextDotOrDollar = -1-->Line_32 $$ nextDotOrDollar = currentDot + 1[ FD ]
Line_7 $$ int referenceIndex = 0-->Line_82 $$ JavaClassReference currentContextRef = createReference(referenceIndex, subreferenceText, textRange, isStaticImport)[ FD ]
Line_55 $$ nextDotOrDollar = -1-->Line_85 $$ if ((currentDot = nextDotOrDollar) < 0) [ FD ]
Line_6 $$ int currentDot = -1-->Line_85 $$ if ((currentDot = nextDotOrDollar) < 0) [ FD ]
Line_71 $$ if (COMMA == c && myContext != null) -->Line_72 $$ if (myContext.myNestedGenericParameterReferences == null)[ CD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_5 $$ final List<JavaClassReference> referencesList = new ArrayList<JavaClassReference>()[ CD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_37 $$ if (j < str.length()) [ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_47 $$ while (j < str.length() && Character.isWhitespace(str.charAt(j))) ++j[ FD ]
Line_12 $$ while (parsingClassNames) -->Line_13 $$ int nextDotOrDollar = -1[ CD ]
Line_13 $$ int nextDotOrDollar = -1-->Line_33 $$ nextDotOrDollar++[ FD ]
Line_55 $$ nextDotOrDollar = -1-->Line_80 $$ final String subreferenceText = nextDotOrDollar > 0 ? str.substring(beginIndex, nextDotOrDollar) : str.substring(beginIndex)[ FD ]
Line_25 $$ if (allowGenerics) -->Line_26 $$ nextDotOrDollar = curIndex[ CD ]
Line_63 $$ if (end != -1 && end > nextDotOrDollar) -->Line_69 $$ nextDotOrDollar = -1[ CD ]
Line_69 $$ nextDotOrDollar = -1-->Line_31 $$ if (nextDotOrDollar == -1) [ FD ]
Line_32 $$ nextDotOrDollar = currentDot + 1-->Line_60 $$ final char c = str.charAt(nextDotOrDollar)[ FD ]
Line_21 $$ if (!allowGenericsCalculated) -->Line_22 $$ allowGenerics = !isStaticImport && PsiUtil.isLanguageLevel5OrHigher(element)[ CD ]
Line_37 $$ if (j < str.length()) -->Line_40 $$ if (ch == '[') [ CD ]
Line_11 $$ boolean parsingClassNames = true-->Line_75 $$ parsingClassNames = false[ FD ]
Line_69 $$ nextDotOrDollar = -1-->Line_60 $$ final char c = str.charAt(nextDotOrDollar)[ FD ]
Line_13 $$ int nextDotOrDollar = -1-->Line_17 $$ nextDotOrDollar = curIndex[ FD ]
Line_12 $$ while (parsingClassNames) -->Line_14 $$ for (int curIndex = currentDot + 1; curIndex < str.length(); ++curIndex) [ CD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_60 $$ final char c = str.charAt(nextDotOrDollar)[ FD ]
Line_7 $$ int referenceIndex = 0-->Line_83 $$ referenceIndex++[ FD ]
Line_32 $$ nextDotOrDollar = currentDot + 1-->Line_55 $$ nextDotOrDollar = -1[ FD ]
Line_63 $$ if (end != -1 && end > nextDotOrDollar) -->Line_66 $$ myNestedGenericParameterReferences.add(new JavaClassReferenceSet(str.substring(nextDotOrDollar + 1, end), myElement, myStartInElement + nextDotOrDollar + 1, isStaticImport, myProvider, this))[ CD ]
Line_26 $$ nextDotOrDollar = curIndex-->Line_60 $$ final char c = str.charAt(nextDotOrDollar)[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_62 $$ int end = str.lastIndexOf('>')[ FD ]
Line_59 $$ if (nextDotOrDollar != -1 && nextDotOrDollar < str.length()) -->Line_60 $$ final char c = str.charAt(nextDotOrDollar)[ CD ]
Line_14 $$ for (int curIndex = currentDot + 1; curIndex < str.length(); ++curIndex) -->Line_26 $$ nextDotOrDollar = curIndex[ FD ]
Line_26 $$ nextDotOrDollar = curIndex-->Line_32 $$ nextDotOrDollar = currentDot + 1[ FD ]
Line_20 $$ if (ch == LT || ch == COMMA) -->Line_21 $$ if (!allowGenericsCalculated) [ CD ]
Line_61 $$ if (c == LT) -->Line_71 $$ if (COMMA == c && myContext != null) [ CD ]
Line_16 $$ if (ch == DOT || ch == DOLLAR && allowDollarInNames) -->Line_17 $$ nextDotOrDollar = curIndex[ CD ]
Line_59 $$ if (nextDotOrDollar != -1 && nextDotOrDollar < str.length()) -->Line_61 $$ if (c == LT) [ CD ]
Line_13 $$ int nextDotOrDollar = -1-->Line_55 $$ nextDotOrDollar = -1[ FD ]
Line_13 $$ int nextDotOrDollar = -1-->Line_60 $$ final char c = str.charAt(nextDotOrDollar)[ FD ]
Line_55 $$ nextDotOrDollar = -1-->Line_31 $$ if (nextDotOrDollar == -1) [ FD ]
Line_26 $$ nextDotOrDollar = curIndex-->Line_31 $$ if (nextDotOrDollar == -1) [ FD ]
Line_44 $$ ch = str.charAt(j)-->Line_45 $$ if (ch == ']') [ FD ]
Line_15 $$ final char ch = str.charAt(curIndex)-->Line_45 $$ if (ch == ']') [ FD ]
Line_31 $$ if (nextDotOrDollar == -1) -->Line_36 $$ while (j < str.length() && Character.isWhitespace(str.charAt(j))) ++j[ CD ]
Line_5 $$ final List<JavaClassReference> referencesList = new ArrayList<JavaClassReference>()-->Line_84 $$ referencesList.add(currentContextRef)[ FD ]
Line_44 $$ ch = str.charAt(j)-->Line_40 $$ if (ch == '[') [ FD ]
Line_13 $$ int nextDotOrDollar = -1-->Line_69 $$ nextDotOrDollar = -1[ FD ]
Line_17 $$ nextDotOrDollar = curIndex-->Line_32 $$ nextDotOrDollar = currentDot + 1[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_11 $$ boolean parsingClassNames = true[ CD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_22 $$ allowGenerics = !isStaticImport && PsiUtil.isLanguageLevel5OrHigher(element)[ FD ]
Line_32 $$ nextDotOrDollar = currentDot + 1-->Line_33 $$ nextDotOrDollar++[ FD ]
Line_17 $$ nextDotOrDollar = curIndex-->Line_55 $$ nextDotOrDollar = -1[ FD ]
Line_37 $$ if (j < str.length()) -->Line_38 $$ char ch = str.charAt(j)[ CD ]
Line_26 $$ nextDotOrDollar = curIndex-->Line_55 $$ nextDotOrDollar = -1[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_80 $$ final String subreferenceText = nextDotOrDollar > 0 ? str.substring(beginIndex, nextDotOrDollar) : str.substring(beginIndex)[ FD ]
Line_34 $$ parsingClassNames = false-->Line_67 $$ parsingClassNames = false[ FD ]
Line_17 $$ nextDotOrDollar = curIndex-->Line_31 $$ if (nextDotOrDollar == -1) [ FD ]
Line_63 $$ if (end != -1 && end > nextDotOrDollar) -->Line_67 $$ parsingClassNames = false[ CD ]
Line_5 $$ final List<JavaClassReference> referencesList = new ArrayList<JavaClassReference>()-->Line_89 $$ myReferences = referencesList.toArray(new JavaClassReference[referencesList.size()])[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_48 $$ recognized = j == str.length()[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_6 $$ int currentDot = -1[ CD ]
Line_63 $$ if (end != -1 && end > nextDotOrDollar) -->Line_64 $$ if (myNestedGenericParameterReferences == null)[ CD ]
Line_12 $$ while (parsingClassNames) -->Line_79 $$ while (beginIndex < nextDotOrDollar && Character.isWhitespace(str.charAt(beginIndex))) beginIndex++[ CD ]
Line_17 $$ nextDotOrDollar = curIndex-->Line_33 $$ nextDotOrDollar++[ FD ]
Line_32 $$ nextDotOrDollar = currentDot + 1-->Line_85 $$ if ((currentDot = nextDotOrDollar) < 0) [ FD ]
Line_14 $$ for (int curIndex = currentDot + 1; curIndex < str.length(); ++curIndex) -->Line_17 $$ nextDotOrDollar = curIndex[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_89 $$ myReferences = referencesList.toArray(new JavaClassReference[referencesList.size()])[ CD ]
Line_15 $$ final char ch = str.charAt(curIndex)-->Line_40 $$ if (ch == '[') [ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_81 $$ TextRange textRange = new TextRange(myStartInElement + beginIndex, myStartInElement + (nextDotOrDollar > 0 ? nextDotOrDollar : str.length()))[ FD ]
Line_2 $$ private void reparse(@NotNull String str, @NotNull PsiElement element, final boolean isStaticImport, JavaClassReferenceSet context) -->Line_42 $$ while (j < str.length() && Character.isWhitespace(str.charAt(j))) ++j[ FD ]
