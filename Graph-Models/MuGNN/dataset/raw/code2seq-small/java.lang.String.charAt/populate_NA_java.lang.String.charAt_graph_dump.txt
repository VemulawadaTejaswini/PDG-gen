Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_9 $$ int i = fileName.indexOf(testName)[ CD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_13 $$ i = fileName.indexOf((testNameStartsWithLowerCase ? Character.toUpperCase(firstChar) : Character.toLowerCase(firstChar)) + testName.substring(1))[ FD ]
Line_10 $$ final char firstChar = testName.charAt(0)-->Line_11 $$ boolean testNameStartsWithLowerCase = Character.isLowerCase(firstChar)[ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_24 $$ dir = matched.getParent().getPath()[ CD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_6 $$ boolean excludeExtension = !withoutExtension.equals(testName)[ CD ]
Line_9 $$ int i = fileName.indexOf(testName)-->Line_18 $$ if (i < 0) [ FD ]
Line_9 $$ int i = fileName.indexOf(testName)-->Line_12 $$ if (i < 0) [ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_3 $$ if (testName.isEmpty())[ CD ]
Line_8 $$ final String fileName = matched.getNameWithoutExtension()-->Line_9 $$ int i = fileName.indexOf(testName)[ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_22 $$ fileSuffix = fileName.substring(i + testName.length())[ FD ]
Line_13 $$ i = fileName.indexOf((testNameStartsWithLowerCase ? Character.toUpperCase(firstChar) : Character.toLowerCase(firstChar)) + testName.substring(1))-->Line_18 $$ if (i < 0) [ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_22 $$ fileSuffix = fileName.substring(i + testName.length())[ CD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_18 $$ if (i < 0) [ CD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_3 $$ if (testName.isEmpty())[ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_5 $$ final String withoutExtension = FileUtil.getNameWithoutExtension(testName)[ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_23 $$ ext = excludeExtension ? "" : matched.getExtension()[ FD ]
Line_8 $$ final String fileName = matched.getNameWithoutExtension()-->Line_21 $$ filePrefix = fileName.substring(0, i)[ FD ]
Line_9 $$ int i = fileName.indexOf(testName)-->Line_13 $$ i = fileName.indexOf((testNameStartsWithLowerCase ? Character.toUpperCase(firstChar) : Character.toLowerCase(firstChar)) + testName.substring(1))[ FD ]
Line_12 $$ if (i < 0) -->Line_13 $$ i = fileName.indexOf((testNameStartsWithLowerCase ? Character.toUpperCase(firstChar) : Character.toLowerCase(firstChar)) + testName.substring(1))[ CD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_8 $$ final String fileName = matched.getNameWithoutExtension()[ FD ]
Line_5 $$ final String withoutExtension = FileUtil.getNameWithoutExtension(testName)-->Line_6 $$ boolean excludeExtension = !withoutExtension.equals(testName)[ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_10 $$ final char firstChar = testName.charAt(0)[ CD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_24 $$ dir = matched.getParent().getPath()[ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_10 $$ final char firstChar = testName.charAt(0)[ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_12 $$ if (i < 0) [ CD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_21 $$ filePrefix = fileName.substring(0, i)[ CD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_6 $$ boolean excludeExtension = !withoutExtension.equals(testName)[ FD ]
Line_18 $$ if (i < 0) -->Line_19 $$ return[ CD ]
Line_8 $$ final String fileName = matched.getNameWithoutExtension()-->Line_22 $$ fileSuffix = fileName.substring(i + testName.length())[ FD ]
Line_9 $$ int i = fileName.indexOf(testName)-->Line_21 $$ filePrefix = fileName.substring(0, i)[ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_11 $$ boolean testNameStartsWithLowerCase = Character.isLowerCase(firstChar)[ CD ]
Line_13 $$ i = fileName.indexOf((testNameStartsWithLowerCase ? Character.toUpperCase(firstChar) : Character.toLowerCase(firstChar)) + testName.substring(1))-->Line_21 $$ filePrefix = fileName.substring(0, i)[ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_8 $$ final String fileName = matched.getNameWithoutExtension()[ CD ]
Line_11 $$ boolean testNameStartsWithLowerCase = Character.isLowerCase(firstChar)-->Line_14 $$ startWithLowerCase = !testNameStartsWithLowerCase[ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_9 $$ int i = fileName.indexOf(testName)[ FD ]
Line_12 $$ if (i < 0) -->Line_14 $$ startWithLowerCase = !testNameStartsWithLowerCase[ CD ]
Line_3 $$ if (testName.isEmpty())-->Line_4 $$ return[ CD ]
Line_10 $$ final char firstChar = testName.charAt(0)-->Line_13 $$ i = fileName.indexOf((testNameStartsWithLowerCase ? Character.toUpperCase(firstChar) : Character.toLowerCase(firstChar)) + testName.substring(1))[ FD ]
Line_2 $$ public void populate(@NotNull String testName, @NotNull VirtualFile matched) -->Line_5 $$ final String withoutExtension = FileUtil.getNameWithoutExtension(testName)[ CD ]
Line_8 $$ final String fileName = matched.getNameWithoutExtension()-->Line_13 $$ i = fileName.indexOf((testNameStartsWithLowerCase ? Character.toUpperCase(firstChar) : Character.toLowerCase(firstChar)) + testName.substring(1))[ FD ]
