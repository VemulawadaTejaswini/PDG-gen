Line_75 $$ element = element.getParent().getParent()-->Line_81 $$ if (element == null)[ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_75 $$ element = element.getParent().getParent()[ FD ]
Line_98 $$ if (elementAtCaret instanceof XmlToken && ((XmlToken) elementAtCaret).getTokenType() == XmlTokenType.XML_NAME) -->Line_99 $$ name = name.substring(0, offset - elementAtCaret.getTextOffset())[ CD ]
Line_21 $$ PsiElement previousElement = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_24 $$ element = previousElement[ FD ]
Line_77 $$ element = element.getPrevSibling()-->Line_79 $$ element = element.getLastChild()[ FD ]
Line_24 $$ element = previousElement-->Line_79 $$ element = element.getLastChild()[ FD ]
Line_10 $$ if (offset < editor.getDocument().getTextLength()) -->Line_67 $$ element = element.getParent()[ CD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_98 $$ if (elementAtCaret instanceof XmlToken && ((XmlToken) elementAtCaret).getTokenType() == XmlTokenType.XML_NAME) [ CD ]
Line_24 $$ element = previousElement-->Line_61 $$ element = parent[ FD ]
Line_140 $$ final String cDataStart = "><![CDATA["-->Line_145 $$ cdataReformatRanges.add(TextRange.from(caretOffset - cDataStart.length(), inserted.length() + 1))[ FD ]
Line_51 $$ if (parent instanceof XmlText) -->Line_58 $$ if (parent instanceof XmlTag && !(element.getPrevSibling() instanceof XmlTag) && !(element.getPrevSibling() instanceof OuterLanguageElement)) [ CD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_75 $$ element = element.getParent().getParent()[ FD ]
Line_7 $$ FileViewProvider provider = editedFile.getViewProvider()-->Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)[ FD ]
Line_51 $$ if (parent instanceof XmlText) -->Line_52 $$ final String text = parent.getText()[ CD ]
Line_50 $$ PsiElement parent = element.getParent()-->Line_52 $$ final String text = parent.getText()[ FD ]
Line_61 $$ element = parent-->Line_75 $$ element = element.getParent().getParent()[ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_70 $$ if (editor.getDocument().getCharsSequence().charAt(offset - 1) == '/') [ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_29 $$ if (element.getNextSibling() instanceof PsiErrorElement) [ FD ]
Line_61 $$ element = parent-->Line_79 $$ element = element.getLastChild()[ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)[ FD ]
Line_59 $$ element = parent-->Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)[ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_3 $$ final WebEditorOptions webEditorOptions = WebEditorOptions.getInstance()[ CD ]
Line_59 $$ element = parent-->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_59 $$ element = parent-->Line_61 $$ element = parent[ FD ]
Line_65 $$ if (element == null)-->Line_66 $$ return Result.CONTINUE[ CD ]
Line_75 $$ element = element.getParent().getParent()-->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_59 $$ element = parent-->Line_67 $$ element = element.getParent()[ FD ]
Line_24 $$ element = previousElement-->Line_77 $$ element = element.getPrevSibling()[ FD ]
Line_29 $$ if (element.getNextSibling() instanceof PsiErrorElement) -->Line_30 $$ nonAcceptableDelimiter = false[ CD ]
Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) -->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ CD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_10 $$ if (offset < editor.getDocument().getTextLength()) [ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_142 $$ EditorModificationUtil.insertStringAtCaret(editor, inserted, false, cDataStart.length())[ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_78 $$ if (element instanceof XmlDocument) [ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) [ CD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_105 $$ int tagOffset = tag.getTextRange().getStartOffset()[ CD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_67 $$ element = element.getParent()[ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_59 $$ element = parent[ FD ]
Line_18 $$ IElementType tokenType = ((XmlToken) element).getTokenType()-->Line_23 $$ tokenType = ((XmlToken) previousElement).getTokenType()[ FD ]
Line_3 $$ final WebEditorOptions webEditorOptions = WebEditorOptions.getInstance()-->Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) [ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_50 $$ PsiElement parent = element.getParent()[ FD ]
Line_15 $$ if (!(element instanceof PsiWhiteSpace)) -->Line_16 $$ boolean nonAcceptableDelimiter = true[ CD ]
Line_61 $$ element = parent-->Line_81 $$ if (element == null)[ FD ]
Line_136 $$ if (descriptor instanceof XmlElementDescriptorWithCDataContent) -->Line_139 $$ if (cDataContainer.requiresCdataBracesInContext(tag)) [ CD ]
Line_8 $$ int offset = editor.getCaretModel().getOffset()-->Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)[ FD ]
Line_114 $$ if (name.equals(((XmlTag) parent).getName())) -->Line_115 $$ hasBalance = false[ CD ]
Line_90 $$ if (XmlUtil.getTokenOfType(tag, XmlTokenType.XML_TAG_END) != null)-->Line_91 $$ return Result.CONTINUE[ CD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_61 $$ element = parent[ FD ]
Line_140 $$ final String cDataStart = "><![CDATA["-->Line_144 $$ if (caretOffset >= cDataStart.length()) [ FD ]
Line_75 $$ element = element.getParent().getParent()-->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ FD ]
Line_139 $$ if (cDataContainer.requiresCdataBracesInContext(tag)) -->Line_142 $$ EditorModificationUtil.insertStringAtCaret(editor, inserted, false, cDataStart.length())[ CD ]
Line_53 $$ final int index = offset - parent.getTextOffset() - 1-->Line_54 $$ if (index >= 0 && text.charAt(index) == '/') [ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_61 $$ element = parent[ FD ]
Line_97 $$ String name = tag.getName()-->Line_99 $$ name = name.substring(0, offset - elementAtCaret.getTextOffset())[ FD ]
Line_113 $$ while (parent instanceof XmlTag) -->Line_114 $$ if (name.equals(((XmlTag) parent).getName())) [ CD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_74 $$ if (element instanceof XmlAttributeValue) [ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_33 $$ if (tokenType == XmlTokenType.XML_TAG_END || tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END && element.getTextOffset() == offset - 1) [ FD ]
Line_43 $$ if (previousElement instanceof XmlToken) -->Line_45 $$ if (tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END) [ CD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_67 $$ element = element.getParent()[ FD ]
Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)-->Line_75 $$ element = element.getParent().getParent()[ FD ]
Line_75 $$ element = element.getParent().getParent()-->Line_79 $$ element = element.getLastChild()[ FD ]
Line_139 $$ if (cDataContainer.requiresCdataBracesInContext(tag)) -->Line_141 $$ final String inserted = cDataStart + "\n]]>"[ CD ]
Line_8 $$ int offset = editor.getCaretModel().getOffset()-->Line_20 $$ if (offset > 0) [ FD ]
Line_61 $$ element = parent-->Line_74 $$ if (element instanceof XmlAttributeValue) [ FD ]
Line_25 $$ nonAcceptableDelimiter = false-->Line_30 $$ nonAcceptableDelimiter = false[ FD ]
Line_89 $$ XmlTag tag = (XmlTag) element-->Line_111 $$ PsiElement parent = tag.getParent()[ FD ]
Line_50 $$ PsiElement parent = element.getParent()-->Line_60 $$ if (parent instanceof XmlAttributeValue) [ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_77 $$ element = element.getPrevSibling()[ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_17 $$ if (element instanceof XmlToken) [ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_24 $$ element = previousElement[ FD ]
Line_61 $$ element = parent-->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_78 $$ if (element instanceof XmlDocument) [ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_83 $$ if (!(element instanceof XmlTag)) [ CD ]
Line_89 $$ XmlTag tag = (XmlTag) element-->Line_139 $$ if (cDataContainer.requiresCdataBracesInContext(tag)) [ FD ]
Line_10 $$ if (offset < editor.getDocument().getTextLength()) -->Line_50 $$ PsiElement parent = element.getParent()[ CD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_109 $$ HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(tagOffset)[ CD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_81 $$ if (element == null)[ CD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_79 $$ element = element.getLastChild()[ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_150 $$ PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument())[ FD ]
Line_50 $$ PsiElement parent = element.getParent()-->Line_61 $$ element = parent[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_106 $$ final XmlToken nameToken = XmlUtil.getTokenOfType(tag, XmlTokenType.XML_NAME)[ CD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_79 $$ element = element.getLastChild()[ FD ]
Line_115 $$ hasBalance = false-->Line_123 $$ hasBalance = true[ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_149 $$ if (cdataReformatRanges != null && !cdataReformatRanges.isEmpty()) [ CD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_67 $$ element = element.getParent()[ FD ]
Line_59 $$ element = parent-->Line_81 $$ if (element == null)[ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_81 $$ if (element == null)[ FD ]
Line_128 $$ parent = parent.getParent()-->Line_116 $$ ASTNode astNode = XmlChildRole.CLOSING_TAG_NAME_FINDER.findChild(parent.getNode())[ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_81 $$ if (element == null)[ FD ]
Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)-->Line_74 $$ if (element instanceof XmlAttributeValue) [ FD ]
Line_50 $$ PsiElement parent = element.getParent()-->Line_57 $$ element = parent.getPrevSibling()[ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_67 $$ element = element.getParent()[ FD ]
Line_89 $$ XmlTag tag = (XmlTag) element-->Line_94 $$ final XmlToken startToken = XmlUtil.getTokenOfType(tag, XmlTokenType.XML_START_TAG_START)[ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ FD ]
Line_15 $$ if (!(element instanceof PsiWhiteSpace)) -->Line_39 $$ if (nonAcceptableDelimiter)[ CD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)[ FD ]
Line_105 $$ int tagOffset = tag.getTextRange().getStartOffset()-->Line_109 $$ HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(tagOffset)[ FD ]
Line_10 $$ if (offset < editor.getDocument().getTextLength()) -->Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)[ CD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_74 $$ if (element instanceof XmlAttributeValue) [ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)[ FD ]
Line_83 $$ if (!(element instanceof XmlTag)) -->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ CD ]
Line_97 $$ String name = tag.getName()-->Line_103 $$ if (name.isEmpty())[ FD ]
Line_20 $$ if (offset > 0) -->Line_22 $$ if (previousElement instanceof XmlToken) [ CD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_58 $$ if (parent instanceof XmlTag && !(element.getPrevSibling() instanceof XmlTag) && !(element.getPrevSibling() instanceof OuterLanguageElement)) [ FD ]
Line_78 $$ if (element instanceof XmlDocument) -->Line_79 $$ element = element.getLastChild()[ CD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_58 $$ if (parent instanceof XmlTag && !(element.getPrevSibling() instanceof XmlTag) && !(element.getPrevSibling() instanceof OuterLanguageElement)) [ FD ]
Line_77 $$ element = element.getPrevSibling()-->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_110 $$ if (BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(), editedFile.getFileType(), iterator, true, true)) -->Line_130 $$ if (hasBalance)[ CD ]
Line_50 $$ PsiElement parent = element.getParent()-->Line_59 $$ element = parent[ FD ]
Line_12 $$ if (element == null && offset > 0) -->Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)[ CD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_17 $$ if (element instanceof XmlToken) [ FD ]
Line_133 $$ Collection<TextRange> cdataReformatRanges = null-->Line_152 $$ CodeStyleManager.getInstance(project).reformatText(file, cdataReformatRanges)[ FD ]
Line_121 $$ for (PsiElement el = parent.getNextSibling(); el != null; el = el.getNextSibling()) -->Line_122 $$ if (el instanceof PsiErrorElement && el.getText().startsWith("</" + name)) [ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_9 $$ PsiElement element, elementAtCaret = null[ CD ]
Line_24 $$ element = previousElement-->Line_67 $$ element = element.getParent()[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_89 $$ XmlTag tag = (XmlTag) element[ CD ]
Line_8 $$ int offset = editor.getCaretModel().getOffset()-->Line_10 $$ if (offset < editor.getDocument().getTextLength()) [ FD ]
Line_77 $$ element = element.getPrevSibling()-->Line_81 $$ if (element == null)[ FD ]
Line_92 $$ if (XmlUtil.getTokenOfType(tag, XmlTokenType.XML_EMPTY_ELEMENT_END) != null)-->Line_93 $$ return Result.CONTINUE[ CD ]
Line_116 $$ ASTNode astNode = XmlChildRole.CLOSING_TAG_NAME_FINDER.findChild(parent.getNode())-->Line_117 $$ if (astNode == null) [ FD ]
Line_59 $$ element = parent-->Line_65 $$ if (element == null)[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_5 $$ PsiDocumentManager.getInstance(project).commitAllDocuments()[ CD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_95 $$ if (startToken == null || !startToken.getText().equals("<"))[ CD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_159 $$ return Result.CONTINUE[ CD ]
Line_77 $$ element = element.getPrevSibling()-->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_58 $$ if (parent instanceof XmlTag && !(element.getPrevSibling() instanceof XmlTag) && !(element.getPrevSibling() instanceof OuterLanguageElement)) [ FD ]
Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)-->Line_79 $$ element = element.getLastChild()[ FD ]
Line_61 $$ element = parent-->Line_67 $$ element = element.getParent()[ FD ]
Line_113 $$ while (parent instanceof XmlTag) -->Line_128 $$ parent = parent.getParent()[ CD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_136 $$ if (descriptor instanceof XmlElementDescriptorWithCDataContent) [ CD ]
Line_79 $$ element = element.getLastChild()-->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_7 $$ FileViewProvider provider = editedFile.getViewProvider()[ CD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_78 $$ if (element instanceof XmlDocument) [ CD ]
Line_43 $$ if (previousElement instanceof XmlToken) -->Line_44 $$ final IElementType tokenType = ((XmlToken) previousElement).getTokenType()[ CD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_101 $$ if (tag instanceof HtmlTag && HtmlUtil.isSingleHtmlTag(name))[ CD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_50 $$ PsiElement parent = element.getParent()[ FD ]
Line_59 $$ element = parent-->Line_78 $$ if (element instanceof XmlDocument) [ FD ]
Line_50 $$ PsiElement parent = element.getParent()-->Line_53 $$ final int index = offset - parent.getTextOffset() - 1[ FD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_65 $$ if (element == null)[ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_50 $$ PsiElement parent = element.getParent()[ FD ]
Line_103 $$ if (name.isEmpty())-->Line_104 $$ return Result.CONTINUE[ CD ]
Line_15 $$ if (!(element instanceof PsiWhiteSpace)) -->Line_43 $$ if (previousElement instanceof XmlToken) [ CD ]
Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)-->Line_81 $$ if (element == null)[ FD ]
Line_59 $$ element = parent-->Line_74 $$ if (element instanceof XmlAttributeValue) [ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_65 $$ if (element == null)[ FD ]
Line_94 $$ final XmlToken startToken = XmlUtil.getTokenOfType(tag, XmlTokenType.XML_START_TAG_START)-->Line_95 $$ if (startToken == null || !startToken.getText().equals("<"))[ FD ]
Line_54 $$ if (index >= 0 && text.charAt(index) == '/') -->Line_55 $$ return Result.CONTINUE[ CD ]
Line_15 $$ if (!(element instanceof PsiWhiteSpace)) -->Line_42 $$ PsiElement previousElement = provider.findElementAt(offset - 1, XMLLanguage.class)[ CD ]
Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)-->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ FD ]
Line_24 $$ element = previousElement-->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_17 $$ if (element instanceof XmlToken) -->Line_18 $$ IElementType tokenType = ((XmlToken) element).getTokenType()[ CD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_110 $$ if (BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(), editedFile.getFileType(), iterator, true, true)) [ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_33 $$ if (tokenType == XmlTokenType.XML_TAG_END || tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END && element.getTextOffset() == offset - 1) [ FD ]
Line_51 $$ if (parent instanceof XmlText) -->Line_53 $$ final int index = offset - parent.getTextOffset() - 1[ CD ]
Line_51 $$ if (parent instanceof XmlText) -->Line_57 $$ element = parent.getPrevSibling()[ CD ]
Line_67 $$ element = element.getParent()-->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ FD ]
Line_99 $$ name = name.substring(0, offset - elementAtCaret.getTextOffset())-->Line_101 $$ if (tag instanceof HtmlTag && HtmlUtil.isSingleHtmlTag(name))[ FD ]
Line_58 $$ if (parent instanceof XmlTag && !(element.getPrevSibling() instanceof XmlTag) && !(element.getPrevSibling() instanceof OuterLanguageElement)) -->Line_59 $$ element = parent[ CD ]
Line_7 $$ FileViewProvider provider = editedFile.getViewProvider()-->Line_21 $$ PsiElement previousElement = provider.findElementAt(offset - 1, XMLLanguage.class)[ FD ]
Line_89 $$ XmlTag tag = (XmlTag) element-->Line_134 $$ final XmlElementDescriptor descriptor = tag.getDescriptor()[ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_24 $$ element = previousElement[ FD ]
Line_20 $$ if (offset > 0) -->Line_21 $$ PsiElement previousElement = provider.findElementAt(offset - 1, XMLLanguage.class)[ CD ]
Line_59 $$ element = parent-->Line_77 $$ element = element.getPrevSibling()[ FD ]
Line_74 $$ if (element instanceof XmlAttributeValue) -->Line_75 $$ element = element.getParent().getParent()[ CD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_75 $$ element = element.getParent().getParent()[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_103 $$ if (name.isEmpty())[ CD ]
Line_24 $$ element = previousElement-->Line_81 $$ if (element == null)[ FD ]
Line_50 $$ PsiElement parent = element.getParent()-->Line_121 $$ for (PsiElement el = parent.getNextSibling(); el != null; el = el.getNextSibling()) [ FD ]
Line_24 $$ element = previousElement-->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_29 $$ if (element.getNextSibling() instanceof PsiErrorElement) [ FD ]
Line_81 $$ if (element == null)-->Line_82 $$ return Result.CONTINUE[ CD ]
Line_133 $$ Collection<TextRange> cdataReformatRanges = null-->Line_157 $$ return cdataReformatRanges != null && !cdataReformatRanges.isEmpty() ? Result.STOP : Result.CONTINUE[ FD ]
Line_136 $$ if (descriptor instanceof XmlElementDescriptorWithCDataContent) -->Line_137 $$ final XmlElementDescriptorWithCDataContent cDataContainer = (XmlElementDescriptorWithCDataContent) descriptor[ CD ]
Line_50 $$ PsiElement parent = element.getParent()-->Line_116 $$ ASTNode astNode = XmlChildRole.CLOSING_TAG_NAME_FINDER.findChild(parent.getNode())[ FD ]
Line_141 $$ final String inserted = cDataStart + "\n]]>"-->Line_145 $$ cdataReformatRanges.add(TextRange.from(caretOffset - cDataStart.length(), inserted.length() + 1))[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_74 $$ if (element instanceof XmlAttributeValue) [ CD ]
Line_24 $$ element = previousElement-->Line_74 $$ if (element instanceof XmlAttributeValue) [ FD ]
Line_67 $$ element = element.getParent()-->Line_78 $$ if (element instanceof XmlDocument) [ FD ]
Line_110 $$ if (BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(), editedFile.getFileType(), iterator, true, true)) -->Line_112 $$ boolean hasBalance = true[ CD ]
Line_50 $$ PsiElement parent = element.getParent()-->Line_128 $$ parent = parent.getParent()[ FD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_89 $$ XmlTag tag = (XmlTag) element-->Line_105 $$ int tagOffset = tag.getTextRange().getStartOffset()[ FD ]
Line_89 $$ XmlTag tag = (XmlTag) element-->Line_90 $$ if (XmlUtil.getTokenOfType(tag, XmlTokenType.XML_TAG_END) != null)[ FD ]
Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)-->Line_78 $$ if (element instanceof XmlDocument) [ FD ]
Line_114 $$ if (name.equals(((XmlTag) parent).getName())) -->Line_121 $$ for (PsiElement el = parent.getNextSibling(); el != null; el = el.getNextSibling()) [ CD ]
Line_138 $$ cdataReformatRanges = ContainerUtil.newSmartList()-->Line_157 $$ return cdataReformatRanges != null && !cdataReformatRanges.isEmpty() ? Result.STOP : Result.CONTINUE[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_94 $$ final XmlToken startToken = XmlUtil.getTokenOfType(tag, XmlTokenType.XML_START_TAG_START)[ CD ]
Line_130 $$ if (hasBalance)-->Line_131 $$ return Result.CONTINUE[ CD ]
Line_115 $$ hasBalance = false-->Line_118 $$ hasBalance = true[ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_5 $$ PsiDocumentManager.getInstance(project).commitAllDocuments()[ FD ]
Line_99 $$ name = name.substring(0, offset - elementAtCaret.getTextOffset())-->Line_114 $$ if (name.equals(((XmlTag) parent).getName())) [ FD ]
Line_22 $$ if (previousElement instanceof XmlToken) -->Line_24 $$ element = previousElement[ CD ]
Line_24 $$ element = previousElement-->Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)[ FD ]
Line_70 $$ if (editor.getDocument().getCharsSequence().charAt(offset - 1) == '/') -->Line_71 $$ return Result.CONTINUE[ CD ]
Line_61 $$ element = parent-->Line_77 $$ element = element.getPrevSibling()[ FD ]
Line_24 $$ element = previousElement-->Line_59 $$ element = parent[ FD ]
Line_60 $$ if (parent instanceof XmlAttributeValue) -->Line_61 $$ element = parent[ CD ]
Line_79 $$ element = element.getLastChild()-->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_97 $$ String name = tag.getName()[ CD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_78 $$ if (element instanceof XmlDocument) [ FD ]
Line_19 $$ if (tokenType == XmlTokenType.XML_START_TAG_START || tokenType == XmlTokenType.XML_END_TAG_START) -->Line_28 $$ if (tokenType == XmlTokenType.XML_NAME || tokenType == XmlTokenType.XML_TAG_NAME) [ CD ]
Line_33 $$ if (tokenType == XmlTokenType.XML_TAG_END || tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END && element.getTextOffset() == offset - 1) -->Line_34 $$ EditorModificationUtil.moveCaretRelatively(editor, 1)[ CD ]
Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)-->Line_65 $$ if (element == null)[ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_29 $$ if (element.getNextSibling() instanceof PsiErrorElement) [ FD ]
Line_133 $$ Collection<TextRange> cdataReformatRanges = null-->Line_149 $$ if (cdataReformatRanges != null && !cdataReformatRanges.isEmpty()) [ FD ]
Line_7 $$ FileViewProvider provider = editedFile.getViewProvider()-->Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)[ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_57 $$ element = parent.getPrevSibling()[ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ FD ]
Line_137 $$ final XmlElementDescriptorWithCDataContent cDataContainer = (XmlElementDescriptorWithCDataContent) descriptor-->Line_139 $$ if (cDataContainer.requiresCdataBracesInContext(tag)) [ FD ]
Line_24 $$ element = previousElement-->Line_50 $$ PsiElement parent = element.getParent()[ FD ]
Line_51 $$ if (parent instanceof XmlText) -->Line_54 $$ if (index >= 0 && text.charAt(index) == '/') [ CD ]
Line_69 $$ if (offset > 0 && offset <= editor.getDocument().getTextLength()) -->Line_70 $$ if (editor.getDocument().getCharsSequence().charAt(offset - 1) == '/') [ CD ]
Line_106 $$ final XmlToken nameToken = XmlUtil.getTokenOfType(tag, XmlTokenType.XML_NAME)-->Line_107 $$ if (nameToken != null && nameToken.getTextRange().getStartOffset() > offset)[ FD ]
Line_58 $$ if (parent instanceof XmlTag && !(element.getPrevSibling() instanceof XmlTag) && !(element.getPrevSibling() instanceof OuterLanguageElement)) -->Line_60 $$ if (parent instanceof XmlAttributeValue) [ CD ]
Line_19 $$ if (tokenType == XmlTokenType.XML_START_TAG_START || tokenType == XmlTokenType.XML_END_TAG_START) -->Line_20 $$ if (offset > 0) [ CD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_112 $$ boolean hasBalance = true-->Line_115 $$ hasBalance = false[ FD ]
Line_21 $$ PsiElement previousElement = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_22 $$ if (previousElement instanceof XmlToken) [ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_6 $$ PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument())[ FD ]
Line_99 $$ name = name.substring(0, offset - elementAtCaret.getTextOffset())-->Line_103 $$ if (name.isEmpty())[ FD ]
Line_67 $$ element = element.getParent()-->Line_77 $$ element = element.getPrevSibling()[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_90 $$ if (XmlUtil.getTokenOfType(tag, XmlTokenType.XML_TAG_END) != null)[ CD ]
Line_28 $$ if (tokenType == XmlTokenType.XML_NAME || tokenType == XmlTokenType.XML_TAG_NAME) -->Line_29 $$ if (element.getNextSibling() instanceof PsiErrorElement) [ CD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_24 $$ element = previousElement[ FD ]
Line_67 $$ element = element.getParent()-->Line_79 $$ element = element.getLastChild()[ FD ]
Line_133 $$ Collection<TextRange> cdataReformatRanges = null-->Line_145 $$ cdataReformatRanges.add(TextRange.from(caretOffset - cDataStart.length(), inserted.length() + 1))[ FD ]
Line_21 $$ PsiElement previousElement = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_43 $$ if (previousElement instanceof XmlToken) [ FD ]
Line_24 $$ element = previousElement-->Line_33 $$ if (tokenType == XmlTokenType.XML_TAG_END || tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END && element.getTextOffset() == offset - 1) [ FD ]
Line_89 $$ XmlTag tag = (XmlTag) element-->Line_97 $$ String name = tag.getName()[ FD ]
Line_136 $$ if (descriptor instanceof XmlElementDescriptorWithCDataContent) -->Line_138 $$ cdataReformatRanges = ContainerUtil.newSmartList()[ CD ]
Line_59 $$ element = parent-->Line_84 $$ if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) [ FD ]
Line_10 $$ if (offset < editor.getDocument().getTextLength()) -->Line_65 $$ if (element == null)[ CD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_99 $$ name = name.substring(0, offset - elementAtCaret.getTextOffset())[ FD ]
Line_7 $$ FileViewProvider provider = editedFile.getViewProvider()-->Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_69 $$ if (offset > 0 && offset <= editor.getDocument().getTextLength()) [ CD ]
Line_89 $$ XmlTag tag = (XmlTag) element-->Line_92 $$ if (XmlUtil.getTokenOfType(tag, XmlTokenType.XML_EMPTY_ELEMENT_END) != null)[ FD ]
Line_18 $$ IElementType tokenType = ((XmlToken) element).getTokenType()-->Line_45 $$ if (tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END) [ FD ]
Line_17 $$ if (element instanceof XmlToken) -->Line_33 $$ if (tokenType == XmlTokenType.XML_TAG_END || tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END && element.getTextOffset() == offset - 1) [ CD ]
Line_59 $$ element = parent-->Line_75 $$ element = element.getParent().getParent()[ FD ]
Line_22 $$ if (previousElement instanceof XmlToken) -->Line_25 $$ nonAcceptableDelimiter = false[ CD ]
Line_24 $$ element = previousElement-->Line_58 $$ if (parent instanceof XmlTag && !(element.getPrevSibling() instanceof XmlTag) && !(element.getPrevSibling() instanceof OuterLanguageElement)) [ FD ]
Line_97 $$ String name = tag.getName()-->Line_114 $$ if (name.equals(((XmlTag) parent).getName())) [ FD ]
Line_52 $$ final String text = parent.getText()-->Line_54 $$ if (index >= 0 && text.charAt(index) == '/') [ FD ]
Line_61 $$ element = parent-->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_59 $$ element = parent[ FD ]
Line_10 $$ if (offset < editor.getDocument().getTextLength()) -->Line_15 $$ if (!(element instanceof PsiWhiteSpace)) [ CD ]
Line_110 $$ if (BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(), editedFile.getFileType(), iterator, true, true)) -->Line_111 $$ PsiElement parent = tag.getParent()[ CD ]
Line_112 $$ boolean hasBalance = true-->Line_118 $$ hasBalance = true[ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_34 $$ EditorModificationUtil.moveCaretRelatively(editor, 1)[ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_135 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + name + ">", false, 0)[ FD ]
Line_79 $$ element = element.getLastChild()-->Line_81 $$ if (element == null)[ FD ]
Line_61 $$ element = parent-->Line_65 $$ if (element == null)[ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_61 $$ element = parent[ FD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)[ FD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_78 $$ if (element instanceof XmlDocument) [ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_58 $$ if (parent instanceof XmlTag && !(element.getPrevSibling() instanceof XmlTag) && !(element.getPrevSibling() instanceof OuterLanguageElement)) [ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_75 $$ element = element.getParent().getParent()[ FD ]
Line_10 $$ if (offset < editor.getDocument().getTextLength()) -->Line_51 $$ if (parent instanceof XmlText) [ CD ]
Line_16 $$ boolean nonAcceptableDelimiter = true-->Line_30 $$ nonAcceptableDelimiter = false[ FD ]
Line_24 $$ element = previousElement-->Line_75 $$ element = element.getParent().getParent()[ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_57 $$ element = parent.getPrevSibling()[ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_77 $$ element = element.getPrevSibling()[ FD ]
Line_75 $$ element = element.getParent().getParent()-->Line_78 $$ if (element instanceof XmlDocument) [ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)[ FD ]
Line_134 $$ final XmlElementDescriptor descriptor = tag.getDescriptor()-->Line_136 $$ if (descriptor instanceof XmlElementDescriptorWithCDataContent) [ FD ]
Line_122 $$ if (el instanceof PsiErrorElement && el.getText().startsWith("</" + name)) -->Line_123 $$ hasBalance = true[ CD ]
Line_22 $$ if (previousElement instanceof XmlToken) -->Line_23 $$ tokenType = ((XmlToken) previousElement).getTokenType()[ CD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_75 $$ element = element.getParent().getParent()-->Line_77 $$ element = element.getPrevSibling()[ FD ]
Line_67 $$ element = element.getParent()-->Line_75 $$ element = element.getParent().getParent()[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_135 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + name + ">", false, 0)[ CD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_77 $$ element = element.getPrevSibling()[ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_143 $$ int caretOffset = editor.getCaretModel().getOffset()[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_6 $$ PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument())[ CD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_79 $$ element = element.getLastChild()[ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_69 $$ if (offset > 0 && offset <= editor.getDocument().getTextLength()) [ FD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_59 $$ element = parent[ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_65 $$ if (element == null)[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_77 $$ while (element instanceof PsiWhiteSpace || element instanceof OuterLanguageElement) element = element.getPrevSibling()[ CD ]
Line_133 $$ Collection<TextRange> cdataReformatRanges = null-->Line_138 $$ cdataReformatRanges = ContainerUtil.newSmartList()[ FD ]
Line_112 $$ boolean hasBalance = true-->Line_123 $$ hasBalance = true[ FD ]
Line_114 $$ if (name.equals(((XmlTag) parent).getName())) -->Line_116 $$ ASTNode astNode = XmlChildRole.CLOSING_TAG_NAME_FINDER.findChild(parent.getNode())[ CD ]
Line_143 $$ int caretOffset = editor.getCaretModel().getOffset()-->Line_144 $$ if (caretOffset >= cDataStart.length()) [ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_59 $$ element = parent[ FD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_77 $$ element = element.getPrevSibling()[ FD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_65 $$ if (element == null)[ FD ]
Line_138 $$ cdataReformatRanges = ContainerUtil.newSmartList()-->Line_149 $$ if (cdataReformatRanges != null && !cdataReformatRanges.isEmpty()) [ FD ]
Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)-->Line_67 $$ element = element.getParent()[ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_61 $$ element = parent[ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_74 $$ if (element instanceof XmlAttributeValue) [ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_133 $$ Collection<TextRange> cdataReformatRanges = null[ CD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_152 $$ CodeStyleManager.getInstance(project).reformatText(file, cdataReformatRanges)[ FD ]
Line_67 $$ element = element.getParent()-->Line_74 $$ if (element instanceof XmlAttributeValue) [ FD ]
Line_144 $$ if (caretOffset >= cDataStart.length()) -->Line_145 $$ cdataReformatRanges.add(TextRange.from(caretOffset - cDataStart.length(), inserted.length() + 1))[ CD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)[ FD ]
Line_83 $$ if (!(element instanceof XmlTag)) -->Line_87 $$ return Result.CONTINUE[ CD ]
Line_109 $$ HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(tagOffset)-->Line_110 $$ if (BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(), editedFile.getFileType(), iterator, true, true)) [ FD ]
Line_61 $$ element = parent-->Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)[ FD ]
Line_57 $$ element = parent.getPrevSibling()-->Line_81 $$ if (element == null)[ FD ]
Line_67 $$ element = element.getParent()-->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_8 $$ int offset = editor.getCaretModel().getOffset()[ CD ]
Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)-->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_92 $$ if (XmlUtil.getTokenOfType(tag, XmlTokenType.XML_EMPTY_ELEMENT_END) != null)[ CD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_99 $$ name = name.substring(0, offset - elementAtCaret.getTextOffset())[ FD ]
Line_24 $$ element = previousElement-->Line_29 $$ if (element.getNextSibling() instanceof PsiErrorElement) [ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_57 $$ element = parent.getPrevSibling()[ FD ]
Line_138 $$ cdataReformatRanges = ContainerUtil.newSmartList()-->Line_145 $$ cdataReformatRanges.add(TextRange.from(caretOffset - cDataStart.length(), inserted.length() + 1))[ FD ]
Line_117 $$ if (astNode == null) -->Line_118 $$ hasBalance = true[ CD ]
Line_17 $$ if (element instanceof XmlToken) -->Line_19 $$ if (tokenType == XmlTokenType.XML_START_TAG_START || tokenType == XmlTokenType.XML_END_TAG_START) [ CD ]
Line_16 $$ boolean nonAcceptableDelimiter = true-->Line_25 $$ nonAcceptableDelimiter = false[ FD ]
Line_50 $$ PsiElement parent = element.getParent()-->Line_51 $$ if (parent instanceof XmlText) [ FD ]
Line_64 $$ element = provider.findElementAt(editor.getDocument().getTextLength() - 1, XMLLanguage.class)-->Line_77 $$ element = element.getPrevSibling()[ FD ]
Line_24 $$ element = previousElement-->Line_65 $$ if (element == null)[ FD ]
Line_139 $$ if (cDataContainer.requiresCdataBracesInContext(tag)) -->Line_144 $$ if (caretOffset >= cDataStart.length()) [ CD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)[ FD ]
Line_45 $$ if (tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END) -->Line_46 $$ return Result.STOP[ CD ]
Line_67 $$ element = element.getParent()-->Line_81 $$ if (element == null)[ FD ]
Line_24 $$ element = previousElement-->Line_57 $$ element = parent.getPrevSibling()[ FD ]
Line_23 $$ tokenType = ((XmlToken) previousElement).getTokenType()-->Line_45 $$ if (tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END) [ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_74 $$ if (element instanceof XmlAttributeValue) [ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_107 $$ if (nameToken != null && nameToken.getTextRange().getStartOffset() > offset)[ CD ]
Line_140 $$ final String cDataStart = "><![CDATA["-->Line_142 $$ EditorModificationUtil.insertStringAtCaret(editor, inserted, false, cDataStart.length())[ FD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_17 $$ if (element instanceof XmlToken) [ FD ]
Line_39 $$ if (nonAcceptableDelimiter)-->Line_40 $$ return Result.CONTINUE[ CD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) [ FD ]
Line_89 $$ XmlTag tag = (XmlTag) element-->Line_106 $$ final XmlToken nameToken = XmlUtil.getTokenOfType(tag, XmlTokenType.XML_NAME)[ FD ]
Line_121 $$ for (PsiElement el = parent.getNextSibling(); el != null; el = el.getNextSibling()) -->Line_122 $$ if (el instanceof PsiErrorElement && el.getText().startsWith("</" + name)) [ CD ]
Line_139 $$ if (cDataContainer.requiresCdataBracesInContext(tag)) -->Line_143 $$ int caretOffset = editor.getCaretModel().getOffset()[ CD ]
Line_7 $$ FileViewProvider provider = editedFile.getViewProvider()-->Line_42 $$ PsiElement previousElement = provider.findElementAt(offset - 1, XMLLanguage.class)[ FD ]
Line_24 $$ element = previousElement-->Line_78 $$ if (element instanceof XmlDocument) [ FD ]
Line_118 $$ hasBalance = true-->Line_123 $$ hasBalance = true[ FD ]
Line_139 $$ if (cDataContainer.requiresCdataBracesInContext(tag)) -->Line_140 $$ final String cDataStart = "><![CDATA["[ CD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_157 $$ return cdataReformatRanges != null && !cdataReformatRanges.isEmpty() ? Result.STOP : Result.CONTINUE[ CD ]
Line_77 $$ element = element.getPrevSibling()-->Line_78 $$ if (element instanceof XmlDocument) [ FD ]
Line_10 $$ if (offset < editor.getDocument().getTextLength()) -->Line_12 $$ if (element == null && offset > 0) [ CD ]
Line_97 $$ String name = tag.getName()-->Line_101 $$ if (tag instanceof HtmlTag && HtmlUtil.isSingleHtmlTag(name))[ FD ]
Line_13 $$ elementAtCaret = element = provider.findElementAt(offset - 1, XMLLanguage.class)-->Line_99 $$ name = name.substring(0, offset - elementAtCaret.getTextOffset())[ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_35 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_10 $$ if (offset < editor.getDocument().getTextLength()) -->Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)[ CD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_33 $$ if (tokenType == XmlTokenType.XML_TAG_END || tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END && element.getTextOffset() == offset - 1) [ FD ]
Line_61 $$ element = parent-->Line_78 $$ if (element instanceof XmlDocument) [ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_110 $$ if (BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(), editedFile.getFileType(), iterator, true, true)) [ CD ]
Line_107 $$ if (nameToken != null && nameToken.getTextRange().getStartOffset() > offset)-->Line_108 $$ return Result.CONTINUE[ CD ]
Line_15 $$ if (!(element instanceof PsiWhiteSpace)) -->Line_17 $$ if (element instanceof XmlToken) [ CD ]
Line_33 $$ if (tokenType == XmlTokenType.XML_TAG_END || tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END && element.getTextOffset() == offset - 1) -->Line_35 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_9 $$ PsiElement element, elementAtCaret = null-->Line_81 $$ if (element == null)[ FD ]
Line_33 $$ if (tokenType == XmlTokenType.XML_TAG_END || tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END && element.getTextOffset() == offset - 1) -->Line_36 $$ return Result.STOP[ CD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_8 $$ int offset = editor.getCaretModel().getOffset()[ FD ]
Line_114 $$ if (name.equals(((XmlTag) parent).getName())) -->Line_117 $$ if (astNode == null) [ CD ]
Line_95 $$ if (startToken == null || !startToken.getText().equals("<"))-->Line_96 $$ return Result.CONTINUE[ CD ]
Line_11 $$ elementAtCaret = element = provider.findElementAt(offset, XMLLanguage.class)-->Line_79 $$ element = element.getLastChild()[ FD ]
Line_101 $$ if (tag instanceof HtmlTag && HtmlUtil.isSingleHtmlTag(name))-->Line_102 $$ return Result.CONTINUE[ CD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_7 $$ FileViewProvider provider = editedFile.getViewProvider()[ FD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_134 $$ final XmlElementDescriptor descriptor = tag.getDescriptor()[ CD ]
Line_4 $$ if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && fileContainsXmlLanguage(editedFile)) -->Line_10 $$ if (offset < editor.getDocument().getTextLength()) [ CD ]
Line_141 $$ final String inserted = cDataStart + "\n]]>"-->Line_142 $$ EditorModificationUtil.insertStringAtCaret(editor, inserted, false, cDataStart.length())[ FD ]
Line_2 $$ public Result beforeCharTyped(final char c, final Project project, Editor editor, PsiFile editedFile, final FileType fileType) -->Line_85 $$ EditorModificationUtil.insertStringAtCaret(editor, "</" + element.getText() + ">", false, 0)[ FD ]
Line_149 $$ if (cdataReformatRanges != null && !cdataReformatRanges.isEmpty()) -->Line_150 $$ PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument())[ CD ]
Line_138 $$ cdataReformatRanges = ContainerUtil.newSmartList()-->Line_152 $$ CodeStyleManager.getInstance(project).reformatText(file, cdataReformatRanges)[ FD ]
Line_6 $$ PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument())-->Line_152 $$ CodeStyleManager.getInstance(project).reformatText(file, cdataReformatRanges)[ FD ]
Line_59 $$ element = parent-->Line_79 $$ element = element.getLastChild()[ FD ]
