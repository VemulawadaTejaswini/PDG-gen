Line_14 $$ PsiMember member = (PsiMember) element-->Line_21 $$ if (member instanceof PsiMethod) [ FD ]
Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)-->Line_28 $$ toInsert = targetElement.getName()[ FD ]
Line_34 $$ targetElement = targetElement.getContainingClass()-->Line_59 $$ if (!referenceExpression.isValid() || !isReferencedTo(referenceExpression, targetElement)) [ FD ]
Line_5 $$ final PsiFile file = documentManager.getPsiFile(document)-->Line_7 $$ PsiElement elementAtCaret = file.findElementAt(offset)[ FD ]
Line_24 $$ if (elementAtCaret == null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiLiteralExpression.class, PsiComment.class) != null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiJavaFile.class) == null) -->Line_51 $$ final PsiReferenceExpression referenceExpression = expression instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression) expression).getMethodExpression() : expression instanceof PsiReferenceExpression ? (PsiReferenceExpression) expression : null[ CD ]
Line_52 $$ if (referenceExpression == null || !referenceExpression.isValid()) -->Line_54 $$ if (!isReferencedTo(referenceExpression, targetElement)) [ CD ]
Line_12 $$ toInsert = fqn-->Line_64 $$ if (toInsert == null)[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_88 $$ editor.getCaretModel().moveToOffset(caretOffset)[ CD ]
Line_38 $$ suffix = "()"-->Line_40 $$ suffix = " "[ FD ]
Line_13 $$ if (elementAtCaret != null && (element instanceof PsiMethod || element instanceof PsiField) && PsiUtil.isInsideJavadocComment(elementAtCaret)) -->Line_16 $$ String className = aClass == null ? "" : aClass.getQualifiedName()[ CD ]
Line_5 $$ final PsiFile file = documentManager.getPsiFile(document)-->Line_37 $$ if (isAfterNew(file, elementAtCaret)) [ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_12 $$ toInsert = fqn[ FD ]
Line_19 $$ toInsert += "#"-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_20 $$ toInsert += member.getName()-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_31 $$ suffix = "()"-->Line_38 $$ suffix = "()"[ FD ]
Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)-->Line_65 $$ toInsert = ""[ FD ]
Line_36 $$ if (targetElement instanceof PsiClass) -->Line_37 $$ if (isAfterNew(file, elementAtCaret)) [ CD ]
Line_20 $$ toInsert += member.getName()-->Line_53 $$ toInsert = fqn[ FD ]
Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()-->Line_69 $$ RangeMarker rangeMarker = document.createRangeMarker(endOffset, endOffset)[ FD ]
Line_27 $$ PsiMember targetElement = (PsiMember) element-->Line_29 $$ if (targetElement instanceof PsiMethod) [ FD ]
Line_6 $$ final int offset = editor.getCaretModel().getOffset()-->Line_70 $$ elementAtCaret = file.findElementAt(offset)[ FD ]
Line_34 $$ targetElement = targetElement.getContainingClass()-->Line_36 $$ if (targetElement instanceof PsiClass) [ FD ]
Line_24 $$ if (elementAtCaret == null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiLiteralExpression.class, PsiComment.class) != null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiJavaFile.class) == null) -->Line_44 $$ final PsiExpression expression[ CD ]
Line_13 $$ if (elementAtCaret != null && (element instanceof PsiMethod || element instanceof PsiField) && PsiUtil.isInsideJavadocComment(elementAtCaret)) -->Line_14 $$ PsiMember member = (PsiMember) element[ CD ]
Line_19 $$ toInsert += "#"-->Line_28 $$ toInsert = targetElement.getName()[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_64 $$ if (toInsert == null)[ CD ]
Line_38 $$ suffix = "()"-->Line_85 $$ if (element instanceof PsiMethod && ((PsiMethod) element).getParameterList().getParametersCount() != 0 && StringUtil.endsWithChar(suffix, ')')) [ FD ]
Line_24 $$ if (elementAtCaret == null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiLiteralExpression.class, PsiComment.class) != null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiJavaFile.class) == null) -->Line_52 $$ if (referenceExpression == null || !referenceExpression.isValid()) [ CD ]
Line_10 $$ String suffix = ""-->Line_85 $$ if (element instanceof PsiMethod && ((PsiMethod) element).getParameterList().getParametersCount() != 0 && StringUtil.endsWithChar(suffix, ')')) [ FD ]
Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)-->Line_53 $$ toInsert = fqn[ FD ]
Line_25 $$ toInsert = fqn-->Line_60 $$ toInsert = fqn[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_5 $$ final PsiFile file = documentManager.getPsiFile(document)[ CD ]
Line_7 $$ PsiElement elementAtCaret = file.findElementAt(offset)-->Line_46 $$ expression = factory.createExpressionFromText(toInsert + suffix, elementAtCaret)[ FD ]
Line_17 $$ toInsert = className == null ? "" : className-->Line_20 $$ toInsert += member.getName()[ FD ]
Line_85 $$ if (element instanceof PsiMethod && ((PsiMethod) element).getParameterList().getParametersCount() != 0 && StringUtil.endsWithChar(suffix, ')')) -->Line_86 $$ caretOffset--[ CD ]
Line_17 $$ toInsert = className == null ? "" : className-->Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_25 $$ toInsert = fqn[ FD ]
Line_25 $$ toInsert = fqn-->Line_28 $$ toInsert = targetElement.getName()[ FD ]
Line_20 $$ toInsert += member.getName()-->Line_64 $$ if (toInsert == null)[ FD ]
Line_27 $$ PsiMember targetElement = (PsiMember) element-->Line_28 $$ toInsert = targetElement.getName()[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_78 $$ CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(file)[ CD ]
Line_24 $$ if (elementAtCaret == null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiLiteralExpression.class, PsiComment.class) != null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiJavaFile.class) == null) -->Line_29 $$ if (targetElement instanceof PsiMethod) [ CD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_30 $$ if (!fqn.contains("(")) [ FD ]
Line_6 $$ final int offset = editor.getCaretModel().getOffset()-->Line_80 $$ CodeStyleManager.getInstance(project).adjustLineIndent(file, offset)[ FD ]
Line_10 $$ String suffix = ""-->Line_40 $$ suffix = " "[ FD ]
Line_19 $$ toInsert += "#"-->Line_65 $$ toInsert = ""[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_7 $$ PsiElement elementAtCaret = file.findElementAt(offset)[ CD ]
Line_17 $$ toInsert = className == null ? "" : className-->Line_64 $$ if (toInsert == null)[ FD ]
Line_8 $$ fqn = fqn.replace('#', '.')-->Line_12 $$ toInsert = fqn[ FD ]
Line_13 $$ if (elementAtCaret != null && (element instanceof PsiMethod || element instanceof PsiField) && PsiUtil.isInsideJavadocComment(elementAtCaret)) -->Line_24 $$ if (elementAtCaret == null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiLiteralExpression.class, PsiComment.class) != null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiJavaFile.class) == null) [ CD ]
Line_17 $$ toInsert = className == null ? "" : className-->Line_39 $$ if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length() - 1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) [ FD ]
Line_52 $$ if (referenceExpression == null || !referenceExpression.isValid()) -->Line_53 $$ toInsert = fqn[ CD ]
Line_6 $$ final int offset = editor.getCaretModel().getOffset()-->Line_7 $$ PsiElement elementAtCaret = file.findElementAt(offset)[ FD ]
Line_70 $$ elementAtCaret = file.findElementAt(offset)-->Line_73 $$ shortenReference(elementAtCaret, element)[ FD ]
Line_24 $$ if (elementAtCaret == null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiLiteralExpression.class, PsiComment.class) != null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiJavaFile.class) == null) -->Line_28 $$ toInsert = targetElement.getName()[ CD ]
Line_37 $$ if (isAfterNew(file, elementAtCaret)) -->Line_39 $$ if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length() - 1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) [ CD ]
Line_27 $$ PsiMember targetElement = (PsiMember) element-->Line_59 $$ if (!referenceExpression.isValid() || !isReferencedTo(referenceExpression, targetElement)) [ FD ]
Line_4 $$ Document document = editor.getDocument()-->Line_66 $$ document.insertString(offset, toInsert + suffix)[ FD ]
Line_31 $$ suffix = "()"-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_4 $$ Document document = editor.getDocument()-->Line_5 $$ final PsiFile file = documentManager.getPsiFile(document)[ FD ]
Line_44 $$ final PsiExpression expression-->Line_46 $$ expression = factory.createExpressionFromText(toInsert + suffix, elementAtCaret)[ FD ]
Line_37 $$ if (isAfterNew(file, elementAtCaret)) -->Line_38 $$ suffix = "()"[ CD ]
Line_53 $$ toInsert = fqn-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_73 $$ shortenReference(elementAtCaret, element)[ FD ]
Line_7 $$ PsiElement elementAtCaret = file.findElementAt(offset)-->Line_13 $$ if (elementAtCaret != null && (element instanceof PsiMethod || element instanceof PsiField) && PsiUtil.isInsideJavadocComment(elementAtCaret)) [ FD ]
Line_18 $$ if (toInsert.length() != 0)-->Line_19 $$ toInsert += "#"[ CD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_11 $$ if (!(element instanceof PsiMember)) [ CD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_6 $$ final int offset = editor.getCaretModel().getOffset()[ CD ]
Line_28 $$ toInsert = targetElement.getName()-->Line_60 $$ toInsert = fqn[ FD ]
Line_27 $$ PsiMember targetElement = (PsiMember) element-->Line_34 $$ targetElement = targetElement.getContainingClass()[ FD ]
Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)-->Line_64 $$ if (toInsert == null)[ FD ]
Line_70 $$ elementAtCaret = file.findElementAt(offset)-->Line_71 $$ if (elementAtCaret != null && elementAtCaret.isValid()) [ FD ]
Line_30 $$ if (!fqn.contains("(")) -->Line_31 $$ suffix = "()"[ CD ]
Line_51 $$ final PsiReferenceExpression referenceExpression = expression instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression) expression).getMethodExpression() : expression instanceof PsiReferenceExpression ? (PsiReferenceExpression) expression : null-->Line_52 $$ if (referenceExpression == null || !referenceExpression.isValid()) [ FD ]
Line_24 $$ if (elementAtCaret == null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiLiteralExpression.class, PsiComment.class) != null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiJavaFile.class) == null) -->Line_25 $$ toInsert = fqn[ CD ]
Line_20 $$ toInsert += member.getName()-->Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)[ FD ]
Line_29 $$ if (targetElement instanceof PsiMethod) -->Line_30 $$ if (!fqn.contains("(")) [ CD ]
Line_53 $$ toInsert = fqn-->Line_64 $$ if (toInsert == null)[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_53 $$ toInsert = fqn[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_67 $$ documentManager.commitAllDocuments()[ CD ]
Line_7 $$ PsiElement elementAtCaret = file.findElementAt(offset)-->Line_71 $$ if (elementAtCaret != null && elementAtCaret.isValid()) [ FD ]
Line_5 $$ final PsiFile file = documentManager.getPsiFile(document)-->Line_80 $$ CodeStyleManager.getInstance(project).adjustLineIndent(file, offset)[ FD ]
Line_14 $$ PsiMember member = (PsiMember) element-->Line_20 $$ toInsert += member.getName()[ FD ]
Line_51 $$ final PsiReferenceExpression referenceExpression = expression instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression) expression).getMethodExpression() : expression instanceof PsiReferenceExpression ? (PsiReferenceExpression) expression : null-->Line_59 $$ if (!referenceExpression.isValid() || !isReferencedTo(referenceExpression, targetElement)) [ FD ]
Line_17 $$ toInsert = className == null ? "" : className-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_13 $$ if (elementAtCaret != null && (element instanceof PsiMethod || element instanceof PsiField) && PsiUtil.isInsideJavadocComment(elementAtCaret)) -->Line_20 $$ toInsert += member.getName()[ CD ]
Line_19 $$ toInsert += "#"-->Line_60 $$ toInsert = fqn[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_43 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()[ FD ]
Line_40 $$ suffix = " "-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_20 $$ toInsert += member.getName()-->Line_28 $$ toInsert = targetElement.getName()[ FD ]
Line_28 $$ toInsert = targetElement.getName()-->Line_64 $$ if (toInsert == null)[ FD ]
Line_43 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()-->Line_46 $$ expression = factory.createExpressionFromText(toInsert + suffix, elementAtCaret)[ FD ]
Line_25 $$ toInsert = fqn-->Line_39 $$ if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length() - 1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) [ FD ]
Line_25 $$ toInsert = fqn-->Line_64 $$ if (toInsert == null)[ FD ]
Line_12 $$ toInsert = fqn-->Line_53 $$ toInsert = fqn[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_70 $$ elementAtCaret = file.findElementAt(offset)[ CD ]
Line_24 $$ if (elementAtCaret == null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiLiteralExpression.class, PsiComment.class) != null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiJavaFile.class) == null) -->Line_43 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()[ CD ]
Line_60 $$ toInsert = fqn-->Line_64 $$ if (toInsert == null)[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_66 $$ document.insertString(offset, toInsert + suffix)[ CD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_9 $$ String toInsert[ CD ]
Line_10 $$ String suffix = ""-->Line_38 $$ suffix = "()"[ FD ]
Line_84 $$ int caretOffset = rangeMarker.getEndOffset()-->Line_86 $$ caretOffset--[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_3 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ FD ]
Line_28 $$ toInsert = targetElement.getName()-->Line_53 $$ toInsert = fqn[ FD ]
Line_3 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_67 $$ documentManager.commitAllDocuments()[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_3 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ CD ]
Line_51 $$ final PsiReferenceExpression referenceExpression = expression instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression) expression).getMethodExpression() : expression instanceof PsiReferenceExpression ? (PsiReferenceExpression) expression : null-->Line_54 $$ if (!isReferencedTo(referenceExpression, targetElement)) [ FD ]
Line_12 $$ toInsert = fqn-->Line_20 $$ toInsert += member.getName()[ FD ]
Line_14 $$ PsiMember member = (PsiMember) element-->Line_15 $$ PsiClass aClass = member.getContainingClass()[ FD ]
Line_9 $$ String toInsert-->Line_20 $$ toInsert += member.getName()[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_10 $$ String suffix = ""[ CD ]
Line_27 $$ PsiMember targetElement = (PsiMember) element-->Line_54 $$ if (!isReferencedTo(referenceExpression, targetElement)) [ FD ]
Line_8 $$ fqn = fqn.replace('#', '.')-->Line_60 $$ toInsert = fqn[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_8 $$ fqn = fqn.replace('#', '.')[ CD ]
Line_9 $$ String toInsert-->Line_17 $$ toInsert = className == null ? "" : className[ FD ]
Line_20 $$ toInsert += member.getName()-->Line_39 $$ if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length() - 1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) [ FD ]
Line_12 $$ toInsert = fqn-->Line_28 $$ toInsert = targetElement.getName()[ FD ]
Line_34 $$ targetElement = targetElement.getContainingClass()-->Line_56 $$ referenceExpression.bindToElement(targetElement)[ FD ]
Line_28 $$ toInsert = targetElement.getName()-->Line_65 $$ toInsert = ""[ FD ]
Line_9 $$ String toInsert-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_15 $$ PsiClass aClass = member.getContainingClass()-->Line_16 $$ String className = aClass == null ? "" : aClass.getQualifiedName()[ FD ]
Line_17 $$ toInsert = className == null ? "" : className-->Line_19 $$ toInsert += "#"[ FD ]
Line_9 $$ String toInsert-->Line_65 $$ toInsert = ""[ FD ]
Line_40 $$ suffix = " "-->Line_85 $$ if (element instanceof PsiMethod && ((PsiMethod) element).getParameterList().getParametersCount() != 0 && StringUtil.endsWithChar(suffix, ')')) [ FD ]
Line_9 $$ String toInsert-->Line_60 $$ toInsert = fqn[ FD ]
Line_9 $$ String toInsert-->Line_19 $$ toInsert += "#"[ FD ]
Line_5 $$ final PsiFile file = documentManager.getPsiFile(document)-->Line_70 $$ elementAtCaret = file.findElementAt(offset)[ FD ]
Line_25 $$ toInsert = fqn-->Line_53 $$ toInsert = fqn[ FD ]
Line_54 $$ if (!isReferencedTo(referenceExpression, targetElement)) -->Line_59 $$ if (!referenceExpression.isValid() || !isReferencedTo(referenceExpression, targetElement)) [ CD ]
Line_5 $$ final PsiFile file = documentManager.getPsiFile(document)-->Line_78 $$ CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(file)[ FD ]
Line_39 $$ if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length() - 1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) -->Line_40 $$ suffix = " "[ CD ]
Line_59 $$ if (!referenceExpression.isValid() || !isReferencedTo(referenceExpression, targetElement)) -->Line_60 $$ toInsert = fqn[ CD ]
Line_9 $$ String toInsert-->Line_25 $$ toInsert = fqn[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_60 $$ toInsert = fqn[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ CD ]
Line_11 $$ if (!(element instanceof PsiMember)) -->Line_13 $$ if (elementAtCaret != null && (element instanceof PsiMethod || element instanceof PsiField) && PsiUtil.isInsideJavadocComment(elementAtCaret)) [ CD ]
Line_19 $$ toInsert += "#"-->Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)[ FD ]
Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)-->Line_25 $$ toInsert = fqn[ FD ]
Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)-->Line_60 $$ toInsert = fqn[ FD ]
Line_20 $$ toInsert += member.getName()-->Line_65 $$ toInsert = ""[ FD ]
Line_28 $$ toInsert = targetElement.getName()-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_12 $$ toInsert = fqn-->Line_19 $$ toInsert += "#"[ FD ]
Line_12 $$ toInsert = fqn-->Line_39 $$ if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length() - 1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) [ FD ]
Line_53 $$ toInsert = fqn-->Line_60 $$ toInsert = fqn[ FD ]
Line_65 $$ toInsert = ""-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_12 $$ toInsert = fqn-->Line_17 $$ toInsert = className == null ? "" : className[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_8 $$ fqn = fqn.replace('#', '.')[ FD ]
Line_19 $$ toInsert += "#"-->Line_25 $$ toInsert = fqn[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_84 $$ int caretOffset = rangeMarker.getEndOffset()[ CD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_4 $$ Document document = editor.getDocument()[ CD ]
Line_10 $$ String suffix = ""-->Line_31 $$ suffix = "()"[ FD ]
Line_84 $$ int caretOffset = rangeMarker.getEndOffset()-->Line_88 $$ editor.getCaretModel().moveToOffset(caretOffset)[ FD ]
Line_25 $$ toInsert = fqn-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_20 $$ toInsert += member.getName()-->Line_60 $$ toInsert = fqn[ FD ]
Line_13 $$ if (elementAtCaret != null && (element instanceof PsiMethod || element instanceof PsiField) && PsiUtil.isInsideJavadocComment(elementAtCaret)) -->Line_15 $$ PsiClass aClass = member.getContainingClass()[ CD ]
Line_31 $$ suffix = "()"-->Line_85 $$ if (element instanceof PsiMethod && ((PsiMethod) element).getParameterList().getParametersCount() != 0 && StringUtil.endsWithChar(suffix, ')')) [ FD ]
Line_9 $$ String toInsert-->Line_28 $$ toInsert = targetElement.getName()[ FD ]
Line_17 $$ toInsert = className == null ? "" : className-->Line_28 $$ toInsert = targetElement.getName()[ FD ]
Line_60 $$ toInsert = fqn-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)-->Line_39 $$ if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length() - 1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) [ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_71 $$ if (elementAtCaret != null && elementAtCaret.isValid()) [ CD ]
Line_20 $$ toInsert += member.getName()-->Line_25 $$ toInsert = fqn[ FD ]
Line_6 $$ final int offset = editor.getCaretModel().getOffset()-->Line_66 $$ document.insertString(offset, toInsert + suffix)[ FD ]
Line_51 $$ final PsiReferenceExpression referenceExpression = expression instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression) expression).getMethodExpression() : expression instanceof PsiReferenceExpression ? (PsiReferenceExpression) expression : null-->Line_56 $$ referenceExpression.bindToElement(targetElement)[ FD ]
Line_8 $$ fqn = fqn.replace('#', '.')-->Line_53 $$ toInsert = fqn[ FD ]
Line_19 $$ toInsert += "#"-->Line_20 $$ toInsert += member.getName()[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_69 $$ RangeMarker rangeMarker = document.createRangeMarker(endOffset, endOffset)[ CD ]
Line_7 $$ PsiElement elementAtCaret = file.findElementAt(offset)-->Line_70 $$ elementAtCaret = file.findElementAt(offset)[ FD ]
Line_17 $$ toInsert = className == null ? "" : className-->Line_18 $$ if (toInsert.length() != 0)[ FD ]
Line_7 $$ PsiElement elementAtCaret = file.findElementAt(offset)-->Line_73 $$ shortenReference(elementAtCaret, element)[ FD ]
Line_8 $$ fqn = fqn.replace('#', '.')-->Line_30 $$ if (!fqn.contains("(")) [ FD ]
Line_3 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_5 $$ final PsiFile file = documentManager.getPsiFile(document)[ FD ]
Line_19 $$ toInsert += "#"-->Line_39 $$ if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length() - 1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) [ FD ]
Line_29 $$ if (targetElement instanceof PsiMethod) -->Line_33 $$ if (((PsiMethod) targetElement).isConstructor()) [ CD ]
Line_28 $$ toInsert = targetElement.getName()-->Line_39 $$ if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length() - 1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) [ FD ]
Line_7 $$ PsiElement elementAtCaret = file.findElementAt(offset)-->Line_37 $$ if (isAfterNew(file, elementAtCaret)) [ FD ]
Line_9 $$ String toInsert-->Line_53 $$ toInsert = fqn[ FD ]
Line_10 $$ String suffix = ""-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_8 $$ fqn = fqn.replace('#', '.')-->Line_25 $$ toInsert = fqn[ FD ]
Line_12 $$ toInsert = fqn-->Line_65 $$ toInsert = ""[ FD ]
Line_38 $$ suffix = "()"-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_69 $$ RangeMarker rangeMarker = document.createRangeMarker(endOffset, endOffset)-->Line_84 $$ int caretOffset = rangeMarker.getEndOffset()[ FD ]
Line_27 $$ PsiMember targetElement = (PsiMember) element-->Line_36 $$ if (targetElement instanceof PsiClass) [ FD ]
Line_60 $$ toInsert = fqn-->Line_65 $$ toInsert = ""[ FD ]
Line_17 $$ toInsert = className == null ? "" : className-->Line_65 $$ toInsert = ""[ FD ]
Line_29 $$ if (targetElement instanceof PsiMethod) -->Line_36 $$ if (targetElement instanceof PsiClass) [ CD ]
Line_4 $$ Document document = editor.getDocument()-->Line_69 $$ RangeMarker rangeMarker = document.createRangeMarker(endOffset, endOffset)[ FD ]
Line_9 $$ String toInsert-->Line_39 $$ if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length() - 1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) [ FD ]
Line_19 $$ toInsert += "#"-->Line_53 $$ toInsert = fqn[ FD ]
Line_9 $$ String toInsert-->Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)[ FD ]
Line_7 $$ PsiElement elementAtCaret = file.findElementAt(offset)-->Line_39 $$ if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length() - 1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) [ FD ]
Line_9 $$ String toInsert-->Line_18 $$ if (toInsert.length() != 0)[ FD ]
Line_19 $$ toInsert += "#"-->Line_64 $$ if (toInsert == null)[ FD ]
Line_64 $$ if (toInsert == null)-->Line_65 $$ toInsert = ""[ CD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_6 $$ final int offset = editor.getCaretModel().getOffset()[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_4 $$ Document document = editor.getDocument()[ FD ]
Line_24 $$ if (elementAtCaret == null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiLiteralExpression.class, PsiComment.class) != null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiJavaFile.class) == null) -->Line_27 $$ PsiMember targetElement = (PsiMember) element[ CD ]
Line_34 $$ targetElement = targetElement.getContainingClass()-->Line_54 $$ if (!isReferencedTo(referenceExpression, targetElement)) [ FD ]
Line_12 $$ toInsert = fqn-->Line_68 $$ int endOffset = offset + toInsert.length() + suffix.length()[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_80 $$ CodeStyleManager.getInstance(project).adjustLineIndent(file, offset)[ FD ]
Line_12 $$ toInsert = fqn-->Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)[ FD ]
Line_12 $$ toInsert = fqn-->Line_60 $$ toInsert = fqn[ FD ]
Line_33 $$ if (((PsiMethod) targetElement).isConstructor()) -->Line_34 $$ targetElement = targetElement.getContainingClass()[ CD ]
Line_25 $$ toInsert = fqn-->Line_65 $$ toInsert = ""[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_85 $$ if (element instanceof PsiMethod && ((PsiMethod) element).getParameterList().getParametersCount() != 0 && StringUtil.endsWithChar(suffix, ')')) [ CD ]
Line_31 $$ suffix = "()"-->Line_40 $$ suffix = " "[ FD ]
Line_13 $$ if (elementAtCaret != null && (element instanceof PsiMethod || element instanceof PsiField) && PsiUtil.isInsideJavadocComment(elementAtCaret)) -->Line_18 $$ if (toInsert.length() != 0)[ CD ]
Line_12 $$ toInsert = fqn-->Line_25 $$ toInsert = fqn[ FD ]
Line_17 $$ toInsert = className == null ? "" : className-->Line_53 $$ toInsert = fqn[ FD ]
Line_27 $$ PsiMember targetElement = (PsiMember) element-->Line_56 $$ referenceExpression.bindToElement(targetElement)[ FD ]
Line_17 $$ toInsert = className == null ? "" : className-->Line_25 $$ toInsert = fqn[ FD ]
Line_53 $$ toInsert = fqn-->Line_65 $$ toInsert = ""[ FD ]
Line_2 $$ public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) -->Line_88 $$ editor.getCaretModel().moveToOffset(caretOffset)[ FD ]
Line_17 $$ toInsert = className == null ? "" : className-->Line_60 $$ toInsert = fqn[ FD ]
Line_13 $$ if (elementAtCaret != null && (element instanceof PsiMethod || element instanceof PsiField) && PsiUtil.isInsideJavadocComment(elementAtCaret)) -->Line_21 $$ if (member instanceof PsiMethod) [ CD ]
Line_21 $$ if (member instanceof PsiMethod) -->Line_22 $$ toInsert += getParameterString((PsiMethod) member, true)[ CD ]
Line_11 $$ if (!(element instanceof PsiMember)) -->Line_12 $$ toInsert = fqn[ CD ]
Line_12 $$ toInsert = fqn-->Line_18 $$ if (toInsert.length() != 0)[ FD ]
Line_13 $$ if (elementAtCaret != null && (element instanceof PsiMethod || element instanceof PsiField) && PsiUtil.isInsideJavadocComment(elementAtCaret)) -->Line_17 $$ toInsert = className == null ? "" : className[ CD ]
Line_9 $$ String toInsert-->Line_12 $$ toInsert = fqn[ FD ]
Line_9 $$ String toInsert-->Line_64 $$ if (toInsert == null)[ FD ]
Line_7 $$ PsiElement elementAtCaret = file.findElementAt(offset)-->Line_24 $$ if (elementAtCaret == null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiLiteralExpression.class, PsiComment.class) != null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiJavaFile.class) == null) [ FD ]
