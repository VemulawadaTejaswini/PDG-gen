Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_10 $$ final Class<?> paramType = value.getClass()[ FD ]
Line_24 $$ if (setterMethod != null) -->Line_25 $$ properties.put(name, value.toString())[ CD ]
Line_11 $$ MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, paramType)-->Line_16 $$ methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, int.class)[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_14 $$ properties.put(name, value.toString())[ FD ]
Line_9 $$ final String methodName = builder.toString()-->Line_16 $$ methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, int.class)[ FD ]
Line_9 $$ final String methodName = builder.toString()-->Line_22 $$ methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, boolean.class)[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_7 $$ StringBuilder builder = new StringBuilder("set").append(name)[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_13 $$ if (setterMethod != null) [ CD ]
Line_12 $$ Method setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)-->Line_24 $$ if (setterMethod != null) [ FD ]
Line_15 $$ if (paramType == Integer.class) -->Line_18 $$ if (setterMethod != null) [ CD ]
Line_7 $$ StringBuilder builder = new StringBuilder("set").append(name)-->Line_8 $$ builder.setCharAt(3, Character.toUpperCase(name.charAt(0)))[ FD ]
Line_17 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)-->Line_18 $$ if (setterMethod != null) [ FD ]
Line_13 $$ if (setterMethod != null) -->Line_14 $$ properties.put(name, value.toString())[ CD ]
Line_11 $$ MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, paramType)-->Line_22 $$ methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, boolean.class)[ FD ]
Line_3 $$ if (value == null || "".equals(value))-->Line_4 $$ return[ CD ]
Line_7 $$ StringBuilder builder = new StringBuilder("set").append(name)-->Line_9 $$ final String methodName = builder.toString()[ FD ]
Line_15 $$ if (paramType == Integer.class) -->Line_16 $$ methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, int.class)[ CD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_5 $$ if (value instanceof Integer && ((Integer) value).intValue() == -1)[ CD ]
Line_12 $$ Method setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)-->Line_18 $$ if (setterMethod != null) [ FD ]
Line_17 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)-->Line_23 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_12 $$ Method setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ CD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_8 $$ builder.setCharAt(3, Character.toUpperCase(name.charAt(0)))[ FD ]
Line_16 $$ methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, int.class)-->Line_22 $$ methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, boolean.class)[ FD ]
Line_5 $$ if (value instanceof Integer && ((Integer) value).intValue() == -1)-->Line_6 $$ return[ CD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_11 $$ MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, paramType)[ CD ]
Line_12 $$ Method setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)-->Line_17 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_10 $$ final Class<?> paramType = value.getClass()[ CD ]
Line_15 $$ if (paramType == Integer.class) -->Line_17 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ CD ]
Line_11 $$ MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, paramType)-->Line_17 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_25 $$ properties.put(name, value.toString())[ FD ]
Line_12 $$ Method setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)-->Line_23 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_12 $$ Method setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_10 $$ final Class<?> paramType = value.getClass()-->Line_11 $$ MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, paramType)[ FD ]
Line_15 $$ if (paramType == Integer.class) -->Line_21 $$ if (paramType == Boolean.class) [ CD ]
Line_22 $$ methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, boolean.class)-->Line_23 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_9 $$ final String methodName = builder.toString()[ CD ]
Line_12 $$ Method setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)-->Line_13 $$ if (setterMethod != null) [ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_23 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_11 $$ MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, paramType)-->Line_12 $$ Method setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_10 $$ final Class<?> paramType = value.getClass()-->Line_21 $$ if (paramType == Boolean.class) [ FD ]
Line_21 $$ if (paramType == Boolean.class) -->Line_24 $$ if (setterMethod != null) [ CD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_3 $$ if (value == null || "".equals(value))[ CD ]
Line_9 $$ final String methodName = builder.toString()-->Line_11 $$ MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, paramType)[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_19 $$ properties.put(name, value.toString())[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_7 $$ StringBuilder builder = new StringBuilder("set").append(name)[ CD ]
Line_17 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)-->Line_24 $$ if (setterMethod != null) [ FD ]
Line_21 $$ if (paramType == Boolean.class) -->Line_23 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ CD ]
Line_11 $$ MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, paramType)-->Line_23 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_3 $$ if (value == null || "".equals(value))[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_17 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_16 $$ methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, int.class)-->Line_23 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_18 $$ if (setterMethod != null) -->Line_19 $$ properties.put(name, value.toString())[ CD ]
Line_13 $$ if (setterMethod != null) -->Line_15 $$ if (paramType == Integer.class) [ CD ]
Line_10 $$ final Class<?> paramType = value.getClass()-->Line_15 $$ if (paramType == Integer.class) [ FD ]
Line_16 $$ methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, int.class)-->Line_17 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_2 $$ private void setProperty(final DeploymentReflectionIndex deploymentReflectionIndex, final Class<?> dataSourceClass, final Map<String, String> properties, final String name, final Object value) -->Line_8 $$ builder.setCharAt(3, Character.toUpperCase(name.charAt(0)))[ CD ]
Line_21 $$ if (paramType == Boolean.class) -->Line_22 $$ methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, boolean.class)[ CD ]
Line_23 $$ setterMethod = ClassReflectionIndexUtil.findMethod(deploymentReflectionIndex, dataSourceClass, methodIdentifier)-->Line_24 $$ if (setterMethod != null) [ FD ]
