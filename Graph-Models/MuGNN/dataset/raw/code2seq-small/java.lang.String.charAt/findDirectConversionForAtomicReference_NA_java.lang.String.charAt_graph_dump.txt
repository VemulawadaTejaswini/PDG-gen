Line_14 $$ if (context instanceof PsiAssignmentExpression) -->Line_16 $$ final IElementType operationSign = signToken.getTokenType()[ CD ]
Line_15 $$ final PsiJavaToken signToken = ((PsiAssignmentExpression) context).getOperationSign()-->Line_17 $$ final String sign = signToken.getText()[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_24 $$ return wrapWithNewExpression(to, from, ((PsiAssignmentExpression) context).getRExpression(), element)[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_48 $$ return wrapWithNewExpression(to, from, null, parent)[ FD ]
Line_35 $$ if (context instanceof PsiPrefixExpression) -->Line_40 $$ final String sign = operationSign.getText()[ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_43 $$ if (context instanceof PsiBinaryExpression) [ FD ]
Line_5 $$ final IElementType operationSign = ((PsiAssignmentExpression) parent).getOperationTokenType()-->Line_19 $$ if (operationSign == JavaTokenType.EQ) [ FD ]
Line_17 $$ final String sign = signToken.getText()-->Line_41 $$ return new TypeConversionDescriptor(sign + "$qualifier$", "$qualifier$.set(" + getBoxedWrapper(from, to, "$qualifier$.get() " + sign.charAt(0) + " 1") + ")")[ FD ]
Line_32 $$ if (context instanceof PsiPostfixExpression) -->Line_33 $$ final String sign = ((PsiPostfixExpression) context).getOperationSign().getText()[ CD ]
Line_4 $$ if (parent instanceof PsiAssignmentExpression) -->Line_5 $$ final IElementType operationSign = ((PsiAssignmentExpression) parent).getOperationTokenType()[ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_14 $$ if (context instanceof PsiAssignmentExpression) [ FD ]
Line_5 $$ final IElementType operationSign = ((PsiAssignmentExpression) parent).getOperationTokenType()-->Line_40 $$ final String sign = operationSign.getText()[ FD ]
Line_35 $$ if (context instanceof PsiPrefixExpression) -->Line_37 $$ if (operationSign.getTokenType() == JavaTokenType.EXCL) [ CD ]
Line_20 $$ final PsiExpression lExpression = ((PsiAssignmentExpression) context).getLExpression()-->Line_21 $$ if (lExpression instanceof PsiReferenceExpression) [ FD ]
Line_47 $$ if (parent instanceof PsiVariable) -->Line_48 $$ return wrapWithNewExpression(to, from, null, parent)[ CD ]
Line_10 $$ if (context instanceof PsiReferenceExpression) -->Line_13 $$ return new TypeConversionDescriptor("$qualifier$", "$qualifier$.get()", expression)[ CD ]
Line_35 $$ if (context instanceof PsiPrefixExpression) -->Line_36 $$ final PsiJavaToken operationSign = ((PsiPrefixExpression) context).getOperationSign()[ CD ]
Line_43 $$ if (context instanceof PsiBinaryExpression) -->Line_45 $$ return new TypeConversionDescriptor("$qualifier$" + sign + "$val$", "$qualifier$.get() " + sign + " $val$")[ CD ]
Line_14 $$ if (context instanceof PsiAssignmentExpression) -->Line_18 $$ if (parent instanceof PsiExpressionStatement) [ CD ]
Line_19 $$ if (operationSign == JavaTokenType.EQ) -->Line_20 $$ final PsiExpression lExpression = ((PsiAssignmentExpression) context).getLExpression()[ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_32 $$ if (context instanceof PsiPostfixExpression) [ FD ]
Line_3 $$ final PsiElement parent = context.getParent()-->Line_18 $$ if (parent instanceof PsiExpressionStatement) [ FD ]
Line_10 $$ if (context instanceof PsiReferenceExpression) -->Line_11 $$ final PsiExpression qualifierExpression = ((PsiReferenceExpression) context).getQualifierExpression()[ CD ]
Line_23 $$ if (element instanceof PsiVariable && ((PsiVariable) element).hasModifierProperty(PsiModifier.FINAL)) -->Line_24 $$ return wrapWithNewExpression(to, from, ((PsiAssignmentExpression) context).getRExpression(), element)[ CD ]
Line_17 $$ final String sign = signToken.getText()-->Line_34 $$ return new TypeConversionDescriptor("$qualifier$" + sign, "$qualifier$.getAndSet(" + getBoxedWrapper(from, to, "$qualifier$.get() " + sign.charAt(0) + " 1") + ")")[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_34 $$ return new TypeConversionDescriptor("$qualifier$" + sign, "$qualifier$.getAndSet(" + getBoxedWrapper(from, to, "$qualifier$.get() " + sign.charAt(0) + " 1") + ")")[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_50 $$ return null[ CD ]
Line_21 $$ if (lExpression instanceof PsiReferenceExpression) -->Line_22 $$ final PsiElement element = ((PsiReferenceExpression) lExpression).resolve()[ CD ]
Line_32 $$ if (context instanceof PsiPostfixExpression) -->Line_34 $$ return new TypeConversionDescriptor("$qualifier$" + sign, "$qualifier$.getAndSet(" + getBoxedWrapper(from, to, "$qualifier$.get() " + sign.charAt(0) + " 1") + ")")[ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_29 $$ return new TypeConversionDescriptor("$qualifier$" + sign + "$val$", "$qualifier$.set(" + getBoxedWrapper(from, to, "$qualifier$.get() " + sign.charAt(0) + " $val$") + ")")[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_47 $$ if (parent instanceof PsiVariable) [ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_12 $$ final PsiExpression expression = context.getParent() instanceof PsiMethodCallExpression && qualifierExpression != null ? qualifierExpression : (PsiExpression) context[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_41 $$ return new TypeConversionDescriptor(sign + "$qualifier$", "$qualifier$.set(" + getBoxedWrapper(from, to, "$qualifier$.get() " + sign.charAt(0) + " 1") + ")")[ FD ]
Line_19 $$ if (operationSign == JavaTokenType.EQ) -->Line_29 $$ return new TypeConversionDescriptor("$qualifier$" + sign + "$val$", "$qualifier$.set(" + getBoxedWrapper(from, to, "$qualifier$.get() " + sign.charAt(0) + " $val$") + ")")[ CD ]
Line_10 $$ if (context instanceof PsiReferenceExpression) -->Line_12 $$ final PsiExpression expression = context.getParent() instanceof PsiMethodCallExpression && qualifierExpression != null ? qualifierExpression : (PsiExpression) context[ CD ]
Line_15 $$ final PsiJavaToken signToken = ((PsiAssignmentExpression) context).getOperationSign()-->Line_16 $$ final IElementType operationSign = signToken.getTokenType()[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_10 $$ if (context instanceof PsiReferenceExpression) [ FD ]
Line_32 $$ if (context instanceof PsiPostfixExpression) -->Line_35 $$ if (context instanceof PsiPrefixExpression) [ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_10 $$ if (context instanceof PsiReferenceExpression) [ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_35 $$ if (context instanceof PsiPrefixExpression) [ FD ]
Line_3 $$ final PsiElement parent = context.getParent()-->Line_4 $$ if (parent instanceof PsiAssignmentExpression) [ FD ]
Line_35 $$ if (context instanceof PsiPrefixExpression) -->Line_43 $$ if (context instanceof PsiBinaryExpression) [ CD ]
Line_4 $$ if (parent instanceof PsiAssignmentExpression) -->Line_6 $$ if (operationSign == JavaTokenType.EQ) [ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_3 $$ final PsiElement parent = context.getParent()[ CD ]
Line_3 $$ final PsiElement parent = context.getParent()-->Line_48 $$ return wrapWithNewExpression(to, from, null, parent)[ FD ]
Line_35 $$ if (context instanceof PsiPrefixExpression) -->Line_41 $$ return new TypeConversionDescriptor(sign + "$qualifier$", "$qualifier$.set(" + getBoxedWrapper(from, to, "$qualifier$.get() " + sign.charAt(0) + " 1") + ")")[ CD ]
Line_19 $$ if (operationSign == JavaTokenType.EQ) -->Line_27 $$ return new TypeConversionDescriptor("$qualifier$ = $val$", "$qualifier$.set($val$)")[ CD ]
Line_10 $$ if (context instanceof PsiReferenceExpression) -->Line_14 $$ if (context instanceof PsiAssignmentExpression) [ CD ]
Line_17 $$ final String sign = signToken.getText()-->Line_29 $$ return new TypeConversionDescriptor("$qualifier$" + sign + "$val$", "$qualifier$.set(" + getBoxedWrapper(from, to, "$qualifier$.get() " + sign.charAt(0) + " $val$") + ")")[ FD ]
Line_37 $$ if (operationSign.getTokenType() == JavaTokenType.EXCL) -->Line_38 $$ return new TypeConversionDescriptor("!$qualifier$", "!$qualifier$.get()")[ CD ]
Line_22 $$ final PsiElement element = ((PsiReferenceExpression) lExpression).resolve()-->Line_24 $$ return wrapWithNewExpression(to, from, ((PsiAssignmentExpression) context).getRExpression(), element)[ FD ]
Line_43 $$ if (context instanceof PsiBinaryExpression) -->Line_44 $$ final String sign = ((PsiBinaryExpression) context).getOperationSign().getText()[ CD ]
Line_3 $$ final PsiElement parent = context.getParent()-->Line_47 $$ if (parent instanceof PsiVariable) [ FD ]
Line_14 $$ if (context instanceof PsiAssignmentExpression) -->Line_15 $$ final PsiJavaToken signToken = ((PsiAssignmentExpression) context).getOperationSign()[ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_4 $$ if (parent instanceof PsiAssignmentExpression) [ CD ]
Line_21 $$ if (lExpression instanceof PsiReferenceExpression) -->Line_23 $$ if (element instanceof PsiVariable && ((PsiVariable) element).hasModifierProperty(PsiModifier.FINAL)) [ CD ]
Line_5 $$ final IElementType operationSign = ((PsiAssignmentExpression) parent).getOperationTokenType()-->Line_6 $$ if (operationSign == JavaTokenType.EQ) [ FD ]
Line_6 $$ if (operationSign == JavaTokenType.EQ) -->Line_7 $$ return new TypeConversionDescriptor("$qualifier$ = $val$", "$qualifier$.set($val$)", (PsiAssignmentExpression) parent)[ CD ]
Line_14 $$ if (context instanceof PsiAssignmentExpression) -->Line_32 $$ if (context instanceof PsiPostfixExpression) [ CD ]
Line_5 $$ final IElementType operationSign = ((PsiAssignmentExpression) parent).getOperationTokenType()-->Line_37 $$ if (operationSign.getTokenType() == JavaTokenType.EXCL) [ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReference(PsiElement context, PsiType to, PsiType from) -->Line_3 $$ final PsiElement parent = context.getParent()[ FD ]
Line_14 $$ if (context instanceof PsiAssignmentExpression) -->Line_17 $$ final String sign = signToken.getText()[ CD ]
Line_18 $$ if (parent instanceof PsiExpressionStatement) -->Line_19 $$ if (operationSign == JavaTokenType.EQ) [ CD ]
Line_19 $$ if (operationSign == JavaTokenType.EQ) -->Line_21 $$ if (lExpression instanceof PsiReferenceExpression) [ CD ]
