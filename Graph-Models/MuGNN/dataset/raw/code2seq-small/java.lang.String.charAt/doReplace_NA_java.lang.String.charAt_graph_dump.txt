Line_17 $$ String toFind = model.getStringToFind()-->Line_19 $$ if (StringUtil.endsWithChar(toFind, '$')) [ FD ]
Line_3 $$ final int startOffset = result.getStartOffset()-->Line_7 $$ newOffset = doReplace(project, document, startOffset, endOffset, stringToReplace)[ FD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_14 $$ int start = startOffset[ CD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_3 $$ final int startOffset = result.getStartOffset()[ FD ]
Line_18 $$ if (model.isForward()) -->Line_19 $$ if (StringUtil.endsWithChar(toFind, '$')) [ CD ]
Line_6 $$ if (reallyReplace) -->Line_7 $$ newOffset = doReplace(project, document, startOffset, endOffset, stringToReplace)[ CD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_6 $$ if (reallyReplace) [ CD ]
Line_6 $$ if (reallyReplace) -->Line_11 $$ rangesToChange.add(Pair.create(textRange, converted))[ CD ]
Line_23 $$ if (i % 2 == 0)-->Line_24 $$ end++[ CD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_4 $$ final int endOffset = result.getEndOffset()[ CD ]
Line_19 $$ if (StringUtil.endsWithChar(toFind, '$')) -->Line_25 $$ if (StringUtil.startsWithChar(toFind, '^')) [ CD ]
Line_14 $$ int start = startOffset-->Line_32 $$ start--[ FD ]
Line_18 $$ if (model.isForward()) -->Line_29 $$ if (StringUtil.startsWithChar(toFind, '^')) [ CD ]
Line_15 $$ int end = newOffset-->Line_26 $$ end++[ FD ]
Line_19 $$ if (StringUtil.endsWithChar(toFind, '$')) -->Line_23 $$ if (i % 2 == 0)[ CD ]
Line_17 $$ String toFind = model.getStringToFind()-->Line_25 $$ if (StringUtil.startsWithChar(toFind, '^')) [ FD ]
Line_9 $$ final String converted = StringUtil.convertLineSeparators(stringToReplace)-->Line_11 $$ rangesToChange.add(Pair.create(textRange, converted))[ FD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_17 $$ String toFind = model.getStringToFind()[ FD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_26 $$ while (end < document.getTextLength() && document.getCharsSequence().charAt(end) != '\n') end++[ FD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_7 $$ newOffset = doReplace(project, document, startOffset, endOffset, stringToReplace)[ FD ]
Line_17 $$ String toFind = model.getStringToFind()-->Line_31 $$ if (StringUtil.endsWithChar(toFind, '$')) [ FD ]
Line_17 $$ String toFind = model.getStringToFind()-->Line_29 $$ if (StringUtil.startsWithChar(toFind, '^')) [ FD ]
Line_5 $$ int newOffset-->Line_12 $$ newOffset = endOffset[ FD ]
Line_17 $$ String toFind = model.getStringToFind()-->Line_21 $$ int length = toFind.length()[ FD ]
Line_31 $$ if (StringUtil.endsWithChar(toFind, '$')) -->Line_32 $$ while (start >= 0 && document.getCharsSequence().charAt(start) != '\n') start--[ CD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_16 $$ if (model.isRegularExpressions()) [ FD ]
Line_6 $$ if (reallyReplace) -->Line_10 $$ TextRange textRange = new TextRange(startOffset, endOffset)[ CD ]
Line_14 $$ int start = startOffset-->Line_32 $$ while (start >= 0 && document.getCharsSequence().charAt(start) != '\n') start--[ FD ]
Line_15 $$ int end = newOffset-->Line_26 $$ while (end < document.getTextLength() && document.getCharsSequence().charAt(end) != '\n') end++[ FD ]
Line_19 $$ if (StringUtil.endsWithChar(toFind, '$')) -->Line_20 $$ int i = 0[ CD ]
Line_19 $$ if (StringUtil.endsWithChar(toFind, '$')) -->Line_21 $$ int length = toFind.length()[ CD ]
Line_20 $$ int i = 0-->Line_22 $$ i++[ FD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_18 $$ if (model.isForward()) [ FD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_5 $$ int newOffset[ CD ]
Line_29 $$ if (StringUtil.startsWithChar(toFind, '^')) -->Line_30 $$ start--[ CD ]
Line_25 $$ if (StringUtil.startsWithChar(toFind, '^')) -->Line_26 $$ while (end < document.getTextLength() && document.getCharsSequence().charAt(end) != '\n') end++[ CD ]
Line_29 $$ if (StringUtil.startsWithChar(toFind, '^')) -->Line_31 $$ if (StringUtil.endsWithChar(toFind, '$')) [ CD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_9 $$ final String converted = StringUtil.convertLineSeparators(stringToReplace)[ FD ]
Line_15 $$ int end = newOffset-->Line_24 $$ end++[ FD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_3 $$ final int startOffset = result.getStartOffset()[ CD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_11 $$ rangesToChange.add(Pair.create(textRange, converted))[ FD ]
Line_6 $$ if (reallyReplace) -->Line_12 $$ newOffset = endOffset[ CD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_16 $$ if (model.isRegularExpressions()) [ CD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_4 $$ final int endOffset = result.getEndOffset()[ FD ]
Line_7 $$ newOffset = doReplace(project, document, startOffset, endOffset, stringToReplace)-->Line_12 $$ newOffset = endOffset[ FD ]
Line_16 $$ if (model.isRegularExpressions()) -->Line_17 $$ String toFind = model.getStringToFind()[ CD ]
Line_16 $$ if (model.isRegularExpressions()) -->Line_18 $$ if (model.isForward()) [ CD ]
Line_19 $$ if (StringUtil.endsWithChar(toFind, '$')) -->Line_22 $$ while (i + 2 <= length && toFind.charAt(length - i - 2) == '\\') i++[ CD ]
Line_4 $$ final int endOffset = result.getEndOffset()-->Line_7 $$ newOffset = doReplace(project, document, startOffset, endOffset, stringToReplace)[ FD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_36 $$ return new TextRange(start, end)[ CD ]
Line_4 $$ final int endOffset = result.getEndOffset()-->Line_12 $$ newOffset = endOffset[ FD ]
Line_5 $$ int newOffset-->Line_7 $$ newOffset = doReplace(project, document, startOffset, endOffset, stringToReplace)[ FD ]
Line_10 $$ TextRange textRange = new TextRange(startOffset, endOffset)-->Line_11 $$ rangesToChange.add(Pair.create(textRange, converted))[ FD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_15 $$ int end = newOffset[ CD ]
Line_6 $$ if (reallyReplace) -->Line_9 $$ final String converted = StringUtil.convertLineSeparators(stringToReplace)[ CD ]
Line_2 $$ public static TextRange doReplace(final Project project, final Document document, final FindModel model, FindResult result, @NotNull String stringToReplace, boolean reallyReplace, List<Pair<TextRange, String>> rangesToChange) -->Line_32 $$ while (start >= 0 && document.getCharsSequence().charAt(start) != '\n') start--[ FD ]
Line_17 $$ String toFind = model.getStringToFind()-->Line_22 $$ while (i + 2 <= length && toFind.charAt(length - i - 2) == '\\') i++[ FD ]
Line_14 $$ int start = startOffset-->Line_30 $$ start--[ FD ]
