Line_4 $$ if (element instanceof JsonStringLiteral) -->Line_26 $$ if (element instanceof JsonNumberLiteral) [ CD ]
Line_4 $$ if (element instanceof JsonStringLiteral) -->Line_5 $$ final JsonStringLiteral stringLiteral = (JsonStringLiteral) element[ CD ]
Line_2 $$ public void annotate(@NotNull PsiElement element, @NotNull AnnotationHolder holder) -->Line_4 $$ if (element instanceof JsonStringLiteral) [ CD ]
Line_26 $$ if (element instanceof JsonNumberLiteral) -->Line_27 $$ if (!VALID_NUMBER_LITERAL.matcher(text).matches()) [ CD ]
Line_17 $$ if (fragmentText.startsWith("\\") && fragmentText.length() > 1 && !VALID_ESCAPE.matcher(fragmentText).matches()) -->Line_18 $$ final TextRange fragmentRange = fragment.getFirst()[ CD ]
Line_3 $$ final String text = JsonPsiUtil.getElementTextWithoutHostEscaping(element)-->Line_27 $$ if (!VALID_NUMBER_LITERAL.matcher(text).matches()) [ FD ]
Line_16 $$ final String fragmentText = fragment.getSecond()-->Line_17 $$ if (fragmentText.startsWith("\\") && fragmentText.length() > 1 && !VALID_ESCAPE.matcher(fragmentText).matches()) [ FD ]
Line_2 $$ public void annotate(@NotNull PsiElement element, @NotNull AnnotationHolder holder) -->Line_3 $$ final String text = JsonPsiUtil.getElementTextWithoutHostEscaping(element)[ CD ]
Line_2 $$ public void annotate(@NotNull PsiElement element, @NotNull AnnotationHolder holder) -->Line_20 $$ holder.createErrorAnnotation(fragmentRange.shiftRight(elementOffset), JsonBundle.message("syntax.error.illegal.unicode.escape.sequence"))[ FD ]
Line_2 $$ public void annotate(@NotNull PsiElement element, @NotNull AnnotationHolder holder) -->Line_12 $$ holder.createErrorAnnotation(element, JsonBundle.message("syntax.error.missing.closing.quote"))[ FD ]
Line_15 $$ for (Pair<TextRange, String> fragment : fragments) -->Line_16 $$ final String fragmentText = fragment.getSecond()[ FD ]
Line_2 $$ public void annotate(@NotNull PsiElement element, @NotNull AnnotationHolder holder) -->Line_28 $$ holder.createErrorAnnotation(element, JsonBundle.message("syntax.error.illegal.floating.point.literal"))[ FD ]
Line_4 $$ if (element instanceof JsonStringLiteral) -->Line_11 $$ if (length <= 1 || text.charAt(0) != text.charAt(length - 1) || JsonPsiUtil.isEscapedChar(text, length - 1)) [ CD ]
Line_2 $$ public void annotate(@NotNull PsiElement element, @NotNull AnnotationHolder holder) -->Line_3 $$ final String text = JsonPsiUtil.getElementTextWithoutHostEscaping(element)[ FD ]
Line_18 $$ final TextRange fragmentRange = fragment.getFirst()-->Line_22 $$ holder.createErrorAnnotation(fragmentRange.shiftRight(elementOffset), JsonBundle.message("syntax.error.illegal.escape.sequence"))[ FD ]
Line_15 $$ for (Pair<TextRange, String> fragment : fragments) -->Line_18 $$ final TextRange fragmentRange = fragment.getFirst()[ FD ]
Line_4 $$ if (element instanceof JsonStringLiteral) -->Line_6 $$ final int elementOffset = element.getTextOffset()[ CD ]
Line_2 $$ public void annotate(@NotNull PsiElement element, @NotNull AnnotationHolder holder) -->Line_4 $$ if (element instanceof JsonStringLiteral) [ FD ]
Line_7 $$ if (JsonPsiUtil.isPropertyKey(element)) -->Line_8 $$ holder.createInfoAnnotation(element, Holder.DEBUG ? "property key" : null).setTextAttributes(JsonSyntaxHighlighterFactory.JSON_PROPERTY_KEY)[ CD ]
Line_19 $$ if (fragmentText.startsWith("\\u")) -->Line_20 $$ holder.createErrorAnnotation(fragmentRange.shiftRight(elementOffset), JsonBundle.message("syntax.error.illegal.unicode.escape.sequence"))[ CD ]
Line_4 $$ if (element instanceof JsonStringLiteral) -->Line_7 $$ if (JsonPsiUtil.isPropertyKey(element)) [ CD ]
Line_6 $$ final int elementOffset = element.getTextOffset()-->Line_20 $$ holder.createErrorAnnotation(fragmentRange.shiftRight(elementOffset), JsonBundle.message("syntax.error.illegal.unicode.escape.sequence"))[ FD ]
Line_3 $$ final String text = JsonPsiUtil.getElementTextWithoutHostEscaping(element)-->Line_11 $$ if (length <= 1 || text.charAt(0) != text.charAt(length - 1) || JsonPsiUtil.isEscapedChar(text, length - 1)) [ FD ]
Line_5 $$ final JsonStringLiteral stringLiteral = (JsonStringLiteral) element-->Line_14 $$ final List<Pair<TextRange, String>> fragments = stringLiteral.getTextFragments()[ FD ]
Line_2 $$ public void annotate(@NotNull PsiElement element, @NotNull AnnotationHolder holder) -->Line_26 $$ if (element instanceof JsonNumberLiteral) [ FD ]
Line_18 $$ final TextRange fragmentRange = fragment.getFirst()-->Line_20 $$ holder.createErrorAnnotation(fragmentRange.shiftRight(elementOffset), JsonBundle.message("syntax.error.illegal.unicode.escape.sequence"))[ FD ]
Line_6 $$ final int elementOffset = element.getTextOffset()-->Line_22 $$ holder.createErrorAnnotation(fragmentRange.shiftRight(elementOffset), JsonBundle.message("syntax.error.illegal.escape.sequence"))[ FD ]
Line_2 $$ public void annotate(@NotNull PsiElement element, @NotNull AnnotationHolder holder) -->Line_8 $$ holder.createInfoAnnotation(element, Holder.DEBUG ? "property key" : null).setTextAttributes(JsonSyntaxHighlighterFactory.JSON_PROPERTY_KEY)[ FD ]
Line_17 $$ if (fragmentText.startsWith("\\") && fragmentText.length() > 1 && !VALID_ESCAPE.matcher(fragmentText).matches()) -->Line_19 $$ if (fragmentText.startsWith("\\u")) [ CD ]
Line_19 $$ if (fragmentText.startsWith("\\u")) -->Line_22 $$ holder.createErrorAnnotation(fragmentRange.shiftRight(elementOffset), JsonBundle.message("syntax.error.illegal.escape.sequence"))[ CD ]
Line_16 $$ final String fragmentText = fragment.getSecond()-->Line_19 $$ if (fragmentText.startsWith("\\u")) [ FD ]
Line_2 $$ public void annotate(@NotNull PsiElement element, @NotNull AnnotationHolder holder) -->Line_22 $$ holder.createErrorAnnotation(fragmentRange.shiftRight(elementOffset), JsonBundle.message("syntax.error.illegal.escape.sequence"))[ FD ]
Line_3 $$ final String text = JsonPsiUtil.getElementTextWithoutHostEscaping(element)-->Line_10 $$ final int length = text.length()[ FD ]
Line_2 $$ public void annotate(@NotNull PsiElement element, @NotNull AnnotationHolder holder) -->Line_6 $$ final int elementOffset = element.getTextOffset()[ FD ]
Line_4 $$ if (element instanceof JsonStringLiteral) -->Line_14 $$ final List<Pair<TextRange, String>> fragments = stringLiteral.getTextFragments()[ CD ]
Line_4 $$ if (element instanceof JsonStringLiteral) -->Line_10 $$ final int length = text.length()[ CD ]
Line_11 $$ if (length <= 1 || text.charAt(0) != text.charAt(length - 1) || JsonPsiUtil.isEscapedChar(text, length - 1)) -->Line_12 $$ holder.createErrorAnnotation(element, JsonBundle.message("syntax.error.missing.closing.quote"))[ CD ]
Line_2 $$ public void annotate(@NotNull PsiElement element, @NotNull AnnotationHolder holder) -->Line_7 $$ if (JsonPsiUtil.isPropertyKey(element)) [ FD ]
Line_27 $$ if (!VALID_NUMBER_LITERAL.matcher(text).matches()) -->Line_28 $$ holder.createErrorAnnotation(element, JsonBundle.message("syntax.error.illegal.floating.point.literal"))[ CD ]
