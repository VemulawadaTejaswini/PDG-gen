Line_15 $$ final String searchSegmentName = template.getSegmentName(j)-->Line_18 $$ if (replacementSegmentName.startsWith(searchSegmentName) && replacementSegmentName.charAt(searchSegmentName.length()) == '_') [ FD ]
Line_11 $$ final String replacementSegmentName = template2.getSegmentName(i)-->Line_30 $$ throw new UnsupportedPatternException(SSRBundle.message("replacement.variable.is.not.defined.message", replacementSegmentName))[ FD ]
Line_2 $$ public static void checkSupportedReplacementPattern(Project project, ReplaceOptions options) throws UnsupportedPatternException -->Line_27 $$ ReplacementVariableDefinition definition = options.getVariableDefinition(replacementSegmentName)[ FD ]
Line_9 $$ int segmentCount = template2.getSegmentsCount()-->Line_10 $$ for (int i = 0; i < segmentCount; ++i) [ FD ]
Line_10 $$ for (int i = 0; i < segmentCount; ++i) -->Line_11 $$ final String replacementSegmentName = template2.getSegmentName(i)[ FD ]
Line_11 $$ final String replacementSegmentName = template2.getSegmentName(i)-->Line_16 $$ if (replacementSegmentName.equals(searchSegmentName))[ FD ]
Line_14 $$ for (j = 0; j < segmentCount2; ++j) -->Line_18 $$ if (replacementSegmentName.startsWith(searchSegmentName) && replacementSegmentName.charAt(searchSegmentName.length()) == '_') [ CD ]
Line_7 $$ Template template = TemplateManager.getInstance(project).createTemplate("", "", search)-->Line_15 $$ final String searchSegmentName = template.getSegmentName(j)[ FD ]
Line_10 $$ for (int i = 0; i < segmentCount; ++i) -->Line_12 $$ final int segmentCount2 = template.getSegmentsCount()[ CD ]
Line_2 $$ public static void checkSupportedReplacementPattern(Project project, ReplaceOptions options) throws UnsupportedPatternException -->Line_6 $$ FileType fileType = options.getMatchOptions().getFileType()[ FD ]
Line_2 $$ public static void checkSupportedReplacementPattern(Project project, ReplaceOptions options) throws UnsupportedPatternException -->Line_5 $$ String replacement = options.getReplacement()[ FD ]
Line_2 $$ public static void checkSupportedReplacementPattern(Project project, ReplaceOptions options) throws UnsupportedPatternException -->Line_7 $$ Template template = TemplateManager.getInstance(project).createTemplate("", "", search)[ FD ]
Line_15 $$ final String searchSegmentName = template.getSegmentName(j)-->Line_20 $$ Integer.parseInt(replacementSegmentName.substring(searchSegmentName.length() + 1))[ FD ]
Line_5 $$ String replacement = options.getReplacement()-->Line_8 $$ Template template2 = TemplateManager.getInstance(project).createTemplate("", "", replacement)[ FD ]
Line_11 $$ final String replacementSegmentName = template2.getSegmentName(i)-->Line_27 $$ ReplacementVariableDefinition definition = options.getVariableDefinition(replacementSegmentName)[ FD ]
Line_14 $$ for (j = 0; j < segmentCount2; ++j) -->Line_15 $$ final String searchSegmentName = template.getSegmentName(j)[ FD ]
Line_2 $$ public static void checkSupportedReplacementPattern(Project project, ReplaceOptions options) throws UnsupportedPatternException -->Line_4 $$ String search = options.getMatchOptions().getSearchPattern()[ FD ]
Line_14 $$ for (j = 0; j < segmentCount2; ++j) -->Line_16 $$ if (replacementSegmentName.equals(searchSegmentName))[ CD ]
Line_28 $$ if (definition == null || definition.getScriptCodeConstraint().length() <= 2) -->Line_33 $$ if (message != null) [ CD ]
Line_11 $$ final String replacementSegmentName = template2.getSegmentName(i)-->Line_18 $$ if (replacementSegmentName.startsWith(searchSegmentName) && replacementSegmentName.charAt(searchSegmentName.length()) == '_') [ FD ]
Line_12 $$ final int segmentCount2 = template.getSegmentsCount()-->Line_14 $$ for (j = 0; j < segmentCount2; ++j) [ FD ]
Line_39 $$ StructuralSearchProfile profile = StructuralSearchUtil.getProfileByFileType(fileType)-->Line_41 $$ profile.checkReplacementPattern(project, options)[ FD ]
Line_11 $$ final String replacementSegmentName = template2.getSegmentName(i)-->Line_34 $$ throw new UnsupportedPatternException(SSRBundle.message("replacement.variable.is.not.valid", replacementSegmentName, message))[ FD ]
Line_12 $$ final int segmentCount2 = template.getSegmentsCount()-->Line_26 $$ if (j == segmentCount2) [ FD ]
Line_2 $$ public static void checkSupportedReplacementPattern(Project project, ReplaceOptions options) throws UnsupportedPatternException -->Line_8 $$ Template template2 = TemplateManager.getInstance(project).createTemplate("", "", replacement)[ FD ]
Line_13 $$ int j-->Line_26 $$ if (j == segmentCount2) [ FD ]
Line_13 $$ int j-->Line_15 $$ final String searchSegmentName = template.getSegmentName(j)[ FD ]
Line_6 $$ FileType fileType = options.getMatchOptions().getFileType()-->Line_39 $$ StructuralSearchProfile profile = StructuralSearchUtil.getProfileByFileType(fileType)[ FD ]
Line_14 $$ for (j = 0; j < segmentCount2; ++j) -->Line_26 $$ if (j == segmentCount2) [ FD ]
Line_10 $$ for (int i = 0; i < segmentCount; ++i) -->Line_11 $$ final String replacementSegmentName = template2.getSegmentName(i)[ CD ]
Line_10 $$ for (int i = 0; i < segmentCount; ++i) -->Line_14 $$ for (j = 0; j < segmentCount2; ++j) [ CD ]
Line_14 $$ for (j = 0; j < segmentCount2; ++j) -->Line_15 $$ final String searchSegmentName = template.getSegmentName(j)[ CD ]
Line_7 $$ Template template = TemplateManager.getInstance(project).createTemplate("", "", search)-->Line_12 $$ final int segmentCount2 = template.getSegmentsCount()[ FD ]
Line_28 $$ if (definition == null || definition.getScriptCodeConstraint().length() <= 2) -->Line_32 $$ String message = ScriptSupport.checkValidScript(StringUtil.stripQuotesAroundValue(definition.getScriptCodeConstraint()))[ CD ]
Line_2 $$ public static void checkSupportedReplacementPattern(Project project, ReplaceOptions options) throws UnsupportedPatternException -->Line_41 $$ profile.checkReplacementPattern(project, options)[ FD ]
Line_26 $$ if (j == segmentCount2) -->Line_27 $$ ReplacementVariableDefinition definition = options.getVariableDefinition(replacementSegmentName)[ CD ]
Line_8 $$ Template template2 = TemplateManager.getInstance(project).createTemplate("", "", replacement)-->Line_11 $$ final String replacementSegmentName = template2.getSegmentName(i)[ FD ]
Line_10 $$ for (int i = 0; i < segmentCount; ++i) -->Line_26 $$ if (j == segmentCount2) [ CD ]
Line_26 $$ if (j == segmentCount2) -->Line_28 $$ if (definition == null || definition.getScriptCodeConstraint().length() <= 2) [ CD ]
Line_15 $$ final String searchSegmentName = template.getSegmentName(j)-->Line_16 $$ if (replacementSegmentName.equals(searchSegmentName))[ FD ]
Line_8 $$ Template template2 = TemplateManager.getInstance(project).createTemplate("", "", replacement)-->Line_9 $$ int segmentCount = template2.getSegmentsCount()[ FD ]
Line_10 $$ for (int i = 0; i < segmentCount; ++i) -->Line_13 $$ int j[ CD ]
Line_13 $$ int j-->Line_14 $$ for (j = 0; j < segmentCount2; ++j) [ FD ]
Line_4 $$ String search = options.getMatchOptions().getSearchPattern()-->Line_7 $$ Template template = TemplateManager.getInstance(project).createTemplate("", "", search)[ FD ]
Line_11 $$ final String replacementSegmentName = template2.getSegmentName(i)-->Line_20 $$ Integer.parseInt(replacementSegmentName.substring(searchSegmentName.length() + 1))[ FD ]
