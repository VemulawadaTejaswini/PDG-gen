Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_13 $$ cf.loadTarget(mv)[ FD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_10 $$ String descriptor = cf.lastDescriptor()[ FD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_31 $$ cf.pushDescriptor(this.exitTypeDescriptor)[ CD ]
Line_24 $$ if (!isStaticMethod) -->Line_25 $$ if (descriptor == null || !descriptor.substring(1).equals(classDesc)) [ CD ]
Line_8 $$ Method method = methodExecutor.getMethod()-->Line_29 $$ generateCodeForArguments(mv, cf, method, this.children)[ FD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_20 $$ if (CodeFlow.isPrimitive(descriptor)) [ CD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_3 $$ CachedMethodExecutor executorToCheck = this.cachedExecutor[ CD ]
Line_10 $$ String descriptor = cf.lastDescriptor()-->Line_11 $$ if (descriptor == null) [ FD ]
Line_8 $$ Method method = methodExecutor.getMethod()-->Line_9 $$ boolean isStaticMethod = Modifier.isStatic(method.getModifiers())[ FD ]
Line_3 $$ CachedMethodExecutor executorToCheck = this.cachedExecutor-->Line_7 $$ ReflectiveMethodExecutor methodExecutor = (ReflectiveMethodExecutor) executorToCheck.get()[ FD ]
Line_12 $$ if (!isStaticMethod) -->Line_13 $$ cf.loadTarget(mv)[ CD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_30 $$ mv.visitMethodInsn((isStaticMethod ? INVOKESTATIC : INVOKEVIRTUAL), classDesc, method.getName(), CodeFlow.createSignatureDescriptor(method), method.getDeclaringClass().isInterface())[ CD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_26 $$ CodeFlow.insertCheckCast(mv, "L" + classDesc)[ FD ]
Line_8 $$ Method method = methodExecutor.getMethod()-->Line_23 $$ String classDesc = (Modifier.isPublic(method.getDeclaringClass().getModifiers()) ? method.getDeclaringClass().getName().replace('.', '/') : methodExecutor.getPublicDeclaringClass().getName().replace('.', '/'))[ FD ]
Line_9 $$ boolean isStaticMethod = Modifier.isStatic(method.getModifiers())-->Line_12 $$ if (!isStaticMethod) [ FD ]
Line_7 $$ ReflectiveMethodExecutor methodExecutor = (ReflectiveMethodExecutor) executorToCheck.get()-->Line_23 $$ String classDesc = (Modifier.isPublic(method.getDeclaringClass().getModifiers()) ? method.getDeclaringClass().getName().replace('.', '/') : methodExecutor.getPublicDeclaringClass().getName().replace('.', '/'))[ FD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_29 $$ generateCodeForArguments(mv, cf, method, this.children)[ FD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_8 $$ Method method = methodExecutor.getMethod()[ CD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_31 $$ cf.pushDescriptor(this.exitTypeDescriptor)[ FD ]
Line_10 $$ String descriptor = cf.lastDescriptor()-->Line_20 $$ if (CodeFlow.isPrimitive(descriptor)) [ FD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_24 $$ if (!isStaticMethod) [ CD ]
Line_10 $$ String descriptor = cf.lastDescriptor()-->Line_25 $$ if (descriptor == null || !descriptor.substring(1).equals(classDesc)) [ FD ]
Line_7 $$ ReflectiveMethodExecutor methodExecutor = (ReflectiveMethodExecutor) executorToCheck.get()-->Line_8 $$ Method method = methodExecutor.getMethod()[ FD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_30 $$ mv.visitMethodInsn((isStaticMethod ? INVOKESTATIC : INVOKEVIRTUAL), classDesc, method.getName(), CodeFlow.createSignatureDescriptor(method), method.getDeclaringClass().isInterface())[ FD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_23 $$ String classDesc = (Modifier.isPublic(method.getDeclaringClass().getModifiers()) ? method.getDeclaringClass().getName().replace('.', '/') : methodExecutor.getPublicDeclaringClass().getName().replace('.', '/'))[ CD ]
Line_25 $$ if (descriptor == null || !descriptor.substring(1).equals(classDesc)) -->Line_26 $$ CodeFlow.insertCheckCast(mv, "L" + classDesc)[ CD ]
Line_11 $$ if (descriptor == null) -->Line_12 $$ if (!isStaticMethod) [ CD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_21 $$ CodeFlow.insertBoxIfNecessary(mv, descriptor.charAt(0))[ FD ]
Line_3 $$ CachedMethodExecutor executorToCheck = this.cachedExecutor-->Line_4 $$ if (executorToCheck == null || !(executorToCheck.get() instanceof ReflectiveMethodExecutor)) [ FD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_4 $$ if (executorToCheck == null || !(executorToCheck.get() instanceof ReflectiveMethodExecutor)) [ CD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_17 $$ mv.visitInsn(POP)[ FD ]
Line_23 $$ String classDesc = (Modifier.isPublic(method.getDeclaringClass().getModifiers()) ? method.getDeclaringClass().getName().replace('.', '/') : methodExecutor.getPublicDeclaringClass().getName().replace('.', '/'))-->Line_30 $$ mv.visitMethodInsn((isStaticMethod ? INVOKESTATIC : INVOKEVIRTUAL), classDesc, method.getName(), CodeFlow.createSignatureDescriptor(method), method.getDeclaringClass().isInterface())[ FD ]
Line_23 $$ String classDesc = (Modifier.isPublic(method.getDeclaringClass().getModifiers()) ? method.getDeclaringClass().getName().replace('.', '/') : methodExecutor.getPublicDeclaringClass().getName().replace('.', '/'))-->Line_25 $$ if (descriptor == null || !descriptor.substring(1).equals(classDesc)) [ FD ]
Line_8 $$ Method method = methodExecutor.getMethod()-->Line_30 $$ mv.visitMethodInsn((isStaticMethod ? INVOKESTATIC : INVOKEVIRTUAL), classDesc, method.getName(), CodeFlow.createSignatureDescriptor(method), method.getDeclaringClass().isInterface())[ FD ]
Line_20 $$ if (CodeFlow.isPrimitive(descriptor)) -->Line_21 $$ CodeFlow.insertBoxIfNecessary(mv, descriptor.charAt(0))[ CD ]
Line_10 $$ String descriptor = cf.lastDescriptor()-->Line_21 $$ CodeFlow.insertBoxIfNecessary(mv, descriptor.charAt(0))[ FD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_11 $$ if (descriptor == null) [ CD ]
Line_9 $$ boolean isStaticMethod = Modifier.isStatic(method.getModifiers())-->Line_24 $$ if (!isStaticMethod) [ FD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_9 $$ boolean isStaticMethod = Modifier.isStatic(method.getModifiers())[ CD ]
Line_16 $$ if (isStaticMethod) -->Line_17 $$ mv.visitInsn(POP)[ CD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_10 $$ String descriptor = cf.lastDescriptor()[ CD ]
Line_11 $$ if (descriptor == null) -->Line_16 $$ if (isStaticMethod) [ CD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_29 $$ generateCodeForArguments(mv, cf, method, this.children)[ CD ]
Line_2 $$ public void generateCode(MethodVisitor mv, CodeFlow cf) -->Line_7 $$ ReflectiveMethodExecutor methodExecutor = (ReflectiveMethodExecutor) executorToCheck.get()[ CD ]
