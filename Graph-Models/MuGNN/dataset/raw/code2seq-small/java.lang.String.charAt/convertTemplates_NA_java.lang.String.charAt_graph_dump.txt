Line_3 $$ Matcher matcher = pattern.matcher(input)-->Line_9 $$ i = matcher.end(1)[ FD ]
Line_9 $$ i = matcher.end(1)-->Line_11 $$ char c = input.charAt(i)[ FD ]
Line_9 $$ i = matcher.end(1)-->Line_6 $$ for (int i = 0; i < input.length(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < input.length(); i++) -->Line_11 $$ char c = input.charAt(i)[ CD ]
Line_2 $$ public static String convertTemplates(String input, Pattern pattern, String template) -->Line_4 $$ int start = matcher.matches() ? matcher.start(1) : -1[ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder(input.length() + 10)-->Line_15 $$ builder.append(c)[ FD ]
Line_6 $$ for (int i = 0; i < input.length(); i++) -->Line_11 $$ char c = input.charAt(i)[ FD ]
Line_2 $$ public static String convertTemplates(String input, Pattern pattern, String template) -->Line_11 $$ char c = input.charAt(i)[ FD ]
Line_2 $$ public static String convertTemplates(String input, Pattern pattern, String template) -->Line_17 $$ return builder.toString()[ CD ]
Line_6 $$ for (int i = 0; i < input.length(); i++) -->Line_7 $$ if (start == i) [ CD ]
Line_7 $$ if (start == i) -->Line_9 $$ i = matcher.end(1)[ CD ]
Line_6 $$ for (int i = 0; i < input.length(); i++) -->Line_7 $$ if (start == i) [ FD ]
Line_2 $$ public static String convertTemplates(String input, Pattern pattern, String template) -->Line_3 $$ Matcher matcher = pattern.matcher(input)[ FD ]
Line_7 $$ if (start == i) -->Line_8 $$ builder.append(template)[ CD ]
Line_3 $$ Matcher matcher = pattern.matcher(input)-->Line_4 $$ int start = matcher.matches() ? matcher.start(1) : -1[ FD ]
Line_2 $$ public static String convertTemplates(String input, Pattern pattern, String template) -->Line_5 $$ StringBuilder builder = new StringBuilder(input.length() + 10)[ FD ]
Line_2 $$ public static String convertTemplates(String input, Pattern pattern, String template) -->Line_3 $$ Matcher matcher = pattern.matcher(input)[ CD ]
Line_6 $$ for (int i = 0; i < input.length(); i++) -->Line_12 $$ if (c == '$' || c == '#') [ CD ]
Line_11 $$ char c = input.charAt(i)-->Line_15 $$ builder.append(c)[ FD ]
Line_12 $$ if (c == '$' || c == '#') -->Line_13 $$ builder.append('\\')[ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder(input.length() + 10)-->Line_8 $$ builder.append(template)[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder(input.length() + 10)-->Line_17 $$ return builder.toString()[ FD ]
Line_9 $$ i = matcher.end(1)-->Line_7 $$ if (start == i) [ FD ]
Line_2 $$ public static String convertTemplates(String input, Pattern pattern, String template) -->Line_8 $$ builder.append(template)[ FD ]
Line_6 $$ for (int i = 0; i < input.length(); i++) -->Line_9 $$ i = matcher.end(1)[ FD ]
Line_6 $$ for (int i = 0; i < input.length(); i++) -->Line_15 $$ builder.append(c)[ CD ]
Line_2 $$ public static String convertTemplates(String input, Pattern pattern, String template) -->Line_6 $$ for (int i = 0; i < input.length(); i++) [ FD ]
Line_2 $$ public static String convertTemplates(String input, Pattern pattern, String template) -->Line_5 $$ StringBuilder builder = new StringBuilder(input.length() + 10)[ CD ]
Line_2 $$ public static String convertTemplates(String input, Pattern pattern, String template) -->Line_6 $$ for (int i = 0; i < input.length(); i++) [ CD ]
Line_4 $$ int start = matcher.matches() ? matcher.start(1) : -1-->Line_7 $$ if (start == i) [ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder(input.length() + 10)-->Line_13 $$ builder.append('\\')[ FD ]
