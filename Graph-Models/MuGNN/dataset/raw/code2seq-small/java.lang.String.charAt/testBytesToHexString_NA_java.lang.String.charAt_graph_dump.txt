Line_2 $$ public void testBytesToHexString() -->Line_7 $$ Assert.assertEquals(data.length * 2, hexString.length())[ CD ]
Line_6 $$ String hexString = StringUtil.bytesToHexString(data)-->Line_9 $$ Assert.assertEquals(hexString.charAt(i * 2), StringUtil.HEX_DIGITS[(data[i] & 0xFF) >> 4])[ FD ]
Line_4 $$ byte[] data = new byte[1024]-->Line_5 $$ random.nextBytes(data)[ FD ]
Line_3 $$ Random random = new Random()-->Line_5 $$ random.nextBytes(data)[ FD ]
Line_6 $$ String hexString = StringUtil.bytesToHexString(data)-->Line_7 $$ Assert.assertEquals(data.length * 2, hexString.length())[ FD ]
Line_2 $$ public void testBytesToHexString() -->Line_8 $$ for (int i = 0; i < data.length; i++) [ CD ]
Line_2 $$ public void testBytesToHexString() -->Line_5 $$ random.nextBytes(data)[ CD ]
Line_4 $$ byte[] data = new byte[1024]-->Line_6 $$ String hexString = StringUtil.bytesToHexString(data)[ FD ]
Line_8 $$ for (int i = 0; i < data.length; i++) -->Line_9 $$ Assert.assertEquals(hexString.charAt(i * 2), StringUtil.HEX_DIGITS[(data[i] & 0xFF) >> 4])[ CD ]
Line_8 $$ for (int i = 0; i < data.length; i++) -->Line_10 $$ Assert.assertEquals(hexString.charAt(i * 2 + 1), StringUtil.HEX_DIGITS[data[i] & 0x0F])[ CD ]
Line_2 $$ public void testBytesToHexString() -->Line_6 $$ String hexString = StringUtil.bytesToHexString(data)[ CD ]
Line_2 $$ public void testBytesToHexString() -->Line_4 $$ byte[] data = new byte[1024][ CD ]
Line_2 $$ public void testBytesToHexString() -->Line_3 $$ Random random = new Random()[ CD ]
Line_6 $$ String hexString = StringUtil.bytesToHexString(data)-->Line_10 $$ Assert.assertEquals(hexString.charAt(i * 2 + 1), StringUtil.HEX_DIGITS[data[i] & 0x0F])[ FD ]
