Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_6 $$ unformattedOutput.add(formatted)[ FD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_31 $$ formattedOutput.add(result)[ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_11 $$ final String[] lines = removeCommonIndentation(docstring)[ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_13 $$ final int tabSize = CodeStyleSettingsManager.getSettings(project).getTabSize(PythonFileType.INSTANCE)[ CD ]
Line_14 $$ for (String line : lines) -->Line_15 $$ if (isFirstLine && ourSpacesPattern.matcher(line).matches())[ FD ]
Line_22 $$ int leadingTabs = 0-->Line_23 $$ while (leadingTabs < line.length() && line.charAt(leadingTabs) == '\t') [ FD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_4 $$ final List<String> formatted = PyStructuredDocstringFormatter.formatDocstring(element, docstring)[ FD ]
Line_23 $$ while (leadingTabs < line.length() && line.charAt(leadingTabs) == '\t') -->Line_24 $$ leadingTabs++[ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_10 $$ final List<String> result = new ArrayList<String>()[ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_3 $$ final Project project = element.getProject()[ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_5 $$ if (formatted != null) [ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_31 $$ formattedOutput.add(result)[ FD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_9 $$ boolean isFirstLine[ CD ]
Line_12 $$ isFirstLine = true-->Line_18 $$ isFirstLine = false[ FD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_11 $$ final String[] lines = removeCommonIndentation(docstring)[ FD ]
Line_5 $$ if (formatted != null) -->Line_7 $$ return[ CD ]
Line_9 $$ boolean isFirstLine-->Line_15 $$ if (isFirstLine && ourSpacesPattern.matcher(line).matches())[ FD ]
Line_10 $$ final List<String> result = new ArrayList<String>()-->Line_31 $$ formattedOutput.add(result)[ FD ]
Line_5 $$ if (formatted != null) -->Line_6 $$ unformattedOutput.add(formatted)[ CD ]
Line_22 $$ int leadingTabs = 0-->Line_26 $$ if (leadingTabs > 0) [ FD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_3 $$ final Project project = element.getProject()[ FD ]
Line_14 $$ for (String line : lines) -->Line_27 $$ line = StringUtil.repeatSymbol(' ', tabSize * leadingTabs) + line.substring(leadingTabs)[ FD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_12 $$ isFirstLine = true[ CD ]
Line_9 $$ boolean isFirstLine-->Line_12 $$ isFirstLine = true[ FD ]
Line_14 $$ for (String line : lines) -->Line_23 $$ while (leadingTabs < line.length() && line.charAt(leadingTabs) == '\t') [ FD ]
Line_22 $$ int leadingTabs = 0-->Line_24 $$ leadingTabs++[ FD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_4 $$ final List<String> formatted = PyStructuredDocstringFormatter.formatDocstring(element, docstring)[ CD ]
Line_9 $$ boolean isFirstLine-->Line_18 $$ isFirstLine = false[ FD ]
Line_10 $$ final List<String> result = new ArrayList<String>()-->Line_29 $$ result.add(combUp(line))[ FD ]
Line_17 $$ if (isFirstLine) -->Line_20 $$ result.add(BR)[ CD ]
Line_4 $$ final List<String> formatted = PyStructuredDocstringFormatter.formatDocstring(element, docstring)-->Line_6 $$ unformattedOutput.add(formatted)[ FD ]
Line_26 $$ if (leadingTabs > 0) -->Line_27 $$ line = StringUtil.repeatSymbol(' ', tabSize * leadingTabs) + line.substring(leadingTabs)[ CD ]
Line_22 $$ int leadingTabs = 0-->Line_27 $$ line = StringUtil.repeatSymbol(' ', tabSize * leadingTabs) + line.substring(leadingTabs)[ FD ]
Line_14 $$ for (String line : lines) -->Line_29 $$ result.add(combUp(line))[ FD ]
Line_12 $$ isFirstLine = true-->Line_15 $$ if (isFirstLine && ourSpacesPattern.matcher(line).matches())[ FD ]
Line_27 $$ line = StringUtil.repeatSymbol(' ', tabSize * leadingTabs) + line.substring(leadingTabs)-->Line_29 $$ result.add(combUp(line))[ FD ]
Line_10 $$ final List<String> result = new ArrayList<String>()-->Line_20 $$ result.add(BR)[ FD ]
Line_4 $$ final List<String> formatted = PyStructuredDocstringFormatter.formatDocstring(element, docstring)-->Line_5 $$ if (formatted != null) [ FD ]
Line_17 $$ if (isFirstLine) -->Line_18 $$ isFirstLine = false[ CD ]
Line_3 $$ final Project project = element.getProject()-->Line_13 $$ final int tabSize = CodeStyleSettingsManager.getSettings(project).getTabSize(PythonFileType.INSTANCE)[ FD ]
