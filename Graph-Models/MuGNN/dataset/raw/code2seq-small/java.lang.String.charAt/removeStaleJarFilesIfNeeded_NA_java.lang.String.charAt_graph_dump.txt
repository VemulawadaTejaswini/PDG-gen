Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_4 $$ long lastModified = versionFile.lastModified()[ CD ]
Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() -->Line_10 $$ int lastDotPosition = name.lastIndexOf('.')[ CD ]
Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() -->Line_20 $$ if (Character.digit(extension.charAt(i), 16) == -1)[ FD ]
Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() -->Line_11 $$ if (lastDotPosition == -1)[ CD ]
Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() -->Line_16 $$ return true[ CD ]
Line_13 $$ String extension = name.substring(lastDotPosition + 1)-->Line_14 $$ if (extension.length() != 40 || !consistsOfHexLetters(extension))[ FD ]
Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() -->Line_49 $$ availableLibrarySnapshots.remove(e.getKey())[ FD ]
Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() -->Line_13 $$ String extension = name.substring(lastDotPosition + 1)[ FD ]
Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() -->Line_13 $$ String extension = name.substring(lastDotPosition + 1)[ CD ]
Line_19 $$ for (int i = 0; i < extension.length(); ++i) -->Line_20 $$ if (Character.digit(extension.charAt(i), 16) == -1)[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_55 $$ File librarySnapshotFileToDelete = new File(snapshotInfoFile.getParentFile(), availableLibrarySnapshot)[ FD ]
Line_19 $$ for (int i = 0; i < extension.length(); ++i) -->Line_20 $$ if (Character.digit(extension.charAt(i), 16) == -1)[ FD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_30 $$ info.processKeys(new CommonProcessors.CollectProcessor<String>(allLibraryFilePaths))[ FD ]
Line_5 $$ if ((System.currentTimeMillis() - lastModified) < 30 * 24 * 60 * 60 * 1000L) -->Line_6 $$ return[ CD ]
Line_3 $$ File versionFile = getVersionFile(snapshotInfoFile)-->Line_4 $$ long lastModified = versionFile.lastModified()[ FD ]
Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() -->Line_14 $$ if (extension.length() != 40 || !consistsOfHexLetters(extension))[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_30 $$ info.processKeys(new CommonProcessors.CollectProcessor<String>(allLibraryFilePaths))[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_3 $$ File versionFile = getVersionFile(snapshotInfoFile)[ FD ]
Line_36 $$ if (new File(filePath).exists()) -->Line_39 $$ invalidLibraryFilePaths.add(filePath)[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_59 $$ saveVersion(versionFile)[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_44 $$ info.remove(invalidLibraryFilePath)[ FD ]
Line_20 $$ if (Character.digit(extension.charAt(i), 16) == -1)-->Line_21 $$ return false[ CD ]
Line_13 $$ String extension = name.substring(lastDotPosition + 1)-->Line_20 $$ if (Character.digit(extension.charAt(i), 16) == -1)[ FD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_29 $$ Set<String> validLibraryFilePathToJarSnapshotFilePaths = ContainerUtil.newTroveSet()[ CD ]
Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() -->Line_19 $$ for (int i = 0; i < extension.length(); ++i) [ FD ]
Line_13 $$ String extension = name.substring(lastDotPosition + 1)-->Line_19 $$ for (int i = 0; i < extension.length(); ++i) [ FD ]
Line_10 $$ int lastDotPosition = name.lastIndexOf('.')-->Line_11 $$ if (lastDotPosition == -1)[ FD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_27 $$ final List<String> allLibraryFilePaths = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_26 $$ final List<String> invalidLibraryFilePaths = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_3 $$ File versionFile = getVersionFile(snapshotInfoFile)[ CD ]
Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() -->Line_19 $$ for (int i = 0; i < extension.length(); ++i) [ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() [ CD ]
Line_48 $$ if (validLibraryFilePathToJarSnapshotFilePaths.contains(libraryFilePath)) -->Line_49 $$ availableLibrarySnapshots.remove(e.getKey())[ CD ]
Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() -->Line_10 $$ int lastDotPosition = name.lastIndexOf('.')[ FD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_5 $$ if ((System.currentTimeMillis() - lastModified) < 30 * 24 * 60 * 60 * 1000L) [ CD ]
Line_3 $$ File versionFile = getVersionFile(snapshotInfoFile)-->Line_59 $$ saveVersion(versionFile)[ FD ]
Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() -->Line_23 $$ return true[ CD ]
Line_11 $$ if (lastDotPosition == -1)-->Line_12 $$ return false[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_8 $$ Set<String> availableLibrarySnapshots = new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter() [ FD ]
Line_36 $$ if (new File(filePath).exists()) -->Line_37 $$ validLibraryFilePathToJarSnapshotFilePaths.add(filePath)[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_32 $$ CacheLibraryInfo libraryInfo = info.get(filePath)[ FD ]
Line_14 $$ if (extension.length() != 40 || !consistsOfHexLetters(extension))-->Line_15 $$ return false[ CD ]
