Line_37 $$ for (int k = 0; k < docsAndPositions.freq(); k++) -->Line_43 $$ String infoString = "\nterm: " + term + " has no payload but should have payload \n" + curPayloads.get(k).toString()[ FD ]
Line_14 $$ String[] tokens = crateRandomTokens()-->Line_15 $$ Map<String, List<BytesRef>> payloads = createPayloads(tokens, encoding)[ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_48 $$ assertThat(iterator.next(), nullValue())[ CD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_23 $$ TermVectorsRequestBuilder resp = client().prepareTermVectors("test", "type1", Integer.toString(1)).setPayloads(true).setOffsets(true).setPositions(true).setSelectedFields()[ CD ]
Line_39 $$ if (docsAndPositions.getPayload() != null) -->Line_40 $$ String infoString = "\nterm: " + term + " has payload \n" + docsAndPositions.getPayload().toString() + "\n but should have payload \n" + curPayloads.get(k).toString()[ CD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_16 $$ String delimiter = createRandomDelimiter(tokens)[ CD ]
Line_16 $$ String delimiter = createRandomDelimiter(tokens)-->Line_17 $$ String queryString = createString(tokens, payloads, encoding, delimiter.charAt(0))[ FD ]
Line_6 $$ encodingString = "float"-->Line_19 $$ assertAcked(prepareCreate("test").addMapping("type1", mapping).setSettings(settingsBuilder().put(indexSettings()).put("index.analysis.analyzer.payload_test.tokenizer", "whitespace").putArray("index.analysis.analyzer.payload_test.filter", "my_delimited_payload_filter").put("index.analysis.filter.my_delimited_payload_filter.delimiter", delimiter).put("index.analysis.filter.my_delimited_payload_filter.encoding", encodingString).put("index.analysis.filter.my_delimited_payload_filter.type", "delimited_payload_filter")))[ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_25 $$ assertThat("doc id 1 doesn't exists but should", response.isExists(), equalTo(true))[ CD ]
Line_34 $$ List<BytesRef> curPayloads = payloads.get(term)-->Line_44 $$ assertThat(infoString, curPayloads.get(k).length, equalTo(0))[ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_11 $$ if (encoding == 2) [ CD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_17 $$ String queryString = createString(tokens, payloads, encoding, delimiter.charAt(0))[ CD ]
Line_9 $$ encodingString = "int"-->Line_19 $$ assertAcked(prepareCreate("test").addMapping("type1", mapping).setSettings(settingsBuilder().put(indexSettings()).put("index.analysis.analyzer.payload_test.tokenizer", "whitespace").putArray("index.analysis.analyzer.payload_test.filter", "my_delimited_payload_filter").put("index.analysis.filter.my_delimited_payload_filter.delimiter", delimiter).put("index.analysis.filter.my_delimited_payload_filter.encoding", encodingString).put("index.analysis.filter.my_delimited_payload_filter.type", "delimited_payload_filter")))[ FD ]
Line_37 $$ for (int k = 0; k < docsAndPositions.freq(); k++) -->Line_38 $$ docsAndPositions.nextPosition()[ CD ]
Line_29 $$ TermsEnum iterator = terms.iterator()-->Line_32 $$ PostingsEnum docsAndPositions = iterator.postings(null, PostingsEnum.ALL)[ FD ]
Line_30 $$ while (iterator.next() != null) -->Line_35 $$ assertThat(term, curPayloads, notNullValue())[ CD ]
Line_30 $$ while (iterator.next() != null) -->Line_37 $$ for (int k = 0; k < docsAndPositions.freq(); k++) [ CD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_19 $$ assertAcked(prepareCreate("test").addMapping("type1", mapping).setSettings(settingsBuilder().put(indexSettings()).put("index.analysis.analyzer.payload_test.tokenizer", "whitespace").putArray("index.analysis.analyzer.payload_test.filter", "my_delimited_payload_filter").put("index.analysis.filter.my_delimited_payload_filter.delimiter", delimiter).put("index.analysis.filter.my_delimited_payload_filter.encoding", encodingString).put("index.analysis.filter.my_delimited_payload_filter.type", "delimited_payload_filter")))[ CD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_20 $$ ensureYellow()[ CD ]
Line_30 $$ while (iterator.next() != null) -->Line_31 $$ String term = iterator.term().utf8ToString()[ CD ]
Line_39 $$ if (docsAndPositions.getPayload() != null) -->Line_41 $$ assertThat(infoString, docsAndPositions.getPayload(), equalTo(curPayloads.get(k)))[ CD ]
Line_3 $$ int encoding = randomIntBetween(0, 2)-->Line_5 $$ if (encoding == 0) [ FD ]
Line_32 $$ PostingsEnum docsAndPositions = iterator.postings(null, PostingsEnum.ALL)-->Line_37 $$ for (int k = 0; k < docsAndPositions.freq(); k++) [ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_22 $$ refresh()[ CD ]
Line_30 $$ while (iterator.next() != null) -->Line_36 $$ assertNotNull(docsAndPositions)[ CD ]
Line_3 $$ int encoding = randomIntBetween(0, 2)-->Line_17 $$ String queryString = createString(tokens, payloads, encoding, delimiter.charAt(0))[ FD ]
Line_4 $$ String encodingString = ""-->Line_12 $$ encodingString = "identity"[ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_3 $$ int encoding = randomIntBetween(0, 2)[ CD ]
Line_6 $$ encodingString = "float"-->Line_12 $$ encodingString = "identity"[ FD ]
Line_37 $$ for (int k = 0; k < docsAndPositions.freq(); k++) -->Line_41 $$ assertThat(infoString, docsAndPositions.getPayload(), equalTo(curPayloads.get(k)))[ FD ]
Line_4 $$ String encodingString = ""-->Line_9 $$ encodingString = "int"[ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_27 $$ assertThat(fields.size(), equalTo(1))[ CD ]
Line_32 $$ PostingsEnum docsAndPositions = iterator.postings(null, PostingsEnum.ALL)-->Line_41 $$ assertThat(infoString, docsAndPositions.getPayload(), equalTo(curPayloads.get(k)))[ FD ]
Line_37 $$ for (int k = 0; k < docsAndPositions.freq(); k++) -->Line_40 $$ String infoString = "\nterm: " + term + " has payload \n" + docsAndPositions.getPayload().toString() + "\n but should have payload \n" + curPayloads.get(k).toString()[ FD ]
Line_5 $$ if (encoding == 0) -->Line_6 $$ encodingString = "float"[ CD ]
Line_8 $$ if (encoding == 1) -->Line_9 $$ encodingString = "int"[ CD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_8 $$ if (encoding == 1) [ CD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_30 $$ while (iterator.next() != null) [ CD ]
Line_37 $$ for (int k = 0; k < docsAndPositions.freq(); k++) -->Line_44 $$ assertThat(infoString, curPayloads.get(k).length, equalTo(0))[ FD ]
Line_29 $$ TermsEnum iterator = terms.iterator()-->Line_48 $$ assertThat(iterator.next(), nullValue())[ FD ]
Line_17 $$ String queryString = createString(tokens, payloads, encoding, delimiter.charAt(0))-->Line_21 $$ client().prepareIndex("test", "type1", Integer.toString(1)).setSource(jsonBuilder().startObject().field("field", queryString).endObject()).execute().actionGet()[ FD ]
Line_32 $$ PostingsEnum docsAndPositions = iterator.postings(null, PostingsEnum.ALL)-->Line_39 $$ if (docsAndPositions.getPayload() != null) [ FD ]
Line_34 $$ List<BytesRef> curPayloads = payloads.get(term)-->Line_41 $$ assertThat(infoString, docsAndPositions.getPayload(), equalTo(curPayloads.get(k)))[ FD ]
Line_11 $$ if (encoding == 2) -->Line_12 $$ encodingString = "identity"[ CD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_15 $$ Map<String, List<BytesRef>> payloads = createPayloads(tokens, encoding)[ CD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_4 $$ String encodingString = ""[ CD ]
Line_39 $$ if (docsAndPositions.getPayload() != null) -->Line_44 $$ assertThat(infoString, curPayloads.get(k).length, equalTo(0))[ CD ]
Line_26 $$ Fields fields = response.getFields()-->Line_28 $$ Terms terms = fields.terms("field")[ FD ]
Line_34 $$ List<BytesRef> curPayloads = payloads.get(term)-->Line_35 $$ assertThat(term, curPayloads, notNullValue())[ FD ]
Line_3 $$ int encoding = randomIntBetween(0, 2)-->Line_15 $$ Map<String, List<BytesRef>> payloads = createPayloads(tokens, encoding)[ FD ]
Line_4 $$ String encodingString = ""-->Line_6 $$ encodingString = "float"[ FD ]
Line_30 $$ while (iterator.next() != null) -->Line_32 $$ PostingsEnum docsAndPositions = iterator.postings(null, PostingsEnum.ALL)[ CD ]
Line_3 $$ int encoding = randomIntBetween(0, 2)-->Line_11 $$ if (encoding == 2) [ FD ]
Line_4 $$ String encodingString = ""-->Line_19 $$ assertAcked(prepareCreate("test").addMapping("type1", mapping).setSettings(settingsBuilder().put(indexSettings()).put("index.analysis.analyzer.payload_test.tokenizer", "whitespace").putArray("index.analysis.analyzer.payload_test.filter", "my_delimited_payload_filter").put("index.analysis.filter.my_delimited_payload_filter.delimiter", delimiter).put("index.analysis.filter.my_delimited_payload_filter.encoding", encodingString).put("index.analysis.filter.my_delimited_payload_filter.type", "delimited_payload_filter")))[ FD ]
Line_32 $$ PostingsEnum docsAndPositions = iterator.postings(null, PostingsEnum.ALL)-->Line_38 $$ docsAndPositions.nextPosition()[ FD ]
Line_24 $$ TermVectorsResponse response = resp.execute().actionGet()-->Line_26 $$ Fields fields = response.getFields()[ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_14 $$ String[] tokens = crateRandomTokens()[ CD ]
Line_29 $$ TermsEnum iterator = terms.iterator()-->Line_31 $$ String term = iterator.term().utf8ToString()[ FD ]
Line_32 $$ PostingsEnum docsAndPositions = iterator.postings(null, PostingsEnum.ALL)-->Line_36 $$ assertNotNull(docsAndPositions)[ FD ]
Line_9 $$ encodingString = "int"-->Line_12 $$ encodingString = "identity"[ FD ]
Line_16 $$ String delimiter = createRandomDelimiter(tokens)-->Line_19 $$ assertAcked(prepareCreate("test").addMapping("type1", mapping).setSettings(settingsBuilder().put(indexSettings()).put("index.analysis.analyzer.payload_test.tokenizer", "whitespace").putArray("index.analysis.analyzer.payload_test.filter", "my_delimited_payload_filter").put("index.analysis.filter.my_delimited_payload_filter.delimiter", delimiter).put("index.analysis.filter.my_delimited_payload_filter.encoding", encodingString).put("index.analysis.filter.my_delimited_payload_filter.type", "delimited_payload_filter")))[ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_24 $$ TermVectorsResponse response = resp.execute().actionGet()[ CD ]
Line_28 $$ Terms terms = fields.terms("field")-->Line_29 $$ TermsEnum iterator = terms.iterator()[ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_28 $$ Terms terms = fields.terms("field")[ CD ]
Line_30 $$ while (iterator.next() != null) -->Line_34 $$ List<BytesRef> curPayloads = payloads.get(term)[ CD ]
Line_15 $$ Map<String, List<BytesRef>> payloads = createPayloads(tokens, encoding)-->Line_17 $$ String queryString = createString(tokens, payloads, encoding, delimiter.charAt(0))[ FD ]
Line_32 $$ PostingsEnum docsAndPositions = iterator.postings(null, PostingsEnum.ALL)-->Line_33 $$ assertThat(docsAndPositions.nextDoc(), equalTo(0))[ FD ]
Line_34 $$ List<BytesRef> curPayloads = payloads.get(term)-->Line_43 $$ String infoString = "\nterm: " + term + " has no payload but should have payload \n" + curPayloads.get(k).toString()[ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_21 $$ client().prepareIndex("test", "type1", Integer.toString(1)).setSource(jsonBuilder().startObject().field("field", queryString).endObject()).execute().actionGet()[ CD ]
Line_31 $$ String term = iterator.term().utf8ToString()-->Line_35 $$ assertThat(term, curPayloads, notNullValue())[ FD ]
Line_14 $$ String[] tokens = crateRandomTokens()-->Line_16 $$ String delimiter = createRandomDelimiter(tokens)[ FD ]
Line_12 $$ encodingString = "identity"-->Line_19 $$ assertAcked(prepareCreate("test").addMapping("type1", mapping).setSettings(settingsBuilder().put(indexSettings()).put("index.analysis.analyzer.payload_test.tokenizer", "whitespace").putArray("index.analysis.analyzer.payload_test.filter", "my_delimited_payload_filter").put("index.analysis.filter.my_delimited_payload_filter.delimiter", delimiter).put("index.analysis.filter.my_delimited_payload_filter.encoding", encodingString).put("index.analysis.filter.my_delimited_payload_filter.type", "delimited_payload_filter")))[ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_5 $$ if (encoding == 0) [ CD ]
Line_31 $$ String term = iterator.term().utf8ToString()-->Line_34 $$ List<BytesRef> curPayloads = payloads.get(term)[ FD ]
Line_24 $$ TermVectorsResponse response = resp.execute().actionGet()-->Line_25 $$ assertThat("doc id 1 doesn't exists but should", response.isExists(), equalTo(true))[ FD ]
Line_14 $$ String[] tokens = crateRandomTokens()-->Line_17 $$ String queryString = createString(tokens, payloads, encoding, delimiter.charAt(0))[ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_26 $$ Fields fields = response.getFields()[ CD ]
Line_34 $$ List<BytesRef> curPayloads = payloads.get(term)-->Line_40 $$ String infoString = "\nterm: " + term + " has payload \n" + docsAndPositions.getPayload().toString() + "\n but should have payload \n" + curPayloads.get(k).toString()[ FD ]
Line_26 $$ Fields fields = response.getFields()-->Line_27 $$ assertThat(fields.size(), equalTo(1))[ FD ]
Line_40 $$ String infoString = "\nterm: " + term + " has payload \n" + docsAndPositions.getPayload().toString() + "\n but should have payload \n" + curPayloads.get(k).toString()-->Line_44 $$ assertThat(infoString, curPayloads.get(k).length, equalTo(0))[ FD ]
Line_15 $$ Map<String, List<BytesRef>> payloads = createPayloads(tokens, encoding)-->Line_34 $$ List<BytesRef> curPayloads = payloads.get(term)[ FD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_18 $$ XContentBuilder mapping = jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("field").field("type", "string").field("term_vector", "with_positions_offsets_payloads").field("analyzer", "payload_test").endObject().endObject().endObject().endObject()[ CD ]
Line_32 $$ PostingsEnum docsAndPositions = iterator.postings(null, PostingsEnum.ALL)-->Line_40 $$ String infoString = "\nterm: " + term + " has payload \n" + docsAndPositions.getPayload().toString() + "\n but should have payload \n" + curPayloads.get(k).toString()[ FD ]
Line_18 $$ XContentBuilder mapping = jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("field").field("type", "string").field("term_vector", "with_positions_offsets_payloads").field("analyzer", "payload_test").endObject().endObject().endObject().endObject()-->Line_19 $$ assertAcked(prepareCreate("test").addMapping("type1", mapping).setSettings(settingsBuilder().put(indexSettings()).put("index.analysis.analyzer.payload_test.tokenizer", "whitespace").putArray("index.analysis.analyzer.payload_test.filter", "my_delimited_payload_filter").put("index.analysis.filter.my_delimited_payload_filter.delimiter", delimiter).put("index.analysis.filter.my_delimited_payload_filter.encoding", encodingString).put("index.analysis.filter.my_delimited_payload_filter.type", "delimited_payload_filter")))[ FD ]
Line_30 $$ while (iterator.next() != null) -->Line_33 $$ assertThat(docsAndPositions.nextDoc(), equalTo(0))[ CD ]
Line_37 $$ for (int k = 0; k < docsAndPositions.freq(); k++) -->Line_39 $$ if (docsAndPositions.getPayload() != null) [ CD ]
Line_2 $$ public void testRandomPayloadWithDelimitedPayloadTokenFilter() throws IOException -->Line_29 $$ TermsEnum iterator = terms.iterator()[ CD ]
Line_23 $$ TermVectorsRequestBuilder resp = client().prepareTermVectors("test", "type1", Integer.toString(1)).setPayloads(true).setOffsets(true).setPositions(true).setSelectedFields()-->Line_24 $$ TermVectorsResponse response = resp.execute().actionGet()[ FD ]
Line_3 $$ int encoding = randomIntBetween(0, 2)-->Line_8 $$ if (encoding == 1) [ FD ]
Line_6 $$ encodingString = "float"-->Line_9 $$ encodingString = "int"[ FD ]
Line_29 $$ TermsEnum iterator = terms.iterator()-->Line_30 $$ while (iterator.next() != null) [ FD ]
Line_40 $$ String infoString = "\nterm: " + term + " has payload \n" + docsAndPositions.getPayload().toString() + "\n but should have payload \n" + curPayloads.get(k).toString()-->Line_41 $$ assertThat(infoString, docsAndPositions.getPayload(), equalTo(curPayloads.get(k)))[ FD ]
