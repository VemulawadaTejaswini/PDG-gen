Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_11 $$ if (context instanceof PsiArrayAccessExpression) [ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_5 $$ final PsiElement parent = context.getParent()[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_4 $$ from = ((PsiArrayType) from).getComponentType()[ FD ]
Line_14 $$ if (operationSign == JavaTokenType.EQ) -->Line_17 $$ return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign + "$val$", "$qualifier$.set($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign.charAt(0) + " $val$") + ")", assignmentExpression)[ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_32 $$ if (parentParent instanceof PsiExpressionStatement) [ CD ]
Line_23 $$ if (rExpression == context && operationSign == JavaTokenType.EQ) -->Line_24 $$ return wrapWithNewExpression(to, from, rExpression, context)[ CD ]
Line_13 $$ if (assignmentExpression.getLExpression() == context) -->Line_14 $$ if (operationSign == JavaTokenType.EQ) [ CD ]
Line_8 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent-->Line_22 $$ final PsiExpression rExpression = assignmentExpression.getRExpression()[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_28 $$ if (((PsiVariable) parent).getInitializer() == context) [ FD ]
Line_7 $$ if (parent instanceof PsiAssignmentExpression) -->Line_10 $$ final String sign = assignmentExpression.getOperationSign().getText()[ CD ]
Line_11 $$ if (context instanceof PsiArrayAccessExpression) -->Line_23 $$ if (rExpression == context && operationSign == JavaTokenType.EQ) [ CD ]
Line_5 $$ final PsiElement parent = context.getParent()-->Line_33 $$ if (parent instanceof PsiPostfixExpression) [ FD ]
Line_4 $$ from = ((PsiArrayType) from).getComponentType()-->Line_35 $$ return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign, "$qualifier$.getAndSet($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign.charAt(0) + " 1") + ")", (PsiExpression) parent)[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_24 $$ return wrapWithNewExpression(to, from, rExpression, context)[ FD ]
Line_6 $$ final PsiElement parentParent = parent.getParent()-->Line_12 $$ if (parentParent instanceof PsiExpressionStatement) [ FD ]
Line_44 $$ if (context instanceof PsiArrayAccessExpression) -->Line_45 $$ return new TypeConversionDescriptor("$qualifier$[$idx$]", "$qualifier$.get($idx$)", (PsiExpression) context)[ CD ]
Line_10 $$ final String sign = assignmentExpression.getOperationSign().getText()-->Line_38 $$ return new TypeConversionDescriptor(sign + "$qualifier$[$idx$]", "$qualifier$.set($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign.charAt(0) + " 1") + ")", (PsiExpression) parent)[ FD ]
Line_33 $$ if (parent instanceof PsiPostfixExpression) -->Line_34 $$ final String sign = ((PsiPostfixExpression) parent).getOperationSign().getText()[ CD ]
Line_11 $$ if (context instanceof PsiArrayAccessExpression) -->Line_12 $$ if (parentParent instanceof PsiExpressionStatement) [ CD ]
Line_10 $$ final String sign = assignmentExpression.getOperationSign().getText()-->Line_17 $$ return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign + "$val$", "$qualifier$.set($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign.charAt(0) + " $val$") + ")", assignmentExpression)[ FD ]
Line_4 $$ from = ((PsiArrayType) from).getComponentType()-->Line_29 $$ return wrapWithNewExpression(to, from, (PsiExpression) context, context)[ FD ]
Line_4 $$ from = ((PsiArrayType) from).getComponentType()-->Line_24 $$ return wrapWithNewExpression(to, from, rExpression, context)[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_44 $$ if (context instanceof PsiArrayAccessExpression) [ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_44 $$ if (context instanceof PsiArrayAccessExpression) [ CD ]
Line_5 $$ final PsiElement parent = context.getParent()-->Line_7 $$ if (parent instanceof PsiAssignmentExpression) [ FD ]
Line_5 $$ final PsiElement parent = context.getParent()-->Line_39 $$ if (parent instanceof PsiBinaryExpression) [ FD ]
Line_14 $$ if (operationSign == JavaTokenType.EQ) -->Line_15 $$ return new TypeConversionDescriptor("$qualifier$[$idx$] = $val$", "$qualifier$.set($idx$, $val$)", assignmentExpression)[ CD ]
Line_11 $$ if (context instanceof PsiArrayAccessExpression) -->Line_22 $$ final PsiExpression rExpression = assignmentExpression.getRExpression()[ CD ]
Line_4 $$ from = ((PsiArrayType) from).getComponentType()-->Line_17 $$ return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign + "$val$", "$qualifier$.set($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign.charAt(0) + " $val$") + ")", assignmentExpression)[ FD ]
Line_5 $$ final PsiElement parent = context.getParent()-->Line_27 $$ if (parent instanceof PsiVariable) [ FD ]
Line_36 $$ if (parent instanceof PsiPrefixExpression) -->Line_37 $$ final String sign = ((PsiPrefixExpression) parent).getOperationSign().getText()[ CD ]
Line_5 $$ final PsiElement parent = context.getParent()-->Line_6 $$ final PsiElement parentParent = parent.getParent()[ FD ]
Line_39 $$ if (parent instanceof PsiBinaryExpression) -->Line_40 $$ final String sign = ((PsiBinaryExpression) parent).getOperationSign().getText()[ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_6 $$ final PsiElement parentParent = parent.getParent()[ CD ]
Line_4 $$ from = ((PsiArrayType) from).getComponentType()-->Line_41 $$ return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign + "$val$", "$qualifier$.set($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign + " $val$)") + ")", (PsiExpression) parent)[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_17 $$ return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign + "$val$", "$qualifier$.set($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign.charAt(0) + " $val$") + ")", assignmentExpression)[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_29 $$ return wrapWithNewExpression(to, from, (PsiExpression) context, context)[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_5 $$ final PsiElement parent = context.getParent()[ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_4 $$ from = ((PsiArrayType) from).getComponentType()[ CD ]
Line_10 $$ final String sign = assignmentExpression.getOperationSign().getText()-->Line_35 $$ return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign, "$qualifier$.getAndSet($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign.charAt(0) + " 1") + ")", (PsiExpression) parent)[ FD ]
Line_39 $$ if (parent instanceof PsiBinaryExpression) -->Line_41 $$ return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign + "$val$", "$qualifier$.set($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign + " $val$)") + ")", (PsiExpression) parent)[ CD ]
Line_32 $$ if (parentParent instanceof PsiExpressionStatement) -->Line_33 $$ if (parent instanceof PsiPostfixExpression) [ CD ]
Line_4 $$ from = ((PsiArrayType) from).getComponentType()-->Line_38 $$ return new TypeConversionDescriptor(sign + "$qualifier$[$idx$]", "$qualifier$.set($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign.charAt(0) + " 1") + ")", (PsiExpression) parent)[ FD ]
Line_8 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent-->Line_9 $$ final IElementType operationSign = assignmentExpression.getOperationTokenType()[ FD ]
Line_36 $$ if (parent instanceof PsiPrefixExpression) -->Line_38 $$ return new TypeConversionDescriptor(sign + "$qualifier$[$idx$]", "$qualifier$.set($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign.charAt(0) + " 1") + ")", (PsiExpression) parent)[ CD ]
Line_6 $$ final PsiElement parentParent = parent.getParent()-->Line_32 $$ if (parentParent instanceof PsiExpressionStatement) [ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_47 $$ return null[ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_35 $$ return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign, "$qualifier$.getAndSet($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign.charAt(0) + " 1") + ")", (PsiExpression) parent)[ FD ]
Line_5 $$ final PsiElement parent = context.getParent()-->Line_36 $$ if (parent instanceof PsiPrefixExpression) [ FD ]
Line_8 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent-->Line_13 $$ if (assignmentExpression.getLExpression() == context) [ FD ]
Line_36 $$ if (parent instanceof PsiPrefixExpression) -->Line_39 $$ if (parent instanceof PsiBinaryExpression) [ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_41 $$ return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign + "$val$", "$qualifier$.set($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign + " $val$)") + ")", (PsiExpression) parent)[ FD ]
Line_7 $$ if (parent instanceof PsiAssignmentExpression) -->Line_27 $$ if (parent instanceof PsiVariable) [ CD ]
Line_9 $$ final IElementType operationSign = assignmentExpression.getOperationTokenType()-->Line_14 $$ if (operationSign == JavaTokenType.EQ) [ FD ]
Line_12 $$ if (parentParent instanceof PsiExpressionStatement) -->Line_13 $$ if (assignmentExpression.getLExpression() == context) [ CD ]
Line_22 $$ final PsiExpression rExpression = assignmentExpression.getRExpression()-->Line_24 $$ return wrapWithNewExpression(to, from, rExpression, context)[ FD ]
Line_33 $$ if (parent instanceof PsiPostfixExpression) -->Line_35 $$ return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign, "$qualifier$.getAndSet($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign.charAt(0) + " 1") + ")", (PsiExpression) parent)[ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_38 $$ return new TypeConversionDescriptor(sign + "$qualifier$[$idx$]", "$qualifier$.set($idx$, " + getBoxedWrapper(from, to, "$qualifier$.get($idx$) " + sign.charAt(0) + " 1") + ")", (PsiExpression) parent)[ FD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_7 $$ if (parent instanceof PsiAssignmentExpression) [ CD ]
Line_27 $$ if (parent instanceof PsiVariable) -->Line_28 $$ if (((PsiVariable) parent).getInitializer() == context) [ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_13 $$ if (assignmentExpression.getLExpression() == context) [ FD ]
Line_7 $$ if (parent instanceof PsiAssignmentExpression) -->Line_9 $$ final IElementType operationSign = assignmentExpression.getOperationTokenType()[ CD ]
Line_7 $$ if (parent instanceof PsiAssignmentExpression) -->Line_8 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent[ CD ]
Line_8 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent-->Line_10 $$ final String sign = assignmentExpression.getOperationSign().getText()[ FD ]
Line_28 $$ if (((PsiVariable) parent).getInitializer() == context) -->Line_29 $$ return wrapWithNewExpression(to, from, (PsiExpression) context, context)[ CD ]
Line_7 $$ if (parent instanceof PsiAssignmentExpression) -->Line_11 $$ if (context instanceof PsiArrayAccessExpression) [ CD ]
Line_33 $$ if (parent instanceof PsiPostfixExpression) -->Line_36 $$ if (parent instanceof PsiPrefixExpression) [ CD ]
Line_2 $$ private static TypeConversionDescriptor findDirectConversionForAtomicReferenceArray(PsiElement context, PsiType to, PsiType from) -->Line_3 $$ LOG.assertTrue(from instanceof PsiArrayType)[ CD ]
