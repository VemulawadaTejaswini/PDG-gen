Line_10 $$ int messageId = reader.peek() == JsonToken.NUMBER ? reader.nextInt() : -1-->Line_13 $$ AsyncPromise<Object> promise = client.messageCallbackMap.remove(messageId)[ FD ]
Line_26 $$ if (domainHolder == null) -->Line_27 $$ LOG.error("Cannot find domain " + domainName)[ CD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_33 $$ ((JsonServiceInvocator) domain).invoke(command, client, reader, messageId, message)[ FD ]
Line_6 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_11 $$ String domainName = reader.nextString()[ FD ]
Line_14 $$ if (domainName.charAt(0) == 'r') -->Line_15 $$ if (promise == null) [ CD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_60 $$ client.send(encodeMessage(client.getByteBufAllocator(), messageId, null, null, null, new Object[] [ FD ]
Line_56 $$ if (method.getName().equals(command)) -->Line_59 $$ if (messageId != -1) [ CD ]
Line_55 $$ for (Method method : methods) -->Line_56 $$ if (method.getName().equals(command)) [ FD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_11 $$ String domainName = reader.nextString()[ CD ]
Line_25 $$ NotNullLazyValue domainHolder = domains.get(domainName)-->Line_30 $$ Object domain = domainHolder.getValue()[ FD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_7 $$ if (!isBinary) [ CD ]
Line_6 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_19 $$ promise.setResult(JsonUtil.nextAny(reader))[ FD ]
Line_13 $$ AsyncPromise<Object> promise = client.messageCallbackMap.remove(messageId)-->Line_21 $$ promise.setError("error")[ FD ]
Line_40 $$ parameters = ArrayUtil.toObjectArray(list)-->Line_58 $$ Object result = method.invoke(isStatic ? null : domain, parameters)[ FD ]
Line_10 $$ int messageId = reader.peek() == JsonToken.NUMBER ? reader.nextInt() : -1-->Line_33 $$ ((JsonServiceInvocator) domain).invoke(command, client, reader, messageId, message)[ FD ]
Line_11 $$ String domainName = reader.nextString()-->Line_12 $$ if (domainName.length() == 1) [ FD ]
Line_38 $$ List<Object> list = new SmartList<Object>()-->Line_39 $$ JsonUtil.readListBody(reader, list)[ FD ]
Line_59 $$ if (messageId != -1) -->Line_60 $$ client.send(encodeMessage(client.getByteBufAllocator(), messageId, null, null, null, new Object[] [ CD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_3 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_36 $$ Object[] parameters-->Line_42 $$ parameters = ArrayUtilRt.EMPTY_OBJECT_ARRAY[ FD ]
Line_3 $$ if (LOG.isDebugEnabled()) -->Line_4 $$ LOG.debug("IN " + message)[ CD ]
Line_6 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_45 $$ reader.endArray()[ FD ]
Line_11 $$ String domainName = reader.nextString()-->Line_14 $$ if (domainName.charAt(0) == 'r') [ FD ]
Line_49 $$ Method[] methods-->Line_51 $$ methods = ((Class) domain).getDeclaredMethods()[ FD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_7 $$ if (!isBinary) [ FD ]
Line_6 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_31 $$ String command = reader.nextString()[ FD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_6 $$ JsonReaderEx reader = new JsonReaderEx(message)[ CD ]
Line_25 $$ NotNullLazyValue domainHolder = domains.get(domainName)-->Line_26 $$ if (domainHolder == null) [ FD ]
Line_7 $$ if (!isBinary) -->Line_8 $$ reader.beginArray()[ CD ]
Line_51 $$ methods = ((Class) domain).getDeclaredMethods()-->Line_53 $$ methods = domain.getClass().getMethods()[ FD ]
Line_12 $$ if (domainName.length() == 1) -->Line_23 $$ return[ CD ]
Line_36 $$ Object[] parameters-->Line_40 $$ parameters = ArrayUtil.toObjectArray(list)[ FD ]
Line_6 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_39 $$ JsonUtil.readListBody(reader, list)[ FD ]
Line_32 $$ if (domain instanceof JsonServiceInvocator) -->Line_34 $$ return[ CD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_30 $$ Object domain = domainHolder.getValue()[ CD ]
Line_50 $$ if (isStatic) -->Line_53 $$ methods = domain.getClass().getMethods()[ CD ]
Line_26 $$ if (domainHolder == null) -->Line_28 $$ return[ CD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_44 $$ if (!isBinary) [ FD ]
Line_36 $$ Object[] parameters-->Line_58 $$ Object result = method.invoke(isStatic ? null : domain, parameters)[ FD ]
Line_10 $$ int messageId = reader.peek() == JsonToken.NUMBER ? reader.nextInt() : -1-->Line_59 $$ if (messageId != -1) [ FD ]
Line_37 $$ if (reader.hasNext()) -->Line_38 $$ List<Object> list = new SmartList<Object>()[ CD ]
Line_10 $$ int messageId = reader.peek() == JsonToken.NUMBER ? reader.nextInt() : -1-->Line_60 $$ client.send(encodeMessage(client.getByteBufAllocator(), messageId, null, null, null, new Object[] [ FD ]
Line_31 $$ String command = reader.nextString()-->Line_56 $$ if (method.getName().equals(command)) [ FD ]
Line_56 $$ if (method.getName().equals(command)) -->Line_58 $$ Object result = method.invoke(isStatic ? null : domain, parameters)[ CD ]
Line_56 $$ if (method.getName().equals(command)) -->Line_62 $$ return[ CD ]
Line_12 $$ if (domainName.length() == 1) -->Line_13 $$ AsyncPromise<Object> promise = client.messageCallbackMap.remove(messageId)[ CD ]
Line_12 $$ if (domainName.length() == 1) -->Line_14 $$ if (domainName.charAt(0) == 'r') [ CD ]
Line_13 $$ AsyncPromise<Object> promise = client.messageCallbackMap.remove(messageId)-->Line_19 $$ promise.setResult(JsonUtil.nextAny(reader))[ FD ]
Line_55 $$ for (Method method : methods) -->Line_58 $$ Object result = method.invoke(isStatic ? null : domain, parameters)[ FD ]
Line_44 $$ if (!isBinary) -->Line_45 $$ reader.endArray()[ CD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_32 $$ if (domain instanceof JsonServiceInvocator) [ CD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_10 $$ int messageId = reader.peek() == JsonToken.NUMBER ? reader.nextInt() : -1[ CD ]
Line_15 $$ if (promise == null) -->Line_17 $$ return[ CD ]
Line_56 $$ if (method.getName().equals(command)) -->Line_57 $$ method.setAccessible(true)[ CD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_37 $$ if (reader.hasNext()) [ CD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_44 $$ if (!isBinary) [ CD ]
Line_6 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_8 $$ reader.beginArray()[ FD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_36 $$ Object[] parameters[ CD ]
Line_31 $$ String command = reader.nextString()-->Line_33 $$ ((JsonServiceInvocator) domain).invoke(command, client, reader, messageId, message)[ FD ]
Line_30 $$ Object domain = domainHolder.getValue()-->Line_32 $$ if (domain instanceof JsonServiceInvocator) [ FD ]
Line_6 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_37 $$ if (reader.hasNext()) [ FD ]
Line_37 $$ if (reader.hasNext()) -->Line_39 $$ JsonUtil.readListBody(reader, list)[ CD ]
Line_55 $$ for (Method method : methods) -->Line_57 $$ method.setAccessible(true)[ FD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_12 $$ if (domainName.length() == 1) [ CD ]
Line_40 $$ parameters = ArrayUtil.toObjectArray(list)-->Line_42 $$ parameters = ArrayUtilRt.EMPTY_OBJECT_ARRAY[ FD ]
Line_37 $$ if (reader.hasNext()) -->Line_42 $$ parameters = ArrayUtilRt.EMPTY_OBJECT_ARRAY[ CD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_31 $$ String command = reader.nextString()[ CD ]
Line_42 $$ parameters = ArrayUtilRt.EMPTY_OBJECT_ARRAY-->Line_58 $$ Object result = method.invoke(isStatic ? null : domain, parameters)[ FD ]
Line_14 $$ if (domainName.charAt(0) == 'r') -->Line_21 $$ promise.setError("error")[ CD ]
Line_14 $$ if (domainName.charAt(0) == 'r') -->Line_19 $$ promise.setResult(JsonUtil.nextAny(reader))[ CD ]
Line_30 $$ Object domain = domainHolder.getValue()-->Line_53 $$ methods = domain.getClass().getMethods()[ FD ]
Line_11 $$ String domainName = reader.nextString()-->Line_25 $$ NotNullLazyValue domainHolder = domains.get(domainName)[ FD ]
Line_15 $$ if (promise == null) -->Line_16 $$ LOG.error("Response with id " + messageId + " was already processed")[ CD ]
Line_32 $$ if (domain instanceof JsonServiceInvocator) -->Line_33 $$ ((JsonServiceInvocator) domain).invoke(command, client, reader, messageId, message)[ CD ]
Line_13 $$ AsyncPromise<Object> promise = client.messageCallbackMap.remove(messageId)-->Line_15 $$ if (promise == null) [ FD ]
Line_38 $$ List<Object> list = new SmartList<Object>()-->Line_40 $$ parameters = ArrayUtil.toObjectArray(list)[ FD ]
Line_49 $$ Method[] methods-->Line_53 $$ methods = domain.getClass().getMethods()[ FD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_26 $$ if (domainHolder == null) [ CD ]
Line_37 $$ if (reader.hasNext()) -->Line_40 $$ parameters = ArrayUtil.toObjectArray(list)[ CD ]
Line_6 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_10 $$ int messageId = reader.peek() == JsonToken.NUMBER ? reader.nextInt() : -1[ FD ]
Line_6 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_33 $$ ((JsonServiceInvocator) domain).invoke(command, client, reader, messageId, message)[ FD ]
Line_50 $$ if (isStatic) -->Line_51 $$ methods = ((Class) domain).getDeclaredMethods()[ CD ]
Line_2 $$ public void messageReceived(@NotNull Client client, @NotNull CharSequence message, boolean isBinary) throws IOException -->Line_25 $$ NotNullLazyValue domainHolder = domains.get(domainName)[ CD ]
