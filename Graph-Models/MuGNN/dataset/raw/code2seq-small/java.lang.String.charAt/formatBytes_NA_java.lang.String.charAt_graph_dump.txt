Line_2 $$ public static String formatBytes(long bytes) -->Line_3 $$ if (bytes < 0) [ CD ]
Line_7 $$ if (bytes < unit) -->Line_8 $$ return bytes + " B"[ CD ]
Line_11 $$ char pre = "kMGTPE".charAt(exp - 1)-->Line_12 $$ return format("%.1f %sB", bytes / Math.pow(unit, exp), pre)[ FD ]
Line_2 $$ public static String formatBytes(long bytes) -->Line_12 $$ return format("%.1f %sB", bytes / Math.pow(unit, exp), pre)[ CD ]
Line_6 $$ int unit = 1000-->Line_7 $$ if (bytes < unit) [ FD ]
Line_2 $$ public static String formatBytes(long bytes) -->Line_10 $$ int exp = (int) (Math.log(bytes) / Math.log(unit))[ CD ]
Line_2 $$ public static String formatBytes(long bytes) -->Line_10 $$ int exp = (int) (Math.log(bytes) / Math.log(unit))[ FD ]
Line_2 $$ public static String formatBytes(long bytes) -->Line_11 $$ char pre = "kMGTPE".charAt(exp - 1)[ CD ]
Line_6 $$ int unit = 1000-->Line_12 $$ return format("%.1f %sB", bytes / Math.pow(unit, exp), pre)[ FD ]
Line_10 $$ int exp = (int) (Math.log(bytes) / Math.log(unit))-->Line_12 $$ return format("%.1f %sB", bytes / Math.pow(unit, exp), pre)[ FD ]
Line_2 $$ public static String formatBytes(long bytes) -->Line_3 $$ if (bytes < 0) [ FD ]
Line_2 $$ public static String formatBytes(long bytes) -->Line_7 $$ if (bytes < unit) [ CD ]
Line_2 $$ public static String formatBytes(long bytes) -->Line_4 $$ return "-".concat(formatBytes(-bytes))[ FD ]
Line_2 $$ public static String formatBytes(long bytes) -->Line_6 $$ int unit = 1000[ CD ]
Line_2 $$ public static String formatBytes(long bytes) -->Line_7 $$ if (bytes < unit) [ FD ]
Line_3 $$ if (bytes < 0) -->Line_4 $$ return "-".concat(formatBytes(-bytes))[ CD ]
Line_6 $$ int unit = 1000-->Line_10 $$ int exp = (int) (Math.log(bytes) / Math.log(unit))[ FD ]
