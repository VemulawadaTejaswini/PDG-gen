Line_2 $$ public void testGet() throws IOException -->Line_8 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_RETRY_WINDOW_BASE, 10)[ CD ]
Line_2 $$ public void testGet() throws IOException -->Line_4 $$ final String fname = "testGet.txt"[ CD ]
Line_14 $$ String[] args = new String[options.length + 3]-->Line_23 $$ assertEquals(exitcode, shell.run(args))[ FD ]
Line_14 $$ String[] args = new String[options.length + 3]-->Line_21 $$ show("args=" + Arrays.asList(args))[ FD ]
Line_2 $$ public void testGet() throws IOException -->Line_7 $$ final Configuration conf = new HdfsConfiguration()[ CD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_27 $$ return exitcode == 0 ? DFSTestUtil.readFile(new File(dst)) : null[ CD ]
Line_59 $$ if (null != cluster) -->Line_60 $$ cluster.shutdown()[ CD ]
Line_2 $$ public void testGet() throws IOException -->Line_30 $$ File localf = createLocalFile(new File(TEST_ROOT_DIR, fname))[ CD ]
Line_7 $$ final Configuration conf = new HdfsConfiguration()-->Line_8 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_RETRY_WINDOW_BASE, 10)[ FD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_13 $$ String dst = new File(TEST_ROOT_DIR, fname + ++count).getAbsolutePath()[ CD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_14 $$ String[] args = new String[options.length + 3][ CD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_48 $$ assertEquals(null, runner.run(1))[ FD ]
Line_6 $$ final Path remotef = new Path(root, fname)-->Line_16 $$ args[args.length - 2] = remotef.toString()[ FD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_18 $$ for (int i = 0; i < options.length; i++) [ CD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_16 $$ args[args.length - 2] = remotef.toString()[ CD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_15 $$ args[0] = "-get"[ CD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_49 $$ String corruptedcontent = runner.run(0, "-ignoreCrc")[ FD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_17 $$ args[args.length - 1] = dst[ CD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_40 $$ assertEquals(localfcontent, runner.run(0, "-ignoreCrc"))[ FD ]
Line_5 $$ Path root = new Path("/test/get")-->Line_36 $$ mkdir(dfs, root)[ FD ]
Line_2 $$ public void testGet() throws IOException -->Line_9 $$ TestGetRunner runner = new TestGetRunner() [ CD ]
Line_2 $$ public void testGet() throws IOException -->Line_5 $$ Path root = new Path("/test/get")[ CD ]
Line_18 $$ for (int i = 0; i < options.length; i++) -->Line_19 $$ args[i + 1] = options[i][ CD ]
Line_2 $$ public void testGet() throws IOException -->Line_3 $$ DFSTestUtil.setLogLevel2All(FSInputChecker.LOG)[ CD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_21 $$ show("args=" + Arrays.asList(args))[ CD ]
Line_2 $$ public void testGet() throws IOException -->Line_6 $$ final Path remotef = new Path(root, fname)[ CD ]
Line_6 $$ final Path remotef = new Path(root, fname)-->Line_37 $$ dfs.copyFromLocalFile(false, false, new Path(localf.getPath()), remotef)[ FD ]
Line_13 $$ String dst = new File(TEST_ROOT_DIR, fname + ++count).getAbsolutePath()-->Line_17 $$ args[args.length - 1] = dst[ FD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_39 $$ assertEquals(localfcontent, runner.run(0))[ FD ]
Line_9 $$ TestGetRunner runner = new TestGetRunner() -->Line_23 $$ assertEquals(exitcode, shell.run(args))[ FD ]
