Line_2 $$ public void testBase64DecodeWithExtraCharactersAfterPadding() throws Exception -->Line_3 $$ String plain = randomAsciiOfLengthBetween(1, 20) + ":" + randomAsciiOfLengthBetween(1, 20)[ CD ]
Line_2 $$ public void testBase64DecodeWithExtraCharactersAfterPadding() throws Exception -->Line_6 $$ char lastChar = encoded.charAt(encoded.length() - 1)[ CD ]
Line_4 $$ String encoded = Base64.encodeBytes(plain.getBytes(StandardCharsets.UTF_8))-->Line_6 $$ char lastChar = encoded.charAt(encoded.length() - 1)[ FD ]
Line_3 $$ String plain = randomAsciiOfLengthBetween(1, 20) + ":" + randomAsciiOfLengthBetween(1, 20)-->Line_5 $$ assertValidBase64(encoded, plain)[ FD ]
Line_2 $$ public void testBase64DecodeWithExtraCharactersAfterPadding() throws Exception -->Line_7 $$ if (lastChar == '=') [ CD ]
Line_2 $$ public void testBase64DecodeWithExtraCharactersAfterPadding() throws Exception -->Line_5 $$ assertValidBase64(encoded, plain)[ CD ]
Line_2 $$ public void testBase64DecodeWithExtraCharactersAfterPadding() throws Exception -->Line_4 $$ String encoded = Base64.encodeBytes(plain.getBytes(StandardCharsets.UTF_8))[ CD ]
Line_7 $$ if (lastChar == '=') -->Line_8 $$ assertInvalidBase64(encoded + randomAsciiOfLength(3))[ CD ]
Line_6 $$ char lastChar = encoded.charAt(encoded.length() - 1)-->Line_7 $$ if (lastChar == '=') [ FD ]
Line_3 $$ String plain = randomAsciiOfLengthBetween(1, 20) + ":" + randomAsciiOfLengthBetween(1, 20)-->Line_4 $$ String encoded = Base64.encodeBytes(plain.getBytes(StandardCharsets.UTF_8))[ FD ]
Line_4 $$ String encoded = Base64.encodeBytes(plain.getBytes(StandardCharsets.UTF_8))-->Line_5 $$ assertValidBase64(encoded, plain)[ FD ]
