Line_8 $$ String curNode = null-->Line_14 $$ if (curNode != null) [ FD ]
Line_13 $$ if (isTopLevel) -->Line_21 $$ curNode = e[ CD ]
Line_21 $$ curNode = e-->Line_14 $$ if (curNode != null) [ FD ]
Line_13 $$ if (isTopLevel) -->Line_22 $$ curChildren = ""[ CD ]
Line_24 $$ curChildren += StringUtil.trimStart(e, "  ") + "\n"-->Line_18 $$ checkStructure(actualNodes.get(iactual), curChildren)[ FD ]
Line_3 $$ List<SliceNode> actualNodes = new ArrayList((Collection) root.getChildren())-->Line_4 $$ Collections.sort(actualNodes, SliceTreeBuilder.SLICE_NODE_COMPARATOR)[ FD ]
Line_14 $$ if (curNode != null) -->Line_15 $$ assertTrue(iactual < actualStrings.length)[ CD ]
Line_2 $$ private static void checkStructure(final SliceNode root, @NonNls String dataExpected) -->Line_10 $$ for (int iexp = 0; iexp <= childrenExpected.length; iexp++) [ CD ]
Line_9 $$ int iactual = 0-->Line_19 $$ iactual++[ FD ]
Line_14 $$ if (curNode != null) -->Line_19 $$ iactual++[ CD ]
Line_11 $$ String e = iexp == childrenExpected.length ? null : childrenExpected[iexp]-->Line_21 $$ curNode = e[ FD ]
Line_13 $$ if (isTopLevel) -->Line_24 $$ curChildren += StringUtil.trimStart(e, "  ") + "\n"[ CD ]
Line_2 $$ private static void checkStructure(final SliceNode root, @NonNls String dataExpected) -->Line_27 $$ assertEquals(dataExpected, actualNodes.size(), iactual)[ CD ]
Line_2 $$ private static void checkStructure(final SliceNode root, @NonNls String dataExpected) -->Line_4 $$ Collections.sort(actualNodes, SliceTreeBuilder.SLICE_NODE_COMPARATOR)[ CD ]
Line_7 $$ String curChildren = ""-->Line_18 $$ checkStructure(actualNodes.get(iactual), curChildren)[ FD ]
Line_2 $$ private static void checkStructure(final SliceNode root, @NonNls String dataExpected) -->Line_7 $$ String curChildren = ""[ CD ]
Line_10 $$ for (int iexp = 0; iexp <= childrenExpected.length; iexp++) -->Line_11 $$ String e = iexp == childrenExpected.length ? null : childrenExpected[iexp][ CD ]
Line_2 $$ private static void checkStructure(final SliceNode root, @NonNls String dataExpected) -->Line_8 $$ String curNode = null[ CD ]
Line_22 $$ curChildren = ""-->Line_24 $$ curChildren += StringUtil.trimStart(e, "  ") + "\n"[ FD ]
Line_22 $$ curChildren = ""-->Line_18 $$ checkStructure(actualNodes.get(iactual), curChildren)[ FD ]
Line_2 $$ private static void checkStructure(final SliceNode root, @NonNls String dataExpected) -->Line_6 $$ String[] childrenExpected = dataExpected.isEmpty() ? ArrayUtil.EMPTY_STRING_ARRAY : dataExpected.split("\n")[ FD ]
Line_2 $$ private static void checkStructure(final SliceNode root, @NonNls String dataExpected) -->Line_5 $$ Object[] actualStrings = ContainerUtil.map2Array(actualNodes, SliceNode::<>toString)[ CD ]
Line_7 $$ String curChildren = ""-->Line_22 $$ curChildren = ""[ FD ]
Line_16 $$ Object actual = actualStrings[iactual]-->Line_17 $$ assertEquals(curNode, actual)[ FD ]
Line_2 $$ private static void checkStructure(final SliceNode root, @NonNls String dataExpected) -->Line_3 $$ List<SliceNode> actualNodes = new ArrayList((Collection) root.getChildren())[ FD ]
Line_3 $$ List<SliceNode> actualNodes = new ArrayList((Collection) root.getChildren())-->Line_5 $$ Object[] actualStrings = ContainerUtil.map2Array(actualNodes, SliceNode::<>toString)[ FD ]
Line_3 $$ List<SliceNode> actualNodes = new ArrayList((Collection) root.getChildren())-->Line_18 $$ checkStructure(actualNodes.get(iactual), curChildren)[ FD ]
Line_9 $$ int iactual = 0-->Line_18 $$ checkStructure(actualNodes.get(iactual), curChildren)[ FD ]
Line_2 $$ private static void checkStructure(final SliceNode root, @NonNls String dataExpected) -->Line_9 $$ int iactual = 0[ CD ]
Line_7 $$ String curChildren = ""-->Line_24 $$ curChildren += StringUtil.trimStart(e, "  ") + "\n"[ FD ]
Line_10 $$ for (int iexp = 0; iexp <= childrenExpected.length; iexp++) -->Line_12 $$ boolean isTopLevel = e == null || e.charAt(0) != ' '[ CD ]
Line_2 $$ private static void checkStructure(final SliceNode root, @NonNls String dataExpected) -->Line_3 $$ List<SliceNode> actualNodes = new ArrayList((Collection) root.getChildren())[ CD ]
Line_11 $$ String e = iexp == childrenExpected.length ? null : childrenExpected[iexp]-->Line_24 $$ curChildren += StringUtil.trimStart(e, "  ") + "\n"[ FD ]
Line_9 $$ int iactual = 0-->Line_27 $$ assertEquals(dataExpected, actualNodes.size(), iactual)[ FD ]
Line_11 $$ String e = iexp == childrenExpected.length ? null : childrenExpected[iexp]-->Line_12 $$ boolean isTopLevel = e == null || e.charAt(0) != ' '[ FD ]
Line_2 $$ private static void checkStructure(final SliceNode root, @NonNls String dataExpected) -->Line_27 $$ assertEquals(dataExpected, actualNodes.size(), iactual)[ FD ]
Line_8 $$ String curNode = null-->Line_21 $$ curNode = e[ FD ]
Line_21 $$ curNode = e-->Line_17 $$ assertEquals(curNode, actual)[ FD ]
Line_14 $$ if (curNode != null) -->Line_17 $$ assertEquals(curNode, actual)[ CD ]
Line_13 $$ if (isTopLevel) -->Line_14 $$ if (curNode != null) [ CD ]
Line_8 $$ String curNode = null-->Line_17 $$ assertEquals(curNode, actual)[ FD ]
Line_10 $$ for (int iexp = 0; iexp <= childrenExpected.length; iexp++) -->Line_13 $$ if (isTopLevel) [ CD ]
Line_14 $$ if (curNode != null) -->Line_16 $$ Object actual = actualStrings[iactual][ CD ]
Line_2 $$ private static void checkStructure(final SliceNode root, @NonNls String dataExpected) -->Line_6 $$ String[] childrenExpected = dataExpected.isEmpty() ? ArrayUtil.EMPTY_STRING_ARRAY : dataExpected.split("\n")[ CD ]
Line_3 $$ List<SliceNode> actualNodes = new ArrayList((Collection) root.getChildren())-->Line_27 $$ assertEquals(dataExpected, actualNodes.size(), iactual)[ FD ]
Line_14 $$ if (curNode != null) -->Line_18 $$ checkStructure(actualNodes.get(iactual), curChildren)[ CD ]
