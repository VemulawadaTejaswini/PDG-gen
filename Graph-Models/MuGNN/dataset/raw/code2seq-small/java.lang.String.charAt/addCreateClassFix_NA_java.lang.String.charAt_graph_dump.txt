Line_4 $$ PsiElement anchor = element-->Line_12 $$ anchor = null[ FD ]
Line_2 $$ private void addCreateClassFix(@NonNls String refText, PsiElement element, List<LocalQuickFix> actions) -->Line_3 $$ if (refText.length() > 2 && Character.isUpperCase(refText.charAt(0)) && !refText.toUpperCase().equals(refText) && PsiTreeUtil.getParentOfType(element, PyImportStatementBase.class) == null) [ CD ]
Line_10 $$ anchor = ((PyModuleType) type).getModule()-->Line_15 $$ if (anchor != null) [ FD ]
Line_5 $$ if (element instanceof PyQualifiedExpression) -->Line_15 $$ if (anchor != null) [ CD ]
Line_9 $$ if (type instanceof PyModuleType) -->Line_12 $$ anchor = null[ CD ]
Line_15 $$ if (anchor != null) -->Line_16 $$ actions.add(new CreateClassQuickFix(refText, anchor))[ CD ]
Line_2 $$ private void addCreateClassFix(@NonNls String refText, PsiElement element, List<LocalQuickFix> actions) -->Line_3 $$ if (refText.length() > 2 && Character.isUpperCase(refText.charAt(0)) && !refText.toUpperCase().equals(refText) && PsiTreeUtil.getParentOfType(element, PyImportStatementBase.class) == null) [ FD ]
Line_4 $$ PsiElement anchor = element-->Line_10 $$ anchor = ((PyModuleType) type).getModule()[ FD ]
Line_7 $$ if (expr != null) -->Line_9 $$ if (type instanceof PyModuleType) [ CD ]
Line_6 $$ final PyExpression expr = ((PyQualifiedExpression) element).getQualifier()-->Line_7 $$ if (expr != null) [ FD ]
Line_8 $$ final PyType type = myTypeEvalContext.getType(expr)-->Line_9 $$ if (type instanceof PyModuleType) [ FD ]
Line_5 $$ if (element instanceof PyQualifiedExpression) -->Line_7 $$ if (expr != null) [ CD ]
Line_7 $$ if (expr != null) -->Line_8 $$ final PyType type = myTypeEvalContext.getType(expr)[ CD ]
Line_10 $$ anchor = ((PyModuleType) type).getModule()-->Line_12 $$ anchor = null[ FD ]
Line_12 $$ anchor = null-->Line_15 $$ if (anchor != null) [ FD ]
Line_6 $$ final PyExpression expr = ((PyQualifiedExpression) element).getQualifier()-->Line_8 $$ final PyType type = myTypeEvalContext.getType(expr)[ FD ]
Line_2 $$ private void addCreateClassFix(@NonNls String refText, PsiElement element, List<LocalQuickFix> actions) -->Line_16 $$ actions.add(new CreateClassQuickFix(refText, anchor))[ FD ]
Line_4 $$ PsiElement anchor = element-->Line_15 $$ if (anchor != null) [ FD ]
Line_5 $$ if (element instanceof PyQualifiedExpression) -->Line_6 $$ final PyExpression expr = ((PyQualifiedExpression) element).getQualifier()[ CD ]
Line_3 $$ if (refText.length() > 2 && Character.isUpperCase(refText.charAt(0)) && !refText.toUpperCase().equals(refText) && PsiTreeUtil.getParentOfType(element, PyImportStatementBase.class) == null) -->Line_4 $$ PsiElement anchor = element[ CD ]
Line_3 $$ if (refText.length() > 2 && Character.isUpperCase(refText.charAt(0)) && !refText.toUpperCase().equals(refText) && PsiTreeUtil.getParentOfType(element, PyImportStatementBase.class) == null) -->Line_5 $$ if (element instanceof PyQualifiedExpression) [ CD ]
Line_2 $$ private void addCreateClassFix(@NonNls String refText, PsiElement element, List<LocalQuickFix> actions) -->Line_5 $$ if (element instanceof PyQualifiedExpression) [ FD ]
Line_9 $$ if (type instanceof PyModuleType) -->Line_10 $$ anchor = ((PyModuleType) type).getModule()[ CD ]
