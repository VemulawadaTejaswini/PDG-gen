Line_3 $$ final String superString = name.getSuperString()-->Line_14 $$ if (nextNonWhitespace < superString.length() && superString.charAt(nextNonWhitespace) == ',') [ FD ]
Line_5 $$ int prevNonWhitespace = skipSpacesBackward(superString, name.getStartOffset() - 1)-->Line_8 $$ prevNonWhitespace = skipSpacesBackward(superString, startWithStars - 1)[ FD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_5 $$ int prevNonWhitespace = skipSpacesBackward(superString, name.getStartOffset() - 1)[ CD ]
Line_3 $$ final String superString = name.getSuperString()-->Line_6 $$ if (prevNonWhitespace >= 0 && superString.charAt(prevNonWhitespace) == '*') [ FD ]
Line_6 $$ if (prevNonWhitespace >= 0 && superString.charAt(prevNonWhitespace) == '*') -->Line_8 $$ prevNonWhitespace = skipSpacesBackward(superString, startWithStars - 1)[ CD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_3 $$ final String superString = name.getSuperString()[ FD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_13 $$ final int nextNonWhitespace = skipSpacesForward(superString, name.getEndOffset())[ CD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_14 $$ if (nextNonWhitespace < superString.length() && superString.charAt(nextNonWhitespace) == ',') [ CD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_17 $$ return name[ CD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_4 $$ int startWithStars = name.getStartOffset()[ FD ]
Line_6 $$ if (prevNonWhitespace >= 0 && superString.charAt(prevNonWhitespace) == '*') -->Line_7 $$ startWithStars = CharArrayUtil.shiftBackward(superString, prevNonWhitespace, "*") + 1[ CD ]
Line_8 $$ prevNonWhitespace = skipSpacesBackward(superString, startWithStars - 1)-->Line_10 $$ if (prevNonWhitespace >= 0 && superString.charAt(prevNonWhitespace) == ',') [ FD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_6 $$ if (prevNonWhitespace >= 0 && superString.charAt(prevNonWhitespace) == '*') [ CD ]
Line_3 $$ final String superString = name.getSuperString()-->Line_8 $$ prevNonWhitespace = skipSpacesBackward(superString, startWithStars - 1)[ FD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_5 $$ int prevNonWhitespace = skipSpacesBackward(superString, name.getStartOffset() - 1)[ FD ]
Line_5 $$ int prevNonWhitespace = skipSpacesBackward(superString, name.getStartOffset() - 1)-->Line_10 $$ if (prevNonWhitespace >= 0 && superString.charAt(prevNonWhitespace) == ',') [ FD ]
Line_4 $$ int startWithStars = name.getStartOffset()-->Line_7 $$ startWithStars = CharArrayUtil.shiftBackward(superString, prevNonWhitespace, "*") + 1[ FD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_11 $$ return new Substring(superString, prevNonWhitespace, name.getEndOffset())[ FD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_13 $$ final int nextNonWhitespace = skipSpacesForward(superString, name.getEndOffset())[ FD ]
Line_5 $$ int prevNonWhitespace = skipSpacesBackward(superString, name.getStartOffset() - 1)-->Line_7 $$ startWithStars = CharArrayUtil.shiftBackward(superString, prevNonWhitespace, "*") + 1[ FD ]
Line_10 $$ if (prevNonWhitespace >= 0 && superString.charAt(prevNonWhitespace) == ',') -->Line_11 $$ return new Substring(superString, prevNonWhitespace, name.getEndOffset())[ CD ]
Line_13 $$ final int nextNonWhitespace = skipSpacesForward(superString, name.getEndOffset())-->Line_14 $$ if (nextNonWhitespace < superString.length() && superString.charAt(nextNonWhitespace) == ',') [ FD ]
Line_3 $$ final String superString = name.getSuperString()-->Line_15 $$ return new Substring(superString, startWithStars, skipSpacesForward(superString, nextNonWhitespace + 1))[ FD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_3 $$ final String superString = name.getSuperString()[ CD ]
Line_3 $$ final String superString = name.getSuperString()-->Line_10 $$ if (prevNonWhitespace >= 0 && superString.charAt(prevNonWhitespace) == ',') [ FD ]
Line_3 $$ final String superString = name.getSuperString()-->Line_7 $$ startWithStars = CharArrayUtil.shiftBackward(superString, prevNonWhitespace, "*") + 1[ FD ]
Line_3 $$ final String superString = name.getSuperString()-->Line_5 $$ int prevNonWhitespace = skipSpacesBackward(superString, name.getStartOffset() - 1)[ FD ]
Line_14 $$ if (nextNonWhitespace < superString.length() && superString.charAt(nextNonWhitespace) == ',') -->Line_15 $$ return new Substring(superString, startWithStars, skipSpacesForward(superString, nextNonWhitespace + 1))[ CD ]
Line_5 $$ int prevNonWhitespace = skipSpacesBackward(superString, name.getStartOffset() - 1)-->Line_6 $$ if (prevNonWhitespace >= 0 && superString.charAt(prevNonWhitespace) == '*') [ FD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_10 $$ if (prevNonWhitespace >= 0 && superString.charAt(prevNonWhitespace) == ',') [ CD ]
Line_2 $$ private static Substring expandParamNameSubstring(@NotNull Substring name) -->Line_4 $$ int startWithStars = name.getStartOffset()[ CD ]
Line_3 $$ final String superString = name.getSuperString()-->Line_13 $$ final int nextNonWhitespace = skipSpacesForward(superString, name.getEndOffset())[ FD ]
