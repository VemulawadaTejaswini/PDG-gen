Line_5 $$ for (int j = 0; j < from.length; j += 1) -->Line_6 $$ String toReplace = from[j][ CD ]
Line_2 $$ public static String replace(@NotNull String text, @NotNull String[] from, @NotNull String[] to) -->Line_3 $$ final StringBuilder result = new StringBuilder(text.length())[ CD ]
Line_2 $$ public static String replace(@NotNull String text, @NotNull String[] from, @NotNull String[] to) -->Line_9 $$ if (text.regionMatches(i, toReplace, 0, len)) [ FD ]
Line_11 $$ i += len - 1-->Line_15 $$ result.append(text.charAt(i))[ FD ]
Line_4 $$ for (int i = 0; i < text.length(); i++) -->Line_15 $$ result.append(text.charAt(i))[ FD ]
Line_6 $$ String toReplace = from[j]-->Line_9 $$ if (text.regionMatches(i, toReplace, 0, len)) [ FD ]
Line_3 $$ final StringBuilder result = new StringBuilder(text.length())-->Line_17 $$ return result.toString()[ FD ]
Line_2 $$ public static String replace(@NotNull String text, @NotNull String[] from, @NotNull String[] to) -->Line_4 $$ for (int i = 0; i < text.length(); i++) [ FD ]
Line_9 $$ if (text.regionMatches(i, toReplace, 0, len)) -->Line_10 $$ result.append(replaceWith)[ CD ]
Line_4 $$ for (int i = 0; i < text.length(); i++) -->Line_9 $$ if (text.regionMatches(i, toReplace, 0, len)) [ FD ]
Line_2 $$ public static String replace(@NotNull String text, @NotNull String[] from, @NotNull String[] to) -->Line_3 $$ final StringBuilder result = new StringBuilder(text.length())[ FD ]
Line_8 $$ final int len = toReplace.length()-->Line_9 $$ if (text.regionMatches(i, toReplace, 0, len)) [ FD ]
Line_11 $$ i += len - 1-->Line_9 $$ if (text.regionMatches(i, toReplace, 0, len)) [ FD ]
Line_6 $$ String toReplace = from[j]-->Line_8 $$ final int len = toReplace.length()[ FD ]
Line_5 $$ for (int j = 0; j < from.length; j += 1) -->Line_8 $$ final int len = toReplace.length()[ CD ]
Line_7 $$ String replaceWith = to[j]-->Line_10 $$ result.append(replaceWith)[ FD ]
Line_4 $$ for (int i = 0; i < text.length(); i++) -->Line_11 $$ i += len - 1[ FD ]
Line_3 $$ final StringBuilder result = new StringBuilder(text.length())-->Line_10 $$ result.append(replaceWith)[ FD ]
Line_3 $$ final StringBuilder result = new StringBuilder(text.length())-->Line_15 $$ result.append(text.charAt(i))[ FD ]
Line_5 $$ for (int j = 0; j < from.length; j += 1) -->Line_9 $$ if (text.regionMatches(i, toReplace, 0, len)) [ CD ]
Line_2 $$ public static String replace(@NotNull String text, @NotNull String[] from, @NotNull String[] to) -->Line_15 $$ result.append(text.charAt(i))[ FD ]
Line_5 $$ for (int j = 0; j < from.length; j += 1) -->Line_7 $$ String replaceWith = to[j][ CD ]
Line_2 $$ public static String replace(@NotNull String text, @NotNull String[] from, @NotNull String[] to) -->Line_17 $$ return result.toString()[ CD ]
Line_4 $$ for (int i = 0; i < text.length(); i++) -->Line_5 $$ for (int j = 0; j < from.length; j += 1) [ CD ]
Line_9 $$ if (text.regionMatches(i, toReplace, 0, len)) -->Line_11 $$ i += len - 1[ CD ]
Line_8 $$ final int len = toReplace.length()-->Line_11 $$ i += len - 1[ FD ]
Line_4 $$ for (int i = 0; i < text.length(); i++) -->Line_15 $$ result.append(text.charAt(i))[ CD ]
