Line_6 $$ int k = 0-->Line_10 $$ min = Math.min(min, k)[ FD ]
Line_12 $$ List<String> lines = new ArrayList<String>()-->Line_14 $$ lines.add(s.substring(min))[ FD ]
Line_10 $$ min = Math.min(min, k)-->Line_14 $$ lines.add(s.substring(min))[ FD ]
Line_2 $$ private static String adjustMultiLine(String expected) -->Line_3 $$ final List<String> strings = StringUtil.split(StringUtil.trimStart(expected, "\n"), "\n")[ CD ]
Line_12 $$ List<String> lines = new ArrayList<String>()-->Line_16 $$ return StringUtil.join(lines, "\n") + "\n"[ FD ]
Line_6 $$ int k = 0-->Line_7 $$ while (k < s.length() && s.charAt(k) == ' ') [ FD ]
Line_2 $$ private static String adjustMultiLine(String expected) -->Line_16 $$ return StringUtil.join(lines, "\n") + "\n"[ CD ]
Line_2 $$ private static String adjustMultiLine(String expected) -->Line_3 $$ final List<String> strings = StringUtil.split(StringUtil.trimStart(expected, "\n"), "\n")[ FD ]
Line_5 $$ for (String s : strings) -->Line_7 $$ while (k < s.length() && s.charAt(k) == ' ') [ FD ]
Line_5 $$ for (String s : strings) -->Line_14 $$ lines.add(s.substring(min))[ FD ]
Line_7 $$ while (k < s.length() && s.charAt(k) == ' ') -->Line_8 $$ k++[ CD ]
Line_4 $$ int min = Integer.MAX_VALUE-->Line_14 $$ lines.add(s.substring(min))[ FD ]
Line_4 $$ int min = Integer.MAX_VALUE-->Line_10 $$ min = Math.min(min, k)[ FD ]
Line_2 $$ private static String adjustMultiLine(String expected) -->Line_12 $$ List<String> lines = new ArrayList<String>()[ CD ]
Line_2 $$ private static String adjustMultiLine(String expected) -->Line_4 $$ int min = Integer.MAX_VALUE[ CD ]
Line_6 $$ int k = 0-->Line_8 $$ k++[ FD ]
