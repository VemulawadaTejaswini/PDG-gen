Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_33 $$ return path[ CD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_8 $$ if (leading) [ CD ]
Line_9 $$ for (int i = 0; i < path.length(); i++) -->Line_10 $$ if (path.charAt(i) == CharPool.SLASH) [ CD ]
Line_8 $$ if (leading) -->Line_9 $$ for (int i = 0; i < path.length(); i++) [ CD ]
Line_17 $$ if (trailing) -->Line_18 $$ for (int i = path.length() - 1; i >= 0; i--) [ CD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_26 $$ int slashCount = leadingSlashCount + trailingSlashCount[ CD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_3 $$ if (path == null) [ CD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_18 $$ for (int i = path.length() - 1; i >= 0; i--) [ FD ]
Line_6 $$ int leadingSlashCount = 0-->Line_31 $$ path = path.substring(leadingSlashCount, path.length() - trailingSlashCount)[ FD ]
Line_18 $$ for (int i = path.length() - 1; i >= 0; i--) -->Line_19 $$ if (path.charAt(i) == CharPool.SLASH) [ CD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_3 $$ if (path == null) [ FD ]
Line_19 $$ if (path.charAt(i) == CharPool.SLASH) -->Line_20 $$ trailingSlashCount++[ CD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_7 $$ int trailingSlashCount = 0[ CD ]
Line_18 $$ for (int i = path.length() - 1; i >= 0; i--) -->Line_19 $$ if (path.charAt(i) == CharPool.SLASH) [ FD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_31 $$ path = path.substring(leadingSlashCount, path.length() - trailingSlashCount)[ FD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_10 $$ if (path.charAt(i) == CharPool.SLASH) [ FD ]
Line_27 $$ if (slashCount > path.length()) -->Line_28 $$ return StringPool.BLANK[ CD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_6 $$ int leadingSlashCount = 0[ CD ]
Line_6 $$ int leadingSlashCount = 0-->Line_11 $$ leadingSlashCount++[ FD ]
Line_30 $$ if (slashCount > 0) -->Line_31 $$ path = path.substring(leadingSlashCount, path.length() - trailingSlashCount)[ CD ]
Line_9 $$ for (int i = 0; i < path.length(); i++) -->Line_10 $$ if (path.charAt(i) == CharPool.SLASH) [ FD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_17 $$ if (trailing) [ CD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_27 $$ if (slashCount > path.length()) [ FD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_19 $$ if (path.charAt(i) == CharPool.SLASH) [ FD ]
Line_26 $$ int slashCount = leadingSlashCount + trailingSlashCount-->Line_27 $$ if (slashCount > path.length()) [ FD ]
Line_9 $$ for (int i = 0; i < path.length(); i++) -->Line_19 $$ if (path.charAt(i) == CharPool.SLASH) [ FD ]
Line_7 $$ int trailingSlashCount = 0-->Line_20 $$ trailingSlashCount++[ FD ]
Line_10 $$ if (path.charAt(i) == CharPool.SLASH) -->Line_11 $$ leadingSlashCount++[ CD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_27 $$ if (slashCount > path.length()) [ CD ]
Line_3 $$ if (path == null) -->Line_4 $$ return StringPool.BLANK[ CD ]
Line_26 $$ int slashCount = leadingSlashCount + trailingSlashCount-->Line_30 $$ if (slashCount > 0) [ FD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_9 $$ for (int i = 0; i < path.length(); i++) [ FD ]
Line_2 $$ public String fixPath(String path, boolean leading, boolean trailing) -->Line_30 $$ if (slashCount > 0) [ CD ]
Line_9 $$ for (int i = 0; i < path.length(); i++) -->Line_18 $$ for (int i = path.length() - 1; i >= 0; i--) [ FD ]
