Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_5 $$ final PsiElement referenceParent = reference.getParent()[ FD ]
Line_21 $$ PsiExpression qualifier-->Line_23 $$ while ((qualifier = currentReference.getQualifierExpression()) != null) [ FD ]
Line_4 $$ boolean typedVarProcessed = false-->Line_9 $$ typedVarProcessed = true[ FD ]
Line_6 $$ if ((myCompilingVisitor.getContext().getPattern().isRealTypedVar(reference)) && reference.getQualifierExpression() == null && !(referenceParent instanceof PsiExpressionStatement)) -->Line_9 $$ typedVarProcessed = true[ CD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_14 $$ MatchingHandler handler = myCompilingVisitor.getContext().getPattern().getHandler(reference)[ FD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_16 $$ if (!typedVarProcessed && !(handler instanceof SubstitutionHandler)) [ CD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_3 $$ visitElement(reference)[ CD ]
Line_19 $$ if (resolve instanceof PsiClass || (resolve == null && ((referencedName != null && Character.isUpperCase(referencedName.charAt(0))) || referenceQualifier == null))) -->Line_23 $$ while ((qualifier = currentReference.getQualifierExpression()) != null) [ CD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_15 $$ final String referencedName = reference.getReferenceName()[ FD ]
Line_24 $$ if (!(qualifier instanceof PsiReferenceExpression) || myCompilingVisitor.getContext().getPattern().getHandler(qualifier) instanceof SubstitutionHandler) -->Line_25 $$ hasNoNestedSubstitutionHandlers = true[ CD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_3 $$ visitElement(reference)[ FD ]
Line_30 $$ if (!hasNoNestedSubstitutionHandlers && PsiTreeUtil.getChildOfType(reference, PsiAnnotation.class) == null) -->Line_31 $$ createAndSetSubstitutionHandlerFromReference(reference, resolve != null ? ((PsiClass) resolve).getQualifiedName() : reference.getText(), referenceParent instanceof PsiReferenceExpression)[ CD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_17 $$ final PsiElement resolve = reference.resolve()[ FD ]
Line_19 $$ if (resolve instanceof PsiClass || (resolve == null && ((referencedName != null && Character.isUpperCase(referencedName.charAt(0))) || referenceQualifier == null))) -->Line_20 $$ boolean hasNoNestedSubstitutionHandlers = false[ CD ]
Line_25 $$ hasNoNestedSubstitutionHandlers = true-->Line_30 $$ if (!hasNoNestedSubstitutionHandlers && PsiTreeUtil.getChildOfType(reference, PsiAnnotation.class) == null) [ FD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_33 $$ if (referenceQualifier != null && reference.getParent() instanceof PsiExpressionStatement) [ FD ]
Line_19 $$ if (resolve instanceof PsiClass || (resolve == null && ((referencedName != null && Character.isUpperCase(referencedName.charAt(0))) || referenceQualifier == null))) -->Line_22 $$ PsiReferenceExpression currentReference = reference[ CD ]
Line_19 $$ if (resolve instanceof PsiClass || (resolve == null && ((referencedName != null && Character.isUpperCase(referencedName.charAt(0))) || referenceQualifier == null))) -->Line_33 $$ if (referenceQualifier != null && reference.getParent() instanceof PsiExpressionStatement) [ CD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_6 $$ if ((myCompilingVisitor.getContext().getPattern().isRealTypedVar(reference)) && reference.getQualifierExpression() == null && !(referenceParent instanceof PsiExpressionStatement)) [ FD ]
Line_15 $$ final String referencedName = reference.getReferenceName()-->Line_19 $$ if (resolve instanceof PsiClass || (resolve == null && ((referencedName != null && Character.isUpperCase(referencedName.charAt(0))) || referenceQualifier == null))) [ FD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_11 $$ if (!(referenceParent instanceof PsiMethodCallExpression)) [ CD ]
Line_22 $$ PsiReferenceExpression currentReference = reference-->Line_28 $$ currentReference = (PsiReferenceExpression) qualifier[ FD ]
Line_23 $$ while ((qualifier = currentReference.getQualifierExpression()) != null) -->Line_28 $$ currentReference = (PsiReferenceExpression) qualifier[ CD ]
Line_22 $$ PsiReferenceExpression currentReference = reference-->Line_23 $$ while ((qualifier = currentReference.getQualifierExpression()) != null) [ FD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_7 $$ MatchingHandler handler = myCompilingVisitor.getContext().getPattern().getHandler(reference)[ FD ]
Line_9 $$ typedVarProcessed = true-->Line_16 $$ if (!typedVarProcessed && !(handler instanceof SubstitutionHandler)) [ FD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_4 $$ boolean typedVarProcessed = false[ CD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_14 $$ MatchingHandler handler = myCompilingVisitor.getContext().getPattern().getHandler(reference)[ CD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_12 $$ handleReference(reference)[ FD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_5 $$ final PsiElement referenceParent = reference.getParent()[ CD ]
Line_6 $$ if ((myCompilingVisitor.getContext().getPattern().isRealTypedVar(reference)) && reference.getQualifierExpression() == null && !(referenceParent instanceof PsiExpressionStatement)) -->Line_8 $$ GlobalCompilingVisitor.setFilter(handler, ExpressionFilter.getInstance())[ CD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_6 $$ if ((myCompilingVisitor.getContext().getPattern().isRealTypedVar(reference)) && reference.getQualifierExpression() == null && !(referenceParent instanceof PsiExpressionStatement)) [ CD ]
Line_16 $$ if (!typedVarProcessed && !(handler instanceof SubstitutionHandler)) -->Line_18 $$ PsiElement referenceQualifier = reference.getQualifier()[ CD ]
Line_28 $$ currentReference = (PsiReferenceExpression) qualifier-->Line_23 $$ while ((qualifier = currentReference.getQualifierExpression()) != null) [ FD ]
Line_20 $$ boolean hasNoNestedSubstitutionHandlers = false-->Line_25 $$ hasNoNestedSubstitutionHandlers = true[ FD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_30 $$ if (!hasNoNestedSubstitutionHandlers && PsiTreeUtil.getChildOfType(reference, PsiAnnotation.class) == null) [ FD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_31 $$ createAndSetSubstitutionHandlerFromReference(reference, resolve != null ? ((PsiClass) resolve).getQualifiedName() : reference.getText(), referenceParent instanceof PsiReferenceExpression)[ FD ]
Line_23 $$ while ((qualifier = currentReference.getQualifierExpression()) != null) -->Line_24 $$ if (!(qualifier instanceof PsiReferenceExpression) || myCompilingVisitor.getContext().getPattern().getHandler(qualifier) instanceof SubstitutionHandler) [ FD ]
Line_20 $$ boolean hasNoNestedSubstitutionHandlers = false-->Line_30 $$ if (!hasNoNestedSubstitutionHandlers && PsiTreeUtil.getChildOfType(reference, PsiAnnotation.class) == null) [ FD ]
Line_16 $$ if (!typedVarProcessed && !(handler instanceof SubstitutionHandler)) -->Line_17 $$ final PsiElement resolve = reference.resolve()[ CD ]
Line_16 $$ if (!typedVarProcessed && !(handler instanceof SubstitutionHandler)) -->Line_19 $$ if (resolve instanceof PsiClass || (resolve == null && ((referencedName != null && Character.isUpperCase(referencedName.charAt(0))) || referenceQualifier == null))) [ CD ]
Line_4 $$ boolean typedVarProcessed = false-->Line_16 $$ if (!typedVarProcessed && !(handler instanceof SubstitutionHandler)) [ FD ]
Line_6 $$ if ((myCompilingVisitor.getContext().getPattern().isRealTypedVar(reference)) && reference.getQualifierExpression() == null && !(referenceParent instanceof PsiExpressionStatement)) -->Line_7 $$ MatchingHandler handler = myCompilingVisitor.getContext().getPattern().getHandler(reference)[ CD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_18 $$ PsiElement referenceQualifier = reference.getQualifier()[ FD ]
Line_19 $$ if (resolve instanceof PsiClass || (resolve == null && ((referencedName != null && Character.isUpperCase(referencedName.charAt(0))) || referenceQualifier == null))) -->Line_30 $$ if (!hasNoNestedSubstitutionHandlers && PsiTreeUtil.getChildOfType(reference, PsiAnnotation.class) == null) [ CD ]
Line_7 $$ MatchingHandler handler = myCompilingVisitor.getContext().getPattern().getHandler(reference)-->Line_8 $$ GlobalCompilingVisitor.setFilter(handler, ExpressionFilter.getInstance())[ FD ]
Line_23 $$ while ((qualifier = currentReference.getQualifierExpression()) != null) -->Line_24 $$ if (!(qualifier instanceof PsiReferenceExpression) || myCompilingVisitor.getContext().getPattern().getHandler(qualifier) instanceof SubstitutionHandler) [ CD ]
Line_2 $$ public void visitReferenceExpression(PsiReferenceExpression reference) -->Line_15 $$ final String referencedName = reference.getReferenceName()[ CD ]
Line_21 $$ PsiExpression qualifier-->Line_24 $$ if (!(qualifier instanceof PsiReferenceExpression) || myCompilingVisitor.getContext().getPattern().getHandler(qualifier) instanceof SubstitutionHandler) [ FD ]
Line_11 $$ if (!(referenceParent instanceof PsiMethodCallExpression)) -->Line_12 $$ handleReference(reference)[ CD ]
Line_19 $$ if (resolve instanceof PsiClass || (resolve == null && ((referencedName != null && Character.isUpperCase(referencedName.charAt(0))) || referenceQualifier == null))) -->Line_21 $$ PsiExpression qualifier[ CD ]
