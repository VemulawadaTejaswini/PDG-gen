Line_2 $$ public String escapeXPath(String xPath) -->Line_3 $$ if (Validator.isNull(xPath)) [ CD ]
Line_7 $$ for (int i = 0; i < xPath.length(); i++) -->Line_9 $$ boolean hasToken = false[ CD ]
Line_2 $$ public String escapeXPath(String xPath) -->Line_6 $$ StringBuilder sb = new StringBuilder(xPath.length())[ FD ]
Line_7 $$ for (int i = 0; i < xPath.length(); i++) -->Line_8 $$ char c = xPath.charAt(i)[ CD ]
Line_10 $$ for (int j = 0; j < _XPATH_TOKENS.length; j++) -->Line_11 $$ if (c == _XPATH_TOKENS[j]) [ CD ]
Line_8 $$ char c = xPath.charAt(i)-->Line_11 $$ if (c == _XPATH_TOKENS[j]) [ FD ]
Line_7 $$ for (int i = 0; i < xPath.length(); i++) -->Line_8 $$ char c = xPath.charAt(i)[ FD ]
Line_8 $$ char c = xPath.charAt(i)-->Line_19 $$ sb.append(c)[ FD ]
Line_16 $$ if (hasToken) -->Line_17 $$ sb.append(StringPool.UNDERLINE)[ CD ]
Line_7 $$ for (int i = 0; i < xPath.length(); i++) -->Line_10 $$ for (int j = 0; j < _XPATH_TOKENS.length; j++) [ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder(xPath.length())-->Line_22 $$ return sb.toString()[ FD ]
Line_2 $$ public String escapeXPath(String xPath) -->Line_22 $$ return sb.toString()[ CD ]
Line_2 $$ public String escapeXPath(String xPath) -->Line_8 $$ char c = xPath.charAt(i)[ FD ]
Line_7 $$ for (int i = 0; i < xPath.length(); i++) -->Line_16 $$ if (hasToken) [ CD ]
Line_2 $$ public String escapeXPath(String xPath) -->Line_6 $$ StringBuilder sb = new StringBuilder(xPath.length())[ CD ]
Line_2 $$ public String escapeXPath(String xPath) -->Line_3 $$ if (Validator.isNull(xPath)) [ FD ]
Line_6 $$ StringBuilder sb = new StringBuilder(xPath.length())-->Line_17 $$ sb.append(StringPool.UNDERLINE)[ FD ]
Line_6 $$ StringBuilder sb = new StringBuilder(xPath.length())-->Line_19 $$ sb.append(c)[ FD ]
Line_9 $$ boolean hasToken = false-->Line_12 $$ hasToken = true[ FD ]
Line_2 $$ public String escapeXPath(String xPath) -->Line_7 $$ for (int i = 0; i < xPath.length(); i++) [ FD ]
Line_16 $$ if (hasToken) -->Line_19 $$ sb.append(c)[ CD ]
Line_3 $$ if (Validator.isNull(xPath)) -->Line_4 $$ return xPath[ CD ]
Line_2 $$ public String escapeXPath(String xPath) -->Line_7 $$ for (int i = 0; i < xPath.length(); i++) [ CD ]
Line_11 $$ if (c == _XPATH_TOKENS[j]) -->Line_12 $$ hasToken = true[ CD ]
