Line_70 $$ if (x != -1) -->Line_71 $$ String firstLine = line.substring(0, x)[ CD ]
Line_69 $$ x = line.lastIndexOf(StringPool.SPACE)-->Line_81 $$ if (x != -1) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_7 $$ if (line.endsWith(StringPool.OPEN_PARENTHESIS) || line.endsWith(StringPool.SEMICOLON)) [ CD ]
Line_25 $$ x = line.indexOf(", ", x + 1)-->Line_81 $$ if (x != -1) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_32 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ FD ]
Line_31 $$ String secondLine = indent + line.substring(x + 2)-->Line_93 $$ if (secondLine.endsWith(") [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_16 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_39 $$ String firstLine = line.substring(0, x)[ FD ]
Line_46 $$ if ((x != -1) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) -->Line_51 $$ String firstLine = line.substring(0, x + 1)[ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_18 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n" + StringPool.TAB)[ FD ]
Line_58 $$ if (x != -1) -->Line_59 $$ char c = line.charAt(x - 1)[ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_87 $$ int i = getIfClauseLineBreakPos(line)[ CD ]
Line_46 $$ if ((x != -1) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) -->Line_48 $$ if (line.endsWith(StringPool.CLOSE_PARENTHESIS)) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_17 $$ if (Validator.isNotNull(getNextLine(content, lineCount))) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_66 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_72 $$ String secondLine = indent + StringPool.TAB + line.substring(x + 1)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_96 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ CD ]
Line_48 $$ if (line.endsWith(StringPool.CLOSE_PARENTHESIS)) -->Line_49 $$ secondLineIndent += StringPool.TAB[ CD ]
Line_38 $$ if (x != -1) -->Line_41 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ CD ]
Line_14 $$ String secondLine = indent + StringPool.TAB + line.substring(x + 3)-->Line_73 $$ if (getLineLength(secondLine) <= _MAX_LINE_LENGTH) [ FD ]
Line_36 $$ if ((line.endsWith(StringPool.OPEN_CURLY_BRACE) || line.endsWith(StringPool.SEMICOLON)) && (trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public "))) -->Line_38 $$ if (x != -1) [ CD ]
Line_8 $$ int x = line.indexOf(" = ")-->Line_38 $$ if (x != -1) [ FD ]
Line_24 $$ while (true) -->Line_26 $$ if (x == -1) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_44 $$ if ((line.endsWith(StringPool.CLOSE_PARENTHESIS) || line.endsWith(StringPool.OPEN_CURLY_BRACE)) && (trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public "))) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_84 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n\n")[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_44 $$ if ((line.endsWith(StringPool.CLOSE_PARENTHESIS) || line.endsWith(StringPool.OPEN_CURLY_BRACE)) && (trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public "))) [ FD ]
Line_47 $$ String secondLineIndent = indent + StringPool.TAB-->Line_49 $$ secondLineIndent += StringPool.TAB[ FD ]
Line_46 $$ if ((x != -1) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) -->Line_53 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ CD ]
Line_8 $$ int x = line.indexOf(" = ")-->Line_81 $$ if (x != -1) [ FD ]
Line_8 $$ int x = line.indexOf(" = ")-->Line_39 $$ String firstLine = line.substring(0, x)[ FD ]
Line_87 $$ int i = getIfClauseLineBreakPos(line)-->Line_91 $$ String firstLine = line.substring(0, i)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_61 $$ String firstLine = line.substring(0, x + 1)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_10 $$ String firstLine = line.substring(0, x + 2)[ FD ]
Line_56 $$ if (line.endsWith(StringPool.SEMICOLON)) -->Line_57 $$ int x = line.indexOf(CharPool.OPEN_PARENTHESIS)[ CD ]
Line_9 $$ if (x != -1) -->Line_14 $$ String secondLine = indent + StringPool.TAB + line.substring(x + 3)[ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_45 $$ int x = line.indexOf(CharPool.OPEN_PARENTHESIS)[ FD ]
Line_60 $$ if ((c != CharPool.SPACE) && (c != CharPool.TAB) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) -->Line_62 $$ if (firstLine.contains(StringPool.QUOTE)) [ CD ]
Line_4 $$ for (int i = 0; i < getLeadingTabCount(line); i++) -->Line_92 $$ String secondLine = indent + line.substring(i)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_94 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n\n")[ FD ]
Line_15 $$ if (line.endsWith(StringPool.SEMICOLON)) -->Line_17 $$ if (Validator.isNotNull(getNextLine(content, lineCount))) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_14 $$ String secondLine = indent + StringPool.TAB + line.substring(x + 3)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_22 $$ if (line.endsWith(StringPool.CLOSE_PARENTHESIS) || line.endsWith(StringPool.COMMA) || line.endsWith(StringPool.OPEN_CURLY_BRACE) || line.endsWith(StringPool.SEMICOLON)) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_74 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ FD ]
Line_9 $$ if (x != -1) -->Line_11 $$ if (firstLine.contains(StringPool.QUOTE)) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_8 $$ int x = line.indexOf(" = ")[ FD ]
Line_70 $$ if (x != -1) -->Line_73 $$ if (getLineLength(secondLine) <= _MAX_LINE_LENGTH) [ CD ]
Line_73 $$ if (getLineLength(secondLine) <= _MAX_LINE_LENGTH) -->Line_74 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ CD ]
Line_38 $$ if (x != -1) -->Line_39 $$ String firstLine = line.substring(0, x)[ CD ]
Line_25 $$ x = line.indexOf(", ", x + 1)-->Line_70 $$ if (x != -1) [ FD ]
Line_4 $$ for (int i = 0; i < getLeadingTabCount(line); i++) -->Line_88 $$ if (i == -1) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_71 $$ String firstLine = line.substring(0, x)[ FD ]
Line_46 $$ if ((x != -1) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) -->Line_47 $$ String secondLineIndent = indent + StringPool.TAB[ CD ]
Line_4 $$ for (int i = 0; i < getLeadingTabCount(line); i++) -->Line_91 $$ String firstLine = line.substring(0, i)[ FD ]
Line_44 $$ if ((line.endsWith(StringPool.CLOSE_PARENTHESIS) || line.endsWith(StringPool.OPEN_CURLY_BRACE)) && (trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public "))) -->Line_46 $$ if ((x != -1) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_65 $$ String secondLine = indent + StringPool.TAB + line.substring(x + 1)[ FD ]
Line_88 $$ if (i == -1) -->Line_89 $$ return null[ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_60 $$ if ((c != CharPool.SPACE) && (c != CharPool.TAB) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) [ FD ]
Line_31 $$ String secondLine = indent + line.substring(x + 2)-->Line_73 $$ if (getLineLength(secondLine) <= _MAX_LINE_LENGTH) [ FD ]
Line_9 $$ if (x != -1) -->Line_10 $$ String firstLine = line.substring(0, x + 2)[ CD ]
Line_15 $$ if (line.endsWith(StringPool.SEMICOLON)) -->Line_16 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_30 $$ String firstLine = line.substring(0, x + 1)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_4 $$ for (int i = 0; i < getLeadingTabCount(line); i++) [ FD ]
Line_7 $$ if (line.endsWith(StringPool.OPEN_PARENTHESIS) || line.endsWith(StringPool.SEMICOLON)) -->Line_9 $$ if (x != -1) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_7 $$ if (line.endsWith(StringPool.OPEN_PARENTHESIS) || line.endsWith(StringPool.SEMICOLON)) [ FD ]
Line_8 $$ int x = line.indexOf(" = ")-->Line_29 $$ if (isValidJavaParameter(line.substring(0, x))) [ FD ]
Line_7 $$ if (line.endsWith(StringPool.OPEN_PARENTHESIS) || line.endsWith(StringPool.SEMICOLON)) -->Line_8 $$ int x = line.indexOf(" = ")[ CD ]
Line_25 $$ x = line.indexOf(", ", x + 1)-->Line_26 $$ if (x == -1) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_25 $$ x = line.indexOf(", ", x + 1)[ FD ]
Line_36 $$ if ((line.endsWith(StringPool.OPEN_CURLY_BRACE) || line.endsWith(StringPool.SEMICOLON)) && (trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public "))) -->Line_37 $$ int x = line.indexOf(" throws ")[ CD ]
Line_14 $$ String secondLine = indent + StringPool.TAB + line.substring(x + 3)-->Line_93 $$ if (secondLine.endsWith(") [ FD ]
Line_62 $$ if (firstLine.contains(StringPool.QUOTE)) -->Line_63 $$ return null[ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_88 $$ if (i == -1) [ CD ]
Line_29 $$ if (isValidJavaParameter(line.substring(0, x))) -->Line_31 $$ String secondLine = indent + line.substring(x + 2)[ CD ]
Line_69 $$ x = line.lastIndexOf(StringPool.SPACE)-->Line_71 $$ String firstLine = line.substring(0, x)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_37 $$ int x = line.indexOf(" throws ")[ FD ]
Line_30 $$ String firstLine = line.substring(0, x + 1)-->Line_62 $$ if (firstLine.contains(StringPool.QUOTE)) [ FD ]
Line_60 $$ if ((c != CharPool.SPACE) && (c != CharPool.TAB) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) -->Line_61 $$ String firstLine = line.substring(0, x + 1)[ CD ]
Line_58 $$ if (x != -1) -->Line_70 $$ if (x != -1) [ CD ]
Line_25 $$ x = line.indexOf(", ", x + 1)-->Line_71 $$ String firstLine = line.substring(0, x)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_91 $$ String firstLine = line.substring(0, i)[ CD ]
Line_79 $$ if (line.contains(StringPool.TAB + "for (") && line.endsWith(" -->Line_81 $$ if (x != -1) [ CD ]
Line_79 $$ if (line.contains(StringPool.TAB + "for (") && line.endsWith(" -->Line_80 $$ int x = line.indexOf(" : ")[ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_29 $$ if (isValidJavaParameter(line.substring(0, x))) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_36 $$ if ((line.endsWith(StringPool.OPEN_CURLY_BRACE) || line.endsWith(StringPool.SEMICOLON)) && (trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public "))) [ FD ]
Line_44 $$ if ((line.endsWith(StringPool.CLOSE_PARENTHESIS) || line.endsWith(StringPool.OPEN_CURLY_BRACE)) && (trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public "))) -->Line_45 $$ int x = line.indexOf(CharPool.OPEN_PARENTHESIS)[ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_56 $$ if (line.endsWith(StringPool.SEMICOLON)) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_56 $$ if (line.endsWith(StringPool.SEMICOLON)) [ FD ]
Line_10 $$ String firstLine = line.substring(0, x + 2)-->Line_62 $$ if (firstLine.contains(StringPool.QUOTE)) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_15 $$ if (line.endsWith(StringPool.SEMICOLON)) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_79 $$ if (line.contains(StringPool.TAB + "for (") && line.endsWith(" [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_80 $$ int x = line.indexOf(" : ")[ FD ]
Line_81 $$ if (x != -1) -->Line_84 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n\n")[ CD ]
Line_29 $$ if (isValidJavaParameter(line.substring(0, x))) -->Line_30 $$ String firstLine = line.substring(0, x + 1)[ CD ]
Line_24 $$ while (true) -->Line_29 $$ if (isValidJavaParameter(line.substring(0, x))) [ CD ]
Line_25 $$ x = line.indexOf(", ", x + 1)-->Line_39 $$ String firstLine = line.substring(0, x)[ FD ]
Line_8 $$ int x = line.indexOf(" = ")-->Line_25 $$ x = line.indexOf(", ", x + 1)[ FD ]
Line_58 $$ if (x != -1) -->Line_69 $$ x = line.lastIndexOf(StringPool.SPACE)[ CD ]
Line_11 $$ if (firstLine.contains(StringPool.QUOTE)) -->Line_12 $$ return null[ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_51 $$ String firstLine = line.substring(0, x + 1)[ FD ]
Line_81 $$ if (x != -1) -->Line_82 $$ String firstLine = line.substring(0, x + 2)[ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_22 $$ if (line.endsWith(StringPool.CLOSE_PARENTHESIS) || line.endsWith(StringPool.COMMA) || line.endsWith(StringPool.OPEN_CURLY_BRACE) || line.endsWith(StringPool.SEMICOLON)) [ FD ]
Line_8 $$ int x = line.indexOf(" = ")-->Line_70 $$ if (x != -1) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_53 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ FD ]
Line_8 $$ int x = line.indexOf(" = ")-->Line_69 $$ x = line.lastIndexOf(StringPool.SPACE)[ FD ]
Line_69 $$ x = line.lastIndexOf(StringPool.SPACE)-->Line_70 $$ if (x != -1) [ FD ]
Line_8 $$ int x = line.indexOf(" = ")-->Line_26 $$ if (x == -1) [ FD ]
Line_10 $$ String firstLine = line.substring(0, x + 2)-->Line_11 $$ if (firstLine.contains(StringPool.QUOTE)) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_83 $$ String secondLine = indent + StringPool.TAB + StringPool.TAB + line.substring(x + 3)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_96 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_91 $$ String firstLine = line.substring(0, i)[ FD ]
Line_17 $$ if (Validator.isNotNull(getNextLine(content, lineCount))) -->Line_18 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n" + StringPool.TAB)[ CD ]
Line_87 $$ int i = getIfClauseLineBreakPos(line)-->Line_92 $$ String secondLine = indent + line.substring(i)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_46 $$ if ((x != -1) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) [ FD ]
Line_25 $$ x = line.indexOf(", ", x + 1)-->Line_58 $$ if (x != -1) [ FD ]
Line_8 $$ int x = line.indexOf(" = ")-->Line_58 $$ if (x != -1) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_87 $$ int i = getIfClauseLineBreakPos(line)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_82 $$ String firstLine = line.substring(0, x + 2)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_40 $$ String secondLine = indent + StringPool.TAB + line.substring(x + 1)[ FD ]
Line_87 $$ int i = getIfClauseLineBreakPos(line)-->Line_88 $$ if (i == -1) [ FD ]
Line_56 $$ if (line.endsWith(StringPool.SEMICOLON)) -->Line_58 $$ if (x != -1) [ CD ]
Line_9 $$ if (x != -1) -->Line_15 $$ if (line.endsWith(StringPool.SEMICOLON)) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_57 $$ int x = line.indexOf(CharPool.OPEN_PARENTHESIS)[ FD ]
Line_24 $$ while (true) -->Line_25 $$ x = line.indexOf(", ", x + 1)[ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_79 $$ if (line.contains(StringPool.TAB + "for (") && line.endsWith(" [ CD ]
Line_93 $$ if (secondLine.endsWith(") -->Line_94 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n\n")[ CD ]
Line_29 $$ if (isValidJavaParameter(line.substring(0, x))) -->Line_32 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_52 $$ String secondLine = secondLineIndent + line.substring(x + 1)[ FD ]
Line_22 $$ if (line.endsWith(StringPool.CLOSE_PARENTHESIS) || line.endsWith(StringPool.COMMA) || line.endsWith(StringPool.OPEN_CURLY_BRACE) || line.endsWith(StringPool.SEMICOLON)) -->Line_24 $$ while (true) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_48 $$ if (line.endsWith(StringPool.CLOSE_PARENTHESIS)) [ FD ]
Line_3 $$ String indent = StringPool.BLANK-->Line_5 $$ indent += StringPool.TAB[ FD ]
Line_8 $$ int x = line.indexOf(" = ")-->Line_71 $$ String firstLine = line.substring(0, x)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_36 $$ if ((line.endsWith(StringPool.OPEN_CURLY_BRACE) || line.endsWith(StringPool.SEMICOLON)) && (trimmedLine.startsWith("private ") || trimmedLine.startsWith("protected ") || trimmedLine.startsWith("public "))) [ CD ]
Line_58 $$ if (x != -1) -->Line_60 $$ if ((c != CharPool.SPACE) && (c != CharPool.TAB) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_4 $$ for (int i = 0; i < getLeadingTabCount(line); i++) [ CD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_31 $$ String secondLine = indent + line.substring(x + 2)[ FD ]
Line_8 $$ int x = line.indexOf(" = ")-->Line_9 $$ if (x != -1) [ FD ]
Line_25 $$ x = line.indexOf(", ", x + 1)-->Line_38 $$ if (x != -1) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_93 $$ if (secondLine.endsWith(") [ CD ]
Line_4 $$ for (int i = 0; i < getLeadingTabCount(line); i++) -->Line_5 $$ indent += StringPool.TAB[ CD ]
Line_60 $$ if ((c != CharPool.SPACE) && (c != CharPool.TAB) && (line.charAt(x + 1) != CharPool.CLOSE_PARENTHESIS)) -->Line_66 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ CD ]
Line_25 $$ x = line.indexOf(", ", x + 1)-->Line_29 $$ if (isValidJavaParameter(line.substring(0, x))) [ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_41 $$ return StringUtil.replace(content, "\n" + line + "\n", "\n" + firstLine + "\n" + secondLine + "\n")[ FD ]
Line_25 $$ x = line.indexOf(", ", x + 1)-->Line_69 $$ x = line.lastIndexOf(StringPool.SPACE)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_92 $$ String secondLine = indent + line.substring(i)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_59 $$ char c = line.charAt(x - 1)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_69 $$ x = line.lastIndexOf(StringPool.SPACE)[ FD ]
Line_2 $$ protected String getTruncateLongLinesContent(String content, String line, String trimmedLine, int lineCount) -->Line_3 $$ String indent = StringPool.BLANK[ CD ]
