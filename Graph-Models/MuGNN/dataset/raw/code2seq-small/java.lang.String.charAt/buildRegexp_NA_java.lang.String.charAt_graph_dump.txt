Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_47 $$ if (allowToLower) [ CD ]
Line_43 $$ if (!firstIdentifierLetter) -->Line_44 $$ buffer.append("[a-z\\s0-9\\$]*")[ CD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_54 $$ buffer.append(Character.toLowerCase(c))[ FD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_73 $$ if (c == '.') [ FD ]
Line_87 $$ firstIdentifierLetter = true-->Line_74 $$ if (!firstIdentifierLetter) [ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_29 $$ if (exactPrefixLen == 0) [ CD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_34 $$ for (int i = exactPrefixLen; i < pattern.length(); i++) [ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_64 $$ buffer.append("([a-z\\s0-9\\$]*[-_]+)?")[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_11 $$ final boolean endsWithSpace = !forCompletion && StringUtil.endsWithChar(pattern, ' ')[ CD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_53 $$ buffer.append(c)[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_8 $$ pattern = pattern.substring(0, MAX_LENGTH)[ FD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_67 $$ buffer.append(c)[ FD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_80 $$ if (c == ' ') [ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_23 $$ if (Character.isLetterOrDigit(c)) [ FD ]
Line_72 $$ firstIdentifierLetter = true-->Line_87 $$ firstIdentifierLetter = true[ FD ]
Line_23 $$ if (Character.isLetterOrDigit(c)) -->Line_26 $$ buffer.append("\\").append(c)[ CD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_60 $$ buffer.append(c)[ FD ]
Line_21 $$ for (int i = 0; i != exactPrefixLen; ++i) -->Line_35 $$ final char c = pattern.charAt(i)[ FD ]
Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_40 $$ prevIsUppercase = true[ CD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_85 $$ buffer.append("[A-Za-z\\s0-9\\$]*")[ FD ]
Line_17 $$ if (exactPrefixLen > 0) -->Line_19 $$ prevIsUppercase = Character.isUpperCase(c) || Character.isDigit(c)[ CD ]
Line_70 $$ if (c == '*') -->Line_72 $$ firstIdentifierLetter = true[ CD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_4 $$ if (eol != -1) [ CD ]
Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_43 $$ if (!firstIdentifierLetter) [ CD ]
Line_58 $$ if (Character.isLowerCase(c) && allowToUpper) -->Line_60 $$ buffer.append(c)[ CD ]
Line_11 $$ final boolean endsWithSpace = !forCompletion && StringUtil.endsWithChar(pattern, ' ')-->Line_91 $$ if (!endsWithSpace) [ FD ]
Line_32 $$ boolean firstIdentifierLetter = exactPrefixLen == 0-->Line_72 $$ firstIdentifierLetter = true[ FD ]
Line_72 $$ firstIdentifierLetter = true-->Line_51 $$ if (!firstIdentifierLetter) [ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_77 $$ buffer.append("\\.")[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_32 $$ boolean firstIdentifierLetter = exactPrefixLen == 0[ CD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_34 $$ for (int i = exactPrefixLen; i < pattern.length(); i++) [ CD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) [ FD ]
Line_80 $$ if (c == ' ') -->Line_87 $$ firstIdentifierLetter = true[ CD ]
Line_80 $$ if (c == ' ') -->Line_88 $$ buffer.append("\\").append(c)[ CD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_92 $$ buffer.append(".*")[ FD ]
Line_91 $$ if (!endsWithSpace) -->Line_93 $$ if (lastIsUppercase) [ CD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_59 $$ buffer.append('[')[ FD ]
Line_29 $$ if (exactPrefixLen == 0) -->Line_30 $$ buffer.append("_*")[ CD ]
Line_33 $$ boolean lastIsUppercase = false-->Line_41 $$ lastIsUppercase = true[ FD ]
Line_32 $$ boolean firstIdentifierLetter = exactPrefixLen == 0-->Line_51 $$ if (!firstIdentifierLetter) [ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_75 $$ buffer.append("[a-z\\s0-9\\$]*\\.")[ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_53 $$ buffer.append(c)[ FD ]
Line_34 $$ for (int i = exactPrefixLen; i < pattern.length(); i++) -->Line_36 $$ lastIsUppercase = false[ CD ]
Line_16 $$ boolean prevIsUppercase = false-->Line_40 $$ prevIsUppercase = true[ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_49 $$ buffer.append(Character.toLowerCase(c))[ FD ]
Line_69 $$ firstIdentifierLetter = false-->Line_82 $$ firstIdentifierLetter = true[ FD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_70 $$ if (c == '*') [ FD ]
Line_3 $$ final int eol = pattern.indexOf('\n')-->Line_5 $$ pattern = pattern.substring(0, eol)[ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_46 $$ buffer.append(c)[ FD ]
Line_37 $$ if (Character.isLetterOrDigit(c)) -->Line_70 $$ if (c == '*') [ CD ]
Line_12 $$ if (!forCompletion) -->Line_13 $$ pattern = pattern.trim()[ CD ]
Line_21 $$ for (int i = 0; i != exactPrefixLen; ++i) -->Line_23 $$ if (Character.isLetterOrDigit(c)) [ CD ]
Line_82 $$ firstIdentifierLetter = true-->Line_74 $$ if (!firstIdentifierLetter) [ FD ]
Line_73 $$ if (c == '.') -->Line_74 $$ if (!firstIdentifierLetter) [ CD ]
Line_21 $$ for (int i = 0; i != exactPrefixLen; ++i) -->Line_22 $$ final char c = pattern.charAt(i)[ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_46 $$ buffer.append(c)[ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_61 $$ buffer.append(Character.toUpperCase(c))[ FD ]
Line_58 $$ if (Character.isLowerCase(c) && allowToUpper) -->Line_62 $$ buffer.append(']')[ CD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_58 $$ if (Character.isLowerCase(c) && allowToUpper) [ FD ]
Line_36 $$ lastIsUppercase = false-->Line_41 $$ lastIsUppercase = true[ FD ]
Line_87 $$ firstIdentifierLetter = true-->Line_51 $$ if (!firstIdentifierLetter) [ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_60 $$ buffer.append(c)[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_22 $$ final char c = pattern.charAt(i)[ FD ]
Line_72 $$ firstIdentifierLetter = true-->Line_74 $$ if (!firstIdentifierLetter) [ FD ]
Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_41 $$ lastIsUppercase = true[ CD ]
Line_38 $$ prevIsUppercase = false-->Line_84 $$ if (c == ':' || prevIsUppercase) [ FD ]
Line_58 $$ if (Character.isLowerCase(c) && allowToUpper) -->Line_59 $$ buffer.append('[')[ CD ]
Line_79 $$ firstIdentifierLetter = true-->Line_87 $$ firstIdentifierLetter = true[ FD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_23 $$ if (Character.isLetterOrDigit(c)) [ FD ]
Line_72 $$ firstIdentifierLetter = true-->Line_79 $$ firstIdentifierLetter = true[ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_53 $$ buffer.append(c)[ FD ]
Line_51 $$ if (!firstIdentifierLetter) -->Line_52 $$ buffer.append("|[A-Za-z\\s0-9\\$]*[_-]+[")[ CD ]
Line_69 $$ firstIdentifierLetter = false-->Line_87 $$ firstIdentifierLetter = true[ FD ]
Line_93 $$ if (lastIsUppercase) -->Line_94 $$ buffer.append("[a-z\\s0-9\\$]*")[ CD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_67 $$ buffer.append(c)[ FD ]
Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_42 $$ buffer.append('(')[ CD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_37 $$ if (Character.isLetterOrDigit(c)) [ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_17 $$ if (exactPrefixLen > 0) [ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_13 $$ pattern = pattern.trim()[ FD ]
Line_19 $$ prevIsUppercase = Character.isUpperCase(c) || Character.isDigit(c)-->Line_84 $$ if (c == ':' || prevIsUppercase) [ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_21 $$ for (int i = 0; i != exactPrefixLen; ++i) [ FD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_58 $$ if (Character.isLowerCase(c) && allowToUpper) [ FD ]
Line_34 $$ for (int i = exactPrefixLen; i < pattern.length(); i++) -->Line_37 $$ if (Character.isLetterOrDigit(c)) [ CD ]
Line_17 $$ if (exactPrefixLen > 0) -->Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)[ CD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_80 $$ if (c == ' ') [ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_91 $$ if (!endsWithSpace) [ CD ]
Line_32 $$ boolean firstIdentifierLetter = exactPrefixLen == 0-->Line_79 $$ firstIdentifierLetter = true[ FD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_46 $$ buffer.append(c)[ FD ]
Line_37 $$ if (Character.isLetterOrDigit(c)) -->Line_38 $$ prevIsUppercase = false[ CD ]
Line_58 $$ if (Character.isLowerCase(c) && allowToUpper) -->Line_67 $$ buffer.append(c)[ CD ]
Line_74 $$ if (!firstIdentifierLetter) -->Line_77 $$ buffer.append("\\.")[ CD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_52 $$ buffer.append("|[A-Za-z\\s0-9\\$]*[_-]+[")[ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_44 $$ buffer.append("[a-z\\s0-9\\$]*")[ FD ]
Line_41 $$ lastIsUppercase = true-->Line_91 $$ if (!endsWithSpace) [ FD ]
Line_33 $$ boolean lastIsUppercase = false-->Line_36 $$ lastIsUppercase = false[ FD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_70 $$ if (c == '*') [ FD ]
Line_69 $$ firstIdentifierLetter = false-->Line_79 $$ firstIdentifierLetter = true[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_29 $$ if (exactPrefixLen == 0) [ FD ]
Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_57 $$ buffer.append(')')[ CD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_42 $$ buffer.append('(')[ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_24 $$ buffer.append(c)[ FD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_49 $$ buffer.append(Character.toLowerCase(c))[ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_61 $$ buffer.append(Character.toUpperCase(c))[ FD ]
Line_33 $$ boolean lastIsUppercase = false-->Line_91 $$ if (!endsWithSpace) [ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_67 $$ buffer.append(c)[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_16 $$ boolean prevIsUppercase = false[ CD ]
Line_58 $$ if (Character.isLowerCase(c) && allowToUpper) -->Line_61 $$ buffer.append(Character.toUpperCase(c))[ CD ]
Line_69 $$ firstIdentifierLetter = false-->Line_74 $$ if (!firstIdentifierLetter) [ FD ]
Line_16 $$ boolean prevIsUppercase = false-->Line_19 $$ prevIsUppercase = Character.isUpperCase(c) || Character.isDigit(c)[ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_73 $$ if (c == '.') [ FD ]
Line_82 $$ firstIdentifierLetter = true-->Line_87 $$ firstIdentifierLetter = true[ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_96 $$ return buffer.toString()[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_11 $$ final boolean endsWithSpace = !forCompletion && StringUtil.endsWithChar(pattern, ' ')[ FD ]
Line_32 $$ boolean firstIdentifierLetter = exactPrefixLen == 0-->Line_74 $$ if (!firstIdentifierLetter) [ FD ]
Line_37 $$ if (Character.isLetterOrDigit(c)) -->Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) [ CD ]
Line_7 $$ if (pattern.length() >= MAX_LENGTH) -->Line_8 $$ pattern = pattern.substring(0, MAX_LENGTH)[ CD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_60 $$ buffer.append(c)[ FD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_61 $$ buffer.append(Character.toUpperCase(c))[ FD ]
Line_36 $$ lastIsUppercase = false-->Line_91 $$ if (!endsWithSpace) [ FD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) [ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_54 $$ buffer.append(Character.toLowerCase(c))[ FD ]
Line_80 $$ if (c == ' ') -->Line_82 $$ firstIdentifierLetter = true[ CD ]
Line_51 $$ if (!firstIdentifierLetter) -->Line_55 $$ buffer.append("]")[ CD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_88 $$ buffer.append("\\").append(c)[ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_49 $$ buffer.append(Character.toLowerCase(c))[ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_81 $$ buffer.append("([a-z\\s0-9\\$_-]*[\\ _-]+)+")[ FD ]
Line_79 $$ firstIdentifierLetter = true-->Line_43 $$ if (!firstIdentifierLetter) [ FD ]
Line_80 $$ if (c == ' ') -->Line_84 $$ if (c == ':' || prevIsUppercase) [ CD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_60 $$ buffer.append(c)[ FD ]
Line_32 $$ boolean firstIdentifierLetter = exactPrefixLen == 0-->Line_43 $$ if (!firstIdentifierLetter) [ FD ]
Line_73 $$ if (c == '.') -->Line_79 $$ firstIdentifierLetter = true[ CD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_58 $$ if (Character.isLowerCase(c) && allowToUpper) [ FD ]
Line_47 $$ if (allowToLower) -->Line_49 $$ buffer.append(Character.toLowerCase(c))[ CD ]
Line_47 $$ if (allowToLower) -->Line_48 $$ buffer.append('|')[ CD ]
Line_38 $$ prevIsUppercase = false-->Line_40 $$ prevIsUppercase = true[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_58 $$ if (Character.isLowerCase(c) && allowToUpper) [ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_67 $$ buffer.append(c)[ FD ]
Line_91 $$ if (!endsWithSpace) -->Line_92 $$ buffer.append(".*")[ CD ]
Line_15 $$ exactPrefixLen = Math.min(exactPrefixLen, pattern.length())-->Line_17 $$ if (exactPrefixLen > 0) [ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_48 $$ buffer.append('|')[ FD ]
Line_51 $$ if (!firstIdentifierLetter) -->Line_53 $$ buffer.append(c)[ CD ]
Line_19 $$ prevIsUppercase = Character.isUpperCase(c) || Character.isDigit(c)-->Line_38 $$ prevIsUppercase = false[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_3 $$ final int eol = pattern.indexOf('\n')[ FD ]
Line_15 $$ exactPrefixLen = Math.min(exactPrefixLen, pattern.length())-->Line_21 $$ for (int i = 0; i != exactPrefixLen; ++i) [ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_33 $$ boolean lastIsUppercase = false[ CD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_19 $$ prevIsUppercase = Character.isUpperCase(c) || Character.isDigit(c)[ FD ]
Line_87 $$ firstIdentifierLetter = true-->Line_43 $$ if (!firstIdentifierLetter) [ FD ]
Line_79 $$ firstIdentifierLetter = true-->Line_74 $$ if (!firstIdentifierLetter) [ FD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_49 $$ buffer.append(Character.toLowerCase(c))[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_96 $$ return buffer.toString()[ CD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_30 $$ buffer.append("_*")[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_15 $$ exactPrefixLen = Math.min(exactPrefixLen, pattern.length())[ CD ]
Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_51 $$ if (!firstIdentifierLetter) [ CD ]
Line_23 $$ if (Character.isLetterOrDigit(c)) -->Line_24 $$ buffer.append(c)[ CD ]
Line_34 $$ for (int i = exactPrefixLen; i < pattern.length(); i++) -->Line_35 $$ final char c = pattern.charAt(i)[ CD ]
Line_72 $$ firstIdentifierLetter = true-->Line_43 $$ if (!firstIdentifierLetter) [ FD ]
Line_32 $$ boolean firstIdentifierLetter = exactPrefixLen == 0-->Line_69 $$ firstIdentifierLetter = false[ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_71 $$ buffer.append(".*")[ FD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_73 $$ if (c == '.') [ FD ]
Line_69 $$ firstIdentifierLetter = false-->Line_51 $$ if (!firstIdentifierLetter) [ FD ]
Line_40 $$ prevIsUppercase = true-->Line_84 $$ if (c == ':' || prevIsUppercase) [ FD ]
Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_58 $$ if (Character.isLowerCase(c) && allowToUpper) [ CD ]
Line_74 $$ if (!firstIdentifierLetter) -->Line_75 $$ buffer.append("[a-z\\s0-9\\$]*\\.")[ CD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)[ FD ]
Line_84 $$ if (c == ':' || prevIsUppercase) -->Line_85 $$ buffer.append("[A-Za-z\\s0-9\\$]*")[ CD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_37 $$ if (Character.isLetterOrDigit(c)) [ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_17 $$ if (exactPrefixLen > 0) [ CD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_88 $$ buffer.append("\\").append(c)[ FD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_24 $$ buffer.append(c)[ FD ]
Line_79 $$ firstIdentifierLetter = true-->Line_82 $$ firstIdentifierLetter = true[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_12 $$ if (!forCompletion) [ FD ]
Line_3 $$ final int eol = pattern.indexOf('\n')-->Line_4 $$ if (eol != -1) [ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) [ FD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_46 $$ buffer.append(c)[ FD ]
Line_15 $$ exactPrefixLen = Math.min(exactPrefixLen, pattern.length())-->Line_29 $$ if (exactPrefixLen == 0) [ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_12 $$ if (!forCompletion) [ CD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_54 $$ buffer.append(Character.toLowerCase(c))[ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_57 $$ buffer.append(')')[ FD ]
Line_70 $$ if (c == '*') -->Line_73 $$ if (c == '.') [ CD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_3 $$ final int eol = pattern.indexOf('\n')[ CD ]
Line_39 $$ if (Character.isUpperCase(c) || Character.isDigit(c)) -->Line_46 $$ buffer.append(c)[ CD ]
Line_69 $$ firstIdentifierLetter = false-->Line_43 $$ if (!firstIdentifierLetter) [ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_24 $$ buffer.append(c)[ FD ]
Line_21 $$ for (int i = 0; i != exactPrefixLen; ++i) -->Line_34 $$ for (int i = exactPrefixLen; i < pattern.length(); i++) [ FD ]
Line_72 $$ firstIdentifierLetter = true-->Line_82 $$ firstIdentifierLetter = true[ FD ]
Line_80 $$ if (c == ' ') -->Line_81 $$ buffer.append("([a-z\\s0-9\\$_-]*[\\ _-]+)+")[ CD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_35 $$ final char c = pattern.charAt(i)[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_7 $$ if (pattern.length() >= MAX_LENGTH) [ CD ]
Line_34 $$ for (int i = exactPrefixLen; i < pattern.length(); i++) -->Line_35 $$ final char c = pattern.charAt(i)[ FD ]
Line_51 $$ if (!firstIdentifierLetter) -->Line_54 $$ buffer.append(Character.toLowerCase(c))[ CD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_54 $$ buffer.append(Character.toLowerCase(c))[ FD ]
Line_73 $$ if (c == '.') -->Line_80 $$ if (c == ' ') [ CD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_88 $$ buffer.append("\\").append(c)[ FD ]
Line_82 $$ firstIdentifierLetter = true-->Line_51 $$ if (!firstIdentifierLetter) [ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_7 $$ if (pattern.length() >= MAX_LENGTH) [ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_88 $$ buffer.append("\\").append(c)[ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_26 $$ buffer.append("\\").append(c)[ FD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_53 $$ buffer.append(c)[ FD ]
Line_21 $$ for (int i = 0; i != exactPrefixLen; ++i) -->Line_22 $$ final char c = pattern.charAt(i)[ CD ]
Line_69 $$ firstIdentifierLetter = false-->Line_72 $$ firstIdentifierLetter = true[ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_55 $$ buffer.append("]")[ FD ]
Line_16 $$ boolean prevIsUppercase = false-->Line_84 $$ if (c == ':' || prevIsUppercase) [ FD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_26 $$ buffer.append("\\").append(c)[ FD ]
Line_35 $$ final char c = pattern.charAt(i)-->Line_61 $$ buffer.append(Character.toUpperCase(c))[ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_80 $$ if (c == ' ') [ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_15 $$ exactPrefixLen = Math.min(exactPrefixLen, pattern.length())[ FD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_26 $$ buffer.append("\\").append(c)[ FD ]
Line_32 $$ boolean firstIdentifierLetter = exactPrefixLen == 0-->Line_87 $$ firstIdentifierLetter = true[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_5 $$ pattern = pattern.substring(0, eol)[ FD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_94 $$ buffer.append("[a-z\\s0-9\\$]*")[ FD ]
Line_32 $$ boolean firstIdentifierLetter = exactPrefixLen == 0-->Line_82 $$ firstIdentifierLetter = true[ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_21 $$ for (int i = 0; i != exactPrefixLen; ++i) [ CD ]
Line_70 $$ if (c == '*') -->Line_71 $$ buffer.append(".*")[ CD ]
Line_18 $$ char c = pattern.charAt(exactPrefixLen - 1)-->Line_70 $$ if (c == '*') [ FD ]
Line_22 $$ final char c = pattern.charAt(i)-->Line_37 $$ if (Character.isLetterOrDigit(c)) [ FD ]
Line_58 $$ if (Character.isLowerCase(c) && allowToUpper) -->Line_63 $$ if (lowerCaseWords) [ CD ]
Line_4 $$ if (eol != -1) -->Line_5 $$ pattern = pattern.substring(0, eol)[ CD ]
Line_19 $$ prevIsUppercase = Character.isUpperCase(c) || Character.isDigit(c)-->Line_40 $$ prevIsUppercase = true[ FD ]
Line_37 $$ if (Character.isLetterOrDigit(c)) -->Line_69 $$ firstIdentifierLetter = false[ CD ]
Line_82 $$ firstIdentifierLetter = true-->Line_43 $$ if (!firstIdentifierLetter) [ FD ]
Line_2 $$ public static String buildRegexp(@NotNull String pattern, int exactPrefixLen, boolean allowToUpper, boolean allowToLower, boolean lowerCaseWords, boolean forCompletion) -->Line_10 $$ final StringBuilder buffer = new StringBuilder()[ CD ]
Line_10 $$ final StringBuilder buffer = new StringBuilder()-->Line_62 $$ buffer.append(']')[ FD ]
Line_16 $$ boolean prevIsUppercase = false-->Line_38 $$ prevIsUppercase = false[ FD ]
Line_63 $$ if (lowerCaseWords) -->Line_64 $$ buffer.append("([a-z\\s0-9\\$]*[-_]+)?")[ CD ]
Line_79 $$ firstIdentifierLetter = true-->Line_51 $$ if (!firstIdentifierLetter) [ FD ]
