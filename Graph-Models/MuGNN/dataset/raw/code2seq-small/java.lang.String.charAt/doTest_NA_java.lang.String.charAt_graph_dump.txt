Line_4 $$ final TypedAction typedAction = EditorActionManager.getInstance().getTypedAction()-->Line_9 $$ typedAction.actionPerformed(myFixture.getEditor(), c, ((EditorEx) myFixture.getEditor()).getDataContext())[ FD ]
Line_2 $$ private void doTest(@NotNull final String cs, @NotNull String before, @NotNull String expected) -->Line_3 $$ myFixture.configureByText(FileTypes.PLAIN_TEXT, before)[ CD ]
Line_8 $$ final char c = cs.charAt(i)-->Line_9 $$ typedAction.actionPerformed(myFixture.getEditor(), c, ((EditorEx) myFixture.getEditor()).getDataContext())[ FD ]
Line_2 $$ private void doTest(@NotNull final String cs, @NotNull String before, @NotNull String expected) -->Line_8 $$ final char c = cs.charAt(i)[ FD ]
Line_7 $$ for (int i = 0, max = cs.length(); i < max; i++) -->Line_9 $$ typedAction.actionPerformed(myFixture.getEditor(), c, ((EditorEx) myFixture.getEditor()).getDataContext())[ CD ]
Line_2 $$ private void doTest(@NotNull final String cs, @NotNull String before, @NotNull String expected) -->Line_13 $$ myFixture.checkResult(expected)[ FD ]
Line_2 $$ private void doTest(@NotNull final String cs, @NotNull String before, @NotNull String expected) -->Line_3 $$ myFixture.configureByText(FileTypes.PLAIN_TEXT, before)[ FD ]
Line_2 $$ private void doTest(@NotNull final String cs, @NotNull String before, @NotNull String expected) -->Line_5 $$ performAction(myFixture.getProject(), new Runnable() [ CD ]
Line_2 $$ private void doTest(@NotNull final String cs, @NotNull String before, @NotNull String expected) -->Line_13 $$ myFixture.checkResult(expected)[ CD ]
Line_7 $$ for (int i = 0, max = cs.length(); i < max; i++) -->Line_8 $$ final char c = cs.charAt(i)[ FD ]
Line_2 $$ private void doTest(@NotNull final String cs, @NotNull String before, @NotNull String expected) -->Line_4 $$ final TypedAction typedAction = EditorActionManager.getInstance().getTypedAction()[ CD ]
Line_7 $$ for (int i = 0, max = cs.length(); i < max; i++) -->Line_8 $$ final char c = cs.charAt(i)[ CD ]
Line_5 $$ performAction(myFixture.getProject(), new Runnable() -->Line_7 $$ for (int i = 0, max = cs.length(); i < max; i++) [ CD ]
Line_2 $$ private void doTest(@NotNull final String cs, @NotNull String before, @NotNull String expected) -->Line_7 $$ for (int i = 0, max = cs.length(); i < max; i++) [ FD ]
