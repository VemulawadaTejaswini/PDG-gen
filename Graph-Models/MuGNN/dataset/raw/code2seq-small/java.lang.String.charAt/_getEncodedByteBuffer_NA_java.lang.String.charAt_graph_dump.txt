Line_2 $$ private static ByteBuffer _getEncodedByteBuffer(String encodedString, int start) -->Line_16 $$ int high = _charToHex(encodedString.charAt(i + 1))[ FD ]
Line_2 $$ private static ByteBuffer _getEncodedByteBuffer(String encodedString, int start) -->Line_14 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(count)[ CD ]
Line_2 $$ private static ByteBuffer _getEncodedByteBuffer(String encodedString, int start) -->Line_11 $$ if (encodedString.length() < (start + count * 3)) [ FD ]
Line_2 $$ private static ByteBuffer _getEncodedByteBuffer(String encodedString, int start) -->Line_15 $$ for (int i = start; i < start + count * 3; i += 3) [ CD ]
Line_15 $$ for (int i = start; i < start + count * 3; i += 3) -->Line_17 $$ int low = _charToHex(encodedString.charAt(i + 2))[ CD ]
Line_14 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(count)-->Line_20 $$ byteBuffer.flip()[ FD ]
Line_14 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(count)-->Line_18 $$ byteBuffer.put((byte) ((high << 4) + low))[ FD ]
Line_2 $$ private static ByteBuffer _getEncodedByteBuffer(String encodedString, int start) -->Line_4 $$ for (int i = start + 3; i < encodedString.length(); i += 3) [ CD ]
Line_2 $$ private static ByteBuffer _getEncodedByteBuffer(String encodedString, int start) -->Line_4 $$ for (int i = start + 3; i < encodedString.length(); i += 3) [ FD ]
Line_15 $$ for (int i = start; i < start + count * 3; i += 3) -->Line_16 $$ int high = _charToHex(encodedString.charAt(i + 1))[ CD ]
Line_4 $$ for (int i = start + 3; i < encodedString.length(); i += 3) -->Line_5 $$ if (encodedString.charAt(i) == CharPool.PERCENT) [ CD ]
Line_2 $$ private static ByteBuffer _getEncodedByteBuffer(String encodedString, int start) -->Line_5 $$ if (encodedString.charAt(i) == CharPool.PERCENT) [ FD ]
Line_15 $$ for (int i = start; i < start + count * 3; i += 3) -->Line_18 $$ byteBuffer.put((byte) ((high << 4) + low))[ CD ]
Line_2 $$ private static ByteBuffer _getEncodedByteBuffer(String encodedString, int start) -->Line_20 $$ byteBuffer.flip()[ CD ]
Line_5 $$ if (encodedString.charAt(i) == CharPool.PERCENT) -->Line_6 $$ count++[ CD ]
Line_2 $$ private static ByteBuffer _getEncodedByteBuffer(String encodedString, int start) -->Line_17 $$ int low = _charToHex(encodedString.charAt(i + 2))[ FD ]
Line_2 $$ private static ByteBuffer _getEncodedByteBuffer(String encodedString, int start) -->Line_21 $$ return byteBuffer[ CD ]
Line_2 $$ private static ByteBuffer _getEncodedByteBuffer(String encodedString, int start) -->Line_11 $$ if (encodedString.length() < (start + count * 3)) [ CD ]
Line_2 $$ private static ByteBuffer _getEncodedByteBuffer(String encodedString, int start) -->Line_3 $$ int count = 1[ CD ]
Line_3 $$ int count = 1-->Line_6 $$ count++[ FD ]
Line_3 $$ int count = 1-->Line_14 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(count)[ FD ]
Line_4 $$ for (int i = start + 3; i < encodedString.length(); i += 3) -->Line_15 $$ for (int i = start; i < start + count * 3; i += 3) [ FD ]
Line_4 $$ for (int i = start + 3; i < encodedString.length(); i += 3) -->Line_5 $$ if (encodedString.charAt(i) == CharPool.PERCENT) [ FD ]
