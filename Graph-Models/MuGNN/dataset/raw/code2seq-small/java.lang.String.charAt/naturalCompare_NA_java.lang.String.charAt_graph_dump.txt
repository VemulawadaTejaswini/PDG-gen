Line_13 $$ final int string2Length = string2.length()-->Line_69 $$ if (j < string2Length) [ FD ]
Line_6 $$ if (string1 == null) -->Line_7 $$ return -1[ CD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_13 $$ final int string2Length = string2.length()[ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_43 $$ final int diff = string1.charAt(startNum1) - string2.charAt(startNum2)[ FD ]
Line_20 $$ int startNum1 = i-->Line_34 $$ i = startNum1[ FD ]
Line_35 $$ j = startNum2-->Line_69 $$ if (j < string2Length) [ FD ]
Line_18 $$ char ch2 = string2.charAt(j)-->Line_54 $$ if (ch1 != ch2) [ FD ]
Line_34 $$ i = startNum1-->Line_17 $$ char ch1 = string1.charAt(i)[ FD ]
Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) -->Line_49 $$ j--[ CD ]
Line_66 $$ if (i < string1Length) -->Line_67 $$ return 1[ CD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_32 $$ ch2 = string2.charAt(startNum2)[ FD ]
Line_17 $$ char ch1 = string1.charAt(i)-->Line_25 $$ ch1 = string1.charAt(startNum1)[ FD ]
Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) -->Line_51 $$ if (caseSensitive) [ CD ]
Line_12 $$ final int string1Length = string1.length()-->Line_23 $$ if (startNum1 >= string1Length)[ FD ]
Line_14 $$ int i = 0-->Line_66 $$ if (i < string1Length) [ FD ]
Line_34 $$ i = startNum1-->Line_36 $$ while (i < string1Length && isDecimalDigit(string1.charAt(i))) i++[ FD ]
Line_15 $$ int j = 0-->Line_35 $$ j = startNum2[ FD ]
Line_14 $$ int i = 0-->Line_34 $$ i = startNum1[ FD ]
Line_32 $$ ch2 = string2.charAt(startNum2)-->Line_55 $$ final int diff1 = StringUtilRt.toUpperCase(ch1) - StringUtilRt.toUpperCase(ch2)[ FD ]
Line_28 $$ while (ch2 == ' ' || ch2 == '0') -->Line_32 $$ ch2 = string2.charAt(startNum2)[ CD ]
Line_51 $$ if (caseSensitive) -->Line_52 $$ return ch1 - ch2[ CD ]
Line_25 $$ ch1 = string1.charAt(startNum1)-->Line_54 $$ if (ch1 != ch2) [ FD ]
Line_34 $$ i = startNum1-->Line_48 $$ i--[ FD ]
Line_14 $$ int i = 0-->Line_48 $$ i--[ FD ]
Line_28 $$ while (ch2 == ' ' || ch2 == '0') -->Line_30 $$ if (startNum2 >= string2Length)[ CD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_15 $$ int j = 0[ CD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_72 $$ if (!caseSensitive && string1Length == string2Length) [ FD ]
Line_34 $$ i = startNum1-->Line_36 $$ i++[ FD ]
Line_25 $$ ch1 = string1.charAt(startNum1)-->Line_55 $$ final int diff1 = StringUtilRt.toUpperCase(ch1) - StringUtilRt.toUpperCase(ch2)[ FD ]
Line_43 $$ final int diff = string1.charAt(startNum1) - string2.charAt(startNum2)-->Line_44 $$ if (diff != 0) [ FD ]
Line_32 $$ ch2 = string2.charAt(startNum2)-->Line_54 $$ if (ch1 != ch2) [ FD ]
Line_32 $$ ch2 = string2.charAt(startNum2)-->Line_57 $$ final int diff2 = StringUtilRt.toLowerCase(ch1) - StringUtilRt.toLowerCase(ch2)[ FD ]
Line_35 $$ j = startNum2-->Line_16 $$ for (; i < string1Length && j < string2Length; i++, j++) [ FD ]
Line_69 $$ if (j < string2Length) -->Line_70 $$ return -1[ CD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_37 $$ while (j < string2Length && isDecimalDigit(string2.charAt(j))) j++[ FD ]
Line_15 $$ int j = 0-->Line_16 $$ for (; i < string1Length && j < string2Length; i++, j++) [ FD ]
Line_35 $$ j = startNum2-->Line_18 $$ char ch2 = string2.charAt(j)[ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_73 $$ return naturalCompare(string1, string2, true)[ FD ]
Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) -->Line_48 $$ i--[ CD ]
Line_44 $$ if (diff != 0) -->Line_45 $$ return diff[ CD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_13 $$ final int string2Length = string2.length()[ CD ]
Line_35 $$ j = startNum2-->Line_49 $$ j--[ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_12 $$ final int string1Length = string1.length()[ CD ]
Line_42 $$ for (; startNum1 < i; startNum1++, startNum2++) -->Line_43 $$ final int diff = string1.charAt(startNum1) - string2.charAt(startNum2)[ CD ]
Line_14 $$ int i = 0-->Line_36 $$ i++[ FD ]
Line_15 $$ int j = 0-->Line_37 $$ while (j < string2Length && isDecimalDigit(string2.charAt(j))) j++[ FD ]
Line_14 $$ int i = 0-->Line_16 $$ for (; i < string1Length && j < string2Length; i++, j++) [ FD ]
Line_34 $$ i = startNum1-->Line_42 $$ for (; startNum1 < i; startNum1++, startNum2++) [ FD ]
Line_21 $$ while (ch1 == ' ' || ch1 == '0') -->Line_22 $$ startNum1++[ CD ]
Line_34 $$ i = startNum1-->Line_66 $$ if (i < string1Length) [ FD ]
Line_15 $$ int j = 0-->Line_69 $$ if (j < string2Length) [ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_3 $$ if (string1 == string2) [ CD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_17 $$ char ch1 = string1.charAt(i)[ FD ]
Line_15 $$ int j = 0-->Line_18 $$ char ch2 = string2.charAt(j)[ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_66 $$ if (i < string1Length) [ CD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_25 $$ ch1 = string1.charAt(startNum1)[ FD ]
Line_16 $$ for (; i < string1Length && j < string2Length; i++, j++) -->Line_17 $$ char ch1 = string1.charAt(i)[ CD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_6 $$ if (string1 == null) [ CD ]
Line_72 $$ if (!caseSensitive && string1Length == string2Length) -->Line_73 $$ return naturalCompare(string1, string2, true)[ CD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_9 $$ if (string2 == null) [ CD ]
Line_15 $$ int j = 0-->Line_37 $$ j++[ FD ]
Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) -->Line_36 $$ while (i < string1Length && isDecimalDigit(string1.charAt(i))) i++[ CD ]
Line_42 $$ for (; startNum1 < i; startNum1++, startNum2++) -->Line_44 $$ if (diff != 0) [ CD ]
Line_21 $$ while (ch1 == ' ' || ch1 == '0') -->Line_25 $$ ch1 = string1.charAt(startNum1)[ CD ]
Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) -->Line_37 $$ while (j < string2Length && isDecimalDigit(string2.charAt(j))) j++[ CD ]
Line_20 $$ int startNum1 = i-->Line_42 $$ for (; startNum1 < i; startNum1++, startNum2++) [ FD ]
Line_54 $$ if (ch1 != ch2) -->Line_56 $$ if (diff1 != 0) [ CD ]
Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) -->Line_39 $$ if (lengthDiff != 0) [ CD ]
Line_18 $$ char ch2 = string2.charAt(j)-->Line_55 $$ final int diff1 = StringUtilRt.toUpperCase(ch1) - StringUtilRt.toUpperCase(ch2)[ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_16 $$ for (; i < string1Length && j < string2Length; i++, j++) [ CD ]
Line_16 $$ for (; i < string1Length && j < string2Length; i++, j++) -->Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) [ CD ]
Line_17 $$ char ch1 = string1.charAt(i)-->Line_54 $$ if (ch1 != ch2) [ FD ]
Line_17 $$ char ch1 = string1.charAt(i)-->Line_57 $$ final int diff2 = StringUtilRt.toLowerCase(ch1) - StringUtilRt.toLowerCase(ch2)[ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_9 $$ if (string2 == null) [ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_18 $$ char ch2 = string2.charAt(j)[ FD ]
Line_39 $$ if (lengthDiff != 0) -->Line_40 $$ return lengthDiff[ CD ]
Line_15 $$ int j = 0-->Line_49 $$ j--[ FD ]
Line_25 $$ ch1 = string1.charAt(startNum1)-->Line_57 $$ final int diff2 = StringUtilRt.toLowerCase(ch1) - StringUtilRt.toLowerCase(ch2)[ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_3 $$ if (string1 == string2) [ FD ]
Line_20 $$ int startNum1 = i-->Line_25 $$ ch1 = string1.charAt(startNum1)[ FD ]
Line_9 $$ if (string2 == null) -->Line_10 $$ return 1[ CD ]
Line_18 $$ char ch2 = string2.charAt(j)-->Line_57 $$ final int diff2 = StringUtilRt.toLowerCase(ch1) - StringUtilRt.toLowerCase(ch2)[ FD ]
Line_34 $$ i = startNum1-->Line_16 $$ for (; i < string1Length && j < string2Length; i++, j++) [ FD ]
Line_56 $$ if (diff1 != 0) -->Line_58 $$ if (diff2 != 0) [ CD ]
Line_17 $$ char ch1 = string1.charAt(i)-->Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) [ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_14 $$ int i = 0[ CD ]
Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) -->Line_28 $$ while (ch2 == ' ' || ch2 == '0') [ CD ]
Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) -->Line_34 $$ i = startNum1[ CD ]
Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) -->Line_42 $$ for (; startNum1 < i; startNum1++, startNum2++) [ CD ]
Line_58 $$ if (diff2 != 0) -->Line_59 $$ return diff2[ CD ]
Line_14 $$ int i = 0-->Line_17 $$ char ch1 = string1.charAt(i)[ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_36 $$ while (i < string1Length && isDecimalDigit(string1.charAt(i))) i++[ FD ]
Line_3 $$ if (string1 == string2) -->Line_4 $$ return 0[ CD ]
Line_14 $$ int i = 0-->Line_36 $$ while (i < string1Length && isDecimalDigit(string1.charAt(i))) i++[ FD ]
Line_18 $$ char ch2 = string2.charAt(j)-->Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) [ FD ]
Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) -->Line_20 $$ int startNum1 = i[ CD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_6 $$ if (string1 == null) [ FD ]
Line_17 $$ char ch1 = string1.charAt(i)-->Line_55 $$ final int diff1 = StringUtilRt.toUpperCase(ch1) - StringUtilRt.toUpperCase(ch2)[ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_12 $$ final int string1Length = string1.length()[ FD ]
Line_20 $$ int startNum1 = i-->Line_43 $$ final int diff = string1.charAt(startNum1) - string2.charAt(startNum2)[ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_69 $$ if (j < string2Length) [ CD ]
Line_13 $$ final int string2Length = string2.length()-->Line_30 $$ if (startNum2 >= string2Length)[ FD ]
Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) -->Line_35 $$ j = startNum2[ CD ]
Line_14 $$ int i = 0-->Line_42 $$ for (; startNum1 < i; startNum1++, startNum2++) [ FD ]
Line_18 $$ char ch2 = string2.charAt(j)-->Line_32 $$ ch2 = string2.charAt(startNum2)[ FD ]
Line_20 $$ int startNum1 = i-->Line_22 $$ startNum1++[ FD ]
Line_21 $$ while (ch1 == ' ' || ch1 == '0') -->Line_23 $$ if (startNum1 >= string1Length)[ CD ]
Line_19 $$ if ((isDecimalDigit(ch1) || ch1 == ' ') && (isDecimalDigit(ch2) || ch2 == ' ')) -->Line_21 $$ while (ch1 == ' ' || ch1 == '0') [ CD ]
Line_51 $$ if (caseSensitive) -->Line_54 $$ if (ch1 != ch2) [ CD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_72 $$ if (!caseSensitive && string1Length == string2Length) [ CD ]
Line_20 $$ int startNum1 = i-->Line_23 $$ if (startNum1 >= string1Length)[ FD ]
Line_16 $$ for (; i < string1Length && j < string2Length; i++, j++) -->Line_18 $$ char ch2 = string2.charAt(j)[ CD ]
Line_12 $$ final int string1Length = string1.length()-->Line_66 $$ if (i < string1Length) [ FD ]
Line_35 $$ j = startNum2-->Line_37 $$ j++[ FD ]
Line_35 $$ j = startNum2-->Line_37 $$ while (j < string2Length && isDecimalDigit(string2.charAt(j))) j++[ FD ]
Line_2 $$ private static int naturalCompare(@Nullable String string1, @Nullable String string2, boolean caseSensitive) -->Line_75 $$ return string1Length - string2Length[ CD ]
