Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_3 $$ Assert.notNull(source, "Source must not be null")[ FD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_8 $$ for (int i = 0; i < length; i++) [ CD ]
Line_7 $$ boolean changed = false-->Line_21 $$ changed = true[ FD ]
Line_10 $$ if (ch == '%') -->Line_11 $$ if ((i + 2) < length) [ CD ]
Line_8 $$ for (int i = 0; i < length; i++) -->Line_20 $$ i += 2[ FD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_4 $$ Assert.hasLength(encoding, "Encoding must not be empty")[ CD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_9 $$ int ch = source.charAt(i)[ FD ]
Line_9 $$ int ch = source.charAt(i)-->Line_26 $$ bos.write(ch)[ FD ]
Line_11 $$ if ((i + 2) < length) -->Line_21 $$ changed = true[ CD ]
Line_11 $$ if ((i + 2) < length) -->Line_20 $$ i += 2[ CD ]
Line_5 $$ int length = source.length()-->Line_11 $$ if ((i + 2) < length) [ FD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_13 $$ char hex2 = source.charAt(i + 2)[ FD ]
Line_8 $$ for (int i = 0; i < length; i++) -->Line_17 $$ throw new IllegalArgumentException("Invalid encoded sequence \"" + source.substring(i) + "\"")[ FD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_17 $$ throw new IllegalArgumentException("Invalid encoded sequence \"" + source.substring(i) + "\"")[ FD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_12 $$ char hex1 = source.charAt(i + 1)[ FD ]
Line_20 $$ i += 2-->Line_23 $$ throw new IllegalArgumentException("Invalid encoded sequence \"" + source.substring(i) + "\"")[ FD ]
Line_10 $$ if (ch == '%') -->Line_26 $$ bos.write(ch)[ CD ]
Line_20 $$ i += 2-->Line_9 $$ int ch = source.charAt(i)[ FD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_6 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream(length)[ CD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_4 $$ Assert.hasLength(encoding, "Encoding must not be empty")[ FD ]
Line_20 $$ i += 2-->Line_8 $$ for (int i = 0; i < length; i++) [ FD ]
Line_20 $$ i += 2-->Line_17 $$ throw new IllegalArgumentException("Invalid encoded sequence \"" + source.substring(i) + "\"")[ FD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_5 $$ int length = source.length()[ CD ]
Line_8 $$ for (int i = 0; i < length; i++) -->Line_9 $$ int ch = source.charAt(i)[ FD ]
Line_8 $$ for (int i = 0; i < length; i++) -->Line_9 $$ int ch = source.charAt(i)[ CD ]
Line_11 $$ if ((i + 2) < length) -->Line_19 $$ bos.write((char) ((u << 4) + l))[ CD ]
Line_11 $$ if ((i + 2) < length) -->Line_13 $$ char hex2 = source.charAt(i + 2)[ CD ]
Line_11 $$ if ((i + 2) < length) -->Line_14 $$ int u = Character.digit(hex1, 16)[ CD ]
Line_8 $$ for (int i = 0; i < length; i++) -->Line_10 $$ if (ch == '%') [ CD ]
Line_12 $$ char hex1 = source.charAt(i + 1)-->Line_14 $$ int u = Character.digit(hex1, 16)[ FD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_3 $$ Assert.notNull(source, "Source must not be null")[ CD ]
Line_6 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream(length)-->Line_19 $$ bos.write((char) ((u << 4) + l))[ FD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_7 $$ boolean changed = false[ CD ]
Line_9 $$ int ch = source.charAt(i)-->Line_10 $$ if (ch == '%') [ FD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_29 $$ return (changed ? new String(bos.toByteArray(), encoding) : source)[ CD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_5 $$ int length = source.length()[ FD ]
Line_6 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream(length)-->Line_29 $$ return (changed ? new String(bos.toByteArray(), encoding) : source)[ FD ]
Line_11 $$ if ((i + 2) < length) -->Line_16 $$ if (u == -1 || l == -1) [ CD ]
Line_5 $$ int length = source.length()-->Line_8 $$ for (int i = 0; i < length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < length; i++) -->Line_23 $$ throw new IllegalArgumentException("Invalid encoded sequence \"" + source.substring(i) + "\"")[ FD ]
Line_11 $$ if ((i + 2) < length) -->Line_15 $$ int l = Character.digit(hex2, 16)[ CD ]
Line_11 $$ if ((i + 2) < length) -->Line_12 $$ char hex1 = source.charAt(i + 1)[ CD ]
Line_6 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream(length)-->Line_26 $$ bos.write(ch)[ FD ]
Line_13 $$ char hex2 = source.charAt(i + 2)-->Line_15 $$ int l = Character.digit(hex2, 16)[ FD ]
Line_2 $$ public static String decode(String source, String encoding) throws UnsupportedEncodingException -->Line_23 $$ throw new IllegalArgumentException("Invalid encoded sequence \"" + source.substring(i) + "\"")[ FD ]
