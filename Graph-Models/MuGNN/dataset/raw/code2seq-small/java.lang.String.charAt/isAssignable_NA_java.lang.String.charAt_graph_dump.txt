Line_9 $$ final PsiMethodReferenceExpression methodReferenceExpression = ((PsiMethodReferenceType) right).getExpression()-->Line_19 $$ return !(left instanceof PsiArrayType) && methodReferenceExpression.isAcceptable(left)[ FD ]
Line_21 $$ if (right instanceof PsiLambdaExpressionType) -->Line_23 $$ if (left instanceof PsiLambdaExpressionType) [ CD ]
Line_90 $$ if (left instanceof PsiArrayType)-->Line_91 $$ return false[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_78 $$ return !(rCompType instanceof PsiPrimitiveType) && isAssignable(lCompType, rCompType, allowUncheckedConversion, capture)[ FD ]
Line_109 $$ final PsiClassType.ClassResolveResult rightResult = PsiUtil.resolveGenericsClassInType(right)-->Line_122 $$ return isClassAssignable(leftResult, rightResult, allowUncheckedConversion, left.getResolveScope(), capture)[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_6 $$ return !(left instanceof PsiPrimitiveType) || isNullType(left)[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_19 $$ return !(left instanceof PsiArrayType) && methodReferenceExpression.isAcceptable(left)[ FD ]
Line_5 $$ if (isNullType(right)) -->Line_6 $$ return !(left instanceof PsiPrimitiveType) || isNullType(left)[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_54 $$ return isAssignableToWildcard((PsiWildcardType) left, right)[ FD ]
Line_114 $$ String rText = right.getPresentableText()-->Line_120 $$ return rText.length() > lText.length() && rText.endsWith(lText) && rText.charAt(rText.length() - lText.length() - 1) == '.'[ FD ]
Line_23 $$ if (left instanceof PsiLambdaExpressionType) -->Line_25 $$ final PsiType rType = rLambdaExpression.getFunctionalInterfaceType()[ CD ]
Line_105 $$ if (left instanceof PsiPrimitiveType) -->Line_106 $$ return isUnboxable((PsiPrimitiveType) left, (PsiClassType) right)[ CD ]
Line_21 $$ if (right instanceof PsiLambdaExpressionType) -->Line_29 $$ return !(left instanceof PsiArrayType) && rLambdaExpression.isAcceptable(left)[ CD ]
Line_110 $$ if (leftResult.getElement() == null || rightResult.getElement() == null) -->Line_113 $$ String lText = left.getPresentableText()[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_59 $$ if (right instanceof PsiArrayType) [ CD ]
Line_59 $$ if (right instanceof PsiArrayType) -->Line_75 $$ if (lCompType instanceof PsiPrimitiveType) [ CD ]
Line_10 $$ if (left instanceof PsiLambdaExpressionType) -->Line_13 $$ return Comparing.equal(rType, lType)[ CD ]
Line_12 $$ final PsiType lType = ((PsiLambdaExpressionType) left).getExpression().getFunctionalInterfaceType()-->Line_17 $$ return Comparing.equal(rType, lType)[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_92 $$ if (right instanceof PsiPrimitiveType) [ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_108 $$ final PsiClassType.ClassResolveResult leftResult = PsiUtil.resolveGenericsClassInType(left)[ FD ]
Line_33 $$ for (PsiType conjunct : conjuncts) -->Line_34 $$ if (!isAssignable(conjunct, right, allowUncheckedConversion, capture))[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_39 $$ if (right instanceof PsiIntersectionType) [ FD ]
Line_61 $$ if (left instanceof PsiPrimitiveType || PsiUtil.resolveClassInType(left) == null)-->Line_62 $$ return false[ CD ]
Line_75 $$ if (lCompType instanceof PsiPrimitiveType) -->Line_76 $$ return lCompType.equals(rCompType)[ CD ]
Line_21 $$ if (right instanceof PsiLambdaExpressionType) -->Line_22 $$ final PsiLambdaExpression rLambdaExpression = ((PsiLambdaExpressionType) right).getExpression()[ CD ]
Line_12 $$ final PsiType lType = ((PsiLambdaExpressionType) left).getExpression().getFunctionalInterfaceType()-->Line_27 $$ return Comparing.equal(rType, lType)[ FD ]
Line_81 $$ for (PsiType type : ((PsiDisjunctionType) left).getDisjunctions()) -->Line_82 $$ if (isAssignable(type, right, allowUncheckedConversion, capture))[ FD ]
Line_108 $$ final PsiClassType.ClassResolveResult leftResult = PsiUtil.resolveGenericsClassInType(left)-->Line_111 $$ if (leftResult.getElement() != rightResult.getElement())[ FD ]
Line_117 $$ if (lText.length() > rText.length() && lText.endsWith(rText) && lText.charAt(lText.length() - rText.length() - 1) == '.') -->Line_118 $$ return true[ CD ]
Line_66 $$ if (lClass.isInterface()) -->Line_67 $$ final String qualifiedName = lClass.getQualifiedName()[ CD ]
Line_24 $$ final PsiLambdaExpression lLambdaExpression = ((PsiLambdaExpressionType) left).getExpression()-->Line_26 $$ final PsiType lType = lLambdaExpression.getFunctionalInterfaceType()[ FD ]
Line_80 $$ if (left instanceof PsiDisjunctionType) -->Line_85 $$ return false[ CD ]
Line_14 $$ if (left instanceof PsiMethodReferenceType) -->Line_15 $$ final PsiType rType = methodReferenceExpression.getFunctionalInterfaceType()[ CD ]
Line_108 $$ final PsiClassType.ClassResolveResult leftResult = PsiUtil.resolveGenericsClassInType(left)-->Line_122 $$ return isClassAssignable(leftResult, rightResult, allowUncheckedConversion, left.getResolveScope(), capture)[ FD ]
Line_63 $$ PsiClass lClass = PsiUtil.resolveClassInType(left)-->Line_64 $$ if (lClass == null)[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_3 $$ if (left == right || left.equals(right))[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_3 $$ if (left == right || left.equals(right))[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_14 $$ if (left instanceof PsiMethodReferenceType) [ FD ]
Line_67 $$ final String qualifiedName = lClass.getQualifiedName()-->Line_68 $$ return "java.io.Serializable".equals(qualifiedName) || "java.lang.Cloneable".equals(qualifiedName)[ FD ]
Line_114 $$ String rText = right.getPresentableText()-->Line_115 $$ if (lText.equals(rText))[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_8 $$ if (right instanceof PsiMethodReferenceType) [ FD ]
Line_110 $$ if (leftResult.getElement() == null || rightResult.getElement() == null) -->Line_117 $$ if (lText.length() > rText.length() && lText.endsWith(rText) && lText.charAt(lText.length() - rText.length() - 1) == '.') [ CD ]
Line_53 $$ if (left instanceof PsiWildcardType) -->Line_54 $$ return isAssignableToWildcard((PsiWildcardType) left, right)[ CD ]
Line_42 $$ if (isAssignable(left, conjunct, allowUncheckedConversion, capture))-->Line_43 $$ return true[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_5 $$ if (isNullType(right)) [ CD ]
Line_109 $$ final PsiClassType.ClassResolveResult rightResult = PsiUtil.resolveGenericsClassInType(right)-->Line_111 $$ if (leftResult.getElement() != rightResult.getElement())[ FD ]
Line_110 $$ if (leftResult.getElement() == null || rightResult.getElement() == null) -->Line_120 $$ return rText.length() > lText.length() && rText.endsWith(lText) && rText.charAt(rText.length() - lText.length() - 1) == '.'[ CD ]
Line_82 $$ if (isAssignable(type, right, allowUncheckedConversion, capture))-->Line_83 $$ return true[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_56 $$ if (right instanceof PsiWildcardType) [ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_59 $$ if (right instanceof PsiArrayType) [ FD ]
Line_60 $$ if (!(left instanceof PsiArrayType)) -->Line_63 $$ PsiClass lClass = PsiUtil.resolveClassInType(left)[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_93 $$ if (isVoidType(right))[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_109 $$ final PsiClassType.ClassResolveResult rightResult = PsiUtil.resolveGenericsClassInType(right)[ CD ]
Line_59 $$ if (right instanceof PsiArrayType) -->Line_60 $$ if (!(left instanceof PsiArrayType)) [ CD ]
Line_95 $$ if (!(left instanceof PsiPrimitiveType)) -->Line_96 $$ return left instanceof PsiClassType && isBoxable((PsiClassType) left, (PsiPrimitiveType) right)[ CD ]
Line_23 $$ if (left instanceof PsiLambdaExpressionType) -->Line_24 $$ final PsiLambdaExpression lLambdaExpression = ((PsiLambdaExpressionType) left).getExpression()[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_114 $$ String rText = right.getPresentableText()[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_102 $$ if (!(right instanceof PsiClassType)) [ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_39 $$ if (right instanceof PsiIntersectionType) [ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_53 $$ if (left instanceof PsiWildcardType) [ CD ]
Line_23 $$ if (left instanceof PsiLambdaExpressionType) -->Line_27 $$ return Comparing.equal(rType, lType)[ CD ]
Line_73 $$ PsiType lCompType = ((PsiArrayType) left).getComponentType()-->Line_78 $$ return !(rCompType instanceof PsiPrimitiveType) && isAssignable(lCompType, rCompType, allowUncheckedConversion, capture)[ FD ]
Line_92 $$ if (right instanceof PsiPrimitiveType) -->Line_95 $$ if (!(left instanceof PsiPrimitiveType)) [ CD ]
Line_74 $$ PsiType rCompType = ((PsiArrayType) right).getComponentType()-->Line_78 $$ return !(rCompType instanceof PsiPrimitiveType) && isAssignable(lCompType, rCompType, allowUncheckedConversion, capture)[ FD ]
Line_110 $$ if (leftResult.getElement() == null || rightResult.getElement() == null) -->Line_114 $$ String rText = right.getPresentableText()[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_87 $$ if (right instanceof PsiDisjunctionType) [ FD ]
Line_92 $$ if (right instanceof PsiPrimitiveType) -->Line_99 $$ int rightTypeIndex = TYPE_TO_RANK_MAP.get(right) - 1[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_21 $$ if (right instanceof PsiLambdaExpressionType) [ FD ]
Line_92 $$ if (right instanceof PsiPrimitiveType) -->Line_100 $$ return leftTypeIndex >= 0 && rightTypeIndex >= 0 && rightTypeIndex < IS_ASSIGNABLE_BIT_SET.length && leftTypeIndex < IS_ASSIGNABLE_BIT_SET.length && IS_ASSIGNABLE_BIT_SET[rightTypeIndex][leftTypeIndex][ CD ]
Line_66 $$ if (lClass.isInterface()) -->Line_68 $$ return "java.io.Serializable".equals(qualifiedName) || "java.lang.Cloneable".equals(qualifiedName)[ CD ]
Line_33 $$ for (PsiType conjunct : conjuncts) -->Line_42 $$ if (isAssignable(left, conjunct, allowUncheckedConversion, capture))[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_50 $$ if (left instanceof PsiCapturedWildcardType) [ FD ]
Line_64 $$ if (lClass == null)-->Line_65 $$ return false[ CD ]
Line_92 $$ if (right instanceof PsiPrimitiveType) -->Line_93 $$ if (isVoidType(right))[ CD ]
Line_12 $$ final PsiType lType = ((PsiLambdaExpressionType) left).getExpression().getFunctionalInterfaceType()-->Line_13 $$ return Comparing.equal(rType, lType)[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_8 $$ if (right instanceof PsiMethodReferenceType) [ CD ]
Line_92 $$ if (right instanceof PsiPrimitiveType) -->Line_98 $$ int leftTypeIndex = TYPE_TO_RANK_MAP.get(left) - 1[ CD ]
Line_8 $$ if (right instanceof PsiMethodReferenceType) -->Line_9 $$ final PsiMethodReferenceExpression methodReferenceExpression = ((PsiMethodReferenceType) right).getExpression()[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_110 $$ if (leftResult.getElement() == null || rightResult.getElement() == null) [ CD ]
Line_10 $$ if (left instanceof PsiLambdaExpressionType) -->Line_12 $$ final PsiType lType = ((PsiLambdaExpressionType) left).getExpression().getFunctionalInterfaceType()[ CD ]
Line_11 $$ final PsiType rType = methodReferenceExpression.getFunctionalInterfaceType()-->Line_13 $$ return Comparing.equal(rType, lType)[ FD ]
Line_111 $$ if (leftResult.getElement() != rightResult.getElement())-->Line_112 $$ return false[ CD ]
Line_114 $$ String rText = right.getPresentableText()-->Line_117 $$ if (lText.length() > rText.length() && lText.endsWith(rText) && lText.charAt(lText.length() - rText.length() - 1) == '.') [ FD ]
Line_47 $$ if (right instanceof PsiCapturedWildcardType) -->Line_48 $$ return isAssignable(left, ((PsiCapturedWildcardType) right).getUpperBound(), allowUncheckedConversion, capture)[ CD ]
Line_34 $$ if (!isAssignable(conjunct, right, allowUncheckedConversion, capture))-->Line_35 $$ return false[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_80 $$ if (left instanceof PsiDisjunctionType) [ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_90 $$ if (left instanceof PsiArrayType)[ CD ]
Line_39 $$ if (right instanceof PsiIntersectionType) -->Line_45 $$ return false[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_31 $$ if (left instanceof PsiIntersectionType) [ CD ]
Line_14 $$ if (left instanceof PsiMethodReferenceType) -->Line_17 $$ return Comparing.equal(rType, lType)[ CD ]
Line_93 $$ if (isVoidType(right))-->Line_94 $$ return false[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_31 $$ if (left instanceof PsiIntersectionType) [ FD ]
Line_14 $$ if (left instanceof PsiMethodReferenceType) -->Line_16 $$ final PsiType lType = ((PsiMethodReferenceType) left).getExpression().getFunctionalInterfaceType()[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_105 $$ if (left instanceof PsiPrimitiveType) [ FD ]
Line_113 $$ String lText = left.getPresentableText()-->Line_117 $$ if (lText.length() > rText.length() && lText.endsWith(rText) && lText.charAt(lText.length() - rText.length() - 1) == '.') [ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_105 $$ if (left instanceof PsiPrimitiveType) [ CD ]
Line_60 $$ if (!(left instanceof PsiArrayType)) -->Line_66 $$ if (lClass.isInterface()) [ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_34 $$ if (!isAssignable(conjunct, right, allowUncheckedConversion, capture))[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_50 $$ if (left instanceof PsiCapturedWildcardType) [ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_57 $$ return isAssignableFromWildcard(left, (PsiWildcardType) right)[ FD ]
Line_102 $$ if (!(right instanceof PsiClassType)) -->Line_103 $$ return false[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_113 $$ String lText = left.getPresentableText()[ FD ]
Line_66 $$ if (lClass.isInterface()) -->Line_70 $$ return left.equalsToText(CommonClassNames.JAVA_LANG_OBJECT)[ CD ]
Line_10 $$ if (left instanceof PsiLambdaExpressionType) -->Line_14 $$ if (left instanceof PsiMethodReferenceType) [ CD ]
Line_115 $$ if (lText.equals(rText))-->Line_116 $$ return true[ CD ]
Line_23 $$ if (left instanceof PsiLambdaExpressionType) -->Line_26 $$ final PsiType lType = lLambdaExpression.getFunctionalInterfaceType()[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_61 $$ if (left instanceof PsiPrimitiveType || PsiUtil.resolveClassInType(left) == null)[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_10 $$ if (left instanceof PsiLambdaExpressionType) [ FD ]
Line_60 $$ if (!(left instanceof PsiArrayType)) -->Line_64 $$ if (lClass == null)[ CD ]
Line_113 $$ String lText = left.getPresentableText()-->Line_115 $$ if (lText.equals(rText))[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_122 $$ return isClassAssignable(leftResult, rightResult, allowUncheckedConversion, left.getResolveScope(), capture)[ CD ]
Line_109 $$ final PsiClassType.ClassResolveResult rightResult = PsiUtil.resolveGenericsClassInType(right)-->Line_110 $$ if (leftResult.getElement() == null || rightResult.getElement() == null) [ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_47 $$ if (right instanceof PsiCapturedWildcardType) [ FD ]
Line_22 $$ final PsiLambdaExpression rLambdaExpression = ((PsiLambdaExpressionType) right).getExpression()-->Line_29 $$ return !(left instanceof PsiArrayType) && rLambdaExpression.isAcceptable(left)[ FD ]
Line_59 $$ if (right instanceof PsiArrayType) -->Line_78 $$ return !(rCompType instanceof PsiPrimitiveType) && isAssignable(lCompType, rCompType, allowUncheckedConversion, capture)[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_122 $$ return isClassAssignable(leftResult, rightResult, allowUncheckedConversion, left.getResolveScope(), capture)[ FD ]
Line_9 $$ final PsiMethodReferenceExpression methodReferenceExpression = ((PsiMethodReferenceType) right).getExpression()-->Line_15 $$ final PsiType rType = methodReferenceExpression.getFunctionalInterfaceType()[ FD ]
Line_59 $$ if (right instanceof PsiArrayType) -->Line_73 $$ PsiType lCompType = ((PsiArrayType) left).getComponentType()[ CD ]
Line_108 $$ final PsiClassType.ClassResolveResult leftResult = PsiUtil.resolveGenericsClassInType(left)-->Line_110 $$ if (leftResult.getElement() == null || rightResult.getElement() == null) [ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_48 $$ return isAssignable(left, ((PsiCapturedWildcardType) right).getUpperBound(), allowUncheckedConversion, capture)[ FD ]
Line_22 $$ final PsiLambdaExpression rLambdaExpression = ((PsiLambdaExpressionType) right).getExpression()-->Line_25 $$ final PsiType rType = rLambdaExpression.getFunctionalInterfaceType()[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_5 $$ if (isNullType(right)) [ FD ]
Line_3 $$ if (left == right || left.equals(right))-->Line_4 $$ return true[ CD ]
Line_56 $$ if (right instanceof PsiWildcardType) -->Line_57 $$ return isAssignableFromWildcard(left, (PsiWildcardType) right)[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_42 $$ if (isAssignable(left, conjunct, allowUncheckedConversion, capture))[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_29 $$ return !(left instanceof PsiArrayType) && rLambdaExpression.isAcceptable(left)[ FD ]
Line_11 $$ final PsiType rType = methodReferenceExpression.getFunctionalInterfaceType()-->Line_17 $$ return Comparing.equal(rType, lType)[ FD ]
Line_63 $$ PsiClass lClass = PsiUtil.resolveClassInType(left)-->Line_67 $$ final String qualifiedName = lClass.getQualifiedName()[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_47 $$ if (right instanceof PsiCapturedWildcardType) [ CD ]
Line_9 $$ final PsiMethodReferenceExpression methodReferenceExpression = ((PsiMethodReferenceType) right).getExpression()-->Line_11 $$ final PsiType rType = methodReferenceExpression.getFunctionalInterfaceType()[ FD ]
Line_74 $$ PsiType rCompType = ((PsiArrayType) right).getComponentType()-->Line_76 $$ return lCompType.equals(rCompType)[ FD ]
Line_113 $$ String lText = left.getPresentableText()-->Line_120 $$ return rText.length() > lText.length() && rText.endsWith(lText) && rText.charAt(rText.length() - lText.length() - 1) == '.'[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_88 $$ return isAssignable(left, ((PsiDisjunctionType) right).getLeastUpperBound(), allowUncheckedConversion, capture)[ FD ]
Line_11 $$ final PsiType rType = methodReferenceExpression.getFunctionalInterfaceType()-->Line_27 $$ return Comparing.equal(rType, lType)[ FD ]
Line_31 $$ if (left instanceof PsiIntersectionType) -->Line_37 $$ return true[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_82 $$ if (isAssignable(type, right, allowUncheckedConversion, capture))[ FD ]
Line_31 $$ if (left instanceof PsiIntersectionType) -->Line_32 $$ PsiType[] conjuncts = ((PsiIntersectionType) left).getConjuncts()[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_53 $$ if (left instanceof PsiWildcardType) [ FD ]
Line_73 $$ PsiType lCompType = ((PsiArrayType) left).getComponentType()-->Line_75 $$ if (lCompType instanceof PsiPrimitiveType) [ FD ]
Line_63 $$ PsiClass lClass = PsiUtil.resolveClassInType(left)-->Line_66 $$ if (lClass.isInterface()) [ FD ]
Line_8 $$ if (right instanceof PsiMethodReferenceType) -->Line_19 $$ return !(left instanceof PsiArrayType) && methodReferenceExpression.isAcceptable(left)[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_70 $$ return left.equalsToText(CommonClassNames.JAVA_LANG_OBJECT)[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_109 $$ final PsiClassType.ClassResolveResult rightResult = PsiUtil.resolveGenericsClassInType(right)[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_108 $$ final PsiClassType.ClassResolveResult leftResult = PsiUtil.resolveGenericsClassInType(left)[ CD ]
Line_87 $$ if (right instanceof PsiDisjunctionType) -->Line_88 $$ return isAssignable(left, ((PsiDisjunctionType) right).getLeastUpperBound(), allowUncheckedConversion, capture)[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_23 $$ if (left instanceof PsiLambdaExpressionType) [ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_63 $$ PsiClass lClass = PsiUtil.resolveClassInType(left)[ FD ]
Line_110 $$ if (leftResult.getElement() == null || rightResult.getElement() == null) -->Line_111 $$ if (leftResult.getElement() != rightResult.getElement())[ CD ]
Line_8 $$ if (right instanceof PsiMethodReferenceType) -->Line_10 $$ if (left instanceof PsiLambdaExpressionType) [ CD ]
Line_50 $$ if (left instanceof PsiCapturedWildcardType) -->Line_51 $$ return left.equals(right) || isAssignable(((PsiCapturedWildcardType) left).getLowerBound(), right, allowUncheckedConversion, capture)[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_80 $$ if (left instanceof PsiDisjunctionType) [ FD ]
Line_73 $$ PsiType lCompType = ((PsiArrayType) left).getComponentType()-->Line_76 $$ return lCompType.equals(rCompType)[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_90 $$ if (left instanceof PsiArrayType)[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_92 $$ if (right instanceof PsiPrimitiveType) [ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_51 $$ return left.equals(right) || isAssignable(((PsiCapturedWildcardType) left).getLowerBound(), right, allowUncheckedConversion, capture)[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_21 $$ if (right instanceof PsiLambdaExpressionType) [ CD ]
Line_39 $$ if (right instanceof PsiIntersectionType) -->Line_40 $$ PsiType[] conjuncts = ((PsiIntersectionType) right).getConjuncts()[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_87 $$ if (right instanceof PsiDisjunctionType) [ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_98 $$ int leftTypeIndex = TYPE_TO_RANK_MAP.get(left) - 1[ FD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_99 $$ int rightTypeIndex = TYPE_TO_RANK_MAP.get(right) - 1[ FD ]
Line_110 $$ if (leftResult.getElement() == null || rightResult.getElement() == null) -->Line_115 $$ if (lText.equals(rText))[ CD ]
Line_10 $$ if (left instanceof PsiLambdaExpressionType) -->Line_11 $$ final PsiType rType = methodReferenceExpression.getFunctionalInterfaceType()[ CD ]
Line_60 $$ if (!(left instanceof PsiArrayType)) -->Line_61 $$ if (left instanceof PsiPrimitiveType || PsiUtil.resolveClassInType(left) == null)[ CD ]
Line_2 $$ private static boolean isAssignable(@NotNull PsiType left, @NotNull PsiType right, boolean allowUncheckedConversion, boolean capture) -->Line_56 $$ if (right instanceof PsiWildcardType) [ CD ]
Line_59 $$ if (right instanceof PsiArrayType) -->Line_74 $$ PsiType rCompType = ((PsiArrayType) right).getComponentType()[ CD ]
