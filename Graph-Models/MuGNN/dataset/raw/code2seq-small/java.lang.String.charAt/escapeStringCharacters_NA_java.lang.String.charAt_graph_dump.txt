Line_4 $$ for (int idx = 0; idx < length; idx++) -->Line_5 $$ char ch = str.charAt(idx)[ CD ]
Line_27 $$ if (!isPrintableUnicode(ch)) -->Line_31 $$ while (paddingCount-- > 0) [ CD ]
Line_5 $$ char ch = str.charAt(idx)-->Line_26 $$ buffer.append("\\").append(ch)[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_24 $$ buffer.append("\\\\")[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_32 $$ buffer.append(0)[ FD ]
Line_4 $$ for (int idx = 0; idx < length; idx++) -->Line_39 $$ prev = ch[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_4 $$ for (int idx = 0; idx < length; idx++) [ CD ]
Line_25 $$ if (additionalChars != null && additionalChars.indexOf(ch) > -1 && (escapeSlash || prev != '\\')) -->Line_27 $$ if (!isPrintableUnicode(ch)) [ CD ]
Line_27 $$ if (!isPrintableUnicode(ch)) -->Line_36 $$ buffer.append(ch)[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_20 $$ buffer.append("\\r")[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_4 $$ for (int idx = 0; idx < length; idx++) [ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_3 $$ char prev = 0[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_17 $$ buffer.append("\\f")[ FD ]
Line_27 $$ if (!isPrintableUnicode(ch)) -->Line_30 $$ int paddingCount = 4 - hexCode.length()[ CD ]
Line_30 $$ int paddingCount = 4 - hexCode.length()-->Line_31 $$ while (paddingCount-- > 0) [ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_29 $$ buffer.append("\\u")[ FD ]
Line_5 $$ char ch = str.charAt(idx)-->Line_28 $$ CharSequence hexCode = StringUtilRt.toUpperCase(Integer.toHexString(ch))[ FD ]
Line_27 $$ if (!isPrintableUnicode(ch)) -->Line_29 $$ buffer.append("\\u")[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_36 $$ buffer.append(ch)[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_41 $$ return buffer[ CD ]
Line_31 $$ while (paddingCount-- > 0) -->Line_32 $$ buffer.append(0)[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_26 $$ buffer.append("\\").append(ch)[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_25 $$ if (additionalChars != null && additionalChars.indexOf(ch) > -1 && (escapeSlash || prev != '\\')) [ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_14 $$ buffer.append("\\n")[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_11 $$ buffer.append("\\t")[ FD ]
Line_4 $$ for (int idx = 0; idx < length; idx++) -->Line_5 $$ char ch = str.charAt(idx)[ FD ]
Line_28 $$ CharSequence hexCode = StringUtilRt.toUpperCase(Integer.toHexString(ch))-->Line_30 $$ int paddingCount = 4 - hexCode.length()[ FD ]
Line_23 $$ if (escapeSlash && ch == '\\') -->Line_24 $$ buffer.append("\\\\")[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_8 $$ buffer.append("\\b")[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_5 $$ char ch = str.charAt(idx)[ FD ]
Line_5 $$ char ch = str.charAt(idx)-->Line_25 $$ if (additionalChars != null && additionalChars.indexOf(ch) > -1 && (escapeSlash || prev != '\\')) [ FD ]
Line_27 $$ if (!isPrintableUnicode(ch)) -->Line_34 $$ buffer.append(hexCode)[ CD ]
Line_5 $$ char ch = str.charAt(idx)-->Line_27 $$ if (!isPrintableUnicode(ch)) [ FD ]
Line_23 $$ if (escapeSlash && ch == '\\') -->Line_25 $$ if (additionalChars != null && additionalChars.indexOf(ch) > -1 && (escapeSlash || prev != '\\')) [ CD ]
Line_5 $$ char ch = str.charAt(idx)-->Line_36 $$ buffer.append(ch)[ FD ]
Line_25 $$ if (additionalChars != null && additionalChars.indexOf(ch) > -1 && (escapeSlash || prev != '\\')) -->Line_26 $$ buffer.append("\\").append(ch)[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_23 $$ if (escapeSlash && ch == '\\') [ FD ]
Line_27 $$ if (!isPrintableUnicode(ch)) -->Line_28 $$ CharSequence hexCode = StringUtilRt.toUpperCase(Integer.toHexString(ch))[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull String str, @Nullable String additionalChars, boolean escapeSlash, @NotNull @NonNls StringBuilder buffer) -->Line_34 $$ buffer.append(hexCode)[ FD ]
Line_28 $$ CharSequence hexCode = StringUtilRt.toUpperCase(Integer.toHexString(ch))-->Line_34 $$ buffer.append(hexCode)[ FD ]
Line_3 $$ char prev = 0-->Line_39 $$ prev = ch[ FD ]
Line_5 $$ char ch = str.charAt(idx)-->Line_39 $$ prev = ch[ FD ]
