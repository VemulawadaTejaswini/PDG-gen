Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_68 $$ VcsDirtyScopeManager.getInstance(project).fileDirty(f)[ FD ]
Line_38 $$ if (realAdded.size() != 0 || realRemoved.size() != 0) -->Line_39 $$ final List<FilePath> files = new ArrayList<FilePath>()[ CD ]
Line_39 $$ final List<FilePath> files = new ArrayList<FilePath>()-->Line_40 $$ files.addAll(realAdded)[ FD ]
Line_39 $$ final List<FilePath> files = new ArrayList<FilePath>()-->Line_41 $$ files.addAll(realRemoved)[ FD ]
Line_47 $$ SelectFilePathsDialog dialog = new SelectFilePathsDialog(project, files, message, null, "Commit All Files", CommonBundle.getCancelButtonText(), false)-->Line_48 $$ dialog.setTitle(GitBundle.getString("commit.partial.merge.title"))[ FD ]
Line_3 $$ HashSet<FilePath> realAdded = new HashSet<FilePath>()-->Line_38 $$ if (realAdded.size() != 0 || realRemoved.size() != 0) [ FD ]
Line_44 $$ GuiUtils.runOrInvokeAndWait(new Runnable() -->Line_48 $$ dialog.setTitle(GitBundle.getString("commit.partial.merge.title"))[ CD ]
Line_18 $$ for (StringTokenizer lines = new StringTokenizer(output, "\n", false); lines.hasMoreTokens(); ) -->Line_19 $$ String line = lines.nextToken().trim()[ CD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_17 $$ String rootPath = root.getPath()[ FD ]
Line_42 $$ final Ref<Boolean> mergeAll = new Ref<Boolean>()-->Line_50 $$ mergeAll.set(dialog.isOK())[ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_37 $$ realRemoved.removeAll(removed)[ FD ]
Line_18 $$ for (StringTokenizer lines = new StringTokenizer(output, "\n", false); lines.hasMoreTokens(); ) -->Line_23 $$ String[] tk = line.split("\t")[ CD ]
Line_47 $$ SelectFilePathsDialog dialog = new SelectFilePathsDialog(project, files, message, null, "Commit All Files", CommonBundle.getCancelButtonText(), false)-->Line_50 $$ mergeAll.set(dialog.isOK())[ FD ]
Line_75 $$ if (author != null) -->Line_76 $$ handler.addParameters("--author=" + author)[ CD ]
Line_3 $$ HashSet<FilePath> realAdded = new HashSet<FilePath>()-->Line_36 $$ realAdded.removeAll(added)[ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_5 $$ GitSimpleHandler diff = new GitSimpleHandler(project, root, GitCommand.DIFF)[ CD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_80 $$ GitRepositoryManager manager = GitUtil.getRepositoryManager(project)[ FD ]
Line_44 $$ GuiUtils.runOrInvokeAndWait(new Runnable() -->Line_47 $$ SelectFilePathsDialog dialog = new SelectFilePathsDialog(project, files, message, null, "Commit All Files", CommonBundle.getCancelButtonText(), false)[ CD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_18 $$ for (StringTokenizer lines = new StringTokenizer(output, "\n", false); lines.hasMoreTokens(); ) [ CD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_10 $$ String output[ CD ]
Line_18 $$ for (StringTokenizer lines = new StringTokenizer(output, "\n", false); lines.hasMoreTokens(); ) -->Line_19 $$ String line = lines.nextToken().trim()[ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_8 $$ diff.addParameters("--diff-filter=ADMRUX", "--name-status", "HEAD")[ CD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_86 $$ return true[ CD ]
Line_10 $$ String output-->Line_12 $$ output = diff.run()[ FD ]
Line_4 $$ HashSet<FilePath> realRemoved = new HashSet<FilePath>()-->Line_61 $$ if (!updateIndex(project, root, realAdded, realRemoved, exceptions)) [ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_36 $$ realAdded.removeAll(added)[ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_65 $$ VcsDirtyScopeManager.getInstance(project).fileDirty(f)[ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_36 $$ realAdded.removeAll(added)[ CD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_17 $$ String rootPath = root.getPath()[ CD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_4 $$ HashSet<FilePath> realRemoved = new HashSet<FilePath>()[ CD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_7 $$ diff.setStdoutSuppressed(true)[ CD ]
Line_5 $$ GitSimpleHandler diff = new GitSimpleHandler(project, root, GitCommand.DIFF)-->Line_7 $$ diff.setStdoutSuppressed(true)[ FD ]
Line_19 $$ String line = lines.nextToken().trim()-->Line_20 $$ if (line.length() == 0) [ FD ]
Line_3 $$ HashSet<FilePath> realAdded = new HashSet<FilePath>()-->Line_27 $$ realAdded.add(VcsUtil.getFilePath(rootPath + "/" + tk[1]))[ FD ]
Line_38 $$ if (realAdded.size() != 0 || realRemoved.size() != 0) -->Line_41 $$ files.addAll(realRemoved)[ CD ]
Line_58 $$ if (!mergeAll.get()) -->Line_59 $$ return false[ CD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_6 $$ diff.setSilent(true)[ CD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_9 $$ diff.endOptions()[ CD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_83 $$ exceptions.add(ex)[ FD ]
Line_44 $$ GuiUtils.runOrInvokeAndWait(new Runnable() -->Line_49 $$ dialog.show()[ CD ]
Line_3 $$ HashSet<FilePath> realAdded = new HashSet<FilePath>()-->Line_61 $$ if (!updateIndex(project, root, realAdded, realRemoved, exceptions)) [ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_75 $$ if (author != null) [ FD ]
Line_5 $$ GitSimpleHandler diff = new GitSimpleHandler(project, root, GitCommand.DIFF)-->Line_8 $$ diff.addParameters("--diff-filter=ADMRUX", "--name-status", "HEAD")[ FD ]
Line_38 $$ if (realAdded.size() != 0 || realRemoved.size() != 0) -->Line_42 $$ final Ref<Boolean> mergeAll = new Ref<Boolean>()[ CD ]
Line_3 $$ HashSet<FilePath> realAdded = new HashSet<FilePath>()-->Line_40 $$ files.addAll(realAdded)[ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_14 $$ exceptions.add(ex)[ FD ]
Line_4 $$ HashSet<FilePath> realRemoved = new HashSet<FilePath>()-->Line_30 $$ realRemoved.add(VcsUtil.getFilePathForDeletedFile(rootPath + "/" + tk[1], false))[ FD ]
Line_47 $$ SelectFilePathsDialog dialog = new SelectFilePathsDialog(project, files, message, null, "Commit All Files", CommonBundle.getCancelButtonText(), false)-->Line_49 $$ dialog.show()[ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_3 $$ HashSet<FilePath> realAdded = new HashSet<FilePath>()[ CD ]
Line_42 $$ final Ref<Boolean> mergeAll = new Ref<Boolean>()-->Line_58 $$ if (!mergeAll.get()) [ FD ]
Line_38 $$ if (realAdded.size() != 0 || realRemoved.size() != 0) -->Line_61 $$ if (!updateIndex(project, root, realAdded, realRemoved, exceptions)) [ CD ]
Line_38 $$ if (realAdded.size() != 0 || realRemoved.size() != 0) -->Line_40 $$ files.addAll(realAdded)[ CD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_46 $$ String message = GitBundle.message("commit.partial.merge.message", partialOperation.getName())[ FD ]
Line_18 $$ for (StringTokenizer lines = new StringTokenizer(output, "\n", false); lines.hasMoreTokens(); ) -->Line_20 $$ if (line.length() == 0) [ CD ]
Line_44 $$ GuiUtils.runOrInvokeAndWait(new Runnable() -->Line_50 $$ mergeAll.set(dialog.isOK())[ CD ]
Line_4 $$ HashSet<FilePath> realRemoved = new HashSet<FilePath>()-->Line_41 $$ files.addAll(realRemoved)[ FD ]
Line_5 $$ GitSimpleHandler diff = new GitSimpleHandler(project, root, GitCommand.DIFF)-->Line_6 $$ diff.setSilent(true)[ FD ]
Line_4 $$ HashSet<FilePath> realRemoved = new HashSet<FilePath>()-->Line_37 $$ realRemoved.removeAll(removed)[ FD ]
Line_4 $$ HashSet<FilePath> realRemoved = new HashSet<FilePath>()-->Line_38 $$ if (realAdded.size() != 0 || realRemoved.size() != 0) [ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_74 $$ handler.addParameters("-F", messageFile.getAbsolutePath())[ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_81 $$ manager.updateRepository(root)[ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_61 $$ if (!updateIndex(project, root, realAdded, realRemoved, exceptions)) [ FD ]
Line_19 $$ String line = lines.nextToken().trim()-->Line_23 $$ String[] tk = line.split("\t")[ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_38 $$ if (realAdded.size() != 0 || realRemoved.size() != 0) [ CD ]
Line_44 $$ GuiUtils.runOrInvokeAndWait(new Runnable() -->Line_46 $$ String message = GitBundle.message("commit.partial.merge.message", partialOperation.getName())[ CD ]
Line_5 $$ GitSimpleHandler diff = new GitSimpleHandler(project, root, GitCommand.DIFF)-->Line_12 $$ output = diff.run()[ FD ]
Line_2 $$ private static boolean mergeCommit(final Project project, final VirtualFile root, final Set<FilePath> added, final Set<FilePath> removed, final File messageFile, final String author, List<VcsException> exceptions, @NotNull final PartialOperation partialOperation) -->Line_37 $$ realRemoved.removeAll(removed)[ CD ]
Line_61 $$ if (!updateIndex(project, root, realAdded, realRemoved, exceptions)) -->Line_62 $$ return false[ CD ]
Line_5 $$ GitSimpleHandler diff = new GitSimpleHandler(project, root, GitCommand.DIFF)-->Line_9 $$ diff.endOptions()[ FD ]
Line_38 $$ if (realAdded.size() != 0 || realRemoved.size() != 0) -->Line_58 $$ if (!mergeAll.get()) [ CD ]
