Line_85 $$ matches = metaData.getAliasAndIndexLookup()-->Line_92 $$ matches = metaData.getAliasAndIndexLookup().subMap(fromPrefix, toPrefix)[ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_84 $$ if (Regex.isMatchAllPattern(expression)) [ FD ]
Line_34 $$ expression = expression.substring(1)-->Line_87 $$ assert expression.length() >= 2 : "expression [" + expression + "] should have at least a length of 2"[ FD ]
Line_33 $$ add = true-->Line_50 $$ add = false[ FD ]
Line_51 $$ expression = expression.substring(1)-->Line_22 $$ if (metaData.getAliasAndIndexLookup().containsKey(expression)) [ FD ]
Line_4 $$ MetaData metaData = context.getState().metaData()-->Line_22 $$ if (metaData.getAliasAndIndexLookup().containsKey(expression)) [ FD ]
Line_29 $$ if (expression.charAt(0) == '+') -->Line_34 $$ expression = expression.substring(1)[ CD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_73 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed()) [ FD ]
Line_99 $$ if (aliasOrIndex.isAlias() == false) -->Line_101 $$ if (excludeState != null && index.getIndex().getState() == excludeState) [ CD ]
Line_55 $$ IndexNotFoundException infe = new IndexNotFoundException(expression)-->Line_122 $$ infe.setResources("index_or_alias", expressions.toArray(new String[0]))[ FD ]
Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))-->Line_70 $$ result.addAll(expressions.subList(0, i))[ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_3 $$ IndicesOptions options = context.getOptions()[ FD ]
Line_42 $$ if (options.expandWildcardsClosed()) -->Line_46 $$ concreteIndices = Strings.EMPTY_ARRAY[ CD ]
Line_34 $$ expression = expression.substring(1)-->Line_53 $$ if (!Regex.isSimpleMatchPattern(expression)) [ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_21 $$ String expression = expressions.get(i)[ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_56 $$ infe.setResources("index_or_alias", expression)[ FD ]
Line_51 $$ expression = expression.substring(1)-->Line_34 $$ expression = expression.substring(1)[ FD ]
Line_28 $$ boolean add = true-->Line_50 $$ add = false[ FD ]
Line_19 $$ Set<String> result = null-->Line_106 $$ result.add(entry.getKey())[ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_20 $$ for (int i = 0; i < expressions.size(); i++) [ CD ]
Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))-->Line_69 $$ result = new HashSet()[ FD ]
Line_34 $$ expression = expression.substring(1)-->Line_54 $$ if (!options.ignoreUnavailable() && !metaData.getAliasAndIndexLookup().containsKey(expression)) [ FD ]
Line_69 $$ result = new HashSet()-->Line_23 $$ if (result != null) [ FD ]
Line_4 $$ MetaData metaData = context.getState().metaData()-->Line_14 $$ return Arrays.asList(metaData.concreteAllClosedIndices())[ FD ]
Line_83 $$ final Map<String, AliasOrIndex> matches-->Line_95 $$ matches = metaData.getAliasAndIndexLookup().entrySet().stream().filter( e -> Regex.simpleMatch(pattern, e.getKey())).collect(Collectors.toMap(Map.Entry::<>getKey, Map.Entry::<>getValue))[ FD ]
Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))-->Line_24 $$ result.add(expression)[ FD ]
Line_4 $$ MetaData metaData = context.getState().metaData()-->Line_10 $$ return Arrays.asList(metaData.concreteAllIndices())[ FD ]
Line_39 $$ concreteIndices = metaData.concreteAllIndices()-->Line_41 $$ concreteIndices = metaData.concreteAllOpenIndices()[ FD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_21 $$ String expression = expressions.get(i)[ CD ]
Line_85 $$ matches = metaData.getAliasAndIndexLookup()-->Line_97 $$ for (Map.Entry<String, AliasOrIndex> entry : matches.entrySet()) [ FD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_30 $$ if (i == 0) [ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_70 $$ result.addAll(expressions.subList(0, i))[ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_4 $$ MetaData metaData = context.getState().metaData()[ FD ]
Line_35 $$ if (expression.charAt(0) == '-') -->Line_51 $$ expression = expression.substring(1)[ CD ]
Line_74 $$ excludeState = null-->Line_78 $$ excludeState = IndexMetaData.State.OPEN[ FD ]
Line_29 $$ if (expression.charAt(0) == '+') -->Line_33 $$ add = true[ CD ]
Line_43 $$ concreteIndices = metaData.concreteAllClosedIndices()-->Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))[ FD ]
Line_88 $$ String fromPrefix = expression.substring(0, expression.length() - 1)-->Line_89 $$ char[] toPrefixCharArr = fromPrefix.toCharArray()[ FD ]
Line_69 $$ result = new HashSet()-->Line_61 $$ result.add(expression)[ FD ]
Line_86 $$ if (expression.indexOf("*") == expression.length() - 1) -->Line_90 $$ toPrefixCharArr[toPrefixCharArr.length - 1]++[ CD ]
Line_31 $$ result = new HashSet()-->Line_108 $$ result.remove(entry.getKey())[ FD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_75 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed() == false) [ FD ]
Line_29 $$ if (expression.charAt(0) == '+') -->Line_35 $$ if (expression.charAt(0) == '-') [ CD ]
Line_4 $$ MetaData metaData = context.getState().metaData()-->Line_43 $$ concreteIndices = metaData.concreteAllClosedIndices()[ FD ]
Line_43 $$ concreteIndices = metaData.concreteAllClosedIndices()-->Line_46 $$ concreteIndices = Strings.EMPTY_ARRAY[ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_53 $$ if (!Regex.isSimpleMatchPattern(expression)) [ FD ]
Line_75 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed() == false) -->Line_76 $$ excludeState = IndexMetaData.State.CLOSE[ CD ]
Line_76 $$ excludeState = IndexMetaData.State.CLOSE-->Line_78 $$ excludeState = IndexMetaData.State.OPEN[ FD ]
Line_51 $$ expression = expression.substring(1)-->Line_87 $$ assert expression.length() >= 2 : "expression [" + expression + "] should have at least a length of 2"[ FD ]
Line_19 $$ Set<String> result = null-->Line_70 $$ result.addAll(expressions.subList(0, i))[ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_122 $$ infe.setResources("index_or_alias", expressions.toArray(new String[0]))[ FD ]
Line_39 $$ concreteIndices = metaData.concreteAllIndices()-->Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))[ FD ]
Line_111 $$ if (matches.isEmpty() && options.allowNoIndices() == false) -->Line_113 $$ infe.setResources("index_or_alias", expression)[ CD ]
Line_86 $$ if (expression.indexOf("*") == expression.length() - 1) -->Line_92 $$ matches = metaData.getAliasAndIndexLookup().subMap(fromPrefix, toPrefix)[ CD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_38 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed()) [ FD ]
Line_41 $$ concreteIndices = metaData.concreteAllOpenIndices()-->Line_43 $$ concreteIndices = metaData.concreteAllClosedIndices()[ FD ]
Line_34 $$ expression = expression.substring(1)-->Line_29 $$ if (expression.charAt(0) == '+') [ FD ]
Line_105 $$ if (add) -->Line_106 $$ result.add(entry.getKey())[ CD ]
Line_69 $$ result = new HashSet()-->Line_59 $$ if (result != null) [ FD ]
Line_86 $$ if (expression.indexOf("*") == expression.length() - 1) -->Line_88 $$ String fromPrefix = expression.substring(0, expression.length() - 1)[ CD ]
Line_31 $$ result = new HashSet()-->Line_23 $$ if (result != null) [ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_35 $$ if (expression.charAt(0) == '-') [ FD ]
Line_4 $$ MetaData metaData = context.getState().metaData()-->Line_12 $$ return Arrays.asList(metaData.concreteAllOpenIndices())[ FD ]
Line_4 $$ MetaData metaData = context.getState().metaData()-->Line_54 $$ if (!options.ignoreUnavailable() && !metaData.getAliasAndIndexLookup().containsKey(expression)) [ FD ]
Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))-->Line_61 $$ result.add(expression)[ FD ]
Line_68 $$ if (result == null) -->Line_69 $$ result = new HashSet()[ CD ]
Line_77 $$ if (options.expandWildcardsClosed() && options.expandWildcardsOpen() == false) -->Line_81 $$ excludeState = null[ CD ]
Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))-->Line_117 $$ if (result == null) [ FD ]
Line_22 $$ if (metaData.getAliasAndIndexLookup().containsKey(expression)) -->Line_23 $$ if (result != null) [ CD ]
Line_38 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed()) -->Line_39 $$ concreteIndices = metaData.concreteAllIndices()[ CD ]
Line_9 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed()) -->Line_11 $$ if (options.expandWildcardsOpen()) [ CD ]
Line_34 $$ expression = expression.substring(1)-->Line_61 $$ result.add(expression)[ FD ]
Line_51 $$ expression = expression.substring(1)-->Line_63 $$ result.remove(expression)[ FD ]
Line_31 $$ result = new HashSet()-->Line_106 $$ result.add(entry.getKey())[ FD ]
Line_121 $$ IndexNotFoundException infe = new IndexNotFoundException((String) null)-->Line_122 $$ infe.setResources("index_or_alias", expressions.toArray(new String[0]))[ FD ]
Line_69 $$ result = new HashSet()-->Line_117 $$ if (result == null) [ FD ]
Line_73 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed()) -->Line_74 $$ excludeState = null[ CD ]
Line_84 $$ if (Regex.isMatchAllPattern(expression)) -->Line_85 $$ matches = metaData.getAliasAndIndexLookup()[ CD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_36 $$ if (i == 0) [ FD ]
Line_40 $$ if (options.expandWildcardsOpen()) -->Line_42 $$ if (options.expandWildcardsClosed()) [ CD ]
Line_21 $$ String expression = expressions.get(i)-->Line_113 $$ infe.setResources("index_or_alias", expression)[ FD ]
Line_9 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed()) -->Line_10 $$ return Arrays.asList(metaData.concreteAllIndices())[ CD ]
Line_34 $$ expression = expression.substring(1)-->Line_35 $$ if (expression.charAt(0) == '-') [ FD ]
Line_53 $$ if (!Regex.isSimpleMatchPattern(expression)) -->Line_54 $$ if (!options.ignoreUnavailable() && !metaData.getAliasAndIndexLookup().containsKey(expression)) [ CD ]
Line_21 $$ String expression = expressions.get(i)-->Line_54 $$ if (!options.ignoreUnavailable() && !metaData.getAliasAndIndexLookup().containsKey(expression)) [ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_86 $$ if (expression.indexOf("*") == expression.length() - 1) [ FD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_83 $$ final Map<String, AliasOrIndex> matches[ CD ]
Line_19 $$ Set<String> result = null-->Line_23 $$ if (result != null) [ FD ]
Line_54 $$ if (!options.ignoreUnavailable() && !metaData.getAliasAndIndexLookup().containsKey(expression)) -->Line_55 $$ IndexNotFoundException infe = new IndexNotFoundException(expression)[ CD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_42 $$ if (options.expandWildcardsClosed()) [ FD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_68 $$ if (result == null) [ CD ]
Line_91 $$ String toPrefix = new String(toPrefixCharArr)-->Line_92 $$ matches = metaData.getAliasAndIndexLookup().subMap(fromPrefix, toPrefix)[ FD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_11 $$ if (options.expandWildcardsOpen()) [ FD ]
Line_55 $$ IndexNotFoundException infe = new IndexNotFoundException(expression)-->Line_56 $$ infe.setResources("index_or_alias", expression)[ FD ]
Line_31 $$ result = new HashSet()-->Line_70 $$ result.addAll(expressions.subList(0, i))[ FD ]
Line_74 $$ excludeState = null-->Line_81 $$ excludeState = null[ FD ]
Line_54 $$ if (!options.ignoreUnavailable() && !metaData.getAliasAndIndexLookup().containsKey(expression)) -->Line_56 $$ infe.setResources("index_or_alias", expression)[ CD ]
Line_51 $$ expression = expression.substring(1)-->Line_86 $$ if (expression.indexOf("*") == expression.length() - 1) [ FD ]
Line_105 $$ if (add) -->Line_108 $$ result.remove(entry.getKey())[ CD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_40 $$ if (options.expandWildcardsOpen()) [ FD ]
Line_51 $$ expression = expression.substring(1)-->Line_113 $$ infe.setResources("index_or_alias", expression)[ FD ]
Line_4 $$ MetaData metaData = context.getState().metaData()-->Line_85 $$ matches = metaData.getAliasAndIndexLookup()[ FD ]
Line_34 $$ expression = expression.substring(1)-->Line_24 $$ result.add(expression)[ FD ]
Line_34 $$ expression = expression.substring(1)-->Line_63 $$ result.remove(expression)[ FD ]
Line_100 $$ AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex-->Line_101 $$ if (excludeState != null && index.getIndex().getState() == excludeState) [ FD ]
Line_86 $$ if (expression.indexOf("*") == expression.length() - 1) -->Line_94 $$ final String pattern = expression[ CD ]
Line_98 $$ AliasOrIndex aliasOrIndex = entry.getValue()-->Line_99 $$ if (aliasOrIndex.isAlias() == false) [ FD ]
Line_19 $$ Set<String> result = null-->Line_68 $$ if (result == null) [ FD ]
Line_73 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed()) -->Line_75 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed() == false) [ CD ]
Line_38 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed()) -->Line_40 $$ if (options.expandWildcardsOpen()) [ CD ]
Line_21 $$ String expression = expressions.get(i)-->Line_88 $$ String fromPrefix = expression.substring(0, expression.length() - 1)[ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_8 $$ if (expressions.isEmpty() || (expressions.size() == 1 && (MetaData.ALL.equals(expressions.get(0))) || Regex.isMatchAllPattern(expressions.get(0)))) [ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_63 $$ result.remove(expression)[ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_51 $$ expression = expression.substring(1)[ FD ]
Line_74 $$ excludeState = null-->Line_76 $$ excludeState = IndexMetaData.State.CLOSE[ FD ]
Line_4 $$ MetaData metaData = context.getState().metaData()-->Line_39 $$ concreteIndices = metaData.concreteAllIndices()[ FD ]
Line_86 $$ if (expression.indexOf("*") == expression.length() - 1) -->Line_89 $$ char[] toPrefixCharArr = fromPrefix.toCharArray()[ CD ]
Line_83 $$ final Map<String, AliasOrIndex> matches-->Line_97 $$ for (Map.Entry<String, AliasOrIndex> entry : matches.entrySet()) [ FD ]
Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))-->Line_106 $$ result.add(entry.getKey())[ FD ]
Line_92 $$ matches = metaData.getAliasAndIndexLookup().subMap(fromPrefix, toPrefix)-->Line_97 $$ for (Map.Entry<String, AliasOrIndex> entry : matches.entrySet()) [ FD ]
Line_11 $$ if (options.expandWildcardsOpen()) -->Line_12 $$ return Arrays.asList(metaData.concreteAllOpenIndices())[ CD ]
Line_97 $$ for (Map.Entry<String, AliasOrIndex> entry : matches.entrySet()) -->Line_98 $$ AliasOrIndex aliasOrIndex = entry.getValue()[ FD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_28 $$ boolean add = true[ CD ]
Line_29 $$ if (expression.charAt(0) == '+') -->Line_30 $$ if (i == 0) [ CD ]
Line_51 $$ expression = expression.substring(1)-->Line_24 $$ result.add(expression)[ FD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_111 $$ if (matches.isEmpty() && options.allowNoIndices() == false) [ CD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_4 $$ MetaData metaData = context.getState().metaData()[ CD ]
Line_51 $$ expression = expression.substring(1)-->Line_84 $$ if (Regex.isMatchAllPattern(expression)) [ FD ]
Line_23 $$ if (result != null) -->Line_24 $$ result.add(expression)[ CD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_5 $$ if (options.expandWildcardsClosed() == false && options.expandWildcardsOpen() == false) [ FD ]
Line_60 $$ if (add) -->Line_63 $$ result.remove(expression)[ CD ]
Line_95 $$ matches = metaData.getAliasAndIndexLookup().entrySet().stream().filter( e -> Regex.simpleMatch(pattern, e.getKey())).collect(Collectors.toMap(Map.Entry::<>getKey, Map.Entry::<>getValue))-->Line_97 $$ for (Map.Entry<String, AliasOrIndex> entry : matches.entrySet()) [ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_87 $$ assert expression.length() >= 2 : "expression [" + expression + "] should have at least a length of 2"[ FD ]
Line_39 $$ concreteIndices = metaData.concreteAllIndices()-->Line_43 $$ concreteIndices = metaData.concreteAllClosedIndices()[ FD ]
Line_86 $$ if (expression.indexOf("*") == expression.length() - 1) -->Line_91 $$ String toPrefix = new String(toPrefixCharArr)[ CD ]
Line_59 $$ if (result != null) -->Line_60 $$ if (add) [ CD ]
Line_28 $$ boolean add = true-->Line_33 $$ add = true[ FD ]
Line_69 $$ result = new HashSet()-->Line_108 $$ result.remove(entry.getKey())[ FD ]
Line_37 $$ String[] concreteIndices-->Line_43 $$ concreteIndices = metaData.concreteAllClosedIndices()[ FD ]
Line_72 $$ final IndexMetaData.State excludeState-->Line_78 $$ excludeState = IndexMetaData.State.OPEN[ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_125 $$ return new ArrayList(result)[ CD ]
Line_51 $$ expression = expression.substring(1)-->Line_35 $$ if (expression.charAt(0) == '-') [ FD ]
Line_37 $$ String[] concreteIndices-->Line_39 $$ concreteIndices = metaData.concreteAllIndices()[ FD ]
Line_117 $$ if (result == null) -->Line_118 $$ return expressions[ CD ]
Line_31 $$ result = new HashSet()-->Line_69 $$ result = new HashSet()[ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_29 $$ if (expression.charAt(0) == '+') [ FD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_29 $$ if (expression.charAt(0) == '+') [ CD ]
Line_84 $$ if (Regex.isMatchAllPattern(expression)) -->Line_86 $$ if (expression.indexOf("*") == expression.length() - 1) [ CD ]
Line_46 $$ concreteIndices = Strings.EMPTY_ARRAY-->Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))[ FD ]
Line_13 $$ if (options.expandWildcardsClosed()) -->Line_14 $$ return Arrays.asList(metaData.concreteAllClosedIndices())[ CD ]
Line_37 $$ String[] concreteIndices-->Line_41 $$ concreteIndices = metaData.concreteAllOpenIndices()[ FD ]
Line_31 $$ result = new HashSet()-->Line_63 $$ result.remove(expression)[ FD ]
Line_31 $$ result = new HashSet()-->Line_59 $$ if (result != null) [ FD ]
Line_19 $$ Set<String> result = null-->Line_120 $$ if (result.isEmpty() && !options.allowNoIndices()) [ FD ]
Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))-->Line_120 $$ if (result.isEmpty() && !options.allowNoIndices()) [ FD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_13 $$ if (options.expandWildcardsClosed()) [ FD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_21 $$ String expression = expressions.get(i)[ FD ]
Line_8 $$ if (expressions.isEmpty() || (expressions.size() == 1 && (MetaData.ALL.equals(expressions.get(0))) || Regex.isMatchAllPattern(expressions.get(0)))) -->Line_9 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed()) [ CD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_22 $$ if (metaData.getAliasAndIndexLookup().containsKey(expression)) [ CD ]
Line_31 $$ result = new HashSet()-->Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))[ FD ]
Line_41 $$ concreteIndices = metaData.concreteAllOpenIndices()-->Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))[ FD ]
Line_83 $$ final Map<String, AliasOrIndex> matches-->Line_85 $$ matches = metaData.getAliasAndIndexLookup()[ FD ]
Line_51 $$ expression = expression.substring(1)-->Line_88 $$ String fromPrefix = expression.substring(0, expression.length() - 1)[ FD ]
Line_34 $$ expression = expression.substring(1)-->Line_56 $$ infe.setResources("index_or_alias", expression)[ FD ]
Line_94 $$ final String pattern = expression-->Line_95 $$ Regex.simpleMatch(pattern, e.getKey())[ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_120 $$ if (result.isEmpty() && !options.allowNoIndices()) [ CD ]
Line_75 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed() == false) -->Line_77 $$ if (options.expandWildcardsClosed() && options.expandWildcardsOpen() == false) [ CD ]
Line_34 $$ expression = expression.substring(1)-->Line_22 $$ if (metaData.getAliasAndIndexLookup().containsKey(expression)) [ FD ]
Line_36 $$ if (i == 0) -->Line_37 $$ String[] concreteIndices[ CD ]
Line_51 $$ expression = expression.substring(1)-->Line_29 $$ if (expression.charAt(0) == '+') [ FD ]
Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))-->Line_63 $$ result.remove(expression)[ FD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_54 $$ if (!options.ignoreUnavailable() && !metaData.getAliasAndIndexLookup().containsKey(expression)) [ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_5 $$ if (options.expandWildcardsClosed() == false && options.expandWildcardsOpen() == false) [ CD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_19 $$ Set<String> result = null[ CD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_84 $$ if (Regex.isMatchAllPattern(expression)) [ CD ]
Line_30 $$ if (i == 0) -->Line_31 $$ result = new HashSet()[ CD ]
Line_51 $$ expression = expression.substring(1)-->Line_61 $$ result.add(expression)[ FD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_53 $$ if (!Regex.isSimpleMatchPattern(expression)) [ CD ]
Line_95 $$ matches = metaData.getAliasAndIndexLookup().entrySet().stream().filter( e -> Regex.simpleMatch(pattern, e.getKey())).collect(Collectors.toMap(Map.Entry::<>getKey, Map.Entry::<>getValue))-->Line_111 $$ if (matches.isEmpty() && options.allowNoIndices() == false) [ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_3 $$ IndicesOptions options = context.getOptions()[ CD ]
Line_37 $$ String[] concreteIndices-->Line_46 $$ concreteIndices = Strings.EMPTY_ARRAY[ FD ]
Line_83 $$ final Map<String, AliasOrIndex> matches-->Line_92 $$ matches = metaData.getAliasAndIndexLookup().subMap(fromPrefix, toPrefix)[ FD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_77 $$ if (options.expandWildcardsClosed() && options.expandWildcardsOpen() == false) [ FD ]
Line_85 $$ matches = metaData.getAliasAndIndexLookup()-->Line_111 $$ if (matches.isEmpty() && options.allowNoIndices() == false) [ FD ]
Line_69 $$ result = new HashSet()-->Line_120 $$ if (result.isEmpty() && !options.allowNoIndices()) [ FD ]
Line_120 $$ if (result.isEmpty() && !options.allowNoIndices()) -->Line_122 $$ infe.setResources("index_or_alias", expressions.toArray(new String[0]))[ CD ]
Line_35 $$ if (expression.charAt(0) == '-') -->Line_36 $$ if (i == 0) [ CD ]
Line_19 $$ Set<String> result = null-->Line_59 $$ if (result != null) [ FD ]
Line_97 $$ for (Map.Entry<String, AliasOrIndex> entry : matches.entrySet()) -->Line_106 $$ result.add(entry.getKey())[ FD ]
Line_68 $$ if (result == null) -->Line_70 $$ result.addAll(expressions.subList(0, i))[ CD ]
Line_19 $$ Set<String> result = null-->Line_24 $$ result.add(expression)[ FD ]
Line_34 $$ expression = expression.substring(1)-->Line_88 $$ String fromPrefix = expression.substring(0, expression.length() - 1)[ FD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_120 $$ if (result.isEmpty() && !options.allowNoIndices()) [ FD ]
Line_37 $$ String[] concreteIndices-->Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))[ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_34 $$ expression = expression.substring(1)[ FD ]
Line_31 $$ result = new HashSet()-->Line_61 $$ result.add(expression)[ FD ]
Line_19 $$ Set<String> result = null-->Line_117 $$ if (result == null) [ FD ]
Line_19 $$ Set<String> result = null-->Line_31 $$ result = new HashSet()[ FD ]
Line_34 $$ expression = expression.substring(1)-->Line_86 $$ if (expression.indexOf("*") == expression.length() - 1) [ FD ]
Line_69 $$ result = new HashSet()-->Line_70 $$ result.addAll(expressions.subList(0, i))[ FD ]
Line_4 $$ MetaData metaData = context.getState().metaData()-->Line_92 $$ matches = metaData.getAliasAndIndexLookup().subMap(fromPrefix, toPrefix)[ FD ]
Line_31 $$ result = new HashSet()-->Line_120 $$ if (result.isEmpty() && !options.allowNoIndices()) [ FD ]
Line_92 $$ matches = metaData.getAliasAndIndexLookup().subMap(fromPrefix, toPrefix)-->Line_95 $$ matches = metaData.getAliasAndIndexLookup().entrySet().stream().filter( e -> Regex.simpleMatch(pattern, e.getKey())).collect(Collectors.toMap(Map.Entry::<>getKey, Map.Entry::<>getValue))[ FD ]
Line_99 $$ if (aliasOrIndex.isAlias() == false) -->Line_100 $$ AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex[ CD ]
Line_69 $$ result = new HashSet()-->Line_68 $$ if (result == null) [ FD ]
Line_120 $$ if (result.isEmpty() && !options.allowNoIndices()) -->Line_121 $$ IndexNotFoundException infe = new IndexNotFoundException((String) null)[ CD ]
Line_83 $$ final Map<String, AliasOrIndex> matches-->Line_111 $$ if (matches.isEmpty() && options.allowNoIndices() == false) [ FD ]
Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))-->Line_68 $$ if (result == null) [ FD ]
Line_39 $$ concreteIndices = metaData.concreteAllIndices()-->Line_46 $$ concreteIndices = Strings.EMPTY_ARRAY[ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_61 $$ result.add(expression)[ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_24 $$ result.add(expression)[ FD ]
Line_36 $$ if (i == 0) -->Line_38 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed()) [ CD ]
Line_51 $$ expression = expression.substring(1)-->Line_56 $$ infe.setResources("index_or_alias", expression)[ FD ]
Line_78 $$ excludeState = IndexMetaData.State.OPEN-->Line_81 $$ excludeState = null[ FD ]
Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))-->Line_108 $$ result.remove(entry.getKey())[ FD ]
Line_97 $$ for (Map.Entry<String, AliasOrIndex> entry : matches.entrySet()) -->Line_108 $$ result.remove(entry.getKey())[ FD ]
Line_92 $$ matches = metaData.getAliasAndIndexLookup().subMap(fromPrefix, toPrefix)-->Line_111 $$ if (matches.isEmpty() && options.allowNoIndices() == false) [ FD ]
Line_34 $$ expression = expression.substring(1)-->Line_84 $$ if (Regex.isMatchAllPattern(expression)) [ FD ]
Line_34 $$ expression = expression.substring(1)-->Line_51 $$ expression = expression.substring(1)[ FD ]
Line_36 $$ if (i == 0) -->Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))[ CD ]
Line_4 $$ MetaData metaData = context.getState().metaData()-->Line_41 $$ concreteIndices = metaData.concreteAllOpenIndices()[ FD ]
Line_31 $$ result = new HashSet()-->Line_117 $$ if (result == null) [ FD ]
Line_4 $$ MetaData metaData = context.getState().metaData()-->Line_95 $$ matches = metaData.getAliasAndIndexLookup().entrySet().stream().filter( e -> Regex.simpleMatch(pattern, e.getKey())).collect(Collectors.toMap(Map.Entry::<>getKey, Map.Entry::<>getValue))[ FD ]
Line_31 $$ result = new HashSet()-->Line_24 $$ result.add(expression)[ FD ]
Line_69 $$ result = new HashSet()-->Line_106 $$ result.add(entry.getKey())[ FD ]
Line_19 $$ Set<String> result = null-->Line_61 $$ result.add(expression)[ FD ]
Line_19 $$ Set<String> result = null-->Line_69 $$ result = new HashSet()[ FD ]
Line_13 $$ if (options.expandWildcardsClosed()) -->Line_16 $$ return Collections.emptyList()[ CD ]
Line_88 $$ String fromPrefix = expression.substring(0, expression.length() - 1)-->Line_92 $$ matches = metaData.getAliasAndIndexLookup().subMap(fromPrefix, toPrefix)[ FD ]
Line_40 $$ if (options.expandWildcardsOpen()) -->Line_41 $$ concreteIndices = metaData.concreteAllOpenIndices()[ CD ]
Line_69 $$ result = new HashSet()-->Line_24 $$ result.add(expression)[ FD ]
Line_41 $$ concreteIndices = metaData.concreteAllOpenIndices()-->Line_46 $$ concreteIndices = Strings.EMPTY_ARRAY[ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_20 $$ for (int i = 0; i < expressions.size(); i++) [ FD ]
Line_53 $$ if (!Regex.isSimpleMatchPattern(expression)) -->Line_59 $$ if (result != null) [ CD ]
Line_60 $$ if (add) -->Line_61 $$ result.add(expression)[ CD ]
Line_72 $$ final IndexMetaData.State excludeState-->Line_74 $$ excludeState = null[ FD ]
Line_31 $$ result = new HashSet()-->Line_68 $$ if (result == null) [ FD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_72 $$ final IndexMetaData.State excludeState[ CD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_73 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed()) [ CD ]
Line_85 $$ matches = metaData.getAliasAndIndexLookup()-->Line_95 $$ matches = metaData.getAliasAndIndexLookup().entrySet().stream().filter( e -> Regex.simpleMatch(pattern, e.getKey())).collect(Collectors.toMap(Map.Entry::<>getKey, Map.Entry::<>getValue))[ FD ]
Line_77 $$ if (options.expandWildcardsClosed() && options.expandWildcardsOpen() == false) -->Line_78 $$ excludeState = IndexMetaData.State.OPEN[ CD ]
Line_34 $$ expression = expression.substring(1)-->Line_113 $$ infe.setResources("index_or_alias", expression)[ FD ]
Line_21 $$ String expression = expressions.get(i)-->Line_22 $$ if (metaData.getAliasAndIndexLookup().containsKey(expression)) [ FD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_9 $$ if (options.expandWildcardsOpen() && options.expandWildcardsClosed()) [ FD ]
Line_51 $$ expression = expression.substring(1)-->Line_54 $$ if (!options.ignoreUnavailable() && !metaData.getAliasAndIndexLookup().containsKey(expression)) [ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_117 $$ if (result == null) [ CD ]
Line_51 $$ expression = expression.substring(1)-->Line_53 $$ if (!Regex.isSimpleMatchPattern(expression)) [ FD ]
Line_86 $$ if (expression.indexOf("*") == expression.length() - 1) -->Line_95 $$ matches = metaData.getAliasAndIndexLookup().entrySet().stream().filter( e -> Regex.simpleMatch(pattern, e.getKey())).collect(Collectors.toMap(Map.Entry::<>getKey, Map.Entry::<>getValue))[ CD ]
Line_76 $$ excludeState = IndexMetaData.State.CLOSE-->Line_81 $$ excludeState = null[ FD ]
Line_35 $$ if (expression.charAt(0) == '-') -->Line_50 $$ add = false[ CD ]
Line_19 $$ Set<String> result = null-->Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))[ FD ]
Line_72 $$ final IndexMetaData.State excludeState-->Line_76 $$ excludeState = IndexMetaData.State.CLOSE[ FD ]
Line_19 $$ Set<String> result = null-->Line_63 $$ result.remove(expression)[ FD ]
Line_19 $$ Set<String> result = null-->Line_108 $$ result.remove(entry.getKey())[ FD ]
Line_2 $$ public List<String> resolve(Context context, List<String> expressions) -->Line_8 $$ if (expressions.isEmpty() || (expressions.size() == 1 && (MetaData.ALL.equals(expressions.get(0))) || Regex.isMatchAllPattern(expressions.get(0)))) [ CD ]
Line_11 $$ if (options.expandWildcardsOpen()) -->Line_13 $$ if (options.expandWildcardsClosed()) [ CD ]
Line_55 $$ IndexNotFoundException infe = new IndexNotFoundException(expression)-->Line_113 $$ infe.setResources("index_or_alias", expression)[ FD ]
Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))-->Line_59 $$ if (result != null) [ FD ]
Line_3 $$ IndicesOptions options = context.getOptions()-->Line_111 $$ if (matches.isEmpty() && options.allowNoIndices() == false) [ FD ]
Line_20 $$ for (int i = 0; i < expressions.size(); i++) -->Line_70 $$ result.addAll(expressions.subList(0, i))[ FD ]
Line_48 $$ result = new HashSet(Arrays.asList(concreteIndices))-->Line_23 $$ if (result != null) [ FD ]
Line_72 $$ final IndexMetaData.State excludeState-->Line_81 $$ excludeState = null[ FD ]
Line_42 $$ if (options.expandWildcardsClosed()) -->Line_43 $$ concreteIndices = metaData.concreteAllClosedIndices()[ CD ]
Line_69 $$ result = new HashSet()-->Line_63 $$ result.remove(expression)[ FD ]
Line_5 $$ if (options.expandWildcardsClosed() == false && options.expandWildcardsOpen() == false) -->Line_6 $$ return expressions[ CD ]
