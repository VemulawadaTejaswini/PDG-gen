Line_2 $$ private static String guessSeparator(final ResourceBundleImpl resourceBundle) -->Line_21 $$ charCounts.forEachKey(new TIntProcedure() [ CD ]
Line_9 $$ String key = property.getUnescapedKey()-->Line_13 $$ char c = key.charAt(i)[ FD ]
Line_4 $$ for (PropertiesFile propertiesFile : resourceBundle.getPropertiesFiles()) -->Line_5 $$ if (propertiesFile == null)[ FD ]
Line_21 $$ charCounts.forEachKey(new TIntProcedure() -->Line_25 $$ if (charCount > count) [ CD ]
Line_9 $$ String key = property.getUnescapedKey()-->Line_12 $$ for (int i = 0; i < key.length(); i++) [ FD ]
Line_3 $$ final TIntLongHashMap charCounts = new TIntLongHashMap()-->Line_21 $$ charCounts.forEachKey(new TIntProcedure() [ FD ]
Line_32 $$ if (mostProbableChar[0] == 0) -->Line_33 $$ mostProbableChar[0] = '.'[ CD ]
Line_8 $$ for (IProperty property : properties) -->Line_9 $$ String key = property.getUnescapedKey()[ FD ]
Line_2 $$ private static String guessSeparator(final ResourceBundleImpl resourceBundle) -->Line_4 $$ for (PropertiesFile propertiesFile : resourceBundle.getPropertiesFiles()) [ FD ]
Line_4 $$ for (PropertiesFile propertiesFile : resourceBundle.getPropertiesFiles()) -->Line_7 $$ List<IProperty> properties = propertiesFile.getProperties()[ FD ]
Line_25 $$ if (charCount > count) -->Line_26 $$ count = charCount[ CD ]
Line_9 $$ String key = property.getUnescapedKey()-->Line_10 $$ if (key == null)[ FD ]
Line_14 $$ if (!Character.isLetterOrDigit(c)) -->Line_15 $$ charCounts.put(c, charCounts.get(c) + 1)[ CD ]
Line_24 $$ long charCount = charCounts.get(ch)-->Line_26 $$ count = charCount[ FD ]
Line_24 $$ long charCount = charCounts.get(ch)-->Line_25 $$ if (charCount > count) [ FD ]
Line_21 $$ charCounts.forEachKey(new TIntProcedure() -->Line_24 $$ long charCount = charCounts.get(ch)[ FD ]
Line_2 $$ private static String guessSeparator(final ResourceBundleImpl resourceBundle) -->Line_3 $$ final TIntLongHashMap charCounts = new TIntLongHashMap()[ CD ]
Line_21 $$ charCounts.forEachKey(new TIntProcedure() -->Line_29 $$ return true[ CD ]
Line_12 $$ for (int i = 0; i < key.length(); i++) -->Line_14 $$ if (!Character.isLetterOrDigit(c)) [ CD ]
Line_3 $$ final TIntLongHashMap charCounts = new TIntLongHashMap()-->Line_15 $$ charCounts.put(c, charCounts.get(c) + 1)[ FD ]
Line_2 $$ private static String guessSeparator(final ResourceBundleImpl resourceBundle) -->Line_20 $$ final char[] mostProbableChar = new char[] [ CD ]
Line_25 $$ if (charCount > count) -->Line_27 $$ mostProbableChar[0] = (char) ch[ CD ]
Line_2 $$ private static String guessSeparator(final ResourceBundleImpl resourceBundle) -->Line_35 $$ return Character.toString(mostProbableChar[0])[ CD ]
Line_2 $$ private static String guessSeparator(final ResourceBundleImpl resourceBundle) -->Line_32 $$ if (mostProbableChar[0] == 0) [ CD ]
Line_3 $$ final TIntLongHashMap charCounts = new TIntLongHashMap()-->Line_24 $$ long charCount = charCounts.get(ch)[ FD ]
Line_12 $$ for (int i = 0; i < key.length(); i++) -->Line_13 $$ char c = key.charAt(i)[ FD ]
Line_13 $$ char c = key.charAt(i)-->Line_14 $$ if (!Character.isLetterOrDigit(c)) [ FD ]
Line_13 $$ char c = key.charAt(i)-->Line_15 $$ charCounts.put(c, charCounts.get(c) + 1)[ FD ]
Line_21 $$ charCounts.forEachKey(new TIntProcedure() -->Line_24 $$ long charCount = charCounts.get(ch)[ CD ]
Line_12 $$ for (int i = 0; i < key.length(); i++) -->Line_13 $$ char c = key.charAt(i)[ CD ]
