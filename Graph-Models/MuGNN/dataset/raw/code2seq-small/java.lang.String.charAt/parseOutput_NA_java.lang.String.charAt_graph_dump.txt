Line_5 $$ for (int pos = 0; pos < split.length; pos++) -->Line_10 $$ if (line.length() < 4) [ CD ]
Line_84 $$ if (yStatus == 'D') -->Line_87 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ CD ]
Line_55 $$ if (yStatus == 'U') -->Line_56 $$ reportConflict(filepath, head)[ CD ]
Line_6 $$ String line = split[pos]-->Line_13 $$ final String xyStatus = line.substring(0, 2)[ FD ]
Line_13 $$ final String xyStatus = line.substring(0, 2)-->Line_16 $$ final char yStatus = xyStatus.charAt(1)[ FD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_73 $$ reportDeleted(filepath, head)[ FD ]
Line_5 $$ for (int pos = 0; pos < split.length; pos++) -->Line_7 $$ if (StringUtil.isEmptyOrSpaces(line)) [ CD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_20 $$ reportModified(filepath, head)[ FD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_75 $$ reportRename(filepath, oldFilename, head)[ FD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_33 $$ reportModified(filepath, head)[ FD ]
Line_43 $$ if (yStatus == 'M' || yStatus == ' ' || yStatus == 'T') -->Line_45 $$ if (yStatus == 'D') [ CD ]
Line_13 $$ final String xyStatus = line.substring(0, 2)-->Line_15 $$ final char xStatus = xyStatus.charAt(0)[ FD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_24 $$ reportTypeChanged(filepath, head)[ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_37 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_22 $$ reportDeleted(filepath, head)[ FD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_56 $$ reportConflict(filepath, head)[ FD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_83 $$ reportTypeChanged(filepath, head)[ FD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_26 $$ reportConflict(filepath, head)[ FD ]
Line_23 $$ if (yStatus == 'T') -->Line_24 $$ reportTypeChanged(filepath, head)[ CD ]
Line_6 $$ String line = split[pos]-->Line_37 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_6 $$ String line = split[pos]-->Line_94 $$ throwGFE("Unexpected ignored file flag.", handler, output, line, xStatus, yStatus)[ FD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_11 $$ throwGFE("Line is too short.", handler, output, line, '0', '0')[ FD ]
Line_5 $$ for (int pos = 0; pos < split.length; pos++) -->Line_13 $$ final String xyStatus = line.substring(0, 2)[ CD ]
Line_23 $$ if (yStatus == 'T') -->Line_25 $$ if (yStatus == 'U') [ CD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_34 $$ if (yStatus == 'D') [ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_84 $$ if (yStatus == 'D') [ FD ]
Line_43 $$ if (yStatus == 'M' || yStatus == ' ' || yStatus == 'T') -->Line_44 $$ reportAdded(filepath)[ CD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_72 $$ if (yStatus == 'D') [ FD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_73 $$ reportDeleted(filepath, head)[ FD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_20 $$ reportModified(filepath, head)[ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_91 $$ throwGFE("Unexpected unversioned file flag.", handler, output, line, xStatus, yStatus)[ FD ]
Line_5 $$ for (int pos = 0; pos < split.length; pos++) -->Line_16 $$ final char yStatus = xyStatus.charAt(1)[ CD ]
Line_15 $$ final char xStatus = xyStatus.charAt(0)-->Line_37 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_70 $$ pos += 1-->Line_5 $$ for (int pos = 0; pos < split.length; pos++) [ FD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_28 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_35 $$ reportDeleted(filepath, head)[ FD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_85 $$ reportDeleted(filepath, head)[ FD ]
Line_15 $$ final char xStatus = xyStatus.charAt(0)-->Line_94 $$ throwGFE("Unexpected ignored file flag.", handler, output, line, xStatus, yStatus)[ FD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_47 $$ reportConflict(filepath, head)[ FD ]
Line_32 $$ if (yStatus == ' ' || yStatus == 'M' || yStatus == 'T') -->Line_34 $$ if (yStatus == 'D') [ CD ]
Line_19 $$ if (yStatus == 'M') -->Line_20 $$ reportModified(filepath, head)[ CD ]
Line_6 $$ String line = split[pos]-->Line_14 $$ final String filepath = line.substring(3)[ FD ]
Line_5 $$ for (int pos = 0; pos < split.length; pos++) -->Line_70 $$ pos += 1[ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_57 $$ if (yStatus == 'D') [ FD ]
Line_74 $$ if (yStatus == ' ' || yStatus == 'M' || yStatus == 'T') -->Line_77 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ CD ]
Line_6 $$ String line = split[pos]-->Line_28 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_71 $$ String oldFilename = split[pos]-->Line_75 $$ reportRename(filepath, oldFilename, head)[ FD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_54 $$ reportDeleted(filepath, head)[ FD ]
Line_6 $$ String line = split[pos]-->Line_59 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_6 $$ String line = split[pos]-->Line_91 $$ throwGFE("Unexpected unversioned file flag.", handler, output, line, xStatus, yStatus)[ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_23 $$ if (yStatus == 'T') [ FD ]
Line_25 $$ if (yStatus == 'U') -->Line_28 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ CD ]
Line_15 $$ final char xStatus = xyStatus.charAt(0)-->Line_87 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_24 $$ reportTypeChanged(filepath, head)[ FD ]
Line_63 $$ if (yStatus == 'U' || yStatus == 'A' || yStatus == 'D' || yStatus == 'T') -->Line_64 $$ reportConflict(filepath, head)[ CD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_59 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_54 $$ reportDeleted(filepath, head)[ FD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_22 $$ reportDeleted(filepath, head)[ FD ]
Line_63 $$ if (yStatus == 'U' || yStatus == 'A' || yStatus == 'D' || yStatus == 'T') -->Line_66 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ CD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_47 $$ reportConflict(filepath, head)[ FD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_75 $$ reportRename(filepath, oldFilename, head)[ FD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_44 $$ reportAdded(filepath)[ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_96 $$ throwGFE("Unexpected symbol as xStatus.", handler, output, line, xStatus, yStatus)[ FD ]
Line_72 $$ if (yStatus == 'D') -->Line_74 $$ if (yStatus == ' ' || yStatus == 'M' || yStatus == 'T') [ CD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_33 $$ reportModified(filepath, head)[ FD ]
Line_19 $$ if (yStatus == 'M') -->Line_21 $$ if (yStatus == 'D') [ CD ]
Line_15 $$ final char xStatus = xyStatus.charAt(0)-->Line_59 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_55 $$ if (yStatus == 'U') -->Line_57 $$ if (yStatus == 'D') [ CD ]
Line_15 $$ final char xStatus = xyStatus.charAt(0)-->Line_91 $$ throwGFE("Unexpected unversioned file flag.", handler, output, line, xStatus, yStatus)[ FD ]
Line_46 $$ if (yStatus == 'U' || yStatus == 'A') -->Line_47 $$ reportConflict(filepath, head)[ CD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_94 $$ throwGFE("Unexpected ignored file flag.", handler, output, line, xStatus, yStatus)[ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_59 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_5 $$ for (int pos = 0; pos < split.length; pos++) -->Line_15 $$ final char xStatus = xyStatus.charAt(0)[ CD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_21 $$ if (yStatus == 'D') [ FD ]
Line_6 $$ String line = split[pos]-->Line_11 $$ throwGFE("Line is too short.", handler, output, line, '0', '0')[ FD ]
Line_84 $$ if (yStatus == 'D') -->Line_85 $$ reportDeleted(filepath, head)[ CD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_37 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_53 $$ if (yStatus == 'M' || yStatus == ' ' || yStatus == 'T') -->Line_54 $$ reportDeleted(filepath, head)[ CD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_49 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_25 $$ if (yStatus == 'U') -->Line_26 $$ reportConflict(filepath, head)[ CD ]
Line_15 $$ final char xStatus = xyStatus.charAt(0)-->Line_49 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_82 $$ if (yStatus == ' ' || yStatus == 'M') -->Line_83 $$ reportTypeChanged(filepath, head)[ CD ]
Line_57 $$ if (yStatus == 'D') -->Line_59 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ CD ]
Line_6 $$ String line = split[pos]-->Line_77 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_6 $$ String line = split[pos]-->Line_87 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_41 $$ pos += 1-->Line_70 $$ pos += 1[ FD ]
Line_10 $$ if (line.length() < 4) -->Line_11 $$ throwGFE("Line is too short.", handler, output, line, '0', '0')[ CD ]
Line_15 $$ final char xStatus = xyStatus.charAt(0)-->Line_77 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_6 $$ String line = split[pos]-->Line_66 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_77 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_25 $$ if (yStatus == 'U') [ FD ]
Line_46 $$ if (yStatus == 'U' || yStatus == 'A') -->Line_49 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ CD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_26 $$ reportConflict(filepath, head)[ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_45 $$ if (yStatus == 'D') [ FD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_3 $$ VcsRevisionNumber head = getHead()[ CD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_5 $$ for (int pos = 0; pos < split.length; pos++) [ CD ]
Line_74 $$ if (yStatus == ' ' || yStatus == 'M' || yStatus == 'T') -->Line_75 $$ reportRename(filepath, oldFilename, head)[ CD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_96 $$ throwGFE("Unexpected symbol as xStatus.", handler, output, line, xStatus, yStatus)[ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_55 $$ if (yStatus == 'U') [ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_87 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_28 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_6 $$ String line = split[pos]-->Line_49 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_21 $$ if (yStatus == 'D') -->Line_22 $$ reportDeleted(filepath, head)[ CD ]
Line_6 $$ String line = split[pos]-->Line_10 $$ if (line.length() < 4) [ FD ]
Line_5 $$ for (int pos = 0; pos < split.length; pos++) -->Line_14 $$ final String filepath = line.substring(3)[ CD ]
Line_15 $$ final char xStatus = xyStatus.charAt(0)-->Line_96 $$ throwGFE("Unexpected symbol as xStatus.", handler, output, line, xStatus, yStatus)[ FD ]
Line_5 $$ for (int pos = 0; pos < split.length; pos++) -->Line_41 $$ pos += 1[ FD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_91 $$ throwGFE("Unexpected unversioned file flag.", handler, output, line, xStatus, yStatus)[ FD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_87 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_34 $$ if (yStatus == 'D') -->Line_37 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ CD ]
Line_6 $$ String line = split[pos]-->Line_7 $$ if (StringUtil.isEmptyOrSpaces(line)) [ FD ]
Line_34 $$ if (yStatus == 'D') -->Line_35 $$ reportDeleted(filepath, head)[ CD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_49 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_53 $$ if (yStatus == 'M' || yStatus == ' ' || yStatus == 'T') -->Line_55 $$ if (yStatus == 'U') [ CD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_94 $$ throwGFE("Unexpected ignored file flag.", handler, output, line, xStatus, yStatus)[ FD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_64 $$ reportConflict(filepath, head)[ FD ]
Line_5 $$ for (int pos = 0; pos < split.length; pos++) -->Line_6 $$ String line = split[pos][ CD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_83 $$ reportTypeChanged(filepath, head)[ FD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_35 $$ reportDeleted(filepath, head)[ FD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_66 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_56 $$ reportConflict(filepath, head)[ FD ]
Line_32 $$ if (yStatus == ' ' || yStatus == 'M' || yStatus == 'T') -->Line_33 $$ reportModified(filepath, head)[ CD ]
Line_15 $$ final char xStatus = xyStatus.charAt(0)-->Line_28 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_66 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_21 $$ if (yStatus == 'D') -->Line_23 $$ if (yStatus == 'T') [ CD ]
Line_16 $$ final char yStatus = xyStatus.charAt(1)-->Line_19 $$ if (yStatus == 'M') [ FD ]
Line_15 $$ final char xStatus = xyStatus.charAt(0)-->Line_66 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_41 $$ pos += 1-->Line_5 $$ for (int pos = 0; pos < split.length; pos++) [ FD ]
Line_72 $$ if (yStatus == 'D') -->Line_73 $$ reportDeleted(filepath, head)[ CD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_77 $$ throwYStatus(output, handler, line, xStatus, yStatus)[ FD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_4 $$ final String[] split = output.split(" ")[ FD ]
Line_3 $$ VcsRevisionNumber head = getHead()-->Line_85 $$ reportDeleted(filepath, head)[ FD ]
Line_2 $$ private void parseOutput(@NotNull String output, @NotNull GitHandler handler) throws VcsException -->Line_4 $$ final String[] split = output.split(" ")[ CD ]
Line_45 $$ if (yStatus == 'D') -->Line_46 $$ if (yStatus == 'U' || yStatus == 'A') [ CD ]
Line_82 $$ if (yStatus == ' ' || yStatus == 'M') -->Line_84 $$ if (yStatus == 'D') [ CD ]
Line_14 $$ final String filepath = line.substring(3)-->Line_64 $$ reportConflict(filepath, head)[ FD ]
Line_6 $$ String line = split[pos]-->Line_96 $$ throwGFE("Unexpected symbol as xStatus.", handler, output, line, xStatus, yStatus)[ FD ]
