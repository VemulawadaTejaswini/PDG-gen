Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_7 $$ for (int i = 0; i < filePrefixes.length; i++) [ CD ]
Line_15 $$ if (filePrefix == null || linePrefix == null) -->Line_16 $$ return null[ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_43 $$ final VirtualFile file = LocalFileSystem.getInstance().findFileByPath(fileName.replace(File.separatorChar, '/'))[ CD ]
Line_28 $$ for (int i = 0; i < lineNumberStr.length(); i++) -->Line_29 $$ if (Character.isDigit(lineNumberStr.charAt(i))) [ FD ]
Line_10 $$ filePrefix = filePrefixes[i]-->Line_18 $$ int filePrefixIndex = StringUtil.indexOf(line, filePrefix)[ FD ]
Line_26 $$ String lineNumberStr = fileAndLineNumber.substring(linePrefixIndex + linePrefix.length(), fileAndLineNumber.length()).trim()-->Line_29 $$ if (Character.isDigit(lineNumberStr.charAt(i))) [ FD ]
Line_26 $$ String lineNumberStr = fileAndLineNumber.substring(linePrefixIndex + linePrefix.length(), fileAndLineNumber.length()).trim()-->Line_28 $$ for (int i = 0; i < lineNumberStr.length(); i++) [ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_35 $$ lineNumberStr = lineNumberStr.substring(0, lineNumberEndIndex + 1)[ CD ]
Line_26 $$ String lineNumberStr = fileAndLineNumber.substring(linePrefixIndex + linePrefix.length(), fileAndLineNumber.length()).trim()-->Line_38 $$ lineNumber = Integer.parseInt(lineNumberStr)[ FD ]
Line_26 $$ String lineNumberStr = fileAndLineNumber.substring(linePrefixIndex + linePrefix.length(), fileAndLineNumber.length()).trim()-->Line_35 $$ lineNumberStr = lineNumberStr.substring(0, lineNumberEndIndex + 1)[ FD ]
Line_52 $$ Color color = UIUtil.getInactiveTextColor()-->Line_54 $$ attributes.setEffectColor(color)[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_4 $$ String[] linePrefixes = new String[] [ CD ]
Line_43 $$ final VirtualFile file = LocalFileSystem.getInstance().findFileByPath(fileName.replace(File.separatorChar, '/'))-->Line_44 $$ if (file == null) [ FD ]
Line_35 $$ lineNumberStr = lineNumberStr.substring(0, lineNumberEndIndex + 1)-->Line_38 $$ lineNumber = Integer.parseInt(lineNumberStr)[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_18 $$ int filePrefixIndex = StringUtil.indexOf(line, filePrefix)[ CD ]
Line_50 $$ TextAttributes attributes = HYPERLINK_ATTRIBUTES.clone()-->Line_53 $$ attributes.setForegroundColor(color)[ FD ]
Line_10 $$ filePrefix = filePrefixes[i]-->Line_47 $$ int textStartOffset = entireLength - line.trim().length() + filePrefix.length() - 1[ FD ]
Line_20 $$ int linePrefixIndex = StringUtil.indexOf(fileAndLineNumber, linePrefix)-->Line_21 $$ if (linePrefixIndex == -1) [ FD ]
Line_28 $$ for (int i = 0; i < lineNumberStr.length(); i++) -->Line_29 $$ if (Character.isDigit(lineNumberStr.charAt(i))) [ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_21 $$ if (linePrefixIndex == -1) [ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_18 $$ int filePrefixIndex = StringUtil.indexOf(line, filePrefix)[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_36 $$ int lineNumber[ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_20 $$ int linePrefixIndex = StringUtil.indexOf(fileAndLineNumber, linePrefix)[ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_5 $$ String filePrefix = null[ CD ]
Line_6 $$ String linePrefix = null-->Line_20 $$ int linePrefixIndex = StringUtil.indexOf(fileAndLineNumber, linePrefix)[ FD ]
Line_8 $$ int filePrefixIndex = StringUtil.indexOf(line, filePrefixes[i])-->Line_9 $$ if (filePrefixIndex != -1) [ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_56 $$ return new Result(textStartOffset, highlightEndOffset, info, attributes)[ CD ]
Line_28 $$ for (int i = 0; i < lineNumberStr.length(); i++) -->Line_30 $$ lineNumberEndIndex = i[ FD ]
Line_5 $$ String filePrefix = null-->Line_19 $$ final String fileAndLineNumber = line.substring(filePrefix.length() + filePrefixIndex)[ FD ]
Line_5 $$ String filePrefix = null-->Line_47 $$ int textStartOffset = entireLength - line.trim().length() + filePrefix.length() - 1[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_48 $$ int highlightEndOffset = textStartOffset + fileName.length()[ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_15 $$ if (filePrefix == null || linePrefix == null) [ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_28 $$ for (int i = 0; i < lineNumberStr.length(); i++) [ CD ]
Line_24 $$ final String fileName = fileAndLineNumber.substring(0, linePrefixIndex)-->Line_43 $$ final VirtualFile file = LocalFileSystem.getInstance().findFileByPath(fileName.replace(File.separatorChar, '/'))[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_47 $$ int textStartOffset = entireLength - line.trim().length() + filePrefix.length() - 1[ CD ]
Line_6 $$ String linePrefix = null-->Line_26 $$ String lineNumberStr = fileAndLineNumber.substring(linePrefixIndex + linePrefix.length(), fileAndLineNumber.length()).trim()[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_6 $$ String linePrefix = null[ CD ]
Line_7 $$ for (int i = 0; i < filePrefixes.length; i++) -->Line_9 $$ if (filePrefixIndex != -1) [ CD ]
Line_9 $$ if (filePrefixIndex != -1) -->Line_11 $$ linePrefix = linePrefixes[i][ CD ]
Line_27 $$ int lineNumberEndIndex = 0-->Line_30 $$ lineNumberEndIndex = i[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_8 $$ int filePrefixIndex = StringUtil.indexOf(line, filePrefixes[i])[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_27 $$ int lineNumberEndIndex = 0[ CD ]
Line_19 $$ final String fileAndLineNumber = line.substring(filePrefix.length() + filePrefixIndex)-->Line_20 $$ int linePrefixIndex = StringUtil.indexOf(fileAndLineNumber, linePrefix)[ FD ]
Line_21 $$ if (linePrefixIndex == -1) -->Line_22 $$ return null[ CD ]
Line_24 $$ final String fileName = fileAndLineNumber.substring(0, linePrefixIndex)-->Line_48 $$ int highlightEndOffset = textStartOffset + fileName.length()[ FD ]
Line_19 $$ final String fileAndLineNumber = line.substring(filePrefix.length() + filePrefixIndex)-->Line_26 $$ String lineNumberStr = fileAndLineNumber.substring(linePrefixIndex + linePrefix.length(), fileAndLineNumber.length()).trim()[ FD ]
Line_7 $$ for (int i = 0; i < filePrefixes.length; i++) -->Line_30 $$ lineNumberEndIndex = i[ FD ]
Line_43 $$ final VirtualFile file = LocalFileSystem.getInstance().findFileByPath(fileName.replace(File.separatorChar, '/'))-->Line_51 $$ if (!ProjectRootManager.getInstance(myProject).getFileIndex().isInContent(file)) [ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_44 $$ if (file == null) [ CD ]
Line_7 $$ for (int i = 0; i < filePrefixes.length; i++) -->Line_8 $$ int filePrefixIndex = StringUtil.indexOf(line, filePrefixes[i])[ CD ]
Line_52 $$ Color color = UIUtil.getInactiveTextColor()-->Line_53 $$ attributes.setForegroundColor(color)[ FD ]
Line_5 $$ String filePrefix = null-->Line_18 $$ int filePrefixIndex = StringUtil.indexOf(line, filePrefix)[ FD ]
Line_51 $$ if (!ProjectRootManager.getInstance(myProject).getFileIndex().isInContent(file)) -->Line_54 $$ attributes.setEffectColor(color)[ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_19 $$ final String fileAndLineNumber = line.substring(filePrefix.length() + filePrefixIndex)[ CD ]
Line_51 $$ if (!ProjectRootManager.getInstance(myProject).getFileIndex().isInContent(file)) -->Line_52 $$ Color color = UIUtil.getInactiveTextColor()[ CD ]
Line_7 $$ for (int i = 0; i < filePrefixes.length; i++) -->Line_29 $$ if (Character.isDigit(lineNumberStr.charAt(i))) [ FD ]
Line_44 $$ if (file == null) -->Line_45 $$ return null[ CD ]
Line_51 $$ if (!ProjectRootManager.getInstance(myProject).getFileIndex().isInContent(file)) -->Line_53 $$ attributes.setForegroundColor(color)[ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_50 $$ TextAttributes attributes = HYPERLINK_ATTRIBUTES.clone()[ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_19 $$ final String fileAndLineNumber = line.substring(filePrefix.length() + filePrefixIndex)[ FD ]
Line_11 $$ linePrefix = linePrefixes[i]-->Line_26 $$ String lineNumberStr = fileAndLineNumber.substring(linePrefixIndex + linePrefix.length(), fileAndLineNumber.length()).trim()[ FD ]
Line_7 $$ for (int i = 0; i < filePrefixes.length; i++) -->Line_28 $$ for (int i = 0; i < lineNumberStr.length(); i++) [ FD ]
Line_9 $$ if (filePrefixIndex != -1) -->Line_10 $$ filePrefix = filePrefixes[i][ CD ]
Line_5 $$ String filePrefix = null-->Line_10 $$ filePrefix = filePrefixes[i][ FD ]
Line_11 $$ linePrefix = linePrefixes[i]-->Line_20 $$ int linePrefixIndex = StringUtil.indexOf(fileAndLineNumber, linePrefix)[ FD ]
Line_6 $$ String linePrefix = null-->Line_11 $$ linePrefix = linePrefixes[i][ FD ]
Line_10 $$ filePrefix = filePrefixes[i]-->Line_19 $$ final String fileAndLineNumber = line.substring(filePrefix.length() + filePrefixIndex)[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_26 $$ String lineNumberStr = fileAndLineNumber.substring(linePrefixIndex + linePrefix.length(), fileAndLineNumber.length()).trim()[ CD ]
Line_29 $$ if (Character.isDigit(lineNumberStr.charAt(i))) -->Line_30 $$ lineNumberEndIndex = i[ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_3 $$ String[] filePrefixes = new String[] [ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_24 $$ final String fileName = fileAndLineNumber.substring(0, linePrefixIndex)[ CD ]
Line_50 $$ TextAttributes attributes = HYPERLINK_ATTRIBUTES.clone()-->Line_54 $$ attributes.setEffectColor(color)[ FD ]
Line_20 $$ int linePrefixIndex = StringUtil.indexOf(fileAndLineNumber, linePrefix)-->Line_24 $$ final String fileName = fileAndLineNumber.substring(0, linePrefixIndex)[ FD ]
Line_36 $$ int lineNumber-->Line_38 $$ lineNumber = Integer.parseInt(lineNumberStr)[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_47 $$ int textStartOffset = entireLength - line.trim().length() + filePrefix.length() - 1[ FD ]
Line_19 $$ final String fileAndLineNumber = line.substring(filePrefix.length() + filePrefixIndex)-->Line_24 $$ final String fileName = fileAndLineNumber.substring(0, linePrefixIndex)[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_51 $$ if (!ProjectRootManager.getInstance(myProject).getFileIndex().isInContent(file)) [ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_49 $$ OpenFileHyperlinkInfo info = new OpenFileHyperlinkInfo(myProject, file, Math.max(lineNumber - 1, 0))[ CD ]
