Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_3 $$ final String text = field.getText().trim()[ FD ]
Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_3 $$ final String text = field.getText().trim()[ CD ]
Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_26 $$ errorLabel.setText(" ")[ FD ]
Line_9 $$ if (text.indexOf(invalidCharacter) != -1) -->Line_11 $$ return false[ CD ]
Line_9 $$ if (text.indexOf(invalidCharacter) != -1) -->Line_10 $$ reportError(errorLabel, CvsBundle.message("error.message.field.contains.invalid.characters"), tagNameFieldOwner)[ CD ]
Line_22 $$ if (shouldStartFromLetter && !Character.isLetter(text.charAt(0))) -->Line_24 $$ return false[ CD ]
Line_17 $$ if (jTextField.getText().trim().equals(text)) -->Line_18 $$ reportError(errorLabel, CvsBundle.message("error.message.duplicate.field.value"), tagNameFieldOwner)[ CD ]
Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_26 $$ errorLabel.setText(" ")[ CD ]
Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_4 $$ if (text.isEmpty()) [ CD ]
Line_3 $$ final String text = field.getText().trim()-->Line_9 $$ if (text.indexOf(invalidCharacter) != -1) [ FD ]
Line_4 $$ if (text.isEmpty()) -->Line_5 $$ reportError(errorLabel, CvsBundle.message("error.message.field.cannot.be.empty"), tagNameFieldOwner)[ CD ]
Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_18 $$ reportError(errorLabel, CvsBundle.message("error.message.duplicate.field.value"), tagNameFieldOwner)[ FD ]
Line_3 $$ final String text = field.getText().trim()-->Line_22 $$ if (shouldStartFromLetter && !Character.isLetter(text.charAt(0))) [ FD ]
Line_14 $$ for (JTextField jTextField : shouldDifferFrom) -->Line_15 $$ if (jTextField == field)[ FD ]
Line_14 $$ for (JTextField jTextField : shouldDifferFrom) -->Line_17 $$ if (jTextField.getText().trim().equals(text)) [ FD ]
Line_3 $$ final String text = field.getText().trim()-->Line_4 $$ if (text.isEmpty()) [ FD ]
Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_10 $$ reportError(errorLabel, CvsBundle.message("error.message.field.contains.invalid.characters"), tagNameFieldOwner)[ FD ]
Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_22 $$ if (shouldStartFromLetter && !Character.isLetter(text.charAt(0))) [ CD ]
Line_4 $$ if (text.isEmpty()) -->Line_6 $$ return false[ CD ]
Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_27 $$ return true[ CD ]
Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_5 $$ reportError(errorLabel, CvsBundle.message("error.message.field.cannot.be.empty"), tagNameFieldOwner)[ FD ]
Line_17 $$ if (jTextField.getText().trim().equals(text)) -->Line_19 $$ return false[ CD ]
Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_23 $$ reportError(errorLabel, CvsBundle.message("error.message.field.value.must.start.with.a.letter"), tagNameFieldOwner)[ FD ]
Line_3 $$ final String text = field.getText().trim()-->Line_17 $$ if (jTextField.getText().trim().equals(text)) [ FD ]
Line_8 $$ for (char invalidCharacter : INVALID_CHARACTERS) -->Line_9 $$ if (text.indexOf(invalidCharacter) != -1) [ FD ]
Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_22 $$ if (shouldStartFromLetter && !Character.isLetter(text.charAt(0))) [ FD ]
Line_2 $$ public static boolean checkField(JTextField field, JTextField[] shouldDifferFrom, boolean shouldStartFromLetter, JLabel errorLabel, TagNameFieldOwner tagNameFieldOwner) -->Line_15 $$ if (jTextField == field)[ FD ]
Line_22 $$ if (shouldStartFromLetter && !Character.isLetter(text.charAt(0))) -->Line_23 $$ reportError(errorLabel, CvsBundle.message("error.message.field.value.must.start.with.a.letter"), tagNameFieldOwner)[ CD ]
