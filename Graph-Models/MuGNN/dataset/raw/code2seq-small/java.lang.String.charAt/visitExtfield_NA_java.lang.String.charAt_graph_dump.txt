Line_38 $$ if (field != null) -->Line_48 $$ final boolean set = memberenmd.last && store[ CD ]
Line_11 $$ final ExtbraceContext bracectx = ctx.extbrace()-->Line_119 $$ if (bracectx != null) [ FD ]
Line_38 $$ if (field != null) -->Line_45 $$ parentemd.current = memberenmd.type[ CD ]
Line_9 $$ final String value = ctx.EXTID() == null ? ctx.EXTINTEGER().getText() : ctx.EXTID().getText()-->Line_94 $$ constant = Integer.parseInt(value)[ FD ]
Line_9 $$ final String value = ctx.EXTID() == null ? ctx.EXTINTEGER().getText() : ctx.EXTID().getText()-->Line_18 $$ if ("length".equals(value)) [ FD ]
Line_38 $$ if (field != null) -->Line_50 $$ Method setter = struct.methods.get("set" + Character.toUpperCase(value.charAt(0)) + value.substring(1))[ CD ]
Line_17 $$ if (parentemd.current.sort == Sort.ARRAY) -->Line_30 $$ if (parentemd.current.sort == Sort.DEF) [ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_78 $$ if (ctx.EXTINTEGER() != null) [ FD ]
Line_49 $$ Method getter = struct.methods.get("get" + Character.toUpperCase(value.charAt(0)) + value.substring(1))-->Line_81 $$ getter = parentemd.current.struct.methods.get("get")[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_66 $$ throw new IllegalArgumentException(error(ctx) + "Illegal map get shortcut [" + value + "] for type [" + struct.name + "].")[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_7 $$ throw new IllegalArgumentException(error(ctx) + "Unexpected parser state.")[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_60 $$ if (ctx.EXTID() != null) [ FD ]
Line_18 $$ if ("length".equals(value)) -->Line_26 $$ parentemd.current = definition.intType[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_11 $$ final ExtbraceContext bracectx = ctx.extbrace()[ CD ]
Line_19 $$ if (!parentemd.read) -->Line_21 $$ if (store) [ CD ]
Line_116 $$ if (dotctx != null) -->Line_117 $$ adapter.createExtNodeMetadata(parent, dotctx)[ CD ]
Line_116 $$ if (dotctx != null) -->Line_118 $$ visit(dotctx)[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_101 $$ throw new IllegalStateException(error(ctx) + "Unexpected parser state.")[ FD ]
Line_47 $$ final boolean get = parentemd.read || parentemd.token > 0 || !memberenmd.last-->Line_104 $$ if ((get || set) && (!get || getter != null) && (!set || setter != null)) [ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_20 $$ throw new IllegalArgumentException(error(ctx) + "Must read array field [length].")[ FD ]
Line_38 $$ if (field != null) -->Line_52 $$ if (getter != null && (getter.rtn.sort == Sort.VOID || !getter.arguments.isEmpty())) [ CD ]
Line_51 $$ Object constant = null-->Line_75 $$ constant = value[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_6 $$ if (ctx.EXTID() == null && ctx.EXTINTEGER() == null) [ CD ]
Line_30 $$ if (parentemd.current.sort == Sort.DEF) -->Line_37 $$ final Field field = parentemd.statik ? struct.statics.get(value) : struct.members.get(value)[ CD ]
Line_4 $$ final ParserRuleContext parent = memberenmd.parent-->Line_5 $$ final ExternalMetadata parentemd = adapter.getExternalMetadata(parent)[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_33 $$ analyzeLoadStoreExternal(ctx)[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_90 $$ throw new IllegalArgumentException(error(ctx) + "Shortcut argument types must match.")[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_123 $$ return null[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_12 $$ memberenmd.last = parentemd.scope == 0 && dotctx == null && bracectx == null[ CD ]
Line_116 $$ if (dotctx != null) -->Line_119 $$ if (bracectx != null) [ CD ]
Line_37 $$ final Field field = parentemd.statik ? struct.statics.get(value) : struct.members.get(value)-->Line_42 $$ memberenmd.target = field[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_3 $$ final ExtNodeMetadata memberenmd = adapter.getExtNodeMetadata(ctx)[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_15 $$ throw new IllegalStateException(error(ctx) + "Unexpected field [" + value + "] load.")[ FD ]
Line_37 $$ final Field field = parentemd.statik ? struct.statics.get(value) : struct.members.get(value)-->Line_38 $$ if (field != null) [ FD ]
Line_60 $$ if (ctx.EXTID() != null) -->Line_78 $$ if (ctx.EXTINTEGER() != null) [ CD ]
Line_30 $$ if (parentemd.current.sort == Sort.DEF) -->Line_111 $$ if (memberenmd.target == null) [ CD ]
Line_9 $$ final String value = ctx.EXTID() == null ? ctx.EXTINTEGER().getText() : ctx.EXTID().getText()-->Line_75 $$ constant = value[ FD ]
Line_74 $$ settype = setter == null ? null : setter.arguments.get(1)-->Line_92 $$ settype = setter == null ? null : setter.arguments.get(1)[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_28 $$ throw new IllegalArgumentException(error(ctx) + "Unexpected array field [" + value + "].")[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_10 $$ final ExtdotContext dotctx = ctx.extdot()[ FD ]
Line_75 $$ constant = value-->Line_94 $$ constant = Integer.parseInt(value)[ FD ]
Line_4 $$ final ParserRuleContext parent = memberenmd.parent-->Line_120 $$ adapter.createExtNodeMetadata(parent, bracectx)[ FD ]
Line_119 $$ if (bracectx != null) -->Line_121 $$ visit(bracectx)[ CD ]
Line_58 $$ Type settype = setter == null ? null : setter.arguments.get(0)-->Line_92 $$ settype = setter == null ? null : setter.arguments.get(1)[ FD ]
Line_18 $$ if ("length".equals(value)) -->Line_25 $$ memberenmd.type = definition.intType[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_72 $$ throw new IllegalArgumentException(error(ctx) + "Shortcut argument types must match.")[ FD ]
Line_10 $$ final ExtdotContext dotctx = ctx.extdot()-->Line_117 $$ adapter.createExtNodeMetadata(parent, dotctx)[ FD ]
Line_104 $$ if ((get || set) && (!get || getter != null) && (!set || setter != null)) -->Line_106 $$ memberenmd.type = get ? getter.rtn : settype[ CD ]
Line_38 $$ if (field != null) -->Line_43 $$ memberenmd.type = field.type[ CD ]
Line_38 $$ if (field != null) -->Line_59 $$ if (getter == null && setter == null) [ CD ]
Line_30 $$ if (parentemd.current.sort == Sort.DEF) -->Line_34 $$ parentemd.current = memberenmd.type[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_56 $$ throw new IllegalArgumentException(error(ctx) + "Illegal set shortcut on field [" + value + "] for type [" + struct.name + "].")[ FD ]
Line_30 $$ if (parentemd.current.sort == Sort.DEF) -->Line_31 $$ memberenmd.target = value[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_115 $$ parentemd.statik = false[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_5 $$ final ExternalMetadata parentemd = adapter.getExternalMetadata(parent)[ CD ]
Line_9 $$ final String value = ctx.EXTID() == null ? ctx.EXTINTEGER().getText() : ctx.EXTID().getText()-->Line_50 $$ Method setter = struct.methods.get("set" + Character.toUpperCase(value.charAt(0)) + value.substring(1))[ FD ]
Line_30 $$ if (parentemd.current.sort == Sort.DEF) -->Line_32 $$ memberenmd.type = definition.defType[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_53 $$ throw new IllegalArgumentException(error(ctx) + "Illegal get shortcut on field [" + value + "] for type [" + struct.name + "].")[ FD ]
Line_59 $$ if (getter == null && setter == null) -->Line_60 $$ if (ctx.EXTID() != null) [ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_96 $$ throw new IllegalArgumentException(error(ctx) + "Illegal list shortcut value [" + value + "].")[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_4 $$ final ParserRuleContext parent = memberenmd.parent[ CD ]
Line_38 $$ if (field != null) -->Line_47 $$ final boolean get = parentemd.read || parentemd.token > 0 || !memberenmd.last[ CD ]
Line_13 $$ final boolean store = memberenmd.last && parentemd.storeExpr != null-->Line_39 $$ if (store && java.lang.reflect.Modifier.isFinal(field.reflect.getModifiers())) [ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_112 $$ throw new IllegalArgumentException(error(ctx) + "Unknown field [" + value + "] for type [" + struct.name + "].")[ FD ]
Line_38 $$ if (field != null) -->Line_58 $$ Type settype = setter == null ? null : setter.arguments.get(0)[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_13 $$ final boolean store = memberenmd.last && parentemd.storeExpr != null[ CD ]
Line_38 $$ if (field != null) -->Line_104 $$ if ((get || set) && (!get || getter != null) && (!set || setter != null)) [ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_17 $$ if (parentemd.current.sort == Sort.ARRAY) [ CD ]
Line_30 $$ if (parentemd.current.sort == Sort.DEF) -->Line_38 $$ if (field != null) [ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_87 $$ throw new IllegalArgumentException(error(ctx) + "Illegal list add shortcut [" + value + "] for type [" + struct.name + "].")[ FD ]
Line_9 $$ final String value = ctx.EXTID() == null ? ctx.EXTINTEGER().getText() : ctx.EXTID().getText()-->Line_49 $$ Method getter = struct.methods.get("get" + Character.toUpperCase(value.charAt(0)) + value.substring(1))[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_9 $$ final String value = ctx.EXTID() == null ? ctx.EXTINTEGER().getText() : ctx.EXTID().getText()[ CD ]
Line_38 $$ if (field != null) -->Line_51 $$ Object constant = null[ CD ]
Line_18 $$ if ("length".equals(value)) -->Line_19 $$ if (!parentemd.read) [ CD ]
Line_13 $$ final boolean store = memberenmd.last && parentemd.storeExpr != null-->Line_19 $$ if (!parentemd.read) [ FD ]
Line_17 $$ if (parentemd.current.sort == Sort.ARRAY) -->Line_18 $$ if ("length".equals(value)) [ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_116 $$ if (dotctx != null) [ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_6 $$ if (ctx.EXTID() == null && ctx.EXTINTEGER() == null) [ FD ]
Line_51 $$ Object constant = null-->Line_94 $$ constant = Integer.parseInt(value)[ FD ]
Line_104 $$ if ((get || set) && (!get || getter != null) && (!set || setter != null)) -->Line_107 $$ analyzeLoadStoreExternal(ctx)[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_107 $$ analyzeLoadStoreExternal(ctx)[ FD ]
Line_119 $$ if (bracectx != null) -->Line_120 $$ adapter.createExtNodeMetadata(parent, bracectx)[ CD ]
Line_63 $$ getter = parentemd.current.struct.methods.get("get")-->Line_81 $$ getter = parentemd.current.struct.methods.get("get")[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_22 $$ throw new IllegalArgumentException(error(ctx) + "Cannot write to read-only array field [length].")[ FD ]
Line_9 $$ final String value = ctx.EXTID() == null ? ctx.EXTINTEGER().getText() : ctx.EXTID().getText()-->Line_37 $$ final Field field = parentemd.statik ? struct.statics.get(value) : struct.members.get(value)[ FD ]
Line_9 $$ final String value = ctx.EXTID() == null ? ctx.EXTINTEGER().getText() : ctx.EXTID().getText()-->Line_31 $$ memberenmd.target = value[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_10 $$ final ExtdotContext dotctx = ctx.extdot()[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_69 $$ throw new IllegalArgumentException(error(ctx) + "Illegal map set shortcut [" + value + "] for type [" + struct.name + "].")[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_14 $$ if (parentemd.current == null) [ CD ]
Line_11 $$ final ExtbraceContext bracectx = ctx.extbrace()-->Line_120 $$ adapter.createExtNodeMetadata(parent, bracectx)[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_44 $$ analyzeLoadStoreExternal(ctx)[ FD ]
Line_50 $$ Method setter = struct.methods.get("set" + Character.toUpperCase(value.charAt(0)) + value.substring(1))-->Line_64 $$ setter = parentemd.current.struct.methods.get("put")[ FD ]
Line_58 $$ Type settype = setter == null ? null : setter.arguments.get(0)-->Line_74 $$ settype = setter == null ? null : setter.arguments.get(1)[ FD ]
Line_10 $$ final ExtdotContext dotctx = ctx.extdot()-->Line_116 $$ if (dotctx != null) [ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_9 $$ final String value = ctx.EXTID() == null ? ctx.EXTINTEGER().getText() : ctx.EXTID().getText()[ FD ]
Line_104 $$ if ((get || set) && (!get || getter != null) && (!set || setter != null)) -->Line_108 $$ parentemd.current = get ? getter.rtn : setter.rtn[ CD ]
Line_38 $$ if (field != null) -->Line_55 $$ if (setter != null && (setter.rtn.sort != Sort.VOID || setter.arguments.size() != 1)) [ CD ]
Line_11 $$ final ExtbraceContext bracectx = ctx.extbrace()-->Line_121 $$ visit(bracectx)[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_3 $$ final ExtNodeMetadata memberenmd = adapter.getExtNodeMetadata(ctx)[ FD ]
Line_50 $$ Method setter = struct.methods.get("set" + Character.toUpperCase(value.charAt(0)) + value.substring(1))-->Line_82 $$ setter = parentemd.current.struct.methods.get("add")[ FD ]
Line_49 $$ Method getter = struct.methods.get("get" + Character.toUpperCase(value.charAt(0)) + value.substring(1))-->Line_63 $$ getter = parentemd.current.struct.methods.get("get")[ FD ]
Line_104 $$ if ((get || set) && (!get || getter != null) && (!set || setter != null)) -->Line_105 $$ memberenmd.target = new Object[] [ CD ]
Line_18 $$ if ("length".equals(value)) -->Line_24 $$ memberenmd.target = "#length"[ CD ]
Line_30 $$ if (parentemd.current.sort == Sort.DEF) -->Line_33 $$ analyzeLoadStoreExternal(ctx)[ CD ]
Line_64 $$ setter = parentemd.current.struct.methods.get("put")-->Line_82 $$ setter = parentemd.current.struct.methods.get("add")[ FD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_40 $$ throw new IllegalArgumentException(error(ctx) + "Cannot write to read-only" + " field [" + value + "] for type [" + struct.name + "].")[ FD ]
Line_48 $$ final boolean set = memberenmd.last && store-->Line_104 $$ if ((get || set) && (!get || getter != null) && (!set || setter != null)) [ FD ]
Line_10 $$ final ExtdotContext dotctx = ctx.extdot()-->Line_118 $$ visit(dotctx)[ FD ]
Line_38 $$ if (field != null) -->Line_42 $$ memberenmd.target = field[ CD ]
Line_38 $$ if (field != null) -->Line_44 $$ analyzeLoadStoreExternal(ctx)[ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_11 $$ final ExtbraceContext bracectx = ctx.extbrace()[ FD ]
Line_4 $$ final ParserRuleContext parent = memberenmd.parent-->Line_117 $$ adapter.createExtNodeMetadata(parent, dotctx)[ FD ]
Line_38 $$ if (field != null) -->Line_49 $$ Method getter = struct.methods.get("get" + Character.toUpperCase(value.charAt(0)) + value.substring(1))[ CD ]
Line_30 $$ if (parentemd.current.sort == Sort.DEF) -->Line_36 $$ final Struct struct = parentemd.current.struct[ CD ]
Line_38 $$ if (field != null) -->Line_39 $$ if (store && java.lang.reflect.Modifier.isFinal(field.reflect.getModifiers())) [ CD ]
Line_2 $$ public Void visitExtfield(final ExtfieldContext ctx) -->Line_84 $$ throw new IllegalArgumentException(error(ctx) + "Illegal list get shortcut [" + value + "] for type [" + struct.name + "].")[ FD ]
