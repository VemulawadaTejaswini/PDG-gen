Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_9 $$ int[][] d = new int[s1.length() + 1][s2.length() + 1][ FD ]
Line_18 $$ for (int j = 1; j <= s2.length(); j++) -->Line_20 $$ char t_j = s2.charAt(j - 1)[ CD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_3 $$ if (s1.length() == 0) [ CD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_10 $$ for (int i = 0; i <= s1.length(); i++) [ FD ]
Line_17 $$ char s_i = s1.charAt(i - 1)-->Line_21 $$ if (s_i == t_j) [ FD ]
Line_10 $$ for (int i = 0; i <= s1.length(); i++) -->Line_11 $$ d[i][0] = i[ CD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_13 $$ for (int j = 0; j <= s2.length(); j++) [ CD ]
Line_18 $$ for (int j = 1; j <= s2.length(); j++) -->Line_19 $$ int cost[ CD ]
Line_13 $$ for (int j = 0; j <= s2.length(); j++) -->Line_14 $$ d[0][j] = j[ CD ]
Line_19 $$ int cost-->Line_24 $$ cost = 1[ FD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_10 $$ for (int i = 0; i <= s1.length(); i++) [ CD ]
Line_19 $$ int cost-->Line_22 $$ cost = 0[ FD ]
Line_10 $$ for (int i = 0; i <= s1.length(); i++) -->Line_11 $$ d[i][0] = i[ FD ]
Line_21 $$ if (s_i == t_j) -->Line_24 $$ cost = 1[ CD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_6 $$ if (s2.length() == 0) [ CD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_18 $$ for (int j = 1; j <= s2.length(); j++) [ FD ]
Line_3 $$ if (s1.length() == 0) -->Line_4 $$ return s2.length()[ CD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_6 $$ if (s2.length() == 0) [ FD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_16 $$ for (int i = 1; i <= s1.length(); i++) [ CD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_4 $$ return s2.length()[ FD ]
Line_18 $$ for (int j = 1; j <= s2.length(); j++) -->Line_21 $$ if (s_i == t_j) [ CD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_3 $$ if (s1.length() == 0) [ FD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_29 $$ return d[s1.length()][s2.length()][ CD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_20 $$ char t_j = s2.charAt(j - 1)[ FD ]
Line_6 $$ if (s2.length() == 0) -->Line_7 $$ return s1.length()[ CD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_9 $$ int[][] d = new int[s1.length() + 1][s2.length() + 1][ CD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_7 $$ return s1.length()[ FD ]
Line_16 $$ for (int i = 1; i <= s1.length(); i++) -->Line_17 $$ char s_i = s1.charAt(i - 1)[ CD ]
Line_16 $$ for (int i = 1; i <= s1.length(); i++) -->Line_18 $$ for (int j = 1; j <= s2.length(); j++) [ CD ]
Line_13 $$ for (int j = 0; j <= s2.length(); j++) -->Line_18 $$ for (int j = 1; j <= s2.length(); j++) [ FD ]
Line_18 $$ for (int j = 1; j <= s2.length(); j++) -->Line_26 $$ d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1), d[i - 1][j - 1] + cost)[ CD ]
Line_20 $$ char t_j = s2.charAt(j - 1)-->Line_21 $$ if (s_i == t_j) [ FD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_29 $$ return d[s1.length()][s2.length()][ FD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_16 $$ for (int i = 1; i <= s1.length(); i++) [ FD ]
Line_22 $$ cost = 0-->Line_24 $$ cost = 1[ FD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_17 $$ char s_i = s1.charAt(i - 1)[ FD ]
Line_10 $$ for (int i = 0; i <= s1.length(); i++) -->Line_16 $$ for (int i = 1; i <= s1.length(); i++) [ FD ]
Line_2 $$ private static int calculateStringDistance(String s1, String s2) -->Line_13 $$ for (int j = 0; j <= s2.length(); j++) [ FD ]
Line_13 $$ for (int j = 0; j <= s2.length(); j++) -->Line_14 $$ d[0][j] = j[ FD ]
Line_21 $$ if (s_i == t_j) -->Line_22 $$ cost = 0[ CD ]
