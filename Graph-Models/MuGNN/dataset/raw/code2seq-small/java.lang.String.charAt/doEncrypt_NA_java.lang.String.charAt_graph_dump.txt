Line_28 $$ boolean prependAlgorithm = true-->Line_31 $$ prependAlgorithm = false[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_19 $$ if (_log.isDebugEnabled()) [ CD ]
Line_31 $$ prependAlgorithm = false-->Line_46 $$ if (!prependAlgorithm) [ FD ]
Line_37 $$ if (index > 0) -->Line_39 $$ encryptedPassword = encryptedPassword.substring(index + 1)[ CD ]
Line_37 $$ if (index > 0) -->Line_38 $$ algorithm = encryptedPassword.substring(1, index)[ CD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_45 $$ String newEncryptedPassword = _parentPasswordEncryptor.encrypt(algorithm, plainTextPassword, encryptedPassword)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_56 $$ sb.append(StringPool.OPEN_CURLY_BRACE)[ FD ]
Line_38 $$ algorithm = encryptedPassword.substring(1, index)-->Line_57 $$ sb.append(getAlgorithmName(algorithm))[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_21 $$ if (Validator.isNull(encryptedPassword)) [ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_28 $$ boolean prependAlgorithm = true[ CD ]
Line_29 $$ if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) != CharPool.OPEN_CURLY_BRACE)) -->Line_30 $$ algorithm = PropsValues.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY[ CD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_12 $$ sb.append("Please set the property ")[ FD ]
Line_24 $$ message += "provided"-->Line_26 $$ _log.debug(message)[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_35 $$ if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) == CharPool.OPEN_CURLY_BRACE)) [ FD ]
Line_35 $$ if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) == CharPool.OPEN_CURLY_BRACE)) -->Line_37 $$ if (index > 0) [ CD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_46 $$ if (!prependAlgorithm) [ CD ]
Line_28 $$ boolean prependAlgorithm = true-->Line_46 $$ if (!prependAlgorithm) [ FD ]
Line_30 $$ algorithm = PropsValues.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY-->Line_57 $$ sb.append(getAlgorithmName(algorithm))[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_29 $$ if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) != CharPool.OPEN_CURLY_BRACE)) [ CD ]
Line_22 $$ message += "empty"-->Line_26 $$ _log.debug(message)[ FD ]
Line_30 $$ algorithm = PropsValues.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY-->Line_45 $$ String newEncryptedPassword = _parentPasswordEncryptor.encrypt(algorithm, plainTextPassword, encryptedPassword)[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_3 $$ if (Validator.isNull(PropsValues.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY)) [ CD ]
Line_20 $$ String message = "Using legacy detection scheme for algorithm " + algorithm + " with current password "-->Line_26 $$ _log.debug(message)[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_57 $$ sb.append(getAlgorithmName(algorithm))[ FD ]
Line_19 $$ if (_log.isDebugEnabled()) -->Line_20 $$ String message = "Using legacy detection scheme for algorithm " + algorithm + " with current password "[ CD ]
Line_19 $$ if (_log.isDebugEnabled()) -->Line_21 $$ if (Validator.isNull(encryptedPassword)) [ CD ]
Line_29 $$ if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) != CharPool.OPEN_CURLY_BRACE)) -->Line_32 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_45 $$ String newEncryptedPassword = _parentPasswordEncryptor.encrypt(algorithm, plainTextPassword, encryptedPassword)[ CD ]
Line_4 $$ if (_log.isDebugEnabled()) -->Line_5 $$ _log.debug("Skipping passwords upgrade scheme because " + PropsKeys.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY + " is blank")[ CD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_38 $$ algorithm = encryptedPassword.substring(1, index)[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_56 $$ sb.append(StringPool.OPEN_CURLY_BRACE)[ CD ]
Line_21 $$ if (Validator.isNull(encryptedPassword)) -->Line_24 $$ message += "provided"[ CD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_58 $$ sb.append(StringPool.CLOSE_CURLY_BRACE)[ CD ]
Line_29 $$ if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) != CharPool.OPEN_CURLY_BRACE)) -->Line_31 $$ prependAlgorithm = false[ CD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_60 $$ return sb.toString()[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_29 $$ if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) != CharPool.OPEN_CURLY_BRACE)) [ FD ]
Line_46 $$ if (!prependAlgorithm) -->Line_50 $$ return newEncryptedPassword[ CD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_39 $$ encryptedPassword = encryptedPassword.substring(index + 1)[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_8 $$ return _parentPasswordEncryptor.encrypt(algorithm, plainTextPassword, encryptedPassword)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_13 $$ sb.append("\"passwords.encryption.algorithm.legacy\" with ")[ FD ]
Line_22 $$ message += "empty"-->Line_24 $$ message += "provided"[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_52 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_57 $$ sb.append(getAlgorithmName(algorithm))[ CD ]
Line_36 $$ int index = encryptedPassword.indexOf(CharPool.CLOSE_CURLY_BRACE)-->Line_38 $$ algorithm = encryptedPassword.substring(1, index)[ FD ]
Line_35 $$ if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) == CharPool.OPEN_CURLY_BRACE)) -->Line_36 $$ int index = encryptedPassword.indexOf(CharPool.CLOSE_CURLY_BRACE)[ CD ]
Line_38 $$ algorithm = encryptedPassword.substring(1, index)-->Line_45 $$ String newEncryptedPassword = _parentPasswordEncryptor.encrypt(algorithm, plainTextPassword, encryptedPassword)[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_60 $$ return sb.toString()[ CD ]
Line_36 $$ int index = encryptedPassword.indexOf(CharPool.CLOSE_CURLY_BRACE)-->Line_37 $$ if (index > 0) [ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_58 $$ sb.append(StringPool.CLOSE_CURLY_BRACE)[ FD ]
Line_41 $$ if (_log.isDebugEnabled()) -->Line_42 $$ _log.debug("Upgraded password to use algorithm " + algorithm)[ CD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_59 $$ sb.append(newEncryptedPassword)[ CD ]
Line_20 $$ String message = "Using legacy detection scheme for algorithm " + algorithm + " with current password "-->Line_24 $$ message += "provided"[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_36 $$ int index = encryptedPassword.indexOf(CharPool.CLOSE_CURLY_BRACE)[ FD ]
Line_46 $$ if (!prependAlgorithm) -->Line_47 $$ if (_log.isDebugEnabled()) [ CD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_57 $$ sb.append(getAlgorithmName(algorithm))[ FD ]
Line_35 $$ if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) == CharPool.OPEN_CURLY_BRACE)) -->Line_41 $$ if (_log.isDebugEnabled()) [ CD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_14 $$ sb.append("the previous password encryption algorithm and ")[ FD ]
Line_3 $$ if (Validator.isNull(PropsValues.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY)) -->Line_4 $$ if (_log.isDebugEnabled()) [ CD ]
Line_21 $$ if (Validator.isNull(encryptedPassword)) -->Line_22 $$ message += "empty"[ CD ]
Line_32 $$ if (_log.isDebugEnabled()) -->Line_33 $$ _log.debug("Using legacy algorithm " + algorithm)[ CD ]
Line_29 $$ if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) != CharPool.OPEN_CURLY_BRACE)) -->Line_35 $$ if (Validator.isNotNull(encryptedPassword) && (encryptedPassword.charAt(0) == CharPool.OPEN_CURLY_BRACE)) [ CD ]
Line_19 $$ if (_log.isDebugEnabled()) -->Line_26 $$ _log.debug(message)[ CD ]
Line_39 $$ encryptedPassword = encryptedPassword.substring(index + 1)-->Line_45 $$ String newEncryptedPassword = _parentPasswordEncryptor.encrypt(algorithm, plainTextPassword, encryptedPassword)[ FD ]
Line_47 $$ if (_log.isDebugEnabled()) -->Line_48 $$ _log.debug("Generated password without algorithm prefix using " + algorithm)[ CD ]
Line_30 $$ algorithm = PropsValues.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY-->Line_38 $$ algorithm = encryptedPassword.substring(1, index)[ FD ]
Line_52 $$ if (_log.isDebugEnabled()) -->Line_53 $$ _log.debug("Generated password with algorithm prefix using " + algorithm)[ CD ]
Line_20 $$ String message = "Using legacy detection scheme for algorithm " + algorithm + " with current password "-->Line_22 $$ message += "empty"[ FD ]
Line_45 $$ String newEncryptedPassword = _parentPasswordEncryptor.encrypt(algorithm, plainTextPassword, encryptedPassword)-->Line_59 $$ sb.append(newEncryptedPassword)[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_30 $$ algorithm = PropsValues.PASSWORDS_ENCRYPTION_ALGORITHM_LEGACY[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_59 $$ sb.append(newEncryptedPassword)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_11 $$ sb.append("Password upgrade was not successfully configured. ")[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_15 $$ sb.append("restart.")[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_16 $$ throw new PwdEncryptorException(sb.toString(), e)[ FD ]
