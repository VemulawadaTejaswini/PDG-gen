Line_25 $$ String exponentMark = ""-->Line_50 $$ buffer.append(exponentMark)[ FD ]
Line_42 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_56 $$ StringBuilderSpinAllocator.dispose(buffer)[ FD ]
Line_10 $$ text = text.substring(2)-->Line_15 $$ final char last = text.charAt(text.length() - 1)[ FD ]
Line_42 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_45 $$ appendFromEnd(buffer, text, groupSize)[ FD ]
Line_4 $$ String text = original-->Line_32 $$ exponent = text.substring(pos2)[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_6 $$ String suffix = ""[ CD ]
Line_17 $$ final int pos = text.length() - 1-->Line_19 $$ text = text.substring(0, pos)[ FD ]
Line_36 $$ if (pos >= 0) -->Line_39 $$ text = text.substring(0, pos)[ CD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_16 $$ if (StringUtil.containsChar("Ll", last) || (isFP && StringUtil.containsChar("FfDd", last))) [ CD ]
Line_17 $$ final int pos = text.length() - 1-->Line_30 $$ int pos2 = Math.max(StringUtil.indexOfAny(text, "+-", pos, text.length()), pos) + 1[ FD ]
Line_46 $$ if (isFP) -->Line_50 $$ buffer.append(exponentMark)[ CD ]
Line_8 $$ if (text.startsWith("0x") || text.startsWith("0X") || text.startsWith("0b") || text.startsWith("0B")) -->Line_10 $$ text = text.substring(2)[ CD ]
Line_15 $$ final char last = text.charAt(text.length() - 1)-->Line_16 $$ if (StringUtil.containsChar("Ll", last) || (isFP && StringUtil.containsChar("FfDd", last))) [ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_13 $$ if (text.length() == 0)[ FD ]
Line_10 $$ text = text.substring(2)-->Line_45 $$ appendFromEnd(buffer, text, groupSize)[ FD ]
Line_4 $$ String text = original-->Line_28 $$ int pos = StringUtil.indexOfAny(text, ("0x".equals(prefix) || "0X".equals(prefix) ? "Pp" : "Ee"))[ FD ]
Line_42 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_54 $$ return buffer.toString()[ FD ]
Line_4 $$ String text = original-->Line_19 $$ text = text.substring(0, pos)[ FD ]
Line_7 $$ int groupSize = 3-->Line_49 $$ appendFromStart(buffer, fractional, groupSize)[ FD ]
Line_19 $$ text = text.substring(0, pos)-->Line_31 $$ exponentMark = text.substring(pos, pos2)[ FD ]
Line_30 $$ int pos2 = Math.max(StringUtil.indexOfAny(text, "+-", pos, text.length()), pos) + 1-->Line_31 $$ exponentMark = text.substring(pos, pos2)[ FD ]
Line_16 $$ if (StringUtil.containsChar("Ll", last) || (isFP && StringUtil.containsChar("FfDd", last))) -->Line_17 $$ final int pos = text.length() - 1[ CD ]
Line_19 $$ text = text.substring(0, pos)-->Line_35 $$ pos = text.indexOf('.')[ FD ]
Line_26 $$ String exponent = ""-->Line_32 $$ exponent = text.substring(pos2)[ FD ]
Line_16 $$ if (StringUtil.containsChar("Ll", last) || (isFP && StringUtil.containsChar("FfDd", last))) -->Line_18 $$ suffix = text.substring(pos)[ CD ]
Line_4 $$ String text = original-->Line_45 $$ appendFromEnd(buffer, text, groupSize)[ FD ]
Line_8 $$ if (text.startsWith("0x") || text.startsWith("0X") || text.startsWith("0b") || text.startsWith("0B")) -->Line_9 $$ prefix = text.substring(0, 2)[ CD ]
Line_9 $$ prefix = text.substring(0, 2)-->Line_44 $$ buffer.append(prefix)[ FD ]
Line_7 $$ int groupSize = 3-->Line_11 $$ groupSize = 4[ FD ]
Line_24 $$ String fractional = ""-->Line_49 $$ appendFromStart(buffer, fractional, groupSize)[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_21 $$ if (text.length() == 0)[ FD ]
Line_4 $$ String text = original-->Line_15 $$ final char last = text.charAt(text.length() - 1)[ FD ]
Line_10 $$ text = text.substring(2)-->Line_17 $$ final int pos = text.length() - 1[ FD ]
Line_10 $$ text = text.substring(2)-->Line_28 $$ int pos = StringUtil.indexOfAny(text, ("0x".equals(prefix) || "0X".equals(prefix) ? "Pp" : "Ee"))[ FD ]
Line_5 $$ String prefix = ""-->Line_44 $$ buffer.append(prefix)[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_24 $$ String fractional = ""[ CD ]
Line_19 $$ text = text.substring(0, pos)-->Line_21 $$ if (text.length() == 0)[ FD ]
Line_10 $$ text = text.substring(2)-->Line_21 $$ if (text.length() == 0)[ FD ]
Line_17 $$ final int pos = text.length() - 1-->Line_31 $$ exponentMark = text.substring(pos, pos2)[ FD ]
Line_36 $$ if (pos >= 0) -->Line_37 $$ hasPoint = true[ CD ]
Line_10 $$ text = text.substring(2)-->Line_30 $$ int pos2 = Math.max(StringUtil.indexOfAny(text, "+-", pos, text.length()), pos) + 1[ FD ]
Line_25 $$ String exponentMark = ""-->Line_31 $$ exponentMark = text.substring(pos, pos2)[ FD ]
Line_4 $$ String text = original-->Line_33 $$ text = text.substring(0, pos)[ FD ]
Line_10 $$ text = text.substring(2)-->Line_33 $$ text = text.substring(0, pos)[ FD ]
Line_6 $$ String suffix = ""-->Line_53 $$ buffer.append(suffix)[ FD ]
Line_4 $$ String text = original-->Line_30 $$ int pos2 = Math.max(StringUtil.indexOfAny(text, "+-", pos, text.length()), pos) + 1[ FD ]
Line_11 $$ groupSize = 4-->Line_45 $$ appendFromEnd(buffer, text, groupSize)[ FD ]
Line_29 $$ if (pos >= 0) -->Line_31 $$ exponentMark = text.substring(pos, pos2)[ CD ]
Line_8 $$ if (text.startsWith("0x") || text.startsWith("0X") || text.startsWith("0b") || text.startsWith("0B")) -->Line_11 $$ groupSize = 4[ CD ]
Line_42 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_51 $$ appendFromEnd(buffer, exponent, 3)[ FD ]
Line_42 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_50 $$ buffer.append(exponentMark)[ FD ]
Line_42 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_44 $$ buffer.append(prefix)[ FD ]
Line_27 $$ if (isFP) -->Line_28 $$ int pos = StringUtil.indexOfAny(text, ("0x".equals(prefix) || "0X".equals(prefix) ? "Pp" : "Ee"))[ CD ]
Line_27 $$ if (isFP) -->Line_35 $$ pos = text.indexOf('.')[ CD ]
Line_32 $$ exponent = text.substring(pos2)-->Line_51 $$ appendFromEnd(buffer, exponent, 3)[ FD ]
Line_29 $$ if (pos >= 0) -->Line_33 $$ text = text.substring(0, pos)[ CD ]
Line_24 $$ String fractional = ""-->Line_38 $$ fractional = text.substring(pos + 1)[ FD ]
Line_42 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_53 $$ buffer.append(suffix)[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_23 $$ boolean hasPoint = false[ CD ]
Line_10 $$ text = text.substring(2)-->Line_39 $$ text = text.substring(0, pos)[ FD ]
Line_4 $$ String text = original-->Line_9 $$ prefix = text.substring(0, 2)[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_15 $$ final char last = text.charAt(text.length() - 1)[ CD ]
Line_10 $$ text = text.substring(2)-->Line_38 $$ fractional = text.substring(pos + 1)[ FD ]
Line_29 $$ if (pos >= 0) -->Line_30 $$ int pos2 = Math.max(StringUtil.indexOfAny(text, "+-", pos, text.length()), pos) + 1[ CD ]
Line_4 $$ String text = original-->Line_13 $$ if (text.length() == 0)[ FD ]
Line_33 $$ text = text.substring(0, pos)-->Line_35 $$ pos = text.indexOf('.')[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_27 $$ if (isFP) [ CD ]
Line_46 $$ if (isFP) -->Line_51 $$ appendFromEnd(buffer, exponent, 3)[ CD ]
Line_38 $$ fractional = text.substring(pos + 1)-->Line_49 $$ appendFromStart(buffer, fractional, groupSize)[ FD ]
Line_10 $$ text = text.substring(2)-->Line_19 $$ text = text.substring(0, pos)[ FD ]
Line_4 $$ String text = original-->Line_31 $$ exponentMark = text.substring(pos, pos2)[ FD ]
Line_17 $$ final int pos = text.length() - 1-->Line_35 $$ pos = text.indexOf('.')[ FD ]
Line_4 $$ String text = original-->Line_10 $$ text = text.substring(2)[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_25 $$ String exponentMark = ""[ CD ]
Line_10 $$ text = text.substring(2)-->Line_35 $$ pos = text.indexOf('.')[ FD ]
Line_16 $$ if (StringUtil.containsChar("Ll", last) || (isFP && StringUtil.containsChar("FfDd", last))) -->Line_19 $$ text = text.substring(0, pos)[ CD ]
Line_10 $$ text = text.substring(2)-->Line_18 $$ suffix = text.substring(pos)[ FD ]
Line_30 $$ int pos2 = Math.max(StringUtil.indexOfAny(text, "+-", pos, text.length()), pos) + 1-->Line_32 $$ exponent = text.substring(pos2)[ FD ]
Line_27 $$ if (isFP) -->Line_36 $$ if (pos >= 0) [ CD ]
Line_19 $$ text = text.substring(0, pos)-->Line_38 $$ fractional = text.substring(pos + 1)[ FD ]
Line_7 $$ int groupSize = 3-->Line_45 $$ appendFromEnd(buffer, text, groupSize)[ FD ]
Line_35 $$ pos = text.indexOf('.')-->Line_39 $$ text = text.substring(0, pos)[ FD ]
Line_21 $$ if (text.length() == 0)-->Line_22 $$ return original[ CD ]
Line_42 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_49 $$ appendFromStart(buffer, fractional, groupSize)[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_3 $$ final boolean isFP = PsiType.FLOAT.equals(type) || PsiType.DOUBLE.equals(type)[ FD ]
Line_10 $$ text = text.substring(2)-->Line_31 $$ exponentMark = text.substring(pos, pos2)[ FD ]
Line_10 $$ text = text.substring(2)-->Line_13 $$ if (text.length() == 0)[ FD ]
Line_19 $$ text = text.substring(0, pos)-->Line_28 $$ int pos = StringUtil.indexOfAny(text, ("0x".equals(prefix) || "0X".equals(prefix) ? "Pp" : "Ee"))[ FD ]
Line_11 $$ groupSize = 4-->Line_49 $$ appendFromStart(buffer, fractional, groupSize)[ FD ]
Line_18 $$ suffix = text.substring(pos)-->Line_53 $$ buffer.append(suffix)[ FD ]
Line_19 $$ text = text.substring(0, pos)-->Line_33 $$ text = text.substring(0, pos)[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_13 $$ if (text.length() == 0)[ CD ]
Line_35 $$ pos = text.indexOf('.')-->Line_36 $$ if (pos >= 0) [ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_42 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()[ CD ]
Line_17 $$ final int pos = text.length() - 1-->Line_33 $$ text = text.substring(0, pos)[ FD ]
Line_27 $$ if (isFP) -->Line_29 $$ if (pos >= 0) [ CD ]
Line_4 $$ String text = original-->Line_35 $$ pos = text.indexOf('.')[ FD ]
Line_19 $$ text = text.substring(0, pos)-->Line_32 $$ exponent = text.substring(pos2)[ FD ]
Line_47 $$ if (hasPoint)-->Line_48 $$ buffer.append('.')[ CD ]
Line_6 $$ String suffix = ""-->Line_18 $$ suffix = text.substring(pos)[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_26 $$ String exponent = ""[ CD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_8 $$ if (text.startsWith("0x") || text.startsWith("0X") || text.startsWith("0b") || text.startsWith("0B")) [ CD ]
Line_4 $$ String text = original-->Line_18 $$ suffix = text.substring(pos)[ FD ]
Line_5 $$ String prefix = ""-->Line_28 $$ int pos = StringUtil.indexOfAny(text, ("0x".equals(prefix) || "0X".equals(prefix) ? "Pp" : "Ee"))[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_4 $$ String text = original[ CD ]
Line_26 $$ String exponent = ""-->Line_51 $$ appendFromEnd(buffer, exponent, 3)[ FD ]
Line_19 $$ text = text.substring(0, pos)-->Line_39 $$ text = text.substring(0, pos)[ FD ]
Line_13 $$ if (text.length() == 0)-->Line_14 $$ return original[ CD ]
Line_33 $$ text = text.substring(0, pos)-->Line_39 $$ text = text.substring(0, pos)[ FD ]
Line_39 $$ text = text.substring(0, pos)-->Line_45 $$ appendFromEnd(buffer, text, groupSize)[ FD ]
Line_36 $$ if (pos >= 0) -->Line_38 $$ fractional = text.substring(pos + 1)[ CD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_7 $$ int groupSize = 3[ CD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_3 $$ final boolean isFP = PsiType.FLOAT.equals(type) || PsiType.DOUBLE.equals(type)[ CD ]
Line_29 $$ if (pos >= 0) -->Line_32 $$ exponent = text.substring(pos2)[ CD ]
Line_10 $$ text = text.substring(2)-->Line_32 $$ exponent = text.substring(pos2)[ FD ]
Line_42 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_48 $$ buffer.append('.')[ FD ]
Line_31 $$ exponentMark = text.substring(pos, pos2)-->Line_50 $$ buffer.append(exponentMark)[ FD ]
Line_33 $$ text = text.substring(0, pos)-->Line_38 $$ fractional = text.substring(pos + 1)[ FD ]
Line_4 $$ String text = original-->Line_17 $$ final int pos = text.length() - 1[ FD ]
Line_17 $$ final int pos = text.length() - 1-->Line_29 $$ if (pos >= 0) [ FD ]
Line_19 $$ text = text.substring(0, pos)-->Line_45 $$ appendFromEnd(buffer, text, groupSize)[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_5 $$ String prefix = ""[ CD ]
Line_5 $$ String prefix = ""-->Line_9 $$ prefix = text.substring(0, 2)[ FD ]
Line_2 $$ public static String format(@NotNull final String original, @Nullable final PsiType type) -->Line_21 $$ if (text.length() == 0)[ CD ]
Line_23 $$ boolean hasPoint = false-->Line_37 $$ hasPoint = true[ FD ]
Line_4 $$ String text = original-->Line_38 $$ fractional = text.substring(pos + 1)[ FD ]
Line_17 $$ final int pos = text.length() - 1-->Line_39 $$ text = text.substring(0, pos)[ FD ]
Line_17 $$ final int pos = text.length() - 1-->Line_36 $$ if (pos >= 0) [ FD ]
Line_4 $$ String text = original-->Line_39 $$ text = text.substring(0, pos)[ FD ]
Line_17 $$ final int pos = text.length() - 1-->Line_18 $$ suffix = text.substring(pos)[ FD ]
Line_33 $$ text = text.substring(0, pos)-->Line_45 $$ appendFromEnd(buffer, text, groupSize)[ FD ]
Line_9 $$ prefix = text.substring(0, 2)-->Line_28 $$ int pos = StringUtil.indexOfAny(text, ("0x".equals(prefix) || "0X".equals(prefix) ? "Pp" : "Ee"))[ FD ]
Line_19 $$ text = text.substring(0, pos)-->Line_30 $$ int pos2 = Math.max(StringUtil.indexOfAny(text, "+-", pos, text.length()), pos) + 1[ FD ]
Line_4 $$ String text = original-->Line_8 $$ if (text.startsWith("0x") || text.startsWith("0X") || text.startsWith("0b") || text.startsWith("0B")) [ FD ]
Line_46 $$ if (isFP) -->Line_47 $$ if (hasPoint)[ CD ]
Line_4 $$ String text = original-->Line_21 $$ if (text.length() == 0)[ FD ]
Line_46 $$ if (isFP) -->Line_49 $$ appendFromStart(buffer, fractional, groupSize)[ CD ]
