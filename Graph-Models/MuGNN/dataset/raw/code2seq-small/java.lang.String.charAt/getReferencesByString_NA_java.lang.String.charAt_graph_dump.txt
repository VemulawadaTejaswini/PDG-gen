Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_9 $$ int offset = position.getTextRange().getStartOffset() + offsetInPosition[ FD ]
Line_20 $$ if (pack instanceof PsiPackage) -->Line_21 $$ knownTopLevelPackages.add(((PsiPackage) pack).getName())[ CD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_28 $$ for (int dot = str.indexOf('.'); dot > 0; dot = str.indexOf('.', dot + 1)) [ CD ]
Line_10 $$ for (PsiElement child = position.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_11 $$ if (child instanceof OuterLanguageElement && child.getTextRange().contains(offset)) [ CD ]
Line_35 $$ if (topLevelPackages.getValue().contains(candidate)) -->Line_44 $$ String s = str.substring(start, end + 1)[ CD ]
Line_19 $$ for (final PsiElement pack : defaultPackages) -->Line_20 $$ if (pack instanceof PsiPackage) [ FD ]
Line_35 $$ if (topLevelPackages.getValue().contains(candidate)) -->Line_53 $$ ProgressManager.checkCanceled()[ CD ]
Line_11 $$ if (child instanceof OuterLanguageElement && child.getTextRange().contains(offset)) -->Line_12 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_15 $$ NotNullLazyValue<Set<String>> topLevelPackages = new NotNullLazyValue<Set<String>>() [ CD ]
Line_45 $$ ContainerUtil.addAll(results, new JavaClassReferenceSet(s, position, offsetInPosition + start, false, this) -->Line_50 $$ return true[ CD ]
Line_6 $$ if (str.length() < 2) -->Line_7 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_15 $$ NotNullLazyValue<Set<String>> topLevelPackages = new NotNullLazyValue<Set<String>>() -->Line_17 $$ final Set<String> knownTopLevelPackages = new HashSet<String>()[ CD ]
Line_29 $$ int start = dot-->Line_31 $$ if (dot == start) [ FD ]
Line_29 $$ int start = dot-->Line_34 $$ String candidate = str.substring(start, dot)[ FD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_18 $$ final List<PsiElement> defaultPackages = getDefaultPackages(position.getProject())[ FD ]
Line_29 $$ int start = dot-->Line_44 $$ String s = str.substring(start, end + 1)[ FD ]
Line_15 $$ NotNullLazyValue<Set<String>> topLevelPackages = new NotNullLazyValue<Set<String>>() -->Line_18 $$ final List<PsiElement> defaultPackages = getDefaultPackages(position.getProject())[ CD ]
Line_28 $$ for (int dot = str.indexOf('.'); dot > 0; dot = str.indexOf('.', dot + 1)) -->Line_34 $$ String candidate = str.substring(start, dot)[ CD ]
Line_39 $$ char ch = str.charAt(end)-->Line_40 $$ if (ch != '.' && !Character.isJavaIdentifierPart(ch)) [ FD ]
Line_37 $$ while (end < str.length() - 1) -->Line_39 $$ char ch = str.charAt(end)[ CD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_44 $$ String s = str.substring(start, end + 1)[ FD ]
Line_28 $$ for (int dot = str.indexOf('.'); dot > 0; dot = str.indexOf('.', dot + 1)) -->Line_31 $$ if (dot == start) [ CD ]
Line_37 $$ while (end < str.length() - 1) -->Line_40 $$ if (ch != '.' && !Character.isJavaIdentifierPart(ch)) [ CD ]
Line_28 $$ for (int dot = str.indexOf('.'); dot > 0; dot = str.indexOf('.', dot + 1)) -->Line_31 $$ if (dot == start) [ FD ]
Line_28 $$ for (int dot = str.indexOf('.'); dot > 0; dot = str.indexOf('.', dot + 1)) -->Line_35 $$ if (topLevelPackages.getValue().contains(candidate)) [ CD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_56 $$ return ContainerUtil.toArray(results, new PsiReference[results.size()])[ CD ]
Line_35 $$ if (topLevelPackages.getValue().contains(candidate)) -->Line_37 $$ while (end < str.length() - 1) [ CD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_34 $$ String candidate = str.substring(start, dot)[ FD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_6 $$ if (str.length() < 2) [ FD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_10 $$ for (PsiElement child = position.getFirstChild(); child != null; child = child.getNextSibling()) [ CD ]
Line_15 $$ NotNullLazyValue<Set<String>> topLevelPackages = new NotNullLazyValue<Set<String>>() -->Line_24 $$ return knownTopLevelPackages[ CD ]
Line_35 $$ if (topLevelPackages.getValue().contains(candidate)) -->Line_45 $$ ContainerUtil.addAll(results, new JavaClassReferenceSet(s, position, offsetInPosition + start, false, this) [ CD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_39 $$ char ch = str.charAt(end)[ FD ]
Line_3 $$ if (position instanceof XmlTag && ((XmlTag) position).getValue().getTextElements().length == 0) -->Line_4 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_15 $$ NotNullLazyValue<Set<String>> topLevelPackages = new NotNullLazyValue<Set<String>>() -->Line_35 $$ if (topLevelPackages.getValue().contains(candidate)) [ FD ]
Line_45 $$ ContainerUtil.addAll(results, new JavaClassReferenceSet(s, position, offsetInPosition + start, false, this) -->Line_47 $$ return true[ CD ]
Line_10 $$ for (PsiElement child = position.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_11 $$ if (child instanceof OuterLanguageElement && child.getTextRange().contains(offset)) [ FD ]
Line_17 $$ final Set<String> knownTopLevelPackages = new HashSet<String>()-->Line_21 $$ knownTopLevelPackages.add(((PsiPackage) pack).getName())[ FD ]
Line_29 $$ int start = dot-->Line_30 $$ start--[ FD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_9 $$ int offset = position.getTextRange().getStartOffset() + offsetInPosition[ CD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_6 $$ if (str.length() < 2) [ CD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_3 $$ if (position instanceof XmlTag && ((XmlTag) position).getValue().getTextElements().length == 0) [ CD ]
Line_9 $$ int offset = position.getTextRange().getStartOffset() + offsetInPosition-->Line_11 $$ if (child instanceof OuterLanguageElement && child.getTextRange().contains(offset)) [ FD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_37 $$ while (end < str.length() - 1) [ FD ]
Line_28 $$ for (int dot = str.indexOf('.'); dot > 0; dot = str.indexOf('.', dot + 1)) -->Line_29 $$ int start = dot[ CD ]
Line_28 $$ for (int dot = str.indexOf('.'); dot > 0; dot = str.indexOf('.', dot + 1)) -->Line_30 $$ while (start > 0 && Character.isLetterOrDigit(str.charAt(start - 1))) start--[ CD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_10 $$ for (PsiElement child = position.getFirstChild(); child != null; child = child.getNextSibling()) [ FD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_30 $$ while (start > 0 && Character.isLetterOrDigit(str.charAt(start - 1))) start--[ FD ]
Line_2 $$ public PsiReference[] getReferencesByString(String str, @NotNull final PsiElement position, int offsetInPosition) -->Line_28 $$ for (int dot = str.indexOf('.'); dot > 0; dot = str.indexOf('.', dot + 1)) [ FD ]
Line_28 $$ for (int dot = str.indexOf('.'); dot > 0; dot = str.indexOf('.', dot + 1)) -->Line_34 $$ String candidate = str.substring(start, dot)[ FD ]
