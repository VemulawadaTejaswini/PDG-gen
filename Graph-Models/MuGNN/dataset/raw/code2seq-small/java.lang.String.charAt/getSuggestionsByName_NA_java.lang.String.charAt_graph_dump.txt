Line_2 $$ public static List<String> getSuggestionsByName(@NotNull String name, @NotNull String prefix, @NotNull String suffix, boolean upperCaseStyle, boolean preferLongerNames, boolean isArray) -->Line_13 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, true) + suffix)[ FD ]
Line_2 $$ public static List<String> getSuggestionsByName(@NotNull String name, @NotNull String prefix, @NotNull String suffix, boolean upperCaseStyle, boolean preferLongerNames, boolean isArray) -->Line_4 $$ String[] words = nameToWords(name)[ FD ]
Line_5 $$ for (int step = 0; step < words.length; step++) -->Line_6 $$ int wordCount = preferLongerNames ? words.length - step : step + 1[ CD ]
Line_6 $$ int wordCount = preferLongerNames ? words.length - step : step + 1-->Line_13 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, true) + suffix)[ FD ]
Line_8 $$ char c = startWord.charAt(0)-->Line_13 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, true) + suffix)[ FD ]
Line_7 $$ String startWord = words[words.length - wordCount]-->Line_12 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, false) + suffix)[ FD ]
Line_8 $$ char c = startWord.charAt(0)-->Line_12 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, false) + suffix)[ FD ]
Line_5 $$ for (int step = 0; step < words.length; step++) -->Line_8 $$ char c = startWord.charAt(0)[ CD ]
Line_2 $$ public static List<String> getSuggestionsByName(@NotNull String name, @NotNull String prefix, @NotNull String suffix, boolean upperCaseStyle, boolean preferLongerNames, boolean isArray) -->Line_15 $$ return answer[ CD ]
Line_2 $$ public static List<String> getSuggestionsByName(@NotNull String name, @NotNull String prefix, @NotNull String suffix, boolean upperCaseStyle, boolean preferLongerNames, boolean isArray) -->Line_5 $$ for (int step = 0; step < words.length; step++) [ CD ]
Line_4 $$ String[] words = nameToWords(name)-->Line_12 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, false) + suffix)[ FD ]
Line_7 $$ String startWord = words[words.length - wordCount]-->Line_8 $$ char c = startWord.charAt(0)[ FD ]
Line_5 $$ for (int step = 0; step < words.length; step++) -->Line_12 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, false) + suffix)[ CD ]
Line_2 $$ public static List<String> getSuggestionsByName(@NotNull String name, @NotNull String prefix, @NotNull String suffix, boolean upperCaseStyle, boolean preferLongerNames, boolean isArray) -->Line_4 $$ String[] words = nameToWords(name)[ CD ]
Line_2 $$ public static List<String> getSuggestionsByName(@NotNull String name, @NotNull String prefix, @NotNull String suffix, boolean upperCaseStyle, boolean preferLongerNames, boolean isArray) -->Line_3 $$ ArrayList<String> answer = new ArrayList<String>()[ CD ]
Line_3 $$ ArrayList<String> answer = new ArrayList<String>()-->Line_12 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, false) + suffix)[ FD ]
Line_8 $$ char c = startWord.charAt(0)-->Line_9 $$ if (c == '_' || !Character.isJavaIdentifierStart(c)) [ FD ]
Line_4 $$ String[] words = nameToWords(name)-->Line_13 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, true) + suffix)[ FD ]
Line_5 $$ for (int step = 0; step < words.length; step++) -->Line_7 $$ String startWord = words[words.length - wordCount][ CD ]
Line_5 $$ for (int step = 0; step < words.length; step++) -->Line_9 $$ if (c == '_' || !Character.isJavaIdentifierStart(c)) [ CD ]
Line_6 $$ int wordCount = preferLongerNames ? words.length - step : step + 1-->Line_12 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, false) + suffix)[ FD ]
Line_2 $$ public static List<String> getSuggestionsByName(@NotNull String name, @NotNull String prefix, @NotNull String suffix, boolean upperCaseStyle, boolean preferLongerNames, boolean isArray) -->Line_12 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, false) + suffix)[ FD ]
Line_7 $$ String startWord = words[words.length - wordCount]-->Line_13 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, true) + suffix)[ FD ]
Line_3 $$ ArrayList<String> answer = new ArrayList<String>()-->Line_13 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, true) + suffix)[ FD ]
Line_5 $$ for (int step = 0; step < words.length; step++) -->Line_13 $$ answer.add(compoundSuggestion(prefix, upperCaseStyle, words, wordCount, startWord, c, isArray, true) + suffix)[ CD ]
