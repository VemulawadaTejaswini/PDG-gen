Line_9 $$ if (ch == '\n' || ch == '\r' || ch == '\t' || ch == '\b' || ch == '\f' || (additionalCharsToEscape != null && (additionalCharIndex = additionalCharsToEscape.indexOf(ch)) != -1)) -->Line_10 $$ if (i > lastOffset) [ CD ]
Line_14 $$ if (escapeAttributes == null) -->Line_16 $$ if (fromHighlighter != null) [ CD ]
Line_2 $$ public static void renderValue(@NotNull String value, @NotNull ColoredTextContainer text, @NotNull SimpleTextAttributes attributes, int maxLength, @Nullable String additionalCharsToEscape) -->Line_25 $$ text.append(String.valueOf(getEscapingSymbol(ch)), escapeAttributes)[ FD ]
Line_3 $$ SimpleTextAttributes escapeAttributes = null-->Line_17 $$ escapeAttributes = SimpleTextAttributes.fromTextAttributes(fromHighlighter)[ FD ]
Line_9 $$ if (ch == '\n' || ch == '\r' || ch == '\t' || ch == '\b' || ch == '\f' || (additionalCharsToEscape != null && (additionalCharIndex = additionalCharsToEscape.indexOf(ch)) != -1)) -->Line_22 $$ if (additionalCharIndex == -1) [ CD ]
Line_5 $$ int length = maxLength == -1 ? value.length() : Math.min(value.length(), maxLength)-->Line_29 $$ text.append(value.substring(lastOffset, length), attributes)[ FD ]
Line_3 $$ SimpleTextAttributes escapeAttributes = null-->Line_14 $$ if (escapeAttributes == null) [ FD ]
Line_13 $$ lastOffset = i + 1-->Line_11 $$ text.append(value.substring(lastOffset, i), attributes)[ FD ]
Line_14 $$ if (escapeAttributes == null) -->Line_15 $$ TextAttributes fromHighlighter = DebuggerUIUtil.getColorScheme().getAttributes(DefaultLanguageHighlighterColors.VALID_STRING_ESCAPE)[ CD ]
Line_6 $$ for (int i = 0; i < length; i++) -->Line_11 $$ text.append(value.substring(lastOffset, i), attributes)[ FD ]
Line_19 $$ escapeAttributes = new SimpleTextAttributes(SimpleTextAttributes.STYLE_BOLD, JBColor.GRAY)-->Line_14 $$ if (escapeAttributes == null) [ FD ]
Line_15 $$ TextAttributes fromHighlighter = DebuggerUIUtil.getColorScheme().getAttributes(DefaultLanguageHighlighterColors.VALID_STRING_ESCAPE)-->Line_17 $$ escapeAttributes = SimpleTextAttributes.fromTextAttributes(fromHighlighter)[ FD ]
Line_6 $$ for (int i = 0; i < length; i++) -->Line_13 $$ lastOffset = i + 1[ FD ]
Line_3 $$ SimpleTextAttributes escapeAttributes = null-->Line_19 $$ escapeAttributes = new SimpleTextAttributes(SimpleTextAttributes.STYLE_BOLD, JBColor.GRAY)[ FD ]
Line_4 $$ int lastOffset = 0-->Line_29 $$ text.append(value.substring(lastOffset, length), attributes)[ FD ]
Line_6 $$ for (int i = 0; i < length; i++) -->Line_7 $$ char ch = value.charAt(i)[ FD ]
Line_13 $$ lastOffset = i + 1-->Line_10 $$ if (i > lastOffset) [ FD ]
Line_6 $$ for (int i = 0; i < length; i++) -->Line_8 $$ int additionalCharIndex = -1[ CD ]
Line_4 $$ int lastOffset = 0-->Line_13 $$ lastOffset = i + 1[ FD ]
Line_17 $$ escapeAttributes = SimpleTextAttributes.fromTextAttributes(fromHighlighter)-->Line_25 $$ text.append(String.valueOf(getEscapingSymbol(ch)), escapeAttributes)[ FD ]
Line_15 $$ TextAttributes fromHighlighter = DebuggerUIUtil.getColorScheme().getAttributes(DefaultLanguageHighlighterColors.VALID_STRING_ESCAPE)-->Line_16 $$ if (fromHighlighter != null) [ FD ]
Line_2 $$ public static void renderValue(@NotNull String value, @NotNull ColoredTextContainer text, @NotNull SimpleTextAttributes attributes, int maxLength, @Nullable String additionalCharsToEscape) -->Line_4 $$ int lastOffset = 0[ CD ]
Line_16 $$ if (fromHighlighter != null) -->Line_17 $$ escapeAttributes = SimpleTextAttributes.fromTextAttributes(fromHighlighter)[ CD ]
Line_2 $$ public static void renderValue(@NotNull String value, @NotNull ColoredTextContainer text, @NotNull SimpleTextAttributes attributes, int maxLength, @Nullable String additionalCharsToEscape) -->Line_7 $$ char ch = value.charAt(i)[ FD ]
Line_4 $$ int lastOffset = 0-->Line_11 $$ text.append(value.substring(lastOffset, i), attributes)[ FD ]
Line_9 $$ if (ch == '\n' || ch == '\r' || ch == '\t' || ch == '\b' || ch == '\f' || (additionalCharsToEscape != null && (additionalCharIndex = additionalCharsToEscape.indexOf(ch)) != -1)) -->Line_22 $$ if (additionalCharIndex == -1) [ FD ]
Line_22 $$ if (additionalCharIndex == -1) -->Line_23 $$ text.append("\\", escapeAttributes)[ CD ]
Line_6 $$ for (int i = 0; i < length; i++) -->Line_10 $$ if (i > lastOffset) [ FD ]
Line_17 $$ escapeAttributes = SimpleTextAttributes.fromTextAttributes(fromHighlighter)-->Line_14 $$ if (escapeAttributes == null) [ FD ]
Line_6 $$ for (int i = 0; i < length; i++) -->Line_7 $$ char ch = value.charAt(i)[ CD ]
Line_13 $$ lastOffset = i + 1-->Line_29 $$ text.append(value.substring(lastOffset, length), attributes)[ FD ]
Line_28 $$ if (lastOffset < length) -->Line_29 $$ text.append(value.substring(lastOffset, length), attributes)[ CD ]
Line_9 $$ if (ch == '\n' || ch == '\r' || ch == '\t' || ch == '\b' || ch == '\f' || (additionalCharsToEscape != null && (additionalCharIndex = additionalCharsToEscape.indexOf(ch)) != -1)) -->Line_25 $$ text.append(String.valueOf(getEscapingSymbol(ch)), escapeAttributes)[ CD ]
Line_7 $$ char ch = value.charAt(i)-->Line_9 $$ if (ch == '\n' || ch == '\r' || ch == '\t' || ch == '\b' || ch == '\f' || (additionalCharsToEscape != null && (additionalCharIndex = additionalCharsToEscape.indexOf(ch)) != -1)) [ FD ]
Line_8 $$ int additionalCharIndex = -1-->Line_9 $$ if (ch == '\n' || ch == '\r' || ch == '\t' || ch == '\b' || ch == '\f' || (additionalCharsToEscape != null && (additionalCharIndex = additionalCharsToEscape.indexOf(ch)) != -1)) [ FD ]
Line_19 $$ escapeAttributes = new SimpleTextAttributes(SimpleTextAttributes.STYLE_BOLD, JBColor.GRAY)-->Line_25 $$ text.append(String.valueOf(getEscapingSymbol(ch)), escapeAttributes)[ FD ]
Line_4 $$ int lastOffset = 0-->Line_28 $$ if (lastOffset < length) [ FD ]
Line_2 $$ public static void renderValue(@NotNull String value, @NotNull ColoredTextContainer text, @NotNull SimpleTextAttributes attributes, int maxLength, @Nullable String additionalCharsToEscape) -->Line_3 $$ SimpleTextAttributes escapeAttributes = null[ CD ]
Line_9 $$ if (ch == '\n' || ch == '\r' || ch == '\t' || ch == '\b' || ch == '\f' || (additionalCharsToEscape != null && (additionalCharIndex = additionalCharsToEscape.indexOf(ch)) != -1)) -->Line_13 $$ lastOffset = i + 1[ CD ]
Line_13 $$ lastOffset = i + 1-->Line_28 $$ if (lastOffset < length) [ FD ]
Line_5 $$ int length = maxLength == -1 ? value.length() : Math.min(value.length(), maxLength)-->Line_6 $$ for (int i = 0; i < length; i++) [ FD ]
Line_7 $$ char ch = value.charAt(i)-->Line_25 $$ text.append(String.valueOf(getEscapingSymbol(ch)), escapeAttributes)[ FD ]
Line_2 $$ public static void renderValue(@NotNull String value, @NotNull ColoredTextContainer text, @NotNull SimpleTextAttributes attributes, int maxLength, @Nullable String additionalCharsToEscape) -->Line_28 $$ if (lastOffset < length) [ CD ]
Line_2 $$ public static void renderValue(@NotNull String value, @NotNull ColoredTextContainer text, @NotNull SimpleTextAttributes attributes, int maxLength, @Nullable String additionalCharsToEscape) -->Line_5 $$ int length = maxLength == -1 ? value.length() : Math.min(value.length(), maxLength)[ FD ]
Line_2 $$ public static void renderValue(@NotNull String value, @NotNull ColoredTextContainer text, @NotNull SimpleTextAttributes attributes, int maxLength, @Nullable String additionalCharsToEscape) -->Line_9 $$ if (ch == '\n' || ch == '\r' || ch == '\t' || ch == '\b' || ch == '\f' || (additionalCharsToEscape != null && (additionalCharIndex = additionalCharsToEscape.indexOf(ch)) != -1)) [ FD ]
Line_4 $$ int lastOffset = 0-->Line_10 $$ if (i > lastOffset) [ FD ]
Line_5 $$ int length = maxLength == -1 ? value.length() : Math.min(value.length(), maxLength)-->Line_28 $$ if (lastOffset < length) [ FD ]
Line_8 $$ int additionalCharIndex = -1-->Line_22 $$ if (additionalCharIndex == -1) [ FD ]
Line_2 $$ public static void renderValue(@NotNull String value, @NotNull ColoredTextContainer text, @NotNull SimpleTextAttributes attributes, int maxLength, @Nullable String additionalCharsToEscape) -->Line_23 $$ text.append("\\", escapeAttributes)[ FD ]
Line_10 $$ if (i > lastOffset) -->Line_11 $$ text.append(value.substring(lastOffset, i), attributes)[ CD ]
Line_9 $$ if (ch == '\n' || ch == '\r' || ch == '\t' || ch == '\b' || ch == '\f' || (additionalCharsToEscape != null && (additionalCharIndex = additionalCharsToEscape.indexOf(ch)) != -1)) -->Line_14 $$ if (escapeAttributes == null) [ CD ]
Line_16 $$ if (fromHighlighter != null) -->Line_19 $$ escapeAttributes = new SimpleTextAttributes(SimpleTextAttributes.STYLE_BOLD, JBColor.GRAY)[ CD ]
Line_17 $$ escapeAttributes = SimpleTextAttributes.fromTextAttributes(fromHighlighter)-->Line_23 $$ text.append("\\", escapeAttributes)[ FD ]
Line_19 $$ escapeAttributes = new SimpleTextAttributes(SimpleTextAttributes.STYLE_BOLD, JBColor.GRAY)-->Line_23 $$ text.append("\\", escapeAttributes)[ FD ]
Line_3 $$ SimpleTextAttributes escapeAttributes = null-->Line_23 $$ text.append("\\", escapeAttributes)[ FD ]
Line_2 $$ public static void renderValue(@NotNull String value, @NotNull ColoredTextContainer text, @NotNull SimpleTextAttributes attributes, int maxLength, @Nullable String additionalCharsToEscape) -->Line_5 $$ int length = maxLength == -1 ? value.length() : Math.min(value.length(), maxLength)[ CD ]
Line_2 $$ public static void renderValue(@NotNull String value, @NotNull ColoredTextContainer text, @NotNull SimpleTextAttributes attributes, int maxLength, @Nullable String additionalCharsToEscape) -->Line_11 $$ text.append(value.substring(lastOffset, i), attributes)[ FD ]
Line_2 $$ public static void renderValue(@NotNull String value, @NotNull ColoredTextContainer text, @NotNull SimpleTextAttributes attributes, int maxLength, @Nullable String additionalCharsToEscape) -->Line_6 $$ for (int i = 0; i < length; i++) [ CD ]
Line_17 $$ escapeAttributes = SimpleTextAttributes.fromTextAttributes(fromHighlighter)-->Line_19 $$ escapeAttributes = new SimpleTextAttributes(SimpleTextAttributes.STYLE_BOLD, JBColor.GRAY)[ FD ]
Line_2 $$ public static void renderValue(@NotNull String value, @NotNull ColoredTextContainer text, @NotNull SimpleTextAttributes attributes, int maxLength, @Nullable String additionalCharsToEscape) -->Line_29 $$ text.append(value.substring(lastOffset, length), attributes)[ FD ]
Line_3 $$ SimpleTextAttributes escapeAttributes = null-->Line_25 $$ text.append(String.valueOf(getEscapingSymbol(ch)), escapeAttributes)[ FD ]
Line_6 $$ for (int i = 0; i < length; i++) -->Line_9 $$ if (ch == '\n' || ch == '\r' || ch == '\t' || ch == '\b' || ch == '\f' || (additionalCharsToEscape != null && (additionalCharIndex = additionalCharsToEscape.indexOf(ch)) != -1)) [ CD ]
