Line_14 $$ candidate = candidate.substring(startFallback + 1, candidate.length() - 1)-->Line_25 $$ if (targetModule.getConfiguration(candidate) != null) [ FD ]
Line_5 $$ String candidate = target-->Line_9 $$ String preferred = candidate.substring(0, startFallback)[ FD ]
Line_8 $$ if (candidate.charAt(candidate.length() - 1) == ')') -->Line_14 $$ candidate = candidate.substring(startFallback + 1, candidate.length() - 1)[ CD ]
Line_5 $$ String candidate = target-->Line_14 $$ candidate = candidate.substring(startFallback + 1, candidate.length() - 1)[ FD ]
Line_2 $$ private void collectTargetConfiguration(DependencyMetaData dependencyDescriptor, ConfigurationMetaData fromConfiguration, String mappingRhs, ComponentResolveMetaData targetModule, Collection<String> targetConfigs) -->Line_11 $$ targetConfigs.add(preferred)[ FD ]
Line_9 $$ String preferred = candidate.substring(0, startFallback)-->Line_11 $$ targetConfigs.add(preferred)[ FD ]
Line_18 $$ for (String configName : targetModule.getConfigurationNames()) -->Line_19 $$ if (targetModule.getConfiguration(configName).isVisible()) [ FD ]
Line_14 $$ candidate = candidate.substring(startFallback + 1, candidate.length() - 1)-->Line_17 $$ if (candidate.equals("*")) [ FD ]
Line_2 $$ private void collectTargetConfiguration(DependencyMetaData dependencyDescriptor, ConfigurationMetaData fromConfiguration, String mappingRhs, ComponentResolveMetaData targetModule, Collection<String> targetConfigs) -->Line_25 $$ if (targetModule.getConfiguration(candidate) != null) [ FD ]
Line_5 $$ String candidate = target-->Line_26 $$ targetConfigs.add(candidate)[ FD ]
Line_14 $$ candidate = candidate.substring(startFallback + 1, candidate.length() - 1)-->Line_26 $$ targetConfigs.add(candidate)[ FD ]
Line_10 $$ if (targetModule.getConfiguration(preferred) != null) -->Line_11 $$ targetConfigs.add(preferred)[ CD ]
Line_25 $$ if (targetModule.getConfiguration(candidate) != null) -->Line_26 $$ targetConfigs.add(candidate)[ CD ]
Line_2 $$ private void collectTargetConfiguration(DependencyMetaData dependencyDescriptor, ConfigurationMetaData fromConfiguration, String mappingRhs, ComponentResolveMetaData targetModule, Collection<String> targetConfigs) -->Line_10 $$ if (targetModule.getConfiguration(preferred) != null) [ FD ]
Line_2 $$ private void collectTargetConfiguration(DependencyMetaData dependencyDescriptor, ConfigurationMetaData fromConfiguration, String mappingRhs, ComponentResolveMetaData targetModule, Collection<String> targetConfigs) -->Line_29 $$ throw new RuntimeException(String.format("Module version %s, configuration '%s' declares a dependency on configuration '%s' which is not declared in the module descriptor for %s", fromConfiguration.getComponent().getId(), fromConfiguration.getName(), target, targetModule.getId()))[ FD ]
Line_2 $$ private void collectTargetConfiguration(DependencyMetaData dependencyDescriptor, ConfigurationMetaData fromConfiguration, String mappingRhs, ComponentResolveMetaData targetModule, Collection<String> targetConfigs) -->Line_3 $$ String[] dependencyConfigurations = dependencyDescriptor.getDependencyConfigurations(mappingRhs, fromConfiguration.getName())[ FD ]
Line_5 $$ String candidate = target-->Line_17 $$ if (candidate.equals("*")) [ FD ]
Line_2 $$ private void collectTargetConfiguration(DependencyMetaData dependencyDescriptor, ConfigurationMetaData fromConfiguration, String mappingRhs, ComponentResolveMetaData targetModule, Collection<String> targetConfigs) -->Line_19 $$ if (targetModule.getConfiguration(configName).isVisible()) [ FD ]
Line_19 $$ if (targetModule.getConfiguration(configName).isVisible()) -->Line_20 $$ targetConfigs.add(configName)[ CD ]
Line_18 $$ for (String configName : targetModule.getConfigurationNames()) -->Line_20 $$ targetConfigs.add(configName)[ FD ]
Line_8 $$ if (candidate.charAt(candidate.length() - 1) == ')') -->Line_10 $$ if (targetModule.getConfiguration(preferred) != null) [ CD ]
Line_6 $$ int startFallback = candidate.indexOf('(')-->Line_9 $$ String preferred = candidate.substring(0, startFallback)[ FD ]
Line_9 $$ String preferred = candidate.substring(0, startFallback)-->Line_10 $$ if (targetModule.getConfiguration(preferred) != null) [ FD ]
Line_2 $$ private void collectTargetConfiguration(DependencyMetaData dependencyDescriptor, ConfigurationMetaData fromConfiguration, String mappingRhs, ComponentResolveMetaData targetModule, Collection<String> targetConfigs) -->Line_3 $$ String[] dependencyConfigurations = dependencyDescriptor.getDependencyConfigurations(mappingRhs, fromConfiguration.getName())[ CD ]
Line_7 $$ if (startFallback >= 0) -->Line_8 $$ if (candidate.charAt(candidate.length() - 1) == ')') [ CD ]
Line_6 $$ int startFallback = candidate.indexOf('(')-->Line_7 $$ if (startFallback >= 0) [ FD ]
Line_2 $$ private void collectTargetConfiguration(DependencyMetaData dependencyDescriptor, ConfigurationMetaData fromConfiguration, String mappingRhs, ComponentResolveMetaData targetModule, Collection<String> targetConfigs) -->Line_18 $$ for (String configName : targetModule.getConfigurationNames()) [ FD ]
Line_4 $$ for (String target : dependencyConfigurations) -->Line_29 $$ throw new RuntimeException(String.format("Module version %s, configuration '%s' declares a dependency on configuration '%s' which is not declared in the module descriptor for %s", fromConfiguration.getComponent().getId(), fromConfiguration.getName(), target, targetModule.getId()))[ FD ]
Line_2 $$ private void collectTargetConfiguration(DependencyMetaData dependencyDescriptor, ConfigurationMetaData fromConfiguration, String mappingRhs, ComponentResolveMetaData targetModule, Collection<String> targetConfigs) -->Line_20 $$ targetConfigs.add(configName)[ FD ]
Line_5 $$ String candidate = target-->Line_8 $$ if (candidate.charAt(candidate.length() - 1) == ')') [ FD ]
Line_8 $$ if (candidate.charAt(candidate.length() - 1) == ')') -->Line_9 $$ String preferred = candidate.substring(0, startFallback)[ CD ]
Line_5 $$ String candidate = target-->Line_25 $$ if (targetModule.getConfiguration(candidate) != null) [ FD ]
Line_2 $$ private void collectTargetConfiguration(DependencyMetaData dependencyDescriptor, ConfigurationMetaData fromConfiguration, String mappingRhs, ComponentResolveMetaData targetModule, Collection<String> targetConfigs) -->Line_26 $$ targetConfigs.add(candidate)[ FD ]
Line_5 $$ String candidate = target-->Line_6 $$ int startFallback = candidate.indexOf('(')[ FD ]
