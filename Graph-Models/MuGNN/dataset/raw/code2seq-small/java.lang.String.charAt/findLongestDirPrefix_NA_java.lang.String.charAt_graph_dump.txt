Line_14 $$ if (cwd.charAt(i) == Path.SEPARATOR_CHAR)-->Line_15 $$ lastSep = i[ CD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_12 $$ if (cwd.charAt(i) != path.charAt(i))[ FD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_14 $$ if (cwd.charAt(i) == Path.SEPARATOR_CHAR)[ FD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_12 $$ if (cwd.charAt(i) != path.charAt(i))[ CD ]
Line_4 $$ cwd += Path.SEPARATOR-->Line_12 $$ if (cwd.charAt(i) != path.charAt(i))[ FD ]
Line_6 $$ if (isDir && !path.endsWith(Path.SEPARATOR)) -->Line_7 $$ path += Path.SEPARATOR[ CD ]
Line_3 $$ if (!cwd.endsWith(Path.SEPARATOR)) -->Line_4 $$ cwd += Path.SEPARATOR[ CD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_11 $$ for (int i = 0; i < len; i++) [ CD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_10 $$ int lastSep = -1[ CD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_14 $$ if (cwd.charAt(i) == Path.SEPARATOR_CHAR)[ CD ]
Line_4 $$ cwd += Path.SEPARATOR-->Line_14 $$ if (cwd.charAt(i) == Path.SEPARATOR_CHAR)[ FD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_9 $$ int len = Math.min(cwd.length(), path.length())[ FD ]
Line_4 $$ cwd += Path.SEPARATOR-->Line_9 $$ int len = Math.min(cwd.length(), path.length())[ FD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_7 $$ path += Path.SEPARATOR[ FD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_14 $$ if (cwd.charAt(i) == Path.SEPARATOR_CHAR)[ FD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_17 $$ return lastSep[ CD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_15 $$ lastSep = i[ FD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_3 $$ if (!cwd.endsWith(Path.SEPARATOR)) [ FD ]
Line_10 $$ int lastSep = -1-->Line_15 $$ lastSep = i[ FD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_6 $$ if (isDir && !path.endsWith(Path.SEPARATOR)) [ FD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_12 $$ if (cwd.charAt(i) != path.charAt(i))[ FD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_6 $$ if (isDir && !path.endsWith(Path.SEPARATOR)) [ CD ]
Line_7 $$ path += Path.SEPARATOR-->Line_9 $$ int len = Math.min(cwd.length(), path.length())[ FD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_9 $$ int len = Math.min(cwd.length(), path.length())[ CD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_4 $$ cwd += Path.SEPARATOR[ FD ]
Line_7 $$ path += Path.SEPARATOR-->Line_12 $$ if (cwd.charAt(i) != path.charAt(i))[ FD ]
Line_2 $$ private static int findLongestDirPrefix(String cwd, String path, boolean isDir) -->Line_3 $$ if (!cwd.endsWith(Path.SEPARATOR)) [ CD ]
Line_9 $$ int len = Math.min(cwd.length(), path.length())-->Line_11 $$ for (int i = 0; i < len; i++) [ FD ]
