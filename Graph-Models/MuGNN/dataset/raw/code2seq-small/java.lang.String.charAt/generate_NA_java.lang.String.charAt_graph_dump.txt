Line_2 $$ public List<String> generate(@NotNull final String testName, String root) -->Line_4 $$ if (StringUtil.isEmpty(testName)) [ CD ]
Line_2 $$ public List<String> generate(@NotNull final String testName, String root) -->Line_12 $$ return result[ CD ]
Line_3 $$ List<String> result = new ArrayList<String>()-->Line_10 $$ result.add(String.format("%s/%s%c%s%s.%s", descriptor.dir, descriptor.filePrefix, descriptor.startWithLowerCase ? Character.toLowerCase(testName.charAt(0)) : Character.toUpperCase(testName.charAt(0)), testName.substring(1), descriptor.fileSuffix, descriptor.ext))[ FD ]
Line_2 $$ public List<String> generate(@NotNull final String testName, String root) -->Line_10 $$ result.add(String.format("%s/%s%c%s%s.%s", descriptor.dir, descriptor.filePrefix, descriptor.startWithLowerCase ? Character.toLowerCase(testName.charAt(0)) : Character.toUpperCase(testName.charAt(0)), testName.substring(1), descriptor.fileSuffix, descriptor.ext))[ FD ]
Line_2 $$ public List<String> generate(@NotNull final String testName, String root) -->Line_4 $$ if (StringUtil.isEmpty(testName)) [ FD ]
Line_4 $$ if (StringUtil.isEmpty(testName)) -->Line_5 $$ return result[ CD ]
Line_2 $$ public List<String> generate(@NotNull final String testName, String root) -->Line_3 $$ List<String> result = new ArrayList<String>()[ CD ]
Line_2 $$ public List<String> generate(@NotNull final String testName, String root) -->Line_8 $$ if (root != null && !root.equals(descriptor.dir))[ FD ]
