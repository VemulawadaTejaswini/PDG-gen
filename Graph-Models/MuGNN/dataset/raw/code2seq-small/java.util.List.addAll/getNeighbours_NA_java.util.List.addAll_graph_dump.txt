Line_5 $$ if ((type & (type - 1)) == 0) -->Line_9 $$ res = new ArrayList<Statement>()[ CD ]
Line_3 $$ Map<Integer, List<Statement>> map = direction == DIRECTION_BACKWARD ? mapPredStates : mapSuccStates-->Line_6 $$ res = map.get(type)[ FD ]
Line_10 $$ for (int edgetype : StatEdge.TYPES) -->Line_12 $$ List<Statement> lst = map.get(edgetype)[ FD ]
Line_11 $$ if ((type & edgetype) != 0) -->Line_13 $$ if (lst != null) [ CD ]
Line_13 $$ if (lst != null) -->Line_14 $$ res.addAll(lst)[ CD ]
Line_7 $$ res = res == null ? new ArrayList<Statement>() : new ArrayList<Statement>(res)-->Line_9 $$ res = new ArrayList<Statement>()[ FD ]
Line_6 $$ res = map.get(type)-->Line_7 $$ res = res == null ? new ArrayList<Statement>() : new ArrayList<Statement>(res)[ FD ]
Line_2 $$ public List<Statement> getNeighbours(int type, int direction) -->Line_4 $$ List<Statement> res[ CD ]
Line_9 $$ res = new ArrayList<Statement>()-->Line_14 $$ res.addAll(lst)[ FD ]
Line_3 $$ Map<Integer, List<Statement>> map = direction == DIRECTION_BACKWARD ? mapPredStates : mapSuccStates-->Line_12 $$ List<Statement> lst = map.get(edgetype)[ FD ]
Line_2 $$ public List<Statement> getNeighbours(int type, int direction) -->Line_6 $$ res = map.get(type)[ FD ]
Line_4 $$ List<Statement> res-->Line_14 $$ res.addAll(lst)[ FD ]
Line_5 $$ if ((type & (type - 1)) == 0) -->Line_7 $$ res = res == null ? new ArrayList<Statement>() : new ArrayList<Statement>(res)[ CD ]
Line_12 $$ List<Statement> lst = map.get(edgetype)-->Line_13 $$ if (lst != null) [ FD ]
Line_2 $$ public List<Statement> getNeighbours(int type, int direction) -->Line_5 $$ if ((type & (type - 1)) == 0) [ CD ]
Line_2 $$ public List<Statement> getNeighbours(int type, int direction) -->Line_3 $$ Map<Integer, List<Statement>> map = direction == DIRECTION_BACKWARD ? mapPredStates : mapSuccStates[ CD ]
Line_4 $$ List<Statement> res-->Line_7 $$ res = res == null ? new ArrayList<Statement>() : new ArrayList<Statement>(res)[ FD ]
Line_2 $$ public List<Statement> getNeighbours(int type, int direction) -->Line_19 $$ return res[ CD ]
Line_4 $$ List<Statement> res-->Line_6 $$ res = map.get(type)[ FD ]
Line_11 $$ if ((type & edgetype) != 0) -->Line_12 $$ List<Statement> lst = map.get(edgetype)[ CD ]
Line_4 $$ List<Statement> res-->Line_9 $$ res = new ArrayList<Statement>()[ FD ]
Line_5 $$ if ((type & (type - 1)) == 0) -->Line_6 $$ res = map.get(type)[ CD ]
Line_7 $$ res = res == null ? new ArrayList<Statement>() : new ArrayList<Statement>(res)-->Line_14 $$ res.addAll(lst)[ FD ]
Line_12 $$ List<Statement> lst = map.get(edgetype)-->Line_14 $$ res.addAll(lst)[ FD ]
Line_6 $$ res = map.get(type)-->Line_14 $$ res.addAll(lst)[ FD ]
Line_6 $$ res = map.get(type)-->Line_9 $$ res = new ArrayList<Statement>()[ FD ]
