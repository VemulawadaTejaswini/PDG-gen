Line_13 $$ committedModules = ((ProjectImportBuilder<?>) builder).commit(myProject, myModuleModel, ModulesConfigurator.this, artifactModel)-->Line_15 $$ committedModules = builder.commit(myProject, myModuleModel, ModulesConfigurator.this)[ FD ]
Line_10 $$ final List<Module> committedModules-->Line_17 $$ if (committedModules != null) [ FD ]
Line_11 $$ if (builder instanceof ProjectImportBuilder<?>) -->Line_12 $$ final ModifiableArtifactModel artifactModel = ProjectStructureConfigurable.getInstance(myProject).getArtifactsStructureConfigurable().getModifiableArtifactModel()[ CD ]
Line_15 $$ committedModules = builder.commit(myProject, myModuleModel, ModulesConfigurator.this)-->Line_17 $$ if (committedModules != null) [ FD ]
Line_6 $$ if (builder != null) -->Line_7 $$ final List<Module> modules = new ArrayList<Module>()[ CD ]
Line_10 $$ final List<Module> committedModules-->Line_18 $$ modules.addAll(committedModules)[ FD ]
Line_3 $$ if (myProject.isDefault())-->Line_4 $$ return null[ CD ]
Line_2 $$ public List<Module> addModule(Component parent, boolean anImport) -->Line_6 $$ if (builder != null) [ CD ]
Line_5 $$ final ProjectBuilder builder = runModuleWizard(parent, anImport)-->Line_11 $$ if (builder instanceof ProjectImportBuilder<?>) [ FD ]
Line_7 $$ final List<Module> modules = new ArrayList<Module>()-->Line_18 $$ modules.addAll(committedModules)[ FD ]
Line_11 $$ if (builder instanceof ProjectImportBuilder<?>) -->Line_13 $$ committedModules = ((ProjectImportBuilder<?>) builder).commit(myProject, myModuleModel, ModulesConfigurator.this, artifactModel)[ CD ]
Line_22 $$ for (Module module : modules) -->Line_23 $$ getOrCreateModuleEditor(module)[ FD ]
Line_8 $$ DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND, new Runnable() -->Line_10 $$ final List<Module> committedModules[ CD ]
Line_13 $$ committedModules = ((ProjectImportBuilder<?>) builder).commit(myProject, myModuleModel, ModulesConfigurator.this, artifactModel)-->Line_17 $$ if (committedModules != null) [ FD ]
Line_15 $$ committedModules = builder.commit(myProject, myModuleModel, ModulesConfigurator.this)-->Line_18 $$ modules.addAll(committedModules)[ FD ]
Line_5 $$ final ProjectBuilder builder = runModuleWizard(parent, anImport)-->Line_6 $$ if (builder != null) [ FD ]
Line_8 $$ DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND, new Runnable() -->Line_20 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_10 $$ final List<Module> committedModules-->Line_13 $$ committedModules = ((ProjectImportBuilder<?>) builder).commit(myProject, myModuleModel, ModulesConfigurator.this, artifactModel)[ FD ]
Line_2 $$ public List<Module> addModule(Component parent, boolean anImport) -->Line_31 $$ return null[ CD ]
Line_2 $$ public List<Module> addModule(Component parent, boolean anImport) -->Line_5 $$ final ProjectBuilder builder = runModuleWizard(parent, anImport)[ CD ]
Line_8 $$ DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND, new Runnable() -->Line_11 $$ if (builder instanceof ProjectImportBuilder<?>) [ CD ]
Line_2 $$ public List<Module> addModule(Component parent, boolean anImport) -->Line_3 $$ if (myProject.isDefault())[ CD ]
Line_6 $$ if (builder != null) -->Line_29 $$ return modules[ CD ]
Line_11 $$ if (builder instanceof ProjectImportBuilder<?>) -->Line_15 $$ committedModules = builder.commit(myProject, myModuleModel, ModulesConfigurator.this)[ CD ]
Line_5 $$ final ProjectBuilder builder = runModuleWizard(parent, anImport)-->Line_15 $$ committedModules = builder.commit(myProject, myModuleModel, ModulesConfigurator.this)[ FD ]
Line_13 $$ committedModules = ((ProjectImportBuilder<?>) builder).commit(myProject, myModuleModel, ModulesConfigurator.this, artifactModel)-->Line_18 $$ modules.addAll(committedModules)[ FD ]
Line_17 $$ if (committedModules != null) -->Line_18 $$ modules.addAll(committedModules)[ CD ]
Line_12 $$ final ModifiableArtifactModel artifactModel = ProjectStructureConfigurable.getInstance(myProject).getArtifactsStructureConfigurable().getModifiableArtifactModel()-->Line_13 $$ committedModules = ((ProjectImportBuilder<?>) builder).commit(myProject, myModuleModel, ModulesConfigurator.this, artifactModel)[ FD ]
Line_10 $$ final List<Module> committedModules-->Line_15 $$ committedModules = builder.commit(myProject, myModuleModel, ModulesConfigurator.this)[ FD ]
Line_6 $$ if (builder != null) -->Line_8 $$ DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND, new Runnable() [ CD ]
Line_8 $$ DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND, new Runnable() -->Line_17 $$ if (committedModules != null) [ CD ]
Line_2 $$ public List<Module> addModule(Component parent, boolean anImport) -->Line_5 $$ final ProjectBuilder builder = runModuleWizard(parent, anImport)[ FD ]
