Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_38 $$ return executionInfo[ CD ]
Line_6 $$ List<String> executionCommandLine = new ArrayList<String>()-->Line_37 $$ executionInfo.setCommandLineArguments(executionCommandLine.toArray(new String[executionCommandLine.size()]))[ FD ]
Line_25 $$ if (!commandLineAssistant.hasLogLevelDefined(individualCommandLineArguments)) -->Line_26 $$ String logLevelText = commandLineAssistant.getLoggingCommandLineConverter().getLogLevelCommandLine(logLevel)[ CD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_16 $$ CommandLineAssistant commandLineAssistant = new CommandLineAssistant()[ CD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_37 $$ executionInfo.setCommandLineArguments(executionCommandLine.toArray(new String[executionCommandLine.size()]))[ CD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_4 $$ executionInfo.addEnvironmentVariable("JAVA_HOME", Jvm.current().getJavaHome().getAbsolutePath())[ CD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_18 $$ executionCommandLine.addAll(Arrays.asList(individualCommandLineArguments))[ CD ]
Line_27 $$ if (logLevelText != null && !"".equals(logLevelText)) -->Line_28 $$ executionCommandLine.add('-' + logLevelText)[ CD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_5 $$ executionInfo.setWorkingDirectory(currentDirectory)[ CD ]
Line_3 $$ MyExecutionInfo executionInfo = new MyExecutionInfo()-->Line_5 $$ executionInfo.setWorkingDirectory(currentDirectory)[ FD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_8 $$ if (gradleExecutableFile == null) [ CD ]
Line_25 $$ if (!commandLineAssistant.hasLogLevelDefined(individualCommandLineArguments)) -->Line_27 $$ if (logLevelText != null && !"".equals(logLevelText)) [ CD ]
Line_17 $$ String[] individualCommandLineArguments = CommandLineAssistant.breakUpCommandLine(commandLine)-->Line_31 $$ if (!commandLineAssistant.hasShowStacktraceDefined(individualCommandLineArguments)) [ FD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_14 $$ executionCommandLine.add(gradleExecutableFile.getAbsolutePath())[ CD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_3 $$ MyExecutionInfo executionInfo = new MyExecutionInfo()[ CD ]
Line_6 $$ List<String> executionCommandLine = new ArrayList<String>()-->Line_21 $$ executionCommandLine.add("-" + DefaultCommandLineConverter.INIT_SCRIPT)[ FD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_11 $$ if (!gradleExecutableFile.exists()) [ CD ]
Line_17 $$ String[] individualCommandLineArguments = CommandLineAssistant.breakUpCommandLine(commandLine)-->Line_25 $$ if (!commandLineAssistant.hasLogLevelDefined(individualCommandLineArguments)) [ FD ]
Line_16 $$ CommandLineAssistant commandLineAssistant = new CommandLineAssistant()-->Line_31 $$ if (!commandLineAssistant.hasShowStacktraceDefined(individualCommandLineArguments)) [ FD ]
Line_31 $$ if (!commandLineAssistant.hasShowStacktraceDefined(individualCommandLineArguments)) -->Line_32 $$ String stackTraceLevelText = commandLineAssistant.getLoggingCommandLineConverter().getShowStacktraceCommandLine(stackTraceLevel)[ CD ]
Line_16 $$ CommandLineAssistant commandLineAssistant = new CommandLineAssistant()-->Line_32 $$ String stackTraceLevelText = commandLineAssistant.getLoggingCommandLineConverter().getShowStacktraceCommandLine(stackTraceLevel)[ FD ]
Line_6 $$ List<String> executionCommandLine = new ArrayList<String>()-->Line_34 $$ executionCommandLine.add('-' + stackTraceLevelText)[ FD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_7 $$ File gradleExecutableFile = getGradleExecutableFile()[ CD ]
Line_3 $$ MyExecutionInfo executionInfo = new MyExecutionInfo()-->Line_4 $$ executionInfo.addEnvironmentVariable("JAVA_HOME", Jvm.current().getJavaHome().getAbsolutePath())[ FD ]
Line_6 $$ List<String> executionCommandLine = new ArrayList<String>()-->Line_22 $$ executionCommandLine.add(initStriptPath.getAbsolutePath())[ FD ]
Line_7 $$ File gradleExecutableFile = getGradleExecutableFile()-->Line_8 $$ if (gradleExecutableFile == null) [ FD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_15 $$ executionCommandLine.add("-D" + ProtocolConstants.PORT_NUMBER_SYSTEM_PROPERTY + "=" + Integer.toString(serverPort))[ CD ]
Line_17 $$ String[] individualCommandLineArguments = CommandLineAssistant.breakUpCommandLine(commandLine)-->Line_18 $$ executionCommandLine.addAll(Arrays.asList(individualCommandLineArguments))[ FD ]
Line_20 $$ if (initStriptPath != null) -->Line_23 $$ executionInfo.initStriptPath = initStriptPath[ CD ]
Line_19 $$ File initStriptPath = getInitScriptFile()-->Line_23 $$ executionInfo.initStriptPath = initStriptPath[ FD ]
Line_32 $$ String stackTraceLevelText = commandLineAssistant.getLoggingCommandLineConverter().getShowStacktraceCommandLine(stackTraceLevel)-->Line_33 $$ if (stackTraceLevelText != null) [ FD ]
Line_26 $$ String logLevelText = commandLineAssistant.getLoggingCommandLineConverter().getLogLevelCommandLine(logLevel)-->Line_27 $$ if (logLevelText != null && !"".equals(logLevelText)) [ FD ]
Line_6 $$ List<String> executionCommandLine = new ArrayList<String>()-->Line_18 $$ executionCommandLine.addAll(Arrays.asList(individualCommandLineArguments))[ FD ]
Line_33 $$ if (stackTraceLevelText != null) -->Line_34 $$ executionCommandLine.add('-' + stackTraceLevelText)[ CD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_19 $$ File initStriptPath = getInitScriptFile()[ CD ]
Line_16 $$ CommandLineAssistant commandLineAssistant = new CommandLineAssistant()-->Line_26 $$ String logLevelText = commandLineAssistant.getLoggingCommandLineConverter().getLogLevelCommandLine(logLevel)[ FD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_31 $$ if (!commandLineAssistant.hasShowStacktraceDefined(individualCommandLineArguments)) [ CD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_6 $$ List<String> executionCommandLine = new ArrayList<String>()[ CD ]
Line_16 $$ CommandLineAssistant commandLineAssistant = new CommandLineAssistant()-->Line_25 $$ if (!commandLineAssistant.hasLogLevelDefined(individualCommandLineArguments)) [ FD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_15 $$ executionCommandLine.add("-D" + ProtocolConstants.PORT_NUMBER_SYSTEM_PROPERTY + "=" + Integer.toString(serverPort))[ FD ]
Line_3 $$ MyExecutionInfo executionInfo = new MyExecutionInfo()-->Line_37 $$ executionInfo.setCommandLineArguments(executionCommandLine.toArray(new String[executionCommandLine.size()]))[ FD ]
Line_7 $$ File gradleExecutableFile = getGradleExecutableFile()-->Line_14 $$ executionCommandLine.add(gradleExecutableFile.getAbsolutePath())[ FD ]
Line_19 $$ File initStriptPath = getInitScriptFile()-->Line_22 $$ executionCommandLine.add(initStriptPath.getAbsolutePath())[ FD ]
Line_20 $$ if (initStriptPath != null) -->Line_21 $$ executionCommandLine.add("-" + DefaultCommandLineConverter.INIT_SCRIPT)[ CD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_25 $$ if (!commandLineAssistant.hasLogLevelDefined(individualCommandLineArguments)) [ CD ]
Line_6 $$ List<String> executionCommandLine = new ArrayList<String>()-->Line_15 $$ executionCommandLine.add("-D" + ProtocolConstants.PORT_NUMBER_SYSTEM_PROPERTY + "=" + Integer.toString(serverPort))[ FD ]
Line_6 $$ List<String> executionCommandLine = new ArrayList<String>()-->Line_14 $$ executionCommandLine.add(gradleExecutableFile.getAbsolutePath())[ FD ]
Line_19 $$ File initStriptPath = getInitScriptFile()-->Line_20 $$ if (initStriptPath != null) [ FD ]
Line_31 $$ if (!commandLineAssistant.hasShowStacktraceDefined(individualCommandLineArguments)) -->Line_33 $$ if (stackTraceLevelText != null) [ CD ]
Line_6 $$ List<String> executionCommandLine = new ArrayList<String>()-->Line_28 $$ executionCommandLine.add('-' + logLevelText)[ FD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_17 $$ String[] individualCommandLineArguments = CommandLineAssistant.breakUpCommandLine(commandLine)[ CD ]
Line_20 $$ if (initStriptPath != null) -->Line_22 $$ executionCommandLine.add(initStriptPath.getAbsolutePath())[ CD ]
Line_2 $$ public ExecutionInfo getExecutionInfo(int serverPort) -->Line_20 $$ if (initStriptPath != null) [ CD ]
Line_7 $$ File gradleExecutableFile = getGradleExecutableFile()-->Line_11 $$ if (!gradleExecutableFile.exists()) [ FD ]
