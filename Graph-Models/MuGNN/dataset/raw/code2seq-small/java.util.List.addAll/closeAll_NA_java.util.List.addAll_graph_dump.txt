Line_2 $$ synchronized void closeAll(boolean onlyAutomatic) throws IOException -->Line_20 $$ if (!exceptions.isEmpty()) [ CD ]
Line_4 $$ List<Key> keys = new ArrayList<Key>()-->Line_5 $$ keys.addAll(map.keySet())[ FD ]
Line_2 $$ synchronized void closeAll(boolean onlyAutomatic) throws IOException -->Line_3 $$ List<IOException> exceptions = new ArrayList<IOException>()[ CD ]
Line_2 $$ synchronized void closeAll(boolean onlyAutomatic) throws IOException -->Line_8 $$ if (onlyAutomatic && !toAutoClose.contains(key)) [ FD ]
Line_7 $$ final FileSystem fs = map.get(key)-->Line_11 $$ remove(key, fs)[ FD ]
Line_2 $$ synchronized void closeAll(boolean onlyAutomatic) throws IOException -->Line_5 $$ keys.addAll(map.keySet())[ CD ]
Line_3 $$ List<IOException> exceptions = new ArrayList<IOException>()-->Line_20 $$ if (!exceptions.isEmpty()) [ FD ]
Line_7 $$ final FileSystem fs = map.get(key)-->Line_14 $$ fs.close()[ FD ]
Line_3 $$ List<IOException> exceptions = new ArrayList<IOException>()-->Line_16 $$ exceptions.add(ioe)[ FD ]
Line_6 $$ for (Key key : keys) -->Line_8 $$ if (onlyAutomatic && !toAutoClose.contains(key)) [ FD ]
Line_6 $$ for (Key key : keys) -->Line_7 $$ final FileSystem fs = map.get(key)[ FD ]
Line_6 $$ for (Key key : keys) -->Line_11 $$ remove(key, fs)[ FD ]
Line_3 $$ List<IOException> exceptions = new ArrayList<IOException>()-->Line_21 $$ throw MultipleIOException.createIOException(exceptions)[ FD ]
Line_7 $$ final FileSystem fs = map.get(key)-->Line_12 $$ if (fs != null) [ FD ]
Line_2 $$ synchronized void closeAll(boolean onlyAutomatic) throws IOException -->Line_4 $$ List<Key> keys = new ArrayList<Key>()[ CD ]
