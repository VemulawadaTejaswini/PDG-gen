Line_2 $$ public static AntDomPattern create(AntDomElement element, final boolean honorDefaultExcludes, final boolean caseSensitive) -->Line_5 $$ if (honorDefaultExcludes) [ CD ]
Line_5 $$ if (honorDefaultExcludes) -->Line_6 $$ antPattern.myExcludePatterns.addAll(caseSensitive ? ourDefaultExcludes : ourCaseInsensitiveDefaultExcludes)[ CD ]
Line_3 $$ final AntDomPattern antPattern = new AntDomPattern(caseSensitive)-->Line_4 $$ element.accept(antPattern)[ FD ]
Line_2 $$ public static AntDomPattern create(AntDomElement element, final boolean honorDefaultExcludes, final boolean caseSensitive) -->Line_4 $$ element.accept(antPattern)[ CD ]
Line_2 $$ public static AntDomPattern create(AntDomElement element, final boolean honorDefaultExcludes, final boolean caseSensitive) -->Line_8 $$ return antPattern[ CD ]
Line_2 $$ public static AntDomPattern create(AntDomElement element, final boolean honorDefaultExcludes, final boolean caseSensitive) -->Line_3 $$ final AntDomPattern antPattern = new AntDomPattern(caseSensitive)[ CD ]
Line_2 $$ public static AntDomPattern create(AntDomElement element, final boolean honorDefaultExcludes, final boolean caseSensitive) -->Line_4 $$ element.accept(antPattern)[ FD ]
