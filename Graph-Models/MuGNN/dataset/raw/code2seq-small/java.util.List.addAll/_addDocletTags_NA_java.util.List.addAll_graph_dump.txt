Line_67 $$ String elementName = element.elementText("name")-->Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_78 $$ sb.append(comment)[ FD ]
Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_87 $$ sb.append(comment)[ FD ]
Line_62 $$ if (commentElement != null) -->Line_63 $$ comment = commentElement.getText()[ CD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_72 $$ if (_initializeMissingJavadocs && publicAccess) [ FD ]
Line_51 $$ maxTagNameLength = name.length()-->Line_54 $$ maxTagNameLength += 2[ FD ]
Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_78 $$ sb.append(comment)[ FD ]
Line_10 $$ String comment = null-->Line_87 $$ sb.append(comment)[ FD ]
Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_74 $$ sb.append(comment)[ FD ]
Line_39 $$ if (!requiredTagNames.isEmpty()) -->Line_40 $$ maxTagNameLengthTags.addAll(allTagNames)[ CD ]
Line_63 $$ comment = commentElement.getText()-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_9 $$ Element commentElement = element.element("comment")-->Line_11 $$ if (commentElement != null) [ FD ]
Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_70 $$ sb.append(comment)[ FD ]
Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_79 $$ if (!requiredTagNames.isEmpty()) -->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ CD ]
Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_55 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)-->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_68 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_10 $$ String comment = null-->Line_65 $$ comment = element.getText()[ FD ]
Line_34 $$ int maxTagNameLength = 0-->Line_55 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)[ FD ]
Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_81 $$ sb.append(comment)[ FD ]
Line_55 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)-->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_24 $$ if (GetterUtil.getBoolean(element.elementText("required"))) -->Line_25 $$ requiredTagNames.add(tagName)[ CD ]
Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_92 $$ sb.append(comment)[ FD ]
Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_92 $$ sb.append(comment)[ FD ]
Line_34 $$ int maxTagNameLength = 0-->Line_54 $$ maxTagNameLength += 2[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_51 $$ maxTagNameLength = name.length()-->Line_55 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_29 $$ customTagNames.add(tagName)[ FD ]
Line_14 $$ comment = element.getText()-->Line_92 $$ sb.append(comment)[ FD ]
Line_89 $$ if (GetterUtil.getBoolean(element.elementText("required"))) -->Line_92 $$ sb.append(comment)[ CD ]
Line_6 $$ for (String tagName : tagNames) -->Line_7 $$ List<Element> elements = parentElement.elements(tagName)[ FD ]
Line_85 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) -->Line_87 $$ sb.append(comment)[ CD ]
Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_87 $$ sb.append(comment)[ FD ]
Line_35 $$ List<String> maxTagNameLengthTags = new ArrayList()-->Line_42 $$ maxTagNameLengthTags.addAll(customTagNames)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_19 $$ if (tagName.equals("param")) [ FD ]
Line_76 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) -->Line_79 $$ if (!requiredTagNames.isEmpty()) [ CD ]
Line_34 $$ int maxTagNameLength = 0-->Line_50 $$ if (name.length() > maxTagNameLength) [ FD ]
Line_68 $$ if (Validator.isNotNull(comment)) -->Line_72 $$ if (_initializeMissingJavadocs && publicAccess) [ CD ]
Line_63 $$ comment = commentElement.getText()-->Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_55 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)-->Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_76 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) [ FD ]
Line_3 $$ List<String> allTagNames = new ArrayList()-->Line_40 $$ maxTagNameLengthTags.addAll(allTagNames)[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_63 $$ comment = commentElement.getText()[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_5 $$ List<String> requiredTagNames = new ArrayList()[ CD ]
Line_65 $$ comment = element.getText()-->Line_78 $$ sb.append(comment)[ FD ]
Line_9 $$ Element commentElement = element.element("comment")-->Line_63 $$ comment = commentElement.getText()[ FD ]
Line_3 $$ List<String> allTagNames = new ArrayList()-->Line_31 $$ allTagNames.add(tagName)[ FD ]
Line_79 $$ if (!requiredTagNames.isEmpty()) -->Line_81 $$ sb.append(comment)[ CD ]
Line_68 $$ if (Validator.isNotNull(comment)) -->Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ CD ]
Line_6 $$ for (String tagName : tagNames) -->Line_25 $$ requiredTagNames.add(tagName)[ FD ]
Line_23 $$ if (tagName.equals("throws")) -->Line_24 $$ if (GetterUtil.getBoolean(element.elementText("required"))) [ CD ]
Line_10 $$ String comment = null-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_10 $$ String comment = null-->Line_12 $$ comment = commentElement.getText()[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_23 $$ if (tagName.equals("throws")) [ FD ]
Line_35 $$ List<String> maxTagNameLengthTags = new ArrayList()-->Line_40 $$ maxTagNameLengthTags.addAll(allTagNames)[ FD ]
Line_75 $$ if (_updateJavadocs && publicAccess) -->Line_85 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) [ CD ]
Line_67 $$ String elementName = element.elementText("name")-->Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_55 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_8 $$ for (Element element : elements) -->Line_20 $$ if (GetterUtil.getBoolean(element.elementText("required"))) [ FD ]
Line_72 $$ if (_initializeMissingJavadocs && publicAccess) -->Line_75 $$ if (_updateJavadocs && publicAccess) [ CD ]
Line_14 $$ comment = element.getText()-->Line_65 $$ comment = element.getText()[ FD ]
Line_38 $$ if (_updateJavadocs) -->Line_47 $$ maxTagNameLengthTags.addAll(requiredTagNames)[ CD ]
Line_9 $$ Element commentElement = element.element("comment")-->Line_62 $$ if (commentElement != null) [ FD ]
Line_10 $$ String comment = null-->Line_81 $$ sb.append(comment)[ FD ]
Line_14 $$ comment = element.getText()-->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_54 $$ maxTagNameLength += 2-->Line_55 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)[ FD ]
Line_34 $$ int maxTagNameLength = 0-->Line_51 $$ maxTagNameLength = name.length()[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_92 $$ sb.append(comment)[ FD ]
Line_65 $$ comment = element.getText()-->Line_87 $$ sb.append(comment)[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_16 $$ if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) -->Line_29 $$ customTagNames.add(tagName)[ CD ]
Line_65 $$ comment = element.getText()-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_10 $$ String comment = null-->Line_63 $$ comment = commentElement.getText()[ FD ]
Line_4 $$ List<String> customTagNames = new ArrayList()-->Line_42 $$ maxTagNameLengthTags.addAll(customTagNames)[ FD ]
Line_67 $$ String elementName = element.elementText("name")-->Line_90 $$ elementName = element.elementText("name")[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_63 $$ comment = commentElement.getText()-->Line_78 $$ sb.append(comment)[ FD ]
Line_14 $$ comment = element.getText()-->Line_81 $$ sb.append(comment)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_21 $$ requiredTagNames.add(tagName)[ FD ]
Line_76 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) -->Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ CD ]
Line_39 $$ if (!requiredTagNames.isEmpty()) -->Line_42 $$ maxTagNameLengthTags.addAll(customTagNames)[ CD ]
Line_65 $$ comment = element.getText()-->Line_68 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_67 $$ String elementName = element.elementText("name")-->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_25 $$ requiredTagNames.add(tagName)[ FD ]
Line_17 $$ if (Validator.isNotNull(comment)) -->Line_19 $$ if (tagName.equals("param")) [ CD ]
Line_75 $$ if (_updateJavadocs && publicAccess) -->Line_76 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) [ CD ]
Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_81 $$ sb.append(comment)[ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_18 $$ requiredTagNames.add(tagName)[ FD ]
Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_81 $$ sb.append(comment)[ FD ]
Line_88 $$ if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) -->Line_89 $$ if (GetterUtil.getBoolean(element.elementText("required"))) [ CD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_100 $$ return sb.toString()[ CD ]
Line_10 $$ String comment = null-->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_56 $$ StringBundler sb = new StringBundler()[ CD ]
Line_10 $$ String comment = null-->Line_74 $$ sb.append(comment)[ FD ]
Line_14 $$ comment = element.getText()-->Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_78 $$ sb.append(comment)[ FD ]
Line_67 $$ String elementName = element.elementText("name")-->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_89 $$ if (GetterUtil.getBoolean(element.elementText("required"))) -->Line_90 $$ elementName = element.elementText("name")[ CD ]
Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_92 $$ sb.append(comment)[ FD ]
Line_8 $$ for (Element element : elements) -->Line_65 $$ comment = element.getText()[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_87 $$ sb.append(comment)[ FD ]
Line_89 $$ if (GetterUtil.getBoolean(element.elementText("required"))) -->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ CD ]
Line_10 $$ String comment = null-->Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_8 $$ for (Element element : elements) -->Line_67 $$ String elementName = element.elementText("name")[ FD ]
Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_4 $$ List<String> customTagNames = new ArrayList()[ CD ]
Line_35 $$ List<String> maxTagNameLengthTags = new ArrayList()-->Line_43 $$ maxTagNameLengthTags.addAll(requiredTagNames)[ FD ]
Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_63 $$ comment = commentElement.getText()-->Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_74 $$ sb.append(comment)[ FD ]
Line_16 $$ if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) -->Line_17 $$ if (Validator.isNotNull(comment)) [ CD ]
Line_63 $$ comment = commentElement.getText()-->Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_39 $$ if (!requiredTagNames.isEmpty()) -->Line_43 $$ maxTagNameLengthTags.addAll(requiredTagNames)[ CD ]
Line_6 $$ for (String tagName : tagNames) -->Line_18 $$ requiredTagNames.add(tagName)[ FD ]
Line_68 $$ if (Validator.isNotNull(comment)) -->Line_70 $$ sb.append(comment)[ CD ]
Line_38 $$ if (_updateJavadocs) -->Line_39 $$ if (!requiredTagNames.isEmpty()) [ CD ]
Line_8 $$ for (Element element : elements) -->Line_60 $$ Element commentElement = element.element("comment")[ FD ]
Line_65 $$ comment = element.getText()-->Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_74 $$ sb.append(comment)[ FD ]
Line_14 $$ comment = element.getText()-->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_88 $$ if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) [ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_10 $$ String comment = null-->Line_68 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_79 $$ if (!requiredTagNames.isEmpty()) [ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_43 $$ maxTagNameLengthTags.addAll(requiredTagNames)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_100 $$ return sb.toString()[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_70 $$ sb.append(comment)[ FD ]
Line_4 $$ List<String> customTagNames = new ArrayList()-->Line_29 $$ customTagNames.add(tagName)[ FD ]
Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_87 $$ sb.append(comment)[ FD ]
Line_4 $$ List<String> customTagNames = new ArrayList()-->Line_46 $$ maxTagNameLengthTags.addAll(customTagNames)[ FD ]
Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_92 $$ sb.append(comment)[ FD ]
Line_14 $$ comment = element.getText()-->Line_17 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_65 $$ comment = element.getText()-->Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_19 $$ if (tagName.equals("param")) -->Line_23 $$ if (tagName.equals("throws")) [ CD ]
Line_10 $$ String comment = null-->Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_21 $$ requiredTagNames.add(tagName)[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_67 $$ String elementName = element.elementText("name")-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_65 $$ comment = element.getText()-->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_10 $$ String comment = null-->Line_14 $$ comment = element.getText()[ FD ]
Line_63 $$ comment = commentElement.getText()-->Line_92 $$ sb.append(comment)[ FD ]
Line_36 $$ if (_initializeMissingJavadocs) -->Line_37 $$ maxTagNameLengthTags.addAll(allTagNames)[ CD ]
Line_65 $$ comment = element.getText()-->Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_10 $$ String comment = null-->Line_78 $$ sb.append(comment)[ FD ]
Line_63 $$ comment = commentElement.getText()-->Line_81 $$ sb.append(comment)[ FD ]
Line_11 $$ if (commentElement != null) -->Line_14 $$ comment = element.getText()[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_92 $$ sb.append(comment)[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_87 $$ sb.append(comment)[ FD ]
Line_63 $$ comment = commentElement.getText()-->Line_87 $$ sb.append(comment)[ FD ]
Line_65 $$ comment = element.getText()-->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_49 $$ for (String name : maxTagNameLengthTags) -->Line_50 $$ if (name.length() > maxTagNameLength) [ FD ]
Line_14 $$ comment = element.getText()-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_14 $$ comment = element.getText()-->Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_8 $$ for (Element element : elements) -->Line_24 $$ if (GetterUtil.getBoolean(element.elementText("required"))) [ FD ]
Line_14 $$ comment = element.getText()-->Line_63 $$ comment = commentElement.getText()[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_39 $$ if (!requiredTagNames.isEmpty()) [ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_78 $$ sb.append(comment)[ FD ]
Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_78 $$ sb.append(comment)[ FD ]
Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_87 $$ sb.append(comment)[ FD ]
Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_55 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)[ CD ]
Line_55 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)-->Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_35 $$ List<String> maxTagNameLengthTags = new ArrayList()-->Line_47 $$ maxTagNameLengthTags.addAll(requiredTagNames)[ FD ]
Line_85 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) -->Line_88 $$ if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) [ CD ]
Line_63 $$ comment = commentElement.getText()-->Line_65 $$ comment = element.getText()[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_17 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_76 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) -->Line_78 $$ sb.append(comment)[ CD ]
Line_6 $$ for (String tagName : tagNames) -->Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_67 $$ String elementName = element.elementText("name")-->Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_49 $$ for (String name : maxTagNameLengthTags) -->Line_51 $$ maxTagNameLength = name.length()[ FD ]
Line_14 $$ comment = element.getText()-->Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_65 $$ comment = element.getText()-->Line_81 $$ sb.append(comment)[ FD ]
Line_10 $$ String comment = null-->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_92 $$ sb.append(comment)[ FD ]
Line_10 $$ String comment = null-->Line_92 $$ sb.append(comment)[ FD ]
Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_81 $$ sb.append(comment)[ FD ]
Line_8 $$ for (Element element : elements) -->Line_89 $$ if (GetterUtil.getBoolean(element.elementText("required"))) [ FD ]
Line_55 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)-->Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_14 $$ comment = element.getText()-->Line_70 $$ sb.append(comment)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_3 $$ List<String> allTagNames = new ArrayList()[ CD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_7 $$ List<Element> elements = parentElement.elements(tagName)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_17 $$ if (Validator.isNotNull(comment)) -->Line_18 $$ requiredTagNames.add(tagName)[ CD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_75 $$ if (_updateJavadocs && publicAccess) [ FD ]
Line_8 $$ for (Element element : elements) -->Line_9 $$ Element commentElement = element.element("comment")[ FD ]
Line_3 $$ List<String> allTagNames = new ArrayList()-->Line_37 $$ maxTagNameLengthTags.addAll(allTagNames)[ FD ]
Line_85 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) -->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ CD ]
Line_8 $$ for (Element element : elements) -->Line_90 $$ elementName = element.elementText("name")[ FD ]
Line_38 $$ if (_updateJavadocs) -->Line_46 $$ maxTagNameLengthTags.addAll(customTagNames)[ CD ]
Line_65 $$ comment = element.getText()-->Line_92 $$ sb.append(comment)[ FD ]
Line_9 $$ Element commentElement = element.element("comment")-->Line_12 $$ comment = commentElement.getText()[ FD ]
Line_50 $$ if (name.length() > maxTagNameLength) -->Line_51 $$ maxTagNameLength = name.length()[ CD ]
Line_14 $$ comment = element.getText()-->Line_78 $$ sb.append(comment)[ FD ]
Line_19 $$ if (tagName.equals("param")) -->Line_20 $$ if (GetterUtil.getBoolean(element.elementText("required"))) [ CD ]
Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_87 $$ sb.append(comment)[ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_47 $$ maxTagNameLengthTags.addAll(requiredTagNames)[ FD ]
Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_36 $$ if (_initializeMissingJavadocs) [ CD ]
Line_10 $$ String comment = null-->Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_62 $$ if (commentElement != null) -->Line_65 $$ comment = element.getText()[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_70 $$ sb.append(comment)[ FD ]
Line_10 $$ String comment = null-->Line_17 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_74 $$ sb.append(comment)[ FD ]
Line_14 $$ comment = element.getText()-->Line_68 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_63 $$ comment = commentElement.getText()-->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_34 $$ int maxTagNameLength = 0[ CD ]
Line_72 $$ if (_initializeMissingJavadocs && publicAccess) -->Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ CD ]
Line_14 $$ comment = element.getText()-->Line_87 $$ sb.append(comment)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_35 $$ List<String> maxTagNameLengthTags = new ArrayList()[ CD ]
Line_12 $$ comment = commentElement.getText()-->Line_14 $$ comment = element.getText()[ FD ]
Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_69 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_65 $$ comment = element.getText()[ FD ]
Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_81 $$ sb.append(comment)[ FD ]
Line_8 $$ for (Element element : elements) -->Line_14 $$ comment = element.getText()[ FD ]
Line_36 $$ if (_initializeMissingJavadocs) -->Line_38 $$ if (_updateJavadocs) [ CD ]
Line_11 $$ if (commentElement != null) -->Line_12 $$ comment = commentElement.getText()[ CD ]
Line_63 $$ comment = commentElement.getText()-->Line_74 $$ sb.append(comment)[ FD ]
Line_65 $$ comment = element.getText()-->Line_74 $$ sb.append(comment)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_54 $$ maxTagNameLength += 2[ CD ]
Line_90 $$ elementName = element.elementText("name")-->Line_91 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_58 $$ List<Element> elements = parentElement.elements(tagName)[ FD ]
Line_12 $$ comment = commentElement.getText()-->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_81 $$ sb.append(comment)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_58 $$ List<Element> elements = parentElement.elements(tagName)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_63 $$ comment = commentElement.getText()-->Line_86 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_35 $$ List<String> maxTagNameLengthTags = new ArrayList()-->Line_46 $$ maxTagNameLengthTags.addAll(customTagNames)[ FD ]
Line_65 $$ comment = element.getText()-->Line_70 $$ sb.append(comment)[ FD ]
Line_20 $$ if (GetterUtil.getBoolean(element.elementText("required"))) -->Line_21 $$ requiredTagNames.add(tagName)[ CD ]
Line_6 $$ for (String tagName : tagNames) -->Line_31 $$ allTagNames.add(tagName)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_85 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) [ FD ]
Line_80 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_92 $$ sb.append(comment)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_16 $$ if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) [ FD ]
Line_10 $$ String comment = null-->Line_70 $$ sb.append(comment)[ FD ]
Line_14 $$ comment = element.getText()-->Line_74 $$ sb.append(comment)[ FD ]
Line_73 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_77 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_72 $$ if (_initializeMissingJavadocs && publicAccess) -->Line_74 $$ sb.append(comment)[ CD ]
Line_35 $$ List<String> maxTagNameLengthTags = new ArrayList()-->Line_37 $$ maxTagNameLengthTags.addAll(allTagNames)[ FD ]
Line_63 $$ comment = commentElement.getText()-->Line_68 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_63 $$ comment = commentElement.getText()-->Line_70 $$ sb.append(comment)[ FD ]
