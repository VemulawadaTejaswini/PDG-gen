Line_7 $$ List<Bundle> bundles = new ArrayList()-->Line_8 $$ bundles.add(new Bundle())[ FD ]
Line_16 $$ final PluginInfo info-->Line_23 $$ if (info.isJvm()) [ FD ]
Line_2 $$ static List<Bundle> getPluginBundles(Path pluginsDirectory) throws IOException -->Line_9 $$ try (DirectoryStream<Path> stream = Files.newDirectoryStream(pluginsDirectory)) [ FD ]
Line_2 $$ static List<Bundle> getPluginBundles(Path pluginsDirectory) throws IOException -->Line_41 $$ return bundles[ CD ]
Line_18 $$ info = PluginInfo.readFromProperties(plugin)-->Line_23 $$ if (info.isJvm()) [ FD ]
Line_16 $$ final PluginInfo info-->Line_37 $$ bundle.plugins.add(info)[ FD ]
Line_31 $$ if (info.isJvm() && info.isIsolated() == false) -->Line_32 $$ bundle = bundles.get(0)[ CD ]
Line_10 $$ for (Path plugin : stream) -->Line_18 $$ info = PluginInfo.readFromProperties(plugin)[ FD ]
Line_31 $$ if (info.isJvm() && info.isIsolated() == false) -->Line_35 $$ bundles.add(bundle)[ CD ]
Line_7 $$ List<Bundle> bundles = new ArrayList()-->Line_35 $$ bundles.add(bundle)[ FD ]
Line_2 $$ static List<Bundle> getPluginBundles(Path pluginsDirectory) throws IOException -->Line_4 $$ if (!isAccessibleDirectory(pluginsDirectory, logger)) [ FD ]
Line_3 $$ ESLogger logger = Loggers.getLogger(PluginsService.class)-->Line_12 $$ logger.trace("--- skip hidden plugin file[[ FD ]
Line_3 $$ ESLogger logger = Loggers.getLogger(PluginsService.class)-->Line_4 $$ if (!isAccessibleDirectory(pluginsDirectory, logger)) [ FD ]
Line_2 $$ static List<Bundle> getPluginBundles(Path pluginsDirectory) throws IOException -->Line_7 $$ List<Bundle> bundles = new ArrayList()[ CD ]
Line_32 $$ bundle = bundles.get(0)-->Line_34 $$ bundle = new Bundle()[ FD ]
Line_2 $$ static List<Bundle> getPluginBundles(Path pluginsDirectory) throws IOException -->Line_3 $$ ESLogger logger = Loggers.getLogger(PluginsService.class)[ CD ]
Line_18 $$ info = PluginInfo.readFromProperties(plugin)-->Line_31 $$ if (info.isJvm() && info.isIsolated() == false) [ FD ]
Line_7 $$ List<Bundle> bundles = new ArrayList()-->Line_32 $$ bundle = bundles.get(0)[ FD ]
Line_10 $$ for (Path plugin : stream) -->Line_15 $$ logger.trace("--- adding plugin [[ FD ]
Line_16 $$ final PluginInfo info-->Line_31 $$ if (info.isJvm() && info.isIsolated() == false) [ FD ]
Line_30 $$ final Bundle bundle-->Line_35 $$ bundles.add(bundle)[ FD ]
Line_2 $$ static List<Bundle> getPluginBundles(Path pluginsDirectory) throws IOException -->Line_4 $$ if (!isAccessibleDirectory(pluginsDirectory, logger)) [ CD ]
Line_16 $$ final PluginInfo info-->Line_18 $$ info = PluginInfo.readFromProperties(plugin)[ FD ]
Line_25 $$ for (Path jar : jarStream) -->Line_26 $$ urls.add(jar.toRealPath().toUri().toURL())[ FD ]
Line_18 $$ info = PluginInfo.readFromProperties(plugin)-->Line_37 $$ bundle.plugins.add(info)[ FD ]
Line_10 $$ for (Path plugin : stream) -->Line_20 $$ throw new IllegalStateException("Could not load plugin descriptor for existing plugin [" + plugin.getFileName() + "]. Was the plugin built before 2.0?", e)[ FD ]
Line_4 $$ if (!isAccessibleDirectory(pluginsDirectory, logger)) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_32 $$ bundle = bundles.get(0)-->Line_35 $$ bundles.add(bundle)[ FD ]
Line_3 $$ ESLogger logger = Loggers.getLogger(PluginsService.class)-->Line_15 $$ logger.trace("--- adding plugin [[ FD ]
Line_34 $$ bundle = new Bundle()-->Line_35 $$ bundles.add(bundle)[ FD ]
Line_30 $$ final Bundle bundle-->Line_32 $$ bundle = bundles.get(0)[ FD ]
Line_22 $$ List<URL> urls = new ArrayList()-->Line_26 $$ urls.add(jar.toRealPath().toUri().toURL())[ FD ]
Line_10 $$ for (Path plugin : stream) -->Line_11 $$ if (FileSystemUtils.isHidden(plugin)) [ FD ]
Line_31 $$ if (info.isJvm() && info.isIsolated() == false) -->Line_34 $$ bundle = new Bundle()[ CD ]
Line_22 $$ List<URL> urls = new ArrayList()-->Line_38 $$ bundle.urls.addAll(urls)[ FD ]
Line_10 $$ for (Path plugin : stream) -->Line_24 $$ try (DirectoryStream<Path> jarStream = Files.newDirectoryStream(plugin, "*.jar")) [ FD ]
Line_11 $$ if (FileSystemUtils.isHidden(plugin)) -->Line_12 $$ logger.trace("--- skip hidden plugin file[[ CD ]
Line_30 $$ final Bundle bundle-->Line_34 $$ bundle = new Bundle()[ FD ]
Line_2 $$ static List<Bundle> getPluginBundles(Path pluginsDirectory) throws IOException -->Line_8 $$ bundles.add(new Bundle())[ CD ]
Line_10 $$ for (Path plugin : stream) -->Line_12 $$ logger.trace("--- skip hidden plugin file[[ FD ]
