Line_15 $$ if (jobStart < 0) -->Line_18 $$ jobFinish = jobFinish - jobStart[ CD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_5 $$ long jobFinish = (Long) rumenJob.get("finishTime")[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_30 $$ tasks.addAll(maps)[ CD ]
Line_8 $$ String user = rumenJob.get("user").toString()-->Line_26 $$ json.put("job.user", user)[ FD ]
Line_6 $$ String jobId = rumenJob.get("jobID").toString()-->Line_25 $$ json.put("job.id", jobId)[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_21 $$ json.put("am.type", "mapreduce")[ CD ]
Line_15 $$ if (jobStart < 0) -->Line_16 $$ System.out.println("Warning: reset job " + jobId + " start time to 0.")[ CD ]
Line_4 $$ long jobStart = (Long) rumenJob.get("submitTime")-->Line_19 $$ jobStart = 0[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_32 $$ json.put("job.tasks", tasks)[ CD ]
Line_27 $$ List maps = createSLSTasks("map", (List) rumenJob.get("mapTasks"), offset)-->Line_30 $$ tasks.addAll(maps)[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_7 $$ String queue = rumenJob.get("queue").toString()[ FD ]
Line_29 $$ List tasks = new ArrayList()-->Line_32 $$ json.put("job.tasks", tasks)[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_28 $$ List reduces = createSLSTasks("reduce", (List) rumenJob.get("reduceTasks"), offset)[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_31 $$ tasks.addAll(reduces)[ CD ]
Line_13 $$ jobFinish -= baseline-->Line_23 $$ json.put("job.end.ms", jobFinish)[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_29 $$ List tasks = new ArrayList()[ CD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_28 $$ List reduces = createSLSTasks("reduce", (List) rumenJob.get("reduceTasks"), offset)[ CD ]
Line_14 $$ long offset = 0-->Line_17 $$ offset = -jobStart[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_8 $$ String user = rumenJob.get("user").toString()[ FD ]
Line_3 $$ Map json = new LinkedHashMap()-->Line_24 $$ json.put("job.queue.name", queue)[ FD ]
Line_14 $$ long offset = 0-->Line_28 $$ List reduces = createSLSTasks("reduce", (List) rumenJob.get("reduceTasks"), offset)[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_4 $$ long jobStart = (Long) rumenJob.get("submitTime")[ CD ]
Line_15 $$ if (jobStart < 0) -->Line_17 $$ offset = -jobStart[ CD ]
Line_3 $$ Map json = new LinkedHashMap()-->Line_23 $$ json.put("job.end.ms", jobFinish)[ FD ]
Line_5 $$ long jobFinish = (Long) rumenJob.get("finishTime")-->Line_23 $$ json.put("job.end.ms", jobFinish)[ FD ]
Line_4 $$ long jobStart = (Long) rumenJob.get("submitTime")-->Line_17 $$ offset = -jobStart[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_27 $$ List maps = createSLSTasks("map", (List) rumenJob.get("mapTasks"), offset)[ CD ]
Line_17 $$ offset = -jobStart-->Line_27 $$ List maps = createSLSTasks("map", (List) rumenJob.get("mapTasks"), offset)[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_12 $$ jobStart -= baseline[ CD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_27 $$ List maps = createSLSTasks("map", (List) rumenJob.get("mapTasks"), offset)[ FD ]
Line_29 $$ List tasks = new ArrayList()-->Line_31 $$ tasks.addAll(reduces)[ FD ]
Line_3 $$ Map json = new LinkedHashMap()-->Line_32 $$ json.put("job.tasks", tasks)[ FD ]
Line_19 $$ jobStart = 0-->Line_22 $$ json.put("job.start.ms", jobStart)[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_15 $$ if (jobStart < 0) [ CD ]
Line_4 $$ long jobStart = (Long) rumenJob.get("submitTime")-->Line_15 $$ if (jobStart < 0) [ FD ]
Line_4 $$ long jobStart = (Long) rumenJob.get("submitTime")-->Line_18 $$ jobFinish = jobFinish - jobStart[ FD ]
Line_15 $$ if (jobStart < 0) -->Line_19 $$ jobStart = 0[ CD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_8 $$ String user = rumenJob.get("user").toString()[ CD ]
Line_12 $$ jobStart -= baseline-->Line_17 $$ offset = -jobStart[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_7 $$ String queue = rumenJob.get("queue").toString()[ CD ]
Line_3 $$ Map json = new LinkedHashMap()-->Line_25 $$ json.put("job.id", jobId)[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_9 $$ if (baseline == 0) [ CD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_26 $$ json.put("job.user", user)[ CD ]
Line_5 $$ long jobFinish = (Long) rumenJob.get("finishTime")-->Line_18 $$ jobFinish = jobFinish - jobStart[ FD ]
Line_12 $$ jobStart -= baseline-->Line_18 $$ jobFinish = jobFinish - jobStart[ FD ]
Line_14 $$ long offset = 0-->Line_27 $$ List maps = createSLSTasks("map", (List) rumenJob.get("mapTasks"), offset)[ FD ]
Line_12 $$ jobStart -= baseline-->Line_15 $$ if (jobStart < 0) [ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_4 $$ long jobStart = (Long) rumenJob.get("submitTime")[ FD ]
Line_12 $$ jobStart -= baseline-->Line_19 $$ jobStart = 0[ FD ]
Line_29 $$ List tasks = new ArrayList()-->Line_30 $$ tasks.addAll(maps)[ FD ]
Line_13 $$ jobFinish -= baseline-->Line_18 $$ jobFinish = jobFinish - jobStart[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_22 $$ json.put("job.start.ms", jobStart)[ CD ]
Line_3 $$ Map json = new LinkedHashMap()-->Line_22 $$ json.put("job.start.ms", jobStart)[ FD ]
Line_3 $$ Map json = new LinkedHashMap()-->Line_26 $$ json.put("job.user", user)[ FD ]
Line_17 $$ offset = -jobStart-->Line_28 $$ List reduces = createSLSTasks("reduce", (List) rumenJob.get("reduceTasks"), offset)[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_6 $$ String jobId = rumenJob.get("jobID").toString()[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_5 $$ long jobFinish = (Long) rumenJob.get("finishTime")[ CD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_25 $$ json.put("job.id", jobId)[ CD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_3 $$ Map json = new LinkedHashMap()[ CD ]
Line_4 $$ long jobStart = (Long) rumenJob.get("submitTime")-->Line_12 $$ jobStart -= baseline[ FD ]
Line_4 $$ long jobStart = (Long) rumenJob.get("submitTime")-->Line_22 $$ json.put("job.start.ms", jobStart)[ FD ]
Line_28 $$ List reduces = createSLSTasks("reduce", (List) rumenJob.get("reduceTasks"), offset)-->Line_31 $$ tasks.addAll(reduces)[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_23 $$ json.put("job.end.ms", jobFinish)[ CD ]
Line_7 $$ String queue = rumenJob.get("queue").toString()-->Line_24 $$ json.put("job.queue.name", queue)[ FD ]
Line_3 $$ Map json = new LinkedHashMap()-->Line_21 $$ json.put("am.type", "mapreduce")[ FD ]
Line_5 $$ long jobFinish = (Long) rumenJob.get("finishTime")-->Line_13 $$ jobFinish -= baseline[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_24 $$ json.put("job.queue.name", queue)[ CD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_6 $$ String jobId = rumenJob.get("jobID").toString()[ CD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_14 $$ long offset = 0[ CD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_13 $$ jobFinish -= baseline[ CD ]
Line_18 $$ jobFinish = jobFinish - jobStart-->Line_23 $$ json.put("job.end.ms", jobFinish)[ FD ]
Line_12 $$ jobStart -= baseline-->Line_22 $$ json.put("job.start.ms", jobStart)[ FD ]
Line_2 $$ private static Map createSLSJob(Map rumenJob) -->Line_33 $$ return json[ CD ]
