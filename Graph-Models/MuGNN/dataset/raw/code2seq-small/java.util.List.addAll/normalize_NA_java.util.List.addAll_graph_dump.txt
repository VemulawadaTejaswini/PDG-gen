Line_2 $$ public static <T extends RingPosition<T>> List<Range<T>> normalize(Collection<Range<T>> ranges) -->Line_5 $$ Collections.sort(output, new Comparator<Range<T>>() [ CD ]
Line_3 $$ List<Range<T>> output = new ArrayList<Range<T>>(ranges.size())-->Line_5 $$ Collections.sort(output, new Comparator<Range<T>>() [ FD ]
Line_2 $$ public static <T extends RingPosition<T>> List<Range<T>> normalize(Collection<Range<T>> ranges) -->Line_3 $$ List<Range<T>> output = new ArrayList<Range<T>>(ranges.size())[ CD ]
Line_2 $$ public static <T extends RingPosition<T>> List<Range<T>> normalize(Collection<Range<T>> ranges) -->Line_10 $$ return deoverlap(output)[ CD ]
Line_3 $$ List<Range<T>> output = new ArrayList<Range<T>>(ranges.size())-->Line_4 $$ output.addAll(range.unwrap())[ FD ]
Line_2 $$ public static <T extends RingPosition<T>> List<Range<T>> normalize(Collection<Range<T>> ranges) -->Line_3 $$ List<Range<T>> output = new ArrayList<Range<T>>(ranges.size())[ FD ]
Line_5 $$ Collections.sort(output, new Comparator<Range<T>>() -->Line_7 $$ return b1.left.compareTo(b2.left)[ CD ]
Line_3 $$ List<Range<T>> output = new ArrayList<Range<T>>(ranges.size())-->Line_10 $$ return deoverlap(output)[ FD ]
