Line_2 $$ public <B extends XBreakpoint<?>> Collection<? extends B> getBreakpoints(@NotNull final XBreakpointType<B, ?> type) -->Line_7 $$ if (defaultBreakpoint == null)[ CD ]
Line_2 $$ public <B extends XBreakpoint<?>> Collection<? extends B> getBreakpoints(@NotNull final XBreakpointType<B, ?> type) -->Line_5 $$ Collection<? extends B> regular = breakpoints != null ? Collections.unmodifiableCollection((Collection<? extends B>) breakpoints) : Collections.<B>emptyList()[ CD ]
Line_2 $$ public <B extends XBreakpoint<?>> Collection<? extends B> getBreakpoints(@NotNull final XBreakpointType<B, ?> type) -->Line_11 $$ result.addAll(regular)[ CD ]
Line_5 $$ Collection<? extends B> regular = breakpoints != null ? Collections.unmodifiableCollection((Collection<? extends B>) breakpoints) : Collections.<B>emptyList()-->Line_7 $$ if (defaultBreakpoint == null)[ FD ]
Line_7 $$ if (defaultBreakpoint == null)-->Line_8 $$ return regular[ CD ]
Line_2 $$ public <B extends XBreakpoint<?>> Collection<? extends B> getBreakpoints(@NotNull final XBreakpointType<B, ?> type) -->Line_6 $$ final XBreakpointBase<?, ?, ?> defaultBreakpoint = myDefaultBreakpoints.get(type)[ FD ]
Line_2 $$ public <B extends XBreakpoint<?>> Collection<? extends B> getBreakpoints(@NotNull final XBreakpointType<B, ?> type) -->Line_4 $$ Collection<? extends XBreakpointBase<?, ?, ?>> breakpoints = myBreakpoints.get(type)[ FD ]
Line_2 $$ public <B extends XBreakpoint<?>> Collection<? extends B> getBreakpoints(@NotNull final XBreakpointType<B, ?> type) -->Line_3 $$ ApplicationManager.getApplication().assertReadAccessAllowed()[ CD ]
Line_6 $$ final XBreakpointBase<?, ?, ?> defaultBreakpoint = myDefaultBreakpoints.get(type)-->Line_7 $$ if (defaultBreakpoint == null)[ FD ]
Line_2 $$ public <B extends XBreakpoint<?>> Collection<? extends B> getBreakpoints(@NotNull final XBreakpointType<B, ?> type) -->Line_9 $$ List<B> result = new ArrayList<B>()[ CD ]
Line_2 $$ public <B extends XBreakpoint<?>> Collection<? extends B> getBreakpoints(@NotNull final XBreakpointType<B, ?> type) -->Line_10 $$ result.add((B) defaultBreakpoint)[ CD ]
Line_5 $$ Collection<? extends B> regular = breakpoints != null ? Collections.unmodifiableCollection((Collection<? extends B>) breakpoints) : Collections.<B>emptyList()-->Line_11 $$ result.addAll(regular)[ FD ]
Line_2 $$ public <B extends XBreakpoint<?>> Collection<? extends B> getBreakpoints(@NotNull final XBreakpointType<B, ?> type) -->Line_12 $$ return result[ CD ]
Line_2 $$ public <B extends XBreakpoint<?>> Collection<? extends B> getBreakpoints(@NotNull final XBreakpointType<B, ?> type) -->Line_6 $$ final XBreakpointBase<?, ?, ?> defaultBreakpoint = myDefaultBreakpoints.get(type)[ CD ]
Line_9 $$ List<B> result = new ArrayList<B>()-->Line_10 $$ result.add((B) defaultBreakpoint)[ FD ]
Line_2 $$ public <B extends XBreakpoint<?>> Collection<? extends B> getBreakpoints(@NotNull final XBreakpointType<B, ?> type) -->Line_4 $$ Collection<? extends XBreakpointBase<?, ?, ?>> breakpoints = myBreakpoints.get(type)[ CD ]
Line_9 $$ List<B> result = new ArrayList<B>()-->Line_11 $$ result.addAll(regular)[ FD ]
