Line_8 $$ String listenerClassName = buildSafeClassName(listener.attributeValue("class"), packageName)-->Line_10 $$ if ("entity-listener".equals(classOverriding.get(listenerClassName).getName())) [ FD ]
Line_2 $$ private List<String> addEntityListenerClasses(Element element, String packageName, List<String> addedClasses) -->Line_20 $$ LOG.debugf("Adding XML overriding information for listeners: %s", localAddedClasses)[ CD ]
Line_5 $$ if (listeners != null) -->Line_6 $$ List<Element> elements = listeners.elements("entity-listener")[ CD ]
Line_2 $$ private List<String> addEntityListenerClasses(Element element, String packageName, List<String> addedClasses) -->Line_21 $$ addedClasses.addAll(localAddedClasses)[ FD ]
Line_2 $$ private List<String> addEntityListenerClasses(Element element, String packageName, List<String> addedClasses) -->Line_5 $$ if (listeners != null) [ CD ]
Line_3 $$ List<String> localAddedClasses = new ArrayList<String>()-->Line_20 $$ LOG.debugf("Adding XML overriding information for listeners: %s", localAddedClasses)[ FD ]
Line_3 $$ List<String> localAddedClasses = new ArrayList<String>()-->Line_16 $$ localAddedClasses.add(listenerClassName)[ FD ]
Line_7 $$ for (Element listener : elements) -->Line_8 $$ String listenerClassName = buildSafeClassName(listener.attributeValue("class"), packageName)[ FD ]
Line_2 $$ private List<String> addEntityListenerClasses(Element element, String packageName, List<String> addedClasses) -->Line_4 $$ Element listeners = element.element("entity-listeners")[ FD ]
Line_8 $$ String listenerClassName = buildSafeClassName(listener.attributeValue("class"), packageName)-->Line_16 $$ localAddedClasses.add(listenerClassName)[ FD ]
Line_8 $$ String listenerClassName = buildSafeClassName(listener.attributeValue("class"), packageName)-->Line_17 $$ classOverriding.put(listenerClassName, listener)[ FD ]
Line_2 $$ private List<String> addEntityListenerClasses(Element element, String packageName, List<String> addedClasses) -->Line_3 $$ List<String> localAddedClasses = new ArrayList<String>()[ CD ]
Line_3 $$ List<String> localAddedClasses = new ArrayList<String>()-->Line_21 $$ addedClasses.addAll(localAddedClasses)[ FD ]
Line_9 $$ if (classOverriding.containsKey(listenerClassName)) -->Line_10 $$ if ("entity-listener".equals(classOverriding.get(listenerClassName).getName())) [ CD ]
Line_8 $$ String listenerClassName = buildSafeClassName(listener.attributeValue("class"), packageName)-->Line_11 $$ LOG.duplicateListener(listenerClassName)[ FD ]
Line_7 $$ for (Element listener : elements) -->Line_17 $$ classOverriding.put(listenerClassName, listener)[ FD ]
Line_8 $$ String listenerClassName = buildSafeClassName(listener.attributeValue("class"), packageName)-->Line_9 $$ if (classOverriding.containsKey(listenerClassName)) [ FD ]
Line_4 $$ Element listeners = element.element("entity-listeners")-->Line_5 $$ if (listeners != null) [ FD ]
Line_2 $$ private List<String> addEntityListenerClasses(Element element, String packageName, List<String> addedClasses) -->Line_4 $$ Element listeners = element.element("entity-listeners")[ CD ]
Line_2 $$ private List<String> addEntityListenerClasses(Element element, String packageName, List<String> addedClasses) -->Line_8 $$ String listenerClassName = buildSafeClassName(listener.attributeValue("class"), packageName)[ FD ]
Line_2 $$ private List<String> addEntityListenerClasses(Element element, String packageName, List<String> addedClasses) -->Line_21 $$ addedClasses.addAll(localAddedClasses)[ CD ]
Line_2 $$ private List<String> addEntityListenerClasses(Element element, String packageName, List<String> addedClasses) -->Line_22 $$ return localAddedClasses[ CD ]
Line_10 $$ if ("entity-listener".equals(classOverriding.get(listenerClassName).getName())) -->Line_11 $$ LOG.duplicateListener(listenerClassName)[ CD ]
Line_4 $$ Element listeners = element.element("entity-listeners")-->Line_6 $$ List<Element> elements = listeners.elements("entity-listener")[ FD ]
