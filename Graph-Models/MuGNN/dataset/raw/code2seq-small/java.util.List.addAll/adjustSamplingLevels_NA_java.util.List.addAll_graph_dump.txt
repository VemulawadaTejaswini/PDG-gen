Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_55 $$ transactions.get(sstable.metadata.cfId).cancel(sstable)[ FD ]
Line_47 $$ if (targetNumEntries < currentNumEntries * DOWNSAMPLE_THESHOLD && newSamplingLevel < currentSamplingLevel) -->Line_54 $$ newSSTables.add(sstable)[ CD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_3 $$ List<ResampleEntry> toDownsample = new ArrayList(sstables.size() / 4)[ FD ]
Line_25 $$ currentSamplingLevel = effectiveSamplingLevel-->Line_27 $$ int newSamplingLevel = IndexSummaryBuilder.calculateSamplingLevel(currentSamplingLevel, currentNumEntries, targetNumEntries, minIndexInterval, maxIndexInterval)[ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_29 $$ double effectiveIndexInterval = sstable.getEffectiveIndexInterval()[ FD ]
Line_31 $$ if (effectiveIndexInterval < minIndexInterval) -->Line_33 $$ long spaceUsed = (long) Math.ceil(avgEntrySize * numEntriesAtNewSamplingLevel)[ CD ]
Line_61 $$ toDownsample = result.right-->Line_65 $$ toDownsample.addAll(forceResample)[ FD ]
Line_21 $$ if (sstable.getMinIndexInterval() != minIndexInterval) -->Line_25 $$ currentSamplingLevel = effectiveSamplingLevel[ CD ]
Line_16 $$ int currentNumEntries = sstable.getIndexSummarySize()-->Line_27 $$ int newSamplingLevel = IndexSummaryBuilder.calculateSamplingLevel(currentSamplingLevel, currentNumEntries, targetNumEntries, minIndexInterval, maxIndexInterval)[ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_53 $$ remainingSpace -= sstable.getIndexSummaryOffHeapSize()[ FD ]
Line_12 $$ int minIndexInterval = sstable.metadata.params.minIndexInterval-->Line_21 $$ if (sstable.getMinIndexInterval() != minIndexInterval) [ FD ]
Line_3 $$ List<ResampleEntry> toDownsample = new ArrayList(sstables.size() / 4)-->Line_66 $$ toDownsample.addAll(toUpsample)[ FD ]
Line_4 $$ List<ResampleEntry> toUpsample = new ArrayList(sstables.size() / 4)-->Line_45 $$ toUpsample.add(new ResampleEntry(sstable, spaceUsed, newSamplingLevel))[ FD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_66 $$ toDownsample.addAll(toUpsample)[ CD ]
Line_29 $$ double effectiveIndexInterval = sstable.getEffectiveIndexInterval()-->Line_31 $$ if (effectiveIndexInterval < minIndexInterval) [ FD ]
Line_31 $$ if (effectiveIndexInterval < minIndexInterval) -->Line_36 $$ if (effectiveIndexInterval > maxIndexInterval) [ CD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_6 $$ List<ResampleEntry> forceUpsample = new ArrayList()[ CD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_65 $$ toDownsample.addAll(forceResample)[ CD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_24 $$ logger.trace("min_index_interval changed from [ FD ]
Line_27 $$ int newSamplingLevel = IndexSummaryBuilder.calculateSamplingLevel(currentSamplingLevel, currentNumEntries, targetNumEntries, minIndexInterval, maxIndexInterval)-->Line_28 $$ int numEntriesAtNewSamplingLevel = IndexSummaryBuilder.entriesAtSamplingLevel(newSamplingLevel, maxSummarySize)[ FD ]
Line_13 $$ int maxIndexInterval = sstable.metadata.params.maxIndexInterval-->Line_37 $$ logger.trace("Forcing upsample of [ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_74 $$ SSTableReader replacement = sstable.cloneWithNewSummarySamplingLevel(cfs, entry.newSamplingLevel)[ FD ]
Line_6 $$ List<ResampleEntry> forceUpsample = new ArrayList()-->Line_41 $$ forceUpsample.add(new ResampleEntry(sstable, spaceUsed, newSamplingLevel))[ FD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_67 $$ toDownsample.addAll(forceUpsample)[ CD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_5 $$ List<ResampleEntry> forceResample = new ArrayList()[ CD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_14 $$ double readsPerSec = sstable.getReadMeter() == null ? 0.0 : sstable.getReadMeter().fifteenMinuteRate()[ FD ]
Line_7 $$ List<SSTableReader> newSSTables = new ArrayList(sstables.size())-->Line_75 $$ newSSTables.add(replacement)[ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_21 $$ if (sstable.getMinIndexInterval() != minIndexInterval) [ FD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_7 $$ List<SSTableReader> newSSTables = new ArrayList(sstables.size())[ FD ]
Line_3 $$ List<ResampleEntry> toDownsample = new ArrayList(sstables.size() / 4)-->Line_61 $$ toDownsample = result.right[ FD ]
Line_25 $$ currentSamplingLevel = effectiveSamplingLevel-->Line_30 $$ logger.trace("[ FD ]
Line_23 $$ maxSummarySize = (int) Math.round(maxSummarySize * (sstable.getMinIndexInterval() / (double) minIndexInterval))-->Line_28 $$ int numEntriesAtNewSamplingLevel = IndexSummaryBuilder.entriesAtSamplingLevel(newSamplingLevel, maxSummarySize)[ FD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_57 $$ totalReadsPerSec -= readsPerSec[ FD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_4 $$ List<ResampleEntry> toUpsample = new ArrayList(sstables.size() / 4)[ FD ]
Line_27 $$ int newSamplingLevel = IndexSummaryBuilder.calculateSamplingLevel(currentSamplingLevel, currentNumEntries, targetNumEntries, minIndexInterval, maxIndexInterval)-->Line_30 $$ logger.trace("[ FD ]
Line_47 $$ if (targetNumEntries < currentNumEntries * DOWNSAMPLE_THESHOLD && newSamplingLevel < currentSamplingLevel) -->Line_49 $$ toDownsample.add(new ResampleEntry(sstable, spaceUsed, newSamplingLevel))[ CD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_22 $$ int effectiveSamplingLevel = (int) Math.round(currentSamplingLevel * (minIndexInterval / (double) sstable.getMinIndexInterval()))[ FD ]
Line_12 $$ int minIndexInterval = sstable.metadata.params.minIndexInterval-->Line_32 $$ logger.trace("Forcing resample of [ FD ]
Line_59 $$ if (remainingSpace > 0) -->Line_60 $$ Pair<List<SSTableReader>, List<ResampleEntry>> result = distributeRemainingSpace(toDownsample, remainingSpace)[ CD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_39 $$ numEntriesAtNewSamplingLevel = IndexSummaryBuilder.entriesAtSamplingLevel(newSamplingLevel, sstable.getMaxIndexSummarySize())[ FD ]
Line_13 $$ int maxIndexInterval = sstable.metadata.params.maxIndexInterval-->Line_36 $$ if (effectiveIndexInterval > maxIndexInterval) [ FD ]
Line_36 $$ if (effectiveIndexInterval > maxIndexInterval) -->Line_37 $$ logger.trace("Forcing upsample of [ CD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_63 $$ transactions.get(sstable.metadata.cfId).cancel(sstable)[ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_63 $$ transactions.get(sstable.metadata.cfId).cancel(sstable)[ FD ]
Line_7 $$ List<SSTableReader> newSSTables = new ArrayList(sstables.size())-->Line_54 $$ newSSTables.add(sstable)[ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_17 $$ double avgEntrySize = sstable.getIndexSummaryOffHeapSize() / (double) currentNumEntries[ FD ]
Line_29 $$ double effectiveIndexInterval = sstable.getEffectiveIndexInterval()-->Line_32 $$ logger.trace("Forcing resample of [ FD ]
Line_3 $$ List<ResampleEntry> toDownsample = new ArrayList(sstables.size() / 4)-->Line_65 $$ toDownsample.addAll(forceResample)[ FD ]
Line_36 $$ if (effectiveIndexInterval > maxIndexInterval) -->Line_43 $$ if (targetNumEntries >= currentNumEntries * UPSAMPLE_THRESHOLD && newSamplingLevel > currentSamplingLevel) [ CD ]
Line_16 $$ int currentNumEntries = sstable.getIndexSummarySize()-->Line_30 $$ logger.trace("[ FD ]
Line_7 $$ List<SSTableReader> newSSTables = new ArrayList(sstables.size())-->Line_62 $$ newSSTables.addAll(result.left)[ FD ]
Line_15 $$ long idealSpace = Math.round(remainingSpace * (readsPerSec / totalReadsPerSec))-->Line_30 $$ logger.trace("[ FD ]
Line_13 $$ int maxIndexInterval = sstable.metadata.params.maxIndexInterval-->Line_27 $$ int newSamplingLevel = IndexSummaryBuilder.calculateSamplingLevel(currentSamplingLevel, currentNumEntries, targetNumEntries, minIndexInterval, maxIndexInterval)[ FD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_78 $$ return newSSTables[ CD ]
Line_31 $$ if (effectiveIndexInterval < minIndexInterval) -->Line_34 $$ forceResample.add(new ResampleEntry(sstable, spaceUsed, newSamplingLevel))[ CD ]
Line_19 $$ int currentSamplingLevel = sstable.getIndexSummarySamplingLevel()-->Line_25 $$ currentSamplingLevel = effectiveSamplingLevel[ FD ]
Line_19 $$ int currentSamplingLevel = sstable.getIndexSummarySamplingLevel()-->Line_30 $$ logger.trace("[ FD ]
Line_21 $$ if (sstable.getMinIndexInterval() != minIndexInterval) -->Line_23 $$ maxSummarySize = (int) Math.round(maxSummarySize * (sstable.getMinIndexInterval() / (double) minIndexInterval))[ CD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_4 $$ List<ResampleEntry> toUpsample = new ArrayList(sstables.size() / 4)[ CD ]
Line_74 $$ SSTableReader replacement = sstable.cloneWithNewSummarySamplingLevel(cfs, entry.newSamplingLevel)-->Line_76 $$ transactions.get(sstable.metadata.cfId).update(replacement, true)[ FD ]
Line_59 $$ if (remainingSpace > 0) -->Line_62 $$ newSSTables.addAll(result.left)[ CD ]
Line_5 $$ List<ResampleEntry> forceResample = new ArrayList()-->Line_34 $$ forceResample.add(new ResampleEntry(sstable, spaceUsed, newSamplingLevel))[ FD ]
Line_29 $$ double effectiveIndexInterval = sstable.getEffectiveIndexInterval()-->Line_37 $$ logger.trace("Forcing upsample of [ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_54 $$ newSSTables.add(sstable)[ FD ]
Line_36 $$ if (effectiveIndexInterval > maxIndexInterval) -->Line_39 $$ numEntriesAtNewSamplingLevel = IndexSummaryBuilder.entriesAtSamplingLevel(newSamplingLevel, sstable.getMaxIndexSummarySize())[ CD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_59 $$ if (remainingSpace > 0) [ CD ]
Line_19 $$ int currentSamplingLevel = sstable.getIndexSummarySamplingLevel()-->Line_27 $$ int newSamplingLevel = IndexSummaryBuilder.calculateSamplingLevel(currentSamplingLevel, currentNumEntries, targetNumEntries, minIndexInterval, maxIndexInterval)[ FD ]
Line_38 $$ newSamplingLevel = Math.max(1, (BASE_SAMPLING_LEVEL * minIndexInterval) / maxIndexInterval)-->Line_39 $$ numEntriesAtNewSamplingLevel = IndexSummaryBuilder.entriesAtSamplingLevel(newSamplingLevel, sstable.getMaxIndexSummarySize())[ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_16 $$ int currentNumEntries = sstable.getIndexSummarySize()[ FD ]
Line_14 $$ double readsPerSec = sstable.getReadMeter() == null ? 0.0 : sstable.getReadMeter().fifteenMinuteRate()-->Line_30 $$ logger.trace("[ FD ]
Line_27 $$ int newSamplingLevel = IndexSummaryBuilder.calculateSamplingLevel(currentSamplingLevel, currentNumEntries, targetNumEntries, minIndexInterval, maxIndexInterval)-->Line_39 $$ numEntriesAtNewSamplingLevel = IndexSummaryBuilder.entriesAtSamplingLevel(newSamplingLevel, sstable.getMaxIndexSummarySize())[ FD ]
Line_14 $$ double readsPerSec = sstable.getReadMeter() == null ? 0.0 : sstable.getReadMeter().fifteenMinuteRate()-->Line_57 $$ totalReadsPerSec -= readsPerSec[ FD ]
Line_21 $$ if (sstable.getMinIndexInterval() != minIndexInterval) -->Line_24 $$ logger.trace("min_index_interval changed from [ CD ]
Line_61 $$ toDownsample = result.right-->Line_66 $$ toDownsample.addAll(toUpsample)[ FD ]
Line_19 $$ int currentSamplingLevel = sstable.getIndexSummarySamplingLevel()-->Line_24 $$ logger.trace("min_index_interval changed from [ FD ]
Line_20 $$ int maxSummarySize = sstable.getMaxIndexSummarySize()-->Line_28 $$ int numEntriesAtNewSamplingLevel = IndexSummaryBuilder.entriesAtSamplingLevel(newSamplingLevel, maxSummarySize)[ FD ]
Line_4 $$ List<ResampleEntry> toUpsample = new ArrayList(sstables.size() / 4)-->Line_66 $$ toDownsample.addAll(toUpsample)[ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_37 $$ logger.trace("Forcing upsample of [ FD ]
Line_36 $$ if (effectiveIndexInterval > maxIndexInterval) -->Line_38 $$ newSamplingLevel = Math.max(1, (BASE_SAMPLING_LEVEL * minIndexInterval) / maxIndexInterval)[ CD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_7 $$ List<SSTableReader> newSSTables = new ArrayList(sstables.size())[ CD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_23 $$ maxSummarySize = (int) Math.round(maxSummarySize * (sstable.getMinIndexInterval() / (double) minIndexInterval))[ FD ]
Line_21 $$ if (sstable.getMinIndexInterval() != minIndexInterval) -->Line_22 $$ int effectiveSamplingLevel = (int) Math.round(currentSamplingLevel * (minIndexInterval / (double) sstable.getMinIndexInterval()))[ CD ]
Line_47 $$ if (targetNumEntries < currentNumEntries * DOWNSAMPLE_THESHOLD && newSamplingLevel < currentSamplingLevel) -->Line_55 $$ transactions.get(sstable.metadata.cfId).cancel(sstable)[ CD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_3 $$ List<ResampleEntry> toDownsample = new ArrayList(sstables.size() / 4)[ CD ]
Line_43 $$ if (targetNumEntries >= currentNumEntries * UPSAMPLE_THRESHOLD && newSamplingLevel > currentSamplingLevel) -->Line_45 $$ toUpsample.add(new ResampleEntry(sstable, spaceUsed, newSamplingLevel))[ CD ]
Line_3 $$ List<ResampleEntry> toDownsample = new ArrayList(sstables.size() / 4)-->Line_49 $$ toDownsample.add(new ResampleEntry(sstable, spaceUsed, newSamplingLevel))[ FD ]
Line_6 $$ List<ResampleEntry> forceUpsample = new ArrayList()-->Line_67 $$ toDownsample.addAll(forceUpsample)[ FD ]
Line_27 $$ int newSamplingLevel = IndexSummaryBuilder.calculateSamplingLevel(currentSamplingLevel, currentNumEntries, targetNumEntries, minIndexInterval, maxIndexInterval)-->Line_38 $$ newSamplingLevel = Math.max(1, (BASE_SAMPLING_LEVEL * minIndexInterval) / maxIndexInterval)[ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_20 $$ int maxSummarySize = sstable.getMaxIndexSummarySize()[ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_55 $$ transactions.get(sstable.metadata.cfId).cancel(sstable)[ FD ]
Line_20 $$ int maxSummarySize = sstable.getMaxIndexSummarySize()-->Line_23 $$ maxSummarySize = (int) Math.round(maxSummarySize * (sstable.getMinIndexInterval() / (double) minIndexInterval))[ FD ]
Line_18 $$ long targetNumEntries = Math.max(1, Math.round(idealSpace / avgEntrySize))-->Line_30 $$ logger.trace("[ FD ]
Line_2 $$ private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables, Map<UUID, LifecycleTransaction> transactions, double totalReadsPerSec, long memoryPoolCapacity) throws IOException -->Line_76 $$ transactions.get(sstable.metadata.cfId).update(replacement, true)[ FD ]
Line_22 $$ int effectiveSamplingLevel = (int) Math.round(currentSamplingLevel * (minIndexInterval / (double) sstable.getMinIndexInterval()))-->Line_24 $$ logger.trace("min_index_interval changed from [ FD ]
Line_59 $$ if (remainingSpace > 0) -->Line_61 $$ toDownsample = result.right[ CD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_52 $$ logger.trace("SSTable [ FD ]
Line_3 $$ List<ResampleEntry> toDownsample = new ArrayList(sstables.size() / 4)-->Line_60 $$ Pair<List<SSTableReader>, List<ResampleEntry>> result = distributeRemainingSpace(toDownsample, remainingSpace)[ FD ]
Line_12 $$ int minIndexInterval = sstable.metadata.params.minIndexInterval-->Line_31 $$ if (effectiveIndexInterval < minIndexInterval) [ FD ]
Line_61 $$ toDownsample = result.right-->Line_67 $$ toDownsample.addAll(forceUpsample)[ FD ]
Line_22 $$ int effectiveSamplingLevel = (int) Math.round(currentSamplingLevel * (minIndexInterval / (double) sstable.getMinIndexInterval()))-->Line_25 $$ currentSamplingLevel = effectiveSamplingLevel[ FD ]
Line_29 $$ double effectiveIndexInterval = sstable.getEffectiveIndexInterval()-->Line_36 $$ if (effectiveIndexInterval > maxIndexInterval) [ FD ]
Line_12 $$ int minIndexInterval = sstable.metadata.params.minIndexInterval-->Line_24 $$ logger.trace("min_index_interval changed from [ FD ]
Line_18 $$ long targetNumEntries = Math.max(1, Math.round(idealSpace / avgEntrySize))-->Line_27 $$ int newSamplingLevel = IndexSummaryBuilder.calculateSamplingLevel(currentSamplingLevel, currentNumEntries, targetNumEntries, minIndexInterval, maxIndexInterval)[ FD ]
Line_3 $$ List<ResampleEntry> toDownsample = new ArrayList(sstables.size() / 4)-->Line_67 $$ toDownsample.addAll(forceUpsample)[ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_72 $$ logger.trace("Re-sampling index summary for [ FD ]
Line_31 $$ if (effectiveIndexInterval < minIndexInterval) -->Line_32 $$ logger.trace("Forcing resample of [ CD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_32 $$ logger.trace("Forcing resample of [ FD ]
Line_43 $$ if (targetNumEntries >= currentNumEntries * UPSAMPLE_THRESHOLD && newSamplingLevel > currentSamplingLevel) -->Line_47 $$ if (targetNumEntries < currentNumEntries * DOWNSAMPLE_THESHOLD && newSamplingLevel < currentSamplingLevel) [ CD ]
Line_36 $$ if (effectiveIndexInterval > maxIndexInterval) -->Line_41 $$ forceUpsample.add(new ResampleEntry(sstable, spaceUsed, newSamplingLevel))[ CD ]
Line_28 $$ int numEntriesAtNewSamplingLevel = IndexSummaryBuilder.entriesAtSamplingLevel(newSamplingLevel, maxSummarySize)-->Line_30 $$ logger.trace("[ FD ]
Line_47 $$ if (targetNumEntries < currentNumEntries * DOWNSAMPLE_THESHOLD && newSamplingLevel < currentSamplingLevel) -->Line_53 $$ remainingSpace -= sstable.getIndexSummaryOffHeapSize()[ CD ]
Line_5 $$ List<ResampleEntry> forceResample = new ArrayList()-->Line_65 $$ toDownsample.addAll(forceResample)[ FD ]
Line_28 $$ int numEntriesAtNewSamplingLevel = IndexSummaryBuilder.entriesAtSamplingLevel(newSamplingLevel, maxSummarySize)-->Line_39 $$ numEntriesAtNewSamplingLevel = IndexSummaryBuilder.entriesAtSamplingLevel(newSamplingLevel, sstable.getMaxIndexSummarySize())[ FD ]
Line_74 $$ SSTableReader replacement = sstable.cloneWithNewSummarySamplingLevel(cfs, entry.newSamplingLevel)-->Line_75 $$ newSSTables.add(replacement)[ FD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_30 $$ logger.trace("[ FD ]
Line_12 $$ int minIndexInterval = sstable.metadata.params.minIndexInterval-->Line_27 $$ int newSamplingLevel = IndexSummaryBuilder.calculateSamplingLevel(currentSamplingLevel, currentNumEntries, targetNumEntries, minIndexInterval, maxIndexInterval)[ FD ]
Line_47 $$ if (targetNumEntries < currentNumEntries * DOWNSAMPLE_THESHOLD && newSamplingLevel < currentSamplingLevel) -->Line_52 $$ logger.trace("SSTable [ CD ]
Line_9 $$ for (SSTableReader sstable : sstables) -->Line_19 $$ int currentSamplingLevel = sstable.getIndexSummarySamplingLevel()[ FD ]
Line_73 $$ ColumnFamilyStore cfs = Keyspace.open(sstable.metadata.ksName).getColumnFamilyStore(sstable.metadata.cfId)-->Line_74 $$ SSTableReader replacement = sstable.cloneWithNewSummarySamplingLevel(cfs, entry.newSamplingLevel)[ FD ]
