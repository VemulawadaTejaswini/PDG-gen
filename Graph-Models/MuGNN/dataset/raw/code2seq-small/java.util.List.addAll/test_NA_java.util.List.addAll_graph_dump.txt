Line_4 $$ Map<Integer, List<Log<String>>> allFamilyNames = new HashMap()-->Line_82 $$ for (Map.Entry<Integer, List<Log<String>>> entry : allFamilyNames.entrySet()) [ FD ]
Line_17 $$ if (familyIds.size() < NUM_FAMILIES) -->Line_18 $$ operation = new InsertFamily(ThreadLocalRandom.current().nextInt(5) == 0)[ CD ]
Line_2 $$ public void test() throws Exception -->Line_76 $$ checkForEmptyPendingPuts()[ CD ]
Line_78 $$ AtomicInteger created = new AtomicInteger()-->Line_86 $$ created.incrementAndGet()[ FD ]
Line_79 $$ AtomicInteger removed = new AtomicInteger()-->Line_90 $$ removed.incrementAndGet()[ FD ]
Line_102 $$ for (ForkJoinTask<?> task : tasks) -->Line_103 $$ task.get()[ FD ]
Line_32 $$ if (e instanceof RemoteException) -->Line_34 $$ if (cause instanceof org.infinispan.util.concurrent.TimeoutException) [ CD ]
Line_16 $$ Operation operation-->Line_41 $$ log.error("Failed " + operation.getClass().getName(), e)[ FD ]
Line_63 $$ while (System.currentTimeMillis() < testEnd) -->Line_64 $$ if (!exceptions.isEmpty()) [ CD ]
Line_82 $$ for (Map.Entry<Integer, List<Log<String>>> entry : allFamilyNames.entrySet()) -->Line_84 $$ int familyId = entry.getKey()[ FD ]
Line_2 $$ public void test() throws Exception -->Line_111 $$ log.infof("Created %d families, removed %d%n", created.get(), removed.get())[ CD ]
Line_32 $$ if (e instanceof RemoteException) -->Line_33 $$ Throwable cause = e.getCause()[ CD ]
Line_2 $$ public void test() throws Exception -->Line_63 $$ while (System.currentTimeMillis() < testEnd) [ CD ]
Line_62 $$ long testEnd = System.currentTimeMillis() + EXECUTION_TIME-->Line_63 $$ while (System.currentTimeMillis() < testEnd) [ FD ]
Line_17 $$ if (familyIds.size() < NUM_FAMILIES) -->Line_20 $$ operation = getOperation()[ CD ]
Line_2 $$ public void test() throws Exception -->Line_105 $$ if (!exceptions.isEmpty()) [ CD ]
Line_5 $$ Map<Integer, List<Log<Set<String>>>> allFamilyMembers = new HashMap()-->Line_94 $$ for (Map.Entry<Integer, List<Log<Set<String>>>> entry : allFamilyMembers.entrySet()) [ FD ]
Line_53 $$ if (list == null)-->Line_54 $$ allFamilyMembers.put(entry.getKey(), list = new ArrayList())[ CD ]
Line_82 $$ for (Map.Entry<Integer, List<Log<String>>> entry : allFamilyNames.entrySet()) -->Line_97 $$ List<Log<Set<String>>> list = entry.getValue()[ FD ]
Line_2 $$ public void test() throws Exception -->Line_80 $$ ForkJoinPool threadPool = ForkJoinPool.commonPool()[ CD ]
Line_20 $$ operation = getOperation()-->Line_41 $$ log.error("Failed " + operation.getClass().getName(), e)[ FD ]
Line_85 $$ List<Log<String>> list = entry.getValue()-->Line_99 $$ checkCorrectness("family_members-" + familyId + "-", list, logByTime)[ FD ]
Line_2 $$ public void test() throws Exception -->Line_71 $$ if (!exec.awaitTermination(1000, TimeUnit.SECONDS))[ CD ]
Line_20 $$ operation = getOperation()-->Line_23 $$ operation.run()[ FD ]
Line_18 $$ operation = new InsertFamily(ThreadLocalRandom.current().nextInt(5) == 0)-->Line_23 $$ operation.run()[ FD ]
Line_85 $$ List<Log<String>> list = entry.getValue()-->Line_89 $$ if (list.stream().anyMatch( l -> l.type == LogType.WRITE && l.getValue() == null)) [ FD ]
Line_8 $$ for (int node = 0; node < NUM_NODES; ++node) -->Line_10 $$ for (int i = 0; i < NUM_THREADS_PER_NODE; ++i) [ CD ]
Line_27 $$ if (e instanceof RollbackException) -->Line_32 $$ if (e instanceof RemoteException) [ CD ]
Line_32 $$ if (e instanceof RemoteException) -->Line_37 $$ if (e instanceof StaleStateException || e instanceof PessimisticLockException || e instanceof ObjectNotFoundException || e instanceof ConstraintViolationException || e instanceof LockAcquisitionException) [ CD ]
Line_73 $$ for (Future<Void> f : futures) -->Line_74 $$ f.get()[ FD ]
Line_15 $$ while (running) -->Line_17 $$ if (familyIds.size() < NUM_FAMILIES) [ CD ]
Line_2 $$ public void test() throws Exception -->Line_7 $$ List<Future<Void>> futures = new ArrayList()[ CD ]
Line_87 $$ NavigableMap<Integer, List<Log<String>>> logByTime = getWritesAtTime(list)-->Line_88 $$ checkCorrectness("family_name-" + familyId + "-", list, logByTime)[ FD ]
Line_85 $$ List<Log<String>> list = entry.getValue()-->Line_98 $$ NavigableMap<Integer, List<Log<Set<String>>>> logByTime = getWritesAtTime(list)[ FD ]
Line_2 $$ public void test() throws Exception -->Line_4 $$ Map<Integer, List<Log<String>>> allFamilyNames = new HashMap()[ CD ]
Line_18 $$ operation = new InsertFamily(ThreadLocalRandom.current().nextInt(5) == 0)-->Line_20 $$ operation = getOperation()[ FD ]
Line_2 $$ public void test() throws Exception -->Line_70 $$ exec.shutdown()[ CD ]
Line_80 $$ ForkJoinPool threadPool = ForkJoinPool.commonPool()-->Line_83 $$ tasks.add(threadPool.submit(() -> [ FD ]
Line_82 $$ for (Map.Entry<Integer, List<Log<String>>> entry : allFamilyNames.entrySet()) -->Line_85 $$ List<Log<String>> list = entry.getValue()[ FD ]
Line_2 $$ public void test() throws Exception -->Line_5 $$ Map<Integer, List<Log<Set<String>>>> allFamilyMembers = new HashMap()[ CD ]
Line_2 $$ public void test() throws Exception -->Line_81 $$ ArrayList<ForkJoinTask<?>> tasks = new ArrayList()[ CD ]
Line_27 $$ if (e instanceof RollbackException) -->Line_29 $$ if (cause instanceof StaleObjectStateException || cause instanceof PessimisticLockException || cause instanceof LockAcquisitionException) [ CD ]
Line_2 $$ public void test() throws Exception -->Line_3 $$ ExecutorService exec = Executors.newFixedThreadPool(NUM_THREADS)[ CD ]
Line_81 $$ ArrayList<ForkJoinTask<?>> tasks = new ArrayList()-->Line_95 $$ tasks.add(threadPool.submit(() -> [ FD ]
Line_5 $$ Map<Integer, List<Log<Set<String>>>> allFamilyMembers = new HashMap()-->Line_54 $$ allFamilyMembers.put(entry.getKey(), list = new ArrayList())[ FD ]
Line_79 $$ AtomicInteger removed = new AtomicInteger()-->Line_111 $$ log.infof("Created %d families, removed %d%n", created.get(), removed.get())[ FD ]
Line_15 $$ while (running) -->Line_16 $$ Operation operation[ CD ]
Line_63 $$ while (System.currentTimeMillis() < testEnd) -->Line_67 $$ Thread.sleep(1000)[ CD ]
Line_87 $$ NavigableMap<Integer, List<Log<String>>> logByTime = getWritesAtTime(list)-->Line_99 $$ checkCorrectness("family_members-" + familyId + "-", list, logByTime)[ FD ]
Line_16 $$ Operation operation-->Line_23 $$ operation.run()[ FD ]
Line_106 $$ for (Exception e : exceptions) -->Line_107 $$ log.error("Test failure", e)[ FD ]
Line_3 $$ ExecutorService exec = Executors.newFixedThreadPool(NUM_THREADS)-->Line_12 $$ futures.add(exec.submit(() -> [ FD ]
Line_3 $$ ExecutorService exec = Executors.newFixedThreadPool(NUM_THREADS)-->Line_71 $$ if (!exec.awaitTermination(1000, TimeUnit.SECONDS))[ FD ]
Line_8 $$ for (int node = 0; node < NUM_NODES; ++node) -->Line_9 $$ final int NODE = node[ CD ]
Line_82 $$ for (Map.Entry<Integer, List<Log<String>>> entry : allFamilyNames.entrySet()) -->Line_96 $$ int familyId = entry.getKey()[ FD ]
Line_85 $$ List<Log<String>> list = entry.getValue()-->Line_87 $$ NavigableMap<Integer, List<Log<String>>> logByTime = getWritesAtTime(list)[ FD ]
Line_2 $$ public void test() throws Exception -->Line_8 $$ for (int node = 0; node < NUM_NODES; ++node) [ CD ]
Line_18 $$ operation = new InsertFamily(ThreadLocalRandom.current().nextInt(5) == 0)-->Line_41 $$ log.error("Failed " + operation.getClass().getName(), e)[ FD ]
Line_3 $$ ExecutorService exec = Executors.newFixedThreadPool(NUM_THREADS)-->Line_70 $$ exec.shutdown()[ FD ]
Line_10 $$ for (int i = 0; i < NUM_THREADS_PER_NODE; ++i) -->Line_12 $$ futures.add(exec.submit(() -> [ CD ]
Line_80 $$ ForkJoinPool threadPool = ForkJoinPool.commonPool()-->Line_95 $$ tasks.add(threadPool.submit(() -> [ FD ]
Line_81 $$ ArrayList<ForkJoinTask<?>> tasks = new ArrayList()-->Line_83 $$ tasks.add(threadPool.submit(() -> [ FD ]
Line_9 $$ final int NODE = node-->Line_14 $$ threadNode.set(NODE)[ FD ]
Line_28 $$ Throwable cause = e.getCause()-->Line_34 $$ if (cause instanceof org.infinispan.util.concurrent.TimeoutException) [ FD ]
Line_47 $$ if (list == null)-->Line_48 $$ allFamilyNames.put(entry.getKey(), list = new ArrayList())[ CD ]
Line_4 $$ Map<Integer, List<Log<String>>> allFamilyNames = new HashMap()-->Line_48 $$ allFamilyNames.put(entry.getKey(), list = new ArrayList())[ FD ]
Line_25 $$ if (hasCause(e, InducedException.class)) -->Line_27 $$ if (e instanceof RollbackException) [ CD ]
Line_2 $$ public void test() throws Exception -->Line_78 $$ AtomicInteger created = new AtomicInteger()[ CD ]
Line_4 $$ Map<Integer, List<Log<String>>> allFamilyNames = new HashMap()-->Line_46 $$ List<Log<String>> list = allFamilyNames.get(entry.getKey())[ FD ]
Line_16 $$ Operation operation-->Line_18 $$ operation = new InsertFamily(ThreadLocalRandom.current().nextInt(5) == 0)[ FD ]
Line_89 $$ if (list.stream().anyMatch( l -> l.type == LogType.WRITE && l.getValue() == null)) -->Line_90 $$ removed.incrementAndGet()[ CD ]
Line_16 $$ Operation operation-->Line_20 $$ operation = getOperation()[ FD ]
Line_2 $$ public void test() throws Exception -->Line_79 $$ AtomicInteger removed = new AtomicInteger()[ CD ]
Line_2 $$ public void test() throws Exception -->Line_77 $$ log.infof("Generated %d timestamps%n", timestampGenerator.get())[ CD ]
Line_7 $$ List<Future<Void>> futures = new ArrayList()-->Line_12 $$ futures.add(exec.submit(() -> [ FD ]
Line_85 $$ List<Log<String>> list = entry.getValue()-->Line_88 $$ checkCorrectness("family_name-" + familyId + "-", list, logByTime)[ FD ]
Line_27 $$ if (e instanceof RollbackException) -->Line_28 $$ Throwable cause = e.getCause()[ CD ]
Line_2 $$ public void test() throws Exception -->Line_62 $$ long testEnd = System.currentTimeMillis() + EXECUTION_TIME[ CD ]
Line_78 $$ AtomicInteger created = new AtomicInteger()-->Line_111 $$ log.infof("Created %d families, removed %d%n", created.get(), removed.get())[ FD ]
Line_10 $$ for (int i = 0; i < NUM_THREADS_PER_NODE; ++i) -->Line_11 $$ final int I = i[ CD ]
Line_5 $$ Map<Integer, List<Log<Set<String>>>> allFamilyMembers = new HashMap()-->Line_52 $$ List<Log<Set<String>>> list = allFamilyMembers.get(entry.getKey())[ FD ]
