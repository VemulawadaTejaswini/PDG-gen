Line_10 $$ for (int idx = 0; idx < chunks.length; idx++) -->Line_27 $$ for (int idx = 0; idx < chunks.length; idx++) [ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_7 $$ final File propertiesFile = new File(projectBuildFileDestDir, genOptions.getPropertiesFileName())[ FD ]
Line_12 $$ final File chunkBaseDir = BuildProperties.getModuleChunkBaseDir(chunk)-->Line_31 $$ if (chunkBaseDir != null) [ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_58 $$ return generated.toArray(new File[generated.size()])[ CD ]
Line_3 $$ final File projectBuildFileDestDir = VfsUtil.virtualToIoFile(project.getBaseDir())-->Line_4 $$ projectBuildFileDestDir.mkdirs()[ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_50 $$ final PrintWriter propertiesOut = makeWriter(propertiesFile)[ CD ]
Line_6 $$ final File projectBuildFile = new File(projectBuildFileDestDir, genOptions.getBuildFileName())-->Line_21 $$ FileUtil.createIfDoesntExist(projectBuildFile)[ FD ]
Line_29 $$ final File chunkBuildFile = chunkFiles[idx]-->Line_34 $$ final boolean moduleBackupOk = backup(chunkBuildFile, project, genOptions, filesToRefresh)[ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_9 $$ final File[] chunkFiles = new File[chunks.length][ CD ]
Line_29 $$ final File chunkBuildFile = chunkFiles[idx]-->Line_42 $$ generated.add(chunkBuildFile)[ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_6 $$ final File projectBuildFile = new File(projectBuildFileDestDir, genOptions.getBuildFileName())[ CD ]
Line_34 $$ final boolean moduleBackupOk = backup(chunkBuildFile, project, genOptions, filesToRefresh)-->Line_35 $$ if (!moduleBackupOk) [ FD ]
Line_18 $$ if (!backup(propertiesFile, project, genOptions, filesToRefresh)) -->Line_19 $$ return null[ CD ]
Line_27 $$ for (int idx = 0; idx < chunks.length; idx++) -->Line_31 $$ if (chunkBaseDir != null) [ CD ]
Line_30 $$ final File chunkBaseDir = chunkBuildFile.getParentFile()-->Line_31 $$ if (chunkBaseDir != null) [ FD ]
Line_39 $$ final PrintWriter out = makeWriter(chunkBuildFile)-->Line_44 $$ out.close()[ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_15 $$ if (!backup(projectBuildFile, project, genOptions, filesToRefresh)) [ CD ]
Line_5 $$ final List<File> generated = new ArrayList<File>()-->Line_57 $$ filesToRefresh.addAll(generated)[ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_6 $$ final File projectBuildFile = new File(projectBuildFileDestDir, genOptions.getBuildFileName())[ FD ]
Line_10 $$ for (int idx = 0; idx < chunks.length; idx++) -->Line_11 $$ final ModuleChunk chunk = chunks[idx][ CD ]
Line_11 $$ final ModuleChunk chunk = chunks[idx]-->Line_13 $$ chunkFiles[idx] = new File(chunkBaseDir, BuildProperties.getModuleChunkBuildFileName(chunk) + XML_EXTENSION)[ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_4 $$ projectBuildFileDestDir.mkdirs()[ CD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_5 $$ final List<File> generated = new ArrayList<File>()[ CD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_57 $$ filesToRefresh.addAll(generated)[ CD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_22 $$ final PrintWriter mainDataOutput = makeWriter(projectBuildFile)[ CD ]
Line_27 $$ for (int idx = 0; idx < chunks.length; idx++) -->Line_35 $$ if (!moduleBackupOk) [ CD ]
Line_27 $$ for (int idx = 0; idx < chunks.length; idx++) -->Line_38 $$ FileUtil.createIfDoesntExist(chunkBuildFile)[ CD ]
Line_27 $$ for (int idx = 0; idx < chunks.length; idx++) -->Line_30 $$ final File chunkBaseDir = chunkBuildFile.getParentFile()[ CD ]
Line_29 $$ final File chunkBuildFile = chunkFiles[idx]-->Line_38 $$ FileUtil.createIfDoesntExist(chunkBuildFile)[ FD ]
Line_27 $$ for (int idx = 0; idx < chunks.length; idx++) -->Line_39 $$ final PrintWriter out = makeWriter(chunkBuildFile)[ CD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_7 $$ final File propertiesFile = new File(projectBuildFileDestDir, genOptions.getPropertiesFileName())[ CD ]
Line_5 $$ final List<File> generated = new ArrayList<File>()-->Line_53 $$ generated.add(propertiesFile)[ FD ]
Line_29 $$ final File chunkBuildFile = chunkFiles[idx]-->Line_39 $$ final PrintWriter out = makeWriter(chunkBuildFile)[ FD ]
Line_15 $$ if (!backup(projectBuildFile, project, genOptions, filesToRefresh)) -->Line_16 $$ return null[ CD ]
Line_12 $$ final File chunkBaseDir = BuildProperties.getModuleChunkBaseDir(chunk)-->Line_32 $$ chunkBaseDir.mkdirs()[ FD ]
Line_39 $$ final PrintWriter out = makeWriter(chunkBuildFile)-->Line_41 $$ new ModuleChunkAntProject(project, chunk, genOptions).generate(out)[ FD ]
Line_27 $$ for (int idx = 0; idx < chunks.length; idx++) -->Line_29 $$ final File chunkBuildFile = chunkFiles[idx][ CD ]
Line_50 $$ final PrintWriter propertiesOut = makeWriter(propertiesFile)-->Line_55 $$ propertiesOut.close()[ FD ]
Line_35 $$ if (!moduleBackupOk) -->Line_36 $$ return null[ CD ]
Line_24 $$ final MultipleFileProjectBuild build = new MultipleFileProjectBuild(project, genOptions)-->Line_25 $$ build.generate(mainDataOutput)[ FD ]
Line_7 $$ final File propertiesFile = new File(projectBuildFileDestDir, genOptions.getPropertiesFileName())-->Line_18 $$ if (!backup(propertiesFile, project, genOptions, filesToRefresh)) [ FD ]
Line_22 $$ final PrintWriter mainDataOutput = makeWriter(projectBuildFile)-->Line_25 $$ build.generate(mainDataOutput)[ FD ]
Line_7 $$ final File propertiesFile = new File(projectBuildFileDestDir, genOptions.getPropertiesFileName())-->Line_53 $$ generated.add(propertiesFile)[ FD ]
Line_27 $$ for (int idx = 0; idx < chunks.length; idx++) -->Line_34 $$ final boolean moduleBackupOk = backup(chunkBuildFile, project, genOptions, filesToRefresh)[ CD ]
Line_50 $$ final PrintWriter propertiesOut = makeWriter(propertiesFile)-->Line_52 $$ new PropertyFileGeneratorImpl(project, genOptions).generate(propertiesOut)[ FD ]
Line_6 $$ final File projectBuildFile = new File(projectBuildFileDestDir, genOptions.getBuildFileName())-->Line_15 $$ if (!backup(projectBuildFile, project, genOptions, filesToRefresh)) [ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_3 $$ final File projectBuildFileDestDir = VfsUtil.virtualToIoFile(project.getBaseDir())[ CD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_8 $$ final ModuleChunk[] chunks = genOptions.getModuleChunks()[ CD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_18 $$ if (!backup(propertiesFile, project, genOptions, filesToRefresh)) [ FD ]
Line_27 $$ for (int idx = 0; idx < chunks.length; idx++) -->Line_28 $$ final ModuleChunk chunk = chunks[idx][ CD ]
Line_5 $$ final List<File> generated = new ArrayList<File>()-->Line_42 $$ generated.add(chunkBuildFile)[ FD ]
Line_6 $$ final File projectBuildFile = new File(projectBuildFileDestDir, genOptions.getBuildFileName())-->Line_26 $$ generated.add(projectBuildFile)[ FD ]
Line_29 $$ final File chunkBuildFile = chunkFiles[idx]-->Line_30 $$ final File chunkBaseDir = chunkBuildFile.getParentFile()[ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_10 $$ for (int idx = 0; idx < chunks.length; idx++) [ CD ]
Line_11 $$ final ModuleChunk chunk = chunks[idx]-->Line_12 $$ final File chunkBaseDir = BuildProperties.getModuleChunkBaseDir(chunk)[ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_15 $$ if (!backup(projectBuildFile, project, genOptions, filesToRefresh)) [ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_21 $$ FileUtil.createIfDoesntExist(projectBuildFile)[ CD ]
Line_7 $$ final File propertiesFile = new File(projectBuildFileDestDir, genOptions.getPropertiesFileName())-->Line_50 $$ final PrintWriter propertiesOut = makeWriter(propertiesFile)[ FD ]
Line_5 $$ final List<File> generated = new ArrayList<File>()-->Line_58 $$ return generated.toArray(new File[generated.size()])[ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_18 $$ if (!backup(propertiesFile, project, genOptions, filesToRefresh)) [ CD ]
Line_5 $$ final List<File> generated = new ArrayList<File>()-->Line_26 $$ generated.add(projectBuildFile)[ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_57 $$ filesToRefresh.addAll(generated)[ FD ]
Line_22 $$ final PrintWriter mainDataOutput = makeWriter(projectBuildFile)-->Line_48 $$ mainDataOutput.close()[ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_3 $$ final File projectBuildFileDestDir = VfsUtil.virtualToIoFile(project.getBaseDir())[ FD ]
Line_10 $$ for (int idx = 0; idx < chunks.length; idx++) -->Line_13 $$ chunkFiles[idx] = new File(chunkBaseDir, BuildProperties.getModuleChunkBuildFileName(chunk) + XML_EXTENSION)[ CD ]
Line_6 $$ final File projectBuildFile = new File(projectBuildFileDestDir, genOptions.getBuildFileName())-->Line_22 $$ final PrintWriter mainDataOutput = makeWriter(projectBuildFile)[ FD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_8 $$ final ModuleChunk[] chunks = genOptions.getModuleChunks()[ FD ]
Line_31 $$ if (chunkBaseDir != null) -->Line_32 $$ chunkBaseDir.mkdirs()[ CD ]
Line_30 $$ final File chunkBaseDir = chunkBuildFile.getParentFile()-->Line_32 $$ chunkBaseDir.mkdirs()[ FD ]
Line_10 $$ for (int idx = 0; idx < chunks.length; idx++) -->Line_12 $$ final File chunkBaseDir = BuildProperties.getModuleChunkBaseDir(chunk)[ CD ]
Line_2 $$ public File[] generateMultipleFileBuild(Project project, GenerationOptions genOptions, List<File> filesToRefresh) throws IOException -->Line_34 $$ final boolean moduleBackupOk = backup(chunkBuildFile, project, genOptions, filesToRefresh)[ FD ]
