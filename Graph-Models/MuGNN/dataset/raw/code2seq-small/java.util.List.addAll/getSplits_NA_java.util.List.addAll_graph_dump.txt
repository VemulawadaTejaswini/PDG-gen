Line_5 $$ List<Future<List<TokenSplit>>> splitFutures = new ArrayList()-->Line_7 $$ splitFutures.add(executor.submit(new SplitCallable(range, keyspace, columnFamily, splitSize, cassandraThriftClient, partitioner)))[ FD ]
Line_2 $$ public List<TokenSplit> getSplits(String keyspace, String columnFamily) throws IOException -->Line_3 $$ List<TokenRange> masterRangeNodes = cassandraThriftClient.getRangeMap(keyspace)[ FD ]
Line_4 $$ List<TokenSplit> splits = new ArrayList()-->Line_11 $$ splits.addAll(futureInputSplits.get())[ FD ]
Line_4 $$ List<TokenSplit> splits = new ArrayList()-->Line_16 $$ checkState(!splits.isEmpty(), "No splits created")[ FD ]
Line_2 $$ public List<TokenSplit> getSplits(String keyspace, String columnFamily) throws IOException -->Line_17 $$ Collections.shuffle(splits, ThreadLocalRandom.current())[ CD ]
Line_2 $$ public List<TokenSplit> getSplits(String keyspace, String columnFamily) throws IOException -->Line_16 $$ checkState(!splits.isEmpty(), "No splits created")[ CD ]
Line_2 $$ public List<TokenSplit> getSplits(String keyspace, String columnFamily) throws IOException -->Line_5 $$ List<Future<List<TokenSplit>>> splitFutures = new ArrayList()[ CD ]
Line_2 $$ public List<TokenSplit> getSplits(String keyspace, String columnFamily) throws IOException -->Line_3 $$ List<TokenRange> masterRangeNodes = cassandraThriftClient.getRangeMap(keyspace)[ CD ]
Line_2 $$ public List<TokenSplit> getSplits(String keyspace, String columnFamily) throws IOException -->Line_4 $$ List<TokenSplit> splits = new ArrayList()[ CD ]
Line_2 $$ public List<TokenSplit> getSplits(String keyspace, String columnFamily) throws IOException -->Line_18 $$ return splits[ CD ]
Line_4 $$ List<TokenSplit> splits = new ArrayList()-->Line_17 $$ Collections.shuffle(splits, ThreadLocalRandom.current())[ FD ]
Line_9 $$ for (Future<List<TokenSplit>> futureInputSplits : splitFutures) -->Line_11 $$ splits.addAll(futureInputSplits.get())[ FD ]
