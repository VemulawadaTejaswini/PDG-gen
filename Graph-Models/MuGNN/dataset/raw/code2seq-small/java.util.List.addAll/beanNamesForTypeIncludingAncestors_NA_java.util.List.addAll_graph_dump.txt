Line_2 $$ public static String[] beanNamesForTypeIncludingAncestors(ListableBeanFactory lbf, Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_19 $$ return result[ CD ]
Line_7 $$ if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) -->Line_8 $$ String[] parentResult = beanNamesForTypeIncludingAncestors((ListableBeanFactory) hbf.getParentBeanFactory(), type, includeNonSingletons, allowEagerInit)[ CD ]
Line_6 $$ HierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf-->Line_12 $$ if (!resultList.contains(beanName) && !hbf.containsLocalBean(beanName)) [ FD ]
Line_9 $$ List<String> resultList = new ArrayList<String>()-->Line_13 $$ resultList.add(beanName)[ FD ]
Line_2 $$ public static String[] beanNamesForTypeIncludingAncestors(ListableBeanFactory lbf, Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_3 $$ Assert.notNull(lbf, "ListableBeanFactory must not be null")[ CD ]
Line_9 $$ List<String> resultList = new ArrayList<String>()-->Line_12 $$ if (!resultList.contains(beanName) && !hbf.containsLocalBean(beanName)) [ FD ]
Line_6 $$ HierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf-->Line_7 $$ if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) [ FD ]
Line_12 $$ if (!resultList.contains(beanName) && !hbf.containsLocalBean(beanName)) -->Line_13 $$ resultList.add(beanName)[ CD ]
Line_9 $$ List<String> resultList = new ArrayList<String>()-->Line_10 $$ resultList.addAll(Arrays.asList(result))[ FD ]
Line_7 $$ if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) -->Line_16 $$ result = StringUtils.toStringArray(resultList)[ CD ]
Line_2 $$ public static String[] beanNamesForTypeIncludingAncestors(ListableBeanFactory lbf, Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_8 $$ String[] parentResult = beanNamesForTypeIncludingAncestors((ListableBeanFactory) hbf.getParentBeanFactory(), type, includeNonSingletons, allowEagerInit)[ FD ]
Line_2 $$ public static String[] beanNamesForTypeIncludingAncestors(ListableBeanFactory lbf, Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_3 $$ Assert.notNull(lbf, "ListableBeanFactory must not be null")[ FD ]
Line_11 $$ for (String beanName : parentResult) -->Line_13 $$ resultList.add(beanName)[ FD ]
Line_2 $$ public static String[] beanNamesForTypeIncludingAncestors(ListableBeanFactory lbf, Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_5 $$ if (lbf instanceof HierarchicalBeanFactory) [ CD ]
Line_4 $$ String[] result = lbf.getBeanNamesForType(type, includeNonSingletons, allowEagerInit)-->Line_10 $$ resultList.addAll(Arrays.asList(result))[ FD ]
Line_2 $$ public static String[] beanNamesForTypeIncludingAncestors(ListableBeanFactory lbf, Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_5 $$ if (lbf instanceof HierarchicalBeanFactory) [ FD ]
Line_2 $$ public static String[] beanNamesForTypeIncludingAncestors(ListableBeanFactory lbf, Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_4 $$ String[] result = lbf.getBeanNamesForType(type, includeNonSingletons, allowEagerInit)[ FD ]
Line_5 $$ if (lbf instanceof HierarchicalBeanFactory) -->Line_7 $$ if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) [ CD ]
Line_2 $$ public static String[] beanNamesForTypeIncludingAncestors(ListableBeanFactory lbf, Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_4 $$ String[] result = lbf.getBeanNamesForType(type, includeNonSingletons, allowEagerInit)[ CD ]
Line_9 $$ List<String> resultList = new ArrayList<String>()-->Line_16 $$ result = StringUtils.toStringArray(resultList)[ FD ]
Line_5 $$ if (lbf instanceof HierarchicalBeanFactory) -->Line_6 $$ HierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf[ CD ]
Line_6 $$ HierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf-->Line_8 $$ String[] parentResult = beanNamesForTypeIncludingAncestors((ListableBeanFactory) hbf.getParentBeanFactory(), type, includeNonSingletons, allowEagerInit)[ FD ]
Line_11 $$ for (String beanName : parentResult) -->Line_12 $$ if (!resultList.contains(beanName) && !hbf.containsLocalBean(beanName)) [ FD ]
Line_4 $$ String[] result = lbf.getBeanNamesForType(type, includeNonSingletons, allowEagerInit)-->Line_16 $$ result = StringUtils.toStringArray(resultList)[ FD ]
Line_7 $$ if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) -->Line_10 $$ resultList.addAll(Arrays.asList(result))[ CD ]
Line_7 $$ if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) -->Line_9 $$ List<String> resultList = new ArrayList<String>()[ CD ]
