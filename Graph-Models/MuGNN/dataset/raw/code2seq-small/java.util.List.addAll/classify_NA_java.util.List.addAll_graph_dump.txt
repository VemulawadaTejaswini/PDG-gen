Line_9 $$ nulls = new SmartList<T>()-->Line_21 $$ ContainerUtil.addIfNotNull(values, nulls)[ FD ]
Line_3 $$ List<T> nulls = null-->Line_21 $$ ContainerUtil.addIfNotNull(values, nulls)[ FD ]
Line_3 $$ List<T> nulls = null-->Line_9 $$ nulls = new SmartList<T>()[ FD ]
Line_13 $$ if (list == null) -->Line_14 $$ map.put(weight, list = new SmartList<T>())[ CD ]
Line_9 $$ nulls = new SmartList<T>()-->Line_10 $$ nulls.add(t)[ FD ]
Line_7 $$ if (weight == null) -->Line_13 $$ if (list == null) [ CD ]
Line_12 $$ List<T> list = map.get(weight)-->Line_14 $$ map.put(weight, list = new SmartList<T>())[ FD ]
Line_19 $$ final List<List<T>> values = new ArrayList<List<T>>()-->Line_20 $$ values.addAll(myNegated ? map.descendingMap().values() : map.values())[ FD ]
Line_2 $$ public Iterable<T> classify(@NotNull final Iterable<T> source, @NotNull final ProcessingContext context) -->Line_20 $$ values.addAll(myNegated ? map.descendingMap().values() : map.values())[ CD ]
Line_2 $$ public Iterable<T> classify(@NotNull final Iterable<T> source, @NotNull final ProcessingContext context) -->Line_6 $$ final Comparable weight = getWeight(t, context)[ FD ]
Line_6 $$ final Comparable weight = getWeight(t, context)-->Line_7 $$ if (weight == null) [ FD ]
Line_22 $$ return new Iterable<T>() -->Line_24 $$ return new FlatteningIterator<List<T>, T>(values.iterator()) [ CD ]
Line_19 $$ final List<List<T>> values = new ArrayList<List<T>>()-->Line_24 $$ return new FlatteningIterator<List<T>, T>(values.iterator()) [ FD ]
Line_2 $$ public Iterable<T> classify(@NotNull final Iterable<T> source, @NotNull final ProcessingContext context) -->Line_22 $$ return new Iterable<T>() [ CD ]
Line_2 $$ public Iterable<T> classify(@NotNull final Iterable<T> source, @NotNull final ProcessingContext context) -->Line_3 $$ List<T> nulls = null[ CD ]
Line_19 $$ final List<List<T>> values = new ArrayList<List<T>>()-->Line_21 $$ ContainerUtil.addIfNotNull(values, nulls)[ FD ]
Line_6 $$ final Comparable weight = getWeight(t, context)-->Line_14 $$ map.put(weight, list = new SmartList<T>())[ FD ]
Line_2 $$ public Iterable<T> classify(@NotNull final Iterable<T> source, @NotNull final ProcessingContext context) -->Line_4 $$ TreeMap<Comparable, List<T>> map = new TreeMap<Comparable, List<T>>()[ CD ]
Line_24 $$ return new FlatteningIterator<List<T>, T>(values.iterator()) -->Line_26 $$ return myNext.classify(group, context).iterator()[ CD ]
Line_7 $$ if (weight == null) -->Line_8 $$ if (nulls == null)[ CD ]
Line_5 $$ for (T t : source) -->Line_16 $$ list.add(t)[ FD ]
Line_2 $$ public Iterable<T> classify(@NotNull final Iterable<T> source, @NotNull final ProcessingContext context) -->Line_26 $$ return myNext.classify(group, context).iterator()[ FD ]
Line_4 $$ TreeMap<Comparable, List<T>> map = new TreeMap<Comparable, List<T>>()-->Line_12 $$ List<T> list = map.get(weight)[ FD ]
Line_7 $$ if (weight == null) -->Line_10 $$ nulls.add(t)[ CD ]
Line_12 $$ List<T> list = map.get(weight)-->Line_13 $$ if (list == null) [ FD ]
Line_6 $$ final Comparable weight = getWeight(t, context)-->Line_12 $$ List<T> list = map.get(weight)[ FD ]
Line_14 $$ map.put(weight, list = new SmartList<T>())-->Line_16 $$ list.add(t)[ FD ]
Line_2 $$ public Iterable<T> classify(@NotNull final Iterable<T> source, @NotNull final ProcessingContext context) -->Line_19 $$ final List<List<T>> values = new ArrayList<List<T>>()[ CD ]
Line_3 $$ List<T> nulls = null-->Line_8 $$ if (nulls == null)[ FD ]
Line_8 $$ if (nulls == null)-->Line_9 $$ nulls = new SmartList<T>()[ CD ]
Line_3 $$ List<T> nulls = null-->Line_10 $$ nulls.add(t)[ FD ]
Line_2 $$ public Iterable<T> classify(@NotNull final Iterable<T> source, @NotNull final ProcessingContext context) -->Line_21 $$ ContainerUtil.addIfNotNull(values, nulls)[ CD ]
Line_12 $$ List<T> list = map.get(weight)-->Line_16 $$ list.add(t)[ FD ]
Line_24 $$ return new FlatteningIterator<List<T>, T>(values.iterator()) -->Line_26 $$ return myNext.classify(group, context).iterator()[ FD ]
Line_4 $$ TreeMap<Comparable, List<T>> map = new TreeMap<Comparable, List<T>>()-->Line_20 $$ values.addAll(myNegated ? map.descendingMap().values() : map.values())[ FD ]
Line_5 $$ for (T t : source) -->Line_6 $$ final Comparable weight = getWeight(t, context)[ FD ]
Line_7 $$ if (weight == null) -->Line_12 $$ List<T> list = map.get(weight)[ CD ]
Line_5 $$ for (T t : source) -->Line_10 $$ nulls.add(t)[ FD ]
Line_4 $$ TreeMap<Comparable, List<T>> map = new TreeMap<Comparable, List<T>>()-->Line_14 $$ map.put(weight, list = new SmartList<T>())[ FD ]
Line_7 $$ if (weight == null) -->Line_16 $$ list.add(t)[ CD ]
