Line_18 $$ final String classpathFile = CommandLineWrapperUtil.createClasspathJarFile(new Manifest(), classpath).getAbsolutePath()-->Line_19 $$ commandLineWrapperArgs = Arrays.asList("-classpath", classpathFile)[ FD ]
Line_12 $$ if (!classpath.isEmpty()) -->Line_13 $$ List<String> commandLineWrapperArgs = null[ CD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_36 $$ cmdLine.add(param)[ FD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_4 $$ cmdLine.add(javaExecutable)[ CD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_3 $$ final List<String> cmdLine = new ArrayList<String>()[ CD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_28 $$ cmdLine.addAll(commandLineWrapperArgs)[ FD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_38 $$ return cmdLine[ CD ]
Line_8 $$ if (!bootClasspath.isEmpty()) -->Line_10 $$ cmdLine.add(StringUtil.join(bootClasspath, File.pathSeparator))[ CD ]
Line_12 $$ if (!classpath.isEmpty()) -->Line_27 $$ if (commandLineWrapperArgs != null) [ CD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_34 $$ cmdLine.add(mainClass)[ CD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_34 $$ cmdLine.add(mainClass)[ FD ]
Line_14 $$ if (useCommandLineWrapper) -->Line_15 $$ final Class wrapperClass = getCommandLineWrapperClass()[ CD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_30 $$ cmdLine.add("-classpath")[ FD ]
Line_13 $$ List<String> commandLineWrapperArgs = null-->Line_28 $$ cmdLine.addAll(commandLineWrapperArgs)[ FD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_10 $$ cmdLine.add(StringUtil.join(bootClasspath, File.pathSeparator))[ FD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_31 $$ cmdLine.add(StringUtil.join(classpath, File.pathSeparator))[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_9 $$ cmdLine.add("-bootclasspath")[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_4 $$ cmdLine.add(javaExecutable)[ FD ]
Line_5 $$ for (String param : vmParams) -->Line_36 $$ cmdLine.add(param)[ FD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_8 $$ if (!bootClasspath.isEmpty()) [ FD ]
Line_15 $$ final Class wrapperClass = getCommandLineWrapperClass()-->Line_16 $$ if (wrapperClass != null) [ FD ]
Line_13 $$ List<String> commandLineWrapperArgs = null-->Line_27 $$ if (commandLineWrapperArgs != null) [ FD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_34 $$ cmdLine.add(mainClass)[ FD ]
Line_13 $$ List<String> commandLineWrapperArgs = null-->Line_19 $$ commandLineWrapperArgs = Arrays.asList("-classpath", classpathFile)[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_10 $$ cmdLine.add(StringUtil.join(bootClasspath, File.pathSeparator))[ FD ]
Line_19 $$ commandLineWrapperArgs = Arrays.asList("-classpath", classpathFile)-->Line_27 $$ if (commandLineWrapperArgs != null) [ FD ]
Line_5 $$ for (String param : vmParams) -->Line_6 $$ cmdLine.add(param)[ FD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_12 $$ if (!classpath.isEmpty()) [ CD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_31 $$ cmdLine.add(StringUtil.join(classpath, File.pathSeparator))[ FD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_8 $$ if (!bootClasspath.isEmpty()) [ CD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_18 $$ final String classpathFile = CommandLineWrapperUtil.createClasspathJarFile(new Manifest(), classpath).getAbsolutePath()[ FD ]
Line_27 $$ if (commandLineWrapperArgs != null) -->Line_28 $$ cmdLine.addAll(commandLineWrapperArgs)[ CD ]
Line_14 $$ if (useCommandLineWrapper) -->Line_16 $$ if (wrapperClass != null) [ CD ]
Line_16 $$ if (wrapperClass != null) -->Line_24 $$ LOG.info("CommandLineWrapper class not found, classpath wrapper will not be used")[ CD ]
Line_27 $$ if (commandLineWrapperArgs != null) -->Line_30 $$ cmdLine.add("-classpath")[ CD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_4 $$ cmdLine.add(javaExecutable)[ FD ]
Line_12 $$ if (!classpath.isEmpty()) -->Line_14 $$ if (useCommandLineWrapper) [ CD ]
Line_8 $$ if (!bootClasspath.isEmpty()) -->Line_9 $$ cmdLine.add("-bootclasspath")[ CD ]
Line_19 $$ commandLineWrapperArgs = Arrays.asList("-classpath", classpathFile)-->Line_28 $$ cmdLine.addAll(commandLineWrapperArgs)[ FD ]
Line_27 $$ if (commandLineWrapperArgs != null) -->Line_31 $$ cmdLine.add(StringUtil.join(classpath, File.pathSeparator))[ CD ]
Line_2 $$ public static List<String> buildJavaCommandLine(String javaExecutable, String mainClass, List<String> bootClasspath, List<String> classpath, List<String> vmParams, List<String> programParams, final boolean useCommandLineWrapper) -->Line_12 $$ if (!classpath.isEmpty()) [ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_6 $$ cmdLine.add(param)[ FD ]
