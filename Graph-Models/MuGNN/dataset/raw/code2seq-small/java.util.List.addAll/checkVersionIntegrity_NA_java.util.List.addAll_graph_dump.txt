Line_5 $$ if (!apiIds.containsKey(version)) -->Line_7 $$ activeVersions.remove(version)[ CD ]
Line_4 $$ for (String version : allVersions) -->Line_6 $$ JSFLogger.ROOT_LOGGER.missingJSFModule(version, API_MODULE)[ FD ]
Line_4 $$ for (String version : allVersions) -->Line_9 $$ if (!implIds.containsKey(version)) [ FD ]
Line_4 $$ for (String version : allVersions) -->Line_11 $$ activeVersions.remove(version)[ FD ]
Line_4 $$ for (String version : allVersions) -->Line_15 $$ activeVersions.remove(version)[ FD ]
Line_4 $$ for (String version : allVersions) -->Line_13 $$ if (!injectionIds.containsKey(version)) [ FD ]
Line_4 $$ for (String version : allVersions) -->Line_5 $$ if (!apiIds.containsKey(version)) [ FD ]
Line_2 $$ private void checkVersionIntegrity() -->Line_3 $$ activeVersions.addAll(allVersions)[ CD ]
Line_4 $$ for (String version : allVersions) -->Line_10 $$ JSFLogger.ROOT_LOGGER.missingJSFModule(version, IMPL_MODULE)[ FD ]
Line_9 $$ if (!implIds.containsKey(version)) -->Line_11 $$ activeVersions.remove(version)[ CD ]
Line_4 $$ for (String version : allVersions) -->Line_14 $$ JSFLogger.ROOT_LOGGER.missingJSFModule(version, INJECTION_MODULE)[ FD ]
Line_13 $$ if (!injectionIds.containsKey(version)) -->Line_14 $$ JSFLogger.ROOT_LOGGER.missingJSFModule(version, INJECTION_MODULE)[ CD ]
Line_13 $$ if (!injectionIds.containsKey(version)) -->Line_15 $$ activeVersions.remove(version)[ CD ]
Line_9 $$ if (!implIds.containsKey(version)) -->Line_10 $$ JSFLogger.ROOT_LOGGER.missingJSFModule(version, IMPL_MODULE)[ CD ]
Line_5 $$ if (!apiIds.containsKey(version)) -->Line_6 $$ JSFLogger.ROOT_LOGGER.missingJSFModule(version, API_MODULE)[ CD ]
Line_4 $$ for (String version : allVersions) -->Line_7 $$ activeVersions.remove(version)[ FD ]
