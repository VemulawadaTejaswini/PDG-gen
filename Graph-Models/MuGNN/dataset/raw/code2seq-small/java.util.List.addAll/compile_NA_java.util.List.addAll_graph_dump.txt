Line_2 $$ private void compile(List<File> sourceFiles) throws Exception -->Line_5 $$ DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>()[ CD ]
Line_7 $$ Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(sourceFiles)-->Line_8 $$ compileSources(options, compiler, diagnostics, fileManager, compilationUnits)[ FD ]
Line_2 $$ private void compile(List<File> sourceFiles) throws Exception -->Line_6 $$ StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null)[ CD ]
Line_3 $$ List<String> options = createJavaOptions()-->Line_8 $$ compileSources(options, compiler, diagnostics, fileManager, compilationUnits)[ FD ]
Line_5 $$ DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>()-->Line_6 $$ StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null)[ FD ]
Line_2 $$ private void compile(List<File> sourceFiles) throws Exception -->Line_7 $$ Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(sourceFiles)[ CD ]
Line_2 $$ private void compile(List<File> sourceFiles) throws Exception -->Line_4 $$ JavaCompiler compiler = ToolProvider.getSystemJavaCompiler()[ CD ]
Line_2 $$ private void compile(List<File> sourceFiles) throws Exception -->Line_8 $$ compileSources(options, compiler, diagnostics, fileManager, compilationUnits)[ CD ]
Line_6 $$ StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null)-->Line_8 $$ compileSources(options, compiler, diagnostics, fileManager, compilationUnits)[ FD ]
Line_4 $$ JavaCompiler compiler = ToolProvider.getSystemJavaCompiler()-->Line_8 $$ compileSources(options, compiler, diagnostics, fileManager, compilationUnits)[ FD ]
Line_2 $$ private void compile(List<File> sourceFiles) throws Exception -->Line_3 $$ List<String> options = createJavaOptions()[ CD ]
Line_6 $$ StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null)-->Line_7 $$ Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(sourceFiles)[ FD ]
Line_6 $$ StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null)-->Line_10 $$ fileManager.close()[ FD ]
Line_2 $$ private void compile(List<File> sourceFiles) throws Exception -->Line_10 $$ fileManager.close()[ CD ]
Line_4 $$ JavaCompiler compiler = ToolProvider.getSystemJavaCompiler()-->Line_6 $$ StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null)[ FD ]
Line_2 $$ private void compile(List<File> sourceFiles) throws Exception -->Line_7 $$ Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(sourceFiles)[ FD ]
Line_2 $$ private void compile(List<File> sourceFiles) throws Exception -->Line_9 $$ compilationDiagnostics.addAll(diagnostics.getDiagnostics())[ CD ]
Line_5 $$ DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>()-->Line_8 $$ compileSources(options, compiler, diagnostics, fileManager, compilationUnits)[ FD ]
Line_5 $$ DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>()-->Line_9 $$ compilationDiagnostics.addAll(diagnostics.getDiagnostics())[ FD ]
