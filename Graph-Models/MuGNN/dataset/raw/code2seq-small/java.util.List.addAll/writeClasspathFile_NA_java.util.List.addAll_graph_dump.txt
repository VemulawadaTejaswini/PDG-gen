Line_18 $$ if (dirName.equals("global")) -->Line_20 $$ File dir = new File(PropsValues.LIFERAY_LIB_GLOBAL_DIR)[ CD ]
Line_24 $$ if (dirName.equals("portal")) -->Line_29 $$ portalJars.removeAll(extPortalJars)[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_89 $$ addClasspathEntry(sb, "/portal/lib/global/" + jar, attributes)[ FD ]
Line_123 $$ if (content.contains("test->default")) -->Line_125 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_136 $$ System.out.println("Updating " + classpathFile)[ CD ]
Line_12 $$ String libDirPath = StringUtil.replace(libDir.getPath(), StringPool.BACK_SLASH, StringPool.SLASH)-->Line_85 $$ if (libDirPath.contains("/ext/")) [ FD ]
Line_10 $$ Set<String> extGlobalJars = new LinkedHashSet()-->Line_23 $$ globalJars.removeAll(extGlobalJars)[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_100 $$ addClasspathEntry(sb, "/portal/util-java/util-java.jar")[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_73 $$ addClasspathEntry(sb, "/portal/lib/development/powermock-module-junit4.jar")[ FD ]
Line_38 $$ portalJars = ListUtil.unique(portalJars)-->Line_76 $$ portalJars.add("commons-io.jar")[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_12 $$ String libDirPath = StringUtil.replace(libDir.getPath(), StringPool.BACK_SLASH, StringPool.SLASH)[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_69 $$ addClasspathEntry(sb, "/portal/lib/development/mockito.jar")[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_134 $$ sb.append("\t<classpathentry kind=\"output\" path=\"bin\" />\n")[ CD ]
Line_84 $$ Map<String, String> attributes = new HashMap()-->Line_86 $$ attributes.put("optional", "true")[ FD ]
Line_123 $$ if (content.contains("test->default")) -->Line_124 $$ String ivyDirName = ".ivy"[ CD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_39 $$ Collections.sort(portalJars)[ FD ]
Line_11 $$ Set<String> extPortalJars = new LinkedHashSet()-->Line_25 $$ extPortalJars.addAll(ListUtil.sort(jars))[ FD ]
Line_67 $$ if (addJunitJars) -->Line_70 $$ addClasspathEntry(sb, "/portal/lib/development/powermock-api-mockito.jar")[ CD ]
Line_38 $$ portalJars = ListUtil.unique(portalJars)-->Line_101 $$ if (portalJars.contains("util-slf4j.jar")) [ FD ]
Line_4 $$ if (!javaProject) -->Line_6 $$ return[ CD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_34 $$ portalJars.addAll(dependencyJars)[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_92 $$ Collections.sort(portalJars)[ CD ]
Line_44 $$ customJars = ListUtil.toList(customJarsArray)-->Line_46 $$ customJars.remove(jar)[ FD ]
Line_20 $$ File dir = new File(PropsValues.LIFERAY_LIB_GLOBAL_DIR)-->Line_27 $$ String[] fileNames = dir.list(filenameFilter)[ FD ]
Line_17 $$ List<String> jars = ListUtil.toList(file.list(filenameFilter))-->Line_25 $$ extPortalJars.addAll(ListUtil.sort(jars))[ FD ]
Line_13 $$ if (libDirPath.contains("/ext/")) -->Line_36 $$ portalJars.add("commons-logging.jar")[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_135 $$ sb.append("</classpath>")[ CD ]
Line_42 $$ List<String> customJars = null-->Line_52 $$ Collections.sort(customJars)[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_84 $$ Map<String, String> attributes = new HashMap()[ CD ]
Line_10 $$ Set<String> extGlobalJars = new LinkedHashSet()-->Line_19 $$ extGlobalJars.addAll(ListUtil.sort(jars))[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_102 $$ addClasspathEntry(sb, "/portal/util-slf4j/util-slf4j.jar")[ FD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_76 $$ portalJars.add("commons-io.jar")[ FD ]
Line_13 $$ if (libDirPath.contains("/ext/")) -->Line_35 $$ portalJars.add("bnd.jar")[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_104 $$ addClasspathEntry(sb, "/portal/util-taglib/util-taglib.jar")[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_64 $$ sb.append("\" />\n")[ FD ]
Line_20 $$ File dir = new File(PropsValues.LIFERAY_LIB_GLOBAL_DIR)-->Line_21 $$ String[] fileNames = dir.list(filenameFilter)[ FD ]
Line_44 $$ customJars = ListUtil.toList(customJarsArray)-->Line_51 $$ customJars.remove("util-taglib.jar")[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_91 $$ portalJars = ListUtil.unique(portalJars)[ CD ]
Line_11 $$ Set<String> extPortalJars = new LinkedHashSet()-->Line_29 $$ portalJars.removeAll(extPortalJars)[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_137 $$ String content = StringUtil.replace(sb.toString(), "\"/portal", "\"/portal-" + _BRANCH)[ CD ]
Line_16 $$ File file = new File(libDirPath + "/../ext-lib/" + dirName)-->Line_17 $$ List<String> jars = ListUtil.toList(file.list(filenameFilter))[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_82 $$ addClasspathEntry(sb, "/portal/lib/development/mail.jar")[ FD ]
Line_94 $$ if (!jar.equals("util-slf4j.jar")) -->Line_95 $$ addClasspathEntry(sb, "/portal/lib/portal/" + jar, attributes)[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_74 $$ addClasspathEntry(sb, "/portal/lib/development/powermock-module-junit4-common.jar")[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_80 $$ addClasspathEntry(sb, "/portal/lib/development/annotations.jar")[ CD ]
Line_60 $$ if (_fileUtil.exists(projectDirName + "/" + sourceDirName)) -->Line_63 $$ sb.append(testFolder)[ CD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_38 $$ portalJars = ListUtil.unique(portalJars)[ FD ]
Line_43 $$ if (customJarsArray != null) -->Line_52 $$ Collections.sort(customJars)[ CD ]
Line_14 $$ FilenameFilter filenameFilter = new GlobFilenameFilter("*.jar")-->Line_21 $$ String[] fileNames = dir.list(filenameFilter)[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_4 $$ if (!javaProject) [ FD ]
Line_21 $$ String[] fileNames = dir.list(filenameFilter)-->Line_22 $$ globalJars.addAll(ListUtil.sort(ListUtil.toList(fileNames)))[ FD ]
Line_12 $$ String libDirPath = StringUtil.replace(libDir.getPath(), StringPool.BACK_SLASH, StringPool.SLASH)-->Line_112 $$ if (libDirPath.contains("/tmp/WEB-INF/lib")) [ FD ]
Line_44 $$ customJars = ListUtil.toList(customJarsArray)-->Line_49 $$ customJars.remove("util-bridges.jar")[ FD ]
Line_42 $$ List<String> customJars = null-->Line_49 $$ customJars.remove("util-bridges.jar")[ FD ]
Line_18 $$ if (dirName.equals("global")) -->Line_19 $$ extGlobalJars.addAll(ListUtil.sort(jars))[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_61 $$ sb.append("\t<classpathentry excluding=\"**/.svn.svn/**|.svn/\" ")[ FD ]
Line_42 $$ List<String> customJars = null-->Line_51 $$ customJars.remove("util-taglib.jar")[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_79 $$ addClasspathEntry(sb, "/portal/lib/development/activation.jar")[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_12 $$ String libDirPath = StringUtil.replace(libDir.getPath(), StringPool.BACK_SLASH, StringPool.SLASH)[ CD ]
Line_91 $$ portalJars = ListUtil.unique(portalJars)-->Line_101 $$ if (portalJars.contains("util-slf4j.jar")) [ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_98 $$ addClasspathEntry(sb, "/portal/portal-service/portal-service.jar")[ CD ]
Line_21 $$ String[] fileNames = dir.list(filenameFilter)-->Line_28 $$ portalJars.addAll(ListUtil.sort(ListUtil.toList(fileNames)))[ FD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_35 $$ portalJars.add("bnd.jar")[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_83 $$ addClasspathEntry(sb, "/portal/lib/development/servlet-api.jar")[ CD ]
Line_43 $$ if (customJarsArray != null) -->Line_50 $$ customJars.remove("util-java.jar")[ CD ]
Line_42 $$ List<String> customJars = null-->Line_54 $$ customJars = new ArrayList()[ FD ]
Line_42 $$ List<String> customJars = null-->Line_50 $$ customJars.remove("util-java.jar")[ FD ]
Line_43 $$ if (customJarsArray != null) -->Line_54 $$ customJars = new ArrayList()[ CD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_91 $$ portalJars = ListUtil.unique(portalJars)[ FD ]
Line_24 $$ if (dirName.equals("portal")) -->Line_28 $$ portalJars.addAll(ListUtil.sort(ListUtil.toList(fileNames)))[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_67 $$ if (addJunitJars) [ CD ]
Line_15 $$ for (String dirName : new String[] -->Line_24 $$ if (dirName.equals("portal")) [ FD ]
Line_8 $$ Set<String> globalJars = new LinkedHashSet()-->Line_22 $$ globalJars.addAll(ListUtil.sort(ListUtil.toList(fileNames)))[ FD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_28 $$ portalJars.addAll(ListUtil.sort(ListUtil.toList(fileNames)))[ FD ]
Line_3 $$ File classpathFile = new File(projectDirName + "/.classpath")-->Line_138 $$ _fileUtil.write(classpathFile, content)[ FD ]
Line_17 $$ List<String> jars = ListUtil.toList(file.list(filenameFilter))-->Line_19 $$ extGlobalJars.addAll(ListUtil.sort(jars))[ FD ]
Line_14 $$ FilenameFilter filenameFilter = new GlobFilenameFilter("*.jar")-->Line_17 $$ List<String> jars = ListUtil.toList(file.list(filenameFilter))[ FD ]
Line_67 $$ if (addJunitJars) -->Line_69 $$ addClasspathEntry(sb, "/portal/lib/development/mockito.jar")[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_113 $$ addClasspathEntry(sb, "tmp/WEB-INF/lib/" + jar)[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_117 $$ addClasspathEntry(sb, "lib/" + jar)[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_81 $$ addClasspathEntry(sb, "/portal/lib/development/jsp-api.jar")[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_57 $$ sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n")[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_99 $$ addClasspathEntry(sb, "/portal/util-bridges/util-bridges.jar")[ FD ]
Line_67 $$ if (addJunitJars) -->Line_71 $$ addClasspathEntry(sb, "/portal/lib/development/powermock-api-support.jar")[ CD ]
Line_112 $$ if (libDirPath.contains("/tmp/WEB-INF/lib")) -->Line_113 $$ addClasspathEntry(sb, "tmp/WEB-INF/lib/" + jar)[ CD ]
Line_3 $$ File classpathFile = new File(projectDirName + "/.classpath")-->Line_5 $$ classpathFile.delete()[ FD ]
Line_43 $$ if (customJarsArray != null) -->Line_51 $$ customJars.remove("util-taglib.jar")[ CD ]
Line_85 $$ if (libDirPath.contains("/ext/")) -->Line_86 $$ attributes.put("optional", "true")[ CD ]
Line_13 $$ if (libDirPath.contains("/ext/")) -->Line_14 $$ FilenameFilter filenameFilter = new GlobFilenameFilter("*.jar")[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_58 $$ sb.append("<classpath>\n")[ FD ]
Line_43 $$ if (customJarsArray != null) -->Line_48 $$ customJars.remove(projectName + "-service.jar")[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_42 $$ List<String> customJars = null[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_115 $$ addClasspathEntry(sb, "docroot/WEB-INF/lib/" + jar)[ FD ]
Line_38 $$ portalJars = ListUtil.unique(portalJars)-->Line_39 $$ Collections.sort(portalJars)[ FD ]
Line_114 $$ if (libDirPath.contains("/docroot/WEB-INF/lib")) -->Line_115 $$ addClasspathEntry(sb, "docroot/WEB-INF/lib/" + jar)[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_68 $$ addClasspathEntry(sb, "/portal/lib/development/junit.jar")[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_81 $$ addClasspathEntry(sb, "/portal/lib/development/jsp-api.jar")[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_106 $$ addClasspathEntry(sb, "docroot/WEB-INF/ext-lib/global/" + jar)[ FD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_101 $$ if (portalJars.contains("util-slf4j.jar")) [ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_137 $$ String content = StringUtil.replace(sb.toString(), "\"/portal", "\"/portal-" + _BRANCH)[ FD ]
Line_41 $$ String[] customJarsArray = libDir.list(new GlobFilenameFilter("*.jar"))-->Line_43 $$ if (customJarsArray != null) [ FD ]
Line_67 $$ if (addJunitJars) -->Line_68 $$ addClasspathEntry(sb, "/portal/lib/development/junit.jar")[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_4 $$ if (!javaProject) [ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_10 $$ Set<String> extGlobalJars = new LinkedHashSet()[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_34 $$ portalJars.addAll(dependencyJars)[ FD ]
Line_60 $$ if (_fileUtil.exists(projectDirName + "/" + sourceDirName)) -->Line_64 $$ sb.append("\" />\n")[ CD ]
Line_14 $$ FilenameFilter filenameFilter = new GlobFilenameFilter("*.jar")-->Line_27 $$ String[] fileNames = dir.list(filenameFilter)[ FD ]
Line_42 $$ List<String> customJars = null-->Line_48 $$ customJars.remove(projectName + "-service.jar")[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_70 $$ addClasspathEntry(sb, "/portal/lib/development/powermock-api-mockito.jar")[ FD ]
Line_44 $$ customJars = ListUtil.toList(customJarsArray)-->Line_52 $$ Collections.sort(customJars)[ FD ]
Line_45 $$ for (String jar : portalJars) -->Line_94 $$ if (!jar.equals("util-slf4j.jar")) [ FD ]
Line_84 $$ Map<String, String> attributes = new HashMap()-->Line_95 $$ addClasspathEntry(sb, "/portal/lib/portal/" + jar, attributes)[ FD ]
Line_112 $$ if (libDirPath.contains("/tmp/WEB-INF/lib")) -->Line_114 $$ if (libDirPath.contains("/docroot/WEB-INF/lib")) [ CD ]
Line_129 $$ ivyDirName = "../" + ivyDirName-->Line_131 $$ addIvyCacheJars(sb, content, ivyDirName)[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_3 $$ File classpathFile = new File(projectDirName + "/.classpath")[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_75 $$ addClasspathEntry(sb, "/portal/lib/development/spring-test.jar")[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_57 $$ sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n")[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_79 $$ addClasspathEntry(sb, "/portal/lib/development/activation.jar")[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_95 $$ addClasspathEntry(sb, "/portal/lib/portal/" + jar, attributes)[ FD ]
Line_18 $$ if (dirName.equals("global")) -->Line_21 $$ String[] fileNames = dir.list(filenameFilter)[ CD ]
Line_12 $$ String libDirPath = StringUtil.replace(libDir.getPath(), StringPool.BACK_SLASH, StringPool.SLASH)-->Line_114 $$ if (libDirPath.contains("/docroot/WEB-INF/lib")) [ FD ]
Line_125 $$ for (int i = 0; i < 10; i++) -->Line_126 $$ if (_fileUtil.exists(ivyDirName)) [ CD ]
Line_121 $$ if (ivyXmlFile.exists()) -->Line_122 $$ String content = _fileUtil.read(ivyXmlFile)[ CD ]
Line_129 $$ ivyDirName = "../" + ivyDirName-->Line_126 $$ if (_fileUtil.exists(ivyDirName)) [ FD ]
Line_122 $$ String content = _fileUtil.read(ivyXmlFile)-->Line_138 $$ _fileUtil.write(classpathFile, content)[ FD ]
Line_13 $$ if (libDirPath.contains("/ext/")) -->Line_34 $$ portalJars.addAll(dependencyJars)[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_82 $$ addClasspathEntry(sb, "/portal/lib/development/mail.jar")[ CD ]
Line_43 $$ if (customJarsArray != null) -->Line_49 $$ customJars.remove("util-bridges.jar")[ CD ]
Line_122 $$ String content = _fileUtil.read(ivyXmlFile)-->Line_123 $$ if (content.contains("test->default")) [ FD ]
Line_38 $$ portalJars = ListUtil.unique(portalJars)-->Line_77 $$ portalJars.add("commons-lang.jar")[ FD ]
Line_120 $$ File ivyXmlFile = new File(projectDirName, "ivy.xml")-->Line_122 $$ String content = _fileUtil.read(ivyXmlFile)[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_135 $$ sb.append("</classpath>")[ FD ]
Line_122 $$ String content = _fileUtil.read(ivyXmlFile)-->Line_131 $$ addIvyCacheJars(sb, content, ivyDirName)[ FD ]
Line_60 $$ if (_fileUtil.exists(projectDirName + "/" + sourceDirName)) -->Line_61 $$ sb.append("\t<classpathentry excluding=\"**/.svn.svn/**|.svn/\" ")[ CD ]
Line_67 $$ if (addJunitJars) -->Line_74 $$ addClasspathEntry(sb, "/portal/lib/development/powermock-module-junit4-common.jar")[ CD ]
Line_67 $$ if (addJunitJars) -->Line_77 $$ portalJars.add("commons-lang.jar")[ CD ]
Line_123 $$ if (content.contains("test->default")) -->Line_131 $$ addIvyCacheJars(sb, content, ivyDirName)[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_72 $$ addClasspathEntry(sb, "/portal/lib/development/powermock-core.jar")[ FD ]
Line_8 $$ Set<String> globalJars = new LinkedHashSet()-->Line_33 $$ globalJars.add("portlet.jar")[ FD ]
Line_38 $$ portalJars = ListUtil.unique(portalJars)-->Line_92 $$ Collections.sort(portalJars)[ FD ]
Line_67 $$ if (addJunitJars) -->Line_72 $$ addClasspathEntry(sb, "/portal/lib/development/powermock-core.jar")[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_13 $$ if (libDirPath.contains("/ext/")) [ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_100 $$ addClasspathEntry(sb, "/portal/util-java/util-java.jar")[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_62 $$ sb.append("kind=\"src\" path=\"")[ FD ]
Line_67 $$ if (addJunitJars) -->Line_75 $$ addClasspathEntry(sb, "/portal/lib/development/spring-test.jar")[ CD ]
Line_124 $$ String ivyDirName = ".ivy"-->Line_129 $$ ivyDirName = "../" + ivyDirName[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_11 $$ Set<String> extPortalJars = new LinkedHashSet()[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_43 $$ if (customJarsArray != null) [ CD ]
Line_15 $$ for (String dirName : new String[] -->Line_18 $$ if (dirName.equals("global")) [ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_104 $$ addClasspathEntry(sb, "/portal/util-taglib/util-taglib.jar")[ CD ]
Line_101 $$ if (portalJars.contains("util-slf4j.jar")) -->Line_102 $$ addClasspathEntry(sb, "/portal/util-slf4j/util-slf4j.jar")[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_138 $$ _fileUtil.write(classpathFile, content)[ CD ]
Line_24 $$ if (dirName.equals("portal")) -->Line_25 $$ extPortalJars.addAll(ListUtil.sort(jars))[ CD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_77 $$ portalJars.add("commons-lang.jar")[ FD ]
Line_124 $$ String ivyDirName = ".ivy"-->Line_131 $$ addIvyCacheJars(sb, content, ivyDirName)[ FD ]
Line_12 $$ String libDirPath = StringUtil.replace(libDir.getPath(), StringPool.BACK_SLASH, StringPool.SLASH)-->Line_13 $$ if (libDirPath.contains("/ext/")) [ FD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_92 $$ Collections.sort(portalJars)[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_41 $$ String[] customJarsArray = libDir.list(new GlobFilenameFilter("*.jar"))[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_58 $$ sb.append("<classpath>\n")[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_9 $$ List<String> portalJars = new ArrayList()[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_80 $$ addClasspathEntry(sb, "/portal/lib/development/annotations.jar")[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_41 $$ String[] customJarsArray = libDir.list(new GlobFilenameFilter("*.jar"))[ CD ]
Line_41 $$ String[] customJarsArray = libDir.list(new GlobFilenameFilter("*.jar"))-->Line_44 $$ customJars = ListUtil.toList(customJarsArray)[ FD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_36 $$ portalJars.add("commons-logging.jar")[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_85 $$ if (libDirPath.contains("/ext/")) [ CD ]
Line_124 $$ String ivyDirName = ".ivy"-->Line_126 $$ if (_fileUtil.exists(ivyDirName)) [ FD ]
Line_67 $$ if (addJunitJars) -->Line_73 $$ addClasspathEntry(sb, "/portal/lib/development/powermock-module-junit4.jar")[ CD ]
Line_84 $$ Map<String, String> attributes = new HashMap()-->Line_89 $$ addClasspathEntry(sb, "/portal/lib/global/" + jar, attributes)[ FD ]
Line_4 $$ if (!javaProject) -->Line_5 $$ classpathFile.delete()[ CD ]
Line_44 $$ customJars = ListUtil.toList(customJarsArray)-->Line_54 $$ customJars = new ArrayList()[ FD ]
Line_114 $$ if (libDirPath.contains("/docroot/WEB-INF/lib")) -->Line_117 $$ addClasspathEntry(sb, "lib/" + jar)[ CD ]
Line_44 $$ customJars = ListUtil.toList(customJarsArray)-->Line_50 $$ customJars.remove("util-java.jar")[ FD ]
Line_18 $$ if (dirName.equals("global")) -->Line_24 $$ if (dirName.equals("portal")) [ CD ]
Line_42 $$ List<String> customJars = null-->Line_44 $$ customJars = ListUtil.toList(customJarsArray)[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_101 $$ if (portalJars.contains("util-slf4j.jar")) [ CD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_29 $$ portalJars.removeAll(extPortalJars)[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_131 $$ addIvyCacheJars(sb, content, ivyDirName)[ FD ]
Line_13 $$ if (libDirPath.contains("/ext/")) -->Line_37 $$ portalJars.add("log4j.jar")[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_8 $$ Set<String> globalJars = new LinkedHashSet()[ CD ]
Line_8 $$ Set<String> globalJars = new LinkedHashSet()-->Line_23 $$ globalJars.removeAll(extGlobalJars)[ FD ]
Line_38 $$ portalJars = ListUtil.unique(portalJars)-->Line_91 $$ portalJars = ListUtil.unique(portalJars)[ FD ]
Line_13 $$ if (libDirPath.contains("/ext/")) -->Line_33 $$ globalJars.add("portlet.jar")[ CD ]
Line_60 $$ if (_fileUtil.exists(projectDirName + "/" + sourceDirName)) -->Line_62 $$ sb.append("kind=\"src\" path=\"")[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_63 $$ sb.append(testFolder)[ FD ]
Line_18 $$ if (dirName.equals("global")) -->Line_22 $$ globalJars.addAll(ListUtil.sort(ListUtil.toList(fileNames)))[ CD ]
Line_24 $$ if (dirName.equals("portal")) -->Line_27 $$ String[] fileNames = dir.list(filenameFilter)[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_99 $$ addClasspathEntry(sb, "/portal/util-bridges/util-bridges.jar")[ CD ]
Line_44 $$ customJars = ListUtil.toList(customJarsArray)-->Line_48 $$ customJars.remove(projectName + "-service.jar")[ FD ]
Line_125 $$ for (int i = 0; i < 10; i++) -->Line_129 $$ ivyDirName = "../" + ivyDirName[ CD ]
Line_9 $$ List<String> portalJars = new ArrayList()-->Line_37 $$ portalJars.add("log4j.jar")[ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_134 $$ sb.append("\t<classpathentry kind=\"output\" path=\"bin\" />\n")[ FD ]
Line_13 $$ if (libDirPath.contains("/ext/")) -->Line_39 $$ Collections.sort(portalJars)[ CD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_120 $$ File ivyXmlFile = new File(projectDirName, "ivy.xml")[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_83 $$ addClasspathEntry(sb, "/portal/lib/development/servlet-api.jar")[ FD ]
Line_13 $$ if (libDirPath.contains("/ext/")) -->Line_38 $$ portalJars = ListUtil.unique(portalJars)[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_98 $$ addClasspathEntry(sb, "/portal/portal-service/portal-service.jar")[ FD ]
Line_43 $$ if (customJarsArray != null) -->Line_44 $$ customJars = ListUtil.toList(customJarsArray)[ CD ]
Line_45 $$ for (String jar : portalJars) -->Line_46 $$ customJars.remove(jar)[ FD ]
Line_42 $$ List<String> customJars = null-->Line_46 $$ customJars.remove(jar)[ FD ]
Line_91 $$ portalJars = ListUtil.unique(portalJars)-->Line_92 $$ Collections.sort(portalJars)[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_121 $$ if (ivyXmlFile.exists()) [ CD ]
Line_121 $$ if (ivyXmlFile.exists()) -->Line_123 $$ if (content.contains("test->default")) [ CD ]
Line_18 $$ if (dirName.equals("global")) -->Line_23 $$ globalJars.removeAll(extGlobalJars)[ CD ]
Line_120 $$ File ivyXmlFile = new File(projectDirName, "ivy.xml")-->Line_121 $$ if (ivyXmlFile.exists()) [ FD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_71 $$ addClasspathEntry(sb, "/portal/lib/development/powermock-api-support.jar")[ FD ]
Line_67 $$ if (addJunitJars) -->Line_76 $$ portalJars.add("commons-io.jar")[ CD ]
Line_56 $$ StringBundler sb = new StringBundler()-->Line_109 $$ addClasspathEntry(sb, "docroot/WEB-INF/ext-lib/portal/" + jar)[ FD ]
Line_2 $$ protected void writeClasspathFile(File libDir, List<String> dependencyJars, String projectDirName, String projectName, boolean javaProject) throws Exception -->Line_56 $$ StringBundler sb = new StringBundler()[ CD ]
