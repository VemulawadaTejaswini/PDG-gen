Line_21 $$ final Set<Pair<String, Boolean>> processed = Sets.newHashSet()-->Line_49 $$ processed.add(paramCoordinates)[ FD ]
Line_27 $$ if (param.getType() == null) -->Line_36 $$ if (type != null) [ CD ]
Line_7 $$ final Map<Pair<String, Boolean>, String> paramTypes = Maps.newHashMap()-->Line_12 $$ paramTypes.put(Pair.create(param.getName(), param.isReturnValue()), param.getType())[ FD ]
Line_20 $$ final ArrayList<DocstringParam> filtered = Lists.newArrayList()-->Line_41 $$ filtered.add(new DocstringParam(param.getName(), type, param.isReturnValue()))[ FD ]
Line_6 $$ final Set<Pair<String, Boolean>> withoutType = Sets.newHashSet()-->Line_10 $$ withoutType.add(Pair.create(param.getName(), param.isReturnValue()))[ FD ]
Line_7 $$ final Map<Pair<String, Boolean>, String> paramTypes = Maps.newHashMap()-->Line_28 $$ String type = paramTypes.get(paramCoordinates)[ FD ]
Line_8 $$ for (DocstringParam param : myAddedParams) -->Line_31 $$ type = StringUtil.notNullize(signature.getArgTypeQualifiedName(param.getName()))[ FD ]
Line_36 $$ if (type != null) -->Line_37 $$ if (format == DocStringFormat.GOOGLE || format == DocStringFormat.NUMPY) [ CD ]
Line_20 $$ final ArrayList<DocstringParam> filtered = Lists.newArrayList()-->Line_44 $$ filtered.add(param)[ FD ]
Line_46 $$ if (!withoutType.contains(paramCoordinates)) -->Line_47 $$ filtered.add(param)[ CD ]
Line_8 $$ for (DocstringParam param : myAddedParams) -->Line_47 $$ filtered.add(param)[ FD ]
Line_31 $$ type = StringUtil.notNullize(signature.getArgTypeQualifiedName(param.getName()))-->Line_36 $$ if (type != null) [ FD ]
Line_20 $$ final ArrayList<DocstringParam> filtered = Lists.newArrayList()-->Line_47 $$ filtered.add(param)[ FD ]
Line_8 $$ for (DocstringParam param : myAddedParams) -->Line_40 $$ filtered.add(param)[ FD ]
Line_2 $$ private void prepareParameters() -->Line_20 $$ final ArrayList<DocstringParam> filtered = Lists.newArrayList()[ CD ]
Line_2 $$ private void prepareParameters() -->Line_21 $$ final Set<Pair<String, Boolean>> processed = Sets.newHashSet()[ CD ]
Line_21 $$ final Set<Pair<String, Boolean>> processed = Sets.newHashSet()-->Line_24 $$ if (processed.contains(paramCoordinates)) [ FD ]
Line_23 $$ final Pair<String, Boolean> paramCoordinates = Pair.create(param.getName(), param.isReturnValue())-->Line_49 $$ processed.add(paramCoordinates)[ FD ]
Line_30 $$ if (signature != null) -->Line_31 $$ type = StringUtil.notNullize(signature.getArgTypeQualifiedName(param.getName()))[ CD ]
Line_20 $$ final ArrayList<DocstringParam> filtered = Lists.newArrayList()-->Line_40 $$ filtered.add(param)[ FD ]
Line_8 $$ for (DocstringParam param : myAddedParams) -->Line_44 $$ filtered.add(param)[ FD ]
Line_27 $$ if (param.getType() == null) -->Line_28 $$ String type = paramTypes.get(paramCoordinates)[ CD ]
Line_23 $$ final Pair<String, Boolean> paramCoordinates = Pair.create(param.getName(), param.isReturnValue())-->Line_28 $$ String type = paramTypes.get(paramCoordinates)[ FD ]
Line_28 $$ String type = paramTypes.get(paramCoordinates)-->Line_33 $$ type = ""[ FD ]
Line_2 $$ private void prepareParameters() -->Line_3 $$ if (myParametersPrepared) [ CD ]
Line_2 $$ private void prepareParameters() -->Line_15 $$ PySignature signature = null[ CD ]
Line_2 $$ private void prepareParameters() -->Line_16 $$ if (myDocStringOwner instanceof PyFunction && myUseTypesFromDebuggerSignature) [ CD ]
Line_2 $$ private void prepareParameters() -->Line_19 $$ final DocStringFormat format = myDocStringFormat[ CD ]
Line_37 $$ if (format == DocStringFormat.GOOGLE || format == DocStringFormat.NUMPY) -->Line_41 $$ filtered.add(new DocstringParam(param.getName(), type, param.isReturnValue()))[ CD ]
Line_9 $$ if (param.getType() == null) -->Line_12 $$ paramTypes.put(Pair.create(param.getName(), param.isReturnValue()), param.getType())[ CD ]
Line_15 $$ PySignature signature = null-->Line_17 $$ signature = PySignatureCacheManager.getInstance(myDocStringOwner.getProject()).findSignature((PyFunction) myDocStringOwner)[ FD ]
Line_17 $$ signature = PySignatureCacheManager.getInstance(myDocStringOwner.getProject()).findSignature((PyFunction) myDocStringOwner)-->Line_31 $$ type = StringUtil.notNullize(signature.getArgTypeQualifiedName(param.getName()))[ FD ]
Line_9 $$ if (param.getType() == null) -->Line_10 $$ withoutType.add(Pair.create(param.getName(), param.isReturnValue()))[ CD ]
Line_28 $$ String type = paramTypes.get(paramCoordinates)-->Line_36 $$ if (type != null) [ FD ]
Line_8 $$ for (DocstringParam param : myAddedParams) -->Line_9 $$ if (param.getType() == null) [ FD ]
Line_2 $$ private void prepareParameters() -->Line_52 $$ myAddedParams.addAll(filtered)[ CD ]
Line_37 $$ if (format == DocStringFormat.GOOGLE || format == DocStringFormat.NUMPY) -->Line_38 $$ filtered.add(new DocstringParam(param.getName(), type, param.isReturnValue()))[ CD ]
Line_8 $$ for (DocstringParam param : myAddedParams) -->Line_38 $$ filtered.add(new DocstringParam(param.getName(), type, param.isReturnValue()))[ FD ]
Line_27 $$ if (param.getType() == null) -->Line_46 $$ if (!withoutType.contains(paramCoordinates)) [ CD ]
Line_8 $$ for (DocstringParam param : myAddedParams) -->Line_12 $$ paramTypes.put(Pair.create(param.getName(), param.isReturnValue()), param.getType())[ FD ]
Line_8 $$ for (DocstringParam param : myAddedParams) -->Line_23 $$ final Pair<String, Boolean> paramCoordinates = Pair.create(param.getName(), param.isReturnValue())[ FD ]
Line_33 $$ type = ""-->Line_36 $$ if (type != null) [ FD ]
Line_8 $$ for (DocstringParam param : myAddedParams) -->Line_41 $$ filtered.add(new DocstringParam(param.getName(), type, param.isReturnValue()))[ FD ]
Line_29 $$ if (type == null && PyCodeInsightSettings.getInstance().INSERT_TYPE_DOCSTUB) -->Line_30 $$ if (signature != null) [ CD ]
Line_6 $$ final Set<Pair<String, Boolean>> withoutType = Sets.newHashSet()-->Line_46 $$ if (!withoutType.contains(paramCoordinates)) [ FD ]
Line_23 $$ final Pair<String, Boolean> paramCoordinates = Pair.create(param.getName(), param.isReturnValue())-->Line_46 $$ if (!withoutType.contains(paramCoordinates)) [ FD ]
Line_2 $$ private void prepareParameters() -->Line_51 $$ myAddedParams.clear()[ CD ]
Line_15 $$ PySignature signature = null-->Line_31 $$ type = StringUtil.notNullize(signature.getArgTypeQualifiedName(param.getName()))[ FD ]
Line_8 $$ for (DocstringParam param : myAddedParams) -->Line_10 $$ withoutType.add(Pair.create(param.getName(), param.isReturnValue()))[ FD ]
Line_36 $$ if (type != null) -->Line_44 $$ filtered.add(param)[ CD ]
Line_15 $$ PySignature signature = null-->Line_30 $$ if (signature != null) [ FD ]
Line_20 $$ final ArrayList<DocstringParam> filtered = Lists.newArrayList()-->Line_38 $$ filtered.add(new DocstringParam(param.getName(), type, param.isReturnValue()))[ FD ]
Line_30 $$ if (signature != null) -->Line_33 $$ type = ""[ CD ]
Line_2 $$ private void prepareParameters() -->Line_6 $$ final Set<Pair<String, Boolean>> withoutType = Sets.newHashSet()[ CD ]
Line_8 $$ for (DocstringParam param : myAddedParams) -->Line_27 $$ if (param.getType() == null) [ FD ]
Line_2 $$ private void prepareParameters() -->Line_7 $$ final Map<Pair<String, Boolean>, String> paramTypes = Maps.newHashMap()[ CD ]
Line_27 $$ if (param.getType() == null) -->Line_29 $$ if (type == null && PyCodeInsightSettings.getInstance().INSERT_TYPE_DOCSTUB) [ CD ]
Line_31 $$ type = StringUtil.notNullize(signature.getArgTypeQualifiedName(param.getName()))-->Line_33 $$ type = ""[ FD ]
Line_23 $$ final Pair<String, Boolean> paramCoordinates = Pair.create(param.getName(), param.isReturnValue())-->Line_24 $$ if (processed.contains(paramCoordinates)) [ FD ]
Line_28 $$ String type = paramTypes.get(paramCoordinates)-->Line_31 $$ type = StringUtil.notNullize(signature.getArgTypeQualifiedName(param.getName()))[ FD ]
Line_37 $$ if (format == DocStringFormat.GOOGLE || format == DocStringFormat.NUMPY) -->Line_40 $$ filtered.add(param)[ CD ]
Line_20 $$ final ArrayList<DocstringParam> filtered = Lists.newArrayList()-->Line_52 $$ myAddedParams.addAll(filtered)[ FD ]
Line_3 $$ if (myParametersPrepared) -->Line_4 $$ return[ CD ]
Line_16 $$ if (myDocStringOwner instanceof PyFunction && myUseTypesFromDebuggerSignature) -->Line_17 $$ signature = PySignatureCacheManager.getInstance(myDocStringOwner.getProject()).findSignature((PyFunction) myDocStringOwner)[ CD ]
Line_17 $$ signature = PySignatureCacheManager.getInstance(myDocStringOwner.getProject()).findSignature((PyFunction) myDocStringOwner)-->Line_30 $$ if (signature != null) [ FD ]
