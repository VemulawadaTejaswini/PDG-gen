Line_12 $$ if (closeBranch) -->Line_17 $$ parameters.add("--close-branch")[ CD ]
Line_2 $$ private void commitChunkFiles(@NotNull List<String> chunk, boolean amendCommit, boolean withSubrepos, boolean closeBranch) throws VcsException -->Line_13 $$ if (chunk.isEmpty() && myRepository.getState() != Repository.State.MERGING) [ FD ]
Line_13 $$ if (chunk.isEmpty() && myRepository.getState() != Repository.State.MERGING) -->Line_14 $$ parameters.add("-X")[ CD ]
Line_3 $$ List<String> parameters = new LinkedList<String>()-->Line_7 $$ parameters.add("-S")[ FD ]
Line_6 $$ if (withSubrepos) -->Line_8 $$ parameters.addAll(mySubrepos)[ CD ]
Line_2 $$ private void commitChunkFiles(@NotNull List<String> chunk, boolean amendCommit, boolean withSubrepos, boolean closeBranch) throws VcsException -->Line_19 $$ parameters.addAll(chunk)[ FD ]
Line_2 $$ private void commitChunkFiles(@NotNull List<String> chunk, boolean amendCommit, boolean withSubrepos, boolean closeBranch) throws VcsException -->Line_5 $$ parameters.add(saveCommitMessage().getAbsolutePath())[ CD ]
Line_6 $$ if (withSubrepos) -->Line_7 $$ parameters.add("-S")[ CD ]
Line_3 $$ List<String> parameters = new LinkedList<String>()-->Line_10 $$ parameters.add("--amend")[ FD ]
Line_2 $$ private void commitChunkFiles(@NotNull List<String> chunk, boolean amendCommit, boolean withSubrepos, boolean closeBranch) throws VcsException -->Line_6 $$ if (withSubrepos) [ FD ]
Line_3 $$ List<String> parameters = new LinkedList<String>()-->Line_21 $$ ensureSuccess(executor.executeInCurrentThread(myRepository.getRoot(), "commit", parameters))[ FD ]
Line_3 $$ List<String> parameters = new LinkedList<String>()-->Line_8 $$ parameters.addAll(mySubrepos)[ FD ]
Line_3 $$ List<String> parameters = new LinkedList<String>()-->Line_14 $$ parameters.add("-X")[ FD ]
Line_3 $$ List<String> parameters = new LinkedList<String>()-->Line_4 $$ parameters.add("--logfile")[ FD ]
Line_2 $$ private void commitChunkFiles(@NotNull List<String> chunk, boolean amendCommit, boolean withSubrepos, boolean closeBranch) throws VcsException -->Line_3 $$ List<String> parameters = new LinkedList<String>()[ CD ]
Line_6 $$ if (withSubrepos) -->Line_9 $$ if (amendCommit) [ CD ]
Line_20 $$ HgCommandExecutor executor = new HgCommandExecutor(myProject)-->Line_21 $$ ensureSuccess(executor.executeInCurrentThread(myRepository.getRoot(), "commit", parameters))[ FD ]
Line_2 $$ private void commitChunkFiles(@NotNull List<String> chunk, boolean amendCommit, boolean withSubrepos, boolean closeBranch) throws VcsException -->Line_4 $$ parameters.add("--logfile")[ CD ]
Line_9 $$ if (amendCommit) -->Line_10 $$ parameters.add("--amend")[ CD ]
Line_3 $$ List<String> parameters = new LinkedList<String>()-->Line_5 $$ parameters.add(saveCommitMessage().getAbsolutePath())[ FD ]
Line_2 $$ private void commitChunkFiles(@NotNull List<String> chunk, boolean amendCommit, boolean withSubrepos, boolean closeBranch) throws VcsException -->Line_21 $$ ensureSuccess(executor.executeInCurrentThread(myRepository.getRoot(), "commit", parameters))[ CD ]
Line_3 $$ List<String> parameters = new LinkedList<String>()-->Line_15 $$ parameters.add("\"**\"")[ FD ]
Line_12 $$ if (closeBranch) -->Line_13 $$ if (chunk.isEmpty() && myRepository.getState() != Repository.State.MERGING) [ CD ]
Line_3 $$ List<String> parameters = new LinkedList<String>()-->Line_17 $$ parameters.add("--close-branch")[ FD ]
Line_2 $$ private void commitChunkFiles(@NotNull List<String> chunk, boolean amendCommit, boolean withSubrepos, boolean closeBranch) throws VcsException -->Line_6 $$ if (withSubrepos) [ CD ]
Line_2 $$ private void commitChunkFiles(@NotNull List<String> chunk, boolean amendCommit, boolean withSubrepos, boolean closeBranch) throws VcsException -->Line_20 $$ HgCommandExecutor executor = new HgCommandExecutor(myProject)[ CD ]
Line_2 $$ private void commitChunkFiles(@NotNull List<String> chunk, boolean amendCommit, boolean withSubrepos, boolean closeBranch) throws VcsException -->Line_12 $$ if (closeBranch) [ CD ]
Line_3 $$ List<String> parameters = new LinkedList<String>()-->Line_19 $$ parameters.addAll(chunk)[ FD ]
Line_2 $$ private void commitChunkFiles(@NotNull List<String> chunk, boolean amendCommit, boolean withSubrepos, boolean closeBranch) throws VcsException -->Line_19 $$ parameters.addAll(chunk)[ CD ]
Line_13 $$ if (chunk.isEmpty() && myRepository.getState() != Repository.State.MERGING) -->Line_15 $$ parameters.add("\"**\"")[ CD ]
