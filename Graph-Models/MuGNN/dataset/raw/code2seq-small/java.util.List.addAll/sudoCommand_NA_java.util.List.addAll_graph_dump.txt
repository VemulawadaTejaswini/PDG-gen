Line_6 $$ List<String> command = ContainerUtil.newArrayList()-->Line_29 $$ command.add(0, "pkexec")[ FD ]
Line_23 $$ if (hasKdeSudo.getValue()) -->Line_28 $$ if (hasPkExec.getValue()) [ CD ]
Line_11 $$ String escapedCommandLine = StringUtil.join(command, new Function<String, String>() -->Line_13 $$ return escapeAppleScriptArgument(s)[ CD ]
Line_6 $$ List<String> command = ContainerUtil.newArrayList()-->Line_8 $$ command.addAll(commandLine.getParametersList().getList())[ FD ]
Line_11 $$ String escapedCommandLine = StringUtil.join(command, new Function<String, String>() -->Line_13 $$ return escapeAppleScriptArgument(s)[ FD ]
Line_32 $$ String escapedCommandLine = StringUtil.join(command, new Function<String, String>() -->Line_34 $$ return escapeUnixShellArgument(s)[ CD ]
Line_31 $$ if (SystemInfo.isUnix && hasTerminalApp()) -->Line_37 $$ File script = createTempExecutableScript("sudo", ".sh", "#!/bin/sh\n" + "echo " + escapeUnixShellArgument(prompt) + "\n" + "echo\n" + "sudo -- " + escapedCommandLine + "\n" + "STATUS=$?\n" + "echo\n" + "read -p \"Press Enter to close this window...\" TEMP\n" + "exit $STATUS\n")[ CD ]
Line_6 $$ List<String> command = ContainerUtil.newArrayList()-->Line_7 $$ command.add(commandLine.getExePath())[ FD ]
Line_23 $$ if (hasKdeSudo.getValue()) -->Line_24 $$ List<String> sudoCommand = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_7 $$ command.add(commandLine.getExePath())[ CD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_10 $$ if (SystemInfo.isMac) [ CD ]
Line_6 $$ List<String> command = ContainerUtil.newArrayList()-->Line_26 $$ sudoCommand.addAll(command)[ FD ]
Line_18 $$ if (hasGkSudo.getValue()) -->Line_23 $$ if (hasKdeSudo.getValue()) [ CD ]
Line_18 $$ if (hasGkSudo.getValue()) -->Line_19 $$ List<String> sudoCommand = ContainerUtil.newArrayList()[ CD ]
Line_11 $$ String escapedCommandLine = StringUtil.join(command, new Function<String, String>() -->Line_34 $$ return escapeUnixShellArgument(s)[ FD ]
Line_18 $$ if (hasGkSudo.getValue()) -->Line_20 $$ sudoCommand.addAll(Arrays.asList("gksudo", "--message", prompt, "--"))[ CD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_20 $$ sudoCommand.addAll(Arrays.asList("gksudo", "--message", prompt, "--"))[ FD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_6 $$ List<String> command = ContainerUtil.newArrayList()[ CD ]
Line_23 $$ if (hasKdeSudo.getValue()) -->Line_25 $$ sudoCommand.addAll(Arrays.asList("kdesudo", "--comment", prompt, "--"))[ CD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_25 $$ sudoCommand.addAll(Arrays.asList("kdesudo", "--comment", prompt, "--"))[ FD ]
Line_10 $$ if (SystemInfo.isMac) -->Line_18 $$ if (hasGkSudo.getValue()) [ CD ]
Line_6 $$ List<String> command = ContainerUtil.newArrayList()-->Line_32 $$ String escapedCommandLine = StringUtil.join(command, new Function<String, String>() [ FD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_3 $$ if (SystemInfo.isUnix && "root".equals(System.getenv("USER"))) [ CD ]
Line_6 $$ List<String> command = ContainerUtil.newArrayList()-->Line_21 $$ sudoCommand.addAll(command)[ FD ]
Line_28 $$ if (hasPkExec.getValue()) -->Line_31 $$ if (SystemInfo.isUnix && hasTerminalApp()) [ CD ]
Line_3 $$ if (SystemInfo.isUnix && "root".equals(System.getenv("USER"))) -->Line_4 $$ return commandLine[ CD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_8 $$ command.addAll(commandLine.getParametersList().getList())[ CD ]
Line_6 $$ List<String> command = ContainerUtil.newArrayList()-->Line_11 $$ String escapedCommandLine = StringUtil.join(command, new Function<String, String>() [ FD ]
Line_18 $$ if (hasGkSudo.getValue()) -->Line_21 $$ sudoCommand.addAll(command)[ CD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_7 $$ command.add(commandLine.getExePath())[ FD ]
Line_32 $$ String escapedCommandLine = StringUtil.join(command, new Function<String, String>() -->Line_34 $$ return escapeUnixShellArgument(s)[ FD ]
Line_31 $$ if (SystemInfo.isUnix && hasTerminalApp()) -->Line_32 $$ String escapedCommandLine = StringUtil.join(command, new Function<String, String>() [ CD ]
Line_9 $$ GeneralCommandLine sudoCommandLine-->Line_42 $$ return sudoCommandLine.withWorkDirectory(commandLine.getWorkDirectory()).withEnvironment(commandLine.getEnvironment()).withParentEnvironmentType(commandLine.getParentEnvironmentType()).withRedirectErrorStream(commandLine.isRedirectErrorStream())[ FD ]
Line_23 $$ if (hasKdeSudo.getValue()) -->Line_26 $$ sudoCommand.addAll(command)[ CD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_37 $$ File script = createTempExecutableScript("sudo", ".sh", "#!/bin/sh\n" + "echo " + escapeUnixShellArgument(prompt) + "\n" + "echo\n" + "sudo -- " + escapedCommandLine + "\n" + "STATUS=$?\n" + "echo\n" + "read -p \"Press Enter to close this window...\" TEMP\n" + "exit $STATUS\n")[ FD ]
Line_10 $$ if (SystemInfo.isMac) -->Line_11 $$ String escapedCommandLine = StringUtil.join(command, new Function<String, String>() [ CD ]
Line_28 $$ if (hasPkExec.getValue()) -->Line_29 $$ command.add(0, "pkexec")[ CD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_42 $$ return sudoCommandLine.withWorkDirectory(commandLine.getWorkDirectory()).withEnvironment(commandLine.getEnvironment()).withParentEnvironmentType(commandLine.getParentEnvironmentType()).withRedirectErrorStream(commandLine.isRedirectErrorStream())[ FD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_42 $$ return sudoCommandLine.withWorkDirectory(commandLine.getWorkDirectory()).withEnvironment(commandLine.getEnvironment()).withParentEnvironmentType(commandLine.getParentEnvironmentType()).withRedirectErrorStream(commandLine.isRedirectErrorStream())[ CD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_8 $$ command.addAll(commandLine.getParametersList().getList())[ FD ]
Line_2 $$ private static GeneralCommandLine sudoCommand(@NotNull GeneralCommandLine commandLine, @NotNull String prompt) throws ExecutionException, IOException -->Line_9 $$ GeneralCommandLine sudoCommandLine[ CD ]
