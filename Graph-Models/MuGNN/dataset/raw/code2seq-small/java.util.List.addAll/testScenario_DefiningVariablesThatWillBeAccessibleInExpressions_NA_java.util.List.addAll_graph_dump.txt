Line_13 $$ value = expr.getValue(ctx)-->Line_14 $$ assertEquals(3, value)[ FD ]
Line_9 $$ Expression expr = parser.parseRaw("#favouriteColour")-->Line_15 $$ expr = parser.parseRaw("#primes.?[#this>10]")[ FD ]
Line_9 $$ Expression expr = parser.parseRaw("#favouriteColour")-->Line_16 $$ value = expr.getValue(ctx)[ FD ]
Line_16 $$ value = expr.getValue(ctx)-->Line_17 $$ assertEquals("[11, 13, 17]", value.toString())[ FD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_14 $$ assertEquals(3, value)[ CD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_5 $$ ctx.setVariable("favouriteColour", "blue")[ CD ]
Line_4 $$ StandardEvaluationContext ctx = new StandardEvaluationContext()-->Line_8 $$ ctx.setVariable("primes", primes)[ FD ]
Line_3 $$ SpelExpressionParser parser = new SpelExpressionParser()-->Line_12 $$ expr = parser.parseRaw("#primes.get(1)")[ FD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_16 $$ value = expr.getValue(ctx)[ CD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_9 $$ Expression expr = parser.parseRaw("#favouriteColour")[ CD ]
Line_10 $$ Object value = expr.getValue(ctx)-->Line_17 $$ assertEquals("[11, 13, 17]", value.toString())[ FD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_7 $$ primes.addAll(Arrays.asList(2, 3, 5, 7, 11, 13, 17))[ CD ]
Line_12 $$ expr = parser.parseRaw("#primes.get(1)")-->Line_16 $$ value = expr.getValue(ctx)[ FD ]
Line_6 $$ List<Integer> primes = new ArrayList<Integer>()-->Line_8 $$ ctx.setVariable("primes", primes)[ FD ]
Line_3 $$ SpelExpressionParser parser = new SpelExpressionParser()-->Line_9 $$ Expression expr = parser.parseRaw("#favouriteColour")[ FD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_8 $$ ctx.setVariable("primes", primes)[ CD ]
Line_12 $$ expr = parser.parseRaw("#primes.get(1)")-->Line_15 $$ expr = parser.parseRaw("#primes.?[#this>10]")[ FD ]
Line_4 $$ StandardEvaluationContext ctx = new StandardEvaluationContext()-->Line_10 $$ Object value = expr.getValue(ctx)[ FD ]
Line_4 $$ StandardEvaluationContext ctx = new StandardEvaluationContext()-->Line_16 $$ value = expr.getValue(ctx)[ FD ]
Line_10 $$ Object value = expr.getValue(ctx)-->Line_13 $$ value = expr.getValue(ctx)[ FD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_11 $$ assertEquals("blue", value)[ CD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_12 $$ expr = parser.parseRaw("#primes.get(1)")[ CD ]
Line_3 $$ SpelExpressionParser parser = new SpelExpressionParser()-->Line_15 $$ expr = parser.parseRaw("#primes.?[#this>10]")[ FD ]
Line_13 $$ value = expr.getValue(ctx)-->Line_16 $$ value = expr.getValue(ctx)[ FD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_6 $$ List<Integer> primes = new ArrayList<Integer>()[ CD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_3 $$ SpelExpressionParser parser = new SpelExpressionParser()[ CD ]
Line_10 $$ Object value = expr.getValue(ctx)-->Line_11 $$ assertEquals("blue", value)[ FD ]
Line_6 $$ List<Integer> primes = new ArrayList<Integer>()-->Line_7 $$ primes.addAll(Arrays.asList(2, 3, 5, 7, 11, 13, 17))[ FD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_4 $$ StandardEvaluationContext ctx = new StandardEvaluationContext()[ CD ]
Line_12 $$ expr = parser.parseRaw("#primes.get(1)")-->Line_13 $$ value = expr.getValue(ctx)[ FD ]
Line_4 $$ StandardEvaluationContext ctx = new StandardEvaluationContext()-->Line_13 $$ value = expr.getValue(ctx)[ FD ]
Line_9 $$ Expression expr = parser.parseRaw("#favouriteColour")-->Line_12 $$ expr = parser.parseRaw("#primes.get(1)")[ FD ]
Line_9 $$ Expression expr = parser.parseRaw("#favouriteColour")-->Line_10 $$ Object value = expr.getValue(ctx)[ FD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_15 $$ expr = parser.parseRaw("#primes.?[#this>10]")[ CD ]
Line_15 $$ expr = parser.parseRaw("#primes.?[#this>10]")-->Line_16 $$ value = expr.getValue(ctx)[ FD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_17 $$ assertEquals("[11, 13, 17]", value.toString())[ CD ]
Line_13 $$ value = expr.getValue(ctx)-->Line_17 $$ assertEquals("[11, 13, 17]", value.toString())[ FD ]
Line_10 $$ Object value = expr.getValue(ctx)-->Line_16 $$ value = expr.getValue(ctx)[ FD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_13 $$ value = expr.getValue(ctx)[ CD ]
Line_4 $$ StandardEvaluationContext ctx = new StandardEvaluationContext()-->Line_5 $$ ctx.setVariable("favouriteColour", "blue")[ FD ]
Line_9 $$ Expression expr = parser.parseRaw("#favouriteColour")-->Line_13 $$ value = expr.getValue(ctx)[ FD ]
Line_2 $$ public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception -->Line_10 $$ Object value = expr.getValue(ctx)[ CD ]
Line_10 $$ Object value = expr.getValue(ctx)-->Line_14 $$ assertEquals(3, value)[ FD ]
