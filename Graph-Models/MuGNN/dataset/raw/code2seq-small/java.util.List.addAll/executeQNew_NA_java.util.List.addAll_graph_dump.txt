Line_2 $$ private void executeQNew(@NotNull List<String> chunkFiles) throws VcsException -->Line_4 $$ args.add("-l")[ CD ]
Line_3 $$ List<String> args = ContainerUtil.newArrayList()-->Line_5 $$ args.add(saveCommitMessage().getAbsolutePath())[ FD ]
Line_3 $$ List<String> args = ContainerUtil.newArrayList()-->Line_6 $$ args.add("-UD")[ FD ]
Line_3 $$ List<String> args = ContainerUtil.newArrayList()-->Line_11 $$ executor.execute(myRepository.getRoot(), "qnew", args, new HgCommandResultHandler() [ FD ]
Line_2 $$ private void executeQNew(@NotNull List<String> chunkFiles) throws VcsException -->Line_9 $$ args.addAll(chunkFiles)[ FD ]
Line_10 $$ HgCommandExecutor executor = new HgCommandExecutor(myProject)-->Line_11 $$ executor.execute(myRepository.getRoot(), "qnew", args, new HgCommandResultHandler() [ FD ]
Line_2 $$ private void executeQNew(@NotNull List<String> chunkFiles) throws VcsException -->Line_10 $$ HgCommandExecutor executor = new HgCommandExecutor(myProject)[ CD ]
Line_2 $$ private void executeQNew(@NotNull List<String> chunkFiles) throws VcsException -->Line_7 $$ String patchName = DATE_FORMAT.format(new Date()).concat(".diff")[ CD ]
Line_2 $$ private void executeQNew(@NotNull List<String> chunkFiles) throws VcsException -->Line_6 $$ args.add("-UD")[ CD ]
Line_11 $$ executor.execute(myRepository.getRoot(), "qnew", args, new HgCommandResultHandler() -->Line_13 $$ if (HgErrorUtil.hasErrorsInCommandExecution(result)) [ FD ]
Line_2 $$ private void executeQNew(@NotNull List<String> chunkFiles) throws VcsException -->Line_8 $$ args.add(patchName)[ CD ]
Line_11 $$ executor.execute(myRepository.getRoot(), "qnew", args, new HgCommandResultHandler() -->Line_13 $$ if (HgErrorUtil.hasErrorsInCommandExecution(result)) [ CD ]
Line_3 $$ List<String> args = ContainerUtil.newArrayList()-->Line_4 $$ args.add("-l")[ FD ]
Line_13 $$ if (HgErrorUtil.hasErrorsInCommandExecution(result)) -->Line_14 $$ new HgCommandResultNotifier(myProject).notifyError(result, "Qnew Failed", "Could not create mq patch for selected changes")[ CD ]
Line_11 $$ executor.execute(myRepository.getRoot(), "qnew", args, new HgCommandResultHandler() -->Line_14 $$ new HgCommandResultNotifier(myProject).notifyError(result, "Qnew Failed", "Could not create mq patch for selected changes")[ FD ]
Line_3 $$ List<String> args = ContainerUtil.newArrayList()-->Line_9 $$ args.addAll(chunkFiles)[ FD ]
Line_3 $$ List<String> args = ContainerUtil.newArrayList()-->Line_8 $$ args.add(patchName)[ FD ]
Line_7 $$ String patchName = DATE_FORMAT.format(new Date()).concat(".diff")-->Line_8 $$ args.add(patchName)[ FD ]
Line_2 $$ private void executeQNew(@NotNull List<String> chunkFiles) throws VcsException -->Line_3 $$ List<String> args = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ private void executeQNew(@NotNull List<String> chunkFiles) throws VcsException -->Line_5 $$ args.add(saveCommitMessage().getAbsolutePath())[ CD ]
Line_2 $$ private void executeQNew(@NotNull List<String> chunkFiles) throws VcsException -->Line_9 $$ args.addAll(chunkFiles)[ CD ]
Line_2 $$ private void executeQNew(@NotNull List<String> chunkFiles) throws VcsException -->Line_11 $$ executor.execute(myRepository.getRoot(), "qnew", args, new HgCommandResultHandler() [ CD ]
