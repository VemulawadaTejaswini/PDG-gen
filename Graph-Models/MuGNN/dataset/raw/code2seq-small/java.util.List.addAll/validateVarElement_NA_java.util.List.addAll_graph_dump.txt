Line_21 $$ if (Validator.isNotNull(element.attributeValue("attribute"))) -->Line_23 $$ validatePossibleAttributeNames(element, attributeNames, filePath)[ CD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_14 $$ if (parentElement != null) [ CD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_5 $$ List<Attribute> attributes = element.attributes()[ CD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_21 $$ if (Validator.isNotNull(element.attributeValue("attribute"))) [ CD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_13 $$ Element parentElement = element.getParent()[ FD ]
Line_22 $$ List<String> attributeNames = Arrays.asList("attribute", "line-number", "locator", "name")-->Line_24 $$ validateRequiredAttributeNames(element, attributeNames, filePath)[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_5 $$ List<Attribute> attributes = element.attributes()[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_13 $$ Element parentElement = element.getParent()[ CD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_12 $$ possibleAttributeNames.addAll(Arrays.asList("attribute", "group", "input", "line-number", "locator", "method", "name", "pattern", "property-value", "value"))[ CD ]
Line_21 $$ if (Validator.isNotNull(element.attributeValue("attribute"))) -->Line_24 $$ validateRequiredAttributeNames(element, attributeNames, filePath)[ CD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_25 $$ if (Validator.isNotNull(element.attributeValue("group")) || Validator.isNotNull(element.attributeValue("input")) || Validator.isNotNull(element.attributeValue("pattern"))) [ FD ]
Line_14 $$ if (parentElement != null) -->Line_15 $$ String parentElementName = parentElement.getName()[ CD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_27 $$ validatePossibleAttributeNames(element, attributeNames, filePath)[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_11 $$ List<String> possibleAttributeNames = new ArrayList()[ CD ]
Line_21 $$ if (Validator.isNotNull(element.attributeValue("attribute"))) -->Line_25 $$ if (Validator.isNotNull(element.attributeValue("group")) || Validator.isNotNull(element.attributeValue("input")) || Validator.isNotNull(element.attributeValue("pattern"))) [ CD ]
Line_25 $$ if (Validator.isNotNull(element.attributeValue("group")) || Validator.isNotNull(element.attributeValue("input")) || Validator.isNotNull(element.attributeValue("pattern"))) -->Line_26 $$ List<String> attributeNames = Arrays.asList("group", "line-number", "input", "name", "pattern")[ CD ]
Line_22 $$ List<String> attributeNames = Arrays.asList("attribute", "line-number", "locator", "name")-->Line_27 $$ validatePossibleAttributeNames(element, attributeNames, filePath)[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_20 $$ validatePossibleAttributeNames(element, possibleAttributeNames, filePath)[ CD ]
Line_6 $$ if (attributes.size() <= 2) -->Line_7 $$ if (Validator.isNull(element.getText())) [ CD ]
Line_25 $$ if (Validator.isNotNull(element.attributeValue("group")) || Validator.isNotNull(element.attributeValue("input")) || Validator.isNotNull(element.attributeValue("pattern"))) -->Line_28 $$ validateRequiredAttributeNames(element, attributeNames, filePath)[ CD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_6 $$ if (attributes.size() <= 2) [ CD ]
Line_11 $$ List<String> possibleAttributeNames = new ArrayList()-->Line_20 $$ validatePossibleAttributeNames(element, possibleAttributeNames, filePath)[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_8 $$ _exceptions.add(new Exception("Missing value attribute\n" + filePath + ":" + element.attributeValue("line-number")))[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_21 $$ if (Validator.isNotNull(element.attributeValue("attribute"))) [ FD ]
Line_22 $$ List<String> attributeNames = Arrays.asList("attribute", "line-number", "locator", "name")-->Line_23 $$ validatePossibleAttributeNames(element, attributeNames, filePath)[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_24 $$ validateRequiredAttributeNames(element, attributeNames, filePath)[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_3 $$ validateHasNoChildElements(element, filePath)[ CD ]
Line_11 $$ List<String> possibleAttributeNames = new ArrayList()-->Line_12 $$ possibleAttributeNames.addAll(Arrays.asList("attribute", "group", "input", "line-number", "locator", "method", "name", "pattern", "property-value", "value"))[ FD ]
Line_15 $$ String parentElementName = parentElement.getName()-->Line_16 $$ if (filePath.contains(".testcase") && parentElementName.equals("definition")) [ FD ]
Line_16 $$ if (filePath.contains(".testcase") && parentElementName.equals("definition")) -->Line_17 $$ possibleAttributeNames.add("static")[ CD ]
Line_25 $$ if (Validator.isNotNull(element.attributeValue("group")) || Validator.isNotNull(element.attributeValue("input")) || Validator.isNotNull(element.attributeValue("pattern"))) -->Line_27 $$ validatePossibleAttributeNames(element, attributeNames, filePath)[ CD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_4 $$ validateRequiredAttributeNames(element, Arrays.asList("name"), filePath)[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_7 $$ if (Validator.isNull(element.getText())) [ FD ]
Line_13 $$ Element parentElement = element.getParent()-->Line_14 $$ if (parentElement != null) [ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_30 $$ validateNumberOfAttributes(element, 3, filePath)[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_3 $$ validateHasNoChildElements(element, filePath)[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_20 $$ validatePossibleAttributeNames(element, possibleAttributeNames, filePath)[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_16 $$ if (filePath.contains(".testcase") && parentElementName.equals("definition")) [ FD ]
Line_11 $$ List<String> possibleAttributeNames = new ArrayList()-->Line_17 $$ possibleAttributeNames.add("static")[ FD ]
Line_25 $$ if (Validator.isNotNull(element.attributeValue("group")) || Validator.isNotNull(element.attributeValue("input")) || Validator.isNotNull(element.attributeValue("pattern"))) -->Line_29 $$ if (Validator.isNotNull(element.attributeValue("locator")) || Validator.isNotNull(element.attributeValue("method")) || Validator.isNotNull(element.attributeValue("property-value")) || Validator.isNotNull(element.attributeValue("var"))) [ CD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_28 $$ validateRequiredAttributeNames(element, attributeNames, filePath)[ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_4 $$ validateRequiredAttributeNames(element, Arrays.asList("name"), filePath)[ CD ]
Line_22 $$ List<String> attributeNames = Arrays.asList("attribute", "line-number", "locator", "name")-->Line_28 $$ validateRequiredAttributeNames(element, attributeNames, filePath)[ FD ]
Line_5 $$ List<Attribute> attributes = element.attributes()-->Line_6 $$ if (attributes.size() <= 2) [ FD ]
Line_13 $$ Element parentElement = element.getParent()-->Line_15 $$ String parentElementName = parentElement.getName()[ FD ]
Line_14 $$ if (parentElement != null) -->Line_16 $$ if (filePath.contains(".testcase") && parentElementName.equals("definition")) [ CD ]
Line_7 $$ if (Validator.isNull(element.getText())) -->Line_8 $$ _exceptions.add(new Exception("Missing value attribute\n" + filePath + ":" + element.attributeValue("line-number")))[ CD ]
Line_21 $$ if (Validator.isNotNull(element.attributeValue("attribute"))) -->Line_22 $$ List<String> attributeNames = Arrays.asList("attribute", "line-number", "locator", "name")[ CD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_29 $$ if (Validator.isNotNull(element.attributeValue("locator")) || Validator.isNotNull(element.attributeValue("method")) || Validator.isNotNull(element.attributeValue("property-value")) || Validator.isNotNull(element.attributeValue("var"))) [ FD ]
Line_2 $$ protected static void validateVarElement(Element element, String filePath) -->Line_23 $$ validatePossibleAttributeNames(element, attributeNames, filePath)[ FD ]
Line_29 $$ if (Validator.isNotNull(element.attributeValue("locator")) || Validator.isNotNull(element.attributeValue("method")) || Validator.isNotNull(element.attributeValue("property-value")) || Validator.isNotNull(element.attributeValue("var"))) -->Line_30 $$ validateNumberOfAttributes(element, 3, filePath)[ CD ]
