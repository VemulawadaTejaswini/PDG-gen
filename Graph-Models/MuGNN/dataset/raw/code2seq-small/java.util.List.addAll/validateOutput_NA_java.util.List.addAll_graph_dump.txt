Line_25 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_26 $$ String line = reader.readLine()[ FD ]
Line_7 $$ Counters counters = runningJob.getCounters()-->Line_10 $$ assertEquals(counters.findCounter(counterGrp, "MAP_INPUT_RECORDS").getCounter(), mapRecs)[ FD ]
Line_31 $$ String value = tokeniz.nextToken()-->Line_32 $$ int index = value.indexOf("hey")[ FD ]
Line_31 $$ String value = tokeniz.nextToken()-->Line_35 $$ String heyStr = value.substring(index)[ FD ]
Line_6 $$ String counterGrp = "org.apache.hadoop.mapred.Task$Counter"-->Line_13 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_SKIPPED_RECORDS").getCounter(), REDUCER_BAD_RECORDS.size())[ FD ]
Line_12 $$ int redRecs = mapRecs - REDUCER_BAD_RECORDS.size()-->Line_15 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_INPUT_GROUPS").getCounter(), redRecs)[ FD ]
Line_5 $$ if (validateCount) -->Line_8 $$ assertEquals(counters.findCounter(counterGrp, "MAP_SKIPPED_RECORDS").getCounter(), MAPPER_BAD_RECORDS.size())[ CD ]
Line_19 $$ List<String> badRecs = new ArrayList<String>()-->Line_36 $$ assertTrue(!badRecs.contains(heyStr))[ FD ]
Line_19 $$ List<String> badRecs = new ArrayList<String>()-->Line_21 $$ badRecs.addAll(REDUCER_BAD_RECORDS)[ FD ]
Line_23 $$ if (outputFiles.length > 0) -->Line_28 $$ while (line != null) [ CD ]
Line_5 $$ if (validateCount) -->Line_13 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_SKIPPED_RECORDS").getCounter(), REDUCER_BAD_RECORDS.size())[ CD ]
Line_27 $$ int counter = 0-->Line_29 $$ counter++[ FD ]
Line_25 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_40 $$ reader.close()[ FD ]
Line_2 $$ private void validateOutput(RunningJob runningJob, boolean validateCount) throws Exception -->Line_20 $$ badRecs.addAll(MAPPER_BAD_RECORDS)[ CD ]
Line_28 $$ while (line != null) -->Line_32 $$ int index = value.indexOf("hey")[ CD ]
Line_6 $$ String counterGrp = "org.apache.hadoop.mapred.Task$Counter"-->Line_17 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_OUTPUT_RECORDS").getCounter(), redRecs)[ FD ]
Line_5 $$ if (validateCount) -->Line_16 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_INPUT_RECORDS").getCounter(), redRecs)[ CD ]
Line_28 $$ while (line != null) -->Line_29 $$ counter++[ CD ]
Line_30 $$ StringTokenizer tokeniz = new StringTokenizer(line, "\t")-->Line_31 $$ String value = tokeniz.nextToken()[ FD ]
Line_7 $$ Counters counters = runningJob.getCounters()-->Line_15 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_INPUT_GROUPS").getCounter(), redRecs)[ FD ]
Line_5 $$ if (validateCount) -->Line_7 $$ Counters counters = runningJob.getCounters()[ CD ]
Line_6 $$ String counterGrp = "org.apache.hadoop.mapred.Task$Counter"-->Line_10 $$ assertEquals(counters.findCounter(counterGrp, "MAP_INPUT_RECORDS").getCounter(), mapRecs)[ FD ]
Line_25 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))-->Line_38 $$ line = reader.readLine()[ FD ]
Line_6 $$ String counterGrp = "org.apache.hadoop.mapred.Task$Counter"-->Line_8 $$ assertEquals(counters.findCounter(counterGrp, "MAP_SKIPPED_RECORDS").getCounter(), MAPPER_BAD_RECORDS.size())[ FD ]
Line_5 $$ if (validateCount) -->Line_15 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_INPUT_GROUPS").getCounter(), redRecs)[ CD ]
Line_9 $$ int mapRecs = INPUTSIZE - MAPPER_BAD_RECORDS.size()-->Line_10 $$ assertEquals(counters.findCounter(counterGrp, "MAP_INPUT_RECORDS").getCounter(), mapRecs)[ FD ]
Line_32 $$ int index = value.indexOf("hey")-->Line_34 $$ if (index > -1) [ FD ]
Line_28 $$ while (line != null) -->Line_34 $$ if (index > -1) [ CD ]
Line_7 $$ Counters counters = runningJob.getCounters()-->Line_16 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_INPUT_RECORDS").getCounter(), redRecs)[ FD ]
Line_5 $$ if (validateCount) -->Line_9 $$ int mapRecs = INPUTSIZE - MAPPER_BAD_RECORDS.size()[ CD ]
Line_23 $$ if (outputFiles.length > 0) -->Line_26 $$ String line = reader.readLine()[ CD ]
Line_28 $$ while (line != null) -->Line_38 $$ line = reader.readLine()[ CD ]
Line_41 $$ if (validateCount) -->Line_42 $$ assertEquals(INPUTSIZE - badRecs.size(), counter)[ CD ]
Line_2 $$ private void validateOutput(RunningJob runningJob, boolean validateCount) throws Exception -->Line_5 $$ if (validateCount) [ CD ]
Line_38 $$ line = reader.readLine()-->Line_28 $$ while (line != null) [ FD ]
Line_5 $$ if (validateCount) -->Line_14 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_SKIPPED_GROUPS").getCounter(), REDUCER_BAD_RECORDS.size())[ CD ]
Line_23 $$ if (outputFiles.length > 0) -->Line_27 $$ int counter = 0[ CD ]
Line_12 $$ int redRecs = mapRecs - REDUCER_BAD_RECORDS.size()-->Line_17 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_OUTPUT_RECORDS").getCounter(), redRecs)[ FD ]
Line_28 $$ while (line != null) -->Line_33 $$ assertTrue(index > -1)[ CD ]
Line_5 $$ if (validateCount) -->Line_11 $$ assertEquals(counters.findCounter(counterGrp, "MAP_OUTPUT_RECORDS").getCounter(), mapRecs)[ CD ]
Line_23 $$ if (outputFiles.length > 0) -->Line_41 $$ if (validateCount) [ CD ]
Line_5 $$ if (validateCount) -->Line_10 $$ assertEquals(counters.findCounter(counterGrp, "MAP_INPUT_RECORDS").getCounter(), mapRecs)[ CD ]
Line_23 $$ if (outputFiles.length > 0) -->Line_25 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_26 $$ String line = reader.readLine()-->Line_28 $$ while (line != null) [ FD ]
Line_27 $$ int counter = 0-->Line_42 $$ assertEquals(INPUTSIZE - badRecs.size(), counter)[ FD ]
Line_2 $$ private void validateOutput(RunningJob runningJob, boolean validateCount) throws Exception -->Line_3 $$ LOG.info(runningJob.getCounters().toString())[ FD ]
Line_2 $$ private void validateOutput(RunningJob runningJob, boolean validateCount) throws Exception -->Line_22 $$ Path[] outputFiles = FileUtil.stat2Paths(getFileSystem().listStatus(getOutputDir(), new Utils.OutputFileUtils.OutputFilesFilter()))[ CD ]
Line_5 $$ if (validateCount) -->Line_12 $$ int redRecs = mapRecs - REDUCER_BAD_RECORDS.size()[ CD ]
Line_34 $$ if (index > -1) -->Line_36 $$ assertTrue(!badRecs.contains(heyStr))[ CD ]
Line_5 $$ if (validateCount) -->Line_17 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_OUTPUT_RECORDS").getCounter(), redRecs)[ CD ]
Line_28 $$ while (line != null) -->Line_31 $$ String value = tokeniz.nextToken()[ CD ]
Line_23 $$ if (outputFiles.length > 0) -->Line_40 $$ reader.close()[ CD ]
Line_6 $$ String counterGrp = "org.apache.hadoop.mapred.Task$Counter"-->Line_16 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_INPUT_RECORDS").getCounter(), redRecs)[ FD ]
Line_2 $$ private void validateOutput(RunningJob runningJob, boolean validateCount) throws Exception -->Line_21 $$ badRecs.addAll(REDUCER_BAD_RECORDS)[ CD ]
Line_6 $$ String counterGrp = "org.apache.hadoop.mapred.Task$Counter"-->Line_14 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_SKIPPED_GROUPS").getCounter(), REDUCER_BAD_RECORDS.size())[ FD ]
Line_2 $$ private void validateOutput(RunningJob runningJob, boolean validateCount) throws Exception -->Line_4 $$ assertTrue(runningJob.isSuccessful())[ CD ]
Line_2 $$ private void validateOutput(RunningJob runningJob, boolean validateCount) throws Exception -->Line_3 $$ LOG.info(runningJob.getCounters().toString())[ CD ]
Line_19 $$ List<String> badRecs = new ArrayList<String>()-->Line_20 $$ badRecs.addAll(MAPPER_BAD_RECORDS)[ FD ]
Line_23 $$ if (outputFiles.length > 0) -->Line_24 $$ InputStream is = getFileSystem().open(outputFiles[0])[ CD ]
Line_2 $$ private void validateOutput(RunningJob runningJob, boolean validateCount) throws Exception -->Line_7 $$ Counters counters = runningJob.getCounters()[ FD ]
Line_12 $$ int redRecs = mapRecs - REDUCER_BAD_RECORDS.size()-->Line_16 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_INPUT_RECORDS").getCounter(), redRecs)[ FD ]
Line_28 $$ while (line != null) -->Line_30 $$ StringTokenizer tokeniz = new StringTokenizer(line, "\t")[ CD ]
Line_34 $$ if (index > -1) -->Line_35 $$ String heyStr = value.substring(index)[ CD ]
Line_7 $$ Counters counters = runningJob.getCounters()-->Line_17 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_OUTPUT_RECORDS").getCounter(), redRecs)[ FD ]
Line_2 $$ private void validateOutput(RunningJob runningJob, boolean validateCount) throws Exception -->Line_23 $$ if (outputFiles.length > 0) [ CD ]
Line_19 $$ List<String> badRecs = new ArrayList<String>()-->Line_42 $$ assertEquals(INPUTSIZE - badRecs.size(), counter)[ FD ]
Line_2 $$ private void validateOutput(RunningJob runningJob, boolean validateCount) throws Exception -->Line_19 $$ List<String> badRecs = new ArrayList<String>()[ CD ]
Line_7 $$ Counters counters = runningJob.getCounters()-->Line_14 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_SKIPPED_GROUPS").getCounter(), REDUCER_BAD_RECORDS.size())[ FD ]
Line_9 $$ int mapRecs = INPUTSIZE - MAPPER_BAD_RECORDS.size()-->Line_11 $$ assertEquals(counters.findCounter(counterGrp, "MAP_OUTPUT_RECORDS").getCounter(), mapRecs)[ FD ]
Line_6 $$ String counterGrp = "org.apache.hadoop.mapred.Task$Counter"-->Line_15 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_INPUT_GROUPS").getCounter(), redRecs)[ FD ]
Line_7 $$ Counters counters = runningJob.getCounters()-->Line_11 $$ assertEquals(counters.findCounter(counterGrp, "MAP_OUTPUT_RECORDS").getCounter(), mapRecs)[ FD ]
Line_2 $$ private void validateOutput(RunningJob runningJob, boolean validateCount) throws Exception -->Line_4 $$ assertTrue(runningJob.isSuccessful())[ FD ]
Line_5 $$ if (validateCount) -->Line_6 $$ String counterGrp = "org.apache.hadoop.mapred.Task$Counter"[ CD ]
Line_6 $$ String counterGrp = "org.apache.hadoop.mapred.Task$Counter"-->Line_11 $$ assertEquals(counters.findCounter(counterGrp, "MAP_OUTPUT_RECORDS").getCounter(), mapRecs)[ FD ]
Line_7 $$ Counters counters = runningJob.getCounters()-->Line_8 $$ assertEquals(counters.findCounter(counterGrp, "MAP_SKIPPED_RECORDS").getCounter(), MAPPER_BAD_RECORDS.size())[ FD ]
Line_26 $$ String line = reader.readLine()-->Line_38 $$ line = reader.readLine()[ FD ]
Line_32 $$ int index = value.indexOf("hey")-->Line_35 $$ String heyStr = value.substring(index)[ FD ]
Line_35 $$ String heyStr = value.substring(index)-->Line_36 $$ assertTrue(!badRecs.contains(heyStr))[ FD ]
Line_7 $$ Counters counters = runningJob.getCounters()-->Line_13 $$ assertEquals(counters.findCounter(counterGrp, "REDUCE_SKIPPED_RECORDS").getCounter(), REDUCER_BAD_RECORDS.size())[ FD ]
