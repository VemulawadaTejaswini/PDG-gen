Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_22 $$ return agentProxyFactory.createProxy(libraries, agentInterface, agentClassName)[ CD ]
Line_10 $$ for (Class<?> clazz : allCommonJarClasses) -->Line_11 $$ libraries.add(new File(PathUtil.getJarPathForClass(clazz)))[ FD ]
Line_8 $$ List<File> libraries = new ArrayList<File>()-->Line_9 $$ libraries.addAll(instanceLibraries)[ FD ]
Line_3 $$ List<Class<?>> allCommonJarClasses = new ArrayList<Class<?>>()-->Line_7 $$ allCommonJarClasses.add(agentInterface)[ FD ]
Line_8 $$ List<File> libraries = new ArrayList<File>()-->Line_17 $$ libraries.add(specificsModule)[ FD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_15 $$ if (plugin.isDirectory()) [ CD ]
Line_3 $$ List<Class<?>> allCommonJarClasses = new ArrayList<Class<?>>()-->Line_5 $$ allCommonJarClasses.add(RemoteAgent.class)[ FD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_3 $$ List<Class<?>> allCommonJarClasses = new ArrayList<Class<?>>()[ CD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_13 $$ File plugin = new File(PathUtil.getJarPathForClass(pluginClass))[ CD ]
Line_16 $$ File specificsModule = new File(allPluginsDir, specificsRuntimeModuleName)-->Line_17 $$ libraries.add(specificsModule)[ FD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_9 $$ libraries.addAll(instanceLibraries)[ CD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_4 $$ allCommonJarClasses.addAll(commonJarClasses)[ CD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_22 $$ return agentProxyFactory.createProxy(libraries, agentInterface, agentClassName)[ FD ]
Line_3 $$ List<Class<?>> allCommonJarClasses = new ArrayList<Class<?>>()-->Line_6 $$ allCommonJarClasses.add(Base64.class)[ FD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_7 $$ allCommonJarClasses.add(agentInterface)[ FD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_6 $$ allCommonJarClasses.add(Base64.class)[ CD ]
Line_3 $$ List<Class<?>> allCommonJarClasses = new ArrayList<Class<?>>()-->Line_4 $$ allCommonJarClasses.addAll(commonJarClasses)[ FD ]
Line_15 $$ if (plugin.isDirectory()) -->Line_17 $$ libraries.add(specificsModule)[ CD ]
Line_8 $$ List<File> libraries = new ArrayList<File>()-->Line_22 $$ return agentProxyFactory.createProxy(libraries, agentInterface, agentClassName)[ FD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_4 $$ allCommonJarClasses.addAll(commonJarClasses)[ FD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_9 $$ libraries.addAll(instanceLibraries)[ FD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_7 $$ allCommonJarClasses.add(agentInterface)[ CD ]
Line_8 $$ List<File> libraries = new ArrayList<File>()-->Line_20 $$ libraries.add(specificsDir)[ FD ]
Line_19 $$ File specificsDir = new File(allPluginsDir, FileUtil.toSystemDependentName(specificsBuildJarPath))-->Line_20 $$ libraries.add(specificsDir)[ FD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_14 $$ String allPluginsDir = plugin.getParent()[ CD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_8 $$ List<File> libraries = new ArrayList<File>()[ CD ]
Line_13 $$ File plugin = new File(PathUtil.getJarPathForClass(pluginClass))-->Line_14 $$ String allPluginsDir = plugin.getParent()[ FD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_5 $$ allCommonJarClasses.add(RemoteAgent.class)[ CD ]
Line_15 $$ if (plugin.isDirectory()) -->Line_19 $$ File specificsDir = new File(allPluginsDir, FileUtil.toSystemDependentName(specificsBuildJarPath))[ CD ]
Line_15 $$ if (plugin.isDirectory()) -->Line_20 $$ libraries.add(specificsDir)[ CD ]
Line_8 $$ List<File> libraries = new ArrayList<File>()-->Line_11 $$ libraries.add(new File(PathUtil.getJarPathForClass(clazz)))[ FD ]
Line_13 $$ File plugin = new File(PathUtil.getJarPathForClass(pluginClass))-->Line_15 $$ if (plugin.isDirectory()) [ FD ]
Line_15 $$ if (plugin.isDirectory()) -->Line_16 $$ File specificsModule = new File(allPluginsDir, specificsRuntimeModuleName)[ CD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_13 $$ File plugin = new File(PathUtil.getJarPathForClass(pluginClass))[ FD ]
Line_2 $$ public <T extends RemoteAgent> T createAgent(RemoteAgentProxyFactory agentProxyFactory, List<File> instanceLibraries, List<Class<?>> commonJarClasses, String specificsRuntimeModuleName, String specificsBuildJarPath, Class<T> agentInterface, String agentClassName, Class<?> pluginClass) throws Exception -->Line_19 $$ File specificsDir = new File(allPluginsDir, FileUtil.toSystemDependentName(specificsBuildJarPath))[ FD ]
