Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_48 $$ this.manualSingletonNames.remove(beanName)[ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_37 $$ updatedDefinitions.add(beanName)[ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_16 $$ throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName, "Cannot register bean definition [" + beanDefinition + "] for bean '" + beanName + "': There is already [" + oldBeanDefinition + "] bound.")[ FD ]
Line_40 $$ Set<String> updatedSingletons = new LinkedHashSet<String>(this.manualSingletonNames)-->Line_42 $$ this.manualSingletonNames = updatedSingletons[ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_21 $$ if (!beanDefinition.equals(oldBeanDefinition)) [ FD ]
Line_35 $$ List<String> updatedDefinitions = new ArrayList<String>(this.beanDefinitionNames.size() + 1)-->Line_38 $$ this.beanDefinitionNames = updatedDefinitions[ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_5 $$ if (beanDefinition instanceof AbstractBeanDefinition) [ CD ]
Line_12 $$ BeanDefinition oldBeanDefinition-->Line_13 $$ oldBeanDefinition = this.beanDefinitionMap.get(beanName)[ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_3 $$ Assert.hasText(beanName, "Bean name must not be empty")[ CD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_5 $$ if (beanDefinition instanceof AbstractBeanDefinition) [ FD ]
Line_13 $$ oldBeanDefinition = this.beanDefinitionMap.get(beanName)-->Line_21 $$ if (!beanDefinition.equals(oldBeanDefinition)) [ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_34 $$ this.beanDefinitionMap.put(beanName, beanDefinition)[ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_47 $$ this.beanDefinitionNames.add(beanName)[ FD ]
Line_18 $$ if (this.logger.isWarnEnabled()) -->Line_19 $$ this.logger.warn("Overriding user-defined bean definition for bean '" + beanName + "' with a framework-generated bean definition: replacing [" + oldBeanDefinition + "] with [" + beanDefinition + "]")[ CD ]
Line_52 $$ if (oldBeanDefinition != null || containsSingleton(beanName)) -->Line_53 $$ resetBeanDefinition(beanName)[ CD ]
Line_21 $$ if (!beanDefinition.equals(oldBeanDefinition)) -->Line_26 $$ if (this.logger.isDebugEnabled()) [ CD ]
Line_14 $$ if (oldBeanDefinition != null) -->Line_32 $$ if (hasBeanCreationStarted()) [ CD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_53 $$ resetBeanDefinition(beanName)[ FD ]
Line_14 $$ if (oldBeanDefinition != null) -->Line_15 $$ if (!isAllowBeanDefinitionOverriding()) [ CD ]
Line_35 $$ List<String> updatedDefinitions = new ArrayList<String>(this.beanDefinitionNames.size() + 1)-->Line_37 $$ updatedDefinitions.add(beanName)[ FD ]
Line_15 $$ if (!isAllowBeanDefinitionOverriding()) -->Line_17 $$ if (oldBeanDefinition.getRole() < beanDefinition.getRole()) [ CD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_4 $$ Assert.notNull(beanDefinition, "BeanDefinition must not be null")[ CD ]
Line_12 $$ BeanDefinition oldBeanDefinition-->Line_14 $$ if (oldBeanDefinition != null) [ FD ]
Line_14 $$ if (oldBeanDefinition != null) -->Line_50 $$ this.frozenBeanDefinitionNames = null[ CD ]
Line_12 $$ BeanDefinition oldBeanDefinition-->Line_17 $$ if (oldBeanDefinition.getRole() < beanDefinition.getRole()) [ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_30 $$ this.beanDefinitionMap.put(beanName, beanDefinition)[ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_13 $$ oldBeanDefinition = this.beanDefinitionMap.get(beanName)[ CD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_9 $$ throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName, "Validation of bean definition failed", ex)[ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_14 $$ if (oldBeanDefinition != null) [ CD ]
Line_13 $$ oldBeanDefinition = this.beanDefinitionMap.get(beanName)-->Line_17 $$ if (oldBeanDefinition.getRole() < beanDefinition.getRole()) [ FD ]
Line_17 $$ if (oldBeanDefinition.getRole() < beanDefinition.getRole()) -->Line_21 $$ if (!beanDefinition.equals(oldBeanDefinition)) [ CD ]
Line_32 $$ if (hasBeanCreationStarted()) -->Line_47 $$ this.beanDefinitionNames.add(beanName)[ CD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_46 $$ this.beanDefinitionMap.put(beanName, beanDefinition)[ FD ]
Line_12 $$ BeanDefinition oldBeanDefinition-->Line_21 $$ if (!beanDefinition.equals(oldBeanDefinition)) [ FD ]
Line_22 $$ if (this.logger.isInfoEnabled()) -->Line_23 $$ this.logger.info("Overriding bean definition for bean '" + beanName + "' with a different definition: replacing [" + oldBeanDefinition + "] with [" + beanDefinition + "]")[ CD ]
Line_26 $$ if (this.logger.isDebugEnabled()) -->Line_27 $$ this.logger.debug("Overriding bean definition for bean '" + beanName + "' with an equivalent definition: replacing [" + oldBeanDefinition + "] with [" + beanDefinition + "]")[ CD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_41 $$ updatedSingletons.remove(beanName)[ FD ]
Line_32 $$ if (hasBeanCreationStarted()) -->Line_48 $$ this.manualSingletonNames.remove(beanName)[ CD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_12 $$ BeanDefinition oldBeanDefinition[ CD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_52 $$ if (oldBeanDefinition != null || containsSingleton(beanName)) [ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_39 $$ if (this.manualSingletonNames.contains(beanName)) [ FD ]
Line_40 $$ Set<String> updatedSingletons = new LinkedHashSet<String>(this.manualSingletonNames)-->Line_41 $$ updatedSingletons.remove(beanName)[ FD ]
Line_32 $$ if (hasBeanCreationStarted()) -->Line_46 $$ this.beanDefinitionMap.put(beanName, beanDefinition)[ CD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_52 $$ if (oldBeanDefinition != null || containsSingleton(beanName)) [ CD ]
Line_21 $$ if (!beanDefinition.equals(oldBeanDefinition)) -->Line_22 $$ if (this.logger.isInfoEnabled()) [ CD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_13 $$ oldBeanDefinition = this.beanDefinitionMap.get(beanName)[ FD ]
Line_13 $$ oldBeanDefinition = this.beanDefinitionMap.get(beanName)-->Line_14 $$ if (oldBeanDefinition != null) [ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_17 $$ if (oldBeanDefinition.getRole() < beanDefinition.getRole()) [ FD ]
Line_39 $$ if (this.manualSingletonNames.contains(beanName)) -->Line_41 $$ updatedSingletons.remove(beanName)[ CD ]
Line_39 $$ if (this.manualSingletonNames.contains(beanName)) -->Line_42 $$ this.manualSingletonNames = updatedSingletons[ CD ]
Line_14 $$ if (oldBeanDefinition != null) -->Line_30 $$ this.beanDefinitionMap.put(beanName, beanDefinition)[ CD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_3 $$ Assert.hasText(beanName, "Bean name must not be empty")[ FD ]
Line_35 $$ List<String> updatedDefinitions = new ArrayList<String>(this.beanDefinitionNames.size() + 1)-->Line_36 $$ updatedDefinitions.addAll(this.beanDefinitionNames)[ FD ]
Line_2 $$ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException -->Line_4 $$ Assert.notNull(beanDefinition, "BeanDefinition must not be null")[ FD ]
Line_17 $$ if (oldBeanDefinition.getRole() < beanDefinition.getRole()) -->Line_18 $$ if (this.logger.isWarnEnabled()) [ CD ]
Line_39 $$ if (this.manualSingletonNames.contains(beanName)) -->Line_40 $$ Set<String> updatedSingletons = new LinkedHashSet<String>(this.manualSingletonNames)[ CD ]
