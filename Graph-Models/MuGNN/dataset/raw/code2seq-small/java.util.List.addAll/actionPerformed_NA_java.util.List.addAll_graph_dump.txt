Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_68 $$ File emlFile = new File(storageRoot, module.getName() + EclipseXml.IDEA_SETTINGS_POSTFIX)[ FD ]
Line_23 $$ if (incompatibleModules.isEmpty()) -->Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() [ CD ]
Line_2 $$ public void actionPerformed(@NotNull AnActionEvent e) -->Line_40 $$ if (dialog.isLink()) [ CD ]
Line_3 $$ Project project = e.getData(CommonDataKeys.PROJECT)-->Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() [ FD ]
Line_3 $$ Project project = e.getData(CommonDataKeys.PROJECT)-->Line_25 $$ Messages.showInfoMessage(project, EclipseBundle.message("eclipse.export.nothing.to.do"), EclipseBundle.message("eclipse.export.dialog.title"))[ FD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_30 $$ return module.getName()[ FD ]
Line_2 $$ public void actionPerformed(@NotNull AnActionEvent e) -->Line_3 $$ Project project = e.getData(CommonDataKeys.PROJECT)[ CD ]
Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() -->Line_42 $$ ClasspathStorage.setStorageType(ModuleRootManager.getInstance(module), JpsEclipseClasspathSerializer.CLASSPATH_STORAGE_ID)[ FD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_42 $$ ClasspathStorage.setStorageType(ModuleRootManager.getInstance(module), JpsEclipseClasspathSerializer.CLASSPATH_STORAGE_ID)[ FD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_48 $$ String storageRoot = contentRoots.length == 1 ? contentRoots[0].getPath() : ClasspathStorage.getStorageRootFromOptions(module)[ FD ]
Line_3 $$ Project project = e.getData(CommonDataKeys.PROJECT)-->Line_80 $$ EclipseUserLibrariesHelper.appendProjectLibraries(project, dialog.getUserLibrariesFile())[ FD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_17 $$ modules.add(module)[ FD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_58 $$ String storageRoot = module2StorageRoot.get(module)[ FD ]
Line_3 $$ Project project = e.getData(CommonDataKeys.PROJECT)-->Line_72 $$ EclipseJDOMUtil.output(ideaSpecific, emlFile, project)[ FD ]
Line_3 $$ Project project = e.getData(CommonDataKeys.PROJECT)-->Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) [ FD ]
Line_8 $$ List<Module> modules = new SmartList<Module>()-->Line_35 $$ modules.addAll(incompatibleModules)[ FD ]
Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() -->Line_33 $$ return[ CD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_19 $$ incompatibleModules.add(module)[ FD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_57 $$ ModuleRootModel model = ModuleRootManager.getInstance(module)[ FD ]
Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() -->Line_51 $$ DotProjectFileHelper.saveDotProjectFile(module, storageRoot)[ FD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_47 $$ VirtualFile[] contentRoots = ModuleRootManager.getInstance(module).getContentRoots()[ FD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_49 $$ module2StorageRoot.put(module, storageRoot)[ FD ]
Line_24 $$ if (modules.isEmpty()) -->Line_26 $$ return[ CD ]
Line_13 $$ ClasspathStorageProvider provider = ClasspathStorage.getProvider(JpsEclipseClasspathSerializer.CLASSPATH_STORAGE_ID)-->Line_15 $$ provider.assertCompatible(ModuleRootManager.getInstance(module))[ FD ]
Line_2 $$ public void actionPerformed(@NotNull AnActionEvent e) -->Line_7 $$ project.save()[ CD ]
Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() -->Line_48 $$ String storageRoot = contentRoots.length == 1 ? contentRoots[0].getPath() : ClasspathStorage.getStorageRootFromOptions(module)[ FD ]
Line_9 $$ List<Module> incompatibleModules = new SmartList<Module>()-->Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() [ FD ]
Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() -->Line_58 $$ String storageRoot = module2StorageRoot.get(module)[ FD ]
Line_67 $$ if (IdeaSpecificSettings.writeIdeaSpecificClasspath(ideaSpecific, model)) -->Line_69 $$ if (!FileUtil.createIfDoesntExist(emlFile)) [ CD ]
Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() -->Line_68 $$ File emlFile = new File(storageRoot, module.getName() + EclipseXml.IDEA_SETTINGS_POSTFIX)[ FD ]
Line_23 $$ if (incompatibleModules.isEmpty()) -->Line_24 $$ if (modules.isEmpty()) [ CD ]
Line_2 $$ public void actionPerformed(@NotNull AnActionEvent e) -->Line_4 $$ if (project == null) [ CD ]
Line_14 $$ if (provider != null) -->Line_15 $$ provider.assertCompatible(ModuleRootManager.getInstance(module))[ CD ]
Line_2 $$ public void actionPerformed(@NotNull AnActionEvent e) -->Line_84 $$ project.save()[ CD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_15 $$ provider.assertCompatible(ModuleRootManager.getInstance(module))[ FD ]
Line_2 $$ public void actionPerformed(@NotNull AnActionEvent e) -->Line_37 $$ if (!dialog.showAndGet()) [ CD ]
Line_2 $$ public void actionPerformed(@NotNull AnActionEvent e) -->Line_35 $$ modules.addAll(incompatibleModules)[ CD ]
Line_2 $$ public void actionPerformed(@NotNull AnActionEvent e) -->Line_9 $$ List<Module> incompatibleModules = new SmartList<Module>()[ CD ]
Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() -->Line_30 $$ return module.getName()[ FD ]
Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() -->Line_47 $$ VirtualFile[] contentRoots = ModuleRootManager.getInstance(module).getContentRoots()[ FD ]
Line_3 $$ Project project = e.getData(CommonDataKeys.PROJECT)-->Line_84 $$ project.save()[ FD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_11 $$ if (!EclipseModuleManagerImpl.isEclipseStorage(module)) [ FD ]
Line_3 $$ Project project = e.getData(CommonDataKeys.PROJECT)-->Line_65 $$ EclipseJDOMUtil.output(classpathElement, classpathFile, project)[ FD ]
Line_9 $$ List<Module> incompatibleModules = new SmartList<Module>()-->Line_23 $$ if (incompatibleModules.isEmpty()) [ FD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_51 $$ DotProjectFileHelper.saveDotProjectFile(module, storageRoot)[ FD ]
Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() -->Line_57 $$ ModuleRootModel model = ModuleRootManager.getInstance(module)[ FD ]
Line_37 $$ if (!dialog.showAndGet()) -->Line_38 $$ return[ CD ]
Line_9 $$ List<Module> incompatibleModules = new SmartList<Module>()-->Line_35 $$ modules.addAll(incompatibleModules)[ FD ]
Line_2 $$ public void actionPerformed(@NotNull AnActionEvent e) -->Line_8 $$ List<Module> modules = new SmartList<Module>()[ CD ]
Line_2 $$ public void actionPerformed(@NotNull AnActionEvent e) -->Line_23 $$ if (incompatibleModules.isEmpty()) [ CD ]
Line_8 $$ List<Module> modules = new SmartList<Module>()-->Line_24 $$ if (modules.isEmpty()) [ FD ]
Line_8 $$ List<Module> modules = new SmartList<Module>()-->Line_17 $$ modules.add(module)[ FD ]
Line_24 $$ if (modules.isEmpty()) -->Line_25 $$ Messages.showInfoMessage(project, EclipseBundle.message("eclipse.export.nothing.to.do"), EclipseBundle.message("eclipse.export.dialog.title"))[ CD ]
Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() -->Line_30 $$ return module.getName()[ CD ]
Line_3 $$ Project project = e.getData(CommonDataKeys.PROJECT)-->Line_4 $$ if (project == null) [ FD ]
Line_67 $$ if (IdeaSpecificSettings.writeIdeaSpecificClasspath(ideaSpecific, model)) -->Line_72 $$ EclipseJDOMUtil.output(ideaSpecific, emlFile, project)[ CD ]
Line_13 $$ ClasspathStorageProvider provider = ClasspathStorage.getProvider(JpsEclipseClasspathSerializer.CLASSPATH_STORAGE_ID)-->Line_14 $$ if (provider != null) [ FD ]
Line_2 $$ public void actionPerformed(@NotNull AnActionEvent e) -->Line_3 $$ Project project = e.getData(CommonDataKeys.PROJECT)[ FD ]
Line_28 $$ if (Messages.showOkCancelDialog(project, "<html><body>Eclipse incompatible modules found:<ul><br><li>" + StringUtil.join(incompatibleModules, new Function<Module, String>() -->Line_49 $$ module2StorageRoot.put(module, storageRoot)[ FD ]
Line_9 $$ List<Module> incompatibleModules = new SmartList<Module>()-->Line_19 $$ incompatibleModules.add(module)[ FD ]
Line_4 $$ if (project == null) -->Line_5 $$ return[ CD ]
Line_3 $$ Project project = e.getData(CommonDataKeys.PROJECT)-->Line_7 $$ project.save()[ FD ]
