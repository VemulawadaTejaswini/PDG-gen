Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_10 $$ JpsModule module = chunk.representativeTarget().getModule()[ FD ]
Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_5 $$ loadCommonJavacOptions(context, compilingTool)[ FD ]
Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_9 $$ List<String> options = new ArrayList<String>()[ CD ]
Line_12 $$ if (baseDirectory != null) -->Line_13 $$ String stringToReplace = "$" + PathMacroUtil.MODULE_DIR_MACRO_NAME + "$"[ CD ]
Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_21 $$ addCompilationOptions(options, context, chunk, profile)[ CD ]
Line_12 $$ if (baseDirectory != null) -->Line_19 $$ options.addAll(cached)[ CD ]
Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_12 $$ if (baseDirectory != null) [ CD ]
Line_9 $$ List<String> options = new ArrayList<String>()-->Line_16 $$ options.add(StringUtil.replace(s, stringToReplace, moduleDirPath))[ FD ]
Line_3 $$ List<String> cached = JAVAC_OPTIONS.get(context)-->Line_4 $$ if (cached == null) [ FD ]
Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_10 $$ JpsModule module = chunk.representativeTarget().getModule()[ CD ]
Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_21 $$ addCompilationOptions(options, context, chunk, profile)[ FD ]
Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_3 $$ List<String> cached = JAVAC_OPTIONS.get(context)[ FD ]
Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_6 $$ cached = JAVAC_OPTIONS.get(context)[ FD ]
Line_13 $$ String stringToReplace = "$" + PathMacroUtil.MODULE_DIR_MACRO_NAME + "$"-->Line_16 $$ options.add(StringUtil.replace(s, stringToReplace, moduleDirPath))[ FD ]
Line_3 $$ List<String> cached = JAVAC_OPTIONS.get(context)-->Line_19 $$ options.addAll(cached)[ FD ]
Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_3 $$ List<String> cached = JAVAC_OPTIONS.get(context)[ CD ]
Line_3 $$ List<String> cached = JAVAC_OPTIONS.get(context)-->Line_6 $$ cached = JAVAC_OPTIONS.get(context)[ FD ]
Line_12 $$ if (baseDirectory != null) -->Line_14 $$ String moduleDirPath = FileUtil.toCanonicalPath(baseDirectory.getAbsolutePath())[ CD ]
Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_11 $$ File baseDirectory = JpsModelSerializationDataService.getBaseDirectory(module)[ CD ]
Line_11 $$ File baseDirectory = JpsModelSerializationDataService.getBaseDirectory(module)-->Line_14 $$ String moduleDirPath = FileUtil.toCanonicalPath(baseDirectory.getAbsolutePath())[ FD ]
Line_6 $$ cached = JAVAC_OPTIONS.get(context)-->Line_19 $$ options.addAll(cached)[ FD ]
Line_9 $$ List<String> options = new ArrayList<String>()-->Line_21 $$ addCompilationOptions(options, context, chunk, profile)[ FD ]
Line_4 $$ if (cached == null) -->Line_5 $$ loadCommonJavacOptions(context, compilingTool)[ CD ]
Line_11 $$ File baseDirectory = JpsModelSerializationDataService.getBaseDirectory(module)-->Line_12 $$ if (baseDirectory != null) [ FD ]
Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_22 $$ return options[ CD ]
Line_14 $$ String moduleDirPath = FileUtil.toCanonicalPath(baseDirectory.getAbsolutePath())-->Line_16 $$ options.add(StringUtil.replace(s, stringToReplace, moduleDirPath))[ FD ]
Line_4 $$ if (cached == null) -->Line_6 $$ cached = JAVAC_OPTIONS.get(context)[ CD ]
Line_2 $$ private static List<String> getCompilationOptions(CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile, @NotNull JavaCompilingTool compilingTool) -->Line_4 $$ if (cached == null) [ CD ]
Line_15 $$ for (String s : cached) -->Line_16 $$ options.add(StringUtil.replace(s, stringToReplace, moduleDirPath))[ FD ]
Line_9 $$ List<String> options = new ArrayList<String>()-->Line_19 $$ options.addAll(cached)[ FD ]
Line_10 $$ JpsModule module = chunk.representativeTarget().getModule()-->Line_11 $$ File baseDirectory = JpsModelSerializationDataService.getBaseDirectory(module)[ FD ]
