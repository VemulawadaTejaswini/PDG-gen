Line_2 $$ public static void mergeDefaults(Map<String, Object> content, Map<String, Object> defaults) -->Line_9 $$ if (content.get(defaultEntry.getKey()) instanceof List && defaultEntry.getValue() instanceof List) [ FD ]
Line_13 $$ if (allListValuesAreMapsOfOne(defaultList) && allListValuesAreMapsOfOne(contentList)) -->Line_33 $$ mergedList.addAll(defaultList)[ CD ]
Line_35 $$ if (!mergedList.contains(o)) -->Line_36 $$ mergedList.add(o)[ CD ]
Line_2 $$ public static void mergeDefaults(Map<String, Object> content, Map<String, Object> defaults) -->Line_5 $$ content.put(defaultEntry.getKey(), defaultEntry.getValue())[ FD ]
Line_3 $$ for (Map.Entry<String, Object> defaultEntry : defaults.entrySet()) -->Line_10 $$ List defaultList = (List) defaultEntry.getValue()[ FD ]
Line_14 $$ Map<String, Map<String, Object>> processed = new LinkedHashMap()-->Line_29 $$ for (Map<String, Object> map : processed.values()) [ FD ]
Line_16 $$ Map<String, Object> map = (Map<String, Object>) o-->Line_30 $$ mergedList.add(map)[ FD ]
Line_9 $$ if (content.get(defaultEntry.getKey()) instanceof List && defaultEntry.getValue() instanceof List) -->Line_12 $$ List mergedList = new ArrayList()[ CD ]
Line_12 $$ List mergedList = new ArrayList()-->Line_36 $$ mergedList.add(o)[ FD ]
Line_9 $$ if (content.get(defaultEntry.getKey()) instanceof List && defaultEntry.getValue() instanceof List) -->Line_13 $$ if (allListValuesAreMapsOfOne(defaultList) && allListValuesAreMapsOfOne(contentList)) [ CD ]
Line_16 $$ Map<String, Object> map = (Map<String, Object>) o-->Line_24 $$ mergeDefaults(processed.get(entry.getKey()), map)[ FD ]
Line_16 $$ Map<String, Object> map = (Map<String, Object>) o-->Line_17 $$ Map.Entry<String, Object> entry = map.entrySet().iterator().next()[ FD ]
Line_4 $$ if (!content.containsKey(defaultEntry.getKey())) -->Line_5 $$ content.put(defaultEntry.getKey(), defaultEntry.getValue())[ CD ]
Line_17 $$ Map.Entry<String, Object> entry = map.entrySet().iterator().next()-->Line_18 $$ processed.put(entry.getKey(), map)[ FD ]
Line_2 $$ public static void mergeDefaults(Map<String, Object> content, Map<String, Object> defaults) -->Line_7 $$ if (content.get(defaultEntry.getKey()) instanceof Map && defaultEntry.getValue() instanceof Map) [ FD ]
Line_14 $$ Map<String, Map<String, Object>> processed = new LinkedHashMap()-->Line_24 $$ mergeDefaults(processed.get(entry.getKey()), map)[ FD ]
Line_9 $$ if (content.get(defaultEntry.getKey()) instanceof List && defaultEntry.getValue() instanceof List) -->Line_40 $$ content.put(defaultEntry.getKey(), mergedList)[ CD ]
Line_23 $$ if (processed.containsKey(entry.getKey())) -->Line_26 $$ processed.put(entry.getKey(), map)[ CD ]
Line_16 $$ Map<String, Object> map = (Map<String, Object>) o-->Line_26 $$ processed.put(entry.getKey(), map)[ FD ]
Line_15 $$ for (Object o : contentList) -->Line_35 $$ if (!mergedList.contains(o)) [ FD ]
Line_13 $$ if (allListValuesAreMapsOfOne(defaultList) && allListValuesAreMapsOfOne(contentList)) -->Line_14 $$ Map<String, Map<String, Object>> processed = new LinkedHashMap()[ CD ]
Line_9 $$ if (content.get(defaultEntry.getKey()) instanceof List && defaultEntry.getValue() instanceof List) -->Line_10 $$ List defaultList = (List) defaultEntry.getValue()[ CD ]
Line_3 $$ for (Map.Entry<String, Object> defaultEntry : defaults.entrySet()) -->Line_5 $$ content.put(defaultEntry.getKey(), defaultEntry.getValue())[ FD ]
Line_7 $$ if (content.get(defaultEntry.getKey()) instanceof Map && defaultEntry.getValue() instanceof Map) -->Line_8 $$ mergeDefaults((Map<String, Object>) content.get(defaultEntry.getKey()), (Map<String, Object>) defaultEntry.getValue())[ CD ]
Line_12 $$ List mergedList = new ArrayList()-->Line_30 $$ mergedList.add(map)[ FD ]
Line_10 $$ List defaultList = (List) defaultEntry.getValue()-->Line_33 $$ mergedList.addAll(defaultList)[ FD ]
Line_2 $$ public static void mergeDefaults(Map<String, Object> content, Map<String, Object> defaults) -->Line_8 $$ mergeDefaults((Map<String, Object>) content.get(defaultEntry.getKey()), (Map<String, Object>) defaultEntry.getValue())[ FD ]
Line_3 $$ for (Map.Entry<String, Object> defaultEntry : defaults.entrySet()) -->Line_4 $$ if (!content.containsKey(defaultEntry.getKey())) [ FD ]
Line_3 $$ for (Map.Entry<String, Object> defaultEntry : defaults.entrySet()) -->Line_8 $$ mergeDefaults((Map<String, Object>) content.get(defaultEntry.getKey()), (Map<String, Object>) defaultEntry.getValue())[ FD ]
Line_17 $$ Map.Entry<String, Object> entry = map.entrySet().iterator().next()-->Line_26 $$ processed.put(entry.getKey(), map)[ FD ]
Line_2 $$ public static void mergeDefaults(Map<String, Object> content, Map<String, Object> defaults) -->Line_3 $$ for (Map.Entry<String, Object> defaultEntry : defaults.entrySet()) [ FD ]
Line_16 $$ Map<String, Object> map = (Map<String, Object>) o-->Line_18 $$ processed.put(entry.getKey(), map)[ FD ]
Line_10 $$ List defaultList = (List) defaultEntry.getValue()-->Line_13 $$ if (allListValuesAreMapsOfOne(defaultList) && allListValuesAreMapsOfOne(contentList)) [ FD ]
Line_14 $$ Map<String, Map<String, Object>> processed = new LinkedHashMap()-->Line_18 $$ processed.put(entry.getKey(), map)[ FD ]
Line_14 $$ Map<String, Map<String, Object>> processed = new LinkedHashMap()-->Line_23 $$ if (processed.containsKey(entry.getKey())) [ FD ]
Line_11 $$ List contentList = (List) content.get(defaultEntry.getKey())-->Line_13 $$ if (allListValuesAreMapsOfOne(defaultList) && allListValuesAreMapsOfOne(contentList)) [ FD ]
Line_4 $$ if (!content.containsKey(defaultEntry.getKey())) -->Line_7 $$ if (content.get(defaultEntry.getKey()) instanceof Map && defaultEntry.getValue() instanceof Map) [ CD ]
Line_2 $$ public static void mergeDefaults(Map<String, Object> content, Map<String, Object> defaults) -->Line_4 $$ if (!content.containsKey(defaultEntry.getKey())) [ FD ]
Line_3 $$ for (Map.Entry<String, Object> defaultEntry : defaults.entrySet()) -->Line_11 $$ List contentList = (List) content.get(defaultEntry.getKey())[ FD ]
Line_17 $$ Map.Entry<String, Object> entry = map.entrySet().iterator().next()-->Line_24 $$ mergeDefaults(processed.get(entry.getKey()), map)[ FD ]
Line_3 $$ for (Map.Entry<String, Object> defaultEntry : defaults.entrySet()) -->Line_9 $$ if (content.get(defaultEntry.getKey()) instanceof List && defaultEntry.getValue() instanceof List) [ FD ]
Line_12 $$ List mergedList = new ArrayList()-->Line_33 $$ mergedList.addAll(defaultList)[ FD ]
Line_12 $$ List mergedList = new ArrayList()-->Line_40 $$ content.put(defaultEntry.getKey(), mergedList)[ FD ]
Line_16 $$ Map<String, Object> map = (Map<String, Object>) o-->Line_22 $$ Map.Entry<String, Object> entry = map.entrySet().iterator().next()[ FD ]
Line_23 $$ if (processed.containsKey(entry.getKey())) -->Line_24 $$ mergeDefaults(processed.get(entry.getKey()), map)[ CD ]
Line_3 $$ for (Map.Entry<String, Object> defaultEntry : defaults.entrySet()) -->Line_40 $$ content.put(defaultEntry.getKey(), mergedList)[ FD ]
Line_2 $$ public static void mergeDefaults(Map<String, Object> content, Map<String, Object> defaults) -->Line_40 $$ content.put(defaultEntry.getKey(), mergedList)[ FD ]
Line_15 $$ for (Object o : contentList) -->Line_36 $$ mergedList.add(o)[ FD ]
Line_3 $$ for (Map.Entry<String, Object> defaultEntry : defaults.entrySet()) -->Line_7 $$ if (content.get(defaultEntry.getKey()) instanceof Map && defaultEntry.getValue() instanceof Map) [ FD ]
Line_14 $$ Map<String, Map<String, Object>> processed = new LinkedHashMap()-->Line_26 $$ processed.put(entry.getKey(), map)[ FD ]
Line_12 $$ List mergedList = new ArrayList()-->Line_35 $$ if (!mergedList.contains(o)) [ FD ]
Line_17 $$ Map.Entry<String, Object> entry = map.entrySet().iterator().next()-->Line_23 $$ if (processed.containsKey(entry.getKey())) [ FD ]
Line_9 $$ if (content.get(defaultEntry.getKey()) instanceof List && defaultEntry.getValue() instanceof List) -->Line_11 $$ List contentList = (List) content.get(defaultEntry.getKey())[ CD ]
Line_2 $$ public static void mergeDefaults(Map<String, Object> content, Map<String, Object> defaults) -->Line_11 $$ List contentList = (List) content.get(defaultEntry.getKey())[ FD ]
Line_7 $$ if (content.get(defaultEntry.getKey()) instanceof Map && defaultEntry.getValue() instanceof Map) -->Line_9 $$ if (content.get(defaultEntry.getKey()) instanceof List && defaultEntry.getValue() instanceof List) [ CD ]
