Line_2 $$ private String[] identifyHosts(int replicationFactor, Map<Node, NodeInfo> racksMap) -->Line_16 $$ if (index == replicationFactor) [ FD ]
Line_16 $$ if (index == replicationFactor) -->Line_17 $$ done = true[ CD ]
Line_10 $$ Set<NodeInfo> hostSet = ni.getLeaves()-->Line_12 $$ hostList.addAll(hostSet)[ FD ]
Line_11 $$ List<NodeInfo> hostList = new LinkedList<NodeInfo>()-->Line_13 $$ sortInDescendingOrder(hostList)[ FD ]
Line_2 $$ private String[] identifyHosts(int replicationFactor, Map<Node, NodeInfo> racksMap) -->Line_4 $$ List<NodeInfo> rackList = new LinkedList<NodeInfo>()[ CD ]
Line_2 $$ private String[] identifyHosts(int replicationFactor, Map<Node, NodeInfo> racksMap) -->Line_6 $$ sortInDescendingOrder(rackList)[ CD ]
Line_4 $$ List<NodeInfo> rackList = new LinkedList<NodeInfo>()-->Line_6 $$ sortInDescendingOrder(rackList)[ FD ]
Line_2 $$ private String[] identifyHosts(int replicationFactor, Map<Node, NodeInfo> racksMap) -->Line_3 $$ String[] retVal = new String[replicationFactor][ CD ]
Line_2 $$ private String[] identifyHosts(int replicationFactor, Map<Node, NodeInfo> racksMap) -->Line_5 $$ rackList.addAll(racksMap.values())[ FD ]
Line_8 $$ int index = 0-->Line_16 $$ if (index == replicationFactor) [ FD ]
Line_17 $$ done = true-->Line_21 $$ if (done == true) [ FD ]
Line_2 $$ private String[] identifyHosts(int replicationFactor, Map<Node, NodeInfo> racksMap) -->Line_5 $$ rackList.addAll(racksMap.values())[ CD ]
Line_2 $$ private String[] identifyHosts(int replicationFactor, Map<Node, NodeInfo> racksMap) -->Line_8 $$ int index = 0[ CD ]
Line_4 $$ List<NodeInfo> rackList = new LinkedList<NodeInfo>()-->Line_5 $$ rackList.addAll(racksMap.values())[ FD ]
Line_2 $$ private String[] identifyHosts(int replicationFactor, Map<Node, NodeInfo> racksMap) -->Line_7 $$ boolean done = false[ CD ]
Line_7 $$ boolean done = false-->Line_17 $$ done = true[ FD ]
Line_7 $$ boolean done = false-->Line_21 $$ if (done == true) [ FD ]
Line_2 $$ private String[] identifyHosts(int replicationFactor, Map<Node, NodeInfo> racksMap) -->Line_25 $$ return retVal[ CD ]
Line_11 $$ List<NodeInfo> hostList = new LinkedList<NodeInfo>()-->Line_12 $$ hostList.addAll(hostSet)[ FD ]
Line_9 $$ for (NodeInfo ni : rackList) -->Line_10 $$ Set<NodeInfo> hostSet = ni.getLeaves()[ FD ]
Line_8 $$ int index = 0-->Line_15 $$ retVal[index++] = host.node.getName().split(":")[0][ FD ]
