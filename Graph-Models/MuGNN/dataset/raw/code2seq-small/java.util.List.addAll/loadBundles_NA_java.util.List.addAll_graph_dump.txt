Line_14 $$ for (PluginInfo pluginInfo : bundle.plugins) -->Line_18 $$ Class<? extends Plugin> pluginClass = loadPluginClass(pluginInfo.getClassname(), loader)[ FD ]
Line_15 $$ final Plugin plugin-->Line_19 $$ plugin = loadPlugin(pluginClass, settings)[ FD ]
Line_2 $$ private List<Tuple<PluginInfo, Plugin>> loadBundles(List<Bundle> bundles) -->Line_3 $$ List<Tuple<PluginInfo, Plugin>> plugins = new ArrayList()[ CD ]
Line_6 $$ final List<URL> jars = new ArrayList()-->Line_8 $$ jars.addAll(bundle.urls)[ FD ]
Line_18 $$ Class<? extends Plugin> pluginClass = loadPluginClass(pluginInfo.getClassname(), loader)-->Line_19 $$ plugin = loadPlugin(pluginClass, settings)[ FD ]
Line_16 $$ if (pluginInfo.isJvm()) -->Line_19 $$ plugin = loadPlugin(pluginClass, settings)[ CD ]
Line_14 $$ for (PluginInfo pluginInfo : bundle.plugins) -->Line_21 $$ plugin = new SitePlugin(pluginInfo.getName(), pluginInfo.getDescription())[ FD ]
Line_19 $$ plugin = loadPlugin(pluginClass, settings)-->Line_21 $$ plugin = new SitePlugin(pluginInfo.getName(), pluginInfo.getDescription())[ FD ]
Line_6 $$ final List<URL> jars = new ArrayList()-->Line_7 $$ jars.addAll(Arrays.asList(JarHell.parseClassPath()))[ FD ]
Line_3 $$ List<Tuple<PluginInfo, Plugin>> plugins = new ArrayList()-->Line_26 $$ return Collections.unmodifiableList(plugins)[ FD ]
Line_16 $$ if (pluginInfo.isJvm()) -->Line_17 $$ reloadLuceneSPI(loader)[ CD ]
Line_13 $$ ClassLoader loader = URLClassLoader.newInstance(bundle.urls.toArray(new URL[0]), getClass().getClassLoader())-->Line_18 $$ Class<? extends Plugin> pluginClass = loadPluginClass(pluginInfo.getClassname(), loader)[ FD ]
Line_14 $$ for (PluginInfo pluginInfo : bundle.plugins) -->Line_16 $$ if (pluginInfo.isJvm()) [ FD ]
Line_2 $$ private List<Tuple<PluginInfo, Plugin>> loadBundles(List<Bundle> bundles) -->Line_26 $$ return Collections.unmodifiableList(plugins)[ CD ]
Line_6 $$ final List<URL> jars = new ArrayList()-->Line_9 $$ JarHell.checkJarHell(jars.toArray(new URL[0]))[ FD ]
Line_3 $$ List<Tuple<PluginInfo, Plugin>> plugins = new ArrayList()-->Line_23 $$ plugins.add(new Tuple(pluginInfo, plugin))[ FD ]
Line_16 $$ if (pluginInfo.isJvm()) -->Line_18 $$ Class<? extends Plugin> pluginClass = loadPluginClass(pluginInfo.getClassname(), loader)[ CD ]
Line_16 $$ if (pluginInfo.isJvm()) -->Line_21 $$ plugin = new SitePlugin(pluginInfo.getName(), pluginInfo.getDescription())[ CD ]
Line_15 $$ final Plugin plugin-->Line_21 $$ plugin = new SitePlugin(pluginInfo.getName(), pluginInfo.getDescription())[ FD ]
Line_13 $$ ClassLoader loader = URLClassLoader.newInstance(bundle.urls.toArray(new URL[0]), getClass().getClassLoader())-->Line_17 $$ reloadLuceneSPI(loader)[ FD ]
