Line_11 $$ myDependenciesList.setItems(possibleDependencies, new Function<Module, String>() -->Line_13 $$ return module.getName()[ FD ]
Line_7 $$ if (!possibleDependencies.contains(otherModule) && otherModule != myModule) -->Line_8 $$ possibleDependencies.add(otherModule)[ CD ]
Line_6 $$ for (Module otherModule : ModuleManager.getInstance(myModule.getProject()).getModules()) -->Line_8 $$ possibleDependencies.add(otherModule)[ FD ]
Line_3 $$ List<Module> possibleDependencies = new ArrayList<Module>()-->Line_5 $$ possibleDependencies.addAll(myInitialDependencies)[ FD ]
Line_11 $$ myDependenciesList.setItems(possibleDependencies, new Function<Module, String>() -->Line_13 $$ return module.getName()[ CD ]
Line_3 $$ List<Module> possibleDependencies = new ArrayList<Module>()-->Line_7 $$ if (!possibleDependencies.contains(otherModule) && otherModule != myModule) [ FD ]
Line_2 $$ private void resetModel() -->Line_5 $$ possibleDependencies.addAll(myInitialDependencies)[ CD ]
Line_6 $$ for (Module otherModule : ModuleManager.getInstance(myModule.getProject()).getModules()) -->Line_7 $$ if (!possibleDependencies.contains(otherModule) && otherModule != myModule) [ FD ]
Line_2 $$ private void resetModel() -->Line_4 $$ myInitialDependencies = Arrays.asList(ModuleRootManager.getInstance(myModule).getDependencies())[ CD ]
Line_3 $$ List<Module> possibleDependencies = new ArrayList<Module>()-->Line_8 $$ possibleDependencies.add(otherModule)[ FD ]
Line_2 $$ private void resetModel() -->Line_11 $$ myDependenciesList.setItems(possibleDependencies, new Function<Module, String>() [ CD ]
Line_2 $$ private void resetModel() -->Line_16 $$ myDependenciesList.setBorder(null)[ CD ]
Line_2 $$ private void resetModel() -->Line_3 $$ List<Module> possibleDependencies = new ArrayList<Module>()[ CD ]
Line_3 $$ List<Module> possibleDependencies = new ArrayList<Module>()-->Line_11 $$ myDependenciesList.setItems(possibleDependencies, new Function<Module, String>() [ FD ]
