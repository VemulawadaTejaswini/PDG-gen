Line_7 $$ int newSize = 0-->Line_15 $$ newSize += step.getAfter().size()[ FD ]
Line_2 $$ public static List<SplitHunk> read(final PatchHunk hunk) -->Line_4 $$ final List<PatchLine> lines = hunk.getLines()[ FD ]
Line_6 $$ List<String> contextBefore = new ArrayList<String>()-->Line_9 $$ final int inheritedContext = contextBefore.size()[ FD ]
Line_8 $$ while (i < lines.size()) -->Line_12 $$ final int endIdx = readOne(lines, contextBefore, contextAfter, steps, i)[ CD ]
Line_5 $$ int i = 0-->Line_18 $$ if (i < lines.size()) [ FD ]
Line_10 $$ final List<String> contextAfter = new ArrayList<String>()-->Line_12 $$ final int endIdx = readOne(lines, contextBefore, contextAfter, steps, i)[ FD ]
Line_18 $$ if (i < lines.size()) -->Line_20 $$ contextBefore.addAll(contextAfter)[ CD ]
Line_4 $$ final List<PatchLine> lines = hunk.getLines()-->Line_8 $$ while (i < lines.size()) [ FD ]
Line_17 $$ i = endIdx-->Line_8 $$ while (i < lines.size()) [ FD ]
Line_6 $$ List<String> contextBefore = new ArrayList<String>()-->Line_19 $$ contextBefore = new ArrayList<String>()[ FD ]
Line_19 $$ contextBefore = new ArrayList<String>()-->Line_20 $$ contextBefore.addAll(contextAfter)[ FD ]
Line_4 $$ final List<PatchLine> lines = hunk.getLines()-->Line_12 $$ final int endIdx = readOne(lines, contextBefore, contextAfter, steps, i)[ FD ]
Line_19 $$ contextBefore = new ArrayList<String>()-->Line_9 $$ final int inheritedContext = contextBefore.size()[ FD ]
Line_12 $$ final int endIdx = readOne(lines, contextBefore, contextAfter, steps, i)-->Line_17 $$ i = endIdx[ FD ]
Line_6 $$ List<String> contextBefore = new ArrayList<String>()-->Line_12 $$ final int endIdx = readOne(lines, contextBefore, contextAfter, steps, i)[ FD ]
Line_8 $$ while (i < lines.size()) -->Line_9 $$ final int inheritedContext = contextBefore.size()[ CD ]
Line_6 $$ List<String> contextBefore = new ArrayList<String>()-->Line_20 $$ contextBefore.addAll(contextAfter)[ FD ]
Line_18 $$ if (i < lines.size()) -->Line_19 $$ contextBefore = new ArrayList<String>()[ CD ]
Line_2 $$ public static List<SplitHunk> read(final PatchHunk hunk) -->Line_3 $$ final List<SplitHunk> result = new ArrayList<SplitHunk>()[ CD ]
Line_2 $$ public static List<SplitHunk> read(final PatchHunk hunk) -->Line_23 $$ return result[ CD ]
Line_8 $$ while (i < lines.size()) -->Line_13 $$ result.add(new SplitHunk(hunk.getStartLineBefore() + i - inheritedContext - newSize, steps, contextAfter, contextBefore))[ CD ]
Line_8 $$ while (i < lines.size()) -->Line_18 $$ if (i < lines.size()) [ CD ]
Line_19 $$ contextBefore = new ArrayList<String>()-->Line_12 $$ final int endIdx = readOne(lines, contextBefore, contextAfter, steps, i)[ FD ]
Line_8 $$ while (i < lines.size()) -->Line_11 $$ final List<BeforeAfter<List<String>>> steps = new ArrayList<BeforeAfter<List<String>>>()[ CD ]
Line_8 $$ while (i < lines.size()) -->Line_17 $$ i = endIdx[ CD ]
Line_17 $$ i = endIdx-->Line_18 $$ if (i < lines.size()) [ FD ]
Line_17 $$ i = endIdx-->Line_12 $$ final int endIdx = readOne(lines, contextBefore, contextAfter, steps, i)[ FD ]
Line_4 $$ final List<PatchLine> lines = hunk.getLines()-->Line_18 $$ if (i < lines.size()) [ FD ]
Line_8 $$ while (i < lines.size()) -->Line_10 $$ final List<String> contextAfter = new ArrayList<String>()[ CD ]
Line_14 $$ for (BeforeAfter<List<String>> step : steps) -->Line_15 $$ newSize += step.getAfter().size()[ FD ]
Line_2 $$ public static List<SplitHunk> read(final PatchHunk hunk) -->Line_8 $$ while (i < lines.size()) [ CD ]
Line_2 $$ public static List<SplitHunk> read(final PatchHunk hunk) -->Line_13 $$ result.add(new SplitHunk(hunk.getStartLineBefore() + i - inheritedContext - newSize, steps, contextAfter, contextBefore))[ FD ]
Line_5 $$ int i = 0-->Line_8 $$ while (i < lines.size()) [ FD ]
Line_5 $$ int i = 0-->Line_17 $$ i = endIdx[ FD ]
Line_2 $$ public static List<SplitHunk> read(final PatchHunk hunk) -->Line_6 $$ List<String> contextBefore = new ArrayList<String>()[ CD ]
Line_2 $$ public static List<SplitHunk> read(final PatchHunk hunk) -->Line_7 $$ int newSize = 0[ CD ]
Line_3 $$ final List<SplitHunk> result = new ArrayList<SplitHunk>()-->Line_13 $$ result.add(new SplitHunk(hunk.getStartLineBefore() + i - inheritedContext - newSize, steps, contextAfter, contextBefore))[ FD ]
Line_5 $$ int i = 0-->Line_12 $$ final int endIdx = readOne(lines, contextBefore, contextAfter, steps, i)[ FD ]
Line_11 $$ final List<BeforeAfter<List<String>>> steps = new ArrayList<BeforeAfter<List<String>>>()-->Line_12 $$ final int endIdx = readOne(lines, contextBefore, contextAfter, steps, i)[ FD ]
Line_10 $$ final List<String> contextAfter = new ArrayList<String>()-->Line_20 $$ contextBefore.addAll(contextAfter)[ FD ]
Line_2 $$ public static List<SplitHunk> read(final PatchHunk hunk) -->Line_5 $$ int i = 0[ CD ]
Line_2 $$ public static List<SplitHunk> read(final PatchHunk hunk) -->Line_4 $$ final List<PatchLine> lines = hunk.getLines()[ CD ]
