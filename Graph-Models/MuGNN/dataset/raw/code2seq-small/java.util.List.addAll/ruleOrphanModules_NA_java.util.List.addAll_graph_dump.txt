Line_9 $$ final JPanel content = new JPanel(new GridBagLayout())-->Line_22 $$ content.add(orphanModulesList, ExternalSystemUiUtil.getFillLineConstraints(0))[ FD ]
Line_39 $$ if (orphanModulesList.isItemSelected(i)) -->Line_40 $$ toRemove.add(module)[ CD ]
Line_6 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_36 $$ dialog.showAndGet()[ CD ]
Line_2 $$ private static void ruleOrphanModules(@NotNull final List<Module> orphanModules, @NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final Consumer<List<Module>> result) -->Line_37 $$ for (int i = 0; i < orphanModules.size(); i++) [ FD ]
Line_6 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_11 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()[ CD ]
Line_11 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()-->Line_12 $$ orphanModulesList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION)[ FD ]
Line_3 $$ ExternalSystemApiUtil.executeOnEdt(true, new Runnable() -->Line_6 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) [ CD ]
Line_2 $$ private static void ruleOrphanModules(@NotNull final List<Module> orphanModules, @NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final Consumer<List<Module>> result) -->Line_7 $$ toRemove.addAll(orphanModules)[ FD ]
Line_9 $$ final JPanel content = new JPanel(new GridBagLayout())-->Line_23 $$ content.setBorder(IdeBorderFactory.createEmptyBorder(0, 0, 8, 0))[ FD ]
Line_37 $$ for (int i = 0; i < orphanModules.size(); i++) -->Line_38 $$ Module module = orphanModules.get(i)[ FD ]
Line_37 $$ for (int i = 0; i < orphanModules.size(); i++) -->Line_39 $$ if (orphanModulesList.isItemSelected(i)) [ CD ]
Line_38 $$ Module module = orphanModules.get(i)-->Line_40 $$ toRemove.add(module)[ FD ]
Line_5 $$ List<Module> toRemove = ContainerUtil.newSmartList()-->Line_7 $$ toRemove.addAll(orphanModules)[ FD ]
Line_6 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_7 $$ toRemove.addAll(orphanModules)[ CD ]
Line_13 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() -->Line_15 $$ return module.getName()[ FD ]
Line_24 $$ DialogWrapper dialog = new DialogWrapper(project) -->Line_33 $$ return new Action[] [ CD ]
Line_2 $$ private static void ruleOrphanModules(@NotNull final List<Module> orphanModules, @NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final Consumer<List<Module>> result) -->Line_38 $$ Module module = orphanModules.get(i)[ FD ]
Line_5 $$ List<Module> toRemove = ContainerUtil.newSmartList()-->Line_44 $$ result.consume(toRemove)[ FD ]
Line_11 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()-->Line_13 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() [ FD ]
Line_11 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()-->Line_19 $$ orphanModulesList.setItemSelected(module, true)[ FD ]
Line_6 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_23 $$ content.setBorder(IdeBorderFactory.createEmptyBorder(0, 0, 8, 0))[ CD ]
Line_6 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_10 $$ content.add(new JLabel(ExternalSystemBundle.message("orphan.modules.text", externalSystemId.getReadableName())), ExternalSystemUiUtil.getFillLineConstraints(0))[ CD ]
Line_24 $$ DialogWrapper dialog = new DialogWrapper(project) -->Line_30 $$ return new JBScrollPane(content)[ CD ]
Line_6 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_37 $$ for (int i = 0; i < orphanModules.size(); i++) [ CD ]
Line_6 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_9 $$ final JPanel content = new JPanel(new GridBagLayout())[ CD ]
Line_37 $$ for (int i = 0; i < orphanModules.size(); i++) -->Line_39 $$ if (orphanModulesList.isItemSelected(i)) [ FD ]
Line_11 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()-->Line_22 $$ content.add(orphanModulesList, ExternalSystemUiUtil.getFillLineConstraints(0))[ FD ]
Line_2 $$ private static void ruleOrphanModules(@NotNull final List<Module> orphanModules, @NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final Consumer<List<Module>> result) -->Line_13 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() [ FD ]
Line_13 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() -->Line_40 $$ toRemove.add(module)[ FD ]
Line_6 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_22 $$ content.add(orphanModulesList, ExternalSystemUiUtil.getFillLineConstraints(0))[ CD ]
Line_2 $$ private static void ruleOrphanModules(@NotNull final List<Module> orphanModules, @NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final Consumer<List<Module>> result) -->Line_3 $$ ExternalSystemApiUtil.executeOnEdt(true, new Runnable() [ CD ]
Line_11 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()-->Line_39 $$ if (orphanModulesList.isItemSelected(i)) [ FD ]
Line_13 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() -->Line_19 $$ orphanModulesList.setItemSelected(module, true)[ FD ]
Line_2 $$ private static void ruleOrphanModules(@NotNull final List<Module> orphanModules, @NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final Consumer<List<Module>> result) -->Line_10 $$ content.add(new JLabel(ExternalSystemBundle.message("orphan.modules.text", externalSystemId.getReadableName())), ExternalSystemUiUtil.getFillLineConstraints(0))[ FD ]
Line_9 $$ final JPanel content = new JPanel(new GridBagLayout())-->Line_10 $$ content.add(new JLabel(ExternalSystemBundle.message("orphan.modules.text", externalSystemId.getReadableName())), ExternalSystemUiUtil.getFillLineConstraints(0))[ FD ]
Line_5 $$ List<Module> toRemove = ContainerUtil.newSmartList()-->Line_40 $$ toRemove.add(module)[ FD ]
Line_6 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_21 $$ orphanModulesList.setBorder(IdeBorderFactory.createEmptyBorder(8))[ CD ]
Line_2 $$ private static void ruleOrphanModules(@NotNull final List<Module> orphanModules, @NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final Consumer<List<Module>> result) -->Line_44 $$ result.consume(toRemove)[ FD ]
Line_3 $$ ExternalSystemApiUtil.executeOnEdt(true, new Runnable() -->Line_44 $$ result.consume(toRemove)[ CD ]
Line_6 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_12 $$ orphanModulesList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION)[ CD ]
Line_3 $$ ExternalSystemApiUtil.executeOnEdt(true, new Runnable() -->Line_5 $$ List<Module> toRemove = ContainerUtil.newSmartList()[ CD ]
Line_11 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()-->Line_21 $$ orphanModulesList.setBorder(IdeBorderFactory.createEmptyBorder(8))[ FD ]
Line_2 $$ private static void ruleOrphanModules(@NotNull final List<Module> orphanModules, @NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final Consumer<List<Module>> result) -->Line_26 $$ setTitle(ExternalSystemBundle.message("import.title", externalSystemId.getReadableName()))[ FD ]
Line_37 $$ for (int i = 0; i < orphanModules.size(); i++) -->Line_38 $$ Module module = orphanModules.get(i)[ CD ]
Line_6 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_13 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() [ CD ]
Line_13 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() -->Line_15 $$ return module.getName()[ CD ]
