Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_5 $$ if (interfaces != null) [ FD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_19 $$ CollectionUtils.filter(methods, new RejectModifierPredicate(Constants.ACC_STATIC | Constants.ACC_FINAL))[ CD ]
Line_13 $$ if (forcePublic != null) -->Line_14 $$ forcePublic.addAll(MethodWrapper.createSet(interfaceMethods))[ CD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_13 $$ if (forcePublic != null) [ FD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_4 $$ List<Method> target = (interfaceMethods != null) ? interfaceMethods : methods[ CD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_3 $$ ReflectUtils.addAllMethods(superclass, methods)[ CD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_3 $$ ReflectUtils.addAllMethods(superclass, methods)[ FD ]
Line_12 $$ if (interfaceMethods != null) -->Line_13 $$ if (forcePublic != null) [ CD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_16 $$ methods.addAll(interfaceMethods)[ FD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_5 $$ if (interfaces != null) [ CD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_12 $$ if (interfaceMethods != null) [ CD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_18 $$ CollectionUtils.filter(methods, new DuplicatesPredicate())[ CD ]
Line_6 $$ for (Class anInterface : interfaces) -->Line_7 $$ if (anInterface != Factory.class) [ FD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_18 $$ CollectionUtils.filter(methods, new DuplicatesPredicate())[ FD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_20 $$ CollectionUtils.filter(methods, new VisibilityPredicate(superclass, true))[ CD ]
Line_7 $$ if (anInterface != Factory.class) -->Line_8 $$ ReflectUtils.addAllMethods(anInterface, target)[ CD ]
Line_4 $$ List<Method> target = (interfaceMethods != null) ? interfaceMethods : methods-->Line_8 $$ ReflectUtils.addAllMethods(anInterface, target)[ FD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_20 $$ CollectionUtils.filter(methods, new VisibilityPredicate(superclass, true))[ FD ]
Line_6 $$ for (Class anInterface : interfaces) -->Line_8 $$ ReflectUtils.addAllMethods(anInterface, target)[ FD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_12 $$ if (interfaceMethods != null) [ FD ]
Line_12 $$ if (interfaceMethods != null) -->Line_16 $$ methods.addAll(interfaceMethods)[ CD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_14 $$ forcePublic.addAll(MethodWrapper.createSet(interfaceMethods))[ FD ]
Line_2 $$ private static void getMethods(Class superclass, Class[] interfaces, List<Method> methods, List<Method> interfaceMethods, Set forcePublic) -->Line_19 $$ CollectionUtils.filter(methods, new RejectModifierPredicate(Constants.ACC_STATIC | Constants.ACC_FINAL))[ FD ]
