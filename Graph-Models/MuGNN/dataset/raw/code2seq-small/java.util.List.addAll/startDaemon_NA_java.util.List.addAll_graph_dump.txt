Line_20 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_30 $$ LOGGER.debug("Using daemon args: [ FD ]
Line_10 $$ classpath = new DefaultClassPath()-->Line_16 $$ if (classpath.isEmpty()) [ FD ]
Line_4 $$ ClassPath classpath-->Line_12 $$ classpath = classpath.plus(module.getClasspath())[ FD ]
Line_20 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_53 $$ DaemonStartupInfo daemonInfo = startProcess(daemonArgs, daemonDir.getVersionedDir(), stdInput)[ FD ]
Line_20 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_32 $$ daemonArgs.add(GradleVersion.current().getVersion())[ FD ]
Line_41 $$ for (String daemonOpt : daemonOpts) -->Line_42 $$ encoder.writeString(daemonOpt)[ FD ]
Line_4 $$ ClassPath classpath-->Line_25 $$ daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()))[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_4 $$ ClassPath classpath[ CD ]
Line_34 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_40 $$ encoder.writeSmallInt(daemonOpts.size())[ FD ]
Line_7 $$ classpath = registry.getModule("gradle-launcher").getImplementationClasspath()-->Line_10 $$ classpath = new DefaultClassPath()[ FD ]
Line_7 $$ classpath = registry.getModule("gradle-launcher").getImplementationClasspath()-->Line_12 $$ classpath = classpath.plus(module.getClasspath())[ FD ]
Line_6 $$ if (new DefaultGradleDistributionLocator().getGradleHome() != null) -->Line_7 $$ classpath = registry.getModule("gradle-launcher").getImplementationClasspath()[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_6 $$ if (new DefaultGradleDistributionLocator().getGradleHome() != null) [ CD ]
Line_3 $$ ModuleRegistry registry = new DefaultModuleRegistry()-->Line_14 $$ searchClassPath = registry.getAdditionalClassPath().getAsFiles()[ FD ]
Line_53 $$ DaemonStartupInfo daemonInfo = startProcess(daemonArgs, daemonDir.getVersionedDir(), stdInput)-->Line_54 $$ listener.daemonStarted(daemonInfo)[ FD ]
Line_34 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_46 $$ encoder.writeString(file.getAbsolutePath())[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_25 $$ daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()))[ CD ]
Line_20 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_31 $$ daemonArgs.add(GradleDaemon.class.getName())[ FD ]
Line_4 $$ ClassPath classpath-->Line_16 $$ if (classpath.isEmpty()) [ FD ]
Line_5 $$ List<File> searchClassPath-->Line_44 $$ encoder.writeSmallInt(searchClassPath.size())[ FD ]
Line_5 $$ List<File> searchClassPath-->Line_8 $$ searchClassPath = Collections.emptyList()[ FD ]
Line_5 $$ List<File> searchClassPath-->Line_14 $$ searchClassPath = registry.getAdditionalClassPath().getAsFiles()[ FD ]
Line_34 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_38 $$ encoder.writeSmallInt(daemonParameters.getIdleTimeout())[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_53 $$ DaemonStartupInfo daemonInfo = startProcess(daemonArgs, daemonDir.getVersionedDir(), stdInput)[ CD ]
Line_6 $$ if (new DefaultGradleDistributionLocator().getGradleHome() != null) -->Line_10 $$ classpath = new DefaultClassPath()[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_34 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_26 $$ if (Boolean.getBoolean("org.gradle.daemon.debug")) [ CD ]
Line_22 $$ List<String> daemonOpts = daemonParameters.getEffectiveJvmArgs()-->Line_40 $$ encoder.writeSmallInt(daemonOpts.size())[ FD ]
Line_11 $$ for (Module module : registry.getModule("gradle-launcher").getAllRequiredModules()) -->Line_12 $$ classpath = classpath.plus(module.getClasspath())[ FD ]
Line_34 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_44 $$ encoder.writeSmallInt(searchClassPath.size())[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_19 $$ versionValidator.validate(daemonParameters)[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_52 $$ ByteArrayInputStream stdInput = new ByteArrayInputStream(serializedConfig.toByteArray())[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_22 $$ List<String> daemonOpts = daemonParameters.getEffectiveJvmArgs()[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_55 $$ return daemonInfo[ CD ]
Line_34 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_42 $$ encoder.writeString(daemonOpt)[ FD ]
Line_6 $$ if (new DefaultGradleDistributionLocator().getGradleHome() != null) -->Line_14 $$ searchClassPath = registry.getAdditionalClassPath().getAsFiles()[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_33 $$ ByteArrayOutputStream serializedConfig = new ByteArrayOutputStream()[ CD ]
Line_20 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_24 $$ daemonArgs.add("-cp")[ FD ]
Line_6 $$ if (new DefaultGradleDistributionLocator().getGradleHome() != null) -->Line_8 $$ searchClassPath = Collections.emptyList()[ CD ]
Line_20 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_23 $$ daemonArgs.addAll(daemonOpts)[ FD ]
Line_20 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_27 $$ daemonArgs.add("-Xdebug")[ FD ]
Line_26 $$ if (Boolean.getBoolean("org.gradle.daemon.debug")) -->Line_28 $$ daemonArgs.add("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")[ CD ]
Line_20 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_28 $$ daemonArgs.add("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_21 $$ daemonArgs.add(daemonParameters.getEffectiveJvm().getJavaExecutable().getAbsolutePath())[ CD ]
Line_20 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_25 $$ daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()))[ FD ]
Line_8 $$ searchClassPath = Collections.emptyList()-->Line_44 $$ encoder.writeSmallInt(searchClassPath.size())[ FD ]
Line_45 $$ for (File file : searchClassPath) -->Line_46 $$ encoder.writeString(file.getAbsolutePath())[ FD ]
Line_4 $$ ClassPath classpath-->Line_7 $$ classpath = registry.getModule("gradle-launcher").getImplementationClasspath()[ FD ]
Line_3 $$ ModuleRegistry registry = new DefaultModuleRegistry()-->Line_11 $$ for (Module module : registry.getModule("gradle-launcher").getAllRequiredModules()) [ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_5 $$ List<File> searchClassPath[ CD ]
Line_22 $$ List<String> daemonOpts = daemonParameters.getEffectiveJvmArgs()-->Line_23 $$ daemonArgs.addAll(daemonOpts)[ FD ]
Line_14 $$ searchClassPath = registry.getAdditionalClassPath().getAsFiles()-->Line_44 $$ encoder.writeSmallInt(searchClassPath.size())[ FD ]
Line_7 $$ classpath = registry.getModule("gradle-launcher").getImplementationClasspath()-->Line_16 $$ if (classpath.isEmpty()) [ FD ]
Line_10 $$ classpath = new DefaultClassPath()-->Line_25 $$ daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()))[ FD ]
Line_33 $$ ByteArrayOutputStream serializedConfig = new ByteArrayOutputStream()-->Line_52 $$ ByteArrayInputStream stdInput = new ByteArrayInputStream(serializedConfig.toByteArray())[ FD ]
Line_34 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_36 $$ encoder.writeString(daemonParameters.getGradleUserHomeDir().getAbsolutePath())[ FD ]
Line_3 $$ ModuleRegistry registry = new DefaultModuleRegistry()-->Line_7 $$ classpath = registry.getModule("gradle-launcher").getImplementationClasspath()[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_32 $$ daemonArgs.add(GradleVersion.current().getVersion())[ CD ]
Line_8 $$ searchClassPath = Collections.emptyList()-->Line_14 $$ searchClassPath = registry.getAdditionalClassPath().getAsFiles()[ FD ]
Line_52 $$ ByteArrayInputStream stdInput = new ByteArrayInputStream(serializedConfig.toByteArray())-->Line_53 $$ DaemonStartupInfo daemonInfo = startProcess(daemonArgs, daemonDir.getVersionedDir(), stdInput)[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_20 $$ List<String> daemonArgs = new ArrayList<String>()[ CD ]
Line_20 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_21 $$ daemonArgs.add(daemonParameters.getEffectiveJvm().getJavaExecutable().getAbsolutePath())[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_31 $$ daemonArgs.add(GradleDaemon.class.getName())[ CD ]
Line_4 $$ ClassPath classpath-->Line_10 $$ classpath = new DefaultClassPath()[ FD ]
Line_12 $$ classpath = classpath.plus(module.getClasspath())-->Line_16 $$ if (classpath.isEmpty()) [ FD ]
Line_34 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_39 $$ encoder.writeString(daemonParameters.getUid())[ FD ]
Line_12 $$ classpath = classpath.plus(module.getClasspath())-->Line_25 $$ daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()))[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_3 $$ ModuleRegistry registry = new DefaultModuleRegistry()[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_23 $$ daemonArgs.addAll(daemonOpts)[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_16 $$ if (classpath.isEmpty()) [ CD ]
Line_34 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_37 $$ encoder.writeString(daemonDir.getBaseDir().getAbsolutePath())[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_54 $$ listener.daemonStarted(daemonInfo)[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_24 $$ daemonArgs.add("-cp")[ CD ]
Line_10 $$ classpath = new DefaultClassPath()-->Line_12 $$ classpath = classpath.plus(module.getClasspath())[ FD ]
Line_26 $$ if (Boolean.getBoolean("org.gradle.daemon.debug")) -->Line_27 $$ daemonArgs.add("-Xdebug")[ CD ]
Line_34 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_48 $$ encoder.flush()[ FD ]
Line_7 $$ classpath = registry.getModule("gradle-launcher").getImplementationClasspath()-->Line_25 $$ daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()))[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_30 $$ LOGGER.debug("Using daemon args: [ CD ]
