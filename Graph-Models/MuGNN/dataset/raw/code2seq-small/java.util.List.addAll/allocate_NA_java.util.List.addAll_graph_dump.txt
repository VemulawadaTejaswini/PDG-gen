Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)-->Line_46 $$ clusterAvailableResources = allocateResponse.getAvailableResources()[ FD ]
Line_6 $$ List<ContainerId> releaseList = null-->Line_22 $$ allocateRequest = AllocateRequest.newInstance(lastResponseId, progressIndicator, askList, releaseList, blacklistRequest)[ FD ]
Line_2 $$ public AllocateResponse allocate(float progressIndicator) throws YarnException, IOException -->Line_5 $$ List<ResourceRequest> askList = null[ CD ]
Line_32 $$ for (Map<String, TreeMap<Resource, ResourceRequestInfo>> rr : remoteRequestsTable.values()) -->Line_33 $$ for (Map<Resource, ResourceRequestInfo> capabalities : rr.values()) [ FD ]
Line_4 $$ AllocateResponse allocateResponse = null-->Line_53 $$ if (!pendingRelease.isEmpty() && !allocateResponse.getCompletedContainersStatuses().isEmpty()) [ FD ]
Line_27 $$ if (isResyncCommand(allocateResponse)) -->Line_41 $$ return allocate(progressIndicator)[ CD ]
Line_12 $$ askList = new ArrayList<ResourceRequest>(ask.size())-->Line_14 $$ askList.add(ResourceRequest.newInstance(r.getPriority(), r.getResourceName(), r.getCapability(), r.getNumContainers(), r.getRelaxLocality()))[ FD ]
Line_4 $$ AllocateResponse allocateResponse = null-->Line_47 $$ if (!allocateResponse.getNMTokens().isEmpty()) [ FD ]
Line_61 $$ for (ResourceRequest oldAsk : askList) -->Line_62 $$ if (!ask.contains(oldAsk)) [ FD ]
Line_4 $$ AllocateResponse allocateResponse = null-->Line_44 $$ clusterNodeCount = allocateResponse.getNumClusterNodes()[ FD ]
Line_2 $$ public AllocateResponse allocate(float progressIndicator) throws YarnException, IOException -->Line_3 $$ Preconditions.checkArgument(progressIndicator >= 0, "Progress indicator should not be negative")[ CD ]
Line_4 $$ AllocateResponse allocateResponse = null-->Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)[ FD ]
Line_21 $$ ResourceBlacklistRequest blacklistRequest = (blacklistToAdd != null) || (blacklistToRemove != null) ? ResourceBlacklistRequest.newInstance(blacklistToAdd, blacklistToRemove) : null-->Line_22 $$ allocateRequest = AllocateRequest.newInstance(lastResponseId, progressIndicator, askList, releaseList, blacklistRequest)[ FD ]
Line_27 $$ if (isResyncCommand(allocateResponse)) -->Line_28 $$ LOG.warn("ApplicationMaster is out of sync with ResourceManager," + " hence resyncing.")[ CD ]
Line_27 $$ if (isResyncCommand(allocateResponse)) -->Line_40 $$ registerApplicationMaster()[ CD ]
Line_4 $$ AllocateResponse allocateResponse = null-->Line_48 $$ populateNMTokens(allocateResponse.getNMTokens())[ FD ]
Line_2 $$ public AllocateResponse allocate(float progressIndicator) throws YarnException, IOException -->Line_71 $$ return allocateResponse[ CD ]
Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)-->Line_51 $$ updateAMRMToken(allocateResponse.getAMRMToken())[ FD ]
Line_53 $$ if (!pendingRelease.isEmpty() && !allocateResponse.getCompletedContainersStatuses().isEmpty()) -->Line_54 $$ removePendingReleaseRequests(allocateResponse.getCompletedContainersStatuses())[ CD ]
Line_2 $$ public AllocateResponse allocate(float progressIndicator) throws YarnException, IOException -->Line_9 $$ List<String> blacklistToRemove = new ArrayList<String>()[ CD ]
Line_2 $$ public AllocateResponse allocate(float progressIndicator) throws YarnException, IOException -->Line_8 $$ List<String> blacklistToAdd = new ArrayList<String>()[ CD ]
Line_2 $$ public AllocateResponse allocate(float progressIndicator) throws YarnException, IOException -->Line_22 $$ allocateRequest = AllocateRequest.newInstance(lastResponseId, progressIndicator, askList, releaseList, blacklistRequest)[ FD ]
Line_7 $$ AllocateRequest allocateRequest = null-->Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)[ FD ]
Line_5 $$ List<ResourceRequest> askList = null-->Line_14 $$ askList.add(ResourceRequest.newInstance(r.getPriority(), r.getResourceName(), r.getCapability(), r.getNumContainers(), r.getRelaxLocality()))[ FD ]
Line_8 $$ List<String> blacklistToAdd = new ArrayList<String>()-->Line_19 $$ blacklistToAdd.addAll(blacklistAdditions)[ FD ]
Line_4 $$ AllocateResponse allocateResponse = null-->Line_27 $$ if (isResyncCommand(allocateResponse)) [ FD ]
Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)-->Line_27 $$ if (isResyncCommand(allocateResponse)) [ FD ]
Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)-->Line_44 $$ clusterNodeCount = allocateResponse.getNumClusterNodes()[ FD ]
Line_33 $$ for (Map<Resource, ResourceRequestInfo> capabalities : rr.values()) -->Line_34 $$ for (ResourceRequestInfo request : capabalities.values()) [ FD ]
Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)-->Line_54 $$ removePendingReleaseRequests(allocateResponse.getCompletedContainersStatuses())[ FD ]
Line_62 $$ if (!ask.contains(oldAsk)) -->Line_63 $$ ask.add(oldAsk)[ CD ]
Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)-->Line_58 $$ if (allocateResponse == null) [ FD ]
Line_50 $$ if (allocateResponse.getAMRMToken() != null) -->Line_51 $$ updateAMRMToken(allocateResponse.getAMRMToken())[ CD ]
Line_4 $$ AllocateResponse allocateResponse = null-->Line_51 $$ updateAMRMToken(allocateResponse.getAMRMToken())[ FD ]
Line_2 $$ public AllocateResponse allocate(float progressIndicator) throws YarnException, IOException -->Line_41 $$ return allocate(progressIndicator)[ FD ]
Line_2 $$ public AllocateResponse allocate(float progressIndicator) throws YarnException, IOException -->Line_6 $$ List<ContainerId> releaseList = null[ CD ]
Line_5 $$ List<ResourceRequest> askList = null-->Line_22 $$ allocateRequest = AllocateRequest.newInstance(lastResponseId, progressIndicator, askList, releaseList, blacklistRequest)[ FD ]
Line_2 $$ public AllocateResponse allocate(float progressIndicator) throws YarnException, IOException -->Line_7 $$ AllocateRequest allocateRequest = null[ CD ]
Line_5 $$ List<ResourceRequest> askList = null-->Line_12 $$ askList = new ArrayList<ResourceRequest>(ask.size())[ FD ]
Line_8 $$ List<String> blacklistToAdd = new ArrayList<String>()-->Line_21 $$ ResourceBlacklistRequest blacklistRequest = (blacklistToAdd != null) || (blacklistToRemove != null) ? ResourceBlacklistRequest.newInstance(blacklistToAdd, blacklistToRemove) : null[ FD ]
Line_4 $$ AllocateResponse allocateResponse = null-->Line_54 $$ removePendingReleaseRequests(allocateResponse.getCompletedContainersStatuses())[ FD ]
Line_2 $$ public AllocateResponse allocate(float progressIndicator) throws YarnException, IOException -->Line_4 $$ AllocateResponse allocateResponse = null[ CD ]
Line_9 $$ List<String> blacklistToRemove = new ArrayList<String>()-->Line_21 $$ ResourceBlacklistRequest blacklistRequest = (blacklistToAdd != null) || (blacklistToRemove != null) ? ResourceBlacklistRequest.newInstance(blacklistToAdd, blacklistToRemove) : null[ FD ]
Line_13 $$ for (ResourceRequest r : ask) -->Line_14 $$ askList.add(ResourceRequest.newInstance(r.getPriority(), r.getResourceName(), r.getCapability(), r.getNumContainers(), r.getRelaxLocality()))[ FD ]
Line_4 $$ AllocateResponse allocateResponse = null-->Line_45 $$ lastResponseId = allocateResponse.getResponseId()[ FD ]
Line_6 $$ List<ContainerId> releaseList = null-->Line_16 $$ releaseList = new ArrayList<ContainerId>(release)[ FD ]
Line_6 $$ List<ContainerId> releaseList = null-->Line_60 $$ release.addAll(releaseList)[ FD ]
Line_12 $$ askList = new ArrayList<ResourceRequest>(ask.size())-->Line_22 $$ allocateRequest = AllocateRequest.newInstance(lastResponseId, progressIndicator, askList, releaseList, blacklistRequest)[ FD ]
Line_9 $$ List<String> blacklistToRemove = new ArrayList<String>()-->Line_20 $$ blacklistToRemove.addAll(blacklistRemovals)[ FD ]
Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)-->Line_45 $$ lastResponseId = allocateResponse.getResponseId()[ FD ]
Line_9 $$ List<String> blacklistToRemove = new ArrayList<String>()-->Line_67 $$ blacklistRemovals.addAll(blacklistToRemove)[ FD ]
Line_47 $$ if (!allocateResponse.getNMTokens().isEmpty()) -->Line_48 $$ populateNMTokens(allocateResponse.getNMTokens())[ CD ]
Line_4 $$ AllocateResponse allocateResponse = null-->Line_50 $$ if (allocateResponse.getAMRMToken() != null) [ FD ]
Line_4 $$ AllocateResponse allocateResponse = null-->Line_58 $$ if (allocateResponse == null) [ FD ]
Line_16 $$ releaseList = new ArrayList<ContainerId>(release)-->Line_60 $$ release.addAll(releaseList)[ FD ]
Line_22 $$ allocateRequest = AllocateRequest.newInstance(lastResponseId, progressIndicator, askList, releaseList, blacklistRequest)-->Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)[ FD ]
Line_61 $$ for (ResourceRequest oldAsk : askList) -->Line_63 $$ ask.add(oldAsk)[ FD ]
Line_16 $$ releaseList = new ArrayList<ContainerId>(release)-->Line_22 $$ allocateRequest = AllocateRequest.newInstance(lastResponseId, progressIndicator, askList, releaseList, blacklistRequest)[ FD ]
Line_8 $$ List<String> blacklistToAdd = new ArrayList<String>()-->Line_66 $$ blacklistAdditions.addAll(blacklistToAdd)[ FD ]
Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)-->Line_47 $$ if (!allocateResponse.getNMTokens().isEmpty()) [ FD ]
Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)-->Line_53 $$ if (!pendingRelease.isEmpty() && !allocateResponse.getCompletedContainersStatuses().isEmpty()) [ FD ]
Line_4 $$ AllocateResponse allocateResponse = null-->Line_46 $$ clusterAvailableResources = allocateResponse.getAvailableResources()[ FD ]
Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)-->Line_50 $$ if (allocateResponse.getAMRMToken() != null) [ FD ]
Line_26 $$ allocateResponse = rmClient.allocate(allocateRequest)-->Line_48 $$ populateNMTokens(allocateResponse.getNMTokens())[ FD ]
Line_7 $$ AllocateRequest allocateRequest = null-->Line_22 $$ allocateRequest = AllocateRequest.newInstance(lastResponseId, progressIndicator, askList, releaseList, blacklistRequest)[ FD ]
