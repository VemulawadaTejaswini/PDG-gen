Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_3 $$ if (repo == null) [ CD ]
Line_36 $$ if (myTargetRevision != null) -->Line_38 $$ options.add(myTargetRevision.getChangeset())[ CD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_7 $$ executor.setSilent(true)[ CD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_8 $$ List<String> options = new LinkedList<String>()[ CD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_42 $$ if (paths != null) [ CD ]
Line_6 $$ HgCommandExecutor executor = new HgCommandExecutor(myProject)-->Line_7 $$ executor.setSilent(true)[ FD ]
Line_33 $$ if (myBaseRevision != null && (!myBaseRevision.getRevision().isEmpty() || !myBaseRevision.getChangeset().isEmpty())) -->Line_34 $$ options.add("--rev")[ CD ]
Line_45 $$ List<String> args = new ArrayList<String>()-->Line_48 $$ HgCommandResult result = executor.executeInCurrentThread(repo, "status", args)[ FD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_37 $$ options.add("--rev")[ FD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_10 $$ options.add("--added")[ FD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_15 $$ if (myIncludeRemoved) [ CD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_16 $$ options.add("--removed")[ FD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_42 $$ if (paths != null) [ FD ]
Line_45 $$ List<String> args = new ArrayList<String>()-->Line_47 $$ args.addAll(chunk)[ FD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_12 $$ if (myIncludeModified) [ CD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_27 $$ if (myIncludeCopySource) [ CD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_24 $$ if (myIncludeIgnored) [ CD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_3 $$ if (repo == null) [ FD ]
Line_45 $$ List<String> args = new ArrayList<String>()-->Line_46 $$ args.addAll(options)[ FD ]
Line_27 $$ if (myIncludeCopySource) -->Line_28 $$ options.add("--copies")[ CD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_6 $$ HgCommandExecutor executor = new HgCommandExecutor(myProject)[ CD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_52 $$ HgCommandResult result = executor.executeInCurrentThread(repo, "status", options)[ FD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_30 $$ if (myCleanStatus) [ CD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_53 $$ changes.addAll(parseChangesFromResult(repo, result, options))[ FD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_41 $$ final Set<HgChange> changes = new HashSet<HgChange>()[ CD ]
Line_12 $$ if (myIncludeModified) -->Line_13 $$ options.add("--modified")[ CD ]
Line_18 $$ if (myIncludeDeleted) -->Line_19 $$ options.add("--deleted")[ CD ]
Line_15 $$ if (myIncludeRemoved) -->Line_16 $$ options.add("--removed")[ CD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_38 $$ options.add(myTargetRevision.getChangeset())[ FD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_52 $$ HgCommandResult result = executor.executeInCurrentThread(repo, "status", options)[ FD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_19 $$ options.add("--deleted")[ FD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_43 $$ final List<List<String>> chunked = VcsFileUtil.chunkPaths(repo, paths)[ FD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_28 $$ options.add("--copies")[ FD ]
Line_30 $$ if (myCleanStatus) -->Line_31 $$ options.add("--clean")[ CD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_9 $$ if (myIncludeAdded) [ CD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_34 $$ options.add("--rev")[ FD ]
Line_6 $$ HgCommandExecutor executor = new HgCommandExecutor(myProject)-->Line_48 $$ HgCommandResult result = executor.executeInCurrentThread(repo, "status", args)[ FD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_31 $$ options.add("--clean")[ FD ]
Line_41 $$ final Set<HgChange> changes = new HashSet<HgChange>()-->Line_49 $$ changes.addAll(parseChangesFromResult(repo, result, args))[ FD ]
Line_48 $$ HgCommandResult result = executor.executeInCurrentThread(repo, "status", args)-->Line_49 $$ changes.addAll(parseChangesFromResult(repo, result, args))[ FD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_55 $$ return changes[ CD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_35 $$ options.add(StringUtil.isEmptyOrSpaces(myBaseRevision.getChangeset()) ? myBaseRevision.getRevision() : myBaseRevision.getChangeset())[ FD ]
Line_3 $$ if (repo == null) -->Line_4 $$ return Collections.emptySet()[ CD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_22 $$ options.add("--unknown")[ FD ]
Line_44 $$ for (List<String> chunk : chunked) -->Line_47 $$ args.addAll(chunk)[ FD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_48 $$ HgCommandResult result = executor.executeInCurrentThread(repo, "status", args)[ FD ]
Line_42 $$ if (paths != null) -->Line_53 $$ changes.addAll(parseChangesFromResult(repo, result, options))[ CD ]
Line_42 $$ if (paths != null) -->Line_43 $$ final List<List<String>> chunked = VcsFileUtil.chunkPaths(repo, paths)[ CD ]
Line_41 $$ final Set<HgChange> changes = new HashSet<HgChange>()-->Line_53 $$ changes.addAll(parseChangesFromResult(repo, result, options))[ FD ]
Line_24 $$ if (myIncludeIgnored) -->Line_25 $$ options.add("--ignored")[ CD ]
Line_48 $$ HgCommandResult result = executor.executeInCurrentThread(repo, "status", args)-->Line_53 $$ changes.addAll(parseChangesFromResult(repo, result, options))[ FD ]
Line_9 $$ if (myIncludeAdded) -->Line_10 $$ options.add("--added")[ CD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_18 $$ if (myIncludeDeleted) [ CD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_13 $$ options.add("--modified")[ FD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_25 $$ options.add("--ignored")[ FD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_21 $$ if (myIncludeUnknown) [ CD ]
Line_36 $$ if (myTargetRevision != null) -->Line_37 $$ options.add("--rev")[ CD ]
Line_8 $$ List<String> options = new LinkedList<String>()-->Line_46 $$ args.addAll(options)[ FD ]
Line_33 $$ if (myBaseRevision != null && (!myBaseRevision.getRevision().isEmpty() || !myBaseRevision.getChangeset().isEmpty())) -->Line_36 $$ if (myTargetRevision != null) [ CD ]
Line_45 $$ List<String> args = new ArrayList<String>()-->Line_49 $$ changes.addAll(parseChangesFromResult(repo, result, args))[ FD ]
Line_33 $$ if (myBaseRevision != null && (!myBaseRevision.getRevision().isEmpty() || !myBaseRevision.getChangeset().isEmpty())) -->Line_35 $$ options.add(StringUtil.isEmptyOrSpaces(myBaseRevision.getChangeset()) ? myBaseRevision.getRevision() : myBaseRevision.getChangeset())[ CD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_49 $$ changes.addAll(parseChangesFromResult(repo, result, args))[ FD ]
Line_42 $$ if (paths != null) -->Line_52 $$ HgCommandResult result = executor.executeInCurrentThread(repo, "status", options)[ CD ]
Line_6 $$ HgCommandExecutor executor = new HgCommandExecutor(myProject)-->Line_52 $$ HgCommandResult result = executor.executeInCurrentThread(repo, "status", options)[ FD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_53 $$ changes.addAll(parseChangesFromResult(repo, result, options))[ FD ]
Line_2 $$ public Set<HgChange> execute(VirtualFile repo, @Nullable Collection<FilePath> paths) -->Line_33 $$ if (myBaseRevision != null && (!myBaseRevision.getRevision().isEmpty() || !myBaseRevision.getChangeset().isEmpty())) [ CD ]
Line_21 $$ if (myIncludeUnknown) -->Line_22 $$ options.add("--unknown")[ CD ]
