Line_10 $$ key = parser.getString()-->Line_18 $$ if (key == null) [ FD ]
Line_17 $$ final String value = parser.getString()-->Line_49 $$ if (value != null) [ FD ]
Line_5 $$ String key = null-->Line_18 $$ if (key == null) [ FD ]
Line_3 $$ final JsonParser parser = Json.createParser(new StringReader(json))-->Line_60 $$ while (parser.hasNext()) [ FD ]
Line_3 $$ final JsonParser parser = Json.createParser(new StringReader(json))-->Line_17 $$ final String value = parser.getString()[ FD ]
Line_3 $$ final JsonParser parser = Json.createParser(new StringReader(json))-->Line_61 $$ final Event e = parser.next()[ FD ]
Line_17 $$ final String value = parser.getString()-->Line_36 $$ builder.setExitStatus(value)[ FD ]
Line_2 $$ public static JobExecution unmarshall(final String json) -->Line_83 $$ return builder.build()[ CD ]
Line_4 $$ final JobExecutionBuilder builder = JobExecutionBuilder.create()-->Line_28 $$ builder.setName(value)[ FD ]
Line_64 $$ k = parser.getString()-->Line_71 $$ if (k != null) [ FD ]
Line_4 $$ final JobExecutionBuilder builder = JobExecutionBuilder.create()-->Line_72 $$ builder.addParameter(k, parser.getString())[ FD ]
Line_64 $$ k = parser.getString()-->Line_72 $$ builder.addParameter(k, parser.getString())[ FD ]
Line_4 $$ final JobExecutionBuilder builder = JobExecutionBuilder.create()-->Line_50 $$ builder.setLastUpdatedTime(Long.parseLong(value))[ FD ]
Line_5 $$ String key = null-->Line_10 $$ key = parser.getString()[ FD ]
Line_49 $$ if (value != null) -->Line_50 $$ builder.setLastUpdatedTime(Long.parseLong(value))[ CD ]
Line_3 $$ final JsonParser parser = Json.createParser(new StringReader(json))-->Line_10 $$ key = parser.getString()[ FD ]
Line_3 $$ final JsonParser parser = Json.createParser(new StringReader(json))-->Line_6 $$ while (parser.hasNext()) [ FD ]
Line_17 $$ final String value = parser.getString()-->Line_24 $$ builder.setId(Long.parseLong(value))[ FD ]
Line_17 $$ final String value = parser.getString()-->Line_39 $$ if (value != null) [ FD ]
Line_44 $$ if (value != null) -->Line_45 $$ builder.setEndTime(Long.parseLong(value))[ CD ]
Line_17 $$ final String value = parser.getString()-->Line_54 $$ if (value != null) [ FD ]
Line_54 $$ if (value != null) -->Line_55 $$ builder.setStartTime(Long.parseLong(value))[ CD ]
Line_59 $$ String k = null-->Line_64 $$ k = parser.getString()[ FD ]
Line_17 $$ final String value = parser.getString()-->Line_28 $$ builder.setName(value)[ FD ]
Line_3 $$ final JsonParser parser = Json.createParser(new StringReader(json))-->Line_64 $$ k = parser.getString()[ FD ]
Line_71 $$ if (k != null) -->Line_72 $$ builder.addParameter(k, parser.getString())[ CD ]
Line_4 $$ final JobExecutionBuilder builder = JobExecutionBuilder.create()-->Line_55 $$ builder.setStartTime(Long.parseLong(value))[ FD ]
Line_2 $$ public static JobExecution unmarshall(final String json) -->Line_3 $$ final JsonParser parser = Json.createParser(new StringReader(json))[ CD ]
Line_2 $$ public static JobExecution unmarshall(final String json) -->Line_19 $$ throw new IllegalStateException(String.format("No key for value '%s'. Parsing position: %s%n\t%s", value, parser.getLocation(), json))[ FD ]
Line_3 $$ final JsonParser parser = Json.createParser(new StringReader(json))-->Line_19 $$ throw new IllegalStateException(String.format("No key for value '%s'. Parsing position: %s%n\t%s", value, parser.getLocation(), json))[ FD ]
Line_31 $$ if (value != null) -->Line_32 $$ builder.setStatus(BatchStatus.valueOf(value))[ CD ]
Line_4 $$ final JobExecutionBuilder builder = JobExecutionBuilder.create()-->Line_40 $$ builder.setCreateTime(Long.parseLong(value))[ FD ]
Line_17 $$ final String value = parser.getString()-->Line_40 $$ builder.setCreateTime(Long.parseLong(value))[ FD ]
Line_3 $$ final JsonParser parser = Json.createParser(new StringReader(json))-->Line_82 $$ parser.close()[ FD ]
Line_3 $$ final JsonParser parser = Json.createParser(new StringReader(json))-->Line_72 $$ builder.addParameter(k, parser.getString())[ FD ]
Line_2 $$ public static JobExecution unmarshall(final String json) -->Line_4 $$ final JobExecutionBuilder builder = JobExecutionBuilder.create()[ CD ]
Line_23 $$ if (value != null) -->Line_24 $$ builder.setId(Long.parseLong(value))[ CD ]
Line_4 $$ final JobExecutionBuilder builder = JobExecutionBuilder.create()-->Line_24 $$ builder.setId(Long.parseLong(value))[ FD ]
Line_4 $$ final JobExecutionBuilder builder = JobExecutionBuilder.create()-->Line_36 $$ builder.setExitStatus(value)[ FD ]
Line_4 $$ final JobExecutionBuilder builder = JobExecutionBuilder.create()-->Line_83 $$ return builder.build()[ FD ]
Line_17 $$ final String value = parser.getString()-->Line_23 $$ if (value != null) [ FD ]
Line_59 $$ String k = null-->Line_72 $$ builder.addParameter(k, parser.getString())[ FD ]
Line_17 $$ final String value = parser.getString()-->Line_44 $$ if (value != null) [ FD ]
Line_2 $$ public static JobExecution unmarshall(final String json) -->Line_6 $$ while (parser.hasNext()) [ CD ]
Line_2 $$ public static JobExecution unmarshall(final String json) -->Line_82 $$ parser.close()[ CD ]
Line_39 $$ if (value != null) -->Line_40 $$ builder.setCreateTime(Long.parseLong(value))[ CD ]
Line_17 $$ final String value = parser.getString()-->Line_45 $$ builder.setEndTime(Long.parseLong(value))[ FD ]
Line_17 $$ final String value = parser.getString()-->Line_50 $$ builder.setLastUpdatedTime(Long.parseLong(value))[ FD ]
Line_17 $$ final String value = parser.getString()-->Line_19 $$ throw new IllegalStateException(String.format("No key for value '%s'. Parsing position: %s%n\t%s", value, parser.getLocation(), json))[ FD ]
Line_17 $$ final String value = parser.getString()-->Line_31 $$ if (value != null) [ FD ]
Line_6 $$ while (parser.hasNext()) -->Line_7 $$ final Event event = parser.next()[ CD ]
Line_60 $$ while (parser.hasNext()) -->Line_61 $$ final Event e = parser.next()[ CD ]
Line_4 $$ final JobExecutionBuilder builder = JobExecutionBuilder.create()-->Line_45 $$ builder.setEndTime(Long.parseLong(value))[ FD ]
Line_59 $$ String k = null-->Line_71 $$ if (k != null) [ FD ]
Line_2 $$ public static JobExecution unmarshall(final String json) -->Line_5 $$ String key = null[ CD ]
Line_3 $$ final JsonParser parser = Json.createParser(new StringReader(json))-->Line_7 $$ final Event event = parser.next()[ FD ]
Line_17 $$ final String value = parser.getString()-->Line_55 $$ builder.setStartTime(Long.parseLong(value))[ FD ]
Line_4 $$ final JobExecutionBuilder builder = JobExecutionBuilder.create()-->Line_32 $$ builder.setStatus(BatchStatus.valueOf(value))[ FD ]
Line_17 $$ final String value = parser.getString()-->Line_32 $$ builder.setStatus(BatchStatus.valueOf(value))[ FD ]
