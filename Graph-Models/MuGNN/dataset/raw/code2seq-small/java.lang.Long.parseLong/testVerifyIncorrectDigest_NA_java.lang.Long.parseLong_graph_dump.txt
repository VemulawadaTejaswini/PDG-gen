Line_5 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CORRUPT_CF)-->Line_6 $$ fillCF(cfs, 2)[ FD ]
Line_2 $$ public void testVerifyIncorrectDigest() throws IOException, WriteTimeoutException -->Line_8 $$ SSTableReader sstable = cfs.getLiveSSTables().iterator().next()[ CD ]
Line_2 $$ public void testVerifyIncorrectDigest() throws IOException, WriteTimeoutException -->Line_9 $$ RandomAccessFile file = new RandomAccessFile(sstable.descriptor.filenameFor(sstable.descriptor.digestComponent), "rw")[ CD ]
Line_2 $$ public void testVerifyIncorrectDigest() throws IOException, WriteTimeoutException -->Line_12 $$ writeChecksum(++correctChecksum, sstable.descriptor.filenameFor(sstable.descriptor.digestComponent))[ CD ]
Line_2 $$ public void testVerifyIncorrectDigest() throws IOException, WriteTimeoutException -->Line_3 $$ CompactionManager.instance.disableAutoCompaction()[ CD ]
Line_2 $$ public void testVerifyIncorrectDigest() throws IOException, WriteTimeoutException -->Line_6 $$ fillCF(cfs, 2)[ CD ]
Line_5 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CORRUPT_CF)-->Line_7 $$ Util.getAll(Util.cmd(cfs).build())[ FD ]
Line_2 $$ public void testVerifyIncorrectDigest() throws IOException, WriteTimeoutException -->Line_11 $$ file.close()[ CD ]
Line_13 $$ try (Verifier verifier = new Verifier(cfs, sstable, false)) -->Line_14 $$ verifier.verify(false)[ FD ]
Line_2 $$ public void testVerifyIncorrectDigest() throws IOException, WriteTimeoutException -->Line_10 $$ Long correctChecksum = Long.parseLong(file.readLine())[ CD ]
Line_9 $$ RandomAccessFile file = new RandomAccessFile(sstable.descriptor.filenameFor(sstable.descriptor.digestComponent), "rw")-->Line_10 $$ Long correctChecksum = Long.parseLong(file.readLine())[ FD ]
Line_10 $$ Long correctChecksum = Long.parseLong(file.readLine())-->Line_12 $$ writeChecksum(++correctChecksum, sstable.descriptor.filenameFor(sstable.descriptor.digestComponent))[ FD ]
Line_2 $$ public void testVerifyIncorrectDigest() throws IOException, WriteTimeoutException -->Line_5 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CORRUPT_CF)[ CD ]
Line_4 $$ Keyspace keyspace = Keyspace.open(KEYSPACE)-->Line_5 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CORRUPT_CF)[ FD ]
Line_2 $$ public void testVerifyIncorrectDigest() throws IOException, WriteTimeoutException -->Line_7 $$ Util.getAll(Util.cmd(cfs).build())[ CD ]
Line_9 $$ RandomAccessFile file = new RandomAccessFile(sstable.descriptor.filenameFor(sstable.descriptor.digestComponent), "rw")-->Line_11 $$ file.close()[ FD ]
Line_5 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CORRUPT_CF)-->Line_8 $$ SSTableReader sstable = cfs.getLiveSSTables().iterator().next()[ FD ]
Line_2 $$ public void testVerifyIncorrectDigest() throws IOException, WriteTimeoutException -->Line_4 $$ Keyspace keyspace = Keyspace.open(KEYSPACE)[ CD ]
