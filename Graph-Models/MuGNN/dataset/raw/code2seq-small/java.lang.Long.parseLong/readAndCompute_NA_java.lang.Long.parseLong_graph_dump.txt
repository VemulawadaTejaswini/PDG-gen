Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(statsFile.readLine())-->Line_8 $$ returned[i] = Long.parseLong(tokenizer.nextToken())[ FD ]
Line_2 $$ private long[] readAndCompute() throws IOException -->Line_3 $$ statsFile.seek(0)[ CD ]
Line_2 $$ private long[] readAndCompute() throws IOException -->Line_8 $$ for (int i = 0; i < returned.length; i++) returned[i] = Long.parseLong(tokenizer.nextToken())[ CD ]
Line_2 $$ private long[] readAndCompute() throws IOException -->Line_9 $$ return returned[ CD ]
Line_2 $$ private long[] readAndCompute() throws IOException -->Line_5 $$ String name = tokenizer.nextToken()[ CD ]
Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(statsFile.readLine())-->Line_5 $$ String name = tokenizer.nextToken()[ FD ]
Line_2 $$ private long[] readAndCompute() throws IOException -->Line_7 $$ long[] returned = new long[tokenizer.countTokens()][ CD ]
Line_2 $$ private long[] readAndCompute() throws IOException -->Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(statsFile.readLine())[ CD ]
Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(statsFile.readLine())-->Line_7 $$ long[] returned = new long[tokenizer.countTokens()][ FD ]
Line_5 $$ String name = tokenizer.nextToken()-->Line_6 $$ assert name.equalsIgnoreCase("cpu")[ FD ]
