Line_2 $$ protected InputStream openInputStream() throws IOException -->Line_4 $$ final URLOpener opener = resolved ? resolvedURL : originalURL[ CD ]
Line_9 $$ if (isChunkedTransferEncoding(headers)) -->Line_18 $$ in = new BoundedInputStream(in, streamlength)[ CD ]
Line_12 $$ final String cl = connection.getHeaderField(HttpHeaders.CONTENT_LENGTH)-->Line_16 $$ final long streamlength = Long.parseLong(cl)[ FD ]
Line_2 $$ protected InputStream openInputStream() throws IOException -->Line_20 $$ return in[ CD ]
Line_12 $$ final String cl = connection.getHeaderField(HttpHeaders.CONTENT_LENGTH)-->Line_13 $$ if (cl == null) [ FD ]
Line_5 $$ final HttpURLConnection connection = opener.connect(startPos, resolved)-->Line_8 $$ final Map<String, List<String>> headers = connection.getHeaderFields()[ FD ]
Line_2 $$ protected InputStream openInputStream() throws IOException -->Line_8 $$ final Map<String, List<String>> headers = connection.getHeaderFields()[ CD ]
Line_2 $$ protected InputStream openInputStream() throws IOException -->Line_7 $$ InputStream in = connection.getInputStream()[ CD ]
Line_2 $$ protected InputStream openInputStream() throws IOException -->Line_6 $$ resolvedURL.setURL(getResolvedUrl(connection))[ CD ]
Line_5 $$ final HttpURLConnection connection = opener.connect(startPos, resolved)-->Line_12 $$ final String cl = connection.getHeaderField(HttpHeaders.CONTENT_LENGTH)[ FD ]
Line_5 $$ final HttpURLConnection connection = opener.connect(startPos, resolved)-->Line_7 $$ InputStream in = connection.getInputStream()[ FD ]
Line_2 $$ protected InputStream openInputStream() throws IOException -->Line_5 $$ final HttpURLConnection connection = opener.connect(startPos, resolved)[ CD ]
Line_4 $$ final URLOpener opener = resolved ? resolvedURL : originalURL-->Line_5 $$ final HttpURLConnection connection = opener.connect(startPos, resolved)[ FD ]
Line_9 $$ if (isChunkedTransferEncoding(headers)) -->Line_13 $$ if (cl == null) [ CD ]
Line_9 $$ if (isChunkedTransferEncoding(headers)) -->Line_16 $$ final long streamlength = Long.parseLong(cl)[ CD ]
Line_2 $$ protected InputStream openInputStream() throws IOException -->Line_3 $$ final boolean resolved = resolvedURL.getURL() != null[ CD ]
Line_7 $$ InputStream in = connection.getInputStream()-->Line_18 $$ in = new BoundedInputStream(in, streamlength)[ FD ]
Line_9 $$ if (isChunkedTransferEncoding(headers)) -->Line_12 $$ final String cl = connection.getHeaderField(HttpHeaders.CONTENT_LENGTH)[ CD ]
Line_3 $$ final boolean resolved = resolvedURL.getURL() != null-->Line_5 $$ final HttpURLConnection connection = opener.connect(startPos, resolved)[ FD ]
Line_5 $$ final HttpURLConnection connection = opener.connect(startPos, resolved)-->Line_6 $$ resolvedURL.setURL(getResolvedUrl(connection))[ FD ]
Line_2 $$ protected InputStream openInputStream() throws IOException -->Line_9 $$ if (isChunkedTransferEncoding(headers)) [ CD ]
Line_8 $$ final Map<String, List<String>> headers = connection.getHeaderFields()-->Line_9 $$ if (isChunkedTransferEncoding(headers)) [ FD ]
