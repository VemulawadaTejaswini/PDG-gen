Line_29 $$ double mean = (((double) length) / ((double) count))-->Line_30 $$ mean = Math.pow(mean, 2.0)[ FD ]
Line_19 $$ String countLit = st.nextToken()-->Line_20 $$ count = Long.parseLong(countLit)[ FD ]
Line_2 $$ private double readAndCalcStdDev(Path path, Configuration conf) throws IOException -->Line_3 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_16 $$ StringTokenizer st = new StringTokenizer(line)-->Line_19 $$ String countLit = st.nextToken()[ FD ]
Line_2 $$ private double readAndCalcStdDev(Path path, Configuration conf) throws IOException -->Line_39 $$ return stddev[ CD ]
Line_8 $$ BufferedReader br = null-->Line_36 $$ br.close()[ FD ]
Line_16 $$ StringTokenizer st = new StringTokenizer(line)-->Line_22 $$ String lengthLit = st.nextToken()[ FD ]
Line_4 $$ Path file = new Path(path, "part-r-00000")-->Line_10 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))[ FD ]
Line_25 $$ String squareLit = st.nextToken()-->Line_26 $$ square = Long.parseLong(squareLit)[ FD ]
Line_15 $$ while ((line = br.readLine()) != null) -->Line_17 $$ String type = st.nextToken()[ CD ]
Line_14 $$ String line-->Line_15 $$ while ((line = br.readLine()) != null) [ FD ]
Line_15 $$ while ((line = br.readLine()) != null) -->Line_16 $$ StringTokenizer st = new StringTokenizer(line)[ CD ]
Line_17 $$ String type = st.nextToken()-->Line_18 $$ if (type.equals(COUNT.toString())) [ FD ]
Line_13 $$ long square = 0-->Line_26 $$ square = Long.parseLong(squareLit)[ FD ]
Line_24 $$ if (type.equals(SQUARE.toString())) -->Line_26 $$ square = Long.parseLong(squareLit)[ CD ]
Line_18 $$ if (type.equals(COUNT.toString())) -->Line_19 $$ String countLit = st.nextToken()[ CD ]
Line_18 $$ if (type.equals(COUNT.toString())) -->Line_20 $$ count = Long.parseLong(countLit)[ CD ]
Line_21 $$ if (type.equals(LENGTH.toString())) -->Line_22 $$ String lengthLit = st.nextToken()[ CD ]
Line_2 $$ private double readAndCalcStdDev(Path path, Configuration conf) throws IOException -->Line_8 $$ BufferedReader br = null[ CD ]
Line_8 $$ BufferedReader br = null-->Line_15 $$ while ((line = br.readLine()) != null) [ FD ]
Line_12 $$ long length = 0-->Line_23 $$ length = Long.parseLong(lengthLit)[ FD ]
Line_7 $$ double stddev = 0-->Line_32 $$ stddev = Math.sqrt((term - mean))[ FD ]
Line_2 $$ private double readAndCalcStdDev(Path path, Configuration conf) throws IOException -->Line_3 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_2 $$ private double readAndCalcStdDev(Path path, Configuration conf) throws IOException -->Line_7 $$ double stddev = 0[ CD ]
Line_10 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_35 $$ if (br != null) [ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_5 $$ if (!fs.exists(file))[ FD ]
Line_16 $$ StringTokenizer st = new StringTokenizer(line)-->Line_17 $$ String type = st.nextToken()[ FD ]
Line_11 $$ long count = 0-->Line_20 $$ count = Long.parseLong(countLit)[ FD ]
Line_4 $$ Path file = new Path(path, "part-r-00000")-->Line_5 $$ if (!fs.exists(file))[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_10 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))[ FD ]
Line_21 $$ if (type.equals(LENGTH.toString())) -->Line_23 $$ length = Long.parseLong(lengthLit)[ CD ]
Line_18 $$ if (type.equals(COUNT.toString())) -->Line_21 $$ if (type.equals(LENGTH.toString())) [ CD ]
Line_10 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_15 $$ while ((line = br.readLine()) != null) [ FD ]
Line_35 $$ if (br != null) -->Line_36 $$ br.close()[ CD ]
Line_16 $$ StringTokenizer st = new StringTokenizer(line)-->Line_25 $$ String squareLit = st.nextToken()[ FD ]
Line_15 $$ while ((line = br.readLine()) != null) -->Line_18 $$ if (type.equals(COUNT.toString())) [ CD ]
Line_21 $$ if (type.equals(LENGTH.toString())) -->Line_24 $$ if (type.equals(SQUARE.toString())) [ CD ]
Line_22 $$ String lengthLit = st.nextToken()-->Line_23 $$ length = Long.parseLong(lengthLit)[ FD ]
Line_2 $$ private double readAndCalcStdDev(Path path, Configuration conf) throws IOException -->Line_4 $$ Path file = new Path(path, "part-r-00000")[ CD ]
Line_10 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))-->Line_36 $$ br.close()[ FD ]
Line_8 $$ BufferedReader br = null-->Line_10 $$ br = new BufferedReader(new InputStreamReader(fs.open(file), Charsets.UTF_8))[ FD ]
Line_24 $$ if (type.equals(SQUARE.toString())) -->Line_25 $$ String squareLit = st.nextToken()[ CD ]
Line_8 $$ BufferedReader br = null-->Line_35 $$ if (br != null) [ FD ]
Line_2 $$ private double readAndCalcStdDev(Path path, Configuration conf) throws IOException -->Line_5 $$ if (!fs.exists(file))[ CD ]
Line_17 $$ String type = st.nextToken()-->Line_21 $$ if (type.equals(LENGTH.toString())) [ FD ]
Line_17 $$ String type = st.nextToken()-->Line_24 $$ if (type.equals(SQUARE.toString())) [ FD ]
