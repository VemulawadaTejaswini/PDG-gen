Line_2 $$ public void testLs() throws IOException -->Line_5 $$ File testFile = new File(TEST_DIR, "file1")[ CD ]
Line_2 $$ public void testLs() throws IOException -->Line_9 $$ assertTrue(outputArgs[0].equals("-rwx------"))[ CD ]
Line_5 $$ File testFile = new File(TEST_DIR, "file1")-->Line_10 $$ assertTrue(outputArgs[outputArgs.length - 1].equals(testFile.getCanonicalPath()))[ FD ]
Line_2 $$ public void testLs() throws IOException -->Line_15 $$ assertEquals(contentSize, Long.parseLong(outputArgs[4]))[ CD ]
Line_2 $$ public void testLs() throws IOException -->Line_14 $$ assertTrue(outputArgs[0].equals("-rwx------"))[ CD ]
Line_5 $$ File testFile = new File(TEST_DIR, "file1")-->Line_18 $$ assertFalse(testFile.exists())[ FD ]
Line_2 $$ public void testLs() throws IOException -->Line_13 $$ assertEquals(9, outputArgs.length)[ CD ]
Line_2 $$ public void testLs() throws IOException -->Line_16 $$ assertTrue(outputArgs[8].equals(testFile.getCanonicalPath()))[ CD ]
Line_5 $$ File testFile = new File(TEST_DIR, "file1")-->Line_16 $$ assertTrue(outputArgs[8].equals(testFile.getCanonicalPath()))[ FD ]
Line_5 $$ File testFile = new File(TEST_DIR, "file1")-->Line_6 $$ writeFile(testFile, content)[ FD ]
Line_7 $$ String output = Shell.execCommand(Shell.WINUTILS, "ls", testFile.getCanonicalPath())-->Line_8 $$ String[] outputArgs = output.split("[ \r\n]")[ FD ]
Line_3 $$ final String content = "6bytes"-->Line_4 $$ final int contentSize = content.length()[ FD ]
Line_5 $$ File testFile = new File(TEST_DIR, "file1")-->Line_11 $$ output = Shell.execCommand(Shell.WINUTILS, "ls", "-F", testFile.getCanonicalPath())[ FD ]
Line_2 $$ public void testLs() throws IOException -->Line_11 $$ output = Shell.execCommand(Shell.WINUTILS, "ls", "-F", testFile.getCanonicalPath())[ CD ]
Line_7 $$ String output = Shell.execCommand(Shell.WINUTILS, "ls", testFile.getCanonicalPath())-->Line_11 $$ output = Shell.execCommand(Shell.WINUTILS, "ls", "-F", testFile.getCanonicalPath())[ FD ]
Line_2 $$ public void testLs() throws IOException -->Line_18 $$ assertFalse(testFile.exists())[ CD ]
Line_8 $$ String[] outputArgs = output.split("[ \r\n]")-->Line_12 $$ outputArgs = output.split("[|\r\n]")[ FD ]
Line_2 $$ public void testLs() throws IOException -->Line_7 $$ String output = Shell.execCommand(Shell.WINUTILS, "ls", testFile.getCanonicalPath())[ CD ]
Line_11 $$ output = Shell.execCommand(Shell.WINUTILS, "ls", "-F", testFile.getCanonicalPath())-->Line_12 $$ outputArgs = output.split("[|\r\n]")[ FD ]
Line_2 $$ public void testLs() throws IOException -->Line_10 $$ assertTrue(outputArgs[outputArgs.length - 1].equals(testFile.getCanonicalPath()))[ CD ]
Line_2 $$ public void testLs() throws IOException -->Line_12 $$ outputArgs = output.split("[|\r\n]")[ CD ]
Line_2 $$ public void testLs() throws IOException -->Line_17 $$ testFile.delete()[ CD ]
Line_2 $$ public void testLs() throws IOException -->Line_8 $$ String[] outputArgs = output.split("[ \r\n]")[ CD ]
Line_2 $$ public void testLs() throws IOException -->Line_4 $$ final int contentSize = content.length()[ CD ]
Line_3 $$ final String content = "6bytes"-->Line_6 $$ writeFile(testFile, content)[ FD ]
Line_7 $$ String output = Shell.execCommand(Shell.WINUTILS, "ls", testFile.getCanonicalPath())-->Line_12 $$ outputArgs = output.split("[|\r\n]")[ FD ]
Line_2 $$ public void testLs() throws IOException -->Line_6 $$ writeFile(testFile, content)[ CD ]
Line_5 $$ File testFile = new File(TEST_DIR, "file1")-->Line_7 $$ String output = Shell.execCommand(Shell.WINUTILS, "ls", testFile.getCanonicalPath())[ FD ]
Line_2 $$ public void testLs() throws IOException -->Line_3 $$ final String content = "6bytes"[ CD ]
Line_4 $$ final int contentSize = content.length()-->Line_15 $$ assertEquals(contentSize, Long.parseLong(outputArgs[4]))[ FD ]
Line_5 $$ File testFile = new File(TEST_DIR, "file1")-->Line_17 $$ testFile.delete()[ FD ]
