Line_29 $$ if (HIVE_TIMESTAMP.equals(hiveType)) -->Line_30 $$ if (isNull) [ CD ]
Line_35 $$ if (HIVE_FLOAT.equals(hiveType) || HIVE_DOUBLE.equals(hiveType)) -->Line_39 $$ if (value.isEmpty()) [ CD ]
Line_5 $$ if (HIVE_BOOLEAN.equals(hiveType)) -->Line_9 $$ if (value.isEmpty()) [ CD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_18 $$ if (value.isEmpty()) [ FD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_21 $$ return NullableValue.of(BIGINT, parseLong(value))[ FD ]
Line_5 $$ if (HIVE_BOOLEAN.equals(hiveType)) -->Line_6 $$ if (isNull) [ CD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_42 $$ return NullableValue.of(DOUBLE, parseDouble(value))[ FD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_29 $$ if (HIVE_TIMESTAMP.equals(hiveType)) [ FD ]
Line_35 $$ if (HIVE_FLOAT.equals(hiveType) || HIVE_DOUBLE.equals(hiveType)) -->Line_36 $$ if (isNull) [ CD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_44 $$ if (HIVE_STRING.equals(hiveType)) [ FD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_14 $$ if (HIVE_BYTE.equals(hiveType) || HIVE_SHORT.equals(hiveType) || HIVE_INT.equals(hiveType) || HIVE_LONG.equals(hiveType)) [ FD ]
Line_35 $$ if (HIVE_FLOAT.equals(hiveType) || HIVE_DOUBLE.equals(hiveType)) -->Line_42 $$ return NullableValue.of(DOUBLE, parseDouble(value))[ CD ]
Line_45 $$ if (isNull) -->Line_46 $$ return NullableValue.asNull(VARCHAR)[ CD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_5 $$ if (HIVE_BOOLEAN.equals(hiveType)) [ FD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_39 $$ if (value.isEmpty()) [ FD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_53 $$ throw new PrestoException(NOT_SUPPORTED, format("Unsupported Hive type [%s] for partition: %s", hiveType, partitionName))[ FD ]
Line_39 $$ if (value.isEmpty()) -->Line_40 $$ return NullableValue.of(DOUBLE, 0.0)[ CD ]
Line_24 $$ if (isNull) -->Line_25 $$ return NullableValue.asNull(DATE)[ CD ]
Line_18 $$ if (value.isEmpty()) -->Line_19 $$ return NullableValue.of(BIGINT, 0L)[ CD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_35 $$ if (HIVE_FLOAT.equals(hiveType) || HIVE_DOUBLE.equals(hiveType)) [ FD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_33 $$ return NullableValue.of(TIMESTAMP, parseHiveTimestamp(value, timeZone))[ FD ]
Line_5 $$ if (HIVE_BOOLEAN.equals(hiveType)) -->Line_12 $$ return NullableValue.of(BOOLEAN, parseBoolean(value))[ CD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_48 $$ return NullableValue.of(VARCHAR, utf8Slice(value))[ FD ]
Line_14 $$ if (HIVE_BYTE.equals(hiveType) || HIVE_SHORT.equals(hiveType) || HIVE_INT.equals(hiveType) || HIVE_LONG.equals(hiveType)) -->Line_15 $$ if (isNull) [ CD ]
Line_44 $$ if (HIVE_STRING.equals(hiveType)) -->Line_48 $$ return NullableValue.of(VARCHAR, utf8Slice(value))[ CD ]
Line_23 $$ if (HIVE_DATE.equals(hiveType)) -->Line_24 $$ if (isNull) [ CD ]
Line_6 $$ if (isNull) -->Line_7 $$ return NullableValue.asNull(BOOLEAN)[ CD ]
Line_44 $$ if (HIVE_STRING.equals(hiveType)) -->Line_45 $$ if (isNull) [ CD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_27 $$ return NullableValue.of(DATE, parseHiveDate(value))[ FD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_23 $$ if (HIVE_DATE.equals(hiveType)) [ FD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_12 $$ return NullableValue.of(BOOLEAN, parseBoolean(value))[ FD ]
Line_23 $$ if (HIVE_DATE.equals(hiveType)) -->Line_27 $$ return NullableValue.of(DATE, parseHiveDate(value))[ CD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_9 $$ if (value.isEmpty()) [ FD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_51 $$ throw new PrestoException(HIVE_INVALID_PARTITION_VALUE, format("Invalid partition value '%s' for Hive type [%s] partition key: %s", value, hiveType, partitionName))[ FD ]
Line_36 $$ if (isNull) -->Line_37 $$ return NullableValue.asNull(DOUBLE)[ CD ]
Line_30 $$ if (isNull) -->Line_31 $$ return NullableValue.asNull(TIMESTAMP)[ CD ]
Line_2 $$ public static NullableValue parsePartitionValue(String partitionName, String value, HiveType hiveType, DateTimeZone timeZone) -->Line_4 $$ boolean isNull = HIVE_DEFAULT_DYNAMIC_PARTITION.equals(value)[ FD ]
Line_14 $$ if (HIVE_BYTE.equals(hiveType) || HIVE_SHORT.equals(hiveType) || HIVE_INT.equals(hiveType) || HIVE_LONG.equals(hiveType)) -->Line_21 $$ return NullableValue.of(BIGINT, parseLong(value))[ CD ]
Line_9 $$ if (value.isEmpty()) -->Line_10 $$ return NullableValue.of(BOOLEAN, false)[ CD ]
Line_29 $$ if (HIVE_TIMESTAMP.equals(hiveType)) -->Line_33 $$ return NullableValue.of(TIMESTAMP, parseHiveTimestamp(value, timeZone))[ CD ]
Line_14 $$ if (HIVE_BYTE.equals(hiveType) || HIVE_SHORT.equals(hiveType) || HIVE_INT.equals(hiveType) || HIVE_LONG.equals(hiveType)) -->Line_18 $$ if (value.isEmpty()) [ CD ]
Line_15 $$ if (isNull) -->Line_16 $$ return NullableValue.asNull(BIGINT)[ CD ]
