Line_4 $$ long lastFound = -1-->Line_11 $$ lastFound = current[ FD ]
Line_2 $$ static Tuple<Map<String, String>, Long> readLegacyChecksums(Directory directory) throws IOException -->Line_15 $$ try (IndexInput indexInput = directory.openInput(CHECKSUMS_PREFIX + lastFound, IOContext.READONCE)) [ FD ]
Line_11 $$ lastFound = current-->Line_14 $$ if (lastFound > -1) [ FD ]
Line_15 $$ try (IndexInput indexInput = directory.openInput(CHECKSUMS_PREFIX + lastFound, IOContext.READONCE)) -->Line_16 $$ indexInput.readInt()[ FD ]
Line_15 $$ try (IndexInput indexInput = directory.openInput(CHECKSUMS_PREFIX + lastFound, IOContext.READONCE)) -->Line_17 $$ return new Tuple(indexInput.readStringStringMap(), lastFound)[ FD ]
Line_5 $$ for (String name : directory.listAll()) -->Line_6 $$ if (!isChecksum(name)) [ FD ]
Line_9 $$ long current = Long.parseLong(name.substring(CHECKSUMS_PREFIX.length()))-->Line_11 $$ lastFound = current[ FD ]
Line_10 $$ if (current > lastFound) -->Line_11 $$ lastFound = current[ CD ]
Line_2 $$ static Tuple<Map<String, String>, Long> readLegacyChecksums(Directory directory) throws IOException -->Line_5 $$ for (String name : directory.listAll()) [ FD ]
Line_4 $$ long lastFound = -1-->Line_10 $$ if (current > lastFound) [ FD ]
Line_9 $$ long current = Long.parseLong(name.substring(CHECKSUMS_PREFIX.length()))-->Line_10 $$ if (current > lastFound) [ FD ]
Line_5 $$ for (String name : directory.listAll()) -->Line_9 $$ long current = Long.parseLong(name.substring(CHECKSUMS_PREFIX.length()))[ FD ]
Line_4 $$ long lastFound = -1-->Line_14 $$ if (lastFound > -1) [ FD ]
