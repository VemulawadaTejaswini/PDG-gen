Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_14 $$ return Long.parseLong(value)[ FD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_12 $$ return Integer.parseInt(value)[ FD ]
Line_19 $$ if (type.equals("boolean") || type.equals("java.lang.Boolean")) -->Line_20 $$ return Boolean.parseBoolean(value)[ CD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_16 $$ return Float.parseFloat(value)[ FD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_9 $$ if (type.equals("short") || type.equals("java.lang.Short")) [ FD ]
Line_19 $$ if (type.equals("boolean") || type.equals("java.lang.Boolean")) -->Line_21 $$ if (type.equals(URL.class.getName())) [ CD ]
Line_7 $$ if (type.equals("byte") || type.equals("java.lang.Byte")) -->Line_9 $$ if (type.equals("short") || type.equals("java.lang.Short")) [ CD ]
Line_11 $$ if (type.equals("int") || type.equals("java.lang.Integer")) -->Line_12 $$ return Integer.parseInt(value)[ CD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_18 $$ return Double.parseDouble(value)[ FD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_19 $$ if (type.equals("boolean") || type.equals("java.lang.Boolean")) [ FD ]
Line_9 $$ if (type.equals("short") || type.equals("java.lang.Short")) -->Line_11 $$ if (type.equals("int") || type.equals("java.lang.Integer")) [ CD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_25 $$ throw NamingLogger.ROOT_LOGGER.unableToTransformURLBindingValue(value, e)[ FD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_3 $$ if (type == null || type.isEmpty() || type.equals(String.class.getName())) [ CD ]
Line_7 $$ if (type.equals("byte") || type.equals("java.lang.Byte")) -->Line_8 $$ return Byte.parseByte(value)[ CD ]
Line_13 $$ if (type.equals("long") || type.equals("java.lang.Long")) -->Line_15 $$ if (type.equals("float") || type.equals("java.lang.Float")) [ CD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_10 $$ return Short.parseShort(value)[ FD ]
Line_17 $$ if (type.equals("double") || type.equals("java.lang.Double")) -->Line_19 $$ if (type.equals("boolean") || type.equals("java.lang.Boolean")) [ CD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_15 $$ if (type.equals("float") || type.equals("java.lang.Float")) [ FD ]
Line_13 $$ if (type.equals("long") || type.equals("java.lang.Long")) -->Line_14 $$ return Long.parseLong(value)[ CD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_5 $$ if (type.equals("char") || type.equals("java.lang.Character")) [ FD ]
Line_3 $$ if (type == null || type.isEmpty() || type.equals(String.class.getName())) -->Line_5 $$ if (type.equals("char") || type.equals("java.lang.Character")) [ CD ]
Line_3 $$ if (type == null || type.isEmpty() || type.equals(String.class.getName())) -->Line_4 $$ return value[ CD ]
Line_9 $$ if (type.equals("short") || type.equals("java.lang.Short")) -->Line_10 $$ return Short.parseShort(value)[ CD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_28 $$ throw NamingLogger.ROOT_LOGGER.unsupportedSimpleBindingType(type)[ FD ]
Line_15 $$ if (type.equals("float") || type.equals("java.lang.Float")) -->Line_16 $$ return Float.parseFloat(value)[ CD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_3 $$ if (type == null || type.isEmpty() || type.equals(String.class.getName())) [ FD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_7 $$ if (type.equals("byte") || type.equals("java.lang.Byte")) [ FD ]
Line_5 $$ if (type.equals("char") || type.equals("java.lang.Character")) -->Line_7 $$ if (type.equals("byte") || type.equals("java.lang.Byte")) [ CD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_6 $$ return value.charAt(0)[ FD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_11 $$ if (type.equals("int") || type.equals("java.lang.Integer")) [ FD ]
Line_15 $$ if (type.equals("float") || type.equals("java.lang.Float")) -->Line_17 $$ if (type.equals("double") || type.equals("java.lang.Double")) [ CD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_20 $$ return Boolean.parseBoolean(value)[ FD ]
Line_5 $$ if (type.equals("char") || type.equals("java.lang.Character")) -->Line_6 $$ return value.charAt(0)[ CD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_21 $$ if (type.equals(URL.class.getName())) [ FD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_17 $$ if (type.equals("double") || type.equals("java.lang.Double")) [ FD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_13 $$ if (type.equals("long") || type.equals("java.lang.Long")) [ FD ]
Line_11 $$ if (type.equals("int") || type.equals("java.lang.Integer")) -->Line_13 $$ if (type.equals("long") || type.equals("java.lang.Long")) [ CD ]
Line_17 $$ if (type.equals("double") || type.equals("java.lang.Double")) -->Line_18 $$ return Double.parseDouble(value)[ CD ]
Line_2 $$ private Object coerceToType(final String value, final String type) throws OperationFailedException -->Line_8 $$ return Byte.parseByte(value)[ FD ]
