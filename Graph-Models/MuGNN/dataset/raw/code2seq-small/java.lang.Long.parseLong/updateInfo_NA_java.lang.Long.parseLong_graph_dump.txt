Line_7 $$ final String path = attributes.getValue("path")-->Line_8 $$ assertSAX(!StringUtil.isEmptyOrSpaces(path))[ FD ]
Line_6 $$ if (myBase != null) -->Line_9 $$ structure.myFile = SvnUtil.resolvePath(myBase, path)[ CD ]
Line_2 $$ protected void updateInfo(Attributes attributes, SvnInfoStructure structure) throws SAXException -->Line_11 $$ final String revision = attributes.getValue("revision")[ FD ]
Line_7 $$ final String path = attributes.getValue("path")-->Line_9 $$ structure.myFile = SvnUtil.resolvePath(myBase, path)[ FD ]
Line_14 $$ final long number = Long.parseLong(revision)-->Line_15 $$ structure.myRevision = number[ FD ]
Line_2 $$ protected void updateInfo(Attributes attributes, SvnInfoStructure structure) throws SAXException -->Line_3 $$ final String kind = attributes.getValue("kind")[ FD ]
Line_3 $$ final String kind = attributes.getValue("kind")-->Line_5 $$ structure.myKind = NodeKind.from(kind)[ FD ]
Line_2 $$ protected void updateInfo(Attributes attributes, SvnInfoStructure structure) throws SAXException -->Line_7 $$ final String path = attributes.getValue("path")[ FD ]
Line_2 $$ protected void updateInfo(Attributes attributes, SvnInfoStructure structure) throws SAXException -->Line_11 $$ final String revision = attributes.getValue("revision")[ CD ]
Line_2 $$ protected void updateInfo(Attributes attributes, SvnInfoStructure structure) throws SAXException -->Line_4 $$ assertSAX(!StringUtil.isEmptyOrSpaces(kind))[ CD ]
Line_3 $$ final String kind = attributes.getValue("kind")-->Line_4 $$ assertSAX(!StringUtil.isEmptyOrSpaces(kind))[ FD ]
Line_6 $$ if (myBase != null) -->Line_7 $$ final String path = attributes.getValue("path")[ CD ]
Line_2 $$ protected void updateInfo(Attributes attributes, SvnInfoStructure structure) throws SAXException -->Line_12 $$ assertSAX(!StringUtil.isEmptyOrSpaces(revision))[ CD ]
Line_6 $$ if (myBase != null) -->Line_8 $$ assertSAX(!StringUtil.isEmptyOrSpaces(path))[ CD ]
Line_2 $$ protected void updateInfo(Attributes attributes, SvnInfoStructure structure) throws SAXException -->Line_6 $$ if (myBase != null) [ CD ]
Line_11 $$ final String revision = attributes.getValue("revision")-->Line_14 $$ final long number = Long.parseLong(revision)[ FD ]
Line_2 $$ protected void updateInfo(Attributes attributes, SvnInfoStructure structure) throws SAXException -->Line_3 $$ final String kind = attributes.getValue("kind")[ CD ]
Line_11 $$ final String revision = attributes.getValue("revision")-->Line_12 $$ assertSAX(!StringUtil.isEmptyOrSpaces(revision))[ FD ]
Line_2 $$ protected void updateInfo(Attributes attributes, SvnInfoStructure structure) throws SAXException -->Line_5 $$ structure.myKind = NodeKind.from(kind)[ CD ]
