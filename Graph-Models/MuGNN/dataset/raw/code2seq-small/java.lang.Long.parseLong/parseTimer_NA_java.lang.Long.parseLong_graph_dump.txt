Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_26 $$ switch(reader.nextTag()) [ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_6 $$ final Set<String> required = new HashSet(Arrays.asList(new String[] [ CD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_11 $$ boolean handled = handleCommonAttributes(builder, reader, i)[ FD ]
Line_4 $$ TimerImpl.Builder builder = TimerImpl.builder()-->Line_5 $$ builder.setPersistent(true)[ FD ]
Line_4 $$ TimerImpl.Builder builder = TimerImpl.builder()-->Line_31 $$ builder.setInfo((Serializable) deserialize(loadableElements.info))[ FD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_11 $$ boolean handled = handleCommonAttributes(builder, reader, i)[ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_3 $$ LoadableElements loadableElements = new LoadableElements()[ CD ]
Line_11 $$ boolean handled = handleCommonAttributes(builder, reader, i)-->Line_45 $$ if (!handled) [ FD ]
Line_30 $$ if (loadableElements.info != null) -->Line_31 $$ builder.setInfo((Serializable) deserialize(loadableElements.info))[ CD ]
Line_3 $$ LoadableElements loadableElements = new LoadableElements()-->Line_44 $$ boolean handled = handleCommonElements(reader, loadableElements)[ FD ]
Line_11 $$ boolean handled = handleCommonAttributes(builder, reader, i)-->Line_12 $$ if (!handled) [ FD ]
Line_4 $$ TimerImpl.Builder builder = TimerImpl.builder()-->Line_36 $$ timers.add(builder.build(timerService))[ FD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_11 $$ boolean handled = handleCommonAttributes(builder, reader, i)[ CD ]
Line_6 $$ final Set<String> required = new HashSet(Arrays.asList(new String[] -->Line_22 $$ if (!required.isEmpty()) [ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_9 $$ String attrName = reader.getAttributeLocalName(i)[ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) [ CD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_44 $$ boolean handled = handleCommonElements(reader, loadableElements)[ FD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_9 $$ String attrName = reader.getAttributeLocalName(i)[ CD ]
Line_9 $$ String attrName = reader.getAttributeLocalName(i)-->Line_10 $$ required.remove(attrName)[ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_8 $$ String attr = reader.getAttributeValue(i)[ FD ]
Line_4 $$ TimerImpl.Builder builder = TimerImpl.builder()-->Line_34 $$ builder.setPrimaryKey(deserialize(loadableElements.primaryKey))[ FD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_18 $$ throw ParseUtils.unexpectedAttribute(reader, i)[ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_4 $$ TimerImpl.Builder builder = TimerImpl.builder()[ CD ]
Line_6 $$ final Set<String> required = new HashSet(Arrays.asList(new String[] -->Line_10 $$ required.remove(attrName)[ FD ]
Line_8 $$ String attr = reader.getAttributeValue(i)-->Line_15 $$ builder.setRepeatInterval(Long.parseLong(attr))[ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_18 $$ throw ParseUtils.unexpectedAttribute(reader, i)[ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_22 $$ if (!required.isEmpty()) [ CD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_25 $$ while (reader.hasNext()) [ FD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_9 $$ String attrName = reader.getAttributeLocalName(i)[ FD ]
Line_4 $$ TimerImpl.Builder builder = TimerImpl.builder()-->Line_38 $$ EjbLogger.ROOT_LOGGER.timerReinstatementFailed(builder.getTimedObjectId(), builder.getId(), e)[ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_46 $$ throw ParseUtils.unexpectedElement(reader)[ FD ]
Line_44 $$ boolean handled = handleCommonElements(reader, loadableElements)-->Line_45 $$ if (!handled) [ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_36 $$ timers.add(builder.build(timerService))[ FD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_10 $$ required.remove(attrName)[ CD ]
Line_4 $$ TimerImpl.Builder builder = TimerImpl.builder()-->Line_11 $$ boolean handled = handleCommonAttributes(builder, reader, i)[ FD ]
Line_4 $$ TimerImpl.Builder builder = TimerImpl.builder()-->Line_15 $$ builder.setRepeatInterval(Long.parseLong(attr))[ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) [ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_25 $$ while (reader.hasNext()) [ CD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_23 $$ throw ParseUtils.missingRequired(reader, required)[ FD ]
Line_2 $$ private void parseTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_5 $$ builder.setPersistent(true)[ CD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_8 $$ String attr = reader.getAttributeValue(i)[ CD ]
Line_33 $$ if (loadableElements.primaryKey != null) -->Line_34 $$ builder.setPrimaryKey(deserialize(loadableElements.primaryKey))[ CD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_8 $$ String attr = reader.getAttributeValue(i)[ FD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_12 $$ if (!handled) [ CD ]
Line_6 $$ final Set<String> required = new HashSet(Arrays.asList(new String[] -->Line_23 $$ throw ParseUtils.missingRequired(reader, required)[ FD ]
