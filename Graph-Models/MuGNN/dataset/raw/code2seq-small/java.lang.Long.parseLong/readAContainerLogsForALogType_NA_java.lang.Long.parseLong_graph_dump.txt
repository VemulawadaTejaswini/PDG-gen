Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_15 $$ int len = valueStream.read(buf, 0, toRead)[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_9 $$ out.print("LogLength: ")[ FD ]
Line_12 $$ long curRead = 0-->Line_18 $$ curRead += len[ FD ]
Line_16 $$ while (len != -1 && curRead < fileLength) -->Line_20 $$ toRead = pendingRead > buf.length ? buf.length : (int) pendingRead[ CD ]
Line_12 $$ long curRead = 0-->Line_19 $$ pendingRead = fileLength - curRead[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_6 $$ long fileLength = Long.parseLong(fileLengthStr)[ CD ]
Line_13 $$ long pendingRead = fileLength - curRead-->Line_19 $$ pendingRead = fileLength - curRead[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_8 $$ out.println(fileType)[ FD ]
Line_3 $$ byte[] buf = new byte[65535]-->Line_17 $$ out.write(buf, 0, len)[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_12 $$ long curRead = 0[ CD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_5 $$ String fileLengthStr = valueStream.readUTF()[ CD ]
Line_15 $$ int len = valueStream.read(buf, 0, toRead)-->Line_21 $$ len = valueStream.read(buf, 0, toRead)[ FD ]
Line_14 $$ int toRead = pendingRead > buf.length ? buf.length : (int) pendingRead-->Line_20 $$ toRead = pendingRead > buf.length ? buf.length : (int) pendingRead[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_8 $$ out.println(fileType)[ CD ]
Line_5 $$ String fileLengthStr = valueStream.readUTF()-->Line_10 $$ out.println(fileLengthStr)[ FD ]
Line_15 $$ int len = valueStream.read(buf, 0, toRead)-->Line_17 $$ out.write(buf, 0, len)[ FD ]
Line_16 $$ while (len != -1 && curRead < fileLength) -->Line_21 $$ len = valueStream.read(buf, 0, toRead)[ CD ]
Line_21 $$ len = valueStream.read(buf, 0, toRead)-->Line_17 $$ out.write(buf, 0, len)[ FD ]
Line_4 $$ String fileType = valueStream.readUTF()-->Line_8 $$ out.println(fileType)[ FD ]
Line_14 $$ int toRead = pendingRead > buf.length ? buf.length : (int) pendingRead-->Line_15 $$ int len = valueStream.read(buf, 0, toRead)[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_11 $$ out.println("Log Contents:")[ CD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_23 $$ out.println("")[ CD ]
Line_15 $$ int len = valueStream.read(buf, 0, toRead)-->Line_18 $$ curRead += len[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_4 $$ String fileType = valueStream.readUTF()[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_4 $$ String fileType = valueStream.readUTF()[ CD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_16 $$ while (len != -1 && curRead < fileLength) [ CD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_11 $$ out.println("Log Contents:")[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_17 $$ out.write(buf, 0, len)[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_21 $$ len = valueStream.read(buf, 0, toRead)[ FD ]
Line_21 $$ len = valueStream.read(buf, 0, toRead)-->Line_18 $$ curRead += len[ FD ]
Line_16 $$ while (len != -1 && curRead < fileLength) -->Line_17 $$ out.write(buf, 0, len)[ CD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_15 $$ int len = valueStream.read(buf, 0, toRead)[ CD ]
Line_3 $$ byte[] buf = new byte[65535]-->Line_15 $$ int len = valueStream.read(buf, 0, toRead)[ FD ]
Line_16 $$ while (len != -1 && curRead < fileLength) -->Line_19 $$ pendingRead = fileLength - curRead[ CD ]
Line_14 $$ int toRead = pendingRead > buf.length ? buf.length : (int) pendingRead-->Line_21 $$ len = valueStream.read(buf, 0, toRead)[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_9 $$ out.print("LogLength: ")[ CD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_3 $$ byte[] buf = new byte[65535][ CD ]
Line_18 $$ curRead += len-->Line_19 $$ pendingRead = fileLength - curRead[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_23 $$ out.println("")[ FD ]
Line_3 $$ byte[] buf = new byte[65535]-->Line_21 $$ len = valueStream.read(buf, 0, toRead)[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_10 $$ out.println(fileLengthStr)[ CD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_13 $$ long pendingRead = fileLength - curRead[ CD ]
Line_20 $$ toRead = pendingRead > buf.length ? buf.length : (int) pendingRead-->Line_21 $$ len = valueStream.read(buf, 0, toRead)[ FD ]
Line_5 $$ String fileLengthStr = valueStream.readUTF()-->Line_6 $$ long fileLength = Long.parseLong(fileLengthStr)[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_5 $$ String fileLengthStr = valueStream.readUTF()[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_14 $$ int toRead = pendingRead > buf.length ? buf.length : (int) pendingRead[ CD ]
Line_16 $$ while (len != -1 && curRead < fileLength) -->Line_18 $$ curRead += len[ CD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_7 $$ out.print("LogType: ")[ CD ]
Line_6 $$ long fileLength = Long.parseLong(fileLengthStr)-->Line_19 $$ pendingRead = fileLength - curRead[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_10 $$ out.println(fileLengthStr)[ FD ]
Line_2 $$ public static void readAContainerLogsForALogType(DataInputStream valueStream, PrintStream out) throws IOException -->Line_7 $$ out.print("LogType: ")[ FD ]
