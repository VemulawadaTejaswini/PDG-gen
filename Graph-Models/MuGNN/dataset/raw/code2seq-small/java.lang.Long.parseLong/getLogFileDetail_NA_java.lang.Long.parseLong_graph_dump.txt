Line_3 $$ File indexFile = getIndexFile(taskid, isCleanup)-->Line_4 $$ BufferedReader fis = new BufferedReader(new InputStreamReader(SecureIOUtils.openForRead(indexFile, obtainLogDirOwner(taskid), null), Charsets.UTF_8))[ FD ]
Line_4 $$ BufferedReader fis = new BufferedReader(new InputStreamReader(SecureIOUtils.openForRead(indexFile, obtainLogDirOwner(taskid), null), Charsets.UTF_8))-->Line_8 $$ str = fis.readLine()[ FD ]
Line_2 $$ private static LogFileDetail getLogFileDetail(TaskAttemptID taskid, LogName filter, boolean isCleanup) throws IOException -->Line_21 $$ if (str.contains(filter.toString())) [ FD ]
Line_4 $$ BufferedReader fis = new BufferedReader(new InputStreamReader(SecureIOUtils.openForRead(indexFile, obtainLogDirOwner(taskid), null), Charsets.UTF_8))-->Line_33 $$ IOUtils.cleanup(LOG, fis)[ FD ]
Line_20 $$ while (str != null) -->Line_28 $$ str = fis.readLine()[ CD ]
Line_2 $$ private static LogFileDetail getLogFileDetail(TaskAttemptID taskid, LogName filter, boolean isCleanup) throws IOException -->Line_13 $$ if (filter.equals(LogName.DEBUGOUT) || filter.equals(LogName.PROFILE)) [ FD ]
Line_8 $$ str = fis.readLine()-->Line_21 $$ if (str.contains(filter.toString())) [ FD ]
Line_6 $$ String str = null-->Line_8 $$ str = fis.readLine()[ FD ]
Line_8 $$ str = fis.readLine()-->Line_12 $$ l.location = str.substring(str.indexOf(LogFileDetail.LOCATION) + LogFileDetail.LOCATION.length())[ FD ]
Line_6 $$ String str = null-->Line_9 $$ if (str == null) [ FD ]
Line_4 $$ BufferedReader fis = new BufferedReader(new InputStreamReader(SecureIOUtils.openForRead(indexFile, obtainLogDirOwner(taskid), null), Charsets.UTF_8))-->Line_31 $$ fis = null[ FD ]
Line_19 $$ str = fis.readLine()-->Line_28 $$ str = fis.readLine()[ FD ]
Line_6 $$ String str = null-->Line_28 $$ str = fis.readLine()[ FD ]
Line_4 $$ BufferedReader fis = new BufferedReader(new InputStreamReader(SecureIOUtils.openForRead(indexFile, obtainLogDirOwner(taskid), null), Charsets.UTF_8))-->Line_28 $$ str = fis.readLine()[ FD ]
Line_21 $$ if (str.contains(filter.toString())) -->Line_25 $$ l.length = Long.parseLong(startAndLen[1])[ CD ]
Line_2 $$ private static LogFileDetail getLogFileDetail(TaskAttemptID taskid, LogName filter, boolean isCleanup) throws IOException -->Line_3 $$ File indexFile = getIndexFile(taskid, isCleanup)[ CD ]
Line_19 $$ str = fis.readLine()-->Line_22 $$ str = str.substring(filter.toString().length() + 1)[ FD ]
Line_22 $$ str = str.substring(filter.toString().length() + 1)-->Line_21 $$ if (str.contains(filter.toString())) [ FD ]
Line_31 $$ fis = null-->Line_33 $$ IOUtils.cleanup(LOG, fis)[ FD ]
Line_8 $$ str = fis.readLine()-->Line_23 $$ String[] startAndLen = str.split(" ")[ FD ]
Line_21 $$ if (str.contains(filter.toString())) -->Line_24 $$ l.start = Long.parseLong(startAndLen[0])[ CD ]
Line_2 $$ private static LogFileDetail getLogFileDetail(TaskAttemptID taskid, LogName filter, boolean isCleanup) throws IOException -->Line_22 $$ str = str.substring(filter.toString().length() + 1)[ FD ]
Line_2 $$ private static LogFileDetail getLogFileDetail(TaskAttemptID taskid, LogName filter, boolean isCleanup) throws IOException -->Line_5 $$ LogFileDetail l = new LogFileDetail()[ CD ]
Line_22 $$ str = str.substring(filter.toString().length() + 1)-->Line_28 $$ str = fis.readLine()[ FD ]
Line_28 $$ str = fis.readLine()-->Line_20 $$ while (str != null) [ FD ]
Line_2 $$ private static LogFileDetail getLogFileDetail(TaskAttemptID taskid, LogName filter, boolean isCleanup) throws IOException -->Line_6 $$ String str = null[ CD ]
Line_2 $$ private static LogFileDetail getLogFileDetail(TaskAttemptID taskid, LogName filter, boolean isCleanup) throws IOException -->Line_4 $$ BufferedReader fis = new BufferedReader(new InputStreamReader(SecureIOUtils.openForRead(indexFile, obtainLogDirOwner(taskid), null), Charsets.UTF_8))[ CD ]
Line_4 $$ BufferedReader fis = new BufferedReader(new InputStreamReader(SecureIOUtils.openForRead(indexFile, obtainLogDirOwner(taskid), null), Charsets.UTF_8))-->Line_19 $$ str = fis.readLine()[ FD ]
Line_19 $$ str = fis.readLine()-->Line_23 $$ String[] startAndLen = str.split(" ")[ FD ]
Line_6 $$ String str = null-->Line_19 $$ str = fis.readLine()[ FD ]
Line_8 $$ str = fis.readLine()-->Line_28 $$ str = fis.readLine()[ FD ]
Line_13 $$ if (filter.equals(LogName.DEBUGOUT) || filter.equals(LogName.PROFILE)) -->Line_15 $$ l.start = 0[ CD ]
Line_2 $$ private static LogFileDetail getLogFileDetail(TaskAttemptID taskid, LogName filter, boolean isCleanup) throws IOException -->Line_4 $$ BufferedReader fis = new BufferedReader(new InputStreamReader(SecureIOUtils.openForRead(indexFile, obtainLogDirOwner(taskid), null), Charsets.UTF_8))[ FD ]
Line_21 $$ if (str.contains(filter.toString())) -->Line_23 $$ String[] startAndLen = str.split(" ")[ CD ]
Line_28 $$ str = fis.readLine()-->Line_21 $$ if (str.contains(filter.toString())) [ FD ]
Line_8 $$ str = fis.readLine()-->Line_20 $$ while (str != null) [ FD ]
Line_20 $$ while (str != null) -->Line_21 $$ if (str.contains(filter.toString())) [ CD ]
Line_22 $$ str = str.substring(filter.toString().length() + 1)-->Line_23 $$ String[] startAndLen = str.split(" ")[ FD ]
Line_2 $$ private static LogFileDetail getLogFileDetail(TaskAttemptID taskid, LogName filter, boolean isCleanup) throws IOException -->Line_14 $$ l.length = new File(l.location, filter.toString()).length()[ FD ]
Line_2 $$ private static LogFileDetail getLogFileDetail(TaskAttemptID taskid, LogName filter, boolean isCleanup) throws IOException -->Line_35 $$ return l[ CD ]
Line_21 $$ if (str.contains(filter.toString())) -->Line_22 $$ str = str.substring(filter.toString().length() + 1)[ CD ]
Line_6 $$ String str = null-->Line_12 $$ l.location = str.substring(str.indexOf(LogFileDetail.LOCATION) + LogFileDetail.LOCATION.length())[ FD ]
Line_8 $$ str = fis.readLine()-->Line_22 $$ str = str.substring(filter.toString().length() + 1)[ FD ]
Line_22 $$ str = str.substring(filter.toString().length() + 1)-->Line_20 $$ while (str != null) [ FD ]
Line_2 $$ private static LogFileDetail getLogFileDetail(TaskAttemptID taskid, LogName filter, boolean isCleanup) throws IOException -->Line_3 $$ File indexFile = getIndexFile(taskid, isCleanup)[ FD ]
Line_4 $$ BufferedReader fis = new BufferedReader(new InputStreamReader(SecureIOUtils.openForRead(indexFile, obtainLogDirOwner(taskid), null), Charsets.UTF_8))-->Line_30 $$ fis.close()[ FD ]
Line_4 $$ BufferedReader fis = new BufferedReader(new InputStreamReader(SecureIOUtils.openForRead(indexFile, obtainLogDirOwner(taskid), null), Charsets.UTF_8))-->Line_16 $$ fis.close()[ FD ]
Line_28 $$ str = fis.readLine()-->Line_22 $$ str = str.substring(filter.toString().length() + 1)[ FD ]
Line_19 $$ str = fis.readLine()-->Line_20 $$ while (str != null) [ FD ]
Line_6 $$ String str = null-->Line_21 $$ if (str.contains(filter.toString())) [ FD ]
Line_8 $$ str = fis.readLine()-->Line_19 $$ str = fis.readLine()[ FD ]
Line_13 $$ if (filter.equals(LogName.DEBUGOUT) || filter.equals(LogName.PROFILE)) -->Line_17 $$ return l[ CD ]
Line_6 $$ String str = null-->Line_20 $$ while (str != null) [ FD ]
Line_13 $$ if (filter.equals(LogName.DEBUGOUT) || filter.equals(LogName.PROFILE)) -->Line_16 $$ fis.close()[ CD ]
Line_6 $$ String str = null-->Line_23 $$ String[] startAndLen = str.split(" ")[ FD ]
Line_28 $$ str = fis.readLine()-->Line_23 $$ String[] startAndLen = str.split(" ")[ FD ]
Line_8 $$ str = fis.readLine()-->Line_9 $$ if (str == null) [ FD ]
Line_19 $$ str = fis.readLine()-->Line_21 $$ if (str.contains(filter.toString())) [ FD ]
Line_13 $$ if (filter.equals(LogName.DEBUGOUT) || filter.equals(LogName.PROFILE)) -->Line_14 $$ l.length = new File(l.location, filter.toString()).length()[ CD ]
Line_6 $$ String str = null-->Line_22 $$ str = str.substring(filter.toString().length() + 1)[ FD ]
