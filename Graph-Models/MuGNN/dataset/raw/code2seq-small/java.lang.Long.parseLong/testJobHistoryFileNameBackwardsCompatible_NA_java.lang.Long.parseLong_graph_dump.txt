Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_13 $$ Assert.assertEquals("User incorrect after decoding old history file", USER_NAME, info.getUser())[ CD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_18 $$ Assert.assertEquals("Job status incorrect after decoding old history file", JOB_STATUS, info.getJobStatus())[ CD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_5 $$ long submitTime = Long.parseLong(SUBMIT_TIME)[ CD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_19 $$ Assert.assertNull("Queue name incorrect after decoding old history file", info.getQueueName())[ CD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_4 $$ JobId jobId = TypeConverter.toYarn(oldJobId)[ CD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_15 $$ Assert.assertEquals("Finish time incorrect after decoding old history file", finishTime, info.getFinishTime())[ CD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_8 $$ int numReduces = Integer.parseInt(NUM_REDUCES)[ CD ]
Line_7 $$ int numMaps = Integer.parseInt(NUM_MAPS)-->Line_16 $$ Assert.assertEquals("Num maps incorrect after decoding old history file", numMaps, info.getNumMaps())[ FD ]
Line_10 $$ JobIndexInfo info = FileNameIndexUtils.getIndexInfo(jobHistoryFile)-->Line_14 $$ Assert.assertEquals("Job name incorrect after decoding old history file", JOB_NAME, info.getJobName())[ FD ]
Line_10 $$ JobIndexInfo info = FileNameIndexUtils.getIndexInfo(jobHistoryFile)-->Line_16 $$ Assert.assertEquals("Num maps incorrect after decoding old history file", numMaps, info.getNumMaps())[ FD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_14 $$ Assert.assertEquals("Job name incorrect after decoding old history file", JOB_NAME, info.getJobName())[ CD ]
Line_10 $$ JobIndexInfo info = FileNameIndexUtils.getIndexInfo(jobHistoryFile)-->Line_15 $$ Assert.assertEquals("Finish time incorrect after decoding old history file", finishTime, info.getFinishTime())[ FD ]
Line_10 $$ JobIndexInfo info = FileNameIndexUtils.getIndexInfo(jobHistoryFile)-->Line_17 $$ Assert.assertEquals("Num reduces incorrect after decoding old history file", numReduces, info.getNumReduces())[ FD ]
Line_10 $$ JobIndexInfo info = FileNameIndexUtils.getIndexInfo(jobHistoryFile)-->Line_18 $$ Assert.assertEquals("Job status incorrect after decoding old history file", JOB_STATUS, info.getJobStatus())[ FD ]
Line_5 $$ long submitTime = Long.parseLong(SUBMIT_TIME)-->Line_12 $$ Assert.assertEquals("Submit time incorrect after decoding old history file", submitTime, info.getSubmitTime())[ FD ]
Line_9 $$ String jobHistoryFile = String.format(OLD_JOB_HISTORY_FILE_FORMATTER, JOB_ID, SUBMIT_TIME, USER_NAME, JOB_NAME, FINISH_TIME, NUM_MAPS, NUM_REDUCES, JOB_STATUS)-->Line_10 $$ JobIndexInfo info = FileNameIndexUtils.getIndexInfo(jobHistoryFile)[ FD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_12 $$ Assert.assertEquals("Submit time incorrect after decoding old history file", submitTime, info.getSubmitTime())[ CD ]
Line_10 $$ JobIndexInfo info = FileNameIndexUtils.getIndexInfo(jobHistoryFile)-->Line_19 $$ Assert.assertNull("Queue name incorrect after decoding old history file", info.getQueueName())[ FD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_10 $$ JobIndexInfo info = FileNameIndexUtils.getIndexInfo(jobHistoryFile)[ CD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_7 $$ int numMaps = Integer.parseInt(NUM_MAPS)[ CD ]
Line_4 $$ JobId jobId = TypeConverter.toYarn(oldJobId)-->Line_11 $$ Assert.assertEquals("Job id incorrect after decoding old history file", jobId, info.getJobId())[ FD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_17 $$ Assert.assertEquals("Num reduces incorrect after decoding old history file", numReduces, info.getNumReduces())[ CD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_16 $$ Assert.assertEquals("Num maps incorrect after decoding old history file", numMaps, info.getNumMaps())[ CD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_11 $$ Assert.assertEquals("Job id incorrect after decoding old history file", jobId, info.getJobId())[ CD ]
Line_3 $$ JobID oldJobId = JobID.forName(JOB_ID)-->Line_4 $$ JobId jobId = TypeConverter.toYarn(oldJobId)[ FD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_9 $$ String jobHistoryFile = String.format(OLD_JOB_HISTORY_FILE_FORMATTER, JOB_ID, SUBMIT_TIME, USER_NAME, JOB_NAME, FINISH_TIME, NUM_MAPS, NUM_REDUCES, JOB_STATUS)[ CD ]
Line_10 $$ JobIndexInfo info = FileNameIndexUtils.getIndexInfo(jobHistoryFile)-->Line_12 $$ Assert.assertEquals("Submit time incorrect after decoding old history file", submitTime, info.getSubmitTime())[ FD ]
Line_10 $$ JobIndexInfo info = FileNameIndexUtils.getIndexInfo(jobHistoryFile)-->Line_13 $$ Assert.assertEquals("User incorrect after decoding old history file", USER_NAME, info.getUser())[ FD ]
Line_8 $$ int numReduces = Integer.parseInt(NUM_REDUCES)-->Line_17 $$ Assert.assertEquals("Num reduces incorrect after decoding old history file", numReduces, info.getNumReduces())[ FD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_3 $$ JobID oldJobId = JobID.forName(JOB_ID)[ CD ]
Line_2 $$ public void testJobHistoryFileNameBackwardsCompatible() throws IOException -->Line_6 $$ long finishTime = Long.parseLong(FINISH_TIME)[ CD ]
Line_6 $$ long finishTime = Long.parseLong(FINISH_TIME)-->Line_15 $$ Assert.assertEquals("Finish time incorrect after decoding old history file", finishTime, info.getFinishTime())[ FD ]
Line_10 $$ JobIndexInfo info = FileNameIndexUtils.getIndexInfo(jobHistoryFile)-->Line_11 $$ Assert.assertEquals("Job id incorrect after decoding old history file", jobId, info.getJobId())[ FD ]
