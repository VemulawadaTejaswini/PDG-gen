Line_3 $$ if (jobBeingTraced != null) -->Line_8 $$ String finishTime = line.get("FINISH_TIME")[ CD ]
Line_15 $$ if (splits != null) -->Line_17 $$ StringTokenizer tok = new StringTokenizer(splits, ",", false)[ CD ]
Line_43 $$ stat = null-->Line_45 $$ task.setTaskStatus(stat)[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_9 $$ String splits = line.get("SPLITS")[ CD ]
Line_38 $$ Pre21JobHistoryConstants.Values stat-->Line_43 $$ stat = null[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_7 $$ String status = line.get("TASK_STATUS")[ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_11 $$ boolean taskAlreadyLogged = task != null[ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_38 $$ Pre21JobHistoryConstants.Values stat[ CD ]
Line_2 $$ private void processTaskLine(ParsedLine line) -->Line_5 $$ String taskType = line.get("TASK_TYPE")[ FD ]
Line_10 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_12 $$ if (task == null) [ FD ]
Line_19 $$ locations = new ArrayList<LoggedLocation>()-->Line_28 $$ task.setPreferredLocations(locations)[ FD ]
Line_16 $$ ArrayList<LoggedLocation> locations = null-->Line_25 $$ locations.add(node.makeLoggedLocation())[ FD ]
Line_4 $$ String taskID = line.get("TASKID")-->Line_30 $$ task.setTaskID(taskID)[ FD ]
Line_17 $$ StringTokenizer tok = new StringTokenizer(splits, ",", false)-->Line_18 $$ if (tok.countTokens() <= MAXIMUM_PREFERRED_LOCATIONS) [ FD ]
Line_10 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_58 $$ vec.add(task)[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_4 $$ String taskID = line.get("TASKID")[ CD ]
Line_50 $$ typ = null-->Line_52 $$ if (typ == null) [ FD ]
Line_47 $$ typ = taskType == null ? null : Pre21JobHistoryConstants.Values.valueOf(taskType)-->Line_55 $$ task.setTaskType(typ)[ FD ]
Line_21 $$ while (tok.hasMoreTokens()) -->Line_22 $$ String nextSplit = tok.nextToken()[ CD ]
Line_7 $$ String status = line.get("TASK_STATUS")-->Line_40 $$ stat = status == null ? null : Pre21JobHistoryConstants.Values.valueOf(status)[ FD ]
Line_13 $$ task = new LoggedTask()-->Line_58 $$ vec.add(task)[ FD ]
Line_17 $$ StringTokenizer tok = new StringTokenizer(splits, ",", false)-->Line_21 $$ while (tok.hasMoreTokens()) [ FD ]
Line_10 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_45 $$ task.setTaskStatus(stat)[ FD ]
Line_2 $$ private void processTaskLine(ParsedLine line) -->Line_3 $$ if (jobBeingTraced != null) [ CD ]
Line_19 $$ locations = new ArrayList<LoggedLocation>()-->Line_25 $$ locations.add(node.makeLoggedLocation())[ FD ]
Line_38 $$ Pre21JobHistoryConstants.Values stat-->Line_45 $$ task.setTaskStatus(stat)[ FD ]
Line_2 $$ private void processTaskLine(ParsedLine line) -->Line_4 $$ String taskID = line.get("TASKID")[ FD ]
Line_37 $$ Pre21JobHistoryConstants.Values typ-->Line_55 $$ task.setTaskType(typ)[ FD ]
Line_13 $$ task = new LoggedTask()-->Line_30 $$ task.setTaskID(taskID)[ FD ]
Line_16 $$ ArrayList<LoggedLocation> locations = null-->Line_19 $$ locations = new ArrayList<LoggedLocation>()[ FD ]
Line_13 $$ task = new LoggedTask()-->Line_35 $$ task.setFinishTime(Long.parseLong(finishTime))[ FD ]
Line_10 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_55 $$ task.setTaskType(typ)[ FD ]
Line_2 $$ private void processTaskLine(ParsedLine line) -->Line_9 $$ String splits = line.get("SPLITS")[ FD ]
Line_6 $$ String startTime = line.get("START_TIME")-->Line_31 $$ if (startTime != null) [ FD ]
Line_37 $$ Pre21JobHistoryConstants.Values typ-->Line_50 $$ typ = null[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_15 $$ if (splits != null) [ CD ]
Line_11 $$ boolean taskAlreadyLogged = task != null-->Line_57 $$ if (!taskAlreadyLogged) [ FD ]
Line_40 $$ stat = status == null ? null : Pre21JobHistoryConstants.Values.valueOf(status)-->Line_43 $$ stat = null[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_56 $$ List<LoggedTask> vec = typ == Pre21JobHistoryConstants.Values.MAP ? jobBeingTraced.getMapTasks() : typ == Pre21JobHistoryConstants.Values.REDUCE ? jobBeingTraced.getReduceTasks() : jobBeingTraced.getOtherTasks()[ CD ]
Line_38 $$ Pre21JobHistoryConstants.Values stat-->Line_40 $$ stat = status == null ? null : Pre21JobHistoryConstants.Values.valueOf(status)[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_5 $$ String taskType = line.get("TASK_TYPE")[ CD ]
Line_2 $$ private void processTaskLine(ParsedLine line) -->Line_6 $$ String startTime = line.get("START_TIME")[ FD ]
Line_17 $$ StringTokenizer tok = new StringTokenizer(splits, ",", false)-->Line_22 $$ String nextSplit = tok.nextToken()[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_37 $$ Pre21JobHistoryConstants.Values typ[ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_12 $$ if (task == null) [ CD ]
Line_4 $$ String taskID = line.get("TASKID")-->Line_10 $$ LoggedTask task = tasksInCurrentJob.get(taskID)[ FD ]
Line_57 $$ if (!taskAlreadyLogged) -->Line_58 $$ vec.add(task)[ CD ]
Line_5 $$ String taskType = line.get("TASK_TYPE")-->Line_47 $$ typ = taskType == null ? null : Pre21JobHistoryConstants.Values.valueOf(taskType)[ FD ]
Line_22 $$ String nextSplit = tok.nextToken()-->Line_23 $$ ParsedHost node = getAndRecordParsedHost(nextSplit)[ FD ]
Line_50 $$ typ = null-->Line_55 $$ task.setTaskType(typ)[ FD ]
Line_18 $$ if (tok.countTokens() <= MAXIMUM_PREFERRED_LOCATIONS) -->Line_19 $$ locations = new ArrayList<LoggedLocation>()[ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_31 $$ if (startTime != null) [ CD ]
Line_8 $$ String finishTime = line.get("FINISH_TIME")-->Line_35 $$ task.setFinishTime(Long.parseLong(finishTime))[ FD ]
Line_10 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_30 $$ task.setTaskID(taskID)[ FD ]
Line_31 $$ if (startTime != null) -->Line_32 $$ task.setStartTime(Long.parseLong(startTime))[ CD ]
Line_40 $$ stat = status == null ? null : Pre21JobHistoryConstants.Values.valueOf(status)-->Line_45 $$ task.setTaskStatus(stat)[ FD ]
Line_24 $$ if (locations != null && node != null) -->Line_25 $$ locations.add(node.makeLoggedLocation())[ CD ]
Line_15 $$ if (splits != null) -->Line_16 $$ ArrayList<LoggedLocation> locations = null[ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_34 $$ if (finishTime != null) [ CD ]
Line_52 $$ if (typ == null) -->Line_53 $$ return[ CD ]
Line_12 $$ if (task == null) -->Line_13 $$ task = new LoggedTask()[ CD ]
Line_13 $$ task = new LoggedTask()-->Line_45 $$ task.setTaskStatus(stat)[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_55 $$ task.setTaskType(typ)[ CD ]
Line_37 $$ Pre21JobHistoryConstants.Values typ-->Line_47 $$ typ = taskType == null ? null : Pre21JobHistoryConstants.Values.valueOf(taskType)[ FD ]
Line_21 $$ while (tok.hasMoreTokens()) -->Line_24 $$ if (locations != null && node != null) [ CD ]
Line_13 $$ task = new LoggedTask()-->Line_32 $$ task.setStartTime(Long.parseLong(startTime))[ FD ]
Line_9 $$ String splits = line.get("SPLITS")-->Line_15 $$ if (splits != null) [ FD ]
Line_6 $$ String startTime = line.get("START_TIME")-->Line_32 $$ task.setStartTime(Long.parseLong(startTime))[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_57 $$ if (!taskAlreadyLogged) [ CD ]
Line_2 $$ private void processTaskLine(ParsedLine line) -->Line_8 $$ String finishTime = line.get("FINISH_TIME")[ FD ]
Line_23 $$ ParsedHost node = getAndRecordParsedHost(nextSplit)-->Line_25 $$ locations.add(node.makeLoggedLocation())[ FD ]
Line_4 $$ String taskID = line.get("TASKID")-->Line_59 $$ tasksInCurrentJob.put(taskID, task)[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_45 $$ task.setTaskStatus(stat)[ CD ]
Line_15 $$ if (splits != null) -->Line_28 $$ task.setPreferredLocations(locations)[ CD ]
Line_13 $$ task = new LoggedTask()-->Line_55 $$ task.setTaskType(typ)[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_52 $$ if (typ == null) [ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_30 $$ task.setTaskID(taskID)[ CD ]
Line_8 $$ String finishTime = line.get("FINISH_TIME")-->Line_34 $$ if (finishTime != null) [ FD ]
Line_10 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_59 $$ tasksInCurrentJob.put(taskID, task)[ FD ]
Line_10 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_32 $$ task.setStartTime(Long.parseLong(startTime))[ FD ]
Line_57 $$ if (!taskAlreadyLogged) -->Line_59 $$ tasksInCurrentJob.put(taskID, task)[ CD ]
Line_13 $$ task = new LoggedTask()-->Line_28 $$ task.setPreferredLocations(locations)[ FD ]
Line_47 $$ typ = taskType == null ? null : Pre21JobHistoryConstants.Values.valueOf(taskType)-->Line_52 $$ if (typ == null) [ FD ]
Line_21 $$ while (tok.hasMoreTokens()) -->Line_23 $$ ParsedHost node = getAndRecordParsedHost(nextSplit)[ CD ]
Line_47 $$ typ = taskType == null ? null : Pre21JobHistoryConstants.Values.valueOf(taskType)-->Line_50 $$ typ = null[ FD ]
Line_2 $$ private void processTaskLine(ParsedLine line) -->Line_7 $$ String status = line.get("TASK_STATUS")[ FD ]
Line_56 $$ List<LoggedTask> vec = typ == Pre21JobHistoryConstants.Values.MAP ? jobBeingTraced.getMapTasks() : typ == Pre21JobHistoryConstants.Values.REDUCE ? jobBeingTraced.getReduceTasks() : jobBeingTraced.getOtherTasks()-->Line_58 $$ vec.add(task)[ FD ]
Line_13 $$ task = new LoggedTask()-->Line_59 $$ tasksInCurrentJob.put(taskID, task)[ FD ]
Line_34 $$ if (finishTime != null) -->Line_35 $$ task.setFinishTime(Long.parseLong(finishTime))[ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_10 $$ LoggedTask task = tasksInCurrentJob.get(taskID)[ CD ]
Line_16 $$ ArrayList<LoggedLocation> locations = null-->Line_28 $$ task.setPreferredLocations(locations)[ FD ]
Line_10 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_35 $$ task.setFinishTime(Long.parseLong(finishTime))[ FD ]
Line_15 $$ if (splits != null) -->Line_21 $$ while (tok.hasMoreTokens()) [ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_6 $$ String startTime = line.get("START_TIME")[ CD ]
Line_10 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_13 $$ task = new LoggedTask()[ FD ]
Line_15 $$ if (splits != null) -->Line_18 $$ if (tok.countTokens() <= MAXIMUM_PREFERRED_LOCATIONS) [ CD ]
Line_10 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_28 $$ task.setPreferredLocations(locations)[ FD ]
Line_37 $$ Pre21JobHistoryConstants.Values typ-->Line_52 $$ if (typ == null) [ FD ]
