Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_19 $$ throw new IllegalArgumentException(error(ctx) + "Invalid double constant [" + svalue + "].")[ FD ]
Line_32 $$ svalue += ctx.HEX().getText()-->Line_62 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_10 $$ numericemd.preConst = Float.parseFloat(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_31 $$ if (ctx.HEX() != null) -->Line_32 $$ svalue += ctx.HEX().getText()[ CD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_56 $$ throw new IllegalArgumentException(error(ctx) + "Invalid long constant [" + svalue + "].")[ FD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_54 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_3 $$ final ExpressionMetadata numericemd = adapter.getExpressionMetadata(ctx)[ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_12 $$ throw new IllegalArgumentException(error(ctx) + "Invalid float constant [" + svalue + "].")[ FD ]
Line_25 $$ if (ctx.OCTAL() != null) -->Line_27 $$ radix = 8[ CD ]
Line_5 $$ if (ctx.DECIMAL() != null) -->Line_7 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ CD ]
Line_69 $$ if (sort == Sort.SHORT && value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) -->Line_71 $$ numericemd.preConst = (short) value[ CD ]
Line_69 $$ if (sort == Sort.SHORT && value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) -->Line_73 $$ numericemd.from = definition.intType[ CD ]
Line_33 $$ radix = 16-->Line_54 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_32 $$ svalue += ctx.HEX().getText()[ FD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_40 $$ numericemd.preConst = Double.parseDouble(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_29 $$ svalue += ctx.INTEGER().getText()-->Line_37 $$ if (svalue.endsWith("d") || svalue.endsWith("D")) [ FD ]
Line_27 $$ radix = 8-->Line_33 $$ radix = 16[ FD ]
Line_26 $$ svalue += ctx.OCTAL().getText()-->Line_47 $$ numericemd.preConst = Float.parseFloat(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_32 $$ svalue += ctx.HEX().getText()-->Line_47 $$ numericemd.preConst = Float.parseFloat(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_31 $$ if (ctx.HEX() != null) [ FD ]
Line_27 $$ radix = 8-->Line_54 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_63 $$ if (sort == Sort.BYTE && value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) -->Line_66 $$ if (sort == Sort.CHAR && value >= Character.MIN_VALUE && value <= Character.MAX_VALUE) [ CD ]
Line_26 $$ svalue += ctx.OCTAL().getText()-->Line_32 $$ svalue += ctx.HEX().getText()[ FD ]
Line_32 $$ svalue += ctx.HEX().getText()-->Line_54 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_47 $$ numericemd.preConst = Float.parseFloat(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_29 $$ svalue += ctx.INTEGER().getText()[ FD ]
Line_27 $$ radix = 8-->Line_30 $$ radix = 10[ FD ]
Line_30 $$ radix = 10-->Line_62 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_77 $$ throw new IllegalArgumentException(error(ctx) + "Invalid int constant [" + svalue + "].")[ FD ]
Line_26 $$ svalue += ctx.OCTAL().getText()-->Line_37 $$ if (svalue.endsWith("d") || svalue.endsWith("D")) [ FD ]
Line_29 $$ svalue += ctx.INTEGER().getText()-->Line_32 $$ svalue += ctx.HEX().getText()[ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_29 $$ svalue += ctx.INTEGER().getText()[ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_25 $$ if (ctx.OCTAL() != null) [ FD ]
Line_28 $$ if (ctx.INTEGER() != null) -->Line_29 $$ svalue += ctx.INTEGER().getText()[ CD ]
Line_32 $$ svalue += ctx.HEX().getText()-->Line_40 $$ numericemd.preConst = Double.parseDouble(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_44 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) -->Line_51 $$ if (svalue.endsWith("l") || svalue.endsWith("L")) [ CD ]
Line_24 $$ int radix-->Line_54 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_25 $$ if (ctx.OCTAL() != null) -->Line_26 $$ svalue += ctx.OCTAL().getText()[ CD ]
Line_26 $$ svalue += ctx.OCTAL().getText()-->Line_40 $$ numericemd.preConst = Double.parseDouble(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_29 $$ svalue += ctx.INTEGER().getText()-->Line_62 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_24 $$ int radix-->Line_30 $$ radix = 10[ FD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_62 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_3 $$ final ExpressionMetadata numericemd = adapter.getExpressionMetadata(ctx)[ CD ]
Line_29 $$ svalue += ctx.INTEGER().getText()-->Line_40 $$ numericemd.preConst = Double.parseDouble(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_29 $$ svalue += ctx.INTEGER().getText()-->Line_44 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ FD ]
Line_29 $$ svalue += ctx.INTEGER().getText()-->Line_47 $$ numericemd.preConst = Float.parseFloat(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_63 $$ if (sort == Sort.BYTE && value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) -->Line_64 $$ numericemd.from = definition.byteType[ CD ]
Line_29 $$ svalue += ctx.INTEGER().getText()-->Line_51 $$ if (svalue.endsWith("l") || svalue.endsWith("L")) [ FD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_44 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_4 $$ final boolean negate = ctx.parent instanceof UnaryContext && ((UnaryContext) ctx.parent).SUB() != null[ CD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_51 $$ if (svalue.endsWith("l") || svalue.endsWith("L")) [ FD ]
Line_27 $$ radix = 8-->Line_62 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_32 $$ svalue += ctx.HEX().getText()-->Line_51 $$ if (svalue.endsWith("l") || svalue.endsWith("L")) [ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_5 $$ if (ctx.DECIMAL() != null) [ FD ]
Line_5 $$ if (ctx.DECIMAL() != null) -->Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()[ CD ]
Line_26 $$ svalue += ctx.OCTAL().getText()-->Line_54 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_24 $$ int radix-->Line_62 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_66 $$ if (sort == Sort.CHAR && value >= Character.MIN_VALUE && value <= Character.MAX_VALUE) -->Line_67 $$ numericemd.from = definition.charType[ CD ]
Line_66 $$ if (sort == Sort.CHAR && value >= Character.MIN_VALUE && value <= Character.MAX_VALUE) -->Line_68 $$ numericemd.preConst = (char) value[ CD ]
Line_28 $$ if (ctx.INTEGER() != null) -->Line_30 $$ radix = 10[ CD ]
Line_32 $$ svalue += ctx.HEX().getText()-->Line_37 $$ if (svalue.endsWith("d") || svalue.endsWith("D")) [ FD ]
Line_26 $$ svalue += ctx.OCTAL().getText()-->Line_62 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_42 $$ throw new IllegalArgumentException(error(ctx) + "Invalid float constant [" + svalue + "].")[ FD ]
Line_5 $$ if (ctx.DECIMAL() != null) -->Line_37 $$ if (svalue.endsWith("d") || svalue.endsWith("D")) [ CD ]
Line_26 $$ svalue += ctx.OCTAL().getText()-->Line_29 $$ svalue += ctx.INTEGER().getText()[ FD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_17 $$ numericemd.preConst = Double.parseDouble(svalue)[ FD ]
Line_62 $$ final int value = Integer.parseInt(svalue, radix)-->Line_74 $$ numericemd.preConst = value[ FD ]
Line_37 $$ if (svalue.endsWith("d") || svalue.endsWith("D")) -->Line_44 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ CD ]
Line_25 $$ if (ctx.OCTAL() != null) -->Line_28 $$ if (ctx.INTEGER() != null) [ CD ]
Line_32 $$ svalue += ctx.HEX().getText()-->Line_44 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ FD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_26 $$ svalue += ctx.OCTAL().getText()[ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()[ FD ]
Line_28 $$ if (ctx.INTEGER() != null) -->Line_31 $$ if (ctx.HEX() != null) [ CD ]
Line_30 $$ radix = 10-->Line_54 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_66 $$ if (sort == Sort.CHAR && value >= Character.MIN_VALUE && value <= Character.MAX_VALUE) -->Line_69 $$ if (sort == Sort.SHORT && value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) [ CD ]
Line_69 $$ if (sort == Sort.SHORT && value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) -->Line_70 $$ numericemd.from = definition.shortType[ CD ]
Line_24 $$ int radix-->Line_27 $$ radix = 8[ FD ]
Line_29 $$ svalue += ctx.INTEGER().getText()-->Line_54 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_5 $$ if (ctx.DECIMAL() != null) [ CD ]
Line_31 $$ if (ctx.HEX() != null) -->Line_33 $$ radix = 16[ CD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_32 $$ svalue += ctx.HEX().getText()[ FD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_7 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ FD ]
Line_69 $$ if (sort == Sort.SHORT && value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) -->Line_74 $$ numericemd.preConst = value[ CD ]
Line_5 $$ if (ctx.DECIMAL() != null) -->Line_24 $$ int radix[ CD ]
Line_30 $$ radix = 10-->Line_33 $$ radix = 16[ FD ]
Line_24 $$ int radix-->Line_33 $$ radix = 16[ FD ]
Line_63 $$ if (sort == Sort.BYTE && value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) -->Line_65 $$ numericemd.preConst = (byte) value[ CD ]
Line_5 $$ if (ctx.DECIMAL() != null) -->Line_25 $$ if (ctx.OCTAL() != null) [ CD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_49 $$ throw new IllegalArgumentException(error(ctx) + "Invalid float constant [" + svalue + "].")[ FD ]
Line_33 $$ radix = 16-->Line_62 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_26 $$ svalue += ctx.OCTAL().getText()[ FD ]
Line_26 $$ svalue += ctx.OCTAL().getText()-->Line_44 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ FD ]
Line_6 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_37 $$ if (svalue.endsWith("d") || svalue.endsWith("D")) [ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_35 $$ throw new IllegalStateException(error(ctx) + "Unexpected parser state.")[ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_28 $$ if (ctx.INTEGER() != null) [ FD ]
Line_2 $$ public Void visitNumeric(final NumericContext ctx) -->Line_81 $$ return null[ CD ]
Line_26 $$ svalue += ctx.OCTAL().getText()-->Line_51 $$ if (svalue.endsWith("l") || svalue.endsWith("L")) [ FD ]
