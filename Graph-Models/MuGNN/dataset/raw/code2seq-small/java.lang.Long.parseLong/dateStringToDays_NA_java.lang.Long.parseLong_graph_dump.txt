Line_17 $$ long millis = parsed.getMillis()-->Line_18 $$ if (millis < minSupportedDateMillis)[ FD ]
Line_2 $$ public static int dateStringToDays(String source) throws MarshalException -->Line_19 $$ throw new MarshalException(String.format("Input date %s is less than min supported date %s", source, new LocalDate(minSupportedDateMillis).toString()))[ FD ]
Line_16 $$ DateTime parsed = formatter.parseDateTime(source)-->Line_17 $$ long millis = parsed.getMillis()[ FD ]
Line_2 $$ public static int dateStringToDays(String source) throws MarshalException -->Line_24 $$ throw new MarshalException(String.format("Unable to coerce '%s' to a formatted date (long)", source), e1)[ FD ]
Line_17 $$ long millis = parsed.getMillis()-->Line_20 $$ if (millis > maxSupportedDateMillis)[ FD ]
Line_2 $$ public static int dateStringToDays(String source) throws MarshalException -->Line_3 $$ if (rawPattern.matcher(source).matches()) [ CD ]
Line_5 $$ long result = Long.parseLong(source)-->Line_9 $$ result -= byteOrderShift[ FD ]
Line_8 $$ if (result >= Integer.MAX_VALUE)-->Line_9 $$ result -= byteOrderShift[ CD ]
Line_2 $$ public static int dateStringToDays(String source) throws MarshalException -->Line_16 $$ DateTime parsed = formatter.parseDateTime(source)[ FD ]
Line_2 $$ public static int dateStringToDays(String source) throws MarshalException -->Line_3 $$ if (rawPattern.matcher(source).matches()) [ FD ]
Line_2 $$ public static int dateStringToDays(String source) throws MarshalException -->Line_21 $$ throw new MarshalException(String.format("Input date %s is greater than max supported date %s", source, new LocalDate(maxSupportedDateMillis).toString()))[ FD ]
Line_17 $$ long millis = parsed.getMillis()-->Line_22 $$ return timeInMillisToDay(millis)[ FD ]
Line_2 $$ public static int dateStringToDays(String source) throws MarshalException -->Line_12 $$ throw new MarshalException(String.format("Unable to make unsigned int (for date) from: '%s'", source), e)[ FD ]
Line_2 $$ public static int dateStringToDays(String source) throws MarshalException -->Line_5 $$ long result = Long.parseLong(source)[ FD ]
Line_5 $$ long result = Long.parseLong(source)-->Line_8 $$ if (result >= Integer.MAX_VALUE)[ FD ]
