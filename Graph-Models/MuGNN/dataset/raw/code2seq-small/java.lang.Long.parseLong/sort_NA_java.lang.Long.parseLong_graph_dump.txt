Line_18 $$ if (limit.isPresent() && !limit.get().equalsIgnoreCase("all")) -->Line_21 $$ planNode = new SortNode(idAllocator.getNextId(), subPlan.getRoot(), orderBySymbols.build(), orderings)[ CD ]
Line_17 $$ PlanNode planNode-->Line_21 $$ planNode = new SortNode(idAllocator.getNextId(), subPlan.getRoot(), orderBySymbols.build(), orderings)[ FD ]
Line_10 $$ Symbol symbol = subPlan.translate(fieldOrExpression)-->Line_14 $$ orderings.put(symbol, toSortOrder(sortItem))[ FD ]
Line_7 $$ ImmutableList.Builder<Symbol> orderBySymbols = ImmutableList.builder()-->Line_13 $$ orderBySymbols.add(symbol)[ FD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_6 $$ Iterator<SortItem> sortItems = orderBy.iterator()[ CD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_6 $$ Iterator<SortItem> sortItems = orderBy.iterator()[ FD ]
Line_18 $$ if (limit.isPresent() && !limit.get().equalsIgnoreCase("all")) -->Line_19 $$ planNode = new TopNNode(idAllocator.getNextId(), subPlan.getRoot(), Long.parseLong(limit.get()), orderBySymbols.build(), orderings, false)[ CD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_19 $$ planNode = new TopNNode(idAllocator.getNextId(), subPlan.getRoot(), Long.parseLong(limit.get()), orderBySymbols.build(), orderings, false)[ FD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_17 $$ PlanNode planNode[ CD ]
Line_11 $$ SortItem sortItem = sortItems.next()-->Line_14 $$ orderings.put(symbol, toSortOrder(sortItem))[ FD ]
Line_17 $$ PlanNode planNode-->Line_19 $$ planNode = new TopNNode(idAllocator.getNextId(), subPlan.getRoot(), Long.parseLong(limit.get()), orderBySymbols.build(), orderings, false)[ FD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_3 $$ if (orderBy.isEmpty()) [ FD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_23 $$ return new PlanBuilder(subPlan.getTranslations(), planNode, subPlan.getSampleWeight())[ CD ]
Line_10 $$ Symbol symbol = subPlan.translate(fieldOrExpression)-->Line_13 $$ orderBySymbols.add(symbol)[ FD ]
Line_9 $$ for (FieldOrExpression fieldOrExpression : orderByExpressions) -->Line_10 $$ Symbol symbol = subPlan.translate(fieldOrExpression)[ FD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_8 $$ Map<Symbol, SortOrder> orderings = new HashMap<Symbol, SortOrder>()[ CD ]
Line_3 $$ if (orderBy.isEmpty()) -->Line_4 $$ return subPlan[ CD ]
Line_10 $$ Symbol symbol = subPlan.translate(fieldOrExpression)-->Line_12 $$ if (!orderings.containsKey(symbol)) [ FD ]
Line_8 $$ Map<Symbol, SortOrder> orderings = new HashMap<Symbol, SortOrder>()-->Line_14 $$ orderings.put(symbol, toSortOrder(sortItem))[ FD ]
Line_6 $$ Iterator<SortItem> sortItems = orderBy.iterator()-->Line_11 $$ SortItem sortItem = sortItems.next()[ FD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_10 $$ Symbol symbol = subPlan.translate(fieldOrExpression)[ FD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_18 $$ if (limit.isPresent() && !limit.get().equalsIgnoreCase("all")) [ FD ]
Line_7 $$ ImmutableList.Builder<Symbol> orderBySymbols = ImmutableList.builder()-->Line_19 $$ planNode = new TopNNode(idAllocator.getNextId(), subPlan.getRoot(), Long.parseLong(limit.get()), orderBySymbols.build(), orderings, false)[ FD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_18 $$ if (limit.isPresent() && !limit.get().equalsIgnoreCase("all")) [ CD ]
Line_8 $$ Map<Symbol, SortOrder> orderings = new HashMap<Symbol, SortOrder>()-->Line_12 $$ if (!orderings.containsKey(symbol)) [ FD ]
Line_19 $$ planNode = new TopNNode(idAllocator.getNextId(), subPlan.getRoot(), Long.parseLong(limit.get()), orderBySymbols.build(), orderings, false)-->Line_21 $$ planNode = new SortNode(idAllocator.getNextId(), subPlan.getRoot(), orderBySymbols.build(), orderings)[ FD ]
Line_12 $$ if (!orderings.containsKey(symbol)) -->Line_13 $$ orderBySymbols.add(symbol)[ CD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_7 $$ ImmutableList.Builder<Symbol> orderBySymbols = ImmutableList.builder()[ CD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_21 $$ planNode = new SortNode(idAllocator.getNextId(), subPlan.getRoot(), orderBySymbols.build(), orderings)[ FD ]
Line_12 $$ if (!orderings.containsKey(symbol)) -->Line_14 $$ orderings.put(symbol, toSortOrder(sortItem))[ CD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_23 $$ return new PlanBuilder(subPlan.getTranslations(), planNode, subPlan.getSampleWeight())[ FD ]
Line_7 $$ ImmutableList.Builder<Symbol> orderBySymbols = ImmutableList.builder()-->Line_21 $$ planNode = new SortNode(idAllocator.getNextId(), subPlan.getRoot(), orderBySymbols.build(), orderings)[ FD ]
Line_2 $$ private PlanBuilder sort(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit, List<FieldOrExpression> orderByExpressions) -->Line_3 $$ if (orderBy.isEmpty()) [ CD ]
