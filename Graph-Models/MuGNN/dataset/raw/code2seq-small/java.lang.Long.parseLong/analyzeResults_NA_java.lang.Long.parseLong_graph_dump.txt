Line_29 $$ if (attr.endsWith(":totalTimeTPmS")) -->Line_30 $$ totalTimeTPmS = Long.parseLong(tokens.nextToken())[ CD ]
Line_24 $$ String attr = tokens.nextToken()-->Line_25 $$ if (attr.endsWith(":totalTimeAL1")) [ FD ]
Line_43 $$ double avgLatency1 = (double) totalTimeAL1 / successfulFileOps-->Line_56 $$ resultALLine1 = "                    Avg Lat (ms): Open: " + avgLatency1[ FD ]
Line_5 $$ DataInputStream in-->Line_6 $$ in = new DataInputStream(fs.open(reduceFile))[ FD ]
Line_13 $$ long numOfExceptions = 0l-->Line_34 $$ numOfExceptions = Long.parseLong(tokens.nextToken())[ FD ]
Line_37 $$ if (attr.endsWith(":mapStartTimeTPmS")) -->Line_39 $$ if (attr.endsWith(":mapEndTimeTPmS")) [ CD ]
Line_47 $$ double AverageExecutionTime = (totalTimeTPmS == 0) ? (double) successfulFileOps : (double) totalTimeTPmS / successfulFileOps-->Line_50 $$ resultTPSLine2 = "Avg exec time (ms): Create/Write/Close: " + AverageExecutionTime[ FD ]
Line_60 $$ if (operation.equals(OP_RENAME)) -->Line_63 $$ resultALLine1 = "                  Avg Lat (ms): Rename: " + avgLatency1[ CD ]
Line_56 $$ resultALLine1 = "                    Avg Lat (ms): Open: " + avgLatency1-->Line_63 $$ resultALLine1 = "                  Avg Lat (ms): Rename: " + avgLatency1[ FD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_21 $$ String line[ CD ]
Line_43 $$ double avgLatency1 = (double) totalTimeAL1 / successfulFileOps-->Line_63 $$ resultALLine1 = "                  Avg Lat (ms): Rename: " + avgLatency1[ FD ]
Line_47 $$ double AverageExecutionTime = (totalTimeTPmS == 0) ? (double) successfulFileOps : (double) totalTimeTPmS / successfulFileOps-->Line_55 $$ resultTPSLine2 = "         Avg Exec time (ms): Open/Read: " + AverageExecutionTime[ FD ]
Line_7 $$ BufferedReader lines-->Line_8 $$ lines = new BufferedReader(new InputStreamReader(in))[ FD ]
Line_48 $$ if (operation.equals(OP_CREATE_WRITE)) -->Line_51 $$ resultALLine1 = "            Avg Lat (ms): Create/Write: " + avgLatency1[ CD ]
Line_47 $$ double AverageExecutionTime = (totalTimeTPmS == 0) ? (double) successfulFileOps : (double) totalTimeTPmS / successfulFileOps-->Line_62 $$ resultTPSLine2 = "            Avg Exec time (ms): Rename: " + AverageExecutionTime[ FD ]
Line_31 $$ if (attr.endsWith(":latemaps")) -->Line_32 $$ lateMaps = Long.parseLong(tokens.nextToken())[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_48 $$ if (operation.equals(OP_CREATE_WRITE)) [ CD ]
Line_18 $$ String resultTPSLine2 = null-->Line_55 $$ resultTPSLine2 = "         Avg Exec time (ms): Open/Read: " + AverageExecutionTime[ FD ]
Line_4 $$ Path reduceFile = new Path(new Path(baseDir, OUTPUT_DIR_NAME), "part-00000")-->Line_6 $$ in = new DataInputStream(fs.open(reduceFile))[ FD ]
Line_53 $$ if (operation.equals(OP_OPEN_READ)) -->Line_60 $$ if (operation.equals(OP_RENAME)) [ CD ]
Line_51 $$ resultALLine1 = "            Avg Lat (ms): Create/Write: " + avgLatency1-->Line_56 $$ resultALLine1 = "                    Avg Lat (ms): Open: " + avgLatency1[ FD ]
Line_35 $$ if (attr.endsWith(":successfulFileOps")) -->Line_36 $$ successfulFileOps = Long.parseLong(tokens.nextToken())[ CD ]
Line_21 $$ String line-->Line_22 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_24 $$ String attr = tokens.nextToken()-->Line_27 $$ if (attr.endsWith(":totalTimeAL2")) [ FD ]
Line_48 $$ if (operation.equals(OP_CREATE_WRITE)) -->Line_53 $$ if (operation.equals(OP_OPEN_READ)) [ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_13 $$ long numOfExceptions = 0l[ CD ]
Line_24 $$ String attr = tokens.nextToken()-->Line_37 $$ if (attr.endsWith(":mapStartTimeTPmS")) [ FD ]
Line_23 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%;")-->Line_30 $$ totalTimeTPmS = Long.parseLong(tokens.nextToken())[ FD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_6 $$ in = new DataInputStream(fs.open(reduceFile))[ CD ]
Line_53 $$ if (operation.equals(OP_OPEN_READ)) -->Line_57 $$ if (readFileAfterOpen) [ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_5 $$ DataInputStream in[ CD ]
Line_62 $$ resultTPSLine2 = "            Avg Exec time (ms): Rename: " + AverageExecutionTime-->Line_66 $$ resultTPSLine2 = "            Avg Exec time (ms): Delete: " + AverageExecutionTime[ FD ]
Line_55 $$ resultTPSLine2 = "         Avg Exec time (ms): Open/Read: " + AverageExecutionTime-->Line_62 $$ resultTPSLine2 = "            Avg Exec time (ms): Rename: " + AverageExecutionTime[ FD ]
Line_11 $$ long totalTimeTPmS = 0l-->Line_30 $$ totalTimeTPmS = Long.parseLong(tokens.nextToken())[ FD ]
Line_70 $$ PrintStream res = new PrintStream(new FileOutputStream(new File(DEFAULT_RES_FILE_NAME), true))-->Line_73 $$ res.println(resultLines[i])[ FD ]
Line_24 $$ String attr = tokens.nextToken()-->Line_39 $$ if (attr.endsWith(":mapEndTimeTPmS")) [ FD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_18 $$ String resultTPSLine2 = null[ CD ]
Line_39 $$ if (attr.endsWith(":mapEndTimeTPmS")) -->Line_40 $$ mapEndTimeTPmS = Long.parseLong(tokens.nextToken())[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_22 $$ while ((line = lines.readLine()) != null) [ CD ]
Line_35 $$ if (attr.endsWith(":successfulFileOps")) -->Line_37 $$ if (attr.endsWith(":mapStartTimeTPmS")) [ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_4 $$ Path reduceFile = new Path(new Path(baseDir, OUTPUT_DIR_NAME), "part-00000")[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_46 $$ double totalTimeTPS = (longestMapTimeTPmS == 0) ? (1000 * successfulFileOps) : (double) (1000 * successfulFileOps) / longestMapTimeTPmS[ CD ]
Line_60 $$ if (operation.equals(OP_RENAME)) -->Line_64 $$ if (operation.equals(OP_DELETE)) [ CD ]
Line_23 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%;")-->Line_32 $$ lateMaps = Long.parseLong(tokens.nextToken())[ FD ]
Line_55 $$ resultTPSLine2 = "         Avg Exec time (ms): Open/Read: " + AverageExecutionTime-->Line_66 $$ resultTPSLine2 = "            Avg Exec time (ms): Delete: " + AverageExecutionTime[ FD ]
Line_64 $$ if (operation.equals(OP_DELETE)) -->Line_67 $$ resultALLine1 = "                  Avg Lat (ms): Delete: " + avgLatency1[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_19 $$ String resultALLine1 = null[ CD ]
Line_24 $$ String attr = tokens.nextToken()-->Line_35 $$ if (attr.endsWith(":successfulFileOps")) [ FD ]
Line_19 $$ String resultALLine1 = null-->Line_51 $$ resultALLine1 = "            Avg Lat (ms): Create/Write: " + avgLatency1[ FD ]
Line_53 $$ if (operation.equals(OP_OPEN_READ)) -->Line_55 $$ resultTPSLine2 = "         Avg Exec time (ms): Open/Read: " + AverageExecutionTime[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_70 $$ PrintStream res = new PrintStream(new FileOutputStream(new File(DEFAULT_RES_FILE_NAME), true))[ CD ]
Line_71 $$ for (int i = 0; i < resultLines.length; i++) -->Line_72 $$ LOG.info(resultLines[i])[ CD ]
Line_24 $$ String attr = tokens.nextToken()-->Line_29 $$ if (attr.endsWith(":totalTimeTPmS")) [ FD ]
Line_20 $$ String resultALLine2 = null-->Line_58 $$ resultALLine2 = "                  Avg Lat (ms): Read: " + avgLatency2[ FD ]
Line_27 $$ if (attr.endsWith(":totalTimeAL2")) -->Line_28 $$ totalTimeAL2 = Long.parseLong(tokens.nextToken())[ CD ]
Line_23 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%;")-->Line_36 $$ successfulFileOps = Long.parseLong(tokens.nextToken())[ FD ]
Line_3 $$ final FileSystem fs = FileSystem.get(config)-->Line_6 $$ in = new DataInputStream(fs.open(reduceFile))[ FD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_9 $$ long totalTimeAL1 = 0l[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_3 $$ final FileSystem fs = FileSystem.get(config)[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_11 $$ long totalTimeTPmS = 0l[ CD ]
Line_33 $$ if (attr.endsWith(":numOfExceptions")) -->Line_34 $$ numOfExceptions = Long.parseLong(tokens.nextToken())[ CD ]
Line_23 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%;")-->Line_38 $$ mapStartTimeTPmS = Long.parseLong(tokens.nextToken())[ FD ]
Line_63 $$ resultALLine1 = "                  Avg Lat (ms): Rename: " + avgLatency1-->Line_67 $$ resultALLine1 = "                  Avg Lat (ms): Delete: " + avgLatency1[ FD ]
Line_22 $$ while ((line = lines.readLine()) != null) -->Line_24 $$ String attr = tokens.nextToken()[ CD ]
Line_52 $$ resultALLine2 = "                   Avg Lat (ms): Close: " + avgLatency2-->Line_58 $$ resultALLine2 = "                  Avg Lat (ms): Read: " + avgLatency2[ FD ]
Line_9 $$ long totalTimeAL1 = 0l-->Line_26 $$ totalTimeAL1 = Long.parseLong(tokens.nextToken())[ FD ]
Line_44 $$ double avgLatency2 = (double) totalTimeAL2 / successfulFileOps-->Line_52 $$ resultALLine2 = "                   Avg Lat (ms): Close: " + avgLatency2[ FD ]
Line_49 $$ resultTPSLine1 = "               TPS: Create/Write/Close: " + (int) (totalTimeTPS * 2)-->Line_61 $$ resultTPSLine1 = "                           TPS: Rename: " + (int) totalTimeTPS[ FD ]
Line_22 $$ while ((line = lines.readLine()) != null) -->Line_23 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%;")[ CD ]
Line_37 $$ if (attr.endsWith(":mapStartTimeTPmS")) -->Line_38 $$ mapStartTimeTPmS = Long.parseLong(tokens.nextToken())[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_7 $$ BufferedReader lines[ CD ]
Line_12 $$ long lateMaps = 0l-->Line_32 $$ lateMaps = Long.parseLong(tokens.nextToken())[ FD ]
Line_49 $$ resultTPSLine1 = "               TPS: Create/Write/Close: " + (int) (totalTimeTPS * 2)-->Line_65 $$ resultTPSLine1 = "                           TPS: Delete: " + (int) totalTimeTPS[ FD ]
Line_25 $$ if (attr.endsWith(":totalTimeAL1")) -->Line_26 $$ totalTimeAL1 = Long.parseLong(tokens.nextToken())[ CD ]
Line_19 $$ String resultALLine1 = null-->Line_63 $$ resultALLine1 = "                  Avg Lat (ms): Rename: " + avgLatency1[ FD ]
Line_10 $$ long totalTimeAL2 = 0l-->Line_28 $$ totalTimeAL2 = Long.parseLong(tokens.nextToken())[ FD ]
Line_64 $$ if (operation.equals(OP_DELETE)) -->Line_65 $$ resultTPSLine1 = "                           TPS: Delete: " + (int) totalTimeTPS[ CD ]
Line_24 $$ String attr = tokens.nextToken()-->Line_33 $$ if (attr.endsWith(":numOfExceptions")) [ FD ]
Line_23 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%;")-->Line_26 $$ totalTimeAL1 = Long.parseLong(tokens.nextToken())[ FD ]
Line_27 $$ if (attr.endsWith(":totalTimeAL2")) -->Line_29 $$ if (attr.endsWith(":totalTimeTPmS")) [ CD ]
Line_53 $$ if (operation.equals(OP_OPEN_READ)) -->Line_56 $$ resultALLine1 = "                    Avg Lat (ms): Open: " + avgLatency1[ CD ]
Line_33 $$ if (attr.endsWith(":numOfExceptions")) -->Line_35 $$ if (attr.endsWith(":successfulFileOps")) [ CD ]
Line_24 $$ String attr = tokens.nextToken()-->Line_31 $$ if (attr.endsWith(":latemaps")) [ FD ]
Line_23 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%;")-->Line_40 $$ mapEndTimeTPmS = Long.parseLong(tokens.nextToken())[ FD ]
Line_64 $$ if (operation.equals(OP_DELETE)) -->Line_66 $$ resultTPSLine2 = "            Avg Exec time (ms): Delete: " + AverageExecutionTime[ CD ]
Line_20 $$ String resultALLine2 = null-->Line_52 $$ resultALLine2 = "                   Avg Lat (ms): Close: " + avgLatency2[ FD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_16 $$ long mapEndTimeTPmS = 0l[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_17 $$ String resultTPSLine1 = null[ CD ]
Line_50 $$ resultTPSLine2 = "Avg exec time (ms): Create/Write/Close: " + AverageExecutionTime-->Line_66 $$ resultTPSLine2 = "            Avg Exec time (ms): Delete: " + AverageExecutionTime[ FD ]
Line_47 $$ double AverageExecutionTime = (totalTimeTPmS == 0) ? (double) successfulFileOps : (double) totalTimeTPmS / successfulFileOps-->Line_66 $$ resultTPSLine2 = "            Avg Exec time (ms): Delete: " + AverageExecutionTime[ FD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_15 $$ long mapStartTimeTPmS = 0l[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_47 $$ double AverageExecutionTime = (totalTimeTPmS == 0) ? (double) successfulFileOps : (double) totalTimeTPmS / successfulFileOps[ CD ]
Line_19 $$ String resultALLine1 = null-->Line_56 $$ resultALLine1 = "                    Avg Lat (ms): Open: " + avgLatency1[ FD ]
Line_44 $$ double avgLatency2 = (double) totalTimeAL2 / successfulFileOps-->Line_58 $$ resultALLine2 = "                  Avg Lat (ms): Read: " + avgLatency2[ FD ]
Line_51 $$ resultALLine1 = "            Avg Lat (ms): Create/Write: " + avgLatency1-->Line_63 $$ resultALLine1 = "                  Avg Lat (ms): Rename: " + avgLatency1[ FD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_69 $$ String[] resultLines = [ CD ]
Line_17 $$ String resultTPSLine1 = null-->Line_61 $$ resultTPSLine1 = "                           TPS: Rename: " + (int) totalTimeTPS[ FD ]
Line_23 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%;")-->Line_28 $$ totalTimeAL2 = Long.parseLong(tokens.nextToken())[ FD ]
Line_18 $$ String resultTPSLine2 = null-->Line_62 $$ resultTPSLine2 = "            Avg Exec time (ms): Rename: " + AverageExecutionTime[ FD ]
Line_61 $$ resultTPSLine1 = "                           TPS: Rename: " + (int) totalTimeTPS-->Line_65 $$ resultTPSLine1 = "                           TPS: Delete: " + (int) totalTimeTPS[ FD ]
Line_17 $$ String resultTPSLine1 = null-->Line_54 $$ resultTPSLine1 = "                        TPS: Open/Read: " + (int) totalTimeTPS[ FD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_12 $$ long lateMaps = 0l[ CD ]
Line_48 $$ if (operation.equals(OP_CREATE_WRITE)) -->Line_50 $$ resultTPSLine2 = "Avg exec time (ms): Create/Write/Close: " + AverageExecutionTime[ CD ]
Line_43 $$ double avgLatency1 = (double) totalTimeAL1 / successfulFileOps-->Line_51 $$ resultALLine1 = "            Avg Lat (ms): Create/Write: " + avgLatency1[ FD ]
Line_57 $$ if (readFileAfterOpen) -->Line_58 $$ resultALLine2 = "                  Avg Lat (ms): Read: " + avgLatency2[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_8 $$ lines = new BufferedReader(new InputStreamReader(in))[ CD ]
Line_50 $$ resultTPSLine2 = "Avg exec time (ms): Create/Write/Close: " + AverageExecutionTime-->Line_55 $$ resultTPSLine2 = "         Avg Exec time (ms): Open/Read: " + AverageExecutionTime[ FD ]
Line_60 $$ if (operation.equals(OP_RENAME)) -->Line_62 $$ resultTPSLine2 = "            Avg Exec time (ms): Rename: " + AverageExecutionTime[ CD ]
Line_49 $$ resultTPSLine1 = "               TPS: Create/Write/Close: " + (int) (totalTimeTPS * 2)-->Line_54 $$ resultTPSLine1 = "                        TPS: Open/Read: " + (int) totalTimeTPS[ FD ]
Line_15 $$ long mapStartTimeTPmS = 0l-->Line_38 $$ mapStartTimeTPmS = Long.parseLong(tokens.nextToken())[ FD ]
Line_17 $$ String resultTPSLine1 = null-->Line_49 $$ resultTPSLine1 = "               TPS: Create/Write/Close: " + (int) (totalTimeTPS * 2)[ FD ]
Line_18 $$ String resultTPSLine2 = null-->Line_50 $$ resultTPSLine2 = "Avg exec time (ms): Create/Write/Close: " + AverageExecutionTime[ FD ]
Line_8 $$ lines = new BufferedReader(new InputStreamReader(in))-->Line_22 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_14 $$ long successfulFileOps = 0l[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_45 $$ double longestMapTimeTPmS = (double) (mapEndTimeTPmS - mapStartTimeTPmS)[ CD ]
Line_17 $$ String resultTPSLine1 = null-->Line_65 $$ resultTPSLine1 = "                           TPS: Delete: " + (int) totalTimeTPS[ FD ]
Line_14 $$ long successfulFileOps = 0l-->Line_36 $$ successfulFileOps = Long.parseLong(tokens.nextToken())[ FD ]
Line_43 $$ double avgLatency1 = (double) totalTimeAL1 / successfulFileOps-->Line_67 $$ resultALLine1 = "                  Avg Lat (ms): Delete: " + avgLatency1[ FD ]
Line_16 $$ long mapEndTimeTPmS = 0l-->Line_40 $$ mapEndTimeTPmS = Long.parseLong(tokens.nextToken())[ FD ]
Line_71 $$ for (int i = 0; i < resultLines.length; i++) -->Line_73 $$ res.println(resultLines[i])[ CD ]
Line_53 $$ if (operation.equals(OP_OPEN_READ)) -->Line_54 $$ resultTPSLine1 = "                        TPS: Open/Read: " + (int) totalTimeTPS[ CD ]
Line_29 $$ if (attr.endsWith(":totalTimeTPmS")) -->Line_31 $$ if (attr.endsWith(":latemaps")) [ CD ]
Line_31 $$ if (attr.endsWith(":latemaps")) -->Line_33 $$ if (attr.endsWith(":numOfExceptions")) [ CD ]
Line_48 $$ if (operation.equals(OP_CREATE_WRITE)) -->Line_52 $$ resultALLine2 = "                   Avg Lat (ms): Close: " + avgLatency2[ CD ]
Line_51 $$ resultALLine1 = "            Avg Lat (ms): Create/Write: " + avgLatency1-->Line_67 $$ resultALLine1 = "                  Avg Lat (ms): Delete: " + avgLatency1[ FD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_71 $$ for (int i = 0; i < resultLines.length; i++) [ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_43 $$ double avgLatency1 = (double) totalTimeAL1 / successfulFileOps[ CD ]
Line_48 $$ if (operation.equals(OP_CREATE_WRITE)) -->Line_49 $$ resultTPSLine1 = "               TPS: Create/Write/Close: " + (int) (totalTimeTPS * 2)[ CD ]
Line_54 $$ resultTPSLine1 = "                        TPS: Open/Read: " + (int) totalTimeTPS-->Line_65 $$ resultTPSLine1 = "                           TPS: Delete: " + (int) totalTimeTPS[ FD ]
Line_54 $$ resultTPSLine1 = "                        TPS: Open/Read: " + (int) totalTimeTPS-->Line_61 $$ resultTPSLine1 = "                           TPS: Rename: " + (int) totalTimeTPS[ FD ]
Line_7 $$ BufferedReader lines-->Line_22 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_20 $$ String resultALLine2 = null[ CD ]
Line_60 $$ if (operation.equals(OP_RENAME)) -->Line_61 $$ resultTPSLine1 = "                           TPS: Rename: " + (int) totalTimeTPS[ CD ]
Line_25 $$ if (attr.endsWith(":totalTimeAL1")) -->Line_27 $$ if (attr.endsWith(":totalTimeAL2")) [ CD ]
Line_19 $$ String resultALLine1 = null-->Line_67 $$ resultALLine1 = "                  Avg Lat (ms): Delete: " + avgLatency1[ FD ]
Line_50 $$ resultTPSLine2 = "Avg exec time (ms): Create/Write/Close: " + AverageExecutionTime-->Line_62 $$ resultTPSLine2 = "            Avg Exec time (ms): Rename: " + AverageExecutionTime[ FD ]
Line_23 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%;")-->Line_24 $$ String attr = tokens.nextToken()[ FD ]
Line_23 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%;")-->Line_34 $$ numOfExceptions = Long.parseLong(tokens.nextToken())[ FD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_10 $$ long totalTimeAL2 = 0l[ CD ]
Line_2 $$ private static void analyzeResults() throws IOException -->Line_44 $$ double avgLatency2 = (double) totalTimeAL2 / successfulFileOps[ CD ]
Line_56 $$ resultALLine1 = "                    Avg Lat (ms): Open: " + avgLatency1-->Line_67 $$ resultALLine1 = "                  Avg Lat (ms): Delete: " + avgLatency1[ FD ]
Line_22 $$ while ((line = lines.readLine()) != null) -->Line_25 $$ if (attr.endsWith(":totalTimeAL1")) [ CD ]
Line_18 $$ String resultTPSLine2 = null-->Line_66 $$ resultTPSLine2 = "            Avg Exec time (ms): Delete: " + AverageExecutionTime[ FD ]
