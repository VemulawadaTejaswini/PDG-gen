Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_25 $$ assertEquals(maxFile.getLen(), Long.parseLong(matcher.group(1)))[ CD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_3 $$ StringWriter output = new StringWriter()[ CD ]
Line_8 $$ Matcher matcher = p.matcher(output.getBuffer())-->Line_10 $$ int totalFiles = Integer.parseInt(matcher.group(1))[ FD ]
Line_8 $$ Matcher matcher = p.matcher(output.getBuffer())-->Line_15 $$ int totalDirs = Integer.parseInt(matcher.group(1))[ FD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_22 $$ p = Pattern.compile("maxFileSize = (\\d+)\n")[ CD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_4 $$ PrintWriter o = new PrintWriter(output)[ CD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_15 $$ int totalDirs = Integer.parseInt(matcher.group(1))[ CD ]
Line_10 $$ int totalFiles = Integer.parseInt(matcher.group(1))-->Line_11 $$ assertEquals(NUM_DIRS * FILES_PER_DIR, totalFiles)[ FD ]
Line_7 $$ Pattern p = Pattern.compile("totalFiles = (\\d+)\n")-->Line_13 $$ matcher = p.matcher(output.getBuffer())[ FD ]
Line_8 $$ Matcher matcher = p.matcher(output.getBuffer())-->Line_13 $$ matcher = p.matcher(output.getBuffer())[ FD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_8 $$ Matcher matcher = p.matcher(output.getBuffer())[ CD ]
Line_3 $$ StringWriter output = new StringWriter()-->Line_8 $$ Matcher matcher = p.matcher(output.getBuffer())[ FD ]
Line_12 $$ p = Pattern.compile("totalDirectories = (\\d+)\n")-->Line_13 $$ matcher = p.matcher(output.getBuffer())[ FD ]
Line_7 $$ Pattern p = Pattern.compile("totalFiles = (\\d+)\n")-->Line_23 $$ matcher = p.matcher(output.getBuffer())[ FD ]
Line_17 $$ FileStatus maxFile = Collections.max(writtenFiles.values(), new Comparator<FileStatus>() -->Line_25 $$ assertEquals(maxFile.getLen(), Long.parseLong(matcher.group(1)))[ FD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_23 $$ matcher = p.matcher(output.getBuffer())[ CD ]
Line_8 $$ Matcher matcher = p.matcher(output.getBuffer())-->Line_25 $$ assertEquals(maxFile.getLen(), Long.parseLong(matcher.group(1)))[ FD ]
Line_3 $$ StringWriter output = new StringWriter()-->Line_13 $$ matcher = p.matcher(output.getBuffer())[ FD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_24 $$ assertTrue(matcher.find() && matcher.groupCount() == 1)[ CD ]
Line_13 $$ matcher = p.matcher(output.getBuffer())-->Line_25 $$ assertEquals(maxFile.getLen(), Long.parseLong(matcher.group(1)))[ FD ]
Line_7 $$ Pattern p = Pattern.compile("totalFiles = (\\d+)\n")-->Line_12 $$ p = Pattern.compile("totalDirectories = (\\d+)\n")[ FD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_6 $$ o.close()[ CD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_7 $$ Pattern p = Pattern.compile("totalFiles = (\\d+)\n")[ CD ]
Line_4 $$ PrintWriter o = new PrintWriter(output)-->Line_6 $$ o.close()[ FD ]
Line_8 $$ Matcher matcher = p.matcher(output.getBuffer())-->Line_9 $$ assertTrue(matcher.find() && matcher.groupCount() == 1)[ FD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_12 $$ p = Pattern.compile("totalDirectories = (\\d+)\n")[ CD ]
Line_13 $$ matcher = p.matcher(output.getBuffer())-->Line_24 $$ assertTrue(matcher.find() && matcher.groupCount() == 1)[ FD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_10 $$ int totalFiles = Integer.parseInt(matcher.group(1))[ CD ]
Line_3 $$ StringWriter output = new StringWriter()-->Line_23 $$ matcher = p.matcher(output.getBuffer())[ FD ]
Line_13 $$ matcher = p.matcher(output.getBuffer())-->Line_14 $$ assertTrue(matcher.find() && matcher.groupCount() == 1)[ FD ]
Line_17 $$ FileStatus maxFile = Collections.max(writtenFiles.values(), new Comparator<FileStatus>() -->Line_19 $$ return first.getLen() < second.getLen() ? -1 : ((first.getLen() == second.getLen()) ? 0 : 1)[ CD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_11 $$ assertEquals(NUM_DIRS * FILES_PER_DIR, totalFiles)[ CD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_9 $$ assertTrue(matcher.find() && matcher.groupCount() == 1)[ CD ]
Line_8 $$ Matcher matcher = p.matcher(output.getBuffer())-->Line_14 $$ assertTrue(matcher.find() && matcher.groupCount() == 1)[ FD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_16 $$ assertEquals(NUM_DIRS + 3, totalDirs)[ CD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_17 $$ FileStatus maxFile = Collections.max(writtenFiles.values(), new Comparator<FileStatus>() [ CD ]
Line_7 $$ Pattern p = Pattern.compile("totalFiles = (\\d+)\n")-->Line_8 $$ Matcher matcher = p.matcher(output.getBuffer())[ FD ]
Line_12 $$ p = Pattern.compile("totalDirectories = (\\d+)\n")-->Line_23 $$ matcher = p.matcher(output.getBuffer())[ FD ]
Line_8 $$ Matcher matcher = p.matcher(output.getBuffer())-->Line_24 $$ assertTrue(matcher.find() && matcher.groupCount() == 1)[ FD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_5 $$ new FileDistributionCalculator(new Configuration(), 0, 0, o).visit(new RandomAccessFile(originalFsimage, "r"))[ CD ]
Line_15 $$ int totalDirs = Integer.parseInt(matcher.group(1))-->Line_16 $$ assertEquals(NUM_DIRS + 3, totalDirs)[ FD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_13 $$ matcher = p.matcher(output.getBuffer())[ CD ]
Line_13 $$ matcher = p.matcher(output.getBuffer())-->Line_15 $$ int totalDirs = Integer.parseInt(matcher.group(1))[ FD ]
Line_2 $$ public void testFileDistributionCalculator() throws IOException -->Line_14 $$ assertTrue(matcher.find() && matcher.groupCount() == 1)[ CD ]
Line_17 $$ FileStatus maxFile = Collections.max(writtenFiles.values(), new Comparator<FileStatus>() -->Line_19 $$ return first.getLen() < second.getLen() ? -1 : ((first.getLen() == second.getLen()) ? 0 : 1)[ FD ]
