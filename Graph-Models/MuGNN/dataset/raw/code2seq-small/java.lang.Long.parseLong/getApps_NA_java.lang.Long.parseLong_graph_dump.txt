Line_45 $$ if (finishEnd != null && !finishEnd.isEmpty()) -->Line_48 $$ if (fEnd < 0) [ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_35 $$ if (sBegin > sEnd) [ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_21 $$ if (startedBegin != null && !startedBegin.isEmpty()) [ CD ]
Line_73 $$ for (ApplicationReport appReport : appReports) -->Line_92 $$ if (!appReport.getQueue().equals(queueQuery)) [ FD ]
Line_57 $$ checkAppTypes = true-->Line_96 $$ if (checkAppTypes && !appTypes.contains(appReport.getApplicationType().trim().toLowerCase())) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_8 $$ boolean checkAppStates = false[ CD ]
Line_105 $$ AppInfo app = new AppInfo(appReport)-->Line_106 $$ allApps.add(app)[ FD ]
Line_12 $$ long fBegin = 0-->Line_40 $$ fBegin = Long.parseLong(finishBegin)[ FD ]
Line_4 $$ boolean checkCount = false-->Line_74 $$ if (checkCount && num == countNum) [ FD ]
Line_21 $$ if (startedBegin != null && !startedBegin.isEmpty()) -->Line_24 $$ if (sBegin < 0) [ CD ]
Line_13 $$ long fEnd = Long.MAX_VALUE-->Line_47 $$ fEnd = Long.parseLong(finishEnd)[ FD ]
Line_7 $$ boolean checkAppTypes = false-->Line_96 $$ if (checkAppTypes && !appTypes.contains(appReport.getApplicationType().trim().toLowerCase())) [ FD ]
Line_73 $$ for (ApplicationReport appReport : appReports) -->Line_96 $$ if (checkAppTypes && !appTypes.contains(appReport.getApplicationType().trim().toLowerCase())) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_62 $$ Set<String> appStates = parseQueries(statesQuery, true)[ FD ]
Line_47 $$ fEnd = Long.parseLong(finishEnd)-->Line_52 $$ if (fBegin > fEnd) [ FD ]
Line_56 $$ if (!appTypes.isEmpty()) -->Line_57 $$ checkAppTypes = true[ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_28 $$ if (startedEnd != null && !startedEnd.isEmpty()) [ FD ]
Line_30 $$ sEnd = Long.parseLong(startedEnd)-->Line_35 $$ if (sBegin > sEnd) [ FD ]
Line_7 $$ boolean checkAppTypes = false-->Line_57 $$ checkAppTypes = true[ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_28 $$ if (startedEnd != null && !startedEnd.isEmpty()) [ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_81 $$ FinalApplicationStatus.valueOf(finalStatusQuery)[ FD ]
Line_13 $$ long fEnd = Long.MAX_VALUE-->Line_48 $$ if (fEnd < 0) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_66 $$ AppsInfo allApps = new AppsInfo()[ CD ]
Line_12 $$ long fBegin = 0-->Line_52 $$ if (fBegin > fEnd) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_38 $$ if (finishBegin != null && !finishBegin.isEmpty()) [ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_92 $$ if (!appReport.getQueue().equals(queueQuery)) [ FD ]
Line_14 $$ if (count != null && !count.isEmpty()) -->Line_15 $$ checkCount = true[ CD ]
Line_55 $$ Set<String> appTypes = parseQueries(applicationTypes, false)-->Line_56 $$ if (!appTypes.isEmpty()) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_80 $$ if (finalStatusQuery != null && !finalStatusQuery.isEmpty()) [ FD ]
Line_73 $$ for (ApplicationReport appReport : appReports) -->Line_102 $$ if (checkEnd && (appReport.getFinishTime() < fBegin || appReport.getFinishTime() > fEnd)) [ FD ]
Line_55 $$ Set<String> appTypes = parseQueries(applicationTypes, false)-->Line_96 $$ if (checkAppTypes && !appTypes.contains(appReport.getApplicationType().trim().toLowerCase())) [ FD ]
Line_45 $$ if (finishEnd != null && !finishEnd.isEmpty()) -->Line_46 $$ checkEnd = true[ CD ]
Line_28 $$ if (startedEnd != null && !startedEnd.isEmpty()) -->Line_29 $$ checkStart = true[ CD ]
Line_23 $$ sBegin = Long.parseLong(startedBegin)-->Line_24 $$ if (sBegin < 0) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_3 $$ long num = 0[ CD ]
Line_10 $$ long sBegin = 0-->Line_23 $$ sBegin = Long.parseLong(startedBegin)[ FD ]
Line_14 $$ if (count != null && !count.isEmpty()) -->Line_17 $$ if (countNum <= 0) [ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_59 $$ if (stateQuery != null && !stateQuery.isEmpty()) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_11 $$ long sEnd = Long.MAX_VALUE[ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_6 $$ boolean checkEnd = false[ CD ]
Line_47 $$ fEnd = Long.parseLong(finishEnd)-->Line_48 $$ if (fEnd < 0) [ FD ]
Line_28 $$ if (startedEnd != null && !startedEnd.isEmpty()) -->Line_30 $$ sEnd = Long.parseLong(startedEnd)[ CD ]
Line_22 $$ checkStart = true-->Line_29 $$ checkStart = true[ FD ]
Line_62 $$ Set<String> appStates = parseQueries(statesQuery, true)-->Line_77 $$ if (checkAppStates && !appStates.contains(appReport.getYarnApplicationState().toString().toLowerCase())) [ FD ]
Line_9 $$ long countNum = 0-->Line_16 $$ countNum = Long.parseLong(count)[ FD ]
Line_39 $$ checkEnd = true-->Line_102 $$ if (checkEnd && (appReport.getFinishTime() < fBegin || appReport.getFinishTime() > fEnd)) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_55 $$ Set<String> appTypes = parseQueries(applicationTypes, false)[ CD ]
Line_5 $$ boolean checkStart = false-->Line_99 $$ if (checkStart && (appReport.getStartTime() < sBegin || appReport.getStartTime() > sEnd)) [ FD ]
Line_38 $$ if (finishBegin != null && !finishBegin.isEmpty()) -->Line_39 $$ checkEnd = true[ CD ]
Line_5 $$ boolean checkStart = false-->Line_22 $$ checkStart = true[ FD ]
Line_80 $$ if (finalStatusQuery != null && !finalStatusQuery.isEmpty()) -->Line_81 $$ FinalApplicationStatus.valueOf(finalStatusQuery)[ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_67 $$ Collection<ApplicationReport> appReports = null[ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_14 $$ if (count != null && !count.isEmpty()) [ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_52 $$ if (fBegin > fEnd) [ CD ]
Line_11 $$ long sEnd = Long.MAX_VALUE-->Line_31 $$ if (sEnd < 0) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_86 $$ if (userQuery != null && !userQuery.isEmpty()) [ FD ]
Line_45 $$ if (finishEnd != null && !finishEnd.isEmpty()) -->Line_47 $$ fEnd = Long.parseLong(finishEnd)[ CD ]
Line_3 $$ long num = 0-->Line_107 $$ num++[ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_59 $$ if (stateQuery != null && !stateQuery.isEmpty()) [ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_10 $$ long sBegin = 0[ CD ]
Line_10 $$ long sBegin = 0-->Line_35 $$ if (sBegin > sEnd) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_109 $$ return allApps[ CD ]
Line_40 $$ fBegin = Long.parseLong(finishBegin)-->Line_41 $$ if (fBegin < 0) [ FD ]
Line_14 $$ if (count != null && !count.isEmpty()) -->Line_16 $$ countNum = Long.parseLong(count)[ CD ]
Line_28 $$ if (startedEnd != null && !startedEnd.isEmpty()) -->Line_31 $$ if (sEnd < 0) [ CD ]
Line_6 $$ boolean checkEnd = false-->Line_39 $$ checkEnd = true[ FD ]
Line_40 $$ fBegin = Long.parseLong(finishBegin)-->Line_52 $$ if (fBegin > fEnd) [ FD ]
Line_38 $$ if (finishBegin != null && !finishBegin.isEmpty()) -->Line_40 $$ fBegin = Long.parseLong(finishBegin)[ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_9 $$ long countNum = 0[ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_23 $$ sBegin = Long.parseLong(startedBegin)[ FD ]
Line_23 $$ sBegin = Long.parseLong(startedBegin)-->Line_35 $$ if (sBegin > sEnd) [ FD ]
Line_46 $$ checkEnd = true-->Line_102 $$ if (checkEnd && (appReport.getFinishTime() < fBegin || appReport.getFinishTime() > fEnd)) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_16 $$ countNum = Long.parseLong(count)[ FD ]
Line_86 $$ if (userQuery != null && !userQuery.isEmpty()) -->Line_87 $$ if (!appReport.getUser().equals(userQuery)) [ CD ]
Line_91 $$ if (queueQuery != null && !queueQuery.isEmpty()) -->Line_92 $$ if (!appReport.getQueue().equals(queueQuery)) [ CD ]
Line_29 $$ checkStart = true-->Line_99 $$ if (checkStart && (appReport.getStartTime() < sBegin || appReport.getStartTime() > sEnd)) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_12 $$ long fBegin = 0[ CD ]
Line_66 $$ AppsInfo allApps = new AppsInfo()-->Line_106 $$ allApps.add(app)[ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_47 $$ fEnd = Long.parseLong(finishEnd)[ FD ]
Line_73 $$ for (ApplicationReport appReport : appReports) -->Line_87 $$ if (!appReport.getUser().equals(userQuery)) [ FD ]
Line_59 $$ if (stateQuery != null && !stateQuery.isEmpty()) -->Line_60 $$ statesQuery.add(stateQuery)[ CD ]
Line_64 $$ checkAppStates = true-->Line_77 $$ if (checkAppStates && !appStates.contains(appReport.getYarnApplicationState().toString().toLowerCase())) [ FD ]
Line_11 $$ long sEnd = Long.MAX_VALUE-->Line_30 $$ sEnd = Long.parseLong(startedEnd)[ FD ]
Line_63 $$ if (!appStates.isEmpty()) -->Line_64 $$ checkAppStates = true[ CD ]
Line_12 $$ long fBegin = 0-->Line_41 $$ if (fBegin < 0) [ FD ]
Line_73 $$ for (ApplicationReport appReport : appReports) -->Line_99 $$ if (checkStart && (appReport.getStartTime() < sBegin || appReport.getStartTime() > sEnd)) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_38 $$ if (finishBegin != null && !finishBegin.isEmpty()) [ FD ]
Line_6 $$ boolean checkEnd = false-->Line_46 $$ checkEnd = true[ FD ]
Line_39 $$ checkEnd = true-->Line_46 $$ checkEnd = true[ FD ]
Line_38 $$ if (finishBegin != null && !finishBegin.isEmpty()) -->Line_41 $$ if (fBegin < 0) [ CD ]
Line_62 $$ Set<String> appStates = parseQueries(statesQuery, true)-->Line_63 $$ if (!appStates.isEmpty()) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_82 $$ if (!appReport.getFinalApplicationStatus().toString().equalsIgnoreCase(finalStatusQuery)) [ FD ]
Line_30 $$ sEnd = Long.parseLong(startedEnd)-->Line_31 $$ if (sEnd < 0) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_21 $$ if (startedBegin != null && !startedBegin.isEmpty()) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_60 $$ statesQuery.add(stateQuery)[ FD ]
Line_80 $$ if (finalStatusQuery != null && !finalStatusQuery.isEmpty()) -->Line_82 $$ if (!appReport.getFinalApplicationStatus().toString().equalsIgnoreCase(finalStatusQuery)) [ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_45 $$ if (finishEnd != null && !finishEnd.isEmpty()) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_55 $$ Set<String> appTypes = parseQueries(applicationTypes, false)[ FD ]
Line_11 $$ long sEnd = Long.MAX_VALUE-->Line_35 $$ if (sBegin > sEnd) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_13 $$ long fEnd = Long.MAX_VALUE[ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_45 $$ if (finishEnd != null && !finishEnd.isEmpty()) [ CD ]
Line_21 $$ if (startedBegin != null && !startedBegin.isEmpty()) -->Line_22 $$ checkStart = true[ CD ]
Line_4 $$ boolean checkCount = false-->Line_15 $$ checkCount = true[ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_5 $$ boolean checkStart = false[ CD ]
Line_13 $$ long fEnd = Long.MAX_VALUE-->Line_52 $$ if (fBegin > fEnd) [ FD ]
Line_73 $$ for (ApplicationReport appReport : appReports) -->Line_77 $$ if (checkAppStates && !appStates.contains(appReport.getYarnApplicationState().toString().toLowerCase())) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_30 $$ sEnd = Long.parseLong(startedEnd)[ FD ]
Line_10 $$ long sBegin = 0-->Line_24 $$ if (sBegin < 0) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_56 $$ if (!appTypes.isEmpty()) [ CD ]
Line_8 $$ boolean checkAppStates = false-->Line_77 $$ if (checkAppStates && !appStates.contains(appReport.getYarnApplicationState().toString().toLowerCase())) [ FD ]
Line_73 $$ for (ApplicationReport appReport : appReports) -->Line_82 $$ if (!appReport.getFinalApplicationStatus().toString().equalsIgnoreCase(finalStatusQuery)) [ FD ]
Line_8 $$ boolean checkAppStates = false-->Line_64 $$ checkAppStates = true[ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_62 $$ Set<String> appStates = parseQueries(statesQuery, true)[ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_7 $$ boolean checkAppTypes = false[ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_4 $$ boolean checkCount = false[ CD ]
Line_6 $$ boolean checkEnd = false-->Line_102 $$ if (checkEnd && (appReport.getFinishTime() < fBegin || appReport.getFinishTime() > fEnd)) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_40 $$ fBegin = Long.parseLong(finishBegin)[ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_87 $$ if (!appReport.getUser().equals(userQuery)) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_91 $$ if (queueQuery != null && !queueQuery.isEmpty()) [ FD ]
Line_9 $$ long countNum = 0-->Line_17 $$ if (countNum <= 0) [ FD ]
Line_15 $$ checkCount = true-->Line_74 $$ if (checkCount && num == countNum) [ FD ]
Line_16 $$ countNum = Long.parseLong(count)-->Line_17 $$ if (countNum <= 0) [ FD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_14 $$ if (count != null && !count.isEmpty()) [ FD ]
Line_67 $$ Collection<ApplicationReport> appReports = null-->Line_69 $$ appReports = appContext.getAllApplications().values()[ FD ]
Line_21 $$ if (startedBegin != null && !startedBegin.isEmpty()) -->Line_23 $$ sBegin = Long.parseLong(startedBegin)[ CD ]
Line_2 $$ public AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes) -->Line_63 $$ if (!appStates.isEmpty()) [ CD ]
Line_5 $$ boolean checkStart = false-->Line_29 $$ checkStart = true[ FD ]
Line_22 $$ checkStart = true-->Line_99 $$ if (checkStart && (appReport.getStartTime() < sBegin || appReport.getStartTime() > sEnd)) [ FD ]
