Line_10 $$ PathCallable pathCallable = new PathCallable(filePath) -->Line_16 $$ FileLockRetryUtil.registerPathCallable(pathCallable)[ FD ]
Line_2 $$ public static void writeFileKey(final Path filePath, final String fileKey, boolean acquireFileLock) -->Line_7 $$ doWriteFileKey(filePath, fileKey)[ FD ]
Line_2 $$ public static void writeFileKey(final Path filePath, final String fileKey, boolean acquireFileLock) -->Line_3 $$ if (hasFileKey(filePath, Long.parseLong(fileKey))) [ CD ]
Line_10 $$ PathCallable pathCallable = new PathCallable(filePath) -->Line_12 $$ doWriteFileKey(filePath, fileKey)[ CD ]
Line_2 $$ public static void writeFileKey(final Path filePath, final String fileKey, boolean acquireFileLock) -->Line_6 $$ if (!acquireFileLock) [ FD ]
Line_2 $$ public static void writeFileKey(final Path filePath, final String fileKey, boolean acquireFileLock) -->Line_12 $$ doWriteFileKey(filePath, fileKey)[ FD ]
Line_2 $$ public static void writeFileKey(final Path filePath, final String fileKey, boolean acquireFileLock) -->Line_16 $$ FileLockRetryUtil.registerPathCallable(pathCallable)[ CD ]
Line_6 $$ if (!acquireFileLock) -->Line_7 $$ doWriteFileKey(filePath, fileKey)[ CD ]
Line_2 $$ public static void writeFileKey(final Path filePath, final String fileKey, boolean acquireFileLock) -->Line_3 $$ if (hasFileKey(filePath, Long.parseLong(fileKey))) [ FD ]
Line_6 $$ if (!acquireFileLock) -->Line_8 $$ return[ CD ]
Line_2 $$ public static void writeFileKey(final Path filePath, final String fileKey, boolean acquireFileLock) -->Line_10 $$ PathCallable pathCallable = new PathCallable(filePath) [ CD ]
Line_2 $$ public static void writeFileKey(final Path filePath, final String fileKey, boolean acquireFileLock) -->Line_6 $$ if (!acquireFileLock) [ CD ]
Line_3 $$ if (hasFileKey(filePath, Long.parseLong(fileKey))) -->Line_4 $$ return[ CD ]
Line_10 $$ PathCallable pathCallable = new PathCallable(filePath) -->Line_13 $$ return null[ CD ]
