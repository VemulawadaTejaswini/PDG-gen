Line_2 $$ private static String replace(@NotNull String s) -->Line_4 $$ final String tmp = sub.get(s)[ FD ]
Line_2 $$ private static String replace(@NotNull String s) -->Line_8 $$ if (s.equals(".") || s.equals("-")) [ CD ]
Line_2 $$ private static String replace(@NotNull String s) -->Line_5 $$ if (tmp != null) [ CD ]
Line_2 $$ private static String replace(@NotNull String s) -->Line_13 $$ final long value = Long.parseLong(s)[ FD ]
Line_2 $$ private static String replace(@NotNull String s) -->Line_8 $$ if (s.equals(".") || s.equals("-")) [ FD ]
Line_2 $$ private static String replace(@NotNull String s) -->Line_3 $$ final Map<String, String> sub = ImmutableMap.of("pre", "c", "preview", "c", "rc", "c", "dev", "@")[ CD ]
Line_2 $$ private static String replace(@NotNull String s) -->Line_11 $$ if (s.matches("[0-9]+")) [ FD ]
Line_2 $$ private static String replace(@NotNull String s) -->Line_4 $$ final String tmp = sub.get(s)[ CD ]
Line_13 $$ final long value = Long.parseLong(s)-->Line_14 $$ return String.format("%08d", value)[ FD ]
Line_2 $$ private static String replace(@NotNull String s) -->Line_19 $$ return "*" + s[ CD ]
Line_8 $$ if (s.equals(".") || s.equals("-")) -->Line_9 $$ return null[ CD ]
Line_2 $$ private static String replace(@NotNull String s) -->Line_11 $$ if (s.matches("[0-9]+")) [ CD ]
Line_3 $$ final Map<String, String> sub = ImmutableMap.of("pre", "c", "preview", "c", "rc", "c", "dev", "@")-->Line_4 $$ final String tmp = sub.get(s)[ FD ]
Line_4 $$ final String tmp = sub.get(s)-->Line_5 $$ if (tmp != null) [ FD ]
