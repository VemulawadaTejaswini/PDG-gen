Line_2 $$ public static Object getLiteralValue(PsiElement child) -->Line_4 $$ String text = child.getText()[ CD ]
Line_52 $$ if (elemType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_56 $$ final PsiElement sibling = cchild.getNextSibling()[ CD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_28 $$ if (!text.startsWith("'"))[ FD ]
Line_43 $$ if (cchild == null)-->Line_44 $$ return null[ CD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_15 $$ return Double.parseDouble(text)[ FD ]
Line_48 $$ text = sibling.getText()-->Line_59 $$ text = sibling.getText()[ FD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_31 $$ StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_42 $$ final PsiElement cchild = child.getFirstChild()-->Line_54 $$ if (cchild == null)[ FD ]
Line_34 $$ if (elemType == GroovyTokenTypes.mGSTRING_LITERAL) -->Line_40 $$ return result ? chars.toString() : null[ CD ]
Line_2 $$ public static Object getLiteralValue(PsiElement child) -->Line_3 $$ IElementType elemType = child.getNode().getElementType()[ FD ]
Line_12 $$ if (elemType == GroovyTokenTypes.mNUM_FLOAT) -->Line_14 $$ if (elemType == GroovyTokenTypes.mNUM_DOUBLE) [ CD ]
Line_30 $$ text = GrStringUtil.removeQuotes(text)-->Line_61 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, false)[ FD ]
Line_4 $$ String text = child.getText()-->Line_48 $$ text = sibling.getText()[ FD ]
Line_30 $$ text = GrStringUtil.removeQuotes(text)-->Line_59 $$ text = sibling.getText()[ FD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_35 $$ if (!text.startsWith("\""))[ FD ]
Line_8 $$ if (elemType == GroovyTokenTypes.mNUM_INT) -->Line_9 $$ return Integer.parseInt(text)[ CD ]
Line_46 $$ if (sibling == null)-->Line_47 $$ return null[ CD ]
Line_30 $$ text = GrStringUtil.removeQuotes(text)-->Line_35 $$ if (!text.startsWith("\""))[ FD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_30 $$ text = GrStringUtil.removeQuotes(text)[ FD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_37 $$ text = GrStringUtil.removeQuotes(text)[ FD ]
Line_14 $$ if (elemType == GroovyTokenTypes.mNUM_DOUBLE) -->Line_15 $$ return Double.parseDouble(text)[ CD ]
Line_48 $$ text = sibling.getText()-->Line_49 $$ final StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_4 $$ String text = child.getText()-->Line_11 $$ return Long.parseLong(text)[ FD ]
Line_30 $$ text = GrStringUtil.removeQuotes(text)-->Line_60 $$ final StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_52 $$ if (elemType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_57 $$ if (sibling == null)[ CD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_38 $$ StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_30 $$ text = GrStringUtil.removeQuotes(text)-->Line_38 $$ StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_5 $$ if (TokenSets.NUMBERS.contains(elemType)) [ FD ]
Line_10 $$ if (elemType == GroovyTokenTypes.mNUM_LONG) -->Line_11 $$ return Long.parseLong(text)[ CD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_25 $$ if (elemType == GroovyTokenTypes.kTRUE) [ FD ]
Line_52 $$ if (elemType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_61 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, false)[ CD ]
Line_54 $$ if (cchild == null)-->Line_55 $$ return null[ CD ]
Line_4 $$ String text = child.getText()-->Line_30 $$ text = GrStringUtil.removeQuotes(text)[ FD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_39 $$ boolean result = GrStringUtil.parseStringCharacters(text, chars, null)[ FD ]
Line_41 $$ if (elemType == GroovyTokenTypes.mREGEX_LITERAL) -->Line_42 $$ final PsiElement cchild = child.getFirstChild()[ CD ]
Line_37 $$ text = GrStringUtil.removeQuotes(text)-->Line_59 $$ text = sibling.getText()[ FD ]
Line_52 $$ if (elemType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_62 $$ return result ? chars.toString() : null[ CD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_9 $$ return Integer.parseInt(text)[ FD ]
Line_37 $$ text = GrStringUtil.removeQuotes(text)-->Line_39 $$ boolean result = GrStringUtil.parseStringCharacters(text, chars, null)[ FD ]
Line_4 $$ String text = child.getText()-->Line_59 $$ text = sibling.getText()[ FD ]
Line_42 $$ final PsiElement cchild = child.getFirstChild()-->Line_43 $$ if (cchild == null)[ FD ]
Line_5 $$ if (TokenSets.NUMBERS.contains(elemType)) -->Line_23 $$ if (elemType == GroovyTokenTypes.kFALSE) [ CD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_16 $$ if (elemType == GroovyTokenTypes.mNUM_BIG_INT) [ FD ]
Line_4 $$ String text = child.getText()-->Line_32 $$ boolean result = GrStringUtil.parseStringCharacters(text, chars, null)[ FD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_61 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, false)[ FD ]
Line_10 $$ if (elemType == GroovyTokenTypes.mNUM_LONG) -->Line_12 $$ if (elemType == GroovyTokenTypes.mNUM_FLOAT) [ CD ]
Line_30 $$ text = GrStringUtil.removeQuotes(text)-->Line_39 $$ boolean result = GrStringUtil.parseStringCharacters(text, chars, null)[ FD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_23 $$ if (elemType == GroovyTokenTypes.kFALSE) [ FD ]
Line_37 $$ text = GrStringUtil.removeQuotes(text)-->Line_38 $$ StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_14 $$ if (elemType == GroovyTokenTypes.mNUM_DOUBLE) -->Line_16 $$ if (elemType == GroovyTokenTypes.mNUM_BIG_INT) [ CD ]
Line_4 $$ String text = child.getText()-->Line_9 $$ return Integer.parseInt(text)[ FD ]
Line_30 $$ text = GrStringUtil.removeQuotes(text)-->Line_37 $$ text = GrStringUtil.removeQuotes(text)[ FD ]
Line_27 $$ if (elemType == GroovyTokenTypes.mSTRING_LITERAL) -->Line_30 $$ text = GrStringUtil.removeQuotes(text)[ CD ]
Line_41 $$ if (elemType == GroovyTokenTypes.mREGEX_LITERAL) -->Line_52 $$ if (elemType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) [ CD ]
Line_4 $$ String text = child.getText()-->Line_49 $$ final StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_34 $$ if (elemType == GroovyTokenTypes.mGSTRING_LITERAL) -->Line_41 $$ if (elemType == GroovyTokenTypes.mREGEX_LITERAL) [ CD ]
Line_28 $$ if (!text.startsWith("'"))-->Line_29 $$ return null[ CD ]
Line_30 $$ text = GrStringUtil.removeQuotes(text)-->Line_50 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, true)[ FD ]
Line_4 $$ String text = child.getText()-->Line_13 $$ return Float.parseFloat(text)[ FD ]
Line_41 $$ if (elemType == GroovyTokenTypes.mREGEX_LITERAL) -->Line_45 $$ final PsiElement sibling = cchild.getNextSibling()[ CD ]
Line_4 $$ String text = child.getText()-->Line_60 $$ final StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_48 $$ text = sibling.getText()[ FD ]
Line_59 $$ text = sibling.getText()-->Line_60 $$ final StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_23 $$ if (elemType == GroovyTokenTypes.kFALSE) -->Line_25 $$ if (elemType == GroovyTokenTypes.kTRUE) [ CD ]
Line_34 $$ if (elemType == GroovyTokenTypes.mGSTRING_LITERAL) -->Line_39 $$ boolean result = GrStringUtil.parseStringCharacters(text, chars, null)[ CD ]
Line_41 $$ if (elemType == GroovyTokenTypes.mREGEX_LITERAL) -->Line_43 $$ if (cchild == null)[ CD ]
Line_41 $$ if (elemType == GroovyTokenTypes.mREGEX_LITERAL) -->Line_51 $$ return result ? chars.toString() : null[ CD ]
Line_41 $$ if (elemType == GroovyTokenTypes.mREGEX_LITERAL) -->Line_50 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, true)[ CD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_14 $$ if (elemType == GroovyTokenTypes.mNUM_DOUBLE) [ FD ]
Line_4 $$ String text = child.getText()-->Line_28 $$ if (!text.startsWith("'"))[ FD ]
Line_31 $$ StringBuilder chars = new StringBuilder(text.length())-->Line_32 $$ boolean result = GrStringUtil.parseStringCharacters(text, chars, null)[ FD ]
Line_27 $$ if (elemType == GroovyTokenTypes.mSTRING_LITERAL) -->Line_33 $$ return result ? chars.toString() : null[ CD ]
Line_48 $$ text = sibling.getText()-->Line_50 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, true)[ FD ]
Line_37 $$ text = GrStringUtil.removeQuotes(text)-->Line_49 $$ final StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_41 $$ if (elemType == GroovyTokenTypes.mREGEX_LITERAL) -->Line_48 $$ text = sibling.getText()[ CD ]
Line_42 $$ final PsiElement cchild = child.getFirstChild()-->Line_56 $$ final PsiElement sibling = cchild.getNextSibling()[ FD ]
Line_25 $$ if (elemType == GroovyTokenTypes.kTRUE) -->Line_27 $$ if (elemType == GroovyTokenTypes.mSTRING_LITERAL) [ CD ]
Line_27 $$ if (elemType == GroovyTokenTypes.mSTRING_LITERAL) -->Line_32 $$ boolean result = GrStringUtil.parseStringCharacters(text, chars, null)[ CD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_11 $$ return Long.parseLong(text)[ FD ]
Line_31 $$ StringBuilder chars = new StringBuilder(text.length())-->Line_62 $$ return result ? chars.toString() : null[ FD ]
Line_12 $$ if (elemType == GroovyTokenTypes.mNUM_FLOAT) -->Line_13 $$ return Float.parseFloat(text)[ CD ]
Line_37 $$ text = GrStringUtil.removeQuotes(text)-->Line_61 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, false)[ FD ]
Line_2 $$ public static Object getLiteralValue(PsiElement child) -->Line_64 $$ return null[ CD ]
Line_31 $$ StringBuilder chars = new StringBuilder(text.length())-->Line_39 $$ boolean result = GrStringUtil.parseStringCharacters(text, chars, null)[ FD ]
Line_2 $$ public static Object getLiteralValue(PsiElement child) -->Line_5 $$ if (TokenSets.NUMBERS.contains(elemType)) [ CD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_41 $$ if (elemType == GroovyTokenTypes.mREGEX_LITERAL) [ FD ]
Line_16 $$ if (elemType == GroovyTokenTypes.mNUM_BIG_INT) -->Line_17 $$ return new BigInteger(text)[ CD ]
Line_18 $$ if (elemType == GroovyTokenTypes.mNUM_BIG_DECIMAL) -->Line_19 $$ return new BigDecimal(text)[ CD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_18 $$ if (elemType == GroovyTokenTypes.mNUM_BIG_DECIMAL) [ FD ]
Line_4 $$ String text = child.getText()-->Line_6 $$ text = text.replaceAll("_", "")[ FD ]
Line_31 $$ StringBuilder chars = new StringBuilder(text.length())-->Line_40 $$ return result ? chars.toString() : null[ FD ]
Line_30 $$ text = GrStringUtil.removeQuotes(text)-->Line_48 $$ text = sibling.getText()[ FD ]
Line_2 $$ public static Object getLiteralValue(PsiElement child) -->Line_53 $$ final PsiElement cchild = child.getFirstChild()[ FD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_8 $$ if (elemType == GroovyTokenTypes.mNUM_INT) [ FD ]
Line_16 $$ if (elemType == GroovyTokenTypes.mNUM_BIG_INT) -->Line_18 $$ if (elemType == GroovyTokenTypes.mNUM_BIG_DECIMAL) [ CD ]
Line_27 $$ if (elemType == GroovyTokenTypes.mSTRING_LITERAL) -->Line_31 $$ StringBuilder chars = new StringBuilder(text.length())[ CD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_59 $$ text = sibling.getText()[ FD ]
Line_52 $$ if (elemType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_59 $$ text = sibling.getText()[ CD ]
Line_27 $$ if (elemType == GroovyTokenTypes.mSTRING_LITERAL) -->Line_28 $$ if (!text.startsWith("'"))[ CD ]
Line_2 $$ public static Object getLiteralValue(PsiElement child) -->Line_3 $$ IElementType elemType = child.getNode().getElementType()[ CD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_34 $$ if (elemType == GroovyTokenTypes.mGSTRING_LITERAL) [ FD ]
Line_52 $$ if (elemType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_54 $$ if (cchild == null)[ CD ]
Line_30 $$ text = GrStringUtil.removeQuotes(text)-->Line_31 $$ StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_4 $$ String text = child.getText()-->Line_15 $$ return Double.parseDouble(text)[ FD ]
Line_41 $$ if (elemType == GroovyTokenTypes.mREGEX_LITERAL) -->Line_46 $$ if (sibling == null)[ CD ]
Line_37 $$ text = GrStringUtil.removeQuotes(text)-->Line_48 $$ text = sibling.getText()[ FD ]
Line_4 $$ String text = child.getText()-->Line_50 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, true)[ FD ]
Line_31 $$ StringBuilder chars = new StringBuilder(text.length())-->Line_33 $$ return result ? chars.toString() : null[ FD ]
Line_48 $$ text = sibling.getText()-->Line_61 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, false)[ FD ]
Line_45 $$ final PsiElement sibling = cchild.getNextSibling()-->Line_57 $$ if (sibling == null)[ FD ]
Line_34 $$ if (elemType == GroovyTokenTypes.mGSTRING_LITERAL) -->Line_35 $$ if (!text.startsWith("\""))[ CD ]
Line_2 $$ public static Object getLiteralValue(PsiElement child) -->Line_4 $$ String text = child.getText()[ FD ]
Line_45 $$ final PsiElement sibling = cchild.getNextSibling()-->Line_48 $$ text = sibling.getText()[ FD ]
Line_5 $$ if (TokenSets.NUMBERS.contains(elemType)) -->Line_6 $$ text = text.replaceAll("_", "")[ CD ]
Line_45 $$ final PsiElement sibling = cchild.getNextSibling()-->Line_46 $$ if (sibling == null)[ FD ]
Line_48 $$ text = sibling.getText()-->Line_60 $$ final StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_49 $$ final StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_32 $$ boolean result = GrStringUtil.parseStringCharacters(text, chars, null)[ FD ]
Line_4 $$ String text = child.getText()-->Line_37 $$ text = GrStringUtil.removeQuotes(text)[ FD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_27 $$ if (elemType == GroovyTokenTypes.mSTRING_LITERAL) [ FD ]
Line_25 $$ if (elemType == GroovyTokenTypes.kTRUE) -->Line_26 $$ return Boolean.TRUE[ CD ]
Line_4 $$ String text = child.getText()-->Line_35 $$ if (!text.startsWith("\""))[ FD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_50 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, true)[ FD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_60 $$ final StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_2 $$ public static Object getLiteralValue(PsiElement child) -->Line_42 $$ final PsiElement cchild = child.getFirstChild()[ FD ]
Line_30 $$ text = GrStringUtil.removeQuotes(text)-->Line_49 $$ final StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_4 $$ String text = child.getText()-->Line_38 $$ StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_31 $$ StringBuilder chars = new StringBuilder(text.length())-->Line_61 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, false)[ FD ]
Line_52 $$ if (elemType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_53 $$ final PsiElement cchild = child.getFirstChild()[ CD ]
Line_6 $$ text = text.replaceAll("_", "")-->Line_13 $$ return Float.parseFloat(text)[ FD ]
Line_4 $$ String text = child.getText()-->Line_31 $$ StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_4 $$ String text = child.getText()-->Line_61 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, false)[ FD ]
Line_45 $$ final PsiElement sibling = cchild.getNextSibling()-->Line_59 $$ text = sibling.getText()[ FD ]
Line_27 $$ if (elemType == GroovyTokenTypes.mSTRING_LITERAL) -->Line_34 $$ if (elemType == GroovyTokenTypes.mGSTRING_LITERAL) [ CD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_52 $$ if (elemType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) [ FD ]
Line_23 $$ if (elemType == GroovyTokenTypes.kFALSE) -->Line_24 $$ return Boolean.FALSE[ CD ]
Line_8 $$ if (elemType == GroovyTokenTypes.mNUM_INT) -->Line_10 $$ if (elemType == GroovyTokenTypes.mNUM_LONG) [ CD ]
Line_42 $$ final PsiElement cchild = child.getFirstChild()-->Line_45 $$ final PsiElement sibling = cchild.getNextSibling()[ FD ]
Line_34 $$ if (elemType == GroovyTokenTypes.mGSTRING_LITERAL) -->Line_37 $$ text = GrStringUtil.removeQuotes(text)[ CD ]
Line_31 $$ StringBuilder chars = new StringBuilder(text.length())-->Line_51 $$ return result ? chars.toString() : null[ FD ]
Line_30 $$ text = GrStringUtil.removeQuotes(text)-->Line_32 $$ boolean result = GrStringUtil.parseStringCharacters(text, chars, null)[ FD ]
Line_37 $$ text = GrStringUtil.removeQuotes(text)-->Line_60 $$ final StringBuilder chars = new StringBuilder(text.length())[ FD ]
Line_31 $$ StringBuilder chars = new StringBuilder(text.length())-->Line_50 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, true)[ FD ]
Line_4 $$ String text = child.getText()-->Line_39 $$ boolean result = GrStringUtil.parseStringCharacters(text, chars, null)[ FD ]
Line_57 $$ if (sibling == null)-->Line_58 $$ return null[ CD ]
Line_59 $$ text = sibling.getText()-->Line_61 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, false)[ FD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_10 $$ if (elemType == GroovyTokenTypes.mNUM_LONG) [ FD ]
Line_3 $$ IElementType elemType = child.getNode().getElementType()-->Line_12 $$ if (elemType == GroovyTokenTypes.mNUM_FLOAT) [ FD ]
Line_37 $$ text = GrStringUtil.removeQuotes(text)-->Line_50 $$ boolean result = GrStringUtil.parseRegexCharacters(text, chars, null, true)[ FD ]
Line_35 $$ if (!text.startsWith("\""))-->Line_36 $$ return null[ CD ]
