Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_52 $$ while (reader.hasNext()) [ CD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_11 $$ boolean handled = handleCommonAttributes(builder, reader, i)[ FD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_11 $$ boolean handled = handleCommonAttributes(builder, reader, i)[ CD ]
Line_8 $$ String attr = reader.getAttributeValue(i)-->Line_24 $$ builder.setScheduleExprDayOfWeek(attr)[ FD ]
Line_63 $$ if (loadableElements.methodName != null) -->Line_65 $$ if (timeoutMethod != null) [ CD ]
Line_8 $$ String attr = reader.getAttributeValue(i)-->Line_36 $$ builder.setScheduleExprStartDate(new Date(Long.parseLong(attr)))[ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_66 $$ builder.setTimeoutMethod(timeoutMethod)[ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_61 $$ builder.setPrimaryKey(deserialize(loadableElements.primaryKey))[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_5 $$ builder.setAutoTimer(false).setPersistent(true)[ CD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_86 $$ builder.setAutoTimer(true)[ FD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_9 $$ String attrName = reader.getAttributeLocalName(i)[ FD ]
Line_8 $$ String attr = reader.getAttributeValue(i)-->Line_27 $$ builder.setScheduleExprDayOfMonth(attr)[ FD ]
Line_11 $$ boolean handled = handleCommonAttributes(builder, reader, i)-->Line_82 $$ if (!handled) [ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) [ CD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_39 $$ builder.setScheduleExprEndDate(new Date(Long.parseLong(attr)))[ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_42 $$ builder.setScheduleExprTimezone(attr)[ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_75 $$ EjbLogger.ROOT_LOGGER.timerReinstatementFailed(builder.getTimedObjectId(), builder.getId(), e)[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_9 $$ String attrName = reader.getAttributeLocalName(i)[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_50 $$ throw ParseUtils.missingRequired(reader, required)[ FD ]
Line_8 $$ String attr = reader.getAttributeValue(i)-->Line_42 $$ builder.setScheduleExprTimezone(attr)[ FD ]
Line_65 $$ if (timeoutMethod != null) -->Line_69 $$ EjbLogger.ROOT_LOGGER.timerReinstatementFailed(builder.getTimedObjectId(), builder.getId(), null)[ CD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_18 $$ builder.setScheduleExprMinute(attr)[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_53 $$ switch(reader.nextTag()) [ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_27 $$ builder.setScheduleExprDayOfMonth(attr)[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_87 $$ parseTimeoutMethod(reader, loadableElements)[ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_58 $$ builder.setInfo((Serializable) deserialize(loadableElements.info))[ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_30 $$ builder.setScheduleExprMonth(attr)[ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_33 $$ builder.setScheduleExprYear(attr)[ FD ]
Line_57 $$ if (loadableElements.info != null) -->Line_58 $$ builder.setInfo((Serializable) deserialize(loadableElements.info))[ CD ]
Line_60 $$ if (loadableElements.primaryKey != null) -->Line_61 $$ builder.setPrimaryKey(deserialize(loadableElements.primaryKey))[ CD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_9 $$ String attrName = reader.getAttributeLocalName(i)[ CD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_69 $$ EjbLogger.ROOT_LOGGER.timerReinstatementFailed(builder.getTimedObjectId(), builder.getId(), null)[ FD ]
Line_63 $$ if (loadableElements.methodName != null) -->Line_64 $$ Method timeoutMethod = CalendarTimer.getTimeoutMethod(new TimeoutMethod(loadableElements.className, loadableElements.methodName, loadableElements.params.toArray(new String[loadableElements.params.size()])), classLoader)[ CD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_72 $$ timers.add(builder.build(timerService))[ FD ]
Line_3 $$ LoadableElements loadableElements = new LoadableElements()-->Line_81 $$ boolean handled = handleCommonElements(reader, loadableElements)[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_83 $$ switch(reader.getName().getLocalPart()) [ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_21 $$ builder.setScheduleExprHour(attr)[ FD ]
Line_8 $$ String attr = reader.getAttributeValue(i)-->Line_18 $$ builder.setScheduleExprMinute(attr)[ FD ]
Line_8 $$ String attr = reader.getAttributeValue(i)-->Line_21 $$ builder.setScheduleExprHour(attr)[ FD ]
Line_65 $$ if (timeoutMethod != null) -->Line_67 $$ timers.add(builder.build(timerService))[ CD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_8 $$ String attr = reader.getAttributeValue(i)[ CD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_8 $$ String attr = reader.getAttributeValue(i)[ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_36 $$ builder.setScheduleExprStartDate(new Date(Long.parseLong(attr)))[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_8 $$ String attr = reader.getAttributeValue(i)[ FD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_11 $$ boolean handled = handleCommonAttributes(builder, reader, i)[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_49 $$ if (!required.isEmpty()) [ CD ]
Line_65 $$ if (timeoutMethod != null) -->Line_66 $$ builder.setTimeoutMethod(timeoutMethod)[ CD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_91 $$ throw ParseUtils.unexpectedElement(reader)[ FD ]
Line_64 $$ Method timeoutMethod = CalendarTimer.getTimeoutMethod(new TimeoutMethod(loadableElements.className, loadableElements.methodName, loadableElements.params.toArray(new String[loadableElements.params.size()])), classLoader)-->Line_66 $$ builder.setTimeoutMethod(timeoutMethod)[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_81 $$ boolean handled = handleCommonElements(reader, loadableElements)[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_67 $$ timers.add(builder.build(timerService))[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_45 $$ throw ParseUtils.unexpectedAttribute(reader, i)[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_52 $$ while (reader.hasNext()) [ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_15 $$ builder.setScheduleExprSecond(attr)[ FD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_10 $$ required.remove(attrName)[ CD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_45 $$ throw ParseUtils.unexpectedAttribute(reader, i)[ FD ]
Line_6 $$ final Set<String> required = new HashSet(Arrays.asList(new String[] -->Line_50 $$ throw ParseUtils.missingRequired(reader, required)[ FD ]
Line_8 $$ String attr = reader.getAttributeValue(i)-->Line_30 $$ builder.setScheduleExprMonth(attr)[ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_72 $$ timers.add(builder.build(timerService))[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()[ CD ]
Line_6 $$ final Set<String> required = new HashSet(Arrays.asList(new String[] -->Line_49 $$ if (!required.isEmpty()) [ FD ]
Line_64 $$ Method timeoutMethod = CalendarTimer.getTimeoutMethod(new TimeoutMethod(loadableElements.className, loadableElements.methodName, loadableElements.params.toArray(new String[loadableElements.params.size()])), classLoader)-->Line_65 $$ if (timeoutMethod != null) [ FD ]
Line_11 $$ boolean handled = handleCommonAttributes(builder, reader, i)-->Line_12 $$ if (!handled) [ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_3 $$ LoadableElements loadableElements = new LoadableElements()[ CD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_6 $$ final Set<String> required = new HashSet(Arrays.asList(new String[] [ CD ]
Line_63 $$ if (loadableElements.methodName != null) -->Line_72 $$ timers.add(builder.build(timerService))[ CD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) [ FD ]
Line_9 $$ String attrName = reader.getAttributeLocalName(i)-->Line_10 $$ required.remove(attrName)[ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_24 $$ builder.setScheduleExprDayOfWeek(attr)[ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_5 $$ builder.setAutoTimer(false).setPersistent(true)[ FD ]
Line_6 $$ final Set<String> required = new HashSet(Arrays.asList(new String[] -->Line_10 $$ required.remove(attrName)[ FD ]
Line_8 $$ String attr = reader.getAttributeValue(i)-->Line_33 $$ builder.setScheduleExprYear(attr)[ FD ]
Line_3 $$ LoadableElements loadableElements = new LoadableElements()-->Line_87 $$ parseTimeoutMethod(reader, loadableElements)[ FD ]
Line_2 $$ private void parseCalendarTimer(XMLExtendedStreamReader reader, List<TimerImpl> timers) throws XMLStreamException -->Line_11 $$ boolean handled = handleCommonAttributes(builder, reader, i)[ FD ]
Line_8 $$ String attr = reader.getAttributeValue(i)-->Line_39 $$ builder.setScheduleExprEndDate(new Date(Long.parseLong(attr)))[ FD ]
Line_8 $$ String attr = reader.getAttributeValue(i)-->Line_15 $$ builder.setScheduleExprSecond(attr)[ FD ]
Line_4 $$ CalendarTimer.Builder builder = CalendarTimer.builder()-->Line_67 $$ timers.add(builder.build(timerService))[ FD ]
Line_7 $$ for (int i = 0; i < reader.getAttributeCount(); ++i) -->Line_12 $$ if (!handled) [ CD ]
Line_81 $$ boolean handled = handleCommonElements(reader, loadableElements)-->Line_82 $$ if (!handled) [ FD ]
