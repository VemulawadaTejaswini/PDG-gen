Line_3 $$ Map<String, String> map = split(tokenStr)-->Line_8 $$ AuthenticationToken token = new AuthenticationToken(map.get(USER_NAME), map.get(PRINCIPAL), map.get(TYPE))[ FD ]
Line_3 $$ Map<String, String> map = split(tokenStr)-->Line_4 $$ if (!map.keySet().equals(ATTRIBUTES)) [ FD ]
Line_7 $$ long expires = Long.parseLong(map.get(EXPIRES))-->Line_9 $$ token.setExpires(expires)[ FD ]
Line_2 $$ public static AuthenticationToken parse(String tokenStr) throws AuthenticationException -->Line_3 $$ Map<String, String> map = split(tokenStr)[ CD ]
Line_2 $$ public static AuthenticationToken parse(String tokenStr) throws AuthenticationException -->Line_9 $$ token.setExpires(expires)[ CD ]
Line_2 $$ public static AuthenticationToken parse(String tokenStr) throws AuthenticationException -->Line_4 $$ if (!map.keySet().equals(ATTRIBUTES)) [ CD ]
Line_3 $$ Map<String, String> map = split(tokenStr)-->Line_7 $$ long expires = Long.parseLong(map.get(EXPIRES))[ FD ]
Line_2 $$ public static AuthenticationToken parse(String tokenStr) throws AuthenticationException -->Line_8 $$ AuthenticationToken token = new AuthenticationToken(map.get(USER_NAME), map.get(PRINCIPAL), map.get(TYPE))[ CD ]
Line_2 $$ public static AuthenticationToken parse(String tokenStr) throws AuthenticationException -->Line_3 $$ Map<String, String> map = split(tokenStr)[ FD ]
Line_8 $$ AuthenticationToken token = new AuthenticationToken(map.get(USER_NAME), map.get(PRINCIPAL), map.get(TYPE))-->Line_9 $$ token.setExpires(expires)[ FD ]
Line_2 $$ public static AuthenticationToken parse(String tokenStr) throws AuthenticationException -->Line_7 $$ long expires = Long.parseLong(map.get(EXPIRES))[ CD ]
Line_2 $$ public static AuthenticationToken parse(String tokenStr) throws AuthenticationException -->Line_10 $$ return token[ CD ]
