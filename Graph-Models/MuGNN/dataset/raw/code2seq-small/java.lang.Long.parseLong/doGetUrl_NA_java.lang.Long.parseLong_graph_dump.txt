Line_16 $$ advertisedSize = Long.parseLong(contentLength)-->Line_23 $$ return receiveFile(url.toExternalForm(), localPaths, dstStorage, getChecksum, advertisedSize, advertisedDigest, fsImageName, stream, null)[ FD ]
Line_5 $$ connection = (HttpURLConnection) connectionFactory.openConnection(url, isSpnegoEnabled)-->Line_22 $$ InputStream stream = connection.getInputStream()[ FD ]
Line_5 $$ connection = (HttpURLConnection) connectionFactory.openConnection(url, isSpnegoEnabled)-->Line_20 $$ MD5Hash advertisedDigest = parseMD5Header(connection)[ FD ]
Line_3 $$ HttpURLConnection connection-->Line_10 $$ if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) [ FD ]
Line_2 $$ public static MD5Hash doGetUrl(URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum) throws IOException -->Line_20 $$ MD5Hash advertisedDigest = parseMD5Header(connection)[ CD ]
Line_22 $$ InputStream stream = connection.getInputStream()-->Line_23 $$ return receiveFile(url.toExternalForm(), localPaths, dstStorage, getChecksum, advertisedSize, advertisedDigest, fsImageName, stream, null)[ FD ]
Line_3 $$ HttpURLConnection connection-->Line_11 $$ throw new HttpGetFailedException("Image transfer servlet at " + url + " failed with status code " + connection.getResponseCode() + "\nResponse message:\n" + connection.getResponseMessage(), connection)[ FD ]
Line_5 $$ connection = (HttpURLConnection) connectionFactory.openConnection(url, isSpnegoEnabled)-->Line_10 $$ if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) [ FD ]
Line_13 $$ long advertisedSize-->Line_23 $$ return receiveFile(url.toExternalForm(), localPaths, dstStorage, getChecksum, advertisedSize, advertisedDigest, fsImageName, stream, null)[ FD ]
Line_3 $$ HttpURLConnection connection-->Line_20 $$ MD5Hash advertisedDigest = parseMD5Header(connection)[ FD ]
Line_2 $$ public static MD5Hash doGetUrl(URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum) throws IOException -->Line_14 $$ String contentLength = connection.getHeaderField(CONTENT_LENGTH)[ CD ]
Line_3 $$ HttpURLConnection connection-->Line_5 $$ connection = (HttpURLConnection) connectionFactory.openConnection(url, isSpnegoEnabled)[ FD ]
Line_2 $$ public static MD5Hash doGetUrl(URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum) throws IOException -->Line_5 $$ connection = (HttpURLConnection) connectionFactory.openConnection(url, isSpnegoEnabled)[ FD ]
Line_15 $$ if (contentLength != null) -->Line_16 $$ advertisedSize = Long.parseLong(contentLength)[ CD ]
Line_5 $$ connection = (HttpURLConnection) connectionFactory.openConnection(url, isSpnegoEnabled)-->Line_11 $$ throw new HttpGetFailedException("Image transfer servlet at " + url + " failed with status code " + connection.getResponseCode() + "\nResponse message:\n" + connection.getResponseMessage(), connection)[ FD ]
Line_2 $$ public static MD5Hash doGetUrl(URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum) throws IOException -->Line_22 $$ InputStream stream = connection.getInputStream()[ CD ]
Line_2 $$ public static MD5Hash doGetUrl(URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum) throws IOException -->Line_23 $$ return receiveFile(url.toExternalForm(), localPaths, dstStorage, getChecksum, advertisedSize, advertisedDigest, fsImageName, stream, null)[ CD ]
Line_21 $$ String fsImageName = connection.getHeaderField(ImageServlet.HADOOP_IMAGE_EDITS_HEADER)-->Line_23 $$ return receiveFile(url.toExternalForm(), localPaths, dstStorage, getChecksum, advertisedSize, advertisedDigest, fsImageName, stream, null)[ FD ]
Line_3 $$ HttpURLConnection connection-->Line_22 $$ InputStream stream = connection.getInputStream()[ FD ]
Line_2 $$ public static MD5Hash doGetUrl(URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum) throws IOException -->Line_13 $$ long advertisedSize[ CD ]
Line_5 $$ connection = (HttpURLConnection) connectionFactory.openConnection(url, isSpnegoEnabled)-->Line_14 $$ String contentLength = connection.getHeaderField(CONTENT_LENGTH)[ FD ]
Line_2 $$ public static MD5Hash doGetUrl(URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum) throws IOException -->Line_3 $$ HttpURLConnection connection[ CD ]
Line_20 $$ MD5Hash advertisedDigest = parseMD5Header(connection)-->Line_23 $$ return receiveFile(url.toExternalForm(), localPaths, dstStorage, getChecksum, advertisedSize, advertisedDigest, fsImageName, stream, null)[ FD ]
Line_3 $$ HttpURLConnection connection-->Line_9 $$ setTimeout(connection)[ FD ]
Line_5 $$ connection = (HttpURLConnection) connectionFactory.openConnection(url, isSpnegoEnabled)-->Line_9 $$ setTimeout(connection)[ FD ]
Line_2 $$ public static MD5Hash doGetUrl(URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum) throws IOException -->Line_15 $$ if (contentLength != null) [ CD ]
Line_3 $$ HttpURLConnection connection-->Line_14 $$ String contentLength = connection.getHeaderField(CONTENT_LENGTH)[ FD ]
Line_2 $$ public static MD5Hash doGetUrl(URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum) throws IOException -->Line_9 $$ setTimeout(connection)[ CD ]
Line_14 $$ String contentLength = connection.getHeaderField(CONTENT_LENGTH)-->Line_15 $$ if (contentLength != null) [ FD ]
Line_2 $$ public static MD5Hash doGetUrl(URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum) throws IOException -->Line_21 $$ String fsImageName = connection.getHeaderField(ImageServlet.HADOOP_IMAGE_EDITS_HEADER)[ CD ]
Line_3 $$ HttpURLConnection connection-->Line_21 $$ String fsImageName = connection.getHeaderField(ImageServlet.HADOOP_IMAGE_EDITS_HEADER)[ FD ]
Line_5 $$ connection = (HttpURLConnection) connectionFactory.openConnection(url, isSpnegoEnabled)-->Line_21 $$ String fsImageName = connection.getHeaderField(ImageServlet.HADOOP_IMAGE_EDITS_HEADER)[ FD ]
Line_13 $$ long advertisedSize-->Line_16 $$ advertisedSize = Long.parseLong(contentLength)[ FD ]
Line_2 $$ public static MD5Hash doGetUrl(URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum) throws IOException -->Line_23 $$ return receiveFile(url.toExternalForm(), localPaths, dstStorage, getChecksum, advertisedSize, advertisedDigest, fsImageName, stream, null)[ FD ]
Line_2 $$ public static MD5Hash doGetUrl(URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum) throws IOException -->Line_10 $$ if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) [ CD ]
Line_14 $$ String contentLength = connection.getHeaderField(CONTENT_LENGTH)-->Line_16 $$ advertisedSize = Long.parseLong(contentLength)[ FD ]
