Line_4 $$ final int textLength = text.length()-->Line_5 $$ if (textLength == 0) [ FD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_16 $$ integer <<= bitsInRadix[ FD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_8 $$ long integer = textLength == 1 ? 0 : Long.parseLong(text.substring(0, textLength - 1), radix)[ CD ]
Line_8 $$ long integer = textLength == 1 ? 0 : Long.parseLong(text.substring(0, textLength - 1), radix)-->Line_16 $$ integer <<= bitsInRadix[ FD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_18 $$ return integer[ CD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_17 $$ integer |= lastDigit[ CD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_4 $$ final int textLength = text.length()[ CD ]
Line_12 $$ final int lastDigit = Character.digit(text.charAt(textLength - 1), radix)-->Line_17 $$ integer |= lastDigit[ FD ]
Line_3 $$ final int radix = 1 << bitsInRadix-->Line_12 $$ final int lastDigit = Character.digit(text.charAt(textLength - 1), radix)[ FD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_16 $$ integer <<= bitsInRadix[ CD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_9 $$ if ((integer & (-1L << (maxBits - bitsInRadix))) != 0) [ CD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_4 $$ final int textLength = text.length()[ FD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_13 $$ if (lastDigit == -1) [ CD ]
Line_3 $$ final int radix = 1 << bitsInRadix-->Line_8 $$ long integer = textLength == 1 ? 0 : Long.parseLong(text.substring(0, textLength - 1), radix)[ FD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_12 $$ final int lastDigit = Character.digit(text.charAt(textLength - 1), radix)[ FD ]
Line_16 $$ integer <<= bitsInRadix-->Line_17 $$ integer |= lastDigit[ FD ]
Line_8 $$ long integer = textLength == 1 ? 0 : Long.parseLong(text.substring(0, textLength - 1), radix)-->Line_17 $$ integer |= lastDigit[ FD ]
Line_12 $$ final int lastDigit = Character.digit(text.charAt(textLength - 1), radix)-->Line_13 $$ if (lastDigit == -1) [ FD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_5 $$ if (textLength == 0) [ CD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_12 $$ final int lastDigit = Character.digit(text.charAt(textLength - 1), radix)[ CD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_8 $$ long integer = textLength == 1 ? 0 : Long.parseLong(text.substring(0, textLength - 1), radix)[ FD ]
Line_2 $$ private static long parseDigits(final String text, final int bitsInRadix, final int maxBits) throws NumberFormatException -->Line_3 $$ final int radix = 1 << bitsInRadix[ CD ]
