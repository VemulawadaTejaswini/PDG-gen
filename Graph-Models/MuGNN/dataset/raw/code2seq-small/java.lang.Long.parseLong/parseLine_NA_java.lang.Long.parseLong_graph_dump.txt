Line_15 $$ if (pathStart > -1) -->Line_17 $$ if (pathEnd > -1) [ CD ]
Line_30 $$ final String substring = line.substring(CommitEventType.committedRevision.getText().length())-->Line_32 $$ while (StringUtil.isWhiteSpace(substring.charAt(cnt))) [ FD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_3 $$ if (StringUtil.isEmptyOrSpaces(line))[ CD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_30 $$ final String substring = line.substring(CommitEventType.committedRevision.getText().length())[ FD ]
Line_40 $$ if (num.length() > 0) -->Line_53 $$ LOG.info(message)[ CD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_59 $$ Matcher matcher = CHANGED_PATH.matcher(line)[ FD ]
Line_29 $$ if (line.startsWith(CommitEventType.committedRevision.getText())) -->Line_60 $$ if (matcher.matches()) [ CD ]
Line_30 $$ final String substring = line.substring(CommitEventType.committedRevision.getText().length())-->Line_37 $$ num.append(substring.charAt(cnt))[ FD ]
Line_31 $$ int cnt = 0-->Line_32 $$ while (StringUtil.isWhiteSpace(substring.charAt(cnt))) [ FD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_11 $$ if (line.startsWith(CommitEventType.skipped.getText())) [ CD ]
Line_31 $$ int cnt = 0-->Line_37 $$ num.append(substring.charAt(cnt))[ FD ]
Line_29 $$ if (line.startsWith(CommitEventType.committedRevision.getText())) -->Line_35 $$ final StringBuilder num = new StringBuilder()[ CD ]
Line_15 $$ if (pathStart > -1) -->Line_16 $$ int pathEnd = line.indexOf('\'', pathStart + 1)[ CD ]
Line_5 $$ if (line.startsWith(CommitEventType.transmittingDeltas.getText())) -->Line_9 $$ return[ CD ]
Line_16 $$ int pathEnd = line.indexOf('\'', pathStart + 1)-->Line_18 $$ target = toFile(line.substring(pathStart + 1, pathEnd))[ FD ]
Line_29 $$ if (line.startsWith(CommitEventType.committedRevision.getText())) -->Line_31 $$ int cnt = 0[ CD ]
Line_47 $$ final String message = "Wrong committed revision number: " + num.toString() + ", string: " + line-->Line_53 $$ LOG.info(message)[ FD ]
Line_36 $$ while (Character.isDigit(substring.charAt(cnt))) -->Line_38 $$ ++cnt[ CD ]
Line_13 $$ if (myHandler != null) -->Line_14 $$ int pathStart = line.indexOf('\'')[ CD ]
Line_32 $$ while (StringUtil.isWhiteSpace(substring.charAt(cnt))) -->Line_33 $$ ++cnt[ CD ]
Line_35 $$ final StringBuilder num = new StringBuilder()-->Line_47 $$ final String message = "Wrong committed revision number: " + num.toString() + ", string: " + line[ FD ]
Line_60 $$ if (matcher.matches()) -->Line_62 $$ if (type == null) [ CD ]
Line_18 $$ target = toFile(line.substring(pathStart + 1, pathEnd))-->Line_21 $$ if (target != null) [ FD ]
Line_62 $$ if (type == null) -->Line_63 $$ LOG.info("Can not parse event type: " + line)[ CD ]
Line_30 $$ final String substring = line.substring(CommitEventType.committedRevision.getText().length())-->Line_36 $$ while (Character.isDigit(substring.charAt(cnt))) [ FD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_18 $$ target = toFile(line.substring(pathStart + 1, pathEnd))[ FD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_5 $$ if (line.startsWith(CommitEventType.transmittingDeltas.getText())) [ CD ]
Line_21 $$ if (target != null) -->Line_24 $$ LOG.info("Can not parse 'Skipped' path " + line)[ CD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_5 $$ if (line.startsWith(CommitEventType.transmittingDeltas.getText())) [ FD ]
Line_29 $$ if (line.startsWith(CommitEventType.committedRevision.getText())) -->Line_32 $$ while (StringUtil.isWhiteSpace(substring.charAt(cnt))) [ CD ]
Line_14 $$ int pathStart = line.indexOf('\'')-->Line_15 $$ if (pathStart > -1) [ FD ]
Line_36 $$ while (Character.isDigit(substring.charAt(cnt))) -->Line_37 $$ num.append(substring.charAt(cnt))[ CD ]
Line_31 $$ int cnt = 0-->Line_38 $$ ++cnt[ FD ]
Line_35 $$ final StringBuilder num = new StringBuilder()-->Line_40 $$ if (num.length() > 0) [ FD ]
Line_43 $$ if (myHandler != null) -->Line_44 $$ myHandler.committedRevision(myCommittedRevision)[ CD ]
Line_12 $$ File target = null-->Line_18 $$ target = toFile(line.substring(pathStart + 1, pathEnd))[ FD ]
Line_11 $$ if (line.startsWith(CommitEventType.skipped.getText())) -->Line_27 $$ return[ CD ]
Line_29 $$ if (line.startsWith(CommitEventType.committedRevision.getText())) -->Line_40 $$ if (num.length() > 0) [ CD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_3 $$ if (StringUtil.isEmptyOrSpaces(line))[ FD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_14 $$ int pathStart = line.indexOf('\'')[ FD ]
Line_35 $$ final StringBuilder num = new StringBuilder()-->Line_42 $$ myCommittedRevision = Long.parseLong(num.toString())[ FD ]
Line_29 $$ if (line.startsWith(CommitEventType.committedRevision.getText())) -->Line_59 $$ Matcher matcher = CHANGED_PATH.matcher(line)[ CD ]
Line_61 $$ final CommitEventType type = CommitEventType.create(matcher.group(1))-->Line_66 $$ myHandler.commitEvent(type, toFile(matcher.group(4)))[ FD ]
Line_16 $$ int pathEnd = line.indexOf('\'', pathStart + 1)-->Line_17 $$ if (pathEnd > -1) [ FD ]
Line_3 $$ if (StringUtil.isEmptyOrSpaces(line))-->Line_4 $$ return[ CD ]
Line_31 $$ int cnt = 0-->Line_36 $$ while (Character.isDigit(substring.charAt(cnt))) [ FD ]
Line_62 $$ if (type == null) -->Line_64 $$ return[ CD ]
Line_60 $$ if (matcher.matches()) -->Line_68 $$ LOG.info("Can not parse output: " + line)[ CD ]
Line_35 $$ final StringBuilder num = new StringBuilder()-->Line_37 $$ num.append(substring.charAt(cnt))[ FD ]
Line_47 $$ final String message = "Wrong committed revision number: " + num.toString() + ", string: " + line-->Line_48 $$ LOG.info(message, e)[ FD ]
Line_59 $$ Matcher matcher = CHANGED_PATH.matcher(line)-->Line_61 $$ final CommitEventType type = CommitEventType.create(matcher.group(1))[ FD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_16 $$ int pathEnd = line.indexOf('\'', pathStart + 1)[ FD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_11 $$ if (line.startsWith(CommitEventType.skipped.getText())) [ FD ]
Line_13 $$ if (myHandler != null) -->Line_15 $$ if (pathStart > -1) [ CD ]
Line_6 $$ if (myHandler != null) -->Line_7 $$ myHandler.commitEvent(CommitEventType.transmittingDeltas, myBase)[ CD ]
Line_13 $$ if (myHandler != null) -->Line_21 $$ if (target != null) [ CD ]
Line_17 $$ if (pathEnd > -1) -->Line_18 $$ target = toFile(line.substring(pathStart + 1, pathEnd))[ CD ]
Line_35 $$ final StringBuilder num = new StringBuilder()-->Line_52 $$ final String message = "Missing committed revision number: " + num.toString() + ", string: " + line[ FD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_29 $$ if (line.startsWith(CommitEventType.committedRevision.getText())) [ FD ]
Line_61 $$ final CommitEventType type = CommitEventType.create(matcher.group(1))-->Line_62 $$ if (type == null) [ FD ]
Line_11 $$ if (line.startsWith(CommitEventType.skipped.getText())) -->Line_13 $$ if (myHandler != null) [ CD ]
Line_21 $$ if (target != null) -->Line_22 $$ myHandler.commitEvent(CommitEventType.skipped, myBase)[ CD ]
Line_12 $$ File target = null-->Line_21 $$ if (target != null) [ FD ]
Line_2 $$ private void parseLine(String line) throws SvnBindException -->Line_29 $$ if (line.startsWith(CommitEventType.committedRevision.getText())) [ CD ]
Line_29 $$ if (line.startsWith(CommitEventType.committedRevision.getText())) -->Line_57 $$ if (myHandler == null)[ CD ]
Line_60 $$ if (matcher.matches()) -->Line_66 $$ myHandler.commitEvent(type, toFile(matcher.group(4)))[ CD ]
Line_59 $$ Matcher matcher = CHANGED_PATH.matcher(line)-->Line_66 $$ myHandler.commitEvent(type, toFile(matcher.group(4)))[ FD ]
Line_31 $$ int cnt = 0-->Line_33 $$ ++cnt[ FD ]
Line_29 $$ if (line.startsWith(CommitEventType.committedRevision.getText())) -->Line_30 $$ final String substring = line.substring(CommitEventType.committedRevision.getText().length())[ CD ]
Line_60 $$ if (matcher.matches()) -->Line_61 $$ final CommitEventType type = CommitEventType.create(matcher.group(1))[ CD ]
Line_29 $$ if (line.startsWith(CommitEventType.committedRevision.getText())) -->Line_36 $$ while (Character.isDigit(substring.charAt(cnt))) [ CD ]
Line_5 $$ if (line.startsWith(CommitEventType.transmittingDeltas.getText())) -->Line_6 $$ if (myHandler != null) [ CD ]
Line_11 $$ if (line.startsWith(CommitEventType.skipped.getText())) -->Line_12 $$ File target = null[ CD ]
Line_57 $$ if (myHandler == null)-->Line_58 $$ return[ CD ]
Line_59 $$ Matcher matcher = CHANGED_PATH.matcher(line)-->Line_60 $$ if (matcher.matches()) [ FD ]
