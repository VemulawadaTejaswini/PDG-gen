Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_12 $$ status.setIsLocked(true)[ FD ]
Line_3 $$ final StatusType propertiesStatus = parsePropertiesStatus(attributes)-->Line_4 $$ status.setPropertiesStatus(propertiesStatus)[ FD ]
Line_10 $$ final String locked = attributes.getValue("wc-locked")-->Line_11 $$ if (locked != null && Boolean.parseBoolean(locked)) [ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_26 $$ final String revision = attributes.getValue("revision")[ FD ]
Line_26 $$ final String revision = attributes.getValue("revision")-->Line_27 $$ if (!StringUtil.isEmptyOrSpaces(revision)) [ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_18 $$ final String treeConflicted = attributes.getValue("tree-conflicted")[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_19 $$ if (treeConflicted != null && Boolean.parseBoolean(treeConflicted)) [ CD ]
Line_14 $$ final String copied = attributes.getValue("copied")-->Line_15 $$ if (copied != null && Boolean.parseBoolean(copied)) [ FD ]
Line_7 $$ if (StatusType.STATUS_CONFLICTED.equals(propertiesStatus) || StatusType.STATUS_CONFLICTED.equals(contentsStatus)) -->Line_8 $$ status.setIsConflicted(true)[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_15 $$ if (copied != null && Boolean.parseBoolean(copied)) [ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_23 $$ if (switched != null && Boolean.parseBoolean(switched)) [ CD ]
Line_29 $$ final long number = Long.parseLong(revision)-->Line_30 $$ status.setRevision(SVNRevision.create(number))[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_22 $$ final String switched = attributes.getValue("switched")[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_10 $$ final String locked = attributes.getValue("wc-locked")[ FD ]
Line_15 $$ if (copied != null && Boolean.parseBoolean(copied)) -->Line_16 $$ status.setIsCopied(true)[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_3 $$ final StatusType propertiesStatus = parsePropertiesStatus(attributes)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_26 $$ final String revision = attributes.getValue("revision")[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_20 $$ status.setIsConflicted(true)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_14 $$ final String copied = attributes.getValue("copied")[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_6 $$ status.setContentsStatus(contentsStatus)[ CD ]
Line_11 $$ if (locked != null && Boolean.parseBoolean(locked)) -->Line_12 $$ status.setIsLocked(true)[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_3 $$ final StatusType propertiesStatus = parsePropertiesStatus(attributes)[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_16 $$ status.setIsCopied(true)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_11 $$ if (locked != null && Boolean.parseBoolean(locked)) [ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_4 $$ status.setPropertiesStatus(propertiesStatus)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_14 $$ final String copied = attributes.getValue("copied")[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_4 $$ status.setPropertiesStatus(propertiesStatus)[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_27 $$ if (!StringUtil.isEmptyOrSpaces(revision)) [ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_5 $$ final StatusType contentsStatus = parseContentsStatus(attributes)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_6 $$ status.setContentsStatus(contentsStatus)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_7 $$ if (StatusType.STATUS_CONFLICTED.equals(propertiesStatus) || StatusType.STATUS_CONFLICTED.equals(contentsStatus)) [ CD ]
Line_26 $$ final String revision = attributes.getValue("revision")-->Line_29 $$ final long number = Long.parseLong(revision)[ FD ]
Line_18 $$ final String treeConflicted = attributes.getValue("tree-conflicted")-->Line_19 $$ if (treeConflicted != null && Boolean.parseBoolean(treeConflicted)) [ FD ]
Line_23 $$ if (switched != null && Boolean.parseBoolean(switched)) -->Line_24 $$ status.setIsSwitched(true)[ CD ]
Line_19 $$ if (treeConflicted != null && Boolean.parseBoolean(treeConflicted)) -->Line_20 $$ status.setIsConflicted(true)[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_18 $$ final String treeConflicted = attributes.getValue("tree-conflicted")[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_30 $$ status.setRevision(SVNRevision.create(number))[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_10 $$ final String locked = attributes.getValue("wc-locked")[ CD ]
Line_22 $$ final String switched = attributes.getValue("switched")-->Line_23 $$ if (switched != null && Boolean.parseBoolean(switched)) [ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_24 $$ status.setIsSwitched(true)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_5 $$ final StatusType contentsStatus = parseContentsStatus(attributes)[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_8 $$ status.setIsConflicted(true)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_22 $$ final String switched = attributes.getValue("switched")[ FD ]
Line_5 $$ final StatusType contentsStatus = parseContentsStatus(attributes)-->Line_6 $$ status.setContentsStatus(contentsStatus)[ FD ]
Line_5 $$ final StatusType contentsStatus = parseContentsStatus(attributes)-->Line_7 $$ if (StatusType.STATUS_CONFLICTED.equals(propertiesStatus) || StatusType.STATUS_CONFLICTED.equals(contentsStatus)) [ FD ]
Line_3 $$ final StatusType propertiesStatus = parsePropertiesStatus(attributes)-->Line_7 $$ if (StatusType.STATUS_CONFLICTED.equals(propertiesStatus) || StatusType.STATUS_CONFLICTED.equals(contentsStatus)) [ FD ]
