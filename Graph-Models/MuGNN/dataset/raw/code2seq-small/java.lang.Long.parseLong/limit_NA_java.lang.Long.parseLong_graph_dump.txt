Line_4 $$ if (limit.get().equalsIgnoreCase("all")) -->Line_8 $$ return new PlanBuilder(subPlan.getTranslations(), new LimitNode(idAllocator.getNextId(), subPlan.getRoot(), limitValue), subPlan.getSampleWeight())[ CD ]
Line_4 $$ if (limit.get().equalsIgnoreCase("all")) -->Line_7 $$ long limitValue = Long.parseLong(limit.get())[ CD ]
Line_2 $$ private PlanBuilder limit(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit) -->Line_3 $$ if (orderBy.isEmpty() && limit.isPresent()) [ FD ]
Line_2 $$ private PlanBuilder limit(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit) -->Line_3 $$ if (orderBy.isEmpty() && limit.isPresent()) [ CD ]
Line_2 $$ private PlanBuilder limit(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit) -->Line_11 $$ return subPlan[ CD ]
Line_3 $$ if (orderBy.isEmpty() && limit.isPresent()) -->Line_4 $$ if (limit.get().equalsIgnoreCase("all")) [ CD ]
Line_2 $$ private PlanBuilder limit(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit) -->Line_7 $$ long limitValue = Long.parseLong(limit.get())[ FD ]
Line_4 $$ if (limit.get().equalsIgnoreCase("all")) -->Line_5 $$ return subPlan[ CD ]
Line_2 $$ private PlanBuilder limit(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit) -->Line_4 $$ if (limit.get().equalsIgnoreCase("all")) [ FD ]
Line_2 $$ private PlanBuilder limit(PlanBuilder subPlan, List<SortItem> orderBy, Optional<String> limit) -->Line_8 $$ return new PlanBuilder(subPlan.getTranslations(), new LimitNode(idAllocator.getNextId(), subPlan.getRoot(), limitValue), subPlan.getSampleWeight())[ FD ]
