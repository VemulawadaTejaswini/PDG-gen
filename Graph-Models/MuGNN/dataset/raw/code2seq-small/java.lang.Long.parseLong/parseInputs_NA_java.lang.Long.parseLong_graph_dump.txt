Line_2 $$ public static void parseInputs(final String[] args) -->Line_60 $$ config.setLong("test.nnbench.starttime", startTime)[ CD ]
Line_19 $$ if (args[i].equals("-blockSize")) -->Line_21 $$ blockSize = Long.parseLong(args[++i])[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_54 $$ LOG.info("       Replication factor: " + replicationFactorPerFile)[ CD ]
Line_34 $$ if (args[i].equals("-baseDir")) -->Line_37 $$ if (args[i].equals("-readFileAfterOpen")) [ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_69 $$ config.set("test.nnbench.outputdir.name", OUTPUT_DIR_NAME)[ CD ]
Line_28 $$ if (args[i].equals("-numberOfFiles")) -->Line_31 $$ if (args[i].equals("-replicationFactorPerFile")) [ CD ]
Line_19 $$ if (args[i].equals("-blockSize")) -->Line_22 $$ if (args[i].equals("-bytesToWrite")) [ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_46 $$ LOG.info("           Test Operation: " + operation)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_58 $$ config.setLong("test.nnbench.maps", numberOfMaps)[ CD ]
Line_25 $$ if (args[i].equals("-bytesPerChecksum")) -->Line_27 $$ bytesPerChecksum = Long.parseLong(args[++i])[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_49 $$ LOG.info("        Number of reduces: " + numberOfReduces)[ CD ]
Line_37 $$ if (args[i].equals("-readFileAfterOpen")) -->Line_38 $$ checkArgs(i + 1, args.length)[ CD ]
Line_37 $$ if (args[i].equals("-readFileAfterOpen")) -->Line_39 $$ readFileAfterOpen = Boolean.parseBoolean(args[++i])[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_70 $$ config.set("test.nnbench.controldir.name", CONTROL_DIR_NAME)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_66 $$ config.set("test.nnbench.basedir", baseDir)[ CD ]
Line_13 $$ if (args[i].equals("-reduces")) -->Line_15 $$ numberOfReduces = Long.parseLong(args[++i])[ CD ]
Line_7 $$ for (int i = 0; i < args.length; i++) -->Line_39 $$ readFileAfterOpen = Boolean.parseBoolean(args[++i])[ FD ]
Line_22 $$ if (args[i].equals("-bytesToWrite")) -->Line_25 $$ if (args[i].equals("-bytesPerChecksum")) [ CD ]
Line_31 $$ if (args[i].equals("-replicationFactorPerFile")) -->Line_33 $$ replicationFactorPerFile = Short.parseShort(args[++i])[ CD ]
Line_40 $$ if (args[i].equals("-help")) -->Line_42 $$ System.exit(-1)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_51 $$ LOG.info("           Bytes to write: " + bytesToWrite)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_53 $$ LOG.info("          Number of files: " + numberOfFiles)[ CD ]
Line_7 $$ for (int i = 0; i < args.length; i++) -->Line_9 $$ operation = args[++i][ FD ]
Line_8 $$ if (args[i].equals("-operation")) -->Line_10 $$ if (args[i].equals("-maps")) [ CD ]
Line_28 $$ if (args[i].equals("-numberOfFiles")) -->Line_30 $$ numberOfFiles = Long.parseLong(args[++i])[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_67 $$ config.setBoolean("test.nnbench.readFileAfterOpen", readFileAfterOpen)[ CD ]
Line_34 $$ if (args[i].equals("-baseDir")) -->Line_35 $$ checkArgs(i + 1, args.length)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_45 $$ LOG.info("Test Inputs: ")[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_68 $$ config.set("test.nnbench.datadir.name", DATA_DIR_NAME)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_65 $$ config.setInt("test.nnbench.replicationfactor", (int) replicationFactorPerFile)[ CD ]
Line_7 $$ for (int i = 0; i < args.length; i++) -->Line_12 $$ numberOfMaps = Long.parseLong(args[++i])[ FD ]
Line_31 $$ if (args[i].equals("-replicationFactorPerFile")) -->Line_32 $$ checkArgs(i + 1, args.length)[ CD ]
Line_16 $$ if (args[i].equals("-startTime")) -->Line_17 $$ checkArgs(i + 1, args.length)[ CD ]
Line_40 $$ if (args[i].equals("-help")) -->Line_41 $$ displayUsage()[ CD ]
Line_7 $$ for (int i = 0; i < args.length; i++) -->Line_27 $$ bytesPerChecksum = Long.parseLong(args[++i])[ FD ]
Line_7 $$ for (int i = 0; i < args.length; i++) -->Line_21 $$ blockSize = Long.parseLong(args[++i])[ FD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_3 $$ if (args.length == 0) [ CD ]
Line_25 $$ if (args[i].equals("-bytesPerChecksum")) -->Line_26 $$ checkArgs(i + 1, args.length)[ CD ]
Line_7 $$ for (int i = 0; i < args.length; i++) -->Line_33 $$ replicationFactorPerFile = Short.parseShort(args[++i])[ FD ]
Line_7 $$ for (int i = 0; i < args.length; i++) -->Line_36 $$ baseDir = args[++i][ FD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_57 $$ config.set("test.nnbench.operation", operation)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_56 $$ LOG.info("     Read file after open: " + readFileAfterOpen)[ CD ]
Line_19 $$ if (args[i].equals("-blockSize")) -->Line_20 $$ checkArgs(i + 1, args.length)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_48 $$ LOG.info("           Number of maps: " + numberOfMaps)[ CD ]
Line_22 $$ if (args[i].equals("-bytesToWrite")) -->Line_23 $$ checkArgs(i + 1, args.length)[ CD ]
Line_13 $$ if (args[i].equals("-reduces")) -->Line_14 $$ checkArgs(i + 1, args.length)[ CD ]
Line_25 $$ if (args[i].equals("-bytesPerChecksum")) -->Line_28 $$ if (args[i].equals("-numberOfFiles")) [ CD ]
Line_16 $$ if (args[i].equals("-startTime")) -->Line_19 $$ if (args[i].equals("-blockSize")) [ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_59 $$ config.setLong("test.nnbench.reduces", numberOfReduces)[ CD ]
Line_3 $$ if (args.length == 0) -->Line_5 $$ System.exit(-1)[ CD ]
Line_7 $$ for (int i = 0; i < args.length; i++) -->Line_15 $$ numberOfReduces = Long.parseLong(args[++i])[ FD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_47 $$ LOG.info("               Start time: " + sdf.format(new Date(startTime)))[ CD ]
Line_10 $$ if (args[i].equals("-maps")) -->Line_12 $$ numberOfMaps = Long.parseLong(args[++i])[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_55 $$ LOG.info("                 Base dir: " + baseDir)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_62 $$ config.setInt("test.nnbench.bytestowrite", bytesToWrite)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_50 $$ LOG.info("               Block Size: " + blockSize)[ CD ]
Line_22 $$ if (args[i].equals("-bytesToWrite")) -->Line_24 $$ bytesToWrite = Integer.parseInt(args[++i])[ CD ]
Line_10 $$ if (args[i].equals("-maps")) -->Line_13 $$ if (args[i].equals("-reduces")) [ CD ]
Line_13 $$ if (args[i].equals("-reduces")) -->Line_16 $$ if (args[i].equals("-startTime")) [ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_64 $$ config.setLong("test.nnbench.numberoffiles", numberOfFiles)[ CD ]
Line_3 $$ if (args.length == 0) -->Line_4 $$ displayUsage()[ CD ]
Line_28 $$ if (args[i].equals("-numberOfFiles")) -->Line_29 $$ checkArgs(i + 1, args.length)[ CD ]
Line_7 $$ for (int i = 0; i < args.length; i++) -->Line_24 $$ bytesToWrite = Integer.parseInt(args[++i])[ FD ]
Line_7 $$ for (int i = 0; i < args.length; i++) -->Line_8 $$ if (args[i].equals("-operation")) [ CD ]
Line_31 $$ if (args[i].equals("-replicationFactorPerFile")) -->Line_34 $$ if (args[i].equals("-baseDir")) [ CD ]
Line_37 $$ if (args[i].equals("-readFileAfterOpen")) -->Line_40 $$ if (args[i].equals("-help")) [ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_61 $$ config.setLong("test.nnbench.blocksize", blockSize)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_52 $$ LOG.info("       Bytes per checksum: " + bytesPerChecksum)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_63 $$ config.setLong("test.nnbench.bytesperchecksum", bytesPerChecksum)[ CD ]
Line_10 $$ if (args[i].equals("-maps")) -->Line_11 $$ checkArgs(i + 1, args.length)[ CD ]
Line_2 $$ public static void parseInputs(final String[] args) -->Line_7 $$ for (int i = 0; i < args.length; i++) [ CD ]
Line_7 $$ for (int i = 0; i < args.length; i++) -->Line_18 $$ startTime = Long.parseLong(args[++i]) * 1000[ FD ]
Line_7 $$ for (int i = 0; i < args.length; i++) -->Line_30 $$ numberOfFiles = Long.parseLong(args[++i])[ FD ]
