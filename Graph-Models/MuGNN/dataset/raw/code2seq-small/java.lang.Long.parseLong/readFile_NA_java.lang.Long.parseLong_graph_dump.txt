Line_9 $$ br = null-->Line_11 $$ IOUtils.cleanup(LOG, br)[ FD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), Charsets.UTF_8))-->Line_8 $$ br.close()[ FD ]
Line_2 $$ public static long readFile(File file, long defaultVal) throws IOException -->Line_4 $$ if (file.exists()) [ FD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), Charsets.UTF_8))-->Line_7 $$ val = Long.parseLong(br.readLine())[ FD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), Charsets.UTF_8))-->Line_9 $$ br = null[ FD ]
Line_2 $$ public static long readFile(File file, long defaultVal) throws IOException -->Line_14 $$ return val[ CD ]
Line_4 $$ if (file.exists()) -->Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), Charsets.UTF_8))[ CD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), Charsets.UTF_8))-->Line_11 $$ IOUtils.cleanup(LOG, br)[ FD ]
Line_2 $$ public static long readFile(File file, long defaultVal) throws IOException -->Line_3 $$ long val = defaultVal[ CD ]
Line_2 $$ public static long readFile(File file, long defaultVal) throws IOException -->Line_4 $$ if (file.exists()) [ CD ]
Line_3 $$ long val = defaultVal-->Line_7 $$ val = Long.parseLong(br.readLine())[ FD ]
