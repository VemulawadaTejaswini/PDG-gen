Line_10 $$ StringBuilder str = new StringBuilder()-->Line_11 $$ str.append(o1.getValue())[ FD ]
Line_30 $$ newtype = OutputType.LONG-->Line_37 $$ newtype = OutputType.INTEGER[ FD ]
Line_3 $$ if (o1.getMeasurementType().equals(o2.getMeasurementType()) && o1.getOperationType().equals(o2.getOperationType())) -->Line_7 $$ String mType = o1.getMeasurementType()[ CD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_11 $$ str.append(o1.getValue())[ FD ]
Line_4 $$ Object newvalue = null-->Line_14 $$ newvalue = str.toString()[ FD ]
Line_3 $$ if (o1.getMeasurementType().equals(o2.getMeasurementType()) && o1.getOperationType().equals(o2.getOperationType())) -->Line_4 $$ Object newvalue = null[ CD ]
Line_8 $$ if (o1.getOutputType() == OutputType.STRING || o2.getOutputType() == OutputType.STRING) -->Line_12 $$ str.append(STRING_SEP)[ CD ]
Line_4 $$ Object newvalue = null-->Line_25 $$ newvalue = Float.parseFloat(o1.getValue().toString()) + Float.parseFloat(o2.getValue().toString())[ FD ]
Line_8 $$ if (o1.getOutputType() == OutputType.STRING || o2.getOutputType() == OutputType.STRING) -->Line_10 $$ StringBuilder str = new StringBuilder()[ CD ]
Line_36 $$ if (o1.getOutputType() == OutputType.INTEGER || o2.getOutputType() == OutputType.INTEGER) -->Line_37 $$ newtype = OutputType.INTEGER[ CD ]
Line_22 $$ if (o1.getOutputType() == OutputType.FLOAT || o2.getOutputType() == OutputType.FLOAT) -->Line_29 $$ if (o1.getOutputType() == OutputType.LONG || o2.getOutputType() == OutputType.LONG) [ CD ]
Line_8 $$ if (o1.getOutputType() == OutputType.STRING || o2.getOutputType() == OutputType.STRING) -->Line_13 $$ str.append(o2.getValue())[ CD ]
Line_10 $$ StringBuilder str = new StringBuilder()-->Line_13 $$ str.append(o2.getValue())[ FD ]
Line_18 $$ newvalue = Double.parseDouble(o1.getValue().toString()) + Double.parseDouble(o2.getValue().toString())-->Line_32 $$ newvalue = Long.parseLong(o1.getValue().toString()) + Long.parseLong(o2.getValue().toString())[ FD ]
Line_9 $$ newtype = OutputType.STRING-->Line_16 $$ newtype = OutputType.DOUBLE[ FD ]
Line_5 $$ OutputType newtype = null-->Line_30 $$ newtype = OutputType.LONG[ FD ]
Line_16 $$ newtype = OutputType.DOUBLE-->Line_37 $$ newtype = OutputType.INTEGER[ FD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_6 $$ String opType = o1.getOperationType()[ FD ]
Line_9 $$ newtype = OutputType.STRING-->Line_23 $$ newtype = OutputType.FLOAT[ FD ]
Line_29 $$ if (o1.getOutputType() == OutputType.LONG || o2.getOutputType() == OutputType.LONG) -->Line_36 $$ if (o1.getOutputType() == OutputType.INTEGER || o2.getOutputType() == OutputType.INTEGER) [ CD ]
Line_4 $$ Object newvalue = null-->Line_18 $$ newvalue = Double.parseDouble(o1.getValue().toString()) + Double.parseDouble(o2.getValue().toString())[ FD ]
Line_5 $$ OutputType newtype = null-->Line_9 $$ newtype = OutputType.STRING[ FD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_29 $$ if (o1.getOutputType() == OutputType.LONG || o2.getOutputType() == OutputType.LONG) [ FD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_22 $$ if (o1.getOutputType() == OutputType.FLOAT || o2.getOutputType() == OutputType.FLOAT) [ FD ]
Line_16 $$ newtype = OutputType.DOUBLE-->Line_30 $$ newtype = OutputType.LONG[ FD ]
Line_16 $$ newtype = OutputType.DOUBLE-->Line_23 $$ newtype = OutputType.FLOAT[ FD ]
Line_23 $$ newtype = OutputType.FLOAT-->Line_37 $$ newtype = OutputType.INTEGER[ FD ]
Line_4 $$ Object newvalue = null-->Line_39 $$ newvalue = Integer.parseInt(o1.getValue().toString()) + Integer.parseInt(o2.getValue().toString())[ FD ]
Line_14 $$ newvalue = str.toString()-->Line_32 $$ newvalue = Long.parseLong(o1.getValue().toString()) + Long.parseLong(o2.getValue().toString())[ FD ]
Line_29 $$ if (o1.getOutputType() == OutputType.LONG || o2.getOutputType() == OutputType.LONG) -->Line_30 $$ newtype = OutputType.LONG[ CD ]
Line_8 $$ if (o1.getOutputType() == OutputType.STRING || o2.getOutputType() == OutputType.STRING) -->Line_14 $$ newvalue = str.toString()[ CD ]
Line_14 $$ newvalue = str.toString()-->Line_25 $$ newvalue = Float.parseFloat(o1.getValue().toString()) + Float.parseFloat(o2.getValue().toString())[ FD ]
Line_3 $$ if (o1.getMeasurementType().equals(o2.getMeasurementType()) && o1.getOperationType().equals(o2.getOperationType())) -->Line_5 $$ OutputType newtype = null[ CD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_13 $$ str.append(o2.getValue())[ FD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_18 $$ newvalue = Double.parseDouble(o1.getValue().toString()) + Double.parseDouble(o2.getValue().toString())[ FD ]
Line_5 $$ OutputType newtype = null-->Line_23 $$ newtype = OutputType.FLOAT[ FD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_32 $$ newvalue = Long.parseLong(o1.getValue().toString()) + Long.parseLong(o2.getValue().toString())[ FD ]
Line_5 $$ OutputType newtype = null-->Line_37 $$ newtype = OutputType.INTEGER[ FD ]
Line_15 $$ if (o1.getOutputType() == OutputType.DOUBLE || o2.getOutputType() == OutputType.DOUBLE) -->Line_16 $$ newtype = OutputType.DOUBLE[ CD ]
Line_9 $$ newtype = OutputType.STRING-->Line_30 $$ newtype = OutputType.LONG[ FD ]
Line_8 $$ if (o1.getOutputType() == OutputType.STRING || o2.getOutputType() == OutputType.STRING) -->Line_15 $$ if (o1.getOutputType() == OutputType.DOUBLE || o2.getOutputType() == OutputType.DOUBLE) [ CD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_3 $$ if (o1.getMeasurementType().equals(o2.getMeasurementType()) && o1.getOperationType().equals(o2.getOperationType())) [ FD ]
Line_23 $$ newtype = OutputType.FLOAT-->Line_30 $$ newtype = OutputType.LONG[ FD ]
Line_14 $$ newvalue = str.toString()-->Line_18 $$ newvalue = Double.parseDouble(o1.getValue().toString()) + Double.parseDouble(o2.getValue().toString())[ FD ]
Line_9 $$ newtype = OutputType.STRING-->Line_37 $$ newtype = OutputType.INTEGER[ FD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_39 $$ newvalue = Integer.parseInt(o1.getValue().toString()) + Integer.parseInt(o2.getValue().toString())[ FD ]
Line_10 $$ StringBuilder str = new StringBuilder()-->Line_14 $$ newvalue = str.toString()[ FD ]
Line_8 $$ if (o1.getOutputType() == OutputType.STRING || o2.getOutputType() == OutputType.STRING) -->Line_11 $$ str.append(o1.getValue())[ CD ]
Line_8 $$ if (o1.getOutputType() == OutputType.STRING || o2.getOutputType() == OutputType.STRING) -->Line_9 $$ newtype = OutputType.STRING[ CD ]
Line_5 $$ OutputType newtype = null-->Line_16 $$ newtype = OutputType.DOUBLE[ FD ]
Line_18 $$ newvalue = Double.parseDouble(o1.getValue().toString()) + Double.parseDouble(o2.getValue().toString())-->Line_39 $$ newvalue = Integer.parseInt(o1.getValue().toString()) + Integer.parseInt(o2.getValue().toString())[ FD ]
Line_14 $$ newvalue = str.toString()-->Line_39 $$ newvalue = Integer.parseInt(o1.getValue().toString()) + Integer.parseInt(o2.getValue().toString())[ FD ]
Line_22 $$ if (o1.getOutputType() == OutputType.FLOAT || o2.getOutputType() == OutputType.FLOAT) -->Line_23 $$ newtype = OutputType.FLOAT[ CD ]
Line_18 $$ newvalue = Double.parseDouble(o1.getValue().toString()) + Double.parseDouble(o2.getValue().toString())-->Line_25 $$ newvalue = Float.parseFloat(o1.getValue().toString()) + Float.parseFloat(o2.getValue().toString())[ FD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_15 $$ if (o1.getOutputType() == OutputType.DOUBLE || o2.getOutputType() == OutputType.DOUBLE) [ FD ]
Line_25 $$ newvalue = Float.parseFloat(o1.getValue().toString()) + Float.parseFloat(o2.getValue().toString())-->Line_39 $$ newvalue = Integer.parseInt(o1.getValue().toString()) + Integer.parseInt(o2.getValue().toString())[ FD ]
Line_10 $$ StringBuilder str = new StringBuilder()-->Line_12 $$ str.append(STRING_SEP)[ FD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_7 $$ String mType = o1.getMeasurementType()[ FD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_36 $$ if (o1.getOutputType() == OutputType.INTEGER || o2.getOutputType() == OutputType.INTEGER) [ FD ]
Line_4 $$ Object newvalue = null-->Line_32 $$ newvalue = Long.parseLong(o1.getValue().toString()) + Long.parseLong(o2.getValue().toString())[ FD ]
Line_3 $$ if (o1.getMeasurementType().equals(o2.getMeasurementType()) && o1.getOperationType().equals(o2.getOperationType())) -->Line_6 $$ String opType = o1.getOperationType()[ CD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_25 $$ newvalue = Float.parseFloat(o1.getValue().toString()) + Float.parseFloat(o2.getValue().toString())[ FD ]
Line_25 $$ newvalue = Float.parseFloat(o1.getValue().toString()) + Float.parseFloat(o2.getValue().toString())-->Line_32 $$ newvalue = Long.parseLong(o1.getValue().toString()) + Long.parseLong(o2.getValue().toString())[ FD ]
Line_3 $$ if (o1.getMeasurementType().equals(o2.getMeasurementType()) && o1.getOperationType().equals(o2.getOperationType())) -->Line_44 $$ return new OperationOutput(newtype, opType, mType, newvalue)[ CD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_3 $$ if (o1.getMeasurementType().equals(o2.getMeasurementType()) && o1.getOperationType().equals(o2.getOperationType())) [ CD ]
Line_2 $$ static OperationOutput merge(OperationOutput o1, OperationOutput o2) -->Line_8 $$ if (o1.getOutputType() == OutputType.STRING || o2.getOutputType() == OutputType.STRING) [ FD ]
Line_3 $$ if (o1.getMeasurementType().equals(o2.getMeasurementType()) && o1.getOperationType().equals(o2.getOperationType())) -->Line_8 $$ if (o1.getOutputType() == OutputType.STRING || o2.getOutputType() == OutputType.STRING) [ CD ]
Line_32 $$ newvalue = Long.parseLong(o1.getValue().toString()) + Long.parseLong(o2.getValue().toString())-->Line_39 $$ newvalue = Integer.parseInt(o1.getValue().toString()) + Integer.parseInt(o2.getValue().toString())[ FD ]
Line_15 $$ if (o1.getOutputType() == OutputType.DOUBLE || o2.getOutputType() == OutputType.DOUBLE) -->Line_22 $$ if (o1.getOutputType() == OutputType.FLOAT || o2.getOutputType() == OutputType.FLOAT) [ CD ]
