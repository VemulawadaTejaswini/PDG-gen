Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_10 $$ String[] elements = Strings.splitStringToArray(spare.get(), ';')[ CD ]
Line_32 $$ attributes = emptyMap()-->Line_34 $$ attributes = new HashMap(attributesSize)[ FD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_17 $$ if (elements.length < contextSize + 2) [ CD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_31 $$ if (attributesSize == 0) [ CD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_3 $$ CharsRefBuilder spare = new CharsRefBuilder()[ CD ]
Line_23 $$ int sep = element.indexOf(':')-->Line_24 $$ if (sep == -1) [ FD ]
Line_3 $$ CharsRefBuilder spare = new CharsRefBuilder()-->Line_10 $$ String[] elements = Strings.splitStringToArray(spare.get(), ';')[ FD ]
Line_32 $$ attributes = emptyMap()-->Line_38 $$ attributes.put(element.substring(0, sep), element.substring(sep + 1))[ FD ]
Line_21 $$ for (int i = 0; i < contextSize; i++) -->Line_22 $$ String element = elements[index++][ CD ]
Line_21 $$ for (int i = 0; i < contextSize; i++) -->Line_27 $$ context[i] = new ScrollIdForNode(element.substring(sep + 1), Long.parseLong(element.substring(0, sep)))[ CD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_20 $$ ScrollIdForNode[] context = new ScrollIdForNode[contextSize][ CD ]
Line_22 $$ String element = elements[index++]-->Line_38 $$ attributes.put(element.substring(0, sep), element.substring(sep + 1))[ FD ]
Line_35 $$ for (int i = 0; i < attributesSize; i++) -->Line_38 $$ attributes.put(element.substring(0, sep), element.substring(sep + 1))[ CD ]
Line_36 $$ String element = elements[index++]-->Line_38 $$ attributes.put(element.substring(0, sep), element.substring(sep + 1))[ FD ]
Line_21 $$ for (int i = 0; i < contextSize; i++) -->Line_24 $$ if (sep == -1) [ CD ]
Line_23 $$ int sep = element.indexOf(':')-->Line_27 $$ context[i] = new ScrollIdForNode(element.substring(sep + 1), Long.parseLong(element.substring(0, sep)))[ FD ]
Line_35 $$ for (int i = 0; i < attributesSize; i++) -->Line_37 $$ int sep = element.indexOf(':')[ CD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_5 $$ byte[] decode = Base64.decode(scrollId, Base64.URL_SAFE)[ FD ]
Line_36 $$ String element = elements[index++]-->Line_37 $$ int sep = element.indexOf(':')[ FD ]
Line_29 $$ Map<String, String> attributes-->Line_38 $$ attributes.put(element.substring(0, sep), element.substring(sep + 1))[ FD ]
Line_22 $$ String element = elements[index++]-->Line_27 $$ context[i] = new ScrollIdForNode(element.substring(sep + 1), Long.parseLong(element.substring(0, sep)))[ FD ]
Line_34 $$ attributes = new HashMap(attributesSize)-->Line_38 $$ attributes.put(element.substring(0, sep), element.substring(sep + 1))[ FD ]
Line_3 $$ CharsRefBuilder spare = new CharsRefBuilder()-->Line_6 $$ spare.copyUTF8Bytes(decode, 0, decode.length)[ FD ]
Line_16 $$ int contextSize = Integer.parseInt(elements[index++])-->Line_21 $$ for (int i = 0; i < contextSize; i++) [ FD ]
Line_31 $$ if (attributesSize == 0) -->Line_34 $$ attributes = new HashMap(attributesSize)[ CD ]
Line_21 $$ for (int i = 0; i < contextSize; i++) -->Line_23 $$ int sep = element.indexOf(':')[ CD ]
Line_31 $$ if (attributesSize == 0) -->Line_32 $$ attributes = emptyMap()[ CD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_21 $$ for (int i = 0; i < contextSize; i++) [ CD ]
Line_30 $$ int attributesSize = Integer.parseInt(elements[index++])-->Line_31 $$ if (attributesSize == 0) [ FD ]
Line_37 $$ int sep = element.indexOf(':')-->Line_38 $$ attributes.put(element.substring(0, sep), element.substring(sep + 1))[ FD ]
Line_5 $$ byte[] decode = Base64.decode(scrollId, Base64.URL_SAFE)-->Line_6 $$ spare.copyUTF8Bytes(decode, 0, decode.length)[ FD ]
Line_35 $$ for (int i = 0; i < attributesSize; i++) -->Line_36 $$ String element = elements[index++][ CD ]
Line_31 $$ if (attributesSize == 0) -->Line_35 $$ for (int i = 0; i < attributesSize; i++) [ CD ]
Line_14 $$ int index = 0-->Line_30 $$ int attributesSize = Integer.parseInt(elements[index++])[ FD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_14 $$ int index = 0[ CD ]
Line_14 $$ int index = 0-->Line_22 $$ String element = elements[index++][ FD ]
Line_21 $$ for (int i = 0; i < contextSize; i++) -->Line_35 $$ for (int i = 0; i < attributesSize; i++) [ FD ]
Line_14 $$ int index = 0-->Line_36 $$ String element = elements[index++][ FD ]
Line_23 $$ int sep = element.indexOf(':')-->Line_38 $$ attributes.put(element.substring(0, sep), element.substring(sep + 1))[ FD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_15 $$ String type = elements[index++][ CD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_16 $$ int contextSize = Integer.parseInt(elements[index++])[ CD ]
Line_22 $$ String element = elements[index++]-->Line_23 $$ int sep = element.indexOf(':')[ FD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_11 $$ if (elements.length < 2) [ CD ]
Line_29 $$ Map<String, String> attributes-->Line_34 $$ attributes = new HashMap(attributesSize)[ FD ]
Line_14 $$ int index = 0-->Line_15 $$ String type = elements[index++][ FD ]
Line_22 $$ String element = elements[index++]-->Line_37 $$ int sep = element.indexOf(':')[ FD ]
Line_30 $$ int attributesSize = Integer.parseInt(elements[index++])-->Line_35 $$ for (int i = 0; i < attributesSize; i++) [ FD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_30 $$ int attributesSize = Integer.parseInt(elements[index++])[ CD ]
Line_14 $$ int index = 0-->Line_16 $$ int contextSize = Integer.parseInt(elements[index++])[ FD ]
Line_29 $$ Map<String, String> attributes-->Line_32 $$ attributes = emptyMap()[ FD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_41 $$ return new ParsedScrollId(scrollId, type, context, attributes)[ CD ]
Line_2 $$ public static ParsedScrollId parseScrollId(String scrollId) -->Line_29 $$ Map<String, String> attributes[ CD ]
