Line_37 $$ final String toReplace = escapeRegexGroup(escMatcher, EscapeRegexGroup.ESCAPED_SUBSTRING)-->Line_38 $$ str = escapeMap.get(toReplace)[ FD ]
Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)-->Line_7 $$ if (index < escMatcher.start()) [ FD ]
Line_24 $$ str = unicode ? new String(new char[] -->Line_40 $$ if (str != null) [ FD ]
Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)-->Line_14 $$ final String unicode16 = escapeRegexGroup(escMatcher, EscapeRegexGroup.UNICODE_16BIT)[ FD ]
Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)-->Line_16 $$ final String wholeMatch = escapeRegexGroup(escMatcher, EscapeRegexGroup.WHOLE_MATCH)[ FD ]
Line_35 $$ str = wholeMatch-->Line_40 $$ if (str != null) [ FD ]
Line_20 $$ str = new String(new char[] -->Line_33 $$ str = s[ FD ]
Line_21 $$ if (!raw && hex != null) -->Line_23 $$ if (escapedUnicode && unicode16 != null) [ CD ]
Line_22 $$ str = new String(new char[] -->Line_33 $$ str = s[ FD ]
Line_17 $$ final boolean escapedUnicode = raw && unicode || !raw-->Line_25 $$ if (escapedUnicode && unicode32 != null) [ FD ]
Line_26 $$ String s = wholeMatch-->Line_33 $$ str = s[ FD ]
Line_19 $$ if (!raw && octal != null) -->Line_20 $$ str = new String(new char[] [ CD ]
Line_20 $$ str = new String(new char[] -->Line_35 $$ str = wholeMatch[ FD ]
Line_20 $$ str = new String(new char[] -->Line_38 $$ str = escapeMap.get(toReplace)[ FD ]
Line_44 $$ index = escMatcher.end()-->Line_46 $$ final TextRange range = TextRange.create(index, encoded.length())[ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_19 $$ if (!raw && octal != null) [ FD ]
Line_33 $$ str = s-->Line_42 $$ result.add(Pair.create(wholeMatchRange.shiftRight(offset), str))[ FD ]
Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)-->Line_13 $$ final String hex = escapeRegexGroup(escMatcher, EscapeRegexGroup.HEXADECIMAL)[ FD ]
Line_24 $$ str = unicode ? new String(new char[] -->Line_38 $$ str = escapeMap.get(toReplace)[ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_46 $$ final TextRange range = TextRange.create(index, encoded.length())[ FD ]
Line_18 $$ final String str-->Line_33 $$ str = s[ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_6 $$ while (escMatcher.find(index)) [ CD ]
Line_22 $$ str = new String(new char[] -->Line_24 $$ str = unicode ? new String(new char[] [ FD ]
Line_33 $$ str = s-->Line_35 $$ str = wholeMatch[ FD ]
Line_25 $$ if (escapedUnicode && unicode32 != null) -->Line_27 $$ if (unicode) [ CD ]
Line_13 $$ final String hex = escapeRegexGroup(escMatcher, EscapeRegexGroup.HEXADECIMAL)-->Line_22 $$ str = new String(new char[] [ FD ]
Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)-->Line_15 $$ final String unicode32 = escapeRegexGroup(escMatcher, EscapeRegexGroup.UNICODE_32BIT)[ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_9 $$ final TextRange offsetRange = range.shiftRight(offset)[ FD ]
Line_18 $$ final String str-->Line_20 $$ str = new String(new char[] [ FD ]
Line_20 $$ str = new String(new char[] -->Line_42 $$ result.add(Pair.create(wholeMatchRange.shiftRight(offset), str))[ FD ]
Line_12 $$ final String octal = escapeRegexGroup(escMatcher, EscapeRegexGroup.OCTAL)-->Line_20 $$ str = new String(new char[] [ FD ]
Line_23 $$ if (escapedUnicode && unicode16 != null) -->Line_25 $$ if (escapedUnicode && unicode32 != null) [ CD ]
Line_24 $$ str = unicode ? new String(new char[] -->Line_33 $$ str = s[ FD ]
Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)-->Line_6 $$ while (escMatcher.find(index)) [ FD ]
Line_6 $$ while (escMatcher.find(index)) -->Line_7 $$ if (index < escMatcher.start()) [ CD ]
Line_5 $$ int index = 0-->Line_8 $$ final TextRange range = TextRange.create(index, escMatcher.start())[ FD ]
Line_5 $$ int index = 0-->Line_46 $$ final TextRange range = TextRange.create(index, encoded.length())[ FD ]
Line_22 $$ str = new String(new char[] -->Line_38 $$ str = escapeMap.get(toReplace)[ FD ]
Line_46 $$ final TextRange range = TextRange.create(index, encoded.length())-->Line_47 $$ final TextRange offRange = range.shiftRight(offset)[ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_5 $$ int index = 0[ CD ]
Line_6 $$ while (escMatcher.find(index)) -->Line_40 $$ if (str != null) [ CD ]
Line_25 $$ if (escapedUnicode && unicode32 != null) -->Line_26 $$ String s = wholeMatch[ CD ]
Line_3 $$ final List<Pair<TextRange, String>> result = new ArrayList<Pair<TextRange, String>>()-->Line_10 $$ result.add(Pair.create(offsetRange, range.substring(encoded)))[ FD ]
Line_20 $$ str = new String(new char[] -->Line_22 $$ str = new String(new char[] [ FD ]
Line_9 $$ final TextRange offsetRange = range.shiftRight(offset)-->Line_10 $$ result.add(Pair.create(offsetRange, range.substring(encoded)))[ FD ]
Line_18 $$ final String str-->Line_38 $$ str = escapeMap.get(toReplace)[ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_3 $$ final List<Pair<TextRange, String>> result = new ArrayList<Pair<TextRange, String>>()[ CD ]
Line_33 $$ str = s-->Line_40 $$ if (str != null) [ FD ]
Line_46 $$ final TextRange range = TextRange.create(index, encoded.length())-->Line_48 $$ result.add(Pair.create(offRange, range.substring(encoded)))[ FD ]
Line_6 $$ while (escMatcher.find(index)) -->Line_19 $$ if (!raw && octal != null) [ CD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_49 $$ return result[ CD ]
Line_6 $$ while (escMatcher.find(index)) -->Line_14 $$ final String unicode16 = escapeRegexGroup(escMatcher, EscapeRegexGroup.UNICODE_16BIT)[ CD ]
Line_40 $$ if (str != null) -->Line_41 $$ final TextRange wholeMatchRange = TextRange.create(escMatcher.start(), escMatcher.end())[ CD ]
Line_6 $$ while (escMatcher.find(index)) -->Line_44 $$ index = escMatcher.end()[ CD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)[ CD ]
Line_18 $$ final String str-->Line_42 $$ result.add(Pair.create(wholeMatchRange.shiftRight(offset), str))[ FD ]
Line_3 $$ final List<Pair<TextRange, String>> result = new ArrayList<Pair<TextRange, String>>()-->Line_42 $$ result.add(Pair.create(wholeMatchRange.shiftRight(offset), str))[ FD ]
Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)-->Line_8 $$ final TextRange range = TextRange.create(index, escMatcher.start())[ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_42 $$ result.add(Pair.create(wholeMatchRange.shiftRight(offset), str))[ FD ]
Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)-->Line_44 $$ index = escMatcher.end()[ FD ]
Line_8 $$ final TextRange range = TextRange.create(index, escMatcher.start())-->Line_47 $$ final TextRange offRange = range.shiftRight(offset)[ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_48 $$ result.add(Pair.create(offRange, range.substring(encoded)))[ CD ]
Line_15 $$ final String unicode32 = escapeRegexGroup(escMatcher, EscapeRegexGroup.UNICODE_32BIT)-->Line_29 $$ s = new String(Character.toChars((int) Long.parseLong(unicode32, 16)))[ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)[ FD ]
Line_5 $$ int index = 0-->Line_7 $$ if (index < escMatcher.start()) [ FD ]
Line_6 $$ while (escMatcher.find(index)) -->Line_17 $$ final boolean escapedUnicode = raw && unicode || !raw[ CD ]
Line_41 $$ final TextRange wholeMatchRange = TextRange.create(escMatcher.start(), escMatcher.end())-->Line_42 $$ result.add(Pair.create(wholeMatchRange.shiftRight(offset), str))[ FD ]
Line_34 $$ if (raw) -->Line_37 $$ final String toReplace = escapeRegexGroup(escMatcher, EscapeRegexGroup.ESCAPED_SUBSTRING)[ CD ]
Line_25 $$ if (escapedUnicode && unicode32 != null) -->Line_33 $$ str = s[ CD ]
Line_22 $$ str = new String(new char[] -->Line_40 $$ if (str != null) [ FD ]
Line_18 $$ final String str-->Line_24 $$ str = unicode ? new String(new char[] [ FD ]
Line_44 $$ index = escMatcher.end()-->Line_7 $$ if (index < escMatcher.start()) [ FD ]
Line_38 $$ str = escapeMap.get(toReplace)-->Line_40 $$ if (str != null) [ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_17 $$ final boolean escapedUnicode = raw && unicode || !raw[ FD ]
Line_35 $$ str = wholeMatch-->Line_42 $$ result.add(Pair.create(wholeMatchRange.shiftRight(offset), str))[ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_47 $$ final TextRange offRange = range.shiftRight(offset)[ FD ]
Line_29 $$ s = new String(Character.toChars((int) Long.parseLong(unicode32, 16)))-->Line_33 $$ str = s[ FD ]
Line_14 $$ final String unicode16 = escapeRegexGroup(escMatcher, EscapeRegexGroup.UNICODE_16BIT)-->Line_24 $$ str = unicode ? new String(new char[] [ FD ]
Line_5 $$ int index = 0-->Line_44 $$ index = escMatcher.end()[ FD ]
Line_34 $$ if (raw) -->Line_38 $$ str = escapeMap.get(toReplace)[ CD ]
Line_38 $$ str = escapeMap.get(toReplace)-->Line_42 $$ result.add(Pair.create(wholeMatchRange.shiftRight(offset), str))[ FD ]
Line_18 $$ final String str-->Line_35 $$ str = wholeMatch[ FD ]
Line_20 $$ str = new String(new char[] -->Line_24 $$ str = unicode ? new String(new char[] [ FD ]
Line_25 $$ if (escapedUnicode && unicode32 != null) -->Line_34 $$ if (raw) [ CD ]
Line_7 $$ if (index < escMatcher.start()) -->Line_10 $$ result.add(Pair.create(offsetRange, range.substring(encoded)))[ CD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_21 $$ if (!raw && hex != null) [ FD ]
Line_23 $$ if (escapedUnicode && unicode16 != null) -->Line_24 $$ str = unicode ? new String(new char[] [ CD ]
Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)-->Line_12 $$ final String octal = escapeRegexGroup(escMatcher, EscapeRegexGroup.OCTAL)[ FD ]
Line_7 $$ if (index < escMatcher.start()) -->Line_9 $$ final TextRange offsetRange = range.shiftRight(offset)[ CD ]
Line_7 $$ if (index < escMatcher.start()) -->Line_8 $$ final TextRange range = TextRange.create(index, escMatcher.start())[ CD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_25 $$ if (escapedUnicode && unicode32 != null) [ FD ]
Line_35 $$ str = wholeMatch-->Line_38 $$ str = escapeMap.get(toReplace)[ FD ]
Line_47 $$ final TextRange offRange = range.shiftRight(offset)-->Line_48 $$ result.add(Pair.create(offRange, range.substring(encoded)))[ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_48 $$ result.add(Pair.create(offRange, range.substring(encoded)))[ FD ]
Line_16 $$ final String wholeMatch = escapeRegexGroup(escMatcher, EscapeRegexGroup.WHOLE_MATCH)-->Line_35 $$ str = wholeMatch[ FD ]
Line_33 $$ str = s-->Line_38 $$ str = escapeMap.get(toReplace)[ FD ]
Line_6 $$ while (escMatcher.find(index)) -->Line_18 $$ final String str[ CD ]
Line_6 $$ while (escMatcher.find(index)) -->Line_15 $$ final String unicode32 = escapeRegexGroup(escMatcher, EscapeRegexGroup.UNICODE_32BIT)[ CD ]
Line_18 $$ final String str-->Line_22 $$ str = new String(new char[] [ FD ]
Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)-->Line_37 $$ final String toReplace = escapeRegexGroup(escMatcher, EscapeRegexGroup.ESCAPED_SUBSTRING)[ FD ]
Line_24 $$ str = unicode ? new String(new char[] -->Line_35 $$ str = wholeMatch[ FD ]
Line_44 $$ index = escMatcher.end()-->Line_6 $$ while (escMatcher.find(index)) [ FD ]
Line_24 $$ str = unicode ? new String(new char[] -->Line_42 $$ result.add(Pair.create(wholeMatchRange.shiftRight(offset), str))[ FD ]
Line_26 $$ String s = wholeMatch-->Line_29 $$ s = new String(Character.toChars((int) Long.parseLong(unicode32, 16)))[ FD ]
Line_8 $$ final TextRange range = TextRange.create(index, escMatcher.start())-->Line_10 $$ result.add(Pair.create(offsetRange, range.substring(encoded)))[ FD ]
Line_44 $$ index = escMatcher.end()-->Line_8 $$ final TextRange range = TextRange.create(index, escMatcher.start())[ FD ]
Line_6 $$ while (escMatcher.find(index)) -->Line_16 $$ final String wholeMatch = escapeRegexGroup(escMatcher, EscapeRegexGroup.WHOLE_MATCH)[ CD ]
Line_6 $$ while (escMatcher.find(index)) -->Line_13 $$ final String hex = escapeRegexGroup(escMatcher, EscapeRegexGroup.HEXADECIMAL)[ CD ]
Line_22 $$ str = new String(new char[] -->Line_42 $$ result.add(Pair.create(wholeMatchRange.shiftRight(offset), str))[ FD ]
Line_6 $$ while (escMatcher.find(index)) -->Line_12 $$ final String octal = escapeRegexGroup(escMatcher, EscapeRegexGroup.OCTAL)[ CD ]
Line_18 $$ final String str-->Line_40 $$ if (str != null) [ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_47 $$ final TextRange offRange = range.shiftRight(offset)[ CD ]
Line_5 $$ int index = 0-->Line_6 $$ while (escMatcher.find(index)) [ FD ]
Line_21 $$ if (!raw && hex != null) -->Line_22 $$ str = new String(new char[] [ CD ]
Line_20 $$ str = new String(new char[] -->Line_40 $$ if (str != null) [ FD ]
Line_8 $$ final TextRange range = TextRange.create(index, escMatcher.start())-->Line_48 $$ result.add(Pair.create(offRange, range.substring(encoded)))[ FD ]
Line_40 $$ if (str != null) -->Line_42 $$ result.add(Pair.create(wholeMatchRange.shiftRight(offset), str))[ CD ]
Line_17 $$ final boolean escapedUnicode = raw && unicode || !raw-->Line_23 $$ if (escapedUnicode && unicode16 != null) [ FD ]
Line_34 $$ if (raw) -->Line_35 $$ str = wholeMatch[ CD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_10 $$ result.add(Pair.create(offsetRange, range.substring(encoded)))[ FD ]
Line_2 $$ private static List<Pair<TextRange, String>> getDecodedFragments(@NotNull String encoded, int offset, boolean raw, boolean unicode) -->Line_46 $$ final TextRange range = TextRange.create(index, encoded.length())[ CD ]
Line_19 $$ if (!raw && octal != null) -->Line_21 $$ if (!raw && hex != null) [ CD ]
Line_8 $$ final TextRange range = TextRange.create(index, escMatcher.start())-->Line_9 $$ final TextRange offsetRange = range.shiftRight(offset)[ FD ]
Line_4 $$ final Matcher escMatcher = PATTERN_ESCAPE.matcher(encoded)-->Line_41 $$ final TextRange wholeMatchRange = TextRange.create(escMatcher.start(), escMatcher.end())[ FD ]
Line_22 $$ str = new String(new char[] -->Line_35 $$ str = wholeMatch[ FD ]
Line_3 $$ final List<Pair<TextRange, String>> result = new ArrayList<Pair<TextRange, String>>()-->Line_48 $$ result.add(Pair.create(offRange, range.substring(encoded)))[ FD ]
