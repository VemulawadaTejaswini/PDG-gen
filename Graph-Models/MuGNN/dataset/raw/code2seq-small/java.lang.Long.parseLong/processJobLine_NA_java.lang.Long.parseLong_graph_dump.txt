Line_68 $$ if (submitTime != null) -->Line_77 $$ if (launchTime != null && jobID != null && currentJobID.equals(jobID)) [ CD ]
Line_61 $$ if (jobName != null) -->Line_62 $$ Matcher m = streamingJobnamePattern.matcher(jobName)[ CD ]
Line_106 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) -->Line_109 $$ currentJobReduceTimes.enter(reduceEnd - sortEnd)[ CD ]
Line_10 $$ String launchTime = line.get("LAUNCH_TIME")-->Line_51 $$ jobBeingTraced.setLaunchTime(Long.parseLong(launchTime))[ FD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_91 $$ Histogram currentJobShuffleTimes = new Histogram()[ CD ]
Line_95 $$ while (taskIter.hasNext()) -->Line_99 $$ if (mapEndTime != null) [ CD ]
Line_95 $$ while (taskIter.hasNext()) -->Line_104 $$ Long sortEnd = taskReduceAttemptSortEndTimes.get(entry.getKey())[ CD ]
Line_8 $$ String submitTime = line.get("SUBMIT_TIME")-->Line_69 $$ submitTimeCurrentJob = Long.parseLong(submitTime)[ FD ]
Line_90 $$ Histogram currentJobMapTimes = new Histogram()-->Line_100 $$ currentJobMapTimes.enter(mapEndTime - startTime)[ FD ]
Line_34 $$ if (jobBeingTraced != null) -->Line_53 $$ if (finishTime != null) [ CD ]
Line_94 $$ Iterator<Map.Entry<String, Long>> taskIter = taskAttemptStartTimes.entrySet().iterator()-->Line_95 $$ while (taskIter.hasNext()) [ FD ]
Line_5 $$ String jobID = line.get("JOBID")-->Line_79 $$ if (finishTime != null && jobID != null && currentJobID.equals(jobID)) [ FD ]
Line_82 $$ String jobResultText = line.get("JOB_STATUS")-->Line_83 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)[ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_10 $$ String launchTime = line.get("LAUNCH_TIME")[ CD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_92 $$ Histogram currentJobSortTimes = new Histogram()[ CD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_90 $$ Histogram currentJobMapTimes = new Histogram()[ CD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_117 $$ incorporateSpread(currentJobSortTimes, sortTimeSpreadDists, thisOutcome, thisJobType)[ CD ]
Line_83 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_116 $$ incorporateSpread(currentJobShuffleTimes, shuffleTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_116 $$ incorporateSpread(currentJobShuffleTimes, shuffleTimeSpreadDists, thisOutcome, thisJobType)[ CD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_7 $$ String jobPriority = line.get("JOB_PRIORITY")[ CD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_14 $$ String totalReduces = line.get("TOTAL_REDUCES")[ CD ]
Line_83 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_112 $$ canonicalDistributionsEnter(reduceTimeDists, thisOutcome, thisJobType, reduceEnd - sortEnd)[ FD ]
Line_91 $$ Histogram currentJobShuffleTimes = new Histogram()-->Line_107 $$ currentJobShuffleTimes.enter(shuffleEnd - startTime)[ FD ]
Line_106 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) -->Line_111 $$ canonicalDistributionsEnter(sortTimeDists, thisOutcome, thisJobType, sortEnd - shuffleEnd)[ CD ]
Line_9 $$ String jobName = line.get("JOBNAME")-->Line_62 $$ Matcher m = streamingJobnamePattern.matcher(jobName)[ FD ]
Line_68 $$ if (submitTime != null) -->Line_69 $$ submitTimeCurrentJob = Long.parseLong(submitTime)[ CD ]
Line_84 $$ if (submitTimeCurrentJob != 0L) -->Line_85 $$ canonicalDistributionsEnter(delayTimeDists, thisOutcome, thisJobType, launchTimeCurrentJob - submitTimeCurrentJob)[ CD ]
Line_96 $$ Map.Entry<String, Long> entry = taskIter.next()-->Line_97 $$ long startTime = entry.getValue()[ FD ]
Line_8 $$ String submitTime = line.get("SUBMIT_TIME")-->Line_47 $$ if (submitTime != null) [ FD ]
Line_93 $$ Histogram currentJobReduceTimes = new Histogram()-->Line_109 $$ currentJobReduceTimes.enter(reduceEnd - sortEnd)[ FD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_9 $$ String jobName = line.get("JOBNAME")[ FD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_12 $$ String status = line.get("JOB_STATUS")[ FD ]
Line_13 $$ String totalMaps = line.get("TOTAL_MAPS")-->Line_42 $$ jobBeingTraced.setTotalMaps(Integer.parseInt(totalMaps))[ FD ]
Line_92 $$ Histogram currentJobSortTimes = new Histogram()-->Line_108 $$ currentJobSortTimes.enter(sortEnd - shuffleEnd)[ FD ]
Line_87 $$ if (launchTimeCurrentJob != 0L) -->Line_88 $$ canonicalDistributionsEnter(runTimeDists, thisOutcome, thisJobType, endTime - launchTimeCurrentJob)[ CD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_95 $$ while (taskIter.hasNext()) [ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_13 $$ String totalMaps = line.get("TOTAL_MAPS")[ FD ]
Line_77 $$ if (launchTime != null && jobID != null && currentJobID.equals(jobID)) -->Line_79 $$ if (finishTime != null && jobID != null && currentJobID.equals(jobID)) [ CD ]
Line_83 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_85 $$ canonicalDistributionsEnter(delayTimeDists, thisOutcome, thisJobType, launchTimeCurrentJob - submitTimeCurrentJob)[ FD ]
Line_34 $$ if (jobBeingTraced != null) -->Line_47 $$ if (submitTime != null) [ CD ]
Line_50 $$ if (launchTime != null) -->Line_51 $$ jobBeingTraced.setLaunchTime(Long.parseLong(launchTime))[ CD ]
Line_47 $$ if (submitTime != null) -->Line_48 $$ jobBeingTraced.setSubmitTime(Long.parseLong(submitTime))[ CD ]
Line_41 $$ if (totalMaps != null) -->Line_42 $$ jobBeingTraced.setTotalMaps(Integer.parseInt(totalMaps))[ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_5 $$ String jobID = line.get("JOBID")[ FD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_82 $$ String jobResultText = line.get("JOB_STATUS")[ CD ]
Line_14 $$ String totalReduces = line.get("TOTAL_REDUCES")-->Line_45 $$ jobBeingTraced.setTotalReduces(Integer.parseInt(totalReduces))[ FD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_82 $$ String jobResultText = line.get("JOB_STATUS")[ FD ]
Line_6 $$ String user = line.get("USER")-->Line_36 $$ jobBeingTraced.setUser(user)[ FD ]
Line_62 $$ Matcher m = streamingJobnamePattern.matcher(jobName)-->Line_64 $$ if (m.matches()) [ FD ]
Line_8 $$ String submitTime = line.get("SUBMIT_TIME")-->Line_48 $$ jobBeingTraced.setSubmitTime(Long.parseLong(submitTime))[ FD ]
Line_83 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_101 $$ canonicalDistributionsEnter(mapTimeDists, thisOutcome, thisJobType, mapEndTime - startTime)[ FD ]
Line_95 $$ while (taskIter.hasNext()) -->Line_97 $$ long startTime = entry.getValue()[ CD ]
Line_98 $$ Long mapEndTime = taskMapAttemptFinishTimes.get(entry.getKey())-->Line_99 $$ if (mapEndTime != null) [ FD ]
Line_92 $$ Histogram currentJobSortTimes = new Histogram()-->Line_117 $$ incorporateSpread(currentJobSortTimes, sortTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_53 $$ if (finishTime != null) -->Line_55 $$ if (status != null) [ CD ]
Line_5 $$ String jobID = line.get("JOBID")-->Line_77 $$ if (launchTime != null && jobID != null && currentJobID.equals(jobID)) [ FD ]
Line_11 $$ String finishTime = line.get("FINISH_TIME")-->Line_80 $$ long endTime = Long.parseLong(finishTime)[ FD ]
Line_10 $$ String launchTime = line.get("LAUNCH_TIME")-->Line_50 $$ if (launchTime != null) [ FD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_94 $$ Iterator<Map.Entry<String, Long>> taskIter = taskAttemptStartTimes.entrySet().iterator()[ CD ]
Line_34 $$ if (jobBeingTraced != null) -->Line_35 $$ if (user != null) [ CD ]
Line_83 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_111 $$ canonicalDistributionsEnter(sortTimeDists, thisOutcome, thisJobType, sortEnd - shuffleEnd)[ FD ]
Line_9 $$ String jobName = line.get("JOBNAME")-->Line_61 $$ if (jobName != null) [ FD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_87 $$ if (launchTimeCurrentJob != 0L) [ CD ]
Line_93 $$ Histogram currentJobReduceTimes = new Histogram()-->Line_118 $$ incorporateSpread(currentJobReduceTimes, reduceTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_94 $$ Iterator<Map.Entry<String, Long>> taskIter = taskAttemptStartTimes.entrySet().iterator()-->Line_96 $$ Map.Entry<String, Long> entry = taskIter.next()[ FD ]
Line_15 $$ if (jobID != null && jobTraceGen != null && (jobBeingTraced == null || !jobID.equals(jobBeingTraced.getJobID().toString()))) -->Line_16 $$ finalizeJob()[ CD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_115 $$ incorporateSpread(currentJobMapTimes, mapTimeSpreadDists, thisOutcome, thisJobType)[ CD ]
Line_15 $$ if (jobID != null && jobTraceGen != null && (jobBeingTraced == null || !jobID.equals(jobBeingTraced.getJobID().toString()))) -->Line_21 $$ for (int i = 0; i < successfulMapAttemptTimes.length; ++i) [ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_8 $$ String submitTime = line.get("SUBMIT_TIME")[ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_68 $$ if (submitTime != null) [ CD ]
Line_12 $$ String status = line.get("JOB_STATUS")-->Line_55 $$ if (status != null) [ FD ]
Line_83 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_117 $$ incorporateSpread(currentJobSortTimes, sortTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_95 $$ while (taskIter.hasNext()) -->Line_96 $$ Map.Entry<String, Long> entry = taskIter.next()[ CD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_83 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)[ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_11 $$ String finishTime = line.get("FINISH_TIME")[ FD ]
Line_99 $$ if (mapEndTime != null) -->Line_100 $$ currentJobMapTimes.enter(mapEndTime - startTime)[ CD ]
Line_77 $$ if (launchTime != null && jobID != null && currentJobID.equals(jobID)) -->Line_78 $$ launchTimeCurrentJob = Long.parseLong(launchTime)[ CD ]
Line_14 $$ String totalReduces = line.get("TOTAL_REDUCES")-->Line_44 $$ if (totalReduces != null) [ FD ]
Line_96 $$ Map.Entry<String, Long> entry = taskIter.next()-->Line_98 $$ Long mapEndTime = taskMapAttemptFinishTimes.get(entry.getKey())[ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_6 $$ String user = line.get("USER")[ CD ]
Line_106 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) -->Line_107 $$ currentJobShuffleTimes.enter(shuffleEnd - startTime)[ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_14 $$ String totalReduces = line.get("TOTAL_REDUCES")[ FD ]
Line_26 $$ for (int i = 0; i < failedMapAttemptTimes.length; ++i) -->Line_27 $$ failedMapAttemptTimes[i] = new Histogram()[ CD ]
Line_79 $$ if (finishTime != null && jobID != null && currentJobID.equals(jobID)) -->Line_80 $$ long endTime = Long.parseLong(finishTime)[ CD ]
Line_34 $$ if (jobBeingTraced != null) -->Line_38 $$ if (jobPriority != null) [ CD ]
Line_44 $$ if (totalReduces != null) -->Line_45 $$ jobBeingTraced.setTotalReduces(Integer.parseInt(totalReduces))[ CD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_34 $$ if (jobBeingTraced != null) [ CD ]
Line_95 $$ while (taskIter.hasNext()) -->Line_105 $$ Long reduceEnd = taskReduceAttemptFinishTimes.get(entry.getKey())[ CD ]
Line_7 $$ String jobPriority = line.get("JOB_PRIORITY")-->Line_39 $$ jobBeingTraced.setPriority(LoggedJob.JobPriority.valueOf(jobPriority))[ FD ]
Line_96 $$ Map.Entry<String, Long> entry = taskIter.next()-->Line_105 $$ Long reduceEnd = taskReduceAttemptFinishTimes.get(entry.getKey())[ FD ]
Line_91 $$ Histogram currentJobShuffleTimes = new Histogram()-->Line_116 $$ incorporateSpread(currentJobShuffleTimes, shuffleTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_34 $$ if (jobBeingTraced != null) -->Line_41 $$ if (totalMaps != null) [ CD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_8 $$ String submitTime = line.get("SUBMIT_TIME")[ CD ]
Line_15 $$ if (jobID != null && jobTraceGen != null && (jobBeingTraced == null || !jobID.equals(jobBeingTraced.getJobID().toString()))) -->Line_26 $$ for (int i = 0; i < failedMapAttemptTimes.length; ++i) [ CD ]
Line_7 $$ String jobPriority = line.get("JOB_PRIORITY")-->Line_38 $$ if (jobPriority != null) [ FD ]
Line_53 $$ if (finishTime != null) -->Line_54 $$ jobBeingTraced.setFinishTime(Long.parseLong(finishTime))[ CD ]
Line_5 $$ String jobID = line.get("JOBID")-->Line_15 $$ if (jobID != null && jobTraceGen != null && (jobBeingTraced == null || !jobID.equals(jobBeingTraced.getJobID().toString()))) [ FD ]
Line_83 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_88 $$ canonicalDistributionsEnter(runTimeDists, thisOutcome, thisJobType, endTime - launchTimeCurrentJob)[ FD ]
Line_38 $$ if (jobPriority != null) -->Line_39 $$ jobBeingTraced.setPriority(LoggedJob.JobPriority.valueOf(jobPriority))[ CD ]
Line_34 $$ if (jobBeingTraced != null) -->Line_50 $$ if (launchTime != null) [ CD ]
Line_8 $$ String submitTime = line.get("SUBMIT_TIME")-->Line_68 $$ if (submitTime != null) [ FD ]
Line_21 $$ for (int i = 0; i < successfulMapAttemptTimes.length; ++i) -->Line_22 $$ successfulMapAttemptTimes[i] = new Histogram()[ CD ]
Line_21 $$ for (int i = 0; i < successfulMapAttemptTimes.length; ++i) -->Line_26 $$ for (int i = 0; i < failedMapAttemptTimes.length; ++i) [ FD ]
Line_79 $$ if (finishTime != null && jobID != null && currentJobID.equals(jobID)) -->Line_81 $$ if (launchTimeCurrentJob != 0) [ CD ]
Line_13 $$ String totalMaps = line.get("TOTAL_MAPS")-->Line_41 $$ if (totalMaps != null) [ FD ]
Line_11 $$ String finishTime = line.get("FINISH_TIME")-->Line_54 $$ jobBeingTraced.setFinishTime(Long.parseLong(finishTime))[ FD ]
Line_96 $$ Map.Entry<String, Long> entry = taskIter.next()-->Line_104 $$ Long sortEnd = taskReduceAttemptSortEndTimes.get(entry.getKey())[ FD ]
Line_83 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_115 $$ incorporateSpread(currentJobMapTimes, mapTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_5 $$ String jobID = line.get("JOBID")[ CD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_118 $$ incorporateSpread(currentJobReduceTimes, reduceTimeSpreadDists, thisOutcome, thisJobType)[ CD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_84 $$ if (submitTimeCurrentJob != 0L) [ CD ]
Line_83 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_118 $$ incorporateSpread(currentJobReduceTimes, reduceTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_7 $$ String jobPriority = line.get("JOB_PRIORITY")[ FD ]
Line_34 $$ if (jobBeingTraced != null) -->Line_44 $$ if (totalReduces != null) [ CD ]
Line_95 $$ while (taskIter.hasNext()) -->Line_98 $$ Long mapEndTime = taskMapAttemptFinishTimes.get(entry.getKey())[ CD ]
Line_106 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) -->Line_112 $$ canonicalDistributionsEnter(reduceTimeDists, thisOutcome, thisJobType, reduceEnd - sortEnd)[ CD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_61 $$ if (jobName != null) [ CD ]
Line_95 $$ while (taskIter.hasNext()) -->Line_103 $$ Long shuffleEnd = taskReduceAttemptShuffleEndTimes.get(entry.getKey())[ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_10 $$ String launchTime = line.get("LAUNCH_TIME")[ FD ]
Line_83 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_110 $$ canonicalDistributionsEnter(shuffleTimeDists, thisOutcome, thisJobType, shuffleEnd - startTime)[ FD ]
Line_55 $$ if (status != null) -->Line_56 $$ jobBeingTraced.setOutcome(Pre21JobHistoryConstants.Values.valueOf(status))[ CD ]
Line_90 $$ Histogram currentJobMapTimes = new Histogram()-->Line_115 $$ incorporateSpread(currentJobMapTimes, mapTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_106 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) -->Line_110 $$ canonicalDistributionsEnter(shuffleTimeDists, thisOutcome, thisJobType, shuffleEnd - startTime)[ CD ]
Line_35 $$ if (user != null) -->Line_36 $$ jobBeingTraced.setUser(user)[ CD ]
Line_12 $$ String status = line.get("JOB_STATUS")-->Line_56 $$ jobBeingTraced.setOutcome(Pre21JobHistoryConstants.Values.valueOf(status))[ FD ]
Line_96 $$ Map.Entry<String, Long> entry = taskIter.next()-->Line_103 $$ Long shuffleEnd = taskReduceAttemptShuffleEndTimes.get(entry.getKey())[ FD ]
Line_81 $$ if (launchTimeCurrentJob != 0) -->Line_93 $$ Histogram currentJobReduceTimes = new Histogram()[ CD ]
Line_61 $$ if (jobName != null) -->Line_64 $$ if (m.matches()) [ CD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_11 $$ String finishTime = line.get("FINISH_TIME")[ CD ]
Line_99 $$ if (mapEndTime != null) -->Line_101 $$ canonicalDistributionsEnter(mapTimeDists, thisOutcome, thisJobType, mapEndTime - startTime)[ CD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_13 $$ String totalMaps = line.get("TOTAL_MAPS")[ CD ]
Line_106 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) -->Line_108 $$ currentJobSortTimes.enter(sortEnd - shuffleEnd)[ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_6 $$ String user = line.get("USER")[ FD ]
Line_53 $$ if (finishTime != null) -->Line_58 $$ maybeMateJobAndConf()[ CD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_15 $$ if (jobID != null && jobTraceGen != null && (jobBeingTraced == null || !jobID.equals(jobBeingTraced.getJobID().toString()))) [ CD ]
Line_6 $$ String user = line.get("USER")-->Line_35 $$ if (user != null) [ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_9 $$ String jobName = line.get("JOBNAME")[ CD ]
Line_10 $$ String launchTime = line.get("LAUNCH_TIME")-->Line_78 $$ launchTimeCurrentJob = Long.parseLong(launchTime)[ FD ]
Line_11 $$ String finishTime = line.get("FINISH_TIME")-->Line_53 $$ if (finishTime != null) [ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_12 $$ String status = line.get("JOB_STATUS")[ CD ]
Line_95 $$ while (taskIter.hasNext()) -->Line_106 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) [ CD ]
