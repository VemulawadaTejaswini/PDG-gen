Line_3 $$ File dir = new File(System.getProperty("test.build.dir", "target/test-dir"), TestJarFinder.class.getName() + "-testExistingManifest")-->Line_19 $$ JarFinder.jarDir(dir, "", zos)[ FD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_13 $$ File propsFile = new File(dir, "props.properties")[ CD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_14 $$ Writer writer = new FileWriter(propsFile)[ CD ]
Line_3 $$ File dir = new File(System.getProperty("test.build.dir", "target/test-dir"), TestJarFinder.class.getName() + "-testExistingManifest")-->Line_4 $$ delete(dir)[ FD ]
Line_9 $$ Manifest manifest = new Manifest()-->Line_11 $$ manifest.write(os)[ FD ]
Line_20 $$ JarInputStream jis = new JarInputStream(new ByteArrayInputStream(baos.toByteArray()))-->Line_22 $$ jis.close()[ FD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_12 $$ os.close()[ CD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_6 $$ File metaInfDir = new File(dir, "META-INF")[ CD ]
Line_10 $$ OutputStream os = new FileOutputStream(manifestFile)-->Line_11 $$ manifest.write(os)[ FD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_21 $$ Assert.assertNotNull(jis.getManifest())[ CD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_18 $$ JarOutputStream zos = new JarOutputStream(baos)[ CD ]
Line_3 $$ File dir = new File(System.getProperty("test.build.dir", "target/test-dir"), TestJarFinder.class.getName() + "-testExistingManifest")-->Line_5 $$ dir.mkdirs()[ FD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_8 $$ File manifestFile = new File(metaInfDir, "MANIFEST.MF")[ CD ]
Line_18 $$ JarOutputStream zos = new JarOutputStream(baos)-->Line_19 $$ JarFinder.jarDir(dir, "", zos)[ FD ]
Line_10 $$ OutputStream os = new FileOutputStream(manifestFile)-->Line_12 $$ os.close()[ FD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_22 $$ jis.close()[ CD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_4 $$ delete(dir)[ CD ]
Line_6 $$ File metaInfDir = new File(dir, "META-INF")-->Line_7 $$ metaInfDir.mkdirs()[ FD ]
Line_17 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_20 $$ JarInputStream jis = new JarInputStream(new ByteArrayInputStream(baos.toByteArray()))[ FD ]
Line_14 $$ Writer writer = new FileWriter(propsFile)-->Line_16 $$ writer.close()[ FD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_10 $$ OutputStream os = new FileOutputStream(manifestFile)[ CD ]
Line_20 $$ JarInputStream jis = new JarInputStream(new ByteArrayInputStream(baos.toByteArray()))-->Line_21 $$ Assert.assertNotNull(jis.getManifest())[ FD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_7 $$ metaInfDir.mkdirs()[ CD ]
Line_14 $$ Writer writer = new FileWriter(propsFile)-->Line_15 $$ new Properties().store(writer, "")[ FD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_17 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_16 $$ writer.close()[ CD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_3 $$ File dir = new File(System.getProperty("test.build.dir", "target/test-dir"), TestJarFinder.class.getName() + "-testExistingManifest")[ CD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_9 $$ Manifest manifest = new Manifest()[ CD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_5 $$ dir.mkdirs()[ CD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_15 $$ new Properties().store(writer, "")[ CD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_19 $$ JarFinder.jarDir(dir, "", zos)[ CD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_20 $$ JarInputStream jis = new JarInputStream(new ByteArrayInputStream(baos.toByteArray()))[ CD ]
Line_2 $$ public void testExistingManifest() throws Exception -->Line_11 $$ manifest.write(os)[ CD ]
