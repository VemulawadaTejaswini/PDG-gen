Line_4 $$ File jarFile = null-->Line_17 $$ FileUtil.delete(jarFile)[ FD ]
Line_9 $$ final Manifest manifest = inputStream.getManifest()-->Line_10 $$ final String classPath = manifest.getMainAttributes().getValue(Attributes.Name.CLASS_PATH)[ FD ]
Line_11 $$ final String tempDirectoryUrl = tempDirectory.toURI().toURL().toString()-->Line_12 $$ assertTrue(tempDirectoryUrl, tempDirectoryUrl.endsWith("/"))[ FD ]
Line_10 $$ final String classPath = manifest.getMainAttributes().getValue(Attributes.Name.CLASS_PATH)-->Line_13 $$ assertEquals(tempDirectoryUrl + " " + tempDirectoryUrl + "directory%20with%20spaces/some.jar", classPath)[ FD ]
Line_4 $$ File jarFile = null-->Line_16 $$ if (jarFile != null) [ FD ]
Line_2 $$ public void testManifestWithJarsAndDirectories() throws Exception -->Line_4 $$ File jarFile = null[ CD ]
Line_2 $$ public void testManifestWithJarsAndDirectories() throws Exception -->Line_3 $$ final File tempDirectory = FileUtil.createTempDirectory("dirWithClasses", "suffix")[ CD ]
Line_4 $$ File jarFile = null-->Line_7 $$ jarFile = CommandLineWrapperUtil.createClasspathJarFile(new Manifest(), paths)[ FD ]
Line_3 $$ final File tempDirectory = FileUtil.createTempDirectory("dirWithClasses", "suffix")-->Line_6 $$ final List<String> paths = Arrays.asList(tempDirectory.getAbsolutePath(), tempDirectory.getAbsolutePath() + "/directory with spaces/some.jar")[ FD ]
Line_3 $$ final File tempDirectory = FileUtil.createTempDirectory("dirWithClasses", "suffix")-->Line_15 $$ FileUtil.delete(tempDirectory)[ FD ]
Line_7 $$ jarFile = CommandLineWrapperUtil.createClasspathJarFile(new Manifest(), paths)-->Line_16 $$ if (jarFile != null) [ FD ]
Line_16 $$ if (jarFile != null) -->Line_17 $$ FileUtil.delete(jarFile)[ CD ]
Line_7 $$ jarFile = CommandLineWrapperUtil.createClasspathJarFile(new Manifest(), paths)-->Line_17 $$ FileUtil.delete(jarFile)[ FD ]
Line_6 $$ final List<String> paths = Arrays.asList(tempDirectory.getAbsolutePath(), tempDirectory.getAbsolutePath() + "/directory with spaces/some.jar")-->Line_7 $$ jarFile = CommandLineWrapperUtil.createClasspathJarFile(new Manifest(), paths)[ FD ]
Line_8 $$ final JarInputStream inputStream = new JarInputStream(new FileInputStream(jarFile))-->Line_9 $$ final Manifest manifest = inputStream.getManifest()[ FD ]
Line_3 $$ final File tempDirectory = FileUtil.createTempDirectory("dirWithClasses", "suffix")-->Line_11 $$ final String tempDirectoryUrl = tempDirectory.toURI().toURL().toString()[ FD ]
