Line_8 $$ int reduced = rehash()-->Line_9 $$ if (reduced > 0)[ FD ]
Line_6 $$ int c = count-->Line_7 $$ if (c++ > threshold) [ FD ]
Line_2 $$ V put(K key, int hash, V value, boolean onlyIfAbsent) -->Line_17 $$ while (e != null && (e.hash != hash || !keyEq(key, e.key()))) e = e.next[ FD ]
Line_20 $$ oldValue = e.value()-->Line_25 $$ oldValue = null[ FD ]
Line_6 $$ int c = count-->Line_11 $$ count = (c -= reduced) - 1[ FD ]
Line_2 $$ V put(K key, int hash, V value, boolean onlyIfAbsent) -->Line_21 $$ if (!onlyIfAbsent || oldValue == null)[ FD ]
Line_16 $$ HashEntry<K, V> e = first-->Line_23 $$ e.setValue(value, valueType, refQueue)[ FD ]
Line_21 $$ if (!onlyIfAbsent || oldValue == null)-->Line_23 $$ e.setValue(value, valueType, refQueue)[ CD ]
Line_2 $$ V put(K key, int hash, V value, boolean onlyIfAbsent) -->Line_27 $$ tab[index] = newHashEntry(key, hash, first, value)[ FD ]
Line_7 $$ if (c++ > threshold) -->Line_9 $$ if (reduced > 0)[ CD ]
Line_19 $$ if (e != null) -->Line_27 $$ tab[index] = newHashEntry(key, hash, first, value)[ CD ]
Line_16 $$ HashEntry<K, V> e = first-->Line_17 $$ e = e.next[ FD ]
Line_8 $$ int reduced = rehash()-->Line_11 $$ count = (c -= reduced) - 1[ FD ]
Line_16 $$ HashEntry<K, V> e = first-->Line_17 $$ while (e != null && (e.hash != hash || !keyEq(key, e.key()))) e = e.next[ FD ]
Line_17 $$ e = e.next-->Line_23 $$ e.setValue(value, valueType, refQueue)[ FD ]
Line_16 $$ HashEntry<K, V> e = first-->Line_20 $$ oldValue = e.value()[ FD ]
Line_2 $$ V put(K key, int hash, V value, boolean onlyIfAbsent) -->Line_23 $$ e.setValue(value, valueType, refQueue)[ FD ]
Line_18 $$ V oldValue-->Line_20 $$ oldValue = e.value()[ FD ]
Line_16 $$ HashEntry<K, V> e = first-->Line_19 $$ if (e != null) [ FD ]
Line_17 $$ e = e.next-->Line_19 $$ if (e != null) [ FD ]
Line_7 $$ if (c++ > threshold) -->Line_8 $$ int reduced = rehash()[ CD ]
Line_18 $$ V oldValue-->Line_25 $$ oldValue = null[ FD ]
Line_19 $$ if (e != null) -->Line_25 $$ oldValue = null[ CD ]
Line_2 $$ V put(K key, int hash, V value, boolean onlyIfAbsent) -->Line_3 $$ lock()[ CD ]
Line_19 $$ if (e != null) -->Line_21 $$ if (!onlyIfAbsent || oldValue == null)[ CD ]
Line_15 $$ HashEntry<K, V> first = tab[index]-->Line_27 $$ tab[index] = newHashEntry(key, hash, first, value)[ FD ]
Line_19 $$ if (e != null) -->Line_20 $$ oldValue = e.value()[ CD ]
Line_17 $$ e = e.next-->Line_20 $$ oldValue = e.value()[ FD ]
