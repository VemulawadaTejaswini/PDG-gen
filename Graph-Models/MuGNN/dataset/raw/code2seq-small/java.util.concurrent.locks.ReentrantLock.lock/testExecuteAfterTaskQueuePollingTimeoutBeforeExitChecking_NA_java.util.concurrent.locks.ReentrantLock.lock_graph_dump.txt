Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1)-->Line_31 $$ TestUtil.closePool(threadPoolExecutor)[ FD ]
Line_20 $$ MarkerBlockingJob markerBlockingJob2 = new MarkerBlockingJob(true)-->Line_30 $$ markerBlockingJob2.unBlock()[ FD ]
Line_20 $$ MarkerBlockingJob markerBlockingJob2 = new MarkerBlockingJob(true)-->Line_32 $$ Assert.assertTrue(markerBlockingJob2.isEnded())[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1)-->Line_5 $$ threadPoolExecutor.execute(markerBlockingJob1)[ FD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_10 $$ takeLock.lock()[ CD ]
Line_9 $$ ReentrantLock takeLock = taskQueue.getTakeLock()-->Line_13 $$ while (!takeLock.hasQueuedThreads()) [ FD ]
Line_4 $$ MarkerBlockingJob markerBlockingJob1 = new MarkerBlockingJob(true)-->Line_5 $$ threadPoolExecutor.execute(markerBlockingJob1)[ FD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_30 $$ markerBlockingJob2.unBlock()[ CD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1)-->Line_8 $$ TaskQueue<Runnable> taskQueue = threadPoolExecutor.getTaskQueue()[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1)-->Line_7 $$ ReentrantLock mainLock = threadPoolExecutor.getMainLock()[ FD ]
Line_13 $$ while (!takeLock.hasQueuedThreads()) -->Line_14 $$ Thread.sleep(1)[ CD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_7 $$ ReentrantLock mainLock = threadPoolExecutor.getMainLock()[ CD ]
Line_22 $$ while (!mainLock.hasQueuedThreads()) -->Line_23 $$ Thread.sleep(1)[ CD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_32 $$ Assert.assertTrue(markerBlockingJob2.isEnded())[ CD ]
Line_7 $$ ReentrantLock mainLock = threadPoolExecutor.getMainLock()-->Line_22 $$ while (!mainLock.hasQueuedThreads()) [ FD ]
Line_7 $$ ReentrantLock mainLock = threadPoolExecutor.getMainLock()-->Line_27 $$ mainLock.unlock()[ FD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_4 $$ MarkerBlockingJob markerBlockingJob1 = new MarkerBlockingJob(true)[ CD ]
Line_8 $$ TaskQueue<Runnable> taskQueue = threadPoolExecutor.getTaskQueue()-->Line_9 $$ ReentrantLock takeLock = taskQueue.getTakeLock()[ FD ]
Line_9 $$ ReentrantLock takeLock = taskQueue.getTakeLock()-->Line_10 $$ takeLock.lock()[ FD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_5 $$ threadPoolExecutor.execute(markerBlockingJob1)[ CD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_29 $$ markerBlockingJob2.waitUntilBlock()[ CD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_9 $$ ReentrantLock takeLock = taskQueue.getTakeLock()[ CD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_20 $$ MarkerBlockingJob markerBlockingJob2 = new MarkerBlockingJob(true)[ CD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1)[ CD ]
Line_20 $$ MarkerBlockingJob markerBlockingJob2 = new MarkerBlockingJob(true)-->Line_29 $$ markerBlockingJob2.waitUntilBlock()[ FD ]
Line_7 $$ ReentrantLock mainLock = threadPoolExecutor.getMainLock()-->Line_16 $$ mainLock.lock()[ FD ]
Line_9 $$ ReentrantLock takeLock = taskQueue.getTakeLock()-->Line_18 $$ takeLock.unlock()[ FD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_31 $$ TestUtil.closePool(threadPoolExecutor)[ CD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_8 $$ TaskQueue<Runnable> taskQueue = threadPoolExecutor.getTaskQueue()[ CD ]
Line_20 $$ MarkerBlockingJob markerBlockingJob2 = new MarkerBlockingJob(true)-->Line_25 $$ threadPoolExecutor.execute(markerBlockingJob2)[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 1)-->Line_25 $$ threadPoolExecutor.execute(markerBlockingJob2)[ FD ]
Line_4 $$ MarkerBlockingJob markerBlockingJob1 = new MarkerBlockingJob(true)-->Line_12 $$ markerBlockingJob1.unBlock()[ FD ]
Line_2 $$ public void testExecuteAfterTaskQueuePollingTimeoutBeforeExitChecking() throws InterruptedException -->Line_6 $$ markerBlockingJob1.waitUntilBlock()[ CD ]
Line_4 $$ MarkerBlockingJob markerBlockingJob1 = new MarkerBlockingJob(true)-->Line_6 $$ markerBlockingJob1.waitUntilBlock()[ FD ]
