Line_24 $$ Runnable runnable = null-->Line_25 $$ while ((surplusCoreThreads++ < 0) && (_poolSize < _corePoolSize) && ((runnable = _taskQueue.poll()) != null)) [ FD ]
Line_25 $$ while ((surplusCoreThreads++ < 0) && (_poolSize < _corePoolSize) && ((runnable = _taskQueue.poll()) != null)) -->Line_26 $$ _doAddWorkerThread(runnable)[ CD ]
Line_2 $$ public void adjustPoolSize(int newCorePoolSize, int newMaxPoolSize) -->Line_3 $$ if ((newCorePoolSize < 0) || (newMaxPoolSize <= 0) || (newMaxPoolSize < newCorePoolSize)) [ CD ]
Line_13 $$ int interruptCount = Math.max(surplusCoreThreads, surplusMaxPoolSize)-->Line_17 $$ interruptCount--[ FD ]
Line_24 $$ Runnable runnable = null-->Line_26 $$ _doAddWorkerThread(runnable)[ FD ]
Line_8 $$ int surplusCoreThreads = _corePoolSize - newCorePoolSize-->Line_13 $$ int interruptCount = Math.max(surplusCoreThreads, surplusMaxPoolSize)[ FD ]
Line_13 $$ int interruptCount = Math.max(surplusCoreThreads, surplusMaxPoolSize)-->Line_15 $$ if (interruptCount > 0) [ FD ]
Line_15 $$ if (interruptCount > 0) -->Line_16 $$ if (workerTask._interruptIfWaiting()) [ CD ]
Line_14 $$ for (WorkerTask workerTask : _workerTasks) -->Line_16 $$ if (workerTask._interruptIfWaiting()) [ FD ]
Line_16 $$ if (workerTask._interruptIfWaiting()) -->Line_17 $$ interruptCount--[ CD ]
Line_9 $$ int surplusMaxPoolSize = _maxPoolSize - newMaxPoolSize-->Line_13 $$ int interruptCount = Math.max(surplusCoreThreads, surplusMaxPoolSize)[ FD ]
Line_12 $$ if (((surplusCoreThreads > 0) && (_poolSize > _corePoolSize)) || ((surplusMaxPoolSize > 0) && (_poolSize > _maxPoolSize))) -->Line_25 $$ while ((surplusCoreThreads++ < 0) && (_poolSize < _corePoolSize) && ((runnable = _taskQueue.poll()) != null)) [ CD ]
Line_25 $$ while ((surplusCoreThreads++ < 0) && (_poolSize < _corePoolSize) && ((runnable = _taskQueue.poll()) != null)) -->Line_26 $$ _doAddWorkerThread(runnable)[ FD ]
Line_12 $$ if (((surplusCoreThreads > 0) && (_poolSize > _corePoolSize)) || ((surplusMaxPoolSize > 0) && (_poolSize > _maxPoolSize))) -->Line_24 $$ Runnable runnable = null[ CD ]
Line_2 $$ public void adjustPoolSize(int newCorePoolSize, int newMaxPoolSize) -->Line_6 $$ _mainLock.lock()[ CD ]
Line_12 $$ if (((surplusCoreThreads > 0) && (_poolSize > _corePoolSize)) || ((surplusMaxPoolSize > 0) && (_poolSize > _maxPoolSize))) -->Line_13 $$ int interruptCount = Math.max(surplusCoreThreads, surplusMaxPoolSize)[ CD ]
Line_8 $$ int surplusCoreThreads = _corePoolSize - newCorePoolSize-->Line_25 $$ while ((surplusCoreThreads++ < 0) && (_poolSize < _corePoolSize) && ((runnable = _taskQueue.poll()) != null)) [ FD ]
