Line_19 $$ if (!spillInProgress) -->Line_24 $$ if ((kvbend + METASIZE) % kvbuffer.length != equator - (equator % METASIZE)) [ CD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_13 $$ checkSpillException()[ CD ]
Line_28 $$ if (bufsoftlimit && kvindex != kvend) -->Line_33 $$ setEquator(newPos)[ CD ]
Line_54 $$ final int valstart = bufindex-->Line_63 $$ kvmeta.put(kvindex + VALLEN, distanceTo(valstart, valend))[ FD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_4 $$ if (key.getClass() != keyClass) [ CD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_8 $$ throw new IOException("Type mismatch in value from map: expected " + valClass.getName() + ", received " + value.getClass().getName())[ FD ]
Line_19 $$ if (!spillInProgress) -->Line_22 $$ final int bUsed = distanceTo(kvbidx, bufindex)[ CD ]
Line_18 $$ do -->Line_19 $$ if (!spillInProgress) [ CD ]
Line_24 $$ if ((kvbend + METASIZE) % kvbuffer.length != equator - (equator % METASIZE)) -->Line_25 $$ resetSpill()[ CD ]
Line_28 $$ if (bufsoftlimit && kvindex != kvend) -->Line_35 $$ final int serBound = 4 * kvend[ CD ]
Line_50 $$ if (bufindex < keystart) -->Line_51 $$ bb.shiftBufferedKey()[ CD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_15 $$ if (bufferRemaining <= 0) [ CD ]
Line_28 $$ if (bufsoftlimit && kvindex != kvend) -->Line_31 $$ final int distkvi = distanceTo(bufindex, kvbidx)[ CD ]
Line_48 $$ int keystart = bufindex-->Line_59 $$ mapOutputByteCounter.increment(distanceTo(keystart, valend, bufvoid))[ FD ]
Line_50 $$ if (bufindex < keystart) -->Line_52 $$ keystart = 0[ CD ]
Line_20 $$ final int kvbidx = 4 * kvindex-->Line_31 $$ final int distkvi = distanceTo(bufindex, kvbidx)[ FD ]
Line_32 $$ final int newPos = (bufindex + Math.max(2 * METASIZE - 1, Math.min(distkvi / 2, distkvi / (METASIZE + avgRec) * METASIZE))) % kvbuffer.length-->Line_33 $$ setEquator(newPos)[ FD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_4 $$ if (key.getClass() != keyClass) [ FD ]
Line_28 $$ if (bufsoftlimit && kvindex != kvend) -->Line_29 $$ startSpill()[ CD ]
Line_19 $$ if (!spillInProgress) -->Line_21 $$ final int kvbend = 4 * kvend[ CD ]
Line_19 $$ if (!spillInProgress) -->Line_20 $$ final int kvbidx = 4 * kvindex[ CD ]
Line_35 $$ final int serBound = 4 * kvend-->Line_36 $$ bufferRemaining = Math.min(distanceTo(bufend, newPos), Math.min(distanceTo(newPos, serBound), softLimit)) - 2 * METASIZE[ FD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_5 $$ throw new IOException("Type mismatch in key from map: expected " + keyClass.getName() + ", received " + key.getClass().getName())[ FD ]
Line_48 $$ int keystart = bufindex-->Line_50 $$ if (bufindex < keystart) [ FD ]
Line_48 $$ int keystart = bufindex-->Line_61 $$ kvmeta.put(kvindex + KEYSTART, keystart)[ FD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_67 $$ spillSingleRecord(key, value, partition)[ FD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_7 $$ if (value.getClass() != valClass) [ CD ]
Line_57 $$ int valend = bb.markRecord()-->Line_59 $$ mapOutputByteCounter.increment(distanceTo(keystart, valend, bufvoid))[ FD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_49 $$ keySerializer.serialize(key)[ FD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_55 $$ valSerializer.serialize(value)[ FD ]
Line_57 $$ int valend = bb.markRecord()-->Line_63 $$ kvmeta.put(kvindex + VALLEN, distanceTo(valstart, valend))[ FD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_60 $$ kvmeta.put(kvindex + PARTITION, partition)[ FD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_10 $$ if (partition < 0 || partition >= partitions) [ CD ]
Line_52 $$ keystart = 0-->Line_61 $$ kvmeta.put(kvindex + KEYSTART, keystart)[ FD ]
Line_23 $$ final boolean bufsoftlimit = bUsed >= softLimit-->Line_28 $$ if (bufsoftlimit && kvindex != kvend) [ FD ]
Line_28 $$ if (bufsoftlimit && kvindex != kvend) -->Line_30 $$ final int avgRec = (int) (mapOutputByteCounter.getCounter() / mapOutputRecordCounter.getCounter())[ CD ]
Line_54 $$ final int valstart = bufindex-->Line_62 $$ kvmeta.put(kvindex + VALSTART, valstart)[ FD ]
Line_28 $$ if (bufsoftlimit && kvindex != kvend) -->Line_32 $$ final int newPos = (bufindex + Math.max(2 * METASIZE - 1, Math.min(distkvi / 2, distkvi / (METASIZE + avgRec) * METASIZE))) % kvbuffer.length[ CD ]
Line_52 $$ keystart = 0-->Line_59 $$ mapOutputByteCounter.increment(distanceTo(keystart, valend, bufvoid))[ FD ]
Line_32 $$ final int newPos = (bufindex + Math.max(2 * METASIZE - 1, Math.min(distkvi / 2, distkvi / (METASIZE + avgRec) * METASIZE))) % kvbuffer.length-->Line_36 $$ bufferRemaining = Math.min(distanceTo(bufend, newPos), Math.min(distanceTo(newPos, serBound), softLimit)) - 2 * METASIZE[ FD ]
Line_20 $$ final int kvbidx = 4 * kvindex-->Line_22 $$ final int bUsed = distanceTo(kvbidx, bufindex)[ FD ]
Line_19 $$ if (!spillInProgress) -->Line_23 $$ final boolean bufsoftlimit = bUsed >= softLimit[ CD ]
Line_24 $$ if ((kvbend + METASIZE) % kvbuffer.length != equator - (equator % METASIZE)) -->Line_26 $$ bufferRemaining = Math.min(distanceTo(bufindex, kvbidx) - 2 * METASIZE, softLimit - bUsed) - METASIZE[ CD ]
Line_24 $$ if ((kvbend + METASIZE) % kvbuffer.length != equator - (equator % METASIZE)) -->Line_28 $$ if (bufsoftlimit && kvindex != kvend) [ CD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_7 $$ if (value.getClass() != valClass) [ FD ]
Line_15 $$ if (bufferRemaining <= 0) -->Line_16 $$ spillLock.lock()[ CD ]
Line_48 $$ int keystart = bufindex-->Line_52 $$ keystart = 0[ FD ]
Line_20 $$ final int kvbidx = 4 * kvindex-->Line_26 $$ bufferRemaining = Math.min(distanceTo(bufindex, kvbidx) - 2 * METASIZE, softLimit - bUsed) - METASIZE[ FD ]
Line_2 $$ public synchronized void collect(K key, V value, final int partition) throws IOException -->Line_3 $$ reporter.progress()[ CD ]
