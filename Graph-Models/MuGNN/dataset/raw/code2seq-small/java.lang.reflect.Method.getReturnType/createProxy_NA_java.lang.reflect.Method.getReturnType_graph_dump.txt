Line_7 $$ if (!realReturnType.equals(void.class) && realReturnType.isPrimitive()) -->Line_8 $$ boxedReturnType = JavaReflectionUtil.getWrapperTypeForPrimitiveType(realReturnType)[ CD ]
Line_8 $$ boxedReturnType = JavaReflectionUtil.getWrapperTypeForPrimitiveType(realReturnType)-->Line_10 $$ return invoke(listener.getClass(), listener, boxedReturnType, method, args)[ FD ]
Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_10 $$ return invoke(listener.getClass(), listener, boxedReturnType, method, args)[ FD ]
Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_10 $$ return invoke(listener.getClass(), listener, boxedReturnType, method, args)[ CD ]
Line_6 $$ Class<?> boxedReturnType = realReturnType-->Line_10 $$ return invoke(listener.getClass(), listener, boxedReturnType, method, args)[ FD ]
Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_5 $$ Class<?> realReturnType = method.getReturnType()[ CD ]
Line_2 $$ private ITestListener createProxy(Class<?> configListenerClass, final ITestListener listener) -->Line_13 $$ T listenerCast = listenerType.cast(listener)[ FD ]
Line_2 $$ private ITestListener createProxy(Class<?> configListenerClass, final ITestListener listener) -->Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] [ CD ]
Line_5 $$ Class<?> realReturnType = method.getReturnType()-->Line_8 $$ boxedReturnType = JavaReflectionUtil.getWrapperTypeForPrimitiveType(realReturnType)[ FD ]
Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_5 $$ Class<?> realReturnType = method.getReturnType()[ FD ]
Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_14 $$ JavaMethod<T, R> javaMethod = JavaReflectionUtil.method(listenerType, returnType, method.getName(), method.getParameterTypes())[ CD ]
Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_15 $$ return javaMethod.invoke(listenerCast, args)[ CD ]
Line_5 $$ Class<?> realReturnType = method.getReturnType()-->Line_7 $$ if (!realReturnType.equals(void.class) && realReturnType.isPrimitive()) [ FD ]
Line_6 $$ Class<?> boxedReturnType = realReturnType-->Line_8 $$ boxedReturnType = JavaReflectionUtil.getWrapperTypeForPrimitiveType(realReturnType)[ FD ]
Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_15 $$ return javaMethod.invoke(listenerCast, args)[ FD ]
Line_14 $$ JavaMethod<T, R> javaMethod = JavaReflectionUtil.method(listenerType, returnType, method.getName(), method.getParameterTypes())-->Line_15 $$ return javaMethod.invoke(listenerCast, args)[ FD ]
Line_2 $$ private ITestListener createProxy(Class<?> configListenerClass, final ITestListener listener) -->Line_10 $$ return invoke(listener.getClass(), listener, boxedReturnType, method, args)[ FD ]
Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_13 $$ T listenerCast = listenerType.cast(listener)[ CD ]
Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_7 $$ if (!realReturnType.equals(void.class) && realReturnType.isPrimitive()) [ CD ]
Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_6 $$ Class<?> boxedReturnType = realReturnType[ CD ]
Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_13 $$ T listenerCast = listenerType.cast(listener)[ FD ]
Line_13 $$ T listenerCast = listenerType.cast(listener)-->Line_15 $$ return javaMethod.invoke(listenerCast, args)[ FD ]
Line_3 $$ return (ITestListener) Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_14 $$ JavaMethod<T, R> javaMethod = JavaReflectionUtil.method(listenerType, returnType, method.getName(), method.getParameterTypes())[ FD ]
