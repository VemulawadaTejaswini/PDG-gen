Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_89 $$ _assertInsnNode(iterator.next(), Opcodes.LCONST_0)[ FD ]
Line_37 $$ String name = TextFormatter.format(parameterClass.getSimpleName(), TextFormatter.G)-->Line_38 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Serializer.class), "write".concat(name), Type.VOID_TYPE, parameterType)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_19 $$ _assertFieldInsnNode(iterator.next(), Opcodes.GETFIELD, stubInternalName, "_id", String.class)[ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_46 $$ Type returnType = Type.getType(returnClass)[ FD ]
Line_85 $$ if (returnClass == double.class) -->Line_87 $$ _assertInsnNode(iterator.next(), Opcodes.DRETURN)[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_12 $$ int argumentsSize = argumentsAndReturnSizes >> 2[ CD ]
Line_88 $$ if (returnClass == long.class) -->Line_92 $$ _assertInsnNode(iterator.next(), Opcodes.ICONST_0)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_40 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Serializer.class), "writeObject", Type.VOID_TYPE, Type.getType(Serializable.class))[ FD ]
Line_46 $$ Type returnType = Type.getType(returnClass)-->Line_75 $$ _assertInsnNode(iterator.next(), returnType.getOpcode(Opcodes.IRETURN))[ FD ]
Line_12 $$ int argumentsSize = argumentsAndReturnSizes >> 2-->Line_17 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ FD ]
Line_68 $$ if (returnClass == int.class) -->Line_70 $$ if (returnClass == long.class) [ CD ]
Line_77 $$ if (!returnClass.isPrimitive()) -->Line_78 $$ _assertInsnNode(iterator.next(), Opcodes.ACONST_NULL)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_43 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, 0)[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_45 $$ Class<?> returnClass = method.getReturnType()[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_87 $$ _assertInsnNode(iterator.next(), Opcodes.DRETURN)[ FD ]
Line_30 $$ for (int i = 0; i < parameterTypes.length; i++) -->Line_35 $$ offset += parameterType.getSize()[ CD ]
Line_36 $$ if (parameterClass.isPrimitive() || (parameterClass == String.class)) -->Line_40 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Serializer.class), "writeObject", Type.VOID_TYPE, Type.getType(Serializable.class))[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_4 $$ _assertMethodNodeSignature(proxyMethodNode, method.getModifiers() & ~Modifier.ABSTRACT, method.getName(), Type.getMethodDescriptor(method), method.getExceptionTypes())[ FD ]
Line_58 $$ if (returnClass == boolean.class) -->Line_60 $$ if (returnClass == byte.class) [ CD ]
Line_60 $$ if (returnClass == byte.class) -->Line_61 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Number.class), "intValue", Type.INT_TYPE)[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_11 $$ int argumentsAndReturnSizes = methodType.getArgumentsAndReturnSizes()[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_23 $$ _assertInsnNode(iterator.next(), Opcodes.ICONST_0 + index)[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_46 $$ Type returnType = Type.getType(returnClass)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_20 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Serializer.class), "writeString", Type.VOID_TYPE, Type.getType(String.class))[ FD ]
Line_82 $$ if (returnClass == float.class) -->Line_83 $$ _assertInsnNode(iterator.next(), Opcodes.FCONST_0)[ CD ]
Line_35 $$ offset += parameterType.getSize()-->Line_34 $$ _assertVarInsnNode(iterator.next(), parameterType.getOpcode(Opcodes.ILOAD), offset)[ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_72 $$ if (returnClass == short.class) [ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_57 $$ _assertTypeInsnNode(iterator.next(), Opcodes.CHECKCAST, _autoboxingMap.get(returnClass))[ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_58 $$ if (returnClass == boolean.class) [ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_15 $$ _assertLdcInsnNode(iterator.next(), Opcodes.LDC, skeletonId)[ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_52 $$ if (returnClass.isPrimitive()) [ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_19 $$ _assertFieldInsnNode(iterator.next(), Opcodes.GETFIELD, stubInternalName, "_id", String.class)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_55 $$ LabelNode nullCheckLabelNode = _assertJumpInsnNode(iterator.next(), Opcodes.IFNULL)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_17 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_48 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKESPECIAL, stubInternalName, "_send", Type.VOID_TYPE, Type.getType(Serializer.class))[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_10 $$ Type methodType = Type.getType(method)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_14 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ FD ]
Line_31 $$ Class<?> parameterClass = parameterTypes[i]-->Line_37 $$ String name = TextFormatter.format(parameterClass.getSimpleName(), TextFormatter.G)[ FD ]
Line_52 $$ if (returnClass.isPrimitive()) -->Line_58 $$ if (returnClass == boolean.class) [ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_67 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Number.class), "floatValue", Type.FLOAT_TYPE)[ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_77 $$ if (!returnClass.isPrimitive()) [ FD ]
Line_31 $$ Class<?> parameterClass = parameterTypes[i]-->Line_33 $$ Type parameterType = Type.getType(parameterClass)[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_28 $$ Class<?>[] parameterTypes = method.getParameterTypes()[ CD ]
Line_47 $$ if (returnClass == void.class) -->Line_52 $$ if (returnClass.isPrimitive()) [ CD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_66 $$ if (returnClass == float.class) [ FD ]
Line_85 $$ if (returnClass == double.class) -->Line_86 $$ _assertInsnNode(iterator.next(), Opcodes.DCONST_0)[ CD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_97 $$ _assertTypeInsnNode(iterator.next(), Opcodes.CHECKCAST, returnClass)[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_29 $$ int offset = 1[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_34 $$ _assertVarInsnNode(iterator.next(), parameterType.getOpcode(Opcodes.ILOAD), offset)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_16 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Serializer.class), "writeString", Type.VOID_TYPE, Type.getType(String.class))[ FD ]
Line_52 $$ if (returnClass.isPrimitive()) -->Line_56 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize + 1)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_76 $$ Assert.assertSame(nullCheckLabelNode, iterator.next())[ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_64 $$ if (returnClass == double.class) [ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_10 $$ Type methodType = Type.getType(method)[ FD ]
Line_52 $$ if (returnClass.isPrimitive()) -->Line_57 $$ _assertTypeInsnNode(iterator.next(), Opcodes.CHECKCAST, _autoboxingMap.get(returnClass))[ CD ]
Line_68 $$ if (returnClass == int.class) -->Line_69 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Number.class), "intValue", Type.INT_TYPE)[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_19 $$ _assertFieldInsnNode(iterator.next(), Opcodes.GETFIELD, stubInternalName, "_id", String.class)[ CD ]
Line_12 $$ int argumentsSize = argumentsAndReturnSizes >> 2-->Line_32 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_22 $$ if (index <= 5) [ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_48 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKESPECIAL, stubInternalName, "_send", Type.VOID_TYPE, Type.getType(Serializer.class))[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_18 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, 0)[ CD ]
Line_30 $$ for (int i = 0; i < parameterTypes.length; i++) -->Line_33 $$ Type parameterType = Type.getType(parameterClass)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_49 $$ _assertInsnNode(iterator.next(), Opcodes.RETURN)[ FD ]
Line_33 $$ Type parameterType = Type.getType(parameterClass)-->Line_34 $$ _assertVarInsnNode(iterator.next(), parameterType.getOpcode(Opcodes.ILOAD), offset)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_78 $$ _assertInsnNode(iterator.next(), Opcodes.ACONST_NULL)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_99 $$ _assertInsnNode(iterator.next(), Opcodes.ARETURN)[ FD ]
Line_36 $$ if (parameterClass.isPrimitive() || (parameterClass == String.class)) -->Line_37 $$ String name = TextFormatter.format(parameterClass.getSimpleName(), TextFormatter.G)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_54 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize + 1)[ FD ]
Line_47 $$ if (returnClass == void.class) -->Line_48 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKESPECIAL, stubInternalName, "_send", Type.VOID_TYPE, Type.getType(Serializer.class))[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_4 $$ _assertMethodNodeSignature(proxyMethodNode, method.getModifiers() & ~Modifier.ABSTRACT, method.getName(), Type.getMethodDescriptor(method), method.getExceptionTypes())[ CD ]
Line_12 $$ int argumentsSize = argumentsAndReturnSizes >> 2-->Line_44 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_3 $$ MethodNode proxyMethodNode = IntrabandProxyUtil.createProxyMethodNode(method, index, skeletonId, Type.getType(stubInternalName))[ FD ]
Line_66 $$ if (returnClass == float.class) -->Line_68 $$ if (returnClass == int.class) [ CD ]
Line_55 $$ LabelNode nullCheckLabelNode = _assertJumpInsnNode(iterator.next(), Opcodes.IFNULL)-->Line_76 $$ Assert.assertSame(nullCheckLabelNode, iterator.next())[ FD ]
Line_82 $$ if (returnClass == float.class) -->Line_85 $$ if (returnClass == double.class) [ CD ]
Line_82 $$ if (returnClass == float.class) -->Line_84 $$ _assertInsnNode(iterator.next(), Opcodes.FRETURN)[ CD ]
Line_29 $$ int offset = 1-->Line_35 $$ offset += parameterType.getSize()[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_30 $$ for (int i = 0; i < parameterTypes.length; i++) [ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_25 $$ _assertIntInsnNode(iterator.next(), Opcodes.BIPUSH, index)[ FD ]
Line_10 $$ Type methodType = Type.getType(method)-->Line_11 $$ int argumentsAndReturnSizes = methodType.getArgumentsAndReturnSizes()[ FD ]
Line_62 $$ if (returnClass == char.class) -->Line_64 $$ if (returnClass == double.class) [ CD ]
Line_3 $$ MethodNode proxyMethodNode = IntrabandProxyUtil.createProxyMethodNode(method, index, skeletonId, Type.getType(stubInternalName))-->Line_4 $$ _assertMethodNodeSignature(proxyMethodNode, method.getModifiers() & ~Modifier.ABSTRACT, method.getName(), Type.getMethodDescriptor(method), method.getExceptionTypes())[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_16 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Serializer.class), "writeString", Type.VOID_TYPE, Type.getType(String.class))[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_71 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Number.class), "longValue", Type.LONG_TYPE)[ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_96 $$ if (returnClass != Object.class) [ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_9 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKESPECIAL, Type.getInternalName(Serializer.class), "<init>", Type.VOID_TYPE)[ FD ]
Line_52 $$ if (returnClass.isPrimitive()) -->Line_96 $$ if (returnClass != Object.class) [ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_57 $$ _assertTypeInsnNode(iterator.next(), Opcodes.CHECKCAST, _autoboxingMap.get(returnClass))[ FD ]
Line_29 $$ int offset = 1-->Line_34 $$ _assertVarInsnNode(iterator.next(), parameterType.getOpcode(Opcodes.ILOAD), offset)[ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_82 $$ if (returnClass == float.class) [ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_80 $$ if (returnClass == void.class) [ FD ]
Line_52 $$ if (returnClass.isPrimitive()) -->Line_55 $$ LabelNode nullCheckLabelNode = _assertJumpInsnNode(iterator.next(), Opcodes.IFNULL)[ CD ]
Line_12 $$ int argumentsSize = argumentsAndReturnSizes >> 2-->Line_14 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_28 $$ Class<?>[] parameterTypes = method.getParameterTypes()[ FD ]
Line_64 $$ if (returnClass == double.class) -->Line_65 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Number.class), "doubleValue", Type.DOUBLE_TYPE)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_86 $$ _assertInsnNode(iterator.next(), Opcodes.DCONST_0)[ FD ]
Line_52 $$ if (returnClass.isPrimitive()) -->Line_77 $$ if (!returnClass.isPrimitive()) [ CD ]
Line_33 $$ Type parameterType = Type.getType(parameterClass)-->Line_35 $$ offset += parameterType.getSize()[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_83 $$ _assertInsnNode(iterator.next(), Opcodes.FCONST_0)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_56 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize + 1)[ FD ]
Line_88 $$ if (returnClass == long.class) -->Line_93 $$ _assertInsnNode(iterator.next(), Opcodes.IRETURN)[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_5 $$ InsnList insnList = proxyMethodNode.instructions[ CD ]
Line_5 $$ InsnList insnList = proxyMethodNode.instructions-->Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_7 $$ _assertTypeInsnNode(iterator.next(), Opcodes.NEW, Serializer.class)[ CD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_60 $$ if (returnClass == byte.class) [ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_97 $$ _assertTypeInsnNode(iterator.next(), Opcodes.CHECKCAST, returnClass)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_8 $$ _assertInsnNode(iterator.next(), Opcodes.DUP)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_51 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKESPECIAL, stubInternalName, "_syncSend", Type.getType(Serializable.class), Type.getType(Serializer.class))[ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_68 $$ if (returnClass == int.class) [ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_61 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Number.class), "intValue", Type.INT_TYPE)[ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_62 $$ if (returnClass == char.class) [ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_17 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_84 $$ _assertInsnNode(iterator.next(), Opcodes.FRETURN)[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_13 $$ _assertVarInsnNode(iterator.next(), Opcodes.ASTORE, argumentsSize)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_102 $$ Assert.assertFalse(iterator.hasNext())[ FD ]
Line_77 $$ if (!returnClass.isPrimitive()) -->Line_80 $$ if (returnClass == void.class) [ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_45 $$ Class<?> returnClass = method.getReturnType()[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_65 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Number.class), "doubleValue", Type.DOUBLE_TYPE)[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_15 $$ _assertLdcInsnNode(iterator.next(), Opcodes.LDC, skeletonId)[ FD ]
Line_52 $$ if (returnClass.isPrimitive()) -->Line_99 $$ _assertInsnNode(iterator.next(), Opcodes.ARETURN)[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_44 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_53 $$ _assertVarInsnNode(iterator.next(), Opcodes.ASTORE, argumentsSize + 1)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_7 $$ _assertTypeInsnNode(iterator.next(), Opcodes.NEW, Serializer.class)[ FD ]
Line_33 $$ Type parameterType = Type.getType(parameterClass)-->Line_38 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Serializer.class), "write".concat(name), Type.VOID_TYPE, parameterType)[ FD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_85 $$ if (returnClass == double.class) [ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_43 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, 0)[ CD ]
Line_60 $$ if (returnClass == byte.class) -->Line_62 $$ if (returnClass == char.class) [ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_75 $$ _assertInsnNode(iterator.next(), returnType.getOpcode(Opcodes.IRETURN))[ FD ]
Line_96 $$ if (returnClass != Object.class) -->Line_97 $$ _assertTypeInsnNode(iterator.next(), Opcodes.CHECKCAST, returnClass)[ CD ]
Line_30 $$ for (int i = 0; i < parameterTypes.length; i++) -->Line_32 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ CD ]
Line_12 $$ int argumentsSize = argumentsAndReturnSizes >> 2-->Line_21 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_90 $$ _assertInsnNode(iterator.next(), Opcodes.LRETURN)[ FD ]
Line_64 $$ if (returnClass == double.class) -->Line_66 $$ if (returnClass == float.class) [ CD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_70 $$ if (returnClass == long.class) [ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_102 $$ Assert.assertFalse(iterator.hasNext())[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()[ CD ]
Line_30 $$ for (int i = 0; i < parameterTypes.length; i++) -->Line_34 $$ _assertVarInsnNode(iterator.next(), parameterType.getOpcode(Opcodes.ILOAD), offset)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_59 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Boolean.class), "booleanValue", Type.BOOLEAN_TYPE)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_63 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Character.class), "charValue", Type.CHAR_TYPE)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_73 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Number.class), "intValue", Type.INT_TYPE)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_44 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ FD ]
Line_30 $$ for (int i = 0; i < parameterTypes.length; i++) -->Line_31 $$ Class<?> parameterClass = parameterTypes[i][ CD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_88 $$ if (returnClass == long.class) [ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_47 $$ if (returnClass == void.class) [ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_81 $$ _assertInsnNode(iterator.next(), Opcodes.RETURN)[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_25 $$ _assertIntInsnNode(iterator.next(), Opcodes.BIPUSH, index)[ FD ]
Line_66 $$ if (returnClass == float.class) -->Line_67 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Number.class), "floatValue", Type.FLOAT_TYPE)[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_51 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKESPECIAL, stubInternalName, "_syncSend", Type.getType(Serializable.class), Type.getType(Serializer.class))[ FD ]
Line_52 $$ if (returnClass.isPrimitive()) -->Line_53 $$ _assertVarInsnNode(iterator.next(), Opcodes.ASTORE, argumentsSize + 1)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_32 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ FD ]
Line_52 $$ if (returnClass.isPrimitive()) -->Line_76 $$ Assert.assertSame(nullCheckLabelNode, iterator.next())[ CD ]
Line_45 $$ Class<?> returnClass = method.getReturnType()-->Line_47 $$ if (returnClass == void.class) [ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_79 $$ _assertInsnNode(iterator.next(), Opcodes.ARETURN)[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_9 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKESPECIAL, Type.getInternalName(Serializer.class), "<init>", Type.VOID_TYPE)[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_27 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Serializer.class), "writeInt", Type.VOID_TYPE, Type.INT_TYPE)[ CD ]
Line_80 $$ if (returnClass == void.class) -->Line_81 $$ _assertInsnNode(iterator.next(), Opcodes.RETURN)[ CD ]
Line_47 $$ if (returnClass == void.class) -->Line_51 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKESPECIAL, stubInternalName, "_syncSend", Type.getType(Serializable.class), Type.getType(Serializer.class))[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_14 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ CD ]
Line_70 $$ if (returnClass == long.class) -->Line_72 $$ if (returnClass == short.class) [ CD ]
Line_62 $$ if (returnClass == char.class) -->Line_63 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Character.class), "charValue", Type.CHAR_TYPE)[ CD ]
Line_88 $$ if (returnClass == long.class) -->Line_90 $$ _assertInsnNode(iterator.next(), Opcodes.LRETURN)[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_20 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Serializer.class), "writeString", Type.VOID_TYPE, Type.getType(String.class))[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_27 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Serializer.class), "writeInt", Type.VOID_TYPE, Type.INT_TYPE)[ FD ]
Line_30 $$ for (int i = 0; i < parameterTypes.length; i++) -->Line_36 $$ if (parameterClass.isPrimitive() || (parameterClass == String.class)) [ CD ]
Line_88 $$ if (returnClass == long.class) -->Line_89 $$ _assertInsnNode(iterator.next(), Opcodes.LCONST_0)[ CD ]
Line_85 $$ if (returnClass == double.class) -->Line_88 $$ if (returnClass == long.class) [ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_8 $$ _assertInsnNode(iterator.next(), Opcodes.DUP)[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_3 $$ MethodNode proxyMethodNode = IntrabandProxyUtil.createProxyMethodNode(method, index, skeletonId, Type.getType(stubInternalName))[ CD ]
Line_47 $$ if (returnClass == void.class) -->Line_49 $$ _assertInsnNode(iterator.next(), Opcodes.RETURN)[ CD ]
Line_12 $$ int argumentsSize = argumentsAndReturnSizes >> 2-->Line_13 $$ _assertVarInsnNode(iterator.next(), Opcodes.ASTORE, argumentsSize)[ FD ]
Line_36 $$ if (parameterClass.isPrimitive() || (parameterClass == String.class)) -->Line_38 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Serializer.class), "write".concat(name), Type.VOID_TYPE, parameterType)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_21 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_92 $$ _assertInsnNode(iterator.next(), Opcodes.ICONST_0)[ FD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_13 $$ _assertVarInsnNode(iterator.next(), Opcodes.ASTORE, argumentsSize)[ FD ]
Line_77 $$ if (!returnClass.isPrimitive()) -->Line_79 $$ _assertInsnNode(iterator.next(), Opcodes.ARETURN)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_93 $$ _assertInsnNode(iterator.next(), Opcodes.IRETURN)[ FD ]
Line_72 $$ if (returnClass == short.class) -->Line_73 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Number.class), "intValue", Type.INT_TYPE)[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_15 $$ _assertLdcInsnNode(iterator.next(), Opcodes.LDC, skeletonId)[ CD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_22 $$ if (index <= 5) [ CD ]
Line_22 $$ if (index <= 5) -->Line_25 $$ _assertIntInsnNode(iterator.next(), Opcodes.BIPUSH, index)[ CD ]
Line_52 $$ if (returnClass.isPrimitive()) -->Line_54 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize + 1)[ CD ]
Line_22 $$ if (index <= 5) -->Line_23 $$ _assertInsnNode(iterator.next(), Opcodes.ICONST_0 + index)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_18 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, 0)[ FD ]
Line_2 $$ private void _doTestCreateProxyMethodNode(Method method, int index, String skeletonId, String stubInternalName) -->Line_21 $$ _assertVarInsnNode(iterator.next(), Opcodes.ALOAD, argumentsSize)[ CD ]
Line_80 $$ if (returnClass == void.class) -->Line_82 $$ if (returnClass == float.class) [ CD ]
Line_58 $$ if (returnClass == boolean.class) -->Line_59 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Boolean.class), "booleanValue", Type.BOOLEAN_TYPE)[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_69 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Number.class), "intValue", Type.INT_TYPE)[ FD ]
Line_70 $$ if (returnClass == long.class) -->Line_71 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Number.class), "longValue", Type.LONG_TYPE)[ CD ]
Line_31 $$ Class<?> parameterClass = parameterTypes[i]-->Line_36 $$ if (parameterClass.isPrimitive() || (parameterClass == String.class)) [ FD ]
Line_52 $$ if (returnClass.isPrimitive()) -->Line_75 $$ _assertInsnNode(iterator.next(), returnType.getOpcode(Opcodes.IRETURN))[ CD ]
Line_6 $$ Iterator<AbstractInsnNode> iterator = insnList.iterator()-->Line_38 $$ _assertMethodInsnNode(iterator.next(), Opcodes.INVOKEVIRTUAL, Type.getInternalName(Serializer.class), "write".concat(name), Type.VOID_TYPE, parameterType)[ FD ]
