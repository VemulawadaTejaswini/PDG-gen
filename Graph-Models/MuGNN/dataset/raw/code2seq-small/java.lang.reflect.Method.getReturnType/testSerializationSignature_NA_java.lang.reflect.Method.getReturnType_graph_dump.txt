Line_2 $$ public void testSerializationSignature() throws Exception -->Line_11 $$ Assert.assertEquals(2, exceptionTypes.size())[ CD ]
Line_10 $$ List<Class<?>> exceptionTypes = Arrays.asList(readObjectMethod.getExceptionTypes())-->Line_12 $$ Assert.assertTrue(exceptionTypes.contains(ClassNotFoundException.class))[ FD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_4 $$ Assert.assertNotNull(readObjectMethod)[ CD ]
Line_14 $$ Method writeObjectMethod = RemoteSPI.class.getDeclaredMethod("writeObject", ObjectOutputStream.class)-->Line_21 $$ Class<?>[] exceptionTypeArray = writeObjectMethod.getExceptionTypes()[ FD ]
Line_3 $$ Method readObjectMethod = RemoteSPI.class.getDeclaredMethod("readObject", ObjectInputStream.class)-->Line_7 $$ Class<?>[] parameterTypes = readObjectMethod.getParameterTypes()[ FD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_7 $$ Class<?>[] parameterTypes = readObjectMethod.getParameterTypes()[ CD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_3 $$ Method readObjectMethod = RemoteSPI.class.getDeclaredMethod("readObject", ObjectInputStream.class)[ CD ]
Line_14 $$ Method writeObjectMethod = RemoteSPI.class.getDeclaredMethod("writeObject", ObjectOutputStream.class)-->Line_16 $$ Assert.assertEquals(Modifier.PRIVATE, writeObjectMethod.getModifiers())[ FD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_15 $$ Assert.assertNotNull(writeObjectMethod)[ CD ]
Line_7 $$ Class<?>[] parameterTypes = readObjectMethod.getParameterTypes()-->Line_18 $$ parameterTypes = writeObjectMethod.getParameterTypes()[ FD ]
Line_14 $$ Method writeObjectMethod = RemoteSPI.class.getDeclaredMethod("writeObject", ObjectOutputStream.class)-->Line_15 $$ Assert.assertNotNull(writeObjectMethod)[ FD ]
Line_3 $$ Method readObjectMethod = RemoteSPI.class.getDeclaredMethod("readObject", ObjectInputStream.class)-->Line_10 $$ List<Class<?>> exceptionTypes = Arrays.asList(readObjectMethod.getExceptionTypes())[ FD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_18 $$ parameterTypes = writeObjectMethod.getParameterTypes()[ CD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_19 $$ Assert.assertEquals(1, parameterTypes.length)[ CD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_21 $$ Class<?>[] exceptionTypeArray = writeObjectMethod.getExceptionTypes()[ CD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_8 $$ Assert.assertEquals(1, parameterTypes.length)[ CD ]
Line_3 $$ Method readObjectMethod = RemoteSPI.class.getDeclaredMethod("readObject", ObjectInputStream.class)-->Line_6 $$ Assert.assertSame(void.class, readObjectMethod.getReturnType())[ FD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_17 $$ Assert.assertSame(void.class, writeObjectMethod.getReturnType())[ CD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_9 $$ Assert.assertSame(ObjectInputStream.class, parameterTypes[0])[ CD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_12 $$ Assert.assertTrue(exceptionTypes.contains(ClassNotFoundException.class))[ CD ]
Line_14 $$ Method writeObjectMethod = RemoteSPI.class.getDeclaredMethod("writeObject", ObjectOutputStream.class)-->Line_18 $$ parameterTypes = writeObjectMethod.getParameterTypes()[ FD ]
Line_3 $$ Method readObjectMethod = RemoteSPI.class.getDeclaredMethod("readObject", ObjectInputStream.class)-->Line_5 $$ Assert.assertEquals(Modifier.PRIVATE, readObjectMethod.getModifiers())[ FD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_20 $$ Assert.assertSame(ObjectOutputStream.class, parameterTypes[0])[ CD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_22 $$ Assert.assertEquals(1, exceptionTypeArray.length)[ CD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_6 $$ Assert.assertSame(void.class, readObjectMethod.getReturnType())[ CD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_14 $$ Method writeObjectMethod = RemoteSPI.class.getDeclaredMethod("writeObject", ObjectOutputStream.class)[ CD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_16 $$ Assert.assertEquals(Modifier.PRIVATE, writeObjectMethod.getModifiers())[ CD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_5 $$ Assert.assertEquals(Modifier.PRIVATE, readObjectMethod.getModifiers())[ CD ]
Line_3 $$ Method readObjectMethod = RemoteSPI.class.getDeclaredMethod("readObject", ObjectInputStream.class)-->Line_4 $$ Assert.assertNotNull(readObjectMethod)[ FD ]
Line_10 $$ List<Class<?>> exceptionTypes = Arrays.asList(readObjectMethod.getExceptionTypes())-->Line_11 $$ Assert.assertEquals(2, exceptionTypes.size())[ FD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_10 $$ List<Class<?>> exceptionTypes = Arrays.asList(readObjectMethod.getExceptionTypes())[ CD ]
Line_14 $$ Method writeObjectMethod = RemoteSPI.class.getDeclaredMethod("writeObject", ObjectOutputStream.class)-->Line_17 $$ Assert.assertSame(void.class, writeObjectMethod.getReturnType())[ FD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_13 $$ Assert.assertTrue(exceptionTypes.contains(IOException.class))[ CD ]
Line_10 $$ List<Class<?>> exceptionTypes = Arrays.asList(readObjectMethod.getExceptionTypes())-->Line_13 $$ Assert.assertTrue(exceptionTypes.contains(IOException.class))[ FD ]
Line_2 $$ public void testSerializationSignature() throws Exception -->Line_23 $$ Assert.assertSame(IOException.class, exceptionTypeArray[0])[ CD ]
