Line_3 $$ if (method.getReturnType().equals(void.class) || method.getReturnType().equals(Future.class)) -->Line_4 $$ configuration.addClientInterceptor(method, LogDiagnosticContextStorageInterceptor.getFactory(), InterceptorOrder.Client.LOCAL_ASYNC_LOG_SAVE)[ CD ]
Line_2 $$ private static void addAsyncInterceptor(final ViewConfiguration configuration, final Method method) throws DeploymentUnitProcessingException -->Line_4 $$ configuration.addClientInterceptor(method, LogDiagnosticContextStorageInterceptor.getFactory(), InterceptorOrder.Client.LOCAL_ASYNC_LOG_SAVE)[ FD ]
Line_3 $$ if (method.getReturnType().equals(void.class) || method.getReturnType().equals(Future.class)) -->Line_5 $$ configuration.addClientInterceptor(method, AsyncFutureInterceptorFactory.INSTANCE, InterceptorOrder.Client.LOCAL_ASYNC_INVOCATION)[ CD ]
Line_2 $$ private static void addAsyncInterceptor(final ViewConfiguration configuration, final Method method) throws DeploymentUnitProcessingException -->Line_6 $$ configuration.addClientInterceptor(method, LogDiagnosticContextRecoveryInterceptor.getFactory(), InterceptorOrder.Client.LOCAL_ASYNC_LOG_RESTORE)[ FD ]
Line_3 $$ if (method.getReturnType().equals(void.class) || method.getReturnType().equals(Future.class)) -->Line_6 $$ configuration.addClientInterceptor(method, LogDiagnosticContextRecoveryInterceptor.getFactory(), InterceptorOrder.Client.LOCAL_ASYNC_LOG_RESTORE)[ CD ]
Line_2 $$ private static void addAsyncInterceptor(final ViewConfiguration configuration, final Method method) throws DeploymentUnitProcessingException -->Line_8 $$ throw EjbLogger.ROOT_LOGGER.wrongReturnTypeForAsyncMethod(method)[ FD ]
Line_2 $$ private static void addAsyncInterceptor(final ViewConfiguration configuration, final Method method) throws DeploymentUnitProcessingException -->Line_3 $$ if (method.getReturnType().equals(void.class) || method.getReturnType().equals(Future.class)) [ FD ]
Line_2 $$ private static void addAsyncInterceptor(final ViewConfiguration configuration, final Method method) throws DeploymentUnitProcessingException -->Line_3 $$ if (method.getReturnType().equals(void.class) || method.getReturnType().equals(Future.class)) [ CD ]
Line_2 $$ private static void addAsyncInterceptor(final ViewConfiguration configuration, final Method method) throws DeploymentUnitProcessingException -->Line_5 $$ configuration.addClientInterceptor(method, AsyncFutureInterceptorFactory.INSTANCE, InterceptorOrder.Client.LOCAL_ASYNC_INVOCATION)[ FD ]
