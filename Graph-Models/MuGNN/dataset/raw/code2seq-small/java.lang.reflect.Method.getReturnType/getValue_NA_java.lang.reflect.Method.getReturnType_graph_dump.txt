Line_10 $$ for (PropertyAccessor accessor : accessorsToTry) -->Line_18 $$ if (accessor instanceof ReflectivePropertyAccessor.OptimalPropertyAccessor) [ FD ]
Line_10 $$ for (PropertyAccessor accessor : accessorsToTry) -->Line_15 $$ Indexer.this.cachedReadAccessor = accessor[ FD ]
Line_18 $$ if (accessor instanceof ReflectivePropertyAccessor.OptimalPropertyAccessor) -->Line_20 $$ Member member = optimalAccessor.member[ CD ]
Line_3 $$ Class<?> targetObjectRuntimeClass = getObjectClass(this.targetObject)-->Line_5 $$ if (Indexer.this.cachedReadName != null && Indexer.this.cachedReadName.equals(this.name) && Indexer.this.cachedReadTargetType != null && Indexer.this.cachedReadTargetType.equals(targetObjectRuntimeClass)) [ FD ]
Line_2 $$ public TypedValue getValue() -->Line_3 $$ Class<?> targetObjectRuntimeClass = getObjectClass(this.targetObject)[ CD ]
Line_12 $$ if (accessor instanceof ReflectivePropertyAccessor) -->Line_13 $$ accessor = ((ReflectivePropertyAccessor) accessor).createOptimalAccessor(this.evaluationContext, this.targetObject, this.name)[ CD ]
Line_11 $$ if (accessor.canRead(this.evaluationContext, this.targetObject, this.name)) -->Line_23 $$ return accessor.read(this.evaluationContext, this.targetObject, this.name)[ CD ]
Line_13 $$ accessor = ((ReflectivePropertyAccessor) accessor).createOptimalAccessor(this.evaluationContext, this.targetObject, this.name)-->Line_15 $$ Indexer.this.cachedReadAccessor = accessor[ FD ]
Line_11 $$ if (accessor.canRead(this.evaluationContext, this.targetObject, this.name)) -->Line_15 $$ Indexer.this.cachedReadAccessor = accessor[ CD ]
Line_5 $$ if (Indexer.this.cachedReadName != null && Indexer.this.cachedReadName.equals(this.name) && Indexer.this.cachedReadTargetType != null && Indexer.this.cachedReadTargetType.equals(targetObjectRuntimeClass)) -->Line_6 $$ return Indexer.this.cachedReadAccessor.read(this.evaluationContext, this.targetObject, this.name)[ CD ]
Line_13 $$ accessor = ((ReflectivePropertyAccessor) accessor).createOptimalAccessor(this.evaluationContext, this.targetObject, this.name)-->Line_18 $$ if (accessor instanceof ReflectivePropertyAccessor.OptimalPropertyAccessor) [ FD ]
Line_10 $$ for (PropertyAccessor accessor : accessorsToTry) -->Line_23 $$ return accessor.read(this.evaluationContext, this.targetObject, this.name)[ FD ]
Line_18 $$ if (accessor instanceof ReflectivePropertyAccessor.OptimalPropertyAccessor) -->Line_21 $$ Indexer.this.exitTypeDescriptor = CodeFlow.toDescriptor(member instanceof Method ? ((Method) member).getReturnType() : ((Field) member).getType())[ CD ]
Line_10 $$ for (PropertyAccessor accessor : accessorsToTry) -->Line_13 $$ accessor = ((ReflectivePropertyAccessor) accessor).createOptimalAccessor(this.evaluationContext, this.targetObject, this.name)[ FD ]
Line_10 $$ for (PropertyAccessor accessor : accessorsToTry) -->Line_11 $$ if (accessor.canRead(this.evaluationContext, this.targetObject, this.name)) [ FD ]
Line_11 $$ if (accessor.canRead(this.evaluationContext, this.targetObject, this.name)) -->Line_17 $$ Indexer.this.cachedReadTargetType = targetObjectRuntimeClass[ CD ]
Line_3 $$ Class<?> targetObjectRuntimeClass = getObjectClass(this.targetObject)-->Line_8 $$ List<PropertyAccessor> accessorsToTry = AstUtils.getPropertyAccessorsToTry(targetObjectRuntimeClass, this.evaluationContext.getPropertyAccessors())[ FD ]
Line_11 $$ if (accessor.canRead(this.evaluationContext, this.targetObject, this.name)) -->Line_18 $$ if (accessor instanceof ReflectivePropertyAccessor.OptimalPropertyAccessor) [ CD ]
Line_10 $$ for (PropertyAccessor accessor : accessorsToTry) -->Line_12 $$ if (accessor instanceof ReflectivePropertyAccessor) [ FD ]
Line_18 $$ if (accessor instanceof ReflectivePropertyAccessor.OptimalPropertyAccessor) -->Line_19 $$ ReflectivePropertyAccessor.OptimalPropertyAccessor optimalAccessor = (ReflectivePropertyAccessor.OptimalPropertyAccessor) accessor[ CD ]
Line_8 $$ List<PropertyAccessor> accessorsToTry = AstUtils.getPropertyAccessorsToTry(targetObjectRuntimeClass, this.evaluationContext.getPropertyAccessors())-->Line_9 $$ if (accessorsToTry != null) [ FD ]
Line_3 $$ Class<?> targetObjectRuntimeClass = getObjectClass(this.targetObject)-->Line_17 $$ Indexer.this.cachedReadTargetType = targetObjectRuntimeClass[ FD ]
Line_13 $$ accessor = ((ReflectivePropertyAccessor) accessor).createOptimalAccessor(this.evaluationContext, this.targetObject, this.name)-->Line_23 $$ return accessor.read(this.evaluationContext, this.targetObject, this.name)[ FD ]
Line_11 $$ if (accessor.canRead(this.evaluationContext, this.targetObject, this.name)) -->Line_12 $$ if (accessor instanceof ReflectivePropertyAccessor) [ CD ]
Line_11 $$ if (accessor.canRead(this.evaluationContext, this.targetObject, this.name)) -->Line_16 $$ Indexer.this.cachedReadName = this.name[ CD ]
