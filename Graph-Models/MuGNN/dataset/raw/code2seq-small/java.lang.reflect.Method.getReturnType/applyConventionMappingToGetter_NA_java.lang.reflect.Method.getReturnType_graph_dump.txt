Line_5 $$ Type returnType = Type.getType(getter.getReturnType())-->Line_16 $$ String valueOfMethodDescriptor = Type.getMethodDescriptor(boxedType, returnType)[ FD ]
Line_24 $$ if (getter.getReturnType().isPrimitive()) -->Line_27 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, boxedType.getInternalName(), getter.getReturnType().getName() + "Value", valueMethodDescriptor)[ CD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_8 $$ methodVisitor.visitCode()[ CD ]
Line_14 $$ if (getter.getReturnType().isPrimitive()) -->Line_17 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, boxedType.getInternalName(), "valueOf", valueOfMethodDescriptor)[ CD ]
Line_15 $$ boxedType = Type.getType(JavaReflectionUtil.getWrapperTypeForPrimitiveType(getter.getReturnType()))-->Line_16 $$ String valueOfMethodDescriptor = Type.getMethodDescriptor(boxedType, returnType)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_4 $$ String getterName = getter.getName()[ CD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_9 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ CD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_10 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, conventionAwareType.getInternalName(), "getConventionMapping", Type.getMethodDescriptor(conventionMappingType))[ FD ]
Line_16 $$ String valueOfMethodDescriptor = Type.getMethodDescriptor(boxedType, returnType)-->Line_17 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, boxedType.getInternalName(), "valueOf", valueOfMethodDescriptor)[ FD ]
Line_15 $$ boxedType = Type.getType(JavaReflectionUtil.getWrapperTypeForPrimitiveType(getter.getReturnType()))-->Line_25 $$ methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, boxedType.getInternalName())[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_14 $$ if (getter.getReturnType().isPrimitive()) [ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_21 $$ methodVisitor.visitFieldInsn(Opcodes.GETFIELD, generatedType.getInternalName(), flagName, Type.BOOLEAN_TYPE.getDescriptor())[ CD ]
Line_13 $$ Type boxedType = null-->Line_27 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, boxedType.getInternalName(), getter.getReturnType().getName() + "Value", valueMethodDescriptor)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_27 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, boxedType.getInternalName(), getter.getReturnType().getName() + "Value", valueMethodDescriptor)[ FD ]
Line_4 $$ String getterName = getter.getName()-->Line_12 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, superclassType.getInternalName(), getterName, methodDescriptor)[ FD ]
Line_13 $$ Type boxedType = null-->Line_25 $$ methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, boxedType.getInternalName())[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_3 $$ String flagName = propFieldName(property)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_32 $$ methodVisitor.visitMaxs(0, 0)[ CD ]
Line_3 $$ String flagName = propFieldName(property)-->Line_21 $$ methodVisitor.visitFieldInsn(Opcodes.GETFIELD, generatedType.getInternalName(), flagName, Type.BOOLEAN_TYPE.getDescriptor())[ FD ]
Line_13 $$ Type boxedType = null-->Line_15 $$ boxedType = Type.getType(JavaReflectionUtil.getWrapperTypeForPrimitiveType(getter.getReturnType()))[ FD ]
Line_22 $$ String getConventionValueDesc = Type.getMethodDescriptor(ConventionMapping.class.getMethod("getConventionValue", Object.class, String.class, Boolean.TYPE))-->Line_23 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, conventionMappingType.getInternalName(), "getConventionValue", getConventionValueDesc)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_31 $$ methodVisitor.visitInsn(returnType.getOpcode(Opcodes.IRETURN))[ CD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_24 $$ if (getter.getReturnType().isPrimitive()) [ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_5 $$ Type returnType = Type.getType(getter.getReturnType())[ CD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_10 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, conventionAwareType.getInternalName(), "getConventionMapping", Type.getMethodDescriptor(conventionMappingType))[ CD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_13 $$ Type boxedType = null[ CD ]
Line_24 $$ if (getter.getReturnType().isPrimitive()) -->Line_26 $$ String valueMethodDescriptor = Type.getMethodDescriptor(returnType)[ CD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_23 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, conventionMappingType.getInternalName(), "getConventionValue", getConventionValueDesc)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_6 $$ String methodDescriptor = Type.getMethodDescriptor(returnType)[ CD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_14 $$ if (getter.getReturnType().isPrimitive()) [ CD ]
Line_13 $$ Type boxedType = null-->Line_17 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, boxedType.getInternalName(), "valueOf", valueOfMethodDescriptor)[ FD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_31 $$ methodVisitor.visitInsn(returnType.getOpcode(Opcodes.IRETURN))[ FD ]
Line_5 $$ Type returnType = Type.getType(getter.getReturnType())-->Line_31 $$ methodVisitor.visitInsn(returnType.getOpcode(Opcodes.IRETURN))[ FD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_33 $$ methodVisitor.visitEnd()[ FD ]
Line_5 $$ Type returnType = Type.getType(getter.getReturnType())-->Line_6 $$ String methodDescriptor = Type.getMethodDescriptor(returnType)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_15 $$ boxedType = Type.getType(JavaReflectionUtil.getWrapperTypeForPrimitiveType(getter.getReturnType()))[ FD ]
Line_5 $$ Type returnType = Type.getType(getter.getReturnType())-->Line_29 $$ methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, getter.getReturnType().isArray() ? "[" + returnType.getElementType().getDescriptor() : returnType.getInternalName())[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_19 $$ methodVisitor.visitLdcInsn(property.getName())[ FD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_27 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, boxedType.getInternalName(), getter.getReturnType().getName() + "Value", valueMethodDescriptor)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_20 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ CD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_29 $$ methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, getter.getReturnType().isArray() ? "[" + returnType.getElementType().getDescriptor() : returnType.getInternalName())[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_11 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ CD ]
Line_6 $$ String methodDescriptor = Type.getMethodDescriptor(returnType)-->Line_12 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, superclassType.getInternalName(), getterName, methodDescriptor)[ FD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_29 $$ methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, getter.getReturnType().isArray() ? "[" + returnType.getElementType().getDescriptor() : returnType.getInternalName())[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_22 $$ String getConventionValueDesc = Type.getMethodDescriptor(ConventionMapping.class.getMethod("getConventionValue", Object.class, String.class, Boolean.TYPE))[ CD ]
Line_24 $$ if (getter.getReturnType().isPrimitive()) -->Line_25 $$ methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, boxedType.getInternalName())[ CD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_12 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, superclassType.getInternalName(), getterName, methodDescriptor)[ FD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_20 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_3 $$ String flagName = propFieldName(property)[ CD ]
Line_6 $$ String methodDescriptor = Type.getMethodDescriptor(returnType)-->Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])[ FD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_25 $$ methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, boxedType.getInternalName())[ FD ]
Line_26 $$ String valueMethodDescriptor = Type.getMethodDescriptor(returnType)-->Line_27 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, boxedType.getInternalName(), getter.getReturnType().getName() + "Value", valueMethodDescriptor)[ FD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_17 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, boxedType.getInternalName(), "valueOf", valueOfMethodDescriptor)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_33 $$ methodVisitor.visitEnd()[ CD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_19 $$ methodVisitor.visitLdcInsn(property.getName())[ CD ]
Line_13 $$ Type boxedType = null-->Line_16 $$ String valueOfMethodDescriptor = Type.getMethodDescriptor(boxedType, returnType)[ FD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_19 $$ methodVisitor.visitLdcInsn(property.getName())[ FD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_11 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_4 $$ String getterName = getter.getName()[ FD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_21 $$ methodVisitor.visitFieldInsn(Opcodes.GETFIELD, generatedType.getInternalName(), flagName, Type.BOOLEAN_TYPE.getDescriptor())[ FD ]
Line_24 $$ if (getter.getReturnType().isPrimitive()) -->Line_29 $$ methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, getter.getReturnType().isArray() ? "[" + returnType.getElementType().getDescriptor() : returnType.getInternalName())[ CD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_32 $$ methodVisitor.visitMaxs(0, 0)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_23 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, conventionMappingType.getInternalName(), "getConventionValue", getConventionValueDesc)[ CD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])[ CD ]
Line_15 $$ boxedType = Type.getType(JavaReflectionUtil.getWrapperTypeForPrimitiveType(getter.getReturnType()))-->Line_17 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC, boxedType.getInternalName(), "valueOf", valueOfMethodDescriptor)[ FD ]
Line_14 $$ if (getter.getReturnType().isPrimitive()) -->Line_15 $$ boxedType = Type.getType(JavaReflectionUtil.getWrapperTypeForPrimitiveType(getter.getReturnType()))[ CD ]
Line_14 $$ if (getter.getReturnType().isPrimitive()) -->Line_16 $$ String valueOfMethodDescriptor = Type.getMethodDescriptor(boxedType, returnType)[ CD ]
Line_4 $$ String getterName = getter.getName()-->Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])[ FD ]
Line_5 $$ Type returnType = Type.getType(getter.getReturnType())-->Line_26 $$ String valueMethodDescriptor = Type.getMethodDescriptor(returnType)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_12 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, superclassType.getInternalName(), getterName, methodDescriptor)[ CD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_24 $$ if (getter.getReturnType().isPrimitive()) [ CD ]
Line_15 $$ boxedType = Type.getType(JavaReflectionUtil.getWrapperTypeForPrimitiveType(getter.getReturnType()))-->Line_27 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, boxedType.getInternalName(), getter.getReturnType().getName() + "Value", valueMethodDescriptor)[ FD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_8 $$ methodVisitor.visitCode()[ FD ]
Line_7 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, null, new String[0])-->Line_9 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ FD ]
Line_2 $$ public void applyConventionMappingToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_5 $$ Type returnType = Type.getType(getter.getReturnType())[ FD ]
