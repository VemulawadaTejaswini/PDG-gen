Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_46 $$ if (!description.isExcludeDefaultInterceptors()) [ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_46 $$ if (!description.isExcludeDefaultInterceptors()) [ CD ]
Line_106 $$ if (isNotOverriden(clazz, method, interceptorClass, deploymentReflectionIndex)) -->Line_109 $$ if (factories == null) [ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_21 $$ if (description.isTimerServiceRequired()) [ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_77 $$ mergeInjectionsForClass(clazz, interceptorClass, classDescription, moduleDescription, deploymentReflectionIndex, description, configuration, context, injectors, contextKey, uninjectors, metadataComplete)[ FD ]
Line_7 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)-->Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_151 $$ configuration.addAroundConstructInterceptor(instantiator, InterceptorOrder.AroundConstruct.CONSTRUCT_COMPONENT)[ CD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_108 $$ List<InterceptorFactory> factories = classMap.get(interceptorClassName)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_26 $$ if (description.isPassivationApplicable()) [ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_4 $$ final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(REFLECTION_INDEX)[ CD ]
Line_27 $$ userPrePassivatesByInterceptorClass = new HashMap()-->Line_99 $$ handleInterceptorClass(clazz, interceptorConfig.getPrePassivate(), userPrePassivatesByInterceptorClass, false, false)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_19 $$ final Map<String, List<InterceptorFactory>> userPreDestroyByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()[ CD ]
Line_79 $$ if (classDescription != null && !metadataComplete) -->Line_80 $$ interceptorConfig = InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(), moduleDescription.getInterceptorClassOverride(clazz.getName()))[ CD ]
Line_17 $$ final Map<String, List<InterceptorFactory>> userPostActivatesByInterceptorClass-->Line_100 $$ handleInterceptorClass(clazz, interceptorConfig.getPostActivate(), userPostActivatesByInterceptorClass, false, false)[ FD ]
Line_50 $$ for (final InterceptorDescription interceptorDescription : description.getAllInterceptors()) -->Line_74 $$ final boolean interceptorHasLifecycleCallbacks = interceptorWithLifecycleCallbacks.contains(interceptorDescription)[ FD ]
Line_165 $$ if (!userPreDestroy.isEmpty()) -->Line_166 $$ configuration.addPreDestroyInterceptors(userPreDestroy, InterceptorOrder.ComponentPreDestroy.INTERCEPTOR_USER_INTERCEPTORS)[ CD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_128 $$ userAroundConstruct.addAll(userAroundConstructsByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_6 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)[ CD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_67 $$ final ClassReflectionIndex interceptorIndex = deploymentReflectionIndex.getClassIndex(interceptorClass)[ FD ]
Line_17 $$ final Map<String, List<InterceptorFactory>> userPostActivatesByInterceptorClass-->Line_138 $$ userPostActivate.addAll(userPostActivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_78 $$ final InterceptorClassDescription interceptorConfig-->Line_85 $$ final MethodIdentifier postConstructMethodIdentifier = interceptorConfig.getPostConstruct()[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()-->Line_8 $$ final boolean metadataComplete = MetadataCompleteMarker.isMetadataComplete(deploymentUnit)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_5 $$ final EEApplicationClasses applicationClasses = deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION)[ CD ]
Line_16 $$ final Map<String, List<InterceptorFactory>> userPrePassivatesByInterceptorClass-->Line_30 $$ userPrePassivatesByInterceptorClass = null[ FD ]
Line_10 $$ final Deque<InterceptorFactory> injectors = new ArrayDeque()-->Line_77 $$ mergeInjectionsForClass(clazz, interceptorClass, classDescription, moduleDescription, deploymentReflectionIndex, description, configuration, context, injectors, contextKey, uninjectors, metadataComplete)[ FD ]
Line_80 $$ interceptorConfig = InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(), moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_92 $$ final MethodIdentifier aroundInvokeMethodIdentifier = interceptorConfig.getAroundInvoke()[ FD ]
Line_92 $$ final MethodIdentifier aroundInvokeMethodIdentifier = interceptorConfig.getAroundInvoke()-->Line_93 $$ handleInterceptorClass(clazz, aroundInvokeMethodIdentifier, userAroundInvokesByInterceptorClass, false, false)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_178 $$ if (description.isIntercepted()) [ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_152 $$ configuration.addAroundConstructInterceptor(new ImmediateInterceptorFactory(Interceptors.getTerminalInterceptor()), InterceptorOrder.AroundConstruct.TERMINAL_INTERCEPTOR)[ CD ]
Line_172 $$ if (!userPostActivate.isEmpty()) -->Line_173 $$ configuration.addPostActivateInterceptors(userPostActivate, InterceptorOrder.ComponentPassivation.INTERCEPTOR_USER_INTERCEPTORS)[ CD ]
Line_6 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)-->Line_82 $$ interceptorConfig = InterceptorClassDescription.merge(null, moduleDescription.getInterceptorClassOverride(clazz.getName()))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_145 $$ if (!instantiators.isEmpty()) [ CD ]
Line_6 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)-->Line_80 $$ interceptorConfig = InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(), moduleDescription.getInterceptorClassOverride(clazz.getName()))[ FD ]
Line_15 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass-->Line_96 $$ handleInterceptorClass(clazz, aroundTimeoutMethodIdentifier, userAroundTimeoutsByInterceptorClass, false, false)[ FD ]
Line_106 $$ if (isNotOverriden(clazz, method, interceptorClass, deploymentReflectionIndex)) -->Line_112 $$ factories.add(interceptorFactory)[ CD ]
Line_159 $$ if (!uninjectors.isEmpty()) -->Line_160 $$ configuration.addPreDestroyInterceptors(new ArrayList(uninjectors), InterceptorOrder.ComponentPreDestroy.INTERCEPTOR_UNINJECTION_INTERCEPTORS)[ CD ]
Line_22 $$ userAroundTimeoutsByInterceptorClass = new HashMap()-->Line_96 $$ handleInterceptorClass(clazz, aroundTimeoutMethodIdentifier, userAroundTimeoutsByInterceptorClass, false, false)[ FD ]
Line_162 $$ if (!destructors.isEmpty()) -->Line_163 $$ configuration.addPreDestroyInterceptors(new ArrayList(destructors), InterceptorOrder.ComponentPreDestroy.INTERCEPTOR_DESTRUCTION_INTERCEPTORS)[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_153 $$ if (!configuration.getAroundConstructInterceptors().isEmpty()) [ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_233 $$ configuration.addComponentInterceptors(method, userAroundInvokes, InterceptorOrder.Component.INTERCEPTOR_USER_INTERCEPTORS)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_162 $$ if (!destructors.isEmpty()) [ CD ]
Line_9 $$ final Deque<InterceptorFactory> instantiators = new ArrayDeque()-->Line_145 $$ if (!instantiators.isEmpty()) [ FD ]
Line_94 $$ if (description.isTimerServiceRequired()) -->Line_95 $$ final MethodIdentifier aroundTimeoutMethodIdentifier = interceptorConfig.getAroundTimeout()[ CD ]
Line_31 $$ userPostActivatesByInterceptorClass = null-->Line_138 $$ userPostActivate.addAll(userPostActivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_49 $$ interceptorWithLifecycleCallbacks.addAll(description.getClassInterceptors())[ FD ]
Line_222 $$ if (requiresTimerChain) -->Line_224 $$ if (aroundTimeouts != null) [ CD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_96 $$ handleInterceptorClass(clazz, aroundTimeoutMethodIdentifier, userAroundTimeoutsByInterceptorClass, false, false)[ FD ]
Line_105 $$ final Method method = ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex, clazz, methodIdentifier)-->Line_180 $$ final MethodIdentifier identifier = MethodIdentifier.getIdentifier(method.getReturnType(), method.getName(), method.getParameterTypes())[ FD ]
Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_207 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_108 $$ List<InterceptorFactory> factories = classMap.get(interceptorClassName)-->Line_112 $$ factories.add(interceptorFactory)[ FD ]
Line_145 $$ if (!instantiators.isEmpty()) -->Line_146 $$ configuration.addPostConstructInterceptors(new ArrayList(instantiators), InterceptorOrder.ComponentPostConstruct.INTERCEPTOR_INSTANTIATION_INTERCEPTORS)[ CD ]
Line_16 $$ final Map<String, List<InterceptorFactory>> userPrePassivatesByInterceptorClass-->Line_99 $$ handleInterceptorClass(clazz, interceptorConfig.getPrePassivate(), userPrePassivatesByInterceptorClass, false, false)[ FD ]
Line_52 $$ final Class<?> interceptorClass-->Line_67 $$ final ClassReflectionIndex interceptorIndex = deploymentReflectionIndex.getClassIndex(interceptorClass)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_41 $$ throw EeLogger.ROOT_LOGGER.defaultConstructorNotFound(configuration.getComponentClass())[ FD ]
Line_28 $$ userPostActivatesByInterceptorClass = new HashMap()-->Line_100 $$ handleInterceptorClass(clazz, interceptorConfig.getPostActivate(), userPostActivatesByInterceptorClass, false, false)[ FD ]
Line_39 $$ final Constructor<?> constructor = componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY)-->Line_40 $$ if (constructor == null) [ FD ]
Line_36 $$ instantiator = new ImmediateInterceptorFactory(new ComponentInstantiatorInterceptor(instanceFactory, BasicComponentInstance.INSTANCE_KEY, true))-->Line_151 $$ configuration.addAroundConstructInterceptor(instantiator, InterceptorOrder.AroundConstruct.CONSTRUCT_COMPONENT)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_157 $$ configuration.addPostConstructInterceptors(userPostConstruct, InterceptorOrder.ComponentPostConstruct.INTERCEPTOR_USER_INTERCEPTORS)[ FD ]
Line_168 $$ if (description.isPassivationApplicable()) -->Line_172 $$ if (!userPostActivate.isEmpty()) [ CD ]
Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_70 $$ throw EeLogger.ROOT_LOGGER.defaultConstructorNotFoundOnComponent(interceptorClassName, configuration.getComponentClass())[ FD ]
Line_27 $$ userPrePassivatesByInterceptorClass = new HashMap()-->Line_135 $$ userPrePassivate.addAll(userPrePassivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_98 $$ if (description.isPassivationApplicable()) [ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_34 $$ final ComponentFactory instanceFactory = configuration.getInstanceFactory()[ FD ]
Line_52 $$ final Class<?> interceptorClass-->Line_127 $$ if (userAroundConstructsByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_94 $$ if (description.isTimerServiceRequired()) [ FD ]
Line_27 $$ userPrePassivatesByInterceptorClass = new HashMap()-->Line_134 $$ if (userPrePassivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_26 $$ if (description.isPassivationApplicable()) -->Line_28 $$ userPostActivatesByInterceptorClass = new HashMap()[ CD ]
Line_52 $$ final Class<?> interceptorClass-->Line_131 $$ userPreDestroy.addAll(userPreDestroyByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_108 $$ List<InterceptorFactory> factories = classMap.get(interceptorClassName)[ FD ]
Line_169 $$ if (!userPrePassivate.isEmpty()) -->Line_170 $$ configuration.addPrePassivateInterceptors(userPrePassivate, InterceptorOrder.ComponentPassivation.INTERCEPTOR_USER_INTERCEPTORS)[ CD ]
Line_4 $$ final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(REFLECTION_INDEX)-->Line_38 $$ final ClassReflectionIndex componentClassIndex = deploymentReflectionIndex.getClassIndex(configuration.getComponentClass())[ FD ]
Line_28 $$ userPostActivatesByInterceptorClass = new HashMap()-->Line_138 $$ userPostActivate.addAll(userPostActivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_15 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass-->Line_22 $$ userAroundTimeoutsByInterceptorClass = new HashMap()[ FD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_124 $$ if (userPostConstructByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_58 $$ final InterceptorEnvironment interceptorEnvironment = moduleDescription.getInterceptorEnvironment().get(interceptorClassName)-->Line_59 $$ if (interceptorEnvironment != null) [ FD ]
Line_24 $$ userAroundTimeoutsByInterceptorClass = null-->Line_192 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_133 $$ if (description.isPassivationApplicable()) -->Line_134 $$ if (userPrePassivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ CD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_92 $$ final MethodIdentifier aroundInvokeMethodIdentifier = interceptorConfig.getAroundInvoke()[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_163 $$ configuration.addPreDestroyInterceptors(new ArrayList(destructors), InterceptorOrder.ComponentPreDestroy.INTERCEPTOR_DESTRUCTION_INTERCEPTORS)[ FD ]
Line_222 $$ if (requiresTimerChain) -->Line_223 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ CD ]
Line_105 $$ final Method method = ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex, clazz, methodIdentifier)-->Line_106 $$ if (isNotOverriden(clazz, method, interceptorClass, deploymentReflectionIndex)) [ FD ]
Line_191 $$ if (requiresTimerChain) -->Line_192 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_153 $$ if (!configuration.getAroundConstructInterceptors().isEmpty()) [ FD ]
Line_14 $$ final Map<String, List<InterceptorFactory>> userAroundConstructsByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_127 $$ if (userAroundConstructsByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_26 $$ if (description.isPassivationApplicable()) -->Line_31 $$ userPostActivatesByInterceptorClass = null[ CD ]
Line_84 $$ if (interceptorHasLifecycleCallbacks && !description.isIgnoreLifecycleInterceptors()) -->Line_87 $$ final MethodIdentifier preDestroyMethodIdentifier = interceptorConfig.getPreDestroy()[ CD ]
Line_13 $$ final Map<String, List<InterceptorFactory>> userAroundInvokesByInterceptorClass = new HashMap()-->Line_202 $$ List<InterceptorFactory> aroundInvokes = userAroundInvokesByInterceptorClass.get(interceptorClassName)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_16 $$ final Map<String, List<InterceptorFactory>> userPrePassivatesByInterceptorClass[ CD ]
Line_18 $$ final Map<String, List<InterceptorFactory>> userPostConstructByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_125 $$ userPostConstruct.addAll(userPostConstructByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_149 $$ configuration.addAroundConstructInterceptors(userAroundConstruct, InterceptorOrder.AroundConstruct.INTERCEPTOR_AROUND_CONSTRUCT)[ FD ]
Line_82 $$ interceptorConfig = InterceptorClassDescription.merge(null, moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_89 $$ final MethodIdentifier aroundConstructMethodIdentifier = interceptorConfig.getAroundConstruct()[ FD ]
Line_80 $$ interceptorConfig = InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(), moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_82 $$ interceptorConfig = InterceptorClassDescription.merge(null, moduleDescription.getInterceptorClassOverride(clazz.getName()))[ FD ]
Line_230 $$ if (requiresTimerChain) -->Line_233 $$ configuration.addComponentInterceptors(method, userAroundInvokes, InterceptorOrder.Component.INTERCEPTOR_USER_INTERCEPTORS)[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_34 $$ final ComponentFactory instanceFactory = configuration.getInstanceFactory()[ CD ]
Line_35 $$ if (instanceFactory != null) -->Line_39 $$ final Constructor<?> constructor = componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY)[ CD ]
Line_95 $$ final MethodIdentifier aroundTimeoutMethodIdentifier = interceptorConfig.getAroundTimeout()-->Line_96 $$ handleInterceptorClass(clazz, aroundTimeoutMethodIdentifier, userAroundTimeoutsByInterceptorClass, false, false)[ FD ]
Line_80 $$ interceptorConfig = InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(), moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_100 $$ handleInterceptorClass(clazz, interceptorConfig.getPostActivate(), userPostActivatesByInterceptorClass, false, false)[ FD ]
Line_13 $$ final Map<String, List<InterceptorFactory>> userAroundInvokesByInterceptorClass = new HashMap()-->Line_187 $$ List<InterceptorFactory> aroundInvokes = userAroundInvokesByInterceptorClass.get(interceptorClassName)[ FD ]
Line_78 $$ final InterceptorClassDescription interceptorConfig-->Line_87 $$ final MethodIdentifier preDestroyMethodIdentifier = interceptorConfig.getPreDestroy()[ FD ]
Line_13 $$ final Map<String, List<InterceptorFactory>> userAroundInvokesByInterceptorClass = new HashMap()-->Line_218 $$ List<InterceptorFactory> aroundInvokes = userAroundInvokesByInterceptorClass.get(interceptorClassName)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_165 $$ if (!userPreDestroy.isEmpty()) [ CD ]
Line_52 $$ final Class<?> interceptorClass-->Line_137 $$ if (userPostActivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_16 $$ final Map<String, List<InterceptorFactory>> userPrePassivatesByInterceptorClass-->Line_134 $$ if (userPrePassivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_17 $$ final Map<String, List<InterceptorFactory>> userPostActivatesByInterceptorClass[ CD ]
Line_52 $$ final Class<?> interceptorClass-->Line_128 $$ userAroundConstruct.addAll(userAroundConstructsByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_50 $$ for (final InterceptorDescription interceptorDescription : description.getAllInterceptors()) -->Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()[ FD ]
Line_58 $$ final InterceptorEnvironment interceptorEnvironment = moduleDescription.getInterceptorEnvironment().get(interceptorClassName)-->Line_61 $$ for (final ResourceInjectionConfiguration injection : interceptorEnvironment.getResourceInjections()) [ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_20 $$ final Set<MethodIdentifier> timeoutMethods = description.getTimerMethods()[ FD ]
Line_33 $$ final InterceptorFactory instantiator-->Line_43 $$ instantiator = new ImmediateInterceptorFactory(new ComponentInstantiatorInterceptor(new ConstructorComponentFactory(constructor), BasicComponentInstance.INSTANCE_KEY, true))[ FD ]
Line_39 $$ final Constructor<?> constructor = componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY)-->Line_69 $$ if (constructor == null) [ FD ]
Line_80 $$ interceptorConfig = InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(), moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_95 $$ final MethodIdentifier aroundTimeoutMethodIdentifier = interceptorConfig.getAroundTimeout()[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_168 $$ if (description.isPassivationApplicable()) [ FD ]
Line_30 $$ userPrePassivatesByInterceptorClass = null-->Line_134 $$ if (userPrePassivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_60 $$ description.getBindingConfigurations().addAll(interceptorEnvironment.getBindingConfigurations())[ FD ]
Line_134 $$ if (userPrePassivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) -->Line_135 $$ userPrePassivate.addAll(userPrePassivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ CD ]
Line_43 $$ instantiator = new ImmediateInterceptorFactory(new ComponentInstantiatorInterceptor(new ConstructorComponentFactory(constructor), BasicComponentInstance.INSTANCE_KEY, true))-->Line_151 $$ configuration.addAroundConstructInterceptor(instantiator, InterceptorOrder.AroundConstruct.CONSTRUCT_COMPONENT)[ FD ]
Line_19 $$ final Map<String, List<InterceptorFactory>> userPreDestroyByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_88 $$ handleInterceptorClass(clazz, preDestroyMethodIdentifier, userPreDestroyByInterceptorClass, true, true)[ FD ]
Line_133 $$ if (description.isPassivationApplicable()) -->Line_137 $$ if (userPostActivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_156 $$ if (!userPostConstruct.isEmpty()) [ CD ]
Line_105 $$ final Method method = ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex, clazz, methodIdentifier)-->Line_231 $$ configuration.addComponentInterceptor(method, new UserInterceptorFactory(weaved(userAroundInvokes), weaved(userAroundTimeouts)), InterceptorOrder.Component.INTERCEPTOR_USER_INTERCEPTORS)[ FD ]
Line_106 $$ if (isNotOverriden(clazz, method, interceptorClass, deploymentReflectionIndex)) -->Line_107 $$ final InterceptorFactory interceptorFactory = new ImmediateInterceptorFactory(new ManagedReferenceLifecycleMethodInterceptor(contextKey, method, changeMethod, lifecycleMethod))[ CD ]
Line_35 $$ if (instanceFactory != null) -->Line_36 $$ instantiator = new ImmediateInterceptorFactory(new ComponentInstantiatorInterceptor(instanceFactory, BasicComponentInstance.INSTANCE_KEY, true))[ CD ]
Line_22 $$ userAroundTimeoutsByInterceptorClass = new HashMap()-->Line_223 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_108 $$ List<InterceptorFactory> factories = classMap.get(interceptorClassName)-->Line_110 $$ classMap.put(interceptorClassName, factories = new ArrayList<InterceptorFactory>())[ FD ]
Line_84 $$ if (interceptorHasLifecycleCallbacks && !description.isIgnoreLifecycleInterceptors()) -->Line_88 $$ handleInterceptorClass(clazz, preDestroyMethodIdentifier, userPreDestroyByInterceptorClass, true, true)[ CD ]
Line_127 $$ if (userAroundConstructsByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) -->Line_128 $$ userAroundConstruct.addAll(userAroundConstructsByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ CD ]
Line_11 $$ final Deque<InterceptorFactory> uninjectors = new ArrayDeque()-->Line_159 $$ if (!uninjectors.isEmpty()) [ FD ]
Line_82 $$ interceptorConfig = InterceptorClassDescription.merge(null, moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_87 $$ final MethodIdentifier preDestroyMethodIdentifier = interceptorConfig.getPreDestroy()[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_185 $$ for (InterceptorDescription interceptorDescription : description.getDefaultInterceptors()) [ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_80 $$ interceptorConfig = InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(), moduleDescription.getInterceptorClassOverride(clazz.getName()))[ FD ]
Line_12 $$ final Deque<InterceptorFactory> destructors = new ArrayDeque()-->Line_162 $$ if (!destructors.isEmpty()) [ FD ]
Line_80 $$ interceptorConfig = InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(), moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_87 $$ final MethodIdentifier preDestroyMethodIdentifier = interceptorConfig.getPreDestroy()[ FD ]
Line_22 $$ userAroundTimeoutsByInterceptorClass = new HashMap()-->Line_207 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_84 $$ if (interceptorHasLifecycleCallbacks && !description.isIgnoreLifecycleInterceptors()) -->Line_86 $$ handleInterceptorClass(clazz, postConstructMethodIdentifier, userPostConstructByInterceptorClass, true, true)[ CD ]
Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)[ FD ]
Line_15 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass-->Line_207 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_82 $$ interceptorConfig = InterceptorClassDescription.merge(null, moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_100 $$ handleInterceptorClass(clazz, interceptorConfig.getPostActivate(), userPostActivatesByInterceptorClass, false, false)[ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_86 $$ handleInterceptorClass(clazz, postConstructMethodIdentifier, userPostConstructByInterceptorClass, true, true)[ FD ]
Line_50 $$ for (final InterceptorDescription interceptorDescription : description.getAllInterceptors()) -->Line_201 $$ String interceptorClassName = interceptorDescription.getInterceptorClassName()[ FD ]
Line_80 $$ interceptorConfig = InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(), moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_85 $$ final MethodIdentifier postConstructMethodIdentifier = interceptorConfig.getPostConstruct()[ FD ]
Line_52 $$ final Class<?> interceptorClass-->Line_130 $$ if (userPreDestroyByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_33 $$ final InterceptorFactory instantiator[ CD ]
Line_67 $$ final ClassReflectionIndex interceptorIndex = deploymentReflectionIndex.getClassIndex(interceptorClass)-->Line_68 $$ final Constructor<?> constructor = interceptorIndex.getConstructor(EMPTY_CLASS_ARRAY)[ FD ]
Line_6 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)-->Line_77 $$ mergeInjectionsForClass(clazz, interceptorClass, classDescription, moduleDescription, deploymentReflectionIndex, description, configuration, context, injectors, contextKey, uninjectors, metadataComplete)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_173 $$ configuration.addPostActivateInterceptors(userPostActivate, InterceptorOrder.ComponentPassivation.INTERCEPTOR_USER_INTERCEPTORS)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_142 $$ if (!injectors.isEmpty()) [ CD ]
Line_45 $$ final List<InterceptorDescription> interceptorWithLifecycleCallbacks = new ArrayList<InterceptorDescription>()-->Line_49 $$ interceptorWithLifecycleCallbacks.addAll(description.getClassInterceptors())[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_154 $$ configuration.addPostConstructInterceptor(new AroundConstructInterceptorFactory(Interceptors.getChainedInterceptorFactory(configuration.getAroundConstructInterceptors())), InterceptorOrder.ComponentPostConstruct.AROUND_CONSTRUCT_CHAIN)[ FD ]
Line_36 $$ instantiator = new ImmediateInterceptorFactory(new ComponentInstantiatorInterceptor(instanceFactory, BasicComponentInstance.INSTANCE_KEY, true))-->Line_43 $$ instantiator = new ImmediateInterceptorFactory(new ComponentInstantiatorInterceptor(new ConstructorComponentFactory(constructor), BasicComponentInstance.INSTANCE_KEY, true))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_178 $$ if (description.isIntercepted()) [ FD ]
Line_28 $$ userPostActivatesByInterceptorClass = new HashMap()-->Line_31 $$ userPostActivatesByInterceptorClass = null[ FD ]
Line_188 $$ if (aroundInvokes != null) -->Line_189 $$ userAroundInvokes.addAll(aroundInvokes)[ CD ]
Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_192 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_87 $$ final MethodIdentifier preDestroyMethodIdentifier = interceptorConfig.getPreDestroy()-->Line_88 $$ handleInterceptorClass(clazz, preDestroyMethodIdentifier, userPreDestroyByInterceptorClass, true, true)[ FD ]
Line_45 $$ final List<InterceptorDescription> interceptorWithLifecycleCallbacks = new ArrayList<InterceptorDescription>()-->Line_74 $$ final boolean interceptorHasLifecycleCallbacks = interceptorWithLifecycleCallbacks.contains(interceptorDescription)[ FD ]
Line_82 $$ interceptorConfig = InterceptorClassDescription.merge(null, moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_85 $$ final MethodIdentifier postConstructMethodIdentifier = interceptorConfig.getPostConstruct()[ FD ]
Line_142 $$ if (!injectors.isEmpty()) -->Line_143 $$ configuration.addPostConstructInterceptors(new ArrayList(injectors), InterceptorOrder.ComponentPostConstruct.INTERCEPTOR_RESOURCE_INJECTION_INTERCEPTORS)[ CD ]
Line_78 $$ final InterceptorClassDescription interceptorConfig-->Line_82 $$ interceptorConfig = InterceptorClassDescription.merge(null, moduleDescription.getInterceptorClassOverride(clazz.getName()))[ FD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_127 $$ if (userAroundConstructsByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_177 $$ final Map<MethodIdentifier, List<InterceptorDescription>> methodInterceptors = description.getMethodInterceptors()[ CD ]
Line_137 $$ if (userPostActivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) -->Line_138 $$ userPostActivate.addAll(userPostActivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ CD ]
Line_33 $$ final InterceptorFactory instantiator-->Line_36 $$ instantiator = new ImmediateInterceptorFactory(new ComponentInstantiatorInterceptor(instanceFactory, BasicComponentInstance.INSTANCE_KEY, true))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_8 $$ final boolean metadataComplete = MetadataCompleteMarker.isMetadataComplete(deploymentUnit)[ CD ]
Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_187 $$ List<InterceptorFactory> aroundInvokes = userAroundInvokesByInterceptorClass.get(interceptorClassName)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()-->Line_6 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)[ FD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_77 $$ mergeInjectionsForClass(clazz, interceptorClass, classDescription, moduleDescription, deploymentReflectionIndex, description, configuration, context, injectors, contextKey, uninjectors, metadataComplete)[ FD ]
Line_104 $$ if (methodIdentifier != null) -->Line_106 $$ if (isNotOverriden(clazz, method, interceptorClass, deploymentReflectionIndex)) [ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_176 $$ final List<InterceptorDescription> classInterceptors = description.getClassInterceptors()[ CD ]
Line_78 $$ final InterceptorClassDescription interceptorConfig-->Line_99 $$ handleInterceptorClass(clazz, interceptorConfig.getPrePassivate(), userPrePassivatesByInterceptorClass, false, false)[ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_82 $$ interceptorConfig = InterceptorClassDescription.merge(null, moduleDescription.getInterceptorClassOverride(clazz.getName()))[ FD ]
Line_24 $$ userAroundTimeoutsByInterceptorClass = null-->Line_207 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_199 $$ if (!description.isExcludeClassInterceptors(identifier)) [ FD ]
Line_224 $$ if (aroundTimeouts != null) -->Line_225 $$ userAroundTimeouts.addAll(aroundTimeouts)[ CD ]
Line_156 $$ if (!userPostConstruct.isEmpty()) -->Line_157 $$ configuration.addPostConstructInterceptors(userPostConstruct, InterceptorOrder.ComponentPostConstruct.INTERCEPTOR_USER_INTERCEPTORS)[ CD ]
Line_110 $$ classMap.put(interceptorClassName, factories = new ArrayList<InterceptorFactory>())-->Line_112 $$ factories.add(interceptorFactory)[ FD ]
Line_30 $$ userPrePassivatesByInterceptorClass = null-->Line_99 $$ handleInterceptorClass(clazz, interceptorConfig.getPrePassivate(), userPrePassivatesByInterceptorClass, false, false)[ FD ]
Line_18 $$ final Map<String, List<InterceptorFactory>> userPostConstructByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_124 $$ if (userPostConstructByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_9 $$ final Deque<InterceptorFactory> instantiators = new ArrayDeque()-->Line_72 $$ instantiators.addFirst(new ImmediateInterceptorFactory(new ComponentInstantiatorInterceptor(new ConstructorComponentFactory(constructor), contextKey, false)))[ FD ]
Line_52 $$ final Class<?> interceptorClass-->Line_138 $$ userPostActivate.addAll(userPostActivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_52 $$ final Class<?> interceptorClass-->Line_77 $$ mergeInjectionsForClass(clazz, interceptorClass, classDescription, moduleDescription, deploymentReflectionIndex, description, configuration, context, injectors, contextKey, uninjectors, metadataComplete)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()-->Line_4 $$ final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(REFLECTION_INDEX)[ FD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_134 $$ if (userPrePassivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_19 $$ final Map<String, List<InterceptorFactory>> userPreDestroyByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_130 $$ if (userPreDestroyByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_17 $$ final Map<String, List<InterceptorFactory>> userPostActivatesByInterceptorClass-->Line_137 $$ if (userPostActivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_35 $$ if (instanceFactory != null) -->Line_40 $$ if (constructor == null) [ CD ]
Line_104 $$ if (methodIdentifier != null) -->Line_105 $$ final Method method = ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex, clazz, methodIdentifier)[ CD ]
Line_26 $$ if (description.isPassivationApplicable()) -->Line_27 $$ userPrePassivatesByInterceptorClass = new HashMap()[ CD ]
Line_82 $$ interceptorConfig = InterceptorClassDescription.merge(null, moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_95 $$ final MethodIdentifier aroundTimeoutMethodIdentifier = interceptorConfig.getAroundTimeout()[ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_84 $$ if (interceptorHasLifecycleCallbacks && !description.isIgnoreLifecycleInterceptors()) [ CD ]
Line_82 $$ interceptorConfig = InterceptorClassDescription.merge(null, moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_92 $$ final MethodIdentifier aroundInvokeMethodIdentifier = interceptorConfig.getAroundInvoke()[ FD ]
Line_26 $$ if (description.isPassivationApplicable()) -->Line_30 $$ userPrePassivatesByInterceptorClass = null[ CD ]
Line_85 $$ final MethodIdentifier postConstructMethodIdentifier = interceptorConfig.getPostConstruct()-->Line_86 $$ handleInterceptorClass(clazz, postConstructMethodIdentifier, userPostConstructByInterceptorClass, true, true)[ FD ]
Line_38 $$ final ClassReflectionIndex componentClassIndex = deploymentReflectionIndex.getClassIndex(configuration.getComponentClass())-->Line_39 $$ final Constructor<?> constructor = componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_12 $$ final Deque<InterceptorFactory> destructors = new ArrayDeque()[ CD ]
Line_80 $$ interceptorConfig = InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(), moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_89 $$ final MethodIdentifier aroundConstructMethodIdentifier = interceptorConfig.getAroundConstruct()[ FD ]
Line_191 $$ if (requiresTimerChain) -->Line_193 $$ if (aroundTimeouts != null) [ CD ]
Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_56 $$ throw EeLogger.ROOT_LOGGER.cannotLoadInterceptor(e, interceptorClassName)[ FD ]
Line_35 $$ if (instanceFactory != null) -->Line_43 $$ instantiator = new ImmediateInterceptorFactory(new ComponentInstantiatorInterceptor(new ConstructorComponentFactory(constructor), BasicComponentInstance.INSTANCE_KEY, true))[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_35 $$ if (instanceFactory != null) [ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_45 $$ final List<InterceptorDescription> interceptorWithLifecycleCallbacks = new ArrayList<InterceptorDescription>()[ CD ]
Line_148 $$ if (!userAroundConstruct.isEmpty()) -->Line_149 $$ configuration.addAroundConstructInterceptors(userAroundConstruct, InterceptorOrder.AroundConstruct.INTERCEPTOR_AROUND_CONSTRUCT)[ CD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_104 $$ if (methodIdentifier != null) [ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_79 $$ if (classDescription != null && !metadataComplete) [ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_70 $$ throw EeLogger.ROOT_LOGGER.defaultConstructorNotFoundOnComponent(interceptorClassName, configuration.getComponentClass())[ FD ]
Line_22 $$ userAroundTimeoutsByInterceptorClass = new HashMap()-->Line_192 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_20 $$ final Set<MethodIdentifier> timeoutMethods = description.getTimerMethods()-->Line_183 $$ final boolean requiresTimerChain = description.isTimerServiceRequired() && timeoutMethods.contains(identifier)[ FD ]
Line_34 $$ final ComponentFactory instanceFactory = configuration.getInstanceFactory()-->Line_35 $$ if (instanceFactory != null) [ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_104 $$ if (methodIdentifier != null) [ CD ]
Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_218 $$ List<InterceptorFactory> aroundInvokes = userAroundInvokesByInterceptorClass.get(interceptorClassName)[ FD ]
Line_52 $$ final Class<?> interceptorClass-->Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_14 $$ final Map<String, List<InterceptorFactory>> userAroundConstructsByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_77 $$ mergeInjectionsForClass(clazz, interceptorClass, classDescription, moduleDescription, deploymentReflectionIndex, description, configuration, context, injectors, contextKey, uninjectors, metadataComplete)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_143 $$ configuration.addPostConstructInterceptors(new ArrayList(injectors), InterceptorOrder.ComponentPostConstruct.INTERCEPTOR_RESOURCE_INJECTION_INTERCEPTORS)[ FD ]
Line_31 $$ userPostActivatesByInterceptorClass = null-->Line_137 $$ if (userPostActivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()-->Line_5 $$ final EEApplicationClasses applicationClasses = deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION)[ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_90 $$ handleInterceptorClass(clazz, aroundConstructMethodIdentifier, userAroundConstructsByInterceptorClass, true, true)[ FD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_137 $$ if (userPostActivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_106 $$ if (isNotOverriden(clazz, method, interceptorClass, deploymentReflectionIndex)) -->Line_108 $$ List<InterceptorFactory> factories = classMap.get(interceptorClassName)[ CD ]
Line_17 $$ final Map<String, List<InterceptorFactory>> userPostActivatesByInterceptorClass-->Line_31 $$ userPostActivatesByInterceptorClass = null[ FD ]
Line_14 $$ final Map<String, List<InterceptorFactory>> userAroundConstructsByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_128 $$ userAroundConstruct.addAll(userAroundConstructsByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_18 $$ final Map<String, List<InterceptorFactory>> userPostConstructByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_151 $$ configuration.addAroundConstructInterceptor(instantiator, InterceptorOrder.AroundConstruct.CONSTRUCT_COMPONENT)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_170 $$ configuration.addPrePassivateInterceptors(userPrePassivate, InterceptorOrder.ComponentPassivation.INTERCEPTOR_USER_INTERCEPTORS)[ FD ]
Line_15 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass-->Line_24 $$ userAroundTimeoutsByInterceptorClass = null[ FD ]
Line_17 $$ final Map<String, List<InterceptorFactory>> userPostActivatesByInterceptorClass-->Line_28 $$ userPostActivatesByInterceptorClass = new HashMap()[ FD ]
Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_58 $$ final InterceptorEnvironment interceptorEnvironment = moduleDescription.getInterceptorEnvironment().get(interceptorClassName)[ FD ]
Line_4 $$ final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(REFLECTION_INDEX)-->Line_77 $$ mergeInjectionsForClass(clazz, interceptorClass, classDescription, moduleDescription, deploymentReflectionIndex, description, configuration, context, injectors, contextKey, uninjectors, metadataComplete)[ FD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_138 $$ userPostActivate.addAll(userPostActivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_230 $$ if (requiresTimerChain) -->Line_231 $$ configuration.addComponentInterceptor(method, new UserInterceptorFactory(weaved(userAroundInvokes), weaved(userAroundTimeouts)), InterceptorOrder.Component.INTERCEPTOR_USER_INTERCEPTORS)[ CD ]
Line_52 $$ final Class<?> interceptorClass-->Line_135 $$ userPrePassivate.addAll(userPrePassivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_21 $$ if (description.isTimerServiceRequired()) -->Line_24 $$ userAroundTimeoutsByInterceptorClass = null[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_133 $$ if (description.isPassivationApplicable()) [ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_98 $$ if (description.isPassivationApplicable()) [ FD ]
Line_80 $$ interceptorConfig = InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(), moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_99 $$ handleInterceptorClass(clazz, interceptorConfig.getPrePassivate(), userPrePassivatesByInterceptorClass, false, false)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_7 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)[ CD ]
Line_89 $$ final MethodIdentifier aroundConstructMethodIdentifier = interceptorConfig.getAroundConstruct()-->Line_90 $$ handleInterceptorClass(clazz, aroundConstructMethodIdentifier, userAroundConstructsByInterceptorClass, true, true)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_26 $$ if (description.isPassivationApplicable()) [ FD ]
Line_78 $$ final InterceptorClassDescription interceptorConfig-->Line_92 $$ final MethodIdentifier aroundInvokeMethodIdentifier = interceptorConfig.getAroundInvoke()[ FD ]
Line_18 $$ final Map<String, List<InterceptorFactory>> userPostConstructByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_86 $$ handleInterceptorClass(clazz, postConstructMethodIdentifier, userPostConstructByInterceptorClass, true, true)[ FD ]
Line_33 $$ final InterceptorFactory instantiator-->Line_151 $$ configuration.addAroundConstructInterceptor(instantiator, InterceptorOrder.AroundConstruct.CONSTRUCT_COMPONENT)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_20 $$ final Set<MethodIdentifier> timeoutMethods = description.getTimerMethods()[ CD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_78 $$ final InterceptorClassDescription interceptorConfig[ CD ]
Line_19 $$ final Map<String, List<InterceptorFactory>> userPreDestroyByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_131 $$ userPreDestroy.addAll(userPreDestroyByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_231 $$ configuration.addComponentInterceptor(method, new UserInterceptorFactory(weaved(userAroundInvokes), weaved(userAroundTimeouts)), InterceptorOrder.Component.INTERCEPTOR_USER_INTERCEPTORS)[ FD ]
Line_4 $$ final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(REFLECTION_INDEX)-->Line_67 $$ final ClassReflectionIndex interceptorIndex = deploymentReflectionIndex.getClassIndex(interceptorClass)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_168 $$ if (description.isPassivationApplicable()) [ CD ]
Line_22 $$ userAroundTimeoutsByInterceptorClass = new HashMap()-->Line_24 $$ userAroundTimeoutsByInterceptorClass = null[ FD ]
Line_130 $$ if (userPreDestroyByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) -->Line_131 $$ userPreDestroy.addAll(userPreDestroyByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ CD ]
Line_24 $$ userAroundTimeoutsByInterceptorClass = null-->Line_223 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_16 $$ final Map<String, List<InterceptorFactory>> userPrePassivatesByInterceptorClass-->Line_27 $$ userPrePassivatesByInterceptorClass = new HashMap()[ FD ]
Line_11 $$ final Deque<InterceptorFactory> uninjectors = new ArrayDeque()-->Line_77 $$ mergeInjectionsForClass(clazz, interceptorClass, classDescription, moduleDescription, deploymentReflectionIndex, description, configuration, context, injectors, contextKey, uninjectors, metadataComplete)[ FD ]
Line_74 $$ final boolean interceptorHasLifecycleCallbacks = interceptorWithLifecycleCallbacks.contains(interceptorDescription)-->Line_84 $$ if (interceptorHasLifecycleCallbacks && !description.isIgnoreLifecycleInterceptors()) [ FD ]
Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_110 $$ classMap.put(interceptorClassName, factories = new ArrayList<InterceptorFactory>())[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_47 $$ interceptorWithLifecycleCallbacks.addAll(description.getDefaultInterceptors())[ FD ]
Line_12 $$ final Deque<InterceptorFactory> destructors = new ArrayDeque()-->Line_73 $$ destructors.addLast(new ImmediateInterceptorFactory(new ManagedReferenceReleaseInterceptor(contextKey)))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_62 $$ description.addResourceInjection(injection)[ FD ]
Line_30 $$ userPrePassivatesByInterceptorClass = null-->Line_135 $$ userPrePassivate.addAll(userPrePassivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_82 $$ interceptorConfig = InterceptorClassDescription.merge(null, moduleDescription.getInterceptorClassOverride(clazz.getName()))-->Line_99 $$ handleInterceptorClass(clazz, interceptorConfig.getPrePassivate(), userPrePassivatesByInterceptorClass, false, false)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_49 $$ interceptorWithLifecycleCallbacks.addAll(description.getClassInterceptors())[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_66 $$ configuration.getInterceptorContextKeys().add(contextKey)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_166 $$ configuration.addPreDestroyInterceptors(userPreDestroy, InterceptorOrder.ComponentPreDestroy.INTERCEPTOR_USER_INTERCEPTORS)[ FD ]
Line_4 $$ final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(REFLECTION_INDEX)-->Line_106 $$ if (isNotOverriden(clazz, method, interceptorClass, deploymentReflectionIndex)) [ FD ]
Line_193 $$ if (aroundTimeouts != null) -->Line_194 $$ userAroundTimeouts.addAll(aroundTimeouts)[ CD ]
Line_58 $$ final InterceptorEnvironment interceptorEnvironment = moduleDescription.getInterceptorEnvironment().get(interceptorClassName)-->Line_60 $$ description.getBindingConfigurations().addAll(interceptorEnvironment.getBindingConfigurations())[ FD ]
Line_52 $$ final Class<?> interceptorClass-->Line_106 $$ if (isNotOverriden(clazz, method, interceptorClass, deploymentReflectionIndex)) [ FD ]
Line_78 $$ final InterceptorClassDescription interceptorConfig-->Line_89 $$ final MethodIdentifier aroundConstructMethodIdentifier = interceptorConfig.getAroundConstruct()[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_21 $$ if (description.isTimerServiceRequired()) [ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_159 $$ if (!uninjectors.isEmpty()) [ CD ]
Line_208 $$ if (aroundTimeouts != null) -->Line_209 $$ userAroundTimeouts.addAll(aroundTimeouts)[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_160 $$ configuration.addPreDestroyInterceptors(new ArrayList(uninjectors), InterceptorOrder.ComponentPreDestroy.INTERCEPTOR_UNINJECTION_INTERCEPTORS)[ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_88 $$ handleInterceptorClass(clazz, preDestroyMethodIdentifier, userPreDestroyByInterceptorClass, true, true)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_50 $$ for (final InterceptorDescription interceptorDescription : description.getAllInterceptors()) [ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_148 $$ if (!userAroundConstruct.isEmpty()) [ CD ]
Line_109 $$ if (factories == null) -->Line_110 $$ classMap.put(interceptorClassName, factories = new ArrayList<InterceptorFactory>())[ CD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_131 $$ userPreDestroy.addAll(userPreDestroyByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_45 $$ final List<InterceptorDescription> interceptorWithLifecycleCallbacks = new ArrayList<InterceptorDescription>()-->Line_47 $$ interceptorWithLifecycleCallbacks.addAll(description.getDefaultInterceptors())[ FD ]
Line_203 $$ if (aroundInvokes != null) -->Line_204 $$ userAroundInvokes.addAll(aroundInvokes)[ CD ]
Line_15 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass-->Line_192 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_78 $$ final InterceptorClassDescription interceptorConfig-->Line_95 $$ final MethodIdentifier aroundTimeoutMethodIdentifier = interceptorConfig.getAroundTimeout()[ FD ]
Line_50 $$ for (final InterceptorDescription interceptorDescription : description.getAllInterceptors()) -->Line_186 $$ String interceptorClassName = interceptorDescription.getInterceptorClassName()[ FD ]
Line_84 $$ if (interceptorHasLifecycleCallbacks && !description.isIgnoreLifecycleInterceptors()) -->Line_85 $$ final MethodIdentifier postConstructMethodIdentifier = interceptorConfig.getPostConstruct()[ CD ]
Line_124 $$ if (userPostConstructByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) -->Line_125 $$ userPostConstruct.addAll(userPostConstructByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ CD ]
Line_13 $$ final Map<String, List<InterceptorFactory>> userAroundInvokesByInterceptorClass = new HashMap()-->Line_93 $$ handleInterceptorClass(clazz, aroundInvokeMethodIdentifier, userAroundInvokesByInterceptorClass, false, false)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_11 $$ final Deque<InterceptorFactory> uninjectors = new ArrayDeque()[ CD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_99 $$ handleInterceptorClass(clazz, interceptorConfig.getPrePassivate(), userPrePassivatesByInterceptorClass, false, false)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()-->Line_7 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)[ FD ]
Line_206 $$ if (requiresTimerChain) -->Line_207 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ CD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_106 $$ if (isNotOverriden(clazz, method, interceptorClass, deploymentReflectionIndex)) [ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_93 $$ handleInterceptorClass(clazz, aroundInvokeMethodIdentifier, userAroundInvokesByInterceptorClass, false, false)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_176 $$ final List<InterceptorDescription> classInterceptors = description.getClassInterceptors()[ FD ]
Line_61 $$ for (final ResourceInjectionConfiguration injection : interceptorEnvironment.getResourceInjections()) -->Line_62 $$ description.addResourceInjection(injection)[ FD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_125 $$ userPostConstruct.addAll(userPostConstructByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_4 $$ final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(REFLECTION_INDEX)-->Line_105 $$ final Method method = ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex, clazz, methodIdentifier)[ FD ]
Line_27 $$ userPrePassivatesByInterceptorClass = new HashMap()-->Line_30 $$ userPrePassivatesByInterceptorClass = null[ FD ]
Line_24 $$ userAroundTimeoutsByInterceptorClass = null-->Line_96 $$ handleInterceptorClass(clazz, aroundTimeoutMethodIdentifier, userAroundTimeoutsByInterceptorClass, false, false)[ FD ]
Line_31 $$ userPostActivatesByInterceptorClass = null-->Line_100 $$ handleInterceptorClass(clazz, interceptorConfig.getPostActivate(), userPostActivatesByInterceptorClass, false, false)[ FD ]
Line_59 $$ if (interceptorEnvironment != null) -->Line_60 $$ description.getBindingConfigurations().addAll(interceptorEnvironment.getBindingConfigurations())[ CD ]
Line_168 $$ if (description.isPassivationApplicable()) -->Line_169 $$ if (!userPrePassivate.isEmpty()) [ CD ]
Line_84 $$ if (interceptorHasLifecycleCallbacks && !description.isIgnoreLifecycleInterceptors()) -->Line_90 $$ handleInterceptorClass(clazz, aroundConstructMethodIdentifier, userAroundConstructsByInterceptorClass, true, true)[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_15 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass[ CD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_77 $$ mergeInjectionsForClass(clazz, interceptorClass, classDescription, moduleDescription, deploymentReflectionIndex, description, configuration, context, injectors, contextKey, uninjectors, metadataComplete)[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_184 $$ if (!description.isExcludeDefaultInterceptors() && !description.isExcludeDefaultInterceptors(identifier)) [ FD ]
Line_107 $$ final InterceptorFactory interceptorFactory = new ImmediateInterceptorFactory(new ManagedReferenceLifecycleMethodInterceptor(contextKey, method, changeMethod, lifecycleMethod))-->Line_112 $$ factories.add(interceptorFactory)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_38 $$ final ClassReflectionIndex componentClassIndex = deploymentReflectionIndex.getClassIndex(configuration.getComponentClass())[ FD ]
Line_94 $$ if (description.isTimerServiceRequired()) -->Line_96 $$ handleInterceptorClass(clazz, aroundTimeoutMethodIdentifier, userAroundTimeoutsByInterceptorClass, false, false)[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_84 $$ if (interceptorHasLifecycleCallbacks && !description.isIgnoreLifecycleInterceptors()) [ FD ]
Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_223 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_206 $$ if (requiresTimerChain) -->Line_208 $$ if (aroundTimeouts != null) [ CD ]
Line_52 $$ final Class<?> interceptorClass-->Line_134 $$ if (userPrePassivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_13 $$ final Map<String, List<InterceptorFactory>> userAroundInvokesByInterceptorClass = new HashMap()[ CD ]
Line_65 $$ final Object contextKey = interceptorClass-->Line_66 $$ configuration.getInterceptorContextKeys().add(contextKey)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_10 $$ final Deque<InterceptorFactory> injectors = new ArrayDeque()[ CD ]
Line_8 $$ final boolean metadataComplete = MetadataCompleteMarker.isMetadataComplete(deploymentUnit)-->Line_77 $$ mergeInjectionsForClass(clazz, interceptorClass, classDescription, moduleDescription, deploymentReflectionIndex, description, configuration, context, injectors, contextKey, uninjectors, metadataComplete)[ FD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_135 $$ userPrePassivate.addAll(userPrePassivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_21 $$ if (description.isTimerServiceRequired()) -->Line_22 $$ userAroundTimeoutsByInterceptorClass = new HashMap()[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()[ CD ]
Line_98 $$ if (description.isPassivationApplicable()) -->Line_100 $$ handleInterceptorClass(clazz, interceptorConfig.getPostActivate(), userPostActivatesByInterceptorClass, false, false)[ CD ]
Line_46 $$ if (!description.isExcludeDefaultInterceptors()) -->Line_47 $$ interceptorWithLifecycleCallbacks.addAll(description.getDefaultInterceptors())[ CD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_106 $$ if (isNotOverriden(clazz, method, interceptorClass, deploymentReflectionIndex)) [ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_93 $$ handleInterceptorClass(clazz, aroundInvokeMethodIdentifier, userAroundInvokesByInterceptorClass, false, false)[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_152 $$ configuration.addAroundConstructInterceptor(new ImmediateInterceptorFactory(Interceptors.getTerminalInterceptor()), InterceptorOrder.AroundConstruct.TERMINAL_INTERCEPTOR)[ FD ]
Line_54 $$ interceptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)-->Line_130 $$ if (userPreDestroyByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_179 $$ for (final Method method : configuration.getDefinedComponentMethods()) [ FD ]
Line_79 $$ if (classDescription != null && !metadataComplete) -->Line_82 $$ interceptorConfig = InterceptorClassDescription.merge(null, moduleDescription.getInterceptorClassOverride(clazz.getName()))[ CD ]
Line_51 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_202 $$ List<InterceptorFactory> aroundInvokes = userAroundInvokesByInterceptorClass.get(interceptorClassName)[ FD ]
Line_98 $$ if (description.isPassivationApplicable()) -->Line_99 $$ handleInterceptorClass(clazz, interceptorConfig.getPrePassivate(), userPrePassivatesByInterceptorClass, false, false)[ CD ]
Line_78 $$ final InterceptorClassDescription interceptorConfig-->Line_100 $$ handleInterceptorClass(clazz, interceptorConfig.getPostActivate(), userPostActivatesByInterceptorClass, false, false)[ FD ]
Line_15 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass-->Line_223 $$ List<InterceptorFactory> aroundTimeouts = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_14 $$ final Map<String, List<InterceptorFactory>> userAroundConstructsByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_90 $$ handleInterceptorClass(clazz, aroundConstructMethodIdentifier, userAroundConstructsByInterceptorClass, true, true)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_177 $$ final Map<MethodIdentifier, List<InterceptorDescription>> methodInterceptors = description.getMethodInterceptors()[ FD ]
Line_52 $$ final Class<?> interceptorClass-->Line_124 $$ if (userPostConstructByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_10 $$ final Deque<InterceptorFactory> injectors = new ArrayDeque()-->Line_142 $$ if (!injectors.isEmpty()) [ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_100 $$ handleInterceptorClass(clazz, interceptorConfig.getPostActivate(), userPostActivatesByInterceptorClass, false, false)[ FD ]
Line_105 $$ final Method method = ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex, clazz, methodIdentifier)-->Line_233 $$ configuration.addComponentInterceptors(method, userAroundInvokes, InterceptorOrder.Component.INTERCEPTOR_USER_INTERCEPTORS)[ FD ]
Line_153 $$ if (!configuration.getAroundConstructInterceptors().isEmpty()) -->Line_154 $$ configuration.addPostConstructInterceptor(new AroundConstructInterceptorFactory(Interceptors.getChainedInterceptorFactory(configuration.getAroundConstructInterceptors())), InterceptorOrder.ComponentPostConstruct.AROUND_CONSTRUCT_CHAIN)[ CD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_94 $$ if (description.isTimerServiceRequired()) [ CD ]
Line_219 $$ if (aroundInvokes != null) -->Line_220 $$ userAroundInvokes.addAll(aroundInvokes)[ CD ]
Line_108 $$ List<InterceptorFactory> factories = classMap.get(interceptorClassName)-->Line_109 $$ if (factories == null) [ FD ]
Line_16 $$ final Map<String, List<InterceptorFactory>> userPrePassivatesByInterceptorClass-->Line_135 $$ userPrePassivate.addAll(userPrePassivatesByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_6 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)-->Line_58 $$ final InterceptorEnvironment interceptorEnvironment = moduleDescription.getInterceptorEnvironment().get(interceptorClassName)[ FD ]
Line_65 $$ final Object contextKey = interceptorClass-->Line_77 $$ mergeInjectionsForClass(clazz, interceptorClass, classDescription, moduleDescription, deploymentReflectionIndex, description, configuration, context, injectors, contextKey, uninjectors, metadataComplete)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_146 $$ configuration.addPostConstructInterceptors(new ArrayList(instantiators), InterceptorOrder.ComponentPostConstruct.INTERCEPTOR_INSTANTIATION_INTERCEPTORS)[ FD ]
Line_35 $$ if (instanceFactory != null) -->Line_38 $$ final ClassReflectionIndex componentClassIndex = deploymentReflectionIndex.getClassIndex(configuration.getComponentClass())[ CD ]
Line_52 $$ final Class<?> interceptorClass-->Line_125 $$ userPostConstruct.addAll(userPostConstructByInterceptorClass.get(interceptorClass.getInterceptorClassName()))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_183 $$ final boolean requiresTimerChain = description.isTimerServiceRequired() && timeoutMethods.contains(identifier)[ FD ]
Line_84 $$ if (interceptorHasLifecycleCallbacks && !description.isIgnoreLifecycleInterceptors()) -->Line_89 $$ final MethodIdentifier aroundConstructMethodIdentifier = interceptorConfig.getAroundConstruct()[ CD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_105 $$ final Method method = ClassReflectionIndexUtil.findRequiredMethod(deploymentReflectionIndex, clazz, methodIdentifier)[ FD ]
Line_28 $$ userPostActivatesByInterceptorClass = new HashMap()-->Line_137 $$ if (userPostActivatesByInterceptorClass.containsKey(interceptorClass.getInterceptorClassName())) [ FD ]
Line_78 $$ final InterceptorClassDescription interceptorConfig-->Line_80 $$ interceptorConfig = InterceptorClassDescription.merge(classDescription.getInterceptorClassDescription(), moduleDescription.getInterceptorClassOverride(clazz.getName()))[ FD ]
Line_75 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_110 $$ classMap.put(interceptorClassName, factories = new ArrayList<InterceptorFactory>())[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_9 $$ final Deque<InterceptorFactory> instantiators = new ArrayDeque()[ CD ]
