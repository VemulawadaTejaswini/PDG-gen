Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_32 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ CD ]
Line_6 $$ Type typeType = Type.getType(java.lang.reflect.Type.class)-->Line_27 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, methodType.getInternalName(), "getGenericReturnType", Type.getMethodDescriptor(typeType))[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_16 $$ Label alreadyLoaded = new Label()[ CD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_18 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ FD ]
Line_7 $$ String getterName = getter.getName()-->Line_23 $$ methodVisitor.visitLdcInsn(getterName)[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_28 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, serviceRegistryType.getInternalName(), "get", Type.getMethodDescriptor(Type.getType(Object.class), typeType))[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_11 $$ String propFieldName = propFieldName(property)[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_5 $$ Type methodType = Type.getType(Method.class)[ CD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_25 $$ methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY, classType.getInternalName())[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_33 $$ methodVisitor.visitFieldInsn(Opcodes.GETFIELD, generatedType.getInternalName(), propFieldName, serviceType.getDescriptor())[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_27 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, methodType.getInternalName(), "getGenericReturnType", Type.getMethodDescriptor(typeType))[ CD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_35 $$ methodVisitor.visitMaxs(0, 0)[ FD ]
Line_10 $$ Type serviceType = Type.getType(property.getType())-->Line_30 $$ methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, generatedType.getInternalName(), propFieldName, serviceType.getDescriptor())[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_17 $$ methodVisitor.visitJumpInsn(Opcodes.IFNONNULL, alreadyLoaded)[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_14 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_6 $$ Type typeType = Type.getType(java.lang.reflect.Type.class)[ CD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_29 $$ methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, serviceType.getInternalName())[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_34 $$ methodVisitor.visitInsn(returnType.getOpcode(Opcodes.IRETURN))[ CD ]
Line_8 $$ Type returnType = Type.getType(getter.getReturnType())-->Line_34 $$ methodVisitor.visitInsn(returnType.getOpcode(Opcodes.IRETURN))[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_21 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_18 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ CD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_13 $$ methodVisitor.visitCode()[ FD ]
Line_8 $$ Type returnType = Type.getType(getter.getReturnType())-->Line_9 $$ String methodDescriptor = Type.getMethodDescriptor(returnType)[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_23 $$ methodVisitor.visitLdcInsn(getterName)[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_29 $$ methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, serviceType.getInternalName())[ CD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_19 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ FD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_22 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, generatedType.getInternalName(), "getClass", Type.getMethodDescriptor(classType))[ FD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_14 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ FD ]
Line_10 $$ Type serviceType = Type.getType(property.getType())-->Line_15 $$ methodVisitor.visitFieldInsn(Opcodes.GETFIELD, generatedType.getInternalName(), propFieldName, serviceType.getDescriptor())[ FD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_34 $$ methodVisitor.visitInsn(returnType.getOpcode(Opcodes.IRETURN))[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_22 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, generatedType.getInternalName(), "getClass", Type.getMethodDescriptor(classType))[ CD ]
Line_11 $$ String propFieldName = propFieldName(property)-->Line_15 $$ methodVisitor.visitFieldInsn(Opcodes.GETFIELD, generatedType.getInternalName(), propFieldName, serviceType.getDescriptor())[ FD ]
Line_5 $$ Type methodType = Type.getType(Method.class)-->Line_26 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, classType.getInternalName(), "getDeclaredMethod", Type.getMethodDescriptor(methodType, Type.getType(String.class), Type.getType(Class[].class)))[ FD ]
Line_3 $$ Type serviceRegistryType = Type.getType(ServiceRegistry.class)-->Line_28 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, serviceRegistryType.getInternalName(), "get", Type.getMethodDescriptor(Type.getType(Object.class), typeType))[ FD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_32 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ FD ]
Line_9 $$ String methodDescriptor = Type.getMethodDescriptor(returnType)-->Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])[ FD ]
Line_16 $$ Label alreadyLoaded = new Label()-->Line_31 $$ methodVisitor.visitLabel(alreadyLoaded)[ FD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_26 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, classType.getInternalName(), "getDeclaredMethod", Type.getMethodDescriptor(methodType, Type.getType(String.class), Type.getType(Class[].class)))[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])[ FD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_23 $$ methodVisitor.visitLdcInsn(getterName)[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_35 $$ methodVisitor.visitMaxs(0, 0)[ CD ]
Line_11 $$ String propFieldName = propFieldName(property)-->Line_30 $$ methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, generatedType.getInternalName(), propFieldName, serviceType.getDescriptor())[ FD ]
Line_4 $$ Type classType = Type.getType(Class.class)-->Line_26 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, classType.getInternalName(), "getDeclaredMethod", Type.getMethodDescriptor(methodType, Type.getType(String.class), Type.getType(Class[].class)))[ FD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_36 $$ methodVisitor.visitEnd()[ FD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_17 $$ methodVisitor.visitJumpInsn(Opcodes.IFNONNULL, alreadyLoaded)[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_3 $$ Type serviceRegistryType = Type.getType(ServiceRegistry.class)[ CD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_15 $$ methodVisitor.visitFieldInsn(Opcodes.GETFIELD, generatedType.getInternalName(), propFieldName, serviceType.getDescriptor())[ FD ]
Line_4 $$ Type classType = Type.getType(Class.class)-->Line_25 $$ methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY, classType.getInternalName())[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_8 $$ Type returnType = Type.getType(getter.getReturnType())[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_8 $$ Type returnType = Type.getType(getter.getReturnType())[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_26 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, classType.getInternalName(), "getDeclaredMethod", Type.getMethodDescriptor(methodType, Type.getType(String.class), Type.getType(Class[].class)))[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_7 $$ String getterName = getter.getName()[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_24 $$ methodVisitor.visitInsn(Opcodes.ICONST_0)[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_25 $$ methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY, classType.getInternalName())[ CD ]
Line_7 $$ String getterName = getter.getName()-->Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_10 $$ Type serviceType = Type.getType(property.getType())[ FD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_30 $$ methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, generatedType.getInternalName(), propFieldName, serviceType.getDescriptor())[ FD ]
Line_3 $$ Type serviceRegistryType = Type.getType(ServiceRegistry.class)-->Line_20 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, generatedType.getInternalName(), "getServices", Type.getMethodDescriptor(serviceRegistryType))[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_36 $$ methodVisitor.visitEnd()[ CD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_27 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, methodType.getInternalName(), "getGenericReturnType", Type.getMethodDescriptor(typeType))[ FD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_31 $$ methodVisitor.visitLabel(alreadyLoaded)[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_13 $$ methodVisitor.visitCode()[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_19 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ CD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_28 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, serviceRegistryType.getInternalName(), "get", Type.getMethodDescriptor(Type.getType(Object.class), typeType))[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_30 $$ methodVisitor.visitFieldInsn(Opcodes.PUTFIELD, generatedType.getInternalName(), propFieldName, serviceType.getDescriptor())[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_9 $$ String methodDescriptor = Type.getMethodDescriptor(returnType)[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_31 $$ methodVisitor.visitLabel(alreadyLoaded)[ CD ]
Line_5 $$ Type methodType = Type.getType(Method.class)-->Line_27 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, methodType.getInternalName(), "getGenericReturnType", Type.getMethodDescriptor(typeType))[ FD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_33 $$ methodVisitor.visitFieldInsn(Opcodes.GETFIELD, generatedType.getInternalName(), propFieldName, serviceType.getDescriptor())[ FD ]
Line_4 $$ Type classType = Type.getType(Class.class)-->Line_22 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, generatedType.getInternalName(), "getClass", Type.getMethodDescriptor(classType))[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_20 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, generatedType.getInternalName(), "getServices", Type.getMethodDescriptor(serviceRegistryType))[ CD ]
Line_10 $$ Type serviceType = Type.getType(property.getType())-->Line_33 $$ methodVisitor.visitFieldInsn(Opcodes.GETFIELD, generatedType.getInternalName(), propFieldName, serviceType.getDescriptor())[ FD ]
Line_11 $$ String propFieldName = propFieldName(property)-->Line_33 $$ methodVisitor.visitFieldInsn(Opcodes.GETFIELD, generatedType.getInternalName(), propFieldName, serviceType.getDescriptor())[ FD ]
Line_16 $$ Label alreadyLoaded = new Label()-->Line_17 $$ methodVisitor.visitJumpInsn(Opcodes.IFNONNULL, alreadyLoaded)[ FD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_20 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, generatedType.getInternalName(), "getServices", Type.getMethodDescriptor(serviceRegistryType))[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_15 $$ methodVisitor.visitFieldInsn(Opcodes.GETFIELD, generatedType.getInternalName(), propFieldName, serviceType.getDescriptor())[ CD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_4 $$ Type classType = Type.getType(Class.class)[ CD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_24 $$ methodVisitor.visitInsn(Opcodes.ICONST_0)[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_7 $$ String getterName = getter.getName()[ CD ]
Line_12 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, getterName, methodDescriptor, signature(getter), new String[0])-->Line_21 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_11 $$ String propFieldName = propFieldName(property)[ CD ]
Line_10 $$ Type serviceType = Type.getType(property.getType())-->Line_29 $$ methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, serviceType.getInternalName())[ FD ]
Line_2 $$ public void applyServiceInjectionToGetter(PropertyMetaData property, Method getter) throws Exception -->Line_10 $$ Type serviceType = Type.getType(property.getType())[ CD ]
Line_6 $$ Type typeType = Type.getType(java.lang.reflect.Type.class)-->Line_28 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKEINTERFACE, serviceRegistryType.getInternalName(), "get", Type.getMethodDescriptor(Type.getType(Object.class), typeType))[ FD ]
