Line_54 $$ if (!(e instanceof IOException)) -->Line_55 $$ LOG.error("Unexpected throwable object ", e)[ CD ]
Line_35 $$ Method method = protocolImpl.protocolClass.getMethod(call.getMethodName(), call.getParameterClasses())-->Line_36 $$ method.setAccessible(true)[ FD ]
Line_33 $$ Exception exception = null-->Line_65 $$ if (exception != null) [ FD ]
Line_45 $$ exception = (IOException) target-->Line_65 $$ if (exception != null) [ FD ]
Line_63 $$ if (LOG.isDebugEnabled()) -->Line_68 $$ LOG.debug(msg)[ CD ]
Line_66 $$ msg += " exception= " + exception.getClass().getSimpleName()-->Line_68 $$ LOG.debug(msg)[ FD ]
Line_33 $$ Exception exception = null-->Line_45 $$ exception = (IOException) target[ FD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_32 $$ int qTime = (int) (startTime - receivedTime)[ CD ]
Line_3 $$ Invocation call = (Invocation) rpcRequest-->Line_35 $$ Method method = protocolImpl.protocolClass.getMethod(call.getMethodName(), call.getParameterClasses())[ FD ]
Line_12 $$ if (call.declaringClassProtocolName.equals(VersionedProtocol.class.getName())) -->Line_22 $$ if (protocolImpl == null) [ CD ]
Line_32 $$ int qTime = (int) (startTime - receivedTime)-->Line_71 $$ server.rpcMetrics.addRpcQueueTime(qTime)[ FD ]
Line_3 $$ Invocation call = (Invocation) rpcRequest-->Line_9 $$ long clientVersion = call.getProtocolVersion()[ FD ]
Line_48 $$ IOException ioe = new IOException(target.toString())-->Line_59 $$ exception = ioe[ FD ]
Line_21 $$ protocolImpl = server.getProtocolImplMap(RPC.RpcKind.RPC_WRITABLE).get(pv)-->Line_22 $$ if (protocolImpl == null) [ FD ]
Line_45 $$ exception = (IOException) target-->Line_70 $$ String detailedMetricsName = (exception == null) ? call.getMethodName() : exception.getClass().getSimpleName()[ FD ]
Line_63 $$ if (LOG.isDebugEnabled()) -->Line_65 $$ if (exception != null) [ CD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_4 $$ if (server.verbose)[ CD ]
Line_33 $$ Exception exception = null-->Line_70 $$ String detailedMetricsName = (exception == null) ? call.getMethodName() : exception.getClass().getSimpleName()[ FD ]
Line_3 $$ Invocation call = (Invocation) rpcRequest-->Line_38 $$ Object value = method.invoke(protocolImpl.protocolImpl, call.getParameters())[ FD ]
Line_12 $$ if (call.declaringClassProtocolName.equals(VersionedProtocol.class.getName())) -->Line_13 $$ VerProtocolImpl highest = server.getHighestSupportedProtocol(RPC.RpcKind.RPC_WRITABLE, protocolName)[ CD ]
Line_44 $$ if (target instanceof IOException) -->Line_50 $$ exception = ioe[ CD ]
Line_43 $$ Throwable target = e.getTargetException()-->Line_49 $$ ioe.setStackTrace(target.getStackTrace())[ FD ]
Line_22 $$ if (protocolImpl == null) -->Line_23 $$ VerProtocolImpl highest = server.getHighestSupportedProtocol(RPC.RpcKind.RPC_WRITABLE, protoName)[ CD ]
Line_4 $$ if (server.verbose)-->Line_5 $$ log("Call: " + call)[ CD ]
Line_64 $$ String msg = "Served: " + call.getMethodName() + " queueTime= " + qTime + " procesingTime= " + processingTime-->Line_66 $$ msg += " exception= " + exception.getClass().getSimpleName()[ FD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_33 $$ Exception exception = null[ CD ]
Line_3 $$ Invocation call = (Invocation) rpcRequest-->Line_64 $$ String msg = "Served: " + call.getMethodName() + " queueTime= " + qTime + " procesingTime= " + processingTime[ FD ]
Line_64 $$ String msg = "Served: " + call.getMethodName() + " queueTime= " + qTime + " procesingTime= " + processingTime-->Line_68 $$ LOG.debug(msg)[ FD ]
Line_50 $$ exception = ioe-->Line_66 $$ msg += " exception= " + exception.getClass().getSimpleName()[ FD ]
Line_20 $$ ProtoNameVer pv = new ProtoNameVer(call.declaringClassProtocolName, clientVersion)-->Line_21 $$ protocolImpl = server.getProtocolImplMap(RPC.RpcKind.RPC_WRITABLE).get(pv)[ FD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_6 $$ if (call.getRpcVersion() != writableRpcVersion) [ CD ]
Line_12 $$ if (call.declaringClassProtocolName.equals(VersionedProtocol.class.getName())) -->Line_17 $$ protocolImpl = highest.protocolTarget[ CD ]
Line_44 $$ if (target instanceof IOException) -->Line_45 $$ exception = (IOException) target[ CD ]
Line_44 $$ if (target instanceof IOException) -->Line_49 $$ ioe.setStackTrace(target.getStackTrace())[ CD ]
Line_62 $$ int processingTime = (int) (Time.now() - startTime)-->Line_73 $$ server.rpcDetailedMetrics.addProcessingTime(detailedMetricsName, processingTime)[ FD ]
Line_11 $$ ProtoClassProtoImpl protocolImpl-->Line_17 $$ protocolImpl = highest.protocolTarget[ FD ]
Line_48 $$ IOException ioe = new IOException(target.toString())-->Line_58 $$ ioe.setStackTrace(e.getStackTrace())[ FD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_11 $$ ProtoClassProtoImpl protocolImpl[ CD ]
Line_19 $$ protoName = call.declaringClassProtocolName-->Line_23 $$ VerProtocolImpl highest = server.getHighestSupportedProtocol(RPC.RpcKind.RPC_WRITABLE, protoName)[ FD ]
Line_65 $$ if (exception != null) -->Line_66 $$ msg += " exception= " + exception.getClass().getSimpleName()[ CD ]
Line_35 $$ Method method = protocolImpl.protocolClass.getMethod(call.getMethodName(), call.getParameterClasses())-->Line_41 $$ return new ObjectWritable(method.getReturnType(), value)[ FD ]
Line_44 $$ if (target instanceof IOException) -->Line_48 $$ IOException ioe = new IOException(target.toString())[ CD ]
Line_45 $$ exception = (IOException) target-->Line_66 $$ msg += " exception= " + exception.getClass().getSimpleName()[ FD ]
Line_59 $$ exception = ioe-->Line_70 $$ String detailedMetricsName = (exception == null) ? call.getMethodName() : exception.getClass().getSimpleName()[ FD ]
Line_3 $$ Invocation call = (Invocation) rpcRequest-->Line_7 $$ throw new RpcServerException("WritableRpc version mismatch, client side version=" + call.getRpcVersion() + ", server side version=" + writableRpcVersion)[ FD ]
Line_50 $$ exception = ioe-->Line_59 $$ exception = ioe[ FD ]
Line_10 $$ final String protoName-->Line_23 $$ VerProtocolImpl highest = server.getHighestSupportedProtocol(RPC.RpcKind.RPC_WRITABLE, protoName)[ FD ]
Line_63 $$ if (LOG.isDebugEnabled()) -->Line_64 $$ String msg = "Served: " + call.getMethodName() + " queueTime= " + qTime + " procesingTime= " + processingTime[ CD ]
Line_12 $$ if (call.declaringClassProtocolName.equals(VersionedProtocol.class.getName())) -->Line_19 $$ protoName = call.declaringClassProtocolName[ CD ]
Line_12 $$ if (call.declaringClassProtocolName.equals(VersionedProtocol.class.getName())) -->Line_14 $$ if (highest == null) [ CD ]
Line_48 $$ IOException ioe = new IOException(target.toString())-->Line_49 $$ ioe.setStackTrace(target.getStackTrace())[ FD ]
Line_13 $$ VerProtocolImpl highest = server.getHighestSupportedProtocol(RPC.RpcKind.RPC_WRITABLE, protocolName)-->Line_24 $$ if (highest == null) [ FD ]
Line_17 $$ protocolImpl = highest.protocolTarget-->Line_22 $$ if (protocolImpl == null) [ FD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_39 $$ if (server.verbose)[ FD ]
Line_13 $$ VerProtocolImpl highest = server.getHighestSupportedProtocol(RPC.RpcKind.RPC_WRITABLE, protocolName)-->Line_14 $$ if (highest == null) [ FD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_13 $$ VerProtocolImpl highest = server.getHighestSupportedProtocol(RPC.RpcKind.RPC_WRITABLE, protocolName)[ FD ]
Line_45 $$ exception = (IOException) target-->Line_50 $$ exception = ioe[ FD ]
Line_62 $$ int processingTime = (int) (Time.now() - startTime)-->Line_72 $$ server.rpcMetrics.addRpcProcessingTime(processingTime)[ FD ]
Line_39 $$ if (server.verbose)-->Line_40 $$ log("Return: " + value)[ CD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_4 $$ if (server.verbose)[ FD ]
Line_45 $$ exception = (IOException) target-->Line_59 $$ exception = ioe[ FD ]
Line_3 $$ Invocation call = (Invocation) rpcRequest-->Line_70 $$ String detailedMetricsName = (exception == null) ? call.getMethodName() : exception.getClass().getSimpleName()[ FD ]
Line_59 $$ exception = ioe-->Line_65 $$ if (exception != null) [ FD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_31 $$ long startTime = Time.now()[ CD ]
Line_35 $$ Method method = protocolImpl.protocolClass.getMethod(call.getMethodName(), call.getParameterClasses())-->Line_38 $$ Object value = method.invoke(protocolImpl.protocolImpl, call.getParameters())[ FD ]
Line_33 $$ Exception exception = null-->Line_66 $$ msg += " exception= " + exception.getClass().getSimpleName()[ FD ]
Line_22 $$ if (protocolImpl == null) -->Line_24 $$ if (highest == null) [ CD ]
Line_33 $$ Exception exception = null-->Line_50 $$ exception = ioe[ FD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_10 $$ final String protoName[ CD ]
Line_50 $$ exception = ioe-->Line_70 $$ String detailedMetricsName = (exception == null) ? call.getMethodName() : exception.getClass().getSimpleName()[ FD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_3 $$ Invocation call = (Invocation) rpcRequest[ CD ]
Line_50 $$ exception = ioe-->Line_65 $$ if (exception != null) [ FD ]
Line_12 $$ if (call.declaringClassProtocolName.equals(VersionedProtocol.class.getName())) -->Line_21 $$ protocolImpl = server.getProtocolImplMap(RPC.RpcKind.RPC_WRITABLE).get(pv)[ CD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_23 $$ VerProtocolImpl highest = server.getHighestSupportedProtocol(RPC.RpcKind.RPC_WRITABLE, protoName)[ FD ]
Line_11 $$ ProtoClassProtoImpl protocolImpl-->Line_22 $$ if (protocolImpl == null) [ FD ]
Line_17 $$ protocolImpl = highest.protocolTarget-->Line_21 $$ protocolImpl = server.getProtocolImplMap(RPC.RpcKind.RPC_WRITABLE).get(pv)[ FD ]
Line_3 $$ Invocation call = (Invocation) rpcRequest-->Line_6 $$ if (call.getRpcVersion() != writableRpcVersion) [ FD ]
Line_12 $$ if (call.declaringClassProtocolName.equals(VersionedProtocol.class.getName())) -->Line_20 $$ ProtoNameVer pv = new ProtoNameVer(call.declaringClassProtocolName, clientVersion)[ CD ]
Line_48 $$ IOException ioe = new IOException(target.toString())-->Line_50 $$ exception = ioe[ FD ]
Line_11 $$ ProtoClassProtoImpl protocolImpl-->Line_21 $$ protocolImpl = server.getProtocolImplMap(RPC.RpcKind.RPC_WRITABLE).get(pv)[ FD ]
Line_33 $$ Exception exception = null-->Line_59 $$ exception = ioe[ FD ]
Line_70 $$ String detailedMetricsName = (exception == null) ? call.getMethodName() : exception.getClass().getSimpleName()-->Line_73 $$ server.rpcDetailedMetrics.addProcessingTime(detailedMetricsName, processingTime)[ FD ]
Line_59 $$ exception = ioe-->Line_66 $$ msg += " exception= " + exception.getClass().getSimpleName()[ FD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_12 $$ if (call.declaringClassProtocolName.equals(VersionedProtocol.class.getName())) [ CD ]
Line_43 $$ Throwable target = e.getTargetException()-->Line_48 $$ IOException ioe = new IOException(target.toString())[ FD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_9 $$ long clientVersion = call.getProtocolVersion()[ CD ]
Line_10 $$ final String protoName-->Line_19 $$ protoName = call.declaringClassProtocolName[ FD ]
Line_43 $$ Throwable target = e.getTargetException()-->Line_44 $$ if (target instanceof IOException) [ FD ]
Line_2 $$ public Writable call(org.apache.hadoop.ipc.RPC.Server server, String protocolName, Writable rpcRequest, long receivedTime) throws IOException, RPC.VersionMismatch -->Line_21 $$ protocolImpl = server.getProtocolImplMap(RPC.RpcKind.RPC_WRITABLE).get(pv)[ FD ]
