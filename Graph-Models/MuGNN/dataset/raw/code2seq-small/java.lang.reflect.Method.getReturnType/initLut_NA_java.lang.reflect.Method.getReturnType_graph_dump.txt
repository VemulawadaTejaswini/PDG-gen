Line_11 $$ for (Method method : cls.getMethods()) -->Line_12 $$ String retName = method.getReturnType().getSimpleName()[ FD ]
Line_5 $$ for (Class<?> cls : spec.getClasses()) -->Line_6 $$ Annotation a = cls.getAnnotation(HamletSpec.Element.class)[ FD ]
Line_5 $$ for (Class<?> cls : spec.getClasses()) -->Line_11 $$ for (Method method : cls.getMethods()) [ FD ]
Line_12 $$ String retName = method.getReturnType().getSimpleName()-->Line_14 $$ inlineElements.add(retName)[ FD ]
Line_12 $$ String retName = method.getReturnType().getSimpleName()-->Line_13 $$ if (isElement(retName)) [ FD ]
Line_7 $$ if (a != null && !((HamletSpec.Element) a).endTag()) -->Line_8 $$ endTagOptional.add(cls.getSimpleName())[ CD ]
Line_5 $$ for (Class<?> cls : spec.getClasses()) -->Line_10 $$ if (cls.getSimpleName().equals("Inline")) [ FD ]
Line_5 $$ for (Class<?> cls : spec.getClasses()) -->Line_8 $$ endTagOptional.add(cls.getSimpleName())[ FD ]
Line_2 $$ void initLut(Class<?> spec) -->Line_5 $$ for (Class<?> cls : spec.getClasses()) [ FD ]
Line_2 $$ void initLut(Class<?> spec) -->Line_4 $$ inlineElements.clear()[ CD ]
Line_13 $$ if (isElement(retName)) -->Line_14 $$ inlineElements.add(retName)[ CD ]
Line_2 $$ void initLut(Class<?> spec) -->Line_3 $$ endTagOptional.clear()[ CD ]
