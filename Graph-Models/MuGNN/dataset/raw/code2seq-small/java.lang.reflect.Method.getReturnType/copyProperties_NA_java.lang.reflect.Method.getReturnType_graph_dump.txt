Line_14 $$ for (PropertyDescriptor targetPd : targetPds) -->Line_17 $$ PropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName())[ FD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_13 $$ List<String> ignoreList = (ignoreProperties != null ? Arrays.asList(ignoreProperties) : null)[ CD ]
Line_15 $$ Method writeMethod = targetPd.getWriteMethod()-->Line_20 $$ if (readMethod != null && ClassUtils.isAssignable(writeMethod.getParameterTypes()[0], readMethod.getReturnType())) [ FD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_5 $$ Class<?> actualEditable = target.getClass()[ CD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_12 $$ PropertyDescriptor[] targetPds = getPropertyDescriptors(actualEditable)[ CD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_10 $$ actualEditable = editable[ FD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_4 $$ Assert.notNull(target, "Target must not be null")[ FD ]
Line_15 $$ Method writeMethod = targetPd.getWriteMethod()-->Line_29 $$ writeMethod.invoke(target, value)[ FD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_3 $$ Assert.notNull(source, "Source must not be null")[ CD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_7 $$ if (!editable.isInstance(target)) [ FD ]
Line_25 $$ Object value = readMethod.invoke(source)-->Line_29 $$ writeMethod.invoke(target, value)[ FD ]
Line_15 $$ Method writeMethod = targetPd.getWriteMethod()-->Line_27 $$ writeMethod.setAccessible(true)[ FD ]
Line_14 $$ for (PropertyDescriptor targetPd : targetPds) -->Line_31 $$ throw new FatalBeanException("Could not copy property '" + targetPd.getName() + "' from source to target", ex)[ FD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_17 $$ PropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName())[ FD ]
Line_18 $$ if (sourcePd != null) -->Line_20 $$ if (readMethod != null && ClassUtils.isAssignable(writeMethod.getParameterTypes()[0], readMethod.getReturnType())) [ CD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_6 $$ if (editable != null) [ CD ]
Line_17 $$ PropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName())-->Line_19 $$ Method readMethod = sourcePd.getReadMethod()[ FD ]
Line_17 $$ PropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName())-->Line_18 $$ if (sourcePd != null) [ FD ]
Line_19 $$ Method readMethod = sourcePd.getReadMethod()-->Line_23 $$ readMethod.setAccessible(true)[ FD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_8 $$ throw new IllegalArgumentException("Target class [" + target.getClass().getName() + "] not assignable to Editable class [" + editable.getName() + "]")[ FD ]
Line_16 $$ if (writeMethod != null && (ignoreList == null || !ignoreList.contains(targetPd.getName()))) -->Line_17 $$ PropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName())[ CD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_5 $$ Class<?> actualEditable = target.getClass()[ FD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_4 $$ Assert.notNull(target, "Target must not be null")[ CD ]
Line_16 $$ if (writeMethod != null && (ignoreList == null || !ignoreList.contains(targetPd.getName()))) -->Line_18 $$ if (sourcePd != null) [ CD ]
Line_26 $$ if (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) -->Line_27 $$ writeMethod.setAccessible(true)[ CD ]
Line_19 $$ Method readMethod = sourcePd.getReadMethod()-->Line_20 $$ if (readMethod != null && ClassUtils.isAssignable(writeMethod.getParameterTypes()[0], readMethod.getReturnType())) [ FD ]
Line_15 $$ Method writeMethod = targetPd.getWriteMethod()-->Line_26 $$ if (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) [ FD ]
Line_6 $$ if (editable != null) -->Line_7 $$ if (!editable.isInstance(target)) [ CD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_6 $$ if (editable != null) [ FD ]
Line_13 $$ List<String> ignoreList = (ignoreProperties != null ? Arrays.asList(ignoreProperties) : null)-->Line_16 $$ if (writeMethod != null && (ignoreList == null || !ignoreList.contains(targetPd.getName()))) [ FD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_3 $$ Assert.notNull(source, "Source must not be null")[ FD ]
Line_10 $$ actualEditable = editable-->Line_12 $$ PropertyDescriptor[] targetPds = getPropertyDescriptors(actualEditable)[ FD ]
Line_19 $$ Method readMethod = sourcePd.getReadMethod()-->Line_25 $$ Object value = readMethod.invoke(source)[ FD ]
Line_18 $$ if (sourcePd != null) -->Line_19 $$ Method readMethod = sourcePd.getReadMethod()[ CD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_29 $$ writeMethod.invoke(target, value)[ FD ]
Line_14 $$ for (PropertyDescriptor targetPd : targetPds) -->Line_15 $$ Method writeMethod = targetPd.getWriteMethod()[ FD ]
Line_5 $$ Class<?> actualEditable = target.getClass()-->Line_12 $$ PropertyDescriptor[] targetPds = getPropertyDescriptors(actualEditable)[ FD ]
Line_6 $$ if (editable != null) -->Line_10 $$ actualEditable = editable[ CD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_13 $$ List<String> ignoreList = (ignoreProperties != null ? Arrays.asList(ignoreProperties) : null)[ FD ]
Line_14 $$ for (PropertyDescriptor targetPd : targetPds) -->Line_16 $$ if (writeMethod != null && (ignoreList == null || !ignoreList.contains(targetPd.getName()))) [ FD ]
Line_22 $$ if (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) -->Line_23 $$ readMethod.setAccessible(true)[ CD ]
Line_5 $$ Class<?> actualEditable = target.getClass()-->Line_10 $$ actualEditable = editable[ FD ]
Line_19 $$ Method readMethod = sourcePd.getReadMethod()-->Line_22 $$ if (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) [ FD ]
Line_2 $$ private static void copyProperties(Object source, Object target, Class<?> editable, String... ignoreProperties) throws BeansException -->Line_25 $$ Object value = readMethod.invoke(source)[ FD ]
