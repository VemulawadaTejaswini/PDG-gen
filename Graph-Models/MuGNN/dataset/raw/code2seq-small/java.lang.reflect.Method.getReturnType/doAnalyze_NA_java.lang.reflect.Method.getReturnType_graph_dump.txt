Line_24 $$ if (spf != null) -->Line_26 $$ if (type.isArray()) [ CD ]
Line_55 $$ if (wo != null) -->Line_56 $$ int mods = spf.getModifiers()[ CD ]
Line_25 $$ Class type = spf.getType()-->Line_26 $$ if (type.isArray()) [ FD ]
Line_53 $$ wo = null-->Line_65 $$ wo = null[ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_3 $$ super.doAnalyze()[ CD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_10 $$ if (cls.getName().indexOf('$') != -1)[ CD ]
Line_13 $$ if (!externalizable) -->Line_67 $$ if (wo != null) [ CD ]
Line_13 $$ if (!externalizable) -->Line_14 $$ Field spf = null[ CD ]
Line_90 $$ Class superClass = cls.getSuperclass()-->Line_93 $$ if (superClass == null)[ FD ]
Line_16 $$ spf = cls.getField("serialPersistentFields")-->Line_25 $$ Class type = spf.getType()[ FD ]
Line_39 $$ for (int i = 0; i < fields.length; ++i) -->Line_40 $$ if (fields[i] == spf) [ CD ]
Line_21 $$ if (!Modifier.isFinal(mods) || !Modifier.isStatic(mods) || !Modifier.isPrivate(mods))-->Line_22 $$ spf = null[ CD ]
Line_27 $$ type = type.getComponentType()-->Line_28 $$ if (type != ObjectStreamField.class)[ FD ]
Line_29 $$ spf = null-->Line_31 $$ spf = null[ FD ]
Line_24 $$ if (spf != null) -->Line_25 $$ Class type = spf.getType()[ CD ]
Line_13 $$ if (!externalizable) -->Line_60 $$ if (wo != null) [ CD ]
Line_53 $$ wo = null-->Line_63 $$ wo = null[ FD ]
Line_69 $$ for (int i = 0; i < methods.length; ++i) -->Line_78 $$ for (int i = 0; i < fields.length; ++i) [ FD ]
Line_90 $$ Class superClass = cls.getSuperclass()-->Line_96 $$ superAnalysis = getValueAnalysis(superClass)[ FD ]
Line_69 $$ for (int i = 0; i < methods.length; ++i) -->Line_70 $$ if (methods[i] == wo) [ CD ]
Line_13 $$ if (!externalizable) -->Line_55 $$ if (wo != null) [ CD ]
Line_39 $$ for (int i = 0; i < fields.length; ++i) -->Line_78 $$ for (int i = 0; i < fields.length; ++i) [ FD ]
Line_51 $$ if (wo != null) -->Line_52 $$ if (wo.getReturnType() != Void.TYPE)[ CD ]
Line_90 $$ Class superClass = cls.getSuperclass()-->Line_91 $$ if (superClass == java.lang.Object.class)[ FD ]
Line_46 $$ Method wo = null-->Line_51 $$ if (wo != null) [ FD ]
Line_46 $$ Method wo = null-->Line_58 $$ wo = null[ FD ]
Line_53 $$ wo = null-->Line_58 $$ wo = null[ FD ]
Line_22 $$ spf = null-->Line_25 $$ Class type = spf.getType()[ FD ]
Line_81 $$ int mods = fields[i].getModifiers()-->Line_85 $$ vma = new ValueMemberAnalysis(fields[i].getName(), fields[i].getType(), Modifier.isPublic(mods))[ FD ]
Line_14 $$ Field spf = null-->Line_24 $$ if (spf != null) [ FD ]
Line_93 $$ if (superClass == null)-->Line_96 $$ superAnalysis = getValueAnalysis(superClass)[ CD ]
Line_48 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_55 $$ if (wo != null) [ FD ]
Line_14 $$ Field spf = null-->Line_16 $$ spf = cls.getField("serialPersistentFields")[ FD ]
Line_62 $$ if (paramTypes.length != 1)-->Line_63 $$ wo = null[ CD ]
Line_20 $$ int mods = spf.getModifiers()-->Line_57 $$ if (!Modifier.isPrivate(mods))[ FD ]
Line_13 $$ if (!externalizable) -->Line_33 $$ if (spf != null) [ CD ]
Line_13 $$ if (!externalizable) -->Line_51 $$ if (wo != null) [ CD ]
Line_85 $$ vma = new ValueMemberAnalysis(fields[i].getName(), fields[i].getType(), Modifier.isPublic(mods))-->Line_86 $$ m.add(vma)[ FD ]
Line_22 $$ spf = null-->Line_29 $$ spf = null[ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_8 $$ if (Remote.class.isAssignableFrom(cls))[ CD ]
Line_48 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_67 $$ if (wo != null) [ FD ]
Line_58 $$ wo = null-->Line_61 $$ Class[] paramTypes = wo.getParameterTypes()[ FD ]
Line_81 $$ int mods = fields[i].getModifiers()-->Line_82 $$ if (Modifier.isStatic(mods) || Modifier.isTransient(mods))[ FD ]
Line_78 $$ for (int i = 0; i < fields.length; ++i) -->Line_84 $$ ValueMemberAnalysis vma[ CD ]
Line_14 $$ Field spf = null-->Line_22 $$ spf = null[ FD ]
Line_92 $$ superClass = null-->Line_93 $$ if (superClass == null)[ FD ]
Line_16 $$ spf = cls.getField("serialPersistentFields")-->Line_19 $$ if (spf != null) [ FD ]
Line_29 $$ spf = null-->Line_33 $$ if (spf != null) [ FD ]
Line_26 $$ if (type.isArray()) -->Line_28 $$ if (type != ObjectStreamField.class)[ CD ]
Line_60 $$ if (wo != null) -->Line_61 $$ Class[] paramTypes = wo.getParameterTypes()[ CD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_4 $$ if (cls == String.class)[ CD ]
Line_16 $$ spf = cls.getField("serialPersistentFields")-->Line_35 $$ serialPersistentFields = (ObjectStreamField[]) spf.get(null)[ FD ]
Line_22 $$ spf = null-->Line_31 $$ spf = null[ FD ]
Line_84 $$ ValueMemberAnalysis vma-->Line_85 $$ vma = new ValueMemberAnalysis(fields[i].getName(), fields[i].getType(), Modifier.isPublic(mods))[ FD ]
Line_46 $$ Method wo = null-->Line_55 $$ if (wo != null) [ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_13 $$ if (!externalizable) [ CD ]
Line_58 $$ wo = null-->Line_65 $$ wo = null[ FD ]
Line_26 $$ if (type.isArray()) -->Line_27 $$ type = type.getComponentType()[ CD ]
Line_14 $$ Field spf = null-->Line_29 $$ spf = null[ FD ]
Line_46 $$ Method wo = null-->Line_61 $$ Class[] paramTypes = wo.getParameterTypes()[ FD ]
Line_20 $$ int mods = spf.getModifiers()-->Line_85 $$ vma = new ValueMemberAnalysis(fields[i].getName(), fields[i].getType(), Modifier.isPublic(mods))[ FD ]
Line_16 $$ spf = cls.getField("serialPersistentFields")-->Line_29 $$ spf = null[ FD ]
Line_91 $$ if (superClass == java.lang.Object.class)-->Line_92 $$ superClass = null[ CD ]
Line_14 $$ Field spf = null-->Line_31 $$ spf = null[ FD ]
Line_29 $$ spf = null-->Line_56 $$ int mods = spf.getModifiers()[ FD ]
Line_78 $$ for (int i = 0; i < fields.length; ++i) -->Line_82 $$ if (Modifier.isStatic(mods) || Modifier.isTransient(mods))[ CD ]
Line_63 $$ wo = null-->Line_65 $$ wo = null[ FD ]
Line_48 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_51 $$ if (wo != null) [ FD ]
Line_29 $$ spf = null-->Line_35 $$ serialPersistentFields = (ObjectStreamField[]) spf.get(null)[ FD ]
Line_53 $$ wo = null-->Line_61 $$ Class[] paramTypes = wo.getParameterTypes()[ FD ]
Line_64 $$ if (paramTypes[0] != java.io.OutputStream.class)-->Line_65 $$ wo = null[ CD ]
Line_14 $$ Field spf = null-->Line_40 $$ if (fields[i] == spf) [ FD ]
Line_14 $$ Field spf = null-->Line_33 $$ if (spf != null) [ FD ]
Line_46 $$ Method wo = null-->Line_70 $$ if (methods[i] == wo) [ FD ]
Line_16 $$ spf = cls.getField("serialPersistentFields")-->Line_40 $$ if (fields[i] == spf) [ FD ]
Line_22 $$ spf = null-->Line_56 $$ int mods = spf.getModifiers()[ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_90 $$ Class superClass = cls.getSuperclass()[ CD ]
Line_46 $$ Method wo = null-->Line_63 $$ wo = null[ FD ]
Line_48 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_70 $$ if (methods[i] == wo) [ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_93 $$ if (superClass == null)[ CD ]
Line_63 $$ wo = null-->Line_67 $$ if (wo != null) [ FD ]
Line_48 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_61 $$ Class[] paramTypes = wo.getParameterTypes()[ FD ]
Line_20 $$ int mods = spf.getModifiers()-->Line_82 $$ if (Modifier.isStatic(mods) || Modifier.isTransient(mods))[ FD ]
Line_25 $$ Class type = spf.getType()-->Line_28 $$ if (type != ObjectStreamField.class)[ FD ]
Line_16 $$ spf = cls.getField("serialPersistentFields")-->Line_22 $$ spf = null[ FD ]
Line_14 $$ Field spf = null-->Line_35 $$ serialPersistentFields = (ObjectStreamField[]) spf.get(null)[ FD ]
Line_46 $$ Method wo = null-->Line_65 $$ wo = null[ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_98 $$ if (!Serializable.class.isAssignableFrom(cls))[ CD ]
Line_16 $$ spf = cls.getField("serialPersistentFields")-->Line_20 $$ int mods = spf.getModifiers()[ FD ]
Line_16 $$ spf = cls.getField("serialPersistentFields")-->Line_24 $$ if (spf != null) [ FD ]
Line_20 $$ int mods = spf.getModifiers()-->Line_21 $$ if (!Modifier.isFinal(mods) || !Modifier.isStatic(mods) || !Modifier.isPrivate(mods))[ FD ]
Line_25 $$ Class type = spf.getType()-->Line_27 $$ type = type.getComponentType()[ FD ]
Line_58 $$ wo = null-->Line_70 $$ if (methods[i] == wo) [ FD ]
Line_31 $$ spf = null-->Line_40 $$ if (fields[i] == spf) [ FD ]
Line_53 $$ wo = null-->Line_60 $$ if (wo != null) [ FD ]
Line_78 $$ for (int i = 0; i < fields.length; ++i) -->Line_81 $$ int mods = fields[i].getModifiers()[ CD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_12 $$ externalizable = Externalizable.class.isAssignableFrom(cls)[ CD ]
Line_78 $$ for (int i = 0; i < fields.length; ++i) -->Line_86 $$ m.add(vma)[ CD ]
Line_48 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_60 $$ if (wo != null) [ FD ]
Line_14 $$ Field spf = null-->Line_19 $$ if (spf != null) [ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_100 $$ fixupCaseNames()[ CD ]
Line_55 $$ if (wo != null) -->Line_57 $$ if (!Modifier.isPrivate(mods))[ CD ]
Line_48 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_58 $$ wo = null[ FD ]
Line_62 $$ if (paramTypes.length != 1)-->Line_64 $$ if (paramTypes[0] != java.io.OutputStream.class)[ CD ]
Line_22 $$ spf = null-->Line_33 $$ if (spf != null) [ FD ]
Line_28 $$ if (type != ObjectStreamField.class)-->Line_29 $$ spf = null[ CD ]
Line_63 $$ wo = null-->Line_70 $$ if (methods[i] == wo) [ FD ]
Line_22 $$ spf = null-->Line_24 $$ if (spf != null) [ FD ]
Line_29 $$ spf = null-->Line_40 $$ if (fields[i] == spf) [ FD ]
Line_14 $$ Field spf = null-->Line_20 $$ int mods = spf.getModifiers()[ FD ]
Line_26 $$ if (type.isArray()) -->Line_31 $$ spf = null[ CD ]
Line_48 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_53 $$ wo = null[ FD ]
Line_65 $$ wo = null-->Line_67 $$ if (wo != null) [ FD ]
Line_14 $$ Field spf = null-->Line_25 $$ Class type = spf.getType()[ FD ]
Line_14 $$ Field spf = null-->Line_56 $$ int mods = spf.getModifiers()[ FD ]
Line_78 $$ for (int i = 0; i < fields.length; ++i) -->Line_79 $$ if (f_flags[i] != 0)[ CD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_91 $$ if (superClass == java.lang.Object.class)[ CD ]
Line_67 $$ if (wo != null) -->Line_69 $$ for (int i = 0; i < methods.length; ++i) [ CD ]
Line_46 $$ Method wo = null-->Line_67 $$ if (wo != null) [ FD ]
Line_16 $$ spf = cls.getField("serialPersistentFields")-->Line_56 $$ int mods = spf.getModifiers()[ FD ]
Line_46 $$ Method wo = null-->Line_60 $$ if (wo != null) [ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_78 $$ for (int i = 0; i < fields.length; ++i) [ CD ]
Line_77 $$ SortedSet m = new TreeSet(new ValueMemberComparator())-->Line_88 $$ members = new ValueMemberAnalysis[m.size()][ FD ]
Line_77 $$ SortedSet m = new TreeSet(new ValueMemberComparator())-->Line_86 $$ m.add(vma)[ FD ]
Line_77 $$ SortedSet m = new TreeSet(new ValueMemberComparator())-->Line_89 $$ members = (ValueMemberAnalysis[]) m.toArray(members)[ FD ]
Line_53 $$ wo = null-->Line_55 $$ if (wo != null) [ FD ]
Line_65 $$ wo = null-->Line_70 $$ if (methods[i] == wo) [ FD ]
Line_58 $$ wo = null-->Line_67 $$ if (wo != null) [ FD ]
Line_92 $$ superClass = null-->Line_96 $$ superAnalysis = getValueAnalysis(superClass)[ FD ]
Line_53 $$ wo = null-->Line_70 $$ if (methods[i] == wo) [ FD ]
Line_46 $$ Method wo = null-->Line_48 $$ wo = cls.getMethod("writeObject", new Class[] [ FD ]
Line_48 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_65 $$ wo = null[ FD ]
Line_22 $$ spf = null-->Line_35 $$ serialPersistentFields = (ObjectStreamField[]) spf.get(null)[ FD ]
Line_48 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_52 $$ if (wo.getReturnType() != Void.TYPE)[ FD ]
Line_31 $$ spf = null-->Line_56 $$ int mods = spf.getModifiers()[ FD ]
Line_52 $$ if (wo.getReturnType() != Void.TYPE)-->Line_53 $$ wo = null[ CD ]
Line_48 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_63 $$ wo = null[ FD ]
Line_22 $$ spf = null-->Line_40 $$ if (fields[i] == spf) [ FD ]
Line_58 $$ wo = null-->Line_60 $$ if (wo != null) [ FD ]
Line_33 $$ if (spf != null) -->Line_39 $$ for (int i = 0; i < fields.length; ++i) [ CD ]
Line_39 $$ for (int i = 0; i < fields.length; ++i) -->Line_69 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_58 $$ wo = null-->Line_63 $$ wo = null[ FD ]
Line_46 $$ Method wo = null-->Line_53 $$ wo = null[ FD ]
Line_13 $$ if (!externalizable) -->Line_24 $$ if (spf != null) [ CD ]
Line_31 $$ spf = null-->Line_33 $$ if (spf != null) [ FD ]
Line_13 $$ if (!externalizable) -->Line_19 $$ if (spf != null) [ CD ]
Line_31 $$ spf = null-->Line_35 $$ serialPersistentFields = (ObjectStreamField[]) spf.get(null)[ FD ]
Line_90 $$ Class superClass = cls.getSuperclass()-->Line_92 $$ superClass = null[ FD ]
Line_16 $$ spf = cls.getField("serialPersistentFields")-->Line_31 $$ spf = null[ FD ]
Line_13 $$ if (!externalizable) -->Line_46 $$ Method wo = null[ CD ]
Line_78 $$ for (int i = 0; i < fields.length; ++i) -->Line_85 $$ vma = new ValueMemberAnalysis(fields[i].getName(), fields[i].getType(), Modifier.isPublic(mods))[ CD ]
Line_84 $$ ValueMemberAnalysis vma-->Line_86 $$ m.add(vma)[ FD ]
Line_53 $$ wo = null-->Line_67 $$ if (wo != null) [ FD ]
Line_19 $$ if (spf != null) -->Line_20 $$ int mods = spf.getModifiers()[ CD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_6 $$ if (cls == Class.class)[ CD ]
Line_60 $$ if (wo != null) -->Line_62 $$ if (paramTypes.length != 1)[ CD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_77 $$ SortedSet m = new TreeSet(new ValueMemberComparator())[ CD ]
Line_19 $$ if (spf != null) -->Line_21 $$ if (!Modifier.isFinal(mods) || !Modifier.isStatic(mods) || !Modifier.isPrivate(mods))[ CD ]
Line_16 $$ spf = cls.getField("serialPersistentFields")-->Line_33 $$ if (spf != null) [ FD ]
Line_46 $$ Method wo = null-->Line_52 $$ if (wo.getReturnType() != Void.TYPE)[ FD ]
Line_57 $$ if (!Modifier.isPrivate(mods))-->Line_58 $$ wo = null[ CD ]
