Line_21 $$ moduleName = (String) unmarshaller.readObject()-->Line_118 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_15 $$ final String appName-->Line_29 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_4 $$ final short invocationId = input.readShort()-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_16 $$ final String moduleName-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_83 $$ SecurityActions.remotingContextSetConnection(channelAssociation.getChannel().getConnection())[ FD ]
Line_48 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_107 $$ if (componentView.getComponent() instanceof StatelessSessionComponent) [ FD ]
Line_73 $$ runnable = new Runnable() -->Line_129 $$ runnable.run()[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_4 $$ final short invocationId = input.readShort()[ CD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_33 $$ Runnable runnable = null[ CD ]
Line_82 $$ Object result = null-->Line_85 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_28 $$ if (ejbDeploymentInformation == null) -->Line_30 $$ return[ CD ]
Line_21 $$ moduleName = (String) unmarshaller.readObject()-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_21 $$ moduleName = (String) unmarshaller.readObject()-->Line_96 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_65 $$ final Map<String, Object> attachments-->Line_114 $$ writeMethodInvocationResponse(channelAssociation, invocationId, result, attachments, invokedMethod, componentView)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_7 $$ final String signature = input.readUTF()[ CD ]
Line_14 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_72 $$ unmarshaller.finish()[ FD ]
Line_17 $$ final String distinctName-->Line_45 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_48 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_104 $$ if (locator instanceof StatefulEJBLocator && componentView.getComponent() instanceof StatefulSessionComponent) [ FD ]
Line_15 $$ final String appName-->Line_20 $$ appName = (String) unmarshaller.readObject()[ FD ]
Line_21 $$ moduleName = (String) unmarshaller.readObject()-->Line_95 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_17 $$ final String distinctName-->Line_96 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_9 $$ methodParamTypes = new String[0]-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_106 $$ weakAffinity = MethodInvocationMessageHandler.this.getWeakAffinity(statefulSessionComponent, (StatefulEJBLocator<?>) locator)-->Line_109 $$ weakAffinity = statelessSessionComponent.getWeakAffinity()[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_69 $$ MethodInvocationMessageHandler.this.writeException(channelAssociation, MethodInvocationMessageHandler.this.marshallerFactory, invocationId, e, null)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_28 $$ if (ejbDeploymentInformation == null) [ CD ]
Line_23 $$ beanName = (String) unmarshaller.readObject()-->Line_89 $$ EjbLogger.EJB3_INVOCATION_LOGGER.debugf("Cannot handle method invocation: %s on bean: %s due to EJB component unavailability exception. Returning a no such EJB available message back to client", invokedMethod, beanName)[ FD ]
Line_32 $$ final ClassLoader tccl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_124 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(tccl)[ FD ]
Line_14 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_58 $$ methodParams[i] = unmarshaller.readObject()[ FD ]
Line_4 $$ final short invocationId = input.readShort()-->Line_60 $$ MethodInvocationMessageHandler.this.writeException(channelAssociation, MethodInvocationMessageHandler.this.marshallerFactory, invocationId, e, null)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_60 $$ MethodInvocationMessageHandler.this.writeException(channelAssociation, MethodInvocationMessageHandler.this.marshallerFactory, invocationId, e, null)[ FD ]
Line_16 $$ final String moduleName-->Line_45 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_32 $$ final ClassLoader tccl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()[ CD ]
Line_73 $$ runnable = new Runnable() -->Line_127 $$ executorService.submit(runnable)[ FD ]
Line_20 $$ appName = (String) unmarshaller.readObject()-->Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_18 $$ final String beanName-->Line_90 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_11 $$ methodParamTypes = signature.split(String.valueOf(METHOD_PARAM_TYPE_SEPARATOR))-->Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)[ FD ]
Line_14 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_23 $$ beanName = (String) unmarshaller.readObject()[ FD ]
Line_7 $$ final String signature = input.readUTF()-->Line_11 $$ methodParamTypes = signature.split(String.valueOf(METHOD_PARAM_TYPE_SEPARATOR))[ FD ]
Line_13 $$ final ClassLoaderSwitchingClassResolver classResolver = new ClassLoaderSwitchingClassResolver(Thread.currentThread().getContextClassLoader())-->Line_36 $$ classResolver.switchClassLoader(ejbDeploymentInformation.getDeploymentClassLoader())[ FD ]
Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_118 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_16 $$ final String moduleName[ CD ]
Line_44 $$ if (!ejbDeploymentInformation.isRemoteView(viewClassName)) -->Line_45 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ CD ]
Line_6 $$ String[] methodParamTypes = null-->Line_9 $$ methodParamTypes = new String[0][ FD ]
Line_37 $$ final EJBLocator<?> locator-->Line_85 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_43 $$ final String viewClassName = locator.getViewType().getName()-->Line_45 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_17 $$ final String distinctName-->Line_95 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_15 $$ final String appName-->Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_45 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_43 $$ final String viewClassName = locator.getViewType().getName()-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_88 $$ if (throwable instanceof EJBComponentUnavailableException) -->Line_90 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ CD ]
Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_79 $$ EjbLogger.REMOTE_LOGGER.failedToSendAsyncMethodIndicatorToClient(t, invokedMethod)[ FD ]
Line_33 $$ Runnable runnable = null-->Line_127 $$ executorService.submit(runnable)[ FD ]
Line_16 $$ final String moduleName-->Line_95 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_17 $$ final String distinctName-->Line_90 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_3 $$ final DataInputStream input = new DataInputStream(inputStream)[ CD ]
Line_105 $$ final StatefulSessionComponent statefulSessionComponent = (StatefulSessionComponent) componentView.getComponent()-->Line_106 $$ weakAffinity = MethodInvocationMessageHandler.this.getWeakAffinity(statefulSessionComponent, (StatefulEJBLocator<?>) locator)[ FD ]
Line_3 $$ final DataInputStream input = new DataInputStream(inputStream)-->Line_5 $$ final String methodName = input.readUTF()[ FD ]
Line_4 $$ final short invocationId = input.readShort()-->Line_114 $$ writeMethodInvocationResponse(channelAssociation, invocationId, result, attachments, invokedMethod, componentView)[ FD ]
Line_103 $$ Affinity weakAffinity = null-->Line_106 $$ weakAffinity = MethodInvocationMessageHandler.this.getWeakAffinity(statefulSessionComponent, (StatefulEJBLocator<?>) locator)[ FD ]
Line_21 $$ moduleName = (String) unmarshaller.readObject()-->Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_116 $$ boolean isAsyncVoid = componentView.isAsynchronous(invokedMethod) && invokedMethod.getReturnType().equals(Void.TYPE)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_77 $$ MethodInvocationMessageHandler.this.writeAsyncMethodNotification(channelAssociation, invocationId)[ FD ]
Line_9 $$ methodParamTypes = new String[0]-->Line_11 $$ methodParamTypes = signature.split(String.valueOf(METHOD_PARAM_TYPE_SEPARATOR))[ FD ]
Line_22 $$ distinctName = (String) unmarshaller.readObject()-->Line_96 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_65 $$ final Map<String, Object> attachments-->Line_67 $$ attachments = this.readAttachments(unmarshaller)[ FD ]
Line_48 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_116 $$ boolean isAsyncVoid = componentView.isAsynchronous(invokedMethod) && invokedMethod.getReturnType().equals(Void.TYPE)[ FD ]
Line_88 $$ if (throwable instanceof EJBComponentUnavailableException) -->Line_89 $$ EjbLogger.EJB3_INVOCATION_LOGGER.debugf("Cannot handle method invocation: %s on bean: %s due to EJB component unavailability exception. Returning a no such EJB available message back to client", invokedMethod, beanName)[ CD ]
Line_65 $$ final Map<String, Object> attachments-->Line_92 $$ MethodInvocationMessageHandler.this.writeException(channelAssociation, MethodInvocationMessageHandler.this.marshallerFactory, invocationId, throwable, attachments)[ FD ]
Line_4 $$ final short invocationId = input.readShort()-->Line_45 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_107 $$ if (componentView.getComponent() instanceof StatelessSessionComponent) -->Line_108 $$ final StatelessSessionComponent statelessSessionComponent = (StatelessSessionComponent) componentView.getComponent()[ CD ]
Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)-->Line_36 $$ classResolver.switchClassLoader(ejbDeploymentInformation.getDeploymentClassLoader())[ FD ]
Line_23 $$ beanName = (String) unmarshaller.readObject()-->Line_45 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_23 $$ beanName = (String) unmarshaller.readObject()-->Line_95 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_20 $$ appName = (String) unmarshaller.readObject()-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_15 $$ final String appName-->Line_95 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_48 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_75 $$ if (componentView.isAsynchronous(invokedMethod)) [ FD ]
Line_14 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_21 $$ moduleName = (String) unmarshaller.readObject()[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_92 $$ MethodInvocationMessageHandler.this.writeException(channelAssociation, MethodInvocationMessageHandler.this.marshallerFactory, invocationId, throwable, attachments)[ FD ]
Line_8 $$ if (signature.isEmpty()) -->Line_11 $$ methodParamTypes = signature.split(String.valueOf(METHOD_PARAM_TYPE_SEPARATOR))[ CD ]
Line_3 $$ final DataInputStream input = new DataInputStream(inputStream)-->Line_7 $$ final String signature = input.readUTF()[ FD ]
Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)-->Line_44 $$ if (!ejbDeploymentInformation.isRemoteView(viewClassName)) [ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_17 $$ final String distinctName[ CD ]
Line_48 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_108 $$ final StatelessSessionComponent statelessSessionComponent = (StatelessSessionComponent) componentView.getComponent()[ FD ]
Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_85 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_54 $$ final Object[] methodParams = new Object[methodParamTypes.length]-->Line_85 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_16 $$ final String moduleName-->Line_90 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_18 $$ final String beanName-->Line_95 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_17 $$ final String distinctName-->Line_118 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_48 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_105 $$ final StatefulSessionComponent statefulSessionComponent = (StatefulSessionComponent) componentView.getComponent()[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_13 $$ final ClassLoaderSwitchingClassResolver classResolver = new ClassLoaderSwitchingClassResolver(Thread.currentThread().getContextClassLoader())[ CD ]
Line_108 $$ final StatelessSessionComponent statelessSessionComponent = (StatelessSessionComponent) componentView.getComponent()-->Line_109 $$ weakAffinity = statelessSessionComponent.getWeakAffinity()[ FD ]
Line_4 $$ final short invocationId = input.readShort()-->Line_29 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_8 $$ if (signature.isEmpty()) [ CD ]
Line_106 $$ weakAffinity = MethodInvocationMessageHandler.this.getWeakAffinity(statefulSessionComponent, (StatefulEJBLocator<?>) locator)-->Line_111 $$ if (weakAffinity != null) [ FD ]
Line_65 $$ final Map<String, Object> attachments-->Line_112 $$ attachments.put(Affinity.WEAK_AFFINITY_CONTEXT_KEY, weakAffinity)[ FD ]
Line_104 $$ if (locator instanceof StatefulEJBLocator && componentView.getComponent() instanceof StatefulSessionComponent) -->Line_105 $$ final StatefulSessionComponent statefulSessionComponent = (StatefulSessionComponent) componentView.getComponent()[ CD ]
Line_48 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_114 $$ writeMethodInvocationResponse(channelAssociation, invocationId, result, attachments, invokedMethod, componentView)[ FD ]
Line_15 $$ final String appName-->Line_118 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_22 $$ distinctName = (String) unmarshaller.readObject()-->Line_29 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_89 $$ EjbLogger.EJB3_INVOCATION_LOGGER.debugf("Cannot handle method invocation: %s on bean: %s due to EJB component unavailability exception. Returning a no such EJB available message back to client", invokedMethod, beanName)[ FD ]
Line_22 $$ distinctName = (String) unmarshaller.readObject()-->Line_90 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_4 $$ final short invocationId = input.readShort()-->Line_69 $$ MethodInvocationMessageHandler.this.writeException(channelAssociation, MethodInvocationMessageHandler.this.marshallerFactory, invocationId, e, null)[ FD ]
Line_17 $$ final String distinctName-->Line_29 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_37 $$ final EJBLocator<?> locator-->Line_39 $$ locator = (EJBLocator<?>) unmarshaller.readObject()[ FD ]
Line_20 $$ appName = (String) unmarshaller.readObject()-->Line_45 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_14 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_20 $$ appName = (String) unmarshaller.readObject()[ FD ]
Line_44 $$ if (!ejbDeploymentInformation.isRemoteView(viewClassName)) -->Line_46 $$ return[ CD ]
Line_33 $$ Runnable runnable = null-->Line_73 $$ runnable = new Runnable() [ FD ]
Line_23 $$ beanName = (String) unmarshaller.readObject()-->Line_96 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_15 $$ final String appName-->Line_90 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_103 $$ Affinity weakAffinity = null-->Line_112 $$ attachments.put(Affinity.WEAK_AFFINITY_CONTEXT_KEY, weakAffinity)[ FD ]
Line_9 $$ methodParamTypes = new String[0]-->Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)[ FD ]
Line_4 $$ final short invocationId = input.readShort()-->Line_85 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_3 $$ final DataInputStream input = new DataInputStream(inputStream)-->Line_14 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)[ FD ]
Line_14 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_39 $$ locator = (EJBLocator<?>) unmarshaller.readObject()[ FD ]
Line_126 $$ if (executorService != null) -->Line_129 $$ runnable.run()[ CD ]
Line_85 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)-->Line_114 $$ writeMethodInvocationResponse(channelAssociation, invocationId, result, attachments, invokedMethod, componentView)[ FD ]
Line_16 $$ final String moduleName-->Line_96 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_14 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)[ CD ]
Line_18 $$ final String beanName-->Line_23 $$ beanName = (String) unmarshaller.readObject()[ FD ]
Line_17 $$ final String distinctName-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_22 $$ distinctName = (String) unmarshaller.readObject()-->Line_45 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_6 $$ String[] methodParamTypes = null[ CD ]
Line_18 $$ final String beanName-->Line_45 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_73 $$ runnable = new Runnable() -->Line_82 $$ Object result = null[ CD ]
Line_50 $$ if (invokedMethod == null) -->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ CD ]
Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_96 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_48 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)[ FD ]
Line_21 $$ moduleName = (String) unmarshaller.readObject()-->Line_45 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_5 $$ final String methodName = input.readUTF()[ CD ]
Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)-->Line_48 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)[ FD ]
Line_48 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)-->Line_85 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_6 $$ String[] methodParamTypes = null-->Line_11 $$ methodParamTypes = signature.split(String.valueOf(METHOD_PARAM_TYPE_SEPARATOR))[ FD ]
Line_73 $$ runnable = new Runnable() -->Line_75 $$ if (componentView.isAsynchronous(invokedMethod)) [ CD ]
Line_23 $$ beanName = (String) unmarshaller.readObject()-->Line_90 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_16 $$ final String moduleName-->Line_118 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_50 $$ if (invokedMethod == null) [ FD ]
Line_7 $$ final String signature = input.readUTF()-->Line_8 $$ if (signature.isEmpty()) [ FD ]
Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_114 $$ writeMethodInvocationResponse(channelAssociation, invocationId, result, attachments, invokedMethod, componentView)[ FD ]
Line_88 $$ if (throwable instanceof EJBComponentUnavailableException) -->Line_92 $$ MethodInvocationMessageHandler.this.writeException(channelAssociation, MethodInvocationMessageHandler.this.marshallerFactory, invocationId, throwable, attachments)[ CD ]
Line_67 $$ attachments = this.readAttachments(unmarshaller)-->Line_85 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_111 $$ if (weakAffinity != null) -->Line_112 $$ attachments.put(Affinity.WEAK_AFFINITY_CONTEXT_KEY, weakAffinity)[ CD ]
Line_6 $$ String[] methodParamTypes = null-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_114 $$ writeMethodInvocationResponse(channelAssociation, invocationId, result, attachments, invokedMethod, componentView)[ FD ]
Line_50 $$ if (invokedMethod == null) -->Line_52 $$ return[ CD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_126 $$ if (executorService != null) [ CD ]
Line_18 $$ final String beanName-->Line_89 $$ EjbLogger.EJB3_INVOCATION_LOGGER.debugf("Cannot handle method invocation: %s on bean: %s due to EJB component unavailability exception. Returning a no such EJB available message back to client", invokedMethod, beanName)[ FD ]
Line_82 $$ Object result = null-->Line_114 $$ writeMethodInvocationResponse(channelAssociation, invocationId, result, attachments, invokedMethod, componentView)[ FD ]
Line_21 $$ moduleName = (String) unmarshaller.readObject()-->Line_90 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_22 $$ distinctName = (String) unmarshaller.readObject()-->Line_118 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)-->Line_28 $$ if (ejbDeploymentInformation == null) [ FD ]
Line_20 $$ appName = (String) unmarshaller.readObject()-->Line_96 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_15 $$ final String appName[ CD ]
Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_95 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_33 $$ Runnable runnable = null-->Line_129 $$ runnable.run()[ FD ]
Line_23 $$ beanName = (String) unmarshaller.readObject()-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_20 $$ appName = (String) unmarshaller.readObject()-->Line_95 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_16 $$ final String moduleName-->Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_67 $$ attachments = this.readAttachments(unmarshaller)-->Line_92 $$ MethodInvocationMessageHandler.this.writeException(channelAssociation, MethodInvocationMessageHandler.this.marshallerFactory, invocationId, throwable, attachments)[ FD ]
Line_14 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_22 $$ distinctName = (String) unmarshaller.readObject()[ FD ]
Line_104 $$ if (locator instanceof StatefulEJBLocator && componentView.getComponent() instanceof StatefulSessionComponent) -->Line_107 $$ if (componentView.getComponent() instanceof StatelessSessionComponent) [ CD ]
Line_18 $$ final String beanName-->Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)-->Line_35 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(ejbDeploymentInformation.getDeploymentClassLoader())[ FD ]
Line_15 $$ final String appName-->Line_45 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_43 $$ final String viewClassName = locator.getViewType().getName()-->Line_90 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_37 $$ final EJBLocator<?> locator-->Line_43 $$ final String viewClassName = locator.getViewType().getName()[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_90 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_67 $$ attachments = this.readAttachments(unmarshaller)-->Line_112 $$ attachments.put(Affinity.WEAK_AFFINITY_CONTEXT_KEY, weakAffinity)[ FD ]
Line_20 $$ appName = (String) unmarshaller.readObject()-->Line_118 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_39 $$ locator = (EJBLocator<?>) unmarshaller.readObject()-->Line_85 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_20 $$ appName = (String) unmarshaller.readObject()-->Line_90 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_23 $$ beanName = (String) unmarshaller.readObject()-->Line_29 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_6 $$ String[] methodParamTypes = null-->Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)[ FD ]
Line_107 $$ if (componentView.getComponent() instanceof StatelessSessionComponent) -->Line_109 $$ weakAffinity = statelessSessionComponent.getWeakAffinity()[ CD ]
Line_18 $$ final String beanName-->Line_118 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)-->Line_75 $$ if (componentView.isAsynchronous(invokedMethod)) [ FD ]
Line_16 $$ final String moduleName-->Line_21 $$ moduleName = (String) unmarshaller.readObject()[ FD ]
Line_22 $$ distinctName = (String) unmarshaller.readObject()-->Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_14 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)-->Line_67 $$ attachments = this.readAttachments(unmarshaller)[ FD ]
Line_109 $$ weakAffinity = statelessSessionComponent.getWeakAffinity()-->Line_111 $$ if (weakAffinity != null) [ FD ]
Line_109 $$ weakAffinity = statelessSessionComponent.getWeakAffinity()-->Line_112 $$ attachments.put(Affinity.WEAK_AFFINITY_CONTEXT_KEY, weakAffinity)[ FD ]
Line_43 $$ final String viewClassName = locator.getViewType().getName()-->Line_44 $$ if (!ejbDeploymentInformation.isRemoteView(viewClassName)) [ FD ]
Line_18 $$ final String beanName-->Line_29 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_22 $$ distinctName = (String) unmarshaller.readObject()-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_13 $$ final ClassLoaderSwitchingClassResolver classResolver = new ClassLoaderSwitchingClassResolver(Thread.currentThread().getContextClassLoader())-->Line_14 $$ final Unmarshaller unmarshaller = this.prepareForUnMarshalling(this.marshallerFactory, classResolver, input)[ FD ]
Line_11 $$ methodParamTypes = signature.split(String.valueOf(METHOD_PARAM_TYPE_SEPARATOR))-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_103 $$ Affinity weakAffinity = null-->Line_109 $$ weakAffinity = statelessSessionComponent.getWeakAffinity()[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ CD ]
Line_16 $$ final String moduleName-->Line_29 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_65 $$ final Map<String, Object> attachments-->Line_85 $$ result = invokeMethod(invocationId, componentView, invokedMethod, methodParams, locator, attachments)[ FD ]
Line_23 $$ beanName = (String) unmarshaller.readObject()-->Line_118 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_4 $$ final short invocationId = input.readShort()-->Line_77 $$ MethodInvocationMessageHandler.this.writeAsyncMethodNotification(channelAssociation, invocationId)[ FD ]
Line_5 $$ final String methodName = input.readUTF()-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_117 $$ if (!isAsyncVoid)-->Line_118 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ CD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_29 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_126 $$ if (executorService != null) -->Line_127 $$ executorService.submit(runnable)[ CD ]
Line_18 $$ final String beanName-->Line_96 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_28 $$ if (ejbDeploymentInformation == null) -->Line_29 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ CD ]
Line_20 $$ appName = (String) unmarshaller.readObject()-->Line_29 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_116 $$ boolean isAsyncVoid = componentView.isAsynchronous(invokedMethod) && invokedMethod.getReturnType().equals(Void.TYPE)-->Line_117 $$ if (!isAsyncVoid)[ FD ]
Line_39 $$ locator = (EJBLocator<?>) unmarshaller.readObject()-->Line_43 $$ final String viewClassName = locator.getViewType().getName()[ FD ]
Line_22 $$ distinctName = (String) unmarshaller.readObject()-->Line_95 $$ EjbLogger.REMOTE_LOGGER.errorInvokingMethod(throwable, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_55 $$ if (methodParamTypes.length > 0) -->Line_56 $$ for (int i = 0; i < methodParamTypes.length; i++) [ CD ]
Line_8 $$ if (signature.isEmpty()) -->Line_9 $$ methodParamTypes = new String[0][ CD ]
Line_106 $$ weakAffinity = MethodInvocationMessageHandler.this.getWeakAffinity(statefulSessionComponent, (StatefulEJBLocator<?>) locator)-->Line_112 $$ attachments.put(Affinity.WEAK_AFFINITY_CONTEXT_KEY, weakAffinity)[ FD ]
Line_4 $$ final short invocationId = input.readShort()-->Line_92 $$ MethodInvocationMessageHandler.this.writeException(channelAssociation, MethodInvocationMessageHandler.this.marshallerFactory, invocationId, throwable, attachments)[ FD ]
Line_15 $$ final String appName-->Line_96 $$ EjbLogger.REMOTE_LOGGER.couldNotWriteMethodInvocation(ioe, invokedMethod, beanName, appName, moduleName, distinctName)[ FD ]
Line_3 $$ final DataInputStream input = new DataInputStream(inputStream)-->Line_4 $$ final short invocationId = input.readShort()[ FD ]
Line_5 $$ final String methodName = input.readUTF()-->Line_49 $$ final Method invokedMethod = this.findMethod(componentView, methodName, methodParamTypes)[ FD ]
Line_21 $$ moduleName = (String) unmarshaller.readObject()-->Line_29 $$ this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, null)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_18 $$ final String beanName[ CD ]
Line_17 $$ final String distinctName-->Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_73 $$ runnable = new Runnable() -->Line_83 $$ SecurityActions.remotingContextSetConnection(channelAssociation.getChannel().getConnection())[ CD ]
Line_4 $$ final short invocationId = input.readShort()-->Line_90 $$ MethodInvocationMessageHandler.this.writeNoSuchEJBFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName)[ FD ]
Line_23 $$ beanName = (String) unmarshaller.readObject()-->Line_27 $$ final EjbDeploymentInformation ejbDeploymentInformation = this.findEJB(appName, moduleName, distinctName, beanName)[ FD ]
Line_17 $$ final String distinctName-->Line_22 $$ distinctName = (String) unmarshaller.readObject()[ FD ]
Line_103 $$ Affinity weakAffinity = null-->Line_111 $$ if (weakAffinity != null) [ FD ]
Line_15 $$ final String appName-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_43 $$ final String viewClassName = locator.getViewType().getName()-->Line_48 $$ final ComponentView componentView = ejbDeploymentInformation.getView(viewClassName)[ FD ]
Line_67 $$ attachments = this.readAttachments(unmarshaller)-->Line_114 $$ writeMethodInvocationResponse(channelAssociation, invocationId, result, attachments, invokedMethod, componentView)[ FD ]
Line_18 $$ final String beanName-->Line_51 $$ this.writeNoSuchEJBMethodFailureMessage(channelAssociation, invocationId, appName, moduleName, distinctName, beanName, viewClassName, methodName, methodParamTypes)[ FD ]
Line_104 $$ if (locator instanceof StatefulEJBLocator && componentView.getComponent() instanceof StatefulSessionComponent) -->Line_106 $$ weakAffinity = MethodInvocationMessageHandler.this.getWeakAffinity(statefulSessionComponent, (StatefulEJBLocator<?>) locator)[ CD ]
