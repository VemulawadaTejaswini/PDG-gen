Line_4 $$ Class<?> returnClass = proxyMethod.getReturnType()-->Line_27 $$ if (returnClass != void.class) [ FD ]
Line_27 $$ if (returnClass != void.class) -->Line_28 $$ if (returnClass.isPrimitive()) [ CD ]
Line_15 $$ Type parameterType = Type.getType(parameterClass)-->Line_18 $$ _methodNodeGenerator.checkCast(parameterType)[ FD ]
Line_22 $$ if (declaringClass.isInterface()) -->Line_23 $$ _methodNodeGenerator.invokeInterface(Type.getInternalName(declaringClass), proxyMethod)[ CD ]
Line_4 $$ Class<?> returnClass = proxyMethod.getReturnType()-->Line_5 $$ if (returnClass != void.class) [ FD ]
Line_2 $$ public void generateCase(int key, Label end) -->Line_12 $$ _methodNodeGenerator.loadLocal(_typedTargetIndex)[ CD ]
Line_13 $$ for (Class<?> parameterClass : proxyMethod.getParameterTypes()) -->Line_15 $$ Type parameterType = Type.getType(parameterClass)[ FD ]
Line_2 $$ public void generateCase(int key, Label end) -->Line_22 $$ if (declaringClass.isInterface()) [ CD ]
Line_5 $$ if (returnClass != void.class) -->Line_6 $$ _methodNodeGenerator.loadThis()[ CD ]
Line_2 $$ public void generateCase(int key, Label end) -->Line_27 $$ if (returnClass != void.class) [ CD ]
Line_4 $$ Class<?> returnClass = proxyMethod.getReturnType()-->Line_30 $$ if (Serializable.class.isAssignableFrom(returnClass)) [ FD ]
Line_30 $$ if (Serializable.class.isAssignableFrom(returnClass)) -->Line_31 $$ _methodNodeGenerator.checkCast(_SERIALIZABLE_TYPE)[ CD ]
Line_15 $$ Type parameterType = Type.getType(parameterClass)-->Line_16 $$ deserializerRead(_methodNodeGenerator, parameterType)[ FD ]
Line_4 $$ Class<?> returnClass = proxyMethod.getReturnType()-->Line_29 $$ _methodNodeGenerator.box(Type.getType(returnClass))[ FD ]
Line_21 $$ Class<?> declaringClass = proxyMethod.getDeclaringClass()-->Line_23 $$ _methodNodeGenerator.invokeInterface(Type.getInternalName(declaringClass), proxyMethod)[ FD ]
Line_22 $$ if (declaringClass.isInterface()) -->Line_25 $$ _methodNodeGenerator.invokeVirtual(Type.getInternalName(declaringClass), proxyMethod)[ CD ]
Line_3 $$ Method proxyMethod = _proxyMethods.get(key)-->Line_21 $$ Class<?> declaringClass = proxyMethod.getDeclaringClass()[ FD ]
Line_3 $$ Method proxyMethod = _proxyMethods.get(key)-->Line_4 $$ Class<?> returnClass = proxyMethod.getReturnType()[ FD ]
Line_27 $$ if (returnClass != void.class) -->Line_34 $$ _methodNodeGenerator.invokeSpecial(_owner, "_sendResponse", Type.VOID_TYPE, _REGISTRATION_REFERENCE_TYPE, _DATAGRAM_TYPE, _RPC_RESPONSE_TYPE)[ CD ]
Line_13 $$ for (Class<?> parameterClass : proxyMethod.getParameterTypes()) -->Line_17 $$ if (!parameterClass.isPrimitive() && (parameterClass != Object.class) && (parameterClass != String.class)) [ FD ]
Line_3 $$ Method proxyMethod = _proxyMethods.get(key)-->Line_23 $$ _methodNodeGenerator.invokeInterface(Type.getInternalName(declaringClass), proxyMethod)[ FD ]
Line_28 $$ if (returnClass.isPrimitive()) -->Line_30 $$ if (Serializable.class.isAssignableFrom(returnClass)) [ CD ]
Line_3 $$ Method proxyMethod = _proxyMethods.get(key)-->Line_25 $$ _methodNodeGenerator.invokeVirtual(Type.getInternalName(declaringClass), proxyMethod)[ FD ]
Line_2 $$ public void generateCase(int key, Label end) -->Line_36 $$ _methodNodeGenerator.goTo(end)[ CD ]
Line_2 $$ public void generateCase(int key, Label end) -->Line_36 $$ _methodNodeGenerator.goTo(end)[ FD ]
Line_2 $$ public void generateCase(int key, Label end) -->Line_21 $$ Class<?> declaringClass = proxyMethod.getDeclaringClass()[ CD ]
Line_5 $$ if (returnClass != void.class) -->Line_7 $$ _methodNodeGenerator.loadArg(0)[ CD ]
Line_21 $$ Class<?> declaringClass = proxyMethod.getDeclaringClass()-->Line_22 $$ if (declaringClass.isInterface()) [ FD ]
Line_28 $$ if (returnClass.isPrimitive()) -->Line_29 $$ _methodNodeGenerator.box(Type.getType(returnClass))[ CD ]
Line_5 $$ if (returnClass != void.class) -->Line_10 $$ _methodNodeGenerator.dup()[ CD ]
Line_17 $$ if (!parameterClass.isPrimitive() && (parameterClass != Object.class) && (parameterClass != String.class)) -->Line_18 $$ _methodNodeGenerator.checkCast(parameterType)[ CD ]
Line_2 $$ public void generateCase(int key, Label end) -->Line_4 $$ Class<?> returnClass = proxyMethod.getReturnType()[ CD ]
Line_21 $$ Class<?> declaringClass = proxyMethod.getDeclaringClass()-->Line_25 $$ _methodNodeGenerator.invokeVirtual(Type.getInternalName(declaringClass), proxyMethod)[ FD ]
Line_27 $$ if (returnClass != void.class) -->Line_33 $$ _methodNodeGenerator.invokeSpecial(_RPC_RESPONSE_TYPE.getInternalName(), "<init>", Type.VOID_TYPE, _SERIALIZABLE_TYPE)[ CD ]
Line_3 $$ Method proxyMethod = _proxyMethods.get(key)-->Line_13 $$ for (Class<?> parameterClass : proxyMethod.getParameterTypes()) [ FD ]
Line_4 $$ Class<?> returnClass = proxyMethod.getReturnType()-->Line_28 $$ if (returnClass.isPrimitive()) [ FD ]
Line_5 $$ if (returnClass != void.class) -->Line_9 $$ _methodNodeGenerator.newInstance(_RPC_RESPONSE_TYPE)[ CD ]
Line_5 $$ if (returnClass != void.class) -->Line_8 $$ _methodNodeGenerator.loadArg(1)[ CD ]
Line_2 $$ public void generateCase(int key, Label end) -->Line_5 $$ if (returnClass != void.class) [ CD ]
Line_2 $$ public void generateCase(int key, Label end) -->Line_3 $$ Method proxyMethod = _proxyMethods.get(key)[ CD ]
Line_2 $$ public void generateCase(int key, Label end) -->Line_3 $$ Method proxyMethod = _proxyMethods.get(key)[ FD ]
