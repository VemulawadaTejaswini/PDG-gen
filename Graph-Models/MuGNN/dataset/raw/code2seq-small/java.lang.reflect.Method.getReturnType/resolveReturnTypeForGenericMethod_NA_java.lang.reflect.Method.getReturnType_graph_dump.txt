Line_28 $$ ParameterizedType parameterizedType = (ParameterizedType) currentMethodArgumentType-->Line_29 $$ Type[] actualTypeArguments = parameterizedType.getActualTypeArguments()[ FD ]
Line_11 $$ if (args.length < methodArgumentTypes.length) -->Line_12 $$ return null[ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_14 $$ boolean locallyDeclaredTypeVariableMatchesReturnType = false[ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_6 $$ Type genericReturnType = method.getGenericReturnType()[ FD ]
Line_35 $$ if (arg instanceof String && classLoader != null) -->Line_42 $$ return method.getReturnType()[ CD ]
Line_23 $$ Type currentMethodArgumentType = methodArgumentTypes[i]-->Line_24 $$ if (currentMethodArgumentType.equals(genericReturnType)) [ FD ]
Line_23 $$ Type currentMethodArgumentType = methodArgumentTypes[i]-->Line_27 $$ if (currentMethodArgumentType instanceof ParameterizedType) [ FD ]
Line_14 $$ boolean locallyDeclaredTypeVariableMatchesReturnType = false-->Line_17 $$ locallyDeclaredTypeVariableMatchesReturnType = true[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_4 $$ Assert.notNull(args, "Argument array must not be null")[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_4 $$ Assert.notNull(args, "Argument array must not be null")[ CD ]
Line_15 $$ for (TypeVariable<Method> currentTypeVariable : declaredTypeVariables) -->Line_16 $$ if (currentTypeVariable.equals(genericReturnType)) [ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_9 $$ return method.getReturnType()[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_21 $$ if (locallyDeclaredTypeVariableMatchesReturnType) [ CD ]
Line_33 $$ if (arg instanceof Class) -->Line_34 $$ return (Class<?>) arg[ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_5 $$ TypeVariable<Method>[] declaredTypeVariables = method.getTypeParameters()[ CD ]
Line_33 $$ if (arg instanceof Class) -->Line_35 $$ if (arg instanceof String && classLoader != null) [ CD ]
Line_6 $$ Type genericReturnType = method.getGenericReturnType()-->Line_16 $$ if (currentTypeVariable.equals(genericReturnType)) [ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_6 $$ Type genericReturnType = method.getGenericReturnType()[ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_49 $$ return method.getReturnType()[ FD ]
Line_27 $$ if (currentMethodArgumentType instanceof ParameterizedType) -->Line_29 $$ Type[] actualTypeArguments = parameterizedType.getActualTypeArguments()[ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_3 $$ Assert.notNull(method, "Method must not be null")[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_37 $$ return classLoader.loadClass((String) arg)[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_7 $$ Type[] methodArgumentTypes = method.getGenericParameterTypes()[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_7 $$ Type[] methodArgumentTypes = method.getGenericParameterTypes()[ CD ]
Line_6 $$ Type genericReturnType = method.getGenericReturnType()-->Line_31 $$ if (typeArg.equals(genericReturnType)) [ FD ]
Line_24 $$ if (currentMethodArgumentType.equals(genericReturnType)) -->Line_25 $$ return args[i].getClass()[ CD ]
Line_31 $$ if (typeArg.equals(genericReturnType)) -->Line_32 $$ Object arg = args[i][ CD ]
Line_30 $$ for (Type typeArg : actualTypeArguments) -->Line_31 $$ if (typeArg.equals(genericReturnType)) [ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_11 $$ if (args.length < methodArgumentTypes.length) [ CD ]
Line_21 $$ if (locallyDeclaredTypeVariableMatchesReturnType) -->Line_22 $$ for (int i = 0; i < methodArgumentTypes.length; i++) [ CD ]
Line_8 $$ if (declaredTypeVariables.length == 0) -->Line_9 $$ return method.getReturnType()[ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_8 $$ if (declaredTypeVariables.length == 0) [ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_5 $$ TypeVariable<Method>[] declaredTypeVariables = method.getTypeParameters()[ FD ]
Line_22 $$ for (int i = 0; i < methodArgumentTypes.length; i++) -->Line_24 $$ if (currentMethodArgumentType.equals(genericReturnType)) [ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_49 $$ return method.getReturnType()[ CD ]
Line_32 $$ Object arg = args[i]-->Line_33 $$ if (arg instanceof Class) [ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_3 $$ Assert.notNull(method, "Method must not be null")[ CD ]
Line_27 $$ if (currentMethodArgumentType instanceof ParameterizedType) -->Line_28 $$ ParameterizedType parameterizedType = (ParameterizedType) currentMethodArgumentType[ CD ]
Line_31 $$ if (typeArg.equals(genericReturnType)) -->Line_33 $$ if (arg instanceof Class) [ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForGenericMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_42 $$ return method.getReturnType()[ FD ]
Line_16 $$ if (currentTypeVariable.equals(genericReturnType)) -->Line_17 $$ locallyDeclaredTypeVariableMatchesReturnType = true[ CD ]
Line_22 $$ for (int i = 0; i < methodArgumentTypes.length; i++) -->Line_27 $$ if (currentMethodArgumentType instanceof ParameterizedType) [ CD ]
Line_22 $$ for (int i = 0; i < methodArgumentTypes.length; i++) -->Line_23 $$ Type currentMethodArgumentType = methodArgumentTypes[i][ CD ]
Line_6 $$ Type genericReturnType = method.getGenericReturnType()-->Line_24 $$ if (currentMethodArgumentType.equals(genericReturnType)) [ FD ]
