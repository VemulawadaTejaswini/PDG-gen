Line_52 $$ if (targetClass == returnType) -->Line_53 $$ if (logger.isDebugEnabled()) [ CD ]
Line_35 $$ if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) -->Line_39 $$ int index = this.fixedInterceptorMap.get(key)[ CD ]
Line_57 $$ if (returnType.isPrimitive() || !returnType.isAssignableFrom(targetClass)) -->Line_61 $$ return DISPATCH_TARGET[ CD ]
Line_57 $$ if (returnType.isPrimitive() || !returnType.isAssignableFrom(targetClass)) -->Line_66 $$ return INVOKE_TARGET[ CD ]
Line_42 $$ if (logger.isDebugEnabled()) -->Line_43 $$ logger.debug("Unable to apply any optimisations to advised method: " + method)[ CD ]
Line_26 $$ boolean isFrozen = this.advised.isFrozen()-->Line_27 $$ if (haveAdvice || !isFrozen) [ FD ]
Line_2 $$ public int accept(Method method) -->Line_17 $$ if (AopUtils.isHashCodeMethod(method)) [ FD ]
Line_3 $$ if (AopUtils.isFinalizeMethod(method)) -->Line_5 $$ return NO_OVERRIDE[ CD ]
Line_22 $$ List<?> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)-->Line_23 $$ boolean haveAdvice = !chain.isEmpty()[ FD ]
Line_24 $$ boolean exposeProxy = this.advised.isExposeProxy()-->Line_48 $$ if (exposeProxy || !isStatic) [ FD ]
Line_51 $$ Class<?> returnType = method.getReturnType()-->Line_52 $$ if (targetClass == returnType) [ FD ]
Line_13 $$ if (AopUtils.isEqualsMethod(method)) -->Line_14 $$ logger.debug("Found 'equals' method: " + method)[ CD ]
Line_2 $$ public int accept(Method method) -->Line_21 $$ Class<?> targetClass = this.advised.getTargetClass()[ CD ]
Line_2 $$ public int accept(Method method) -->Line_34 $$ String key = method.toString()[ FD ]
Line_35 $$ if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) -->Line_36 $$ if (logger.isDebugEnabled()) [ CD ]
Line_63 $$ if (logger.isDebugEnabled()) -->Line_64 $$ logger.debug("Method " + method + "has return type that is assignable from the target type (may return this) - " + "using INVOKE_TARGET")[ CD ]
Line_21 $$ Class<?> targetClass = this.advised.getTargetClass()-->Line_57 $$ if (returnType.isPrimitive() || !returnType.isAssignableFrom(targetClass)) [ FD ]
Line_27 $$ if (haveAdvice || !isFrozen) -->Line_28 $$ if (exposeProxy) [ CD ]
Line_2 $$ public int accept(Method method) -->Line_22 $$ List<?> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)[ CD ]
Line_21 $$ Class<?> targetClass = this.advised.getTargetClass()-->Line_22 $$ List<?> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)[ FD ]
Line_2 $$ public int accept(Method method) -->Line_23 $$ boolean haveAdvice = !chain.isEmpty()[ CD ]
Line_2 $$ public int accept(Method method) -->Line_17 $$ if (AopUtils.isHashCodeMethod(method)) [ CD ]
Line_2 $$ public int accept(Method method) -->Line_26 $$ boolean isFrozen = this.advised.isFrozen()[ CD ]
Line_8 $$ if (logger.isDebugEnabled()) -->Line_9 $$ logger.debug("Method is declared on Advised interface: " + method)[ CD ]
Line_13 $$ if (AopUtils.isEqualsMethod(method)) -->Line_15 $$ return INVOKE_EQUALS[ CD ]
Line_35 $$ if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) -->Line_45 $$ return AOP_PROXY[ CD ]
Line_17 $$ if (AopUtils.isHashCodeMethod(method)) -->Line_19 $$ return INVOKE_HASHCODE[ CD ]
Line_7 $$ if (!this.advised.isOpaque() && method.getDeclaringClass().isInterface() && method.getDeclaringClass().isAssignableFrom(Advised.class)) -->Line_8 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ public int accept(Method method) -->Line_24 $$ boolean exposeProxy = this.advised.isExposeProxy()[ CD ]
Line_28 $$ if (exposeProxy) -->Line_29 $$ if (logger.isDebugEnabled()) [ CD ]
Line_29 $$ if (logger.isDebugEnabled()) -->Line_30 $$ logger.debug("Must expose proxy on advised method: " + method)[ CD ]
Line_34 $$ String key = method.toString()-->Line_35 $$ if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) [ FD ]
Line_52 $$ if (targetClass == returnType) -->Line_57 $$ if (returnType.isPrimitive() || !returnType.isAssignableFrom(targetClass)) [ CD ]
Line_2 $$ public int accept(Method method) -->Line_3 $$ if (AopUtils.isFinalizeMethod(method)) [ CD ]
Line_3 $$ if (AopUtils.isFinalizeMethod(method)) -->Line_4 $$ logger.debug("Found finalize() method - using NO_OVERRIDE")[ CD ]
Line_57 $$ if (returnType.isPrimitive() || !returnType.isAssignableFrom(targetClass)) -->Line_58 $$ if (logger.isDebugEnabled()) [ CD ]
Line_58 $$ if (logger.isDebugEnabled()) -->Line_59 $$ logger.debug("Method " + method + " has return type that ensures this cannot be returned- using DISPATCH_TARGET")[ CD ]
Line_2 $$ public int accept(Method method) -->Line_7 $$ if (!this.advised.isOpaque() && method.getDeclaringClass().isInterface() && method.getDeclaringClass().isAssignableFrom(Advised.class)) [ CD ]
Line_17 $$ if (AopUtils.isHashCodeMethod(method)) -->Line_18 $$ logger.debug("Found 'hashCode' method: " + method)[ CD ]
Line_2 $$ public int accept(Method method) -->Line_22 $$ List<?> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)[ FD ]
Line_35 $$ if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) -->Line_40 $$ return (index + this.fixedInterceptorOffset)[ CD ]
Line_2 $$ public int accept(Method method) -->Line_7 $$ if (!this.advised.isOpaque() && method.getDeclaringClass().isInterface() && method.getDeclaringClass().isAssignableFrom(Advised.class)) [ FD ]
Line_57 $$ if (returnType.isPrimitive() || !returnType.isAssignableFrom(targetClass)) -->Line_63 $$ if (logger.isDebugEnabled()) [ CD ]
Line_48 $$ if (exposeProxy || !isStatic) -->Line_49 $$ return INVOKE_TARGET[ CD ]
Line_2 $$ public int accept(Method method) -->Line_51 $$ Class<?> returnType = method.getReturnType()[ FD ]
Line_2 $$ public int accept(Method method) -->Line_27 $$ if (haveAdvice || !isFrozen) [ CD ]
Line_25 $$ boolean isStatic = this.advised.getTargetSource().isStatic()-->Line_48 $$ if (exposeProxy || !isStatic) [ FD ]
Line_21 $$ Class<?> targetClass = this.advised.getTargetClass()-->Line_52 $$ if (targetClass == returnType) [ FD ]
Line_27 $$ if (haveAdvice || !isFrozen) -->Line_48 $$ if (exposeProxy || !isStatic) [ CD ]
Line_53 $$ if (logger.isDebugEnabled()) -->Line_54 $$ logger.debug("Method " + method + "has return type same as target type (may return this) - using INVOKE_TARGET")[ CD ]
Line_2 $$ public int accept(Method method) -->Line_13 $$ if (AopUtils.isEqualsMethod(method)) [ FD ]
Line_35 $$ if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) -->Line_42 $$ if (logger.isDebugEnabled()) [ CD ]
Line_28 $$ if (exposeProxy) -->Line_32 $$ return AOP_PROXY[ CD ]
Line_7 $$ if (!this.advised.isOpaque() && method.getDeclaringClass().isInterface() && method.getDeclaringClass().isAssignableFrom(Advised.class)) -->Line_11 $$ return DISPATCH_ADVISED[ CD ]
Line_34 $$ String key = method.toString()-->Line_39 $$ int index = this.fixedInterceptorMap.get(key)[ FD ]
Line_27 $$ if (haveAdvice || !isFrozen) -->Line_35 $$ if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) [ CD ]
Line_27 $$ if (haveAdvice || !isFrozen) -->Line_52 $$ if (targetClass == returnType) [ CD ]
Line_52 $$ if (targetClass == returnType) -->Line_56 $$ return INVOKE_TARGET[ CD ]
Line_27 $$ if (haveAdvice || !isFrozen) -->Line_34 $$ String key = method.toString()[ CD ]
Line_2 $$ public int accept(Method method) -->Line_3 $$ if (AopUtils.isFinalizeMethod(method)) [ FD ]
Line_36 $$ if (logger.isDebugEnabled()) -->Line_37 $$ logger.debug("Method has advice and optimisations are enabled: " + method)[ CD ]
Line_23 $$ boolean haveAdvice = !chain.isEmpty()-->Line_27 $$ if (haveAdvice || !isFrozen) [ FD ]
Line_2 $$ public int accept(Method method) -->Line_13 $$ if (AopUtils.isEqualsMethod(method)) [ CD ]
Line_51 $$ Class<?> returnType = method.getReturnType()-->Line_57 $$ if (returnType.isPrimitive() || !returnType.isAssignableFrom(targetClass)) [ FD ]
Line_27 $$ if (haveAdvice || !isFrozen) -->Line_51 $$ Class<?> returnType = method.getReturnType()[ CD ]
Line_2 $$ public int accept(Method method) -->Line_25 $$ boolean isStatic = this.advised.getTargetSource().isStatic()[ CD ]
