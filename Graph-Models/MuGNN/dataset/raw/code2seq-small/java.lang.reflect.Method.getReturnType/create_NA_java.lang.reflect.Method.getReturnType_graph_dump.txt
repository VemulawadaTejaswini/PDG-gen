Line_2 $$ public static <R, T> RuleSourceBackedRuleAction<R, T> create(ModelType<T> subjectType, R ruleSourceInstance) -->Line_10 $$ if (mutateMethods.size() == 0) [ CD ]
Line_4 $$ List<Method> mutateMethods = JavaReflectionUtil.findAllMethods(ruleSourceType.getConcreteClass(), new Spec<Method>() -->Line_29 $$ return new RuleSourceBackedRuleAction<R, T>(ruleSourceInstance, new JavaMethod<R, T>(ruleSourceType.getConcreteClass(), subjectType.getConcreteClass(), mutateMethods.get(0)))[ FD ]
Line_4 $$ List<Method> mutateMethods = JavaReflectionUtil.findAllMethods(ruleSourceType.getConcreteClass(), new Spec<Method>() -->Line_13 $$ if (mutateMethods.size() > 1) [ FD ]
Line_3 $$ ModelType<R> ruleSourceType = ModelType.typeOf(ruleSourceInstance)-->Line_29 $$ return new RuleSourceBackedRuleAction<R, T>(ruleSourceInstance, new JavaMethod<R, T>(ruleSourceType.getConcreteClass(), subjectType.getConcreteClass(), mutateMethods.get(0)))[ FD ]
Line_3 $$ ModelType<R> ruleSourceType = ModelType.typeOf(ruleSourceInstance)-->Line_4 $$ List<Method> mutateMethods = JavaReflectionUtil.findAllMethods(ruleSourceType.getConcreteClass(), new Spec<Method>() [ FD ]
Line_2 $$ public static <R, T> RuleSourceBackedRuleAction<R, T> create(ModelType<T> subjectType, R ruleSourceInstance) -->Line_29 $$ return new RuleSourceBackedRuleAction<R, T>(ruleSourceInstance, new JavaMethod<R, T>(ruleSourceType.getConcreteClass(), subjectType.getConcreteClass(), mutateMethods.get(0)))[ FD ]
Line_2 $$ public static <R, T> RuleSourceBackedRuleAction<R, T> create(ModelType<T> subjectType, R ruleSourceInstance) -->Line_26 $$ if (problems.hasProblems()) [ CD ]
Line_2 $$ public static <R, T> RuleSourceBackedRuleAction<R, T> create(ModelType<T> subjectType, R ruleSourceInstance) -->Line_21 $$ if (parameterTypes.length == 0 || !subjectType.isAssignableFrom(ModelType.of(parameterTypes[0]))) [ FD ]
Line_4 $$ List<Method> mutateMethods = JavaReflectionUtil.findAllMethods(ruleSourceType.getConcreteClass(), new Spec<Method>() -->Line_10 $$ if (mutateMethods.size() == 0) [ FD ]
Line_2 $$ public static <R, T> RuleSourceBackedRuleAction<R, T> create(ModelType<T> subjectType, R ruleSourceInstance) -->Line_22 $$ problems.add(ruleMethod, String.format("First parameter of a rule method must be of type %s", subjectType))[ FD ]
Line_2 $$ public static <R, T> RuleSourceBackedRuleAction<R, T> create(ModelType<T> subjectType, R ruleSourceInstance) -->Line_3 $$ ModelType<R> ruleSourceType = ModelType.typeOf(ruleSourceInstance)[ CD ]
Line_17 $$ if (ruleMethod.getReturnType() != Void.TYPE) -->Line_18 $$ problems.add(ruleMethod, "A rule method must return void")[ CD ]
Line_13 $$ if (mutateMethods.size() > 1) -->Line_14 $$ problems.add("More than one method is annotated with @" + Mutate.class.getName())[ CD ]
Line_10 $$ if (mutateMethods.size() == 0) -->Line_13 $$ if (mutateMethods.size() > 1) [ CD ]
Line_10 $$ if (mutateMethods.size() == 0) -->Line_11 $$ problems.add("Must have at exactly one method annotated with @" + Mutate.class.getName())[ CD ]
Line_2 $$ public static <R, T> RuleSourceBackedRuleAction<R, T> create(ModelType<T> subjectType, R ruleSourceInstance) -->Line_3 $$ ModelType<R> ruleSourceType = ModelType.typeOf(ruleSourceInstance)[ FD ]
Line_21 $$ if (parameterTypes.length == 0 || !subjectType.isAssignableFrom(ModelType.of(parameterTypes[0]))) -->Line_22 $$ problems.add(ruleMethod, String.format("First parameter of a rule method must be of type %s", subjectType))[ CD ]
Line_4 $$ List<Method> mutateMethods = JavaReflectionUtil.findAllMethods(ruleSourceType.getConcreteClass(), new Spec<Method>() -->Line_6 $$ return element.isAnnotationPresent(Mutate.class)[ CD ]
Line_4 $$ List<Method> mutateMethods = JavaReflectionUtil.findAllMethods(ruleSourceType.getConcreteClass(), new Spec<Method>() -->Line_6 $$ return element.isAnnotationPresent(Mutate.class)[ FD ]
Line_2 $$ public static <R, T> RuleSourceBackedRuleAction<R, T> create(ModelType<T> subjectType, R ruleSourceInstance) -->Line_29 $$ return new RuleSourceBackedRuleAction<R, T>(ruleSourceInstance, new JavaMethod<R, T>(ruleSourceType.getConcreteClass(), subjectType.getConcreteClass(), mutateMethods.get(0)))[ CD ]
Line_2 $$ public static <R, T> RuleSourceBackedRuleAction<R, T> create(ModelType<T> subjectType, R ruleSourceInstance) -->Line_4 $$ List<Method> mutateMethods = JavaReflectionUtil.findAllMethods(ruleSourceType.getConcreteClass(), new Spec<Method>() [ CD ]
