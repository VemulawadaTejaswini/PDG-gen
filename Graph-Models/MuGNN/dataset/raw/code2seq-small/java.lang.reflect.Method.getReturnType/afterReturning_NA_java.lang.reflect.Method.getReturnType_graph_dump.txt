Line_19 $$ if (indexer == null) -->Line_21 $$ return[ CD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_6 $$ Indexable indexable = findAnnotation(methodInvocation)[ CD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_20 $$ serviceBeanAopCacheManager.removeMethodInterceptor(methodInvocation, this)[ FD ]
Line_18 $$ Indexer<Object> indexer = IndexerRegistryUtil.getIndexer(returnType.getName())-->Line_19 $$ if (indexer == null) [ FD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_6 $$ Indexable indexable = findAnnotation(methodInvocation)[ FD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_12 $$ if (!BaseModel.class.isAssignableFrom(returnType)) [ CD ]
Line_10 $$ Method method = methodInvocation.getMethod()-->Line_11 $$ Class<?> returnType = method.getReturnType()[ FD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_34 $$ indexer.delete(result)[ FD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_7 $$ if (indexable == _nullIndexable) [ CD ]
Line_19 $$ if (indexer == null) -->Line_20 $$ serviceBeanAopCacheManager.removeMethodInterceptor(methodInvocation, this)[ CD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_3 $$ if (result == null) [ FD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_18 $$ Indexer<Object> indexer = IndexerRegistryUtil.getIndexer(returnType.getName())[ CD ]
Line_11 $$ Class<?> returnType = method.getReturnType()-->Line_18 $$ Indexer<Object> indexer = IndexerRegistryUtil.getIndexer(returnType.getName())[ FD ]
Line_18 $$ Indexer<Object> indexer = IndexerRegistryUtil.getIndexer(returnType.getName())-->Line_36 $$ indexer.reindex(result)[ FD ]
Line_6 $$ Indexable indexable = findAnnotation(methodInvocation)-->Line_7 $$ if (indexable == _nullIndexable) [ FD ]
Line_3 $$ if (result == null) -->Line_4 $$ return[ CD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_10 $$ Method method = methodInvocation.getMethod()[ CD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_36 $$ indexer.reindex(result)[ FD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_23 $$ Object[] arguments = methodInvocation.getArguments()[ FD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_24 $$ for (int i = arguments.length - 1; i >= 0; i--) [ CD ]
Line_33 $$ if (indexable.type() == IndexableType.DELETE) -->Line_36 $$ indexer.reindex(result)[ CD ]
Line_11 $$ Class<?> returnType = method.getReturnType()-->Line_12 $$ if (!BaseModel.class.isAssignableFrom(returnType)) [ FD ]
Line_25 $$ if (arguments[i] instanceof ServiceContext) -->Line_30 $$ return[ CD ]
Line_25 $$ if (arguments[i] instanceof ServiceContext) -->Line_27 $$ if (serviceContext.isIndexingEnabled()) [ CD ]
Line_26 $$ ServiceContext serviceContext = (ServiceContext) arguments[i]-->Line_27 $$ if (serviceContext.isIndexingEnabled()) [ FD ]
Line_24 $$ for (int i = arguments.length - 1; i >= 0; i--) -->Line_25 $$ if (arguments[i] instanceof ServiceContext) [ CD ]
Line_7 $$ if (indexable == _nullIndexable) -->Line_8 $$ return[ CD ]
Line_25 $$ if (arguments[i] instanceof ServiceContext) -->Line_26 $$ ServiceContext serviceContext = (ServiceContext) arguments[i][ CD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_10 $$ Method method = methodInvocation.getMethod()[ FD ]
Line_18 $$ Indexer<Object> indexer = IndexerRegistryUtil.getIndexer(returnType.getName())-->Line_34 $$ indexer.delete(result)[ FD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_33 $$ if (indexable.type() == IndexableType.DELETE) [ CD ]
Line_13 $$ if (_log.isWarnEnabled()) -->Line_14 $$ _log.warn(methodInvocation + " does not have a valid return type")[ CD ]
Line_12 $$ if (!BaseModel.class.isAssignableFrom(returnType)) -->Line_13 $$ if (_log.isWarnEnabled()) [ CD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_11 $$ Class<?> returnType = method.getReturnType()[ CD ]
Line_12 $$ if (!BaseModel.class.isAssignableFrom(returnType)) -->Line_16 $$ return[ CD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_19 $$ if (indexer == null) [ CD ]
Line_33 $$ if (indexable.type() == IndexableType.DELETE) -->Line_34 $$ indexer.delete(result)[ CD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_23 $$ Object[] arguments = methodInvocation.getArguments()[ CD ]
Line_2 $$ public void afterReturning(MethodInvocation methodInvocation, Object result) throws Throwable -->Line_3 $$ if (result == null) [ CD ]
Line_6 $$ Indexable indexable = findAnnotation(methodInvocation)-->Line_33 $$ if (indexable.type() == IndexableType.DELETE) [ FD ]
