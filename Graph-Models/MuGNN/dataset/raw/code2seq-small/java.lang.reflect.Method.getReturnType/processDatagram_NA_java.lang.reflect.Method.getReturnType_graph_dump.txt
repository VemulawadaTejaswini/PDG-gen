Line_3 $$ Deserializer deserializer = new Deserializer(datagram.getDataByteBuffer())-->Line_6 $$ Assert.assertEquals(_index, deserializer.readInt())[ FD ]
Line_3 $$ Deserializer deserializer = new Deserializer(datagram.getDataByteBuffer())-->Line_8 $$ Assert.assertEquals(_sampleValueMap.get(parameterType), _readFromDeserializer(deserializer, parameterType))[ FD ]
Line_2 $$ protected Datagram processDatagram(Datagram datagram) -->Line_11 $$ if (returnType == void.class) [ CD ]
Line_14 $$ Serializer serializer = new Serializer()-->Line_15 $$ serializer.writeObject(new RPCResponse((Serializable) _sampleValueMap.get(returnType)))[ FD ]
Line_2 $$ protected Datagram processDatagram(Datagram datagram) -->Line_3 $$ Deserializer deserializer = new Deserializer(datagram.getDataByteBuffer())[ CD ]
Line_10 $$ Class<?> returnType = _method.getReturnType()-->Line_15 $$ serializer.writeObject(new RPCResponse((Serializable) _sampleValueMap.get(returnType)))[ FD ]
Line_7 $$ for (Class<?> parameterType : _method.getParameterTypes()) -->Line_8 $$ Assert.assertEquals(_sampleValueMap.get(parameterType), _readFromDeserializer(deserializer, parameterType))[ FD ]
Line_2 $$ protected Datagram processDatagram(Datagram datagram) -->Line_4 $$ Assert.assertEquals(_skeletonId, deserializer.readString())[ CD ]
Line_2 $$ protected Datagram processDatagram(Datagram datagram) -->Line_16 $$ return Datagram.createResponseDatagram(datagram, serializer.toByteBuffer())[ FD ]
Line_2 $$ protected Datagram processDatagram(Datagram datagram) -->Line_16 $$ return Datagram.createResponseDatagram(datagram, serializer.toByteBuffer())[ CD ]
Line_3 $$ Deserializer deserializer = new Deserializer(datagram.getDataByteBuffer())-->Line_4 $$ Assert.assertEquals(_skeletonId, deserializer.readString())[ FD ]
Line_10 $$ Class<?> returnType = _method.getReturnType()-->Line_11 $$ if (returnType == void.class) [ FD ]
Line_3 $$ Deserializer deserializer = new Deserializer(datagram.getDataByteBuffer())-->Line_5 $$ Assert.assertEquals(_targetId, deserializer.readString())[ FD ]
Line_11 $$ if (returnType == void.class) -->Line_12 $$ return null[ CD ]
Line_2 $$ protected Datagram processDatagram(Datagram datagram) -->Line_6 $$ Assert.assertEquals(_index, deserializer.readInt())[ CD ]
Line_2 $$ protected Datagram processDatagram(Datagram datagram) -->Line_10 $$ Class<?> returnType = _method.getReturnType()[ CD ]
Line_2 $$ protected Datagram processDatagram(Datagram datagram) -->Line_15 $$ serializer.writeObject(new RPCResponse((Serializable) _sampleValueMap.get(returnType)))[ CD ]
Line_2 $$ protected Datagram processDatagram(Datagram datagram) -->Line_5 $$ Assert.assertEquals(_targetId, deserializer.readString())[ CD ]
Line_2 $$ protected Datagram processDatagram(Datagram datagram) -->Line_14 $$ Serializer serializer = new Serializer()[ CD ]
Line_2 $$ protected Datagram processDatagram(Datagram datagram) -->Line_3 $$ Deserializer deserializer = new Deserializer(datagram.getDataByteBuffer())[ FD ]
Line_14 $$ Serializer serializer = new Serializer()-->Line_16 $$ return Datagram.createResponseDatagram(datagram, serializer.toByteBuffer())[ FD ]
