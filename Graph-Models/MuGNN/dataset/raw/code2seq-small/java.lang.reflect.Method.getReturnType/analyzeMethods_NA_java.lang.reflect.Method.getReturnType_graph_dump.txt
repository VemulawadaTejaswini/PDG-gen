Line_15 $$ for (int j = i + 1; j < methods.length; ++j) -->Line_29 $$ for (int j = i + 1; j < methods.length; ++j) [ FD ]
Line_26 $$ if (isMutator(methods[i]) && (m_flags[i] & M_WRITE) == 0) -->Line_28 $$ Class[] iParams = methods[i].getParameterTypes()[ CD ]
Line_2 $$ protected void analyzeMethods() -->Line_3 $$ if (cls.isInterface() && java.rmi.Remote.class.isAssignableFrom(cls))[ CD ]
Line_9 $$ for (int i = 0; i < methods.length; ++i) mutators[i] = -1-->Line_44 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_18 $$ if (jParams.length == 1 && jParams[0] == iReturn) -->Line_21 $$ mutators[i] = j[ CD ]
Line_11 $$ for (int i = 0; i < methods.length; ++i) -->Line_35 $$ mutators[j] = i[ FD ]
Line_15 $$ for (int j = i + 1; j < methods.length; ++j) -->Line_16 $$ if (isMutator(methods[j]) && (m_flags[j] & M_WRITE) == 0 && attrName.equals(attributeWriteName(methods[j].getName()))) [ CD ]
Line_16 $$ if (isMutator(methods[j]) && (m_flags[j] & M_WRITE) == 0 && attrName.equals(attributeWriteName(methods[j].getName()))) -->Line_17 $$ Class[] jParams = methods[j].getParameterTypes()[ CD ]
Line_30 $$ if (isAccessor(methods[j]) && (m_flags[j] & M_READ) == 0 && attrName.equals(attributeReadName(methods[j].getName()))) -->Line_31 $$ Class jReturn = methods[j].getReturnType()[ CD ]
Line_26 $$ if (isMutator(methods[i]) && (m_flags[i] & M_WRITE) == 0) -->Line_27 $$ String attrName = attributeWriteName(methods[i].getName())[ CD ]
Line_15 $$ for (int j = i + 1; j < methods.length; ++j) -->Line_21 $$ mutators[i] = j[ FD ]
Line_13 $$ String attrName = attributeReadName(methods[i].getName())-->Line_30 $$ if (isAccessor(methods[j]) && (m_flags[j] & M_READ) == 0 && attrName.equals(attributeReadName(methods[j].getName()))) [ FD ]
Line_44 $$ for (int i = 0; i < methods.length; ++i) -->Line_45 $$ if ((m_flags[i] & (M_READ | M_WRITE | M_READONLY)) == 0) [ CD ]
Line_26 $$ if (isMutator(methods[i]) && (m_flags[i] & M_WRITE) == 0) -->Line_29 $$ for (int j = i + 1; j < methods.length; ++j) [ CD ]
Line_3 $$ if (cls.isInterface() && java.rmi.Remote.class.isAssignableFrom(cls))-->Line_6 $$ methods = cls.getDeclaredMethods()[ CD ]
Line_47 $$ for (int j = i + 1; j < methods.length; ++j) -->Line_48 $$ if (iName.equals(methods[j].getName())) [ CD ]
Line_45 $$ if ((m_flags[i] & (M_READ | M_WRITE | M_READONLY)) == 0) -->Line_47 $$ for (int j = i + 1; j < methods.length; ++j) [ CD ]
Line_9 $$ for (int i = 0; i < methods.length; ++i) mutators[i] = -1-->Line_42 $$ for (int i = 0; i < methods.length; ++i) if ((m_flags[i] & (M_READ | M_WRITE)) == 0 && isAccessor(methods[i]))[ FD ]
Line_13 $$ String attrName = attributeReadName(methods[i].getName())-->Line_16 $$ if (isMutator(methods[j]) && (m_flags[j] & M_WRITE) == 0 && attrName.equals(attributeWriteName(methods[j].getName()))) [ FD ]
Line_9 $$ for (int i = 0; i < methods.length; ++i) mutators[i] = -1-->Line_35 $$ mutators[j] = i[ FD ]
Line_11 $$ for (int i = 0; i < methods.length; ++i) -->Line_44 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_9 $$ for (int i = 0; i < methods.length; ++i) mutators[i] = -1-->Line_11 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_2 $$ protected void analyzeMethods() -->Line_44 $$ for (int i = 0; i < methods.length; ++i) [ CD ]
Line_12 $$ if (isAccessor(methods[i]) && (m_flags[i] & M_READ) == 0) -->Line_13 $$ String attrName = attributeReadName(methods[i].getName())[ CD ]
Line_2 $$ protected void analyzeMethods() -->Line_42 $$ for (int i = 0; i < methods.length; ++i) if ((m_flags[i] & (M_READ | M_WRITE)) == 0 && isAccessor(methods[i]))[ CD ]
Line_29 $$ for (int j = i + 1; j < methods.length; ++j) -->Line_47 $$ for (int j = i + 1; j < methods.length; ++j) [ FD ]
Line_15 $$ for (int j = i + 1; j < methods.length; ++j) -->Line_47 $$ for (int j = i + 1; j < methods.length; ++j) [ FD ]
Line_9 $$ for (int i = 0; i < methods.length; ++i) mutators[i] = -1-->Line_10 $$ mutators[i] = -1[ CD ]
Line_12 $$ if (isAccessor(methods[i]) && (m_flags[i] & M_READ) == 0) -->Line_14 $$ Class iReturn = methods[i].getReturnType()[ CD ]
Line_46 $$ String iName = methods[i].getName()-->Line_48 $$ if (iName.equals(methods[j].getName())) [ FD ]
Line_32 $$ if (iParams.length == 1 && iParams[0] == jReturn) -->Line_35 $$ mutators[j] = i[ CD ]
Line_11 $$ for (int i = 0; i < methods.length; ++i) -->Line_12 $$ if (isAccessor(methods[i]) && (m_flags[i] & M_READ) == 0) [ CD ]
Line_3 $$ if (cls.isInterface() && java.rmi.Remote.class.isAssignableFrom(cls))-->Line_4 $$ methods = cls.getMethods()[ CD ]
Line_2 $$ protected void analyzeMethods() -->Line_11 $$ for (int i = 0; i < methods.length; ++i) [ CD ]
Line_29 $$ for (int j = i + 1; j < methods.length; ++j) -->Line_30 $$ if (isAccessor(methods[j]) && (m_flags[j] & M_READ) == 0 && attrName.equals(attributeReadName(methods[j].getName()))) [ CD ]
Line_11 $$ for (int i = 0; i < methods.length; ++i) -->Line_42 $$ for (int i = 0; i < methods.length; ++i) if ((m_flags[i] & (M_READ | M_WRITE)) == 0 && isAccessor(methods[i]))[ FD ]
Line_44 $$ for (int i = 0; i < methods.length; ++i) -->Line_54 $$ if (methods[i].getDeclaringClass() != cls)[ CD ]
Line_42 $$ for (int i = 0; i < methods.length; ++i) if ((m_flags[i] & (M_READ | M_WRITE)) == 0 && isAccessor(methods[i]))-->Line_44 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_12 $$ if (isAccessor(methods[i]) && (m_flags[i] & M_READ) == 0) -->Line_15 $$ for (int j = i + 1; j < methods.length; ++j) [ CD ]
Line_12 $$ if (isAccessor(methods[i]) && (m_flags[i] & M_READ) == 0) -->Line_26 $$ if (isMutator(methods[i]) && (m_flags[i] & M_WRITE) == 0) [ CD ]
Line_45 $$ if ((m_flags[i] & (M_READ | M_WRITE | M_READONLY)) == 0) -->Line_46 $$ String iName = methods[i].getName()[ CD ]
Line_2 $$ protected void analyzeMethods() -->Line_9 $$ for (int i = 0; i < methods.length; ++i) mutators[i] = -1[ CD ]
Line_16 $$ if (isMutator(methods[j]) && (m_flags[j] & M_WRITE) == 0 && attrName.equals(attributeWriteName(methods[j].getName()))) -->Line_18 $$ if (jParams.length == 1 && jParams[0] == iReturn) [ CD ]
Line_30 $$ if (isAccessor(methods[j]) && (m_flags[j] & M_READ) == 0 && attrName.equals(attributeReadName(methods[j].getName()))) -->Line_32 $$ if (iParams.length == 1 && iParams[0] == jReturn) [ CD ]
