Line_29 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_30 $$ Method proxyMethod = proxyMethods.get(i)[ FD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_3 $$ String skeletonId = "skeletonId"[ CD ]
Line_10 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(stubClass.getName(), Level.INFO)) -->Line_52 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_29 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_30 $$ Method proxyMethod = proxyMethods.get(i)[ CD ]
Line_33 $$ for (int j = 0; j < args.length; j++) -->Line_34 $$ args[j] = _sampleValueMap.get(parameterTypes[j])[ CD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_4 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)[ CD ]
Line_47 $$ String name2 = method2.getName()-->Line_48 $$ return name1.compareTo(name2)[ FD ]
Line_24 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_54 $$ ReflectionTestUtil.invoke(stubObject, copiedMethod.getName(), new Class<?>[0])[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_55 $$ LogRecord logRecord = logRecords.get(logRecords.size() - 1)[ FD ]
Line_4 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_5 $$ Constructor<?> constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)[ FD ]
Line_16 $$ logRecord = logRecords.get(1)-->Line_17 $$ Assert.assertEquals(stubClass.getName() + " in <init>", logRecord.getMessage())[ FD ]
Line_24 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_41 $$ Assert.assertEquals(_defaultValueMap.get(emptyMethod.getReturnType()), ReflectionTestUtil.invoke(stubObject, emptyMethod.getName(), new Class<?>[0]))[ FD ]
Line_4 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_22 $$ stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction2.class, skeletonId)[ FD ]
Line_14 $$ LogRecord logRecord = logRecords.get(0)-->Line_17 $$ Assert.assertEquals(stubClass.getName() + " in <init>", logRecord.getMessage())[ FD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_28 $$ List<Method> proxyMethods = _getProxyMethods(TestGenerateStubFunction2.class)[ CD ]
Line_44 $$ Collections.sort(copiedMethods, new Comparator<Method>() -->Line_46 $$ String name1 = method1.getName()[ FD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_7 $$ AutoReplyMockIntraband autoReplyMockIntraband = new AutoReplyMockIntraband(skeletonId, testId)[ CD ]
Line_29 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_36 $$ autoReplyMockIntraband.setInvocation(proxyMethod, i)[ FD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_24 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ CD ]
Line_4 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_51 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(stubClass.getName(), Level.INFO)) [ FD ]
Line_8 $$ RegistrationReference registrationReference = new MockRegistrationReference(autoReplyMockIntraband)-->Line_24 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_30 $$ Method proxyMethod = proxyMethods.get(i)-->Line_31 $$ Class<?>[] parameterTypes = proxyMethod.getParameterTypes()[ FD ]
Line_14 $$ LogRecord logRecord = logRecords.get(0)-->Line_56 $$ Assert.assertEquals(copiedMethod.getName(), logRecord.getMessage())[ FD ]
Line_4 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_17 $$ Assert.assertEquals(stubClass.getName() + " in <init>", logRecord.getMessage())[ FD ]
Line_44 $$ Collections.sort(copiedMethods, new Comparator<Method>() -->Line_46 $$ String name1 = method1.getName()[ CD ]
Line_44 $$ Collections.sort(copiedMethods, new Comparator<Method>() -->Line_48 $$ return name1.compareTo(name2)[ CD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_20 $$ Assert.assertSame(WarnLogExceptionHandler.INSTANCE, ReflectionTestUtil.getFieldValue(stubObject, "_exceptionHandler"))[ CD ]
Line_14 $$ LogRecord logRecord = logRecords.get(0)-->Line_15 $$ Assert.assertEquals(stubClass.getName() + " in <clinit>", logRecord.getMessage())[ FD ]
Line_32 $$ Object[] args = new Object[parameterTypes.length]-->Line_37 $$ Object object = ReflectionTestUtil.invoke(stubObject, proxyMethod.getName(), proxyMethod.getParameterTypes(), args)[ FD ]
Line_29 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_33 $$ for (int j = 0; j < args.length; j++) [ CD ]
Line_3 $$ String skeletonId = "skeletonId"-->Line_4 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)[ FD ]
Line_5 $$ Constructor<?> constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)-->Line_23 $$ constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)[ FD ]
Line_30 $$ Method proxyMethod = proxyMethods.get(i)-->Line_38 $$ Assert.assertEquals(_sampleValueMap.get(proxyMethod.getReturnType()), object)[ FD ]
Line_9 $$ Object stubObject = null-->Line_19 $$ Assert.assertSame(registrationReference, ReflectionTestUtil.getFieldValue(stubObject, "_registrationReference"))[ FD ]
Line_29 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_31 $$ Class<?>[] parameterTypes = proxyMethod.getParameterTypes()[ CD ]
Line_9 $$ Object stubObject = null-->Line_12 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_44 $$ Collections.sort(copiedMethods, new Comparator<Method>() -->Line_47 $$ String name2 = method2.getName()[ FD ]
Line_9 $$ Object stubObject = null-->Line_20 $$ Assert.assertSame(WarnLogExceptionHandler.INSTANCE, ReflectionTestUtil.getFieldValue(stubObject, "_exceptionHandler"))[ FD ]
Line_5 $$ Constructor<?> constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)-->Line_24 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_29 $$ for (int i = 0; i < proxyMethods.size(); i++) [ CD ]
Line_12 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_54 $$ ReflectionTestUtil.invoke(stubObject, copiedMethod.getName(), new Class<?>[0])[ FD ]
Line_6 $$ String testId = "testId"-->Line_12 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_4 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_23 $$ constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)[ FD ]
Line_9 $$ Object stubObject = null-->Line_24 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_12 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_26 $$ Assert.assertEquals(testId, ReflectionTestUtil.invoke(stubObject, idMethod.getName(), new Class<?>[0]))[ FD ]
Line_9 $$ Object stubObject = null-->Line_41 $$ Assert.assertEquals(_defaultValueMap.get(emptyMethod.getReturnType()), ReflectionTestUtil.invoke(stubObject, emptyMethod.getName(), new Class<?>[0]))[ FD ]
Line_22 $$ stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction2.class, skeletonId)-->Line_51 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(stubClass.getName(), Level.INFO)) [ FD ]
Line_30 $$ Method proxyMethod = proxyMethods.get(i)-->Line_36 $$ autoReplyMockIntraband.setInvocation(proxyMethod, i)[ FD ]
Line_4 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_15 $$ Assert.assertEquals(stubClass.getName() + " in <clinit>", logRecord.getMessage())[ FD ]
Line_8 $$ RegistrationReference registrationReference = new MockRegistrationReference(autoReplyMockIntraband)-->Line_19 $$ Assert.assertSame(registrationReference, ReflectionTestUtil.getFieldValue(stubObject, "_registrationReference"))[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_16 $$ logRecord = logRecords.get(1)[ FD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_19 $$ Assert.assertSame(registrationReference, ReflectionTestUtil.getFieldValue(stubObject, "_registrationReference"))[ CD ]
Line_10 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(stubClass.getName(), Level.INFO)) -->Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_29 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_32 $$ Object[] args = new Object[parameterTypes.length][ CD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_21 $$ Assert.assertSame(autoReplyMockIntraband, ReflectionTestUtil.getFieldValue(stubObject, "_intraband"))[ CD ]
Line_12 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_19 $$ Assert.assertSame(registrationReference, ReflectionTestUtil.getFieldValue(stubObject, "_registrationReference"))[ FD ]
Line_28 $$ List<Method> proxyMethods = _getProxyMethods(TestGenerateStubFunction2.class)-->Line_29 $$ for (int i = 0; i < proxyMethods.size(); i++) [ FD ]
Line_5 $$ Constructor<?> constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)-->Line_12 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_24 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_26 $$ Assert.assertEquals(testId, ReflectionTestUtil.invoke(stubObject, idMethod.getName(), new Class<?>[0]))[ FD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_8 $$ RegistrationReference registrationReference = new MockRegistrationReference(autoReplyMockIntraband)[ CD ]
Line_12 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_21 $$ Assert.assertSame(autoReplyMockIntraband, ReflectionTestUtil.getFieldValue(stubObject, "_intraband"))[ FD ]
Line_30 $$ Method proxyMethod = proxyMethods.get(i)-->Line_37 $$ Object object = ReflectionTestUtil.invoke(stubObject, proxyMethod.getName(), proxyMethod.getParameterTypes(), args)[ FD ]
Line_43 $$ List<Method> copiedMethods = _getCopiedMethods(TestGenerateStubFunction2.class)-->Line_44 $$ Collections.sort(copiedMethods, new Comparator<Method>() [ FD ]
Line_3 $$ String skeletonId = "skeletonId"-->Line_22 $$ stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction2.class, skeletonId)[ FD ]
Line_12 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_20 $$ Assert.assertSame(WarnLogExceptionHandler.INSTANCE, ReflectionTestUtil.getFieldValue(stubObject, "_exceptionHandler"))[ FD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_6 $$ String testId = "testId"[ CD ]
Line_22 $$ stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction2.class, skeletonId)-->Line_23 $$ constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)[ FD ]
Line_29 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_37 $$ Object object = ReflectionTestUtil.invoke(stubObject, proxyMethod.getName(), proxyMethod.getParameterTypes(), args)[ CD ]
Line_8 $$ RegistrationReference registrationReference = new MockRegistrationReference(autoReplyMockIntraband)-->Line_12 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_23 $$ constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)-->Line_24 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_16 $$ logRecord = logRecords.get(1)-->Line_56 $$ Assert.assertEquals(copiedMethod.getName(), logRecord.getMessage())[ FD ]
Line_7 $$ AutoReplyMockIntraband autoReplyMockIntraband = new AutoReplyMockIntraband(skeletonId, testId)-->Line_36 $$ autoReplyMockIntraband.setInvocation(proxyMethod, i)[ FD ]
Line_9 $$ Object stubObject = null-->Line_54 $$ ReflectionTestUtil.invoke(stubObject, copiedMethod.getName(), new Class<?>[0])[ FD ]
Line_12 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_41 $$ Assert.assertEquals(_defaultValueMap.get(emptyMethod.getReturnType()), ReflectionTestUtil.invoke(stubObject, emptyMethod.getName(), new Class<?>[0]))[ FD ]
Line_29 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_38 $$ Assert.assertEquals(_sampleValueMap.get(proxyMethod.getReturnType()), object)[ CD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_43 $$ List<Method> copiedMethods = _getCopiedMethods(TestGenerateStubFunction2.class)[ CD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_22 $$ stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction2.class, skeletonId)[ CD ]
Line_44 $$ Collections.sort(copiedMethods, new Comparator<Method>() -->Line_47 $$ String name2 = method2.getName()[ CD ]
Line_9 $$ Object stubObject = null-->Line_37 $$ Object object = ReflectionTestUtil.invoke(stubObject, proxyMethod.getName(), proxyMethod.getParameterTypes(), args)[ FD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_44 $$ Collections.sort(copiedMethods, new Comparator<Method>() [ CD ]
Line_7 $$ AutoReplyMockIntraband autoReplyMockIntraband = new AutoReplyMockIntraband(skeletonId, testId)-->Line_21 $$ Assert.assertSame(autoReplyMockIntraband, ReflectionTestUtil.getFieldValue(stubObject, "_intraband"))[ FD ]
Line_9 $$ Object stubObject = null-->Line_26 $$ Assert.assertEquals(testId, ReflectionTestUtil.invoke(stubObject, idMethod.getName(), new Class<?>[0]))[ FD ]
Line_29 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_36 $$ autoReplyMockIntraband.setInvocation(proxyMethod, i)[ CD ]
Line_14 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ logRecord = logRecords.get(1)[ FD ]
Line_12 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_37 $$ Object object = ReflectionTestUtil.invoke(stubObject, proxyMethod.getName(), proxyMethod.getParameterTypes(), args)[ FD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_9 $$ Object stubObject = null[ CD ]
Line_28 $$ List<Method> proxyMethods = _getProxyMethods(TestGenerateStubFunction2.class)-->Line_30 $$ Method proxyMethod = proxyMethods.get(i)[ FD ]
Line_6 $$ String testId = "testId"-->Line_24 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_5 $$ Constructor<?> constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)[ CD ]
Line_2 $$ public void testGenerateStubClassFunction() throws Exception -->Line_23 $$ constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)[ CD ]
Line_6 $$ String testId = "testId"-->Line_26 $$ Assert.assertEquals(testId, ReflectionTestUtil.invoke(stubObject, idMethod.getName(), new Class<?>[0]))[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_9 $$ Object stubObject = null-->Line_21 $$ Assert.assertSame(autoReplyMockIntraband, ReflectionTestUtil.getFieldValue(stubObject, "_intraband"))[ FD ]
Line_46 $$ String name1 = method1.getName()-->Line_48 $$ return name1.compareTo(name2)[ FD ]
Line_25 $$ for (Method idMethod : _getIdMethods(TestGenerateStubFunction2.class)) -->Line_26 $$ Assert.assertEquals(testId, ReflectionTestUtil.invoke(stubObject, idMethod.getName(), new Class<?>[0]))[ FD ]
Line_24 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_37 $$ Object object = ReflectionTestUtil.invoke(stubObject, proxyMethod.getName(), proxyMethod.getParameterTypes(), args)[ FD ]
Line_4 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_10 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(stubClass.getName(), Level.INFO)) [ FD ]
Line_12 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_24 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_40 $$ for (Method emptyMethod : _getEmptyMethods(TestGenerateStubFunction2.class)) -->Line_41 $$ Assert.assertEquals(_defaultValueMap.get(emptyMethod.getReturnType()), ReflectionTestUtil.invoke(stubObject, emptyMethod.getName(), new Class<?>[0]))[ FD ]
