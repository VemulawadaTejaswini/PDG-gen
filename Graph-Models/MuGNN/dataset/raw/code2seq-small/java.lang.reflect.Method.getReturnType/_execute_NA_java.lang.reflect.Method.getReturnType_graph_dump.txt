Line_24 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)-->Line_31 $$ context.error("Method " + methodClass.getSecond() + ":" + methodName + " must return AsyncResult object", getLine())[ FD ]
Line_34 $$ Object[] actualArgs = noArgs ? new Object[1] : new Object[args.length + 1]-->Line_36 $$ System.arraycopy(args, 0, actualArgs, 1, actualArgs.length - 1)[ FD ]
Line_42 $$ result.doWhenDone(new Consumer<String>() -->Line_45 $$ context.message(s, getLine())[ FD ]
Line_11 $$ if (close == -1) -->Line_13 $$ return ActionCallback.DONE[ CD ]
Line_4 $$ final String cmd = getText().substring(PREFIX.length()).trim()-->Line_16 $$ String[] args = cmd.substring(open + 1, close).split(",")[ FD ]
Line_37 $$ AsyncResult result = (AsyncResult<String>) m.invoke(null, actualArgs)-->Line_42 $$ result.doWhenDone(new Consumer<String>() [ FD ]
Line_24 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)-->Line_29 $$ Method m = methodClass.getFirst()[ FD ]
Line_25 $$ if (methodClass == null) -->Line_26 $$ context.error("No method \"" + methodName + "\" found in facade classes: " + context.getCallClasses(), getLine())[ CD ]
Line_29 $$ Method m = methodClass.getFirst()-->Line_30 $$ if (!m.getReturnType().isAssignableFrom(AsyncResult.class)) [ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_20 $$ for (int i = 1; i < types.length; i++) [ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_4 $$ final String cmd = getText().substring(PREFIX.length()).trim()[ CD ]
Line_24 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)-->Line_39 $$ context.error("Method " + methodClass.getSecond() + ":" + methodName + " must return AsyncResult object, but was null", getLine())[ FD ]
Line_10 $$ final int close = cmd.lastIndexOf(")")-->Line_11 $$ if (close == -1) [ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_15 $$ final String methodName = cmd.substring(0, open)[ CD ]
Line_15 $$ final String methodName = cmd.substring(0, open)-->Line_24 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_26 $$ context.error("No method \"" + methodName + "\" found in facade classes: " + context.getCallClasses(), getLine())[ FD ]
Line_3 $$ final ActionCallback cmdResult = new ActionCallback()-->Line_47 $$ cmdResult.setDone()[ FD ]
Line_10 $$ final int close = cmd.lastIndexOf(")")-->Line_16 $$ String[] args = cmd.substring(open + 1, close).split(",")[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_56 $$ context.error("InvocationTargetException while executing command: " + cmd, getLine())[ FD ]
Line_38 $$ if (result == null) -->Line_40 $$ return ActionCallback.REJECTED[ CD ]
Line_42 $$ result.doWhenDone(new Consumer<String>() -->Line_47 $$ cmdResult.setDone()[ CD ]
Line_24 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)-->Line_25 $$ if (methodClass == null) [ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_10 $$ final int close = cmd.lastIndexOf(")")[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_35 $$ actualArgs[0] = context[ FD ]
Line_4 $$ final String cmd = getText().substring(PREFIX.length()).trim()-->Line_15 $$ final String methodName = cmd.substring(0, open)[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_3 $$ final ActionCallback cmdResult = new ActionCallback()[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_16 $$ String[] args = cmd.substring(open + 1, close).split(",")[ CD ]
Line_6 $$ if (open == -1) -->Line_7 $$ context.error("( expected", getLine())[ CD ]
Line_18 $$ Class[] types = noArgs ? new Class[1] : new Class[args.length + 1]-->Line_24 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)[ FD ]
Line_25 $$ if (methodClass == null) -->Line_27 $$ return ActionCallback.REJECTED[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_31 $$ context.error("Method " + methodClass.getSecond() + ":" + methodName + " must return AsyncResult object", getLine())[ FD ]
Line_16 $$ String[] args = cmd.substring(open + 1, close).split(",")-->Line_36 $$ System.arraycopy(args, 0, actualArgs, 1, actualArgs.length - 1)[ FD ]
Line_42 $$ result.doWhenDone(new Consumer<String>() -->Line_44 $$ if (s != null) [ FD ]
Line_44 $$ if (s != null) -->Line_45 $$ context.message(s, getLine())[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_6 $$ if (open == -1) [ CD ]
Line_34 $$ Object[] actualArgs = noArgs ? new Object[1] : new Object[args.length + 1]-->Line_37 $$ AsyncResult result = (AsyncResult<String>) m.invoke(null, actualArgs)[ FD ]
Line_4 $$ final String cmd = getText().substring(PREFIX.length()).trim()-->Line_5 $$ final int open = cmd.indexOf("(")[ FD ]
Line_42 $$ result.doWhenDone(new Consumer<String>() -->Line_44 $$ if (s != null) [ CD ]
Line_20 $$ for (int i = 1; i < types.length; i++) -->Line_21 $$ types[i] = String.class[ CD ]
Line_30 $$ if (!m.getReturnType().isAssignableFrom(AsyncResult.class)) -->Line_31 $$ context.error("Method " + methodClass.getSecond() + ":" + methodName + " must return AsyncResult object", getLine())[ CD ]
Line_42 $$ result.doWhenDone(new Consumer<String>() -->Line_52 $$ cmdResult.setRejected()[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_58 $$ context.error("IllegalAccessException while executing command: " + cmd, getLine())[ FD ]
Line_29 $$ Method m = methodClass.getFirst()-->Line_37 $$ AsyncResult result = (AsyncResult<String>) m.invoke(null, actualArgs)[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_5 $$ final int open = cmd.indexOf("(")[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_11 $$ if (close == -1) [ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_17 $$ final boolean noArgs = args.length == 1 && args[0].length() == 0[ CD ]
Line_5 $$ final int open = cmd.indexOf("(")-->Line_6 $$ if (open == -1) [ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_39 $$ context.error("Method " + methodClass.getSecond() + ":" + methodName + " must return AsyncResult object, but was null", getLine())[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_45 $$ context.message(s, getLine())[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_12 $$ context.error(") expected", getLine())[ FD ]
Line_30 $$ if (!m.getReturnType().isAssignableFrom(AsyncResult.class)) -->Line_32 $$ return ActionCallback.REJECTED[ CD ]
Line_37 $$ AsyncResult result = (AsyncResult<String>) m.invoke(null, actualArgs)-->Line_38 $$ if (result == null) [ FD ]
Line_3 $$ final ActionCallback cmdResult = new ActionCallback()-->Line_52 $$ cmdResult.setRejected()[ FD ]
Line_5 $$ final int open = cmd.indexOf("(")-->Line_15 $$ final String methodName = cmd.substring(0, open)[ FD ]
Line_11 $$ if (close == -1) -->Line_12 $$ context.error(") expected", getLine())[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_24 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_19 $$ types[0] = PlaybackContext.class[ CD ]
Line_42 $$ result.doWhenDone(new Consumer<String>() -->Line_51 $$ context.error(s, getLine())[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_51 $$ context.error(s, getLine())[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_18 $$ Class[] types = noArgs ? new Class[1] : new Class[args.length + 1][ CD ]
Line_4 $$ final String cmd = getText().substring(PREFIX.length()).trim()-->Line_10 $$ final int close = cmd.lastIndexOf(")")[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_7 $$ context.error("( expected", getLine())[ FD ]
Line_38 $$ if (result == null) -->Line_39 $$ context.error("Method " + methodClass.getSecond() + ":" + methodName + " must return AsyncResult object, but was null", getLine())[ CD ]
Line_6 $$ if (open == -1) -->Line_8 $$ return ActionCallback.DONE[ CD ]
Line_42 $$ result.doWhenDone(new Consumer<String>() -->Line_51 $$ context.error(s, getLine())[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_60 $$ return cmdResult[ CD ]
