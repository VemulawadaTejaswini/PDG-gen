Line_31 $$ clz = clz.getSuperclass()-->Line_20 $$ Method[] methods = clz.getDeclaredMethods()[ FD ]
Line_8 $$ for (Field field : fields) -->Line_11 $$ field.setAccessible(true)[ FD ]
Line_9 $$ Class<?> fieldType = field.getType()-->Line_10 $$ if (fieldType.equals(javax.resource.spi.ConnectionManager.class) || fieldType.equals(ConnectionManager.class)) [ FD ]
Line_3 $$ Class<?> clz = connectionFactory.getClass()-->Line_4 $$ while (!Object.class.equals(clz)) [ FD ]
Line_23 $$ if (type.equals(javax.resource.spi.ConnectionManager.class) || type.equals(ConnectionManager.class)) -->Line_25 $$ return (ConnectionManager) method.invoke(connectionFactory, new Object[] [ CD ]
Line_8 $$ for (Field field : fields) -->Line_9 $$ Class<?> fieldType = field.getType()[ FD ]
Line_10 $$ if (fieldType.equals(javax.resource.spi.ConnectionManager.class) || fieldType.equals(ConnectionManager.class)) -->Line_12 $$ return (ConnectionManager) field.get(connectionFactory)[ CD ]
Line_3 $$ Class<?> clz = connectionFactory.getClass()-->Line_6 $$ Field[] fields = clz.getDeclaredFields()[ FD ]
Line_3 $$ Class<?> clz = connectionFactory.getClass()-->Line_20 $$ Method[] methods = clz.getDeclaredMethods()[ FD ]
Line_21 $$ for (Method method : methods) -->Line_25 $$ return (ConnectionManager) method.invoke(connectionFactory, new Object[] [ FD ]
Line_22 $$ Class<?> type = method.getReturnType()-->Line_23 $$ if (type.equals(javax.resource.spi.ConnectionManager.class) || type.equals(ConnectionManager.class)) [ FD ]
Line_4 $$ while (!Object.class.equals(clz)) -->Line_31 $$ clz = clz.getSuperclass()[ CD ]
Line_2 $$ private static ConnectionManager extractConnectionManager(Object connectionFactory) -->Line_3 $$ Class<?> clz = connectionFactory.getClass()[ FD ]
Line_23 $$ if (type.equals(javax.resource.spi.ConnectionManager.class) || type.equals(ConnectionManager.class)) -->Line_24 $$ method.setAccessible(true)[ CD ]
Line_31 $$ clz = clz.getSuperclass()-->Line_4 $$ while (!Object.class.equals(clz)) [ FD ]
Line_21 $$ for (Method method : methods) -->Line_22 $$ Class<?> type = method.getReturnType()[ FD ]
Line_10 $$ if (fieldType.equals(javax.resource.spi.ConnectionManager.class) || fieldType.equals(ConnectionManager.class)) -->Line_11 $$ field.setAccessible(true)[ CD ]
Line_3 $$ Class<?> clz = connectionFactory.getClass()-->Line_31 $$ clz = clz.getSuperclass()[ FD ]
Line_2 $$ private static ConnectionManager extractConnectionManager(Object connectionFactory) -->Line_3 $$ Class<?> clz = connectionFactory.getClass()[ CD ]
Line_31 $$ clz = clz.getSuperclass()-->Line_6 $$ Field[] fields = clz.getDeclaredFields()[ FD ]
Line_2 $$ private static ConnectionManager extractConnectionManager(Object connectionFactory) -->Line_12 $$ return (ConnectionManager) field.get(connectionFactory)[ FD ]
Line_8 $$ for (Field field : fields) -->Line_12 $$ return (ConnectionManager) field.get(connectionFactory)[ FD ]
Line_2 $$ private static ConnectionManager extractConnectionManager(Object connectionFactory) -->Line_4 $$ while (!Object.class.equals(clz)) [ CD ]
Line_2 $$ private static ConnectionManager extractConnectionManager(Object connectionFactory) -->Line_33 $$ return null[ CD ]
Line_2 $$ private static ConnectionManager extractConnectionManager(Object connectionFactory) -->Line_25 $$ return (ConnectionManager) method.invoke(connectionFactory, new Object[] [ FD ]
Line_21 $$ for (Method method : methods) -->Line_24 $$ method.setAccessible(true)[ FD ]
