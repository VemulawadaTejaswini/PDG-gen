Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_7 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass[ CD ]
Line_35 $$ final Map<MethodIdentifier, List<InterceptorDescription>> methodLevelContainerInterceptors = ejbComponentDescription.getMethodLevelContainerInterceptors()-->Line_71 $$ final List<InterceptorDescription> interceptorsForMethod = methodLevelContainerInterceptors.get(methodIdentifier)[ FD ]
Line_6 $$ final Map<String, List<InterceptorFactory>> userAroundInvokesByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_59 $$ final List<InterceptorFactory> aroundInvokesOnInterceptor = userAroundInvokesByInterceptorClass.get(interceptorClassName)[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_34 $$ final List<InterceptorDescription> classLevelContainerInterceptors = ejbComponentDescription.getClassLevelContainerInterceptors()[ CD ]
Line_28 $$ final List<InterceptorFactory> aroundTimeoutInterceptorFactories = interceptorClassDescriptionTraversal.getAroundTimeoutInterceptorFactories()-->Line_30 $$ userAroundTimeoutsByInterceptorClass.put(interceptorClassName, aroundTimeoutInterceptorFactories)[ FD ]
Line_38 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(method.getReturnType(), method.getName(), method.getParameterTypes())-->Line_71 $$ final List<InterceptorDescription> interceptorsForMethod = methodLevelContainerInterceptors.get(methodIdentifier)[ FD ]
Line_9 $$ userAroundTimeoutsByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_80 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_5 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)-->Line_17 $$ intereptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)[ FD ]
Line_9 $$ userAroundTimeoutsByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_11 $$ userAroundTimeoutsByInterceptorClass = null[ FD ]
Line_27 $$ if (ejbComponentDescription.isTimerServiceRequired()) -->Line_28 $$ final List<InterceptorFactory> aroundTimeoutInterceptorFactories = interceptorClassDescriptionTraversal.getAroundTimeoutInterceptorFactories()[ CD ]
Line_48 $$ if (ejbComponentDescription.isTimerServiceRequired()) -->Line_50 $$ if (aroundTimeoutsOnInterceptor != null) [ CD ]
Line_44 $$ final List<InterceptorFactory> aroundInvokesOnInterceptor = userAroundInvokesByInterceptorClass.get(interceptorClassName)-->Line_77 $$ aroundInvokesApplicableForMethod.addAll(aroundInvokesOnInterceptor)[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_13 $$ for (final InterceptorDescription interceptorDescription : ejbComponentDescription.getAllContainerInterceptors()) [ FD ]
Line_39 $$ final List<InterceptorFactory> aroundInvokesApplicableForMethod = new ArrayList<InterceptorFactory>()-->Line_46 $$ aroundInvokesApplicableForMethod.addAll(aroundInvokesOnInterceptor)[ FD ]
Line_37 $$ for (final Method method : viewMethods) -->Line_38 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(method.getReturnType(), method.getName(), method.getParameterTypes())[ FD ]
Line_23 $$ final List<InterceptorFactory> aroundInvokeInterceptorFactories = interceptorClassDescriptionTraversal.getAroundInvokeInterceptorFactories()-->Line_25 $$ userAroundInvokesByInterceptorClass.put(interceptorClassName, aroundInvokeInterceptorFactories)[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_36 $$ final List<Method> viewMethods = viewConfiguration.getProxyFactory().getCachedMethods()[ FD ]
Line_44 $$ final List<InterceptorFactory> aroundInvokesOnInterceptor = userAroundInvokesByInterceptorClass.get(interceptorClassName)-->Line_46 $$ aroundInvokesApplicableForMethod.addAll(aroundInvokesOnInterceptor)[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_8 $$ if (ejbComponentDescription.isTimerServiceRequired()) [ FD ]
Line_14 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_17 $$ intereptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)[ FD ]
Line_13 $$ for (final InterceptorDescription interceptorDescription : ejbComponentDescription.getAllContainerInterceptors()) -->Line_14 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_63 $$ if (ejbComponentDescription.isTimerServiceRequired()) [ FD ]
Line_14 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_75 $$ final List<InterceptorFactory> aroundInvokesOnInterceptor = userAroundInvokesByInterceptorClass.get(interceptorClassName)[ FD ]
Line_49 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)-->Line_81 $$ if (aroundTimeoutsOnInterceptor != null) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()-->Line_5 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)[ FD ]
Line_71 $$ final List<InterceptorDescription> interceptorsForMethod = methodLevelContainerInterceptors.get(methodIdentifier)-->Line_72 $$ if (interceptorsForMethod != null) [ FD ]
Line_11 $$ userAroundTimeoutsByInterceptorClass = null-->Line_80 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_4 $$ final EEApplicationClasses applicationClasses = deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION)[ CD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_87 $$ viewConfiguration.addViewInterceptor(method, new UserInterceptorFactory(weaved(aroundInvokesApplicableForMethod), weaved(aroundTimeoutsApplicableForMethod)), InterceptorOrder.View.USER_APP_SPECIFIC_CONTAINER_INTERCEPTORS)[ FD ]
Line_40 $$ final List<InterceptorFactory> aroundTimeoutsApplicableForMethod = new ArrayList<InterceptorFactory>()-->Line_87 $$ viewConfiguration.addViewInterceptor(method, new UserInterceptorFactory(weaved(aroundInvokesApplicableForMethod), weaved(aroundTimeoutsApplicableForMethod)), InterceptorOrder.View.USER_APP_SPECIFIC_CONTAINER_INTERCEPTORS)[ FD ]
Line_79 $$ if (ejbComponentDescription.isTimerServiceRequired()) -->Line_80 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ CD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_5 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)[ CD ]
Line_49 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)-->Line_65 $$ if (aroundTimeoutsOnInterceptor != null) [ FD ]
Line_23 $$ final List<InterceptorFactory> aroundInvokeInterceptorFactories = interceptorClassDescriptionTraversal.getAroundInvokeInterceptorFactories()-->Line_24 $$ if (aroundInvokeInterceptorFactories != null) [ FD ]
Line_7 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass-->Line_64 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_29 $$ if (aroundTimeoutInterceptorFactories != null) -->Line_30 $$ userAroundTimeoutsByInterceptorClass.put(interceptorClassName, aroundTimeoutInterceptorFactories)[ CD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_48 $$ if (ejbComponentDescription.isTimerServiceRequired()) [ FD ]
Line_13 $$ for (final InterceptorDescription interceptorDescription : ejbComponentDescription.getAllContainerInterceptors()) -->Line_58 $$ String interceptorClassName = interceptorDescription.getInterceptorClassName()[ FD ]
Line_40 $$ final List<InterceptorFactory> aroundTimeoutsApplicableForMethod = new ArrayList<InterceptorFactory>()-->Line_66 $$ aroundTimeoutsApplicableForMethod.addAll(aroundTimeoutsOnInterceptor)[ FD ]
Line_6 $$ final Map<String, List<InterceptorFactory>> userAroundInvokesByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_25 $$ userAroundInvokesByInterceptorClass.put(interceptorClassName, aroundInvokeInterceptorFactories)[ FD ]
Line_11 $$ userAroundTimeoutsByInterceptorClass = null-->Line_49 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_27 $$ if (ejbComponentDescription.isTimerServiceRequired()) [ FD ]
Line_6 $$ final Map<String, List<InterceptorFactory>> userAroundInvokesByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_44 $$ final List<InterceptorFactory> aroundInvokesOnInterceptor = userAroundInvokesByInterceptorClass.get(interceptorClassName)[ FD ]
Line_6 $$ final Map<String, List<InterceptorFactory>> userAroundInvokesByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_75 $$ final List<InterceptorFactory> aroundInvokesOnInterceptor = userAroundInvokesByInterceptorClass.get(interceptorClassName)[ FD ]
Line_7 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass-->Line_9 $$ userAroundTimeoutsByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_36 $$ final List<Method> viewMethods = viewConfiguration.getProxyFactory().getCachedMethods()[ CD ]
Line_45 $$ if (aroundInvokesOnInterceptor != null) -->Line_46 $$ aroundInvokesApplicableForMethod.addAll(aroundInvokesOnInterceptor)[ CD ]
Line_14 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_25 $$ userAroundInvokesByInterceptorClass.put(interceptorClassName, aroundInvokeInterceptorFactories)[ FD ]
Line_81 $$ if (aroundTimeoutsOnInterceptor != null) -->Line_82 $$ aroundTimeoutsApplicableForMethod.addAll(aroundTimeoutsOnInterceptor)[ CD ]
Line_14 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_59 $$ final List<InterceptorFactory> aroundInvokesOnInterceptor = userAroundInvokesByInterceptorClass.get(interceptorClassName)[ FD ]
Line_15 $$ final Class<?> intereptorClass-->Line_17 $$ intereptorClass = ClassLoadingUtils.loadClass(interceptorClassName, module)[ FD ]
Line_11 $$ userAroundTimeoutsByInterceptorClass = null-->Line_64 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_38 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(method.getReturnType(), method.getName(), method.getParameterTypes())-->Line_56 $$ if (!ejbComponentDescription.isExcludeClassLevelContainerInterceptors(methodIdentifier)) [ FD ]
Line_49 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)-->Line_66 $$ aroundTimeoutsApplicableForMethod.addAll(aroundTimeoutsOnInterceptor)[ FD ]
Line_44 $$ final List<InterceptorFactory> aroundInvokesOnInterceptor = userAroundInvokesByInterceptorClass.get(interceptorClassName)-->Line_76 $$ if (aroundInvokesOnInterceptor != null) [ FD ]
Line_49 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)-->Line_50 $$ if (aroundTimeoutsOnInterceptor != null) [ FD ]
Line_14 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_64 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_63 $$ if (ejbComponentDescription.isTimerServiceRequired()) -->Line_65 $$ if (aroundTimeoutsOnInterceptor != null) [ CD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()[ CD ]
Line_14 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_30 $$ userAroundTimeoutsByInterceptorClass.put(interceptorClassName, aroundTimeoutInterceptorFactories)[ FD ]
Line_40 $$ final List<InterceptorFactory> aroundTimeoutsApplicableForMethod = new ArrayList<InterceptorFactory>()-->Line_51 $$ aroundTimeoutsApplicableForMethod.addAll(aroundTimeoutsOnInterceptor)[ FD ]
Line_63 $$ if (ejbComponentDescription.isTimerServiceRequired()) -->Line_64 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ CD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_35 $$ final Map<MethodIdentifier, List<InterceptorDescription>> methodLevelContainerInterceptors = ejbComponentDescription.getMethodLevelContainerInterceptors()[ CD ]
Line_14 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_80 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_44 $$ final List<InterceptorFactory> aroundInvokesOnInterceptor = userAroundInvokesByInterceptorClass.get(interceptorClassName)-->Line_61 $$ aroundInvokesApplicableForMethod.addAll(aroundInvokesOnInterceptor)[ FD ]
Line_39 $$ final List<InterceptorFactory> aroundInvokesApplicableForMethod = new ArrayList<InterceptorFactory>()-->Line_61 $$ aroundInvokesApplicableForMethod.addAll(aroundInvokesOnInterceptor)[ FD ]
Line_24 $$ if (aroundInvokeInterceptorFactories != null) -->Line_25 $$ userAroundInvokesByInterceptorClass.put(interceptorClassName, aroundInvokeInterceptorFactories)[ CD ]
Line_48 $$ if (ejbComponentDescription.isTimerServiceRequired()) -->Line_49 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ CD ]
Line_39 $$ final List<InterceptorFactory> aroundInvokesApplicableForMethod = new ArrayList<InterceptorFactory>()-->Line_87 $$ viewConfiguration.addViewInterceptor(method, new UserInterceptorFactory(weaved(aroundInvokesApplicableForMethod), weaved(aroundTimeoutsApplicableForMethod)), InterceptorOrder.View.USER_APP_SPECIFIC_CONTAINER_INTERCEPTORS)[ FD ]
Line_79 $$ if (ejbComponentDescription.isTimerServiceRequired()) -->Line_81 $$ if (aroundTimeoutsOnInterceptor != null) [ CD ]
Line_65 $$ if (aroundTimeoutsOnInterceptor != null) -->Line_66 $$ aroundTimeoutsApplicableForMethod.addAll(aroundTimeoutsOnInterceptor)[ CD ]
Line_8 $$ if (ejbComponentDescription.isTimerServiceRequired()) -->Line_9 $$ userAroundTimeoutsByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()[ CD ]
Line_40 $$ final List<InterceptorFactory> aroundTimeoutsApplicableForMethod = new ArrayList<InterceptorFactory>()-->Line_82 $$ aroundTimeoutsApplicableForMethod.addAll(aroundTimeoutsOnInterceptor)[ FD ]
Line_14 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_44 $$ final List<InterceptorFactory> aroundInvokesOnInterceptor = userAroundInvokesByInterceptorClass.get(interceptorClassName)[ FD ]
Line_7 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass-->Line_11 $$ userAroundTimeoutsByInterceptorClass = null[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_42 $$ for (final InterceptorDescription interceptorDescription : ejbComponentDescription.getDefaultContainerInterceptors()) [ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_34 $$ final List<InterceptorDescription> classLevelContainerInterceptors = ejbComponentDescription.getClassLevelContainerInterceptors()[ FD ]
Line_50 $$ if (aroundTimeoutsOnInterceptor != null) -->Line_51 $$ aroundTimeoutsApplicableForMethod.addAll(aroundTimeoutsOnInterceptor)[ CD ]
Line_49 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)-->Line_51 $$ aroundTimeoutsApplicableForMethod.addAll(aroundTimeoutsOnInterceptor)[ FD ]
Line_7 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass-->Line_80 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_8 $$ if (ejbComponentDescription.isTimerServiceRequired()) -->Line_11 $$ userAroundTimeoutsByInterceptorClass = null[ CD ]
Line_14 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_19 $$ throw EeLogger.ROOT_LOGGER.cannotLoadInterceptor(e, interceptorClassName)[ FD ]
Line_27 $$ if (ejbComponentDescription.isTimerServiceRequired()) -->Line_29 $$ if (aroundTimeoutInterceptorFactories != null) [ CD ]
Line_7 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass-->Line_49 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_14 $$ final String interceptorClassName = interceptorDescription.getInterceptorClassName()-->Line_49 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_6 $$ final Map<String, List<InterceptorFactory>> userAroundInvokesByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()[ CD ]
Line_21 $$ final InterceptorClassDescriptionTraversal interceptorClassDescriptionTraversal = new InterceptorClassDescriptionTraversal(intereptorClass, applicationClasses, deploymentUnit, ejbComponentDescription)-->Line_23 $$ final List<InterceptorFactory> aroundInvokeInterceptorFactories = interceptorClassDescriptionTraversal.getAroundInvokeInterceptorFactories()[ FD ]
Line_44 $$ final List<InterceptorFactory> aroundInvokesOnInterceptor = userAroundInvokesByInterceptorClass.get(interceptorClassName)-->Line_45 $$ if (aroundInvokesOnInterceptor != null) [ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_56 $$ if (!ejbComponentDescription.isExcludeClassLevelContainerInterceptors(methodIdentifier)) [ FD ]
Line_21 $$ final InterceptorClassDescriptionTraversal interceptorClassDescriptionTraversal = new InterceptorClassDescriptionTraversal(intereptorClass, applicationClasses, deploymentUnit, ejbComponentDescription)-->Line_28 $$ final List<InterceptorFactory> aroundTimeoutInterceptorFactories = interceptorClassDescriptionTraversal.getAroundTimeoutInterceptorFactories()[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_41 $$ if (!ejbComponentDescription.isExcludeDefaultContainerInterceptors() && !ejbComponentDescription.isExcludeDefaultContainerInterceptors(methodIdentifier)) [ FD ]
Line_76 $$ if (aroundInvokesOnInterceptor != null) -->Line_77 $$ aroundInvokesApplicableForMethod.addAll(aroundInvokesOnInterceptor)[ CD ]
Line_49 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)-->Line_82 $$ aroundTimeoutsApplicableForMethod.addAll(aroundTimeoutsOnInterceptor)[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_35 $$ final Map<MethodIdentifier, List<InterceptorDescription>> methodLevelContainerInterceptors = ejbComponentDescription.getMethodLevelContainerInterceptors()[ FD ]
Line_39 $$ final List<InterceptorFactory> aroundInvokesApplicableForMethod = new ArrayList<InterceptorFactory>()-->Line_77 $$ aroundInvokesApplicableForMethod.addAll(aroundInvokesOnInterceptor)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()-->Line_4 $$ final EEApplicationClasses applicationClasses = deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION)[ FD ]
Line_21 $$ final InterceptorClassDescriptionTraversal interceptorClassDescriptionTraversal = new InterceptorClassDescriptionTraversal(intereptorClass, applicationClasses, deploymentUnit, ejbComponentDescription)-->Line_22 $$ interceptorClassDescriptionTraversal.run()[ FD ]
Line_73 $$ for (final InterceptorDescription methodLevelInterceptor : interceptorsForMethod) -->Line_74 $$ String interceptorClassName = methodLevelInterceptor.getInterceptorClassName()[ FD ]
Line_7 $$ final Map<String, List<InterceptorFactory>> userAroundTimeoutsByInterceptorClass-->Line_30 $$ userAroundTimeoutsByInterceptorClass.put(interceptorClassName, aroundTimeoutInterceptorFactories)[ FD ]
Line_13 $$ for (final InterceptorDescription interceptorDescription : ejbComponentDescription.getAllContainerInterceptors()) -->Line_43 $$ String interceptorClassName = interceptorDescription.getInterceptorClassName()[ FD ]
Line_11 $$ userAroundTimeoutsByInterceptorClass = null-->Line_30 $$ userAroundTimeoutsByInterceptorClass.put(interceptorClassName, aroundTimeoutInterceptorFactories)[ FD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_8 $$ if (ejbComponentDescription.isTimerServiceRequired()) [ CD ]
Line_2 $$ private void doConfigure(final DeploymentPhaseContext context, final EJBComponentDescription ejbComponentDescription, final ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException -->Line_79 $$ if (ejbComponentDescription.isTimerServiceRequired()) [ FD ]
Line_9 $$ userAroundTimeoutsByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_30 $$ userAroundTimeoutsByInterceptorClass.put(interceptorClassName, aroundTimeoutInterceptorFactories)[ FD ]
Line_28 $$ final List<InterceptorFactory> aroundTimeoutInterceptorFactories = interceptorClassDescriptionTraversal.getAroundTimeoutInterceptorFactories()-->Line_29 $$ if (aroundTimeoutInterceptorFactories != null) [ FD ]
Line_60 $$ if (aroundInvokesOnInterceptor != null) -->Line_61 $$ aroundInvokesApplicableForMethod.addAll(aroundInvokesOnInterceptor)[ CD ]
Line_37 $$ for (final Method method : viewMethods) -->Line_87 $$ viewConfiguration.addViewInterceptor(method, new UserInterceptorFactory(weaved(aroundInvokesApplicableForMethod), weaved(aroundTimeoutsApplicableForMethod)), InterceptorOrder.View.USER_APP_SPECIFIC_CONTAINER_INTERCEPTORS)[ FD ]
Line_44 $$ final List<InterceptorFactory> aroundInvokesOnInterceptor = userAroundInvokesByInterceptorClass.get(interceptorClassName)-->Line_60 $$ if (aroundInvokesOnInterceptor != null) [ FD ]
Line_9 $$ userAroundTimeoutsByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_64 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
Line_38 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(method.getReturnType(), method.getName(), method.getParameterTypes())-->Line_41 $$ if (!ejbComponentDescription.isExcludeDefaultContainerInterceptors() && !ejbComponentDescription.isExcludeDefaultContainerInterceptors(methodIdentifier)) [ FD ]
Line_9 $$ userAroundTimeoutsByInterceptorClass = new HashMap<String, List<InterceptorFactory>>()-->Line_49 $$ final List<InterceptorFactory> aroundTimeoutsOnInterceptor = userAroundTimeoutsByInterceptorClass.get(interceptorClassName)[ FD ]
