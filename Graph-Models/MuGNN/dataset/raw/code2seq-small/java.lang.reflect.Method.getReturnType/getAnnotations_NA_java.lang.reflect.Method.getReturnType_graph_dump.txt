Line_9 $$ Class<?> type = annotation.annotationType()-->Line_12 $$ ignoredType = ignoredAnnotations[i].equals(type)[ FD ]
Line_24 $$ for (Method method : methods) -->Line_28 $$ b.append(" ").append(method.getName()).append("() [ FD ]
Line_56 $$ for (int i = 0; i < length; i++) -->Line_57 $$ Object e = Array.get(invokeResult, i)[ FD ]
Line_32 $$ Object invokeResult = null-->Line_66 $$ Object n = Array.get(invokeResult, i)[ FD ]
Line_10 $$ boolean ignoredType = false-->Line_11 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) [ FD ]
Line_65 $$ for (int i = 0; i < length; i++) -->Line_68 $$ if (primitiveType.equals(float.class)) [ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_94 $$ return (numValidAnnotations > 0) ? b.toString() : "null"[ FD ]
Line_65 $$ for (int i = 0; i < length; i++) -->Line_66 $$ Object n = Array.get(invokeResult, i)[ FD ]
Line_2 $$ private String getAnnotations(Annotation[] annotations) -->Line_96 $$ return "null"[ CD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_30 $$ b.append(" new ").append(returnType.getCanonicalName()).append(" [ FD ]
Line_9 $$ Class<?> type = annotation.annotationType()-->Line_17 $$ Retention retention = type.getAnnotation(Retention.class)[ FD ]
Line_65 $$ for (int i = 0; i < length; i++) -->Line_71 $$ b.append(",")[ CD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_61 $$ b.append(" ").append(returnType.getCanonicalName()).append(".").append(invokeResult.toString())[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_27 $$ b.append(" ").append(returnType.getCanonicalName())[ FD ]
Line_82 $$ if (returnType.isArray()) -->Line_83 $$ b.append(" }")[ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_30 $$ b.append(" new ").append(returnType.getCanonicalName()).append(" [ FD ]
Line_32 $$ Object invokeResult = null-->Line_34 $$ invokeResult = method.invoke(annotation)[ FD ]
Line_56 $$ for (int i = 0; i < length; i++) -->Line_66 $$ Object n = Array.get(invokeResult, i)[ FD ]
Line_8 $$ for (Annotation annotation : annotations) -->Line_9 $$ Class<?> type = annotation.annotationType()[ FD ]
Line_60 $$ if (returnType.isEnum()) -->Line_61 $$ b.append(" ").append(returnType.getCanonicalName()).append(".").append(invokeResult.toString())[ CD ]
Line_57 $$ Object e = Array.get(invokeResult, i)-->Line_58 $$ b.append(" ").append(enumTypeName).append(".").append(e.toString()).append(",")[ FD ]
Line_3 $$ if (annotations != null && annotations.length > 0) -->Line_7 $$ b.append("new java.lang.annotation.Annotation[] [ CD ]
Line_75 $$ if (returnType.equals(float.class)) -->Line_76 $$ b.append("f")[ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_83 $$ b.append(" }")[ FD ]
Line_32 $$ Object invokeResult = null-->Line_74 $$ b.append(" ").append(invokeResult.toString())[ FD ]
Line_48 $$ for (Class c : (Class[]) invokeResult) -->Line_49 $$ b.append(" ").append(c.getCanonicalName()).append(".class,")[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_88 $$ b.append(" @Override public Class<? extends java.lang.annotation.Annotation> annotationType() [ FD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_60 $$ if (returnType.isEnum()) [ FD ]
Line_56 $$ for (int i = 0; i < length; i++) -->Line_65 $$ for (int i = 0; i < length; i++) [ FD ]
Line_34 $$ invokeResult = method.invoke(annotation)-->Line_66 $$ Object n = Array.get(invokeResult, i)[ FD ]
Line_53 $$ if (returnType.isArray() && returnType.getComponentType().isEnum()) -->Line_60 $$ if (returnType.isEnum()) [ CD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_63 $$ Class<?> primitiveType = returnType.getComponentType()[ FD ]
Line_65 $$ for (int i = 0; i < length; i++) -->Line_66 $$ Object n = Array.get(invokeResult, i)[ CD ]
Line_24 $$ for (Method method : methods) -->Line_34 $$ invokeResult = method.invoke(annotation)[ FD ]
Line_8 $$ for (Annotation annotation : annotations) -->Line_34 $$ invokeResult = method.invoke(annotation)[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_67 $$ b.append(" ").append(n.toString())[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_89 $$ b.append(type.getCanonicalName())[ FD ]
Line_34 $$ invokeResult = method.invoke(annotation)-->Line_55 $$ int length = Array.getLength(invokeResult)[ FD ]
Line_60 $$ if (returnType.isEnum()) -->Line_62 $$ if (returnType.isArray() && returnType.getComponentType().isPrimitive()) [ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_7 $$ b.append("new java.lang.annotation.Annotation[] [ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_91 $$ b.append("}, ")[ FD ]
Line_53 $$ if (returnType.isArray() && returnType.getComponentType().isEnum()) -->Line_55 $$ int length = Array.getLength(invokeResult)[ CD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_73 $$ if (returnType.isPrimitive()) [ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_52 $$ b.append(" ").append(((Class) invokeResult).getCanonicalName()).append(".class")[ FD ]
Line_73 $$ if (returnType.isPrimitive()) -->Line_74 $$ b.append(" ").append(invokeResult.toString())[ CD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_82 $$ if (returnType.isArray()) [ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_28 $$ b.append(" ").append(method.getName()).append("() [ FD ]
Line_32 $$ Object invokeResult = null-->Line_64 $$ int length = Array.getLength(invokeResult)[ FD ]
Line_2 $$ private String getAnnotations(Annotation[] annotations) -->Line_3 $$ if (annotations != null && annotations.length > 0) [ CD ]
Line_34 $$ invokeResult = method.invoke(annotation)-->Line_40 $$ if (invokeResult != null) [ FD ]
Line_68 $$ if (primitiveType.equals(float.class)) -->Line_69 $$ b.append("f")[ CD ]
Line_3 $$ if (annotations != null && annotations.length > 0) -->Line_6 $$ StringBuilder b = new StringBuilder()[ CD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_53 $$ if (returnType.isArray() && returnType.getComponentType().isEnum()) [ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_49 $$ b.append(" ").append(c.getCanonicalName()).append(".class,")[ FD ]
Line_34 $$ invokeResult = method.invoke(annotation)-->Line_57 $$ Object e = Array.get(invokeResult, i)[ FD ]
Line_34 $$ invokeResult = method.invoke(annotation)-->Line_61 $$ b.append(" ").append(returnType.getCanonicalName()).append(".").append(invokeResult.toString())[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_46 $$ b.append(" \"").append((String) invokeResult).append("\"")[ FD ]
Line_53 $$ if (returnType.isArray() && returnType.getComponentType().isEnum()) -->Line_56 $$ for (int i = 0; i < length; i++) [ CD ]
Line_32 $$ Object invokeResult = null-->Line_40 $$ if (invokeResult != null) [ FD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_54 $$ String enumTypeName = returnType.getComponentType().getCanonicalName()[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_90 $$ b.append(".class; }")[ FD ]
Line_11 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) -->Line_56 $$ for (int i = 0; i < length; i++) [ FD ]
Line_54 $$ String enumTypeName = returnType.getComponentType().getCanonicalName()-->Line_58 $$ b.append(" ").append(enumTypeName).append(".").append(e.toString()).append(",")[ FD ]
Line_62 $$ if (returnType.isArray() && returnType.getComponentType().isPrimitive()) -->Line_63 $$ Class<?> primitiveType = returnType.getComponentType()[ CD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_29 $$ if (returnType.isArray()) [ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_71 $$ b.append(",")[ FD ]
Line_12 $$ ignoredType = ignoredAnnotations[i].equals(type)-->Line_11 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) [ FD ]
Line_24 $$ for (Method method : methods) -->Line_25 $$ Class<?> returnType = method.getReturnType()[ FD ]
Line_55 $$ int length = Array.getLength(invokeResult)-->Line_56 $$ for (int i = 0; i < length; i++) [ FD ]
Line_3 $$ if (annotations != null && annotations.length > 0) -->Line_94 $$ return (numValidAnnotations > 0) ? b.toString() : "null"[ CD ]
Line_62 $$ if (returnType.isArray() && returnType.getComponentType().isPrimitive()) -->Line_65 $$ for (int i = 0; i < length; i++) [ CD ]
Line_66 $$ Object n = Array.get(invokeResult, i)-->Line_67 $$ b.append(" ").append(n.toString())[ FD ]
Line_11 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) -->Line_65 $$ for (int i = 0; i < length; i++) [ FD ]
Line_11 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) -->Line_66 $$ Object n = Array.get(invokeResult, i)[ FD ]
Line_32 $$ Object invokeResult = null-->Line_61 $$ b.append(" ").append(returnType.getCanonicalName()).append(".").append(invokeResult.toString())[ FD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_45 $$ if (returnType.equals(String.class)) [ FD ]
Line_51 $$ if (returnType.equals(Class.class)) -->Line_53 $$ if (returnType.isArray() && returnType.getComponentType().isEnum()) [ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_69 $$ b.append("f")[ FD ]
Line_40 $$ if (invokeResult != null) -->Line_41 $$ if (returnType.equals(String[].class)) [ CD ]
Line_4 $$ int numValidAnnotations = 0-->Line_21 $$ numValidAnnotations++[ FD ]
Line_51 $$ if (returnType.equals(Class.class)) -->Line_52 $$ b.append(" ").append(((Class) invokeResult).getCanonicalName()).append(".class")[ CD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_27 $$ b.append(" ").append(returnType.getCanonicalName())[ FD ]
Line_3 $$ if (annotations != null && annotations.length > 0) -->Line_93 $$ b.append("}")[ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_85 $$ b.append("; ")[ FD ]
Line_62 $$ if (returnType.isArray() && returnType.getComponentType().isPrimitive()) -->Line_64 $$ int length = Array.getLength(invokeResult)[ CD ]
Line_32 $$ Object invokeResult = null-->Line_55 $$ int length = Array.getLength(invokeResult)[ FD ]
Line_29 $$ if (returnType.isArray()) -->Line_30 $$ b.append(" new ").append(returnType.getCanonicalName()).append(" [ CD ]
Line_3 $$ if (annotations != null && annotations.length > 0) -->Line_4 $$ int numValidAnnotations = 0[ CD ]
Line_56 $$ for (int i = 0; i < length; i++) -->Line_58 $$ b.append(" ").append(enumTypeName).append(".").append(e.toString()).append(",")[ CD ]
Line_73 $$ if (returnType.isPrimitive()) -->Line_75 $$ if (returnType.equals(float.class)) [ CD ]
Line_34 $$ invokeResult = method.invoke(annotation)-->Line_74 $$ b.append(" ").append(invokeResult.toString())[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_74 $$ b.append(" ").append(invokeResult.toString())[ FD ]
Line_73 $$ if (returnType.isPrimitive()) -->Line_79 $$ logger.log(Type.ERROR, "Return type not supported (or not yet implemented).")[ CD ]
Line_45 $$ if (returnType.equals(String.class)) -->Line_47 $$ if (returnType.equals(Class[].class)) [ CD ]
Line_11 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) -->Line_12 $$ ignoredType = ignoredAnnotations[i].equals(type)[ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_76 $$ b.append("f")[ FD ]
Line_62 $$ if (returnType.isArray() && returnType.getComponentType().isPrimitive()) -->Line_73 $$ if (returnType.isPrimitive()) [ CD ]
Line_41 $$ if (returnType.equals(String[].class)) -->Line_45 $$ if (returnType.equals(String.class)) [ CD ]
Line_47 $$ if (returnType.equals(Class[].class)) -->Line_51 $$ if (returnType.equals(Class.class)) [ CD ]
Line_11 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) -->Line_57 $$ Object e = Array.get(invokeResult, i)[ FD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_62 $$ if (returnType.isArray() && returnType.getComponentType().isPrimitive()) [ FD ]
Line_55 $$ int length = Array.getLength(invokeResult)-->Line_65 $$ for (int i = 0; i < length; i++) [ FD ]
Line_63 $$ Class<?> primitiveType = returnType.getComponentType()-->Line_68 $$ if (primitiveType.equals(float.class)) [ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_43 $$ b.append(" \"").append(s).append("\",")[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_61 $$ b.append(" ").append(returnType.getCanonicalName()).append(".").append(invokeResult.toString())[ FD ]
Line_53 $$ if (returnType.isArray() && returnType.getComponentType().isEnum()) -->Line_54 $$ String enumTypeName = returnType.getComponentType().getCanonicalName()[ CD ]
Line_42 $$ for (String s : (String[]) invokeResult) -->Line_43 $$ b.append(" \"").append(s).append("\",")[ FD ]
Line_45 $$ if (returnType.equals(String.class)) -->Line_46 $$ b.append(" \"").append((String) invokeResult).append("\"")[ CD ]
Line_9 $$ Class<?> type = annotation.annotationType()-->Line_22 $$ b.append(" new ").append(type.getCanonicalName()).append("() [ FD ]
Line_32 $$ Object invokeResult = null-->Line_57 $$ Object e = Array.get(invokeResult, i)[ FD ]
Line_65 $$ for (int i = 0; i < length; i++) -->Line_67 $$ b.append(" ").append(n.toString())[ CD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_47 $$ if (returnType.equals(Class[].class)) [ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_86 $$ b.append("}")[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_22 $$ b.append(" new ").append(type.getCanonicalName()).append("() [ FD ]
Line_34 $$ invokeResult = method.invoke(annotation)-->Line_64 $$ int length = Array.getLength(invokeResult)[ FD ]
Line_10 $$ boolean ignoredType = false-->Line_12 $$ ignoredType = ignoredAnnotations[i].equals(type)[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_93 $$ b.append("}")[ FD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_75 $$ if (returnType.equals(float.class)) [ FD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_41 $$ if (returnType.equals(String[].class)) [ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_26 $$ b.append(" @Override public")[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_58 $$ b.append(" ").append(enumTypeName).append(".").append(e.toString()).append(",")[ FD ]
Line_3 $$ if (annotations != null && annotations.length > 0) -->Line_5 $$ final Class<?>[] ignoredAnnotations = [ CD ]
Line_56 $$ for (int i = 0; i < length; i++) -->Line_57 $$ Object e = Array.get(invokeResult, i)[ CD ]
Line_9 $$ Class<?> type = annotation.annotationType()-->Line_23 $$ Method[] methods = type.getDeclaredMethods()[ FD ]
Line_25 $$ Class<?> returnType = method.getReturnType()-->Line_51 $$ if (returnType.equals(Class.class)) [ FD ]
Line_9 $$ Class<?> type = annotation.annotationType()-->Line_89 $$ b.append(type.getCanonicalName())[ FD ]
Line_17 $$ Retention retention = type.getAnnotation(Retention.class)-->Line_18 $$ if (retention == null || retention.value() != RetentionPolicy.RUNTIME) [ FD ]
