Line_17 $$ Map<ParameterListKey, AssistedConstructor> paramsToConstructor = new HashMap()-->Line_22 $$ paramsToConstructor.put(c.getAssistedParameters(), c)[ FD ]
Line_17 $$ Map<ParameterListKey, AssistedConstructor> paramsToConstructor = new HashMap()-->Line_35 $$ throw newConfigurationException("%s has no @AssistInject constructor that takes the " + "@Assisted parameters %s in that order. @AssistInject constructors are %s", implementationType, methodParams, paramsToConstructor.values())[ FD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_14 $$ if (constructors.size() != factoryMethods.length) [ CD ]
Line_39 $$ for (Annotation parameterAnnotation : parameterAnnotations) -->Line_40 $$ if (parameterAnnotation.annotationType() == Assisted.class) [ FD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_27 $$ throw newConfigurationException("Return type of method %s is not assignable from %s", method, implementationType)[ FD ]
Line_33 $$ ParameterListKey methodParams = new ParameterListKey(parameterTypes)-->Line_45 $$ AssistedConstructor matchingConstructor = paramsToConstructor.remove(methodParams)[ FD ]
Line_25 $$ for (Method method : factoryMethods) -->Line_41 $$ throw newConfigurationException("Factory method %s has an @Assisted parameter, which " + "is incompatible with the deprecated @AssistedInject annotation. Please replace " + "@AssistedInject with @Inject on the %s constructor.", method, implementationType)[ FD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_6 $$ AssistedConstructor assistedConstructor = new AssistedConstructor(constructor, implementationType.getParameterTypes(constructor))[ FD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_4 $$ for (Constructor<?> constructor : implementationType.getRawType().getConstructors()) [ FD ]
Line_45 $$ AssistedConstructor matchingConstructor = paramsToConstructor.remove(methodParams)-->Line_46 $$ result.put(method, matchingConstructor)[ FD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_30 $$ for (TypeLiteral<?> parameterType : factoryType.getParameterTypes(method)) [ FD ]
Line_25 $$ for (Method method : factoryMethods) -->Line_26 $$ if (!method.getReturnType().isAssignableFrom(implementationType.getRawType())) [ FD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_24 $$ Map<Method, AssistedConstructor<?>> result = new HashMap()[ CD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_15 $$ throw newConfigurationException("Constructor mismatch: %s has %s @AssistedInject " + "constructors, factory %s has %s creation methods", implementationType, constructors.size(), factoryType, factoryMethods.length)[ FD ]
Line_3 $$ List<AssistedConstructor<?>> constructors = new ArrayList()-->Line_10 $$ if (constructors.isEmpty()) [ FD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_35 $$ throw newConfigurationException("%s has no @AssistInject constructor that takes the " + "@Assisted parameters %s in that order. @AssistInject constructors are %s", implementationType, methodParams, paramsToConstructor.values())[ FD ]
Line_30 $$ for (TypeLiteral<?> parameterType : factoryType.getParameterTypes(method)) -->Line_31 $$ parameterTypes.add(parameterType.getType())[ FD ]
Line_4 $$ for (Constructor<?> constructor : implementationType.getRawType().getConstructors()) -->Line_5 $$ if (constructor.getAnnotation(AssistedInject.class) != null) [ FD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_10 $$ if (constructors.isEmpty()) [ CD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_26 $$ if (!method.getReturnType().isAssignableFrom(implementationType.getRawType())) [ FD ]
Line_25 $$ for (Method method : factoryMethods) -->Line_37 $$ method.getParameterAnnotations()[ FD ]
Line_25 $$ for (Method method : factoryMethods) -->Line_30 $$ for (TypeLiteral<?> parameterType : factoryType.getParameterTypes(method)) [ FD ]
Line_18 $$ for (AssistedConstructor c : constructors) -->Line_22 $$ paramsToConstructor.put(c.getAssistedParameters(), c)[ FD ]
Line_17 $$ Map<ParameterListKey, AssistedConstructor> paramsToConstructor = new HashMap()-->Line_45 $$ AssistedConstructor matchingConstructor = paramsToConstructor.remove(methodParams)[ FD ]
Line_25 $$ for (Method method : factoryMethods) -->Line_46 $$ result.put(method, matchingConstructor)[ FD ]
Line_17 $$ Map<ParameterListKey, AssistedConstructor> paramsToConstructor = new HashMap()-->Line_19 $$ if (paramsToConstructor.containsKey(c.getAssistedParameters())) [ FD ]
Line_33 $$ ParameterListKey methodParams = new ParameterListKey(parameterTypes)-->Line_35 $$ throw newConfigurationException("%s has no @AssistInject constructor that takes the " + "@Assisted parameters %s in that order. @AssistInject constructors are %s", implementationType, methodParams, paramsToConstructor.values())[ FD ]
Line_29 $$ List<Type> parameterTypes = new ArrayList()-->Line_31 $$ parameterTypes.add(parameterType.getType())[ FD ]
Line_25 $$ for (Method method : factoryMethods) -->Line_38 $$ for (Annotation[] parameterAnnotations : method.getParameterAnnotations()) [ FD ]
Line_5 $$ if (constructor.getAnnotation(AssistedInject.class) != null) -->Line_6 $$ AssistedConstructor assistedConstructor = new AssistedConstructor(constructor, implementationType.getParameterTypes(constructor))[ CD ]
Line_10 $$ if (constructors.isEmpty()) -->Line_11 $$ return emptyMap()[ CD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_13 $$ Method[] factoryMethods = factoryType.getRawType().getMethods()[ FD ]
Line_25 $$ for (Method method : factoryMethods) -->Line_27 $$ throw newConfigurationException("Return type of method %s is not assignable from %s", method, implementationType)[ FD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_17 $$ Map<ParameterListKey, AssistedConstructor> paramsToConstructor = new HashMap()[ CD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_13 $$ Method[] factoryMethods = factoryType.getRawType().getMethods()[ CD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_3 $$ List<AssistedConstructor<?>> constructors = new ArrayList()[ CD ]
Line_18 $$ for (AssistedConstructor c : constructors) -->Line_19 $$ if (paramsToConstructor.containsKey(c.getAssistedParameters())) [ FD ]
Line_5 $$ if (constructor.getAnnotation(AssistedInject.class) != null) -->Line_7 $$ constructors.add(assistedConstructor)[ CD ]
Line_33 $$ ParameterListKey methodParams = new ParameterListKey(parameterTypes)-->Line_34 $$ if (!paramsToConstructor.containsKey(methodParams)) [ FD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_48 $$ return result[ CD ]
Line_3 $$ List<AssistedConstructor<?>> constructors = new ArrayList()-->Line_14 $$ if (constructors.size() != factoryMethods.length) [ FD ]
Line_3 $$ List<AssistedConstructor<?>> constructors = new ArrayList()-->Line_15 $$ throw newConfigurationException("Constructor mismatch: %s has %s @AssistedInject " + "constructors, factory %s has %s creation methods", implementationType, constructors.size(), factoryType, factoryMethods.length)[ FD ]
Line_17 $$ Map<ParameterListKey, AssistedConstructor> paramsToConstructor = new HashMap()-->Line_34 $$ if (!paramsToConstructor.containsKey(methodParams)) [ FD ]
Line_2 $$ private static Map<Method, AssistedConstructor<?>> createMethodMapping(TypeLiteral<?> factoryType, TypeLiteral<?> implementationType) -->Line_41 $$ throw newConfigurationException("Factory method %s has an @Assisted parameter, which " + "is incompatible with the deprecated @AssistedInject annotation. Please replace " + "@AssistedInject with @Inject on the %s constructor.", method, implementationType)[ FD ]
Line_3 $$ List<AssistedConstructor<?>> constructors = new ArrayList()-->Line_7 $$ constructors.add(assistedConstructor)[ FD ]
Line_24 $$ Map<Method, AssistedConstructor<?>> result = new HashMap()-->Line_46 $$ result.put(method, matchingConstructor)[ FD ]
Line_4 $$ for (Constructor<?> constructor : implementationType.getRawType().getConstructors()) -->Line_6 $$ AssistedConstructor assistedConstructor = new AssistedConstructor(constructor, implementationType.getParameterTypes(constructor))[ FD ]
Line_6 $$ AssistedConstructor assistedConstructor = new AssistedConstructor(constructor, implementationType.getParameterTypes(constructor))-->Line_7 $$ constructors.add(assistedConstructor)[ FD ]
