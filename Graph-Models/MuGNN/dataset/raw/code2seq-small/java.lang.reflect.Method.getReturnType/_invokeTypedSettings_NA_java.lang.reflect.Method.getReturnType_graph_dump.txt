Line_10 $$ if (returnType.equals(int.class)) -->Line_11 $$ return _typedSettings.getIntegerValue(method.getName())[ CD ]
Line_3 $$ Class<?> returnType = method.getReturnType()-->Line_18 $$ if (returnType.equals(String[].class)) [ FD ]
Line_8 $$ if (returnType.equals(float.class)) -->Line_10 $$ if (returnType.equals(int.class)) [ CD ]
Line_3 $$ Class<?> returnType = method.getReturnType()-->Line_14 $$ if (returnType.equals(long.class)) [ FD ]
Line_16 $$ if (returnType.equals(String.class)) -->Line_17 $$ return _typedSettings.getValue(method.getName())[ CD ]
Line_16 $$ if (returnType.equals(String.class)) -->Line_18 $$ if (returnType.equals(String[].class)) [ CD ]
Line_4 $$ if (returnType.equals(boolean.class)) -->Line_6 $$ if (returnType.equals(double.class)) [ CD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_22 $$ return constructor.newInstance(_typedSettings.getValue(method.getName()))[ CD ]
Line_6 $$ if (returnType.equals(double.class)) -->Line_7 $$ return _typedSettings.getDoubleValue(method.getName())[ CD ]
Line_4 $$ if (returnType.equals(boolean.class)) -->Line_5 $$ return _typedSettings.getBooleanValue(method.getName())[ CD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_13 $$ return _typedSettings.getLocalizedValuesMap(method.getName())[ FD ]
Line_3 $$ Class<?> returnType = method.getReturnType()-->Line_10 $$ if (returnType.equals(int.class)) [ FD ]
Line_3 $$ Class<?> returnType = method.getReturnType()-->Line_12 $$ if (returnType.equals(LocalizedValuesMap.class)) [ FD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_19 $$ return _typedSettings.getValues(method.getName())[ FD ]
Line_18 $$ if (returnType.equals(String[].class)) -->Line_19 $$ return _typedSettings.getValues(method.getName())[ CD ]
Line_12 $$ if (returnType.equals(LocalizedValuesMap.class)) -->Line_13 $$ return _typedSettings.getLocalizedValuesMap(method.getName())[ CD ]
Line_14 $$ if (returnType.equals(long.class)) -->Line_15 $$ return _typedSettings.getLongValue(method.getName())[ CD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_22 $$ return constructor.newInstance(_typedSettings.getValue(method.getName()))[ FD ]
Line_8 $$ if (returnType.equals(float.class)) -->Line_9 $$ return _typedSettings.getFloatValue(method.getName())[ CD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_21 $$ Constructor<?> constructor = returnType.getConstructor(String.class)[ CD ]
Line_3 $$ Class<?> returnType = method.getReturnType()-->Line_16 $$ if (returnType.equals(String.class)) [ FD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_5 $$ return _typedSettings.getBooleanValue(method.getName())[ FD ]
Line_3 $$ Class<?> returnType = method.getReturnType()-->Line_21 $$ Constructor<?> constructor = returnType.getConstructor(String.class)[ FD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_7 $$ return _typedSettings.getDoubleValue(method.getName())[ FD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_3 $$ Class<?> returnType = method.getReturnType()[ FD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_11 $$ return _typedSettings.getIntegerValue(method.getName())[ FD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_9 $$ return _typedSettings.getFloatValue(method.getName())[ FD ]
Line_3 $$ Class<?> returnType = method.getReturnType()-->Line_8 $$ if (returnType.equals(float.class)) [ FD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_17 $$ return _typedSettings.getValue(method.getName())[ FD ]
Line_14 $$ if (returnType.equals(long.class)) -->Line_16 $$ if (returnType.equals(String.class)) [ CD ]
Line_12 $$ if (returnType.equals(LocalizedValuesMap.class)) -->Line_14 $$ if (returnType.equals(long.class)) [ CD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_3 $$ Class<?> returnType = method.getReturnType()[ CD ]
Line_6 $$ if (returnType.equals(double.class)) -->Line_8 $$ if (returnType.equals(float.class)) [ CD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_15 $$ return _typedSettings.getLongValue(method.getName())[ FD ]
Line_10 $$ if (returnType.equals(int.class)) -->Line_12 $$ if (returnType.equals(LocalizedValuesMap.class)) [ CD ]
Line_21 $$ Constructor<?> constructor = returnType.getConstructor(String.class)-->Line_22 $$ return constructor.newInstance(_typedSettings.getValue(method.getName()))[ FD ]
Line_3 $$ Class<?> returnType = method.getReturnType()-->Line_4 $$ if (returnType.equals(boolean.class)) [ FD ]
Line_2 $$ private Object _invokeTypedSettings(Method method) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException -->Line_4 $$ if (returnType.equals(boolean.class)) [ CD ]
Line_3 $$ Class<?> returnType = method.getReturnType()-->Line_6 $$ if (returnType.equals(double.class)) [ FD ]
