Line_10 $$ if (methodName.startsWith("get") && methodName.length() > 3 && !method.getReturnType().equals(Void.TYPE) && parameterTypes.length == 0) -->Line_13 $$ if (methodName.startsWith("is") && methodName.length() > 2 && (method.getReturnType().equals(Boolean.class) || method.getReturnType().equals(Boolean.TYPE)) && parameterTypes.length == 0) [ CD ]
Line_3 $$ for (Method method : type.getDeclaredMethods()) -->Line_12 $$ classDetails.property(propertyName).addGetter(method)[ FD ]
Line_9 $$ String methodName = method.getName()-->Line_11 $$ String propertyName = propertyName(methodName, 3)[ FD ]
Line_2 $$ private static void inspectClass(Class<?> type, MutableClassDetails classDetails) -->Line_3 $$ for (Method method : type.getDeclaredMethods()) [ FD ]
Line_13 $$ if (methodName.startsWith("is") && methodName.length() > 2 && (method.getReturnType().equals(Boolean.class) || method.getReturnType().equals(Boolean.TYPE)) && parameterTypes.length == 0) -->Line_14 $$ String propertyName = propertyName(methodName, 2)[ CD ]
Line_9 $$ String methodName = method.getName()-->Line_17 $$ String propertyName = propertyName(methodName, 3)[ FD ]
Line_2 $$ private static void inspectClass(Class<?> type, MutableClassDetails classDetails) -->Line_12 $$ classDetails.property(propertyName).addGetter(method)[ FD ]
Line_13 $$ if (methodName.startsWith("is") && methodName.length() > 2 && (method.getReturnType().equals(Boolean.class) || method.getReturnType().equals(Boolean.TYPE)) && parameterTypes.length == 0) -->Line_16 $$ if (methodName.startsWith("set") && methodName.length() > 3 && parameterTypes.length == 1) [ CD ]
Line_9 $$ String methodName = method.getName()-->Line_16 $$ if (methodName.startsWith("set") && methodName.length() > 3 && parameterTypes.length == 1) [ FD ]
Line_3 $$ for (Method method : type.getDeclaredMethods()) -->Line_18 $$ classDetails.property(propertyName).addSetter(method)[ FD ]
Line_3 $$ for (Method method : type.getDeclaredMethods()) -->Line_15 $$ classDetails.property(propertyName).addGetter(method)[ FD ]
Line_2 $$ private static void inspectClass(Class<?> type, MutableClassDetails classDetails) -->Line_4 $$ classDetails.method(method)[ FD ]
Line_3 $$ for (Method method : type.getDeclaredMethods()) -->Line_9 $$ String methodName = method.getName()[ FD ]
Line_3 $$ for (Method method : type.getDeclaredMethods()) -->Line_8 $$ Class<?>[] parameterTypes = method.getParameterTypes()[ FD ]
Line_10 $$ if (methodName.startsWith("get") && methodName.length() > 3 && !method.getReturnType().equals(Void.TYPE) && parameterTypes.length == 0) -->Line_12 $$ classDetails.property(propertyName).addGetter(method)[ CD ]
Line_13 $$ if (methodName.startsWith("is") && methodName.length() > 2 && (method.getReturnType().equals(Boolean.class) || method.getReturnType().equals(Boolean.TYPE)) && parameterTypes.length == 0) -->Line_15 $$ classDetails.property(propertyName).addGetter(method)[ CD ]
Line_2 $$ private static void inspectClass(Class<?> type, MutableClassDetails classDetails) -->Line_18 $$ classDetails.property(propertyName).addSetter(method)[ FD ]
Line_16 $$ if (methodName.startsWith("set") && methodName.length() > 3 && parameterTypes.length == 1) -->Line_20 $$ classDetails.instanceMethod(method)[ CD ]
Line_9 $$ String methodName = method.getName()-->Line_13 $$ if (methodName.startsWith("is") && methodName.length() > 2 && (method.getReturnType().equals(Boolean.class) || method.getReturnType().equals(Boolean.TYPE)) && parameterTypes.length == 0) [ FD ]
Line_11 $$ String propertyName = propertyName(methodName, 3)-->Line_18 $$ classDetails.property(propertyName).addSetter(method)[ FD ]
Line_3 $$ for (Method method : type.getDeclaredMethods()) -->Line_13 $$ if (methodName.startsWith("is") && methodName.length() > 2 && (method.getReturnType().equals(Boolean.class) || method.getReturnType().equals(Boolean.TYPE)) && parameterTypes.length == 0) [ FD ]
Line_3 $$ for (Method method : type.getDeclaredMethods()) -->Line_4 $$ classDetails.method(method)[ FD ]
Line_11 $$ String propertyName = propertyName(methodName, 3)-->Line_12 $$ classDetails.property(propertyName).addGetter(method)[ FD ]
Line_9 $$ String methodName = method.getName()-->Line_10 $$ if (methodName.startsWith("get") && methodName.length() > 3 && !method.getReturnType().equals(Void.TYPE) && parameterTypes.length == 0) [ FD ]
Line_3 $$ for (Method method : type.getDeclaredMethods()) -->Line_20 $$ classDetails.instanceMethod(method)[ FD ]
Line_16 $$ if (methodName.startsWith("set") && methodName.length() > 3 && parameterTypes.length == 1) -->Line_18 $$ classDetails.property(propertyName).addSetter(method)[ CD ]
Line_11 $$ String propertyName = propertyName(methodName, 3)-->Line_15 $$ classDetails.property(propertyName).addGetter(method)[ FD ]
Line_9 $$ String methodName = method.getName()-->Line_14 $$ String propertyName = propertyName(methodName, 2)[ FD ]
Line_10 $$ if (methodName.startsWith("get") && methodName.length() > 3 && !method.getReturnType().equals(Void.TYPE) && parameterTypes.length == 0) -->Line_11 $$ String propertyName = propertyName(methodName, 3)[ CD ]
Line_3 $$ for (Method method : type.getDeclaredMethods()) -->Line_10 $$ if (methodName.startsWith("get") && methodName.length() > 3 && !method.getReturnType().equals(Void.TYPE) && parameterTypes.length == 0) [ FD ]
Line_2 $$ private static void inspectClass(Class<?> type, MutableClassDetails classDetails) -->Line_15 $$ classDetails.property(propertyName).addGetter(method)[ FD ]
Line_3 $$ for (Method method : type.getDeclaredMethods()) -->Line_5 $$ if (Modifier.isPrivate(method.getModifiers()) || Modifier.isStatic(method.getModifiers()) || method.isBridge()) [ FD ]
Line_2 $$ private static void inspectClass(Class<?> type, MutableClassDetails classDetails) -->Line_20 $$ classDetails.instanceMethod(method)[ FD ]
Line_16 $$ if (methodName.startsWith("set") && methodName.length() > 3 && parameterTypes.length == 1) -->Line_17 $$ String propertyName = propertyName(methodName, 3)[ CD ]
