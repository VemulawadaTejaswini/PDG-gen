Line_2 $$ private static Method determineToMethod(Class<?> targetClass, Class<?> sourceClass) -->Line_7 $$ return (method != null && !Modifier.isStatic(method.getModifiers()) && ClassUtils.isAssignable(targetClass, method.getReturnType()) ? method : null)[ FD ]
Line_3 $$ if (String.class == targetClass || String.class == sourceClass) -->Line_4 $$ return null[ CD ]
Line_6 $$ Method method = ClassUtils.getMethodIfAvailable(sourceClass, "to" + targetClass.getSimpleName())-->Line_7 $$ return (method != null && !Modifier.isStatic(method.getModifiers()) && ClassUtils.isAssignable(targetClass, method.getReturnType()) ? method : null)[ FD ]
Line_2 $$ private static Method determineToMethod(Class<?> targetClass, Class<?> sourceClass) -->Line_3 $$ if (String.class == targetClass || String.class == sourceClass) [ CD ]
Line_2 $$ private static Method determineToMethod(Class<?> targetClass, Class<?> sourceClass) -->Line_6 $$ Method method = ClassUtils.getMethodIfAvailable(sourceClass, "to" + targetClass.getSimpleName())[ CD ]
Line_2 $$ private static Method determineToMethod(Class<?> targetClass, Class<?> sourceClass) -->Line_6 $$ Method method = ClassUtils.getMethodIfAvailable(sourceClass, "to" + targetClass.getSimpleName())[ FD ]
Line_2 $$ private static Method determineToMethod(Class<?> targetClass, Class<?> sourceClass) -->Line_7 $$ return (method != null && !Modifier.isStatic(method.getModifiers()) && ClassUtils.isAssignable(targetClass, method.getReturnType()) ? method : null)[ CD ]
