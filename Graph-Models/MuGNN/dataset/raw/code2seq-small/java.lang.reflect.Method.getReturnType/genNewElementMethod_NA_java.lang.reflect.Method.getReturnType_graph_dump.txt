Line_7 $$ if (params.length == 0) -->Line_8 $$ puts(0, ") [ CD ]
Line_2 $$ void genNewElementMethod(String className, Method method, int indent) -->Line_5 $$ Class<?>[] params = method.getParameterTypes()[ CD ]
Line_10 $$ if (params.length == 1) -->Line_11 $$ puts(0, "String selector) [ CD ]
Line_2 $$ void genNewElementMethod(String className, Method method, int indent) -->Line_9 $$ puts(indent, topMode ? "" : "  closeAttrs();\n", "  return ", retName.toLowerCase(Locale.US), "_(this, ", isInline(className, retName), ");\n", "}")[ FD ]
Line_4 $$ String retName = method.getReturnType().getSimpleName()-->Line_9 $$ puts(indent, topMode ? "" : "  closeAttrs();\n", "  return ", retName.toLowerCase(Locale.US), "_(this, ", isInline(className, retName), ");\n", "}")[ FD ]
Line_3 $$ String methodName = method.getName()-->Line_6 $$ echo(indent, "\n", "@Override\n", "public ", retName, "<", className, topMode ? "> " : "<T>> ", methodName, "(")[ FD ]
Line_2 $$ void genNewElementMethod(String className, Method method, int indent) -->Line_3 $$ String methodName = method.getName()[ FD ]
Line_7 $$ if (params.length == 0) -->Line_9 $$ puts(indent, topMode ? "" : "  closeAttrs();\n", "  return ", retName.toLowerCase(Locale.US), "_(this, ", isInline(className, retName), ");\n", "}")[ CD ]
Line_2 $$ void genNewElementMethod(String className, Method method, int indent) -->Line_14 $$ throwUnhandled(className, method)[ FD ]
Line_2 $$ void genNewElementMethod(String className, Method method, int indent) -->Line_3 $$ String methodName = method.getName()[ CD ]
Line_2 $$ void genNewElementMethod(String className, Method method, int indent) -->Line_6 $$ echo(indent, "\n", "@Override\n", "public ", retName, "<", className, topMode ? "> " : "<T>> ", methodName, "(")[ FD ]
Line_2 $$ void genNewElementMethod(String className, Method method, int indent) -->Line_4 $$ String retName = method.getReturnType().getSimpleName()[ CD ]
Line_2 $$ void genNewElementMethod(String className, Method method, int indent) -->Line_7 $$ if (params.length == 0) [ CD ]
Line_2 $$ void genNewElementMethod(String className, Method method, int indent) -->Line_6 $$ echo(indent, "\n", "@Override\n", "public ", retName, "<", className, topMode ? "> " : "<T>> ", methodName, "(")[ CD ]
Line_3 $$ String methodName = method.getName()-->Line_12 $$ puts(indent, "  return setSelector(", methodName, "(), selector);\n", "}")[ FD ]
Line_10 $$ if (params.length == 1) -->Line_14 $$ throwUnhandled(className, method)[ CD ]
Line_7 $$ if (params.length == 0) -->Line_10 $$ if (params.length == 1) [ CD ]
Line_2 $$ void genNewElementMethod(String className, Method method, int indent) -->Line_5 $$ Class<?>[] params = method.getParameterTypes()[ FD ]
Line_4 $$ String retName = method.getReturnType().getSimpleName()-->Line_6 $$ echo(indent, "\n", "@Override\n", "public ", retName, "<", className, topMode ? "> " : "<T>> ", methodName, "(")[ FD ]
Line_2 $$ void genNewElementMethod(String className, Method method, int indent) -->Line_4 $$ String retName = method.getReturnType().getSimpleName()[ FD ]
Line_2 $$ void genNewElementMethod(String className, Method method, int indent) -->Line_12 $$ puts(indent, "  return setSelector(", methodName, "(), selector);\n", "}")[ FD ]
Line_10 $$ if (params.length == 1) -->Line_12 $$ puts(indent, "  return setSelector(", methodName, "(), selector);\n", "}")[ CD ]
