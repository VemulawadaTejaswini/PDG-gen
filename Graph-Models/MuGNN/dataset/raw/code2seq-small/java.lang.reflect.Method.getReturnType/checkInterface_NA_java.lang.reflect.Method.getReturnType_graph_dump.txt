Line_7 $$ Map<String, Class<?>> fieldTypes = new HashMap()-->Line_22 $$ checkArgument(fieldTypes.get(name).equals(method.getReturnType()), "Expected %s to return type %s, but found %s", method.getName(), fieldTypes.get(name), method.getReturnType())[ FD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_23 $$ checkArgument(method.getParameterTypes().length == 0, "Expected %s to have zero parameters", method.getName())[ FD ]
Line_2 $$ private static void checkInterface(Class<?> clazz, List<StateField> fields) -->Line_3 $$ checkArgument(clazz.isInterface(), clazz.getName() + " is not an interface")[ FD ]
Line_5 $$ Set<String> getters = new HashSet()-->Line_24 $$ getters.add(name)[ FD ]
Line_25 $$ if (method.getName().startsWith("is")) -->Line_31 $$ if (method.getName().startsWith("set")) [ CD ]
Line_21 $$ String name = method.getName().substring(3)-->Line_27 $$ checkArgument(fieldTypes.get(name) == boolean.class, "Expected %s to have type boolean, but found %s", name, fieldTypes.get(name))[ FD ]
Line_25 $$ if (method.getName().startsWith("is")) -->Line_29 $$ checkArgument(method.getReturnType() == boolean.class, "Expected %s to return boolean", method.getName())[ CD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_35 $$ checkArgument(getInitialValue(method) == null, "initial value annotation not allowed on setter")[ FD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_32 $$ String name = method.getName().substring(3)[ FD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_34 $$ checkArgument(fieldTypes.get(name).equals(method.getParameterTypes()[0]), "Expected %s to accept type %s, but found %s", method.getName(), fieldTypes.get(name), method.getParameterTypes()[0])[ FD ]
Line_31 $$ if (method.getName().startsWith("set")) -->Line_32 $$ String name = method.getName().substring(3)[ CD ]
Line_7 $$ Map<String, Class<?>> fieldTypes = new HashMap()-->Line_9 $$ fieldTypes.put(field.getName(), field.getType())[ FD ]
Line_25 $$ if (method.getName().startsWith("is")) -->Line_30 $$ isGetters.add(name)[ CD ]
Line_20 $$ if (method.getName().startsWith("get")) -->Line_23 $$ checkArgument(method.getParameterTypes().length == 0, "Expected %s to have zero parameters", method.getName())[ CD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_22 $$ checkArgument(fieldTypes.get(name).equals(method.getReturnType()), "Expected %s to return type %s, but found %s", method.getName(), fieldTypes.get(name), method.getReturnType())[ FD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_39 $$ throw new IllegalArgumentException("Cannot generate implementation for method: " + method.getName())[ FD ]
Line_20 $$ if (method.getName().startsWith("get")) -->Line_24 $$ getters.add(name)[ CD ]
Line_5 $$ Set<String> getters = new HashSet()-->Line_42 $$ checkArgument(getters.size() + isGetters.size() == setters.size() && setters.size() == fields.size(), "Wrong number of getters/setters")[ FD ]
Line_31 $$ if (method.getName().startsWith("set")) -->Line_36 $$ checkArgument(method.getReturnType().equals(void.class), "%s may not return a value", method.getName())[ CD ]
Line_21 $$ String name = method.getName().substring(3)-->Line_37 $$ setters.add(name)[ FD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_17 $$ checkArgument(method.getParameterTypes().length == 0, "getEstimatedSize may not have parameters")[ FD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_15 $$ if (method.getName().equals("getEstimatedSize")) [ FD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_31 $$ if (method.getName().startsWith("set")) [ FD ]
Line_7 $$ Map<String, Class<?>> fieldTypes = new HashMap()-->Line_34 $$ checkArgument(fieldTypes.get(name).equals(method.getParameterTypes()[0]), "Expected %s to accept type %s, but found %s", method.getName(), fieldTypes.get(name), method.getParameterTypes()[0])[ FD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_20 $$ if (method.getName().startsWith("get")) [ FD ]
Line_2 $$ private static void checkInterface(Class<?> clazz, List<StateField> fields) -->Line_42 $$ checkArgument(getters.size() + isGetters.size() == setters.size() && setters.size() == fields.size(), "Wrong number of getters/setters")[ CD ]
Line_15 $$ if (method.getName().equals("getEstimatedSize")) -->Line_16 $$ checkArgument(method.getReturnType().equals(long.class), "getEstimatedSize must return long")[ CD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_33 $$ checkArgument(method.getParameterTypes().length == 1, "Expected setter to have one parameter")[ FD ]
Line_25 $$ if (method.getName().startsWith("is")) -->Line_26 $$ String name = method.getName().substring(2)[ CD ]
Line_21 $$ String name = method.getName().substring(3)-->Line_34 $$ checkArgument(fieldTypes.get(name).equals(method.getParameterTypes()[0]), "Expected %s to accept type %s, but found %s", method.getName(), fieldTypes.get(name), method.getParameterTypes()[0])[ FD ]
Line_20 $$ if (method.getName().startsWith("get")) -->Line_21 $$ String name = method.getName().substring(3)[ CD ]
Line_20 $$ if (method.getName().startsWith("get")) -->Line_25 $$ if (method.getName().startsWith("is")) [ CD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_25 $$ if (method.getName().startsWith("is")) [ FD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_36 $$ checkArgument(method.getReturnType().equals(void.class), "%s may not return a value", method.getName())[ FD ]
Line_31 $$ if (method.getName().startsWith("set")) -->Line_34 $$ checkArgument(fieldTypes.get(name).equals(method.getParameterTypes()[0]), "Expected %s to accept type %s, but found %s", method.getName(), fieldTypes.get(name), method.getParameterTypes()[0])[ CD ]
Line_31 $$ if (method.getName().startsWith("set")) -->Line_37 $$ setters.add(name)[ CD ]
Line_4 $$ Set<String> setters = new HashSet()-->Line_42 $$ checkArgument(getters.size() + isGetters.size() == setters.size() && setters.size() == fields.size(), "Wrong number of getters/setters")[ FD ]
Line_25 $$ if (method.getName().startsWith("is")) -->Line_27 $$ checkArgument(fieldTypes.get(name) == boolean.class, "Expected %s to have type boolean, but found %s", name, fieldTypes.get(name))[ CD ]
Line_6 $$ Set<String> isGetters = new HashSet()-->Line_42 $$ checkArgument(getters.size() + isGetters.size() == setters.size() && setters.size() == fields.size(), "Wrong number of getters/setters")[ FD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_26 $$ String name = method.getName().substring(2)[ FD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_28 $$ checkArgument(method.getParameterTypes().length == 0, "Expected %s to have zero parameters", method.getName())[ FD ]
Line_2 $$ private static void checkInterface(Class<?> clazz, List<StateField> fields) -->Line_3 $$ checkArgument(clazz.isInterface(), clazz.getName() + " is not an interface")[ CD ]
Line_31 $$ if (method.getName().startsWith("set")) -->Line_33 $$ checkArgument(method.getParameterTypes().length == 1, "Expected setter to have one parameter")[ CD ]
Line_2 $$ private static void checkInterface(Class<?> clazz, List<StateField> fields) -->Line_7 $$ Map<String, Class<?>> fieldTypes = new HashMap()[ CD ]
Line_2 $$ private static void checkInterface(Class<?> clazz, List<StateField> fields) -->Line_5 $$ Set<String> getters = new HashSet()[ CD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_12 $$ if (Modifier.isStatic(method.getModifiers())) [ FD ]
Line_2 $$ private static void checkInterface(Class<?> clazz, List<StateField> fields) -->Line_4 $$ Set<String> setters = new HashSet()[ CD ]
Line_4 $$ Set<String> setters = new HashSet()-->Line_37 $$ setters.add(name)[ FD ]
Line_25 $$ if (method.getName().startsWith("is")) -->Line_28 $$ checkArgument(method.getParameterTypes().length == 0, "Expected %s to have zero parameters", method.getName())[ CD ]
Line_21 $$ String name = method.getName().substring(3)-->Line_30 $$ isGetters.add(name)[ FD ]
Line_21 $$ String name = method.getName().substring(3)-->Line_22 $$ checkArgument(fieldTypes.get(name).equals(method.getReturnType()), "Expected %s to return type %s, but found %s", method.getName(), fieldTypes.get(name), method.getReturnType())[ FD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_29 $$ checkArgument(method.getReturnType() == boolean.class, "Expected %s to return boolean", method.getName())[ FD ]
Line_31 $$ if (method.getName().startsWith("set")) -->Line_35 $$ checkArgument(getInitialValue(method) == null, "initial value annotation not allowed on setter")[ CD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_16 $$ checkArgument(method.getReturnType().equals(long.class), "getEstimatedSize must return long")[ FD ]
Line_6 $$ Set<String> isGetters = new HashSet()-->Line_30 $$ isGetters.add(name)[ FD ]
Line_8 $$ for (StateField field : fields) -->Line_9 $$ fieldTypes.put(field.getName(), field.getType())[ FD ]
Line_20 $$ if (method.getName().startsWith("get")) -->Line_22 $$ checkArgument(fieldTypes.get(name).equals(method.getReturnType()), "Expected %s to return type %s, but found %s", method.getName(), fieldTypes.get(name), method.getReturnType())[ CD ]
Line_11 $$ for (Method method : clazz.getMethods()) -->Line_21 $$ String name = method.getName().substring(3)[ FD ]
Line_15 $$ if (method.getName().equals("getEstimatedSize")) -->Line_17 $$ checkArgument(method.getParameterTypes().length == 0, "getEstimatedSize may not have parameters")[ CD ]
Line_21 $$ String name = method.getName().substring(3)-->Line_24 $$ getters.add(name)[ FD ]
Line_2 $$ private static void checkInterface(Class<?> clazz, List<StateField> fields) -->Line_42 $$ checkArgument(getters.size() + isGetters.size() == setters.size() && setters.size() == fields.size(), "Wrong number of getters/setters")[ FD ]
Line_7 $$ Map<String, Class<?>> fieldTypes = new HashMap()-->Line_27 $$ checkArgument(fieldTypes.get(name) == boolean.class, "Expected %s to have type boolean, but found %s", name, fieldTypes.get(name))[ FD ]
Line_2 $$ private static void checkInterface(Class<?> clazz, List<StateField> fields) -->Line_11 $$ for (Method method : clazz.getMethods()) [ FD ]
Line_2 $$ private static void checkInterface(Class<?> clazz, List<StateField> fields) -->Line_6 $$ Set<String> isGetters = new HashSet()[ CD ]
