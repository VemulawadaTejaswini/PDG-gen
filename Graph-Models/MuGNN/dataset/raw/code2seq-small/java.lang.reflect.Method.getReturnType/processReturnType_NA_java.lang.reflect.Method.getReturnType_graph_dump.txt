Line_2 $$ private static Object processReturnType(Object proxy, Object target, Method method, Object retVal) -->Line_7 $$ if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) [ CD ]
Line_2 $$ private static Object processReturnType(Object proxy, Object target, Method method, Object retVal) -->Line_3 $$ if (retVal != null && retVal == target && !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) [ CD ]
Line_2 $$ private static Object processReturnType(Object proxy, Object target, Method method, Object retVal) -->Line_6 $$ Class<?> returnType = method.getReturnType()[ FD ]
Line_6 $$ Class<?> returnType = method.getReturnType()-->Line_7 $$ if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) [ FD ]
Line_2 $$ private static Object processReturnType(Object proxy, Object target, Method method, Object retVal) -->Line_3 $$ if (retVal != null && retVal == target && !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) [ FD ]
Line_2 $$ private static Object processReturnType(Object proxy, Object target, Method method, Object retVal) -->Line_4 $$ retVal = proxy[ FD ]
Line_3 $$ if (retVal != null && retVal == target && !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) -->Line_4 $$ retVal = proxy[ CD ]
Line_2 $$ private static Object processReturnType(Object proxy, Object target, Method method, Object retVal) -->Line_10 $$ return retVal[ CD ]
Line_2 $$ private static Object processReturnType(Object proxy, Object target, Method method, Object retVal) -->Line_6 $$ Class<?> returnType = method.getReturnType()[ CD ]
