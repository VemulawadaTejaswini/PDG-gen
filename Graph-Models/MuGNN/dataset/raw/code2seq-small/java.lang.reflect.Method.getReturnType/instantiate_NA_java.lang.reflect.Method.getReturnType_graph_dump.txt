Line_2 $$ public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner, Object factoryBean, final Method factoryMethod, Object... args) -->Line_32 $$ msg = "Circular reference involving containing bean '" + bd.getFactoryBeanName() + "' - consider " + "declaring the factory method as static for independence from its containing instance. " + msg[ FD ]
Line_19 $$ if (priorInvokedFactoryMethod != null) -->Line_20 $$ currentlyInvokedFactoryMethod.set(priorInvokedFactoryMethod)[ CD ]
Line_2 $$ public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner, Object factoryBean, final Method factoryMethod, Object... args) -->Line_16 $$ currentlyInvokedFactoryMethod.set(factoryMethod)[ FD ]
Line_2 $$ public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner, Object factoryBean, final Method factoryMethod, Object... args) -->Line_28 $$ throw new BeanInstantiationException(factoryMethod.getReturnType(), "Cannot access factory method '" + factoryMethod.getName() + "'; is it public?", ex)[ FD ]
Line_2 $$ public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner, Object factoryBean, final Method factoryMethod, Object... args) -->Line_30 $$ String msg = "Factory method '" + factoryMethod.getName() + "' threw exception"[ FD ]
Line_2 $$ public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner, Object factoryBean, final Method factoryMethod, Object... args) -->Line_31 $$ if (bd.getFactoryBeanName() != null && owner instanceof ConfigurableBeanFactory && ((ConfigurableBeanFactory) owner).isCurrentlyInCreation(bd.getFactoryBeanName())) [ FD ]
Line_2 $$ public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner, Object factoryBean, final Method factoryMethod, Object... args) -->Line_7 $$ ReflectionUtils.makeAccessible(factoryMethod)[ FD ]
Line_4 $$ if (System.getSecurityManager() != null) -->Line_5 $$ AccessController.doPrivileged(new PrivilegedAction<Object>() [ CD ]
Line_4 $$ if (System.getSecurityManager() != null) -->Line_12 $$ ReflectionUtils.makeAccessible(factoryMethod)[ CD ]
Line_2 $$ public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner, Object factoryBean, final Method factoryMethod, Object... args) -->Line_17 $$ return factoryMethod.invoke(factoryBean, args)[ FD ]
Line_2 $$ public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner, Object factoryBean, final Method factoryMethod, Object... args) -->Line_26 $$ throw new BeanInstantiationException(factoryMethod.getReturnType(), "Illegal arguments to factory method '" + factoryMethod.getName() + "'; " + "args: " + StringUtils.arrayToCommaDelimitedString(args), ex)[ FD ]
Line_19 $$ if (priorInvokedFactoryMethod != null) -->Line_22 $$ currentlyInvokedFactoryMethod.remove()[ CD ]
Line_2 $$ public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner, Object factoryBean, final Method factoryMethod, Object... args) -->Line_34 $$ throw new BeanInstantiationException(factoryMethod.getReturnType(), msg, ex.getTargetException())[ FD ]
Line_5 $$ AccessController.doPrivileged(new PrivilegedAction<Object>() -->Line_7 $$ ReflectionUtils.makeAccessible(factoryMethod)[ CD ]
Line_2 $$ public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner, Object factoryBean, final Method factoryMethod, Object... args) -->Line_12 $$ ReflectionUtils.makeAccessible(factoryMethod)[ FD ]
Line_5 $$ AccessController.doPrivileged(new PrivilegedAction<Object>() -->Line_8 $$ return null[ CD ]
