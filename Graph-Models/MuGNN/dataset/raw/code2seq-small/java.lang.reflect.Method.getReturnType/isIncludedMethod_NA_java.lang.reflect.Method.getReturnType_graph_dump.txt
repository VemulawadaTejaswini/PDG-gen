Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_9 $$ MethodParameter[] methodParameters = MethodParametersResolverUtil.resolveMethodParameters(method)[ CD ]
Line_11 $$ for (int i = 0; i < parameterTypes.length; i++) -->Line_17 $$ String parameterTypeName = parameterType.getName()[ CD ]
Line_22 $$ if (!excludedName.endsWith(StringPool.PERIOD)) -->Line_23 $$ excludedName = excludedName.concat(StringPool.SEMICOLON)[ CD ]
Line_39 $$ String returnTypeName = returnType.getName()-->Line_41 $$ if (excludedTypesName.startsWith(returnTypeName)) [ FD ]
Line_20 $$ if (signature.contains(StringPool.LESS_THAN)) -->Line_22 $$ if (!excludedName.endsWith(StringPool.PERIOD)) [ CD ]
Line_25 $$ excludedName = StringUtil.replace(excludedName, '.', '/')-->Line_22 $$ if (!excludedName.endsWith(StringPool.PERIOD)) [ FD ]
Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_6 $$ if (excludedTypesNames == null) [ CD ]
Line_23 $$ excludedName = excludedName.concat(StringPool.SEMICOLON)-->Line_25 $$ excludedName = StringUtil.replace(excludedName, '.', '/')[ FD ]
Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_45 $$ return true[ CD ]
Line_35 $$ Class<?> returnType = method.getReturnType()-->Line_37 $$ returnType = returnType.getComponentType()[ FD ]
Line_21 $$ String excludedName = 'L' + excludedTypesName-->Line_23 $$ excludedName = excludedName.concat(StringPool.SEMICOLON)[ FD ]
Line_25 $$ excludedName = StringUtil.replace(excludedName, '.', '/')-->Line_26 $$ if (signature.contains(excludedName)) [ FD ]
Line_13 $$ Class<?> parameterType = parameterTypes[i]-->Line_17 $$ String parameterTypeName = parameterType.getName()[ FD ]
Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_10 $$ Class<?>[] parameterTypes = method.getParameterTypes()[ FD ]
Line_11 $$ for (int i = 0; i < parameterTypes.length; i++) -->Line_12 $$ MethodParameter methodParameter = methodParameters[i][ CD ]
Line_37 $$ returnType = returnType.getComponentType()-->Line_39 $$ String returnTypeName = returnType.getName()[ FD ]
Line_15 $$ parameterType = parameterType.getComponentType()-->Line_17 $$ String parameterTypeName = parameterType.getName()[ FD ]
Line_25 $$ excludedName = StringUtil.replace(excludedName, '.', '/')-->Line_23 $$ excludedName = excludedName.concat(StringPool.SEMICOLON)[ FD ]
Line_11 $$ for (int i = 0; i < parameterTypes.length; i++) -->Line_13 $$ Class<?> parameterType = parameterTypes[i][ CD ]
Line_12 $$ MethodParameter methodParameter = methodParameters[i]-->Line_19 $$ String signature = methodParameter.getSignature()[ FD ]
Line_18 $$ for (String excludedTypesName : excludedTypesNames) -->Line_30 $$ if (parameterTypeName.startsWith(excludedTypesName)) [ FD ]
Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_36 $$ if (returnType.isArray()) [ CD ]
Line_21 $$ String excludedName = 'L' + excludedTypesName-->Line_22 $$ if (!excludedName.endsWith(StringPool.PERIOD)) [ FD ]
Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_9 $$ MethodParameter[] methodParameters = MethodParametersResolverUtil.resolveMethodParameters(method)[ FD ]
Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_35 $$ Class<?> returnType = method.getReturnType()[ FD ]
Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_11 $$ for (int i = 0; i < parameterTypes.length; i++) [ CD ]
Line_3 $$ if ((excludedMethodNames != null) && excludedMethodNames.contains(method.getName())) -->Line_4 $$ return false[ CD ]
Line_6 $$ if (excludedTypesNames == null) -->Line_7 $$ return true[ CD ]
Line_11 $$ for (int i = 0; i < parameterTypes.length; i++) -->Line_14 $$ if (parameterType.isArray()) [ CD ]
Line_35 $$ Class<?> returnType = method.getReturnType()-->Line_39 $$ String returnTypeName = returnType.getName()[ FD ]
Line_21 $$ String excludedName = 'L' + excludedTypesName-->Line_26 $$ if (signature.contains(excludedName)) [ FD ]
Line_30 $$ if (parameterTypeName.startsWith(excludedTypesName)) -->Line_31 $$ return false[ CD ]
Line_23 $$ excludedName = excludedName.concat(StringPool.SEMICOLON)-->Line_22 $$ if (!excludedName.endsWith(StringPool.PERIOD)) [ FD ]
Line_21 $$ String excludedName = 'L' + excludedTypesName-->Line_25 $$ excludedName = StringUtil.replace(excludedName, '.', '/')[ FD ]
Line_17 $$ String parameterTypeName = parameterType.getName()-->Line_30 $$ if (parameterTypeName.startsWith(excludedTypesName)) [ FD ]
Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_10 $$ Class<?>[] parameterTypes = method.getParameterTypes()[ CD ]
Line_20 $$ if (signature.contains(StringPool.LESS_THAN)) -->Line_26 $$ if (signature.contains(excludedName)) [ CD ]
Line_36 $$ if (returnType.isArray()) -->Line_37 $$ returnType = returnType.getComponentType()[ CD ]
Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_39 $$ String returnTypeName = returnType.getName()[ CD ]
Line_15 $$ parameterType = parameterType.getComponentType()-->Line_14 $$ if (parameterType.isArray()) [ FD ]
Line_18 $$ for (String excludedTypesName : excludedTypesNames) -->Line_41 $$ if (excludedTypesName.startsWith(returnTypeName)) [ FD ]
Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_3 $$ if ((excludedMethodNames != null) && excludedMethodNames.contains(method.getName())) [ FD ]
Line_35 $$ Class<?> returnType = method.getReturnType()-->Line_36 $$ if (returnType.isArray()) [ FD ]
Line_26 $$ if (signature.contains(excludedName)) -->Line_27 $$ return false[ CD ]
Line_19 $$ String signature = methodParameter.getSignature()-->Line_20 $$ if (signature.contains(StringPool.LESS_THAN)) [ FD ]
Line_23 $$ excludedName = excludedName.concat(StringPool.SEMICOLON)-->Line_26 $$ if (signature.contains(excludedName)) [ FD ]
Line_40 $$ for (String excludedTypesName : excludedTypesNames) -->Line_41 $$ if (excludedTypesName.startsWith(returnTypeName)) [ FD ]
Line_14 $$ if (parameterType.isArray()) -->Line_15 $$ parameterType = parameterType.getComponentType()[ CD ]
Line_41 $$ if (excludedTypesName.startsWith(returnTypeName)) -->Line_42 $$ return false[ CD ]
Line_20 $$ if (signature.contains(StringPool.LESS_THAN)) -->Line_25 $$ excludedName = StringUtil.replace(excludedName, '.', '/')[ CD ]
Line_20 $$ if (signature.contains(StringPool.LESS_THAN)) -->Line_21 $$ String excludedName = 'L' + excludedTypesName[ CD ]
Line_19 $$ String signature = methodParameter.getSignature()-->Line_26 $$ if (signature.contains(excludedName)) [ FD ]
Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_35 $$ Class<?> returnType = method.getReturnType()[ CD ]
Line_13 $$ Class<?> parameterType = parameterTypes[i]-->Line_15 $$ parameterType = parameterType.getComponentType()[ FD ]
Line_2 $$ public boolean isIncludedMethod(Method method) -->Line_3 $$ if ((excludedMethodNames != null) && excludedMethodNames.contains(method.getName())) [ CD ]
Line_13 $$ Class<?> parameterType = parameterTypes[i]-->Line_14 $$ if (parameterType.isArray()) [ FD ]
