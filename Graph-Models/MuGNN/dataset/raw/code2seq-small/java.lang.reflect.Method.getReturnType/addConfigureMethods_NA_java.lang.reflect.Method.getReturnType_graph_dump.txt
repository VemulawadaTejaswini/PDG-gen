Line_4 $$ Iterator<Method> iterator = builder.remainingMethods.iterator()-->Line_6 $$ Method method = iterator.next()[ FD ]
Line_6 $$ Method method = iterator.next()-->Line_7 $$ if (method.getName().equals("configure")) [ FD ]
Line_2 $$ private static void addConfigureMethods(RelevantMethodsBuilder builder) -->Line_11 $$ builder.add(iterator, builder.configurers, method)[ FD ]
Line_5 $$ while (iterator.hasNext()) -->Line_6 $$ Method method = iterator.next()[ CD ]
Line_3 $$ Class<?> type = builder.type-->Line_9 $$ throw new ServiceLookupException(String.format("Method %s.%s() must return void.", type.getSimpleName(), method.getName()))[ FD ]
Line_6 $$ Method method = iterator.next()-->Line_8 $$ if (!method.getReturnType().equals(Void.TYPE)) [ FD ]
Line_7 $$ if (method.getName().equals("configure")) -->Line_8 $$ if (!method.getReturnType().equals(Void.TYPE)) [ CD ]
Line_6 $$ Method method = iterator.next()-->Line_11 $$ builder.add(iterator, builder.configurers, method)[ FD ]
Line_7 $$ if (method.getName().equals("configure")) -->Line_11 $$ builder.add(iterator, builder.configurers, method)[ CD ]
Line_2 $$ private static void addConfigureMethods(RelevantMethodsBuilder builder) -->Line_4 $$ Iterator<Method> iterator = builder.remainingMethods.iterator()[ CD ]
Line_4 $$ Iterator<Method> iterator = builder.remainingMethods.iterator()-->Line_11 $$ builder.add(iterator, builder.configurers, method)[ FD ]
Line_6 $$ Method method = iterator.next()-->Line_9 $$ throw new ServiceLookupException(String.format("Method %s.%s() must return void.", type.getSimpleName(), method.getName()))[ FD ]
Line_4 $$ Iterator<Method> iterator = builder.remainingMethods.iterator()-->Line_5 $$ while (iterator.hasNext()) [ FD ]
Line_2 $$ private static void addConfigureMethods(RelevantMethodsBuilder builder) -->Line_5 $$ while (iterator.hasNext()) [ CD ]
Line_5 $$ while (iterator.hasNext()) -->Line_7 $$ if (method.getName().equals("configure")) [ CD ]
Line_2 $$ private static void addConfigureMethods(RelevantMethodsBuilder builder) -->Line_3 $$ Class<?> type = builder.type[ CD ]
