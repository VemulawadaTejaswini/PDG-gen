Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_4 $$ if (task.hasOption(TaskOption.RESTRUCTURE_BEFORE)) [ CD ]
Line_27 $$ if (task.hasOption(TaskOption.RESTRUCTURE_AFTER)) -->Line_28 $$ restructureIfNecessary(resize)[ CD ]
Line_14 $$ Reference<K, V> reference = findInChain(head, key, hash)-->Line_15 $$ Entry<K, V> entry = (reference != null ? reference.get() : null)[ FD ]
Line_13 $$ final Reference<K, V> head = this.references[index]-->Line_19 $$ Reference<K, V> newReference = Segment.this.referenceManager.createReference(newEntry, hash, head)[ FD ]
Line_16 $$ Entries entries = new Entries() -->Line_21 $$ Segment.this.count++[ CD ]
Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_24 $$ return task.execute(reference, entry, entries)[ FD ]
Line_13 $$ final Reference<K, V> head = this.references[index]-->Line_14 $$ Reference<K, V> reference = findInChain(head, key, hash)[ FD ]
Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_27 $$ if (task.hasOption(TaskOption.RESTRUCTURE_AFTER)) [ FD ]
Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_7 $$ if (task.hasOption(TaskOption.SKIP_IF_EMPTY) && this.count == 0) [ FD ]
Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_19 $$ Reference<K, V> newReference = Segment.this.referenceManager.createReference(newEntry, hash, head)[ FD ]
Line_3 $$ boolean resize = task.hasOption(TaskOption.RESIZE)-->Line_5 $$ restructureIfNecessary(resize)[ FD ]
Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_7 $$ if (task.hasOption(TaskOption.SKIP_IF_EMPTY) && this.count == 0) [ CD ]
Line_19 $$ Reference<K, V> newReference = Segment.this.referenceManager.createReference(newEntry, hash, head)-->Line_20 $$ Segment.this.references[index] = newReference[ FD ]
Line_4 $$ if (task.hasOption(TaskOption.RESTRUCTURE_BEFORE)) -->Line_5 $$ restructureIfNecessary(resize)[ CD ]
Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_3 $$ boolean resize = task.hasOption(TaskOption.RESIZE)[ CD ]
Line_16 $$ Entries entries = new Entries() -->Line_24 $$ return task.execute(reference, entry, entries)[ FD ]
Line_16 $$ Entries entries = new Entries() -->Line_19 $$ Reference<K, V> newReference = Segment.this.referenceManager.createReference(newEntry, hash, head)[ CD ]
Line_14 $$ Reference<K, V> reference = findInChain(head, key, hash)-->Line_24 $$ return task.execute(reference, entry, entries)[ FD ]
Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_8 $$ return task.execute(null, null, null)[ FD ]
Line_16 $$ Entries entries = new Entries() -->Line_18 $$ Entry<K, V> newEntry = new Entry<K, V>((K) key, value)[ CD ]
Line_18 $$ Entry<K, V> newEntry = new Entry<K, V>((K) key, value)-->Line_19 $$ Reference<K, V> newReference = Segment.this.referenceManager.createReference(newEntry, hash, head)[ FD ]
Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_10 $$ lock()[ CD ]
Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_14 $$ Reference<K, V> reference = findInChain(head, key, hash)[ FD ]
Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_3 $$ boolean resize = task.hasOption(TaskOption.RESIZE)[ FD ]
Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_4 $$ if (task.hasOption(TaskOption.RESTRUCTURE_BEFORE)) [ FD ]
Line_2 $$ public <T> T doTask(final int hash, final Object key, final Task<T> task) -->Line_12 $$ final int index = getIndex(hash, this.references)[ FD ]
Line_15 $$ Entry<K, V> entry = (reference != null ? reference.get() : null)-->Line_24 $$ return task.execute(reference, entry, entries)[ FD ]
Line_16 $$ Entries entries = new Entries() -->Line_20 $$ Segment.this.references[index] = newReference[ CD ]
Line_7 $$ if (task.hasOption(TaskOption.SKIP_IF_EMPTY) && this.count == 0) -->Line_8 $$ return task.execute(null, null, null)[ CD ]
Line_3 $$ boolean resize = task.hasOption(TaskOption.RESIZE)-->Line_28 $$ restructureIfNecessary(resize)[ FD ]
