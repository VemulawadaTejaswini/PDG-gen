Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, false, 1)-->Line_18 $$ Set<? extends AbstractQueuedSynchronizer> workerTasks = threadPoolExecutor.getWorkerTasks()[ FD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_4 $$ MarkerBlockingJob markerBlockingJob1 = new MarkerBlockingJob(true)[ CD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, false, 1)-->Line_30 $$ Assert.assertTrue(threadPoolExecutor.awaitTermination(1, TimeUnit.SECONDS))[ FD ]
Line_10 $$ AbstractQueuedSynchronizer headWorkerTask = null-->Line_21 $$ headWorkerTask.acquire(1)[ FD ]
Line_5 $$ MarkerBlockingJob markerBlockingJob2 = new MarkerBlockingJob(true)-->Line_8 $$ threadPoolExecutor.execute(markerBlockingJob2)[ FD ]
Line_4 $$ MarkerBlockingJob markerBlockingJob1 = new MarkerBlockingJob(true)-->Line_6 $$ threadPoolExecutor.execute(markerBlockingJob1)[ FD ]
Line_18 $$ Set<? extends AbstractQueuedSynchronizer> workerTasks = threadPoolExecutor.getWorkerTasks()-->Line_19 $$ Assert.assertEquals(1, workerTasks.size())[ FD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_31 $$ Assert.assertTrue(markerBlockingJob2.isInterrupted())[ CD ]
Line_25 $$ while (!headWorkerTask.hasQueuedThreads()) -->Line_26 $$ Thread.sleep(1)[ CD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_25 $$ while (!headWorkerTask.hasQueuedThreads()) [ CD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_7 $$ markerBlockingJob1.waitUntilBlock()[ CD ]
Line_10 $$ AbstractQueuedSynchronizer headWorkerTask = null-->Line_29 $$ headWorkerTask.release(1)[ FD ]
Line_10 $$ AbstractQueuedSynchronizer headWorkerTask = null-->Line_25 $$ while (!headWorkerTask.hasQueuedThreads()) [ FD ]
Line_15 $$ while (!takeLock.hasQueuedThreads()) -->Line_16 $$ Thread.sleep(1)[ CD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, false, 1)-->Line_28 $$ threadPoolExecutor.shutdownNow()[ FD ]
Line_9 $$ TaskQueue<Runnable> taskQueue = threadPoolExecutor.getTaskQueue()-->Line_11 $$ ReentrantLock takeLock = taskQueue.getTakeLock()[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, false, 1)-->Line_9 $$ TaskQueue<Runnable> taskQueue = threadPoolExecutor.getTaskQueue()[ FD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_10 $$ AbstractQueuedSynchronizer headWorkerTask = null[ CD ]
Line_11 $$ ReentrantLock takeLock = taskQueue.getTakeLock()-->Line_12 $$ takeLock.lock()[ FD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_28 $$ threadPoolExecutor.shutdownNow()[ CD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, false, 1)[ CD ]
Line_5 $$ MarkerBlockingJob markerBlockingJob2 = new MarkerBlockingJob(true)-->Line_31 $$ Assert.assertTrue(markerBlockingJob2.isInterrupted())[ FD ]
Line_20 $$ headWorkerTask = workerTasks.iterator().next()-->Line_21 $$ headWorkerTask.acquire(1)[ FD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_30 $$ Assert.assertTrue(threadPoolExecutor.awaitTermination(1, TimeUnit.SECONDS))[ CD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_12 $$ takeLock.lock()[ CD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_29 $$ headWorkerTask.release(1)[ CD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, false, 1)-->Line_8 $$ threadPoolExecutor.execute(markerBlockingJob2)[ FD ]
Line_20 $$ headWorkerTask = workerTasks.iterator().next()-->Line_25 $$ while (!headWorkerTask.hasQueuedThreads()) [ FD ]
Line_4 $$ MarkerBlockingJob markerBlockingJob1 = new MarkerBlockingJob(true)-->Line_7 $$ markerBlockingJob1.waitUntilBlock()[ FD ]
Line_4 $$ MarkerBlockingJob markerBlockingJob1 = new MarkerBlockingJob(true)-->Line_14 $$ markerBlockingJob1.unBlock()[ FD ]
Line_11 $$ ReentrantLock takeLock = taskQueue.getTakeLock()-->Line_23 $$ takeLock.unlock()[ FD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_6 $$ threadPoolExecutor.execute(markerBlockingJob1)[ CD ]
Line_10 $$ AbstractQueuedSynchronizer headWorkerTask = null-->Line_20 $$ headWorkerTask = workerTasks.iterator().next()[ FD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_8 $$ threadPoolExecutor.execute(markerBlockingJob2)[ CD ]
Line_11 $$ ReentrantLock takeLock = taskQueue.getTakeLock()-->Line_15 $$ while (!takeLock.hasQueuedThreads()) [ FD ]
Line_18 $$ Set<? extends AbstractQueuedSynchronizer> workerTasks = threadPoolExecutor.getWorkerTasks()-->Line_20 $$ headWorkerTask = workerTasks.iterator().next()[ FD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_5 $$ MarkerBlockingJob markerBlockingJob2 = new MarkerBlockingJob(true)[ CD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_9 $$ TaskQueue<Runnable> taskQueue = threadPoolExecutor.getTaskQueue()[ CD ]
Line_2 $$ public void testShutdownNowAfterTaskPolledBeforeTaskRunning() throws InterruptedException -->Line_11 $$ ReentrantLock takeLock = taskQueue.getTakeLock()[ CD ]
Line_20 $$ headWorkerTask = workerTasks.iterator().next()-->Line_29 $$ headWorkerTask.release(1)[ FD ]
Line_3 $$ ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 1, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, false, 1)-->Line_6 $$ threadPoolExecutor.execute(markerBlockingJob1)[ FD ]
