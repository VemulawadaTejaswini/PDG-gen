Line_5 $$ for (Iterator<SoftReference<Pair<ReflectedProject, ClassLoader>>> iterator = ourProjects.iterator(); iterator.hasNext(); ) -->Line_7 $$ final Pair<ReflectedProject, ClassLoader> pair = ref.get()[ CD ]
Line_7 $$ final Pair<ReflectedProject, ClassLoader> pair = ref.get()-->Line_8 $$ if (pair == null) [ FD ]
Line_2 $$ public static ReflectedProject getProject(final ClassLoader classLoader) -->Line_22 $$ ourProjects.add(new SoftReference<Pair<ReflectedProject, ClassLoader>>(Pair.create(reflectedProj, classLoader)))[ FD ]
Line_8 $$ if (pair == null) -->Line_9 $$ iterator.remove()[ CD ]
Line_5 $$ for (Iterator<SoftReference<Pair<ReflectedProject, ClassLoader>>> iterator = ourProjects.iterator(); iterator.hasNext(); ) -->Line_8 $$ if (pair == null) [ CD ]
Line_5 $$ for (Iterator<SoftReference<Pair<ReflectedProject, ClassLoader>>> iterator = ourProjects.iterator(); iterator.hasNext(); ) -->Line_6 $$ final SoftReference<Pair<ReflectedProject, ClassLoader>> ref = iterator.next()[ FD ]
Line_2 $$ public static ReflectedProject getProject(final ClassLoader classLoader) -->Line_26 $$ return reflectedProj[ CD ]
Line_11 $$ if (pair.second == classLoader) -->Line_12 $$ return pair.first[ CD ]
Line_5 $$ for (Iterator<SoftReference<Pair<ReflectedProject, ClassLoader>>> iterator = ourProjects.iterator(); iterator.hasNext(); ) -->Line_9 $$ iterator.remove()[ FD ]
Line_8 $$ if (pair == null) -->Line_11 $$ if (pair.second == classLoader) [ CD ]
Line_2 $$ public static ReflectedProject getProject(final ClassLoader classLoader) -->Line_19 $$ final ReflectedProject reflectedProj = new ReflectedProject(classLoader)[ CD ]
Line_2 $$ public static ReflectedProject getProject(final ClassLoader classLoader) -->Line_3 $$ ourProjectsLock.lock()[ CD ]
Line_2 $$ public static ReflectedProject getProject(final ClassLoader classLoader) -->Line_20 $$ ourProjectsLock.lock()[ CD ]
Line_19 $$ final ReflectedProject reflectedProj = new ReflectedProject(classLoader)-->Line_22 $$ ourProjects.add(new SoftReference<Pair<ReflectedProject, ClassLoader>>(Pair.create(reflectedProj, classLoader)))[ FD ]
Line_2 $$ public static ReflectedProject getProject(final ClassLoader classLoader) -->Line_11 $$ if (pair.second == classLoader) [ FD ]
Line_6 $$ final SoftReference<Pair<ReflectedProject, ClassLoader>> ref = iterator.next()-->Line_7 $$ final Pair<ReflectedProject, ClassLoader> pair = ref.get()[ FD ]
Line_5 $$ for (Iterator<SoftReference<Pair<ReflectedProject, ClassLoader>>> iterator = ourProjects.iterator(); iterator.hasNext(); ) -->Line_6 $$ final SoftReference<Pair<ReflectedProject, ClassLoader>> ref = iterator.next()[ CD ]
