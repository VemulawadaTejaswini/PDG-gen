Line_15 $$ V v = e.value()-->Line_16 $$ if (value == null || value.equals(v)) [ FD ]
Line_21 $$ K pKey = p.key()-->Line_22 $$ if (pKey == null) [ FD ]
Line_2 $$ V remove(Object key, int hash, Object value, boolean refRemove) -->Line_12 $$ while (e != null && key != e.keyRef && (refRemove || hash != e.hash || !keyEq(key, e.key()))) e = e.next[ FD ]
Line_16 $$ if (value == null || value.equals(v)) -->Line_19 $$ HashEntry<K, V> newFirst = e.next[ CD ]
Line_2 $$ V remove(Object key, int hash, Object value, boolean refRemove) -->Line_16 $$ if (value == null || value.equals(v)) [ FD ]
Line_16 $$ if (value == null || value.equals(v)) -->Line_20 $$ for (HashEntry<K, V> p = first; p != e; p = p.next) [ CD ]
Line_14 $$ if (e != null) -->Line_15 $$ V v = e.value()[ CD ]
Line_11 $$ HashEntry<K, V> e = first-->Line_15 $$ V v = e.value()[ FD ]
Line_19 $$ HashEntry<K, V> newFirst = e.next-->Line_26 $$ newFirst = newHashEntry(pKey, p.hash, newFirst, p.value())[ FD ]
Line_12 $$ e = e.next-->Line_20 $$ for (HashEntry<K, V> p = first; p != e; p = p.next) [ FD ]
Line_26 $$ newFirst = newHashEntry(pKey, p.hash, newFirst, p.value())-->Line_28 $$ tab[index] = newFirst[ FD ]
Line_11 $$ HashEntry<K, V> e = first-->Line_12 $$ e = e.next[ FD ]
Line_20 $$ for (HashEntry<K, V> p = first; p != e; p = p.next) -->Line_22 $$ if (pKey == null) [ CD ]
Line_20 $$ for (HashEntry<K, V> p = first; p != e; p = p.next) -->Line_26 $$ newFirst = newHashEntry(pKey, p.hash, newFirst, p.value())[ FD ]
Line_19 $$ HashEntry<K, V> newFirst = e.next-->Line_28 $$ tab[index] = newFirst[ FD ]
Line_7 $$ int c = count - 1-->Line_23 $$ c--[ FD ]
Line_22 $$ if (pKey == null) -->Line_23 $$ c--[ CD ]
Line_11 $$ HashEntry<K, V> e = first-->Line_14 $$ if (e != null) [ FD ]
Line_20 $$ for (HashEntry<K, V> p = first; p != e; p = p.next) -->Line_21 $$ K pKey = p.key()[ FD ]
Line_11 $$ HashEntry<K, V> e = first-->Line_12 $$ while (e != null && key != e.keyRef && (refRemove || hash != e.hash || !keyEq(key, e.key()))) e = e.next[ FD ]
Line_15 $$ V v = e.value()-->Line_17 $$ oldValue = v[ FD ]
Line_13 $$ V oldValue = null-->Line_17 $$ oldValue = v[ FD ]
Line_11 $$ HashEntry<K, V> e = first-->Line_20 $$ for (HashEntry<K, V> p = first; p != e; p = p.next) [ FD ]
Line_2 $$ V remove(Object key, int hash, Object value, boolean refRemove) -->Line_3 $$ lock()[ CD ]
Line_14 $$ if (e != null) -->Line_16 $$ if (value == null || value.equals(v)) [ CD ]
Line_12 $$ e = e.next-->Line_14 $$ if (e != null) [ FD ]
Line_20 $$ for (HashEntry<K, V> p = first; p != e; p = p.next) -->Line_26 $$ newFirst = newHashEntry(pKey, p.hash, newFirst, p.value())[ CD ]
Line_12 $$ e = e.next-->Line_15 $$ V v = e.value()[ FD ]
Line_2 $$ V remove(Object key, int hash, Object value, boolean refRemove) -->Line_5 $$ if (!refRemove)[ FD ]
Line_20 $$ for (HashEntry<K, V> p = first; p != e; p = p.next) -->Line_21 $$ K pKey = p.key()[ CD ]
Line_16 $$ if (value == null || value.equals(v)) -->Line_28 $$ tab[index] = newFirst[ CD ]
Line_16 $$ if (value == null || value.equals(v)) -->Line_17 $$ oldValue = v[ CD ]
Line_5 $$ if (!refRemove)-->Line_6 $$ removeStale()[ CD ]
Line_21 $$ K pKey = p.key()-->Line_26 $$ newFirst = newHashEntry(pKey, p.hash, newFirst, p.value())[ FD ]
