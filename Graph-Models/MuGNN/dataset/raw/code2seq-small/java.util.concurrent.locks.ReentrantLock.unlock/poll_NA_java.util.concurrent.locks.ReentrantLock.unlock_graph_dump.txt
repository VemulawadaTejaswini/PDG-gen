Line_8 $$ if (nanos <= 0) -->Line_9 $$ return null[ CD ]
Line_2 $$ public E poll(long timeout, TimeUnit timeUnit) throws InterruptedException -->Line_4 $$ long nanos = timeUnit.toNanos(timeout)[ FD ]
Line_2 $$ public E poll(long timeout, TimeUnit timeUnit) throws InterruptedException -->Line_4 $$ long nanos = timeUnit.toNanos(timeout)[ CD ]
Line_3 $$ E element = null-->Line_13 $$ element = _dequeue()[ FD ]
Line_2 $$ public E poll(long timeout, TimeUnit timeUnit) throws InterruptedException -->Line_20 $$ return element[ CD ]
Line_14 $$ if (_count.getAndDecrement() > 1) -->Line_15 $$ _notEmptyCondition.signal()[ CD ]
Line_11 $$ nanos = _notEmptyCondition.awaitNanos(nanos)-->Line_8 $$ if (nanos <= 0) [ FD ]
Line_2 $$ public E poll(long timeout, TimeUnit timeUnit) throws InterruptedException -->Line_3 $$ E element = null[ CD ]
Line_2 $$ public E poll(long timeout, TimeUnit timeUnit) throws InterruptedException -->Line_5 $$ _takeLock.lockInterruptibly()[ CD ]
Line_4 $$ long nanos = timeUnit.toNanos(timeout)-->Line_11 $$ nanos = _notEmptyCondition.awaitNanos(nanos)[ FD ]
Line_4 $$ long nanos = timeUnit.toNanos(timeout)-->Line_8 $$ if (nanos <= 0) [ FD ]
Line_7 $$ while (_count.get() == 0) -->Line_8 $$ if (nanos <= 0) [ CD ]
Line_7 $$ while (_count.get() == 0) -->Line_11 $$ nanos = _notEmptyCondition.awaitNanos(nanos)[ CD ]
