Line_7 $$ for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) -->Line_24 $$ if (check == sum)[ CD ]
Line_2 $$ public int size() -->Line_7 $$ for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) [ CD ]
Line_12 $$ sum += segments[i].count-->Line_28 $$ sum = 0[ FD ]
Line_33 $$ if (sum > Integer.MAX_VALUE)-->Line_34 $$ return Integer.MAX_VALUE[ CD ]
Line_19 $$ check = -1-->Line_24 $$ if (check == sum)[ FD ]
Line_15 $$ if (mcsum != 0) -->Line_16 $$ for (int i = 0; i < segments.length; ++i) [ CD ]
Line_29 $$ for (int i = 0; i < segments.length; ++i) segments[i].lock()-->Line_30 $$ for (int i = 0; i < segments.length; ++i) sum += segments[i].count[ FD ]
Line_28 $$ sum = 0-->Line_30 $$ sum += segments[i].count[ FD ]
Line_4 $$ long sum = 0-->Line_9 $$ sum = 0[ FD ]
Line_17 $$ check += segments[i].count-->Line_27 $$ if (check != sum) [ FD ]
Line_11 $$ for (int i = 0; i < segments.length; ++i) -->Line_12 $$ sum += segments[i].count[ CD ]
Line_27 $$ if (check != sum) -->Line_30 $$ for (int i = 0; i < segments.length; ++i) sum += segments[i].count[ CD ]
Line_12 $$ sum += segments[i].count-->Line_30 $$ sum += segments[i].count[ FD ]
Line_33 $$ if (sum > Integer.MAX_VALUE)-->Line_36 $$ return (int) sum[ CD ]
Line_16 $$ for (int i = 0; i < segments.length; ++i) -->Line_30 $$ for (int i = 0; i < segments.length; ++i) sum += segments[i].count[ FD ]
Line_4 $$ long sum = 0-->Line_33 $$ if (sum > Integer.MAX_VALUE)[ FD ]
Line_7 $$ for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) -->Line_15 $$ if (mcsum != 0) [ CD ]
Line_29 $$ for (int i = 0; i < segments.length; ++i) segments[i].lock()-->Line_31 $$ for (int i = 0; i < segments.length; ++i) segments[i].unlock()[ FD ]
Line_2 $$ public int size() -->Line_5 $$ long check = 0[ CD ]
Line_2 $$ public int size() -->Line_6 $$ int[] mc = new int[segments.length][ CD ]
Line_11 $$ for (int i = 0; i < segments.length; ++i) -->Line_16 $$ for (int i = 0; i < segments.length; ++i) [ FD ]
Line_12 $$ sum += segments[i].count-->Line_33 $$ if (sum > Integer.MAX_VALUE)[ FD ]
Line_7 $$ for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) -->Line_11 $$ for (int i = 0; i < segments.length; ++i) [ CD ]
Line_4 $$ long sum = 0-->Line_28 $$ sum = 0[ FD ]
Line_13 $$ mcsum += mc[i] = segments[i].modCount-->Line_15 $$ if (mcsum != 0) [ FD ]
Line_17 $$ check += segments[i].count-->Line_24 $$ if (check == sum)[ FD ]
Line_16 $$ for (int i = 0; i < segments.length; ++i) -->Line_31 $$ for (int i = 0; i < segments.length; ++i) segments[i].unlock()[ FD ]
Line_9 $$ sum = 0-->Line_33 $$ if (sum > Integer.MAX_VALUE)[ FD ]
Line_10 $$ int mcsum = 0-->Line_15 $$ if (mcsum != 0) [ FD ]
Line_19 $$ check = -1-->Line_27 $$ if (check != sum) [ FD ]
Line_7 $$ for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) -->Line_8 $$ check = 0[ CD ]
Line_16 $$ for (int i = 0; i < segments.length; ++i) -->Line_18 $$ if (mc[i] != segments[i].modCount) [ CD ]
Line_2 $$ public int size() -->Line_4 $$ long sum = 0[ CD ]
Line_9 $$ sum = 0-->Line_24 $$ if (check == sum)[ FD ]
Line_12 $$ sum += segments[i].count-->Line_27 $$ if (check != sum) [ FD ]
Line_11 $$ for (int i = 0; i < segments.length; ++i) -->Line_29 $$ for (int i = 0; i < segments.length; ++i) segments[i].lock()[ FD ]
Line_2 $$ public int size() -->Line_27 $$ if (check != sum) [ CD ]
Line_9 $$ sum = 0-->Line_30 $$ sum += segments[i].count[ FD ]
Line_4 $$ long sum = 0-->Line_12 $$ sum += segments[i].count[ FD ]
Line_9 $$ sum = 0-->Line_12 $$ sum += segments[i].count[ FD ]
Line_8 $$ check = 0-->Line_24 $$ if (check == sum)[ FD ]
Line_4 $$ long sum = 0-->Line_27 $$ if (check != sum) [ FD ]
Line_8 $$ check = 0-->Line_17 $$ check += segments[i].count[ FD ]
Line_5 $$ long check = 0-->Line_19 $$ check = -1[ FD ]
Line_11 $$ for (int i = 0; i < segments.length; ++i) -->Line_30 $$ for (int i = 0; i < segments.length; ++i) sum += segments[i].count[ FD ]
Line_28 $$ sum = 0-->Line_33 $$ if (sum > Integer.MAX_VALUE)[ FD ]
Line_2 $$ public int size() -->Line_33 $$ if (sum > Integer.MAX_VALUE)[ CD ]
Line_10 $$ int mcsum = 0-->Line_13 $$ mcsum += mc[i] = segments[i].modCount[ FD ]
Line_9 $$ sum = 0-->Line_27 $$ if (check != sum) [ FD ]
Line_27 $$ if (check != sum) -->Line_29 $$ for (int i = 0; i < segments.length; ++i) segments[i].lock()[ CD ]
Line_2 $$ public int size() -->Line_3 $$ final Segment<K, V>[] segments = this.segments[ CD ]
Line_5 $$ long check = 0-->Line_24 $$ if (check == sum)[ FD ]
Line_7 $$ for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) -->Line_9 $$ sum = 0[ CD ]
Line_7 $$ for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) -->Line_10 $$ int mcsum = 0[ CD ]
Line_27 $$ if (check != sum) -->Line_28 $$ sum = 0[ CD ]
Line_9 $$ sum = 0-->Line_28 $$ sum = 0[ FD ]
Line_30 $$ for (int i = 0; i < segments.length; ++i) sum += segments[i].count-->Line_31 $$ for (int i = 0; i < segments.length; ++i) segments[i].unlock()[ FD ]
Line_5 $$ long check = 0-->Line_8 $$ check = 0[ FD ]
Line_5 $$ long check = 0-->Line_17 $$ check += segments[i].count[ FD ]
Line_11 $$ for (int i = 0; i < segments.length; ++i) -->Line_13 $$ mcsum += mc[i] = segments[i].modCount[ CD ]
Line_11 $$ for (int i = 0; i < segments.length; ++i) -->Line_31 $$ for (int i = 0; i < segments.length; ++i) segments[i].unlock()[ FD ]
Line_18 $$ if (mc[i] != segments[i].modCount) -->Line_19 $$ check = -1[ CD ]
Line_16 $$ for (int i = 0; i < segments.length; ++i) -->Line_17 $$ check += segments[i].count[ CD ]
Line_12 $$ sum += segments[i].count-->Line_24 $$ if (check == sum)[ FD ]
Line_4 $$ long sum = 0-->Line_24 $$ if (check == sum)[ FD ]
Line_5 $$ long check = 0-->Line_27 $$ if (check != sum) [ FD ]
Line_16 $$ for (int i = 0; i < segments.length; ++i) -->Line_29 $$ for (int i = 0; i < segments.length; ++i) segments[i].lock()[ FD ]
Line_27 $$ if (check != sum) -->Line_31 $$ for (int i = 0; i < segments.length; ++i) segments[i].unlock()[ CD ]
Line_30 $$ sum += segments[i].count-->Line_33 $$ if (sum > Integer.MAX_VALUE)[ FD ]
Line_8 $$ check = 0-->Line_19 $$ check = -1[ FD ]
Line_8 $$ check = 0-->Line_27 $$ if (check != sum) [ FD ]
Line_17 $$ check += segments[i].count-->Line_19 $$ check = -1[ FD ]
Line_4 $$ long sum = 0-->Line_30 $$ sum += segments[i].count[ FD ]
