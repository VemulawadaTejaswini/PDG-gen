Line_7 $$ Iterator<NotificationEvent> itr1 = notificationEvents.iterator()-->Line_8 $$ while (itr1.hasNext()) [ FD ]
Line_8 $$ while (itr1.hasNext()) -->Line_9 $$ NotificationEvent notificationEvent = itr1.next()[ CD ]
Line_7 $$ Iterator<NotificationEvent> itr1 = notificationEvents.iterator()-->Line_11 $$ itr1.remove()[ FD ]
Line_15 $$ List<String> invalidNotificationEventUuids = new ArrayList(unconfirmedNotificationEvents.size())-->Line_26 $$ if (PropsValues.USER_NOTIFICATION_EVENT_CONFIRMATION_ENABLED && !invalidNotificationEventUuids.isEmpty()) [ FD ]
Line_14 $$ Map<String, NotificationEvent> unconfirmedNotificationEvents = _getUnconfirmedNotificationEvents()-->Line_15 $$ List<String> invalidNotificationEventUuids = new ArrayList(unconfirmedNotificationEvents.size())[ FD ]
Line_18 $$ while (itr2.hasNext()) -->Line_19 $$ Map.Entry<String, NotificationEvent> entry = itr2.next()[ CD ]
Line_18 $$ while (itr2.hasNext()) -->Line_20 $$ NotificationEvent notificationEvent = entry.getValue()[ CD ]
Line_26 $$ if (PropsValues.USER_NOTIFICATION_EVENT_CONFIRMATION_ENABLED && !invalidNotificationEventUuids.isEmpty()) -->Line_27 $$ UserNotificationEventLocalServiceUtil.deleteUserNotificationEvents(invalidNotificationEventUuids, getCompanyId())[ CD ]
Line_2 $$ protected void doCleanUp() throws Exception -->Line_3 $$ _reentrantLock.lock()[ CD ]
Line_6 $$ TreeSet<NotificationEvent> notificationEvents = _getNotificationEvents()-->Line_7 $$ Iterator<NotificationEvent> itr1 = notificationEvents.iterator()[ FD ]
Line_5 $$ long currentTime = System.currentTimeMillis()-->Line_21 $$ if (isRemoveNotificationEvent(notificationEvent, currentTime)) [ FD ]
Line_19 $$ Map.Entry<String, NotificationEvent> entry = itr2.next()-->Line_22 $$ invalidNotificationEventUuids.add(entry.getKey())[ FD ]
Line_14 $$ Map<String, NotificationEvent> unconfirmedNotificationEvents = _getUnconfirmedNotificationEvents()-->Line_16 $$ Set<Map.Entry<String, NotificationEvent>> unconfirmedNotificationEventsSet = unconfirmedNotificationEvents.entrySet()[ FD ]
Line_20 $$ NotificationEvent notificationEvent = entry.getValue()-->Line_21 $$ if (isRemoveNotificationEvent(notificationEvent, currentTime)) [ FD ]
Line_7 $$ Iterator<NotificationEvent> itr1 = notificationEvents.iterator()-->Line_9 $$ NotificationEvent notificationEvent = itr1.next()[ FD ]
Line_21 $$ if (isRemoveNotificationEvent(notificationEvent, currentTime)) -->Line_22 $$ invalidNotificationEventUuids.add(entry.getKey())[ CD ]
Line_17 $$ Iterator<Map.Entry<String, NotificationEvent>> itr2 = unconfirmedNotificationEventsSet.iterator()-->Line_19 $$ Map.Entry<String, NotificationEvent> entry = itr2.next()[ FD ]
Line_10 $$ if (isRemoveNotificationEvent(notificationEvent, currentTime)) -->Line_11 $$ itr1.remove()[ CD ]
Line_15 $$ List<String> invalidNotificationEventUuids = new ArrayList(unconfirmedNotificationEvents.size())-->Line_22 $$ invalidNotificationEventUuids.add(entry.getKey())[ FD ]
Line_17 $$ Iterator<Map.Entry<String, NotificationEvent>> itr2 = unconfirmedNotificationEventsSet.iterator()-->Line_18 $$ while (itr2.hasNext()) [ FD ]
Line_9 $$ NotificationEvent notificationEvent = itr1.next()-->Line_21 $$ if (isRemoveNotificationEvent(notificationEvent, currentTime)) [ FD ]
Line_17 $$ Iterator<Map.Entry<String, NotificationEvent>> itr2 = unconfirmedNotificationEventsSet.iterator()-->Line_23 $$ itr2.remove()[ FD ]
Line_9 $$ NotificationEvent notificationEvent = itr1.next()-->Line_10 $$ if (isRemoveNotificationEvent(notificationEvent, currentTime)) [ FD ]
Line_15 $$ List<String> invalidNotificationEventUuids = new ArrayList(unconfirmedNotificationEvents.size())-->Line_27 $$ UserNotificationEventLocalServiceUtil.deleteUserNotificationEvents(invalidNotificationEventUuids, getCompanyId())[ FD ]
Line_8 $$ while (itr1.hasNext()) -->Line_10 $$ if (isRemoveNotificationEvent(notificationEvent, currentTime)) [ CD ]
Line_21 $$ if (isRemoveNotificationEvent(notificationEvent, currentTime)) -->Line_23 $$ itr2.remove()[ CD ]
Line_5 $$ long currentTime = System.currentTimeMillis()-->Line_10 $$ if (isRemoveNotificationEvent(notificationEvent, currentTime)) [ FD ]
Line_16 $$ Set<Map.Entry<String, NotificationEvent>> unconfirmedNotificationEventsSet = unconfirmedNotificationEvents.entrySet()-->Line_17 $$ Iterator<Map.Entry<String, NotificationEvent>> itr2 = unconfirmedNotificationEventsSet.iterator()[ FD ]
Line_19 $$ Map.Entry<String, NotificationEvent> entry = itr2.next()-->Line_20 $$ NotificationEvent notificationEvent = entry.getValue()[ FD ]
Line_18 $$ while (itr2.hasNext()) -->Line_21 $$ if (isRemoveNotificationEvent(notificationEvent, currentTime)) [ CD ]
