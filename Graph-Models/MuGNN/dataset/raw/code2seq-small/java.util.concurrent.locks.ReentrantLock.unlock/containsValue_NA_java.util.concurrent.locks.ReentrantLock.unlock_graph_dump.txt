Line_29 $$ for (int i = 0; i < segments.length; ++i) -->Line_30 $$ if (segments[i].containsValue(value)) [ CD ]
Line_16 $$ for (int i = 0; i < segments.length; ++i) -->Line_36 $$ for (int i = 0; i < segments.length; ++i) segments[i].unlock()[ FD ]
Line_15 $$ if (mcsum != 0) -->Line_16 $$ for (int i = 0; i < segments.length; ++i) [ CD ]
Line_2 $$ public boolean containsValue(Object value) -->Line_26 $$ for (int i = 0; i < segments.length; ++i) segments[i].lock()[ CD ]
Line_2 $$ public boolean containsValue(Object value) -->Line_6 $$ int[] mc = new int[segments.length][ CD ]
Line_9 $$ for (int i = 0; i < segments.length; ++i) -->Line_11 $$ if (segments[i].containsValue(value))[ CD ]
Line_23 $$ if (cleanSweep)-->Line_24 $$ return false[ CD ]
Line_27 $$ boolean found = false-->Line_31 $$ found = true[ FD ]
Line_7 $$ for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) -->Line_15 $$ if (mcsum != 0) [ CD ]
Line_7 $$ for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) -->Line_9 $$ for (int i = 0; i < segments.length; ++i) [ CD ]
Line_16 $$ for (int i = 0; i < segments.length; ++i) -->Line_26 $$ for (int i = 0; i < segments.length; ++i) segments[i].lock()[ FD ]
Line_9 $$ for (int i = 0; i < segments.length; ++i) -->Line_26 $$ for (int i = 0; i < segments.length; ++i) segments[i].lock()[ FD ]
Line_8 $$ int mcsum = 0-->Line_15 $$ if (mcsum != 0) [ FD ]
Line_7 $$ for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) -->Line_23 $$ if (cleanSweep)[ CD ]
Line_8 $$ int mcsum = 0-->Line_10 $$ mcsum += mc[i] = segments[i].modCount[ FD ]
Line_9 $$ for (int i = 0; i < segments.length; ++i) -->Line_10 $$ mcsum += mc[i] = segments[i].modCount[ CD ]
Line_26 $$ for (int i = 0; i < segments.length; ++i) segments[i].lock()-->Line_36 $$ for (int i = 0; i < segments.length; ++i) segments[i].unlock()[ FD ]
Line_10 $$ mcsum += mc[i] = segments[i].modCount-->Line_15 $$ if (mcsum != 0) [ FD ]
Line_26 $$ for (int i = 0; i < segments.length; ++i) segments[i].lock()-->Line_29 $$ for (int i = 0; i < segments.length; ++i) [ FD ]
Line_7 $$ for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) -->Line_8 $$ int mcsum = 0[ CD ]
Line_16 $$ for (int i = 0; i < segments.length; ++i) -->Line_29 $$ for (int i = 0; i < segments.length; ++i) [ FD ]
Line_2 $$ public boolean containsValue(Object value) -->Line_27 $$ boolean found = false[ CD ]
Line_11 $$ if (segments[i].containsValue(value))-->Line_12 $$ return true[ CD ]
Line_16 $$ for (int i = 0; i < segments.length; ++i) -->Line_17 $$ if (mc[i] != segments[i].modCount) [ CD ]
Line_2 $$ public boolean containsValue(Object value) -->Line_30 $$ if (segments[i].containsValue(value)) [ FD ]
Line_29 $$ for (int i = 0; i < segments.length; ++i) -->Line_36 $$ for (int i = 0; i < segments.length; ++i) segments[i].unlock()[ FD ]
Line_2 $$ public boolean containsValue(Object value) -->Line_7 $$ for (int k = 0; k < RETRIES_BEFORE_LOCK; ++k) [ CD ]
Line_9 $$ for (int i = 0; i < segments.length; ++i) -->Line_16 $$ for (int i = 0; i < segments.length; ++i) [ FD ]
Line_2 $$ public boolean containsValue(Object value) -->Line_11 $$ if (segments[i].containsValue(value))[ FD ]
Line_9 $$ for (int i = 0; i < segments.length; ++i) -->Line_36 $$ for (int i = 0; i < segments.length; ++i) segments[i].unlock()[ FD ]
Line_2 $$ public boolean containsValue(Object value) -->Line_3 $$ if (value == null)[ FD ]
Line_30 $$ if (segments[i].containsValue(value)) -->Line_31 $$ found = true[ CD ]
Line_2 $$ public boolean containsValue(Object value) -->Line_3 $$ if (value == null)[ CD ]
Line_2 $$ public boolean containsValue(Object value) -->Line_38 $$ return found[ CD ]
Line_9 $$ for (int i = 0; i < segments.length; ++i) -->Line_29 $$ for (int i = 0; i < segments.length; ++i) [ FD ]
Line_2 $$ public boolean containsValue(Object value) -->Line_5 $$ final Segment<K, V>[] segments = this.segments[ CD ]
