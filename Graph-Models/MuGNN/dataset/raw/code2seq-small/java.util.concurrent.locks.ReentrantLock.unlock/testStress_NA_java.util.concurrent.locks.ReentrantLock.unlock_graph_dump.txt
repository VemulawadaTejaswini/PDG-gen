Line_2 $$ public void testStress() throws Exception -->Line_5 $$ final DomainSocketWatcher watcher = new DomainSocketWatcher(10000000)[ CD ]
Line_13 $$ watcher.add(pair[1], new DomainSocketWatcher.Handler() -->Line_16 $$ return true[ CD ]
Line_12 $$ DomainSocket[] pair = DomainSocket.socketpair()-->Line_21 $$ pairs.add(pair)[ FD ]
Line_11 $$ for (int i = 0; i < SOCKET_NUM; i++) -->Line_12 $$ DomainSocket[] pair = DomainSocket.socketpair()[ CD ]
Line_2 $$ public void testStress() throws Exception -->Line_3 $$ final int SOCKET_NUM = 250[ CD ]
Line_6 $$ final ArrayList<DomainSocket[]> pairs = new ArrayList<DomainSocket[]>()-->Line_39 $$ if (!pairs.isEmpty()) [ FD ]
Line_34 $$ final Random random = new Random()-->Line_40 $$ int idx = random.nextInt(pairs.size())[ FD ]
Line_8 $$ final Thread adderThread = new Thread(new Runnable() -->Line_58 $$ adderThread.start()[ FD ]
Line_34 $$ final Random random = new Random()-->Line_42 $$ if (random.nextBoolean()) [ FD ]
Line_7 $$ final AtomicInteger handled = new AtomicInteger(0)-->Line_15 $$ handled.incrementAndGet()[ FD ]
Line_2 $$ public void testStress() throws Exception -->Line_6 $$ final ArrayList<DomainSocket[]> pairs = new ArrayList<DomainSocket[]>()[ CD ]
Line_4 $$ final ReentrantLock lock = new ReentrantLock()-->Line_49 $$ lock.unlock()[ FD ]
Line_2 $$ public void testStress() throws Exception -->Line_60 $$ Uninterruptibles.joinUninterruptibly(adderThread)[ CD ]
Line_8 $$ final Thread adderThread = new Thread(new Runnable() -->Line_60 $$ Uninterruptibles.joinUninterruptibly(adderThread)[ FD ]
Line_11 $$ for (int i = 0; i < SOCKET_NUM; i++) -->Line_19 $$ lock.lock()[ CD ]
Line_2 $$ public void testStress() throws Exception -->Line_7 $$ final AtomicInteger handled = new AtomicInteger(0)[ CD ]
Line_2 $$ public void testStress() throws Exception -->Line_59 $$ removerThread.start()[ CD ]
Line_4 $$ final ReentrantLock lock = new ReentrantLock()-->Line_19 $$ lock.lock()[ FD ]
Line_5 $$ final DomainSocketWatcher watcher = new DomainSocketWatcher(10000000)-->Line_45 $$ watcher.remove(pair[1])[ FD ]
Line_36 $$ while (handled.get() != SOCKET_NUM) -->Line_37 $$ lock.lock()[ CD ]
Line_7 $$ final AtomicInteger handled = new AtomicInteger(0)-->Line_36 $$ while (handled.get() != SOCKET_NUM) [ FD ]
Line_2 $$ public void testStress() throws Exception -->Line_8 $$ final Thread adderThread = new Thread(new Runnable() [ CD ]
Line_39 $$ if (!pairs.isEmpty()) -->Line_41 $$ DomainSocket[] pair = pairs.remove(idx)[ CD ]
Line_13 $$ watcher.add(pair[1], new DomainSocketWatcher.Handler() -->Line_15 $$ handled.incrementAndGet()[ CD ]
Line_5 $$ final DomainSocketWatcher watcher = new DomainSocketWatcher(10000000)-->Line_62 $$ watcher.close()[ FD ]
Line_4 $$ final ReentrantLock lock = new ReentrantLock()-->Line_37 $$ lock.lock()[ FD ]
Line_6 $$ final ArrayList<DomainSocket[]> pairs = new ArrayList<DomainSocket[]>()-->Line_21 $$ pairs.add(pair)[ FD ]
Line_2 $$ public void testStress() throws Exception -->Line_62 $$ watcher.close()[ CD ]
Line_2 $$ public void testStress() throws Exception -->Line_4 $$ final ReentrantLock lock = new ReentrantLock()[ CD ]
Line_42 $$ if (random.nextBoolean()) -->Line_43 $$ pair[0].close()[ CD ]
Line_3 $$ final int SOCKET_NUM = 250-->Line_36 $$ while (handled.get() != SOCKET_NUM) [ FD ]
Line_40 $$ int idx = random.nextInt(pairs.size())-->Line_41 $$ DomainSocket[] pair = pairs.remove(idx)[ FD ]
Line_2 $$ public void testStress() throws Exception -->Line_61 $$ Uninterruptibles.joinUninterruptibly(removerThread)[ CD ]
Line_42 $$ if (random.nextBoolean()) -->Line_45 $$ watcher.remove(pair[1])[ CD ]
Line_39 $$ if (!pairs.isEmpty()) -->Line_40 $$ int idx = random.nextInt(pairs.size())[ CD ]
Line_2 $$ public void testStress() throws Exception -->Line_58 $$ adderThread.start()[ CD ]
Line_6 $$ final ArrayList<DomainSocket[]> pairs = new ArrayList<DomainSocket[]>()-->Line_40 $$ int idx = random.nextInt(pairs.size())[ FD ]
Line_3 $$ final int SOCKET_NUM = 250-->Line_11 $$ for (int i = 0; i < SOCKET_NUM; i++) [ FD ]
Line_11 $$ for (int i = 0; i < SOCKET_NUM; i++) -->Line_13 $$ watcher.add(pair[1], new DomainSocketWatcher.Handler() [ CD ]
Line_4 $$ final ReentrantLock lock = new ReentrantLock()-->Line_23 $$ lock.unlock()[ FD ]
Line_6 $$ final ArrayList<DomainSocket[]> pairs = new ArrayList<DomainSocket[]>()-->Line_41 $$ DomainSocket[] pair = pairs.remove(idx)[ FD ]
Line_32 $$ final Thread removerThread = new Thread(new Runnable() -->Line_34 $$ final Random random = new Random()[ CD ]
Line_39 $$ if (!pairs.isEmpty()) -->Line_42 $$ if (random.nextBoolean()) [ CD ]
Line_5 $$ final DomainSocketWatcher watcher = new DomainSocketWatcher(10000000)-->Line_13 $$ watcher.add(pair[1], new DomainSocketWatcher.Handler() [ FD ]
