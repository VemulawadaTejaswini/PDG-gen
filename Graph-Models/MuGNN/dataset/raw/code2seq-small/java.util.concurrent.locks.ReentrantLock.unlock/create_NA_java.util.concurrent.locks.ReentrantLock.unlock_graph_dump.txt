Line_2 $$ private ShortCircuitReplicaInfo create(ExtendedBlockId key, ShortCircuitReplicaCreator creator, Waitable<ShortCircuitReplicaInfo> newWaitable) -->Line_14 $$ lock.lock()[ CD ]
Line_2 $$ private ShortCircuitReplicaInfo create(ExtendedBlockId key, ShortCircuitReplicaCreator creator, Waitable<ShortCircuitReplicaInfo> newWaitable) -->Line_22 $$ Waitable<ShortCircuitReplicaInfo> waitableInMap = replicaInfoMap.get(key)[ FD ]
Line_3 $$ ShortCircuitReplicaInfo info = null-->Line_8 $$ info = creator.createShortCircuitReplicaInfo()[ FD ]
Line_5 $$ if (LOG.isTraceEnabled()) -->Line_6 $$ LOG.trace(this + ": loading " + key)[ CD ]
Line_3 $$ ShortCircuitReplicaInfo info = null-->Line_12 $$ if (info == null)[ FD ]
Line_16 $$ if (info.getReplica() != null) -->Line_22 $$ Waitable<ShortCircuitReplicaInfo> waitableInMap = replicaInfoMap.get(key)[ CD ]
Line_13 $$ info = new ShortCircuitReplicaInfo()-->Line_31 $$ newWaitable.provide(info)[ FD ]
Line_2 $$ private ShortCircuitReplicaInfo create(ExtendedBlockId key, ShortCircuitReplicaCreator creator, Waitable<ShortCircuitReplicaInfo> newWaitable) -->Line_31 $$ newWaitable.provide(info)[ FD ]
Line_25 $$ if (info.getInvalidTokenException() != null) -->Line_26 $$ LOG.warn(this + ": could not load " + key + " due to InvalidToken " + "exception.", info.getInvalidTokenException())[ CD ]
Line_3 $$ ShortCircuitReplicaInfo info = null-->Line_16 $$ if (info.getReplica() != null) [ FD ]
Line_3 $$ ShortCircuitReplicaInfo info = null-->Line_18 $$ LOG.trace(this + ": successfully loaded " + info.getReplica())[ FD ]
Line_3 $$ ShortCircuitReplicaInfo info = null-->Line_13 $$ info = new ShortCircuitReplicaInfo()[ FD ]
Line_13 $$ info = new ShortCircuitReplicaInfo()-->Line_18 $$ LOG.trace(this + ": successfully loaded " + info.getReplica())[ FD ]
Line_22 $$ Waitable<ShortCircuitReplicaInfo> waitableInMap = replicaInfoMap.get(key)-->Line_23 $$ if (waitableInMap == newWaitable)[ FD ]
Line_8 $$ info = creator.createShortCircuitReplicaInfo()-->Line_26 $$ LOG.warn(this + ": could not load " + key + " due to InvalidToken " + "exception.", info.getInvalidTokenException())[ FD ]
Line_2 $$ private ShortCircuitReplicaInfo create(ExtendedBlockId key, ShortCircuitReplicaCreator creator, Waitable<ShortCircuitReplicaInfo> newWaitable) -->Line_3 $$ ShortCircuitReplicaInfo info = null[ CD ]
Line_13 $$ info = new ShortCircuitReplicaInfo()-->Line_26 $$ LOG.warn(this + ": could not load " + key + " due to InvalidToken " + "exception.", info.getInvalidTokenException())[ FD ]
Line_8 $$ info = creator.createShortCircuitReplicaInfo()-->Line_25 $$ if (info.getInvalidTokenException() != null) [ FD ]
Line_13 $$ info = new ShortCircuitReplicaInfo()-->Line_16 $$ if (info.getReplica() != null) [ FD ]
Line_3 $$ ShortCircuitReplicaInfo info = null-->Line_26 $$ LOG.warn(this + ": could not load " + key + " due to InvalidToken " + "exception.", info.getInvalidTokenException())[ FD ]
Line_2 $$ private ShortCircuitReplicaInfo create(ExtendedBlockId key, ShortCircuitReplicaCreator creator, Waitable<ShortCircuitReplicaInfo> newWaitable) -->Line_24 $$ replicaInfoMap.remove(key)[ FD ]
Line_3 $$ ShortCircuitReplicaInfo info = null-->Line_25 $$ if (info.getInvalidTokenException() != null) [ FD ]
Line_16 $$ if (info.getReplica() != null) -->Line_25 $$ if (info.getInvalidTokenException() != null) [ CD ]
Line_16 $$ if (info.getReplica() != null) -->Line_23 $$ if (waitableInMap == newWaitable)[ CD ]
Line_3 $$ ShortCircuitReplicaInfo info = null-->Line_31 $$ newWaitable.provide(info)[ FD ]
Line_8 $$ info = creator.createShortCircuitReplicaInfo()-->Line_13 $$ info = new ShortCircuitReplicaInfo()[ FD ]
Line_16 $$ if (info.getReplica() != null) -->Line_17 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_2 $$ private ShortCircuitReplicaInfo create(ExtendedBlockId key, ShortCircuitReplicaCreator creator, Waitable<ShortCircuitReplicaInfo> newWaitable) -->Line_35 $$ return info[ CD ]
Line_8 $$ info = creator.createShortCircuitReplicaInfo()-->Line_16 $$ if (info.getReplica() != null) [ FD ]
Line_2 $$ private ShortCircuitReplicaInfo create(ExtendedBlockId key, ShortCircuitReplicaCreator creator, Waitable<ShortCircuitReplicaInfo> newWaitable) -->Line_12 $$ if (info == null)[ CD ]
Line_8 $$ info = creator.createShortCircuitReplicaInfo()-->Line_31 $$ newWaitable.provide(info)[ FD ]
Line_2 $$ private ShortCircuitReplicaInfo create(ExtendedBlockId key, ShortCircuitReplicaCreator creator, Waitable<ShortCircuitReplicaInfo> newWaitable) -->Line_8 $$ info = creator.createShortCircuitReplicaInfo()[ FD ]
Line_8 $$ info = creator.createShortCircuitReplicaInfo()-->Line_18 $$ LOG.trace(this + ": successfully loaded " + info.getReplica())[ FD ]
Line_12 $$ if (info == null)-->Line_13 $$ info = new ShortCircuitReplicaInfo()[ CD ]
Line_17 $$ if (LOG.isTraceEnabled()) -->Line_18 $$ LOG.trace(this + ": successfully loaded " + info.getReplica())[ CD ]
Line_23 $$ if (waitableInMap == newWaitable)-->Line_24 $$ replicaInfoMap.remove(key)[ CD ]
Line_25 $$ if (info.getInvalidTokenException() != null) -->Line_28 $$ LOG.warn(this + ": failed to load " + key)[ CD ]
Line_13 $$ info = new ShortCircuitReplicaInfo()-->Line_25 $$ if (info.getInvalidTokenException() != null) [ FD ]
Line_8 $$ info = creator.createShortCircuitReplicaInfo()-->Line_12 $$ if (info == null)[ FD ]
Line_16 $$ if (info.getReplica() != null) -->Line_20 $$ startCacheCleanerThreadIfNeeded()[ CD ]
Line_2 $$ private ShortCircuitReplicaInfo create(ExtendedBlockId key, ShortCircuitReplicaCreator creator, Waitable<ShortCircuitReplicaInfo> newWaitable) -->Line_23 $$ if (waitableInMap == newWaitable)[ FD ]
