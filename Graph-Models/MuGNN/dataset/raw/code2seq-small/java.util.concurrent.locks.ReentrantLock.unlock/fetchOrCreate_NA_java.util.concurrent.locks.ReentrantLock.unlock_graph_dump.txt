Line_2 $$ public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key, ShortCircuitReplicaCreator creator) -->Line_17 $$ info = fetch(key, waitable)[ FD ]
Line_8 $$ if (closed) -->Line_12 $$ return null[ CD ]
Line_2 $$ public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key, ShortCircuitReplicaCreator creator) -->Line_14 $$ Waitable<ShortCircuitReplicaInfo> waitable = replicaInfoMap.get(key)[ FD ]
Line_2 $$ public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key, ShortCircuitReplicaCreator creator) -->Line_3 $$ Waitable<ShortCircuitReplicaInfo> newWaitable = null[ CD ]
Line_14 $$ Waitable<ShortCircuitReplicaInfo> waitable = replicaInfoMap.get(key)-->Line_17 $$ info = fetch(key, waitable)[ FD ]
Line_8 $$ if (closed) -->Line_9 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_28 $$ newWaitable = new Waitable<ShortCircuitReplicaInfo>(lock.newCondition())-->Line_33 $$ return create(key, creator, newWaitable)[ FD ]
Line_7 $$ do -->Line_8 $$ if (closed) [ CD ]
Line_3 $$ Waitable<ShortCircuitReplicaInfo> newWaitable = null-->Line_33 $$ return create(key, creator, newWaitable)[ FD ]
Line_7 $$ do -->Line_15 $$ if (waitable != null) [ CD ]
Line_3 $$ Waitable<ShortCircuitReplicaInfo> newWaitable = null-->Line_29 $$ replicaInfoMap.put(key, newWaitable)[ FD ]
Line_2 $$ public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key, ShortCircuitReplicaCreator creator) -->Line_29 $$ replicaInfoMap.put(key, newWaitable)[ FD ]
Line_17 $$ info = fetch(key, waitable)-->Line_26 $$ if (info != null)[ FD ]
Line_7 $$ do -->Line_14 $$ Waitable<ShortCircuitReplicaInfo> waitable = replicaInfoMap.get(key)[ CD ]
Line_2 $$ public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key, ShortCircuitReplicaCreator creator) -->Line_33 $$ return create(key, creator, newWaitable)[ CD ]
Line_3 $$ Waitable<ShortCircuitReplicaInfo> newWaitable = null-->Line_28 $$ newWaitable = new Waitable<ShortCircuitReplicaInfo>(lock.newCondition())[ FD ]
Line_2 $$ public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key, ShortCircuitReplicaCreator creator) -->Line_4 $$ lock.lock()[ CD ]
Line_28 $$ newWaitable = new Waitable<ShortCircuitReplicaInfo>(lock.newCondition())-->Line_29 $$ replicaInfoMap.put(key, newWaitable)[ FD ]
Line_14 $$ Waitable<ShortCircuitReplicaInfo> waitable = replicaInfoMap.get(key)-->Line_15 $$ if (waitable != null) [ FD ]
Line_6 $$ ShortCircuitReplicaInfo info = null-->Line_17 $$ info = fetch(key, waitable)[ FD ]
Line_2 $$ public ShortCircuitReplicaInfo fetchOrCreate(ExtendedBlockId key, ShortCircuitReplicaCreator creator) -->Line_33 $$ return create(key, creator, newWaitable)[ FD ]
Line_6 $$ ShortCircuitReplicaInfo info = null-->Line_26 $$ if (info != null)[ FD ]
Line_19 $$ if (LOG.isDebugEnabled()) -->Line_20 $$ LOG.debug(this + ": retrying " + e.getMessage())[ CD ]
Line_9 $$ if (LOG.isTraceEnabled()) -->Line_10 $$ LOG.trace(this + ": can't fetchOrCreate " + key + " because the cache is closed.")[ CD ]
Line_26 $$ if (info != null)-->Line_27 $$ return info[ CD ]
