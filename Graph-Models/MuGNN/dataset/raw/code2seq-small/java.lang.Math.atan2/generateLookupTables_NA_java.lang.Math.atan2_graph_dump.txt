Line_2 $$ private void generateLookupTables() -->Line_9 $$ int cy = myHeight / 2[ CD ]
Line_17 $$ if (mySat[index] <= 1f) -->Line_21 $$ mySat[index] = 1f[ CD ]
Line_2 $$ private void generateLookupTables() -->Line_6 $$ float radius = getRadius()[ CD ]
Line_7 $$ float blend = (radius + 2f) / radius - 1f-->Line_20 $$ myAlphas[index] = (int) ((blend - Math.min(blend, mySat[index] - 1f)) * 255 / blend) << 24[ FD ]
Line_13 $$ for (int y = 0; y < myHeight; y++) -->Line_14 $$ int ky = cy - y[ CD ]
Line_13 $$ for (int y = 0; y < myHeight; y++) -->Line_16 $$ mySat[index] = (float) Math.sqrt(squarekx + ky * ky) / radius[ CD ]
Line_17 $$ if (mySat[index] <= 1f) -->Line_18 $$ myAlphas[index] = 0xff000000[ CD ]
Line_13 $$ for (int y = 0; y < myHeight; y++) -->Line_17 $$ if (mySat[index] <= 1f) [ CD ]
Line_10 $$ for (int x = 0; x < myWidth; x++) -->Line_12 $$ int squarekx = kx * kx[ CD ]
Line_10 $$ for (int x = 0; x < myWidth; x++) -->Line_11 $$ int kx = x - cx[ CD ]
Line_13 $$ for (int y = 0; y < myHeight; y++) -->Line_15 $$ int index = x + y * myWidth[ CD ]
Line_2 $$ private void generateLookupTables() -->Line_8 $$ int cx = myWidth / 2[ CD ]
Line_14 $$ int ky = cy - y-->Line_24 $$ myHues[index] = (float) (Math.atan2(ky, kx) / Math.PI / 2d)[ FD ]
Line_6 $$ float radius = getRadius()-->Line_16 $$ mySat[index] = (float) Math.sqrt(squarekx + ky * ky) / radius[ FD ]
Line_2 $$ private void generateLookupTables() -->Line_7 $$ float blend = (radius + 2f) / radius - 1f[ CD ]
Line_2 $$ private void generateLookupTables() -->Line_10 $$ for (int x = 0; x < myWidth; x++) [ CD ]
Line_23 $$ if (myAlphas[index] != 0) -->Line_24 $$ myHues[index] = (float) (Math.atan2(ky, kx) / Math.PI / 2d)[ CD ]
Line_11 $$ int kx = x - cx-->Line_24 $$ myHues[index] = (float) (Math.atan2(ky, kx) / Math.PI / 2d)[ FD ]
Line_13 $$ for (int y = 0; y < myHeight; y++) -->Line_23 $$ if (myAlphas[index] != 0) [ CD ]
Line_10 $$ for (int x = 0; x < myWidth; x++) -->Line_13 $$ for (int y = 0; y < myHeight; y++) [ CD ]
Line_17 $$ if (mySat[index] <= 1f) -->Line_20 $$ myAlphas[index] = (int) ((blend - Math.min(blend, mySat[index] - 1f)) * 255 / blend) << 24[ CD ]
