Line_10 $$ EditorEx editor2 = getEditor2()-->Line_23 $$ int endY2 = editor2.logicalPositionToXY(new LogicalPosition(change.getEndLine(Side.RIGHT), 0)).y - shift2[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())[ CD ]
Line_4 $$ Rectangle clip = gg.getClipBounds()-->Line_8 $$ gg.fill(clip)[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_18 $$ DiffDividerDrawUtil.paintPolygons(gg, divider.getWidth(), false, rotate == 0, editor1, editor2, this)[ CD ]
Line_10 $$ EditorEx editor2 = getEditor2()-->Line_12 $$ JComponent header2 = editor2.getHeaderComponent()[ FD ]
Line_4 $$ Rectangle clip = gg.getClipBounds()-->Line_5 $$ if (clip == null)[ FD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_4 $$ Rectangle clip = gg.getClipBounds()[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_37 $$ gg.dispose()[ CD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_18 $$ DiffDividerDrawUtil.paintPolygons(gg, divider.getWidth(), false, rotate == 0, editor1, editor2, this)[ FD ]
Line_10 $$ EditorEx editor2 = getEditor2()-->Line_16 $$ int shift2 = editor2.getScrollingModel().getVerticalScrollOffset() - headerOffset2[ FD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_37 $$ gg.dispose()[ FD ]
Line_26 $$ if (rotate != 0)-->Line_27 $$ gg.rotate(-rotate)[ CD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_12 $$ JComponent header2 = editor2.getHeaderComponent()[ CD ]
Line_9 $$ EditorEx editor1 = getEditor1()-->Line_22 $$ int endY1 = editor1.logicalPositionToXY(new LogicalPosition(change.getEndLine(Side.LEFT), 0)).y - shift1[ FD ]
Line_9 $$ EditorEx editor1 = getEditor1()-->Line_11 $$ JComponent header1 = editor1.getHeaderComponent()[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_14 $$ int headerOffset2 = header2 == null ? 0 : header2.getHeight()[ CD ]
Line_5 $$ if (clip == null)-->Line_6 $$ return[ CD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_24 $$ AffineTransform oldTransform = gg.getTransform()[ FD ]
Line_19 $$ for (DiffChange change : myDiffChanges) -->Line_29 $$ myLabel.setForeground(getRecordTitleColor(change))[ FD ]
Line_11 $$ JComponent header1 = editor1.getHeaderComponent()-->Line_13 $$ int headerOffset1 = header1 == null ? 0 : header1.getHeight()[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_15 $$ int shift1 = editor1.getScrollingModel().getVerticalScrollOffset() - headerOffset1[ CD ]
Line_20 $$ int y1 = editor1.logicalPositionToXY(new LogicalPosition(change.getStartLine(Side.LEFT), 0)).y - shift1-->Line_25 $$ gg.translate(0, y1)[ FD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_35 $$ gg.drawLine(0, endY1 - 1, clip.width, endY2 - 1)[ FD ]
Line_4 $$ Rectangle clip = gg.getClipBounds()-->Line_30 $$ myLabel.setBounds(clip)[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_8 $$ gg.fill(clip)[ CD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_7 $$ gg.setColor(DiffDrawUtil.getDividerColor())[ CD ]
Line_9 $$ EditorEx editor1 = getEditor1()-->Line_15 $$ int shift1 = editor1.getScrollingModel().getVerticalScrollOffset() - headerOffset1[ FD ]
Line_19 $$ for (DiffChange change : myDiffChanges) -->Line_20 $$ int y1 = editor1.logicalPositionToXY(new LogicalPosition(change.getStartLine(Side.LEFT), 0)).y - shift1[ FD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_25 $$ gg.translate(0, y1)[ FD ]
Line_10 $$ EditorEx editor2 = getEditor2()-->Line_18 $$ DiffDividerDrawUtil.paintPolygons(gg, divider.getWidth(), false, rotate == 0, editor1, editor2, this)[ FD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_27 $$ gg.rotate(-rotate)[ FD ]
Line_19 $$ for (DiffChange change : myDiffChanges) -->Line_28 $$ myLabel.setText(change.getRecord().getName())[ FD ]
Line_9 $$ EditorEx editor1 = getEditor1()-->Line_18 $$ DiffDividerDrawUtil.paintPolygons(gg, divider.getWidth(), false, rotate == 0, editor1, editor2, this)[ FD ]
Line_19 $$ for (DiffChange change : myDiffChanges) -->Line_23 $$ int endY2 = editor2.logicalPositionToXY(new LogicalPosition(change.getEndLine(Side.RIGHT), 0)).y - shift2[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_4 $$ Rectangle clip = gg.getClipBounds()[ CD ]
Line_17 $$ double rotate = shift1 == shift2 ? 0 : Math.atan2(shift2 - shift1, clip.width)-->Line_27 $$ gg.rotate(-rotate)[ FD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_32 $$ gg.setTransform(oldTransform)[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_10 $$ EditorEx editor2 = getEditor2()[ CD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_17 $$ double rotate = shift1 == shift2 ? 0 : Math.atan2(shift2 - shift1, clip.width)[ CD ]
Line_24 $$ AffineTransform oldTransform = gg.getTransform()-->Line_32 $$ gg.setTransform(oldTransform)[ FD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_34 $$ gg.drawLine(0, y1 - 1, clip.width, y2 - 1)[ FD ]
Line_10 $$ EditorEx editor2 = getEditor2()-->Line_21 $$ int y2 = editor2.logicalPositionToXY(new LogicalPosition(change.getStartLine(Side.RIGHT), 0)).y - shift2[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_16 $$ int shift2 = editor2.getScrollingModel().getVerticalScrollOffset() - headerOffset2[ CD ]
Line_17 $$ double rotate = shift1 == shift2 ? 0 : Math.atan2(shift2 - shift1, clip.width)-->Line_26 $$ if (rotate != 0)[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_11 $$ JComponent header1 = editor1.getHeaderComponent()[ CD ]
Line_19 $$ for (DiffChange change : myDiffChanges) -->Line_21 $$ int y2 = editor2.logicalPositionToXY(new LogicalPosition(change.getStartLine(Side.RIGHT), 0)).y - shift2[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_5 $$ if (clip == null)[ CD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_8 $$ gg.fill(clip)[ FD ]
Line_12 $$ JComponent header2 = editor2.getHeaderComponent()-->Line_14 $$ int headerOffset2 = header2 == null ? 0 : header2.getHeight()[ FD ]
Line_19 $$ for (DiffChange change : myDiffChanges) -->Line_22 $$ int endY1 = editor1.logicalPositionToXY(new LogicalPosition(change.getEndLine(Side.LEFT), 0)).y - shift1[ FD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_7 $$ gg.setColor(DiffDrawUtil.getDividerColor())[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_9 $$ EditorEx editor1 = getEditor1()[ CD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_33 $$ gg.setColor(JBColor.border())[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_18 $$ DiffDividerDrawUtil.paintPolygons(gg, divider.getWidth(), false, rotate == 0, editor1, editor2, this)[ FD ]
Line_2 $$ public void paint(@NotNull Graphics g, @NotNull JComponent divider) -->Line_13 $$ int headerOffset1 = header1 == null ? 0 : header1.getHeight()[ CD ]
Line_3 $$ Graphics2D gg = DiffDividerDrawUtil.getDividerGraphics(g, divider, getEditor1().getComponent())-->Line_31 $$ myLabel.paint(gg)[ FD ]
Line_9 $$ EditorEx editor1 = getEditor1()-->Line_20 $$ int y1 = editor1.logicalPositionToXY(new LogicalPosition(change.getStartLine(Side.LEFT), 0)).y - shift1[ FD ]
