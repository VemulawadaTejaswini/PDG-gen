Line_2 $$ public void setFile(SvnVcs vcs, File file) -->Line_5 $$ if (file != null) [ FD ]
Line_2 $$ public void setFile(SvnVcs vcs, File file) -->Line_8 $$ collectProperties(vcs, file, props)[ FD ]
Line_13 $$ myTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() -->Line_16 $$ if (value.toString().indexOf('\r') >= 0) [ FD ]
Line_13 $$ myTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() -->Line_19 $$ if (value.toString().indexOf('\n') >= 0) [ FD ]
Line_17 $$ value = value.toString().substring(0, value.toString().indexOf('\r')) + " [...]"-->Line_19 $$ if (value.toString().indexOf('\n') >= 0) [ FD ]
Line_13 $$ myTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() -->Line_23 $$ super.setValue(value)[ CD ]
Line_13 $$ myTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() -->Line_15 $$ if (value != null) [ FD ]
Line_2 $$ public void setFile(SvnVcs vcs, File file) -->Line_3 $$ final Map<String, String> props = new TreeMap<String, String>()[ CD ]
Line_15 $$ if (value != null) -->Line_16 $$ if (value.toString().indexOf('\r') >= 0) [ CD ]
Line_16 $$ if (value.toString().indexOf('\r') >= 0) -->Line_17 $$ value = value.toString().substring(0, value.toString().indexOf('\r')) + " [...]"[ CD ]
Line_13 $$ myTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() -->Line_20 $$ value = value.toString().substring(0, value.toString().indexOf('\n')) + " [...]"[ FD ]
Line_5 $$ if (file != null) -->Line_8 $$ collectProperties(vcs, file, props)[ CD ]
Line_13 $$ myTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() -->Line_17 $$ value = value.toString().substring(0, value.toString().indexOf('\r')) + " [...]"[ FD ]
Line_2 $$ public void setFile(SvnVcs vcs, File file) -->Line_4 $$ boolean firstTime = myFile == null[ CD ]
Line_3 $$ final Map<String, String> props = new TreeMap<String, String>()-->Line_11 $$ model.setDataVector(createTableModel(props), new Object[] [ FD ]
Line_2 $$ public void setFile(SvnVcs vcs, File file) -->Line_13 $$ myTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() [ CD ]
Line_13 $$ myTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() -->Line_15 $$ if (value != null) [ CD ]
Line_13 $$ myTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() -->Line_23 $$ super.setValue(value)[ FD ]
Line_20 $$ value = value.toString().substring(0, value.toString().indexOf('\n')) + " [...]"-->Line_23 $$ super.setValue(value)[ FD ]
Line_17 $$ value = value.toString().substring(0, value.toString().indexOf('\r')) + " [...]"-->Line_20 $$ value = value.toString().substring(0, value.toString().indexOf('\n')) + " [...]"[ FD ]
Line_19 $$ if (value.toString().indexOf('\n') >= 0) -->Line_20 $$ value = value.toString().substring(0, value.toString().indexOf('\n')) + " [...]"[ CD ]
Line_29 $$ if (myTable.getRowCount() > 0) -->Line_30 $$ myTable.getSelectionModel().setSelectionInterval(0, 0)[ CD ]
Line_26 $$ if (firstTime) -->Line_27 $$ mySplitPane.setDividerLocation(.5)[ CD ]
Line_15 $$ if (value != null) -->Line_19 $$ if (value.toString().indexOf('\n') >= 0) [ CD ]
Line_2 $$ public void setFile(SvnVcs vcs, File file) -->Line_10 $$ DefaultTableModel model = (DefaultTableModel) myTable.getModel()[ CD ]
Line_2 $$ public void setFile(SvnVcs vcs, File file) -->Line_12 $$ myTable.getColumnModel().setColumnSelectionAllowed(false)[ CD ]
Line_2 $$ public void setFile(SvnVcs vcs, File file) -->Line_29 $$ if (myTable.getRowCount() > 0) [ CD ]
Line_2 $$ public void setFile(SvnVcs vcs, File file) -->Line_11 $$ model.setDataVector(createTableModel(props), new Object[] [ CD ]
Line_2 $$ public void setFile(SvnVcs vcs, File file) -->Line_26 $$ if (firstTime) [ CD ]
Line_2 $$ public void setFile(SvnVcs vcs, File file) -->Line_5 $$ if (file != null) [ CD ]
Line_3 $$ final Map<String, String> props = new TreeMap<String, String>()-->Line_8 $$ collectProperties(vcs, file, props)[ FD ]
Line_17 $$ value = value.toString().substring(0, value.toString().indexOf('\r')) + " [...]"-->Line_23 $$ super.setValue(value)[ FD ]
Line_10 $$ DefaultTableModel model = (DefaultTableModel) myTable.getModel()-->Line_11 $$ model.setDataVector(createTableModel(props), new Object[] [ FD ]
