Line_38 $$ if (rows.length > 0) -->Line_39 $$ boolean valueToBeSet = false[ CD ]
Line_2 $$ private JComponent createTable() -->Line_14 $$ myTable.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION)[ CD ]
Line_6 $$ MyTableRenderer renderer = new MyTableRenderer()-->Line_11 $$ columnModel.getColumn(SETTER_COLUMN).setCellRenderer(renderer)[ FD ]
Line_33 $$ actionMap.put("enable_disable", new AbstractAction() -->Line_35 $$ if (myTable.isEditing())[ CD ]
Line_55 $$ actionMap.put("invokeImpl", new AbstractAction() -->Line_57 $$ TableCellEditor editor = myTable.getCellEditor()[ CD ]
Line_57 $$ TableCellEditor editor = myTable.getCellEditor()-->Line_59 $$ editor.stopCellEditing()[ FD ]
Line_41 $$ if (!myCheckedMarks[row]) -->Line_42 $$ valueToBeSet = true[ CD ]
Line_37 $$ int[] rows = myTable.getSelectedRows()-->Line_50 $$ TableUtil.selectRows(myTable, rows)[ FD ]
Line_22 $$ TableCellEditor editor = myTable.getCellEditor()-->Line_58 $$ if (editor != null) [ FD ]
Line_7 $$ TableColumnModel columnModel = myTable.getColumnModel()-->Line_12 $$ TableUtil.setupCheckboxColumn(columnModel.getColumn(CHECKED_COLUMN))[ FD ]
Line_58 $$ if (editor != null) -->Line_59 $$ editor.stopCellEditing()[ CD ]
Line_7 $$ TableColumnModel columnModel = myTable.getColumnModel()-->Line_9 $$ columnModel.getColumn(FIELD_COLUMN).setCellRenderer(renderer)[ FD ]
Line_2 $$ private JComponent createTable() -->Line_12 $$ TableUtil.setupCheckboxColumn(columnModel.getColumn(CHECKED_COLUMN))[ CD ]
Line_2 $$ private JComponent createTable() -->Line_16 $$ JPanel panel = new JPanel(new BorderLayout())[ CD ]
Line_38 $$ if (rows.length > 0) -->Line_50 $$ TableUtil.selectRows(myTable, rows)[ CD ]
Line_7 $$ TableColumnModel columnModel = myTable.getColumnModel()-->Line_8 $$ columnModel.getColumn(CHECKED_COLUMN).setCellRenderer(new BooleanTableCellRenderer())[ FD ]
Line_2 $$ private JComponent createTable() -->Line_11 $$ columnModel.getColumn(SETTER_COLUMN).setCellRenderer(renderer)[ CD ]
Line_20 $$ myTable.registerKeyboardAction(new ActionListener() -->Line_22 $$ TableCellEditor editor = myTable.getCellEditor()[ CD ]
Line_2 $$ private JComponent createTable() -->Line_9 $$ columnModel.getColumn(FIELD_COLUMN).setCellRenderer(renderer)[ CD ]
Line_42 $$ valueToBeSet = true-->Line_47 $$ myCheckedMarks[row] = valueToBeSet[ FD ]
Line_33 $$ actionMap.put("enable_disable", new AbstractAction() -->Line_38 $$ if (rows.length > 0) [ CD ]
Line_22 $$ TableCellEditor editor = myTable.getCellEditor()-->Line_23 $$ if (editor != null) [ FD ]
Line_6 $$ MyTableRenderer renderer = new MyTableRenderer()-->Line_10 $$ columnModel.getColumn(GETTER_COLUMN).setCellRenderer(renderer)[ FD ]
Line_55 $$ actionMap.put("invokeImpl", new AbstractAction() -->Line_58 $$ if (editor != null) [ CD ]
Line_2 $$ private JComponent createTable() -->Line_65 $$ return panel[ CD ]
Line_17 $$ Border border = IdeBorderFactory.createTitledBorder(RefactoringBundle.message("encapsulate.fields.fields.to.encapsulate.border.title"), false)-->Line_18 $$ panel.setBorder(border)[ FD ]
Line_39 $$ boolean valueToBeSet = false-->Line_42 $$ valueToBeSet = true[ FD ]
Line_16 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_18 $$ panel.setBorder(border)[ FD ]
Line_2 $$ private JComponent createTable() -->Line_8 $$ columnModel.getColumn(CHECKED_COLUMN).setCellRenderer(new BooleanTableCellRenderer())[ CD ]
Line_15 $$ JScrollPane scrollPane = ScrollPaneFactory.createScrollPane(myTable)-->Line_19 $$ panel.add(scrollPane)[ FD ]
Line_2 $$ private JComponent createTable() -->Line_18 $$ panel.setBorder(border)[ CD ]
Line_35 $$ if (myTable.isEditing())-->Line_36 $$ return[ CD ]
Line_2 $$ private JComponent createTable() -->Line_7 $$ TableColumnModel columnModel = myTable.getColumnModel()[ CD ]
Line_2 $$ private JComponent createTable() -->Line_54 $$ inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "invokeImpl")[ CD ]
Line_6 $$ MyTableRenderer renderer = new MyTableRenderer()-->Line_9 $$ columnModel.getColumn(FIELD_COLUMN).setCellRenderer(renderer)[ FD ]
Line_20 $$ myTable.registerKeyboardAction(new ActionListener() -->Line_23 $$ if (editor != null) [ CD ]
Line_7 $$ TableColumnModel columnModel = myTable.getColumnModel()-->Line_11 $$ columnModel.getColumn(SETTER_COLUMN).setCellRenderer(renderer)[ FD ]
Line_39 $$ boolean valueToBeSet = false-->Line_47 $$ myCheckedMarks[row] = valueToBeSet[ FD ]
Line_2 $$ private JComponent createTable() -->Line_20 $$ myTable.registerKeyboardAction(new ActionListener() [ CD ]
Line_23 $$ if (editor != null) -->Line_26 $$ doCancelAction()[ CD ]
Line_22 $$ TableCellEditor editor = myTable.getCellEditor()-->Line_24 $$ editor.cancelCellEditing()[ FD ]
Line_2 $$ private JComponent createTable() -->Line_30 $$ InputMap inputMap = myTable.getInputMap()[ CD ]
Line_2 $$ private JComponent createTable() -->Line_55 $$ actionMap.put("invokeImpl", new AbstractAction() [ CD ]
Line_2 $$ private JComponent createTable() -->Line_5 $$ myTable.setSurrendersFocusOnKeystroke(true)[ CD ]
Line_2 $$ private JComponent createTable() -->Line_10 $$ columnModel.getColumn(GETTER_COLUMN).setCellRenderer(renderer)[ CD ]
Line_2 $$ private JComponent createTable() -->Line_32 $$ ActionMap actionMap = myTable.getActionMap()[ CD ]
Line_16 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_19 $$ panel.add(scrollPane)[ FD ]
Line_33 $$ actionMap.put("enable_disable", new AbstractAction() -->Line_37 $$ int[] rows = myTable.getSelectedRows()[ CD ]
Line_38 $$ if (rows.length > 0) -->Line_49 $$ myTableModel.fireTableRowsUpdated(rows[0], rows[rows.length - 1])[ CD ]
Line_2 $$ private JComponent createTable() -->Line_6 $$ MyTableRenderer renderer = new MyTableRenderer()[ CD ]
Line_2 $$ private JComponent createTable() -->Line_33 $$ actionMap.put("enable_disable", new AbstractAction() [ CD ]
Line_23 $$ if (editor != null) -->Line_24 $$ editor.cancelCellEditing()[ CD ]
Line_58 $$ if (editor != null) -->Line_61 $$ clickDefaultButton()[ CD ]
Line_22 $$ TableCellEditor editor = myTable.getCellEditor()-->Line_59 $$ editor.stopCellEditing()[ FD ]
Line_7 $$ TableColumnModel columnModel = myTable.getColumnModel()-->Line_10 $$ columnModel.getColumn(GETTER_COLUMN).setCellRenderer(renderer)[ FD ]
Line_2 $$ private JComponent createTable() -->Line_19 $$ panel.add(scrollPane)[ CD ]
Line_2 $$ private JComponent createTable() -->Line_13 $$ myTable.setPreferredScrollableViewportSize(new Dimension(550, myTable.getRowHeight() * 12))[ CD ]
Line_2 $$ private JComponent createTable() -->Line_15 $$ JScrollPane scrollPane = ScrollPaneFactory.createScrollPane(myTable)[ CD ]
Line_2 $$ private JComponent createTable() -->Line_17 $$ Border border = IdeBorderFactory.createTitledBorder(RefactoringBundle.message("encapsulate.fields.fields.to.encapsulate.border.title"), false)[ CD ]
Line_2 $$ private JComponent createTable() -->Line_31 $$ inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0), "enable_disable")[ CD ]
Line_57 $$ TableCellEditor editor = myTable.getCellEditor()-->Line_58 $$ if (editor != null) [ FD ]
