Line_17 $$ if (!myLock.writeLock().tryLock()) -->Line_18 $$ final AtomicBoolean lockAcquired = new AtomicBoolean(false)[ CD ]
Line_18 $$ final AtomicBoolean lockAcquired = new AtomicBoolean(false)-->Line_22 $$ while (!lockAcquired.get()) [ FD ]
Line_14 $$ if (!isWriteAccessAllowed()) -->Line_15 $$ assertNoPsiLock()[ CD ]
Line_2 $$ private void startWrite(Class clazz) -->Line_40 $$ myWriteActionsStack.push(clazz)[ CD ]
Line_2 $$ private void startWrite(Class clazz) -->Line_41 $$ fireWriteActionStarted(clazz)[ CD ]
Line_2 $$ private void startWrite(Class clazz) -->Line_40 $$ myWriteActionsStack.push(clazz)[ FD ]
Line_18 $$ final AtomicBoolean lockAcquired = new AtomicBoolean(false)-->Line_32 $$ lockAcquired.set(true)[ FD ]
Line_17 $$ if (!myLock.writeLock().tryLock()) -->Line_19 $$ if (ourDumpThreadsOnLongWriteActionWaiting > 0) [ CD ]
Line_19 $$ if (ourDumpThreadsOnLongWriteActionWaiting > 0) -->Line_20 $$ executeOnPooledThread(new Runnable() [ CD ]
Line_20 $$ executeOnPooledThread(new Runnable() -->Line_22 $$ while (!lockAcquired.get()) [ CD ]
Line_7 $$ if ((LOG.isDebugEnabled() || isUnitTestMode()) && myWriteActionsStack.isEmpty()) -->Line_8 $$ writePauses.started()[ CD ]
Line_2 $$ private void startWrite(Class clazz) -->Line_41 $$ fireWriteActionStarted(clazz)[ FD ]
Line_2 $$ private void startWrite(Class clazz) -->Line_7 $$ if ((LOG.isDebugEnabled() || isUnitTestMode()) && myWriteActionsStack.isEmpty()) [ CD ]
Line_2 $$ private void startWrite(Class clazz) -->Line_12 $$ fireBeforeWriteActionStart(clazz)[ FD ]
Line_2 $$ private void startWrite(Class clazz) -->Line_5 $$ boolean writeActionPending = myWriteActionPending[ CD ]
Line_2 $$ private void startWrite(Class clazz) -->Line_4 $$ assertIsDispatchThread(getStatus(), "Write access is allowed from event dispatch thread only")[ CD ]
Line_22 $$ while (!lockAcquired.get()) -->Line_24 $$ if (!lockAcquired.get()) [ CD ]
Line_18 $$ final AtomicBoolean lockAcquired = new AtomicBoolean(false)-->Line_24 $$ if (!lockAcquired.get()) [ FD ]
Line_22 $$ while (!lockAcquired.get()) -->Line_23 $$ TimeoutUtil.sleep(ourDumpThreadsOnLongWriteActionWaiting)[ CD ]
Line_17 $$ if (!myLock.writeLock().tryLock()) -->Line_31 $$ myLock.writeLock().lockInterruptibly()[ CD ]
Line_24 $$ if (!lockAcquired.get()) -->Line_25 $$ PerformanceWatcher.getInstance().dumpThreads("waiting", true)[ CD ]
Line_17 $$ if (!myLock.writeLock().tryLock()) -->Line_32 $$ lockAcquired.set(true)[ CD ]
