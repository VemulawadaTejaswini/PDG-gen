Line_4 $$ List<String> expectedLocations = asList("A", "B")-->Line_14 $$ assertThat(locations, is(expectedLocations))[ FD ]
Line_5 $$ Hierarchy hierarchy = ConfigHierarchyTestCase.class.getAnnotation(Hierarchy.class)-->Line_6 $$ assertNotNull(hierarchy)[ FD ]
Line_13 $$ List<String> locations = stream(configs).map(ContextConfig::<>location).collect(toList())-->Line_14 $$ assertThat(locations, is(expectedLocations))[ FD ]
Line_7 $$ Hierarchy synthesizedHierarchy = synthesizeAnnotation(hierarchy)-->Line_9 $$ assertThat(synthesizedHierarchy, instanceOf(SynthesizedAnnotation.class))[ FD ]
Line_15 $$ List<String> values = stream(configs).map(ContextConfig::<>value).collect(toList())-->Line_16 $$ assertThat(values, is(expectedLocations))[ FD ]
Line_4 $$ List<String> expectedLocations = asList("A", "B")-->Line_16 $$ assertThat(values, is(expectedLocations))[ FD ]
Line_10 $$ ContextConfig[] configs = synthesizedHierarchy.value()-->Line_13 $$ List<String> locations = stream(configs).map(ContextConfig::<>location).collect(toList())[ FD ]
Line_10 $$ ContextConfig[] configs = synthesizedHierarchy.value()-->Line_15 $$ List<String> values = stream(configs).map(ContextConfig::<>value).collect(toList())[ FD ]
Line_10 $$ ContextConfig[] configs = synthesizedHierarchy.value()-->Line_11 $$ assertNotNull(configs)[ FD ]
Line_7 $$ Hierarchy synthesizedHierarchy = synthesizeAnnotation(hierarchy)-->Line_10 $$ ContextConfig[] configs = synthesizedHierarchy.value()[ FD ]
Line_5 $$ Hierarchy hierarchy = ConfigHierarchyTestCase.class.getAnnotation(Hierarchy.class)-->Line_8 $$ assertNotSame(hierarchy, synthesizedHierarchy)[ FD ]
Line_7 $$ Hierarchy synthesizedHierarchy = synthesizeAnnotation(hierarchy)-->Line_8 $$ assertNotSame(hierarchy, synthesizedHierarchy)[ FD ]
Line_5 $$ Hierarchy hierarchy = ConfigHierarchyTestCase.class.getAnnotation(Hierarchy.class)-->Line_7 $$ Hierarchy synthesizedHierarchy = synthesizeAnnotation(hierarchy)[ FD ]
Line_10 $$ ContextConfig[] configs = synthesizedHierarchy.value()-->Line_12 $$ assertTrue("nested annotations must be synthesized", stream(configs).allMatch( c -> c instanceof SynthesizedAnnotation))[ FD ]
