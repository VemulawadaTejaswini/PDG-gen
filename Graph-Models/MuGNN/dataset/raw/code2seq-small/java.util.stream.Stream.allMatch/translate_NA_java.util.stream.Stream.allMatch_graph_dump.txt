Line_2 $$ public <T> Optional<LocalProperty<T>> translate(Function<E, Optional<T>> translator) -->Line_4 $$ if (translated.stream().allMatch(Optional::<>isPresent)) [ CD ]
Line_4 $$ if (translated.stream().allMatch(Optional::<>isPresent)) -->Line_6 $$ return Optional.of(new GroupingProperty(columns))[ CD ]
Line_3 $$ Set<Optional<T>> translated = columns.stream().map(translator).collect(Collectors.toSet())-->Line_5 $$ Set<T> columns = translated.stream().map(Optional::<>get).collect(Collectors.toSet())[ FD ]
Line_4 $$ if (translated.stream().allMatch(Optional::<>isPresent)) -->Line_5 $$ Set<T> columns = translated.stream().map(Optional::<>get).collect(Collectors.toSet())[ CD ]
Line_3 $$ Set<Optional<T>> translated = columns.stream().map(translator).collect(Collectors.toSet())-->Line_4 $$ if (translated.stream().allMatch(Optional::<>isPresent)) [ FD ]
Line_2 $$ public <T> Optional<LocalProperty<T>> translate(Function<E, Optional<T>> translator) -->Line_3 $$ Set<Optional<T>> translated = columns.stream().map(translator).collect(Collectors.toSet())[ FD ]
Line_2 $$ public <T> Optional<LocalProperty<T>> translate(Function<E, Optional<T>> translator) -->Line_3 $$ Set<Optional<T>> translated = columns.stream().map(translator).collect(Collectors.toSet())[ CD ]
Line_2 $$ public <T> Optional<LocalProperty<T>> translate(Function<E, Optional<T>> translator) -->Line_8 $$ return Optional.empty()[ CD ]
