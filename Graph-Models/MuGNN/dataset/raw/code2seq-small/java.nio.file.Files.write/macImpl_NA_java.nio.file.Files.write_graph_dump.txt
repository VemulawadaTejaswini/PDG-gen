Line_25 $$ if (success) -->Line_26 $$ Files.delete(rules)[ CD ]
Line_2 $$ private static void macImpl(Path tmpFile) throws IOException -->Line_10 $$ Path rules = Files.createTempFile(tmpFile, "es", "sb")[ FD ]
Line_2 $$ private static void macImpl(Path tmpFile) throws IOException -->Line_7 $$ if (libc_mac == null) [ CD ]
Line_17 $$ Pointer errorBuf = errorRef.getValue()-->Line_18 $$ RuntimeException e = new UnsupportedOperationException("sandbox_init(): " + errorBuf.getString(0))[ FD ]
Line_2 $$ private static void macImpl(Path tmpFile) throws IOException -->Line_10 $$ Path rules = Files.createTempFile(tmpFile, "es", "sb")[ CD ]
Line_16 $$ if (ret != 0) -->Line_17 $$ Pointer errorBuf = errorRef.getValue()[ CD ]
Line_10 $$ Path rules = Files.createTempFile(tmpFile, "es", "sb")-->Line_26 $$ Files.delete(rules)[ FD ]
Line_12 $$ boolean success = false-->Line_23 $$ success = true[ FD ]
Line_16 $$ if (ret != 0) -->Line_19 $$ libc_mac.sandbox_free_error(errorBuf)[ CD ]
Line_14 $$ PointerByReference errorRef = new PointerByReference()-->Line_15 $$ int ret = libc_mac.sandbox_init(rules.toAbsolutePath().toString(), SANDBOX_NAMED, errorRef)[ FD ]
Line_2 $$ private static void macImpl(Path tmpFile) throws IOException -->Line_3 $$ boolean supported = Constants.MAC_OS_X[ CD ]
Line_16 $$ if (ret != 0) -->Line_18 $$ RuntimeException e = new UnsupportedOperationException("sandbox_init(): " + errorBuf.getString(0))[ CD ]
Line_2 $$ private static void macImpl(Path tmpFile) throws IOException -->Line_4 $$ if (supported == false) [ CD ]
Line_14 $$ PointerByReference errorRef = new PointerByReference()-->Line_17 $$ Pointer errorBuf = errorRef.getValue()[ FD ]
Line_3 $$ boolean supported = Constants.MAC_OS_X-->Line_4 $$ if (supported == false) [ FD ]
Line_2 $$ private static void macImpl(Path tmpFile) throws IOException -->Line_11 $$ Files.write(rules, Collections.singleton(SANDBOX_RULES))[ CD ]
Line_15 $$ int ret = libc_mac.sandbox_init(rules.toAbsolutePath().toString(), SANDBOX_NAMED, errorRef)-->Line_16 $$ if (ret != 0) [ FD ]
Line_25 $$ if (success) -->Line_28 $$ IOUtils.deleteFilesIgnoringExceptions(rules)[ CD ]
Line_17 $$ Pointer errorBuf = errorRef.getValue()-->Line_19 $$ libc_mac.sandbox_free_error(errorBuf)[ FD ]
Line_10 $$ Path rules = Files.createTempFile(tmpFile, "es", "sb")-->Line_11 $$ Files.write(rules, Collections.singleton(SANDBOX_RULES))[ FD ]
Line_2 $$ private static void macImpl(Path tmpFile) throws IOException -->Line_12 $$ boolean success = false[ CD ]
Line_10 $$ Path rules = Files.createTempFile(tmpFile, "es", "sb")-->Line_28 $$ IOUtils.deleteFilesIgnoringExceptions(rules)[ FD ]
Line_10 $$ Path rules = Files.createTempFile(tmpFile, "es", "sb")-->Line_15 $$ int ret = libc_mac.sandbox_init(rules.toAbsolutePath().toString(), SANDBOX_NAMED, errorRef)[ FD ]
