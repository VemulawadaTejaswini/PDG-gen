Line_2 $$ public void testResolveOrder() throws Exception -->Line_10 $$ Logger logger = ((Log4jESLogger) esLogger).logger()[ CD ]
Line_10 $$ Logger logger = ((Log4jESLogger) esLogger).logger()-->Line_13 $$ assertTrue(logger.isTraceEnabled())[ FD ]
Line_4 $$ Path loggingConf = tmpDir.resolve(loggingConfiguration("yaml"))-->Line_6 $$ Files.write(loggingConf, "appender.file.type: file\n".getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND)[ FD ]
Line_14 $$ appender = logger.getAppender("file")-->Line_15 $$ assertThat(appender, nullValue())[ FD ]
Line_11 $$ Appender appender = logger.getAppender("console")-->Line_15 $$ assertThat(appender, nullValue())[ FD ]
Line_2 $$ public void testResolveOrder() throws Exception -->Line_3 $$ Path tmpDir = createTempDir()[ CD ]
Line_2 $$ public void testResolveOrder() throws Exception -->Line_11 $$ Appender appender = logger.getAppender("console")[ CD ]
Line_3 $$ Path tmpDir = createTempDir()-->Line_7 $$ Environment environment = InternalSettingsPreparer.prepareEnvironment(Settings.builder().put("path.conf", tmpDir.toAbsolutePath()).put("path.home", createTempDir().toString()).put("logger.test_resolve_order", "TRACE, console").put("appender.console.type", "console").put("appender.console.layout.type", "consolePattern").put("appender.console.layout.conversionPattern", "[%d[ FD ]
Line_2 $$ public void testResolveOrder() throws Exception -->Line_8 $$ LogConfigurator.configure(environment.settings(), true)[ CD ]
Line_11 $$ Appender appender = logger.getAppender("console")-->Line_14 $$ appender = logger.getAppender("file")[ FD ]
Line_2 $$ public void testResolveOrder() throws Exception -->Line_9 $$ ESLogger esLogger = Log4jESLoggerFactory.getLogger("test_resolve_order")[ CD ]
Line_2 $$ public void testResolveOrder() throws Exception -->Line_5 $$ Files.write(loggingConf, "logger.test_resolve_order: INFO, file\n".getBytes(StandardCharsets.UTF_8))[ CD ]
Line_2 $$ public void testResolveOrder() throws Exception -->Line_14 $$ appender = logger.getAppender("file")[ CD ]
Line_2 $$ public void testResolveOrder() throws Exception -->Line_7 $$ Environment environment = InternalSettingsPreparer.prepareEnvironment(Settings.builder().put("path.conf", tmpDir.toAbsolutePath()).put("path.home", createTempDir().toString()).put("logger.test_resolve_order", "TRACE, console").put("appender.console.type", "console").put("appender.console.layout.type", "consolePattern").put("appender.console.layout.conversionPattern", "[%d[ CD ]
Line_11 $$ Appender appender = logger.getAppender("console")-->Line_12 $$ assertThat(appender, notNullValue())[ FD ]
Line_2 $$ public void testResolveOrder() throws Exception -->Line_6 $$ Files.write(loggingConf, "appender.file.type: file\n".getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND)[ CD ]
Line_10 $$ Logger logger = ((Log4jESLogger) esLogger).logger()-->Line_14 $$ appender = logger.getAppender("file")[ FD ]
Line_2 $$ public void testResolveOrder() throws Exception -->Line_13 $$ assertTrue(logger.isTraceEnabled())[ CD ]
Line_4 $$ Path loggingConf = tmpDir.resolve(loggingConfiguration("yaml"))-->Line_5 $$ Files.write(loggingConf, "logger.test_resolve_order: INFO, file\n".getBytes(StandardCharsets.UTF_8))[ FD ]
Line_2 $$ public void testResolveOrder() throws Exception -->Line_15 $$ assertThat(appender, nullValue())[ CD ]
Line_3 $$ Path tmpDir = createTempDir()-->Line_4 $$ Path loggingConf = tmpDir.resolve(loggingConfiguration("yaml"))[ FD ]
Line_10 $$ Logger logger = ((Log4jESLogger) esLogger).logger()-->Line_11 $$ Appender appender = logger.getAppender("console")[ FD ]
Line_7 $$ Environment environment = InternalSettingsPreparer.prepareEnvironment(Settings.builder().put("path.conf", tmpDir.toAbsolutePath()).put("path.home", createTempDir().toString()).put("logger.test_resolve_order", "TRACE, console").put("appender.console.type", "console").put("appender.console.layout.type", "consolePattern").put("appender.console.layout.conversionPattern", "[%d-->Line_8 $$ LogConfigurator.configure(environment.settings(), true)[ FD ]
Line_2 $$ public void testResolveOrder() throws Exception -->Line_4 $$ Path loggingConf = tmpDir.resolve(loggingConfiguration("yaml"))[ CD ]
Line_2 $$ public void testResolveOrder() throws Exception -->Line_12 $$ assertThat(appender, notNullValue())[ CD ]
