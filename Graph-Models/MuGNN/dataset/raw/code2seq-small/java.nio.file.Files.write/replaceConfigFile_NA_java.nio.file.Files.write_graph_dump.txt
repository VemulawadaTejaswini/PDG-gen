Line_2 $$ private void replaceConfigFile(Map<String, String> replacements) throws IOException -->Line_25 $$ Files.write(effectiveFile, newLines, StandardCharsets.UTF_8, StandardOpenOption.TRUNCATE_EXISTING)[ CD ]
Line_9 $$ String replacement = replacements.get(info[0])-->Line_10 $$ if (!replacement.isEmpty())[ FD ]
Line_2 $$ private void replaceConfigFile(Map<String, String> replacements) throws IOException -->Line_18 $$ for (Map.Entry<String, String> replacement : replacements.entrySet()) [ FD ]
Line_2 $$ private void replaceConfigFile(Map<String, String> replacements) throws IOException -->Line_8 $$ if (info.length == 2 && replacements.containsKey(info[0])) [ FD ]
Line_9 $$ String replacement = replacements.get(info[0])-->Line_21 $$ if (!replacement.getValue().isEmpty())[ FD ]
Line_9 $$ String replacement = replacements.get(info[0])-->Line_19 $$ if (replaced.contains(replacement.getKey()))[ FD ]
Line_2 $$ private void replaceConfigFile(Map<String, String> replacements) throws IOException -->Line_5 $$ Set<String> replaced = new HashSet()[ CD ]
Line_8 $$ if (info.length == 2 && replacements.containsKey(info[0])) -->Line_10 $$ if (!replacement.isEmpty())[ CD ]
Line_8 $$ if (info.length == 2 && replacements.containsKey(info[0])) -->Line_13 $$ replaced.add(info[0])[ CD ]
Line_2 $$ private void replaceConfigFile(Map<String, String> replacements) throws IOException -->Line_4 $$ List<String> newLines = new ArrayList(lines.size())[ CD ]
Line_10 $$ if (!replacement.isEmpty())-->Line_12 $$ newLines.add(info[0] + '=' + replacement)[ CD ]
Line_6 $$ for (String line : lines) -->Line_7 $$ String[] info = line.split("=")[ FD ]
Line_4 $$ List<String> newLines = new ArrayList(lines.size())-->Line_12 $$ newLines.add(info[0] + '=' + replacement)[ FD ]
Line_4 $$ List<String> newLines = new ArrayList(lines.size())-->Line_15 $$ newLines.add(line)[ FD ]
Line_9 $$ String replacement = replacements.get(info[0])-->Line_23 $$ newLines.add(replacement.getKey() + '=' + replacement.getValue())[ FD ]
Line_21 $$ if (!replacement.getValue().isEmpty())-->Line_23 $$ newLines.add(replacement.getKey() + '=' + replacement.getValue())[ CD ]
Line_6 $$ for (String line : lines) -->Line_15 $$ newLines.add(line)[ FD ]
Line_4 $$ List<String> newLines = new ArrayList(lines.size())-->Line_23 $$ newLines.add(replacement.getKey() + '=' + replacement.getValue())[ FD ]
Line_5 $$ Set<String> replaced = new HashSet()-->Line_19 $$ if (replaced.contains(replacement.getKey()))[ FD ]
Line_2 $$ private void replaceConfigFile(Map<String, String> replacements) throws IOException -->Line_9 $$ String replacement = replacements.get(info[0])[ FD ]
Line_3 $$ List<String> lines = Files.readAllLines(effectiveFile, StandardCharsets.UTF_8)-->Line_4 $$ List<String> newLines = new ArrayList(lines.size())[ FD ]
Line_8 $$ if (info.length == 2 && replacements.containsKey(info[0])) -->Line_15 $$ newLines.add(line)[ CD ]
Line_2 $$ private void replaceConfigFile(Map<String, String> replacements) throws IOException -->Line_3 $$ List<String> lines = Files.readAllLines(effectiveFile, StandardCharsets.UTF_8)[ CD ]
Line_5 $$ Set<String> replaced = new HashSet()-->Line_13 $$ replaced.add(info[0])[ FD ]
Line_8 $$ if (info.length == 2 && replacements.containsKey(info[0])) -->Line_9 $$ String replacement = replacements.get(info[0])[ CD ]
Line_4 $$ List<String> newLines = new ArrayList(lines.size())-->Line_25 $$ Files.write(effectiveFile, newLines, StandardCharsets.UTF_8, StandardOpenOption.TRUNCATE_EXISTING)[ FD ]
