Line_2 $$ private URL createPlugin(boolean withBinDir, boolean withConfigDir) throws IOException -->Line_13 $$ if (withConfigDir) [ CD ]
Line_9 $$ Path executable = binDir.resolve("my-binary")-->Line_10 $$ Files.createFile(executable)[ FD ]
Line_24 $$ Files.walkFileTree(structure, new SimpleFileVisitor<Path>() -->Line_26 $$ stream.putNextEntry(new ZipEntry(structure.relativize(file).toString()))[ FD ]
Line_2 $$ private URL createPlugin(boolean withBinDir, boolean withConfigDir) throws IOException -->Line_5 $$ if (withBinDir) [ CD ]
Line_13 $$ if (withConfigDir) -->Line_20 $$ Files.setPosixFilePermissions(configFile, PosixFilePermissions.fromString("rw-r--r--"))[ CD ]
Line_14 $$ Path configDir = structure.resolve("config")-->Line_16 $$ Files.setPosixFilePermissions(configDir, PosixFilePermissions.fromString("rwxr-xr-x"))[ FD ]
Line_22 $$ Path zip = createTempDir().resolve(structure.getFileName() + ".zip")-->Line_32 $$ return zip.toUri().toURL()[ FD ]
Line_22 $$ Path zip = createTempDir().resolve(structure.getFileName() + ".zip")-->Line_23 $$ try (ZipOutputStream stream = new ZipOutputStream(Files.newOutputStream(zip))) [ FD ]
Line_6 $$ Path binDir = structure.resolve("bin")-->Line_8 $$ Files.setPosixFilePermissions(binDir, PosixFilePermissions.fromString("rwxr-xr-x"))[ FD ]
Line_5 $$ if (withBinDir) -->Line_9 $$ Path executable = binDir.resolve("my-binary")[ CD ]
Line_13 $$ if (withConfigDir) -->Line_19 $$ Files.write(configFile, "my custom config content".getBytes(Charset.forName("UTF-8")))[ CD ]
Line_3 $$ final Path structure = createTempDir().resolve("fake-plugin")-->Line_14 $$ Path configDir = structure.resolve("config")[ FD ]
Line_17 $$ Path configFile = configDir.resolve("my-custom-config.yaml")-->Line_20 $$ Files.setPosixFilePermissions(configFile, PosixFilePermissions.fromString("rw-r--r--"))[ FD ]
Line_3 $$ final Path structure = createTempDir().resolve("fake-plugin")-->Line_22 $$ Path zip = createTempDir().resolve(structure.getFileName() + ".zip")[ FD ]
Line_5 $$ if (withBinDir) -->Line_11 $$ Files.setPosixFilePermissions(executable, PosixFilePermissions.fromString("rw-r--r--"))[ CD ]
Line_24 $$ Files.walkFileTree(structure, new SimpleFileVisitor<Path>() -->Line_27 $$ Files.copy(file, stream)[ CD ]
Line_24 $$ Files.walkFileTree(structure, new SimpleFileVisitor<Path>() -->Line_27 $$ Files.copy(file, stream)[ FD ]
Line_24 $$ Files.walkFileTree(structure, new SimpleFileVisitor<Path>() -->Line_28 $$ return FileVisitResult.CONTINUE[ CD ]
Line_13 $$ if (withConfigDir) -->Line_16 $$ Files.setPosixFilePermissions(configDir, PosixFilePermissions.fromString("rwxr-xr-x"))[ CD ]
Line_3 $$ final Path structure = createTempDir().resolve("fake-plugin")-->Line_26 $$ stream.putNextEntry(new ZipEntry(structure.relativize(file).toString()))[ FD ]
Line_17 $$ Path configFile = configDir.resolve("my-custom-config.yaml")-->Line_18 $$ Files.createFile(configFile)[ FD ]
Line_3 $$ final Path structure = createTempDir().resolve("fake-plugin")-->Line_6 $$ Path binDir = structure.resolve("bin")[ FD ]
Line_2 $$ private URL createPlugin(boolean withBinDir, boolean withConfigDir) throws IOException -->Line_22 $$ Path zip = createTempDir().resolve(structure.getFileName() + ".zip")[ CD ]
Line_5 $$ if (withBinDir) -->Line_10 $$ Files.createFile(executable)[ CD ]
Line_13 $$ if (withConfigDir) -->Line_14 $$ Path configDir = structure.resolve("config")[ CD ]
Line_5 $$ if (withBinDir) -->Line_6 $$ Path binDir = structure.resolve("bin")[ CD ]
Line_17 $$ Path configFile = configDir.resolve("my-custom-config.yaml")-->Line_19 $$ Files.write(configFile, "my custom config content".getBytes(Charset.forName("UTF-8")))[ FD ]
Line_2 $$ private URL createPlugin(boolean withBinDir, boolean withConfigDir) throws IOException -->Line_4 $$ PluginTestUtil.writeProperties(structure, "description", "fake desc", "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "jvm", "true", "java.version", "1.7", "name", pluginName, "classname", pluginName)[ CD ]
Line_14 $$ Path configDir = structure.resolve("config")-->Line_17 $$ Path configFile = configDir.resolve("my-custom-config.yaml")[ FD ]
Line_5 $$ if (withBinDir) -->Line_7 $$ Files.createDirectory(binDir)[ CD ]
Line_5 $$ if (withBinDir) -->Line_8 $$ Files.setPosixFilePermissions(binDir, PosixFilePermissions.fromString("rwxr-xr-x"))[ CD ]
Line_24 $$ Files.walkFileTree(structure, new SimpleFileVisitor<Path>() -->Line_26 $$ stream.putNextEntry(new ZipEntry(structure.relativize(file).toString()))[ CD ]
Line_3 $$ final Path structure = createTempDir().resolve("fake-plugin")-->Line_24 $$ Files.walkFileTree(structure, new SimpleFileVisitor<Path>() [ FD ]
Line_9 $$ Path executable = binDir.resolve("my-binary")-->Line_11 $$ Files.setPosixFilePermissions(executable, PosixFilePermissions.fromString("rw-r--r--"))[ FD ]
Line_23 $$ try (ZipOutputStream stream = new ZipOutputStream(Files.newOutputStream(zip))) -->Line_27 $$ Files.copy(file, stream)[ FD ]
Line_13 $$ if (withConfigDir) -->Line_18 $$ Files.createFile(configFile)[ CD ]
Line_2 $$ private URL createPlugin(boolean withBinDir, boolean withConfigDir) throws IOException -->Line_32 $$ return zip.toUri().toURL()[ CD ]
Line_13 $$ if (withConfigDir) -->Line_17 $$ Path configFile = configDir.resolve("my-custom-config.yaml")[ CD ]
Line_23 $$ try (ZipOutputStream stream = new ZipOutputStream(Files.newOutputStream(zip))) -->Line_26 $$ stream.putNextEntry(new ZipEntry(structure.relativize(file).toString()))[ FD ]
Line_14 $$ Path configDir = structure.resolve("config")-->Line_15 $$ Files.createDirectory(configDir)[ FD ]
Line_13 $$ if (withConfigDir) -->Line_15 $$ Files.createDirectory(configDir)[ CD ]
Line_3 $$ final Path structure = createTempDir().resolve("fake-plugin")-->Line_4 $$ PluginTestUtil.writeProperties(structure, "description", "fake desc", "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "jvm", "true", "java.version", "1.7", "name", pluginName, "classname", pluginName)[ FD ]
Line_6 $$ Path binDir = structure.resolve("bin")-->Line_7 $$ Files.createDirectory(binDir)[ FD ]
Line_2 $$ private URL createPlugin(boolean withBinDir, boolean withConfigDir) throws IOException -->Line_3 $$ final Path structure = createTempDir().resolve("fake-plugin")[ CD ]
Line_6 $$ Path binDir = structure.resolve("bin")-->Line_9 $$ Path executable = binDir.resolve("my-binary")[ FD ]
