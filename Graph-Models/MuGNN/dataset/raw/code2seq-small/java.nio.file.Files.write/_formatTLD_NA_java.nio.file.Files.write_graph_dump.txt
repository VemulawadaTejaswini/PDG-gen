Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_5 $$ Document document = saxReader.read(new UnsyncStringReader(content))[ CD ]
Line_17 $$ String newContent = Dom4jUtil.toString(document)-->Line_19 $$ int y = newContent.indexOf("</taglib>")[ FD ]
Line_20 $$ newContent = newContent.substring(x, y)-->Line_24 $$ if (!content.equals(newContent)) [ FD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_22 $$ y = content.indexOf("</taglib>")[ CD ]
Line_20 $$ newContent = newContent.substring(x, y)-->Line_25 $$ Files.write(file, newContent.getBytes(StandardCharsets.UTF_8))[ FD ]
Line_18 $$ int x = newContent.indexOf("<tlib-version")-->Line_21 $$ x = content.indexOf("<tlib-version")[ FD ]
Line_9 $$ for (Element tagElement : tagElements) -->Line_11 $$ Element dynamicAttributesElement = tagElement.element("dynamic-attributes")[ FD ]
Line_17 $$ String newContent = Dom4jUtil.toString(document)-->Line_25 $$ Files.write(file, newContent.getBytes(StandardCharsets.UTF_8))[ FD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_4 $$ SAXReader saxReader = _getSAXReader()[ CD ]
Line_12 $$ if (dynamicAttributesElement != null) -->Line_13 $$ dynamicAttributesElement.detach()[ CD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_20 $$ newContent = newContent.substring(x, y)[ CD ]
Line_22 $$ y = content.indexOf("</taglib>")-->Line_23 $$ newContent = content.substring(0, x) + newContent + content.substring(y)[ FD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_6 $$ Element root = document.getRootElement()[ CD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_3 $$ String content = new String(Files.readAllBytes(file), StandardCharsets.UTF_8)[ CD ]
Line_21 $$ x = content.indexOf("<tlib-version")-->Line_23 $$ newContent = content.substring(0, x) + newContent + content.substring(y)[ FD ]
Line_6 $$ Element root = document.getRootElement()-->Line_8 $$ List<Element> tagElements = root.elements("tag")[ FD ]
Line_18 $$ int x = newContent.indexOf("<tlib-version")-->Line_23 $$ newContent = content.substring(0, x) + newContent + content.substring(y)[ FD ]
Line_12 $$ if (dynamicAttributesElement != null) -->Line_14 $$ tagElement.add(dynamicAttributesElement)[ CD ]
Line_3 $$ String content = new String(Files.readAllBytes(file), StandardCharsets.UTF_8)-->Line_24 $$ if (!content.equals(newContent)) [ FD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_26 $$ _modifiedFileNames.add(file.toString())[ FD ]
Line_5 $$ Document document = saxReader.read(new UnsyncStringReader(content))-->Line_6 $$ Element root = document.getRootElement()[ FD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_17 $$ String newContent = Dom4jUtil.toString(document)[ CD ]
Line_24 $$ if (!content.equals(newContent)) -->Line_26 $$ _modifiedFileNames.add(file.toString())[ CD ]
Line_11 $$ Element dynamicAttributesElement = tagElement.element("dynamic-attributes")-->Line_12 $$ if (dynamicAttributesElement != null) [ FD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_21 $$ x = content.indexOf("<tlib-version")[ CD ]
Line_17 $$ String newContent = Dom4jUtil.toString(document)-->Line_23 $$ newContent = content.substring(0, x) + newContent + content.substring(y)[ FD ]
Line_5 $$ Document document = saxReader.read(new UnsyncStringReader(content))-->Line_17 $$ String newContent = Dom4jUtil.toString(document)[ FD ]
Line_17 $$ String newContent = Dom4jUtil.toString(document)-->Line_20 $$ newContent = newContent.substring(x, y)[ FD ]
Line_24 $$ if (!content.equals(newContent)) -->Line_25 $$ Files.write(file, newContent.getBytes(StandardCharsets.UTF_8))[ CD ]
Line_9 $$ for (Element tagElement : tagElements) -->Line_14 $$ tagElement.add(dynamicAttributesElement)[ FD ]
Line_17 $$ String newContent = Dom4jUtil.toString(document)-->Line_24 $$ if (!content.equals(newContent)) [ FD ]
Line_3 $$ String content = new String(Files.readAllBytes(file), StandardCharsets.UTF_8)-->Line_22 $$ y = content.indexOf("</taglib>")[ FD ]
Line_19 $$ int y = newContent.indexOf("</taglib>")-->Line_20 $$ newContent = newContent.substring(x, y)[ FD ]
Line_6 $$ Element root = document.getRootElement()-->Line_7 $$ _sortElements(root, "tag", "name")[ FD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_19 $$ int y = newContent.indexOf("</taglib>")[ CD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_27 $$ System.out.println(file)[ FD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_18 $$ int x = newContent.indexOf("<tlib-version")[ CD ]
Line_3 $$ String content = new String(Files.readAllBytes(file), StandardCharsets.UTF_8)-->Line_21 $$ x = content.indexOf("<tlib-version")[ FD ]
Line_23 $$ newContent = content.substring(0, x) + newContent + content.substring(y)-->Line_25 $$ Files.write(file, newContent.getBytes(StandardCharsets.UTF_8))[ FD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_8 $$ List<Element> tagElements = root.elements("tag")[ CD ]
Line_11 $$ Element dynamicAttributesElement = tagElement.element("dynamic-attributes")-->Line_13 $$ dynamicAttributesElement.detach()[ FD ]
Line_24 $$ if (!content.equals(newContent)) -->Line_27 $$ System.out.println(file)[ CD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_24 $$ if (!content.equals(newContent)) [ CD ]
Line_11 $$ Element dynamicAttributesElement = tagElement.element("dynamic-attributes")-->Line_14 $$ tagElement.add(dynamicAttributesElement)[ FD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_3 $$ String content = new String(Files.readAllBytes(file), StandardCharsets.UTF_8)[ FD ]
Line_3 $$ String content = new String(Files.readAllBytes(file), StandardCharsets.UTF_8)-->Line_23 $$ newContent = content.substring(0, x) + newContent + content.substring(y)[ FD ]
Line_4 $$ SAXReader saxReader = _getSAXReader()-->Line_5 $$ Document document = saxReader.read(new UnsyncStringReader(content))[ FD ]
Line_17 $$ String newContent = Dom4jUtil.toString(document)-->Line_18 $$ int x = newContent.indexOf("<tlib-version")[ FD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_23 $$ newContent = content.substring(0, x) + newContent + content.substring(y)[ CD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_25 $$ Files.write(file, newContent.getBytes(StandardCharsets.UTF_8))[ FD ]
Line_18 $$ int x = newContent.indexOf("<tlib-version")-->Line_20 $$ newContent = newContent.substring(x, y)[ FD ]
Line_2 $$ private void _formatTLD(Path file) throws Exception -->Line_7 $$ _sortElements(root, "tag", "name")[ CD ]
Line_19 $$ int y = newContent.indexOf("</taglib>")-->Line_23 $$ newContent = content.substring(0, x) + newContent + content.substring(y)[ FD ]
Line_23 $$ newContent = content.substring(0, x) + newContent + content.substring(y)-->Line_24 $$ if (!content.equals(newContent)) [ FD ]
Line_20 $$ newContent = newContent.substring(x, y)-->Line_23 $$ newContent = content.substring(0, x) + newContent + content.substring(y)[ FD ]
Line_19 $$ int y = newContent.indexOf("</taglib>")-->Line_22 $$ y = content.indexOf("</taglib>")[ FD ]
Line_9 $$ for (Element tagElement : tagElements) -->Line_10 $$ _sortElements(tagElement, "attribute", "name")[ FD ]
