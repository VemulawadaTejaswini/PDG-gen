Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_42 $$ assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt.new", "version2")[ CD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_35 $$ assertFileContent(pluginConfigDir, "test.txt", "version1")[ FD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_37 $$ assertFileContent(pluginConfigDir, "test.txt.new", "version3")[ FD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_27 $$ assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt", "version1")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_31 $$ Files.write(pluginDir.resolve("config").resolve("dir").resolve("testdir2.txt"), "version1".getBytes(StandardCharsets.UTF_8))[ CD ]
Line_3 $$ String pluginName = "fake-plugin"-->Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)[ FD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_13 $$ Files.write(pluginDir.resolve("config").resolve("test.txt"), "version2".getBytes(StandardCharsets.UTF_8))[ FD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_10 $$ assertFileContent(pluginConfigDir, "test.txt", "version1")[ FD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_26 $$ assertFileContent(pluginConfigDir, "dir/testdir.txt", "version1")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_19 $$ assertFileContent(pluginConfigDir, "test.txt", "version1")[ CD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_12 $$ assertFileContent(pluginConfigDir, "test.txt", "version1")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_36 $$ assertFileContent(pluginConfigDir, "test2.txt", "version1")[ CD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_17 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "2.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")[ FD ]
Line_17 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "2.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")-->Line_18 $$ assertStatusOk(String.format(Locale.ROOT, "install %s --verbose", pluginUrl))[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_30 $$ Files.write(pluginDir.resolve("config").resolve("dir").resolve("testdir.txt"), "version2".getBytes(StandardCharsets.UTF_8))[ CD ]
Line_17 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "2.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")-->Line_34 $$ assertStatusOk(String.format(Locale.ROOT, "install %s --verbose", pluginUrl))[ FD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_14 $$ Files.createDirectories(pluginDir.resolve("config").resolve("dir").resolve("subdir"))[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_39 $$ assertFileContent(pluginConfigDir, "dir/testdir.txt.new", "version2")[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_29 $$ Files.write(pluginDir.resolve("config").resolve("test2.txt"), "version1".getBytes(StandardCharsets.UTF_8))[ CD ]
Line_17 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "2.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")-->Line_33 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "3.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_9 $$ assertStatusOk(String.format(Locale.ROOT, "install %s --verbose", pluginUrl))[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)[ CD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_41 $$ assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt", "version1")[ FD ]
Line_7 $$ String pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")-->Line_9 $$ assertStatusOk(String.format(Locale.ROOT, "install %s --verbose", pluginUrl))[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_37 $$ assertFileContent(pluginConfigDir, "test.txt.new", "version3")[ CD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_15 $$ Files.write(pluginDir.resolve("config").resolve("dir").resolve("testdir.txt"), "version1".getBytes(StandardCharsets.UTF_8))[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_15 $$ Files.write(pluginDir.resolve("config").resolve("dir").resolve("testdir.txt"), "version1".getBytes(StandardCharsets.UTF_8))[ CD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_28 $$ Files.write(pluginDir.resolve("config").resolve("test.txt"), "version3".getBytes(StandardCharsets.UTF_8))[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_24 $$ assertFileContent(pluginConfigDir, "test.txt", "version1")[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_3 $$ String pluginName = "fake-plugin"[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_18 $$ assertStatusOk(String.format(Locale.ROOT, "install %s --verbose", pluginUrl))[ CD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_19 $$ assertFileContent(pluginConfigDir, "test.txt", "version1")[ FD ]
Line_7 $$ String pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")-->Line_34 $$ assertStatusOk(String.format(Locale.ROOT, "install %s --verbose", pluginUrl))[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_38 $$ assertFileContent(pluginConfigDir, "dir/testdir.txt", "version1")[ CD ]
Line_7 $$ String pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")-->Line_17 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "2.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_11 $$ assertStatusOk("remove " + pluginName)[ CD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_5 $$ Files.createDirectories(pluginDir.resolve("config"))[ FD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_42 $$ assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt.new", "version2")[ FD ]
Line_3 $$ String pluginName = "fake-plugin"-->Line_7 $$ String pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_35 $$ assertFileContent(pluginConfigDir, "test.txt", "version1")[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_40 $$ assertFileContent(pluginConfigDir, "dir/testdir2.txt", "version1")[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_26 $$ assertFileContent(pluginConfigDir, "dir/testdir.txt", "version1")[ CD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_30 $$ Files.write(pluginDir.resolve("config").resolve("dir").resolve("testdir.txt"), "version2".getBytes(StandardCharsets.UTF_8))[ FD ]
Line_3 $$ String pluginName = "fake-plugin"-->Line_17 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "2.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")[ FD ]
Line_7 $$ String pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")-->Line_33 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "3.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")[ FD ]
Line_3 $$ String pluginName = "fake-plugin"-->Line_33 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "3.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_7 $$ String pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")[ CD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_32 $$ Files.write(pluginDir.resolve("config").resolve("dir").resolve("subdir").resolve("testsubdir.txt"), "version2".getBytes(StandardCharsets.UTF_8))[ FD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_39 $$ assertFileContent(pluginConfigDir, "dir/testdir.txt.new", "version2")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_23 $$ assertStatusOk("remove " + pluginName)[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_22 $$ assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt", "version1")[ CD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_33 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "3.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_32 $$ Files.write(pluginDir.resolve("config").resolve("dir").resolve("subdir").resolve("testsubdir.txt"), "version2".getBytes(StandardCharsets.UTF_8))[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_33 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "3.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")[ CD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_36 $$ assertFileContent(pluginConfigDir, "test2.txt", "version1")[ FD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_25 $$ assertFileContent(pluginConfigDir, "test.txt.new", "version2")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)[ CD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_24 $$ assertFileContent(pluginConfigDir, "test.txt", "version1")[ FD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_31 $$ Files.write(pluginDir.resolve("config").resolve("dir").resolve("testdir2.txt"), "version1".getBytes(StandardCharsets.UTF_8))[ FD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_38 $$ assertFileContent(pluginConfigDir, "dir/testdir.txt", "version1")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_20 $$ assertFileContent(pluginConfigDir, "test.txt.new", "version2")[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_14 $$ Files.createDirectories(pluginDir.resolve("config").resolve("dir").resolve("subdir"))[ CD ]
Line_33 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "3.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")-->Line_34 $$ assertStatusOk(String.format(Locale.ROOT, "install %s --verbose", pluginUrl))[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_17 $$ pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "2.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_34 $$ assertStatusOk(String.format(Locale.ROOT, "install %s --verbose", pluginUrl))[ CD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_40 $$ assertFileContent(pluginConfigDir, "dir/testdir2.txt", "version1")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_6 $$ Files.write(pluginDir.resolve("config").resolve("test.txt"), "version1".getBytes(StandardCharsets.UTF_8))[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_13 $$ Files.write(pluginDir.resolve("config").resolve("test.txt"), "version2".getBytes(StandardCharsets.UTF_8))[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_5 $$ Files.createDirectories(pluginDir.resolve("config"))[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_21 $$ assertFileContent(pluginConfigDir, "dir/testdir.txt", "version1")[ CD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_20 $$ assertFileContent(pluginConfigDir, "test.txt.new", "version2")[ FD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_6 $$ Files.write(pluginDir.resolve("config").resolve("test.txt"), "version1".getBytes(StandardCharsets.UTF_8))[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_28 $$ Files.write(pluginDir.resolve("config").resolve("test.txt"), "version3".getBytes(StandardCharsets.UTF_8))[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_41 $$ assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt", "version1")[ CD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_29 $$ Files.write(pluginDir.resolve("config").resolve("test2.txt"), "version1".getBytes(StandardCharsets.UTF_8))[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_16 $$ Files.write(pluginDir.resolve("config").resolve("dir").resolve("subdir").resolve("testsubdir.txt"), "version1".getBytes(StandardCharsets.UTF_8))[ CD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_22 $$ assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt", "version1")[ FD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_7 $$ String pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_25 $$ assertFileContent(pluginConfigDir, "test.txt.new", "version2")[ CD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_12 $$ assertFileContent(pluginConfigDir, "test.txt", "version1")[ CD ]
Line_7 $$ String pluginUrl = createPlugin(pluginDir, "description", "fake desc", "name", pluginName, "version", "1.0", "elasticsearch.version", Version.CURRENT.toString(), "java.version", System.getProperty("java.specification.version"), "jvm", "true", "classname", "FakePlugin")-->Line_18 $$ assertStatusOk(String.format(Locale.ROOT, "install %s --verbose", pluginUrl))[ FD ]
Line_4 $$ Path pluginDir = createTempDir().resolve(pluginName)-->Line_16 $$ Files.write(pluginDir.resolve("config").resolve("dir").resolve("subdir").resolve("testsubdir.txt"), "version1".getBytes(StandardCharsets.UTF_8))[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_27 $$ assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt", "version1")[ CD ]
Line_3 $$ String pluginName = "fake-plugin"-->Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)[ FD ]
Line_2 $$ public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception -->Line_10 $$ assertFileContent(pluginConfigDir, "test.txt", "version1")[ CD ]
Line_8 $$ Path pluginConfigDir = environment.configFile().resolve(pluginName)-->Line_21 $$ assertFileContent(pluginConfigDir, "dir/testdir.txt", "version1")[ FD ]
