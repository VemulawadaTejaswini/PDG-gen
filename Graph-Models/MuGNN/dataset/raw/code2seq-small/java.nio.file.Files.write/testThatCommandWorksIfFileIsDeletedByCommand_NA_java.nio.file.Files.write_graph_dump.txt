Line_7 $$ Settings settings = Settings.builder().put("path.home", createTempDir().toString()).build()-->Line_8 $$ new DeleteFileCommand(captureOutputTerminal, path).execute(settings, new Environment(settings))[ FD ]
Line_3 $$ Configuration configuration = randomBoolean() ? jimFsConfiguration : jimFsConfigurationWithoutPermissions-->Line_4 $$ try (FileSystem fs = Jimfs.newFileSystem(configuration)) [ FD ]
Line_4 $$ try (FileSystem fs = Jimfs.newFileSystem(configuration)) -->Line_5 $$ Path path = fs.getPath(randomAsciiOfLength(10))[ FD ]
Line_2 $$ public void testThatCommandWorksIfFileIsDeletedByCommand() throws Exception -->Line_3 $$ Configuration configuration = randomBoolean() ? jimFsConfiguration : jimFsConfigurationWithoutPermissions[ CD ]
Line_5 $$ Path path = fs.getPath(randomAsciiOfLength(10))-->Line_6 $$ Files.write(path, "anything".getBytes(StandardCharsets.UTF_8))[ FD ]
Line_5 $$ Path path = fs.getPath(randomAsciiOfLength(10))-->Line_9 $$ assertThat(Files.exists(path), is(false))[ FD ]
Line_2 $$ public void testThatCommandWorksIfFileIsDeletedByCommand() throws Exception -->Line_11 $$ assertThat(captureOutputTerminal.getTerminalOutput(), hasSize(0))[ CD ]
