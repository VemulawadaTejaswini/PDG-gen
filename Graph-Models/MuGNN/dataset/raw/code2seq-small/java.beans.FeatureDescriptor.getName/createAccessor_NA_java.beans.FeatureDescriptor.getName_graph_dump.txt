Line_2 $$ public static BeanValueAccessor createAccessor(Object bean, final String propertyName) -->Line_26 $$ if (descriptor.getName().equals(propertyName)) [ FD ]
Line_2 $$ public static BeanValueAccessor createAccessor(Object bean, final String propertyName) -->Line_24 $$ BeanInfo beanInfo = Introspector.getBeanInfo(bean.getClass())[ FD ]
Line_6 $$ return new BeanValueAccessor(bean, propertyName) -->Line_13 $$ field.set(myBean, value)[ CD ]
Line_2 $$ public static BeanValueAccessor createAccessor(Object bean, final String propertyName) -->Line_46 $$ throw new IllegalArgumentException("Property " + propertyName + " not found in " + bean.getClass())[ FD ]
Line_27 $$ return new BeanValueAccessor(bean, propertyName) -->Line_36 $$ descriptor.getWriteMethod().invoke(myBean, value)[ FD ]
Line_27 $$ return new BeanValueAccessor(bean, propertyName) -->Line_41 $$ return descriptor.getPropertyType()[ CD ]
Line_4 $$ for (final Field field : fields) -->Line_9 $$ return field.get(myBean)[ FD ]
Line_27 $$ return new BeanValueAccessor(bean, propertyName) -->Line_36 $$ descriptor.getWriteMethod().invoke(myBean, value)[ CD ]
Line_4 $$ for (final Field field : fields) -->Line_5 $$ if (field.getName().equals(propertyName)) [ FD ]
Line_2 $$ public static BeanValueAccessor createAccessor(Object bean, final String propertyName) -->Line_3 $$ Field[] fields = bean.getClass().getFields()[ CD ]
Line_4 $$ for (final Field field : fields) -->Line_13 $$ field.set(myBean, value)[ FD ]
Line_6 $$ return new BeanValueAccessor(bean, propertyName) -->Line_13 $$ field.set(myBean, value)[ FD ]
Line_2 $$ public static BeanValueAccessor createAccessor(Object bean, final String propertyName) -->Line_5 $$ if (field.getName().equals(propertyName)) [ FD ]
Line_6 $$ return new BeanValueAccessor(bean, propertyName) -->Line_9 $$ return field.get(myBean)[ CD ]
Line_26 $$ if (descriptor.getName().equals(propertyName)) -->Line_27 $$ return new BeanValueAccessor(bean, propertyName) [ CD ]
Line_6 $$ return new BeanValueAccessor(bean, propertyName) -->Line_18 $$ return field.getType()[ CD ]
Line_6 $$ return new BeanValueAccessor(bean, propertyName) -->Line_36 $$ descriptor.getWriteMethod().invoke(myBean, value)[ FD ]
Line_4 $$ for (final Field field : fields) -->Line_18 $$ return field.getType()[ FD ]
Line_27 $$ return new BeanValueAccessor(bean, propertyName) -->Line_31 $$ return descriptor.getReadMethod().invoke(myBean)[ CD ]
Line_2 $$ public static BeanValueAccessor createAccessor(Object bean, final String propertyName) -->Line_3 $$ Field[] fields = bean.getClass().getFields()[ FD ]
Line_5 $$ if (field.getName().equals(propertyName)) -->Line_6 $$ return new BeanValueAccessor(bean, propertyName) [ CD ]
