Line_17 $$ if (rowNumber == 0 && logger.isDebugEnabled()) -->Line_18 $$ logger.debug("Mapping column '" + column + "' to property '" + pd.getName() + "' of type [" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "]")[ CD ]
Line_16 $$ Object value = getColumnValue(rs, index, pd)-->Line_21 $$ bw.setPropertyValue(pd.getName(), value)[ FD ]
Line_9 $$ Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)-->Line_31 $$ if (populatedProperties != null) [ FD ]
Line_8 $$ int columnCount = rsmd.getColumnCount()-->Line_10 $$ for (int index = 1; index <= columnCount; index++) [ FD ]
Line_13 $$ PropertyDescriptor pd = this.mappedFields.get(field)-->Line_18 $$ logger.debug("Mapping column '" + column + "' to property '" + pd.getName() + "' of type [" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "]")[ FD ]
Line_12 $$ String field = lowerCaseName(column.replaceAll(" ", ""))-->Line_13 $$ PropertyDescriptor pd = this.mappedFields.get(field)[ FD ]
Line_13 $$ PropertyDescriptor pd = this.mappedFields.get(field)-->Line_14 $$ if (pd != null) [ FD ]
Line_2 $$ public T mapRow(ResultSet rs, int rowNumber) throws SQLException -->Line_5 $$ BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)[ CD ]
Line_5 $$ BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)-->Line_21 $$ bw.setPropertyValue(pd.getName(), value)[ FD ]
Line_24 $$ if (logger.isDebugEnabled()) -->Line_25 $$ logger.debug("Intercepted TypeMismatchException for row " + rowNumber + " and column '" + column + "' with null value when setting property '" + pd.getName() + "' of type [" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "] on object: " + mappedObject, ex)[ CD ]
Line_10 $$ for (int index = 1; index <= columnCount; index++) -->Line_11 $$ String column = JdbcUtils.lookupColumnName(rsmd, index)[ FD ]
Line_2 $$ public T mapRow(ResultSet rs, int rowNumber) throws SQLException -->Line_43 $$ if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) [ CD ]
Line_5 $$ BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)-->Line_6 $$ initBeanWrapper(bw)[ FD ]
Line_10 $$ for (int index = 1; index <= columnCount; index++) -->Line_12 $$ String field = lowerCaseName(column.replaceAll(" ", ""))[ CD ]
Line_2 $$ public T mapRow(ResultSet rs, int rowNumber) throws SQLException -->Line_6 $$ initBeanWrapper(bw)[ CD ]
Line_38 $$ if (rowNumber == 0 && logger.isDebugEnabled()) -->Line_39 $$ logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")[ CD ]
Line_10 $$ for (int index = 1; index <= columnCount; index++) -->Line_11 $$ String column = JdbcUtils.lookupColumnName(rsmd, index)[ CD ]
Line_2 $$ public T mapRow(ResultSet rs, int rowNumber) throws SQLException -->Line_8 $$ int columnCount = rsmd.getColumnCount()[ CD ]
Line_13 $$ PropertyDescriptor pd = this.mappedFields.get(field)-->Line_16 $$ Object value = getColumnValue(rs, index, pd)[ FD ]
Line_13 $$ PropertyDescriptor pd = this.mappedFields.get(field)-->Line_32 $$ populatedProperties.add(pd.getName())[ FD ]
Line_2 $$ public T mapRow(ResultSet rs, int rowNumber) throws SQLException -->Line_4 $$ T mappedObject = BeanUtils.instantiate(this.mappedClass)[ CD ]
Line_11 $$ String column = JdbcUtils.lookupColumnName(rsmd, index)-->Line_12 $$ String field = lowerCaseName(column.replaceAll(" ", ""))[ FD ]
Line_10 $$ for (int index = 1; index <= columnCount; index++) -->Line_13 $$ PropertyDescriptor pd = this.mappedFields.get(field)[ CD ]
Line_10 $$ for (int index = 1; index <= columnCount; index++) -->Line_14 $$ if (pd != null) [ CD ]
Line_2 $$ public T mapRow(ResultSet rs, int rowNumber) throws SQLException -->Line_46 $$ return mappedObject[ CD ]
Line_7 $$ ResultSetMetaData rsmd = rs.getMetaData()-->Line_8 $$ int columnCount = rsmd.getColumnCount()[ FD ]
Line_31 $$ if (populatedProperties != null) -->Line_32 $$ populatedProperties.add(pd.getName())[ CD ]
Line_4 $$ T mappedObject = BeanUtils.instantiate(this.mappedClass)-->Line_5 $$ BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)[ FD ]
Line_2 $$ public T mapRow(ResultSet rs, int rowNumber) throws SQLException -->Line_3 $$ Assert.state(this.mappedClass != null, "Mapped class was not specified")[ CD ]
Line_2 $$ public T mapRow(ResultSet rs, int rowNumber) throws SQLException -->Line_10 $$ for (int index = 1; index <= columnCount; index++) [ CD ]
Line_2 $$ public T mapRow(ResultSet rs, int rowNumber) throws SQLException -->Line_7 $$ ResultSetMetaData rsmd = rs.getMetaData()[ CD ]
Line_2 $$ public T mapRow(ResultSet rs, int rowNumber) throws SQLException -->Line_7 $$ ResultSetMetaData rsmd = rs.getMetaData()[ FD ]
Line_13 $$ PropertyDescriptor pd = this.mappedFields.get(field)-->Line_21 $$ bw.setPropertyValue(pd.getName(), value)[ FD ]
Line_2 $$ public T mapRow(ResultSet rs, int rowNumber) throws SQLException -->Line_16 $$ Object value = getColumnValue(rs, index, pd)[ FD ]
Line_23 $$ if (value == null && this.primitivesDefaultedForNullValue) -->Line_24 $$ if (logger.isDebugEnabled()) [ CD ]
Line_13 $$ PropertyDescriptor pd = this.mappedFields.get(field)-->Line_25 $$ logger.debug("Intercepted TypeMismatchException for row " + rowNumber + " and column '" + column + "' with null value when setting property '" + pd.getName() + "' of type [" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "] on object: " + mappedObject, ex)[ FD ]
Line_13 $$ PropertyDescriptor pd = this.mappedFields.get(field)-->Line_35 $$ throw new DataRetrievalFailureException("Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)[ FD ]
Line_14 $$ if (pd != null) -->Line_38 $$ if (rowNumber == 0 && logger.isDebugEnabled()) [ CD ]
Line_9 $$ Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)-->Line_43 $$ if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) [ FD ]
Line_2 $$ public T mapRow(ResultSet rs, int rowNumber) throws SQLException -->Line_9 $$ Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)[ CD ]
Line_7 $$ ResultSetMetaData rsmd = rs.getMetaData()-->Line_11 $$ String column = JdbcUtils.lookupColumnName(rsmd, index)[ FD ]
Line_10 $$ for (int index = 1; index <= columnCount; index++) -->Line_16 $$ Object value = getColumnValue(rs, index, pd)[ FD ]
Line_9 $$ Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)-->Line_32 $$ populatedProperties.add(pd.getName())[ FD ]
