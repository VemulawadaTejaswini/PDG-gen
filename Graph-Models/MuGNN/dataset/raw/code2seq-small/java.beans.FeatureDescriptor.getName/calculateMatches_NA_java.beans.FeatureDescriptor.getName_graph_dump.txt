Line_3 $$ List<String> candidates = new ArrayList<String>()-->Line_8 $$ candidates.add(possibleAlternative)[ FD ]
Line_7 $$ if (calculateStringDistance(propertyName, possibleAlternative) <= maxDistance) -->Line_8 $$ candidates.add(possibleAlternative)[ CD ]
Line_3 $$ List<String> candidates = new ArrayList<String>()-->Line_13 $$ return StringUtils.toStringArray(candidates)[ FD ]
Line_2 $$ private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance) -->Line_7 $$ if (calculateStringDistance(propertyName, possibleAlternative) <= maxDistance) [ FD ]
Line_2 $$ private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance) -->Line_3 $$ List<String> candidates = new ArrayList<String>()[ CD ]
Line_4 $$ for (PropertyDescriptor pd : propertyDescriptors) -->Line_6 $$ String possibleAlternative = pd.getName()[ FD ]
Line_5 $$ if (pd.getWriteMethod() != null) -->Line_7 $$ if (calculateStringDistance(propertyName, possibleAlternative) <= maxDistance) [ CD ]
Line_3 $$ List<String> candidates = new ArrayList<String>()-->Line_12 $$ Collections.sort(candidates)[ FD ]
Line_4 $$ for (PropertyDescriptor pd : propertyDescriptors) -->Line_5 $$ if (pd.getWriteMethod() != null) [ FD ]
Line_6 $$ String possibleAlternative = pd.getName()-->Line_7 $$ if (calculateStringDistance(propertyName, possibleAlternative) <= maxDistance) [ FD ]
Line_2 $$ private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance) -->Line_13 $$ return StringUtils.toStringArray(candidates)[ CD ]
Line_6 $$ String possibleAlternative = pd.getName()-->Line_8 $$ candidates.add(possibleAlternative)[ FD ]
Line_5 $$ if (pd.getWriteMethod() != null) -->Line_6 $$ String possibleAlternative = pd.getName()[ CD ]
Line_2 $$ private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance) -->Line_12 $$ Collections.sort(candidates)[ CD ]
