Line_4 $$ MBeanAttributeInfo inf = this.allowedAttributes.get(attributeName)-->Line_11 $$ if (inf.isReadable()) [ FD ]
Line_11 $$ if (inf.isReadable()) -->Line_12 $$ return this.serverToUse.getAttribute(this.objectName, attributeName)[ CD ]
Line_16 $$ if (invocation.getMethod().equals(pd.getWriteMethod())) -->Line_17 $$ if (inf.isWritable()) [ CD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_24 $$ throw new IllegalStateException("Method [" + invocation.getMethod() + "] is neither a bean property getter nor a setter")[ FD ]
Line_10 $$ if (invocation.getMethod().equals(pd.getReadMethod())) -->Line_16 $$ if (invocation.getMethod().equals(pd.getWriteMethod())) [ CD ]
Line_17 $$ if (inf.isWritable()) -->Line_19 $$ return null[ CD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_4 $$ MBeanAttributeInfo inf = this.allowedAttributes.get(attributeName)[ CD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_16 $$ if (invocation.getMethod().equals(pd.getWriteMethod())) [ FD ]
Line_17 $$ if (inf.isWritable()) -->Line_18 $$ this.serverToUse.setAttribute(this.objectName, new Attribute(attributeName, invocation.getArguments()[0]))[ CD ]
Line_4 $$ MBeanAttributeInfo inf = this.allowedAttributes.get(attributeName)-->Line_17 $$ if (inf.isWritable()) [ FD ]
Line_3 $$ String attributeName = JmxUtils.getAttributeName(pd, this.useStrictCasing)-->Line_12 $$ return this.serverToUse.getAttribute(this.objectName, attributeName)[ FD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_3 $$ String attributeName = JmxUtils.getAttributeName(pd, this.useStrictCasing)[ CD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_10 $$ if (invocation.getMethod().equals(pd.getReadMethod())) [ CD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_8 $$ throw new InvalidInvocationException("Attribute '" + pd.getName() + "' is not exposed on the management interface")[ FD ]
Line_10 $$ if (invocation.getMethod().equals(pd.getReadMethod())) -->Line_11 $$ if (inf.isReadable()) [ CD ]
Line_3 $$ String attributeName = JmxUtils.getAttributeName(pd, this.useStrictCasing)-->Line_4 $$ MBeanAttributeInfo inf = this.allowedAttributes.get(attributeName)[ FD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_3 $$ String attributeName = JmxUtils.getAttributeName(pd, this.useStrictCasing)[ FD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_18 $$ this.serverToUse.setAttribute(this.objectName, new Attribute(attributeName, invocation.getArguments()[0]))[ FD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_10 $$ if (invocation.getMethod().equals(pd.getReadMethod())) [ FD ]
