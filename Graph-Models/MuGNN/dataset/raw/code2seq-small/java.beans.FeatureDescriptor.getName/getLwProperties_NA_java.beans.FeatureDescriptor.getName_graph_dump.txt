Line_9 $$ final Class aClass-->Line_18 $$ beanInfo = Introspector.getBeanInfo(aClass)[ FD ]
Line_16 $$ final BeanInfo beanInfo-->Line_23 $$ final PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors()[ FD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_11 $$ aClass = Class.forName(className, false, myLoader)[ FD ]
Line_22 $$ final HashMap result = new HashMap()-->Line_39 $$ myCache.put(className, result)[ FD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_23 $$ final PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors()[ CD ]
Line_3 $$ if (myCache.containsKey(className)) -->Line_4 $$ return (HashMap) myCache.get(className)[ CD ]
Line_6 $$ if (Utils.validateJComponentClass(myLoader, className, false) != null) -->Line_7 $$ return null[ CD ]
Line_34 $$ if (property != null) -->Line_36 $$ result.put(name, property)[ CD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_40 $$ return result[ CD ]
Line_16 $$ final BeanInfo beanInfo-->Line_18 $$ beanInfo = Introspector.getBeanInfo(aClass)[ FD ]
Line_32 $$ final String name = descriptor.getName()-->Line_33 $$ final LwIntrospectedProperty property = propertyFromClass(propertyType, name)[ FD ]
Line_24 $$ for (int i = 0; i < descriptors.length; i++) -->Line_34 $$ if (property != null) [ CD ]
Line_9 $$ final Class aClass-->Line_11 $$ aClass = Class.forName(className, false, myLoader)[ FD ]
Line_33 $$ final LwIntrospectedProperty property = propertyFromClass(propertyType, name)-->Line_34 $$ if (property != null) [ FD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_6 $$ if (Utils.validateJComponentClass(myLoader, className, false) != null) [ FD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_3 $$ if (myCache.containsKey(className)) [ FD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_39 $$ myCache.put(className, result)[ FD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_6 $$ if (Utils.validateJComponentClass(myLoader, className, false) != null) [ CD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_16 $$ final BeanInfo beanInfo[ CD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_39 $$ myCache.put(className, result)[ CD ]
Line_24 $$ for (int i = 0; i < descriptors.length; i++) -->Line_27 $$ final Method writeMethod = descriptor.getWriteMethod()[ CD ]
Line_25 $$ final PropertyDescriptor descriptor = descriptors[i]-->Line_28 $$ final Class propertyType = descriptor.getPropertyType()[ FD ]
Line_33 $$ final LwIntrospectedProperty property = propertyFromClass(propertyType, name)-->Line_36 $$ result.put(name, property)[ FD ]
Line_24 $$ for (int i = 0; i < descriptors.length; i++) -->Line_26 $$ final Method readMethod = descriptor.getReadMethod()[ CD ]
Line_22 $$ final HashMap result = new HashMap()-->Line_36 $$ result.put(name, property)[ FD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_3 $$ if (myCache.containsKey(className)) [ CD ]
Line_25 $$ final PropertyDescriptor descriptor = descriptors[i]-->Line_26 $$ final Method readMethod = descriptor.getReadMethod()[ FD ]
Line_25 $$ final PropertyDescriptor descriptor = descriptors[i]-->Line_27 $$ final Method writeMethod = descriptor.getWriteMethod()[ FD ]
Line_24 $$ for (int i = 0; i < descriptors.length; i++) -->Line_25 $$ final PropertyDescriptor descriptor = descriptors[i][ CD ]
Line_24 $$ for (int i = 0; i < descriptors.length; i++) -->Line_32 $$ final String name = descriptor.getName()[ CD ]
Line_25 $$ final PropertyDescriptor descriptor = descriptors[i]-->Line_35 $$ property.setDeclaringClassName(descriptor.getReadMethod().getDeclaringClass().getName())[ FD ]
Line_33 $$ final LwIntrospectedProperty property = propertyFromClass(propertyType, name)-->Line_35 $$ property.setDeclaringClassName(descriptor.getReadMethod().getDeclaringClass().getName())[ FD ]
Line_24 $$ for (int i = 0; i < descriptors.length; i++) -->Line_29 $$ if (writeMethod == null || readMethod == null || propertyType == null) [ CD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_24 $$ for (int i = 0; i < descriptors.length; i++) [ CD ]
Line_11 $$ aClass = Class.forName(className, false, myLoader)-->Line_18 $$ beanInfo = Introspector.getBeanInfo(aClass)[ FD ]
Line_25 $$ final PropertyDescriptor descriptor = descriptors[i]-->Line_32 $$ final String name = descriptor.getName()[ FD ]
Line_34 $$ if (property != null) -->Line_35 $$ property.setDeclaringClassName(descriptor.getReadMethod().getDeclaringClass().getName())[ CD ]
Line_24 $$ for (int i = 0; i < descriptors.length; i++) -->Line_28 $$ final Class propertyType = descriptor.getPropertyType()[ CD ]
Line_24 $$ for (int i = 0; i < descriptors.length; i++) -->Line_33 $$ final LwIntrospectedProperty property = propertyFromClass(propertyType, name)[ CD ]
Line_32 $$ final String name = descriptor.getName()-->Line_36 $$ result.put(name, property)[ FD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_9 $$ final Class aClass[ CD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_22 $$ final HashMap result = new HashMap()[ CD ]
Line_28 $$ final Class propertyType = descriptor.getPropertyType()-->Line_33 $$ final LwIntrospectedProperty property = propertyFromClass(propertyType, name)[ FD ]
Line_18 $$ beanInfo = Introspector.getBeanInfo(aClass)-->Line_23 $$ final PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors()[ FD ]
Line_2 $$ public HashMap getLwProperties(final String className) -->Line_4 $$ return (HashMap) myCache.get(className)[ FD ]
