Line_2 $$ protected String[] unsatisfiedNonSimpleProperties(AbstractBeanDefinition mbd, BeanWrapper bw) -->Line_4 $$ PropertyValues pvs = mbd.getPropertyValues()[ FD ]
Line_6 $$ for (PropertyDescriptor pd : pds) -->Line_7 $$ if (pd.getWriteMethod() != null && !isExcludedFromDependencyCheck(pd) && !pvs.contains(pd.getName()) && !BeanUtils.isSimpleProperty(pd.getPropertyType())) [ FD ]
Line_3 $$ Set<String> result = new TreeSet<String>()-->Line_8 $$ result.add(pd.getName())[ FD ]
Line_4 $$ PropertyValues pvs = mbd.getPropertyValues()-->Line_7 $$ if (pd.getWriteMethod() != null && !isExcludedFromDependencyCheck(pd) && !pvs.contains(pd.getName()) && !BeanUtils.isSimpleProperty(pd.getPropertyType())) [ FD ]
Line_2 $$ protected String[] unsatisfiedNonSimpleProperties(AbstractBeanDefinition mbd, BeanWrapper bw) -->Line_11 $$ return StringUtils.toStringArray(result)[ CD ]
Line_2 $$ protected String[] unsatisfiedNonSimpleProperties(AbstractBeanDefinition mbd, BeanWrapper bw) -->Line_4 $$ PropertyValues pvs = mbd.getPropertyValues()[ CD ]
Line_7 $$ if (pd.getWriteMethod() != null && !isExcludedFromDependencyCheck(pd) && !pvs.contains(pd.getName()) && !BeanUtils.isSimpleProperty(pd.getPropertyType())) -->Line_8 $$ result.add(pd.getName())[ CD ]
Line_2 $$ protected String[] unsatisfiedNonSimpleProperties(AbstractBeanDefinition mbd, BeanWrapper bw) -->Line_3 $$ Set<String> result = new TreeSet<String>()[ CD ]
Line_6 $$ for (PropertyDescriptor pd : pds) -->Line_8 $$ result.add(pd.getName())[ FD ]
Line_2 $$ protected String[] unsatisfiedNonSimpleProperties(AbstractBeanDefinition mbd, BeanWrapper bw) -->Line_5 $$ PropertyDescriptor[] pds = bw.getPropertyDescriptors()[ CD ]
Line_2 $$ protected String[] unsatisfiedNonSimpleProperties(AbstractBeanDefinition mbd, BeanWrapper bw) -->Line_5 $$ PropertyDescriptor[] pds = bw.getPropertyDescriptors()[ FD ]
Line_3 $$ Set<String> result = new TreeSet<String>()-->Line_11 $$ return StringUtils.toStringArray(result)[ FD ]
