Line_46 $$ testUser.doAs(new PrivilegedAction<ApplicationMasterProtocol>() -->Line_48 $$ return (ApplicationMasterProtocol) YarnRPC.create(conf).getProxy(ApplicationMasterProtocol.class, yarnCluster.getResourceManager().getApplicationMasterService().getBindAddress(), conf)[ CD ]
Line_3 $$ AMRMClient<ContainerRequest> amClient = null-->Line_58 $$ if (amClient != null && amClient.getServiceState() == STATE.STARTED) [ FD ]
Line_11 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_1 = getAMRMToken()-->Line_12 $$ Assert.assertNotNull(amrmToken_1)[ FD ]
Line_29 $$ if (amrmToken_2.decodeIdentifier().getKeyId() != amrmTokenSecretManager.getCurrnetMasterKeyData().getMasterKey().getKeyId()) -->Line_30 $$ if (amrmTokenSecretManager.getNextMasterKeyData() == null) [ CD ]
Line_5 $$ AMRMTokenSecretManager amrmTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getAMRMTokenSecretManager()-->Line_13 $$ Assert.assertEquals(amrmToken_1.decodeIdentifier().getKeyId(), amrmTokenSecretManager.getMasterKey().getMasterKey().getKeyId())[ FD ]
Line_23 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_2 = getAMRMToken()-->Line_24 $$ Assert.assertNotNull(amrmToken_2)[ FD ]
Line_5 $$ AMRMTokenSecretManager amrmTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getAMRMTokenSecretManager()-->Line_30 $$ if (amrmTokenSecretManager.getNextMasterKeyData() == null) [ FD ]
Line_3 $$ AMRMClient<ContainerRequest> amClient = null-->Line_59 $$ amClient.stop()[ FD ]
Line_6 $$ amClient = AMRMClient.<ContainerRequest>createAMRMClient()-->Line_22 $$ amClient.allocate(0.1f)[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOver() throws YarnException, IOException -->Line_3 $$ AMRMClient<ContainerRequest> amClient = null[ CD ]
Line_5 $$ AMRMTokenSecretManager amrmTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getAMRMTokenSecretManager()-->Line_29 $$ if (amrmToken_2.decodeIdentifier().getKeyId() != amrmTokenSecretManager.getCurrnetMasterKeyData().getMasterKey().getKeyId()) [ FD ]
Line_6 $$ amClient = AMRMClient.<ContainerRequest>createAMRMClient()-->Line_10 $$ amClient.registerApplicationMaster("Host", 10000, "")[ FD ]
Line_43 $$ UserGroupInformation testUser = UserGroupInformation.createRemoteUser("testUser")-->Line_46 $$ testUser.doAs(new PrivilegedAction<ApplicationMasterProtocol>() [ FD ]
Line_3 $$ AMRMClient<ContainerRequest> amClient = null-->Line_27 $$ amClient.allocate(0.1f)[ FD ]
Line_6 $$ amClient = AMRMClient.<ContainerRequest>createAMRMClient()-->Line_59 $$ amClient.stop()[ FD ]
Line_3 $$ AMRMClient<ContainerRequest> amClient = null-->Line_15 $$ amClient.allocate(0.1f)[ FD ]
Line_28 $$ while (true) -->Line_36 $$ amClient.allocate(0.1f)[ CD ]
Line_3 $$ AMRMClient<ContainerRequest> amClient = null-->Line_22 $$ amClient.allocate(0.1f)[ FD ]
Line_23 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_2 = getAMRMToken()-->Line_44 $$ SecurityUtil.setTokenService(amrmToken_2, yarnCluster.getResourceManager().getApplicationMasterService().getBindAddress())[ FD ]
Line_58 $$ if (amClient != null && amClient.getServiceState() == STATE.STARTED) -->Line_59 $$ amClient.stop()[ CD ]
Line_5 $$ AMRMTokenSecretManager amrmTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getAMRMTokenSecretManager()-->Line_32 $$ if (amrmToken_2.decodeIdentifier().getKeyId() != amrmTokenSecretManager.getNextMasterKeyData().getMasterKey().getKeyId()) [ FD ]
Line_23 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_2 = getAMRMToken()-->Line_45 $$ testUser.addToken(amrmToken_2)[ FD ]
Line_23 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_2 = getAMRMToken()-->Line_29 $$ if (amrmToken_2.decodeIdentifier().getKeyId() != amrmTokenSecretManager.getCurrnetMasterKeyData().getMasterKey().getKeyId()) [ FD ]
Line_6 $$ amClient = AMRMClient.<ContainerRequest>createAMRMClient()-->Line_7 $$ amClient.init(conf)[ FD ]
Line_3 $$ AMRMClient<ContainerRequest> amClient = null-->Line_7 $$ amClient.init(conf)[ FD ]
Line_23 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_2 = getAMRMToken()-->Line_32 $$ if (amrmToken_2.decodeIdentifier().getKeyId() != amrmTokenSecretManager.getNextMasterKeyData().getMasterKey().getKeyId()) [ FD ]
Line_43 $$ UserGroupInformation testUser = UserGroupInformation.createRemoteUser("testUser")-->Line_45 $$ testUser.addToken(amrmToken_2)[ FD ]
Line_5 $$ AMRMTokenSecretManager amrmTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getAMRMTokenSecretManager()-->Line_25 $$ Assert.assertEquals(amrmToken_2.decodeIdentifier().getKeyId(), amrmTokenSecretManager.getMasterKey().getMasterKey().getKeyId())[ FD ]
Line_30 $$ if (amrmTokenSecretManager.getNextMasterKeyData() == null) -->Line_32 $$ if (amrmToken_2.decodeIdentifier().getKeyId() != amrmTokenSecretManager.getNextMasterKeyData().getMasterKey().getKeyId()) [ CD ]
Line_11 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_1 = getAMRMToken()-->Line_26 $$ Assert.assertNotEquals(amrmToken_1, amrmToken_2)[ FD ]
Line_6 $$ amClient = AMRMClient.<ContainerRequest>createAMRMClient()-->Line_27 $$ amClient.allocate(0.1f)[ FD ]
Line_28 $$ while (true) -->Line_29 $$ if (amrmToken_2.decodeIdentifier().getKeyId() != amrmTokenSecretManager.getCurrnetMasterKeyData().getMasterKey().getKeyId()) [ CD ]
Line_3 $$ AMRMClient<ContainerRequest> amClient = null-->Line_36 $$ amClient.allocate(0.1f)[ FD ]
Line_23 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_2 = getAMRMToken()-->Line_25 $$ Assert.assertEquals(amrmToken_2.decodeIdentifier().getKeyId(), amrmTokenSecretManager.getMasterKey().getMasterKey().getKeyId())[ FD ]
Line_23 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_2 = getAMRMToken()-->Line_54 $$ Assert.assertTrue(ex.getMessage().contains("Invalid AMRMToken from " + amrmToken_2.decodeIdentifier().getApplicationAttemptId()))[ FD ]
Line_6 $$ amClient = AMRMClient.<ContainerRequest>createAMRMClient()-->Line_15 $$ amClient.allocate(0.1f)[ FD ]
Line_6 $$ amClient = AMRMClient.<ContainerRequest>createAMRMClient()-->Line_8 $$ amClient.start()[ FD ]
Line_11 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_1 = getAMRMToken()-->Line_13 $$ Assert.assertEquals(amrmToken_1.decodeIdentifier().getKeyId(), amrmTokenSecretManager.getMasterKey().getMasterKey().getKeyId())[ FD ]
Line_3 $$ AMRMClient<ContainerRequest> amClient = null-->Line_8 $$ amClient.start()[ FD ]
Line_23 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken_2 = getAMRMToken()-->Line_26 $$ Assert.assertNotEquals(amrmToken_1, amrmToken_2)[ FD ]
Line_6 $$ amClient = AMRMClient.<ContainerRequest>createAMRMClient()-->Line_58 $$ if (amClient != null && amClient.getServiceState() == STATE.STARTED) [ FD ]
Line_6 $$ amClient = AMRMClient.<ContainerRequest>createAMRMClient()-->Line_56 $$ amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null)[ FD ]
Line_3 $$ AMRMClient<ContainerRequest> amClient = null-->Line_10 $$ amClient.registerApplicationMaster("Host", 10000, "")[ FD ]
Line_14 $$ while (System.currentTimeMillis() - startTime < rolling_interval_sec * 1000) -->Line_15 $$ amClient.allocate(0.1f)[ CD ]
Line_3 $$ AMRMClient<ContainerRequest> amClient = null-->Line_6 $$ amClient = AMRMClient.<ContainerRequest>createAMRMClient()[ FD ]
Line_6 $$ amClient = AMRMClient.<ContainerRequest>createAMRMClient()-->Line_36 $$ amClient.allocate(0.1f)[ FD ]
Line_3 $$ AMRMClient<ContainerRequest> amClient = null-->Line_56 $$ amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null)[ FD ]
