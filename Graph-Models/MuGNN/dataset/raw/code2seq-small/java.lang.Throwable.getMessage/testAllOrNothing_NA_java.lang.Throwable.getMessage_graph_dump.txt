Line_5 $$ AtomicReference<Float> index = new AtomicReference()-->Line_19 $$ assertNull("updater only does a dryRun", index.get())[ FD ]
Line_10 $$ MetaData.Builder metaData = MetaData.builder().persistentSettings(Settings.builder().put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(), 1.5).put(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING.getKey(), 2.5).build()).transientSettings(Settings.builder().put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(), 3.5).put(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING.getKey(), 4.5).build())-->Line_11 $$ ClusterState build = builder.metaData(metaData).build()[ FD ]
Line_2 $$ public void testAllOrNothing() -->Line_6 $$ AtomicReference<Float> shard = new AtomicReference()[ CD ]
Line_2 $$ public void testAllOrNothing() -->Line_5 $$ AtomicReference<Float> index = new AtomicReference()[ CD ]
Line_2 $$ public void testAllOrNothing() -->Line_8 $$ settingsService.addSettingsUpdateConsumer(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING, shard::<>set)[ CD ]
Line_2 $$ public void testAllOrNothing() -->Line_4 $$ ClusterSettings settingsService = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)[ CD ]
Line_2 $$ public void testAllOrNothing() -->Line_7 $$ settingsService.addSettingsUpdateConsumer(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING, index::<>set)[ CD ]
Line_2 $$ public void testAllOrNothing() -->Line_20 $$ assertNull("updater only does a dryRun", shard.get())[ CD ]
Line_2 $$ public void testAllOrNothing() -->Line_11 $$ ClusterState build = builder.metaData(metaData).build()[ CD ]
Line_11 $$ ClusterState build = builder.metaData(metaData).build()-->Line_13 $$ updater.updateSettings(build, Settings.builder().put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(), "not a float").build(), Settings.builder().put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(), "not a float").put(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING.getKey(), 1.0f).build())[ FD ]
Line_9 $$ SettingsUpdater updater = new SettingsUpdater(settingsService)-->Line_13 $$ updater.updateSettings(build, Settings.builder().put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(), "not a float").build(), Settings.builder().put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(), "not a float").put(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING.getKey(), 1.0f).build())[ FD ]
Line_4 $$ ClusterSettings settingsService = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)-->Line_8 $$ settingsService.addSettingsUpdateConsumer(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING, shard::<>set)[ FD ]
Line_2 $$ public void testAllOrNothing() -->Line_9 $$ SettingsUpdater updater = new SettingsUpdater(settingsService)[ CD ]
Line_2 $$ public void testAllOrNothing() -->Line_19 $$ assertNull("updater only does a dryRun", index.get())[ CD ]
Line_2 $$ public void testAllOrNothing() -->Line_3 $$ ClusterState.Builder builder = ClusterState.builder(new ClusterName("foo"))[ CD ]
Line_6 $$ AtomicReference<Float> shard = new AtomicReference()-->Line_20 $$ assertNull("updater only does a dryRun", shard.get())[ FD ]
Line_2 $$ public void testAllOrNothing() -->Line_10 $$ MetaData.Builder metaData = MetaData.builder().persistentSettings(Settings.builder().put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(), 1.5).put(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING.getKey(), 2.5).build()).transientSettings(Settings.builder().put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(), 3.5).put(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING.getKey(), 4.5).build())[ CD ]
Line_3 $$ ClusterState.Builder builder = ClusterState.builder(new ClusterName("foo"))-->Line_11 $$ ClusterState build = builder.metaData(metaData).build()[ FD ]
Line_4 $$ ClusterSettings settingsService = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)-->Line_7 $$ settingsService.addSettingsUpdateConsumer(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING, index::<>set)[ FD ]
