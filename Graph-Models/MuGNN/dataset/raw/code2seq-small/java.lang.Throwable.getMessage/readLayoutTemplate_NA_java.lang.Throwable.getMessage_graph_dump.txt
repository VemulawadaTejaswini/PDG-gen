Line_12 $$ installedLayoutTemplates = _warStandard-->Line_18 $$ installedLayoutTemplates = _portalStandard[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_79 $$ layoutTemplateModel.setWapContent(wapContent)[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_65 $$ layoutTemplateModel.setColumns(_getColumns(velocityTemplateId, content))[ FD ]
Line_52 $$ if (Validator.isNull(content)) -->Line_63 $$ String velocityTemplateId = sb.toString()[ CD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_35 $$ layoutTemplateModel.setServletContextName(servletContextName)[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_43 $$ layoutTemplateModel.setTemplatePath(GetterUtil.getString(layoutTemplateElement.elementText("template-path"), layoutTemplateModel.getTemplatePath()))[ FD ]
Line_48 $$ content = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getTemplatePath()))-->Line_52 $$ if (Validator.isNull(content)) [ FD ]
Line_8 $$ installedLayoutTemplates = _getThemesCustom(themeId)-->Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)[ FD ]
Line_24 $$ for (Element layoutTemplateElement : layoutTemplateElements) -->Line_44 $$ layoutTemplateModel.setWapTemplatePath(GetterUtil.getString(layoutTemplateElement.elementText("wap-template-path"), layoutTemplateModel.getWapTemplatePath()))[ FD ]
Line_6 $$ installedLayoutTemplates = _getThemesStandard(themeId)-->Line_18 $$ installedLayoutTemplates = _portalStandard[ FD ]
Line_55 $$ StringBundler sb = new StringBundler(3)-->Line_62 $$ sb.append(layoutTemplateId)[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_56 $$ sb.append(themeId)[ FD ]
Line_3 $$ Map<String, LayoutTemplate> installedLayoutTemplates = null-->Line_20 $$ installedLayoutTemplates = _portalCustom[ FD ]
Line_5 $$ if (standard) -->Line_6 $$ installedLayoutTemplates = _getThemesStandard(themeId)[ CD ]
Line_48 $$ content = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getTemplatePath()))-->Line_65 $$ layoutTemplateModel.setColumns(_getColumns(velocityTemplateId, content))[ FD ]
Line_57 $$ if (standard) -->Line_60 $$ sb.append(LayoutTemplateConstants.CUSTOM_SEPARATOR)[ CD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_33 $$ layoutTemplateModel.setServletContext(servletContext)[ FD ]
Line_82 $$ Element rolesElement = layoutTemplateElement.element("roles")-->Line_83 $$ if (rolesElement != null) [ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_53 $$ _log.error("No content found at template path " + layoutTemplateModel.getTemplatePath())[ FD ]
Line_27 $$ if (layoutTemplateModel == null) -->Line_29 $$ installedLayoutTemplates.put(layoutTemplateId, layoutTemplateModel)[ CD ]
Line_76 $$ if (Validator.isNull(wapContent)) -->Line_79 $$ layoutTemplateModel.setWapContent(wapContent)[ CD ]
Line_82 $$ Element rolesElement = layoutTemplateElement.element("roles")-->Line_84 $$ List<Element> roleNameElements = rolesElement.elements("role-name")[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_72 $$ wapContent = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getWapTemplatePath()))[ FD ]
Line_12 $$ installedLayoutTemplates = _warStandard-->Line_20 $$ installedLayoutTemplates = _portalCustom[ FD ]
Line_5 $$ if (standard) -->Line_8 $$ installedLayoutTemplates = _getThemesCustom(themeId)[ CD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_77 $$ _log.error("No content found at WAP template path " + layoutTemplateModel.getWapTemplatePath())[ FD ]
Line_4 $$ if (themeId != null) -->Line_5 $$ if (standard) [ CD ]
Line_3 $$ Map<String, LayoutTemplate> installedLayoutTemplates = null-->Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)[ FD ]
Line_55 $$ StringBundler sb = new StringBundler(3)-->Line_63 $$ String velocityTemplateId = sb.toString()[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_43 $$ layoutTemplateModel.setTemplatePath(GetterUtil.getString(layoutTemplateElement.elementText("template-path"), layoutTemplateModel.getTemplatePath()))[ FD ]
Line_18 $$ installedLayoutTemplates = _portalStandard-->Line_20 $$ installedLayoutTemplates = _portalCustom[ FD ]
Line_3 $$ Map<String, LayoutTemplate> installedLayoutTemplates = null-->Line_6 $$ installedLayoutTemplates = _getThemesStandard(themeId)[ FD ]
Line_52 $$ if (Validator.isNull(content)) -->Line_56 $$ sb.append(themeId)[ CD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_67 $$ if (Validator.isNull(layoutTemplateModel.getWapTemplatePath())) [ FD ]
Line_6 $$ installedLayoutTemplates = _getThemesStandard(themeId)-->Line_12 $$ installedLayoutTemplates = _warStandard[ FD ]
Line_3 $$ Map<String, LayoutTemplate> installedLayoutTemplates = null-->Line_18 $$ installedLayoutTemplates = _portalStandard[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_4 $$ if (themeId != null) [ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_45 $$ layoutTemplateModel.setThumbnailPath(GetterUtil.getString(layoutTemplateElement.elementText("thumbnail-path"), layoutTemplateModel.getThumbnailPath()))[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_8 $$ installedLayoutTemplates = _getThemesCustom(themeId)[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_34 $$ if (servletContextName != null) [ FD ]
Line_31 $$ PluginSetting pluginSetting = pluginSettingLocalService.getDefaultPluginSetting()-->Line_86 $$ pluginSetting.addRole(roleNameElement.getText())[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_29 $$ installedLayoutTemplates.put(layoutTemplateId, layoutTemplateModel)[ FD ]
Line_24 $$ for (Element layoutTemplateElement : layoutTemplateElements) -->Line_82 $$ Element rolesElement = layoutTemplateElement.element("roles")[ FD ]
Line_8 $$ installedLayoutTemplates = _getThemesCustom(themeId)-->Line_12 $$ installedLayoutTemplates = _warStandard[ FD ]
Line_52 $$ if (Validator.isNull(content)) -->Line_55 $$ StringBundler sb = new StringBundler(3)[ CD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_10 $$ if (servletContextName != null) [ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_38 $$ layoutTemplateModel.setThemeId(themeId)[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_72 $$ wapContent = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getWapTemplatePath()))[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_91 $$ layoutTemplates.add(layoutTemplateModel)[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_89 $$ layoutTemplateModel.setDefaultPluginSetting(pluginSetting)[ FD ]
Line_6 $$ installedLayoutTemplates = _getThemesStandard(themeId)-->Line_8 $$ installedLayoutTemplates = _getThemesCustom(themeId)[ FD ]
Line_4 $$ if (themeId != null) -->Line_10 $$ if (servletContextName != null) [ CD ]
Line_6 $$ installedLayoutTemplates = _getThemesStandard(themeId)-->Line_20 $$ installedLayoutTemplates = _portalCustom[ FD ]
Line_17 $$ if (standard) -->Line_20 $$ installedLayoutTemplates = _portalCustom[ CD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_53 $$ _log.error("No content found at template path " + layoutTemplateModel.getTemplatePath())[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_32 $$ layoutTemplateModel.setPluginPackage(pluginPackage)[ FD ]
Line_20 $$ installedLayoutTemplates = _portalCustom-->Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_38 $$ layoutTemplateModel.setThemeId(themeId)[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_48 $$ content = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getTemplatePath()))[ FD ]
Line_63 $$ String velocityTemplateId = sb.toString()-->Line_65 $$ layoutTemplateModel.setColumns(_getColumns(velocityTemplateId, content))[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_44 $$ layoutTemplateModel.setWapTemplatePath(GetterUtil.getString(layoutTemplateElement.elementText("wap-template-path"), layoutTemplateModel.getWapTemplatePath()))[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_65 $$ layoutTemplateModel.setColumns(_getColumns(velocityTemplateId, content))[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_67 $$ if (Validator.isNull(layoutTemplateModel.getWapTemplatePath())) [ FD ]
Line_52 $$ if (Validator.isNull(content)) -->Line_57 $$ if (standard) [ CD ]
Line_14 $$ installedLayoutTemplates = _warCustom-->Line_20 $$ installedLayoutTemplates = _portalCustom[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_37 $$ layoutTemplateModel.setStandard(standard)[ FD ]
Line_57 $$ if (standard) -->Line_58 $$ sb.append(LayoutTemplateConstants.STANDARD_SEPARATOR)[ CD ]
Line_70 $$ String wapContent = null-->Line_72 $$ wapContent = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getWapTemplatePath()))[ FD ]
Line_76 $$ if (Validator.isNull(wapContent)) -->Line_77 $$ _log.error("No content found at WAP template path " + layoutTemplateModel.getWapTemplatePath())[ CD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_41 $$ layoutTemplateModel.setName(templateName)[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_50 $$ _log.error("Unable to get content at template path " + layoutTemplateModel.getTemplatePath() + ": " + e.getMessage())[ FD ]
Line_55 $$ StringBundler sb = new StringBundler(3)-->Line_58 $$ sb.append(LayoutTemplateConstants.STANDARD_SEPARATOR)[ FD ]
Line_14 $$ installedLayoutTemplates = _warCustom-->Line_29 $$ installedLayoutTemplates.put(layoutTemplateId, layoutTemplateModel)[ FD ]
Line_52 $$ if (Validator.isNull(content)) -->Line_62 $$ sb.append(layoutTemplateId)[ CD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_89 $$ layoutTemplateModel.setDefaultPluginSetting(pluginSetting)[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_37 $$ layoutTemplateModel.setStandard(standard)[ FD ]
Line_8 $$ installedLayoutTemplates = _getThemesCustom(themeId)-->Line_14 $$ installedLayoutTemplates = _warCustom[ FD ]
Line_3 $$ Map<String, LayoutTemplate> installedLayoutTemplates = null-->Line_8 $$ installedLayoutTemplates = _getThemesCustom(themeId)[ FD ]
Line_6 $$ installedLayoutTemplates = _getThemesStandard(themeId)-->Line_29 $$ installedLayoutTemplates.put(layoutTemplateId, layoutTemplateModel)[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_64 $$ layoutTemplateModel.setContent(content)[ FD ]
Line_10 $$ if (servletContextName != null) -->Line_17 $$ if (standard) [ CD ]
Line_20 $$ installedLayoutTemplates = _portalCustom-->Line_29 $$ installedLayoutTemplates.put(layoutTemplateId, layoutTemplateModel)[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_33 $$ layoutTemplateModel.setServletContext(servletContext)[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_44 $$ layoutTemplateModel.setWapTemplatePath(GetterUtil.getString(layoutTemplateElement.elementText("wap-template-path"), layoutTemplateModel.getWapTemplatePath()))[ FD ]
Line_10 $$ if (servletContextName != null) -->Line_11 $$ if (standard) [ CD ]
Line_46 $$ String content = null-->Line_64 $$ layoutTemplateModel.setContent(content)[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_79 $$ layoutTemplateModel.setWapContent(wapContent)[ FD ]
Line_3 $$ Map<String, LayoutTemplate> installedLayoutTemplates = null-->Line_29 $$ installedLayoutTemplates.put(layoutTemplateId, layoutTemplateModel)[ FD ]
Line_24 $$ for (Element layoutTemplateElement : layoutTemplateElements) -->Line_43 $$ layoutTemplateModel.setTemplatePath(GetterUtil.getString(layoutTemplateElement.elementText("template-path"), layoutTemplateModel.getTemplatePath()))[ FD ]
Line_12 $$ installedLayoutTemplates = _warStandard-->Line_14 $$ installedLayoutTemplates = _warCustom[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_35 $$ layoutTemplateModel.setServletContextName(servletContextName)[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_74 $$ _log.error("Unable to get content at WAP template path " + layoutTemplateModel.getWapTemplatePath() + ": " + e.getMessage())[ FD ]
Line_46 $$ String content = null-->Line_52 $$ if (Validator.isNull(content)) [ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_32 $$ layoutTemplateModel.setPluginPackage(pluginPackage)[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_91 $$ layoutTemplates.add(layoutTemplateModel)[ FD ]
Line_11 $$ if (standard) -->Line_14 $$ installedLayoutTemplates = _warCustom[ CD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_74 $$ _log.error("Unable to get content at WAP template path " + layoutTemplateModel.getWapTemplatePath() + ": " + e.getMessage())[ FD ]
Line_6 $$ installedLayoutTemplates = _getThemesStandard(themeId)-->Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_41 $$ layoutTemplateModel.setName(templateName)[ FD ]
Line_34 $$ if (servletContextName != null) -->Line_35 $$ layoutTemplateModel.setServletContextName(servletContextName)[ CD ]
Line_48 $$ content = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getTemplatePath()))-->Line_64 $$ layoutTemplateModel.setContent(content)[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_77 $$ _log.error("No content found at WAP template path " + layoutTemplateModel.getWapTemplatePath())[ FD ]
Line_52 $$ if (Validator.isNull(content)) -->Line_64 $$ layoutTemplateModel.setContent(content)[ CD ]
Line_52 $$ if (Validator.isNull(content)) -->Line_65 $$ layoutTemplateModel.setColumns(_getColumns(velocityTemplateId, content))[ CD ]
Line_6 $$ installedLayoutTemplates = _getThemesStandard(themeId)-->Line_14 $$ installedLayoutTemplates = _warCustom[ FD ]
Line_17 $$ if (standard) -->Line_18 $$ installedLayoutTemplates = _portalStandard[ CD ]
Line_12 $$ installedLayoutTemplates = _warStandard-->Line_29 $$ installedLayoutTemplates.put(layoutTemplateId, layoutTemplateModel)[ FD ]
Line_67 $$ if (Validator.isNull(layoutTemplateModel.getWapTemplatePath())) -->Line_70 $$ String wapContent = null[ CD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_91 $$ layoutTemplates.add(layoutTemplateModel)[ FD ]
Line_67 $$ if (Validator.isNull(layoutTemplateModel.getWapTemplatePath())) -->Line_76 $$ if (Validator.isNull(wapContent)) [ CD ]
Line_24 $$ for (Element layoutTemplateElement : layoutTemplateElements) -->Line_45 $$ layoutTemplateModel.setThumbnailPath(GetterUtil.getString(layoutTemplateElement.elementText("thumbnail-path"), layoutTemplateModel.getThumbnailPath()))[ FD ]
Line_31 $$ PluginSetting pluginSetting = pluginSettingLocalService.getDefaultPluginSetting()-->Line_89 $$ layoutTemplateModel.setDefaultPluginSetting(pluginSetting)[ FD ]
Line_25 $$ String layoutTemplateId = layoutTemplateElement.attributeValue("id")-->Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)[ FD ]
Line_46 $$ String content = null-->Line_65 $$ layoutTemplateModel.setColumns(_getColumns(velocityTemplateId, content))[ FD ]
Line_83 $$ if (rolesElement != null) -->Line_84 $$ List<Element> roleNameElements = rolesElement.elements("role-name")[ CD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_33 $$ layoutTemplateModel.setServletContext(servletContext)[ FD ]
Line_11 $$ if (standard) -->Line_12 $$ installedLayoutTemplates = _warStandard[ CD ]
Line_3 $$ Map<String, LayoutTemplate> installedLayoutTemplates = null-->Line_12 $$ installedLayoutTemplates = _warStandard[ FD ]
Line_90 $$ if (layoutTemplates != null) -->Line_91 $$ layoutTemplates.add(layoutTemplateModel)[ CD ]
Line_8 $$ installedLayoutTemplates = _getThemesCustom(themeId)-->Line_29 $$ installedLayoutTemplates.put(layoutTemplateId, layoutTemplateModel)[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_50 $$ _log.error("Unable to get content at template path " + layoutTemplateModel.getTemplatePath() + ": " + e.getMessage())[ FD ]
Line_8 $$ installedLayoutTemplates = _getThemesCustom(themeId)-->Line_18 $$ installedLayoutTemplates = _portalStandard[ FD ]
Line_3 $$ Map<String, LayoutTemplate> installedLayoutTemplates = null-->Line_14 $$ installedLayoutTemplates = _warCustom[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_32 $$ layoutTemplateModel.setPluginPackage(pluginPackage)[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_48 $$ content = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getTemplatePath()))[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_23 $$ List<Element> layoutTemplateElements = element.elements("layout-template")[ CD ]
Line_46 $$ String content = null-->Line_48 $$ content = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getTemplatePath()))[ FD ]
Line_70 $$ String wapContent = null-->Line_79 $$ layoutTemplateModel.setWapContent(wapContent)[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_23 $$ List<Element> layoutTemplateElements = element.elements("layout-template")[ FD ]
Line_40 $$ if (Validator.isNotNull(templateName)) -->Line_41 $$ layoutTemplateModel.setName(templateName)[ CD ]
Line_39 $$ String templateName = GetterUtil.getString(layoutTemplateElement.attributeValue("name"))-->Line_41 $$ layoutTemplateModel.setName(templateName)[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_45 $$ layoutTemplateModel.setThumbnailPath(GetterUtil.getString(layoutTemplateElement.elementText("thumbnail-path"), layoutTemplateModel.getThumbnailPath()))[ FD ]
Line_12 $$ installedLayoutTemplates = _warStandard-->Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)[ FD ]
Line_14 $$ installedLayoutTemplates = _warCustom-->Line_18 $$ installedLayoutTemplates = _portalStandard[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_3 $$ Map<String, LayoutTemplate> installedLayoutTemplates = null[ CD ]
Line_72 $$ wapContent = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getWapTemplatePath()))-->Line_76 $$ if (Validator.isNull(wapContent)) [ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_35 $$ layoutTemplateModel.setServletContextName(servletContextName)[ FD ]
Line_25 $$ String layoutTemplateId = layoutTemplateElement.attributeValue("id")-->Line_62 $$ sb.append(layoutTemplateId)[ FD ]
Line_70 $$ String wapContent = null-->Line_76 $$ if (Validator.isNull(wapContent)) [ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_6 $$ installedLayoutTemplates = _getThemesStandard(themeId)[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_38 $$ layoutTemplateModel.setThemeId(themeId)[ FD ]
Line_52 $$ if (Validator.isNull(content)) -->Line_53 $$ _log.error("No content found at template path " + layoutTemplateModel.getTemplatePath())[ CD ]
Line_14 $$ installedLayoutTemplates = _warCustom-->Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_64 $$ layoutTemplateModel.setContent(content)[ FD ]
Line_18 $$ installedLayoutTemplates = _portalStandard-->Line_29 $$ installedLayoutTemplates.put(layoutTemplateId, layoutTemplateModel)[ FD ]
Line_25 $$ String layoutTemplateId = layoutTemplateElement.attributeValue("id")-->Line_29 $$ installedLayoutTemplates.put(layoutTemplateId, layoutTemplateModel)[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_29 $$ installedLayoutTemplates.put(layoutTemplateId, layoutTemplateModel)[ FD ]
Line_55 $$ StringBundler sb = new StringBundler(3)-->Line_56 $$ sb.append(themeId)[ FD ]
Line_72 $$ wapContent = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getWapTemplatePath()))-->Line_79 $$ layoutTemplateModel.setWapContent(wapContent)[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_90 $$ if (layoutTemplates != null) [ FD ]
Line_18 $$ installedLayoutTemplates = _portalStandard-->Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)[ FD ]
Line_67 $$ if (Validator.isNull(layoutTemplateModel.getWapTemplatePath())) -->Line_68 $$ _log.error("The element wap-template-path is not defined for " + layoutTemplateId)[ CD ]
Line_85 $$ for (Element roleNameElement : roleNameElements) -->Line_86 $$ pluginSetting.addRole(roleNameElement.getText())[ FD ]
Line_55 $$ StringBundler sb = new StringBundler(3)-->Line_60 $$ sb.append(LayoutTemplateConstants.CUSTOM_SEPARATOR)[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_48 $$ content = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getTemplatePath()))[ FD ]
Line_24 $$ for (Element layoutTemplateElement : layoutTemplateElements) -->Line_25 $$ String layoutTemplateId = layoutTemplateElement.attributeValue("id")[ FD ]
Line_2 $$ public void readLayoutTemplate(String servletContextName, ServletContext servletContext, Set<LayoutTemplate> layoutTemplates, Element element, boolean standard, String themeId, PluginPackage pluginPackage) -->Line_4 $$ if (themeId != null) [ CD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_27 $$ if (layoutTemplateModel == null) [ FD ]
Line_39 $$ String templateName = GetterUtil.getString(layoutTemplateElement.attributeValue("name"))-->Line_40 $$ if (Validator.isNotNull(templateName)) [ FD ]
Line_27 $$ if (layoutTemplateModel == null) -->Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)[ CD ]
Line_8 $$ installedLayoutTemplates = _getThemesCustom(themeId)-->Line_20 $$ installedLayoutTemplates = _portalCustom[ FD ]
Line_28 $$ layoutTemplateModel = new LayoutTemplateImpl(layoutTemplateId)-->Line_37 $$ layoutTemplateModel.setStandard(standard)[ FD ]
Line_26 $$ LayoutTemplate layoutTemplateModel = installedLayoutTemplates.get(layoutTemplateId)-->Line_72 $$ wapContent = HttpUtil.URLtoString(servletContext.getResource(layoutTemplateModel.getWapTemplatePath()))[ FD ]
Line_24 $$ for (Element layoutTemplateElement : layoutTemplateElements) -->Line_39 $$ String templateName = GetterUtil.getString(layoutTemplateElement.attributeValue("name"))[ FD ]
