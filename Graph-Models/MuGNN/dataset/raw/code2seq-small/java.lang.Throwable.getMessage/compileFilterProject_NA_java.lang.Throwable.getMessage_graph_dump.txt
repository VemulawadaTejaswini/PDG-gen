Line_3 $$ filter = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING), filter)-->Line_5 $$ IdentityHashMap<Expression, Type> expressionTypes = getExpressionTypesFromInput(TEST_SESSION, metadata, SQL_PARSER, INPUT_TYPES, ImmutableList.of(filter, projection))[ FD ]
Line_2 $$ private OperatorFactory compileFilterProject(Expression filter, Expression projection, ExpressionCompiler compiler) -->Line_8 $$ PageProcessor processor = compiler.compilePageProcessor(toRowExpression(filter, expressionTypes), projections)[ FD ]
Line_7 $$ List<RowExpression> projections = ImmutableList.of(toRowExpression(projection, expressionTypes))-->Line_8 $$ PageProcessor processor = compiler.compilePageProcessor(toRowExpression(filter, expressionTypes), projections)[ FD ]
Line_2 $$ private OperatorFactory compileFilterProject(Expression filter, Expression projection, ExpressionCompiler compiler) -->Line_5 $$ IdentityHashMap<Expression, Type> expressionTypes = getExpressionTypesFromInput(TEST_SESSION, metadata, SQL_PARSER, INPUT_TYPES, ImmutableList.of(filter, projection))[ CD ]
Line_5 $$ IdentityHashMap<Expression, Type> expressionTypes = getExpressionTypesFromInput(TEST_SESSION, metadata, SQL_PARSER, INPUT_TYPES, ImmutableList.of(filter, projection))-->Line_9 $$ return new FilterAndProjectOperator.FilterAndProjectOperatorFactory(0, processor, ImmutableList.of(expressionTypes.get(projection)))[ FD ]
Line_11 $$ if (e instanceof UncheckedExecutionException) -->Line_12 $$ e = e.getCause()[ CD ]
Line_2 $$ private OperatorFactory compileFilterProject(Expression filter, Expression projection, ExpressionCompiler compiler) -->Line_4 $$ projection = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING), projection)[ CD ]
Line_5 $$ IdentityHashMap<Expression, Type> expressionTypes = getExpressionTypesFromInput(TEST_SESSION, metadata, SQL_PARSER, INPUT_TYPES, ImmutableList.of(filter, projection))-->Line_8 $$ PageProcessor processor = compiler.compilePageProcessor(toRowExpression(filter, expressionTypes), projections)[ FD ]
Line_2 $$ private OperatorFactory compileFilterProject(Expression filter, Expression projection, ExpressionCompiler compiler) -->Line_9 $$ return new FilterAndProjectOperator.FilterAndProjectOperatorFactory(0, processor, ImmutableList.of(expressionTypes.get(projection)))[ FD ]
Line_2 $$ private OperatorFactory compileFilterProject(Expression filter, Expression projection, ExpressionCompiler compiler) -->Line_5 $$ IdentityHashMap<Expression, Type> expressionTypes = getExpressionTypesFromInput(TEST_SESSION, metadata, SQL_PARSER, INPUT_TYPES, ImmutableList.of(filter, projection))[ FD ]
Line_4 $$ projection = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING), projection)-->Line_9 $$ return new FilterAndProjectOperator.FilterAndProjectOperatorFactory(0, processor, ImmutableList.of(expressionTypes.get(projection)))[ FD ]
Line_4 $$ projection = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING), projection)-->Line_7 $$ List<RowExpression> projections = ImmutableList.of(toRowExpression(projection, expressionTypes))[ FD ]
Line_3 $$ filter = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING), filter)-->Line_8 $$ PageProcessor processor = compiler.compilePageProcessor(toRowExpression(filter, expressionTypes), projections)[ FD ]
Line_2 $$ private OperatorFactory compileFilterProject(Expression filter, Expression projection, ExpressionCompiler compiler) -->Line_3 $$ filter = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING), filter)[ CD ]
Line_2 $$ private OperatorFactory compileFilterProject(Expression filter, Expression projection, ExpressionCompiler compiler) -->Line_4 $$ projection = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING), projection)[ FD ]
Line_4 $$ projection = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING), projection)-->Line_5 $$ IdentityHashMap<Expression, Type> expressionTypes = getExpressionTypesFromInput(TEST_SESSION, metadata, SQL_PARSER, INPUT_TYPES, ImmutableList.of(filter, projection))[ FD ]
Line_2 $$ private OperatorFactory compileFilterProject(Expression filter, Expression projection, ExpressionCompiler compiler) -->Line_7 $$ List<RowExpression> projections = ImmutableList.of(toRowExpression(projection, expressionTypes))[ FD ]
Line_5 $$ IdentityHashMap<Expression, Type> expressionTypes = getExpressionTypesFromInput(TEST_SESSION, metadata, SQL_PARSER, INPUT_TYPES, ImmutableList.of(filter, projection))-->Line_7 $$ List<RowExpression> projections = ImmutableList.of(toRowExpression(projection, expressionTypes))[ FD ]
Line_2 $$ private OperatorFactory compileFilterProject(Expression filter, Expression projection, ExpressionCompiler compiler) -->Line_3 $$ filter = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(INPUT_MAPPING), filter)[ FD ]
