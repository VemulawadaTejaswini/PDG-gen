Line_14 $$ final CloseableHttpResponse response = ourClient.execute(request)-->Line_17 $$ final StatusLine line = response.getStatusLine()[ FD ]
Line_2 $$ public static int updateLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_26 $$ for (Task task : lesson.getTaskList()) [ FD ]
Line_5 $$ if (!login()) -->Line_7 $$ return 0[ CD ]
Line_18 $$ if (line.getStatusCode() != HttpStatus.SC_OK) -->Line_19 $$ LOG.error("Failed to push " + responseString)[ CD ]
Line_3 $$ final HttpPut request = new HttpPut(stepicApiUrl + "lessons/" + String.valueOf(lesson.id))-->Line_14 $$ final CloseableHttpResponse response = ourClient.execute(request)[ FD ]
Line_2 $$ public static int updateLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_3 $$ final HttpPut request = new HttpPut(stepicApiUrl + "lessons/" + String.valueOf(lesson.id))[ CD ]
Line_2 $$ public static int updateLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_28 $$ postTask(project, task, lesson.id)[ FD ]
Line_15 $$ final HttpEntity responseEntity = response.getEntity()-->Line_16 $$ final String responseString = responseEntity != null ? EntityUtils.toString(responseEntity) : ""[ FD ]
Line_3 $$ final HttpPut request = new HttpPut(stepicApiUrl + "lessons/" + String.valueOf(lesson.id))-->Line_12 $$ request.setEntity(new StringEntity(requestBody, ContentType.APPLICATION_JSON))[ FD ]
Line_18 $$ if (line.getStatusCode() != HttpStatus.SC_OK) -->Line_20 $$ return 0[ CD ]
Line_3 $$ final HttpPut request = new HttpPut(stepicApiUrl + "lessons/" + String.valueOf(lesson.id))-->Line_10 $$ setHeaders(request, "application/json")[ FD ]
Line_2 $$ public static int updateLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_27 $$ indicator.checkCanceled()[ FD ]
Line_2 $$ public static int updateLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_12 $$ request.setEntity(new StringEntity(requestBody, ContentType.APPLICATION_JSON))[ CD ]
Line_4 $$ if (ourClient == null) -->Line_5 $$ if (!login()) [ CD ]
Line_26 $$ for (Task task : lesson.getTaskList()) -->Line_28 $$ postTask(project, task, lesson.id)[ FD ]
Line_2 $$ public static int updateLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_34 $$ return -1[ CD ]
Line_2 $$ public static int updateLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_11 $$ String requestBody = new Gson().toJson(new LessonWrapper(lesson))[ CD ]
Line_23 $$ for (Integer step : postedLesson.steps) -->Line_24 $$ deleteTask(step)[ FD ]
Line_17 $$ final StatusLine line = response.getStatusLine()-->Line_18 $$ if (line.getStatusCode() != HttpStatus.SC_OK) [ FD ]
Line_2 $$ public static int updateLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_4 $$ if (ourClient == null) [ CD ]
Line_16 $$ final String responseString = responseEntity != null ? EntityUtils.toString(responseEntity) : ""-->Line_22 $$ final Lesson postedLesson = new Gson().fromJson(responseString, Course.class).getLessons().get(0)[ FD ]
Line_2 $$ public static int updateLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_10 $$ setHeaders(request, "application/json")[ CD ]
Line_14 $$ final CloseableHttpResponse response = ourClient.execute(request)-->Line_15 $$ final HttpEntity responseEntity = response.getEntity()[ FD ]
Line_5 $$ if (!login()) -->Line_6 $$ LOG.error("Failed to push lesson")[ CD ]
