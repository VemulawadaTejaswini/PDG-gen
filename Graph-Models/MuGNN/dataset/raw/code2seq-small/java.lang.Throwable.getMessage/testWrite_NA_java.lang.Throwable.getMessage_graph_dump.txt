Line_4 $$ final AtomicBoolean flushed = new AtomicBoolean()-->Line_68 $$ flushed.set(false)[ FD ]
Line_2 $$ public void testWrite() throws IOException -->Line_23 $$ byte[] unsafeGetByteArray = restrictedByteArrayCacheOutputStream.unsafeGetByteArray()[ CD ]
Line_12 $$ for (int i = 'a'; i <= 'z'; i++) -->Line_25 $$ for (int i = 0; i < 26; i++) [ FD ]
Line_2 $$ public void testWrite() throws IOException -->Line_34 $$ for (int i = '0'; i <= '9'; i++) [ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_16 $$ Assert.assertFalse(restrictedByteArrayCacheOutputStream.isOverflowed())[ CD ]
Line_12 $$ for (int i = 'a'; i <= 'z'; i++) -->Line_13 $$ restrictedByteArrayCacheOutputStream.write(i)[ FD ]
Line_2 $$ public void testWrite() throws IOException -->Line_38 $$ Assert.assertTrue(restrictedByteArrayCacheOutputStream.isOverflowed())[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_70 $$ Assert.assertFalse(flushed.get())[ CD ]
Line_12 $$ for (int i = 'a'; i <= 'z'; i++) -->Line_31 $$ for (int i = 0; i < 26; i++) [ FD ]
Line_12 $$ for (int i = 'a'; i <= 'z'; i++) -->Line_13 $$ restrictedByteArrayCacheOutputStream.write(i)[ CD ]
Line_34 $$ for (int i = '0'; i <= '9'; i++) -->Line_35 $$ restrictedByteArrayCacheOutputStream.write(i)[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_28 $$ ByteBuffer byteBuffer = restrictedByteArrayCacheOutputStream.unsafeGetByteBuffer()[ CD ]
Line_25 $$ for (int i = 0; i < 26; i++) -->Line_31 $$ for (int i = 0; i < 26; i++) [ FD ]
Line_2 $$ public void testWrite() throws IOException -->Line_12 $$ for (int i = 'a'; i <= 'z'; i++) [ CD ]
Line_34 $$ for (int i = '0'; i <= '9'; i++) -->Line_36 $$ sb.append((char) i)[ CD ]
Line_4 $$ final AtomicBoolean flushed = new AtomicBoolean()-->Line_70 $$ Assert.assertFalse(flushed.get())[ FD ]
Line_2 $$ public void testWrite() throws IOException -->Line_24 $$ Assert.assertEquals(27, unsafeGetByteArray.length)[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_41 $$ Assert.assertEquals(-1, restrictedByteArrayCacheOutputStream.index)[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_31 $$ for (int i = 0; i < 26; i++) [ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_20 $$ String expectedStringResult = sb.toString()[ CD ]
Line_31 $$ for (int i = 0; i < 26; i++) -->Line_34 $$ for (int i = '0'; i <= '9'; i++) [ FD ]
Line_3 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_43 $$ Assert.assertEquals(sb.toString(), unsyncByteArrayOutputStream.toString())[ FD ]
Line_5 $$ FlushPreAction flushPreAction = new FlushPreAction() -->Line_7 $$ flushed.set(true)[ CD ]
Line_12 $$ for (int i = 'a'; i <= 'z'; i++) -->Line_34 $$ for (int i = '0'; i <= '9'; i++) [ FD ]
Line_4 $$ final AtomicBoolean flushed = new AtomicBoolean()-->Line_17 $$ Assert.assertFalse(flushed.get())[ FD ]
Line_2 $$ public void testWrite() throws IOException -->Line_69 $$ restrictedByteArrayCacheOutputStream.flush()[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_19 $$ Assert.assertEquals(26, restrictedByteArrayCacheOutputStream.size())[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_42 $$ Assert.assertEquals(-1, restrictedByteArrayCacheOutputStream.size())[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_29 $$ Assert.assertEquals(26, byteBuffer.remaining())[ CD ]
Line_12 $$ for (int i = 'a'; i <= 'z'; i++) -->Line_35 $$ restrictedByteArrayCacheOutputStream.write(i)[ FD ]
Line_25 $$ for (int i = 0; i < 26; i++) -->Line_34 $$ for (int i = '0'; i <= '9'; i++) [ FD ]
Line_34 $$ for (int i = '0'; i <= '9'; i++) -->Line_35 $$ restrictedByteArrayCacheOutputStream.write(i)[ FD ]
Line_2 $$ public void testWrite() throws IOException -->Line_39 $$ Assert.assertTrue(flushed.get())[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_17 $$ Assert.assertFalse(flushed.get())[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_21 $$ byte[] expectedBytesResult = expectedStringResult.getBytes(Charset.forName("ASCII"))[ CD ]
Line_4 $$ final AtomicBoolean flushed = new AtomicBoolean()-->Line_39 $$ Assert.assertTrue(flushed.get())[ FD ]
Line_2 $$ public void testWrite() throws IOException -->Line_43 $$ Assert.assertEquals(sb.toString(), unsyncByteArrayOutputStream.toString())[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_68 $$ flushed.set(false)[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_18 $$ Assert.assertEquals(26, restrictedByteArrayCacheOutputStream.index)[ CD ]
Line_25 $$ for (int i = 0; i < 26; i++) -->Line_35 $$ restrictedByteArrayCacheOutputStream.write(i)[ FD ]
Line_2 $$ public void testWrite() throws IOException -->Line_30 $$ byte[] byteBufferArray = byteBuffer.array()[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_5 $$ FlushPreAction flushPreAction = new FlushPreAction() [ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_3 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()[ CD ]
Line_12 $$ for (int i = 'a'; i <= 'z'; i++) -->Line_14 $$ sb.append((char) i)[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_25 $$ for (int i = 0; i < 26; i++) [ CD ]
Line_25 $$ for (int i = 0; i < 26; i++) -->Line_26 $$ Assert.assertEquals(expectedBytesResult[i], unsafeGetByteArray[i])[ CD ]
Line_4 $$ final AtomicBoolean flushed = new AtomicBoolean()-->Line_7 $$ flushed.set(true)[ FD ]
Line_31 $$ for (int i = 0; i < 26; i++) -->Line_35 $$ restrictedByteArrayCacheOutputStream.write(i)[ FD ]
Line_2 $$ public void testWrite() throws IOException -->Line_4 $$ final AtomicBoolean flushed = new AtomicBoolean()[ CD ]
Line_31 $$ for (int i = 0; i < 26; i++) -->Line_32 $$ Assert.assertEquals(expectedBytesResult[i], byteBufferArray[i])[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_40 $$ Assert.assertNull(restrictedByteArrayCacheOutputStream.cache)[ CD ]
Line_2 $$ public void testWrite() throws IOException -->Line_22 $$ Assert.assertArrayEquals(expectedBytesResult, restrictedByteArrayCacheOutputStream.toByteArray())[ CD ]
