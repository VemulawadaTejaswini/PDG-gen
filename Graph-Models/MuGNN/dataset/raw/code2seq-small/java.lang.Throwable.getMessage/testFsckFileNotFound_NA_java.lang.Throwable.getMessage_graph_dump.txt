Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_9 $$ PrintWriter out = new PrintWriter(result, true)[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_15 $$ when(fsName.getBlockLocations(anyString(), anyLong(), anyLong(), anyBoolean(), anyBoolean(), anyBoolean())).thenThrow(new FileNotFoundException())[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_26 $$ FsPermission perms = FsPermission.getDefault()[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_10 $$ InetAddress remoteAddress = InetAddress.getLocalHost()[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_16 $$ when(fsName.getBlockManager()).thenReturn(blockManager)[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_35 $$ Result res = new Result(conf)[ CD ]
Line_12 $$ BlockManager blockManager = mock(BlockManager.class)-->Line_17 $$ when(blockManager.getDatanodeManager()).thenReturn(dnManager)[ FD ]
Line_5 $$ NameNode namenode = mock(NameNode.class)-->Line_14 $$ when(namenode.getNamesystem()).thenReturn(fsName)[ FD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_31 $$ path = DFSUtil.string2Bytes(pathString)[ CD ]
Line_30 $$ byte[] path = new byte[128]-->Line_31 $$ path = DFSUtil.string2Bytes(pathString)[ FD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_32 $$ long fileId = 312321L[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_25 $$ long accessTime = 123123120L[ CD ]
Line_34 $$ HdfsFileStatus file = new HdfsFileStatus(length, isDir, blockReplication, blockSize, modTime, accessTime, perms, owner, group, symlink, path, fileId, numChildren, null)-->Line_37 $$ fsck.check(pathString, file, res)[ FD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_7 $$ Map<String, String[]> pmap = new HashMap<String, String[]>()[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_19 $$ String pathString = "/tmp/testFile"[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_29 $$ byte[] symlink = null[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_28 $$ String group = "bar"[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_22 $$ int blockReplication = 1[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_17 $$ when(blockManager.getDatanodeManager()).thenReturn(dnManager)[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_20 $$ long length = 123L[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_30 $$ byte[] path = new byte[128][ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_8 $$ Writer result = new StringWriter()[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_41 $$ assertTrue(res.toString().contains("HEALTHY"))[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_21 $$ boolean isDir = false[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_14 $$ when(namenode.getNamesystem()).thenReturn(fsName)[ CD ]
Line_35 $$ Result res = new Result(conf)-->Line_37 $$ fsck.check(pathString, file, res)[ FD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_6 $$ NetworkTopology nettop = mock(NetworkTopology.class)[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_13 $$ DatanodeManager dnManager = mock(DatanodeManager.class)[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_33 $$ int numChildren = 1[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_18 $$ NamenodeFsck fsck = new NamenodeFsck(conf, namenode, nettop, pmap, out, NUM_REPLICAS, (short) 1, remoteAddress)[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_23 $$ long blockSize = 128 * 1024L[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_5 $$ NameNode namenode = mock(NameNode.class)[ CD ]
Line_18 $$ NamenodeFsck fsck = new NamenodeFsck(conf, namenode, nettop, pmap, out, NUM_REPLICAS, (short) 1, remoteAddress)-->Line_37 $$ fsck.check(pathString, file, res)[ FD ]
Line_11 $$ FSNamesystem fsName = mock(FSNamesystem.class)-->Line_16 $$ when(fsName.getBlockManager()).thenReturn(blockManager)[ FD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_12 $$ BlockManager blockManager = mock(BlockManager.class)[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_27 $$ String owner = "foo"[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_24 $$ long modTime = 123123123L[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_11 $$ FSNamesystem fsName = mock(FSNamesystem.class)[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_19 $$ String pathString = "/tmp/testFile"-->Line_31 $$ path = DFSUtil.string2Bytes(pathString)[ FD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_34 $$ HdfsFileStatus file = new HdfsFileStatus(length, isDir, blockReplication, blockSize, modTime, accessTime, perms, owner, group, symlink, path, fileId, numChildren, null)[ CD ]
Line_2 $$ public void testFsckFileNotFound() throws Exception -->Line_3 $$ final short NUM_REPLICAS = 1[ CD ]
Line_11 $$ FSNamesystem fsName = mock(FSNamesystem.class)-->Line_15 $$ when(fsName.getBlockLocations(anyString(), anyLong(), anyLong(), anyBoolean(), anyBoolean(), anyBoolean())).thenThrow(new FileNotFoundException())[ FD ]
Line_19 $$ String pathString = "/tmp/testFile"-->Line_37 $$ fsck.check(pathString, file, res)[ FD ]
Line_35 $$ Result res = new Result(conf)-->Line_41 $$ assertTrue(res.toString().contains("HEALTHY"))[ FD ]
Line_13 $$ DatanodeManager dnManager = mock(DatanodeManager.class)-->Line_17 $$ when(blockManager.getDatanodeManager()).thenReturn(dnManager)[ FD ]
Line_11 $$ FSNamesystem fsName = mock(FSNamesystem.class)-->Line_14 $$ when(namenode.getNamesystem()).thenReturn(fsName)[ FD ]
Line_12 $$ BlockManager blockManager = mock(BlockManager.class)-->Line_16 $$ when(fsName.getBlockManager()).thenReturn(blockManager)[ FD ]
