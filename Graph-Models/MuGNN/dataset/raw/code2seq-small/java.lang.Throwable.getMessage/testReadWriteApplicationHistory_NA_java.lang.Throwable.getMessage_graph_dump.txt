Line_19 $$ ApplicationHistoryData data = store.getApplication(appId)-->Line_20 $$ Assert.assertNotNull(data)[ FD ]
Line_3 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_24 $$ appId = ApplicationId.newInstance(0, 1)[ FD ]
Line_17 $$ for (int i = 1; i <= numApps; ++i) -->Line_18 $$ appId = ApplicationId.newInstance(0, i)[ CD ]
Line_18 $$ appId = ApplicationId.newInstance(0, i)-->Line_26 $$ writeApplicationStartData(appId)[ FD ]
Line_18 $$ appId = ApplicationId.newInstance(0, i)-->Line_24 $$ appId = ApplicationId.newInstance(0, 1)[ FD ]
Line_11 $$ for (int i = 1; i <= numApps; ++i) -->Line_14 $$ writeApplicationFinishData(appId)[ CD ]
Line_24 $$ appId = ApplicationId.newInstance(0, 1)-->Line_26 $$ writeApplicationStartData(appId)[ FD ]
Line_11 $$ for (int i = 1; i <= numApps; ++i) -->Line_13 $$ writeApplicationStartData(appId)[ CD ]
Line_3 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_5 $$ writeApplicationFinishData(appId)[ FD ]
Line_3 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_21 $$ Assert.assertEquals(appId.toString(), data.getApplicationName())[ FD ]
Line_2 $$ public void testReadWriteApplicationHistory() throws Exception -->Line_11 $$ for (int i = 1; i <= numApps; ++i) [ CD ]
Line_3 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_18 $$ appId = ApplicationId.newInstance(0, i)[ FD ]
Line_12 $$ appId = ApplicationId.newInstance(0, i)-->Line_13 $$ writeApplicationStartData(appId)[ FD ]
Line_2 $$ public void testReadWriteApplicationHistory() throws Exception -->Line_10 $$ int numApps = 5[ CD ]
Line_11 $$ for (int i = 1; i <= numApps; ++i) -->Line_18 $$ appId = ApplicationId.newInstance(0, i)[ FD ]
Line_11 $$ for (int i = 1; i <= numApps; ++i) -->Line_12 $$ appId = ApplicationId.newInstance(0, i)[ FD ]
Line_17 $$ for (int i = 1; i <= numApps; ++i) -->Line_18 $$ appId = ApplicationId.newInstance(0, i)[ FD ]
Line_3 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_14 $$ writeApplicationFinishData(appId)[ FD ]
Line_2 $$ public void testReadWriteApplicationHistory() throws Exception -->Line_17 $$ for (int i = 1; i <= numApps; ++i) [ CD ]
Line_17 $$ for (int i = 1; i <= numApps; ++i) -->Line_19 $$ ApplicationHistoryData data = store.getApplication(appId)[ CD ]
Line_2 $$ public void testReadWriteApplicationHistory() throws Exception -->Line_24 $$ appId = ApplicationId.newInstance(0, 1)[ CD ]
Line_19 $$ ApplicationHistoryData data = store.getApplication(appId)-->Line_22 $$ Assert.assertEquals(appId.toString(), data.getDiagnosticsInfo())[ FD ]
Line_24 $$ appId = ApplicationId.newInstance(0, 1)-->Line_32 $$ writeApplicationFinishData(appId)[ FD ]
Line_17 $$ for (int i = 1; i <= numApps; ++i) -->Line_21 $$ Assert.assertEquals(appId.toString(), data.getApplicationName())[ CD ]
Line_3 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_12 $$ appId = ApplicationId.newInstance(0, i)[ FD ]
Line_10 $$ int numApps = 5-->Line_17 $$ for (int i = 1; i <= numApps; ++i) [ FD ]
Line_10 $$ int numApps = 5-->Line_11 $$ for (int i = 1; i <= numApps; ++i) [ FD ]
Line_3 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_13 $$ writeApplicationStartData(appId)[ FD ]
Line_3 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_19 $$ ApplicationHistoryData data = store.getApplication(appId)[ FD ]
Line_2 $$ public void testReadWriteApplicationHistory() throws Exception -->Line_16 $$ Assert.assertEquals(numApps, store.getAllApplications().size())[ CD ]
Line_2 $$ public void testReadWriteApplicationHistory() throws Exception -->Line_3 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)[ CD ]
Line_11 $$ for (int i = 1; i <= numApps; ++i) -->Line_12 $$ appId = ApplicationId.newInstance(0, i)[ CD ]
Line_18 $$ appId = ApplicationId.newInstance(0, i)-->Line_32 $$ writeApplicationFinishData(appId)[ FD ]
Line_12 $$ appId = ApplicationId.newInstance(0, i)-->Line_18 $$ appId = ApplicationId.newInstance(0, i)[ FD ]
Line_12 $$ appId = ApplicationId.newInstance(0, i)-->Line_22 $$ Assert.assertEquals(appId.toString(), data.getDiagnosticsInfo())[ FD ]
Line_10 $$ int numApps = 5-->Line_16 $$ Assert.assertEquals(numApps, store.getAllApplications().size())[ FD ]
Line_3 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_32 $$ writeApplicationFinishData(appId)[ FD ]
Line_12 $$ appId = ApplicationId.newInstance(0, i)-->Line_14 $$ writeApplicationFinishData(appId)[ FD ]
Line_11 $$ for (int i = 1; i <= numApps; ++i) -->Line_17 $$ for (int i = 1; i <= numApps; ++i) [ FD ]
Line_19 $$ ApplicationHistoryData data = store.getApplication(appId)-->Line_21 $$ Assert.assertEquals(appId.toString(), data.getApplicationName())[ FD ]
Line_18 $$ appId = ApplicationId.newInstance(0, i)-->Line_22 $$ Assert.assertEquals(appId.toString(), data.getDiagnosticsInfo())[ FD ]
Line_3 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_22 $$ Assert.assertEquals(appId.toString(), data.getDiagnosticsInfo())[ FD ]
Line_12 $$ appId = ApplicationId.newInstance(0, i)-->Line_32 $$ writeApplicationFinishData(appId)[ FD ]
Line_12 $$ appId = ApplicationId.newInstance(0, i)-->Line_24 $$ appId = ApplicationId.newInstance(0, 1)[ FD ]
Line_17 $$ for (int i = 1; i <= numApps; ++i) -->Line_22 $$ Assert.assertEquals(appId.toString(), data.getDiagnosticsInfo())[ CD ]
Line_17 $$ for (int i = 1; i <= numApps; ++i) -->Line_20 $$ Assert.assertNotNull(data)[ CD ]
Line_12 $$ appId = ApplicationId.newInstance(0, i)-->Line_21 $$ Assert.assertEquals(appId.toString(), data.getApplicationName())[ FD ]
Line_18 $$ appId = ApplicationId.newInstance(0, i)-->Line_19 $$ ApplicationHistoryData data = store.getApplication(appId)[ FD ]
Line_12 $$ appId = ApplicationId.newInstance(0, i)-->Line_26 $$ writeApplicationStartData(appId)[ FD ]
Line_18 $$ appId = ApplicationId.newInstance(0, i)-->Line_21 $$ Assert.assertEquals(appId.toString(), data.getApplicationName())[ FD ]
Line_12 $$ appId = ApplicationId.newInstance(0, i)-->Line_19 $$ ApplicationHistoryData data = store.getApplication(appId)[ FD ]
Line_3 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_26 $$ writeApplicationStartData(appId)[ FD ]
