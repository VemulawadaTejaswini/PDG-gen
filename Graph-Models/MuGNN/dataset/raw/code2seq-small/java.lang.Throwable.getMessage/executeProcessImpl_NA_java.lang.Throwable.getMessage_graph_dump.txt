Line_28 $$ handler.addProcessListener(new ProcessAdapter() -->Line_32 $$ LOG.debug("got text: " + event.getText())[ CD ]
Line_21 $$ handler = new OSProcessHandler(commandLine)-->Line_22 $$ OutputStreamWriter writer = new OutputStreamWriter(handler.getProcess().getOutputStream())[ FD ]
Line_21 $$ handler = new OSProcessHandler(commandLine)-->Line_67 $$ myConsole.attachToProcess(handler)[ FD ]
Line_19 $$ final OSProcessHandler handler-->Line_22 $$ OutputStreamWriter writer = new OutputStreamWriter(handler.getProcess().getOutputStream())[ FD ]
Line_19 $$ final OSProcessHandler handler-->Line_62 $$ myKillAction.setHandler(handler)[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_10 $$ if (module.isDisposed())[ CD ]
Line_19 $$ final OSProcessHandler handler-->Line_71 $$ handler.waitFor()[ FD ]
Line_4 $$ final GeneralCommandLine commandLine = pic.commandLine-->Line_18 $$ myConsole.print(commandLine.getCommandLineString(), ConsoleViewContentType.SYSTEM_OUTPUT)[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_68 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() [ CD ]
Line_72 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_89 $$ final MyProcessInConsole pic = myProcessQueue.poll()[ CD ]
Line_72 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_90 $$ if (pic != null) [ CD ]
Line_89 $$ final MyProcessInConsole pic = myProcessQueue.poll()-->Line_91 $$ executeProcessImpl(pic, false)[ FD ]
Line_19 $$ final OSProcessHandler handler-->Line_21 $$ handler = new OSProcessHandler(commandLine)[ FD ]
Line_27 $$ final Ref<Boolean> gotError = new Ref<Boolean>(false)-->Line_36 $$ if (exitCode == 0 && !gotError.get().booleanValue()) [ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_14 $$ if (!modalContext && pic.showConsole) [ CD ]
Line_21 $$ handler = new OSProcessHandler(commandLine)-->Line_71 $$ handler.waitFor()[ FD ]
Line_28 $$ handler.addProcessListener(new ProcessAdapter() -->Line_30 $$ if (key == ProcessOutputTypes.STDERR)[ FD ]
Line_27 $$ final Ref<Boolean> gotError = new Ref<Boolean>(false)-->Line_31 $$ gotError.set(true)[ FD ]
Line_28 $$ handler.addProcessListener(new ProcessAdapter() -->Line_35 $$ final int exitCode = event.getExitCode()[ FD ]
Line_3 $$ final Module module = pic.module-->Line_10 $$ if (module.isDisposed())[ FD ]
Line_3 $$ final Module module = pic.module-->Line_80 $$ if (onDone != null && !module.isDisposed())[ FD ]
Line_72 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_74 $$ if (myProject.isDisposed())[ CD ]
Line_72 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_86 $$ myKillAction.setHandler(null)[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_12 $$ final ModalityState modalityState = ModalityState.current()[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_66 $$ myConsole.scrollToEnd()[ CD ]
Line_12 $$ final ModalityState modalityState = ModalityState.current()-->Line_48 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ FD ]
Line_72 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_78 $$ module.putUserData(UPDATING_BY_CONSOLE_PROCESS, null)[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_67 $$ myConsole.attachToProcess(handler)[ CD ]
Line_68 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() -->Line_72 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_3 $$ final Module module = pic.module[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_62 $$ myKillAction.setHandler(handler)[ CD ]
Line_90 $$ if (pic != null) -->Line_91 $$ executeProcessImpl(pic, false)[ CD ]
Line_72 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_76 $$ module.putUserData(UPDATING_BY_CONSOLE_PROCESS, true)[ CD ]
Line_28 $$ handler.addProcessListener(new ProcessAdapter() -->Line_30 $$ if (key == ProcessOutputTypes.STDERR)[ CD ]
Line_22 $$ OutputStreamWriter writer = new OutputStreamWriter(handler.getProcess().getOutputStream())-->Line_24 $$ writer.write(s)[ FD ]
Line_37 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_39 $$ if (myProject.isDisposed() || !closeOnDone)[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_65 $$ myContent.setDisplayName((framework == null ? "" : framework.getDisplayName() + ":") + "Executing...")[ CD ]
Line_80 $$ if (onDone != null && !module.isDisposed())-->Line_81 $$ onDone.run()[ CD ]
Line_19 $$ final OSProcessHandler handler-->Line_61 $$ pic.setHandler(handler)[ FD ]
Line_3 $$ final Module module = pic.module-->Line_52 $$ if (onDone != null && !module.isDisposed())[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_13 $$ final boolean modalContext = modalityState != ModalityState.NON_MODAL[ CD ]
Line_72 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_77 $$ LocalFileSystem.getInstance().refresh(false)[ CD ]
Line_7 $$ final Runnable onDone = pic.onDone-->Line_53 $$ onDone.run()[ FD ]
Line_36 $$ if (exitCode == 0 && !gotError.get().booleanValue()) -->Line_37 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_19 $$ final OSProcessHandler handler-->Line_28 $$ handler.addProcessListener(new ProcessAdapter() [ FD ]
Line_3 $$ final Module module = pic.module-->Line_78 $$ module.putUserData(UPDATING_BY_CONSOLE_PROCESS, null)[ FD ]
Line_48 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_50 $$ Messages.showErrorDialog(e.getMessage(), "Cannot Start Process")[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_61 $$ pic.setHandler(handler)[ CD ]
Line_7 $$ final Runnable onDone = pic.onDone-->Line_81 $$ onDone.run()[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_90 $$ if (pic != null) [ FD ]
Line_21 $$ handler = new OSProcessHandler(commandLine)-->Line_61 $$ pic.setHandler(handler)[ FD ]
Line_21 $$ handler = new OSProcessHandler(commandLine)-->Line_28 $$ handler.addProcessListener(new ProcessAdapter() [ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_64 $$ myToolWindow.setIcon(framework == null ? JetgroovyIcons.Groovy.Groovy_13x13 : framework.getToolWindowIcon())[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_17 $$ FileDocumentManager.getInstance().saveAllDocuments()[ CD ]
Line_19 $$ final OSProcessHandler handler-->Line_70 $$ handler.startNotify()[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_7 $$ final Runnable onDone = pic.onDone[ CD ]
Line_89 $$ final MyProcessInConsole pic = myProcessQueue.poll()-->Line_90 $$ if (pic != null) [ FD ]
Line_68 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() -->Line_70 $$ handler.startNotify()[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_19 $$ final OSProcessHandler handler[ CD ]
Line_12 $$ final ModalityState modalityState = ModalityState.current()-->Line_72 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ FD ]
Line_23 $$ for (String s : input) -->Line_24 $$ writer.write(s)[ FD ]
Line_19 $$ final OSProcessHandler handler-->Line_67 $$ myConsole.attachToProcess(handler)[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_5 $$ final String[] input = pic.input[ CD ]
Line_72 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_87 $$ myContent.setDisplayName("")[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_4 $$ final GeneralCommandLine commandLine = pic.commandLine[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_61 $$ pic.setHandler(handler)[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_91 $$ executeProcessImpl(pic, false)[ FD ]
Line_12 $$ final ModalityState modalityState = ModalityState.current()-->Line_37 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_63 $$ final MvcFramework framework = MvcFramework.getInstance(module)[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_18 $$ myConsole.print(commandLine.getCommandLineString(), ConsoleViewContentType.SYSTEM_OUTPUT)[ CD ]
Line_37 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_41 $$ myToolWindow.hide(null)[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_6 $$ final boolean closeOnDone = pic.closeOnDone[ CD ]
Line_30 $$ if (key == ProcessOutputTypes.STDERR)-->Line_31 $$ gotError.set(true)[ CD ]
Line_3 $$ final Module module = pic.module-->Line_8 $$ assert module.getProject() == myProject[ FD ]
Line_68 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() -->Line_71 $$ handler.waitFor()[ CD ]
Line_3 $$ final Module module = pic.module-->Line_63 $$ final MvcFramework framework = MvcFramework.getInstance(module)[ FD ]
Line_28 $$ handler.addProcessListener(new ProcessAdapter() -->Line_32 $$ LOG.debug("got text: " + event.getText())[ FD ]
Line_74 $$ if (myProject.isDisposed())-->Line_75 $$ return[ CD ]
Line_22 $$ OutputStreamWriter writer = new OutputStreamWriter(handler.getProcess().getOutputStream())-->Line_26 $$ writer.flush()[ FD ]
Line_28 $$ handler.addProcessListener(new ProcessAdapter() -->Line_35 $$ final int exitCode = event.getExitCode()[ CD ]
Line_21 $$ handler = new OSProcessHandler(commandLine)-->Line_70 $$ handler.startNotify()[ FD ]
Line_10 $$ if (module.isDisposed())-->Line_11 $$ return[ CD ]
Line_13 $$ final boolean modalContext = modalityState != ModalityState.NON_MODAL-->Line_14 $$ if (!modalContext && pic.showConsole) [ FD ]
Line_72 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_85 $$ myConsole.print("\n", ConsoleViewContentType.NORMAL_OUTPUT)[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_15 $$ show(null, toFocus)[ FD ]
Line_39 $$ if (myProject.isDisposed() || !closeOnDone)-->Line_40 $$ return[ CD ]
Line_52 $$ if (onDone != null && !module.isDisposed())-->Line_53 $$ onDone.run()[ CD ]
Line_28 $$ handler.addProcessListener(new ProcessAdapter() -->Line_36 $$ if (exitCode == 0 && !gotError.get().booleanValue()) [ CD ]
Line_14 $$ if (!modalContext && pic.showConsole) -->Line_15 $$ show(null, toFocus)[ CD ]
Line_3 $$ final Module module = pic.module-->Line_76 $$ module.putUserData(UPDATING_BY_CONSOLE_PROCESS, true)[ FD ]
Line_21 $$ handler = new OSProcessHandler(commandLine)-->Line_62 $$ myKillAction.setHandler(handler)[ FD ]
