Line_9 $$ final AtomicReference<IllegalStateException> holder = new AtomicReference()-->Line_18 $$ assertThat(holder.get().getMessage(), equalTo("Can't handle join request from a node with a version [1.6.0] that is lower than the minimum compatible version [" + Version.V_2_0_0_beta1.minimumCompatibilityVersion() + "]"))[ FD ]
Line_10 $$ zenDiscovery.handleJoinRequest(node, clusterService.state(), new MembershipAction.JoinCallback() -->Line_14 $$ holder.set((IllegalStateException) t)[ CD ]
Line_3 $$ Settings nodeSettings = Settings.settingsBuilder().put("discovery.type", "zen").build()-->Line_5 $$ String nodeName = internalCluster().startNode(nodeSettings, Version.V_2_0_0_beta1)[ FD ]
Line_2 $$ public void testHandleNodeJoin_incompatibleMinVersion() throws UnknownHostException -->Line_3 $$ Settings nodeSettings = Settings.settingsBuilder().put("discovery.type", "zen").build()[ CD ]
Line_2 $$ public void testHandleNodeJoin_incompatibleMinVersion() throws UnknownHostException -->Line_7 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class, nodeName)[ CD ]
Line_7 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class, nodeName)-->Line_10 $$ zenDiscovery.handleJoinRequest(node, clusterService.state(), new MembershipAction.JoinCallback() [ FD ]
Line_2 $$ public void testHandleNodeJoin_incompatibleMinVersion() throws UnknownHostException -->Line_9 $$ final AtomicReference<IllegalStateException> holder = new AtomicReference()[ CD ]
Line_2 $$ public void testHandleNodeJoin_incompatibleMinVersion() throws UnknownHostException -->Line_10 $$ zenDiscovery.handleJoinRequest(node, clusterService.state(), new MembershipAction.JoinCallback() [ CD ]
Line_2 $$ public void testHandleNodeJoin_incompatibleMinVersion() throws UnknownHostException -->Line_8 $$ DiscoveryNode node = new DiscoveryNode("_node_id", new InetSocketTransportAddress(InetAddress.getByName("0.0.0.0"), 0), Version.V_1_6_0)[ CD ]
Line_2 $$ public void testHandleNodeJoin_incompatibleMinVersion() throws UnknownHostException -->Line_18 $$ assertThat(holder.get().getMessage(), equalTo("Can't handle join request from a node with a version [1.6.0] that is lower than the minimum compatible version [" + Version.V_2_0_0_beta1.minimumCompatibilityVersion() + "]"))[ CD ]
Line_6 $$ ZenDiscovery zenDiscovery = (ZenDiscovery) internalCluster().getInstance(Discovery.class, nodeName)-->Line_10 $$ zenDiscovery.handleJoinRequest(node, clusterService.state(), new MembershipAction.JoinCallback() [ FD ]
Line_8 $$ DiscoveryNode node = new DiscoveryNode("_node_id", new InetSocketTransportAddress(InetAddress.getByName("0.0.0.0"), 0), Version.V_1_6_0)-->Line_10 $$ zenDiscovery.handleJoinRequest(node, clusterService.state(), new MembershipAction.JoinCallback() [ FD ]
Line_9 $$ final AtomicReference<IllegalStateException> holder = new AtomicReference()-->Line_14 $$ holder.set((IllegalStateException) t)[ FD ]
Line_2 $$ public void testHandleNodeJoin_incompatibleMinVersion() throws UnknownHostException -->Line_5 $$ String nodeName = internalCluster().startNode(nodeSettings, Version.V_2_0_0_beta1)[ CD ]
Line_2 $$ public void testHandleNodeJoin_incompatibleMinVersion() throws UnknownHostException -->Line_6 $$ ZenDiscovery zenDiscovery = (ZenDiscovery) internalCluster().getInstance(Discovery.class, nodeName)[ CD ]
Line_5 $$ String nodeName = internalCluster().startNode(nodeSettings, Version.V_2_0_0_beta1)-->Line_7 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class, nodeName)[ FD ]
Line_2 $$ public void testHandleNodeJoin_incompatibleMinVersion() throws UnknownHostException -->Line_17 $$ assertThat(holder.get(), notNullValue())[ CD ]
Line_5 $$ String nodeName = internalCluster().startNode(nodeSettings, Version.V_2_0_0_beta1)-->Line_6 $$ ZenDiscovery zenDiscovery = (ZenDiscovery) internalCluster().getInstance(Discovery.class, nodeName)[ FD ]
Line_9 $$ final AtomicReference<IllegalStateException> holder = new AtomicReference()-->Line_17 $$ assertThat(holder.get(), notNullValue())[ FD ]
