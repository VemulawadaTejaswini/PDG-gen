Line_27 $$ List<StartContainerRequest> list2 = new ArrayList<StartContainerRequest>()-->Line_29 $$ StartContainersRequest allRequests2 = StartContainersRequest.newInstance(list2)[ FD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_31 $$ boolean noException = true[ CD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_29 $$ StartContainersRequest allRequests2 = StartContainersRequest.newInstance(list2)[ CD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_7 $$ containerLaunchContext.setLocalResources(new HashMap<String, LocalResource>())[ CD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_6 $$ ContainerId cId2 = createContainerId(0)[ CD ]
Line_29 $$ StartContainersRequest allRequests2 = StartContainersRequest.newInstance(list2)-->Line_33 $$ containerManager.startContainers(allRequests2)[ FD ]
Line_21 $$ catchException = true-->Line_25 $$ Assert.assertTrue(catchException)[ FD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_8 $$ StartContainerRequest startRequest1 = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId1, ResourceManagerConstants.RM_INVALID_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))[ CD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_12 $$ containerManager.startContainers(allRequests)[ CD ]
Line_11 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)-->Line_15 $$ StartContainersResponse response = containerManager.startContainers(allRequests)[ FD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_27 $$ List<StartContainerRequest> list2 = new ArrayList<StartContainerRequest>()[ CD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_5 $$ ContainerId cId1 = createContainerId(0)[ CD ]
Line_8 $$ StartContainerRequest startRequest1 = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId1, ResourceManagerConstants.RM_INVALID_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))-->Line_10 $$ list.add(startRequest1)[ FD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_26 $$ StartContainerRequest startRequest2 = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId2, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))[ CD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_30 $$ containerManager.startContainers(allRequests2)[ CD ]
Line_6 $$ ContainerId cId2 = createContainerId(0)-->Line_26 $$ StartContainerRequest startRequest2 = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId2, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))[ FD ]
Line_9 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_11 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ FD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_28 $$ list.add(startRequest2)[ CD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_13 $$ boolean catchException = false[ CD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_10 $$ list.add(startRequest1)[ CD ]
Line_31 $$ boolean noException = true-->Line_37 $$ Assert.assertTrue(noException)[ FD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_11 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ CD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_7 $$ containerLaunchContext.setLocalResources(new HashMap<String, LocalResource>())[ FD ]
Line_5 $$ ContainerId cId1 = createContainerId(0)-->Line_17 $$ throw response.getFailedRequests().get(cId1).deSerialize()[ FD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_26 $$ StartContainerRequest startRequest2 = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId2, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))[ FD ]
Line_9 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_10 $$ list.add(startRequest1)[ FD ]
Line_9 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_28 $$ list.add(startRequest2)[ FD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_37 $$ Assert.assertTrue(noException)[ CD ]
Line_15 $$ StartContainersResponse response = containerManager.startContainers(allRequests)-->Line_16 $$ if (response.getFailedRequests().containsKey(cId1)) [ FD ]
Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_8 $$ StartContainerRequest startRequest1 = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId1, ResourceManagerConstants.RM_INVALID_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))[ FD ]
Line_5 $$ ContainerId cId1 = createContainerId(0)-->Line_16 $$ if (response.getFailedRequests().containsKey(cId1)) [ FD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_3 $$ containerManager.start()[ CD ]
Line_31 $$ boolean noException = true-->Line_35 $$ noException = false[ FD ]
Line_15 $$ StartContainersResponse response = containerManager.startContainers(allRequests)-->Line_17 $$ throw response.getFailedRequests().get(cId1).deSerialize()[ FD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_9 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()[ CD ]
Line_11 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)-->Line_12 $$ containerManager.startContainers(allRequests)[ FD ]
Line_35 $$ noException = false-->Line_37 $$ Assert.assertTrue(noException)[ FD ]
Line_13 $$ boolean catchException = false-->Line_25 $$ Assert.assertTrue(catchException)[ FD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_4 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)[ CD ]
Line_13 $$ boolean catchException = false-->Line_21 $$ catchException = true[ FD ]
Line_26 $$ StartContainerRequest startRequest2 = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId2, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))-->Line_28 $$ list.add(startRequest2)[ FD ]
Line_2 $$ public void testContainerLaunchFromPreviousRM() throws IOException, InterruptedException, YarnException -->Line_25 $$ Assert.assertTrue(catchException)[ CD ]
Line_29 $$ StartContainersRequest allRequests2 = StartContainersRequest.newInstance(list2)-->Line_30 $$ containerManager.startContainers(allRequests2)[ FD ]
Line_5 $$ ContainerId cId1 = createContainerId(0)-->Line_8 $$ StartContainerRequest startRequest1 = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId1, ResourceManagerConstants.RM_INVALID_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager()))[ FD ]
