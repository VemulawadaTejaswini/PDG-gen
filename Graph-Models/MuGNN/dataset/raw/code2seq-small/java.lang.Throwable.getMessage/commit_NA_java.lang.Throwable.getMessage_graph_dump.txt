Line_94 $$ for (ProjectConfigurationUpdater updater : myUpdaters) -->Line_95 $$ updater.updateProject(project, modelsProvider, updatedModulesProvider)[ FD ]
Line_12 $$ for (LibraryDescriptor lib : projectDescriptor.getLibraries()) -->Line_20 $$ projectLibs.put(lib, projectLib)[ FD ]
Line_15 $$ final Library.ModifiableModel libraryModel = projectLib.getModifiableModel()-->Line_17 $$ libraryModel.addRoot(VfsUtil.getUrlForLibraryRoot(file), OrderRootType.CLASSES)[ FD ]
Line_43 $$ module = moduleLoader.createModule(moduleModel)-->Line_48 $$ descriptorToModuleMap.put(moduleDescriptor, module)[ FD ]
Line_2 $$ public List<Module> commit(@NotNull final Project project, final ModifiableModuleModel model, final ModulesProvider modulesProvider) -->Line_7 $$ final List<Module> result = new ArrayList<Module>()[ CD ]
Line_45 $$ module = createModule(descriptor, moduleDescriptor, projectLibs, moduleModel)-->Line_48 $$ descriptorToModuleMap.put(moduleDescriptor, module)[ FD ]
Line_2 $$ public List<Module> commit(@NotNull final Project project, final ModifiableModuleModel model, final ModulesProvider modulesProvider) -->Line_5 $$ final LibraryTable.ModifiableModel projectLibraryTable = modelsProvider.getLibraryTableModifiableModel(project)[ CD ]
Line_2 $$ public List<Module> commit(@NotNull final Project project, final ModifiableModuleModel model, final ModulesProvider modulesProvider) -->Line_6 $$ final Map<LibraryDescriptor, Library> projectLibs = new HashMap<LibraryDescriptor, Library>()[ CD ]
Line_76 $$ final Module dependentModule = descriptorToModuleMap.get(dependentDescriptor)-->Line_77 $$ if (dependentModule != null) [ FD ]
Line_15 $$ final Library.ModifiableModel libraryModel = projectLib.getModifiableModel()-->Line_19 $$ libraryModel.commit()[ FD ]
Line_4 $$ ModifiableModelsProvider modelsProvider = new IdeaModifiableModelsProvider()-->Line_95 $$ updater.updateProject(project, modelsProvider, updatedModulesProvider)[ FD ]
Line_40 $$ final Module module-->Line_48 $$ descriptorToModuleMap.put(moduleDescriptor, module)[ FD ]
Line_41 $$ if (moduleDescriptor.isReuseExistingElement()) -->Line_43 $$ module = moduleLoader.createModule(moduleModel)[ CD ]
Line_43 $$ module = moduleLoader.createModule(moduleModel)-->Line_74 $$ final ModifiableRootModel rootModel = ModuleRootManager.getInstance(module).getModifiableModel()[ FD ]
Line_4 $$ ModifiableModelsProvider modelsProvider = new IdeaModifiableModelsProvider()-->Line_5 $$ final LibraryTable.ModifiableModel projectLibraryTable = modelsProvider.getLibraryTableModifiableModel(project)[ FD ]
Line_43 $$ module = moduleLoader.createModule(moduleModel)-->Line_67 $$ if (module == null) [ FD ]
Line_45 $$ module = createModule(descriptor, moduleDescriptor, projectLibs, moduleModel)-->Line_74 $$ final ModifiableRootModel rootModel = ModuleRootManager.getInstance(module).getModifiableModel()[ FD ]
Line_2 $$ public List<Module> commit(@NotNull final Project project, final ModifiableModuleModel model, final ModulesProvider modulesProvider) -->Line_95 $$ updater.updateProject(project, modelsProvider, updatedModulesProvider)[ FD ]
Line_38 $$ for (ProjectDescriptor descriptor : getSelectedDescriptors()) -->Line_70 $$ final Set<ModuleDescriptor> deps = descriptor.getDependencies()[ FD ]
Line_2 $$ public List<Module> commit(@NotNull final Project project, final ModifiableModuleModel model, final ModulesProvider modulesProvider) -->Line_5 $$ final LibraryTable.ModifiableModel projectLibraryTable = modelsProvider.getLibraryTableModifiableModel(project)[ FD ]
Line_41 $$ if (moduleDescriptor.isReuseExistingElement()) -->Line_42 $$ final ExistingModuleLoader moduleLoader = ImportImlMode.setUpLoader(FileUtil.toSystemIndependentName(moduleDescriptor.computeModuleFilePath()))[ CD ]
Line_45 $$ module = createModule(descriptor, moduleDescriptor, projectLibs, moduleModel)-->Line_47 $$ result.add(module)[ FD ]
Line_2 $$ public List<Module> commit(@NotNull final Project project, final ModifiableModuleModel model, final ModulesProvider modulesProvider) -->Line_37 $$ final ModifiableModuleModel moduleModel = fromProjectStructure ? model : ModuleManager.getInstance(project).getModifiableModel()[ FD ]
Line_39 $$ for (final ModuleDescriptor moduleDescriptor : descriptor.getModules()) -->Line_41 $$ if (moduleDescriptor.isReuseExistingElement()) [ FD ]
Line_33 $$ final Map<ModuleDescriptor, Module> descriptorToModuleMap = new HashMap<ModuleDescriptor, Module>()-->Line_76 $$ final Module dependentModule = descriptorToModuleMap.get(dependentDescriptor)[ FD ]
Line_9 $$ AccessToken token = WriteAction.start()-->Line_55 $$ token.finish()[ FD ]
Line_74 $$ final ModifiableRootModel rootModel = ModuleRootManager.getInstance(module).getModifiableModel()-->Line_78 $$ rootModel.addModuleOrderEntry(dependentModule)[ FD ]
Line_75 $$ for (ModuleDescriptor dependentDescriptor : deps) -->Line_76 $$ final Module dependentModule = descriptorToModuleMap.get(dependentDescriptor)[ FD ]
Line_2 $$ public List<Module> commit(@NotNull final Project project, final ModifiableModuleModel model, final ModulesProvider modulesProvider) -->Line_33 $$ final Map<ModuleDescriptor, Module> descriptorToModuleMap = new HashMap<ModuleDescriptor, Module>()[ CD ]
Line_45 $$ module = createModule(descriptor, moduleDescriptor, projectLibs, moduleModel)-->Line_67 $$ if (module == null) [ FD ]
Line_2 $$ public List<Module> commit(@NotNull final Project project, final ModifiableModuleModel model, final ModulesProvider modulesProvider) -->Line_91 $$ AccessToken token = WriteAction.start()[ CD ]
Line_74 $$ final ModifiableRootModel rootModel = ModuleRootManager.getInstance(module).getModifiableModel()-->Line_81 $$ rootModel.commit()[ FD ]
Line_12 $$ for (LibraryDescriptor lib : projectDescriptor.getLibraries()) -->Line_13 $$ final Collection<File> files = lib.getJars()[ FD ]
Line_7 $$ final List<Module> result = new ArrayList<Module>()-->Line_47 $$ result.add(module)[ FD ]
Line_76 $$ final Module dependentModule = descriptorToModuleMap.get(dependentDescriptor)-->Line_78 $$ rootModel.addModuleOrderEntry(dependentModule)[ FD ]
Line_12 $$ for (LibraryDescriptor lib : projectDescriptor.getLibraries()) -->Line_14 $$ final Library projectLib = projectLibraryTable.createLibrary(lib.getName())[ FD ]
Line_43 $$ module = moduleLoader.createModule(moduleModel)-->Line_47 $$ result.add(module)[ FD ]
Line_33 $$ final Map<ModuleDescriptor, Module> descriptorToModuleMap = new HashMap<ModuleDescriptor, Module>()-->Line_66 $$ final Module module = descriptorToModuleMap.get(descriptor)[ FD ]
Line_9 $$ AccessToken token = WriteAction.start()-->Line_85 $$ token.finish()[ FD ]
Line_51 $$ if (!fromProjectStructure) -->Line_52 $$ moduleModel.commit()[ CD ]
Line_2 $$ public List<Module> commit(@NotNull final Project project, final ModifiableModuleModel model, final ModulesProvider modulesProvider) -->Line_3 $$ final boolean fromProjectStructure = model != null[ CD ]
Line_16 $$ for (File file : files) -->Line_17 $$ libraryModel.addRoot(VfsUtil.getUrlForLibraryRoot(file), OrderRootType.CLASSES)[ FD ]
Line_40 $$ final Module module-->Line_74 $$ final ModifiableRootModel rootModel = ModuleRootManager.getInstance(module).getModifiableModel()[ FD ]
Line_42 $$ final ExistingModuleLoader moduleLoader = ImportImlMode.setUpLoader(FileUtil.toSystemIndependentName(moduleDescriptor.computeModuleFilePath()))-->Line_43 $$ module = moduleLoader.createModule(moduleModel)[ FD ]
Line_93 $$ ModulesProvider updatedModulesProvider = fromProjectStructure ? modulesProvider : new DefaultModulesProvider(project)-->Line_95 $$ updater.updateProject(project, modelsProvider, updatedModulesProvider)[ FD ]
Line_37 $$ final ModifiableModuleModel moduleModel = fromProjectStructure ? model : ModuleManager.getInstance(project).getModifiableModel()-->Line_45 $$ module = createModule(descriptor, moduleDescriptor, projectLibs, moduleModel)[ FD ]
Line_40 $$ final Module module-->Line_67 $$ if (module == null) [ FD ]
Line_43 $$ module = moduleLoader.createModule(moduleModel)-->Line_45 $$ module = createModule(descriptor, moduleDescriptor, projectLibs, moduleModel)[ FD ]
Line_11 $$ for (ProjectDescriptor projectDescriptor : getSelectedDescriptors()) -->Line_12 $$ for (LibraryDescriptor lib : projectDescriptor.getLibraries()) [ FD ]
Line_2 $$ public List<Module> commit(@NotNull final Project project, final ModifiableModuleModel model, final ModulesProvider modulesProvider) -->Line_100 $$ return result[ CD ]
Line_3 $$ final boolean fromProjectStructure = model != null-->Line_51 $$ if (!fromProjectStructure) [ FD ]
Line_40 $$ final Module module-->Line_47 $$ result.add(module)[ FD ]
Line_77 $$ if (dependentModule != null) -->Line_78 $$ rootModel.addModuleOrderEntry(dependentModule)[ CD ]
Line_70 $$ final Set<ModuleDescriptor> deps = descriptor.getDependencies()-->Line_71 $$ if (deps.size() == 0) [ FD ]
Line_39 $$ for (final ModuleDescriptor moduleDescriptor : descriptor.getModules()) -->Line_42 $$ final ExistingModuleLoader moduleLoader = ImportImlMode.setUpLoader(FileUtil.toSystemIndependentName(moduleDescriptor.computeModuleFilePath()))[ FD ]
Line_41 $$ if (moduleDescriptor.isReuseExistingElement()) -->Line_45 $$ module = createModule(descriptor, moduleDescriptor, projectLibs, moduleModel)[ CD ]
Line_9 $$ AccessToken token = WriteAction.start()-->Line_27 $$ token.finish()[ FD ]
Line_14 $$ final Library projectLib = projectLibraryTable.createLibrary(lib.getName())-->Line_15 $$ final Library.ModifiableModel libraryModel = projectLib.getModifiableModel()[ FD ]
Line_5 $$ final LibraryTable.ModifiableModel projectLibraryTable = modelsProvider.getLibraryTableModifiableModel(project)-->Line_24 $$ projectLibraryTable.commit()[ FD ]
Line_23 $$ if (!fromProjectStructure) -->Line_24 $$ projectLibraryTable.commit()[ CD ]
Line_14 $$ final Library projectLib = projectLibraryTable.createLibrary(lib.getName())-->Line_20 $$ projectLibs.put(lib, projectLib)[ FD ]
Line_3 $$ final boolean fromProjectStructure = model != null-->Line_23 $$ if (!fromProjectStructure) [ FD ]
Line_2 $$ public List<Module> commit(@NotNull final Project project, final ModifiableModuleModel model, final ModulesProvider modulesProvider) -->Line_4 $$ ModifiableModelsProvider modelsProvider = new IdeaModifiableModelsProvider()[ CD ]
Line_5 $$ final LibraryTable.ModifiableModel projectLibraryTable = modelsProvider.getLibraryTableModifiableModel(project)-->Line_14 $$ final Library projectLib = projectLibraryTable.createLibrary(lib.getName())[ FD ]
Line_64 $$ for (ProjectDescriptor data : getSelectedDescriptors()) -->Line_65 $$ for (final ModuleDescriptor descriptor : data.getModules()) [ FD ]
Line_39 $$ for (final ModuleDescriptor moduleDescriptor : descriptor.getModules()) -->Line_48 $$ descriptorToModuleMap.put(moduleDescriptor, module)[ FD ]
Line_40 $$ final Module module-->Line_45 $$ module = createModule(descriptor, moduleDescriptor, projectLibs, moduleModel)[ FD ]
Line_39 $$ for (final ModuleDescriptor moduleDescriptor : descriptor.getModules()) -->Line_45 $$ module = createModule(descriptor, moduleDescriptor, projectLibs, moduleModel)[ FD ]
Line_38 $$ for (ProjectDescriptor descriptor : getSelectedDescriptors()) -->Line_45 $$ module = createModule(descriptor, moduleDescriptor, projectLibs, moduleModel)[ FD ]
Line_38 $$ for (ProjectDescriptor descriptor : getSelectedDescriptors()) -->Line_39 $$ for (final ModuleDescriptor moduleDescriptor : descriptor.getModules()) [ FD ]
Line_33 $$ final Map<ModuleDescriptor, Module> descriptorToModuleMap = new HashMap<ModuleDescriptor, Module>()-->Line_48 $$ descriptorToModuleMap.put(moduleDescriptor, module)[ FD ]
Line_6 $$ final Map<LibraryDescriptor, Library> projectLibs = new HashMap<LibraryDescriptor, Library>()-->Line_45 $$ module = createModule(descriptor, moduleDescriptor, projectLibs, moduleModel)[ FD ]
Line_37 $$ final ModifiableModuleModel moduleModel = fromProjectStructure ? model : ModuleManager.getInstance(project).getModifiableModel()-->Line_52 $$ moduleModel.commit()[ FD ]
Line_38 $$ for (ProjectDescriptor descriptor : getSelectedDescriptors()) -->Line_66 $$ final Module module = descriptorToModuleMap.get(descriptor)[ FD ]
Line_40 $$ final Module module-->Line_43 $$ module = moduleLoader.createModule(moduleModel)[ FD ]
Line_37 $$ final ModifiableModuleModel moduleModel = fromProjectStructure ? model : ModuleManager.getInstance(project).getModifiableModel()-->Line_43 $$ module = moduleLoader.createModule(moduleModel)[ FD ]
Line_9 $$ AccessToken token = WriteAction.start()-->Line_98 $$ token.finish()[ FD ]
Line_6 $$ final Map<LibraryDescriptor, Library> projectLibs = new HashMap<LibraryDescriptor, Library>()-->Line_20 $$ projectLibs.put(lib, projectLib)[ FD ]
