Line_2 $$ private void checkShortCircuitRenewCancel(InetSocketAddress rmAddr, InetSocketAddress serviceAddr, boolean shouldShortCircuit) throws IOException, InterruptedException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_10 $$ if (shouldShortCircuit) -->Line_13 $$ reset(secretManager)[ CD ]
Line_8 $$ Token<RMDelegationTokenIdentifier> token = new Token<RMDelegationTokenIdentifier>(ident, secretManager)-->Line_25 $$ token.cancel(conf)[ FD ]
Line_2 $$ private void checkShortCircuitRenewCancel(InetSocketAddress rmAddr, InetSocketAddress serviceAddr, boolean shouldShortCircuit) throws IOException, InterruptedException -->Line_6 $$ RMDelegationTokenIdentifier.Renewer.setSecretManager(secretManager, rmAddr)[ CD ]
Line_2 $$ private void checkShortCircuitRenewCancel(InetSocketAddress rmAddr, InetSocketAddress serviceAddr, boolean shouldShortCircuit) throws IOException, InterruptedException -->Line_10 $$ if (shouldShortCircuit) [ CD ]
Line_2 $$ private void checkShortCircuitRenewCancel(InetSocketAddress rmAddr, InetSocketAddress serviceAddr, boolean shouldShortCircuit) throws IOException, InterruptedException -->Line_9 $$ SecurityUtil.setTokenService(token, serviceAddr)[ FD ]
Line_5 $$ RMDelegationTokenSecretManager secretManager = mock(RMDelegationTokenSecretManager.class)-->Line_13 $$ reset(secretManager)[ FD ]
Line_2 $$ private void checkShortCircuitRenewCancel(InetSocketAddress rmAddr, InetSocketAddress serviceAddr, boolean shouldShortCircuit) throws IOException, InterruptedException -->Line_6 $$ RMDelegationTokenIdentifier.Renewer.setSecretManager(secretManager, rmAddr)[ FD ]
Line_8 $$ Token<RMDelegationTokenIdentifier> token = new Token<RMDelegationTokenIdentifier>(ident, secretManager)-->Line_15 $$ verify(secretManager).cancelToken(eq(token), eq("renewer"))[ FD ]
Line_10 $$ if (shouldShortCircuit) -->Line_12 $$ verify(secretManager).renewToken(eq(token), eq("renewer"))[ CD ]
Line_8 $$ Token<RMDelegationTokenIdentifier> token = new Token<RMDelegationTokenIdentifier>(ident, secretManager)-->Line_12 $$ verify(secretManager).renewToken(eq(token), eq("renewer"))[ FD ]
Line_8 $$ Token<RMDelegationTokenIdentifier> token = new Token<RMDelegationTokenIdentifier>(ident, secretManager)-->Line_14 $$ token.cancel(conf)[ FD ]
Line_8 $$ Token<RMDelegationTokenIdentifier> token = new Token<RMDelegationTokenIdentifier>(ident, secretManager)-->Line_9 $$ SecurityUtil.setTokenService(token, serviceAddr)[ FD ]
Line_10 $$ if (shouldShortCircuit) -->Line_30 $$ verify(secretManager, never()).cancelToken(any(Token.class), anyString())[ CD ]
Line_5 $$ RMDelegationTokenSecretManager secretManager = mock(RMDelegationTokenSecretManager.class)-->Line_15 $$ verify(secretManager).cancelToken(eq(token), eq("renewer"))[ FD ]
Line_10 $$ if (shouldShortCircuit) -->Line_15 $$ verify(secretManager).cancelToken(eq(token), eq("renewer"))[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_18 $$ token.renew(conf)[ FD ]
Line_10 $$ if (shouldShortCircuit) -->Line_14 $$ token.cancel(conf)[ CD ]
Line_5 $$ RMDelegationTokenSecretManager secretManager = mock(RMDelegationTokenSecretManager.class)-->Line_30 $$ verify(secretManager, never()).cancelToken(any(Token.class), anyString())[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_11 $$ token.renew(conf)[ FD ]
Line_5 $$ RMDelegationTokenSecretManager secretManager = mock(RMDelegationTokenSecretManager.class)-->Line_6 $$ RMDelegationTokenIdentifier.Renewer.setSecretManager(secretManager, rmAddr)[ FD ]
Line_2 $$ private void checkShortCircuitRenewCancel(InetSocketAddress rmAddr, InetSocketAddress serviceAddr, boolean shouldShortCircuit) throws IOException, InterruptedException -->Line_7 $$ RMDelegationTokenIdentifier ident = new RMDelegationTokenIdentifier(new Text("owner"), new Text("renewer"), null)[ CD ]
Line_10 $$ if (shouldShortCircuit) -->Line_11 $$ token.renew(conf)[ CD ]
Line_2 $$ private void checkShortCircuitRenewCancel(InetSocketAddress rmAddr, InetSocketAddress serviceAddr, boolean shouldShortCircuit) throws IOException, InterruptedException -->Line_8 $$ Token<RMDelegationTokenIdentifier> token = new Token<RMDelegationTokenIdentifier>(ident, secretManager)[ CD ]
Line_10 $$ if (shouldShortCircuit) -->Line_23 $$ verify(secretManager, never()).renewToken(any(Token.class), anyString())[ CD ]
Line_2 $$ private void checkShortCircuitRenewCancel(InetSocketAddress rmAddr, InetSocketAddress serviceAddr, boolean shouldShortCircuit) throws IOException, InterruptedException -->Line_4 $$ conf.setClass(YarnConfiguration.IPC_RPC_IMPL, YarnBadRPC.class, YarnRPC.class)[ CD ]
Line_5 $$ RMDelegationTokenSecretManager secretManager = mock(RMDelegationTokenSecretManager.class)-->Line_23 $$ verify(secretManager, never()).renewToken(any(Token.class), anyString())[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_25 $$ token.cancel(conf)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_14 $$ token.cancel(conf)[ FD ]
Line_2 $$ private void checkShortCircuitRenewCancel(InetSocketAddress rmAddr, InetSocketAddress serviceAddr, boolean shouldShortCircuit) throws IOException, InterruptedException -->Line_5 $$ RMDelegationTokenSecretManager secretManager = mock(RMDelegationTokenSecretManager.class)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setClass(YarnConfiguration.IPC_RPC_IMPL, YarnBadRPC.class, YarnRPC.class)[ FD ]
Line_2 $$ private void checkShortCircuitRenewCancel(InetSocketAddress rmAddr, InetSocketAddress serviceAddr, boolean shouldShortCircuit) throws IOException, InterruptedException -->Line_9 $$ SecurityUtil.setTokenService(token, serviceAddr)[ CD ]
Line_8 $$ Token<RMDelegationTokenIdentifier> token = new Token<RMDelegationTokenIdentifier>(ident, secretManager)-->Line_11 $$ token.renew(conf)[ FD ]
Line_8 $$ Token<RMDelegationTokenIdentifier> token = new Token<RMDelegationTokenIdentifier>(ident, secretManager)-->Line_18 $$ token.renew(conf)[ FD ]
Line_5 $$ RMDelegationTokenSecretManager secretManager = mock(RMDelegationTokenSecretManager.class)-->Line_12 $$ verify(secretManager).renewToken(eq(token), eq("renewer"))[ FD ]
