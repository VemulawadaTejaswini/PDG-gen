Line_16 $$ MapContext<LongWritable, BytesWritable, LongWritable, BytesWritable> mcontext = new MapContextImpl<LongWritable, BytesWritable, LongWritable, BytesWritable>(job.getConfiguration(), context.getTaskAttemptID(), reader, null, null, MapReduceTestUtil.createDummyReporter(), split)-->Line_17 $$ reader.initialize(split, mcontext)[ FD ]
Line_2 $$ public void testZeroRecordLength() throws Exception -->Line_8 $$ format.setRecordLength(job.getConfiguration(), 0)[ CD ]
Line_2 $$ public void testZeroRecordLength() throws Exception -->Line_11 $$ boolean exceptionThrown = false[ CD ]
Line_6 $$ Job job = Job.getInstance(defaultConf)-->Line_14 $$ TaskAttemptContext context = MapReduceTestUtil.createDummyMapTaskAttemptContext(job.getConfiguration())[ FD ]
Line_11 $$ boolean exceptionThrown = false-->Line_19 $$ exceptionThrown = true[ FD ]
Line_4 $$ Path file = new Path(workDir, new String("testFormat.txt"))-->Line_5 $$ createFile(file, null, 10, 10)[ FD ]
Line_7 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_10 $$ List<InputSplit> splits = format.getSplits(job)[ FD ]
Line_6 $$ Job job = Job.getInstance(defaultConf)-->Line_8 $$ format.setRecordLength(job.getConfiguration(), 0)[ FD ]
Line_2 $$ public void testZeroRecordLength() throws Exception -->Line_4 $$ Path file = new Path(workDir, new String("testFormat.txt"))[ CD ]
Line_2 $$ public void testZeroRecordLength() throws Exception -->Line_10 $$ List<InputSplit> splits = format.getSplits(job)[ CD ]
Line_2 $$ public void testZeroRecordLength() throws Exception -->Line_23 $$ assertTrue("Exception for zero record length:", exceptionThrown)[ CD ]
Line_15 $$ RecordReader<LongWritable, BytesWritable> reader = format.createRecordReader(split, context)-->Line_17 $$ reader.initialize(split, mcontext)[ FD ]
Line_11 $$ boolean exceptionThrown = false-->Line_23 $$ assertTrue("Exception for zero record length:", exceptionThrown)[ FD ]
Line_12 $$ for (InputSplit split : splits) -->Line_15 $$ RecordReader<LongWritable, BytesWritable> reader = format.createRecordReader(split, context)[ FD ]
Line_2 $$ public void testZeroRecordLength() throws Exception -->Line_6 $$ Job job = Job.getInstance(defaultConf)[ CD ]
Line_2 $$ public void testZeroRecordLength() throws Exception -->Line_9 $$ FileInputFormat.setInputPaths(job, workDir)[ CD ]
Line_6 $$ Job job = Job.getInstance(defaultConf)-->Line_9 $$ FileInputFormat.setInputPaths(job, workDir)[ FD ]
Line_2 $$ public void testZeroRecordLength() throws Exception -->Line_7 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()[ CD ]
Line_14 $$ TaskAttemptContext context = MapReduceTestUtil.createDummyMapTaskAttemptContext(job.getConfiguration())-->Line_16 $$ MapContext<LongWritable, BytesWritable, LongWritable, BytesWritable> mcontext = new MapContextImpl<LongWritable, BytesWritable, LongWritable, BytesWritable>(job.getConfiguration(), context.getTaskAttemptID(), reader, null, null, MapReduceTestUtil.createDummyReporter(), split)[ FD ]
Line_12 $$ for (InputSplit split : splits) -->Line_17 $$ reader.initialize(split, mcontext)[ FD ]
Line_7 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_15 $$ RecordReader<LongWritable, BytesWritable> reader = format.createRecordReader(split, context)[ FD ]
Line_14 $$ TaskAttemptContext context = MapReduceTestUtil.createDummyMapTaskAttemptContext(job.getConfiguration())-->Line_15 $$ RecordReader<LongWritable, BytesWritable> reader = format.createRecordReader(split, context)[ FD ]
Line_2 $$ public void testZeroRecordLength() throws Exception -->Line_3 $$ localFs.delete(workDir, true)[ CD ]
Line_7 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_8 $$ format.setRecordLength(job.getConfiguration(), 0)[ FD ]
Line_6 $$ Job job = Job.getInstance(defaultConf)-->Line_10 $$ List<InputSplit> splits = format.getSplits(job)[ FD ]
Line_19 $$ exceptionThrown = true-->Line_23 $$ assertTrue("Exception for zero record length:", exceptionThrown)[ FD ]
Line_2 $$ public void testZeroRecordLength() throws Exception -->Line_5 $$ createFile(file, null, 10, 10)[ CD ]
Line_6 $$ Job job = Job.getInstance(defaultConf)-->Line_16 $$ MapContext<LongWritable, BytesWritable, LongWritable, BytesWritable> mcontext = new MapContextImpl<LongWritable, BytesWritable, LongWritable, BytesWritable>(job.getConfiguration(), context.getTaskAttemptID(), reader, null, null, MapReduceTestUtil.createDummyReporter(), split)[ FD ]
