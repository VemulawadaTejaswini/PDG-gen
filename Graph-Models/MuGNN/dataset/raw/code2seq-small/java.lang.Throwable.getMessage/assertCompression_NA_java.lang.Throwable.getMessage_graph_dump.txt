Line_3 $$ int off = 0-->Line_26 $$ off = 0[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_17 $$ compresSize = compressor.compress(operationBlock, 0, operationBlock.length)[ FD ]
Line_8 $$ ByteArrayOutputStream compressedOut = new ByteArrayOutputStream()-->Line_18 $$ compressedOut.write(operationBlock, 0, compresSize)[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_15 $$ compressor.finish()[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_37 $$ assertArrayEquals(joiner.join(name, "byte arrays not equals error !!!"), originalRawData, decompressOut.toByteArray())[ FD ]
Line_22 $$ off += bufLen-->Line_14 $$ compressor.setInput(originalRawData, off, bufLen)[ FD ]
Line_16 $$ while (!compressor.finished()) -->Line_18 $$ compressedOut.write(operationBlock, 0, compresSize)[ CD ]
Line_22 $$ off += bufLen-->Line_29 $$ decompressor.setInput(compressedBytes, off, step)[ FD ]
Line_4 $$ int len = originalRawData.length-->Line_23 $$ len -= bufLen[ FD ]
Line_4 $$ int len = originalRawData.length-->Line_12 $$ do [ FD ]
Line_11 $$ if (originalRawData.length > maxSize) -->Line_12 $$ do [ CD ]
Line_9 $$ ByteArrayOutputStream decompressOut = new ByteArrayOutputStream()-->Line_37 $$ assertArrayEquals(joiner.join(name, "byte arrays not equals error !!!"), originalRawData, decompressOut.toByteArray())[ FD ]
Line_12 $$ do -->Line_14 $$ compressor.setInput(originalRawData, off, bufLen)[ CD ]
Line_9 $$ ByteArrayOutputStream decompressOut = new ByteArrayOutputStream()-->Line_32 $$ decompressOut.write(operationBlock, 0, dSize)[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_14 $$ compressor.setInput(originalRawData, off, bufLen)[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_30 $$ while (!decompressor.finished()) [ FD ]
Line_8 $$ ByteArrayOutputStream compressedOut = new ByteArrayOutputStream()-->Line_42 $$ compressedOut.close()[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_9 $$ ByteArrayOutputStream decompressOut = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_3 $$ int off = 0[ CD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_29 $$ decompressor.setInput(compressedBytes, off, step)[ FD ]
Line_12 $$ do -->Line_15 $$ compressor.finish()[ CD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_34 $$ decompressor.reset()[ FD ]
Line_6 $$ int compresSize = 0-->Line_18 $$ compressedOut.write(operationBlock, 0, compresSize)[ FD ]
Line_3 $$ int off = 0-->Line_22 $$ off += bufLen[ FD ]
Line_30 $$ while (!decompressor.finished()) -->Line_32 $$ decompressOut.write(operationBlock, 0, dSize)[ CD ]
Line_5 $$ int maxSize = BLOCK_SIZE - overheadSpace-->Line_13 $$ int bufLen = Math.min(len, maxSize)[ FD ]
Line_26 $$ off = 0-->Line_29 $$ decompressor.setInput(compressedBytes, off, step)[ FD ]
Line_3 $$ int off = 0-->Line_35 $$ off = off + step[ FD ]
Line_7 $$ List<Integer> blockLabels = new ArrayList<Integer>()-->Line_19 $$ blockLabels.add(compresSize)[ FD ]
Line_30 $$ while (!decompressor.finished()) -->Line_31 $$ int dSize = decompressor.decompress(operationBlock, 0, operationBlock.length)[ CD ]
Line_27 $$ byte[] compressedBytes = compressedOut.toByteArray()-->Line_29 $$ decompressor.setInput(compressedBytes, off, step)[ FD ]
Line_12 $$ do -->Line_22 $$ off += bufLen[ CD ]
Line_6 $$ int compresSize = 0-->Line_19 $$ blockLabels.add(compresSize)[ FD ]
Line_17 $$ compresSize = compressor.compress(operationBlock, 0, operationBlock.length)-->Line_19 $$ blockLabels.add(compresSize)[ FD ]
Line_23 $$ len -= bufLen-->Line_13 $$ int bufLen = Math.min(len, maxSize)[ FD ]
Line_16 $$ while (!compressor.finished()) -->Line_17 $$ compresSize = compressor.compress(operationBlock, 0, operationBlock.length)[ CD ]
Line_16 $$ while (!compressor.finished()) -->Line_19 $$ blockLabels.add(compresSize)[ CD ]
Line_31 $$ int dSize = decompressor.decompress(operationBlock, 0, operationBlock.length)-->Line_32 $$ decompressOut.write(operationBlock, 0, dSize)[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_6 $$ int compresSize = 0[ CD ]
Line_13 $$ int bufLen = Math.min(len, maxSize)-->Line_22 $$ off += bufLen[ FD ]
Line_28 $$ for (Integer step : blockLabels) -->Line_35 $$ off = off + step[ FD ]
Line_26 $$ off = 0-->Line_35 $$ off = off + step[ FD ]
Line_12 $$ do -->Line_16 $$ while (!compressor.finished()) [ CD ]
Line_28 $$ for (Integer step : blockLabels) -->Line_29 $$ decompressor.setInput(compressedBytes, off, step)[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_21 $$ compressor.reset()[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_39 $$ fail(joiner.join(name, ex.getMessage()))[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_7 $$ List<Integer> blockLabels = new ArrayList<Integer>()[ CD ]
Line_9 $$ ByteArrayOutputStream decompressOut = new ByteArrayOutputStream()-->Line_46 $$ decompressOut.close()[ FD ]
Line_5 $$ int maxSize = BLOCK_SIZE - overheadSpace-->Line_11 $$ if (originalRawData.length > maxSize) [ FD ]
Line_12 $$ do -->Line_23 $$ len -= bufLen[ CD ]
Line_13 $$ int bufLen = Math.min(len, maxSize)-->Line_23 $$ len -= bufLen[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_5 $$ int maxSize = BLOCK_SIZE - overheadSpace[ CD ]
Line_3 $$ int off = 0-->Line_14 $$ compressor.setInput(originalRawData, off, bufLen)[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_31 $$ int dSize = decompressor.decompress(operationBlock, 0, operationBlock.length)[ FD ]
Line_22 $$ off += bufLen-->Line_26 $$ off = 0[ FD ]
Line_12 $$ do -->Line_13 $$ int bufLen = Math.min(len, maxSize)[ CD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_8 $$ ByteArrayOutputStream compressedOut = new ByteArrayOutputStream()[ CD ]
Line_3 $$ int off = 0-->Line_29 $$ decompressor.setInput(compressedBytes, off, step)[ FD ]
Line_12 $$ do -->Line_21 $$ compressor.reset()[ CD ]
Line_22 $$ off += bufLen-->Line_35 $$ off = off + step[ FD ]
Line_13 $$ int bufLen = Math.min(len, maxSize)-->Line_14 $$ compressor.setInput(originalRawData, off, bufLen)[ FD ]
Line_23 $$ len -= bufLen-->Line_12 $$ do [ FD ]
Line_8 $$ ByteArrayOutputStream compressedOut = new ByteArrayOutputStream()-->Line_27 $$ byte[] compressedBytes = compressedOut.toByteArray()[ FD ]
Line_4 $$ int len = originalRawData.length-->Line_13 $$ int bufLen = Math.min(len, maxSize)[ FD ]
Line_6 $$ int compresSize = 0-->Line_17 $$ compresSize = compressor.compress(operationBlock, 0, operationBlock.length)[ FD ]
Line_17 $$ compresSize = compressor.compress(operationBlock, 0, operationBlock.length)-->Line_18 $$ compressedOut.write(operationBlock, 0, compresSize)[ FD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_4 $$ int len = originalRawData.length[ CD ]
Line_2 $$ public void assertCompression(String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData) -->Line_16 $$ while (!compressor.finished()) [ FD ]
