Line_2 $$ public static Object[] buildValueArray(ParsedSql parsedSql, SqlParameterSource paramSource, List<SqlParameter> declaredParams) -->Line_18 $$ return paramArray[ CD ]
Line_7 $$ List<String> paramNames = parsedSql.getParameterNames()-->Line_8 $$ for (int i = 0; i < paramNames.size(); i++) [ FD ]
Line_2 $$ public static Object[] buildValueArray(ParsedSql parsedSql, SqlParameterSource paramSource, List<SqlParameter> declaredParams) -->Line_8 $$ for (int i = 0; i < paramNames.size(); i++) [ CD ]
Line_8 $$ for (int i = 0; i < paramNames.size(); i++) -->Line_9 $$ String paramName = paramNames.get(i)[ FD ]
Line_7 $$ List<String> paramNames = parsedSql.getParameterNames()-->Line_9 $$ String paramName = paramNames.get(i)[ FD ]
Line_9 $$ String paramName = paramNames.get(i)-->Line_12 $$ SqlParameter param = findParameter(declaredParams, paramName, i)[ FD ]
Line_2 $$ public static Object[] buildValueArray(ParsedSql parsedSql, SqlParameterSource paramSource, List<SqlParameter> declaredParams) -->Line_4 $$ if (parsedSql.getNamedParameterCount() > 0 && parsedSql.getUnnamedParameterCount() > 0) [ FD ]
Line_2 $$ public static Object[] buildValueArray(ParsedSql parsedSql, SqlParameterSource paramSource, List<SqlParameter> declaredParams) -->Line_7 $$ List<String> paramNames = parsedSql.getParameterNames()[ FD ]
Line_8 $$ for (int i = 0; i < paramNames.size(); i++) -->Line_9 $$ String paramName = paramNames.get(i)[ CD ]
Line_2 $$ public static Object[] buildValueArray(ParsedSql parsedSql, SqlParameterSource paramSource, List<SqlParameter> declaredParams) -->Line_4 $$ if (parsedSql.getNamedParameterCount() > 0 && parsedSql.getUnnamedParameterCount() > 0) [ CD ]
Line_2 $$ public static Object[] buildValueArray(ParsedSql parsedSql, SqlParameterSource paramSource, List<SqlParameter> declaredParams) -->Line_3 $$ Object[] paramArray = new Object[parsedSql.getTotalParameterCount()][ FD ]
Line_9 $$ String paramName = paramNames.get(i)-->Line_11 $$ Object value = paramSource.getValue(paramName)[ FD ]
Line_8 $$ for (int i = 0; i < paramNames.size(); i++) -->Line_12 $$ SqlParameter param = findParameter(declaredParams, paramName, i)[ FD ]
Line_2 $$ public static Object[] buildValueArray(ParsedSql parsedSql, SqlParameterSource paramSource, List<SqlParameter> declaredParams) -->Line_7 $$ List<String> paramNames = parsedSql.getParameterNames()[ CD ]
Line_2 $$ public static Object[] buildValueArray(ParsedSql parsedSql, SqlParameterSource paramSource, List<SqlParameter> declaredParams) -->Line_3 $$ Object[] paramArray = new Object[parsedSql.getTotalParameterCount()][ CD ]
Line_2 $$ public static Object[] buildValueArray(ParsedSql parsedSql, SqlParameterSource paramSource, List<SqlParameter> declaredParams) -->Line_5 $$ throw new InvalidDataAccessApiUsageException("Not allowed to mix named and traditional ? placeholders. You have " + parsedSql.getNamedParameterCount() + " named parameter(s) and " + parsedSql.getUnnamedParameterCount() + " traditional placeholder(s) in statement: " + parsedSql.getOriginalSql())[ FD ]
Line_2 $$ public static Object[] buildValueArray(ParsedSql parsedSql, SqlParameterSource paramSource, List<SqlParameter> declaredParams) -->Line_12 $$ SqlParameter param = findParameter(declaredParams, paramName, i)[ FD ]
Line_2 $$ public static Object[] buildValueArray(ParsedSql parsedSql, SqlParameterSource paramSource, List<SqlParameter> declaredParams) -->Line_11 $$ Object value = paramSource.getValue(paramName)[ FD ]
