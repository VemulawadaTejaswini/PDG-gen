Line_7 $$ for (ScriptContext context : ScriptContext.Standard.values()) -->Line_10 $$ fail(context.getKey() + " script should have been rejected")[ FD ]
Line_6 $$ Script script = new Script("script1", ScriptService.ScriptType.FILE, MockScriptEngine.NAME, null)-->Line_9 $$ scriptService.compile(script, context, contextAndHeaders, Collections.emptyMap())[ FD ]
Line_7 $$ for (ScriptContext context : ScriptContext.Standard.values()) -->Line_12 $$ assertTrue(e.getMessage(), e.getMessage().contains("scripts of type [file], operation [" + context.getKey() + "] and lang [" + MockScriptEngine.NAME + "] are disabled"))[ FD ]
Line_2 $$ public void testAllOpsDisabled() throws Exception -->Line_4 $$ Settings settings = Settings.builder().put("script.engine." + MockScriptEngine.NAME + ".file.aggs", false).put("script.engine." + MockScriptEngine.NAME + ".file.search", false).put("script.engine." + MockScriptEngine.NAME + ".file.mapping", false).put("script.engine." + MockScriptEngine.NAME + ".file.update", false).build()[ CD ]
Line_2 $$ public void testAllOpsDisabled() throws Exception -->Line_5 $$ ScriptService scriptService = makeScriptService(settings)[ CD ]
Line_2 $$ public void testAllOpsDisabled() throws Exception -->Line_3 $$ ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder()[ CD ]
Line_5 $$ ScriptService scriptService = makeScriptService(settings)-->Line_9 $$ scriptService.compile(script, context, contextAndHeaders, Collections.emptyMap())[ FD ]
Line_7 $$ for (ScriptContext context : ScriptContext.Standard.values()) -->Line_9 $$ scriptService.compile(script, context, contextAndHeaders, Collections.emptyMap())[ FD ]
Line_3 $$ ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder()-->Line_9 $$ scriptService.compile(script, context, contextAndHeaders, Collections.emptyMap())[ FD ]
Line_2 $$ public void testAllOpsDisabled() throws Exception -->Line_6 $$ Script script = new Script("script1", ScriptService.ScriptType.FILE, MockScriptEngine.NAME, null)[ CD ]
Line_4 $$ Settings settings = Settings.builder().put("script.engine." + MockScriptEngine.NAME + ".file.aggs", false).put("script.engine." + MockScriptEngine.NAME + ".file.search", false).put("script.engine." + MockScriptEngine.NAME + ".file.mapping", false).put("script.engine." + MockScriptEngine.NAME + ".file.update", false).build()-->Line_5 $$ ScriptService scriptService = makeScriptService(settings)[ FD ]
