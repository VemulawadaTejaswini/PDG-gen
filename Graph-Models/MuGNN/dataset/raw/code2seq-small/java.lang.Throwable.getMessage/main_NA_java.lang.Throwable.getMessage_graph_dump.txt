Line_20 $$ protocol = line.getOptionValue("protocol")-->Line_61 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_49 $$ ModelNode result = response.get(ClientConstants.RESULT)-->Line_52 $$ String reportLocation = result.get("report-location").asString()[ FD ]
Line_9 $$ if (line.hasOption("help")) -->Line_10 $$ formatter.printHelp(usage, options)[ CD ]
Line_8 $$ CommandLine line = parser.parse(options, args, false)-->Line_17 $$ port = Integer.parseInt(line.getOptionValue("port"))[ FD ]
Line_46 $$ ModelNode response = cmdResult.getResponse()-->Line_49 $$ ModelNode result = response.get(ClientConstants.RESULT)[ FD ]
Line_46 $$ ModelNode response = cmdResult.getResponse()-->Line_47 $$ if (Operations.isSuccessfulOutcome(response) || !embedded) [ FD ]
Line_35 $$ CLI cli = CLI.newInstance()-->Line_61 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_46 $$ ModelNode response = cmdResult.getResponse()-->Line_48 $$ reportFailure(response)[ FD ]
Line_23 $$ config = line.getOptionValue("config")-->Line_40 $$ String startEmbeddedServer = "embed-server" + ((config != null && !config.isEmpty()) ? (" --server-config=" + config) : "")[ FD ]
Line_16 $$ if (line.hasOption("port")) -->Line_17 $$ port = Integer.parseInt(line.getOptionValue("port"))[ CD ]
Line_40 $$ String startEmbeddedServer = "embed-server" + ((config != null && !config.isEmpty()) ? (" --server-config=" + config) : "")-->Line_41 $$ cli.getCommandContext().handleSafe(startEmbeddedServer)[ FD ]
Line_45 $$ Result cmdResult = cli.cmd("/subsystem=jdr:generate-jdr-report()")-->Line_46 $$ ModelNode response = cmdResult.getResponse()[ FD ]
Line_47 $$ if (Operations.isSuccessfulOutcome(response) || !embedded) -->Line_49 $$ ModelNode result = response.get(ClientConstants.RESULT)[ CD ]
Line_3 $$ int port = 9990-->Line_61 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_17 $$ port = Integer.parseInt(line.getOptionValue("port"))-->Line_38 $$ cli.connect(protocol, host, port, null, null)[ FD ]
Line_5 $$ String protocol = "http-remoting"-->Line_61 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_14 $$ host = line.getOptionValue("host")-->Line_38 $$ cli.connect(protocol, host, port, null, null)[ FD ]
Line_47 $$ if (Operations.isSuccessfulOutcome(response) || !embedded) -->Line_51 $$ String endTime = result.get("end-time").asString()[ CD ]
Line_17 $$ port = Integer.parseInt(line.getOptionValue("port"))-->Line_61 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_14 $$ host = line.getOptionValue("host")-->Line_61 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ String protocol = "http-remoting"[ CD ]
Line_8 $$ CommandLine line = parser.parse(options, args, false)-->Line_20 $$ protocol = line.getOptionValue("protocol")[ FD ]
Line_36 $$ boolean embedded = false-->Line_42 $$ embedded = true[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ CommandLine line = parser.parse(options, args, false)[ FD ]
Line_49 $$ ModelNode result = response.get(ClientConstants.RESULT)-->Line_51 $$ String endTime = result.get("end-time").asString()[ FD ]
Line_4 $$ String host = "localhost"-->Line_38 $$ cli.connect(protocol, host, port, null, null)[ FD ]
Line_3 $$ int port = 9990-->Line_57 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_6 $$ String config = null-->Line_40 $$ String startEmbeddedServer = "embed-server" + ((config != null && !config.isEmpty()) ? (" --server-config=" + config) : "")[ FD ]
Line_8 $$ CommandLine line = parser.parse(options, args, false)-->Line_23 $$ config = line.getOptionValue("config")[ FD ]
Line_3 $$ int port = 9990-->Line_38 $$ cli.connect(protocol, host, port, null, null)[ FD ]
Line_8 $$ CommandLine line = parser.parse(options, args, false)-->Line_22 $$ if (line.hasOption("config")) [ FD ]
Line_35 $$ CLI cli = CLI.newInstance()-->Line_38 $$ cli.connect(protocol, host, port, null, null)[ FD ]
Line_3 $$ int port = 9990-->Line_17 $$ port = Integer.parseInt(line.getOptionValue("port"))[ FD ]
Line_47 $$ if (Operations.isSuccessfulOutcome(response) || !embedded) -->Line_54 $$ System.out.println("JDR ended: " + endTime)[ CD ]
Line_5 $$ String protocol = "http-remoting"-->Line_57 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_47 $$ if (Operations.isSuccessfulOutcome(response) || !embedded) -->Line_50 $$ String startTime = result.get("start-time").asString()[ CD ]
Line_19 $$ if (line.hasOption("protocol")) -->Line_20 $$ protocol = line.getOptionValue("protocol")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ String host = "localhost"[ CD ]
Line_5 $$ String protocol = "http-remoting"-->Line_20 $$ protocol = line.getOptionValue("protocol")[ FD ]
Line_47 $$ if (Operations.isSuccessfulOutcome(response) || !embedded) -->Line_55 $$ System.out.println("JDR location: " + reportLocation)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_34 $$ System.out.println("Initializing JBoss Diagnostic Reporter...")[ CD ]
Line_35 $$ CLI cli = CLI.newInstance()-->Line_57 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_42 $$ embedded = true-->Line_47 $$ if (Operations.isSuccessfulOutcome(response) || !embedded) [ FD ]
Line_49 $$ ModelNode result = response.get(ClientConstants.RESULT)-->Line_50 $$ String startTime = result.get("start-time").asString()[ FD ]
Line_35 $$ CLI cli = CLI.newInstance()-->Line_63 $$ if (cli != null) [ FD ]
Line_2 $$ public static void main(String[] args) -->Line_35 $$ CLI cli = CLI.newInstance()[ CD ]
Line_8 $$ CommandLine line = parser.parse(options, args, false)-->Line_9 $$ if (line.hasOption("help")) [ FD ]
Line_47 $$ if (Operations.isSuccessfulOutcome(response) || !embedded) -->Line_57 $$ standaloneCollect(cli, protocol, host, port)[ CD ]
Line_4 $$ String host = "localhost"-->Line_14 $$ host = line.getOptionValue("host")[ FD ]
Line_20 $$ protocol = line.getOptionValue("protocol")-->Line_38 $$ cli.connect(protocol, host, port, null, null)[ FD ]
Line_47 $$ if (Operations.isSuccessfulOutcome(response) || !embedded) -->Line_53 $$ System.out.println("JDR started: " + startTime)[ CD ]
Line_22 $$ if (line.hasOption("config")) -->Line_23 $$ config = line.getOptionValue("config")[ CD ]
Line_8 $$ CommandLine line = parser.parse(options, args, false)-->Line_13 $$ if (line.hasOption("host")) [ FD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ int port = 9990[ CD ]
Line_8 $$ CommandLine line = parser.parse(options, args, false)-->Line_16 $$ if (line.hasOption("port")) [ FD ]
Line_8 $$ CommandLine line = parser.parse(options, args, false)-->Line_14 $$ host = line.getOptionValue("host")[ FD ]
Line_8 $$ CommandLine line = parser.parse(options, args, false)-->Line_19 $$ if (line.hasOption("protocol")) [ FD ]
Line_35 $$ CLI cli = CLI.newInstance()-->Line_41 $$ cli.getCommandContext().handleSafe(startEmbeddedServer)[ FD ]
Line_14 $$ host = line.getOptionValue("host")-->Line_57 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_36 $$ boolean embedded = false[ CD ]
Line_36 $$ boolean embedded = false-->Line_47 $$ if (Operations.isSuccessfulOutcome(response) || !embedded) [ FD ]
Line_13 $$ if (line.hasOption("host")) -->Line_14 $$ host = line.getOptionValue("host")[ CD ]
Line_47 $$ if (Operations.isSuccessfulOutcome(response) || !embedded) -->Line_48 $$ reportFailure(response)[ CD ]
Line_35 $$ CLI cli = CLI.newInstance()-->Line_65 $$ cli.disconnect()[ FD ]
Line_5 $$ String protocol = "http-remoting"-->Line_38 $$ cli.connect(protocol, host, port, null, null)[ FD ]
Line_47 $$ if (Operations.isSuccessfulOutcome(response) || !embedded) -->Line_52 $$ String reportLocation = result.get("report-location").asString()[ CD ]
Line_6 $$ String config = null-->Line_23 $$ config = line.getOptionValue("config")[ FD ]
Line_20 $$ protocol = line.getOptionValue("protocol")-->Line_57 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_17 $$ port = Integer.parseInt(line.getOptionValue("port"))-->Line_57 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_9 $$ if (line.hasOption("help")) -->Line_11 $$ return[ CD ]
Line_4 $$ String host = "localhost"-->Line_57 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_4 $$ String host = "localhost"-->Line_61 $$ standaloneCollect(cli, protocol, host, port)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ String config = null[ CD ]
Line_35 $$ CLI cli = CLI.newInstance()-->Line_45 $$ Result cmdResult = cli.cmd("/subsystem=jdr:generate-jdr-report()")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_71 $$ System.exit(0)[ CD ]
