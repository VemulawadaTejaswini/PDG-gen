Line_2 $$ private static void assertExceptionOccurred(boolean shouldOccur, AbstractExceptionCase exceptionCase, String expectedErrorMsg) throws Throwable -->Line_9 $$ final String errorMessage = exceptionCase.getAssertionErrorMessage()[ FD ]
Line_8 $$ wasThrown = true-->Line_23 $$ if (shouldOccur && !wasThrown) [ FD ]
Line_7 $$ if (shouldOccur) -->Line_10 $$ assertEquals(errorMessage, exceptionCase.getExpectedExceptionClass(), e.getClass())[ CD ]
Line_3 $$ boolean wasThrown = false-->Line_8 $$ wasThrown = true[ FD ]
Line_2 $$ private static void assertExceptionOccurred(boolean shouldOccur, AbstractExceptionCase exceptionCase, String expectedErrorMsg) throws Throwable -->Line_11 $$ if (expectedErrorMsg != null) [ FD ]
Line_15 $$ wasThrown = true-->Line_23 $$ if (shouldOccur && !wasThrown) [ FD ]
Line_3 $$ boolean wasThrown = false-->Line_23 $$ if (shouldOccur && !wasThrown) [ FD ]
Line_14 $$ if (exceptionCase.getExpectedExceptionClass().equals(e.getClass())) -->Line_17 $$ e.printStackTrace(System.out)[ CD ]
Line_2 $$ private static void assertExceptionOccurred(boolean shouldOccur, AbstractExceptionCase exceptionCase, String expectedErrorMsg) throws Throwable -->Line_24 $$ fail(exceptionCase.getAssertionErrorMessage())[ FD ]
Line_14 $$ if (exceptionCase.getExpectedExceptionClass().equals(e.getClass())) -->Line_16 $$ System.out.println("")[ CD ]
Line_7 $$ if (shouldOccur) -->Line_11 $$ if (expectedErrorMsg != null) [ CD ]
Line_7 $$ if (shouldOccur) -->Line_9 $$ final String errorMessage = exceptionCase.getAssertionErrorMessage()[ CD ]
Line_14 $$ if (exceptionCase.getExpectedExceptionClass().equals(e.getClass())) -->Line_18 $$ fail("Exception isn't expected here. Exception message: " + e.getMessage())[ CD ]
Line_3 $$ boolean wasThrown = false-->Line_15 $$ wasThrown = true[ FD ]
Line_11 $$ if (expectedErrorMsg != null) -->Line_12 $$ assertEquals("Compare error messages", expectedErrorMsg, e.getMessage())[ CD ]
Line_2 $$ private static void assertExceptionOccurred(boolean shouldOccur, AbstractExceptionCase exceptionCase, String expectedErrorMsg) throws Throwable -->Line_23 $$ if (shouldOccur && !wasThrown) [ FD ]
Line_8 $$ wasThrown = true-->Line_15 $$ wasThrown = true[ FD ]
Line_2 $$ private static void assertExceptionOccurred(boolean shouldOccur, AbstractExceptionCase exceptionCase, String expectedErrorMsg) throws Throwable -->Line_12 $$ assertEquals("Compare error messages", expectedErrorMsg, e.getMessage())[ FD ]
Line_7 $$ if (shouldOccur) -->Line_14 $$ if (exceptionCase.getExpectedExceptionClass().equals(e.getClass())) [ CD ]
Line_14 $$ if (exceptionCase.getExpectedExceptionClass().equals(e.getClass())) -->Line_15 $$ wasThrown = true[ CD ]
Line_2 $$ private static void assertExceptionOccurred(boolean shouldOccur, AbstractExceptionCase exceptionCase, String expectedErrorMsg) throws Throwable -->Line_5 $$ exceptionCase.tryClosure()[ FD ]
Line_2 $$ private static void assertExceptionOccurred(boolean shouldOccur, AbstractExceptionCase exceptionCase, String expectedErrorMsg) throws Throwable -->Line_3 $$ boolean wasThrown = false[ CD ]
Line_9 $$ final String errorMessage = exceptionCase.getAssertionErrorMessage()-->Line_10 $$ assertEquals(errorMessage, exceptionCase.getExpectedExceptionClass(), e.getClass())[ FD ]
Line_2 $$ private static void assertExceptionOccurred(boolean shouldOccur, AbstractExceptionCase exceptionCase, String expectedErrorMsg) throws Throwable -->Line_14 $$ if (exceptionCase.getExpectedExceptionClass().equals(e.getClass())) [ FD ]
Line_2 $$ private static void assertExceptionOccurred(boolean shouldOccur, AbstractExceptionCase exceptionCase, String expectedErrorMsg) throws Throwable -->Line_10 $$ assertEquals(errorMessage, exceptionCase.getExpectedExceptionClass(), e.getClass())[ FD ]
Line_23 $$ if (shouldOccur && !wasThrown) -->Line_24 $$ fail(exceptionCase.getAssertionErrorMessage())[ CD ]
Line_7 $$ if (shouldOccur) -->Line_8 $$ wasThrown = true[ CD ]
