Line_3 $$ final ShareDialog shareDialog = new ShareDialog(project, file.getName())-->Line_9 $$ final ShareDialog.ShareTarget shareTarget = shareDialog.getShareTarget()[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_12 $$ final boolean folderEmpty = checkRemoteFolder(project, activeVcs, parent, progressManager)[ FD ]
Line_13 $$ if (!folderEmpty) -->Line_15 $$ if (Messages.YES != promptAnswer)[ CD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_57 $$ final ClientFactory factory = SvnCheckoutProvider.getFactory(activeVcs, format)[ FD ]
Line_53 $$ if (indicator != null) -->Line_55 $$ indicator.setText(SvnBundle.message("share.directory.checkout.back.progress.text", checkoutUrl.toString()))[ CD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_19 $$ final WorkingCopyFormat format = SvnCheckoutProvider.promptForWCopyFormat(VfsUtilCore.virtualToIoFile(file), project)[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_3 $$ final ShareDialog shareDialog = new ShareDialog(project, file.getName())[ CD ]
Line_33 $$ final SVNURL checkoutUrl-->Line_42 $$ checkoutUrl = pair.getSecond()[ FD ]
Line_29 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_54 $$ indicator.checkCanceled()[ FD ]
Line_72 $$ if (Boolean.TRUE.equals(actionStarted.get())) -->Line_76 $$ Messages.showInfoMessage(project, SvnBundle.message("share.directory.info.message", file.getName()), SvnBundle.message("share.directory.title"))[ CD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_5 $$ final String parent = shareDialog.getSelectedURL()[ CD ]
Line_42 $$ checkoutUrl = pair.getSecond()-->Line_58 $$ factory.createCheckoutClient().checkout(SvnTarget.fromURL(checkoutUrl), path, revision, Depth.INFINITY, false, false, format, null)[ FD ]
Line_42 $$ checkoutUrl = pair.getSecond()-->Line_46 $$ checkoutUrl = trunkPair.getSecond()[ FD ]
Line_39 $$ if (ShareDialog.ShareTarget.useProjectName.equals(shareTarget)) -->Line_47 $$ revision = trunkPair.getFirst()[ CD ]
Line_47 $$ revision = trunkPair.getFirst()-->Line_58 $$ factory.createCheckoutClient().checkout(SvnTarget.fromURL(checkoutUrl), path, revision, Depth.INFINITY, false, false, format, null)[ FD ]
Line_5 $$ final String parent = shareDialog.getSelectedURL()-->Line_32 $$ final SVNURL parenUrl = SVNURL.parseURIEncoded(parent)[ FD ]
Line_36 $$ if (ShareDialog.ShareTarget.useSelected.equals(shareTarget)) -->Line_39 $$ if (ShareDialog.ShareTarget.useProjectName.equals(shareTarget)) [ CD ]
Line_21 $$ if (format == WorkingCopyFormat.UNKNOWN) -->Line_22 $$ return true[ CD ]
Line_48 $$ if (shareDialog.createStandardStructure()) -->Line_49 $$ createRemoteFolder(activeVcs, pair.getSecond(), "branches", commitText)[ CD ]
Line_38 $$ revision = SVNRevision.HEAD-->Line_58 $$ factory.createCheckoutClient().checkout(SvnTarget.fromURL(checkoutUrl), path, revision, Depth.INFINITY, false, false, format, null)[ FD ]
Line_37 $$ checkoutUrl = parenUrl-->Line_58 $$ factory.createCheckoutClient().checkout(SvnTarget.fromURL(checkoutUrl), path, revision, Depth.INFINITY, false, false, format, null)[ FD ]
Line_40 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)-->Line_50 $$ createRemoteFolder(activeVcs, pair.getSecond(), "tags", commitText)[ FD ]
Line_32 $$ final SVNURL parenUrl = SVNURL.parseURIEncoded(parent)-->Line_40 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)[ FD ]
Line_29 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_53 $$ if (indicator != null) [ FD ]
Line_36 $$ if (ShareDialog.ShareTarget.useSelected.equals(shareTarget)) -->Line_38 $$ revision = SVNRevision.HEAD[ CD ]
Line_35 $$ final String commitText = shareDialog.getCommitText()-->Line_40 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)[ FD ]
Line_32 $$ final SVNURL parenUrl = SVNURL.parseURIEncoded(parent)-->Line_44 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)[ FD ]
Line_34 $$ final SVNRevision revision-->Line_58 $$ factory.createCheckoutClient().checkout(SvnTarget.fromURL(checkoutUrl), path, revision, Depth.INFINITY, false, false, format, null)[ FD ]
Line_11 $$ if (ShareDialog.ShareTarget.useSelected.equals(shareTarget)) -->Line_13 $$ if (!folderEmpty) [ CD ]
Line_38 $$ revision = SVNRevision.HEAD-->Line_41 $$ revision = pair.getFirst()[ FD ]
Line_39 $$ if (ShareDialog.ShareTarget.useProjectName.equals(shareTarget)) -->Line_44 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)[ CD ]
Line_7 $$ final Ref<Boolean> actionStarted = new Ref<Boolean>(Boolean.TRUE)-->Line_72 $$ if (Boolean.TRUE.equals(actionStarted.get())) [ FD ]
Line_10 $$ final ProgressManager progressManager = ProgressManager.getInstance()-->Line_26 $$ progressManager.runProcessWithProgressSynchronously(new Runnable() [ FD ]
Line_40 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)-->Line_45 $$ final Pair<SVNRevision, SVNURL> trunkPair = createRemoteFolder(activeVcs, pair.getSecond(), "trunk", commitText)[ FD ]
Line_34 $$ final SVNRevision revision-->Line_47 $$ revision = trunkPair.getFirst()[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_76 $$ Messages.showInfoMessage(project, SvnBundle.message("share.directory.info.message", file.getName()), SvnBundle.message("share.directory.title"))[ FD ]
Line_6 $$ if (shareDialog.isOK() && parent != null) -->Line_78 $$ return true[ CD ]
Line_6 $$ if (shareDialog.isOK() && parent != null) -->Line_9 $$ final ShareDialog.ShareTarget shareTarget = shareDialog.getShareTarget()[ CD ]
Line_3 $$ final ShareDialog shareDialog = new ShareDialog(project, file.getName())-->Line_5 $$ final String parent = shareDialog.getSelectedURL()[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_40 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)[ FD ]
Line_11 $$ if (ShareDialog.ShareTarget.useSelected.equals(shareTarget)) -->Line_12 $$ final boolean folderEmpty = checkRemoteFolder(project, activeVcs, parent, progressManager)[ CD ]
Line_45 $$ final Pair<SVNRevision, SVNURL> trunkPair = createRemoteFolder(activeVcs, pair.getSecond(), "trunk", commitText)-->Line_47 $$ revision = trunkPair.getFirst()[ FD ]
Line_19 $$ final WorkingCopyFormat format = SvnCheckoutProvider.promptForWCopyFormat(VfsUtilCore.virtualToIoFile(file), project)-->Line_31 $$ SvnWorkingCopyFormatHolder.setPresetFormat(format)[ FD ]
Line_3 $$ final ShareDialog shareDialog = new ShareDialog(project, file.getName())-->Line_4 $$ shareDialog.show()[ FD ]
Line_7 $$ final Ref<Boolean> actionStarted = new Ref<Boolean>(Boolean.TRUE)-->Line_20 $$ actionStarted.set(format != WorkingCopyFormat.UNKNOWN)[ FD ]
Line_30 $$ final File path = new File(file.getPath())-->Line_58 $$ factory.createCheckoutClient().checkout(SvnTarget.fromURL(checkoutUrl), path, revision, Depth.INFINITY, false, false, format, null)[ FD ]
Line_39 $$ if (ShareDialog.ShareTarget.useProjectName.equals(shareTarget)) -->Line_48 $$ if (shareDialog.createStandardStructure()) [ CD ]
Line_57 $$ final ClientFactory factory = SvnCheckoutProvider.getFactory(activeVcs, format)-->Line_58 $$ factory.createCheckoutClient().checkout(SvnTarget.fromURL(checkoutUrl), path, revision, Depth.INFINITY, false, false, format, null)[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_6 $$ if (shareDialog.isOK() && parent != null) [ CD ]
Line_33 $$ final SVNURL checkoutUrl-->Line_58 $$ factory.createCheckoutClient().checkout(SvnTarget.fromURL(checkoutUrl), path, revision, Depth.INFINITY, false, false, format, null)[ FD ]
Line_42 $$ checkoutUrl = pair.getSecond()-->Line_55 $$ indicator.setText(SvnBundle.message("share.directory.checkout.back.progress.text", checkoutUrl.toString()))[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_30 $$ final File path = new File(file.getPath())[ FD ]
Line_6 $$ if (shareDialog.isOK() && parent != null) -->Line_24 $$ ExclusiveBackgroundVcsAction.run(project, new Runnable() [ CD ]
Line_35 $$ final String commitText = shareDialog.getCommitText()-->Line_45 $$ final Pair<SVNRevision, SVNURL> trunkPair = createRemoteFolder(activeVcs, pair.getSecond(), "trunk", commitText)[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_14 $$ final int promptAnswer = Messages.showYesNoDialog(project, "Remote folder \"" + parent + "\" is not empty.\nDo you want to continue sharing?", "Share directory", Messages.getWarningIcon())[ FD ]
Line_3 $$ final ShareDialog shareDialog = new ShareDialog(project, file.getName())-->Line_48 $$ if (shareDialog.createStandardStructure()) [ FD ]
Line_40 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)-->Line_49 $$ createRemoteFolder(activeVcs, pair.getSecond(), "branches", commitText)[ FD ]
Line_37 $$ checkoutUrl = parenUrl-->Line_46 $$ checkoutUrl = trunkPair.getSecond()[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_65 $$ activeVcs.invokeRefreshSvnRoots()[ FD ]
Line_9 $$ final ShareDialog.ShareTarget shareTarget = shareDialog.getShareTarget()-->Line_11 $$ if (ShareDialog.ShareTarget.useSelected.equals(shareTarget)) [ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_26 $$ progressManager.runProcessWithProgressSynchronously(new Runnable() [ FD ]
Line_40 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)-->Line_42 $$ checkoutUrl = pair.getSecond()[ FD ]
Line_46 $$ checkoutUrl = trunkPair.getSecond()-->Line_55 $$ indicator.setText(SvnBundle.message("share.directory.checkout.back.progress.text", checkoutUrl.toString()))[ FD ]
Line_19 $$ final WorkingCopyFormat format = SvnCheckoutProvider.promptForWCopyFormat(VfsUtilCore.virtualToIoFile(file), project)-->Line_57 $$ final ClientFactory factory = SvnCheckoutProvider.getFactory(activeVcs, format)[ FD ]
Line_33 $$ final SVNURL checkoutUrl-->Line_46 $$ checkoutUrl = trunkPair.getSecond()[ FD ]
Line_3 $$ final ShareDialog shareDialog = new ShareDialog(project, file.getName())-->Line_6 $$ if (shareDialog.isOK() && parent != null) [ FD ]
Line_6 $$ if (shareDialog.isOK() && parent != null) -->Line_21 $$ if (format == WorkingCopyFormat.UNKNOWN) [ CD ]
Line_39 $$ if (ShareDialog.ShareTarget.useProjectName.equals(shareTarget)) -->Line_40 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)[ CD ]
Line_38 $$ revision = SVNRevision.HEAD-->Line_47 $$ revision = trunkPair.getFirst()[ FD ]
Line_39 $$ if (ShareDialog.ShareTarget.useProjectName.equals(shareTarget)) -->Line_45 $$ final Pair<SVNRevision, SVNURL> trunkPair = createRemoteFolder(activeVcs, pair.getSecond(), "trunk", commitText)[ CD ]
Line_6 $$ if (shareDialog.isOK() && parent != null) -->Line_8 $$ final Exception[] error = new Exception[1][ CD ]
Line_19 $$ final WorkingCopyFormat format = SvnCheckoutProvider.promptForWCopyFormat(VfsUtilCore.virtualToIoFile(file), project)-->Line_21 $$ if (format == WorkingCopyFormat.UNKNOWN) [ FD ]
Line_6 $$ if (shareDialog.isOK() && parent != null) -->Line_11 $$ if (ShareDialog.ShareTarget.useSelected.equals(shareTarget)) [ CD ]
Line_3 $$ final ShareDialog shareDialog = new ShareDialog(project, file.getName())-->Line_35 $$ final String commitText = shareDialog.getCommitText()[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_4 $$ shareDialog.show()[ CD ]
Line_34 $$ final SVNRevision revision-->Line_38 $$ revision = SVNRevision.HEAD[ FD ]
Line_6 $$ if (shareDialog.isOK() && parent != null) -->Line_10 $$ final ProgressManager progressManager = ProgressManager.getInstance()[ CD ]
Line_33 $$ final SVNURL checkoutUrl-->Line_55 $$ indicator.setText(SvnBundle.message("share.directory.checkout.back.progress.text", checkoutUrl.toString()))[ FD ]
Line_6 $$ if (shareDialog.isOK() && parent != null) -->Line_19 $$ final WorkingCopyFormat format = SvnCheckoutProvider.promptForWCopyFormat(VfsUtilCore.virtualToIoFile(file), project)[ CD ]
Line_36 $$ if (ShareDialog.ShareTarget.useSelected.equals(shareTarget)) -->Line_37 $$ checkoutUrl = parenUrl[ CD ]
Line_35 $$ final String commitText = shareDialog.getCommitText()-->Line_49 $$ createRemoteFolder(activeVcs, pair.getSecond(), "branches", commitText)[ FD ]
Line_9 $$ final ShareDialog.ShareTarget shareTarget = shareDialog.getShareTarget()-->Line_39 $$ if (ShareDialog.ShareTarget.useProjectName.equals(shareTarget)) [ FD ]
Line_19 $$ final WorkingCopyFormat format = SvnCheckoutProvider.promptForWCopyFormat(VfsUtilCore.virtualToIoFile(file), project)-->Line_58 $$ factory.createCheckoutClient().checkout(SvnTarget.fromURL(checkoutUrl), path, revision, Depth.INFINITY, false, false, format, null)[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_80 $$ return false[ CD ]
Line_48 $$ if (shareDialog.createStandardStructure()) -->Line_50 $$ createRemoteFolder(activeVcs, pair.getSecond(), "tags", commitText)[ CD ]
Line_37 $$ checkoutUrl = parenUrl-->Line_42 $$ checkoutUrl = pair.getSecond()[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_44 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)[ FD ]
Line_57 $$ final ClientFactory factory = SvnCheckoutProvider.getFactory(activeVcs, format)-->Line_59 $$ addRecursively(activeVcs, factory, file)[ FD ]
Line_5 $$ final String parent = shareDialog.getSelectedURL()-->Line_12 $$ final boolean folderEmpty = checkRemoteFolder(project, activeVcs, parent, progressManager)[ FD ]
Line_39 $$ if (ShareDialog.ShareTarget.useProjectName.equals(shareTarget)) -->Line_41 $$ revision = pair.getFirst()[ CD ]
Line_15 $$ if (Messages.YES != promptAnswer)-->Line_16 $$ return false[ CD ]
Line_39 $$ if (ShareDialog.ShareTarget.useProjectName.equals(shareTarget)) -->Line_42 $$ checkoutUrl = pair.getSecond()[ CD ]
Line_72 $$ if (Boolean.TRUE.equals(actionStarted.get())) -->Line_73 $$ if (error[0] != null) [ CD ]
Line_35 $$ final String commitText = shareDialog.getCommitText()-->Line_50 $$ createRemoteFolder(activeVcs, pair.getSecond(), "tags", commitText)[ FD ]
Line_41 $$ revision = pair.getFirst()-->Line_47 $$ revision = trunkPair.getFirst()[ FD ]
Line_35 $$ final String commitText = shareDialog.getCommitText()-->Line_44 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)[ FD ]
Line_6 $$ if (shareDialog.isOK() && parent != null) -->Line_7 $$ final Ref<Boolean> actionStarted = new Ref<Boolean>(Boolean.TRUE)[ CD ]
Line_6 $$ if (shareDialog.isOK() && parent != null) -->Line_72 $$ if (Boolean.TRUE.equals(actionStarted.get())) [ CD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_49 $$ createRemoteFolder(activeVcs, pair.getSecond(), "branches", commitText)[ FD ]
Line_13 $$ if (!folderEmpty) -->Line_14 $$ final int promptAnswer = Messages.showYesNoDialog(project, "Remote folder \"" + parent + "\" is not empty.\nDo you want to continue sharing?", "Share directory", Messages.getWarningIcon())[ CD ]
Line_46 $$ checkoutUrl = trunkPair.getSecond()-->Line_58 $$ factory.createCheckoutClient().checkout(SvnTarget.fromURL(checkoutUrl), path, revision, Depth.INFINITY, false, false, format, null)[ FD ]
Line_6 $$ if (shareDialog.isOK() && parent != null) -->Line_20 $$ actionStarted.set(format != WorkingCopyFormat.UNKNOWN)[ CD ]
Line_34 $$ final SVNRevision revision-->Line_41 $$ revision = pair.getFirst()[ FD ]
Line_53 $$ if (indicator != null) -->Line_54 $$ indicator.checkCanceled()[ CD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_45 $$ final Pair<SVNRevision, SVNURL> trunkPair = createRemoteFolder(activeVcs, pair.getSecond(), "trunk", commitText)[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_50 $$ createRemoteFolder(activeVcs, pair.getSecond(), "tags", commitText)[ FD ]
Line_32 $$ final SVNURL parenUrl = SVNURL.parseURIEncoded(parent)-->Line_37 $$ checkoutUrl = parenUrl[ FD ]
Line_41 $$ revision = pair.getFirst()-->Line_58 $$ factory.createCheckoutClient().checkout(SvnTarget.fromURL(checkoutUrl), path, revision, Depth.INFINITY, false, false, format, null)[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_24 $$ ExclusiveBackgroundVcsAction.run(project, new Runnable() [ FD ]
Line_14 $$ final int promptAnswer = Messages.showYesNoDialog(project, "Remote folder \"" + parent + "\" is not empty.\nDo you want to continue sharing?", "Share directory", Messages.getWarningIcon())-->Line_15 $$ if (Messages.YES != promptAnswer)[ FD ]
Line_39 $$ if (ShareDialog.ShareTarget.useProjectName.equals(shareTarget)) -->Line_46 $$ checkoutUrl = trunkPair.getSecond()[ CD ]
Line_9 $$ final ShareDialog.ShareTarget shareTarget = shareDialog.getShareTarget()-->Line_36 $$ if (ShareDialog.ShareTarget.useSelected.equals(shareTarget)) [ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_3 $$ final ShareDialog shareDialog = new ShareDialog(project, file.getName())[ FD ]
Line_37 $$ checkoutUrl = parenUrl-->Line_55 $$ indicator.setText(SvnBundle.message("share.directory.checkout.back.progress.text", checkoutUrl.toString()))[ FD ]
Line_45 $$ final Pair<SVNRevision, SVNURL> trunkPair = createRemoteFolder(activeVcs, pair.getSecond(), "trunk", commitText)-->Line_46 $$ checkoutUrl = trunkPair.getSecond()[ FD ]
Line_33 $$ final SVNURL checkoutUrl-->Line_37 $$ checkoutUrl = parenUrl[ FD ]
Line_24 $$ ExclusiveBackgroundVcsAction.run(project, new Runnable() -->Line_26 $$ progressManager.runProcessWithProgressSynchronously(new Runnable() [ CD ]
Line_10 $$ final ProgressManager progressManager = ProgressManager.getInstance()-->Line_12 $$ final boolean folderEmpty = checkRemoteFolder(project, activeVcs, parent, progressManager)[ FD ]
Line_12 $$ final boolean folderEmpty = checkRemoteFolder(project, activeVcs, parent, progressManager)-->Line_13 $$ if (!folderEmpty) [ FD ]
Line_40 $$ final Pair<SVNRevision, SVNURL> pair = createRemoteFolder(activeVcs, parenUrl, file.getName(), commitText)-->Line_41 $$ revision = pair.getFirst()[ FD ]
Line_2 $$ private static boolean performImpl(final Project project, final SvnVcs activeVcs, final VirtualFile file) throws VcsException -->Line_59 $$ addRecursively(activeVcs, factory, file)[ FD ]
Line_29 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_55 $$ indicator.setText(SvnBundle.message("share.directory.checkout.back.progress.text", checkoutUrl.toString()))[ FD ]
