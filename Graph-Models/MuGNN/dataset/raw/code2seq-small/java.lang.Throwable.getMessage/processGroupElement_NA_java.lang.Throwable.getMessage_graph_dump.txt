Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_11 $$ if ("true".equals(element.getAttributeValue(COMPACT_ATTR_NAME))) [ FD ]
Line_36 $$ group = (ActionGroup) obj-->Line_71 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ FD ]
Line_65 $$ Element child = (Element) o-->Line_66 $$ String name = child.getName()[ FD ]
Line_65 $$ Element child = (Element) o-->Line_71 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ FD ]
Line_18 $$ ActionGroup group-->Line_50 $$ Presentation presentation = group.getTemplatePresentation()[ FD ]
Line_26 $$ if (!(obj instanceof ActionGroup)) -->Line_27 $$ reportActionError(pluginId, "class with name \"" + className + "\" should be instance of " + ActionGroup.class.getName())[ CD ]
Line_51 $$ String text = loadTextForElement(element, bundle, id, GROUP_ELEMENT_NAME)-->Line_53 $$ presentation.setText(text)[ FD ]
Line_52 $$ if (!StringUtil.isEmpty(text) || presentation.getText() == null) -->Line_53 $$ presentation.setText(text)[ CD ]
Line_39 $$ if (id != null && id.isEmpty()) -->Line_41 $$ return null[ CD ]
Line_11 $$ if ("true".equals(element.getAttributeValue(COMPACT_ATTR_NAME))) -->Line_14 $$ className = DefaultActionGroup.class.getName()[ CD ]
Line_65 $$ Element child = (Element) o-->Line_83 $$ AnAction action = processReferenceElement(child, pluginId)[ FD ]
Line_65 $$ Element child = (Element) o-->Line_68 $$ AnAction action = processActionElement(child, loader, pluginId)[ FD ]
Line_38 $$ String id = element.getAttributeValue(ID_ATTR_NAME)-->Line_48 $$ registerOrReplaceActionInner(element, id, group, pluginId)[ FD ]
Line_50 $$ Presentation presentation = group.getTemplatePresentation()-->Line_57 $$ presentation.setDescription(description)[ FD ]
Line_65 $$ Element child = (Element) o-->Line_85 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ FD ]
Line_21 $$ if (DefaultCompactActionGroup.class.getName().equals(className)) -->Line_36 $$ group = (ActionGroup) obj[ CD ]
Line_61 $$ if (popup != null) -->Line_62 $$ group.setPopup(Boolean.valueOf(popup).booleanValue())[ CD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_3 $$ final IdeaPluginDescriptor plugin = PluginManager.getPlugin(pluginId)[ CD ]
Line_26 $$ if (!(obj instanceof ActionGroup)) -->Line_28 $$ return null[ CD ]
Line_22 $$ group = new DefaultCompactActionGroup()-->Line_81 $$ processAddToGroupNode(group, child, pluginId, isSecondary(child))[ FD ]
Line_20 $$ group = new DefaultActionGroup()-->Line_78 $$ addToGroupInner(group, action, Constraints.LAST, false)[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_76 $$ AnAction action = processGroupElement(child, loader, pluginId)[ FD ]
Line_18 $$ ActionGroup group-->Line_22 $$ group = new DefaultCompactActionGroup()[ FD ]
Line_18 $$ ActionGroup group-->Line_48 $$ registerOrReplaceActionInner(element, id, group, pluginId)[ FD ]
Line_80 $$ if (ADD_TO_GROUP_ELEMENT_NAME.equals(name)) -->Line_82 $$ if (REFERENCE_ELEMENT_NAME.equals(name)) [ CD ]
Line_51 $$ String text = loadTextForElement(element, bundle, id, GROUP_ELEMENT_NAME)-->Line_52 $$ if (!StringUtil.isEmpty(text) || presentation.getText() == null) [ FD ]
Line_55 $$ String description = loadDescriptionForElement(element, bundle, id, GROUP_ELEMENT_NAME)-->Line_57 $$ presentation.setDescription(description)[ FD ]
Line_73 $$ if (SEPARATOR_ELEMENT_NAME.equals(name)) -->Line_75 $$ if (GROUP_ELEMENT_NAME.equals(name)) [ CD ]
Line_9 $$ String className = element.getAttributeValue(CLASS_ATTR_NAME)-->Line_24 $$ Class aClass = Class.forName(className, true, loader)[ FD ]
Line_12 $$ className = DefaultCompactActionGroup.class.getName()-->Line_24 $$ Class aClass = Class.forName(className, true, loader)[ FD ]
Line_50 $$ Presentation presentation = group.getTemplatePresentation()-->Line_52 $$ if (!StringUtil.isEmpty(text) || presentation.getText() == null) [ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_55 $$ String description = loadDescriptionForElement(element, bundle, id, GROUP_ELEMENT_NAME)[ FD ]
Line_36 $$ group = (ActionGroup) obj-->Line_62 $$ group.setPopup(Boolean.valueOf(popup).booleanValue())[ FD ]
Line_66 $$ String name = child.getName()-->Line_73 $$ if (SEPARATOR_ELEMENT_NAME.equals(name)) [ FD ]
Line_43 $$ if (Boolean.valueOf(element.getAttributeValue(INTERNAL_ATTR_NAME)).booleanValue() && !ApplicationManagerEx.getApplicationEx().isInternal()) -->Line_44 $$ myNotRegisteredInternalActionIds.add(id)[ CD ]
Line_56 $$ if (!StringUtil.isEmpty(description) || presentation.getDescription() == null) -->Line_57 $$ presentation.setDescription(description)[ CD ]
Line_60 $$ String popup = element.getAttributeValue(POPUP_ATTR_NAME)-->Line_61 $$ if (popup != null) [ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_88 $$ reportActionError(pluginId, "unexpected name of element \"" + name + "\n")[ FD ]
Line_36 $$ group = (ActionGroup) obj-->Line_50 $$ Presentation presentation = group.getTemplatePresentation()[ FD ]
Line_104 $$ if (pluginId == null) -->Line_105 $$ LOG.error(message, e)[ CD ]
Line_10 $$ if (className == null) -->Line_11 $$ if ("true".equals(element.getAttributeValue(COMPACT_ATTR_NAME))) [ CD ]
Line_20 $$ group = new DefaultActionGroup()-->Line_62 $$ group.setPopup(Boolean.valueOf(popup).booleanValue())[ FD ]
Line_22 $$ group = new DefaultCompactActionGroup()-->Line_48 $$ registerOrReplaceActionInner(element, id, group, pluginId)[ FD ]
Line_73 $$ if (SEPARATOR_ELEMENT_NAME.equals(name)) -->Line_74 $$ processSeparatorNode((DefaultActionGroup) group, child, pluginId)[ CD ]
Line_38 $$ String id = element.getAttributeValue(ID_ATTR_NAME)-->Line_39 $$ if (id != null && id.isEmpty()) [ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_40 $$ reportActionError(pluginId, "ID of the group cannot be an empty string")[ FD ]
Line_18 $$ ActionGroup group-->Line_81 $$ processAddToGroupNode(group, child, pluginId, isSecondary(child))[ FD ]
Line_19 $$ if (DefaultActionGroup.class.getName().equals(className)) -->Line_21 $$ if (DefaultCompactActionGroup.class.getName().equals(className)) [ CD ]
Line_66 $$ String name = child.getName()-->Line_67 $$ if (ACTION_ELEMENT_NAME.equals(name)) [ FD ]
Line_18 $$ ActionGroup group-->Line_36 $$ group = (ActionGroup) obj[ FD ]
Line_65 $$ Element child = (Element) o-->Line_74 $$ processSeparatorNode((DefaultActionGroup) group, child, pluginId)[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_64 $$ for (final Object o : element.getChildren()) [ FD ]
Line_68 $$ AnAction action = processActionElement(child, loader, pluginId)-->Line_78 $$ addToGroupInner(group, action, Constraints.LAST, false)[ FD ]
Line_67 $$ if (ACTION_ELEMENT_NAME.equals(name)) -->Line_73 $$ if (SEPARATOR_ELEMENT_NAME.equals(name)) [ CD ]
Line_3 $$ final IdeaPluginDescriptor plugin = PluginManager.getPlugin(pluginId)-->Line_4 $$ ResourceBundle bundle = getActionsResourceBundle(loader, plugin)[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_4 $$ ResourceBundle bundle = getActionsResourceBundle(loader, plugin)[ CD ]
Line_67 $$ if (ACTION_ELEMENT_NAME.equals(name)) -->Line_68 $$ AnAction action = processActionElement(child, loader, pluginId)[ CD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_68 $$ AnAction action = processActionElement(child, loader, pluginId)[ FD ]
Line_82 $$ if (REFERENCE_ELEMENT_NAME.equals(name)) -->Line_84 $$ if (action != null) [ CD ]
Line_60 $$ String popup = element.getAttributeValue(POPUP_ATTR_NAME)-->Line_62 $$ group.setPopup(Boolean.valueOf(popup).booleanValue())[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_83 $$ AnAction action = processReferenceElement(child, pluginId)[ FD ]
Line_31 $$ if (!(obj instanceof DefaultActionGroup)) -->Line_32 $$ reportActionError(pluginId, "class with name \"" + className + "\" should be instance of " + DefaultActionGroup.class.getName() + " because there are children specified")[ CD ]
Line_36 $$ group = (ActionGroup) obj-->Line_48 $$ registerOrReplaceActionInner(element, id, group, pluginId)[ FD ]
Line_11 $$ if ("true".equals(element.getAttributeValue(COMPACT_ATTR_NAME))) -->Line_12 $$ className = DefaultCompactActionGroup.class.getName()[ CD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_24 $$ Class aClass = Class.forName(className, true, loader)[ FD ]
Line_22 $$ group = new DefaultCompactActionGroup()-->Line_62 $$ group.setPopup(Boolean.valueOf(popup).booleanValue())[ FD ]
Line_21 $$ if (DefaultCompactActionGroup.class.getName().equals(className)) -->Line_22 $$ group = new DefaultCompactActionGroup()[ CD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_43 $$ if (Boolean.valueOf(element.getAttributeValue(INTERNAL_ATTR_NAME)).booleanValue() && !ApplicationManagerEx.getApplicationEx().isInternal()) [ FD ]
Line_68 $$ AnAction action = processActionElement(child, loader, pluginId)-->Line_71 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ FD ]
Line_82 $$ if (REFERENCE_ELEMENT_NAME.equals(name)) -->Line_89 $$ return null[ CD ]
Line_12 $$ className = DefaultCompactActionGroup.class.getName()-->Line_21 $$ if (DefaultCompactActionGroup.class.getName().equals(className)) [ FD ]
Line_21 $$ if (DefaultCompactActionGroup.class.getName().equals(className)) -->Line_30 $$ if (element.getChildren().size() != element.getChildren(ADD_TO_GROUP_ELEMENT_NAME).size()) [ CD ]
Line_82 $$ if (REFERENCE_ELEMENT_NAME.equals(name)) -->Line_88 $$ reportActionError(pluginId, "unexpected name of element \"" + name + "\n")[ CD ]
Line_43 $$ if (Boolean.valueOf(element.getAttributeValue(INTERNAL_ATTR_NAME)).booleanValue() && !ApplicationManagerEx.getApplicationEx().isInternal()) -->Line_45 $$ return null[ CD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_10 $$ if (className == null) [ CD ]
Line_4 $$ ResourceBundle bundle = getActionsResourceBundle(loader, plugin)-->Line_51 $$ String text = loadTextForElement(element, bundle, id, GROUP_ELEMENT_NAME)[ FD ]
Line_9 $$ String className = element.getAttributeValue(CLASS_ATTR_NAME)-->Line_59 $$ setIcon(element.getAttributeValue(ICON_ATTR_NAME), className, loader, presentation, pluginId)[ FD ]
Line_38 $$ String id = element.getAttributeValue(ID_ATTR_NAME)-->Line_47 $$ if (id != null) [ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_51 $$ String text = loadTextForElement(element, bundle, id, GROUP_ELEMENT_NAME)[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_60 $$ String popup = element.getAttributeValue(POPUP_ATTR_NAME)[ FD ]
Line_18 $$ ActionGroup group-->Line_78 $$ addToGroupInner(group, action, Constraints.LAST, false)[ FD ]
Line_5 $$ if (!GROUP_ELEMENT_NAME.equals(element.getName())) -->Line_7 $$ return null[ CD ]
Line_66 $$ String name = child.getName()-->Line_82 $$ if (REFERENCE_ELEMENT_NAME.equals(name)) [ FD ]
Line_14 $$ className = DefaultActionGroup.class.getName()-->Line_19 $$ if (DefaultActionGroup.class.getName().equals(className)) [ FD ]
Line_22 $$ group = new DefaultCompactActionGroup()-->Line_36 $$ group = (ActionGroup) obj[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_48 $$ registerOrReplaceActionInner(element, id, group, pluginId)[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_9 $$ String className = element.getAttributeValue(CLASS_ATTR_NAME)[ CD ]
Line_20 $$ group = new DefaultActionGroup()-->Line_71 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ FD ]
Line_31 $$ if (!(obj instanceof DefaultActionGroup)) -->Line_33 $$ return null[ CD ]
Line_19 $$ if (DefaultActionGroup.class.getName().equals(className)) -->Line_20 $$ group = new DefaultActionGroup()[ CD ]
Line_66 $$ String name = child.getName()-->Line_80 $$ if (ADD_TO_GROUP_ELEMENT_NAME.equals(name)) [ FD ]
Line_39 $$ if (id != null && id.isEmpty()) -->Line_40 $$ reportActionError(pluginId, "ID of the group cannot be an empty string")[ CD ]
Line_75 $$ if (GROUP_ELEMENT_NAME.equals(name)) -->Line_76 $$ AnAction action = processGroupElement(child, loader, pluginId)[ CD ]
Line_22 $$ group = new DefaultCompactActionGroup()-->Line_71 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ FD ]
Line_18 $$ ActionGroup group-->Line_85 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_27 $$ reportActionError(pluginId, "class with name \"" + className + "\" should be instance of " + ActionGroup.class.getName())[ FD ]
Line_14 $$ className = DefaultActionGroup.class.getName()-->Line_21 $$ if (DefaultCompactActionGroup.class.getName().equals(className)) [ FD ]
Line_14 $$ className = DefaultActionGroup.class.getName()-->Line_59 $$ setIcon(element.getAttributeValue(ICON_ATTR_NAME), className, loader, presentation, pluginId)[ FD ]
Line_65 $$ Element child = (Element) o-->Line_81 $$ processAddToGroupNode(group, child, pluginId, isSecondary(child))[ FD ]
Line_69 $$ if (action != null) -->Line_71 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ CD ]
Line_77 $$ if (action != null) -->Line_78 $$ addToGroupInner(group, action, Constraints.LAST, false)[ CD ]
Line_20 $$ group = new DefaultActionGroup()-->Line_22 $$ group = new DefaultCompactActionGroup()[ FD ]
Line_68 $$ AnAction action = processActionElement(child, loader, pluginId)-->Line_85 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ FD ]
Line_50 $$ Presentation presentation = group.getTemplatePresentation()-->Line_53 $$ presentation.setText(text)[ FD ]
Line_36 $$ group = (ActionGroup) obj-->Line_78 $$ addToGroupInner(group, action, Constraints.LAST, false)[ FD ]
Line_69 $$ if (action != null) -->Line_70 $$ assertActionIsGroupOrStub(action)[ CD ]
Line_50 $$ Presentation presentation = group.getTemplatePresentation()-->Line_59 $$ setIcon(element.getAttributeValue(ICON_ATTR_NAME), className, loader, presentation, pluginId)[ FD ]
Line_21 $$ if (DefaultCompactActionGroup.class.getName().equals(className)) -->Line_25 $$ Object obj = new ConstructorInjectionComponentAdapter(className, aClass).getComponentInstance(ApplicationManager.getApplication().getPicoContainer())[ CD ]
Line_55 $$ String description = loadDescriptionForElement(element, bundle, id, GROUP_ELEMENT_NAME)-->Line_56 $$ if (!StringUtil.isEmpty(description) || presentation.getDescription() == null) [ FD ]
Line_20 $$ group = new DefaultActionGroup()-->Line_85 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ FD ]
Line_18 $$ ActionGroup group-->Line_71 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ FD ]
Line_103 $$ final String message = "cannot create class \"" + className + "\""-->Line_105 $$ LOG.error(message, e)[ FD ]
Line_80 $$ if (ADD_TO_GROUP_ELEMENT_NAME.equals(name)) -->Line_81 $$ processAddToGroupNode(group, child, pluginId, isSecondary(child))[ CD ]
Line_21 $$ if (DefaultCompactActionGroup.class.getName().equals(className)) -->Line_26 $$ if (!(obj instanceof ActionGroup)) [ CD ]
Line_67 $$ if (ACTION_ELEMENT_NAME.equals(name)) -->Line_69 $$ if (action != null) [ CD ]
Line_66 $$ String name = child.getName()-->Line_75 $$ if (GROUP_ELEMENT_NAME.equals(name)) [ FD ]
Line_20 $$ group = new DefaultActionGroup()-->Line_50 $$ Presentation presentation = group.getTemplatePresentation()[ FD ]
Line_38 $$ String id = element.getAttributeValue(ID_ATTR_NAME)-->Line_55 $$ String description = loadDescriptionForElement(element, bundle, id, GROUP_ELEMENT_NAME)[ FD ]
Line_38 $$ String id = element.getAttributeValue(ID_ATTR_NAME)-->Line_44 $$ myNotRegisteredInternalActionIds.add(id)[ FD ]
Line_22 $$ group = new DefaultCompactActionGroup()-->Line_85 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ FD ]
Line_22 $$ group = new DefaultCompactActionGroup()-->Line_50 $$ Presentation presentation = group.getTemplatePresentation()[ FD ]
Line_18 $$ ActionGroup group-->Line_62 $$ group.setPopup(Boolean.valueOf(popup).booleanValue())[ FD ]
Line_12 $$ className = DefaultCompactActionGroup.class.getName()-->Line_59 $$ setIcon(element.getAttributeValue(ICON_ATTR_NAME), className, loader, presentation, pluginId)[ FD ]
Line_20 $$ group = new DefaultActionGroup()-->Line_48 $$ registerOrReplaceActionInner(element, id, group, pluginId)[ FD ]
Line_12 $$ className = DefaultCompactActionGroup.class.getName()-->Line_19 $$ if (DefaultActionGroup.class.getName().equals(className)) [ FD ]
Line_75 $$ if (GROUP_ELEMENT_NAME.equals(name)) -->Line_77 $$ if (action != null) [ CD ]
Line_38 $$ String id = element.getAttributeValue(ID_ATTR_NAME)-->Line_51 $$ String text = loadTextForElement(element, bundle, id, GROUP_ELEMENT_NAME)[ FD ]
Line_36 $$ group = (ActionGroup) obj-->Line_85 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ FD ]
Line_47 $$ if (id != null) -->Line_48 $$ registerOrReplaceActionInner(element, id, group, pluginId)[ CD ]
Line_36 $$ group = (ActionGroup) obj-->Line_81 $$ processAddToGroupNode(group, child, pluginId, isSecondary(child))[ FD ]
Line_9 $$ String className = element.getAttributeValue(CLASS_ATTR_NAME)-->Line_19 $$ if (DefaultActionGroup.class.getName().equals(className)) [ FD ]
Line_104 $$ if (pluginId == null) -->Line_107 $$ LOG.error(new PluginException(message, e, pluginId))[ CD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_32 $$ reportActionError(pluginId, "class with name \"" + className + "\" should be instance of " + DefaultActionGroup.class.getName() + " because there are children specified")[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_5 $$ if (!GROUP_ELEMENT_NAME.equals(element.getName())) [ CD ]
Line_12 $$ className = DefaultCompactActionGroup.class.getName()-->Line_14 $$ className = DefaultActionGroup.class.getName()[ FD ]
Line_18 $$ ActionGroup group-->Line_20 $$ group = new DefaultActionGroup()[ FD ]
Line_21 $$ if (DefaultCompactActionGroup.class.getName().equals(className)) -->Line_24 $$ Class aClass = Class.forName(className, true, loader)[ CD ]
Line_50 $$ Presentation presentation = group.getTemplatePresentation()-->Line_56 $$ if (!StringUtil.isEmpty(description) || presentation.getDescription() == null) [ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_104 $$ if (pluginId == null) [ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_9 $$ String className = element.getAttributeValue(CLASS_ATTR_NAME)[ FD ]
Line_22 $$ group = new DefaultCompactActionGroup()-->Line_78 $$ addToGroupInner(group, action, Constraints.LAST, false)[ FD ]
Line_84 $$ if (action != null) -->Line_85 $$ addToGroupInner(group, action, Constraints.LAST, isSecondary(child))[ CD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_5 $$ if (!GROUP_ELEMENT_NAME.equals(element.getName())) [ FD ]
Line_9 $$ String className = element.getAttributeValue(CLASS_ATTR_NAME)-->Line_12 $$ className = DefaultCompactActionGroup.class.getName()[ FD ]
Line_75 $$ if (GROUP_ELEMENT_NAME.equals(name)) -->Line_80 $$ if (ADD_TO_GROUP_ELEMENT_NAME.equals(name)) [ CD ]
Line_68 $$ AnAction action = processActionElement(child, loader, pluginId)-->Line_84 $$ if (action != null) [ FD ]
Line_68 $$ AnAction action = processActionElement(child, loader, pluginId)-->Line_69 $$ if (action != null) [ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_97 $$ reportActionError(pluginId, "class with name \"" + e.getMessage() + "\" not found")[ FD ]
Line_9 $$ String className = element.getAttributeValue(CLASS_ATTR_NAME)-->Line_14 $$ className = DefaultActionGroup.class.getName()[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_30 $$ if (element.getChildren().size() != element.getChildren(ADD_TO_GROUP_ELEMENT_NAME).size()) [ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_59 $$ setIcon(element.getAttributeValue(ICON_ATTR_NAME), className, loader, presentation, pluginId)[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_74 $$ processSeparatorNode((DefaultActionGroup) group, child, pluginId)[ FD ]
Line_68 $$ AnAction action = processActionElement(child, loader, pluginId)-->Line_70 $$ assertActionIsGroupOrStub(action)[ FD ]
Line_9 $$ String className = element.getAttributeValue(CLASS_ATTR_NAME)-->Line_10 $$ if (className == null) [ FD ]
Line_4 $$ ResourceBundle bundle = getActionsResourceBundle(loader, plugin)-->Line_55 $$ String description = loadDescriptionForElement(element, bundle, id, GROUP_ELEMENT_NAME)[ FD ]
Line_14 $$ className = DefaultActionGroup.class.getName()-->Line_24 $$ Class aClass = Class.forName(className, true, loader)[ FD ]
Line_20 $$ group = new DefaultActionGroup()-->Line_36 $$ group = (ActionGroup) obj[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_38 $$ String id = element.getAttributeValue(ID_ATTR_NAME)[ FD ]
Line_65 $$ Element child = (Element) o-->Line_76 $$ AnAction action = processGroupElement(child, loader, pluginId)[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_81 $$ processAddToGroupNode(group, child, pluginId, isSecondary(child))[ FD ]
Line_68 $$ AnAction action = processActionElement(child, loader, pluginId)-->Line_77 $$ if (action != null) [ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_94 $$ reportActionError(pluginId, "class with name \"" + className + "\" not found")[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_3 $$ final IdeaPluginDescriptor plugin = PluginManager.getPlugin(pluginId)[ FD ]
Line_9 $$ String className = element.getAttributeValue(CLASS_ATTR_NAME)-->Line_21 $$ if (DefaultCompactActionGroup.class.getName().equals(className)) [ FD ]
Line_82 $$ if (REFERENCE_ELEMENT_NAME.equals(name)) -->Line_83 $$ AnAction action = processReferenceElement(child, pluginId)[ CD ]
Line_5 $$ if (!GROUP_ELEMENT_NAME.equals(element.getName())) -->Line_6 $$ reportActionError(pluginId, "unexpected name of element \"" + element.getName() + "\"")[ CD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_100 $$ reportActionError(pluginId, "unsupported class version for " + className)[ FD ]
Line_20 $$ group = new DefaultActionGroup()-->Line_81 $$ processAddToGroupNode(group, child, pluginId, isSecondary(child))[ FD ]
Line_30 $$ if (element.getChildren().size() != element.getChildren(ADD_TO_GROUP_ELEMENT_NAME).size()) -->Line_31 $$ if (!(obj instanceof DefaultActionGroup)) [ CD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_4 $$ ResourceBundle bundle = getActionsResourceBundle(loader, plugin)[ FD ]
Line_2 $$ private AnAction processGroupElement(Element element, final ClassLoader loader, PluginId pluginId) -->Line_6 $$ reportActionError(pluginId, "unexpected name of element \"" + element.getName() + "\"")[ FD ]
