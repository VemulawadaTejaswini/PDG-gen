Line_20 $$ Path dir1 = new Path("testdir1")-->Line_37 $$ stat = fileSys.getFileStatus(dir1)[ FD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_61 $$ assertTrue("Not matching the access times", atime4 == stat.getAccessTime())[ FD ]
Line_59 $$ stat = fileSys.getFileStatus(dir1)-->Line_61 $$ assertTrue("Not matching the access times", atime4 == stat.getAccessTime())[ FD ]
Line_42 $$ stat = fileSys.getFileStatus(file1)-->Line_47 $$ assertTrue(mtime1 == stat.getModificationTime())[ FD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_51 $$ long mtime3 = stat.getModificationTime()[ FD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_54 $$ assertTrue(atime2 == stat.getAccessTime())[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_69 $$ cluster.shutdown()[ FD ]
Line_42 $$ stat = fileSys.getFileStatus(file1)-->Line_61 $$ assertTrue("Not matching the access times", atime4 == stat.getAccessTime())[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_6 $$ conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY, 1000)[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_79 $$ assertTrue(atime2 == stat.getAccessTime())[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_29 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_59 $$ stat = fileSys.getFileStatus(dir1)[ FD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_79 $$ assertTrue(atime2 == stat.getAccessTime())[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_13 $$ DatanodeInfo[] info = client.datanodeReport(DatanodeReportType.LIVE)[ CD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_88 $$ fileSys.close()[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()[ CD ]
Line_20 $$ Path dir1 = new Path("testdir1")-->Line_82 $$ cleanupFile(fileSys, dir1)[ FD ]
Line_42 $$ stat = fileSys.getFileStatus(file1)-->Line_79 $$ assertTrue(atime2 == stat.getAccessTime())[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_43 $$ long atime3 = stat.getAccessTime()[ FD ]
Line_13 $$ DatanodeInfo[] info = client.datanodeReport(DatanodeReportType.LIVE)-->Line_85 $$ printDatanodeReport(info)[ FD ]
Line_78 $$ stat = fileSys.getFileStatus(file1)-->Line_79 $$ assertTrue(atime2 == stat.getAccessTime())[ FD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_42 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_15 $$ FileSystem fileSys = cluster.getFileSystem()[ FD ]
Line_62 $$ Path nonExistingDir = new Path(dir1, "/nonExistingDir/")-->Line_64 $$ fileSys.setTimes(nonExistingDir, mtime4, atime4)[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_80 $$ assertTrue(mtime3 == stat.getModificationTime())[ FD ]
Line_78 $$ stat = fileSys.getFileStatus(file1)-->Line_80 $$ assertTrue(mtime3 == stat.getModificationTime())[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_49 $$ fileSys.setTimes(file1, mtime2, -1)[ FD ]
Line_50 $$ stat = fileSys.getFileStatus(file1)-->Line_78 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_82 $$ cleanupFile(fileSys, dir1)[ FD ]
Line_42 $$ stat = fileSys.getFileStatus(file1)-->Line_54 $$ assertTrue(atime2 == stat.getAccessTime())[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_7 $$ conf.setInt(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY, 1)[ CD ]
Line_40 $$ long atime2 = atime1 - (24L * 3600L * 1000L)-->Line_41 $$ fileSys.setTimes(file1, -1, atime2)[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_41 $$ fileSys.setTimes(file1, -1, atime2)[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_58 $$ fileSys.setTimes(dir1, mtime4, atime4)[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_37 $$ stat = fileSys.getFileStatus(dir1)[ FD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_50 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_76 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_76 $$ fileSys = cluster.getFileSystem()-->Line_82 $$ cleanupFile(fileSys, dir1)[ FD ]
Line_59 $$ stat = fileSys.getFileStatus(dir1)-->Line_79 $$ assertTrue(atime2 == stat.getAccessTime())[ FD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_43 $$ long atime3 = stat.getAccessTime()[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_4 $$ final int MAX_IDLE_TIME = 2000[ CD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_80 $$ assertTrue(mtime3 == stat.getModificationTime())[ FD ]
Line_56 $$ long mtime4 = Time.now() - (3600L * 1000L)-->Line_64 $$ fileSys.setTimes(nonExistingDir, mtime4, atime4)[ FD ]
Line_22 $$ FSDataOutputStream stm = writeFile(fileSys, file1, replicas)-->Line_28 $$ stm.close()[ FD ]
Line_42 $$ stat = fileSys.getFileStatus(file1)-->Line_43 $$ long atime3 = stat.getAccessTime()[ FD ]
Line_50 $$ stat = fileSys.getFileStatus(file1)-->Line_54 $$ assertTrue(atime2 == stat.getAccessTime())[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_11 $$ InetSocketAddress addr = new InetSocketAddress("localhost", cluster.getNameNodePort())[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_74 $$ cluster = new MiniDFSCluster.Builder(conf).nameNodePort(nnport).format(false).build()[ FD ]
Line_74 $$ cluster = new MiniDFSCluster.Builder(conf).nameNodePort(nnport).format(false).build()-->Line_76 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_56 $$ long mtime4 = Time.now() - (3600L * 1000L)-->Line_58 $$ fileSys.setTimes(dir1, mtime4, atime4)[ FD ]
Line_50 $$ stat = fileSys.getFileStatus(file1)-->Line_79 $$ assertTrue(atime2 == stat.getAccessTime())[ FD ]
Line_50 $$ stat = fileSys.getFileStatus(file1)-->Line_60 $$ assertTrue("Not matching the modification times", mtime4 == stat.getModificationTime())[ FD ]
Line_42 $$ stat = fileSys.getFileStatus(file1)-->Line_78 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_7 $$ conf.setInt(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY, 1)[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_11 $$ InetSocketAddress addr = new InetSocketAddress("localhost", cluster.getNameNodePort())[ CD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_37 $$ stat = fileSys.getFileStatus(dir1)[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_12 $$ DFSClient client = new DFSClient(addr, conf)[ CD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_61 $$ assertTrue("Not matching the access times", atime4 == stat.getAccessTime())[ FD ]
Line_57 $$ long atime4 = Time.now()-->Line_58 $$ fileSys.setTimes(dir1, mtime4, atime4)[ FD ]
Line_21 $$ Path file1 = new Path(dir1, "test1.dat")-->Line_29 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_48 $$ long mtime2 = mtime1 - (3600L * 1000L)-->Line_49 $$ fileSys.setTimes(file1, mtime2, -1)[ FD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_78 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_17 $$ assertTrue(fileSys instanceof DistributedFileSystem)[ CD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_38 $$ long mdir1 = stat.getAccessTime()[ FD ]
Line_62 $$ Path nonExistingDir = new Path(dir1, "/nonExistingDir/")-->Line_67 $$ assertTrue(e.getMessage().contains("File/Directory " + nonExistingDir.toString() + " does not exist."))[ FD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_38 $$ long mdir1 = stat.getAccessTime()[ FD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_50 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_47 $$ assertTrue(mtime1 == stat.getModificationTime())[ FD ]
Line_21 $$ Path file1 = new Path(dir1, "test1.dat")-->Line_22 $$ FSDataOutputStream stm = writeFile(fileSys, file1, replicas)[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_24 $$ long atimeBeforeClose = stat.getAccessTime()[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_22 $$ FSDataOutputStream stm = writeFile(fileSys, file1, replicas)[ FD ]
Line_13 $$ DatanodeInfo[] info = client.datanodeReport(DatanodeReportType.LIVE)-->Line_84 $$ info = client.datanodeReport(DatanodeReportType.ALL)[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_31 $$ long mtime1 = stat.getModificationTime()[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_61 $$ assertTrue("Not matching the access times", atime4 == stat.getAccessTime())[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_75 $$ cluster.waitActive()[ FD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_54 $$ assertTrue(atime2 == stat.getAccessTime())[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_89 $$ cluster.shutdown()[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_9 $$ cluster.waitActive()[ CD ]
Line_2 $$ public void testTimes() throws IOException -->Line_15 $$ FileSystem fileSys = cluster.getFileSystem()[ CD ]
Line_21 $$ Path file1 = new Path(dir1, "test1.dat")-->Line_50 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_64 $$ fileSys.setTimes(nonExistingDir, mtime4, atime4)[ FD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_43 $$ long atime3 = stat.getAccessTime()[ FD ]
Line_42 $$ stat = fileSys.getFileStatus(file1)-->Line_59 $$ stat = fileSys.getFileStatus(dir1)[ FD ]
Line_21 $$ Path file1 = new Path(dir1, "test1.dat")-->Line_78 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_78 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_14 $$ assertEquals("Number of Datanodes ", numDatanodes, info.length)[ CD ]
Line_10 $$ final int nnport = cluster.getNameNodePort()-->Line_74 $$ cluster = new MiniDFSCluster.Builder(conf).nameNodePort(nnport).format(false).build()[ FD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_79 $$ assertTrue(atime2 == stat.getAccessTime())[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_29 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_16 $$ int replicas = 1-->Line_22 $$ FSDataOutputStream stm = writeFile(fileSys, file1, replicas)[ FD ]
Line_42 $$ stat = fileSys.getFileStatus(file1)-->Line_51 $$ long mtime3 = stat.getModificationTime()[ FD ]
Line_50 $$ stat = fileSys.getFileStatus(file1)-->Line_59 $$ stat = fileSys.getFileStatus(dir1)[ FD ]
Line_42 $$ stat = fileSys.getFileStatus(file1)-->Line_80 $$ assertTrue(mtime3 == stat.getModificationTime())[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_5 $$ conf.setInt("ipc.client.connection.maxidletime", MAX_IDLE_TIME)[ CD ]
Line_21 $$ Path file1 = new Path(dir1, "test1.dat")-->Line_42 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_50 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_81 $$ cleanupFile(fileSys, file1)[ FD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_42 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_57 $$ long atime4 = Time.now()-->Line_64 $$ fileSys.setTimes(nonExistingDir, mtime4, atime4)[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_59 $$ stat = fileSys.getFileStatus(dir1)[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_30 $$ long atime1 = stat.getAccessTime()[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_60 $$ assertTrue("Not matching the modification times", mtime4 == stat.getModificationTime())[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_76 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_9 $$ cluster.waitActive()[ FD ]
Line_76 $$ fileSys = cluster.getFileSystem()-->Line_88 $$ fileSys.close()[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_47 $$ assertTrue(mtime1 == stat.getModificationTime())[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_16 $$ int replicas = 1[ CD ]
Line_50 $$ stat = fileSys.getFileStatus(file1)-->Line_51 $$ long mtime3 = stat.getModificationTime()[ FD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_47 $$ assertTrue(mtime1 == stat.getModificationTime())[ FD ]
Line_76 $$ fileSys = cluster.getFileSystem()-->Line_78 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_21 $$ Path file1 = new Path(dir1, "test1.dat")-->Line_49 $$ fileSys.setTimes(file1, mtime2, -1)[ FD ]
Line_21 $$ Path file1 = new Path(dir1, "test1.dat")-->Line_81 $$ cleanupFile(fileSys, file1)[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_54 $$ assertTrue(atime2 == stat.getAccessTime())[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_42 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_59 $$ stat = fileSys.getFileStatus(dir1)-->Line_78 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_37 $$ stat = fileSys.getFileStatus(dir1)[ FD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_80 $$ assertTrue(mtime3 == stat.getModificationTime())[ FD ]
Line_74 $$ cluster = new MiniDFSCluster.Builder(conf).nameNodePort(nnport).format(false).build()-->Line_89 $$ cluster.shutdown()[ FD ]
Line_21 $$ Path file1 = new Path(dir1, "test1.dat")-->Line_41 $$ fileSys.setTimes(file1, -1, atime2)[ FD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_60 $$ assertTrue("Not matching the modification times", mtime4 == stat.getModificationTime())[ FD ]
Line_12 $$ DFSClient client = new DFSClient(addr, conf)-->Line_13 $$ DatanodeInfo[] info = client.datanodeReport(DatanodeReportType.LIVE)[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_78 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_50 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_74 $$ cluster = new MiniDFSCluster.Builder(conf).nameNodePort(nnport).format(false).build()-->Line_75 $$ cluster.waitActive()[ FD ]
Line_4 $$ final int MAX_IDLE_TIME = 2000-->Line_5 $$ conf.setInt("ipc.client.connection.maxidletime", MAX_IDLE_TIME)[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_6 $$ conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY, 1000)[ CD ]
Line_20 $$ Path dir1 = new Path("testdir1")-->Line_59 $$ stat = fileSys.getFileStatus(dir1)[ FD ]
Line_50 $$ stat = fileSys.getFileStatus(file1)-->Line_80 $$ assertTrue(mtime3 == stat.getModificationTime())[ FD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_60 $$ assertTrue("Not matching the modification times", mtime4 == stat.getModificationTime())[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_51 $$ long mtime3 = stat.getModificationTime()[ FD ]
Line_2 $$ public void testTimes() throws IOException -->Line_10 $$ final int nnport = cluster.getNameNodePort()[ CD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_78 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_84 $$ info = client.datanodeReport(DatanodeReportType.ALL)-->Line_85 $$ printDatanodeReport(info)[ FD ]
Line_29 $$ stat = fileSys.getFileStatus(file1)-->Line_31 $$ long mtime1 = stat.getModificationTime()[ FD ]
Line_25 $$ String adate = dateForm.format(new Date(atimeBeforeClose))-->Line_32 $$ adate = dateForm.format(new Date(atime1))[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_42 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_5 $$ conf.setInt("ipc.client.connection.maxidletime", MAX_IDLE_TIME)[ FD ]
Line_59 $$ stat = fileSys.getFileStatus(dir1)-->Line_80 $$ assertTrue(mtime3 == stat.getModificationTime())[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_10 $$ final int nnport = cluster.getNameNodePort()[ FD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_59 $$ stat = fileSys.getFileStatus(dir1)[ FD ]
Line_76 $$ fileSys = cluster.getFileSystem()-->Line_81 $$ cleanupFile(fileSys, file1)[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_38 $$ long mdir1 = stat.getAccessTime()[ FD ]
Line_20 $$ Path dir1 = new Path("testdir1")-->Line_58 $$ fileSys.setTimes(dir1, mtime4, atime4)[ FD ]
Line_21 $$ Path file1 = new Path(dir1, "test1.dat")-->Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)[ FD ]
Line_42 $$ stat = fileSys.getFileStatus(file1)-->Line_60 $$ assertTrue("Not matching the modification times", mtime4 == stat.getModificationTime())[ FD ]
Line_23 $$ FileStatus stat = fileSys.getFileStatus(file1)-->Line_30 $$ long atime1 = stat.getAccessTime()[ FD ]
Line_15 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_59 $$ stat = fileSys.getFileStatus(dir1)[ FD ]
Line_50 $$ stat = fileSys.getFileStatus(file1)-->Line_61 $$ assertTrue("Not matching the access times", atime4 == stat.getAccessTime())[ FD ]
Line_12 $$ DFSClient client = new DFSClient(addr, conf)-->Line_84 $$ info = client.datanodeReport(DatanodeReportType.ALL)[ FD ]
Line_42 $$ stat = fileSys.getFileStatus(file1)-->Line_50 $$ stat = fileSys.getFileStatus(file1)[ FD ]
Line_37 $$ stat = fileSys.getFileStatus(dir1)-->Line_51 $$ long mtime3 = stat.getModificationTime()[ FD ]
Line_59 $$ stat = fileSys.getFileStatus(dir1)-->Line_60 $$ assertTrue("Not matching the modification times", mtime4 == stat.getModificationTime())[ FD ]
