Line_75 $$ repaintEnd = tokenStart-->Line_92 $$ repaintEnd = insertSegments.getSegmentStart(insertSegmentCount)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_99 $$ if (oldEndIndex < 0) [ CD ]
Line_24 $$ data = mySegments.getSegmentData(startIndex)-->Line_80 $$ insertSegments.setElementAt(insertSegmentCount, tokenStart, tokenEnd, data)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_34 $$ IElementType lastTokenType = null[ CD ]
Line_76 $$ oldEndIndex = index-->Line_103 $$ mySegments.replace(startIndex, oldEndIndex, insertSegments)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_29 $$ int startOffset = mySegments.getSegmentStart(startIndex)[ CD ]
Line_92 $$ repaintEnd = insertSegments.getSegmentStart(insertSegmentCount)-->Line_96 $$ if (repaintEnd == -1) [ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_56 $$ int insertSegmentCount = 0[ CD ]
Line_62 $$ int lexerState = myLexer.getState()-->Line_70 $$ data = packData(myLexer.getTokenType(), lexerState)[ FD ]
Line_54 $$ startOffset = mySegments.getSegmentStart(startIndex)-->Line_107 $$ myEditor.repaint(startOffset, repaintEnd)[ FD ]
Line_21 $$ int startIndex = oldStartIndex-->Line_103 $$ mySegments.replace(startIndex, oldEndIndex, insertSegments)[ FD ]
Line_29 $$ int startOffset = mySegments.getSegmentStart(startIndex)-->Line_31 $$ myLexer.start(text, startOffset, text.length(), myInitialState)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_55 $$ int repaintEnd = -1[ CD ]
Line_60 $$ while (myLexer.getTokenType() != null) -->Line_67 $$ lastLexerState = lexerState[ CD ]
Line_22 $$ int data-->Line_70 $$ data = packData(myLexer.getTokenType(), lexerState)[ FD ]
Line_24 $$ data = mySegments.getSegmentData(startIndex)-->Line_70 $$ data = packData(myLexer.getTokenType(), lexerState)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_23 $$ do [ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_22 $$ int data[ CD ]
Line_39 $$ int lexerState = myLexer.getState()-->Line_52 $$ lastLexerState = lexerState[ FD ]
Line_32 $$ int lastTokenStart = -1-->Line_51 $$ lastTokenStart = tokenStart[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_84 $$ final int shift = e.getNewLength() - e.getOldLength()[ FD ]
Line_12 $$ CharSequence text = document.getCharsSequence()-->Line_97 $$ repaintEnd = text.length()[ FD ]
Line_13 $$ int oldStartOffset = e.getOffset()-->Line_16 $$ segmentIndex = mySegments.findSegmentIndex(oldStartOffset) - 2[ FD ]
Line_71 $$ if (tokenStart >= newEndOffset && lexerState == myInitialState) -->Line_73 $$ int index = mySegments.findSegmentIndex(shiftedTokenStart)[ CD ]
Line_34 $$ IElementType lastTokenType = null-->Line_68 $$ lastTokenType = myLexer.getTokenType()[ FD ]
Line_70 $$ data = packData(myLexer.getTokenType(), lexerState)-->Line_80 $$ insertSegments.setElementAt(insertSegmentCount, tokenStart, tokenEnd, data)[ FD ]
Line_23 $$ do -->Line_24 $$ data = mySegments.getSegmentData(startIndex)[ CD ]
Line_60 $$ while (myLexer.getTokenType() != null) -->Line_69 $$ int tokenEnd = myLexer.getTokenEnd()[ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_107 $$ myEditor.repaint(startOffset, repaintEnd)[ CD ]
Line_23 $$ do -->Line_25 $$ if (isInitialState(data) || startIndex == 0)[ CD ]
Line_60 $$ while (myLexer.getTokenType() != null) -->Line_63 $$ if (tokenStart == lastTokenStart && lexerState == lastLexerState && myLexer.getTokenType() == lastTokenType) [ CD ]
Line_44 $$ data = packData(myLexer.getTokenType(), lexerState)-->Line_80 $$ insertSegments.setElementAt(insertSegmentCount, tokenStart, tokenEnd, data)[ FD ]
Line_72 $$ int shiftedTokenStart = tokenStart - e.getNewLength() + e.getOldLength()-->Line_73 $$ int index = mySegments.findSegmentIndex(shiftedTokenStart)[ FD ]
Line_86 $$ while (insertSegmentCount > 0 && oldEndIndex > startIndex) -->Line_93 $$ insertSegments.remove(insertSegmentCount, insertSegmentCount + 1)[ CD ]
Line_3 $$ final Document document = e.getDocument()-->Line_9 $$ setText(document.getCharsSequence())[ FD ]
Line_59 $$ SegmentArrayWithData insertSegments = new SegmentArrayWithData()-->Line_87 $$ if (!segmentsEqual(mySegments, oldEndIndex - 1, insertSegments, insertSegmentCount - 1, shift)) [ FD ]
Line_35 $$ while (myLexer.getTokenType() != null) -->Line_40 $$ if (tokenStart == lastTokenStart && lexerState == lastLexerState && myLexer.getTokenType() == lastTokenType) [ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_13 $$ int oldStartOffset = e.getOffset()[ FD ]
Line_49 $$ lastTokenType = myLexer.getTokenType()-->Line_68 $$ lastTokenType = myLexer.getTokenType()[ FD ]
Line_57 $$ int oldEndIndex = -1-->Line_99 $$ if (oldEndIndex < 0) [ FD ]
Line_69 $$ int tokenEnd = myLexer.getTokenEnd()-->Line_80 $$ insertSegments.setElementAt(insertSegmentCount, tokenStart, tokenEnd, data)[ FD ]
Line_14 $$ final int segmentIndex-->Line_16 $$ segmentIndex = mySegments.findSegmentIndex(oldStartOffset) - 2[ FD ]
Line_29 $$ int startOffset = mySegments.getSegmentStart(startIndex)-->Line_107 $$ myEditor.repaint(startOffset, repaintEnd)[ FD ]
Line_43 $$ int tokenEnd = myLexer.getTokenEnd()-->Line_80 $$ insertSegments.setElementAt(insertSegmentCount, tokenStart, tokenEnd, data)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_13 $$ int oldStartOffset = e.getOffset()[ CD ]
Line_85 $$ if (repaintEnd > 0) -->Line_86 $$ while (insertSegmentCount > 0 && oldEndIndex > startIndex) [ CD ]
Line_57 $$ int oldEndIndex = -1-->Line_103 $$ mySegments.replace(startIndex, oldEndIndex, insertSegments)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_84 $$ final int shift = e.getNewLength() - e.getOldLength()[ CD ]
Line_56 $$ int insertSegmentCount = 0-->Line_93 $$ insertSegments.remove(insertSegmentCount, insertSegmentCount + 1)[ FD ]
Line_61 $$ int tokenStart = myLexer.getTokenStart()-->Line_66 $$ lastTokenStart = tokenStart[ FD ]
Line_51 $$ lastTokenStart = tokenStart-->Line_66 $$ lastTokenStart = tokenStart[ FD ]
Line_35 $$ while (myLexer.getTokenType() != null) -->Line_44 $$ data = packData(myLexer.getTokenType(), lexerState)[ CD ]
Line_75 $$ repaintEnd = tokenStart-->Line_85 $$ if (repaintEnd > 0) [ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_31 $$ myLexer.start(text, startOffset, text.length(), myInitialState)[ CD ]
Line_55 $$ int repaintEnd = -1-->Line_85 $$ if (repaintEnd > 0) [ FD ]
Line_74 $$ if (mySegments.getSegmentStart(index) == shiftedTokenStart && mySegments.getSegmentData(index) == data) -->Line_76 $$ oldEndIndex = index[ CD ]
Line_60 $$ while (myLexer.getTokenType() != null) -->Line_80 $$ insertSegments.setElementAt(insertSegmentCount, tokenStart, tokenEnd, data)[ CD ]
Line_8 $$ if (mySegments.getSegmentCount() == 0) -->Line_9 $$ setText(document.getCharsSequence())[ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_30 $$ int newEndOffset = e.getOffset() + e.getNewLength()[ FD ]
Line_3 $$ final Document document = e.getDocument()-->Line_64 $$ throw new IllegalStateException("Error while updating lexer: " + e + " document text: " + document.getText())[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_32 $$ int lastTokenStart = -1[ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_8 $$ if (mySegments.getSegmentCount() == 0) [ CD ]
Line_38 $$ int tokenStart = myLexer.getTokenStart()-->Line_51 $$ lastTokenStart = tokenStart[ FD ]
Line_38 $$ int tokenStart = myLexer.getTokenStart()-->Line_80 $$ insertSegments.setElementAt(insertSegmentCount, tokenStart, tokenEnd, data)[ FD ]
Line_60 $$ while (myLexer.getTokenType() != null) -->Line_61 $$ int tokenStart = myLexer.getTokenStart()[ CD ]
Line_55 $$ int repaintEnd = -1-->Line_97 $$ repaintEnd = text.length()[ FD ]
Line_49 $$ lastTokenType = myLexer.getTokenType()-->Line_58 $$ lastTokenType = null[ FD ]
Line_35 $$ while (myLexer.getTokenType() != null) -->Line_43 $$ int tokenEnd = myLexer.getTokenEnd()[ CD ]
Line_60 $$ while (myLexer.getTokenType() != null) -->Line_62 $$ int lexerState = myLexer.getState()[ CD ]
Line_24 $$ data = mySegments.getSegmentData(startIndex)-->Line_44 $$ data = packData(myLexer.getTokenType(), lexerState)[ FD ]
Line_60 $$ while (myLexer.getTokenType() != null) -->Line_66 $$ lastTokenStart = tokenStart[ CD ]
Line_60 $$ while (myLexer.getTokenType() != null) -->Line_82 $$ myLexer.advance()[ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_3 $$ final Document document = e.getDocument()[ CD ]
Line_75 $$ repaintEnd = tokenStart-->Line_96 $$ if (repaintEnd == -1) [ FD ]
Line_4 $$ if (document instanceof DocumentEx && ((DocumentEx) document).isInBulkUpdate()) -->Line_6 $$ return[ CD ]
Line_61 $$ int tokenStart = myLexer.getTokenStart()-->Line_75 $$ repaintEnd = tokenStart[ FD ]
Line_61 $$ int tokenStart = myLexer.getTokenStart()-->Line_80 $$ insertSegments.setElementAt(insertSegmentCount, tokenStart, tokenEnd, data)[ FD ]
Line_75 $$ repaintEnd = tokenStart-->Line_107 $$ myEditor.repaint(startOffset, repaintEnd)[ FD ]
Line_21 $$ int startIndex = oldStartIndex-->Line_45 $$ if (mySegments.getSegmentStart(startIndex) != tokenStart || mySegments.getSegmentEnd(startIndex) != tokenEnd || mySegments.getSegmentData(startIndex) != data) [ FD ]
Line_71 $$ if (tokenStart >= newEndOffset && lexerState == myInitialState) -->Line_74 $$ if (mySegments.getSegmentStart(index) == shiftedTokenStart && mySegments.getSegmentData(index) == data) [ CD ]
Line_86 $$ while (insertSegmentCount > 0 && oldEndIndex > startIndex) -->Line_87 $$ if (!segmentsEqual(mySegments, oldEndIndex - 1, insertSegments, insertSegmentCount - 1, shift)) [ CD ]
Line_52 $$ lastLexerState = lexerState-->Line_67 $$ lastLexerState = lexerState[ FD ]
Line_76 $$ oldEndIndex = index-->Line_91 $$ oldEndIndex--[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_14 $$ final int segmentIndex[ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_4 $$ if (document instanceof DocumentEx && ((DocumentEx) document).isInBulkUpdate()) [ CD ]
Line_60 $$ while (myLexer.getTokenType() != null) -->Line_81 $$ insertSegmentCount++[ CD ]
Line_86 $$ while (insertSegmentCount > 0 && oldEndIndex > startIndex) -->Line_91 $$ oldEndIndex--[ CD ]
Line_38 $$ int tokenStart = myLexer.getTokenStart()-->Line_75 $$ repaintEnd = tokenStart[ FD ]
Line_60 $$ while (myLexer.getTokenType() != null) -->Line_68 $$ lastTokenType = myLexer.getTokenType()[ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_104 $$ if (insertSegmentCount == 0 || oldEndIndex == startIndex + 1 && insertSegmentCount == 1 && data == mySegments.getSegmentData(startIndex)) [ CD ]
Line_21 $$ int startIndex = oldStartIndex-->Line_104 $$ if (insertSegmentCount == 0 || oldEndIndex == startIndex + 1 && insertSegmentCount == 1 && data == mySegments.getSegmentData(startIndex)) [ FD ]
Line_35 $$ while (myLexer.getTokenType() != null) -->Line_49 $$ lastTokenType = myLexer.getTokenType()[ CD ]
Line_34 $$ IElementType lastTokenType = null-->Line_58 $$ lastTokenType = null[ FD ]
Line_21 $$ int startIndex = oldStartIndex-->Line_36 $$ if (startIndex >= oldStartIndex)[ FD ]
Line_58 $$ lastTokenType = null-->Line_68 $$ lastTokenType = myLexer.getTokenType()[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_12 $$ CharSequence text = document.getCharsSequence()[ CD ]
Line_59 $$ SegmentArrayWithData insertSegments = new SegmentArrayWithData()-->Line_103 $$ mySegments.replace(startIndex, oldEndIndex, insertSegments)[ FD ]
Line_75 $$ repaintEnd = tokenStart-->Line_97 $$ repaintEnd = text.length()[ FD ]
Line_57 $$ int oldEndIndex = -1-->Line_102 $$ mySegments.shiftSegments(oldEndIndex, shift)[ FD ]
Line_32 $$ int lastTokenStart = -1-->Line_66 $$ lastTokenStart = tokenStart[ FD ]
Line_35 $$ while (myLexer.getTokenType() != null) -->Line_45 $$ if (mySegments.getSegmentStart(startIndex) != tokenStart || mySegments.getSegmentEnd(startIndex) != tokenEnd || mySegments.getSegmentData(startIndex) != data) [ CD ]
Line_60 $$ while (myLexer.getTokenType() != null) -->Line_70 $$ data = packData(myLexer.getTokenType(), lexerState)[ CD ]
Line_20 $$ final int oldStartIndex = Math.max(0, segmentIndex)-->Line_36 $$ if (startIndex >= oldStartIndex)[ FD ]
Line_56 $$ int insertSegmentCount = 0-->Line_81 $$ insertSegmentCount++[ FD ]
Line_86 $$ while (insertSegmentCount > 0 && oldEndIndex > startIndex) -->Line_90 $$ insertSegmentCount--[ CD ]
Line_33 $$ int lastLexerState = -1-->Line_67 $$ lastLexerState = lexerState[ FD ]
Line_22 $$ int data-->Line_80 $$ insertSegments.setElementAt(insertSegmentCount, tokenStart, tokenEnd, data)[ FD ]
Line_38 $$ int tokenStart = myLexer.getTokenStart()-->Line_66 $$ lastTokenStart = tokenStart[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_54 $$ startOffset = mySegments.getSegmentStart(startIndex)[ CD ]
Line_34 $$ IElementType lastTokenType = null-->Line_49 $$ lastTokenType = myLexer.getTokenType()[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_57 $$ int oldEndIndex = -1[ CD ]
Line_96 $$ if (repaintEnd == -1) -->Line_97 $$ repaintEnd = text.length()[ CD ]
Line_55 $$ int repaintEnd = -1-->Line_107 $$ myEditor.repaint(startOffset, repaintEnd)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_33 $$ int lastLexerState = -1[ CD ]
Line_71 $$ if (tokenStart >= newEndOffset && lexerState == myInitialState) -->Line_72 $$ int shiftedTokenStart = tokenStart - e.getNewLength() + e.getOldLength()[ CD ]
Line_21 $$ int startIndex = oldStartIndex-->Line_48 $$ startIndex++[ FD ]
Line_55 $$ int repaintEnd = -1-->Line_75 $$ repaintEnd = tokenStart[ FD ]
Line_55 $$ int repaintEnd = -1-->Line_96 $$ if (repaintEnd == -1) [ FD ]
Line_56 $$ int insertSegmentCount = 0-->Line_80 $$ insertSegments.setElementAt(insertSegmentCount, tokenStart, tokenEnd, data)[ FD ]
Line_44 $$ data = packData(myLexer.getTokenType(), lexerState)-->Line_70 $$ data = packData(myLexer.getTokenType(), lexerState)[ FD ]
Line_62 $$ int lexerState = myLexer.getState()-->Line_67 $$ lastLexerState = lexerState[ FD ]
Line_24 $$ data = mySegments.getSegmentData(startIndex)-->Line_25 $$ if (isInitialState(data) || startIndex == 0)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_30 $$ int newEndOffset = e.getOffset() + e.getNewLength()[ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_72 $$ int shiftedTokenStart = tokenStart - e.getNewLength() + e.getOldLength()[ FD ]
Line_35 $$ while (myLexer.getTokenType() != null) -->Line_39 $$ int lexerState = myLexer.getState()[ CD ]
Line_73 $$ int index = mySegments.findSegmentIndex(shiftedTokenStart)-->Line_76 $$ oldEndIndex = index[ FD ]
Line_56 $$ int insertSegmentCount = 0-->Line_92 $$ repaintEnd = insertSegments.getSegmentStart(insertSegmentCount)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_58 $$ lastTokenType = null[ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_103 $$ mySegments.replace(startIndex, oldEndIndex, insertSegments)[ CD ]
Line_84 $$ final int shift = e.getNewLength() - e.getOldLength()-->Line_102 $$ mySegments.shiftSegments(oldEndIndex, shift)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_35 $$ while (myLexer.getTokenType() != null) [ CD ]
Line_57 $$ int oldEndIndex = -1-->Line_91 $$ oldEndIndex--[ FD ]
Line_57 $$ int oldEndIndex = -1-->Line_100 $$ oldEndIndex = mySegments.getSegmentCount()[ FD ]
Line_35 $$ while (myLexer.getTokenType() != null) -->Line_52 $$ lastLexerState = lexerState[ CD ]
Line_55 $$ int repaintEnd = -1-->Line_92 $$ repaintEnd = insertSegments.getSegmentStart(insertSegmentCount)[ FD ]
Line_12 $$ CharSequence text = document.getCharsSequence()-->Line_31 $$ myLexer.start(text, startOffset, text.length(), myInitialState)[ FD ]
Line_4 $$ if (document instanceof DocumentEx && ((DocumentEx) document).isInBulkUpdate()) -->Line_5 $$ mySegments.removeAll()[ CD ]
Line_73 $$ int index = mySegments.findSegmentIndex(shiftedTokenStart)-->Line_74 $$ if (mySegments.getSegmentStart(index) == shiftedTokenStart && mySegments.getSegmentData(index) == data) [ FD ]
Line_100 $$ oldEndIndex = mySegments.getSegmentCount()-->Line_103 $$ mySegments.replace(startIndex, oldEndIndex, insertSegments)[ FD ]
Line_97 $$ repaintEnd = text.length()-->Line_107 $$ myEditor.repaint(startOffset, repaintEnd)[ FD ]
Line_99 $$ if (oldEndIndex < 0) -->Line_100 $$ oldEndIndex = mySegments.getSegmentCount()[ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_85 $$ if (repaintEnd > 0) [ CD ]
Line_92 $$ repaintEnd = insertSegments.getSegmentStart(insertSegmentCount)-->Line_107 $$ myEditor.repaint(startOffset, repaintEnd)[ FD ]
Line_35 $$ while (myLexer.getTokenType() != null) -->Line_36 $$ if (startIndex >= oldStartIndex)[ CD ]
Line_39 $$ int lexerState = myLexer.getState()-->Line_67 $$ lastLexerState = lexerState[ FD ]
Line_56 $$ int insertSegmentCount = 0-->Line_90 $$ insertSegmentCount--[ FD ]
Line_22 $$ int data-->Line_44 $$ data = packData(myLexer.getTokenType(), lexerState)[ FD ]
Line_21 $$ int startIndex = oldStartIndex-->Line_29 $$ int startOffset = mySegments.getSegmentStart(startIndex)[ FD ]
Line_22 $$ int data-->Line_24 $$ data = mySegments.getSegmentData(startIndex)[ FD ]
Line_59 $$ SegmentArrayWithData insertSegments = new SegmentArrayWithData()-->Line_93 $$ insertSegments.remove(insertSegmentCount, insertSegmentCount + 1)[ FD ]
Line_21 $$ int startIndex = oldStartIndex-->Line_27 $$ startIndex--[ FD ]
Line_57 $$ int oldEndIndex = -1-->Line_76 $$ oldEndIndex = index[ FD ]
Line_86 $$ while (insertSegmentCount > 0 && oldEndIndex > startIndex) -->Line_92 $$ repaintEnd = insertSegments.getSegmentStart(insertSegmentCount)[ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_20 $$ final int oldStartIndex = Math.max(0, segmentIndex)[ CD ]
Line_76 $$ oldEndIndex = index-->Line_100 $$ oldEndIndex = mySegments.getSegmentCount()[ FD ]
Line_59 $$ SegmentArrayWithData insertSegments = new SegmentArrayWithData()-->Line_80 $$ insertSegments.setElementAt(insertSegmentCount, tokenStart, tokenEnd, data)[ FD ]
Line_21 $$ int startIndex = oldStartIndex-->Line_24 $$ data = mySegments.getSegmentData(startIndex)[ FD ]
Line_21 $$ int startIndex = oldStartIndex-->Line_54 $$ startOffset = mySegments.getSegmentStart(startIndex)[ FD ]
Line_8 $$ if (mySegments.getSegmentCount() == 0) -->Line_10 $$ return[ CD ]
Line_3 $$ final Document document = e.getDocument()-->Line_12 $$ CharSequence text = document.getCharsSequence()[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_60 $$ while (myLexer.getTokenType() != null) [ CD ]
Line_92 $$ repaintEnd = insertSegments.getSegmentStart(insertSegmentCount)-->Line_97 $$ repaintEnd = text.length()[ FD ]
Line_22 $$ int data-->Line_25 $$ if (isInitialState(data) || startIndex == 0)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_102 $$ mySegments.shiftSegments(oldEndIndex, shift)[ CD ]
Line_39 $$ int lexerState = myLexer.getState()-->Line_44 $$ data = packData(myLexer.getTokenType(), lexerState)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_96 $$ if (repaintEnd == -1) [ CD ]
Line_104 $$ if (insertSegmentCount == 0 || oldEndIndex == startIndex + 1 && insertSegmentCount == 1 && data == mySegments.getSegmentData(startIndex)) -->Line_105 $$ return[ CD ]
Line_23 $$ do -->Line_27 $$ startIndex--[ CD ]
Line_29 $$ int startOffset = mySegments.getSegmentStart(startIndex)-->Line_54 $$ startOffset = mySegments.getSegmentStart(startIndex)[ FD ]
Line_35 $$ while (myLexer.getTokenType() != null) -->Line_38 $$ int tokenStart = myLexer.getTokenStart()[ CD ]
Line_60 $$ while (myLexer.getTokenType() != null) -->Line_71 $$ if (tokenStart >= newEndOffset && lexerState == myInitialState) [ CD ]
Line_39 $$ int lexerState = myLexer.getState()-->Line_70 $$ data = packData(myLexer.getTokenType(), lexerState)[ FD ]
Line_74 $$ if (mySegments.getSegmentStart(index) == shiftedTokenStart && mySegments.getSegmentData(index) == data) -->Line_75 $$ repaintEnd = tokenStart[ CD ]
Line_35 $$ while (myLexer.getTokenType() != null) -->Line_48 $$ startIndex++[ CD ]
Line_14 $$ final int segmentIndex-->Line_20 $$ final int oldStartIndex = Math.max(0, segmentIndex)[ FD ]
Line_76 $$ oldEndIndex = index-->Line_102 $$ mySegments.shiftSegments(oldEndIndex, shift)[ FD ]
Line_76 $$ oldEndIndex = index-->Line_99 $$ if (oldEndIndex < 0) [ FD ]
Line_84 $$ final int shift = e.getNewLength() - e.getOldLength()-->Line_87 $$ if (!segmentsEqual(mySegments, oldEndIndex - 1, insertSegments, insertSegmentCount - 1, shift)) [ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_21 $$ int startIndex = oldStartIndex[ CD ]
Line_35 $$ while (myLexer.getTokenType() != null) -->Line_51 $$ lastTokenStart = tokenStart[ CD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_59 $$ SegmentArrayWithData insertSegments = new SegmentArrayWithData()[ CD ]
Line_100 $$ oldEndIndex = mySegments.getSegmentCount()-->Line_102 $$ mySegments.shiftSegments(oldEndIndex, shift)[ FD ]
Line_33 $$ int lastLexerState = -1-->Line_52 $$ lastLexerState = lexerState[ FD ]
Line_59 $$ SegmentArrayWithData insertSegments = new SegmentArrayWithData()-->Line_92 $$ repaintEnd = insertSegments.getSegmentStart(insertSegmentCount)[ FD ]
Line_35 $$ while (myLexer.getTokenType() != null) -->Line_50 $$ myLexer.advance()[ CD ]
Line_16 $$ segmentIndex = mySegments.findSegmentIndex(oldStartOffset) - 2-->Line_20 $$ final int oldStartIndex = Math.max(0, segmentIndex)[ FD ]
Line_2 $$ public synchronized void documentChanged(DocumentEvent e) -->Line_3 $$ final Document document = e.getDocument()[ FD ]
Line_3 $$ final Document document = e.getDocument()-->Line_41 $$ throw new IllegalStateException("Error while updating lexer: " + e + " document text: " + document.getText())[ FD ]
