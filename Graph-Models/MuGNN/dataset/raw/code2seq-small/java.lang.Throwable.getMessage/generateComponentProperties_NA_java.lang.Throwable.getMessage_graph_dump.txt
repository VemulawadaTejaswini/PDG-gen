Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_48 $$ throw new CodeGenerationException(lwComponent.getId(), e.getMessage(), e)[ FD ]
Line_4 $$ for (int i = 0; i < introspectedProperties.length; i++) -->Line_52 $$ Type setterArgType[ CD ]
Line_4 $$ for (int i = 0; i < introspectedProperties.length; i++) -->Line_51 $$ Object value = lwComponent.getPropertyValue(property)[ CD ]
Line_62 $$ if (propertyClass.equals(Float.class.getName())) -->Line_63 $$ generator.push(((Float) value).floatValue())[ CD ]
Line_52 $$ Type setterArgType-->Line_64 $$ setterArgType = Type.FLOAT_TYPE[ FD ]
Line_4 $$ for (int i = 0; i < introspectedProperties.length; i++) -->Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()[ CD ]
Line_12 $$ final String descriptor-->Line_18 $$ descriptor = "(D)V"[ FD ]
Line_27 $$ if (propertyClass.equals(Character.class.getName())) -->Line_30 $$ descriptor = "(L" + Class.forName(propertyClass).getName().replace('.', '/') + ";)V"[ CD ]
Line_18 $$ descriptor = "(D)V"-->Line_28 $$ descriptor = "(C)V"[ FD ]
Line_18 $$ descriptor = "(D)V"-->Line_26 $$ descriptor = "(S)V"[ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_21 $$ if (propertyClass.equals(Long.class.getName())) [ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_65 $$ if (propertyClass.equals(Long.class.getName())) [ FD ]
Line_61 $$ setterArgType = Type.DOUBLE_TYPE-->Line_82 $$ setterArgType = typeFromClassName(property.getPropertyClassName())[ FD ]
Line_16 $$ descriptor = "(Z)V"-->Line_20 $$ descriptor = "(F)V"[ FD ]
Line_84 $$ Type declaringType = (property.getDeclaringClassName() != null) ? typeFromClassName(property.getDeclaringClassName()) : Type.getType(componentClass.getDescriptor())-->Line_85 $$ generator.invokeVirtual(declaringType, new Method(property.getWriteMethodName(), Type.VOID_TYPE, new Type[] [ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_25 $$ if (propertyClass.equals(Short.class.getName())) [ FD ]
Line_74 $$ if (propertyClass.equals(Character.class.getName())) -->Line_82 $$ setterArgType = typeFromClassName(property.getPropertyClassName())[ CD ]
Line_58 $$ setterArgType = Type.BOOLEAN_TYPE-->Line_64 $$ setterArgType = Type.FLOAT_TYPE[ FD ]
Line_18 $$ descriptor = "(D)V"-->Line_22 $$ descriptor = "(L)V"[ FD ]
Line_67 $$ setterArgType = Type.LONG_TYPE-->Line_82 $$ setterArgType = typeFromClassName(property.getPropertyClassName())[ FD ]
Line_73 $$ setterArgType = Type.BYTE_TYPE-->Line_82 $$ setterArgType = typeFromClassName(property.getPropertyClassName())[ FD ]
Line_4 $$ for (int i = 0; i < introspectedProperties.length; i++) -->Line_84 $$ Type declaringType = (property.getDeclaringClassName() != null) ? typeFromClassName(property.getDeclaringClassName()) : Type.getType(componentClass.getDescriptor())[ CD ]
Line_67 $$ setterArgType = Type.LONG_TYPE-->Line_73 $$ setterArgType = Type.BYTE_TYPE[ FD ]
Line_26 $$ descriptor = "(S)V"-->Line_30 $$ descriptor = "(L" + Class.forName(propertyClass).getName().replace('.', '/') + ";)V"[ FD ]
Line_18 $$ descriptor = "(D)V"-->Line_24 $$ descriptor = "(B)V"[ FD ]
Line_5 $$ final LwIntrospectedProperty property = introspectedProperties[i]-->Line_42 $$ if (propGen != null && propGen.generateCustomSetValue(lwComponent, componentClass, property, generator, componentLocal, myClassName)) [ FD ]
Line_52 $$ Type setterArgType-->Line_67 $$ setterArgType = Type.LONG_TYPE[ FD ]
Line_16 $$ descriptor = "(Z)V"-->Line_26 $$ descriptor = "(S)V"[ FD ]
Line_58 $$ setterArgType = Type.BOOLEAN_TYPE-->Line_73 $$ setterArgType = Type.BYTE_TYPE[ FD ]
Line_40 $$ final PropertyCodeGenerator propGen = (PropertyCodeGenerator) myPropertyCodeGenerators.get(propertyClass)-->Line_42 $$ if (propGen != null && propGen.generateCustomSetValue(lwComponent, componentClass, property, generator, componentLocal, myClassName)) [ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_50 $$ generator.loadLocal(componentLocal)[ FD ]
Line_53 $$ if (propertyClass.equals(Integer.class.getName())) -->Line_54 $$ generator.push(((Integer) value).intValue())[ CD ]
Line_61 $$ setterArgType = Type.DOUBLE_TYPE-->Line_70 $$ setterArgType = Type.SHORT_TYPE[ FD ]
Line_70 $$ setterArgType = Type.SHORT_TYPE-->Line_76 $$ setterArgType = Type.CHAR_TYPE[ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_30 $$ descriptor = "(L" + Class.forName(propertyClass).getName().replace('.', '/') + ";)V"[ FD ]
Line_18 $$ descriptor = "(D)V"-->Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)[ FD ]
Line_71 $$ if (propertyClass.equals(Byte.class.getName())) -->Line_74 $$ if (propertyClass.equals(Character.class.getName())) [ CD ]
Line_19 $$ if (propertyClass.equals(Float.class.getName())) -->Line_20 $$ descriptor = "(F)V"[ CD ]
Line_14 $$ descriptor = "(I)V"-->Line_18 $$ descriptor = "(D)V"[ FD ]
Line_52 $$ Type setterArgType-->Line_55 $$ setterArgType = Type.INT_TYPE[ FD ]
Line_28 $$ descriptor = "(C)V"-->Line_30 $$ descriptor = "(L" + Class.forName(propertyClass).getName().replace('.', '/') + ";)V"[ FD ]
Line_74 $$ if (propertyClass.equals(Character.class.getName())) -->Line_78 $$ if (propGen == null) [ CD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_42 $$ if (propGen != null && propGen.generateCustomSetValue(lwComponent, componentClass, property, generator, componentLocal, myClassName)) [ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_59 $$ if (propertyClass.equals(Double.class.getName())) [ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_63 $$ generator.push(((Float) value).floatValue())[ FD ]
Line_14 $$ descriptor = "(I)V"-->Line_26 $$ descriptor = "(S)V"[ FD ]
Line_56 $$ if (propertyClass.equals(Boolean.class.getName())) -->Line_58 $$ setterArgType = Type.BOOLEAN_TYPE[ CD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_27 $$ if (propertyClass.equals(Character.class.getName())) [ FD ]
Line_20 $$ descriptor = "(F)V"-->Line_24 $$ descriptor = "(B)V"[ FD ]
Line_17 $$ if (propertyClass.equals(Double.class.getName())) -->Line_18 $$ descriptor = "(D)V"[ CD ]
Line_24 $$ descriptor = "(B)V"-->Line_26 $$ descriptor = "(S)V"[ FD ]
Line_65 $$ if (propertyClass.equals(Long.class.getName())) -->Line_68 $$ if (propertyClass.equals(Short.class.getName())) [ CD ]
Line_15 $$ if (propertyClass.equals(Boolean.class.getName())) -->Line_16 $$ descriptor = "(Z)V"[ CD ]
Line_74 $$ if (propertyClass.equals(Character.class.getName())) -->Line_76 $$ setterArgType = Type.CHAR_TYPE[ CD ]
Line_22 $$ descriptor = "(L)V"-->Line_30 $$ descriptor = "(L" + Class.forName(propertyClass).getName().replace('.', '/') + ";)V"[ FD ]
Line_68 $$ if (propertyClass.equals(Short.class.getName())) -->Line_69 $$ generator.push(((Short) value).intValue())[ CD ]
Line_16 $$ descriptor = "(Z)V"-->Line_24 $$ descriptor = "(B)V"[ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_51 $$ Object value = lwComponent.getPropertyValue(property)[ FD ]
Line_4 $$ for (int i = 0; i < introspectedProperties.length; i++) -->Line_5 $$ final LwIntrospectedProperty property = introspectedProperties[i][ CD ]
Line_5 $$ final LwIntrospectedProperty property = introspectedProperties[i]-->Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()[ FD ]
Line_30 $$ descriptor = "(L" + Class.forName(propertyClass).getName().replace('.', '/') + ";)V"-->Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)[ FD ]
Line_5 $$ final LwIntrospectedProperty property = introspectedProperties[i]-->Line_82 $$ setterArgType = typeFromClassName(property.getPropertyClassName())[ FD ]
Line_55 $$ setterArgType = Type.INT_TYPE-->Line_67 $$ setterArgType = Type.LONG_TYPE[ FD ]
Line_12 $$ final String descriptor-->Line_16 $$ descriptor = "(Z)V"[ FD ]
Line_20 $$ descriptor = "(F)V"-->Line_30 $$ descriptor = "(L" + Class.forName(propertyClass).getName().replace('.', '/') + ";)V"[ FD ]
Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)-->Line_33 $$ if (setter == null) [ FD ]
Line_12 $$ final String descriptor-->Line_28 $$ descriptor = "(C)V"[ FD ]
Line_26 $$ descriptor = "(S)V"-->Line_28 $$ descriptor = "(C)V"[ FD ]
Line_64 $$ setterArgType = Type.FLOAT_TYPE-->Line_76 $$ setterArgType = Type.CHAR_TYPE[ FD ]
Line_64 $$ setterArgType = Type.FLOAT_TYPE-->Line_67 $$ setterArgType = Type.LONG_TYPE[ FD ]
Line_58 $$ setterArgType = Type.BOOLEAN_TYPE-->Line_70 $$ setterArgType = Type.SHORT_TYPE[ FD ]
Line_55 $$ setterArgType = Type.INT_TYPE-->Line_61 $$ setterArgType = Type.DOUBLE_TYPE[ FD ]
Line_23 $$ if (propertyClass.equals(Byte.class.getName())) -->Line_24 $$ descriptor = "(B)V"[ CD ]
Line_26 $$ descriptor = "(S)V"-->Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)[ FD ]
Line_58 $$ setterArgType = Type.BOOLEAN_TYPE-->Line_61 $$ setterArgType = Type.DOUBLE_TYPE[ FD ]
Line_5 $$ final LwIntrospectedProperty property = introspectedProperties[i]-->Line_84 $$ Type declaringType = (property.getDeclaringClassName() != null) ? typeFromClassName(property.getDeclaringClassName()) : Type.getType(componentClass.getDescriptor())[ FD ]
Line_71 $$ if (propertyClass.equals(Byte.class.getName())) -->Line_72 $$ generator.push(((Byte) value).intValue())[ CD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_13 $$ if (propertyClass.equals(Integer.class.getName())) [ FD ]
Line_4 $$ for (int i = 0; i < introspectedProperties.length; i++) -->Line_10 $$ if (myIgnoreCustomCreation) [ CD ]
Line_14 $$ descriptor = "(I)V"-->Line_22 $$ descriptor = "(L)V"[ FD ]
Line_55 $$ setterArgType = Type.INT_TYPE-->Line_58 $$ setterArgType = Type.BOOLEAN_TYPE[ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_62 $$ if (propertyClass.equals(Float.class.getName())) [ FD ]
Line_52 $$ Type setterArgType-->Line_61 $$ setterArgType = Type.DOUBLE_TYPE[ FD ]
Line_40 $$ final PropertyCodeGenerator propGen = (PropertyCodeGenerator) myPropertyCodeGenerators.get(propertyClass)-->Line_78 $$ if (propGen == null) [ FD ]
Line_58 $$ setterArgType = Type.BOOLEAN_TYPE-->Line_82 $$ setterArgType = typeFromClassName(property.getPropertyClassName())[ FD ]
Line_76 $$ setterArgType = Type.CHAR_TYPE-->Line_82 $$ setterArgType = typeFromClassName(property.getPropertyClassName())[ FD ]
Line_14 $$ descriptor = "(I)V"-->Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)[ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_53 $$ if (propertyClass.equals(Integer.class.getName())) [ FD ]
Line_61 $$ setterArgType = Type.DOUBLE_TYPE-->Line_64 $$ setterArgType = Type.FLOAT_TYPE[ FD ]
Line_70 $$ setterArgType = Type.SHORT_TYPE-->Line_82 $$ setterArgType = typeFromClassName(property.getPropertyClassName())[ FD ]
Line_24 $$ descriptor = "(B)V"-->Line_30 $$ descriptor = "(L" + Class.forName(propertyClass).getName().replace('.', '/') + ";)V"[ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_66 $$ generator.push(((Long) value).longValue())[ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_19 $$ if (propertyClass.equals(Float.class.getName())) [ FD ]
Line_23 $$ if (propertyClass.equals(Byte.class.getName())) -->Line_25 $$ if (propertyClass.equals(Short.class.getName())) [ CD ]
Line_12 $$ final String descriptor-->Line_24 $$ descriptor = "(B)V"[ FD ]
Line_61 $$ setterArgType = Type.DOUBLE_TYPE-->Line_76 $$ setterArgType = Type.CHAR_TYPE[ FD ]
Line_70 $$ setterArgType = Type.SHORT_TYPE-->Line_73 $$ setterArgType = Type.BYTE_TYPE[ FD ]
Line_40 $$ final PropertyCodeGenerator propGen = (PropertyCodeGenerator) myPropertyCodeGenerators.get(propertyClass)-->Line_81 $$ propGen.generatePushValue(generator, value)[ FD ]
Line_52 $$ Type setterArgType-->Line_73 $$ setterArgType = Type.BYTE_TYPE[ FD ]
Line_14 $$ descriptor = "(I)V"-->Line_28 $$ descriptor = "(C)V"[ FD ]
Line_73 $$ setterArgType = Type.BYTE_TYPE-->Line_76 $$ setterArgType = Type.CHAR_TYPE[ FD ]
Line_55 $$ setterArgType = Type.INT_TYPE-->Line_64 $$ setterArgType = Type.FLOAT_TYPE[ FD ]
Line_51 $$ Object value = lwComponent.getPropertyValue(property)-->Line_81 $$ propGen.generatePushValue(generator, value)[ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_46 $$ throw new CodeGenerationException(lwComponent.getId(), e.getMessage(), e)[ FD ]
Line_68 $$ if (propertyClass.equals(Short.class.getName())) -->Line_71 $$ if (propertyClass.equals(Byte.class.getName())) [ CD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)[ FD ]
Line_52 $$ Type setterArgType-->Line_58 $$ setterArgType = Type.BOOLEAN_TYPE[ FD ]
Line_15 $$ if (propertyClass.equals(Boolean.class.getName())) -->Line_17 $$ if (propertyClass.equals(Double.class.getName())) [ CD ]
Line_21 $$ if (propertyClass.equals(Long.class.getName())) -->Line_23 $$ if (propertyClass.equals(Byte.class.getName())) [ CD ]
Line_20 $$ descriptor = "(F)V"-->Line_26 $$ descriptor = "(S)V"[ FD ]
Line_59 $$ if (propertyClass.equals(Double.class.getName())) -->Line_61 $$ setterArgType = Type.DOUBLE_TYPE[ CD ]
Line_12 $$ final String descriptor-->Line_14 $$ descriptor = "(I)V"[ FD ]
Line_52 $$ Type setterArgType-->Line_82 $$ setterArgType = typeFromClassName(property.getPropertyClassName())[ FD ]
Line_22 $$ descriptor = "(L)V"-->Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)[ FD ]
Line_18 $$ descriptor = "(D)V"-->Line_20 $$ descriptor = "(F)V"[ FD ]
Line_22 $$ descriptor = "(L)V"-->Line_24 $$ descriptor = "(B)V"[ FD ]
Line_4 $$ for (int i = 0; i < introspectedProperties.length; i++) -->Line_40 $$ final PropertyCodeGenerator propGen = (PropertyCodeGenerator) myPropertyCodeGenerators.get(propertyClass)[ CD ]
Line_53 $$ if (propertyClass.equals(Integer.class.getName())) -->Line_56 $$ if (propertyClass.equals(Boolean.class.getName())) [ CD ]
Line_17 $$ if (propertyClass.equals(Double.class.getName())) -->Line_19 $$ if (propertyClass.equals(Float.class.getName())) [ CD ]
Line_12 $$ final String descriptor-->Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)[ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_69 $$ generator.push(((Short) value).intValue())[ FD ]
Line_62 $$ if (propertyClass.equals(Float.class.getName())) -->Line_65 $$ if (propertyClass.equals(Long.class.getName())) [ CD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_87 $$ generateClientProperties(lwComponent, componentClass, generator, componentLocal)[ CD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_23 $$ if (propertyClass.equals(Byte.class.getName())) [ FD ]
Line_55 $$ setterArgType = Type.INT_TYPE-->Line_70 $$ setterArgType = Type.SHORT_TYPE[ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_74 $$ if (propertyClass.equals(Character.class.getName())) [ FD ]
Line_12 $$ final String descriptor-->Line_20 $$ descriptor = "(F)V"[ FD ]
Line_27 $$ if (propertyClass.equals(Character.class.getName())) -->Line_28 $$ descriptor = "(C)V"[ CD ]
Line_12 $$ final String descriptor-->Line_30 $$ descriptor = "(L" + Class.forName(propertyClass).getName().replace('.', '/') + ";)V"[ FD ]
Line_52 $$ Type setterArgType-->Line_76 $$ setterArgType = Type.CHAR_TYPE[ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_84 $$ Type declaringType = (property.getDeclaringClassName() != null) ? typeFromClassName(property.getDeclaringClassName()) : Type.getType(componentClass.getDescriptor())[ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_3 $$ final LwIntrospectedProperty[] introspectedProperties = lwComponent.getAssignedIntrospectedProperties()[ CD ]
Line_16 $$ descriptor = "(Z)V"-->Line_28 $$ descriptor = "(C)V"[ FD ]
Line_5 $$ final LwIntrospectedProperty property = introspectedProperties[i]-->Line_85 $$ generator.invokeVirtual(declaringType, new Method(property.getWriteMethodName(), Type.VOID_TYPE, new Type[] [ FD ]
Line_53 $$ if (propertyClass.equals(Integer.class.getName())) -->Line_55 $$ setterArgType = Type.INT_TYPE[ CD ]
Line_16 $$ descriptor = "(Z)V"-->Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)[ FD ]
Line_68 $$ if (propertyClass.equals(Short.class.getName())) -->Line_70 $$ setterArgType = Type.SHORT_TYPE[ CD ]
Line_20 $$ descriptor = "(F)V"-->Line_22 $$ descriptor = "(L)V"[ FD ]
Line_13 $$ if (propertyClass.equals(Integer.class.getName())) -->Line_14 $$ descriptor = "(I)V"[ CD ]
Line_16 $$ descriptor = "(Z)V"-->Line_30 $$ descriptor = "(L" + Class.forName(propertyClass).getName().replace('.', '/') + ";)V"[ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_57 $$ generator.push(((Boolean) value).booleanValue())[ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_75 $$ generator.push(((Character) value).charValue())[ FD ]
Line_67 $$ setterArgType = Type.LONG_TYPE-->Line_76 $$ setterArgType = Type.CHAR_TYPE[ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_17 $$ if (propertyClass.equals(Double.class.getName())) [ FD ]
Line_55 $$ setterArgType = Type.INT_TYPE-->Line_73 $$ setterArgType = Type.BYTE_TYPE[ FD ]
Line_61 $$ setterArgType = Type.DOUBLE_TYPE-->Line_73 $$ setterArgType = Type.BYTE_TYPE[ FD ]
Line_20 $$ descriptor = "(F)V"-->Line_28 $$ descriptor = "(C)V"[ FD ]
Line_5 $$ final LwIntrospectedProperty property = introspectedProperties[i]-->Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)[ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_56 $$ if (propertyClass.equals(Boolean.class.getName())) [ FD ]
Line_59 $$ if (propertyClass.equals(Double.class.getName())) -->Line_60 $$ generator.push(((Double) value).doubleValue())[ CD ]
Line_4 $$ for (int i = 0; i < introspectedProperties.length; i++) -->Line_53 $$ if (propertyClass.equals(Integer.class.getName())) [ CD ]
Line_65 $$ if (propertyClass.equals(Long.class.getName())) -->Line_66 $$ generator.push(((Long) value).longValue())[ CD ]
Line_67 $$ setterArgType = Type.LONG_TYPE-->Line_70 $$ setterArgType = Type.SHORT_TYPE[ FD ]
Line_64 $$ setterArgType = Type.FLOAT_TYPE-->Line_70 $$ setterArgType = Type.SHORT_TYPE[ FD ]
Line_14 $$ descriptor = "(I)V"-->Line_16 $$ descriptor = "(Z)V"[ FD ]
Line_55 $$ setterArgType = Type.INT_TYPE-->Line_76 $$ setterArgType = Type.CHAR_TYPE[ FD ]
Line_28 $$ descriptor = "(C)V"-->Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)[ FD ]
Line_56 $$ if (propertyClass.equals(Boolean.class.getName())) -->Line_59 $$ if (propertyClass.equals(Double.class.getName())) [ CD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_15 $$ if (propertyClass.equals(Boolean.class.getName())) [ FD ]
Line_25 $$ if (propertyClass.equals(Short.class.getName())) -->Line_26 $$ descriptor = "(S)V"[ CD ]
Line_65 $$ if (propertyClass.equals(Long.class.getName())) -->Line_67 $$ setterArgType = Type.LONG_TYPE[ CD ]
Line_14 $$ descriptor = "(I)V"-->Line_24 $$ descriptor = "(B)V"[ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_3 $$ final LwIntrospectedProperty[] introspectedProperties = lwComponent.getAssignedIntrospectedProperties()[ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_40 $$ final PropertyCodeGenerator propGen = (PropertyCodeGenerator) myPropertyCodeGenerators.get(propertyClass)[ FD ]
Line_59 $$ if (propertyClass.equals(Double.class.getName())) -->Line_62 $$ if (propertyClass.equals(Float.class.getName())) [ CD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_4 $$ for (int i = 0; i < introspectedProperties.length; i++) [ CD ]
Line_19 $$ if (propertyClass.equals(Float.class.getName())) -->Line_21 $$ if (propertyClass.equals(Long.class.getName())) [ CD ]
Line_22 $$ descriptor = "(L)V"-->Line_28 $$ descriptor = "(C)V"[ FD ]
Line_24 $$ descriptor = "(B)V"-->Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)[ FD ]
Line_12 $$ final String descriptor-->Line_26 $$ descriptor = "(S)V"[ FD ]
Line_24 $$ descriptor = "(B)V"-->Line_28 $$ descriptor = "(C)V"[ FD ]
Line_52 $$ Type setterArgType-->Line_70 $$ setterArgType = Type.SHORT_TYPE[ FD ]
Line_55 $$ setterArgType = Type.INT_TYPE-->Line_82 $$ setterArgType = typeFromClassName(property.getPropertyClassName())[ FD ]
Line_74 $$ if (propertyClass.equals(Character.class.getName())) -->Line_81 $$ propGen.generatePushValue(generator, value)[ CD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_54 $$ generator.push(((Integer) value).intValue())[ FD ]
Line_14 $$ descriptor = "(I)V"-->Line_20 $$ descriptor = "(F)V"[ FD ]
Line_14 $$ descriptor = "(I)V"-->Line_30 $$ descriptor = "(L" + Class.forName(propertyClass).getName().replace('.', '/') + ";)V"[ FD ]
Line_58 $$ setterArgType = Type.BOOLEAN_TYPE-->Line_67 $$ setterArgType = Type.LONG_TYPE[ FD ]
Line_64 $$ setterArgType = Type.FLOAT_TYPE-->Line_82 $$ setterArgType = typeFromClassName(property.getPropertyClassName())[ FD ]
Line_4 $$ for (int i = 0; i < introspectedProperties.length; i++) -->Line_50 $$ generator.loadLocal(componentLocal)[ CD ]
Line_12 $$ final String descriptor-->Line_22 $$ descriptor = "(L)V"[ FD ]
Line_5 $$ final LwIntrospectedProperty property = introspectedProperties[i]-->Line_51 $$ Object value = lwComponent.getPropertyValue(property)[ FD ]
Line_56 $$ if (propertyClass.equals(Boolean.class.getName())) -->Line_57 $$ generator.push(((Boolean) value).booleanValue())[ CD ]
Line_16 $$ descriptor = "(Z)V"-->Line_22 $$ descriptor = "(L)V"[ FD ]
Line_58 $$ setterArgType = Type.BOOLEAN_TYPE-->Line_76 $$ setterArgType = Type.CHAR_TYPE[ FD ]
Line_74 $$ if (propertyClass.equals(Character.class.getName())) -->Line_75 $$ generator.push(((Character) value).charValue())[ CD ]
Line_22 $$ descriptor = "(L)V"-->Line_26 $$ descriptor = "(S)V"[ FD ]
Line_20 $$ descriptor = "(F)V"-->Line_32 $$ final InstrumentationClassFinder.PseudoMethod setter = componentClass.findMethodInHierarchy(property.getWriteMethodName(), descriptor)[ FD ]
Line_25 $$ if (propertyClass.equals(Short.class.getName())) -->Line_27 $$ if (propertyClass.equals(Character.class.getName())) [ CD ]
Line_4 $$ for (int i = 0; i < introspectedProperties.length; i++) -->Line_6 $$ if (property instanceof LwIntroComponentProperty) [ CD ]
Line_62 $$ if (propertyClass.equals(Float.class.getName())) -->Line_64 $$ setterArgType = Type.FLOAT_TYPE[ CD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_72 $$ generator.push(((Byte) value).intValue())[ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_81 $$ propGen.generatePushValue(generator, value)[ FD ]
Line_21 $$ if (propertyClass.equals(Long.class.getName())) -->Line_22 $$ descriptor = "(L)V"[ CD ]
Line_61 $$ setterArgType = Type.DOUBLE_TYPE-->Line_67 $$ setterArgType = Type.LONG_TYPE[ FD ]
Line_5 $$ final LwIntrospectedProperty property = introspectedProperties[i]-->Line_6 $$ if (property instanceof LwIntroComponentProperty) [ FD ]
Line_18 $$ descriptor = "(D)V"-->Line_30 $$ descriptor = "(L" + Class.forName(propertyClass).getName().replace('.', '/') + ";)V"[ FD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_68 $$ if (propertyClass.equals(Short.class.getName())) [ FD ]
Line_64 $$ setterArgType = Type.FLOAT_TYPE-->Line_73 $$ setterArgType = Type.BYTE_TYPE[ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_60 $$ generator.push(((Double) value).doubleValue())[ FD ]
Line_4 $$ for (int i = 0; i < introspectedProperties.length; i++) -->Line_85 $$ generator.invokeVirtual(declaringType, new Method(property.getWriteMethodName(), Type.VOID_TYPE, new Type[] [ CD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_87 $$ generateClientProperties(lwComponent, componentClass, generator, componentLocal)[ FD ]
Line_2 $$ private void generateComponentProperties(final LwComponent lwComponent, final InstrumentationClassFinder.PseudoClass componentClass, final GeneratorAdapter generator, final int componentLocal) throws CodeGenerationException -->Line_85 $$ generator.invokeVirtual(declaringType, new Method(property.getWriteMethodName(), Type.VOID_TYPE, new Type[] [ FD ]
Line_71 $$ if (propertyClass.equals(Byte.class.getName())) -->Line_73 $$ setterArgType = Type.BYTE_TYPE[ CD ]
Line_16 $$ descriptor = "(Z)V"-->Line_18 $$ descriptor = "(D)V"[ FD ]
Line_13 $$ if (propertyClass.equals(Integer.class.getName())) -->Line_15 $$ if (propertyClass.equals(Boolean.class.getName())) [ CD ]
Line_9 $$ final String propertyClass = property.getCodeGenPropertyClassName()-->Line_71 $$ if (propertyClass.equals(Byte.class.getName())) [ FD ]
