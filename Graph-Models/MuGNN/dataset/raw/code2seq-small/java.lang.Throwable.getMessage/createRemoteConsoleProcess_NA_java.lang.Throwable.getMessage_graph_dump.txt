Line_2 $$ private RemoteProcess createRemoteConsoleProcess(PythonRemoteInterpreterManager manager, String[] command, Map<String, String> env, File workDirectory) throws ExecutionException -->Line_7 $$ commandLine.withParameters(command)[ FD ]
Line_2 $$ private RemoteProcess createRemoteConsoleProcess(PythonRemoteInterpreterManager manager, String[] command, Map<String, String> env, File workDirectory) throws ExecutionException -->Line_11 $$ commandLine.getParametersList().set(2, "0")[ CD ]
Line_3 $$ PyRemoteSdkAdditionalDataBase data = (PyRemoteSdkAdditionalDataBase) mySdk.getSdkAdditionalData()-->Line_9 $$ commandLine.getParametersList().set(0, PythonRemoteInterpreterManager.toSystemDependent(new File(data.getHelpersPath(), PYDEV_PYDEVCONSOLE_PY).getPath(), PySourcePosition.isWindowsPath(data.getInterpreterPath())))[ FD ]
Line_2 $$ private RemoteProcess createRemoteConsoleProcess(PythonRemoteInterpreterManager manager, String[] command, Map<String, String> env, File workDirectory) throws ExecutionException -->Line_10 $$ commandLine.getParametersList().set(1, "0")[ CD ]
Line_2 $$ private RemoteProcess createRemoteConsoleProcess(PythonRemoteInterpreterManager manager, String[] command, Map<String, String> env, File workDirectory) throws ExecutionException -->Line_5 $$ GeneralCommandLine commandLine = new GeneralCommandLine()[ CD ]
Line_18 $$ RemoteProcess remoteProcess = myRemoteProcessHandlerBase.getProcess()-->Line_20 $$ if (remoteProcess instanceof Tunnelable) [ FD ]
Line_21 $$ Tunnelable tunnelableProcess = (Tunnelable) remoteProcess-->Line_23 $$ tunnelableProcess.addRemoteTunnel(remotePorts.second, "localhost", myPorts[1])[ FD ]
Line_20 $$ if (remoteProcess instanceof Tunnelable) -->Line_21 $$ Tunnelable tunnelableProcess = (Tunnelable) remoteProcess[ CD ]
Line_2 $$ private RemoteProcess createRemoteConsoleProcess(PythonRemoteInterpreterManager manager, String[] command, Map<String, String> env, File workDirectory) throws ExecutionException -->Line_8 $$ commandLine.getEnvironment().putAll(env)[ CD ]
Line_2 $$ private RemoteProcess createRemoteConsoleProcess(PythonRemoteInterpreterManager manager, String[] command, Map<String, String> env, File workDirectory) throws ExecutionException -->Line_7 $$ commandLine.withParameters(command)[ CD ]
Line_2 $$ private RemoteProcess createRemoteConsoleProcess(PythonRemoteInterpreterManager manager, String[] command, Map<String, String> env, File workDirectory) throws ExecutionException -->Line_6 $$ commandLine.setWorkDirectory(workDirectory)[ FD ]
Line_2 $$ private RemoteProcess createRemoteConsoleProcess(PythonRemoteInterpreterManager manager, String[] command, Map<String, String> env, File workDirectory) throws ExecutionException -->Line_9 $$ commandLine.getParametersList().set(0, PythonRemoteInterpreterManager.toSystemDependent(new File(data.getHelpersPath(), PYDEV_PYDEVCONSOLE_PY).getPath(), PySourcePosition.isWindowsPath(data.getInterpreterPath())))[ CD ]
Line_5 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_16 $$ myRemoteProcessHandlerBase = PyRemoteProcessStarterManagerUtil.getManager(data).startRemoteProcess(getProject(), commandLine, manager, data, pathMapper)[ FD ]
Line_2 $$ private RemoteProcess createRemoteConsoleProcess(PythonRemoteInterpreterManager manager, String[] command, Map<String, String> env, File workDirectory) throws ExecutionException -->Line_8 $$ commandLine.getEnvironment().putAll(env)[ FD ]
Line_2 $$ private RemoteProcess createRemoteConsoleProcess(PythonRemoteInterpreterManager manager, String[] command, Map<String, String> env, File workDirectory) throws ExecutionException -->Line_3 $$ PyRemoteSdkAdditionalDataBase data = (PyRemoteSdkAdditionalDataBase) mySdk.getSdkAdditionalData()[ CD ]
Line_13 $$ PyRemotePathMapper pathMapper = getPathMapper(getProject(), mySdk)-->Line_16 $$ myRemoteProcessHandlerBase = PyRemoteProcessStarterManagerUtil.getManager(data).startRemoteProcess(getProject(), commandLine, manager, data, pathMapper)[ FD ]
Line_5 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_11 $$ commandLine.getParametersList().set(2, "0")[ FD ]
Line_5 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_7 $$ commandLine.withParameters(command)[ FD ]
Line_5 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_15 $$ commandLine.putUserData(PyRemoteProcessStarter.OPEN_FOR_INCOMING_CONNECTION, true)[ FD ]
Line_18 $$ RemoteProcess remoteProcess = myRemoteProcessHandlerBase.getProcess()-->Line_19 $$ Couple<Integer> remotePorts = getRemotePortsFromProcess(remoteProcess)[ FD ]
Line_21 $$ Tunnelable tunnelableProcess = (Tunnelable) remoteProcess-->Line_22 $$ tunnelableProcess.addLocalTunnel(myPorts[0], remotePorts.first)[ FD ]
Line_5 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_6 $$ commandLine.setWorkDirectory(workDirectory)[ FD ]
Line_2 $$ private RemoteProcess createRemoteConsoleProcess(PythonRemoteInterpreterManager manager, String[] command, Map<String, String> env, File workDirectory) throws ExecutionException -->Line_6 $$ commandLine.setWorkDirectory(workDirectory)[ CD ]
Line_5 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_9 $$ commandLine.getParametersList().set(0, PythonRemoteInterpreterManager.toSystemDependent(new File(data.getHelpersPath(), PYDEV_PYDEVCONSOLE_PY).getPath(), PySourcePosition.isWindowsPath(data.getInterpreterPath())))[ FD ]
Line_3 $$ PyRemoteSdkAdditionalDataBase data = (PyRemoteSdkAdditionalDataBase) mySdk.getSdkAdditionalData()-->Line_16 $$ myRemoteProcessHandlerBase = PyRemoteProcessStarterManagerUtil.getManager(data).startRemoteProcess(getProject(), commandLine, manager, data, pathMapper)[ FD ]
Line_20 $$ if (remoteProcess instanceof Tunnelable) -->Line_22 $$ tunnelableProcess.addLocalTunnel(myPorts[0], remotePorts.first)[ CD ]
Line_20 $$ if (remoteProcess instanceof Tunnelable) -->Line_23 $$ tunnelableProcess.addRemoteTunnel(remotePorts.second, "localhost", myPorts[1])[ CD ]
Line_5 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_8 $$ commandLine.getEnvironment().putAll(env)[ FD ]
Line_2 $$ private RemoteProcess createRemoteConsoleProcess(PythonRemoteInterpreterManager manager, String[] command, Map<String, String> env, File workDirectory) throws ExecutionException -->Line_16 $$ myRemoteProcessHandlerBase = PyRemoteProcessStarterManagerUtil.getManager(data).startRemoteProcess(getProject(), commandLine, manager, data, pathMapper)[ FD ]
Line_5 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_10 $$ commandLine.getParametersList().set(1, "0")[ FD ]
