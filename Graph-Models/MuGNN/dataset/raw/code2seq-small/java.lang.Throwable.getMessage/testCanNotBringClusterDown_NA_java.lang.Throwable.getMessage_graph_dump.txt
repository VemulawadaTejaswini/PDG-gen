Line_3 $$ int nodeCount = scaledRandomIntBetween(1, 5)-->Line_15 $$ assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodeCount)).get().isTimedOut())[ FD ]
Line_3 $$ int nodeCount = scaledRandomIntBetween(1, 5)-->Line_24 $$ assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodeCount)).get().isTimedOut())[ FD ]
Line_2 $$ public void testCanNotBringClusterDown() throws ExecutionException, InterruptedException -->Line_6 $$ settings.put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), initialMinMasterNodes)[ CD ]
Line_2 $$ public void testCanNotBringClusterDown() throws ExecutionException, InterruptedException -->Line_5 $$ int initialMinMasterNodes = randomIntBetween(nodeCount / 2 + 1, nodeCount)[ CD ]
Line_3 $$ int nodeCount = scaledRandomIntBetween(1, 5)-->Line_11 $$ int updateCount = randomIntBetween(1, nodeCount)[ FD ]
Line_2 $$ public void testCanNotBringClusterDown() throws ExecutionException, InterruptedException -->Line_3 $$ int nodeCount = scaledRandomIntBetween(1, 5)[ CD ]
Line_3 $$ int nodeCount = scaledRandomIntBetween(1, 5)-->Line_10 $$ assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodeCount)).get().isTimedOut())[ FD ]
Line_3 $$ int nodeCount = scaledRandomIntBetween(1, 5)-->Line_5 $$ int initialMinMasterNodes = randomIntBetween(nodeCount / 2 + 1, nodeCount)[ FD ]
Line_2 $$ public void testCanNotBringClusterDown() throws ExecutionException, InterruptedException -->Line_4 $$ Settings.Builder settings = settingsBuilder().put("discovery.type", "zen").put(ZenDiscovery.SETTING_PING_TIMEOUT, "200ms").put("discovery.initial_state_timeout", "500ms")[ CD ]
Line_16 $$ updateCount = nodeCount + randomIntBetween(1, 2000)-->Line_19 $$ client().admin().cluster().prepareUpdateSettings().setPersistentSettings(settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), updateCount))[ FD ]
Line_2 $$ public void testCanNotBringClusterDown() throws ExecutionException, InterruptedException -->Line_15 $$ assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodeCount)).get().isTimedOut())[ CD ]
Line_2 $$ public void testCanNotBringClusterDown() throws ExecutionException, InterruptedException -->Line_16 $$ updateCount = nodeCount + randomIntBetween(1, 2000)[ CD ]
Line_4 $$ Settings.Builder settings = settingsBuilder().put("discovery.type", "zen").put(ZenDiscovery.SETTING_PING_TIMEOUT, "200ms").put("discovery.initial_state_timeout", "500ms")-->Line_8 $$ internalCluster().startNodesAsync(nodeCount, settings.build()).get()[ FD ]
Line_11 $$ int updateCount = randomIntBetween(1, nodeCount)-->Line_13 $$ assertAcked(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), updateCount)))[ FD ]
Line_2 $$ public void testCanNotBringClusterDown() throws ExecutionException, InterruptedException -->Line_13 $$ assertAcked(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), updateCount)))[ CD ]
Line_3 $$ int nodeCount = scaledRandomIntBetween(1, 5)-->Line_8 $$ internalCluster().startNodesAsync(nodeCount, settings.build()).get()[ FD ]
Line_11 $$ int updateCount = randomIntBetween(1, nodeCount)-->Line_19 $$ client().admin().cluster().prepareUpdateSettings().setPersistentSettings(settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), updateCount))[ FD ]
Line_2 $$ public void testCanNotBringClusterDown() throws ExecutionException, InterruptedException -->Line_11 $$ int updateCount = randomIntBetween(1, nodeCount)[ CD ]
Line_4 $$ Settings.Builder settings = settingsBuilder().put("discovery.type", "zen").put(ZenDiscovery.SETTING_PING_TIMEOUT, "200ms").put("discovery.initial_state_timeout", "500ms")-->Line_6 $$ settings.put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), initialMinMasterNodes)[ FD ]
Line_2 $$ public void testCanNotBringClusterDown() throws ExecutionException, InterruptedException -->Line_10 $$ assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodeCount)).get().isTimedOut())[ CD ]
Line_5 $$ int initialMinMasterNodes = randomIntBetween(nodeCount / 2 + 1, nodeCount)-->Line_6 $$ settings.put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), initialMinMasterNodes)[ FD ]
Line_11 $$ int updateCount = randomIntBetween(1, nodeCount)-->Line_16 $$ updateCount = nodeCount + randomIntBetween(1, 2000)[ FD ]
Line_2 $$ public void testCanNotBringClusterDown() throws ExecutionException, InterruptedException -->Line_8 $$ internalCluster().startNodesAsync(nodeCount, settings.build()).get()[ CD ]
Line_2 $$ public void testCanNotBringClusterDown() throws ExecutionException, InterruptedException -->Line_24 $$ assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodeCount)).get().isTimedOut())[ CD ]
Line_3 $$ int nodeCount = scaledRandomIntBetween(1, 5)-->Line_16 $$ updateCount = nodeCount + randomIntBetween(1, 2000)[ FD ]
