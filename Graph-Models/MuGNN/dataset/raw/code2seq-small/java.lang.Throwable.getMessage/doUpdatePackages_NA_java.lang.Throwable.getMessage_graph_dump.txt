Line_21 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_23 $$ if (packageManagementService == myPackageManagementService) [ CD ]
Line_14 $$ final Map<String, RepoPackage> cache = buildNameToPackageMap(packageManagementService.getAllPackagesCached())-->Line_26 $$ RepoPackage repoPackage = cache.get(pkg.getName())[ FD ]
Line_23 $$ if (packageManagementService == myPackageManagementService) -->Line_24 $$ myPackagesTableModel.getDataVector().clear()[ CD ]
Line_25 $$ for (InstalledPackage pkg : finalPackages) -->Line_28 $$ myPackagesTableModel.addRow(new Object[] [ FD ]
Line_30 $$ if (!cache.isEmpty()) -->Line_31 $$ onUpdateFinished()[ CD ]
Line_14 $$ final Map<String, RepoPackage> cache = buildNameToPackageMap(packageManagementService.getAllPackagesCached())-->Line_30 $$ if (!cache.isEmpty()) [ FD ]
Line_5 $$ application.executeOnPooledThread(new Runnable() -->Line_7 $$ Collection<InstalledPackage> packages = Lists.newArrayList()[ CD ]
Line_23 $$ if (packageManagementService == myPackageManagementService) -->Line_30 $$ if (!cache.isEmpty()) [ CD ]
Line_2 $$ public void doUpdatePackages(@NotNull final PackageManagementService packageManagementService) -->Line_5 $$ application.executeOnPooledThread(new Runnable() [ CD ]
Line_16 $$ if (cache.isEmpty()) -->Line_17 $$ if (!shouldFetchLatestVersionsForOnlyInstalledPackages) [ CD ]
Line_2 $$ public void doUpdatePackages(@NotNull final PackageManagementService packageManagementService) -->Line_18 $$ refreshLatestVersions(packageManagementService)[ FD ]
Line_4 $$ final Application application = ApplicationManager.getApplication()-->Line_5 $$ application.executeOnPooledThread(new Runnable() [ FD ]
Line_2 $$ public void doUpdatePackages(@NotNull final PackageManagementService packageManagementService) -->Line_14 $$ final Map<String, RepoPackage> cache = buildNameToPackageMap(packageManagementService.getAllPackagesCached())[ FD ]
Line_15 $$ final boolean shouldFetchLatestVersionsForOnlyInstalledPackages = shouldFetchLatestVersionsForOnlyInstalledPackages()-->Line_17 $$ if (!shouldFetchLatestVersionsForOnlyInstalledPackages) [ FD ]
Line_2 $$ public void doUpdatePackages(@NotNull final PackageManagementService packageManagementService) -->Line_3 $$ onUpdateStarted()[ CD ]
Line_17 $$ if (!shouldFetchLatestVersionsForOnlyInstalledPackages) -->Line_18 $$ refreshLatestVersions(packageManagementService)[ CD ]
Line_25 $$ for (InstalledPackage pkg : finalPackages) -->Line_26 $$ RepoPackage repoPackage = cache.get(pkg.getName())[ FD ]
Line_2 $$ public void doUpdatePackages(@NotNull final PackageManagementService packageManagementService) -->Line_23 $$ if (packageManagementService == myPackageManagementService) [ FD ]
Line_7 $$ Collection<InstalledPackage> packages = Lists.newArrayList()-->Line_9 $$ packages = packageManagementService.getInstalledPackages()[ FD ]
Line_33 $$ if (shouldFetchLatestVersionsForOnlyInstalledPackages) -->Line_34 $$ setLatestVersionsForInstalledPackages()[ CD ]
Line_23 $$ if (packageManagementService == myPackageManagementService) -->Line_33 $$ if (shouldFetchLatestVersionsForOnlyInstalledPackages) [ CD ]
Line_2 $$ public void doUpdatePackages(@NotNull final PackageManagementService packageManagementService) -->Line_4 $$ final Application application = ApplicationManager.getApplication()[ CD ]
Line_2 $$ public void doUpdatePackages(@NotNull final PackageManagementService packageManagementService) -->Line_9 $$ packages = packageManagementService.getInstalledPackages()[ FD ]
Line_26 $$ RepoPackage repoPackage = cache.get(pkg.getName())-->Line_27 $$ final String version = repoPackage != null ? repoPackage.getLatestVersion() : null[ FD ]
Line_14 $$ final Map<String, RepoPackage> cache = buildNameToPackageMap(packageManagementService.getAllPackagesCached())-->Line_16 $$ if (cache.isEmpty()) [ FD ]
