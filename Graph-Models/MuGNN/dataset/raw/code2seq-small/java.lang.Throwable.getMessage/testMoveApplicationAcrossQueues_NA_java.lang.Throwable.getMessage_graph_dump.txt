Line_13 $$ result = cli.run(new String[] -->Line_14 $$ assertEquals(0, result)[ FD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_6 $$ when(client.getApplicationReport(any(ApplicationId.class))).thenReturn(newApplicationReport2)[ CD ]
Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_19 $$ cli = createAndGetAppCLI()[ FD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()[ CD ]
Line_4 $$ ApplicationId applicationId = ApplicationId.newInstance(1234, 5)-->Line_11 $$ ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), "user", "queue", "appname", "host", 124, null, YarnApplicationState.RUNNING, "diagnostics", "url", 0, 0, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.53789f, "YARN", null)[ FD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_16 $$ verify(sysOut).println("Moving application application_1234_0005 to queue targetqueue")[ CD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_19 $$ cli = createAndGetAppCLI()[ CD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_18 $$ doThrow(new ApplicationNotFoundException("Application with id '" + applicationId + "' doesn't exist in RM.")).when(client).moveApplicationAcrossQueues(applicationId, "targetqueue")[ CD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_14 $$ assertEquals(0, result)[ CD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_7 $$ int result = cli.run(new String[] [ CD ]
Line_5 $$ ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), "user", "queue", "appname", "host", 124, null, YarnApplicationState.FINISHED, "diagnostics", "url", 0, 0, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.53789f, "YARN", null)-->Line_6 $$ when(client.getApplicationReport(any(ApplicationId.class))).thenReturn(newApplicationReport2)[ FD ]
Line_4 $$ ApplicationId applicationId = ApplicationId.newInstance(1234, 5)-->Line_18 $$ doThrow(new ApplicationNotFoundException("Application with id '" + applicationId + "' doesn't exist in RM.")).when(client).moveApplicationAcrossQueues(applicationId, "targetqueue")[ FD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_8 $$ assertEquals(0, result)[ CD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_15 $$ verify(client).moveApplicationAcrossQueues(any(ApplicationId.class), any(String.class))[ CD ]
Line_4 $$ ApplicationId applicationId = ApplicationId.newInstance(1234, 5)-->Line_7 $$ int result = cli.run(new String[] [ FD ]
Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_21 $$ result = cli.run(new String[] [ FD ]
Line_7 $$ int result = cli.run(new String[] -->Line_13 $$ result = cli.run(new String[] [ FD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_5 $$ ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), "user", "queue", "appname", "host", 124, null, YarnApplicationState.FINISHED, "diagnostics", "url", 0, 0, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.53789f, "YARN", null)[ CD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_11 $$ ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), "user", "queue", "appname", "host", 124, null, YarnApplicationState.RUNNING, "diagnostics", "url", 0, 0, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.53789f, "YARN", null)[ CD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_9 $$ verify(client, times(0)).moveApplicationAcrossQueues(any(ApplicationId.class), any(String.class))[ CD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_17 $$ verify(sysOut).println("Successfully completed move.")[ CD ]
Line_7 $$ int result = cli.run(new String[] -->Line_21 $$ result = cli.run(new String[] [ FD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_12 $$ when(client.getApplicationReport(any(ApplicationId.class))).thenReturn(newApplicationReport)[ CD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_13 $$ result = cli.run(new String[] [ CD ]
Line_19 $$ cli = createAndGetAppCLI()-->Line_21 $$ result = cli.run(new String[] [ FD ]
Line_13 $$ result = cli.run(new String[] -->Line_21 $$ result = cli.run(new String[] [ FD ]
Line_4 $$ ApplicationId applicationId = ApplicationId.newInstance(1234, 5)-->Line_5 $$ ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), "user", "queue", "appname", "host", 124, null, YarnApplicationState.FINISHED, "diagnostics", "url", 0, 0, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.53789f, "YARN", null)[ FD ]
Line_4 $$ ApplicationId applicationId = ApplicationId.newInstance(1234, 5)-->Line_21 $$ result = cli.run(new String[] [ FD ]
Line_11 $$ ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), "user", "queue", "appname", "host", 124, null, YarnApplicationState.RUNNING, "diagnostics", "url", 0, 0, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.53789f, "YARN", null)-->Line_12 $$ when(client.getApplicationReport(any(ApplicationId.class))).thenReturn(newApplicationReport)[ FD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_10 $$ verify(sysOut).println("Application " + applicationId + " has already finished ")[ CD ]
Line_7 $$ int result = cli.run(new String[] -->Line_14 $$ assertEquals(0, result)[ FD ]
Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_7 $$ int result = cli.run(new String[] [ FD ]
Line_7 $$ int result = cli.run(new String[] -->Line_8 $$ assertEquals(0, result)[ FD ]
Line_4 $$ ApplicationId applicationId = ApplicationId.newInstance(1234, 5)-->Line_13 $$ result = cli.run(new String[] [ FD ]
Line_2 $$ public void testMoveApplicationAcrossQueues() throws Exception -->Line_4 $$ ApplicationId applicationId = ApplicationId.newInstance(1234, 5)[ CD ]
Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_13 $$ result = cli.run(new String[] [ FD ]
