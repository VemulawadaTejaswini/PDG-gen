Line_12 $$ ScriptSource scriptSource = getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())-->Line_14 $$ Class<?> scriptedType = scriptFactory.getScriptedObjectType(scriptSource)[ FD ]
Line_33 $$ if (logger.isDebugEnabled()) -->Line_34 $$ logger.debug("Could not determine scripted object type for bean '" + beanName + "'", ex)[ CD ]
Line_21 $$ Object bean = this.scriptBeanFactory.getBean(scriptedObjectBeanName)-->Line_23 $$ return bean.getClass()[ FD ]
Line_8 $$ String scriptFactoryBeanName = SCRIPT_FACTORY_NAME_PREFIX + beanName-->Line_10 $$ prepareScriptBeans(bd, scriptFactoryBeanName, scriptedObjectBeanName)[ FD ]
Line_13 $$ Class<?>[] interfaces = scriptFactory.getScriptInterfaces()-->Line_18 $$ return (interfaces.length == 1 ? interfaces[0] : createCompositeInterface(interfaces))[ FD ]
Line_2 $$ public Class<?> predictBeanType(Class<?> beanClass, String beanName) -->Line_3 $$ if (!ScriptFactory.class.isAssignableFrom(beanClass)) [ CD ]
Line_13 $$ Class<?>[] interfaces = scriptFactory.getScriptInterfaces()-->Line_17 $$ if (!ObjectUtils.isEmpty(interfaces)) [ FD ]
Line_29 $$ if (logger.isTraceEnabled()) -->Line_30 $$ logger.trace("Could not determine scripted object type for bean '" + beanName + "': " + ex.getMessage())[ CD ]
Line_15 $$ if (scriptedType != null) -->Line_16 $$ return scriptedType[ CD ]
Line_3 $$ if (!ScriptFactory.class.isAssignableFrom(beanClass)) -->Line_4 $$ return null[ CD ]
Line_15 $$ if (scriptedType != null) -->Line_17 $$ if (!ObjectUtils.isEmpty(interfaces)) [ CD ]
Line_11 $$ ScriptFactory scriptFactory = this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)-->Line_13 $$ Class<?>[] interfaces = scriptFactory.getScriptInterfaces()[ FD ]
Line_20 $$ if (bd.isSingleton()) -->Line_21 $$ Object bean = this.scriptBeanFactory.getBean(scriptedObjectBeanName)[ CD ]
Line_11 $$ ScriptFactory scriptFactory = this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)-->Line_12 $$ ScriptSource scriptSource = getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())[ FD ]
Line_20 $$ if (bd.isSingleton()) -->Line_22 $$ if (bean != null) [ CD ]
Line_2 $$ public Class<?> predictBeanType(Class<?> beanClass, String beanName) -->Line_6 $$ BeanDefinition bd = this.beanFactory.getMergedBeanDefinition(beanName)[ FD ]
Line_2 $$ public Class<?> predictBeanType(Class<?> beanClass, String beanName) -->Line_6 $$ BeanDefinition bd = this.beanFactory.getMergedBeanDefinition(beanName)[ CD ]
Line_8 $$ String scriptFactoryBeanName = SCRIPT_FACTORY_NAME_PREFIX + beanName-->Line_12 $$ ScriptSource scriptSource = getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator())[ FD ]
Line_14 $$ Class<?> scriptedType = scriptFactory.getScriptedObjectType(scriptSource)-->Line_15 $$ if (scriptedType != null) [ FD ]
Line_11 $$ ScriptFactory scriptFactory = this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)-->Line_14 $$ Class<?> scriptedType = scriptFactory.getScriptedObjectType(scriptSource)[ FD ]
Line_28 $$ if (ex instanceof BeanCreationException && ((BeanCreationException) ex).getMostSpecificCause() instanceof BeanCurrentlyInCreationException) -->Line_33 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ public Class<?> predictBeanType(Class<?> beanClass, String beanName) -->Line_38 $$ return null[ CD ]
Line_17 $$ if (!ObjectUtils.isEmpty(interfaces)) -->Line_18 $$ return (interfaces.length == 1 ? interfaces[0] : createCompositeInterface(interfaces))[ CD ]
Line_9 $$ String scriptedObjectBeanName = SCRIPTED_OBJECT_NAME_PREFIX + beanName-->Line_21 $$ Object bean = this.scriptBeanFactory.getBean(scriptedObjectBeanName)[ FD ]
Line_6 $$ BeanDefinition bd = this.beanFactory.getMergedBeanDefinition(beanName)-->Line_10 $$ prepareScriptBeans(bd, scriptFactoryBeanName, scriptedObjectBeanName)[ FD ]
Line_6 $$ BeanDefinition bd = this.beanFactory.getMergedBeanDefinition(beanName)-->Line_20 $$ if (bd.isSingleton()) [ FD ]
Line_2 $$ public Class<?> predictBeanType(Class<?> beanClass, String beanName) -->Line_3 $$ if (!ScriptFactory.class.isAssignableFrom(beanClass)) [ FD ]
Line_22 $$ if (bean != null) -->Line_23 $$ return bean.getClass()[ CD ]
Line_17 $$ if (!ObjectUtils.isEmpty(interfaces)) -->Line_20 $$ if (bd.isSingleton()) [ CD ]
Line_28 $$ if (ex instanceof BeanCreationException && ((BeanCreationException) ex).getMostSpecificCause() instanceof BeanCurrentlyInCreationException) -->Line_29 $$ if (logger.isTraceEnabled()) [ CD ]
Line_8 $$ String scriptFactoryBeanName = SCRIPT_FACTORY_NAME_PREFIX + beanName-->Line_11 $$ ScriptFactory scriptFactory = this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class)[ FD ]
Line_9 $$ String scriptedObjectBeanName = SCRIPTED_OBJECT_NAME_PREFIX + beanName-->Line_10 $$ prepareScriptBeans(bd, scriptFactoryBeanName, scriptedObjectBeanName)[ FD ]
Line_21 $$ Object bean = this.scriptBeanFactory.getBean(scriptedObjectBeanName)-->Line_22 $$ if (bean != null) [ FD ]
