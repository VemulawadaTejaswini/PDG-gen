Line_11 $$ Lock lock = resultList.get(0)-->Line_12 $$ return lock.getName().equals("foo")[ FD ]
Line_2 $$ private FutureTask<Boolean> inBackgroundThreadStartSecondTransactionAndReadLockInstance(final CountDownLatch latch, final EntityManager isolatedEntityManager) -->Line_6 $$ isolatedEntityManager.getTransaction().begin()[ FD ]
Line_10 $$ List<Lock> resultList = query.getResultList()-->Line_11 $$ Lock lock = resultList.get(0)[ FD ]
Line_2 $$ private FutureTask<Boolean> inBackgroundThreadStartSecondTransactionAndReadLockInstance(final CountDownLatch latch, final EntityManager isolatedEntityManager) -->Line_25 $$ return bgTask[ CD ]
Line_2 $$ private FutureTask<Boolean> inBackgroundThreadStartSecondTransactionAndReadLockInstance(final CountDownLatch latch, final EntityManager isolatedEntityManager) -->Line_22 $$ thread.setDaemon(true)[ CD ]
Line_2 $$ private FutureTask<Boolean> inBackgroundThreadStartSecondTransactionAndReadLockInstance(final CountDownLatch latch, final EntityManager isolatedEntityManager) -->Line_17 $$ latch.countDown()[ FD ]
Line_8 $$ Query query = isolatedEntityManager.createQuery("select L from Lock_ L where L.id < 10000 ")-->Line_10 $$ List<Lock> resultList = query.getResultList()[ FD ]
Line_2 $$ private FutureTask<Boolean> inBackgroundThreadStartSecondTransactionAndReadLockInstance(final CountDownLatch latch, final EntityManager isolatedEntityManager) -->Line_23 $$ thread.setName("LockTest read lock")[ CD ]
Line_2 $$ private FutureTask<Boolean> inBackgroundThreadStartSecondTransactionAndReadLockInstance(final CountDownLatch latch, final EntityManager isolatedEntityManager) -->Line_3 $$ FutureTask<Boolean> bgTask = new FutureTask<Boolean>(new Callable<Boolean>() [ CD ]
Line_2 $$ private FutureTask<Boolean> inBackgroundThreadStartSecondTransactionAndReadLockInstance(final CountDownLatch latch, final EntityManager isolatedEntityManager) -->Line_24 $$ thread.start()[ CD ]
Line_8 $$ Query query = isolatedEntityManager.createQuery("select L from Lock_ L where L.id < 10000 ")-->Line_9 $$ query.setLockMode(LockModeType.PESSIMISTIC_READ)[ FD ]
Line_2 $$ private FutureTask<Boolean> inBackgroundThreadStartSecondTransactionAndReadLockInstance(final CountDownLatch latch, final EntityManager isolatedEntityManager) -->Line_8 $$ Query query = isolatedEntityManager.createQuery("select L from Lock_ L where L.id < 10000 ")[ FD ]
