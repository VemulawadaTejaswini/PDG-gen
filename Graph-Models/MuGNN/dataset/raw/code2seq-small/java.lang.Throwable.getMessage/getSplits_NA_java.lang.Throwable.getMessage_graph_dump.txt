Line_4 $$ if (1 == targetNumTasks) -->Line_6 $$ singletonSplit.add(new DataDrivenDBInputSplit("1=1", "1=1"))[ CD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext job) throws IOException -->Line_21 $$ return splitter.split(job.getConfiguration(), results, getDBConf().getInputOrderBy())[ FD ]
Line_14 $$ results = statement.executeQuery(getBoundingValsQuery())-->Line_21 $$ return splitter.split(job.getConfiguration(), results, getDBConf().getInputOrderBy())[ FD ]
Line_17 $$ DBSplitter splitter = getSplitter(sqlDataType)-->Line_21 $$ return splitter.split(job.getConfiguration(), results, getDBConf().getInputOrderBy())[ FD ]
Line_9 $$ ResultSet results = null-->Line_21 $$ return splitter.split(job.getConfiguration(), results, getDBConf().getInputOrderBy())[ FD ]
Line_33 $$ if (null != statement) -->Line_34 $$ statement.close()[ CD ]
Line_17 $$ DBSplitter splitter = getSplitter(sqlDataType)-->Line_18 $$ if (null == splitter) [ FD ]
Line_14 $$ results = statement.executeQuery(getBoundingValsQuery())-->Line_27 $$ results.close()[ FD ]
Line_10 $$ Statement statement = null-->Line_33 $$ if (null != statement) [ FD ]
Line_9 $$ ResultSet results = null-->Line_14 $$ results = statement.executeQuery(getBoundingValsQuery())[ FD ]
Line_10 $$ Statement statement = null-->Line_14 $$ results = statement.executeQuery(getBoundingValsQuery())[ FD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext job) throws IOException -->Line_3 $$ int targetNumTasks = job.getConfiguration().getInt(MRJobConfig.NUM_MAPS, 1)[ CD ]
Line_9 $$ ResultSet results = null-->Line_16 $$ int sqlDataType = results.getMetaData().getColumnType(1)[ FD ]
Line_9 $$ ResultSet results = null-->Line_15 $$ results.next()[ FD ]
Line_14 $$ results = statement.executeQuery(getBoundingValsQuery())-->Line_15 $$ results.next()[ FD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext job) throws IOException -->Line_4 $$ if (1 == targetNumTasks) [ CD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext job) throws IOException -->Line_11 $$ Connection connection = getConnection()[ CD ]
Line_14 $$ results = statement.executeQuery(getBoundingValsQuery())-->Line_26 $$ if (null != results) [ FD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext job) throws IOException -->Line_3 $$ int targetNumTasks = job.getConfiguration().getInt(MRJobConfig.NUM_MAPS, 1)[ FD ]
Line_9 $$ ResultSet results = null-->Line_27 $$ results.close()[ FD ]
Line_13 $$ statement = connection.createStatement()-->Line_14 $$ results = statement.executeQuery(getBoundingValsQuery())[ FD ]
Line_4 $$ if (1 == targetNumTasks) -->Line_5 $$ List<InputSplit> singletonSplit = new ArrayList<InputSplit>()[ CD ]
Line_26 $$ if (null != results) -->Line_27 $$ results.close()[ CD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext job) throws IOException -->Line_9 $$ ResultSet results = null[ CD ]
Line_16 $$ int sqlDataType = results.getMetaData().getColumnType(1)-->Line_17 $$ DBSplitter splitter = getSplitter(sqlDataType)[ FD ]
Line_13 $$ statement = connection.createStatement()-->Line_33 $$ if (null != statement) [ FD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext job) throws IOException -->Line_10 $$ Statement statement = null[ CD ]
Line_3 $$ int targetNumTasks = job.getConfiguration().getInt(MRJobConfig.NUM_MAPS, 1)-->Line_4 $$ if (1 == targetNumTasks) [ FD ]
Line_10 $$ Statement statement = null-->Line_34 $$ statement.close()[ FD ]
Line_5 $$ List<InputSplit> singletonSplit = new ArrayList<InputSplit>()-->Line_6 $$ singletonSplit.add(new DataDrivenDBInputSplit("1=1", "1=1"))[ FD ]
Line_10 $$ Statement statement = null-->Line_13 $$ statement = connection.createStatement()[ FD ]
Line_13 $$ statement = connection.createStatement()-->Line_34 $$ statement.close()[ FD ]
Line_11 $$ Connection connection = getConnection()-->Line_13 $$ statement = connection.createStatement()[ FD ]
Line_4 $$ if (1 == targetNumTasks) -->Line_7 $$ return singletonSplit[ CD ]
Line_14 $$ results = statement.executeQuery(getBoundingValsQuery())-->Line_16 $$ int sqlDataType = results.getMetaData().getColumnType(1)[ FD ]
Line_9 $$ ResultSet results = null-->Line_26 $$ if (null != results) [ FD ]
Line_11 $$ Connection connection = getConnection()-->Line_40 $$ connection.commit()[ FD ]
