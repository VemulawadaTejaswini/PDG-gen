Line_6 $$ MockNM nm1 = rm.registerNode("127.0.0.1:1234", 6 * GB)-->Line_8 $$ MockAM am1 = MockRM.launchAM(app1, rm, nm1)[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_6 $$ MockNM nm1 = rm.registerNode("127.0.0.1:1234", 6 * GB)[ FD ]
Line_8 $$ MockAM am1 = MockRM.launchAM(app1, rm, nm1)-->Line_12 $$ am1.unregisterAppAttempt(req, false)[ FD ]
Line_10 $$ Throwable cause = null-->Line_19 $$ Assert.assertTrue(cause.getMessage().contains("Application Master is trying to unregister before registering for:"))[ FD ]
Line_8 $$ MockAM am1 = MockRM.launchAM(app1, rm, nm1)-->Line_20 $$ am1.registerAppAttempt()[ FD ]
Line_10 $$ Throwable cause = null-->Line_16 $$ Assert.assertNotNull(cause)[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_5 $$ rm.start()[ FD ]
Line_2 $$ public void testFinishApplicationMasterBeforeRegistering() throws Exception -->Line_3 $$ MockRM rm = new MockRM(conf)[ CD ]
Line_14 $$ cause = e.getCause()-->Line_19 $$ Assert.assertTrue(cause.getMessage().contains("Application Master is trying to unregister before registering for:"))[ FD ]
Line_14 $$ cause = e.getCause()-->Line_16 $$ Assert.assertNotNull(cause)[ FD ]
Line_23 $$ if (rm != null) -->Line_24 $$ rm.stop()[ CD ]
Line_8 $$ MockAM am1 = MockRM.launchAM(app1, rm, nm1)-->Line_21 $$ am1.unregisterAppAttempt(req, false)[ FD ]
Line_9 $$ FinishApplicationMasterRequest req = FinishApplicationMasterRequest.newInstance(FinalApplicationStatus.FAILED, "", "")-->Line_21 $$ am1.unregisterAppAttempt(req, false)[ FD ]
Line_9 $$ FinishApplicationMasterRequest req = FinishApplicationMasterRequest.newInstance(FinalApplicationStatus.FAILED, "", "")-->Line_12 $$ am1.unregisterAppAttempt(req, false)[ FD ]
Line_10 $$ Throwable cause = null-->Line_18 $$ Assert.assertNotNull(cause.getMessage())[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_8 $$ MockAM am1 = MockRM.launchAM(app1, rm, nm1)[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_23 $$ if (rm != null) [ FD ]
Line_14 $$ cause = e.getCause()-->Line_18 $$ Assert.assertNotNull(cause.getMessage())[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_24 $$ rm.stop()[ FD ]
Line_7 $$ RMApp app1 = rm.submitApp(2048)-->Line_8 $$ MockAM am1 = MockRM.launchAM(app1, rm, nm1)[ FD ]
Line_10 $$ Throwable cause = null-->Line_14 $$ cause = e.getCause()[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_7 $$ RMApp app1 = rm.submitApp(2048)[ FD ]
