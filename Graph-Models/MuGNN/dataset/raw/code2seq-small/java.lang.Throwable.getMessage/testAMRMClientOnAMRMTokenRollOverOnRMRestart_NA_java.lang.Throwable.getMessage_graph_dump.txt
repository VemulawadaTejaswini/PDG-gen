Line_54 $$ final MyResourceManager2 rm2 = new MyResourceManager2(conf, memStore)-->Line_80 $$ rm2.stop()[ FD ]
Line_5 $$ MemoryRMStateStore memStore = new MemoryRMStateStore()-->Line_6 $$ memStore.init(conf)[ FD ]
Line_54 $$ final MyResourceManager2 rm2 = new MyResourceManager2(conf, memStore)-->Line_59 $$ AMRMTokenSecretManager amrmTokenSecretManagerForRM2 = rm2.getRMContext().getAMRMTokenSecretManager()[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_15 $$ nm1.nodeHeartbeat(true)[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_25 $$ amClient.init(conf)[ CD ]
Line_24 $$ AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1)-->Line_27 $$ amClient.registerApplicationMaster("h1", 10000, "")[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_12 $$ dispatcher.await()[ CD ]
Line_24 $$ AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1)-->Line_78 $$ amClient.stop()[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_58 $$ dispatcher = (DrainDispatcher) rm2.getRMContext().getDispatcher()[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_61 $$ Assert.assertTrue(amrmTokenSecretManagerForRM2.getNextMasterKeyData() == null)[ CD ]
Line_7 $$ MyResourceManager2 rm1 = new MyResourceManager2(conf, memStore)-->Line_13 $$ MockNM nm1 = new MockNM("h1:1234", 15120, rm1.getResourceTrackerService())[ FD ]
Line_38 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> newToken = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)-->Line_52 $$ Assert.assertTrue(amrmTokenSecretManagerForRM1.getCurrnetMasterKeyData().getMasterKey().getKeyId() == newToken.decodeIdentifier().getKeyId())[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_57 $$ ((MyAMRMClientImpl) amClient).updateRMProxy(rm2)[ CD ]
Line_7 $$ MyResourceManager2 rm1 = new MyResourceManager2(conf, memStore)-->Line_8 $$ rm1.start()[ FD ]
Line_24 $$ AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1)-->Line_28 $$ amClient.allocate(0.1f)[ FD ]
Line_9 $$ DrainDispatcher dispatcher = (DrainDispatcher) rm1.getRMContext().getDispatcher()-->Line_12 $$ dispatcher.await()[ FD ]
Line_20 $$ AMRMTokenSecretManager amrmTokenSecretManagerForRM1 = rm1.getRMContext().getAMRMTokenSecretManager()-->Line_41 $$ if (amrmTokenSecretManagerForRM1.getCurrnetMasterKeyData().getMasterKey().getKeyId() != token.decodeIdentifier().getKeyId()) [ FD ]
Line_59 $$ AMRMTokenSecretManager amrmTokenSecretManagerForRM2 = rm2.getRMContext().getAMRMTokenSecretManager()-->Line_61 $$ Assert.assertTrue(amrmTokenSecretManagerForRM2.getNextMasterKeyData() == null)[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_11 $$ RMApp app = rm1.submitApp(1024)[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_14 $$ nm1.registerNode()[ CD ]
Line_17 $$ ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt().getAppAttemptId()-->Line_18 $$ rm1.sendAMLaunched(appAttemptId)[ FD ]
Line_29 $$ while (System.currentTimeMillis() - startTime < rolling_interval_sec * 1000) -->Line_30 $$ amClient.allocate(0.1f)[ CD ]
Line_54 $$ final MyResourceManager2 rm2 = new MyResourceManager2(conf, memStore)-->Line_58 $$ dispatcher = (DrainDispatcher) rm2.getRMContext().getDispatcher()[ FD ]
Line_40 $$ while (waitCount++ <= 50) -->Line_41 $$ if (amrmTokenSecretManagerForRM1.getCurrnetMasterKeyData().getMasterKey().getKeyId() != token.decodeIdentifier().getKeyId()) [ CD ]
Line_54 $$ final MyResourceManager2 rm2 = new MyResourceManager2(conf, memStore)-->Line_56 $$ nm1.setResourceTrackerService(rm2.getResourceTrackerService())[ FD ]
Line_21 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)-->Line_74 $$ Assert.assertTrue(ex.getMessage().contains("Invalid AMRMToken from " + token.decodeIdentifier().getApplicationAttemptId()))[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_78 $$ amClient.stop()[ CD ]
Line_20 $$ AMRMTokenSecretManager amrmTokenSecretManagerForRM1 = rm1.getRMContext().getAMRMTokenSecretManager()-->Line_21 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)[ FD ]
Line_11 $$ RMApp app = rm1.submitApp(1024)-->Line_17 $$ ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt().getAppAttemptId()[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_79 $$ rm1.stop()[ CD ]
Line_66 $$ testUser.doAs(new PrivilegedAction<ApplicationMasterProtocol>() -->Line_68 $$ return (ApplicationMasterProtocol) YarnRPC.create(conf).getProxy(ApplicationMasterProtocol.class, rm2.getApplicationMasterService().getBindAddress(), conf)[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_60 $$ Assert.assertTrue(amrmTokenSecretManagerForRM2.getCurrnetMasterKeyData().getMasterKey().getKeyId() == newToken.decodeIdentifier().getKeyId())[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_18 $$ rm1.sendAMLaunched(appAttemptId)[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_20 $$ AMRMTokenSecretManager amrmTokenSecretManagerForRM1 = rm1.getRMContext().getAMRMTokenSecretManager()[ CD ]
Line_7 $$ MyResourceManager2 rm1 = new MyResourceManager2(conf, memStore)-->Line_20 $$ AMRMTokenSecretManager amrmTokenSecretManagerForRM1 = rm1.getRMContext().getAMRMTokenSecretManager()[ FD ]
Line_20 $$ AMRMTokenSecretManager amrmTokenSecretManagerForRM1 = rm1.getRMContext().getAMRMTokenSecretManager()-->Line_52 $$ Assert.assertTrue(amrmTokenSecretManagerForRM1.getCurrnetMasterKeyData().getMasterKey().getKeyId() == newToken.decodeIdentifier().getKeyId())[ FD ]
Line_24 $$ AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1)-->Line_76 $$ amClient.allocate(0.1f)[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_10 $$ Long startTime = System.currentTimeMillis()[ CD ]
Line_63 $$ UserGroupInformation testUser = UserGroupInformation.createRemoteUser("testUser")-->Line_65 $$ testUser.addToken(token)[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_37 $$ amClient.allocate(0.1f)[ CD ]
Line_22 $$ UserGroupInformation ugi = UserGroupInformation.getCurrentUser()-->Line_23 $$ ugi.addTokenIdentifier(token.decodeIdentifier())[ FD ]
Line_63 $$ UserGroupInformation testUser = UserGroupInformation.createRemoteUser("testUser")-->Line_66 $$ testUser.doAs(new PrivilegedAction<ApplicationMasterProtocol>() [ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_27 $$ amClient.registerApplicationMaster("h1", 10000, "")[ CD ]
Line_20 $$ AMRMTokenSecretManager amrmTokenSecretManagerForRM1 = rm1.getRMContext().getAMRMTokenSecretManager()-->Line_38 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> newToken = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)[ FD ]
Line_54 $$ final MyResourceManager2 rm2 = new MyResourceManager2(conf, memStore)-->Line_57 $$ ((MyAMRMClientImpl) amClient).updateRMProxy(rm2)[ FD ]
Line_21 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)-->Line_36 $$ Assert.assertTrue(amrmTokenSecretManagerForRM1.getMasterKey().getMasterKey().getKeyId() != token.decodeIdentifier().getKeyId())[ FD ]
Line_21 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)-->Line_64 $$ SecurityUtil.setTokenService(token, rm2.getApplicationMasterService().getBindAddress())[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_16 $$ dispatcher.await()[ CD ]
Line_24 $$ AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1)-->Line_30 $$ amClient.allocate(0.1f)[ FD ]
Line_7 $$ MyResourceManager2 rm1 = new MyResourceManager2(conf, memStore)-->Line_9 $$ DrainDispatcher dispatcher = (DrainDispatcher) rm1.getRMContext().getDispatcher()[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_80 $$ rm2.stop()[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_29 $$ while (System.currentTimeMillis() - startTime < rolling_interval_sec * 1000) [ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_51 $$ Assert.assertTrue(amrmTokenSecretManagerForRM1.getNextMasterKeyData() == null)[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_59 $$ AMRMTokenSecretManager amrmTokenSecretManagerForRM2 = rm2.getRMContext().getAMRMTokenSecretManager()[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_77 $$ amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null)[ CD ]
Line_13 $$ MockNM nm1 = new MockNM("h1:1234", 15120, rm1.getResourceTrackerService())-->Line_56 $$ nm1.setResourceTrackerService(rm2.getResourceTrackerService())[ FD ]
Line_24 $$ AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1)-->Line_25 $$ amClient.init(conf)[ FD ]
Line_21 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)-->Line_65 $$ testUser.addToken(token)[ FD ]
Line_54 $$ final MyResourceManager2 rm2 = new MyResourceManager2(conf, memStore)-->Line_64 $$ SecurityUtil.setTokenService(token, rm2.getApplicationMasterService().getBindAddress())[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_54 $$ final MyResourceManager2 rm2 = new MyResourceManager2(conf, memStore)[ CD ]
Line_21 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)-->Line_23 $$ ugi.addTokenIdentifier(token.decodeIdentifier())[ FD ]
Line_21 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)-->Line_41 $$ if (amrmTokenSecretManagerForRM1.getCurrnetMasterKeyData().getMasterKey().getKeyId() != token.decodeIdentifier().getKeyId()) [ FD ]
Line_7 $$ MyResourceManager2 rm1 = new MyResourceManager2(conf, memStore)-->Line_79 $$ rm1.stop()[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_8 $$ rm1.start()[ CD ]
Line_59 $$ AMRMTokenSecretManager amrmTokenSecretManagerForRM2 = rm2.getRMContext().getAMRMTokenSecretManager()-->Line_60 $$ Assert.assertTrue(amrmTokenSecretManagerForRM2.getCurrnetMasterKeyData().getMasterKey().getKeyId() == newToken.decodeIdentifier().getKeyId())[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_26 $$ amClient.start()[ CD ]
Line_7 $$ MyResourceManager2 rm1 = new MyResourceManager2(conf, memStore)-->Line_11 $$ RMApp app = rm1.submitApp(1024)[ FD ]
Line_9 $$ DrainDispatcher dispatcher = (DrainDispatcher) rm1.getRMContext().getDispatcher()-->Line_19 $$ dispatcher.await()[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_56 $$ nm1.setResourceTrackerService(rm2.getResourceTrackerService())[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_17 $$ ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt().getAppAttemptId()[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_38 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> newToken = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_40 $$ while (waitCount++ <= 50) [ CD ]
Line_17 $$ ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt().getAppAttemptId()-->Line_21 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_6 $$ memStore.init(conf)[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_7 $$ MyResourceManager2 rm1 = new MyResourceManager2(conf, memStore)[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_21 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_24 $$ AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1)[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_52 $$ Assert.assertTrue(amrmTokenSecretManagerForRM1.getCurrnetMasterKeyData().getMasterKey().getKeyId() == newToken.decodeIdentifier().getKeyId())[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_36 $$ Assert.assertTrue(amrmTokenSecretManagerForRM1.getMasterKey().getMasterKey().getKeyId() != token.decodeIdentifier().getKeyId())[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_39 $$ int waitCount = 0[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_13 $$ MockNM nm1 = new MockNM("h1:1234", 15120, rm1.getResourceTrackerService())[ CD ]
Line_54 $$ final MyResourceManager2 rm2 = new MyResourceManager2(conf, memStore)-->Line_68 $$ return (ApplicationMasterProtocol) YarnRPC.create(conf).getProxy(ApplicationMasterProtocol.class, rm2.getApplicationMasterService().getBindAddress(), conf)[ FD ]
Line_24 $$ AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1)-->Line_45 $$ amClient.allocate(0.1f)[ FD ]
Line_9 $$ DrainDispatcher dispatcher = (DrainDispatcher) rm1.getRMContext().getDispatcher()-->Line_58 $$ dispatcher = (DrainDispatcher) rm2.getRMContext().getDispatcher()[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_4 $$ conf.setLong(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS, am_expire_ms)[ CD ]
Line_7 $$ MyResourceManager2 rm1 = new MyResourceManager2(conf, memStore)-->Line_18 $$ rm1.sendAMLaunched(appAttemptId)[ FD ]
Line_39 $$ int waitCount = 0-->Line_40 $$ while (waitCount++ <= 50) [ FD ]
Line_40 $$ while (waitCount++ <= 50) -->Line_49 $$ Thread.sleep(500)[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_53 $$ conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, "0.0.0.0:9030")[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_9 $$ DrainDispatcher dispatcher = (DrainDispatcher) rm1.getRMContext().getDispatcher()[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_5 $$ MemoryRMStateStore memStore = new MemoryRMStateStore()[ CD ]
Line_38 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> newToken = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)-->Line_60 $$ Assert.assertTrue(amrmTokenSecretManagerForRM2.getCurrnetMasterKeyData().getMasterKey().getKeyId() == newToken.decodeIdentifier().getKeyId())[ FD ]
Line_20 $$ AMRMTokenSecretManager amrmTokenSecretManagerForRM1 = rm1.getRMContext().getAMRMTokenSecretManager()-->Line_51 $$ Assert.assertTrue(amrmTokenSecretManagerForRM1.getNextMasterKeyData() == null)[ FD ]
Line_17 $$ ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt().getAppAttemptId()-->Line_38 $$ org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> newToken = amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId)[ FD ]
Line_13 $$ MockNM nm1 = new MockNM("h1:1234", 15120, rm1.getResourceTrackerService())-->Line_15 $$ nm1.nodeHeartbeat(true)[ FD ]
Line_24 $$ AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1)-->Line_26 $$ amClient.start()[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_76 $$ amClient.allocate(0.1f)[ CD ]
Line_9 $$ DrainDispatcher dispatcher = (DrainDispatcher) rm1.getRMContext().getDispatcher()-->Line_16 $$ dispatcher.await()[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_19 $$ dispatcher.await()[ CD ]
Line_54 $$ final MyResourceManager2 rm2 = new MyResourceManager2(conf, memStore)-->Line_55 $$ rm2.start()[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_22 $$ UserGroupInformation ugi = UserGroupInformation.getCurrentUser()[ CD ]
Line_24 $$ AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1)-->Line_37 $$ amClient.allocate(0.1f)[ FD ]
Line_20 $$ AMRMTokenSecretManager amrmTokenSecretManagerForRM1 = rm1.getRMContext().getAMRMTokenSecretManager()-->Line_36 $$ Assert.assertTrue(amrmTokenSecretManagerForRM1.getMasterKey().getMasterKey().getKeyId() != token.decodeIdentifier().getKeyId())[ FD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_28 $$ amClient.allocate(0.1f)[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_55 $$ rm2.start()[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_23 $$ ugi.addTokenIdentifier(token.decodeIdentifier())[ CD ]
Line_2 $$ public void testAMRMClientOnAMRMTokenRollOverOnRMRestart() throws Exception -->Line_3 $$ conf.setLong(YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS, rolling_interval_sec)[ CD ]
Line_13 $$ MockNM nm1 = new MockNM("h1:1234", 15120, rm1.getResourceTrackerService())-->Line_14 $$ nm1.registerNode()[ FD ]
Line_24 $$ AMRMClient<ContainerRequest> amClient = new MyAMRMClientImpl(rm1)-->Line_77 $$ amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, null, null)[ FD ]
