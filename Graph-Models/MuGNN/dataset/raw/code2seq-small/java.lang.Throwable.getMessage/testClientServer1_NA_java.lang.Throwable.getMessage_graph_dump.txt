Line_56 $$ for (int i = 0; i < 2; i++) -->Line_58 $$ if (!(t instanceof Success)) [ CD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_9 $$ Thread serverThread = new Thread() [ CD ]
Line_7 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_57 $$ Throwable t = threadResults.take()[ FD ]
Line_11 $$ DomainSocket conn = null-->Line_16 $$ reader.init(conn)[ FD ]
Line_9 $$ Thread serverThread = new Thread() -->Line_11 $$ DomainSocket conn = null[ CD ]
Line_46 $$ OutputStream clientOutputStream = client.getOutputStream()-->Line_47 $$ clientOutputStream.write(clientMsg2)[ FD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_63 $$ clientThread.join(120000)[ CD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_15 $$ ReadStrategy reader = readStrategyClass.newInstance()[ FD ]
Line_37 $$ DomainSocket client = preConnectedSockets != null ? preConnectedSockets[1] : DomainSocket.connect(TEST_PATH)-->Line_46 $$ OutputStream clientOutputStream = client.getOutputStream()[ FD ]
Line_14 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_18 $$ Assert.assertTrue(Arrays.equals(clientMsg1, in1))[ FD ]
Line_15 $$ ReadStrategy reader = readStrategyClass.newInstance()-->Line_17 $$ reader.readFully(in1, 0, in1.length)[ FD ]
Line_7 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_27 $$ threadResults.add(e)[ FD ]
Line_13 $$ conn = preConnectedSockets != null ? preConnectedSockets[0] : serv.accept()-->Line_25 $$ conn.close()[ FD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_33 $$ serverThread.start()[ CD ]
Line_13 $$ conn = preConnectedSockets != null ? preConnectedSockets[0] : serv.accept()-->Line_16 $$ reader.init(conn)[ FD ]
Line_64 $$ if (serv != null) -->Line_65 $$ serv.close()[ CD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_5 $$ final byte[] serverMsg1 = new byte[] [ CD ]
Line_7 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_30 $$ threadResults.add(new Success())[ FD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_7 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)[ CD ]
Line_11 $$ DomainSocket conn = null-->Line_22 $$ InputStream connInputStream = conn.getInputStream()[ FD ]
Line_23 $$ int in2 = connInputStream.read()-->Line_24 $$ Assert.assertEquals((int) clientMsg2, in2)[ FD ]
Line_3 $$ final String TEST_PATH = new File(sockDir.getDir(), "test_sock_client_server1").getAbsolutePath()-->Line_37 $$ DomainSocket client = preConnectedSockets != null ? preConnectedSockets[1] : DomainSocket.connect(TEST_PATH)[ FD ]
Line_57 $$ Throwable t = threadResults.take()-->Line_59 $$ Assert.fail(t.getMessage() + ExceptionUtils.getStackTrace(t))[ FD ]
Line_38 $$ WriteStrategy writer = writeStrategyClass.newInstance()-->Line_40 $$ writer.write(clientMsg1)[ FD ]
Line_11 $$ DomainSocket conn = null-->Line_20 $$ writer.init(conn)[ FD ]
Line_19 $$ WriteStrategy writer = writeStrategyClass.newInstance()-->Line_40 $$ writer.write(clientMsg1)[ FD ]
Line_43 $$ byte[] in1 = new byte[serverMsg1.length]-->Line_44 $$ reader.readFully(in1, 0, in1.length)[ FD ]
Line_56 $$ for (int i = 0; i < 2; i++) -->Line_57 $$ Throwable t = threadResults.take()[ CD ]
Line_37 $$ DomainSocket client = preConnectedSockets != null ? preConnectedSockets[1] : DomainSocket.connect(TEST_PATH)-->Line_39 $$ writer.init(client)[ FD ]
Line_11 $$ DomainSocket conn = null-->Line_25 $$ conn.close()[ FD ]
Line_43 $$ byte[] in1 = new byte[serverMsg1.length]-->Line_45 $$ Assert.assertTrue(Arrays.equals(serverMsg1, in1))[ FD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_38 $$ WriteStrategy writer = writeStrategyClass.newInstance()[ FD ]
Line_15 $$ ReadStrategy reader = readStrategyClass.newInstance()-->Line_42 $$ reader.init(client)[ FD ]
Line_19 $$ WriteStrategy writer = writeStrategyClass.newInstance()-->Line_20 $$ writer.init(conn)[ FD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_6 $$ final byte clientMsg2 = 0x45[ CD ]
Line_15 $$ ReadStrategy reader = readStrategyClass.newInstance()-->Line_16 $$ reader.init(conn)[ FD ]
Line_37 $$ DomainSocket client = preConnectedSockets != null ? preConnectedSockets[1] : DomainSocket.connect(TEST_PATH)-->Line_42 $$ reader.init(client)[ FD ]
Line_6 $$ final byte clientMsg2 = 0x45-->Line_47 $$ clientOutputStream.write(clientMsg2)[ FD ]
Line_13 $$ conn = preConnectedSockets != null ? preConnectedSockets[0] : serv.accept()-->Line_20 $$ writer.init(conn)[ FD ]
Line_3 $$ final String TEST_PATH = new File(sockDir.getDir(), "test_sock_client_server1").getAbsolutePath()-->Line_8 $$ final DomainSocket serv = (preConnectedSockets != null) ? null : DomainSocket.bindAndListen(TEST_PATH)[ FD ]
Line_37 $$ DomainSocket client = preConnectedSockets != null ? preConnectedSockets[1] : DomainSocket.connect(TEST_PATH)-->Line_48 $$ client.close()[ FD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_41 $$ ReadStrategy reader = readStrategyClass.newInstance()[ FD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_55 $$ clientThread.start()[ CD ]
Line_7 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_50 $$ threadResults.add(e)[ FD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_3 $$ final String TEST_PATH = new File(sockDir.getDir(), "test_sock_client_server1").getAbsolutePath()[ CD ]
Line_8 $$ final DomainSocket serv = (preConnectedSockets != null) ? null : DomainSocket.bindAndListen(TEST_PATH)-->Line_65 $$ serv.close()[ FD ]
Line_9 $$ Thread serverThread = new Thread() -->Line_62 $$ serverThread.join(120000)[ FD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_62 $$ serverThread.join(120000)[ CD ]
Line_19 $$ WriteStrategy writer = writeStrategyClass.newInstance()-->Line_21 $$ writer.write(serverMsg1)[ FD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_8 $$ final DomainSocket serv = (preConnectedSockets != null) ? null : DomainSocket.bindAndListen(TEST_PATH)[ CD ]
Line_13 $$ conn = preConnectedSockets != null ? preConnectedSockets[0] : serv.accept()-->Line_22 $$ InputStream connInputStream = conn.getInputStream()[ FD ]
Line_19 $$ WriteStrategy writer = writeStrategyClass.newInstance()-->Line_39 $$ writer.init(client)[ FD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_4 $$ final byte[] clientMsg1 = new byte[] [ CD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_19 $$ WriteStrategy writer = writeStrategyClass.newInstance()[ FD ]
Line_22 $$ InputStream connInputStream = conn.getInputStream()-->Line_23 $$ int in2 = connInputStream.read()[ FD ]
Line_8 $$ final DomainSocket serv = (preConnectedSockets != null) ? null : DomainSocket.bindAndListen(TEST_PATH)-->Line_13 $$ conn = preConnectedSockets != null ? preConnectedSockets[0] : serv.accept()[ FD ]
Line_4 $$ final byte[] clientMsg1 = new byte[] -->Line_40 $$ writer.write(clientMsg1)[ FD ]
Line_14 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_45 $$ Assert.assertTrue(Arrays.equals(serverMsg1, in1))[ FD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_56 $$ for (int i = 0; i < 2; i++) [ CD ]
Line_41 $$ ReadStrategy reader = readStrategyClass.newInstance()-->Line_44 $$ reader.readFully(in1, 0, in1.length)[ FD ]
Line_4 $$ final byte[] clientMsg1 = new byte[] -->Line_18 $$ Assert.assertTrue(Arrays.equals(clientMsg1, in1))[ FD ]
Line_9 $$ Thread serverThread = new Thread() -->Line_30 $$ threadResults.add(new Success())[ CD ]
Line_34 $$ Thread clientThread = new Thread() -->Line_52 $$ threadResults.add(new Success())[ CD ]
Line_2 $$ void testClientServer1(final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket[] preConnectedSockets) throws Exception -->Line_64 $$ if (serv != null) [ CD ]
Line_15 $$ ReadStrategy reader = readStrategyClass.newInstance()-->Line_44 $$ reader.readFully(in1, 0, in1.length)[ FD ]
Line_5 $$ final byte[] serverMsg1 = new byte[] -->Line_21 $$ writer.write(serverMsg1)[ FD ]
Line_11 $$ DomainSocket conn = null-->Line_13 $$ conn = preConnectedSockets != null ? preConnectedSockets[0] : serv.accept()[ FD ]
Line_14 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_17 $$ reader.readFully(in1, 0, in1.length)[ FD ]
Line_9 $$ Thread serverThread = new Thread() -->Line_33 $$ serverThread.start()[ FD ]
Line_14 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_44 $$ reader.readFully(in1, 0, in1.length)[ FD ]
Line_58 $$ if (!(t instanceof Success)) -->Line_59 $$ Assert.fail(t.getMessage() + ExceptionUtils.getStackTrace(t))[ CD ]
Line_7 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_52 $$ threadResults.add(new Success())[ FD ]
Line_5 $$ final byte[] serverMsg1 = new byte[] -->Line_45 $$ Assert.assertTrue(Arrays.equals(serverMsg1, in1))[ FD ]
Line_38 $$ WriteStrategy writer = writeStrategyClass.newInstance()-->Line_39 $$ writer.init(client)[ FD ]
Line_41 $$ ReadStrategy reader = readStrategyClass.newInstance()-->Line_42 $$ reader.init(client)[ FD ]
Line_8 $$ final DomainSocket serv = (preConnectedSockets != null) ? null : DomainSocket.bindAndListen(TEST_PATH)-->Line_64 $$ if (serv != null) [ FD ]
