Line_2 $$ private static void doFailTest(@NonNls final String text, final Parser parser, @NonNls final String expected) -->Line_6 $$ PsiBuilder builder = PsiBuilderFactory.getInstance().createBuilder(new PlainTextParserDefinition(), new MyTestLexer(), text)[ FD ]
Line_6 $$ PsiBuilder builder = PsiBuilderFactory.getInstance().createBuilder(new PlainTextParserDefinition(), new MyTestLexer(), text)-->Line_9 $$ builder.getLightTree()[ FD ]
Line_2 $$ private static void doFailTest(@NonNls final String text, final Parser parser, @NonNls final String expected) -->Line_3 $$ PlatformTestUtil.withStdErrSuppressed(new Runnable() [ CD ]
Line_6 $$ PsiBuilder builder = PsiBuilderFactory.getInstance().createBuilder(new PlainTextParserDefinition(), new MyTestLexer(), text)-->Line_7 $$ builder.setDebugMode(true)[ FD ]
Line_6 $$ PsiBuilder builder = PsiBuilderFactory.getInstance().createBuilder(new PlainTextParserDefinition(), new MyTestLexer(), text)-->Line_8 $$ parser.parse(builder)[ FD ]
Line_2 $$ private static void doFailTest(@NonNls final String text, final Parser parser, @NonNls final String expected) -->Line_8 $$ parser.parse(builder)[ FD ]
Line_2 $$ private static void doFailTest(@NonNls final String text, final Parser parser, @NonNls final String expected) -->Line_12 $$ assertEquals(expected, e.getMessage())[ FD ]
