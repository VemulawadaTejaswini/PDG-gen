Line_2 $$ private static void generateAndShowXml(final Module module, final String className) -->Line_12 $$ final Project project = module.getProject()[ FD ]
Line_39 $$ final String text = JDOMUtil.writeElement(element, "\n")-->Line_40 $$ Messages.showIdeaMessageDialog(project, text, "Serialized XML for '" + className + "'", new String[] [ FD ]
Line_2 $$ private static void generateAndShowXml(final Module module, final String className) -->Line_4 $$ final List<String> list = OrderEnumerator.orderEntries(module).recursively().runtimeOnly().getPathsList().getPathList()[ CD ]
Line_2 $$ private static void generateAndShowXml(final Module module, final String className) -->Line_14 $$ final Class<?> aClass[ CD ]
Line_35 $$ Throwable cause = e.getCause()-->Line_36 $$ Messages.showErrorDialog(project, e.getMessage() + (cause != null ? ": " + cause.getMessage() : ""), CommonBundle.getErrorTitle())[ FD ]
Line_22 $$ final Object o-->Line_32 $$ element = XmlSerializer.serialize(o)[ FD ]
Line_2 $$ private static void generateAndShowXml(final Module module, final String className) -->Line_4 $$ final List<String> list = OrderEnumerator.orderEntries(module).recursively().runtimeOnly().getPathsList().getPathList()[ FD ]
Line_2 $$ private static void generateAndShowXml(final Module module, final String className) -->Line_12 $$ final Project project = module.getProject()[ CD ]
Line_16 $$ aClass = Class.forName(className, true, loader)-->Line_24 $$ o = new SampleObjectGenerator().createValue(aClass, FList.<Type>emptyList())[ FD ]
Line_12 $$ final Project project = module.getProject()-->Line_26 $$ Messages.showErrorDialog(project, "Cannot generate class '" + className + "': " + e.getMessage(), CommonBundle.getErrorTitle())[ FD ]
Line_30 $$ final Element element-->Line_32 $$ element = XmlSerializer.serialize(o)[ FD ]
Line_2 $$ private static void generateAndShowXml(final Module module, final String className) -->Line_13 $$ UrlClassLoader loader = UrlClassLoader.build().urls(urls).parent(XmlSerializer.class.getClassLoader()).get()[ CD ]
Line_2 $$ private static void generateAndShowXml(final Module module, final String className) -->Line_3 $$ final List<URL> urls = new ArrayList<URL>()[ CD ]
Line_14 $$ final Class<?> aClass-->Line_24 $$ o = new SampleObjectGenerator().createValue(aClass, FList.<Type>emptyList())[ FD ]
Line_2 $$ private static void generateAndShowXml(final Module module, final String className) -->Line_22 $$ final Object o[ CD ]
Line_30 $$ final Element element-->Line_39 $$ final String text = JDOMUtil.writeElement(element, "\n")[ FD ]
Line_13 $$ UrlClassLoader loader = UrlClassLoader.build().urls(urls).parent(XmlSerializer.class.getClassLoader()).get()-->Line_16 $$ aClass = Class.forName(className, true, loader)[ FD ]
Line_5 $$ for (String path : list) -->Line_7 $$ urls.add(new File(FileUtil.toSystemIndependentName(path)).toURI().toURL())[ FD ]
Line_12 $$ final Project project = module.getProject()-->Line_18 $$ Messages.showErrorDialog(project, "Cannot find class '" + className + "'", CommonBundle.getErrorTitle())[ FD ]
Line_2 $$ private static void generateAndShowXml(final Module module, final String className) -->Line_40 $$ Messages.showIdeaMessageDialog(project, text, "Serialized XML for '" + className + "'", new String[] [ CD ]
Line_12 $$ final Project project = module.getProject()-->Line_40 $$ Messages.showIdeaMessageDialog(project, text, "Serialized XML for '" + className + "'", new String[] [ FD ]
Line_3 $$ final List<URL> urls = new ArrayList<URL>()-->Line_13 $$ UrlClassLoader loader = UrlClassLoader.build().urls(urls).parent(XmlSerializer.class.getClassLoader()).get()[ FD ]
Line_2 $$ private static void generateAndShowXml(final Module module, final String className) -->Line_16 $$ aClass = Class.forName(className, true, loader)[ FD ]
Line_22 $$ final Object o-->Line_24 $$ o = new SampleObjectGenerator().createValue(aClass, FList.<Type>emptyList())[ FD ]
Line_24 $$ o = new SampleObjectGenerator().createValue(aClass, FList.<Type>emptyList())-->Line_32 $$ element = XmlSerializer.serialize(o)[ FD ]
Line_12 $$ final Project project = module.getProject()-->Line_36 $$ Messages.showErrorDialog(project, e.getMessage() + (cause != null ? ": " + cause.getMessage() : ""), CommonBundle.getErrorTitle())[ FD ]
Line_2 $$ private static void generateAndShowXml(final Module module, final String className) -->Line_30 $$ final Element element[ CD ]
Line_14 $$ final Class<?> aClass-->Line_16 $$ aClass = Class.forName(className, true, loader)[ FD ]
Line_3 $$ final List<URL> urls = new ArrayList<URL>()-->Line_7 $$ urls.add(new File(FileUtil.toSystemIndependentName(path)).toURI().toURL())[ FD ]
Line_32 $$ element = XmlSerializer.serialize(o)-->Line_39 $$ final String text = JDOMUtil.writeElement(element, "\n")[ FD ]
Line_2 $$ private static void generateAndShowXml(final Module module, final String className) -->Line_39 $$ final String text = JDOMUtil.writeElement(element, "\n")[ CD ]
