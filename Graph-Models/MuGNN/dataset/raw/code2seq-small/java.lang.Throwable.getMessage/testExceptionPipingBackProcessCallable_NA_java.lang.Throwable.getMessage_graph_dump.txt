Line_3 $$ ExceptionPipingBackProcessCallable exceptionPipingBackProcessCallable = new ExceptionPipingBackProcessCallable()-->Line_5 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), exceptionPipingBackProcessCallable)[ FD ]
Line_12 $$ Throwable throwable = logRecord.getThrown()-->Line_13 $$ Assert.assertSame(ProcessException.class, throwable.getClass())[ FD ]
Line_6 $$ NoticeableFuture<Serializable> noticeableFuture = processChannel.getProcessNoticeableFuture()-->Line_7 $$ Assert.assertNull(noticeableFuture.get())[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_11 $$ Assert.assertEquals("Unable to invoke generic process callable", logRecord.getMessage())[ FD ]
Line_12 $$ Throwable throwable = logRecord.getThrown()-->Line_14 $$ Assert.assertEquals(DummyExceptionProcessCallable.class.getName(), throwable.getMessage())[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_10 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_9 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_12 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_4 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LocalProcessExecutor.class.getName(), Level.SEVERE)) -->Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_5 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), exceptionPipingBackProcessCallable)-->Line_6 $$ NoticeableFuture<Serializable> noticeableFuture = processChannel.getProcessNoticeableFuture()[ FD ]
Line_2 $$ public void testExceptionPipingBackProcessCallable() throws Exception -->Line_3 $$ ExceptionPipingBackProcessCallable exceptionPipingBackProcessCallable = new ExceptionPipingBackProcessCallable()[ CD ]
