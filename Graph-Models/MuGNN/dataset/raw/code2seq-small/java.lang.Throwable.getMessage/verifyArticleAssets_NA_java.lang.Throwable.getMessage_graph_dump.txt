Line_16 $$ ActionableDynamicQuery actionableDynamicQuery = _journalArticleLocalService.getActionableDynamicQuery()-->Line_35 $$ actionableDynamicQuery.performActions()[ FD ]
Line_29 $$ actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<JournalArticle>() -->Line_31 $$ AssetEntry assetEntry = _assetEntryLocalService.fetchEntry(JournalArticle.class.getName(), article.getResourcePrimKey())[ FD ]
Line_17 $$ actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() -->Line_19 $$ Property versionProperty = PropertyFactoryUtil.forName("version")[ CD ]
Line_7 $$ for (JournalArticle journalArticle : journalArticles) -->Line_12 $$ _log.warn("Unable to update asset for article " + journalArticle.getId() + ": " + e.getMessage())[ FD ]
Line_2 $$ protected void verifyArticleAssets() throws Exception -->Line_17 $$ actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() [ CD ]
Line_3 $$ List<JournalArticle> journalArticles = _journalArticleLocalService.getNoAssetArticles()-->Line_5 $$ _log.debug("Processing " + journalArticles.size() + " articles with no asset")[ FD ]
Line_17 $$ actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() -->Line_22 $$ dynamicQuery.add(statusProperty.eq(WorkflowConstants.STATUS_DRAFT))[ CD ]
Line_2 $$ protected void verifyArticleAssets() throws Exception -->Line_4 $$ if (_log.isDebugEnabled()) [ CD ]
Line_16 $$ ActionableDynamicQuery actionableDynamicQuery = _journalArticleLocalService.getActionableDynamicQuery()-->Line_26 $$ long count = actionableDynamicQuery.performCount()[ FD ]
Line_4 $$ if (_log.isDebugEnabled()) -->Line_5 $$ _log.debug("Processing " + journalArticles.size() + " articles with no asset")[ CD ]
Line_29 $$ actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<JournalArticle>() -->Line_32 $$ _assetEntryLocalService.updateEntry(assetEntry.getClassName(), assetEntry.getClassPK(), null, assetEntry.isVisible())[ CD ]
Line_36 $$ if (_log.isDebugEnabled()) -->Line_37 $$ _log.debug("Assets verified for articles")[ CD ]
Line_16 $$ ActionableDynamicQuery actionableDynamicQuery = _journalArticleLocalService.getActionableDynamicQuery()-->Line_17 $$ actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() [ FD ]
Line_19 $$ Property versionProperty = PropertyFactoryUtil.forName("version")-->Line_20 $$ dynamicQuery.add(versionProperty.eq(JournalArticleConstants.VERSION_DEFAULT))[ FD ]
Line_17 $$ actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() -->Line_20 $$ dynamicQuery.add(versionProperty.eq(JournalArticleConstants.VERSION_DEFAULT))[ CD ]
Line_17 $$ actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() -->Line_20 $$ dynamicQuery.add(versionProperty.eq(JournalArticleConstants.VERSION_DEFAULT))[ FD ]
Line_2 $$ protected void verifyArticleAssets() throws Exception -->Line_36 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ protected void verifyArticleAssets() throws Exception -->Line_16 $$ ActionableDynamicQuery actionableDynamicQuery = _journalArticleLocalService.getActionableDynamicQuery()[ CD ]
Line_2 $$ protected void verifyArticleAssets() throws Exception -->Line_3 $$ List<JournalArticle> journalArticles = _journalArticleLocalService.getNoAssetArticles()[ CD ]
Line_16 $$ ActionableDynamicQuery actionableDynamicQuery = _journalArticleLocalService.getActionableDynamicQuery()-->Line_29 $$ actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<JournalArticle>() [ FD ]
Line_31 $$ AssetEntry assetEntry = _assetEntryLocalService.fetchEntry(JournalArticle.class.getName(), article.getResourcePrimKey())-->Line_32 $$ _assetEntryLocalService.updateEntry(assetEntry.getClassName(), assetEntry.getClassPK(), null, assetEntry.isVisible())[ FD ]
Line_29 $$ actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<JournalArticle>() -->Line_31 $$ AssetEntry assetEntry = _assetEntryLocalService.fetchEntry(JournalArticle.class.getName(), article.getResourcePrimKey())[ CD ]
Line_17 $$ actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() -->Line_22 $$ dynamicQuery.add(statusProperty.eq(WorkflowConstants.STATUS_DRAFT))[ FD ]
Line_2 $$ protected void verifyArticleAssets() throws Exception -->Line_40 $$ updateResourcePrimKey()[ CD ]
Line_2 $$ protected void verifyArticleAssets() throws Exception -->Line_35 $$ actionableDynamicQuery.performActions()[ CD ]
Line_2 $$ protected void verifyArticleAssets() throws Exception -->Line_29 $$ actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<JournalArticle>() [ CD ]
Line_25 $$ if (_log.isDebugEnabled()) -->Line_26 $$ long count = actionableDynamicQuery.performCount()[ CD ]
Line_7 $$ for (JournalArticle journalArticle : journalArticles) -->Line_9 $$ _journalArticleLocalService.updateAsset(journalArticle.getUserId(), journalArticle, null, null, null, null)[ FD ]
Line_2 $$ protected void verifyArticleAssets() throws Exception -->Line_25 $$ if (_log.isDebugEnabled()) [ CD ]
Line_25 $$ if (_log.isDebugEnabled()) -->Line_27 $$ _log.debug("Processing " + count + " default article versions in draft mode")[ CD ]
Line_2 $$ protected void verifyArticleAssets() throws Exception -->Line_39 $$ updateCreateAndModifiedDates()[ CD ]
Line_11 $$ if (_log.isWarnEnabled()) -->Line_12 $$ _log.warn("Unable to update asset for article " + journalArticle.getId() + ": " + e.getMessage())[ CD ]
Line_21 $$ Property statusProperty = PropertyFactoryUtil.forName("status")-->Line_22 $$ dynamicQuery.add(statusProperty.eq(WorkflowConstants.STATUS_DRAFT))[ FD ]
Line_17 $$ actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() -->Line_21 $$ Property statusProperty = PropertyFactoryUtil.forName("status")[ CD ]
