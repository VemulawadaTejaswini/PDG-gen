Line_6 $$ final Type fieldType = Type.getType((String) myFieldDescMap.get(binding))-->Line_16 $$ throw new CodeGenerationException(componentId, "Class not found: " + fieldType.getClassName())[ FD ]
Line_2 $$ private void validateFieldClass(String binding, InstrumentationClassFinder.PseudoClass componentClass, String componentId) throws CodeGenerationException -->Line_6 $$ final Type fieldType = Type.getType((String) myFieldDescMap.get(binding))[ FD ]
Line_6 $$ final Type fieldType = Type.getType((String) myFieldDescMap.get(binding))-->Line_11 $$ final InstrumentationClassFinder.PseudoClass fieldClass = myFinder.loadClass(fieldType.getClassName())[ FD ]
Line_2 $$ private void validateFieldClass(String binding, InstrumentationClassFinder.PseudoClass componentClass, String componentId) throws CodeGenerationException -->Line_13 $$ throw new CodeGenerationException(componentId, "Cannot bind: Incompatible types. Cannot assign " + componentClass.getName().replace('/', '.') + " to field " + myClassToBind + "." + binding)[ FD ]
Line_2 $$ private void validateFieldClass(String binding, InstrumentationClassFinder.PseudoClass componentClass, String componentId) throws CodeGenerationException -->Line_6 $$ final Type fieldType = Type.getType((String) myFieldDescMap.get(binding))[ CD ]
Line_6 $$ final Type fieldType = Type.getType((String) myFieldDescMap.get(binding))-->Line_7 $$ if (fieldType.getSort() != Type.OBJECT) [ FD ]
Line_2 $$ private void validateFieldClass(String binding, InstrumentationClassFinder.PseudoClass componentClass, String componentId) throws CodeGenerationException -->Line_7 $$ if (fieldType.getSort() != Type.OBJECT) [ CD ]
Line_2 $$ private void validateFieldClass(String binding, InstrumentationClassFinder.PseudoClass componentClass, String componentId) throws CodeGenerationException -->Line_12 $$ if (!fieldClass.isAssignableFrom(componentClass)) [ FD ]
Line_2 $$ private void validateFieldClass(String binding, InstrumentationClassFinder.PseudoClass componentClass, String componentId) throws CodeGenerationException -->Line_3 $$ if (!myFieldDescMap.containsKey(binding)) [ CD ]
Line_11 $$ final InstrumentationClassFinder.PseudoClass fieldClass = myFinder.loadClass(fieldType.getClassName())-->Line_12 $$ if (!fieldClass.isAssignableFrom(componentClass)) [ FD ]
Line_2 $$ private void validateFieldClass(String binding, InstrumentationClassFinder.PseudoClass componentClass, String componentId) throws CodeGenerationException -->Line_3 $$ if (!myFieldDescMap.containsKey(binding)) [ FD ]
