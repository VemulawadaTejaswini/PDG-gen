Line_5 $$ CountDownLatch latch = new CountDownLatch(1 + numberOfThreads)-->Line_9 $$ latch.countDown()[ FD ]
Line_16 $$ first = random.nextBoolean()-->Line_15 $$ do [ FD ]
Line_4 $$ final Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().build()-->Line_36 $$ cache.get(key)[ FD ]
Line_4 $$ final Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().build()-->Line_21 $$ cache.computeIfAbsent(key,  k -> [ FD ]
Line_11 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_12 $$ Integer key = random.nextInt(numberOfEntries)[ CD ]
Line_6 $$ List<Thread> threads = new ArrayList()-->Line_40 $$ threads.add(thread)[ FD ]
Line_2 $$ public void testCachePollution() throws InterruptedException -->Line_43 $$ latch.countDown()[ CD ]
Line_3 $$ int numberOfThreads = randomIntBetween(2, 32)-->Line_7 $$ for (int i = 0; i < numberOfThreads; i++) [ FD ]
Line_19 $$ if (first) -->Line_33 $$ if (second) [ CD ]
Line_2 $$ public void testCachePollution() throws InterruptedException -->Line_5 $$ CountDownLatch latch = new CountDownLatch(1 + numberOfThreads)[ CD ]
Line_11 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_14 $$ boolean second[ CD ]
Line_11 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_15 $$ do [ CD ]
Line_10 $$ Random random = new Random(random().nextLong())-->Line_12 $$ Integer key = random.nextInt(numberOfEntries)[ FD ]
Line_14 $$ boolean second-->Line_17 $$ second = random.nextBoolean()[ FD ]
Line_12 $$ Integer key = random.nextInt(numberOfEntries)-->Line_21 $$ cache.computeIfAbsent(key,  k -> [ FD ]
Line_7 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_40 $$ threads.add(thread)[ CD ]
Line_2 $$ public void testCachePollution() throws InterruptedException -->Line_7 $$ for (int i = 0; i < numberOfThreads; i++) [ CD ]
Line_22 $$ if (random.nextBoolean()) -->Line_23 $$ return Integer.toString(k)[ CD ]
Line_14 $$ boolean second-->Line_15 $$ do [ FD ]
Line_14 $$ boolean second-->Line_19 $$ if (first) [ FD ]
Line_12 $$ Integer key = random.nextInt(numberOfEntries)-->Line_34 $$ cache.invalidate(key)[ FD ]
Line_10 $$ Random random = new Random(random().nextLong())-->Line_17 $$ second = random.nextBoolean()[ FD ]
Line_33 $$ if (second) -->Line_34 $$ cache.invalidate(key)[ CD ]
Line_7 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_8 $$ Thread thread = new Thread(() -> [ CD ]
Line_11 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_19 $$ if (first) [ CD ]
Line_8 $$ Thread thread = new Thread(() -> -->Line_45 $$ thread.join()[ FD ]
Line_44 $$ for (Thread thread : threads) -->Line_45 $$ thread.join()[ FD ]
Line_11 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_13 $$ boolean first[ CD ]
Line_2 $$ public void testCachePollution() throws InterruptedException -->Line_4 $$ final Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().build()[ CD ]
Line_10 $$ Random random = new Random(random().nextLong())-->Line_16 $$ first = random.nextBoolean()[ FD ]
Line_8 $$ Thread thread = new Thread(() -> -->Line_41 $$ thread.start()[ FD ]
Line_12 $$ Integer key = random.nextInt(numberOfEntries)-->Line_36 $$ cache.get(key)[ FD ]
Line_17 $$ second = random.nextBoolean()-->Line_19 $$ if (first) [ FD ]
Line_5 $$ CountDownLatch latch = new CountDownLatch(1 + numberOfThreads)-->Line_43 $$ latch.countDown()[ FD ]
Line_2 $$ public void testCachePollution() throws InterruptedException -->Line_3 $$ int numberOfThreads = randomIntBetween(2, 32)[ CD ]
Line_2 $$ public void testCachePollution() throws InterruptedException -->Line_6 $$ List<Thread> threads = new ArrayList()[ CD ]
Line_15 $$ do -->Line_16 $$ first = random.nextBoolean()[ CD ]
Line_33 $$ if (second) -->Line_36 $$ cache.get(key)[ CD ]
Line_17 $$ second = random.nextBoolean()-->Line_15 $$ do [ FD ]
Line_13 $$ boolean first-->Line_15 $$ do [ FD ]
Line_7 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_41 $$ thread.start()[ CD ]
Line_4 $$ final Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().build()-->Line_34 $$ cache.invalidate(key)[ FD ]
Line_13 $$ boolean first-->Line_16 $$ first = random.nextBoolean()[ FD ]
Line_8 $$ Thread thread = new Thread(() -> -->Line_40 $$ threads.add(thread)[ FD ]
Line_15 $$ do -->Line_17 $$ second = random.nextBoolean()[ CD ]
Line_10 $$ Random random = new Random(random().nextLong())-->Line_22 $$ if (random.nextBoolean()) [ FD ]
