Line_4 $$ String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)-->Line_6 $$ if (StringUtils.hasLength(nameAttr)) [ FD ]
Line_24 $$ if (containingBean != null) -->Line_29 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) [ CD ]
Line_24 $$ if (containingBean != null) -->Line_28 $$ String beanClassName = beanDefinition.getBeanClassName()[ CD ]
Line_24 $$ if (containingBean != null) -->Line_27 $$ beanName = this.readerContext.generateBeanName(beanDefinition)[ CD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_10 $$ String beanName = id[ CD ]
Line_5 $$ List<String> aliases = new ArrayList<String>()-->Line_41 $$ String[] aliasesArray = StringUtils.toStringArray(aliases)[ FD ]
Line_6 $$ if (StringUtils.hasLength(nameAttr)) -->Line_7 $$ String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)[ CD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_17 $$ if (containingBean == null) [ CD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_4 $$ String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)[ CD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_20 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)[ CD ]
Line_12 $$ beanName = aliases.remove(0)-->Line_20 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)[ FD ]
Line_25 $$ beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, this.readerContext.getRegistry(), true)-->Line_29 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) [ FD ]
Line_21 $$ if (beanDefinition != null) -->Line_41 $$ String[] aliasesArray = StringUtils.toStringArray(aliases)[ CD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_21 $$ if (beanDefinition != null) [ CD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_24 $$ if (containingBean != null) [ FD ]
Line_20 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)-->Line_21 $$ if (beanDefinition != null) [ FD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_37 $$ error(ex.getMessage(), ele)[ FD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_44 $$ return null[ CD ]
Line_10 $$ String beanName = id-->Line_18 $$ checkNameUniqueness(beanName, aliases, ele)[ FD ]
Line_33 $$ if (logger.isDebugEnabled()) -->Line_34 $$ logger.debug("Neither XML 'id' nor 'name' specified - " + "using generated bean name [" + beanName + "]")[ CD ]
Line_20 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)-->Line_25 $$ beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, this.readerContext.getRegistry(), true)[ FD ]
Line_13 $$ if (logger.isDebugEnabled()) -->Line_14 $$ logger.debug("No XML 'id' specified - using '" + beanName + "' as bean name and " + aliases + " as aliases")[ CD ]
Line_10 $$ String beanName = id-->Line_27 $$ beanName = this.readerContext.generateBeanName(beanDefinition)[ FD ]
Line_20 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)-->Line_28 $$ String beanClassName = beanDefinition.getBeanClassName()[ FD ]
Line_4 $$ String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)-->Line_7 $$ String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)[ FD ]
Line_29 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) -->Line_30 $$ aliases.add(beanClassName)[ CD ]
Line_10 $$ String beanName = id-->Line_11 $$ if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) [ FD ]
Line_5 $$ List<String> aliases = new ArrayList<String>()-->Line_11 $$ if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) [ FD ]
Line_12 $$ beanName = aliases.remove(0)-->Line_22 $$ if (!StringUtils.hasText(beanName)) [ FD ]
Line_5 $$ List<String> aliases = new ArrayList<String>()-->Line_18 $$ checkNameUniqueness(beanName, aliases, ele)[ FD ]
Line_10 $$ String beanName = id-->Line_29 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) [ FD ]
Line_7 $$ String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)-->Line_8 $$ aliases.addAll(Arrays.asList(nameArr))[ FD ]
Line_17 $$ if (containingBean == null) -->Line_18 $$ checkNameUniqueness(beanName, aliases, ele)[ CD ]
Line_12 $$ beanName = aliases.remove(0)-->Line_27 $$ beanName = this.readerContext.generateBeanName(beanDefinition)[ FD ]
Line_27 $$ beanName = this.readerContext.generateBeanName(beanDefinition)-->Line_29 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) [ FD ]
Line_20 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)-->Line_27 $$ beanName = this.readerContext.generateBeanName(beanDefinition)[ FD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_18 $$ checkNameUniqueness(beanName, aliases, ele)[ FD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_20 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)[ FD ]
Line_11 $$ if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) -->Line_12 $$ beanName = aliases.remove(0)[ CD ]
Line_5 $$ List<String> aliases = new ArrayList<String>()-->Line_30 $$ aliases.add(beanClassName)[ FD ]
Line_12 $$ beanName = aliases.remove(0)-->Line_25 $$ beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, this.readerContext.getRegistry(), true)[ FD ]
Line_28 $$ String beanClassName = beanDefinition.getBeanClassName()-->Line_29 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) [ FD ]
Line_24 $$ if (containingBean != null) -->Line_25 $$ beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, this.readerContext.getRegistry(), true)[ CD ]
Line_12 $$ beanName = aliases.remove(0)-->Line_18 $$ checkNameUniqueness(beanName, aliases, ele)[ FD ]
Line_25 $$ beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, this.readerContext.getRegistry(), true)-->Line_27 $$ beanName = this.readerContext.generateBeanName(beanDefinition)[ FD ]
Line_21 $$ if (beanDefinition != null) -->Line_22 $$ if (!StringUtils.hasText(beanName)) [ CD ]
Line_10 $$ String beanName = id-->Line_25 $$ beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, this.readerContext.getRegistry(), true)[ FD ]
Line_10 $$ String beanName = id-->Line_20 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)[ FD ]
Line_12 $$ beanName = aliases.remove(0)-->Line_29 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) [ FD ]
Line_5 $$ List<String> aliases = new ArrayList<String>()-->Line_12 $$ beanName = aliases.remove(0)[ FD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_17 $$ if (containingBean == null) [ FD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_6 $$ if (StringUtils.hasLength(nameAttr)) [ CD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_3 $$ String id = ele.getAttribute(ID_ATTRIBUTE)[ FD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_5 $$ List<String> aliases = new ArrayList<String>()[ CD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_3 $$ String id = ele.getAttribute(ID_ATTRIBUTE)[ CD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_4 $$ String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)[ FD ]
Line_2 $$ public BeanDefinitionHolder parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) -->Line_11 $$ if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) [ CD ]
Line_10 $$ String beanName = id-->Line_12 $$ beanName = aliases.remove(0)[ FD ]
Line_11 $$ if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) -->Line_13 $$ if (logger.isDebugEnabled()) [ CD ]
Line_10 $$ String beanName = id-->Line_22 $$ if (!StringUtils.hasText(beanName)) [ FD ]
Line_5 $$ List<String> aliases = new ArrayList<String>()-->Line_8 $$ aliases.addAll(Arrays.asList(nameArr))[ FD ]
Line_28 $$ String beanClassName = beanDefinition.getBeanClassName()-->Line_30 $$ aliases.add(beanClassName)[ FD ]
Line_21 $$ if (beanDefinition != null) -->Line_42 $$ return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)[ CD ]
Line_6 $$ if (StringUtils.hasLength(nameAttr)) -->Line_8 $$ aliases.addAll(Arrays.asList(nameArr))[ CD ]
