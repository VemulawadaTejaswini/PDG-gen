Line_27 $$ newException = e-->Line_34 $$ newException.printStackTrace()[ FD ]
Line_5 $$ replacements = new HashMap()-->Line_13 $$ oldQueryTranslator.compile(replacements, scalar)[ FD ]
Line_7 $$ QueryTranslator oldQueryTranslator = null-->Line_12 $$ oldQueryTranslator = classic.createQueryTranslator(hql, hql, Collections.EMPTY_MAP, factory, null)[ FD ]
Line_23 $$ newQueryTranslator = createNewQueryTranslator(hql, replacements, scalar)-->Line_39 $$ checkReturnedTypes(oldQueryTranslator, newQueryTranslator)[ FD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_37 $$ checkSql(oldQueryTranslator, newQueryTranslator, hql, scalar, sql)[ CD ]
Line_7 $$ QueryTranslator oldQueryTranslator = null-->Line_39 $$ checkReturnedTypes(oldQueryTranslator, newQueryTranslator)[ FD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_4 $$ if (replacements == null) [ CD ]
Line_19 $$ QueryTranslator newQueryTranslator = null-->Line_23 $$ newQueryTranslator = createNewQueryTranslator(hql, replacements, scalar)[ FD ]
Line_27 $$ newException = e-->Line_33 $$ if (newException != null) [ FD ]
Line_27 $$ newException = e-->Line_35 $$ assertNull("Old query translator did not throw an exception, the new one did", newException)[ FD ]
Line_19 $$ QueryTranslator newQueryTranslator = null-->Line_39 $$ checkReturnedTypes(oldQueryTranslator, newQueryTranslator)[ FD ]
Line_11 $$ QueryTranslatorFactory classic = new ClassicQueryTranslatorFactory()-->Line_12 $$ oldQueryTranslator = classic.createQueryTranslator(hql, hql, Collections.EMPTY_MAP, factory, null)[ FD ]
Line_20 $$ Exception newException = null-->Line_30 $$ assertNotNull("New query translator did *NOT* throw an exception, the old one did : " + oldException, newException)[ FD ]
Line_20 $$ Exception newException = null-->Line_33 $$ if (newException != null) [ FD ]
Line_7 $$ QueryTranslator oldQueryTranslator = null-->Line_38 $$ checkQuerySpaces(oldQueryTranslator, newQueryTranslator)[ FD ]
Line_23 $$ newQueryTranslator = createNewQueryTranslator(hql, replacements, scalar)-->Line_37 $$ checkSql(oldQueryTranslator, newQueryTranslator, hql, scalar, sql)[ FD ]
Line_8 $$ Exception oldException = null-->Line_31 $$ assertEquals(oldException.getMessage(), newException.getMessage())[ FD ]
Line_27 $$ newException = e-->Line_31 $$ assertEquals(oldException.getMessage(), newException.getMessage())[ FD ]
Line_25 $$ newException = e-->Line_30 $$ assertNotNull("New query translator did *NOT* throw an exception, the old one did : " + oldException, newException)[ FD ]
Line_20 $$ Exception newException = null-->Line_35 $$ assertNull("Old query translator did not throw an exception, the new one did", newException)[ FD ]
Line_20 $$ Exception newException = null-->Line_31 $$ assertEquals(oldException.getMessage(), newException.getMessage())[ FD ]
Line_12 $$ oldQueryTranslator = classic.createQueryTranslator(hql, hql, Collections.EMPTY_MAP, factory, null)-->Line_38 $$ checkQuerySpaces(oldQueryTranslator, newQueryTranslator)[ FD ]
Line_12 $$ oldQueryTranslator = classic.createQueryTranslator(hql, hql, Collections.EMPTY_MAP, factory, null)-->Line_13 $$ oldQueryTranslator.compile(replacements, scalar)[ FD ]
Line_23 $$ newQueryTranslator = createNewQueryTranslator(hql, replacements, scalar)-->Line_38 $$ checkQuerySpaces(oldQueryTranslator, newQueryTranslator)[ FD ]
Line_15 $$ oldException = e-->Line_29 $$ if (oldException != null) [ FD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_29 $$ if (oldException != null) [ CD ]
Line_8 $$ Exception oldException = null-->Line_29 $$ if (oldException != null) [ FD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_23 $$ newQueryTranslator = createNewQueryTranslator(hql, replacements, scalar)[ FD ]
Line_7 $$ QueryTranslator oldQueryTranslator = null-->Line_37 $$ checkSql(oldQueryTranslator, newQueryTranslator, hql, scalar, sql)[ FD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_38 $$ checkQuerySpaces(oldQueryTranslator, newQueryTranslator)[ CD ]
Line_25 $$ newException = e-->Line_31 $$ assertEquals(oldException.getMessage(), newException.getMessage())[ FD ]
Line_33 $$ if (newException != null) -->Line_35 $$ assertNull("Old query translator did not throw an exception, the new one did", newException)[ CD ]
Line_17 $$ oldException = e-->Line_31 $$ assertEquals(oldException.getMessage(), newException.getMessage())[ FD ]
Line_17 $$ oldException = e-->Line_29 $$ if (oldException != null) [ FD ]
Line_25 $$ newException = e-->Line_35 $$ assertNull("Old query translator did not throw an exception, the new one did", newException)[ FD ]
Line_25 $$ newException = e-->Line_27 $$ newException = e[ FD ]
Line_12 $$ oldQueryTranslator = classic.createQueryTranslator(hql, hql, Collections.EMPTY_MAP, factory, null)-->Line_37 $$ checkSql(oldQueryTranslator, newQueryTranslator, hql, scalar, sql)[ FD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_39 $$ checkReturnedTypes(oldQueryTranslator, newQueryTranslator)[ CD ]
Line_29 $$ if (oldException != null) -->Line_33 $$ if (newException != null) [ CD ]
Line_19 $$ QueryTranslator newQueryTranslator = null-->Line_37 $$ checkSql(oldQueryTranslator, newQueryTranslator, hql, scalar, sql)[ FD ]
Line_20 $$ Exception newException = null-->Line_34 $$ newException.printStackTrace()[ FD ]
Line_25 $$ newException = e-->Line_34 $$ newException.printStackTrace()[ FD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_4 $$ if (replacements == null) [ FD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_37 $$ checkSql(oldQueryTranslator, newQueryTranslator, hql, scalar, sql)[ FD ]
Line_4 $$ if (replacements == null) -->Line_5 $$ replacements = new HashMap()[ CD ]
Line_33 $$ if (newException != null) -->Line_34 $$ newException.printStackTrace()[ CD ]
Line_20 $$ Exception newException = null-->Line_27 $$ newException = e[ FD ]
Line_29 $$ if (oldException != null) -->Line_32 $$ return[ CD ]
Line_7 $$ QueryTranslator oldQueryTranslator = null-->Line_13 $$ oldQueryTranslator.compile(replacements, scalar)[ FD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_8 $$ Exception oldException = null[ CD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_19 $$ QueryTranslator newQueryTranslator = null[ CD ]
Line_3 $$ SessionFactoryImplementor factory = sessionFactory()-->Line_12 $$ oldQueryTranslator = classic.createQueryTranslator(hql, hql, Collections.EMPTY_MAP, factory, null)[ FD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_5 $$ replacements = new HashMap()[ FD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_12 $$ oldQueryTranslator = classic.createQueryTranslator(hql, hql, Collections.EMPTY_MAP, factory, null)[ FD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_7 $$ QueryTranslator oldQueryTranslator = null[ CD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_3 $$ SessionFactoryImplementor factory = sessionFactory()[ CD ]
Line_20 $$ Exception newException = null-->Line_25 $$ newException = e[ FD ]
Line_12 $$ oldQueryTranslator = classic.createQueryTranslator(hql, hql, Collections.EMPTY_MAP, factory, null)-->Line_39 $$ checkReturnedTypes(oldQueryTranslator, newQueryTranslator)[ FD ]
Line_15 $$ oldException = e-->Line_17 $$ oldException = e[ FD ]
Line_19 $$ QueryTranslator newQueryTranslator = null-->Line_38 $$ checkQuerySpaces(oldQueryTranslator, newQueryTranslator)[ FD ]
Line_5 $$ replacements = new HashMap()-->Line_23 $$ newQueryTranslator = createNewQueryTranslator(hql, replacements, scalar)[ FD ]
Line_29 $$ if (oldException != null) -->Line_30 $$ assertNotNull("New query translator did *NOT* throw an exception, the old one did : " + oldException, newException)[ CD ]
Line_27 $$ newException = e-->Line_30 $$ assertNotNull("New query translator did *NOT* throw an exception, the old one did : " + oldException, newException)[ FD ]
Line_29 $$ if (oldException != null) -->Line_31 $$ assertEquals(oldException.getMessage(), newException.getMessage())[ CD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_20 $$ Exception newException = null[ CD ]
Line_2 $$ protected void assertTranslation(String hql, Map replacements, boolean scalar, String sql) -->Line_13 $$ oldQueryTranslator.compile(replacements, scalar)[ FD ]
Line_25 $$ newException = e-->Line_33 $$ if (newException != null) [ FD ]
Line_15 $$ oldException = e-->Line_31 $$ assertEquals(oldException.getMessage(), newException.getMessage())[ FD ]
Line_8 $$ Exception oldException = null-->Line_15 $$ oldException = e[ FD ]
Line_8 $$ Exception oldException = null-->Line_17 $$ oldException = e[ FD ]
