Line_5 $$ final File dataFile = new File(storageFilePath + DATA_EXTENSION)-->Line_6 $$ if (recordsFile.exists() != dataFile.exists()) [ FD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_14 $$ recordsTable = createRecordsTable(pool, recordsFile)[ FD ]
Line_11 $$ AbstractRecordsTable recordsTable = null-->Line_14 $$ recordsTable = createRecordsTable(pool, recordsFile)[ FD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_21 $$ boolean deleted = deleteFiles(storageFilePath)[ FD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_4 $$ final File recordsFile = new File(storageFilePath + INDEX_EXTENSION)[ CD ]
Line_34 $$ if (myDataTable.isCompactNecessary()) -->Line_35 $$ compact(storageFilePath)[ CD ]
Line_4 $$ final File recordsFile = new File(storageFilePath + INDEX_EXTENSION)-->Line_6 $$ if (recordsFile.exists() != dataFile.exists()) [ FD ]
Line_14 $$ recordsTable = createRecordsTable(pool, recordsFile)-->Line_18 $$ if (recordsTable != null) [ FD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_3 $$ convertFromOldExtensions(storageFilePath)[ FD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_35 $$ compact(storageFilePath)[ FD ]
Line_14 $$ recordsTable = createRecordsTable(pool, recordsFile)-->Line_19 $$ recordsTable.dispose()[ FD ]
Line_4 $$ final File recordsFile = new File(storageFilePath + INDEX_EXTENSION)-->Line_14 $$ recordsTable = createRecordsTable(pool, recordsFile)[ FD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_7 $$ deleteFiles(storageFilePath)[ FD ]
Line_12 $$ DataTable dataTable-->Line_15 $$ dataTable = new DataTable(dataFile, pool)[ FD ]
Line_4 $$ final File recordsFile = new File(storageFilePath + INDEX_EXTENSION)-->Line_9 $$ FileUtil.createIfDoesntExist(recordsFile)[ FD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_3 $$ convertFromOldExtensions(storageFilePath)[ CD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_25 $$ if (retryCount >= 5) [ FD ]
Line_21 $$ boolean deleted = deleteFiles(storageFilePath)-->Line_22 $$ if (!deleted) [ FD ]
Line_6 $$ if (recordsFile.exists() != dataFile.exists()) -->Line_7 $$ deleteFiles(storageFilePath)[ CD ]
Line_18 $$ if (recordsTable != null) -->Line_19 $$ recordsTable.dispose()[ CD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_9 $$ FileUtil.createIfDoesntExist(recordsFile)[ CD ]
Line_11 $$ AbstractRecordsTable recordsTable = null-->Line_18 $$ if (recordsTable != null) [ FD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_12 $$ DataTable dataTable[ CD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_10 $$ FileUtil.createIfDoesntExist(dataFile)[ CD ]
Line_11 $$ AbstractRecordsTable recordsTable = null-->Line_19 $$ recordsTable.dispose()[ FD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_6 $$ if (recordsFile.exists() != dataFile.exists()) [ CD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_5 $$ final File dataFile = new File(storageFilePath + DATA_EXTENSION)[ CD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_34 $$ if (myDataTable.isCompactNecessary()) [ CD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_28 $$ tryInit(storageFilePath, pool, retryCount + 1)[ FD ]
Line_5 $$ final File dataFile = new File(storageFilePath + DATA_EXTENSION)-->Line_10 $$ FileUtil.createIfDoesntExist(dataFile)[ FD ]
Line_2 $$ private void tryInit(String storageFilePath, PagePool pool, int retryCount) throws IOException -->Line_11 $$ AbstractRecordsTable recordsTable = null[ CD ]
