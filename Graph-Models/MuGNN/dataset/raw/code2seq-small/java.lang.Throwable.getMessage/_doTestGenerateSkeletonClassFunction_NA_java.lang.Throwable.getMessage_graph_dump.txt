Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) -->Line_16 $$ serializer.writeInt(i)[ CD ]
Line_37 $$ if (returnType == void.class) -->Line_44 $$ Assert.assertEquals(_sampleValueMap.get(returnType), rpcResponse.getResult())[ CD ]
Line_37 $$ if (returnType == void.class) -->Line_38 $$ Assert.assertNull(mockIntraband.getDatagram())[ CD ]
Line_43 $$ RPCResponse rpcResponse = deserializer.readObject()-->Line_44 $$ Assert.assertEquals(_sampleValueMap.get(returnType), rpcResponse.getResult())[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_9 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(mockIntraband)[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_6 $$ IntrabandProxySkeleton intrabandProxySkeleton = constructor.newInstance(testGenerateTargetLocator)[ CD ]
Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) -->Line_30 $$ Method proxyMethod = proxyMethods.get(i)[ FD ]
Line_3 $$ Class<? extends IntrabandProxySkeleton> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_26 $$ Assert.assertEquals("Unknow method index " + i + " for proxy methods mappings " + ReflectionTestUtil.getFieldValue(skeletonClass, "_PROXY_METHODS_MAPPING"), throwable.getMessage())[ FD ]
Line_20 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_22 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_3 $$ Class<? extends IntrabandProxySkeleton> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)[ FD ]
Line_34 $$ Deserializer deserializer = new Deserializer(serializer.toByteBuffer())-->Line_43 $$ RPCResponse rpcResponse = deserializer.readObject()[ FD ]
Line_37 $$ if (returnType == void.class) -->Line_42 $$ deserializer = new Deserializer(responseDatagram.getDataByteBuffer())[ CD ]
Line_10 $$ Datagram datagram = Datagram.createRequestDatagram(SystemDataType.PROXY.getValue(), new byte[0])-->Line_35 $$ intrabandProxySkeleton.dispatch(mockRegistrationReference, datagram, deserializer)[ FD ]
Line_10 $$ Datagram datagram = Datagram.createRequestDatagram(SystemDataType.PROXY.getValue(), new byte[0])-->Line_19 $$ intrabandProxySkeleton.dispatch(mockRegistrationReference, datagram, new Deserializer(serializer.toByteBuffer()))[ FD ]
Line_37 $$ if (returnType == void.class) -->Line_39 $$ Assert.assertNull(mockIntraband.getRegistrationReference())[ CD ]
Line_36 $$ Class<?> returnType = proxyMethod.getReturnType()-->Line_44 $$ Assert.assertEquals(_sampleValueMap.get(returnType), rpcResponse.getResult())[ FD ]
Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) -->Line_34 $$ Deserializer deserializer = new Deserializer(serializer.toByteBuffer())[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) [ CD ]
Line_14 $$ Serializer serializer = new Serializer()-->Line_34 $$ Deserializer deserializer = new Deserializer(serializer.toByteBuffer())[ FD ]
Line_3 $$ Class<? extends IntrabandProxySkeleton> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_18 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(skeletonClass.getName(), Level.SEVERE)) [ FD ]
Line_8 $$ MockIntraband mockIntraband = new MockIntraband()-->Line_41 $$ Datagram responseDatagram = mockIntraband.getDatagram()[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_11 $$ String targetId = "targetId"[ CD ]
Line_30 $$ Method proxyMethod = proxyMethods.get(i)-->Line_31 $$ for (Class<?> parameterType : proxyMethod.getParameterTypes()) [ FD ]
Line_18 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(skeletonClass.getName(), Level.SEVERE)) -->Line_20 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_20 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_21 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_14 $$ Serializer serializer = new Serializer()-->Line_19 $$ intrabandProxySkeleton.dispatch(mockRegistrationReference, datagram, new Deserializer(serializer.toByteBuffer()))[ FD ]
Line_41 $$ Datagram responseDatagram = mockIntraband.getDatagram()-->Line_42 $$ deserializer = new Deserializer(responseDatagram.getDataByteBuffer())[ FD ]
Line_6 $$ IntrabandProxySkeleton intrabandProxySkeleton = constructor.newInstance(testGenerateTargetLocator)-->Line_7 $$ Assert.assertSame(testGenerateTargetLocator, ReflectionTestUtil.getFieldValue(intrabandProxySkeleton, "_targetLocator"))[ FD ]
Line_6 $$ IntrabandProxySkeleton intrabandProxySkeleton = constructor.newInstance(testGenerateTargetLocator)-->Line_35 $$ intrabandProxySkeleton.dispatch(mockRegistrationReference, datagram, deserializer)[ FD ]
Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) -->Line_14 $$ Serializer serializer = new Serializer()[ CD ]
Line_22 $$ LogRecord logRecord = logRecords.get(0)-->Line_23 $$ Assert.assertEquals("Unable to dispatch", logRecord.getMessage())[ FD ]
Line_37 $$ if (returnType == void.class) -->Line_45 $$ Assert.assertSame(mockRegistrationReference, mockIntraband.getRegistrationReference())[ CD ]
Line_9 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(mockIntraband)-->Line_19 $$ intrabandProxySkeleton.dispatch(mockRegistrationReference, datagram, new Deserializer(serializer.toByteBuffer()))[ FD ]
Line_8 $$ MockIntraband mockIntraband = new MockIntraband()-->Line_45 $$ Assert.assertSame(mockRegistrationReference, mockIntraband.getRegistrationReference())[ FD ]
Line_8 $$ MockIntraband mockIntraband = new MockIntraband()-->Line_39 $$ Assert.assertNull(mockIntraband.getRegistrationReference())[ FD ]
Line_24 $$ Throwable throwable = logRecord.getThrown()-->Line_26 $$ Assert.assertEquals("Unknow method index " + i + " for proxy methods mappings " + ReflectionTestUtil.getFieldValue(skeletonClass, "_PROXY_METHODS_MAPPING"), throwable.getMessage())[ FD ]
Line_34 $$ Deserializer deserializer = new Deserializer(serializer.toByteBuffer())-->Line_42 $$ deserializer = new Deserializer(responseDatagram.getDataByteBuffer())[ FD ]
Line_12 $$ List<Method> proxyMethods = _getProxyMethods(clazz)-->Line_30 $$ Method proxyMethod = proxyMethods.get(i)[ FD ]
Line_11 $$ String targetId = "targetId"-->Line_15 $$ serializer.writeString(targetId)[ FD ]
Line_6 $$ IntrabandProxySkeleton intrabandProxySkeleton = constructor.newInstance(testGenerateTargetLocator)-->Line_19 $$ intrabandProxySkeleton.dispatch(mockRegistrationReference, datagram, new Deserializer(serializer.toByteBuffer()))[ FD ]
Line_9 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(mockIntraband)-->Line_45 $$ Assert.assertSame(mockRegistrationReference, mockIntraband.getRegistrationReference())[ FD ]
Line_5 $$ TestGenerateTargetLocator testGenerateTargetLocator = new TestGenerateTargetLocator(clazz)-->Line_7 $$ Assert.assertSame(testGenerateTargetLocator, ReflectionTestUtil.getFieldValue(intrabandProxySkeleton, "_targetLocator"))[ FD ]
Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) -->Line_36 $$ Class<?> returnType = proxyMethod.getReturnType()[ CD ]
Line_37 $$ if (returnType == void.class) -->Line_41 $$ Datagram responseDatagram = mockIntraband.getDatagram()[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_12 $$ List<Method> proxyMethods = _getProxyMethods(clazz)[ CD ]
Line_36 $$ Class<?> returnType = proxyMethod.getReturnType()-->Line_37 $$ if (returnType == void.class) [ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_10 $$ Datagram datagram = Datagram.createRequestDatagram(SystemDataType.PROXY.getValue(), new byte[0])[ CD ]
Line_14 $$ Serializer serializer = new Serializer()-->Line_15 $$ serializer.writeString(targetId)[ FD ]
Line_3 $$ Class<? extends IntrabandProxySkeleton> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_4 $$ Constructor<? extends IntrabandProxySkeleton> constructor = skeletonClass.getConstructor(TargetLocator.class)[ FD ]
Line_12 $$ List<Method> proxyMethods = _getProxyMethods(clazz)-->Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) [ FD ]
Line_24 $$ Throwable throwable = logRecord.getThrown()-->Line_25 $$ Assert.assertSame(IllegalArgumentException.class, throwable.getClass())[ FD ]
Line_34 $$ Deserializer deserializer = new Deserializer(serializer.toByteBuffer())-->Line_35 $$ intrabandProxySkeleton.dispatch(mockRegistrationReference, datagram, deserializer)[ FD ]
Line_14 $$ Serializer serializer = new Serializer()-->Line_32 $$ _writeToSerializer(serializer, parameterType)[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_3 $$ Class<? extends IntrabandProxySkeleton> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)[ CD ]
Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) -->Line_37 $$ if (returnType == void.class) [ CD ]
Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) -->Line_17 $$ if (i == proxyMethods.size()) [ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_7 $$ Assert.assertSame(testGenerateTargetLocator, ReflectionTestUtil.getFieldValue(intrabandProxySkeleton, "_targetLocator"))[ CD ]
Line_30 $$ Method proxyMethod = proxyMethods.get(i)-->Line_36 $$ Class<?> returnType = proxyMethod.getReturnType()[ FD ]
Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) -->Line_35 $$ intrabandProxySkeleton.dispatch(mockRegistrationReference, datagram, deserializer)[ CD ]
Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) -->Line_17 $$ if (i == proxyMethods.size()) [ FD ]
Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) -->Line_30 $$ Method proxyMethod = proxyMethods.get(i)[ CD ]
Line_31 $$ for (Class<?> parameterType : proxyMethod.getParameterTypes()) -->Line_32 $$ _writeToSerializer(serializer, parameterType)[ FD ]
Line_42 $$ deserializer = new Deserializer(responseDatagram.getDataByteBuffer())-->Line_35 $$ intrabandProxySkeleton.dispatch(mockRegistrationReference, datagram, deserializer)[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_5 $$ TestGenerateTargetLocator testGenerateTargetLocator = new TestGenerateTargetLocator(clazz)[ CD ]
Line_42 $$ deserializer = new Deserializer(responseDatagram.getDataByteBuffer())-->Line_43 $$ RPCResponse rpcResponse = deserializer.readObject()[ FD ]
Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) -->Line_16 $$ serializer.writeInt(i)[ FD ]
Line_5 $$ TestGenerateTargetLocator testGenerateTargetLocator = new TestGenerateTargetLocator(clazz)-->Line_6 $$ IntrabandProxySkeleton intrabandProxySkeleton = constructor.newInstance(testGenerateTargetLocator)[ FD ]
Line_37 $$ if (returnType == void.class) -->Line_43 $$ RPCResponse rpcResponse = deserializer.readObject()[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_12 $$ List<Method> proxyMethods = _getProxyMethods(clazz)[ FD ]
Line_13 $$ for (int i = 0; i < proxyMethods.size() + 1; i++) -->Line_15 $$ serializer.writeString(targetId)[ CD ]
Line_9 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(mockIntraband)-->Line_35 $$ intrabandProxySkeleton.dispatch(mockRegistrationReference, datagram, deserializer)[ FD ]
Line_12 $$ List<Method> proxyMethods = _getProxyMethods(clazz)-->Line_17 $$ if (i == proxyMethods.size()) [ FD ]
Line_14 $$ Serializer serializer = new Serializer()-->Line_16 $$ serializer.writeInt(i)[ FD ]
Line_22 $$ LogRecord logRecord = logRecords.get(0)-->Line_24 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_8 $$ MockIntraband mockIntraband = new MockIntraband()-->Line_38 $$ Assert.assertNull(mockIntraband.getDatagram())[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_4 $$ Constructor<? extends IntrabandProxySkeleton> constructor = skeletonClass.getConstructor(TargetLocator.class)[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassFunction(Class<?> clazz) throws Exception -->Line_8 $$ MockIntraband mockIntraband = new MockIntraband()[ CD ]
Line_4 $$ Constructor<? extends IntrabandProxySkeleton> constructor = skeletonClass.getConstructor(TargetLocator.class)-->Line_6 $$ IntrabandProxySkeleton intrabandProxySkeleton = constructor.newInstance(testGenerateTargetLocator)[ FD ]
