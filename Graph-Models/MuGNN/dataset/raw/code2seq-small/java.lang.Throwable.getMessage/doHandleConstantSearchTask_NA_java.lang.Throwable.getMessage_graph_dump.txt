Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_5 $$ final int accessFlags = task.getAccessFlags()[ CD ]
Line_50 $$ if (!aClass.isValid()) -->Line_51 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_10 $$ final Set<String> affectedPaths = Collections.synchronizedSet(new HashSet<String>())[ CD ]
Line_32 $$ for (PsiClass aClass : classes) -->Line_33 $$ final boolean success = aClass.isValid() && performRemovedConstantSearch(aClass, fieldName, accessFlags, affectedPaths)[ FD ]
Line_20 $$ final String qualifiedName = ownerClassName.replace('$', '.')-->Line_24 $$ return JavaPsiFacade.getInstance(myProject).findClasses(qualifiedName, GlobalSearchScope.allScope(myProject))[ FD ]
Line_13 $$ if (myConstantSearchTime > CONSTANT_SEARCH_TIME_LIMIT) -->Line_14 $$ isSuccess.set(Boolean.FALSE)[ CD ]
Line_32 $$ for (PsiClass aClass : classes) -->Line_50 $$ if (!aClass.isValid()) [ FD ]
Line_53 $$ final PsiField changedField = aClass.findFieldByName(fieldName, false)-->Line_55 $$ fields.add(changedField)[ FD ]
Line_22 $$ final PsiClass[] classes = ApplicationManager.getApplication().runReadAction(new Computable<PsiClass[]>() -->Line_24 $$ return JavaPsiFacade.getInstance(myProject).findClasses(qualifiedName, GlobalSearchScope.allScope(myProject))[ CD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_4 $$ final String fieldName = task.getFieldName()[ CD ]
Line_87 $$ if (!canceled) -->Line_88 $$ notifyConstantSearchFinished(channel, sessionId, ownerClassName, fieldName, isSuccess, affectedPaths)[ CD ]
Line_3 $$ final String ownerClassName = task.getOwnerClassName()-->Line_88 $$ notifyConstantSearchFinished(channel, sessionId, ownerClassName, fieldName, isSuccess, affectedPaths)[ FD ]
Line_9 $$ final Ref<Boolean> isSuccess = Ref.create(Boolean.TRUE)-->Line_88 $$ notifyConstantSearchFinished(channel, sessionId, ownerClassName, fieldName, isSuccess, affectedPaths)[ FD ]
Line_61 $$ if (changedFields.isEmpty()) -->Line_62 $$ isSuccess.set(Boolean.FALSE)[ CD ]
Line_33 $$ final boolean success = aClass.isValid() && performRemovedConstantSearch(aClass, fieldName, accessFlags, affectedPaths)-->Line_34 $$ if (!success) [ FD ]
Line_10 $$ final Set<String> affectedPaths = Collections.synchronizedSet(new HashSet<String>())-->Line_69 $$ affectDirectUsages(changedField, accessFlags, accessChanged, affectedPaths)[ FD ]
Line_4 $$ final String fieldName = task.getFieldName()-->Line_40 $$ isSuccess.set(performRemovedConstantSearch(null, fieldName, accessFlags, affectedPaths))[ FD ]
Line_49 $$ for (PsiClass aClass : classes) -->Line_50 $$ if (!aClass.isValid()) [ FD ]
Line_48 $$ final List<PsiField> fields = new SmartList<PsiField>()-->Line_55 $$ fields.add(changedField)[ FD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_88 $$ notifyConstantSearchFinished(channel, sessionId, ownerClassName, fieldName, isSuccess, affectedPaths)[ FD ]
Line_5 $$ final int accessFlags = task.getAccessFlags()-->Line_33 $$ final boolean success = aClass.isValid() && performRemovedConstantSearch(aClass, fieldName, accessFlags, affectedPaths)[ FD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_6 $$ final boolean accessChanged = task.getIsAccessChanged()[ CD ]
Line_9 $$ final Ref<Boolean> isSuccess = Ref.create(Boolean.TRUE)-->Line_35 $$ isSuccess.set(Boolean.FALSE)[ FD ]
Line_5 $$ final int accessFlags = task.getAccessFlags()-->Line_69 $$ affectDirectUsages(changedField, accessFlags, accessChanged, affectedPaths)[ FD ]
Line_6 $$ final boolean accessChanged = task.getIsAccessChanged()-->Line_69 $$ affectDirectUsages(changedField, accessFlags, accessChanged, affectedPaths)[ FD ]
Line_4 $$ final String fieldName = task.getFieldName()-->Line_88 $$ notifyConstantSearchFinished(channel, sessionId, ownerClassName, fieldName, isSuccess, affectedPaths)[ FD ]
Line_53 $$ final PsiField changedField = aClass.findFieldByName(fieldName, false)-->Line_54 $$ if (changedField != null) [ FD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_11 $$ final long searchStart = System.currentTimeMillis()[ CD ]
Line_16 $$ if (isDumbMode()) -->Line_21 $$ handleCompileMessage(sessionId, CmdlineProtoUtil.createCompileProgressMessageResponse("Searching for usages of changed/removed constants for class " + qualifiedName).getCompileMessage())[ CD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_5 $$ final int accessFlags = task.getAccessFlags()[ FD ]
Line_28 $$ if (isRemoved) -->Line_29 $$ ApplicationManager.getApplication().runReadAction(new Runnable() [ CD ]
Line_9 $$ final Ref<Boolean> isSuccess = Ref.create(Boolean.TRUE)-->Line_40 $$ isSuccess.set(performRemovedConstantSearch(null, fieldName, accessFlags, affectedPaths))[ FD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_7 $$ final boolean isRemoved = task.getIsFieldRemoved()[ FD ]
Line_9 $$ final Ref<Boolean> isSuccess = Ref.create(Boolean.TRUE)-->Line_17 $$ isSuccess.set(Boolean.FALSE)[ FD ]
Line_46 $$ final Collection<PsiField> changedFields = ApplicationManager.getApplication().runReadAction(new Computable<Collection<PsiField>>() -->Line_48 $$ final List<PsiField> fields = new SmartList<PsiField>()[ CD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_9 $$ final Ref<Boolean> isSuccess = Ref.create(Boolean.TRUE)[ CD ]
Line_31 $$ if (classes.length > 0) -->Line_40 $$ isSuccess.set(performRemovedConstantSearch(null, fieldName, accessFlags, affectedPaths))[ CD ]
Line_3 $$ final String ownerClassName = task.getOwnerClassName()-->Line_20 $$ final String qualifiedName = ownerClassName.replace('$', '.')[ FD ]
Line_45 $$ if (classes.length > 0) -->Line_74 $$ LOG.debug("Constant search task: class " + qualifiedName + " not found")[ CD ]
Line_54 $$ if (changedField != null) -->Line_55 $$ fields.add(changedField)[ CD ]
Line_16 $$ if (isDumbMode()) -->Line_20 $$ final String qualifiedName = ownerClassName.replace('$', '.')[ CD ]
Line_13 $$ if (myConstantSearchTime > CONSTANT_SEARCH_TIME_LIMIT) -->Line_16 $$ if (isDumbMode()) [ CD ]
Line_4 $$ final String fieldName = task.getFieldName()-->Line_53 $$ final PsiField changedField = aClass.findFieldByName(fieldName, false)[ FD ]
Line_10 $$ final Set<String> affectedPaths = Collections.synchronizedSet(new HashSet<String>())-->Line_33 $$ final boolean success = aClass.isValid() && performRemovedConstantSearch(aClass, fieldName, accessFlags, affectedPaths)[ FD ]
Line_53 $$ final PsiField changedField = aClass.findFieldByName(fieldName, false)-->Line_69 $$ affectDirectUsages(changedField, accessFlags, accessChanged, affectedPaths)[ FD ]
Line_4 $$ final String fieldName = task.getFieldName()-->Line_33 $$ final boolean success = aClass.isValid() && performRemovedConstantSearch(aClass, fieldName, accessFlags, affectedPaths)[ FD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_3 $$ final String ownerClassName = task.getOwnerClassName()[ FD ]
Line_10 $$ final Set<String> affectedPaths = Collections.synchronizedSet(new HashSet<String>())-->Line_88 $$ notifyConstantSearchFinished(channel, sessionId, ownerClassName, fieldName, isSuccess, affectedPaths)[ FD ]
Line_32 $$ for (PsiClass aClass : classes) -->Line_53 $$ final PsiField changedField = aClass.findFieldByName(fieldName, false)[ FD ]
Line_9 $$ final Ref<Boolean> isSuccess = Ref.create(Boolean.TRUE)-->Line_73 $$ isSuccess.set(Boolean.FALSE)[ FD ]
Line_28 $$ if (isRemoved) -->Line_45 $$ if (classes.length > 0) [ CD ]
Line_9 $$ final Ref<Boolean> isSuccess = Ref.create(Boolean.TRUE)-->Line_14 $$ isSuccess.set(Boolean.FALSE)[ FD ]
Line_16 $$ if (isDumbMode()) -->Line_18 $$ LOG.debug("Constant search task: cannot search in dumb mode")[ CD ]
Line_9 $$ final Ref<Boolean> isSuccess = Ref.create(Boolean.TRUE)-->Line_78 $$ isSuccess.set(Boolean.FALSE)[ FD ]
Line_46 $$ final Collection<PsiField> changedFields = ApplicationManager.getApplication().runReadAction(new Computable<Collection<PsiField>>() -->Line_58 $$ return fields[ CD ]
Line_8 $$ boolean canceled = false-->Line_87 $$ if (!canceled) [ FD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_6 $$ final boolean accessChanged = task.getIsAccessChanged()[ FD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_7 $$ final boolean isRemoved = task.getIsFieldRemoved()[ CD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_21 $$ handleCompileMessage(sessionId, CmdlineProtoUtil.createCompileProgressMessageResponse("Searching for usages of changed/removed constants for class " + qualifiedName).getCompileMessage())[ FD ]
Line_13 $$ if (myConstantSearchTime > CONSTANT_SEARCH_TIME_LIMIT) -->Line_15 $$ LOG.debug("Total constant search time exceeded time limit for this build session")[ CD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_4 $$ final String fieldName = task.getFieldName()[ FD ]
Line_16 $$ if (isDumbMode()) -->Line_22 $$ final PsiClass[] classes = ApplicationManager.getApplication().runReadAction(new Computable<PsiClass[]>() [ CD ]
Line_5 $$ final int accessFlags = task.getAccessFlags()-->Line_40 $$ isSuccess.set(performRemovedConstantSearch(null, fieldName, accessFlags, affectedPaths))[ FD ]
Line_45 $$ if (classes.length > 0) -->Line_46 $$ final Collection<PsiField> changedFields = ApplicationManager.getApplication().runReadAction(new Computable<Collection<PsiField>>() [ CD ]
Line_49 $$ for (PsiClass aClass : classes) -->Line_53 $$ final PsiField changedField = aClass.findFieldByName(fieldName, false)[ FD ]
Line_9 $$ final Ref<Boolean> isSuccess = Ref.create(Boolean.TRUE)-->Line_62 $$ isSuccess.set(Boolean.FALSE)[ FD ]
Line_10 $$ final Set<String> affectedPaths = Collections.synchronizedSet(new HashSet<String>())-->Line_40 $$ isSuccess.set(performRemovedConstantSearch(null, fieldName, accessFlags, affectedPaths))[ FD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_8 $$ boolean canceled = false[ CD ]
Line_2 $$ private void doHandleConstantSearchTask(Channel channel, UUID sessionId, CmdlineRemoteProto.Message.BuilderMessage.ConstantSearchTask task) -->Line_3 $$ final String ownerClassName = task.getOwnerClassName()[ CD ]
Line_5 $$ final int accessFlags = task.getAccessFlags()-->Line_66 $$ if (!accessChanged && isPrivate(accessFlags)) [ FD ]
Line_61 $$ if (changedFields.isEmpty()) -->Line_63 $$ LOG.debug("Constant search task: field " + fieldName + " not found in classes " + qualifiedName)[ CD ]
Line_16 $$ if (isDumbMode()) -->Line_17 $$ isSuccess.set(Boolean.FALSE)[ CD ]
Line_45 $$ if (classes.length > 0) -->Line_61 $$ if (changedFields.isEmpty()) [ CD ]
Line_34 $$ if (!success) -->Line_35 $$ isSuccess.set(Boolean.FALSE)[ CD ]
Line_45 $$ if (classes.length > 0) -->Line_73 $$ isSuccess.set(Boolean.FALSE)[ CD ]
Line_29 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_31 $$ if (classes.length > 0) [ CD ]
