Line_25 $$ if (verifyChecksum) -->Line_26 $$ verifyChecksum(buf, dataOff, dataLen, numChunks, checksumOff)[ CD ]
Line_23 $$ if (!transferTo) -->Line_25 $$ if (verifyChecksum) [ CD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_6 $$ int packetLen = dataLen + checksumDataLen + 4[ CD ]
Line_30 $$ if (transferTo) -->Line_33 $$ FileChannel fileCh = ((FileInputStream) blockIn).getChannel()[ CD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_41 $$ out.write(buf, headerOff, dataOff + dataLen - headerOff)[ FD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_10 $$ int checksumOff = pkt.position()[ FD ]
Line_3 $$ int dataLen = (int) Math.min(endOffset - offset, (chunkSize * (long) maxChunks))-->Line_4 $$ int numChunks = numberOfChunks(dataLen)[ FD ]
Line_30 $$ if (transferTo) -->Line_37 $$ datanode.metrics.addSendDataPacketBlockedOnNetworkNanos(waitTime.get())[ CD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_61 $$ return dataLen[ CD ]
Line_11 $$ byte[] buf = pkt.array()-->Line_18 $$ System.arraycopy(updatedChecksum, 0, buf, start, checksumSize)[ FD ]
Line_16 $$ byte[] updatedChecksum = lastChunkChecksum.getChecksum()-->Line_17 $$ if (updatedChecksum != null) [ FD ]
Line_30 $$ if (transferTo) -->Line_32 $$ sockOut.write(buf, headerOff, dataOff - headerOff)[ CD ]
Line_11 $$ byte[] buf = pkt.array()-->Line_41 $$ out.write(buf, headerOff, dataOff + dataLen - headerOff)[ FD ]
Line_17 $$ if (updatedChecksum != null) -->Line_18 $$ System.arraycopy(updatedChecksum, 0, buf, start, checksumSize)[ CD ]
Line_11 $$ byte[] buf = pkt.array()-->Line_32 $$ sockOut.write(buf, headerOff, dataOff - headerOff)[ FD ]
Line_58 $$ if (throttler != null) -->Line_59 $$ throttler.throttle(packetLen)[ CD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_9 $$ int headerOff = pkt.position() - headerLen[ CD ]
Line_7 $$ boolean lastDataPacket = offset + dataLen == endOffset && dataLen > 0-->Line_14 $$ if (lastDataPacket && lastChunkChecksum != null) [ FD ]
Line_15 $$ int start = checksumOff + checksumDataLen - checksumSize-->Line_18 $$ System.arraycopy(updatedChecksum, 0, buf, start, checksumSize)[ FD ]
Line_11 $$ byte[] buf = pkt.array()-->Line_13 $$ readChecksum(buf, checksumOff, checksumDataLen)[ FD ]
Line_10 $$ int checksumOff = pkt.position()-->Line_13 $$ readChecksum(buf, checksumOff, checksumDataLen)[ FD ]
Line_51 $$ String ioem = e.getMessage()-->Line_52 $$ if (!ioem.startsWith("Broken pipe") && !ioem.startsWith("Connection reset")) [ FD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_7 $$ boolean lastDataPacket = offset + dataLen == endOffset && dataLen > 0[ CD ]
Line_34 $$ LongWritable waitTime = new LongWritable()-->Line_37 $$ datanode.metrics.addSendDataPacketBlockedOnNetworkNanos(waitTime.get())[ FD ]
Line_9 $$ int headerOff = pkt.position() - headerLen-->Line_41 $$ out.write(buf, headerOff, dataOff + dataLen - headerOff)[ FD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_9 $$ int headerOff = pkt.position() - headerLen[ FD ]
Line_30 $$ if (transferTo) -->Line_34 $$ LongWritable waitTime = new LongWritable()[ CD ]
Line_35 $$ LongWritable transferTime = new LongWritable()-->Line_38 $$ datanode.metrics.addSendDataPacketTransferNanos(transferTime.get())[ FD ]
Line_35 $$ LongWritable transferTime = new LongWritable()-->Line_36 $$ sockOut.transferToFully(fileCh, blockInPosition, dataLen, waitTime, transferTime)[ FD ]
Line_6 $$ int packetLen = dataLen + checksumDataLen + 4-->Line_8 $$ int headerLen = writePacketHeader(pkt, dataLen, packetLen)[ FD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_59 $$ throttler.throttle(packetLen)[ FD ]
Line_30 $$ if (transferTo) -->Line_38 $$ datanode.metrics.addSendDataPacketTransferNanos(transferTime.get())[ CD ]
Line_33 $$ FileChannel fileCh = ((FileInputStream) blockIn).getChannel()-->Line_36 $$ sockOut.transferToFully(fileCh, blockInPosition, dataLen, waitTime, transferTime)[ FD ]
Line_30 $$ if (transferTo) -->Line_31 $$ SocketOutputStream sockOut = (SocketOutputStream) out[ CD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_8 $$ int headerLen = writePacketHeader(pkt, dataLen, packetLen)[ FD ]
Line_31 $$ SocketOutputStream sockOut = (SocketOutputStream) out-->Line_32 $$ sockOut.write(buf, headerOff, dataOff - headerOff)[ FD ]
Line_3 $$ int dataLen = (int) Math.min(endOffset - offset, (chunkSize * (long) maxChunks))-->Line_8 $$ int headerLen = writePacketHeader(pkt, dataLen, packetLen)[ FD ]
Line_44 $$ if (e instanceof SocketTimeoutException) -->Line_45 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_11 $$ byte[] buf = pkt.array()[ FD ]
Line_30 $$ if (transferTo) -->Line_35 $$ LongWritable transferTime = new LongWritable()[ CD ]
Line_31 $$ SocketOutputStream sockOut = (SocketOutputStream) out-->Line_36 $$ sockOut.transferToFully(fileCh, blockInPosition, dataLen, waitTime, transferTime)[ FD ]
Line_30 $$ if (transferTo) -->Line_41 $$ out.write(buf, headerOff, dataOff + dataLen - headerOff)[ CD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_10 $$ int checksumOff = pkt.position()[ CD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_12 $$ if (checksumSize > 0 && checksumIn != null) [ CD ]
Line_3 $$ int dataLen = (int) Math.min(endOffset - offset, (chunkSize * (long) maxChunks))-->Line_24 $$ IOUtils.readFully(blockIn, buf, dataOff, dataLen)[ FD ]
Line_22 $$ int dataOff = checksumOff + checksumDataLen-->Line_26 $$ verifyChecksum(buf, dataOff, dataLen, numChunks, checksumOff)[ FD ]
Line_45 $$ if (LOG.isTraceEnabled()) -->Line_46 $$ LOG.trace("Failed to send data:", e)[ CD ]
Line_4 $$ int numChunks = numberOfChunks(dataLen)-->Line_26 $$ verifyChecksum(buf, dataOff, dataLen, numChunks, checksumOff)[ FD ]
Line_9 $$ int headerOff = pkt.position() - headerLen-->Line_32 $$ sockOut.write(buf, headerOff, dataOff - headerOff)[ FD ]
Line_16 $$ byte[] updatedChecksum = lastChunkChecksum.getChecksum()-->Line_18 $$ System.arraycopy(updatedChecksum, 0, buf, start, checksumSize)[ FD ]
Line_12 $$ if (checksumSize > 0 && checksumIn != null) -->Line_14 $$ if (lastDataPacket && lastChunkChecksum != null) [ CD ]
Line_10 $$ int checksumOff = pkt.position()-->Line_26 $$ verifyChecksum(buf, dataOff, dataLen, numChunks, checksumOff)[ FD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_5 $$ int checksumDataLen = numChunks * checksumSize[ CD ]
Line_14 $$ if (lastDataPacket && lastChunkChecksum != null) -->Line_15 $$ int start = checksumOff + checksumDataLen - checksumSize[ CD ]
Line_45 $$ if (LOG.isTraceEnabled()) -->Line_48 $$ LOG.info("Failed to send data: " + e)[ CD ]
Line_14 $$ if (lastDataPacket && lastChunkChecksum != null) -->Line_17 $$ if (updatedChecksum != null) [ CD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_23 $$ if (!transferTo) [ FD ]
Line_14 $$ if (lastDataPacket && lastChunkChecksum != null) -->Line_16 $$ byte[] updatedChecksum = lastChunkChecksum.getChecksum()[ CD ]
Line_44 $$ if (e instanceof SocketTimeoutException) -->Line_51 $$ String ioem = e.getMessage()[ CD ]
Line_30 $$ if (transferTo) -->Line_36 $$ sockOut.transferToFully(fileCh, blockInPosition, dataLen, waitTime, transferTime)[ CD ]
Line_34 $$ LongWritable waitTime = new LongWritable()-->Line_36 $$ sockOut.transferToFully(fileCh, blockInPosition, dataLen, waitTime, transferTime)[ FD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_8 $$ int headerLen = writePacketHeader(pkt, dataLen, packetLen)[ CD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_11 $$ byte[] buf = pkt.array()[ CD ]
Line_44 $$ if (e instanceof SocketTimeoutException) -->Line_52 $$ if (!ioem.startsWith("Broken pipe") && !ioem.startsWith("Connection reset")) [ CD ]
Line_52 $$ if (!ioem.startsWith("Broken pipe") && !ioem.startsWith("Connection reset")) -->Line_53 $$ LOG.error("BlockSender.sendChunks() exception: ", e)[ CD ]
Line_3 $$ int dataLen = (int) Math.min(endOffset - offset, (chunkSize * (long) maxChunks))-->Line_36 $$ sockOut.transferToFully(fileCh, blockInPosition, dataLen, waitTime, transferTime)[ FD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_58 $$ if (throttler != null) [ CD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_23 $$ if (!transferTo) [ CD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_22 $$ int dataOff = checksumOff + checksumDataLen[ CD ]
Line_22 $$ int dataOff = checksumOff + checksumDataLen-->Line_24 $$ IOUtils.readFully(blockIn, buf, dataOff, dataLen)[ FD ]
Line_12 $$ if (checksumSize > 0 && checksumIn != null) -->Line_13 $$ readChecksum(buf, checksumOff, checksumDataLen)[ CD ]
Line_11 $$ byte[] buf = pkt.array()-->Line_26 $$ verifyChecksum(buf, dataOff, dataLen, numChunks, checksumOff)[ FD ]
Line_3 $$ int dataLen = (int) Math.min(endOffset - offset, (chunkSize * (long) maxChunks))-->Line_26 $$ verifyChecksum(buf, dataOff, dataLen, numChunks, checksumOff)[ FD ]
Line_6 $$ int packetLen = dataLen + checksumDataLen + 4-->Line_59 $$ throttler.throttle(packetLen)[ FD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_4 $$ int numChunks = numberOfChunks(dataLen)[ CD ]
Line_11 $$ byte[] buf = pkt.array()-->Line_24 $$ IOUtils.readFully(blockIn, buf, dataOff, dataLen)[ FD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_3 $$ int dataLen = (int) Math.min(endOffset - offset, (chunkSize * (long) maxChunks))[ CD ]
Line_5 $$ int checksumDataLen = numChunks * checksumSize-->Line_13 $$ readChecksum(buf, checksumOff, checksumDataLen)[ FD ]
Line_2 $$ private int sendPacket(ByteBuffer pkt, int maxChunks, OutputStream out, boolean transferTo, DataTransferThrottler throttler) throws IOException -->Line_58 $$ if (throttler != null) [ FD ]
Line_23 $$ if (!transferTo) -->Line_24 $$ IOUtils.readFully(blockIn, buf, dataOff, dataLen)[ CD ]
