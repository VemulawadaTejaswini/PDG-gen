Line_36 $$ String message = "Error aggregating log file. Log file : " + logFile.getAbsolutePath() + e.getMessage()-->Line_38 $$ out.write(message.getBytes())[ FD ]
Line_21 $$ while ((len = in.read(buf)) != -1) -->Line_22 $$ if (len < bytesLeft) [ CD ]
Line_11 $$ for (File logFile : logFiles) -->Line_36 $$ String message = "Error aggregating log file. Log file : " + logFile.getAbsolutePath() + e.getMessage()[ FD ]
Line_2 $$ public void write(DataOutputStream out) throws IOException -->Line_23 $$ out.write(buf, 0, len)[ FD ]
Line_17 $$ in = SecureIOUtils.openForRead(logFile, getUser(), null)-->Line_40 $$ if (in != null) [ FD ]
Line_18 $$ byte[] buf = new byte[65535]-->Line_21 $$ while ((len = in.read(buf)) != -1) [ FD ]
Line_2 $$ public void write(DataOutputStream out) throws IOException -->Line_13 $$ out.writeUTF(logFile.getName())[ FD ]
Line_21 $$ while ((len = in.read(buf)) != -1) -->Line_23 $$ out.write(buf, 0, len)[ FD ]
Line_40 $$ if (in != null) -->Line_41 $$ in.close()[ CD ]
Line_12 $$ final long fileLength = logFile.length()-->Line_14 $$ out.writeUTF(String.valueOf(fileLength))[ FD ]
Line_11 $$ for (File logFile : logFiles) -->Line_17 $$ in = SecureIOUtils.openForRead(logFile, getUser(), null)[ FD ]
Line_21 $$ while ((len = in.read(buf)) != -1) -->Line_22 $$ if (len < bytesLeft) [ FD ]
Line_21 $$ while ((len = in.read(buf)) != -1) -->Line_24 $$ bytesLeft -= len[ FD ]
Line_15 $$ FileInputStream in = null-->Line_17 $$ in = SecureIOUtils.openForRead(logFile, getUser(), null)[ FD ]
Line_15 $$ FileInputStream in = null-->Line_41 $$ in.close()[ FD ]
Line_22 $$ if (len < bytesLeft) -->Line_23 $$ out.write(buf, 0, len)[ CD ]
Line_12 $$ final long fileLength = logFile.length()-->Line_32 $$ if (fileLength < newLength) [ FD ]
Line_19 $$ int len = 0-->Line_21 $$ while ((len = in.read(buf)) != -1) [ FD ]
Line_11 $$ for (File logFile : logFiles) -->Line_12 $$ final long fileLength = logFile.length()[ FD ]
Line_11 $$ for (File logFile : logFiles) -->Line_31 $$ long newLength = logFile.length()[ FD ]
Line_15 $$ FileInputStream in = null-->Line_21 $$ while ((len = in.read(buf)) != -1) [ FD ]
Line_18 $$ byte[] buf = new byte[65535]-->Line_23 $$ out.write(buf, 0, len)[ FD ]
Line_11 $$ for (File logFile : logFiles) -->Line_13 $$ out.writeUTF(logFile.getName())[ FD ]
Line_31 $$ long newLength = logFile.length()-->Line_32 $$ if (fileLength < newLength) [ FD ]
Line_19 $$ int len = 0-->Line_22 $$ if (len < bytesLeft) [ FD ]
Line_20 $$ long bytesLeft = fileLength-->Line_22 $$ if (len < bytesLeft) [ FD ]
Line_17 $$ in = SecureIOUtils.openForRead(logFile, getUser(), null)-->Line_21 $$ while ((len = in.read(buf)) != -1) [ FD ]
Line_15 $$ FileInputStream in = null-->Line_40 $$ if (in != null) [ FD ]
Line_5 $$ File containerLogDir = new File(appLogDir, ConverterUtils.toString(this.containerId))-->Line_9 $$ File[] logFiles = containerLogDir.listFiles()[ FD ]
Line_22 $$ if (len < bytesLeft) -->Line_27 $$ out.write(buf, 0, (int) bytesLeft)[ CD ]
Line_19 $$ int len = 0-->Line_23 $$ out.write(buf, 0, len)[ FD ]
Line_24 $$ bytesLeft -= len-->Line_22 $$ if (len < bytesLeft) [ FD ]
Line_9 $$ File[] logFiles = containerLogDir.listFiles()-->Line_10 $$ Arrays.sort(logFiles)[ FD ]
Line_36 $$ String message = "Error aggregating log file. Log file : " + logFile.getAbsolutePath() + e.getMessage()-->Line_37 $$ LOG.error(message, e)[ FD ]
Line_5 $$ File containerLogDir = new File(appLogDir, ConverterUtils.toString(this.containerId))-->Line_6 $$ if (!containerLogDir.isDirectory()) [ FD ]
Line_32 $$ if (fileLength < newLength) -->Line_33 $$ LOG.warn("Aggregated logs truncated by approximately " + (newLength - fileLength) + " bytes.")[ CD ]
Line_20 $$ long bytesLeft = fileLength-->Line_24 $$ bytesLeft -= len[ FD ]
Line_22 $$ if (len < bytesLeft) -->Line_24 $$ bytesLeft -= len[ CD ]
Line_2 $$ public void write(DataOutputStream out) throws IOException -->Line_38 $$ out.write(message.getBytes())[ FD ]
Line_19 $$ int len = 0-->Line_24 $$ bytesLeft -= len[ FD ]
Line_2 $$ public void write(DataOutputStream out) throws IOException -->Line_27 $$ out.write(buf, 0, (int) bytesLeft)[ FD ]
Line_2 $$ public void write(DataOutputStream out) throws IOException -->Line_14 $$ out.writeUTF(String.valueOf(fileLength))[ FD ]
Line_17 $$ in = SecureIOUtils.openForRead(logFile, getUser(), null)-->Line_41 $$ in.close()[ FD ]
Line_18 $$ byte[] buf = new byte[65535]-->Line_27 $$ out.write(buf, 0, (int) bytesLeft)[ FD ]
