Line_23 $$ channelPipeline.addAfter(FileUploadChannelHandler.class.getName(), "Assert Auto Removal Channel Handler", new ChannelInboundHandlerAdapter() -->Line_26 $$ channelHandlerContext.fireChannelRead(object)[ CD ]
Line_8 $$ final FileUploadChannelHandler fileUploadChannelHandler = new FileUploadChannelHandler(_asyncBroker, fileResponse, getEventLoop(inEventloop))-->Line_42 $$ fileUploadChannelHandler.channelRead(channelPipeline.firstContext(), FileServerTestUtil.wrapSecondHalf(data))[ FD ]
Line_14 $$ if (fail) -->Line_22 $$ if (inEventloop) [ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_14 $$ if (fail) [ FD ]
Line_81 $$ if (folder) -->Line_82 $$ Assert.assertEquals("Forced Exception", throwable.getMessage())[ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_34 $$ _embeddedChannel.writeInbound(FileServerTestUtil.wrapFirstHalf(data), Unpooled.copiedBuffer(FileServerTestUtil.wrapSecondHalf(data), Unpooled.wrappedBuffer(data)))[ FD ]
Line_78 $$ if (fail) -->Line_87 $$ Assert.assertEquals("Unable to place result " + fileResponse + " because no future exists with ID " + fileResponse.getPath(), logRecord.getMessage())[ CD ]
Line_23 $$ channelPipeline.addAfter(FileUploadChannelHandler.class.getName(), "Assert Auto Removal Channel Handler", new ChannelInboundHandlerAdapter() -->Line_25 $$ Assert.assertSame(this, channelPipeline.first())[ CD ]
Line_33 $$ if (inEventloop) -->Line_35 $$ if (!fail) [ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_14 $$ if (fail) [ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_94 $$ if (!fail) [ FD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_64 $$ shutdown(inEventloop, fileUploadChannelHandler.eventExecutor)[ FD ]
Line_35 $$ if (!fail) -->Line_37 $$ Assert.assertEquals(1, queue.size())[ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_38 $$ Assert.assertEquals(Unpooled.wrappedBuffer(data), queue.poll())[ FD ]
Line_70 $$ if (folder) -->Line_71 $$ Assert.assertEquals("Forced Exception", throwable.getMessage())[ CD ]
Line_78 $$ if (fail) -->Line_79 $$ Assert.assertEquals("Unable to place exception because no future exists " + "with ID " + fileResponse.getPath(), logRecord.getMessage())[ CD ]
Line_12 $$ final ChannelPipeline channelPipeline = _embeddedChannel.pipeline()-->Line_45 $$ fileUploadChannelHandler.exceptionCaught(channelPipeline.firstContext(), e)[ FD ]
Line_12 $$ final ChannelPipeline channelPipeline = _embeddedChannel.pipeline()-->Line_23 $$ channelPipeline.addAfter(FileUploadChannelHandler.class.getName(), "Assert Auto Removal Channel Handler", new ChannelInboundHandlerAdapter() [ FD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_41 $$ fileUploadChannelHandler.channelRead(channelPipeline.firstContext(), FileServerTestUtil.wrapFirstHalf(data))[ FD ]
Line_18 $$ try (FileChannel fileChannel = fileUploadChannelHandler.fileChannel) -->Line_19 $$ Assert.assertTrue(fileChannel.isOpen())[ FD ]
Line_3 $$ FileResponse fileResponse = new FileResponse(Paths.get("testFile"), data.length, lastModified, folder)-->Line_79 $$ Assert.assertEquals("Unable to place exception because no future exists " + "with ID " + fileResponse.getPath(), logRecord.getMessage())[ FD ]
Line_4 $$ NoticeableFuture<FileResponse> noticeableFuture = null-->Line_61 $$ Assert.assertSame(fileResponse, noticeableFuture.get())[ FD ]
Line_12 $$ final ChannelPipeline channelPipeline = _embeddedChannel.pipeline()-->Line_91 $$ Assert.assertSame(channelPipeline.first(), channelPipeline.last())[ FD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_93 $$ Path file = FileServerTestUtil.registerForCleanUp(fileResponse.getLocalFile())[ CD ]
Line_12 $$ final ChannelPipeline channelPipeline = _embeddedChannel.pipeline()-->Line_25 $$ Assert.assertSame(this, channelPipeline.first())[ FD ]
Line_3 $$ FileResponse fileResponse = new FileResponse(Paths.get("testFile"), data.length, lastModified, folder)-->Line_61 $$ Assert.assertSame(fileResponse, noticeableFuture.get())[ FD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_35 $$ if (!fail) [ FD ]
Line_54 $$ if (folder) -->Line_55 $$ Assert.assertEquals("Forced Exception", throwable.getMessage())[ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_42 $$ fileUploadChannelHandler.channelRead(channelPipeline.firstContext(), FileServerTestUtil.wrapSecondHalf(data))[ FD ]
Line_35 $$ if (!fail) -->Line_36 $$ Queue<Object> queue = _embeddedChannel.inboundMessages()[ CD ]
Line_66 $$ if (fail) -->Line_69 $$ Throwable throwable = logRecord.getThrown()[ CD ]
Line_70 $$ if (folder) -->Line_73 $$ Assert.assertTrue(throwable instanceof ClosedChannelException)[ CD ]
Line_76 $$ if (!postAsyncBroker) -->Line_77 $$ LogRecord logRecord = logRecords.remove(0)[ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_12 $$ final ChannelPipeline channelPipeline = _embeddedChannel.pipeline()[ CD ]
Line_12 $$ final ChannelPipeline channelPipeline = _embeddedChannel.pipeline()-->Line_42 $$ fileUploadChannelHandler.channelRead(channelPipeline.firstContext(), FileServerTestUtil.wrapSecondHalf(data))[ FD ]
Line_66 $$ if (fail) -->Line_67 $$ LogRecord logRecord = logRecords.remove(0)[ CD ]
Line_47 $$ if (postAsyncBroker) -->Line_48 $$ if (fail) [ CD ]
Line_66 $$ if (fail) -->Line_70 $$ if (folder) [ CD ]
Line_4 $$ NoticeableFuture<FileResponse> noticeableFuture = null-->Line_50 $$ noticeableFuture.get()[ FD ]
Line_48 $$ if (fail) -->Line_61 $$ Assert.assertSame(fileResponse, noticeableFuture.get())[ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_4 $$ NoticeableFuture<FileResponse> noticeableFuture = null[ CD ]
Line_94 $$ if (!fail) -->Line_95 $$ FileTime fileTime = Files.getLastModifiedTime(file)[ CD ]
Line_94 $$ if (!fail) -->Line_96 $$ Assert.assertEquals(lastModified, fileTime.toMillis())[ CD ]
Line_4 $$ NoticeableFuture<FileResponse> noticeableFuture = null-->Line_6 $$ noticeableFuture = _asyncBroker.post(fileResponse.getPath())[ FD ]
Line_6 $$ noticeableFuture = _asyncBroker.post(fileResponse.getPath())-->Line_50 $$ noticeableFuture.get()[ FD ]
Line_3 $$ FileResponse fileResponse = new FileResponse(Paths.get("testFile"), data.length, lastModified, folder)-->Line_10 $$ FileServerTestUtil.registerForCleanUp(fileResponse.getLocalFile())[ FD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_5 $$ if (postAsyncBroker) [ CD ]
Line_78 $$ if (fail) -->Line_80 $$ Throwable throwable = logRecord.getThrown()[ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_13 $$ channelPipeline.addFirst(FileUploadChannelHandler.class.getName(), fileUploadChannelHandler)[ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_98 $$ return file[ CD ]
Line_23 $$ channelPipeline.addAfter(FileUploadChannelHandler.class.getName(), "Assert Auto Removal Channel Handler", new ChannelInboundHandlerAdapter() -->Line_26 $$ channelHandlerContext.fireChannelRead(object)[ FD ]
Line_33 $$ if (inEventloop) -->Line_41 $$ fileUploadChannelHandler.channelRead(channelPipeline.firstContext(), FileServerTestUtil.wrapFirstHalf(data))[ CD ]
Line_5 $$ if (postAsyncBroker) -->Line_6 $$ noticeableFuture = _asyncBroker.post(fileResponse.getPath())[ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_8 $$ final FileUploadChannelHandler fileUploadChannelHandler = new FileUploadChannelHandler(_asyncBroker, fileResponse, getEventLoop(inEventloop))[ CD ]
Line_12 $$ final ChannelPipeline channelPipeline = _embeddedChannel.pipeline()-->Line_41 $$ fileUploadChannelHandler.channelRead(channelPipeline.firstContext(), FileServerTestUtil.wrapFirstHalf(data))[ FD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_94 $$ if (!fail) [ CD ]
Line_12 $$ final ChannelPipeline channelPipeline = _embeddedChannel.pipeline()-->Line_13 $$ channelPipeline.addFirst(FileUploadChannelHandler.class.getName(), fileUploadChannelHandler)[ FD ]
Line_14 $$ if (fail) -->Line_15 $$ if (folder) [ CD ]
Line_54 $$ if (folder) -->Line_57 $$ Assert.assertTrue(throwable instanceof ClosedChannelException)[ CD ]
Line_3 $$ FileResponse fileResponse = new FileResponse(Paths.get("testFile"), data.length, lastModified, folder)-->Line_6 $$ noticeableFuture = _asyncBroker.post(fileResponse.getPath())[ FD ]
Line_78 $$ if (fail) -->Line_81 $$ if (folder) [ CD ]
Line_3 $$ FileResponse fileResponse = new FileResponse(Paths.get("testFile"), data.length, lastModified, folder)-->Line_93 $$ Path file = FileServerTestUtil.registerForCleanUp(fileResponse.getLocalFile())[ FD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_76 $$ if (!postAsyncBroker) [ FD ]
Line_76 $$ if (!postAsyncBroker) -->Line_78 $$ if (fail) [ CD ]
Line_23 $$ channelPipeline.addAfter(FileUploadChannelHandler.class.getName(), "Assert Auto Removal Channel Handler", new ChannelInboundHandlerAdapter() -->Line_27 $$ channelPipeline.removeFirst()[ CD ]
Line_6 $$ noticeableFuture = _asyncBroker.post(fileResponse.getPath())-->Line_61 $$ Assert.assertSame(fileResponse, noticeableFuture.get())[ FD ]
Line_3 $$ FileResponse fileResponse = new FileResponse(Paths.get("testFile"), data.length, lastModified, folder)-->Line_87 $$ Assert.assertEquals("Unable to place result " + fileResponse + " because no future exists with ID " + fileResponse.getPath(), logRecord.getMessage())[ FD ]
Line_12 $$ final ChannelPipeline channelPipeline = _embeddedChannel.pipeline()-->Line_27 $$ channelPipeline.removeFirst()[ FD ]
Line_9 $$ if (folder) -->Line_10 $$ FileServerTestUtil.registerForCleanUp(fileResponse.getLocalFile())[ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_3 $$ FileResponse fileResponse = new FileResponse(Paths.get("testFile"), data.length, lastModified, folder)[ CD ]
Line_22 $$ if (inEventloop) -->Line_23 $$ channelPipeline.addAfter(FileUploadChannelHandler.class.getName(), "Assert Auto Removal Channel Handler", new ChannelInboundHandlerAdapter() [ CD ]
Line_15 $$ if (folder) -->Line_16 $$ FileHelperUtilAdvice._throwException = true[ CD ]
Line_66 $$ if (fail) -->Line_68 $$ Assert.assertEquals("File upload failure", logRecord.getMessage())[ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_96 $$ Assert.assertEquals(lastModified, fileTime.toMillis())[ FD ]
Line_8 $$ final FileUploadChannelHandler fileUploadChannelHandler = new FileUploadChannelHandler(_asyncBroker, fileResponse, getEventLoop(inEventloop))-->Line_13 $$ channelPipeline.addFirst(FileUploadChannelHandler.class.getName(), fileUploadChannelHandler)[ FD ]
Line_33 $$ if (inEventloop) -->Line_34 $$ _embeddedChannel.writeInbound(FileServerTestUtil.wrapFirstHalf(data), Unpooled.copiedBuffer(FileServerTestUtil.wrapSecondHalf(data), Unpooled.wrappedBuffer(data)))[ CD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_9 $$ if (folder) [ CD ]
Line_33 $$ if (inEventloop) -->Line_42 $$ fileUploadChannelHandler.channelRead(channelPipeline.firstContext(), FileServerTestUtil.wrapSecondHalf(data))[ CD ]
Line_8 $$ final FileUploadChannelHandler fileUploadChannelHandler = new FileUploadChannelHandler(_asyncBroker, fileResponse, getEventLoop(inEventloop))-->Line_41 $$ fileUploadChannelHandler.channelRead(channelPipeline.firstContext(), FileServerTestUtil.wrapFirstHalf(data))[ FD ]
Line_2 $$ protected Path doTestUpload(byte[] data, long lastModified, boolean folder, boolean inEventloop, boolean fail, boolean postAsyncBroker) throws Exception -->Line_8 $$ final FileUploadChannelHandler fileUploadChannelHandler = new FileUploadChannelHandler(_asyncBroker, fileResponse, getEventLoop(inEventloop))[ FD ]
Line_81 $$ if (folder) -->Line_84 $$ Assert.assertTrue(throwable instanceof ClosedChannelException)[ CD ]
Line_8 $$ final FileUploadChannelHandler fileUploadChannelHandler = new FileUploadChannelHandler(_asyncBroker, fileResponse, getEventLoop(inEventloop))-->Line_45 $$ fileUploadChannelHandler.exceptionCaught(channelPipeline.firstContext(), e)[ FD ]
Line_35 $$ if (!fail) -->Line_38 $$ Assert.assertEquals(Unpooled.wrappedBuffer(data), queue.poll())[ CD ]
