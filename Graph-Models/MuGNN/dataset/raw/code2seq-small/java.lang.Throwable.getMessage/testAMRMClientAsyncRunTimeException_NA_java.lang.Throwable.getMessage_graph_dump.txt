Line_4 $$ RuntimeException mockRunTimeException = mock(RuntimeException.class)-->Line_6 $$ runHeartBeatThrowOutException(mockRunTimeException)[ FD ]
Line_2 $$ public void testAMRMClientAsyncRunTimeException() throws Exception -->Line_4 $$ RuntimeException mockRunTimeException = mock(RuntimeException.class)[ CD ]
Line_2 $$ public void testAMRMClientAsyncRunTimeException() throws Exception -->Line_6 $$ runHeartBeatThrowOutException(mockRunTimeException)[ CD ]
Line_3 $$ String exStr = "TestRunTimeException"-->Line_5 $$ when(mockRunTimeException.getMessage()).thenReturn(exStr)[ FD ]
Line_2 $$ public void testAMRMClientAsyncRunTimeException() throws Exception -->Line_3 $$ String exStr = "TestRunTimeException"[ CD ]
Line_2 $$ public void testAMRMClientAsyncRunTimeException() throws Exception -->Line_5 $$ when(mockRunTimeException.getMessage()).thenReturn(exStr)[ CD ]
Line_4 $$ RuntimeException mockRunTimeException = mock(RuntimeException.class)-->Line_5 $$ when(mockRunTimeException.getMessage()).thenReturn(exStr)[ FD ]
