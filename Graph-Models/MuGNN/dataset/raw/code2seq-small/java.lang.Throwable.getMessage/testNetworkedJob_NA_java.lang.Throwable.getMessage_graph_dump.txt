Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_55 $$ assertEquals(status.getBlacklistedTrackers(), 0)[ FD ]
Line_3 $$ MiniMRClientCluster mr = null-->Line_20 $$ JobClient client = new JobClient(mr.getConfig())[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_38 $$ assertFalse(runningJob.isRetired())[ FD ]
Line_93 $$ JobQueueInfo qi = client.getQueueInfo("default")-->Line_95 $$ assertEquals(qi.getQueueState(), "running")[ FD ]
Line_22 $$ JobID jobId = rj.getID()-->Line_48 $$ client.getCleanupTaskReports(jobId)[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_27 $$ assertEquals(runningJob.getJobID(), jobId.toString())[ FD ]
Line_68 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_71 $$ status2.readFields(new DataInputStream(new ByteArrayInputStream(dataOut.toByteArray())))[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_33 $$ assertTrue(runningJob.cleanupProgress() == 0.0f)[ FD ]
Line_7 $$ JobConf job = new JobConf(mr.getConfig())-->Line_14 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_24 $$ runningJob.setJobPriority(JobPriority.HIGH.name())[ FD ]
Line_70 $$ ClusterStatus status2 = new ClusterStatus()-->Line_72 $$ assertEquals(status.getActiveTrackerNames(), status2.getActiveTrackerNames())[ FD ]
Line_6 $$ mr = createMiniClusterWithCapacityScheduler()-->Line_109 $$ mr.stop()[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_65 $$ assertEquals(status.getTTExpiryInterval(), 0)[ FD ]
Line_22 $$ JobID jobId = rj.getID()-->Line_27 $$ assertEquals(runningJob.getJobID(), jobId.toString())[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_26 $$ assertEquals(runningJob.getID(), jobId)[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_74 $$ assertEquals(status.getMapTasks(), status2.getMapTasks())[ FD ]
Line_22 $$ JobID jobId = rj.getID()-->Line_26 $$ assertEquals(runningJob.getID(), jobId)[ FD ]
Line_70 $$ ClusterStatus status2 = new ClusterStatus()-->Line_74 $$ assertEquals(status.getMapTasks(), status2.getMapTasks())[ FD ]
Line_7 $$ JobConf job = new JobConf(mr.getConfig())-->Line_17 $$ job.setMapperClass(IdentityMapper.class)[ FD ]
Line_7 $$ JobConf job = new JobConf(mr.getConfig())-->Line_80 $$ assertEquals(JobClient.getTaskOutputFilter(job), TaskStatusFilter.ALL)[ FD ]
Line_8 $$ fileSys = FileSystem.get(job)-->Line_105 $$ if (fileSys != null) [ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_83 $$ assertEquals(client.getSystemDir().getName(), "jobSubmitDir")[ FD ]
Line_93 $$ JobQueueInfo qi = client.getQueueInfo("default")-->Line_94 $$ assertEquals(qi.getQueueName(), "default")[ FD ]
Line_4 $$ FileSystem fileSys = null-->Line_10 $$ FSDataOutputStream out = fileSys.create(inFile, true)[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_59 $$ assertEquals(status.getMapTasks(), 1)[ FD ]
Line_70 $$ ClusterStatus status2 = new ClusterStatus()-->Line_73 $$ assertEquals(status.getBlackListedTrackersInfo(), status2.getBlackListedTrackersInfo())[ FD ]
Line_3 $$ MiniMRClientCluster mr = null-->Line_6 $$ mr = createMiniClusterWithCapacityScheduler()[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_87 $$ JobQueueInfo[] qinfo = client.getQueues()[ FD ]
Line_108 $$ if (mr != null) -->Line_109 $$ mr.stop()[ CD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_28 $$ assertEquals(runningJob.getJobName(), "N/A")[ FD ]
Line_21 $$ RunningJob rj = client.submitJob(job)-->Line_103 $$ assertEquals("Expected matching startTimes", rj.getJobStatus().getStartTime(), client.getJob(jobId).getJobStatus().getStartTime())[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_31 $$ assertTrue(runningJob.mapProgress() == 0.0f)[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_96 $$ QueueAclsInfo[] aai = client.getQueueAclsForCurrentUser()[ FD ]
Line_4 $$ FileSystem fileSys = null-->Line_106 $$ fileSys.delete(testDir, true)[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_66 $$ assertEquals(status.getJobTrackerStatus(), JobTrackerStatus.RUNNING)[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_58 $$ assertEquals(status.getJobTrackerStatus(), JobTrackerStatus.RUNNING)[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_62 $$ assertEquals(status.getNumExcludedNodes(), 0)[ FD ]
Line_7 $$ JobConf job = new JobConf(mr.getConfig())-->Line_8 $$ fileSys = FileSystem.get(job)[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_35 $$ TaskCompletionEvent[] tce = runningJob.getTaskCompletionEvents(0)[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_63 $$ assertEquals(status.getReduceTasks(), 1)[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_69 $$ status.write(new DataOutputStream(dataOut))[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_82 $$ assertEquals(client.getDefaultReduces(), 4)[ FD ]
Line_3 $$ MiniMRClientCluster mr = null-->Line_108 $$ if (mr != null) [ FD ]
Line_70 $$ ClusterStatus status2 = new ClusterStatus()-->Line_71 $$ status2.readFields(new DataInputStream(new ByteArrayInputStream(dataOut.toByteArray())))[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_37 $$ assertEquals(runningJob.getHistoryUrl(), "")[ FD ]
Line_8 $$ fileSys = FileSystem.get(job)-->Line_9 $$ fileSys.delete(testDir, true)[ FD ]
Line_7 $$ JobConf job = new JobConf(mr.getConfig())-->Line_16 $$ job.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_8 $$ fileSys = FileSystem.get(job)-->Line_106 $$ fileSys.delete(testDir, true)[ FD ]
Line_6 $$ mr = createMiniClusterWithCapacityScheduler()-->Line_7 $$ JobConf job = new JobConf(mr.getConfig())[ FD ]
Line_10 $$ FSDataOutputStream out = fileSys.create(inFile, true)-->Line_11 $$ out.writeBytes("This is a test file")[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_93 $$ JobQueueInfo qi = client.getQueueInfo("default")[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_90 $$ assertEquals(client.getChildQueues("default").length, 0)[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_43 $$ client.getSetupTaskReports(jobId)[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_52 $$ assertEquals(client.getReduceTaskReports(jobId).length, 0)[ FD ]
Line_2 $$ public void testNetworkedJob() throws Exception -->Line_3 $$ MiniMRClientCluster mr = null[ CD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_72 $$ assertEquals(status.getActiveTrackerNames(), status2.getActiveTrackerNames())[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_34 $$ assertTrue(runningJob.setupProgress() == 0.0f)[ FD ]
Line_8 $$ fileSys = FileSystem.get(job)-->Line_10 $$ FSDataOutputStream out = fileSys.create(inFile, true)[ FD ]
Line_7 $$ JobConf job = new JobConf(mr.getConfig())-->Line_13 $$ FileInputFormat.setInputPaths(job, inFile)[ FD ]
Line_7 $$ JobConf job = new JobConf(mr.getConfig())-->Line_21 $$ RunningJob rj = client.submitJob(job)[ FD ]
Line_21 $$ RunningJob rj = client.submitJob(job)-->Line_22 $$ JobID jobId = rj.getID()[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_40 $$ assertEquals(runningJob.getJobStatus().getJobName(), "N/A")[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_103 $$ assertEquals("Expected matching startTimes", rj.getJobStatus().getStartTime(), client.getJob(jobId).getJobStatus().getStartTime())[ FD ]
Line_22 $$ JobID jobId = rj.getID()-->Line_43 $$ client.getSetupTaskReports(jobId)[ FD ]
Line_105 $$ if (fileSys != null) -->Line_106 $$ fileSys.delete(testDir, true)[ CD ]
Line_3 $$ MiniMRClientCluster mr = null-->Line_7 $$ JobConf job = new JobConf(mr.getConfig())[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_73 $$ assertEquals(status.getBlackListedTrackersInfo(), status2.getBlackListedTrackersInfo())[ FD ]
Line_7 $$ JobConf job = new JobConf(mr.getConfig())-->Line_19 $$ job.setNumReduceTasks(0)[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_54 $$ assertEquals(status.getActiveTrackerNames().size(), 2)[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_29 $$ assertTrue(runningJob.getJobFile().endsWith(".staging/" + runningJob.getJobID() + "/job.xml"))[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_91 $$ assertEquals(client.getJobsFromQueue("default").length, 1)[ FD ]
Line_4 $$ FileSystem fileSys = null-->Line_8 $$ fileSys = FileSystem.get(job)[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_60 $$ assertEquals(status.getMaxMapTasks(), 20)[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_64 $$ assertEquals(status.getTaskTrackers(), 2)[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_102 $$ assertEquals("Expected matching JobIDs", jobId, client.getJob(jobId).getJobStatus().getJobID())[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_21 $$ RunningJob rj = client.submitJob(job)[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_30 $$ assertTrue(runningJob.getTrackingURL().length() > 0)[ FD ]
Line_22 $$ JobID jobId = rj.getID()-->Line_52 $$ assertEquals(client.getReduceTaskReports(jobId).length, 0)[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_56 $$ assertEquals(status.getBlacklistedTrackerNames().size(), 0)[ FD ]
Line_100 $$ Token<DelegationTokenIdentifier> token = client.getDelegationToken(new Text(UserGroupInformation.getCurrentUser().getShortUserName()))-->Line_101 $$ assertEquals(token.getKind().toString(), "RM_DELEGATION_TOKEN")[ FD ]
Line_7 $$ JobConf job = new JobConf(mr.getConfig())-->Line_15 $$ job.setInputFormat(TextInputFormat.class)[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_84 $$ JobQueueInfo[] rootQueueInfo = client.getRootQueues()[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_100 $$ Token<DelegationTokenIdentifier> token = client.getDelegationToken(new Text(UserGroupInformation.getCurrentUser().getShortUserName()))[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_32 $$ assertTrue(runningJob.reduceProgress() == 0.0f)[ FD ]
Line_2 $$ public void testNetworkedJob() throws Exception -->Line_4 $$ FileSystem fileSys = null[ CD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_67 $$ assertEquals(status.getGraylistedTrackers(), 0)[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_81 $$ assertEquals(client.getDefaultMaps(), 20)[ FD ]
Line_22 $$ JobID jobId = rj.getID()-->Line_41 $$ assertEquals(client.getMapTaskReports(jobId).length, 0)[ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_61 $$ assertEquals(status.getMaxReduceTasks(), 4)[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_92 $$ assertTrue(client.getJobsFromQueue("default")[0].getJobFile().endsWith("/job.xml"))[ FD ]
Line_6 $$ mr = createMiniClusterWithCapacityScheduler()-->Line_20 $$ JobClient client = new JobClient(mr.getConfig())[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_41 $$ assertEquals(client.getMapTaskReports(jobId).length, 0)[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_25 $$ assertTrue(runningJob.getConfiguration().toString().endsWith("0001/job.xml"))[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_53 $$ ClusterStatus status = client.getClusterStatus(true)[ FD ]
Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_39 $$ assertEquals(runningJob.getFailureInfo(), "")[ FD ]
Line_6 $$ mr = createMiniClusterWithCapacityScheduler()-->Line_108 $$ if (mr != null) [ FD ]
Line_4 $$ FileSystem fileSys = null-->Line_9 $$ fileSys.delete(testDir, true)[ FD ]
Line_20 $$ JobClient client = new JobClient(mr.getConfig())-->Line_48 $$ client.getCleanupTaskReports(jobId)[ FD ]
Line_4 $$ FileSystem fileSys = null-->Line_105 $$ if (fileSys != null) [ FD ]
Line_53 $$ ClusterStatus status = client.getClusterStatus(true)-->Line_57 $$ assertEquals(status.getBlackListedTrackersInfo().size(), 0)[ FD ]
Line_7 $$ JobConf job = new JobConf(mr.getConfig())-->Line_18 $$ job.setReducerClass(IdentityReducer.class)[ FD ]
Line_3 $$ MiniMRClientCluster mr = null-->Line_109 $$ mr.stop()[ FD ]
Line_22 $$ JobID jobId = rj.getID()-->Line_103 $$ assertEquals("Expected matching startTimes", rj.getJobStatus().getStartTime(), client.getJob(jobId).getJobStatus().getStartTime())[ FD ]
Line_22 $$ JobID jobId = rj.getID()-->Line_102 $$ assertEquals("Expected matching JobIDs", jobId, client.getJob(jobId).getJobStatus().getJobID())[ FD ]
Line_10 $$ FSDataOutputStream out = fileSys.create(inFile, true)-->Line_12 $$ out.close()[ FD ]
Line_22 $$ JobID jobId = rj.getID()-->Line_23 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)[ FD ]
Line_7 $$ JobConf job = new JobConf(mr.getConfig())-->Line_79 $$ JobClient.setTaskOutputFilter(job, TaskStatusFilter.ALL)[ FD ]
