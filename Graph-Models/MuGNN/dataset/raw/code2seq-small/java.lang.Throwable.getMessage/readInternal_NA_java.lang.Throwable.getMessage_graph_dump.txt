Line_4 $$ contentType = (contentType != null ? contentType : PROTOBUF)-->Line_11 $$ if (MediaType.TEXT_PLAIN.isCompatibleWith(contentType)) [ FD ]
Line_8 $$ Message.Builder builder = getMessageBuilder(clazz)-->Line_16 $$ builder.mergeFrom(inputMessage.getBody(), this.extensionRegistry)[ FD ]
Line_2 $$ protected Message readInternal(Class<? extends Message> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_16 $$ builder.mergeFrom(inputMessage.getBody(), this.extensionRegistry)[ FD ]
Line_6 $$ InputStreamReader reader = new InputStreamReader(inputMessage.getBody(), charset)-->Line_14 $$ XmlFormat.merge(reader, this.extensionRegistry, builder)[ FD ]
Line_13 $$ if (MediaType.APPLICATION_XML.isCompatibleWith(contentType)) -->Line_16 $$ builder.mergeFrom(inputMessage.getBody(), this.extensionRegistry)[ CD ]
Line_8 $$ Message.Builder builder = getMessageBuilder(clazz)-->Line_12 $$ TextFormat.merge(reader, this.extensionRegistry, builder)[ FD ]
Line_8 $$ Message.Builder builder = getMessageBuilder(clazz)-->Line_10 $$ JsonFormat.merge(reader, this.extensionRegistry, builder)[ FD ]
Line_2 $$ protected Message readInternal(Class<? extends Message> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_4 $$ contentType = (contentType != null ? contentType : PROTOBUF)[ CD ]
Line_8 $$ Message.Builder builder = getMessageBuilder(clazz)-->Line_18 $$ return builder.build()[ FD ]
Line_2 $$ protected Message readInternal(Class<? extends Message> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_6 $$ InputStreamReader reader = new InputStreamReader(inputMessage.getBody(), charset)[ CD ]
Line_13 $$ if (MediaType.APPLICATION_XML.isCompatibleWith(contentType)) -->Line_14 $$ XmlFormat.merge(reader, this.extensionRegistry, builder)[ CD ]
Line_6 $$ InputStreamReader reader = new InputStreamReader(inputMessage.getBody(), charset)-->Line_10 $$ JsonFormat.merge(reader, this.extensionRegistry, builder)[ FD ]
Line_2 $$ protected Message readInternal(Class<? extends Message> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_5 $$ Charset charset = getCharset(inputMessage.getHeaders())[ CD ]
Line_3 $$ MediaType contentType = inputMessage.getHeaders().getContentType()-->Line_11 $$ if (MediaType.TEXT_PLAIN.isCompatibleWith(contentType)) [ FD ]
Line_8 $$ Message.Builder builder = getMessageBuilder(clazz)-->Line_14 $$ XmlFormat.merge(reader, this.extensionRegistry, builder)[ FD ]
Line_2 $$ protected Message readInternal(Class<? extends Message> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_3 $$ MediaType contentType = inputMessage.getHeaders().getContentType()[ FD ]
Line_4 $$ contentType = (contentType != null ? contentType : PROTOBUF)-->Line_9 $$ if (MediaType.APPLICATION_JSON.isCompatibleWith(contentType)) [ FD ]
Line_9 $$ if (MediaType.APPLICATION_JSON.isCompatibleWith(contentType)) -->Line_11 $$ if (MediaType.TEXT_PLAIN.isCompatibleWith(contentType)) [ CD ]
Line_6 $$ InputStreamReader reader = new InputStreamReader(inputMessage.getBody(), charset)-->Line_12 $$ TextFormat.merge(reader, this.extensionRegistry, builder)[ FD ]
Line_3 $$ MediaType contentType = inputMessage.getHeaders().getContentType()-->Line_9 $$ if (MediaType.APPLICATION_JSON.isCompatibleWith(contentType)) [ FD ]
Line_2 $$ protected Message readInternal(Class<? extends Message> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_6 $$ InputStreamReader reader = new InputStreamReader(inputMessage.getBody(), charset)[ FD ]
Line_9 $$ if (MediaType.APPLICATION_JSON.isCompatibleWith(contentType)) -->Line_10 $$ JsonFormat.merge(reader, this.extensionRegistry, builder)[ CD ]
Line_11 $$ if (MediaType.TEXT_PLAIN.isCompatibleWith(contentType)) -->Line_13 $$ if (MediaType.APPLICATION_XML.isCompatibleWith(contentType)) [ CD ]
Line_4 $$ contentType = (contentType != null ? contentType : PROTOBUF)-->Line_13 $$ if (MediaType.APPLICATION_XML.isCompatibleWith(contentType)) [ FD ]
Line_3 $$ MediaType contentType = inputMessage.getHeaders().getContentType()-->Line_13 $$ if (MediaType.APPLICATION_XML.isCompatibleWith(contentType)) [ FD ]
Line_2 $$ protected Message readInternal(Class<? extends Message> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_5 $$ Charset charset = getCharset(inputMessage.getHeaders())[ FD ]
Line_2 $$ protected Message readInternal(Class<? extends Message> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_3 $$ MediaType contentType = inputMessage.getHeaders().getContentType()[ CD ]
Line_11 $$ if (MediaType.TEXT_PLAIN.isCompatibleWith(contentType)) -->Line_12 $$ TextFormat.merge(reader, this.extensionRegistry, builder)[ CD ]
Line_2 $$ protected Message readInternal(Class<? extends Message> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException -->Line_8 $$ Message.Builder builder = getMessageBuilder(clazz)[ FD ]
Line_3 $$ MediaType contentType = inputMessage.getHeaders().getContentType()-->Line_4 $$ contentType = (contentType != null ? contentType : PROTOBUF)[ FD ]
