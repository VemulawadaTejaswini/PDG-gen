Line_21 $$ insnHandlers = new ArrayList<TryCatchBlockNode>()-->Line_91 $$ TryCatchBlockNode tcb = insnHandlers.get(i)[ FD ]
Line_20 $$ if (insnHandlers == null) -->Line_22 $$ handlers[j] = insnHandlers[ CD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_33 $$ Type ctype = Type.getObjectType(owner)[ FD ]
Line_33 $$ Type ctype = Type.getObjectType(owner)-->Line_34 $$ current.setLocal(local++, interpreter.newValue(ctype))[ FD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_36 $$ for (int i = 0; i < args.length; ++i) [ CD ]
Line_46 $$ while (top > 0) -->Line_47 $$ int insn = queue[--top][ CD ]
Line_52 $$ insnNode = m.instructions.get(insn)-->Line_54 $$ int insnType = insnNode.getType()[ FD ]
Line_59 $$ if (insnNode instanceof JumpInsnNode) -->Line_61 $$ if (insnOpcode != GOTO && insnOpcode != JSR) [ CD ]
Line_19 $$ List<TryCatchBlockNode> insnHandlers = handlers[j]-->Line_89 $$ if (insnHandlers != null) [ FD ]
Line_60 $$ JumpInsnNode j = (JumpInsnNode) insnNode-->Line_71 $$ LabelNode label = lsi.labels.get(j)[ FD ]
Line_8 $$ InsnList insns = m.instructions-->Line_64 $$ int jump = insns.indexOf(j.label)[ FD ]
Line_70 $$ for (int j = 0; j < lsi.labels.size(); ++j) -->Line_71 $$ LabelNode label = lsi.labels.get(j)[ FD ]
Line_66 $$ if (insnNode instanceof LookupSwitchInsnNode) -->Line_70 $$ for (int j = 0; j < lsi.labels.size(); ++j) [ CD ]
Line_52 $$ insnNode = m.instructions.get(insn)-->Line_75 $$ if (insnNode instanceof TableSwitchInsnNode) [ FD ]
Line_90 $$ for (int i = 0; i < insnHandlers.size(); ++i) -->Line_93 $$ handler.init(f)[ CD ]
Line_18 $$ for (int j = begin; j < end; ++j) -->Line_20 $$ if (insnHandlers == null) [ CD ]
Line_19 $$ List<TryCatchBlockNode> insnHandlers = handlers[j]-->Line_91 $$ TryCatchBlockNode tcb = insnHandlers.get(i)[ FD ]
Line_59 $$ if (insnNode instanceof JumpInsnNode) -->Line_65 $$ merge(jump, current)[ CD ]
Line_28 $$ Frame<V> handler = new Frame<V>(m.maxLocals, m.maxStack)-->Line_93 $$ handler.init(f)[ FD ]
Line_50 $$ AbstractInsnNode insnNode = null-->Line_54 $$ int insnType = insnNode.getType()[ FD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_34 $$ current.setLocal(local++, interpreter.newValue(ctype))[ FD ]
Line_31 $$ int local = 0-->Line_34 $$ current.setLocal(local++, interpreter.newValue(ctype))[ FD ]
Line_50 $$ AbstractInsnNode insnNode = null-->Line_66 $$ if (insnNode instanceof LookupSwitchInsnNode) [ FD ]
Line_18 $$ for (int j = begin; j < end; ++j) -->Line_79 $$ for (int j = 0; j < tsi.labels.size(); ++j) [ FD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_3 $$ if ((m.access & (ACC_ABSTRACT | ACC_NATIVE)) != 0 || m.instructions.size() == 0) [ CD ]
Line_48 $$ Frame<V> f = frames[insn]-->Line_58 $$ current.init(f).execute(insnNode, interpreter)[ FD ]
Line_79 $$ for (int j = 0; j < tsi.labels.size(); ++j) -->Line_80 $$ LabelNode label = tsi.labels.get(j)[ CD ]
Line_75 $$ if (insnNode instanceof TableSwitchInsnNode) -->Line_84 $$ if (insnOpcode != ATHROW && (insnOpcode < IRETURN || insnOpcode > RETURN)) [ CD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_58 $$ current.init(f).execute(insnNode, interpreter)[ FD ]
Line_8 $$ InsnList insns = m.instructions-->Line_81 $$ jump = insns.indexOf(label)[ FD ]
Line_64 $$ int jump = insns.indexOf(j.label)-->Line_72 $$ jump = insns.indexOf(label)[ FD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_7 $$ int n = m.instructions.size()[ CD ]
Line_14 $$ for (int i = 0; i < m.tryCatchBlocks.size(); ++i) -->Line_15 $$ TryCatchBlockNode tcb = m.tryCatchBlocks.get(i)[ CD ]
Line_14 $$ for (int i = 0; i < m.tryCatchBlocks.size(); ++i) -->Line_91 $$ TryCatchBlockNode tcb = insnHandlers.get(i)[ FD ]
Line_50 $$ AbstractInsnNode insnNode = null-->Line_53 $$ int insnOpcode = insnNode.getOpcode()[ FD ]
Line_90 $$ for (int i = 0; i < insnHandlers.size(); ++i) -->Line_91 $$ TryCatchBlockNode tcb = insnHandlers.get(i)[ CD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_8 $$ InsnList insns = m.instructions[ CD ]
Line_28 $$ Frame<V> handler = new Frame<V>(m.maxLocals, m.maxStack)-->Line_94 $$ handler.clearStack()[ FD ]
Line_75 $$ if (insnNode instanceof TableSwitchInsnNode) -->Line_79 $$ for (int j = 0; j < tsi.labels.size(); ++j) [ CD ]
Line_50 $$ AbstractInsnNode insnNode = null-->Line_59 $$ if (insnNode instanceof JumpInsnNode) [ FD ]
Line_71 $$ LabelNode label = lsi.labels.get(j)-->Line_81 $$ jump = insns.indexOf(label)[ FD ]
Line_90 $$ for (int i = 0; i < insnHandlers.size(); ++i) -->Line_91 $$ TryCatchBlockNode tcb = insnHandlers.get(i)[ FD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_43 $$ current.setLocal(local++, interpreter.newValue(null))[ FD ]
Line_32 $$ if ((m.access & ACC_STATIC) == 0) -->Line_33 $$ Type ctype = Type.getObjectType(owner)[ CD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_39 $$ current.setLocal(local++, interpreter.newValue(null))[ FD ]
Line_64 $$ int jump = insns.indexOf(j.label)-->Line_96 $$ merge(jump, handler)[ FD ]
Line_8 $$ InsnList insns = m.instructions-->Line_68 $$ int jump = insns.indexOf(lsi.dflt)[ FD ]
Line_8 $$ InsnList insns = m.instructions-->Line_17 $$ int end = insns.indexOf(tcb.end)[ FD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_14 $$ for (int i = 0; i < m.tryCatchBlocks.size(); ++i) [ CD ]
Line_36 $$ for (int i = 0; i < args.length; ++i) -->Line_91 $$ TryCatchBlockNode tcb = insnHandlers.get(i)[ FD ]
Line_20 $$ if (insnHandlers == null) -->Line_21 $$ insnHandlers = new ArrayList<TryCatchBlockNode>()[ CD ]
Line_71 $$ LabelNode label = lsi.labels.get(j)-->Line_72 $$ jump = insns.indexOf(label)[ FD ]
Line_60 $$ JumpInsnNode j = (JumpInsnNode) insnNode-->Line_79 $$ for (int j = 0; j < tsi.labels.size(); ++j) [ FD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_105 $$ return frames[ CD ]
Line_14 $$ for (int i = 0; i < m.tryCatchBlocks.size(); ++i) -->Line_90 $$ for (int i = 0; i < insnHandlers.size(); ++i) [ FD ]
Line_70 $$ for (int j = 0; j < lsi.labels.size(); ++j) -->Line_80 $$ LabelNode label = tsi.labels.get(j)[ FD ]
Line_31 $$ int local = 0-->Line_39 $$ current.setLocal(local++, interpreter.newValue(null))[ FD ]
Line_8 $$ InsnList insns = m.instructions-->Line_92 $$ int jump = insns.indexOf(tcb.handler)[ FD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_28 $$ Frame<V> handler = new Frame<V>(m.maxLocals, m.maxStack)[ CD ]
Line_81 $$ jump = insns.indexOf(label)-->Line_82 $$ merge(jump, current)[ FD ]
Line_19 $$ List<TryCatchBlockNode> insnHandlers = handlers[j]-->Line_21 $$ insnHandlers = new ArrayList<TryCatchBlockNode>()[ FD ]
Line_31 $$ int local = 0-->Line_37 $$ current.setLocal(local++, interpreter.newValue(args[i]))[ FD ]
Line_52 $$ insnNode = m.instructions.get(insn)-->Line_66 $$ if (insnNode instanceof LookupSwitchInsnNode) [ FD ]
Line_90 $$ for (int i = 0; i < insnHandlers.size(); ++i) -->Line_96 $$ merge(jump, handler)[ CD ]
Line_21 $$ insnHandlers = new ArrayList<TryCatchBlockNode>()-->Line_20 $$ if (insnHandlers == null) [ FD ]
Line_52 $$ insnNode = m.instructions.get(insn)-->Line_58 $$ current.init(f).execute(insnNode, interpreter)[ FD ]
Line_48 $$ Frame<V> f = frames[insn]-->Line_93 $$ handler.init(f)[ FD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_62 $$ merge(insn + 1, current)[ FD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_42 $$ while (local < m.maxLocals) [ CD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_45 $$ merge(0, current)[ FD ]
Line_59 $$ if (insnNode instanceof JumpInsnNode) -->Line_60 $$ JumpInsnNode j = (JumpInsnNode) insnNode[ CD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_78 $$ merge(jump, current)[ FD ]
Line_17 $$ int end = insns.indexOf(tcb.end)-->Line_18 $$ for (int j = begin; j < end; ++j) [ FD ]
Line_50 $$ AbstractInsnNode insnNode = null-->Line_75 $$ if (insnNode instanceof TableSwitchInsnNode) [ FD ]
Line_19 $$ List<TryCatchBlockNode> insnHandlers = handlers[j]-->Line_22 $$ handlers[j] = insnHandlers[ FD ]
Line_79 $$ for (int j = 0; j < tsi.labels.size(); ++j) -->Line_82 $$ merge(jump, current)[ CD ]
Line_36 $$ for (int i = 0; i < args.length; ++i) -->Line_38 $$ if (args[i].getSize() == 2) [ CD ]
Line_72 $$ jump = insns.indexOf(label)-->Line_73 $$ merge(jump, current)[ FD ]
Line_19 $$ List<TryCatchBlockNode> insnHandlers = handlers[j]-->Line_90 $$ for (int i = 0; i < insnHandlers.size(); ++i) [ FD ]
Line_64 $$ int jump = insns.indexOf(j.label)-->Line_82 $$ merge(jump, current)[ FD ]
Line_75 $$ if (insnNode instanceof TableSwitchInsnNode) -->Line_77 $$ int jump = insns.indexOf(tsi.dflt)[ CD ]
Line_90 $$ for (int i = 0; i < insnHandlers.size(); ++i) -->Line_95 $$ handler.push(interpreter.newValue(ASMUtils.THROWABLE_TYPE))[ CD ]
Line_36 $$ for (int i = 0; i < args.length; ++i) -->Line_37 $$ current.setLocal(local++, interpreter.newValue(args[i]))[ CD ]
Line_79 $$ for (int j = 0; j < tsi.labels.size(); ++j) -->Line_80 $$ LabelNode label = tsi.labels.get(j)[ FD ]
Line_38 $$ if (args[i].getSize() == 2) -->Line_39 $$ current.setLocal(local++, interpreter.newValue(null))[ CD ]
Line_90 $$ for (int i = 0; i < insnHandlers.size(); ++i) -->Line_94 $$ handler.clearStack()[ CD ]
Line_64 $$ int jump = insns.indexOf(j.label)-->Line_65 $$ merge(jump, current)[ FD ]
Line_72 $$ jump = insns.indexOf(label)-->Line_82 $$ merge(jump, current)[ FD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_73 $$ merge(jump, current)[ FD ]
Line_50 $$ AbstractInsnNode insnNode = null-->Line_58 $$ current.init(f).execute(insnNode, interpreter)[ FD ]
Line_92 $$ int jump = insns.indexOf(tcb.handler)-->Line_96 $$ merge(jump, handler)[ FD ]
Line_28 $$ Frame<V> handler = new Frame<V>(m.maxLocals, m.maxStack)-->Line_96 $$ merge(jump, handler)[ FD ]
Line_52 $$ insnNode = m.instructions.get(insn)-->Line_59 $$ if (insnNode instanceof JumpInsnNode) [ FD ]
Line_28 $$ Frame<V> handler = new Frame<V>(m.maxLocals, m.maxStack)-->Line_95 $$ handler.push(interpreter.newValue(ASMUtils.THROWABLE_TYPE))[ FD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_69 $$ merge(jump, current)[ FD ]
Line_15 $$ TryCatchBlockNode tcb = m.tryCatchBlocks.get(i)-->Line_24 $$ insnHandlers.add(tcb)[ FD ]
Line_59 $$ if (insnNode instanceof JumpInsnNode) -->Line_66 $$ if (insnNode instanceof LookupSwitchInsnNode) [ CD ]
Line_48 $$ Frame<V> f = frames[insn]-->Line_56 $$ merge(insn + 1, f)[ FD ]
Line_55 $$ if (insnType == AbstractInsnNode.LABEL || insnType == AbstractInsnNode.LINE || insnType == AbstractInsnNode.FRAME) -->Line_56 $$ merge(insn + 1, f)[ CD ]
Line_14 $$ for (int i = 0; i < m.tryCatchBlocks.size(); ++i) -->Line_36 $$ for (int i = 0; i < args.length; ++i) [ FD ]
Line_8 $$ InsnList insns = m.instructions-->Line_77 $$ int jump = insns.indexOf(tsi.dflt)[ FD ]
Line_70 $$ for (int j = 0; j < lsi.labels.size(); ++j) -->Line_73 $$ merge(jump, current)[ CD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_29 $$ current.setReturn(interpreter.newValue(Type.getReturnType(m.desc)))[ CD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_31 $$ int local = 0[ CD ]
Line_64 $$ int jump = insns.indexOf(j.label)-->Line_69 $$ merge(jump, current)[ FD ]
Line_36 $$ for (int i = 0; i < args.length; ++i) -->Line_90 $$ for (int i = 0; i < insnHandlers.size(); ++i) [ FD ]
Line_47 $$ int insn = queue[--top]-->Line_52 $$ insnNode = m.instructions.get(insn)[ FD ]
Line_8 $$ InsnList insns = m.instructions-->Line_72 $$ jump = insns.indexOf(label)[ FD ]
Line_72 $$ jump = insns.indexOf(label)-->Line_78 $$ merge(jump, current)[ FD ]
Line_46 $$ while (top > 0) -->Line_49 $$ queued[insn] = false[ CD ]
Line_55 $$ if (insnType == AbstractInsnNode.LABEL || insnType == AbstractInsnNode.LINE || insnType == AbstractInsnNode.FRAME) -->Line_58 $$ current.init(f).execute(insnNode, interpreter)[ CD ]
Line_19 $$ List<TryCatchBlockNode> insnHandlers = handlers[j]-->Line_20 $$ if (insnHandlers == null) [ FD ]
Line_31 $$ int local = 0-->Line_43 $$ current.setLocal(local++, interpreter.newValue(null))[ FD ]
Line_59 $$ if (insnNode instanceof JumpInsnNode) -->Line_64 $$ int jump = insns.indexOf(j.label)[ CD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_45 $$ merge(0, current)[ CD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_85 $$ merge(insn + 1, current)[ FD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_29 $$ current.setReturn(interpreter.newValue(Type.getReturnType(m.desc)))[ FD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_30 $$ Type[] args = Type.getArgumentTypes(m.desc)[ CD ]
Line_60 $$ JumpInsnNode j = (JumpInsnNode) insnNode-->Line_80 $$ LabelNode label = tsi.labels.get(j)[ FD ]
Line_55 $$ if (insnType == AbstractInsnNode.LABEL || insnType == AbstractInsnNode.LINE || insnType == AbstractInsnNode.FRAME) -->Line_59 $$ if (insnNode instanceof JumpInsnNode) [ CD ]
Line_72 $$ jump = insns.indexOf(label)-->Line_96 $$ merge(jump, handler)[ FD ]
Line_50 $$ AbstractInsnNode insnNode = null-->Line_52 $$ insnNode = m.instructions.get(insn)[ FD ]
Line_14 $$ for (int i = 0; i < m.tryCatchBlocks.size(); ++i) -->Line_18 $$ for (int j = begin; j < end; ++j) [ CD ]
Line_64 $$ int jump = insns.indexOf(j.label)-->Line_81 $$ jump = insns.indexOf(label)[ FD ]
Line_64 $$ int jump = insns.indexOf(j.label)-->Line_78 $$ merge(jump, current)[ FD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_32 $$ if ((m.access & ACC_STATIC) == 0) [ CD ]
Line_70 $$ for (int j = 0; j < lsi.labels.size(); ++j) -->Line_79 $$ for (int j = 0; j < tsi.labels.size(); ++j) [ FD ]
Line_61 $$ if (insnOpcode != GOTO && insnOpcode != JSR) -->Line_62 $$ merge(insn + 1, current)[ CD ]
Line_66 $$ if (insnNode instanceof LookupSwitchInsnNode) -->Line_68 $$ int jump = insns.indexOf(lsi.dflt)[ CD ]
Line_8 $$ InsnList insns = m.instructions-->Line_16 $$ int begin = insns.indexOf(tcb.start)[ FD ]
Line_18 $$ for (int j = begin; j < end; ++j) -->Line_71 $$ LabelNode label = lsi.labels.get(j)[ FD ]
Line_21 $$ insnHandlers = new ArrayList<TryCatchBlockNode>()-->Line_22 $$ handlers[j] = insnHandlers[ FD ]
Line_90 $$ for (int i = 0; i < insnHandlers.size(); ++i) -->Line_92 $$ int jump = insns.indexOf(tcb.handler)[ CD ]
Line_84 $$ if (insnOpcode != ATHROW && (insnOpcode < IRETURN || insnOpcode > RETURN)) -->Line_85 $$ merge(insn + 1, current)[ CD ]
Line_66 $$ if (insnNode instanceof LookupSwitchInsnNode) -->Line_75 $$ if (insnNode instanceof TableSwitchInsnNode) [ CD ]
Line_81 $$ jump = insns.indexOf(label)-->Line_96 $$ merge(jump, handler)[ FD ]
Line_70 $$ for (int j = 0; j < lsi.labels.size(); ++j) -->Line_72 $$ jump = insns.indexOf(label)[ CD ]
Line_18 $$ for (int j = begin; j < end; ++j) -->Line_80 $$ LabelNode label = tsi.labels.get(j)[ FD ]
Line_46 $$ while (top > 0) -->Line_48 $$ Frame<V> f = frames[insn][ CD ]
Line_18 $$ for (int j = begin; j < end; ++j) -->Line_24 $$ insnHandlers.add(tcb)[ CD ]
Line_72 $$ jump = insns.indexOf(label)-->Line_81 $$ jump = insns.indexOf(label)[ FD ]
Line_64 $$ int jump = insns.indexOf(j.label)-->Line_73 $$ merge(jump, current)[ FD ]
Line_80 $$ LabelNode label = tsi.labels.get(j)-->Line_81 $$ jump = insns.indexOf(label)[ FD ]
Line_79 $$ for (int j = 0; j < tsi.labels.size(); ++j) -->Line_81 $$ jump = insns.indexOf(label)[ CD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_37 $$ current.setLocal(local++, interpreter.newValue(args[i]))[ FD ]
Line_32 $$ if ((m.access & ACC_STATIC) == 0) -->Line_34 $$ current.setLocal(local++, interpreter.newValue(ctype))[ CD ]
Line_46 $$ while (top > 0) -->Line_50 $$ AbstractInsnNode insnNode = null[ CD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_65 $$ merge(jump, current)[ FD ]
Line_19 $$ List<TryCatchBlockNode> insnHandlers = handlers[j]-->Line_24 $$ insnHandlers.add(tcb)[ FD ]
Line_14 $$ for (int i = 0; i < m.tryCatchBlocks.size(); ++i) -->Line_17 $$ int end = insns.indexOf(tcb.end)[ CD ]
Line_21 $$ insnHandlers = new ArrayList<TryCatchBlockNode>()-->Line_90 $$ for (int i = 0; i < insnHandlers.size(); ++i) [ FD ]
Line_75 $$ if (insnNode instanceof TableSwitchInsnNode) -->Line_78 $$ merge(jump, current)[ CD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_9 $$ List<TryCatchBlockNode>[] handlers = (List<TryCatchBlockNode>[]) new List<?>[n][ CD ]
Line_14 $$ for (int i = 0; i < m.tryCatchBlocks.size(); ++i) -->Line_16 $$ int begin = insns.indexOf(tcb.start)[ CD ]
Line_14 $$ for (int i = 0; i < m.tryCatchBlocks.size(); ++i) -->Line_15 $$ TryCatchBlockNode tcb = m.tryCatchBlocks.get(i)[ FD ]
Line_70 $$ for (int j = 0; j < lsi.labels.size(); ++j) -->Line_71 $$ LabelNode label = lsi.labels.get(j)[ CD ]
Line_18 $$ for (int j = begin; j < end; ++j) -->Line_19 $$ List<TryCatchBlockNode> insnHandlers = handlers[j][ CD ]
Line_66 $$ if (insnNode instanceof LookupSwitchInsnNode) -->Line_67 $$ LookupSwitchInsnNode lsi = (LookupSwitchInsnNode) insnNode[ CD ]
Line_60 $$ JumpInsnNode j = (JumpInsnNode) insnNode-->Line_70 $$ for (int j = 0; j < lsi.labels.size(); ++j) [ FD ]
Line_3 $$ if ((m.access & (ACC_ABSTRACT | ACC_NATIVE)) != 0 || m.instructions.size() == 0) -->Line_5 $$ return frames[ CD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)[ CD ]
Line_31 $$ int local = 0-->Line_42 $$ while (local < m.maxLocals) [ FD ]
Line_89 $$ if (insnHandlers != null) -->Line_90 $$ for (int i = 0; i < insnHandlers.size(); ++i) [ CD ]
Line_18 $$ for (int j = begin; j < end; ++j) -->Line_70 $$ for (int j = 0; j < lsi.labels.size(); ++j) [ FD ]
Line_2 $$ public Frame<V>[] analyze(final String owner, final MethodNode m) throws AnalyzerException -->Line_46 $$ while (top > 0) [ CD ]
Line_21 $$ insnHandlers = new ArrayList<TryCatchBlockNode>()-->Line_24 $$ insnHandlers.add(tcb)[ FD ]
Line_27 $$ Frame<V> current = new Frame<V>(m.maxLocals, m.maxStack)-->Line_82 $$ merge(jump, current)[ FD ]
Line_21 $$ insnHandlers = new ArrayList<TryCatchBlockNode>()-->Line_89 $$ if (insnHandlers != null) [ FD ]
Line_52 $$ insnNode = m.instructions.get(insn)-->Line_53 $$ int insnOpcode = insnNode.getOpcode()[ FD ]
Line_42 $$ while (local < m.maxLocals) -->Line_43 $$ current.setLocal(local++, interpreter.newValue(null))[ CD ]
Line_66 $$ if (insnNode instanceof LookupSwitchInsnNode) -->Line_69 $$ merge(jump, current)[ CD ]
