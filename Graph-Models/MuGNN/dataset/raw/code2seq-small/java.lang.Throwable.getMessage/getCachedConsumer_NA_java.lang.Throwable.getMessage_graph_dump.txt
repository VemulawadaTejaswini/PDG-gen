Line_4 $$ MessageConsumer consumer = this.cachedConsumers.get(cacheKey)-->Line_5 $$ if (consumer != null) [ FD ]
Line_4 $$ MessageConsumer consumer = this.cachedConsumers.get(cacheKey)-->Line_24 $$ consumer = (durable ? this.target.createDurableSubscriber((Topic) dest, subscription, selector, noLocal) : this.target.createConsumer(dest, selector, noLocal))[ FD ]
Line_12 $$ Method method = (durable ? createSharedDurableConsumerMethod : createSharedConsumerMethod)-->Line_14 $$ consumer = (MessageConsumer) method.invoke(this.target, dest, subscription, selector)[ FD ]
Line_4 $$ MessageConsumer consumer = this.cachedConsumers.get(cacheKey)-->Line_14 $$ consumer = (MessageConsumer) method.invoke(this.target, dest, subscription, selector)[ FD ]
Line_2 $$ private MessageConsumer getCachedConsumer(Destination dest, String selector, Boolean noLocal, String subscription, boolean durable) throws JMSException -->Line_27 $$ consumer = this.target.createConsumer(dest, selector)[ FD ]
Line_14 $$ consumer = (MessageConsumer) method.invoke(this.target, dest, subscription, selector)-->Line_32 $$ this.cachedConsumers.put(cacheKey, consumer)[ FD ]
Line_24 $$ consumer = (durable ? this.target.createDurableSubscriber((Topic) dest, subscription, selector, noLocal) : this.target.createConsumer(dest, selector, noLocal))-->Line_32 $$ this.cachedConsumers.put(cacheKey, consumer)[ FD ]
Line_14 $$ consumer = (MessageConsumer) method.invoke(this.target, dest, subscription, selector)-->Line_27 $$ consumer = this.target.createConsumer(dest, selector)[ FD ]
Line_2 $$ private MessageConsumer getCachedConsumer(Destination dest, String selector, Boolean noLocal, String subscription, boolean durable) throws JMSException -->Line_34 $$ return new CachedMessageConsumer(consumer)[ CD ]
Line_2 $$ private MessageConsumer getCachedConsumer(Destination dest, String selector, Boolean noLocal, String subscription, boolean durable) throws JMSException -->Line_24 $$ consumer = (durable ? this.target.createDurableSubscriber((Topic) dest, subscription, selector, noLocal) : this.target.createConsumer(dest, selector, noLocal))[ FD ]
Line_3 $$ ConsumerCacheKey cacheKey = new ConsumerCacheKey(dest, selector, noLocal, subscription, durable)-->Line_32 $$ this.cachedConsumers.put(cacheKey, consumer)[ FD ]
Line_4 $$ MessageConsumer consumer = this.cachedConsumers.get(cacheKey)-->Line_27 $$ consumer = this.target.createConsumer(dest, selector)[ FD ]
Line_5 $$ if (consumer != null) -->Line_10 $$ if (dest instanceof Topic) [ CD ]
Line_2 $$ private MessageConsumer getCachedConsumer(Destination dest, String selector, Boolean noLocal, String subscription, boolean durable) throws JMSException -->Line_11 $$ if (noLocal == null) [ FD ]
Line_24 $$ consumer = (durable ? this.target.createDurableSubscriber((Topic) dest, subscription, selector, noLocal) : this.target.createConsumer(dest, selector, noLocal))-->Line_27 $$ consumer = this.target.createConsumer(dest, selector)[ FD ]
Line_2 $$ private MessageConsumer getCachedConsumer(Destination dest, String selector, Boolean noLocal, String subscription, boolean durable) throws JMSException -->Line_10 $$ if (dest instanceof Topic) [ FD ]
Line_4 $$ MessageConsumer consumer = this.cachedConsumers.get(cacheKey)-->Line_32 $$ this.cachedConsumers.put(cacheKey, consumer)[ FD ]
Line_2 $$ private MessageConsumer getCachedConsumer(Destination dest, String selector, Boolean noLocal, String subscription, boolean durable) throws JMSException -->Line_4 $$ MessageConsumer consumer = this.cachedConsumers.get(cacheKey)[ CD ]
Line_2 $$ private MessageConsumer getCachedConsumer(Destination dest, String selector, Boolean noLocal, String subscription, boolean durable) throws JMSException -->Line_3 $$ ConsumerCacheKey cacheKey = new ConsumerCacheKey(dest, selector, noLocal, subscription, durable)[ CD ]
Line_5 $$ if (consumer != null) -->Line_32 $$ this.cachedConsumers.put(cacheKey, consumer)[ CD ]
Line_29 $$ if (logger.isDebugEnabled()) -->Line_30 $$ logger.debug("Registering cached JMS MessageConsumer for destination [" + dest + "]: " + consumer)[ CD ]
Line_27 $$ consumer = this.target.createConsumer(dest, selector)-->Line_32 $$ this.cachedConsumers.put(cacheKey, consumer)[ FD ]
Line_10 $$ if (dest instanceof Topic) -->Line_11 $$ if (noLocal == null) [ CD ]
Line_10 $$ if (dest instanceof Topic) -->Line_27 $$ consumer = this.target.createConsumer(dest, selector)[ CD ]
Line_2 $$ private MessageConsumer getCachedConsumer(Destination dest, String selector, Boolean noLocal, String subscription, boolean durable) throws JMSException -->Line_5 $$ if (consumer != null) [ CD ]
Line_3 $$ ConsumerCacheKey cacheKey = new ConsumerCacheKey(dest, selector, noLocal, subscription, durable)-->Line_4 $$ MessageConsumer consumer = this.cachedConsumers.get(cacheKey)[ FD ]
Line_14 $$ consumer = (MessageConsumer) method.invoke(this.target, dest, subscription, selector)-->Line_24 $$ consumer = (durable ? this.target.createDurableSubscriber((Topic) dest, subscription, selector, noLocal) : this.target.createConsumer(dest, selector, noLocal))[ FD ]
Line_11 $$ if (noLocal == null) -->Line_12 $$ Method method = (durable ? createSharedDurableConsumerMethod : createSharedConsumerMethod)[ CD ]
Line_5 $$ if (consumer != null) -->Line_29 $$ if (logger.isDebugEnabled()) [ CD ]
Line_5 $$ if (consumer != null) -->Line_6 $$ if (logger.isTraceEnabled()) [ CD ]
Line_2 $$ private MessageConsumer getCachedConsumer(Destination dest, String selector, Boolean noLocal, String subscription, boolean durable) throws JMSException -->Line_14 $$ consumer = (MessageConsumer) method.invoke(this.target, dest, subscription, selector)[ FD ]
Line_6 $$ if (logger.isTraceEnabled()) -->Line_7 $$ logger.trace("Found cached JMS MessageConsumer for destination [" + dest + "]: " + consumer)[ CD ]
Line_11 $$ if (noLocal == null) -->Line_24 $$ consumer = (durable ? this.target.createDurableSubscriber((Topic) dest, subscription, selector, noLocal) : this.target.createConsumer(dest, selector, noLocal))[ CD ]
