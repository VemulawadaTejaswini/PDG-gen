Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_4 $$ File projectFile = getProjectFile()[ CD ]
Line_4 $$ File projectFile = getProjectFile()-->Line_8 $$ projectFile = getExternalProjectConfigToUse(projectFile)[ FD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_35 $$ if (ex != null) [ CD ]
Line_9 $$ final Ref<ConfigurationException> error = new Ref<ConfigurationException>()-->Line_39 $$ ConfigurationException exception = error.get()[ FD ]
Line_3 $$ final String externalSystemName = myExternalSystemId.getReadableName()-->Line_30 $$ exRef.set(new ConfigurationException(e.getMessage(), ExternalSystemBundle.message("error.cannot.parse.project", externalSystemName)))[ FD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_23 $$ final String externalProjectPath = FileUtil.toCanonicalPath(finalProjectFile.getAbsolutePath())[ CD ]
Line_9 $$ final Ref<ConfigurationException> error = new Ref<ConfigurationException>()-->Line_18 $$ error.set(new ConfigurationException(ExternalSystemBundle.message("error.resolve.with.log_link", errorMessage, PathManager.getLogPath()), ExternalSystemBundle.message("error.resolve.generic")))[ FD ]
Line_38 $$ if (myExternalProjectNode == null) -->Line_44 $$ applyProjectSettings(wizardContext)[ CD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_9 $$ final Ref<ConfigurationException> error = new Ref<ConfigurationException>()[ CD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_3 $$ final String externalSystemName = myExternalSystemId.getReadableName()[ CD ]
Line_10 $$ final ExternalProjectRefreshCallback callback = new ExternalProjectRefreshCallback() -->Line_18 $$ error.set(new ConfigurationException(ExternalSystemBundle.message("error.resolve.with.log_link", errorMessage, PathManager.getLogPath()), ExternalSystemBundle.message("error.resolve.generic")))[ FD ]
Line_10 $$ final ExternalProjectRefreshCallback callback = new ExternalProjectRefreshCallback() -->Line_15 $$ if (!StringUtil.isEmpty(errorDetails)) [ FD ]
Line_38 $$ if (myExternalProjectNode == null) -->Line_40 $$ if (exception != null) [ CD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_34 $$ ConfigurationException ex = exRef.get()[ CD ]
Line_10 $$ final ExternalProjectRefreshCallback callback = new ExternalProjectRefreshCallback() -->Line_28 $$ ExternalSystemUtil.refreshProject(project, myExternalSystemId, externalProjectPath, callback, true, ProgressExecutionMode.MODAL_SYNC)[ FD ]
Line_10 $$ final ExternalProjectRefreshCallback callback = new ExternalProjectRefreshCallback() -->Line_16 $$ LOG.warn(errorDetails)[ FD ]
Line_38 $$ if (myExternalProjectNode == null) -->Line_39 $$ ConfigurationException exception = error.get()[ CD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_44 $$ applyProjectSettings(wizardContext)[ FD ]
Line_4 $$ File projectFile = getProjectFile()-->Line_5 $$ if (projectFile == null) [ FD ]
Line_10 $$ final ExternalProjectRefreshCallback callback = new ExternalProjectRefreshCallback() -->Line_15 $$ if (!StringUtil.isEmpty(errorDetails)) [ CD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_21 $$ final Project project = getProject(wizardContext)[ FD ]
Line_10 $$ final ExternalProjectRefreshCallback callback = new ExternalProjectRefreshCallback() -->Line_18 $$ error.set(new ConfigurationException(ExternalSystemBundle.message("error.resolve.with.log_link", errorMessage, PathManager.getLogPath()), ExternalSystemBundle.message("error.resolve.generic")))[ CD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_38 $$ if (myExternalProjectNode == null) [ CD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_21 $$ final Project project = getProject(wizardContext)[ CD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_10 $$ final ExternalProjectRefreshCallback callback = new ExternalProjectRefreshCallback() [ CD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_25 $$ executeAndRestoreDefaultProjectSettings(project, new Runnable() [ CD ]
Line_15 $$ if (!StringUtil.isEmpty(errorDetails)) -->Line_16 $$ LOG.warn(errorDetails)[ CD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_5 $$ if (projectFile == null) [ CD ]
Line_2 $$ public void ensureProjectIsDefined(@NotNull WizardContext wizardContext) throws ConfigurationException -->Line_8 $$ projectFile = getExternalProjectConfigToUse(projectFile)[ CD ]
