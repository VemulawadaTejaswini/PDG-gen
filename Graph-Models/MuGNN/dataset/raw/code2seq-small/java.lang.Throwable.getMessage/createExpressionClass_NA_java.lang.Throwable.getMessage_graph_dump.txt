Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_17 $$ expressionToCompile.generateCode(mv, cf)[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_34 $$ return (Class<? extends CompiledExpression>) this.ccl.defineClass(clazzName.replaceAll("/", "."), data)[ CD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_10 $$ mv.visitInsn(RETURN)[ CD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_31 $$ cw.visitEnd()[ CD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_28 $$ mv.visitInsn(ARETURN)[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_33 $$ byte[] data = cw.toByteArray()[ CD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_14 $$ mv.visitCode()[ CD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_14 $$ mv.visitCode()[ FD ]
Line_4 $$ ClassWriter cw = new ExpressionClassWriter()-->Line_33 $$ byte[] data = cw.toByteArray()[ FD ]
Line_13 $$ mv = cw.visitMethod(ACC_PUBLIC, "getValue", "(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;", null, new String[] -->Line_17 $$ expressionToCompile.generateCode(mv, cf)[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_11 $$ mv.visitMaxs(1, 1)[ CD ]
Line_13 $$ mv = cw.visitMethod(ACC_PUBLIC, "getValue", "(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;", null, new String[] -->Line_30 $$ mv.visitEnd()[ FD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_29 $$ mv.visitMaxs(0, 0)[ FD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_12 $$ mv.visitEnd()[ FD ]
Line_3 $$ String clazzName = "spel/Ex" + getNextSuffix()-->Line_5 $$ cw.visit(V1_5, ACC_PUBLIC, clazzName, null, "org/springframework/expression/spel/CompiledExpression", null)[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_29 $$ mv.visitMaxs(0, 0)[ CD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_9 $$ mv.visitMethodInsn(INVOKESPECIAL, "org/springframework/expression/spel/CompiledExpression", "<init>", "()V", false)[ CD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_5 $$ cw.visit(V1_5, ACC_PUBLIC, clazzName, null, "org/springframework/expression/spel/CompiledExpression", null)[ CD ]
Line_15 $$ CodeFlow cf = new CodeFlow(clazzName, cw)-->Line_17 $$ expressionToCompile.generateCode(mv, cf)[ FD ]
Line_15 $$ CodeFlow cf = new CodeFlow(clazzName, cw)-->Line_24 $$ CodeFlow.insertBoxIfNecessary(mv, cf.lastDescriptor())[ FD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_26 $$ mv.visitInsn(ACONST_NULL)[ FD ]
Line_4 $$ ClassWriter cw = new ExpressionClassWriter()-->Line_31 $$ cw.visitEnd()[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_15 $$ CodeFlow cf = new CodeFlow(clazzName, cw)[ CD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_8 $$ mv.visitVarInsn(ALOAD, 0)[ CD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_10 $$ mv.visitInsn(RETURN)[ FD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_9 $$ mv.visitMethodInsn(INVOKESPECIAL, "org/springframework/expression/spel/CompiledExpression", "<init>", "()V", false)[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_13 $$ mv = cw.visitMethod(ACC_PUBLIC, "getValue", "(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;", null, new String[] [ CD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_7 $$ mv.visitCode()[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_25 $$ if ("V".equals(cf.lastDescriptor())) [ CD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_8 $$ mv.visitVarInsn(ALOAD, 0)[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_24 $$ CodeFlow.insertBoxIfNecessary(mv, cf.lastDescriptor())[ CD ]
Line_13 $$ mv = cw.visitMethod(ACC_PUBLIC, "getValue", "(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;", null, new String[] -->Line_24 $$ CodeFlow.insertBoxIfNecessary(mv, cf.lastDescriptor())[ FD ]
Line_4 $$ ClassWriter cw = new ExpressionClassWriter()-->Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)[ FD ]
Line_15 $$ CodeFlow cf = new CodeFlow(clazzName, cw)-->Line_25 $$ if ("V".equals(cf.lastDescriptor())) [ FD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_11 $$ mv.visitMaxs(1, 1)[ FD ]
Line_33 $$ byte[] data = cw.toByteArray()-->Line_34 $$ return (Class<? extends CompiledExpression>) this.ccl.defineClass(clazzName.replaceAll("/", "."), data)[ FD ]
Line_19 $$ if (logger.isDebugEnabled()) -->Line_20 $$ logger.debug(expressionToCompile.getClass().getSimpleName() + ".generateCode opted out of compilation: " + ex.getMessage())[ CD ]
Line_25 $$ if ("V".equals(cf.lastDescriptor())) -->Line_26 $$ mv.visitInsn(ACONST_NULL)[ CD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_20 $$ logger.debug(expressionToCompile.getClass().getSimpleName() + ".generateCode opted out of compilation: " + ex.getMessage())[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_3 $$ String clazzName = "spel/Ex" + getNextSuffix()[ CD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_13 $$ mv = cw.visitMethod(ACC_PUBLIC, "getValue", "(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;", null, new String[] [ FD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_30 $$ mv.visitEnd()[ FD ]
Line_15 $$ CodeFlow cf = new CodeFlow(clazzName, cw)-->Line_32 $$ cf.finish()[ FD ]
Line_4 $$ ClassWriter cw = new ExpressionClassWriter()-->Line_5 $$ cw.visit(V1_5, ACC_PUBLIC, clazzName, null, "org/springframework/expression/spel/CompiledExpression", null)[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_7 $$ mv.visitCode()[ CD ]
Line_13 $$ mv = cw.visitMethod(ACC_PUBLIC, "getValue", "(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;", null, new String[] -->Line_26 $$ mv.visitInsn(ACONST_NULL)[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_30 $$ mv.visitEnd()[ CD ]
Line_3 $$ String clazzName = "spel/Ex" + getNextSuffix()-->Line_34 $$ return (Class<? extends CompiledExpression>) this.ccl.defineClass(clazzName.replaceAll("/", "."), data)[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_12 $$ mv.visitEnd()[ CD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_17 $$ expressionToCompile.generateCode(mv, cf)[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_28 $$ mv.visitInsn(ARETURN)[ CD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_32 $$ cf.finish()[ CD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_4 $$ ClassWriter cw = new ExpressionClassWriter()[ CD ]
Line_13 $$ mv = cw.visitMethod(ACC_PUBLIC, "getValue", "(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;", null, new String[] -->Line_14 $$ mv.visitCode()[ FD ]
Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)-->Line_24 $$ CodeFlow.insertBoxIfNecessary(mv, cf.lastDescriptor())[ FD ]
Line_4 $$ ClassWriter cw = new ExpressionClassWriter()-->Line_13 $$ mv = cw.visitMethod(ACC_PUBLIC, "getValue", "(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;", null, new String[] [ FD ]
Line_13 $$ mv = cw.visitMethod(ACC_PUBLIC, "getValue", "(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;", null, new String[] -->Line_28 $$ mv.visitInsn(ARETURN)[ FD ]
Line_2 $$ private Class<? extends CompiledExpression> createExpressionClass(SpelNodeImpl expressionToCompile) -->Line_6 $$ MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null)[ CD ]
Line_13 $$ mv = cw.visitMethod(ACC_PUBLIC, "getValue", "(Ljava/lang/Object;Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;", null, new String[] -->Line_29 $$ mv.visitMaxs(0, 0)[ FD ]
