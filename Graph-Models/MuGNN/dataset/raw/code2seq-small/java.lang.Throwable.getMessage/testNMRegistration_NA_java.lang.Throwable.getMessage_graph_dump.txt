Line_2 $$ public void testNMRegistration() throws InterruptedException -->Line_10 $$ Object[] services = nm.getServices().toArray()[ CD ]
Line_2 $$ public void testNMRegistration() throws InterruptedException -->Line_37 $$ while (heartBeatID <= 3 && waitCount++ != 200) [ CD ]
Line_25 $$ while (nm.getServiceState() == STATE.INITED && waitCount++ != 50) -->Line_27 $$ if (nmStartError != null) [ CD ]
Line_2 $$ public void testNMRegistration() throws InterruptedException -->Line_33 $$ if (nm.getServiceState() != STATE.STARTED) [ CD ]
Line_2 $$ public void testNMRegistration() throws InterruptedException -->Line_9 $$ nm.init(conf)[ CD ]
Line_2 $$ public void testNMRegistration() throws InterruptedException -->Line_40 $$ Assert.assertFalse(heartBeatID <= 3)[ CD ]
Line_37 $$ while (heartBeatID <= 3 && waitCount++ != 200) -->Line_38 $$ Thread.sleep(1000)[ CD ]
Line_2 $$ public void testNMRegistration() throws InterruptedException -->Line_25 $$ while (nm.getServiceState() == STATE.INITED && waitCount++ != 50) [ CD ]
Line_2 $$ public void testNMRegistration() throws InterruptedException -->Line_23 $$ System.out.println(" ----- thread already started.." + nm.getServiceState())[ CD ]
Line_2 $$ public void testNMRegistration() throws InterruptedException -->Line_41 $$ Assert.assertEquals("Number of registered NMs is wrong!!", 1, this.registeredNodes.size())[ CD ]
Line_2 $$ public void testNMRegistration() throws InterruptedException -->Line_8 $$ YarnConfiguration conf = createNMConfig()[ CD ]
Line_27 $$ if (nmStartError != null) -->Line_28 $$ LOG.error("Error during startup. ", nmStartError)[ CD ]
Line_25 $$ while (nm.getServiceState() == STATE.INITED && waitCount++ != 50) -->Line_31 $$ Thread.sleep(2000)[ CD ]
Line_27 $$ if (nmStartError != null) -->Line_29 $$ Assert.fail(nmStartError.getCause().getMessage())[ CD ]
Line_3 $$ nm = new NodeManager() -->Line_5 $$ return new MyNodeStatusUpdater(context, dispatcher, healthChecker, metrics)[ CD ]
Line_25 $$ while (nm.getServiceState() == STATE.INITED && waitCount++ != 50) -->Line_26 $$ LOG.info("Waiting for NM to start..")[ CD ]
Line_2 $$ public void testNMRegistration() throws InterruptedException -->Line_42 $$ nm.stop()[ CD ]
Line_2 $$ public void testNMRegistration() throws InterruptedException -->Line_12 $$ Assert.assertTrue("last service is NOT the node status updater", lastService instanceof NodeStatusUpdater)[ CD ]
Line_33 $$ if (nm.getServiceState() != STATE.STARTED) -->Line_34 $$ Assert.fail("NodeManager failed to start")[ CD ]
Line_2 $$ public void testNMRegistration() throws InterruptedException -->Line_13 $$ new Thread() [ CD ]
