Line_2 $$ private OperatorFactory compileFilterWithNoInputColumns(Expression filter, ExpressionCompiler compiler) -->Line_4 $$ IdentityHashMap<Expression, Type> expressionTypes = getExpressionTypesFromInput(TEST_SESSION, metadata, SQL_PARSER, INPUT_TYPES, ImmutableList.of(filter))[ FD ]
Line_3 $$ filter = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(ImmutableMap.<Symbol, Integer>of()), filter)-->Line_6 $$ PageProcessor processor = compiler.compilePageProcessor(toRowExpression(filter, expressionTypes), ImmutableList.of())[ FD ]
Line_3 $$ filter = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(ImmutableMap.<Symbol, Integer>of()), filter)-->Line_4 $$ IdentityHashMap<Expression, Type> expressionTypes = getExpressionTypesFromInput(TEST_SESSION, metadata, SQL_PARSER, INPUT_TYPES, ImmutableList.of(filter))[ FD ]
Line_4 $$ IdentityHashMap<Expression, Type> expressionTypes = getExpressionTypesFromInput(TEST_SESSION, metadata, SQL_PARSER, INPUT_TYPES, ImmutableList.of(filter))-->Line_6 $$ PageProcessor processor = compiler.compilePageProcessor(toRowExpression(filter, expressionTypes), ImmutableList.of())[ FD ]
Line_2 $$ private OperatorFactory compileFilterWithNoInputColumns(Expression filter, ExpressionCompiler compiler) -->Line_3 $$ filter = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(ImmutableMap.<Symbol, Integer>of()), filter)[ FD ]
Line_2 $$ private OperatorFactory compileFilterWithNoInputColumns(Expression filter, ExpressionCompiler compiler) -->Line_3 $$ filter = ExpressionTreeRewriter.rewriteWith(new SymbolToInputRewriter(ImmutableMap.<Symbol, Integer>of()), filter)[ CD ]
Line_2 $$ private OperatorFactory compileFilterWithNoInputColumns(Expression filter, ExpressionCompiler compiler) -->Line_6 $$ PageProcessor processor = compiler.compilePageProcessor(toRowExpression(filter, expressionTypes), ImmutableList.of())[ FD ]
Line_2 $$ private OperatorFactory compileFilterWithNoInputColumns(Expression filter, ExpressionCompiler compiler) -->Line_4 $$ IdentityHashMap<Expression, Type> expressionTypes = getExpressionTypesFromInput(TEST_SESSION, metadata, SQL_PARSER, INPUT_TYPES, ImmutableList.of(filter))[ CD ]
Line_9 $$ if (e instanceof UncheckedExecutionException) -->Line_10 $$ e = e.getCause()[ CD ]
