Line_21 $$ response = future.get()-->Line_34 $$ Assert.assertEquals("If we are only undeploying, then subsequent requests should return 404.", HttpServletResponse.SC_NOT_FOUND, response.getStatusLine().getStatusCode())[ FD ]
Line_2 $$ private void abstractGracefulServe(URL baseURL, boolean undeployOnly) throws URISyntaxException, IOException, InterruptedException -->Line_4 $$ URI uri = SimpleServlet.createURI(baseURL)[ FD ]
Line_5 $$ HttpResponse response = client.execute(new HttpGet(uri))-->Line_21 $$ response = future.get()[ FD ]
Line_5 $$ HttpResponse response = client.execute(new HttpGet(uri))-->Line_9 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_5 $$ HttpResponse response = client.execute(new HttpGet(uri))-->Line_25 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_32 $$ response = client.execute(new HttpGet(uri))-->Line_36 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_5 $$ HttpResponse response = client.execute(new HttpGet(uri))-->Line_23 $$ Assert.assertEquals("Request should succeed since it initiated before undeply or shutdown.", HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_21 $$ response = future.get()-->Line_25 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_21 $$ response = future.get()-->Line_23 $$ Assert.assertEquals("Request should succeed since it initiated before undeply or shutdown.", HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_21 $$ response = future.get()-->Line_36 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_13 $$ Future<HttpResponse> future = executor.submit(new RequestTask(client, longRunningURI))-->Line_21 $$ response = future.get()[ FD ]
Line_2 $$ private void abstractGracefulServe(URL baseURL, boolean undeployOnly) throws URISyntaxException, IOException, InterruptedException -->Line_11 $$ URI longRunningURI = SimpleServlet.createURI(baseURL, REQUEST_DURATION)[ FD ]
Line_31 $$ if (undeployOnly) -->Line_32 $$ response = client.execute(new HttpGet(uri))[ CD ]
Line_3 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_32 $$ response = client.execute(new HttpGet(uri))[ FD ]
Line_5 $$ HttpResponse response = client.execute(new HttpGet(uri))-->Line_7 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_5 $$ HttpResponse response = client.execute(new HttpGet(uri))-->Line_36 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_21 $$ response = future.get()-->Line_32 $$ response = client.execute(new HttpGet(uri))[ FD ]
Line_12 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_13 $$ Future<HttpResponse> future = executor.submit(new RequestTask(client, longRunningURI))[ FD ]
Line_3 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_5 $$ HttpResponse response = client.execute(new HttpGet(uri))[ FD ]
Line_15 $$ if (undeployOnly) -->Line_16 $$ undeploy(DEPLOYMENT_1)[ CD ]
Line_32 $$ response = client.execute(new HttpGet(uri))-->Line_34 $$ Assert.assertEquals("If we are only undeploying, then subsequent requests should return 404.", HttpServletResponse.SC_NOT_FOUND, response.getStatusLine().getStatusCode())[ FD ]
Line_15 $$ if (undeployOnly) -->Line_18 $$ stop(CONTAINER_1)[ CD ]
Line_5 $$ HttpResponse response = client.execute(new HttpGet(uri))-->Line_32 $$ response = client.execute(new HttpGet(uri))[ FD ]
Line_5 $$ HttpResponse response = client.execute(new HttpGet(uri))-->Line_34 $$ Assert.assertEquals("If we are only undeploying, then subsequent requests should return 404.", HttpServletResponse.SC_NOT_FOUND, response.getStatusLine().getStatusCode())[ FD ]
