Line_4 $$ ThreadPool.ThreadPoolType incorrectThreadPoolType = randomIncorrectThreadPoolType(threadPoolName)-->Line_12 $$ assertThat(e.getMessage(), is("setting threadpool." + threadPoolName + ".type to " + incorrectThreadPoolType.getType() + " is not permitted; must be " + correctThreadPoolType.getType()))[ FD ]
Line_8 $$ threadPool = new ThreadPool(settingsBuilder().put("name", "testThreadPoolCanNotOverrideThreadPoolType").put("threadpool." + threadPoolName + ".type", incorrectThreadPoolType.getType()).build())-->Line_9 $$ terminate(threadPool)[ FD ]
Line_2 $$ public void testThreadPoolCanNotOverrideThreadPoolType() throws InterruptedException -->Line_4 $$ ThreadPool.ThreadPoolType incorrectThreadPoolType = randomIncorrectThreadPoolType(threadPoolName)[ CD ]
Line_6 $$ ThreadPool threadPool = null-->Line_9 $$ terminate(threadPool)[ FD ]
Line_2 $$ public void testThreadPoolCanNotOverrideThreadPoolType() throws InterruptedException -->Line_5 $$ ThreadPool.ThreadPoolType correctThreadPoolType = ThreadPool.THREAD_POOL_TYPES.get(threadPoolName)[ CD ]
Line_6 $$ ThreadPool threadPool = null-->Line_8 $$ threadPool = new ThreadPool(settingsBuilder().put("name", "testThreadPoolCanNotOverrideThreadPoolType").put("threadpool." + threadPoolName + ".type", incorrectThreadPoolType.getType()).build())[ FD ]
Line_2 $$ public void testThreadPoolCanNotOverrideThreadPoolType() throws InterruptedException -->Line_6 $$ ThreadPool threadPool = null[ CD ]
Line_2 $$ public void testThreadPoolCanNotOverrideThreadPoolType() throws InterruptedException -->Line_3 $$ String threadPoolName = randomThreadPoolName()[ CD ]
Line_3 $$ String threadPoolName = randomThreadPoolName()-->Line_4 $$ ThreadPool.ThreadPoolType incorrectThreadPoolType = randomIncorrectThreadPoolType(threadPoolName)[ FD ]
Line_6 $$ ThreadPool threadPool = null-->Line_14 $$ terminateThreadPoolIfNeeded(threadPool)[ FD ]
Line_8 $$ threadPool = new ThreadPool(settingsBuilder().put("name", "testThreadPoolCanNotOverrideThreadPoolType").put("threadpool." + threadPoolName + ".type", incorrectThreadPoolType.getType()).build())-->Line_14 $$ terminateThreadPoolIfNeeded(threadPool)[ FD ]
Line_5 $$ ThreadPool.ThreadPoolType correctThreadPoolType = ThreadPool.THREAD_POOL_TYPES.get(threadPoolName)-->Line_12 $$ assertThat(e.getMessage(), is("setting threadpool." + threadPoolName + ".type to " + incorrectThreadPoolType.getType() + " is not permitted; must be " + correctThreadPoolType.getType()))[ FD ]
Line_4 $$ ThreadPool.ThreadPoolType incorrectThreadPoolType = randomIncorrectThreadPoolType(threadPoolName)-->Line_8 $$ threadPool = new ThreadPool(settingsBuilder().put("name", "testThreadPoolCanNotOverrideThreadPoolType").put("threadpool." + threadPoolName + ".type", incorrectThreadPoolType.getType()).build())[ FD ]
Line_3 $$ String threadPoolName = randomThreadPoolName()-->Line_5 $$ ThreadPool.ThreadPoolType correctThreadPoolType = ThreadPool.THREAD_POOL_TYPES.get(threadPoolName)[ FD ]
