Line_7 $$ if (requestCallback != null) -->Line_8 $$ requestCallback.doWithRequest(request)[ CD ]
Line_2 $$ protected <T> ListenableFuture<T> doExecute(URI url, HttpMethod method, AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) throws RestClientException -->Line_4 $$ Assert.notNull(method, "'method' must not be null")[ FD ]
Line_2 $$ protected <T> ListenableFuture<T> doExecute(URI url, HttpMethod method, AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) throws RestClientException -->Line_8 $$ requestCallback.doWithRequest(request)[ FD ]
Line_6 $$ AsyncClientHttpRequest request = createAsyncRequest(url, method)-->Line_8 $$ requestCallback.doWithRequest(request)[ FD ]
Line_2 $$ protected <T> ListenableFuture<T> doExecute(URI url, HttpMethod method, AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) throws RestClientException -->Line_3 $$ Assert.notNull(url, "'url' must not be null")[ CD ]
Line_2 $$ protected <T> ListenableFuture<T> doExecute(URI url, HttpMethod method, AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) throws RestClientException -->Line_13 $$ throw new ResourceAccessException("I/O error on " + method.name() + " request for \"" + url + "\":" + ex.getMessage(), ex)[ FD ]
Line_6 $$ AsyncClientHttpRequest request = createAsyncRequest(url, method)-->Line_10 $$ ListenableFuture<ClientHttpResponse> responseFuture = request.executeAsync()[ FD ]
Line_2 $$ protected <T> ListenableFuture<T> doExecute(URI url, HttpMethod method, AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) throws RestClientException -->Line_4 $$ Assert.notNull(method, "'method' must not be null")[ CD ]
Line_2 $$ protected <T> ListenableFuture<T> doExecute(URI url, HttpMethod method, AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) throws RestClientException -->Line_7 $$ if (requestCallback != null) [ FD ]
Line_2 $$ protected <T> ListenableFuture<T> doExecute(URI url, HttpMethod method, AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) throws RestClientException -->Line_3 $$ Assert.notNull(url, "'url' must not be null")[ FD ]
Line_2 $$ protected <T> ListenableFuture<T> doExecute(URI url, HttpMethod method, AsyncRequestCallback requestCallback, ResponseExtractor<T> responseExtractor) throws RestClientException -->Line_6 $$ AsyncClientHttpRequest request = createAsyncRequest(url, method)[ FD ]
