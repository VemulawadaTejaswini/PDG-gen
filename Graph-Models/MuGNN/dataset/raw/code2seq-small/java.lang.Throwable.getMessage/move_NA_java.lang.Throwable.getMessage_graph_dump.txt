Line_2 $$ private void move(Token newToken) throws IOException -->Line_21 $$ Uninterruptibles.sleepUninterruptibly(RING_DELAY, TimeUnit.MILLISECONDS)[ CD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_5 $$ if (tokenMetadata.sortedTokens().contains(newToken))[ CD ]
Line_14 $$ for (String keyspaceName : keyspacesToProcess) -->Line_15 $$ if (tokenMetadata.getPendingRanges(keyspaceName, localAddress).size() > 0)[ FD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_5 $$ if (tokenMetadata.sortedTokens().contains(newToken))[ FD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_7 $$ InetAddress localAddress = FBUtilities.getBroadcastAddress()[ CD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_18 $$ Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.moving(newToken))[ CD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_19 $$ setMode(Mode.MOVING, String.format("Moving %s from %s to %s.", localAddress, getLocalTokens().iterator().next(), newToken), true)[ FD ]
Line_22 $$ RangeRelocator relocator = new RangeRelocator(Collections.singleton(newToken), keyspacesToProcess)-->Line_23 $$ if (relocator.streamsNeeded()) [ FD ]
Line_23 $$ if (relocator.streamsNeeded()) -->Line_24 $$ setMode(Mode.MOVING, "fetching new ranges and streaming old ranges", true)[ CD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_33 $$ setTokens(Collections.singleton(newToken))[ FD ]
Line_23 $$ if (relocator.streamsNeeded()) -->Line_31 $$ setMode(Mode.MOVING, "No ranges to fetch/stream", true)[ CD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_8 $$ if (getTokenMetadata().getTokens(localAddress).size() > 1) [ CD ]
Line_34 $$ if (logger.isDebugEnabled())-->Line_35 $$ logger.debug("Successfully moved to new token [ CD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_13 $$ PendingRangeCalculatorService.instance.blockUntilFinished()[ CD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_22 $$ RangeRelocator relocator = new RangeRelocator(Collections.singleton(newToken), keyspacesToProcess)[ CD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_34 $$ if (logger.isDebugEnabled())[ CD ]
Line_7 $$ InetAddress localAddress = FBUtilities.getBroadcastAddress()-->Line_15 $$ if (tokenMetadata.getPendingRanges(keyspaceName, localAddress).size() > 0)[ FD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_3 $$ if (newToken == null)[ CD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_22 $$ RangeRelocator relocator = new RangeRelocator(Collections.singleton(newToken), keyspacesToProcess)[ FD ]
Line_7 $$ InetAddress localAddress = FBUtilities.getBroadcastAddress()-->Line_19 $$ setMode(Mode.MOVING, String.format("Moving %s from %s to %s.", localAddress, getLocalTokens().iterator().next(), newToken), true)[ FD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_20 $$ setMode(Mode.MOVING, String.format("Sleeping %s ms before start streaming/fetching ranges", RING_DELAY), true)[ CD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_3 $$ if (newToken == null)[ FD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_12 $$ List<String> keyspacesToProcess = Schema.instance.getNonSystemKeyspaces()[ CD ]
Line_8 $$ if (getTokenMetadata().getTokens(localAddress).size() > 1) -->Line_9 $$ logger.error("Invalid request to move(Token); This node has more than one token and cannot be moved thusly.")[ CD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_33 $$ setTokens(Collections.singleton(newToken))[ CD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_18 $$ Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.moving(newToken))[ FD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_19 $$ setMode(Mode.MOVING, String.format("Moving %s from %s to %s.", localAddress, getLocalTokens().iterator().next(), newToken), true)[ CD ]
Line_7 $$ InetAddress localAddress = FBUtilities.getBroadcastAddress()-->Line_8 $$ if (getTokenMetadata().getTokens(localAddress).size() > 1) [ FD ]
Line_2 $$ private void move(Token newToken) throws IOException -->Line_23 $$ if (relocator.streamsNeeded()) [ CD ]
Line_22 $$ RangeRelocator relocator = new RangeRelocator(Collections.singleton(newToken), keyspacesToProcess)-->Line_26 $$ relocator.stream().get()[ FD ]
