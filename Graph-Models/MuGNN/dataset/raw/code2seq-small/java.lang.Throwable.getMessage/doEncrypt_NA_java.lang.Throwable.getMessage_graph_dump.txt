Line_9 $$ int index = algorithm.indexOf(CharPool.SLASH)-->Line_11 $$ algorithmName = algorithm.substring(0, index)[ FD ]
Line_9 $$ int index = algorithm.indexOf(CharPool.SLASH)-->Line_10 $$ if (index > -1) [ FD ]
Line_7 $$ PBEKeySpec pbeKeySpec = new PBEKeySpec(plainTextPassword.toCharArray(), saltBytes, pbkdf2EncryptionConfiguration.getRounds(), pbkdf2EncryptionConfiguration.getKeySize())-->Line_14 $$ SecretKey secretKey = secretKeyFactory.generateSecret(pbeKeySpec)[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_5 $$ pbkdf2EncryptionConfiguration.configure(algorithm, encryptedPassword)[ FD ]
Line_8 $$ String algorithmName = algorithm-->Line_13 $$ SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithmName)[ FD ]
Line_16 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(2 * 4 + saltBytes.length + secretKeyBytes.length)-->Line_18 $$ byteBuffer.putInt(pbkdf2EncryptionConfiguration.getRounds())[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_7 $$ PBEKeySpec pbeKeySpec = new PBEKeySpec(plainTextPassword.toCharArray(), saltBytes, pbkdf2EncryptionConfiguration.getRounds(), pbkdf2EncryptionConfiguration.getKeySize())[ FD ]
Line_16 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(2 * 4 + saltBytes.length + secretKeyBytes.length)-->Line_21 $$ return Base64.encode(byteBuffer.array())[ FD ]
Line_14 $$ SecretKey secretKey = secretKeyFactory.generateSecret(pbeKeySpec)-->Line_15 $$ byte[] secretKeyBytes = secretKey.getEncoded()[ FD ]
Line_4 $$ PBKDF2EncryptionConfiguration pbkdf2EncryptionConfiguration = new PBKDF2EncryptionConfiguration()-->Line_18 $$ byteBuffer.putInt(pbkdf2EncryptionConfiguration.getRounds())[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_9 $$ int index = algorithm.indexOf(CharPool.SLASH)[ FD ]
Line_4 $$ PBKDF2EncryptionConfiguration pbkdf2EncryptionConfiguration = new PBKDF2EncryptionConfiguration()-->Line_7 $$ PBEKeySpec pbeKeySpec = new PBEKeySpec(plainTextPassword.toCharArray(), saltBytes, pbkdf2EncryptionConfiguration.getRounds(), pbkdf2EncryptionConfiguration.getKeySize())[ FD ]
Line_13 $$ SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithmName)-->Line_14 $$ SecretKey secretKey = secretKeyFactory.generateSecret(pbeKeySpec)[ FD ]
Line_8 $$ String algorithmName = algorithm-->Line_11 $$ algorithmName = algorithm.substring(0, index)[ FD ]
Line_16 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(2 * 4 + saltBytes.length + secretKeyBytes.length)-->Line_20 $$ byteBuffer.put(secretKeyBytes)[ FD ]
Line_16 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(2 * 4 + saltBytes.length + secretKeyBytes.length)-->Line_17 $$ byteBuffer.putInt(pbkdf2EncryptionConfiguration.getKeySize())[ FD ]
Line_15 $$ byte[] secretKeyBytes = secretKey.getEncoded()-->Line_20 $$ byteBuffer.put(secretKeyBytes)[ FD ]
Line_16 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(2 * 4 + saltBytes.length + secretKeyBytes.length)-->Line_19 $$ byteBuffer.put(saltBytes)[ FD ]
Line_10 $$ if (index > -1) -->Line_11 $$ algorithmName = algorithm.substring(0, index)[ CD ]
Line_4 $$ PBKDF2EncryptionConfiguration pbkdf2EncryptionConfiguration = new PBKDF2EncryptionConfiguration()-->Line_5 $$ pbkdf2EncryptionConfiguration.configure(algorithm, encryptedPassword)[ FD ]
Line_6 $$ byte[] saltBytes = pbkdf2EncryptionConfiguration.getSaltBytes()-->Line_19 $$ byteBuffer.put(saltBytes)[ FD ]
Line_4 $$ PBKDF2EncryptionConfiguration pbkdf2EncryptionConfiguration = new PBKDF2EncryptionConfiguration()-->Line_17 $$ byteBuffer.putInt(pbkdf2EncryptionConfiguration.getKeySize())[ FD ]
Line_11 $$ algorithmName = algorithm.substring(0, index)-->Line_13 $$ SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithmName)[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) throws PwdEncryptorException -->Line_11 $$ algorithmName = algorithm.substring(0, index)[ FD ]
Line_4 $$ PBKDF2EncryptionConfiguration pbkdf2EncryptionConfiguration = new PBKDF2EncryptionConfiguration()-->Line_6 $$ byte[] saltBytes = pbkdf2EncryptionConfiguration.getSaltBytes()[ FD ]
