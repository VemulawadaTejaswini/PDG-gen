Line_3 $$ final VirtualFile form = myTestProjectRoot.findChild("Test.form")-->Line_4 $$ assertNotNull(form)[ FD ]
Line_2 $$ private void doTest() throws IOException -->Line_3 $$ final VirtualFile form = myTestProjectRoot.findChild("Test.form")[ CD ]
Line_2 $$ private void doTest() throws IOException -->Line_20 $$ final VirtualFile testAfter = myTestProjectRoot.findChild("BindingTest.java.after")[ CD ]
Line_2 $$ private void doTest() throws IOException -->Line_26 $$ assertEquals(expectedText, text)[ CD ]
Line_2 $$ private void doTest() throws IOException -->Line_5 $$ CommandProcessor.getInstance().executeCommand(myProject, new Runnable() [ CD ]
Line_2 $$ private void doTest() throws IOException -->Line_4 $$ assertNotNull(form)[ CD ]
Line_2 $$ private void doTest() throws IOException -->Line_21 $$ assertNotNull(testAfter)[ CD ]
Line_2 $$ private void doTest() throws IOException -->Line_23 $$ final PsiFile psiFile = bindingTestClass.getContainingFile()[ CD ]
Line_2 $$ private void doTest() throws IOException -->Line_19 $$ assertNotNull(bindingTestClass)[ CD ]
Line_3 $$ final VirtualFile form = myTestProjectRoot.findChild("Test.form")-->Line_10 $$ myGenerator.generate(form)[ FD ]
Line_2 $$ private void doTest() throws IOException -->Line_22 $$ String expectedText = StringUtil.convertLineSeparators(VfsUtil.loadText(testAfter))[ CD ]
Line_8 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_10 $$ myGenerator.generate(form)[ CD ]
Line_2 $$ private void doTest() throws IOException -->Line_18 $$ final PsiClass bindingTestClass = myJavaFacade.findClass("BindingTest", ProjectScope.getAllScope(myProject))[ CD ]
Line_2 $$ private void doTest() throws IOException -->Line_25 $$ final String text = StringUtil.convertLineSeparators(psiFile.getText())[ CD ]
Line_2 $$ private void doTest() throws IOException -->Line_24 $$ assertNotNull(psiFile)[ CD ]
