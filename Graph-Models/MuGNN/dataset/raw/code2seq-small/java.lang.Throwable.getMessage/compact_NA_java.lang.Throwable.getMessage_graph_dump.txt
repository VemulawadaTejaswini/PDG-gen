Line_14 $$ final int recordId = recordIterator.nextId()-->Line_16 $$ final int size = myRecordsTable.getSize(recordId)[ FD ]
Line_16 $$ final int size = myRecordsTable.getSize(recordId)-->Line_19 $$ final int capacity = myCapacityAllocationPolicy.calculateCapacity(size)[ FD ]
Line_15 $$ final long addr = myRecordsTable.getAddress(recordId)-->Line_22 $$ myDataTable.readBytes(addr, bytes)[ FD ]
Line_17 $$ if (size > 0) -->Line_24 $$ myRecordsTable.setAddress(recordId, newaddr)[ CD ]
Line_10 $$ File oldDataFile = new File(path + DATA_EXTENSION)-->Line_33 $$ newDataFile.renameTo(oldDataFile)[ FD ]
Line_19 $$ final int capacity = myCapacityAllocationPolicy.calculateCapacity(size)-->Line_20 $$ final long newaddr = newDataTable.allocateSpace(capacity)[ FD ]
Line_7 $$ File newDataFile = new File(path + ".storageData.backup")-->Line_33 $$ newDataFile.renameTo(oldDataFile)[ FD ]
Line_13 $$ while (recordIterator.hasNextId()) -->Line_14 $$ final int recordId = recordIterator.nextId()[ CD ]
Line_17 $$ if (size > 0) -->Line_25 $$ myRecordsTable.setCapacity(recordId, capacity)[ CD ]
Line_13 $$ while (recordIterator.hasNextId()) -->Line_16 $$ final int size = myRecordsTable.getSize(recordId)[ CD ]
Line_12 $$ RecordIdIterator recordIterator = myRecordsTable.createRecordIdIterator()-->Line_14 $$ final int recordId = recordIterator.nextId()[ FD ]
Line_11 $$ DataTable newDataTable = new DataTable(newDataFile, myPool)-->Line_29 $$ newDataTable.dispose()[ FD ]
Line_20 $$ final long newaddr = newDataTable.allocateSpace(capacity)-->Line_24 $$ myRecordsTable.setAddress(recordId, newaddr)[ FD ]
Line_21 $$ final byte[] bytes = new byte[size]-->Line_22 $$ myDataTable.readBytes(addr, bytes)[ FD ]
Line_20 $$ final long newaddr = newDataTable.allocateSpace(capacity)-->Line_23 $$ newDataTable.writeBytes(newaddr, bytes)[ FD ]
Line_10 $$ File oldDataFile = new File(path + DATA_EXTENSION)-->Line_30 $$ if (!FileUtil.delete(oldDataFile)) [ FD ]
Line_21 $$ final byte[] bytes = new byte[size]-->Line_23 $$ newDataTable.writeBytes(newaddr, bytes)[ FD ]
Line_13 $$ while (recordIterator.hasNextId()) -->Line_17 $$ if (size > 0) [ CD ]
Line_16 $$ final int size = myRecordsTable.getSize(recordId)-->Line_17 $$ if (size > 0) [ FD ]
Line_11 $$ DataTable newDataTable = new DataTable(newDataFile, myPool)-->Line_23 $$ newDataTable.writeBytes(newaddr, bytes)[ FD ]
Line_14 $$ final int recordId = recordIterator.nextId()-->Line_25 $$ myRecordsTable.setCapacity(recordId, capacity)[ FD ]
Line_7 $$ File newDataFile = new File(path + ".storageData.backup")-->Line_9 $$ FileUtil.createIfDoesntExist(newDataFile)[ FD ]
Line_17 $$ if (size > 0) -->Line_20 $$ final long newaddr = newDataTable.allocateSpace(capacity)[ CD ]
Line_14 $$ final int recordId = recordIterator.nextId()-->Line_15 $$ final long addr = myRecordsTable.getAddress(recordId)[ FD ]
Line_11 $$ DataTable newDataTable = new DataTable(newDataFile, myPool)-->Line_20 $$ final long newaddr = newDataTable.allocateSpace(capacity)[ FD ]
Line_17 $$ if (size > 0) -->Line_21 $$ final byte[] bytes = new byte[size][ CD ]
Line_17 $$ if (size > 0) -->Line_22 $$ myDataTable.readBytes(addr, bytes)[ CD ]
Line_14 $$ final int recordId = recordIterator.nextId()-->Line_24 $$ myRecordsTable.setAddress(recordId, newaddr)[ FD ]
Line_17 $$ if (size > 0) -->Line_23 $$ newDataTable.writeBytes(newaddr, bytes)[ CD ]
Line_19 $$ final int capacity = myCapacityAllocationPolicy.calculateCapacity(size)-->Line_25 $$ myRecordsTable.setCapacity(recordId, capacity)[ FD ]
Line_7 $$ File newDataFile = new File(path + ".storageData.backup")-->Line_8 $$ FileUtil.delete(newDataFile)[ FD ]
Line_17 $$ if (size > 0) -->Line_19 $$ final int capacity = myCapacityAllocationPolicy.calculateCapacity(size)[ CD ]
Line_13 $$ while (recordIterator.hasNextId()) -->Line_15 $$ final long addr = myRecordsTable.getAddress(recordId)[ CD ]
Line_12 $$ RecordIdIterator recordIterator = myRecordsTable.createRecordIdIterator()-->Line_13 $$ while (recordIterator.hasNextId()) [ FD ]
