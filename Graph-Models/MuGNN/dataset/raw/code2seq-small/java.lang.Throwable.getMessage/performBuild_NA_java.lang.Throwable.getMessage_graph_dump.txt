Line_2 $$ protected final ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_30 $$ context.processMessage(new CompilerMessage(getPresentableName(), BuildMessage.Kind.ERROR, message, compiledClass.getSourceFile().getPath()))[ FD ]
Line_20 $$ if (instrumented != null) -->Line_24 $$ exitCode = ExitCode.OK[ CD ]
Line_4 $$ for (CompiledClass compiledClass : outputConsumer.getCompiledClasses().values()) -->Line_21 $$ compiledClass.setContent(instrumented)[ FD ]
Line_4 $$ for (CompiledClass compiledClass : outputConsumer.getCompiledClasses().values()) -->Line_8 $$ final BinaryContent originalContent = compiledClass.getContent()[ FD ]
Line_4 $$ for (CompiledClass compiledClass : outputConsumer.getCompiledClasses().values()) -->Line_23 $$ IS_INSTRUMENTED_KEY.set(compiledClass, Boolean.TRUE)[ FD ]
Line_20 $$ if (instrumented != null) -->Line_22 $$ finder.cleanCachedData(compiledClass.getClassName())[ CD ]
Line_9 $$ final ClassReader reader = new FailSafeClassReader(originalContent.getBuffer(), originalContent.getOffset(), originalContent.getLength())-->Line_19 $$ final BinaryContent instrumented = instrument(context, compiledClass, reader, writer, finder)[ FD ]
Line_29 $$ if (message != null) -->Line_30 $$ context.processMessage(new CompilerMessage(getPresentableName(), BuildMessage.Kind.ERROR, message, compiledClass.getSourceFile().getPath()))[ CD ]
Line_4 $$ for (CompiledClass compiledClass : outputConsumer.getCompiledClasses().values()) -->Line_22 $$ finder.cleanCachedData(compiledClass.getClassName())[ FD ]
Line_8 $$ final BinaryContent originalContent = compiledClass.getContent()-->Line_9 $$ final ClassReader reader = new FailSafeClassReader(originalContent.getBuffer(), originalContent.getOffset(), originalContent.getLength())[ FD ]
Line_20 $$ if (instrumented != null) -->Line_23 $$ IS_INSTRUMENTED_KEY.set(compiledClass, Boolean.TRUE)[ CD ]
Line_3 $$ ExitCode exitCode = ExitCode.NOTHING_DONE-->Line_24 $$ exitCode = ExitCode.OK[ FD ]
Line_16 $$ if (Utils.IS_TEST_MODE || LOG.isDebugEnabled()) -->Line_17 $$ LOG.info("instrumenting " + compiledClass + " by " + getClass())[ CD ]
Line_9 $$ final ClassReader reader = new FailSafeClassReader(originalContent.getBuffer(), originalContent.getOffset(), originalContent.getLength())-->Line_10 $$ final int version = getClassFileVersion(reader)[ FD ]
Line_10 $$ final int version = getClassFileVersion(reader)-->Line_14 $$ final ClassWriter writer = new InstrumenterClassWriter(reader, getAsmClassWriterFlags(version), finder)[ FD ]
Line_28 $$ final String message = e.getMessage()-->Line_29 $$ if (message != null) [ FD ]
Line_20 $$ if (instrumented != null) -->Line_21 $$ compiledClass.setContent(instrumented)[ CD ]
Line_14 $$ final ClassWriter writer = new InstrumenterClassWriter(reader, getAsmClassWriterFlags(version), finder)-->Line_19 $$ final BinaryContent instrumented = instrument(context, compiledClass, reader, writer, finder)[ FD ]
Line_2 $$ protected final ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_19 $$ final BinaryContent instrumented = instrument(context, compiledClass, reader, writer, finder)[ FD ]
Line_5 $$ if (Utils.IS_TEST_MODE || LOG.isDebugEnabled()) -->Line_6 $$ LOG.info("checking " + compiledClass + " by " + getClass())[ CD ]
Line_19 $$ final BinaryContent instrumented = instrument(context, compiledClass, reader, writer, finder)-->Line_20 $$ if (instrumented != null) [ FD ]
Line_4 $$ for (CompiledClass compiledClass : outputConsumer.getCompiledClasses().values()) -->Line_11 $$ if (IS_INSTRUMENTED_KEY.get(compiledClass, Boolean.FALSE) || !canInstrument(compiledClass, version)) [ FD ]
Line_2 $$ protected final ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_3 $$ ExitCode exitCode = ExitCode.NOTHING_DONE[ CD ]
Line_2 $$ protected final ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_32 $$ context.processMessage(new CompilerMessage(getPresentableName(), e))[ FD ]
Line_2 $$ protected final ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_4 $$ for (CompiledClass compiledClass : outputConsumer.getCompiledClasses().values()) [ FD ]
Line_2 $$ protected final ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_36 $$ return exitCode[ CD ]
Line_2 $$ protected final ExitCode performBuild(CompileContext context, ModuleChunk chunk, InstrumentationClassFinder finder, OutputConsumer outputConsumer) -->Line_22 $$ finder.cleanCachedData(compiledClass.getClassName())[ FD ]
Line_10 $$ final int version = getClassFileVersion(reader)-->Line_11 $$ if (IS_INSTRUMENTED_KEY.get(compiledClass, Boolean.FALSE) || !canInstrument(compiledClass, version)) [ FD ]
Line_4 $$ for (CompiledClass compiledClass : outputConsumer.getCompiledClasses().values()) -->Line_19 $$ final BinaryContent instrumented = instrument(context, compiledClass, reader, writer, finder)[ FD ]
Line_29 $$ if (message != null) -->Line_32 $$ context.processMessage(new CompilerMessage(getPresentableName(), e))[ CD ]
Line_4 $$ for (CompiledClass compiledClass : outputConsumer.getCompiledClasses().values()) -->Line_30 $$ context.processMessage(new CompilerMessage(getPresentableName(), BuildMessage.Kind.ERROR, message, compiledClass.getSourceFile().getPath()))[ FD ]
Line_19 $$ final BinaryContent instrumented = instrument(context, compiledClass, reader, writer, finder)-->Line_21 $$ compiledClass.setContent(instrumented)[ FD ]
