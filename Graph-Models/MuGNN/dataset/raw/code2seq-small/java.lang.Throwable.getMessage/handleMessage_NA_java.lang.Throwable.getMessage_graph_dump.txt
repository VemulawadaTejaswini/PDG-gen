Line_71 $$ if (buf.length() > 0) -->Line_72 $$ buf.append("\n")[ CD ]
Line_9 $$ if (responseType == JavacRemoteProto.Message.Response.Type.BUILD_MESSAGE) -->Line_11 $$ final JavacRemoteProto.Message.Response.CompileMessage.Kind messageKind = compileMessage.getKind()[ CD ]
Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) -->Line_27 $$ final File outputRootFile = outputRoot != null ? new File(outputRoot) : null[ CD ]
Line_42 $$ if (responseType == JavacRemoteProto.Message.Response.Type.SRC_FILE_LOADED) -->Line_43 $$ final JavacRemoteProto.Message.Response.OutputObject outputObject = response.getOutputObject()[ CD ]
Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) -->Line_24 $$ final JavacRemoteProto.Message.Response.OutputObject outputObject = response.getOutputObject()[ CD ]
Line_8 $$ final JavacRemoteProto.Message.Response.Type responseType = response.getResponseType()-->Line_9 $$ if (responseType == JavacRemoteProto.Message.Response.Type.BUILD_MESSAGE) [ FD ]
Line_64 $$ if (messageType == JavacRemoteProto.Message.Type.FAILURE) -->Line_67 $$ if (failure.hasDescription()) [ CD ]
Line_6 $$ if (messageType == JavacRemoteProto.Message.Type.RESPONSE) -->Line_8 $$ final JavacRemoteProto.Message.Response.Type responseType = response.getResponseType()[ CD ]
Line_52 $$ final Collection<String> staticImports = data.getStaticImportList()-->Line_53 $$ myDiagnosticSink.registerImports(className, imports, staticImports)[ FD ]
Line_32 $$ fileObjectContent = new BinaryContent(bytes, 0, bytes.length)-->Line_34 $$ fileObjectContent = null[ FD ]
Line_6 $$ if (messageType == JavacRemoteProto.Message.Type.RESPONSE) -->Line_42 $$ if (responseType == JavacRemoteProto.Message.Response.Type.SRC_FILE_LOADED) [ CD ]
Line_7 $$ final JavacRemoteProto.Message.Response response = msg.getResponse()-->Line_24 $$ final JavacRemoteProto.Message.Response.OutputObject outputObject = response.getOutputObject()[ FD ]
Line_66 $$ final StringBuilder buf = new StringBuilder()-->Line_76 $$ myDiagnosticSink.report(new PlainMessageDiagnostic(Diagnostic.Kind.ERROR, buf.toString()))[ FD ]
Line_12 $$ if (messageKind == JavacRemoteProto.Message.Response.CompileMessage.Kind.STD_OUT) -->Line_17 $$ final String sourceUri = compileMessage.hasSourceUri() ? compileMessage.getSourceUri() : null[ CD ]
Line_10 $$ final JavacRemoteProto.Message.Response.CompileMessage compileMessage = response.getCompileMessage()-->Line_14 $$ myDiagnosticSink.outputLineAvailable(compileMessage.getText())[ FD ]
Line_11 $$ final JavacRemoteProto.Message.Response.CompileMessage.Kind messageKind = compileMessage.getKind()-->Line_12 $$ if (messageKind == JavacRemoteProto.Message.Response.CompileMessage.Kind.STD_OUT) [ FD ]
Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) -->Line_37 $$ final URI srcUri = sourceUri != null ? URI.create(sourceUri) : null[ CD ]
Line_8 $$ final JavacRemoteProto.Message.Response.Type responseType = response.getResponseType()-->Line_48 $$ if (responseType == JavacRemoteProto.Message.Response.Type.CLASS_DATA) [ FD ]
Line_57 $$ if (response.hasCompletionStatus()) -->Line_58 $$ myTerminatedSuccessfully = response.getCompletionStatus()[ CD ]
Line_8 $$ final JavacRemoteProto.Message.Response.Type responseType = response.getResponseType()-->Line_56 $$ if (responseType == JavacRemoteProto.Message.Response.Type.BUILD_COMPLETED) [ FD ]
Line_13 $$ if (compileMessage.hasText()) -->Line_14 $$ myDiagnosticSink.outputLineAvailable(compileMessage.getText())[ CD ]
Line_17 $$ final String sourceUri = compileMessage.hasSourceUri() ? compileMessage.getSourceUri() : null-->Line_18 $$ final JavaFileObject srcFileObject = sourceUri != null ? new DummyJavaFileObject(URI.create(sourceUri)) : null[ FD ]
Line_4 $$ final JavacRemoteProto.Message msg = (JavacRemoteProto.Message) message-->Line_7 $$ final JavacRemoteProto.Message.Response response = msg.getResponse()[ FD ]
Line_66 $$ final StringBuilder buf = new StringBuilder()-->Line_71 $$ if (buf.length() > 0) [ FD ]
Line_24 $$ final JavacRemoteProto.Message.Response.OutputObject outputObject = response.getOutputObject()-->Line_29 $$ final ByteString content = outputObject.hasContent() ? outputObject.getContent() : null[ FD ]
Line_6 $$ if (messageType == JavacRemoteProto.Message.Type.RESPONSE) -->Line_7 $$ final JavacRemoteProto.Message.Response response = msg.getResponse()[ CD ]
Line_66 $$ final StringBuilder buf = new StringBuilder()-->Line_68 $$ buf.append(failure.getDescription())[ FD ]
Line_48 $$ if (responseType == JavacRemoteProto.Message.Response.Type.CLASS_DATA) -->Line_52 $$ final Collection<String> staticImports = data.getStaticImportList()[ CD ]
Line_56 $$ if (responseType == JavacRemoteProto.Message.Response.Type.BUILD_COMPLETED) -->Line_57 $$ if (response.hasCompletionStatus()) [ CD ]
Line_64 $$ if (messageType == JavacRemoteProto.Message.Type.FAILURE) -->Line_70 $$ if (failure.hasStacktrace()) [ CD ]
Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) -->Line_26 $$ final String outputRoot = outputObject.hasOutputRoot() ? outputObject.getOutputRoot() : null[ CD ]
Line_7 $$ final JavacRemoteProto.Message.Response response = msg.getResponse()-->Line_43 $$ final JavacRemoteProto.Message.Response.OutputObject outputObject = response.getOutputObject()[ FD ]
Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) -->Line_40 $$ return false[ CD ]
Line_44 $$ final File file = new File(outputObject.getFilePath())-->Line_45 $$ myDiagnosticSink.javaFileLoaded(file)[ FD ]
Line_12 $$ if (messageKind == JavacRemoteProto.Message.Response.CompileMessage.Kind.STD_OUT) -->Line_13 $$ if (compileMessage.hasText()) [ CD ]
Line_49 $$ final JavacRemoteProto.Message.Response.ClassData data = response.getClassData()-->Line_52 $$ final Collection<String> staticImports = data.getStaticImportList()[ FD ]
Line_24 $$ final JavacRemoteProto.Message.Response.OutputObject outputObject = response.getOutputObject()-->Line_38 $$ final OutputFileObject fileObject = new OutputFileObject(null, outputRootFile, outputObject.hasRelativePath() ? outputObject.getRelativePath() : null, new File(outputObject.getFilePath()), convertKind(kind), outputObject.hasClassName() ? outputObject.getClassName() : null, srcUri, myEncodingName, fileObjectContent)[ FD ]
Line_65 $$ final JavacRemoteProto.Message.Failure failure = msg.getFailure()-->Line_67 $$ if (failure.hasDescription()) [ FD ]
Line_28 $$ final BinaryContent fileObjectContent-->Line_32 $$ fileObjectContent = new BinaryContent(bytes, 0, bytes.length)[ FD ]
Line_42 $$ if (responseType == JavacRemoteProto.Message.Response.Type.SRC_FILE_LOADED) -->Line_45 $$ myDiagnosticSink.javaFileLoaded(file)[ CD ]
Line_50 $$ final String className = data.getClassName()-->Line_53 $$ myDiagnosticSink.registerImports(className, imports, staticImports)[ FD ]
Line_64 $$ if (messageType == JavacRemoteProto.Message.Type.FAILURE) -->Line_66 $$ final StringBuilder buf = new StringBuilder()[ CD ]
Line_67 $$ if (failure.hasDescription()) -->Line_68 $$ buf.append(failure.getDescription())[ CD ]
Line_29 $$ final ByteString content = outputObject.hasContent() ? outputObject.getContent() : null-->Line_31 $$ final byte[] bytes = content.toByteArray()[ FD ]
Line_10 $$ final JavacRemoteProto.Message.Response.CompileMessage compileMessage = response.getCompileMessage()-->Line_17 $$ final String sourceUri = compileMessage.hasSourceUri() ? compileMessage.getSourceUri() : null[ FD ]
Line_42 $$ if (responseType == JavacRemoteProto.Message.Response.Type.SRC_FILE_LOADED) -->Line_44 $$ final File file = new File(outputObject.getFilePath())[ CD ]
Line_48 $$ if (responseType == JavacRemoteProto.Message.Response.Type.CLASS_DATA) -->Line_53 $$ myDiagnosticSink.registerImports(className, imports, staticImports)[ CD ]
Line_66 $$ final StringBuilder buf = new StringBuilder()-->Line_72 $$ buf.append("\n")[ FD ]
Line_7 $$ final JavacRemoteProto.Message.Response response = msg.getResponse()-->Line_10 $$ final JavacRemoteProto.Message.Response.CompileMessage compileMessage = response.getCompileMessage()[ FD ]
Line_10 $$ final JavacRemoteProto.Message.Response.CompileMessage compileMessage = response.getCompileMessage()-->Line_11 $$ final JavacRemoteProto.Message.Response.CompileMessage.Kind messageKind = compileMessage.getKind()[ FD ]
Line_5 $$ final JavacRemoteProto.Message.Type messageType = msg.getMessageType()-->Line_64 $$ if (messageType == JavacRemoteProto.Message.Type.FAILURE) [ FD ]
Line_7 $$ final JavacRemoteProto.Message.Response response = msg.getResponse()-->Line_57 $$ if (response.hasCompletionStatus()) [ FD ]
Line_8 $$ final JavacRemoteProto.Message.Response.Type responseType = response.getResponseType()-->Line_42 $$ if (responseType == JavacRemoteProto.Message.Response.Type.SRC_FILE_LOADED) [ FD ]
Line_8 $$ final JavacRemoteProto.Message.Response.Type responseType = response.getResponseType()-->Line_62 $$ throw new Exception("Unsupported response type: " + responseType.name())[ FD ]
Line_30 $$ if (content != null) -->Line_31 $$ final byte[] bytes = content.toByteArray()[ CD ]
Line_12 $$ if (messageKind == JavacRemoteProto.Message.Response.CompileMessage.Kind.STD_OUT) -->Line_18 $$ final JavaFileObject srcFileObject = sourceUri != null ? new DummyJavaFileObject(URI.create(sourceUri)) : null[ CD ]
Line_24 $$ final JavacRemoteProto.Message.Response.OutputObject outputObject = response.getOutputObject()-->Line_36 $$ final String sourceUri = outputObject.hasSourceUri() ? outputObject.getSourceUri() : null[ FD ]
Line_70 $$ if (failure.hasStacktrace()) -->Line_71 $$ if (buf.length() > 0) [ CD ]
Line_25 $$ final JavacRemoteProto.Message.Response.OutputObject.Kind kind = outputObject.getKind()-->Line_38 $$ final OutputFileObject fileObject = new OutputFileObject(null, outputRootFile, outputObject.hasRelativePath() ? outputObject.getRelativePath() : null, new File(outputObject.getFilePath()), convertKind(kind), outputObject.hasClassName() ? outputObject.getClassName() : null, srcUri, myEncodingName, fileObjectContent)[ FD ]
Line_9 $$ if (responseType == JavacRemoteProto.Message.Response.Type.BUILD_MESSAGE) -->Line_12 $$ if (messageKind == JavacRemoteProto.Message.Response.CompileMessage.Kind.STD_OUT) [ CD ]
Line_6 $$ if (messageType == JavacRemoteProto.Message.Type.RESPONSE) -->Line_48 $$ if (responseType == JavacRemoteProto.Message.Response.Type.CLASS_DATA) [ CD ]
Line_65 $$ final JavacRemoteProto.Message.Failure failure = msg.getFailure()-->Line_68 $$ buf.append(failure.getDescription())[ FD ]
Line_48 $$ if (responseType == JavacRemoteProto.Message.Response.Type.CLASS_DATA) -->Line_50 $$ final String className = data.getClassName()[ CD ]
Line_64 $$ if (messageType == JavacRemoteProto.Message.Type.FAILURE) -->Line_76 $$ myDiagnosticSink.report(new PlainMessageDiagnostic(Diagnostic.Kind.ERROR, buf.toString()))[ CD ]
Line_64 $$ if (messageType == JavacRemoteProto.Message.Type.FAILURE) -->Line_65 $$ final JavacRemoteProto.Message.Failure failure = msg.getFailure()[ CD ]
Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) -->Line_39 $$ myOutputSink.save(fileObject)[ CD ]
Line_56 $$ if (responseType == JavacRemoteProto.Message.Response.Type.BUILD_COMPLETED) -->Line_60 $$ return true[ CD ]
Line_4 $$ final JavacRemoteProto.Message msg = (JavacRemoteProto.Message) message-->Line_65 $$ final JavacRemoteProto.Message.Failure failure = msg.getFailure()[ FD ]
Line_65 $$ final JavacRemoteProto.Message.Failure failure = msg.getFailure()-->Line_70 $$ if (failure.hasStacktrace()) [ FD ]
Line_48 $$ if (responseType == JavacRemoteProto.Message.Response.Type.CLASS_DATA) -->Line_54 $$ return false[ CD ]
Line_38 $$ final OutputFileObject fileObject = new OutputFileObject(null, outputRootFile, outputObject.hasRelativePath() ? outputObject.getRelativePath() : null, new File(outputObject.getFilePath()), convertKind(kind), outputObject.hasClassName() ? outputObject.getClassName() : null, srcUri, myEncodingName, fileObjectContent)-->Line_39 $$ myOutputSink.save(fileObject)[ FD ]
Line_17 $$ final String sourceUri = compileMessage.hasSourceUri() ? compileMessage.getSourceUri() : null-->Line_37 $$ final URI srcUri = sourceUri != null ? URI.create(sourceUri) : null[ FD ]
Line_24 $$ final JavacRemoteProto.Message.Response.OutputObject outputObject = response.getOutputObject()-->Line_26 $$ final String outputRoot = outputObject.hasOutputRoot() ? outputObject.getOutputRoot() : null[ FD ]
Line_48 $$ if (responseType == JavacRemoteProto.Message.Response.Type.CLASS_DATA) -->Line_49 $$ final JavacRemoteProto.Message.Response.ClassData data = response.getClassData()[ CD ]
Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) -->Line_25 $$ final JavacRemoteProto.Message.Response.OutputObject.Kind kind = outputObject.getKind()[ CD ]
Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) -->Line_29 $$ final ByteString content = outputObject.hasContent() ? outputObject.getContent() : null[ CD ]
Line_30 $$ if (content != null) -->Line_34 $$ fileObjectContent = null[ CD ]
Line_66 $$ final StringBuilder buf = new StringBuilder()-->Line_74 $$ buf.append(failure.getStacktrace())[ FD ]
Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) -->Line_30 $$ if (content != null) [ CD ]
Line_30 $$ if (content != null) -->Line_32 $$ fileObjectContent = new BinaryContent(bytes, 0, bytes.length)[ CD ]
Line_8 $$ final JavacRemoteProto.Message.Response.Type responseType = response.getResponseType()-->Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) [ FD ]
Line_12 $$ if (messageKind == JavacRemoteProto.Message.Response.CompileMessage.Kind.STD_OUT) -->Line_19 $$ myDiagnosticSink.report(new DummyDiagnostic(convertKind(messageKind), srcFileObject, compileMessage))[ CD ]
Line_7 $$ final JavacRemoteProto.Message.Response response = msg.getResponse()-->Line_8 $$ final JavacRemoteProto.Message.Response.Type responseType = response.getResponseType()[ FD ]
Line_51 $$ final Collection<String> imports = data.getImportStatementList()-->Line_53 $$ myDiagnosticSink.registerImports(className, imports, staticImports)[ FD ]
Line_28 $$ final BinaryContent fileObjectContent-->Line_34 $$ fileObjectContent = null[ FD ]
Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) -->Line_38 $$ final OutputFileObject fileObject = new OutputFileObject(null, outputRootFile, outputObject.hasRelativePath() ? outputObject.getRelativePath() : null, new File(outputObject.getFilePath()), convertKind(kind), outputObject.hasClassName() ? outputObject.getClassName() : null, srcUri, myEncodingName, fileObjectContent)[ CD ]
Line_65 $$ final JavacRemoteProto.Message.Failure failure = msg.getFailure()-->Line_74 $$ buf.append(failure.getStacktrace())[ FD ]
Line_10 $$ final JavacRemoteProto.Message.Response.CompileMessage compileMessage = response.getCompileMessage()-->Line_13 $$ if (compileMessage.hasText()) [ FD ]
Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) -->Line_28 $$ final BinaryContent fileObjectContent[ CD ]
Line_6 $$ if (messageType == JavacRemoteProto.Message.Type.RESPONSE) -->Line_23 $$ if (responseType == JavacRemoteProto.Message.Response.Type.OUTPUT_OBJECT) [ CD ]
Line_11 $$ final JavacRemoteProto.Message.Response.CompileMessage.Kind messageKind = compileMessage.getKind()-->Line_19 $$ myDiagnosticSink.report(new DummyDiagnostic(convertKind(messageKind), srcFileObject, compileMessage))[ FD ]
Line_5 $$ final JavacRemoteProto.Message.Type messageType = msg.getMessageType()-->Line_79 $$ throw new Exception("Unsupported message type: " + messageType.name())[ FD ]
Line_9 $$ if (responseType == JavacRemoteProto.Message.Response.Type.BUILD_MESSAGE) -->Line_10 $$ final JavacRemoteProto.Message.Response.CompileMessage compileMessage = response.getCompileMessage()[ CD ]
Line_29 $$ final ByteString content = outputObject.hasContent() ? outputObject.getContent() : null-->Line_30 $$ if (content != null) [ FD ]
Line_24 $$ final JavacRemoteProto.Message.Response.OutputObject outputObject = response.getOutputObject()-->Line_44 $$ final File file = new File(outputObject.getFilePath())[ FD ]
Line_6 $$ if (messageType == JavacRemoteProto.Message.Type.RESPONSE) -->Line_56 $$ if (responseType == JavacRemoteProto.Message.Response.Type.BUILD_COMPLETED) [ CD ]
Line_5 $$ final JavacRemoteProto.Message.Type messageType = msg.getMessageType()-->Line_6 $$ if (messageType == JavacRemoteProto.Message.Type.RESPONSE) [ FD ]
Line_42 $$ if (responseType == JavacRemoteProto.Message.Response.Type.SRC_FILE_LOADED) -->Line_46 $$ return false[ CD ]
Line_6 $$ if (messageType == JavacRemoteProto.Message.Type.RESPONSE) -->Line_9 $$ if (responseType == JavacRemoteProto.Message.Response.Type.BUILD_MESSAGE) [ CD ]
Line_7 $$ final JavacRemoteProto.Message.Response response = msg.getResponse()-->Line_49 $$ final JavacRemoteProto.Message.Response.ClassData data = response.getClassData()[ FD ]
Line_4 $$ final JavacRemoteProto.Message msg = (JavacRemoteProto.Message) message-->Line_5 $$ final JavacRemoteProto.Message.Type messageType = msg.getMessageType()[ FD ]
Line_9 $$ if (responseType == JavacRemoteProto.Message.Response.Type.BUILD_MESSAGE) -->Line_21 $$ return false[ CD ]
Line_7 $$ final JavacRemoteProto.Message.Response response = msg.getResponse()-->Line_58 $$ myTerminatedSuccessfully = response.getCompletionStatus()[ FD ]
Line_24 $$ final JavacRemoteProto.Message.Response.OutputObject outputObject = response.getOutputObject()-->Line_25 $$ final JavacRemoteProto.Message.Response.OutputObject.Kind kind = outputObject.getKind()[ FD ]
Line_70 $$ if (failure.hasStacktrace()) -->Line_74 $$ buf.append(failure.getStacktrace())[ CD ]
Line_49 $$ final JavacRemoteProto.Message.Response.ClassData data = response.getClassData()-->Line_51 $$ final Collection<String> imports = data.getImportStatementList()[ FD ]
Line_64 $$ if (messageType == JavacRemoteProto.Message.Type.FAILURE) -->Line_77 $$ return true[ CD ]
Line_49 $$ final JavacRemoteProto.Message.Response.ClassData data = response.getClassData()-->Line_50 $$ final String className = data.getClassName()[ FD ]
Line_48 $$ if (responseType == JavacRemoteProto.Message.Response.Type.CLASS_DATA) -->Line_51 $$ final Collection<String> imports = data.getImportStatementList()[ CD ]
