Line_67 $$ final String expected = (n / p.value) + " " + p.symbol-->Line_68 $$ assertEquals("n=" + n, expected, long2String(n, null, 2))[ FD ]
Line_4 $$ long m = 1024-->Line_8 $$ m *= 1024[ FD ]
Line_49 $$ for (int n = 1; n < TraditionalBinaryPrefix.KILO.value; n++) -->Line_73 $$ assertEquals("n=" + n, expected, long2String(n, null, decimalPlace))[ FD ]
Line_39 $$ String invalidFormatNumStr = "10kb"-->Line_42 $$ string2long(invalidFormatNumStr)[ FD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_4 $$ long m = 1024[ CD ]
Line_49 $$ for (int n = 1; n < TraditionalBinaryPrefix.KILO.value; n++) -->Line_78 $$ assertEquals("n=" + n, expected, long2String(n, null, decimalPlace))[ FD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_21 $$ assertEquals(11258999068426240L, string2long("10p"))[ CD ]
Line_61 $$ for (int decimalPlace = 0; decimalPlace < zeros.length; decimalPlace++) -->Line_78 $$ assertEquals("n=" + n, expected, long2String(n, null, decimalPlace))[ FD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_85 $$ assertEquals("2 M", long2String(3L << 19, null, 0))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_87 $$ assertEquals("0 B", StringUtils.byteDesc(0))[ CD ]
Line_63 $$ for (int e = 11; e < Long.SIZE - 1; e++) -->Line_67 $$ final String expected = (n / p.value) + " " + p.symbol[ CD ]
Line_48 $$ for (int decimalPlace = 0; decimalPlace < 2; decimalPlace++) -->Line_49 $$ for (int n = 1; n < TraditionalBinaryPrefix.KILO.value; n++) [ CD ]
Line_63 $$ for (int e = 11; e < Long.SIZE - 1; e++) -->Line_64 $$ final TraditionalBinaryPrefix p = TraditionalBinaryPrefix.values()[e / 10 - 1][ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_100 $$ assertEquals("0.5430%", StringUtils.formatPercent(0.00543, 4))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_39 $$ String invalidFormatNumStr = "10kb"[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_86 $$ assertEquals("3 G", long2String(3L << 30, null, 2))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_93 $$ assertEquals("10%", StringUtils.formatPercent(0.1, 0))[ CD ]
Line_49 $$ for (int n = 1; n < TraditionalBinaryPrefix.KILO.value; n++) -->Line_51 $$ assertEquals(-n + "", long2String(-n, null, decimalPlace))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_14 $$ assertEquals(-1259520L, string2long("-1230K"))[ CD ]
Line_49 $$ for (int n = 1; n < TraditionalBinaryPrefix.KILO.value; n++) -->Line_51 $$ assertEquals(-n + "", long2String(-n, null, decimalPlace))[ FD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_18 $$ assertEquals(-956703965184L, string2long("-891G"))[ CD ]
Line_63 $$ for (int e = 11; e < Long.SIZE - 1; e++) -->Line_78 $$ assertEquals("n=" + n, expected, long2String(n, null, decimalPlace))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_94 $$ assertEquals("10.0%", StringUtils.formatPercent(0.1, 1))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_40 $$ char invalidPrefix = 'b'[ CD ]
Line_61 $$ for (int decimalPlace = 0; decimalPlace < zeros.length; decimalPlace++) -->Line_63 $$ for (int e = 11; e < Long.SIZE - 1; e++) [ CD ]
Line_4 $$ long m = 1024-->Line_7 $$ assertEquals(m, string2long(1 + s))[ FD ]
Line_63 $$ for (int e = 11; e < Long.SIZE - 1; e++) -->Line_66 $$ final long n = 1L << e[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_99 $$ assertEquals("0.543%", StringUtils.formatPercent(0.00543, 3))[ CD ]
Line_63 $$ for (int e = 11; e < Long.SIZE - 1; e++) -->Line_73 $$ assertEquals("n=" + n, expected, long2String(n, null, decimalPlace))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_48 $$ for (int decimalPlace = 0; decimalPlace < 2; decimalPlace++) [ CD ]
Line_32 $$ String tooSmallNumStr = "-10e"-->Line_34 $$ string2long(tooSmallNumStr)[ FD ]
Line_49 $$ for (int n = 1; n < TraditionalBinaryPrefix.KILO.value; n++) -->Line_50 $$ assertEquals(n + "", long2String(n, null, decimalPlace))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_89 $$ assertEquals("1 KB", StringUtils.byteDesc(1024))[ CD ]
Line_63 $$ for (int e = 11; e < Long.SIZE - 1; e++) -->Line_68 $$ assertEquals("n=" + n, expected, long2String(n, null, 2))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_58 $$ assertEquals("-8 E", long2String(Long.MIN_VALUE, null, 2))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_61 $$ for (int decimalPlace = 0; decimalPlace < zeros.length; decimalPlace++) [ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_97 $$ assertEquals("0.5%", StringUtils.formatPercent(0.00543, 1))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_84 $$ assertEquals("1.50 M", long2String(3L << 19, null, 2))[ CD ]
Line_48 $$ for (int decimalPlace = 0; decimalPlace < 2; decimalPlace++) -->Line_73 $$ assertEquals("n=" + n, expected, long2String(n, null, decimalPlace))[ FD ]
Line_66 $$ final long n = 1L << e-->Line_78 $$ assertEquals("n=" + n, expected, long2String(n, null, decimalPlace))[ FD ]
Line_61 $$ for (int decimalPlace = 0; decimalPlace < zeros.length; decimalPlace++) -->Line_62 $$ final String trailingZeros = zeros[decimalPlace][ CD ]
Line_49 $$ for (int n = 1; n < TraditionalBinaryPrefix.KILO.value; n++) -->Line_50 $$ assertEquals(n + "", long2String(n, null, decimalPlace))[ FD ]
Line_48 $$ for (int decimalPlace = 0; decimalPlace < 2; decimalPlace++) -->Line_51 $$ assertEquals(-n + "", long2String(-n, null, decimalPlace))[ FD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_88 $$ assertEquals("-100 B", StringUtils.byteDesc(-100))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_57 $$ assertEquals("8.00 E", long2String(Long.MAX_VALUE - 1, null, 2))[ CD ]
Line_25 $$ String tooLargeNumStr = "10e"-->Line_27 $$ string2long(tooLargeNumStr)[ FD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_90 $$ assertEquals("1.50 KB", StringUtils.byteDesc(3L << 9))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_3 $$ String[] symbol = [ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_96 $$ assertEquals("1%", StringUtils.formatPercent(0.00543, 0))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_25 $$ String tooLargeNumStr = "10e"[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_56 $$ assertEquals("8.00 E", long2String(Long.MAX_VALUE, null, 2))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_91 $$ assertEquals("1.50 MB", StringUtils.byteDesc(3L << 19))[ CD ]
Line_61 $$ for (int decimalPlace = 0; decimalPlace < zeros.length; decimalPlace++) -->Line_73 $$ assertEquals("n=" + n, expected, long2String(n, null, decimalPlace))[ FD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_32 $$ String tooSmallNumStr = "-10e"[ CD ]
Line_48 $$ for (int decimalPlace = 0; decimalPlace < 2; decimalPlace++) -->Line_78 $$ assertEquals("n=" + n, expected, long2String(n, null, decimalPlace))[ FD ]
Line_48 $$ for (int decimalPlace = 0; decimalPlace < 2; decimalPlace++) -->Line_54 $$ assertEquals("-1 K", long2String(-1L << 10, null, decimalPlace))[ FD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_19 $$ assertEquals(501377302265856L, string2long("456t"))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_92 $$ assertEquals("3 GB", StringUtils.byteDesc(3L << 30))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_83 $$ assertEquals("1.5 K", long2String(3L << 9, null, 1))[ CD ]
Line_48 $$ for (int decimalPlace = 0; decimalPlace < 2; decimalPlace++) -->Line_53 $$ assertEquals("1 K", long2String(1L << 10, null, decimalPlace))[ CD ]
Line_48 $$ for (int decimalPlace = 0; decimalPlace < 2; decimalPlace++) -->Line_53 $$ assertEquals("1 K", long2String(1L << 10, null, decimalPlace))[ FD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_47 $$ assertEquals("0", long2String(0, null, 2))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_11 $$ assertEquals(1024L, string2long("1k"))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_22 $$ assertEquals(-11258999068426240L, string2long("-10P"))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_24 $$ assertEquals(-1152921504606846976L, string2long("-1E"))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_95 $$ assertEquals("10.00%", StringUtils.formatPercent(0.1, 2))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_59 $$ assertEquals("-8.00 E", long2String(Long.MIN_VALUE + 1, null, 2))[ CD ]
Line_66 $$ final long n = 1L << e-->Line_68 $$ assertEquals("n=" + n, expected, long2String(n, null, 2))[ FD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_12 $$ assertEquals(-1024L, string2long("-1k"))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_10 $$ assertEquals(0L, string2long("0"))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_23 $$ assertEquals(1152921504606846976L, string2long("1e"))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_82 $$ assertEquals("1.50 K", long2String(3L << 9, null, 2))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_13 $$ assertEquals(1259520L, string2long("1230K"))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_16 $$ assertEquals(-104857600L, string2long("-100M"))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_15 $$ assertEquals(104857600L, string2long("100m"))[ CD ]
Line_66 $$ final long n = 1L << e-->Line_73 $$ assertEquals("n=" + n, expected, long2String(n, null, decimalPlace))[ FD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_20 $$ assertEquals(-501377302265856L, string2long("-456T"))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_60 $$ final String[] zeros = [ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_17 $$ assertEquals(956703965184L, string2long("891g"))[ CD ]
Line_48 $$ for (int decimalPlace = 0; decimalPlace < 2; decimalPlace++) -->Line_50 $$ assertEquals(n + "", long2String(n, null, decimalPlace))[ FD ]
Line_49 $$ for (int n = 1; n < TraditionalBinaryPrefix.KILO.value; n++) -->Line_68 $$ assertEquals("n=" + n, expected, long2String(n, null, 2))[ FD ]
Line_67 $$ final String expected = (n / p.value) + " " + p.symbol-->Line_78 $$ assertEquals("n=" + n, expected, long2String(n, null, decimalPlace))[ FD ]
Line_67 $$ final String expected = (n / p.value) + " " + p.symbol-->Line_73 $$ assertEquals("n=" + n, expected, long2String(n, null, decimalPlace))[ FD ]
Line_48 $$ for (int decimalPlace = 0; decimalPlace < 2; decimalPlace++) -->Line_54 $$ assertEquals("-1 K", long2String(-1L << 10, null, decimalPlace))[ CD ]
Line_2 $$ public void testTraditionalBinaryPrefix() throws Exception -->Line_98 $$ assertEquals("0.54%", StringUtils.formatPercent(0.00543, 2))[ CD ]
Line_48 $$ for (int decimalPlace = 0; decimalPlace < 2; decimalPlace++) -->Line_61 $$ for (int decimalPlace = 0; decimalPlace < zeros.length; decimalPlace++) [ FD ]
