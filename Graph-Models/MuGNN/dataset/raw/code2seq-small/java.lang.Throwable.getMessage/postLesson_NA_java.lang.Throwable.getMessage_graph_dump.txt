Line_3 $$ final HttpPost request = new HttpPost(stepicApiUrl + "lessons")-->Line_7 $$ setHeaders(request, "application/json")[ FD ]
Line_2 $$ public static int postLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_7 $$ setHeaders(request, "application/json")[ CD ]
Line_3 $$ final HttpPost request = new HttpPost(stepicApiUrl + "lessons")-->Line_11 $$ final CloseableHttpResponse response = ourClient.execute(request)[ FD ]
Line_2 $$ public static int postLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_29 $$ return -1[ CD ]
Line_12 $$ final HttpEntity responseEntity = response.getEntity()-->Line_13 $$ final String responseString = responseEntity != null ? EntityUtils.toString(responseEntity) : ""[ FD ]
Line_2 $$ public static int postLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_21 $$ for (Task task : lesson.getTaskList()) [ FD ]
Line_13 $$ final String responseString = responseEntity != null ? EntityUtils.toString(responseEntity) : ""-->Line_19 $$ final Lesson postedLesson = new Gson().fromJson(responseString, Course.class).getLessons().get(0)[ FD ]
Line_11 $$ final CloseableHttpResponse response = ourClient.execute(request)-->Line_14 $$ final StatusLine line = response.getStatusLine()[ FD ]
Line_15 $$ if (line.getStatusCode() != HttpStatus.SC_CREATED) -->Line_16 $$ LOG.error("Failed to push " + responseString)[ CD ]
Line_2 $$ public static int postLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_4 $$ if (ourClient == null) [ CD ]
Line_2 $$ public static int postLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_9 $$ request.setEntity(new StringEntity(requestBody, ContentType.APPLICATION_JSON))[ CD ]
Line_11 $$ final CloseableHttpResponse response = ourClient.execute(request)-->Line_12 $$ final HttpEntity responseEntity = response.getEntity()[ FD ]
Line_15 $$ if (line.getStatusCode() != HttpStatus.SC_CREATED) -->Line_17 $$ return 0[ CD ]
Line_2 $$ public static int postLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_8 $$ String requestBody = new Gson().toJson(new LessonWrapper(lesson))[ CD ]
Line_14 $$ final StatusLine line = response.getStatusLine()-->Line_15 $$ if (line.getStatusCode() != HttpStatus.SC_CREATED) [ FD ]
Line_21 $$ for (Task task : lesson.getTaskList()) -->Line_23 $$ postTask(project, task, postedLesson.id)[ FD ]
Line_2 $$ public static int postLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_23 $$ postTask(project, task, postedLesson.id)[ FD ]
Line_4 $$ if (ourClient == null) -->Line_5 $$ login()[ CD ]
Line_2 $$ public static int postLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_22 $$ indicator.checkCanceled()[ FD ]
Line_2 $$ public static int postLesson(Project project, @NotNull final Lesson lesson, ProgressIndicator indicator) -->Line_3 $$ final HttpPost request = new HttpPost(stepicApiUrl + "lessons")[ CD ]
Line_3 $$ final HttpPost request = new HttpPost(stepicApiUrl + "lessons")-->Line_9 $$ request.setEntity(new StringEntity(requestBody, ContentType.APPLICATION_JSON))[ FD ]
