Line_2 $$ private void doSimpleTest(final String className, final String superclassName, final String expectedError, final boolean sameFile, boolean asAbstract, final String... membersName) throws Exception -->Line_24 $$ assertEquals(expectedError, e.getMessage())[ FD ]
Line_6 $$ final PyClass clazz = findClass(className)-->Line_10 $$ final PyMemberInfo<PyElement> memberInfo = MembersManager.findMember(clazz, member)[ FD ]
Line_14 $$ new WriteCommandAction.Simple(myFixture.getProject()) -->Line_17 $$ PyExtractSuperclassHelper.extractSuperclass(clazz, members, superclassName, url)[ CD ]
Line_2 $$ private void doSimpleTest(final String className, final String superclassName, final String expectedError, final boolean sameFile, boolean asAbstract, final String... membersName) throws Exception -->Line_9 $$ final PyElement member = findMember(className, memberName)[ FD ]
Line_2 $$ private void doSimpleTest(final String className, final String superclassName, final String expectedError, final boolean sameFile, boolean asAbstract, final String... membersName) throws Exception -->Line_6 $$ final PyClass clazz = findClass(className)[ FD ]
Line_8 $$ for (String memberName : membersName) -->Line_9 $$ final PyElement member = findMember(className, memberName)[ FD ]
Line_2 $$ private void doSimpleTest(final String className, final String superclassName, final String expectedError, final boolean sameFile, boolean asAbstract, final String... membersName) throws Exception -->Line_17 $$ PyExtractSuperclassHelper.extractSuperclass(clazz, members, superclassName, url)[ FD ]
Line_9 $$ final PyElement member = findMember(className, memberName)-->Line_10 $$ final PyMemberInfo<PyElement> memberInfo = MembersManager.findMember(clazz, member)[ FD ]
Line_10 $$ final PyMemberInfo<PyElement> memberInfo = MembersManager.findMember(clazz, member)-->Line_11 $$ memberInfo.setToAbstract(asAbstract)[ FD ]
Line_7 $$ final List<PyMemberInfo<PyElement>> members = new ArrayList<PyMemberInfo<PyElement>>()-->Line_17 $$ PyExtractSuperclassHelper.extractSuperclass(clazz, members, superclassName, url)[ FD ]
Line_14 $$ new WriteCommandAction.Simple(myFixture.getProject()) -->Line_16 $$ final String url = sameFile ? myFixture.getFile().getVirtualFile().getUrl() : myFixture.getFile().getVirtualFile().getParent().getUrl()[ CD ]
Line_6 $$ final PyClass clazz = findClass(className)-->Line_17 $$ PyExtractSuperclassHelper.extractSuperclass(clazz, members, superclassName, url)[ FD ]
Line_2 $$ private void doSimpleTest(final String className, final String superclassName, final String expectedError, final boolean sameFile, boolean asAbstract, final String... membersName) throws Exception -->Line_22 $$ if (expectedError == null)[ FD ]
Line_2 $$ private void doSimpleTest(final String className, final String superclassName, final String expectedError, final boolean sameFile, boolean asAbstract, final String... membersName) throws Exception -->Line_11 $$ memberInfo.setToAbstract(asAbstract)[ FD ]
Line_16 $$ final String url = sameFile ? myFixture.getFile().getVirtualFile().getUrl() : myFixture.getFile().getVirtualFile().getParent().getUrl()-->Line_17 $$ PyExtractSuperclassHelper.extractSuperclass(clazz, members, superclassName, url)[ FD ]
Line_10 $$ final PyMemberInfo<PyElement> memberInfo = MembersManager.findMember(clazz, member)-->Line_12 $$ members.add(memberInfo)[ FD ]
Line_7 $$ final List<PyMemberInfo<PyElement>> members = new ArrayList<PyMemberInfo<PyElement>>()-->Line_12 $$ members.add(memberInfo)[ FD ]
