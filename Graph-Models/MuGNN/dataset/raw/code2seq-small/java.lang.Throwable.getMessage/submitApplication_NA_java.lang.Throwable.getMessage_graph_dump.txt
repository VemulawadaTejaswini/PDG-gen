Line_8 $$ if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) -->Line_9 $$ String msg = "The default static user cannot carry out this operation."[ CD ]
Line_2 $$ public Response submitApplication(ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException -->Line_12 $$ ApplicationSubmissionContext appContext = createAppSubmissionContext(newApp)[ CD ]
Line_2 $$ public Response submitApplication(ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException -->Line_4 $$ UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true)[ CD ]
Line_4 $$ UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true)-->Line_8 $$ if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) [ FD ]
Line_15 $$ callerUGI.doAs(new PrivilegedExceptionAction<SubmitApplicationResponse>() -->Line_17 $$ return rm.getClientRMService().submitApplication(req)[ CD ]
Line_13 $$ final SubmitApplicationRequest req = SubmitApplicationRequest.newInstance(appContext)-->Line_17 $$ return rm.getClientRMService().submitApplication(req)[ FD ]
Line_2 $$ public Response submitApplication(ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException -->Line_8 $$ if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) [ CD ]
Line_2 $$ public Response submitApplication(ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException -->Line_13 $$ final SubmitApplicationRequest req = SubmitApplicationRequest.newInstance(appContext)[ CD ]
Line_2 $$ public Response submitApplication(ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException -->Line_4 $$ UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true)[ FD ]
Line_8 $$ if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) -->Line_10 $$ return Response.status(Status.FORBIDDEN).entity(msg).build()[ CD ]
Line_4 $$ UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true)-->Line_15 $$ callerUGI.doAs(new PrivilegedExceptionAction<SubmitApplicationResponse>() [ FD ]
Line_2 $$ public Response submitApplication(ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException -->Line_28 $$ return Response.status(Status.ACCEPTED).header(HttpHeaders.LOCATION, url).build()[ CD ]
Line_2 $$ public Response submitApplication(ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException -->Line_12 $$ ApplicationSubmissionContext appContext = createAppSubmissionContext(newApp)[ FD ]
Line_2 $$ public Response submitApplication(ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException -->Line_27 $$ String url = hsr.getRequestURL() + "/" + newApp.getApplicationId()[ FD ]
Line_2 $$ public Response submitApplication(ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException -->Line_3 $$ init()[ CD ]
Line_9 $$ String msg = "The default static user cannot carry out this operation."-->Line_10 $$ return Response.status(Status.FORBIDDEN).entity(msg).build()[ FD ]
Line_4 $$ UserGroupInformation callerUGI = getCallerUserGroupInformation(hsr, true)-->Line_5 $$ if (callerUGI == null) [ FD ]
Line_2 $$ public Response submitApplication(ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr) throws AuthorizationException, IOException, InterruptedException -->Line_5 $$ if (callerUGI == null) [ CD ]
Line_12 $$ ApplicationSubmissionContext appContext = createAppSubmissionContext(newApp)-->Line_13 $$ final SubmitApplicationRequest req = SubmitApplicationRequest.newInstance(appContext)[ FD ]
