Line_32 $$ while (it.hasNext()) -->Line_35 $$ handleEvent(ev)[ CD ]
Line_21 $$ for (MetaInfo mi : fileMap.values()) -->Line_42 $$ if (mi != null && mi.isWriterActive()) [ FD ]
Line_2 $$ protected void serviceStop() throws Exception -->Line_58 $$ LOG.info("Stopped JobHistoryEventHandler. super.stop()")[ CD ]
Line_37 $$ Iterator<JobId> jobIt = fileMap.keySet().iterator()-->Line_39 $$ while (jobIt.hasNext()) [ FD ]
Line_31 $$ Iterator<JobHistoryEvent> it = eventQueue.iterator()-->Line_32 $$ while (it.hasNext()) [ FD ]
Line_2 $$ protected void serviceStop() throws Exception -->Line_37 $$ Iterator<JobId> jobIt = fileMap.keySet().iterator()[ CD ]
Line_2 $$ protected void serviceStop() throws Exception -->Line_3 $$ LOG.info("Stopping JobHistoryEventHandler. " + "Size of the outstanding queue size is " + eventQueue.size())[ CD ]
Line_2 $$ protected void serviceStop() throws Exception -->Line_32 $$ while (it.hasNext()) [ CD ]
Line_39 $$ while (jobIt.hasNext()) -->Line_41 $$ MetaInfo mi = fileMap.get(toClose)[ CD ]
Line_21 $$ for (MetaInfo mi : fileMap.values()) -->Line_53 $$ mi.closeWriter()[ FD ]
Line_42 $$ if (mi != null && mi.isWriterActive()) -->Line_45 $$ JobUnsuccessfulCompletionEvent jucEvent = new JobUnsuccessfulCompletionEvent(TypeConverter.fromYarn(toClose), System.currentTimeMillis(), job.getCompletedMaps(), job.getCompletedReduces(), createJobStateForJobUnsuccessfulCompletionEvent(mi.getForcedJobStateOnShutDown()), job.getDiagnostics())[ CD ]
Line_42 $$ if (mi != null && mi.isWriterActive()) -->Line_44 $$ final Job job = context.getJob(toClose)[ CD ]
Line_40 $$ JobId toClose = jobIt.next()-->Line_44 $$ final Job job = context.getJob(toClose)[ FD ]
Line_6 $$ if (eventHandlingThread != null) -->Line_8 $$ eventHandlingThread.interrupt()[ CD ]
Line_44 $$ final Job job = context.getJob(toClose)-->Line_45 $$ JobUnsuccessfulCompletionEvent jucEvent = new JobUnsuccessfulCompletionEvent(TypeConverter.fromYarn(toClose), System.currentTimeMillis(), job.getCompletedMaps(), job.getCompletedReduces(), createJobStateForJobUnsuccessfulCompletionEvent(mi.getForcedJobStateOnShutDown()), job.getDiagnostics())[ FD ]
Line_46 $$ JobHistoryEvent jfEvent = new JobHistoryEvent(toClose, jucEvent)-->Line_47 $$ handleEvent(jfEvent)[ FD ]
Line_14 $$ if (eventHandlingThread != null) -->Line_15 $$ LOG.debug("Waiting for Event Handling thread to complete")[ CD ]
Line_6 $$ if (eventHandlingThread != null) -->Line_7 $$ LOG.debug("Interrupting Event Handling thread")[ CD ]
Line_39 $$ while (jobIt.hasNext()) -->Line_40 $$ JobId toClose = jobIt.next()[ CD ]
Line_21 $$ for (MetaInfo mi : fileMap.values()) -->Line_26 $$ mi.shutDownTimer()[ FD ]
Line_32 $$ while (it.hasNext()) -->Line_34 $$ LOG.info("In stop, writing event " + ev.getType())[ CD ]
Line_33 $$ JobHistoryEvent ev = it.next()-->Line_35 $$ handleEvent(ev)[ FD ]
Line_42 $$ if (mi != null && mi.isWriterActive()) -->Line_47 $$ handleEvent(jfEvent)[ CD ]
Line_41 $$ MetaInfo mi = fileMap.get(toClose)-->Line_45 $$ JobUnsuccessfulCompletionEvent jucEvent = new JobUnsuccessfulCompletionEvent(TypeConverter.fromYarn(toClose), System.currentTimeMillis(), job.getCompletedMaps(), job.getCompletedReduces(), createJobStateForJobUnsuccessfulCompletionEvent(mi.getForcedJobStateOnShutDown()), job.getDiagnostics())[ FD ]
Line_41 $$ MetaInfo mi = fileMap.get(toClose)-->Line_53 $$ mi.closeWriter()[ FD ]
Line_42 $$ if (mi != null && mi.isWriterActive()) -->Line_46 $$ JobHistoryEvent jfEvent = new JobHistoryEvent(toClose, jucEvent)[ CD ]
Line_23 $$ if (LOG.isDebugEnabled()) -->Line_24 $$ LOG.debug("Shutting down timer for " + mi)[ CD ]
Line_42 $$ if (mi != null && mi.isWriterActive()) -->Line_43 $$ LOG.warn("Found jobId " + toClose + " to have not been closed. Will close")[ CD ]
Line_37 $$ Iterator<JobId> jobIt = fileMap.keySet().iterator()-->Line_40 $$ JobId toClose = jobIt.next()[ FD ]
Line_39 $$ while (jobIt.hasNext()) -->Line_42 $$ if (mi != null && mi.isWriterActive()) [ CD ]
Line_38 $$ if (forceJobCompletion) -->Line_39 $$ while (jobIt.hasNext()) [ CD ]
Line_21 $$ for (MetaInfo mi : fileMap.values()) -->Line_45 $$ JobUnsuccessfulCompletionEvent jucEvent = new JobUnsuccessfulCompletionEvent(TypeConverter.fromYarn(toClose), System.currentTimeMillis(), job.getCompletedMaps(), job.getCompletedReduces(), createJobStateForJobUnsuccessfulCompletionEvent(mi.getForcedJobStateOnShutDown()), job.getDiagnostics())[ FD ]
Line_2 $$ protected void serviceStop() throws Exception -->Line_31 $$ Iterator<JobHistoryEvent> it = eventQueue.iterator()[ CD ]
Line_31 $$ Iterator<JobHistoryEvent> it = eventQueue.iterator()-->Line_33 $$ JobHistoryEvent ev = it.next()[ FD ]
Line_40 $$ JobId toClose = jobIt.next()-->Line_41 $$ MetaInfo mi = fileMap.get(toClose)[ FD ]
Line_6 $$ if (eventHandlingThread != null) -->Line_10 $$ LOG.debug("Null event handling thread")[ CD ]
Line_14 $$ if (eventHandlingThread != null) -->Line_16 $$ eventHandlingThread.join()[ CD ]
Line_2 $$ protected void serviceStop() throws Exception -->Line_38 $$ if (forceJobCompletion) [ CD ]
Line_40 $$ JobId toClose = jobIt.next()-->Line_45 $$ JobUnsuccessfulCompletionEvent jucEvent = new JobUnsuccessfulCompletionEvent(TypeConverter.fromYarn(toClose), System.currentTimeMillis(), job.getCompletedMaps(), job.getCompletedReduces(), createJobStateForJobUnsuccessfulCompletionEvent(mi.getForcedJobStateOnShutDown()), job.getDiagnostics())[ FD ]
Line_2 $$ protected void serviceStop() throws Exception -->Line_59 $$ super.serviceStop()[ CD ]
Line_32 $$ while (it.hasNext()) -->Line_33 $$ JobHistoryEvent ev = it.next()[ CD ]
Line_41 $$ MetaInfo mi = fileMap.get(toClose)-->Line_42 $$ if (mi != null && mi.isWriterActive()) [ FD ]
Line_33 $$ JobHistoryEvent ev = it.next()-->Line_34 $$ LOG.info("In stop, writing event " + ev.getType())[ FD ]
