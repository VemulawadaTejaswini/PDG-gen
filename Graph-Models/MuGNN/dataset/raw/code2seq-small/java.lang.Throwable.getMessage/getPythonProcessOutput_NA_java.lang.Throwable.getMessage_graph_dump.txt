Line_22 $$ Process process-->Line_26 $$ process = commandLine.createProcess()[ FD ]
Line_7 $$ if (workingDir == null) -->Line_8 $$ workingDir = new File(homePath).getParent()[ CD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_21 $$ GeneralCommandLine commandLine = new GeneralCommandLine(cmdline).withWorkDirectory(workingDir).withEnvironment(environment)[ FD ]
Line_30 $$ final ProcessOutput result-->Line_54 $$ final int exitCode = result.getExitCode()[ FD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_31 $$ if (showProgress && indicator != null) [ FD ]
Line_3 $$ final String homePath = getSdk().getHomePath()-->Line_11 $$ cmdline.add(homePath)[ FD ]
Line_35 $$ for (String line : StringUtil.splitByLines(event.getText())) -->Line_36 $$ final String trimmed = line.trim()[ FD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_14 $$ LOG.info("Running packaging tool: " + StringUtil.join(cmdline, " "))[ CD ]
Line_29 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_38 $$ indicator.setText2(trimmed)[ FD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_13 $$ cmdline.addAll(args)[ CD ]
Line_36 $$ final String trimmed = line.trim()-->Line_44 $$ return trimmed.length() > 3[ FD ]
Line_3 $$ final String homePath = getSdk().getHomePath()-->Line_4 $$ if (homePath == null) [ FD ]
Line_10 $$ final List<String> cmdline = new ArrayList<String>()-->Line_11 $$ cmdline.add(homePath)[ FD ]
Line_36 $$ final String trimmed = line.trim()-->Line_37 $$ if (isMeaningfulOutput(trimmed)) [ FD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_15 $$ final boolean canCreate = FileUtil.ensureCanCreateFile(new File(homePath))[ CD ]
Line_32 $$ handler.addProcessListener(new ProcessAdapter() -->Line_44 $$ return trimmed.length() > 3[ FD ]
Line_32 $$ handler.addProcessListener(new ProcessAdapter() -->Line_35 $$ for (String line : StringUtil.splitByLines(event.getText())) [ FD ]
Line_10 $$ final List<String> cmdline = new ArrayList<String>()-->Line_12 $$ cmdline.add(helperPath)[ FD ]
Line_18 $$ final Map<String, String> environment = new HashMap<String, String>(System.getenv())-->Line_19 $$ PythonEnvUtil.setPythonUnbuffered(environment)[ FD ]
Line_36 $$ final String trimmed = line.trim()-->Line_38 $$ indicator.setText2(trimmed)[ FD ]
Line_30 $$ final ProcessOutput result-->Line_51 $$ if (result.isCancelled()) [ FD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_3 $$ final String homePath = getSdk().getHomePath()[ CD ]
Line_23 $$ if (useSudo) -->Line_26 $$ process = commandLine.createProcess()[ CD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_4 $$ if (homePath == null) [ CD ]
Line_18 $$ final Map<String, String> environment = new HashMap<String, String>(System.getenv())-->Line_21 $$ GeneralCommandLine commandLine = new GeneralCommandLine(cmdline).withWorkDirectory(workingDir).withEnvironment(environment)[ FD ]
Line_30 $$ final ProcessOutput result-->Line_56 $$ final String message = StringUtil.isEmptyOrSpaces(result.getStdout()) && StringUtil.isEmptyOrSpaces(result.getStderr()) ? "Permission denied" : "Non-zero exit code"[ FD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_12 $$ cmdline.add(helperPath)[ CD ]
Line_31 $$ if (showProgress && indicator != null) -->Line_47 $$ result = handler.runProcessWithProgressIndicator(indicator)[ CD ]
Line_31 $$ if (showProgress && indicator != null) -->Line_49 $$ result = handler.runProcess(TIMEOUT)[ CD ]
Line_23 $$ if (useSudo) -->Line_24 $$ process = ExecUtil.sudo(commandLine, "Please enter your password to make changes in system packages: ")[ CD ]
Line_18 $$ final Map<String, String> environment = new HashMap<String, String>(System.getenv())-->Line_20 $$ PythonEnvUtil.setPythonDontWriteBytecode(environment)[ FD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_13 $$ cmdline.addAll(args)[ FD ]
Line_28 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(process, commandLine.getCharset(), commandLine.getCommandLineString())-->Line_49 $$ result = handler.runProcess(TIMEOUT)[ FD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_7 $$ if (workingDir == null) [ CD ]
Line_22 $$ Process process-->Line_24 $$ process = ExecUtil.sudo(commandLine, "Please enter your password to make changes in system packages: ")[ FD ]
Line_28 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(process, commandLine.getCharset(), commandLine.getCommandLineString())-->Line_32 $$ handler.addProcessListener(new ProcessAdapter() [ FD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_7 $$ if (workingDir == null) [ FD ]
Line_10 $$ final List<String> cmdline = new ArrayList<String>()-->Line_14 $$ LOG.info("Running packaging tool: " + StringUtil.join(cmdline, " "))[ FD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_12 $$ cmdline.add(helperPath)[ FD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_16 $$ final boolean useSudo = !canCreate && !SystemInfo.isWindows && askForSudo[ CD ]
Line_24 $$ process = ExecUtil.sudo(commandLine, "Please enter your password to make changes in system packages: ")-->Line_26 $$ process = commandLine.createProcess()[ FD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_10 $$ final List<String> cmdline = new ArrayList<String>()[ CD ]
Line_32 $$ handler.addProcessListener(new ProcessAdapter() -->Line_34 $$ if (outputType == ProcessOutputTypes.STDOUT || outputType == ProcessOutputTypes.STDERR) [ CD ]
Line_10 $$ final List<String> cmdline = new ArrayList<String>()-->Line_13 $$ cmdline.addAll(args)[ FD ]
Line_21 $$ GeneralCommandLine commandLine = new GeneralCommandLine(cmdline).withWorkDirectory(workingDir).withEnvironment(environment)-->Line_24 $$ process = ExecUtil.sudo(commandLine, "Please enter your password to make changes in system packages: ")[ FD ]
Line_15 $$ final boolean canCreate = FileUtil.ensureCanCreateFile(new File(homePath))-->Line_16 $$ final boolean useSudo = !canCreate && !SystemInfo.isWindows && askForSudo[ FD ]
Line_32 $$ handler.addProcessListener(new ProcessAdapter() -->Line_44 $$ return trimmed.length() > 3[ CD ]
Line_2 $$ protected ProcessOutput getPythonProcessOutput(@NotNull String helperPath, @NotNull List<String> args, boolean askForSudo, boolean showProgress, @Nullable String workingDir) throws ExecutionException -->Line_11 $$ cmdline.add(homePath)[ CD ]
Line_21 $$ GeneralCommandLine commandLine = new GeneralCommandLine(cmdline).withWorkDirectory(workingDir).withEnvironment(environment)-->Line_26 $$ process = commandLine.createProcess()[ FD ]
Line_37 $$ if (isMeaningfulOutput(trimmed)) -->Line_38 $$ indicator.setText2(trimmed)[ CD ]
Line_29 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_47 $$ result = handler.runProcessWithProgressIndicator(indicator)[ FD ]
Line_21 $$ GeneralCommandLine commandLine = new GeneralCommandLine(cmdline).withWorkDirectory(workingDir).withEnvironment(environment)-->Line_28 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(process, commandLine.getCharset(), commandLine.getCommandLineString())[ FD ]
Line_31 $$ if (showProgress && indicator != null) -->Line_32 $$ handler.addProcessListener(new ProcessAdapter() [ CD ]
Line_28 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(process, commandLine.getCharset(), commandLine.getCommandLineString())-->Line_47 $$ result = handler.runProcessWithProgressIndicator(indicator)[ FD ]
