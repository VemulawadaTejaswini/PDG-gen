Line_30 $$ if (remainingPatches.isEmpty() && remainingBinaries.isEmpty()) -->Line_33 $$ saveRemainingPatches(changeList, remainingPatches, remainingBinaries, commitContext)[ CD ]
Line_26 $$ final PatchApplier<ShelvedBinaryFilePatch> patchApplier = new PatchApplier<ShelvedBinaryFilePatch>(myProject, myProject.getBaseDir(), patches, targetChangeList, binaryPatchApplier, commitContext, reverse, leftConflictTitle, rightConflictTitle)-->Line_27 $$ patchApplier.setIsSystemOperation(systemOperation)[ FD ]
Line_28 $$ if (isRemoveFilesFromShelf() || systemOperation) -->Line_29 $$ remainingPatches.addAll(patchApplier.getRemainingPatches())[ CD ]
Line_23 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() -->Line_28 $$ if (isRemoveFilesFromShelf() || systemOperation) [ CD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_17 $$ final List<FilePatch> patches = new ArrayList<FilePatch>(textFilePatches)[ CD ]
Line_3 $$ final List<FilePatch> remainingPatches = new ArrayList<FilePatch>()-->Line_33 $$ saveRemainingPatches(changeList, remainingPatches, remainingBinaries, commitContext)[ FD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_23 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() [ CD ]
Line_23 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() -->Line_27 $$ patchApplier.setIsSystemOperation(systemOperation)[ CD ]
Line_23 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() -->Line_26 $$ final PatchApplier<ShelvedBinaryFilePatch> patchApplier = new PatchApplier<ShelvedBinaryFilePatch>(myProject, myProject.getBaseDir(), patches, targetChangeList, binaryPatchApplier, commitContext, reverse, leftConflictTitle, rightConflictTitle)[ CD ]
Line_18 $$ final List<ShelvedBinaryFile> remainingBinaries = new ArrayList<ShelvedBinaryFile>()-->Line_33 $$ saveRemainingPatches(changeList, remainingPatches, remainingBinaries, commitContext)[ FD ]
Line_23 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() -->Line_36 $$ patchApplier.execute(showSuccessNotification, systemOperation)[ CD ]
Line_3 $$ final List<FilePatch> remainingPatches = new ArrayList<FilePatch>()-->Line_7 $$ textFilePatches = loadTextPatches(myProject, changeList, changes, remainingPatches, commitContext)[ FD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_19 $$ final List<ShelvedBinaryFile> binaryFilesToUnshelve = getBinaryFilesToUnshelve(changeList, binaryFiles, remainingBinaries)[ CD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_18 $$ final List<ShelvedBinaryFile> remainingBinaries = new ArrayList<ShelvedBinaryFile>()[ CD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_19 $$ final List<ShelvedBinaryFile> binaryFilesToUnshelve = getBinaryFilesToUnshelve(changeList, binaryFiles, remainingBinaries)[ FD ]
Line_3 $$ final List<FilePatch> remainingPatches = new ArrayList<FilePatch>()-->Line_30 $$ if (remainingPatches.isEmpty() && remainingBinaries.isEmpty()) [ FD ]
Line_26 $$ final PatchApplier<ShelvedBinaryFilePatch> patchApplier = new PatchApplier<ShelvedBinaryFilePatch>(myProject, myProject.getBaseDir(), patches, targetChangeList, binaryPatchApplier, commitContext, reverse, leftConflictTitle, rightConflictTitle)-->Line_29 $$ remainingPatches.addAll(patchApplier.getRemainingPatches())[ FD ]
Line_5 $$ final List<TextFilePatch> textFilePatches-->Line_7 $$ textFilePatches = loadTextPatches(myProject, changeList, changes, remainingPatches, commitContext)[ FD ]
Line_18 $$ final List<ShelvedBinaryFile> remainingBinaries = new ArrayList<ShelvedBinaryFile>()-->Line_19 $$ final List<ShelvedBinaryFile> binaryFilesToUnshelve = getBinaryFilesToUnshelve(changeList, binaryFiles, remainingBinaries)[ FD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_5 $$ final List<TextFilePatch> textFilePatches[ CD ]
Line_30 $$ if (remainingPatches.isEmpty() && remainingBinaries.isEmpty()) -->Line_31 $$ recycleChangeList(changeList)[ CD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_27 $$ patchApplier.setIsSystemOperation(systemOperation)[ FD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_31 $$ recycleChangeList(changeList)[ FD ]
Line_4 $$ final CommitContext commitContext = new CommitContext()-->Line_7 $$ textFilePatches = loadTextPatches(myProject, changeList, changes, remainingPatches, commitContext)[ FD ]
Line_4 $$ final CommitContext commitContext = new CommitContext()-->Line_33 $$ saveRemainingPatches(changeList, remainingPatches, remainingBinaries, commitContext)[ FD ]
Line_26 $$ final PatchApplier<ShelvedBinaryFilePatch> patchApplier = new PatchApplier<ShelvedBinaryFilePatch>(myProject, myProject.getBaseDir(), patches, targetChangeList, binaryPatchApplier, commitContext, reverse, leftConflictTitle, rightConflictTitle)-->Line_36 $$ patchApplier.execute(showSuccessNotification, systemOperation)[ FD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_4 $$ final CommitContext commitContext = new CommitContext()[ CD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_36 $$ patchApplier.execute(showSuccessNotification, systemOperation)[ FD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_28 $$ if (isRemoveFilesFromShelf() || systemOperation) [ FD ]
Line_28 $$ if (isRemoveFilesFromShelf() || systemOperation) -->Line_30 $$ if (remainingPatches.isEmpty() && remainingBinaries.isEmpty()) [ CD ]
Line_23 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() -->Line_25 $$ final BinaryPatchApplier binaryPatchApplier = new BinaryPatchApplier()[ CD ]
Line_18 $$ final List<ShelvedBinaryFile> remainingBinaries = new ArrayList<ShelvedBinaryFile>()-->Line_30 $$ if (remainingPatches.isEmpty() && remainingBinaries.isEmpty()) [ FD ]
Line_3 $$ final List<FilePatch> remainingPatches = new ArrayList<FilePatch>()-->Line_29 $$ remainingPatches.addAll(patchApplier.getRemainingPatches())[ FD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_33 $$ saveRemainingPatches(changeList, remainingPatches, remainingBinaries, commitContext)[ FD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_7 $$ textFilePatches = loadTextPatches(myProject, changeList, changes, remainingPatches, commitContext)[ FD ]
Line_17 $$ final List<FilePatch> patches = new ArrayList<FilePatch>(textFilePatches)-->Line_21 $$ patches.add(new ShelvedBinaryFilePatch(shelvedBinaryFile))[ FD ]
Line_2 $$ public void unshelveChangeList(final ShelvedChangeList changeList, @Nullable final List<ShelvedChange> changes, @Nullable final List<ShelvedBinaryFile> binaryFiles, @Nullable final LocalChangeList targetChangeList, final boolean showSuccessNotification, final boolean systemOperation, final boolean reverse, final String leftConflictTitle, final String rightConflictTitle) -->Line_3 $$ final List<FilePatch> remainingPatches = new ArrayList<FilePatch>()[ CD ]
