Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)[ FD ]
Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_47 $$ if (inputMessage.getBody() != null) [ FD ]
Line_18 $$ targetClass = (Class<T>) resolvableType.resolve()-->Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)[ FD ]
Line_17 $$ ResolvableType resolvableType = (param != null ? ResolvableType.forMethodParameter(param) : ResolvableType.forType(targetType))-->Line_18 $$ targetClass = (Class<T>) resolvableType.resolve()[ FD ]
Line_48 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_47 $$ if (inputMessage.getBody() != null) -->Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)[ CD ]
Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)-->Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)[ FD ]
Line_63 $$ if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) || (noContentType && inputMessage.getBody() == null)) -->Line_64 $$ return null[ CD ]
Line_6 $$ contentType = inputMessage.getHeaders().getContentType()-->Line_10 $$ if (contentType == null) [ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)[ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)-->Line_62 $$ if (body == NO_VALUE) [ FD ]
Line_6 $$ contentType = inputMessage.getHeaders().getContentType()-->Line_28 $$ if (genericConverter.canRead(targetType, contextClass, contentType)) [ FD ]
Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)-->Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)-->Line_52 $$ body = null[ FD ]
Line_37 $$ body = null-->Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)-->Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_21 $$ Object body = NO_VALUE-->Line_52 $$ body = null[ FD ]
Line_47 $$ if (inputMessage.getBody() != null) -->Line_52 $$ body = null[ CD ]
Line_25 $$ Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()-->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)-->Line_37 $$ body = null[ FD ]
Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)-->Line_52 $$ body = null[ FD ]
Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_62 $$ if (body == NO_VALUE) -->Line_63 $$ if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) || (noContentType && inputMessage.getBody() == null)) [ CD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_32 $$ if (inputMessage.getBody() != null) [ FD ]
Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)-->Line_62 $$ if (body == NO_VALUE) [ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_20 $$ HttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod()[ CD ]
Line_15 $$ Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)-->Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)[ FD ]
Line_43 $$ if (converter.canRead(targetClass, contentType)) -->Line_47 $$ if (inputMessage.getBody() != null) [ CD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_6 $$ contentType = inputMessage.getHeaders().getContentType()[ FD ]
Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)-->Line_62 $$ if (body == NO_VALUE) [ FD ]
Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)[ FD ]
Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)-->Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_23 $$ inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)-->Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_27 $$ GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter-->Line_28 $$ if (genericConverter.canRead(targetType, contextClass, contentType)) [ FD ]
Line_44 $$ if (logger.isDebugEnabled()) -->Line_45 $$ logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")[ CD ]
Line_48 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_14 $$ Class<?> contextClass = (param != null ? param.getContainingClass() : null)[ FD ]
Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)-->Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)[ FD ]
Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)-->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_6 $$ contentType = inputMessage.getHeaders().getContentType()-->Line_12 $$ contentType = MediaType.APPLICATION_OCTET_STREAM[ FD ]
Line_23 $$ inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)-->Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)[ FD ]
Line_21 $$ Object body = NO_VALUE-->Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)[ FD ]
Line_23 $$ inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)-->Line_63 $$ if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) || (noContentType && inputMessage.getBody() == null)) [ FD ]
Line_10 $$ if (contentType == null) -->Line_12 $$ contentType = MediaType.APPLICATION_OCTET_STREAM[ CD ]
Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_47 $$ if (inputMessage.getBody() != null) [ FD ]
Line_15 $$ Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)-->Line_42 $$ if (targetClass != null) [ FD ]
Line_23 $$ inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)-->Line_32 $$ if (inputMessage.getBody() != null) [ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_63 $$ if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) || (noContentType && inputMessage.getBody() == null)) [ FD ]
Line_3 $$ MediaType contentType-->Line_10 $$ if (contentType == null) [ FD ]
Line_25 $$ Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()-->Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_26 $$ if (converter instanceof GenericHttpMessageConverter) -->Line_28 $$ if (genericConverter.canRead(targetType, contextClass, contentType)) [ CD ]
Line_24 $$ for (HttpMessageConverter<?> converter : this.messageConverters) -->Line_25 $$ Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()[ FD ]
Line_16 $$ if (targetClass == null) -->Line_17 $$ ResolvableType resolvableType = (param != null ? ResolvableType.forMethodParameter(param) : ResolvableType.forType(targetType))[ CD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_48 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)[ FD ]
Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)-->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_37 $$ body = null-->Line_62 $$ if (body == NO_VALUE) [ FD ]
Line_42 $$ if (targetClass != null) -->Line_43 $$ if (converter.canRead(targetClass, contentType)) [ CD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_15 $$ Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)[ CD ]
Line_12 $$ contentType = MediaType.APPLICATION_OCTET_STREAM-->Line_28 $$ if (genericConverter.canRead(targetType, contextClass, contentType)) [ FD ]
Line_21 $$ Object body = NO_VALUE-->Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_32 $$ if (inputMessage.getBody() != null) -->Line_37 $$ body = null[ CD ]
Line_32 $$ if (inputMessage.getBody() != null) -->Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)[ CD ]
Line_25 $$ Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()-->Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_28 $$ if (genericConverter.canRead(targetType, contextClass, contentType)) -->Line_32 $$ if (inputMessage.getBody() != null) [ CD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_21 $$ Object body = NO_VALUE[ CD ]
Line_47 $$ if (inputMessage.getBody() != null) -->Line_48 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)[ CD ]
Line_24 $$ for (HttpMessageConverter<?> converter : this.messageConverters) -->Line_26 $$ if (converter instanceof GenericHttpMessageConverter) [ FD ]
Line_23 $$ inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)-->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_37 $$ body = null-->Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)[ FD ]
Line_27 $$ GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter-->Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)[ FD ]
Line_28 $$ if (genericConverter.canRead(targetType, contextClass, contentType)) -->Line_29 $$ if (logger.isDebugEnabled()) [ CD ]
Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)-->Line_52 $$ body = null[ FD ]
Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)-->Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_26 $$ if (converter instanceof GenericHttpMessageConverter) -->Line_42 $$ if (targetClass != null) [ CD ]
Line_3 $$ MediaType contentType-->Line_6 $$ contentType = inputMessage.getHeaders().getContentType()[ FD ]
Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)-->Line_62 $$ if (body == NO_VALUE) [ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_17 $$ ResolvableType resolvableType = (param != null ? ResolvableType.forMethodParameter(param) : ResolvableType.forType(targetType))[ FD ]
Line_25 $$ Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()-->Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)[ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_3 $$ MediaType contentType[ CD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_23 $$ inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)[ FD ]
Line_3 $$ MediaType contentType-->Line_28 $$ if (genericConverter.canRead(targetType, contextClass, contentType)) [ FD ]
Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)-->Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_32 $$ if (inputMessage.getBody() != null) -->Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ CD ]
Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)-->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_32 $$ if (inputMessage.getBody() != null) -->Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)[ CD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)[ FD ]
Line_3 $$ MediaType contentType-->Line_12 $$ contentType = MediaType.APPLICATION_OCTET_STREAM[ FD ]
Line_15 $$ Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)-->Line_18 $$ targetClass = (Class<T>) resolvableType.resolve()[ FD ]
Line_25 $$ Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()-->Line_48 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)[ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_28 $$ if (genericConverter.canRead(targetType, contextClass, contentType)) [ FD ]
Line_23 $$ inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)-->Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_63 $$ if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) || (noContentType && inputMessage.getBody() == null)) [ FD ]
Line_21 $$ Object body = NO_VALUE-->Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_12 $$ contentType = MediaType.APPLICATION_OCTET_STREAM-->Line_43 $$ if (converter.canRead(targetClass, contentType)) [ FD ]
Line_23 $$ inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)-->Line_47 $$ if (inputMessage.getBody() != null) [ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_14 $$ Class<?> contextClass = (param != null ? param.getContainingClass() : null)[ CD ]
Line_23 $$ inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)-->Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)[ FD ]
Line_3 $$ MediaType contentType-->Line_43 $$ if (converter.canRead(targetClass, contentType)) [ FD ]
Line_23 $$ inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)-->Line_48 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)[ FD ]
Line_23 $$ inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)-->Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)[ FD ]
Line_43 $$ if (converter.canRead(targetClass, contentType)) -->Line_44 $$ if (logger.isDebugEnabled()) [ CD ]
Line_16 $$ if (targetClass == null) -->Line_18 $$ targetClass = (Class<T>) resolvableType.resolve()[ CD ]
Line_47 $$ if (inputMessage.getBody() != null) -->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ CD ]
Line_21 $$ Object body = NO_VALUE-->Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_18 $$ targetClass = (Class<T>) resolvableType.resolve()-->Line_42 $$ if (targetClass != null) [ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_16 $$ if (targetClass == null) [ CD ]
Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_48 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)[ FD ]
Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)-->Line_52 $$ body = null[ FD ]
Line_20 $$ HttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod()-->Line_63 $$ if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) || (noContentType && inputMessage.getBody() == null)) [ FD ]
Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)-->Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_32 $$ if (inputMessage.getBody() != null) -->Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ CD ]
Line_47 $$ if (inputMessage.getBody() != null) -->Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ CD ]
Line_14 $$ Class<?> contextClass = (param != null ? param.getContainingClass() : null)-->Line_28 $$ if (genericConverter.canRead(targetType, contextClass, contentType)) [ FD ]
Line_14 $$ Class<?> contextClass = (param != null ? param.getContainingClass() : null)-->Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)[ FD ]
Line_48 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_63 $$ if (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) || (noContentType && inputMessage.getBody() == null)) [ FD ]
Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)-->Line_62 $$ if (body == NO_VALUE) [ FD ]
Line_37 $$ body = null-->Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)[ FD ]
Line_21 $$ Object body = NO_VALUE-->Line_37 $$ body = null[ FD ]
Line_18 $$ targetClass = (Class<T>) resolvableType.resolve()-->Line_43 $$ if (converter.canRead(targetClass, contentType)) [ FD ]
Line_34 $$ body = genericConverter.read(targetType, contextClass, inputMessage)-->Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)[ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_10 $$ if (contentType == null) [ CD ]
Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)-->Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_21 $$ Object body = NO_VALUE-->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_48 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)[ FD ]
Line_21 $$ Object body = NO_VALUE-->Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)[ FD ]
Line_37 $$ body = null-->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_24 $$ for (HttpMessageConverter<?> converter : this.messageConverters) -->Line_43 $$ if (converter.canRead(targetClass, contentType)) [ FD ]
Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)-->Line_52 $$ body = null[ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_68 $$ return body[ CD ]
Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_15 $$ Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)-->Line_16 $$ if (targetClass == null) [ FD ]
Line_37 $$ body = null-->Line_52 $$ body = null[ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)-->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_4 $$ boolean noContentType = false[ CD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_62 $$ if (body == NO_VALUE) [ CD ]
Line_15 $$ Class<T> targetClass = (targetType instanceof Class<?> ? (Class<T>) targetType : null)-->Line_43 $$ if (converter.canRead(targetClass, contentType)) [ FD ]
Line_52 $$ body = null-->Line_62 $$ if (body == NO_VALUE) [ FD ]
Line_23 $$ inputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage)-->Line_38 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)-->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_52 $$ body = null-->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_49 $$ body = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage)-->Line_62 $$ if (body == NO_VALUE) [ FD ]
Line_33 $$ inputMessage = getAdvice().beforeBodyRead(inputMessage, param, targetType, converterType)-->Line_53 $$ body = getAdvice().handleEmptyBody(body, inputMessage, param, targetType, converterType)[ FD ]
Line_26 $$ if (converter instanceof GenericHttpMessageConverter) -->Line_27 $$ GenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter[ CD ]
Line_6 $$ contentType = inputMessage.getHeaders().getContentType()-->Line_43 $$ if (converter.canRead(targetClass, contentType)) [ FD ]
Line_10 $$ if (contentType == null) -->Line_11 $$ noContentType = true[ CD ]
Line_25 $$ Class<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass()-->Line_50 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_2 $$ protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter param, Type targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException -->Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)[ FD ]
Line_29 $$ if (logger.isDebugEnabled()) -->Line_30 $$ logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]")[ CD ]
Line_35 $$ body = getAdvice().afterBodyRead(body, inputMessage, param, targetType, converterType)-->Line_37 $$ body = null[ FD ]
Line_21 $$ Object body = NO_VALUE-->Line_62 $$ if (body == NO_VALUE) [ FD ]
Line_4 $$ boolean noContentType = false-->Line_11 $$ noContentType = true[ FD ]
