Line_3 $$ LocalizedResource rsrc = request.getResource()-->Line_6 $$ if (rsrc.tryAcquire()) [ FD ]
Line_11 $$ Path publicDirDestPath = publicRsrc.getPathForLocalization(key, publicRootPath)-->Line_13 $$ DiskChecker.checkDir(new File(publicDirDestPath.toUri().getPath()))[ FD ]
Line_3 $$ LocalizedResource rsrc = request.getResource()-->Line_7 $$ if (rsrc.getState().equals(ResourceState.DOWNLOADING)) [ FD ]
Line_7 $$ if (rsrc.getState().equals(ResourceState.DOWNLOADING)) -->Line_28 $$ rsrc.unlock()[ CD ]
Line_2 $$ public void addResource(LocalizerResourceRequestEvent request) -->Line_3 $$ LocalizedResource rsrc = request.getResource()[ FD ]
Line_7 $$ if (rsrc.getState().equals(ResourceState.DOWNLOADING)) -->Line_8 $$ LocalResource resource = request.getResource().getRequest()[ CD ]
Line_2 $$ public void addResource(LocalizerResourceRequestEvent request) -->Line_8 $$ LocalResource resource = request.getResource().getRequest()[ FD ]
Line_4 $$ LocalResourceRequest key = rsrc.getRequest()-->Line_11 $$ Path publicDirDestPath = publicRsrc.getPathForLocalization(key, publicRootPath)[ FD ]
Line_8 $$ LocalResource resource = request.getResource().getRequest()-->Line_10 $$ Path publicRootPath = dirsHandler.getLocalPathForWrite("." + Path.SEPARATOR + ContainerLocalizer.FILECACHE, ContainerLocalizer.getEstimatedSize(resource), true)[ FD ]
Line_2 $$ public void addResource(LocalizerResourceRequestEvent request) -->Line_20 $$ publicRsrc.handle(new ResourceFailedLocalizationEvent(request.getResource().getRequest(), e.getMessage()))[ FD ]
Line_12 $$ if (!publicDirDestPath.getParent().equals(publicRootPath)) -->Line_13 $$ DiskChecker.checkDir(new File(publicDirDestPath.toUri().getPath()))[ CD ]
Line_2 $$ public void addResource(LocalizerResourceRequestEvent request) -->Line_3 $$ LocalizedResource rsrc = request.getResource()[ CD ]
Line_10 $$ Path publicRootPath = dirsHandler.getLocalPathForWrite("." + Path.SEPARATOR + ContainerLocalizer.FILECACHE, ContainerLocalizer.getEstimatedSize(resource), true)-->Line_12 $$ if (!publicDirDestPath.getParent().equals(publicRootPath)) [ FD ]
Line_3 $$ LocalizedResource rsrc = request.getResource()-->Line_23 $$ rsrc.unlock()[ FD ]
Line_3 $$ LocalizedResource rsrc = request.getResource()-->Line_19 $$ rsrc.unlock()[ FD ]
Line_2 $$ public void addResource(LocalizerResourceRequestEvent request) -->Line_4 $$ LocalResourceRequest key = rsrc.getRequest()[ CD ]
Line_2 $$ public void addResource(LocalizerResourceRequestEvent request) -->Line_5 $$ LOG.info("Downloading public rsrc:" + key)[ CD ]
Line_6 $$ if (rsrc.tryAcquire()) -->Line_7 $$ if (rsrc.getState().equals(ResourceState.DOWNLOADING)) [ CD ]
Line_3 $$ LocalizedResource rsrc = request.getResource()-->Line_28 $$ rsrc.unlock()[ FD ]
Line_10 $$ Path publicRootPath = dirsHandler.getLocalPathForWrite("." + Path.SEPARATOR + ContainerLocalizer.FILECACHE, ContainerLocalizer.getEstimatedSize(resource), true)-->Line_11 $$ Path publicDirDestPath = publicRsrc.getPathForLocalization(key, publicRootPath)[ FD ]
Line_11 $$ Path publicDirDestPath = publicRsrc.getPathForLocalization(key, publicRootPath)-->Line_12 $$ if (!publicDirDestPath.getParent().equals(publicRootPath)) [ FD ]
Line_2 $$ public void addResource(LocalizerResourceRequestEvent request) -->Line_16 $$ pending.put(queue.submit(new FSDownload(lfs, null, conf, publicDirDestPath, resource, request.getContext().getStatCache())), request)[ FD ]
Line_2 $$ public void addResource(LocalizerResourceRequestEvent request) -->Line_24 $$ publicRsrc.handle(new ResourceFailedLocalizationEvent(request.getResource().getRequest(), re.getMessage()))[ FD ]
Line_3 $$ LocalizedResource rsrc = request.getResource()-->Line_4 $$ LocalResourceRequest key = rsrc.getRequest()[ FD ]
Line_2 $$ public void addResource(LocalizerResourceRequestEvent request) -->Line_6 $$ if (rsrc.tryAcquire()) [ CD ]
