Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()-->Line_31 $$ bld.setStatus(ERROR_ACCESS_TOKEN)[ FD ]
Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()-->Line_26 $$ bld.setMessage(e.getMessage())[ FD ]
Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()-->Line_32 $$ bld.setMessage(e.getMessage())[ FD ]
Line_39 $$ if (fis != null) -->Line_44 $$ byte[] buf = new byte[] [ CD ]
Line_15 $$ fis = datanode.requestShortCircuitFdsForRead(blk, token, maxVersion)-->Line_52 $$ if (fis != null) [ FD ]
Line_52 $$ if (fis != null) -->Line_53 $$ IOUtils.cleanup(LOG, fis)[ CD ]
Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()-->Line_28 $$ bld.setStatus(ERROR_UNSUPPORTED)[ FD ]
Line_2 $$ public void requestShortCircuitFds(final ExtendedBlock blk, final Token<BlockTokenIdentifier> token, SlotId slotId, int maxVersion) throws IOException -->Line_5 $$ FileInputStream[] fis = null[ CD ]
Line_2 $$ public void requestShortCircuitFds(final ExtendedBlock blk, final Token<BlockTokenIdentifier> token, SlotId slotId, int maxVersion) throws IOException -->Line_12 $$ datanode.shortCircuitRegistry.registerSlot(ExtendedBlockId.fromExtendedBlock(blk), slotId, isCached)[ FD ]
Line_49 $$ DatanodeRegistration dnR = datanode.getDNRegistrationForBP(blk.getBlockPoolId())-->Line_50 $$ BlockSender.ClientTraceLog.info(String.format("src: 127.0.0.1, dest: 127.0.0.1, op: REQUEST_SHORT_CIRCUIT_FDS," + " blockid: %s, srvID: %s, success: %b", blk.getBlockId(), dnR.getDatanodeUuid(), (fis != null)))[ FD ]
Line_15 $$ fis = datanode.requestShortCircuitFdsForRead(blk, token, maxVersion)-->Line_53 $$ IOUtils.cleanup(LOG, fis)[ FD ]
Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()-->Line_29 $$ bld.setMessage(e.getMessage())[ FD ]
Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()-->Line_35 $$ bld.setMessage(e.getMessage())[ FD ]
Line_2 $$ public void requestShortCircuitFds(final ExtendedBlock blk, final Token<BlockTokenIdentifier> token, SlotId slotId, int maxVersion) throws IOException -->Line_3 $$ updateCurrentThreadName("Passing file descriptors for block " + blk)[ CD ]
Line_2 $$ public void requestShortCircuitFds(final ExtendedBlock blk, final Token<BlockTokenIdentifier> token, SlotId slotId, int maxVersion) throws IOException -->Line_49 $$ DatanodeRegistration dnR = datanode.getDNRegistrationForBP(blk.getBlockPoolId())[ FD ]
Line_2 $$ public void requestShortCircuitFds(final ExtendedBlock blk, final Token<BlockTokenIdentifier> token, SlotId slotId, int maxVersion) throws IOException -->Line_15 $$ fis = datanode.requestShortCircuitFdsForRead(blk, token, maxVersion)[ FD ]
Line_5 $$ FileInputStream[] fis = null-->Line_52 $$ if (fis != null) [ FD ]
Line_2 $$ public void requestShortCircuitFds(final ExtendedBlock blk, final Token<BlockTokenIdentifier> token, SlotId slotId, int maxVersion) throws IOException -->Line_50 $$ BlockSender.ClientTraceLog.info(String.format("src: 127.0.0.1, dest: 127.0.0.1, op: REQUEST_SHORT_CIRCUIT_FDS," + " blockid: %s, srvID: %s, success: %b", blk.getBlockId(), dnR.getDatanodeUuid(), (fis != null)))[ FD ]
Line_2 $$ public void requestShortCircuitFds(final ExtendedBlock blk, final Token<BlockTokenIdentifier> token, SlotId slotId, int maxVersion) throws IOException -->Line_11 $$ boolean isCached = datanode.data.isCached(blk.getBlockPoolId(), blk.getBlockId())[ FD ]
Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()-->Line_38 $$ bld.build().writeDelimitedTo(socketOut)[ FD ]
Line_5 $$ FileInputStream[] fis = null-->Line_15 $$ fis = datanode.requestShortCircuitFdsForRead(blk, token, maxVersion)[ FD ]
Line_15 $$ fis = datanode.requestShortCircuitFdsForRead(blk, token, maxVersion)-->Line_39 $$ if (fis != null) [ FD ]
Line_5 $$ FileInputStream[] fis = null-->Line_39 $$ if (fis != null) [ FD ]
Line_40 $$ FileDescriptor[] fds = new FileDescriptor[fis.length]-->Line_45 $$ peer.getDomainSocket().sendFileDescriptors(fds, buf, 0, buf.length)[ FD ]
Line_11 $$ boolean isCached = datanode.data.isCached(blk.getBlockPoolId(), blk.getBlockId())-->Line_12 $$ datanode.shortCircuitRegistry.registerSlot(ExtendedBlockId.fromExtendedBlock(blk), slotId, isCached)[ FD ]
Line_10 $$ if (slotId != null) -->Line_11 $$ boolean isCached = datanode.data.isCached(blk.getBlockPoolId(), blk.getBlockId())[ CD ]
Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()-->Line_21 $$ bld.setStatus(SUCCESS)[ FD ]
Line_5 $$ FileInputStream[] fis = null-->Line_53 $$ IOUtils.cleanup(LOG, fis)[ FD ]
Line_17 $$ if ((fis == null) && (slotId != null)) -->Line_18 $$ datanode.shortCircuitRegistry.unregisterSlot(slotId)[ CD ]
Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()-->Line_25 $$ bld.setShortCircuitAccessVersion(DataNode.CURRENT_BLOCK_FORMAT_VERSION)[ FD ]
Line_39 $$ if (fis != null) -->Line_40 $$ FileDescriptor[] fds = new FileDescriptor[fis.length][ CD ]
Line_39 $$ if (fis != null) -->Line_45 $$ peer.getDomainSocket().sendFileDescriptors(fds, buf, 0, buf.length)[ CD ]
Line_2 $$ public void requestShortCircuitFds(final ExtendedBlock blk, final Token<BlockTokenIdentifier> token, SlotId slotId, int maxVersion) throws IOException -->Line_18 $$ datanode.shortCircuitRegistry.unregisterSlot(slotId)[ FD ]
Line_41 $$ for (int i = 0; i < fds.length; i++) -->Line_42 $$ fds[i] = fis[i].getFD()[ CD ]
Line_48 $$ if (ClientTraceLog.isInfoEnabled()) -->Line_49 $$ DatanodeRegistration dnR = datanode.getDNRegistrationForBP(blk.getBlockPoolId())[ CD ]
Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()-->Line_24 $$ bld.setStatus(ERROR_UNSUPPORTED)[ FD ]
Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()-->Line_34 $$ bld.setStatus(ERROR)[ FD ]
Line_44 $$ byte[] buf = new byte[] -->Line_45 $$ peer.getDomainSocket().sendFileDescriptors(fds, buf, 0, buf.length)[ FD ]
Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()-->Line_22 $$ bld.setShortCircuitAccessVersion(DataNode.CURRENT_BLOCK_FORMAT_VERSION)[ FD ]
Line_2 $$ public void requestShortCircuitFds(final ExtendedBlock blk, final Token<BlockTokenIdentifier> token, SlotId slotId, int maxVersion) throws IOException -->Line_10 $$ if (slotId != null) [ FD ]
Line_2 $$ public void requestShortCircuitFds(final ExtendedBlock blk, final Token<BlockTokenIdentifier> token, SlotId slotId, int maxVersion) throws IOException -->Line_4 $$ BlockOpResponseProto.Builder bld = BlockOpResponseProto.newBuilder()[ CD ]
Line_10 $$ if (slotId != null) -->Line_12 $$ datanode.shortCircuitRegistry.registerSlot(ExtendedBlockId.fromExtendedBlock(blk), slotId, isCached)[ CD ]
Line_39 $$ if (fis != null) -->Line_41 $$ for (int i = 0; i < fds.length; i++) [ CD ]
Line_48 $$ if (ClientTraceLog.isInfoEnabled()) -->Line_50 $$ BlockSender.ClientTraceLog.info(String.format("src: 127.0.0.1, dest: 127.0.0.1, op: REQUEST_SHORT_CIRCUIT_FDS," + " blockid: %s, srvID: %s, success: %b", blk.getBlockId(), dnR.getDatanodeUuid(), (fis != null)))[ CD ]
