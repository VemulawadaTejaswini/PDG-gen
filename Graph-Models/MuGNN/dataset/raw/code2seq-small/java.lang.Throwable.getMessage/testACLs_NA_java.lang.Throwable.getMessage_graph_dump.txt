Line_173 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_211 $$ kp.getMetadata("k1")[ FD ]
Line_6 $$ final File testDir = getTestDir()-->Line_17 $$ writeConf(testDir, conf)[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_158 $$ final KeyVersion currKv = doAs("GET", new PrivilegedExceptionAction<KeyVersion>() [ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_16 $$ conf.set(KMSACLs.Type.ROLLOVER.getConfigKey(), KMSACLs.Type.ROLLOVER.toString() + ",SET_KEY_MATERIAL")[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_99 $$ doAs("CREATE", new PrivilegedExceptionAction<Void>() [ CD ]
Line_175 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_189 $$ kpCE.decryptEncryptedKey(encKv)[ FD ]
Line_160 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_162 $$ kp.getKeyVersion("k1@0")[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_122 $$ doAs("SET_KEY_MATERIAL", new PrivilegedExceptionAction<Void>() [ CD ]
Line_2 $$ public void testACLs() throws Exception -->Line_10 $$ conf.set("hadoop.kms.authentication.kerberos.principal", "HTTP/localhost")[ CD ]
Line_184 $$ doAs("DECRYPT_EEK", new PrivilegedExceptionAction<Void>() -->Line_186 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_62 $$ kp.getKeysMetadata("k")[ FD ]
Line_7 $$ conf = createBaseKMSConf(testDir)-->Line_16 $$ conf.set(KMSACLs.Type.ROLLOVER.getConfigKey(), KMSACLs.Type.ROLLOVER.toString() + ",SET_KEY_MATERIAL")[ FD ]
Line_124 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_212 $$ kp.getKeysMetadata("k1")[ FD ]
Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_138 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1")[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_115 $$ kp.deleteKey("k0")[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_238 $$ return null[ CD ]
Line_184 $$ doAs("DECRYPT_EEK", new PrivilegedExceptionAction<Void>() -->Line_193 $$ return null[ CD ]
Line_7 $$ conf = createBaseKMSConf(testDir)-->Line_8 $$ conf.set("hadoop.kms.authentication.type", "kerberos")[ FD ]
Line_7 $$ conf = createBaseKMSConf(testDir)-->Line_17 $$ writeConf(testDir, conf)[ FD ]
Line_186 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_200 $$ kp.getKeys()[ FD ]
Line_12 $$ for (KMSACLs.Type type : KMSACLs.Type.values()) -->Line_13 $$ conf.set(type.getConfigKey(), type.toString())[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_150 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1", new byte[16])[ FD ]
Line_146 $$ doAs("SET_KEY_MATERIAL", new PrivilegedExceptionAction<Void>() -->Line_155 $$ return null[ CD ]
Line_124 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_211 $$ kp.getMetadata("k1")[ FD ]
Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_163 $$ KeyVersion kv = kp.getCurrentKey("k1")[ FD ]
Line_136 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_163 $$ KeyVersion kv = kp.getCurrentKey("k1")[ FD ]
Line_2 $$ public void testACLs() throws Exception -->Line_18 $$ runServer(null, null, testDir, new KMSCallable() [ CD ]
Line_148 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_229 $$ KeyProvider.KeyVersion kv = kp.createKey("k2", new KeyProvider.Options(conf))[ FD ]
Line_148 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_163 $$ KeyVersion kv = kp.getCurrentKey("k1")[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_212 $$ kp.getKeysMetadata("k1")[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_188 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_198 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_200 $$ kp.getKeys()[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_103 $$ KeyProvider.KeyVersion kv = kp.createKey("k0", new KeyProvider.Options(conf))[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_196 $$ doAs("GET_KEYS", new PrivilegedExceptionAction<Void>() [ CD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_126 $$ KeyProvider.KeyVersion kv = kp.createKey("k1", new byte[16], new KeyProvider.Options(conf))[ FD ]
Line_6 $$ final File testDir = getTestDir()-->Line_18 $$ runServer(null, null, testDir, new KMSCallable() [ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_76 $$ kp.getCurrentKey("k")[ FD ]
Line_2 $$ public void testACLs() throws Exception -->Line_5 $$ UserGroupInformation.setConfiguration(conf)[ CD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_126 $$ KeyProvider.KeyVersion kv = kp.createKey("k1", new byte[16], new KeyProvider.Options(conf))[ FD ]
Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_211 $$ kp.getMetadata("k1")[ FD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_229 $$ KeyProvider.KeyVersion kv = kp.createKey("k2", new KeyProvider.Options(conf))[ FD ]
Line_2 $$ public void testACLs() throws Exception -->Line_9 $$ conf.set("hadoop.kms.authentication.kerberos.keytab", keytab.getAbsolutePath())[ CD ]
Line_103 $$ KeyProvider.KeyVersion kv = kp.createKey("k0", new KeyProvider.Options(conf))-->Line_104 $$ Assert.assertNull(kv.getMaterial())[ FD ]
Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_150 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1", new byte[16])[ FD ]
Line_136 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_150 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1", new byte[16])[ FD ]
Line_7 $$ conf = createBaseKMSConf(testDir)-->Line_10 $$ conf.set("hadoop.kms.authentication.kerberos.principal", "HTTP/localhost")[ FD ]
Line_124 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_126 $$ KeyProvider.KeyVersion kv = kp.createKey("k1", new byte[16], new KeyProvider.Options(conf))[ FD ]
Line_196 $$ doAs("GET_KEYS", new PrivilegedExceptionAction<Void>() -->Line_198 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_212 $$ kp.getKeysMetadata("k1")[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_83 $$ kp.getMetadata("k")[ FD ]
Line_124 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_175 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_10 $$ conf.set("hadoop.kms.authentication.kerberos.principal", "HTTP/localhost")[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_222 $$ writeConf(testDir, conf)[ FD ]
Line_103 $$ KeyProvider.KeyVersion kv = kp.createKey("k0", new KeyProvider.Options(conf))-->Line_139 $$ Assert.assertNull(kv.getMaterial())[ FD ]
Line_173 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_175 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_219 $$ KMSWebApp.getACLs().stopReloader()[ CD ]
Line_7 $$ conf = createBaseKMSConf(testDir)-->Line_15 $$ conf.set(KMSACLs.Type.CREATE.getConfigKey(), KMSACLs.Type.CREATE.toString() + ",SET_KEY_MATERIAL")[ FD ]
Line_171 $$ final EncryptedKeyVersion encKv = doAs("GENERATE_EEK", new PrivilegedExceptionAction<EncryptedKeyVersion>() -->Line_181 $$ return null[ CD ]
Line_20 $$ final Configuration conf = new Configuration()-->Line_21 $$ conf.setInt(KeyProvider.DEFAULT_BITLENGTH_NAME, 128)[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_220 $$ Thread.sleep(10)[ CD ]
Line_136 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_162 $$ kp.getKeyVersion("k1@0")[ FD ]
Line_7 $$ conf = createBaseKMSConf(testDir)-->Line_11 $$ conf.set("hadoop.kms.authentication.kerberos.name.rules", "DEFAULT")[ FD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_188 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_148 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_175 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_160 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_163 $$ KeyVersion kv = kp.getCurrentKey("k1")[ FD ]
Line_2 $$ public void testACLs() throws Exception -->Line_6 $$ final File testDir = getTestDir()[ CD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_90 $$ kp.getKeyVersions("k")[ FD ]
Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_188 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_148 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_212 $$ kp.getKeysMetadata("k1")[ FD ]
Line_186 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_212 $$ kp.getKeysMetadata("k1")[ FD ]
Line_2 $$ public void testACLs() throws Exception -->Line_7 $$ conf = createBaseKMSConf(testDir)[ CD ]
Line_136 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_211 $$ kp.getMetadata("k1")[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_23 $$ doAs("client", new PrivilegedExceptionAction<Void>() [ CD ]
Line_134 $$ doAs("ROLLOVER", new PrivilegedExceptionAction<Void>() -->Line_143 $$ return null[ CD ]
Line_124 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_188 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_173 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_212 $$ kp.getKeysMetadata("k1")[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_27 $$ kp.createKey("k", new KeyProvider.Options(conf))[ FD ]
Line_160 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_211 $$ kp.getMetadata("k1")[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_222 $$ writeConf(testDir, conf)[ CD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_162 $$ kp.getKeyVersion("k1@0")[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_111 $$ doAs("DELETE", new PrivilegedExceptionAction<Void>() [ CD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_163 $$ KeyVersion kv = kp.getCurrentKey("k1")[ FD ]
Line_124 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_138 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1")[ FD ]
Line_6 $$ final File testDir = getTestDir()-->Line_7 $$ conf = createBaseKMSConf(testDir)[ FD ]
Line_124 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_162 $$ kp.getKeyVersion("k1@0")[ FD ]
Line_198 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_212 $$ kp.getKeysMetadata("k1")[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_17 $$ writeConf(testDir, conf)[ FD ]
Line_150 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1", new byte[16])-->Line_151 $$ Assert.assertNull(kv.getMaterial())[ FD ]
Line_228 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_229 $$ KeyProvider.KeyVersion kv = kp.createKey("k2", new KeyProvider.Options(conf))[ FD ]
Line_124 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_200 $$ kp.getKeys()[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_7 $$ conf = createBaseKMSConf(testDir)[ FD ]
Line_146 $$ doAs("SET_KEY_MATERIAL", new PrivilegedExceptionAction<Void>() -->Line_148 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_7 $$ conf = createBaseKMSConf(testDir)-->Line_21 $$ conf.setInt(KeyProvider.DEFAULT_BITLENGTH_NAME, 128)[ FD ]
Line_148 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_211 $$ kp.getMetadata("k1")[ FD ]
Line_134 $$ doAs("ROLLOVER", new PrivilegedExceptionAction<Void>() -->Line_136 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_229 $$ KeyProvider.KeyVersion kv = kp.createKey("k2", new KeyProvider.Options(conf))[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_138 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1")[ FD ]
Line_126 $$ KeyProvider.KeyVersion kv = kp.createKey("k1", new byte[16], new KeyProvider.Options(conf))-->Line_139 $$ Assert.assertNull(kv.getMaterial())[ FD ]
Line_2 $$ public void testACLs() throws Exception -->Line_16 $$ conf.set(KMSACLs.Type.ROLLOVER.getConfigKey(), KMSACLs.Type.ROLLOVER.toString() + ",SET_KEY_MATERIAL")[ CD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_207 $$ doAs("GET_METADATA", new PrivilegedExceptionAction<Void>() [ CD ]
Line_124 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_229 $$ KeyProvider.KeyVersion kv = kp.createKey("k2", new KeyProvider.Options(conf))[ FD ]
Line_160 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_229 $$ KeyProvider.KeyVersion kv = kp.createKey("k2", new KeyProvider.Options(conf))[ FD ]
Line_173 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_188 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_13 $$ conf.set(type.getConfigKey(), type.toString())[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_223 $$ Thread.sleep(1000)[ CD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_103 $$ KeyProvider.KeyVersion kv = kp.createKey("k0", new KeyProvider.Options(conf))[ FD ]
Line_23 $$ doAs("client", new PrivilegedExceptionAction<Void>() -->Line_96 $$ return null[ CD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_34 $$ kp.createKey("k", new byte[16], new KeyProvider.Options(conf))[ FD ]
Line_136 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_229 $$ KeyProvider.KeyVersion kv = kp.createKey("k2", new KeyProvider.Options(conf))[ FD ]
Line_186 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_211 $$ kp.getMetadata("k1")[ FD ]
Line_198 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_229 $$ KeyProvider.KeyVersion kv = kp.createKey("k2", new KeyProvider.Options(conf))[ FD ]
Line_160 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_200 $$ kp.getKeys()[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_21 $$ conf.setInt(KeyProvider.DEFAULT_BITLENGTH_NAME, 128)[ CD ]
Line_124 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_150 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1", new byte[16])[ FD ]
Line_111 $$ doAs("DELETE", new PrivilegedExceptionAction<Void>() -->Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_2 $$ public void testACLs() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_148 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_162 $$ kp.getKeyVersion("k1@0")[ FD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_175 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_9 $$ conf.set("hadoop.kms.authentication.kerberos.keytab", keytab.getAbsolutePath())[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_221 $$ conf.set(KMSACLs.Type.CREATE.getConfigKey(), "foo")[ CD ]
Line_6 $$ final File testDir = getTestDir()-->Line_222 $$ writeConf(testDir, conf)[ FD ]
Line_126 $$ KeyProvider.KeyVersion kv = kp.createKey("k1", new byte[16], new KeyProvider.Options(conf))-->Line_127 $$ Assert.assertNull(kv.getMaterial())[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_221 $$ conf.set(KMSACLs.Type.CREATE.getConfigKey(), "foo")[ FD ]
Line_7 $$ conf = createBaseKMSConf(testDir)-->Line_9 $$ conf.set("hadoop.kms.authentication.kerberos.keytab", keytab.getAbsolutePath())[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_69 $$ kp.getKeyVersion("k@0")[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ UserGroupInformation.setConfiguration(conf)[ FD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_150 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1", new byte[16])[ FD ]
Line_136 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_200 $$ kp.getKeys()[ FD ]
Line_225 $$ doAs("CREATE", new PrivilegedExceptionAction<Void>() -->Line_235 $$ return null[ CD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_184 $$ doAs("DECRYPT_EEK", new PrivilegedExceptionAction<Void>() [ CD ]
Line_186 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_229 $$ KeyProvider.KeyVersion kv = kp.createKey("k2", new KeyProvider.Options(conf))[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_175 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_11 $$ conf.set("hadoop.kms.authentication.kerberos.name.rules", "DEFAULT")[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_163 $$ KeyVersion kv = kp.getCurrentKey("k1")[ FD ]
Line_99 $$ doAs("CREATE", new PrivilegedExceptionAction<Void>() -->Line_108 $$ return null[ CD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_200 $$ kp.getKeys()[ FD ]
Line_196 $$ doAs("GET_KEYS", new PrivilegedExceptionAction<Void>() -->Line_204 $$ return null[ CD ]
Line_124 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_163 $$ KeyVersion kv = kp.getCurrentKey("k1")[ FD ]
Line_160 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_188 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_2 $$ public void testACLs() throws Exception -->Line_15 $$ conf.set(KMSACLs.Type.CREATE.getConfigKey(), KMSACLs.Type.CREATE.toString() + ",SET_KEY_MATERIAL")[ CD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_211 $$ kp.getMetadata("k1")[ FD ]
Line_207 $$ doAs("GET_METADATA", new PrivilegedExceptionAction<Void>() -->Line_216 $$ return null[ CD ]
Line_209 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_229 $$ KeyProvider.KeyVersion kv = kp.createKey("k2", new KeyProvider.Options(conf))[ FD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_162 $$ kp.getKeyVersion("k1@0")[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_22 $$ final URI uri = createKMSUri(getKMSUrl())[ CD ]
Line_122 $$ doAs("SET_KEY_MATERIAL", new PrivilegedExceptionAction<Void>() -->Line_124 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_103 $$ KeyProvider.KeyVersion kv = kp.createKey("k0", new KeyProvider.Options(conf))-->Line_127 $$ Assert.assertNull(kv.getMaterial())[ FD ]
Line_2 $$ public void testACLs() throws Exception -->Line_17 $$ writeConf(testDir, conf)[ CD ]
Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_212 $$ kp.getKeysMetadata("k1")[ FD ]
Line_173 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_200 $$ kp.getKeys()[ FD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_211 $$ kp.getMetadata("k1")[ FD ]
Line_2 $$ public void testACLs() throws Exception -->Line_8 $$ conf.set("hadoop.kms.authentication.type", "kerberos")[ CD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_20 $$ final Configuration conf = new Configuration()[ CD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_41 $$ kp.rollNewVersion("k")[ FD ]
Line_7 $$ conf = createBaseKMSConf(testDir)-->Line_13 $$ conf.set(type.getConfigKey(), type.toString())[ FD ]
Line_138 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1")-->Line_139 $$ Assert.assertNull(kv.getMaterial())[ FD ]
Line_148 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_188 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_15 $$ conf.set(KMSACLs.Type.CREATE.getConfigKey(), KMSACLs.Type.CREATE.toString() + ",SET_KEY_MATERIAL")[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_171 $$ final EncryptedKeyVersion encKv = doAs("GENERATE_EEK", new PrivilegedExceptionAction<EncryptedKeyVersion>() [ CD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_48 $$ kp.rollNewVersion("k", new byte[16])[ FD ]
Line_198 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_211 $$ kp.getMetadata("k1")[ FD ]
Line_136 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_138 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1")[ FD ]
Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_115 $$ kp.deleteKey("k0")[ FD ]
Line_158 $$ final KeyVersion currKv = doAs("GET", new PrivilegedExceptionAction<KeyVersion>() -->Line_168 $$ return null[ CD ]
Line_173 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_229 $$ KeyProvider.KeyVersion kv = kp.createKey("k2", new KeyProvider.Options(conf))[ FD ]
Line_2 $$ public void testACLs() throws Exception -->Line_4 $$ conf.set("hadoop.security.authentication", "kerberos")[ CD ]
Line_136 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_175 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_207 $$ doAs("GET_METADATA", new PrivilegedExceptionAction<Void>() -->Line_209 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_200 $$ kp.getKeys()[ FD ]
Line_209 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_212 $$ kp.getKeysMetadata("k1")[ FD ]
Line_99 $$ doAs("CREATE", new PrivilegedExceptionAction<Void>() -->Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_111 $$ doAs("DELETE", new PrivilegedExceptionAction<Void>() -->Line_119 $$ return null[ CD ]
Line_160 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_212 $$ kp.getKeysMetadata("k1")[ FD ]
Line_160 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_175 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_55 $$ kp.getKeys()[ FD ]
Line_122 $$ doAs("SET_KEY_MATERIAL", new PrivilegedExceptionAction<Void>() -->Line_131 $$ return null[ CD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_138 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1")[ FD ]
Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_229 $$ KeyProvider.KeyVersion kv = kp.createKey("k2", new KeyProvider.Options(conf))[ FD ]
Line_23 $$ doAs("client", new PrivilegedExceptionAction<Void>() -->Line_25 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_7 $$ conf = createBaseKMSConf(testDir)-->Line_221 $$ conf.set(KMSACLs.Type.CREATE.getConfigKey(), "foo")[ FD ]
Line_101 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_115 $$ kp.deleteKey("k0")[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_224 $$ KMSWebApp.getACLs().run()[ CD ]
Line_175 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_176 $$ EncryptedKeyVersion ek1 = kpCE.generateEncryptedKey(currKv.getName())[ FD ]
Line_138 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1")-->Line_151 $$ Assert.assertNull(kv.getMaterial())[ FD ]
Line_126 $$ KeyProvider.KeyVersion kv = kp.createKey("k1", new byte[16], new KeyProvider.Options(conf))-->Line_151 $$ Assert.assertNull(kv.getMaterial())[ FD ]
Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_175 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.set("hadoop.kms.authentication.type", "kerberos")[ FD ]
Line_20 $$ final Configuration conf = new Configuration()-->Line_221 $$ conf.set(KMSACLs.Type.CREATE.getConfigKey(), "foo")[ FD ]
Line_103 $$ KeyProvider.KeyVersion kv = kp.createKey("k0", new KeyProvider.Options(conf))-->Line_151 $$ Assert.assertNull(kv.getMaterial())[ FD ]
Line_136 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_188 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_162 $$ kp.getKeyVersion("k1@0")[ FD ]
Line_148 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_150 $$ KeyProvider.KeyVersion kv = kp.rollNewVersion("k1", new byte[16])[ FD ]
Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_200 $$ kp.getKeys()[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_134 $$ doAs("ROLLOVER", new PrivilegedExceptionAction<Void>() [ CD ]
Line_2 $$ public void testACLs() throws Exception -->Line_11 $$ conf.set("hadoop.kms.authentication.kerberos.name.rules", "DEFAULT")[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_21 $$ conf.setInt(KeyProvider.DEFAULT_BITLENGTH_NAME, 128)[ FD ]
Line_209 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_211 $$ kp.getMetadata("k1")[ FD ]
Line_113 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_126 $$ KeyProvider.KeyVersion kv = kp.createKey("k1", new byte[16], new KeyProvider.Options(conf))[ FD ]
Line_171 $$ final EncryptedKeyVersion encKv = doAs("GENERATE_EEK", new PrivilegedExceptionAction<EncryptedKeyVersion>() -->Line_173 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_136 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_212 $$ kp.getKeysMetadata("k1")[ FD ]
Line_7 $$ conf = createBaseKMSConf(testDir)-->Line_222 $$ writeConf(testDir, conf)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.set("hadoop.security.authentication", "kerberos")[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_225 $$ doAs("CREATE", new PrivilegedExceptionAction<Void>() [ CD ]
Line_186 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_188 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_158 $$ final KeyVersion currKv = doAs("GET", new PrivilegedExceptionAction<KeyVersion>() -->Line_160 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_20 $$ final Configuration conf = new Configuration()-->Line_222 $$ writeConf(testDir, conf)[ FD ]
Line_188 $$ KeyProviderCryptoExtension kpCE = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_189 $$ kpCE.decryptEncryptedKey(encKv)[ FD ]
Line_18 $$ runServer(null, null, testDir, new KMSCallable() -->Line_146 $$ doAs("SET_KEY_MATERIAL", new PrivilegedExceptionAction<Void>() [ CD ]
Line_148 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_200 $$ kp.getKeys()[ FD ]
