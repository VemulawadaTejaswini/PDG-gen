Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_7 $$ ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters)[ FD ]
Line_7 $$ ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters)-->Line_8 $$ scanner.setResourceLoader(parserContext.getReaderContext().getResourceLoader())[ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_10 $$ scanner.setBeanDefinitionDefaults(parserContext.getDelegate().getBeanDefinitionDefaults())[ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_12 $$ if (element.hasAttribute(RESOURCE_PATTERN_ATTRIBUTE)) [ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_5 $$ useDefaultFilters = Boolean.valueOf(element.getAttribute(USE_DEFAULT_FILTERS_ATTRIBUTE))[ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_9 $$ scanner.setEnvironment(parserContext.getReaderContext().getEnvironment())[ CD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_3 $$ boolean useDefaultFilters = true[ CD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_9 $$ scanner.setEnvironment(parserContext.getReaderContext().getEnvironment())[ FD ]
Line_12 $$ if (element.hasAttribute(RESOURCE_PATTERN_ATTRIBUTE)) -->Line_13 $$ scanner.setResourcePattern(element.getAttribute(RESOURCE_PATTERN_ATTRIBUTE))[ CD ]
Line_5 $$ useDefaultFilters = Boolean.valueOf(element.getAttribute(USE_DEFAULT_FILTERS_ATTRIBUTE))-->Line_7 $$ ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters)[ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_25 $$ parseTypeFilters(element, scanner, parserContext)[ FD ]
Line_4 $$ if (element.hasAttribute(USE_DEFAULT_FILTERS_ATTRIBUTE)) -->Line_5 $$ useDefaultFilters = Boolean.valueOf(element.getAttribute(USE_DEFAULT_FILTERS_ATTRIBUTE))[ CD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_23 $$ parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause())[ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_16 $$ parseBeanNameGenerator(element, scanner)[ FD ]
Line_7 $$ ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters)-->Line_21 $$ parseScope(element, scanner)[ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_26 $$ return scanner[ CD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_11 $$ scanner.setAutowireCandidatePatterns(parserContext.getDelegate().getAutowireCandidatePatterns())[ FD ]
Line_7 $$ ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters)-->Line_10 $$ scanner.setBeanDefinitionDefaults(parserContext.getDelegate().getBeanDefinitionDefaults())[ FD ]
Line_7 $$ ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters)-->Line_13 $$ scanner.setResourcePattern(element.getAttribute(RESOURCE_PATTERN_ATTRIBUTE))[ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_12 $$ if (element.hasAttribute(RESOURCE_PATTERN_ATTRIBUTE)) [ CD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_8 $$ scanner.setResourceLoader(parserContext.getReaderContext().getResourceLoader())[ CD ]
Line_7 $$ ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters)-->Line_16 $$ parseBeanNameGenerator(element, scanner)[ FD ]
Line_3 $$ boolean useDefaultFilters = true-->Line_5 $$ useDefaultFilters = Boolean.valueOf(element.getAttribute(USE_DEFAULT_FILTERS_ATTRIBUTE))[ FD ]
Line_7 $$ ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters)-->Line_11 $$ scanner.setAutowireCandidatePatterns(parserContext.getDelegate().getAutowireCandidatePatterns())[ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_7 $$ ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters)[ CD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_10 $$ scanner.setBeanDefinitionDefaults(parserContext.getDelegate().getBeanDefinitionDefaults())[ CD ]
Line_7 $$ ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters)-->Line_9 $$ scanner.setEnvironment(parserContext.getReaderContext().getEnvironment())[ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_11 $$ scanner.setAutowireCandidatePatterns(parserContext.getDelegate().getAutowireCandidatePatterns())[ CD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_25 $$ parseTypeFilters(element, scanner, parserContext)[ CD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_4 $$ if (element.hasAttribute(USE_DEFAULT_FILTERS_ATTRIBUTE)) [ CD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_4 $$ if (element.hasAttribute(USE_DEFAULT_FILTERS_ATTRIBUTE)) [ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_13 $$ scanner.setResourcePattern(element.getAttribute(RESOURCE_PATTERN_ATTRIBUTE))[ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_21 $$ parseScope(element, scanner)[ FD ]
Line_3 $$ boolean useDefaultFilters = true-->Line_7 $$ ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters)[ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_8 $$ scanner.setResourceLoader(parserContext.getReaderContext().getResourceLoader())[ FD ]
Line_2 $$ protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) -->Line_18 $$ parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause())[ FD ]
Line_7 $$ ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters)-->Line_25 $$ parseTypeFilters(element, scanner, parserContext)[ FD ]
