Line_3 $$ Setting<Integer> testSetting = Setting.intSetting("foo.bar", 1, true, Setting.Scope.CLUSTER)-->Line_7 $$ service.addSettingsUpdateConsumer(testSetting, consumer::<>set)[ FD ]
Line_2 $$ public void testAddConsumer() -->Line_24 $$ assertEquals(0, consumer.get())[ CD ]
Line_2 $$ public void testAddConsumer() -->Line_6 $$ AtomicInteger consumer = new AtomicInteger()[ CD ]
Line_2 $$ public void testAddConsumer() -->Line_7 $$ service.addSettingsUpdateConsumer(testSetting, consumer::<>set)[ CD ]
Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, Collections.singleton(testSetting))-->Line_10 $$ service.addSettingsUpdateConsumer(testSetting2, consumer2::<>set)[ FD ]
Line_3 $$ Setting<Integer> testSetting = Setting.intSetting("foo.bar", 1, true, Setting.Scope.CLUSTER)-->Line_16 $$ service.addSettingsUpdateConsumer(testSetting, testSetting2, ( a,  b) -> [ FD ]
Line_2 $$ public void testAddConsumer() -->Line_8 $$ AtomicInteger consumer2 = new AtomicInteger()[ CD ]
Line_4 $$ Setting<Integer> testSetting2 = Setting.intSetting("foo.bar.baz", 1, true, Setting.Scope.CLUSTER)-->Line_10 $$ service.addSettingsUpdateConsumer(testSetting2, consumer2::<>set)[ FD ]
Line_2 $$ public void testAddConsumer() -->Line_26 $$ service.applySettings(Settings.builder().put("foo.bar", 2).put("foo.bar.baz", 15).build())[ CD ]
Line_8 $$ AtomicInteger consumer2 = new AtomicInteger()-->Line_18 $$ consumer2.set(b)[ FD ]
Line_8 $$ AtomicInteger consumer2 = new AtomicInteger()-->Line_28 $$ assertEquals(0, consumer2.get())[ FD ]
Line_2 $$ public void testAddConsumer() -->Line_3 $$ Setting<Integer> testSetting = Setting.intSetting("foo.bar", 1, true, Setting.Scope.CLUSTER)[ CD ]
Line_2 $$ public void testAddConsumer() -->Line_27 $$ assertEquals(2, consumer.get())[ CD ]
Line_2 $$ public void testAddConsumer() -->Line_28 $$ assertEquals(0, consumer2.get())[ CD ]
Line_6 $$ AtomicInteger consumer = new AtomicInteger()-->Line_24 $$ assertEquals(0, consumer.get())[ FD ]
Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, Collections.singleton(testSetting))-->Line_26 $$ service.applySettings(Settings.builder().put("foo.bar", 2).put("foo.bar.baz", 15).build())[ FD ]
Line_3 $$ Setting<Integer> testSetting = Setting.intSetting("foo.bar", 1, true, Setting.Scope.CLUSTER)-->Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, Collections.singleton(testSetting))[ FD ]
Line_2 $$ public void testAddConsumer() -->Line_4 $$ Setting<Integer> testSetting2 = Setting.intSetting("foo.bar.baz", 1, true, Setting.Scope.CLUSTER)[ CD ]
Line_2 $$ public void testAddConsumer() -->Line_25 $$ assertEquals(0, consumer2.get())[ CD ]
Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, Collections.singleton(testSetting))-->Line_7 $$ service.addSettingsUpdateConsumer(testSetting, consumer::<>set)[ FD ]
Line_8 $$ AtomicInteger consumer2 = new AtomicInteger()-->Line_25 $$ assertEquals(0, consumer2.get())[ FD ]
Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, Collections.singleton(testSetting))-->Line_16 $$ service.addSettingsUpdateConsumer(testSetting, testSetting2, ( a,  b) -> [ FD ]
Line_2 $$ public void testAddConsumer() -->Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, Collections.singleton(testSetting))[ CD ]
Line_6 $$ AtomicInteger consumer = new AtomicInteger()-->Line_17 $$ consumer.set(a)[ FD ]
Line_6 $$ AtomicInteger consumer = new AtomicInteger()-->Line_27 $$ assertEquals(2, consumer.get())[ FD ]
Line_4 $$ Setting<Integer> testSetting2 = Setting.intSetting("foo.bar.baz", 1, true, Setting.Scope.CLUSTER)-->Line_16 $$ service.addSettingsUpdateConsumer(testSetting, testSetting2, ( a,  b) -> [ FD ]
