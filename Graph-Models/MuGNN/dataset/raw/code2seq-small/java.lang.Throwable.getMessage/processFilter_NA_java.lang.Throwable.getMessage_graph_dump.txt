Line_30 $$ String redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT)-->Line_31 $$ if (Validator.isNotNull(redirect)) [ FD ]
Line_38 $$ if (PropsValues.PORTAL_JAAS_ENABLE) -->Line_39 $$ return[ CD ]
Line_52 $$ StringBundler sb = new StringBundler(4)-->Line_60 $$ _log.warn(sb.toString())[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_5 $$ if (PortalInstances.isAutoLoginIgnoreHost(host)) [ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_3 $$ HttpSession session = request.getSession()[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_25 $$ String jUserName = (String) session.getAttribute("j_username")[ CD ]
Line_52 $$ StringBundler sb = new StringBundler(4)-->Line_63 $$ _log.error(sb.toString())[ FD ]
Line_30 $$ String redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT)-->Line_46 $$ if (Validator.isNotNull(redirect)) [ FD ]
Line_18 $$ if (_log.isDebugEnabled()) -->Line_19 $$ _log.debug("Ignore path " + path)[ CD ]
Line_27 $$ for (AutoLogin autoLogin : _autoLogins) -->Line_29 $$ String[] credentials = autoLogin.login(request, response)[ FD ]
Line_36 $$ if (loginRemoteUser != null) -->Line_46 $$ if (Validator.isNotNull(redirect)) [ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_44 $$ redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT_AND_CONTINUE)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_3 $$ HttpSession session = request.getSession()[ FD ]
Line_12 $$ String contextPath = PortalUtil.getPathContext()-->Line_15 $$ path = path.substring(contextPath.length())[ FD ]
Line_41 $$ if (!PropsValues.AUTH_FORWARD_BY_LAST_PATH) -->Line_44 $$ redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT_AND_CONTINUE)[ CD ]
Line_5 $$ if (PortalInstances.isAutoLoginIgnoreHost(host)) -->Line_9 $$ processFilter(AutoLoginFilter.class.getName(), request, response, filterChain)[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_54 $$ String currentURL = PortalUtil.getCurrentURL(request)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_12 $$ String contextPath = PortalUtil.getPathContext()[ CD ]
Line_46 $$ if (Validator.isNotNull(redirect)) -->Line_48 $$ return[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_32 $$ response.sendRedirect(redirect)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_4 $$ String host = PortalUtil.getHost(request)[ CD ]
Line_6 $$ if (_log.isDebugEnabled()) -->Line_7 $$ _log.debug("Ignore host " + host)[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_13 $$ String path = StringUtil.toLowerCase(request.getRequestURI())[ CD ]
Line_36 $$ if (loginRemoteUser != null) -->Line_41 $$ if (!PropsValues.AUTH_FORWARD_BY_LAST_PATH) [ CD ]
Line_3 $$ HttpSession session = request.getSession()-->Line_35 $$ String loginRemoteUser = getLoginRemoteUser(request, response, session, credentials)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_35 $$ String loginRemoteUser = getLoginRemoteUser(request, response, session, credentials)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_26 $$ if (!PropsValues.AUTH_LOGIN_DISABLED && (remoteUser == null) && (jUserName == null)) [ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_9 $$ processFilter(AutoLoginFilter.class.getName(), request, response, filterChain)[ FD ]
Line_14 $$ if (!contextPath.equals(StringPool.SLASH) && path.contains(contextPath)) -->Line_15 $$ path = path.substring(contextPath.length())[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_24 $$ String remoteUser = request.getRemoteUser()[ CD ]
Line_12 $$ String contextPath = PortalUtil.getPathContext()-->Line_14 $$ if (!contextPath.equals(StringPool.SLASH) && path.contains(contextPath)) [ FD ]
Line_30 $$ String redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT)-->Line_44 $$ redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT_AND_CONTINUE)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_21 $$ processFilter(AutoLoginFilter.class.getName(), request, response, filterChain)[ FD ]
Line_36 $$ if (loginRemoteUser != null) -->Line_38 $$ if (PropsValues.PORTAL_JAAS_ENABLE) [ CD ]
Line_5 $$ if (PortalInstances.isAutoLoginIgnoreHost(host)) -->Line_10 $$ return[ CD ]
Line_13 $$ String path = StringUtil.toLowerCase(request.getRequestURI())-->Line_14 $$ if (!contextPath.equals(StringPool.SLASH) && path.contains(contextPath)) [ FD ]
Line_37 $$ request = new ProtectedServletRequest(request, loginRemoteUser)-->Line_54 $$ String currentURL = PortalUtil.getCurrentURL(request)[ FD ]
Line_54 $$ String currentURL = PortalUtil.getCurrentURL(request)-->Line_58 $$ if (currentURL.endsWith(_PATH_CHAT_LATEST)) [ FD ]
Line_13 $$ String path = StringUtil.toLowerCase(request.getRequestURI())-->Line_15 $$ path = path.substring(contextPath.length())[ FD ]
Line_52 $$ StringBundler sb = new StringBundler(4)-->Line_53 $$ sb.append("Current URL ")[ FD ]
Line_54 $$ String currentURL = PortalUtil.getCurrentURL(request)-->Line_55 $$ sb.append(currentURL)[ FD ]
Line_42 $$ redirect = Portal.PATH_MAIN-->Line_44 $$ redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT_AND_CONTINUE)[ FD ]
Line_31 $$ if (Validator.isNotNull(redirect)) -->Line_33 $$ return[ CD ]
Line_29 $$ String[] credentials = autoLogin.login(request, response)-->Line_35 $$ String loginRemoteUser = getLoginRemoteUser(request, response, session, credentials)[ FD ]
Line_52 $$ StringBundler sb = new StringBundler(4)-->Line_55 $$ sb.append(currentURL)[ FD ]
Line_59 $$ if (_log.isWarnEnabled()) -->Line_60 $$ _log.warn(sb.toString())[ CD ]
Line_46 $$ if (Validator.isNotNull(redirect)) -->Line_47 $$ response.sendRedirect(redirect)[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_24 $$ String remoteUser = request.getRemoteUser()[ FD ]
Line_36 $$ if (loginRemoteUser != null) -->Line_37 $$ request = new ProtectedServletRequest(request, loginRemoteUser)[ CD ]
Line_37 $$ request = new ProtectedServletRequest(request, loginRemoteUser)-->Line_68 $$ processFilter(AutoLoginFilter.class.getName(), request, response, filterChain)[ FD ]
Line_30 $$ String redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT)-->Line_42 $$ redirect = Portal.PATH_MAIN[ FD ]
Line_44 $$ redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT_AND_CONTINUE)-->Line_46 $$ if (Validator.isNotNull(redirect)) [ FD ]
Line_15 $$ path = path.substring(contextPath.length())-->Line_17 $$ if (PortalInstances.isAutoLoginIgnorePath(path)) [ FD ]
Line_58 $$ if (currentURL.endsWith(_PATH_CHAT_LATEST)) -->Line_59 $$ if (_log.isWarnEnabled()) [ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_30 $$ String redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT)[ FD ]
Line_35 $$ String loginRemoteUser = getLoginRemoteUser(request, response, session, credentials)-->Line_36 $$ if (loginRemoteUser != null) [ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_37 $$ request = new ProtectedServletRequest(request, loginRemoteUser)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_13 $$ String path = StringUtil.toLowerCase(request.getRequestURI())[ FD ]
Line_31 $$ if (Validator.isNotNull(redirect)) -->Line_32 $$ response.sendRedirect(redirect)[ CD ]
Line_52 $$ StringBundler sb = new StringBundler(4)-->Line_57 $$ sb.append(e.getMessage())[ FD ]
Line_4 $$ String host = PortalUtil.getHost(request)-->Line_5 $$ if (PortalInstances.isAutoLoginIgnoreHost(host)) [ FD ]
Line_42 $$ redirect = Portal.PATH_MAIN-->Line_46 $$ if (Validator.isNotNull(redirect)) [ FD ]
Line_17 $$ if (PortalInstances.isAutoLoginIgnorePath(path)) -->Line_18 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_14 $$ if (!contextPath.equals(StringPool.SLASH) && path.contains(contextPath)) [ CD ]
Line_44 $$ redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT_AND_CONTINUE)-->Line_47 $$ response.sendRedirect(redirect)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_68 $$ processFilter(AutoLoginFilter.class.getName(), request, response, filterChain)[ FD ]
Line_30 $$ String redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT)-->Line_47 $$ response.sendRedirect(redirect)[ FD ]
Line_52 $$ StringBundler sb = new StringBundler(4)-->Line_56 $$ sb.append(" generates exception: ")[ FD ]
Line_3 $$ HttpSession session = request.getSession()-->Line_25 $$ String jUserName = (String) session.getAttribute("j_username")[ FD ]
Line_58 $$ if (currentURL.endsWith(_PATH_CHAT_LATEST)) -->Line_63 $$ _log.error(sb.toString())[ CD ]
Line_17 $$ if (PortalInstances.isAutoLoginIgnorePath(path)) -->Line_21 $$ processFilter(AutoLoginFilter.class.getName(), request, response, filterChain)[ CD ]
Line_17 $$ if (PortalInstances.isAutoLoginIgnorePath(path)) -->Line_22 $$ return[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_68 $$ processFilter(AutoLoginFilter.class.getName(), request, response, filterChain)[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_4 $$ String host = PortalUtil.getHost(request)[ FD ]
Line_42 $$ redirect = Portal.PATH_MAIN-->Line_47 $$ response.sendRedirect(redirect)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_29 $$ String[] credentials = autoLogin.login(request, response)[ FD ]
Line_30 $$ String redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT)-->Line_32 $$ response.sendRedirect(redirect)[ FD ]
Line_5 $$ if (PortalInstances.isAutoLoginIgnoreHost(host)) -->Line_6 $$ if (_log.isDebugEnabled()) [ CD ]
Line_13 $$ String path = StringUtil.toLowerCase(request.getRequestURI())-->Line_17 $$ if (PortalInstances.isAutoLoginIgnorePath(path)) [ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_47 $$ response.sendRedirect(redirect)[ FD ]
Line_41 $$ if (!PropsValues.AUTH_FORWARD_BY_LAST_PATH) -->Line_42 $$ redirect = Portal.PATH_MAIN[ CD ]
Line_37 $$ request = new ProtectedServletRequest(request, loginRemoteUser)-->Line_44 $$ redirect = (String) request.getAttribute(AutoLogin.AUTO_LOGIN_REDIRECT_AND_CONTINUE)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_17 $$ if (PortalInstances.isAutoLoginIgnorePath(path)) [ CD ]
