Line_19 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).execute().actionGet()-->Line_20 $$ assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(), equalTo(0))[ FD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_5 $$ internalCluster().startNode(nodeSettings)[ CD ]
Line_6 $$ Client client = client()-->Line_12 $$ client.admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2).put(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(), random, TimeUnit.MINUTES)).execute().actionGet()[ FD ]
Line_19 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).execute().actionGet()-->Line_21 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(0))[ FD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_20 $$ assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(), equalTo(0))[ CD ]
Line_6 $$ Client client = client()-->Line_19 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).execute().actionGet()[ FD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_9 $$ assertThat(client.admin().cluster().prepareHealth().setWaitForNodes("2").get().isTimedOut(), equalTo(false))[ CD ]
Line_6 $$ Client client = client()-->Line_13 $$ assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsTime(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(), TimeValue.timeValueMinutes(1)).millis(), equalTo(TimeValue.timeValueMinutes(random).millis()))[ FD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_10 $$ int random = randomIntBetween(10, 42)[ CD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_16 $$ PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", randomRepoPath())).execute().actionGet()[ CD ]
Line_4 $$ Settings nodeSettings = settingsBuilder().put("discovery.type", "zen").put(ZenDiscovery.SETTING_PING_TIMEOUT, "200ms").put("discovery.initial_state_timeout", "500ms").build()-->Line_5 $$ internalCluster().startNode(nodeSettings)[ FD ]
Line_7 $$ String secondNode = internalCluster().startNode(nodeSettings)-->Line_26 $$ stopNode(secondNode)[ FD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_4 $$ Settings nodeSettings = settingsBuilder().put("discovery.type", "zen").put(ZenDiscovery.SETTING_PING_TIMEOUT, "200ms").put("discovery.initial_state_timeout", "500ms").build()[ CD ]
Line_6 $$ Client client = client()-->Line_9 $$ assertThat(client.admin().cluster().prepareHealth().setWaitForNodes("2").get().isTimedOut(), equalTo(false))[ FD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_14 $$ assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsInt(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), -1), equalTo(2))[ CD ]
Line_6 $$ Client client = client()-->Line_22 $$ assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").execute().actionGet().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS))[ FD ]
Line_10 $$ int random = randomIntBetween(10, 42)-->Line_12 $$ client.admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2).put(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(), random, TimeUnit.MINUTES)).execute().actionGet()[ FD ]
Line_4 $$ Settings nodeSettings = settingsBuilder().put("discovery.type", "zen").put(ZenDiscovery.SETTING_PING_TIMEOUT, "200ms").put("discovery.initial_state_timeout", "500ms").build()-->Line_7 $$ String secondNode = internalCluster().startNode(nodeSettings)[ FD ]
Line_6 $$ Client client = client()-->Line_14 $$ assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsInt(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), -1), equalTo(2))[ FD ]
Line_6 $$ Client client = client()-->Line_24 $$ client.admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 1).put(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(), TimeValue.timeValueMinutes(1))).execute().actionGet()[ FD ]
Line_6 $$ Client client = client()-->Line_37 $$ assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsInt(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), -1), not(equalTo(2)))[ FD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_19 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).execute().actionGet()[ CD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_26 $$ stopNode(secondNode)[ CD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_25 $$ assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsTime(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(), TimeValue.timeValueMinutes(1)).millis(), equalTo(TimeValue.timeValueMinutes(1).millis()))[ CD ]
Line_6 $$ Client client = client()-->Line_27 $$ assertThat(client.admin().cluster().prepareHealth().setWaitForNodes("1").get().isTimedOut(), equalTo(false))[ FD ]
Line_16 $$ PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", randomRepoPath())).execute().actionGet()-->Line_17 $$ assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true))[ FD ]
Line_6 $$ Client client = client()-->Line_25 $$ assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsTime(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(), TimeValue.timeValueMinutes(1)).millis(), equalTo(TimeValue.timeValueMinutes(1).millis()))[ FD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_17 $$ assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true))[ CD ]
Line_6 $$ Client client = client()-->Line_16 $$ PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", randomRepoPath())).execute().actionGet()[ FD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_7 $$ String secondNode = internalCluster().startNode(nodeSettings)[ CD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_13 $$ assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsTime(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(), TimeValue.timeValueMinutes(1)).millis(), equalTo(TimeValue.timeValueMinutes(random).millis()))[ CD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_12 $$ client.admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2).put(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(), random, TimeUnit.MINUTES)).execute().actionGet()[ CD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_37 $$ assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsInt(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), -1), not(equalTo(2)))[ CD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_22 $$ assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").execute().actionGet().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS))[ CD ]
Line_10 $$ int random = randomIntBetween(10, 42)-->Line_13 $$ assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsTime(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(), TimeValue.timeValueMinutes(1)).millis(), equalTo(TimeValue.timeValueMinutes(random).millis()))[ FD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_24 $$ client.admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 1).put(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(), TimeValue.timeValueMinutes(1))).execute().actionGet()[ CD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_27 $$ assertThat(client.admin().cluster().prepareHealth().setWaitForNodes("1").get().isTimedOut(), equalTo(false))[ CD ]
Line_6 $$ Client client = client()-->Line_30 $$ client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setRestoreGlobalState(true).setWaitForCompletion(true).execute().actionGet()[ FD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_6 $$ Client client = client()[ CD ]
Line_2 $$ public void testRestorePersistentSettings() throws Exception -->Line_21 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(0))[ CD ]
