Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_56 $$ Assert.assertTrue(localrsrc.containsKey(lr))[ FD ]
Line_17 $$ ResourceEvent reqEvent1 = new ResourceRequestEvent(lr, LocalResourceVisibility.PRIVATE, lc1)-->Line_19 $$ tracker.handle(reqEvent1)[ FD ]
Line_7 $$ dispatcher = createDispatcher(conf)-->Line_72 $$ dispatcher.stop()[ FD ]
Line_71 $$ if (dispatcher != null) -->Line_72 $$ dispatcher.stop()[ CD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_34 $$ LocalizedResource localizedResource = localrsrc.get(lr)[ FD ]
Line_7 $$ dispatcher = createDispatcher(conf)-->Line_47 $$ dispatcher.await()[ FD ]
Line_7 $$ dispatcher = createDispatcher(conf)-->Line_10 $$ dispatcher.register(LocalizerEventType.class, localizerEventHandler)[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_22 $$ Assert.assertTrue(localrsrc.containsKey(lr))[ FD ]
Line_7 $$ dispatcher = createDispatcher(conf)-->Line_30 $$ dispatcher.await()[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_65 $$ Assert.assertEquals(1, localrsrc.get(lr).getRefCount())[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_58 $$ Assert.assertTrue(localrsrc.get(lr).ref.contains(cId3))[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_25 $$ Assert.assertEquals(ResourceState.DOWNLOADING, localrsrc.get(lr).getState())[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_37 $$ Assert.assertEquals(0, localrsrc.size())[ FD ]
Line_9 $$ EventHandler<ContainerEvent> containerEventHandler = mock(EventHandler.class)-->Line_63 $$ verify(containerEventHandler, times(1)).handle(isA(ContainerResourceLocalizedEvent.class))[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_7 $$ dispatcher = createDispatcher(conf)[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_31 $$ Assert.assertEquals(2, localrsrc.get(lr).getRefCount())[ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_64 $$ Assert.assertEquals(ResourceState.LOCALIZED, localrsrc.get(lr).getState())[ FD ]
Line_13 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, true, conf, new NMNullStateStoreService())-->Line_19 $$ tracker.handle(reqEvent1)[ FD ]
Line_45 $$ ResourceEvent reqEvent3 = new ResourceRequestEvent(lr, LocalResourceVisibility.PRIVATE, lc3)-->Line_46 $$ tracker.handle(reqEvent3)[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_55 $$ Assert.assertEquals(1, localrsrc.size())[ FD ]
Line_7 $$ dispatcher = createDispatcher(conf)-->Line_11 $$ dispatcher.register(ContainerEventType.class, containerEventHandler)[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_48 $$ Assert.assertEquals(1, localrsrc.size())[ FD ]
Line_7 $$ dispatcher = createDispatcher(conf)-->Line_62 $$ dispatcher.await()[ FD ]
Line_13 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, true, conf, new NMNullStateStoreService())-->Line_41 $$ tracker.handle(relEvent1)[ FD ]
Line_3 $$ String user = "testuser"-->Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_21 $$ Assert.assertEquals(1, localrsrc.size())[ FD ]
Line_13 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, true, conf, new NMNullStateStoreService())-->Line_46 $$ tracker.handle(reqEvent3)[ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_24 $$ Assert.assertTrue(localrsrc.get(lr).ref.contains(cId1))[ FD ]
Line_7 $$ dispatcher = createDispatcher(conf)-->Line_54 $$ dispatcher.await()[ FD ]
Line_7 $$ dispatcher = createDispatcher(conf)-->Line_42 $$ dispatcher.await()[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_30 $$ dispatcher.await()[ FD ]
Line_26 $$ ContainerId cId2 = BuilderUtils.newContainerId(1, 1, 1, 2)-->Line_32 $$ Assert.assertTrue(localrsrc.get(lr).ref.contains(cId2))[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_50 $$ Assert.assertEquals(1, localrsrc.get(lr).getRefCount())[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_32 $$ Assert.assertTrue(localrsrc.get(lr).ref.contains(cId2))[ FD ]
Line_9 $$ EventHandler<ContainerEvent> containerEventHandler = mock(EventHandler.class)-->Line_11 $$ dispatcher.register(ContainerEventType.class, containerEventHandler)[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_36 $$ dispatcher.await()[ FD ]
Line_15 $$ ContainerId cId1 = BuilderUtils.newContainerId(1, 1, 1, 1)-->Line_24 $$ Assert.assertTrue(localrsrc.get(lr).ref.contains(cId1))[ FD ]
Line_7 $$ dispatcher = createDispatcher(conf)-->Line_71 $$ if (dispatcher != null) [ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_23 $$ Assert.assertEquals(1, localrsrc.get(lr).getRefCount())[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_71 $$ if (dispatcher != null) [ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_57 $$ Assert.assertEquals(1, localrsrc.get(lr).getRefCount())[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_42 $$ dispatcher.await()[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_23 $$ Assert.assertEquals(1, localrsrc.get(lr).getRefCount())[ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_58 $$ Assert.assertTrue(localrsrc.get(lr).ref.contains(cId3))[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_24 $$ Assert.assertTrue(localrsrc.get(lr).ref.contains(cId1))[ FD ]
Line_28 $$ ResourceEvent reqEvent2 = new ResourceRequestEvent(lr, LocalResourceVisibility.PRIVATE, lc2)-->Line_29 $$ tracker.handle(reqEvent2)[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_49 $$ Assert.assertTrue(localrsrc.containsKey(lr))[ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_51 $$ Assert.assertTrue(localrsrc.get(lr).ref.contains(cId3))[ FD ]
Line_13 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, true, conf, new NMNullStateStoreService())-->Line_29 $$ tracker.handle(reqEvent2)[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_11 $$ dispatcher.register(ContainerEventType.class, containerEventHandler)[ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_32 $$ Assert.assertTrue(localrsrc.get(lr).ref.contains(cId2))[ FD ]
Line_43 $$ ContainerId cId3 = BuilderUtils.newContainerId(1, 1, 1, 3)-->Line_58 $$ Assert.assertTrue(localrsrc.get(lr).ref.contains(cId3))[ FD ]
Line_13 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, true, conf, new NMNullStateStoreService())-->Line_35 $$ tracker.handle(resourceFailedEvent)[ FD ]
Line_52 $$ ResourceReleaseEvent relEvent2 = new ResourceReleaseEvent(lr, cId2)-->Line_53 $$ tracker.handle(relEvent2)[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_72 $$ dispatcher.stop()[ FD ]
Line_66 $$ ResourceReleaseEvent relEvent3 = new ResourceReleaseEvent(lr, cId3)-->Line_67 $$ tracker.handle(relEvent3)[ FD ]
Line_7 $$ dispatcher = createDispatcher(conf)-->Line_36 $$ dispatcher.await()[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_7 $$ dispatcher = createDispatcher(conf)[ FD ]
Line_33 $$ ResourceEvent resourceFailedEvent = new ResourceFailedLocalizationEvent(lr, (new Exception("test").getMessage()))-->Line_35 $$ tracker.handle(resourceFailedEvent)[ FD ]
Line_13 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, true, conf, new NMNullStateStoreService())-->Line_61 $$ tracker.handle(localizedEvent)[ FD ]
Line_60 $$ ResourceLocalizedEvent localizedEvent = new ResourceLocalizedEvent(lr, localizedPath, 123L)-->Line_61 $$ tracker.handle(localizedEvent)[ FD ]
Line_7 $$ dispatcher = createDispatcher(conf)-->Line_20 $$ dispatcher.await()[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_62 $$ dispatcher.await()[ FD ]
Line_2 $$ public void testLocalResourceCache() -->Line_4 $$ DrainDispatcher dispatcher = null[ CD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_25 $$ Assert.assertEquals(ResourceState.DOWNLOADING, localrsrc.get(lr).getState())[ FD ]
Line_13 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, true, conf, new NMNullStateStoreService())-->Line_53 $$ tracker.handle(relEvent2)[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_20 $$ dispatcher.await()[ FD ]
Line_13 $$ LocalResourcesTracker tracker = new LocalResourcesTrackerImpl(user, null, dispatcher, localrsrc, true, conf, new NMNullStateStoreService())-->Line_67 $$ tracker.handle(relEvent3)[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_69 $$ Assert.assertEquals(0, localrsrc.get(lr).getRefCount())[ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_31 $$ Assert.assertEquals(2, localrsrc.get(lr).getRefCount())[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_64 $$ Assert.assertEquals(ResourceState.LOCALIZED, localrsrc.get(lr).getState())[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_47 $$ dispatcher.await()[ FD ]
Line_8 $$ EventHandler<LocalizerEvent> localizerEventHandler = mock(EventHandler.class)-->Line_10 $$ dispatcher.register(LocalizerEventType.class, localizerEventHandler)[ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_50 $$ Assert.assertEquals(1, localrsrc.get(lr).getRefCount())[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_56 $$ Assert.assertTrue(localrsrc.containsKey(lr))[ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_22 $$ Assert.assertTrue(localrsrc.containsKey(lr))[ FD ]
Line_2 $$ public void testLocalResourceCache() -->Line_3 $$ String user = "testuser"[ CD ]
Line_9 $$ EventHandler<ContainerEvent> containerEventHandler = mock(EventHandler.class)-->Line_38 $$ verify(containerEventHandler, times(2)).handle(isA(ContainerResourceFailedEvent.class))[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_51 $$ Assert.assertTrue(localrsrc.get(lr).ref.contains(cId3))[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_57 $$ Assert.assertEquals(1, localrsrc.get(lr).getRefCount())[ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_34 $$ LocalizedResource localizedResource = localrsrc.get(lr)[ FD ]
Line_34 $$ LocalizedResource localizedResource = localrsrc.get(lr)-->Line_39 $$ Assert.assertEquals(ResourceState.FAILED, localizedResource.getState())[ FD ]
Line_43 $$ ContainerId cId3 = BuilderUtils.newContainerId(1, 1, 1, 3)-->Line_51 $$ Assert.assertTrue(localrsrc.get(lr).ref.contains(cId3))[ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_49 $$ Assert.assertTrue(localrsrc.containsKey(lr))[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_68 $$ dispatcher.await()[ FD ]
Line_7 $$ dispatcher = createDispatcher(conf)-->Line_68 $$ dispatcher.await()[ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_69 $$ Assert.assertEquals(0, localrsrc.get(lr).getRefCount())[ FD ]
Line_14 $$ LocalResourceRequest lr = createLocalResourceRequest(user, 1, 1, LocalResourceVisibility.PUBLIC)-->Line_65 $$ Assert.assertEquals(1, localrsrc.get(lr).getRefCount())[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_10 $$ dispatcher.register(LocalizerEventType.class, localizerEventHandler)[ FD ]
Line_40 $$ ResourceReleaseEvent relEvent1 = new ResourceReleaseEvent(lr, cId1)-->Line_41 $$ tracker.handle(relEvent1)[ FD ]
Line_12 $$ ConcurrentMap<LocalResourceRequest, LocalizedResource> localrsrc = new ConcurrentHashMap<LocalResourceRequest, LocalizedResource>()-->Line_18 $$ Assert.assertEquals(0, localrsrc.size())[ FD ]
Line_4 $$ DrainDispatcher dispatcher = null-->Line_54 $$ dispatcher.await()[ FD ]
