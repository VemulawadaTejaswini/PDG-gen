Line_3 $$ Map<Integer, CompressionLevel> compressionLevels = ReflectionTestUtil.getFieldValue(CompressionLevel.class, "_compressionLevels")-->Line_5 $$ for (Map.Entry<Integer, CompressionLevel> entry : compressionLevels.entrySet()) [ FD ]
Line_6 $$ CompressionLevel compressionLevel = entry.getValue()-->Line_7 $$ Assert.assertEquals(entry.getKey(), Integer.valueOf(compressionLevel.getLevel()))[ FD ]
Line_2 $$ public void testLookupTable() -->Line_4 $$ Assert.assertEquals(EnumSet.allOf(CompressionLevel.class), new HashSet<CompressionLevel>(compressionLevels.values()))[ CD ]
Line_5 $$ for (Map.Entry<Integer, CompressionLevel> entry : compressionLevels.entrySet()) -->Line_7 $$ Assert.assertEquals(entry.getKey(), Integer.valueOf(compressionLevel.getLevel()))[ FD ]
Line_5 $$ for (Map.Entry<Integer, CompressionLevel> entry : compressionLevels.entrySet()) -->Line_6 $$ CompressionLevel compressionLevel = entry.getValue()[ FD ]
Line_2 $$ public void testLookupTable() -->Line_3 $$ Map<Integer, CompressionLevel> compressionLevels = ReflectionTestUtil.getFieldValue(CompressionLevel.class, "_compressionLevels")[ CD ]
Line_2 $$ public void testLookupTable() -->Line_9 $$ Assert.assertSame(CompressionLevel.BEST_COMPRESSION, CompressionLevel.getCompressionLevel(Deflater.BEST_COMPRESSION))[ CD ]
Line_3 $$ Map<Integer, CompressionLevel> compressionLevels = ReflectionTestUtil.getFieldValue(CompressionLevel.class, "_compressionLevels")-->Line_4 $$ Assert.assertEquals(EnumSet.allOf(CompressionLevel.class), new HashSet<CompressionLevel>(compressionLevels.values()))[ FD ]
