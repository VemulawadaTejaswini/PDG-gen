Line_18 $$ if (course == null || course.getLessons().isEmpty() || StringUtil.isEmptyOrSpaces(course.getLessons().get(0).getName())) -->Line_26 $$ course = EduUtils.transformOldCourse(oldCourse)[ CD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_11 $$ final CCProjectService service = CCProjectService.getInstance(project)[ CD ]
Line_12 $$ Reader reader = null-->Line_64 $$ reader.close()[ FD ]
Line_43 $$ for (final Map.Entry<String, TaskFile> entry : task.getTaskFiles().entrySet()) -->Line_46 $$ createAnswerFile(project, taskDir, taskDir, entry)[ FD ]
Line_12 $$ Reader reader = null-->Line_24 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))[ FD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_9 $$ if (basePath == null)[ CD ]
Line_37 $$ for (Task task : lesson.getTaskList()) -->Line_39 $$ task.setIndex(taskIndex)[ FD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_70 $$ synchronize(project)[ CD ]
Line_26 $$ course = EduUtils.transformOldCourse(oldCourse)-->Line_28 $$ service.setCourse(course)[ FD ]
Line_30 $$ int index = 1-->Line_34 $$ lesson.setIndex(index)[ FD ]
Line_17 $$ Course course = gson.fromJson(reader, Course.class)-->Line_28 $$ service.setCourse(course)[ FD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_4 $$ final VirtualFile virtualFile = FileChooser.chooseFile(descriptor, project, null)[ FD ]
Line_16 $$ Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create()-->Line_25 $$ OldCourse oldCourse = gson.fromJson(reader, OldCourse.class)[ FD ]
Line_15 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))-->Line_20 $$ reader.close()[ FD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_29 $$ project.getBaseDir().refresh(false, true)[ FD ]
Line_25 $$ OldCourse oldCourse = gson.fromJson(reader, OldCourse.class)-->Line_26 $$ course = EduUtils.transformOldCourse(oldCourse)[ FD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_5 $$ if (virtualFile == null) [ CD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_33 $$ final VirtualFile lessonDir = project.getBaseDir().findChild(EduNames.LESSON + String.valueOf(index))[ FD ]
Line_15 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))-->Line_24 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))[ FD ]
Line_15 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))-->Line_25 $$ OldCourse oldCourse = gson.fromJson(reader, OldCourse.class)[ FD ]
Line_17 $$ Course course = gson.fromJson(reader, Course.class)-->Line_32 $$ for (Lesson lesson : course.getLessons()) [ FD ]
Line_5 $$ if (virtualFile == null) -->Line_6 $$ return[ CD ]
Line_12 $$ Reader reader = null-->Line_20 $$ reader.close()[ FD ]
Line_3 $$ FileChooserDescriptor descriptor = new FileChooserDescriptor(true, true, true, true, true, false)-->Line_4 $$ final VirtualFile virtualFile = FileChooser.chooseFile(descriptor, project, null)[ FD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_3 $$ FileChooserDescriptor descriptor = new FileChooserDescriptor(true, true, true, true, true, false)[ CD ]
Line_8 $$ final String basePath = project.getBasePath()-->Line_9 $$ if (basePath == null)[ FD ]
Line_15 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))-->Line_17 $$ Course course = gson.fromJson(reader, Course.class)[ FD ]
Line_32 $$ for (Lesson lesson : course.getLessons()) -->Line_34 $$ lesson.setIndex(index)[ FD ]
Line_32 $$ for (Lesson lesson : course.getLessons()) -->Line_40 $$ task.setLesson(lesson)[ FD ]
Line_12 $$ Reader reader = null-->Line_25 $$ OldCourse oldCourse = gson.fromJson(reader, OldCourse.class)[ FD ]
Line_37 $$ for (Task task : lesson.getTaskList()) -->Line_43 $$ for (final Map.Entry<String, TaskFile> entry : task.getTaskFiles().entrySet()) [ FD ]
Line_12 $$ Reader reader = null-->Line_17 $$ Course course = gson.fromJson(reader, Course.class)[ FD ]
Line_17 $$ Course course = gson.fromJson(reader, Course.class)-->Line_18 $$ if (course == null || course.getLessons().isEmpty() || StringUtil.isEmptyOrSpaces(course.getLessons().get(0).getName())) [ FD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_8 $$ final String basePath = project.getBasePath()[ FD ]
Line_18 $$ if (course == null || course.getLessons().isEmpty() || StringUtil.isEmptyOrSpaces(course.getLessons().get(0).getName())) -->Line_24 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))[ CD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_46 $$ createAnswerFile(project, taskDir, taskDir, entry)[ FD ]
Line_4 $$ final VirtualFile virtualFile = FileChooser.chooseFile(descriptor, project, null)-->Line_14 $$ ZipUtil.unzip(null, new File(basePath), new File(virtualFile.getPath()), null, null, true)[ FD ]
Line_4 $$ final VirtualFile virtualFile = FileChooser.chooseFile(descriptor, project, null)-->Line_5 $$ if (virtualFile == null) [ FD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_4 $$ final VirtualFile virtualFile = FileChooser.chooseFile(descriptor, project, null)[ CD ]
Line_16 $$ Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create()-->Line_17 $$ Course course = gson.fromJson(reader, Course.class)[ FD ]
Line_38 $$ final VirtualFile taskDir = lessonDir.findChild(EduNames.TASK + String.valueOf(taskIndex))-->Line_41 $$ if (taskDir == null)[ FD ]
Line_18 $$ if (course == null || course.getLessons().isEmpty() || StringUtil.isEmptyOrSpaces(course.getLessons().get(0).getName())) -->Line_25 $$ OldCourse oldCourse = gson.fromJson(reader, OldCourse.class)[ CD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_70 $$ synchronize(project)[ FD ]
Line_33 $$ final VirtualFile lessonDir = project.getBaseDir().findChild(EduNames.LESSON + String.valueOf(index))-->Line_35 $$ if (lessonDir == null)[ FD ]
Line_11 $$ final CCProjectService service = CCProjectService.getInstance(project)-->Line_28 $$ service.setCourse(course)[ FD ]
Line_33 $$ final VirtualFile lessonDir = project.getBaseDir().findChild(EduNames.LESSON + String.valueOf(index))-->Line_38 $$ final VirtualFile taskDir = lessonDir.findChild(EduNames.TASK + String.valueOf(taskIndex))[ FD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_12 $$ Reader reader = null[ CD ]
Line_24 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))-->Line_62 $$ if (reader != null) [ FD ]
Line_37 $$ for (Task task : lesson.getTaskList()) -->Line_40 $$ task.setLesson(lesson)[ FD ]
Line_38 $$ final VirtualFile taskDir = lessonDir.findChild(EduNames.TASK + String.valueOf(taskIndex))-->Line_46 $$ createAnswerFile(project, taskDir, taskDir, entry)[ FD ]
Line_17 $$ Course course = gson.fromJson(reader, Course.class)-->Line_26 $$ course = EduUtils.transformOldCourse(oldCourse)[ FD ]
Line_15 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))-->Line_62 $$ if (reader != null) [ FD ]
Line_24 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))-->Line_64 $$ reader.close()[ FD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_11 $$ final CCProjectService service = CCProjectService.getInstance(project)[ FD ]
Line_24 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))-->Line_25 $$ OldCourse oldCourse = gson.fromJson(reader, OldCourse.class)[ FD ]
Line_15 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))-->Line_64 $$ reader.close()[ FD ]
Line_9 $$ if (basePath == null)-->Line_10 $$ return[ CD ]
Line_32 $$ for (Lesson lesson : course.getLessons()) -->Line_37 $$ for (Task task : lesson.getTaskList()) [ FD ]
Line_2 $$ private static void unpackCourseArchive(final Project project) -->Line_8 $$ final String basePath = project.getBasePath()[ CD ]
Line_31 $$ int taskIndex = 1-->Line_38 $$ final VirtualFile taskDir = lessonDir.findChild(EduNames.TASK + String.valueOf(taskIndex))[ FD ]
Line_12 $$ Reader reader = null-->Line_62 $$ if (reader != null) [ FD ]
Line_30 $$ int index = 1-->Line_33 $$ final VirtualFile lessonDir = project.getBaseDir().findChild(EduNames.LESSON + String.valueOf(index))[ FD ]
Line_44 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_46 $$ createAnswerFile(project, taskDir, taskDir, entry)[ CD ]
Line_26 $$ course = EduUtils.transformOldCourse(oldCourse)-->Line_32 $$ for (Lesson lesson : course.getLessons()) [ FD ]
Line_31 $$ int taskIndex = 1-->Line_39 $$ task.setIndex(taskIndex)[ FD ]
Line_12 $$ Reader reader = null-->Line_15 $$ reader = new InputStreamReader(new FileInputStream(new File(basePath, EduNames.COURSE_META_FILE)))[ FD ]
