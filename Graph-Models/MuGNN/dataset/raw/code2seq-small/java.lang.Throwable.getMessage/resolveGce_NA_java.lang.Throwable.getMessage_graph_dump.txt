Line_2 $$ private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException -->Line_12 $$ assertThat(addresses, arrayContaining(expected))[ FD ]
Line_2 $$ private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException -->Line_14 $$ if (expected != null) [ FD ]
Line_2 $$ private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException -->Line_5 $$ GceComputeServiceMock mock = new GceComputeServiceMock(nodeSettings, networkService)[ CD ]
Line_2 $$ private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException -->Line_6 $$ networkService.addCustomNameResolver(new GceNameResolver(nodeSettings, mock))[ CD ]
Line_2 $$ private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException -->Line_4 $$ NetworkService networkService = new NetworkService(nodeSettings)[ CD ]
Line_4 $$ NetworkService networkService = new NetworkService(nodeSettings)-->Line_6 $$ networkService.addCustomNameResolver(new GceNameResolver(nodeSettings, mock))[ FD ]
Line_9 $$ if (expected == null) -->Line_10 $$ fail("We should get a IllegalArgumentException when setting network.host: _gce:doesnotexist_")[ CD ]
Line_2 $$ private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException -->Line_3 $$ Settings nodeSettings = Settings.builder().put("network.host", gceNetworkSetting).build()[ CD ]
Line_2 $$ private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException -->Line_3 $$ Settings nodeSettings = Settings.builder().put("network.host", gceNetworkSetting).build()[ FD ]
Line_2 $$ private void resolveGce(String gceNetworkSetting, InetAddress[] expected) throws IOException -->Line_9 $$ if (expected == null) [ FD ]
Line_8 $$ InetAddress[] addresses = networkService.resolveBindHostAddresses(null)-->Line_12 $$ assertThat(addresses, arrayContaining(expected))[ FD ]
Line_4 $$ NetworkService networkService = new NetworkService(nodeSettings)-->Line_8 $$ InetAddress[] addresses = networkService.resolveBindHostAddresses(null)[ FD ]
