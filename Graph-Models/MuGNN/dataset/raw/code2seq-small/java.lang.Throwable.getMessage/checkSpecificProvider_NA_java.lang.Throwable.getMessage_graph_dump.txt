Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_74 $$ List<KeyVersion> kvl = provider.getKeyVersions("key3")[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_67 $$ assertArrayEquals(new byte[] [ CD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_46 $$ provider.createKey("key4", new byte[] [ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_7 $$ for (int i = 0; i < key1.length; ++i) [ CD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_65 $$ provider.flush()[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_5 $$ byte[] key2 = new byte[16][ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_27 $$ provider.createKey("key3", key3, KeyProvider.options(conf))[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_70 $$ List<String> keys = provider.getKeys()[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_25 $$ assertEquals("key3@0", provider.getCurrentKey("key3").getVersionName())[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_34 $$ provider.deleteKey("key3")[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_65 $$ provider.flush()[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_71 $$ assertTrue("Keys should have been returned.", keys.size() == 2)[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_20 $$ KeyProvider.Metadata meta = provider.getMetadata("key3")[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_23 $$ assertEquals(1, meta.getVersions())[ CD ]
Line_66 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_68 $$ assertArrayEquals(key3, provider.getCurrentKey("key3").getMaterial())[ FD ]
Line_20 $$ KeyProvider.Metadata meta = provider.getMetadata("key3")-->Line_22 $$ assertEquals(KeyProvider.DEFAULT_BITLENGTH, meta.getBitLength())[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_51 $$ assertArrayEquals(new byte[] [ FD ]
Line_20 $$ KeyProvider.Metadata meta = provider.getMetadata("key3")-->Line_48 $$ meta = provider.getMetadata("key4")[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_74 $$ List<KeyVersion> kvl = provider.getKeyVersions("key3")[ CD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_32 $$ provider.deleteKey("key3")[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_77 $$ assertArrayEquals(key3, kvl.get(0).getMaterial())[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_72 $$ assertTrue("Returned Keys should have included key3.", keys.contains("key3"))[ CD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_66 $$ provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_13 $$ assertEquals(null, provider.getMetadata("key"))[ FD ]
Line_7 $$ for (int i = 0; i < key1.length; ++i) -->Line_9 $$ key2[i] = (byte) (i * 2)[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_70 $$ List<String> keys = provider.getKeys()[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_39 $$ provider.createKey("key3", key3, KeyProvider.options(conf))[ FD ]
Line_48 $$ meta = provider.getMetadata("key4")-->Line_49 $$ assertEquals(2, meta.getVersions())[ FD ]
Line_74 $$ List<KeyVersion> kvl = provider.getKeyVersions("key3")-->Line_75 $$ assertTrue("KeyVersions should have been returned for key3.", kvl.size() == 1)[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_39 $$ provider.createKey("key3", key3, KeyProvider.options(conf))[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_52 $$ assertEquals("key4@1", provider.getCurrentKey("key4").getVersionName())[ FD ]
Line_66 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_70 $$ List<String> keys = provider.getKeys()[ FD ]
Line_66 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_69 $$ assertEquals("key3@0", provider.getCurrentKey("key3").getVersionName())[ FD ]
Line_6 $$ byte[] key3 = new byte[16]-->Line_15 $$ provider.createKey("key3", key3, KeyProvider.options(conf))[ FD ]
Line_66 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_67 $$ assertArrayEquals(new byte[] [ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_6 $$ byte[] key3 = new byte[16][ CD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_60 $$ provider.rollNewVersion("no-such-key", key1)[ FD ]
Line_74 $$ List<KeyVersion> kvl = provider.getKeyVersions("key3")-->Line_77 $$ assertArrayEquals(key3, kvl.get(0).getMaterial())[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_46 $$ provider.createKey("key4", new byte[] [ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_68 $$ assertArrayEquals(key3, provider.getCurrentKey("key3").getMaterial())[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_41 $$ provider.createKey("key4", key3, KeyProvider.options(conf).setBitLength(8))[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_12 $$ assertEquals(null, provider.getKeyVersion("no-such-key"))[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_24 $$ assertArrayEquals(key3, provider.getCurrentKey("key3").getMaterial())[ CD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_48 $$ meta = provider.getMetadata("key4")[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_12 $$ assertEquals(null, provider.getKeyVersion("no-such-key"))[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_49 $$ assertEquals(2, meta.getVersions())[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_21 $$ assertEquals(KeyProvider.DEFAULT_CIPHER, meta.getCipher())[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_22 $$ assertEquals(KeyProvider.DEFAULT_BITLENGTH, meta.getBitLength())[ CD ]
Line_4 $$ byte[] key1 = new byte[16]-->Line_54 $$ provider.rollNewVersion("key4", key1)[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_66 $$ provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
Line_70 $$ List<String> keys = provider.getKeys()-->Line_72 $$ assertTrue("Returned Keys should have included key3.", keys.contains("key3"))[ FD ]
Line_70 $$ List<String> keys = provider.getKeys()-->Line_73 $$ assertTrue("Returned Keys should have included key4.", keys.contains("key4"))[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_50 $$ assertArrayEquals(new byte[] [ CD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_15 $$ provider.createKey("key3", key3, KeyProvider.options(conf))[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_69 $$ assertEquals("key3@0", provider.getCurrentKey("key3").getVersionName())[ FD ]
Line_6 $$ byte[] key3 = new byte[16]-->Line_77 $$ assertArrayEquals(key3, kvl.get(0).getMaterial())[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_27 $$ provider.createKey("key3", key3, KeyProvider.options(conf))[ FD ]
Line_20 $$ KeyProvider.Metadata meta = provider.getMetadata("key3")-->Line_21 $$ assertEquals(KeyProvider.DEFAULT_CIPHER, meta.getCipher())[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_68 $$ assertArrayEquals(key3, provider.getCurrentKey("key3").getMaterial())[ CD ]
Line_6 $$ byte[] key3 = new byte[16]-->Line_41 $$ provider.createKey("key4", key3, KeyProvider.options(conf).setBitLength(8))[ FD ]
Line_20 $$ KeyProvider.Metadata meta = provider.getMetadata("key3")-->Line_49 $$ assertEquals(2, meta.getVersions())[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_47 $$ provider.rollNewVersion("key4", new byte[] [ FD ]
Line_6 $$ byte[] key3 = new byte[16]-->Line_68 $$ assertArrayEquals(key3, provider.getCurrentKey("key3").getMaterial())[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_13 $$ assertEquals(null, provider.getMetadata("key"))[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_46 $$ provider.createKey("key4", new byte[] [ CD ]
Line_20 $$ KeyProvider.Metadata meta = provider.getMetadata("key3")-->Line_23 $$ assertEquals(1, meta.getVersions())[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_73 $$ assertTrue("Returned Keys should have included key4.", keys.contains("key4"))[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_48 $$ meta = provider.getMetadata("key4")[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_32 $$ provider.deleteKey("key3")[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_66 $$ provider = KeyProviderFactory.getProviders(conf).get(0)[ CD ]
Line_6 $$ byte[] key3 = new byte[16]-->Line_27 $$ provider.createKey("key3", key3, KeyProvider.options(conf))[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_69 $$ assertEquals("key3@0", provider.getCurrentKey("key3").getVersionName())[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_76 $$ assertTrue("KeyVersions should have included key3@0.", kvl.get(0).getVersionName().equals("key3@0"))[ CD ]
Line_6 $$ byte[] key3 = new byte[16]-->Line_24 $$ assertArrayEquals(key3, provider.getCurrentKey("key3").getMaterial())[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_54 $$ provider.rollNewVersion("key4", key1)[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_25 $$ assertEquals("key3@0", provider.getCurrentKey("key3").getVersionName())[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_39 $$ provider.createKey("key3", key3, KeyProvider.options(conf))[ CD ]
Line_6 $$ byte[] key3 = new byte[16]-->Line_39 $$ provider.createKey("key3", key3, KeyProvider.options(conf))[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_51 $$ assertArrayEquals(new byte[] [ CD ]
Line_7 $$ for (int i = 0; i < key1.length; ++i) -->Line_8 $$ key1[i] = (byte) i[ CD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_50 $$ assertArrayEquals(new byte[] [ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_67 $$ assertArrayEquals(new byte[] [ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_20 $$ KeyProvider.Metadata meta = provider.getMetadata("key3")[ FD ]
Line_74 $$ List<KeyVersion> kvl = provider.getKeyVersions("key3")-->Line_76 $$ assertTrue("KeyVersions should have included key3@0.", kvl.get(0).getVersionName().equals("key3@0"))[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_47 $$ provider.rollNewVersion("key4", new byte[] [ CD ]
Line_4 $$ byte[] key1 = new byte[16]-->Line_60 $$ provider.rollNewVersion("no-such-key", key1)[ FD ]
Line_7 $$ for (int i = 0; i < key1.length; ++i) -->Line_10 $$ key3[i] = (byte) (i * 3)[ CD ]
Line_70 $$ List<String> keys = provider.getKeys()-->Line_71 $$ assertTrue("Keys should have been returned.", keys.size() == 2)[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_41 $$ provider.createKey("key4", key3, KeyProvider.options(conf).setBitLength(8))[ FD ]
Line_66 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_74 $$ List<KeyVersion> kvl = provider.getKeyVersions("key3")[ FD ]
Line_3 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_24 $$ assertArrayEquals(key3, provider.getCurrentKey("key3").getMaterial())[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_15 $$ provider.createKey("key3", key3, KeyProvider.options(conf))[ FD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_75 $$ assertTrue("KeyVersions should have been returned for key3.", kvl.size() == 1)[ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_4 $$ byte[] key1 = new byte[16][ CD ]
Line_2 $$ static void checkSpecificProvider(Configuration conf, String ourUrl) throws Exception -->Line_52 $$ assertEquals("key4@1", provider.getCurrentKey("key4").getVersionName())[ CD ]
