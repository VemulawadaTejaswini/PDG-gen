Line_4 $$ final AtomicReference<String> errorMessage = new AtomicReference<String>()-->Line_37 $$ assertNull(errorMessage.get(), errorMessage.get())[ FD ]
Line_4 $$ final AtomicReference<String> errorMessage = new AtomicReference<String>()-->Line_23 $$ errorMessage.set(String.format("Exception %s", StringUtils.stringifyException(ie)))[ FD ]
Line_5 $$ for (int i = 0; i < 10; i++) -->Line_6 $$ Thread t = new Thread() [ CD ]
Line_5 $$ for (int i = 0; i < 10; i++) -->Line_27 $$ t.start()[ CD ]
Line_16 $$ for (int j = 0; j < 10; j++) -->Line_17 $$ File f = new File(d, "file" + j)[ CD ]
Line_5 $$ for (int i = 0; i < 10; i++) -->Line_28 $$ threads.add(t)[ CD ]
Line_12 $$ File f = new File(d, "file" + j)-->Line_19 $$ execWaitRet("rm " + f.getAbsolutePath())[ FD ]
Line_2 $$ public void testMultipleThreads() throws IOException -->Line_37 $$ assertNull(errorMessage.get(), errorMessage.get())[ CD ]
Line_6 $$ Thread t = new Thread() -->Line_27 $$ t.start()[ FD ]
Line_16 $$ for (int j = 0; j < 10; j++) -->Line_19 $$ execWaitRet("rm " + f.getAbsolutePath())[ CD ]
Line_9 $$ File d = new File(mountPoint, "dir" + getId())-->Line_10 $$ execWaitRet("mkdir " + d.getAbsolutePath())[ FD ]
Line_13 $$ final String contents = "thread " + getId() + " " + j-->Line_14 $$ createFile(f, contents)[ FD ]
Line_16 $$ for (int j = 0; j < 10; j++) -->Line_18 $$ execWaitRet("cat " + f.getAbsolutePath())[ CD ]
Line_2 $$ public void testMultipleThreads() throws IOException -->Line_4 $$ final AtomicReference<String> errorMessage = new AtomicReference<String>()[ CD ]
Line_17 $$ File f = new File(d, "file" + j)-->Line_19 $$ execWaitRet("rm " + f.getAbsolutePath())[ FD ]
Line_11 $$ for (int j = 0; j < 10; j++) -->Line_12 $$ File f = new File(d, "file" + j)[ CD ]
Line_12 $$ File f = new File(d, "file" + j)-->Line_18 $$ execWaitRet("cat " + f.getAbsolutePath())[ FD ]
Line_17 $$ File f = new File(d, "file" + j)-->Line_18 $$ execWaitRet("cat " + f.getAbsolutePath())[ FD ]
Line_2 $$ public void testMultipleThreads() throws IOException -->Line_5 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_9 $$ File d = new File(mountPoint, "dir" + getId())-->Line_21 $$ execWaitRet("rmdir " + d.getAbsolutePath())[ FD ]
Line_11 $$ for (int j = 0; j < 10; j++) -->Line_13 $$ final String contents = "thread " + getId() + " " + j[ CD ]
Line_6 $$ Thread t = new Thread() -->Line_32 $$ t.join()[ FD ]
Line_11 $$ for (int j = 0; j < 10; j++) -->Line_14 $$ createFile(f, contents)[ CD ]
Line_2 $$ public void testMultipleThreads() throws IOException -->Line_3 $$ ArrayList<Thread> threads = new ArrayList<Thread>()[ CD ]
Line_3 $$ ArrayList<Thread> threads = new ArrayList<Thread>()-->Line_28 $$ threads.add(t)[ FD ]
Line_11 $$ for (int j = 0; j < 10; j++) -->Line_16 $$ for (int j = 0; j < 10; j++) [ FD ]
Line_6 $$ Thread t = new Thread() -->Line_28 $$ threads.add(t)[ FD ]
Line_12 $$ File f = new File(d, "file" + j)-->Line_14 $$ createFile(f, contents)[ FD ]
