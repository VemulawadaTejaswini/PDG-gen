Line_2 $$ public void testService() throws IOException, ServletException -->Line_37 $$ Assert.assertSame(mockHttpServletRequest, _recordSPIAgent._originalRequest1)[ CD ]
Line_4 $$ final AtomicReference<String> forwardPathReference = new AtomicReference()-->Line_74 $$ Assert.assertEquals("/c/portal/resiliency", forwardPathReference.get())[ FD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_5 $$ final IOException ioException = new IOException("Unable to forward")[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_32 $$ Assert.assertTrue(_mockHttpSession.isInvalid())[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_4 $$ final AtomicReference<String> forwardPathReference = new AtomicReference()[ CD ]
Line_8 $$ return new RequestDispatcher() -->Line_11 $$ if (failOnForward.get()) [ CD ]
Line_4 $$ final AtomicReference<String> forwardPathReference = new AtomicReference()-->Line_27 $$ Assert.assertEquals("/c/portal/resiliency", forwardPathReference.get())[ FD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_22 $$ acceptorServlet.init(new MockServletConfig(mockServletContext))[ CD ]
Line_6 $$ MockServletContext mockServletContext = new MockServletContext() -->Line_8 $$ return new RequestDispatcher() [ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_24 $$ mockHttpServletRequest.setServerPort(1234)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_28 $$ Assert.assertSame(mockHttpServletRequest, _recordSPIAgent._originalRequest1)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_77 $$ Assert.assertSame(mockHttpServletResponse, _recordSPIAgent._originalResponse)[ CD ]
Line_6 $$ MockServletContext mockServletContext = new MockServletContext() -->Line_10 $$ forwardPathReference.set(path)[ FD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_31 $$ Assert.assertNull(_recordSPIAgent._exception)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_30 $$ Assert.assertSame(mockHttpServletResponse, _recordSPIAgent._originalResponse)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_76 $$ Assert.assertSame(mockHttpServletRequest, _recordSPIAgent._originalRequest2)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_35 $$ acceptorServlet.service(mockHttpServletRequest, mockHttpServletResponse)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_75 $$ Assert.assertSame(mockHttpServletRequest, _recordSPIAgent._originalRequest1)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_27 $$ Assert.assertEquals("/c/portal/resiliency", forwardPathReference.get())[ CD ]
Line_4 $$ final AtomicReference<String> forwardPathReference = new AtomicReference()-->Line_10 $$ forwardPathReference.set(path)[ FD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_78 $$ Assert.assertSame(ioException, _recordSPIAgent._exception)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_3 $$ final AtomicBoolean failOnForward = new AtomicBoolean()[ CD ]
Line_6 $$ MockServletContext mockServletContext = new MockServletContext() -->Line_34 $$ mockServletContext.registerContext(_pathContext, mockServletContext)[ FD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_36 $$ Assert.assertEquals("/c/portal/resiliency", forwardPathReference.get())[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_79 $$ Assert.assertTrue(_mockHttpSession.isInvalid())[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_71 $$ _recordSPIAgent.setRuntimeExceptionOnPrepareRequest(false)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_34 $$ mockServletContext.registerContext(_pathContext, mockServletContext)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_74 $$ Assert.assertEquals("/c/portal/resiliency", forwardPathReference.get())[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_40 $$ Assert.assertNull(_recordSPIAgent._exception)[ CD ]
Line_6 $$ MockServletContext mockServletContext = new MockServletContext() -->Line_20 $$ mockServletContext.setContextPath("/")[ FD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_73 $$ acceptorServlet.service(mockHttpServletRequest, mockHttpServletResponse)[ CD ]
Line_3 $$ final AtomicBoolean failOnForward = new AtomicBoolean()-->Line_72 $$ failOnForward.set(true)[ FD ]
Line_4 $$ final AtomicReference<String> forwardPathReference = new AtomicReference()-->Line_36 $$ Assert.assertEquals("/c/portal/resiliency", forwardPathReference.get())[ FD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_39 $$ Assert.assertSame(mockHttpServletResponse, _recordSPIAgent._originalResponse)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_20 $$ mockServletContext.setContextPath("/")[ CD ]
Line_8 $$ return new RequestDispatcher() -->Line_10 $$ forwardPathReference.set(path)[ CD ]
Line_3 $$ final AtomicBoolean failOnForward = new AtomicBoolean()-->Line_11 $$ if (failOnForward.get()) [ FD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_41 $$ Assert.assertTrue(_mockHttpSession.isInvalid())[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_29 $$ Assert.assertSame(mockHttpServletRequest, _recordSPIAgent._originalRequest2)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_72 $$ failOnForward.set(true)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_38 $$ Assert.assertSame(mockHttpServletRequest, _recordSPIAgent._originalRequest2)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_26 $$ acceptorServlet.service(mockHttpServletRequest, mockHttpServletResponse)[ CD ]
Line_2 $$ public void testService() throws IOException, ServletException -->Line_6 $$ MockServletContext mockServletContext = new MockServletContext() [ CD ]
Line_5 $$ final IOException ioException = new IOException("Unable to forward")-->Line_78 $$ Assert.assertSame(ioException, _recordSPIAgent._exception)[ FD ]
