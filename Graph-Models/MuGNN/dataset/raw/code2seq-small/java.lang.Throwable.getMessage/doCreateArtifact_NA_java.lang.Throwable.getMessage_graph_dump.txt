Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_5 $$ if (mainClassName != null && !mainClassName.isEmpty() || !extractLibrariesToJar) [ CD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_49 $$ if (manifestFile != null && !manifestFile.equals(ManifestFileUtil.findManifestFile(archive, myContext, jarArtifactType))) [ CD ]
Line_4 $$ final Project project = myContext.getProject()-->Line_29 $$ OrderEnumerator orderEnumerator = ProjectRootManager.getInstance(project).orderEntries(Arrays.asList(modules))[ FD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_29 $$ OrderEnumerator orderEnumerator = ProjectRootManager.getInstance(project).orderEntries(Arrays.asList(modules))[ CD ]
Line_37 $$ enumerator.forEachModule(new Processor<Module>() -->Line_39 $$ if (ProductionModuleOutputElementType.ELEMENT_TYPE.isSuitableModule(modulesProvider, module)) [ CD ]
Line_37 $$ enumerator.forEachModule(new Processor<Module>() -->Line_42 $$ if (includeTests && TestModuleOutputElementType.ELEMENT_TYPE.isSuitableModule(modulesProvider, module)) [ FD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_5 $$ if (mainClassName != null && !mainClassName.isEmpty() || !extractLibrariesToJar) [ FD ]
Line_5 $$ if (mainClassName != null && !mainClassName.isEmpty() || !extractLibrariesToJar) -->Line_18 $$ if (directory == null)[ CD ]
Line_5 $$ if (mainClassName != null && !mainClassName.isEmpty() || !extractLibrariesToJar) -->Line_20 $$ manifestFile = ManifestFileUtil.createManifestFile(directory, project)[ CD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_37 $$ enumerator.forEachModule(new Processor<Module>() [ CD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_53 $$ if (extractLibrariesToJar) [ CD ]
Line_53 $$ if (extractLibrariesToJar) -->Line_57 $$ final ArtifactRootElement<?> root = factory.createArtifactRootElement()[ CD ]
Line_53 $$ if (extractLibrariesToJar) -->Line_62 $$ return new NewArtifactConfiguration(root, artifactName, PlainArtifactType.getInstance())[ CD ]
Line_8 $$ directory = ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<VirtualFile, IOException>() -->Line_20 $$ manifestFile = ManifestFileUtil.createManifestFile(directory, project)[ FD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_35 $$ final OrderEnumerator enumerator = orderEnumerator.using(modulesProvider).withoutSdk().runtimeOnly().recursively()[ CD ]
Line_53 $$ if (extractLibrariesToJar) -->Line_60 $$ addLibraries(libraries, root, archive, classpath)[ CD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_36 $$ enumerator.forEachLibrary(new CommonProcessors.CollectProcessor<Library>(libraries))[ CD ]
Line_3 $$ VirtualFile manifestFile = null-->Line_50 $$ archive.addFirstChild(factory.createFileCopyWithParentDirectories(manifestFile.getPath(), ManifestFileUtil.MANIFEST_DIR_NAME))[ FD ]
Line_8 $$ directory = ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<VirtualFile, IOException>() -->Line_18 $$ if (directory == null)[ FD ]
Line_53 $$ if (extractLibrariesToJar) -->Line_61 $$ ManifestFileUtil.updateManifest(manifestFile, mainClassName, classpath, true)[ CD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_31 $$ if (!includeTests) [ CD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_34 $$ final ModulesProvider modulesProvider = myContext.getModulesProvider()[ CD ]
Line_37 $$ enumerator.forEachModule(new Processor<Module>() -->Line_43 $$ archive.addOrFindChild(factory.createTestModuleOutput(module))[ FD ]
Line_37 $$ enumerator.forEachModule(new Processor<Module>() -->Line_40 $$ archive.addOrFindChild(factory.createModuleOutput(module))[ FD ]
Line_8 $$ directory = ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<VirtualFile, IOException>() -->Line_10 $$ return VfsUtil.createDirectoryIfMissing(directoryForManifest)[ CD ]
Line_4 $$ final Project project = myContext.getProject()-->Line_15 $$ Messages.showErrorDialog(project, "Cannot create directory '" + directoryForManifest + "': " + e.getMessage(), CommonBundle.getErrorTitle())[ FD ]
Line_6 $$ final VirtualFile directory-->Line_18 $$ if (directory == null)[ FD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_27 $$ final PackagingElementFactory factory = PackagingElementFactory.getInstance()[ CD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_42 $$ if (includeTests && TestModuleOutputElementType.ELEMENT_TYPE.isSuitableModule(modulesProvider, module)) [ FD ]
Line_3 $$ VirtualFile manifestFile = null-->Line_49 $$ if (manifestFile != null && !manifestFile.equals(ManifestFileUtil.findManifestFile(archive, myContext, jarArtifactType))) [ FD ]
Line_3 $$ VirtualFile manifestFile = null-->Line_61 $$ ManifestFileUtil.updateManifest(manifestFile, mainClassName, classpath, true)[ FD ]
Line_31 $$ if (!includeTests) -->Line_32 $$ orderEnumerator = orderEnumerator.productionOnly()[ CD ]
Line_6 $$ final VirtualFile directory-->Line_8 $$ directory = ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<VirtualFile, IOException>() [ FD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_24 $$ ManifestFileUtil.updateManifest(manifestFile, mainClassName, null, true)[ FD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_28 $$ final CompositePackagingElement<?> archive = factory.createArchive(ArtifactUtil.suggestArtifactFileName(name) + ".jar")[ CD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_29 $$ OrderEnumerator orderEnumerator = ProjectRootManager.getInstance(project).orderEntries(Arrays.asList(modules))[ FD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_3 $$ VirtualFile manifestFile = null[ CD ]
Line_4 $$ final Project project = myContext.getProject()-->Line_26 $$ String name = modules.length == 1 ? modules[0].getName() : project.getName()[ FD ]
Line_42 $$ if (includeTests && TestModuleOutputElementType.ELEMENT_TYPE.isSuitableModule(modulesProvider, module)) -->Line_43 $$ archive.addOrFindChild(factory.createTestModuleOutput(module))[ CD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_48 $$ final JarArtifactType jarArtifactType = JarArtifactType.getInstance()[ CD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_10 $$ return VfsUtil.createDirectoryIfMissing(directoryForManifest)[ FD ]
Line_3 $$ VirtualFile manifestFile = null-->Line_21 $$ if (manifestFile == null) [ FD ]
Line_53 $$ if (extractLibrariesToJar) -->Line_54 $$ addExtractedLibrariesToJar(archive, factory, libraries)[ CD ]
Line_5 $$ if (mainClassName != null && !mainClassName.isEmpty() || !extractLibrariesToJar) -->Line_6 $$ final VirtualFile directory[ CD ]
Line_5 $$ if (mainClassName != null && !mainClassName.isEmpty() || !extractLibrariesToJar) -->Line_21 $$ if (manifestFile == null) [ CD ]
Line_53 $$ if (extractLibrariesToJar) -->Line_55 $$ return new NewArtifactConfiguration(archive, artifactName, jarArtifactType)[ CD ]
Line_3 $$ VirtualFile manifestFile = null-->Line_24 $$ ManifestFileUtil.updateManifest(manifestFile, mainClassName, null, true)[ FD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_4 $$ final Project project = myContext.getProject()[ CD ]
Line_4 $$ final Project project = myContext.getProject()-->Line_20 $$ manifestFile = ManifestFileUtil.createManifestFile(directory, project)[ FD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_61 $$ ManifestFileUtil.updateManifest(manifestFile, mainClassName, classpath, true)[ FD ]
Line_5 $$ if (mainClassName != null && !mainClassName.isEmpty() || !extractLibrariesToJar) -->Line_24 $$ ManifestFileUtil.updateManifest(manifestFile, mainClassName, null, true)[ CD ]
Line_37 $$ enumerator.forEachModule(new Processor<Module>() -->Line_45 $$ return true[ CD ]
Line_6 $$ final VirtualFile directory-->Line_20 $$ manifestFile = ManifestFileUtil.createManifestFile(directory, project)[ FD ]
Line_53 $$ if (extractLibrariesToJar) -->Line_59 $$ root.addOrFindChild(archive)[ CD ]
Line_21 $$ if (manifestFile == null) -->Line_22 $$ return null[ CD ]
Line_37 $$ enumerator.forEachModule(new Processor<Module>() -->Line_39 $$ if (ProductionModuleOutputElementType.ELEMENT_TYPE.isSuitableModule(modulesProvider, module)) [ FD ]
Line_2 $$ public NewArtifactConfiguration doCreateArtifact(final Module[] modules, final String mainClassName, final String directoryForManifest, final boolean extractLibrariesToJar, final boolean includeTests) -->Line_31 $$ if (!includeTests) [ FD ]
Line_39 $$ if (ProductionModuleOutputElementType.ELEMENT_TYPE.isSuitableModule(modulesProvider, module)) -->Line_40 $$ archive.addOrFindChild(factory.createModuleOutput(module))[ CD ]
Line_37 $$ enumerator.forEachModule(new Processor<Module>() -->Line_42 $$ if (includeTests && TestModuleOutputElementType.ELEMENT_TYPE.isSuitableModule(modulesProvider, module)) [ CD ]
Line_49 $$ if (manifestFile != null && !manifestFile.equals(ManifestFileUtil.findManifestFile(archive, myContext, jarArtifactType))) -->Line_50 $$ archive.addFirstChild(factory.createFileCopyWithParentDirectories(manifestFile.getPath(), ManifestFileUtil.MANIFEST_DIR_NAME))[ CD ]
Line_18 $$ if (directory == null)-->Line_19 $$ return null[ CD ]
