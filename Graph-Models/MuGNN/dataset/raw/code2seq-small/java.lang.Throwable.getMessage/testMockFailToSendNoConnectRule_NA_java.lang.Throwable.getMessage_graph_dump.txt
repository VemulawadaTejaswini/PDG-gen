Line_10 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_21 $$ assertThat(exp.getCause().getMessage(), endsWith("DISCONNECT: simulated"))[ FD ]
Line_10 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_18 $$ fail("got response instead of exception")[ CD ]
Line_10 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_21 $$ assertThat(exp.getCause().getMessage(), endsWith("DISCONNECT: simulated"))[ CD ]
Line_2 $$ public void testMockFailToSendNoConnectRule() -->Line_9 $$ serviceB.addFailToSendNoConnectRule(serviceA)[ CD ]
Line_2 $$ public void testMockFailToSendNoConnectRule() -->Line_40 $$ serviceA.removeHandler("sayHello")[ CD ]
Line_10 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_15 $$ return ThreadPool.Names.GENERIC[ CD ]
Line_2 $$ public void testMockFailToSendNoConnectRule() -->Line_3 $$ serviceA.registerRequestHandler("sayHello", StringMessageRequest::<>new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() [ CD ]
Line_10 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_12 $$ return new StringMessageResponse()[ CD ]
Line_2 $$ public void testMockFailToSendNoConnectRule() -->Line_10 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), new BaseTransportResponseHandler<StringMessageResponse>() [ CD ]
Line_3 $$ serviceA.registerRequestHandler("sayHello", StringMessageRequest::<>new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() -->Line_5 $$ assertThat("moshe", equalTo(request.message))[ CD ]
