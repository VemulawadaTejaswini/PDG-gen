Line_3 $$ if (numberFormat != null) -->Line_7 $$ boolean resetBigDecimal = false[ CD ]
Line_6 $$ DecimalFormat decimalFormat = null-->Line_22 $$ decimalFormat.setParseBigDecimal(false)[ FD ]
Line_10 $$ if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) -->Line_11 $$ decimalFormat.setParseBigDecimal(true)[ CD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) -->Line_8 $$ if (numberFormat instanceof DecimalFormat) [ FD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) -->Line_3 $$ if (numberFormat != null) [ CD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) -->Line_16 $$ Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))[ FD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) -->Line_26 $$ return parseNumber(text, targetClass)[ FD ]
Line_6 $$ DecimalFormat decimalFormat = null-->Line_9 $$ decimalFormat = (DecimalFormat) numberFormat[ FD ]
Line_8 $$ if (numberFormat instanceof DecimalFormat) -->Line_10 $$ if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) [ CD ]
Line_21 $$ if (resetBigDecimal) -->Line_22 $$ decimalFormat.setParseBigDecimal(false)[ CD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) -->Line_4 $$ Assert.notNull(text, "Text must not be null")[ FD ]
Line_3 $$ if (numberFormat != null) -->Line_26 $$ return parseNumber(text, targetClass)[ CD ]
Line_6 $$ DecimalFormat decimalFormat = null-->Line_10 $$ if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) [ FD ]
Line_9 $$ decimalFormat = (DecimalFormat) numberFormat-->Line_10 $$ if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) [ FD ]
Line_3 $$ if (numberFormat != null) -->Line_8 $$ if (numberFormat instanceof DecimalFormat) [ CD ]
Line_7 $$ boolean resetBigDecimal = false-->Line_12 $$ resetBigDecimal = true[ FD ]
Line_3 $$ if (numberFormat != null) -->Line_6 $$ DecimalFormat decimalFormat = null[ CD ]
Line_9 $$ decimalFormat = (DecimalFormat) numberFormat-->Line_11 $$ decimalFormat.setParseBigDecimal(true)[ FD ]
Line_3 $$ if (numberFormat != null) -->Line_4 $$ Assert.notNull(text, "Text must not be null")[ CD ]
Line_16 $$ Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))-->Line_17 $$ return convertNumberToTargetClass(number, targetClass)[ FD ]
Line_9 $$ decimalFormat = (DecimalFormat) numberFormat-->Line_22 $$ decimalFormat.setParseBigDecimal(false)[ FD ]
Line_8 $$ if (numberFormat instanceof DecimalFormat) -->Line_9 $$ decimalFormat = (DecimalFormat) numberFormat[ CD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) -->Line_17 $$ return convertNumberToTargetClass(number, targetClass)[ FD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) -->Line_5 $$ Assert.notNull(targetClass, "Target class must not be null")[ FD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) -->Line_3 $$ if (numberFormat != null) [ FD ]
Line_6 $$ DecimalFormat decimalFormat = null-->Line_11 $$ decimalFormat.setParseBigDecimal(true)[ FD ]
Line_3 $$ if (numberFormat != null) -->Line_5 $$ Assert.notNull(targetClass, "Target class must not be null")[ CD ]
Line_10 $$ if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) -->Line_12 $$ resetBigDecimal = true[ CD ]
