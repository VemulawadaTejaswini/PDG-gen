Line_78 $$ buffer = new StringBuilder()-->Line_29 $$ if (buffer.length() == 0) [ FD ]
Line_72 $$ outputFormat = OutputFormat.VERTICAL-->Line_74 $$ process(queryRunner, split.statement(), outputFormat, true)[ FD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_60 $$ String sql = buffer.toString()[ FD ]
Line_66 $$ session = processSessionParameterChange(statement.get(), session, properties)-->Line_10 $$ prompt += ":" + session.getSchema()[ FD ]
Line_64 $$ if (statement.isPresent() && isSessionParameterChange(statement.get())) -->Line_67 $$ queryRunner.setSession(session)[ CD ]
Line_65 $$ Map<String, String> properties = queryRunner.getSession().getProperties()-->Line_66 $$ session = processSessionParameterChange(statement.get(), session, properties)[ FD ]
Line_15 $$ String commandPrompt = prompt + "> "-->Line_16 $$ String line = reader.readLine(commandPrompt)[ FD ]
Line_3 $$ try (TableNameCompleter tableNameCompleter = new TableNameCompleter(queryRunner);-->Line_33 $$ History history = reader.getHistory()[ FD ]
Line_25 $$ if (line == null) -->Line_26 $$ System.out.println()[ CD ]
Line_42 $$ command = command.substring(0, command.length() - 1).trim()-->Line_41 $$ if (command.endsWith(";")) [ FD ]
Line_17 $$ if (reader.interrupted()) -->Line_19 $$ if (!partial.isEmpty()) [ CD ]
Line_3 $$ try (TableNameCompleter tableNameCompleter = new TableNameCompleter(queryRunner);-->Line_68 $$ tableNameCompleter.populateCache()[ FD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_81 $$ buffer.append(partial).append('\n')[ FD ]
Line_29 $$ if (buffer.length() == 0) -->Line_41 $$ if (command.endsWith(";")) [ CD ]
Line_66 $$ session = processSessionParameterChange(statement.get(), session, properties)-->Line_67 $$ queryRunner.setSession(session)[ FD ]
Line_19 $$ if (!partial.isEmpty()) -->Line_20 $$ reader.getHistory().add(partial)[ CD ]
Line_18 $$ String partial = squeezeStatement(buffer.toString())-->Line_19 $$ if (!partial.isEmpty()) [ FD ]
Line_70 $$ OutputFormat outputFormat = OutputFormat.ALIGNED-->Line_72 $$ outputFormat = OutputFormat.VERTICAL[ FD ]
Line_16 $$ String line = reader.readLine(commandPrompt)-->Line_25 $$ if (line == null) [ FD ]
Line_22 $$ buffer = new StringBuilder()-->Line_60 $$ String sql = buffer.toString()[ FD ]
Line_64 $$ if (statement.isPresent() && isSessionParameterChange(statement.get())) -->Line_65 $$ Map<String, String> properties = queryRunner.getSession().getProperties()[ CD ]
Line_7 $$ while (true) -->Line_59 $$ buffer.append(line).append("\n")[ CD ]
Line_8 $$ String prompt = PROMPT_NAME-->Line_10 $$ prompt += ":" + session.getSchema()[ FD ]
Line_22 $$ buffer = new StringBuilder()-->Line_59 $$ buffer.append(line).append("\n")[ FD ]
Line_63 $$ Optional<Object> statement = getParsedStatement(split.statement())-->Line_66 $$ session = processSessionParameterChange(statement.get(), session, properties)[ FD ]
Line_33 $$ History history = reader.getHistory()-->Line_34 $$ if ((historyIndex <= 0) || (historyIndex > history.index())) [ FD ]
Line_16 $$ String line = reader.readLine(commandPrompt)-->Line_59 $$ buffer.append(line).append("\n")[ FD ]
Line_29 $$ if (buffer.length() == 0) -->Line_31 $$ if (HISTORY_INDEX_PATTERN.matcher(command).matches()) [ CD ]
Line_30 $$ String command = line.trim()-->Line_32 $$ int historyIndex = parseInt(command.substring(1))[ FD ]
Line_66 $$ session = processSessionParameterChange(statement.get(), session, properties)-->Line_9 $$ if (session.getSchema() != null) [ FD ]
Line_17 $$ if (reader.interrupted()) -->Line_22 $$ buffer = new StringBuilder()[ CD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_29 $$ if (buffer.length() == 0) [ FD ]
Line_41 $$ if (command.endsWith(";")) -->Line_42 $$ command = command.substring(0, command.length() - 1).trim()[ CD ]
Line_42 $$ command = command.substring(0, command.length() - 1).trim()-->Line_32 $$ int historyIndex = parseInt(command.substring(1))[ FD ]
Line_2 $$ private static void runConsole(QueryRunner queryRunner, ClientSession session) -->Line_67 $$ queryRunner.setSession(session)[ FD ]
Line_2 $$ private static void runConsole(QueryRunner queryRunner, ClientSession session) -->Line_65 $$ Map<String, String> properties = queryRunner.getSession().getProperties()[ FD ]
Line_78 $$ buffer = new StringBuilder()-->Line_81 $$ buffer.append(partial).append('\n')[ FD ]
Line_62 $$ for (Statement split : splitter.getCompleteStatements()) -->Line_63 $$ Optional<Object> statement = getParsedStatement(split.statement())[ FD ]
Line_9 $$ if (session.getSchema() != null) -->Line_10 $$ prompt += ":" + session.getSchema()[ CD ]
Line_25 $$ if (line == null) -->Line_27 $$ return[ CD ]
Line_38 $$ line = history.get(historyIndex - 1).toString()-->Line_30 $$ String command = line.trim()[ FD ]
Line_30 $$ String command = line.trim()-->Line_31 $$ if (HISTORY_INDEX_PATTERN.matcher(command).matches()) [ FD ]
Line_71 $$ if (split.terminator().equals("\\G")) -->Line_72 $$ outputFormat = OutputFormat.VERTICAL[ CD ]
Line_31 $$ if (HISTORY_INDEX_PATTERN.matcher(command).matches()) -->Line_32 $$ int historyIndex = parseInt(command.substring(1))[ CD ]
Line_7 $$ while (true) -->Line_8 $$ String prompt = PROMPT_NAME[ CD ]
Line_30 $$ String command = line.trim()-->Line_42 $$ command = command.substring(0, command.length() - 1).trim()[ FD ]
Line_61 $$ StatementSplitter splitter = new StatementSplitter(sql, ImmutableSet.of(";", "\\G"))-->Line_79 $$ String partial = splitter.getPartialStatement()[ FD ]
Line_31 $$ if (HISTORY_INDEX_PATTERN.matcher(command).matches()) -->Line_38 $$ line = history.get(historyIndex - 1).toString()[ CD ]
Line_7 $$ while (true) -->Line_17 $$ if (reader.interrupted()) [ CD ]
Line_70 $$ OutputFormat outputFormat = OutputFormat.ALIGNED-->Line_74 $$ process(queryRunner, split.statement(), outputFormat, true)[ FD ]
Line_3 $$ try (TableNameCompleter tableNameCompleter = new TableNameCompleter(queryRunner);-->Line_20 $$ reader.getHistory().add(partial)[ FD ]
Line_8 $$ String prompt = PROMPT_NAME-->Line_13 $$ prompt = Strings.repeat(" ", prompt.length() - 1) + "-"[ FD ]
Line_3 $$ try (TableNameCompleter tableNameCompleter = new TableNameCompleter(queryRunner);-->Line_16 $$ String line = reader.readLine(commandPrompt)[ FD ]
Line_62 $$ for (Statement split : splitter.getCompleteStatements()) -->Line_71 $$ if (split.terminator().equals("\\G")) [ FD ]
Line_64 $$ if (statement.isPresent() && isSessionParameterChange(statement.get())) -->Line_68 $$ tableNameCompleter.populateCache()[ CD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_22 $$ buffer = new StringBuilder()[ FD ]
Line_7 $$ while (true) -->Line_80 $$ if (!partial.isEmpty()) [ CD ]
Line_64 $$ if (statement.isPresent() && isSessionParameterChange(statement.get())) -->Line_71 $$ if (split.terminator().equals("\\G")) [ CD ]
Line_7 $$ while (true) -->Line_61 $$ StatementSplitter splitter = new StatementSplitter(sql, ImmutableSet.of(";", "\\G"))[ CD ]
Line_22 $$ buffer = new StringBuilder()-->Line_78 $$ buffer = new StringBuilder()[ FD ]
Line_7 $$ while (true) -->Line_78 $$ buffer = new StringBuilder()[ CD ]
Line_30 $$ String command = line.trim()-->Line_41 $$ if (command.endsWith(";")) [ FD ]
Line_2 $$ private static void runConsole(QueryRunner queryRunner, ClientSession session) -->Line_66 $$ session = processSessionParameterChange(statement.get(), session, properties)[ FD ]
Line_42 $$ command = command.substring(0, command.length() - 1).trim()-->Line_31 $$ if (HISTORY_INDEX_PATTERN.matcher(command).matches()) [ FD ]
Line_17 $$ if (reader.interrupted()) -->Line_18 $$ String partial = squeezeStatement(buffer.toString())[ CD ]
Line_18 $$ String partial = squeezeStatement(buffer.toString())-->Line_20 $$ reader.getHistory().add(partial)[ FD ]
Line_42 $$ command = command.substring(0, command.length() - 1).trim()-->Line_44 $$ switch(command.toLowerCase(ENGLISH)) [ FD ]
Line_22 $$ buffer = new StringBuilder()-->Line_81 $$ buffer.append(partial).append('\n')[ FD ]
Line_3 $$ try (TableNameCompleter tableNameCompleter = new TableNameCompleter(queryRunner);-->Line_5 $$ tableNameCompleter.populateCache()[ FD ]
Line_78 $$ buffer = new StringBuilder()-->Line_60 $$ String sql = buffer.toString()[ FD ]
Line_2 $$ private static void runConsole(QueryRunner queryRunner, ClientSession session) -->Line_9 $$ if (session.getSchema() != null) [ FD ]
Line_7 $$ while (true) -->Line_25 $$ if (line == null) [ CD ]
Line_18 $$ String partial = squeezeStatement(buffer.toString())-->Line_80 $$ if (!partial.isEmpty()) [ FD ]
Line_7 $$ while (true) -->Line_16 $$ String line = reader.readLine(commandPrompt)[ CD ]
Line_63 $$ Optional<Object> statement = getParsedStatement(split.statement())-->Line_64 $$ if (statement.isPresent() && isSessionParameterChange(statement.get())) [ FD ]
Line_38 $$ line = history.get(historyIndex - 1).toString()-->Line_59 $$ buffer.append(line).append("\n")[ FD ]
Line_61 $$ StatementSplitter splitter = new StatementSplitter(sql, ImmutableSet.of(";", "\\G"))-->Line_62 $$ for (Statement split : splitter.getCompleteStatements()) [ FD ]
Line_10 $$ prompt += ":" + session.getSchema()-->Line_13 $$ prompt = Strings.repeat(" ", prompt.length() - 1) + "-"[ FD ]
Line_7 $$ while (true) -->Line_15 $$ String commandPrompt = prompt + "> "[ CD ]
Line_7 $$ while (true) -->Line_9 $$ if (session.getSchema() != null) [ CD ]
Line_3 $$ try (TableNameCompleter tableNameCompleter = new TableNameCompleter(queryRunner);-->Line_17 $$ if (reader.interrupted()) [ FD ]
Line_30 $$ String command = line.trim()-->Line_44 $$ switch(command.toLowerCase(ENGLISH)) [ FD ]
Line_18 $$ String partial = squeezeStatement(buffer.toString())-->Line_81 $$ buffer.append(partial).append('\n')[ FD ]
Line_62 $$ for (Statement split : splitter.getCompleteStatements()) -->Line_74 $$ process(queryRunner, split.statement(), outputFormat, true)[ FD ]
Line_22 $$ buffer = new StringBuilder()-->Line_29 $$ if (buffer.length() == 0) [ FD ]
Line_22 $$ buffer = new StringBuilder()-->Line_18 $$ String partial = squeezeStatement(buffer.toString())[ FD ]
Line_22 $$ buffer = new StringBuilder()-->Line_12 $$ if (buffer.length() > 0) [ FD ]
Line_80 $$ if (!partial.isEmpty()) -->Line_81 $$ buffer.append(partial).append('\n')[ CD ]
Line_34 $$ if ((historyIndex <= 0) || (historyIndex > history.index())) -->Line_35 $$ System.err.println("Command does not exist")[ CD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_78 $$ buffer = new StringBuilder()[ FD ]
Line_12 $$ if (buffer.length() > 0) -->Line_13 $$ prompt = Strings.repeat(" ", prompt.length() - 1) + "-"[ CD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_12 $$ if (buffer.length() > 0) [ FD ]
Line_78 $$ buffer = new StringBuilder()-->Line_59 $$ buffer.append(line).append("\n")[ FD ]
Line_29 $$ if (buffer.length() == 0) -->Line_30 $$ String command = line.trim()[ CD ]
Line_78 $$ buffer = new StringBuilder()-->Line_18 $$ String partial = squeezeStatement(buffer.toString())[ FD ]
Line_49 $$ for (History.Entry entry : reader.getHistory()) -->Line_50 $$ System.out.printf("%5d  %s%n", entry.index() + 1, entry.value())[ FD ]
Line_7 $$ while (true) -->Line_12 $$ if (buffer.length() > 0) [ CD ]
Line_16 $$ String line = reader.readLine(commandPrompt)-->Line_30 $$ String command = line.trim()[ FD ]
Line_64 $$ if (statement.isPresent() && isSessionParameterChange(statement.get())) -->Line_70 $$ OutputFormat outputFormat = OutputFormat.ALIGNED[ CD ]
Line_64 $$ if (statement.isPresent() && isSessionParameterChange(statement.get())) -->Line_74 $$ process(queryRunner, split.statement(), outputFormat, true)[ CD ]
Line_2 $$ private static void runConsole(QueryRunner queryRunner, ClientSession session) -->Line_10 $$ prompt += ":" + session.getSchema()[ FD ]
Line_64 $$ if (statement.isPresent() && isSessionParameterChange(statement.get())) -->Line_66 $$ session = processSessionParameterChange(statement.get(), session, properties)[ CD ]
Line_7 $$ while (true) -->Line_60 $$ String sql = buffer.toString()[ CD ]
Line_38 $$ line = history.get(historyIndex - 1).toString()-->Line_25 $$ if (line == null) [ FD ]
Line_3 $$ try (TableNameCompleter tableNameCompleter = new TableNameCompleter(queryRunner);-->Line_49 $$ for (History.Entry entry : reader.getHistory()) [ FD ]
Line_3 $$ try (TableNameCompleter tableNameCompleter = new TableNameCompleter(queryRunner);-->Line_76 $$ reader.getHistory().add(squeezeStatement(split.statement()) + split.terminator())[ FD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_18 $$ String partial = squeezeStatement(buffer.toString())[ FD ]
Line_31 $$ if (HISTORY_INDEX_PATTERN.matcher(command).matches()) -->Line_39 $$ System.out.println(commandPrompt + line)[ CD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_59 $$ buffer.append(line).append("\n")[ FD ]
Line_16 $$ String line = reader.readLine(commandPrompt)-->Line_38 $$ line = history.get(historyIndex - 1).toString()[ FD ]
Line_2 $$ private static void runConsole(QueryRunner queryRunner, ClientSession session) -->Line_74 $$ process(queryRunner, split.statement(), outputFormat, true)[ FD ]
Line_7 $$ while (true) -->Line_79 $$ String partial = splitter.getPartialStatement()[ CD ]
Line_62 $$ for (Statement split : splitter.getCompleteStatements()) -->Line_76 $$ reader.getHistory().add(squeezeStatement(split.statement()) + split.terminator())[ FD ]
Line_78 $$ buffer = new StringBuilder()-->Line_12 $$ if (buffer.length() > 0) [ FD ]
Line_33 $$ History history = reader.getHistory()-->Line_38 $$ line = history.get(historyIndex - 1).toString()[ FD ]
Line_31 $$ if (HISTORY_INDEX_PATTERN.matcher(command).matches()) -->Line_33 $$ History history = reader.getHistory()[ CD ]
Line_7 $$ while (true) -->Line_29 $$ if (buffer.length() == 0) [ CD ]
Line_31 $$ if (HISTORY_INDEX_PATTERN.matcher(command).matches()) -->Line_34 $$ if ((historyIndex <= 0) || (historyIndex > history.index())) [ CD ]
