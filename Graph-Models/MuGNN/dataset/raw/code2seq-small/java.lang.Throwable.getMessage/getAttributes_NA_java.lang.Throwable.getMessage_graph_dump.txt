Line_14 $$ data = mySegments.getSegmentData(startIndex)-->Line_15 $$ if (isInitialState(data) || startIndex == 0)[ FD ]
Line_4 $$ if (mySegments.getSegmentCount() > 0) -->Line_13 $$ do [ CD ]
Line_13 $$ do -->Line_17 $$ startIndex--[ CD ]
Line_2 $$ public TextAttributes getAttributes(DocumentImpl document, int offset, char c) -->Line_21 $$ ImmutableText newText = document.getImmutableText().insert(offset, Character.toString(c))[ CD ]
Line_21 $$ ImmutableText newText = document.getImmutableText().insert(offset, Character.toString(c))-->Line_22 $$ myLexer.start(newText, startOffset, newText.length(), myInitialState)[ FD ]
Line_26 $$ tokenType = myLexer.getTokenType()-->Line_31 $$ return getAttributes(tokenType)[ FD ]
Line_2 $$ public TextAttributes getAttributes(DocumentImpl document, int offset, char c) -->Line_23 $$ IElementType tokenType = null[ CD ]
Line_7 $$ segmentIndex = mySegments.findSegmentIndex(offset) - 2-->Line_11 $$ int startIndex = Math.max(0, segmentIndex)[ FD ]
Line_2 $$ public TextAttributes getAttributes(DocumentImpl document, int offset, char c) -->Line_24 $$ while (myLexer.getTokenType() != null) [ CD ]
Line_2 $$ public TextAttributes getAttributes(DocumentImpl document, int offset, char c) -->Line_22 $$ myLexer.start(newText, startOffset, newText.length(), myInitialState)[ CD ]
Line_11 $$ int startIndex = Math.max(0, segmentIndex)-->Line_19 $$ startOffset = mySegments.getSegmentStart(startIndex)[ FD ]
Line_13 $$ do -->Line_15 $$ if (isInitialState(data) || startIndex == 0)[ CD ]
Line_11 $$ int startIndex = Math.max(0, segmentIndex)-->Line_14 $$ data = mySegments.getSegmentData(startIndex)[ FD ]
Line_5 $$ final int segmentIndex-->Line_11 $$ int startIndex = Math.max(0, segmentIndex)[ FD ]
Line_13 $$ do -->Line_14 $$ data = mySegments.getSegmentData(startIndex)[ CD ]
Line_19 $$ startOffset = mySegments.getSegmentStart(startIndex)-->Line_22 $$ myLexer.start(newText, startOffset, newText.length(), myInitialState)[ FD ]
Line_2 $$ public TextAttributes getAttributes(DocumentImpl document, int offset, char c) -->Line_7 $$ segmentIndex = mySegments.findSegmentIndex(offset) - 2[ FD ]
Line_2 $$ public TextAttributes getAttributes(DocumentImpl document, int offset, char c) -->Line_21 $$ ImmutableText newText = document.getImmutableText().insert(offset, Character.toString(c))[ FD ]
Line_2 $$ public TextAttributes getAttributes(DocumentImpl document, int offset, char c) -->Line_4 $$ if (mySegments.getSegmentCount() > 0) [ CD ]
Line_4 $$ if (mySegments.getSegmentCount() > 0) -->Line_5 $$ final int segmentIndex[ CD ]
Line_24 $$ while (myLexer.getTokenType() != null) -->Line_25 $$ if (myLexer.getTokenEnd() >= offset + 1) [ CD ]
Line_24 $$ while (myLexer.getTokenType() != null) -->Line_29 $$ myLexer.advance()[ CD ]
Line_12 $$ int data-->Line_15 $$ if (isInitialState(data) || startIndex == 0)[ FD ]
Line_4 $$ if (mySegments.getSegmentCount() > 0) -->Line_12 $$ int data[ CD ]
Line_5 $$ final int segmentIndex-->Line_7 $$ segmentIndex = mySegments.findSegmentIndex(offset) - 2[ FD ]
Line_12 $$ int data-->Line_14 $$ data = mySegments.getSegmentData(startIndex)[ FD ]
Line_4 $$ if (mySegments.getSegmentCount() > 0) -->Line_11 $$ int startIndex = Math.max(0, segmentIndex)[ CD ]
Line_11 $$ int startIndex = Math.max(0, segmentIndex)-->Line_17 $$ startIndex--[ FD ]
Line_3 $$ int startOffset = 0-->Line_22 $$ myLexer.start(newText, startOffset, newText.length(), myInitialState)[ FD ]
Line_23 $$ IElementType tokenType = null-->Line_26 $$ tokenType = myLexer.getTokenType()[ FD ]
Line_23 $$ IElementType tokenType = null-->Line_31 $$ return getAttributes(tokenType)[ FD ]
Line_4 $$ if (mySegments.getSegmentCount() > 0) -->Line_19 $$ startOffset = mySegments.getSegmentStart(startIndex)[ CD ]
Line_3 $$ int startOffset = 0-->Line_19 $$ startOffset = mySegments.getSegmentStart(startIndex)[ FD ]
Line_25 $$ if (myLexer.getTokenEnd() >= offset + 1) -->Line_26 $$ tokenType = myLexer.getTokenType()[ CD ]
Line_2 $$ public TextAttributes getAttributes(DocumentImpl document, int offset, char c) -->Line_3 $$ int startOffset = 0[ CD ]
Line_2 $$ public TextAttributes getAttributes(DocumentImpl document, int offset, char c) -->Line_31 $$ return getAttributes(tokenType)[ CD ]
