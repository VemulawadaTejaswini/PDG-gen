Line_8 $$ Settings previousInput = Settings.EMPTY-->Line_20 $$ assertFalse(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_2 $$ public void testGroups() -->Line_20 $$ assertFalse(settingUpdater.apply(currentInput, previousInput))[ CD ]
Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()-->Line_14 $$ assertEquals(asMap.get("1").get("value"), "1")[ FD ]
Line_23 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").build()-->Line_31 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "4").build()[ FD ]
Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()-->Line_37 $$ assertEquals(asMap.get("2").get("value"), "4")[ FD ]
Line_4 $$ Setting<Settings> setting = Setting.groupSetting("foo.bar.", true, Setting.Scope.CLUSTER)-->Line_38 $$ assertTrue(setting.match("foo.bar.baz"))[ FD ]
Line_2 $$ public void testGroups() -->Line_7 $$ Settings currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()[ CD ]
Line_18 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_31 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "4").build()[ FD ]
Line_3 $$ AtomicReference<Settings> ref = new AtomicReference(null)-->Line_26 $$ asMap = ref.get().getAsGroups()[ FD ]
Line_23 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").build()-->Line_32 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_22 $$ previousInput = currentInput-->Line_24 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_7 $$ Settings currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_31 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "4").build()[ FD ]
Line_6 $$ ClusterSettings.SettingUpdater settingUpdater = setting.newUpdater(ref::<>set, logger)-->Line_24 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_2 $$ public void testGroups() -->Line_32 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ CD ]
Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()-->Line_26 $$ asMap = ref.get().getAsGroups()[ FD ]
Line_2 $$ public void testGroups() -->Line_14 $$ assertEquals(asMap.get("1").get("value"), "1")[ CD ]
Line_7 $$ Settings currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_18 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()[ FD ]
Line_18 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_23 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").build()[ FD ]
Line_2 $$ public void testGroups() -->Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()[ CD ]
Line_2 $$ public void testGroups() -->Line_40 $$ ClusterSettings.SettingUpdater predicateSettingUpdater = setting.newUpdater(ref::<>set, logger, ( s) -> assertFalse(true))[ CD ]
Line_2 $$ public void testGroups() -->Line_26 $$ asMap = ref.get().getAsGroups()[ CD ]
Line_2 $$ public void testGroups() -->Line_28 $$ assertEquals(asMap.get("1").get("value"), "1")[ CD ]
Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()-->Line_28 $$ assertEquals(asMap.get("1").get("value"), "1")[ FD ]
Line_4 $$ Setting<Settings> setting = Setting.groupSetting("foo.bar.", true, Setting.Scope.CLUSTER)-->Line_5 $$ assertTrue(setting.isGroupSetting())[ FD ]
Line_8 $$ Settings previousInput = Settings.EMPTY-->Line_24 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_7 $$ Settings currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_32 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_2 $$ public void testGroups() -->Line_4 $$ Setting<Settings> setting = Setting.groupSetting("foo.bar.", true, Setting.Scope.CLUSTER)[ CD ]
Line_26 $$ asMap = ref.get().getAsGroups()-->Line_28 $$ assertEquals(asMap.get("1").get("value"), "1")[ FD ]
Line_3 $$ AtomicReference<Settings> ref = new AtomicReference(null)-->Line_33 $$ assertNotSame(current, ref.get())[ FD ]
Line_2 $$ public void testGroups() -->Line_27 $$ assertEquals(2, asMap.size())[ CD ]
Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()-->Line_13 $$ assertEquals(3, asMap.size())[ FD ]
Line_7 $$ Settings currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_23 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").build()[ FD ]
Line_2 $$ public void testGroups() -->Line_25 $$ assertNotSame(current, ref.get())[ CD ]
Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()-->Line_16 $$ assertEquals(asMap.get("3").get("value"), "3")[ FD ]
Line_17 $$ previousInput = currentInput-->Line_22 $$ previousInput = currentInput[ FD ]
Line_2 $$ public void testGroups() -->Line_24 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ CD ]
Line_2 $$ public void testGroups() -->Line_34 $$ asMap = ref.get().getAsGroups()[ CD ]
Line_7 $$ Settings currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_24 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_19 $$ Settings current = ref.get()-->Line_33 $$ assertNotSame(current, ref.get())[ FD ]
Line_18 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_30 $$ previousInput = currentInput[ FD ]
Line_2 $$ public void testGroups() -->Line_30 $$ previousInput = currentInput[ CD ]
Line_2 $$ public void testGroups() -->Line_35 $$ assertEquals(2, asMap.size())[ CD ]
Line_18 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_32 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_2 $$ public void testGroups() -->Line_37 $$ assertEquals(asMap.get("2").get("value"), "4")[ CD ]
Line_2 $$ public void testGroups() -->Line_11 $$ Settings settings = ref.get()[ CD ]
Line_8 $$ Settings previousInput = Settings.EMPTY-->Line_17 $$ previousInput = currentInput[ FD ]
Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()-->Line_15 $$ assertEquals(asMap.get("2").get("value"), "2")[ FD ]
Line_34 $$ asMap = ref.get().getAsGroups()-->Line_35 $$ assertEquals(2, asMap.size())[ FD ]
Line_26 $$ asMap = ref.get().getAsGroups()-->Line_34 $$ asMap = ref.get().getAsGroups()[ FD ]
Line_17 $$ previousInput = currentInput-->Line_24 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_8 $$ Settings previousInput = Settings.EMPTY-->Line_32 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_2 $$ public void testGroups() -->Line_39 $$ assertFalse(setting.match("foo.baz.bar"))[ CD ]
Line_6 $$ ClusterSettings.SettingUpdater settingUpdater = setting.newUpdater(ref::<>set, logger)-->Line_20 $$ assertFalse(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_17 $$ previousInput = currentInput-->Line_30 $$ previousInput = currentInput[ FD ]
Line_2 $$ public void testGroups() -->Line_19 $$ Settings current = ref.get()[ CD ]
Line_17 $$ previousInput = currentInput-->Line_20 $$ assertFalse(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_4 $$ Setting<Settings> setting = Setting.groupSetting("foo.bar.", true, Setting.Scope.CLUSTER)-->Line_40 $$ ClusterSettings.SettingUpdater predicateSettingUpdater = setting.newUpdater(ref::<>set, logger, ( s) -> assertFalse(true))[ FD ]
Line_2 $$ public void testGroups() -->Line_21 $$ assertSame(current, ref.get())[ CD ]
Line_8 $$ Settings previousInput = Settings.EMPTY-->Line_22 $$ previousInput = currentInput[ FD ]
Line_23 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").build()-->Line_24 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_2 $$ public void testGroups() -->Line_16 $$ assertEquals(asMap.get("3").get("value"), "3")[ CD ]
Line_2 $$ public void testGroups() -->Line_10 $$ assertNotNull(ref.get())[ CD ]
Line_3 $$ AtomicReference<Settings> ref = new AtomicReference(null)-->Line_21 $$ assertSame(current, ref.get())[ FD ]
Line_34 $$ asMap = ref.get().getAsGroups()-->Line_37 $$ assertEquals(asMap.get("2").get("value"), "4")[ FD ]
Line_2 $$ public void testGroups() -->Line_38 $$ assertTrue(setting.match("foo.bar.baz"))[ CD ]
Line_2 $$ public void testGroups() -->Line_5 $$ assertTrue(setting.isGroupSetting())[ CD ]
Line_3 $$ AtomicReference<Settings> ref = new AtomicReference(null)-->Line_10 $$ assertNotNull(ref.get())[ FD ]
Line_2 $$ public void testGroups() -->Line_29 $$ assertEquals(asMap.get("2").get("value"), "2")[ CD ]
Line_18 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_22 $$ previousInput = currentInput[ FD ]
Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()-->Line_34 $$ asMap = ref.get().getAsGroups()[ FD ]
Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()-->Line_36 $$ assertEquals(asMap.get("1").get("value"), "1")[ FD ]
Line_2 $$ public void testGroups() -->Line_3 $$ AtomicReference<Settings> ref = new AtomicReference(null)[ CD ]
Line_19 $$ Settings current = ref.get()-->Line_21 $$ assertSame(current, ref.get())[ FD ]
Line_3 $$ AtomicReference<Settings> ref = new AtomicReference(null)-->Line_11 $$ Settings settings = ref.get()[ FD ]
Line_7 $$ Settings currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_22 $$ previousInput = currentInput[ FD ]
Line_26 $$ asMap = ref.get().getAsGroups()-->Line_29 $$ assertEquals(asMap.get("2").get("value"), "2")[ FD ]
Line_2 $$ public void testGroups() -->Line_6 $$ ClusterSettings.SettingUpdater settingUpdater = setting.newUpdater(ref::<>set, logger)[ CD ]
Line_26 $$ asMap = ref.get().getAsGroups()-->Line_37 $$ assertEquals(asMap.get("2").get("value"), "4")[ FD ]
Line_18 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_24 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_23 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").build()-->Line_30 $$ previousInput = currentInput[ FD ]
Line_6 $$ ClusterSettings.SettingUpdater settingUpdater = setting.newUpdater(ref::<>set, logger)-->Line_9 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_8 $$ Settings previousInput = Settings.EMPTY-->Line_9 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_31 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "4").build()-->Line_32 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_2 $$ public void testGroups() -->Line_9 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ CD ]
Line_26 $$ asMap = ref.get().getAsGroups()-->Line_35 $$ assertEquals(2, asMap.size())[ FD ]
Line_26 $$ asMap = ref.get().getAsGroups()-->Line_27 $$ assertEquals(2, asMap.size())[ FD ]
Line_2 $$ public void testGroups() -->Line_18 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()[ CD ]
Line_7 $$ Settings currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_20 $$ assertFalse(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_2 $$ public void testGroups() -->Line_15 $$ assertEquals(asMap.get("2").get("value"), "2")[ CD ]
Line_2 $$ public void testGroups() -->Line_23 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").build()[ CD ]
Line_3 $$ AtomicReference<Settings> ref = new AtomicReference(null)-->Line_19 $$ Settings current = ref.get()[ FD ]
Line_2 $$ public void testGroups() -->Line_33 $$ assertNotSame(current, ref.get())[ CD ]
Line_4 $$ Setting<Settings> setting = Setting.groupSetting("foo.bar.", true, Setting.Scope.CLUSTER)-->Line_39 $$ assertFalse(setting.match("foo.baz.bar"))[ FD ]
Line_3 $$ AtomicReference<Settings> ref = new AtomicReference(null)-->Line_25 $$ assertNotSame(current, ref.get())[ FD ]
Line_2 $$ public void testGroups() -->Line_13 $$ assertEquals(3, asMap.size())[ CD ]
Line_17 $$ previousInput = currentInput-->Line_32 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_18 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_20 $$ assertFalse(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_26 $$ asMap = ref.get().getAsGroups()-->Line_36 $$ assertEquals(asMap.get("1").get("value"), "1")[ FD ]
Line_2 $$ public void testGroups() -->Line_36 $$ assertEquals(asMap.get("1").get("value"), "1")[ CD ]
Line_6 $$ ClusterSettings.SettingUpdater settingUpdater = setting.newUpdater(ref::<>set, logger)-->Line_32 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_30 $$ previousInput = currentInput-->Line_32 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_7 $$ Settings currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_17 $$ previousInput = currentInput[ FD ]
Line_4 $$ Setting<Settings> setting = Setting.groupSetting("foo.bar.", true, Setting.Scope.CLUSTER)-->Line_6 $$ ClusterSettings.SettingUpdater settingUpdater = setting.newUpdater(ref::<>set, logger)[ FD ]
Line_19 $$ Settings current = ref.get()-->Line_25 $$ assertNotSame(current, ref.get())[ FD ]
Line_3 $$ AtomicReference<Settings> ref = new AtomicReference(null)-->Line_34 $$ asMap = ref.get().getAsGroups()[ FD ]
Line_2 $$ public void testGroups() -->Line_31 $$ currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "4").build()[ CD ]
Line_8 $$ Settings previousInput = Settings.EMPTY-->Line_30 $$ previousInput = currentInput[ FD ]
Line_11 $$ Settings settings = ref.get()-->Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()[ FD ]
Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()-->Line_29 $$ assertEquals(asMap.get("2").get("value"), "2")[ FD ]
Line_34 $$ asMap = ref.get().getAsGroups()-->Line_36 $$ assertEquals(asMap.get("1").get("value"), "1")[ FD ]
Line_2 $$ public void testGroups() -->Line_22 $$ previousInput = currentInput[ CD ]
Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()-->Line_27 $$ assertEquals(2, asMap.size())[ FD ]
Line_22 $$ previousInput = currentInput-->Line_32 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_12 $$ Map<String, Settings> asMap = settings.getAsGroups()-->Line_35 $$ assertEquals(2, asMap.size())[ FD ]
Line_22 $$ previousInput = currentInput-->Line_30 $$ previousInput = currentInput[ FD ]
Line_2 $$ public void testGroups() -->Line_8 $$ Settings previousInput = Settings.EMPTY[ CD ]
Line_40 $$ ClusterSettings.SettingUpdater predicateSettingUpdater = setting.newUpdater(ref::<>set, logger, ( s) -> assertFalse(true))-->Line_42 $$ predicateSettingUpdater.apply(Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").build(), Settings.EMPTY)[ FD ]
Line_2 $$ public void testGroups() -->Line_17 $$ previousInput = currentInput[ CD ]
Line_7 $$ Settings currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_9 $$ assertTrue(settingUpdater.apply(currentInput, previousInput))[ FD ]
Line_7 $$ Settings currentInput = Settings.builder().put("foo.bar.1.value", "1").put("foo.bar.2.value", "2").put("foo.bar.3.value", "3").build()-->Line_30 $$ previousInput = currentInput[ FD ]
