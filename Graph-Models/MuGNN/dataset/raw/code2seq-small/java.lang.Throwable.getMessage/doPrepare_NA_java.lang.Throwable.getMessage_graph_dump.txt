Line_5 $$ final HashSet<Module> modules = new HashSet<Module>()-->Line_6 $$ PluginBuildUtil.getDependencies(module, modules)[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_5 $$ final HashSet<Module> modules = new HashSet<Module>()[ CD ]
Line_17 $$ if (oldFile.exists()) -->Line_18 $$ if (Messages.showYesNoDialog(module.getProject(), DevKitBundle.message("suggest.to.delete", oldPath), DevKitBundle.message("info.message"), Messages.getInformationIcon()) == Messages.YES) [ CD ]
Line_26 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_28 $$ progressIndicator.setText(DevKitBundle.message("prepare.for.deployment.common"))[ FD ]
Line_5 $$ final HashSet<Module> modules = new HashSet<Module>()-->Line_7 $$ modules.add(module)[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_32 $$ File jarFile = preparePluginsJar(module, modules)[ FD ]
Line_33 $$ if (isZip) -->Line_36 $$ FileUtil.copy(jarFile, dstFile)[ CD ]
Line_26 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_29 $$ progressIndicator.setIndeterminate(true)[ FD ]
Line_16 $$ final File oldFile = new File(oldPath)-->Line_17 $$ if (oldFile.exists()) [ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_16 $$ final File oldFile = new File(oldPath)[ CD ]
Line_24 $$ return clearReadOnly(module.getProject(), dstFile) && ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() -->Line_27 $$ if (progressIndicator != null) [ CD ]
Line_32 $$ File jarFile = preparePluginsJar(module, modules)-->Line_34 $$ processLibrariesAndJpsPlugins(jarFile, dstFile, pluginName, libs, jpsModules, progressIndicator)[ FD ]
Line_3 $$ final String pluginName = module.getName()-->Line_34 $$ processLibrariesAndJpsPlugins(jarFile, dstFile, pluginName, libs, jpsModules, progressIndicator)[ FD ]
Line_32 $$ File jarFile = preparePluginsJar(module, modules)-->Line_36 $$ FileUtil.copy(jarFile, dstFile)[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_4 $$ final String defaultPath = new File(module.getModuleFilePath()).getParent() + File.separator + pluginName[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_4 $$ final String defaultPath = new File(module.getModuleFilePath()).getParent() + File.separator + pluginName[ CD ]
Line_18 $$ if (Messages.showYesNoDialog(module.getProject(), DevKitBundle.message("suggest.to.delete", oldPath), DevKitBundle.message("info.message"), Messages.getInformationIcon()) == Messages.YES) -->Line_19 $$ FileUtil.delete(oldFile)[ CD ]
Line_5 $$ final HashSet<Module> modules = new HashSet<Module>()-->Line_13 $$ modules.removeAll(jpsModules.keySet())[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_8 $$ final Set<Library> libs = new HashSet<Library>()[ CD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_12 $$ final Map<Module, String> jpsModules = collectJpsPluginModules(module)[ CD ]
Line_12 $$ final Map<Module, String> jpsModules = collectJpsPluginModules(module)-->Line_34 $$ processLibrariesAndJpsPlugins(jarFile, dstFile, pluginName, libs, jpsModules, progressIndicator)[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_7 $$ modules.add(module)[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_41 $$ errorMessages.add(e.getMessage() + "\n(" + dstPath + ")")[ FD ]
Line_8 $$ final Set<Library> libs = new HashSet<Library>()-->Line_14 $$ final boolean isZip = !libs.isEmpty() || !jpsModules.isEmpty()[ FD ]
Line_15 $$ final String oldPath = defaultPath + (isZip ? JAR_EXTENSION : ZIP_EXTENSION)-->Line_18 $$ if (Messages.showYesNoDialog(module.getProject(), DevKitBundle.message("suggest.to.delete", oldPath), DevKitBundle.message("info.message"), Messages.getInformationIcon()) == Messages.YES) [ FD ]
Line_3 $$ final String pluginName = module.getName()-->Line_24 $$ return clearReadOnly(module.getProject(), dstFile) && ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() [ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_24 $$ return clearReadOnly(module.getProject(), dstFile) && ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() [ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_14 $$ final boolean isZip = !libs.isEmpty() || !jpsModules.isEmpty()[ CD ]
Line_9 $$ for (Module dep : modules) -->Line_10 $$ PluginBuildUtil.getLibraries(dep, libs)[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_6 $$ PluginBuildUtil.getDependencies(module, modules)[ CD ]
Line_24 $$ return clearReadOnly(module.getProject(), dstFile) && ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() -->Line_26 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_27 $$ if (progressIndicator != null) -->Line_28 $$ progressIndicator.setText(DevKitBundle.message("prepare.for.deployment.common"))[ CD ]
Line_23 $$ final File dstFile = new File(dstPath)-->Line_24 $$ return clearReadOnly(module.getProject(), dstFile) && ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() [ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_13 $$ modules.removeAll(jpsModules.keySet())[ CD ]
Line_23 $$ final File dstFile = new File(dstPath)-->Line_38 $$ LocalFileSystem.getInstance().refreshIoFiles(Collections.singleton(dstFile), true, false, null)[ FD ]
Line_5 $$ final HashSet<Module> modules = new HashSet<Module>()-->Line_32 $$ File jarFile = preparePluginsJar(module, modules)[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_24 $$ return clearReadOnly(module.getProject(), dstFile) && ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() [ CD ]
Line_3 $$ final String pluginName = module.getName()-->Line_39 $$ successMessages.add(DevKitBundle.message("saved.message", isZip ? 1 : 2, pluginName, dstPath))[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_39 $$ successMessages.add(DevKitBundle.message("saved.message", isZip ? 1 : 2, pluginName, dstPath))[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_18 $$ if (Messages.showYesNoDialog(module.getProject(), DevKitBundle.message("suggest.to.delete", oldPath), DevKitBundle.message("info.message"), Messages.getInformationIcon()) == Messages.YES) [ FD ]
Line_8 $$ final Set<Library> libs = new HashSet<Library>()-->Line_34 $$ processLibrariesAndJpsPlugins(jarFile, dstFile, pluginName, libs, jpsModules, progressIndicator)[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_22 $$ final String dstPath = defaultPath + (isZip ? ZIP_EXTENSION : JAR_EXTENSION)[ CD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_23 $$ final File dstFile = new File(dstPath)[ CD ]
Line_26 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_27 $$ if (progressIndicator != null) [ FD ]
Line_26 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_34 $$ processLibrariesAndJpsPlugins(jarFile, dstFile, pluginName, libs, jpsModules, progressIndicator)[ FD ]
Line_23 $$ final File dstFile = new File(dstPath)-->Line_36 $$ FileUtil.copy(jarFile, dstFile)[ FD ]
Line_16 $$ final File oldFile = new File(oldPath)-->Line_19 $$ FileUtil.delete(oldFile)[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_7 $$ modules.add(module)[ CD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_3 $$ final String pluginName = module.getName()[ CD ]
Line_27 $$ if (progressIndicator != null) -->Line_29 $$ progressIndicator.setIndeterminate(true)[ CD ]
Line_23 $$ final File dstFile = new File(dstPath)-->Line_34 $$ processLibrariesAndJpsPlugins(jarFile, dstFile, pluginName, libs, jpsModules, progressIndicator)[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_6 $$ PluginBuildUtil.getDependencies(module, modules)[ FD ]
Line_22 $$ final String dstPath = defaultPath + (isZip ? ZIP_EXTENSION : JAR_EXTENSION)-->Line_39 $$ successMessages.add(DevKitBundle.message("saved.message", isZip ? 1 : 2, pluginName, dstPath))[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_3 $$ final String pluginName = module.getName()[ FD ]
Line_12 $$ final Map<Module, String> jpsModules = collectJpsPluginModules(module)-->Line_13 $$ modules.removeAll(jpsModules.keySet())[ FD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_15 $$ final String oldPath = defaultPath + (isZip ? JAR_EXTENSION : ZIP_EXTENSION)[ CD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_12 $$ final Map<Module, String> jpsModules = collectJpsPluginModules(module)[ FD ]
Line_8 $$ final Set<Library> libs = new HashSet<Library>()-->Line_10 $$ PluginBuildUtil.getLibraries(dep, libs)[ FD ]
Line_33 $$ if (isZip) -->Line_34 $$ processLibrariesAndJpsPlugins(jarFile, dstFile, pluginName, libs, jpsModules, progressIndicator)[ CD ]
Line_2 $$ public static boolean doPrepare(final Module module, final List<String> errorMessages, final List<String> successMessages) -->Line_17 $$ if (oldFile.exists()) [ CD ]
Line_12 $$ final Map<Module, String> jpsModules = collectJpsPluginModules(module)-->Line_14 $$ final boolean isZip = !libs.isEmpty() || !jpsModules.isEmpty()[ FD ]
