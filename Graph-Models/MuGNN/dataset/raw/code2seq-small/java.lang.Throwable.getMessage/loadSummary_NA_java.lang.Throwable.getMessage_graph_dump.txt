Line_6 $$ DataInputStream iStream = null-->Line_18 $$ FileUtils.closeQuietly(iStream)[ FD ]
Line_6 $$ DataInputStream iStream = null-->Line_11 $$ last = decorateKey(ByteBufferUtil.readWithLength(iStream))[ FD ]
Line_6 $$ DataInputStream iStream = null-->Line_22 $$ FileUtils.closeQuietly(iStream)[ FD ]
Line_15 $$ if (indexSummary != null)-->Line_16 $$ indexSummary.close()[ CD ]
Line_6 $$ DataInputStream iStream = null-->Line_10 $$ first = decorateKey(ByteBufferUtil.readWithLength(iStream))[ FD ]
Line_6 $$ DataInputStream iStream = null-->Line_13 $$ dbuilder.deserializeBounds(iStream, descriptor.version)[ FD ]
Line_3 $$ File summariesFile = new File(descriptor.filenameFor(Component.SUMMARY))-->Line_4 $$ if (!summariesFile.exists())[ FD ]
Line_3 $$ File summariesFile = new File(descriptor.filenameFor(Component.SUMMARY))-->Line_17 $$ logger.trace("Cannot deserialize SSTable Summary File [ FD ]
Line_2 $$ public boolean loadSummary(SegmentedFile.Builder ibuilder, SegmentedFile.Builder dbuilder) -->Line_13 $$ dbuilder.deserializeBounds(iStream, descriptor.version)[ FD ]
Line_8 $$ iStream = new DataInputStream(new FileInputStream(summariesFile))-->Line_10 $$ first = decorateKey(ByteBufferUtil.readWithLength(iStream))[ FD ]
Line_8 $$ iStream = new DataInputStream(new FileInputStream(summariesFile))-->Line_22 $$ FileUtils.closeQuietly(iStream)[ FD ]
Line_6 $$ DataInputStream iStream = null-->Line_9 $$ indexSummary = IndexSummary.serializer.deserialize(iStream, getPartitioner(), descriptor.version.hasSamplingLevel(), metadata.params.minIndexInterval, metadata.params.maxIndexInterval)[ FD ]
Line_8 $$ iStream = new DataInputStream(new FileInputStream(summariesFile))-->Line_12 $$ ibuilder.deserializeBounds(iStream, descriptor.version)[ FD ]
Line_2 $$ public boolean loadSummary(SegmentedFile.Builder ibuilder, SegmentedFile.Builder dbuilder) -->Line_12 $$ ibuilder.deserializeBounds(iStream, descriptor.version)[ FD ]
Line_8 $$ iStream = new DataInputStream(new FileInputStream(summariesFile))-->Line_11 $$ last = decorateKey(ByteBufferUtil.readWithLength(iStream))[ FD ]
Line_6 $$ DataInputStream iStream = null-->Line_12 $$ ibuilder.deserializeBounds(iStream, descriptor.version)[ FD ]
Line_4 $$ if (!summariesFile.exists())-->Line_5 $$ return false[ CD ]
Line_2 $$ public boolean loadSummary(SegmentedFile.Builder ibuilder, SegmentedFile.Builder dbuilder) -->Line_4 $$ if (!summariesFile.exists())[ CD ]
Line_2 $$ public boolean loadSummary(SegmentedFile.Builder ibuilder, SegmentedFile.Builder dbuilder) -->Line_24 $$ return true[ CD ]
Line_8 $$ iStream = new DataInputStream(new FileInputStream(summariesFile))-->Line_18 $$ FileUtils.closeQuietly(iStream)[ FD ]
Line_8 $$ iStream = new DataInputStream(new FileInputStream(summariesFile))-->Line_9 $$ indexSummary = IndexSummary.serializer.deserialize(iStream, getPartitioner(), descriptor.version.hasSamplingLevel(), metadata.params.minIndexInterval, metadata.params.maxIndexInterval)[ FD ]
Line_2 $$ public boolean loadSummary(SegmentedFile.Builder ibuilder, SegmentedFile.Builder dbuilder) -->Line_6 $$ DataInputStream iStream = null[ CD ]
Line_3 $$ File summariesFile = new File(descriptor.filenameFor(Component.SUMMARY))-->Line_19 $$ FileUtils.deleteWithConfirm(summariesFile)[ FD ]
Line_8 $$ iStream = new DataInputStream(new FileInputStream(summariesFile))-->Line_13 $$ dbuilder.deserializeBounds(iStream, descriptor.version)[ FD ]
Line_2 $$ public boolean loadSummary(SegmentedFile.Builder ibuilder, SegmentedFile.Builder dbuilder) -->Line_3 $$ File summariesFile = new File(descriptor.filenameFor(Component.SUMMARY))[ CD ]
Line_6 $$ DataInputStream iStream = null-->Line_8 $$ iStream = new DataInputStream(new FileInputStream(summariesFile))[ FD ]
