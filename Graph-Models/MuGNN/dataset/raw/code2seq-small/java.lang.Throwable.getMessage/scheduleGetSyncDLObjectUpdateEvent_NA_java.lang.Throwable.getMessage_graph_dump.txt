Line_3 $$ Runnable runnable = new Runnable() -->Line_24 $$ BatchDownloadEvent batchDownloadEvent = BatchEventManager.getBatchDownloadEvent(syncAccount.getSyncAccountId())[ CD ]
Line_3 $$ Runnable runnable = new Runnable() -->Line_28 $$ ScheduledFuture<?> remoteEventsScheduledFuture = _remoteEventsScheduledExecutorService.scheduleWithFixedDelay(runnable, 0, syncAccount.getPollInterval(), TimeUnit.SECONDS)[ FD ]
Line_2 $$ protected static void scheduleGetSyncDLObjectUpdateEvent(final SyncAccount syncAccount, final SyncWatchEventProcessor syncWatchEventProcessor, ScheduledFuture<?> localEventsScheduledFuture, Watcher watcher) -->Line_16 $$ Set<Long> syncSiteIds = SyncSiteService.getActiveSyncSiteIds(syncAccount.getSyncAccountId())[ FD ]
Line_13 $$ if ((updatedSyncAccount.getState() != SyncAccount.STATE_CONNECTED) || syncWatchEventProcessor.isInProgress()) -->Line_14 $$ return[ CD ]
Line_24 $$ BatchDownloadEvent batchDownloadEvent = BatchEventManager.getBatchDownloadEvent(syncAccount.getSyncAccountId())-->Line_25 $$ batchDownloadEvent.fireBatchEvent()[ FD ]
Line_2 $$ protected static void scheduleGetSyncDLObjectUpdateEvent(final SyncAccount syncAccount, final SyncWatchEventProcessor syncWatchEventProcessor, ScheduledFuture<?> localEventsScheduledFuture, Watcher watcher) -->Line_28 $$ ScheduledFuture<?> remoteEventsScheduledFuture = _remoteEventsScheduledExecutorService.scheduleWithFixedDelay(runnable, 0, syncAccount.getPollInterval(), TimeUnit.SECONDS)[ CD ]
Line_3 $$ Runnable runnable = new Runnable() -->Line_25 $$ batchDownloadEvent.fireBatchEvent()[ CD ]
Line_3 $$ Runnable runnable = new Runnable() -->Line_16 $$ Set<Long> syncSiteIds = SyncSiteService.getActiveSyncSiteIds(syncAccount.getSyncAccountId())[ CD ]
Line_18 $$ SyncSite syncSite = SyncSiteService.fetchSyncSite(syncSiteId)-->Line_19 $$ if (syncSite.getState() == SyncSite.STATE_IN_PROGRESS) [ FD ]
Line_2 $$ protected static void scheduleGetSyncDLObjectUpdateEvent(final SyncAccount syncAccount, final SyncWatchEventProcessor syncWatchEventProcessor, ScheduledFuture<?> localEventsScheduledFuture, Watcher watcher) -->Line_24 $$ BatchDownloadEvent batchDownloadEvent = BatchEventManager.getBatchDownloadEvent(syncAccount.getSyncAccountId())[ FD ]
Line_2 $$ protected static void scheduleGetSyncDLObjectUpdateEvent(final SyncAccount syncAccount, final SyncWatchEventProcessor syncWatchEventProcessor, ScheduledFuture<?> localEventsScheduledFuture, Watcher watcher) -->Line_13 $$ if ((updatedSyncAccount.getState() != SyncAccount.STATE_CONNECTED) || syncWatchEventProcessor.isInProgress()) [ FD ]
Line_2 $$ protected static void scheduleGetSyncDLObjectUpdateEvent(final SyncAccount syncAccount, final SyncWatchEventProcessor syncWatchEventProcessor, ScheduledFuture<?> localEventsScheduledFuture, Watcher watcher) -->Line_28 $$ ScheduledFuture<?> remoteEventsScheduledFuture = _remoteEventsScheduledExecutorService.scheduleWithFixedDelay(runnable, 0, syncAccount.getPollInterval(), TimeUnit.SECONDS)[ FD ]
Line_18 $$ SyncSite syncSite = SyncSiteService.fetchSyncSite(syncSiteId)-->Line_22 $$ FileEventUtil.getUpdates(syncSite.getGroupId(), syncAccount.getSyncAccountId(), syncSite, true)[ FD ]
Line_3 $$ Runnable runnable = new Runnable() -->Line_12 $$ SyncAccount updatedSyncAccount = SyncAccountService.fetchSyncAccount(syncAccount.getSyncAccountId())[ CD ]
Line_2 $$ protected static void scheduleGetSyncDLObjectUpdateEvent(final SyncAccount syncAccount, final SyncWatchEventProcessor syncWatchEventProcessor, ScheduledFuture<?> localEventsScheduledFuture, Watcher watcher) -->Line_29 $$ _syncAccountTasks.put(syncAccount.getSyncAccountId(), new Object[] [ FD ]
Line_2 $$ protected static void scheduleGetSyncDLObjectUpdateEvent(final SyncAccount syncAccount, final SyncWatchEventProcessor syncWatchEventProcessor, ScheduledFuture<?> localEventsScheduledFuture, Watcher watcher) -->Line_12 $$ SyncAccount updatedSyncAccount = SyncAccountService.fetchSyncAccount(syncAccount.getSyncAccountId())[ FD ]
Line_2 $$ protected static void scheduleGetSyncDLObjectUpdateEvent(final SyncAccount syncAccount, final SyncWatchEventProcessor syncWatchEventProcessor, ScheduledFuture<?> localEventsScheduledFuture, Watcher watcher) -->Line_22 $$ FileEventUtil.getUpdates(syncSite.getGroupId(), syncAccount.getSyncAccountId(), syncSite, true)[ FD ]
Line_3 $$ Runnable runnable = new Runnable() -->Line_13 $$ if ((updatedSyncAccount.getState() != SyncAccount.STATE_CONNECTED) || syncWatchEventProcessor.isInProgress()) [ CD ]
Line_2 $$ protected static void scheduleGetSyncDLObjectUpdateEvent(final SyncAccount syncAccount, final SyncWatchEventProcessor syncWatchEventProcessor, ScheduledFuture<?> localEventsScheduledFuture, Watcher watcher) -->Line_3 $$ Runnable runnable = new Runnable() [ CD ]
Line_2 $$ protected static void scheduleGetSyncDLObjectUpdateEvent(final SyncAccount syncAccount, final SyncWatchEventProcessor syncWatchEventProcessor, ScheduledFuture<?> localEventsScheduledFuture, Watcher watcher) -->Line_29 $$ _syncAccountTasks.put(syncAccount.getSyncAccountId(), new Object[] [ CD ]
Line_17 $$ for (long syncSiteId : new HashSet<Long>(syncSiteIds)) -->Line_18 $$ SyncSite syncSite = SyncSiteService.fetchSyncSite(syncSiteId)[ FD ]
Line_12 $$ SyncAccount updatedSyncAccount = SyncAccountService.fetchSyncAccount(syncAccount.getSyncAccountId())-->Line_13 $$ if ((updatedSyncAccount.getState() != SyncAccount.STATE_CONNECTED) || syncWatchEventProcessor.isInProgress()) [ FD ]
