Line_54 $$ final Datagram expectedDatagram = Datagram.createResponseDatagram(requestDatagram, _data)-->Line_61 $$ Assert.assertSame(expectedDatagram, responseDatagram)[ FD ]
Line_2 $$ public void testSendSyncDatagram() throws Exception -->Line_35 $$ Assert.assertEquals(_DEFAULT_TIMEOUT, _mockIntraband.getDatagram().timeout)[ CD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_60 $$ Datagram responseDatagram = intraband.sendSyncDatagram(new MockRegistrationReference(_mockIntraband), requestDatagram)[ FD ]
Line_44 $$ IOException ioException = new IOException()-->Line_50 $$ Assert.assertSame(ioException, ioe)[ FD ]
Line_2 $$ public void testSendSyncDatagram() throws Exception -->Line_45 $$ _mockIntraband.setIOException(ioException)[ CD ]
Line_2 $$ public void testSendSyncDatagram() throws Exception -->Line_44 $$ IOException ioException = new IOException()[ CD ]
Line_55 $$ Intraband intraband = new MockIntraband(_DEFAULT_TIMEOUT) -->Line_60 $$ Datagram responseDatagram = intraband.sendSyncDatagram(new MockRegistrationReference(_mockIntraband), requestDatagram)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_38 $$ _mockIntraband.sendSyncDatagram(new MockRegistrationReference(_mockIntraband), requestDatagram, 2, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testSendSyncDatagram() throws Exception -->Line_65 $$ sendSyncDatagramCompletionHandler.timedOut(null)[ CD ]
Line_2 $$ public void testSendSyncDatagram() throws Exception -->Line_43 $$ Assert.assertEquals(2000, requestDatagram.timeout)[ CD ]
Line_2 $$ public void testSendSyncDatagram() throws Exception -->Line_55 $$ Intraband intraband = new MockIntraband(_DEFAULT_TIMEOUT) [ CD ]
Line_2 $$ public void testSendSyncDatagram() throws Exception -->Line_64 $$ sendSyncDatagramCompletionHandler.submitted(null)[ CD ]
Line_2 $$ public void testSendSyncDatagram() throws Exception -->Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ CD ]
Line_44 $$ IOException ioException = new IOException()-->Line_45 $$ _mockIntraband.setIOException(ioException)[ FD ]
Line_55 $$ Intraband intraband = new MockIntraband(_DEFAULT_TIMEOUT) -->Line_57 $$ return expectedDatagram[ CD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_54 $$ final Datagram expectedDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ FD ]
Line_2 $$ public void testSendSyncDatagram() throws Exception -->Line_60 $$ Datagram responseDatagram = intraband.sendSyncDatagram(new MockRegistrationReference(_mockIntraband), requestDatagram)[ CD ]
Line_10 $$ RegistrationReference registrationReference = new MockRegistrationReference(_mockIntraband)-->Line_11 $$ registrationReference.cancelRegistration()[ FD ]
Line_2 $$ public void testSendSyncDatagram() throws Exception -->Line_54 $$ final Datagram expectedDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ CD ]
Line_10 $$ RegistrationReference registrationReference = new MockRegistrationReference(_mockIntraband)-->Line_12 $$ _mockIntraband.sendSyncDatagram(registrationReference, null)[ FD ]
Line_2 $$ public void testSendSyncDatagram() throws Exception -->Line_61 $$ Assert.assertSame(expectedDatagram, responseDatagram)[ CD ]
Line_2 $$ public void testSendSyncDatagram() throws Exception -->Line_63 $$ sendSyncDatagramCompletionHandler.delivered(null)[ CD ]
