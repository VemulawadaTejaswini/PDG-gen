Line_12 $$ int line-->Line_14 $$ line = document.getLineNumber(caretOffset)[ FD ]
Line_18 $$ if (line > -1 && line < document.getLineCount()) -->Line_19 $$ final int startOffset = document.getLineStartOffset(line)[ CD ]
Line_4 $$ if (myOriginalDocument != null) -->Line_6 $$ LOG.assertTrue(editor != null)[ CD ]
Line_14 $$ line = document.getLineNumber(caretOffset)-->Line_20 $$ myLineUnderSelection = document.getText().substring(startOffset, document.getLineEndOffset(line))[ FD ]
Line_14 $$ line = document.getLineNumber(caretOffset)-->Line_19 $$ final int startOffset = document.getLineStartOffset(line)[ FD ]
Line_4 $$ if (myOriginalDocument != null) -->Line_8 $$ final int caretOffset = editor.getCaretModel().getOffset()[ CD ]
Line_7 $$ final Document document = editor.getDocument()-->Line_19 $$ final int startOffset = document.getLineStartOffset(line)[ FD ]
Line_7 $$ final Document document = editor.getDocument()-->Line_18 $$ if (line > -1 && line < document.getLineCount()) [ FD ]
Line_18 $$ if (line > -1 && line < document.getLineCount()) -->Line_20 $$ myLineUnderSelection = document.getText().substring(startOffset, document.getLineEndOffset(line))[ CD ]
Line_7 $$ final Document document = editor.getDocument()-->Line_16 $$ throw new IllegalStateException("document.length=" + document.getTextLength() + ", caret offset = " + caretOffset + "; " + e.getMessage(), e)[ FD ]
Line_19 $$ final int startOffset = document.getLineStartOffset(line)-->Line_20 $$ myLineUnderSelection = document.getText().substring(startOffset, document.getLineEndOffset(line))[ FD ]
Line_7 $$ final Document document = editor.getDocument()-->Line_11 $$ if (caretOffset > -1 && caretOffset < document.getTextLength()) [ FD ]
Line_11 $$ if (caretOffset > -1 && caretOffset < document.getTextLength()) -->Line_18 $$ if (line > -1 && line < document.getLineCount()) [ CD ]
Line_7 $$ final Document document = editor.getDocument()-->Line_14 $$ line = document.getLineNumber(caretOffset)[ FD ]
Line_2 $$ private synchronized void computeSelectedLineAndFilter() -->Line_4 $$ if (myOriginalDocument != null) [ CD ]
Line_25 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() -->Line_27 $$ doFilter()[ CD ]
Line_7 $$ final Document document = editor.getDocument()-->Line_20 $$ myLineUnderSelection = document.getText().substring(startOffset, document.getLineEndOffset(line))[ FD ]
Line_12 $$ int line-->Line_19 $$ final int startOffset = document.getLineStartOffset(line)[ FD ]
Line_8 $$ final int caretOffset = editor.getCaretModel().getOffset()-->Line_14 $$ line = document.getLineNumber(caretOffset)[ FD ]
Line_5 $$ final Editor editor = getEditor()-->Line_8 $$ final int caretOffset = editor.getCaretModel().getOffset()[ FD ]
Line_4 $$ if (myOriginalDocument != null) -->Line_11 $$ if (caretOffset > -1 && caretOffset < document.getTextLength()) [ CD ]
Line_2 $$ private synchronized void computeSelectedLineAndFilter() -->Line_25 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() [ CD ]
Line_4 $$ if (myOriginalDocument != null) -->Line_10 $$ myLineOffset = -1[ CD ]
Line_4 $$ if (myOriginalDocument != null) -->Line_7 $$ final Document document = editor.getDocument()[ CD ]
Line_12 $$ int line-->Line_20 $$ myLineUnderSelection = document.getText().substring(startOffset, document.getLineEndOffset(line))[ FD ]
Line_4 $$ if (myOriginalDocument != null) -->Line_5 $$ final Editor editor = getEditor()[ CD ]
Line_11 $$ if (caretOffset > -1 && caretOffset < document.getTextLength()) -->Line_12 $$ int line[ CD ]
Line_5 $$ final Editor editor = getEditor()-->Line_7 $$ final Document document = editor.getDocument()[ FD ]
Line_2 $$ private synchronized void computeSelectedLineAndFilter() -->Line_3 $$ myOriginalDocument = getOriginalDocument()[ CD ]
