Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_49 $$ servletContext.log("Unable to undeploy " + servletContext.getServletContextName(), e)[ FD ]
Line_29 $$ if (deploymentFileName.lastIndexOf("/") != -1) -->Line_30 $$ fileName = deploymentFileName.substring(deploymentFileName.lastIndexOf("/") + 1)[ CD ]
Line_27 $$ for (String deploymentFileName : deploymentFileNames.split(",")) -->Line_29 $$ if (deploymentFileName.lastIndexOf("/") != -1) [ FD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_38 $$ servletContext.log("Copying " + deploymentFileName)[ FD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_41 $$ servletContext.log("Successfully copied " + deploymentFileName + " to " + file.getAbsolutePath())[ FD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_9 $$ String deploymentPath = servletContext.getInitParameter("deployment-path")[ FD ]
Line_2 $$ public void contextInitialized(ServletContextEvent servletContextEvent) -->Line_9 $$ String deploymentPath = servletContext.getInitParameter("deployment-path")[ CD ]
Line_5 $$ if ((deploymentFileNames == null) || deploymentFileNames.equals("")) -->Line_7 $$ return[ CD ]
Line_2 $$ public void contextInitialized(ServletContextEvent servletContextEvent) -->Line_15 $$ if (!deploymentPathFile.exists()) [ CD ]
Line_15 $$ if (!deploymentPathFile.exists()) -->Line_17 $$ return[ CD ]
Line_14 $$ File deploymentPathFile = new File(deploymentPath)-->Line_15 $$ if (!deploymentPathFile.exists()) [ FD ]
Line_4 $$ String deploymentFileNames = servletContext.getInitParameter("deployment-files")-->Line_5 $$ if ((deploymentFileNames == null) || deploymentFileNames.equals("")) [ FD ]
Line_14 $$ File deploymentPathFile = new File(deploymentPath)-->Line_23 $$ if (!deploymentPathFile.canWrite()) [ FD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_40 $$ copy(servletContext, inputStream, new FileOutputStream(file))[ FD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_43 $$ servletContext.log("Unable to process " + deploymentFileName + ":\n" + e.getMessage(), e)[ FD ]
Line_2 $$ public void contextInitialized(ServletContextEvent servletContextEvent) -->Line_5 $$ if ((deploymentFileNames == null) || deploymentFileNames.equals("")) [ CD ]
Line_4 $$ String deploymentFileNames = servletContext.getInitParameter("deployment-files")-->Line_27 $$ for (String deploymentFileName : deploymentFileNames.split(",")) [ FD ]
Line_10 $$ if ((deploymentPath == null) || deploymentPath.equals("")) -->Line_12 $$ servletContext.log("Using deployment path " + deploymentPath + " because it is not specified in web.xml")[ CD ]
Line_15 $$ if (!deploymentPathFile.exists()) -->Line_16 $$ servletContext.log("The deployment path " + deploymentPath + " does not exist")[ CD ]
Line_27 $$ for (String deploymentFileName : deploymentFileNames.split(",")) -->Line_28 $$ String fileName = deploymentFileName.trim()[ FD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_47 $$ DeployManagerUtil.undeploy(servletContext.getServletContextName())[ FD ]
Line_19 $$ if (!deploymentPathFile.isDirectory()) -->Line_20 $$ servletContext.log("The deployment path " + deploymentPath + " is not a directory")[ CD ]
Line_28 $$ String fileName = deploymentFileName.trim()-->Line_30 $$ fileName = deploymentFileName.substring(deploymentFileName.lastIndexOf("/") + 1)[ FD ]
Line_23 $$ if (!deploymentPathFile.canWrite()) -->Line_25 $$ return[ CD ]
Line_33 $$ InputStream inputStream = servletContext.getResourceAsStream(deploymentFileName)-->Line_34 $$ if (inputStream == null) [ FD ]
Line_9 $$ String deploymentPath = servletContext.getInitParameter("deployment-path")-->Line_10 $$ if ((deploymentPath == null) || deploymentPath.equals("")) [ FD ]
Line_2 $$ public void contextInitialized(ServletContextEvent servletContextEvent) -->Line_23 $$ if (!deploymentPathFile.canWrite()) [ CD ]
Line_2 $$ public void contextInitialized(ServletContextEvent servletContextEvent) -->Line_10 $$ if ((deploymentPath == null) || deploymentPath.equals("")) [ CD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_4 $$ String deploymentFileNames = servletContext.getInitParameter("deployment-files")[ FD ]
Line_14 $$ File deploymentPathFile = new File(deploymentPath)-->Line_19 $$ if (!deploymentPathFile.isDirectory()) [ FD ]
Line_34 $$ if (inputStream == null) -->Line_35 $$ servletContext.log("Unable to find " + deploymentFileName + " in the WAR file")[ CD ]
Line_19 $$ if (!deploymentPathFile.isDirectory()) -->Line_21 $$ return[ CD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_6 $$ servletContext.log("No deployment files are specified in the web.xml")[ FD ]
Line_2 $$ public void contextInitialized(ServletContextEvent servletContextEvent) -->Line_4 $$ String deploymentFileNames = servletContext.getInitParameter("deployment-files")[ CD ]
Line_27 $$ for (String deploymentFileName : deploymentFileNames.split(",")) -->Line_33 $$ InputStream inputStream = servletContext.getResourceAsStream(deploymentFileName)[ FD ]
Line_2 $$ public void contextInitialized(ServletContextEvent servletContextEvent) -->Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()[ FD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_20 $$ servletContext.log("The deployment path " + deploymentPath + " is not a directory")[ FD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_33 $$ InputStream inputStream = servletContext.getResourceAsStream(deploymentFileName)[ FD ]
Line_10 $$ if ((deploymentPath == null) || deploymentPath.equals("")) -->Line_11 $$ deploymentPath = PropsUtil.get("auto.deploy.deploy.dir")[ CD ]
Line_2 $$ public void contextInitialized(ServletContextEvent servletContextEvent) -->Line_14 $$ File deploymentPathFile = new File(deploymentPath)[ CD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_12 $$ servletContext.log("Using deployment path " + deploymentPath + " because it is not specified in web.xml")[ FD ]
Line_2 $$ public void contextInitialized(ServletContextEvent servletContextEvent) -->Line_19 $$ if (!deploymentPathFile.isDirectory()) [ CD ]
Line_39 $$ File file = new File(deploymentPathFile, fileName)-->Line_41 $$ servletContext.log("Successfully copied " + deploymentFileName + " to " + file.getAbsolutePath())[ FD ]
Line_23 $$ if (!deploymentPathFile.canWrite()) -->Line_24 $$ servletContext.log("The deployment path " + deploymentPath + " is not writable")[ CD ]
Line_27 $$ for (String deploymentFileName : deploymentFileNames.split(",")) -->Line_30 $$ fileName = deploymentFileName.substring(deploymentFileName.lastIndexOf("/") + 1)[ FD ]
Line_2 $$ public void contextInitialized(ServletContextEvent servletContextEvent) -->Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()[ CD ]
Line_33 $$ InputStream inputStream = servletContext.getResourceAsStream(deploymentFileName)-->Line_40 $$ copy(servletContext, inputStream, new FileOutputStream(file))[ FD ]
Line_9 $$ String deploymentPath = servletContext.getInitParameter("deployment-path")-->Line_11 $$ deploymentPath = PropsUtil.get("auto.deploy.deploy.dir")[ FD ]
Line_5 $$ if ((deploymentFileNames == null) || deploymentFileNames.equals("")) -->Line_6 $$ servletContext.log("No deployment files are specified in the web.xml")[ CD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_16 $$ servletContext.log("The deployment path " + deploymentPath + " does not exist")[ FD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_24 $$ servletContext.log("The deployment path " + deploymentPath + " is not writable")[ FD ]
Line_3 $$ ServletContext servletContext = servletContextEvent.getServletContext()-->Line_35 $$ servletContext.log("Unable to find " + deploymentFileName + " in the WAR file")[ FD ]
