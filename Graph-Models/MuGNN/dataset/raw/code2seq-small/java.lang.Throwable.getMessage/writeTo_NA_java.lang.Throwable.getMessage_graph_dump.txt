Line_2 $$ public void writeTo(StreamOutput out) throws IOException -->Line_4 $$ out.writeThrowable(this.getCause())[ CD ]
Line_2 $$ public void writeTo(StreamOutput out) throws IOException -->Line_6 $$ out.writeVInt(headers.size())[ FD ]
Line_2 $$ public void writeTo(StreamOutput out) throws IOException -->Line_4 $$ out.writeThrowable(this.getCause())[ FD ]
Line_7 $$ for (Map.Entry<String, List<String>> entry : headers.entrySet()) -->Line_8 $$ out.writeString(entry.getKey())[ FD ]
Line_7 $$ for (Map.Entry<String, List<String>> entry : headers.entrySet()) -->Line_10 $$ for (String v : entry.getValue()) [ FD ]
Line_7 $$ for (Map.Entry<String, List<String>> entry : headers.entrySet()) -->Line_9 $$ out.writeVInt(entry.getValue().size())[ FD ]
Line_2 $$ public void writeTo(StreamOutput out) throws IOException -->Line_9 $$ out.writeVInt(entry.getValue().size())[ FD ]
Line_2 $$ public void writeTo(StreamOutput out) throws IOException -->Line_11 $$ out.writeString(v)[ FD ]
Line_2 $$ public void writeTo(StreamOutput out) throws IOException -->Line_6 $$ out.writeVInt(headers.size())[ CD ]
Line_10 $$ for (String v : entry.getValue()) -->Line_11 $$ out.writeString(v)[ FD ]
Line_2 $$ public void writeTo(StreamOutput out) throws IOException -->Line_5 $$ writeStackTraces(this, out)[ CD ]
Line_2 $$ public void writeTo(StreamOutput out) throws IOException -->Line_3 $$ out.writeOptionalString(this.getMessage())[ CD ]
Line_2 $$ public void writeTo(StreamOutput out) throws IOException -->Line_8 $$ out.writeString(entry.getKey())[ FD ]
Line_2 $$ public void writeTo(StreamOutput out) throws IOException -->Line_5 $$ writeStackTraces(this, out)[ FD ]
Line_2 $$ public void writeTo(StreamOutput out) throws IOException -->Line_3 $$ out.writeOptionalString(this.getMessage())[ FD ]
