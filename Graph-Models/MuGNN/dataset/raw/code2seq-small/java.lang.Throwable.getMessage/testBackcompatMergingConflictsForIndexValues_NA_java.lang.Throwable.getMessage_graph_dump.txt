Line_3 $$ List<String> indexValues = new ArrayList()-->Line_10 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("index", indexValues.remove(randomInt(1))).endObject().endObject().endObject().string()[ FD ]
Line_2 $$ public void testBackcompatMergingConflictsForIndexValues() throws Exception -->Line_7 $$ String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("index", indexValues.remove(randomInt(2))).endObject().endObject().endObject().string()[ CD ]
Line_2 $$ public void testBackcompatMergingConflictsForIndexValues() throws Exception -->Line_8 $$ MapperService mapperService = createIndex("test", BWC_SETTINGS).mapperService()[ CD ]
Line_2 $$ public void testBackcompatMergingConflictsForIndexValues() throws Exception -->Line_6 $$ indexValues.add("not_analyzed")[ CD ]
Line_2 $$ public void testBackcompatMergingConflictsForIndexValues() throws Exception -->Line_9 $$ mapperService.merge("type", new CompressedXContent(mapping), true, false)[ CD ]
Line_2 $$ public void testBackcompatMergingConflictsForIndexValues() throws Exception -->Line_4 $$ indexValues.add("analyzed")[ CD ]
Line_2 $$ public void testBackcompatMergingConflictsForIndexValues() throws Exception -->Line_10 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("index", indexValues.remove(randomInt(1))).endObject().endObject().endObject().string()[ CD ]
Line_3 $$ List<String> indexValues = new ArrayList()-->Line_7 $$ String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("index", indexValues.remove(randomInt(2))).endObject().endObject().endObject().string()[ FD ]
Line_7 $$ String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("index", indexValues.remove(randomInt(2))).endObject().endObject().endObject().string()-->Line_10 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("index", indexValues.remove(randomInt(1))).endObject().endObject().endObject().string()[ FD ]
Line_3 $$ List<String> indexValues = new ArrayList()-->Line_5 $$ indexValues.add("no")[ FD ]
Line_8 $$ MapperService mapperService = createIndex("test", BWC_SETTINGS).mapperService()-->Line_9 $$ mapperService.merge("type", new CompressedXContent(mapping), true, false)[ FD ]
Line_3 $$ List<String> indexValues = new ArrayList()-->Line_6 $$ indexValues.add("not_analyzed")[ FD ]
Line_2 $$ public void testBackcompatMergingConflictsForIndexValues() throws Exception -->Line_3 $$ List<String> indexValues = new ArrayList()[ CD ]
Line_3 $$ List<String> indexValues = new ArrayList()-->Line_4 $$ indexValues.add("analyzed")[ FD ]
Line_2 $$ public void testBackcompatMergingConflictsForIndexValues() throws Exception -->Line_5 $$ indexValues.add("no")[ CD ]
Line_8 $$ MapperService mapperService = createIndex("test", BWC_SETTINGS).mapperService()-->Line_12 $$ mapperService.merge("type", new CompressedXContent(mapping), false, false)[ FD ]
