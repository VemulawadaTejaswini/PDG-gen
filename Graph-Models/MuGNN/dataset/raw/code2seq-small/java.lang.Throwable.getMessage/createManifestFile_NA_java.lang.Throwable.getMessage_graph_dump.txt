Line_28 $$ if (exception != null) -->Line_30 $$ Messages.showErrorDialog(project, exception.getMessage(), CommonBundle.getErrorTitle())[ CD ]
Line_2 $$ public static VirtualFile createManifestFile(@NotNull final VirtualFile directory, @NotNull final Project project) -->Line_4 $$ final Ref<IOException> exc = Ref.create(null)[ CD ]
Line_9 $$ if (!dir.getName().equals(MANIFEST_DIR_NAME)) -->Line_10 $$ dir = VfsUtil.createDirectoryIfMissing(dir, MANIFEST_DIR_NAME)[ CD ]
Line_2 $$ public static VirtualFile createManifestFile(@NotNull final VirtualFile directory, @NotNull final Project project) -->Line_27 $$ final IOException exception = exc.get()[ CD ]
Line_15 $$ final Manifest manifest = new Manifest()-->Line_17 $$ manifest.write(output)[ FD ]
Line_12 $$ final VirtualFile file = dir.createChildData(this, MANIFEST_FILE_NAME)-->Line_13 $$ final OutputStream output = file.getOutputStream(this)[ FD ]
Line_2 $$ public static VirtualFile createManifestFile(@NotNull final VirtualFile directory, @NotNull final Project project) -->Line_33 $$ return file[ CD ]
Line_5 $$ final VirtualFile file = new WriteAction<VirtualFile>() -->Line_21 $$ result.setResult(file)[ FD ]
Line_7 $$ VirtualFile dir = directory-->Line_10 $$ dir = VfsUtil.createDirectoryIfMissing(dir, MANIFEST_DIR_NAME)[ FD ]
Line_2 $$ public static VirtualFile createManifestFile(@NotNull final VirtualFile directory, @NotNull final Project project) -->Line_5 $$ final VirtualFile file = new WriteAction<VirtualFile>() [ CD ]
Line_5 $$ final VirtualFile file = new WriteAction<VirtualFile>() -->Line_13 $$ final OutputStream output = file.getOutputStream(this)[ FD ]
Line_10 $$ dir = VfsUtil.createDirectoryIfMissing(dir, MANIFEST_DIR_NAME)-->Line_12 $$ final VirtualFile file = dir.createChildData(this, MANIFEST_FILE_NAME)[ FD ]
Line_12 $$ final VirtualFile file = dir.createChildData(this, MANIFEST_FILE_NAME)-->Line_21 $$ result.setResult(file)[ FD ]
Line_2 $$ public static VirtualFile createManifestFile(@NotNull final VirtualFile directory, @NotNull final Project project) -->Line_3 $$ ApplicationManager.getApplication().assertIsDispatchThread()[ CD ]
Line_13 $$ final OutputStream output = file.getOutputStream(this)-->Line_19 $$ output.close()[ FD ]
Line_4 $$ final Ref<IOException> exc = Ref.create(null)-->Line_27 $$ final IOException exception = exc.get()[ FD ]
Line_15 $$ final Manifest manifest = new Manifest()-->Line_16 $$ ManifestBuilder.setVersionAttribute(manifest.getMainAttributes())[ FD ]
Line_2 $$ public static VirtualFile createManifestFile(@NotNull final VirtualFile directory, @NotNull final Project project) -->Line_28 $$ if (exception != null) [ CD ]
Line_28 $$ if (exception != null) -->Line_31 $$ return null[ CD ]
Line_13 $$ final OutputStream output = file.getOutputStream(this)-->Line_17 $$ manifest.write(output)[ FD ]
Line_28 $$ if (exception != null) -->Line_29 $$ LOG.info(exception)[ CD ]
Line_4 $$ final Ref<IOException> exc = Ref.create(null)-->Line_23 $$ exc.set(e)[ FD ]
Line_7 $$ VirtualFile dir = directory-->Line_9 $$ if (!dir.getName().equals(MANIFEST_DIR_NAME)) [ FD ]
Line_5 $$ final VirtualFile file = new WriteAction<VirtualFile>() -->Line_7 $$ VirtualFile dir = directory[ CD ]
Line_2 $$ public static VirtualFile createManifestFile(@NotNull final VirtualFile directory, @NotNull final Project project) -->Line_30 $$ Messages.showErrorDialog(project, exception.getMessage(), CommonBundle.getErrorTitle())[ FD ]
Line_7 $$ VirtualFile dir = directory-->Line_12 $$ final VirtualFile file = dir.createChildData(this, MANIFEST_FILE_NAME)[ FD ]
