Line_19 $$ weight = _INFINITE_WEIGHT-->Line_34 $$ weightedWord.setWeight(weight)[ FD ]
Line_25 $$ weight = weight + distance-->Line_34 $$ weightedWord.setWeight(weight)[ FD ]
Line_11 $$ SolrDocumentList solrDocumentList = queryResponse.getResults()-->Line_13 $$ SolrDocument solrDocument = solrDocumentList.get(i)[ FD ]
Line_23 $$ float distance = _stringDistance.getDistance(inputLowerCase, suggestionLowerCase)-->Line_24 $$ if (distance >= _distanceThreshold) [ FD ]
Line_30 $$ weightedWord = new WeightedWord(suggestion, weight)-->Line_29 $$ if (weightedWord == null) [ FD ]
Line_28 $$ WeightedWord weightedWord = weightedWordsMap.get(suggestion)-->Line_30 $$ weightedWord = new WeightedWord(suggestion, weight)[ FD ]
Line_7 $$ SolrQuery solrQuery = _nGramQueryBuilder.getNGramQuery(input)-->Line_9 $$ solrQuery.setRows(_MAX_QUERY_RESULTS)[ FD ]
Line_18 $$ if (suggestion.equals(input)) -->Line_19 $$ weight = _INFINITE_WEIGHT[ CD ]
Line_30 $$ weightedWord = new WeightedWord(suggestion, weight)-->Line_34 $$ weightedWord.setWeight(weight)[ FD ]
Line_2 $$ protected TreeSet<WeightedWord> suggestKeywords(SearchContext searchContext, String input) throws SearchException -->Line_3 $$ SolrClient solrClient = _solrClientManager.getSolrClient()[ CD ]
Line_15 $$ String suggestion = suggestions.get(0)-->Line_28 $$ WeightedWord weightedWord = weightedWordsMap.get(suggestion)[ FD ]
Line_29 $$ if (weightedWord == null) -->Line_33 $$ if (weight > weightedWord.getWeight()) [ CD ]
Line_17 $$ float weight = GetterUtil.getFloat(weights.get(0))-->Line_34 $$ weightedWord.setWeight(weight)[ FD ]
Line_28 $$ WeightedWord weightedWord = weightedWordsMap.get(suggestion)-->Line_34 $$ weightedWord.setWeight(weight)[ FD ]
Line_5 $$ Map<String, WeightedWord> weightedWordsMap = new HashMap()-->Line_28 $$ WeightedWord weightedWord = weightedWordsMap.get(suggestion)[ FD ]
Line_18 $$ if (suggestion.equals(input)) -->Line_22 $$ String suggestionLowerCase = StringUtil.toLowerCase(suggestion)[ CD ]
Line_15 $$ String suggestion = suggestions.get(0)-->Line_18 $$ if (suggestion.equals(input)) [ FD ]
Line_5 $$ Map<String, WeightedWord> weightedWordsMap = new HashMap()-->Line_31 $$ weightedWordsMap.put(suggestion, weightedWord)[ FD ]
Line_25 $$ weight = weight + distance-->Line_33 $$ if (weight > weightedWord.getWeight()) [ FD ]
Line_11 $$ SolrDocumentList solrDocumentList = queryResponse.getResults()-->Line_12 $$ for (int i = 0; i < solrDocumentList.size(); i++) [ FD ]
Line_3 $$ SolrClient solrClient = _solrClientManager.getSolrClient()-->Line_10 $$ QueryResponse queryResponse = solrClient.query(solrQuery, SolrRequest.METHOD.POST)[ FD ]
Line_12 $$ for (int i = 0; i < solrDocumentList.size(); i++) -->Line_28 $$ WeightedWord weightedWord = weightedWordsMap.get(suggestion)[ CD ]
Line_13 $$ SolrDocument solrDocument = solrDocumentList.get(i)-->Line_14 $$ List<String> suggestions = (List<String>) solrDocument.get(Field.SPELL_CHECK_WORD)[ FD ]
Line_17 $$ float weight = GetterUtil.getFloat(weights.get(0))-->Line_19 $$ weight = _INFINITE_WEIGHT[ FD ]
Line_24 $$ if (distance >= _distanceThreshold) -->Line_25 $$ weight = weight + distance[ CD ]
Line_6 $$ TreeSet<WeightedWord> weightedWordsSet = new TreeSet()-->Line_32 $$ weightedWordsSet.add(weightedWord)[ FD ]
Line_12 $$ for (int i = 0; i < solrDocumentList.size(); i++) -->Line_17 $$ float weight = GetterUtil.getFloat(weights.get(0))[ CD ]
Line_21 $$ String inputLowerCase = StringUtil.toLowerCase(input)-->Line_23 $$ float distance = _stringDistance.getDistance(inputLowerCase, suggestionLowerCase)[ FD ]
Line_2 $$ protected TreeSet<WeightedWord> suggestKeywords(SearchContext searchContext, String input) throws SearchException -->Line_8 $$ solrQuery.addFilterQuery(getFilterQueries(searchContext, SuggestionConstants.TYPE_SPELL_CHECKER))[ FD ]
Line_30 $$ weightedWord = new WeightedWord(suggestion, weight)-->Line_33 $$ if (weight > weightedWord.getWeight()) [ FD ]
Line_28 $$ WeightedWord weightedWord = weightedWordsMap.get(suggestion)-->Line_33 $$ if (weight > weightedWord.getWeight()) [ FD ]
Line_33 $$ if (weight > weightedWord.getWeight()) -->Line_34 $$ weightedWord.setWeight(weight)[ CD ]
Line_30 $$ weightedWord = new WeightedWord(suggestion, weight)-->Line_31 $$ weightedWordsMap.put(suggestion, weightedWord)[ FD ]
Line_12 $$ for (int i = 0; i < solrDocumentList.size(); i++) -->Line_18 $$ if (suggestion.equals(input)) [ CD ]
Line_19 $$ weight = _INFINITE_WEIGHT-->Line_25 $$ weight = weight + distance[ FD ]
Line_12 $$ for (int i = 0; i < solrDocumentList.size(); i++) -->Line_29 $$ if (weightedWord == null) [ CD ]
Line_28 $$ WeightedWord weightedWord = weightedWordsMap.get(suggestion)-->Line_32 $$ weightedWordsSet.add(weightedWord)[ FD ]
Line_22 $$ String suggestionLowerCase = StringUtil.toLowerCase(suggestion)-->Line_23 $$ float distance = _stringDistance.getDistance(inputLowerCase, suggestionLowerCase)[ FD ]
Line_12 $$ for (int i = 0; i < solrDocumentList.size(); i++) -->Line_16 $$ List<String> weights = (List<String>) solrDocument.get(Field.PRIORITY)[ CD ]
Line_7 $$ SolrQuery solrQuery = _nGramQueryBuilder.getNGramQuery(input)-->Line_10 $$ QueryResponse queryResponse = solrClient.query(solrQuery, SolrRequest.METHOD.POST)[ FD ]
Line_2 $$ protected TreeSet<WeightedWord> suggestKeywords(SearchContext searchContext, String input) throws SearchException -->Line_18 $$ if (suggestion.equals(input)) [ FD ]
Line_19 $$ weight = _INFINITE_WEIGHT-->Line_33 $$ if (weight > weightedWord.getWeight()) [ FD ]
Line_12 $$ for (int i = 0; i < solrDocumentList.size(); i++) -->Line_15 $$ String suggestion = suggestions.get(0)[ CD ]
Line_18 $$ if (suggestion.equals(input)) -->Line_24 $$ if (distance >= _distanceThreshold) [ CD ]
Line_30 $$ weightedWord = new WeightedWord(suggestion, weight)-->Line_32 $$ weightedWordsSet.add(weightedWord)[ FD ]
Line_2 $$ protected TreeSet<WeightedWord> suggestKeywords(SearchContext searchContext, String input) throws SearchException -->Line_7 $$ SolrQuery solrQuery = _nGramQueryBuilder.getNGramQuery(input)[ FD ]
Line_12 $$ for (int i = 0; i < solrDocumentList.size(); i++) -->Line_13 $$ SolrDocument solrDocument = solrDocumentList.get(i)[ FD ]
Line_7 $$ SolrQuery solrQuery = _nGramQueryBuilder.getNGramQuery(input)-->Line_8 $$ solrQuery.addFilterQuery(getFilterQueries(searchContext, SuggestionConstants.TYPE_SPELL_CHECKER))[ FD ]
Line_28 $$ WeightedWord weightedWord = weightedWordsMap.get(suggestion)-->Line_31 $$ weightedWordsMap.put(suggestion, weightedWord)[ FD ]
Line_10 $$ QueryResponse queryResponse = solrClient.query(solrQuery, SolrRequest.METHOD.POST)-->Line_11 $$ SolrDocumentList solrDocumentList = queryResponse.getResults()[ FD ]
Line_29 $$ if (weightedWord == null) -->Line_32 $$ weightedWordsSet.add(weightedWord)[ CD ]
Line_13 $$ SolrDocument solrDocument = solrDocumentList.get(i)-->Line_16 $$ List<String> weights = (List<String>) solrDocument.get(Field.PRIORITY)[ FD ]
Line_16 $$ List<String> weights = (List<String>) solrDocument.get(Field.PRIORITY)-->Line_17 $$ float weight = GetterUtil.getFloat(weights.get(0))[ FD ]
Line_23 $$ float distance = _stringDistance.getDistance(inputLowerCase, suggestionLowerCase)-->Line_25 $$ weight = weight + distance[ FD ]
Line_29 $$ if (weightedWord == null) -->Line_31 $$ weightedWordsMap.put(suggestion, weightedWord)[ CD ]
Line_17 $$ float weight = GetterUtil.getFloat(weights.get(0))-->Line_33 $$ if (weight > weightedWord.getWeight()) [ FD ]
Line_14 $$ List<String> suggestions = (List<String>) solrDocument.get(Field.SPELL_CHECK_WORD)-->Line_15 $$ String suggestion = suggestions.get(0)[ FD ]
Line_12 $$ for (int i = 0; i < solrDocumentList.size(); i++) -->Line_14 $$ List<String> suggestions = (List<String>) solrDocument.get(Field.SPELL_CHECK_WORD)[ CD ]
Line_15 $$ String suggestion = suggestions.get(0)-->Line_31 $$ weightedWordsMap.put(suggestion, weightedWord)[ FD ]
Line_15 $$ String suggestion = suggestions.get(0)-->Line_22 $$ String suggestionLowerCase = StringUtil.toLowerCase(suggestion)[ FD ]
Line_17 $$ float weight = GetterUtil.getFloat(weights.get(0))-->Line_25 $$ weight = weight + distance[ FD ]
Line_29 $$ if (weightedWord == null) -->Line_30 $$ weightedWord = new WeightedWord(suggestion, weight)[ CD ]
Line_39 $$ if (_log.isDebugEnabled()) -->Line_40 $$ _log.debug("Unable to execute Solr query", e)[ CD ]
Line_2 $$ protected TreeSet<WeightedWord> suggestKeywords(SearchContext searchContext, String input) throws SearchException -->Line_21 $$ String inputLowerCase = StringUtil.toLowerCase(input)[ FD ]
Line_28 $$ WeightedWord weightedWord = weightedWordsMap.get(suggestion)-->Line_29 $$ if (weightedWord == null) [ FD ]
Line_18 $$ if (suggestion.equals(input)) -->Line_21 $$ String inputLowerCase = StringUtil.toLowerCase(input)[ CD ]
Line_12 $$ for (int i = 0; i < solrDocumentList.size(); i++) -->Line_13 $$ SolrDocument solrDocument = solrDocumentList.get(i)[ CD ]
Line_18 $$ if (suggestion.equals(input)) -->Line_23 $$ float distance = _stringDistance.getDistance(inputLowerCase, suggestionLowerCase)[ CD ]
