Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_10 $$ return accessorToUse.read(evalContext, contextObject.getValue(), name)[ FD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_31 $$ if (contextObject.getValue() == null) [ CD ]
Line_19 $$ if (accessor.canRead(evalContext, contextObject.getValue(), name)) -->Line_20 $$ if (accessor instanceof ReflectivePropertyAccessor) [ CD ]
Line_7 $$ PropertyAccessor accessorToUse = this.cachedReadAccessor-->Line_8 $$ if (accessorToUse != null) [ FD ]
Line_18 $$ for (PropertyAccessor accessor : accessorsToTry) -->Line_19 $$ if (accessor.canRead(evalContext, contextObject.getValue(), name)) [ FD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_7 $$ PropertyAccessor accessorToUse = this.cachedReadAccessor[ CD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_31 $$ if (contextObject.getValue() == null) [ FD ]
Line_21 $$ accessor = ((ReflectivePropertyAccessor) accessor).createOptimalAccessor(evalContext, contextObject.getValue(), name)-->Line_23 $$ this.cachedReadAccessor = accessor[ FD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_4 $$ if (targetObject == null && this.nullSafe) [ CD ]
Line_19 $$ if (accessor.canRead(evalContext, contextObject.getValue(), name)) -->Line_23 $$ this.cachedReadAccessor = accessor[ CD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_3 $$ Object targetObject = contextObject.getValue()[ CD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_15 $$ List<PropertyAccessor> accessorsToTry = getPropertyAccessorsToTry(contextObject.getValue(), evalContext.getPropertyAccessors())[ FD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_19 $$ if (accessor.canRead(evalContext, contextObject.getValue(), name)) [ FD ]
Line_18 $$ for (PropertyAccessor accessor : accessorsToTry) -->Line_23 $$ this.cachedReadAccessor = accessor[ FD ]
Line_18 $$ for (PropertyAccessor accessor : accessorsToTry) -->Line_21 $$ accessor = ((ReflectivePropertyAccessor) accessor).createOptimalAccessor(evalContext, contextObject.getValue(), name)[ FD ]
Line_19 $$ if (accessor.canRead(evalContext, contextObject.getValue(), name)) -->Line_24 $$ return accessor.read(evalContext, contextObject.getValue(), name)[ CD ]
Line_20 $$ if (accessor instanceof ReflectivePropertyAccessor) -->Line_21 $$ accessor = ((ReflectivePropertyAccessor) accessor).createOptimalAccessor(evalContext, contextObject.getValue(), name)[ CD ]
Line_18 $$ for (PropertyAccessor accessor : accessorsToTry) -->Line_20 $$ if (accessor instanceof ReflectivePropertyAccessor) [ FD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_34 $$ throw new SpelEvaluationException(getStartPosition(), SpelMessage.PROPERTY_OR_FIELD_NOT_READABLE, name, FormatHelper.formatClassNameForMessage(getObjectClass(contextObject.getValue())))[ FD ]
Line_7 $$ PropertyAccessor accessorToUse = this.cachedReadAccessor-->Line_10 $$ return accessorToUse.read(evalContext, contextObject.getValue(), name)[ FD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_15 $$ List<PropertyAccessor> accessorsToTry = getPropertyAccessorsToTry(contextObject.getValue(), evalContext.getPropertyAccessors())[ CD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_21 $$ accessor = ((ReflectivePropertyAccessor) accessor).createOptimalAccessor(evalContext, contextObject.getValue(), name)[ FD ]
Line_21 $$ accessor = ((ReflectivePropertyAccessor) accessor).createOptimalAccessor(evalContext, contextObject.getValue(), name)-->Line_24 $$ return accessor.read(evalContext, contextObject.getValue(), name)[ FD ]
Line_4 $$ if (targetObject == null && this.nullSafe) -->Line_5 $$ return TypedValue.NULL[ CD ]
Line_15 $$ List<PropertyAccessor> accessorsToTry = getPropertyAccessorsToTry(contextObject.getValue(), evalContext.getPropertyAccessors())-->Line_16 $$ if (accessorsToTry != null) [ FD ]
Line_18 $$ for (PropertyAccessor accessor : accessorsToTry) -->Line_24 $$ return accessor.read(evalContext, contextObject.getValue(), name)[ FD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_16 $$ if (accessorsToTry != null) [ CD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_8 $$ if (accessorToUse != null) [ CD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_3 $$ Object targetObject = contextObject.getValue()[ FD ]
Line_2 $$ private TypedValue readProperty(TypedValue contextObject, EvaluationContext evalContext, String name) throws EvaluationException -->Line_24 $$ return accessor.read(evalContext, contextObject.getValue(), name)[ FD ]
