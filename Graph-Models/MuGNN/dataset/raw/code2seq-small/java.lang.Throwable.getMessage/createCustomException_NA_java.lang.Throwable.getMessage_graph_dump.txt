Line_2 $$ protected DataAccessException createCustomException(String task, String sql, SQLException sqlEx, Class<?> exceptionClass) -->Line_43 $$ Object[] messageAndSqlExArgs = new Object[] [ FD ]
Line_2 $$ protected DataAccessException createCustomException(String task, String sql, SQLException sqlEx, Class<?> exceptionClass) -->Line_48 $$ Object[] messageAndThrowableArgs = new Object[] [ FD ]
Line_18 $$ constructorType = MESSAGE_SQLEX_CONSTRUCTOR-->Line_25 $$ if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)[ FD ]
Line_9 $$ if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)-->Line_10 $$ constructorType = MESSAGE_ONLY_CONSTRUCTOR[ CD ]
Line_20 $$ if (parameterTypes.length == 3 && String.class == parameterTypes[0] && String.class == parameterTypes[1] && Throwable.class == parameterTypes[2]) -->Line_21 $$ if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)[ CD ]
Line_38 $$ Object[] messageAndSqlAndThrowableArgs = new Object[] -->Line_40 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)[ FD ]
Line_34 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)-->Line_35 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)[ FD ]
Line_34 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)-->Line_50 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndThrowableArgs)[ FD ]
Line_32 $$ Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] -->Line_34 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)[ FD ]
Line_21 $$ if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)-->Line_22 $$ constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR[ CD ]
Line_2 $$ protected DataAccessException createCustomException(String task, String sql, SQLException sqlEx, Class<?> exceptionClass) -->Line_54 $$ exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)[ FD ]
Line_4 $$ int constructorType = 0-->Line_10 $$ constructorType = MESSAGE_ONLY_CONSTRUCTOR[ FD ]
Line_2 $$ protected DataAccessException createCustomException(String task, String sql, SQLException sqlEx, Class<?> exceptionClass) -->Line_39 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)[ FD ]
Line_18 $$ constructorType = MESSAGE_SQLEX_CONSTRUCTOR-->Line_26 $$ constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR[ FD ]
Line_42 $$ Class<?>[] messageAndSqlExArgsClass = new Class<?>[] -->Line_44 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)[ FD ]
Line_4 $$ int constructorType = 0-->Line_9 $$ if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)[ FD ]
Line_39 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)-->Line_45 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)[ FD ]
Line_34 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)-->Line_54 $$ exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)[ FD ]
Line_34 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)-->Line_55 $$ return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)[ FD ]
Line_29 $$ Constructor<?> exceptionConstructor-->Line_35 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)[ FD ]
Line_39 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)-->Line_49 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)[ FD ]
Line_4 $$ int constructorType = 0-->Line_14 $$ constructorType = MESSAGE_THROWABLE_CONSTRUCTOR[ FD ]
Line_34 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)-->Line_49 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)[ FD ]
Line_12 $$ if (parameterTypes.length == 2 && String.class == parameterTypes[0] && Throwable.class == parameterTypes[1]) -->Line_13 $$ if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)[ CD ]
Line_10 $$ constructorType = MESSAGE_ONLY_CONSTRUCTOR-->Line_14 $$ constructorType = MESSAGE_THROWABLE_CONSTRUCTOR[ FD ]
Line_22 $$ constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR-->Line_26 $$ constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR[ FD ]
Line_34 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)-->Line_40 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)[ FD ]
Line_10 $$ constructorType = MESSAGE_ONLY_CONSTRUCTOR-->Line_18 $$ constructorType = MESSAGE_SQLEX_CONSTRUCTOR[ FD ]
Line_29 $$ Constructor<?> exceptionConstructor-->Line_55 $$ return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)[ FD ]
Line_24 $$ if (parameterTypes.length == 3 && String.class == parameterTypes[0] && String.class == parameterTypes[1] && SQLException.class == parameterTypes[2]) -->Line_25 $$ if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)[ CD ]
Line_29 $$ Constructor<?> exceptionConstructor-->Line_49 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)[ FD ]
Line_37 $$ Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] -->Line_39 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)[ FD ]
Line_10 $$ constructorType = MESSAGE_ONLY_CONSTRUCTOR-->Line_22 $$ constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR[ FD ]
Line_14 $$ constructorType = MESSAGE_THROWABLE_CONSTRUCTOR-->Line_17 $$ if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)[ FD ]
Line_22 $$ constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR-->Line_25 $$ if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)[ FD ]
Line_2 $$ protected DataAccessException createCustomException(String task, String sql, SQLException sqlEx, Class<?> exceptionClass) -->Line_49 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)[ FD ]
Line_34 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)-->Line_45 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)[ FD ]
Line_4 $$ int constructorType = 0-->Line_17 $$ if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)[ FD ]
Line_49 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)-->Line_50 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndThrowableArgs)[ FD ]
Line_49 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)-->Line_55 $$ return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)[ FD ]
Line_29 $$ Constructor<?> exceptionConstructor-->Line_54 $$ exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)[ FD ]
Line_6 $$ for (Constructor<?> constructor : constructors) -->Line_7 $$ Class<?>[] parameterTypes = constructor.getParameterTypes()[ FD ]
Line_13 $$ if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)-->Line_14 $$ constructorType = MESSAGE_THROWABLE_CONSTRUCTOR[ CD ]
Line_44 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)-->Line_50 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndThrowableArgs)[ FD ]
Line_4 $$ int constructorType = 0-->Line_13 $$ if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)[ FD ]
Line_29 $$ Constructor<?> exceptionConstructor-->Line_44 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)[ FD ]
Line_48 $$ Object[] messageAndThrowableArgs = new Object[] -->Line_50 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndThrowableArgs)[ FD ]
Line_2 $$ protected DataAccessException createCustomException(String task, String sql, SQLException sqlEx, Class<?> exceptionClass) -->Line_44 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)[ FD ]
Line_39 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)-->Line_40 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)[ FD ]
Line_44 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)-->Line_45 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)[ FD ]
Line_34 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)-->Line_44 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)[ FD ]
Line_10 $$ constructorType = MESSAGE_ONLY_CONSTRUCTOR-->Line_17 $$ if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)[ FD ]
Line_2 $$ protected DataAccessException createCustomException(String task, String sql, SQLException sqlEx, Class<?> exceptionClass) -->Line_5 $$ Constructor<?>[] constructors = exceptionClass.getConstructors()[ FD ]
Line_29 $$ Constructor<?> exceptionConstructor-->Line_39 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)[ FD ]
Line_2 $$ protected DataAccessException createCustomException(String task, String sql, SQLException sqlEx, Class<?> exceptionClass) -->Line_64 $$ logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)[ FD ]
Line_18 $$ constructorType = MESSAGE_SQLEX_CONSTRUCTOR-->Line_22 $$ constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR[ FD ]
Line_57 $$ if (logger.isWarnEnabled()) -->Line_58 $$ logger.warn("Unable to find appropriate constructor of custom exception class [" + exceptionClass.getName() + "]")[ CD ]
Line_44 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)-->Line_55 $$ return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)[ FD ]
Line_18 $$ constructorType = MESSAGE_SQLEX_CONSTRUCTOR-->Line_21 $$ if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)[ FD ]
Line_14 $$ constructorType = MESSAGE_THROWABLE_CONSTRUCTOR-->Line_25 $$ if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)[ FD ]
Line_43 $$ Object[] messageAndSqlExArgs = new Object[] -->Line_45 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)[ FD ]
Line_39 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)-->Line_55 $$ return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)[ FD ]
Line_4 $$ int constructorType = 0-->Line_25 $$ if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)[ FD ]
Line_10 $$ constructorType = MESSAGE_ONLY_CONSTRUCTOR-->Line_25 $$ if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)[ FD ]
Line_63 $$ if (logger.isWarnEnabled()) -->Line_64 $$ logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)[ CD ]
Line_17 $$ if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)-->Line_18 $$ constructorType = MESSAGE_SQLEX_CONSTRUCTOR[ CD ]
Line_2 $$ protected DataAccessException createCustomException(String task, String sql, SQLException sqlEx, Class<?> exceptionClass) -->Line_58 $$ logger.warn("Unable to find appropriate constructor of custom exception class [" + exceptionClass.getName() + "]")[ FD ]
Line_2 $$ protected DataAccessException createCustomException(String task, String sql, SQLException sqlEx, Class<?> exceptionClass) -->Line_53 $$ Object[] messageOnlyArgs = new Object[] [ FD ]
Line_52 $$ Class<?>[] messageOnlyArgsClass = new Class<?>[] -->Line_54 $$ exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)[ FD ]
Line_29 $$ Constructor<?> exceptionConstructor-->Line_40 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)[ FD ]
Line_29 $$ Constructor<?> exceptionConstructor-->Line_45 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)[ FD ]
Line_14 $$ constructorType = MESSAGE_THROWABLE_CONSTRUCTOR-->Line_21 $$ if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)[ FD ]
Line_47 $$ Class<?>[] messageAndThrowableArgsClass = new Class<?>[] -->Line_49 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)[ FD ]
Line_4 $$ int constructorType = 0-->Line_22 $$ constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR[ FD ]
Line_10 $$ constructorType = MESSAGE_ONLY_CONSTRUCTOR-->Line_13 $$ if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)[ FD ]
Line_16 $$ if (parameterTypes.length == 2 && String.class == parameterTypes[0] && SQLException.class == parameterTypes[1]) -->Line_17 $$ if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)[ CD ]
Line_33 $$ Object[] messageAndSqlAndSqlExArgs = new Object[] -->Line_35 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)[ FD ]
Line_14 $$ constructorType = MESSAGE_THROWABLE_CONSTRUCTOR-->Line_18 $$ constructorType = MESSAGE_SQLEX_CONSTRUCTOR[ FD ]
Line_25 $$ if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)-->Line_26 $$ constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR[ CD ]
Line_10 $$ constructorType = MESSAGE_ONLY_CONSTRUCTOR-->Line_26 $$ constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR[ FD ]
Line_29 $$ Constructor<?> exceptionConstructor-->Line_34 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)[ FD ]
Line_49 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)-->Line_54 $$ exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)[ FD ]
Line_4 $$ int constructorType = 0-->Line_18 $$ constructorType = MESSAGE_SQLEX_CONSTRUCTOR[ FD ]
Line_39 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)-->Line_54 $$ exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)[ FD ]
Line_53 $$ Object[] messageOnlyArgs = new Object[] -->Line_55 $$ return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)[ FD ]
Line_10 $$ constructorType = MESSAGE_ONLY_CONSTRUCTOR-->Line_21 $$ if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)[ FD ]
Line_29 $$ Constructor<?> exceptionConstructor-->Line_50 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndThrowableArgs)[ FD ]
Line_14 $$ constructorType = MESSAGE_THROWABLE_CONSTRUCTOR-->Line_22 $$ constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR[ FD ]
Line_39 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)-->Line_50 $$ return (DataAccessException) exceptionConstructor.newInstance(messageAndThrowableArgs)[ FD ]
Line_2 $$ protected DataAccessException createCustomException(String task, String sql, SQLException sqlEx, Class<?> exceptionClass) -->Line_34 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)[ FD ]
Line_8 $$ if (parameterTypes.length == 1 && String.class == parameterTypes[0]) -->Line_9 $$ if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)[ CD ]
Line_4 $$ int constructorType = 0-->Line_26 $$ constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR[ FD ]
Line_34 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)-->Line_39 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)[ FD ]
Line_54 $$ exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)-->Line_55 $$ return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)[ FD ]
Line_14 $$ constructorType = MESSAGE_THROWABLE_CONSTRUCTOR-->Line_26 $$ constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR[ FD ]
Line_44 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)-->Line_54 $$ exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)[ FD ]
Line_4 $$ int constructorType = 0-->Line_21 $$ if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)[ FD ]
Line_39 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)-->Line_44 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)[ FD ]
Line_44 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)-->Line_49 $$ exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)[ FD ]
