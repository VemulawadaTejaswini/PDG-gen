Line_27 $$ if (returnValue != null) -->Line_29 $$ PoshiRunnerVariablesUtil.putIntoCommandMap(returnName, returnValue)[ CD ]
Line_5 $$ String classCommandName = executeElement.attributeValue(macroType)-->Line_6 $$ String className = PoshiRunnerGetterUtil.getClassNameFromClassCommandName(classCommandName)[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_7 $$ PoshiRunnerStackTraceUtil.pushStackTrace(executeElement)[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_5 $$ String classCommandName = executeElement.attributeValue(macroType)[ CD ]
Line_24 $$ for (Element returnElement : returnElements) -->Line_28 $$ String returnName = returnElement.attributeValue("name")[ FD ]
Line_28 $$ String returnName = returnElement.attributeValue("name")-->Line_29 $$ PoshiRunnerVariablesUtil.putIntoCommandMap(returnName, returnValue)[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_33 $$ SummaryLoggerHandler.failSummary(executeElement, e.getMessage())[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_13 $$ PoshiRunnerStackTraceUtil.popStackTrace()[ CD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_8 $$ Element rootElement = PoshiRunnerContext.getMacroRootElement(className)[ CD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_4 $$ XMLLoggerHandler.updateStatus(executeElement, "pending")[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_38 $$ XMLLoggerHandler.updateStatus(executeElement, "pass")[ CD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_18 $$ PoshiRunnerStackTraceUtil.pushStackTrace(executeElement)[ CD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_4 $$ XMLLoggerHandler.updateStatus(executeElement, "pending")[ CD ]
Line_20 $$ Element commandElement = PoshiRunnerContext.getMacroCommandElement(classCommandName)-->Line_22 $$ Map<String, String> macroReturns = runMacroCommandElement(classCommandName, commandElement)[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_14 $$ List<Element> executeVarElements = executeElement.elements("var")[ CD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_3 $$ PoshiRunnerStackTraceUtil.setCurrentElement(executeElement)[ CD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_23 $$ List<Element> returnElements = executeElement.elements("return")[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_3 $$ PoshiRunnerStackTraceUtil.setCurrentElement(executeElement)[ FD ]
Line_10 $$ for (Element rootVarElement : rootVarElements) -->Line_11 $$ runVarElement(rootVarElement, false, true)[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_5 $$ String classCommandName = executeElement.attributeValue(macroType)[ FD ]
Line_5 $$ String classCommandName = executeElement.attributeValue(macroType)-->Line_20 $$ Element commandElement = PoshiRunnerContext.getMacroCommandElement(classCommandName)[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_6 $$ String className = PoshiRunnerGetterUtil.getClassNameFromClassCommandName(classCommandName)[ CD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_19 $$ SummaryLoggerHandler.startSummary(executeElement)[ FD ]
Line_6 $$ String className = PoshiRunnerGetterUtil.getClassNameFromClassCommandName(classCommandName)-->Line_8 $$ Element rootElement = PoshiRunnerContext.getMacroRootElement(className)[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_36 $$ SummaryLoggerHandler.passSummary(executeElement)[ CD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_20 $$ Element commandElement = PoshiRunnerContext.getMacroCommandElement(classCommandName)[ CD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_19 $$ SummaryLoggerHandler.startSummary(executeElement)[ CD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_36 $$ SummaryLoggerHandler.passSummary(executeElement)[ FD ]
Line_22 $$ Map<String, String> macroReturns = runMacroCommandElement(classCommandName, commandElement)-->Line_26 $$ String returnValue = macroReturns.get(returnFrom)[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_18 $$ PoshiRunnerStackTraceUtil.pushStackTrace(executeElement)[ FD ]
Line_25 $$ String returnFrom = returnElement.attributeValue("from")-->Line_26 $$ String returnValue = macroReturns.get(returnFrom)[ FD ]
Line_26 $$ String returnValue = macroReturns.get(returnFrom)-->Line_27 $$ if (returnValue != null) [ FD ]
Line_27 $$ if (returnValue != null) -->Line_28 $$ String returnName = returnElement.attributeValue("name")[ CD ]
Line_15 $$ for (Element executeVarElement : executeVarElements) -->Line_16 $$ runVarElement(executeVarElement, false, false)[ FD ]
Line_5 $$ String classCommandName = executeElement.attributeValue(macroType)-->Line_22 $$ Map<String, String> macroReturns = runMacroCommandElement(classCommandName, commandElement)[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_37 $$ PoshiRunnerStackTraceUtil.popStackTrace()[ CD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_14 $$ List<Element> executeVarElements = executeElement.elements("var")[ FD ]
Line_26 $$ String returnValue = macroReturns.get(returnFrom)-->Line_29 $$ PoshiRunnerVariablesUtil.putIntoCommandMap(returnName, returnValue)[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_9 $$ List<Element> rootVarElements = rootElement.elements("var")[ CD ]
Line_24 $$ for (Element returnElement : returnElements) -->Line_25 $$ String returnFrom = returnElement.attributeValue("from")[ FD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_7 $$ PoshiRunnerStackTraceUtil.pushStackTrace(executeElement)[ CD ]
Line_2 $$ public static void runMacroExecuteElement(Element executeElement, String macroType) throws Exception -->Line_38 $$ XMLLoggerHandler.updateStatus(executeElement, "pass")[ FD ]
Line_8 $$ Element rootElement = PoshiRunnerContext.getMacroRootElement(className)-->Line_9 $$ List<Element> rootVarElements = rootElement.elements("var")[ FD ]
