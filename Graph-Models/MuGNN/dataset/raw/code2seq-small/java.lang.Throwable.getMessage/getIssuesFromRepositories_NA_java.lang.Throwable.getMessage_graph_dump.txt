Line_26 $$ reason = e.getMessage()-->Line_35 $$ notifyAboutConnectionFailure(repository, reason)[ FD ]
Line_2 $$ private List<Task> getIssuesFromRepositories(@Nullable String request, int offset, int limit, boolean withClosed, boolean forceRequest, @NotNull final ProgressIndicator cancelled) -->Line_17 $$ List<Task> filteredTasks = TaskSearchSupport.filterTasks(request, ContainerUtil.list(tasks))[ FD ]
Line_3 $$ List<Task> issues = null-->Line_20 $$ ContainerUtil.addAll(issues, tasks)[ FD ]
Line_4 $$ for (final TaskRepository repository : getAllRepositories()) -->Line_16 $$ if (!repository.isSupported(TaskRepository.NATIVE_SEARCH) && request != null) [ FD ]
Line_2 $$ private List<Task> getIssuesFromRepositories(@Nullable String request, int offset, int limit, boolean withClosed, boolean forceRequest, @NotNull final ProgressIndicator cancelled) -->Line_12 $$ LOG.info(String.format("Total %s ms to download %d issues from '%s' (pattern '%s')", timeSpent, tasks.length, repository.getUrl(), request))[ FD ]
Line_2 $$ private List<Task> getIssuesFromRepositories(@Nullable String request, int offset, int limit, boolean withClosed, boolean forceRequest, @NotNull final ProgressIndicator cancelled) -->Line_39 $$ return issues[ CD ]
Line_10 $$ Task[] tasks = repository.getIssues(request, offset, limit, withClosed, cancelled)-->Line_17 $$ List<Task> filteredTasks = TaskSearchSupport.filterTasks(request, ContainerUtil.list(tasks))[ FD ]
Line_24 $$ String reason = ""-->Line_26 $$ reason = e.getMessage()[ FD ]
Line_4 $$ for (final TaskRepository repository : getAllRepositories()) -->Line_13 $$ myBadRepositories.remove(repository)[ FD ]
Line_24 $$ String reason = ""-->Line_35 $$ notifyAboutConnectionFailure(repository, reason)[ FD ]
Line_16 $$ if (!repository.isSupported(TaskRepository.NATIVE_SEARCH) && request != null) -->Line_18 $$ ContainerUtil.addAll(issues, filteredTasks)[ CD ]
Line_10 $$ Task[] tasks = repository.getIssues(request, offset, limit, withClosed, cancelled)-->Line_20 $$ ContainerUtil.addAll(issues, tasks)[ FD ]
Line_4 $$ for (final TaskRepository repository : getAllRepositories()) -->Line_10 $$ Task[] tasks = repository.getIssues(request, offset, limit, withClosed, cancelled)[ FD ]
Line_15 $$ issues = new ArrayList<Task>(tasks.length)-->Line_18 $$ ContainerUtil.addAll(issues, filteredTasks)[ FD ]
Line_25 $$ if (e.getClass() == Exception.class || e instanceof RequestFailedException) -->Line_26 $$ reason = e.getMessage()[ CD ]
Line_4 $$ for (final TaskRepository repository : getAllRepositories()) -->Line_35 $$ notifyAboutConnectionFailure(repository, reason)[ FD ]
Line_14 $$ if (issues == null)-->Line_15 $$ issues = new ArrayList<Task>(tasks.length)[ CD ]
Line_2 $$ private List<Task> getIssuesFromRepositories(@Nullable String request, int offset, int limit, boolean withClosed, boolean forceRequest, @NotNull final ProgressIndicator cancelled) -->Line_5 $$ if (!repository.isConfigured() || (!forceRequest && myBadRepositories.contains(repository))) [ FD ]
Line_2 $$ private List<Task> getIssuesFromRepositories(@Nullable String request, int offset, int limit, boolean withClosed, boolean forceRequest, @NotNull final ProgressIndicator cancelled) -->Line_3 $$ List<Task> issues = null[ CD ]
Line_34 $$ if (forceRequest) -->Line_35 $$ notifyAboutConnectionFailure(repository, reason)[ CD ]
Line_17 $$ List<Task> filteredTasks = TaskSearchSupport.filterTasks(request, ContainerUtil.list(tasks))-->Line_18 $$ ContainerUtil.addAll(issues, filteredTasks)[ FD ]
Line_15 $$ issues = new ArrayList<Task>(tasks.length)-->Line_20 $$ ContainerUtil.addAll(issues, tasks)[ FD ]
Line_16 $$ if (!repository.isSupported(TaskRepository.NATIVE_SEARCH) && request != null) -->Line_20 $$ ContainerUtil.addAll(issues, tasks)[ CD ]
Line_3 $$ List<Task> issues = null-->Line_18 $$ ContainerUtil.addAll(issues, filteredTasks)[ FD ]
Line_2 $$ private List<Task> getIssuesFromRepositories(@Nullable String request, int offset, int limit, boolean withClosed, boolean forceRequest, @NotNull final ProgressIndicator cancelled) -->Line_10 $$ Task[] tasks = repository.getIssues(request, offset, limit, withClosed, cancelled)[ FD ]
Line_4 $$ for (final TaskRepository repository : getAllRepositories()) -->Line_5 $$ if (!repository.isConfigured() || (!forceRequest && myBadRepositories.contains(repository))) [ FD ]
Line_4 $$ for (final TaskRepository repository : getAllRepositories()) -->Line_12 $$ LOG.info(String.format("Total %s ms to download %d issues from '%s' (pattern '%s')", timeSpent, tasks.length, repository.getUrl(), request))[ FD ]
Line_28 $$ if (e instanceof SocketTimeoutException) -->Line_29 $$ LOG.warn("Socket timeout from " + repository)[ CD ]
Line_4 $$ for (final TaskRepository repository : getAllRepositories()) -->Line_33 $$ myBadRepositories.add(repository)[ FD ]
Line_28 $$ if (e instanceof SocketTimeoutException) -->Line_31 $$ LOG.warn("Cannot connect to " + repository, e)[ CD ]
Line_3 $$ List<Task> issues = null-->Line_15 $$ issues = new ArrayList<Task>(tasks.length)[ FD ]
Line_3 $$ List<Task> issues = null-->Line_14 $$ if (issues == null)[ FD ]
Line_16 $$ if (!repository.isSupported(TaskRepository.NATIVE_SEARCH) && request != null) -->Line_17 $$ List<Task> filteredTasks = TaskSearchSupport.filterTasks(request, ContainerUtil.list(tasks))[ CD ]
Line_11 $$ long timeSpent = System.currentTimeMillis() - start-->Line_12 $$ LOG.info(String.format("Total %s ms to download %d issues from '%s' (pattern '%s')", timeSpent, tasks.length, repository.getUrl(), request))[ FD ]
