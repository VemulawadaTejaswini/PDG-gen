Line_4 $$ if (DatabaseDescriptor.getServerEncryptionOptions().internode_encryption != ServerEncryptionOptions.InternodeEncryption.none) -->Line_10 $$ logger.info("Starting Encrypted Messaging Service on SSL port [ CD ]
Line_12 $$ if (DatabaseDescriptor.getServerEncryptionOptions().internode_encryption != ServerEncryptionOptions.InternodeEncryption.all) -->Line_26 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())[ CD ]
Line_26 $$ InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort())-->Line_28 $$ socket.bind(address, 500)[ FD ]
Line_2 $$ private List<ServerSocket> getServerSockets(InetAddress localEp) throws ConfigurationException -->Line_6 $$ ss.add(SSLFactory.getServerSocket(DatabaseDescriptor.getServerEncryptionOptions(), localEp, DatabaseDescriptor.getSSLStoragePort()))[ FD ]
Line_12 $$ if (DatabaseDescriptor.getServerEncryptionOptions().internode_encryption != ServerEncryptionOptions.InternodeEncryption.all) -->Line_19 $$ ServerSocket socket = serverChannel.socket()[ CD ]
Line_2 $$ private List<ServerSocket> getServerSockets(InetAddress localEp) throws ConfigurationException -->Line_3 $$ final List<ServerSocket> ss = new ArrayList<ServerSocket>(2)[ CD ]
Line_19 $$ ServerSocket socket = serverChannel.socket()-->Line_28 $$ socket.bind(address, 500)[ FD ]
Line_2 $$ private List<ServerSocket> getServerSockets(InetAddress localEp) throws ConfigurationException -->Line_41 $$ String nic = FBUtilities.getNetworkInterface(localEp)[ FD ]
Line_12 $$ if (DatabaseDescriptor.getServerEncryptionOptions().internode_encryption != ServerEncryptionOptions.InternodeEncryption.all) -->Line_13 $$ ServerSocketChannel serverChannel = null[ CD ]
Line_2 $$ private List<ServerSocket> getServerSockets(InetAddress localEp) throws ConfigurationException -->Line_45 $$ return ss[ CD ]
Line_19 $$ ServerSocket socket = serverChannel.socket()-->Line_21 $$ socket.setReuseAddress(true)[ FD ]
Line_12 $$ if (DatabaseDescriptor.getServerEncryptionOptions().internode_encryption != ServerEncryptionOptions.InternodeEncryption.all) -->Line_41 $$ String nic = FBUtilities.getNetworkInterface(localEp)[ CD ]
Line_19 $$ ServerSocket socket = serverChannel.socket()-->Line_38 $$ FileUtils.closeQuietly(socket)[ FD ]
Line_2 $$ private List<ServerSocket> getServerSockets(InetAddress localEp) throws ConfigurationException -->Line_42 $$ logger.info("Starting Messaging Service on [ FD ]
Line_19 $$ ServerSocket socket = serverChannel.socket()-->Line_43 $$ ss.add(socket)[ FD ]
Line_41 $$ String nic = FBUtilities.getNetworkInterface(localEp)-->Line_42 $$ logger.info("Starting Messaging Service on [ FD ]
Line_31 $$ if (e.getMessage().contains("in use"))-->Line_33 $$ if (e.getMessage().contains("Cannot assign requested address"))[ CD ]
Line_12 $$ if (DatabaseDescriptor.getServerEncryptionOptions().internode_encryption != ServerEncryptionOptions.InternodeEncryption.all) -->Line_43 $$ ss.add(socket)[ CD ]
Line_2 $$ private List<ServerSocket> getServerSockets(InetAddress localEp) throws ConfigurationException -->Line_4 $$ if (DatabaseDescriptor.getServerEncryptionOptions().internode_encryption != ServerEncryptionOptions.InternodeEncryption.none) [ CD ]
Line_3 $$ final List<ServerSocket> ss = new ArrayList<ServerSocket>(2)-->Line_6 $$ ss.add(SSLFactory.getServerSocket(DatabaseDescriptor.getServerEncryptionOptions(), localEp, DatabaseDescriptor.getSSLStoragePort()))[ FD ]
Line_13 $$ ServerSocketChannel serverChannel = null-->Line_19 $$ ServerSocket socket = serverChannel.socket()[ FD ]
Line_12 $$ if (DatabaseDescriptor.getServerEncryptionOptions().internode_encryption != ServerEncryptionOptions.InternodeEncryption.all) -->Line_42 $$ logger.info("Starting Messaging Service on [ CD ]
Line_19 $$ ServerSocket socket = serverChannel.socket()-->Line_30 $$ FileUtils.closeQuietly(socket)[ FD ]
Line_15 $$ serverChannel = ServerSocketChannel.open()-->Line_19 $$ ServerSocket socket = serverChannel.socket()[ FD ]
Line_3 $$ final List<ServerSocket> ss = new ArrayList<ServerSocket>(2)-->Line_43 $$ ss.add(socket)[ FD ]
Line_19 $$ ServerSocket socket = serverChannel.socket()-->Line_23 $$ FileUtils.closeQuietly(socket)[ FD ]
Line_13 $$ ServerSocketChannel serverChannel = null-->Line_15 $$ serverChannel = ServerSocketChannel.open()[ FD ]
Line_2 $$ private List<ServerSocket> getServerSockets(InetAddress localEp) throws ConfigurationException -->Line_12 $$ if (DatabaseDescriptor.getServerEncryptionOptions().internode_encryption != ServerEncryptionOptions.InternodeEncryption.all) [ CD ]
