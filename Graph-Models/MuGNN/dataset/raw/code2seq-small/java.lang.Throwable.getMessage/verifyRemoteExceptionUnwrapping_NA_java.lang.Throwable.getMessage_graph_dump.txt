Line_3 $$ String message = realExceptionClassName + "Message"-->Line_13 $$ Assert.assertTrue("Expected message [" + message + "] but found " + t.getMessage(), t.getMessage().contains(message))[ FD ]
Line_2 $$ private void verifyRemoteExceptionUnwrapping(Class<? extends Throwable> expectedLocalException, String realExceptionClassName) -->Line_6 $$ Throwable t = null[ CD ]
Line_6 $$ Throwable t = null-->Line_12 $$ Assert.assertTrue("Expected exception [" + expectedLocalException + "] but found " + t, expectedLocalException.isInstance(t))[ FD ]
Line_2 $$ private void verifyRemoteExceptionUnwrapping(Class<? extends Throwable> expectedLocalException, String realExceptionClassName) -->Line_3 $$ String message = realExceptionClassName + "Message"[ CD ]
Line_2 $$ private void verifyRemoteExceptionUnwrapping(Class<? extends Throwable> expectedLocalException, String realExceptionClassName) -->Line_12 $$ Assert.assertTrue("Expected exception [" + expectedLocalException + "] but found " + t, expectedLocalException.isInstance(t))[ FD ]
Line_10 $$ t = thrown-->Line_13 $$ Assert.assertTrue("Expected message [" + message + "] but found " + t.getMessage(), t.getMessage().contains(message))[ FD ]
Line_6 $$ Throwable t = null-->Line_10 $$ t = thrown[ FD ]
Line_2 $$ private void verifyRemoteExceptionUnwrapping(Class<? extends Throwable> expectedLocalException, String realExceptionClassName) -->Line_13 $$ Assert.assertTrue("Expected message [" + message + "] but found " + t.getMessage(), t.getMessage().contains(message))[ CD ]
Line_6 $$ Throwable t = null-->Line_13 $$ Assert.assertTrue("Expected message [" + message + "] but found " + t.getMessage(), t.getMessage().contains(message))[ FD ]
Line_2 $$ private void verifyRemoteExceptionUnwrapping(Class<? extends Throwable> expectedLocalException, String realExceptionClassName) -->Line_5 $$ ServiceException se = new ServiceException(re)[ CD ]
Line_2 $$ private void verifyRemoteExceptionUnwrapping(Class<? extends Throwable> expectedLocalException, String realExceptionClassName) -->Line_12 $$ Assert.assertTrue("Expected exception [" + expectedLocalException + "] but found " + t, expectedLocalException.isInstance(t))[ CD ]
Line_10 $$ t = thrown-->Line_12 $$ Assert.assertTrue("Expected exception [" + expectedLocalException + "] but found " + t, expectedLocalException.isInstance(t))[ FD ]
Line_2 $$ private void verifyRemoteExceptionUnwrapping(Class<? extends Throwable> expectedLocalException, String realExceptionClassName) -->Line_4 $$ RemoteException re = new RemoteException(realExceptionClassName, message)[ CD ]
Line_5 $$ ServiceException se = new ServiceException(re)-->Line_8 $$ RPCUtil.unwrapAndThrowException(se)[ FD ]
