Line_4 $$ PendingClusterStatesQueue queue = createQueueWithStates(states)-->Line_5 $$ List<ClusterStateContext> committedContexts = randomCommitStates(queue)[ FD ]
Line_17 $$ for (ClusterState state : states) -->Line_18 $$ ClusterStateContext pendingContext = queue.findState(state.stateUUID())[ FD ]
Line_3 $$ List<ClusterState> states = randomStates(scaledRandomIntBetween(10, 50), "master1", "master2", "master3", "master4")-->Line_4 $$ PendingClusterStatesQueue queue = createQueueWithStates(states)[ FD ]
Line_6 $$ ClusterState toFail = randomFrom(committedContexts).state-->Line_27 $$ assertThat("removed state is not superseded by failed state. \nRemoved state:" + context + "\nfailed: " + toFail, toFail.supersedes(context.state), equalTo(true))[ FD ]
Line_17 $$ for (ClusterState state : states) -->Line_26 $$ final ClusterStateContext context = committedContextsById.get(state.stateUUID())[ FD ]
Line_8 $$ final Map<String, ClusterStateContext> committedContextsById = new HashMap()-->Line_26 $$ final ClusterStateContext context = committedContextsById.get(state.stateUUID())[ FD ]
Line_9 $$ for (ClusterStateContext context : committedContexts) -->Line_10 $$ committedContextsById.put(context.stateUUID(), context)[ FD ]
Line_5 $$ List<ClusterStateContext> committedContexts = randomCommitStates(queue)-->Line_6 $$ ClusterState toFail = randomFrom(committedContexts).state[ FD ]
Line_6 $$ ClusterState toFail = randomFrom(committedContexts).state-->Line_7 $$ queue.markAsFailed(toFail, new ElasticsearchException("boo!"))[ FD ]
Line_6 $$ ClusterState toFail = randomFrom(committedContexts).state-->Line_22 $$ if (state.equals(toFail)) [ FD ]
Line_2 $$ public void testFailedStateCleansSupersededStatesOnly() -->Line_3 $$ List<ClusterState> states = randomStates(scaledRandomIntBetween(10, 50), "master1", "master2", "master3", "master4")[ CD ]
Line_17 $$ for (ClusterState state : states) -->Line_25 $$ assertThat("non-committed states should never be removed", committedContextsById, hasKey(state.stateUUID()))[ FD ]
Line_2 $$ public void testFailedStateCleansSupersededStatesOnly() -->Line_8 $$ final Map<String, ClusterStateContext> committedContextsById = new HashMap()[ CD ]
Line_8 $$ final Map<String, ClusterStateContext> committedContextsById = new HashMap()-->Line_25 $$ assertThat("non-committed states should never be removed", committedContextsById, hasKey(state.stateUUID()))[ FD ]
Line_4 $$ PendingClusterStatesQueue queue = createQueueWithStates(states)-->Line_7 $$ queue.markAsFailed(toFail, new ElasticsearchException("boo!"))[ FD ]
Line_13 $$ if (context.committed()) -->Line_14 $$ assertFalse("found a committed cluster state, which is superseded by a failed state.\nFound:" + context.state + "\nfailed:" + toFail, toFail.supersedes(context.state))[ CD ]
Line_18 $$ ClusterStateContext pendingContext = queue.findState(state.stateUUID())-->Line_19 $$ if (pendingContext != null) [ FD ]
Line_4 $$ PendingClusterStatesQueue queue = createQueueWithStates(states)-->Line_18 $$ ClusterStateContext pendingContext = queue.findState(state.stateUUID())[ FD ]
Line_2 $$ public void testFailedStateCleansSupersededStatesOnly() -->Line_6 $$ ClusterState toFail = randomFrom(committedContexts).state[ CD ]
Line_8 $$ final Map<String, ClusterStateContext> committedContextsById = new HashMap()-->Line_10 $$ committedContextsById.put(context.stateUUID(), context)[ FD ]
Line_17 $$ for (ClusterState state : states) -->Line_22 $$ if (state.equals(toFail)) [ FD ]
Line_2 $$ public void testFailedStateCleansSupersededStatesOnly() -->Line_7 $$ queue.markAsFailed(toFail, new ElasticsearchException("boo!"))[ CD ]
Line_2 $$ public void testFailedStateCleansSupersededStatesOnly() -->Line_5 $$ List<ClusterStateContext> committedContexts = randomCommitStates(queue)[ CD ]
Line_2 $$ public void testFailedStateCleansSupersededStatesOnly() -->Line_4 $$ PendingClusterStatesQueue queue = createQueueWithStates(states)[ CD ]
Line_9 $$ for (ClusterStateContext context : committedContexts) -->Line_13 $$ if (context.committed()) [ FD ]
Line_6 $$ ClusterState toFail = randomFrom(committedContexts).state-->Line_14 $$ assertFalse("found a committed cluster state, which is superseded by a failed state.\nFound:" + context.state + "\nfailed:" + toFail, toFail.supersedes(context.state))[ FD ]
