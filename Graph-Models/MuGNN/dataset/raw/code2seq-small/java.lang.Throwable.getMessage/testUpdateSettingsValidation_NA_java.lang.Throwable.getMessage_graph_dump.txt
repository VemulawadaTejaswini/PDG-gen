Line_3 $$ List<String> nodes = internalCluster().startNodesAsync(settingsBuilder().put("node.data", false).build(), settingsBuilder().put("node.master", false).build(), settingsBuilder().put("node.master", false).build()).get()-->Line_5 $$ String node_1 = nodes.get(1)[ FD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_4 $$ String master = nodes.get(0)[ CD ]
Line_9 $$ ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setWaitForNodes("3").setWaitForGreenStatus().execute().actionGet()-->Line_15 $$ assertThat(healthResponse.getIndices().get("test").getActiveShards(), equalTo(test.numPrimaries))[ FD ]
Line_9 $$ ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setWaitForNodes("3").setWaitForGreenStatus().execute().actionGet()-->Line_10 $$ assertThat(healthResponse.isTimedOut(), equalTo(false))[ FD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_15 $$ assertThat(healthResponse.getIndices().get("test").getActiveShards(), equalTo(test.numPrimaries))[ CD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_10 $$ assertThat(healthResponse.isTimedOut(), equalTo(false))[ CD ]
Line_3 $$ List<String> nodes = internalCluster().startNodesAsync(settingsBuilder().put("node.data", false).build(), settingsBuilder().put("node.master", false).build(), settingsBuilder().put("node.master", false).build()).get()-->Line_4 $$ String master = nodes.get(0)[ FD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_13 $$ healthResponse = client().admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet()[ CD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_5 $$ String node_1 = nodes.get(1)[ CD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_6 $$ String node_2 = nodes.get(2)[ CD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_7 $$ createIndex("test")[ CD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_8 $$ NumShards test = getNumShards("test")[ CD ]
Line_9 $$ ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setWaitForNodes("3").setWaitForGreenStatus().execute().actionGet()-->Line_14 $$ assertThat(healthResponse.isTimedOut(), equalTo(false))[ FD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_3 $$ List<String> nodes = internalCluster().startNodesAsync(settingsBuilder().put("node.data", false).build(), settingsBuilder().put("node.master", false).build(), settingsBuilder().put("node.master", false).build()).get()[ CD ]
Line_13 $$ healthResponse = client().admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet()-->Line_15 $$ assertThat(healthResponse.getIndices().get("test").getActiveShards(), equalTo(test.numPrimaries))[ FD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_11 $$ assertThat(healthResponse.getIndices().get("test").getActiveShards(), equalTo(test.totalNumShards))[ CD ]
Line_13 $$ healthResponse = client().admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet()-->Line_14 $$ assertThat(healthResponse.isTimedOut(), equalTo(false))[ FD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_12 $$ client().admin().indices().prepareUpdateSettings("test").setSettings(settingsBuilder().put("index.number_of_replicas", 0)).execute().actionGet()[ CD ]
Line_3 $$ List<String> nodes = internalCluster().startNodesAsync(settingsBuilder().put("node.data", false).build(), settingsBuilder().put("node.master", false).build(), settingsBuilder().put("node.master", false).build()).get()-->Line_6 $$ String node_2 = nodes.get(2)[ FD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_9 $$ ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setWaitForNodes("3").setWaitForGreenStatus().execute().actionGet()[ CD ]
Line_2 $$ public void testUpdateSettingsValidation() throws Exception -->Line_14 $$ assertThat(healthResponse.isTimedOut(), equalTo(false))[ CD ]
Line_9 $$ ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setWaitForNodes("3").setWaitForGreenStatus().execute().actionGet()-->Line_11 $$ assertThat(healthResponse.getIndices().get("test").getActiveShards(), equalTo(test.totalNumShards))[ FD ]
Line_9 $$ ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setWaitForNodes("3").setWaitForGreenStatus().execute().actionGet()-->Line_13 $$ healthResponse = client().admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet()[ FD ]
