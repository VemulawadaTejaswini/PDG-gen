Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_8 $$ networkPartition.startDisrupting()[ CD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_4 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2)).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))))[ CD ]
Line_19 $$ ClusterState state = null-->Line_23 $$ state = nodeState[ FD ]
Line_7 $$ NetworkPartition networkPartition = addRandomIsolation(isolatedNode)-->Line_8 $$ networkPartition.startDisrupting()[ FD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_12 $$ networkPartition.stopDisrupting()[ CD ]
Line_19 $$ ClusterState state = null-->Line_27 $$ assertEquals("unequal versions", state.version(), nodeState.version())[ FD ]
Line_6 $$ String isolatedNode = internalCluster().getMasterName()-->Line_7 $$ NetworkPartition networkPartition = addRandomIsolation(isolatedNode)[ FD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_9 $$ String nonIsolatedNode = networkPartition.getMajoritySide().iterator().next()[ CD ]
Line_23 $$ state = nodeState-->Line_35 $$ fail("failed comparing cluster state: " + t.getMessage() + "\n" + "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state.prettyPrint() + "\n--- cluster state [" + node + "]: ---\n" + nodeState.prettyPrint())[ FD ]
Line_22 $$ if (state == null) -->Line_23 $$ state = nodeState[ CD ]
Line_21 $$ ClusterState nodeState = getNodeClusterState(node)-->Line_29 $$ assertEquals("different masters ", state.nodes().masterNodeId(), nodeState.nodes().masterNodeId())[ FD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_19 $$ ClusterState state = null[ CD ]
Line_6 $$ String isolatedNode = internalCluster().getMasterName()-->Line_11 $$ assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40))[ FD ]
Line_23 $$ state = nodeState-->Line_28 $$ assertEquals("unequal node count", state.nodes().size(), nodeState.nodes().size())[ FD ]
Line_23 $$ state = nodeState-->Line_27 $$ assertEquals("unequal versions", state.version(), nodeState.version())[ FD ]
Line_31 $$ if (!state.routingTable().prettyPrint().equals(nodeState.routingTable().prettyPrint())) -->Line_32 $$ fail("different routing")[ CD ]
Line_13 $$ for (String node : nodes) -->Line_14 $$ ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkPartition.expectedTimeToHeal().millis()), true, node)[ FD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_7 $$ NetworkPartition networkPartition = addRandomIsolation(isolatedNode)[ CD ]
Line_3 $$ final List<String> nodes = startCluster(3)-->Line_35 $$ fail("failed comparing cluster state: " + t.getMessage() + "\n" + "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state.prettyPrint() + "\n--- cluster state [" + node + "]: ---\n" + nodeState.prettyPrint())[ FD ]
Line_21 $$ ClusterState nodeState = getNodeClusterState(node)-->Line_35 $$ fail("failed comparing cluster state: " + t.getMessage() + "\n" + "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state.prettyPrint() + "\n--- cluster state [" + node + "]: ---\n" + nodeState.prettyPrint())[ FD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_5 $$ ensureGreen()[ CD ]
Line_7 $$ NetworkPartition networkPartition = addRandomIsolation(isolatedNode)-->Line_14 $$ ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkPartition.expectedTimeToHeal().millis()), true, node)[ FD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_16 $$ logger.info("issue a reroute")[ CD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_3 $$ final List<String> nodes = startCluster(3)[ CD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_11 $$ assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40))[ CD ]
Line_21 $$ ClusterState nodeState = getNodeClusterState(node)-->Line_30 $$ assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())[ FD ]
Line_13 $$ for (String node : nodes) -->Line_21 $$ ClusterState nodeState = getNodeClusterState(node)[ FD ]
Line_7 $$ NetworkPartition networkPartition = addRandomIsolation(isolatedNode)-->Line_9 $$ String nonIsolatedNode = networkPartition.getMajoritySide().iterator().next()[ FD ]
Line_23 $$ state = nodeState-->Line_29 $$ assertEquals("different masters ", state.nodes().masterNodeId(), nodeState.nodes().masterNodeId())[ FD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_10 $$ ensureStableCluster(2, nonIsolatedNode)[ CD ]
Line_21 $$ ClusterState nodeState = getNodeClusterState(node)-->Line_27 $$ assertEquals("unequal versions", state.version(), nodeState.version())[ FD ]
Line_19 $$ ClusterState state = null-->Line_31 $$ if (!state.routingTable().prettyPrint().equals(nodeState.routingTable().prettyPrint())) [ FD ]
Line_21 $$ ClusterState nodeState = getNodeClusterState(node)-->Line_23 $$ state = nodeState[ FD ]
Line_7 $$ NetworkPartition networkPartition = addRandomIsolation(isolatedNode)-->Line_12 $$ networkPartition.stopDisrupting()[ FD ]
Line_9 $$ String nonIsolatedNode = networkPartition.getMajoritySide().iterator().next()-->Line_10 $$ ensureStableCluster(2, nonIsolatedNode)[ FD ]
Line_19 $$ ClusterState state = null-->Line_29 $$ assertEquals("different masters ", state.nodes().masterNodeId(), nodeState.nodes().masterNodeId())[ FD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_17 $$ assertAcked(client().admin().cluster().prepareReroute())[ CD ]
Line_23 $$ state = nodeState-->Line_30 $$ assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())[ FD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_18 $$ ensureGreen("test")[ CD ]
Line_2 $$ public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception -->Line_6 $$ String isolatedNode = internalCluster().getMasterName()[ CD ]
Line_23 $$ state = nodeState-->Line_31 $$ if (!state.routingTable().prettyPrint().equals(nodeState.routingTable().prettyPrint())) [ FD ]
Line_21 $$ ClusterState nodeState = getNodeClusterState(node)-->Line_28 $$ assertEquals("unequal node count", state.nodes().size(), nodeState.nodes().size())[ FD ]
Line_19 $$ ClusterState state = null-->Line_35 $$ fail("failed comparing cluster state: " + t.getMessage() + "\n" + "--- cluster state of node [" + nodes.get(0) + "]: ---\n" + state.prettyPrint() + "\n--- cluster state [" + node + "]: ---\n" + nodeState.prettyPrint())[ FD ]
Line_19 $$ ClusterState state = null-->Line_28 $$ assertEquals("unequal node count", state.nodes().size(), nodeState.nodes().size())[ FD ]
Line_19 $$ ClusterState state = null-->Line_30 $$ assertEquals("different meta data version", state.metaData().version(), nodeState.metaData().version())[ FD ]
Line_19 $$ ClusterState state = null-->Line_22 $$ if (state == null) [ FD ]
Line_21 $$ ClusterState nodeState = getNodeClusterState(node)-->Line_31 $$ if (!state.routingTable().prettyPrint().equals(nodeState.routingTable().prettyPrint())) [ FD ]
