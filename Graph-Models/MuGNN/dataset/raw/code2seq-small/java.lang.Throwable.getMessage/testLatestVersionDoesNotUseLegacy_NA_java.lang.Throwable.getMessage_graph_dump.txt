Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_7 $$ dirs[1] = createTempDir()[ CD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_11 $$ final Path dir1 = randomFrom(dirs)[ CD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_5 $$ final Path[] dirs = new Path[2][ CD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_4 $$ MetaDataStateFormat<MetaData> format = MetaStateService.globalStateFormat(randomFrom(XContentType.values()), params)[ CD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_12 $$ final int v1 = randomInt(10)[ CD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_6 $$ dirs[0] = createTempDir()[ CD ]
Line_30 $$ final MetaData meta = randomMeta()-->Line_31 $$ format.write(meta, v1, dirs)[ FD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_35 $$ final Path[] files = FileSystemUtils.files(path.resolve("_state"))[ CD ]
Line_4 $$ MetaDataStateFormat<MetaData> format = MetaStateService.globalStateFormat(randomFrom(XContentType.values()), params)-->Line_13 $$ format.write(randomMeta(), v1, dir1)[ FD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_30 $$ final MetaData meta = randomMeta()[ CD ]
Line_5 $$ final Path[] dirs = new Path[2]-->Line_34 $$ final Path path = randomFrom(dirs)[ FD ]
Line_18 $$ try (XContentBuilder xcontentBuilder = XContentFactory.contentBuilder(format.format(), Files.newOutputStream(dir2.resolve(MetaDataStateFormat.STATE_DIR_NAME).resolve(MetaStateService.GLOBAL_STATE_FILE_PREFIX + v2)))) -->Line_19 $$ xcontentBuilder.startObject()[ FD ]
Line_4 $$ MetaDataStateFormat<MetaData> format = MetaStateService.globalStateFormat(randomFrom(XContentType.values()), params)-->Line_31 $$ format.write(meta, v1, dirs)[ FD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_37 $$ assertEquals("global-" + format.findMaxStateId("global-", dirs) + ".st", files[0].getFileName().toString())[ CD ]
Line_18 $$ try (XContentBuilder xcontentBuilder = XContentFactory.contentBuilder(format.format(), Files.newOutputStream(dir2.resolve(MetaDataStateFormat.STATE_DIR_NAME).resolve(MetaStateService.GLOBAL_STATE_FILE_PREFIX + v2)))) -->Line_21 $$ xcontentBuilder.endObject()[ FD ]
Line_5 $$ final Path[] dirs = new Path[2]-->Line_16 $$ final Path dir2 = randomFrom(dirs)[ FD ]
Line_16 $$ final Path dir2 = randomFrom(dirs)-->Line_18 $$ try (XContentBuilder xcontentBuilder = XContentFactory.contentBuilder(format.format(), Files.newOutputStream(dir2.resolve(MetaDataStateFormat.STATE_DIR_NAME).resolve(MetaStateService.GLOBAL_STATE_FILE_PREFIX + v2)))) [ FD ]
Line_4 $$ MetaDataStateFormat<MetaData> format = MetaStateService.globalStateFormat(randomFrom(XContentType.values()), params)-->Line_32 $$ final MetaData metaData = format.loadLatestState(logger, dirs)[ FD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_32 $$ final MetaData metaData = format.loadLatestState(logger, dirs)[ CD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_36 $$ assertEquals(1, files.length)[ CD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_34 $$ final Path path = randomFrom(dirs)[ CD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_33 $$ assertEquals(meta.clusterUUID(), metaData.clusterUUID())[ CD ]
Line_3 $$ final ToXContent.Params params = ToXContent.EMPTY_PARAMS-->Line_4 $$ MetaDataStateFormat<MetaData> format = MetaStateService.globalStateFormat(randomFrom(XContentType.values()), params)[ FD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_15 $$ for (int i = 0; i < numLegacyFiles; ++i) [ CD ]
Line_4 $$ MetaDataStateFormat<MetaData> format = MetaStateService.globalStateFormat(randomFrom(XContentType.values()), params)-->Line_25 $$ format.loadLatestState(logger, dirs)[ FD ]
Line_32 $$ final MetaData metaData = format.loadLatestState(logger, dirs)-->Line_33 $$ assertEquals(meta.clusterUUID(), metaData.clusterUUID())[ FD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_3 $$ final ToXContent.Params params = ToXContent.EMPTY_PARAMS[ CD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_13 $$ format.write(randomMeta(), v1, dir1)[ CD ]
Line_4 $$ MetaDataStateFormat<MetaData> format = MetaStateService.globalStateFormat(randomFrom(XContentType.values()), params)-->Line_18 $$ try (XContentBuilder xcontentBuilder = XContentFactory.contentBuilder(format.format(), Files.newOutputStream(dir2.resolve(MetaDataStateFormat.STATE_DIR_NAME).resolve(MetaStateService.GLOBAL_STATE_FILE_PREFIX + v2)))) [ FD ]
Line_11 $$ final Path dir1 = randomFrom(dirs)-->Line_13 $$ format.write(randomMeta(), v1, dir1)[ FD ]
Line_5 $$ final Path[] dirs = new Path[2]-->Line_25 $$ format.loadLatestState(logger, dirs)[ FD ]
Line_30 $$ final MetaData meta = randomMeta()-->Line_33 $$ assertEquals(meta.clusterUUID(), metaData.clusterUUID())[ FD ]
Line_12 $$ final int v1 = randomInt(10)-->Line_13 $$ format.write(randomMeta(), v1, dir1)[ FD ]
Line_5 $$ final Path[] dirs = new Path[2]-->Line_31 $$ format.write(meta, v1, dirs)[ FD ]
Line_3 $$ final ToXContent.Params params = ToXContent.EMPTY_PARAMS-->Line_20 $$ MetaData.Builder.toXContent(randomMeta(), xcontentBuilder, params)[ FD ]
Line_5 $$ final Path[] dirs = new Path[2]-->Line_11 $$ final Path dir1 = randomFrom(dirs)[ FD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_31 $$ format.write(meta, v1, dirs)[ CD ]
Line_34 $$ final Path path = randomFrom(dirs)-->Line_35 $$ final Path[] files = FileSystemUtils.files(path.resolve("_state"))[ FD ]
Line_18 $$ try (XContentBuilder xcontentBuilder = XContentFactory.contentBuilder(format.format(), Files.newOutputStream(dir2.resolve(MetaDataStateFormat.STATE_DIR_NAME).resolve(MetaStateService.GLOBAL_STATE_FILE_PREFIX + v2)))) -->Line_20 $$ MetaData.Builder.toXContent(randomMeta(), xcontentBuilder, params)[ FD ]
Line_4 $$ MetaDataStateFormat<MetaData> format = MetaStateService.globalStateFormat(randomFrom(XContentType.values()), params)-->Line_37 $$ assertEquals("global-" + format.findMaxStateId("global-", dirs) + ".st", files[0].getFileName().toString())[ FD ]
Line_15 $$ for (int i = 0; i < numLegacyFiles; ++i) -->Line_16 $$ final Path dir2 = randomFrom(dirs)[ CD ]
Line_5 $$ final Path[] dirs = new Path[2]-->Line_32 $$ final MetaData metaData = format.loadLatestState(logger, dirs)[ FD ]
Line_8 $$ for (Path dir : dirs) -->Line_9 $$ Files.createDirectories(dir.resolve(MetaDataStateFormat.STATE_DIR_NAME))[ FD ]
Line_2 $$ public void testLatestVersionDoesNotUseLegacy() throws IOException -->Line_14 $$ final int numLegacyFiles = randomIntBetween(1, 5)[ CD ]
Line_15 $$ for (int i = 0; i < numLegacyFiles; ++i) -->Line_17 $$ final int v2 = v1 + 1 + randomInt(10)[ CD ]
Line_5 $$ final Path[] dirs = new Path[2]-->Line_37 $$ assertEquals("global-" + format.findMaxStateId("global-", dirs) + ".st", files[0].getFileName().toString())[ FD ]
Line_12 $$ final int v1 = randomInt(10)-->Line_31 $$ format.write(meta, v1, dirs)[ FD ]
Line_14 $$ final int numLegacyFiles = randomIntBetween(1, 5)-->Line_15 $$ for (int i = 0; i < numLegacyFiles; ++i) [ FD ]
