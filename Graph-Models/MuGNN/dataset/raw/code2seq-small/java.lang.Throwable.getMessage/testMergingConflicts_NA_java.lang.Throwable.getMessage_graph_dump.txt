Line_2 $$ public void testMergingConflicts() throws Exception -->Line_25 $$ assertTrue(docMapper.timestampFieldMapper().enabled())[ CD ]
Line_4 $$ Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build()-->Line_5 $$ MapperService mapperService = createIndex("test", indexSettings).mapperService()[ FD ]
Line_3 $$ String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", true).field("store", "yes").field("index", "analyzed").field("path", "foo").field("default", "1970-01-01").endObject().endObject().endObject().string()-->Line_26 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", true).field("store", "yes").field("index", "analyzed").field("path", "bar").field("default", "1970-01-02").endObject().endObject().endObject().string()[ FD ]
Line_2 $$ public void testMergingConflicts() throws Exception -->Line_16 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", false).startObject("fielddata").field("format", "array").endObject().field("store", "yes").field("index", "analyzed").field("path", "bar").field("default", "1970-01-02").endObject().endObject().endObject().string()[ CD ]
Line_8 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", false).startObject("fielddata").field("format", "array").endObject().field("store", "no").field("index", "no").field("path", "foo").field("default", "1970-01-01").endObject().endObject().endObject().string()-->Line_26 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", true).field("store", "yes").field("index", "analyzed").field("path", "bar").field("default", "1970-01-02").endObject().endObject().endObject().string()[ FD ]
Line_5 $$ MapperService mapperService = createIndex("test", indexSettings).mapperService()-->Line_6 $$ DocumentMapper docMapper = mapperService.merge("type", new CompressedXContent(mapping), true, false)[ FD ]
Line_3 $$ String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", true).field("store", "yes").field("index", "analyzed").field("path", "foo").field("default", "1970-01-01").endObject().endObject().endObject().string()-->Line_8 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", false).startObject("fielddata").field("format", "array").endObject().field("store", "no").field("index", "no").field("path", "foo").field("default", "1970-01-01").endObject().endObject().endObject().string()[ FD ]
Line_2 $$ public void testMergingConflicts() throws Exception -->Line_26 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", true).field("store", "yes").field("index", "analyzed").field("path", "bar").field("default", "1970-01-02").endObject().endObject().endObject().string()[ CD ]
Line_6 $$ DocumentMapper docMapper = mapperService.merge("type", new CompressedXContent(mapping), true, false)-->Line_24 $$ assertThat(docMapper.timestampFieldMapper().fieldType().fieldDataType().getLoading(), equalTo(MappedFieldType.Loading.LAZY))[ FD ]
Line_2 $$ public void testMergingConflicts() throws Exception -->Line_6 $$ DocumentMapper docMapper = mapperService.merge("type", new CompressedXContent(mapping), true, false)[ CD ]
Line_6 $$ DocumentMapper docMapper = mapperService.merge("type", new CompressedXContent(mapping), true, false)-->Line_25 $$ assertTrue(docMapper.timestampFieldMapper().enabled())[ FD ]
Line_2 $$ public void testMergingConflicts() throws Exception -->Line_7 $$ assertThat(docMapper.timestampFieldMapper().fieldType().fieldDataType().getLoading(), equalTo(MappedFieldType.Loading.LAZY))[ CD ]
Line_2 $$ public void testMergingConflicts() throws Exception -->Line_5 $$ MapperService mapperService = createIndex("test", indexSettings).mapperService()[ CD ]
Line_16 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", false).startObject("fielddata").field("format", "array").endObject().field("store", "yes").field("index", "analyzed").field("path", "bar").field("default", "1970-01-02").endObject().endObject().endObject().string()-->Line_26 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", true).field("store", "yes").field("index", "analyzed").field("path", "bar").field("default", "1970-01-02").endObject().endObject().endObject().string()[ FD ]
Line_2 $$ public void testMergingConflicts() throws Exception -->Line_24 $$ assertThat(docMapper.timestampFieldMapper().fieldType().fieldDataType().getLoading(), equalTo(MappedFieldType.Loading.LAZY))[ CD ]
Line_2 $$ public void testMergingConflicts() throws Exception -->Line_4 $$ Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build()[ CD ]
Line_3 $$ String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", true).field("store", "yes").field("index", "analyzed").field("path", "foo").field("default", "1970-01-01").endObject().endObject().endObject().string()-->Line_16 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", false).startObject("fielddata").field("format", "array").endObject().field("store", "yes").field("index", "analyzed").field("path", "bar").field("default", "1970-01-02").endObject().endObject().endObject().string()[ FD ]
Line_6 $$ DocumentMapper docMapper = mapperService.merge("type", new CompressedXContent(mapping), true, false)-->Line_7 $$ assertThat(docMapper.timestampFieldMapper().fieldType().fieldDataType().getLoading(), equalTo(MappedFieldType.Loading.LAZY))[ FD ]
Line_5 $$ MapperService mapperService = createIndex("test", indexSettings).mapperService()-->Line_18 $$ mapperService.merge("type", new CompressedXContent(mapping), false, false)[ FD ]
Line_8 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", false).startObject("fielddata").field("format", "array").endObject().field("store", "no").field("index", "no").field("path", "foo").field("default", "1970-01-01").endObject().endObject().endObject().string()-->Line_16 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", false).startObject("fielddata").field("format", "array").endObject().field("store", "yes").field("index", "analyzed").field("path", "bar").field("default", "1970-01-02").endObject().endObject().endObject().string()[ FD ]
Line_2 $$ public void testMergingConflicts() throws Exception -->Line_8 $$ mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", false).startObject("fielddata").field("format", "array").endObject().field("store", "no").field("index", "no").field("path", "foo").field("default", "1970-01-01").endObject().endObject().endObject().string()[ CD ]
Line_5 $$ MapperService mapperService = createIndex("test", indexSettings).mapperService()-->Line_28 $$ mapperService.merge("type", new CompressedXContent(mapping), false, false)[ FD ]
Line_2 $$ public void testMergingConflicts() throws Exception -->Line_3 $$ String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", true).field("store", "yes").field("index", "analyzed").field("path", "foo").field("default", "1970-01-01").endObject().endObject().endObject().string()[ CD ]
Line_5 $$ MapperService mapperService = createIndex("test", indexSettings).mapperService()-->Line_10 $$ mapperService.merge("type", new CompressedXContent(mapping), false, false)[ FD ]
