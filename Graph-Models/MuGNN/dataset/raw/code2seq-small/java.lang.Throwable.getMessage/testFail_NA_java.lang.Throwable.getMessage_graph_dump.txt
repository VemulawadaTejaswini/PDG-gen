Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_8 $$ assertEquals(getFutureValue(hiveSplitSource.getNextBatch(1)).size(), 1)[ FD ]
Line_2 $$ public void testFail() throws Exception -->Line_10 $$ hiveSplitSource.fail(new RuntimeException("test"))[ CD ]
Line_2 $$ public void testFail() throws Exception -->Line_20 $$ assertEquals(hiveSplitSource.getOutstandingSplitCount(), 3)[ CD ]
Line_2 $$ public void testFail() throws Exception -->Line_8 $$ assertEquals(getFutureValue(hiveSplitSource.getNextBatch(1)).size(), 1)[ CD ]
Line_2 $$ public void testFail() throws Exception -->Line_18 $$ assertEquals(hiveSplitSource.getOutstandingSplitCount(), 3)[ CD ]
Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_10 $$ hiveSplitSource.fail(new RuntimeException("test"))[ FD ]
Line_2 $$ public void testFail() throws Exception -->Line_21 $$ hiveSplitSource.fail(new RuntimeException("another failure"))[ CD ]
Line_4 $$ for (int i = 0; i < 5; i++) -->Line_5 $$ hiveSplitSource.addToQueue(new TestSplit(i))[ CD ]
Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_21 $$ hiveSplitSource.fail(new RuntimeException("another failure"))[ FD ]
Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_9 $$ assertEquals(hiveSplitSource.getOutstandingSplitCount(), 4)[ FD ]
Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_20 $$ assertEquals(hiveSplitSource.getOutstandingSplitCount(), 3)[ FD ]
Line_2 $$ public void testFail() throws Exception -->Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))[ CD ]
Line_2 $$ public void testFail() throws Exception -->Line_19 $$ hiveSplitSource.addToQueue(new TestSplit(99))[ CD ]
Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_24 $$ getFutureValue(hiveSplitSource.getNextBatch(1))[ FD ]
Line_2 $$ public void testFail() throws Exception -->Line_22 $$ assertEquals(hiveSplitSource.getOutstandingSplitCount(), 3)[ CD ]
Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_19 $$ hiveSplitSource.addToQueue(new TestSplit(99))[ FD ]
Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_22 $$ assertEquals(hiveSplitSource.getOutstandingSplitCount(), 3)[ FD ]
Line_4 $$ for (int i = 0; i < 5; i++) -->Line_6 $$ assertEquals(hiveSplitSource.getOutstandingSplitCount(), i + 1)[ CD ]
Line_2 $$ public void testFail() throws Exception -->Line_9 $$ assertEquals(hiveSplitSource.getOutstandingSplitCount(), 4)[ CD ]
Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_18 $$ assertEquals(hiveSplitSource.getOutstandingSplitCount(), 3)[ FD ]
Line_2 $$ public void testFail() throws Exception -->Line_4 $$ for (int i = 0; i < 5; i++) [ CD ]
Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_6 $$ assertEquals(hiveSplitSource.getOutstandingSplitCount(), i + 1)[ FD ]
Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_11 $$ assertEquals(hiveSplitSource.getOutstandingSplitCount(), 4)[ FD ]
Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_5 $$ hiveSplitSource.addToQueue(new TestSplit(i))[ FD ]
Line_3 $$ HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_13 $$ getFutureValue(hiveSplitSource.getNextBatch(1))[ FD ]
Line_2 $$ public void testFail() throws Exception -->Line_11 $$ assertEquals(hiveSplitSource.getOutstandingSplitCount(), 4)[ CD ]
