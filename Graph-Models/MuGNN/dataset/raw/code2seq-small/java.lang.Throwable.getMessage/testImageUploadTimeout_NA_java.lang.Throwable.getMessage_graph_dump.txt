Line_2 $$ public void testImageUploadTimeout() throws Exception -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_5 $$ HttpServer2 testServer = HttpServerFunctionalTest.createServer("hdfs")-->Line_7 $$ testServer.addServlet("ImageTransfer", ImageServlet.PATH_SPEC, TestImageTransferServlet.class)[ FD ]
Line_4 $$ NNStorage mockStorage = Mockito.mock(NNStorage.class)-->Line_20 $$ TransferFsImage.uploadImageFromStorage(serverURL, conf, mockStorage, NameNodeFile.IMAGE, 1L)[ FD ]
Line_5 $$ HttpServer2 testServer = HttpServerFunctionalTest.createServer("hdfs")-->Line_9 $$ URL serverURL = HttpServerFunctionalTest.getServerURL(testServer)[ FD ]
Line_11 $$ File tmpDir = new File(new FileSystemTestHelper().getTestRootDir())-->Line_13 $$ File mockImageFile = File.createTempFile("image", "", tmpDir)[ FD ]
Line_5 $$ HttpServer2 testServer = HttpServerFunctionalTest.createServer("hdfs")-->Line_8 $$ testServer.start()[ FD ]
Line_4 $$ NNStorage mockStorage = Mockito.mock(NNStorage.class)-->Line_17 $$ Mockito.when(mockStorage.findImageFile(Mockito.any(NameNodeFile.class), Mockito.anyLong())).thenReturn(mockImageFile)[ FD ]
Line_4 $$ NNStorage mockStorage = Mockito.mock(NNStorage.class)-->Line_18 $$ Mockito.when(mockStorage.toColonSeparatedString()).thenReturn("storage:info:string")[ FD ]
Line_9 $$ URL serverURL = HttpServerFunctionalTest.getServerURL(testServer)-->Line_20 $$ TransferFsImage.uploadImageFromStorage(serverURL, conf, mockStorage, NameNodeFile.IMAGE, 1L)[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_20 $$ TransferFsImage.uploadImageFromStorage(serverURL, conf, mockStorage, NameNodeFile.IMAGE, 1L)[ FD ]
Line_14 $$ FileOutputStream imageFile = new FileOutputStream(mockImageFile)-->Line_16 $$ imageFile.close()[ FD ]
Line_13 $$ File mockImageFile = File.createTempFile("image", "", tmpDir)-->Line_17 $$ Mockito.when(mockStorage.findImageFile(Mockito.any(NameNodeFile.class), Mockito.anyLong())).thenReturn(mockImageFile)[ FD ]
Line_5 $$ HttpServer2 testServer = HttpServerFunctionalTest.createServer("hdfs")-->Line_26 $$ testServer.stop()[ FD ]
Line_2 $$ public void testImageUploadTimeout() throws Exception -->Line_5 $$ HttpServer2 testServer = HttpServerFunctionalTest.createServer("hdfs")[ CD ]
Line_14 $$ FileOutputStream imageFile = new FileOutputStream(mockImageFile)-->Line_15 $$ imageFile.write("data".getBytes())[ FD ]
Line_11 $$ File tmpDir = new File(new FileSystemTestHelper().getTestRootDir())-->Line_12 $$ tmpDir.mkdirs()[ FD ]
Line_2 $$ public void testImageUploadTimeout() throws Exception -->Line_4 $$ NNStorage mockStorage = Mockito.mock(NNStorage.class)[ CD ]
