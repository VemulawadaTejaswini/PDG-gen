Line_5 $$ ResourceMgrDelegate rm = mock(ResourceMgrDelegate.class)-->Line_6 $$ when(rm.getApplicationReport(TypeConverter.toYarn(oldJobId).getAppId())).thenReturn(null)[ FD ]
Line_2 $$ public void testRemoteExceptionFromHistoryServer() throws Exception -->Line_7 $$ ClientServiceDelegate clientServiceDelegate = getClientServiceDelegate(historyServerProxy, rm)[ CD ]
Line_2 $$ public void testRemoteExceptionFromHistoryServer() throws Exception -->Line_3 $$ MRClientProtocol historyServerProxy = mock(MRClientProtocol.class)[ CD ]
Line_7 $$ ClientServiceDelegate clientServiceDelegate = getClientServiceDelegate(historyServerProxy, rm)-->Line_9 $$ clientServiceDelegate.getJobStatus(oldJobId)[ FD ]
Line_2 $$ public void testRemoteExceptionFromHistoryServer() throws Exception -->Line_5 $$ ResourceMgrDelegate rm = mock(ResourceMgrDelegate.class)[ CD ]
Line_2 $$ public void testRemoteExceptionFromHistoryServer() throws Exception -->Line_4 $$ when(historyServerProxy.getJobReport(getJobReportRequest())).thenThrow(new IOException("Job ID doesnot Exist"))[ CD ]
Line_3 $$ MRClientProtocol historyServerProxy = mock(MRClientProtocol.class)-->Line_7 $$ ClientServiceDelegate clientServiceDelegate = getClientServiceDelegate(historyServerProxy, rm)[ FD ]
Line_5 $$ ResourceMgrDelegate rm = mock(ResourceMgrDelegate.class)-->Line_7 $$ ClientServiceDelegate clientServiceDelegate = getClientServiceDelegate(historyServerProxy, rm)[ FD ]
Line_3 $$ MRClientProtocol historyServerProxy = mock(MRClientProtocol.class)-->Line_4 $$ when(historyServerProxy.getJobReport(getJobReportRequest())).thenThrow(new IOException("Job ID doesnot Exist"))[ FD ]
Line_2 $$ public void testRemoteExceptionFromHistoryServer() throws Exception -->Line_6 $$ when(rm.getApplicationReport(TypeConverter.toYarn(oldJobId).getAppId())).thenReturn(null)[ CD ]
