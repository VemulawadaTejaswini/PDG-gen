Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_43 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_34 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed3"), nullValue())[ CD ]
Line_23 $$ f = doc.getField("name")-->Line_26 $$ assertThat(f, notNullValue())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_30 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ CD ]
Line_25 $$ f = doc.getField("name.indexed")-->Line_26 $$ assertThat(f, notNullValue())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_16 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ CD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_12 $$ f = doc.getField("name.indexed")[ CD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_7 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), nullValue())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_32 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed"), notNullValue())[ CD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_46 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed2"), notNullValue())[ FD ]
Line_9 $$ Document doc = docMapper.parse("test", "person", "1", json).rootDoc()-->Line_12 $$ f = doc.getField("name.indexed")[ FD ]
Line_23 $$ f = doc.getField("name")-->Line_24 $$ assertThat(f, notNullValue())[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_44 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), notNullValue())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_7 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), nullValue())[ CD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_4 $$ MapperService mapperService = createIndex("test").mapperService()[ CD ]
Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_47 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed3"), nullValue())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_10 $$ IndexableField f = doc.getField("name")[ CD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_30 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_22 $$ doc = docMapper.parse("test", "person", "1", json).rootDoc()[ CD ]
Line_9 $$ Document doc = docMapper.parse("test", "person", "1", json).rootDoc()-->Line_22 $$ doc = docMapper.parse("test", "person", "1", json).rootDoc()[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_46 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed2"), notNullValue())[ CD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_22 $$ doc = docMapper.parse("test", "person", "1", json).rootDoc()[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_29 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_10 $$ IndexableField f = doc.getField("name")-->Line_11 $$ assertThat(f, notNullValue())[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_19 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed"), notNullValue())[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_43 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)[ CD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_9 $$ Document doc = docMapper.parse("test", "person", "1", json).rootDoc()[ CD ]
Line_4 $$ MapperService mapperService = createIndex("test").mapperService()-->Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_43 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ CD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_16 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_22 $$ doc = docMapper.parse("test", "person", "1", json).rootDoc()-->Line_25 $$ f = doc.getField("name.indexed")[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_32 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed"), notNullValue())[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)[ FD ]
Line_9 $$ Document doc = docMapper.parse("test", "person", "1", json).rootDoc()-->Line_10 $$ IndexableField f = doc.getField("name")[ FD ]
Line_12 $$ f = doc.getField("name.indexed")-->Line_26 $$ assertThat(f, notNullValue())[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_21 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed3"), nullValue())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_14 $$ mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json")[ CD ]
Line_3 $$ String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json")-->Line_27 $$ mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json")[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_18 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), notNullValue())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_13 $$ assertThat(f, nullValue())[ CD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_30 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_35 $$ mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json")[ CD ]
Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_44 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), notNullValue())[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_47 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed3"), nullValue())[ FD ]
Line_3 $$ String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json")-->Line_35 $$ mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json")[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_17 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ CD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_31 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), notNullValue())[ CD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_20 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed2"), nullValue())[ CD ]
Line_27 $$ mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json")-->Line_35 $$ mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json")[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_45 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed"), notNullValue())[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_34 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed3"), nullValue())[ FD ]
Line_10 $$ IndexableField f = doc.getField("name")-->Line_13 $$ assertThat(f, nullValue())[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_44 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), notNullValue())[ FD ]
Line_4 $$ MapperService mapperService = createIndex("test").mapperService()-->Line_37 $$ mapperService.merge("person", new CompressedXContent(mapping), false, false)[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_22 $$ doc = docMapper.parse("test", "person", "1", json).rootDoc()[ FD ]
Line_10 $$ IndexableField f = doc.getField("name")-->Line_25 $$ f = doc.getField("name.indexed")[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_18 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), notNullValue())[ CD ]
Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_33 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed2"), notNullValue())[ FD ]
Line_3 $$ String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json")-->Line_14 $$ mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json")[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_46 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed2"), notNullValue())[ FD ]
Line_10 $$ IndexableField f = doc.getField("name")-->Line_12 $$ f = doc.getField("name.indexed")[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_6 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_33 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed2"), notNullValue())[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_21 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed3"), nullValue())[ FD ]
Line_9 $$ Document doc = docMapper.parse("test", "person", "1", json).rootDoc()-->Line_23 $$ f = doc.getField("name")[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_27 $$ mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json")[ CD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_20 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed2"), nullValue())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_3 $$ String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json")[ CD ]
Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_32 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed"), notNullValue())[ FD ]
Line_10 $$ IndexableField f = doc.getField("name")-->Line_23 $$ f = doc.getField("name")[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_29 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)[ CD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_32 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed"), notNullValue())[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_19 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed"), notNullValue())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_21 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed3"), nullValue())[ CD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_17 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_19 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed"), notNullValue())[ CD ]
Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_30 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_31 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), notNullValue())[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_47 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed3"), nullValue())[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_18 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), notNullValue())[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_9 $$ Document doc = docMapper.parse("test", "person", "1", json).rootDoc()[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_33 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed2"), notNullValue())[ CD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_25 $$ f = doc.getField("name.indexed")[ CD ]
Line_12 $$ f = doc.getField("name.indexed")-->Line_23 $$ f = doc.getField("name")[ FD ]
Line_12 $$ f = doc.getField("name.indexed")-->Line_25 $$ f = doc.getField("name.indexed")[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_6 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ CD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_8 $$ BytesReference json = XContentFactory.jsonBuilder().startObject().field("name", "some name").endObject().bytes()[ CD ]
Line_14 $$ mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json")-->Line_35 $$ mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json")[ FD ]
Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_45 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed"), notNullValue())[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_34 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed3"), nullValue())[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_45 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed"), notNullValue())[ FD ]
Line_8 $$ BytesReference json = XContentFactory.jsonBuilder().startObject().field("name", "some name").endObject().bytes()-->Line_22 $$ doc = docMapper.parse("test", "person", "1", json).rootDoc()[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_11 $$ assertThat(f, notNullValue())[ CD ]
Line_22 $$ doc = docMapper.parse("test", "person", "1", json).rootDoc()-->Line_23 $$ f = doc.getField("name")[ FD ]
Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_43 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_16 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_24 $$ assertThat(f, notNullValue())[ CD ]
Line_9 $$ Document doc = docMapper.parse("test", "person", "1", json).rootDoc()-->Line_25 $$ f = doc.getField("name.indexed")[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_17 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
Line_10 $$ IndexableField f = doc.getField("name")-->Line_26 $$ assertThat(f, notNullValue())[ FD ]
Line_23 $$ f = doc.getField("name")-->Line_25 $$ f = doc.getField("name.indexed")[ FD ]
Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_34 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed3"), nullValue())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_47 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed3"), nullValue())[ CD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_45 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed"), notNullValue())[ CD ]
Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_46 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed2"), notNullValue())[ FD ]
Line_12 $$ f = doc.getField("name.indexed")-->Line_13 $$ assertThat(f, nullValue())[ FD ]
Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_31 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), notNullValue())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_26 $$ assertThat(f, notNullValue())[ CD ]
Line_12 $$ f = doc.getField("name.indexed")-->Line_24 $$ assertThat(f, notNullValue())[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_15 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)[ CD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_23 $$ f = doc.getField("name")[ CD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_29 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ CD ]
Line_8 $$ BytesReference json = XContentFactory.jsonBuilder().startObject().field("name", "some name").endObject().bytes()-->Line_9 $$ Document doc = docMapper.parse("test", "person", "1", json).rootDoc()[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_33 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed2"), notNullValue())[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_31 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), notNullValue())[ FD ]
Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)-->Line_20 $$ assertThat(docMapper.mappers().getMapper("name.not_indexed2"), nullValue())[ FD ]
Line_14 $$ mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json")-->Line_27 $$ mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json")[ FD ]
Line_2 $$ public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception -->Line_44 $$ assertThat(docMapper.mappers().getMapper("name.indexed"), notNullValue())[ CD ]
Line_10 $$ IndexableField f = doc.getField("name")-->Line_24 $$ assertThat(f, notNullValue())[ FD ]
Line_4 $$ MapperService mapperService = createIndex("test").mapperService()-->Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)[ FD ]
Line_4 $$ MapperService mapperService = createIndex("test").mapperService()-->Line_5 $$ DocumentMapper docMapper = mapperService.merge("person", new CompressedXContent(mapping), true, false)[ FD ]
Line_28 $$ docMapper = mapperService.merge("person", new CompressedXContent(mapping), false, false)-->Line_29 $$ assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper("name").fieldType().indexOptions())[ FD ]
