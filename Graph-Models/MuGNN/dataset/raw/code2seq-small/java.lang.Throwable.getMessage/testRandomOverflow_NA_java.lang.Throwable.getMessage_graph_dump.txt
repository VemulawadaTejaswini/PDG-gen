Line_3 $$ for (int i = 0; i < 100; i++) -->Line_4 $$ byte[] input = randomUnicodeOfLength(randomIntBetween(1, 1000)).getBytes(StandardCharsets.UTF_8)[ CD ]
Line_5 $$ ByteArrayIndexInput indexInput = new ByteArrayIndexInput("test", input)-->Line_7 $$ randomReadAndSlice(indexInput, firstReadLen)[ FD ]
Line_10 $$ int secondReadLen = bytesLeft + randomIntBetween(1, 100)-->Line_11 $$ indexInput.readBytes(new byte[secondReadLen], 0, secondReadLen)[ FD ]
Line_6 $$ int firstReadLen = randomIntBetween(0, input.length - 1)-->Line_7 $$ randomReadAndSlice(indexInput, firstReadLen)[ FD ]
Line_5 $$ ByteArrayIndexInput indexInput = new ByteArrayIndexInput("test", input)-->Line_11 $$ indexInput.readBytes(new byte[secondReadLen], 0, secondReadLen)[ FD ]
Line_2 $$ public void testRandomOverflow() throws IOException -->Line_3 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_3 $$ for (int i = 0; i < 100; i++) -->Line_7 $$ randomReadAndSlice(indexInput, firstReadLen)[ CD ]
Line_3 $$ for (int i = 0; i < 100; i++) -->Line_8 $$ int bytesLeft = input.length - firstReadLen[ CD ]
Line_3 $$ for (int i = 0; i < 100; i++) -->Line_6 $$ int firstReadLen = randomIntBetween(0, input.length - 1)[ CD ]
Line_3 $$ for (int i = 0; i < 100; i++) -->Line_5 $$ ByteArrayIndexInput indexInput = new ByteArrayIndexInput("test", input)[ CD ]
