Line_13 $$ NOTIFICATION_GROUP.createNotification("DSL script execution error", content, NotificationType.ERROR, new NotificationListener() -->Line_16 $$ notification.expire()[ FD ]
Line_6 $$ final String exceptionText = ExceptionUtil.getThrowableText(e)-->Line_7 $$ LOG.info(exceptionText)[ FD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_8 $$ GroovyDslFileIndex.disableFile(vfile, DslActivationStatus.Status.ERROR, exceptionText)[ CD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_6 $$ final String exceptionText = ExceptionUtil.getThrowableText(e)[ FD ]
Line_6 $$ final String exceptionText = ExceptionUtil.getThrowableText(e)-->Line_15 $$ InvestigateFix.analyzeStackTrace(project, exceptionText)[ FD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_3 $$ if (!GroovyDslFileIndex.isActivated(vfile)) [ FD ]
Line_13 $$ NOTIFICATION_GROUP.createNotification("DSL script execution error", content, NotificationType.ERROR, new NotificationListener() -->Line_15 $$ InvestigateFix.analyzeStackTrace(project, exceptionText)[ CD ]
Line_3 $$ if (!GroovyDslFileIndex.isActivated(vfile)) -->Line_4 $$ return[ CD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_9 $$ if (!ApplicationManagerEx.getApplicationEx().isInternal() && !ProjectRootManager.getInstance(project).getFileIndex().isInContent(vfile)) [ FD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_12 $$ String content = "<p>" + e.getMessage() + "</p><p><a href=\"\">Click here to investigate.</a></p>"[ FD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_9 $$ if (!ApplicationManagerEx.getApplicationEx().isInternal() && !ProjectRootManager.getInstance(project).getFileIndex().isInContent(vfile)) [ CD ]
Line_6 $$ final String exceptionText = ExceptionUtil.getThrowableText(e)-->Line_8 $$ GroovyDslFileIndex.disableFile(vfile, DslActivationStatus.Status.ERROR, exceptionText)[ FD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_13 $$ NOTIFICATION_GROUP.createNotification("DSL script execution error", content, NotificationType.ERROR, new NotificationListener() [ FD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_6 $$ final String exceptionText = ExceptionUtil.getThrowableText(e)[ CD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_8 $$ GroovyDslFileIndex.disableFile(vfile, DslActivationStatus.Status.ERROR, exceptionText)[ FD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_12 $$ String content = "<p>" + e.getMessage() + "</p><p><a href=\"\">Click here to investigate.</a></p>"[ CD ]
Line_13 $$ NOTIFICATION_GROUP.createNotification("DSL script execution error", content, NotificationType.ERROR, new NotificationListener() -->Line_16 $$ notification.expire()[ CD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_13 $$ NOTIFICATION_GROUP.createNotification("DSL script execution error", content, NotificationType.ERROR, new NotificationListener() [ CD ]
Line_9 $$ if (!ApplicationManagerEx.getApplicationEx().isInternal() && !ProjectRootManager.getInstance(project).getFileIndex().isInContent(vfile)) -->Line_10 $$ return[ CD ]
Line_12 $$ String content = "<p>" + e.getMessage() + "</p><p><a href=\"\">Click here to investigate.</a></p>"-->Line_13 $$ NOTIFICATION_GROUP.createNotification("DSL script execution error", content, NotificationType.ERROR, new NotificationListener() [ FD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_15 $$ InvestigateFix.analyzeStackTrace(project, exceptionText)[ FD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_7 $$ LOG.info(exceptionText)[ CD ]
Line_2 $$ public void invokeDslErrorPopup(Throwable e, final Project project, @NotNull VirtualFile vfile) -->Line_3 $$ if (!GroovyDslFileIndex.isActivated(vfile)) [ CD ]
