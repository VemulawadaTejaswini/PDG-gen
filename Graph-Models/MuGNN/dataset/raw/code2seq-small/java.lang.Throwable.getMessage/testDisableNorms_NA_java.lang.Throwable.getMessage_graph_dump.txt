Line_5 $$ DocumentMapper defaultMapper = mapperService.merge("type", new CompressedXContent(mapping), true, false)-->Line_6 $$ ParsedDocument doc = defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject().bytes())[ FD ]
Line_4 $$ MapperService mapperService = indexService.mapperService()-->Line_10 $$ defaultMapper = mapperService.merge("type", new CompressedXContent(updatedMapping), false, false)[ FD ]
Line_2 $$ public void testDisableNorms() throws Exception -->Line_11 $$ doc = defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject().bytes())[ CD ]
Line_6 $$ ParsedDocument doc = defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject().bytes())-->Line_12 $$ fieldType = doc.rootDoc().getField("field").fieldType()[ FD ]
Line_4 $$ MapperService mapperService = indexService.mapperService()-->Line_5 $$ DocumentMapper defaultMapper = mapperService.merge("type", new CompressedXContent(mapping), true, false)[ FD ]
Line_7 $$ IndexableFieldType fieldType = doc.rootDoc().getField("field").fieldType()-->Line_12 $$ fieldType = doc.rootDoc().getField("field").fieldType()[ FD ]
Line_2 $$ public void testDisableNorms() throws Exception -->Line_3 $$ String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "string").endObject().endObject().endObject().endObject().string()[ CD ]
Line_2 $$ public void testDisableNorms() throws Exception -->Line_8 $$ assertEquals(false, fieldType.omitNorms())[ CD ]
Line_2 $$ public void testDisableNorms() throws Exception -->Line_10 $$ defaultMapper = mapperService.merge("type", new CompressedXContent(updatedMapping), false, false)[ CD ]
Line_4 $$ MapperService mapperService = indexService.mapperService()-->Line_16 $$ mapperService.merge("type", new CompressedXContent(updatedMapping), false, false)[ FD ]
Line_9 $$ String updatedMapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "string").startObject("norms").field("enabled", false).endObject().endObject().endObject().endObject().endObject().string()-->Line_14 $$ updatedMapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "string").startObject("norms").field("enabled", true).endObject().endObject().endObject().endObject().endObject().string()[ FD ]
Line_6 $$ ParsedDocument doc = defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject().bytes())-->Line_11 $$ doc = defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject().bytes())[ FD ]
Line_7 $$ IndexableFieldType fieldType = doc.rootDoc().getField("field").fieldType()-->Line_13 $$ assertEquals(true, fieldType.omitNorms())[ FD ]
Line_6 $$ ParsedDocument doc = defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject().bytes())-->Line_7 $$ IndexableFieldType fieldType = doc.rootDoc().getField("field").fieldType()[ FD ]
Line_5 $$ DocumentMapper defaultMapper = mapperService.merge("type", new CompressedXContent(mapping), true, false)-->Line_10 $$ defaultMapper = mapperService.merge("type", new CompressedXContent(updatedMapping), false, false)[ FD ]
Line_11 $$ doc = defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject().bytes())-->Line_12 $$ fieldType = doc.rootDoc().getField("field").fieldType()[ FD ]
Line_2 $$ public void testDisableNorms() throws Exception -->Line_14 $$ updatedMapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "string").startObject("norms").field("enabled", true).endObject().endObject().endObject().endObject().endObject().string()[ CD ]
Line_12 $$ fieldType = doc.rootDoc().getField("field").fieldType()-->Line_13 $$ assertEquals(true, fieldType.omitNorms())[ FD ]
Line_2 $$ public void testDisableNorms() throws Exception -->Line_5 $$ DocumentMapper defaultMapper = mapperService.merge("type", new CompressedXContent(mapping), true, false)[ CD ]
Line_2 $$ public void testDisableNorms() throws Exception -->Line_13 $$ assertEquals(true, fieldType.omitNorms())[ CD ]
Line_5 $$ DocumentMapper defaultMapper = mapperService.merge("type", new CompressedXContent(mapping), true, false)-->Line_11 $$ doc = defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject().bytes())[ FD ]
Line_2 $$ public void testDisableNorms() throws Exception -->Line_7 $$ IndexableFieldType fieldType = doc.rootDoc().getField("field").fieldType()[ CD ]
Line_2 $$ public void testDisableNorms() throws Exception -->Line_12 $$ fieldType = doc.rootDoc().getField("field").fieldType()[ CD ]
Line_2 $$ public void testDisableNorms() throws Exception -->Line_4 $$ MapperService mapperService = indexService.mapperService()[ CD ]
Line_2 $$ public void testDisableNorms() throws Exception -->Line_6 $$ ParsedDocument doc = defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject().bytes())[ CD ]
Line_10 $$ defaultMapper = mapperService.merge("type", new CompressedXContent(updatedMapping), false, false)-->Line_11 $$ doc = defaultMapper.parse("test", "type", "1", XContentFactory.jsonBuilder().startObject().field("field", "1234").endObject().bytes())[ FD ]
Line_7 $$ IndexableFieldType fieldType = doc.rootDoc().getField("field").fieldType()-->Line_8 $$ assertEquals(false, fieldType.omitNorms())[ FD ]
Line_2 $$ public void testDisableNorms() throws Exception -->Line_9 $$ String updatedMapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type", "string").startObject("norms").field("enabled", false).endObject().endObject().endObject().endObject().endObject().string()[ CD ]
