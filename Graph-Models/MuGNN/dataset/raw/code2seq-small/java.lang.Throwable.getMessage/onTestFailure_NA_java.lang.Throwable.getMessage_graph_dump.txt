Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_6 $$ Throwable ex = result.getThrowable()[ FD ]
Line_11 $$ ComparisonFailureData notification-->Line_13 $$ notification = TestNGExpectedPatterns.createExceptionNotification(failureMessage)[ FD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_7 $$ String methodName = getTestMethodNameWithParams(result)[ CD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_3 $$ if (!myParamsMap.containsKey(result)) [ CD ]
Line_6 $$ Throwable ex = result.getThrowable()-->Line_10 $$ final String failureMessage = ex.getMessage()[ FD ]
Line_8 $$ final Map<String, String> attrs = new HashMap<String, String>()-->Line_9 $$ attrs.put("name", methodName)[ FD ]
Line_8 $$ final Map<String, String> attrs = new HashMap<String, String>()-->Line_19 $$ myPrintStream.println(MapSerializerUtil.asString("testFailed", attrs))[ FD ]
Line_10 $$ final String failureMessage = ex.getMessage()-->Line_13 $$ notification = TestNGExpectedPatterns.createExceptionNotification(failureMessage)[ FD ]
Line_3 $$ if (!myParamsMap.containsKey(result)) -->Line_4 $$ onTestStart(result)[ CD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_10 $$ final String failureMessage = ex.getMessage()[ CD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_20 $$ onTestFinished(result)[ CD ]
Line_7 $$ String methodName = getTestMethodNameWithParams(result)-->Line_9 $$ attrs.put("name", methodName)[ FD ]
Line_15 $$ notification = null-->Line_17 $$ ComparisonFailureData.registerSMAttributes(notification, getTrace(ex), failureMessage, attrs, ex)[ FD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_20 $$ onTestFinished(result)[ FD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_11 $$ ComparisonFailureData notification[ CD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_4 $$ onTestStart(result)[ FD ]
Line_6 $$ Throwable ex = result.getThrowable()-->Line_17 $$ ComparisonFailureData.registerSMAttributes(notification, getTrace(ex), failureMessage, attrs, ex)[ FD ]
Line_13 $$ notification = TestNGExpectedPatterns.createExceptionNotification(failureMessage)-->Line_15 $$ notification = null[ FD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_6 $$ Throwable ex = result.getThrowable()[ CD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_17 $$ ComparisonFailureData.registerSMAttributes(notification, getTrace(ex), failureMessage, attrs, ex)[ CD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_8 $$ final Map<String, String> attrs = new HashMap<String, String>()[ CD ]
Line_11 $$ ComparisonFailureData notification-->Line_15 $$ notification = null[ FD ]
Line_8 $$ final Map<String, String> attrs = new HashMap<String, String>()-->Line_17 $$ ComparisonFailureData.registerSMAttributes(notification, getTrace(ex), failureMessage, attrs, ex)[ FD ]
Line_10 $$ final String failureMessage = ex.getMessage()-->Line_17 $$ ComparisonFailureData.registerSMAttributes(notification, getTrace(ex), failureMessage, attrs, ex)[ FD ]
Line_11 $$ ComparisonFailureData notification-->Line_17 $$ ComparisonFailureData.registerSMAttributes(notification, getTrace(ex), failureMessage, attrs, ex)[ FD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_9 $$ attrs.put("name", methodName)[ CD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_7 $$ String methodName = getTestMethodNameWithParams(result)[ FD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_18 $$ myPrintStream.println()[ CD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_19 $$ myPrintStream.println(MapSerializerUtil.asString("testFailed", attrs))[ CD ]
Line_13 $$ notification = TestNGExpectedPatterns.createExceptionNotification(failureMessage)-->Line_17 $$ ComparisonFailureData.registerSMAttributes(notification, getTrace(ex), failureMessage, attrs, ex)[ FD ]
Line_2 $$ public void onTestFailure(ExposedTestResult result) -->Line_3 $$ if (!myParamsMap.containsKey(result)) [ FD ]
