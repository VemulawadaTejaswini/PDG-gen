Line_13 $$ final Manifest manifest = new Manifest(in)-->Line_14 $$ final String attributes = manifest.getMainAttributes().getValue("Require-Bundle")[ FD ]
Line_22 $$ bundle = bundle.substring(0, constraintIndex).trim()-->Line_25 $$ refsToModules.add(bundle)[ FD ]
Line_16 $$ final StringTokenizer tokenizer = new StringTokenizer(attributes, ",")-->Line_17 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_22 $$ bundle = bundle.substring(0, constraintIndex).trim()-->Line_19 $$ if (!bundle.isEmpty()) [ FD ]
Line_2 $$ protected void readRequiredBundles(T rootModel, Set<String> refsToModules) throws ConversionException -->Line_7 $$ if (!manifestFile.exists()) [ CD ]
Line_10 $$ InputStream in = null-->Line_34 $$ if (in != null) [ FD ]
Line_2 $$ protected void readRequiredBundles(T rootModel, Set<String> refsToModules) throws ConversionException -->Line_26 $$ addInvalidModuleEntry(rootModel, false, bundle)[ FD ]
Line_10 $$ InputStream in = null-->Line_36 $$ in.close()[ FD ]
Line_20 $$ final int constraintIndex = bundle.indexOf(';')-->Line_21 $$ if (constraintIndex != -1) [ FD ]
Line_17 $$ while (tokenizer.hasMoreTokens()) -->Line_18 $$ String bundle = tokenizer.nextToken().trim()[ CD ]
Line_18 $$ String bundle = tokenizer.nextToken().trim()-->Line_20 $$ final int constraintIndex = bundle.indexOf(';')[ FD ]
Line_19 $$ if (!bundle.isEmpty()) -->Line_24 $$ if (myModuleNames.contains(bundle)) [ CD ]
Line_10 $$ InputStream in = null-->Line_12 $$ in = new BufferedInputStream(new FileInputStream(manifestFile))[ FD ]
Line_6 $$ final File manifestFile = new File(myRootPath, "META-INF/MANIFEST.MF")-->Line_7 $$ if (!manifestFile.exists()) [ FD ]
Line_3 $$ if (myModuleNames == null) -->Line_4 $$ return[ CD ]
Line_18 $$ String bundle = tokenizer.nextToken().trim()-->Line_24 $$ if (myModuleNames.contains(bundle)) [ FD ]
Line_15 $$ if (!StringUtil.isEmpty(attributes)) -->Line_17 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_19 $$ if (!bundle.isEmpty()) -->Line_20 $$ final int constraintIndex = bundle.indexOf(';')[ CD ]
Line_16 $$ final StringTokenizer tokenizer = new StringTokenizer(attributes, ",")-->Line_18 $$ String bundle = tokenizer.nextToken().trim()[ FD ]
Line_18 $$ String bundle = tokenizer.nextToken().trim()-->Line_19 $$ if (!bundle.isEmpty()) [ FD ]
Line_17 $$ while (tokenizer.hasMoreTokens()) -->Line_19 $$ if (!bundle.isEmpty()) [ CD ]
Line_12 $$ in = new BufferedInputStream(new FileInputStream(manifestFile))-->Line_36 $$ in.close()[ FD ]
Line_2 $$ protected void readRequiredBundles(T rootModel, Set<String> refsToModules) throws ConversionException -->Line_10 $$ InputStream in = null[ CD ]
Line_2 $$ protected void readRequiredBundles(T rootModel, Set<String> refsToModules) throws ConversionException -->Line_25 $$ refsToModules.add(bundle)[ FD ]
Line_18 $$ String bundle = tokenizer.nextToken().trim()-->Line_25 $$ refsToModules.add(bundle)[ FD ]
Line_18 $$ String bundle = tokenizer.nextToken().trim()-->Line_26 $$ addInvalidModuleEntry(rootModel, false, bundle)[ FD ]
Line_14 $$ final String attributes = manifest.getMainAttributes().getValue("Require-Bundle")-->Line_15 $$ if (!StringUtil.isEmpty(attributes)) [ FD ]
Line_20 $$ final int constraintIndex = bundle.indexOf(';')-->Line_22 $$ bundle = bundle.substring(0, constraintIndex).trim()[ FD ]
Line_2 $$ protected void readRequiredBundles(T rootModel, Set<String> refsToModules) throws ConversionException -->Line_6 $$ final File manifestFile = new File(myRootPath, "META-INF/MANIFEST.MF")[ CD ]
Line_22 $$ bundle = bundle.substring(0, constraintIndex).trim()-->Line_20 $$ final int constraintIndex = bundle.indexOf(';')[ FD ]
Line_19 $$ if (!bundle.isEmpty()) -->Line_21 $$ if (constraintIndex != -1) [ CD ]
Line_18 $$ String bundle = tokenizer.nextToken().trim()-->Line_22 $$ bundle = bundle.substring(0, constraintIndex).trim()[ FD ]
Line_24 $$ if (myModuleNames.contains(bundle)) -->Line_26 $$ addInvalidModuleEntry(rootModel, false, bundle)[ CD ]
Line_22 $$ bundle = bundle.substring(0, constraintIndex).trim()-->Line_24 $$ if (myModuleNames.contains(bundle)) [ FD ]
Line_12 $$ in = new BufferedInputStream(new FileInputStream(manifestFile))-->Line_34 $$ if (in != null) [ FD ]
Line_15 $$ if (!StringUtil.isEmpty(attributes)) -->Line_16 $$ final StringTokenizer tokenizer = new StringTokenizer(attributes, ",")[ CD ]
Line_21 $$ if (constraintIndex != -1) -->Line_22 $$ bundle = bundle.substring(0, constraintIndex).trim()[ CD ]
Line_2 $$ protected void readRequiredBundles(T rootModel, Set<String> refsToModules) throws ConversionException -->Line_3 $$ if (myModuleNames == null) [ CD ]
Line_7 $$ if (!manifestFile.exists()) -->Line_8 $$ return[ CD ]
Line_24 $$ if (myModuleNames.contains(bundle)) -->Line_25 $$ refsToModules.add(bundle)[ CD ]
Line_22 $$ bundle = bundle.substring(0, constraintIndex).trim()-->Line_26 $$ addInvalidModuleEntry(rootModel, false, bundle)[ FD ]
