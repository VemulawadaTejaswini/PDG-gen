Line_7 $$ final Class<AttributeConverter> converterClass = cls.classForName(converterClassName)-->Line_8 $$ attributeConverterDescriptor = new AttributeConverterDescriptorNonAutoApplicableImpl(converterClass.newInstance())[ FD ]
Line_3 $$ if (typeName != null && typeName.startsWith(AttributeConverterTypeAdapter.NAME_PREFIX)) -->Line_5 $$ final ClassLoaderService cls = getMetadata().getMetadataBuildingOptions().getServiceRegistry().getService(ClassLoaderService.class)[ CD ]
Line_5 $$ final ClassLoaderService cls = getMetadata().getMetadataBuildingOptions().getServiceRegistry().getService(ClassLoaderService.class)-->Line_7 $$ final Class<AttributeConverter> converterClass = cls.classForName(converterClassName)[ FD ]
Line_2 $$ public void setTypeName(String typeName) -->Line_11 $$ log.logBadHbmAttributeConverterType(typeName, e.getMessage())[ FD ]
Line_2 $$ public void setTypeName(String typeName) -->Line_14 $$ this.typeName = typeName[ FD ]
Line_2 $$ public void setTypeName(String typeName) -->Line_4 $$ final String converterClassName = typeName.substring(AttributeConverterTypeAdapter.NAME_PREFIX.length())[ FD ]
Line_2 $$ public void setTypeName(String typeName) -->Line_3 $$ if (typeName != null && typeName.startsWith(AttributeConverterTypeAdapter.NAME_PREFIX)) [ FD ]
Line_4 $$ final String converterClassName = typeName.substring(AttributeConverterTypeAdapter.NAME_PREFIX.length())-->Line_7 $$ final Class<AttributeConverter> converterClass = cls.classForName(converterClassName)[ FD ]
Line_3 $$ if (typeName != null && typeName.startsWith(AttributeConverterTypeAdapter.NAME_PREFIX)) -->Line_4 $$ final String converterClassName = typeName.substring(AttributeConverterTypeAdapter.NAME_PREFIX.length())[ CD ]
Line_2 $$ public void setTypeName(String typeName) -->Line_14 $$ this.typeName = typeName[ CD ]
Line_2 $$ public void setTypeName(String typeName) -->Line_3 $$ if (typeName != null && typeName.startsWith(AttributeConverterTypeAdapter.NAME_PREFIX)) [ CD ]
