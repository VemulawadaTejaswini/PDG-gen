Line_44 $$ JVMId jvmid = JVMId.forName("jvm_001_002_m_004")-->Line_45 $$ assertNotNull(jvmid)[ FD ]
Line_7 $$ Dispatcher dispatcher = mock(Dispatcher.class)-->Line_9 $$ when(dispatcher.getEventHandler()).thenReturn(ea)[ FD ]
Line_40 $$ result = listener.getTask(context)-->Line_41 $$ assertNotNull(result)[ FD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_40 $$ result = listener.getTask(context)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_26 $$ listener.registerPendingTask(task, wid)[ CD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_27 $$ result = listener.getTask(context)[ FD ]
Line_24 $$ TaskAttemptId attemptID = mock(TaskAttemptId.class)-->Line_31 $$ listener.registerLaunchedTask(attemptID, wid)[ FD ]
Line_27 $$ result = listener.getTask(context)-->Line_37 $$ assertNotNull(result)[ FD ]
Line_3 $$ AppContext appCtx = mock(AppContext.class)-->Line_10 $$ when(appCtx.getEventHandler()).thenReturn(ea)[ FD ]
Line_18 $$ WrappedJvmID wid = new WrappedJvmID(id.getJobId(), id.isMap, id.getId())-->Line_30 $$ listener.registerPendingTask(task, wid)[ FD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_39 $$ listener.unregister(attemptID, wid)[ FD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_43 $$ listener.stop()[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_30 $$ listener.registerPendingTask(task, wid)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_12 $$ policy.init(appCtx)[ CD ]
Line_8 $$ EventHandler ea = mock(EventHandler.class)-->Line_10 $$ when(appCtx.getEventHandler()).thenReturn(ea)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_28 $$ assertNull(result)[ CD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_30 $$ listener.registerPendingTask(task, wid)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_31 $$ listener.registerLaunchedTask(attemptID, wid)[ CD ]
Line_27 $$ result = listener.getTask(context)-->Line_41 $$ assertNotNull(result)[ FD ]
Line_11 $$ CheckpointAMPreemptionPolicy policy = new CheckpointAMPreemptionPolicy()-->Line_12 $$ policy.init(appCtx)[ FD ]
Line_21 $$ JvmTask result = listener.getTask(context)-->Line_28 $$ assertNull(result)[ FD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_31 $$ listener.registerLaunchedTask(attemptID, wid)[ FD ]
Line_19 $$ JvmContext context = new JvmContext()-->Line_36 $$ result = listener.getTask(context)[ FD ]
Line_21 $$ JvmTask result = listener.getTask(context)-->Line_27 $$ result = listener.getTask(context)[ FD ]
Line_33 $$ result = listener.getTask(context)-->Line_37 $$ assertNotNull(result)[ FD ]
Line_21 $$ JvmTask result = listener.getTask(context)-->Line_33 $$ result = listener.getTask(context)[ FD ]
Line_36 $$ result = listener.getTask(context)-->Line_41 $$ assertNotNull(result)[ FD ]
Line_21 $$ JvmTask result = listener.getTask(context)-->Line_41 $$ assertNotNull(result)[ FD ]
Line_8 $$ EventHandler ea = mock(EventHandler.class)-->Line_9 $$ when(dispatcher.getEventHandler()).thenReturn(ea)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_41 $$ assertNotNull(result)[ CD ]
Line_33 $$ result = listener.getTask(context)-->Line_41 $$ assertNotNull(result)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_9 $$ when(dispatcher.getEventHandler()).thenReturn(ea)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_34 $$ assertNotNull(result)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_37 $$ assertNotNull(result)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_6 $$ TaskHeartbeatHandler hbHandler = mock(TaskHeartbeatHandler.class)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_15 $$ listener.init(conf)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_22 $$ assertNotNull(result)[ CD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_33 $$ result = listener.getTask(context)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_45 $$ assertNotNull(jvmid)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_43 $$ listener.stop()[ CD ]
Line_3 $$ AppContext appCtx = mock(AppContext.class)-->Line_12 $$ policy.init(appCtx)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_24 $$ TaskAttemptId attemptID = mock(TaskAttemptId.class)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_42 $$ assertTrue(result.shouldDie)[ CD ]
Line_33 $$ result = listener.getTask(context)-->Line_40 $$ result = listener.getTask(context)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_16 $$ listener.start()[ CD ]
Line_21 $$ JvmTask result = listener.getTask(context)-->Line_22 $$ assertNotNull(result)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_21 $$ JvmTask result = listener.getTask(context)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_10 $$ when(appCtx.getEventHandler()).thenReturn(ea)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_4 $$ JobTokenSecretManager secret = mock(JobTokenSecretManager.class)[ CD ]
Line_27 $$ result = listener.getTask(context)-->Line_36 $$ result = listener.getTask(context)[ FD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_36 $$ result = listener.getTask(context)[ FD ]
Line_6 $$ TaskHeartbeatHandler hbHandler = mock(TaskHeartbeatHandler.class)-->Line_32 $$ verify(hbHandler).register(attemptID)[ FD ]
Line_36 $$ result = listener.getTask(context)-->Line_40 $$ result = listener.getTask(context)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_8 $$ EventHandler ea = mock(EventHandler.class)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_27 $$ result = listener.getTask(context)[ CD ]
Line_27 $$ result = listener.getTask(context)-->Line_33 $$ result = listener.getTask(context)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_5 $$ RMHeartbeatHandler rmHeartbeatHandler = mock(RMHeartbeatHandler.class)[ CD ]
Line_18 $$ WrappedJvmID wid = new WrappedJvmID(id.getJobId(), id.isMap, id.getId())-->Line_31 $$ listener.registerLaunchedTask(attemptID, wid)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_36 $$ result = listener.getTask(context)[ CD ]
Line_19 $$ JvmContext context = new JvmContext()-->Line_40 $$ result = listener.getTask(context)[ FD ]
Line_27 $$ result = listener.getTask(context)-->Line_34 $$ assertNotNull(result)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_35 $$ assertFalse(result.shouldDie)[ CD ]
Line_25 $$ Task task = mock(Task.class)-->Line_26 $$ listener.registerPendingTask(task, wid)[ FD ]
Line_25 $$ Task task = mock(Task.class)-->Line_30 $$ listener.registerPendingTask(task, wid)[ FD ]
Line_24 $$ TaskAttemptId attemptID = mock(TaskAttemptId.class)-->Line_39 $$ listener.unregister(attemptID, wid)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_44 $$ JVMId jvmid = JVMId.forName("jvm_001_002_m_004")[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_19 $$ JvmContext context = new JvmContext()[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_3 $$ AppContext appCtx = mock(AppContext.class)[ CD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_16 $$ listener.start()[ FD ]
Line_21 $$ JvmTask result = listener.getTask(context)-->Line_34 $$ assertNotNull(result)[ FD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_21 $$ JvmTask result = listener.getTask(context)[ FD ]
Line_24 $$ TaskAttemptId attemptID = mock(TaskAttemptId.class)-->Line_32 $$ verify(hbHandler).register(attemptID)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_40 $$ result = listener.getTask(context)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_33 $$ result = listener.getTask(context)[ CD ]
Line_19 $$ JvmContext context = new JvmContext()-->Line_21 $$ JvmTask result = listener.getTask(context)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_38 $$ assertTrue(result.shouldDie)[ CD ]
Line_14 $$ Configuration conf = new Configuration()-->Line_15 $$ listener.init(conf)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_14 $$ Configuration conf = new Configuration()[ CD ]
Line_18 $$ WrappedJvmID wid = new WrappedJvmID(id.getJobId(), id.isMap, id.getId())-->Line_39 $$ listener.unregister(attemptID, wid)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_18 $$ WrappedJvmID wid = new WrappedJvmID(id.getJobId(), id.isMap, id.getId())[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_20 $$ context.jvmId = id[ CD ]
Line_18 $$ WrappedJvmID wid = new WrappedJvmID(id.getJobId(), id.isMap, id.getId())-->Line_29 $$ listener.unregister(attemptID, wid)[ FD ]
Line_17 $$ JVMId id = new JVMId("foo", 1, true, 1)-->Line_18 $$ WrappedJvmID wid = new WrappedJvmID(id.getJobId(), id.isMap, id.getId())[ FD ]
Line_24 $$ TaskAttemptId attemptID = mock(TaskAttemptId.class)-->Line_29 $$ listener.unregister(attemptID, wid)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_17 $$ JVMId id = new JVMId("foo", 1, true, 1)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_23 $$ assertTrue(result.shouldDie)[ CD ]
Line_27 $$ result = listener.getTask(context)-->Line_40 $$ result = listener.getTask(context)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_29 $$ listener.unregister(attemptID, wid)[ CD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_25 $$ Task task = mock(Task.class)[ CD ]
Line_21 $$ JvmTask result = listener.getTask(context)-->Line_37 $$ assertNotNull(result)[ FD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_15 $$ listener.init(conf)[ FD ]
Line_27 $$ result = listener.getTask(context)-->Line_28 $$ assertNull(result)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_39 $$ listener.unregister(attemptID, wid)[ CD ]
Line_17 $$ JVMId id = new JVMId("foo", 1, true, 1)-->Line_20 $$ context.jvmId = id[ FD ]
Line_19 $$ JvmContext context = new JvmContext()-->Line_27 $$ result = listener.getTask(context)[ FD ]
Line_33 $$ result = listener.getTask(context)-->Line_34 $$ assertNotNull(result)[ FD ]
Line_19 $$ JvmContext context = new JvmContext()-->Line_33 $$ result = listener.getTask(context)[ FD ]
Line_36 $$ result = listener.getTask(context)-->Line_37 $$ assertNotNull(result)[ FD ]
Line_21 $$ JvmTask result = listener.getTask(context)-->Line_40 $$ result = listener.getTask(context)[ FD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_26 $$ listener.registerPendingTask(task, wid)[ FD ]
Line_33 $$ result = listener.getTask(context)-->Line_36 $$ result = listener.getTask(context)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_11 $$ CheckpointAMPreemptionPolicy policy = new CheckpointAMPreemptionPolicy()[ CD ]
Line_18 $$ WrappedJvmID wid = new WrappedJvmID(id.getJobId(), id.isMap, id.getId())-->Line_26 $$ listener.registerPendingTask(task, wid)[ FD ]
Line_21 $$ JvmTask result = listener.getTask(context)-->Line_36 $$ result = listener.getTask(context)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_32 $$ verify(hbHandler).register(attemptID)[ CD ]
Line_13 $$ MockTaskAttemptListenerImpl listener = new MockTaskAttemptListenerImpl(appCtx, secret, rmHeartbeatHandler, hbHandler, policy)-->Line_29 $$ listener.unregister(attemptID, wid)[ FD ]
Line_2 $$ public void testGetTask() throws IOException -->Line_7 $$ Dispatcher dispatcher = mock(Dispatcher.class)[ CD ]
