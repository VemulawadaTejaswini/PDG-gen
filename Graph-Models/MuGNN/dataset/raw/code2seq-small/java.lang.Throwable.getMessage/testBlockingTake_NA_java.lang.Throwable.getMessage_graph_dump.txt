Line_2 $$ public void testBlockingTake() throws InterruptedException -->Line_15 $$ Assert.assertEquals("test1", coalescedPipe.take())[ CD ]
Line_4 $$ ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1)-->Line_17 $$ scheduledExecutorService.shutdownNow()[ FD ]
Line_3 $$ final CoalescedPipe<String> coalescedPipe = new CoalescedPipe()-->Line_15 $$ Assert.assertEquals("test1", coalescedPipe.take())[ FD ]
Line_2 $$ public void testBlockingTake() throws InterruptedException -->Line_14 $$ long startTime = System.currentTimeMillis()[ CD ]
Line_2 $$ public void testBlockingTake() throws InterruptedException -->Line_4 $$ ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1)[ CD ]
Line_2 $$ public void testBlockingTake() throws InterruptedException -->Line_3 $$ final CoalescedPipe<String> coalescedPipe = new CoalescedPipe()[ CD ]
Line_3 $$ final CoalescedPipe<String> coalescedPipe = new CoalescedPipe()-->Line_8 $$ coalescedPipe.put("test1")[ FD ]
Line_2 $$ public void testBlockingTake() throws InterruptedException -->Line_5 $$ scheduledExecutorService.schedule(new Runnable() [ CD ]
Line_2 $$ public void testBlockingTake() throws InterruptedException -->Line_16 $$ Assert.assertTrue((System.currentTimeMillis() - startTime) > 250L)[ CD ]
Line_4 $$ ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1)-->Line_5 $$ scheduledExecutorService.schedule(new Runnable() [ FD ]
Line_2 $$ public void testBlockingTake() throws InterruptedException -->Line_18 $$ scheduledExecutorService.awaitTermination(120, TimeUnit.SECONDS)[ CD ]
Line_4 $$ ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1)-->Line_18 $$ scheduledExecutorService.awaitTermination(120, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testBlockingTake() throws InterruptedException -->Line_17 $$ scheduledExecutorService.shutdownNow()[ CD ]
