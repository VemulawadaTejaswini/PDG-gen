Line_18 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_38 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_18 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_43 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_12 $$ ClassLoader classLoader = new URLClassLoader(new URL[0], null)-->Line_47 $$ IntrabandProxyUtil.toClass(classNode, classLoader)[ FD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_23 $$ sb.append(StringPool.SLASH)[ CD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_26 $$ sb.append(classNode.name)[ CD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_22 $$ sb.append(SystemProperties.get(SystemProperties.TMP_DIR))[ CD ]
Line_36 $$ if (logEnabled) -->Line_39 $$ Assert.assertEquals(logRecord.getMessage(), "Dumpped class ".concat(filePath))[ CD ]
Line_6 $$ MethodNode methodNode = new MethodNode(Opcodes.ACC_PUBLIC, "<clinit>", "()V", null, null)-->Line_9 $$ methodNode.visitEnd()[ FD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_32 $$ MethodNode clinitMethodNode = ASMUtil.findMethodNode(reloadedClassNode.methods, "<clinit>", Type.VOID_TYPE)[ CD ]
Line_2 $$ private void _doTestToClass(boolean proxyClassesDumpEnabled, boolean logEnabled) throws FileNotFoundException -->Line_6 $$ MethodNode methodNode = new MethodNode(Opcodes.ACC_PUBLIC, "<clinit>", "()V", null, null)[ CD ]
Line_6 $$ MethodNode methodNode = new MethodNode(Opcodes.ACC_PUBLIC, "<clinit>", "()V", null, null)-->Line_8 $$ methodNode.visitInsn(Opcodes.RETURN)[ FD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_27 $$ sb.append(".class")[ CD ]
Line_21 $$ StringBundler sb = new StringBundler(6)-->Line_28 $$ String filePath = sb.toString()[ FD ]
Line_50 $$ Throwable throwable = re.getCause()-->Line_52 $$ throwable = throwable.getCause()[ FD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_25 $$ sb.append(StringPool.SLASH)[ CD ]
Line_2 $$ private void _doTestToClass(boolean proxyClassesDumpEnabled, boolean logEnabled) throws FileNotFoundException -->Line_13 $$ Level level = Level.WARNING[ CD ]
Line_21 $$ StringBundler sb = new StringBundler(6)-->Line_23 $$ sb.append(StringPool.SLASH)[ FD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_36 $$ if (logEnabled) [ CD ]
Line_38 $$ LogRecord logRecord = logRecords.get(0)-->Line_39 $$ Assert.assertEquals(logRecord.getMessage(), "Dumpped class ".concat(filePath))[ FD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_31 $$ ClassNode reloadedClassNode = _loadClass(new FileInputStream(classFile))[ CD ]
Line_28 $$ String filePath = sb.toString()-->Line_39 $$ Assert.assertEquals(logRecord.getMessage(), "Dumpped class ".concat(filePath))[ FD ]
Line_21 $$ StringBundler sb = new StringBundler(6)-->Line_27 $$ sb.append(".class")[ FD ]
Line_2 $$ private void _doTestToClass(boolean proxyClassesDumpEnabled, boolean logEnabled) throws FileNotFoundException -->Line_8 $$ methodNode.visitInsn(Opcodes.RETURN)[ CD ]
Line_10 $$ List<MethodNode> methodNodes = classNode.methods-->Line_11 $$ methodNodes.add(methodNode)[ FD ]
Line_18 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_37 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_54 $$ String message = throwable.getMessage()-->Line_55 $$ Assert.assertTrue(message.contains("duplicate class definition for name: \"" + Type.getInternalName(TestClass.class) + "\""))[ FD ]
Line_6 $$ MethodNode methodNode = new MethodNode(Opcodes.ACC_PUBLIC, "<clinit>", "()V", null, null)-->Line_7 $$ methodNode.visitCode()[ FD ]
Line_33 $$ InsnList insnList = clinitMethodNode.instructions-->Line_34 $$ Assert.assertEquals(1, insnList.size())[ FD ]
Line_36 $$ if (logEnabled) -->Line_38 $$ LogRecord logRecord = logRecords.get(0)[ CD ]
Line_6 $$ MethodNode methodNode = new MethodNode(Opcodes.ACC_PUBLIC, "<clinit>", "()V", null, null)-->Line_11 $$ methodNodes.add(methodNode)[ FD ]
Line_17 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(IntrabandProxyUtil.class.getName(), level)) -->Line_18 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_24 $$ sb.append(PropsValues.INTRABAND_PROXY_DUMP_CLASSES_DIR)[ CD ]
Line_36 $$ if (logEnabled) -->Line_37 $$ Assert.assertEquals(1, logRecords.size())[ CD ]
Line_21 $$ StringBundler sb = new StringBundler(6)-->Line_26 $$ sb.append(classNode.name)[ FD ]
Line_50 $$ Throwable throwable = re.getCause()-->Line_51 $$ Assert.assertSame(InvocationTargetException.class, throwable.getClass())[ FD ]
Line_2 $$ private void _doTestToClass(boolean proxyClassesDumpEnabled, boolean logEnabled) throws FileNotFoundException -->Line_7 $$ methodNode.visitCode()[ CD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_28 $$ String filePath = sb.toString()[ CD ]
Line_52 $$ throwable = throwable.getCause()-->Line_54 $$ String message = throwable.getMessage()[ FD ]
Line_2 $$ private void _doTestToClass(boolean proxyClassesDumpEnabled, boolean logEnabled) throws FileNotFoundException -->Line_42 $$ if (!proxyClassesDumpEnabled || !logEnabled) [ FD ]
Line_21 $$ StringBundler sb = new StringBundler(6)-->Line_22 $$ sb.append(SystemProperties.get(SystemProperties.TMP_DIR))[ FD ]
Line_13 $$ Level level = Level.WARNING-->Line_15 $$ level = Level.INFO[ FD ]
Line_14 $$ if (logEnabled) -->Line_15 $$ level = Level.INFO[ CD ]
Line_13 $$ Level level = Level.WARNING-->Line_17 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(IntrabandProxyUtil.class.getName(), level)) [ FD ]
Line_33 $$ InsnList insnList = clinitMethodNode.instructions-->Line_35 $$ _assertInsnNode(insnList.getFirst(), Opcodes.RETURN)[ FD ]
Line_15 $$ level = Level.INFO-->Line_17 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(IntrabandProxyUtil.class.getName(), level)) [ FD ]
Line_42 $$ if (!proxyClassesDumpEnabled || !logEnabled) -->Line_43 $$ Assert.assertTrue(logRecords.isEmpty())[ CD ]
Line_29 $$ File classFile = new File(filePath)-->Line_30 $$ Assert.assertTrue(classFile.exists())[ FD ]
Line_2 $$ private void _doTestToClass(boolean proxyClassesDumpEnabled, boolean logEnabled) throws FileNotFoundException -->Line_12 $$ ClassLoader classLoader = new URLClassLoader(new URL[0], null)[ CD ]
Line_50 $$ Throwable throwable = re.getCause()-->Line_54 $$ String message = throwable.getMessage()[ FD ]
Line_5 $$ ClassNode classNode = _loadClass(TestClass.class)-->Line_19 $$ IntrabandProxyUtil.toClass(classNode, classLoader)[ FD ]
Line_2 $$ private void _doTestToClass(boolean proxyClassesDumpEnabled, boolean logEnabled) throws FileNotFoundException -->Line_10 $$ List<MethodNode> methodNodes = classNode.methods[ CD ]
Line_12 $$ ClassLoader classLoader = new URLClassLoader(new URL[0], null)-->Line_19 $$ IntrabandProxyUtil.toClass(classNode, classLoader)[ FD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_21 $$ StringBundler sb = new StringBundler(6)[ CD ]
Line_2 $$ private void _doTestToClass(boolean proxyClassesDumpEnabled, boolean logEnabled) throws FileNotFoundException -->Line_9 $$ methodNode.visitEnd()[ CD ]
Line_52 $$ throwable = throwable.getCause()-->Line_53 $$ Assert.assertSame(LinkageError.class, throwable.getClass())[ FD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_30 $$ Assert.assertTrue(classFile.exists())[ CD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_35 $$ _assertInsnNode(insnList.getFirst(), Opcodes.RETURN)[ CD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_33 $$ InsnList insnList = clinitMethodNode.instructions[ CD ]
Line_2 $$ private void _doTestToClass(boolean proxyClassesDumpEnabled, boolean logEnabled) throws FileNotFoundException -->Line_14 $$ if (logEnabled) [ CD ]
Line_21 $$ StringBundler sb = new StringBundler(6)-->Line_25 $$ sb.append(StringPool.SLASH)[ FD ]
Line_21 $$ StringBundler sb = new StringBundler(6)-->Line_24 $$ sb.append(PropsValues.INTRABAND_PROXY_DUMP_CLASSES_DIR)[ FD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_29 $$ File classFile = new File(filePath)[ CD ]
Line_5 $$ ClassNode classNode = _loadClass(TestClass.class)-->Line_47 $$ IntrabandProxyUtil.toClass(classNode, classLoader)[ FD ]
Line_20 $$ if (proxyClassesDumpEnabled) -->Line_34 $$ Assert.assertEquals(1, insnList.size())[ CD ]
Line_2 $$ private void _doTestToClass(boolean proxyClassesDumpEnabled, boolean logEnabled) throws FileNotFoundException -->Line_11 $$ methodNodes.add(methodNode)[ CD ]
Line_50 $$ Throwable throwable = re.getCause()-->Line_53 $$ Assert.assertSame(LinkageError.class, throwable.getClass())[ FD ]
Line_2 $$ private void _doTestToClass(boolean proxyClassesDumpEnabled, boolean logEnabled) throws FileNotFoundException -->Line_5 $$ ClassNode classNode = _loadClass(TestClass.class)[ CD ]
