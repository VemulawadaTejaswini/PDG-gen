Line_10 $$ Set<File> affectedFiles = new HashSet<File>()-->Line_12 $$ affectedFiles.addAll(runner.getAffectedFiles())[ FD ]
Line_10 $$ Set<File> affectedFiles = new HashSet<File>()-->Line_14 $$ final List<File> readOnlyFiles = ConversionRunner.getReadOnlyFiles(affectedFiles)[ FD ]
Line_10 $$ Set<File> affectedFiles = new HashSet<File>()-->Line_19 $$ final File backupDir = ProjectConversionUtil.backupFiles(affectedFiles, context.getProjectBaseDir())[ FD ]
Line_11 $$ for (ConversionRunner runner : runners) -->Line_26 $$ usedRunners.add(runner)[ FD ]
Line_22 $$ if (runner.isConversionNeeded()) -->Line_25 $$ runner.postProcess()[ CD ]
Line_2 $$ public ConversionResult convertSilently(@NotNull String projectPath, @NotNull ConversionListener listener) -->Line_7 $$ listener.conversionNeeded()[ FD ]
Line_8 $$ ConversionContextImpl context = new ConversionContextImpl(projectPath)-->Line_31 $$ saveConversionResult(context)[ FD ]
Line_8 $$ ConversionContextImpl context = new ConversionContextImpl(projectPath)-->Line_19 $$ final File backupDir = ProjectConversionUtil.backupFiles(affectedFiles, context.getProjectBaseDir())[ FD ]
Line_11 $$ for (ConversionRunner runner : runners) -->Line_12 $$ affectedFiles.addAll(runner.getAffectedFiles())[ FD ]
Line_2 $$ public ConversionResult convertSilently(@NotNull String projectPath, @NotNull ConversionListener listener) -->Line_4 $$ if (!isConversionNeeded(projectPath)) [ FD ]
Line_20 $$ List<ConversionRunner> usedRunners = new ArrayList<ConversionRunner>()-->Line_26 $$ usedRunners.add(runner)[ FD ]
Line_10 $$ Set<File> affectedFiles = new HashSet<File>()-->Line_29 $$ context.saveFiles(affectedFiles, usedRunners)[ FD ]
Line_2 $$ public ConversionResult convertSilently(@NotNull String projectPath, @NotNull ConversionListener listener) -->Line_38 $$ return ConversionResultImpl.ERROR_OCCURRED[ CD ]
Line_14 $$ final List<File> readOnlyFiles = ConversionRunner.getReadOnlyFiles(affectedFiles)-->Line_15 $$ if (!readOnlyFiles.isEmpty()) [ FD ]
Line_4 $$ if (!isConversionNeeded(projectPath)) -->Line_5 $$ return ConversionResultImpl.CONVERSION_NOT_NEEDED[ CD ]
Line_8 $$ ConversionContextImpl context = new ConversionContextImpl(projectPath)-->Line_9 $$ final List<ConversionRunner> runners = getConversionRunners(context)[ FD ]
Line_22 $$ if (runner.isConversionNeeded()) -->Line_24 $$ runner.process()[ CD ]
Line_22 $$ if (runner.isConversionNeeded()) -->Line_26 $$ usedRunners.add(runner)[ CD ]
Line_11 $$ for (ConversionRunner runner : runners) -->Line_24 $$ runner.process()[ FD ]
Line_11 $$ for (ConversionRunner runner : runners) -->Line_25 $$ runner.postProcess()[ FD ]
Line_2 $$ public ConversionResult convertSilently(@NotNull String projectPath, @NotNull ConversionListener listener) -->Line_34 $$ listener.error(e.getMessage())[ FD ]
Line_20 $$ List<ConversionRunner> usedRunners = new ArrayList<ConversionRunner>()-->Line_29 $$ context.saveFiles(affectedFiles, usedRunners)[ FD ]
Line_15 $$ if (!readOnlyFiles.isEmpty()) -->Line_16 $$ listener.cannotWriteToFiles(readOnlyFiles)[ CD ]
Line_2 $$ public ConversionResult convertSilently(@NotNull String projectPath, @NotNull ConversionListener listener) -->Line_36 $$ listener.error(e.getMessage())[ FD ]
Line_15 $$ if (!readOnlyFiles.isEmpty()) -->Line_17 $$ return ConversionResultImpl.ERROR_OCCURRED[ CD ]
Line_11 $$ for (ConversionRunner runner : runners) -->Line_22 $$ if (runner.isConversionNeeded()) [ FD ]
Line_19 $$ final File backupDir = ProjectConversionUtil.backupFiles(affectedFiles, context.getProjectBaseDir())-->Line_30 $$ listener.successfullyConverted(backupDir)[ FD ]
Line_2 $$ public ConversionResult convertSilently(@NotNull String projectPath, @NotNull ConversionListener listener) -->Line_16 $$ listener.cannotWriteToFiles(readOnlyFiles)[ FD ]
Line_22 $$ if (runner.isConversionNeeded()) -->Line_23 $$ runner.preProcess()[ CD ]
Line_14 $$ final List<File> readOnlyFiles = ConversionRunner.getReadOnlyFiles(affectedFiles)-->Line_16 $$ listener.cannotWriteToFiles(readOnlyFiles)[ FD ]
Line_2 $$ public ConversionResult convertSilently(@NotNull String projectPath, @NotNull ConversionListener listener) -->Line_30 $$ listener.successfullyConverted(backupDir)[ FD ]
Line_8 $$ ConversionContextImpl context = new ConversionContextImpl(projectPath)-->Line_29 $$ context.saveFiles(affectedFiles, usedRunners)[ FD ]
Line_11 $$ for (ConversionRunner runner : runners) -->Line_23 $$ runner.preProcess()[ FD ]
