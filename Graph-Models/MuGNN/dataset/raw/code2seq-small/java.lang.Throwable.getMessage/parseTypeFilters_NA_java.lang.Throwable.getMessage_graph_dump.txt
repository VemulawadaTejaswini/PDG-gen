Line_5 $$ for (int i = 0; i < nodeList.getLength(); i++) -->Line_7 $$ if (node.getNodeType() == Node.ELEMENT_NODE) [ CD ]
Line_2 $$ protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) -->Line_3 $$ ClassLoader classLoader = scanner.getResourceLoader().getClassLoader()[ CD ]
Line_2 $$ protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) -->Line_11 $$ TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext)[ FD ]
Line_11 $$ TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext)-->Line_12 $$ scanner.addIncludeFilter(typeFilter)[ FD ]
Line_2 $$ protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) -->Line_12 $$ scanner.addIncludeFilter(typeFilter)[ FD ]
Line_7 $$ if (node.getNodeType() == Node.ELEMENT_NODE) -->Line_8 $$ String localName = parserContext.getDelegate().getLocalName(node)[ CD ]
Line_2 $$ protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) -->Line_14 $$ TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext)[ FD ]
Line_2 $$ protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) -->Line_5 $$ for (int i = 0; i < nodeList.getLength(); i++) [ CD ]
Line_8 $$ String localName = parserContext.getDelegate().getLocalName(node)-->Line_10 $$ if (INCLUDE_FILTER_ELEMENT.equals(localName)) [ FD ]
Line_10 $$ if (INCLUDE_FILTER_ELEMENT.equals(localName)) -->Line_11 $$ TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext)[ CD ]
Line_8 $$ String localName = parserContext.getDelegate().getLocalName(node)-->Line_13 $$ if (EXCLUDE_FILTER_ELEMENT.equals(localName)) [ FD ]
Line_6 $$ Node node = nodeList.item(i)-->Line_7 $$ if (node.getNodeType() == Node.ELEMENT_NODE) [ FD ]
Line_4 $$ NodeList nodeList = element.getChildNodes()-->Line_5 $$ for (int i = 0; i < nodeList.getLength(); i++) [ FD ]
Line_2 $$ protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) -->Line_4 $$ NodeList nodeList = element.getChildNodes()[ FD ]
Line_2 $$ protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) -->Line_3 $$ ClassLoader classLoader = scanner.getResourceLoader().getClassLoader()[ FD ]
Line_5 $$ for (int i = 0; i < nodeList.getLength(); i++) -->Line_6 $$ Node node = nodeList.item(i)[ FD ]
Line_2 $$ protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) -->Line_4 $$ NodeList nodeList = element.getChildNodes()[ CD ]
Line_4 $$ NodeList nodeList = element.getChildNodes()-->Line_6 $$ Node node = nodeList.item(i)[ FD ]
Line_2 $$ protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) -->Line_18 $$ parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause())[ FD ]
Line_5 $$ for (int i = 0; i < nodeList.getLength(); i++) -->Line_6 $$ Node node = nodeList.item(i)[ CD ]
Line_2 $$ protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) -->Line_15 $$ scanner.addExcludeFilter(typeFilter)[ FD ]
Line_13 $$ if (EXCLUDE_FILTER_ELEMENT.equals(localName)) -->Line_14 $$ TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext)[ CD ]
Line_2 $$ protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) -->Line_8 $$ String localName = parserContext.getDelegate().getLocalName(node)[ FD ]
Line_10 $$ if (INCLUDE_FILTER_ELEMENT.equals(localName)) -->Line_13 $$ if (EXCLUDE_FILTER_ELEMENT.equals(localName)) [ CD ]
Line_10 $$ if (INCLUDE_FILTER_ELEMENT.equals(localName)) -->Line_12 $$ scanner.addIncludeFilter(typeFilter)[ CD ]
Line_3 $$ ClassLoader classLoader = scanner.getResourceLoader().getClassLoader()-->Line_11 $$ TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext)[ FD ]
Line_13 $$ if (EXCLUDE_FILTER_ELEMENT.equals(localName)) -->Line_15 $$ scanner.addExcludeFilter(typeFilter)[ CD ]
Line_11 $$ TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext)-->Line_15 $$ scanner.addExcludeFilter(typeFilter)[ FD ]
Line_3 $$ ClassLoader classLoader = scanner.getResourceLoader().getClassLoader()-->Line_14 $$ TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext)[ FD ]
Line_6 $$ Node node = nodeList.item(i)-->Line_8 $$ String localName = parserContext.getDelegate().getLocalName(node)[ FD ]
