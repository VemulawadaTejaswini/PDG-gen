Line_17 $$ final CloseableHttpResponse response = ourClient.execute(request)-->Line_20 $$ final StatusLine line = response.getStatusLine()[ FD ]
Line_18 $$ final HttpEntity responseEntity = response.getEntity()-->Line_19 $$ final String responseString = responseEntity != null ? EntityUtils.toString(responseEntity) : ""[ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_22 $$ if (!relogin) [ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_9 $$ final AuthorWrapper user = getCurrentUser()[ CD ]
Line_4 $$ final HttpPost request = new HttpPost(stepicApiUrl + "courses")-->Line_17 $$ final CloseableHttpResponse response = ourClient.execute(request)[ FD ]
Line_31 $$ int position = 1-->Line_35 $$ postUnit(lessonId, position, sectionId)[ FD ]
Line_34 $$ final int lessonId = postLesson(project, lesson, indicator)-->Line_35 $$ postUnit(lessonId, position, sectionId)[ FD ]
Line_17 $$ final CloseableHttpResponse response = ourClient.execute(request)-->Line_18 $$ final HttpEntity responseEntity = response.getEntity()[ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_32 $$ for (Lesson lesson : course.getLessons()) [ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_10 $$ if (user != null) [ CD ]
Line_30 $$ final int sectionId = postModule(postedCourse.id, 1, String.valueOf(postedCourse.getName()))-->Line_35 $$ postUnit(lessonId, position, sectionId)[ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_4 $$ final HttpPost request = new HttpPost(stepicApiUrl + "courses")[ CD ]
Line_19 $$ final String responseString = responseEntity != null ? EntityUtils.toString(responseEntity) : ""-->Line_29 $$ final CourseInfo postedCourse = new Gson().fromJson(responseString, CoursesContainer.class).courses.get(0)[ FD ]
Line_38 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_40 $$ postAdditionalFiles(project, postedCourse.id, indicator)[ CD ]
Line_21 $$ if (line.getStatusCode() != HttpStatus.SC_CREATED) -->Line_27 $$ return[ CD ]
Line_4 $$ final HttpPost request = new HttpPost(stepicApiUrl + "courses")-->Line_15 $$ request.setEntity(new StringEntity(requestBody, ContentType.APPLICATION_JSON))[ FD ]
Line_5 $$ if (ourClient == null || !relogin) -->Line_6 $$ if (!login())[ CD ]
Line_31 $$ int position = 1-->Line_36 $$ position += 1[ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_11 $$ course.setAuthors(user.users)[ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_3 $$ indicator.setText("Uploading course to " + stepicUrl)[ CD ]
Line_10 $$ if (user != null) -->Line_11 $$ course.setAuthors(user.users)[ CD ]
Line_21 $$ if (line.getStatusCode() != HttpStatus.SC_CREATED) -->Line_26 $$ LOG.error("Failed to push " + responseString)[ CD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_5 $$ if (ourClient == null || !relogin) [ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_24 $$ postCourse(project, course, true, indicator)[ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_33 $$ indicator.checkCanceled()[ FD ]
Line_22 $$ if (!relogin) -->Line_23 $$ login()[ CD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_3 $$ indicator.setText("Uploading course to " + stepicUrl)[ FD ]
Line_4 $$ final HttpPost request = new HttpPost(stepicApiUrl + "courses")-->Line_13 $$ setHeaders(request, "application/json")[ FD ]
Line_29 $$ final CourseInfo postedCourse = new Gson().fromJson(responseString, CoursesContainer.class).courses.get(0)-->Line_30 $$ final int sectionId = postModule(postedCourse.id, 1, String.valueOf(postedCourse.getName()))[ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_15 $$ request.setEntity(new StringEntity(requestBody, ContentType.APPLICATION_JSON))[ CD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_5 $$ if (ourClient == null || !relogin) [ CD ]
Line_22 $$ if (!relogin) -->Line_24 $$ postCourse(project, course, true, indicator)[ CD ]
Line_6 $$ if (!login())-->Line_7 $$ return[ CD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_40 $$ postAdditionalFiles(project, postedCourse.id, indicator)[ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_34 $$ final int lessonId = postLesson(project, lesson, indicator)[ FD ]
Line_9 $$ final AuthorWrapper user = getCurrentUser()-->Line_10 $$ if (user != null) [ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_13 $$ setHeaders(request, "application/json")[ CD ]
Line_21 $$ if (line.getStatusCode() != HttpStatus.SC_CREATED) -->Line_22 $$ if (!relogin) [ CD ]
Line_32 $$ for (Lesson lesson : course.getLessons()) -->Line_34 $$ final int lessonId = postLesson(project, lesson, indicator)[ FD ]
Line_20 $$ final StatusLine line = response.getStatusLine()-->Line_21 $$ if (line.getStatusCode() != HttpStatus.SC_CREATED) [ FD ]
Line_2 $$ private static void postCourse(final Project project, @NotNull Course course, boolean relogin, @NotNull final ProgressIndicator indicator) -->Line_14 $$ String requestBody = new Gson().toJson(new CourseWrapper(course))[ CD ]
