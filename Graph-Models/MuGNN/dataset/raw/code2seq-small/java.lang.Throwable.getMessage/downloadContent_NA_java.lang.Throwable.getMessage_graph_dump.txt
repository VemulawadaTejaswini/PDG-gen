Line_20 $$ if (fileType == FileTypes.PLAIN_TEXT) -->Line_21 $$ FileType fileTypeByFileName = FileTypeRegistry.getInstance().getFileTypeByFileName(PathUtilRt.getFileName(url.getPath()))[ CD ]
Line_2 $$ private static void downloadContent(@NotNull final Url url, final File file, final DownloadingCallback callback) -->Line_5 $$ callback.setProgressText(VfsBundle.message("download.progress.connecting", presentableUrl), true)[ FD ]
Line_2 $$ private static void downloadContent(@NotNull final Url url, final File file, final DownloadingCallback callback) -->Line_16 $$ callback.setProgressFraction(0)[ FD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_20 $$ if (fileType == FileTypes.PLAIN_TEXT) [ CD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_10 $$ throw new IOException(IdeBundle.message("error.connection.failed.with.http.code.N", ((HttpURLConnection) request.getConnection()).getResponseCode()))[ FD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_26 $$ LOG.debug("Downloading finished, " + size + " bytes downloaded")[ CD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_12 $$ int size = request.getConnection().getContentLength()[ CD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_9 $$ if (!request.isSuccessful()) [ CD ]
Line_14 $$ request.saveToFile(file, new AbstractProgressIndicatorExBase() -->Line_16 $$ callback.setProgressFraction(0)[ CD ]
Line_2 $$ private static void downloadContent(@NotNull final Url url, final File file, final DownloadingCallback callback) -->Line_3 $$ LOG.debug("Downloading started: " + url)[ CD ]
Line_2 $$ private static void downloadContent(@NotNull final Url url, final File file, final DownloadingCallback callback) -->Line_21 $$ FileType fileTypeByFileName = FileTypeRegistry.getInstance().getFileTypeByFileName(PathUtilRt.getFileName(url.getPath()))[ FD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_27 $$ callback.finished(fileType)[ CD ]
Line_2 $$ private static void downloadContent(@NotNull final Url url, final File file, final DownloadingCallback callback) -->Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() [ FD ]
Line_2 $$ private static void downloadContent(@NotNull final Url url, final File file, final DownloadingCallback callback) -->Line_5 $$ callback.setProgressText(VfsBundle.message("download.progress.connecting", presentableUrl), true)[ CD ]
Line_4 $$ final String presentableUrl = StringUtil.trimMiddle(url.trimParameters().toDecodedForm(), 40)-->Line_13 $$ callback.setProgressText(VfsBundle.message("download.progress.downloading", presentableUrl), size == -1)[ FD ]
Line_4 $$ final String presentableUrl = StringUtil.trimMiddle(url.trimParameters().toDecodedForm(), 40)-->Line_5 $$ callback.setProgressText(VfsBundle.message("download.progress.connecting", presentableUrl), true)[ FD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_19 $$ FileType fileType = RemoteFileUtil.getFileType(request.getConnection().getContentType())[ CD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_19 $$ FileType fileType = RemoteFileUtil.getFileType(request.getConnection().getContentType())[ FD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_9 $$ if (!request.isSuccessful()) [ FD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_28 $$ return null[ CD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_14 $$ request.saveToFile(file, new AbstractProgressIndicatorExBase() [ FD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_13 $$ callback.setProgressText(VfsBundle.message("download.progress.downloading", presentableUrl), size == -1)[ CD ]
Line_2 $$ private static void downloadContent(@NotNull final Url url, final File file, final DownloadingCallback callback) -->Line_33 $$ callback.errorOccurred(VfsBundle.message("cannot.load.remote.file", url, e.getMessage()), false)[ FD ]
Line_2 $$ private static void downloadContent(@NotNull final Url url, final File file, final DownloadingCallback callback) -->Line_14 $$ request.saveToFile(file, new AbstractProgressIndicatorExBase() [ FD ]
Line_2 $$ private static void downloadContent(@NotNull final Url url, final File file, final DownloadingCallback callback) -->Line_13 $$ callback.setProgressText(VfsBundle.message("download.progress.downloading", presentableUrl), size == -1)[ FD ]
Line_2 $$ private static void downloadContent(@NotNull final Url url, final File file, final DownloadingCallback callback) -->Line_4 $$ final String presentableUrl = StringUtil.trimMiddle(url.trimParameters().toDecodedForm(), 40)[ FD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_14 $$ request.saveToFile(file, new AbstractProgressIndicatorExBase() [ CD ]
Line_20 $$ if (fileType == FileTypes.PLAIN_TEXT) -->Line_22 $$ if (fileTypeByFileName != FileTypes.UNKNOWN) [ CD ]
Line_2 $$ private static void downloadContent(@NotNull final Url url, final File file, final DownloadingCallback callback) -->Line_4 $$ final String presentableUrl = StringUtil.trimMiddle(url.trimParameters().toDecodedForm(), 40)[ CD ]
Line_2 $$ private static void downloadContent(@NotNull final Url url, final File file, final DownloadingCallback callback) -->Line_27 $$ callback.finished(fileType)[ FD ]
Line_7 $$ HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>() -->Line_12 $$ int size = request.getConnection().getContentLength()[ FD ]
