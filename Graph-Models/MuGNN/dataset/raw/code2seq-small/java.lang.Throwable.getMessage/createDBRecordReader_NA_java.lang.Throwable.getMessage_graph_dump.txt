Line_2 $$ protected RecordReader<LongWritable, T> createDBRecordReader(DBInputSplit split, Configuration conf) throws IOException -->Line_6 $$ LOG.debug("Creating db record reader for db product: " + dbProductName)[ CD ]
Line_8 $$ if (dbProductName.startsWith("MYSQL")) -->Line_11 $$ return new DataDrivenDBRecordReader<T>(split, inputClass, conf, getConnection(), dbConf, dbConf.getInputConditions(), dbConf.getInputFieldNames(), dbConf.getInputTableName(), dbProductName)[ CD ]
Line_2 $$ protected RecordReader<LongWritable, T> createDBRecordReader(DBInputSplit split, Configuration conf) throws IOException -->Line_4 $$ Class<T> inputClass = (Class<T>) (dbConf.getInputClass())[ CD ]
Line_5 $$ String dbProductName = getDBProductName()-->Line_8 $$ if (dbProductName.startsWith("MYSQL")) [ FD ]
Line_3 $$ DBConfiguration dbConf = getDBConf()-->Line_4 $$ Class<T> inputClass = (Class<T>) (dbConf.getInputClass())[ FD ]
Line_3 $$ DBConfiguration dbConf = getDBConf()-->Line_11 $$ return new DataDrivenDBRecordReader<T>(split, inputClass, conf, getConnection(), dbConf, dbConf.getInputConditions(), dbConf.getInputFieldNames(), dbConf.getInputTableName(), dbProductName)[ FD ]
Line_8 $$ if (dbProductName.startsWith("MYSQL")) -->Line_9 $$ return new MySQLDataDrivenDBRecordReader<T>(split, inputClass, conf, getConnection(), dbConf, dbConf.getInputConditions(), dbConf.getInputFieldNames(), dbConf.getInputTableName())[ CD ]
Line_2 $$ protected RecordReader<LongWritable, T> createDBRecordReader(DBInputSplit split, Configuration conf) throws IOException -->Line_5 $$ String dbProductName = getDBProductName()[ CD ]
Line_2 $$ protected RecordReader<LongWritable, T> createDBRecordReader(DBInputSplit split, Configuration conf) throws IOException -->Line_3 $$ DBConfiguration dbConf = getDBConf()[ CD ]
Line_3 $$ DBConfiguration dbConf = getDBConf()-->Line_9 $$ return new MySQLDataDrivenDBRecordReader<T>(split, inputClass, conf, getConnection(), dbConf, dbConf.getInputConditions(), dbConf.getInputFieldNames(), dbConf.getInputTableName())[ FD ]
