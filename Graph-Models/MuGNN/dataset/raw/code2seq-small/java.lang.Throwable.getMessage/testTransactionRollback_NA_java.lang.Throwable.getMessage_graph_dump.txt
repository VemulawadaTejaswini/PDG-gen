Line_2 $$ public void testTransactionRollback() -->Line_24 $$ verify(manager).close()[ CD ]
Line_2 $$ public void testTransactionRollback() -->Line_7 $$ assertTrue(!TransactionSynchronizationManager.hasResource(factory))[ CD ]
Line_2 $$ public void testTransactionRollback() -->Line_23 $$ verify(tx).rollback()[ CD ]
Line_5 $$ final List<String> l = new ArrayList<String>()-->Line_6 $$ l.add("test")[ FD ]
Line_2 $$ public void testTransactionRollback() -->Line_22 $$ assertTrue(!TransactionSynchronizationManager.isSynchronizationActive())[ CD ]
Line_2 $$ public void testTransactionRollback() -->Line_8 $$ assertTrue(!TransactionSynchronizationManager.isSynchronizationActive())[ CD ]
Line_2 $$ public void testTransactionRollback() -->Line_21 $$ assertTrue(!TransactionSynchronizationManager.hasResource(factory))[ CD ]
Line_2 $$ public void testTransactionRollback() -->Line_6 $$ l.add("test")[ CD ]
Line_2 $$ public void testTransactionRollback() -->Line_4 $$ given(tx.isActive()).willReturn(true)[ CD ]
Line_10 $$ tt.execute(new TransactionCallback() -->Line_13 $$ EntityManagerFactoryUtils.getTransactionalEntityManager(factory)[ CD ]
Line_2 $$ public void testTransactionRollback() -->Line_3 $$ given(manager.getTransaction()).willReturn(tx)[ CD ]
Line_2 $$ public void testTransactionRollback() -->Line_5 $$ final List<String> l = new ArrayList<String>()[ CD ]
Line_10 $$ tt.execute(new TransactionCallback() -->Line_12 $$ assertTrue(TransactionSynchronizationManager.hasResource(factory))[ CD ]
