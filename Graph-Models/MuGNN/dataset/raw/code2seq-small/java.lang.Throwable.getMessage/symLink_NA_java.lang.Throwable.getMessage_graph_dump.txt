Line_3 $$ File targetFile = new File(Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString())-->Line_20 $$ String[] cmd = Shell.getSymlinkCommand(targetFile.toString(), linkFile.toString())[ FD ]
Line_2 $$ public static int symLink(String target, String linkname) throws IOException -->Line_20 $$ String[] cmd = Shell.getSymlinkCommand(targetFile.toString(), linkFile.toString())[ CD ]
Line_21 $$ ShellCommandExecutor shExec-->Line_24 $$ shExec = new ShellCommandExecutor(cmd, linkFile.getParentFile())[ FD ]
Line_26 $$ shExec = new ShellCommandExecutor(cmd)-->Line_43 $$ return shExec.getExitCode()[ FD ]
Line_21 $$ ShellCommandExecutor shExec-->Line_26 $$ shExec = new ShellCommandExecutor(cmd)[ FD ]
Line_4 $$ File linkFile = new File(Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString())-->Line_12 $$ org.apache.commons.io.FileUtils.copyFile(targetFile, linkFile)[ FD ]
Line_4 $$ File linkFile = new File(Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString())-->Line_23 $$ if (Shell.WINDOWS && linkFile.getParentFile() != null && !new Path(target).isAbsolute()) [ FD ]
Line_33 $$ if (returnVal != 0) -->Line_34 $$ LOG.warn("Command '" + StringUtils.join(" ", cmd) + "' failed " + returnVal + " with: " + ec.getMessage())[ CD ]
Line_24 $$ shExec = new ShellCommandExecutor(cmd, linkFile.getParentFile())-->Line_43 $$ return shExec.getExitCode()[ FD ]
Line_23 $$ if (Shell.WINDOWS && linkFile.getParentFile() != null && !new Path(target).isAbsolute()) -->Line_24 $$ shExec = new ShellCommandExecutor(cmd, linkFile.getParentFile())[ CD ]
Line_3 $$ File targetFile = new File(Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString())-->Line_5 $$ if (Shell.WINDOWS && !Shell.isJava7OrAbove() && targetFile.isFile()) [ FD ]
Line_4 $$ File linkFile = new File(Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString())-->Line_20 $$ String[] cmd = Shell.getSymlinkCommand(targetFile.toString(), linkFile.toString())[ FD ]
Line_4 $$ File linkFile = new File(Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString())-->Line_9 $$ LOG.warn("Parent directory " + linkFile.getParent() + " does not exist.")[ FD ]
Line_31 $$ if (Shell.WINDOWS && returnVal == SYMLINK_NO_PRIVILEGE) -->Line_33 $$ if (returnVal != 0) [ CD ]
Line_26 $$ shExec = new ShellCommandExecutor(cmd)-->Line_28 $$ shExec.execute()[ FD ]
Line_31 $$ if (Shell.WINDOWS && returnVal == SYMLINK_NO_PRIVILEGE) -->Line_32 $$ LOG.warn("Fail to create symbolic links on Windows. " + "The default security settings in Windows disallow non-elevated " + "administrators and all non-administrators from creating symbolic links. " + "This behavior can be changed in the Local Security Policy management console")[ CD ]
Line_2 $$ public static int symLink(String target, String linkname) throws IOException -->Line_5 $$ if (Shell.WINDOWS && !Shell.isJava7OrAbove() && targetFile.isFile()) [ CD ]
Line_4 $$ File linkFile = new File(Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString())-->Line_24 $$ shExec = new ShellCommandExecutor(cmd, linkFile.getParentFile())[ FD ]
Line_38 $$ if (LOG.isDebugEnabled()) -->Line_39 $$ LOG.debug("Error while create symlink " + linkname + " to " + target + "." + " Exception: " + StringUtils.stringifyException(e))[ CD ]
Line_8 $$ if (!linkFile.getParentFile().exists()) -->Line_12 $$ org.apache.commons.io.FileUtils.copyFile(targetFile, linkFile)[ CD ]
Line_21 $$ ShellCommandExecutor shExec-->Line_28 $$ shExec.execute()[ FD ]
Line_8 $$ if (!linkFile.getParentFile().exists()) -->Line_10 $$ return 1[ CD ]
Line_2 $$ public static int symLink(String target, String linkname) throws IOException -->Line_21 $$ ShellCommandExecutor shExec[ CD ]
Line_24 $$ shExec = new ShellCommandExecutor(cmd, linkFile.getParentFile())-->Line_26 $$ shExec = new ShellCommandExecutor(cmd)[ FD ]
Line_3 $$ File targetFile = new File(Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString())-->Line_12 $$ org.apache.commons.io.FileUtils.copyFile(targetFile, linkFile)[ FD ]
Line_8 $$ if (!linkFile.getParentFile().exists()) -->Line_9 $$ LOG.warn("Parent directory " + linkFile.getParent() + " does not exist.")[ CD ]
Line_23 $$ if (Shell.WINDOWS && linkFile.getParentFile() != null && !new Path(target).isAbsolute()) -->Line_26 $$ shExec = new ShellCommandExecutor(cmd)[ CD ]
Line_30 $$ int returnVal = ec.getExitCode()-->Line_33 $$ if (returnVal != 0) [ FD ]
Line_5 $$ if (Shell.WINDOWS && !Shell.isJava7OrAbove() && targetFile.isFile()) -->Line_18 $$ return 0[ CD ]
Line_2 $$ public static int symLink(String target, String linkname) throws IOException -->Line_4 $$ File linkFile = new File(Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString())[ CD ]
Line_20 $$ String[] cmd = Shell.getSymlinkCommand(targetFile.toString(), linkFile.toString())-->Line_34 $$ LOG.warn("Command '" + StringUtils.join(" ", cmd) + "' failed " + returnVal + " with: " + ec.getMessage())[ FD ]
Line_4 $$ File linkFile = new File(Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString())-->Line_8 $$ if (!linkFile.getParentFile().exists()) [ FD ]
Line_2 $$ public static int symLink(String target, String linkname) throws IOException -->Line_3 $$ File targetFile = new File(Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString())[ CD ]
Line_24 $$ shExec = new ShellCommandExecutor(cmd, linkFile.getParentFile())-->Line_28 $$ shExec.execute()[ FD ]
Line_21 $$ ShellCommandExecutor shExec-->Line_43 $$ return shExec.getExitCode()[ FD ]
Line_2 $$ public static int symLink(String target, String linkname) throws IOException -->Line_43 $$ return shExec.getExitCode()[ CD ]
