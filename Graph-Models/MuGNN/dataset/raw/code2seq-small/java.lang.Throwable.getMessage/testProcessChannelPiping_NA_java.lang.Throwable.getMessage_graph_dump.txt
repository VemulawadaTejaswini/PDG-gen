Line_30 $$ Future<String> processFuture = processChannel.getProcessNoticeableFuture()-->Line_32 $$ Assert.fail(processFuture.get())[ FD ]
Line_2 $$ public void testProcessChannelPiping() throws Exception -->Line_5 $$ Future<String> resultFuture = processChannel.write(new DummyReturnProcessCallable())[ CD ]
Line_17 $$ Throwable throwable = ee.getCause()-->Line_36 $$ Assert.assertSame(InterruptedException.class, throwable.getClass())[ FD ]
Line_20 $$ Future<Serializable> interruptFuture = processChannel.write(new InterruptProcessCallable())-->Line_22 $$ Assert.assertNull(interruptFuture.get())[ FD ]
Line_8 $$ ByteArrayOutputStream errByteArrayOutputStream = new ByteArrayOutputStream()-->Line_27 $$ String errLog = errByteArrayOutputStream.toString()[ FD ]
Line_27 $$ String errLog = errByteArrayOutputStream.toString()-->Line_28 $$ Assert.assertTrue(errLog.startsWith("[" + returnWithoutExitProcessCallable.toString() + "]" + new ProcessException(DummyExceptionProcessCallable.class.getName())))[ FD ]
Line_2 $$ public void testProcessChannelPiping() throws Exception -->Line_3 $$ ReturnWithoutExitProcessCallable returnWithoutExitProcessCallable = new ReturnWithoutExitProcessCallable("Premature return value")[ CD ]
Line_2 $$ public void testProcessChannelPiping() throws Exception -->Line_6 $$ Assert.assertEquals(DummyReturnProcessCallable.class.getName(), resultFuture.get())[ CD ]
Line_12 $$ Future<Serializable> exceptionFuture = processChannel.write(new DummyExceptionProcessCallable())-->Line_14 $$ exceptionFuture.get()[ FD ]
Line_35 $$ throwable = throwable.getCause()-->Line_36 $$ Assert.assertSame(InterruptedException.class, throwable.getClass())[ FD ]
Line_2 $$ public void testProcessChannelPiping() throws Exception -->Line_10 $$ System.setErr(newErrPrintStream)[ CD ]
Line_17 $$ Throwable throwable = ee.getCause()-->Line_18 $$ Assert.assertEquals(DummyExceptionProcessCallable.class.getName(), throwable.getMessage())[ FD ]
Line_4 $$ ProcessChannel<String> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), returnWithoutExitProcessCallable)-->Line_12 $$ Future<Serializable> exceptionFuture = processChannel.write(new DummyExceptionProcessCallable())[ FD ]
Line_5 $$ Future<String> resultFuture = processChannel.write(new DummyReturnProcessCallable())-->Line_6 $$ Assert.assertEquals(DummyReturnProcessCallable.class.getName(), resultFuture.get())[ FD ]
Line_4 $$ ProcessChannel<String> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), returnWithoutExitProcessCallable)-->Line_30 $$ Future<String> processFuture = processChannel.getProcessNoticeableFuture()[ FD ]
Line_2 $$ public void testProcessChannelPiping() throws Exception -->Line_4 $$ ProcessChannel<String> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), returnWithoutExitProcessCallable)[ CD ]
Line_2 $$ public void testProcessChannelPiping() throws Exception -->Line_9 $$ PrintStream newErrPrintStream = new PrintStream(errByteArrayOutputStream, true)[ CD ]
Line_3 $$ ReturnWithoutExitProcessCallable returnWithoutExitProcessCallable = new ReturnWithoutExitProcessCallable("Premature return value")-->Line_4 $$ ProcessChannel<String> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), returnWithoutExitProcessCallable)[ FD ]
Line_2 $$ public void testProcessChannelPiping() throws Exception -->Line_8 $$ ByteArrayOutputStream errByteArrayOutputStream = new ByteArrayOutputStream()[ CD ]
Line_3 $$ ReturnWithoutExitProcessCallable returnWithoutExitProcessCallable = new ReturnWithoutExitProcessCallable("Premature return value")-->Line_28 $$ Assert.assertTrue(errLog.startsWith("[" + returnWithoutExitProcessCallable.toString() + "]" + new ProcessException(DummyExceptionProcessCallable.class.getName())))[ FD ]
Line_2 $$ public void testProcessChannelPiping() throws Exception -->Line_7 $$ PrintStream oldErrPrintStream = System.err[ CD ]
Line_7 $$ PrintStream oldErrPrintStream = System.err-->Line_26 $$ System.setErr(oldErrPrintStream)[ FD ]
Line_4 $$ ProcessChannel<String> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), returnWithoutExitProcessCallable)-->Line_20 $$ Future<Serializable> interruptFuture = processChannel.write(new InterruptProcessCallable())[ FD ]
Line_4 $$ ProcessChannel<String> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), returnWithoutExitProcessCallable)-->Line_5 $$ Future<String> resultFuture = processChannel.write(new DummyReturnProcessCallable())[ FD ]
Line_17 $$ Throwable throwable = ee.getCause()-->Line_35 $$ throwable = throwable.getCause()[ FD ]
Line_9 $$ PrintStream newErrPrintStream = new PrintStream(errByteArrayOutputStream, true)-->Line_10 $$ System.setErr(newErrPrintStream)[ FD ]
Line_2 $$ public void testProcessChannelPiping() throws Exception -->Line_30 $$ Future<String> processFuture = processChannel.getProcessNoticeableFuture()[ CD ]
