Line_2 $$ public static String resolveMavenHome(@NotNull MavenGeneralSettings coreSettings, @Nullable Project project, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_10 $$ if (!MavenUtil.isValidMavenHome(file)) [ CD ]
Line_2 $$ public static String resolveMavenHome(@NotNull MavenGeneralSettings coreSettings, @Nullable Project project, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_11 $$ throw createExecutionException(RunnerBundle.message("external.maven.home.invalid", file.getPath()), RunnerBundle.message("external.maven.home.invalid.with.fix", file.getPath()), coreSettings, project, runConfiguration)[ FD ]
Line_2 $$ public static String resolveMavenHome(@NotNull MavenGeneralSettings coreSettings, @Nullable Project project, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_5 $$ throw createExecutionException(RunnerBundle.message("external.maven.home.no.default"), RunnerBundle.message("external.maven.home.no.default.with.fix"), coreSettings, project, runConfiguration)[ FD ]
Line_2 $$ public static String resolveMavenHome(@NotNull MavenGeneralSettings coreSettings, @Nullable Project project, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_8 $$ throw createExecutionException(RunnerBundle.message("external.maven.home.does.not.exist", file.getPath()), RunnerBundle.message("external.maven.home.does.not.exist.with.fix", file.getPath()), coreSettings, project, runConfiguration)[ FD ]
Line_3 $$ final File file = MavenUtil.resolveMavenHomeDirectory(coreSettings.getMavenHome())-->Line_11 $$ throw createExecutionException(RunnerBundle.message("external.maven.home.invalid", file.getPath()), RunnerBundle.message("external.maven.home.invalid.with.fix", file.getPath()), coreSettings, project, runConfiguration)[ FD ]
Line_3 $$ final File file = MavenUtil.resolveMavenHomeDirectory(coreSettings.getMavenHome())-->Line_14 $$ return file.getCanonicalPath()[ FD ]
Line_3 $$ final File file = MavenUtil.resolveMavenHomeDirectory(coreSettings.getMavenHome())-->Line_8 $$ throw createExecutionException(RunnerBundle.message("external.maven.home.does.not.exist", file.getPath()), RunnerBundle.message("external.maven.home.does.not.exist.with.fix", file.getPath()), coreSettings, project, runConfiguration)[ FD ]
Line_3 $$ final File file = MavenUtil.resolveMavenHomeDirectory(coreSettings.getMavenHome())-->Line_10 $$ if (!MavenUtil.isValidMavenHome(file)) [ FD ]
Line_2 $$ public static String resolveMavenHome(@NotNull MavenGeneralSettings coreSettings, @Nullable Project project, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_4 $$ if (file == null) [ CD ]
Line_2 $$ public static String resolveMavenHome(@NotNull MavenGeneralSettings coreSettings, @Nullable Project project, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_7 $$ if (!file.exists()) [ CD ]
Line_2 $$ public static String resolveMavenHome(@NotNull MavenGeneralSettings coreSettings, @Nullable Project project, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_3 $$ final File file = MavenUtil.resolveMavenHomeDirectory(coreSettings.getMavenHome())[ CD ]
Line_3 $$ final File file = MavenUtil.resolveMavenHomeDirectory(coreSettings.getMavenHome())-->Line_4 $$ if (file == null) [ FD ]
Line_2 $$ public static String resolveMavenHome(@NotNull MavenGeneralSettings coreSettings, @Nullable Project project, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_3 $$ final File file = MavenUtil.resolveMavenHomeDirectory(coreSettings.getMavenHome())[ FD ]
Line_3 $$ final File file = MavenUtil.resolveMavenHomeDirectory(coreSettings.getMavenHome())-->Line_7 $$ if (!file.exists()) [ FD ]
