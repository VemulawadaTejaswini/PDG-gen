Line_6 $$ final Method method = this.method-->Line_17 $$ return method.invoke(instance, context.getInvocationContext())[ FD ]
Line_8 $$ final Method oldMethod = context.getMethod()-->Line_20 $$ context.setMethod(oldMethod)[ FD ]
Line_10 $$ if (this.lifecycleMethod) -->Line_12 $$ return method.invoke(instance, context.getInvocationContext())[ CD ]
Line_4 $$ final Object instance = reference.getInstance()-->Line_23 $$ method.invoke(instance)[ FD ]
Line_2 $$ public Object processInvocation(final InterceptorContext context) throws Exception -->Line_8 $$ final Method oldMethod = context.getMethod()[ FD ]
Line_13 $$ if (this.changeMethod) -->Line_15 $$ return method.invoke(instance, context.getInvocationContext())[ CD ]
Line_7 $$ if (withContext) -->Line_8 $$ final Method oldMethod = context.getMethod()[ CD ]
Line_6 $$ final Method method = this.method-->Line_14 $$ context.setMethod(method)[ FD ]
Line_2 $$ public Object processInvocation(final InterceptorContext context) throws Exception -->Line_14 $$ context.setMethod(method)[ FD ]
Line_2 $$ public Object processInvocation(final InterceptorContext context) throws Exception -->Line_3 $$ final ManagedReference reference = (ManagedReference) context.getPrivateData(ComponentInstance.class).getInstanceData(contextKey)[ CD ]
Line_6 $$ final Method method = this.method-->Line_12 $$ return method.invoke(instance, context.getInvocationContext())[ FD ]
Line_13 $$ if (this.changeMethod) -->Line_17 $$ return method.invoke(instance, context.getInvocationContext())[ CD ]
Line_4 $$ final Object instance = reference.getInstance()-->Line_15 $$ return method.invoke(instance, context.getInvocationContext())[ FD ]
Line_7 $$ if (withContext) -->Line_23 $$ method.invoke(instance)[ CD ]
Line_6 $$ final Method method = this.method-->Line_15 $$ return method.invoke(instance, context.getInvocationContext())[ FD ]
Line_2 $$ public Object processInvocation(final InterceptorContext context) throws Exception -->Line_15 $$ return method.invoke(instance, context.getInvocationContext())[ FD ]
Line_2 $$ public Object processInvocation(final InterceptorContext context) throws Exception -->Line_3 $$ final ManagedReference reference = (ManagedReference) context.getPrivateData(ComponentInstance.class).getInstanceData(contextKey)[ FD ]
Line_2 $$ public Object processInvocation(final InterceptorContext context) throws Exception -->Line_17 $$ return method.invoke(instance, context.getInvocationContext())[ FD ]
Line_4 $$ final Object instance = reference.getInstance()-->Line_12 $$ return method.invoke(instance, context.getInvocationContext())[ FD ]
Line_2 $$ public Object processInvocation(final InterceptorContext context) throws Exception -->Line_11 $$ context.setMethod(null)[ FD ]
Line_2 $$ public Object processInvocation(final InterceptorContext context) throws Exception -->Line_20 $$ context.setMethod(oldMethod)[ FD ]
Line_10 $$ if (this.lifecycleMethod) -->Line_13 $$ if (this.changeMethod) [ CD ]
Line_6 $$ final Method method = this.method-->Line_23 $$ method.invoke(instance)[ FD ]
Line_2 $$ public Object processInvocation(final InterceptorContext context) throws Exception -->Line_12 $$ return method.invoke(instance, context.getInvocationContext())[ FD ]
Line_4 $$ final Object instance = reference.getInstance()-->Line_17 $$ return method.invoke(instance, context.getInvocationContext())[ FD ]
Line_7 $$ if (withContext) -->Line_24 $$ return context.proceed()[ CD ]
Line_2 $$ public Object processInvocation(final InterceptorContext context) throws Exception -->Line_4 $$ final Object instance = reference.getInstance()[ CD ]
Line_3 $$ final ManagedReference reference = (ManagedReference) context.getPrivateData(ComponentInstance.class).getInstanceData(contextKey)-->Line_4 $$ final Object instance = reference.getInstance()[ FD ]
Line_2 $$ public Object processInvocation(final InterceptorContext context) throws Exception -->Line_24 $$ return context.proceed()[ FD ]
Line_27 $$ final IllegalAccessError n = new IllegalAccessError(e.getMessage())-->Line_28 $$ n.setStackTrace(e.getStackTrace())[ FD ]
Line_10 $$ if (this.lifecycleMethod) -->Line_11 $$ context.setMethod(null)[ CD ]
Line_13 $$ if (this.changeMethod) -->Line_14 $$ context.setMethod(method)[ CD ]
