Line_7 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() -->Line_9 $$ if (node instanceof InspectionNode) [ FD ]
Line_9 $$ if (node instanceof InspectionNode) -->Line_13 $$ final Set<InspectionToolWrapper> toolWrappers = getWorkedTools(toolNode)[ CD ]
Line_10 $$ InspectionNode toolNode = (InspectionNode) node-->Line_12 $$ InspectionToolWrapper toolWrapper = toolNode.getToolWrapper()[ FD ]
Line_33 $$ if (profileName != null) -->Line_34 $$ element.setAttribute(InspectionApplication.PROFILE, profileName)[ CD ]
Line_10 $$ InspectionNode toolNode = (InspectionNode) node-->Line_13 $$ final Set<InspectionToolWrapper> toolWrappers = getWorkedTools(toolNode)[ FD ]
Line_14 $$ for (InspectionToolWrapper wrapper : toolWrappers) -->Line_15 $$ InspectionToolPresentation presentation = myView.getGlobalInspectionContext().getPresentation(wrapper)[ FD ]
Line_7 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() -->Line_25 $$ return true[ CD ]
Line_7 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() -->Line_9 $$ if (node instanceof InspectionNode) [ CD ]
Line_9 $$ if (node instanceof InspectionNode) -->Line_18 $$ PathMacroManager.getInstance(myView.getProject()).collapsePaths(problems)[ CD ]
Line_11 $$ Element problems = new Element(PROBLEMS)-->Line_16 $$ presentation.exportResults(problems)[ FD ]
Line_15 $$ InspectionToolPresentation presentation = myView.getGlobalInspectionContext().getPresentation(wrapper)-->Line_16 $$ presentation.exportResults(problems)[ FD ]
Line_9 $$ if (node instanceof InspectionNode) -->Line_11 $$ Element problems = new Element(PROBLEMS)[ CD ]
Line_11 $$ Element problems = new Element(PROBLEMS)-->Line_18 $$ PathMacroManager.getInstance(myView.getProject()).collapsePaths(problems)[ FD ]
Line_9 $$ if (node instanceof InspectionNode) -->Line_12 $$ InspectionToolWrapper toolWrapper = toolNode.getToolWrapper()[ CD ]
Line_12 $$ InspectionToolWrapper toolWrapper = toolNode.getToolWrapper()-->Line_20 $$ JDOMUtil.writeDocument(new Document(problems), outputDirectoryName + File.separator + toolWrapper.getShortName() + InspectionApplication.XML_EXTENSION, CodeStyleSettingsManager.getSettings(null).getLineSeparator())[ FD ]
Line_5 $$ final InspectionTreeNode root = myView.getTree().getRoot()-->Line_7 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() [ FD ]
Line_9 $$ if (node instanceof InspectionNode) -->Line_10 $$ InspectionNode toolNode = (InspectionNode) node[ CD ]
Line_38 $$ SwingUtilities.invokeLater(new Runnable() -->Line_40 $$ Messages.showErrorDialog(myView, e.getMessage())[ CD ]
