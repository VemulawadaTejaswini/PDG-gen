Line_2 $$ private HgCommandResult executeInCurrentThreadAndLog(@Nullable final VirtualFile repo, @NotNull final String operation, @Nullable final List<String> arguments) -->Line_5 $$ ShellCommand shellCommand = createShellCommandWithArgs(repo, operation, arguments)[ CD ]
Line_2 $$ private HgCommandResult executeInCurrentThreadAndLog(@Nullable final VirtualFile repo, @NotNull final String operation, @Nullable final List<String> arguments) -->Line_5 $$ ShellCommand shellCommand = createShellCommandWithArgs(repo, operation, arguments)[ FD ]
Line_5 $$ ShellCommand shellCommand = createShellCommandWithArgs(repo, operation, arguments)-->Line_9 $$ HgCommandResult result = shellCommand.execute(myShowOutput, myIsBinary)[ FD ]
Line_2 $$ private HgCommandResult executeInCurrentThreadAndLog(@Nullable final VirtualFile repo, @NotNull final String operation, @Nullable final List<String> arguments) -->Line_8 $$ LOG.debug(String.format("hg %s started", operation))[ FD ]
Line_2 $$ private HgCommandResult executeInCurrentThreadAndLog(@Nullable final VirtualFile repo, @NotNull final String operation, @Nullable final List<String> arguments) -->Line_10 $$ LOG.debug(String.format("hg %s finished. Took %s ms", operation, System.currentTimeMillis() - startTime))[ FD ]
Line_9 $$ HgCommandResult result = shellCommand.execute(myShowOutput, myIsBinary)-->Line_11 $$ logResult(result)[ FD ]
Line_2 $$ private HgCommandResult executeInCurrentThreadAndLog(@Nullable final VirtualFile repo, @NotNull final String operation, @Nullable final List<String> arguments) -->Line_3 $$ if (myProject == null || myProject.isDisposed() || myVcs == null)[ CD ]
Line_3 $$ if (myProject == null || myProject.isDisposed() || myVcs == null)-->Line_4 $$ return null[ CD ]
