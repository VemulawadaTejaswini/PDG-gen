Line_9 $$ File logFile = null-->Line_18 $$ final FileInputStream fis = ContainerLogsUtils.openLogFileForRead(containerIdStr, logFile, nmContext)[ FD ]
Line_23 $$ int len-->Line_25 $$ os.write(buf, 0, len)[ FD ]
Line_22 $$ byte[] buf = new byte[bufferSize]-->Line_25 $$ os.write(buf, 0, len)[ FD ]
Line_19 $$ StreamingOutput stream = new StreamingOutput() -->Line_21 $$ int bufferSize = 65536[ CD ]
Line_19 $$ StreamingOutput stream = new StreamingOutput() -->Line_27 $$ os.flush()[ CD ]
Line_2 $$ public Response getLogs(@PathParam("containerid") String containerIdStr, @PathParam("filename") String filename) -->Line_9 $$ File logFile = null[ CD ]
Line_24 $$ while ((len = fis.read(buf, 0, bufferSize)) > 0) -->Line_25 $$ os.write(buf, 0, len)[ CD ]
Line_2 $$ public Response getLogs(@PathParam("containerid") String containerIdStr, @PathParam("filename") String filename) -->Line_11 $$ logFile = ContainerLogsUtils.getContainerLogFile(containerId, filename, request.getRemoteUser(), nmContext)[ FD ]
Line_19 $$ StreamingOutput stream = new StreamingOutput() -->Line_24 $$ while ((len = fis.read(buf, 0, bufferSize)) > 0) [ CD ]
Line_22 $$ byte[] buf = new byte[bufferSize]-->Line_24 $$ while ((len = fis.read(buf, 0, bufferSize)) > 0) [ FD ]
Line_9 $$ File logFile = null-->Line_11 $$ logFile = ContainerLogsUtils.getContainerLogFile(containerId, filename, request.getRemoteUser(), nmContext)[ FD ]
Line_19 $$ StreamingOutput stream = new StreamingOutput() -->Line_27 $$ os.flush()[ FD ]
Line_23 $$ int len-->Line_24 $$ while ((len = fis.read(buf, 0, bufferSize)) > 0) [ FD ]
Line_21 $$ int bufferSize = 65536-->Line_24 $$ while ((len = fis.read(buf, 0, bufferSize)) > 0) [ FD ]
Line_18 $$ final FileInputStream fis = ContainerLogsUtils.openLogFileForRead(containerIdStr, logFile, nmContext)-->Line_24 $$ while ((len = fis.read(buf, 0, bufferSize)) > 0) [ FD ]
Line_2 $$ public Response getLogs(@PathParam("containerid") String containerIdStr, @PathParam("filename") String filename) -->Line_18 $$ final FileInputStream fis = ContainerLogsUtils.openLogFileForRead(containerIdStr, logFile, nmContext)[ FD ]
Line_19 $$ StreamingOutput stream = new StreamingOutput() -->Line_30 $$ return Response.ok(stream).build()[ FD ]
Line_2 $$ public Response getLogs(@PathParam("containerid") String containerIdStr, @PathParam("filename") String filename) -->Line_3 $$ ContainerId containerId[ CD ]
Line_3 $$ ContainerId containerId-->Line_11 $$ logFile = ContainerLogsUtils.getContainerLogFile(containerId, filename, request.getRemoteUser(), nmContext)[ FD ]
Line_19 $$ StreamingOutput stream = new StreamingOutput() -->Line_25 $$ os.write(buf, 0, len)[ FD ]
Line_2 $$ public Response getLogs(@PathParam("containerid") String containerIdStr, @PathParam("filename") String filename) -->Line_5 $$ containerId = ConverterUtils.toContainerId(containerIdStr)[ FD ]
Line_11 $$ logFile = ContainerLogsUtils.getContainerLogFile(containerId, filename, request.getRemoteUser(), nmContext)-->Line_18 $$ final FileInputStream fis = ContainerLogsUtils.openLogFileForRead(containerIdStr, logFile, nmContext)[ FD ]
Line_19 $$ StreamingOutput stream = new StreamingOutput() -->Line_23 $$ int len[ CD ]
Line_24 $$ while ((len = fis.read(buf, 0, bufferSize)) > 0) -->Line_25 $$ os.write(buf, 0, len)[ FD ]
Line_3 $$ ContainerId containerId-->Line_5 $$ containerId = ConverterUtils.toContainerId(containerIdStr)[ FD ]
Line_5 $$ containerId = ConverterUtils.toContainerId(containerIdStr)-->Line_11 $$ logFile = ContainerLogsUtils.getContainerLogFile(containerId, filename, request.getRemoteUser(), nmContext)[ FD ]
Line_19 $$ StreamingOutput stream = new StreamingOutput() -->Line_22 $$ byte[] buf = new byte[bufferSize][ CD ]
