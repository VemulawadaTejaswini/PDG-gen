Line_7 $$ for (PsiClass psiClass : classes) -->Line_41 $$ Collection<String> matches = extractAnnotationValuesFromJavaDoc(getTextJavaDoc(psiClass), parameter)[ FD ]
Line_7 $$ for (PsiClass psiClass : classes) -->Line_25 $$ results.put(psiClass, new LinkedHashSet<PsiMethod>())[ FD ]
Line_17 $$ if (annotation != null) -->Line_22 $$ Collection<String> matches = extractAnnotationValuesFromJavaDoc(getTextJavaDoc(psiClass), parameter)[ CD ]
Line_12 $$ annotation = AnnotationUtil.findAnnotation(psiClass, test)-->Line_35 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) [ FD ]
Line_10 $$ PsiAnnotation annotation-->Line_15 $$ annotation = null[ FD ]
Line_7 $$ for (PsiClass psiClass : classes) -->Line_19 $$ results.put(psiClass, new LinkedHashSet<PsiMethod>())[ FD ]
Line_34 $$ if (annotation != null) -->Line_41 $$ Collection<String> matches = extractAnnotationValuesFromJavaDoc(getTextJavaDoc(psiClass), parameter)[ CD ]
Line_7 $$ for (PsiClass psiClass : classes) -->Line_12 $$ annotation = AnnotationUtil.findAnnotation(psiClass, test)[ FD ]
Line_35 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) -->Line_38 $$ results.get(psiClass).add(method)[ CD ]
Line_10 $$ PsiAnnotation annotation-->Line_33 $$ annotation = AnnotationUtil.findAnnotation(method, test)[ FD ]
Line_4 $$ Set<String> test = new HashSet<String>(1)-->Line_12 $$ annotation = AnnotationUtil.findAnnotation(psiClass, test)[ FD ]
Line_4 $$ Set<String> test = new HashSet<String>(1)-->Line_5 $$ test.add(TEST_ANNOTATION_FQN)[ FD ]
Line_7 $$ for (PsiClass psiClass : classes) -->Line_22 $$ Collection<String> matches = extractAnnotationValuesFromJavaDoc(getTextJavaDoc(psiClass), parameter)[ FD ]
Line_2 $$ public static Map<PsiClass, Collection<PsiMethod>> filterAnnotations(String parameter, Set<String> values, Collection<PsiClass> classes) -->Line_4 $$ Set<String> test = new HashSet<String>(1)[ CD ]
Line_3 $$ Map<PsiClass, Collection<PsiMethod>> results = new HashMap<PsiClass, Collection<PsiMethod>>()-->Line_38 $$ results.get(psiClass).add(method)[ FD ]
Line_7 $$ for (PsiClass psiClass : classes) -->Line_38 $$ results.get(psiClass).add(method)[ FD ]
Line_31 $$ for (PsiMethod method : methods) -->Line_44 $$ results.get(psiClass).add(method)[ FD ]
Line_2 $$ public static Map<PsiClass, Collection<PsiMethod>> filterAnnotations(String parameter, Set<String> values, Collection<PsiClass> classes) -->Line_18 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) [ FD ]
Line_35 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) -->Line_36 $$ if (results.get(psiClass) == null)[ CD ]
Line_32 $$ if (method != null) -->Line_33 $$ annotation = AnnotationUtil.findAnnotation(method, test)[ CD ]
Line_2 $$ public static Map<PsiClass, Collection<PsiMethod>> filterAnnotations(String parameter, Set<String> values, Collection<PsiClass> classes) -->Line_24 $$ if (values.contains(s)) [ FD ]
Line_10 $$ PsiAnnotation annotation-->Line_34 $$ if (annotation != null) [ FD ]
Line_33 $$ annotation = AnnotationUtil.findAnnotation(method, test)-->Line_35 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) [ FD ]
Line_2 $$ public static Map<PsiClass, Collection<PsiMethod>> filterAnnotations(String parameter, Set<String> values, Collection<PsiClass> classes) -->Line_6 $$ ContainerUtil.addAll(test, CONFIG_ANNOTATIONS_FQN)[ CD ]
Line_3 $$ Map<PsiClass, Collection<PsiMethod>> results = new HashMap<PsiClass, Collection<PsiMethod>>()-->Line_25 $$ results.put(psiClass, new LinkedHashSet<PsiMethod>())[ FD ]
Line_24 $$ if (values.contains(s)) -->Line_25 $$ results.put(psiClass, new LinkedHashSet<PsiMethod>())[ CD ]
Line_36 $$ if (results.get(psiClass) == null)-->Line_37 $$ results.put(psiClass, new LinkedHashSet<PsiMethod>())[ CD ]
Line_3 $$ Map<PsiClass, Collection<PsiMethod>> results = new HashMap<PsiClass, Collection<PsiMethod>>()-->Line_37 $$ results.put(psiClass, new LinkedHashSet<PsiMethod>())[ FD ]
Line_7 $$ for (PsiClass psiClass : classes) -->Line_8 $$ if (isBrokenPsiClass(psiClass))[ FD ]
Line_2 $$ public static Map<PsiClass, Collection<PsiMethod>> filterAnnotations(String parameter, Set<String> values, Collection<PsiClass> classes) -->Line_35 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) [ FD ]
Line_43 $$ if (values.contains(s)) -->Line_44 $$ results.get(psiClass).add(method)[ CD ]
Line_7 $$ for (PsiClass psiClass : classes) -->Line_14 $$ LOGGER.error("Exception trying to findAnnotation on " + psiClass.getClass().getName() + ".\n\n" + e.getMessage())[ FD ]
Line_32 $$ if (method != null) -->Line_34 $$ if (annotation != null) [ CD ]
Line_15 $$ annotation = null-->Line_35 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) [ FD ]
Line_12 $$ annotation = AnnotationUtil.findAnnotation(psiClass, test)-->Line_33 $$ annotation = AnnotationUtil.findAnnotation(method, test)[ FD ]
Line_17 $$ if (annotation != null) -->Line_18 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) [ CD ]
Line_2 $$ public static Map<PsiClass, Collection<PsiMethod>> filterAnnotations(String parameter, Set<String> values, Collection<PsiClass> classes) -->Line_41 $$ Collection<String> matches = extractAnnotationValuesFromJavaDoc(getTextJavaDoc(psiClass), parameter)[ FD ]
Line_15 $$ annotation = null-->Line_17 $$ if (annotation != null) [ FD ]
Line_15 $$ annotation = null-->Line_34 $$ if (annotation != null) [ FD ]
Line_3 $$ Map<PsiClass, Collection<PsiMethod>> results = new HashMap<PsiClass, Collection<PsiMethod>>()-->Line_36 $$ if (results.get(psiClass) == null)[ FD ]
Line_12 $$ annotation = AnnotationUtil.findAnnotation(psiClass, test)-->Line_15 $$ annotation = null[ FD ]
Line_3 $$ Map<PsiClass, Collection<PsiMethod>> results = new HashMap<PsiClass, Collection<PsiMethod>>()-->Line_19 $$ results.put(psiClass, new LinkedHashSet<PsiMethod>())[ FD ]
Line_10 $$ PsiAnnotation annotation-->Line_35 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) [ FD ]
Line_7 $$ for (PsiClass psiClass : classes) -->Line_44 $$ results.get(psiClass).add(method)[ FD ]
Line_2 $$ public static Map<PsiClass, Collection<PsiMethod>> filterAnnotations(String parameter, Set<String> values, Collection<PsiClass> classes) -->Line_5 $$ test.add(TEST_ANNOTATION_FQN)[ CD ]
Line_4 $$ Set<String> test = new HashSet<String>(1)-->Line_6 $$ ContainerUtil.addAll(test, CONFIG_ANNOTATIONS_FQN)[ FD ]
Line_2 $$ public static Map<PsiClass, Collection<PsiMethod>> filterAnnotations(String parameter, Set<String> values, Collection<PsiClass> classes) -->Line_22 $$ Collection<String> matches = extractAnnotationValuesFromJavaDoc(getTextJavaDoc(psiClass), parameter)[ FD ]
Line_3 $$ Map<PsiClass, Collection<PsiMethod>> results = new HashMap<PsiClass, Collection<PsiMethod>>()-->Line_44 $$ results.get(psiClass).add(method)[ FD ]
Line_31 $$ for (PsiMethod method : methods) -->Line_32 $$ if (method != null) [ FD ]
Line_12 $$ annotation = AnnotationUtil.findAnnotation(psiClass, test)-->Line_34 $$ if (annotation != null) [ FD ]
Line_23 $$ for (String s : matches) -->Line_43 $$ if (values.contains(s)) [ FD ]
Line_12 $$ annotation = AnnotationUtil.findAnnotation(psiClass, test)-->Line_17 $$ if (annotation != null) [ FD ]
Line_34 $$ if (annotation != null) -->Line_35 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) [ CD ]
Line_10 $$ PsiAnnotation annotation-->Line_18 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) [ FD ]
Line_2 $$ public static Map<PsiClass, Collection<PsiMethod>> filterAnnotations(String parameter, Set<String> values, Collection<PsiClass> classes) -->Line_43 $$ if (values.contains(s)) [ FD ]
Line_31 $$ for (PsiMethod method : methods) -->Line_38 $$ results.get(psiClass).add(method)[ FD ]
Line_10 $$ PsiAnnotation annotation-->Line_12 $$ annotation = AnnotationUtil.findAnnotation(psiClass, test)[ FD ]
Line_23 $$ for (String s : matches) -->Line_24 $$ if (values.contains(s)) [ FD ]
Line_2 $$ public static Map<PsiClass, Collection<PsiMethod>> filterAnnotations(String parameter, Set<String> values, Collection<PsiClass> classes) -->Line_3 $$ Map<PsiClass, Collection<PsiMethod>> results = new HashMap<PsiClass, Collection<PsiMethod>>()[ CD ]
Line_7 $$ for (PsiClass psiClass : classes) -->Line_30 $$ PsiMethod[] methods = psiClass.getMethods()[ FD ]
Line_7 $$ for (PsiClass psiClass : classes) -->Line_36 $$ if (results.get(psiClass) == null)[ FD ]
Line_2 $$ public static Map<PsiClass, Collection<PsiMethod>> filterAnnotations(String parameter, Set<String> values, Collection<PsiClass> classes) -->Line_51 $$ return results[ CD ]
Line_31 $$ for (PsiMethod method : methods) -->Line_33 $$ annotation = AnnotationUtil.findAnnotation(method, test)[ FD ]
Line_33 $$ annotation = AnnotationUtil.findAnnotation(method, test)-->Line_34 $$ if (annotation != null) [ FD ]
Line_15 $$ annotation = null-->Line_18 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) [ FD ]
Line_18 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) -->Line_19 $$ results.put(psiClass, new LinkedHashSet<PsiMethod>())[ CD ]
Line_15 $$ annotation = null-->Line_33 $$ annotation = AnnotationUtil.findAnnotation(method, test)[ FD ]
Line_10 $$ PsiAnnotation annotation-->Line_17 $$ if (annotation != null) [ FD ]
Line_7 $$ for (PsiClass psiClass : classes) -->Line_37 $$ results.put(psiClass, new LinkedHashSet<PsiMethod>())[ FD ]
Line_12 $$ annotation = AnnotationUtil.findAnnotation(psiClass, test)-->Line_18 $$ if (isAnnotatedWithParameter(annotation, parameter, values)) [ FD ]
Line_4 $$ Set<String> test = new HashSet<String>(1)-->Line_33 $$ annotation = AnnotationUtil.findAnnotation(method, test)[ FD ]
