Line_16 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_17 $$ assertEquals(map.get(i), cache.get(i))[ CD ]
Line_3 $$ Map<Integer, Integer> map = new HashMap()-->Line_17 $$ assertEquals(map.get(i), cache.get(i))[ FD ]
Line_5 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_16 $$ for (int i = 0; i < numberOfEntries; i++) [ FD ]
Line_5 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_7 $$ cache.computeIfAbsent(i,  k -> [ FD ]
Line_2 $$ public void testComputeIfAbsentLoadsSuccessfully() -->Line_3 $$ Map<Integer, Integer> map = new HashMap()[ CD ]
Line_2 $$ public void testComputeIfAbsentLoadsSuccessfully() -->Line_5 $$ for (int i = 0; i < numberOfEntries; i++) [ CD ]
Line_3 $$ Map<Integer, Integer> map = new HashMap()-->Line_9 $$ map.put(k, value)[ FD ]
Line_4 $$ Cache<Integer, Integer> cache = CacheBuilder.<Integer, Integer>builder().build()-->Line_17 $$ assertEquals(map.get(i), cache.get(i))[ FD ]
Line_5 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_17 $$ assertEquals(map.get(i), cache.get(i))[ FD ]
Line_16 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_17 $$ assertEquals(map.get(i), cache.get(i))[ FD ]
Line_2 $$ public void testComputeIfAbsentLoadsSuccessfully() -->Line_4 $$ Cache<Integer, Integer> cache = CacheBuilder.<Integer, Integer>builder().build()[ CD ]
Line_4 $$ Cache<Integer, Integer> cache = CacheBuilder.<Integer, Integer>builder().build()-->Line_7 $$ cache.computeIfAbsent(i,  k -> [ FD ]
Line_2 $$ public void testComputeIfAbsentLoadsSuccessfully() -->Line_16 $$ for (int i = 0; i < numberOfEntries; i++) [ CD ]
Line_8 $$ int value = randomInt()-->Line_9 $$ map.put(k, value)[ FD ]
