Line_21 $$ InterceptorContext context = new InterceptorContext()-->Line_29 $$ clientPostConstructInterceptor.processInvocation(context)[ FD ]
Line_5 $$ final ComponentClientInstance instance = new ComponentClientInstance()-->Line_30 $$ instance.constructionComplete()[ FD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_24 $$ context.putPrivateData(ComponentClientInstance.class, instance)[ CD ]
Line_4 $$ final Component component = componentView.getComponent()-->Line_23 $$ context.putPrivateData(Component.class, component)[ FD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_5 $$ final ComponentClientInstance instance = new ComponentClientInstance()[ CD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_25 $$ context.setContextData(new HashMap<String, Object>())[ CD ]
Line_10 $$ Throwable cause = e.getCause()-->Line_18 $$ error.initCause(cause)[ FD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_31 $$ return new ManagedReference() [ CD ]
Line_21 $$ InterceptorContext context = new InterceptorContext()-->Line_23 $$ context.putPrivateData(Component.class, component)[ FD ]
Line_26 $$ for (Map.Entry<Object, Object> entry : contextData.entrySet()) -->Line_27 $$ context.putPrivateData(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_3 $$ final Object proxy[ CD ]
Line_34 $$ InterceptorContext interceptorContext = new InterceptorContext()-->Line_35 $$ interceptorContext.putPrivateData(ComponentView.class, componentView)[ FD ]
Line_9 $$ InstantiationError error = new InstantiationError(e.getMessage())-->Line_12 $$ error.initCause(cause)[ FD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_22 $$ context.putPrivateData(ComponentView.class, componentView)[ FD ]
Line_31 $$ return new ManagedReference() -->Line_43 $$ return proxy[ CD ]
Line_21 $$ InterceptorContext context = new InterceptorContext()-->Line_27 $$ context.putPrivateData(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_29 $$ clientPostConstructInterceptor.processInvocation(context)[ CD ]
Line_34 $$ InterceptorContext interceptorContext = new InterceptorContext()-->Line_37 $$ clientPreDestroyInterceptor.processInvocation(interceptorContext)[ FD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_22 $$ context.putPrivateData(ComponentView.class, componentView)[ CD ]
Line_17 $$ if (cause != null)-->Line_18 $$ error.initCause(cause)[ CD ]
Line_21 $$ InterceptorContext context = new InterceptorContext()-->Line_24 $$ context.putPrivateData(ComponentClientInstance.class, instance)[ FD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_35 $$ interceptorContext.putPrivateData(ComponentView.class, componentView)[ FD ]
Line_4 $$ final Component component = componentView.getComponent()-->Line_36 $$ interceptorContext.putPrivateData(Component.class, component)[ FD ]
Line_9 $$ InstantiationError error = new InstantiationError(e.getMessage())-->Line_18 $$ error.initCause(cause)[ FD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_4 $$ final Component component = componentView.getComponent()[ CD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_21 $$ InterceptorContext context = new InterceptorContext()[ CD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_30 $$ instance.constructionComplete()[ CD ]
Line_21 $$ InterceptorContext context = new InterceptorContext()-->Line_25 $$ context.setContextData(new HashMap<String, Object>())[ FD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_23 $$ context.putPrivateData(Component.class, component)[ CD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_4 $$ final Component component = componentView.getComponent()[ FD ]
Line_10 $$ Throwable cause = e.getCause()-->Line_17 $$ if (cause != null)[ FD ]
Line_4 $$ final Component component = componentView.getComponent()-->Line_39 $$ ROOT_LOGGER.preDestroyInterceptorFailure(e, component.getComponentClass())[ FD ]
Line_10 $$ Throwable cause = e.getCause()-->Line_11 $$ if (cause != null)[ FD ]
Line_5 $$ final ComponentClientInstance instance = new ComponentClientInstance()-->Line_24 $$ context.putPrivateData(ComponentClientInstance.class, instance)[ FD ]
Line_3 $$ final Object proxy-->Line_7 $$ proxy = proxyFactory.newInstance(new ProxyInvocationHandler(clientInterceptors, instance, componentView))[ FD ]
Line_34 $$ InterceptorContext interceptorContext = new InterceptorContext()-->Line_36 $$ interceptorContext.putPrivateData(Component.class, component)[ FD ]
Line_10 $$ Throwable cause = e.getCause()-->Line_12 $$ error.initCause(cause)[ FD ]
Line_11 $$ if (cause != null)-->Line_12 $$ error.initCause(cause)[ CD ]
Line_21 $$ InterceptorContext context = new InterceptorContext()-->Line_22 $$ context.putPrivateData(ComponentView.class, componentView)[ FD ]
Line_2 $$ public ManagedReference createViewInstance(final ComponentView componentView, final Map<Object, Object> contextData) throws Exception -->Line_26 $$ for (Map.Entry<Object, Object> entry : contextData.entrySet()) [ FD ]
