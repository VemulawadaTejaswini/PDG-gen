Line_9 $$ boolean failed = false-->Line_10 $$ while (failed == false) [ FD ]
Line_6 $$ Translog translog = getFailableTranslog(fail, config)-->Line_12 $$ locations.add(translog.add(new Translog.Index("test", "" + opsSynced, Integer.toString(opsSynced).getBytes(Charset.forName("UTF-8")))))[ FD ]
Line_5 $$ TranslogConfig config = getTranslogConfig(tempDir)-->Line_56 $$ config.setTranslogGeneration(translogGeneration)[ FD ]
Line_3 $$ Path tempDir = createTempDir()-->Line_5 $$ TranslogConfig config = getTranslogConfig(tempDir)[ FD ]
Line_5 $$ TranslogConfig config = getTranslogConfig(tempDir)-->Line_6 $$ Translog translog = getFailableTranslog(fail, config)[ FD ]
Line_8 $$ int opsSynced = 0-->Line_28 $$ locations.add(translog.add(new Translog.Index("test", "" + opsSynced, Integer.toString(opsSynced).getBytes(Charset.forName("UTF-8")))))[ FD ]
Line_19 $$ failed = true-->Line_10 $$ while (failed == false) [ FD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_8 $$ int opsSynced = 0[ CD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_3 $$ Path tempDir = createTempDir()[ CD ]
Line_6 $$ Translog translog = getFailableTranslog(fail, config)-->Line_52 $$ assertSame(translog.getTragicException(), ex.getCause())[ FD ]
Line_10 $$ while (failed == false) -->Line_23 $$ fail.set(randomBoolean())[ CD ]
Line_6 $$ Translog translog = getFailableTranslog(fail, config)-->Line_55 $$ translog.close()[ FD ]
Line_32 $$ if (ex.getCause() instanceof MockDirectoryWrapper.FakeIOException) -->Line_35 $$ assertEquals(ex.getCause().getMessage(), "__FAKE__ no space left on device")[ CD ]
Line_62 $$ for (int i = 0; i < opsSynced; i++) -->Line_66 $$ assertEquals(i, Integer.parseInt(next.getSource().source.toUtf8()))[ FD ]
Line_7 $$ List<Translog.Location> locations = new ArrayList()-->Line_28 $$ locations.add(translog.add(new Translog.Index("test", "" + opsSynced, Integer.toString(opsSynced).getBytes(Charset.forName("UTF-8")))))[ FD ]
Line_6 $$ Translog translog = getFailableTranslog(fail, config)-->Line_39 $$ Translog.TranslogGeneration translogGeneration = translog.getGeneration()[ FD ]
Line_60 $$ try (Translog.Snapshot snapshot = tlog.newSnapshot()) -->Line_61 $$ assertEquals(opsSynced, snapshot.estimatedTotalOperations())[ FD ]
Line_39 $$ Translog.TranslogGeneration translogGeneration = translog.getGeneration()-->Line_56 $$ config.setTranslogGeneration(translogGeneration)[ FD ]
Line_57 $$ try (Translog tlog = new Translog(config)) -->Line_60 $$ try (Translog.Snapshot snapshot = tlog.newSnapshot()) [ FD ]
Line_6 $$ Translog translog = getFailableTranslog(fail, config)-->Line_28 $$ locations.add(translog.add(new Translog.Index("test", "" + opsSynced, Integer.toString(opsSynced).getBytes(Charset.forName("UTF-8")))))[ FD ]
Line_57 $$ try (Translog tlog = new Translog(config)) -->Line_63 $$ assertEquals("expected operation" + i + " to be in the previous translog but wasn't", tlog.currentFileGeneration() - 1, locations.get(i).generation)[ FD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_4 $$ final AtomicBoolean fail = new AtomicBoolean()[ CD ]
Line_64 $$ Translog.Operation next = snapshot.next()-->Line_66 $$ assertEquals(i, Integer.parseInt(next.getSource().source.toUtf8()))[ FD ]
Line_64 $$ Translog.Operation next = snapshot.next()-->Line_65 $$ assertNotNull("operation " + i + " must be non-null", next)[ FD ]
Line_6 $$ Translog translog = getFailableTranslog(fail, config)-->Line_45 $$ assertSame(translog.getTragicException(), ex.getCause())[ FD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_54 $$ assertFalse(translog.isOpen())[ CD ]
Line_6 $$ Translog translog = getFailableTranslog(fail, config)-->Line_13 $$ translog.sync()[ FD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_26 $$ if (randomBoolean()) [ CD ]
Line_9 $$ boolean failed = false-->Line_19 $$ failed = true[ FD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_10 $$ while (failed == false) [ CD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_39 $$ Translog.TranslogGeneration translogGeneration = translog.getGeneration()[ CD ]
Line_6 $$ Translog translog = getFailableTranslog(fail, config)-->Line_41 $$ translog.newSnapshot()[ FD ]
Line_8 $$ int opsSynced = 0-->Line_61 $$ assertEquals(opsSynced, snapshot.estimatedTotalOperations())[ FD ]
Line_62 $$ for (int i = 0; i < opsSynced; i++) -->Line_63 $$ assertEquals("expected operation" + i + " to be in the previous translog but wasn't", tlog.currentFileGeneration() - 1, locations.get(i).generation)[ FD ]
Line_57 $$ try (Translog tlog = new Translog(config)) -->Line_59 $$ assertFalse(tlog.syncNeeded())[ FD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_55 $$ translog.close()[ CD ]
Line_57 $$ try (Translog tlog = new Translog(config)) -->Line_58 $$ assertEquals("lastCommitted must be 1 less than current", translogGeneration.translogFileGeneration + 1, tlog.currentFileGeneration())[ FD ]
Line_7 $$ List<Translog.Location> locations = new ArrayList()-->Line_63 $$ assertEquals("expected operation" + i + " to be in the previous translog but wasn't", tlog.currentFileGeneration() - 1, locations.get(i).generation)[ FD ]
Line_6 $$ Translog translog = getFailableTranslog(fail, config)-->Line_54 $$ assertFalse(translog.isOpen())[ FD ]
Line_4 $$ final AtomicBoolean fail = new AtomicBoolean()-->Line_25 $$ fail.set(false)[ FD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_5 $$ TranslogConfig config = getTranslogConfig(tempDir)[ CD ]
Line_4 $$ final AtomicBoolean fail = new AtomicBoolean()-->Line_6 $$ Translog translog = getFailableTranslog(fail, config)[ FD ]
Line_8 $$ int opsSynced = 0-->Line_12 $$ locations.add(translog.add(new Translog.Index("test", "" + opsSynced, Integer.toString(opsSynced).getBytes(Charset.forName("UTF-8")))))[ FD ]
Line_62 $$ for (int i = 0; i < opsSynced; i++) -->Line_66 $$ assertEquals(i, Integer.parseInt(next.getSource().source.toUtf8()))[ CD ]
Line_7 $$ List<Translog.Location> locations = new ArrayList()-->Line_12 $$ locations.add(translog.add(new Translog.Index("test", "" + opsSynced, Integer.toString(opsSynced).getBytes(Charset.forName("UTF-8")))))[ FD ]
Line_9 $$ boolean failed = false-->Line_16 $$ failed = true[ FD ]
Line_8 $$ int opsSynced = 0-->Line_62 $$ for (int i = 0; i < opsSynced; i++) [ FD ]
Line_32 $$ if (ex.getCause() instanceof MockDirectoryWrapper.FakeIOException) -->Line_33 $$ assertNull(ex.getCause().getMessage())[ CD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_56 $$ config.setTranslogGeneration(translogGeneration)[ CD ]
Line_62 $$ for (int i = 0; i < opsSynced; i++) -->Line_63 $$ assertEquals("expected operation" + i + " to be in the previous translog but wasn't", tlog.currentFileGeneration() - 1, locations.get(i).generation)[ CD ]
Line_60 $$ try (Translog.Snapshot snapshot = tlog.newSnapshot()) -->Line_64 $$ Translog.Operation next = snapshot.next()[ FD ]
Line_62 $$ for (int i = 0; i < opsSynced; i++) -->Line_65 $$ assertNotNull("operation " + i + " must be non-null", next)[ CD ]
Line_6 $$ Translog translog = getFailableTranslog(fail, config)-->Line_17 $$ assertFalse(translog.isOpen())[ FD ]
Line_8 $$ int opsSynced = 0-->Line_14 $$ opsSynced++[ FD ]
Line_16 $$ failed = true-->Line_19 $$ failed = true[ FD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_25 $$ fail.set(false)[ CD ]
Line_62 $$ for (int i = 0; i < opsSynced; i++) -->Line_64 $$ Translog.Operation next = snapshot.next()[ CD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_7 $$ List<Translog.Location> locations = new ArrayList()[ CD ]
Line_6 $$ Translog translog = getFailableTranslog(fail, config)-->Line_20 $$ assertFalse(translog.isOpen())[ FD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_9 $$ boolean failed = false[ CD ]
Line_6 $$ Translog translog = getFailableTranslog(fail, config)-->Line_48 $$ translog.commit()[ FD ]
Line_2 $$ public void testFailFlush() throws IOException -->Line_6 $$ Translog translog = getFailableTranslog(fail, config)[ CD ]
Line_16 $$ failed = true-->Line_10 $$ while (failed == false) [ FD ]
Line_4 $$ final AtomicBoolean fail = new AtomicBoolean()-->Line_23 $$ fail.set(randomBoolean())[ FD ]
