Line_55 $$ StringBuilder builder = new StringBuilder()-->Line_66 $$ String diagnostics = builder.toString()[ FD ]
Line_4 $$ ContainerId containerId = container.getContainerId()-->Line_41 $$ if (isContainerActive(containerId)) [ FD ]
Line_39 $$ shExec = new ShellCommandExecutor(command, new File(containerWorkDir.toUri().getPath()), container.getLaunchContext().getEnvironment())-->Line_42 $$ shExec.execute()[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_27 $$ if (pidFile != null) [ CD ]
Line_33 $$ ShellCommandExecutor shExec = null-->Line_63 $$ if (!shExec.getOutput().isEmpty()) [ FD ]
Line_53 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_70 $$ container.handle(new ContainerDiagnosticsUpdateEvent(containerId, "Container killed on request. Exit code is " + exitCode))[ CD ]
Line_6 $$ String appIdStr = ConverterUtils.toString(containerId.getApplicationAttemptId().getApplicationId())-->Line_15 $$ createContainerLogDirs(appIdStr, containerIdStr, logDirs)[ FD ]
Line_26 $$ Path pidFile = getPidFilePath(containerId)-->Line_27 $$ if (pidFile != null) [ FD ]
Line_18 $$ Path launchDst = new Path(containerWorkDir, ContainerLaunch.CONTAINER_SCRIPT)-->Line_35 $$ lfs.setPermission(launchDst, ContainerExecutor.TASK_LAUNCH_SCRIPT_PERMISSION)[ FD ]
Line_39 $$ shExec = new ShellCommandExecutor(command, new File(containerWorkDir.toUri().getPath()), container.getLaunchContext().getEnvironment())-->Line_64 $$ builder.append("Shell output: " + shExec.getOutput() + "\n")[ FD ]
Line_55 $$ StringBuilder builder = new StringBuilder()-->Line_57 $$ builder.append("Container id: " + containerId + "\n")[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_33 $$ ShellCommandExecutor shExec = null[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_23 $$ if (Shell.WINDOWS && sb.getWrapperScriptPath().toString().length() > WIN_MAX_PATH) [ CD ]
Line_53 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_68 $$ container.handle(new ContainerDiagnosticsUpdateEvent(containerId, diagnostics))[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_26 $$ Path pidFile = getPidFilePath(containerId)[ CD ]
Line_22 $$ LocalWrapperScriptBuilder sb = Shell.WINDOWS ? new WindowsLocalWrapperScriptBuilder(containerIdStr, containerWorkDir) : new UnixLocalWrapperScriptBuilder(containerWorkDir)-->Line_36 $$ lfs.setPermission(sb.getWrapperScriptPath(), ContainerExecutor.TASK_LAUNCH_SCRIPT_PERMISSION)[ FD ]
Line_27 $$ if (pidFile != null) -->Line_28 $$ sb.writeLocalWrapperScript(launchDst, pidFile)[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_39 $$ shExec = new ShellCommandExecutor(command, new File(containerWorkDir.toUri().getPath()), container.getLaunchContext().getEnvironment())[ FD ]
Line_22 $$ LocalWrapperScriptBuilder sb = Shell.WINDOWS ? new WindowsLocalWrapperScriptBuilder(containerIdStr, containerWorkDir) : new UnixLocalWrapperScriptBuilder(containerWorkDir)-->Line_37 $$ String[] command = getRunCommand(sb.getWrapperScriptPath().toString(), containerIdStr, this.getConf())[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_4 $$ ContainerId containerId = container.getContainerId()[ CD ]
Line_53 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_57 $$ builder.append("Container id: " + containerId + "\n")[ CD ]
Line_55 $$ StringBuilder builder = new StringBuilder()-->Line_62 $$ builder.append("Stack trace: " + StringUtils.stringifyException(e) + "\n")[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_19 $$ lfs.util().copy(nmPrivateContainerScriptPath, launchDst)[ FD ]
Line_66 $$ String diagnostics = builder.toString()-->Line_67 $$ logOutput(diagnostics)[ FD ]
Line_5 $$ String containerIdStr = ConverterUtils.toString(containerId)-->Line_15 $$ createContainerLogDirs(appIdStr, containerIdStr, logDirs)[ FD ]
Line_5 $$ String containerIdStr = ConverterUtils.toString(containerId)-->Line_37 $$ String[] command = getRunCommand(sb.getWrapperScriptPath().toString(), containerIdStr, this.getConf())[ FD ]
Line_53 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_67 $$ logOutput(diagnostics)[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_21 $$ lfs.util().copy(nmPrivateTokensPath, tokenDst)[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_70 $$ container.handle(new ContainerDiagnosticsUpdateEvent(containerId, "Container killed on request. Exit code is " + exitCode))[ FD ]
Line_26 $$ Path pidFile = getPidFilePath(containerId)-->Line_28 $$ sb.writeLocalWrapperScript(launchDst, pidFile)[ FD ]
Line_33 $$ ShellCommandExecutor shExec = null-->Line_64 $$ builder.append("Shell output: " + shExec.getOutput() + "\n")[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_76 $$ return 0[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_19 $$ lfs.util().copy(nmPrivateContainerScriptPath, launchDst)[ CD ]
Line_53 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_66 $$ String diagnostics = builder.toString()[ CD ]
Line_4 $$ ContainerId containerId = container.getContainerId()-->Line_26 $$ Path pidFile = getPidFilePath(containerId)[ FD ]
Line_55 $$ StringBuilder builder = new StringBuilder()-->Line_60 $$ builder.append("Exception message: " + e.getMessage() + "\n")[ FD ]
Line_39 $$ shExec = new ShellCommandExecutor(command, new File(containerWorkDir.toUri().getPath()), container.getLaunchContext().getEnvironment())-->Line_63 $$ if (!shExec.getOutput().isEmpty()) [ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_22 $$ LocalWrapperScriptBuilder sb = Shell.WINDOWS ? new WindowsLocalWrapperScriptBuilder(containerIdStr, containerWorkDir) : new UnixLocalWrapperScriptBuilder(containerWorkDir)[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_6 $$ String appIdStr = ConverterUtils.toString(containerId.getApplicationAttemptId().getApplicationId())[ CD ]
Line_22 $$ LocalWrapperScriptBuilder sb = Shell.WINDOWS ? new WindowsLocalWrapperScriptBuilder(containerIdStr, containerWorkDir) : new UnixLocalWrapperScriptBuilder(containerWorkDir)-->Line_23 $$ if (Shell.WINDOWS && sb.getWrapperScriptPath().toString().length() > WIN_MAX_PATH) [ FD ]
Line_27 $$ if (pidFile != null) -->Line_31 $$ return ExitCode.TERMINATED.getExitCode()[ CD ]
Line_53 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_54 $$ LOG.warn("Exception from container-launch with container ID: " + containerId + " and exit code: " + exitCode, e)[ CD ]
Line_53 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_59 $$ if (!Optional.fromNullable(e.getMessage()).or("").isEmpty()) [ CD ]
Line_41 $$ if (isContainerActive(containerId)) -->Line_42 $$ shExec.execute()[ CD ]
Line_18 $$ Path launchDst = new Path(containerWorkDir, ContainerLaunch.CONTAINER_SCRIPT)-->Line_19 $$ lfs.util().copy(nmPrivateContainerScriptPath, launchDst)[ FD ]
Line_16 $$ Path tmpDir = new Path(containerWorkDir, YarnConfiguration.DEFAULT_CONTAINER_TEMP_DIR)-->Line_17 $$ createDir(tmpDir, dirPerm, false)[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_4 $$ ContainerId containerId = container.getContainerId()[ FD ]
Line_33 $$ ShellCommandExecutor shExec = null-->Line_39 $$ shExec = new ShellCommandExecutor(command, new File(containerWorkDir.toUri().getPath()), container.getLaunchContext().getEnvironment())[ FD ]
Line_63 $$ if (!shExec.getOutput().isEmpty()) -->Line_64 $$ builder.append("Shell output: " + shExec.getOutput() + "\n")[ CD ]
Line_59 $$ if (!Optional.fromNullable(e.getMessage()).or("").isEmpty()) -->Line_60 $$ builder.append("Exception message: " + e.getMessage() + "\n")[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_18 $$ Path launchDst = new Path(containerWorkDir, ContainerLaunch.CONTAINER_SCRIPT)[ CD ]
Line_33 $$ ShellCommandExecutor shExec = null-->Line_48 $$ if (null == shExec) [ FD ]
Line_12 $$ Path containerDir = new Path(appDir, containerIdStr)-->Line_13 $$ createDir(containerDir, dirPerm, true)[ FD ]
Line_3 $$ FsPermission dirPerm = new FsPermission(APPDIR_PERM)-->Line_13 $$ createDir(containerDir, dirPerm, true)[ FD ]
Line_48 $$ if (null == shExec) -->Line_49 $$ return -1[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_20 $$ Path tokenDst = new Path(containerWorkDir, ContainerLaunch.FINAL_CONTAINER_TOKENS_FILE)[ CD ]
Line_22 $$ LocalWrapperScriptBuilder sb = Shell.WINDOWS ? new WindowsLocalWrapperScriptBuilder(containerIdStr, containerWorkDir) : new UnixLocalWrapperScriptBuilder(containerWorkDir)-->Line_24 $$ throw new IOException(String.format("Cannot launch container using script at path %s, because it exceeds " + "the maximum supported path length of %d characters.  Consider " + "configuring shorter directories in %s.", sb.getWrapperScriptPath(), WIN_MAX_PATH, YarnConfiguration.NM_LOCAL_DIRS))[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_68 $$ container.handle(new ContainerDiagnosticsUpdateEvent(containerId, diagnostics))[ FD ]
Line_4 $$ ContainerId containerId = container.getContainerId()-->Line_5 $$ String containerIdStr = ConverterUtils.toString(containerId)[ FD ]
Line_41 $$ if (isContainerActive(containerId)) -->Line_45 $$ return ExitCode.TERMINATED.getExitCode()[ CD ]
Line_53 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_55 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_27 $$ if (pidFile != null) -->Line_30 $$ LOG.info("Container " + containerIdStr + " was marked as inactive. Returning terminated error")[ CD ]
Line_53 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_63 $$ if (!shExec.getOutput().isEmpty()) [ CD ]
Line_3 $$ FsPermission dirPerm = new FsPermission(APPDIR_PERM)-->Line_17 $$ createDir(tmpDir, dirPerm, false)[ FD ]
Line_37 $$ String[] command = getRunCommand(sb.getWrapperScriptPath().toString(), containerIdStr, this.getConf())-->Line_38 $$ LOG.info("launchContainer: " + Arrays.toString(command))[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_3 $$ FsPermission dirPerm = new FsPermission(APPDIR_PERM)[ CD ]
Line_39 $$ shExec = new ShellCommandExecutor(command, new File(containerWorkDir.toUri().getPath()), container.getLaunchContext().getEnvironment())-->Line_48 $$ if (null == shExec) [ FD ]
Line_33 $$ ShellCommandExecutor shExec = null-->Line_42 $$ shExec.execute()[ FD ]
Line_55 $$ StringBuilder builder = new StringBuilder()-->Line_56 $$ builder.append("Exception from container-launch.\n")[ FD ]
Line_53 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_62 $$ builder.append("Stack trace: " + StringUtils.stringifyException(e) + "\n")[ CD ]
Line_39 $$ shExec = new ShellCommandExecutor(command, new File(containerWorkDir.toUri().getPath()), container.getLaunchContext().getEnvironment())-->Line_51 $$ int exitCode = shExec.getExitCode()[ FD ]
Line_55 $$ StringBuilder builder = new StringBuilder()-->Line_58 $$ builder.append("Exit code: " + exitCode + "\n")[ FD ]
Line_53 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_56 $$ builder.append("Exception from container-launch.\n")[ CD ]
Line_55 $$ StringBuilder builder = new StringBuilder()-->Line_64 $$ builder.append("Shell output: " + shExec.getOutput() + "\n")[ FD ]
Line_33 $$ ShellCommandExecutor shExec = null-->Line_51 $$ int exitCode = shExec.getExitCode()[ FD ]
Line_22 $$ LocalWrapperScriptBuilder sb = Shell.WINDOWS ? new WindowsLocalWrapperScriptBuilder(containerIdStr, containerWorkDir) : new UnixLocalWrapperScriptBuilder(containerWorkDir)-->Line_28 $$ sb.writeLocalWrapperScript(launchDst, pidFile)[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_15 $$ createContainerLogDirs(appIdStr, containerIdStr, logDirs)[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_17 $$ createDir(tmpDir, dirPerm, false)[ CD ]
Line_20 $$ Path tokenDst = new Path(containerWorkDir, ContainerLaunch.FINAL_CONTAINER_TOKENS_FILE)-->Line_21 $$ lfs.util().copy(nmPrivateTokensPath, tokenDst)[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_15 $$ createContainerLogDirs(appIdStr, containerIdStr, logDirs)[ CD ]
Line_18 $$ Path launchDst = new Path(containerWorkDir, ContainerLaunch.CONTAINER_SCRIPT)-->Line_28 $$ sb.writeLocalWrapperScript(launchDst, pidFile)[ FD ]
Line_53 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_58 $$ builder.append("Exit code: " + exitCode + "\n")[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_21 $$ lfs.util().copy(nmPrivateTokensPath, tokenDst)[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_5 $$ String containerIdStr = ConverterUtils.toString(containerId)[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateContainerScriptPath, Path nmPrivateTokensPath, String userName, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_16 $$ Path tmpDir = new Path(containerWorkDir, YarnConfiguration.DEFAULT_CONTAINER_TEMP_DIR)[ CD ]
Line_4 $$ ContainerId containerId = container.getContainerId()-->Line_6 $$ String appIdStr = ConverterUtils.toString(containerId.getApplicationAttemptId().getApplicationId())[ FD ]
Line_41 $$ if (isContainerActive(containerId)) -->Line_44 $$ LOG.info("Container " + containerIdStr + " was marked as inactive. Returning terminated error")[ CD ]
