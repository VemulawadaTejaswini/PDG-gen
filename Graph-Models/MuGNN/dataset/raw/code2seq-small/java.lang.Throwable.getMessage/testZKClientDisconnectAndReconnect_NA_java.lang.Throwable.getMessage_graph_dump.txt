Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_3 $$ TestZKClient zkClientTester = new TestZKClient()[ CD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_11 $$ store.getDataWithRetries(path, true)[ CD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_8 $$ TestDispatcher dispatcher = new TestDispatcher()[ CD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_13 $$ stopServer()[ CD ]
Line_4 $$ String path = "/test"-->Line_16 $$ store.getDataWithRetries(path, true)[ FD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_31 $$ assertEquals("newBytes", new String(ret))[ CD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_10 $$ store.createWithRetries(path, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT)[ CD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_7 $$ ZKRMStateStore store = (ZKRMStateStore) zkClientTester.getRMStateStore(conf)[ CD ]
Line_7 $$ ZKRMStateStore store = (ZKRMStateStore) zkClientTester.getRMStateStore(conf)-->Line_25 $$ ret = store.getDataWithRetries(path, true)[ FD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_23 $$ byte[] ret = null[ CD ]
Line_5 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_7 $$ ZKRMStateStore store = (ZKRMStateStore) zkClientTester.getRMStateStore(conf)[ FD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_12 $$ store.setDataWithRetries(path, "newBytes".getBytes(), 0)[ CD ]
Line_4 $$ String path = "/test"-->Line_11 $$ store.getDataWithRetries(path, true)[ FD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_4 $$ String path = "/test"[ CD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_6 $$ conf.setInt(YarnConfiguration.RM_ZK_TIMEOUT_MS, ZK_TIMEOUT_MS)[ CD ]
Line_4 $$ String path = "/test"-->Line_25 $$ ret = store.getDataWithRetries(path, true)[ FD ]
Line_27 $$ String error = "ZKRMStateStore Session restore failed"-->Line_29 $$ fail(error)[ FD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_9 $$ store.setRMDispatcher(dispatcher)[ CD ]
Line_8 $$ TestDispatcher dispatcher = new TestDispatcher()-->Line_9 $$ store.setRMDispatcher(dispatcher)[ FD ]
Line_4 $$ String path = "/test"-->Line_12 $$ store.setDataWithRetries(path, "newBytes".getBytes(), 0)[ FD ]
Line_7 $$ ZKRMStateStore store = (ZKRMStateStore) zkClientTester.getRMStateStore(conf)-->Line_11 $$ store.getDataWithRetries(path, true)[ FD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_5 $$ YarnConfiguration conf = new YarnConfiguration()[ CD ]
Line_5 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_6 $$ conf.setInt(YarnConfiguration.RM_ZK_TIMEOUT_MS, ZK_TIMEOUT_MS)[ FD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_21 $$ startServer()[ CD ]
Line_7 $$ ZKRMStateStore store = (ZKRMStateStore) zkClientTester.getRMStateStore(conf)-->Line_12 $$ store.setDataWithRetries(path, "newBytes".getBytes(), 0)[ FD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_14 $$ zkClientTester.watcher.waitForDisconnected(ZK_OP_WAIT_TIME)[ CD ]
Line_27 $$ String error = "ZKRMStateStore Session restore failed"-->Line_28 $$ LOG.error(error, e)[ FD ]
Line_23 $$ byte[] ret = null-->Line_25 $$ ret = store.getDataWithRetries(path, true)[ FD ]
Line_7 $$ ZKRMStateStore store = (ZKRMStateStore) zkClientTester.getRMStateStore(conf)-->Line_16 $$ store.getDataWithRetries(path, true)[ FD ]
Line_7 $$ ZKRMStateStore store = (ZKRMStateStore) zkClientTester.getRMStateStore(conf)-->Line_10 $$ store.createWithRetries(path, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT)[ FD ]
Line_7 $$ ZKRMStateStore store = (ZKRMStateStore) zkClientTester.getRMStateStore(conf)-->Line_9 $$ store.setRMDispatcher(dispatcher)[ FD ]
Line_2 $$ public void testZKClientDisconnectAndReconnect() throws Exception -->Line_22 $$ zkClientTester.watcher.waitForConnected(ZK_OP_WAIT_TIME)[ CD ]
Line_4 $$ String path = "/test"-->Line_10 $$ store.createWithRetries(path, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT)[ FD ]
Line_3 $$ TestZKClient zkClientTester = new TestZKClient()-->Line_7 $$ ZKRMStateStore store = (ZKRMStateStore) zkClientTester.getRMStateStore(conf)[ FD ]
