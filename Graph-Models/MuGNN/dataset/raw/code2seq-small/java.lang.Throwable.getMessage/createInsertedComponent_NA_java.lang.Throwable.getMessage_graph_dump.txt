Line_31 $$ result = new RadAtomicComponent(editor, aClass, id)-->Line_48 $$ result.init(editor, item)[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_5 $$ final ClassLoader loader = LoaderFactory.getInstance(editor.getProject()).getLoader(editor.getFile())[ CD ]
Line_22 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorMessage)-->Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)[ FD ]
Line_5 $$ final ClassLoader loader = LoaderFactory.getInstance(editor.getProject()).getLoader(editor.getFile())-->Line_6 $$ RadComponentFactory factory = getRadComponentFactory(item.getClassName(), loader)[ FD ]
Line_3 $$ RadComponent result-->Line_48 $$ result.init(editor, item)[ FD ]
Line_21 $$ String errorMessage = UIDesignerBundle.message("error.instantiating.nested.form", formFileName, (ex.getMessage() != null ? ex.getMessage() : ex.toString()))-->Line_22 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorMessage)[ FD ]
Line_27 $$ if (item.isContainer()) -->Line_28 $$ LOG.debug("Creating custom container instance")[ CD ]
Line_3 $$ RadComponent result-->Line_29 $$ result = new RadContainer(editor, aClass, id)[ FD ]
Line_9 $$ result = factory.newInstance(editor, item.getClassName(), id)-->Line_48 $$ result.init(editor, item)[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_36 $$ String errorDescription = Utils.validateJComponentClass(loader, item.getClassName(), true)[ FD ]
Line_39 $$ final String message = FormEditingUtil.getExceptionMessage(exc)-->Line_41 $$ errorDescription += ": " + message[ FD ]
Line_4 $$ final String id = FormEditingUtil.generateId(editor.getRootContainer())-->Line_22 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorMessage)[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_4 $$ final String id = FormEditingUtil.generateId(editor.getRootContainer())[ FD ]
Line_29 $$ result = new RadContainer(editor, aClass, id)-->Line_48 $$ result.init(editor, item)[ FD ]
Line_16 $$ if (boundForm != null) -->Line_17 $$ final String formFileName = FormEditingUtil.buildResourceName(boundForm)[ CD ]
Line_4 $$ final String id = FormEditingUtil.generateId(editor.getRootContainer())-->Line_9 $$ result = factory.newInstance(editor, item.getClassName(), id)[ FD ]
Line_17 $$ final String formFileName = FormEditingUtil.buildResourceName(boundForm)-->Line_21 $$ String errorMessage = UIDesignerBundle.message("error.instantiating.nested.form", formFileName, (ex.getMessage() != null ? ex.getMessage() : ex.toString()))[ FD ]
Line_7 $$ if (factory != null) -->Line_16 $$ if (boundForm != null) [ CD ]
Line_27 $$ if (item.isContainer()) -->Line_31 $$ result = new RadAtomicComponent(editor, aClass, id)[ CD ]
Line_22 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorMessage)-->Line_34 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, UIDesignerBundle.message("unsupported.component.class.version"))[ FD ]
Line_19 $$ result = new RadNestedForm(editor, formFileName, id)-->Line_48 $$ result.init(editor, item)[ FD ]
Line_3 $$ RadComponent result-->Line_31 $$ result = new RadAtomicComponent(editor, aClass, id)[ FD ]
Line_31 $$ result = new RadAtomicComponent(editor, aClass, id)-->Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_6 $$ RadComponentFactory factory = getRadComponentFactory(item.getClassName(), loader)[ CD ]
Line_3 $$ RadComponent result-->Line_19 $$ result = new RadNestedForm(editor, formFileName, id)[ FD ]
Line_5 $$ final ClassLoader loader = LoaderFactory.getInstance(editor.getProject()).getLoader(editor.getFile())-->Line_26 $$ final Class aClass = Class.forName(item.getClassName(), true, loader)[ FD ]
Line_9 $$ result = factory.newInstance(editor, item.getClassName(), id)-->Line_29 $$ result = new RadContainer(editor, aClass, id)[ FD ]
Line_15 $$ PsiFile boundForm = item.getBoundForm()-->Line_16 $$ if (boundForm != null) [ FD ]
Line_19 $$ result = new RadNestedForm(editor, formFileName, id)-->Line_31 $$ result = new RadAtomicComponent(editor, aClass, id)[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_22 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorMessage)[ FD ]
Line_37 $$ if (errorDescription == null) -->Line_38 $$ errorDescription = UIDesignerBundle.message("error.class.cannot.be.instantiated", item.getClassName())[ CD ]
Line_9 $$ result = factory.newInstance(editor, item.getClassName(), id)-->Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)[ FD ]
Line_19 $$ result = new RadNestedForm(editor, formFileName, id)-->Line_34 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, UIDesignerBundle.message("unsupported.component.class.version"))[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_5 $$ final ClassLoader loader = LoaderFactory.getInstance(editor.getProject()).getLoader(editor.getFile())[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_3 $$ RadComponent result[ CD ]
Line_34 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, UIDesignerBundle.message("unsupported.component.class.version"))-->Line_48 $$ result.init(editor, item)[ FD ]
Line_7 $$ if (factory != null) -->Line_15 $$ PsiFile boundForm = item.getBoundForm()[ CD ]
Line_31 $$ result = new RadAtomicComponent(editor, aClass, id)-->Line_34 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, UIDesignerBundle.message("unsupported.component.class.version"))[ FD ]
Line_22 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorMessage)-->Line_48 $$ result.init(editor, item)[ FD ]
Line_4 $$ final String id = FormEditingUtil.generateId(editor.getRootContainer())-->Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_34 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, UIDesignerBundle.message("unsupported.component.class.version"))[ FD ]
Line_36 $$ String errorDescription = Utils.validateJComponentClass(loader, item.getClassName(), true)-->Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)[ FD ]
Line_36 $$ String errorDescription = Utils.validateJComponentClass(loader, item.getClassName(), true)-->Line_37 $$ if (errorDescription == null) [ FD ]
Line_29 $$ result = new RadContainer(editor, aClass, id)-->Line_31 $$ result = new RadAtomicComponent(editor, aClass, id)[ FD ]
Line_19 $$ result = new RadNestedForm(editor, formFileName, id)-->Line_22 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorMessage)[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_7 $$ if (factory != null) [ CD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_6 $$ RadComponentFactory factory = getRadComponentFactory(item.getClassName(), loader)[ FD ]
Line_29 $$ result = new RadContainer(editor, aClass, id)-->Line_34 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, UIDesignerBundle.message("unsupported.component.class.version"))[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)[ FD ]
Line_34 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, UIDesignerBundle.message("unsupported.component.class.version"))-->Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)[ FD ]
Line_38 $$ errorDescription = UIDesignerBundle.message("error.class.cannot.be.instantiated", item.getClassName())-->Line_41 $$ errorDescription += ": " + message[ FD ]
Line_3 $$ RadComponent result-->Line_22 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorMessage)[ FD ]
Line_36 $$ String errorDescription = Utils.validateJComponentClass(loader, item.getClassName(), true)-->Line_38 $$ errorDescription = UIDesignerBundle.message("error.class.cannot.be.instantiated", item.getClassName())[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_9 $$ result = factory.newInstance(editor, item.getClassName(), id)[ FD ]
Line_38 $$ errorDescription = UIDesignerBundle.message("error.class.cannot.be.instantiated", item.getClassName())-->Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_49 $$ return result[ CD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_4 $$ final String id = FormEditingUtil.generateId(editor.getRootContainer())[ CD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_15 $$ PsiFile boundForm = item.getBoundForm()[ FD ]
Line_9 $$ result = factory.newInstance(editor, item.getClassName(), id)-->Line_22 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorMessage)[ FD ]
Line_5 $$ final ClassLoader loader = LoaderFactory.getInstance(editor.getProject()).getLoader(editor.getFile())-->Line_36 $$ String errorDescription = Utils.validateJComponentClass(loader, item.getClassName(), true)[ FD ]
Line_27 $$ if (item.isContainer()) -->Line_29 $$ result = new RadContainer(editor, aClass, id)[ CD ]
Line_3 $$ RadComponent result-->Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)[ FD ]
Line_9 $$ result = factory.newInstance(editor, item.getClassName(), id)-->Line_19 $$ result = new RadNestedForm(editor, formFileName, id)[ FD ]
Line_22 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorMessage)-->Line_31 $$ result = new RadAtomicComponent(editor, aClass, id)[ FD ]
Line_36 $$ String errorDescription = Utils.validateJComponentClass(loader, item.getClassName(), true)-->Line_41 $$ errorDescription += ": " + message[ FD ]
Line_15 $$ PsiFile boundForm = item.getBoundForm()-->Line_17 $$ final String formFileName = FormEditingUtil.buildResourceName(boundForm)[ FD ]
Line_29 $$ result = new RadContainer(editor, aClass, id)-->Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)[ FD ]
Line_3 $$ RadComponent result-->Line_34 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, UIDesignerBundle.message("unsupported.component.class.version"))[ FD ]
Line_6 $$ RadComponentFactory factory = getRadComponentFactory(item.getClassName(), loader)-->Line_9 $$ result = factory.newInstance(editor, item.getClassName(), id)[ FD ]
Line_37 $$ if (errorDescription == null) -->Line_40 $$ if (message != null) [ CD ]
Line_41 $$ errorDescription += ": " + message-->Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_48 $$ result.init(editor, item)[ FD ]
Line_19 $$ result = new RadNestedForm(editor, formFileName, id)-->Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)[ FD ]
Line_37 $$ if (errorDescription == null) -->Line_39 $$ final String message = FormEditingUtil.getExceptionMessage(exc)[ CD ]
Line_4 $$ final String id = FormEditingUtil.generateId(editor.getRootContainer())-->Line_34 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, UIDesignerBundle.message("unsupported.component.class.version"))[ FD ]
Line_39 $$ final String message = FormEditingUtil.getExceptionMessage(exc)-->Line_40 $$ if (message != null) [ FD ]
Line_40 $$ if (message != null) -->Line_41 $$ errorDescription += ": " + message[ CD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_48 $$ result.init(editor, item)[ CD ]
Line_44 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorDescription)-->Line_48 $$ result.init(editor, item)[ FD ]
Line_19 $$ result = new RadNestedForm(editor, formFileName, id)-->Line_29 $$ result = new RadContainer(editor, aClass, id)[ FD ]
Line_9 $$ result = factory.newInstance(editor, item.getClassName(), id)-->Line_31 $$ result = new RadAtomicComponent(editor, aClass, id)[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_26 $$ final Class aClass = Class.forName(item.getClassName(), true, loader)[ FD ]
Line_6 $$ RadComponentFactory factory = getRadComponentFactory(item.getClassName(), loader)-->Line_7 $$ if (factory != null) [ FD ]
Line_9 $$ result = factory.newInstance(editor, item.getClassName(), id)-->Line_34 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, UIDesignerBundle.message("unsupported.component.class.version"))[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_27 $$ if (item.isContainer()) [ FD ]
Line_22 $$ result = RadErrorComponent.create(editor, id, item.getClassName(), null, errorMessage)-->Line_29 $$ result = new RadContainer(editor, aClass, id)[ FD ]
Line_2 $$ public static RadComponent createInsertedComponent(GuiEditor editor, ComponentItem item) -->Line_38 $$ errorDescription = UIDesignerBundle.message("error.class.cannot.be.instantiated", item.getClassName())[ FD ]
Line_3 $$ RadComponent result-->Line_9 $$ result = factory.newInstance(editor, item.getClassName(), id)[ FD ]
