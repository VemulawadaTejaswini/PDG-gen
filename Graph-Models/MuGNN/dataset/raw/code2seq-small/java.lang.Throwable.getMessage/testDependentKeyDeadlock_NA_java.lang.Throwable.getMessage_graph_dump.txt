Line_26 $$ Thread thread = new Thread(() -> -->Line_46 $$ threads.add(thread)[ FD ]
Line_33 $$ if (k.key == 0) -->Line_34 $$ return 0[ CD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_51 $$ ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1)[ CD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_71 $$ assertFalse("deadlock", deadlock.get())[ CD ]
Line_58 $$ if (ids.contains(deadlockedThread)) -->Line_60 $$ for (int i = 0; i < numberOfThreads; i++) [ CD ]
Line_29 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_30 $$ Key key = new Key(random.nextInt(numberOfEntries))[ CD ]
Line_25 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_60 $$ for (int i = 0; i < numberOfThreads; i++) [ FD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_20 $$ int numberOfThreads = randomIntBetween(2, 32)[ CD ]
Line_3 $$ class Key -->Line_9 $$ if (this == o)[ CD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_25 $$ for (int i = 0; i < numberOfThreads; i++) [ CD ]
Line_3 $$ class Key -->Line_11 $$ if (o == null || getClass() != o.getClass())[ FD ]
Line_58 $$ if (ids.contains(deadlockedThread)) -->Line_59 $$ deadlock.set(true)[ CD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_69 $$ deadlockLatch.await()[ CD ]
Line_25 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_46 $$ threads.add(thread)[ CD ]
Line_3 $$ class Key -->Line_13 $$ Key key1 = (Key) o[ CD ]
Line_3 $$ class Key -->Line_17 $$ return key % 2[ CD ]
Line_3 $$ class Key -->Line_14 $$ return key == key1.key[ CD ]
Line_3 $$ class Key -->Line_11 $$ if (o == null || getClass() != o.getClass())[ CD ]
Line_33 $$ if (k.key == 0) -->Line_36 $$ Integer value = cache.get(new Key(k.key / 2))[ CD ]
Line_27 $$ Random random = new Random(random().nextLong())-->Line_30 $$ Key key = new Key(random.nextInt(numberOfEntries))[ FD ]
Line_33 $$ if (k.key == 0) -->Line_37 $$ return value != null ? value : 0[ CD ]
Line_9 $$ if (this == o)-->Line_10 $$ return true[ CD ]
Line_11 $$ if (o == null || getClass() != o.getClass())-->Line_12 $$ return false[ CD ]
Line_3 $$ class Key -->Line_9 $$ if (this == o)[ FD ]
Line_26 $$ Thread thread = new Thread(() -> -->Line_47 $$ thread.start()[ FD ]
Line_25 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_26 $$ Thread thread = new Thread(() -> [ CD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_21 $$ final Cache<Key, Integer> cache = CacheBuilder.<Key, Integer>builder().build()[ CD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_52 $$ scheduler.scheduleAtFixedRate(() -> [ CD ]
Line_30 $$ Key key = new Key(random.nextInt(numberOfEntries))-->Line_32 $$ cache.computeIfAbsent(key,  k -> [ FD ]
Line_60 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_61 $$ deadlockLatch.countDown()[ CD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_68 $$ latch.countDown()[ CD ]
Line_25 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_47 $$ thread.start()[ CD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_70 $$ scheduler.shutdown()[ CD ]
