Line_2 $$ public void verify() -->Line_4 $$ this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("2", MediaType.TEXT_PLAIN))[ CD ]
Line_2 $$ public void verify() -->Line_3 $$ this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("1", MediaType.TEXT_PLAIN))[ CD ]
Line_2 $$ public void verify() -->Line_8 $$ result = this.restTemplate.getForEntity("/number", String.class)[ CD ]
Line_2 $$ public void verify() -->Line_6 $$ this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("8", MediaType.TEXT_PLAIN))[ CD ]
Line_7 $$ ListenableFuture<ResponseEntity<String>> result = this.restTemplate.getForEntity("/number", String.class)-->Line_8 $$ result = this.restTemplate.getForEntity("/number", String.class)[ FD ]
Line_2 $$ public void verify() -->Line_7 $$ ListenableFuture<ResponseEntity<String>> result = this.restTemplate.getForEntity("/number", String.class)[ CD ]
Line_2 $$ public void verify() -->Line_5 $$ this.mockServer.expect(requestTo("/number")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("4", MediaType.TEXT_PLAIN))[ CD ]
