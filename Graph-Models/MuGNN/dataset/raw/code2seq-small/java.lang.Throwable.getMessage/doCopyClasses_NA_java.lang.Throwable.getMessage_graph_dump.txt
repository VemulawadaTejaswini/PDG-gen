Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_22 $$ final PsiFile createdFile = copy(psiFile, targetDirectory, copyClassName, map == null ? null : map.get(psiFile), choice)[ FD ]
Line_21 $$ if (psiFile instanceof PsiClassOwner && sources != null) -->Line_22 $$ final PsiFile createdFile = copy(psiFile, targetDirectory, copyClassName, map == null ? null : map.get(psiFile), choice)[ CD ]
Line_46 $$ final String relativePath = map != null ? map.get(file) : null-->Line_48 $$ finalTarget = buildRelativeDir(targetDirectory, relativePath).findOrCreateTargetDirectory()[ FD ]
Line_3 $$ PsiElement newElement = null-->Line_32 $$ newElement = destination.replace(copy)[ FD ]
Line_25 $$ for (final PsiClass destination : ((PsiClassOwner) createdFile).getClasses()) -->Line_32 $$ newElement = destination.replace(copy)[ FD ]
Line_19 $$ final PsiFile psiFile = entry.getKey()-->Line_68 $$ if (psiFile instanceof PsiJavaFile) [ FD ]
Line_17 $$ List<PsiFile> files = new ArrayList<PsiFile>()-->Line_40 $$ files.add(psiFile)[ FD ]
Line_21 $$ if (psiFile instanceof PsiClassOwner && sources != null) -->Line_38 $$ createdFiles.add(createdFile)[ CD ]
Line_72 $$ for (PsiElement expression : rebindExpressions) -->Line_74 $$ codeStyleManager.shortenClassReferences(expression)[ FD ]
Line_43 $$ for (PsiFile file : files) -->Line_46 $$ final String relativePath = map != null ? map.get(file) : null[ FD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_17 $$ List<PsiFile> files = new ArrayList<PsiFile>()[ CD ]
Line_3 $$ PsiElement newElement = null-->Line_33 $$ oldToNewMap.put(source, newElement)[ FD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_4 $$ final Map<PsiClass, PsiElement> oldToNewMap = new HashMap<PsiClass, PsiElement>()[ CD ]
Line_66 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_69 $$ codeStyleManager.removeRedundantImports((PsiJavaFile) psiFile)[ FD ]
Line_50 $$ final PsiFile fileCopy = CopyFilesOrDirectoriesHandler.copyToDirectory(file, getNewFileName(file, copyClassName), finalTarget, choice)-->Line_52 $$ createdFiles.add(fileCopy)[ FD ]
Line_30 $$ if (source != null) -->Line_31 $$ final PsiClass copy = copy(source, copyClassName)[ CD ]
Line_45 $$ PsiDirectory finalTarget = targetDirectory-->Line_50 $$ final PsiFile fileCopy = CopyFilesOrDirectoriesHandler.copyToDirectory(file, getNewFileName(file, copyClassName), finalTarget, choice)[ FD ]
Line_18 $$ for (final Map.Entry<PsiFile, PsiClass[]> entry : fileToClasses.entrySet()) -->Line_20 $$ final PsiClass[] sources = entry.getValue()[ FD ]
Line_22 $$ final PsiFile createdFile = copy(psiFile, targetDirectory, copyClassName, map == null ? null : map.get(psiFile), choice)-->Line_38 $$ createdFiles.add(createdFile)[ FD ]
Line_20 $$ final PsiClass[] sources = entry.getValue()-->Line_29 $$ PsiClass source = findByName(sources, destination.getName())[ FD ]
Line_46 $$ final String relativePath = map != null ? map.get(file) : null-->Line_47 $$ if (relativePath != null && !relativePath.isEmpty()) [ FD ]
Line_25 $$ for (final PsiClass destination : ((PsiClassOwner) createdFile).getClasses()) -->Line_35 $$ destination.delete()[ FD ]
Line_16 $$ int[] choice = fileToClasses.size() > 1 ? new int[] -->Line_22 $$ final PsiFile createdFile = copy(psiFile, targetDirectory, copyClassName, map == null ? null : map.get(psiFile), choice)[ FD ]
Line_29 $$ PsiClass source = findByName(sources, destination.getName())-->Line_31 $$ final PsiClass copy = copy(source, copyClassName)[ FD ]
Line_48 $$ finalTarget = buildRelativeDir(targetDirectory, relativePath).findOrCreateTargetDirectory()-->Line_50 $$ final PsiFile fileCopy = CopyFilesOrDirectoriesHandler.copyToDirectory(file, getNewFileName(file, copyClassName), finalTarget, choice)[ FD ]
Line_73 $$ if (expression.isValid()) -->Line_74 $$ codeStyleManager.shortenClassReferences(expression)[ CD ]
Line_43 $$ for (PsiFile file : files) -->Line_50 $$ final PsiFile fileCopy = CopyFilesOrDirectoriesHandler.copyToDirectory(file, getNewFileName(file, copyClassName), finalTarget, choice)[ FD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_66 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)[ CD ]
Line_15 $$ final List<PsiFile> createdFiles = new ArrayList<PsiFile>(fileToClasses.size())-->Line_77 $$ new OptimizeImportsProcessor(project, createdFiles.toArray(new PsiFile[createdFiles.size()]), null).run()[ FD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_15 $$ final List<PsiFile> createdFiles = new ArrayList<PsiFile>(fileToClasses.size())[ CD ]
Line_31 $$ final PsiClass copy = copy(source, copyClassName)-->Line_32 $$ newElement = destination.replace(copy)[ FD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_66 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)[ FD ]
Line_7 $$ for (PsiClass aClass : psiClasses) -->Line_8 $$ if (isSynthetic(aClass)) [ FD ]
Line_19 $$ final PsiFile psiFile = entry.getKey()-->Line_22 $$ final PsiFile createdFile = copy(psiFile, targetDirectory, copyClassName, map == null ? null : map.get(psiFile), choice)[ FD ]
Line_58 $$ final Set<PsiElement> rebindExpressions = new HashSet<PsiElement>()-->Line_64 $$ decodeRefs(element, oldToNewMap, rebindExpressions)[ FD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_16 $$ int[] choice = fileToClasses.size() > 1 ? new int[] [ FD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_46 $$ final String relativePath = map != null ? map.get(file) : null[ FD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_58 $$ final Set<PsiElement> rebindExpressions = new HashSet<PsiElement>()[ CD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_5 $$ for (final PsiClass[] psiClasses : fileToClasses.values()) [ FD ]
Line_29 $$ PsiClass source = findByName(sources, destination.getName())-->Line_33 $$ oldToNewMap.put(source, newElement)[ FD ]
Line_15 $$ final List<PsiFile> createdFiles = new ArrayList<PsiFile>(fileToClasses.size())-->Line_38 $$ createdFiles.add(createdFile)[ FD ]
Line_30 $$ if (source != null) -->Line_35 $$ destination.delete()[ CD ]
Line_66 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_74 $$ codeStyleManager.shortenClassReferences(expression)[ FD ]
Line_4 $$ final Map<PsiClass, PsiElement> oldToNewMap = new HashMap<PsiClass, PsiElement>()-->Line_11 $$ oldToNewMap.put(aClass, null)[ FD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_18 $$ for (final Map.Entry<PsiFile, PsiClass[]> entry : fileToClasses.entrySet()) [ FD ]
Line_15 $$ final List<PsiFile> createdFiles = new ArrayList<PsiFile>(fileToClasses.size())-->Line_52 $$ createdFiles.add(fileCopy)[ FD ]
Line_47 $$ if (relativePath != null && !relativePath.isEmpty()) -->Line_48 $$ finalTarget = buildRelativeDir(targetDirectory, relativePath).findOrCreateTargetDirectory()[ CD ]
Line_25 $$ for (final PsiClass destination : ((PsiClassOwner) createdFile).getClasses()) -->Line_26 $$ if (isSynthetic(destination)) [ FD ]
Line_30 $$ if (source != null) -->Line_33 $$ oldToNewMap.put(source, newElement)[ CD ]
Line_72 $$ for (PsiElement expression : rebindExpressions) -->Line_73 $$ if (expression.isValid()) [ FD ]
Line_19 $$ final PsiFile psiFile = entry.getKey()-->Line_40 $$ files.add(psiFile)[ FD ]
Line_4 $$ final Map<PsiClass, PsiElement> oldToNewMap = new HashMap<PsiClass, PsiElement>()-->Line_59 $$ for (PsiElement element : oldToNewMap.values()) [ FD ]
Line_50 $$ final PsiFile fileCopy = CopyFilesOrDirectoriesHandler.copyToDirectory(file, getNewFileName(file, copyClassName), finalTarget, choice)-->Line_51 $$ if (fileCopy != null) [ FD ]
Line_22 $$ final PsiFile createdFile = copy(psiFile, targetDirectory, copyClassName, map == null ? null : map.get(psiFile), choice)-->Line_23 $$ if (createdFile == null)[ FD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_3 $$ PsiElement newElement = null[ CD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_78 $$ return createdFiles[ CD ]
Line_51 $$ if (fileCopy != null) -->Line_52 $$ createdFiles.add(fileCopy)[ CD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_15 $$ final List<PsiFile> createdFiles = new ArrayList<PsiFile>(fileToClasses.size())[ FD ]
Line_5 $$ for (final PsiClass[] psiClasses : fileToClasses.values()) -->Line_6 $$ if (psiClasses != null) [ FD ]
Line_23 $$ if (createdFile == null)-->Line_24 $$ return null[ CD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_48 $$ finalTarget = buildRelativeDir(targetDirectory, relativePath).findOrCreateTargetDirectory()[ FD ]
Line_16 $$ int[] choice = fileToClasses.size() > 1 ? new int[] -->Line_50 $$ final PsiFile fileCopy = CopyFilesOrDirectoriesHandler.copyToDirectory(file, getNewFileName(file, copyClassName), finalTarget, choice)[ FD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_16 $$ int[] choice = fileToClasses.size() > 1 ? new int[] [ CD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_50 $$ final PsiFile fileCopy = CopyFilesOrDirectoriesHandler.copyToDirectory(file, getNewFileName(file, copyClassName), finalTarget, choice)[ FD ]
Line_25 $$ for (final PsiClass destination : ((PsiClassOwner) createdFile).getClasses()) -->Line_29 $$ PsiClass source = findByName(sources, destination.getName())[ FD ]
Line_18 $$ for (final Map.Entry<PsiFile, PsiClass[]> entry : fileToClasses.entrySet()) -->Line_19 $$ final PsiFile psiFile = entry.getKey()[ FD ]
Line_21 $$ if (psiFile instanceof PsiClassOwner && sources != null) -->Line_40 $$ files.add(psiFile)[ CD ]
Line_32 $$ newElement = destination.replace(copy)-->Line_33 $$ oldToNewMap.put(source, newElement)[ FD ]
Line_60 $$ if (element == null) -->Line_61 $$ LOG.error(oldToNewMap.keySet())[ CD ]
Line_29 $$ PsiClass source = findByName(sources, destination.getName())-->Line_30 $$ if (source != null) [ FD ]
Line_21 $$ if (psiFile instanceof PsiClassOwner && sources != null) -->Line_23 $$ if (createdFile == null)[ CD ]
Line_45 $$ PsiDirectory finalTarget = targetDirectory-->Line_48 $$ finalTarget = buildRelativeDir(targetDirectory, relativePath).findOrCreateTargetDirectory()[ FD ]
Line_4 $$ final Map<PsiClass, PsiElement> oldToNewMap = new HashMap<PsiClass, PsiElement>()-->Line_61 $$ LOG.error(oldToNewMap.keySet())[ FD ]
Line_7 $$ for (PsiClass aClass : psiClasses) -->Line_11 $$ oldToNewMap.put(aClass, null)[ FD ]
Line_4 $$ final Map<PsiClass, PsiElement> oldToNewMap = new HashMap<PsiClass, PsiElement>()-->Line_64 $$ decodeRefs(element, oldToNewMap, rebindExpressions)[ FD ]
Line_59 $$ for (PsiElement element : oldToNewMap.values()) -->Line_60 $$ if (element == null) [ FD ]
Line_4 $$ final Map<PsiClass, PsiElement> oldToNewMap = new HashMap<PsiClass, PsiElement>()-->Line_33 $$ oldToNewMap.put(source, newElement)[ FD ]
Line_30 $$ if (source != null) -->Line_32 $$ newElement = destination.replace(copy)[ CD ]
Line_68 $$ if (psiFile instanceof PsiJavaFile) -->Line_69 $$ codeStyleManager.removeRedundantImports((PsiJavaFile) psiFile)[ CD ]
Line_59 $$ for (PsiElement element : oldToNewMap.values()) -->Line_64 $$ decodeRefs(element, oldToNewMap, rebindExpressions)[ FD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_77 $$ new OptimizeImportsProcessor(project, createdFiles.toArray(new PsiFile[createdFiles.size()]), null).run()[ CD ]
Line_2 $$ public static Collection<PsiFile> doCopyClasses(final Map<PsiFile, PsiClass[]> fileToClasses, @Nullable HashMap<PsiFile, String> map, final String copyClassName, final PsiDirectory targetDirectory, final Project project) throws IncorrectOperationException -->Line_31 $$ final PsiClass copy = copy(source, copyClassName)[ FD ]
