Line_4 $$ if (value == null) -->Line_5 $$ return null[ CD ]
Line_2 $$ protected Object visitArithmeticUnary(ArithmeticUnaryExpression node, Object context) -->Line_7 $$ if (value instanceof Expression) [ CD ]
Line_14 $$ Signature operatorSignature = metadata.getFunctionRegistry().resolveOperator(OperatorType.NEGATION, types(node.getValue()))-->Line_15 $$ MethodHandle handle = metadata.getFunctionRegistry().getScalarFunctionImplementation(operatorSignature).getMethodHandle()[ FD ]
Line_17 $$ handle = handle.bindTo(session)-->Line_20 $$ return handle.invokeWithArguments(value)[ FD ]
Line_2 $$ protected Object visitArithmeticUnary(ArithmeticUnaryExpression node, Object context) -->Line_10 $$ switch(node.getSign()) [ FD ]
Line_15 $$ MethodHandle handle = metadata.getFunctionRegistry().getScalarFunctionImplementation(operatorSignature).getMethodHandle()-->Line_17 $$ handle = handle.bindTo(session)[ FD ]
Line_3 $$ Object value = process(node.getValue(), context)-->Line_8 $$ return new ArithmeticUnaryExpression(node.getSign(), toExpression(value, expressionTypes.get(node.getValue())))[ FD ]
Line_2 $$ protected Object visitArithmeticUnary(ArithmeticUnaryExpression node, Object context) -->Line_3 $$ Object value = process(node.getValue(), context)[ CD ]
Line_3 $$ Object value = process(node.getValue(), context)-->Line_7 $$ if (value instanceof Expression) [ FD ]
Line_15 $$ MethodHandle handle = metadata.getFunctionRegistry().getScalarFunctionImplementation(operatorSignature).getMethodHandle()-->Line_20 $$ return handle.invokeWithArguments(value)[ FD ]
Line_7 $$ if (value instanceof Expression) -->Line_8 $$ return new ArithmeticUnaryExpression(node.getSign(), toExpression(value, expressionTypes.get(node.getValue())))[ CD ]
Line_2 $$ protected Object visitArithmeticUnary(ArithmeticUnaryExpression node, Object context) -->Line_3 $$ Object value = process(node.getValue(), context)[ FD ]
Line_2 $$ protected Object visitArithmeticUnary(ArithmeticUnaryExpression node, Object context) -->Line_14 $$ Signature operatorSignature = metadata.getFunctionRegistry().resolveOperator(OperatorType.NEGATION, types(node.getValue()))[ FD ]
Line_2 $$ protected Object visitArithmeticUnary(ArithmeticUnaryExpression node, Object context) -->Line_8 $$ return new ArithmeticUnaryExpression(node.getSign(), toExpression(value, expressionTypes.get(node.getValue())))[ FD ]
Line_2 $$ protected Object visitArithmeticUnary(ArithmeticUnaryExpression node, Object context) -->Line_4 $$ if (value == null) [ CD ]
Line_3 $$ Object value = process(node.getValue(), context)-->Line_20 $$ return handle.invokeWithArguments(value)[ FD ]
Line_16 $$ if (handle.type().parameterCount() > 0 && handle.type().parameterType(0) == ConnectorSession.class) -->Line_17 $$ handle = handle.bindTo(session)[ CD ]
Line_3 $$ Object value = process(node.getValue(), context)-->Line_4 $$ if (value == null) [ FD ]
Line_2 $$ protected Object visitArithmeticUnary(ArithmeticUnaryExpression node, Object context) -->Line_27 $$ throw new UnsupportedOperationException("Unsupported unary operator: " + node.getSign())[ FD ]
Line_15 $$ MethodHandle handle = metadata.getFunctionRegistry().getScalarFunctionImplementation(operatorSignature).getMethodHandle()-->Line_16 $$ if (handle.type().parameterCount() > 0 && handle.type().parameterType(0) == ConnectorSession.class) [ FD ]
