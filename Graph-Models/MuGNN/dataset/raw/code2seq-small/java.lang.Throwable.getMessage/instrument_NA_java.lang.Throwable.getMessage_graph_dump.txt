Line_2 $$ protected BinaryContent instrument(CompileContext context, CompiledClass compiledClass, ClassReader reader, ClassWriter writer, InstrumentationClassFinder finder) -->Line_9 $$ final File sourceFile = compiledClass.getSourceFile()[ FD ]
Line_4 $$ if (NotNullVerifyingInstrumenter.processClassFile((FailSafeClassReader) reader, writer)) -->Line_5 $$ return new BinaryContent(writer.toByteArray())[ CD ]
Line_9 $$ final File sourceFile = compiledClass.getSourceFile()-->Line_10 $$ String msg = "Cannot instrument " + sourceFile.getName() + ": " + e.getMessage()[ FD ]
Line_2 $$ protected BinaryContent instrument(CompileContext context, CompiledClass compiledClass, ClassReader reader, ClassWriter writer, InstrumentationClassFinder finder) -->Line_4 $$ if (NotNullVerifyingInstrumenter.processClassFile((FailSafeClassReader) reader, writer)) [ FD ]
Line_9 $$ final File sourceFile = compiledClass.getSourceFile()-->Line_11 $$ context.processMessage(new CompilerMessage(getPresentableName(), BuildMessage.Kind.ERROR, msg, sourceFile.getPath()))[ FD ]
Line_2 $$ protected BinaryContent instrument(CompileContext context, CompiledClass compiledClass, ClassReader reader, ClassWriter writer, InstrumentationClassFinder finder) -->Line_5 $$ return new BinaryContent(writer.toByteArray())[ FD ]
Line_2 $$ protected BinaryContent instrument(CompileContext context, CompiledClass compiledClass, ClassReader reader, ClassWriter writer, InstrumentationClassFinder finder) -->Line_13 $$ return null[ CD ]
Line_2 $$ protected BinaryContent instrument(CompileContext context, CompiledClass compiledClass, ClassReader reader, ClassWriter writer, InstrumentationClassFinder finder) -->Line_11 $$ context.processMessage(new CompilerMessage(getPresentableName(), BuildMessage.Kind.ERROR, msg, sourceFile.getPath()))[ FD ]
