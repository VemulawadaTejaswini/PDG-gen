Line_2 $$ public Object getBuildLink(final ClassLoader classLoader, final File projectPath, final File applicationJar, final Iterable<File> changingClasspath, final File assetsJar, final Iterable<File> assetsDirs) throws ClassNotFoundException -->Line_3 $$ final ClassLoader assetsClassLoader = createAssetsClassLoader(assetsJar, assetsDirs, classLoader)[ CD ]
Line_2 $$ public Object getBuildLink(final ClassLoader classLoader, final File projectPath, final File applicationJar, final Iterable<File> changingClasspath, final File assetsJar, final Iterable<File> assetsDirs) throws ClassNotFoundException -->Line_5 $$ reload()[ CD ]
Line_6 $$ return Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_30 $$ if (method.getName().equals("settings")) [ FD ]
Line_30 $$ if (method.getName().equals("settings")) -->Line_31 $$ return new HashMap<String, String>()[ CD ]
Line_12 $$ if (reload.getAndSet(false)) -->Line_13 $$ ClassPath classpath = new DefaultClassPath(applicationJar).plus(new DefaultClassPath(changingClasspath))[ CD ]
Line_12 $$ if (reload.getAndSet(false)) -->Line_19 $$ if (failure == null) [ CD ]
Line_14 $$ URLClassLoader currentClassLoader = new URLClassLoader(classpath.getAsURLArray(), assetsClassLoader)-->Line_15 $$ storeClassLoader(currentClassLoader)[ FD ]
Line_12 $$ if (reload.getAndSet(false)) -->Line_18 $$ Throwable failure = buildFailure[ CD ]
Line_6 $$ return Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_8 $$ if (method.getName().equals("projectPath")) [ CD ]
Line_2 $$ public Object getBuildLink(final ClassLoader classLoader, final File projectPath, final File applicationJar, final Iterable<File> changingClasspath, final File assetsJar, final Iterable<File> assetsDirs) throws ClassNotFoundException -->Line_3 $$ final ClassLoader assetsClassLoader = createAssetsClassLoader(assetsJar, assetsDirs, classLoader)[ FD ]
Line_8 $$ if (method.getName().equals("projectPath")) -->Line_9 $$ return projectPath[ CD ]
Line_6 $$ return Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_10 $$ if (method.getName().equals("reload")) [ FD ]
Line_6 $$ return Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_8 $$ if (method.getName().equals("projectPath")) [ FD ]
Line_19 $$ if (failure == null) -->Line_20 $$ return null[ CD ]
Line_18 $$ Throwable failure = buildFailure-->Line_19 $$ if (failure == null) [ FD ]
Line_2 $$ public Object getBuildLink(final ClassLoader classLoader, final File projectPath, final File applicationJar, final Iterable<File> changingClasspath, final File assetsJar, final Iterable<File> assetsDirs) throws ClassNotFoundException -->Line_4 $$ final Class<? extends Throwable> playExceptionClass = Cast.uncheckedCast(classLoader.loadClass(PLAY_EXCEPTION_CLASSNAME))[ FD ]
Line_12 $$ if (reload.getAndSet(false)) -->Line_16 $$ return currentClassLoader[ CD ]
Line_6 $$ return Proxy.newProxyInstance(classLoader, new Class<?>[] -->Line_33 $$ return null[ CD ]
Line_12 $$ if (reload.getAndSet(false)) -->Line_15 $$ storeClassLoader(currentClassLoader)[ CD ]
Line_2 $$ public Object getBuildLink(final ClassLoader classLoader, final File projectPath, final File applicationJar, final Iterable<File> changingClasspath, final File assetsJar, final Iterable<File> assetsDirs) throws ClassNotFoundException -->Line_6 $$ return Proxy.newProxyInstance(classLoader, new Class<?>[] [ FD ]
Line_10 $$ if (method.getName().equals("reload")) -->Line_11 $$ closeOldLoaders()[ CD ]
Line_13 $$ ClassPath classpath = new DefaultClassPath(applicationJar).plus(new DefaultClassPath(changingClasspath))-->Line_14 $$ URLClassLoader currentClassLoader = new URLClassLoader(classpath.getAsURLArray(), assetsClassLoader)[ FD ]
Line_10 $$ if (method.getName().equals("reload")) -->Line_30 $$ if (method.getName().equals("settings")) [ CD ]
Line_2 $$ public Object getBuildLink(final ClassLoader classLoader, final File projectPath, final File applicationJar, final Iterable<File> changingClasspath, final File assetsJar, final Iterable<File> assetsDirs) throws ClassNotFoundException -->Line_6 $$ return Proxy.newProxyInstance(classLoader, new Class<?>[] [ CD ]
Line_18 $$ Throwable failure = buildFailure-->Line_23 $$ return DirectInstantiator.instantiate(playExceptionClass, "Gradle Build Failure", failure.getMessage(), failure)[ FD ]
Line_12 $$ if (reload.getAndSet(false)) -->Line_14 $$ URLClassLoader currentClassLoader = new URLClassLoader(classpath.getAsURLArray(), assetsClassLoader)[ CD ]
Line_10 $$ if (method.getName().equals("reload")) -->Line_12 $$ if (reload.getAndSet(false)) [ CD ]
Line_4 $$ final Class<? extends Throwable> playExceptionClass = Cast.uncheckedCast(classLoader.loadClass(PLAY_EXCEPTION_CLASSNAME))-->Line_23 $$ return DirectInstantiator.instantiate(playExceptionClass, "Gradle Build Failure", failure.getMessage(), failure)[ FD ]
Line_2 $$ public Object getBuildLink(final ClassLoader classLoader, final File projectPath, final File applicationJar, final Iterable<File> changingClasspath, final File assetsJar, final Iterable<File> assetsDirs) throws ClassNotFoundException -->Line_4 $$ final Class<? extends Throwable> playExceptionClass = Cast.uncheckedCast(classLoader.loadClass(PLAY_EXCEPTION_CLASSNAME))[ CD ]
Line_8 $$ if (method.getName().equals("projectPath")) -->Line_10 $$ if (method.getName().equals("reload")) [ CD ]
