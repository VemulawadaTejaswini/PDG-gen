Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_28 $$ bris.getInputStream()[ FD ]
Line_8 $$ int brisCloses = 0-->Line_21 $$ verify(bris, times(brisCloses)).close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_16 $$ verify(bris, times(brisCloses)).close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_19 $$ bris.getInputStream()[ FD ]
Line_4 $$ InputStream mockStream = mock(InputStream.class)-->Line_22 $$ verify(mockStream, times(++isCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_33 $$ verify(bris, times(++brisCloses)).close()[ CD ]
Line_4 $$ InputStream mockStream = mock(InputStream.class)-->Line_34 $$ verify(mockStream, times(++isCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_20 $$ verify(bris, times(++brisOpens)).openInputStream()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)[ CD ]
Line_7 $$ int brisOpens = 0-->Line_20 $$ verify(bris, times(++brisOpens)).openInputStream()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_23 $$ bris.getInputStream()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_23 $$ bris.getInputStream()[ CD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_6 $$ Whitebox.setInternalState(bris, "status", ByteRangeInputStream.StreamStatus.SEEK)[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_28 $$ bris.getInputStream()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_18 $$ bris.seek(1)[ CD ]
Line_7 $$ int brisOpens = 0-->Line_29 $$ verify(bris, times(brisOpens)).openInputStream()[ FD ]
Line_4 $$ InputStream mockStream = mock(InputStream.class)-->Line_17 $$ verify(mockStream, times(isCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_29 $$ verify(bris, times(brisOpens)).openInputStream()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_36 $$ verify(bris, times(++brisCloses)).close()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_16 $$ verify(bris, times(brisCloses)).close()[ CD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_24 $$ verify(bris, times(brisOpens)).openInputStream()[ FD ]
Line_42 $$ errored = true-->Line_45 $$ assertTrue("Read a closed steam", errored)[ FD ]
Line_8 $$ int brisCloses = 0-->Line_36 $$ verify(bris, times(++brisCloses)).close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_30 $$ verify(bris, times(brisCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_24 $$ verify(bris, times(brisOpens)).openInputStream()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_4 $$ InputStream mockStream = mock(InputStream.class)[ CD ]
Line_8 $$ int brisCloses = 0-->Line_25 $$ verify(bris, times(brisCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_48 $$ verify(bris, times(brisCloses)).close()[ CD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_25 $$ verify(bris, times(brisCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_35 $$ bris.close()[ CD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_5 $$ doReturn(mockStream).when(bris).openInputStream()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_13 $$ verify(mockStream, times(isCloses)).close()[ CD ]
Line_9 $$ int isCloses = 0-->Line_49 $$ verify(mockStream, times(isCloses)).close()[ FD ]
Line_9 $$ int isCloses = 0-->Line_22 $$ verify(mockStream, times(++isCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_11 $$ verify(bris, times(++brisOpens)).openInputStream()[ CD ]
Line_9 $$ int isCloses = 0-->Line_31 $$ verify(mockStream, times(isCloses)).close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_48 $$ verify(bris, times(brisCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_6 $$ Whitebox.setInternalState(bris, "status", ByteRangeInputStream.StreamStatus.SEEK)[ CD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_20 $$ verify(bris, times(++brisOpens)).openInputStream()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_49 $$ verify(mockStream, times(isCloses)).close()[ CD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_15 $$ verify(bris, times(brisOpens)).openInputStream()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_34 $$ verify(mockStream, times(++isCloses)).close()[ CD ]
Line_8 $$ int brisCloses = 0-->Line_33 $$ verify(bris, times(++brisCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_7 $$ int brisOpens = 0[ CD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_33 $$ verify(bris, times(++brisCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_27 $$ bris.seek(1)[ CD ]
Line_4 $$ InputStream mockStream = mock(InputStream.class)-->Line_13 $$ verify(mockStream, times(isCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_10 $$ bris.getInputStream()[ CD ]
Line_38 $$ boolean errored = false-->Line_45 $$ assertTrue("Read a closed steam", errored)[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_19 $$ bris.getInputStream()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_12 $$ verify(bris, times(brisCloses)).close()[ CD ]
Line_4 $$ InputStream mockStream = mock(InputStream.class)-->Line_37 $$ verify(mockStream, times(isCloses)).close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_32 $$ bris.close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_29 $$ verify(bris, times(brisOpens)).openInputStream()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_9 $$ int isCloses = 0[ CD ]
Line_9 $$ int isCloses = 0-->Line_26 $$ verify(mockStream, times(isCloses)).close()[ FD ]
Line_9 $$ int isCloses = 0-->Line_13 $$ verify(mockStream, times(isCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_25 $$ verify(bris, times(brisCloses)).close()[ CD ]
Line_7 $$ int brisOpens = 0-->Line_47 $$ verify(bris, times(brisOpens)).openInputStream()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_15 $$ verify(bris, times(brisOpens)).openInputStream()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_32 $$ bris.close()[ CD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_27 $$ bris.seek(1)[ FD ]
Line_7 $$ int brisOpens = 0-->Line_11 $$ verify(bris, times(++brisOpens)).openInputStream()[ FD ]
Line_7 $$ int brisOpens = 0-->Line_24 $$ verify(bris, times(brisOpens)).openInputStream()[ FD ]
Line_4 $$ InputStream mockStream = mock(InputStream.class)-->Line_26 $$ verify(mockStream, times(isCloses)).close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_18 $$ bris.seek(1)[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_8 $$ int brisCloses = 0[ CD ]
Line_4 $$ InputStream mockStream = mock(InputStream.class)-->Line_5 $$ doReturn(mockStream).when(bris).openInputStream()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_26 $$ verify(mockStream, times(isCloses)).close()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_14 $$ bris.getInputStream()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_37 $$ verify(mockStream, times(isCloses)).close()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_30 $$ verify(bris, times(brisCloses)).close()[ CD ]
Line_8 $$ int brisCloses = 0-->Line_48 $$ verify(bris, times(brisCloses)).close()[ FD ]
Line_9 $$ int isCloses = 0-->Line_37 $$ verify(mockStream, times(isCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_22 $$ verify(mockStream, times(++isCloses)).close()[ CD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_21 $$ verify(bris, times(brisCloses)).close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_40 $$ bris.getInputStream()[ FD ]
Line_4 $$ InputStream mockStream = mock(InputStream.class)-->Line_31 $$ verify(mockStream, times(isCloses)).close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_12 $$ verify(bris, times(brisCloses)).close()[ FD ]
Line_8 $$ int brisCloses = 0-->Line_16 $$ verify(bris, times(brisCloses)).close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_35 $$ bris.close()[ FD ]
Line_8 $$ int brisCloses = 0-->Line_12 $$ verify(bris, times(brisCloses)).close()[ FD ]
Line_9 $$ int isCloses = 0-->Line_17 $$ verify(mockStream, times(isCloses)).close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_47 $$ verify(bris, times(brisOpens)).openInputStream()[ FD ]
Line_7 $$ int brisOpens = 0-->Line_15 $$ verify(bris, times(brisOpens)).openInputStream()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_38 $$ boolean errored = false[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_21 $$ verify(bris, times(brisCloses)).close()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_17 $$ verify(mockStream, times(isCloses)).close()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_31 $$ verify(mockStream, times(isCloses)).close()[ CD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_47 $$ verify(bris, times(brisOpens)).openInputStream()[ CD ]
Line_8 $$ int brisCloses = 0-->Line_30 $$ verify(bris, times(brisCloses)).close()[ FD ]
Line_4 $$ InputStream mockStream = mock(InputStream.class)-->Line_49 $$ verify(mockStream, times(isCloses)).close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_36 $$ verify(bris, times(++brisCloses)).close()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_11 $$ verify(bris, times(++brisOpens)).openInputStream()[ FD ]
Line_38 $$ boolean errored = false-->Line_42 $$ errored = true[ FD ]
Line_9 $$ int isCloses = 0-->Line_34 $$ verify(mockStream, times(++isCloses)).close()[ FD ]
Line_2 $$ public void testPropagatedClose() throws IOException -->Line_5 $$ doReturn(mockStream).when(bris).openInputStream()[ CD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_14 $$ bris.getInputStream()[ FD ]
Line_3 $$ ByteRangeInputStream bris = mock(ByteRangeInputStream.class, CALLS_REAL_METHODS)-->Line_10 $$ bris.getInputStream()[ FD ]
