Line_38 $$ ReplicaRecoveryInfo r = FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)-->Line_39 $$ Assert.assertNull("Data-node should not have this replica.", r)[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_27 $$ Assert.assertEquals(recoveryid2, updatedInfo2.getRecoveryID())[ CD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_18 $$ assertEquals(originalInfo, recoveryInfo)[ CD ]
Line_7 $$ String bpid = "BP-TEST"-->Line_55 $$ FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_17 $$ final ReplicaRecoveryInfo recoveryInfo = FsDatasetImpl.initReplicaRecovery(bpid, map, blocks[0], recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ CD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_7 $$ String bpid = "BP-TEST"[ CD ]
Line_14 $$ final Block b = blocks[0]-->Line_15 $$ final ReplicaInfo originalInfo = map.get(bpid, b)[ FD ]
Line_25 $$ final ReplicaUnderRecovery updatedInfo2 = (ReplicaUnderRecovery) map.get(bpid, b)-->Line_26 $$ Assert.assertEquals(originalInfo.getBlockId(), updatedInfo2.getBlockId())[ FD ]
Line_14 $$ final Block b = blocks[0]-->Line_29 $$ FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_14 $$ final Block b = blocks[0]-->Line_38 $$ ReplicaRecoveryInfo r = FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_15 $$ final ReplicaInfo originalInfo = map.get(bpid, b)-->Line_24 $$ assertEquals(originalInfo, recoveryInfo2)[ FD ]
Line_25 $$ final ReplicaUnderRecovery updatedInfo2 = (ReplicaUnderRecovery) map.get(bpid, b)-->Line_27 $$ Assert.assertEquals(recoveryid2, updatedInfo2.getRecoveryID())[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_16 $$ final long recoveryid = gs + 1[ CD ]
Line_14 $$ final Block b = blocks[0]-->Line_55 $$ FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_9 $$ for (int i = 0; i < blocks.length; i++) -->Line_10 $$ blocks[i] = new Block(firstblockid + i, length, gs)[ CD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_22 $$ final long recoveryid2 = gs + 2[ CD ]
Line_7 $$ String bpid = "BP-TEST"-->Line_23 $$ final ReplicaRecoveryInfo recoveryInfo2 = FsDatasetImpl.initReplicaRecovery(bpid, map, blocks[0], recoveryid2, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_23 $$ final ReplicaRecoveryInfo recoveryInfo2 = FsDatasetImpl.initReplicaRecovery(bpid, map, blocks[0], recoveryid2, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)-->Line_24 $$ assertEquals(originalInfo, recoveryInfo2)[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_38 $$ ReplicaRecoveryInfo r = FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ CD ]
Line_9 $$ for (int i = 0; i < blocks.length; i++) -->Line_11 $$ map.add(bpid, createReplicaInfo(blocks[i]))[ CD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_15 $$ final ReplicaInfo originalInfo = map.get(bpid, b)[ CD ]
Line_16 $$ final long recoveryid = gs + 1-->Line_55 $$ FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_6 $$ final ReplicaMap map = new ReplicaMap(this)-->Line_15 $$ final ReplicaInfo originalInfo = map.get(bpid, b)[ FD ]
Line_15 $$ final ReplicaInfo originalInfo = map.get(bpid, b)-->Line_26 $$ Assert.assertEquals(originalInfo.getBlockId(), updatedInfo2.getBlockId())[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_8 $$ final Block[] blocks = new Block[5][ CD ]
Line_15 $$ final ReplicaInfo originalInfo = map.get(bpid, b)-->Line_20 $$ Assert.assertEquals(originalInfo.getBlockId(), updatedInfo.getBlockId())[ FD ]
Line_6 $$ final ReplicaMap map = new ReplicaMap(this)-->Line_38 $$ ReplicaRecoveryInfo r = FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_6 $$ final ReplicaMap map = new ReplicaMap(this)-->Line_55 $$ FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_4 $$ final long gs = 7777L[ CD ]
Line_16 $$ final long recoveryid = gs + 1-->Line_17 $$ final ReplicaRecoveryInfo recoveryInfo = FsDatasetImpl.initReplicaRecovery(bpid, map, blocks[0], recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_6 $$ final ReplicaMap map = new ReplicaMap(this)-->Line_45 $$ FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_22 $$ final long recoveryid2 = gs + 2-->Line_23 $$ final ReplicaRecoveryInfo recoveryInfo2 = FsDatasetImpl.initReplicaRecovery(bpid, map, blocks[0], recoveryid2, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_14 $$ final Block b = blocks[0]-->Line_19 $$ final ReplicaUnderRecovery updatedInfo = (ReplicaUnderRecovery) map.get(bpid, b)[ FD ]
Line_6 $$ final ReplicaMap map = new ReplicaMap(this)-->Line_23 $$ final ReplicaRecoveryInfo recoveryInfo2 = FsDatasetImpl.initReplicaRecovery(bpid, map, blocks[0], recoveryid2, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_14 $$ final Block b = blocks[0]-->Line_45 $$ FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_14 $$ final Block b = blocks[0][ CD ]
Line_7 $$ String bpid = "BP-TEST"-->Line_15 $$ final ReplicaInfo originalInfo = map.get(bpid, b)[ FD ]
Line_15 $$ final ReplicaInfo originalInfo = map.get(bpid, b)-->Line_18 $$ assertEquals(originalInfo, recoveryInfo)[ FD ]
Line_19 $$ final ReplicaUnderRecovery updatedInfo = (ReplicaUnderRecovery) map.get(bpid, b)-->Line_21 $$ Assert.assertEquals(recoveryid, updatedInfo.getRecoveryID())[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_25 $$ final ReplicaUnderRecovery updatedInfo2 = (ReplicaUnderRecovery) map.get(bpid, b)[ CD ]
Line_7 $$ String bpid = "BP-TEST"-->Line_38 $$ ReplicaRecoveryInfo r = FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_16 $$ final long recoveryid = gs + 1-->Line_38 $$ ReplicaRecoveryInfo r = FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_39 $$ Assert.assertNull("Data-node should not have this replica.", r)[ CD ]
Line_16 $$ final long recoveryid = gs + 1-->Line_21 $$ Assert.assertEquals(recoveryid, updatedInfo.getRecoveryID())[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_20 $$ Assert.assertEquals(originalInfo.getBlockId(), updatedInfo.getBlockId())[ CD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_5 $$ final long length = 22L[ CD ]
Line_6 $$ final ReplicaMap map = new ReplicaMap(this)-->Line_25 $$ final ReplicaUnderRecovery updatedInfo2 = (ReplicaUnderRecovery) map.get(bpid, b)[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_21 $$ Assert.assertEquals(recoveryid, updatedInfo.getRecoveryID())[ CD ]
Line_14 $$ final Block b = blocks[0]-->Line_25 $$ final ReplicaUnderRecovery updatedInfo2 = (ReplicaUnderRecovery) map.get(bpid, b)[ FD ]
Line_6 $$ final ReplicaMap map = new ReplicaMap(this)-->Line_29 $$ FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_16 $$ final long recoveryid = gs + 1-->Line_29 $$ FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_16 $$ final long recoveryid = gs + 1-->Line_45 $$ FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_9 $$ for (int i = 0; i < blocks.length; i++) [ CD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_23 $$ final ReplicaRecoveryInfo recoveryInfo2 = FsDatasetImpl.initReplicaRecovery(bpid, map, blocks[0], recoveryid2, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ CD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_26 $$ Assert.assertEquals(originalInfo.getBlockId(), updatedInfo2.getBlockId())[ CD ]
Line_7 $$ String bpid = "BP-TEST"-->Line_29 $$ FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_7 $$ String bpid = "BP-TEST"-->Line_45 $$ FsDatasetImpl.initReplicaRecovery(bpid, map, b, recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_19 $$ final ReplicaUnderRecovery updatedInfo = (ReplicaUnderRecovery) map.get(bpid, b)-->Line_20 $$ Assert.assertEquals(originalInfo.getBlockId(), updatedInfo.getBlockId())[ FD ]
Line_7 $$ String bpid = "BP-TEST"-->Line_11 $$ map.add(bpid, createReplicaInfo(blocks[i]))[ FD ]
Line_6 $$ final ReplicaMap map = new ReplicaMap(this)-->Line_17 $$ final ReplicaRecoveryInfo recoveryInfo = FsDatasetImpl.initReplicaRecovery(bpid, map, blocks[0], recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_7 $$ String bpid = "BP-TEST"-->Line_19 $$ final ReplicaUnderRecovery updatedInfo = (ReplicaUnderRecovery) map.get(bpid, b)[ FD ]
Line_7 $$ String bpid = "BP-TEST"-->Line_17 $$ final ReplicaRecoveryInfo recoveryInfo = FsDatasetImpl.initReplicaRecovery(bpid, map, blocks[0], recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)[ FD ]
Line_6 $$ final ReplicaMap map = new ReplicaMap(this)-->Line_19 $$ final ReplicaUnderRecovery updatedInfo = (ReplicaUnderRecovery) map.get(bpid, b)[ FD ]
Line_17 $$ final ReplicaRecoveryInfo recoveryInfo = FsDatasetImpl.initReplicaRecovery(bpid, map, blocks[0], recoveryid, DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT)-->Line_18 $$ assertEquals(originalInfo, recoveryInfo)[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_19 $$ final ReplicaUnderRecovery updatedInfo = (ReplicaUnderRecovery) map.get(bpid, b)[ CD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_24 $$ assertEquals(originalInfo, recoveryInfo2)[ CD ]
Line_7 $$ String bpid = "BP-TEST"-->Line_25 $$ final ReplicaUnderRecovery updatedInfo2 = (ReplicaUnderRecovery) map.get(bpid, b)[ FD ]
Line_22 $$ final long recoveryid2 = gs + 2-->Line_27 $$ Assert.assertEquals(recoveryid2, updatedInfo2.getRecoveryID())[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_6 $$ final ReplicaMap map = new ReplicaMap(this)[ CD ]
Line_6 $$ final ReplicaMap map = new ReplicaMap(this)-->Line_11 $$ map.add(bpid, createReplicaInfo(blocks[i]))[ FD ]
Line_2 $$ public void testInitReplicaRecovery() throws IOException -->Line_3 $$ final long firstblockid = 10000L[ CD ]
