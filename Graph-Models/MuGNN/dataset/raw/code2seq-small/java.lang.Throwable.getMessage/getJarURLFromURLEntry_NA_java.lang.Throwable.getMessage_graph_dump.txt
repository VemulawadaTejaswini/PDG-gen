Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_6 $$ entry = "/" + entry[ FD ]
Line_15 $$ jarUrl = new URL(file)-->Line_18 $$ jarUrl = new File(jarUrl.getFile()).toURI().toURL()[ FD ]
Line_10 $$ file = file.substring(0, file.length() - 1)-->Line_24 $$ if (file.indexOf(' ') != -1) [ FD ]
Line_25 $$ jarUrl = new File(file).toURI().toURL()-->Line_27 $$ jarUrl = new File(file).toURL()[ FD ]
Line_8 $$ file = file.substring(0, file.length() - entry.length())-->Line_9 $$ if (file.endsWith("!")) [ FD ]
Line_4 $$ String file = url.getFile()-->Line_10 $$ file = file.substring(0, file.length() - 1)[ FD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_9 $$ if (file.endsWith("!")) [ CD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_5 $$ if (!entry.startsWith("/")) [ CD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_41 $$ return jarUrl[ CD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_8 $$ file = file.substring(0, file.length() - entry.length())[ CD ]
Line_21 $$ if ("zip".equals(protocol) || "code-source".equals(url.getProtocol()) || "file".equals(protocol)) -->Line_24 $$ if (file.indexOf(' ') != -1) [ CD ]
Line_3 $$ URL jarUrl-->Line_27 $$ jarUrl = new File(file).toURL()[ FD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_21 $$ if ("zip".equals(protocol) || "code-source".equals(url.getProtocol()) || "file".equals(protocol)) [ FD ]
Line_4 $$ String file = url.getFile()-->Line_24 $$ if (file.indexOf(' ') != -1) [ FD ]
Line_4 $$ String file = url.getFile()-->Line_9 $$ if (file.endsWith("!")) [ FD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_13 $$ final String protocol = url.getProtocol()[ FD ]
Line_3 $$ URL jarUrl-->Line_15 $$ jarUrl = new URL(file)[ FD ]
Line_8 $$ file = file.substring(0, file.length() - entry.length())-->Line_10 $$ file = file.substring(0, file.length() - 1)[ FD ]
Line_4 $$ String file = url.getFile()-->Line_17 $$ if (file.indexOf(' ') != -1) [ FD ]
Line_3 $$ URL jarUrl-->Line_25 $$ jarUrl = new File(file).toURI().toURL()[ FD ]
Line_16 $$ if ("file".equals(jarUrl.getProtocol())) -->Line_17 $$ if (file.indexOf(' ') != -1) [ CD ]
Line_8 $$ file = file.substring(0, file.length() - entry.length())-->Line_17 $$ if (file.indexOf(' ') != -1) [ FD ]
Line_18 $$ jarUrl = new File(jarUrl.getFile()).toURI().toURL()-->Line_31 $$ jarUrl = new URL(protocol, url.getHost(), url.getPort(), file)[ FD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_31 $$ jarUrl = new URL(protocol, url.getHost(), url.getPort(), file)[ FD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_5 $$ if (!entry.startsWith("/")) [ FD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_8 $$ file = file.substring(0, file.length() - entry.length())[ FD ]
Line_17 $$ if (file.indexOf(' ') != -1) -->Line_18 $$ jarUrl = new File(jarUrl.getFile()).toURI().toURL()[ CD ]
Line_27 $$ jarUrl = new File(file).toURL()-->Line_34 $$ jarUrl = url[ FD ]
Line_14 $$ if ("jar".equals(protocol) || "wsjar".equals(protocol)) -->Line_15 $$ jarUrl = new URL(file)[ CD ]
Line_18 $$ jarUrl = new File(jarUrl.getFile()).toURI().toURL()-->Line_34 $$ jarUrl = url[ FD ]
Line_15 $$ jarUrl = new URL(file)-->Line_31 $$ jarUrl = new URL(protocol, url.getHost(), url.getPort(), file)[ FD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_34 $$ jarUrl = url[ FD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_40 $$ log.trace("JAR URL from URL Entry: " + url + " >> " + jarUrl)[ CD ]
Line_13 $$ final String protocol = url.getProtocol()-->Line_14 $$ if ("jar".equals(protocol) || "wsjar".equals(protocol)) [ FD ]
Line_3 $$ URL jarUrl-->Line_16 $$ if ("file".equals(jarUrl.getProtocol())) [ FD ]
Line_3 $$ URL jarUrl-->Line_31 $$ jarUrl = new URL(protocol, url.getHost(), url.getPort(), file)[ FD ]
Line_15 $$ jarUrl = new URL(file)-->Line_34 $$ jarUrl = url[ FD ]
Line_15 $$ jarUrl = new URL(file)-->Line_16 $$ if ("file".equals(jarUrl.getProtocol())) [ FD ]
Line_8 $$ file = file.substring(0, file.length() - entry.length())-->Line_24 $$ if (file.indexOf(' ') != -1) [ FD ]
Line_18 $$ jarUrl = new File(jarUrl.getFile()).toURI().toURL()-->Line_25 $$ jarUrl = new File(file).toURI().toURL()[ FD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_4 $$ String file = url.getFile()[ FD ]
Line_27 $$ jarUrl = new File(file).toURL()-->Line_31 $$ jarUrl = new URL(protocol, url.getHost(), url.getPort(), file)[ FD ]
Line_6 $$ entry = "/" + entry-->Line_8 $$ file = file.substring(0, file.length() - entry.length())[ FD ]
Line_24 $$ if (file.indexOf(' ') != -1) -->Line_27 $$ jarUrl = new File(file).toURL()[ CD ]
Line_24 $$ if (file.indexOf(' ') != -1) -->Line_25 $$ jarUrl = new File(file).toURI().toURL()[ CD ]
Line_4 $$ String file = url.getFile()-->Line_8 $$ file = file.substring(0, file.length() - entry.length())[ FD ]
Line_5 $$ if (!entry.startsWith("/")) -->Line_6 $$ entry = "/" + entry[ CD ]
Line_13 $$ final String protocol = url.getProtocol()-->Line_21 $$ if ("zip".equals(protocol) || "code-source".equals(url.getProtocol()) || "file".equals(protocol)) [ FD ]
Line_18 $$ jarUrl = new File(jarUrl.getFile()).toURI().toURL()-->Line_27 $$ jarUrl = new File(file).toURL()[ FD ]
Line_31 $$ jarUrl = new URL(protocol, url.getHost(), url.getPort(), file)-->Line_34 $$ jarUrl = url[ FD ]
Line_3 $$ URL jarUrl-->Line_34 $$ jarUrl = url[ FD ]
Line_25 $$ jarUrl = new File(file).toURI().toURL()-->Line_34 $$ jarUrl = url[ FD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_3 $$ URL jarUrl[ CD ]
Line_14 $$ if ("jar".equals(protocol) || "wsjar".equals(protocol)) -->Line_21 $$ if ("zip".equals(protocol) || "code-source".equals(url.getProtocol()) || "file".equals(protocol)) [ CD ]
Line_15 $$ jarUrl = new URL(file)-->Line_27 $$ jarUrl = new File(file).toURL()[ FD ]
Line_25 $$ jarUrl = new File(file).toURI().toURL()-->Line_31 $$ jarUrl = new URL(protocol, url.getHost(), url.getPort(), file)[ FD ]
Line_3 $$ URL jarUrl-->Line_18 $$ jarUrl = new File(jarUrl.getFile()).toURI().toURL()[ FD ]
Line_10 $$ file = file.substring(0, file.length() - 1)-->Line_17 $$ if (file.indexOf(' ') != -1) [ FD ]
Line_14 $$ if ("jar".equals(protocol) || "wsjar".equals(protocol)) -->Line_16 $$ if ("file".equals(jarUrl.getProtocol())) [ CD ]
Line_15 $$ jarUrl = new URL(file)-->Line_25 $$ jarUrl = new File(file).toURI().toURL()[ FD ]
Line_9 $$ if (file.endsWith("!")) -->Line_10 $$ file = file.substring(0, file.length() - 1)[ CD ]
Line_2 $$ public static URL getJarURLFromURLEntry(URL url, String entry) throws IllegalArgumentException -->Line_4 $$ String file = url.getFile()[ CD ]
