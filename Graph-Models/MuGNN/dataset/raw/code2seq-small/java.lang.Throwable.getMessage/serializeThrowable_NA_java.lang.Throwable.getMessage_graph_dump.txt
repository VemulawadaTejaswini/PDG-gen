Line_17 $$ if (throwable.getCause() == null) -->Line_18 $$ return jsonObject.toString()[ CD ]
Line_22 $$ rootCauseThrowable = rootCauseThrowable.getCause()-->Line_27 $$ throwableMessage = rootCauseThrowable.toString()[ FD ]
Line_3 $$ JSONObject jsonObject = createJSONObject()-->Line_31 $$ jsonObject.put("rootCause", rootCauseJSONObject)[ FD ]
Line_11 $$ JSONObject errorJSONObject = createJSONObject()-->Line_12 $$ errorJSONObject.put("message", throwableMessage)[ FD ]
Line_3 $$ JSONObject jsonObject = createJSONObject()-->Line_15 $$ jsonObject.put("exception", throwableMessage)[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_13 $$ errorJSONObject.put("type", ClassUtil.getClassName(throwable))[ CD ]
Line_3 $$ JSONObject jsonObject = createJSONObject()-->Line_18 $$ return jsonObject.toString()[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_4 $$ if (throwable instanceof InvocationTargetException) [ CD ]
Line_9 $$ throwableMessage = throwable.toString()-->Line_12 $$ errorJSONObject.put("message", throwableMessage)[ FD ]
Line_3 $$ JSONObject jsonObject = createJSONObject()-->Line_14 $$ jsonObject.put("error", errorJSONObject)[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_16 $$ jsonObject.put("throwable", throwable.toString())[ FD ]
Line_5 $$ throwable = throwable.getCause()-->Line_16 $$ jsonObject.put("throwable", throwable.toString())[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_15 $$ jsonObject.put("exception", throwableMessage)[ CD ]
Line_25 $$ throwableMessage = rootCauseThrowable.getMessage()-->Line_26 $$ if (Validator.isNull(throwableMessage)) [ FD ]
Line_7 $$ String throwableMessage = throwable.getMessage()-->Line_8 $$ if (Validator.isNull(throwableMessage)) [ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_8 $$ if (Validator.isNull(throwableMessage)) [ CD ]
Line_5 $$ throwable = throwable.getCause()-->Line_13 $$ errorJSONObject.put("type", ClassUtil.getClassName(throwable))[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_25 $$ throwableMessage = rootCauseThrowable.getMessage()[ CD ]
Line_7 $$ String throwableMessage = throwable.getMessage()-->Line_25 $$ throwableMessage = rootCauseThrowable.getMessage()[ FD ]
Line_22 $$ rootCauseThrowable = rootCauseThrowable.getCause()-->Line_21 $$ while (rootCauseThrowable.getCause() != null) [ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_17 $$ if (throwable.getCause() == null) [ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_3 $$ JSONObject jsonObject = createJSONObject()[ CD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_12 $$ errorJSONObject.put("message", throwableMessage)[ CD ]
Line_3 $$ JSONObject jsonObject = createJSONObject()-->Line_16 $$ jsonObject.put("throwable", throwable.toString())[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_9 $$ throwableMessage = throwable.toString()[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_17 $$ if (throwable.getCause() == null) [ CD ]
Line_7 $$ String throwableMessage = throwable.getMessage()-->Line_26 $$ if (Validator.isNull(throwableMessage)) [ FD ]
Line_5 $$ throwable = throwable.getCause()-->Line_17 $$ if (throwable.getCause() == null) [ FD ]
Line_25 $$ throwableMessage = rootCauseThrowable.getMessage()-->Line_27 $$ throwableMessage = rootCauseThrowable.toString()[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_29 $$ rootCauseJSONObject.put("message", throwableMessage)[ CD ]
Line_4 $$ if (throwable instanceof InvocationTargetException) -->Line_5 $$ throwable = throwable.getCause()[ CD ]
Line_25 $$ throwableMessage = rootCauseThrowable.getMessage()-->Line_29 $$ rootCauseJSONObject.put("message", throwableMessage)[ FD ]
Line_7 $$ String throwableMessage = throwable.getMessage()-->Line_15 $$ jsonObject.put("exception", throwableMessage)[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_16 $$ jsonObject.put("throwable", throwable.toString())[ CD ]
Line_9 $$ throwableMessage = throwable.toString()-->Line_29 $$ rootCauseJSONObject.put("message", throwableMessage)[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_20 $$ Throwable rootCauseThrowable = throwable[ CD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_4 $$ if (throwable instanceof InvocationTargetException) [ FD ]
Line_24 $$ JSONObject rootCauseJSONObject = createJSONObject()-->Line_31 $$ jsonObject.put("rootCause", rootCauseJSONObject)[ FD ]
Line_20 $$ Throwable rootCauseThrowable = throwable-->Line_30 $$ rootCauseJSONObject.put("type", ClassUtil.getClassName(rootCauseThrowable))[ FD ]
Line_7 $$ String throwableMessage = throwable.getMessage()-->Line_9 $$ throwableMessage = throwable.toString()[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_31 $$ jsonObject.put("rootCause", rootCauseJSONObject)[ CD ]
Line_21 $$ while (rootCauseThrowable.getCause() != null) -->Line_22 $$ rootCauseThrowable = rootCauseThrowable.getCause()[ CD ]
Line_3 $$ JSONObject jsonObject = createJSONObject()-->Line_32 $$ return jsonObject.toString()[ FD ]
Line_11 $$ JSONObject errorJSONObject = createJSONObject()-->Line_14 $$ jsonObject.put("error", errorJSONObject)[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_14 $$ jsonObject.put("error", errorJSONObject)[ CD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_24 $$ JSONObject rootCauseJSONObject = createJSONObject()[ CD ]
Line_22 $$ rootCauseThrowable = rootCauseThrowable.getCause()-->Line_25 $$ throwableMessage = rootCauseThrowable.getMessage()[ FD ]
Line_20 $$ Throwable rootCauseThrowable = throwable-->Line_21 $$ while (rootCauseThrowable.getCause() != null) [ FD ]
Line_7 $$ String throwableMessage = throwable.getMessage()-->Line_29 $$ rootCauseJSONObject.put("message", throwableMessage)[ FD ]
Line_9 $$ throwableMessage = throwable.toString()-->Line_25 $$ throwableMessage = rootCauseThrowable.getMessage()[ FD ]
Line_9 $$ throwableMessage = throwable.toString()-->Line_26 $$ if (Validator.isNull(throwableMessage)) [ FD ]
Line_20 $$ Throwable rootCauseThrowable = throwable-->Line_22 $$ rootCauseThrowable = rootCauseThrowable.getCause()[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_32 $$ return jsonObject.toString()[ CD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_7 $$ String throwableMessage = throwable.getMessage()[ FD ]
Line_26 $$ if (Validator.isNull(throwableMessage)) -->Line_27 $$ throwableMessage = rootCauseThrowable.toString()[ CD ]
Line_20 $$ Throwable rootCauseThrowable = throwable-->Line_27 $$ throwableMessage = rootCauseThrowable.toString()[ FD ]
Line_20 $$ Throwable rootCauseThrowable = throwable-->Line_25 $$ throwableMessage = rootCauseThrowable.getMessage()[ FD ]
Line_5 $$ throwable = throwable.getCause()-->Line_7 $$ String throwableMessage = throwable.getMessage()[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_11 $$ JSONObject errorJSONObject = createJSONObject()[ CD ]
Line_24 $$ JSONObject rootCauseJSONObject = createJSONObject()-->Line_29 $$ rootCauseJSONObject.put("message", throwableMessage)[ FD ]
Line_22 $$ rootCauseThrowable = rootCauseThrowable.getCause()-->Line_30 $$ rootCauseJSONObject.put("type", ClassUtil.getClassName(rootCauseThrowable))[ FD ]
Line_7 $$ String throwableMessage = throwable.getMessage()-->Line_27 $$ throwableMessage = rootCauseThrowable.toString()[ FD ]
Line_11 $$ JSONObject errorJSONObject = createJSONObject()-->Line_13 $$ errorJSONObject.put("type", ClassUtil.getClassName(throwable))[ FD ]
Line_24 $$ JSONObject rootCauseJSONObject = createJSONObject()-->Line_30 $$ rootCauseJSONObject.put("type", ClassUtil.getClassName(rootCauseThrowable))[ FD ]
Line_27 $$ throwableMessage = rootCauseThrowable.toString()-->Line_29 $$ rootCauseJSONObject.put("message", throwableMessage)[ FD ]
Line_9 $$ throwableMessage = throwable.toString()-->Line_15 $$ jsonObject.put("exception", throwableMessage)[ FD ]
Line_7 $$ String throwableMessage = throwable.getMessage()-->Line_12 $$ errorJSONObject.put("message", throwableMessage)[ FD ]
Line_9 $$ throwableMessage = throwable.toString()-->Line_27 $$ throwableMessage = rootCauseThrowable.toString()[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_30 $$ rootCauseJSONObject.put("type", ClassUtil.getClassName(rootCauseThrowable))[ CD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_21 $$ while (rootCauseThrowable.getCause() != null) [ CD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_5 $$ throwable = throwable.getCause()[ FD ]
Line_5 $$ throwable = throwable.getCause()-->Line_9 $$ throwableMessage = throwable.toString()[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_26 $$ if (Validator.isNull(throwableMessage)) [ CD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_13 $$ errorJSONObject.put("type", ClassUtil.getClassName(throwable))[ FD ]
Line_2 $$ public String serializeThrowable(Throwable throwable) -->Line_7 $$ String throwableMessage = throwable.getMessage()[ CD ]
Line_8 $$ if (Validator.isNull(throwableMessage)) -->Line_9 $$ throwableMessage = throwable.toString()[ CD ]
