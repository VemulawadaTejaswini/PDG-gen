Line_15 $$ transformer = transformerFactory.newTransformer(xslSource)-->Line_37 $$ transformer.transform(new StreamSource(inspectionData), new StreamResult(w))[ FD ]
Line_2 $$ public void convert(@NotNull final String rawDataDirectoryPath, @Nullable final String outputPath, @NotNull final Map<String, Tools> tools, @NotNull final List<File> inspectionsResults) throws InspectionsReportConverter.ConversionException -->Line_7 $$ final Source xslSource[ CD ]
Line_19 $$ final Writer w-->Line_44 $$ w.close()[ FD ]
Line_6 $$ final SAXTransformerFactory transformerFactory = (SAXTransformerFactory) TransformerFactory.newInstance()-->Line_15 $$ transformer = transformerFactory.newTransformer(xslSource)[ FD ]
Line_2 $$ public void convert(@NotNull final String rawDataDirectoryPath, @Nullable final String outputPath, @NotNull final Map<String, Tools> tools, @NotNull final List<File> inspectionsResults) throws InspectionsReportConverter.ConversionException -->Line_3 $$ if (outputPath == null) [ FD ]
Line_10 $$ final File xsltSchemeFile = new File(myXSLTSchemePath)-->Line_11 $$ if (!xsltSchemeFile.exists()) [ FD ]
Line_2 $$ public void convert(@NotNull final String rawDataDirectoryPath, @Nullable final String outputPath, @NotNull final Map<String, Tools> tools, @NotNull final List<File> inspectionsResults) throws InspectionsReportConverter.ConversionException -->Line_6 $$ final SAXTransformerFactory transformerFactory = (SAXTransformerFactory) TransformerFactory.newInstance()[ CD ]
Line_19 $$ final Writer w-->Line_22 $$ w = new FileWriter(outputFile)[ FD ]
Line_27 $$ for (File inspectionData : inspectionsResults) -->Line_29 $$ warn("Folder isn't expected here: " + inspectionData.getName())[ FD ]
Line_27 $$ for (File inspectionData : inspectionsResults) -->Line_32 $$ final String fileNameWithoutExt = FileUtil.getNameWithoutExtension(inspectionData)[ FD ]
Line_7 $$ final Source xslSource-->Line_14 $$ xslSource = new StreamSource(xsltSchemeFile)[ FD ]
Line_2 $$ public void convert(@NotNull final String rawDataDirectoryPath, @Nullable final String outputPath, @NotNull final Map<String, Tools> tools, @NotNull final List<File> inspectionsResults) throws InspectionsReportConverter.ConversionException -->Line_8 $$ final Transformer transformer[ CD ]
Line_8 $$ final Transformer transformer-->Line_37 $$ transformer.transform(new StreamSource(inspectionData), new StreamResult(w))[ FD ]
Line_2 $$ public void convert(@NotNull final String rawDataDirectoryPath, @Nullable final String outputPath, @NotNull final Map<String, Tools> tools, @NotNull final List<File> inspectionsResults) throws InspectionsReportConverter.ConversionException -->Line_20 $$ final File outputFile = new File(outputPath)[ CD ]
Line_7 $$ final Source xslSource-->Line_15 $$ transformer = transformerFactory.newTransformer(xslSource)[ FD ]
Line_22 $$ w = new FileWriter(outputFile)-->Line_44 $$ w.close()[ FD ]
Line_8 $$ final Transformer transformer-->Line_15 $$ transformer = transformerFactory.newTransformer(xslSource)[ FD ]
Line_20 $$ final File outputFile = new File(outputPath)-->Line_24 $$ throw new ConversionException("Cannot edit file: " + outputFile.getPath())[ FD ]
Line_28 $$ if (inspectionData.isDirectory()) -->Line_29 $$ warn("Folder isn't expected here: " + inspectionData.getName())[ CD ]
Line_14 $$ xslSource = new StreamSource(xsltSchemeFile)-->Line_15 $$ transformer = transformerFactory.newTransformer(xslSource)[ FD ]
Line_32 $$ final String fileNameWithoutExt = FileUtil.getNameWithoutExtension(inspectionData)-->Line_33 $$ if (InspectionApplication.DESCRIPTIONS.equals(fileNameWithoutExt)) [ FD ]
Line_2 $$ public void convert(@NotNull final String rawDataDirectoryPath, @Nullable final String outputPath, @NotNull final Map<String, Tools> tools, @NotNull final List<File> inspectionsResults) throws InspectionsReportConverter.ConversionException -->Line_19 $$ final Writer w[ CD ]
Line_27 $$ for (File inspectionData : inspectionsResults) -->Line_28 $$ if (inspectionData.isDirectory()) [ FD ]
Line_2 $$ public void convert(@NotNull final String rawDataDirectoryPath, @Nullable final String outputPath, @NotNull final Map<String, Tools> tools, @NotNull final List<File> inspectionsResults) throws InspectionsReportConverter.ConversionException -->Line_3 $$ if (outputPath == null) [ CD ]
