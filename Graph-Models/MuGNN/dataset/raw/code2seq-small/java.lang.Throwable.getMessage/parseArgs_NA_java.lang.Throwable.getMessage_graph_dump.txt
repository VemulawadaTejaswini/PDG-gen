Line_17 $$ if (args.length > 1) -->Line_18 $$ System.err.println("Too many arguments")[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_80 $$ if (cmd.hasOption(THROTTLE_MBITS)) [ FD ]
Line_4 $$ CmdLineOptions options = getCmdLineOptions()-->Line_46 $$ errorMsg("Unknown host: " + e.getMessage(), options)[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_96 $$ if (cmd.hasOption(SSL_PROTOCOL)) [ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_54 $$ String[] nodes = cmd.getOptionValue(IGNORE_NODES_OPTION).split(",")[ FD ]
Line_39 $$ if (cmd.hasOption(INITIAL_HOST_ADDRESS_OPTION)) -->Line_50 $$ printUsage(options)[ CD ]
Line_35 $$ if (cmd.hasOption(PASSWD_OPTION))-->Line_36 $$ opts.passwd = cmd.getOptionValue(PASSWD_OPTION)[ CD ]
Line_4 $$ CmdLineOptions options = getCmdLineOptions()-->Line_110 $$ errorMsg(e.getMessage(), options)[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_40 $$ String[] nodes = cmd.getOptionValue(INITIAL_HOST_ADDRESS_OPTION).split(",")[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_31 $$ if (cmd.hasOption(NATIVE_PORT_OPTION))[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_94 $$ opts.encOptions.keystore_password = cmd.getOptionValue(SSL_KEYSTORE_PW)[ FD ]
Line_12 $$ if (args.length == 0) -->Line_14 $$ printUsage(options)[ CD ]
Line_31 $$ if (cmd.hasOption(NATIVE_PORT_OPTION))-->Line_32 $$ opts.nativePort = Integer.parseInt(cmd.getOptionValue(NATIVE_PORT_OPTION))[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_36 $$ opts.passwd = cmd.getOptionValue(PASSWD_OPTION)[ FD ]
Line_17 $$ if (args.length > 1) -->Line_20 $$ System.exit(1)[ CD ]
Line_93 $$ if (cmd.hasOption(SSL_KEYSTORE_PW)) -->Line_94 $$ opts.encOptions.keystore_password = cmd.getOptionValue(SSL_KEYSTORE_PW)[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_87 $$ opts.encOptions.truststore_password = cmd.getOptionValue(SSL_TRUSTSTORE_PW)[ FD ]
Line_33 $$ if (cmd.hasOption(USER_OPTION))-->Line_34 $$ opts.user = cmd.getOptionValue(USER_OPTION)[ CD ]
Line_39 $$ if (cmd.hasOption(INITIAL_HOST_ADDRESS_OPTION)) -->Line_49 $$ System.err.println("Initial hosts must be specified (-d)")[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_103 $$ opts.encOptions.store_type = cmd.getOptionValue(SSL_STORE_TYPE)[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_83 $$ if (cmd.hasOption(SSL_TRUSTSTORE)) [ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_102 $$ if (cmd.hasOption(SSL_STORE_TYPE)) [ FD ]
Line_99 $$ if (cmd.hasOption(SSL_ALGORITHM)) -->Line_100 $$ opts.encOptions.algorithm = cmd.getOptionValue(SSL_ALGORITHM)[ CD ]
Line_4 $$ CmdLineOptions options = getCmdLineOptions()-->Line_8 $$ printUsage(options)[ FD ]
Line_3 $$ CommandLineParser parser = new GnuParser()-->Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)[ FD ]
Line_66 $$ if (cmd.hasOption(CONFIG_PATH)) -->Line_71 $$ config = new YamlConfigurationLoader().loadConfig(configFile.toURI().toURL())[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_106 $$ opts.encOptions.cipher_suites = cmd.getOptionValue(SSL_CIPHER_SUITES).split(",")[ FD ]
Line_23 $$ File dir = new File(dirname)-->Line_24 $$ if (!dir.exists())[ FD ]
Line_26 $$ if (!dir.isDirectory())-->Line_27 $$ errorMsg(dirname + " is not a directory", options)[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_30 $$ opts.noProgress = cmd.hasOption(NOPROGRESS_OPTION)[ FD ]
Line_24 $$ if (!dir.exists())-->Line_25 $$ errorMsg("Unknown directory: " + dirname, options)[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_97 $$ opts.encOptions.protocol = cmd.getOptionValue(SSL_PROTOCOL)[ FD ]
Line_2 $$ public static LoaderOptions parseArgs(String[] cmdArgs) -->Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_34 $$ opts.user = cmd.getOptionValue(USER_OPTION)[ FD ]
Line_39 $$ if (cmd.hasOption(INITIAL_HOST_ADDRESS_OPTION)) -->Line_40 $$ String[] nodes = cmd.getOptionValue(INITIAL_HOST_ADDRESS_OPTION).split(",")[ CD ]
Line_67 $$ File configFile = new File(cmd.getOptionValue(CONFIG_PATH))-->Line_71 $$ config = new YamlConfigurationLoader().loadConfig(configFile.toURI().toURL())[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_93 $$ if (cmd.hasOption(SSL_KEYSTORE_PW)) [ FD ]
Line_7 $$ if (cmd.hasOption(HELP_OPTION)) -->Line_8 $$ printUsage(options)[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_84 $$ opts.encOptions.truststore = cmd.getOptionValue(SSL_TRUSTSTORE)[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_86 $$ if (cmd.hasOption(SSL_TRUSTSTORE_PW)) [ FD ]
Line_102 $$ if (cmd.hasOption(SSL_STORE_TYPE)) -->Line_103 $$ opts.encOptions.store_type = cmd.getOptionValue(SSL_STORE_TYPE)[ CD ]
Line_17 $$ if (args.length > 1) -->Line_19 $$ printUsage(options)[ CD ]
Line_42 $$ for (String node : nodes) -->Line_57 $$ opts.ignores.add(InetAddress.getByName(node.trim()))[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_29 $$ opts.verbose = cmd.hasOption(VERBOSE_OPTION)[ FD ]
Line_83 $$ if (cmd.hasOption(SSL_TRUSTSTORE)) -->Line_84 $$ opts.encOptions.truststore = cmd.getOptionValue(SSL_TRUSTSTORE)[ CD ]
Line_4 $$ CmdLineOptions options = getCmdLineOptions()-->Line_69 $$ errorMsg("Config file not found", options)[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_35 $$ if (cmd.hasOption(PASSWD_OPTION))[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_33 $$ if (cmd.hasOption(USER_OPTION))[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_81 $$ opts.throttle = Integer.parseInt(cmd.getOptionValue(THROTTLE_MBITS))[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_99 $$ if (cmd.hasOption(SSL_ALGORITHM)) [ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_32 $$ opts.nativePort = Integer.parseInt(cmd.getOptionValue(NATIVE_PORT_OPTION))[ FD ]
Line_4 $$ CmdLineOptions options = getCmdLineOptions()-->Line_14 $$ printUsage(options)[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_53 $$ if (cmd.hasOption(IGNORE_NODES_OPTION)) [ FD ]
Line_65 $$ Config config-->Line_71 $$ config = new YamlConfigurationLoader().loadConfig(configFile.toURI().toURL())[ FD ]
Line_105 $$ if (cmd.hasOption(SSL_CIPHER_SUITES)) -->Line_106 $$ opts.encOptions.cipher_suites = cmd.getOptionValue(SSL_CIPHER_SUITES).split(",")[ CD ]
Line_4 $$ CmdLineOptions options = getCmdLineOptions()-->Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)[ FD ]
Line_4 $$ CmdLineOptions options = getCmdLineOptions()-->Line_27 $$ errorMsg(dirname + " is not a directory", options)[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_90 $$ opts.encOptions.keystore = cmd.getOptionValue(SSL_KEYSTORE)[ FD ]
Line_12 $$ if (args.length == 0) -->Line_15 $$ System.exit(1)[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_100 $$ opts.encOptions.algorithm = cmd.getOptionValue(SSL_ALGORITHM)[ FD ]
Line_37 $$ if (cmd.hasOption(AUTH_PROVIDER_OPTION))-->Line_38 $$ opts.authProviderName = cmd.getOptionValue(AUTH_PROVIDER_OPTION)[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_64 $$ opts.connectionsPerHost = Integer.parseInt(cmd.getOptionValue(CONNECTIONS_PER_HOST))[ FD ]
Line_39 $$ if (cmd.hasOption(INITIAL_HOST_ADDRESS_OPTION)) -->Line_51 $$ System.exit(1)[ CD ]
Line_2 $$ public static LoaderOptions parseArgs(String[] cmdArgs) -->Line_4 $$ CmdLineOptions options = getCmdLineOptions()[ CD ]
Line_65 $$ Config config-->Line_73 $$ config = new Config()[ FD ]
Line_23 $$ File dir = new File(dirname)-->Line_26 $$ if (!dir.isDirectory())[ FD ]
Line_71 $$ config = new YamlConfigurationLoader().loadConfig(configFile.toURI().toURL())-->Line_73 $$ config = new Config()[ FD ]
Line_4 $$ CmdLineOptions options = getCmdLineOptions()-->Line_60 $$ errorMsg("Unknown host: " + e.getMessage(), options)[ FD ]
Line_68 $$ if (!configFile.exists()) -->Line_69 $$ errorMsg("Config file not found", options)[ CD ]
Line_2 $$ public static LoaderOptions parseArgs(String[] cmdArgs) -->Line_3 $$ CommandLineParser parser = new GnuParser()[ CD ]
Line_89 $$ if (cmd.hasOption(SSL_KEYSTORE)) -->Line_91 $$ opts.encOptions.require_client_auth = true[ CD ]
Line_12 $$ if (args.length == 0) -->Line_13 $$ System.err.println("Missing sstable directory argument")[ CD ]
Line_96 $$ if (cmd.hasOption(SSL_PROTOCOL)) -->Line_97 $$ opts.encOptions.protocol = cmd.getOptionValue(SSL_PROTOCOL)[ CD ]
Line_4 $$ CmdLineOptions options = getCmdLineOptions()-->Line_25 $$ errorMsg("Unknown directory: " + dirname, options)[ FD ]
Line_7 $$ if (cmd.hasOption(HELP_OPTION)) -->Line_9 $$ System.exit(0)[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_7 $$ if (cmd.hasOption(HELP_OPTION)) [ FD ]
Line_89 $$ if (cmd.hasOption(SSL_KEYSTORE)) -->Line_90 $$ opts.encOptions.keystore = cmd.getOptionValue(SSL_KEYSTORE)[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_63 $$ if (cmd.hasOption(CONNECTIONS_PER_HOST))[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_105 $$ if (cmd.hasOption(SSL_CIPHER_SUITES)) [ FD ]
Line_4 $$ CmdLineOptions options = getCmdLineOptions()-->Line_50 $$ printUsage(options)[ FD ]
Line_66 $$ if (cmd.hasOption(CONFIG_PATH)) -->Line_67 $$ File configFile = new File(cmd.getOptionValue(CONFIG_PATH))[ CD ]
Line_67 $$ File configFile = new File(cmd.getOptionValue(CONFIG_PATH))-->Line_68 $$ if (!configFile.exists()) [ FD ]
Line_86 $$ if (cmd.hasOption(SSL_TRUSTSTORE_PW)) -->Line_87 $$ opts.encOptions.truststore_password = cmd.getOptionValue(SSL_TRUSTSTORE_PW)[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_39 $$ if (cmd.hasOption(INITIAL_HOST_ADDRESS_OPTION)) [ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_11 $$ String[] args = cmd.getArgs()[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_38 $$ opts.authProviderName = cmd.getOptionValue(AUTH_PROVIDER_OPTION)[ FD ]
Line_4 $$ CmdLineOptions options = getCmdLineOptions()-->Line_19 $$ printUsage(options)[ FD ]
Line_42 $$ for (String node : nodes) -->Line_43 $$ opts.hosts.add(InetAddress.getByName(node.trim()))[ FD ]
Line_53 $$ if (cmd.hasOption(IGNORE_NODES_OPTION)) -->Line_54 $$ String[] nodes = cmd.getOptionValue(IGNORE_NODES_OPTION).split(",")[ CD ]
Line_66 $$ if (cmd.hasOption(CONFIG_PATH)) -->Line_73 $$ config = new Config()[ CD ]
Line_80 $$ if (cmd.hasOption(THROTTLE_MBITS)) -->Line_81 $$ opts.throttle = Integer.parseInt(cmd.getOptionValue(THROTTLE_MBITS))[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_67 $$ File configFile = new File(cmd.getOptionValue(CONFIG_PATH))[ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_89 $$ if (cmd.hasOption(SSL_KEYSTORE)) [ FD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_37 $$ if (cmd.hasOption(AUTH_PROVIDER_OPTION))[ FD ]
Line_63 $$ if (cmd.hasOption(CONNECTIONS_PER_HOST))-->Line_64 $$ opts.connectionsPerHost = Integer.parseInt(cmd.getOptionValue(CONNECTIONS_PER_HOST))[ CD ]
Line_6 $$ CommandLine cmd = parser.parse(options, cmdArgs, false)-->Line_66 $$ if (cmd.hasOption(CONFIG_PATH)) [ FD ]
Line_66 $$ if (cmd.hasOption(CONFIG_PATH)) -->Line_68 $$ if (!configFile.exists()) [ CD ]
