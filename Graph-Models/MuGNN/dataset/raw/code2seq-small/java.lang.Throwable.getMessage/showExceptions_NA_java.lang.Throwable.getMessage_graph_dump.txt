Line_2 $$ public static void showExceptions(@NotNull final Project myProject, @NotNull final List<? extends Exception> errors, @NotNull final List<? extends Exception> warnings, @NotNull final String tabDisplayName, @Nullable final VirtualFile file) -->Line_32 $$ addMessages(MessageCategory.ERROR, errors, errorTreeView, file, "Unknown Error")[ FD ]
Line_6 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_10 $$ if (errors.isEmpty() && warnings.isEmpty()) [ CD ]
Line_2 $$ public static void showExceptions(@NotNull final Project myProject, @NotNull final List<? extends Exception> errors, @NotNull final List<? extends Exception> warnings, @NotNull final String tabDisplayName, @Nullable final VirtualFile file) -->Line_33 $$ addMessages(MessageCategory.WARNING, warnings, errorTreeView, file, "Unknown Warning")[ FD ]
Line_20 $$ for (final Exception exception : errors) -->Line_27 $$ builder.append(exception.getMessage())[ FD ]
Line_18 $$ final StringBuilder builder = new StringBuilder()-->Line_29 $$ Messages.showErrorDialog(builder.toString(), "Execution Error")[ FD ]
Line_14 $$ final ErrorViewPanel errorTreeView = new ErrorViewPanel(myProject)-->Line_32 $$ addMessages(MessageCategory.ERROR, errors, errorTreeView, file, "Unknown Error")[ FD ]
Line_14 $$ final ErrorViewPanel errorTreeView = new ErrorViewPanel(myProject)-->Line_16 $$ openMessagesView(errorTreeView, myProject, tabDisplayName)[ FD ]
Line_2 $$ public static void showExceptions(@NotNull final Project myProject, @NotNull final List<? extends Exception> errors, @NotNull final List<? extends Exception> warnings, @NotNull final String tabDisplayName, @Nullable final VirtualFile file) -->Line_3 $$ if (ApplicationManager.getApplication().isUnitTestMode() && !errors.isEmpty()) [ FD ]
Line_18 $$ final StringBuilder builder = new StringBuilder()-->Line_19 $$ builder.append("Exceptions occurred:")[ FD ]
Line_2 $$ public static void showExceptions(@NotNull final Project myProject, @NotNull final List<? extends Exception> errors, @NotNull final List<? extends Exception> warnings, @NotNull final String tabDisplayName, @Nullable final VirtualFile file) -->Line_10 $$ if (errors.isEmpty() && warnings.isEmpty()) [ FD ]
Line_10 $$ if (errors.isEmpty() && warnings.isEmpty()) -->Line_12 $$ return[ CD ]
Line_2 $$ public static void showExceptions(@NotNull final Project myProject, @NotNull final List<? extends Exception> errors, @NotNull final List<? extends Exception> warnings, @NotNull final String tabDisplayName, @Nullable final VirtualFile file) -->Line_34 $$ ToolWindowManager.getInstance(myProject).getToolWindow(ToolWindowId.MESSAGES_WINDOW).activate(null)[ FD ]
Line_2 $$ public static void showExceptions(@NotNull final Project myProject, @NotNull final List<? extends Exception> errors, @NotNull final List<? extends Exception> warnings, @NotNull final String tabDisplayName, @Nullable final VirtualFile file) -->Line_16 $$ openMessagesView(errorTreeView, myProject, tabDisplayName)[ FD ]
Line_2 $$ public static void showExceptions(@NotNull final Project myProject, @NotNull final List<? extends Exception> errors, @NotNull final List<? extends Exception> warnings, @NotNull final String tabDisplayName, @Nullable final VirtualFile file) -->Line_3 $$ if (ApplicationManager.getApplication().isUnitTestMode() && !errors.isEmpty()) [ CD ]
Line_6 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_8 $$ if (myProject.isDisposed())[ CD ]
Line_8 $$ if (myProject.isDisposed())-->Line_9 $$ return[ CD ]
Line_10 $$ if (errors.isEmpty() && warnings.isEmpty()) -->Line_11 $$ removeContents(null, myProject, tabDisplayName)[ CD ]
Line_2 $$ public static void showExceptions(@NotNull final Project myProject, @NotNull final List<? extends Exception> errors, @NotNull final List<? extends Exception> warnings, @NotNull final String tabDisplayName, @Nullable final VirtualFile file) -->Line_4 $$ throw new RuntimeException(errors.get(0))[ FD ]
Line_2 $$ public static void showExceptions(@NotNull final Project myProject, @NotNull final List<? extends Exception> errors, @NotNull final List<? extends Exception> warnings, @NotNull final String tabDisplayName, @Nullable final VirtualFile file) -->Line_8 $$ if (myProject.isDisposed())[ FD ]
Line_6 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_34 $$ ToolWindowManager.getInstance(myProject).getToolWindow(ToolWindowId.MESSAGES_WINDOW).activate(null)[ CD ]
Line_18 $$ final StringBuilder builder = new StringBuilder()-->Line_26 $$ builder.append("\n")[ FD ]
Line_6 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_32 $$ addMessages(MessageCategory.ERROR, errors, errorTreeView, file, "Unknown Error")[ CD ]
Line_6 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_14 $$ final ErrorViewPanel errorTreeView = new ErrorViewPanel(myProject)[ CD ]
Line_6 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_33 $$ addMessages(MessageCategory.WARNING, warnings, errorTreeView, file, "Unknown Warning")[ CD ]
Line_18 $$ final StringBuilder builder = new StringBuilder()-->Line_22 $$ builder.append(exception.getMessage())[ FD ]
Line_18 $$ final StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append("\n")[ FD ]
Line_2 $$ public static void showExceptions(@NotNull final Project myProject, @NotNull final List<? extends Exception> errors, @NotNull final List<? extends Exception> warnings, @NotNull final String tabDisplayName, @Nullable final VirtualFile file) -->Line_6 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_2 $$ public static void showExceptions(@NotNull final Project myProject, @NotNull final List<? extends Exception> errors, @NotNull final List<? extends Exception> warnings, @NotNull final String tabDisplayName, @Nullable final VirtualFile file) -->Line_11 $$ removeContents(null, myProject, tabDisplayName)[ FD ]
Line_18 $$ final StringBuilder builder = new StringBuilder()-->Line_24 $$ builder.append("Warnings occurred:")[ FD ]
Line_18 $$ final StringBuilder builder = new StringBuilder()-->Line_27 $$ builder.append(exception.getMessage())[ FD ]
Line_14 $$ final ErrorViewPanel errorTreeView = new ErrorViewPanel(myProject)-->Line_33 $$ addMessages(MessageCategory.WARNING, warnings, errorTreeView, file, "Unknown Warning")[ FD ]
Line_20 $$ for (final Exception exception : errors) -->Line_22 $$ builder.append(exception.getMessage())[ FD ]
