Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_98 $$ Element element = parentElement.addElement("portlet")[ FD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_31 $$ portletElement.addAttribute("old-plid", String.valueOf(plid))[ FD ]
Line_19 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) -->Line_25 $$ PortletDataHandlerStatusMessageSenderUtil.sendStatusMessage("portlet", portletDataContext.getPortletId(), manifestSummary)[ CD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_65 $$ exportPortletPreferences(portletDataContext, portletDataContext.getScopeGroupId(), PortletKeys.PREFS_OWNER_TYPE_GROUP, false, layout, PortletKeys.PREFS_PLID_SHARED, portlet.getRootPortletId(), portletElement)[ FD ]
Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())-->Line_79 $$ exportPortletPreference(portletDataContext, portletDataContext.getScopeGroupId(), PortletKeys.PREFS_OWNER_TYPE_GROUP, false, groupPortletPreferences, portlet.getRootPortletId(), PortletKeys.PREFS_PLID_SHARED, portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_121 $$ element.addAttribute("portlet-configuration", configurationOptionsSB.toString())[ CD ]
Line_105 $$ StringBundler configurationOptionsSB = new StringBundler(6)-->Line_112 $$ configurationOptionsSB.append(StringPool.COMMA)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_75 $$ exportPortletPreferences(portletDataContext, portletPreferences.getOwnerId(), PortletKeys.PREFS_OWNER_TYPE_USER, defaultUser, layout, plid, portletDataContext.getPortletId(), portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_89 $$ if (exportPermissions) [ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_105 $$ StringBundler configurationOptionsSB = new StringBundler(6)[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_99 $$ element.addAttribute("portlet-id", portletDataContext.getPortletId())[ FD ]
Line_21 $$ ManifestSummary manifestSummary = clonedPortletDataContext.getManifestSummary()-->Line_22 $$ manifestSummary.resetCounters()[ FD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_64 $$ exportPortletPreferences(portletDataContext, portletDataContext.getCompanyId(), PortletKeys.PREFS_OWNER_TYPE_COMPANY, false, layout, plid, portlet.getRootPortletId(), portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_103 $$ PortletDataHandler portletDataHandler = portlet.getPortletDataHandlerInstance()[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_29 $$ portletElement.addAttribute("portlet-id", portletDataContext.getPortletId())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_68 $$ if (exportPortletUserPreferences) [ CD ]
Line_97 $$ String path = pathSB.toString()-->Line_101 $$ element.addAttribute("path", path)[ FD ]
Line_105 $$ StringBundler configurationOptionsSB = new StringBundler(6)-->Line_121 $$ element.addAttribute("portlet-configuration", configurationOptionsSB.toString())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_49 $$ sb.append(portletDataContext.getPortletId())[ FD ]
Line_38 $$ if (ExportImportThreadLocal.isInitialLayoutStagingInProcess()) -->Line_41 $$ layout.setGroupId(stagingGroup.getGroupId())[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_95 $$ pathSB.append(plid)[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_102 $$ element.addAttribute("portlet-data", String.valueOf(exportPortletData))[ FD ]
Line_40 $$ Group stagingGroup = liveGroup.getStagingGroup()-->Line_41 $$ layout.setGroupId(stagingGroup.getGroupId())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_56 $$ portletDataContext.putNotUniquePerLayout(dataKey)[ FD ]
Line_98 $$ Element element = parentElement.addElement("portlet")-->Line_104 $$ element.addAttribute("schema-version", portletDataHandler.getSchemaVersion())[ FD ]
Line_105 $$ StringBundler configurationOptionsSB = new StringBundler(6)-->Line_115 $$ configurationOptionsSB.append("user-preferences")[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_123 $$ portletDataContext.addZipEntry(path, document.formattedString())[ FD ]
Line_72 $$ if (portletPreferences.getOwnerId() == PortletKeys.PREFS_OWNER_ID_DEFAULT) -->Line_73 $$ defaultUser = true[ CD ]
Line_36 $$ if (exportPortletData) -->Line_38 $$ if (ExportImportThreadLocal.isInitialLayoutStagingInProcess()) [ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_34 $$ portletElement.addAttribute("scope-layout-uuid", portletDataContext.getScopeLayoutUuid())[ CD ]
Line_105 $$ StringBundler configurationOptionsSB = new StringBundler(6)-->Line_119 $$ configurationOptionsSB.setIndex(configurationOptionsSB.index() - 1)[ FD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_90 $$ _permissionExporter.exportPortletPermissions(portletDataContext, portletDataContext.getPortletId(), layout, portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_98 $$ Element element = parentElement.addElement("portlet")[ CD ]
Line_48 $$ StringBundler sb = new StringBundler(5)-->Line_53 $$ sb.append(portletDataContext.getScopeLayoutUuid())[ FD ]
Line_38 $$ if (ExportImportThreadLocal.isInitialLayoutStagingInProcess()) -->Line_45 $$ jxPortletPreferences = PortletPreferencesFactoryUtil.getStrictPortletSetup(layout, portletDataContext.getPortletId())[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_63 $$ if (exportPortletSetup) [ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_28 $$ Element portletElement = document.addElement("portlet")[ CD ]
Line_118 $$ if (configurationOptionsSB.index() > 0) -->Line_119 $$ configurationOptionsSB.setIndex(configurationOptionsSB.index() - 1)[ CD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_33 $$ portletElement.addAttribute("scope-layout-type", portletDataContext.getScopeType())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_19 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) [ CD ]
Line_54 $$ String dataKey = sb.toString()-->Line_55 $$ if (!portletDataContext.hasNotUniquePerLayout(dataKey)) [ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_93 $$ pathSB.append(ExportImportPathUtil.getPortletPath(portletDataContext))[ CD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_30 $$ portletElement.addAttribute("root-portlet-id", portletDataContext.getRootPortletId())[ FD ]
Line_47 $$ if (!portlet.isPreferencesUniquePerLayout()) -->Line_49 $$ sb.append(portletDataContext.getPortletId())[ CD ]
Line_37 $$ javax.portlet.PortletPreferences jxPortletPreferences = null-->Line_45 $$ jxPortletPreferences = PortletPreferencesFactoryUtil.getStrictPortletSetup(layout, portletDataContext.getPortletId())[ FD ]
Line_63 $$ if (exportPortletSetup) -->Line_64 $$ exportPortletPreferences(portletDataContext, portletDataContext.getCompanyId(), PortletKeys.PREFS_OWNER_TYPE_COMPANY, false, layout, plid, portlet.getRootPortletId(), portletElement)[ CD ]
Line_3 $$ long plid = PortletKeys.PREFS_OWNER_ID_DEFAULT-->Line_64 $$ exportPortletPreferences(portletDataContext, portletDataContext.getCompanyId(), PortletKeys.PREFS_OWNER_TYPE_COMPANY, false, layout, plid, portlet.getRootPortletId(), portletElement)[ FD ]
Line_23 $$ PortletDataHandler portletDataHandler = portlet.getPortletDataHandlerInstance()-->Line_104 $$ element.addAttribute("schema-version", portletDataHandler.getSchemaVersion())[ FD ]
Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())-->Line_23 $$ PortletDataHandler portletDataHandler = portlet.getPortletDataHandlerInstance()[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_16 $$ if (!portlet.isInstanceable() && !portlet.isPreferencesUniquePerLayout() && portletDataContext.hasNotUniquePerLayout(portletDataContext.getPortletId())) [ CD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_35 $$ portletElement.addAttribute("private-layout", String.valueOf(layout.isPrivateLayout()))[ FD ]
Line_20 $$ PortletDataContext clonedPortletDataContext = PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext)-->Line_21 $$ ManifestSummary manifestSummary = clonedPortletDataContext.getManifestSummary()[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_42 $$ jxPortletPreferences = PortletPreferencesFactoryUtil.getStrictPortletSetup(layout, portletDataContext.getPortletId())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_92 $$ StringBundler pathSB = new StringBundler(4)[ CD ]
Line_36 $$ if (exportPortletData) -->Line_47 $$ if (!portlet.isPreferencesUniquePerLayout()) [ CD ]
Line_16 $$ if (!portlet.isInstanceable() && !portlet.isPreferencesUniquePerLayout() && portletDataContext.hasNotUniquePerLayout(portletDataContext.getPortletId())) -->Line_17 $$ return[ CD ]
Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())-->Line_103 $$ PortletDataHandler portletDataHandler = portlet.getPortletDataHandlerInstance()[ FD ]
Line_38 $$ if (ExportImportThreadLocal.isInitialLayoutStagingInProcess()) -->Line_40 $$ Group stagingGroup = liveGroup.getStagingGroup()[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_33 $$ portletElement.addAttribute("scope-layout-type", portletDataContext.getScopeType())[ FD ]
Line_92 $$ StringBundler pathSB = new StringBundler(4)-->Line_96 $$ pathSB.append("/portlet.xml")[ FD ]
Line_78 $$ PortletPreferences groupPortletPreferences = _portletPreferencesLocalService.getPortletPreferences(portletDataContext.getScopeGroupId(), PortletKeys.PREFS_OWNER_TYPE_GROUP, PortletKeys.PREFS_PLID_SHARED, portlet.getRootPortletId())-->Line_79 $$ exportPortletPreference(portletDataContext, portletDataContext.getScopeGroupId(), PortletKeys.PREFS_OWNER_TYPE_GROUP, false, groupPortletPreferences, portlet.getRootPortletId(), PortletKeys.PREFS_PLID_SHARED, portletElement)[ FD ]
Line_36 $$ if (exportPortletData) -->Line_37 $$ javax.portlet.PortletPreferences jxPortletPreferences = null[ CD ]
Line_4 $$ long layoutId = LayoutConstants.DEFAULT_PARENT_LAYOUT_ID-->Line_100 $$ element.addAttribute("layout-id", String.valueOf(layoutId))[ FD ]
Line_98 $$ Element element = parentElement.addElement("portlet")-->Line_121 $$ element.addAttribute("portlet-configuration", configurationOptionsSB.toString())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_10 $$ if ((portlet == null) || portlet.isUndeployedPortlet()) [ CD ]
Line_3 $$ long plid = PortletKeys.PREFS_OWNER_ID_DEFAULT-->Line_66 $$ exportPortletPreferences(portletDataContext, PortletKeys.PREFS_OWNER_ID_DEFAULT, PortletKeys.PREFS_OWNER_TYPE_LAYOUT, false, layout, plid, portletDataContext.getPortletId(), portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_4 $$ long layoutId = LayoutConstants.DEFAULT_PARENT_LAYOUT_ID[ CD ]
Line_42 $$ jxPortletPreferences = PortletPreferencesFactoryUtil.getStrictPortletSetup(layout, portletDataContext.getPortletId())-->Line_57 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_65 $$ exportPortletPreferences(portletDataContext, portletDataContext.getScopeGroupId(), PortletKeys.PREFS_OWNER_TYPE_GROUP, false, layout, PortletKeys.PREFS_PLID_SHARED, portlet.getRootPortletId(), portletElement)[ FD ]
Line_92 $$ StringBundler pathSB = new StringBundler(4)-->Line_95 $$ pathSB.append(plid)[ FD ]
Line_98 $$ Element element = parentElement.addElement("portlet")-->Line_99 $$ element.addAttribute("portlet-id", portletDataContext.getPortletId())[ FD ]
Line_3 $$ long plid = PortletKeys.PREFS_OWNER_ID_DEFAULT-->Line_69 $$ List<PortletPreferences> portletPreferencesList = _portletPreferencesLocalService.getPortletPreferences(PortletKeys.PREFS_OWNER_TYPE_USER, plid, portletDataContext.getPortletId())[ FD ]
Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())-->Line_64 $$ exportPortletPreferences(portletDataContext, portletDataContext.getCompanyId(), PortletKeys.PREFS_OWNER_TYPE_COMPANY, false, layout, plid, portlet.getRootPortletId(), portletElement)[ FD ]
Line_47 $$ if (!portlet.isPreferencesUniquePerLayout()) -->Line_53 $$ sb.append(portletDataContext.getScopeLayoutUuid())[ CD ]
Line_125 $$ if (_log.isWarnEnabled()) -->Line_126 $$ _log.warn(ioe.getMessage())[ CD ]
Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())-->Line_16 $$ if (!portlet.isInstanceable() && !portlet.isPreferencesUniquePerLayout() && portletDataContext.hasNotUniquePerLayout(portletDataContext.getPortletId())) [ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_110 $$ if (exportPortletArchivedSetups) [ CD ]
Line_45 $$ jxPortletPreferences = PortletPreferencesFactoryUtil.getStrictPortletSetup(layout, portletDataContext.getPortletId())-->Line_60 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_114 $$ if (exportPortletUserPreferences) [ CD ]
Line_19 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) -->Line_21 $$ ManifestSummary manifestSummary = clonedPortletDataContext.getManifestSummary()[ CD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_57 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ FD ]
Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())-->Line_10 $$ if ((portlet == null) || portlet.isUndeployedPortlet()) [ FD ]
Line_37 $$ javax.portlet.PortletPreferences jxPortletPreferences = null-->Line_60 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())[ FD ]
Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())-->Line_47 $$ if (!portlet.isPreferencesUniquePerLayout()) [ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_31 $$ portletElement.addAttribute("old-plid", String.valueOf(plid))[ CD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_75 $$ exportPortletPreferences(portletDataContext, portletPreferences.getOwnerId(), PortletKeys.PREFS_OWNER_TYPE_USER, defaultUser, layout, plid, portletDataContext.getPortletId(), portletElement)[ FD ]
Line_3 $$ long plid = PortletKeys.PREFS_OWNER_ID_DEFAULT-->Line_95 $$ pathSB.append(plid)[ FD ]
Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())-->Line_57 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ FD ]
Line_105 $$ StringBundler configurationOptionsSB = new StringBundler(6)-->Line_116 $$ configurationOptionsSB.append(StringPool.COMMA)[ FD ]
Line_47 $$ if (!portlet.isPreferencesUniquePerLayout()) -->Line_52 $$ sb.append(StringPool.AT)[ CD ]
Line_105 $$ StringBundler configurationOptionsSB = new StringBundler(6)-->Line_111 $$ configurationOptionsSB.append("archived-setups")[ FD ]
Line_114 $$ if (exportPortletUserPreferences) -->Line_116 $$ configurationOptionsSB.append(StringPool.COMMA)[ CD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_66 $$ exportPortletPreferences(portletDataContext, PortletKeys.PREFS_OWNER_ID_DEFAULT, PortletKeys.PREFS_OWNER_TYPE_LAYOUT, false, layout, plid, portletDataContext.getPortletId(), portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_118 $$ if (configurationOptionsSB.index() > 0) [ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_79 $$ exportPortletPreference(portletDataContext, portletDataContext.getScopeGroupId(), PortletKeys.PREFS_OWNER_TYPE_GROUP, false, groupPortletPreferences, portlet.getRootPortletId(), PortletKeys.PREFS_PLID_SHARED, portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_86 $$ exportPortletPreferences(portletDataContext, portletItem.getPortletItemId(), PortletKeys.PREFS_OWNER_TYPE_ARCHIVED, false, null, plid, portletItem.getPortletId(), portletElement)[ FD ]
Line_6 $$ plid = layout.getPlid()-->Line_86 $$ exportPortletPreferences(portletDataContext, portletItem.getPortletItemId(), PortletKeys.PREFS_OWNER_TYPE_ARCHIVED, false, null, plid, portletItem.getPortletId(), portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_5 $$ if (layout != null) [ FD ]
Line_37 $$ javax.portlet.PortletPreferences jxPortletPreferences = null-->Line_42 $$ jxPortletPreferences = PortletPreferencesFactoryUtil.getStrictPortletSetup(layout, portletDataContext.getPortletId())[ FD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_29 $$ portletElement.addAttribute("portlet-id", portletDataContext.getPortletId())[ FD ]
Line_48 $$ StringBundler sb = new StringBundler(5)-->Line_54 $$ String dataKey = sb.toString()[ FD ]
Line_6 $$ plid = layout.getPlid()-->Line_75 $$ exportPortletPreferences(portletDataContext, portletPreferences.getOwnerId(), PortletKeys.PREFS_OWNER_TYPE_USER, defaultUser, layout, plid, portletDataContext.getPortletId(), portletElement)[ FD ]
Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())-->Line_65 $$ exportPortletPreferences(portletDataContext, portletDataContext.getScopeGroupId(), PortletKeys.PREFS_OWNER_TYPE_GROUP, false, layout, PortletKeys.PREFS_PLID_SHARED, portlet.getRootPortletId(), portletElement)[ FD ]
Line_37 $$ javax.portlet.PortletPreferences jxPortletPreferences = null-->Line_57 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ FD ]
Line_63 $$ if (exportPortletSetup) -->Line_65 $$ exportPortletPreferences(portletDataContext, portletDataContext.getScopeGroupId(), PortletKeys.PREFS_OWNER_TYPE_GROUP, false, layout, PortletKeys.PREFS_PLID_SHARED, portlet.getRootPortletId(), portletElement)[ CD ]
Line_55 $$ if (!portletDataContext.hasNotUniquePerLayout(dataKey)) -->Line_57 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ CD ]
Line_5 $$ if (layout != null) -->Line_7 $$ layoutId = layout.getLayoutId()[ CD ]
Line_47 $$ if (!portlet.isPreferencesUniquePerLayout()) -->Line_55 $$ if (!portletDataContext.hasNotUniquePerLayout(dataKey)) [ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_83 $$ if (exportPortletArchivedSetups) [ CD ]
Line_10 $$ if ((portlet == null) || portlet.isUndeployedPortlet()) -->Line_11 $$ if (_log.isDebugEnabled()) [ CD ]
Line_11 $$ if (_log.isDebugEnabled()) -->Line_12 $$ _log.debug("Do not export portlet " + portletDataContext.getPortletId() + " because the portlet is not deployed")[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_30 $$ portletElement.addAttribute("root-portlet-id", portletDataContext.getRootPortletId())[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_16 $$ if (!portlet.isInstanceable() && !portlet.isPreferencesUniquePerLayout() && portletDataContext.hasNotUniquePerLayout(portletDataContext.getPortletId())) [ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_35 $$ portletElement.addAttribute("private-layout", String.valueOf(layout.isPrivateLayout()))[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_36 $$ if (exportPortletData) [ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_90 $$ _permissionExporter.exportPortletPermissions(portletDataContext, portletDataContext.getPortletId(), layout, portletElement)[ FD ]
Line_42 $$ jxPortletPreferences = PortletPreferencesFactoryUtil.getStrictPortletSetup(layout, portletDataContext.getPortletId())-->Line_60 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ FD ]
Line_38 $$ if (ExportImportThreadLocal.isInitialLayoutStagingInProcess()) -->Line_39 $$ Group liveGroup = layout.getGroup()[ CD ]
Line_55 $$ if (!portletDataContext.hasNotUniquePerLayout(dataKey)) -->Line_56 $$ portletDataContext.putNotUniquePerLayout(dataKey)[ CD ]
Line_73 $$ defaultUser = true-->Line_75 $$ exportPortletPreferences(portletDataContext, portletPreferences.getOwnerId(), PortletKeys.PREFS_OWNER_TYPE_USER, defaultUser, layout, plid, portletDataContext.getPortletId(), portletElement)[ FD ]
Line_45 $$ jxPortletPreferences = PortletPreferencesFactoryUtil.getStrictPortletSetup(layout, portletDataContext.getPortletId())-->Line_57 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_94 $$ pathSB.append(StringPool.SLASH)[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_12 $$ _log.debug("Do not export portlet " + portletDataContext.getPortletId() + " because the portlet is not deployed")[ FD ]
Line_6 $$ plid = layout.getPlid()-->Line_95 $$ pathSB.append(plid)[ FD ]
Line_63 $$ if (exportPortletSetup) -->Line_66 $$ exportPortletPreferences(portletDataContext, PortletKeys.PREFS_OWNER_ID_DEFAULT, PortletKeys.PREFS_OWNER_TYPE_LAYOUT, false, layout, plid, portletDataContext.getPortletId(), portletElement)[ CD ]
Line_21 $$ ManifestSummary manifestSummary = clonedPortletDataContext.getManifestSummary()-->Line_25 $$ PortletDataHandlerStatusMessageSenderUtil.sendStatusMessage("portlet", portletDataContext.getPortletId(), manifestSummary)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_55 $$ if (!portletDataContext.hasNotUniquePerLayout(dataKey)) [ FD ]
Line_70 $$ for (PortletPreferences portletPreferences : portletPreferencesList) -->Line_75 $$ exportPortletPreferences(portletDataContext, portletPreferences.getOwnerId(), PortletKeys.PREFS_OWNER_TYPE_USER, defaultUser, layout, plid, portletDataContext.getPortletId(), portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_30 $$ portletElement.addAttribute("root-portlet-id", portletDataContext.getRootPortletId())[ FD ]
Line_4 $$ long layoutId = LayoutConstants.DEFAULT_PARENT_LAYOUT_ID-->Line_7 $$ layoutId = layout.getLayoutId()[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_64 $$ exportPortletPreferences(portletDataContext, portletDataContext.getCompanyId(), PortletKeys.PREFS_OWNER_TYPE_COMPANY, false, layout, plid, portlet.getRootPortletId(), portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_5 $$ if (layout != null) [ CD ]
Line_92 $$ StringBundler pathSB = new StringBundler(4)-->Line_94 $$ pathSB.append(StringPool.SLASH)[ FD ]
Line_48 $$ StringBundler sb = new StringBundler(5)-->Line_51 $$ sb.append(portletDataContext.getScopeType())[ FD ]
Line_54 $$ String dataKey = sb.toString()-->Line_56 $$ portletDataContext.putNotUniquePerLayout(dataKey)[ FD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_79 $$ exportPortletPreference(portletDataContext, portletDataContext.getScopeGroupId(), PortletKeys.PREFS_OWNER_TYPE_GROUP, false, groupPortletPreferences, portlet.getRootPortletId(), PortletKeys.PREFS_PLID_SHARED, portletElement)[ FD ]
Line_71 $$ boolean defaultUser = false-->Line_73 $$ defaultUser = true[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_25 $$ PortletDataHandlerStatusMessageSenderUtil.sendStatusMessage("portlet", portletDataContext.getPortletId(), manifestSummary)[ FD ]
Line_48 $$ StringBundler sb = new StringBundler(5)-->Line_49 $$ sb.append(portletDataContext.getPortletId())[ FD ]
Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())-->Line_78 $$ PortletPreferences groupPortletPreferences = _portletPreferencesLocalService.getPortletPreferences(portletDataContext.getScopeGroupId(), PortletKeys.PREFS_OWNER_TYPE_GROUP, PortletKeys.PREFS_PLID_SHARED, portlet.getRootPortletId())[ FD ]
Line_3 $$ long plid = PortletKeys.PREFS_OWNER_ID_DEFAULT-->Line_86 $$ exportPortletPreferences(portletDataContext, portletItem.getPortletItemId(), PortletKeys.PREFS_OWNER_TYPE_ARCHIVED, false, null, plid, portletItem.getPortletId(), portletElement)[ FD ]
Line_85 $$ for (PortletItem portletItem : portletItems) -->Line_86 $$ exportPortletPreferences(portletDataContext, portletItem.getPortletItemId(), PortletKeys.PREFS_OWNER_TYPE_ARCHIVED, false, null, plid, portletItem.getPortletId(), portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_20 $$ PortletDataContext clonedPortletDataContext = PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_104 $$ element.addAttribute("schema-version", portletDataHandler.getSchemaVersion())[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_7 $$ layoutId = layout.getLayoutId()[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_43 $$ layout.setGroupId(liveGroup.getGroupId())[ FD ]
Line_20 $$ PortletDataContext clonedPortletDataContext = PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext)-->Line_24 $$ portletDataHandler.prepareManifestSummary(clonedPortletDataContext)[ FD ]
Line_92 $$ StringBundler pathSB = new StringBundler(4)-->Line_93 $$ pathSB.append(ExportImportPathUtil.getPortletPath(portletDataContext))[ FD ]
Line_105 $$ StringBundler configurationOptionsSB = new StringBundler(6)-->Line_107 $$ configurationOptionsSB.append("setup")[ FD ]
Line_47 $$ if (!portlet.isPreferencesUniquePerLayout()) -->Line_50 $$ sb.append(StringPool.AT)[ CD ]
Line_114 $$ if (exportPortletUserPreferences) -->Line_115 $$ configurationOptionsSB.append("user-preferences")[ CD ]
Line_5 $$ if (layout != null) -->Line_6 $$ plid = layout.getPlid()[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_27 $$ Document document = SAXReaderUtil.createDocument()[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_66 $$ exportPortletPreferences(portletDataContext, PortletKeys.PREFS_OWNER_ID_DEFAULT, PortletKeys.PREFS_OWNER_TYPE_LAYOUT, false, layout, plid, portletDataContext.getPortletId(), portletElement)[ FD ]
Line_6 $$ plid = layout.getPlid()-->Line_31 $$ portletElement.addAttribute("old-plid", String.valueOf(plid))[ FD ]
Line_19 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) -->Line_22 $$ manifestSummary.resetCounters()[ CD ]
Line_106 $$ if (exportPortletSetup) -->Line_107 $$ configurationOptionsSB.append("setup")[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_3 $$ long plid = PortletKeys.PREFS_OWNER_ID_DEFAULT[ CD ]
Line_27 $$ Document document = SAXReaderUtil.createDocument()-->Line_28 $$ Element portletElement = document.addElement("portlet")[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_60 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ FD ]
Line_98 $$ Element element = parentElement.addElement("portlet")-->Line_102 $$ element.addAttribute("portlet-data", String.valueOf(exportPortletData))[ FD ]
Line_47 $$ if (!portlet.isPreferencesUniquePerLayout()) -->Line_60 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_84 $$ List<PortletItem> portletItems = _portletItemLocalService.getPortletItems(portletDataContext.getGroupId(), portletDataContext.getRootPortletId(), PortletPreferences.class.getName())[ FD ]
Line_106 $$ if (exportPortletSetup) -->Line_108 $$ configurationOptionsSB.append(StringPool.COMMA)[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_100 $$ element.addAttribute("layout-id", String.valueOf(layoutId))[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_32 $$ portletElement.addAttribute("scope-group-id", String.valueOf(portletDataContext.getScopeGroupId()))[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_6 $$ plid = layout.getPlid()[ FD ]
Line_39 $$ Group liveGroup = layout.getGroup()-->Line_43 $$ layout.setGroupId(liveGroup.getGroupId())[ FD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_60 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ FD ]
Line_6 $$ plid = layout.getPlid()-->Line_64 $$ exportPortletPreferences(portletDataContext, portletDataContext.getCompanyId(), PortletKeys.PREFS_OWNER_TYPE_COMPANY, false, layout, plid, portlet.getRootPortletId(), portletElement)[ FD ]
Line_105 $$ StringBundler configurationOptionsSB = new StringBundler(6)-->Line_108 $$ configurationOptionsSB.append(StringPool.COMMA)[ FD ]
Line_19 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) -->Line_24 $$ portletDataHandler.prepareManifestSummary(clonedPortletDataContext)[ CD ]
Line_23 $$ PortletDataHandler portletDataHandler = portlet.getPortletDataHandlerInstance()-->Line_24 $$ portletDataHandler.prepareManifestSummary(clonedPortletDataContext)[ FD ]
Line_98 $$ Element element = parentElement.addElement("portlet")-->Line_101 $$ element.addAttribute("path", path)[ FD ]
Line_10 $$ if ((portlet == null) || portlet.isUndeployedPortlet()) -->Line_14 $$ return[ CD ]
Line_42 $$ jxPortletPreferences = PortletPreferencesFactoryUtil.getStrictPortletSetup(layout, portletDataContext.getPortletId())-->Line_45 $$ jxPortletPreferences = PortletPreferencesFactoryUtil.getStrictPortletSetup(layout, portletDataContext.getPortletId())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_106 $$ if (exportPortletSetup) [ CD ]
Line_19 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) -->Line_23 $$ PortletDataHandler portletDataHandler = portlet.getPortletDataHandlerInstance()[ CD ]
Line_3 $$ long plid = PortletKeys.PREFS_OWNER_ID_DEFAULT-->Line_31 $$ portletElement.addAttribute("old-plid", String.valueOf(plid))[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_96 $$ pathSB.append("/portlet.xml")[ CD ]
Line_6 $$ plid = layout.getPlid()-->Line_69 $$ List<PortletPreferences> portletPreferencesList = _portletPreferencesLocalService.getPortletPreferences(PortletKeys.PREFS_OWNER_TYPE_USER, plid, portletDataContext.getPortletId())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_102 $$ element.addAttribute("portlet-data", String.valueOf(exportPortletData))[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_93 $$ pathSB.append(ExportImportPathUtil.getPortletPath(portletDataContext))[ FD ]
Line_38 $$ if (ExportImportThreadLocal.isInitialLayoutStagingInProcess()) -->Line_43 $$ layout.setGroupId(liveGroup.getGroupId())[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_53 $$ sb.append(portletDataContext.getScopeLayoutUuid())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_41 $$ layout.setGroupId(stagingGroup.getGroupId())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_45 $$ jxPortletPreferences = PortletPreferencesFactoryUtil.getStrictPortletSetup(layout, portletDataContext.getPortletId())[ FD ]
Line_68 $$ if (exportPortletUserPreferences) -->Line_69 $$ List<PortletPreferences> portletPreferencesList = _portletPreferencesLocalService.getPortletPreferences(PortletKeys.PREFS_OWNER_TYPE_USER, plid, portletDataContext.getPortletId())[ CD ]
Line_48 $$ StringBundler sb = new StringBundler(5)-->Line_50 $$ sb.append(StringPool.AT)[ FD ]
Line_70 $$ for (PortletPreferences portletPreferences : portletPreferencesList) -->Line_72 $$ if (portletPreferences.getOwnerId() == PortletKeys.PREFS_OWNER_ID_DEFAULT) [ FD ]
Line_47 $$ if (!portlet.isPreferencesUniquePerLayout()) -->Line_48 $$ StringBundler sb = new StringBundler(5)[ CD ]
Line_19 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) -->Line_20 $$ PortletDataContext clonedPortletDataContext = PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext)[ CD ]
Line_6 $$ plid = layout.getPlid()-->Line_66 $$ exportPortletPreferences(portletDataContext, PortletKeys.PREFS_OWNER_ID_DEFAULT, PortletKeys.PREFS_OWNER_TYPE_LAYOUT, false, layout, plid, portletDataContext.getPortletId(), portletElement)[ FD ]
Line_47 $$ if (!portlet.isPreferencesUniquePerLayout()) -->Line_51 $$ sb.append(portletDataContext.getScopeType())[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_39 $$ Group liveGroup = layout.getGroup()[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_57 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_33 $$ portletElement.addAttribute("scope-layout-type", portletDataContext.getScopeType())[ CD ]
Line_27 $$ Document document = SAXReaderUtil.createDocument()-->Line_123 $$ portletDataContext.addZipEntry(path, document.formattedString())[ FD ]
Line_7 $$ layoutId = layout.getLayoutId()-->Line_100 $$ element.addAttribute("layout-id", String.valueOf(layoutId))[ FD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_32 $$ portletElement.addAttribute("scope-group-id", String.valueOf(portletDataContext.getScopeGroupId()))[ FD ]
Line_110 $$ if (exportPortletArchivedSetups) -->Line_111 $$ configurationOptionsSB.append("archived-setups")[ CD ]
Line_83 $$ if (exportPortletArchivedSetups) -->Line_84 $$ List<PortletItem> portletItems = _portletItemLocalService.getPortletItems(portletDataContext.getGroupId(), portletDataContext.getRootPortletId(), PortletPreferences.class.getName())[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_29 $$ portletElement.addAttribute("portlet-id", portletDataContext.getPortletId())[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_99 $$ element.addAttribute("portlet-id", portletDataContext.getPortletId())[ CD ]
Line_98 $$ Element element = parentElement.addElement("portlet")-->Line_100 $$ element.addAttribute("layout-id", String.valueOf(layoutId))[ FD ]
Line_92 $$ StringBundler pathSB = new StringBundler(4)-->Line_97 $$ String path = pathSB.toString()[ FD ]
Line_89 $$ if (exportPermissions) -->Line_90 $$ _permissionExporter.exportPortletPermissions(portletDataContext, portletDataContext.getPortletId(), layout, portletElement)[ CD ]
Line_110 $$ if (exportPortletArchivedSetups) -->Line_112 $$ configurationOptionsSB.append(StringPool.COMMA)[ CD ]
Line_38 $$ if (ExportImportThreadLocal.isInitialLayoutStagingInProcess()) -->Line_42 $$ jxPortletPreferences = PortletPreferencesFactoryUtil.getStrictPortletSetup(layout, portletDataContext.getPortletId())[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_51 $$ sb.append(portletDataContext.getScopeType())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_69 $$ List<PortletPreferences> portletPreferencesList = _portletPreferencesLocalService.getPortletPreferences(PortletKeys.PREFS_OWNER_TYPE_USER, plid, portletDataContext.getPortletId())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_97 $$ String path = pathSB.toString()[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_32 $$ portletElement.addAttribute("scope-group-id", String.valueOf(portletDataContext.getScopeGroupId()))[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_78 $$ PortletPreferences groupPortletPreferences = _portletPreferencesLocalService.getPortletPreferences(portletDataContext.getScopeGroupId(), PortletKeys.PREFS_OWNER_TYPE_GROUP, PortletKeys.PREFS_PLID_SHARED, portlet.getRootPortletId())[ FD ]
Line_105 $$ StringBundler configurationOptionsSB = new StringBundler(6)-->Line_118 $$ if (configurationOptionsSB.index() > 0) [ FD ]
Line_71 $$ boolean defaultUser = false-->Line_75 $$ exportPortletPreferences(portletDataContext, portletPreferences.getOwnerId(), PortletKeys.PREFS_OWNER_TYPE_USER, defaultUser, layout, plid, portletDataContext.getPortletId(), portletElement)[ FD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_34 $$ portletElement.addAttribute("scope-layout-uuid", portletDataContext.getScopeLayoutUuid())[ FD ]
Line_47 $$ if (!portlet.isPreferencesUniquePerLayout()) -->Line_54 $$ String dataKey = sb.toString()[ CD ]
Line_28 $$ Element portletElement = document.addElement("portlet")-->Line_86 $$ exportPortletPreferences(portletDataContext, portletItem.getPortletItemId(), PortletKeys.PREFS_OWNER_TYPE_ARCHIVED, false, null, plid, portletItem.getPortletId(), portletElement)[ FD ]
Line_39 $$ Group liveGroup = layout.getGroup()-->Line_40 $$ Group stagingGroup = liveGroup.getStagingGroup()[ FD ]
Line_3 $$ long plid = PortletKeys.PREFS_OWNER_ID_DEFAULT-->Line_75 $$ exportPortletPreferences(portletDataContext, portletPreferences.getOwnerId(), PortletKeys.PREFS_OWNER_TYPE_USER, defaultUser, layout, plid, portletDataContext.getPortletId(), portletElement)[ FD ]
Line_48 $$ StringBundler sb = new StringBundler(5)-->Line_52 $$ sb.append(StringPool.AT)[ FD ]
Line_9 $$ Portlet portlet = _portletLocalService.getPortletById(portletDataContext.getCompanyId(), portletDataContext.getPortletId())-->Line_60 $$ exportPortletData(portletDataContext, portlet, layout, jxPortletPreferences, portletElement)[ FD ]
Line_97 $$ String path = pathSB.toString()-->Line_123 $$ portletDataContext.addZipEntry(path, document.formattedString())[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_101 $$ element.addAttribute("path", path)[ CD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_34 $$ portletElement.addAttribute("scope-layout-uuid", portletDataContext.getScopeLayoutUuid())[ FD ]
Line_3 $$ long plid = PortletKeys.PREFS_OWNER_ID_DEFAULT-->Line_6 $$ plid = layout.getPlid()[ FD ]
Line_2 $$ protected void exportPortlet(PortletDataContext portletDataContext, Layout layout, Element parentElement, boolean exportPermissions, boolean exportPortletArchivedSetups, boolean exportPortletData, boolean exportPortletSetup, boolean exportPortletUserPreferences) throws Exception -->Line_35 $$ portletElement.addAttribute("private-layout", String.valueOf(layout.isPrivateLayout()))[ FD ]
