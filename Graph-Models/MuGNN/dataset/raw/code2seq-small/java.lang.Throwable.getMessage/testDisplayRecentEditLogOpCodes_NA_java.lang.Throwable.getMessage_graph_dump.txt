Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).enableManagedDfsDirsRedundancy(false).build()-->Line_7 $$ cluster.waitActive()[ FD ]
Line_21 $$ for (int i = 0; i < 20; i++) -->Line_22 $$ rwf.write(FSEditLogOpCodes.OP_DELETE.getOpCode())[ CD ]
Line_25 $$ StringBuilder bld = new StringBuilder()-->Line_28 $$ bld.append("Recent opcode offsets: (\\d+\\s*)[ FD ]
Line_5 $$ FileSystem fileSys = null-->Line_8 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_9 $$ final FSNamesystem namesystem = cluster.getNamesystem()[ CD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_17 $$ assertTrue("Should exist: " + editFile, editFile.exists())[ CD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_5 $$ FileSystem fileSys = null[ CD ]
Line_10 $$ FSImage fsimage = namesystem.getFSImage()-->Line_14 $$ StorageDirectory sd = fsimage.getStorage().dirIterator(NameNodeDirType.EDITS).next()[ FD ]
Line_25 $$ StringBuilder bld = new StringBuilder()-->Line_27 $$ bld.append("Expected transaction ID was \\d+\n")[ FD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_27 $$ bld.append("Expected transaction ID was \\d+\n")[ CD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_4 $$ MiniDFSCluster cluster = null[ CD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_16 $$ File editFile = FSImageTestUtil.findLatestEditsLog(sd).getFile()[ CD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_8 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_5 $$ FileSystem fileSys = null-->Line_12 $$ fileSys.mkdirs(new Path("/tmp/tmp" + i))[ FD ]
Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).enableManagedDfsDirsRedundancy(false).build()-->Line_8 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_21 $$ for (int i = 0; i < 20; i++) [ CD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_11 $$ for (int i = 0; i < 20; i++) [ CD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_9 $$ final FSNamesystem namesystem = cluster.getNamesystem()[ FD ]
Line_16 $$ File editFile = FSImageTestUtil.findLatestEditsLog(sd).getFile()-->Line_18 $$ long fileLen = editFile.length()[ FD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_7 $$ cluster.waitActive()[ CD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_15 $$ cluster.shutdown()[ FD ]
Line_11 $$ for (int i = 0; i < 20; i++) -->Line_21 $$ for (int i = 0; i < 20; i++) [ FD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_25 $$ StringBuilder bld = new StringBuilder()[ CD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_28 $$ bld.append("Recent opcode offsets: (\\d+\\s*)[ CD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_7 $$ cluster.waitActive()[ FD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_18 $$ long fileLen = editFile.length()[ CD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_20 $$ rwf.seek(fileLen - 40)[ CD ]
Line_25 $$ StringBuilder bld = new StringBuilder()-->Line_26 $$ bld.append("^Error replaying edit log at offset \\d+.  ")[ FD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_24 $$ rwf.close()[ CD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_8 $$ fileSys = cluster.getFileSystem()-->Line_12 $$ fileSys.mkdirs(new Path("/tmp/tmp" + i))[ FD ]
Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).enableManagedDfsDirsRedundancy(false).build()-->Line_15 $$ cluster.shutdown()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).enableManagedDfsDirsRedundancy(false).build()[ FD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_8 $$ fileSys = cluster.getFileSystem()[ CD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).enableManagedDfsDirsRedundancy(false).build()[ CD ]
Line_16 $$ File editFile = FSImageTestUtil.findLatestEditsLog(sd).getFile()-->Line_17 $$ assertTrue("Should exist: " + editFile, editFile.exists())[ FD ]
Line_14 $$ StorageDirectory sd = fsimage.getStorage().dirIterator(NameNodeDirType.EDITS).next()-->Line_16 $$ File editFile = FSImageTestUtil.findLatestEditsLog(sd).getFile()[ FD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_15 $$ cluster.shutdown()[ CD ]
Line_11 $$ for (int i = 0; i < 20; i++) -->Line_12 $$ fileSys.mkdirs(new Path("/tmp/tmp" + i))[ CD ]
Line_19 $$ RandomAccessFile rwf = new RandomAccessFile(editFile, "rw")-->Line_20 $$ rwf.seek(fileLen - 40)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_30 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).enableManagedDfsDirsRedundancy(false).format(false).build()[ FD ]
Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).enableManagedDfsDirsRedundancy(false).build()-->Line_9 $$ final FSNamesystem namesystem = cluster.getNamesystem()[ FD ]
Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).enableManagedDfsDirsRedundancy(false).build()-->Line_30 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).enableManagedDfsDirsRedundancy(false).format(false).build()[ FD ]
Line_19 $$ RandomAccessFile rwf = new RandomAccessFile(editFile, "rw")-->Line_24 $$ rwf.close()[ FD ]
Line_9 $$ final FSNamesystem namesystem = cluster.getNamesystem()-->Line_10 $$ FSImage fsimage = namesystem.getFSImage()[ FD ]
Line_19 $$ RandomAccessFile rwf = new RandomAccessFile(editFile, "rw")-->Line_22 $$ rwf.write(FSEditLogOpCodes.OP_DELETE.getOpCode())[ FD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_19 $$ RandomAccessFile rwf = new RandomAccessFile(editFile, "rw")[ CD ]
Line_25 $$ StringBuilder bld = new StringBuilder()-->Line_33 $$ assertTrue("error message contains opcodes message", e.getMessage().matches(bld.toString()))[ FD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_26 $$ bld.append("^Error replaying edit log at offset \\d+.  ")[ CD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_10 $$ FSImage fsimage = namesystem.getFSImage()[ CD ]
Line_2 $$ public void testDisplayRecentEditLogOpCodes() throws IOException -->Line_14 $$ StorageDirectory sd = fsimage.getStorage().dirIterator(NameNodeDirType.EDITS).next()[ CD ]
