Line_9 $$ streams = replicaInfo.createStreams(true, DataChecksum.newDataChecksum(DataChecksum.Type.CRC32, 512))-->Line_21 $$ streams.close()[ FD ]
Line_2 $$ public void testNotMatchedReplicaID() throws IOException -->Line_3 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_9 $$ streams = replicaInfo.createStreams(true, DataChecksum.newDataChecksum(DataChecksum.Type.CRC32, 512))-->Line_10 $$ streams.getChecksumOut().write('a')[ FD ]
Line_2 $$ public void testNotMatchedReplicaID() throws IOException -->Line_7 $$ ReplicaOutputStreams streams = null[ CD ]
Line_18 $$ DatanodeProtocol namenode = dn.getActiveNamenodeForBP(POOL_ID)-->Line_19 $$ verify(namenode, never()).commitBlockSynchronization(any(ExtendedBlock.class), anyLong(), anyLong(), anyBoolean(), anyBoolean(), any(DatanodeID[].class), any(String[].class))[ FD ]
Line_2 $$ public void testNotMatchedReplicaID() throws IOException -->Line_6 $$ ReplicaInPipelineInterface replicaInfo = dn.data.createRbw(StorageType.DEFAULT, block)[ CD ]
Line_7 $$ ReplicaOutputStreams streams = null-->Line_21 $$ streams.close()[ FD ]
Line_7 $$ ReplicaOutputStreams streams = null-->Line_10 $$ streams.getChecksumOut().write('a')[ FD ]
Line_3 $$ if (LOG.isDebugEnabled()) -->Line_4 $$ LOG.debug("Running " + GenericTestUtils.getMethodName())[ CD ]
Line_7 $$ ReplicaOutputStreams streams = null-->Line_9 $$ streams = replicaInfo.createStreams(true, DataChecksum.newDataChecksum(DataChecksum.Type.CRC32, 512))[ FD ]
Line_6 $$ ReplicaInPipelineInterface replicaInfo = dn.data.createRbw(StorageType.DEFAULT, block)-->Line_9 $$ streams = replicaInfo.createStreams(true, DataChecksum.newDataChecksum(DataChecksum.Type.CRC32, 512))[ FD ]
