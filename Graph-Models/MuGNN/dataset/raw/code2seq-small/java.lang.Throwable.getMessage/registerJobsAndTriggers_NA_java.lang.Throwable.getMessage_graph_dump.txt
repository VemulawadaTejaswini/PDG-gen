Line_8 $$ if (this.jobSchedulingDataLocations != null) -->Line_11 $$ XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)[ CD ]
Line_9 $$ ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)-->Line_10 $$ clh.initialize()[ FD ]
Line_3 $$ TransactionStatus transactionStatus = null-->Line_37 $$ this.transactionManager.rollback(transactionStatus)[ FD ]
Line_11 $$ XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)-->Line_13 $$ dataProcessor.processFileAndScheduleJobs(location, getScheduler())[ FD ]
Line_5 $$ transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())-->Line_52 $$ this.transactionManager.commit(transactionStatus)[ FD ]
Line_17 $$ for (JobDetail jobDetail : this.jobDetails) -->Line_18 $$ addJobToScheduler(jobDetail)[ FD ]
Line_2 $$ protected void registerJobsAndTriggers() throws SchedulerException -->Line_51 $$ if (transactionStatus != null) [ CD ]
Line_24 $$ for (String calendarName : this.calendars.keySet()) -->Line_26 $$ getScheduler().addCalendar(calendarName, calendar, true, true)[ FD ]
Line_5 $$ transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())-->Line_35 $$ if (transactionStatus != null) [ FD ]
Line_24 $$ for (String calendarName : this.calendars.keySet()) -->Line_25 $$ Calendar calendar = this.calendars.get(calendarName)[ FD ]
Line_3 $$ TransactionStatus transactionStatus = null-->Line_5 $$ transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())[ FD ]
Line_3 $$ TransactionStatus transactionStatus = null-->Line_51 $$ if (transactionStatus != null) [ FD ]
Line_51 $$ if (transactionStatus != null) -->Line_52 $$ this.transactionManager.commit(transactionStatus)[ CD ]
Line_2 $$ protected void registerJobsAndTriggers() throws SchedulerException -->Line_4 $$ if (this.transactionManager != null) [ CD ]
Line_8 $$ if (this.jobSchedulingDataLocations != null) -->Line_10 $$ clh.initialize()[ CD ]
Line_3 $$ TransactionStatus transactionStatus = null-->Line_35 $$ if (transactionStatus != null) [ FD ]
Line_30 $$ for (Trigger trigger : this.triggers) -->Line_31 $$ addTriggerToScheduler(trigger)[ FD ]
Line_16 $$ if (this.jobDetails != null) -->Line_21 $$ this.jobDetails = new LinkedList<JobDetail>()[ CD ]
Line_25 $$ Calendar calendar = this.calendars.get(calendarName)-->Line_26 $$ getScheduler().addCalendar(calendarName, calendar, true, true)[ FD ]
Line_5 $$ transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())-->Line_37 $$ this.transactionManager.rollback(transactionStatus)[ FD ]
Line_8 $$ if (this.jobSchedulingDataLocations != null) -->Line_9 $$ ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)[ CD ]
Line_3 $$ TransactionStatus transactionStatus = null-->Line_52 $$ this.transactionManager.commit(transactionStatus)[ FD ]
Line_5 $$ transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())-->Line_51 $$ if (transactionStatus != null) [ FD ]
Line_2 $$ protected void registerJobsAndTriggers() throws SchedulerException -->Line_3 $$ TransactionStatus transactionStatus = null[ CD ]
Line_12 $$ for (String location : this.jobSchedulingDataLocations) -->Line_13 $$ dataProcessor.processFileAndScheduleJobs(location, getScheduler())[ FD ]
Line_4 $$ if (this.transactionManager != null) -->Line_5 $$ transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())[ CD ]
