Line_6 $$ boolean writable = project == null ? virtualFile.isWritable() : ReadonlyStatusHandler.ensureFilesWritable(project, virtualFile)-->Line_7 $$ if (!writable) [ FD ]
Line_5 $$ final Project project = ProjectLocator.getInstance().guessProjectForFile(virtualFile)-->Line_8 $$ CommonRefactoringUtil.showErrorHint(project, editor, "Cannot save the file " + virtualFile.getPresentableUrl(), "Unable to Save", null)[ FD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_6 $$ boolean writable = project == null ? virtualFile.isWritable() : ReadonlyStatusHandler.ensureFilesWritable(project, virtualFile)[ FD ]
Line_7 $$ if (!writable) -->Line_8 $$ CommonRefactoringUtil.showErrorHint(project, editor, "Cannot save the file " + virtualFile.getPresentableUrl(), "Unable to Save", null)[ CD ]
Line_5 $$ final Project project = ProjectLocator.getInstance().guessProjectForFile(virtualFile)-->Line_15 $$ LoadTextUtil.write(project, virtualFile, virtualFile, document.getText(), document.getModificationStamp())[ FD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_24 $$ EncodingManager.getInstance().setEncoding(virtualFile, charset)[ FD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_4 $$ documentManager.saveDocument(document)[ CD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_5 $$ final Project project = ProjectLocator.getInstance().guessProjectForFile(virtualFile)[ CD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_8 $$ CommonRefactoringUtil.showErrorHint(project, editor, "Cannot save the file " + virtualFile.getPresentableUrl(), "Unable to Save", null)[ FD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_3 $$ FileDocumentManager documentManager = FileDocumentManager.getInstance()[ CD ]
Line_12 $$ ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<Object, IOException>() -->Line_15 $$ LoadTextUtil.write(project, virtualFile, virtualFile, document.getText(), document.getModificationStamp())[ CD ]
Line_22 $$ EncodingProjectManagerImpl.suppressReloadDuring(new Runnable() -->Line_24 $$ EncodingManager.getInstance().setEncoding(virtualFile, charset)[ CD ]
Line_5 $$ final Project project = ProjectLocator.getInstance().guessProjectForFile(virtualFile)-->Line_20 $$ Messages.showErrorDialog(project, io.getMessage(), "Error Writing File")[ FD ]
Line_12 $$ ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<Object, IOException>() -->Line_16 $$ return null[ CD ]
Line_5 $$ final Project project = ProjectLocator.getInstance().guessProjectForFile(virtualFile)-->Line_6 $$ boolean writable = project == null ? virtualFile.isWritable() : ReadonlyStatusHandler.ensureFilesWritable(project, virtualFile)[ FD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_15 $$ LoadTextUtil.write(project, virtualFile, virtualFile, document.getText(), document.getModificationStamp())[ FD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_22 $$ EncodingProjectManagerImpl.suppressReloadDuring(new Runnable() [ CD ]
Line_12 $$ ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<Object, IOException>() -->Line_14 $$ virtualFile.setCharset(charset)[ CD ]
Line_7 $$ if (!writable) -->Line_9 $$ return[ CD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_4 $$ documentManager.saveDocument(document)[ FD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_14 $$ virtualFile.setCharset(charset)[ FD ]
Line_3 $$ FileDocumentManager documentManager = FileDocumentManager.getInstance()-->Line_4 $$ documentManager.saveDocument(document)[ FD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_7 $$ if (!writable) [ CD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_6 $$ boolean writable = project == null ? virtualFile.isWritable() : ReadonlyStatusHandler.ensureFilesWritable(project, virtualFile)[ CD ]
Line_2 $$ public static void saveIn(@NotNull final Document document, final Editor editor, @NotNull final VirtualFile virtualFile, @NotNull final Charset charset) -->Line_5 $$ final Project project = ProjectLocator.getInstance().guessProjectForFile(virtualFile)[ FD ]
