Line_20 $$ thrown = false-->Line_27 $$ Assert.assertTrue(thrown)[ FD ]
Line_12 $$ MockAM am = rm.sendAMLaunched(attempt.getAppAttemptId())-->Line_22 $$ am.registerAppAttempt(false)[ FD ]
Line_11 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()-->Line_24 $$ Assert.assertEquals("Application Master is already registered : " + attempt.getAppAttemptId().getApplicationId(), e.getMessage())[ FD ]
Line_12 $$ MockAM am = rm.sendAMLaunched(attempt.getAppAttemptId())-->Line_14 $$ AllocateResponse ar = am.allocate("h1", 1000, request, new ArrayList<ContainerId>())[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_27 $$ Assert.assertTrue(thrown)[ CD ]
Line_11 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()-->Line_29 $$ nm1.nodeHeartbeat(attempt.getAppAttemptId(), 1, ContainerState.COMPLETE)[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_8 $$ MockNM nm1 = rm.registerNode("h1:1234", 5000)[ CD ]
Line_6 $$ MockRM rm = new MockRM()-->Line_12 $$ MockAM am = rm.sendAMLaunched(attempt.getAppAttemptId())[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_13 $$ int request = 2[ CD ]
Line_8 $$ MockNM nm1 = rm.registerNode("h1:1234", 5000)-->Line_10 $$ nm1.nodeHeartbeat(true)[ FD ]
Line_12 $$ MockAM am = rm.sendAMLaunched(attempt.getAppAttemptId())-->Line_31 $$ AllocateResponse amrs2 = am.allocate(new ArrayList<ResourceRequest>(), new ArrayList<ContainerId>())[ FD ]
Line_4 $$ boolean thrown = false-->Line_27 $$ Assert.assertTrue(thrown)[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_18 $$ Assert.assertTrue(ar.getAMCommand() == AMCommand.AM_RESYNC)[ CD ]
Line_8 $$ MockNM nm1 = rm.registerNode("h1:1234", 5000)-->Line_16 $$ nm1.nodeHeartbeat(true)[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_14 $$ AllocateResponse ar = am.allocate("h1", 1000, request, new ArrayList<ContainerId>())[ CD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_16 $$ nm1.nodeHeartbeat(true)[ CD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_7 $$ rm.start()[ CD ]
Line_3 $$ Logger rootLogger = LogManager.getRootLogger()-->Line_5 $$ rootLogger.setLevel(Level.DEBUG)[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_19 $$ am.registerAppAttempt()[ CD ]
Line_4 $$ boolean thrown = false-->Line_25 $$ thrown = true[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_11 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()[ CD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_4 $$ boolean thrown = false[ CD ]
Line_14 $$ AllocateResponse ar = am.allocate("h1", 1000, request, new ArrayList<ContainerId>())-->Line_18 $$ Assert.assertTrue(ar.getAMCommand() == AMCommand.AM_RESYNC)[ FD ]
Line_6 $$ MockRM rm = new MockRM()-->Line_7 $$ rm.start()[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_29 $$ nm1.nodeHeartbeat(attempt.getAppAttemptId(), 1, ContainerState.COMPLETE)[ CD ]
Line_9 $$ RMApp app = rm.submitApp(2000)-->Line_11 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_31 $$ AllocateResponse amrs2 = am.allocate(new ArrayList<ResourceRequest>(), new ArrayList<ContainerId>())[ CD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_5 $$ rootLogger.setLevel(Level.DEBUG)[ CD ]
Line_12 $$ MockAM am = rm.sendAMLaunched(attempt.getAppAttemptId())-->Line_28 $$ am.unregisterAppAttempt()[ FD ]
Line_4 $$ boolean thrown = false-->Line_20 $$ thrown = false[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_15 $$ Assert.assertTrue(ar.getAMCommand() == AMCommand.AM_RESYNC)[ CD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_9 $$ RMApp app = rm.submitApp(2000)[ CD ]
Line_12 $$ MockAM am = rm.sendAMLaunched(attempt.getAppAttemptId())-->Line_19 $$ am.registerAppAttempt()[ FD ]
Line_6 $$ MockRM rm = new MockRM()-->Line_8 $$ MockNM nm1 = rm.registerNode("h1:1234", 5000)[ FD ]
Line_6 $$ MockRM rm = new MockRM()-->Line_9 $$ RMApp app = rm.submitApp(2000)[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_20 $$ thrown = false[ CD ]
Line_31 $$ AllocateResponse amrs2 = am.allocate(new ArrayList<ResourceRequest>(), new ArrayList<ContainerId>())-->Line_32 $$ Assert.assertTrue(amrs2.getAMCommand() == AMCommand.AM_SHUTDOWN)[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_12 $$ MockAM am = rm.sendAMLaunched(attempt.getAppAttemptId())[ CD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_30 $$ am.waitForState(RMAppAttemptState.FINISHED)[ CD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_3 $$ Logger rootLogger = LogManager.getRootLogger()[ CD ]
Line_25 $$ thrown = true-->Line_27 $$ Assert.assertTrue(thrown)[ FD ]
Line_13 $$ int request = 2-->Line_14 $$ AllocateResponse ar = am.allocate("h1", 1000, request, new ArrayList<ContainerId>())[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_28 $$ am.unregisterAppAttempt()[ CD ]
Line_11 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()-->Line_12 $$ MockAM am = rm.sendAMLaunched(attempt.getAppAttemptId())[ FD ]
Line_8 $$ MockNM nm1 = rm.registerNode("h1:1234", 5000)-->Line_29 $$ nm1.nodeHeartbeat(attempt.getAppAttemptId(), 1, ContainerState.COMPLETE)[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_32 $$ Assert.assertTrue(amrs2.getAMCommand() == AMCommand.AM_SHUTDOWN)[ CD ]
Line_12 $$ MockAM am = rm.sendAMLaunched(attempt.getAppAttemptId())-->Line_30 $$ am.waitForState(RMAppAttemptState.FINISHED)[ FD ]
Line_12 $$ MockAM am = rm.sendAMLaunched(attempt.getAppAttemptId())-->Line_17 $$ AllocateResponse amrs = am.allocate(new ArrayList<ResourceRequest>(), new ArrayList<ContainerId>())[ FD ]
Line_20 $$ thrown = false-->Line_25 $$ thrown = true[ FD ]
Line_14 $$ AllocateResponse ar = am.allocate("h1", 1000, request, new ArrayList<ContainerId>())-->Line_15 $$ Assert.assertTrue(ar.getAMCommand() == AMCommand.AM_RESYNC)[ FD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_10 $$ nm1.nodeHeartbeat(true)[ CD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_6 $$ MockRM rm = new MockRM()[ CD ]
Line_2 $$ public void testallocateBeforeAMRegistration() throws Exception -->Line_17 $$ AllocateResponse amrs = am.allocate(new ArrayList<ResourceRequest>(), new ArrayList<ContainerId>())[ CD ]
