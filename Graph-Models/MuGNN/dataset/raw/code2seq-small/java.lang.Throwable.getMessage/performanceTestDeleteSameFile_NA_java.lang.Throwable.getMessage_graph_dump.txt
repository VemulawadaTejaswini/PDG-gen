Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_18 $$ myFile = new Path(base, "test/mkdirs/myFile")[ CD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_12 $$ mkdir(fs, myPath)[ CD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_21 $$ for (int i = 0; i < iters; i++) [ CD ]
Line_21 $$ for (int i = 0; i < iters; i++) -->Line_33 $$ if (i == 0) [ FD ]
Line_21 $$ for (int i = 0; i < iters; i++) -->Line_32 $$ if (i < 10) [ CD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_13 $$ Path myFile[ CD ]
Line_6 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_7 $$ conf.set("fs.defaultFS", fs.getUri().toString())[ FD ]
Line_13 $$ Path myFile-->Line_19 $$ String[] args = new String[] [ FD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_6 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_12 $$ mkdir(fs, myPath)[ FD ]
Line_33 $$ if (i == 0) -->Line_36 $$ first = (first + iterTime) / 2[ CD ]
Line_11 $$ Path myPath = new Path(base, "test/mkdirs")-->Line_12 $$ mkdir(fs, myPath)[ FD ]
Line_20 $$ int iters = 1000-->Line_21 $$ for (int i = 0; i < iters; i++) [ FD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_9 $$ FsShell shell = new FsShell()[ CD ]
Line_6 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_22 $$ writeFile(fs, myFile, 10)[ FD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_10 $$ shell.setConf(conf)[ CD ]
Line_19 $$ String[] args = new String[] -->Line_25 $$ retVal = shell.run(args)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.setClass("fs.file.impl", TestLFS.class, FileSystem.class)[ FD ]
Line_21 $$ for (int i = 0; i < iters; i++) -->Line_30 $$ assertTrue(retVal == 0)[ CD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_5 $$ conf.setClass("fs.file.impl", TestLFS.class, FileSystem.class)[ CD ]
Line_41 $$ if ((i % print_freq) == 0)-->Line_42 $$ System.out.println("iteration=" + i + ";res =" + retVal + "; start=" + start + "; iterTime = " + iterTime + " vs. firstTime=" + first)[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.set("fs.defaultFS", fs.getUri().toString())[ FD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_15 $$ long first = 0[ CD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_17 $$ int factor = 10[ CD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_19 $$ String[] args = new String[] [ CD ]
Line_21 $$ for (int i = 0; i < iters; i++) -->Line_23 $$ start = Time.now()[ CD ]
Line_32 $$ if (i < 10) -->Line_33 $$ if (i == 0) [ CD ]
Line_40 $$ if (i > 10) -->Line_43 $$ long factoredTime = first * factor[ CD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_11 $$ Path myPath = new Path(base, "test/mkdirs")[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_6 $$ FileSystem fs = FileSystem.getLocal(conf)[ FD ]
Line_16 $$ int retVal = 0-->Line_25 $$ retVal = shell.run(args)[ FD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_14 $$ long start[ CD ]
Line_21 $$ for (int i = 0; i < iters; i++) -->Line_31 $$ long iterTime = Time.now() - start[ CD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_16 $$ int retVal = 0[ CD ]
Line_14 $$ long start-->Line_23 $$ start = Time.now()[ FD ]
Line_40 $$ if (i > 10) -->Line_41 $$ if ((i % print_freq) == 0)[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setLong(FS_TRASH_INTERVAL_KEY, 10)[ FD ]
Line_9 $$ FsShell shell = new FsShell()-->Line_10 $$ shell.setConf(conf)[ FD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_7 $$ conf.set("fs.defaultFS", fs.getUri().toString())[ CD ]
Line_13 $$ Path myFile-->Line_18 $$ myFile = new Path(base, "test/mkdirs/myFile")[ FD ]
Line_33 $$ if (i == 0) -->Line_34 $$ first = iterTime[ CD ]
Line_15 $$ long first = 0-->Line_36 $$ first = (first + iterTime) / 2[ FD ]
Line_15 $$ long first = 0-->Line_34 $$ first = iterTime[ FD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_6 $$ FileSystem fs = FileSystem.getLocal(conf)[ CD ]
Line_40 $$ if (i > 10) -->Line_44 $$ assertTrue(iterTime < factoredTime)[ CD ]
Line_21 $$ for (int i = 0; i < iters; i++) -->Line_22 $$ writeFile(fs, myFile, 10)[ CD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_3 $$ Path base = TEST_DIR[ CD ]
Line_34 $$ first = iterTime-->Line_36 $$ first = (first + iterTime) / 2[ FD ]
Line_18 $$ myFile = new Path(base, "test/mkdirs/myFile")-->Line_22 $$ writeFile(fs, myFile, 10)[ FD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_8 $$ conf.setLong(FS_TRASH_INTERVAL_KEY, 10)[ CD ]
Line_21 $$ for (int i = 0; i < iters; i++) -->Line_40 $$ if (i > 10) [ FD ]
Line_13 $$ Path myFile-->Line_22 $$ writeFile(fs, myFile, 10)[ FD ]
Line_21 $$ for (int i = 0; i < iters; i++) -->Line_40 $$ if (i > 10) [ CD ]
Line_9 $$ FsShell shell = new FsShell()-->Line_25 $$ retVal = shell.run(args)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_10 $$ shell.setConf(conf)[ FD ]
Line_18 $$ myFile = new Path(base, "test/mkdirs/myFile")-->Line_19 $$ String[] args = new String[] [ FD ]
Line_2 $$ public static void performanceTestDeleteSameFile() throws IOException -->Line_20 $$ int iters = 1000[ CD ]
Line_21 $$ for (int i = 0; i < iters; i++) -->Line_39 $$ int print_freq = iters / 10[ CD ]
Line_21 $$ for (int i = 0; i < iters; i++) -->Line_32 $$ if (i < 10) [ FD ]
Line_31 $$ long iterTime = Time.now() - start-->Line_34 $$ first = iterTime[ FD ]
