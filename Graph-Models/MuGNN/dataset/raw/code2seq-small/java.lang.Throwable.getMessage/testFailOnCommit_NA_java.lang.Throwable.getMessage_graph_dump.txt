Line_19 $$ List<LoggingEvent> loggingEvents = captureAppender.getLoggingEvents()-->Line_21 $$ LoggingEvent loggingEvent = loggingEvents.get(0)[ FD ]
Line_23 $$ ClassName cachedClassName = (ClassName) EntityCacheUtil.getResult(true, ClassNameImpl.class, classNameId)-->Line_24 $$ Assert.assertNull(cachedClassName)[ FD ]
Line_6 $$ ClassName className = ClassNameUtil.create(classNameId)-->Line_12 $$ ClassNameLocalServiceUtil.addClassName(className)[ FD ]
Line_9 $$ TransactionInterceptor transactionInterceptor = (TransactionInterceptor) PortalBeanLocatorUtil.locate("transactionAdvice")-->Line_17 $$ transactionInterceptor.setPlatformTransactionManager(platformTransactionManager)[ FD ]
Line_7 $$ PlatformTransactionManager platformTransactionManager = (PlatformTransactionManager) InfrastructureUtil.getTransactionManager()-->Line_17 $$ transactionInterceptor.setPlatformTransactionManager(platformTransactionManager)[ FD ]
Line_9 $$ TransactionInterceptor transactionInterceptor = (TransactionInterceptor) PortalBeanLocatorUtil.locate("transactionAdvice")-->Line_10 $$ transactionInterceptor.setPlatformTransactionManager(platformTransactionManagerWrapper)[ FD ]
Line_5 $$ long classNameId = CounterLocalServiceUtil.increment()-->Line_6 $$ ClassName className = ClassNameUtil.create(classNameId)[ FD ]
Line_5 $$ long classNameId = CounterLocalServiceUtil.increment()-->Line_23 $$ ClassName cachedClassName = (ClassName) EntityCacheUtil.getResult(true, ClassNameImpl.class, classNameId)[ FD ]
Line_19 $$ List<LoggingEvent> loggingEvents = captureAppender.getLoggingEvents()-->Line_20 $$ Assert.assertEquals(1, loggingEvents.size())[ FD ]
Line_8 $$ MockPlatformTransactionManager platformTransactionManagerWrapper = new MockPlatformTransactionManager(platformTransactionManager)-->Line_10 $$ transactionInterceptor.setPlatformTransactionManager(platformTransactionManagerWrapper)[ FD ]
Line_3 $$ try (CaptureAppender captureAppender = Log4JLoggerTestUtil.configureLog4JLogger(DefaultTransactionExecutor.class.getName(), Level.ERROR)) -->Line_19 $$ List<LoggingEvent> loggingEvents = captureAppender.getLoggingEvents()[ FD ]
Line_21 $$ LoggingEvent loggingEvent = loggingEvents.get(0)-->Line_22 $$ Assert.assertEquals("Application exception overridden by commit exception", loggingEvent.getMessage())[ FD ]
