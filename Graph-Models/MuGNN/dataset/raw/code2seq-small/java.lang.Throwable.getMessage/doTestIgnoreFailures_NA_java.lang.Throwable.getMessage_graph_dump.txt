Line_17 $$ if (!fileStatus.isDirectory()) -->Line_19 $$ copyMapper.map(new Text(DistCpUtils.getRelativePath(new Path(SOURCE_PATH), path)), new CopyListingFileStatus(fileStatus), context)[ CD ]
Line_9 $$ Mapper<Text, CopyListingFileStatus, Text, Text>.Context<Text, CopyListingFileStatus, Text, Text> context = stubContext.getContext()-->Line_19 $$ copyMapper.map(new Text(DistCpUtils.getRelativePath(new Path(SOURCE_PATH), path)), new CopyListingFileStatus(fileStatus), context)[ FD ]
Line_8 $$ StubContext stubContext = new StubContext(getConfiguration(), null, 0)-->Line_9 $$ Mapper<Text, CopyListingFileStatus, Text, Text>.Context<Text, CopyListingFileStatus, Text, Text> context = stubContext.getContext()[ FD ]
Line_10 $$ Configuration configuration = context.getConfiguration()-->Line_11 $$ configuration.setBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), ignoreFailures)[ FD ]
Line_10 $$ Configuration configuration = context.getConfiguration()-->Line_12 $$ configuration.setBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), true)[ FD ]
Line_6 $$ FileSystem fs = cluster.getFileSystem()-->Line_18 $$ fs.delete(path, true)[ FD ]
Line_9 $$ Mapper<Text, CopyListingFileStatus, Text, Text>.Context<Text, CopyListingFileStatus, Text, Text> context = stubContext.getContext()-->Line_14 $$ copyMapper.setup(context)[ FD ]
Line_8 $$ StubContext stubContext = new StubContext(getConfiguration(), null, 0)-->Line_23 $$ for (Text value : stubContext.getWriter().values()) [ FD ]
Line_15 $$ for (Path path : pathList) -->Line_18 $$ fs.delete(path, true)[ FD ]
Line_9 $$ Mapper<Text, CopyListingFileStatus, Text, Text>.Context<Text, CopyListingFileStatus, Text, Text> context = stubContext.getContext()-->Line_10 $$ Configuration configuration = context.getConfiguration()[ FD ]
Line_17 $$ if (!fileStatus.isDirectory()) -->Line_18 $$ fs.delete(path, true)[ CD ]
Line_6 $$ FileSystem fs = cluster.getFileSystem()-->Line_16 $$ final FileStatus fileStatus = fs.getFileStatus(path)[ FD ]
Line_2 $$ private void doTestIgnoreFailures(boolean ignoreFailures) -->Line_27 $$ Assert.assertTrue("There should have been an exception.", ignoreFailures)[ FD ]
Line_16 $$ final FileStatus fileStatus = fs.getFileStatus(path)-->Line_17 $$ if (!fileStatus.isDirectory()) [ FD ]
Line_15 $$ for (Path path : pathList) -->Line_19 $$ copyMapper.map(new Text(DistCpUtils.getRelativePath(new Path(SOURCE_PATH), path)), new CopyListingFileStatus(fileStatus), context)[ FD ]
Line_23 $$ for (Text value : stubContext.getWriter().values()) -->Line_24 $$ Assert.assertTrue(value.toString() + " is not skipped", value.toString().startsWith("FAIL:"))[ FD ]
Line_10 $$ Configuration configuration = context.getConfiguration()-->Line_13 $$ configuration.setBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), true)[ FD ]
Line_7 $$ CopyMapper copyMapper = new CopyMapper()-->Line_14 $$ copyMapper.setup(context)[ FD ]
Line_15 $$ for (Path path : pathList) -->Line_16 $$ final FileStatus fileStatus = fs.getFileStatus(path)[ FD ]
Line_2 $$ private void doTestIgnoreFailures(boolean ignoreFailures) -->Line_11 $$ configuration.setBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), ignoreFailures)[ FD ]
Line_7 $$ CopyMapper copyMapper = new CopyMapper()-->Line_19 $$ copyMapper.map(new Text(DistCpUtils.getRelativePath(new Path(SOURCE_PATH), path)), new CopyListingFileStatus(fileStatus), context)[ FD ]
Line_2 $$ private void doTestIgnoreFailures(boolean ignoreFailures) -->Line_29 $$ Assert.assertTrue("Unexpected exception: " + e.getMessage(), !ignoreFailures)[ FD ]
