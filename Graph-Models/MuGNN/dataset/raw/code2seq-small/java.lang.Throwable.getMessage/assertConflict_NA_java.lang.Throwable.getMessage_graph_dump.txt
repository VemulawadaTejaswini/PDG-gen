Line_2 $$ void assertConflict(MapperService mapperService, String type, String mapping1, String mapping2, String conflict) throws IOException -->Line_5 $$ mapperService.merge("type", new CompressedXContent(mapping2), false, false)[ FD ]
Line_2 $$ void assertConflict(MapperService mapperService, String type, String mapping1, String mapping2, String conflict) throws IOException -->Line_3 $$ mapperService.merge("type", new CompressedXContent(mapping1), true, false)[ FD ]
Line_2 $$ void assertConflict(MapperService mapperService, String type, String mapping1, String mapping2, String conflict) throws IOException -->Line_9 $$ assertThat(e.getMessage(), containsString(conflict))[ FD ]
Line_2 $$ void assertConflict(MapperService mapperService, String type, String mapping1, String mapping2, String conflict) throws IOException -->Line_3 $$ mapperService.merge("type", new CompressedXContent(mapping1), true, false)[ CD ]
Line_2 $$ void assertConflict(MapperService mapperService, String type, String mapping1, String mapping2, String conflict) throws IOException -->Line_6 $$ assertNull(conflict)[ FD ]
Line_2 $$ void assertConflict(MapperService mapperService, String type, String mapping1, String mapping2, String conflict) throws IOException -->Line_8 $$ assertNotNull(conflict)[ FD ]
