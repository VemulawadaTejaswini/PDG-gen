Line_14 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), TransportRequestOptions.builder().withCompress(true).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_25 $$ exp.printStackTrace()[ CD ]
Line_2 $$ public void testHelloWorldCompressed() -->Line_3 $$ serviceA.registerRequestHandler("sayHello", StringMessageRequest::<>new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() [ CD ]
Line_14 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), TransportRequestOptions.builder().withCompress(true).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_26 $$ assertThat("got exception instead of a response: " + exp.getMessage(), false, equalTo(true))[ FD ]
Line_14 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), TransportRequestOptions.builder().withCompress(true).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_19 $$ return ThreadPool.Names.GENERIC[ CD ]
Line_14 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), TransportRequestOptions.builder().withCompress(true).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_25 $$ exp.printStackTrace()[ FD ]
Line_2 $$ public void testHelloWorldCompressed() -->Line_14 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), TransportRequestOptions.builder().withCompress(true).build(), new BaseTransportResponseHandler<StringMessageResponse>() [ CD ]
Line_14 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), TransportRequestOptions.builder().withCompress(true).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_26 $$ assertThat("got exception instead of a response: " + exp.getMessage(), false, equalTo(true))[ CD ]
Line_14 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), TransportRequestOptions.builder().withCompress(true).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_16 $$ return new StringMessageResponse()[ CD ]
Line_2 $$ public void testHelloWorldCompressed() -->Line_35 $$ serviceA.removeHandler("sayHello")[ CD ]
Line_3 $$ serviceA.registerRequestHandler("sayHello", StringMessageRequest::<>new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() -->Line_7 $$ channel.sendResponse(new StringMessageResponse("hello " + request.message), TransportResponseOptions.builder().withCompress(true).build())[ FD ]
Line_3 $$ serviceA.registerRequestHandler("sayHello", StringMessageRequest::<>new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() -->Line_5 $$ assertThat("moshe", equalTo(request.message))[ CD ]
Line_14 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHello", new StringMessageRequest("moshe"), TransportRequestOptions.builder().withCompress(true).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_22 $$ assertThat("hello moshe", equalTo(response.message))[ CD ]
