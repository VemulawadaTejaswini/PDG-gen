Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_27 $$ sendError(ctx, "Required param job, map and reduce", BAD_REQUEST)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_60 $$ Channel ch = evt.getChannel()[ CD ]
Line_59 $$ Map<String, MapOutputInfo> mapOutputInfoMap = new HashMap<String, MapOutputInfo>()-->Line_76 $$ MapOutputInfo info = mapOutputInfoMap.get(mapId)[ FD ]
Line_74 $$ for (String mapId : mapIds) -->Line_76 $$ MapOutputInfo info = mapOutputInfoMap.get(mapId)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_43 $$ sendError(ctx, "Bad job parameter", BAD_REQUEST)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_69 $$ sendError(ctx, errorMessage, INTERNAL_SERVER_ERROR)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_26 $$ if (mapIds == null || reduceQ == null || jobQ == null) [ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_60 $$ Channel ch = evt.getChannel()[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_5 $$ sendError(ctx, METHOD_NOT_ALLOWED)[ FD ]
Line_11 $$ final Map<String, List<String>> q = new QueryStringDecoder(request.getUri()).getParameters()-->Line_20 $$ final List<String> mapIds = splitMaps(q.get("map"))[ FD ]
Line_51 $$ HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)-->Line_53 $$ verifyRequest(jobId, ctx, request, response, new URL("http", "", this.port, reqUri))[ FD ]
Line_80 $$ lastMap = sendMapOutput(ctx, ch, user, mapId, reduceId, info)-->Line_92 $$ lastMap.addListener(metrics)[ FD ]
Line_22 $$ final List<String> jobQ = q.get("job")-->Line_38 $$ jobId = jobQ.get(0)[ FD ]
Line_3 $$ HttpRequest request = (HttpRequest) evt.getMessage()-->Line_46 $$ final String reqUri = request.getUri()[ FD ]
Line_13 $$ boolean keepAliveParam = false-->Line_15 $$ keepAliveParam = Boolean.valueOf(keepAliveList.get(0))[ FD ]
Line_35 $$ String jobId-->Line_62 $$ String outputBasePathStr = getBaseLocation(jobId, user)[ FD ]
Line_61 $$ String user = userRsrc.get(jobId)-->Line_80 $$ lastMap = sendMapOutput(ctx, ch, user, mapId, reduceId, info)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_11 $$ final Map<String, List<String>> q = new QueryStringDecoder(request.getUri()).getParameters()[ CD ]
Line_47 $$ if (null == reqUri) -->Line_49 $$ return[ CD ]
Line_30 $$ if (reduceQ.size() != 1 || jobQ.size() != 1) -->Line_32 $$ return[ CD ]
Line_80 $$ lastMap = sendMapOutput(ctx, ch, user, mapId, reduceId, info)-->Line_81 $$ if (null == lastMap) [ FD ]
Line_81 $$ if (null == lastMap) -->Line_82 $$ sendError(ctx, NOT_FOUND)[ CD ]
Line_51 $$ HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)-->Line_66 $$ ch.write(response)[ FD ]
Line_15 $$ keepAliveParam = Boolean.valueOf(keepAliveList.get(0))-->Line_64 $$ populateHeaders(mapIds, outputBasePathStr, user, reduceId, request, response, keepAliveParam, mapOutputInfoMap)[ FD ]
Line_34 $$ int reduceId-->Line_78 $$ info = getMapOutputInfo(outputBasePathStr, mapId, reduceId, user)[ FD ]
Line_23 $$ if (LOG.isDebugEnabled()) -->Line_24 $$ LOG.debug("RECV: " + request.getUri() + "\n  mapId: " + mapIds + "\n  reduceId: " + reduceQ + "\n  jobId: " + jobQ + "\n  keepAlive: " + keepAliveParam)[ CD ]
Line_76 $$ MapOutputInfo info = mapOutputInfoMap.get(mapId)-->Line_77 $$ if (info == null) [ FD ]
Line_21 $$ final List<String> reduceQ = q.get("reduce")-->Line_37 $$ reduceId = Integer.parseInt(reduceQ.get(0))[ FD ]
Line_11 $$ final Map<String, List<String>> q = new QueryStringDecoder(request.getUri()).getParameters()-->Line_12 $$ final List<String> keepAliveList = q.get("keepAlive")[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_3 $$ HttpRequest request = (HttpRequest) evt.getMessage()[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_46 $$ final String reqUri = request.getUri()[ CD ]
Line_21 $$ final List<String> reduceQ = q.get("reduce")-->Line_30 $$ if (reduceQ.size() != 1 || jobQ.size() != 1) [ FD ]
Line_34 $$ int reduceId-->Line_80 $$ lastMap = sendMapOutput(ctx, ch, user, mapId, reduceId, info)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_31 $$ sendError(ctx, "Too many job/reduce parameters", BAD_REQUEST)[ FD ]
Line_68 $$ String errorMessage = getErrorMessage(e)-->Line_88 $$ sendError(ctx, errorMessage, INTERNAL_SERVER_ERROR)[ FD ]
Line_11 $$ final Map<String, List<String>> q = new QueryStringDecoder(request.getUri()).getParameters()-->Line_22 $$ final List<String> jobQ = q.get("job")[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_56 $$ sendError(ctx, e.getMessage(), UNAUTHORIZED)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_51 $$ HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_34 $$ int reduceId[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_59 $$ Map<String, MapOutputInfo> mapOutputInfoMap = new HashMap<String, MapOutputInfo>()[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_23 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_76 $$ MapOutputInfo info = mapOutputInfoMap.get(mapId)-->Line_80 $$ lastMap = sendMapOutput(ctx, ch, user, mapId, reduceId, info)[ FD ]
Line_3 $$ HttpRequest request = (HttpRequest) evt.getMessage()-->Line_4 $$ if (request.getMethod() != GET) [ FD ]
Line_34 $$ int reduceId-->Line_37 $$ reduceId = Integer.parseInt(reduceQ.get(0))[ FD ]
Line_60 $$ Channel ch = evt.getChannel()-->Line_66 $$ ch.write(response)[ FD ]
Line_16 $$ if (LOG.isDebugEnabled()) -->Line_17 $$ LOG.debug("KeepAliveParam : " + keepAliveList + " : " + keepAliveParam)[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_48 $$ sendError(ctx, FORBIDDEN)[ FD ]
Line_76 $$ MapOutputInfo info = mapOutputInfoMap.get(mapId)-->Line_78 $$ info = getMapOutputInfo(outputBasePathStr, mapId, reduceId, user)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_3 $$ HttpRequest request = (HttpRequest) evt.getMessage()[ CD ]
Line_26 $$ if (mapIds == null || reduceQ == null || jobQ == null) -->Line_28 $$ return[ CD ]
Line_13 $$ boolean keepAliveParam = false-->Line_64 $$ populateHeaders(mapIds, outputBasePathStr, user, reduceId, request, response, keepAliveParam, mapOutputInfoMap)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_80 $$ lastMap = sendMapOutput(ctx, ch, user, mapId, reduceId, info)[ FD ]
Line_77 $$ if (info == null) -->Line_78 $$ info = getMapOutputInfo(outputBasePathStr, mapId, reduceId, user)[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_53 $$ verifyRequest(jobId, ctx, request, response, new URL("http", "", this.port, reqUri))[ FD ]
Line_62 $$ String outputBasePathStr = getBaseLocation(jobId, user)-->Line_64 $$ populateHeaders(mapIds, outputBasePathStr, user, reduceId, request, response, keepAliveParam, mapOutputInfoMap)[ FD ]
Line_12 $$ final List<String> keepAliveList = q.get("keepAlive")-->Line_14 $$ if (keepAliveList != null && keepAliveList.size() == 1) [ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_61 $$ String user = userRsrc.get(jobId)[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_62 $$ String outputBasePathStr = getBaseLocation(jobId, user)[ CD ]
Line_37 $$ reduceId = Integer.parseInt(reduceQ.get(0))-->Line_78 $$ info = getMapOutputInfo(outputBasePathStr, mapId, reduceId, user)[ FD ]
Line_34 $$ int reduceId-->Line_64 $$ populateHeaders(mapIds, outputBasePathStr, user, reduceId, request, response, keepAliveParam, mapOutputInfoMap)[ FD ]
Line_3 $$ HttpRequest request = (HttpRequest) evt.getMessage()-->Line_53 $$ verifyRequest(jobId, ctx, request, response, new URL("http", "", this.port, reqUri))[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_82 $$ sendError(ctx, NOT_FOUND)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_20 $$ final List<String> mapIds = splitMaps(q.get("map"))[ CD ]
Line_35 $$ String jobId-->Line_53 $$ verifyRequest(jobId, ctx, request, response, new URL("http", "", this.port, reqUri))[ FD ]
Line_74 $$ for (String mapId : mapIds) -->Line_78 $$ info = getMapOutputInfo(outputBasePathStr, mapId, reduceId, user)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_88 $$ sendError(ctx, errorMessage, INTERNAL_SERVER_ERROR)[ FD ]
Line_73 $$ ChannelFuture lastMap = null-->Line_80 $$ lastMap = sendMapOutput(ctx, ch, user, mapId, reduceId, info)[ FD ]
Line_59 $$ Map<String, MapOutputInfo> mapOutputInfoMap = new HashMap<String, MapOutputInfo>()-->Line_64 $$ populateHeaders(mapIds, outputBasePathStr, user, reduceId, request, response, keepAliveParam, mapOutputInfoMap)[ FD ]
Line_38 $$ jobId = jobQ.get(0)-->Line_61 $$ String user = userRsrc.get(jobId)[ FD ]
Line_26 $$ if (mapIds == null || reduceQ == null || jobQ == null) -->Line_27 $$ sendError(ctx, "Required param job, map and reduce", BAD_REQUEST)[ CD ]
Line_8 $$ if (!ShuffleHeader.DEFAULT_HTTP_HEADER_NAME.equals(request.getHeader(ShuffleHeader.HTTP_HEADER_NAME)) || !ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION.equals(request.getHeader(ShuffleHeader.HTTP_HEADER_VERSION))) -->Line_9 $$ sendError(ctx, "Incompatible shuffle request version", BAD_REQUEST)[ CD ]
Line_78 $$ info = getMapOutputInfo(outputBasePathStr, mapId, reduceId, user)-->Line_80 $$ lastMap = sendMapOutput(ctx, ch, user, mapId, reduceId, info)[ FD ]
Line_14 $$ if (keepAliveList != null && keepAliveList.size() == 1) -->Line_15 $$ keepAliveParam = Boolean.valueOf(keepAliveList.get(0))[ CD ]
Line_35 $$ String jobId-->Line_61 $$ String user = userRsrc.get(jobId)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_40 $$ sendError(ctx, "Bad reduce parameter", BAD_REQUEST)[ FD ]
Line_60 $$ Channel ch = evt.getChannel()-->Line_80 $$ lastMap = sendMapOutput(ctx, ch, user, mapId, reduceId, info)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_12 $$ final List<String> keepAliveList = q.get("keepAlive")[ CD ]
Line_51 $$ HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)-->Line_64 $$ populateHeaders(mapIds, outputBasePathStr, user, reduceId, request, response, keepAliveParam, mapOutputInfoMap)[ FD ]
Line_60 $$ Channel ch = evt.getChannel()-->Line_72 $$ ch.write(response)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_35 $$ String jobId[ CD ]
Line_3 $$ HttpRequest request = (HttpRequest) evt.getMessage()-->Line_8 $$ if (!ShuffleHeader.DEFAULT_HTTP_HEADER_NAME.equals(request.getHeader(ShuffleHeader.HTTP_HEADER_NAME)) || !ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION.equals(request.getHeader(ShuffleHeader.HTTP_HEADER_VERSION))) [ FD ]
Line_3 $$ HttpRequest request = (HttpRequest) evt.getMessage()-->Line_11 $$ final Map<String, List<String>> q = new QueryStringDecoder(request.getUri()).getParameters()[ FD ]
Line_20 $$ final List<String> mapIds = splitMaps(q.get("map"))-->Line_64 $$ populateHeaders(mapIds, outputBasePathStr, user, reduceId, request, response, keepAliveParam, mapOutputInfoMap)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_73 $$ ChannelFuture lastMap = null[ CD ]
Line_47 $$ if (null == reqUri) -->Line_48 $$ sendError(ctx, FORBIDDEN)[ CD ]
Line_61 $$ String user = userRsrc.get(jobId)-->Line_78 $$ info = getMapOutputInfo(outputBasePathStr, mapId, reduceId, user)[ FD ]
Line_61 $$ String user = userRsrc.get(jobId)-->Line_62 $$ String outputBasePathStr = getBaseLocation(jobId, user)[ FD ]
Line_14 $$ if (keepAliveList != null && keepAliveList.size() == 1) -->Line_16 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_3 $$ HttpRequest request = (HttpRequest) evt.getMessage()-->Line_64 $$ populateHeaders(mapIds, outputBasePathStr, user, reduceId, request, response, keepAliveParam, mapOutputInfoMap)[ FD ]
Line_38 $$ jobId = jobQ.get(0)-->Line_53 $$ verifyRequest(jobId, ctx, request, response, new URL("http", "", this.port, reqUri))[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_92 $$ lastMap.addListener(metrics)[ CD ]
Line_73 $$ ChannelFuture lastMap = null-->Line_93 $$ lastMap.addListener(ChannelFutureListener.CLOSE)[ FD ]
Line_74 $$ for (String mapId : mapIds) -->Line_80 $$ lastMap = sendMapOutput(ctx, ch, user, mapId, reduceId, info)[ FD ]
Line_73 $$ ChannelFuture lastMap = null-->Line_92 $$ lastMap.addListener(metrics)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_22 $$ final List<String> jobQ = q.get("job")[ CD ]
Line_22 $$ final List<String> jobQ = q.get("job")-->Line_30 $$ if (reduceQ.size() != 1 || jobQ.size() != 1) [ FD ]
Line_73 $$ ChannelFuture lastMap = null-->Line_81 $$ if (null == lastMap) [ FD ]
Line_35 $$ String jobId-->Line_38 $$ jobId = jobQ.get(0)[ FD ]
Line_37 $$ reduceId = Integer.parseInt(reduceQ.get(0))-->Line_64 $$ populateHeaders(mapIds, outputBasePathStr, user, reduceId, request, response, keepAliveParam, mapOutputInfoMap)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_4 $$ if (request.getMethod() != GET) [ CD ]
Line_38 $$ jobId = jobQ.get(0)-->Line_62 $$ String outputBasePathStr = getBaseLocation(jobId, user)[ FD ]
Line_11 $$ final Map<String, List<String>> q = new QueryStringDecoder(request.getUri()).getParameters()-->Line_21 $$ final List<String> reduceQ = q.get("reduce")[ FD ]
Line_68 $$ String errorMessage = getErrorMessage(e)-->Line_69 $$ sendError(ctx, errorMessage, INTERNAL_SERVER_ERROR)[ FD ]
Line_46 $$ final String reqUri = request.getUri()-->Line_47 $$ if (null == reqUri) [ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_21 $$ final List<String> reduceQ = q.get("reduce")[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_47 $$ if (null == reqUri) [ CD ]
Line_3 $$ HttpRequest request = (HttpRequest) evt.getMessage()-->Line_24 $$ LOG.debug("RECV: " + request.getUri() + "\n  mapId: " + mapIds + "\n  reduceId: " + reduceQ + "\n  jobId: " + jobQ + "\n  keepAlive: " + keepAliveParam)[ FD ]
Line_30 $$ if (reduceQ.size() != 1 || jobQ.size() != 1) -->Line_31 $$ sendError(ctx, "Too many job/reduce parameters", BAD_REQUEST)[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_8 $$ if (!ShuffleHeader.DEFAULT_HTTP_HEADER_NAME.equals(request.getHeader(ShuffleHeader.HTTP_HEADER_NAME)) || !ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION.equals(request.getHeader(ShuffleHeader.HTTP_HEADER_VERSION))) [ CD ]
Line_12 $$ final List<String> keepAliveList = q.get("keepAlive")-->Line_15 $$ keepAliveParam = Boolean.valueOf(keepAliveList.get(0))[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_9 $$ sendError(ctx, "Incompatible shuffle request version", BAD_REQUEST)[ FD ]
Line_61 $$ String user = userRsrc.get(jobId)-->Line_64 $$ populateHeaders(mapIds, outputBasePathStr, user, reduceId, request, response, keepAliveParam, mapOutputInfoMap)[ FD ]
Line_62 $$ String outputBasePathStr = getBaseLocation(jobId, user)-->Line_78 $$ info = getMapOutputInfo(outputBasePathStr, mapId, reduceId, user)[ FD ]
Line_81 $$ if (null == lastMap) -->Line_83 $$ return[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_93 $$ lastMap.addListener(ChannelFutureListener.CLOSE)[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_13 $$ boolean keepAliveParam = false[ CD ]
Line_51 $$ HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)-->Line_72 $$ ch.write(response)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_72 $$ ch.write(response)[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_14 $$ if (keepAliveList != null && keepAliveList.size() == 1) [ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) throws Exception -->Line_30 $$ if (reduceQ.size() != 1 || jobQ.size() != 1) [ CD ]
Line_37 $$ reduceId = Integer.parseInt(reduceQ.get(0))-->Line_80 $$ lastMap = sendMapOutput(ctx, ch, user, mapId, reduceId, info)[ FD ]
Line_80 $$ lastMap = sendMapOutput(ctx, ch, user, mapId, reduceId, info)-->Line_93 $$ lastMap.addListener(ChannelFutureListener.CLOSE)[ FD ]
Line_4 $$ if (request.getMethod() != GET) -->Line_5 $$ sendError(ctx, METHOD_NOT_ALLOWED)[ CD ]
Line_4 $$ if (request.getMethod() != GET) -->Line_6 $$ return[ CD ]
