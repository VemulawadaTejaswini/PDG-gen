Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_25 $$ if ((flags & 0x08) != 0) [ CD ]
Line_10 $$ final FileInputStream in = new FileInputStream(fnLocal.toString())-->Line_26 $$ while ((numBytesRead = in.read()) != 0) [ FD ]
Line_31 $$ while ((numBytesRead = in.read()) != 0) -->Line_43 $$ numBytesRead = in.read(compressedBuf)[ FD ]
Line_13 $$ int numBytesRead = in.read(compressedBuf, 0, 10)-->Line_20 $$ numBytesRead = in.read(compressedBuf, 0, 2)[ FD ]
Line_3 $$ CompressionCodec gzip = new GzipCodec()-->Line_6 $$ final String fn = "concat" + gzip.getDefaultExtension()[ FD ]
Line_30 $$ if ((flags & 0x10) != 0) -->Line_31 $$ while ((numBytesRead = in.read()) != 0) [ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_14 $$ assertEquals("header bytes read", 10, numBytesRead)[ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_18 $$ byte flags = (byte) (compressedBuf[3] & 0xff)[ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_8 $$ Path fnHDFS = new Path(workDir, fn)[ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_43 $$ numBytesRead = in.read(compressedBuf)[ CD ]
Line_13 $$ int numBytesRead = in.read(compressedBuf, 0, 10)-->Line_14 $$ assertEquals("header bytes read", 10, numBytesRead)[ FD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_38 $$ if ((flags & 0x02) != 0) [ CD ]
Line_31 $$ while ((numBytesRead = in.read()) != 0) -->Line_40 $$ assertEquals("CRC16 bytes read", 2, numBytesRead)[ FD ]
Line_39 $$ numBytesRead = in.read(compressedBuf, 0, 2)-->Line_46 $$ inflater.setInput(compressedBuf, 0, numBytesRead)[ FD ]
Line_10 $$ final FileInputStream in = new FileInputStream(fnLocal.toString())-->Line_39 $$ numBytesRead = in.read(compressedBuf, 0, 2)[ FD ]
Line_26 $$ while ((numBytesRead = in.read()) != 0) -->Line_27 $$ assertFalse("unexpected end-of-file while reading filename", numBytesRead == -1)[ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_19 $$ if ((flags & 0x04) != 0) [ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_30 $$ if ((flags & 0x10) != 0) [ CD ]
Line_25 $$ if ((flags & 0x08) != 0) -->Line_26 $$ while ((numBytesRead = in.read()) != 0) [ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_10 $$ final FileInputStream in = new FileInputStream(fnLocal.toString())[ CD ]
Line_45 $$ Inflater inflater = new Inflater(true)-->Line_46 $$ inflater.setInput(compressedBuf, 0, numBytesRead)[ FD ]
Line_43 $$ numBytesRead = in.read(compressedBuf)-->Line_46 $$ inflater.setInput(compressedBuf, 0, numBytesRead)[ FD ]
Line_20 $$ numBytesRead = in.read(compressedBuf, 0, 2)-->Line_39 $$ numBytesRead = in.read(compressedBuf, 0, 2)[ FD ]
Line_20 $$ numBytesRead = in.read(compressedBuf, 0, 2)-->Line_31 $$ while ((numBytesRead = in.read()) != 0) [ FD ]
Line_26 $$ while ((numBytesRead = in.read()) != 0) -->Line_31 $$ while ((numBytesRead = in.read()) != 0) [ FD ]
Line_10 $$ final FileInputStream in = new FileInputStream(fnLocal.toString())-->Line_31 $$ while ((numBytesRead = in.read()) != 0) [ FD ]
Line_31 $$ while ((numBytesRead = in.read()) != 0) -->Line_46 $$ inflater.setInput(compressedBuf, 0, numBytesRead)[ FD ]
Line_7 $$ Path fnLocal = new Path(System.getProperty("test.concat.data", "/tmp"), fn)-->Line_9 $$ localFs.copyFromLocalFile(fnLocal, fnHDFS)[ FD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_46 $$ inflater.setInput(compressedBuf, 0, numBytesRead)[ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_54 $$ in.close()[ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_6 $$ final String fn = "concat" + gzip.getDefaultExtension()[ CD ]
Line_26 $$ while ((numBytesRead = in.read()) != 0) -->Line_46 $$ inflater.setInput(compressedBuf, 0, numBytesRead)[ FD ]
Line_13 $$ int numBytesRead = in.read(compressedBuf, 0, 10)-->Line_31 $$ while ((numBytesRead = in.read()) != 0) [ FD ]
Line_10 $$ final FileInputStream in = new FileInputStream(fnLocal.toString())-->Line_43 $$ numBytesRead = in.read(compressedBuf)[ FD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_7 $$ Path fnLocal = new Path(System.getProperty("test.concat.data", "/tmp"), fn)[ CD ]
Line_22 $$ int xlen = ((compressedBuf[1] << 8) | compressedBuf[0]) & 0xffff-->Line_23 $$ in.skip(xlen)[ FD ]
Line_38 $$ if ((flags & 0x02) != 0) -->Line_40 $$ assertEquals("CRC16 bytes read", 2, numBytesRead)[ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_15 $$ assertEquals("1st byte", 0x1f, compressedBuf[0] & 0xff)[ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_13 $$ int numBytesRead = in.read(compressedBuf, 0, 10)[ CD ]
Line_12 $$ byte[] compressedBuf = new byte[256]-->Line_20 $$ numBytesRead = in.read(compressedBuf, 0, 2)[ FD ]
Line_10 $$ final FileInputStream in = new FileInputStream(fnLocal.toString())-->Line_13 $$ int numBytesRead = in.read(compressedBuf, 0, 10)[ FD ]
Line_10 $$ final FileInputStream in = new FileInputStream(fnLocal.toString())-->Line_20 $$ numBytesRead = in.read(compressedBuf, 0, 2)[ FD ]
Line_8 $$ Path fnHDFS = new Path(workDir, fn)-->Line_9 $$ localFs.copyFromLocalFile(fnLocal, fnHDFS)[ FD ]
Line_12 $$ byte[] compressedBuf = new byte[256]-->Line_43 $$ numBytesRead = in.read(compressedBuf)[ FD ]
Line_20 $$ numBytesRead = in.read(compressedBuf, 0, 2)-->Line_21 $$ assertEquals("XLEN bytes read", 2, numBytesRead)[ FD ]
Line_13 $$ int numBytesRead = in.read(compressedBuf, 0, 10)-->Line_46 $$ inflater.setInput(compressedBuf, 0, numBytesRead)[ FD ]
Line_19 $$ if ((flags & 0x04) != 0) -->Line_22 $$ int xlen = ((compressedBuf[1] << 8) | compressedBuf[0]) & 0xffff[ CD ]
Line_38 $$ if ((flags & 0x02) != 0) -->Line_39 $$ numBytesRead = in.read(compressedBuf, 0, 2)[ CD ]
Line_12 $$ byte[] compressedBuf = new byte[256]-->Line_39 $$ numBytesRead = in.read(compressedBuf, 0, 2)[ FD ]
Line_45 $$ Inflater inflater = new Inflater(true)-->Line_48 $$ int numBytesUncompressed = inflater.inflate(uncompressedBuf)[ FD ]
Line_13 $$ int numBytesRead = in.read(compressedBuf, 0, 10)-->Line_43 $$ numBytesRead = in.read(compressedBuf)[ FD ]
Line_31 $$ while ((numBytesRead = in.read()) != 0) -->Line_39 $$ numBytesRead = in.read(compressedBuf, 0, 2)[ FD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_5 $$ System.out.println(COLOR_BR_BLUE + "testPrototypeInflaterGzip() using " + "non-native/Java Inflater and manual gzip header/trailer parsing" + COLOR_NORMAL)[ CD ]
Line_35 $$ if ((flags & 0xe0) != 0) -->Line_36 $$ assertTrue("reserved bits are set??", (flags & 0xe0) == 0)[ CD ]
Line_12 $$ byte[] compressedBuf = new byte[256]-->Line_46 $$ inflater.setInput(compressedBuf, 0, numBytesRead)[ FD ]
Line_20 $$ numBytesRead = in.read(compressedBuf, 0, 2)-->Line_40 $$ assertEquals("CRC16 bytes read", 2, numBytesRead)[ FD ]
Line_20 $$ numBytesRead = in.read(compressedBuf, 0, 2)-->Line_26 $$ while ((numBytesRead = in.read()) != 0) [ FD ]
Line_10 $$ final FileInputStream in = new FileInputStream(fnLocal.toString())-->Line_23 $$ in.skip(xlen)[ FD ]
Line_26 $$ while ((numBytesRead = in.read()) != 0) -->Line_39 $$ numBytesRead = in.read(compressedBuf, 0, 2)[ FD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_16 $$ assertEquals("2nd byte", 0x8b, compressedBuf[1] & 0xff)[ CD ]
Line_20 $$ numBytesRead = in.read(compressedBuf, 0, 2)-->Line_43 $$ numBytesRead = in.read(compressedBuf)[ FD ]
Line_19 $$ if ((flags & 0x04) != 0) -->Line_21 $$ assertEquals("XLEN bytes read", 2, numBytesRead)[ CD ]
Line_13 $$ int numBytesRead = in.read(compressedBuf, 0, 10)-->Line_21 $$ assertEquals("XLEN bytes read", 2, numBytesRead)[ FD ]
Line_20 $$ numBytesRead = in.read(compressedBuf, 0, 2)-->Line_46 $$ inflater.setInput(compressedBuf, 0, numBytesRead)[ FD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_12 $$ byte[] compressedBuf = new byte[256][ CD ]
Line_19 $$ if ((flags & 0x04) != 0) -->Line_20 $$ numBytesRead = in.read(compressedBuf, 0, 2)[ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_9 $$ localFs.copyFromLocalFile(fnLocal, fnHDFS)[ CD ]
Line_13 $$ int numBytesRead = in.read(compressedBuf, 0, 10)-->Line_26 $$ while ((numBytesRead = in.read()) != 0) [ FD ]
Line_31 $$ while ((numBytesRead = in.read()) != 0) -->Line_32 $$ assertFalse("unexpected end-of-file while reading comment", numBytesRead == -1)[ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_4 $$ localFs.delete(workDir, true)[ CD ]
Line_12 $$ byte[] compressedBuf = new byte[256]-->Line_13 $$ int numBytesRead = in.read(compressedBuf, 0, 10)[ FD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_45 $$ Inflater inflater = new Inflater(true)[ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_11 $$ assertEquals("concat bytes available", 148, in.available())[ CD ]
Line_26 $$ while ((numBytesRead = in.read()) != 0) -->Line_40 $$ assertEquals("CRC16 bytes read", 2, numBytesRead)[ FD ]
Line_38 $$ if ((flags & 0x02) != 0) -->Line_41 $$ int crc16 = ((compressedBuf[1] << 8) | compressedBuf[0]) & 0xffff[ CD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_3 $$ CompressionCodec gzip = new GzipCodec()[ CD ]
Line_19 $$ if ((flags & 0x04) != 0) -->Line_23 $$ in.skip(xlen)[ CD ]
Line_13 $$ int numBytesRead = in.read(compressedBuf, 0, 10)-->Line_39 $$ numBytesRead = in.read(compressedBuf, 0, 2)[ FD ]
Line_10 $$ final FileInputStream in = new FileInputStream(fnLocal.toString())-->Line_54 $$ in.close()[ FD ]
Line_13 $$ int numBytesRead = in.read(compressedBuf, 0, 10)-->Line_40 $$ assertEquals("CRC16 bytes read", 2, numBytesRead)[ FD ]
Line_26 $$ while ((numBytesRead = in.read()) != 0) -->Line_43 $$ numBytesRead = in.read(compressedBuf)[ FD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_35 $$ if ((flags & 0xe0) != 0) [ CD ]
Line_39 $$ numBytesRead = in.read(compressedBuf, 0, 2)-->Line_43 $$ numBytesRead = in.read(compressedBuf)[ FD ]
Line_39 $$ numBytesRead = in.read(compressedBuf, 0, 2)-->Line_40 $$ assertEquals("CRC16 bytes read", 2, numBytesRead)[ FD ]
Line_7 $$ Path fnLocal = new Path(System.getProperty("test.concat.data", "/tmp"), fn)-->Line_10 $$ final FileInputStream in = new FileInputStream(fnLocal.toString())[ FD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_44 $$ byte[] uncompressedBuf = new byte[256][ CD ]
Line_10 $$ final FileInputStream in = new FileInputStream(fnLocal.toString())-->Line_11 $$ assertEquals("concat bytes available", 148, in.available())[ FD ]
Line_44 $$ byte[] uncompressedBuf = new byte[256]-->Line_48 $$ int numBytesUncompressed = inflater.inflate(uncompressedBuf)[ FD ]
Line_2 $$ public void testPrototypeInflaterGzip() throws IOException -->Line_17 $$ assertEquals("3rd byte (compression method)", 8, compressedBuf[2] & 0xff)[ CD ]
