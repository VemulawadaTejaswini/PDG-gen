Line_2 $$ public void testSendDatagramWithCallback() -->Line_58 $$ _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband), requestDatagram, null, EnumSet.of(CompletionHandler.CompletionType.REPLIED), new RecordCompletionHandler<Object>(), 2, TimeUnit.SECONDS)[ CD ]
Line_47 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_65 $$ _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband), requestDatagram, null, EnumSet.of(CompletionHandler.CompletionType.SUBMITTED), new RecordCompletionHandler<Object>())[ FD ]
Line_55 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_57 $$ Assert.assertTrue(timeoutSequenceIds.remove(requestDatagram.getSequenceId()))[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_64 $$ Assert.assertTrue(timeoutSequenceIds.remove(requestDatagram.getSequenceId()))[ CD ]
Line_55 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_63 $$ Assert.assertEquals(1, timeoutSequenceIds.size())[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_52 $$ Assert.assertEquals(1, responseWaitingMap.size())[ CD ]
Line_55 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_56 $$ Assert.assertEquals(1, timeoutSequenceIds.size())[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_59 $$ sentDatagram = _mockIntraband.getDatagram()[ CD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_61 $$ Assert.assertEquals(1, responseWaitingMap.size())[ CD ]
Line_47 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_57 $$ Assert.assertTrue(timeoutSequenceIds.remove(requestDatagram.getSequenceId()))[ FD ]
Line_51 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_52 $$ Assert.assertEquals(1, responseWaitingMap.size())[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_62 $$ Assert.assertSame(requestDatagram, responseWaitingMap.remove(requestDatagram.getSequenceId()))[ CD ]
Line_47 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_53 $$ Assert.assertSame(requestDatagram, responseWaitingMap.remove(requestDatagram.getSequenceId()))[ FD ]
Line_47 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_58 $$ _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband), requestDatagram, null, EnumSet.of(CompletionHandler.CompletionType.REPLIED), new RecordCompletionHandler<Object>(), 2, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_54 $$ Map<Long, Long> timeoutMap = _mockIntraband.timeoutMap[ CD ]
Line_51 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_62 $$ Assert.assertSame(requestDatagram, responseWaitingMap.remove(requestDatagram.getSequenceId()))[ FD ]
Line_49 $$ Datagram sentDatagram = _mockIntraband.getDatagram()-->Line_66 $$ sentDatagram = _mockIntraband.getDatagram()[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_57 $$ Assert.assertTrue(timeoutSequenceIds.remove(requestDatagram.getSequenceId()))[ CD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_65 $$ _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband), requestDatagram, null, EnumSet.of(CompletionHandler.CompletionType.SUBMITTED), new RecordCompletionHandler<Object>())[ CD ]
Line_59 $$ sentDatagram = _mockIntraband.getDatagram()-->Line_66 $$ sentDatagram = _mockIntraband.getDatagram()[ FD ]
Line_51 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_61 $$ Assert.assertEquals(1, responseWaitingMap.size())[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_60 $$ Assert.assertEquals(2000, sentDatagram.timeout)[ CD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_63 $$ Assert.assertEquals(1, timeoutSequenceIds.size())[ CD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_67 $$ Assert.assertEquals(_DEFAULT_TIMEOUT, sentDatagram.timeout)[ CD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_53 $$ Assert.assertSame(requestDatagram, responseWaitingMap.remove(requestDatagram.getSequenceId()))[ CD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_51 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap[ CD ]
Line_55 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_64 $$ Assert.assertTrue(timeoutSequenceIds.remove(requestDatagram.getSequenceId()))[ FD ]
Line_51 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_53 $$ Assert.assertSame(requestDatagram, responseWaitingMap.remove(requestDatagram.getSequenceId()))[ FD ]
Line_10 $$ RegistrationReference registrationReference = new MockRegistrationReference(_mockIntraband)-->Line_11 $$ registrationReference.cancelRegistration()[ FD ]
Line_54 $$ Map<Long, Long> timeoutMap = _mockIntraband.timeoutMap-->Line_55 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()[ FD ]
Line_10 $$ RegistrationReference registrationReference = new MockRegistrationReference(_mockIntraband)-->Line_12 $$ _mockIntraband.sendDatagram(registrationReference, null, null, null, null)[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_48 $$ _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband), requestDatagram, null, EnumSet.of(CompletionHandler.CompletionType.DELIVERED), new RecordCompletionHandler<Object>(), 0, TimeUnit.MILLISECONDS)[ CD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_50 $$ Assert.assertEquals(_DEFAULT_TIMEOUT, sentDatagram.timeout)[ CD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_49 $$ Datagram sentDatagram = _mockIntraband.getDatagram()[ CD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_56 $$ Assert.assertEquals(1, timeoutSequenceIds.size())[ CD ]
Line_47 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_48 $$ _mockIntraband.sendDatagram(new MockRegistrationReference(_mockIntraband), requestDatagram, null, EnumSet.of(CompletionHandler.CompletionType.DELIVERED), new RecordCompletionHandler<Object>(), 0, TimeUnit.MILLISECONDS)[ FD ]
Line_47 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_64 $$ Assert.assertTrue(timeoutSequenceIds.remove(requestDatagram.getSequenceId()))[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_55 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()[ CD ]
Line_49 $$ Datagram sentDatagram = _mockIntraband.getDatagram()-->Line_59 $$ sentDatagram = _mockIntraband.getDatagram()[ FD ]
Line_47 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_62 $$ Assert.assertSame(requestDatagram, responseWaitingMap.remove(requestDatagram.getSequenceId()))[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_47 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ CD ]
Line_2 $$ public void testSendDatagramWithCallback() -->Line_66 $$ sentDatagram = _mockIntraband.getDatagram()[ CD ]
