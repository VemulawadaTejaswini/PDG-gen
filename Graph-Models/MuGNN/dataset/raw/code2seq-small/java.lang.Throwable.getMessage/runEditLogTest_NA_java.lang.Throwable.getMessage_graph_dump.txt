Line_8 $$ elfos = new EditLogFileOutputStream(new Configuration(), TEST_LOG_NAME, 0)-->Line_12 $$ elfos.flushAndSync(true)[ FD ]
Line_43 $$ if (elts.getLastValidTxId() != -1) -->Line_44 $$ op = null[ CD ]
Line_2 $$ static void runEditLogTest(EditLogTestSetup elts) throws IOException -->Line_6 $$ EditLogFileInputStream elfis = null[ CD ]
Line_6 $$ EditLogFileInputStream elfis = null-->Line_22 $$ op = elfis.nextOp()[ FD ]
Line_8 $$ elfos = new EditLogFileOutputStream(new Configuration(), TEST_LOG_NAME, 0)-->Line_13 $$ elfos.close()[ FD ]
Line_19 $$ long prevTxId = 0-->Line_40 $$ assertEquals(prevTxId, elts.getLastValidTxId())[ FD ]
Line_19 $$ long prevTxId = 0-->Line_31 $$ prevTxId = op.getTransactionId()[ FD ]
Line_18 $$ FSEditLogOp op = null-->Line_30 $$ validTxIds.remove(op.getTransactionId())[ FD ]
Line_22 $$ op = elfis.nextOp()-->Line_30 $$ validTxIds.remove(op.getTransactionId())[ FD ]
Line_2 $$ static void runEditLogTest(EditLogTestSetup elts) throws IOException -->Line_37 $$ if (elts.getLastValidTxId() == -1) [ FD ]
Line_2 $$ static void runEditLogTest(EditLogTestSetup elts) throws IOException -->Line_33 $$ if (elts.getLastValidTxId() != -1) [ FD ]
Line_22 $$ op = elfis.nextOp()-->Line_53 $$ assertTrue(validTxIds.remove(op.getTransactionId()))[ FD ]
Line_27 $$ if (!validTxIds.contains(op.getTransactionId())) -->Line_28 $$ fail("read txid " + op.getTransactionId() + ", which we did not expect to find.")[ CD ]
Line_15 $$ elfis = new EditLogFileInputStream(TEST_LOG_NAME)-->Line_61 $$ IOUtils.cleanup(LOG, elfos, elfis)[ FD ]
Line_8 $$ elfos = new EditLogFileOutputStream(new Configuration(), TEST_LOG_NAME, 0)-->Line_14 $$ elfos = null[ FD ]
Line_44 $$ op = null-->Line_53 $$ assertTrue(validTxIds.remove(op.getTransactionId()))[ FD ]
Line_15 $$ elfis = new EditLogFileInputStream(TEST_LOG_NAME)-->Line_48 $$ op = elfis.nextValidOp()[ FD ]
Line_45 $$ prevTxId = 0-->Line_52 $$ prevTxId = op.getTransactionId()[ FD ]
Line_6 $$ EditLogFileInputStream elfis = null-->Line_61 $$ IOUtils.cleanup(LOG, elfos, elfis)[ FD ]
Line_18 $$ FSEditLogOp op = null-->Line_49 $$ if (op == null) [ FD ]
Line_31 $$ prevTxId = op.getTransactionId()-->Line_40 $$ assertEquals(prevTxId, elts.getLastValidTxId())[ FD ]
Line_15 $$ elfis = new EditLogFileInputStream(TEST_LOG_NAME)-->Line_22 $$ op = elfis.nextOp()[ FD ]
Line_44 $$ op = null-->Line_48 $$ op = elfis.nextValidOp()[ FD ]
Line_2 $$ static void runEditLogTest(EditLogTestSetup elts) throws IOException -->Line_17 $$ Set<Long> validTxIds = elts.getValidTxIds()[ FD ]
Line_2 $$ static void runEditLogTest(EditLogTestSetup elts) throws IOException -->Line_40 $$ assertEquals(prevTxId, elts.getLastValidTxId())[ FD ]
Line_17 $$ Set<Long> validTxIds = elts.getValidTxIds()-->Line_27 $$ if (!validTxIds.contains(op.getTransactionId())) [ FD ]
Line_22 $$ op = elfis.nextOp()-->Line_23 $$ if (op == null) [ FD ]
Line_2 $$ static void runEditLogTest(EditLogTestSetup elts) throws IOException -->Line_4 $$ final OpInstanceCache cache = new OpInstanceCache()[ CD ]
Line_48 $$ op = elfis.nextValidOp()-->Line_53 $$ assertTrue(validTxIds.remove(op.getTransactionId()))[ FD ]
Line_18 $$ FSEditLogOp op = null-->Line_28 $$ fail("read txid " + op.getTransactionId() + ", which we did not expect to find.")[ FD ]
Line_18 $$ FSEditLogOp op = null-->Line_48 $$ op = elfis.nextValidOp()[ FD ]
Line_2 $$ static void runEditLogTest(EditLogTestSetup elts) throws IOException -->Line_43 $$ if (elts.getLastValidTxId() != -1) [ FD ]
Line_37 $$ if (elts.getLastValidTxId() == -1) -->Line_38 $$ fail("expected all transactions to be valid, but got exception " + "on txid " + prevTxId)[ CD ]
Line_14 $$ elfos = null-->Line_61 $$ IOUtils.cleanup(LOG, elfos, elfis)[ FD ]
Line_5 $$ EditLogFileOutputStream elfos = null-->Line_14 $$ elfos = null[ FD ]
Line_18 $$ FSEditLogOp op = null-->Line_22 $$ op = elfis.nextOp()[ FD ]
Line_47 $$ while (true) -->Line_48 $$ op = elfis.nextValidOp()[ CD ]
Line_18 $$ FSEditLogOp op = null-->Line_23 $$ if (op == null) [ FD ]
Line_18 $$ FSEditLogOp op = null-->Line_31 $$ prevTxId = op.getTransactionId()[ FD ]
Line_18 $$ FSEditLogOp op = null-->Line_27 $$ if (!validTxIds.contains(op.getTransactionId())) [ FD ]
Line_5 $$ EditLogFileOutputStream elfos = null-->Line_8 $$ elfos = new EditLogFileOutputStream(new Configuration(), TEST_LOG_NAME, 0)[ FD ]
Line_21 $$ while (true) -->Line_26 $$ LOG.debug("read txid " + op.txid)[ CD ]
Line_31 $$ prevTxId = op.getTransactionId()-->Line_45 $$ prevTxId = 0[ FD ]
Line_37 $$ if (elts.getLastValidTxId() == -1) -->Line_40 $$ assertEquals(prevTxId, elts.getLastValidTxId())[ CD ]
Line_21 $$ while (true) -->Line_23 $$ if (op == null) [ CD ]
Line_18 $$ FSEditLogOp op = null-->Line_52 $$ prevTxId = op.getTransactionId()[ FD ]
Line_21 $$ while (true) -->Line_31 $$ prevTxId = op.getTransactionId()[ CD ]
Line_47 $$ while (true) -->Line_52 $$ prevTxId = op.getTransactionId()[ CD ]
Line_43 $$ if (elts.getLastValidTxId() != -1) -->Line_45 $$ prevTxId = 0[ CD ]
Line_2 $$ static void runEditLogTest(EditLogTestSetup elts) throws IOException -->Line_5 $$ EditLogFileOutputStream elfos = null[ CD ]
Line_48 $$ op = elfis.nextValidOp()-->Line_49 $$ if (op == null) [ FD ]
Line_5 $$ EditLogFileOutputStream elfos = null-->Line_13 $$ elfos.close()[ FD ]
Line_22 $$ op = elfis.nextOp()-->Line_44 $$ op = null[ FD ]
Line_2 $$ static void runEditLogTest(EditLogTestSetup elts) throws IOException -->Line_3 $$ final File TEST_LOG_NAME = new File(TEST_DIR, "test_edit_log")[ CD ]
Line_22 $$ op = elfis.nextOp()-->Line_28 $$ fail("read txid " + op.getTransactionId() + ", which we did not expect to find.")[ FD ]
Line_18 $$ FSEditLogOp op = null-->Line_44 $$ op = null[ FD ]
Line_17 $$ Set<Long> validTxIds = elts.getValidTxIds()-->Line_59 $$ assertTrue(validTxIds.isEmpty())[ FD ]
Line_6 $$ EditLogFileInputStream elfis = null-->Line_48 $$ op = elfis.nextValidOp()[ FD ]
Line_47 $$ while (true) -->Line_49 $$ if (op == null) [ CD ]
Line_44 $$ op = null-->Line_49 $$ if (op == null) [ FD ]
Line_17 $$ Set<Long> validTxIds = elts.getValidTxIds()-->Line_30 $$ validTxIds.remove(op.getTransactionId())[ FD ]
Line_44 $$ op = null-->Line_52 $$ prevTxId = op.getTransactionId()[ FD ]
Line_6 $$ EditLogFileInputStream elfis = null-->Line_15 $$ elfis = new EditLogFileInputStream(TEST_LOG_NAME)[ FD ]
Line_8 $$ elfos = new EditLogFileOutputStream(new Configuration(), TEST_LOG_NAME, 0)-->Line_61 $$ IOUtils.cleanup(LOG, elfos, elfis)[ FD ]
Line_4 $$ final OpInstanceCache cache = new OpInstanceCache()-->Line_10 $$ elts.addTransactionsToLog(elfos, cache)[ FD ]
Line_5 $$ EditLogFileOutputStream elfos = null-->Line_10 $$ elts.addTransactionsToLog(elfos, cache)[ FD ]
Line_19 $$ long prevTxId = 0-->Line_45 $$ prevTxId = 0[ FD ]
Line_47 $$ while (true) -->Line_53 $$ assertTrue(validTxIds.remove(op.getTransactionId()))[ CD ]
Line_33 $$ if (elts.getLastValidTxId() != -1) -->Line_34 $$ fail("failed to throw IoException as expected")[ CD ]
Line_8 $$ elfos = new EditLogFileOutputStream(new Configuration(), TEST_LOG_NAME, 0)-->Line_9 $$ elfos.create(NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION)[ FD ]
Line_21 $$ while (true) -->Line_22 $$ op = elfis.nextOp()[ CD ]
Line_19 $$ long prevTxId = 0-->Line_52 $$ prevTxId = op.getTransactionId()[ FD ]
Line_17 $$ Set<Long> validTxIds = elts.getValidTxIds()-->Line_53 $$ assertTrue(validTxIds.remove(op.getTransactionId()))[ FD ]
Line_5 $$ EditLogFileOutputStream elfos = null-->Line_11 $$ elfos.setReadyToFlush()[ FD ]
Line_22 $$ op = elfis.nextOp()-->Line_27 $$ if (!validTxIds.contains(op.getTransactionId())) [ FD ]
Line_21 $$ while (true) -->Line_30 $$ validTxIds.remove(op.getTransactionId())[ CD ]
Line_8 $$ elfos = new EditLogFileOutputStream(new Configuration(), TEST_LOG_NAME, 0)-->Line_10 $$ elts.addTransactionsToLog(elfos, cache)[ FD ]
Line_31 $$ prevTxId = op.getTransactionId()-->Line_52 $$ prevTxId = op.getTransactionId()[ FD ]
Line_5 $$ EditLogFileOutputStream elfos = null-->Line_9 $$ elfos.create(NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION)[ FD ]
Line_8 $$ elfos = new EditLogFileOutputStream(new Configuration(), TEST_LOG_NAME, 0)-->Line_11 $$ elfos.setReadyToFlush()[ FD ]
Line_48 $$ op = elfis.nextValidOp()-->Line_52 $$ prevTxId = op.getTransactionId()[ FD ]
Line_22 $$ op = elfis.nextOp()-->Line_31 $$ prevTxId = op.getTransactionId()[ FD ]
Line_5 $$ EditLogFileOutputStream elfos = null-->Line_12 $$ elfos.flushAndSync(true)[ FD ]
Line_21 $$ while (true) -->Line_27 $$ if (!validTxIds.contains(op.getTransactionId())) [ CD ]
Line_15 $$ elfis = new EditLogFileInputStream(TEST_LOG_NAME)-->Line_16 $$ elfis.setMaxOpSize(elts.getMaxOpSize())[ FD ]
Line_22 $$ op = elfis.nextOp()-->Line_52 $$ prevTxId = op.getTransactionId()[ FD ]
Line_22 $$ op = elfis.nextOp()-->Line_48 $$ op = elfis.nextValidOp()[ FD ]
Line_2 $$ static void runEditLogTest(EditLogTestSetup elts) throws IOException -->Line_16 $$ elfis.setMaxOpSize(elts.getMaxOpSize())[ FD ]
Line_5 $$ EditLogFileOutputStream elfos = null-->Line_61 $$ IOUtils.cleanup(LOG, elfos, elfis)[ FD ]
Line_2 $$ static void runEditLogTest(EditLogTestSetup elts) throws IOException -->Line_10 $$ elts.addTransactionsToLog(elfos, cache)[ FD ]
Line_18 $$ FSEditLogOp op = null-->Line_53 $$ assertTrue(validTxIds.remove(op.getTransactionId()))[ FD ]
Line_6 $$ EditLogFileInputStream elfis = null-->Line_16 $$ elfis.setMaxOpSize(elts.getMaxOpSize())[ FD ]
Line_22 $$ op = elfis.nextOp()-->Line_49 $$ if (op == null) [ FD ]
