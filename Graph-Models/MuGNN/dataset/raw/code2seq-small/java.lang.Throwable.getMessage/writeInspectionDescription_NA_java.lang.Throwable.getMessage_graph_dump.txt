Line_2 $$ protected void writeInspectionDescription(@NotNull final Writer w, @NotNull final InspectionToolWrapper toolWrapper, @NotNull final Transformer transformer) throws IOException, ConversionException -->Line_16 $$ final String[] descLines = StringUtil.splitByLines(trimmedDesc)[ CD ]
Line_5 $$ if (descr == null) -->Line_6 $$ return[ CD ]
Line_2 $$ protected void writeInspectionDescription(@NotNull final Writer w, @NotNull final InspectionToolWrapper toolWrapper, @NotNull final Transformer transformer) throws IOException, ConversionException -->Line_3 $$ final StringWriter descrWriter = new StringWriter()[ CD ]
Line_2 $$ protected void writeInspectionDescription(@NotNull final Writer w, @NotNull final InspectionToolWrapper toolWrapper, @NotNull final Transformer transformer) throws IOException, ConversionException -->Line_8 $$ descr = descr.replace("<br>", "<br/>")[ CD ]
Line_2 $$ protected void writeInspectionDescription(@NotNull final Writer w, @NotNull final InspectionToolWrapper toolWrapper, @NotNull final Transformer transformer) throws IOException, ConversionException -->Line_4 $$ String descr = toolWrapper.loadDescription()[ FD ]
Line_3 $$ final StringWriter descrWriter = new StringWriter()-->Line_15 $$ final String trimmedDesc = descrWriter.toString().trim()[ FD ]
Line_2 $$ protected void writeInspectionDescription(@NotNull final Writer w, @NotNull final InspectionToolWrapper toolWrapper, @NotNull final Transformer transformer) throws IOException, ConversionException -->Line_4 $$ String descr = toolWrapper.loadDescription()[ CD ]
Line_15 $$ final String trimmedDesc = descrWriter.toString().trim()-->Line_16 $$ final String[] descLines = StringUtil.splitByLines(trimmedDesc)[ FD ]
Line_4 $$ String descr = toolWrapper.loadDescription()-->Line_8 $$ descr = descr.replace("<br>", "<br/>")[ FD ]
Line_2 $$ protected void writeInspectionDescription(@NotNull final Writer w, @NotNull final InspectionToolWrapper toolWrapper, @NotNull final Transformer transformer) throws IOException, ConversionException -->Line_10 $$ transformer.transform(new StreamSource(new StringReader(descr)), new StreamResult(descrWriter))[ FD ]
Line_18 $$ for (String descLine : descLines) -->Line_19 $$ w.append("  ").append(descLine.trim()).append("\n")[ FD ]
Line_2 $$ protected void writeInspectionDescription(@NotNull final Writer w, @NotNull final InspectionToolWrapper toolWrapper, @NotNull final Transformer transformer) throws IOException, ConversionException -->Line_15 $$ final String trimmedDesc = descrWriter.toString().trim()[ CD ]
Line_4 $$ String descr = toolWrapper.loadDescription()-->Line_5 $$ if (descr == null) [ FD ]
Line_2 $$ protected void writeInspectionDescription(@NotNull final Writer w, @NotNull final InspectionToolWrapper toolWrapper, @NotNull final Transformer transformer) throws IOException, ConversionException -->Line_17 $$ if (descLines.length > 0) [ CD ]
Line_2 $$ protected void writeInspectionDescription(@NotNull final Writer w, @NotNull final InspectionToolWrapper toolWrapper, @NotNull final Transformer transformer) throws IOException, ConversionException -->Line_5 $$ if (descr == null) [ CD ]
Line_2 $$ protected void writeInspectionDescription(@NotNull final Writer w, @NotNull final InspectionToolWrapper toolWrapper, @NotNull final Transformer transformer) throws IOException, ConversionException -->Line_19 $$ w.append("  ").append(descLine.trim()).append("\n")[ FD ]
Line_2 $$ protected void writeInspectionDescription(@NotNull final Writer w, @NotNull final InspectionToolWrapper toolWrapper, @NotNull final Transformer transformer) throws IOException, ConversionException -->Line_12 $$ warn("ERROR:  Cannot load description for inspection: " + getToolPresentableName(toolWrapper) + ".\n        Error message: " + e.getMessage())[ FD ]
