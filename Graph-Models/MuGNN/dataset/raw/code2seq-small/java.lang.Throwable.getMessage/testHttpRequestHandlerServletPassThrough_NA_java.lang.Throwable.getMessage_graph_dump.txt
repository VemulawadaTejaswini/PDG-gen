Line_5 $$ final MockHttpServletResponse response = new MockHttpServletResponse()-->Line_37 $$ servlet.service(request, response)[ FD ]
Line_7 $$ wac.getBeanFactory().registerSingleton("myHandler", new HttpRequestHandler() -->Line_9 $$ assertSame(request, req)[ FD ]
Line_2 $$ public void testHttpRequestHandlerServletPassThrough() throws Exception -->Line_21 $$ wac.setServletContext(servletContext)[ CD ]
Line_3 $$ MockServletContext servletContext = new MockServletContext()-->Line_21 $$ wac.setServletContext(servletContext)[ FD ]
Line_7 $$ wac.getBeanFactory().registerSingleton("myHandler", new HttpRequestHandler() -->Line_9 $$ assertSame(request, req)[ CD ]
Line_4 $$ final MockHttpServletRequest request = new MockHttpServletRequest()-->Line_29 $$ request.setParameter("exception", "ServletException")[ FD ]
Line_5 $$ final MockHttpServletResponse response = new MockHttpServletResponse()-->Line_30 $$ servlet.service(request, response)[ FD ]
Line_4 $$ final MockHttpServletRequest request = new MockHttpServletRequest()-->Line_11 $$ String exception = request.getParameter("exception")[ FD ]
Line_3 $$ MockServletContext servletContext = new MockServletContext()-->Line_23 $$ servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac)[ FD ]
Line_7 $$ wac.getBeanFactory().registerSingleton("myHandler", new HttpRequestHandler() -->Line_18 $$ res.getWriter().write("myResponse")[ CD ]
Line_6 $$ StaticWebApplicationContext wac = new StaticWebApplicationContext()-->Line_7 $$ wac.getBeanFactory().registerSingleton("myHandler", new HttpRequestHandler() [ FD ]
Line_4 $$ final MockHttpServletRequest request = new MockHttpServletRequest()-->Line_30 $$ servlet.service(request, response)[ FD ]
Line_7 $$ wac.getBeanFactory().registerSingleton("myHandler", new HttpRequestHandler() -->Line_12 $$ if ("ServletException".equals(exception)) [ CD ]
Line_5 $$ final MockHttpServletResponse response = new MockHttpServletResponse()-->Line_26 $$ servlet.service(request, response)[ FD ]
Line_2 $$ public void testHttpRequestHandlerServletPassThrough() throws Exception -->Line_23 $$ servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac)[ CD ]
Line_2 $$ public void testHttpRequestHandlerServletPassThrough() throws Exception -->Line_4 $$ final MockHttpServletRequest request = new MockHttpServletRequest()[ CD ]
Line_2 $$ public void testHttpRequestHandlerServletPassThrough() throws Exception -->Line_6 $$ StaticWebApplicationContext wac = new StaticWebApplicationContext()[ CD ]
Line_2 $$ public void testHttpRequestHandlerServletPassThrough() throws Exception -->Line_25 $$ servlet.init(new MockServletConfig(servletContext, "myHandler"))[ CD ]
Line_2 $$ public void testHttpRequestHandlerServletPassThrough() throws Exception -->Line_26 $$ servlet.service(request, response)[ CD ]
Line_4 $$ final MockHttpServletRequest request = new MockHttpServletRequest()-->Line_37 $$ servlet.service(request, response)[ FD ]
Line_4 $$ final MockHttpServletRequest request = new MockHttpServletRequest()-->Line_9 $$ assertSame(request, req)[ FD ]
Line_5 $$ final MockHttpServletResponse response = new MockHttpServletResponse()-->Line_27 $$ assertEquals("myResponse", response.getContentAsString())[ FD ]
Line_2 $$ public void testHttpRequestHandlerServletPassThrough() throws Exception -->Line_22 $$ wac.refresh()[ CD ]
Line_5 $$ final MockHttpServletResponse response = new MockHttpServletResponse()-->Line_10 $$ assertSame(response, res)[ FD ]
Line_7 $$ wac.getBeanFactory().registerSingleton("myHandler", new HttpRequestHandler() -->Line_18 $$ res.getWriter().write("myResponse")[ FD ]
Line_2 $$ public void testHttpRequestHandlerServletPassThrough() throws Exception -->Line_3 $$ MockServletContext servletContext = new MockServletContext()[ CD ]
Line_2 $$ public void testHttpRequestHandlerServletPassThrough() throws Exception -->Line_27 $$ assertEquals("myResponse", response.getContentAsString())[ CD ]
Line_4 $$ final MockHttpServletRequest request = new MockHttpServletRequest()-->Line_36 $$ request.setParameter("exception", "IOException")[ FD ]
Line_7 $$ wac.getBeanFactory().registerSingleton("myHandler", new HttpRequestHandler() -->Line_15 $$ if ("IOException".equals(exception)) [ CD ]
Line_6 $$ StaticWebApplicationContext wac = new StaticWebApplicationContext()-->Line_23 $$ servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac)[ FD ]
Line_2 $$ public void testHttpRequestHandlerServletPassThrough() throws Exception -->Line_7 $$ wac.getBeanFactory().registerSingleton("myHandler", new HttpRequestHandler() [ CD ]
Line_7 $$ wac.getBeanFactory().registerSingleton("myHandler", new HttpRequestHandler() -->Line_10 $$ assertSame(response, res)[ FD ]
Line_11 $$ String exception = request.getParameter("exception")-->Line_12 $$ if ("ServletException".equals(exception)) [ FD ]
Line_7 $$ wac.getBeanFactory().registerSingleton("myHandler", new HttpRequestHandler() -->Line_10 $$ assertSame(response, res)[ CD ]
Line_7 $$ wac.getBeanFactory().registerSingleton("myHandler", new HttpRequestHandler() -->Line_11 $$ String exception = request.getParameter("exception")[ CD ]
Line_6 $$ StaticWebApplicationContext wac = new StaticWebApplicationContext()-->Line_22 $$ wac.refresh()[ FD ]
Line_11 $$ String exception = request.getParameter("exception")-->Line_15 $$ if ("IOException".equals(exception)) [ FD ]
Line_6 $$ StaticWebApplicationContext wac = new StaticWebApplicationContext()-->Line_21 $$ wac.setServletContext(servletContext)[ FD ]
Line_2 $$ public void testHttpRequestHandlerServletPassThrough() throws Exception -->Line_5 $$ final MockHttpServletResponse response = new MockHttpServletResponse()[ CD ]
Line_4 $$ final MockHttpServletRequest request = new MockHttpServletRequest()-->Line_26 $$ servlet.service(request, response)[ FD ]
