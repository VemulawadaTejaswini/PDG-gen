Line_2 $$ public void test() -->Line_18 $$ assertThat(sources.get("d").getProperty("p1"), equalTo((Object) "dValue"))[ CD ]
Line_2 $$ public void test() -->Line_19 $$ sources.addBefore("b", new MockPropertySource("a"))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_39 $$ assertThat(sources.precedenceOf(PropertySource.named("b")), is(0))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_7 $$ assertThat(sources.size(), equalTo(3))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_71 $$ assertThat(sources.precedenceOf(PropertySource.named("c")), is(2))[ FD ]
Line_2 $$ public void test() -->Line_67 $$ sources.addFirst(new MockPropertySource("a"))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_54 $$ assertThat(sources.precedenceOf(PropertySource.named("g")), is(6))[ FD ]
Line_2 $$ public void test() -->Line_70 $$ assertThat(sources.precedenceOf(PropertySource.named("b")), is(1))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_59 $$ assertThat(sources.size(), equalTo(6))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_43 $$ assertThat(sources.precedenceOf(PropertySource.named("f")), is(4))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_26 $$ assertThat(sources.precedenceOf(PropertySource.named("f")), is(4))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_41 $$ assertThat(sources.precedenceOf(PropertySource.named("d")), is(2))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_28 $$ sources.addAfter("f", new MockPropertySource("g"))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_46 $$ sources.addFirst(new MockPropertySource("a"))[ FD ]
Line_2 $$ public void test() -->Line_57 $$ assertThat(sources.contains("a"), is(false))[ CD ]
Line_2 $$ public void test() -->Line_53 $$ assertThat(sources.precedenceOf(PropertySource.named("f")), is(5))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_85 $$ sources.addBefore("b", new MockPropertySource("b"))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_9 $$ assertThat(sources.contains("b"), is(true))[ FD ]
Line_2 $$ public void test() -->Line_42 $$ assertThat(sources.precedenceOf(PropertySource.named("e")), is(3))[ CD ]
Line_2 $$ public void test() -->Line_74 $$ assertThat(sources.precedenceOf(PropertySource.named("a-replaced")), is(0))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_42 $$ assertThat(sources.precedenceOf(PropertySource.named("e")), is(3))[ FD ]
Line_2 $$ public void test() -->Line_55 $$ assertEquals(sources.remove("a"), PropertySource.named("a"))[ CD ]
Line_2 $$ public void test() -->Line_76 $$ assertThat(sources.precedenceOf(PropertySource.named("c")), is(2))[ CD ]
Line_2 $$ public void test() -->Line_5 $$ sources.addLast(new MockPropertySource("d").withProperty("p1", "dValue"))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_21 $$ assertThat(sources.size(), equalTo(5))[ FD ]
Line_2 $$ public void test() -->Line_22 $$ assertThat(sources.precedenceOf(PropertySource.named("a")), is(0))[ CD ]
Line_2 $$ public void test() -->Line_33 $$ assertThat(sources.precedenceOf(PropertySource.named("d")), is(3))[ CD ]
Line_2 $$ public void test() -->Line_37 $$ sources.addLast(new MockPropertySource("a"))[ CD ]
Line_2 $$ public void test() -->Line_32 $$ assertThat(sources.precedenceOf(PropertySource.named("c")), is(2))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_45 $$ assertThat(sources.precedenceOf(PropertySource.named("a")), is(6))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_34 $$ assertThat(sources.precedenceOf(PropertySource.named("e")), is(4))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_79 $$ sources.replace(bogusPS, new MockPropertySource("bogus-replaced"))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_75 $$ assertThat(sources.precedenceOf(PropertySource.named("b")), is(1))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_74 $$ assertThat(sources.precedenceOf(PropertySource.named("a-replaced")), is(0))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_8 $$ assertThat(sources.contains("a"), is(false))[ FD ]
Line_2 $$ public void test() -->Line_13 $$ assertThat(sources.contains("f"), is(true))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_17 $$ assertThat(sources.get("d"), not(nullValue()))[ FD ]
Line_2 $$ public void test() -->Line_72 $$ sources.replace("a", new MockPropertySource("a-replaced"))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_53 $$ assertThat(sources.precedenceOf(PropertySource.named("f")), is(5))[ FD ]
Line_2 $$ public void test() -->Line_56 $$ assertThat(sources.size(), equalTo(6))[ CD ]
Line_2 $$ public void test() -->Line_17 $$ assertThat(sources.get("d"), not(nullValue()))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_48 $$ assertThat(sources.precedenceOf(PropertySource.named("a")), is(0))[ FD ]
Line_2 $$ public void test() -->Line_29 $$ assertThat(sources.size(), equalTo(7))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_58 $$ assertEquals(sources.remove("a"), null)[ FD ]
Line_2 $$ public void test() -->Line_11 $$ assertThat(sources.contains("d"), is(true))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_72 $$ sources.replace("a", new MockPropertySource("a-replaced"))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_36 $$ assertThat(sources.precedenceOf(PropertySource.named("g")), is(6))[ FD ]
Line_2 $$ public void test() -->Line_7 $$ assertThat(sources.size(), equalTo(3))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_15 $$ assertThat(sources.get("b"), not(nullValue()))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_10 $$ assertThat(sources.contains("c"), is(false))[ FD ]
Line_2 $$ public void test() -->Line_34 $$ assertThat(sources.precedenceOf(PropertySource.named("e")), is(4))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_23 $$ assertThat(sources.precedenceOf(PropertySource.named("b")), is(1))[ FD ]
Line_2 $$ public void test() -->Line_8 $$ assertThat(sources.contains("a"), is(false))[ CD ]
Line_2 $$ public void test() -->Line_71 $$ assertThat(sources.precedenceOf(PropertySource.named("c")), is(2))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_20 $$ sources.addAfter("b", new MockPropertySource("c"))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_27 $$ sources.addBefore("f", new MockPropertySource("e"))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_47 $$ assertThat(sources.size(), equalTo(7))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_19 $$ sources.addBefore("b", new MockPropertySource("a"))[ FD ]
Line_2 $$ public void test() -->Line_38 $$ assertThat(sources.size(), equalTo(7))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_11 $$ assertThat(sources.contains("d"), is(true))[ FD ]
Line_2 $$ public void test() -->Line_21 $$ assertThat(sources.size(), equalTo(5))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_33 $$ assertThat(sources.precedenceOf(PropertySource.named("d")), is(3))[ FD ]
Line_2 $$ public void test() -->Line_14 $$ assertThat(sources.contains("g"), is(false))[ CD ]
Line_2 $$ public void test() -->Line_68 $$ assertThat(sources.size(), equalTo(7))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_32 $$ assertThat(sources.precedenceOf(PropertySource.named("c")), is(2))[ FD ]
Line_2 $$ public void test() -->Line_59 $$ assertThat(sources.size(), equalTo(6))[ CD ]
Line_2 $$ public void test() -->Line_45 $$ assertThat(sources.precedenceOf(PropertySource.named("a")), is(6))[ CD ]
Line_2 $$ public void test() -->Line_49 $$ assertThat(sources.precedenceOf(PropertySource.named("b")), is(1))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_51 $$ assertThat(sources.precedenceOf(PropertySource.named("d")), is(3))[ FD ]
Line_2 $$ public void test() -->Line_26 $$ assertThat(sources.precedenceOf(PropertySource.named("f")), is(4))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_29 $$ assertThat(sources.size(), equalTo(7))[ FD ]
Line_2 $$ public void test() -->Line_52 $$ assertThat(sources.precedenceOf(PropertySource.named("e")), is(4))[ CD ]
Line_2 $$ public void test() -->Line_44 $$ assertThat(sources.precedenceOf(PropertySource.named("g")), is(5))[ CD ]
Line_2 $$ public void test() -->Line_4 $$ sources.addLast(new MockPropertySource("b").withProperty("p1", "bValue"))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_68 $$ assertThat(sources.size(), equalTo(7))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_62 $$ sources.addAfter(bogusPS, new MockPropertySource("h"))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_24 $$ assertThat(sources.precedenceOf(PropertySource.named("c")), is(2))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_5 $$ sources.addLast(new MockPropertySource("d").withProperty("p1", "dValue"))[ FD ]
Line_60 $$ String bogusPS = "bogus"-->Line_79 $$ sources.replace(bogusPS, new MockPropertySource("bogus-replaced"))[ FD ]
Line_2 $$ public void test() -->Line_23 $$ assertThat(sources.precedenceOf(PropertySource.named("b")), is(1))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_37 $$ sources.addLast(new MockPropertySource("a"))[ FD ]
Line_2 $$ public void test() -->Line_39 $$ assertThat(sources.precedenceOf(PropertySource.named("b")), is(0))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_6 $$ sources.addLast(new MockPropertySource("f").withProperty("p1", "fValue"))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_16 $$ assertThat(sources.get("b").getProperty("p1"), equalTo((Object) "bValue"))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_49 $$ assertThat(sources.precedenceOf(PropertySource.named("b")), is(1))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_50 $$ assertThat(sources.precedenceOf(PropertySource.named("c")), is(2))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_22 $$ assertThat(sources.precedenceOf(PropertySource.named("a")), is(0))[ FD ]
Line_2 $$ public void test() -->Line_10 $$ assertThat(sources.contains("c"), is(false))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_77 $$ sources.replace("a-replaced", new MockPropertySource("a"))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_38 $$ assertThat(sources.size(), equalTo(7))[ FD ]
Line_2 $$ public void test() -->Line_35 $$ assertThat(sources.precedenceOf(PropertySource.named("f")), is(5))[ CD ]
Line_2 $$ public void test() -->Line_43 $$ assertThat(sources.precedenceOf(PropertySource.named("f")), is(4))[ CD ]
Line_2 $$ public void test() -->Line_60 $$ String bogusPS = "bogus"[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_69 $$ assertThat(sources.precedenceOf(PropertySource.named("a")), is(0))[ FD ]
Line_2 $$ public void test() -->Line_31 $$ assertThat(sources.precedenceOf(PropertySource.named("b")), is(1))[ CD ]
Line_2 $$ public void test() -->Line_69 $$ assertThat(sources.precedenceOf(PropertySource.named("a")), is(0))[ CD ]
Line_2 $$ public void test() -->Line_15 $$ assertThat(sources.get("b"), not(nullValue()))[ CD ]
Line_2 $$ public void test() -->Line_36 $$ assertThat(sources.precedenceOf(PropertySource.named("g")), is(6))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_35 $$ assertThat(sources.precedenceOf(PropertySource.named("f")), is(5))[ FD ]
Line_2 $$ public void test() -->Line_50 $$ assertThat(sources.precedenceOf(PropertySource.named("c")), is(2))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_91 $$ sources.addAfter("b", new MockPropertySource("b"))[ FD ]
Line_2 $$ public void test() -->Line_6 $$ sources.addLast(new MockPropertySource("f").withProperty("p1", "fValue"))[ CD ]
Line_2 $$ public void test() -->Line_47 $$ assertThat(sources.size(), equalTo(7))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_40 $$ assertThat(sources.precedenceOf(PropertySource.named("c")), is(1))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_14 $$ assertThat(sources.contains("g"), is(false))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_52 $$ assertThat(sources.precedenceOf(PropertySource.named("e")), is(4))[ FD ]
Line_2 $$ public void test() -->Line_27 $$ sources.addBefore("f", new MockPropertySource("e"))[ CD ]
Line_2 $$ public void test() -->Line_28 $$ sources.addAfter("f", new MockPropertySource("g"))[ CD ]
Line_2 $$ public void test() -->Line_73 $$ assertThat(sources.size(), equalTo(7))[ CD ]
Line_2 $$ public void test() -->Line_3 $$ MutablePropertySources sources = new MutablePropertySources()[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_12 $$ assertThat(sources.contains("e"), is(false))[ FD ]
Line_2 $$ public void test() -->Line_46 $$ sources.addFirst(new MockPropertySource("a"))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_30 $$ assertThat(sources.precedenceOf(PropertySource.named("a")), is(0))[ FD ]
Line_2 $$ public void test() -->Line_77 $$ sources.replace("a-replaced", new MockPropertySource("a"))[ CD ]
Line_2 $$ public void test() -->Line_12 $$ assertThat(sources.contains("e"), is(false))[ CD ]
Line_2 $$ public void test() -->Line_48 $$ assertThat(sources.precedenceOf(PropertySource.named("a")), is(0))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_4 $$ sources.addLast(new MockPropertySource("b").withProperty("p1", "bValue"))[ FD ]
Line_2 $$ public void test() -->Line_40 $$ assertThat(sources.precedenceOf(PropertySource.named("c")), is(1))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_25 $$ assertThat(sources.precedenceOf(PropertySource.named("d")), is(3))[ FD ]
Line_2 $$ public void test() -->Line_30 $$ assertThat(sources.precedenceOf(PropertySource.named("a")), is(0))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_31 $$ assertThat(sources.precedenceOf(PropertySource.named("b")), is(1))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_18 $$ assertThat(sources.get("d").getProperty("p1"), equalTo((Object) "dValue"))[ FD ]
Line_2 $$ public void test() -->Line_25 $$ assertThat(sources.precedenceOf(PropertySource.named("d")), is(3))[ CD ]
Line_2 $$ public void test() -->Line_51 $$ assertThat(sources.precedenceOf(PropertySource.named("d")), is(3))[ CD ]
Line_2 $$ public void test() -->Line_75 $$ assertThat(sources.precedenceOf(PropertySource.named("b")), is(1))[ CD ]
Line_2 $$ public void test() -->Line_16 $$ assertThat(sources.get("b").getProperty("p1"), equalTo((Object) "bValue"))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_70 $$ assertThat(sources.precedenceOf(PropertySource.named("b")), is(1))[ FD ]
Line_60 $$ String bogusPS = "bogus"-->Line_62 $$ sources.addAfter(bogusPS, new MockPropertySource("h"))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_55 $$ assertEquals(sources.remove("a"), PropertySource.named("a"))[ FD ]
Line_2 $$ public void test() -->Line_58 $$ assertEquals(sources.remove("a"), null)[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_44 $$ assertThat(sources.precedenceOf(PropertySource.named("g")), is(5))[ FD ]
Line_2 $$ public void test() -->Line_20 $$ sources.addAfter("b", new MockPropertySource("c"))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_57 $$ assertThat(sources.contains("a"), is(false))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_76 $$ assertThat(sources.precedenceOf(PropertySource.named("c")), is(2))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_67 $$ sources.addFirst(new MockPropertySource("a"))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_56 $$ assertThat(sources.size(), equalTo(6))[ FD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_13 $$ assertThat(sources.contains("f"), is(true))[ FD ]
Line_2 $$ public void test() -->Line_9 $$ assertThat(sources.contains("b"), is(true))[ CD ]
Line_3 $$ MutablePropertySources sources = new MutablePropertySources()-->Line_73 $$ assertThat(sources.size(), equalTo(7))[ FD ]
Line_2 $$ public void test() -->Line_54 $$ assertThat(sources.precedenceOf(PropertySource.named("g")), is(6))[ CD ]
Line_2 $$ public void test() -->Line_41 $$ assertThat(sources.precedenceOf(PropertySource.named("d")), is(2))[ CD ]
Line_2 $$ public void test() -->Line_24 $$ assertThat(sources.precedenceOf(PropertySource.named("c")), is(2))[ CD ]
