Line_25 $$ FSEditLogOp op-->Line_27 $$ op = in.readOp()[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_97 $$ in.close()[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_42 $$ recentOpcodeOffsets[(int) (numEdits % recentOpcodeOffsets.length)] = in.getPosition()[ FD ]
Line_57 $$ lastInodeId = inodeId-->Line_95 $$ fsNamesys.resetLastInodeId(lastInodeId)[ FD ]
Line_15 $$ long numTxns = (lastTxId - expectedStartingTxId) + 1-->Line_18 $$ prog.setTotal(Phase.LOADING_EDITS, step, numTxns)[ FD ]
Line_19 $$ Counter counter = prog.getCounter(Phase.LOADING_EDITS, step)-->Line_68 $$ incrOpCount(op.opCode, opCounts, step, counter)[ FD ]
Line_3 $$ FSDirectory fsDir = fsNamesys.dir-->Line_99 $$ fsDir.writeUnlock()[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_90 $$ MetaRecoveryContext.LOG.warn("Stopped reading edit log at " + in.getPosition() + "/" + in.length())[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_14 $$ long lastTxId = in.getLastTxId()[ FD ]
Line_25 $$ FSEditLogOp op-->Line_55 $$ long inodeId = applyEditLogOp(op, fsDir, startOpt, in.getVersion(true), lastInodeId)[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_47 $$ MetaRecoveryContext.editLogLoaderPrompt("There appears " + "to be an out-of-order edit in the edit log.  We " + "expected txid " + expectedTxId + ", but got txid " + op.getTransactionId() + ".", recovery, "skipping the out-of-order edit")[ FD ]
Line_71 $$ expectedTxId = lastAppliedTxId + 1-->Line_73 $$ expectedTxId = lastAppliedTxId = expectedStartingTxId[ FD ]
Line_21 $$ long lastInodeId = fsNamesys.getLastInodeId()-->Line_57 $$ lastInodeId = inodeId[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_14 $$ long lastTxId = in.getLastTxId()[ CD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_20 $$ long lastLogTime = now()[ CD ]
Line_25 $$ FSEditLogOp op-->Line_45 $$ MetaRecoveryContext.editLogLoaderPrompt("There appears " + "to be a gap in the edit log.  We expected txid " + expectedTxId + ", but got txid " + op.getTransactionId() + ".", recovery, "ignoring missing " + " transaction IDs")[ FD ]
Line_25 $$ FSEditLogOp op-->Line_69 $$ if (op.hasTransactionId()) [ FD ]
Line_27 $$ op = in.readOp()-->Line_70 $$ lastAppliedTxId = op.getTransactionId()[ FD ]
Line_55 $$ long inodeId = applyEditLogOp(op, fsDir, startOpt, in.getVersion(true), lastInodeId)-->Line_57 $$ lastInodeId = inodeId[ FD ]
Line_16 $$ StartupProgress prog = NameNode.getStartupProgress()-->Line_18 $$ prog.setTotal(Phase.LOADING_EDITS, step, numTxns)[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_39 $$ in.resync()[ FD ]
Line_12 $$ long expectedTxId = expectedStartingTxId-->Line_44 $$ if (op.getTransactionId() > expectedTxId) [ FD ]
Line_21 $$ long lastInodeId = fsNamesys.getLastInodeId()-->Line_55 $$ long inodeId = applyEditLogOp(op, fsDir, startOpt, in.getVersion(true), lastInodeId)[ FD ]
Line_101 $$ if (LOG.isTraceEnabled()) -->Line_102 $$ LOG.trace("replaying edit log finished")[ CD ]
Line_77 $$ if (now - lastLogTime > REPLAY_TRANSACTION_LOG_INTERVAL) -->Line_78 $$ long deltaTxId = lastAppliedTxId - expectedStartingTxId + 1[ CD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_9 $$ fsDir.writeLock()[ CD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_17 $$ Step step = createStartupProgressStep(in)[ CD ]
Line_71 $$ expectedTxId = lastAppliedTxId + 1-->Line_33 $$ String errorMessage = formatEditLogReplayError(in, recentOpcodeOffsets, expectedTxId)[ FD ]
Line_43 $$ if (op.hasTransactionId()) -->Line_44 $$ if (op.getTransactionId() > expectedTxId) [ CD ]
Line_33 $$ String errorMessage = formatEditLogReplayError(in, recentOpcodeOffsets, expectedTxId)-->Line_34 $$ FSImage.LOG.error(errorMessage, e)[ FD ]
Line_27 $$ op = in.readOp()-->Line_55 $$ long inodeId = applyEditLogOp(op, fsDir, startOpt, in.getVersion(true), lastInodeId)[ FD ]
Line_75 $$ if (op.hasTransactionId()) -->Line_77 $$ if (now - lastLogTime > REPLAY_TRANSACTION_LOG_INTERVAL) [ CD ]
Line_52 $$ if (LOG.isTraceEnabled()) -->Line_53 $$ LOG.trace("op=" + op + ", startOpt=" + startOpt + ", numEdits=" + numEdits + ", totalEdits=" + totalEdits)[ CD ]
Line_17 $$ Step step = createStartupProgressStep(in)-->Line_68 $$ incrOpCount(op.opCode, opCounts, step, counter)[ FD ]
Line_44 $$ if (op.getTransactionId() > expectedTxId) -->Line_45 $$ MetaRecoveryContext.editLogLoaderPrompt("There appears " + "to be a gap in the edit log.  We expected txid " + expectedTxId + ", but got txid " + op.getTransactionId() + ".", recovery, "ignoring missing " + " transaction IDs")[ CD ]
Line_10 $$ long[] recentOpcodeOffsets = new long[4]-->Line_11 $$ Arrays.fill(recentOpcodeOffsets, -1)[ FD ]
Line_25 $$ FSEditLogOp op-->Line_44 $$ if (op.getTransactionId() > expectedTxId) [ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_15 $$ long numTxns = (lastTxId - expectedStartingTxId) + 1[ CD ]
Line_4 $$ EnumMap<FSEditLogOpCodes, Holder<Integer>> opCounts = new EnumMap<FSEditLogOpCodes, Holder<Integer>>(FSEditLogOpCodes.class)-->Line_105 $$ dumpOpCounts(opCounts)[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_13 $$ long numEdits = 0[ CD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_19 $$ Counter counter = prog.getCounter(Phase.LOADING_EDITS, step)[ CD ]
Line_46 $$ if (op.getTransactionId() < expectedTxId) -->Line_47 $$ MetaRecoveryContext.editLogLoaderPrompt("There appears " + "to be an out-of-order edit in the edit log.  We " + "expected txid " + expectedTxId + ", but got txid " + op.getTransactionId() + ".", recovery, "skipping the out-of-order edit")[ CD ]
Line_12 $$ long expectedTxId = expectedStartingTxId-->Line_73 $$ expectedTxId = lastAppliedTxId = expectedStartingTxId[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_16 $$ StartupProgress prog = NameNode.getStartupProgress()[ CD ]
Line_76 $$ long now = now()-->Line_81 $$ lastLogTime = now[ FD ]
Line_25 $$ FSEditLogOp op-->Line_28 $$ if (op == null) [ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_63 $$ if (recovery == null) [ FD ]
Line_44 $$ if (op.getTransactionId() > expectedTxId) -->Line_46 $$ if (op.getTransactionId() < expectedTxId) [ CD ]
Line_17 $$ Step step = createStartupProgressStep(in)-->Line_19 $$ Counter counter = prog.getCounter(Phase.LOADING_EDITS, step)[ FD ]
Line_96 $$ if (closeOnExit) -->Line_97 $$ in.close()[ CD ]
Line_73 $$ expectedTxId = lastAppliedTxId = expectedStartingTxId-->Line_44 $$ if (op.getTransactionId() > expectedTxId) [ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_33 $$ String errorMessage = formatEditLogReplayError(in, recentOpcodeOffsets, expectedTxId)[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_55 $$ long inodeId = applyEditLogOp(op, fsDir, startOpt, in.getVersion(true), lastInodeId)[ FD ]
Line_55 $$ long inodeId = applyEditLogOp(op, fsDir, startOpt, in.getVersion(true), lastInodeId)-->Line_56 $$ if (lastInodeId < inodeId) [ FD ]
Line_25 $$ FSEditLogOp op-->Line_43 $$ if (op.hasTransactionId()) [ FD ]
Line_21 $$ long lastInodeId = fsNamesys.getLastInodeId()-->Line_56 $$ if (lastInodeId < inodeId) [ FD ]
Line_27 $$ op = in.readOp()-->Line_47 $$ MetaRecoveryContext.editLogLoaderPrompt("There appears " + "to be an out-of-order edit in the edit log.  We " + "expected txid " + expectedTxId + ", but got txid " + op.getTransactionId() + ".", recovery, "skipping the out-of-order edit")[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_32 $$ check203UpgradeFailure(in.getVersion(true), e)[ FD ]
Line_3 $$ FSDirectory fsDir = fsNamesys.dir-->Line_55 $$ long inodeId = applyEditLogOp(op, fsDir, startOpt, in.getVersion(true), lastInodeId)[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_8 $$ fsNamesys.writeLock()[ CD ]
Line_56 $$ if (lastInodeId < inodeId) -->Line_57 $$ lastInodeId = inodeId[ CD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_45 $$ MetaRecoveryContext.editLogLoaderPrompt("There appears " + "to be a gap in the edit log.  We expected txid " + expectedTxId + ", but got txid " + op.getTransactionId() + ".", recovery, "ignoring missing " + " transaction IDs")[ FD ]
Line_3 $$ FSDirectory fsDir = fsNamesys.dir-->Line_9 $$ fsDir.writeLock()[ FD ]
Line_13 $$ long numEdits = 0-->Line_84 $$ numEdits++[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_27 $$ op = in.readOp()[ FD ]
Line_25 $$ FSEditLogOp op-->Line_70 $$ lastAppliedTxId = op.getTransactionId()[ FD ]
Line_10 $$ long[] recentOpcodeOffsets = new long[4]-->Line_33 $$ String errorMessage = formatEditLogReplayError(in, recentOpcodeOffsets, expectedTxId)[ FD ]
Line_27 $$ op = in.readOp()-->Line_75 $$ if (op.hasTransactionId()) [ FD ]
Line_77 $$ if (now - lastLogTime > REPLAY_TRANSACTION_LOG_INTERVAL) -->Line_79 $$ int percent = Math.round((float) deltaTxId / numTxns * 100)[ CD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_17 $$ Step step = createStartupProgressStep(in)[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_35 $$ if (recovery == null) [ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_108 $$ return numEdits[ CD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_38 $$ MetaRecoveryContext.editLogLoaderPrompt("We failed to read txId " + expectedTxId, recovery, "skipping the bad section in the log")[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_3 $$ FSDirectory fsDir = fsNamesys.dir[ CD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_5 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_69 $$ if (op.hasTransactionId()) -->Line_73 $$ expectedTxId = lastAppliedTxId = expectedStartingTxId[ CD ]
Line_25 $$ FSEditLogOp op-->Line_47 $$ MetaRecoveryContext.editLogLoaderPrompt("There appears " + "to be an out-of-order edit in the edit log.  We " + "expected txid " + expectedTxId + ", but got txid " + op.getTransactionId() + ".", recovery, "skipping the out-of-order edit")[ FD ]
Line_77 $$ if (now - lastLogTime > REPLAY_TRANSACTION_LOG_INTERVAL) -->Line_80 $$ LOG.info("replaying edit log: " + deltaTxId + "/" + numTxns + " transactions completed. (" + percent + "%)")[ CD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_4 $$ EnumMap<FSEditLogOpCodes, Holder<Integer>> opCounts = new EnumMap<FSEditLogOpCodes, Holder<Integer>>(FSEditLogOpCodes.class)[ CD ]
Line_75 $$ if (op.hasTransactionId()) -->Line_76 $$ long now = now()[ CD ]
Line_57 $$ lastInodeId = inodeId-->Line_56 $$ if (lastInodeId < inodeId) [ FD ]
Line_21 $$ long lastInodeId = fsNamesys.getLastInodeId()-->Line_95 $$ fsNamesys.resetLastInodeId(lastInodeId)[ FD ]
Line_73 $$ expectedTxId = lastAppliedTxId = expectedStartingTxId-->Line_46 $$ if (op.getTransactionId() < expectedTxId) [ FD ]
Line_5 $$ if (LOG.isTraceEnabled()) -->Line_6 $$ LOG.trace("Acquiring write lock to replay edit log")[ CD ]
Line_27 $$ op = in.readOp()-->Line_44 $$ if (op.getTransactionId() > expectedTxId) [ FD ]
Line_71 $$ expectedTxId = lastAppliedTxId + 1-->Line_46 $$ if (op.getTransactionId() < expectedTxId) [ FD ]
Line_27 $$ op = in.readOp()-->Line_45 $$ MetaRecoveryContext.editLogLoaderPrompt("There appears " + "to be a gap in the edit log.  We expected txid " + expectedTxId + ", but got txid " + op.getTransactionId() + ".", recovery, "ignoring missing " + " transaction IDs")[ FD ]
Line_16 $$ StartupProgress prog = NameNode.getStartupProgress()-->Line_19 $$ Counter counter = prog.getCounter(Phase.LOADING_EDITS, step)[ FD ]
Line_4 $$ EnumMap<FSEditLogOpCodes, Holder<Integer>> opCounts = new EnumMap<FSEditLogOpCodes, Holder<Integer>>(FSEditLogOpCodes.class)-->Line_68 $$ incrOpCount(op.opCode, opCounts, step, counter)[ FD ]
Line_17 $$ Step step = createStartupProgressStep(in)-->Line_18 $$ prog.setTotal(Phase.LOADING_EDITS, step, numTxns)[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_66 $$ MetaRecoveryContext.editLogLoaderPrompt("Failed to " + "apply edit log operation " + op + ": error " + e.getMessage(), recovery, "applying edits")[ FD ]
Line_27 $$ op = in.readOp()-->Line_69 $$ if (op.hasTransactionId()) [ FD ]
Line_25 $$ FSEditLogOp op-->Line_46 $$ if (op.getTransactionId() < expectedTxId) [ FD ]
Line_27 $$ op = in.readOp()-->Line_43 $$ if (op.hasTransactionId()) [ FD ]
Line_69 $$ if (op.hasTransactionId()) -->Line_70 $$ lastAppliedTxId = op.getTransactionId()[ CD ]
Line_57 $$ lastInodeId = inodeId-->Line_55 $$ long inodeId = applyEditLogOp(op, fsDir, startOpt, in.getVersion(true), lastInodeId)[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_12 $$ long expectedTxId = expectedStartingTxId[ CD ]
Line_71 $$ expectedTxId = lastAppliedTxId + 1-->Line_44 $$ if (op.getTransactionId() > expectedTxId) [ FD ]
Line_27 $$ op = in.readOp()-->Line_46 $$ if (op.getTransactionId() < expectedTxId) [ FD ]
Line_12 $$ long expectedTxId = expectedStartingTxId-->Line_71 $$ expectedTxId = lastAppliedTxId + 1[ FD ]
Line_104 $$ if (FSImage.LOG.isDebugEnabled()) -->Line_105 $$ dumpOpCounts(opCounts)[ CD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_18 $$ prog.setTotal(Phase.LOADING_EDITS, step, numTxns)[ CD ]
Line_77 $$ if (now - lastLogTime > REPLAY_TRANSACTION_LOG_INTERVAL) -->Line_81 $$ lastLogTime = now[ CD ]
Line_27 $$ op = in.readOp()-->Line_28 $$ if (op == null) [ FD ]
Line_73 $$ expectedTxId = lastAppliedTxId = expectedStartingTxId-->Line_33 $$ String errorMessage = formatEditLogReplayError(in, recentOpcodeOffsets, expectedTxId)[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_11 $$ Arrays.fill(recentOpcodeOffsets, -1)[ CD ]
Line_12 $$ long expectedTxId = expectedStartingTxId-->Line_46 $$ if (op.getTransactionId() < expectedTxId) [ FD ]
Line_25 $$ FSEditLogOp op-->Line_75 $$ if (op.hasTransactionId()) [ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_10 $$ long[] recentOpcodeOffsets = new long[4][ CD ]
Line_69 $$ if (op.hasTransactionId()) -->Line_71 $$ expectedTxId = lastAppliedTxId + 1[ CD ]
Line_12 $$ long expectedTxId = expectedStartingTxId-->Line_33 $$ String errorMessage = formatEditLogReplayError(in, recentOpcodeOffsets, expectedTxId)[ FD ]
Line_20 $$ long lastLogTime = now()-->Line_81 $$ lastLogTime = now[ FD ]
Line_2 $$ long loadEditRecords(EditLogInputStream in, boolean closeOnExit, long expectedStartingTxId, StartupOption startOpt, MetaRecoveryContext recovery) throws IOException -->Line_21 $$ long lastInodeId = fsNamesys.getLastInodeId()[ CD ]
