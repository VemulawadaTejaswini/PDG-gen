Line_33 $$ if (asyncBrokerFailure) -->Line_34 $$ logRecord = logRecords.remove(0)[ CD ]
Line_3 $$ final Exception exception = new Exception()-->Line_10 $$ channelPromise.setFailure(exception)[ FD ]
Line_29 $$ if (logging) -->Line_31 $$ LogRecord logRecord = logRecords.remove(0)[ CD ]
Line_4 $$ final Path remoteFilePath = Paths.get("remoteFile")-->Line_8 $$ _asyncBroker.takeWithException(remoteFilePath, exception)[ FD ]
Line_33 $$ if (asyncBrokerFailure) -->Line_37 $$ Assert.assertEquals("Unable to fetch remote file " + remoteFilePath, throwable.getMessage())[ CD ]
Line_23 $$ if (!asyncBrokerFailure) -->Line_25 $$ throwable = throwable.getCause()[ CD ]
Line_29 $$ if (logging) -->Line_30 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ CD ]
Line_2 $$ protected void doTestGetFileChannelFailure(final boolean asyncBrokerFailure, boolean logging) throws InterruptedException -->Line_3 $$ final Exception exception = new Exception()[ CD ]
Line_33 $$ if (asyncBrokerFailure) -->Line_36 $$ Throwable throwable = logRecord.getThrown()[ CD ]
Line_4 $$ final Path remoteFilePath = Paths.get("remoteFile")-->Line_18 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)[ FD ]
Line_5 $$ _channelPipeline.addLast(new ChannelOutboundHandlerAdapter() -->Line_10 $$ channelPromise.setFailure(exception)[ CD ]
Line_7 $$ if (asyncBrokerFailure) -->Line_8 $$ _asyncBroker.takeWithException(remoteFilePath, exception)[ CD ]
Line_5 $$ _channelPipeline.addLast(new ChannelOutboundHandlerAdapter() -->Line_10 $$ channelPromise.setFailure(exception)[ FD ]
Line_3 $$ final Exception exception = new Exception()-->Line_8 $$ _asyncBroker.takeWithException(remoteFilePath, exception)[ FD ]
Line_2 $$ protected void doTestGetFileChannelFailure(final boolean asyncBrokerFailure, boolean logging) throws InterruptedException -->Line_5 $$ _channelPipeline.addLast(new ChannelOutboundHandlerAdapter() [ CD ]
Line_2 $$ protected void doTestGetFileChannelFailure(final boolean asyncBrokerFailure, boolean logging) throws InterruptedException -->Line_4 $$ final Path remoteFilePath = Paths.get("remoteFile")[ CD ]
Line_2 $$ protected void doTestGetFileChannelFailure(final boolean asyncBrokerFailure, boolean logging) throws InterruptedException -->Line_14 $$ if (logging) [ CD ]
Line_5 $$ _channelPipeline.addLast(new ChannelOutboundHandlerAdapter() -->Line_7 $$ if (asyncBrokerFailure) [ CD ]
Line_23 $$ if (!asyncBrokerFailure) -->Line_24 $$ Assert.assertEquals("Unable to fetch remote file " + remoteFilePath, throwable.getMessage())[ CD ]
Line_3 $$ final Exception exception = new Exception()-->Line_27 $$ Assert.assertSame(exception, throwable)[ FD ]
Line_33 $$ if (asyncBrokerFailure) -->Line_35 $$ Assert.assertEquals("Unable to place exception because no future exists " + "with ID " + remoteFilePath, logRecord.getMessage())[ CD ]
Line_33 $$ if (asyncBrokerFailure) -->Line_38 $$ Assert.assertSame(exception, throwable.getCause())[ CD ]
Line_3 $$ final Exception exception = new Exception()-->Line_38 $$ Assert.assertSame(exception, throwable.getCause())[ FD ]
Line_29 $$ if (logging) -->Line_40 $$ Assert.assertTrue(logRecords.isEmpty())[ CD ]
Line_2 $$ protected void doTestGetFileChannelFailure(final boolean asyncBrokerFailure, boolean logging) throws InterruptedException -->Line_23 $$ if (!asyncBrokerFailure) [ FD ]
Line_29 $$ if (logging) -->Line_32 $$ Assert.assertEquals("Fetching remote file " + remoteFilePath, logRecord.getMessage())[ CD ]
Line_29 $$ if (logging) -->Line_33 $$ if (asyncBrokerFailure) [ CD ]
