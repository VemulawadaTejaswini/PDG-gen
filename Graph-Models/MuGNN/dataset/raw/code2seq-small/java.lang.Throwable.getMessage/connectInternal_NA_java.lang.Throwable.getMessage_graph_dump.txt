Line_3 $$ getTaskExecutor().execute(new Runnable() -->Line_6 $$ XhrRequestCallback requestCallback = new XhrRequestCallback(handshakeHeaders)[ CD ]
Line_8 $$ XhrReceiveExtractor responseExtractor = new XhrReceiveExtractor(session)-->Line_18 $$ getRestTemplate().execute(receiveUrl, HttpMethod.POST, requestCallback, responseExtractor)[ FD ]
Line_2 $$ protected void connectInternal(final TransportRequest transportRequest, final WebSocketHandler handler, final URI receiveUrl, final HttpHeaders handshakeHeaders, final XhrClientSockJsSession session, final SettableListenableFuture<WebSocketSession> connectFuture) -->Line_22 $$ connectFuture.setException(ex)[ FD ]
Line_2 $$ protected void connectInternal(final TransportRequest transportRequest, final WebSocketHandler handler, final URI receiveUrl, final HttpHeaders handshakeHeaders, final XhrClientSockJsSession session, final SettableListenableFuture<WebSocketSession> connectFuture) -->Line_5 $$ HttpHeaders httpHeaders = transportRequest.getHttpRequestHeaders()[ FD ]
Line_2 $$ protected void connectInternal(final TransportRequest transportRequest, final WebSocketHandler handler, final URI receiveUrl, final HttpHeaders handshakeHeaders, final XhrClientSockJsSession session, final SettableListenableFuture<WebSocketSession> connectFuture) -->Line_3 $$ getTaskExecutor().execute(new Runnable() [ CD ]
Line_2 $$ protected void connectInternal(final TransportRequest transportRequest, final WebSocketHandler handler, final URI receiveUrl, final HttpHeaders handshakeHeaders, final XhrClientSockJsSession session, final SettableListenableFuture<WebSocketSession> connectFuture) -->Line_18 $$ getRestTemplate().execute(receiveUrl, HttpMethod.POST, requestCallback, responseExtractor)[ FD ]
Line_21 $$ if (!connectFuture.isDone()) -->Line_22 $$ connectFuture.setException(ex)[ CD ]
Line_9 $$ while (true) -->Line_10 $$ if (session.isDisconnected()) [ CD ]
Line_2 $$ protected void connectInternal(final TransportRequest transportRequest, final WebSocketHandler handler, final URI receiveUrl, final HttpHeaders handshakeHeaders, final XhrClientSockJsSession session, final SettableListenableFuture<WebSocketSession> connectFuture) -->Line_10 $$ if (session.isDisconnected()) [ FD ]
Line_15 $$ if (logger.isTraceEnabled()) -->Line_16 $$ logger.trace("Starting XHR receive request, url=" + receiveUrl)[ CD ]
Line_6 $$ XhrRequestCallback requestCallback = new XhrRequestCallback(handshakeHeaders)-->Line_19 $$ requestCallback = requestCallbackAfterHandshake[ FD ]
Line_2 $$ protected void connectInternal(final TransportRequest transportRequest, final WebSocketHandler handler, final URI receiveUrl, final HttpHeaders handshakeHeaders, final XhrClientSockJsSession session, final SettableListenableFuture<WebSocketSession> connectFuture) -->Line_21 $$ if (!connectFuture.isDone()) [ FD ]
Line_2 $$ protected void connectInternal(final TransportRequest transportRequest, final WebSocketHandler handler, final URI receiveUrl, final HttpHeaders handshakeHeaders, final XhrClientSockJsSession session, final SettableListenableFuture<WebSocketSession> connectFuture) -->Line_25 $$ session.afterTransportClosed(new CloseStatus(1006, ex.getMessage()))[ FD ]
Line_3 $$ getTaskExecutor().execute(new Runnable() -->Line_8 $$ XhrReceiveExtractor responseExtractor = new XhrReceiveExtractor(session)[ CD ]
Line_3 $$ getTaskExecutor().execute(new Runnable() -->Line_7 $$ XhrRequestCallback requestCallbackAfterHandshake = new XhrRequestCallback(httpHeaders)[ CD ]
Line_3 $$ getTaskExecutor().execute(new Runnable() -->Line_9 $$ while (true) [ CD ]
Line_10 $$ if (session.isDisconnected()) -->Line_11 $$ session.afterTransportClosed(null)[ CD ]
Line_21 $$ if (!connectFuture.isDone()) -->Line_25 $$ session.afterTransportClosed(new CloseStatus(1006, ex.getMessage()))[ CD ]
Line_21 $$ if (!connectFuture.isDone()) -->Line_24 $$ session.handleTransportError(ex)[ CD ]
Line_6 $$ XhrRequestCallback requestCallback = new XhrRequestCallback(handshakeHeaders)-->Line_18 $$ getRestTemplate().execute(receiveUrl, HttpMethod.POST, requestCallback, responseExtractor)[ FD ]
Line_3 $$ getTaskExecutor().execute(new Runnable() -->Line_5 $$ HttpHeaders httpHeaders = transportRequest.getHttpRequestHeaders()[ CD ]
Line_7 $$ XhrRequestCallback requestCallbackAfterHandshake = new XhrRequestCallback(httpHeaders)-->Line_19 $$ requestCallback = requestCallbackAfterHandshake[ FD ]
Line_2 $$ protected void connectInternal(final TransportRequest transportRequest, final WebSocketHandler handler, final URI receiveUrl, final HttpHeaders handshakeHeaders, final XhrClientSockJsSession session, final SettableListenableFuture<WebSocketSession> connectFuture) -->Line_24 $$ session.handleTransportError(ex)[ FD ]
Line_2 $$ protected void connectInternal(final TransportRequest transportRequest, final WebSocketHandler handler, final URI receiveUrl, final HttpHeaders handshakeHeaders, final XhrClientSockJsSession session, final SettableListenableFuture<WebSocketSession> connectFuture) -->Line_11 $$ session.afterTransportClosed(null)[ FD ]
Line_19 $$ requestCallback = requestCallbackAfterHandshake-->Line_18 $$ getRestTemplate().execute(receiveUrl, HttpMethod.POST, requestCallback, responseExtractor)[ FD ]
