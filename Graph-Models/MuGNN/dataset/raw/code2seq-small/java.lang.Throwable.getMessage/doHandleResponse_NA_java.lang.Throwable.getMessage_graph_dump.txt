Line_22 $$ if (zipEntryName.equals("errors.json")) -->Line_23 $$ JsonNode rootJsonNode = JSONUtil.readTree(zipInputStream)[ CD ]
Line_8 $$ Map<String, DownloadFileHandler> handlers = (Map<String, DownloadFileHandler>) getParameterValue("handlers")-->Line_27 $$ Handler<Void> handler = handlers.get(field.getKey())[ FD ]
Line_39 $$ if (_logger.isTraceEnabled()) -->Line_40 $$ _logger.trace("Handling response [ CD ]
Line_20 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_36 $$ if (downloadFileHandler.isUnsynced(syncFile)) [ CD ]
Line_9 $$ InputStream inputStream = null-->Line_55 $$ StreamUtil.cleanUp(inputStream)[ FD ]
Line_51 $$ if (!isEventCancelled() && _logger.isDebugEnabled()) -->Line_52 $$ _logger.debug(e.getMessage(), e)[ CD ]
Line_25 $$ while (fields.hasNext()) -->Line_28 $$ JsonNode valueJsonNode = field.getValue()[ CD ]
Line_4 $$ Header tokenHeader = httpResponse.getFirstHeader("Sync-JWT")-->Line_5 $$ if (tokenHeader != null) [ FD ]
Line_9 $$ InputStream inputStream = null-->Line_12 $$ inputStream = new CountingInputStream(httpEntity.getContent()) [ FD ]
Line_8 $$ Map<String, DownloadFileHandler> handlers = (Map<String, DownloadFileHandler>) getParameterValue("handlers")-->Line_34 $$ DownloadFileHandler downloadFileHandler = handlers.get(zipEntryName)[ FD ]
Line_45 $$ if (!isEventCancelled()) -->Line_46 $$ _logger.error(e.getMessage(), e)[ CD ]
Line_12 $$ inputStream = new CountingInputStream(httpEntity.getContent()) -->Line_14 $$ session.incrementDownloadedBytes(n)[ CD ]
Line_24 $$ Iterator<Map.Entry<String, JsonNode>> fields = rootJsonNode.fields()-->Line_25 $$ while (fields.hasNext()) [ FD ]
Line_28 $$ JsonNode valueJsonNode = field.getValue()-->Line_29 $$ JsonNode exceptionJsonNode = valueJsonNode.get("exception")[ FD ]
Line_26 $$ Map.Entry<String, JsonNode> field = fields.next()-->Line_27 $$ Handler<Void> handler = handlers.get(field.getKey())[ FD ]
Line_25 $$ while (fields.hasNext()) -->Line_27 $$ Handler<Void> handler = handlers.get(field.getKey())[ CD ]
Line_2 $$ protected void doHandleResponse(HttpResponse httpResponse) throws Exception -->Line_9 $$ InputStream inputStream = null[ CD ]
Line_25 $$ while (fields.hasNext()) -->Line_26 $$ Map.Entry<String, JsonNode> field = fields.next()[ CD ]
Line_24 $$ Iterator<Map.Entry<String, JsonNode>> fields = rootJsonNode.fields()-->Line_26 $$ Map.Entry<String, JsonNode> field = fields.next()[ FD ]
Line_20 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_39 $$ if (_logger.isTraceEnabled()) [ CD ]
Line_26 $$ Map.Entry<String, JsonNode> field = fields.next()-->Line_28 $$ JsonNode valueJsonNode = field.getValue()[ FD ]
Line_12 $$ inputStream = new CountingInputStream(httpEntity.getContent()) -->Line_55 $$ StreamUtil.cleanUp(inputStream)[ FD ]
Line_2 $$ protected void doHandleResponse(HttpResponse httpResponse) throws Exception -->Line_4 $$ Header tokenHeader = httpResponse.getFirstHeader("Sync-JWT")[ FD ]
Line_12 $$ inputStream = new CountingInputStream(httpEntity.getContent()) -->Line_15 $$ super.afterRead(n)[ FD ]
Line_27 $$ Handler<Void> handler = handlers.get(field.getKey())-->Line_30 $$ handler.handlePortalException(exceptionJsonNode.textValue())[ FD ]
Line_11 $$ HttpEntity httpEntity = httpResponse.getEntity()-->Line_12 $$ inputStream = new CountingInputStream(httpEntity.getContent()) [ FD ]
Line_12 $$ inputStream = new CountingInputStream(httpEntity.getContent()) -->Line_14 $$ session.incrementDownloadedBytes(n)[ FD ]
Line_23 $$ JsonNode rootJsonNode = JSONUtil.readTree(zipInputStream)-->Line_24 $$ Iterator<Map.Entry<String, JsonNode>> fields = rootJsonNode.fields()[ FD ]
Line_20 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_21 $$ String zipEntryName = zipEntry.getName()[ CD ]
Line_5 $$ if (tokenHeader != null) -->Line_6 $$ session.setToken(tokenHeader.getValue())[ CD ]
Line_22 $$ if (zipEntryName.equals("errors.json")) -->Line_25 $$ while (fields.hasNext()) [ CD ]
Line_21 $$ String zipEntryName = zipEntry.getName()-->Line_22 $$ if (zipEntryName.equals("errors.json")) [ FD ]
Line_25 $$ while (fields.hasNext()) -->Line_29 $$ JsonNode exceptionJsonNode = valueJsonNode.get("exception")[ CD ]
Line_2 $$ protected void doHandleResponse(HttpResponse httpResponse) throws Exception -->Line_3 $$ final Session session = SessionManager.getSession(getSyncAccountId())[ CD ]
Line_21 $$ String zipEntryName = zipEntry.getName()-->Line_34 $$ DownloadFileHandler downloadFileHandler = handlers.get(zipEntryName)[ FD ]
Line_2 $$ protected void doHandleResponse(HttpResponse httpResponse) throws Exception -->Line_5 $$ if (tokenHeader != null) [ CD ]
Line_2 $$ protected void doHandleResponse(HttpResponse httpResponse) throws Exception -->Line_8 $$ Map<String, DownloadFileHandler> handlers = (Map<String, DownloadFileHandler>) getParameterValue("handlers")[ CD ]
Line_20 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_22 $$ if (zipEntryName.equals("errors.json")) [ CD ]
Line_29 $$ JsonNode exceptionJsonNode = valueJsonNode.get("exception")-->Line_30 $$ handler.handlePortalException(exceptionJsonNode.textValue())[ FD ]
Line_20 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_34 $$ DownloadFileHandler downloadFileHandler = handlers.get(zipEntryName)[ CD ]
Line_22 $$ if (zipEntryName.equals("errors.json")) -->Line_24 $$ Iterator<Map.Entry<String, JsonNode>> fields = rootJsonNode.fields()[ CD ]
Line_4 $$ Header tokenHeader = httpResponse.getFirstHeader("Sync-JWT")-->Line_6 $$ session.setToken(tokenHeader.getValue())[ FD ]
Line_12 $$ inputStream = new CountingInputStream(httpEntity.getContent()) -->Line_15 $$ super.afterRead(n)[ CD ]
Line_25 $$ while (fields.hasNext()) -->Line_30 $$ handler.handlePortalException(exceptionJsonNode.textValue())[ CD ]
Line_3 $$ final Session session = SessionManager.getSession(getSyncAccountId())-->Line_14 $$ session.incrementDownloadedBytes(n)[ FD ]
Line_2 $$ protected void doHandleResponse(HttpResponse httpResponse) throws Exception -->Line_11 $$ HttpEntity httpEntity = httpResponse.getEntity()[ FD ]
Line_2 $$ protected void doHandleResponse(HttpResponse httpResponse) throws Exception -->Line_4 $$ Header tokenHeader = httpResponse.getFirstHeader("Sync-JWT")[ CD ]
Line_3 $$ final Session session = SessionManager.getSession(getSyncAccountId())-->Line_6 $$ session.setToken(tokenHeader.getValue())[ FD ]
