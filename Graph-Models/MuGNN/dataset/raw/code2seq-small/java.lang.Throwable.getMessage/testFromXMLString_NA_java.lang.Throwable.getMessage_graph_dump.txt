Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_13 $$ sb.append("<pingInterval>1000</pingInterval>")[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_18 $$ SPIConfiguration spiConfiguration = SPIConfiguration.fromXMLString(sb.toString())[ FD ]
Line_18 $$ SPIConfiguration spiConfiguration = SPIConfiguration.fromXMLString(sb.toString())-->Line_24 $$ Assert.assertEquals("baseDir", spiConfiguration.getBaseDir())[ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_17 $$ sb.append("</SPIConfiguration>")[ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_12 $$ sb.append("<servletContextNames>app1,app2,app3</servletContextNames>")[ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_5 $$ sb.append("<SPIConfiguration><id>spiId</id>")[ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_22 $$ Assert.assertEquals("spiAgentClassName", spiConfiguration.getSPIAgentClassName())[ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_4 $$ sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")[ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_9 $$ sb.append("<connectorPort>8081</connectorPort>")[ CD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_15 $$ sb.append("<shutdownTimeout>1000</shutdownTimeout>")[ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_8 $$ sb.append("<spiAgentClassName>spiAgentClassName</spiAgentClassName>")[ CD ]
Line_18 $$ SPIConfiguration spiConfiguration = SPIConfiguration.fromXMLString(sb.toString())-->Line_19 $$ Assert.assertEquals("spiId", spiConfiguration.getSPIId())[ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_21 $$ Assert.assertEquals(Arrays.asList(new String[] [ CD ]
Line_18 $$ SPIConfiguration spiConfiguration = SPIConfiguration.fromXMLString(sb.toString())-->Line_22 $$ Assert.assertEquals("spiAgentClassName", spiConfiguration.getSPIAgentClassName())[ FD ]
Line_18 $$ SPIConfiguration spiConfiguration = SPIConfiguration.fromXMLString(sb.toString())-->Line_20 $$ Assert.assertEquals("/opt/jvm/bin/java", spiConfiguration.getJavaExecutable())[ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_15 $$ sb.append("<shutdownTimeout>1000</shutdownTimeout>")[ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_16 $$ sb.append("<extraSettings>key1=value1\nkey2=values</extraSettings>")[ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_23 $$ Assert.assertEquals(8081, spiConfiguration.getConnectorPort())[ CD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_4 $$ sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_9 $$ sb.append("<connectorPort>8081</connectorPort>")[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_17 $$ sb.append("</SPIConfiguration>")[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_5 $$ sb.append("<SPIConfiguration><id>spiId</id>")[ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_11 $$ sb.append("<portletIds>portlet1,portlet2,portlet3</portletIds>")[ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_27 $$ Assert.assertEquals(1000, spiConfiguration.getPingInterval())[ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_3 $$ StringBundler sb = new StringBundler(14)[ CD ]
Line_18 $$ SPIConfiguration spiConfiguration = SPIConfiguration.fromXMLString(sb.toString())-->Line_26 $$ Assert.assertArrayEquals(new String[] [ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_25 $$ Assert.assertArrayEquals(new String[] [ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_26 $$ Assert.assertArrayEquals(new String[] [ CD ]
Line_18 $$ SPIConfiguration spiConfiguration = SPIConfiguration.fromXMLString(sb.toString())-->Line_27 $$ Assert.assertEquals(1000, spiConfiguration.getPingInterval())[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_10 $$ sb.append("<baseDir>baseDir</baseDir>")[ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_6 $$ sb.append("<javaExecutable>/opt/jvm/bin/java</javaExecutable>")[ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_19 $$ Assert.assertEquals("spiId", spiConfiguration.getSPIId())[ CD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_12 $$ sb.append("<servletContextNames>app1,app2,app3</servletContextNames>")[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_7 $$ sb.append("<jvmArguments>-Xmx512m -XX:PermSize=128m</jvmArguments>")[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_16 $$ sb.append("<extraSettings>key1=value1\nkey2=values</extraSettings>")[ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_20 $$ Assert.assertEquals("/opt/jvm/bin/java", spiConfiguration.getJavaExecutable())[ CD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_14 $$ sb.append("<registerTimeout>1000</registerTimeout>")[ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_13 $$ sb.append("<pingInterval>1000</pingInterval>")[ CD ]
Line_18 $$ SPIConfiguration spiConfiguration = SPIConfiguration.fromXMLString(sb.toString())-->Line_23 $$ Assert.assertEquals(8081, spiConfiguration.getConnectorPort())[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_28 $$ sb.setStringAt("<connectorPort>808X</connectorPort>", 5)[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_8 $$ sb.append("<spiAgentClassName>spiAgentClassName</spiAgentClassName>")[ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_14 $$ sb.append("<registerTimeout>1000</registerTimeout>")[ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_7 $$ sb.append("<jvmArguments>-Xmx512m -XX:PermSize=128m</jvmArguments>")[ CD ]
Line_18 $$ SPIConfiguration spiConfiguration = SPIConfiguration.fromXMLString(sb.toString())-->Line_21 $$ Assert.assertEquals(Arrays.asList(new String[] [ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_18 $$ SPIConfiguration spiConfiguration = SPIConfiguration.fromXMLString(sb.toString())[ CD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_30 $$ SPIConfiguration.fromXMLString(sb.toString())[ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_10 $$ sb.append("<baseDir>baseDir</baseDir>")[ CD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_24 $$ Assert.assertEquals("baseDir", spiConfiguration.getBaseDir())[ CD ]
Line_18 $$ SPIConfiguration spiConfiguration = SPIConfiguration.fromXMLString(sb.toString())-->Line_25 $$ Assert.assertArrayEquals(new String[] [ FD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_6 $$ sb.append("<javaExecutable>/opt/jvm/bin/java</javaExecutable>")[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(14)-->Line_11 $$ sb.append("<portletIds>portlet1,portlet2,portlet3</portletIds>")[ FD ]
Line_2 $$ public void testFromXMLString() throws DocumentException -->Line_28 $$ sb.setStringAt("<connectorPort>808X</connectorPort>", 5)[ CD ]
