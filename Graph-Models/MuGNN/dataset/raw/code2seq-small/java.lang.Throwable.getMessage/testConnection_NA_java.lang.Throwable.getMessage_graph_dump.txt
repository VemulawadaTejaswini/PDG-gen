Line_9 $$ version = ProgressManager.getInstance().runProcessWithProgressSynchronously(new ThrowableComputable<GitVersion, Exception>() -->Line_20 $$ if (version.isSupported()) [ FD ]
Line_2 $$ private void testConnection() -->Line_20 $$ if (version.isSupported()) [ CD ]
Line_2 $$ private void testConnection() -->Line_7 $$ GitVersion version[ CD ]
Line_4 $$ if (myAppSettings != null) -->Line_5 $$ myAppSettings.setPathToGit(executable)[ CD ]
Line_20 $$ if (version.isSupported()) -->Line_23 $$ Messages.showWarningDialog(myRootPanel, GitBundle.message("find.git.unsupported.message", version.toString(), GitVersion.MIN), GitBundle.getString("find.git.success.title"))[ CD ]
Line_9 $$ version = ProgressManager.getInstance().runProcessWithProgressSynchronously(new ThrowableComputable<GitVersion, Exception>() -->Line_21 $$ Messages.showInfoMessage(myRootPanel, String.format("<html>%s<br>Git version is %s</html>", GitBundle.getString("find.git.success.title"), version.toString()), GitBundle.getString("find.git.success.title"))[ FD ]
Line_7 $$ GitVersion version-->Line_23 $$ Messages.showWarningDialog(myRootPanel, GitBundle.message("find.git.unsupported.message", version.toString(), GitVersion.MIN), GitBundle.getString("find.git.success.title"))[ FD ]
Line_9 $$ version = ProgressManager.getInstance().runProcessWithProgressSynchronously(new ThrowableComputable<GitVersion, Exception>() -->Line_23 $$ Messages.showWarningDialog(myRootPanel, GitBundle.message("find.git.unsupported.message", version.toString(), GitVersion.MIN), GitBundle.getString("find.git.success.title"))[ FD ]
Line_3 $$ final String executable = getCurrentExecutablePath()-->Line_11 $$ return GitVersion.identifyVersion(executable)[ FD ]
Line_7 $$ GitVersion version-->Line_9 $$ version = ProgressManager.getInstance().runProcessWithProgressSynchronously(new ThrowableComputable<GitVersion, Exception>() [ FD ]
Line_9 $$ version = ProgressManager.getInstance().runProcessWithProgressSynchronously(new ThrowableComputable<GitVersion, Exception>() -->Line_11 $$ return GitVersion.identifyVersion(executable)[ CD ]
Line_7 $$ GitVersion version-->Line_20 $$ if (version.isSupported()) [ FD ]
Line_3 $$ final String executable = getCurrentExecutablePath()-->Line_5 $$ myAppSettings.setPathToGit(executable)[ FD ]
Line_2 $$ private void testConnection() -->Line_3 $$ final String executable = getCurrentExecutablePath()[ CD ]
Line_2 $$ private void testConnection() -->Line_4 $$ if (myAppSettings != null) [ CD ]
Line_7 $$ GitVersion version-->Line_21 $$ Messages.showInfoMessage(myRootPanel, String.format("<html>%s<br>Git version is %s</html>", GitBundle.getString("find.git.success.title"), version.toString()), GitBundle.getString("find.git.success.title"))[ FD ]
Line_20 $$ if (version.isSupported()) -->Line_21 $$ Messages.showInfoMessage(myRootPanel, String.format("<html>%s<br>Git version is %s</html>", GitBundle.getString("find.git.success.title"), version.toString()), GitBundle.getString("find.git.success.title"))[ CD ]
