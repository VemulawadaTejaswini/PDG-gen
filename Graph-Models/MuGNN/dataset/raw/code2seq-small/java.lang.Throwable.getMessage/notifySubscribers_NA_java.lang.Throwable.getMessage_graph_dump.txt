Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_84 $$ if (!MailingListThreadLocal.isSourceMailingList()) [ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_28 $$ MBCategory category = message.getCategory()[ FD ]
Line_23 $$ String fullName = PortalUtil.getUserName(message.getUserId(), message.getUserName())-->Line_26 $$ fullName = serviceContext.translate("anonymous")[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_6 $$ if (message.isDiscussion()) [ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_20 $$ Company company = companyPersistence.findByPrimaryKey(message.getCompanyId())[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_21 $$ Group group = groupPersistence.findByPrimaryKey(message.getGroupId())[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_23 $$ String fullName = PortalUtil.getUserName(message.getUserId(), message.getUserName())[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_35 $$ categoryIds.add(message.getCategoryId())[ FD ]
Line_70 $$ if (message.getParentMessageId() != MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) -->Line_72 $$ Date modifiedDate = parentMessage.getModifiedDate()[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ CD ]
Line_22 $$ String emailAddress = PortalUtil.getUserEmailAddress(message.getUserId())-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_57 $$ if (htmlFormat && message.isFormatBBCode()) [ CD ]
Line_72 $$ Date modifiedDate = parentMessage.getModifiedDate()-->Line_73 $$ inReplyTo = PortalUtil.getMailId(company.getMx(), MBUtil.MESSAGE_POP_PORTLET_PREFIX, message.getCategoryId(), parentMessage.getMessageId(), modifiedDate.getTime())[ FD ]
Line_14 $$ MBGroupServiceSettings mbGroupServiceSettings = MBGroupServiceSettings.getInstance(message.getGroupId())-->Line_15 $$ if (serviceContext.isCommandAdd() && mbGroupServiceSettings.isEmailMessageAddedEnabled()) [ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_44 $$ replyToAddress = MBUtil.getReplyToAddress(message.getCategoryId(), message.getMessageId(), company.getMx(), fromAddress)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_73 $$ inReplyTo = PortalUtil.getMailId(company.getMx(), MBUtil.MESSAGE_POP_PORTLET_PREFIX, message.getCategoryId(), parentMessage.getMessageId(), modifiedDate.getTime())[ FD ]
Line_39 $$ String entryTitle = message.getSubject()-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_36 $$ if (message.getCategoryId() != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) [ FD ]
Line_49 $$ subjectLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageUpdatedSubject()-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_16 $$ if (serviceContext.isCommandUpdate() && mbGroupServiceSettings.isEmailMessageUpdatedEnabled()) -->Line_18 $$ return[ CD ]
Line_36 $$ if (message.getCategoryId() != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) -->Line_37 $$ categoryIds.addAll(category.getAncestorCategoryIds())[ CD ]
Line_47 $$ LocalizedValuesMap bodyLocalizedValuesMap = null-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_30 $$ if (category.getCategoryId() == MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) -->Line_32 $$ categoryName += " - " + group.getDescriptiveName()[ CD ]
Line_56 $$ String messageBody = message.getBody()-->Line_63 $$ messageBody = MBUtil.replaceMessageBodyPaths(themeDisplay, messageBody)[ FD ]
Line_59 $$ messageBody = BBCodeTranslatorUtil.getHTML(messageBody)-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_71 $$ MBMessage parentMessage = mbMessageLocalService.getMessage(message.getParentMessageId())-->Line_73 $$ inReplyTo = PortalUtil.getMailId(company.getMx(), MBUtil.MESSAGE_POP_PORTLET_PREFIX, message.getCategoryId(), parentMessage.getMessageId(), modifiedDate.getTime())[ FD ]
Line_48 $$ if (serviceContext.isCommandUpdate()) -->Line_53 $$ bodyLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageAddedBody()[ CD ]
Line_56 $$ String messageBody = message.getBody()-->Line_59 $$ messageBody = BBCodeTranslatorUtil.getHTML(messageBody)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_69 $$ String inReplyTo = null[ CD ]
Line_77 $$ for (long categoryId : categoryIds) -->Line_79 $$ subscriptionSender.addPersistedSubscribers(MBCategory.class.getName(), categoryId)[ FD ]
Line_31 $$ categoryName = serviceContext.translate("message-boards-home")-->Line_32 $$ categoryName += " - " + group.getDescriptiveName()[ FD ]
Line_41 $$ String fromAddress = mbGroupServiceSettings.getEmailFromAddress()-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_35 $$ categoryIds.add(message.getCategoryId())[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_28 $$ MBCategory category = message.getCategory()[ CD ]
Line_50 $$ bodyLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageUpdatedBody()-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_60 $$ HttpServletRequest request = serviceContext.getRequest()[ FD ]
Line_46 $$ LocalizedValuesMap subjectLocalizedValuesMap = null-->Line_49 $$ subjectLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageUpdatedSubject()[ FD ]
Line_29 $$ String categoryName = category.getName()-->Line_32 $$ categoryName += " - " + group.getDescriptiveName()[ FD ]
Line_70 $$ if (message.getParentMessageId() != MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) -->Line_71 $$ MBMessage parentMessage = mbMessageLocalService.getMessage(message.getParentMessageId())[ CD ]
Line_50 $$ bodyLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageUpdatedBody()-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_48 $$ if (serviceContext.isCommandUpdate()) -->Line_50 $$ bodyLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageUpdatedBody()[ CD ]
Line_14 $$ MBGroupServiceSettings mbGroupServiceSettings = MBGroupServiceSettings.getInstance(message.getGroupId())-->Line_53 $$ bodyLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageAddedBody()[ FD ]
Line_61 $$ if (request != null) -->Line_62 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_39 $$ String entryTitle = message.getSubject()[ FD ]
Line_42 $$ String replyToAddress = StringPool.BLANK-->Line_44 $$ replyToAddress = MBUtil.getReplyToAddress(message.getCategoryId(), message.getMessageId(), company.getMx(), fromAddress)[ FD ]
Line_22 $$ String emailAddress = PortalUtil.getUserEmailAddress(message.getUserId())-->Line_25 $$ emailAddress = StringPool.BLANK[ FD ]
Line_31 $$ categoryName = serviceContext.translate("message-boards-home")-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_36 $$ if (message.getCategoryId() != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) [ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_48 $$ if (serviceContext.isCommandUpdate()) [ CD ]
Line_43 $$ if (PropsValues.POP_SERVER_NOTIFICATIONS_ENABLED) -->Line_44 $$ replyToAddress = MBUtil.getReplyToAddress(message.getCategoryId(), message.getMessageId(), company.getMx(), fromAddress)[ CD ]
Line_77 $$ for (long categoryId : categoryIds) -->Line_78 $$ if (categoryId != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) [ FD ]
Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)-->Line_83 $$ subscriptionSender.flushNotificationsAsync()[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_83 $$ subscriptionSender.flushNotificationsAsync()[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_41 $$ String fromAddress = mbGroupServiceSettings.getEmailFromAddress()[ CD ]
Line_14 $$ MBGroupServiceSettings mbGroupServiceSettings = MBGroupServiceSettings.getInstance(message.getGroupId())-->Line_52 $$ subjectLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageAddedSubject()[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_82 $$ subscriptionSender.addPersistedSubscribers(MBThread.class.getName(), message.getThreadId())[ CD ]
Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)-->Line_87 $$ sourceMailingListSubscriptionSender.setBulk(false)[ FD ]
Line_14 $$ MBGroupServiceSettings mbGroupServiceSettings = MBGroupServiceSettings.getInstance(message.getGroupId())-->Line_40 $$ String fromName = mbGroupServiceSettings.getEmailFromName()[ FD ]
Line_40 $$ String fromName = mbGroupServiceSettings.getEmailFromName()-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_46 $$ LocalizedValuesMap subjectLocalizedValuesMap = null-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_14 $$ MBGroupServiceSettings mbGroupServiceSettings = MBGroupServiceSettings.getInstance(message.getGroupId())-->Line_50 $$ bodyLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageUpdatedBody()[ FD ]
Line_69 $$ String inReplyTo = null-->Line_73 $$ inReplyTo = PortalUtil.getMailId(company.getMx(), MBUtil.MESSAGE_POP_PORTLET_PREFIX, message.getCategoryId(), parentMessage.getMessageId(), modifiedDate.getTime())[ FD ]
Line_28 $$ MBCategory category = message.getCategory()-->Line_37 $$ categoryIds.addAll(category.getAncestorCategoryIds())[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_28 $$ MBCategory category = message.getCategory()-->Line_30 $$ if (category.getCategoryId() == MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) [ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_3 $$ if (!message.isApproved() || Validator.isNull(messageURL)) [ CD ]
Line_24 $$ if (message.isAnonymous()) -->Line_25 $$ emailAddress = StringPool.BLANK[ CD ]
Line_61 $$ if (request != null) -->Line_63 $$ messageBody = MBUtil.replaceMessageBodyPaths(themeDisplay, messageBody)[ CD ]
Line_14 $$ MBGroupServiceSettings mbGroupServiceSettings = MBGroupServiceSettings.getInstance(message.getGroupId())-->Line_16 $$ if (serviceContext.isCommandUpdate() && mbGroupServiceSettings.isEmailMessageUpdatedEnabled()) [ FD ]
Line_29 $$ String categoryName = category.getName()-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_42 $$ String replyToAddress = StringPool.BLANK-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_14 $$ MBGroupServiceSettings mbGroupServiceSettings = MBGroupServiceSettings.getInstance(message.getGroupId())[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_15 $$ if (serviceContext.isCommandAdd() && mbGroupServiceSettings.isEmailMessageAddedEnabled()) [ CD ]
Line_55 $$ boolean htmlFormat = mbGroupServiceSettings.isEmailHtmlFormat()-->Line_57 $$ if (htmlFormat && message.isFormatBBCode()) [ FD ]
Line_59 $$ messageBody = BBCodeTranslatorUtil.getHTML(messageBody)-->Line_63 $$ messageBody = MBUtil.replaceMessageBodyPaths(themeDisplay, messageBody)[ FD ]
Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)-->Line_79 $$ subscriptionSender.addPersistedSubscribers(MBCategory.class.getName(), categoryId)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_76 $$ subscriptionSender.addPersistedSubscribers(MBCategory.class.getName(), message.getGroupId())[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_55 $$ boolean htmlFormat = mbGroupServiceSettings.isEmailHtmlFormat()[ CD ]
Line_34 $$ List<Long> categoryIds = new ArrayList()-->Line_35 $$ categoryIds.add(message.getCategoryId())[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_22 $$ String emailAddress = PortalUtil.getUserEmailAddress(message.getUserId())[ FD ]
Line_69 $$ String inReplyTo = null-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_63 $$ messageBody = MBUtil.replaceMessageBodyPaths(themeDisplay, messageBody)-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_14 $$ MBGroupServiceSettings mbGroupServiceSettings = MBGroupServiceSettings.getInstance(message.getGroupId())-->Line_49 $$ subjectLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageUpdatedSubject()[ FD ]
Line_47 $$ LocalizedValuesMap bodyLocalizedValuesMap = null-->Line_53 $$ bodyLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageAddedBody()[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_88 $$ sourceMailingListSubscriptionSender.addMailingListSubscriber(message.getGroupId(), categoryId)[ FD ]
Line_60 $$ HttpServletRequest request = serviceContext.getRequest()-->Line_62 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)[ FD ]
Line_31 $$ categoryName = serviceContext.translate("message-boards-home")-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_24 $$ if (message.isAnonymous()) [ CD ]
Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)-->Line_89 $$ sourceMailingListSubscriptionSender.flushNotificationsAsync()[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_43 $$ if (PropsValues.POP_SERVER_NOTIFICATIONS_ENABLED) [ CD ]
Line_55 $$ boolean htmlFormat = mbGroupServiceSettings.isEmailHtmlFormat()-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_56 $$ String messageBody = message.getBody()-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_57 $$ if (htmlFormat && message.isFormatBBCode()) [ FD ]
Line_53 $$ bodyLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageAddedBody()-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_56 $$ String messageBody = message.getBody()[ FD ]
Line_34 $$ List<Long> categoryIds = new ArrayList()-->Line_37 $$ categoryIds.addAll(category.getAncestorCategoryIds())[ FD ]
Line_63 $$ messageBody = MBUtil.replaceMessageBodyPaths(themeDisplay, messageBody)-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_6 $$ if (message.isDiscussion()) [ FD ]
Line_47 $$ LocalizedValuesMap bodyLocalizedValuesMap = null-->Line_50 $$ bodyLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageUpdatedBody()[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_70 $$ if (message.getParentMessageId() != MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) [ CD ]
Line_50 $$ bodyLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageUpdatedBody()-->Line_53 $$ bodyLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageAddedBody()[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_34 $$ List<Long> categoryIds = new ArrayList()[ CD ]
Line_78 $$ if (categoryId != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) -->Line_79 $$ subscriptionSender.addPersistedSubscribers(MBCategory.class.getName(), categoryId)[ CD ]
Line_6 $$ if (message.isDiscussion()) -->Line_12 $$ return[ CD ]
Line_56 $$ String messageBody = message.getBody()-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_49 $$ subjectLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageUpdatedSubject()-->Line_52 $$ subjectLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageAddedSubject()[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_21 $$ Group group = groupPersistence.findByPrimaryKey(message.getGroupId())[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_8 $$ notifyDiscussionSubscribers(userId, message, serviceContext)[ FD ]
Line_59 $$ messageBody = BBCodeTranslatorUtil.getHTML(messageBody)-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_46 $$ LocalizedValuesMap subjectLocalizedValuesMap = null-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_31 $$ categoryName = serviceContext.translate("message-boards-home")[ FD ]
Line_25 $$ emailAddress = StringPool.BLANK-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_53 $$ bodyLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageAddedBody()-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_15 $$ if (serviceContext.isCommandAdd() && mbGroupServiceSettings.isEmailMessageAddedEnabled()) [ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_14 $$ MBGroupServiceSettings mbGroupServiceSettings = MBGroupServiceSettings.getInstance(message.getGroupId())[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_26 $$ fullName = serviceContext.translate("anonymous")[ FD ]
Line_55 $$ boolean htmlFormat = mbGroupServiceSettings.isEmailHtmlFormat()-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_32 $$ categoryName += " - " + group.getDescriptiveName()-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_73 $$ inReplyTo = PortalUtil.getMailId(company.getMx(), MBUtil.MESSAGE_POP_PORTLET_PREFIX, message.getCategoryId(), parentMessage.getMessageId(), modifiedDate.getTime())-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_52 $$ subjectLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageAddedSubject()-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_48 $$ if (serviceContext.isCommandUpdate()) -->Line_52 $$ subjectLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageAddedSubject()[ CD ]
Line_70 $$ if (message.getParentMessageId() != MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) -->Line_73 $$ inReplyTo = PortalUtil.getMailId(company.getMx(), MBUtil.MESSAGE_POP_PORTLET_PREFIX, message.getCategoryId(), parentMessage.getMessageId(), modifiedDate.getTime())[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_47 $$ LocalizedValuesMap bodyLocalizedValuesMap = null[ CD ]
Line_77 $$ for (long categoryId : categoryIds) -->Line_88 $$ sourceMailingListSubscriptionSender.addMailingListSubscriber(message.getGroupId(), categoryId)[ FD ]
Line_41 $$ String fromAddress = mbGroupServiceSettings.getEmailFromAddress()-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_47 $$ LocalizedValuesMap bodyLocalizedValuesMap = null-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_46 $$ LocalizedValuesMap subjectLocalizedValuesMap = null-->Line_52 $$ subjectLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageAddedSubject()[ FD ]
Line_44 $$ replyToAddress = MBUtil.getReplyToAddress(message.getCategoryId(), message.getMessageId(), company.getMx(), fromAddress)-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_15 $$ if (serviceContext.isCommandAdd() && mbGroupServiceSettings.isEmailMessageAddedEnabled()) -->Line_16 $$ if (serviceContext.isCommandUpdate() && mbGroupServiceSettings.isEmailMessageUpdatedEnabled()) [ CD ]
Line_23 $$ String fullName = PortalUtil.getUserName(message.getUserId(), message.getUserName())-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_40 $$ String fromName = mbGroupServiceSettings.getEmailFromName()[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_70 $$ if (message.getParentMessageId() != MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) [ FD ]
Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)-->Line_76 $$ subscriptionSender.addPersistedSubscribers(MBCategory.class.getName(), message.getGroupId())[ FD ]
Line_69 $$ String inReplyTo = null-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_29 $$ String categoryName = category.getName()[ CD ]
Line_24 $$ if (message.isAnonymous()) -->Line_26 $$ fullName = serviceContext.translate("anonymous")[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_48 $$ if (serviceContext.isCommandUpdate()) [ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_66 $$ _log.error("Could not parse message " + message.getMessageId() + " " + e.getMessage())[ FD ]
Line_52 $$ subjectLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageAddedSubject()-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)-->Line_82 $$ subscriptionSender.addPersistedSubscribers(MBThread.class.getName(), message.getThreadId())[ FD ]
Line_22 $$ String emailAddress = PortalUtil.getUserEmailAddress(message.getUserId())-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_26 $$ fullName = serviceContext.translate("anonymous")-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_21 $$ Group group = groupPersistence.findByPrimaryKey(message.getGroupId())-->Line_32 $$ categoryName += " - " + group.getDescriptiveName()[ FD ]
Line_20 $$ Company company = companyPersistence.findByPrimaryKey(message.getCompanyId())-->Line_73 $$ inReplyTo = PortalUtil.getMailId(company.getMx(), MBUtil.MESSAGE_POP_PORTLET_PREFIX, message.getCategoryId(), parentMessage.getMessageId(), modifiedDate.getTime())[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_20 $$ Company company = companyPersistence.findByPrimaryKey(message.getCompanyId())[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_46 $$ LocalizedValuesMap subjectLocalizedValuesMap = null[ CD ]
Line_23 $$ String fullName = PortalUtil.getUserName(message.getUserId(), message.getUserName())-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_24 $$ if (message.isAnonymous()) [ FD ]
Line_28 $$ MBCategory category = message.getCategory()-->Line_29 $$ String categoryName = category.getName()[ FD ]
Line_62 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_63 $$ messageBody = MBUtil.replaceMessageBodyPaths(themeDisplay, messageBody)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_23 $$ String fullName = PortalUtil.getUserName(message.getUserId(), message.getUserName())[ FD ]
Line_41 $$ String fromAddress = mbGroupServiceSettings.getEmailFromAddress()-->Line_44 $$ replyToAddress = MBUtil.getReplyToAddress(message.getCategoryId(), message.getMessageId(), company.getMx(), fromAddress)[ FD ]
Line_29 $$ String categoryName = category.getName()-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_82 $$ subscriptionSender.addPersistedSubscribers(MBThread.class.getName(), message.getThreadId())[ FD ]
Line_20 $$ Company company = companyPersistence.findByPrimaryKey(message.getCompanyId())-->Line_44 $$ replyToAddress = MBUtil.getReplyToAddress(message.getCategoryId(), message.getMessageId(), company.getMx(), fromAddress)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_39 $$ String entryTitle = message.getSubject()[ CD ]
Line_44 $$ replyToAddress = MBUtil.getReplyToAddress(message.getCategoryId(), message.getMessageId(), company.getMx(), fromAddress)-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_60 $$ HttpServletRequest request = serviceContext.getRequest()-->Line_61 $$ if (request != null) [ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_76 $$ subscriptionSender.addPersistedSubscribers(MBCategory.class.getName(), message.getGroupId())[ FD ]
Line_30 $$ if (category.getCategoryId() == MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) -->Line_31 $$ categoryName = serviceContext.translate("message-boards-home")[ CD ]
Line_32 $$ categoryName += " - " + group.getDescriptiveName()-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_73 $$ inReplyTo = PortalUtil.getMailId(company.getMx(), MBUtil.MESSAGE_POP_PORTLET_PREFIX, message.getCategoryId(), parentMessage.getMessageId(), modifiedDate.getTime())-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_42 $$ String replyToAddress = StringPool.BLANK-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_3 $$ if (!message.isApproved() || Validator.isNull(messageURL)) -->Line_4 $$ return[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_56 $$ String messageBody = message.getBody()[ CD ]
Line_71 $$ MBMessage parentMessage = mbMessageLocalService.getMessage(message.getParentMessageId())-->Line_72 $$ Date modifiedDate = parentMessage.getModifiedDate()[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_16 $$ if (serviceContext.isCommandUpdate() && mbGroupServiceSettings.isEmailMessageUpdatedEnabled()) [ FD ]
Line_40 $$ String fromName = mbGroupServiceSettings.getEmailFromName()-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)-->Line_88 $$ sourceMailingListSubscriptionSender.addMailingListSubscriber(message.getGroupId(), categoryId)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_42 $$ String replyToAddress = StringPool.BLANK[ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_22 $$ String emailAddress = PortalUtil.getUserEmailAddress(message.getUserId())[ CD ]
Line_39 $$ String entryTitle = message.getSubject()-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_3 $$ if (!message.isApproved() || Validator.isNull(messageURL)) [ FD ]
Line_26 $$ fullName = serviceContext.translate("anonymous")-->Line_75 $$ SubscriptionSender subscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_14 $$ MBGroupServiceSettings mbGroupServiceSettings = MBGroupServiceSettings.getInstance(message.getGroupId())-->Line_41 $$ String fromAddress = mbGroupServiceSettings.getEmailFromAddress()[ FD ]
Line_29 $$ String categoryName = category.getName()-->Line_31 $$ categoryName = serviceContext.translate("message-boards-home")[ FD ]
Line_48 $$ if (serviceContext.isCommandUpdate()) -->Line_49 $$ subjectLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageUpdatedSubject()[ CD ]
Line_25 $$ emailAddress = StringPool.BLANK-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_49 $$ subjectLocalizedValuesMap = mbGroupServiceSettings.getEmailMessageUpdatedSubject()-->Line_86 $$ MBSubscriptionSender sourceMailingListSubscriptionSender = getSubscriptionSender(userId, message, messageURL, entryTitle, htmlFormat, messageBody, categoryName, inReplyTo, fromName, fromAddress, replyToAddress, emailAddress, fullName, subjectLocalizedValuesMap, bodyLocalizedValuesMap, serviceContext)[ FD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_30 $$ if (category.getCategoryId() == MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) [ CD ]
Line_2 $$ protected void notifySubscribers(long userId, MBMessage message, String messageURL, ServiceContext serviceContext) throws PortalException -->Line_71 $$ MBMessage parentMessage = mbMessageLocalService.getMessage(message.getParentMessageId())[ FD ]
Line_14 $$ MBGroupServiceSettings mbGroupServiceSettings = MBGroupServiceSettings.getInstance(message.getGroupId())-->Line_55 $$ boolean htmlFormat = mbGroupServiceSettings.isEmailHtmlFormat()[ FD ]
