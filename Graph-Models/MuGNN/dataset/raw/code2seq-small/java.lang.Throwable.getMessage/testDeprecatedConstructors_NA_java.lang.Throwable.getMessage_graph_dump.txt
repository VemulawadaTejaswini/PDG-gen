Line_2 $$ public void testDeprecatedConstructors() -->Line_5 $$ MapFile.Reader reader = null[ CD ]
Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)-->Line_24 $$ assertNotNull(writer)[ FD ]
Line_26 $$ reader = new MapFile.Reader(fs, path, WritableComparator.get(IntWritable.class), conf)-->Line_27 $$ assertNotNull(reader)[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_18 $$ assertNotNull(writer)[ FD ]
Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)-->Line_19 $$ writer.close()[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_25 $$ writer.close()[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_23 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, CompressionType.RECORD, defaultProgressable)[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_22 $$ writer.close()[ FD ]
Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)-->Line_20 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, SequenceFile.CompressionType.RECORD)[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_15 $$ assertNotNull(writer)[ FD ]
Line_5 $$ MapFile.Reader reader = null-->Line_28 $$ assertNotNull("reader key is null !!!", reader.getKeyClass())[ FD ]
Line_5 $$ MapFile.Reader reader = null-->Line_33 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_22 $$ writer.close()[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_13 $$ writer.close()[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_19 $$ writer.close()[ FD ]
Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)-->Line_18 $$ assertNotNull(writer)[ FD ]
Line_23 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, CompressionType.RECORD, defaultProgressable)-->Line_24 $$ assertNotNull(writer)[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_12 $$ assertNotNull(writer)[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_13 $$ writer.close()[ FD ]
Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)-->Line_33 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_25 $$ writer.close()[ FD ]
Line_2 $$ public void testDeprecatedConstructors() -->Line_3 $$ String path = new Path(TEST_DIR, "writes.mapfile").toString()[ CD ]
Line_4 $$ MapFile.Writer writer = null-->Line_9 $$ assertNotNull(writer)[ FD ]
Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)-->Line_23 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, CompressionType.RECORD, defaultProgressable)[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_9 $$ assertNotNull(writer)[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_24 $$ assertNotNull(writer)[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_33 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_26 $$ reader = new MapFile.Reader(fs, path, WritableComparator.get(IntWritable.class), conf)-->Line_33 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_16 $$ writer.close()[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_24 $$ assertNotNull(writer)[ FD ]
Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)-->Line_22 $$ writer.close()[ FD ]
Line_23 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, CompressionType.RECORD, defaultProgressable)-->Line_33 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_23 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, CompressionType.RECORD, defaultProgressable)[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_15 $$ assertNotNull(writer)[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_22 $$ writer.close()[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_12 $$ assertNotNull(writer)[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_24 $$ assertNotNull(writer)[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_20 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, SequenceFile.CompressionType.RECORD)[ FD ]
Line_20 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, SequenceFile.CompressionType.RECORD)-->Line_22 $$ writer.close()[ FD ]
Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)-->Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)[ FD ]
Line_20 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, SequenceFile.CompressionType.RECORD)-->Line_33 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_20 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, SequenceFile.CompressionType.RECORD)-->Line_21 $$ assertNotNull(writer)[ FD ]
Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)-->Line_16 $$ writer.close()[ FD ]
Line_23 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, CompressionType.RECORD, defaultProgressable)-->Line_25 $$ writer.close()[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_12 $$ assertNotNull(writer)[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_10 $$ writer.close()[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_15 $$ assertNotNull(writer)[ FD ]
Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)-->Line_24 $$ assertNotNull(writer)[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_18 $$ assertNotNull(writer)[ FD ]
Line_5 $$ MapFile.Reader reader = null-->Line_26 $$ reader = new MapFile.Reader(fs, path, WritableComparator.get(IntWritable.class), conf)[ FD ]
Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)-->Line_20 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, SequenceFile.CompressionType.RECORD)[ FD ]
Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)-->Line_22 $$ writer.close()[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_21 $$ assertNotNull(writer)[ FD ]
Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)-->Line_21 $$ assertNotNull(writer)[ FD ]
Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)-->Line_19 $$ writer.close()[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_20 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, SequenceFile.CompressionType.RECORD)[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_10 $$ writer.close()[ FD ]
Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)-->Line_33 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_5 $$ MapFile.Reader reader = null-->Line_27 $$ assertNotNull(reader)[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_23 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, CompressionType.RECORD, defaultProgressable)[ FD ]
Line_20 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, SequenceFile.CompressionType.RECORD)-->Line_24 $$ assertNotNull(writer)[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_33 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_20 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, SequenceFile.CompressionType.RECORD)-->Line_25 $$ writer.close()[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_13 $$ writer.close()[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_16 $$ writer.close()[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)[ FD ]
Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)-->Line_25 $$ writer.close()[ FD ]
Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)-->Line_15 $$ assertNotNull(writer)[ FD ]
Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)-->Line_21 $$ assertNotNull(writer)[ FD ]
Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)-->Line_25 $$ writer.close()[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_19 $$ writer.close()[ FD ]
Line_20 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, SequenceFile.CompressionType.RECORD)-->Line_23 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, CompressionType.RECORD, defaultProgressable)[ FD ]
Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)-->Line_23 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, CompressionType.RECORD, defaultProgressable)[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)[ FD ]
Line_5 $$ MapFile.Reader reader = null-->Line_29 $$ assertNotNull("reader value in null", reader.getValueClass())[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_33 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_11 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultProgressable)-->Line_16 $$ writer.close()[ FD ]
Line_26 $$ reader = new MapFile.Reader(fs, path, WritableComparator.get(IntWritable.class), conf)-->Line_29 $$ assertNotNull("reader value in null", reader.getValueClass())[ FD ]
Line_26 $$ reader = new MapFile.Reader(fs, path, WritableComparator.get(IntWritable.class), conf)-->Line_28 $$ assertNotNull("reader key is null !!!", reader.getKeyClass())[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_21 $$ assertNotNull(writer)[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_21 $$ assertNotNull(writer)[ FD ]
Line_2 $$ public void testDeprecatedConstructors() -->Line_4 $$ MapFile.Writer writer = null[ CD ]
Line_14 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD, defaultCodec, defaultProgressable)-->Line_18 $$ assertNotNull(writer)[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_18 $$ assertNotNull(writer)[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_19 $$ writer.close()[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_17 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class)[ FD ]
Line_4 $$ MapFile.Writer writer = null-->Line_25 $$ writer.close()[ FD ]
Line_8 $$ writer = new MapFile.Writer(conf, fs, path, IntWritable.class, Text.class, CompressionType.RECORD)-->Line_20 $$ writer = new MapFile.Writer(conf, fs, path, WritableComparator.get(Text.class), Text.class, SequenceFile.CompressionType.RECORD)[ FD ]
