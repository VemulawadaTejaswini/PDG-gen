Line_8 $$ if (target != null) -->Line_11 $$ MessageType messageType[ CD ]
Line_22 $$ messageType = MessageType.INFO-->Line_33 $$ myStatusCallback.showMessage(message, messageType)[ FD ]
Line_9 $$ VirtualFile targetFile = target.getVirtualFile(true)-->Line_21 $$ message = ApplicationBundle.message("scheme.exporter.ui.code.style.exported.message", myScheme.getName(), targetFile.getPresentableUrl())[ FD ]
Line_24 $$ message = ApplicationBundle.message("scheme.exporter.ui.export.failed", e.getMessage())-->Line_33 $$ myStatusCallback.showMessage(message, messageType)[ FD ]
Line_21 $$ message = ApplicationBundle.message("scheme.exporter.ui.code.style.exported.message", myScheme.getName(), targetFile.getPresentableUrl())-->Line_33 $$ myStatusCallback.showMessage(message, messageType)[ FD ]
Line_21 $$ message = ApplicationBundle.message("scheme.exporter.ui.code.style.exported.message", myScheme.getName(), targetFile.getPresentableUrl())-->Line_24 $$ message = ApplicationBundle.message("scheme.exporter.ui.export.failed", e.getMessage())[ FD ]
Line_3 $$ SchemeExporter<CodeStyleScheme> exporter = SchemeExporterEP.getExporter(exporterName, CodeStyleScheme.class)-->Line_5 $$ String ext = exporter.getExtension()[ FD ]
Line_25 $$ messageType = MessageType.ERROR-->Line_31 $$ messageType = MessageType.ERROR[ FD ]
Line_22 $$ messageType = MessageType.INFO-->Line_31 $$ messageType = MessageType.ERROR[ FD ]
Line_11 $$ MessageType messageType-->Line_31 $$ messageType = MessageType.ERROR[ FD ]
Line_8 $$ if (target != null) -->Line_33 $$ myStatusCallback.showMessage(message, messageType)[ CD ]
Line_10 $$ String message-->Line_21 $$ message = ApplicationBundle.message("scheme.exporter.ui.code.style.exported.message", myScheme.getName(), targetFile.getPresentableUrl())[ FD ]
Line_12 $$ if (targetFile != null) -->Line_13 $$ final AccessToken writeToken = ApplicationManager.getApplication().acquireWriteActionLock(getClass())[ CD ]
Line_12 $$ if (targetFile != null) -->Line_30 $$ message = ApplicationBundle.message("scheme.exporter.ui.cannot.write.message")[ CD ]
Line_4 $$ if (exporter != null) -->Line_6 $$ FileSaverDialog saver = FileChooserFactory.getInstance().createSaveFileDialog(new FileSaverDescriptor(ApplicationBundle.message("scheme.exporter.ui.file.chooser.title"), ApplicationBundle.message("scheme.exporter.ui.file.chooser.message"), ext), myParentComponent)[ CD ]
Line_2 $$ private void exportSchemeUsing(@NotNull String exporterName) -->Line_3 $$ SchemeExporter<CodeStyleScheme> exporter = SchemeExporterEP.getExporter(exporterName, CodeStyleScheme.class)[ CD ]
Line_15 $$ OutputStream outputStream = targetFile.getOutputStream(this)-->Line_19 $$ outputStream.close()[ FD ]
Line_11 $$ MessageType messageType-->Line_22 $$ messageType = MessageType.INFO[ FD ]
Line_9 $$ VirtualFile targetFile = target.getVirtualFile(true)-->Line_15 $$ OutputStream outputStream = targetFile.getOutputStream(this)[ FD ]
Line_6 $$ FileSaverDialog saver = FileChooserFactory.getInstance().createSaveFileDialog(new FileSaverDescriptor(ApplicationBundle.message("scheme.exporter.ui.file.chooser.title"), ApplicationBundle.message("scheme.exporter.ui.file.chooser.message"), ext), myParentComponent)-->Line_7 $$ VirtualFileWrapper target = saver.save(null, getFileNameSuggestion() + "." + ext)[ FD ]
Line_12 $$ if (targetFile != null) -->Line_31 $$ messageType = MessageType.ERROR[ CD ]
Line_24 $$ message = ApplicationBundle.message("scheme.exporter.ui.export.failed", e.getMessage())-->Line_30 $$ message = ApplicationBundle.message("scheme.exporter.ui.cannot.write.message")[ FD ]
Line_3 $$ SchemeExporter<CodeStyleScheme> exporter = SchemeExporterEP.getExporter(exporterName, CodeStyleScheme.class)-->Line_17 $$ exporter.exportScheme(myScheme, outputStream)[ FD ]
Line_25 $$ messageType = MessageType.ERROR-->Line_33 $$ myStatusCallback.showMessage(message, messageType)[ FD ]
Line_31 $$ messageType = MessageType.ERROR-->Line_33 $$ myStatusCallback.showMessage(message, messageType)[ FD ]
Line_15 $$ OutputStream outputStream = targetFile.getOutputStream(this)-->Line_17 $$ exporter.exportScheme(myScheme, outputStream)[ FD ]
Line_10 $$ String message-->Line_24 $$ message = ApplicationBundle.message("scheme.exporter.ui.export.failed", e.getMessage())[ FD ]
Line_9 $$ VirtualFile targetFile = target.getVirtualFile(true)-->Line_12 $$ if (targetFile != null) [ FD ]
Line_4 $$ if (exporter != null) -->Line_8 $$ if (target != null) [ CD ]
Line_22 $$ messageType = MessageType.INFO-->Line_25 $$ messageType = MessageType.ERROR[ FD ]
Line_8 $$ if (target != null) -->Line_10 $$ String message[ CD ]
Line_8 $$ if (target != null) -->Line_12 $$ if (targetFile != null) [ CD ]
Line_2 $$ private void exportSchemeUsing(@NotNull String exporterName) -->Line_4 $$ if (exporter != null) [ CD ]
Line_11 $$ MessageType messageType-->Line_25 $$ messageType = MessageType.ERROR[ FD ]
Line_10 $$ String message-->Line_33 $$ myStatusCallback.showMessage(message, messageType)[ FD ]
Line_11 $$ MessageType messageType-->Line_33 $$ myStatusCallback.showMessage(message, messageType)[ FD ]
Line_2 $$ private void exportSchemeUsing(@NotNull String exporterName) -->Line_3 $$ SchemeExporter<CodeStyleScheme> exporter = SchemeExporterEP.getExporter(exporterName, CodeStyleScheme.class)[ FD ]
Line_10 $$ String message-->Line_30 $$ message = ApplicationBundle.message("scheme.exporter.ui.cannot.write.message")[ FD ]
Line_3 $$ SchemeExporter<CodeStyleScheme> exporter = SchemeExporterEP.getExporter(exporterName, CodeStyleScheme.class)-->Line_4 $$ if (exporter != null) [ FD ]
Line_4 $$ if (exporter != null) -->Line_7 $$ VirtualFileWrapper target = saver.save(null, getFileNameSuggestion() + "." + ext)[ CD ]
Line_4 $$ if (exporter != null) -->Line_5 $$ String ext = exporter.getExtension()[ CD ]
Line_30 $$ message = ApplicationBundle.message("scheme.exporter.ui.cannot.write.message")-->Line_33 $$ myStatusCallback.showMessage(message, messageType)[ FD ]
Line_7 $$ VirtualFileWrapper target = saver.save(null, getFileNameSuggestion() + "." + ext)-->Line_8 $$ if (target != null) [ FD ]
Line_8 $$ if (target != null) -->Line_9 $$ VirtualFile targetFile = target.getVirtualFile(true)[ CD ]
Line_7 $$ VirtualFileWrapper target = saver.save(null, getFileNameSuggestion() + "." + ext)-->Line_9 $$ VirtualFile targetFile = target.getVirtualFile(true)[ FD ]
Line_13 $$ final AccessToken writeToken = ApplicationManager.getApplication().acquireWriteActionLock(getClass())-->Line_27 $$ writeToken.finish()[ FD ]
Line_21 $$ message = ApplicationBundle.message("scheme.exporter.ui.code.style.exported.message", myScheme.getName(), targetFile.getPresentableUrl())-->Line_30 $$ message = ApplicationBundle.message("scheme.exporter.ui.cannot.write.message")[ FD ]
