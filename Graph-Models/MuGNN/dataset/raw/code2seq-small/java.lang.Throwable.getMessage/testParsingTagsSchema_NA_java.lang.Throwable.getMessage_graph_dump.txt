Line_5 $$ String highlightElement = "-->Line_6 $$ XContentParser parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)[ FD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_16 $$ assertArrayEquals("setting tags_schema 'default' should alter post_tags", HighlightBuilder.DEFAULT_POST_TAGS, highlightBuilder.postTags())[ CD ]
Line_5 $$ String highlightElement = "-->Line_12 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)[ FD ]
Line_6 $$ XContentParser parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)-->Line_7 $$ context.reset(parser)[ FD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_8 $$ HighlightBuilder highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context)[ CD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_3 $$ QueryParseContext context = new QueryParseContext(indicesQueriesRegistry)[ CD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_7 $$ context.reset(parser)[ CD ]
Line_6 $$ XContentParser parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)-->Line_12 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)[ FD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_13 $$ context.reset(parser)[ CD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_9 $$ assertArrayEquals("setting tags_schema 'styled' should alter pre_tags", HighlightBuilder.DEFAULT_STYLED_PRE_TAG, highlightBuilder.preTags())[ CD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_4 $$ context.parseFieldMatcher(new ParseFieldMatcher(Settings.EMPTY))[ CD ]
Line_3 $$ QueryParseContext context = new QueryParseContext(indicesQueriesRegistry)-->Line_8 $$ HighlightBuilder highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context)[ FD ]
Line_6 $$ XContentParser parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)-->Line_18 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)[ FD ]
Line_11 $$ highlightElement = "-->Line_18 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)[ FD ]
Line_18 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)-->Line_19 $$ context.reset(parser)[ FD ]
Line_14 $$ highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context)-->Line_16 $$ assertArrayEquals("setting tags_schema 'default' should alter post_tags", HighlightBuilder.DEFAULT_POST_TAGS, highlightBuilder.postTags())[ FD ]
Line_3 $$ QueryParseContext context = new QueryParseContext(indicesQueriesRegistry)-->Line_14 $$ highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context)[ FD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_19 $$ context.reset(parser)[ CD ]
Line_3 $$ QueryParseContext context = new QueryParseContext(indicesQueriesRegistry)-->Line_7 $$ context.reset(parser)[ FD ]
Line_12 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)-->Line_19 $$ context.reset(parser)[ FD ]
Line_8 $$ HighlightBuilder highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context)-->Line_16 $$ assertArrayEquals("setting tags_schema 'default' should alter post_tags", HighlightBuilder.DEFAULT_POST_TAGS, highlightBuilder.postTags())[ FD ]
Line_8 $$ HighlightBuilder highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context)-->Line_10 $$ assertArrayEquals("setting tags_schema 'styled' should alter post_tags", HighlightBuilder.DEFAULT_STYLED_POST_TAGS, highlightBuilder.postTags())[ FD ]
Line_11 $$ highlightElement = "-->Line_17 $$ highlightElement = "[ FD ]
Line_3 $$ QueryParseContext context = new QueryParseContext(indicesQueriesRegistry)-->Line_13 $$ context.reset(parser)[ FD ]
Line_8 $$ HighlightBuilder highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context)-->Line_9 $$ assertArrayEquals("setting tags_schema 'styled' should alter pre_tags", HighlightBuilder.DEFAULT_STYLED_PRE_TAG, highlightBuilder.preTags())[ FD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_14 $$ highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context)[ CD ]
Line_8 $$ HighlightBuilder highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context)-->Line_14 $$ highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context)[ FD ]
Line_12 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)-->Line_18 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)[ FD ]
Line_5 $$ String highlightElement = "-->Line_18 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)[ FD ]
Line_5 $$ String highlightElement = "-->Line_17 $$ highlightElement = "[ FD ]
Line_3 $$ QueryParseContext context = new QueryParseContext(indicesQueriesRegistry)-->Line_21 $$ HighlightBuilder.PROTOTYPE.fromXContent(context)[ FD ]
Line_12 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)-->Line_13 $$ context.reset(parser)[ FD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_6 $$ XContentParser parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)[ CD ]
Line_3 $$ QueryParseContext context = new QueryParseContext(indicesQueriesRegistry)-->Line_19 $$ context.reset(parser)[ FD ]
Line_6 $$ XContentParser parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)-->Line_13 $$ context.reset(parser)[ FD ]
Line_11 $$ highlightElement = "-->Line_12 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)[ FD ]
Line_3 $$ QueryParseContext context = new QueryParseContext(indicesQueriesRegistry)-->Line_4 $$ context.parseFieldMatcher(new ParseFieldMatcher(Settings.EMPTY))[ FD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_12 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)[ CD ]
Line_6 $$ XContentParser parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)-->Line_19 $$ context.reset(parser)[ FD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_10 $$ assertArrayEquals("setting tags_schema 'styled' should alter post_tags", HighlightBuilder.DEFAULT_STYLED_POST_TAGS, highlightBuilder.postTags())[ CD ]
Line_5 $$ String highlightElement = "-->Line_11 $$ highlightElement = "[ FD ]
Line_8 $$ HighlightBuilder highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context)-->Line_15 $$ assertArrayEquals("setting tags_schema 'default' should alter pre_tags", HighlightBuilder.DEFAULT_PRE_TAGS, highlightBuilder.preTags())[ FD ]
Line_14 $$ highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context)-->Line_15 $$ assertArrayEquals("setting tags_schema 'default' should alter pre_tags", HighlightBuilder.DEFAULT_PRE_TAGS, highlightBuilder.preTags())[ FD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_17 $$ highlightElement = "[ CD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_18 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)[ CD ]
Line_17 $$ highlightElement = "-->Line_18 $$ parser = XContentFactory.xContent(highlightElement).createParser(highlightElement)[ FD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_5 $$ String highlightElement = "[ CD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_15 $$ assertArrayEquals("setting tags_schema 'default' should alter pre_tags", HighlightBuilder.DEFAULT_PRE_TAGS, highlightBuilder.preTags())[ CD ]
Line_2 $$ public void testParsingTagsSchema() throws IOException -->Line_11 $$ highlightElement = "[ CD ]
