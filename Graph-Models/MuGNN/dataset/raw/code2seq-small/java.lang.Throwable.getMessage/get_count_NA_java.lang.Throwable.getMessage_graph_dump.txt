Line_18 $$ int pageSize-->Line_23 $$ logger.trace("average row column size is [ FD ]
Line_14 $$ ColumnFamilyStore cfs = keyspaceName.getColumnFamilyStore(column_parent.column_family)-->Line_19 $$ if (cfs.getMeanColumns() > 0) [ FD ]
Line_3 $$ if (startSessionIfRequested()) -->Line_7 $$ logger.trace("get_count")[ CD ]
Line_10 $$ ThriftClientState cState = state()-->Line_12 $$ cState.hasColumnFamilyAccess(keyspace, column_parent.column_family, Permission.SELECT)[ FD ]
Line_22 $$ pageSize = Math.max(2, pageSize)-->Line_25 $$ pageSize = COUNT_PAGE_SIZE[ FD ]
Line_10 $$ ThriftClientState cState = state()-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_22 $$ pageSize = Math.max(2, pageSize)-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_29 $$ ClusteringIndexFilter filter-->Line_36 $$ filter = toInternalFilter(metadata, column_parent, sliceRange)[ FD ]
Line_3 $$ if (startSessionIfRequested()) -->Line_4 $$ Map<String, String> traceParameters = ImmutableMap.of("key", ByteBufferUtil.bytesToHex(key), "column_parent", column_parent.toString(), "predicate", predicate.toString(), "consistency_level", consistency_level.name())[ CD ]
Line_21 $$ pageSize = Math.min(COUNT_PAGE_SIZE, 4 * 1024 * 1024 / averageColumnSize)-->Line_23 $$ logger.trace("average row column size is [ FD ]
Line_15 $$ int nowInSec = FBUtilities.nowInSeconds()-->Line_17 $$ return getSliceInternal(keyspace, key, column_parent, nowInSec, predicate, consistency_level, cState).size()[ FD ]
Line_28 $$ ColumnFilter columnFilter-->Line_32 $$ columnFilter = ColumnFilter.all(metadata)[ FD ]
Line_2 $$ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_19 $$ if (cfs.getMeanColumns() > 0) -->Line_20 $$ int averageColumnSize = (int) (cfs.metric.meanPartitionSize.getValue() / cfs.getMeanColumns())[ CD ]
Line_32 $$ columnFilter = ColumnFilter.all(metadata)-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_25 $$ pageSize = COUNT_PAGE_SIZE-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_30 $$ CFMetaData metadata = cfs.metadata-->Line_36 $$ filter = toInternalFilter(metadata, column_parent, sliceRange)[ FD ]
Line_29 $$ ClusteringIndexFilter filter-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_33 $$ filter = new ClusteringIndexSliceFilter(makeSlices(metadata, sliceRange), sliceRange.reversed)-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_19 $$ if (cfs.getMeanColumns() > 0) -->Line_25 $$ pageSize = COUNT_PAGE_SIZE[ CD ]
Line_38 $$ DataLimits limits = getLimits(1, metadata.isSuper() && !column_parent.isSetSuper_column(), predicate)-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_11 $$ String keyspace = cState.getKeyspace()-->Line_12 $$ cState.hasColumnFamilyAccess(keyspace, column_parent.column_family, Permission.SELECT)[ FD ]
Line_2 $$ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_17 $$ return getSliceInternal(keyspace, key, column_parent, nowInSec, predicate, consistency_level, cState).size()[ FD ]
Line_18 $$ int pageSize-->Line_25 $$ pageSize = COUNT_PAGE_SIZE[ FD ]
Line_30 $$ CFMetaData metadata = cfs.metadata-->Line_33 $$ filter = new ClusteringIndexSliceFilter(makeSlices(metadata, sliceRange), sliceRange.reversed)[ FD ]
Line_27 $$ SliceRange sliceRange = predicate.slice_range == null ? new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER, false, Integer.MAX_VALUE) : predicate.slice_range-->Line_33 $$ filter = new ClusteringIndexSliceFilter(makeSlices(metadata, sliceRange), sliceRange.reversed)[ FD ]
Line_21 $$ pageSize = Math.min(COUNT_PAGE_SIZE, 4 * 1024 * 1024 / averageColumnSize)-->Line_25 $$ pageSize = COUNT_PAGE_SIZE[ FD ]
Line_39 $$ DecoratedKey dk = metadata.decorateKey(key)-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_10 $$ ThriftClientState cState = state()-->Line_11 $$ String keyspace = cState.getKeyspace()[ FD ]
Line_32 $$ columnFilter = ColumnFilter.all(metadata)-->Line_35 $$ columnFilter = makeColumnFilter(metadata, column_parent, sliceRange)[ FD ]
Line_3 $$ if (startSessionIfRequested()) -->Line_5 $$ Tracing.instance.begin("get_count", traceParameters)[ CD ]
Line_28 $$ ColumnFilter columnFilter-->Line_35 $$ columnFilter = makeColumnFilter(metadata, column_parent, sliceRange)[ FD ]
Line_2 $$ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_3 $$ if (startSessionIfRequested()) [ CD ]
Line_2 $$ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_38 $$ DataLimits limits = getLimits(1, metadata.isSuper() && !column_parent.isSetSuper_column(), predicate)[ FD ]
Line_19 $$ if (cfs.getMeanColumns() > 0) -->Line_22 $$ pageSize = Math.max(2, pageSize)[ CD ]
Line_36 $$ filter = toInternalFilter(metadata, column_parent, sliceRange)-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_33 $$ filter = new ClusteringIndexSliceFilter(makeSlices(metadata, sliceRange), sliceRange.reversed)-->Line_36 $$ filter = toInternalFilter(metadata, column_parent, sliceRange)[ FD ]
Line_10 $$ ThriftClientState cState = state()-->Line_17 $$ return getSliceInternal(keyspace, key, column_parent, nowInSec, predicate, consistency_level, cState).size()[ FD ]
Line_30 $$ CFMetaData metadata = cfs.metadata-->Line_31 $$ if (metadata.isSuper() && !column_parent.isSetSuper_column()) [ FD ]
Line_21 $$ pageSize = Math.min(COUNT_PAGE_SIZE, 4 * 1024 * 1024 / averageColumnSize)-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_13 $$ Keyspace keyspaceName = Keyspace.open(keyspace)-->Line_14 $$ ColumnFamilyStore cfs = keyspaceName.getColumnFamilyStore(column_parent.column_family)[ FD ]
Line_30 $$ CFMetaData metadata = cfs.metadata-->Line_39 $$ DecoratedKey dk = metadata.decorateKey(key)[ FD ]
Line_19 $$ if (cfs.getMeanColumns() > 0) -->Line_23 $$ logger.trace("average row column size is [ CD ]
Line_4 $$ Map<String, String> traceParameters = ImmutableMap.of("key", ByteBufferUtil.bytesToHex(key), "column_parent", column_parent.toString(), "predicate", predicate.toString(), "consistency_level", consistency_level.name())-->Line_5 $$ Tracing.instance.begin("get_count", traceParameters)[ FD ]
Line_30 $$ CFMetaData metadata = cfs.metadata-->Line_35 $$ columnFilter = makeColumnFilter(metadata, column_parent, sliceRange)[ FD ]
Line_2 $$ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_4 $$ Map<String, String> traceParameters = ImmutableMap.of("key", ByteBufferUtil.bytesToHex(key), "column_parent", column_parent.toString(), "predicate", predicate.toString(), "consistency_level", consistency_level.name())[ FD ]
Line_22 $$ pageSize = Math.max(2, pageSize)-->Line_23 $$ logger.trace("average row column size is [ FD ]
Line_20 $$ int averageColumnSize = (int) (cfs.metric.meanPartitionSize.getValue() / cfs.getMeanColumns())-->Line_23 $$ logger.trace("average row column size is [ FD ]
Line_31 $$ if (metadata.isSuper() && !column_parent.isSetSuper_column()) -->Line_32 $$ columnFilter = ColumnFilter.all(metadata)[ CD ]
Line_18 $$ int pageSize-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_31 $$ if (metadata.isSuper() && !column_parent.isSetSuper_column()) -->Line_35 $$ columnFilter = makeColumnFilter(metadata, column_parent, sliceRange)[ CD ]
Line_21 $$ pageSize = Math.min(COUNT_PAGE_SIZE, 4 * 1024 * 1024 / averageColumnSize)-->Line_22 $$ pageSize = Math.max(2, pageSize)[ FD ]
Line_16 $$ if (predicate.column_names != null)-->Line_17 $$ return getSliceInternal(keyspace, key, column_parent, nowInSec, predicate, consistency_level, cState).size()[ CD ]
Line_18 $$ int pageSize-->Line_21 $$ pageSize = Math.min(COUNT_PAGE_SIZE, 4 * 1024 * 1024 / averageColumnSize)[ FD ]
Line_2 $$ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_36 $$ filter = toInternalFilter(metadata, column_parent, sliceRange)[ FD ]
Line_29 $$ ClusteringIndexFilter filter-->Line_33 $$ filter = new ClusteringIndexSliceFilter(makeSlices(metadata, sliceRange), sliceRange.reversed)[ FD ]
Line_30 $$ CFMetaData metadata = cfs.metadata-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_11 $$ String keyspace = cState.getKeyspace()-->Line_13 $$ Keyspace keyspaceName = Keyspace.open(keyspace)[ FD ]
Line_30 $$ CFMetaData metadata = cfs.metadata-->Line_38 $$ DataLimits limits = getLimits(1, metadata.isSuper() && !column_parent.isSetSuper_column(), predicate)[ FD ]
Line_30 $$ CFMetaData metadata = cfs.metadata-->Line_32 $$ columnFilter = ColumnFilter.all(metadata)[ FD ]
Line_2 $$ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_31 $$ if (metadata.isSuper() && !column_parent.isSetSuper_column()) [ FD ]
Line_31 $$ if (metadata.isSuper() && !column_parent.isSetSuper_column()) -->Line_33 $$ filter = new ClusteringIndexSliceFilter(makeSlices(metadata, sliceRange), sliceRange.reversed)[ CD ]
Line_14 $$ ColumnFamilyStore cfs = keyspaceName.getColumnFamilyStore(column_parent.column_family)-->Line_20 $$ int averageColumnSize = (int) (cfs.metric.meanPartitionSize.getValue() / cfs.getMeanColumns())[ FD ]
Line_27 $$ SliceRange sliceRange = predicate.slice_range == null ? new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER, false, Integer.MAX_VALUE) : predicate.slice_range-->Line_35 $$ columnFilter = makeColumnFilter(metadata, column_parent, sliceRange)[ FD ]
Line_18 $$ int pageSize-->Line_22 $$ pageSize = Math.max(2, pageSize)[ FD ]
Line_2 $$ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_39 $$ DecoratedKey dk = metadata.decorateKey(key)[ FD ]
Line_11 $$ String keyspace = cState.getKeyspace()-->Line_17 $$ return getSliceInternal(keyspace, key, column_parent, nowInSec, predicate, consistency_level, cState).size()[ FD ]
Line_35 $$ columnFilter = makeColumnFilter(metadata, column_parent, sliceRange)-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_31 $$ if (metadata.isSuper() && !column_parent.isSetSuper_column()) -->Line_36 $$ filter = toInternalFilter(metadata, column_parent, sliceRange)[ CD ]
Line_15 $$ int nowInSec = FBUtilities.nowInSeconds()-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
Line_27 $$ SliceRange sliceRange = predicate.slice_range == null ? new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER, false, Integer.MAX_VALUE) : predicate.slice_range-->Line_36 $$ filter = toInternalFilter(metadata, column_parent, sliceRange)[ FD ]
Line_19 $$ if (cfs.getMeanColumns() > 0) -->Line_21 $$ pageSize = Math.min(COUNT_PAGE_SIZE, 4 * 1024 * 1024 / averageColumnSize)[ CD ]
Line_2 $$ public int get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_35 $$ columnFilter = makeColumnFilter(metadata, column_parent, sliceRange)[ FD ]
Line_28 $$ ColumnFilter columnFilter-->Line_40 $$ return QueryPagers.countPaged(metadata, dk, columnFilter, filter, limits, ThriftConversion.fromThrift(consistency_level), cState, pageSize, nowInSec, true)[ FD ]
