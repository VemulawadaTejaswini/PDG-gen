Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_24 $$ writer.commit()[ CD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_32 $$ Store targetStore = newStore(createTempDir(), false)[ CD ]
Line_44 $$ if (throwCorruptedIndexException) -->Line_45 $$ assertEquals(ex.getMessage(), "[File corruption occurred on recovery but checksums are ok]")[ CD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_4 $$ final RecoverySettings recoverySettings = new RecoverySettings(settings, service)[ CD ]
Line_4 $$ final RecoverySettings recoverySettings = new RecoverySettings(settings, service)-->Line_53 $$ IOUtils.close(store, targetStore, recoverySettings)[ FD ]
Line_8 $$ AtomicBoolean failedEngine = new AtomicBoolean(false)-->Line_52 $$ assertFalse(failedEngine.get())[ FD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_26 $$ Store.MetadataSnapshot metadata = store.getMetadata()[ CD ]
Line_7 $$ Store store = newStore(tempDir, false)-->Line_15 $$ Directory dir = store.directory()[ FD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_9 $$ RecoverySourceHandler handler = new RecoverySourceHandler(null, request, recoverySettings, null, logger) [ CD ]
Line_9 $$ RecoverySourceHandler handler = new RecoverySourceHandler(null, request, recoverySettings, null, logger) -->Line_12 $$ failedEngine.set(true)[ CD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_53 $$ IOUtils.close(store, targetStore, recoverySettings)[ CD ]
Line_7 $$ Store store = newStore(tempDir, false)-->Line_26 $$ Store.MetadataSnapshot metadata = store.getMetadata()[ FD ]
Line_18 $$ for (int i = 0; i < numDocs; i++) -->Line_19 $$ Document document = new Document()[ CD ]
Line_19 $$ Document document = new Document()-->Line_22 $$ writer.addDocument(document)[ FD ]
Line_44 $$ if (throwCorruptedIndexException) -->Line_47 $$ assertEquals(ex.getMessage(), "boom")[ CD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_17 $$ int numDocs = randomIntBetween(10, 100)[ CD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_52 $$ assertFalse(failedEngine.get())[ CD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_8 $$ AtomicBoolean failedEngine = new AtomicBoolean(false)[ CD ]
Line_7 $$ Store store = newStore(tempDir, false)-->Line_34 $$ handler.sendFiles(store, metas.toArray(new StoreFileMetaData[0]), ( md) -> [ FD ]
Line_9 $$ RecoverySourceHandler handler = new RecoverySourceHandler(null, request, recoverySettings, null, logger) -->Line_11 $$ assertFalse(failedEngine.get())[ CD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_15 $$ Directory dir = store.directory()[ CD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_31 $$ final boolean throwCorruptedIndexException = randomBoolean()[ CD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_6 $$ Path tempDir = createTempDir()[ CD ]
Line_9 $$ RecoverySourceHandler handler = new RecoverySourceHandler(null, request, recoverySettings, null, logger) -->Line_34 $$ handler.sendFiles(store, metas.toArray(new StoreFileMetaData[0]), ( md) -> [ FD ]
Line_18 $$ for (int i = 0; i < numDocs; i++) -->Line_20 $$ document.add(new StringField("id", Integer.toString(i), Field.Store.YES))[ FD ]
Line_8 $$ AtomicBoolean failedEngine = new AtomicBoolean(false)-->Line_11 $$ assertFalse(failedEngine.get())[ FD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_25 $$ writer.close()[ CD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_3 $$ Settings settings = Settings.builder().put("indices.recovery.concurrent_streams", 1).put("indices.recovery.concurrent_small_file_streams", 1).build()[ CD ]
Line_6 $$ Path tempDir = createTempDir()-->Line_7 $$ Store store = newStore(tempDir, false)[ FD ]
Line_19 $$ Document document = new Document()-->Line_20 $$ document.add(new StringField("id", Integer.toString(i), Field.Store.YES))[ FD ]
Line_19 $$ Document document = new Document()-->Line_21 $$ document.add(newField("field", randomUnicodeOfCodepointLengthBetween(1, 10), TextField.TYPE_STORED))[ FD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_5 $$ StartRecoveryRequest request = new StartRecoveryRequest(shardId, new DiscoveryNode("b", DummyTransportAddress.INSTANCE, Version.CURRENT), new DiscoveryNode("b", DummyTransportAddress.INSTANCE, Version.CURRENT), randomBoolean(), null, RecoveryState.Type.STORE, randomLong())[ CD ]
Line_7 $$ Store store = newStore(tempDir, false)-->Line_53 $$ IOUtils.close(store, targetStore, recoverySettings)[ FD ]
Line_18 $$ for (int i = 0; i < numDocs; i++) -->Line_20 $$ document.add(new StringField("id", Integer.toString(i), Field.Store.YES))[ CD ]
Line_18 $$ for (int i = 0; i < numDocs; i++) -->Line_22 $$ writer.addDocument(document)[ CD ]
Line_8 $$ AtomicBoolean failedEngine = new AtomicBoolean(false)-->Line_12 $$ failedEngine.set(true)[ FD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_18 $$ for (int i = 0; i < numDocs; i++) [ CD ]
Line_2 $$ public void testHandleExceptinoOnSendSendFiles() throws Throwable -->Line_7 $$ Store store = newStore(tempDir, false)[ CD ]
Line_18 $$ for (int i = 0; i < numDocs; i++) -->Line_21 $$ document.add(newField("field", randomUnicodeOfCodepointLengthBetween(1, 10), TextField.TYPE_STORED))[ CD ]
