Line_34 $$ cluster = null-->Line_50 $$ cluster.shutdown()[ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_53 $$ cluster = null[ CD ]
Line_34 $$ cluster = null-->Line_70 $$ assertTrue(cluster.getFileSystem().exists(new Path(TEST_PATH)))[ FD ]
Line_34 $$ cluster = null-->Line_75 $$ cluster.shutdown()[ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_30 $$ File editFile = FSImageTestUtil.findLatestEditsLog(sd).getFile()[ CD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_61 $$ cluster.shutdown()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_50 $$ cluster.shutdown()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_38 $$ cluster.waitActive()[ FD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_38 $$ cluster.waitActive()[ FD ]
Line_34 $$ cluster = null-->Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()[ FD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_53 $$ cluster = null[ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_33 $$ corruptor.corrupt(editFile)[ FD ]
Line_64 $$ cluster = null-->Line_74 $$ if (cluster != null) [ FD ]
Line_14 $$ if (!finalize) -->Line_17 $$ cluster.getNameNode().getFSImage().setEditLogForTesting(spyLog)[ CD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_27 $$ cluster.shutdown()[ FD ]
Line_53 $$ cluster = null-->Line_61 $$ cluster.shutdown()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()[ FD ]
Line_67 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_74 $$ if (cluster != null) [ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_26 $$ if (cluster != null) [ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_13 $$ cluster.waitActive()[ FD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_61 $$ cluster.shutdown()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_61 $$ cluster.shutdown()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_15 $$ FSEditLog spyLog = spy(cluster.getNameNode().getFSImage().getEditLog())[ FD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_70 $$ assertTrue(cluster.getFileSystem().exists(new Path(TEST_PATH)))[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_49 $$ if (cluster != null) [ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_7 $$ setupRecoveryTestConf(conf)[ CD ]
Line_34 $$ cluster = null-->Line_49 $$ if (cluster != null) [ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_15 $$ FSEditLog spyLog = spy(cluster.getNameNode().getFSImage().getEditLog())[ FD ]
Line_53 $$ cluster = null-->Line_70 $$ assertTrue(cluster.getFileSystem().exists(new Path(TEST_PATH)))[ FD ]
Line_14 $$ if (!finalize) -->Line_16 $$ doNothing().when(spyLog).endCurrentLogSegment(true)[ CD ]
Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()-->Line_61 $$ cluster.shutdown()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_75 $$ cluster.shutdown()[ FD ]
Line_10 $$ StorageDirectory sd = null-->Line_30 $$ File editFile = FSImageTestUtil.findLatestEditsLog(sd).getFile()[ FD ]
Line_34 $$ cluster = null-->Line_64 $$ cluster = null[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_69 $$ cluster.waitActive()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_64 $$ cluster = null[ FD ]
Line_64 $$ cluster = null-->Line_69 $$ cluster.waitActive()[ FD ]
Line_64 $$ cluster = null-->Line_70 $$ assertTrue(cluster.getFileSystem().exists(new Path(TEST_PATH)))[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_60 $$ if (cluster != null) [ FD ]
Line_67 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_69 $$ cluster.waitActive()[ FD ]
Line_20 $$ final FSNamesystem namesystem = cluster.getNamesystem()-->Line_21 $$ FSImage fsimage = namesystem.getFSImage()[ FD ]
Line_34 $$ cluster = null-->Line_74 $$ if (cluster != null) [ FD ]
Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()-->Line_69 $$ cluster.waitActive()[ FD ]
Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()-->Line_70 $$ assertTrue(cluster.getFileSystem().exists(new Path(TEST_PATH)))[ FD ]
Line_40 $$ if (needRecovery) -->Line_41 $$ fail("expected the corrupted edit log to prevent normal startup")[ CD ]
Line_34 $$ cluster = null-->Line_53 $$ cluster = null[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_34 $$ cluster = null[ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_32 $$ LOG.info("corrupting edit log file '" + editFile + "'")[ CD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_6 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_34 $$ cluster = null-->Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_23 $$ fileSys.mkdirs(new Path(TEST_PATH2))[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_64 $$ cluster = null[ FD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_39 $$ cluster.shutdown()[ FD ]
Line_44 $$ if (!needRecovery) -->Line_46 $$ fail("got unexpected exception " + e.getMessage())[ CD ]
Line_67 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_75 $$ cluster.shutdown()[ FD ]
Line_10 $$ StorageDirectory sd = null-->Line_24 $$ sd = fsimage.getStorage().dirIterator(NameNodeDirType.EDITS).next()[ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_33 $$ corruptor.corrupt(editFile)[ CD ]
Line_5 $$ final boolean needRecovery = corruptor.needRecovery(finalize)-->Line_44 $$ if (!needRecovery) [ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_74 $$ if (cluster != null) [ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_8 $$ MiniDFSCluster cluster = null[ CD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_60 $$ if (cluster != null) [ FD ]
Line_53 $$ cluster = null-->Line_67 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_70 $$ assertTrue(cluster.getFileSystem().exists(new Path(TEST_PATH)))[ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_14 $$ if (!finalize) [ FD ]
Line_30 $$ File editFile = FSImageTestUtil.findLatestEditsLog(sd).getFile()-->Line_31 $$ assertTrue("Should exist: " + editFile, editFile.exists())[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_74 $$ if (cluster != null) [ FD ]
Line_30 $$ File editFile = FSImageTestUtil.findLatestEditsLog(sd).getFile()-->Line_33 $$ corruptor.corrupt(editFile)[ FD ]
Line_14 $$ if (!finalize) -->Line_15 $$ FSEditLog spyLog = spy(cluster.getNameNode().getFSImage().getEditLog())[ CD ]
Line_53 $$ cluster = null-->Line_74 $$ if (cluster != null) [ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_75 $$ cluster.shutdown()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_17 $$ cluster.getNameNode().getFSImage().setEditLogForTesting(spyLog)[ FD ]
Line_24 $$ sd = fsimage.getStorage().dirIterator(NameNodeDirType.EDITS).next()-->Line_30 $$ File editFile = FSImageTestUtil.findLatestEditsLog(sd).getFile()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_67 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()[ FD ]
Line_34 $$ cluster = null-->Line_38 $$ cluster.waitActive()[ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_45 $$ LOG.error("Got unexpected failure with " + corruptor.getName() + corruptor, e)[ FD ]
Line_34 $$ cluster = null-->Line_60 $$ if (cluster != null) [ FD ]
Line_34 $$ cluster = null-->Line_69 $$ cluster.waitActive()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_20 $$ final FSNamesystem namesystem = cluster.getNamesystem()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_13 $$ cluster.waitActive()[ FD ]
Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()-->Line_74 $$ if (cluster != null) [ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_10 $$ StorageDirectory sd = null[ CD ]
Line_34 $$ cluster = null-->Line_61 $$ cluster.shutdown()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()[ FD ]
Line_74 $$ if (cluster != null) -->Line_75 $$ cluster.shutdown()[ CD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_68 $$ LOG.debug("successfully recovered the " + corruptor.getName() + " corrupted edit log")[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_34 $$ cluster = null[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()[ FD ]
Line_53 $$ cluster = null-->Line_69 $$ cluster.waitActive()[ FD ]
Line_44 $$ if (!needRecovery) -->Line_45 $$ LOG.error("Got unexpected failure with " + corruptor.getName() + corruptor, e)[ CD ]
Line_15 $$ FSEditLog spyLog = spy(cluster.getNameNode().getFSImage().getEditLog())-->Line_16 $$ doNothing().when(spyLog).endCurrentLogSegment(true)[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_53 $$ cluster = null[ FD ]
Line_64 $$ cluster = null-->Line_67 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()[ FD ]
Line_64 $$ cluster = null-->Line_75 $$ cluster.shutdown()[ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_5 $$ final boolean needRecovery = corruptor.needRecovery(finalize)[ CD ]
Line_53 $$ cluster = null-->Line_64 $$ cluster = null[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_38 $$ cluster.waitActive()[ FD ]
Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()-->Line_60 $$ if (cluster != null) [ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_26 $$ if (cluster != null) [ FD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_74 $$ if (cluster != null) [ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_39 $$ cluster.shutdown()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_19 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_53 $$ cluster = null-->Line_75 $$ cluster.shutdown()[ FD ]
Line_60 $$ if (cluster != null) -->Line_61 $$ cluster.shutdown()[ CD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_70 $$ assertTrue(cluster.getFileSystem().exists(new Path(TEST_PATH)))[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_19 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_64 $$ cluster = null[ CD ]
Line_21 $$ FSImage fsimage = namesystem.getFSImage()-->Line_24 $$ sd = fsimage.getStorage().dirIterator(NameNodeDirType.EDITS).next()[ FD ]
Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()-->Line_67 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()[ FD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_67 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()[ FD ]
Line_53 $$ cluster = null-->Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()[ FD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_49 $$ if (cluster != null) [ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_5 $$ final boolean needRecovery = corruptor.needRecovery(finalize)[ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_4 $$ final String TEST_PATH2 = "/second/dir"[ CD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_64 $$ cluster = null[ FD ]
Line_34 $$ cluster = null-->Line_67 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()[ FD ]
Line_67 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_70 $$ assertTrue(cluster.getFileSystem().exists(new Path(TEST_PATH)))[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_49 $$ if (cluster != null) [ FD ]
Line_49 $$ if (cluster != null) -->Line_50 $$ cluster.shutdown()[ CD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_60 $$ if (cluster != null) [ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_27 $$ cluster.shutdown()[ FD ]
Line_15 $$ FSEditLog spyLog = spy(cluster.getNameNode().getFSImage().getEditLog())-->Line_17 $$ cluster.getNameNode().getFSImage().setEditLogForTesting(spyLog)[ FD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_50 $$ cluster.shutdown()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_39 $$ cluster.shutdown()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_69 $$ cluster.waitActive()[ FD ]
Line_6 $$ Configuration conf = new HdfsConfiguration()-->Line_7 $$ setupRecoveryTestConf(conf)[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_22 $$ fileSys.mkdirs(new Path(TEST_PATH))[ FD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()[ FD ]
Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()-->Line_75 $$ cluster.shutdown()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()[ FD ]
Line_56 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).startupOption(recoverStartOpt).build()-->Line_64 $$ cluster = null[ FD ]
Line_53 $$ cluster = null-->Line_60 $$ if (cluster != null) [ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_31 $$ assertTrue("Should exist: " + editFile, editFile.exists())[ CD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_3 $$ final String TEST_PATH = "/test/path/dir"[ CD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_75 $$ cluster.shutdown()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_19 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_26 $$ if (cluster != null) -->Line_27 $$ cluster.shutdown()[ CD ]
Line_19 $$ fileSys = cluster.getFileSystem()-->Line_23 $$ fileSys.mkdirs(new Path(TEST_PATH2))[ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_9 $$ FileSystem fileSys = null[ CD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_67 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_53 $$ cluster = null[ FD ]
Line_19 $$ fileSys = cluster.getFileSystem()-->Line_22 $$ fileSys.mkdirs(new Path(TEST_PATH))[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_50 $$ cluster.shutdown()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_20 $$ final FSNamesystem namesystem = cluster.getNamesystem()[ FD ]
Line_37 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).enableManagedDfsDirsRedundancy(false).format(false).build()-->Line_69 $$ cluster.waitActive()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).manageNameDfsDirs(false).build()-->Line_17 $$ cluster.getNameNode().getFSImage().setEditLogForTesting(spyLog)[ FD ]
Line_2 $$ static void testNameNodeRecoveryImpl(Corruptor corruptor, boolean finalize) throws IOException -->Line_34 $$ cluster = null[ CD ]
Line_34 $$ cluster = null-->Line_39 $$ cluster.shutdown()[ FD ]
