Line_27 $$ final File file = PathManager.findFileInLibDirectory(path)-->Line_32 $$ if (file.exists()) [ FD ]
Line_21 $$ SubTaskProgressIndicator indicator = progressManager.createSubTaskIndicator()-->Line_38 $$ downloaded = downloadFile(description, existing, indicator)[ FD ]
Line_42 $$ if (FileUtil.filesEqual(downloaded, existing)) -->Line_43 $$ existingFiles.add(Pair.create(existing, description))[ CD ]
Line_29 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) -->Line_30 $$ String path = FileUtil.toSystemDependentName(StringUtil.trimStart(url, LocalFileSystem.PROTOCOL_PREFIX))[ CD ]
Line_5 $$ ProgressIndicator parentIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_7 $$ parentIndicator = new EmptyProgressIndicator()[ FD ]
Line_24 $$ final String url = description.getDownloadUrl()-->Line_29 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) [ FD ]
Line_18 $$ for (final DownloadableFileDescription description : myFileDescriptions) -->Line_43 $$ existingFiles.add(Pair.create(existing, description))[ FD ]
Line_36 $$ File downloaded-->Line_42 $$ if (FileUtil.filesEqual(downloaded, existing)) [ FD ]
Line_3 $$ final List<Pair<File, DownloadableFileDescription>> downloadedFiles = new ArrayList<Pair<File, DownloadableFileDescription>>()-->Line_72 $$ deleteFiles(downloadedFiles)[ FD ]
Line_5 $$ ProgressIndicator parentIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_6 $$ if (parentIndicator == null) [ FD ]
Line_36 $$ File downloaded-->Line_46 $$ downloadedFiles.add(Pair.create(downloaded, description))[ FD ]
Line_24 $$ final String url = description.getDownloadUrl()-->Line_25 $$ if (url.startsWith(LIB_SCHEMA)) [ FD ]
Line_29 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) -->Line_32 $$ if (file.exists()) [ CD ]
Line_4 $$ final List<Pair<File, DownloadableFileDescription>> existingFiles = new ArrayList<Pair<File, DownloadableFileDescription>>()-->Line_69 $$ localFiles.addAll(existingFiles)[ FD ]
Line_3 $$ final List<Pair<File, DownloadableFileDescription>> downloadedFiles = new ArrayList<Pair<File, DownloadableFileDescription>>()-->Line_46 $$ downloadedFiles.add(Pair.create(downloaded, description))[ FD ]
Line_24 $$ final String url = description.getDownloadUrl()-->Line_26 $$ final String path = FileUtil.toSystemDependentName(StringUtil.trimStart(url, LIB_SCHEMA))[ FD ]
Line_2 $$ public List<Pair<File, DownloadableFileDescription>> download(@NotNull final File targetDir) throws IOException -->Line_6 $$ if (parentIndicator == null) [ CD ]
Line_16 $$ List<Future<Void>> results = new ArrayList<Future<Void>>()-->Line_19 $$ results.add(executor.submit(new Callable<Void>() [ FD ]
Line_5 $$ ProgressIndicator parentIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_11 $$ parentIndicator.setText(IdeBundle.message("progress.downloading.0.files.text", myFileDescriptions.size()))[ FD ]
Line_25 $$ if (url.startsWith(LIB_SCHEMA)) -->Line_28 $$ existingFiles.add(Pair.create(file, description))[ CD ]
Line_18 $$ for (final DownloadableFileDescription description : myFileDescriptions) -->Line_28 $$ existingFiles.add(Pair.create(file, description))[ FD ]
Line_36 $$ File downloaded-->Line_45 $$ totalSize.addAndGet(downloaded.length())[ FD ]
Line_17 $$ final AtomicLong totalSize = new AtomicLong()-->Line_45 $$ totalSize.addAndGet(downloaded.length())[ FD ]
Line_15 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(PooledThreadExecutor.INSTANCE, maxParallelDownloads)-->Line_19 $$ results.add(executor.submit(new Callable<Void>() [ FD ]
Line_18 $$ for (final DownloadableFileDescription description : myFileDescriptions) -->Line_24 $$ final String url = description.getDownloadUrl()[ FD ]
Line_4 $$ final List<Pair<File, DownloadableFileDescription>> existingFiles = new ArrayList<Pair<File, DownloadableFileDescription>>()-->Line_33 $$ existingFiles.add(Pair.create(file, description))[ FD ]
Line_29 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) -->Line_42 $$ if (FileUtil.filesEqual(downloaded, existing)) [ CD ]
Line_2 $$ public List<Pair<File, DownloadableFileDescription>> download(@NotNull final File targetDir) throws IOException -->Line_4 $$ final List<Pair<File, DownloadableFileDescription>> existingFiles = new ArrayList<Pair<File, DownloadableFileDescription>>()[ CD ]
Line_18 $$ for (final DownloadableFileDescription description : myFileDescriptions) -->Line_23 $$ final File existing = new File(targetDir, description.getDefaultFileName())[ FD ]
Line_19 $$ results.add(executor.submit(new Callable<Void>() -->Line_22 $$ indicator.checkCanceled()[ CD ]
Line_25 $$ if (url.startsWith(LIB_SCHEMA)) -->Line_27 $$ final File file = PathManager.findFileInLibDirectory(path)[ CD ]
Line_2 $$ public List<Pair<File, DownloadableFileDescription>> download(@NotNull final File targetDir) throws IOException -->Line_3 $$ final List<Pair<File, DownloadableFileDescription>> downloadedFiles = new ArrayList<Pair<File, DownloadableFileDescription>>()[ CD ]
Line_3 $$ final List<Pair<File, DownloadableFileDescription>> downloadedFiles = new ArrayList<Pair<File, DownloadableFileDescription>>()-->Line_68 $$ localFiles.addAll(moveToDir(downloadedFiles, targetDir))[ FD ]
Line_18 $$ for (final DownloadableFileDescription description : myFileDescriptions) -->Line_33 $$ existingFiles.add(Pair.create(file, description))[ FD ]
Line_19 $$ results.add(executor.submit(new Callable<Void>() -->Line_23 $$ final File existing = new File(targetDir, description.getDefaultFileName())[ CD ]
Line_23 $$ final File existing = new File(targetDir, description.getDefaultFileName())-->Line_43 $$ existingFiles.add(Pair.create(existing, description))[ FD ]
Line_38 $$ downloaded = downloadFile(description, existing, indicator)-->Line_42 $$ if (FileUtil.filesEqual(downloaded, existing)) [ FD ]
Line_4 $$ final List<Pair<File, DownloadableFileDescription>> existingFiles = new ArrayList<Pair<File, DownloadableFileDescription>>()-->Line_28 $$ existingFiles.add(Pair.create(file, description))[ FD ]
Line_26 $$ final String path = FileUtil.toSystemDependentName(StringUtil.trimStart(url, LIB_SCHEMA))-->Line_27 $$ final File file = PathManager.findFileInLibDirectory(path)[ FD ]
Line_2 $$ public List<Pair<File, DownloadableFileDescription>> download(@NotNull final File targetDir) throws IOException -->Line_68 $$ localFiles.addAll(moveToDir(downloadedFiles, targetDir))[ FD ]
Line_6 $$ if (parentIndicator == null) -->Line_7 $$ parentIndicator = new EmptyProgressIndicator()[ CD ]
Line_29 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) -->Line_36 $$ File downloaded[ CD ]
Line_23 $$ final File existing = new File(targetDir, description.getDefaultFileName())-->Line_38 $$ downloaded = downloadFile(description, existing, indicator)[ FD ]
Line_3 $$ final List<Pair<File, DownloadableFileDescription>> downloadedFiles = new ArrayList<Pair<File, DownloadableFileDescription>>()-->Line_75 $$ deleteFiles(downloadedFiles)[ FD ]
Line_19 $$ results.add(executor.submit(new Callable<Void>() -->Line_24 $$ final String url = description.getDownloadUrl()[ CD ]
Line_25 $$ if (url.startsWith(LIB_SCHEMA)) -->Line_29 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) [ CD ]
Line_17 $$ final AtomicLong totalSize = new AtomicLong()-->Line_66 $$ LOG.debug("Downloaded " + StringUtil.formatFileSize(totalSize.get()) + " in " + StringUtil.formatDuration(duration) + "(" + duration + "ms)")[ FD ]
Line_21 $$ SubTaskProgressIndicator indicator = progressManager.createSubTaskIndicator()-->Line_49 $$ indicator.finished()[ FD ]
Line_18 $$ for (final DownloadableFileDescription description : myFileDescriptions) -->Line_40 $$ throw new IOException(IdeBundle.message("error.file.download.failed", description.getDownloadUrl(), e.getMessage()), e)[ FD ]
Line_19 $$ results.add(executor.submit(new Callable<Void>() -->Line_50 $$ return null[ CD ]
Line_38 $$ downloaded = downloadFile(description, existing, indicator)-->Line_45 $$ totalSize.addAndGet(downloaded.length())[ FD ]
Line_23 $$ final File existing = new File(targetDir, description.getDefaultFileName())-->Line_42 $$ if (FileUtil.filesEqual(downloaded, existing)) [ FD ]
Line_32 $$ if (file.exists()) -->Line_33 $$ existingFiles.add(Pair.create(file, description))[ CD ]
Line_19 $$ results.add(executor.submit(new Callable<Void>() -->Line_25 $$ if (url.startsWith(LIB_SCHEMA)) [ CD ]
Line_2 $$ public List<Pair<File, DownloadableFileDescription>> download(@NotNull final File targetDir) throws IOException -->Line_5 $$ ProgressIndicator parentIndicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_18 $$ for (final DownloadableFileDescription description : myFileDescriptions) -->Line_46 $$ downloadedFiles.add(Pair.create(downloaded, description))[ FD ]
Line_19 $$ results.add(executor.submit(new Callable<Void>() -->Line_21 $$ SubTaskProgressIndicator indicator = progressManager.createSubTaskIndicator()[ CD ]
Line_38 $$ downloaded = downloadFile(description, existing, indicator)-->Line_46 $$ downloadedFiles.add(Pair.create(downloaded, description))[ FD ]
Line_25 $$ if (url.startsWith(LIB_SCHEMA)) -->Line_26 $$ final String path = FileUtil.toSystemDependentName(StringUtil.trimStart(url, LIB_SCHEMA))[ CD ]
Line_27 $$ final File file = PathManager.findFileInLibDirectory(path)-->Line_28 $$ existingFiles.add(Pair.create(file, description))[ FD ]
Line_36 $$ File downloaded-->Line_38 $$ downloaded = downloadFile(description, existing, indicator)[ FD ]
Line_4 $$ final List<Pair<File, DownloadableFileDescription>> existingFiles = new ArrayList<Pair<File, DownloadableFileDescription>>()-->Line_43 $$ existingFiles.add(Pair.create(existing, description))[ FD ]
Line_42 $$ if (FileUtil.filesEqual(downloaded, existing)) -->Line_46 $$ downloadedFiles.add(Pair.create(downloaded, description))[ CD ]
Line_7 $$ parentIndicator = new EmptyProgressIndicator()-->Line_11 $$ parentIndicator.setText(IdeBundle.message("progress.downloading.0.files.text", myFileDescriptions.size()))[ FD ]
Line_19 $$ results.add(executor.submit(new Callable<Void>() -->Line_49 $$ indicator.finished()[ CD ]
Line_10 $$ final ConcurrentTasksProgressManager progressManager = new ConcurrentTasksProgressManager(parentIndicator, myFileDescriptions.size())-->Line_21 $$ SubTaskProgressIndicator indicator = progressManager.createSubTaskIndicator()[ FD ]
Line_27 $$ final File file = PathManager.findFileInLibDirectory(path)-->Line_33 $$ existingFiles.add(Pair.create(file, description))[ FD ]
Line_24 $$ final String url = description.getDownloadUrl()-->Line_30 $$ String path = FileUtil.toSystemDependentName(StringUtil.trimStart(url, LocalFileSystem.PROTOCOL_PREFIX))[ FD ]
Line_42 $$ if (FileUtil.filesEqual(downloaded, existing)) -->Line_45 $$ totalSize.addAndGet(downloaded.length())[ CD ]
Line_21 $$ SubTaskProgressIndicator indicator = progressManager.createSubTaskIndicator()-->Line_22 $$ indicator.checkCanceled()[ FD ]
Line_18 $$ for (final DownloadableFileDescription description : myFileDescriptions) -->Line_38 $$ downloaded = downloadFile(description, existing, indicator)[ FD ]
