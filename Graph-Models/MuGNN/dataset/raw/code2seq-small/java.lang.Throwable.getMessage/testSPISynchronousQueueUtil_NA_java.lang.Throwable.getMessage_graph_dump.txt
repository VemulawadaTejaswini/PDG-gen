Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_22 $$ syncThrowableThread.sync()[ CD ]
Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_13 $$ final MockSPI mockSPI = new MockSPI()[ CD ]
Line_14 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_20 $$ syncThrowableThread.start()[ FD ]
Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_20 $$ syncThrowableThread.start()[ CD ]
Line_14 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_16 $$ SPISynchronousQueueUtil.notifySynchronousQueue(spiUUID, mockSPI)[ CD ]
Line_3 $$ final String spiUUID = "spiUUID"-->Line_16 $$ SPISynchronousQueueUtil.notifySynchronousQueue(spiUUID, mockSPI)[ FD ]
Line_4 $$ SynchronousQueue<SPI> synchronousQueue = SPISynchronousQueueUtil.createSynchronousQueue(spiUUID)-->Line_21 $$ Assert.assertSame(mockSPI, synchronousQueue.take())[ FD ]
Line_3 $$ final String spiUUID = "spiUUID"-->Line_23 $$ synchronousQueue = SPISynchronousQueueUtil.createSynchronousQueue(spiUUID)[ FD ]
Line_13 $$ final MockSPI mockSPI = new MockSPI()-->Line_21 $$ Assert.assertSame(mockSPI, synchronousQueue.take())[ FD ]
Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_3 $$ final String spiUUID = "spiUUID"[ CD ]
Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_4 $$ SynchronousQueue<SPI> synchronousQueue = SPISynchronousQueueUtil.createSynchronousQueue(spiUUID)[ CD ]
Line_4 $$ SynchronousQueue<SPI> synchronousQueue = SPISynchronousQueueUtil.createSynchronousQueue(spiUUID)-->Line_24 $$ Assert.assertSame(synchronousQueue, synchronizerRegistry.get(spiUUID))[ FD ]
Line_3 $$ final String spiUUID = "spiUUID"-->Line_24 $$ Assert.assertSame(synchronousQueue, synchronizerRegistry.get(spiUUID))[ FD ]
Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_5 $$ Map<String, SynchronousQueue<SPI>> synchronizerRegistry = ReflectionTestUtil.getFieldValue(SPISynchronousQueueUtil.class, "_synchronousQueues")[ CD ]
Line_3 $$ final String spiUUID = "spiUUID"-->Line_4 $$ SynchronousQueue<SPI> synchronousQueue = SPISynchronousQueueUtil.createSynchronousQueue(spiUUID)[ FD ]
Line_5 $$ Map<String, SynchronousQueue<SPI>> synchronizerRegistry = ReflectionTestUtil.getFieldValue(SPISynchronousQueueUtil.class, "_synchronousQueues")-->Line_24 $$ Assert.assertSame(synchronousQueue, synchronizerRegistry.get(spiUUID))[ FD ]
Line_4 $$ SynchronousQueue<SPI> synchronousQueue = SPISynchronousQueueUtil.createSynchronousQueue(spiUUID)-->Line_6 $$ Assert.assertSame(synchronousQueue, synchronizerRegistry.get(spiUUID))[ FD ]
Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_14 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() [ CD ]
Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_25 $$ SPISynchronousQueueUtil.destroySynchronousQueue(spiUUID)[ CD ]
Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_21 $$ Assert.assertSame(mockSPI, synchronousQueue.take())[ CD ]
Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_23 $$ synchronousQueue = SPISynchronousQueueUtil.createSynchronousQueue(spiUUID)[ CD ]
Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_26 $$ Assert.assertTrue(synchronizerRegistry.isEmpty())[ CD ]
Line_13 $$ final MockSPI mockSPI = new MockSPI()-->Line_16 $$ SPISynchronousQueueUtil.notifySynchronousQueue(spiUUID, mockSPI)[ FD ]
Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_6 $$ Assert.assertSame(synchronousQueue, synchronizerRegistry.get(spiUUID))[ CD ]
Line_3 $$ final String spiUUID = "spiUUID"-->Line_25 $$ SPISynchronousQueueUtil.destroySynchronousQueue(spiUUID)[ FD ]
Line_14 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_17 $$ return null[ CD ]
Line_3 $$ final String spiUUID = "spiUUID"-->Line_6 $$ Assert.assertSame(synchronousQueue, synchronizerRegistry.get(spiUUID))[ FD ]
Line_2 $$ public void testSPISynchronousQueueUtil() throws InterruptedException -->Line_24 $$ Assert.assertSame(synchronousQueue, synchronizerRegistry.get(spiUUID))[ CD ]
Line_5 $$ Map<String, SynchronousQueue<SPI>> synchronizerRegistry = ReflectionTestUtil.getFieldValue(SPISynchronousQueueUtil.class, "_synchronousQueues")-->Line_26 $$ Assert.assertTrue(synchronizerRegistry.isEmpty())[ FD ]
Line_5 $$ Map<String, SynchronousQueue<SPI>> synchronizerRegistry = ReflectionTestUtil.getFieldValue(SPISynchronousQueueUtil.class, "_synchronousQueues")-->Line_6 $$ Assert.assertSame(synchronousQueue, synchronizerRegistry.get(spiUUID))[ FD ]
Line_14 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_22 $$ syncThrowableThread.sync()[ FD ]
