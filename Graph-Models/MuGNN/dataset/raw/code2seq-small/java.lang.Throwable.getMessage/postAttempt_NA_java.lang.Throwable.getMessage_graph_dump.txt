Line_28 $$ final Map<String, TaskFile> taskFiles = task.getTaskFiles()-->Line_30 $$ for (TaskFile fileEntry : taskFiles.values()) [ FD ]
Line_2 $$ public static void postAttempt(@NotNull final Task task, boolean passed, @Nullable String login, @Nullable String password) -->Line_33 $$ postSubmission(passed, attempt, files)[ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(login) || StringUtil.isEmptyOrSpaces(password)) -->Line_11 $$ if (!success)[ CD ]
Line_2 $$ public static void postAttempt(@NotNull final Task task, boolean passed, @Nullable String login, @Nullable String password) -->Line_17 $$ String attemptRequestBody = new Gson().toJson(new AttemptWrapper(task.getStepicId()))[ FD ]
Line_23 $$ final StatusLine statusLine = attemptResponse.getStatusLine()-->Line_24 $$ if (statusLine.getStatusCode() != HttpStatus.SC_CREATED) [ FD ]
Line_11 $$ if (!success)-->Line_12 $$ return[ CD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(login) || StringUtil.isEmptyOrSpaces(password)) -->Line_8 $$ return[ CD ]
Line_15 $$ final HttpPost attemptRequest = new HttpPost(stepicApiUrl + "attempts")-->Line_18 $$ attemptRequest.setEntity(new StringEntity(attemptRequestBody, ContentType.APPLICATION_JSON))[ FD ]
Line_6 $$ if (ourClient == null) -->Line_7 $$ if (StringUtil.isEmptyOrSpaces(login) || StringUtil.isEmptyOrSpaces(password)) [ CD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(login) || StringUtil.isEmptyOrSpaces(password)) -->Line_10 $$ final boolean success = login(login, password)[ CD ]
Line_2 $$ public static void postAttempt(@NotNull final Task task, boolean passed, @Nullable String login, @Nullable String password) -->Line_18 $$ attemptRequest.setEntity(new StringEntity(attemptRequestBody, ContentType.APPLICATION_JSON))[ CD ]
Line_2 $$ public static void postAttempt(@NotNull final Task task, boolean passed, @Nullable String login, @Nullable String password) -->Line_17 $$ String attemptRequestBody = new Gson().toJson(new AttemptWrapper(task.getStepicId()))[ CD ]
Line_29 $$ final ArrayList<SolutionFile> files = new ArrayList<SolutionFile>()-->Line_33 $$ postSubmission(passed, attempt, files)[ FD ]
Line_15 $$ final HttpPost attemptRequest = new HttpPost(stepicApiUrl + "attempts")-->Line_16 $$ setHeaders(attemptRequest, "application/json")[ FD ]
Line_2 $$ public static void postAttempt(@NotNull final Task task, boolean passed, @Nullable String login, @Nullable String password) -->Line_28 $$ final Map<String, TaskFile> taskFiles = task.getTaskFiles()[ FD ]
Line_20 $$ final CloseableHttpResponse attemptResponse = ourClient.execute(attemptRequest)-->Line_23 $$ final StatusLine statusLine = attemptResponse.getStatusLine()[ FD ]
Line_2 $$ public static void postAttempt(@NotNull final Task task, boolean passed, @Nullable String login, @Nullable String password) -->Line_10 $$ final boolean success = login(login, password)[ FD ]
Line_24 $$ if (statusLine.getStatusCode() != HttpStatus.SC_CREATED) -->Line_25 $$ LOG.error("Failed to make attempt " + attemptResponseString)[ CD ]
Line_29 $$ final ArrayList<SolutionFile> files = new ArrayList<SolutionFile>()-->Line_31 $$ files.add(new SolutionFile(fileEntry.name, fileEntry.text))[ FD ]
Line_10 $$ final boolean success = login(login, password)-->Line_11 $$ if (!success)[ FD ]
Line_22 $$ final String attemptResponseString = responseEntity != null ? EntityUtils.toString(responseEntity) : ""-->Line_27 $$ final AttemptWrapper.Attempt attempt = new Gson().fromJson(attemptResponseString, AttemptContainer.class).attempts.get(0)[ FD ]
Line_20 $$ final CloseableHttpResponse attemptResponse = ourClient.execute(attemptRequest)-->Line_21 $$ final HttpEntity responseEntity = attemptResponse.getEntity()[ FD ]
Line_21 $$ final HttpEntity responseEntity = attemptResponse.getEntity()-->Line_22 $$ final String attemptResponseString = responseEntity != null ? EntityUtils.toString(responseEntity) : ""[ FD ]
Line_2 $$ public static void postAttempt(@NotNull final Task task, boolean passed, @Nullable String login, @Nullable String password) -->Line_7 $$ if (StringUtil.isEmptyOrSpaces(login) || StringUtil.isEmptyOrSpaces(password)) [ FD ]
Line_2 $$ public static void postAttempt(@NotNull final Task task, boolean passed, @Nullable String login, @Nullable String password) -->Line_15 $$ final HttpPost attemptRequest = new HttpPost(stepicApiUrl + "attempts")[ CD ]
Line_3 $$ if (task.getStepicId() <= 0) -->Line_4 $$ return[ CD ]
Line_2 $$ public static void postAttempt(@NotNull final Task task, boolean passed, @Nullable String login, @Nullable String password) -->Line_3 $$ if (task.getStepicId() <= 0) [ CD ]
Line_27 $$ final AttemptWrapper.Attempt attempt = new Gson().fromJson(attemptResponseString, AttemptContainer.class).attempts.get(0)-->Line_33 $$ postSubmission(passed, attempt, files)[ FD ]
Line_15 $$ final HttpPost attemptRequest = new HttpPost(stepicApiUrl + "attempts")-->Line_20 $$ final CloseableHttpResponse attemptResponse = ourClient.execute(attemptRequest)[ FD ]
Line_2 $$ public static void postAttempt(@NotNull final Task task, boolean passed, @Nullable String login, @Nullable String password) -->Line_6 $$ if (ourClient == null) [ CD ]
Line_2 $$ public static void postAttempt(@NotNull final Task task, boolean passed, @Nullable String login, @Nullable String password) -->Line_3 $$ if (task.getStepicId() <= 0) [ FD ]
Line_2 $$ public static void postAttempt(@NotNull final Task task, boolean passed, @Nullable String login, @Nullable String password) -->Line_16 $$ setHeaders(attemptRequest, "application/json")[ CD ]
