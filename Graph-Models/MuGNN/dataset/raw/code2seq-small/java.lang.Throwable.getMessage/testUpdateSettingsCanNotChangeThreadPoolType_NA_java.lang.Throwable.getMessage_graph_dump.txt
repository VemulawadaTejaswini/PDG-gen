Line_2 $$ public void testUpdateSettingsCanNotChangeThreadPoolType() throws InterruptedException -->Line_3 $$ String threadPoolName = randomThreadPoolName()[ CD ]
Line_4 $$ ThreadPool.ThreadPoolType invalidThreadPoolType = randomIncorrectThreadPoolType(threadPoolName)-->Line_15 $$ assertThat(e.getCause().getMessage(), is("setting threadpool." + threadPoolName + ".type to " + invalidThreadPoolType.getType() + " is not permitted; must be " + validThreadPoolType.getType()))[ FD ]
Line_4 $$ ThreadPool.ThreadPoolType invalidThreadPoolType = randomIncorrectThreadPoolType(threadPoolName)-->Line_11 $$ clusterSettings.applySettings(settingsBuilder().put("threadpool." + threadPoolName + ".type", invalidThreadPoolType.getType()).build())[ FD ]
Line_3 $$ String threadPoolName = randomThreadPoolName()-->Line_4 $$ ThreadPool.ThreadPoolType invalidThreadPoolType = randomIncorrectThreadPoolType(threadPoolName)[ FD ]
Line_6 $$ ThreadPool threadPool = null-->Line_10 $$ threadPool.setClusterSettings(clusterSettings)[ FD ]
Line_6 $$ ThreadPool threadPool = null-->Line_8 $$ threadPool = new ThreadPool(settingsBuilder().put("name", "testUpdateSettingsCanNotChangeThreadPoolType").build())[ FD ]
Line_8 $$ threadPool = new ThreadPool(settingsBuilder().put("name", "testUpdateSettingsCanNotChangeThreadPoolType").build())-->Line_10 $$ threadPool.setClusterSettings(clusterSettings)[ FD ]
Line_4 $$ ThreadPool.ThreadPoolType invalidThreadPoolType = randomIncorrectThreadPoolType(threadPoolName)-->Line_14 $$ assertEquals("illegal value can't update [threadpool.] from [[ FD ]
Line_6 $$ ThreadPool threadPool = null-->Line_17 $$ terminateThreadPoolIfNeeded(threadPool)[ FD ]
Line_5 $$ ThreadPool.ThreadPoolType validThreadPoolType = ThreadPool.THREAD_POOL_TYPES.get(threadPoolName)-->Line_15 $$ assertThat(e.getCause().getMessage(), is("setting threadpool." + threadPoolName + ".type to " + invalidThreadPoolType.getType() + " is not permitted; must be " + validThreadPoolType.getType()))[ FD ]
Line_9 $$ ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)-->Line_10 $$ threadPool.setClusterSettings(clusterSettings)[ FD ]
Line_3 $$ String threadPoolName = randomThreadPoolName()-->Line_5 $$ ThreadPool.ThreadPoolType validThreadPoolType = ThreadPool.THREAD_POOL_TYPES.get(threadPoolName)[ FD ]
Line_2 $$ public void testUpdateSettingsCanNotChangeThreadPoolType() throws InterruptedException -->Line_5 $$ ThreadPool.ThreadPoolType validThreadPoolType = ThreadPool.THREAD_POOL_TYPES.get(threadPoolName)[ CD ]
Line_2 $$ public void testUpdateSettingsCanNotChangeThreadPoolType() throws InterruptedException -->Line_4 $$ ThreadPool.ThreadPoolType invalidThreadPoolType = randomIncorrectThreadPoolType(threadPoolName)[ CD ]
Line_2 $$ public void testUpdateSettingsCanNotChangeThreadPoolType() throws InterruptedException -->Line_6 $$ ThreadPool threadPool = null[ CD ]
Line_9 $$ ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)-->Line_11 $$ clusterSettings.applySettings(settingsBuilder().put("threadpool." + threadPoolName + ".type", invalidThreadPoolType.getType()).build())[ FD ]
Line_8 $$ threadPool = new ThreadPool(settingsBuilder().put("name", "testUpdateSettingsCanNotChangeThreadPoolType").build())-->Line_17 $$ terminateThreadPoolIfNeeded(threadPool)[ FD ]
