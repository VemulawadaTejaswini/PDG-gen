Line_4 $$ Path path = new Path(System.getProperty("test.build.data", "."), "serializationAvailability")-->Line_6 $$ SequenceFile.createWriter(conf, SequenceFile.Writer.file(path), SequenceFile.Writer.keyClass(String.class), SequenceFile.Writer.valueClass(NullWritable.class))[ FD ]
Line_4 $$ Path path = new Path(System.getProperty("test.build.data", "."), "serializationAvailability")-->Line_20 $$ new SequenceFile.Reader(conf, SequenceFile.Reader.file(path))[ FD ]
Line_2 $$ public void testSerializationAvailability() throws IOException -->Line_4 $$ Path path = new Path(System.getProperty("test.build.data", "."), "serializationAvailability")[ CD ]
Line_2 $$ public void testSerializationAvailability() throws IOException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testSerializationAvailability() throws IOException -->Line_17 $$ writeTest(FileSystem.get(conf), 1, 1, path, CompressionType.NONE, null)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_17 $$ writeTest(FileSystem.get(conf), 1, 1, path, CompressionType.NONE, null)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_18 $$ conf.setStrings(CommonConfigurationKeys.IO_SERIALIZATIONS_KEY, AvroReflectSerialization.class.getName())[ FD ]
Line_4 $$ Path path = new Path(System.getProperty("test.build.data", "."), "serializationAvailability")-->Line_12 $$ SequenceFile.createWriter(conf, SequenceFile.Writer.file(path), SequenceFile.Writer.keyClass(NullWritable.class), SequenceFile.Writer.valueClass(String.class))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_12 $$ SequenceFile.createWriter(conf, SequenceFile.Writer.file(path), SequenceFile.Writer.keyClass(NullWritable.class), SequenceFile.Writer.valueClass(String.class))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_6 $$ SequenceFile.createWriter(conf, SequenceFile.Writer.file(path), SequenceFile.Writer.keyClass(String.class), SequenceFile.Writer.valueClass(NullWritable.class))[ FD ]
Line_4 $$ Path path = new Path(System.getProperty("test.build.data", "."), "serializationAvailability")-->Line_17 $$ writeTest(FileSystem.get(conf), 1, 1, path, CompressionType.NONE, null)[ FD ]
Line_2 $$ public void testSerializationAvailability() throws IOException -->Line_18 $$ conf.setStrings(CommonConfigurationKeys.IO_SERIALIZATIONS_KEY, AvroReflectSerialization.class.getName())[ CD ]
