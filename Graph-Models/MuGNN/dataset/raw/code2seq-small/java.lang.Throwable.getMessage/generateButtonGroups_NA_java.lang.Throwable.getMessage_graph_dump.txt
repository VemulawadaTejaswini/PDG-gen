Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_35 $$ throw new CodeGenerationException(rootContainer.getId(), e.getMessage(), e)[ FD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_3 $$ IButtonGroup[] groups = rootContainer.getButtonGroups()[ CD ]
Line_15 $$ if (groups[groupIndex].isBound() && !myIgnoreCustomCreation) -->Line_20 $$ generator.loadThis()[ CD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_13 $$ generator.invokeConstructor(ourButtonGroupType, Method.getMethod("void <init>()"))[ FD ]
Line_26 $$ if (localInt != null) -->Line_27 $$ generator.loadLocal(groupLocal)[ CD ]
Line_26 $$ if (localInt != null) -->Line_29 $$ generator.invokeVirtual(ourButtonGroupType, Method.getMethod("void add(javax.swing.AbstractButton)"))[ CD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_3 $$ IButtonGroup[] groups = rootContainer.getButtonGroups()[ FD ]
Line_15 $$ if (groups[groupIndex].isBound() && !myIgnoreCustomCreation) -->Line_19 $$ validateFieldClass(groups[groupIndex].getName(), buttonGroupClass, null)[ CD ]
Line_17 $$ buttonGroupClass = myFinder.loadClass(ButtonGroup.class.getName())-->Line_19 $$ validateFieldClass(groups[groupIndex].getName(), buttonGroupClass, null)[ FD ]
Line_25 $$ Integer localInt = (Integer) myIdToLocalMap.get(ids[i])-->Line_28 $$ generator.loadLocal(localInt.intValue())[ FD ]
Line_10 $$ if (ids.length > 0) -->Line_24 $$ for (int i = 0; i < ids.length; i++) [ CD ]
Line_10 $$ if (ids.length > 0) -->Line_12 $$ generator.dup()[ CD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_12 $$ generator.dup()[ FD ]
Line_7 $$ int groupLocal = generator.newLocal(ourButtonGroupType)-->Line_27 $$ generator.loadLocal(groupLocal)[ FD ]
Line_15 $$ if (groups[groupIndex].isBound() && !myIgnoreCustomCreation) -->Line_22 $$ generator.putField(getMainClassType(), groups[groupIndex].getName(), ourButtonGroupType)[ CD ]
Line_25 $$ Integer localInt = (Integer) myIdToLocalMap.get(ids[i])-->Line_26 $$ if (localInt != null) [ FD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_21 $$ generator.loadLocal(groupLocal)[ FD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_29 $$ generator.invokeVirtual(ourButtonGroupType, Method.getMethod("void add(javax.swing.AbstractButton)"))[ FD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_7 $$ int groupLocal = generator.newLocal(ourButtonGroupType)[ FD ]
Line_16 $$ if (buttonGroupClass == null) -->Line_17 $$ buttonGroupClass = myFinder.loadClass(ButtonGroup.class.getName())[ CD ]
Line_8 $$ for (int groupIndex = 0; groupIndex < groups.length; groupIndex++) -->Line_10 $$ if (ids.length > 0) [ CD ]
Line_15 $$ if (groups[groupIndex].isBound() && !myIgnoreCustomCreation) -->Line_21 $$ generator.loadLocal(groupLocal)[ CD ]
Line_10 $$ if (ids.length > 0) -->Line_11 $$ generator.newInstance(ourButtonGroupType)[ CD ]
Line_6 $$ InstrumentationClassFinder.PseudoClass buttonGroupClass = null-->Line_16 $$ if (buttonGroupClass == null) [ FD ]
Line_24 $$ for (int i = 0; i < ids.length; i++) -->Line_25 $$ Integer localInt = (Integer) myIdToLocalMap.get(ids[i])[ CD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_22 $$ generator.putField(getMainClassType(), groups[groupIndex].getName(), ourButtonGroupType)[ FD ]
Line_17 $$ buttonGroupClass = myFinder.loadClass(ButtonGroup.class.getName())-->Line_16 $$ if (buttonGroupClass == null) [ FD ]
Line_6 $$ InstrumentationClassFinder.PseudoClass buttonGroupClass = null-->Line_17 $$ buttonGroupClass = myFinder.loadClass(ButtonGroup.class.getName())[ FD ]
Line_24 $$ for (int i = 0; i < ids.length; i++) -->Line_26 $$ if (localInt != null) [ CD ]
Line_10 $$ if (ids.length > 0) -->Line_15 $$ if (groups[groupIndex].isBound() && !myIgnoreCustomCreation) [ CD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_14 $$ generator.storeLocal(groupLocal)[ FD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_27 $$ generator.loadLocal(groupLocal)[ FD ]
Line_7 $$ int groupLocal = generator.newLocal(ourButtonGroupType)-->Line_14 $$ generator.storeLocal(groupLocal)[ FD ]
Line_8 $$ for (int groupIndex = 0; groupIndex < groups.length; groupIndex++) -->Line_9 $$ String[] ids = groups[groupIndex].getComponentIds()[ CD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_4 $$ if (groups.length > 0) [ CD ]
Line_15 $$ if (groups[groupIndex].isBound() && !myIgnoreCustomCreation) -->Line_16 $$ if (buttonGroupClass == null) [ CD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_20 $$ generator.loadThis()[ FD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_11 $$ generator.newInstance(ourButtonGroupType)[ FD ]
Line_10 $$ if (ids.length > 0) -->Line_13 $$ generator.invokeConstructor(ourButtonGroupType, Method.getMethod("void <init>()"))[ CD ]
Line_7 $$ int groupLocal = generator.newLocal(ourButtonGroupType)-->Line_21 $$ generator.loadLocal(groupLocal)[ FD ]
Line_6 $$ InstrumentationClassFinder.PseudoClass buttonGroupClass = null-->Line_19 $$ validateFieldClass(groups[groupIndex].getName(), buttonGroupClass, null)[ FD ]
Line_26 $$ if (localInt != null) -->Line_28 $$ generator.loadLocal(localInt.intValue())[ CD ]
Line_10 $$ if (ids.length > 0) -->Line_14 $$ generator.storeLocal(groupLocal)[ CD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_37 $$ throw new CodeGenerationException(rootContainer.getId(), e.getMessage(), e)[ FD ]
Line_2 $$ private void generateButtonGroups(final LwRootContainer rootContainer, final GeneratorAdapter generator) throws CodeGenerationException -->Line_28 $$ generator.loadLocal(localInt.intValue())[ FD ]
