Line_4 $$ ShelveChangesManager shelveManager = ShelveChangesManager.getInstance(myMergeContext.getProject())-->Line_8 $$ shelveManager.shelveChanges(entry.getValue(), myIntersection.getComment(entry.getKey()) + " (auto shelve before merge)", true)[ FD ]
Line_5 $$ for (Map.Entry<String, Collection<Change>> entry : myIntersection.getChangesSubset().entrySet()) -->Line_8 $$ shelveManager.shelveChanges(entry.getValue(), myIntersection.getComment(entry.getKey()) + " (auto shelve before merge)", true)[ FD ]
Line_3 $$ List<VirtualFile> changedFiles = ContainerUtil.newArrayList()-->Line_9 $$ ContainerUtil.addAll(changedFiles, ChangesUtil.getFilesFromChanges(entry.getValue()))[ FD ]
Line_2 $$ private List<VirtualFile> shelveChanges(@NotNull ContinuationContext context) -->Line_13 $$ finishWithError(context, e.getMessage(), true)[ FD ]
Line_2 $$ private List<VirtualFile> shelveChanges(@NotNull ContinuationContext context) -->Line_11 $$ finishWithError(context, e.getMessage(), true)[ FD ]
Line_2 $$ private List<VirtualFile> shelveChanges(@NotNull ContinuationContext context) -->Line_4 $$ ShelveChangesManager shelveManager = ShelveChangesManager.getInstance(myMergeContext.getProject())[ CD ]
Line_5 $$ for (Map.Entry<String, Collection<Change>> entry : myIntersection.getChangesSubset().entrySet()) -->Line_9 $$ ContainerUtil.addAll(changedFiles, ChangesUtil.getFilesFromChanges(entry.getValue()))[ FD ]
Line_2 $$ private List<VirtualFile> shelveChanges(@NotNull ContinuationContext context) -->Line_16 $$ return changedFiles[ CD ]
Line_2 $$ private List<VirtualFile> shelveChanges(@NotNull ContinuationContext context) -->Line_3 $$ List<VirtualFile> changedFiles = ContainerUtil.newArrayList()[ CD ]
