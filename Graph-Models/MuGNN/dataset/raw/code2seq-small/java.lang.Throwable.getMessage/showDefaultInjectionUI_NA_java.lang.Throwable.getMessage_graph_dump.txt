Line_22 $$ final String message = e.getMessage() + (cause != null ? "\n  " + cause.getMessage() : "")-->Line_23 $$ Messages.showErrorDialog(project, message, "Unable to Save")[ FD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_5 $$ final DialogBuilder builder = new DialogBuilder(project)[ CD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_30 $$ return null[ CD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_14 $$ builder.setTitle(EditInjectionSettingsAction.EDIT_INJECTION_TITLE)[ CD ]
Line_5 $$ final DialogBuilder builder = new DialogBuilder(project)-->Line_14 $$ builder.setTitle(EditInjectionSettingsAction.EDIT_INJECTION_TITLE)[ FD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_7 $$ if (support instanceof AbstractLanguageInjectionSupport) [ CD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_6 $$ LanguageInjectionSupport support = InjectorUtils.findInjectionSupport(injection.getSupportId())[ CD ]
Line_5 $$ final DialogBuilder builder = new DialogBuilder(project)-->Line_27 $$ if (builder.show() == DialogWrapper.OK_EXIT_CODE) [ FD ]
Line_5 $$ final DialogBuilder builder = new DialogBuilder(project)-->Line_10 $$ builder.addOkAction()[ FD ]
Line_3 $$ final BaseInjectionPanel panel = new BaseInjectionPanel(injection, project)-->Line_18 $$ panel.apply()[ FD ]
Line_5 $$ final DialogBuilder builder = new DialogBuilder(project)-->Line_11 $$ builder.addCancelAction()[ FD ]
Line_5 $$ final DialogBuilder builder = new DialogBuilder(project)-->Line_8 $$ builder.setHelpId(((AbstractLanguageInjectionSupport) support).getHelpId())[ FD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_3 $$ final BaseInjectionPanel panel = new BaseInjectionPanel(injection, project)[ CD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_15 $$ builder.setOkOperation(new Runnable() [ CD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_6 $$ LanguageInjectionSupport support = InjectorUtils.findInjectionSupport(injection.getSupportId())[ FD ]
Line_3 $$ final BaseInjectionPanel panel = new BaseInjectionPanel(injection, project)-->Line_4 $$ panel.reset()[ FD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_11 $$ builder.addCancelAction()[ CD ]
Line_5 $$ final DialogBuilder builder = new DialogBuilder(project)-->Line_12 $$ builder.setDimensionServiceKey("#org.intellij.plugins.intelliLang.inject.config.ui.BaseInjectionDialog")[ FD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_4 $$ panel.reset()[ CD ]
Line_7 $$ if (support instanceof AbstractLanguageInjectionSupport) -->Line_8 $$ builder.setHelpId(((AbstractLanguageInjectionSupport) support).getHelpId())[ CD ]
Line_3 $$ final BaseInjectionPanel panel = new BaseInjectionPanel(injection, project)-->Line_13 $$ builder.setCenterPanel(panel.getComponent())[ FD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_23 $$ Messages.showErrorDialog(project, message, "Unable to Save")[ FD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_27 $$ if (builder.show() == DialogWrapper.OK_EXIT_CODE) [ CD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_10 $$ builder.addOkAction()[ CD ]
Line_5 $$ final DialogBuilder builder = new DialogBuilder(project)-->Line_13 $$ builder.setCenterPanel(panel.getComponent())[ FD ]
Line_5 $$ final DialogBuilder builder = new DialogBuilder(project)-->Line_19 $$ builder.getDialogWrapper().close(DialogWrapper.OK_EXIT_CODE)[ FD ]
Line_27 $$ if (builder.show() == DialogWrapper.OK_EXIT_CODE) -->Line_28 $$ return injection[ CD ]
Line_21 $$ final Throwable cause = e.getCause()-->Line_22 $$ final String message = e.getMessage() + (cause != null ? "\n  " + cause.getMessage() : "")[ FD ]
Line_6 $$ LanguageInjectionSupport support = InjectorUtils.findInjectionSupport(injection.getSupportId())-->Line_7 $$ if (support instanceof AbstractLanguageInjectionSupport) [ FD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_12 $$ builder.setDimensionServiceKey("#org.intellij.plugins.intelliLang.inject.config.ui.BaseInjectionDialog")[ CD ]
Line_2 $$ protected static BaseInjection showDefaultInjectionUI(final Project project, BaseInjection injection) -->Line_13 $$ builder.setCenterPanel(panel.getComponent())[ CD ]
Line_5 $$ final DialogBuilder builder = new DialogBuilder(project)-->Line_15 $$ builder.setOkOperation(new Runnable() [ FD ]
