Line_23 $$ while (tok.hasMoreTokens()) -->Line_25 $$ if (token.length() > 0 && Character.isJavaIdentifierStart(token.charAt(0))) [ CD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_33 $$ if (t instanceof ClassNotFoundException) [ FD ]
Line_6 $$ Set<String> visitedClassNames = ContainerUtil.newHashSet()-->Line_10 $$ if (visitedClassNames.add(className) && PluginManagerCore.isPluginClass(className)) [ FD ]
Line_22 $$ StringTokenizer tok = new StringTokenizer(t.getMessage(), ".")-->Line_24 $$ String token = tok.nextToken()[ FD ]
Line_40 $$ if (t instanceof AbstractMethodError && t.getMessage() != null) -->Line_41 $$ String s = t.getMessage()[ CD ]
Line_40 $$ if (t instanceof AbstractMethodError && t.getMessage() != null) -->Line_53 $$ if (t instanceof ExtensionException) [ CD ]
Line_9 $$ String className = element.getClassName()-->Line_36 $$ if (PluginManager.isPluginClass(className)) [ FD ]
Line_42 $$ int pos = s.indexOf('(')-->Line_46 $$ if (pos >= 0) [ FD ]
Line_44 $$ s = s.substring(0, pos)-->Line_45 $$ pos = s.lastIndexOf('.')[ FD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_35 $$ String className = t.getMessage()[ FD ]
Line_26 $$ className += token-->Line_36 $$ if (PluginManager.isPluginClass(className)) [ FD ]
Line_20 $$ if (t.getMessage() != null) -->Line_23 $$ while (tok.hasMoreTokens()) [ CD ]
Line_34 $$ if (t.getMessage() != null) -->Line_35 $$ String className = t.getMessage()[ CD ]
Line_43 $$ if (pos >= 0) -->Line_46 $$ if (pos >= 0) [ CD ]
Line_9 $$ String className = element.getClassName()-->Line_30 $$ return PluginManager.getPluginByClassName(className)[ FD ]
Line_9 $$ String className = element.getClassName()-->Line_37 $$ return PluginManager.getPluginByClassName(className)[ FD ]
Line_43 $$ if (pos >= 0) -->Line_45 $$ pos = s.lastIndexOf('.')[ CD ]
Line_42 $$ int pos = s.indexOf('(')-->Line_45 $$ pos = s.lastIndexOf('.')[ FD ]
Line_3 $$ if (t instanceof PluginException) -->Line_4 $$ return ((PluginException) t).getPluginId()[ CD ]
Line_41 $$ String s = t.getMessage()-->Line_45 $$ pos = s.lastIndexOf('.')[ FD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_19 $$ if (t instanceof NoSuchMethodException) [ CD ]
Line_7 $$ for (StackTraceElement element : t.getStackTrace()) -->Line_9 $$ String className = element.getClassName()[ FD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_53 $$ if (t instanceof ExtensionException) [ FD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_22 $$ StringTokenizer tok = new StringTokenizer(t.getMessage(), ".")[ FD ]
Line_11 $$ PluginId id = PluginManagerCore.getPluginByClassName(className)-->Line_13 $$ LOG.debug(diagnosePluginDetection(className, id))[ FD ]
Line_29 $$ if (PluginManager.isPluginClass(className)) -->Line_30 $$ return PluginManager.getPluginByClassName(className)[ CD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_7 $$ for (StackTraceElement element : t.getStackTrace()) [ FD ]
Line_41 $$ String s = t.getMessage()-->Line_49 $$ return PluginManager.getPluginByClassName(s)[ FD ]
Line_42 $$ int pos = s.indexOf('(')-->Line_44 $$ s = s.substring(0, pos)[ FD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_41 $$ String s = t.getMessage()[ FD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_20 $$ if (t.getMessage() != null) [ FD ]
Line_9 $$ String className = element.getClassName()-->Line_56 $$ return PluginManager.getPluginByClassName(className)[ FD ]
Line_7 $$ for (StackTraceElement element : t.getStackTrace()) -->Line_8 $$ if (element != null) [ FD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_6 $$ Set<String> visitedClassNames = ContainerUtil.newHashSet()[ CD ]
Line_20 $$ if (t.getMessage() != null) -->Line_29 $$ if (PluginManager.isPluginClass(className)) [ CD ]
Line_9 $$ String className = element.getClassName()-->Line_55 $$ if (PluginManager.isPluginClass(className)) [ FD ]
Line_19 $$ if (t instanceof NoSuchMethodException) -->Line_20 $$ if (t.getMessage() != null) [ CD ]
Line_40 $$ if (t instanceof AbstractMethodError && t.getMessage() != null) -->Line_42 $$ int pos = s.indexOf('(')[ CD ]
Line_45 $$ pos = s.lastIndexOf('.')-->Line_46 $$ if (pos >= 0) [ FD ]
Line_44 $$ s = s.substring(0, pos)-->Line_49 $$ return PluginManager.getPluginByClassName(s)[ FD ]
Line_22 $$ StringTokenizer tok = new StringTokenizer(t.getMessage(), ".")-->Line_23 $$ while (tok.hasMoreTokens()) [ FD ]
Line_9 $$ String className = element.getClassName()-->Line_29 $$ if (PluginManager.isPluginClass(className)) [ FD ]
Line_10 $$ if (visitedClassNames.add(className) && PluginManagerCore.isPluginClass(className)) -->Line_11 $$ PluginId id = PluginManagerCore.getPluginByClassName(className)[ CD ]
Line_26 $$ className += token-->Line_55 $$ if (PluginManager.isPluginClass(className)) [ FD ]
Line_42 $$ int pos = s.indexOf('(')-->Line_43 $$ if (pos >= 0) [ FD ]
Line_34 $$ if (t.getMessage() != null) -->Line_36 $$ if (PluginManager.isPluginClass(className)) [ CD ]
Line_42 $$ int pos = s.indexOf('(')-->Line_47 $$ s = s.substring(0, pos)[ FD ]
Line_9 $$ String className = element.getClassName()-->Line_11 $$ PluginId id = PluginManagerCore.getPluginByClassName(className)[ FD ]
Line_41 $$ String s = t.getMessage()-->Line_44 $$ s = s.substring(0, pos)[ FD ]
Line_48 $$ if (PluginManager.isPluginClass(s)) -->Line_49 $$ return PluginManager.getPluginByClassName(s)[ CD ]
Line_55 $$ if (PluginManager.isPluginClass(className)) -->Line_56 $$ return PluginManager.getPluginByClassName(className)[ CD ]
Line_53 $$ if (t instanceof ExtensionException) -->Line_54 $$ String className = ((ExtensionException) t).getExtensionClass().getName()[ CD ]
Line_47 $$ s = s.substring(0, pos)-->Line_49 $$ return PluginManager.getPluginByClassName(s)[ FD ]
Line_46 $$ if (pos >= 0) -->Line_48 $$ if (PluginManager.isPluginClass(s)) [ CD ]
Line_40 $$ if (t instanceof AbstractMethodError && t.getMessage() != null) -->Line_43 $$ if (pos >= 0) [ CD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_59 $$ return null[ CD ]
Line_44 $$ s = s.substring(0, pos)-->Line_48 $$ if (PluginManager.isPluginClass(s)) [ FD ]
Line_9 $$ String className = element.getClassName()-->Line_26 $$ className += token[ FD ]
Line_23 $$ while (tok.hasMoreTokens()) -->Line_24 $$ String token = tok.nextToken()[ CD ]
Line_45 $$ pos = s.lastIndexOf('.')-->Line_47 $$ s = s.substring(0, pos)[ FD ]
Line_25 $$ if (token.length() > 0 && Character.isJavaIdentifierStart(token.charAt(0))) -->Line_26 $$ className += token[ CD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_3 $$ if (t instanceof PluginException) [ FD ]
Line_26 $$ className += token-->Line_29 $$ if (PluginManager.isPluginClass(className)) [ FD ]
Line_26 $$ className += token-->Line_37 $$ return PluginManager.getPluginByClassName(className)[ FD ]
Line_41 $$ String s = t.getMessage()-->Line_42 $$ int pos = s.indexOf('(')[ FD ]
Line_10 $$ if (visitedClassNames.add(className) && PluginManagerCore.isPluginClass(className)) -->Line_12 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_36 $$ if (PluginManager.isPluginClass(className)) -->Line_37 $$ return PluginManager.getPluginByClassName(className)[ CD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_19 $$ if (t instanceof NoSuchMethodException) [ FD ]
Line_8 $$ if (element != null) -->Line_10 $$ if (visitedClassNames.add(className) && PluginManagerCore.isPluginClass(className)) [ CD ]
Line_12 $$ if (LOG.isDebugEnabled()) -->Line_13 $$ LOG.debug(diagnosePluginDetection(className, id))[ CD ]
Line_10 $$ if (visitedClassNames.add(className) && PluginManagerCore.isPluginClass(className)) -->Line_15 $$ return id[ CD ]
Line_33 $$ if (t instanceof ClassNotFoundException) -->Line_34 $$ if (t.getMessage() != null) [ CD ]
Line_33 $$ if (t instanceof ClassNotFoundException) -->Line_40 $$ if (t instanceof AbstractMethodError && t.getMessage() != null) [ CD ]
Line_24 $$ String token = tok.nextToken()-->Line_26 $$ className += token[ FD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_3 $$ if (t instanceof PluginException) [ CD ]
Line_24 $$ String token = tok.nextToken()-->Line_25 $$ if (token.length() > 0 && Character.isJavaIdentifierStart(token.charAt(0))) [ FD ]
Line_46 $$ if (pos >= 0) -->Line_47 $$ s = s.substring(0, pos)[ CD ]
Line_20 $$ if (t.getMessage() != null) -->Line_22 $$ StringTokenizer tok = new StringTokenizer(t.getMessage(), ".")[ CD ]
Line_9 $$ String className = element.getClassName()-->Line_13 $$ LOG.debug(diagnosePluginDetection(className, id))[ FD ]
Line_47 $$ s = s.substring(0, pos)-->Line_48 $$ if (PluginManager.isPluginClass(s)) [ FD ]
Line_19 $$ if (t instanceof NoSuchMethodException) -->Line_33 $$ if (t instanceof ClassNotFoundException) [ CD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_34 $$ if (t.getMessage() != null) [ FD ]
Line_53 $$ if (t instanceof ExtensionException) -->Line_55 $$ if (PluginManager.isPluginClass(className)) [ CD ]
Line_26 $$ className += token-->Line_30 $$ return PluginManager.getPluginByClassName(className)[ FD ]
Line_2 $$ public static PluginId findPluginId(Throwable t) -->Line_40 $$ if (t instanceof AbstractMethodError && t.getMessage() != null) [ FD ]
Line_26 $$ className += token-->Line_56 $$ return PluginManager.getPluginByClassName(className)[ FD ]
Line_43 $$ if (pos >= 0) -->Line_44 $$ s = s.substring(0, pos)[ CD ]
Line_9 $$ String className = element.getClassName()-->Line_10 $$ if (visitedClassNames.add(className) && PluginManagerCore.isPluginClass(className)) [ FD ]
Line_41 $$ String s = t.getMessage()-->Line_47 $$ s = s.substring(0, pos)[ FD ]
Line_8 $$ if (element != null) -->Line_9 $$ String className = element.getClassName()[ CD ]
Line_44 $$ s = s.substring(0, pos)-->Line_47 $$ s = s.substring(0, pos)[ FD ]
Line_41 $$ String s = t.getMessage()-->Line_48 $$ if (PluginManager.isPluginClass(s)) [ FD ]
