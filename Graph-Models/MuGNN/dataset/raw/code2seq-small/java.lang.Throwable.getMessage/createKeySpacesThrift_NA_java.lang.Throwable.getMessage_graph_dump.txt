Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_8 $$ String comparator = settings.columns.comparator[ CD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_6 $$ if (compression != null)[ CD ]
Line_20 $$ if (!compactionStrategyOptions.isEmpty()) -->Line_22 $$ counterCfDef.setCompaction_strategy_options(compactionStrategyOptions)[ CD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_4 $$ CfDef standardCfDef = new CfDef(keyspace, "standard1")[ CD ]
Line_8 $$ String comparator = settings.columns.comparator-->Line_9 $$ standardCfDef.setComparator_type(comparator).setDefault_validation_class(DEFAULT_VALIDATOR).setCompression_options(compressionOptions)[ FD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_11 $$ CfDef counterCfDef = new CfDef(keyspace, "counter1").setComparator_type(comparator).setDefault_validation_class("CounterColumnType").setCompression_options(compressionOptions)[ CD ]
Line_8 $$ String comparator = settings.columns.comparator-->Line_11 $$ CfDef counterCfDef = new CfDef(keyspace, "counter1").setComparator_type(comparator).setDefault_validation_class("CounterColumnType").setCompression_options(compressionOptions)[ FD ]
Line_17 $$ if (compactionStrategy != null) -->Line_19 $$ counterCfDef.setCompaction_strategy(compactionStrategy)[ CD ]
Line_4 $$ CfDef standardCfDef = new CfDef(keyspace, "standard1")-->Line_10 $$ standardCfDef.addToColumn_metadata(new ColumnDef(settings.columns.names.get(i), "BytesType"))[ FD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_25 $$ ksdef.setCf_defs(new ArrayList(Arrays.asList(standardCfDef, counterCfDef)))[ CD ]
Line_20 $$ if (!compactionStrategyOptions.isEmpty()) -->Line_21 $$ standardCfDef.setCompaction_strategy_options(compactionStrategyOptions)[ CD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_10 $$ for (int i = 0; i < settings.columns.names.size(); i++) standardCfDef.addToColumn_metadata(new ColumnDef(settings.columns.names.get(i), "BytesType"))[ CD ]
Line_5 $$ Map<String, String> compressionOptions = new HashMap()-->Line_11 $$ CfDef counterCfDef = new CfDef(keyspace, "counter1").setComparator_type(comparator).setDefault_validation_class("CounterColumnType").setCompression_options(compressionOptions)[ FD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_14 $$ if (!replicationStrategyOptions.isEmpty()) [ CD ]
Line_3 $$ KsDef ksdef = new KsDef()-->Line_28 $$ client.system_add_keyspace(ksdef)[ FD ]
Line_6 $$ if (compression != null)-->Line_7 $$ compressionOptions.put("sstable_compression", compression)[ CD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_26 $$ Cassandra.Client client = settings.getRawThriftClient(false)[ CD ]
Line_14 $$ if (!replicationStrategyOptions.isEmpty()) -->Line_15 $$ ksdef.setStrategy_options(replicationStrategyOptions)[ CD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_5 $$ Map<String, String> compressionOptions = new HashMap()[ CD ]
Line_4 $$ CfDef standardCfDef = new CfDef(keyspace, "standard1")-->Line_21 $$ standardCfDef.setCompaction_strategy_options(compactionStrategyOptions)[ FD ]
Line_26 $$ Cassandra.Client client = settings.getRawThriftClient(false)-->Line_29 $$ client.set_keyspace(keyspace)[ FD ]
Line_3 $$ KsDef ksdef = new KsDef()-->Line_25 $$ ksdef.setCf_defs(new ArrayList(Arrays.asList(standardCfDef, counterCfDef)))[ FD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_3 $$ KsDef ksdef = new KsDef()[ CD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_26 $$ Cassandra.Client client = settings.getRawThriftClient(false)[ FD ]
Line_4 $$ CfDef standardCfDef = new CfDef(keyspace, "standard1")-->Line_9 $$ standardCfDef.setComparator_type(comparator).setDefault_validation_class(DEFAULT_VALIDATOR).setCompression_options(compressionOptions)[ FD ]
Line_3 $$ KsDef ksdef = new KsDef()-->Line_15 $$ ksdef.setStrategy_options(replicationStrategyOptions)[ FD ]
Line_5 $$ Map<String, String> compressionOptions = new HashMap()-->Line_9 $$ standardCfDef.setComparator_type(comparator).setDefault_validation_class(DEFAULT_VALIDATOR).setCompression_options(compressionOptions)[ FD ]
Line_26 $$ Cassandra.Client client = settings.getRawThriftClient(false)-->Line_28 $$ client.system_add_keyspace(ksdef)[ FD ]
Line_11 $$ CfDef counterCfDef = new CfDef(keyspace, "counter1").setComparator_type(comparator).setDefault_validation_class("CounterColumnType").setCompression_options(compressionOptions)-->Line_22 $$ counterCfDef.setCompaction_strategy_options(compactionStrategyOptions)[ FD ]
Line_17 $$ if (compactionStrategy != null) -->Line_18 $$ standardCfDef.setCompaction_strategy(compactionStrategy)[ CD ]
Line_3 $$ KsDef ksdef = new KsDef()-->Line_12 $$ ksdef.setName(keyspace)[ FD ]
Line_4 $$ CfDef standardCfDef = new CfDef(keyspace, "standard1")-->Line_25 $$ ksdef.setCf_defs(new ArrayList(Arrays.asList(standardCfDef, counterCfDef)))[ FD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_9 $$ standardCfDef.setComparator_type(comparator).setDefault_validation_class(DEFAULT_VALIDATOR).setCompression_options(compressionOptions)[ CD ]
Line_4 $$ CfDef standardCfDef = new CfDef(keyspace, "standard1")-->Line_18 $$ standardCfDef.setCompaction_strategy(compactionStrategy)[ FD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_17 $$ if (compactionStrategy != null) [ CD ]
Line_5 $$ Map<String, String> compressionOptions = new HashMap()-->Line_7 $$ compressionOptions.put("sstable_compression", compression)[ FD ]
Line_11 $$ CfDef counterCfDef = new CfDef(keyspace, "counter1").setComparator_type(comparator).setDefault_validation_class("CounterColumnType").setCompression_options(compressionOptions)-->Line_25 $$ ksdef.setCf_defs(new ArrayList(Arrays.asList(standardCfDef, counterCfDef)))[ FD ]
Line_17 $$ if (compactionStrategy != null) -->Line_20 $$ if (!compactionStrategyOptions.isEmpty()) [ CD ]
Line_3 $$ KsDef ksdef = new KsDef()-->Line_13 $$ ksdef.setStrategy_class(replicationStrategy)[ FD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_12 $$ ksdef.setName(keyspace)[ CD ]
Line_2 $$ public void createKeySpacesThrift(StressSettings settings) -->Line_13 $$ ksdef.setStrategy_class(replicationStrategy)[ CD ]
Line_11 $$ CfDef counterCfDef = new CfDef(keyspace, "counter1").setComparator_type(comparator).setDefault_validation_class("CounterColumnType").setCompression_options(compressionOptions)-->Line_19 $$ counterCfDef.setCompaction_strategy(compactionStrategy)[ FD ]
