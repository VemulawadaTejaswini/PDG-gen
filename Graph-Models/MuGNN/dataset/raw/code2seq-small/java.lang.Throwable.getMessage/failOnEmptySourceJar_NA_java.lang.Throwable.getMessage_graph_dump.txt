Line_2 $$ public void failOnEmptySourceJar() throws Exception -->Line_3 $$ final File sourceJar = new File(myOlderDir, "lib/empty.jar")[ CD ]
Line_3 $$ final File sourceJar = new File(myOlderDir, "lib/empty.jar")-->Line_5 $$ sourceJar.delete()[ FD ]
Line_8 $$ final File targetJar = new File(myNewerDir, "lib/empty.jar")-->Line_17 $$ targetJar.delete()[ FD ]
Line_3 $$ final File sourceJar = new File(myOlderDir, "lib/empty.jar")-->Line_4 $$ if (sourceJar.exists())[ FD ]
Line_2 $$ public void failOnEmptySourceJar() throws Exception -->Line_6 $$ assertTrue(sourceJar.createNewFile())[ CD ]
Line_3 $$ final File sourceJar = new File(myOlderDir, "lib/empty.jar")-->Line_6 $$ assertTrue(sourceJar.createNewFile())[ FD ]
Line_4 $$ if (sourceJar.exists())-->Line_5 $$ sourceJar.delete()[ CD ]
Line_8 $$ final File targetJar = new File(myNewerDir, "lib/empty.jar")-->Line_9 $$ FileUtil.copy(new File(myNewerDir, "lib/annotations.jar"), targetJar)[ FD ]
Line_14 $$ final String reason = e.getMessage()-->Line_15 $$ assertEquals("Corrupted source file: " + sourceJar, reason)[ FD ]
Line_2 $$ public void failOnEmptySourceJar() throws Exception -->Line_4 $$ if (sourceJar.exists())[ CD ]
Line_3 $$ final File sourceJar = new File(myOlderDir, "lib/empty.jar")-->Line_20 $$ sourceJar.delete()[ FD ]
