Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)-->Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)[ FD ]
Line_26 $$ locator = PoshiRunnerVariablesUtil.replaceCommandVars(locator)-->Line_29 $$ varValue = liferaySelenium.getElementValue(locator)[ FD ]
Line_20 $$ if (element.attributeValue("locator") != null) -->Line_37 $$ if (element.attributeValue("method") != null) [ CD ]
Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)-->Line_59 $$ if (matcher.find()) [ FD ]
Line_28 $$ if (locator.contains("/input")) -->Line_31 $$ varValue = liferaySelenium.getElementText(locator)[ CD ]
Line_29 $$ varValue = liferaySelenium.getElementValue(locator)-->Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)[ FD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_52 $$ varValue = ""[ FD ]
Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))-->Line_68 $$ varValue = String.valueOf(variable.length())[ FD ]
Line_38 $$ String classCommandName = PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("method"))-->Line_40 $$ classCommandName = classCommandName.replace("TestPropsUtil", "PropsUtil")[ FD ]
Line_4 $$ if (updateLoggerStatus) -->Line_5 $$ XMLLoggerHandler.updateStatus(element, "pending")[ CD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_99 $$ XMLLoggerHandler.updateStatus(element, "pass")[ FD ]
Line_20 $$ if (element.attributeValue("locator") != null) -->Line_26 $$ locator = PoshiRunnerVariablesUtil.replaceCommandVars(locator)[ CD ]
Line_86 $$ if (!PoshiRunnerVariablesUtil.containsKeyInStaticMap(varName)) -->Line_87 $$ PoshiRunnerVariablesUtil.putIntoStaticMap(varName, replacedVarValue)[ CD ]
Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))-->Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)[ FD ]
Line_49 $$ if (element.attributeValue("property-value") != null) -->Line_51 $$ if (varValue == null) [ CD ]
Line_29 $$ varValue = liferaySelenium.getElementValue(locator)-->Line_68 $$ varValue = String.valueOf(variable.length())[ FD ]
Line_98 $$ if (updateLoggerStatus) -->Line_99 $$ XMLLoggerHandler.updateStatus(element, "pass")[ CD ]
Line_20 $$ if (element.attributeValue("locator") != null) -->Line_25 $$ LiferaySelenium liferaySelenium = SeleniumUtil.getSelenium()[ CD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_93 $$ if (commandVar && currentFilePath.contains(".testcase")) [ FD ]
Line_52 $$ varValue = ""-->Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)[ FD ]
Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))-->Line_51 $$ if (varValue == null) [ FD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_51 $$ if (varValue == null) [ FD ]
Line_52 $$ varValue = ""-->Line_55 $$ varValue = element.getText()[ FD ]
Line_11 $$ LiferaySelenium liferaySelenium = SeleniumUtil.getSelenium()-->Line_31 $$ varValue = liferaySelenium.getElementText(locator)[ FD ]
Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)-->Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)[ FD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)[ FD ]
Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)-->Line_55 $$ varValue = element.getText()[ FD ]
Line_31 $$ varValue = liferaySelenium.getElementText(locator)-->Line_52 $$ varValue = ""[ FD ]
Line_10 $$ if (element.attributeValue("attribute") != null) -->Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)[ CD ]
Line_38 $$ String classCommandName = PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("method"))-->Line_39 $$ if (classCommandName.startsWith("TestPropsUtil")) [ FD ]
Line_46 $$ Throwable throwable = e.getCause()-->Line_47 $$ throw new Exception(throwable.getMessage(), e)[ FD ]
Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)-->Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))[ FD ]
Line_83 $$ if (commandVar) -->Line_84 $$ PoshiRunnerVariablesUtil.putIntoCommandMap(varName, replacedVarValue)[ CD ]
Line_59 $$ if (matcher.find()) -->Line_62 $$ if (method.equals("length()")) [ CD ]
Line_51 $$ if (varValue == null) -->Line_52 $$ varValue = ""[ CD ]
Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)-->Line_75 $$ Matcher matcher = _variablePattern.matcher(replacedVarValue)[ FD ]
Line_7 $$ String varName = element.attributeValue("name")-->Line_84 $$ PoshiRunnerVariablesUtil.putIntoCommandMap(varName, replacedVarValue)[ FD ]
Line_85 $$ if ((staticValue != null) && staticValue.equals("true")) -->Line_86 $$ if (!PoshiRunnerVariablesUtil.containsKeyInStaticMap(varName)) [ CD ]
Line_29 $$ varValue = liferaySelenium.getElementValue(locator)-->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ FD ]
Line_11 $$ LiferaySelenium liferaySelenium = SeleniumUtil.getSelenium()-->Line_29 $$ varValue = liferaySelenium.getElementValue(locator)[ FD ]
Line_31 $$ varValue = liferaySelenium.getElementText(locator)-->Line_55 $$ varValue = element.getText()[ FD ]
Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)-->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ FD ]
Line_15 $$ locator = PoshiRunnerContext.getPathLocator(locator)-->Line_28 $$ if (locator.contains("/input")) [ FD ]
Line_13 $$ String locator = element.attributeValue("locator")-->Line_28 $$ if (locator.contains("/input")) [ FD ]
Line_7 $$ String varName = element.attributeValue("name")-->Line_87 $$ PoshiRunnerVariablesUtil.putIntoStaticMap(varName, replacedVarValue)[ FD ]
Line_13 $$ String locator = element.attributeValue("locator")-->Line_29 $$ varValue = liferaySelenium.getElementValue(locator)[ FD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_31 $$ varValue = liferaySelenium.getElementText(locator)[ FD ]
Line_29 $$ varValue = liferaySelenium.getElementValue(locator)-->Line_31 $$ varValue = liferaySelenium.getElementText(locator)[ FD ]
Line_38 $$ String classCommandName = PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("method"))-->Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_55 $$ varValue = element.getText()[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_49 $$ if (element.attributeValue("property-value") != null) [ FD ]
Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))-->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_4 $$ if (updateLoggerStatus) [ CD ]
Line_68 $$ varValue = String.valueOf(variable.length())-->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ FD ]
Line_10 $$ if (element.attributeValue("attribute") != null) -->Line_13 $$ String locator = element.attributeValue("locator")[ CD ]
Line_22 $$ if (locator.contains("#")) -->Line_23 $$ locator = PoshiRunnerContext.getPathLocator(locator)[ CD ]
Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)-->Line_31 $$ varValue = liferaySelenium.getElementText(locator)[ FD ]
Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))-->Line_68 $$ varValue = String.valueOf(variable.length())[ FD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_9 $$ if (varValue == null) [ FD ]
Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)-->Line_29 $$ varValue = liferaySelenium.getElementValue(locator)[ FD ]
Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)-->Line_51 $$ if (varValue == null) [ FD ]
Line_13 $$ String locator = element.attributeValue("locator")-->Line_23 $$ locator = PoshiRunnerContext.getPathLocator(locator)[ FD ]
Line_13 $$ String locator = element.attributeValue("locator")-->Line_14 $$ if (locator.contains("#")) [ FD ]
Line_29 $$ varValue = liferaySelenium.getElementValue(locator)-->Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_37 $$ if (element.attributeValue("method") != null) [ FD ]
Line_15 $$ locator = PoshiRunnerContext.getPathLocator(locator)-->Line_26 $$ locator = PoshiRunnerVariablesUtil.replaceCommandVars(locator)[ FD ]
Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)-->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ FD ]
Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)-->Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_18 $$ if ((element.attributeValue("group") != null) && (element.attributeValue("input") != null) && (element.attributeValue("pattern") != null)) [ FD ]
Line_31 $$ varValue = liferaySelenium.getElementText(locator)-->Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)[ FD ]
Line_82 $$ String staticValue = element.attributeValue("static")-->Line_85 $$ if ((staticValue != null) && staticValue.equals("true")) [ FD ]
Line_40 $$ classCommandName = classCommandName.replace("TestPropsUtil", "PropsUtil")-->Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)[ FD ]
Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))-->Line_55 $$ varValue = element.getText()[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_93 $$ if (commandVar && currentFilePath.contains(".testcase")) [ CD ]
Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))-->Line_52 $$ varValue = ""[ FD ]
Line_37 $$ if (element.attributeValue("method") != null) -->Line_38 $$ String classCommandName = PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("method"))[ CD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_83 $$ if (commandVar) [ CD ]
Line_9 $$ if (varValue == null) -->Line_59 $$ if (matcher.find()) [ CD ]
Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)-->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ FD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))[ FD ]
Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))-->Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)[ FD ]
Line_14 $$ if (locator.contains("#")) -->Line_15 $$ locator = PoshiRunnerContext.getPathLocator(locator)[ CD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_34 $$ XMLLoggerHandler.updateStatus(element, "fail")[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_38 $$ String classCommandName = PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("method"))[ FD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ FD ]
Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)-->Line_61 $$ String variable = matcher.group(1)[ FD ]
Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)-->Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_7 $$ String varName = element.attributeValue("name")[ FD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))[ FD ]
Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))-->Line_55 $$ varValue = element.getText()[ FD ]
Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))-->Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ CD ]
Line_13 $$ String locator = element.attributeValue("locator")-->Line_15 $$ locator = PoshiRunnerContext.getPathLocator(locator)[ FD ]
Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)-->Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))[ FD ]
Line_92 $$ String currentFilePath = PoshiRunnerStackTraceUtil.getCurrentFilePath()-->Line_93 $$ if (commandVar && currentFilePath.contains(".testcase")) [ FD ]
Line_52 $$ varValue = ""-->Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)[ FD ]
Line_31 $$ varValue = liferaySelenium.getElementText(locator)-->Line_51 $$ if (varValue == null) [ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_78 $$ XMLLoggerHandler.updateStatus(element, "pass")[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_20 $$ if (element.attributeValue("locator") != null) [ FD ]
Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))-->Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)[ FD ]
Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)-->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ FD ]
Line_13 $$ String locator = element.attributeValue("locator")-->Line_31 $$ varValue = liferaySelenium.getElementText(locator)[ FD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)[ FD ]
Line_20 $$ if (element.attributeValue("locator") != null) -->Line_21 $$ String locator = element.attributeValue("locator")[ CD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_7 $$ String varName = element.attributeValue("name")[ CD ]
Line_11 $$ LiferaySelenium liferaySelenium = SeleniumUtil.getSelenium()-->Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)[ FD ]
Line_7 $$ String varName = element.attributeValue("name")-->Line_95 $$ PoshiRunnerVariablesUtil.putIntoStaticMap(varName, replacedVarValue)[ FD ]
Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)-->Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)[ FD ]
Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) -->Line_80 $$ return[ CD ]
Line_23 $$ locator = PoshiRunnerContext.getPathLocator(locator)-->Line_31 $$ varValue = liferaySelenium.getElementText(locator)[ FD ]
Line_9 $$ if (varValue == null) -->Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)[ CD ]
Line_64 $$ variable = PoshiRunnerVariablesUtil.getValueFromCommandMap(variable)-->Line_68 $$ varValue = String.valueOf(variable.length())[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_45 $$ XMLLoggerHandler.updateStatus(element, "fail")[ FD ]
Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)-->Line_84 $$ PoshiRunnerVariablesUtil.putIntoCommandMap(varName, replacedVarValue)[ FD ]
Line_10 $$ if (element.attributeValue("attribute") != null) -->Line_11 $$ LiferaySelenium liferaySelenium = SeleniumUtil.getSelenium()[ CD ]
Line_26 $$ locator = PoshiRunnerVariablesUtil.replaceCommandVars(locator)-->Line_28 $$ if (locator.contains("/input")) [ FD ]
Line_10 $$ if (element.attributeValue("attribute") != null) -->Line_14 $$ if (locator.contains("#")) [ CD ]
Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)-->Line_55 $$ varValue = element.getText()[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_12 $$ String attribute = element.attributeValue("attribute")[ FD ]
Line_29 $$ varValue = liferaySelenium.getElementValue(locator)-->Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)[ FD ]
Line_31 $$ varValue = liferaySelenium.getElementText(locator)-->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ FD ]
Line_94 $$ if (PoshiRunnerVariablesUtil.containsKeyInStaticMap(varName)) -->Line_95 $$ PoshiRunnerVariablesUtil.putIntoStaticMap(varName, replacedVarValue)[ CD ]
Line_13 $$ String locator = element.attributeValue("locator")-->Line_26 $$ locator = PoshiRunnerVariablesUtil.replaceCommandVars(locator)[ FD ]
Line_29 $$ varValue = liferaySelenium.getElementValue(locator)-->Line_52 $$ varValue = ""[ FD ]
Line_37 $$ if (element.attributeValue("method") != null) -->Line_39 $$ if (classCommandName.startsWith("TestPropsUtil")) [ CD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)[ FD ]
Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)-->Line_51 $$ if (varValue == null) [ FD ]
Line_55 $$ varValue = element.getText()-->Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)[ FD ]
Line_10 $$ if (element.attributeValue("attribute") != null) -->Line_12 $$ String attribute = element.attributeValue("attribute")[ CD ]
Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)-->Line_52 $$ varValue = ""[ FD ]
Line_61 $$ String variable = matcher.group(1)-->Line_64 $$ variable = PoshiRunnerVariablesUtil.getValueFromCommandMap(variable)[ FD ]
Line_23 $$ locator = PoshiRunnerContext.getPathLocator(locator)-->Line_28 $$ if (locator.contains("/input")) [ FD ]
Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)-->Line_68 $$ varValue = String.valueOf(variable.length())[ FD ]
Line_83 $$ if (commandVar) -->Line_85 $$ if ((staticValue != null) && staticValue.equals("true")) [ CD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_21 $$ String locator = element.attributeValue("locator")[ FD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_55 $$ varValue = element.getText()[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_10 $$ if (element.attributeValue("attribute") != null) [ FD ]
Line_26 $$ locator = PoshiRunnerVariablesUtil.replaceCommandVars(locator)-->Line_31 $$ varValue = liferaySelenium.getElementText(locator)[ FD ]
Line_37 $$ if (element.attributeValue("method") != null) -->Line_49 $$ if (element.attributeValue("property-value") != null) [ CD ]
Line_52 $$ varValue = ""-->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ FD ]
Line_28 $$ if (locator.contains("/input")) -->Line_29 $$ varValue = liferaySelenium.getElementValue(locator)[ CD ]
Line_15 $$ locator = PoshiRunnerContext.getPathLocator(locator)-->Line_22 $$ if (locator.contains("#")) [ FD ]
Line_17 $$ varValue = liferaySelenium.getAttribute(locator + "@" + attribute)-->Line_52 $$ varValue = ""[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_3 $$ PoshiRunnerStackTraceUtil.setCurrentElement(element)[ FD ]
Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))-->Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)[ FD ]
Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))-->Line_31 $$ varValue = liferaySelenium.getElementText(locator)[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_92 $$ String currentFilePath = PoshiRunnerStackTraceUtil.getCurrentFilePath()[ CD ]
Line_62 $$ if (method.equals("length()")) -->Line_63 $$ if (PoshiRunnerVariablesUtil.containsKeyInCommandMap(variable)) [ CD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_29 $$ varValue = liferaySelenium.getElementValue(locator)[ FD ]
Line_55 $$ varValue = element.getText()-->Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)[ FD ]
Line_39 $$ if (classCommandName.startsWith("TestPropsUtil")) -->Line_40 $$ classCommandName = classCommandName.replace("TestPropsUtil", "PropsUtil")[ CD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_82 $$ String staticValue = element.attributeValue("static")[ FD ]
Line_20 $$ if (element.attributeValue("locator") != null) -->Line_22 $$ if (locator.contains("#")) [ CD ]
Line_23 $$ locator = PoshiRunnerContext.getPathLocator(locator)-->Line_26 $$ locator = PoshiRunnerVariablesUtil.replaceCommandVars(locator)[ FD ]
Line_61 $$ String variable = matcher.group(1)-->Line_68 $$ varValue = String.valueOf(variable.length())[ FD ]
Line_31 $$ varValue = liferaySelenium.getElementText(locator)-->Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)[ CD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_3 $$ PoshiRunnerStackTraceUtil.setCurrentElement(element)[ CD ]
Line_7 $$ String varName = element.attributeValue("name")-->Line_86 $$ if (!PoshiRunnerVariablesUtil.containsKeyInStaticMap(varName)) [ FD ]
Line_55 $$ varValue = element.getText()-->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ FD ]
Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)-->Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))[ FD ]
Line_23 $$ locator = PoshiRunnerContext.getPathLocator(locator)-->Line_29 $$ varValue = liferaySelenium.getElementValue(locator)[ FD ]
Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)-->Line_90 $$ PoshiRunnerVariablesUtil.putIntoExecuteMap(varName, replacedVarValue)[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_98 $$ if (updateLoggerStatus) [ CD ]
Line_63 $$ if (PoshiRunnerVariablesUtil.containsKeyInCommandMap(variable)) -->Line_64 $$ variable = PoshiRunnerVariablesUtil.getValueFromCommandMap(variable)[ CD ]
Line_68 $$ varValue = String.valueOf(variable.length())-->Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)[ FD ]
Line_15 $$ locator = PoshiRunnerContext.getPathLocator(locator)-->Line_31 $$ varValue = liferaySelenium.getElementText(locator)[ FD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)[ FD ]
Line_18 $$ if ((element.attributeValue("group") != null) && (element.attributeValue("input") != null) && (element.attributeValue("pattern") != null)) -->Line_20 $$ if (element.attributeValue("locator") != null) [ CD ]
Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)-->Line_95 $$ PoshiRunnerVariablesUtil.putIntoStaticMap(varName, replacedVarValue)[ FD ]
Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))-->Line_29 $$ varValue = liferaySelenium.getElementValue(locator)[ FD ]
Line_29 $$ varValue = liferaySelenium.getElementValue(locator)-->Line_51 $$ if (varValue == null) [ FD ]
Line_31 $$ varValue = liferaySelenium.getElementText(locator)-->Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)[ FD ]
Line_15 $$ locator = PoshiRunnerContext.getPathLocator(locator)-->Line_23 $$ locator = PoshiRunnerContext.getPathLocator(locator)[ FD ]
Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))-->Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) [ FD ]
Line_15 $$ locator = PoshiRunnerContext.getPathLocator(locator)-->Line_29 $$ varValue = liferaySelenium.getElementValue(locator)[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_9 $$ if (varValue == null) [ CD ]
Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))-->Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))[ FD ]
Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))-->Line_52 $$ varValue = ""[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_8 $$ String varValue = element.attributeValue("value")[ CD ]
Line_85 $$ if ((staticValue != null) && staticValue.equals("true")) -->Line_90 $$ PoshiRunnerVariablesUtil.putIntoExecuteMap(varName, replacedVarValue)[ CD ]
Line_7 $$ String varName = element.attributeValue("name")-->Line_94 $$ if (PoshiRunnerVariablesUtil.containsKeyInStaticMap(varName)) [ FD ]
Line_7 $$ String varName = element.attributeValue("name")-->Line_90 $$ PoshiRunnerVariablesUtil.putIntoExecuteMap(varName, replacedVarValue)[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_5 $$ XMLLoggerHandler.updateStatus(element, "pending")[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_75 $$ Matcher matcher = _variablePattern.matcher(replacedVarValue)[ CD ]
Line_49 $$ if (element.attributeValue("property-value") != null) -->Line_55 $$ varValue = element.getText()[ CD ]
Line_58 $$ Matcher matcher = _variableMethodPattern.matcher(varValue)-->Line_60 $$ String method = matcher.group(2)[ FD ]
Line_13 $$ String locator = element.attributeValue("locator")-->Line_22 $$ if (locator.contains("#")) [ FD ]
Line_29 $$ varValue = liferaySelenium.getElementValue(locator)-->Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_8 $$ String varValue = element.attributeValue("value")[ FD ]
Line_29 $$ varValue = liferaySelenium.getElementValue(locator)-->Line_55 $$ varValue = element.getText()[ FD ]
Line_8 $$ String varValue = element.attributeValue("value")-->Line_68 $$ varValue = String.valueOf(variable.length())[ FD ]
Line_10 $$ if (element.attributeValue("attribute") != null) -->Line_18 $$ if ((element.attributeValue("group") != null) && (element.attributeValue("input") != null) && (element.attributeValue("pattern") != null)) [ CD ]
Line_43 $$ varValue = PoshiRunnerGetterUtil.getVarMethodValue(classCommandName)-->Line_68 $$ varValue = String.valueOf(variable.length())[ FD ]
Line_49 $$ if (element.attributeValue("property-value") != null) -->Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))[ CD ]
Line_55 $$ varValue = element.getText()-->Line_68 $$ varValue = String.valueOf(variable.length())[ FD ]
Line_74 $$ String replacedVarValue = PoshiRunnerVariablesUtil.replaceCommandVars(varValue)-->Line_87 $$ PoshiRunnerVariablesUtil.putIntoStaticMap(varName, replacedVarValue)[ FD ]
Line_59 $$ if (matcher.find()) -->Line_61 $$ String variable = matcher.group(1)[ CD ]
Line_77 $$ if (updateLoggerStatus) -->Line_78 $$ XMLLoggerHandler.updateStatus(element, "pass")[ CD ]
Line_31 $$ varValue = liferaySelenium.getElementText(locator)-->Line_68 $$ varValue = String.valueOf(variable.length())[ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_82 $$ String staticValue = element.attributeValue("static")[ CD ]
Line_93 $$ if (commandVar && currentFilePath.contains(".testcase")) -->Line_94 $$ if (PoshiRunnerVariablesUtil.containsKeyInStaticMap(varName)) [ CD ]
Line_18 $$ if ((element.attributeValue("group") != null) && (element.attributeValue("input") != null) && (element.attributeValue("pattern") != null)) -->Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))[ CD ]
Line_59 $$ if (matcher.find()) -->Line_60 $$ String method = matcher.group(2)[ CD ]
Line_19 $$ varValue = RegexUtil.replace(PoshiRunnerVariablesUtil.replaceCommandVars(element.attributeValue("input")), element.attributeValue("pattern"), element.attributeValue("group"))-->Line_51 $$ if (varValue == null) [ FD ]
Line_52 $$ varValue = ""-->Line_68 $$ varValue = String.valueOf(variable.length())[ FD ]
Line_61 $$ String variable = matcher.group(1)-->Line_63 $$ if (PoshiRunnerVariablesUtil.containsKeyInCommandMap(variable)) [ FD ]
Line_2 $$ public static void runVarElement(Element element, boolean commandVar, boolean updateLoggerStatus) throws Exception -->Line_13 $$ String locator = element.attributeValue("locator")[ FD ]
Line_9 $$ if (varValue == null) -->Line_10 $$ if (element.attributeValue("attribute") != null) [ CD ]
Line_62 $$ if (method.equals("length()")) -->Line_68 $$ varValue = String.valueOf(variable.length())[ CD ]
Line_76 $$ if (matcher.matches() && replacedVarValue.equals(varValue)) -->Line_77 $$ if (updateLoggerStatus) [ CD ]
Line_31 $$ varValue = liferaySelenium.getElementText(locator)-->Line_50 $$ varValue = PropsUtil.get(element.attributeValue("property-value"))[ FD ]
Line_60 $$ String method = matcher.group(2)-->Line_62 $$ if (method.equals("length()")) [ FD ]
