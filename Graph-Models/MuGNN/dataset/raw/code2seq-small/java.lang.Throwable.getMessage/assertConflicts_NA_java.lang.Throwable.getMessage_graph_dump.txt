Line_4 $$ docMapper = parser.parse("type", docMapper.mappingSource())-->Line_9 $$ docMapper.merge(parser.parse("type", new CompressedXContent(mapping2)).mapping(), false)[ FD ]
Line_2 $$ void assertConflicts(String mapping1, String mapping2, DocumentMapperParser parser, String... conflicts) throws IOException -->Line_9 $$ docMapper.merge(parser.parse("type", new CompressedXContent(mapping2)).mapping(), false)[ FD ]
Line_3 $$ DocumentMapper docMapper = parser.parse("type", new CompressedXContent(mapping1))-->Line_4 $$ docMapper = parser.parse("type", docMapper.mappingSource())[ FD ]
Line_3 $$ DocumentMapper docMapper = parser.parse("type", new CompressedXContent(mapping1))-->Line_6 $$ docMapper.merge(parser.parse("type", new CompressedXContent(mapping2)).mapping(), false)[ FD ]
Line_5 $$ if (conflicts.length == 0) -->Line_6 $$ docMapper.merge(parser.parse("type", new CompressedXContent(mapping2)).mapping(), false)[ CD ]
Line_3 $$ DocumentMapper docMapper = parser.parse("type", new CompressedXContent(mapping1))-->Line_9 $$ docMapper.merge(parser.parse("type", new CompressedXContent(mapping2)).mapping(), false)[ FD ]
Line_2 $$ void assertConflicts(String mapping1, String mapping2, DocumentMapperParser parser, String... conflicts) throws IOException -->Line_3 $$ DocumentMapper docMapper = parser.parse("type", new CompressedXContent(mapping1))[ FD ]
Line_2 $$ void assertConflicts(String mapping1, String mapping2, DocumentMapperParser parser, String... conflicts) throws IOException -->Line_6 $$ docMapper.merge(parser.parse("type", new CompressedXContent(mapping2)).mapping(), false)[ FD ]
Line_2 $$ void assertConflicts(String mapping1, String mapping2, DocumentMapperParser parser, String... conflicts) throws IOException -->Line_4 $$ docMapper = parser.parse("type", docMapper.mappingSource())[ CD ]
Line_4 $$ docMapper = parser.parse("type", docMapper.mappingSource())-->Line_6 $$ docMapper.merge(parser.parse("type", new CompressedXContent(mapping2)).mapping(), false)[ FD ]
Line_2 $$ void assertConflicts(String mapping1, String mapping2, DocumentMapperParser parser, String... conflicts) throws IOException -->Line_4 $$ docMapper = parser.parse("type", docMapper.mappingSource())[ FD ]
Line_12 $$ for (String conflict : conflicts) -->Line_13 $$ assertThat(e.getMessage(), containsString(conflict))[ FD ]
Line_2 $$ void assertConflicts(String mapping1, String mapping2, DocumentMapperParser parser, String... conflicts) throws IOException -->Line_5 $$ if (conflicts.length == 0) [ CD ]
Line_2 $$ void assertConflicts(String mapping1, String mapping2, DocumentMapperParser parser, String... conflicts) throws IOException -->Line_3 $$ DocumentMapper docMapper = parser.parse("type", new CompressedXContent(mapping1))[ CD ]
