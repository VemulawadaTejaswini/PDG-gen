Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_19 $$ out.write(bytes)[ CD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_7 $$ FileSystem fs = cluster.getFileSystem()[ CD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_22 $$ Assert.assertEquals(true, cluster.restartDataNode(one, true))[ CD ]
Line_13 $$ FSDataOutputStream out = fs.create(filePath, true, 4096, (short) 3, 512)-->Line_14 $$ out.write(bytes)[ FD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_16 $$ out.hflush()[ CD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_21 $$ out.hflush()[ CD ]
Line_13 $$ FSDataOutputStream out = fs.create(filePath, true, 4096, (short) 3, 512)-->Line_21 $$ out.hflush()[ FD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_26 $$ cluster.stopDataNode(0)[ CD ]
Line_8 $$ Path filePath = new Path("/testForgivingExcludedNodes")-->Line_13 $$ FSDataOutputStream out = fs.create(filePath, true, 4096, (short) 3, 512)[ FD ]
Line_13 $$ FSDataOutputStream out = fs.create(filePath, true, 4096, (short) 3, 512)-->Line_15 $$ out.write(bytes)[ FD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_24 $$ cluster.waitActive()[ CD ]
Line_9 $$ byte[] bytes = new byte[256]-->Line_20 $$ out.write(bytes)[ FD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_4 $$ conf.setInt("io.bytes.per.checksum", 512)[ CD ]
Line_13 $$ FSDataOutputStream out = fs.create(filePath, true, 4096, (short) 3, 512)-->Line_19 $$ out.write(bytes)[ FD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_17 $$ DataNodeProperties two = cluster.stopDataNode(2)[ CD ]
Line_13 $$ FSDataOutputStream out = fs.create(filePath, true, 4096, (short) 3, 512)-->Line_29 $$ out.hflush()[ FD ]
Line_9 $$ byte[] bytes = new byte[256]-->Line_28 $$ out.write(bytes)[ FD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_10 $$ for (int index = 0; index < bytes.length; index++) [ CD ]
Line_13 $$ FSDataOutputStream out = fs.create(filePath, true, 4096, (short) 3, 512)-->Line_20 $$ out.write(bytes)[ FD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_25 $$ ThreadUtil.sleepAtLeastIgnoreInterrupts(5000)[ CD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_18 $$ DataNodeProperties one = cluster.stopDataNode(1)[ CD ]
Line_13 $$ FSDataOutputStream out = fs.create(filePath, true, 4096, (short) 3, 512)-->Line_16 $$ out.hflush()[ FD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_20 $$ out.write(bytes)[ CD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_23 $$ Assert.assertEquals(true, cluster.restartDataNode(two, true))[ CD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_9 $$ byte[] bytes = new byte[256][ CD ]
Line_18 $$ DataNodeProperties one = cluster.stopDataNode(1)-->Line_22 $$ Assert.assertEquals(true, cluster.restartDataNode(one, true))[ FD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_6 $$ List<DataNodeProperties> props = cluster.dataNodes[ CD ]
Line_7 $$ FileSystem fs = cluster.getFileSystem()-->Line_13 $$ FSDataOutputStream out = fs.create(filePath, true, 4096, (short) 3, 512)[ FD ]
Line_9 $$ byte[] bytes = new byte[256]-->Line_15 $$ out.write(bytes)[ FD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()[ CD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_3 $$ conf.setLong(DFSConfigKeys.DFS_CLIENT_WRITE_EXCLUDE_NODES_CACHE_EXPIRY_INTERVAL, 2500)[ CD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_8 $$ Path filePath = new Path("/testForgivingExcludedNodes")[ CD ]
Line_9 $$ byte[] bytes = new byte[256]-->Line_19 $$ out.write(bytes)[ FD ]
Line_17 $$ DataNodeProperties two = cluster.stopDataNode(2)-->Line_23 $$ Assert.assertEquals(true, cluster.restartDataNode(two, true))[ FD ]
Line_10 $$ for (int index = 0; index < bytes.length; index++) -->Line_11 $$ bytes[index] = '0'[ CD ]
Line_13 $$ FSDataOutputStream out = fs.create(filePath, true, 4096, (short) 3, 512)-->Line_28 $$ out.write(bytes)[ FD ]
Line_13 $$ FSDataOutputStream out = fs.create(filePath, true, 4096, (short) 3, 512)-->Line_30 $$ out.close()[ FD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_14 $$ out.write(bytes)[ CD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_15 $$ out.write(bytes)[ CD ]
Line_9 $$ byte[] bytes = new byte[256]-->Line_14 $$ out.write(bytes)[ FD ]
Line_2 $$ public void testExcludedNodesForgiveness() throws IOException -->Line_13 $$ FSDataOutputStream out = fs.create(filePath, true, 4096, (short) 3, 512)[ CD ]
