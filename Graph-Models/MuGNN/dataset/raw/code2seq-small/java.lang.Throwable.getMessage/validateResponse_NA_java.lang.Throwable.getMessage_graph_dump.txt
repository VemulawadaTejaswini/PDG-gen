Line_2 $$ private static Map<?, ?> validateResponse(final HttpOpParam.Op op, final HttpURLConnection conn, boolean unwrapException) throws IOException -->Line_15 $$ throw new IOException("Unexpected HTTP response: code=" + code + " != " + op.getExpectedHttpResponseCode() + ", " + op.toQueryString() + ", message=" + conn.getResponseMessage())[ FD ]
Line_22 $$ re = new RemoteException(parts[1], parts[2])-->Line_23 $$ re = ((RemoteException) re).unwrapRemoteException(InvalidToken.class)[ FD ]
Line_8 $$ final Map<?, ?> m-->Line_19 $$ IOException re = JsonUtil.toRemoteException(m)[ FD ]
Line_2 $$ private static Map<?, ?> validateResponse(final HttpOpParam.Op op, final HttpURLConnection conn, boolean unwrapException) throws IOException -->Line_12 $$ throw new IOException("Unexpected HTTP response: code=" + code + " != " + op.getExpectedHttpResponseCode() + ", " + op.toQueryString() + ", message=" + conn.getResponseMessage(), e)[ FD ]
Line_2 $$ private static Map<?, ?> validateResponse(final HttpOpParam.Op op, final HttpURLConnection conn, boolean unwrapException) throws IOException -->Line_7 $$ if (code != op.getExpectedHttpResponseCode()) [ FD ]
Line_20 $$ if (re.getMessage().startsWith("Failed to obtain user group information:")) -->Line_23 $$ re = ((RemoteException) re).unwrapRemoteException(InvalidToken.class)[ CD ]
Line_3 $$ final int code = conn.getResponseCode()-->Line_7 $$ if (code != op.getExpectedHttpResponseCode()) [ FD ]
Line_19 $$ IOException re = JsonUtil.toRemoteException(m)-->Line_23 $$ re = ((RemoteException) re).unwrapRemoteException(InvalidToken.class)[ FD ]
Line_2 $$ private static Map<?, ?> validateResponse(final HttpOpParam.Op op, final HttpURLConnection conn, boolean unwrapException) throws IOException -->Line_4 $$ if (code == HttpURLConnection.HTTP_UNAUTHORIZED) [ CD ]
Line_2 $$ private static Map<?, ?> validateResponse(final HttpOpParam.Op op, final HttpURLConnection conn, boolean unwrapException) throws IOException -->Line_3 $$ final int code = conn.getResponseCode()[ FD ]
Line_2 $$ private static Map<?, ?> validateResponse(final HttpOpParam.Op op, final HttpURLConnection conn, boolean unwrapException) throws IOException -->Line_7 $$ if (code != op.getExpectedHttpResponseCode()) [ CD ]
Line_10 $$ m = jsonParse(conn, true)-->Line_16 $$ if (m.get(RemoteException.class.getSimpleName()) == null) [ FD ]
Line_20 $$ if (re.getMessage().startsWith("Failed to obtain user group information:")) -->Line_21 $$ String[] parts = re.getMessage().split(":\\s+", 3)[ CD ]
Line_10 $$ m = jsonParse(conn, true)-->Line_19 $$ IOException re = JsonUtil.toRemoteException(m)[ FD ]
Line_2 $$ private static Map<?, ?> validateResponse(final HttpOpParam.Op op, final HttpURLConnection conn, boolean unwrapException) throws IOException -->Line_27 $$ return null[ CD ]
Line_7 $$ if (code != op.getExpectedHttpResponseCode()) -->Line_19 $$ IOException re = JsonUtil.toRemoteException(m)[ CD ]
Line_2 $$ private static Map<?, ?> validateResponse(final HttpOpParam.Op op, final HttpURLConnection conn, boolean unwrapException) throws IOException -->Line_10 $$ m = jsonParse(conn, true)[ FD ]
Line_7 $$ if (code != op.getExpectedHttpResponseCode()) -->Line_14 $$ if (m == null) [ CD ]
Line_8 $$ final Map<?, ?> m-->Line_16 $$ if (m.get(RemoteException.class.getSimpleName()) == null) [ FD ]
Line_16 $$ if (m.get(RemoteException.class.getSimpleName()) == null) -->Line_17 $$ return m[ CD ]
Line_20 $$ if (re.getMessage().startsWith("Failed to obtain user group information:")) -->Line_22 $$ re = new RemoteException(parts[1], parts[2])[ CD ]
Line_2 $$ private static Map<?, ?> validateResponse(final HttpOpParam.Op op, final HttpURLConnection conn, boolean unwrapException) throws IOException -->Line_5 $$ throw new AccessControlException(conn.getResponseMessage())[ FD ]
Line_7 $$ if (code != op.getExpectedHttpResponseCode()) -->Line_20 $$ if (re.getMessage().startsWith("Failed to obtain user group information:")) [ CD ]
Line_8 $$ final Map<?, ?> m-->Line_10 $$ m = jsonParse(conn, true)[ FD ]
Line_10 $$ m = jsonParse(conn, true)-->Line_14 $$ if (m == null) [ FD ]
Line_22 $$ re = new RemoteException(parts[1], parts[2])-->Line_25 $$ throw unwrapException ? toIOException(re) : re[ FD ]
Line_3 $$ final int code = conn.getResponseCode()-->Line_4 $$ if (code == HttpURLConnection.HTTP_UNAUTHORIZED) [ FD ]
Line_8 $$ final Map<?, ?> m-->Line_14 $$ if (m == null) [ FD ]
Line_19 $$ IOException re = JsonUtil.toRemoteException(m)-->Line_20 $$ if (re.getMessage().startsWith("Failed to obtain user group information:")) [ FD ]
Line_19 $$ IOException re = JsonUtil.toRemoteException(m)-->Line_22 $$ re = new RemoteException(parts[1], parts[2])[ FD ]
Line_7 $$ if (code != op.getExpectedHttpResponseCode()) -->Line_8 $$ final Map<?, ?> m[ CD ]
Line_2 $$ private static Map<?, ?> validateResponse(final HttpOpParam.Op op, final HttpURLConnection conn, boolean unwrapException) throws IOException -->Line_3 $$ final int code = conn.getResponseCode()[ CD ]
Line_14 $$ if (m == null) -->Line_16 $$ if (m.get(RemoteException.class.getSimpleName()) == null) [ CD ]
Line_19 $$ IOException re = JsonUtil.toRemoteException(m)-->Line_21 $$ String[] parts = re.getMessage().split(":\\s+", 3)[ FD ]
Line_19 $$ IOException re = JsonUtil.toRemoteException(m)-->Line_25 $$ throw unwrapException ? toIOException(re) : re[ FD ]
Line_23 $$ re = ((RemoteException) re).unwrapRemoteException(InvalidToken.class)-->Line_25 $$ throw unwrapException ? toIOException(re) : re[ FD ]
