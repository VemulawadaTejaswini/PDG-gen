Line_8 $$ ApplicationMasterProtocol rmClient = null-->Line_46 $$ rmClient.allocate(allocateRequest)[ FD ]
Line_43 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)-->Line_55 $$ rpc.stopProxy(rmClient, conf)[ FD ]
Line_19 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()-->Line_41 $$ Assert.assertTrue(attempt.getState() == RMAppAttemptState.FINISHED)[ FD ]
Line_8 $$ ApplicationMasterProtocol rmClient = null-->Line_42 $$ rpc.stopProxy(rmClient, conf)[ FD ]
Line_7 $$ final YarnRPC rpc = YarnRPC.create(conf)-->Line_26 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)[ FD ]
Line_6 $$ final Configuration conf = rm.getConfig()-->Line_7 $$ final YarnRPC rpc = YarnRPC.create(conf)[ FD ]
Line_11 $$ RMApp app = rm.submitApp(1024)-->Line_19 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()[ FD ]
Line_44 $$ AllocateRequest allocateRequest = Records.newRecord(AllocateRequest.class)-->Line_46 $$ rmClient.allocate(allocateRequest)[ FD ]
Line_8 $$ ApplicationMasterProtocol rmClient = null-->Line_28 $$ rmClient.registerApplicationMaster(request)[ FD ]
Line_26 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)-->Line_46 $$ rmClient.allocate(allocateRequest)[ FD ]
Line_4 $$ final MockRMWithAMS rm = new MockRMWithAMS(conf, containerManager)-->Line_5 $$ rm.start()[ FD ]
Line_22 $$ Credentials credentials = containerManager.getContainerCredentials()-->Line_24 $$ Token<? extends TokenIdentifier> amRMToken = MockRMWithAMS.setupAndReturnAMRMToken(rmBindAddress, credentials.getAllTokens())[ FD ]
Line_2 $$ public void testTokenExpiry() throws Exception -->Line_6 $$ final Configuration conf = rm.getConfig()[ CD ]
Line_37 $$ while (attempt.getState() != RMAppAttemptState.FINISHED && count < maxWaitAttempts) -->Line_38 $$ Thread.sleep(100)[ CD ]
Line_26 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)-->Line_28 $$ rmClient.registerApplicationMaster(request)[ FD ]
Line_20 $$ ApplicationAttemptId applicationAttemptId = attempt.getAppAttemptId()-->Line_21 $$ UserGroupInformation currentUser = UserGroupInformation.createRemoteUser(applicationAttemptId.toString())[ FD ]
Line_27 $$ RegisterApplicationMasterRequest request = Records.newRecord(RegisterApplicationMasterRequest.class)-->Line_28 $$ rmClient.registerApplicationMaster(request)[ FD ]
Line_54 $$ if (rmClient != null) -->Line_55 $$ rpc.stopProxy(rmClient, conf)[ CD ]
Line_23 $$ final InetSocketAddress rmBindAddress = rm.getApplicationMasterService().getBindAddress()-->Line_24 $$ Token<? extends TokenIdentifier> amRMToken = MockRMWithAMS.setupAndReturnAMRMToken(rmBindAddress, credentials.getAllTokens())[ FD ]
Line_4 $$ final MockRMWithAMS rm = new MockRMWithAMS(conf, containerManager)-->Line_26 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)[ FD ]
Line_26 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)-->Line_33 $$ rmClient.finishApplicationMaster(finishAMRequest)[ FD ]
Line_26 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)-->Line_42 $$ rpc.stopProxy(rmClient, conf)[ FD ]
Line_24 $$ Token<? extends TokenIdentifier> amRMToken = MockRMWithAMS.setupAndReturnAMRMToken(rmBindAddress, credentials.getAllTokens())-->Line_25 $$ currentUser.addToken(amRMToken)[ FD ]
Line_6 $$ final Configuration conf = rm.getConfig()-->Line_42 $$ rpc.stopProxy(rmClient, conf)[ FD ]
Line_14 $$ while (containerManager.containerTokens == null && waitCount++ < 20) -->Line_16 $$ Thread.sleep(1000)[ CD ]
Line_7 $$ final YarnRPC rpc = YarnRPC.create(conf)-->Line_42 $$ rpc.stopProxy(rmClient, conf)[ FD ]
Line_26 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)-->Line_55 $$ rpc.stopProxy(rmClient, conf)[ FD ]
Line_19 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()-->Line_37 $$ while (attempt.getState() != RMAppAttemptState.FINISHED && count < maxWaitAttempts) [ FD ]
Line_8 $$ ApplicationMasterProtocol rmClient = null-->Line_55 $$ rpc.stopProxy(rmClient, conf)[ FD ]
Line_29 $$ FinishApplicationMasterRequest finishAMRequest = Records.newRecord(FinishApplicationMasterRequest.class)-->Line_33 $$ rmClient.finishApplicationMaster(finishAMRequest)[ FD ]
Line_4 $$ final MockRMWithAMS rm = new MockRMWithAMS(conf, containerManager)-->Line_35 $$ rm.getRMContext().getDispatcher().getEventHandler().handle(new RMAppAttemptContainerFinishedEvent(applicationAttemptId, containerStatus))[ FD ]
Line_8 $$ ApplicationMasterProtocol rmClient = null-->Line_54 $$ if (rmClient != null) [ FD ]
Line_2 $$ public void testTokenExpiry() throws Exception -->Line_7 $$ final YarnRPC rpc = YarnRPC.create(conf)[ CD ]
Line_19 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()-->Line_34 $$ ContainerStatus containerStatus = BuilderUtils.newContainerStatus(attempt.getMasterContainer().getId(), ContainerState.COMPLETE, "AM Container Finished", 0)[ FD ]
Line_29 $$ FinishApplicationMasterRequest finishAMRequest = Records.newRecord(FinishApplicationMasterRequest.class)-->Line_32 $$ finishAMRequest.setTrackingUrl("url")[ FD ]
Line_7 $$ final YarnRPC rpc = YarnRPC.create(conf)-->Line_43 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)[ FD ]
Line_26 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)-->Line_43 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)[ FD ]
Line_20 $$ ApplicationAttemptId applicationAttemptId = attempt.getAppAttemptId()-->Line_50 $$ Assert.assertTrue(t.getCause().getMessage().contains(applicationAttemptId.toString() + " not found in AMRMTokenSecretManager."))[ FD ]
Line_43 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)-->Line_54 $$ if (rmClient != null) [ FD ]
Line_19 $$ RMAppAttempt attempt = app.getCurrentAppAttempt()-->Line_20 $$ ApplicationAttemptId applicationAttemptId = attempt.getAppAttemptId()[ FD ]
Line_6 $$ final Configuration conf = rm.getConfig()-->Line_43 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)[ FD ]
Line_7 $$ final YarnRPC rpc = YarnRPC.create(conf)-->Line_55 $$ rpc.stopProxy(rmClient, conf)[ FD ]
Line_6 $$ final Configuration conf = rm.getConfig()-->Line_26 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)[ FD ]
Line_3 $$ MyContainerManager containerManager = new MyContainerManager()-->Line_22 $$ Credentials credentials = containerManager.getContainerCredentials()[ FD ]
Line_10 $$ MockNM nm1 = rm.registerNode("localhost:1234", 5120)-->Line_12 $$ nm1.nodeHeartbeat(true)[ FD ]
Line_36 $$ int count = 0-->Line_39 $$ count++[ FD ]
Line_4 $$ final MockRMWithAMS rm = new MockRMWithAMS(conf, containerManager)-->Line_10 $$ MockNM nm1 = rm.registerNode("localhost:1234", 5120)[ FD ]
Line_37 $$ while (attempt.getState() != RMAppAttemptState.FINISHED && count < maxWaitAttempts) -->Line_39 $$ count++[ CD ]
Line_8 $$ ApplicationMasterProtocol rmClient = null-->Line_43 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)[ FD ]
Line_29 $$ FinishApplicationMasterRequest finishAMRequest = Records.newRecord(FinishApplicationMasterRequest.class)-->Line_31 $$ finishAMRequest.setDiagnostics("diagnostics")[ FD ]
Line_8 $$ ApplicationMasterProtocol rmClient = null-->Line_33 $$ rmClient.finishApplicationMaster(finishAMRequest)[ FD ]
Line_4 $$ final MockRMWithAMS rm = new MockRMWithAMS(conf, containerManager)-->Line_43 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)[ FD ]
Line_14 $$ while (containerManager.containerTokens == null && waitCount++ < 20) -->Line_15 $$ LOG.info("Waiting for AM Launch to happen..")[ CD ]
Line_43 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)-->Line_46 $$ rmClient.allocate(allocateRequest)[ FD ]
Line_21 $$ UserGroupInformation currentUser = UserGroupInformation.createRemoteUser(applicationAttemptId.toString())-->Line_26 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)[ FD ]
Line_4 $$ final MockRMWithAMS rm = new MockRMWithAMS(conf, containerManager)-->Line_23 $$ final InetSocketAddress rmBindAddress = rm.getApplicationMasterService().getBindAddress()[ FD ]
Line_2 $$ public void testTokenExpiry() throws Exception -->Line_8 $$ ApplicationMasterProtocol rmClient = null[ CD ]
Line_21 $$ UserGroupInformation currentUser = UserGroupInformation.createRemoteUser(applicationAttemptId.toString())-->Line_43 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)[ FD ]
Line_13 $$ int waitCount = 0-->Line_14 $$ while (containerManager.containerTokens == null && waitCount++ < 20) [ FD ]
Line_4 $$ final MockRMWithAMS rm = new MockRMWithAMS(conf, containerManager)-->Line_53 $$ rm.stop()[ FD ]
Line_26 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)-->Line_54 $$ if (rmClient != null) [ FD ]
Line_6 $$ final Configuration conf = rm.getConfig()-->Line_55 $$ rpc.stopProxy(rmClient, conf)[ FD ]
Line_4 $$ final MockRMWithAMS rm = new MockRMWithAMS(conf, containerManager)-->Line_11 $$ RMApp app = rm.submitApp(1024)[ FD ]
Line_29 $$ FinishApplicationMasterRequest finishAMRequest = Records.newRecord(FinishApplicationMasterRequest.class)-->Line_30 $$ finishAMRequest.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED)[ FD ]
Line_21 $$ UserGroupInformation currentUser = UserGroupInformation.createRemoteUser(applicationAttemptId.toString())-->Line_25 $$ currentUser.addToken(amRMToken)[ FD ]
Line_2 $$ public void testTokenExpiry() throws Exception -->Line_3 $$ MyContainerManager containerManager = new MyContainerManager()[ CD ]
Line_2 $$ public void testTokenExpiry() throws Exception -->Line_5 $$ rm.start()[ CD ]
Line_2 $$ public void testTokenExpiry() throws Exception -->Line_4 $$ final MockRMWithAMS rm = new MockRMWithAMS(conf, containerManager)[ CD ]
Line_4 $$ final MockRMWithAMS rm = new MockRMWithAMS(conf, containerManager)-->Line_6 $$ final Configuration conf = rm.getConfig()[ FD ]
Line_8 $$ ApplicationMasterProtocol rmClient = null-->Line_26 $$ rmClient = createRMClient(rm, conf, rpc, currentUser)[ FD ]
