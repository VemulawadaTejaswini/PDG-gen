Line_7 $$ ImmutableMap.Builder<String, Object> properties = ImmutableMap.builder()-->Line_33 $$ properties.put(tableProperty.getName(), value)[ FD ]
Line_28 $$ Map<String, Object> userSpecifiedProperties = properties.build()-->Line_30 $$ if (!userSpecifiedProperties.containsKey(tableProperty.getName())) [ FD ]
Line_10 $$ PropertyMetadata<?> tableProperty = supportedTableProperties.get(property)-->Line_16 $$ sqlObjectValue = evaluatePropertyValue(sqlProperty.getValue(), tableProperty.getSqlType(), session, metadata)[ FD ]
Line_7 $$ ImmutableMap.Builder<String, Object> properties = ImmutableMap.builder()-->Line_26 $$ properties.put(tableProperty.getName(), value)[ FD ]
Line_3 $$ Map<String, PropertyMetadata<?>> supportedTableProperties = catalogTableProperties.get(catalog)-->Line_29 $$ for (PropertyMetadata<?> tableProperty : supportedTableProperties.values()) [ FD ]
Line_10 $$ PropertyMetadata<?> tableProperty = supportedTableProperties.get(property)-->Line_24 $$ throw new PrestoException(INVALID_TABLE_PROPERTY, format("Unable to set table property '%s' to '%s': %s", tableProperty.getName(), sqlProperty.getValue(), e.getMessage()), e)[ FD ]
Line_22 $$ value = tableProperty.decode(sqlObjectValue)-->Line_26 $$ properties.put(tableProperty.getName(), value)[ FD ]
Line_10 $$ PropertyMetadata<?> tableProperty = supportedTableProperties.get(property)-->Line_30 $$ if (!userSpecifiedProperties.containsKey(tableProperty.getName())) [ FD ]
Line_8 $$ for (Map.Entry<String, Expression> sqlProperty : sqlPropertyValues.entrySet()) -->Line_9 $$ String property = sqlProperty.getKey().toLowerCase(ENGLISH)[ FD ]
Line_22 $$ value = tableProperty.decode(sqlObjectValue)-->Line_33 $$ properties.put(tableProperty.getName(), value)[ FD ]
Line_2 $$ public Map<String, Object> getTableProperties(String catalog, Map<String, Expression> sqlPropertyValues, Session session, Metadata metadata) -->Line_7 $$ ImmutableMap.Builder<String, Object> properties = ImmutableMap.builder()[ CD ]
Line_2 $$ public Map<String, Object> getTableProperties(String catalog, Map<String, Expression> sqlPropertyValues, Session session, Metadata metadata) -->Line_12 $$ throw new PrestoException(INVALID_TABLE_PROPERTY, format("Catalog '%s' does not support table property '%s'", catalog, property))[ FD ]
Line_20 $$ Object value-->Line_22 $$ value = tableProperty.decode(sqlObjectValue)[ FD ]
Line_14 $$ Object sqlObjectValue-->Line_22 $$ value = tableProperty.decode(sqlObjectValue)[ FD ]
Line_2 $$ public Map<String, Object> getTableProperties(String catalog, Map<String, Expression> sqlPropertyValues, Session session, Metadata metadata) -->Line_3 $$ Map<String, PropertyMetadata<?>> supportedTableProperties = catalogTableProperties.get(catalog)[ CD ]
Line_10 $$ PropertyMetadata<?> tableProperty = supportedTableProperties.get(property)-->Line_31 $$ Object value = tableProperty.getDefaultValue()[ FD ]
Line_30 $$ if (!userSpecifiedProperties.containsKey(tableProperty.getName())) -->Line_31 $$ Object value = tableProperty.getDefaultValue()[ CD ]
Line_2 $$ public Map<String, Object> getTableProperties(String catalog, Map<String, Expression> sqlPropertyValues, Session session, Metadata metadata) -->Line_8 $$ for (Map.Entry<String, Expression> sqlProperty : sqlPropertyValues.entrySet()) [ FD ]
Line_2 $$ public Map<String, Object> getTableProperties(String catalog, Map<String, Expression> sqlPropertyValues, Session session, Metadata metadata) -->Line_16 $$ sqlObjectValue = evaluatePropertyValue(sqlProperty.getValue(), tableProperty.getSqlType(), session, metadata)[ FD ]
Line_20 $$ Object value-->Line_32 $$ if (value != null) [ FD ]
Line_8 $$ for (Map.Entry<String, Expression> sqlProperty : sqlPropertyValues.entrySet()) -->Line_16 $$ sqlObjectValue = evaluatePropertyValue(sqlProperty.getValue(), tableProperty.getSqlType(), session, metadata)[ FD ]
Line_20 $$ Object value-->Line_26 $$ properties.put(tableProperty.getName(), value)[ FD ]
Line_10 $$ PropertyMetadata<?> tableProperty = supportedTableProperties.get(property)-->Line_22 $$ value = tableProperty.decode(sqlObjectValue)[ FD ]
Line_10 $$ PropertyMetadata<?> tableProperty = supportedTableProperties.get(property)-->Line_26 $$ properties.put(tableProperty.getName(), value)[ FD ]
Line_2 $$ public Map<String, Object> getTableProperties(String catalog, Map<String, Expression> sqlPropertyValues, Session session, Metadata metadata) -->Line_4 $$ if (supportedTableProperties == null) [ CD ]
Line_10 $$ PropertyMetadata<?> tableProperty = supportedTableProperties.get(property)-->Line_33 $$ properties.put(tableProperty.getName(), value)[ FD ]
Line_16 $$ sqlObjectValue = evaluatePropertyValue(sqlProperty.getValue(), tableProperty.getSqlType(), session, metadata)-->Line_22 $$ value = tableProperty.decode(sqlObjectValue)[ FD ]
Line_2 $$ public Map<String, Object> getTableProperties(String catalog, Map<String, Expression> sqlPropertyValues, Session session, Metadata metadata) -->Line_3 $$ Map<String, PropertyMetadata<?>> supportedTableProperties = catalogTableProperties.get(catalog)[ FD ]
Line_8 $$ for (Map.Entry<String, Expression> sqlProperty : sqlPropertyValues.entrySet()) -->Line_18 $$ throw new PrestoException(INVALID_TABLE_PROPERTY, format("Invalid value for table property '%s': Cannot convert '%s' to %s", tableProperty.getName(), sqlProperty.getValue(), tableProperty.getSqlType()), e)[ FD ]
Line_7 $$ ImmutableMap.Builder<String, Object> properties = ImmutableMap.builder()-->Line_37 $$ return properties.build()[ FD ]
Line_32 $$ if (value != null) -->Line_33 $$ properties.put(tableProperty.getName(), value)[ CD ]
Line_8 $$ for (Map.Entry<String, Expression> sqlProperty : sqlPropertyValues.entrySet()) -->Line_24 $$ throw new PrestoException(INVALID_TABLE_PROPERTY, format("Unable to set table property '%s' to '%s': %s", tableProperty.getName(), sqlProperty.getValue(), e.getMessage()), e)[ FD ]
Line_7 $$ ImmutableMap.Builder<String, Object> properties = ImmutableMap.builder()-->Line_28 $$ Map<String, Object> userSpecifiedProperties = properties.build()[ FD ]
Line_2 $$ public Map<String, Object> getTableProperties(String catalog, Map<String, Expression> sqlPropertyValues, Session session, Metadata metadata) -->Line_37 $$ return properties.build()[ CD ]
Line_22 $$ value = tableProperty.decode(sqlObjectValue)-->Line_32 $$ if (value != null) [ FD ]
Line_3 $$ Map<String, PropertyMetadata<?>> supportedTableProperties = catalogTableProperties.get(catalog)-->Line_4 $$ if (supportedTableProperties == null) [ FD ]
Line_20 $$ Object value-->Line_33 $$ properties.put(tableProperty.getName(), value)[ FD ]
Line_10 $$ PropertyMetadata<?> tableProperty = supportedTableProperties.get(property)-->Line_18 $$ throw new PrestoException(INVALID_TABLE_PROPERTY, format("Invalid value for table property '%s': Cannot convert '%s' to %s", tableProperty.getName(), sqlProperty.getValue(), tableProperty.getSqlType()), e)[ FD ]
Line_10 $$ PropertyMetadata<?> tableProperty = supportedTableProperties.get(property)-->Line_11 $$ if (tableProperty == null) [ FD ]
Line_14 $$ Object sqlObjectValue-->Line_16 $$ sqlObjectValue = evaluatePropertyValue(sqlProperty.getValue(), tableProperty.getSqlType(), session, metadata)[ FD ]
Line_2 $$ public Map<String, Object> getTableProperties(String catalog, Map<String, Expression> sqlPropertyValues, Session session, Metadata metadata) -->Line_28 $$ Map<String, Object> userSpecifiedProperties = properties.build()[ CD ]
Line_30 $$ if (!userSpecifiedProperties.containsKey(tableProperty.getName())) -->Line_32 $$ if (value != null) [ CD ]
Line_9 $$ String property = sqlProperty.getKey().toLowerCase(ENGLISH)-->Line_12 $$ throw new PrestoException(INVALID_TABLE_PROPERTY, format("Catalog '%s' does not support table property '%s'", catalog, property))[ FD ]
Line_9 $$ String property = sqlProperty.getKey().toLowerCase(ENGLISH)-->Line_10 $$ PropertyMetadata<?> tableProperty = supportedTableProperties.get(property)[ FD ]
Line_3 $$ Map<String, PropertyMetadata<?>> supportedTableProperties = catalogTableProperties.get(catalog)-->Line_10 $$ PropertyMetadata<?> tableProperty = supportedTableProperties.get(property)[ FD ]
