Line_8 $$ if (status == ApplyPatchStatus.ABORT)-->Line_9 $$ return status[ CD ]
Line_13 $$ final List<Pair<VirtualFile, ApplyFilePatchBase<BinaryType>>> binaryPatches = verifier.getBinaryPatches()-->Line_16 $$ moveForCustomBinaries(binaryPatches, appliedPatches)[ FD ]
Line_10 $$ if (myCustomForBinaries == null) -->Line_15 $$ final List<FilePatch> appliedPatches = myCustomForBinaries.getAppliedPatches()[ CD ]
Line_3 $$ final List<Pair<VirtualFile, ApplyTextFilePatch>> textPatches = verifier.getTextPatches()-->Line_7 $$ status = applyList(textPatches, context, status, commitContext)[ FD ]
Line_2 $$ private ApplyPatchStatus actualApply(final PathsVerifier<BinaryType> verifier, final CommitContext commitContext) -->Line_11 $$ status = applyList(verifier.getBinaryPatches(), context, status, commitContext)[ FD ]
Line_2 $$ private ApplyPatchStatus actualApply(final PathsVerifier<BinaryType> verifier, final CommitContext commitContext) -->Line_3 $$ final List<Pair<VirtualFile, ApplyTextFilePatch>> textPatches = verifier.getTextPatches()[ FD ]
Line_15 $$ final List<FilePatch> appliedPatches = myCustomForBinaries.getAppliedPatches()-->Line_18 $$ myRemainingPatches.removeAll(appliedPatches)[ FD ]
Line_15 $$ final List<FilePatch> appliedPatches = myCustomForBinaries.getAppliedPatches()-->Line_16 $$ moveForCustomBinaries(binaryPatches, appliedPatches)[ FD ]
Line_7 $$ status = applyList(textPatches, context, status, commitContext)-->Line_8 $$ if (status == ApplyPatchStatus.ABORT)[ FD ]
Line_2 $$ private ApplyPatchStatus actualApply(final PathsVerifier<BinaryType> verifier, final CommitContext commitContext) -->Line_3 $$ final List<Pair<VirtualFile, ApplyTextFilePatch>> textPatches = verifier.getTextPatches()[ CD ]
Line_5 $$ ApplyPatchStatus status = null-->Line_8 $$ if (status == ApplyPatchStatus.ABORT)[ FD ]
Line_2 $$ private ApplyPatchStatus actualApply(final PathsVerifier<BinaryType> verifier, final CommitContext commitContext) -->Line_4 $$ final ApplyPatchContext context = new ApplyPatchContext(myBaseDirectory, 0, true, true)[ CD ]
Line_10 $$ if (myCustomForBinaries == null) -->Line_17 $$ status = ApplyPatchStatus.and(status, patchStatus)[ CD ]
Line_10 $$ if (myCustomForBinaries == null) -->Line_18 $$ myRemainingPatches.removeAll(appliedPatches)[ CD ]
Line_10 $$ if (myCustomForBinaries == null) -->Line_13 $$ final List<Pair<VirtualFile, ApplyFilePatchBase<BinaryType>>> binaryPatches = verifier.getBinaryPatches()[ CD ]
Line_4 $$ final ApplyPatchContext context = new ApplyPatchContext(myBaseDirectory, 0, true, true)-->Line_11 $$ status = applyList(verifier.getBinaryPatches(), context, status, commitContext)[ FD ]
Line_2 $$ private ApplyPatchStatus actualApply(final PathsVerifier<BinaryType> verifier, final CommitContext commitContext) -->Line_7 $$ status = applyList(textPatches, context, status, commitContext)[ FD ]
Line_7 $$ status = applyList(textPatches, context, status, commitContext)-->Line_17 $$ status = ApplyPatchStatus.and(status, patchStatus)[ FD ]
Line_2 $$ private ApplyPatchStatus actualApply(final PathsVerifier<BinaryType> verifier, final CommitContext commitContext) -->Line_5 $$ ApplyPatchStatus status = null[ CD ]
Line_10 $$ if (myCustomForBinaries == null) -->Line_14 $$ ApplyPatchStatus patchStatus = myCustomForBinaries.apply(binaryPatches)[ CD ]
Line_5 $$ ApplyPatchStatus status = null-->Line_7 $$ status = applyList(textPatches, context, status, commitContext)[ FD ]
Line_11 $$ status = applyList(verifier.getBinaryPatches(), context, status, commitContext)-->Line_17 $$ status = ApplyPatchStatus.and(status, patchStatus)[ FD ]
Line_5 $$ ApplyPatchStatus status = null-->Line_11 $$ status = applyList(verifier.getBinaryPatches(), context, status, commitContext)[ FD ]
Line_7 $$ status = applyList(textPatches, context, status, commitContext)-->Line_11 $$ status = applyList(verifier.getBinaryPatches(), context, status, commitContext)[ FD ]
Line_14 $$ ApplyPatchStatus patchStatus = myCustomForBinaries.apply(binaryPatches)-->Line_17 $$ status = ApplyPatchStatus.and(status, patchStatus)[ FD ]
Line_10 $$ if (myCustomForBinaries == null) -->Line_11 $$ status = applyList(verifier.getBinaryPatches(), context, status, commitContext)[ CD ]
Line_10 $$ if (myCustomForBinaries == null) -->Line_16 $$ moveForCustomBinaries(binaryPatches, appliedPatches)[ CD ]
Line_2 $$ private ApplyPatchStatus actualApply(final PathsVerifier<BinaryType> verifier, final CommitContext commitContext) -->Line_13 $$ final List<Pair<VirtualFile, ApplyFilePatchBase<BinaryType>>> binaryPatches = verifier.getBinaryPatches()[ FD ]
Line_2 $$ private ApplyPatchStatus actualApply(final PathsVerifier<BinaryType> verifier, final CommitContext commitContext) -->Line_24 $$ return status[ CD ]
Line_5 $$ ApplyPatchStatus status = null-->Line_17 $$ status = ApplyPatchStatus.and(status, patchStatus)[ FD ]
Line_4 $$ final ApplyPatchContext context = new ApplyPatchContext(myBaseDirectory, 0, true, true)-->Line_7 $$ status = applyList(textPatches, context, status, commitContext)[ FD ]
Line_13 $$ final List<Pair<VirtualFile, ApplyFilePatchBase<BinaryType>>> binaryPatches = verifier.getBinaryPatches()-->Line_14 $$ ApplyPatchStatus patchStatus = myCustomForBinaries.apply(binaryPatches)[ FD ]
