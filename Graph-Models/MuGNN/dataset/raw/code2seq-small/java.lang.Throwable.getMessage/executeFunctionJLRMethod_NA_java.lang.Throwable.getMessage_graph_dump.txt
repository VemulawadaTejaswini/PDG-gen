Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_9 $$ throw new SpelEvaluationException(getStartPosition(), SpelMessage.FUNCTION_MUST_BE_STATIC, method.getDeclaringClass().getName() + "." + method.getName(), this.name)[ FD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_16 $$ if (method.isVarArgs()) [ CD ]
Line_21 $$ Object result = method.invoke(method.getClass(), functionArgs)-->Line_26 $$ return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))[ FD ]
Line_13 $$ TypeConverter converter = state.getEvaluationContext().getTypeConverter()-->Line_14 $$ argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)[ FD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_8 $$ if (!Modifier.isStatic(method.getModifiers())) [ FD ]
Line_4 $$ Object[] functionArgs = getArguments(state)-->Line_14 $$ argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)[ FD ]
Line_17 $$ functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)-->Line_21 $$ Object result = method.invoke(method.getClass(), functionArgs)[ FD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_5 $$ if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) [ FD ]
Line_12 $$ if (functionArgs != null) -->Line_14 $$ argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)[ CD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_6 $$ throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION, functionArgs.length, method.getParameterTypes().length)[ FD ]
Line_12 $$ if (functionArgs != null) -->Line_13 $$ TypeConverter converter = state.getEvaluationContext().getTypeConverter()[ CD ]
Line_16 $$ if (method.isVarArgs()) -->Line_17 $$ functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)[ CD ]
Line_4 $$ Object[] functionArgs = getArguments(state)-->Line_17 $$ functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)[ FD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_13 $$ TypeConverter converter = state.getEvaluationContext().getTypeConverter()[ FD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_3 $$ this.method = null[ CD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_17 $$ functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)[ FD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_5 $$ if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) [ CD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_20 $$ ReflectionUtils.makeAccessible(method)[ FD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_8 $$ if (!Modifier.isStatic(method.getModifiers())) [ CD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_4 $$ Object[] functionArgs = getArguments(state)[ CD ]
Line_22 $$ if (!argumentConversionOccurred) -->Line_23 $$ this.method = method[ CD ]
Line_4 $$ Object[] functionArgs = getArguments(state)-->Line_12 $$ if (functionArgs != null) [ FD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_21 $$ Object result = method.invoke(method.getClass(), functionArgs)[ FD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_12 $$ if (functionArgs != null) [ CD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_16 $$ if (method.isVarArgs()) [ FD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_24 $$ this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())[ FD ]
Line_22 $$ if (!argumentConversionOccurred) -->Line_24 $$ this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())[ CD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_4 $$ Object[] functionArgs = getArguments(state)[ FD ]
Line_4 $$ Object[] functionArgs = getArguments(state)-->Line_21 $$ Object result = method.invoke(method.getClass(), functionArgs)[ FD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_23 $$ this.method = method[ FD ]
Line_2 $$ private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException -->Line_14 $$ argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)[ FD ]
