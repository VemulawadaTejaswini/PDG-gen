Line_2 $$ public void testApply() -->Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, new HashSet(Arrays.asList(testSetting, testSetting2)))[ CD ]
Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, new HashSet(Arrays.asList(testSetting, testSetting2)))-->Line_31 $$ service.dryRun(Settings.builder().put("foo.bar", 2).put("foo.bar.baz", -15).build())[ FD ]
Line_3 $$ Setting<Integer> testSetting = Setting.intSetting("foo.bar", 1, true, Setting.Scope.CLUSTER)-->Line_7 $$ service.addSettingsUpdateConsumer(testSetting, consumer::<>set)[ FD ]
Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, new HashSet(Arrays.asList(testSetting, testSetting2)))-->Line_40 $$ service.dryRun(Settings.builder().put("foo.bar", 2).put("foo.bar.baz", 15).build())[ FD ]
Line_2 $$ public void testApply() -->Line_39 $$ assertEquals(0, bC.get())[ CD ]
Line_10 $$ AtomicInteger aC = new AtomicInteger()-->Line_13 $$ aC.set(a)[ FD ]
Line_10 $$ AtomicInteger aC = new AtomicInteger()-->Line_48 $$ assertEquals(2, aC.get())[ FD ]
Line_11 $$ AtomicInteger bC = new AtomicInteger()-->Line_19 $$ assertEquals(0, bC.get())[ FD ]
Line_11 $$ AtomicInteger bC = new AtomicInteger()-->Line_14 $$ bC.set(b)[ FD ]
Line_6 $$ AtomicInteger consumer = new AtomicInteger()-->Line_36 $$ assertEquals(0, consumer.get())[ FD ]
Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, new HashSet(Arrays.asList(testSetting, testSetting2)))-->Line_9 $$ service.addSettingsUpdateConsumer(testSetting2, consumer2::<>set, ( s) -> assertTrue(s > 0))[ FD ]
Line_2 $$ public void testApply() -->Line_19 $$ assertEquals(0, bC.get())[ CD ]
Line_3 $$ Setting<Integer> testSetting = Setting.intSetting("foo.bar", 1, true, Setting.Scope.CLUSTER)-->Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, new HashSet(Arrays.asList(testSetting, testSetting2)))[ FD ]
Line_2 $$ public void testApply() -->Line_40 $$ service.dryRun(Settings.builder().put("foo.bar", 2).put("foo.bar.baz", 15).build())[ CD ]
Line_8 $$ AtomicInteger consumer2 = new AtomicInteger()-->Line_17 $$ assertEquals(0, consumer2.get())[ FD ]
Line_2 $$ public void testApply() -->Line_45 $$ service.applySettings(Settings.builder().put("foo.bar", 2).put("foo.bar.baz", 15).build())[ CD ]
Line_2 $$ public void testApply() -->Line_46 $$ assertEquals(2, consumer.get())[ CD ]
Line_2 $$ public void testApply() -->Line_36 $$ assertEquals(0, consumer.get())[ CD ]
Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, new HashSet(Arrays.asList(testSetting, testSetting2)))-->Line_12 $$ service.addSettingsUpdateConsumer(testSetting, testSetting2, ( a,  b) -> [ FD ]
Line_2 $$ public void testApply() -->Line_6 $$ AtomicInteger consumer = new AtomicInteger()[ CD ]
Line_2 $$ public void testApply() -->Line_8 $$ AtomicInteger consumer2 = new AtomicInteger()[ CD ]
Line_2 $$ public void testApply() -->Line_37 $$ assertEquals(0, consumer2.get())[ CD ]
Line_2 $$ public void testApply() -->Line_38 $$ assertEquals(0, aC.get())[ CD ]
Line_2 $$ public void testApply() -->Line_16 $$ assertEquals(0, consumer.get())[ CD ]
Line_2 $$ public void testApply() -->Line_48 $$ assertEquals(2, aC.get())[ CD ]
Line_2 $$ public void testApply() -->Line_42 $$ assertEquals(0, consumer2.get())[ CD ]
Line_2 $$ public void testApply() -->Line_4 $$ Setting<Integer> testSetting2 = Setting.intSetting("foo.bar.baz", 1, true, Setting.Scope.CLUSTER)[ CD ]
Line_4 $$ Setting<Integer> testSetting2 = Setting.intSetting("foo.bar.baz", 1, true, Setting.Scope.CLUSTER)-->Line_9 $$ service.addSettingsUpdateConsumer(testSetting2, consumer2::<>set, ( s) -> assertTrue(s > 0))[ FD ]
Line_2 $$ public void testApply() -->Line_7 $$ service.addSettingsUpdateConsumer(testSetting, consumer::<>set)[ CD ]
Line_2 $$ public void testApply() -->Line_3 $$ Setting<Integer> testSetting = Setting.intSetting("foo.bar", 1, true, Setting.Scope.CLUSTER)[ CD ]
Line_2 $$ public void testApply() -->Line_17 $$ assertEquals(0, consumer2.get())[ CD ]
Line_11 $$ AtomicInteger bC = new AtomicInteger()-->Line_29 $$ assertEquals(0, bC.get())[ FD ]
Line_6 $$ AtomicInteger consumer = new AtomicInteger()-->Line_41 $$ assertEquals(0, consumer.get())[ FD ]
Line_11 $$ AtomicInteger bC = new AtomicInteger()-->Line_44 $$ assertEquals(0, bC.get())[ FD ]
Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, new HashSet(Arrays.asList(testSetting, testSetting2)))-->Line_7 $$ service.addSettingsUpdateConsumer(testSetting, consumer::<>set)[ FD ]
Line_2 $$ public void testApply() -->Line_12 $$ service.addSettingsUpdateConsumer(testSetting, testSetting2, ( a,  b) -> [ CD ]
Line_2 $$ public void testApply() -->Line_18 $$ assertEquals(0, aC.get())[ CD ]
Line_4 $$ Setting<Integer> testSetting2 = Setting.intSetting("foo.bar.baz", 1, true, Setting.Scope.CLUSTER)-->Line_12 $$ service.addSettingsUpdateConsumer(testSetting, testSetting2, ( a,  b) -> [ FD ]
Line_8 $$ AtomicInteger consumer2 = new AtomicInteger()-->Line_27 $$ assertEquals(0, consumer2.get())[ FD ]
Line_2 $$ public void testApply() -->Line_49 $$ assertEquals(15, bC.get())[ CD ]
Line_8 $$ AtomicInteger consumer2 = new AtomicInteger()-->Line_47 $$ assertEquals(15, consumer2.get())[ FD ]
Line_2 $$ public void testApply() -->Line_26 $$ assertEquals(0, consumer.get())[ CD ]
Line_10 $$ AtomicInteger aC = new AtomicInteger()-->Line_43 $$ assertEquals(0, aC.get())[ FD ]
Line_6 $$ AtomicInteger consumer = new AtomicInteger()-->Line_16 $$ assertEquals(0, consumer.get())[ FD ]
Line_2 $$ public void testApply() -->Line_28 $$ assertEquals(0, aC.get())[ CD ]
Line_8 $$ AtomicInteger consumer2 = new AtomicInteger()-->Line_37 $$ assertEquals(0, consumer2.get())[ FD ]
Line_10 $$ AtomicInteger aC = new AtomicInteger()-->Line_38 $$ assertEquals(0, aC.get())[ FD ]
Line_11 $$ AtomicInteger bC = new AtomicInteger()-->Line_49 $$ assertEquals(15, bC.get())[ FD ]
Line_11 $$ AtomicInteger bC = new AtomicInteger()-->Line_39 $$ assertEquals(0, bC.get())[ FD ]
Line_10 $$ AtomicInteger aC = new AtomicInteger()-->Line_18 $$ assertEquals(0, aC.get())[ FD ]
Line_8 $$ AtomicInteger consumer2 = new AtomicInteger()-->Line_42 $$ assertEquals(0, consumer2.get())[ FD ]
Line_10 $$ AtomicInteger aC = new AtomicInteger()-->Line_28 $$ assertEquals(0, aC.get())[ FD ]
Line_2 $$ public void testApply() -->Line_27 $$ assertEquals(0, consumer2.get())[ CD ]
Line_2 $$ public void testApply() -->Line_41 $$ assertEquals(0, consumer.get())[ CD ]
Line_2 $$ public void testApply() -->Line_10 $$ AtomicInteger aC = new AtomicInteger()[ CD ]
Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, new HashSet(Arrays.asList(testSetting, testSetting2)))-->Line_21 $$ service.applySettings(Settings.builder().put("foo.bar", 2).put("foo.bar.baz", -15).build())[ FD ]
Line_2 $$ public void testApply() -->Line_11 $$ AtomicInteger bC = new AtomicInteger()[ CD ]
Line_2 $$ public void testApply() -->Line_43 $$ assertEquals(0, aC.get())[ CD ]
Line_2 $$ public void testApply() -->Line_9 $$ service.addSettingsUpdateConsumer(testSetting2, consumer2::<>set, ( s) -> assertTrue(s > 0))[ CD ]
Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, new HashSet(Arrays.asList(testSetting, testSetting2)))-->Line_45 $$ service.applySettings(Settings.builder().put("foo.bar", 2).put("foo.bar.baz", 15).build())[ FD ]
Line_6 $$ AtomicInteger consumer = new AtomicInteger()-->Line_46 $$ assertEquals(2, consumer.get())[ FD ]
Line_6 $$ AtomicInteger consumer = new AtomicInteger()-->Line_26 $$ assertEquals(0, consumer.get())[ FD ]
Line_3 $$ Setting<Integer> testSetting = Setting.intSetting("foo.bar", 1, true, Setting.Scope.CLUSTER)-->Line_12 $$ service.addSettingsUpdateConsumer(testSetting, testSetting2, ( a,  b) -> [ FD ]
Line_4 $$ Setting<Integer> testSetting2 = Setting.intSetting("foo.bar.baz", 1, true, Setting.Scope.CLUSTER)-->Line_5 $$ AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, new HashSet(Arrays.asList(testSetting, testSetting2)))[ FD ]
Line_2 $$ public void testApply() -->Line_29 $$ assertEquals(0, bC.get())[ CD ]
Line_2 $$ public void testApply() -->Line_47 $$ assertEquals(15, consumer2.get())[ CD ]
Line_2 $$ public void testApply() -->Line_44 $$ assertEquals(0, bC.get())[ CD ]
