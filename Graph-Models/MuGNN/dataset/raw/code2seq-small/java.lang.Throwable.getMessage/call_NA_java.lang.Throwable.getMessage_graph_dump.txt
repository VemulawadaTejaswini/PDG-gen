Line_2 $$ public Void call() throws Exception -->Line_3 $$ SubTaskProgressIndicator indicator = progressManager.createSubTaskIndicator()[ CD ]
Line_5 $$ final File existing = new File(targetDir, description.getDefaultFileName())-->Line_20 $$ downloaded = downloadFile(description, existing, indicator)[ FD ]
Line_11 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) -->Line_24 $$ if (FileUtil.filesEqual(downloaded, existing)) [ CD ]
Line_2 $$ public Void call() throws Exception -->Line_7 $$ if (url.startsWith(LIB_SCHEMA)) [ CD ]
Line_6 $$ final String url = description.getDownloadUrl()-->Line_7 $$ if (url.startsWith(LIB_SCHEMA)) [ FD ]
Line_2 $$ public Void call() throws Exception -->Line_31 $$ indicator.finished()[ CD ]
Line_3 $$ SubTaskProgressIndicator indicator = progressManager.createSubTaskIndicator()-->Line_20 $$ downloaded = downloadFile(description, existing, indicator)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_5 $$ final File existing = new File(targetDir, description.getDefaultFileName())[ CD ]
Line_9 $$ final File file = PathManager.findFileInLibDirectory(path)-->Line_14 $$ if (file.exists()) [ FD ]
Line_6 $$ final String url = description.getDownloadUrl()-->Line_12 $$ String path = FileUtil.toSystemDependentName(StringUtil.trimStart(url, LocalFileSystem.PROTOCOL_PREFIX))[ FD ]
Line_20 $$ downloaded = downloadFile(description, existing, indicator)-->Line_24 $$ if (FileUtil.filesEqual(downloaded, existing)) [ FD ]
Line_7 $$ if (url.startsWith(LIB_SCHEMA)) -->Line_8 $$ final String path = FileUtil.toSystemDependentName(StringUtil.trimStart(url, LIB_SCHEMA))[ CD ]
Line_18 $$ File downloaded-->Line_28 $$ downloadedFiles.add(Pair.create(downloaded, description))[ FD ]
Line_7 $$ if (url.startsWith(LIB_SCHEMA)) -->Line_11 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) [ CD ]
Line_20 $$ downloaded = downloadFile(description, existing, indicator)-->Line_28 $$ downloadedFiles.add(Pair.create(downloaded, description))[ FD ]
Line_9 $$ final File file = PathManager.findFileInLibDirectory(path)-->Line_15 $$ existingFiles.add(Pair.create(file, description))[ FD ]
Line_24 $$ if (FileUtil.filesEqual(downloaded, existing)) -->Line_25 $$ existingFiles.add(Pair.create(existing, description))[ CD ]
Line_7 $$ if (url.startsWith(LIB_SCHEMA)) -->Line_10 $$ existingFiles.add(Pair.create(file, description))[ CD ]
Line_24 $$ if (FileUtil.filesEqual(downloaded, existing)) -->Line_27 $$ totalSize.addAndGet(downloaded.length())[ CD ]
Line_7 $$ if (url.startsWith(LIB_SCHEMA)) -->Line_9 $$ final File file = PathManager.findFileInLibDirectory(path)[ CD ]
Line_3 $$ SubTaskProgressIndicator indicator = progressManager.createSubTaskIndicator()-->Line_31 $$ indicator.finished()[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_4 $$ indicator.checkCanceled()[ CD ]
Line_8 $$ final String path = FileUtil.toSystemDependentName(StringUtil.trimStart(url, LIB_SCHEMA))-->Line_9 $$ final File file = PathManager.findFileInLibDirectory(path)[ FD ]
Line_18 $$ File downloaded-->Line_24 $$ if (FileUtil.filesEqual(downloaded, existing)) [ FD ]
Line_9 $$ final File file = PathManager.findFileInLibDirectory(path)-->Line_10 $$ existingFiles.add(Pair.create(file, description))[ FD ]
Line_20 $$ downloaded = downloadFile(description, existing, indicator)-->Line_27 $$ totalSize.addAndGet(downloaded.length())[ FD ]
Line_3 $$ SubTaskProgressIndicator indicator = progressManager.createSubTaskIndicator()-->Line_4 $$ indicator.checkCanceled()[ FD ]
Line_6 $$ final String url = description.getDownloadUrl()-->Line_11 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) [ FD ]
Line_11 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) -->Line_14 $$ if (file.exists()) [ CD ]
Line_5 $$ final File existing = new File(targetDir, description.getDefaultFileName())-->Line_25 $$ existingFiles.add(Pair.create(existing, description))[ FD ]
Line_6 $$ final String url = description.getDownloadUrl()-->Line_8 $$ final String path = FileUtil.toSystemDependentName(StringUtil.trimStart(url, LIB_SCHEMA))[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_32 $$ return null[ CD ]
Line_11 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) -->Line_12 $$ String path = FileUtil.toSystemDependentName(StringUtil.trimStart(url, LocalFileSystem.PROTOCOL_PREFIX))[ CD ]
Line_18 $$ File downloaded-->Line_20 $$ downloaded = downloadFile(description, existing, indicator)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_6 $$ final String url = description.getDownloadUrl()[ CD ]
Line_18 $$ File downloaded-->Line_27 $$ totalSize.addAndGet(downloaded.length())[ FD ]
Line_11 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) -->Line_18 $$ File downloaded[ CD ]
Line_24 $$ if (FileUtil.filesEqual(downloaded, existing)) -->Line_28 $$ downloadedFiles.add(Pair.create(downloaded, description))[ CD ]
Line_14 $$ if (file.exists()) -->Line_15 $$ existingFiles.add(Pair.create(file, description))[ CD ]
Line_5 $$ final File existing = new File(targetDir, description.getDefaultFileName())-->Line_24 $$ if (FileUtil.filesEqual(downloaded, existing)) [ FD ]
