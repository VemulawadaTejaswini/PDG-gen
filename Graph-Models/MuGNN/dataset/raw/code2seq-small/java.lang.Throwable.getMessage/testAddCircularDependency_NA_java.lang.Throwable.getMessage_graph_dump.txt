Line_4 $$ final Module b = ModuleManager.getInstance(getProject()).findModuleByName("B")-->Line_5 $$ ModuleRootModificationUtil.addDependency(a, b)[ FD ]
Line_2 $$ public void testAddCircularDependency() throws Exception -->Line_4 $$ final Module b = ModuleManager.getInstance(getProject()).findModuleByName("B")[ CD ]
Line_2 $$ public void testAddCircularDependency() throws Exception -->Line_3 $$ final Module a = ModuleManager.getInstance(getProject()).findModuleByName("A")[ CD ]
Line_3 $$ final Module a = ModuleManager.getInstance(getProject()).findModuleByName("A")-->Line_10 $$ final String expected = "Adding dependency on module '" + a.getName() + "'" + " will introduce circular dependency between modules '" + a.getName() + "' and '" + b.getName() + "'.\n" + "Add dependency anyway?"[ FD ]
Line_4 $$ final Module b = ModuleManager.getInstance(getProject()).findModuleByName("B")-->Line_10 $$ final String expected = "Adding dependency on module '" + a.getName() + "'" + " will introduce circular dependency between modules '" + a.getName() + "' and '" + b.getName() + "'.\n" + "Add dependency anyway?"[ FD ]
Line_10 $$ final String expected = "Adding dependency on module '" + a.getName() + "'" + " will introduce circular dependency between modules '" + a.getName() + "' and '" + b.getName() + "'.\n" + "Add dependency anyway?"-->Line_12 $$ assertEquals(expected, message)[ FD ]
Line_11 $$ String message = e.getMessage()-->Line_12 $$ assertEquals(expected, message)[ FD ]
Line_2 $$ public void testAddCircularDependency() throws Exception -->Line_5 $$ ModuleRootModificationUtil.addDependency(a, b)[ CD ]
Line_3 $$ final Module a = ModuleManager.getInstance(getProject()).findModuleByName("A")-->Line_5 $$ ModuleRootModificationUtil.addDependency(a, b)[ FD ]
