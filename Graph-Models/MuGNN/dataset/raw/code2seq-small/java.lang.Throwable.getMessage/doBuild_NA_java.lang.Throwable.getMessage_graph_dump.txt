Line_4 $$ final Set<File> filesToCompile = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_21 $$ return compile(context, chunk, dirtyFilesHolder, filesToCompile, outputConsumer, compilingTool)[ FD ]
Line_15 $$ if (logger.isEnabled()) -->Line_16 $$ if (!filesToCompile.isEmpty()) [ CD ]
Line_2 $$ public ExitCode doBuild(@NotNull CompileContext context, @NotNull ModuleChunk chunk, @NotNull DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, @NotNull OutputConsumer outputConsumer, JavaCompilingTool compilingTool) throws ProjectBuildException, IOException -->Line_14 $$ final ProjectBuilderLogger logger = context.getLoggingManager().getProjectBuilderLogger()[ FD ]
Line_16 $$ if (!filesToCompile.isEmpty()) -->Line_17 $$ logger.logCompiledFiles(filesToCompile, BUILDER_NAME, "Compiling files:")[ CD ]
Line_4 $$ final Set<File> filesToCompile = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_8 $$ filesToCompile.add(file)[ FD ]
Line_13 $$ if (JavaBuilderUtil.isCompileJavaIncrementally(context)) -->Line_14 $$ final ProjectBuilderLogger logger = context.getLoggingManager().getProjectBuilderLogger()[ CD ]
Line_5 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_8 $$ filesToCompile.add(file)[ FD ]
Line_2 $$ public ExitCode doBuild(@NotNull CompileContext context, @NotNull ModuleChunk chunk, @NotNull DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, @NotNull OutputConsumer outputConsumer, JavaCompilingTool compilingTool) throws ProjectBuildException, IOException -->Line_21 $$ return compile(context, chunk, dirtyFilesHolder, filesToCompile, outputConsumer, compilingTool)[ FD ]
Line_2 $$ public ExitCode doBuild(@NotNull CompileContext context, @NotNull ModuleChunk chunk, @NotNull DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, @NotNull OutputConsumer outputConsumer, JavaCompilingTool compilingTool) throws ProjectBuildException, IOException -->Line_5 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() [ FD ]
Line_13 $$ if (JavaBuilderUtil.isCompileJavaIncrementally(context)) -->Line_15 $$ if (logger.isEnabled()) [ CD ]
Line_2 $$ public ExitCode doBuild(@NotNull CompileContext context, @NotNull ModuleChunk chunk, @NotNull DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, @NotNull OutputConsumer outputConsumer, JavaCompilingTool compilingTool) throws ProjectBuildException, IOException -->Line_41 $$ context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.ERROR, message))[ FD ]
Line_5 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_10 $$ return true[ CD ]
Line_7 $$ if (JAVA_SOURCES_FILTER.accept(file) && ourCompilableModuleTypes.contains(target.getModule().getModuleType())) -->Line_8 $$ filesToCompile.add(file)[ CD ]
Line_5 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_7 $$ if (JAVA_SOURCES_FILTER.accept(file) && ourCompilableModuleTypes.contains(target.getModule().getModuleType())) [ CD ]
Line_5 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_7 $$ if (JAVA_SOURCES_FILTER.accept(file) && ourCompilableModuleTypes.contains(target.getModule().getModuleType())) [ FD ]
Line_4 $$ final Set<File> filesToCompile = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_17 $$ logger.logCompiledFiles(filesToCompile, BUILDER_NAME, "Compiling files:")[ FD ]
Line_2 $$ public ExitCode doBuild(@NotNull CompileContext context, @NotNull ModuleChunk chunk, @NotNull DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, @NotNull OutputConsumer outputConsumer, JavaCompilingTool compilingTool) throws ProjectBuildException, IOException -->Line_13 $$ if (JavaBuilderUtil.isCompileJavaIncrementally(context)) [ FD ]
Line_4 $$ final Set<File> filesToCompile = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_16 $$ if (!filesToCompile.isEmpty()) [ FD ]
