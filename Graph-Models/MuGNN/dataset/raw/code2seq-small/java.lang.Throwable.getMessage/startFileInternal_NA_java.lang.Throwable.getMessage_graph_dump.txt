Line_22 $$ if (isPermissionEnabled) -->Line_23 $$ if (overwrite && myFile != null) [ CD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_34 $$ if (!create) [ FD ]
Line_10 $$ if (dir.isInAnEZ(iip)) -->Line_18 $$ feInfo = new FileEncryptionInfo(suite, edek.getEncryptedKeyVersion().getMaterial(), edek.getEncryptedKeyIv(), edek.getEncryptionKeyVersionName())[ CD ]
Line_52 $$ Path parent = new Path(src).getParent()-->Line_53 $$ if (parent != null && mkdirsRecursively(parent.toString(), permissions, true, now())) [ FD ]
Line_54 $$ newNode = dir.addFile(src, permissions, replication, blockSize, holder, clientMachine)-->Line_56 $$ if (newNode == null) [ FD ]
Line_33 $$ if (myFile == null) -->Line_38 $$ if (overwrite) [ CD ]
Line_23 $$ if (overwrite && myFile != null) -->Line_24 $$ checkPathAccess(pc, src, FsAction.WRITE)[ CD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_26 $$ checkAncestorAccess(pc, src, FsAction.WRITE)[ FD ]
Line_4 $$ final INodesInPath iip = dir.getINodesInPath4Write(src)-->Line_5 $$ final INode inode = iip.getLastINode()[ FD ]
Line_51 $$ INodeFile newNode = null-->Line_54 $$ newNode = dir.addFile(src, permissions, replication, blockSize, holder, clientMachine)[ FD ]
Line_33 $$ if (myFile == null) -->Line_34 $$ if (!create) [ CD ]
Line_9 $$ FileEncryptionInfo feInfo = null-->Line_19 $$ Preconditions.checkNotNull(feInfo)[ FD ]
Line_65 $$ if (NameNode.stateChangeLog.isDebugEnabled()) -->Line_66 $$ NameNode.stateChangeLog.debug("DIR* NameSystem.startFile: added " + src + " inode " + newNode.getId() + " " + holder)[ CD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_4 $$ final INodesInPath iip = dir.getINodesInPath4Write(src)[ CD ]
Line_18 $$ feInfo = new FileEncryptionInfo(suite, edek.getEncryptedKeyVersion().getMaterial(), edek.getEncryptedKeyIv(), edek.getEncryptionKeyVersionName())-->Line_61 $$ dir.setFileEncryptionInfo(src, feInfo)[ FD ]
Line_10 $$ if (dir.isInAnEZ(iip)) -->Line_15 $$ if (!ezKeyName.equals(edek.getEncryptionKeyName())) [ CD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_23 $$ if (overwrite && myFile != null) [ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_53 $$ if (parent != null && mkdirsRecursively(parent.toString(), permissions, true, now())) [ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_5 $$ final INode inode = iip.getLastINode()[ CD ]
Line_51 $$ INodeFile newNode = null-->Line_64 $$ getEditLog().logOpenFile(src, newNode, logRetryEntry)[ FD ]
Line_54 $$ newNode = dir.addFile(src, permissions, replication, blockSize, holder, clientMachine)-->Line_62 $$ newNode = dir.getInode(newNode.getId()).asFile()[ FD ]
Line_18 $$ feInfo = new FileEncryptionInfo(suite, edek.getEncryptedKeyVersion().getMaterial(), edek.getEncryptedKeyIv(), edek.getEncryptionKeyVersionName())-->Line_19 $$ Preconditions.checkNotNull(feInfo)[ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_6 $$ if (inode != null && inode.isDirectory()) [ CD ]
Line_14 $$ String ezKeyName = dir.getKeyName(iip)-->Line_15 $$ if (!ezKeyName.equals(edek.getEncryptionKeyName())) [ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_21 $$ final INodeFile myFile = INodeFile.valueOf(inode, src, true)[ CD ]
Line_21 $$ final INodeFile myFile = INodeFile.valueOf(inode, src, true)-->Line_33 $$ if (myFile == null) [ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_42 $$ logAuditEvent(false, "delete", src)[ FD ]
Line_9 $$ FileEncryptionInfo feInfo = null-->Line_61 $$ dir.setFileEncryptionInfo(src, feInfo)[ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_9 $$ FileEncryptionInfo feInfo = null[ CD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_46 $$ recoverLeaseInternal(myFile, src, holder, clientMachine, false)[ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_59 $$ leaseManager.addLease(newNode.getFileUnderConstructionFeature().getClientName(), src)[ FD ]
Line_51 $$ INodeFile newNode = null-->Line_59 $$ leaseManager.addLease(newNode.getFileUnderConstructionFeature().getClientName(), src)[ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_18 $$ feInfo = new FileEncryptionInfo(suite, edek.getEncryptedKeyVersion().getMaterial(), edek.getEncryptedKeyIv(), edek.getEncryptionKeyVersionName())[ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_21 $$ final INodeFile myFile = INodeFile.valueOf(inode, src, true)[ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_29 $$ if (!createParent) [ FD ]
Line_60 $$ if (feInfo != null) -->Line_62 $$ newNode = dir.getInode(newNode.getId()).asFile()[ CD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_30 $$ verifyParentDir(src)[ FD ]
Line_5 $$ final INode inode = iip.getLastINode()-->Line_6 $$ if (inode != null && inode.isDirectory()) [ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_40 $$ deleteInt(src, true, false)[ FD ]
Line_29 $$ if (!createParent) -->Line_30 $$ verifyParentDir(src)[ CD ]
Line_38 $$ if (overwrite) -->Line_46 $$ recoverLeaseInternal(myFile, src, holder, clientMachine, false)[ CD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_64 $$ getEditLog().logOpenFile(src, newNode, logRetryEntry)[ FD ]
Line_5 $$ final INode inode = iip.getLastINode()-->Line_21 $$ final INodeFile myFile = INodeFile.valueOf(inode, src, true)[ FD ]
Line_18 $$ feInfo = new FileEncryptionInfo(suite, edek.getEncryptedKeyVersion().getMaterial(), edek.getEncryptedKeyIv(), edek.getEncryptionKeyVersionName())-->Line_60 $$ if (feInfo != null) [ FD ]
Line_23 $$ if (overwrite && myFile != null) -->Line_26 $$ checkAncestorAccess(pc, src, FsAction.WRITE)[ CD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_29 $$ if (!createParent) [ CD ]
Line_51 $$ INodeFile newNode = null-->Line_62 $$ newNode = dir.getInode(newNode.getId()).asFile()[ FD ]
Line_53 $$ if (parent != null && mkdirsRecursively(parent.toString(), permissions, true, now())) -->Line_54 $$ newNode = dir.addFile(src, permissions, replication, blockSize, holder, clientMachine)[ CD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_61 $$ dir.setFileEncryptionInfo(src, feInfo)[ FD ]
Line_54 $$ newNode = dir.addFile(src, permissions, replication, blockSize, holder, clientMachine)-->Line_64 $$ getEditLog().logOpenFile(src, newNode, logRetryEntry)[ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_10 $$ if (dir.isInAnEZ(iip)) [ CD ]
Line_54 $$ newNode = dir.addFile(src, permissions, replication, blockSize, holder, clientMachine)-->Line_66 $$ NameNode.stateChangeLog.debug("DIR* NameSystem.startFile: added " + src + " inode " + newNode.getId() + " " + holder)[ FD ]
Line_62 $$ newNode = dir.getInode(newNode.getId()).asFile()-->Line_66 $$ NameNode.stateChangeLog.debug("DIR* NameSystem.startFile: added " + src + " inode " + newNode.getId() + " " + holder)[ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_15 $$ if (!ezKeyName.equals(edek.getEncryptionKeyName())) [ FD ]
Line_4 $$ final INodesInPath iip = dir.getINodesInPath4Write(src)-->Line_10 $$ if (dir.isInAnEZ(iip)) [ FD ]
Line_10 $$ if (dir.isInAnEZ(iip)) -->Line_14 $$ String ezKeyName = dir.getKeyName(iip)[ CD ]
Line_10 $$ if (dir.isInAnEZ(iip)) -->Line_11 $$ if (suite == null || edek == null) [ CD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_22 $$ if (isPermissionEnabled) [ CD ]
Line_9 $$ FileEncryptionInfo feInfo = null-->Line_60 $$ if (feInfo != null) [ FD ]
Line_4 $$ final INodesInPath iip = dir.getINodesInPath4Write(src)-->Line_14 $$ String ezKeyName = dir.getKeyName(iip)[ FD ]
Line_21 $$ final INodeFile myFile = INodeFile.valueOf(inode, src, true)-->Line_46 $$ recoverLeaseInternal(myFile, src, holder, clientMachine, false)[ FD ]
Line_60 $$ if (feInfo != null) -->Line_61 $$ dir.setFileEncryptionInfo(src, feInfo)[ CD ]
Line_51 $$ INodeFile newNode = null-->Line_66 $$ NameNode.stateChangeLog.debug("DIR* NameSystem.startFile: added " + src + " inode " + newNode.getId() + " " + holder)[ FD ]
Line_9 $$ FileEncryptionInfo feInfo = null-->Line_18 $$ feInfo = new FileEncryptionInfo(suite, edek.getEncryptedKeyVersion().getMaterial(), edek.getEncryptedKeyIv(), edek.getEncryptionKeyVersionName())[ FD ]
Line_51 $$ INodeFile newNode = null-->Line_56 $$ if (newNode == null) [ FD ]
Line_54 $$ newNode = dir.addFile(src, permissions, replication, blockSize, holder, clientMachine)-->Line_59 $$ leaseManager.addLease(newNode.getFileUnderConstructionFeature().getClientName(), src)[ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_54 $$ newNode = dir.addFile(src, permissions, replication, blockSize, holder, clientMachine)[ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_4 $$ final INodesInPath iip = dir.getINodesInPath4Write(src)[ FD ]
Line_2 $$ private void startFileInternal(FSPermissionChecker pc, String src, PermissionStatus permissions, String holder, String clientMachine, boolean create, boolean overwrite, boolean createParent, short replication, long blockSize, CipherSuite suite, EncryptedKeyVersion edek, boolean logRetryEntry) throws FileAlreadyExistsException, AccessControlException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, RetryStartFileException, IOException -->Line_24 $$ checkPathAccess(pc, src, FsAction.WRITE)[ FD ]
Line_10 $$ if (dir.isInAnEZ(iip)) -->Line_19 $$ Preconditions.checkNotNull(feInfo)[ CD ]
Line_62 $$ newNode = dir.getInode(newNode.getId()).asFile()-->Line_64 $$ getEditLog().logOpenFile(src, newNode, logRetryEntry)[ FD ]
