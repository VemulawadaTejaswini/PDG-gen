Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_19 $$ String message = logRecords.get(0).getMessage()-->Line_20 $$ int index = message.lastIndexOf(' ')[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LocalProcessExecutor.class.getName(), Level.SEVERE)) -->Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_23 $$ File file = new File(message.substring(index + 1))-->Line_25 $$ file.delete()[ FD ]
Line_19 $$ String message = logRecords.get(0).getMessage()-->Line_23 $$ File file = new File(message.substring(index + 1))[ FD ]
Line_23 $$ File file = new File(message.substring(index + 1))-->Line_24 $$ Assert.assertTrue(file.exists())[ FD ]
Line_7 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_16 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_7 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_17 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_5 $$ BrokenPipingProcessCallable brokenPipingProcessCallable = new BrokenPipingProcessCallable()-->Line_6 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), brokenPipingProcessCallable)[ FD ]
Line_6 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), brokenPipingProcessCallable)-->Line_7 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_19 $$ String message = logRecords.get(0).getMessage()[ FD ]
Line_7 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_9 $$ future.get()[ FD ]
Line_19 $$ String message = logRecords.get(0).getMessage()-->Line_22 $$ Assert.assertEquals("Dumping content of corrupted object input stream to", message.substring(0, index))[ FD ]
Line_20 $$ int index = message.lastIndexOf(' ')-->Line_22 $$ Assert.assertEquals("Dumping content of corrupted object input stream to", message.substring(0, index))[ FD ]
Line_12 $$ Throwable cause = ee.getCause()-->Line_14 $$ Assert.assertEquals("Corrupted object input stream", cause.getMessage())[ FD ]
