Line_17 $$ LogRecord logRecord2 = logRecords.get(1)-->Line_18 $$ Assert.assertEquals("_nullValue is not initialized", logRecord2.getMessage())[ FD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_25 $$ threadLocalDistributor = new ThreadLocalDistributor()[ FD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_5 $$ threadLocalDistributor.afterPropertiesSet()[ FD ]
Line_25 $$ threadLocalDistributor = new ThreadLocalDistributor()-->Line_28 $$ threadLocalDistributor.afterPropertiesSet()[ FD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_10 $$ threadLocalDistributor.setThreadLocalSources(_keyValuePairs)[ FD ]
Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ LogRecord logRecord1 = logRecords.get(0)[ FD ]
Line_25 $$ threadLocalDistributor = new ThreadLocalDistributor()-->Line_26 $$ threadLocalDistributor.setClassLoader(getClassLoader())[ FD ]
Line_21 $$ List<ThreadLocal<Serializable>> threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_30 $$ threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")[ FD ]
Line_19 $$ LogRecord logRecord3 = logRecords.get(2)-->Line_20 $$ Assert.assertEquals("_object is not of type ThreadLocal", logRecord3.getMessage())[ FD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_26 $$ threadLocalDistributor.setClassLoader(getClassLoader())[ FD ]
Line_25 $$ threadLocalDistributor = new ThreadLocalDistributor()-->Line_30 $$ threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")[ FD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_21 $$ List<ThreadLocal<Serializable>> threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_29 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_11 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(ThreadLocalDistributor.class.getName(), Level.WARNING)) -->Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ Assert.assertEquals(3, logRecords.size())[ FD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_9 $$ threadLocalDistributor.setClassLoader(getClassLoader())[ FD ]
Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_21 $$ List<ThreadLocal<Serializable>> threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_31 $$ Assert.assertEquals(1, threadLocals.size())[ FD ]
Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_19 $$ LogRecord logRecord3 = logRecords.get(2)[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_16 $$ Assert.assertEquals("_nonStatic is not a static ThreadLocal", logRecord1.getMessage())[ FD ]
Line_2 $$ public void testAfterPropertiesSet() throws Exception -->Line_10 $$ threadLocalDistributor.setThreadLocalSources(_keyValuePairs)[ CD ]
Line_2 $$ public void testAfterPropertiesSet() throws Exception -->Line_9 $$ threadLocalDistributor.setClassLoader(getClassLoader())[ CD ]
Line_21 $$ List<ThreadLocal<Serializable>> threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_32 $$ Assert.assertSame(TestClass._threadLocal, threadLocals.get(0))[ FD ]
Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ LogRecord logRecord2 = logRecords.get(1)[ FD ]
Line_2 $$ public void testAfterPropertiesSet() throws Exception -->Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()[ CD ]
Line_21 $$ List<ThreadLocal<Serializable>> threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_22 $$ Assert.assertEquals(1, threadLocals.size())[ FD ]
Line_11 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(ThreadLocalDistributor.class.getName(), Level.WARNING)) -->Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_30 $$ threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_31 $$ Assert.assertEquals(1, threadLocals.size())[ FD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_30 $$ threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")[ FD ]
Line_25 $$ threadLocalDistributor = new ThreadLocalDistributor()-->Line_27 $$ threadLocalDistributor.setThreadLocalSources(_keyValuePairs)[ FD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_13 $$ threadLocalDistributor.afterPropertiesSet()[ FD ]
Line_21 $$ List<ThreadLocal<Serializable>> threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_23 $$ Assert.assertSame(TestClass._threadLocal, threadLocals.get(0))[ FD ]
Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_29 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_27 $$ threadLocalDistributor.setThreadLocalSources(_keyValuePairs)[ FD ]
Line_30 $$ threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_32 $$ Assert.assertSame(TestClass._threadLocal, threadLocals.get(0))[ FD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_28 $$ threadLocalDistributor.afterPropertiesSet()[ FD ]
