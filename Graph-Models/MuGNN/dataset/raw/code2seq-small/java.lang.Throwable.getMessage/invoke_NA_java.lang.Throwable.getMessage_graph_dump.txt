Line_5 $$ if (myIsDirectory) -->Line_16 $$ if (newDirectories != null) [ CD ]
Line_11 $$ int pos = myNewFileName.lastIndexOf("/")-->Line_13 $$ newDirectories = myNewFileName.substring(0, pos)[ FD ]
Line_28 $$ final FileType type = FileTypeRegistry.getInstance().getFileTypeByFileName(newFileName)-->Line_29 $$ final PsiFile psiFile = PsiFileFactory.getInstance(project).createFileFromText("_" + newFileName, type, text)[ FD ]
Line_31 $$ text = psiElement.getText()-->Line_39 $$ document.setText(text)[ FD ]
Line_25 $$ final PsiFile newFile = directory.createFile(newFileName)-->Line_34 $$ final FileEditor[] fileEditors = editorManager.openFile(newFile.getVirtualFile(), true)[ FD ]
Line_2 $$ private void invoke(@NotNull Project project, PsiDirectory myDirectory) throws IncorrectOperationException -->Line_20 $$ directory = new PsiDirectoryImpl((PsiManagerImpl) myDirectory.getManager(), vfsDir)[ FD ]
Line_5 $$ if (myIsDirectory) -->Line_9 $$ String newDirectories = null[ CD ]
Line_9 $$ String newDirectories = null-->Line_18 $$ VfsUtil.createDirectoryIfMissing(myDirectory.getVirtualFile(), newDirectories)[ FD ]
Line_37 $$ if (fileEditor instanceof TextEditor) -->Line_43 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ CD ]
Line_26 $$ String text = getFileText()-->Line_39 $$ document.setText(text)[ FD ]
Line_15 $$ PsiDirectory directory = myDirectory-->Line_25 $$ final PsiFile newFile = directory.createFile(newFileName)[ FD ]
Line_38 $$ final Document document = ((TextEditor) fileEditor).getEditor().getDocument()-->Line_43 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_5 $$ if (myIsDirectory) -->Line_27 $$ if (text != null) [ CD ]
Line_26 $$ String text = getFileText()-->Line_35 $$ if (text != null) [ FD ]
Line_5 $$ if (myIsDirectory) -->Line_15 $$ PsiDirectory directory = myDirectory[ CD ]
Line_13 $$ newDirectories = myNewFileName.substring(0, pos)-->Line_18 $$ VfsUtil.createDirectoryIfMissing(myDirectory.getVirtualFile(), newDirectories)[ FD ]
Line_9 $$ String newDirectories = null-->Line_16 $$ if (newDirectories != null) [ FD ]
Line_29 $$ final PsiFile psiFile = PsiFileFactory.getInstance(project).createFileFromText("_" + newFileName, type, text)-->Line_30 $$ final PsiElement psiElement = CodeStyleManager.getInstance(project).reformat(psiFile)[ FD ]
Line_10 $$ if (myNewFileName.contains("/")) -->Line_11 $$ int pos = myNewFileName.lastIndexOf("/")[ CD ]
Line_15 $$ PsiDirectory directory = myDirectory-->Line_20 $$ directory = new PsiDirectoryImpl((PsiManagerImpl) myDirectory.getManager(), vfsDir)[ FD ]
Line_27 $$ if (text != null) -->Line_28 $$ final FileType type = FileTypeRegistry.getInstance().getFileTypeByFileName(newFileName)[ CD ]
Line_27 $$ if (text != null) -->Line_30 $$ final PsiElement psiElement = CodeStyleManager.getInstance(project).reformat(psiFile)[ CD ]
Line_20 $$ directory = new PsiDirectoryImpl((PsiManagerImpl) myDirectory.getManager(), vfsDir)-->Line_33 $$ final FileEditorManager editorManager = FileEditorManager.getInstance(directory.getProject())[ FD ]
Line_10 $$ if (myNewFileName.contains("/")) -->Line_13 $$ newDirectories = myNewFileName.substring(0, pos)[ CD ]
Line_5 $$ if (myIsDirectory) -->Line_26 $$ String text = getFileText()[ CD ]
Line_12 $$ newFileName = myNewFileName.substring(pos + 1)-->Line_28 $$ final FileType type = FileTypeRegistry.getInstance().getFileTypeByFileName(newFileName)[ FD ]
Line_36 $$ for (FileEditor fileEditor : fileEditors) -->Line_37 $$ if (fileEditor instanceof TextEditor) [ FD ]
Line_5 $$ if (myIsDirectory) -->Line_10 $$ if (myNewFileName.contains("/")) [ CD ]
Line_8 $$ String newFileName = myNewFileName-->Line_25 $$ final PsiFile newFile = directory.createFile(newFileName)[ FD ]
Line_30 $$ final PsiElement psiElement = CodeStyleManager.getInstance(project).reformat(psiFile)-->Line_31 $$ text = psiElement.getText()[ FD ]
Line_38 $$ final Document document = ((TextEditor) fileEditor).getEditor().getDocument()-->Line_41 $$ FileDocumentManager.getInstance().saveDocument(document)[ FD ]
Line_37 $$ if (fileEditor instanceof TextEditor) -->Line_40 $$ if (ApplicationManager.getApplication().isUnitTestMode()) [ CD ]
Line_12 $$ newFileName = myNewFileName.substring(pos + 1)-->Line_25 $$ final PsiFile newFile = directory.createFile(newFileName)[ FD ]
Line_26 $$ String text = getFileText()-->Line_27 $$ if (text != null) [ FD ]
Line_37 $$ if (fileEditor instanceof TextEditor) -->Line_38 $$ final Document document = ((TextEditor) fileEditor).getEditor().getDocument()[ CD ]
Line_2 $$ private void invoke(@NotNull Project project, PsiDirectory myDirectory) throws IncorrectOperationException -->Line_30 $$ final PsiElement psiElement = CodeStyleManager.getInstance(project).reformat(psiFile)[ FD ]
Line_27 $$ if (text != null) -->Line_29 $$ final PsiFile psiFile = PsiFileFactory.getInstance(project).createFileFromText("_" + newFileName, type, text)[ CD ]
Line_2 $$ private void invoke(@NotNull Project project, PsiDirectory myDirectory) throws IncorrectOperationException -->Line_43 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_9 $$ String newDirectories = null-->Line_19 $$ VirtualFile vfsDir = VfsUtil.findRelativeFile(myDirectory.getVirtualFile(), ArrayUtil.toStringArray(StringUtil.split(newDirectories, "/")))[ FD ]
Line_2 $$ private void invoke(@NotNull Project project, PsiDirectory myDirectory) throws IncorrectOperationException -->Line_29 $$ final PsiFile psiFile = PsiFileFactory.getInstance(project).createFileFromText("_" + newFileName, type, text)[ FD ]
Line_5 $$ if (myIsDirectory) -->Line_25 $$ final PsiFile newFile = directory.createFile(newFileName)[ CD ]
Line_15 $$ PsiDirectory directory = myDirectory-->Line_33 $$ final FileEditorManager editorManager = FileEditorManager.getInstance(directory.getProject())[ FD ]
Line_37 $$ if (fileEditor instanceof TextEditor) -->Line_39 $$ document.setText(text)[ CD ]
Line_20 $$ directory = new PsiDirectoryImpl((PsiManagerImpl) myDirectory.getManager(), vfsDir)-->Line_25 $$ final PsiFile newFile = directory.createFile(newFileName)[ FD ]
Line_13 $$ newDirectories = myNewFileName.substring(0, pos)-->Line_16 $$ if (newDirectories != null) [ FD ]
Line_9 $$ String newDirectories = null-->Line_13 $$ newDirectories = myNewFileName.substring(0, pos)[ FD ]
Line_2 $$ private void invoke(@NotNull Project project, PsiDirectory myDirectory) throws IncorrectOperationException -->Line_18 $$ VfsUtil.createDirectoryIfMissing(myDirectory.getVirtualFile(), newDirectories)[ FD ]
Line_5 $$ if (myIsDirectory) -->Line_8 $$ String newFileName = myNewFileName[ CD ]
Line_5 $$ if (myIsDirectory) -->Line_34 $$ final FileEditor[] fileEditors = editorManager.openFile(newFile.getVirtualFile(), true)[ CD ]
Line_5 $$ if (myIsDirectory) -->Line_6 $$ myDirectory.createSubdirectory(myNewFileName)[ CD ]
Line_26 $$ String text = getFileText()-->Line_29 $$ final PsiFile psiFile = PsiFileFactory.getInstance(project).createFileFromText("_" + newFileName, type, text)[ FD ]
Line_38 $$ final Document document = ((TextEditor) fileEditor).getEditor().getDocument()-->Line_39 $$ document.setText(text)[ FD ]
Line_33 $$ final FileEditorManager editorManager = FileEditorManager.getInstance(directory.getProject())-->Line_34 $$ final FileEditor[] fileEditors = editorManager.openFile(newFile.getVirtualFile(), true)[ FD ]
Line_8 $$ String newFileName = myNewFileName-->Line_28 $$ final FileType type = FileTypeRegistry.getInstance().getFileTypeByFileName(newFileName)[ FD ]
Line_13 $$ newDirectories = myNewFileName.substring(0, pos)-->Line_19 $$ VirtualFile vfsDir = VfsUtil.findRelativeFile(myDirectory.getVirtualFile(), ArrayUtil.toStringArray(StringUtil.split(newDirectories, "/")))[ FD ]
Line_5 $$ if (myIsDirectory) -->Line_33 $$ final FileEditorManager editorManager = FileEditorManager.getInstance(directory.getProject())[ CD ]
Line_5 $$ if (myIsDirectory) -->Line_35 $$ if (text != null) [ CD ]
Line_40 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_41 $$ FileDocumentManager.getInstance().saveDocument(document)[ CD ]
Line_8 $$ String newFileName = myNewFileName-->Line_12 $$ newFileName = myNewFileName.substring(pos + 1)[ FD ]
Line_2 $$ private void invoke(@NotNull Project project, PsiDirectory myDirectory) throws IncorrectOperationException -->Line_19 $$ VirtualFile vfsDir = VfsUtil.findRelativeFile(myDirectory.getVirtualFile(), ArrayUtil.toStringArray(StringUtil.split(newDirectories, "/")))[ FD ]
Line_10 $$ if (myNewFileName.contains("/")) -->Line_12 $$ newFileName = myNewFileName.substring(pos + 1)[ CD ]
Line_2 $$ private void invoke(@NotNull Project project, PsiDirectory myDirectory) throws IncorrectOperationException -->Line_6 $$ myDirectory.createSubdirectory(myNewFileName)[ FD ]
Line_26 $$ String text = getFileText()-->Line_31 $$ text = psiElement.getText()[ FD ]
Line_27 $$ if (text != null) -->Line_31 $$ text = psiElement.getText()[ CD ]
Line_31 $$ text = psiElement.getText()-->Line_35 $$ if (text != null) [ FD ]
