Line_16 $$ localPaths = newLocalPaths-->Line_27 $$ if (localPaths != null) [ FD ]
Line_46 $$ byte[] buf = new byte[HdfsConstants.IO_FILE_BUFFER_SIZE]-->Line_48 $$ num = stream.read(buf)[ FD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_3 $$ long startTime = Time.monotonicNow()[ CD ]
Line_45 $$ int num = 1-->Line_48 $$ num = stream.read(buf)[ FD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_8 $$ if (fsImageName == null) [ FD ]
Line_7 $$ if (localPath.isDirectory()) -->Line_11 $$ newLocalPaths.add(new File(localPath, fsImageName))[ CD ]
Line_48 $$ num = stream.read(buf)-->Line_50 $$ received += num[ FD ]
Line_5 $$ List<File> newLocalPaths = new ArrayList<File>()-->Line_13 $$ newLocalPaths.add(localPath)[ FD ]
Line_49 $$ if (num > 0) -->Line_50 $$ received += num[ CD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_54 $$ if (throttler != null) [ FD ]
Line_18 $$ long received = 0-->Line_50 $$ received += num[ FD ]
Line_73 $$ if (digester != null) -->Line_75 $$ if (advertisedDigest != null && !computedDigest.equals(advertisedDigest)) [ CD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_19 $$ MessageDigest digester = null[ CD ]
Line_7 $$ if (localPath.isDirectory()) -->Line_8 $$ if (fsImageName == null) [ CD ]
Line_20 $$ if (getChecksum) -->Line_21 $$ digester = MD5Hash.getDigester()[ CD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_73 $$ if (digester != null) [ CD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_4 $$ if (localPaths != null) [ CD ]
Line_5 $$ List<File> newLocalPaths = new ArrayList<File>()-->Line_16 $$ localPaths = newLocalPaths[ FD ]
Line_19 $$ MessageDigest digester = null-->Line_73 $$ if (digester != null) [ FD ]
Line_73 $$ if (digester != null) -->Line_80 $$ return null[ CD ]
Line_48 $$ num = stream.read(buf)-->Line_52 $$ fos.write(buf, 0, num)[ FD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_61 $$ stream.close()[ FD ]
Line_28 $$ for (File f : localPaths) -->Line_37 $$ ((StorageErrorReporter) dstStorage).reportErrorOnFile(f)[ FD ]
Line_62 $$ for (FileOutputStream fos : outputStreams) -->Line_63 $$ fos.getChannel().force(true)[ FD ]
Line_51 $$ for (FileOutputStream fos : outputStreams) -->Line_52 $$ fos.write(buf, 0, num)[ FD ]
Line_45 $$ int num = 1-->Line_47 $$ while (num > 0) [ FD ]
Line_48 $$ num = stream.read(buf)-->Line_55 $$ throttler.throttle(num)[ FD ]
Line_54 $$ if (throttler != null) -->Line_55 $$ throttler.throttle(num)[ CD ]
Line_4 $$ if (localPaths != null) -->Line_5 $$ List<File> newLocalPaths = new ArrayList<File>()[ CD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_16 $$ localPaths = newLocalPaths[ FD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_27 $$ if (localPaths != null) [ FD ]
Line_73 $$ if (digester != null) -->Line_78 $$ return computedDigest[ CD ]
Line_6 $$ for (File localPath : localPaths) -->Line_7 $$ if (localPath.isDirectory()) [ FD ]
Line_6 $$ for (File localPath : localPaths) -->Line_13 $$ newLocalPaths.add(localPath)[ FD ]
Line_48 $$ num = stream.read(buf)-->Line_47 $$ while (num > 0) [ FD ]
Line_21 $$ digester = MD5Hash.getDigester()-->Line_74 $$ MD5Hash computedDigest = new MD5Hash(digester.digest())[ FD ]
Line_24 $$ boolean finishedReceiving = false-->Line_59 $$ finishedReceiving = true[ FD ]
Line_25 $$ List<FileOutputStream> outputStreams = Lists.newArrayList()-->Line_33 $$ outputStreams.add(new FileOutputStream(f))[ FD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_22 $$ stream = new DigestInputStream(stream, digester)[ FD ]
Line_28 $$ for (File f : localPaths) -->Line_30 $$ if (f.exists()) [ FD ]
Line_45 $$ int num = 1-->Line_49 $$ if (num > 0) [ FD ]
Line_48 $$ num = stream.read(buf)-->Line_49 $$ if (num > 0) [ FD ]
Line_51 $$ for (FileOutputStream fos : outputStreams) -->Line_64 $$ fos.close()[ FD ]
Line_73 $$ if (digester != null) -->Line_74 $$ MD5Hash computedDigest = new MD5Hash(digester.digest())[ CD ]
Line_62 $$ for (FileOutputStream fos : outputStreams) -->Line_64 $$ fos.close()[ FD ]
Line_47 $$ while (num > 0) -->Line_48 $$ num = stream.read(buf)[ CD ]
Line_22 $$ stream = new DigestInputStream(stream, digester)-->Line_48 $$ num = stream.read(buf)[ FD ]
Line_45 $$ int num = 1-->Line_55 $$ throttler.throttle(num)[ FD ]
Line_4 $$ if (localPaths != null) -->Line_16 $$ localPaths = newLocalPaths[ CD ]
Line_22 $$ stream = new DigestInputStream(stream, digester)-->Line_61 $$ stream.close()[ FD ]
Line_45 $$ int num = 1-->Line_52 $$ fos.write(buf, 0, num)[ FD ]
Line_5 $$ List<File> newLocalPaths = new ArrayList<File>()-->Line_11 $$ newLocalPaths.add(new File(localPath, fsImageName))[ FD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_24 $$ boolean finishedReceiving = false[ CD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_70 $$ double xferSec = Math.max(((float) (Time.monotonicNow() - startTime)) / 1000.0, 0.001)[ CD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_72 $$ LOG.info(String.format("Transfer took %.2fs at %.2f KB/s", xferSec, xferKb / xferSec))[ CD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_48 $$ num = stream.read(buf)[ FD ]
Line_19 $$ MessageDigest digester = null-->Line_21 $$ digester = MD5Hash.getDigester()[ FD ]
Line_7 $$ if (localPath.isDirectory()) -->Line_13 $$ newLocalPaths.add(localPath)[ CD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_25 $$ List<FileOutputStream> outputStreams = Lists.newArrayList()[ CD ]
Line_20 $$ if (getChecksum) -->Line_22 $$ stream = new DigestInputStream(stream, digester)[ CD ]
Line_45 $$ int num = 1-->Line_50 $$ received += num[ FD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_71 $$ long xferKb = received / 1024[ CD ]
Line_21 $$ digester = MD5Hash.getDigester()-->Line_73 $$ if (digester != null) [ FD ]
Line_25 $$ List<FileOutputStream> outputStreams = Lists.newArrayList()-->Line_41 $$ if (outputStreams.isEmpty()) [ FD ]
Line_51 $$ for (FileOutputStream fos : outputStreams) -->Line_63 $$ fos.getChannel().force(true)[ FD ]
Line_59 $$ finishedReceiving = true-->Line_66 $$ if (finishedReceiving && received != advertisedSize) [ FD ]
Line_19 $$ MessageDigest digester = null-->Line_74 $$ MD5Hash computedDigest = new MD5Hash(digester.digest())[ FD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_18 $$ long received = 0[ CD ]
Line_70 $$ double xferSec = Math.max(((float) (Time.monotonicNow() - startTime)) / 1000.0, 0.001)-->Line_72 $$ LOG.info(String.format("Transfer took %.2fs at %.2f KB/s", xferSec, xferKb / xferSec))[ FD ]
Line_49 $$ if (num > 0) -->Line_54 $$ if (throttler != null) [ CD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_55 $$ throttler.throttle(num)[ FD ]
Line_30 $$ if (f.exists()) -->Line_31 $$ LOG.warn("Overwriting existing file " + f + " with file downloaded from " + url)[ CD ]
Line_24 $$ boolean finishedReceiving = false-->Line_66 $$ if (finishedReceiving && received != advertisedSize) [ FD ]
Line_27 $$ if (localPaths != null) -->Line_41 $$ if (outputStreams.isEmpty()) [ CD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_20 $$ if (getChecksum) [ CD ]
Line_74 $$ MD5Hash computedDigest = new MD5Hash(digester.digest())-->Line_75 $$ if (advertisedDigest != null && !computedDigest.equals(advertisedDigest)) [ FD ]
Line_36 $$ if (dstStorage != null && (dstStorage instanceof StorageErrorReporter)) -->Line_37 $$ ((StorageErrorReporter) dstStorage).reportErrorOnFile(f)[ CD ]
Line_46 $$ byte[] buf = new byte[HdfsConstants.IO_FILE_BUFFER_SIZE]-->Line_52 $$ fos.write(buf, 0, num)[ FD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_4 $$ if (localPaths != null) [ FD ]
Line_2 $$ private static MD5Hash receiveFile(String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler) throws IOException -->Line_75 $$ if (advertisedDigest != null && !computedDigest.equals(advertisedDigest)) [ FD ]
Line_47 $$ while (num > 0) -->Line_49 $$ if (num > 0) [ CD ]
