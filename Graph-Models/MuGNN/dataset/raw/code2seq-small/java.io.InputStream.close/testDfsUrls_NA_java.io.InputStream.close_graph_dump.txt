Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_5 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_5 $$ FileSystem fs = cluster.getFileSystem()-->Line_23 $$ fs.delete(filePath, false)[ FD ]
Line_11 $$ for (int i = 0; i < fileContent.length; ++i) fileContent[i] = (byte) i-->Line_22 $$ for (int i = 0; i < fileContent.length; ++i) assertEquals(fileContent[i], bytes[i])[ FD ]
Line_5 $$ FileSystem fs = cluster.getFileSystem()-->Line_12 $$ OutputStream os = fs.create(filePath)[ FD ]
Line_17 $$ InputStream is = fileURL.openStream()-->Line_18 $$ assertNotNull(is)[ FD ]
Line_8 $$ Path filePath = new Path("/thefile")-->Line_16 $$ URL fileURL = new URL(uri.getScheme(), uri.getHost(), uri.getPort(), filePath.toString())[ FD ]
Line_19 $$ byte[] bytes = new byte[4096]-->Line_20 $$ assertEquals(1024, is.read(bytes))[ FD ]
Line_10 $$ byte[] fileContent = new byte[1024]-->Line_13 $$ os.write(fileContent)[ FD ]
Line_8 $$ Path filePath = new Path("/thefile")-->Line_12 $$ OutputStream os = fs.create(filePath)[ FD ]
Line_6 $$ FsUrlStreamHandlerFactory factory = new org.apache.hadoop.fs.FsUrlStreamHandlerFactory()-->Line_7 $$ java.net.URL.setURLStreamHandlerFactory(factory)[ FD ]
Line_12 $$ OutputStream os = fs.create(filePath)-->Line_14 $$ os.close()[ FD ]
Line_2 $$ public void testDfsUrls() throws IOException -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_17 $$ InputStream is = fileURL.openStream()-->Line_21 $$ is.close()[ FD ]
Line_2 $$ public void testDfsUrls() throws IOException -->Line_7 $$ java.net.URL.setURLStreamHandlerFactory(factory)[ CD ]
Line_2 $$ public void testDfsUrls() throws IOException -->Line_6 $$ FsUrlStreamHandlerFactory factory = new org.apache.hadoop.fs.FsUrlStreamHandlerFactory()[ CD ]
Line_2 $$ public void testDfsUrls() throws IOException -->Line_8 $$ Path filePath = new Path("/thefile")[ CD ]
Line_2 $$ public void testDfsUrls() throws IOException -->Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()[ CD ]
Line_16 $$ URL fileURL = new URL(uri.getScheme(), uri.getHost(), uri.getPort(), filePath.toString())-->Line_17 $$ InputStream is = fileURL.openStream()[ FD ]
Line_2 $$ public void testDfsUrls() throws IOException -->Line_5 $$ FileSystem fs = cluster.getFileSystem()[ CD ]
Line_17 $$ InputStream is = fileURL.openStream()-->Line_20 $$ assertEquals(1024, is.read(bytes))[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_26 $$ cluster.shutdown()[ FD ]
Line_5 $$ FileSystem fs = cluster.getFileSystem()-->Line_15 $$ URI uri = fs.getUri()[ FD ]
Line_8 $$ Path filePath = new Path("/thefile")-->Line_23 $$ fs.delete(filePath, false)[ FD ]
Line_15 $$ URI uri = fs.getUri()-->Line_16 $$ URL fileURL = new URL(uri.getScheme(), uri.getHost(), uri.getPort(), filePath.toString())[ FD ]
Line_12 $$ OutputStream os = fs.create(filePath)-->Line_13 $$ os.write(fileContent)[ FD ]
Line_5 $$ FileSystem fs = cluster.getFileSystem()-->Line_25 $$ fs.close()[ FD ]
