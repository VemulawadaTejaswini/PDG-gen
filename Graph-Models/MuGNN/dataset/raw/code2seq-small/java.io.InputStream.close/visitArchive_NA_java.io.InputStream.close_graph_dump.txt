Line_7 $$ final Enumeration<? extends ZipEntry> zipEntries = jarFile.entries()-->Line_9 $$ final ZipEntry zipEntry = zipEntries.nextElement()[ FD ]
Line_9 $$ final ZipEntry zipEntry = zipEntries.nextElement()-->Line_51 $$ final String name = extractName(zipEntry)[ FD ]
Line_28 $$ final ArchiveEntry entry = new ArchiveEntry() -->Line_36 $$ return inputStreamAccess[ CD ]
Line_9 $$ final ZipEntry zipEntry = zipEntries.nextElement()-->Line_52 $$ final String relativeName = extractRelativeName(zipEntry)[ FD ]
Line_17 $$ if (entryName.equals(getEntryBasePrefix())) -->Line_70 $$ final ArchiveEntryHandler entryHandler = context.obtainArchiveEntryHandler(entry)[ CD ]
Line_2 $$ public void visitArchive(ArchiveContext context) -->Line_8 $$ while (zipEntries.hasMoreElements()) [ CD ]
Line_24 $$ if (!subZipEntry.isDirectory()) -->Line_28 $$ final ArchiveEntry entry = new ArchiveEntry() [ CD ]
Line_3 $$ final JarFile jarFile = resolveJarFileReference()-->Line_7 $$ final Enumeration<? extends ZipEntry> zipEntries = jarFile.entries()[ FD ]
Line_8 $$ while (zipEntries.hasMoreElements()) -->Line_9 $$ final ZipEntry zipEntry = zipEntries.nextElement()[ CD ]
Line_24 $$ if (!subZipEntry.isDirectory()) -->Line_40 $$ entryHandler.handleEntry(entry, context)[ CD ]
Line_23 $$ while (subZipEntry != null) -->Line_42 $$ subZipEntry = jarInputStream.getNextEntry()[ CD ]
Line_9 $$ final ZipEntry zipEntry = zipEntries.nextElement()-->Line_57 $$ throw new ArchiveException(String.format("Unable to access stream from jar file [%s] for entry [%s]", jarFile.getName(), zipEntry.getName()))[ FD ]
Line_59 $$ final ArchiveEntry entry = new ArchiveEntry() -->Line_67 $$ return inputStreamAccess[ CD ]
Line_21 $$ final JarInputStream jarInputStream = new JarInputStream(is)-->Line_27 $$ final InputStreamAccess inputStreamAccess = buildByteBasedInputStreamAccess(name, jarInputStream)[ FD ]
Line_9 $$ final ZipEntry zipEntry = zipEntries.nextElement()-->Line_55 $$ inputStreamAccess = buildByteBasedInputStreamAccess(name, jarFile.getInputStream(zipEntry))[ FD ]
Line_3 $$ final JarFile jarFile = resolveJarFileReference()-->Line_55 $$ inputStreamAccess = buildByteBasedInputStreamAccess(name, jarFile.getInputStream(zipEntry))[ FD ]
Line_8 $$ while (zipEntries.hasMoreElements()) -->Line_14 $$ if (zipEntry.isDirectory()) [ CD ]
Line_22 $$ ZipEntry subZipEntry = jarInputStream.getNextEntry()-->Line_24 $$ if (!subZipEntry.isDirectory()) [ FD ]
Line_39 $$ final ArchiveEntryHandler entryHandler = context.obtainArchiveEntryHandler(entry)-->Line_71 $$ entryHandler.handleEntry(entry, context)[ FD ]
Line_9 $$ final ZipEntry zipEntry = zipEntries.nextElement()-->Line_14 $$ if (zipEntry.isDirectory()) [ FD ]
Line_21 $$ final JarInputStream jarInputStream = new JarInputStream(is)-->Line_42 $$ subZipEntry = jarInputStream.getNextEntry()[ FD ]
Line_3 $$ final JarFile jarFile = resolveJarFileReference()-->Line_4 $$ if (jarFile == null) [ FD ]
Line_17 $$ if (entryName.equals(getEntryBasePrefix())) -->Line_51 $$ final String name = extractName(zipEntry)[ CD ]
Line_2 $$ public void visitArchive(ArchiveContext context) -->Line_70 $$ final ArchiveEntryHandler entryHandler = context.obtainArchiveEntryHandler(entry)[ FD ]
Line_9 $$ final ZipEntry zipEntry = zipEntries.nextElement()-->Line_10 $$ final String entryName = extractName(zipEntry)[ FD ]
Line_2 $$ public void visitArchive(ArchiveContext context) -->Line_39 $$ final ArchiveEntryHandler entryHandler = context.obtainArchiveEntryHandler(entry)[ FD ]
Line_25 $$ final String name = extractName(subZipEntry)-->Line_55 $$ inputStreamAccess = buildByteBasedInputStreamAccess(name, jarFile.getInputStream(zipEntry))[ FD ]
Line_59 $$ final ArchiveEntry entry = new ArchiveEntry() -->Line_64 $$ return relativeName[ CD ]
Line_3 $$ final JarFile jarFile = resolveJarFileReference()-->Line_57 $$ throw new ArchiveException(String.format("Unable to access stream from jar file [%s] for entry [%s]", jarFile.getName(), zipEntry.getName()))[ FD ]
Line_8 $$ while (zipEntries.hasMoreElements()) -->Line_10 $$ final String entryName = extractName(zipEntry)[ CD ]
Line_2 $$ public void visitArchive(ArchiveContext context) -->Line_40 $$ entryHandler.handleEntry(entry, context)[ FD ]
Line_39 $$ final ArchiveEntryHandler entryHandler = context.obtainArchiveEntryHandler(entry)-->Line_40 $$ entryHandler.handleEntry(entry, context)[ FD ]
Line_22 $$ ZipEntry subZipEntry = jarInputStream.getNextEntry()-->Line_25 $$ final String name = extractName(subZipEntry)[ FD ]
Line_28 $$ final ArchiveEntry entry = new ArchiveEntry() -->Line_40 $$ entryHandler.handleEntry(entry, context)[ FD ]
Line_9 $$ final ZipEntry zipEntry = zipEntries.nextElement()-->Line_48 $$ throw new ArchiveException("Error accessing JarFile entry [" + zipEntry.getName() + "]", e)[ FD ]
Line_2 $$ public void visitArchive(ArchiveContext context) -->Line_71 $$ entryHandler.handleEntry(entry, context)[ FD ]
Line_2 $$ public void visitArchive(ArchiveContext context) -->Line_7 $$ final Enumeration<? extends ZipEntry> zipEntries = jarFile.entries()[ CD ]
Line_4 $$ if (jarFile == null) -->Line_5 $$ return[ CD ]
Line_22 $$ ZipEntry subZipEntry = jarInputStream.getNextEntry()-->Line_23 $$ while (subZipEntry != null) [ FD ]
Line_7 $$ final Enumeration<? extends ZipEntry> zipEntries = jarFile.entries()-->Line_8 $$ while (zipEntries.hasMoreElements()) [ FD ]
Line_24 $$ if (!subZipEntry.isDirectory()) -->Line_27 $$ final InputStreamAccess inputStreamAccess = buildByteBasedInputStreamAccess(name, jarInputStream)[ CD ]
Line_25 $$ final String name = extractName(subZipEntry)-->Line_27 $$ final InputStreamAccess inputStreamAccess = buildByteBasedInputStreamAccess(name, jarInputStream)[ FD ]
Line_19 $$ final InputStream is = new BufferedInputStream(jarFile.getInputStream(zipEntry))-->Line_45 $$ is.close()[ FD ]
Line_28 $$ final ArchiveEntry entry = new ArchiveEntry() -->Line_33 $$ return relativeName[ CD ]
Line_2 $$ public void visitArchive(ArchiveContext context) -->Line_4 $$ if (jarFile == null) [ CD ]
Line_28 $$ final ArchiveEntry entry = new ArchiveEntry() -->Line_30 $$ return name[ CD ]
Line_24 $$ if (!subZipEntry.isDirectory()) -->Line_26 $$ final String relativeName = extractRelativeName(subZipEntry)[ CD ]
Line_24 $$ if (!subZipEntry.isDirectory()) -->Line_39 $$ final ArchiveEntryHandler entryHandler = context.obtainArchiveEntryHandler(entry)[ CD ]
Line_8 $$ while (zipEntries.hasMoreElements()) -->Line_17 $$ if (entryName.equals(getEntryBasePrefix())) [ CD ]
Line_10 $$ final String entryName = extractName(zipEntry)-->Line_17 $$ if (entryName.equals(getEntryBasePrefix())) [ FD ]
Line_22 $$ ZipEntry subZipEntry = jarInputStream.getNextEntry()-->Line_26 $$ final String relativeName = extractRelativeName(subZipEntry)[ FD ]
Line_8 $$ while (zipEntries.hasMoreElements()) -->Line_11 $$ if (getEntryBasePrefix() != null && !entryName.startsWith(getEntryBasePrefix())) [ CD ]
Line_3 $$ final JarFile jarFile = resolveJarFileReference()-->Line_19 $$ final InputStream is = new BufferedInputStream(jarFile.getInputStream(zipEntry))[ FD ]
Line_9 $$ final ZipEntry zipEntry = zipEntries.nextElement()-->Line_19 $$ final InputStream is = new BufferedInputStream(jarFile.getInputStream(zipEntry))[ FD ]
Line_23 $$ while (subZipEntry != null) -->Line_24 $$ if (!subZipEntry.isDirectory()) [ CD ]
Line_59 $$ final ArchiveEntry entry = new ArchiveEntry() -->Line_61 $$ return name[ CD ]
Line_17 $$ if (entryName.equals(getEntryBasePrefix())) -->Line_71 $$ entryHandler.handleEntry(entry, context)[ CD ]
Line_28 $$ final ArchiveEntry entry = new ArchiveEntry() -->Line_71 $$ entryHandler.handleEntry(entry, context)[ FD ]
Line_28 $$ final ArchiveEntry entry = new ArchiveEntry() -->Line_70 $$ final ArchiveEntryHandler entryHandler = context.obtainArchiveEntryHandler(entry)[ FD ]
Line_28 $$ final ArchiveEntry entry = new ArchiveEntry() -->Line_39 $$ final ArchiveEntryHandler entryHandler = context.obtainArchiveEntryHandler(entry)[ FD ]
Line_21 $$ final JarInputStream jarInputStream = new JarInputStream(is)-->Line_22 $$ ZipEntry subZipEntry = jarInputStream.getNextEntry()[ FD ]
Line_17 $$ if (entryName.equals(getEntryBasePrefix())) -->Line_52 $$ final String relativeName = extractRelativeName(zipEntry)[ CD ]
Line_24 $$ if (!subZipEntry.isDirectory()) -->Line_25 $$ final String name = extractName(subZipEntry)[ CD ]
Line_2 $$ public void visitArchive(ArchiveContext context) -->Line_3 $$ final JarFile jarFile = resolveJarFileReference()[ CD ]
Line_10 $$ final String entryName = extractName(zipEntry)-->Line_11 $$ if (getEntryBasePrefix() != null && !entryName.startsWith(getEntryBasePrefix())) [ FD ]
