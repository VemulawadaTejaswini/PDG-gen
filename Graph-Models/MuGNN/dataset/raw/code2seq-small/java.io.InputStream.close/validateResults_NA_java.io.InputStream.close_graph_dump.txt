Line_2 $$ private void validateResults(AbstractScannerImpl.ResultCollector resultCollector, Class... expectedClasses) throws IOException -->Line_5 $$ assertTrue(resultCollector.getClassDescriptorSet().contains(new ClassDescriptorImpl(expectedClass.getName(), null)))[ FD ]
Line_8 $$ for (MappingFileDescriptor mappingFileDescriptor : resultCollector.getMappingFileSet()) -->Line_9 $$ assertNotNull(mappingFileDescriptor.getStreamAccess())[ FD ]
Line_2 $$ private void validateResults(AbstractScannerImpl.ResultCollector resultCollector, Class... expectedClasses) throws IOException -->Line_3 $$ assertEquals(3, resultCollector.getClassDescriptorSet().size())[ FD ]
Line_8 $$ for (MappingFileDescriptor mappingFileDescriptor : resultCollector.getMappingFileSet()) -->Line_10 $$ final InputStream stream = mappingFileDescriptor.getStreamAccess().accessInputStream()[ FD ]
Line_2 $$ private void validateResults(AbstractScannerImpl.ResultCollector resultCollector, Class... expectedClasses) throws IOException -->Line_7 $$ assertEquals(2, resultCollector.getMappingFileSet().size())[ FD ]
Line_10 $$ final InputStream stream = mappingFileDescriptor.getStreamAccess().accessInputStream()-->Line_11 $$ assertNotNull(stream)[ FD ]
Line_2 $$ private void validateResults(AbstractScannerImpl.ResultCollector resultCollector, Class... expectedClasses) throws IOException -->Line_3 $$ assertEquals(3, resultCollector.getClassDescriptorSet().size())[ CD ]
Line_10 $$ final InputStream stream = mappingFileDescriptor.getStreamAccess().accessInputStream()-->Line_12 $$ stream.close()[ FD ]
Line_2 $$ private void validateResults(AbstractScannerImpl.ResultCollector resultCollector, Class... expectedClasses) throws IOException -->Line_7 $$ assertEquals(2, resultCollector.getMappingFileSet().size())[ CD ]
Line_2 $$ private void validateResults(AbstractScannerImpl.ResultCollector resultCollector, Class... expectedClasses) throws IOException -->Line_8 $$ for (MappingFileDescriptor mappingFileDescriptor : resultCollector.getMappingFileSet()) [ FD ]
Line_4 $$ for (Class expectedClass : expectedClasses) -->Line_5 $$ assertTrue(resultCollector.getClassDescriptorSet().contains(new ClassDescriptorImpl(expectedClass.getName(), null)))[ FD ]
