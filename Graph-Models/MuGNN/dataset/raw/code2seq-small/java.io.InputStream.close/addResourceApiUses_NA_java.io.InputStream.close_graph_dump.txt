Line_5 $$ InputStream inputStream = resource.openInputStream()-->Line_10 $$ inputStream.close()[ FD ]
Line_2 $$ protected void addResourceApiUses(Analyzer analyzer, String fqnToPath, Resource resource) -->Line_5 $$ InputStream inputStream = resource.openInputStream()[ FD ]
Line_3 $$ Clazz clazz = null-->Line_15 $$ Set<PackageRef> packageRefs = clazz.getAPIUses()[ FD ]
Line_3 $$ Clazz clazz = null-->Line_6 $$ clazz = new Clazz(analyzer, fqnToPath, resource)[ FD ]
Line_3 $$ Clazz clazz = null-->Line_8 $$ clazz.parseClassFile()[ FD ]
Line_2 $$ protected void addResourceApiUses(Analyzer analyzer, String fqnToPath, Resource resource) -->Line_3 $$ Clazz clazz = null[ CD ]
Line_2 $$ protected void addResourceApiUses(Analyzer analyzer, String fqnToPath, Resource resource) -->Line_17 $$ Packages packages = analyzer.getReferred()[ FD ]
Line_17 $$ Packages packages = analyzer.getReferred()-->Line_18 $$ packages.put(packageRef, new Attrs())[ FD ]
Line_2 $$ protected void addResourceApiUses(Analyzer analyzer, String fqnToPath, Resource resource) -->Line_15 $$ Set<PackageRef> packageRefs = clazz.getAPIUses()[ CD ]
Line_6 $$ clazz = new Clazz(analyzer, fqnToPath, resource)-->Line_15 $$ Set<PackageRef> packageRefs = clazz.getAPIUses()[ FD ]
Line_6 $$ clazz = new Clazz(analyzer, fqnToPath, resource)-->Line_8 $$ clazz.parseClassFile()[ FD ]
Line_16 $$ for (PackageRef packageRef : packageRefs) -->Line_18 $$ packages.put(packageRef, new Attrs())[ FD ]
