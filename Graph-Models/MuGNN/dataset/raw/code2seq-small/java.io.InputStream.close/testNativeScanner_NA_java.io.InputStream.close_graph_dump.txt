Line_2 $$ public void testNativeScanner() throws Exception -->Line_5 $$ PersistenceUnitDescriptor descriptor = new ParsedPersistenceXmlDescriptor(defaultPar.toURL())[ CD ]
Line_17 $$ InputStream stream = mappingFileDescriptor.getStreamAccess().accessInputStream()-->Line_18 $$ assertNotNull(stream)[ FD ]
Line_2 $$ public void testNativeScanner() throws Exception -->Line_9 $$ ScanResult scanResult = scanner.scan(env, options, StandardScanParameters.INSTANCE)[ CD ]
Line_2 $$ public void testNativeScanner() throws Exception -->Line_10 $$ assertEquals(3, scanResult.getLocatedClasses().size())[ CD ]
Line_2 $$ public void testNativeScanner() throws Exception -->Line_6 $$ ScanEnvironment env = new StandardJpaScanEnvironmentImpl(descriptor)[ CD ]
Line_9 $$ ScanResult scanResult = scanner.scan(env, options, StandardScanParameters.INSTANCE)-->Line_12 $$ assertClassesContained(scanResult, Version.class)[ FD ]
Line_2 $$ public void testNativeScanner() throws Exception -->Line_3 $$ File defaultPar = buildDefaultPar()[ CD ]
Line_14 $$ for (MappingFileDescriptor mappingFileDescriptor : scanResult.getLocatedMappingFiles()) -->Line_15 $$ assertNotNull(mappingFileDescriptor.getName())[ FD ]
Line_9 $$ ScanResult scanResult = scanner.scan(env, options, StandardScanParameters.INSTANCE)-->Line_10 $$ assertEquals(3, scanResult.getLocatedClasses().size())[ FD ]
Line_9 $$ ScanResult scanResult = scanner.scan(env, options, StandardScanParameters.INSTANCE)-->Line_14 $$ for (MappingFileDescriptor mappingFileDescriptor : scanResult.getLocatedMappingFiles()) [ FD ]
Line_2 $$ public void testNativeScanner() throws Exception -->Line_12 $$ assertClassesContained(scanResult, Version.class)[ CD ]
Line_14 $$ for (MappingFileDescriptor mappingFileDescriptor : scanResult.getLocatedMappingFiles()) -->Line_17 $$ InputStream stream = mappingFileDescriptor.getStreamAccess().accessInputStream()[ FD ]
Line_2 $$ public void testNativeScanner() throws Exception -->Line_11 $$ assertClassesContained(scanResult, ApplicationServer.class)[ CD ]
Line_3 $$ File defaultPar = buildDefaultPar()-->Line_4 $$ addPackageToClasspath(defaultPar)[ FD ]
Line_8 $$ Scanner scanner = new StandardScanner()-->Line_9 $$ ScanResult scanResult = scanner.scan(env, options, StandardScanParameters.INSTANCE)[ FD ]
Line_17 $$ InputStream stream = mappingFileDescriptor.getStreamAccess().accessInputStream()-->Line_19 $$ stream.close()[ FD ]
Line_9 $$ ScanResult scanResult = scanner.scan(env, options, StandardScanParameters.INSTANCE)-->Line_13 $$ assertEquals(2, scanResult.getLocatedMappingFiles().size())[ FD ]
Line_2 $$ public void testNativeScanner() throws Exception -->Line_8 $$ Scanner scanner = new StandardScanner()[ CD ]
Line_5 $$ PersistenceUnitDescriptor descriptor = new ParsedPersistenceXmlDescriptor(defaultPar.toURL())-->Line_7 $$ ScanOptions options = new StandardScanOptions("hbm,class", descriptor.isExcludeUnlistedClasses())[ FD ]
Line_6 $$ ScanEnvironment env = new StandardJpaScanEnvironmentImpl(descriptor)-->Line_9 $$ ScanResult scanResult = scanner.scan(env, options, StandardScanParameters.INSTANCE)[ FD ]
Line_2 $$ public void testNativeScanner() throws Exception -->Line_4 $$ addPackageToClasspath(defaultPar)[ CD ]
Line_7 $$ ScanOptions options = new StandardScanOptions("hbm,class", descriptor.isExcludeUnlistedClasses())-->Line_9 $$ ScanResult scanResult = scanner.scan(env, options, StandardScanParameters.INSTANCE)[ FD ]
Line_2 $$ public void testNativeScanner() throws Exception -->Line_13 $$ assertEquals(2, scanResult.getLocatedMappingFiles().size())[ CD ]
Line_3 $$ File defaultPar = buildDefaultPar()-->Line_5 $$ PersistenceUnitDescriptor descriptor = new ParsedPersistenceXmlDescriptor(defaultPar.toURL())[ FD ]
Line_14 $$ for (MappingFileDescriptor mappingFileDescriptor : scanResult.getLocatedMappingFiles()) -->Line_16 $$ assertNotNull(mappingFileDescriptor.getStreamAccess())[ FD ]
Line_2 $$ public void testNativeScanner() throws Exception -->Line_7 $$ ScanOptions options = new StandardScanOptions("hbm,class", descriptor.isExcludeUnlistedClasses())[ CD ]
Line_9 $$ ScanResult scanResult = scanner.scan(env, options, StandardScanParameters.INSTANCE)-->Line_11 $$ assertClassesContained(scanResult, ApplicationServer.class)[ FD ]
