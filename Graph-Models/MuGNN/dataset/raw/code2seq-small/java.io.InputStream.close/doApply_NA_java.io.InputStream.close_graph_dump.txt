Line_10 $$ String path = entry.getName()-->Line_11 $$ if (myFilesToDelete.contains(path))[ FD ]
Line_6 $$ final ZipOutputWrapper out = new ZipOutputWrapper(fileOut)-->Line_28 $$ out.zipEntry(each, in)[ FD ]
Line_10 $$ String path = entry.getName()-->Line_14 $$ OutputStream entryOut = out.zipStream(path)[ FD ]
Line_8 $$ processZipFile(getSource(backupDir), new Processor() -->Line_10 $$ String path = entry.getName()[ FD ]
Line_10 $$ String path = entry.getName()-->Line_13 $$ if (myFilesToUpdate.contains(path)) [ FD ]
Line_8 $$ processZipFile(getSource(backupDir), new Processor() -->Line_28 $$ out.zipEntry(each, in)[ FD ]
Line_3 $$ File temp = Utils.createTempFile()-->Line_37 $$ replaceUpdated(temp, toFile)[ FD ]
Line_6 $$ final ZipOutputWrapper out = new ZipOutputWrapper(fileOut)-->Line_21 $$ out.zipEntry(entry, in)[ FD ]
Line_8 $$ processZipFile(getSource(backupDir), new Processor() -->Line_16 $$ applyDiff(Utils.findEntryInputStream(patchFile, myPath + "/" + path), in, entryOut)[ FD ]
Line_2 $$ protected void doApply(final ZipFile patchFile, File backupDir, File toFile) throws IOException -->Line_26 $$ InputStream in = Utils.getEntryInputStream(patchFile, myPath + "/" + each)[ FD ]
Line_2 $$ protected void doApply(final ZipFile patchFile, File backupDir, File toFile) throws IOException -->Line_16 $$ applyDiff(Utils.findEntryInputStream(patchFile, myPath + "/" + path), in, entryOut)[ FD ]
Line_13 $$ if (myFilesToUpdate.contains(path)) -->Line_21 $$ out.zipEntry(entry, in)[ CD ]
Line_2 $$ protected void doApply(final ZipFile patchFile, File backupDir, File toFile) throws IOException -->Line_4 $$ FileOutputStream fileOut = new FileOutputStream(temp)[ CD ]
Line_4 $$ FileOutputStream fileOut = new FileOutputStream(temp)-->Line_35 $$ fileOut.close()[ FD ]
Line_8 $$ processZipFile(getSource(backupDir), new Processor() -->Line_11 $$ if (myFilesToDelete.contains(path))[ CD ]
Line_6 $$ final ZipOutputWrapper out = new ZipOutputWrapper(fileOut)-->Line_14 $$ OutputStream entryOut = out.zipStream(path)[ FD ]
Line_14 $$ OutputStream entryOut = out.zipStream(path)-->Line_16 $$ applyDiff(Utils.findEntryInputStream(patchFile, myPath + "/" + path), in, entryOut)[ FD ]
Line_8 $$ processZipFile(getSource(backupDir), new Processor() -->Line_13 $$ if (myFilesToUpdate.contains(path)) [ CD ]
Line_8 $$ processZipFile(getSource(backupDir), new Processor() -->Line_21 $$ out.zipEntry(entry, in)[ FD ]
Line_6 $$ final ZipOutputWrapper out = new ZipOutputWrapper(fileOut)-->Line_33 $$ out.finish()[ FD ]
Line_2 $$ protected void doApply(final ZipFile patchFile, File backupDir, File toFile) throws IOException -->Line_37 $$ replaceUpdated(temp, toFile)[ CD ]
Line_2 $$ protected void doApply(final ZipFile patchFile, File backupDir, File toFile) throws IOException -->Line_3 $$ File temp = Utils.createTempFile()[ CD ]
Line_2 $$ protected void doApply(final ZipFile patchFile, File backupDir, File toFile) throws IOException -->Line_8 $$ processZipFile(getSource(backupDir), new Processor() [ FD ]
Line_2 $$ protected void doApply(final ZipFile patchFile, File backupDir, File toFile) throws IOException -->Line_37 $$ replaceUpdated(temp, toFile)[ FD ]
Line_11 $$ if (myFilesToDelete.contains(path))-->Line_12 $$ return[ CD ]
Line_8 $$ processZipFile(getSource(backupDir), new Processor() -->Line_30 $$ in.close()[ FD ]
Line_13 $$ if (myFilesToUpdate.contains(path)) -->Line_14 $$ OutputStream entryOut = out.zipStream(path)[ CD ]
Line_8 $$ processZipFile(getSource(backupDir), new Processor() -->Line_10 $$ String path = entry.getName()[ CD ]
Line_14 $$ OutputStream entryOut = out.zipStream(path)-->Line_18 $$ entryOut.close()[ FD ]
Line_6 $$ final ZipOutputWrapper out = new ZipOutputWrapper(fileOut)-->Line_7 $$ out.setCompressionLevel(0)[ FD ]
