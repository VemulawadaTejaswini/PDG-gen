Line_5 $$ File nativeFile = new File(nativesDir, sharedLibName)-->Line_7 $$ if (nativeFile.exists()) [ FD ]
Line_16 $$ if (nativesJar == null)-->Line_17 $$ input = JniGenSharedLibraryLoader.class.getResourceAsStream("/" + sharedLibName)[ CD ]
Line_5 $$ File nativeFile = new File(nativesDir, sharedLibName)-->Line_22 $$ nativeFile.getParentFile().mkdirs()[ FD ]
Line_24 $$ byte[] buffer = new byte[4096]-->Line_26 $$ int length = input.read(buffer)[ FD ]
Line_25 $$ while (true) -->Line_29 $$ output.write(buffer, 0, length)[ CD ]
Line_17 $$ input = JniGenSharedLibraryLoader.class.getResourceAsStream("/" + sharedLibName)-->Line_31 $$ input.close()[ FD ]
Line_9 $$ extractedCrc = crc(new FileInputStream(nativeFile))-->Line_13 $$ if (extractedCrc == null || !extractedCrc.equals(srcCrc)) [ FD ]
Line_23 $$ FileOutputStream output = new FileOutputStream(nativeFile)-->Line_29 $$ output.write(buffer, 0, length)[ FD ]
Line_2 $$ private String extractLibrary(String sharedLibName) -->Line_13 $$ if (extractedCrc == null || !extractedCrc.equals(srcCrc)) [ CD ]
Line_15 $$ InputStream input = null-->Line_20 $$ if (input == null)[ FD ]
Line_5 $$ File nativeFile = new File(nativesDir, sharedLibName)-->Line_38 $$ return nativeFile.exists() ? nativeFile.getAbsolutePath() : null[ FD ]
Line_2 $$ private String extractLibrary(String sharedLibName) -->Line_7 $$ if (nativeFile.exists()) [ CD ]
Line_15 $$ InputStream input = null-->Line_17 $$ input = JniGenSharedLibraryLoader.class.getResourceAsStream("/" + sharedLibName)[ FD ]
Line_2 $$ private String extractLibrary(String sharedLibName) -->Line_38 $$ return nativeFile.exists() ? nativeFile.getAbsolutePath() : null[ CD ]
Line_2 $$ private String extractLibrary(String sharedLibName) -->Line_5 $$ File nativeFile = new File(nativesDir, sharedLibName)[ CD ]
Line_26 $$ int length = input.read(buffer)-->Line_29 $$ output.write(buffer, 0, length)[ FD ]
Line_2 $$ private String extractLibrary(String sharedLibName) -->Line_19 $$ input = getFromJar(nativesJar, sharedLibName)[ FD ]
Line_15 $$ InputStream input = null-->Line_26 $$ int length = input.read(buffer)[ FD ]
Line_25 $$ while (true) -->Line_27 $$ if (length == -1)[ CD ]
Line_20 $$ if (input == null)-->Line_21 $$ return null[ CD ]
Line_15 $$ InputStream input = null-->Line_19 $$ input = getFromJar(nativesJar, sharedLibName)[ FD ]
Line_2 $$ private String extractLibrary(String sharedLibName) -->Line_6 $$ String extractedCrc = null[ CD ]
Line_17 $$ input = JniGenSharedLibraryLoader.class.getResourceAsStream("/" + sharedLibName)-->Line_20 $$ if (input == null)[ FD ]
Line_23 $$ FileOutputStream output = new FileOutputStream(nativeFile)-->Line_32 $$ output.close()[ FD ]
Line_6 $$ String extractedCrc = null-->Line_13 $$ if (extractedCrc == null || !extractedCrc.equals(srcCrc)) [ FD ]
Line_15 $$ InputStream input = null-->Line_31 $$ input.close()[ FD ]
Line_25 $$ while (true) -->Line_26 $$ int length = input.read(buffer)[ CD ]
Line_6 $$ String extractedCrc = null-->Line_9 $$ extractedCrc = crc(new FileInputStream(nativeFile))[ FD ]
Line_3 $$ String srcCrc = crc(JniGenSharedLibraryLoader.class.getResourceAsStream("/" + sharedLibName))-->Line_13 $$ if (extractedCrc == null || !extractedCrc.equals(srcCrc)) [ FD ]
Line_19 $$ input = getFromJar(nativesJar, sharedLibName)-->Line_26 $$ int length = input.read(buffer)[ FD ]
Line_24 $$ byte[] buffer = new byte[4096]-->Line_29 $$ output.write(buffer, 0, length)[ FD ]
Line_19 $$ input = getFromJar(nativesJar, sharedLibName)-->Line_31 $$ input.close()[ FD ]
Line_2 $$ private String extractLibrary(String sharedLibName) -->Line_4 $$ File nativesDir = new File(System.getProperty("java.io.tmpdir") + "/jnigen/" + srcCrc)[ CD ]
Line_19 $$ input = getFromJar(nativesJar, sharedLibName)-->Line_20 $$ if (input == null)[ FD ]
Line_17 $$ input = JniGenSharedLibraryLoader.class.getResourceAsStream("/" + sharedLibName)-->Line_19 $$ input = getFromJar(nativesJar, sharedLibName)[ FD ]
Line_26 $$ int length = input.read(buffer)-->Line_27 $$ if (length == -1)[ FD ]
Line_2 $$ private String extractLibrary(String sharedLibName) -->Line_3 $$ String srcCrc = crc(JniGenSharedLibraryLoader.class.getResourceAsStream("/" + sharedLibName))[ CD ]
Line_16 $$ if (nativesJar == null)-->Line_19 $$ input = getFromJar(nativesJar, sharedLibName)[ CD ]
Line_17 $$ input = JniGenSharedLibraryLoader.class.getResourceAsStream("/" + sharedLibName)-->Line_26 $$ int length = input.read(buffer)[ FD ]
