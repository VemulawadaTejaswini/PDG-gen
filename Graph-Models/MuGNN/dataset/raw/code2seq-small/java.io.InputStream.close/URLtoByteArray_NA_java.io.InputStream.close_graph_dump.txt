Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_15 $$ sb.append(" bytes that is too large to convert to a byte array")[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_13 $$ sb.append(" yields a file of size ")[ FD ]
Line_2 $$ protected byte[] URLtoByteArray(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_4 $$ if (inputStream == null) [ CD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_12 $$ sb.append(location)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_11 $$ sb.append("Retrieving ")[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_14 $$ sb.append(contentLengthLong)[ FD ]
Line_2 $$ protected byte[] URLtoByteArray(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_3 $$ InputStream inputStream = URLtoInputStream(location, method, headers, cookies, auth, body, fileParts, parts, response, followRedirects)[ FD ]
Line_2 $$ protected byte[] URLtoByteArray(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_3 $$ InputStream inputStream = URLtoInputStream(location, method, headers, cookies, auth, body, fileParts, parts, response, followRedirects)[ CD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_16 $$ throw new OutOfMemoryError(sb.toString())[ FD ]
Line_3 $$ InputStream inputStream = URLtoInputStream(location, method, headers, cookies, auth, body, fileParts, parts, response, followRedirects)-->Line_4 $$ if (inputStream == null) [ FD ]
Line_9 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) -->Line_11 $$ sb.append("Retrieving ")[ CD ]
Line_9 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) -->Line_12 $$ sb.append(location)[ CD ]
Line_3 $$ InputStream inputStream = URLtoInputStream(location, method, headers, cookies, auth, body, fileParts, parts, response, followRedirects)-->Line_20 $$ inputStream.close()[ FD ]
Line_9 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) -->Line_15 $$ sb.append(" bytes that is too large to convert to a byte array")[ CD ]
Line_2 $$ protected byte[] URLtoByteArray(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_12 $$ sb.append(location)[ FD ]
Line_8 $$ long contentLengthLong = response.getContentLengthLong()-->Line_9 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) [ FD ]
Line_9 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) -->Line_14 $$ sb.append(contentLengthLong)[ CD ]
Line_3 $$ InputStream inputStream = URLtoInputStream(location, method, headers, cookies, auth, body, fileParts, parts, response, followRedirects)-->Line_18 $$ return FileUtil.getBytes(inputStream)[ FD ]
Line_8 $$ long contentLengthLong = response.getContentLengthLong()-->Line_14 $$ sb.append(contentLengthLong)[ FD ]
Line_2 $$ protected byte[] URLtoByteArray(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_8 $$ long contentLengthLong = response.getContentLengthLong()[ FD ]
Line_9 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) -->Line_13 $$ sb.append(" yields a file of size ")[ CD ]
Line_4 $$ if (inputStream == null) -->Line_5 $$ return null[ CD ]
Line_9 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) -->Line_10 $$ StringBundler sb = new StringBundler(5)[ CD ]
