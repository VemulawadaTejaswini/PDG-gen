Line_15 $$ is = InstrumentationClassFinder.this.getResourceAsStream(name)-->Line_31 $$ is.close()[ FD ]
Line_12 $$ is = super.getResourceAsStream(name)-->Line_23 $$ if (is == null) [ FD ]
Line_3 $$ ClassLoader loader = myLoader-->Line_4 $$ if (loader != null) [ FD ]
Line_11 $$ InputStream is = null-->Line_27 $$ final byte[] bytes = loadBytes(is)[ FD ]
Line_9 $$ loader = new ClassLoader(cpLoader) -->Line_22 $$ final InputStream is = lookupClassBeforeClasspath(name.replace('.', '/'))[ CD ]
Line_9 $$ loader = new ClassLoader(cpLoader) -->Line_23 $$ if (is == null) [ CD ]
Line_15 $$ is = InstrumentationClassFinder.this.getResourceAsStream(name)-->Line_23 $$ if (is == null) [ FD ]
Line_2 $$ public ClassLoader getLoader() -->Line_8 $$ final ClassLoader cpLoader = new URLClassLoader(myClasspathUrls, platformLoader)[ CD ]
Line_11 $$ InputStream is = null-->Line_31 $$ is.close()[ FD ]
Line_4 $$ if (loader != null) -->Line_5 $$ return loader[ CD ]
Line_9 $$ loader = new ClassLoader(cpLoader) -->Line_11 $$ InputStream is = null[ CD ]
Line_11 $$ InputStream is = null-->Line_15 $$ is = InstrumentationClassFinder.this.getResourceAsStream(name)[ FD ]
Line_22 $$ final InputStream is = lookupClassBeforeClasspath(name.replace('.', '/'))-->Line_27 $$ final byte[] bytes = loadBytes(is)[ FD ]
Line_9 $$ loader = new ClassLoader(cpLoader) -->Line_19 $$ return is[ CD ]
Line_2 $$ public ClassLoader getLoader() -->Line_9 $$ loader = new ClassLoader(cpLoader) [ CD ]
Line_11 $$ InputStream is = null-->Line_23 $$ if (is == null) [ FD ]
Line_12 $$ is = super.getResourceAsStream(name)-->Line_27 $$ final byte[] bytes = loadBytes(is)[ FD ]
Line_2 $$ public ClassLoader getLoader() -->Line_4 $$ if (loader != null) [ CD ]
Line_9 $$ loader = new ClassLoader(cpLoader) -->Line_12 $$ is = super.getResourceAsStream(name)[ FD ]
Line_3 $$ ClassLoader loader = myLoader-->Line_9 $$ loader = new ClassLoader(cpLoader) [ FD ]
Line_22 $$ final InputStream is = lookupClassBeforeClasspath(name.replace('.', '/'))-->Line_31 $$ is.close()[ FD ]
Line_11 $$ InputStream is = null-->Line_12 $$ is = super.getResourceAsStream(name)[ FD ]
Line_12 $$ is = super.getResourceAsStream(name)-->Line_15 $$ is = InstrumentationClassFinder.this.getResourceAsStream(name)[ FD ]
Line_9 $$ loader = new ClassLoader(cpLoader) -->Line_24 $$ throw new ClassNotFoundException("Class not found: " + name.replace('/', '.'))[ FD ]
Line_2 $$ public ClassLoader getLoader() -->Line_3 $$ ClassLoader loader = myLoader[ CD ]
Line_2 $$ public ClassLoader getLoader() -->Line_7 $$ final URLClassLoader platformLoader = myPlatformUrls.length > 0 ? new URLClassLoader(myPlatformUrls, null) : null[ CD ]
Line_9 $$ loader = new ClassLoader(cpLoader) -->Line_22 $$ final InputStream is = lookupClassBeforeClasspath(name.replace('.', '/'))[ FD ]
Line_12 $$ is = super.getResourceAsStream(name)-->Line_31 $$ is.close()[ FD ]
Line_9 $$ loader = new ClassLoader(cpLoader) -->Line_15 $$ is = InstrumentationClassFinder.this.getResourceAsStream(name)[ FD ]
Line_11 $$ InputStream is = null-->Line_13 $$ if (is == null) [ FD ]
Line_9 $$ loader = new ClassLoader(cpLoader) -->Line_13 $$ if (is == null) [ CD ]
Line_9 $$ loader = new ClassLoader(cpLoader) -->Line_28 $$ return defineClass(name, bytes, 0, bytes.length)[ FD ]
Line_2 $$ public ClassLoader getLoader() -->Line_38 $$ return loader[ CD ]
Line_15 $$ is = InstrumentationClassFinder.this.getResourceAsStream(name)-->Line_27 $$ final byte[] bytes = loadBytes(is)[ FD ]
Line_27 $$ final byte[] bytes = loadBytes(is)-->Line_28 $$ return defineClass(name, bytes, 0, bytes.length)[ FD ]
Line_12 $$ is = super.getResourceAsStream(name)-->Line_13 $$ if (is == null) [ FD ]
Line_22 $$ final InputStream is = lookupClassBeforeClasspath(name.replace('.', '/'))-->Line_23 $$ if (is == null) [ FD ]
Line_9 $$ loader = new ClassLoader(cpLoader) -->Line_12 $$ is = super.getResourceAsStream(name)[ CD ]
