Line_27 $$ is = portletDataContext.getZipEntryAsInputStream(binPath)-->Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_8 $$ long folderId = MapUtil.getLong(folderIds, fileEntry.getFolderId(), fileEntry.getFolderId())-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_7 $$ Map<Long, Long> folderIds = (Map<Long, Long>) portletDataContext.getNewPrimaryKeysMap(Folder.class)-->Line_8 $$ long folderId = MapUtil.getLong(folderIds, fileEntry.getFolderId(), fileEntry.getFolderId())[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_116 $$ DLProcessorRegistryUtil.importGeneratedFiles(portletDataContext, fileEntry, importedFileEntry, fileEntryElement)[ FD ]
Line_36 $$ FileEntry importedFileEntry = null-->Line_94 $$ importedFileEntry = existingFileEntry[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_118 $$ portletDataContext.importClassedModel(fileEntry, importedFileEntry, DLFileEntry.class)[ CD ]
Line_66 $$ InputStream existingFileVersionInputStream = null-->Line_78 $$ if (existingFileVersionInputStream == null) [ FD ]
Line_14 $$ Element fileEntryElement = portletDataContext.getImportDataElement(fileEntry)-->Line_15 $$ String binPath = fileEntryElement.attributeValue("bin-path")[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_35 $$ importMetaData(portletDataContext, fileEntryElement, fileEntry, serviceContext)[ FD ]
Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)-->Line_96 $$ if (importedFileEntry.getFolderId() != folderId) [ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_38 $$ FileEntry existingFileEntry = fetchStagedModelByUuidAndGroupId(fileEntry.getUuid(), portletDataContext.getScopeGroupId())[ FD ]
Line_94 $$ importedFileEntry = existingFileEntry-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_29 $$ if (is == null) -->Line_30 $$ if (_log.isWarnEnabled()) [ CD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_40 $$ if (existingFileEntry == null) -->Line_59 $$ boolean indexEnabled = serviceContext.isIndexingEnabled()[ CD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_3 $$ long userId = portletDataContext.getUserId(fileEntry.getUserUuid())[ CD ]
Line_41 $$ if (portletDataContext.isDataStrategyMirrorWithOverwriting()) -->Line_42 $$ FileEntry existingTitleFileEntry = FileEntryUtil.fetchByR_F_T(portletDataContext.getScopeGroupId(), folderId, fileEntry.getTitle())[ CD ]
Line_38 $$ FileEntry existingFileEntry = fetchStagedModelByUuidAndGroupId(fileEntry.getUuid(), portletDataContext.getScopeGroupId())-->Line_90 $$ String fileEntryTitle = _dlFileEntryLocalService.getUniqueTitle(portletDataContext.getScopeGroupId(), existingFileEntry.getFolderId(), existingFileEntry.getFileEntryId(), fileEntry.getTitle(), fileEntry.getExtension())[ FD ]
Line_8 $$ long folderId = MapUtil.getLong(folderIds, fileEntry.getFolderId(), fileEntry.getFolderId())-->Line_112 $$ String fileEntryTitle = _dlFileEntryLocalService.getUniqueTitle(portletDataContext.getScopeGroupId(), folderId, 0, fileEntry.getTitle(), fileEntry.getExtension())[ FD ]
Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_116 $$ DLProcessorRegistryUtil.importGeneratedFiles(portletDataContext, fileEntry, importedFileEntry, fileEntryElement)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_36 $$ FileEntry importedFileEntry = null[ CD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_14 $$ Element fileEntryElement = portletDataContext.getImportDataElement(fileEntry)[ CD ]
Line_62 $$ if (!Validator.equals(fileVersion.getUuid(), latestExistingFileVersion.getUuid())) -->Line_66 $$ InputStream existingFileVersionInputStream = null[ CD ]
Line_3 $$ long userId = portletDataContext.getUserId(fileEntry.getUserUuid())-->Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)[ FD ]
Line_36 $$ FileEntry importedFileEntry = null-->Line_99 $$ if (importedFileEntry instanceof LiferayFileEntry) [ FD ]
Line_99 $$ if (importedFileEntry instanceof LiferayFileEntry) -->Line_101 $$ Indexer<DLFileEntry> indexer = IndexerRegistryUtil.nullSafeGetIndexer(DLFileEntry.class)[ CD ]
Line_62 $$ if (!Validator.equals(fileVersion.getUuid(), latestExistingFileVersion.getUuid())) -->Line_63 $$ deleteFileEntry = true[ CD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_119 $$ Map<Long, Long> fileEntryIds = (Map<Long, Long>) portletDataContext.getNewPrimaryKeysMap(FileEntry.class)[ CD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_41 $$ if (portletDataContext.isDataStrategyMirrorWithOverwriting()) -->Line_43 $$ if (existingTitleFileEntry == null) [ CD ]
Line_60 $$ boolean deleteFileEntry = false-->Line_63 $$ deleteFileEntry = true[ FD ]
Line_61 $$ boolean updateFileEntry = false-->Line_64 $$ updateFileEntry = true[ FD ]
Line_84 $$ if (updateFileEntry) -->Line_85 $$ DLFileVersion alreadyExistingFileVersion = _dlFileVersionLocalService.getFileVersionByUuidAndGroupId(fileVersion.getUuid(), existingFileEntry.getGroupId())[ CD ]
Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_22 $$ _log.warn("Unable to retrieve content for file entry " + fileEntry.getFileEntryId(), e)[ FD ]
Line_42 $$ FileEntry existingTitleFileEntry = FileEntryUtil.fetchByR_F_T(portletDataContext.getScopeGroupId(), folderId, fileEntry.getTitle())-->Line_46 $$ if (existingTitleFileEntry != null) [ FD ]
Line_36 $$ FileEntry importedFileEntry = null-->Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_37 $$ if (portletDataContext.isDataStrategyMirror()) -->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ CD ]
Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)-->Line_94 $$ importedFileEntry = existingFileEntry[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)[ FD ]
Line_44 $$ existingTitleFileEntry = FileEntryUtil.fetchByR_F_FN(portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName())-->Line_46 $$ if (existingTitleFileEntry != null) [ FD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_35 $$ importMetaData(portletDataContext, fileEntryElement, fileEntry, serviceContext)[ FD ]
Line_21 $$ if (_log.isWarnEnabled()) -->Line_22 $$ _log.warn("Unable to retrieve content for file entry " + fileEntry.getFileEntryId(), e)[ CD ]
Line_84 $$ if (updateFileEntry) -->Line_90 $$ String fileEntryTitle = _dlFileEntryLocalService.getUniqueTitle(portletDataContext.getScopeGroupId(), existingFileEntry.getFolderId(), existingFileEntry.getFileEntryId(), fileEntry.getTitle(), fileEntry.getExtension())[ CD ]
Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)-->Line_118 $$ portletDataContext.importClassedModel(fileEntry, importedFileEntry, DLFileEntry.class)[ FD ]
Line_40 $$ if (existingFileEntry == null) -->Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ CD ]
Line_96 $$ if (importedFileEntry.getFolderId() != folderId) -->Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)[ CD ]
Line_40 $$ if (existingFileEntry == null) -->Line_50 $$ serviceContext.setAttribute("fileVersionUuid", fileVersion.getUuid())[ CD ]
Line_9 $$ long[] assetCategoryIds = portletDataContext.getAssetCategoryIds(DLFileEntry.class, fileEntry.getFileEntryId())-->Line_93 $$ _dlAppLocalService.updateAsset(userId, existingFileEntry, latestExistingFileVersion, assetCategoryIds, assetTagNames, null)[ FD ]
Line_40 $$ if (existingFileEntry == null) -->Line_62 $$ if (!Validator.equals(fileVersion.getUuid(), latestExistingFileVersion.getUuid())) [ CD ]
Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)-->Line_120 $$ fileEntryIds.put(fileEntry.getFileEntryId(), importedFileEntry.getFileEntryId())[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_44 $$ existingTitleFileEntry = FileEntryUtil.fetchByR_F_FN(portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName())[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_115 $$ if (portletDataContext.getBooleanParameter("document_library", "previews-and-thumbnails")) [ CD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_13 $$ serviceContext.setUserId(userId)[ CD ]
Line_30 $$ if (_log.isWarnEnabled()) -->Line_31 $$ _log.warn("No file found for file entry " + fileEntry.getFileEntryId())[ CD ]
Line_27 $$ is = portletDataContext.getZipEntryAsInputStream(binPath)-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_16 $$ InputStream is = null-->Line_27 $$ is = portletDataContext.getZipEntryAsInputStream(binPath)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_15 $$ String binPath = fileEntryElement.attributeValue("bin-path")[ CD ]
Line_3 $$ long userId = portletDataContext.getUserId(fileEntry.getUserUuid())-->Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_19 $$ is = FileEntryUtil.getContentStream(fileEntry)-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)-->Line_118 $$ portletDataContext.importClassedModel(fileEntry, importedFileEntry, DLFileEntry.class)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_120 $$ fileEntryIds.put(fileEntry.getFileEntryId(), importedFileEntry.getFileEntryId())[ CD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_8 $$ long folderId = MapUtil.getLong(folderIds, fileEntry.getFolderId(), fileEntry.getFolderId())[ FD ]
Line_19 $$ is = FileEntryUtil.getContentStream(fileEntry)-->Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_64 $$ updateFileEntry = true-->Line_79 $$ updateFileEntry = true[ FD ]
Line_3 $$ long userId = portletDataContext.getUserId(fileEntry.getUserUuid())-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_3 $$ long userId = portletDataContext.getUserId(fileEntry.getUserUuid())[ FD ]
Line_38 $$ FileEntry existingFileEntry = fetchStagedModelByUuidAndGroupId(fileEntry.getUuid(), portletDataContext.getScopeGroupId())-->Line_85 $$ DLFileVersion alreadyExistingFileVersion = _dlFileVersionLocalService.getFileVersionByUuidAndGroupId(fileVersion.getUuid(), existingFileEntry.getGroupId())[ FD ]
Line_39 $$ FileVersion fileVersion = fileEntry.getFileVersion()-->Line_85 $$ DLFileVersion alreadyExistingFileVersion = _dlFileVersionLocalService.getFileVersionByUuidAndGroupId(fileVersion.getUuid(), existingFileEntry.getGroupId())[ FD ]
Line_84 $$ if (updateFileEntry) -->Line_94 $$ importedFileEntry = existingFileEntry[ CD ]
Line_94 $$ importedFileEntry = existingFileEntry-->Line_116 $$ DLProcessorRegistryUtil.importGeneratedFiles(portletDataContext, fileEntry, importedFileEntry, fileEntryElement)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_7 $$ Map<Long, Long> folderIds = (Map<Long, Long>) portletDataContext.getNewPrimaryKeysMap(Folder.class)[ CD ]
Line_52 $$ String fileEntryTitle = _dlFileEntryLocalService.getUniqueTitle(portletDataContext.getScopeGroupId(), folderId, 0, fileEntry.getTitle(), fileEntry.getExtension())-->Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_37 $$ if (portletDataContext.isDataStrategyMirror()) [ CD ]
Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_118 $$ portletDataContext.importClassedModel(fileEntry, importedFileEntry, DLFileEntry.class)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_115 $$ if (portletDataContext.getBooleanParameter("document_library", "previews-and-thumbnails")) [ FD ]
Line_42 $$ FileEntry existingTitleFileEntry = FileEntryUtil.fetchByR_F_T(portletDataContext.getScopeGroupId(), folderId, fileEntry.getTitle())-->Line_44 $$ existingTitleFileEntry = FileEntryUtil.fetchByR_F_FN(portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName())[ FD ]
Line_16 $$ InputStream is = null-->Line_19 $$ is = FileEntryUtil.getContentStream(fileEntry)[ FD ]
Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)-->Line_99 $$ if (importedFileEntry instanceof LiferayFileEntry) [ FD ]
Line_37 $$ if (portletDataContext.isDataStrategyMirror()) -->Line_38 $$ FileEntry existingFileEntry = fetchStagedModelByUuidAndGroupId(fileEntry.getUuid(), portletDataContext.getScopeGroupId())[ CD ]
Line_8 $$ long folderId = MapUtil.getLong(folderIds, fileEntry.getFolderId(), fileEntry.getFolderId())-->Line_52 $$ String fileEntryTitle = _dlFileEntryLocalService.getUniqueTitle(portletDataContext.getScopeGroupId(), folderId, 0, fileEntry.getTitle(), fileEntry.getExtension())[ FD ]
Line_55 $$ importedFileEntry = _dlTrashService.moveFileEntryToTrash(importedFileEntry.getFileEntryId())-->Line_120 $$ fileEntryIds.put(fileEntry.getFileEntryId(), importedFileEntry.getFileEntryId())[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_118 $$ portletDataContext.importClassedModel(fileEntry, importedFileEntry, DLFileEntry.class)[ FD ]
Line_40 $$ if (existingFileEntry == null) -->Line_51 $$ serviceContext.setUuid(fileEntry.getUuid())[ CD ]
Line_36 $$ FileEntry importedFileEntry = null-->Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_99 $$ if (importedFileEntry instanceof LiferayFileEntry) -->Line_102 $$ indexer.reindex((DLFileEntry) liferayFileEntry.getModel())[ CD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_16 $$ InputStream is = null[ CD ]
Line_36 $$ FileEntry importedFileEntry = null-->Line_96 $$ if (importedFileEntry.getFolderId() != folderId) [ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_17 $$ if (Validator.isNull(binPath) && portletDataContext.isPerformDirectBinaryImport()) [ CD ]
Line_36 $$ FileEntry importedFileEntry = null-->Line_120 $$ fileEntryIds.put(fileEntry.getFileEntryId(), importedFileEntry.getFileEntryId())[ FD ]
Line_42 $$ FileEntry existingTitleFileEntry = FileEntryUtil.fetchByR_F_T(portletDataContext.getScopeGroupId(), folderId, fileEntry.getTitle())-->Line_43 $$ if (existingTitleFileEntry == null) [ FD ]
Line_40 $$ if (existingFileEntry == null) -->Line_41 $$ if (portletDataContext.isDataStrategyMirrorWithOverwriting()) [ CD ]
Line_68 $$ existingFileVersionInputStream = latestExistingFileVersion.getContentStream(false)-->Line_75 $$ existingFileVersionInputStream.close()[ FD ]
Line_62 $$ if (!Validator.equals(fileVersion.getUuid(), latestExistingFileVersion.getUuid())) -->Line_78 $$ if (existingFileVersionInputStream == null) [ CD ]
Line_46 $$ if (existingTitleFileEntry != null) -->Line_47 $$ _dlAppLocalService.deleteFileEntry(existingTitleFileEntry.getFileEntryId())[ CD ]
Line_52 $$ String fileEntryTitle = _dlFileEntryLocalService.getUniqueTitle(portletDataContext.getScopeGroupId(), folderId, 0, fileEntry.getTitle(), fileEntry.getExtension())-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_35 $$ importMetaData(portletDataContext, fileEntryElement, fileEntry, serviceContext)[ CD ]
Line_15 $$ String binPath = fileEntryElement.attributeValue("bin-path")-->Line_27 $$ is = portletDataContext.getZipEntryAsInputStream(binPath)[ FD ]
Line_39 $$ FileVersion fileVersion = fileEntry.getFileVersion()-->Line_50 $$ serviceContext.setAttribute("fileVersionUuid", fileVersion.getUuid())[ FD ]
Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)-->Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)[ FD ]
Line_16 $$ InputStream is = null-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_9 $$ long[] assetCategoryIds = portletDataContext.getAssetCategoryIds(DLFileEntry.class, fileEntry.getFileEntryId())[ FD ]
Line_38 $$ FileEntry existingFileEntry = fetchStagedModelByUuidAndGroupId(fileEntry.getUuid(), portletDataContext.getScopeGroupId())-->Line_58 $$ FileVersion latestExistingFileVersion = existingFileEntry.getLatestFileVersion(true)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_51 $$ serviceContext.setUuid(fileEntry.getUuid())[ FD ]
Line_36 $$ FileEntry importedFileEntry = null-->Line_55 $$ importedFileEntry = _dlTrashService.moveFileEntryToTrash(importedFileEntry.getFileEntryId())[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)[ CD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_37 $$ if (portletDataContext.isDataStrategyMirror()) [ FD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_83 $$ serviceContext.setIndexingEnabled(false)[ FD ]
Line_55 $$ importedFileEntry = _dlTrashService.moveFileEntryToTrash(importedFileEntry.getFileEntryId())-->Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_17 $$ if (Validator.isNull(binPath) && portletDataContext.isPerformDirectBinaryImport()) -->Line_27 $$ is = portletDataContext.getZipEntryAsInputStream(binPath)[ CD ]
Line_84 $$ if (updateFileEntry) -->Line_86 $$ if (alreadyExistingFileVersion != null) [ CD ]
Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_55 $$ importedFileEntry = _dlTrashService.moveFileEntryToTrash(importedFileEntry.getFileEntryId())[ FD ]
Line_84 $$ if (updateFileEntry) -->Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)[ CD ]
Line_55 $$ importedFileEntry = _dlTrashService.moveFileEntryToTrash(importedFileEntry.getFileEntryId())-->Line_94 $$ importedFileEntry = existingFileEntry[ FD ]
Line_36 $$ FileEntry importedFileEntry = null-->Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_112 $$ String fileEntryTitle = _dlFileEntryLocalService.getUniqueTitle(portletDataContext.getScopeGroupId(), folderId, 0, fileEntry.getTitle(), fileEntry.getExtension())[ FD ]
Line_38 $$ FileEntry existingFileEntry = fetchStagedModelByUuidAndGroupId(fileEntry.getUuid(), portletDataContext.getScopeGroupId())-->Line_93 $$ _dlAppLocalService.updateAsset(userId, existingFileEntry, latestExistingFileVersion, assetCategoryIds, assetTagNames, null)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_12 $$ serviceContext.setAttribute("sourceFileName", "A." + fileEntry.getExtension())[ CD ]
Line_40 $$ if (existingFileEntry == null) -->Line_58 $$ FileVersion latestExistingFileVersion = existingFileEntry.getLatestFileVersion(true)[ CD ]
Line_55 $$ importedFileEntry = _dlTrashService.moveFileEntryToTrash(importedFileEntry.getFileEntryId())-->Line_99 $$ if (importedFileEntry instanceof LiferayFileEntry) [ FD ]
Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_31 $$ _log.warn("No file found for file entry " + fileEntry.getFileEntryId())[ FD ]
Line_37 $$ if (portletDataContext.isDataStrategyMirror()) -->Line_39 $$ FileVersion fileVersion = fileEntry.getFileVersion()[ CD ]
Line_14 $$ Element fileEntryElement = portletDataContext.getImportDataElement(fileEntry)-->Line_116 $$ DLProcessorRegistryUtil.importGeneratedFiles(portletDataContext, fileEntry, importedFileEntry, fileEntryElement)[ FD ]
Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_120 $$ fileEntryIds.put(fileEntry.getFileEntryId(), importedFileEntry.getFileEntryId())[ FD ]
Line_58 $$ FileVersion latestExistingFileVersion = existingFileEntry.getLatestFileVersion(true)-->Line_62 $$ if (!Validator.equals(fileVersion.getUuid(), latestExistingFileVersion.getUuid())) [ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_10 $$ String[] assetTagNames = portletDataContext.getAssetTagNames(DLFileEntry.class, fileEntry.getFileEntryId())[ CD ]
Line_39 $$ FileVersion fileVersion = fileEntry.getFileVersion()-->Line_62 $$ if (!Validator.equals(fileVersion.getUuid(), latestExistingFileVersion.getUuid())) [ FD ]
Line_39 $$ FileVersion fileVersion = fileEntry.getFileVersion()-->Line_89 $$ serviceContext.setUuid(fileVersion.getUuid())[ FD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_59 $$ boolean indexEnabled = serviceContext.isIndexingEnabled()[ FD ]
Line_84 $$ if (updateFileEntry) -->Line_89 $$ serviceContext.setUuid(fileVersion.getUuid())[ CD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_90 $$ String fileEntryTitle = _dlFileEntryLocalService.getUniqueTitle(portletDataContext.getScopeGroupId(), existingFileEntry.getFolderId(), existingFileEntry.getFileEntryId(), fileEntry.getTitle(), fileEntry.getExtension())[ FD ]
Line_16 $$ InputStream is = null-->Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_55 $$ importedFileEntry = _dlTrashService.moveFileEntryToTrash(importedFileEntry.getFileEntryId())-->Line_96 $$ if (importedFileEntry.getFolderId() != folderId) [ FD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_51 $$ serviceContext.setUuid(fileEntry.getUuid())[ FD ]
Line_37 $$ if (portletDataContext.isDataStrategyMirror()) -->Line_40 $$ if (existingFileEntry == null) [ CD ]
Line_54 $$ if (fileEntry.isInTrash()) -->Line_55 $$ importedFileEntry = _dlTrashService.moveFileEntryToTrash(importedFileEntry.getFileEntryId())[ CD ]
Line_66 $$ InputStream existingFileVersionInputStream = null-->Line_74 $$ if (existingFileVersionInputStream != null) [ FD ]
Line_84 $$ if (updateFileEntry) -->Line_93 $$ _dlAppLocalService.updateAsset(userId, existingFileEntry, latestExistingFileVersion, assetCategoryIds, assetTagNames, null)[ CD ]
Line_3 $$ long userId = portletDataContext.getUserId(fileEntry.getUserUuid())-->Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_36 $$ FileEntry importedFileEntry = null-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_19 $$ is = FileEntryUtil.getContentStream(fileEntry)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_7 $$ Map<Long, Long> folderIds = (Map<Long, Long>) portletDataContext.getNewPrimaryKeysMap(Folder.class)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_12 $$ serviceContext.setAttribute("sourceFileName", "A." + fileEntry.getExtension())[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_27 $$ is = portletDataContext.getZipEntryAsInputStream(binPath)[ FD ]
Line_55 $$ importedFileEntry = _dlTrashService.moveFileEntryToTrash(importedFileEntry.getFileEntryId())-->Line_116 $$ DLProcessorRegistryUtil.importGeneratedFiles(portletDataContext, fileEntry, importedFileEntry, fileEntryElement)[ FD ]
Line_68 $$ existingFileVersionInputStream = latestExistingFileVersion.getContentStream(false)-->Line_74 $$ if (existingFileVersionInputStream != null) [ FD ]
Line_8 $$ long folderId = MapUtil.getLong(folderIds, fileEntry.getFolderId(), fileEntry.getFolderId())-->Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_50 $$ serviceContext.setAttribute("fileVersionUuid", fileVersion.getUuid())[ FD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_87 $$ serviceContext.setAttribute("existingDLFileVersionId", alreadyExistingFileVersion.getFileVersionId())[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_14 $$ Element fileEntryElement = portletDataContext.getImportDataElement(fileEntry)[ FD ]
Line_86 $$ if (alreadyExistingFileVersion != null) -->Line_87 $$ serviceContext.setAttribute("existingDLFileVersionId", alreadyExistingFileVersion.getFileVersionId())[ CD ]
Line_15 $$ String binPath = fileEntryElement.attributeValue("bin-path")-->Line_17 $$ if (Validator.isNull(binPath) && portletDataContext.isPerformDirectBinaryImport()) [ FD ]
Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_94 $$ importedFileEntry = existingFileEntry-->Line_120 $$ fileEntryIds.put(fileEntry.getFileEntryId(), importedFileEntry.getFileEntryId())[ FD ]
Line_60 $$ boolean deleteFileEntry = false-->Line_104 $$ if (deleteFileEntry && ExportImportThreadLocal.isStagingInProcess()) [ FD ]
Line_63 $$ deleteFileEntry = true-->Line_104 $$ if (deleteFileEntry && ExportImportThreadLocal.isStagingInProcess()) [ FD ]
Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_120 $$ fileEntryIds.put(fileEntry.getFileEntryId(), importedFileEntry.getFileEntryId())[ FD ]
Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)-->Line_120 $$ fileEntryIds.put(fileEntry.getFileEntryId(), importedFileEntry.getFileEntryId())[ FD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_108 $$ serviceContext.setIndexingEnabled(indexEnabled)[ FD ]
Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_116 $$ DLProcessorRegistryUtil.importGeneratedFiles(portletDataContext, fileEntry, importedFileEntry, fileEntryElement)[ FD ]
Line_66 $$ InputStream existingFileVersionInputStream = null-->Line_75 $$ existingFileVersionInputStream.close()[ FD ]
Line_101 $$ Indexer<DLFileEntry> indexer = IndexerRegistryUtil.nullSafeGetIndexer(DLFileEntry.class)-->Line_102 $$ indexer.reindex((DLFileEntry) liferayFileEntry.getModel())[ FD ]
Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)-->Line_99 $$ if (importedFileEntry instanceof LiferayFileEntry) [ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_52 $$ String fileEntryTitle = _dlFileEntryLocalService.getUniqueTitle(portletDataContext.getScopeGroupId(), folderId, 0, fileEntry.getTitle(), fileEntry.getExtension())[ FD ]
Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)-->Line_116 $$ DLProcessorRegistryUtil.importGeneratedFiles(portletDataContext, fileEntry, importedFileEntry, fileEntryElement)[ FD ]
Line_115 $$ if (portletDataContext.getBooleanParameter("document_library", "previews-and-thumbnails")) -->Line_116 $$ DLProcessorRegistryUtil.importGeneratedFiles(portletDataContext, fileEntry, importedFileEntry, fileEntryElement)[ CD ]
Line_36 $$ FileEntry importedFileEntry = null-->Line_116 $$ DLProcessorRegistryUtil.importGeneratedFiles(portletDataContext, fileEntry, importedFileEntry, fileEntryElement)[ FD ]
Line_55 $$ importedFileEntry = _dlTrashService.moveFileEntryToTrash(importedFileEntry.getFileEntryId())-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_10 $$ String[] assetTagNames = portletDataContext.getAssetTagNames(DLFileEntry.class, fileEntry.getFileEntryId())-->Line_93 $$ _dlAppLocalService.updateAsset(userId, existingFileEntry, latestExistingFileVersion, assetCategoryIds, assetTagNames, null)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_4 $$ if (!fileEntry.isDefaultRepository()) [ CD ]
Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_118 $$ portletDataContext.importClassedModel(fileEntry, importedFileEntry, DLFileEntry.class)[ FD ]
Line_40 $$ if (existingFileEntry == null) -->Line_61 $$ boolean updateFileEntry = false[ CD ]
Line_85 $$ DLFileVersion alreadyExistingFileVersion = _dlFileVersionLocalService.getFileVersionByUuidAndGroupId(fileVersion.getUuid(), existingFileEntry.getGroupId())-->Line_86 $$ if (alreadyExistingFileVersion != null) [ FD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)[ FD ]
Line_38 $$ FileEntry existingFileEntry = fetchStagedModelByUuidAndGroupId(fileEntry.getUuid(), portletDataContext.getScopeGroupId())-->Line_40 $$ if (existingFileEntry == null) [ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_29 $$ if (is == null) [ CD ]
Line_16 $$ InputStream is = null-->Line_29 $$ if (is == null) [ FD ]
Line_14 $$ Element fileEntryElement = portletDataContext.getImportDataElement(fileEntry)-->Line_35 $$ importMetaData(portletDataContext, fileEntryElement, fileEntry, serviceContext)[ FD ]
Line_8 $$ long folderId = MapUtil.getLong(folderIds, fileEntry.getFolderId(), fileEntry.getFolderId())-->Line_96 $$ if (importedFileEntry.getFolderId() != folderId) [ FD ]
Line_94 $$ importedFileEntry = existingFileEntry-->Line_99 $$ if (importedFileEntry instanceof LiferayFileEntry) [ FD ]
Line_42 $$ FileEntry existingTitleFileEntry = FileEntryUtil.fetchByR_F_T(portletDataContext.getScopeGroupId(), folderId, fileEntry.getTitle())-->Line_47 $$ _dlAppLocalService.deleteFileEntry(existingTitleFileEntry.getFileEntryId())[ FD ]
Line_44 $$ existingTitleFileEntry = FileEntryUtil.fetchByR_F_FN(portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName())-->Line_47 $$ _dlAppLocalService.deleteFileEntry(existingTitleFileEntry.getFileEntryId())[ FD ]
Line_3 $$ long userId = portletDataContext.getUserId(fileEntry.getUserUuid())-->Line_13 $$ serviceContext.setUserId(userId)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_54 $$ if (fileEntry.isInTrash()) [ FD ]
Line_52 $$ String fileEntryTitle = _dlFileEntryLocalService.getUniqueTitle(portletDataContext.getScopeGroupId(), folderId, 0, fileEntry.getTitle(), fileEntry.getExtension())-->Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_94 $$ importedFileEntry = existingFileEntry[ FD ]
Line_38 $$ FileEntry existingFileEntry = fetchStagedModelByUuidAndGroupId(fileEntry.getUuid(), portletDataContext.getScopeGroupId())-->Line_94 $$ importedFileEntry = existingFileEntry[ FD ]
Line_8 $$ long folderId = MapUtil.getLong(folderIds, fileEntry.getFolderId(), fileEntry.getFolderId())-->Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)[ FD ]
Line_27 $$ is = portletDataContext.getZipEntryAsInputStream(binPath)-->Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_27 $$ is = portletDataContext.getZipEntryAsInputStream(binPath)-->Line_29 $$ if (is == null) [ FD ]
Line_62 $$ if (!Validator.equals(fileVersion.getUuid(), latestExistingFileVersion.getUuid())) -->Line_64 $$ updateFileEntry = true[ CD ]
Line_36 $$ FileEntry importedFileEntry = null-->Line_118 $$ portletDataContext.importClassedModel(fileEntry, importedFileEntry, DLFileEntry.class)[ FD ]
Line_55 $$ importedFileEntry = _dlTrashService.moveFileEntryToTrash(importedFileEntry.getFileEntryId())-->Line_118 $$ portletDataContext.importClassedModel(fileEntry, importedFileEntry, DLFileEntry.class)[ FD ]
Line_104 $$ if (deleteFileEntry && ExportImportThreadLocal.isStagingInProcess()) -->Line_105 $$ _dlAppService.deleteFileVersion(latestExistingFileVersion.getFileEntryId(), latestExistingFileVersion.getVersion())[ CD ]
Line_19 $$ is = FileEntryUtil.getContentStream(fileEntry)-->Line_27 $$ is = portletDataContext.getZipEntryAsInputStream(binPath)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_41 $$ if (portletDataContext.isDataStrategyMirrorWithOverwriting()) [ FD ]
Line_59 $$ boolean indexEnabled = serviceContext.isIndexingEnabled()-->Line_108 $$ serviceContext.setIndexingEnabled(indexEnabled)[ FD ]
Line_41 $$ if (portletDataContext.isDataStrategyMirrorWithOverwriting()) -->Line_46 $$ if (existingTitleFileEntry != null) [ CD ]
Line_70 $$ if (_log.isDebugEnabled()) -->Line_71 $$ _log.debug(e, e)[ CD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_89 $$ serviceContext.setUuid(fileVersion.getUuid())[ FD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_100 $$ LiferayFileEntry liferayFileEntry = (LiferayFileEntry) importedFileEntry-->Line_102 $$ indexer.reindex((DLFileEntry) liferayFileEntry.getModel())[ FD ]
Line_78 $$ if (existingFileVersionInputStream == null) -->Line_79 $$ updateFileEntry = true[ CD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_12 $$ serviceContext.setAttribute("sourceFileName", "A." + fileEntry.getExtension())[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_9 $$ long[] assetCategoryIds = portletDataContext.getAssetCategoryIds(DLFileEntry.class, fileEntry.getFileEntryId())[ CD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_120 $$ fileEntryIds.put(fileEntry.getFileEntryId(), importedFileEntry.getFileEntryId())[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_4 $$ if (!fileEntry.isDefaultRepository()) [ FD ]
Line_40 $$ if (existingFileEntry == null) -->Line_60 $$ boolean deleteFileEntry = false[ CD ]
Line_94 $$ importedFileEntry = existingFileEntry-->Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)[ FD ]
Line_11 $$ ServiceContext serviceContext = portletDataContext.createServiceContext(fileEntry, DLFileEntry.class)-->Line_13 $$ serviceContext.setUserId(userId)[ FD ]
Line_85 $$ DLFileVersion alreadyExistingFileVersion = _dlFileVersionLocalService.getFileVersionByUuidAndGroupId(fileVersion.getUuid(), existingFileEntry.getGroupId())-->Line_87 $$ serviceContext.setAttribute("existingDLFileVersionId", alreadyExistingFileVersion.getFileVersionId())[ FD ]
Line_40 $$ if (existingFileEntry == null) -->Line_54 $$ if (fileEntry.isInTrash()) [ CD ]
Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)-->Line_116 $$ DLProcessorRegistryUtil.importGeneratedFiles(portletDataContext, fileEntry, importedFileEntry, fileEntryElement)[ FD ]
Line_68 $$ existingFileVersionInputStream = latestExistingFileVersion.getContentStream(false)-->Line_78 $$ if (existingFileVersionInputStream == null) [ FD ]
Line_74 $$ if (existingFileVersionInputStream != null) -->Line_75 $$ existingFileVersionInputStream.close()[ CD ]
Line_3 $$ long userId = portletDataContext.getUserId(fileEntry.getUserUuid())-->Line_93 $$ _dlAppLocalService.updateAsset(userId, existingFileEntry, latestExistingFileVersion, assetCategoryIds, assetTagNames, null)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_10 $$ String[] assetTagNames = portletDataContext.getAssetTagNames(DLFileEntry.class, fileEntry.getFileEntryId())[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_58 $$ FileVersion latestExistingFileVersion = existingFileEntry.getLatestFileVersion(true)-->Line_68 $$ existingFileVersionInputStream = latestExistingFileVersion.getContentStream(false)[ FD ]
Line_37 $$ if (portletDataContext.isDataStrategyMirror()) -->Line_112 $$ String fileEntryTitle = _dlFileEntryLocalService.getUniqueTitle(portletDataContext.getScopeGroupId(), folderId, 0, fileEntry.getTitle(), fileEntry.getExtension())[ CD ]
Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_99 $$ if (importedFileEntry instanceof LiferayFileEntry) [ FD ]
Line_61 $$ boolean updateFileEntry = false-->Line_79 $$ updateFileEntry = true[ FD ]
Line_43 $$ if (existingTitleFileEntry == null) -->Line_44 $$ existingTitleFileEntry = FileEntryUtil.fetchByR_F_FN(portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName())[ CD ]
Line_119 $$ Map<Long, Long> fileEntryIds = (Map<Long, Long>) portletDataContext.getNewPrimaryKeysMap(FileEntry.class)-->Line_120 $$ fileEntryIds.put(fileEntry.getFileEntryId(), importedFileEntry.getFileEntryId())[ FD ]
Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_113 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_17 $$ if (Validator.isNull(binPath) && portletDataContext.isPerformDirectBinaryImport()) [ FD ]
Line_40 $$ if (existingFileEntry == null) -->Line_52 $$ String fileEntryTitle = _dlFileEntryLocalService.getUniqueTitle(portletDataContext.getScopeGroupId(), folderId, 0, fileEntry.getTitle(), fileEntry.getExtension())[ CD ]
Line_16 $$ InputStream is = null-->Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_38 $$ FileEntry existingFileEntry = fetchStagedModelByUuidAndGroupId(fileEntry.getUuid(), portletDataContext.getScopeGroupId())-->Line_91 $$ importedFileEntry = _dlAppLocalService.updateFileEntry(userId, existingFileEntry.getFileEntryId(), fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, false, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_19 $$ is = FileEntryUtil.getContentStream(fileEntry)-->Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_42 $$ FileEntry existingTitleFileEntry = FileEntryUtil.fetchByR_F_T(portletDataContext.getScopeGroupId(), folderId, fileEntry.getTitle())[ FD ]
Line_58 $$ FileVersion latestExistingFileVersion = existingFileEntry.getLatestFileVersion(true)-->Line_93 $$ _dlAppLocalService.updateAsset(userId, existingFileEntry, latestExistingFileVersion, assetCategoryIds, assetTagNames, null)[ FD ]
Line_8 $$ long folderId = MapUtil.getLong(folderIds, fileEntry.getFolderId(), fileEntry.getFolderId())-->Line_42 $$ FileEntry existingTitleFileEntry = FileEntryUtil.fetchByR_F_T(portletDataContext.getScopeGroupId(), folderId, fileEntry.getTitle())[ FD ]
Line_8 $$ long folderId = MapUtil.getLong(folderIds, fileEntry.getFolderId(), fileEntry.getFolderId())-->Line_44 $$ existingTitleFileEntry = FileEntryUtil.fetchByR_F_FN(portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName())[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_119 $$ Map<Long, Long> fileEntryIds = (Map<Long, Long>) portletDataContext.getNewPrimaryKeysMap(FileEntry.class)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_39 $$ FileVersion fileVersion = fileEntry.getFileVersion()[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)[ FD ]
Line_53 $$ importedFileEntry = _dlAppLocalService.addFileEntry(userId, portletDataContext.getScopeGroupId(), folderId, fileEntry.getFileName(), fileEntry.getMimeType(), fileEntryTitle, fileEntry.getDescription(), null, is, fileEntry.getSize(), serviceContext)-->Line_96 $$ if (importedFileEntry.getFolderId() != folderId) [ FD ]
Line_94 $$ importedFileEntry = existingFileEntry-->Line_96 $$ if (importedFileEntry.getFolderId() != folderId) [ FD ]
Line_29 $$ if (is == null) -->Line_33 $$ return[ CD ]
Line_55 $$ importedFileEntry = _dlTrashService.moveFileEntryToTrash(importedFileEntry.getFileEntryId())-->Line_97 $$ importedFileEntry = _dlAppLocalService.moveFileEntry(userId, importedFileEntry.getFileEntryId(), folderId, serviceContext)[ FD ]
Line_94 $$ importedFileEntry = existingFileEntry-->Line_118 $$ portletDataContext.importClassedModel(fileEntry, importedFileEntry, DLFileEntry.class)[ FD ]
Line_2 $$ protected void doImportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_8 $$ long folderId = MapUtil.getLong(folderIds, fileEntry.getFolderId(), fileEntry.getFolderId())[ CD ]
Line_99 $$ if (importedFileEntry instanceof LiferayFileEntry) -->Line_100 $$ LiferayFileEntry liferayFileEntry = (LiferayFileEntry) importedFileEntry[ CD ]
Line_58 $$ FileVersion latestExistingFileVersion = existingFileEntry.getLatestFileVersion(true)-->Line_105 $$ _dlAppService.deleteFileVersion(latestExistingFileVersion.getFileEntryId(), latestExistingFileVersion.getVersion())[ FD ]
Line_19 $$ is = FileEntryUtil.getContentStream(fileEntry)-->Line_29 $$ if (is == null) [ FD ]
Line_66 $$ InputStream existingFileVersionInputStream = null-->Line_68 $$ existingFileVersionInputStream = latestExistingFileVersion.getContentStream(false)[ FD ]
Line_4 $$ if (!fileEntry.isDefaultRepository()) -->Line_5 $$ return[ CD ]
