Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_12 $$ InputStream in = fileSys.open(file)[ CD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_10 $$ out.close()[ CD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_6 $$ assertTrue(buf.length >= corruptFileLen)[ CD ]
Line_3 $$ RandomAccessFile out = new RandomAccessFile(new File(fileToCorrupt.toString()), "rw")-->Line_8 $$ out.seek(corruptFileLen / 2)[ FD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_8 $$ out.seek(corruptFileLen / 2)[ CD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_11 $$ boolean gotException = false[ CD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_3 $$ RandomAccessFile out = new RandomAccessFile(new File(fileToCorrupt.toString()), "rw")[ CD ]
Line_16 $$ gotException = true-->Line_18 $$ assertTrue(gotException)[ FD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_4 $$ byte[] buf = new byte[(int) fileSys.getFileStatus(file).getLen()][ CD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_5 $$ int corruptFileLen = (int) fileSys.getFileStatus(fileToCorrupt).getLen()[ FD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_7 $$ rand.nextBytes(buf)[ CD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_18 $$ assertTrue(gotException)[ CD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_4 $$ byte[] buf = new byte[(int) fileSys.getFileStatus(file).getLen()][ FD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_3 $$ RandomAccessFile out = new RandomAccessFile(new File(fileToCorrupt.toString()), "rw")[ FD ]
Line_4 $$ byte[] buf = new byte[(int) fileSys.getFileStatus(file).getLen()]-->Line_9 $$ out.write(buf, 0, corruptFileLen / 4)[ FD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_19 $$ in.close()[ CD ]
Line_11 $$ boolean gotException = false-->Line_18 $$ assertTrue(gotException)[ FD ]
Line_4 $$ byte[] buf = new byte[(int) fileSys.getFileStatus(file).getLen()]-->Line_7 $$ rand.nextBytes(buf)[ FD ]
Line_12 $$ InputStream in = fileSys.open(file)-->Line_14 $$ IOUtils.readFully(in, buf, 0, buf.length)[ FD ]
Line_4 $$ byte[] buf = new byte[(int) fileSys.getFileStatus(file).getLen()]-->Line_14 $$ IOUtils.readFully(in, buf, 0, buf.length)[ FD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_5 $$ int corruptFileLen = (int) fileSys.getFileStatus(fileToCorrupt).getLen()[ CD ]
Line_11 $$ boolean gotException = false-->Line_16 $$ gotException = true[ FD ]
Line_12 $$ InputStream in = fileSys.open(file)-->Line_19 $$ in.close()[ FD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_9 $$ out.write(buf, 0, corruptFileLen / 4)[ CD ]
Line_3 $$ RandomAccessFile out = new RandomAccessFile(new File(fileToCorrupt.toString()), "rw")-->Line_10 $$ out.close()[ FD ]
Line_2 $$ private void checkFileCorruption(LocalFileSystem fileSys, Path file, Path fileToCorrupt) throws IOException -->Line_12 $$ InputStream in = fileSys.open(file)[ FD ]
Line_3 $$ RandomAccessFile out = new RandomAccessFile(new File(fileToCorrupt.toString()), "rw")-->Line_9 $$ out.write(buf, 0, corruptFileLen / 4)[ FD ]
