Line_2 $$ public static ClassType getHelperClass(String name, EvaluationContext evaluationContext, DebugProcess process) throws EvaluateException -->Line_11 $$ InputStream stream = ImageSerializer.class.getResourceAsStream("/" + name.replaceAll("[.]", "/") + ".class")[ FD ]
Line_2 $$ public static ClassType getHelperClass(String name, EvaluationContext evaluationContext, DebugProcess process) throws EvaluateException -->Line_15 $$ defineClass(name, StreamUtil.loadFromStream(stream), evaluationContext, process, classLoader)[ FD ]
Line_11 $$ InputStream stream = ImageSerializer.class.getResourceAsStream("/" + name.replaceAll("[.]", "/") + ".class")-->Line_22 $$ if (stream != null) [ FD ]
Line_8 $$ if (cause instanceof InvocationException) -->Line_9 $$ if ("java.lang.ClassNotFoundException".equals(((InvocationException) cause).exception().type().name())) [ CD ]
Line_13 $$ if (stream == null)-->Line_14 $$ return null[ CD ]
Line_11 $$ InputStream stream = ImageSerializer.class.getResourceAsStream("/" + name.replaceAll("[.]", "/") + ".class")-->Line_23 $$ stream.close()[ FD ]
Line_11 $$ InputStream stream = ImageSerializer.class.getResourceAsStream("/" + name.replaceAll("[.]", "/") + ".class")-->Line_13 $$ if (stream == null)[ FD ]
Line_2 $$ public static ClassType getHelperClass(String name, EvaluationContext evaluationContext, DebugProcess process) throws EvaluateException -->Line_5 $$ return (ClassType) process.findClass(evaluationContext, name, classLoader)[ FD ]
Line_4 $$ ClassLoaderReference classLoader = evaluationContext.getClassLoader()-->Line_16 $$ ((EvaluationContextImpl) evaluationContext).setClassLoader(classLoader)[ FD ]
Line_4 $$ ClassLoaderReference classLoader = evaluationContext.getClassLoader()-->Line_17 $$ return (ClassType) process.findClass(evaluationContext, name, classLoader)[ FD ]
Line_2 $$ public static ClassType getHelperClass(String name, EvaluationContext evaluationContext, DebugProcess process) throws EvaluateException -->Line_4 $$ ClassLoaderReference classLoader = evaluationContext.getClassLoader()[ FD ]
Line_4 $$ ClassLoaderReference classLoader = evaluationContext.getClassLoader()-->Line_15 $$ defineClass(name, StreamUtil.loadFromStream(stream), evaluationContext, process, classLoader)[ FD ]
Line_22 $$ if (stream != null) -->Line_23 $$ stream.close()[ CD ]
Line_7 $$ Throwable cause = e.getCause()-->Line_8 $$ if (cause instanceof InvocationException) [ FD ]
Line_2 $$ public static ClassType getHelperClass(String name, EvaluationContext evaluationContext, DebugProcess process) throws EvaluateException -->Line_10 $$ ClassLoaderReference classLoader = getClassLoader(evaluationContext, process)[ FD ]
Line_4 $$ ClassLoaderReference classLoader = evaluationContext.getClassLoader()-->Line_5 $$ return (ClassType) process.findClass(evaluationContext, name, classLoader)[ FD ]
Line_9 $$ if ("java.lang.ClassNotFoundException".equals(((InvocationException) cause).exception().type().name())) -->Line_11 $$ InputStream stream = ImageSerializer.class.getResourceAsStream("/" + name.replaceAll("[.]", "/") + ".class")[ CD ]
Line_9 $$ if ("java.lang.ClassNotFoundException".equals(((InvocationException) cause).exception().type().name())) -->Line_10 $$ ClassLoaderReference classLoader = getClassLoader(evaluationContext, process)[ CD ]
Line_2 $$ public static ClassType getHelperClass(String name, EvaluationContext evaluationContext, DebugProcess process) throws EvaluateException -->Line_17 $$ return (ClassType) process.findClass(evaluationContext, name, classLoader)[ FD ]
Line_11 $$ InputStream stream = ImageSerializer.class.getResourceAsStream("/" + name.replaceAll("[.]", "/") + ".class")-->Line_15 $$ defineClass(name, StreamUtil.loadFromStream(stream), evaluationContext, process, classLoader)[ FD ]
