Line_2 $$ private static void ensureLogConfigExists(final File logConfig) throws IOException -->Line_4 $$ FileUtil.createIfDoesntExist(logConfig)[ FD ]
Line_5 $$ final InputStream in = LogSetup.class.getResourceAsStream("/" + DEFAULT_LOGGER_CONFIG)-->Line_10 $$ FileUtil.copy(in, out)[ FD ]
Line_3 $$ if (!logConfig.exists()) -->Line_5 $$ final InputStream in = LogSetup.class.getResourceAsStream("/" + DEFAULT_LOGGER_CONFIG)[ CD ]
Line_3 $$ if (!logConfig.exists()) -->Line_4 $$ FileUtil.createIfDoesntExist(logConfig)[ CD ]
Line_5 $$ final InputStream in = LogSetup.class.getResourceAsStream("/" + DEFAULT_LOGGER_CONFIG)-->Line_6 $$ if (in != null) [ FD ]
Line_8 $$ final FileOutputStream out = new FileOutputStream(logConfig)-->Line_12 $$ out.close()[ FD ]
Line_8 $$ final FileOutputStream out = new FileOutputStream(logConfig)-->Line_10 $$ FileUtil.copy(in, out)[ FD ]
Line_2 $$ private static void ensureLogConfigExists(final File logConfig) throws IOException -->Line_3 $$ if (!logConfig.exists()) [ CD ]
Line_5 $$ final InputStream in = LogSetup.class.getResourceAsStream("/" + DEFAULT_LOGGER_CONFIG)-->Line_15 $$ in.close()[ FD ]
Line_3 $$ if (!logConfig.exists()) -->Line_6 $$ if (in != null) [ CD ]
Line_2 $$ private static void ensureLogConfigExists(final File logConfig) throws IOException -->Line_3 $$ if (!logConfig.exists()) [ FD ]
