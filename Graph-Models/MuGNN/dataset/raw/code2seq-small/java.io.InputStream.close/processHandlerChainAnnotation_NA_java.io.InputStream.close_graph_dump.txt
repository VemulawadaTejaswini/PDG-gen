Line_7 $$ final Set<String> endpointHandlers = getHandlers(is)-->Line_8 $$ if (endpointHandlers.size() > 0) [ FD ]
Line_2 $$ private static void processHandlerChainAnnotation(final ResourceRoot currentResourceRoot, final List<ResourceRoot> resourceRoots, final AnnotationInstance handlerChainAnnotation, final String endpointClass, final WSEndpointHandlersMapping mapping) throws DeploymentUnitProcessingException -->Line_3 $$ final String handlerChainConfigFile = handlerChainAnnotation.value("file").asString()[ CD ]
Line_2 $$ private static void processHandlerChainAnnotation(final ResourceRoot currentResourceRoot, final List<ResourceRoot> resourceRoots, final AnnotationInstance handlerChainAnnotation, final String endpointClass, final WSEndpointHandlersMapping mapping) throws DeploymentUnitProcessingException -->Line_4 $$ InputStream is = null[ CD ]
Line_4 $$ InputStream is = null-->Line_6 $$ is = getInputStream(currentResourceRoot, resourceRoots, handlerChainConfigFile, endpointClass)[ FD ]
Line_6 $$ is = getInputStream(currentResourceRoot, resourceRoots, handlerChainConfigFile, endpointClass)-->Line_7 $$ final Set<String> endpointHandlers = getHandlers(is)[ FD ]
Line_8 $$ if (endpointHandlers.size() > 0) -->Line_9 $$ mapping.registerEndpointHandlers(endpointClass, endpointHandlers)[ CD ]
Line_7 $$ final Set<String> endpointHandlers = getHandlers(is)-->Line_9 $$ mapping.registerEndpointHandlers(endpointClass, endpointHandlers)[ FD ]
Line_2 $$ private static void processHandlerChainAnnotation(final ResourceRoot currentResourceRoot, final List<ResourceRoot> resourceRoots, final AnnotationInstance handlerChainAnnotation, final String endpointClass, final WSEndpointHandlersMapping mapping) throws DeploymentUnitProcessingException -->Line_3 $$ final String handlerChainConfigFile = handlerChainAnnotation.value("file").asString()[ FD ]
Line_2 $$ private static void processHandlerChainAnnotation(final ResourceRoot currentResourceRoot, final List<ResourceRoot> resourceRoots, final AnnotationInstance handlerChainAnnotation, final String endpointClass, final WSEndpointHandlersMapping mapping) throws DeploymentUnitProcessingException -->Line_6 $$ is = getInputStream(currentResourceRoot, resourceRoots, handlerChainConfigFile, endpointClass)[ FD ]
Line_4 $$ InputStream is = null-->Line_7 $$ final Set<String> endpointHandlers = getHandlers(is)[ FD ]
Line_8 $$ if (endpointHandlers.size() > 0) -->Line_11 $$ WSLogger.ROOT_LOGGER.invalidHandlerChainFile(handlerChainConfigFile)[ CD ]
Line_6 $$ is = getInputStream(currentResourceRoot, resourceRoots, handlerChainConfigFile, endpointClass)-->Line_18 $$ is.close()[ FD ]
Line_3 $$ final String handlerChainConfigFile = handlerChainAnnotation.value("file").asString()-->Line_6 $$ is = getInputStream(currentResourceRoot, resourceRoots, handlerChainConfigFile, endpointClass)[ FD ]
Line_4 $$ InputStream is = null-->Line_18 $$ is.close()[ FD ]
Line_2 $$ private static void processHandlerChainAnnotation(final ResourceRoot currentResourceRoot, final List<ResourceRoot> resourceRoots, final AnnotationInstance handlerChainAnnotation, final String endpointClass, final WSEndpointHandlersMapping mapping) throws DeploymentUnitProcessingException -->Line_9 $$ mapping.registerEndpointHandlers(endpointClass, endpointHandlers)[ FD ]
Line_4 $$ InputStream is = null-->Line_16 $$ if (is != null) [ FD ]
Line_6 $$ is = getInputStream(currentResourceRoot, resourceRoots, handlerChainConfigFile, endpointClass)-->Line_16 $$ if (is != null) [ FD ]
Line_3 $$ final String handlerChainConfigFile = handlerChainAnnotation.value("file").asString()-->Line_11 $$ WSLogger.ROOT_LOGGER.invalidHandlerChainFile(handlerChainConfigFile)[ FD ]
