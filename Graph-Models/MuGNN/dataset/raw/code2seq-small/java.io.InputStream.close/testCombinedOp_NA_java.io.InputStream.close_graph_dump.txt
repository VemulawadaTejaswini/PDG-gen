Line_2 $$ public void testCombinedOp() throws Exception -->Line_17 $$ Assert.assertEquals(len2, n)[ CD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_41 $$ readData = new byte[nRead][ CD ]
Line_19 $$ pos = ((Seekable) in).getPos()-->Line_38 $$ Assert.assertEquals(2 * len1 + 2 * len2 + nRead, pos)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_22 $$ int nRead = ((ByteBufferReadable) in).read(buf)[ CD ]
Line_23 $$ readData = new byte[nRead]-->Line_28 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_23 $$ readData = new byte[nRead]-->Line_46 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_10 $$ byte[] expectedData = new byte[len1][ CD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_46 $$ Assert.assertArrayEquals(readData, expectedData)[ CD ]
Line_44 $$ expectedData = new byte[nRead]-->Line_45 $$ System.arraycopy(data, (int) pos, expectedData, 0, nRead)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_50 $$ Assert.assertEquals(n, -1)[ CD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_43 $$ buf.get(readData)[ CD ]
Line_5 $$ final int len1 = dataLen / 8-->Line_35 $$ System.arraycopy(data, (int) pos, expectedData, 0, len1)[ FD ]
Line_5 $$ final int len1 = dataLen / 8-->Line_11 $$ System.arraycopy(data, 0, expectedData, 0, len1)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_13 $$ long pos = ((Seekable) in).getPos()[ CD ]
Line_39 $$ buf = ByteBuffer.allocate(len1)-->Line_40 $$ nRead = ((ByteBufferReadable) in).read(buf)[ FD ]
Line_8 $$ byte[] readData = new byte[len1]-->Line_9 $$ readAll(in, readData, 0, len1)[ FD ]
Line_21 $$ ByteBuffer buf = ByteBuffer.allocate(len1)-->Line_24 $$ buf.rewind()[ FD ]
Line_6 $$ final int len2 = dataLen / 10-->Line_16 $$ long n = in.skip(len2)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_21 $$ ByteBuffer buf = ByteBuffer.allocate(len1)[ CD ]
Line_26 $$ expectedData = new byte[nRead]-->Line_28 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_10 $$ byte[] expectedData = new byte[len1]-->Line_11 $$ System.arraycopy(data, 0, expectedData, 0, len1)[ FD ]
Line_23 $$ readData = new byte[nRead]-->Line_32 $$ readData = new byte[len1][ FD ]
Line_5 $$ final int len1 = dataLen / 8-->Line_39 $$ buf = ByteBuffer.allocate(len1)[ FD ]
Line_34 $$ expectedData = new byte[len1]-->Line_44 $$ expectedData = new byte[nRead][ FD ]
Line_13 $$ long pos = ((Seekable) in).getPos()-->Line_29 $$ pos = ((Seekable) in).getPos()[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_7 $$ InputStream in = getInputStream(defaultBufferSize)[ CD ]
Line_21 $$ ByteBuffer buf = ByteBuffer.allocate(len1)-->Line_42 $$ buf.rewind()[ FD ]
Line_13 $$ long pos = ((Seekable) in).getPos()-->Line_14 $$ Assert.assertEquals(len1, pos)[ FD ]
Line_21 $$ ByteBuffer buf = ByteBuffer.allocate(len1)-->Line_49 $$ n = ((ByteBufferReadable) in).read(buf)[ FD ]
Line_10 $$ byte[] expectedData = new byte[len1]-->Line_27 $$ System.arraycopy(data, (int) pos, expectedData, 0, nRead)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_26 $$ expectedData = new byte[nRead][ CD ]
Line_26 $$ expectedData = new byte[nRead]-->Line_36 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_3 $$ OutputStream out = getOutputStream(defaultBufferSize)-->Line_4 $$ writeData(out)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_27 $$ System.arraycopy(data, (int) pos, expectedData, 0, nRead)[ CD ]
Line_8 $$ byte[] readData = new byte[len1]-->Line_41 $$ readData = new byte[nRead][ FD ]
Line_34 $$ expectedData = new byte[len1]-->Line_46 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_35 $$ System.arraycopy(data, (int) pos, expectedData, 0, len1)[ CD ]
Line_7 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_9 $$ readAll(in, readData, 0, len1)[ FD ]
Line_34 $$ expectedData = new byte[len1]-->Line_45 $$ System.arraycopy(data, (int) pos, expectedData, 0, nRead)[ FD ]
Line_7 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_51 $$ in.close()[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_33 $$ readAll(in, readData, 0, len1)[ CD ]
Line_39 $$ buf = ByteBuffer.allocate(len1)-->Line_48 $$ buf.clear()[ FD ]
Line_49 $$ n = ((ByteBufferReadable) in).read(buf)-->Line_50 $$ Assert.assertEquals(n, -1)[ FD ]
Line_32 $$ readData = new byte[len1]-->Line_41 $$ readData = new byte[nRead][ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_16 $$ long n = in.skip(len2)[ CD ]
Line_10 $$ byte[] expectedData = new byte[len1]-->Line_26 $$ expectedData = new byte[nRead][ FD ]
Line_26 $$ expectedData = new byte[nRead]-->Line_34 $$ expectedData = new byte[len1][ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_32 $$ readData = new byte[len1][ CD ]
Line_10 $$ byte[] expectedData = new byte[len1]-->Line_36 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_10 $$ byte[] expectedData = new byte[len1]-->Line_46 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_10 $$ byte[] expectedData = new byte[len1]-->Line_28 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_23 $$ readData = new byte[nRead]-->Line_36 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_23 $$ readData = new byte[nRead]-->Line_43 $$ buf.get(readData)[ FD ]
Line_41 $$ readData = new byte[nRead]-->Line_46 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_7 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_31 $$ positionedReadCheck(in, dataLen / 3)[ FD ]
Line_10 $$ byte[] expectedData = new byte[len1]-->Line_35 $$ System.arraycopy(data, (int) pos, expectedData, 0, len1)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_48 $$ buf.clear()[ CD ]
Line_13 $$ long pos = ((Seekable) in).getPos()-->Line_19 $$ pos = ((Seekable) in).getPos()[ FD ]
Line_7 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_33 $$ readAll(in, readData, 0, len1)[ FD ]
Line_32 $$ readData = new byte[len1]-->Line_36 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_16 $$ long n = in.skip(len2)-->Line_49 $$ n = ((ByteBufferReadable) in).read(buf)[ FD ]
Line_10 $$ byte[] expectedData = new byte[len1]-->Line_34 $$ expectedData = new byte[len1][ FD ]
Line_13 $$ long pos = ((Seekable) in).getPos()-->Line_30 $$ Assert.assertEquals(len1 + 2 * len2 + nRead, pos)[ FD ]
Line_19 $$ pos = ((Seekable) in).getPos()-->Line_37 $$ pos = ((Seekable) in).getPos()[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_6 $$ final int len2 = dataLen / 10[ CD ]
Line_8 $$ byte[] readData = new byte[len1]-->Line_36 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_26 $$ expectedData = new byte[nRead]-->Line_46 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_15 $$ ((Seekable) in).seek(pos + len2)[ CD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_14 $$ Assert.assertEquals(len1, pos)[ CD ]
Line_10 $$ byte[] expectedData = new byte[len1]-->Line_44 $$ expectedData = new byte[nRead][ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_47 $$ ((Seekable) in).seek(dataLen)[ CD ]
Line_39 $$ buf = ByteBuffer.allocate(len1)-->Line_43 $$ buf.get(readData)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_30 $$ Assert.assertEquals(len1 + 2 * len2 + nRead, pos)[ CD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_42 $$ buf.rewind()[ CD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_11 $$ System.arraycopy(data, 0, expectedData, 0, len1)[ CD ]
Line_10 $$ byte[] expectedData = new byte[len1]-->Line_45 $$ System.arraycopy(data, (int) pos, expectedData, 0, nRead)[ FD ]
Line_5 $$ final int len1 = dataLen / 8-->Line_21 $$ ByteBuffer buf = ByteBuffer.allocate(len1)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_51 $$ in.close()[ CD ]
Line_26 $$ expectedData = new byte[nRead]-->Line_45 $$ System.arraycopy(data, (int) pos, expectedData, 0, nRead)[ FD ]
Line_8 $$ byte[] readData = new byte[len1]-->Line_46 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_49 $$ n = ((ByteBufferReadable) in).read(buf)[ CD ]
Line_19 $$ pos = ((Seekable) in).getPos()-->Line_20 $$ Assert.assertEquals(len1 + len2 + len2, pos)[ FD ]
Line_41 $$ readData = new byte[nRead]-->Line_43 $$ buf.get(readData)[ FD ]
Line_39 $$ buf = ByteBuffer.allocate(len1)-->Line_42 $$ buf.rewind()[ FD ]
Line_32 $$ readData = new byte[len1]-->Line_46 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_26 $$ expectedData = new byte[nRead]-->Line_35 $$ System.arraycopy(data, (int) pos, expectedData, 0, len1)[ FD ]
Line_22 $$ int nRead = ((ByteBufferReadable) in).read(buf)-->Line_27 $$ System.arraycopy(data, (int) pos, expectedData, 0, nRead)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_34 $$ expectedData = new byte[len1][ CD ]
Line_40 $$ nRead = ((ByteBufferReadable) in).read(buf)-->Line_45 $$ System.arraycopy(data, (int) pos, expectedData, 0, nRead)[ FD ]
Line_34 $$ expectedData = new byte[len1]-->Line_36 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_16 $$ long n = in.skip(len2)-->Line_50 $$ Assert.assertEquals(n, -1)[ FD ]
Line_29 $$ pos = ((Seekable) in).getPos()-->Line_30 $$ Assert.assertEquals(len1 + 2 * len2 + nRead, pos)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_18 $$ positionedReadCheck(in, dataLen / 4)[ CD ]
Line_29 $$ pos = ((Seekable) in).getPos()-->Line_37 $$ pos = ((Seekable) in).getPos()[ FD ]
Line_21 $$ ByteBuffer buf = ByteBuffer.allocate(len1)-->Line_48 $$ buf.clear()[ FD ]
Line_39 $$ buf = ByteBuffer.allocate(len1)-->Line_49 $$ n = ((ByteBufferReadable) in).read(buf)[ FD ]
Line_26 $$ expectedData = new byte[nRead]-->Line_27 $$ System.arraycopy(data, (int) pos, expectedData, 0, nRead)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_39 $$ buf = ByteBuffer.allocate(len1)[ CD ]
Line_13 $$ long pos = ((Seekable) in).getPos()-->Line_38 $$ Assert.assertEquals(2 * len1 + 2 * len2 + nRead, pos)[ FD ]
Line_32 $$ readData = new byte[len1]-->Line_33 $$ readAll(in, readData, 0, len1)[ FD ]
Line_34 $$ expectedData = new byte[len1]-->Line_35 $$ System.arraycopy(data, (int) pos, expectedData, 0, len1)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_9 $$ readAll(in, readData, 0, len1)[ CD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_31 $$ positionedReadCheck(in, dataLen / 3)[ CD ]
Line_19 $$ pos = ((Seekable) in).getPos()-->Line_30 $$ Assert.assertEquals(len1 + 2 * len2 + nRead, pos)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_37 $$ pos = ((Seekable) in).getPos()[ CD ]
Line_21 $$ ByteBuffer buf = ByteBuffer.allocate(len1)-->Line_22 $$ int nRead = ((ByteBufferReadable) in).read(buf)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_5 $$ final int len1 = dataLen / 8[ CD ]
Line_8 $$ byte[] readData = new byte[len1]-->Line_28 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_38 $$ Assert.assertEquals(2 * len1 + 2 * len2 + nRead, pos)[ CD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_3 $$ OutputStream out = getOutputStream(defaultBufferSize)[ CD ]
Line_16 $$ long n = in.skip(len2)-->Line_17 $$ Assert.assertEquals(len2, n)[ FD ]
Line_8 $$ byte[] readData = new byte[len1]-->Line_33 $$ readAll(in, readData, 0, len1)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_24 $$ buf.rewind()[ CD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_4 $$ writeData(out)[ CD ]
Line_19 $$ pos = ((Seekable) in).getPos()-->Line_29 $$ pos = ((Seekable) in).getPos()[ FD ]
Line_10 $$ byte[] expectedData = new byte[len1]-->Line_12 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_44 $$ expectedData = new byte[nRead]-->Line_46 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_12 $$ Assert.assertArrayEquals(readData, expectedData)[ CD ]
Line_21 $$ ByteBuffer buf = ByteBuffer.allocate(len1)-->Line_39 $$ buf = ByteBuffer.allocate(len1)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_19 $$ pos = ((Seekable) in).getPos()[ CD ]
Line_5 $$ final int len1 = dataLen / 8-->Line_14 $$ Assert.assertEquals(len1, pos)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_20 $$ Assert.assertEquals(len1 + len2 + len2, pos)[ CD ]
Line_8 $$ byte[] readData = new byte[len1]-->Line_23 $$ readData = new byte[nRead][ FD ]
Line_23 $$ readData = new byte[nRead]-->Line_33 $$ readAll(in, readData, 0, len1)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_36 $$ Assert.assertArrayEquals(readData, expectedData)[ CD ]
Line_6 $$ final int len2 = dataLen / 10-->Line_17 $$ Assert.assertEquals(len2, n)[ FD ]
Line_29 $$ pos = ((Seekable) in).getPos()-->Line_38 $$ Assert.assertEquals(2 * len1 + 2 * len2 + nRead, pos)[ FD ]
Line_26 $$ expectedData = new byte[nRead]-->Line_44 $$ expectedData = new byte[nRead][ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_28 $$ Assert.assertArrayEquals(readData, expectedData)[ CD ]
Line_7 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_18 $$ positionedReadCheck(in, dataLen / 4)[ FD ]
Line_21 $$ ByteBuffer buf = ByteBuffer.allocate(len1)-->Line_40 $$ nRead = ((ByteBufferReadable) in).read(buf)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_8 $$ byte[] readData = new byte[len1][ CD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_44 $$ expectedData = new byte[nRead][ CD ]
Line_22 $$ int nRead = ((ByteBufferReadable) in).read(buf)-->Line_40 $$ nRead = ((ByteBufferReadable) in).read(buf)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_23 $$ readData = new byte[nRead][ CD ]
Line_23 $$ readData = new byte[nRead]-->Line_25 $$ buf.get(readData)[ FD ]
Line_5 $$ final int len1 = dataLen / 8-->Line_33 $$ readAll(in, readData, 0, len1)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_40 $$ nRead = ((ByteBufferReadable) in).read(buf)[ CD ]
Line_32 $$ readData = new byte[len1]-->Line_43 $$ buf.get(readData)[ FD ]
Line_5 $$ final int len1 = dataLen / 8-->Line_9 $$ readAll(in, readData, 0, len1)[ FD ]
Line_37 $$ pos = ((Seekable) in).getPos()-->Line_38 $$ Assert.assertEquals(2 * len1 + 2 * len2 + nRead, pos)[ FD ]
Line_8 $$ byte[] readData = new byte[len1]-->Line_32 $$ readData = new byte[len1][ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_25 $$ buf.get(readData)[ CD ]
Line_8 $$ byte[] readData = new byte[len1]-->Line_43 $$ buf.get(readData)[ FD ]
Line_22 $$ int nRead = ((ByteBufferReadable) in).read(buf)-->Line_45 $$ System.arraycopy(data, (int) pos, expectedData, 0, nRead)[ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_29 $$ pos = ((Seekable) in).getPos()[ CD ]
Line_21 $$ ByteBuffer buf = ByteBuffer.allocate(len1)-->Line_43 $$ buf.get(readData)[ FD ]
Line_23 $$ readData = new byte[nRead]-->Line_41 $$ readData = new byte[nRead][ FD ]
Line_2 $$ public void testCombinedOp() throws Exception -->Line_45 $$ System.arraycopy(data, (int) pos, expectedData, 0, nRead)[ CD ]
Line_7 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_16 $$ long n = in.skip(len2)[ FD ]
Line_13 $$ long pos = ((Seekable) in).getPos()-->Line_20 $$ Assert.assertEquals(len1 + len2 + len2, pos)[ FD ]
Line_8 $$ byte[] readData = new byte[len1]-->Line_12 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_13 $$ long pos = ((Seekable) in).getPos()-->Line_37 $$ pos = ((Seekable) in).getPos()[ FD ]
Line_21 $$ ByteBuffer buf = ByteBuffer.allocate(len1)-->Line_25 $$ buf.get(readData)[ FD ]
Line_8 $$ byte[] readData = new byte[len1]-->Line_25 $$ buf.get(readData)[ FD ]
