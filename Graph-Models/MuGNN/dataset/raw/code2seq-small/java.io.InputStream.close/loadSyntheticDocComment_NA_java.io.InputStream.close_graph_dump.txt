Line_9 $$ buffer = new StringBuilder()-->Line_12 $$ buffer.append((char) ch)[ FD ]
Line_28 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getInstance(myProject).getElementFactory()-->Line_30 $$ return elementFactory.createDocCommentFromText(s)[ FD ]
Line_2 $$ private PsiDocComment loadSyntheticDocComment(final PsiMethod method, final String resourceName) -->Line_27 $$ s = StringUtil.replace(s, "<ClassName>", containingClass.getName())[ CD ]
Line_2 $$ private PsiDocComment loadSyntheticDocComment(final PsiMethod method, final String resourceName) -->Line_7 $$ final StringBuilder buffer[ CD ]
Line_3 $$ final InputStream commentStream = JavaDocInfoGenerator.class.getResourceAsStream(resourceName)-->Line_11 $$ for (int ch; (ch = commentStream.read()) != -1; ) [ FD ]
Line_2 $$ private PsiDocComment loadSyntheticDocComment(final PsiMethod method, final String resourceName) -->Line_25 $$ PsiClass containingClass = method.getContainingClass()[ FD ]
Line_2 $$ private PsiDocComment loadSyntheticDocComment(final PsiMethod method, final String resourceName) -->Line_4 $$ if (commentStream == null) [ CD ]
Line_3 $$ final InputStream commentStream = JavaDocInfoGenerator.class.getResourceAsStream(resourceName)-->Line_19 $$ commentStream.close()[ FD ]
Line_7 $$ final StringBuilder buffer-->Line_12 $$ buffer.append((char) ch)[ FD ]
Line_25 $$ PsiClass containingClass = method.getContainingClass()-->Line_27 $$ s = StringUtil.replace(s, "<ClassName>", containingClass.getName())[ FD ]
Line_7 $$ final StringBuilder buffer-->Line_24 $$ String s = buffer.toString()[ FD ]
Line_9 $$ buffer = new StringBuilder()-->Line_24 $$ String s = buffer.toString()[ FD ]
Line_2 $$ private PsiDocComment loadSyntheticDocComment(final PsiMethod method, final String resourceName) -->Line_25 $$ PsiClass containingClass = method.getContainingClass()[ CD ]
Line_11 $$ for (int ch; (ch = commentStream.read()) != -1; ) -->Line_12 $$ buffer.append((char) ch)[ CD ]
Line_7 $$ final StringBuilder buffer-->Line_9 $$ buffer = new StringBuilder()[ FD ]
Line_4 $$ if (commentStream == null) -->Line_5 $$ return null[ CD ]
Line_24 $$ String s = buffer.toString()-->Line_27 $$ s = StringUtil.replace(s, "<ClassName>", containingClass.getName())[ FD ]
Line_2 $$ private PsiDocComment loadSyntheticDocComment(final PsiMethod method, final String resourceName) -->Line_3 $$ final InputStream commentStream = JavaDocInfoGenerator.class.getResourceAsStream(resourceName)[ FD ]
Line_24 $$ String s = buffer.toString()-->Line_30 $$ return elementFactory.createDocCommentFromText(s)[ FD ]
Line_2 $$ private PsiDocComment loadSyntheticDocComment(final PsiMethod method, final String resourceName) -->Line_3 $$ final InputStream commentStream = JavaDocInfoGenerator.class.getResourceAsStream(resourceName)[ CD ]
Line_2 $$ private PsiDocComment loadSyntheticDocComment(final PsiMethod method, final String resourceName) -->Line_24 $$ String s = buffer.toString()[ CD ]
Line_2 $$ private PsiDocComment loadSyntheticDocComment(final PsiMethod method, final String resourceName) -->Line_28 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getInstance(myProject).getElementFactory()[ CD ]
Line_3 $$ final InputStream commentStream = JavaDocInfoGenerator.class.getResourceAsStream(resourceName)-->Line_4 $$ if (commentStream == null) [ FD ]
Line_27 $$ s = StringUtil.replace(s, "<ClassName>", containingClass.getName())-->Line_30 $$ return elementFactory.createDocCommentFromText(s)[ FD ]
