Line_2 $$ private void readCheck(InputStream in) throws Exception -->Line_11 $$ in.close()[ FD ]
Line_2 $$ private void readCheck(InputStream in) throws Exception -->Line_8 $$ Assert.assertArrayEquals(result, expectedData)[ CD ]
Line_4 $$ int n = readAll(in, result, 0, dataLen)-->Line_10 $$ Assert.assertEquals(n, -1)[ FD ]
Line_2 $$ private void readCheck(InputStream in) throws Exception -->Line_11 $$ in.close()[ CD ]
Line_3 $$ byte[] result = new byte[dataLen]-->Line_9 $$ n = in.read(result, 0, dataLen)[ FD ]
Line_3 $$ byte[] result = new byte[dataLen]-->Line_8 $$ Assert.assertArrayEquals(result, expectedData)[ FD ]
Line_2 $$ private void readCheck(InputStream in) throws Exception -->Line_6 $$ byte[] expectedData = new byte[n][ CD ]
Line_2 $$ private void readCheck(InputStream in) throws Exception -->Line_3 $$ byte[] result = new byte[dataLen][ CD ]
Line_9 $$ n = in.read(result, 0, dataLen)-->Line_10 $$ Assert.assertEquals(n, -1)[ FD ]
Line_4 $$ int n = readAll(in, result, 0, dataLen)-->Line_5 $$ Assert.assertEquals(dataLen, n)[ FD ]
Line_6 $$ byte[] expectedData = new byte[n]-->Line_8 $$ Assert.assertArrayEquals(result, expectedData)[ FD ]
Line_2 $$ private void readCheck(InputStream in) throws Exception -->Line_7 $$ System.arraycopy(data, 0, expectedData, 0, n)[ CD ]
Line_6 $$ byte[] expectedData = new byte[n]-->Line_7 $$ System.arraycopy(data, 0, expectedData, 0, n)[ FD ]
Line_3 $$ byte[] result = new byte[dataLen]-->Line_4 $$ int n = readAll(in, result, 0, dataLen)[ FD ]
Line_2 $$ private void readCheck(InputStream in) throws Exception -->Line_4 $$ int n = readAll(in, result, 0, dataLen)[ CD ]
Line_4 $$ int n = readAll(in, result, 0, dataLen)-->Line_7 $$ System.arraycopy(data, 0, expectedData, 0, n)[ FD ]
Line_4 $$ int n = readAll(in, result, 0, dataLen)-->Line_9 $$ n = in.read(result, 0, dataLen)[ FD ]
Line_2 $$ private void readCheck(InputStream in) throws Exception -->Line_5 $$ Assert.assertEquals(dataLen, n)[ CD ]
Line_2 $$ private void readCheck(InputStream in) throws Exception -->Line_9 $$ n = in.read(result, 0, dataLen)[ FD ]
Line_2 $$ private void readCheck(InputStream in) throws Exception -->Line_9 $$ n = in.read(result, 0, dataLen)[ CD ]
Line_2 $$ private void readCheck(InputStream in) throws Exception -->Line_10 $$ Assert.assertEquals(n, -1)[ CD ]
Line_2 $$ private void readCheck(InputStream in) throws Exception -->Line_4 $$ int n = readAll(in, result, 0, dataLen)[ FD ]
