Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_34 $$ zos.closeEntry()[ CD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_18 $$ ZipEntry e = new ZipEntry(relativeName)[ CD ]
Line_18 $$ ZipEntry e = new ZipEntry(relativeName)-->Line_22 $$ e.setSize(0)[ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_7 $$ if (isDir && !StringUtil.endsWithChar(relativeName, '/')) [ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_19 $$ e.setTime(file.lastModified())[ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_10 $$ if (fileFilter != null && !FileUtil.isFilePathAcceptable(file, fileFilter))[ CD ]
Line_20 $$ if (size == 0) -->Line_21 $$ e.setMethod(ZipEntry.STORED)[ CD ]
Line_6 $$ boolean isDir = file.isDirectory()-->Line_26 $$ if (!isDir) [ FD ]
Line_26 $$ if (!isDir) -->Line_27 $$ InputStream is = contentProcessor.getContent(file)[ CD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_27 $$ InputStream is = contentProcessor.getContent(file)[ FD ]
Line_18 $$ ZipEntry e = new ZipEntry(relativeName)-->Line_25 $$ zos.putNextEntry(e)[ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_4 $$ relativeName = relativeName.substring(1)[ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_19 $$ e.setTime(file.lastModified())[ CD ]
Line_18 $$ ZipEntry e = new ZipEntry(relativeName)-->Line_19 $$ e.setTime(file.lastModified())[ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_26 $$ if (!isDir) [ CD ]
Line_18 $$ ZipEntry e = new ZipEntry(relativeName)-->Line_21 $$ e.setMethod(ZipEntry.STORED)[ FD ]
Line_20 $$ if (size == 0) -->Line_22 $$ e.setSize(0)[ CD ]
Line_17 $$ long size = isDir ? 0 : file.length()-->Line_20 $$ if (size == 0) [ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_35 $$ return true[ CD ]
Line_18 $$ ZipEntry e = new ZipEntry(relativeName)-->Line_23 $$ e.setCrc(0)[ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_6 $$ boolean isDir = file.isDirectory()[ CD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_20 $$ if (size == 0) [ CD ]
Line_12 $$ if (writtenItemRelativePaths != null && !writtenItemRelativePaths.add(relativeName))-->Line_13 $$ return false[ CD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_3 $$ while (!relativeName.isEmpty() && relativeName.charAt(0) == '/') [ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_3 $$ while (!relativeName.isEmpty() && relativeName.charAt(0) == '/') [ CD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_17 $$ long size = isDir ? 0 : file.length()[ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_34 $$ zos.closeEntry()[ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_6 $$ boolean isDir = file.isDirectory()[ FD ]
Line_6 $$ boolean isDir = file.isDirectory()-->Line_7 $$ if (isDir && !StringUtil.endsWithChar(relativeName, '/')) [ FD ]
Line_27 $$ InputStream is = contentProcessor.getContent(file)-->Line_31 $$ is.close()[ FD ]
Line_14 $$ if (LOG.isDebugEnabled()) -->Line_15 $$ LOG.debug("Add " + file + " as " + relativeName)[ CD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_25 $$ zos.putNextEntry(e)[ CD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_10 $$ if (fileFilter != null && !FileUtil.isFilePathAcceptable(file, fileFilter))[ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_12 $$ if (writtenItemRelativePaths != null && !writtenItemRelativePaths.add(relativeName))[ CD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_29 $$ FileUtil.copy(is, zos)[ FD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_17 $$ long size = isDir ? 0 : file.length()[ CD ]
Line_20 $$ if (size == 0) -->Line_23 $$ e.setCrc(0)[ CD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_14 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_10 $$ if (fileFilter != null && !FileUtil.isFilePathAcceptable(file, fileFilter))-->Line_11 $$ return false[ CD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_7 $$ if (isDir && !StringUtil.endsWithChar(relativeName, '/')) [ CD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_12 $$ if (writtenItemRelativePaths != null && !writtenItemRelativePaths.add(relativeName))[ FD ]
Line_27 $$ InputStream is = contentProcessor.getContent(file)-->Line_29 $$ FileUtil.copy(is, zos)[ FD ]
Line_3 $$ while (!relativeName.isEmpty() && relativeName.charAt(0) == '/') -->Line_4 $$ relativeName = relativeName.substring(1)[ CD ]
Line_2 $$ public static boolean addFileToZip(@NotNull ZipOutputStream zos, @NotNull File file, @NotNull String relativeName, @Nullable Set<String> writtenItemRelativePaths, @Nullable FileFilter fileFilter, @NotNull FileContentProcessor contentProcessor) throws IOException -->Line_25 $$ zos.putNextEntry(e)[ FD ]
