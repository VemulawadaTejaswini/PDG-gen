Line_18 $$ if (ranges.size() == 1) -->Line_24 $$ setHeaders(request, response, fileName, contentType, null, range)[ CD ]
Line_31 $$ ServletOutputStream servletOutputStream = (ServletOutputStream) outputStream-->Line_46 $$ servletOutputStream.println()[ FD ]
Line_18 $$ if (ranges.size() == 1) -->Line_19 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_8 $$ if (!ranges.isEmpty()) [ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_24 $$ setHeaders(request, response, fileName, contentType, null, range)[ FD ]
Line_5 $$ outputStream = response.getOutputStream()-->Line_17 $$ copyRange(inputStream, outputStream, fullRange.getStart(), fullRange.getLength())[ FD ]
Line_27 $$ if (ranges.size() > 1) -->Line_32 $$ String boundary = "liferay-multipart-boundary-" + System.currentTimeMillis()[ CD ]
Line_38 $$ Range range = ranges.get(i)-->Line_44 $$ inputStream = copyRange(inputStream, outputStream, range.getStart(), range.getLength())[ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_15 $$ response.setContentType(contentType)[ FD ]
Line_11 $$ if ((firstRange == null) || firstRange.equals(fullRange)) -->Line_17 $$ copyRange(inputStream, outputStream, fullRange.getStart(), fullRange.getLength())[ CD ]
Line_37 $$ for (int i = 0; i < ranges.size(); i++) -->Line_40 $$ servletOutputStream.println(StringPool.DOUBLE_DASH + boundary)[ CD ]
Line_11 $$ if ((firstRange == null) || firstRange.equals(fullRange)) -->Line_18 $$ if (ranges.size() == 1) [ CD ]
Line_8 $$ if (!ranges.isEmpty()) -->Line_9 $$ firstRange = ranges.get(0)[ CD ]
Line_3 $$ OutputStream outputStream = null-->Line_17 $$ copyRange(inputStream, outputStream, fullRange.getStart(), fullRange.getLength())[ FD ]
Line_18 $$ if (ranges.size() == 1) -->Line_25 $$ response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)[ CD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_44 $$ inputStream = copyRange(inputStream, outputStream, range.getStart(), range.getLength())[ FD ]
Line_27 $$ if (ranges.size() > 1) -->Line_31 $$ ServletOutputStream servletOutputStream = (ServletOutputStream) outputStream[ CD ]
Line_31 $$ ServletOutputStream servletOutputStream = (ServletOutputStream) outputStream-->Line_39 $$ servletOutputStream.println()[ FD ]
Line_3 $$ OutputStream outputStream = null-->Line_5 $$ outputStream = response.getOutputStream()[ FD ]
Line_6 $$ Range fullRange = new Range(0, fullLength - 1, fullLength)-->Line_16 $$ setHeaders(request, response, fileName, contentType, null, fullRange)[ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_34 $$ response.setContentType(multipartContentType)[ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_18 $$ if (ranges.size() == 1) [ FD ]
Line_9 $$ firstRange = ranges.get(0)-->Line_11 $$ if ((firstRange == null) || firstRange.equals(fullRange)) [ FD ]
Line_27 $$ if (ranges.size() > 1) -->Line_33 $$ String multipartContentType = "multipart/byteranges; boundary=" + boundary[ CD ]
Line_31 $$ ServletOutputStream servletOutputStream = (ServletOutputStream) outputStream-->Line_40 $$ servletOutputStream.println(StringPool.DOUBLE_DASH + boundary)[ FD ]
Line_37 $$ for (int i = 0; i < ranges.size(); i++) -->Line_44 $$ inputStream = copyRange(inputStream, outputStream, range.getStart(), range.getLength())[ CD ]
Line_28 $$ if (_log.isDebugEnabled()) -->Line_29 $$ _log.debug("Attempting to write multiple ranges")[ CD ]
Line_3 $$ OutputStream outputStream = null-->Line_44 $$ inputStream = copyRange(inputStream, outputStream, range.getStart(), range.getLength())[ FD ]
Line_27 $$ if (ranges.size() > 1) -->Line_47 $$ servletOutputStream.println(StringPool.DOUBLE_DASH + boundary + StringPool.DOUBLE_DASH)[ CD ]
Line_37 $$ for (int i = 0; i < ranges.size(); i++) -->Line_41 $$ servletOutputStream.println(HttpHeaders.CONTENT_TYPE + ": " + contentType)[ CD ]
Line_18 $$ if (ranges.size() == 1) -->Line_27 $$ if (ranges.size() > 1) [ CD ]
Line_6 $$ Range fullRange = new Range(0, fullLength - 1, fullLength)-->Line_11 $$ if ((firstRange == null) || firstRange.equals(fullRange)) [ FD ]
Line_18 $$ if (ranges.size() == 1) -->Line_26 $$ copyRange(inputStream, outputStream, range.getStart(), range.getLength())[ CD ]
Line_37 $$ for (int i = 0; i < ranges.size(); i++) -->Line_38 $$ Range range = ranges.get(i)[ CD ]
Line_18 $$ if (ranges.size() == 1) -->Line_22 $$ Range range = ranges.get(0)[ CD ]
Line_27 $$ if (ranges.size() > 1) -->Line_34 $$ response.setContentType(multipartContentType)[ CD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_36 $$ response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)[ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_16 $$ setHeaders(request, response, fileName, contentType, null, fullRange)[ FD ]
Line_6 $$ Range fullRange = new Range(0, fullLength - 1, fullLength)-->Line_17 $$ copyRange(inputStream, outputStream, fullRange.getStart(), fullRange.getLength())[ FD ]
Line_33 $$ String multipartContentType = "multipart/byteranges; boundary=" + boundary-->Line_35 $$ setHeaders(request, response, fileName, multipartContentType, null)[ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_5 $$ outputStream = response.getOutputStream()[ FD ]
Line_31 $$ ServletOutputStream servletOutputStream = (ServletOutputStream) outputStream-->Line_43 $$ servletOutputStream.println()[ FD ]
Line_38 $$ Range range = ranges.get(i)-->Line_42 $$ servletOutputStream.println(HttpHeaders.CONTENT_RANGE + ": " + range.getContentRange())[ FD ]
Line_5 $$ outputStream = response.getOutputStream()-->Line_26 $$ copyRange(inputStream, outputStream, range.getStart(), range.getLength())[ FD ]
Line_7 $$ Range firstRange = null-->Line_11 $$ if ((firstRange == null) || firstRange.equals(fullRange)) [ FD ]
Line_37 $$ for (int i = 0; i < ranges.size(); i++) -->Line_43 $$ servletOutputStream.println()[ CD ]
Line_27 $$ if (ranges.size() > 1) -->Line_28 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_27 $$ if (ranges.size() > 1) [ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_17 $$ copyRange(inputStream, outputStream, fullRange.getStart(), fullRange.getLength())[ FD ]
Line_22 $$ Range range = ranges.get(0)-->Line_24 $$ setHeaders(request, response, fileName, contentType, null, range)[ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_37 $$ for (int i = 0; i < ranges.size(); i++) [ FD ]
Line_37 $$ for (int i = 0; i < ranges.size(); i++) -->Line_42 $$ servletOutputStream.println(HttpHeaders.CONTENT_RANGE + ": " + range.getContentRange())[ CD ]
Line_31 $$ ServletOutputStream servletOutputStream = (ServletOutputStream) outputStream-->Line_47 $$ servletOutputStream.println(StringPool.DOUBLE_DASH + boundary + StringPool.DOUBLE_DASH)[ FD ]
Line_31 $$ ServletOutputStream servletOutputStream = (ServletOutputStream) outputStream-->Line_42 $$ servletOutputStream.println(HttpHeaders.CONTENT_RANGE + ": " + range.getContentRange())[ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_26 $$ copyRange(inputStream, outputStream, range.getStart(), range.getLength())[ FD ]
Line_33 $$ String multipartContentType = "multipart/byteranges; boundary=" + boundary-->Line_34 $$ response.setContentType(multipartContentType)[ FD ]
Line_22 $$ Range range = ranges.get(0)-->Line_26 $$ copyRange(inputStream, outputStream, range.getStart(), range.getLength())[ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_51 $$ inputStream.close()[ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_9 $$ firstRange = ranges.get(0)[ FD ]
Line_11 $$ if ((firstRange == null) || firstRange.equals(fullRange)) -->Line_15 $$ response.setContentType(contentType)[ CD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_23 $$ response.setContentType(contentType)[ FD ]
Line_27 $$ if (ranges.size() > 1) -->Line_46 $$ servletOutputStream.println()[ CD ]
Line_37 $$ for (int i = 0; i < ranges.size(); i++) -->Line_38 $$ Range range = ranges.get(i)[ FD ]
Line_27 $$ if (ranges.size() > 1) -->Line_36 $$ response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)[ CD ]
Line_19 $$ if (_log.isDebugEnabled()) -->Line_20 $$ _log.debug("Attempting to write a single range")[ CD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_38 $$ Range range = ranges.get(i)[ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_3 $$ OutputStream outputStream = null[ CD ]
Line_7 $$ Range firstRange = null-->Line_9 $$ firstRange = ranges.get(0)[ FD ]
Line_31 $$ ServletOutputStream servletOutputStream = (ServletOutputStream) outputStream-->Line_41 $$ servletOutputStream.println(HttpHeaders.CONTENT_TYPE + ": " + contentType)[ FD ]
Line_11 $$ if ((firstRange == null) || firstRange.equals(fullRange)) -->Line_16 $$ setHeaders(request, response, fileName, contentType, null, fullRange)[ CD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_22 $$ Range range = ranges.get(0)[ FD ]
Line_27 $$ if (ranges.size() > 1) -->Line_37 $$ for (int i = 0; i < ranges.size(); i++) [ CD ]
Line_11 $$ if ((firstRange == null) || firstRange.equals(fullRange)) -->Line_12 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_25 $$ response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT)[ FD ]
Line_22 $$ Range range = ranges.get(0)-->Line_42 $$ servletOutputStream.println(HttpHeaders.CONTENT_RANGE + ": " + range.getContentRange())[ FD ]
Line_2 $$ public static void write(HttpServletRequest request, HttpServletResponse response, String fileName, List<Range> ranges, InputStream inputStream, long fullLength, String contentType) throws IOException -->Line_35 $$ setHeaders(request, response, fileName, multipartContentType, null)[ FD ]
Line_3 $$ OutputStream outputStream = null-->Line_26 $$ copyRange(inputStream, outputStream, range.getStart(), range.getLength())[ FD ]
Line_5 $$ outputStream = response.getOutputStream()-->Line_44 $$ inputStream = copyRange(inputStream, outputStream, range.getStart(), range.getLength())[ FD ]
Line_18 $$ if (ranges.size() == 1) -->Line_23 $$ response.setContentType(contentType)[ CD ]
Line_27 $$ if (ranges.size() > 1) -->Line_35 $$ setHeaders(request, response, fileName, multipartContentType, null)[ CD ]
Line_37 $$ for (int i = 0; i < ranges.size(); i++) -->Line_39 $$ servletOutputStream.println()[ CD ]
Line_44 $$ inputStream = copyRange(inputStream, outputStream, range.getStart(), range.getLength())-->Line_51 $$ inputStream.close()[ FD ]
Line_12 $$ if (_log.isDebugEnabled()) -->Line_13 $$ _log.debug("Writing full range")[ CD ]
Line_22 $$ Range range = ranges.get(0)-->Line_44 $$ inputStream = copyRange(inputStream, outputStream, range.getStart(), range.getLength())[ FD ]
