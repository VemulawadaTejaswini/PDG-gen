Line_5 $$ final FSImage nnImage = NameNodeHttpServer.getFsImageFromContext(context)-->Line_9 $$ validateRequest(context, conf, request, response, nnImage, parsedParams.getStorageInfoString())[ FD ]
Line_12 $$ final long txid = parsedParams.getTxId()-->Line_19 $$ if (nnImage.getStorage().findImageFile(nnf, txid) != null) [ FD ]
Line_12 $$ final long txid = parsedParams.getTxId()-->Line_37 $$ currentlyDownloadingCheckpoints.remove(txid)[ FD ]
Line_23 $$ InputStream stream = request.getInputStream()-->Line_34 $$ stream.close()[ FD ]
Line_13 $$ final NameNodeFile nnf = parsedParams.getNameNodeFile()-->Line_27 $$ nnImage.saveDigestAndRenameCheckpointImage(nnf, txid, downloadImageDigest)[ FD ]
Line_10 $$ UserGroupInformation.getCurrentUser().doAs(new PrivilegedExceptionAction<Void>() -->Line_39 $$ return null[ CD ]
Line_13 $$ final NameNodeFile nnf = parsedParams.getNameNodeFile()-->Line_32 $$ nnImage.purgeOldStorage(nnf)[ FD ]
Line_10 $$ UserGroupInformation.getCurrentUser().doAs(new PrivilegedExceptionAction<Void>() -->Line_14 $$ if (!currentlyDownloadingCheckpoints.add(txid)) [ CD ]
Line_5 $$ final FSImage nnImage = NameNodeHttpServer.getFsImageFromContext(context)-->Line_26 $$ MD5Hash downloadImageDigest = TransferFsImage.handleUploadImageRequest(request, txid, nnImage.getStorage(), stream, parsedParams.getFileSize(), getThrottler(conf))[ FD ]
Line_19 $$ if (nnImage.getStorage().findImageFile(nnf, txid) != null) -->Line_20 $$ response.sendError(HttpServletResponse.SC_CONFLICT, "Another checkpointer already uploaded an checkpoint " + "for txid " + txid)[ CD ]
Line_29 $$ long elapsed = monotonicNow() - start-->Line_30 $$ metrics.addPutImage(elapsed)[ FD ]
Line_2 $$ protected void doPut(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException -->Line_20 $$ response.sendError(HttpServletResponse.SC_CONFLICT, "Another checkpointer already uploaded an checkpoint " + "for txid " + txid)[ FD ]
Line_2 $$ protected void doPut(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException -->Line_9 $$ validateRequest(context, conf, request, response, nnImage, parsedParams.getStorageInfoString())[ FD ]
Line_2 $$ protected void doPut(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException -->Line_15 $$ response.sendError(HttpServletResponse.SC_CONFLICT, "Another checkpointer is already in the process of uploading a" + " checkpoint made at transaction ID " + txid)[ FD ]
Line_5 $$ final FSImage nnImage = NameNodeHttpServer.getFsImageFromContext(context)-->Line_32 $$ nnImage.purgeOldStorage(nnf)[ FD ]
Line_28 $$ if (metrics != null) -->Line_30 $$ metrics.addPutImage(elapsed)[ CD ]
Line_6 $$ final Configuration conf = (Configuration) getServletContext().getAttribute(JspHelper.CURRENT_CONF)-->Line_9 $$ validateRequest(context, conf, request, response, nnImage, parsedParams.getStorageInfoString())[ FD ]
Line_7 $$ final PutImageParams parsedParams = new PutImageParams(request, response, conf)-->Line_12 $$ final long txid = parsedParams.getTxId()[ FD ]
Line_2 $$ protected void doPut(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException -->Line_44 $$ response.sendError(HttpServletResponse.SC_GONE, errMsg)[ FD ]
Line_19 $$ if (nnImage.getStorage().findImageFile(nnf, txid) != null) -->Line_21 $$ return null[ CD ]
Line_8 $$ final NameNodeMetrics metrics = NameNode.getNameNodeMetrics()-->Line_30 $$ metrics.addPutImage(elapsed)[ FD ]
Line_12 $$ final long txid = parsedParams.getTxId()-->Line_14 $$ if (!currentlyDownloadingCheckpoints.add(txid)) [ FD ]
Line_4 $$ ServletContext context = getServletContext()-->Line_9 $$ validateRequest(context, conf, request, response, nnImage, parsedParams.getStorageInfoString())[ FD ]
Line_7 $$ final PutImageParams parsedParams = new PutImageParams(request, response, conf)-->Line_9 $$ validateRequest(context, conf, request, response, nnImage, parsedParams.getStorageInfoString())[ FD ]
Line_28 $$ if (metrics != null) -->Line_29 $$ long elapsed = monotonicNow() - start[ CD ]
Line_12 $$ final long txid = parsedParams.getTxId()-->Line_26 $$ MD5Hash downloadImageDigest = TransferFsImage.handleUploadImageRequest(request, txid, nnImage.getStorage(), stream, parsedParams.getFileSize(), getThrottler(conf))[ FD ]
Line_7 $$ final PutImageParams parsedParams = new PutImageParams(request, response, conf)-->Line_26 $$ MD5Hash downloadImageDigest = TransferFsImage.handleUploadImageRequest(request, txid, nnImage.getStorage(), stream, parsedParams.getFileSize(), getThrottler(conf))[ FD ]
Line_7 $$ final PutImageParams parsedParams = new PutImageParams(request, response, conf)-->Line_13 $$ final NameNodeFile nnf = parsedParams.getNameNodeFile()[ FD ]
Line_2 $$ protected void doPut(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException -->Line_23 $$ InputStream stream = request.getInputStream()[ FD ]
Line_10 $$ UserGroupInformation.getCurrentUser().doAs(new PrivilegedExceptionAction<Void>() -->Line_13 $$ final NameNodeFile nnf = parsedParams.getNameNodeFile()[ CD ]
Line_4 $$ ServletContext context = getServletContext()-->Line_5 $$ final FSImage nnImage = NameNodeHttpServer.getFsImageFromContext(context)[ FD ]
Line_23 $$ InputStream stream = request.getInputStream()-->Line_26 $$ MD5Hash downloadImageDigest = TransferFsImage.handleUploadImageRequest(request, txid, nnImage.getStorage(), stream, parsedParams.getFileSize(), getThrottler(conf))[ FD ]
Line_8 $$ final NameNodeMetrics metrics = NameNode.getNameNodeMetrics()-->Line_28 $$ if (metrics != null) [ FD ]
Line_14 $$ if (!currentlyDownloadingCheckpoints.add(txid)) -->Line_15 $$ response.sendError(HttpServletResponse.SC_CONFLICT, "Another checkpointer is already in the process of uploading a" + " checkpoint made at transaction ID " + txid)[ CD ]
Line_10 $$ UserGroupInformation.getCurrentUser().doAs(new PrivilegedExceptionAction<Void>() -->Line_12 $$ final long txid = parsedParams.getTxId()[ CD ]
Line_6 $$ final Configuration conf = (Configuration) getServletContext().getAttribute(JspHelper.CURRENT_CONF)-->Line_26 $$ MD5Hash downloadImageDigest = TransferFsImage.handleUploadImageRequest(request, txid, nnImage.getStorage(), stream, parsedParams.getFileSize(), getThrottler(conf))[ FD ]
Line_5 $$ final FSImage nnImage = NameNodeHttpServer.getFsImageFromContext(context)-->Line_19 $$ if (nnImage.getStorage().findImageFile(nnf, txid) != null) [ FD ]
Line_2 $$ protected void doPut(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException -->Line_26 $$ MD5Hash downloadImageDigest = TransferFsImage.handleUploadImageRequest(request, txid, nnImage.getStorage(), stream, parsedParams.getFileSize(), getThrottler(conf))[ FD ]
Line_14 $$ if (!currentlyDownloadingCheckpoints.add(txid)) -->Line_16 $$ return null[ CD ]
Line_5 $$ final FSImage nnImage = NameNodeHttpServer.getFsImageFromContext(context)-->Line_27 $$ nnImage.saveDigestAndRenameCheckpointImage(nnf, txid, downloadImageDigest)[ FD ]
Line_12 $$ final long txid = parsedParams.getTxId()-->Line_27 $$ nnImage.saveDigestAndRenameCheckpointImage(nnf, txid, downloadImageDigest)[ FD ]
Line_13 $$ final NameNodeFile nnf = parsedParams.getNameNodeFile()-->Line_19 $$ if (nnImage.getStorage().findImageFile(nnf, txid) != null) [ FD ]
Line_26 $$ MD5Hash downloadImageDigest = TransferFsImage.handleUploadImageRequest(request, txid, nnImage.getStorage(), stream, parsedParams.getFileSize(), getThrottler(conf))-->Line_27 $$ nnImage.saveDigestAndRenameCheckpointImage(nnf, txid, downloadImageDigest)[ FD ]
