Line_3 $$ InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))-->Line_4 $$ if (is == null) [ FD ]
Line_2 $$ private Map<Member, String[]> inspectClass(Class<?> clazz) -->Line_29 $$ return NO_DEBUG_INFO_MAP[ CD ]
Line_2 $$ private Map<Member, String[]> inspectClass(Class<?> clazz) -->Line_3 $$ InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))[ FD ]
Line_4 $$ if (is == null) -->Line_8 $$ return NO_DEBUG_INFO_MAP[ CD ]
Line_11 $$ ClassReader classReader = new ClassReader(is)-->Line_13 $$ classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0)[ FD ]
Line_2 $$ private Map<Member, String[]> inspectClass(Class<?> clazz) -->Line_4 $$ if (is == null) [ CD ]
Line_2 $$ private Map<Member, String[]> inspectClass(Class<?> clazz) -->Line_3 $$ InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))[ CD ]
Line_3 $$ InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz))-->Line_25 $$ is.close()[ FD ]
Line_20 $$ if (logger.isDebugEnabled()) -->Line_21 $$ logger.debug("ASM ClassReader failed to parse class file [" + clazz + "], probably due to a new Java class file version that isn't supported yet " + "- unable to determine constructor/method parameter names", ex)[ CD ]
Line_4 $$ if (is == null) -->Line_5 $$ if (logger.isDebugEnabled()) [ CD ]
Line_5 $$ if (logger.isDebugEnabled()) -->Line_6 $$ logger.debug("Cannot find '.class' file for class [" + clazz + "] - unable to determine constructor/method parameter names")[ CD ]
Line_16 $$ if (logger.isDebugEnabled()) -->Line_17 $$ logger.debug("Exception thrown while reading '.class' file for class [" + clazz + "] - unable to determine constructor/method parameter names", ex)[ CD ]
