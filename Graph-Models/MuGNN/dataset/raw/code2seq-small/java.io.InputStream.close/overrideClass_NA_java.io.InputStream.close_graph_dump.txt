Line_2 $$ public void overrideClass(final Class<?> originalClass) throws IOException -->Line_3 $$ String originalPath = "/" + originalClass.getName().replaceAll("\\.", "/") + ".class"[ FD ]
Line_4 $$ InputStream inputStream = originalClass.getResourceAsStream(originalPath)-->Line_5 $$ Assert.assertNotNull(inputStream)[ FD ]
Line_2 $$ public void overrideClass(final Class<?> originalClass) throws IOException -->Line_3 $$ String originalPath = "/" + originalClass.getName().replaceAll("\\.", "/") + ".class"[ CD ]
Line_2 $$ public void overrideClass(final Class<?> originalClass) throws IOException -->Line_5 $$ Assert.assertNotNull(inputStream)[ CD ]
Line_2 $$ public void overrideClass(final Class<?> originalClass) throws IOException -->Line_4 $$ InputStream inputStream = originalClass.getResourceAsStream(originalPath)[ CD ]
Line_2 $$ public void overrideClass(final Class<?> originalClass) throws IOException -->Line_4 $$ InputStream inputStream = originalClass.getResourceAsStream(originalPath)[ FD ]
Line_4 $$ InputStream inputStream = originalClass.getResourceAsStream(originalPath)-->Line_7 $$ byte[] data = toByteArray(inputStream)[ FD ]
Line_4 $$ InputStream inputStream = originalClass.getResourceAsStream(originalPath)-->Line_10 $$ inputStream.close()[ FD ]
Line_3 $$ String originalPath = "/" + originalClass.getName().replaceAll("\\.", "/") + ".class"-->Line_4 $$ InputStream inputStream = originalClass.getResourceAsStream(originalPath)[ FD ]
Line_7 $$ byte[] data = toByteArray(inputStream)-->Line_8 $$ defineClass(originalClass.getName(), data, 0, data.length)[ FD ]
Line_2 $$ public void overrideClass(final Class<?> originalClass) throws IOException -->Line_8 $$ defineClass(originalClass.getName(), data, 0, data.length)[ FD ]
