Line_3 $$ String key = pathToKey(path)-->Line_4 $$ InputStream in = get(key, true)[ FD ]
Line_5 $$ if (in == null) -->Line_6 $$ if (isRoot(key)) [ CD ]
Line_2 $$ public boolean inodeExists(Path path) throws IOException -->Line_5 $$ if (in == null) [ CD ]
Line_4 $$ InputStream in = get(key, true)-->Line_5 $$ if (in == null) [ FD ]
Line_2 $$ public boolean inodeExists(Path path) throws IOException -->Line_4 $$ InputStream in = get(key, true)[ CD ]
Line_6 $$ if (isRoot(key)) -->Line_8 $$ return true[ CD ]
Line_6 $$ if (isRoot(key)) -->Line_7 $$ storeINode(path, INode.DIRECTORY_INODE)[ CD ]
Line_2 $$ public boolean inodeExists(Path path) throws IOException -->Line_3 $$ String key = pathToKey(path)[ CD ]
Line_3 $$ String key = pathToKey(path)-->Line_6 $$ if (isRoot(key)) [ FD ]
Line_6 $$ if (isRoot(key)) -->Line_10 $$ return false[ CD ]
Line_4 $$ InputStream in = get(key, true)-->Line_13 $$ in.close()[ FD ]
Line_2 $$ public boolean inodeExists(Path path) throws IOException -->Line_14 $$ return true[ CD ]
Line_2 $$ public boolean inodeExists(Path path) throws IOException -->Line_7 $$ storeINode(path, INode.DIRECTORY_INODE)[ FD ]
Line_2 $$ public boolean inodeExists(Path path) throws IOException -->Line_3 $$ String key = pathToKey(path)[ FD ]
Line_2 $$ public boolean inodeExists(Path path) throws IOException -->Line_13 $$ in.close()[ CD ]
