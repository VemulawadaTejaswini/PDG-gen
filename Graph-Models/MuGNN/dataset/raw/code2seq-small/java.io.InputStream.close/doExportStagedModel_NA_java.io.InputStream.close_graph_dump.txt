Line_20 $$ InputStream is = null-->Line_34 $$ portletDataContext.addZipEntry(binPath, is)[ FD ]
Line_20 $$ InputStream is = null-->Line_22 $$ is = FileEntryUtil.getContentStream(fileEntry)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_44 $$ if (portletDataContext.getBooleanParameter(_DL_PORTLET_DATA_HANDLER_NAMESPACE, "previews-and-thumbnails")) [ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_8 $$ portletDataContext.addClassedModel(fileEntryElement, fileEntryPath, fileEntry)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_47 $$ exportMetaData(portletDataContext, fileEntryElement, fileEntry)[ CD ]
Line_17 $$ LiferayFileEntry liferayFileEntry = (LiferayFileEntry) fileEntry-->Line_18 $$ liferayFileEntry.setCachedFileVersion(fileEntry.getFileVersion())[ FD ]
Line_5 $$ if (!fileEntry.isDefaultRepository()) -->Line_9 $$ long portletRepositoryClassNameId = PortalUtil.getClassNameId(PortletRepository.class.getName())[ CD ]
Line_3 $$ Element fileEntryElement = portletDataContext.getExportDataElement(fileEntry)-->Line_47 $$ exportMetaData(portletDataContext, fileEntryElement, fileEntry)[ FD ]
Line_24 $$ if (_log.isWarnEnabled()) -->Line_25 $$ _log.warn("Unable to retrieve content for file entry " + fileEntry.getFileEntryId(), e)[ CD ]
Line_33 $$ String binPath = ExportImportPathUtil.getModelPath(fileEntry, fileEntry.getVersion())-->Line_35 $$ fileEntryElement.addAttribute("bin-path", binPath)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_5 $$ if (!fileEntry.isDefaultRepository()) [ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_4 $$ String fileEntryPath = ExportImportPathUtil.getModelPath(fileEntry)[ CD ]
Line_5 $$ if (!fileEntry.isDefaultRepository()) -->Line_7 $$ StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext, fileEntry, repository, PortletDataContext.REFERENCE_TYPE_STRONG)[ CD ]
Line_20 $$ InputStream is = null-->Line_38 $$ is.close()[ FD ]
Line_6 $$ Repository repository = _repositoryLocalService.getRepository(fileEntry.getRepositoryId())-->Line_10 $$ if (repository.getClassNameId() != portletRepositoryClassNameId) [ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_47 $$ exportMetaData(portletDataContext, fileEntryElement, fileEntry)[ FD ]
Line_4 $$ String fileEntryPath = ExportImportPathUtil.getModelPath(fileEntry)-->Line_48 $$ portletDataContext.addClassedModel(fileEntryElement, fileEntryPath, liferayFileEntry, DLFileEntry.class)[ FD ]
Line_22 $$ is = FileEntryUtil.getContentStream(fileEntry)-->Line_28 $$ if (is == null) [ FD ]
Line_20 $$ InputStream is = null-->Line_28 $$ if (is == null) [ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_3 $$ Element fileEntryElement = portletDataContext.getExportDataElement(fileEntry)[ CD ]
Line_28 $$ if (is == null) -->Line_30 $$ return[ CD ]
Line_3 $$ Element fileEntryElement = portletDataContext.getExportDataElement(fileEntry)-->Line_48 $$ portletDataContext.addClassedModel(fileEntryElement, fileEntryPath, liferayFileEntry, DLFileEntry.class)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_14 $$ if (fileEntry.getFolderId() != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) [ CD ]
Line_19 $$ if (!portletDataContext.isPerformDirectBinaryImport()) -->Line_20 $$ InputStream is = null[ CD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_18 $$ liferayFileEntry.setCachedFileVersion(fileEntry.getFileVersion())[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_18 $$ liferayFileEntry.setCachedFileVersion(fileEntry.getFileVersion())[ CD ]
Line_3 $$ Element fileEntryElement = portletDataContext.getExportDataElement(fileEntry)-->Line_8 $$ portletDataContext.addClassedModel(fileEntryElement, fileEntryPath, fileEntry)[ FD ]
Line_14 $$ if (fileEntry.getFolderId() != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) -->Line_15 $$ StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext, fileEntry, fileEntry.getFolder(), PortletDataContext.REFERENCE_TYPE_PARENT)[ CD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_48 $$ portletDataContext.addClassedModel(fileEntryElement, fileEntryPath, liferayFileEntry, DLFileEntry.class)[ CD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_14 $$ if (fileEntry.getFolderId() != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) [ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_34 $$ portletDataContext.addZipEntry(binPath, is)[ FD ]
Line_5 $$ if (!fileEntry.isDefaultRepository()) -->Line_10 $$ if (repository.getClassNameId() != portletRepositoryClassNameId) [ CD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_19 $$ if (!portletDataContext.isPerformDirectBinaryImport()) [ CD ]
Line_22 $$ is = FileEntryUtil.getContentStream(fileEntry)-->Line_34 $$ portletDataContext.addZipEntry(binPath, is)[ FD ]
Line_22 $$ is = FileEntryUtil.getContentStream(fileEntry)-->Line_38 $$ is.close()[ FD ]
Line_3 $$ Element fileEntryElement = portletDataContext.getExportDataElement(fileEntry)-->Line_45 $$ DLProcessorRegistryUtil.exportGeneratedFiles(portletDataContext, fileEntry, fileEntryElement)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_19 $$ if (!portletDataContext.isPerformDirectBinaryImport()) [ FD ]
Line_3 $$ Element fileEntryElement = portletDataContext.getExportDataElement(fileEntry)-->Line_29 $$ fileEntryElement.detach()[ FD ]
Line_19 $$ if (!portletDataContext.isPerformDirectBinaryImport()) -->Line_28 $$ if (is == null) [ CD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_44 $$ if (portletDataContext.getBooleanParameter(_DL_PORTLET_DATA_HANDLER_NAMESPACE, "previews-and-thumbnails")) [ CD ]
Line_3 $$ Element fileEntryElement = portletDataContext.getExportDataElement(fileEntry)-->Line_35 $$ fileEntryElement.addAttribute("bin-path", binPath)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_15 $$ StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext, fileEntry, fileEntry.getFolder(), PortletDataContext.REFERENCE_TYPE_PARENT)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_17 $$ LiferayFileEntry liferayFileEntry = (LiferayFileEntry) fileEntry[ CD ]
Line_17 $$ LiferayFileEntry liferayFileEntry = (LiferayFileEntry) fileEntry-->Line_48 $$ portletDataContext.addClassedModel(fileEntryElement, fileEntryPath, liferayFileEntry, DLFileEntry.class)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_4 $$ String fileEntryPath = ExportImportPathUtil.getModelPath(fileEntry)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_3 $$ Element fileEntryElement = portletDataContext.getExportDataElement(fileEntry)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_22 $$ is = FileEntryUtil.getContentStream(fileEntry)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_45 $$ DLProcessorRegistryUtil.exportGeneratedFiles(portletDataContext, fileEntry, fileEntryElement)[ FD ]
Line_10 $$ if (repository.getClassNameId() != portletRepositoryClassNameId) -->Line_11 $$ return[ CD ]
Line_6 $$ Repository repository = _repositoryLocalService.getRepository(fileEntry.getRepositoryId())-->Line_7 $$ StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext, fileEntry, repository, PortletDataContext.REFERENCE_TYPE_STRONG)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_33 $$ String binPath = ExportImportPathUtil.getModelPath(fileEntry, fileEntry.getVersion())[ FD ]
Line_44 $$ if (portletDataContext.getBooleanParameter(_DL_PORTLET_DATA_HANDLER_NAMESPACE, "previews-and-thumbnails")) -->Line_45 $$ DLProcessorRegistryUtil.exportGeneratedFiles(portletDataContext, fileEntry, fileEntryElement)[ CD ]
Line_28 $$ if (is == null) -->Line_29 $$ fileEntryElement.detach()[ CD ]
Line_9 $$ long portletRepositoryClassNameId = PortalUtil.getClassNameId(PortletRepository.class.getName())-->Line_10 $$ if (repository.getClassNameId() != portletRepositoryClassNameId) [ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_7 $$ StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext, fileEntry, repository, PortletDataContext.REFERENCE_TYPE_STRONG)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_6 $$ Repository repository = _repositoryLocalService.getRepository(fileEntry.getRepositoryId())[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_48 $$ portletDataContext.addClassedModel(fileEntryElement, fileEntryPath, liferayFileEntry, DLFileEntry.class)[ FD ]
Line_5 $$ if (!fileEntry.isDefaultRepository()) -->Line_6 $$ Repository repository = _repositoryLocalService.getRepository(fileEntry.getRepositoryId())[ CD ]
Line_5 $$ if (!fileEntry.isDefaultRepository()) -->Line_8 $$ portletDataContext.addClassedModel(fileEntryElement, fileEntryPath, fileEntry)[ CD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_25 $$ _log.warn("Unable to retrieve content for file entry " + fileEntry.getFileEntryId(), e)[ FD ]
Line_33 $$ String binPath = ExportImportPathUtil.getModelPath(fileEntry, fileEntry.getVersion())-->Line_34 $$ portletDataContext.addZipEntry(binPath, is)[ FD ]
Line_4 $$ String fileEntryPath = ExportImportPathUtil.getModelPath(fileEntry)-->Line_8 $$ portletDataContext.addClassedModel(fileEntryElement, fileEntryPath, fileEntry)[ FD ]
Line_2 $$ protected void doExportStagedModel(PortletDataContext portletDataContext, FileEntry fileEntry) throws Exception -->Line_5 $$ if (!fileEntry.isDefaultRepository()) [ CD ]
