Line_10 $$ int amountRead = inputStream.read(buffer)-->Line_14 $$ outputStream.write(buffer, 0, amountRead)[ FD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream) -->Line_3 $$ if (BinaryStream.class.isInstance(inputStream)) [ FD ]
Line_6 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream(BUFFER_SIZE)-->Line_25 $$ outputStream.close()[ FD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream) -->Line_6 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream(BUFFER_SIZE)[ CD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream) -->Line_20 $$ inputStream.close()[ FD ]
Line_3 $$ if (BinaryStream.class.isInstance(inputStream)) -->Line_4 $$ return ((BinaryStream) inputStream).getBytes()[ CD ]
Line_9 $$ while (true) -->Line_10 $$ int amountRead = inputStream.read(buffer)[ CD ]
Line_10 $$ int amountRead = inputStream.read(buffer)-->Line_11 $$ if (amountRead == -1) [ FD ]
Line_8 $$ byte[] buffer = new byte[BUFFER_SIZE]-->Line_10 $$ int amountRead = inputStream.read(buffer)[ FD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream) -->Line_3 $$ if (BinaryStream.class.isInstance(inputStream)) [ CD ]
Line_9 $$ while (true) -->Line_14 $$ outputStream.write(buffer, 0, amountRead)[ CD ]
Line_6 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream(BUFFER_SIZE)-->Line_14 $$ outputStream.write(buffer, 0, amountRead)[ FD ]
Line_6 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream(BUFFER_SIZE)-->Line_30 $$ return outputStream.toByteArray()[ FD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream) -->Line_10 $$ int amountRead = inputStream.read(buffer)[ FD ]
Line_9 $$ while (true) -->Line_11 $$ if (amountRead == -1) [ CD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream) -->Line_30 $$ return outputStream.toByteArray()[ CD ]
Line_8 $$ byte[] buffer = new byte[BUFFER_SIZE]-->Line_14 $$ outputStream.write(buffer, 0, amountRead)[ FD ]
