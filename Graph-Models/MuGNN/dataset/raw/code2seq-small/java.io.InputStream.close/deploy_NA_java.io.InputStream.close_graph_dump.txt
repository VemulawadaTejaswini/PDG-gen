Line_7 $$ WarMetaData warMetaData = deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY)-->Line_12 $$ warMetaData.setWebFragmentsMetaData(webFragments)[ FD ]
Line_16 $$ if (resourceRoot.getRoot().getName().toLowerCase(Locale.ENGLISH).endsWith(".jar")) -->Line_17 $$ VirtualFile webFragment = resourceRoot.getRoot().getChild(WEB_FRAGMENT_XML)[ CD ]
Line_17 $$ VirtualFile webFragment = resourceRoot.getRoot().getChild(WEB_FRAGMENT_XML)-->Line_27 $$ throw new DeploymentUnitProcessingException(UndertowLogger.ROOT_LOGGER.failToParseXMLDescriptor(webFragment.toString(), e.getLocation().getLineNumber(), e.getLocation().getColumnNumber()))[ FD ]
Line_24 $$ XMLStreamReader xmlReader = inputFactory.createXMLStreamReader(is)-->Line_25 $$ webFragments.put(resourceRoot.getRootName(), WebFragmentMetaDataParser.parse(xmlReader, SpecDescriptorPropertyReplacement.propertyReplacer(deploymentUnit)))[ FD ]
Line_9 $$ Map<String, WebFragmentMetaData> webFragments = warMetaData.getWebFragmentsMetaData()-->Line_10 $$ if (webFragments == null) [ FD ]
Line_21 $$ is = webFragment.openStream()-->Line_32 $$ if (is != null) [ FD ]
Line_18 $$ if (webFragment.exists() && webFragment.isFile()) -->Line_19 $$ InputStream is = null[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_4 $$ if (!DeploymentTypeMarker.isType(DeploymentType.WAR, deploymentUnit)) [ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_10 $$ if (webFragments == null) [ CD ]
Line_17 $$ VirtualFile webFragment = resourceRoot.getRoot().getChild(WEB_FRAGMENT_XML)-->Line_29 $$ throw new DeploymentUnitProcessingException(UndertowLogger.ROOT_LOGGER.failToParseXMLDescriptor(webFragment.toString()), e)[ FD ]
Line_4 $$ if (!DeploymentTypeMarker.isType(DeploymentType.WAR, deploymentUnit)) -->Line_5 $$ return[ CD ]
Line_15 $$ for (ResourceRoot resourceRoot : resourceRoots) -->Line_25 $$ webFragments.put(resourceRoot.getRootName(), WebFragmentMetaDataParser.parse(xmlReader, SpecDescriptorPropertyReplacement.propertyReplacer(deploymentUnit)))[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ CD ]
Line_9 $$ Map<String, WebFragmentMetaData> webFragments = warMetaData.getWebFragmentsMetaData()-->Line_11 $$ webFragments = new HashMap<String, WebFragmentMetaData>()[ FD ]
Line_9 $$ Map<String, WebFragmentMetaData> webFragments = warMetaData.getWebFragmentsMetaData()-->Line_25 $$ webFragments.put(resourceRoot.getRootName(), WebFragmentMetaDataParser.parse(xmlReader, SpecDescriptorPropertyReplacement.propertyReplacer(deploymentUnit)))[ FD ]
Line_22 $$ final XMLInputFactory inputFactory = XMLInputFactory.newInstance()-->Line_24 $$ XMLStreamReader xmlReader = inputFactory.createXMLStreamReader(is)[ FD ]
Line_19 $$ InputStream is = null-->Line_21 $$ is = webFragment.openStream()[ FD ]
Line_17 $$ VirtualFile webFragment = resourceRoot.getRoot().getChild(WEB_FRAGMENT_XML)-->Line_21 $$ is = webFragment.openStream()[ FD ]
Line_11 $$ webFragments = new HashMap<String, WebFragmentMetaData>()-->Line_25 $$ webFragments.put(resourceRoot.getRootName(), WebFragmentMetaDataParser.parse(xmlReader, SpecDescriptorPropertyReplacement.propertyReplacer(deploymentUnit)))[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_14 $$ List<ResourceRoot> resourceRoots = deploymentUnit.getAttachmentList(Attachments.RESOURCE_ROOTS)[ CD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ FD ]
Line_21 $$ is = webFragment.openStream()-->Line_33 $$ is.close()[ FD ]
Line_19 $$ InputStream is = null-->Line_24 $$ XMLStreamReader xmlReader = inputFactory.createXMLStreamReader(is)[ FD ]
Line_15 $$ for (ResourceRoot resourceRoot : resourceRoots) -->Line_16 $$ if (resourceRoot.getRoot().getName().toLowerCase(Locale.ENGLISH).endsWith(".jar")) [ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_7 $$ WarMetaData warMetaData = deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY)[ CD ]
Line_15 $$ for (ResourceRoot resourceRoot : resourceRoots) -->Line_17 $$ VirtualFile webFragment = resourceRoot.getRoot().getChild(WEB_FRAGMENT_XML)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_14 $$ List<ResourceRoot> resourceRoots = deploymentUnit.getAttachmentList(Attachments.RESOURCE_ROOTS)[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_9 $$ Map<String, WebFragmentMetaData> webFragments = warMetaData.getWebFragmentsMetaData()[ CD ]
Line_22 $$ final XMLInputFactory inputFactory = XMLInputFactory.newInstance()-->Line_23 $$ inputFactory.setXMLResolver(NoopXMLResolver.create())[ FD ]
Line_19 $$ InputStream is = null-->Line_33 $$ is.close()[ FD ]
Line_11 $$ webFragments = new HashMap<String, WebFragmentMetaData>()-->Line_12 $$ warMetaData.setWebFragmentsMetaData(webFragments)[ FD ]
Line_10 $$ if (webFragments == null) -->Line_12 $$ warMetaData.setWebFragmentsMetaData(webFragments)[ CD ]
Line_7 $$ WarMetaData warMetaData = deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY)-->Line_9 $$ Map<String, WebFragmentMetaData> webFragments = warMetaData.getWebFragmentsMetaData()[ FD ]
Line_10 $$ if (webFragments == null) -->Line_11 $$ webFragments = new HashMap<String, WebFragmentMetaData>()[ CD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_4 $$ if (!DeploymentTypeMarker.isType(DeploymentType.WAR, deploymentUnit)) [ CD ]
Line_16 $$ if (resourceRoot.getRoot().getName().toLowerCase(Locale.ENGLISH).endsWith(".jar")) -->Line_18 $$ if (webFragment.exists() && webFragment.isFile()) [ CD ]
Line_17 $$ VirtualFile webFragment = resourceRoot.getRoot().getChild(WEB_FRAGMENT_XML)-->Line_18 $$ if (webFragment.exists() && webFragment.isFile()) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_7 $$ WarMetaData warMetaData = deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY)[ FD ]
Line_9 $$ Map<String, WebFragmentMetaData> webFragments = warMetaData.getWebFragmentsMetaData()-->Line_12 $$ warMetaData.setWebFragmentsMetaData(webFragments)[ FD ]
Line_19 $$ InputStream is = null-->Line_32 $$ if (is != null) [ FD ]
Line_32 $$ if (is != null) -->Line_33 $$ is.close()[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_25 $$ webFragments.put(resourceRoot.getRootName(), WebFragmentMetaDataParser.parse(xmlReader, SpecDescriptorPropertyReplacement.propertyReplacer(deploymentUnit)))[ FD ]
Line_21 $$ is = webFragment.openStream()-->Line_24 $$ XMLStreamReader xmlReader = inputFactory.createXMLStreamReader(is)[ FD ]
