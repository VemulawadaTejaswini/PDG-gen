Line_15 $$ Path file1 = new Path("test_data.dat")-->Line_18 $$ FSDataOutputStream stm = fs.create(file1, true, bufferSize, replicationFactor, blockSize)[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_10 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_RETRY_WINDOW_BASE, timeWin)[ CD ]
Line_43 $$ for (int i = 0; i < threads; ++i) -->Line_44 $$ readers[i].join()[ CD ]
Line_12 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(replicationFactor).build()-->Line_60 $$ cluster.shutdown()[ FD ]
Line_3 $$ boolean ret = true-->Line_53 $$ ret = false[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_10 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_RETRY_WINDOW_BASE, timeWin)[ FD ]
Line_14 $$ FileSystem fs = cluster.getFileSystem()-->Line_25 $$ long len = fs.getFileStatus(file1).getLen()[ FD ]
Line_14 $$ FileSystem fs = cluster.getFileSystem()-->Line_59 $$ fs.delete(file1, false)[ FD ]
Line_14 $$ FileSystem fs = cluster.getFileSystem()-->Line_28 $$ InputStream in = fs.open(file1, fileLen)[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_4 $$ short replicationFactor = 1[ CD ]
Line_27 $$ byte[] read_buf = new byte[fileLen]-->Line_32 $$ read_buf = null[ FD ]
Line_38 $$ for (int i = 0; i < threads; ++i) -->Line_39 $$ DFSClientReader reader = new DFSClientReader(file1, cluster, hash_sha, fileLen, counter)[ CD ]
Line_47 $$ ret = true-->Line_53 $$ ret = false[ FD ]
Line_49 $$ ret = false-->Line_56 $$ ret = false[ FD ]
Line_16 $$ file1 = file1.makeQualified(fs.getUri(), fs.getWorkingDirectory())-->Line_18 $$ FSDataOutputStream stm = fs.create(file1, true, bufferSize, replicationFactor, blockSize)[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_16 $$ file1 = file1.makeQualified(fs.getUri(), fs.getWorkingDirectory())[ CD ]
Line_5 $$ long blockSize = 128 * 1024 * 1024-->Line_18 $$ FSDataOutputStream stm = fs.create(file1, true, bufferSize, replicationFactor, blockSize)[ FD ]
Line_18 $$ FSDataOutputStream stm = fs.create(file1, true, bufferSize, replicationFactor, blockSize)-->Line_24 $$ stm.close()[ FD ]
Line_14 $$ FileSystem fs = cluster.getFileSystem()-->Line_19 $$ assertTrue(file1 + " should be a file", fs.getFileStatus(file1).isFile())[ FD ]
Line_53 $$ ret = false-->Line_56 $$ ret = false[ FD ]
Line_16 $$ file1 = file1.makeQualified(fs.getUri(), fs.getWorkingDirectory())-->Line_25 $$ long len = fs.getFileStatus(file1).getLen()[ FD ]
Line_47 $$ ret = true-->Line_56 $$ ret = false[ FD ]
Line_28 $$ InputStream in = fs.open(file1, fileLen)-->Line_29 $$ IOUtils.readFully(in, read_buf, 0, fileLen)[ FD ]
Line_33 $$ MessageDigest m = MessageDigest.getInstance("SHA")-->Line_35 $$ byte[] hash_sha = m.digest()[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_28 $$ InputStream in = fs.open(file1, fileLen)[ FD ]
Line_14 $$ FileSystem fs = cluster.getFileSystem()-->Line_16 $$ file1 = file1.makeQualified(fs.getUri(), fs.getWorkingDirectory())[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_38 $$ for (int i = 0; i < threads; ++i) [ FD ]
Line_16 $$ file1 = file1.makeQualified(fs.getUri(), fs.getWorkingDirectory())-->Line_28 $$ InputStream in = fs.open(file1, fileLen)[ FD ]
Line_33 $$ MessageDigest m = MessageDigest.getInstance("SHA")-->Line_34 $$ m.update(buffer, 0, fileLen)[ FD ]
Line_22 $$ byte[] buffer = AppendTestUtil.randomBytes(Time.now(), fileLen)-->Line_34 $$ m.update(buffer, 0, fileLen)[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_8 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_MAX_RECEIVER_THREADS_KEY, xcievers)[ FD ]
Line_38 $$ for (int i = 0; i < threads; ++i) -->Line_41 $$ readers[i].start()[ CD ]
Line_3 $$ boolean ret = true-->Line_49 $$ ret = false[ FD ]
Line_12 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(replicationFactor).build()-->Line_13 $$ cluster.waitActive()[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_11 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_KEY, 0)[ CD ]
Line_46 $$ if (counter.get() == threads)-->Line_47 $$ ret = true[ CD ]
Line_15 $$ Path file1 = new Path("test_data.dat")-->Line_59 $$ fs.delete(file1, false)[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_46 $$ if (counter.get() == threads)[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_62 $$ return ret[ CD ]
Line_7 $$ int originalXcievers = conf.getInt(DFSConfigKeys.DFS_DATANODE_MAX_RECEIVER_THREADS_KEY, DFSConfigKeys.DFS_DATANODE_MAX_RECEIVER_THREADS_DEFAULT)-->Line_58 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_MAX_RECEIVER_THREADS_KEY, originalXcievers)[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_9 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_KEY, retries)[ CD ]
Line_38 $$ for (int i = 0; i < threads; ++i) -->Line_40 $$ readers[i] = new Thread(reader)[ CD ]
Line_12 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(replicationFactor).build()-->Line_14 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_27 $$ byte[] read_buf = new byte[fileLen]-->Line_29 $$ IOUtils.readFully(in, read_buf, 0, fileLen)[ FD ]
Line_38 $$ for (int i = 0; i < threads; ++i) -->Line_43 $$ for (int i = 0; i < threads; ++i) [ FD ]
Line_18 $$ FSDataOutputStream stm = fs.create(file1, true, bufferSize, replicationFactor, blockSize)-->Line_23 $$ stm.write(buffer, 0, fileLen)[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_6 $$ int bufferSize = 4096[ CD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_43 $$ for (int i = 0; i < threads; ++i) [ FD ]
Line_27 $$ byte[] read_buf = new byte[fileLen]-->Line_30 $$ assert (Arrays.equals(buffer, read_buf))[ FD ]
Line_37 $$ Counter counter = new Counter(0)-->Line_46 $$ if (counter.get() == threads)[ FD ]
Line_16 $$ file1 = file1.makeQualified(fs.getUri(), fs.getWorkingDirectory())-->Line_59 $$ fs.delete(file1, false)[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_7 $$ int originalXcievers = conf.getInt(DFSConfigKeys.DFS_DATANODE_MAX_RECEIVER_THREADS_KEY, DFSConfigKeys.DFS_DATANODE_MAX_RECEIVER_THREADS_DEFAULT)[ CD ]
Line_4 $$ short replicationFactor = 1-->Line_18 $$ FSDataOutputStream stm = fs.create(file1, true, bufferSize, replicationFactor, blockSize)[ FD ]
Line_15 $$ Path file1 = new Path("test_data.dat")-->Line_28 $$ InputStream in = fs.open(file1, fileLen)[ FD ]
Line_16 $$ file1 = file1.makeQualified(fs.getUri(), fs.getWorkingDirectory())-->Line_19 $$ assertTrue(file1 + " should be a file", fs.getFileStatus(file1).isFile())[ FD ]
Line_14 $$ FileSystem fs = cluster.getFileSystem()-->Line_18 $$ FSDataOutputStream stm = fs.create(file1, true, bufferSize, replicationFactor, blockSize)[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_12 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(replicationFactor).build()[ CD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_15 $$ Path file1 = new Path("test_data.dat")[ CD ]
Line_22 $$ byte[] buffer = AppendTestUtil.randomBytes(Time.now(), fileLen)-->Line_23 $$ stm.write(buffer, 0, fileLen)[ FD ]
Line_4 $$ short replicationFactor = 1-->Line_12 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(replicationFactor).build()[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_14 $$ FileSystem fs = cluster.getFileSystem()[ CD ]
Line_49 $$ ret = false-->Line_53 $$ ret = false[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_22 $$ byte[] buffer = AppendTestUtil.randomBytes(Time.now(), fileLen)[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_5 $$ long blockSize = 128 * 1024 * 1024[ CD ]
Line_47 $$ ret = true-->Line_49 $$ ret = false[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_13 $$ cluster.waitActive()[ CD ]
Line_3 $$ boolean ret = true-->Line_47 $$ ret = true[ FD ]
Line_46 $$ if (counter.get() == threads)-->Line_49 $$ ret = false[ CD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_3 $$ boolean ret = true[ CD ]
Line_28 $$ InputStream in = fs.open(file1, fileLen)-->Line_31 $$ in.close()[ FD ]
Line_15 $$ Path file1 = new Path("test_data.dat")-->Line_19 $$ assertTrue(file1 + " should be a file", fs.getFileStatus(file1).isFile())[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_23 $$ stm.write(buffer, 0, fileLen)[ FD ]
Line_15 $$ Path file1 = new Path("test_data.dat")-->Line_25 $$ long len = fs.getFileStatus(file1).getLen()[ FD ]
Line_15 $$ Path file1 = new Path("test_data.dat")-->Line_16 $$ file1 = file1.makeQualified(fs.getUri(), fs.getWorkingDirectory())[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_8 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_MAX_RECEIVER_THREADS_KEY, xcievers)[ CD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_34 $$ m.update(buffer, 0, fileLen)[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_9 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_KEY, retries)[ FD ]
Line_6 $$ int bufferSize = 4096-->Line_18 $$ FSDataOutputStream stm = fs.create(file1, true, bufferSize, replicationFactor, blockSize)[ FD ]
Line_22 $$ byte[] buffer = AppendTestUtil.randomBytes(Time.now(), fileLen)-->Line_30 $$ assert (Arrays.equals(buffer, read_buf))[ FD ]
Line_3 $$ boolean ret = true-->Line_56 $$ ret = false[ FD ]
Line_2 $$ private boolean busyTest(int xcievers, int threads, int fileLen, int timeWin, int retries) throws IOException -->Line_29 $$ IOUtils.readFully(in, read_buf, 0, fileLen)[ FD ]
