Line_79 $$ ServiceController<ResourceAdapterDeployment> controller = Services.addServerExecutorDependency(serviceTarget.addService(ConnectorServices.RESOURCE_ADAPTER_ACTIVATOR_SERVICE.append(name), activator), activator.getExecutorServiceInjector(), false).addDependency(ActiveMQActivationService.getServiceName(getActiveMQServiceName(serverName))).addDependency(ConnectorServices.IRONJACAMAR_MDR, AS7MetadataRepository.class, activator.getMdrInjector()).addDependency(ConnectorServices.RA_REPOSITORY_SERVICE, ResourceAdapterRepository.class, activator.getRaRepositoryInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSITORY_SERVICE, ManagementRepository.class, activator.getManagementRepositoryInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE, ResourceAdapterDeploymentRegistry.class, activator.getRegistryInjector()).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE, TransactionIntegration.class, activator.getTxIntegrationInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE, JcaSubsystemConfiguration.class, activator.getConfigInjector()).addDependency(SubjectFactoryService.SERVICE_NAME, SubjectFactory.class, activator.getSubjectFactoryInjector()).addDependency(ConnectorServices.CCM_SERVICE, CachedConnectionManager.class, activator.getCcmInjector()).addDependency(NamingService.SERVICE_NAME).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER).addDependency(ConnectorServices.BOOTSTRAP_CONTEXT_SERVICE.append("default")).setInitialMode(ServiceController.Mode.PASSIVE).install()-->Line_80 $$ createJNDIAliases(bindInfo, jndiAliases, controller)[ FD ]
Line_8 $$ StringBuilder connectorParams = new StringBuilder()-->Line_33 $$ connectorParams.append(entry.getKey()).append("=").append(entry.getValue())[ FD ]
Line_40 $$ if (connectorParams.length() > 0) -->Line_41 $$ properties.add(simpleProperty15(CONNECTION_PARAMETERS, STRING_TYPE, connectorParams.toString()))[ CD ]
Line_8 $$ StringBuilder connectorParams = new StringBuilder()-->Line_41 $$ properties.add(simpleProperty15(CONNECTION_PARAMETERS, STRING_TYPE, connectorParams.toString()))[ FD ]
Line_2 $$ private void createService(ServiceTarget serviceTarget, ServiceContainer container) throws Exception -->Line_79 $$ ServiceController<ResourceAdapterDeployment> controller = Services.addServerExecutorDependency(serviceTarget.addService(ConnectorServices.RESOURCE_ADAPTER_ACTIVATOR_SERVICE.append(name), activator), activator.getExecutorServiceInjector(), false).addDependency(ActiveMQActivationService.getServiceName(getActiveMQServiceName(serverName))).addDependency(ConnectorServices.IRONJACAMAR_MDR, AS7MetadataRepository.class, activator.getMdrInjector()).addDependency(ConnectorServices.RA_REPOSITORY_SERVICE, ResourceAdapterRepository.class, activator.getRaRepositoryInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSITORY_SERVICE, ManagementRepository.class, activator.getManagementRepositoryInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE, ResourceAdapterDeploymentRegistry.class, activator.getRegistryInjector()).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE, TransactionIntegration.class, activator.getTxIntegrationInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE, JcaSubsystemConfiguration.class, activator.getConfigInjector()).addDependency(SubjectFactoryService.SERVICE_NAME, SubjectFactory.class, activator.getSubjectFactoryInjector()).addDependency(ConnectorServices.CCM_SERVICE, CachedConnectionManager.class, activator.getCcmInjector()).addDependency(NamingService.SERVICE_NAME).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER).addDependency(ConnectorServices.BOOTSTRAP_CONTEXT_SERVICE.append("default")).setInitialMode(ServiceController.Mode.PASSIVE).install()[ FD ]
Line_61 $$ for (PooledConnectionFactoryConfigProperties adapterParam : adapterParams) -->Line_62 $$ hasReconnect |= reconnectName.equals(adapterParam.getName())[ FD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_66 $$ properties.add(simpleProperty15(reconnectName, Integer.class.getName(), DEFAULT_MAX_RECONNECTS))[ FD ]
Line_11 $$ if (connectorNames.size() > 0) -->Line_14 $$ connectors.add(connectorName)[ CD ]
Line_7 $$ StringBuilder connectorClassname = new StringBuilder()-->Line_23 $$ connectorClassname.append(",")[ FD ]
Line_46 $$ if (bgCfg instanceof UDPBroadcastEndpointFactory) -->Line_48 $$ properties.add(simpleProperty15(GROUP_ADDRESS, STRING_TYPE, udpCfg.getGroupAddress()))[ CD ]
Line_69 $$ OutboundResourceAdapter outbound = createOutbound()-->Line_71 $$ ResourceAdapter ra = createResourceAdapter15(properties, outbound, inbound)[ FD ]
Line_70 $$ InboundResourceAdapter inbound = createInbound()-->Line_71 $$ ResourceAdapter ra = createResourceAdapter15(properties, outbound, inbound)[ FD ]
Line_17 $$ for (String connector : connectors) -->Line_20 $$ throw MessagingLogger.ROOT_LOGGER.connectorNotDefined(connector)[ FD ]
Line_10 $$ Set<String> connectorNames = activeMQServer.getValue().getConfiguration().getConnectorConfigurations().keySet()-->Line_12 $$ String connectorName = connectorNames.iterator().next()[ FD ]
Line_45 $$ BroadcastEndpointFactory bgCfg = discoveryGroupConfiguration.getBroadcastEndpointFactory()-->Line_51 $$ if (bgCfg instanceof ChannelBroadcastEndpointFactory) [ FD ]
Line_61 $$ for (PooledConnectionFactoryConfigProperties adapterParam : adapterParams) -->Line_63 $$ properties.add(simpleProperty15(adapterParam.getName(), adapterParam.getType(), adapterParam.getValue()))[ FD ]
Line_4 $$ InputStream isIj = null-->Line_85 $$ if (isIj != null)[ FD ]
Line_2 $$ private void createService(ServiceTarget serviceTarget, ServiceContainer container) throws Exception -->Line_81 $$ serviceTarget.addService(ConnectorServices.RESOURCE_ADAPTER_DEPLOYER_SERVICE_PREFIX.append(name), Service.NULL).install()[ FD ]
Line_43 $$ if (discoveryGroupName != null) -->Line_56 $$ properties.add(simpleProperty15(DISCOVERY_INITIAL_WAIT_TIMEOUT, LONG_TYPE, "" + discoveryGroupConfiguration.getDiscoveryInitialWaitTimeout()))[ CD ]
Line_44 $$ DiscoveryGroupConfiguration discoveryGroupConfiguration = activeMQServer.getValue().getConfiguration().getDiscoveryGroupConfigurations().get(discoveryGroupName)-->Line_45 $$ BroadcastEndpointFactory bgCfg = discoveryGroupConfiguration.getBroadcastEndpointFactory()[ FD ]
Line_22 $$ if (connectorClassname.length() > 0) -->Line_23 $$ connectorClassname.append(",")[ CD ]
Line_43 $$ if (discoveryGroupName != null) -->Line_44 $$ DiscoveryGroupConfiguration discoveryGroupConfiguration = activeMQServer.getValue().getConfiguration().getDiscoveryGroupConfigurations().get(discoveryGroupName)[ CD ]
Line_43 $$ if (discoveryGroupName != null) -->Line_46 $$ if (bgCfg instanceof UDPBroadcastEndpointFactory) [ CD ]
Line_47 $$ UDPBroadcastEndpointFactory udpCfg = (UDPBroadcastEndpointFactory) bgCfg-->Line_50 $$ properties.add(simpleProperty15(DISCOVERY_LOCAL_BIND_ADDRESS, STRING_TYPE, "" + udpCfg.getLocalBindAddress()))[ FD ]
Line_43 $$ if (discoveryGroupName != null) -->Line_57 $$ properties.add(simpleProperty15(REFRESH_TIMEOUT, LONG_TYPE, "" + discoveryGroupConfiguration.getRefreshTimeout()))[ CD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_54 $$ properties.add(simpleProperty15(JGROUPS_CHANNEL_REF_NAME, STRING_TYPE, serverName + '/' + jgroupsChannelName))[ FD ]
Line_2 $$ private void createService(ServiceTarget serviceTarget, ServiceContainer container) throws Exception -->Line_4 $$ InputStream isIj = null[ CD ]
Line_45 $$ BroadcastEndpointFactory bgCfg = discoveryGroupConfiguration.getBroadcastEndpointFactory()-->Line_46 $$ if (bgCfg instanceof UDPBroadcastEndpointFactory) [ FD ]
Line_11 $$ if (connectorNames.size() > 0) -->Line_13 $$ MessagingLogger.ROOT_LOGGER.connectorForPooledConnectionFactory(name, connectorName)[ CD ]
Line_2 $$ private void createService(ServiceTarget serviceTarget, ServiceContainer container) throws Exception -->Line_68 $$ WildFlyRecoveryRegistry.container = container[ FD ]
Line_8 $$ StringBuilder connectorParams = new StringBuilder()-->Line_40 $$ if (connectorParams.length() > 0) [ FD ]
Line_47 $$ UDPBroadcastEndpointFactory udpCfg = (UDPBroadcastEndpointFactory) bgCfg-->Line_48 $$ properties.add(simpleProperty15(GROUP_ADDRESS, STRING_TYPE, udpCfg.getGroupAddress()))[ FD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_41 $$ properties.add(simpleProperty15(CONNECTION_PARAMETERS, STRING_TYPE, connectorParams.toString()))[ FD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_48 $$ properties.add(simpleProperty15(GROUP_ADDRESS, STRING_TYPE, udpCfg.getGroupAddress()))[ FD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_50 $$ properties.add(simpleProperty15(DISCOVERY_LOCAL_BIND_ADDRESS, STRING_TYPE, "" + udpCfg.getLocalBindAddress()))[ FD ]
Line_59 $$ boolean hasReconnect = false-->Line_62 $$ hasReconnect |= reconnectName.equals(adapterParam.getName())[ FD ]
Line_62 $$ hasReconnect |= reconnectName.equals(adapterParam.getName())-->Line_65 $$ if (!hasReconnect) [ FD ]
Line_65 $$ if (!hasReconnect) -->Line_66 $$ properties.add(simpleProperty15(reconnectName, Integer.class.getName(), DEFAULT_MAX_RECONNECTS))[ CD ]
Line_8 $$ StringBuilder connectorParams = new StringBuilder()-->Line_31 $$ connectorParams.append(";")[ FD ]
Line_47 $$ UDPBroadcastEndpointFactory udpCfg = (UDPBroadcastEndpointFactory) bgCfg-->Line_49 $$ properties.add(simpleProperty15(GROUP_PORT, INTEGER_TYPE, "" + udpCfg.getGroupPort()))[ FD ]
Line_30 $$ if (multiple) -->Line_31 $$ connectorParams.append(";")[ CD ]
Line_7 $$ StringBuilder connectorClassname = new StringBuilder()-->Line_37 $$ if (connectorClassname.length() > 0) [ FD ]
Line_73 $$ TransactionSupportEnum transactionSupport = getTransactionSupport(txSupport)-->Line_75 $$ Activation activation = createActivation(common, transactionSupport)[ FD ]
Line_46 $$ if (bgCfg instanceof UDPBroadcastEndpointFactory) -->Line_47 $$ UDPBroadcastEndpointFactory udpCfg = (UDPBroadcastEndpointFactory) bgCfg[ CD ]
Line_7 $$ StringBuilder connectorClassname = new StringBuilder()-->Line_38 $$ properties.add(simpleProperty15(CONNECTOR_CLASSNAME, STRING_TYPE, connectorClassname.toString()))[ FD ]
Line_9 $$ if (discoveryGroupName == null && connectors.isEmpty() && pickAnyConnectors) -->Line_10 $$ Set<String> connectorNames = activeMQServer.getValue().getConfiguration().getConnectorConfigurations().keySet()[ CD ]
Line_8 $$ StringBuilder connectorParams = new StringBuilder()-->Line_24 $$ connectorParams.append(",")[ FD ]
Line_3 $$ InputStream is = null-->Line_83 $$ if (is != null)[ FD ]
Line_29 $$ for (Map.Entry<String, Object> entry : params.entrySet()) -->Line_33 $$ connectorParams.append(entry.getKey()).append("=").append(entry.getValue())[ FD ]
Line_74 $$ ConnectionDefinition common = createConnDef(transactionSupport, bindInfo.getBindName(), minPoolSize, maxPoolSize, managedConnectionPoolClassName, enlistmentTrace)-->Line_75 $$ Activation activation = createActivation(common, transactionSupport)[ FD ]
Line_44 $$ DiscoveryGroupConfiguration discoveryGroupConfiguration = activeMQServer.getValue().getConfiguration().getDiscoveryGroupConfigurations().get(discoveryGroupName)-->Line_56 $$ properties.add(simpleProperty15(DISCOVERY_INITIAL_WAIT_TIMEOUT, LONG_TYPE, "" + discoveryGroupConfiguration.getDiscoveryInitialWaitTimeout()))[ FD ]
Line_3 $$ InputStream is = null-->Line_84 $$ is.close()[ FD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_38 $$ properties.add(simpleProperty15(CONNECTOR_CLASSNAME, STRING_TYPE, connectorClassname.toString()))[ FD ]
Line_51 $$ if (bgCfg instanceof ChannelBroadcastEndpointFactory) -->Line_54 $$ properties.add(simpleProperty15(JGROUPS_CHANNEL_REF_NAME, STRING_TYPE, serverName + '/' + jgroupsChannelName))[ CD ]
Line_7 $$ StringBuilder connectorClassname = new StringBuilder()-->Line_22 $$ if (connectorClassname.length() > 0) [ FD ]
Line_76 $$ ResourceAdapterActivatorService activator = new ResourceAdapterActivatorService(cmd, activation, PooledConnectionFactoryService.class.getClassLoader(), name)-->Line_77 $$ activator.setBindInfo(bindInfo)[ FD ]
Line_28 $$ boolean multiple = false-->Line_34 $$ multiple = true[ FD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_57 $$ properties.add(simpleProperty15(REFRESH_TIMEOUT, LONG_TYPE, "" + discoveryGroupConfiguration.getRefreshTimeout()))[ FD ]
Line_10 $$ Set<String> connectorNames = activeMQServer.getValue().getConfiguration().getConnectorConfigurations().keySet()-->Line_11 $$ if (connectorNames.size() > 0) [ FD ]
Line_22 $$ if (connectorClassname.length() > 0) -->Line_24 $$ connectorParams.append(",")[ CD ]
Line_73 $$ TransactionSupportEnum transactionSupport = getTransactionSupport(txSupport)-->Line_74 $$ ConnectionDefinition common = createConnDef(transactionSupport, bindInfo.getBindName(), minPoolSize, maxPoolSize, managedConnectionPoolClassName, enlistmentTrace)[ FD ]
Line_60 $$ final String reconnectName = ConnectionFactoryAttributes.Pooled.RECONNECT_ATTEMPTS_PROP_NAME-->Line_66 $$ properties.add(simpleProperty15(reconnectName, Integer.class.getName(), DEFAULT_MAX_RECONNECTS))[ FD ]
Line_18 $$ TransportConfiguration tc = activeMQServer.getValue().getConfiguration().getConnectorConfigurations().get(connector)-->Line_27 $$ Map<String, Object> params = tc.getParams()[ FD ]
Line_27 $$ Map<String, Object> params = tc.getParams()-->Line_29 $$ for (Map.Entry<String, Object> entry : params.entrySet()) [ FD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_71 $$ ResourceAdapter ra = createResourceAdapter15(properties, outbound, inbound)[ FD ]
Line_51 $$ if (bgCfg instanceof ChannelBroadcastEndpointFactory) -->Line_53 $$ properties.add(simpleProperty15(JGROUPS_CHANNEL_NAME, STRING_TYPE, jgroupsChannelName))[ CD ]
Line_7 $$ StringBuilder connectorClassname = new StringBuilder()-->Line_26 $$ connectorClassname.append(tc.getFactoryClassName())[ FD ]
Line_37 $$ if (connectorClassname.length() > 0) -->Line_38 $$ properties.add(simpleProperty15(CONNECTOR_CLASSNAME, STRING_TYPE, connectorClassname.toString()))[ CD ]
Line_46 $$ if (bgCfg instanceof UDPBroadcastEndpointFactory) -->Line_49 $$ properties.add(simpleProperty15(GROUP_PORT, INTEGER_TYPE, "" + udpCfg.getGroupPort()))[ CD ]
Line_51 $$ if (bgCfg instanceof ChannelBroadcastEndpointFactory) -->Line_52 $$ properties.add(simpleProperty15(JGROUPS_CHANNEL_LOCATOR_CLASS, STRING_TYPE, JGroupsChannelLocator.class.getName()))[ CD ]
Line_18 $$ TransportConfiguration tc = activeMQServer.getValue().getConfiguration().getConnectorConfigurations().get(connector)-->Line_26 $$ connectorClassname.append(tc.getFactoryClassName())[ FD ]
Line_9 $$ if (discoveryGroupName == null && connectors.isEmpty() && pickAnyConnectors) -->Line_11 $$ if (connectorNames.size() > 0) [ CD ]
Line_46 $$ if (bgCfg instanceof UDPBroadcastEndpointFactory) -->Line_51 $$ if (bgCfg instanceof ChannelBroadcastEndpointFactory) [ CD ]
Line_17 $$ for (String connector : connectors) -->Line_18 $$ TransportConfiguration tc = activeMQServer.getValue().getConfiguration().getConnectorConfigurations().get(connector)[ FD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_52 $$ properties.add(simpleProperty15(JGROUPS_CHANNEL_LOCATOR_CLASS, STRING_TYPE, JGroupsChannelLocator.class.getName()))[ FD ]
Line_12 $$ String connectorName = connectorNames.iterator().next()-->Line_13 $$ MessagingLogger.ROOT_LOGGER.connectorForPooledConnectionFactory(name, connectorName)[ FD ]
Line_44 $$ DiscoveryGroupConfiguration discoveryGroupConfiguration = activeMQServer.getValue().getConfiguration().getDiscoveryGroupConfigurations().get(discoveryGroupName)-->Line_57 $$ properties.add(simpleProperty15(REFRESH_TIMEOUT, LONG_TYPE, "" + discoveryGroupConfiguration.getRefreshTimeout()))[ FD ]
Line_76 $$ ResourceAdapterActivatorService activator = new ResourceAdapterActivatorService(cmd, activation, PooledConnectionFactoryService.class.getClassLoader(), name)-->Line_78 $$ activator.setCreateBinderService(createBinderService)[ FD ]
Line_85 $$ if (isIj != null)-->Line_86 $$ isIj.close()[ CD ]
Line_83 $$ if (is != null)-->Line_84 $$ is.close()[ CD ]
Line_18 $$ TransportConfiguration tc = activeMQServer.getValue().getConfiguration().getConnectorConfigurations().get(connector)-->Line_19 $$ if (tc == null) [ FD ]
Line_4 $$ InputStream isIj = null-->Line_86 $$ isIj.close()[ FD ]
Line_2 $$ private void createService(ServiceTarget serviceTarget, ServiceContainer container) throws Exception -->Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()[ CD ]
Line_60 $$ final String reconnectName = ConnectionFactoryAttributes.Pooled.RECONNECT_ATTEMPTS_PROP_NAME-->Line_62 $$ hasReconnect |= reconnectName.equals(adapterParam.getName())[ FD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_56 $$ properties.add(simpleProperty15(DISCOVERY_INITIAL_WAIT_TIMEOUT, LONG_TYPE, "" + discoveryGroupConfiguration.getDiscoveryInitialWaitTimeout()))[ FD ]
Line_71 $$ ResourceAdapter ra = createResourceAdapter15(properties, outbound, inbound)-->Line_72 $$ Connector cmd = createConnector15(ra)[ FD ]
Line_2 $$ private void createService(ServiceTarget serviceTarget, ServiceContainer container) throws Exception -->Line_3 $$ InputStream is = null[ CD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_49 $$ properties.add(simpleProperty15(GROUP_PORT, INTEGER_TYPE, "" + udpCfg.getGroupPort()))[ FD ]
Line_76 $$ ResourceAdapterActivatorService activator = new ResourceAdapterActivatorService(cmd, activation, PooledConnectionFactoryService.class.getClassLoader(), name)-->Line_79 $$ ServiceController<ResourceAdapterDeployment> controller = Services.addServerExecutorDependency(serviceTarget.addService(ConnectorServices.RESOURCE_ADAPTER_ACTIVATOR_SERVICE.append(name), activator), activator.getExecutorServiceInjector(), false).addDependency(ActiveMQActivationService.getServiceName(getActiveMQServiceName(serverName))).addDependency(ConnectorServices.IRONJACAMAR_MDR, AS7MetadataRepository.class, activator.getMdrInjector()).addDependency(ConnectorServices.RA_REPOSITORY_SERVICE, ResourceAdapterRepository.class, activator.getRaRepositoryInjector()).addDependency(ConnectorServices.MANAGEMENT_REPOSITORY_SERVICE, ManagementRepository.class, activator.getManagementRepositoryInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE, ResourceAdapterDeploymentRegistry.class, activator.getRegistryInjector()).addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE, TransactionIntegration.class, activator.getTxIntegrationInjector()).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE, JcaSubsystemConfiguration.class, activator.getConfigInjector()).addDependency(SubjectFactoryService.SERVICE_NAME, SubjectFactory.class, activator.getSubjectFactoryInjector()).addDependency(ConnectorServices.CCM_SERVICE, CachedConnectionManager.class, activator.getCcmInjector()).addDependency(NamingService.SERVICE_NAME).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER).addDependency(ConnectorServices.BOOTSTRAP_CONTEXT_SERVICE.append("default")).setInitialMode(ServiceController.Mode.PASSIVE).install()[ FD ]
Line_11 $$ if (connectorNames.size() > 0) -->Line_12 $$ String connectorName = connectorNames.iterator().next()[ CD ]
Line_59 $$ boolean hasReconnect = false-->Line_65 $$ if (!hasReconnect) [ FD ]
Line_43 $$ if (discoveryGroupName != null) -->Line_45 $$ BroadcastEndpointFactory bgCfg = discoveryGroupConfiguration.getBroadcastEndpointFactory()[ CD ]
Line_12 $$ String connectorName = connectorNames.iterator().next()-->Line_14 $$ connectors.add(connectorName)[ FD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_53 $$ properties.add(simpleProperty15(JGROUPS_CHANNEL_NAME, STRING_TYPE, jgroupsChannelName))[ FD ]
Line_5 $$ List<ConfigProperty> properties = new ArrayList<ConfigProperty>()-->Line_63 $$ properties.add(simpleProperty15(adapterParam.getName(), adapterParam.getType(), adapterParam.getValue()))[ FD ]
Line_46 $$ if (bgCfg instanceof UDPBroadcastEndpointFactory) -->Line_50 $$ properties.add(simpleProperty15(DISCOVERY_LOCAL_BIND_ADDRESS, STRING_TYPE, "" + udpCfg.getLocalBindAddress()))[ CD ]
