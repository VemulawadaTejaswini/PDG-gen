Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_9 $$ AssetFilter assetFilter = getAssetFilter(context)[ CD ]
Line_35 $$ InputStream is = context.getClass().getClassLoader().getResourceAsStream(classpathFile)-->Line_37 $$ dest.write(is, false)[ FD ]
Line_20 $$ FileWrapper target = new FileWrapper("assets/")-->Line_30 $$ copyDirectory(source, target, assetFilter, assets)[ FD ]
Line_10 $$ FileWrapper source = new FileWrapper(assetPath)-->Line_11 $$ if (!source.exists()) [ FD ]
Line_10 $$ FileWrapper source = new FileWrapper(assetPath)-->Line_12 $$ source = new FileWrapper("../" + assetPath)[ FD ]
Line_29 $$ ArrayList<Asset> assets = new ArrayList<Asset>()-->Line_30 $$ copyDirectory(source, target, assetFilter, assets)[ FD ]
Line_20 $$ FileWrapper target = new FileWrapper("assets/")-->Line_36 $$ FileWrapper dest = target.child(classpathFile)[ FD ]
Line_36 $$ FileWrapper dest = target.child(classpathFile)-->Line_37 $$ dest.write(is, false)[ FD ]
Line_32 $$ for (String classpathFile : classpathFiles) -->Line_35 $$ InputStream is = context.getClass().getClassLoader().getResourceAsStream(classpathFile)[ FD ]
Line_45 $$ HashMap<String, ArrayList<Asset>> bundles = new HashMap<String, ArrayList<Asset>>()-->Line_54 $$ bundles.put(bundleName, bundleAssets)[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_4 $$ String assetPath = getAssetPath(context)[ CD ]
Line_23 $$ target = new FileWrapper(assetOutputPath + "assets/")-->Line_36 $$ FileWrapper dest = target.child(classpathFile)[ FD ]
Line_47 $$ String bundleName = assetFilter.getBundleName(asset.file.path())-->Line_49 $$ bundleName = "assets"[ FD ]
Line_47 $$ String bundleName = assetFilter.getBundleName(asset.file.path())-->Line_51 $$ ArrayList<Asset> bundleAssets = bundles.get(bundleName)[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_5 $$ String assetOutputPath = getAssetOutputPath(context)[ FD ]
Line_59 $$ StringBuffer buffer = new StringBuffer()-->Line_66 $$ buffer.append(path)[ FD ]
Line_20 $$ FileWrapper target = new FileWrapper("assets/")-->Line_23 $$ target = new FileWrapper(assetOutputPath + "assets/")[ FD ]
Line_9 $$ AssetFilter assetFilter = getAssetFilter(context)-->Line_33 $$ if (assetFilter.accept(classpathFile, false)) [ FD ]
Line_12 $$ source = new FileWrapper("../" + assetPath)-->Line_13 $$ if (!source.exists())[ FD ]
Line_61 $$ String path = asset.file.path().replace('\\', '/').replace(assetOutputPath, "").replaceFirst("assets/", "")-->Line_62 $$ if (path.startsWith("/"))[ FD ]
Line_53 $$ bundleAssets = new ArrayList<Asset>()-->Line_56 $$ bundleAssets.add(asset)[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_29 $$ ArrayList<Asset> assets = new ArrayList<Asset>()[ CD ]
Line_36 $$ FileWrapper dest = target.child(classpathFile)-->Line_38 $$ assets.add(new Asset(dest, assetFilter.getType(dest.path())))[ FD ]
Line_51 $$ ArrayList<Asset> bundleAssets = bundles.get(bundleName)-->Line_53 $$ bundleAssets = new ArrayList<Asset>()[ FD ]
Line_61 $$ String path = asset.file.path().replace('\\', '/').replace(assetOutputPath, "").replaceFirst("assets/", "")-->Line_66 $$ buffer.append(path)[ FD ]
Line_12 $$ source = new FileWrapper("../" + assetPath)-->Line_16 $$ if (!source.isDirectory())[ FD ]
Line_11 $$ if (!source.exists()) -->Line_13 $$ if (!source.exists())[ CD ]
Line_10 $$ FileWrapper source = new FileWrapper(assetPath)-->Line_30 $$ copyDirectory(source, target, assetFilter, assets)[ FD ]
Line_59 $$ StringBuffer buffer = new StringBuffer()-->Line_72 $$ buffer.append("\n")[ FD ]
Line_49 $$ bundleName = "assets"-->Line_51 $$ ArrayList<Asset> bundleAssets = bundles.get(bundleName)[ FD ]
Line_10 $$ FileWrapper source = new FileWrapper(assetPath)-->Line_13 $$ if (!source.exists())[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_19 $$ System.out.println(source.file.getAbsolutePath())[ CD ]
Line_20 $$ FileWrapper target = new FileWrapper("assets/")-->Line_25 $$ if (target.exists()) [ FD ]
Line_20 $$ FileWrapper target = new FileWrapper("assets/")-->Line_26 $$ if (!target.deleteDirectory())[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_76 $$ return createDummyClass(logger, context)[ FD ]
Line_9 $$ AssetFilter assetFilter = getAssetFilter(context)-->Line_30 $$ copyDirectory(source, target, assetFilter, assets)[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_5 $$ String assetOutputPath = getAssetOutputPath(context)[ CD ]
Line_23 $$ target = new FileWrapper(assetOutputPath + "assets/")-->Line_74 $$ target.child(bundle.getKey() + ".txt").writeString(buffer.toString(), false)[ FD ]
Line_58 $$ for (Entry<String, ArrayList<Asset>> bundle : bundles.entrySet()) -->Line_74 $$ target.child(bundle.getKey() + ".txt").writeString(buffer.toString(), false)[ FD ]
Line_12 $$ source = new FileWrapper("../" + assetPath)-->Line_30 $$ copyDirectory(source, target, assetFilter, assets)[ FD ]
Line_46 $$ for (Asset asset : assets) -->Line_56 $$ bundleAssets.add(asset)[ FD ]
Line_23 $$ target = new FileWrapper(assetOutputPath + "assets/")-->Line_25 $$ if (target.exists()) [ FD ]
Line_22 $$ if (!target.file.getAbsolutePath().replace("\\", "/").endsWith(assetOutputPath + "assets")) -->Line_23 $$ target = new FileWrapper(assetOutputPath + "assets/")[ CD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_30 $$ copyDirectory(source, target, assetFilter, assets)[ CD ]
Line_62 $$ if (path.startsWith("/"))-->Line_63 $$ path = path.substring(1)[ CD ]
Line_59 $$ StringBuffer buffer = new StringBuffer()-->Line_64 $$ buffer.append(asset.type.code)[ FD ]
Line_61 $$ String path = asset.file.path().replace('\\', '/').replace(assetOutputPath, "").replaceFirst("assets/", "")-->Line_63 $$ path = path.substring(1)[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_20 $$ FileWrapper target = new FileWrapper("assets/")[ CD ]
Line_52 $$ if (bundleAssets == null) -->Line_53 $$ bundleAssets = new ArrayList<Asset>()[ CD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_9 $$ AssetFilter assetFilter = getAssetFilter(context)[ FD ]
Line_51 $$ ArrayList<Asset> bundleAssets = bundles.get(bundleName)-->Line_52 $$ if (bundleAssets == null) [ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_6 $$ if (assetOutputPath == null) [ CD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_25 $$ if (target.exists()) [ CD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_4 $$ String assetPath = getAssetPath(context)[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_76 $$ return createDummyClass(logger, context)[ CD ]
Line_58 $$ for (Entry<String, ArrayList<Asset>> bundle : bundles.entrySet()) -->Line_60 $$ for (Asset asset : bundle.getValue()) [ FD ]
Line_47 $$ String bundleName = assetFilter.getBundleName(asset.file.path())-->Line_54 $$ bundles.put(bundleName, bundleAssets)[ FD ]
Line_7 $$ assetOutputPath = "war/"-->Line_61 $$ String path = asset.file.path().replace('\\', '/').replace(assetOutputPath, "").replaceFirst("assets/", "")[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_35 $$ InputStream is = context.getClass().getClassLoader().getResourceAsStream(classpathFile)[ FD ]
Line_59 $$ StringBuffer buffer = new StringBuffer()-->Line_67 $$ buffer.append(":")[ FD ]
Line_51 $$ ArrayList<Asset> bundleAssets = bundles.get(bundleName)-->Line_54 $$ bundles.put(bundleName, bundleAssets)[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_22 $$ if (!target.file.getAbsolutePath().replace("\\", "/").endsWith(assetOutputPath + "assets")) [ CD ]
Line_51 $$ ArrayList<Asset> bundleAssets = bundles.get(bundleName)-->Line_56 $$ bundleAssets.add(asset)[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_31 $$ List<String> classpathFiles = getClasspathFiles(context)[ CD ]
Line_49 $$ bundleName = "assets"-->Line_54 $$ bundles.put(bundleName, bundleAssets)[ FD ]
Line_59 $$ StringBuffer buffer = new StringBuffer()-->Line_74 $$ target.child(bundle.getKey() + ".txt").writeString(buffer.toString(), false)[ FD ]
Line_11 $$ if (!source.exists()) -->Line_12 $$ source = new FileWrapper("../" + assetPath)[ CD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_16 $$ if (!source.isDirectory())[ CD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_18 $$ System.out.println("Copying resources from " + assetPath + " to " + assetOutputPath)[ CD ]
Line_5 $$ String assetOutputPath = getAssetOutputPath(context)-->Line_61 $$ String path = asset.file.path().replace('\\', '/').replace(assetOutputPath, "").replaceFirst("assets/", "")[ FD ]
Line_6 $$ if (assetOutputPath == null) -->Line_7 $$ assetOutputPath = "war/"[ CD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_31 $$ List<String> classpathFiles = getClasspathFiles(context)[ FD ]
Line_35 $$ InputStream is = context.getClass().getClassLoader().getResourceAsStream(classpathFile)-->Line_39 $$ is.close()[ FD ]
Line_63 $$ path = path.substring(1)-->Line_66 $$ buffer.append(path)[ FD ]
Line_9 $$ AssetFilter assetFilter = getAssetFilter(context)-->Line_38 $$ assets.add(new Asset(dest, assetFilter.getType(dest.path())))[ FD ]
Line_10 $$ FileWrapper source = new FileWrapper(assetPath)-->Line_16 $$ if (!source.isDirectory())[ FD ]
Line_45 $$ HashMap<String, ArrayList<Asset>> bundles = new HashMap<String, ArrayList<Asset>>()-->Line_58 $$ for (Entry<String, ArrayList<Asset>> bundle : bundles.entrySet()) [ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_3 $$ System.out.println(new File(".").getAbsolutePath())[ CD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_10 $$ FileWrapper source = new FileWrapper(assetPath)[ CD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_45 $$ HashMap<String, ArrayList<Asset>> bundles = new HashMap<String, ArrayList<Asset>>()[ CD ]
Line_20 $$ FileWrapper target = new FileWrapper("assets/")-->Line_74 $$ target.child(bundle.getKey() + ".txt").writeString(buffer.toString(), false)[ FD ]
Line_5 $$ String assetOutputPath = getAssetOutputPath(context)-->Line_6 $$ if (assetOutputPath == null) [ FD ]
Line_32 $$ for (String classpathFile : classpathFiles) -->Line_36 $$ FileWrapper dest = target.child(classpathFile)[ FD ]
Line_59 $$ StringBuffer buffer = new StringBuffer()-->Line_71 $$ buffer.append(mimetype == null ? "application/unknown" : mimetype)[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_21 $$ System.out.println(target.file.getAbsolutePath())[ CD ]
Line_9 $$ AssetFilter assetFilter = getAssetFilter(context)-->Line_47 $$ String bundleName = assetFilter.getBundleName(asset.file.path())[ FD ]
Line_59 $$ StringBuffer buffer = new StringBuffer()-->Line_65 $$ buffer.append(":")[ FD ]
Line_48 $$ if (bundleName == null) -->Line_49 $$ bundleName = "assets"[ CD ]
Line_5 $$ String assetOutputPath = getAssetOutputPath(context)-->Line_7 $$ assetOutputPath = "war/"[ FD ]
Line_59 $$ StringBuffer buffer = new StringBuffer()-->Line_69 $$ buffer.append(":")[ FD ]
Line_47 $$ String bundleName = assetFilter.getBundleName(asset.file.path())-->Line_48 $$ if (bundleName == null) [ FD ]
Line_59 $$ StringBuffer buffer = new StringBuffer()-->Line_68 $$ buffer.append(asset.file.isDirectory() ? 0 : asset.file.length())[ FD ]
Line_23 $$ target = new FileWrapper(assetOutputPath + "assets/")-->Line_26 $$ if (!target.deleteDirectory())[ FD ]
Line_52 $$ if (bundleAssets == null) -->Line_54 $$ bundles.put(bundleName, bundleAssets)[ CD ]
Line_29 $$ ArrayList<Asset> assets = new ArrayList<Asset>()-->Line_38 $$ assets.add(new Asset(dest, assetFilter.getType(dest.path())))[ FD ]
Line_2 $$ public String generate(TreeLogger logger, GeneratorContext context, String typeName) throws UnableToCompleteException -->Line_11 $$ if (!source.exists()) [ CD ]
Line_23 $$ target = new FileWrapper(assetOutputPath + "assets/")-->Line_30 $$ copyDirectory(source, target, assetFilter, assets)[ FD ]
Line_32 $$ for (String classpathFile : classpathFiles) -->Line_33 $$ if (assetFilter.accept(classpathFile, false)) [ FD ]
Line_53 $$ bundleAssets = new ArrayList<Asset>()-->Line_54 $$ bundles.put(bundleName, bundleAssets)[ FD ]
Line_45 $$ HashMap<String, ArrayList<Asset>> bundles = new HashMap<String, ArrayList<Asset>>()-->Line_51 $$ ArrayList<Asset> bundleAssets = bundles.get(bundleName)[ FD ]
Line_25 $$ if (target.exists()) -->Line_26 $$ if (!target.deleteDirectory())[ CD ]
