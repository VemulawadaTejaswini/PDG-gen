Line_27 $$ for (int i = 1; i < reader.getItemCount(); i++) -->Line_28 $$ int itemOffset = reader.getItem(i)[ CD ]
Line_20 $$ InputStream inputStream = resource.openStream()-->Line_24 $$ inputStream.close()[ FD ]
Line_11 $$ URL resource = targetClassLoader.getResource(resourceName)-->Line_13 $$ if (resource == null) [ FD ]
Line_33 $$ type = type.getElementType()-->Line_35 $$ if (type.getSort() != Type.OBJECT) [ FD ]
Line_29 $$ if (itemOffset > 0 && reader.readByte(itemOffset - 1) == 7) -->Line_30 $$ String classDescriptor = reader.readUTF8(itemOffset, charBuffer)[ CD ]
Line_3 $$ ClassLoader targetClassLoader = target.getClassLoader()-->Line_11 $$ URL resource = targetClassLoader.getResource(resourceName)[ FD ]
Line_22 $$ reader = new ClassReader(inputStream)-->Line_28 $$ int itemOffset = reader.getItem(i)[ FD ]
Line_19 $$ ClassReader reader-->Line_22 $$ reader = new ClassReader(inputStream)[ FD ]
Line_27 $$ for (int i = 1; i < reader.getItemCount(); i++) -->Line_29 $$ if (itemOffset > 0 && reader.readByte(itemOffset - 1) == 7) [ CD ]
Line_11 $$ URL resource = targetClassLoader.getResource(resourceName)-->Line_20 $$ InputStream inputStream = resource.openStream()[ FD ]
Line_29 $$ if (itemOffset > 0 && reader.readByte(itemOffset - 1) == 7) -->Line_35 $$ if (type.getSort() != Type.OBJECT) [ CD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_49 $$ find(cl, visited, dest)[ FD ]
Line_3 $$ ClassLoader targetClassLoader = target.getClassLoader()-->Line_4 $$ if (targetClassLoader == null) [ FD ]
Line_31 $$ Type type = Type.getObjectType(classDescriptor)-->Line_35 $$ if (type.getSort() != Type.OBJECT) [ FD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_39 $$ if (className.equals(target.getName())) [ FD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_3 $$ ClassLoader targetClassLoader = target.getClassLoader()[ FD ]
Line_28 $$ int itemOffset = reader.getItem(i)-->Line_30 $$ String classDescriptor = reader.readUTF8(itemOffset, charBuffer)[ FD ]
Line_29 $$ if (itemOffset > 0 && reader.readByte(itemOffset - 1) == 7) -->Line_49 $$ find(cl, visited, dest)[ CD ]
Line_3 $$ ClassLoader targetClassLoader = target.getClassLoader()-->Line_44 $$ cl = Class.forName(className, false, targetClassLoader)[ FD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_7 $$ if (!visited.add(target)) [ FD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_53 $$ throw new GradleException(String.format("Could not determine the class-path for %s.", target), e)[ FD ]
Line_27 $$ for (int i = 1; i < reader.getItemCount(); i++) -->Line_28 $$ int itemOffset = reader.getItem(i)[ FD ]
Line_4 $$ if (targetClassLoader == null) -->Line_5 $$ return[ CD ]
Line_31 $$ Type type = Type.getObjectType(classDescriptor)-->Line_33 $$ type = type.getElementType()[ FD ]
Line_33 $$ type = type.getElementType()-->Line_32 $$ while (type.getSort() == Type.ARRAY) [ FD ]
Line_31 $$ Type type = Type.getObjectType(classDescriptor)-->Line_32 $$ while (type.getSort() == Type.ARRAY) [ FD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_17 $$ File classPathRoot = ClasspathUtil.getClasspathForClass(target)[ FD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_18 $$ dest.add(classPathRoot.toURI().toURL())[ FD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_4 $$ if (targetClassLoader == null) [ CD ]
Line_33 $$ type = type.getElementType()-->Line_38 $$ String className = type.getClassName()[ FD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_11 $$ URL resource = targetClassLoader.getResource(resourceName)[ CD ]
Line_19 $$ ClassReader reader-->Line_29 $$ if (itemOffset > 0 && reader.readByte(itemOffset - 1) == 7) [ FD ]
Line_19 $$ ClassReader reader-->Line_27 $$ for (int i = 1; i < reader.getItemCount(); i++) [ FD ]
Line_19 $$ ClassReader reader-->Line_30 $$ String classDescriptor = reader.readUTF8(itemOffset, charBuffer)[ FD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_7 $$ if (!visited.add(target)) [ CD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_10 $$ String resourceName = target.getName().replace('.', '/') + ".class"[ FD ]
Line_29 $$ if (itemOffset > 0 && reader.readByte(itemOffset - 1) == 7) -->Line_31 $$ Type type = Type.getObjectType(classDescriptor)[ CD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_14 $$ LOGGER.warn("Could not determine classpath for [ FD ]
Line_19 $$ ClassReader reader-->Line_26 $$ char[] charBuffer = new char[reader.getMaxStringLength()][ FD ]
Line_26 $$ char[] charBuffer = new char[reader.getMaxStringLength()]-->Line_30 $$ String classDescriptor = reader.readUTF8(itemOffset, charBuffer)[ FD ]
Line_29 $$ if (itemOffset > 0 && reader.readByte(itemOffset - 1) == 7) -->Line_38 $$ String className = type.getClassName()[ CD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_3 $$ ClassLoader targetClassLoader = target.getClassLoader()[ CD ]
Line_29 $$ if (itemOffset > 0 && reader.readByte(itemOffset - 1) == 7) -->Line_39 $$ if (className.equals(target.getName())) [ CD ]
Line_17 $$ File classPathRoot = ClasspathUtil.getClasspathForClass(target)-->Line_18 $$ dest.add(classPathRoot.toURI().toURL())[ FD ]
Line_7 $$ if (!visited.add(target)) -->Line_8 $$ return[ CD ]
Line_19 $$ ClassReader reader-->Line_28 $$ int itemOffset = reader.getItem(i)[ FD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_46 $$ LOGGER.warn("Could not determine classpath for [ FD ]
Line_2 $$ private void find(Class<?> target, Collection<Class<?>> visited, Collection<URL> dest) -->Line_10 $$ String resourceName = target.getName().replace('.', '/') + ".class"[ CD ]
Line_22 $$ reader = new ClassReader(inputStream)-->Line_29 $$ if (itemOffset > 0 && reader.readByte(itemOffset - 1) == 7) [ FD ]
Line_13 $$ if (resource == null) -->Line_14 $$ LOGGER.warn("Could not determine classpath for [ CD ]
Line_22 $$ reader = new ClassReader(inputStream)-->Line_26 $$ char[] charBuffer = new char[reader.getMaxStringLength()][ FD ]
Line_22 $$ reader = new ClassReader(inputStream)-->Line_27 $$ for (int i = 1; i < reader.getItemCount(); i++) [ FD ]
Line_13 $$ if (resource == null) -->Line_15 $$ return[ CD ]
Line_22 $$ reader = new ClassReader(inputStream)-->Line_30 $$ String classDescriptor = reader.readUTF8(itemOffset, charBuffer)[ FD ]
Line_30 $$ String classDescriptor = reader.readUTF8(itemOffset, charBuffer)-->Line_31 $$ Type type = Type.getObjectType(classDescriptor)[ FD ]
Line_29 $$ if (itemOffset > 0 && reader.readByte(itemOffset - 1) == 7) -->Line_32 $$ while (type.getSort() == Type.ARRAY) [ CD ]
Line_32 $$ while (type.getSort() == Type.ARRAY) -->Line_33 $$ type = type.getElementType()[ CD ]
Line_31 $$ Type type = Type.getObjectType(classDescriptor)-->Line_38 $$ String className = type.getClassName()[ FD ]
Line_10 $$ String resourceName = target.getName().replace('.', '/') + ".class"-->Line_11 $$ URL resource = targetClassLoader.getResource(resourceName)[ FD ]
