Line_3 $$ if (format.equals("java.properties")) -->Line_41 $$ return super.newBundle(baseName, locale, format, loader, reload)[ CD ]
Line_3 $$ if (format.equals("java.properties")) -->Line_7 $$ final boolean reloadFlag = reload[ CD ]
Line_16 $$ URLConnection connection = url.openConnection()-->Line_18 $$ connection.setUseCaches(false)[ FD ]
Line_15 $$ if (url != null) -->Line_17 $$ if (connection != null) [ CD ]
Line_4 $$ String bundleName = toBundleName(baseName, locale)-->Line_5 $$ final String resourceName = toResourceName(bundleName, "properties")[ FD ]
Line_16 $$ URLConnection connection = url.openConnection()-->Line_19 $$ is = connection.getInputStream()[ FD ]
Line_2 $$ public ResourceBundle newBundle(String baseName, Locale locale, String format, ClassLoader loader, boolean reload) throws IllegalAccessException, InstantiationException, IOException -->Line_3 $$ if (format.equals("java.properties")) [ FD ]
Line_12 $$ InputStream is = null-->Line_23 $$ is = classLoader.getResourceAsStream(resourceName)[ FD ]
Line_10 $$ stream = AccessController.doPrivileged(new PrivilegedExceptionAction<InputStream>() -->Line_12 $$ InputStream is = null[ CD ]
Line_6 $$ final ClassLoader classLoader = loader-->Line_23 $$ is = classLoader.getResourceAsStream(resourceName)[ FD ]
Line_10 $$ stream = AccessController.doPrivileged(new PrivilegedExceptionAction<InputStream>() -->Line_35 $$ stream.close()[ FD ]
Line_5 $$ final String resourceName = toResourceName(bundleName, "properties")-->Line_14 $$ URL url = classLoader.getResource(resourceName)[ FD ]
Line_6 $$ final ClassLoader classLoader = loader-->Line_14 $$ URL url = classLoader.getResource(resourceName)[ FD ]
Line_10 $$ stream = AccessController.doPrivileged(new PrivilegedExceptionAction<InputStream>() -->Line_31 $$ if (stream != null) [ FD ]
Line_5 $$ final String resourceName = toResourceName(bundleName, "properties")-->Line_23 $$ is = classLoader.getResourceAsStream(resourceName)[ FD ]
Line_13 $$ if (reloadFlag) -->Line_15 $$ if (url != null) [ CD ]
Line_8 $$ InputStream stream-->Line_31 $$ if (stream != null) [ FD ]
Line_17 $$ if (connection != null) -->Line_18 $$ connection.setUseCaches(false)[ CD ]
Line_12 $$ InputStream is = null-->Line_19 $$ is = connection.getInputStream()[ FD ]
Line_10 $$ stream = AccessController.doPrivileged(new PrivilegedExceptionAction<InputStream>() -->Line_13 $$ if (reloadFlag) [ CD ]
Line_3 $$ if (format.equals("java.properties")) -->Line_8 $$ InputStream stream[ CD ]
Line_2 $$ public ResourceBundle newBundle(String baseName, Locale locale, String format, ClassLoader loader, boolean reload) throws IllegalAccessException, InstantiationException, IOException -->Line_4 $$ String bundleName = toBundleName(baseName, locale)[ FD ]
Line_19 $$ is = connection.getInputStream()-->Line_23 $$ is = classLoader.getResourceAsStream(resourceName)[ FD ]
Line_2 $$ public ResourceBundle newBundle(String baseName, Locale locale, String format, ClassLoader loader, boolean reload) throws IllegalAccessException, InstantiationException, IOException -->Line_41 $$ return super.newBundle(baseName, locale, format, loader, reload)[ FD ]
Line_3 $$ if (format.equals("java.properties")) -->Line_4 $$ String bundleName = toBundleName(baseName, locale)[ CD ]
Line_3 $$ if (format.equals("java.properties")) -->Line_31 $$ if (stream != null) [ CD ]
Line_16 $$ URLConnection connection = url.openConnection()-->Line_17 $$ if (connection != null) [ FD ]
Line_10 $$ stream = AccessController.doPrivileged(new PrivilegedExceptionAction<InputStream>() -->Line_25 $$ return is[ CD ]
Line_2 $$ public ResourceBundle newBundle(String baseName, Locale locale, String format, ClassLoader loader, boolean reload) throws IllegalAccessException, InstantiationException, IOException -->Line_3 $$ if (format.equals("java.properties")) [ CD ]
Line_8 $$ InputStream stream-->Line_10 $$ stream = AccessController.doPrivileged(new PrivilegedExceptionAction<InputStream>() [ FD ]
Line_8 $$ InputStream stream-->Line_35 $$ stream.close()[ FD ]
Line_14 $$ URL url = classLoader.getResource(resourceName)-->Line_16 $$ URLConnection connection = url.openConnection()[ FD ]
Line_13 $$ if (reloadFlag) -->Line_14 $$ URL url = classLoader.getResource(resourceName)[ CD ]
Line_3 $$ if (format.equals("java.properties")) -->Line_5 $$ final String resourceName = toResourceName(bundleName, "properties")[ CD ]
Line_31 $$ if (stream != null) -->Line_38 $$ return null[ CD ]
Line_15 $$ if (url != null) -->Line_16 $$ URLConnection connection = url.openConnection()[ CD ]
Line_3 $$ if (format.equals("java.properties")) -->Line_6 $$ final ClassLoader classLoader = loader[ CD ]
Line_17 $$ if (connection != null) -->Line_19 $$ is = connection.getInputStream()[ CD ]
Line_13 $$ if (reloadFlag) -->Line_23 $$ is = classLoader.getResourceAsStream(resourceName)[ CD ]
Line_14 $$ URL url = classLoader.getResource(resourceName)-->Line_15 $$ if (url != null) [ FD ]
