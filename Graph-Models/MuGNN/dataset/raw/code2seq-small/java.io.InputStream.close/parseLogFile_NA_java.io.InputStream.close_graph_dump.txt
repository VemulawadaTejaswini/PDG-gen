Line_20 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_31 $$ for (String line = readLine(reader); line != null; line = readLine(reader)) [ FD ]
Line_2 $$ public void parseLogFile(FileSystem fs, Path filePath, long offset, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_37 $$ reporter.setStatus(txt)[ FD ]
Line_31 $$ for (String line = readLine(reader); line != null; line = readLine(reader)) -->Line_33 $$ if ((stm.getPos() - processed) > 20000) [ CD ]
Line_40 $$ if (isEndOfJobLog(line)) -->Line_46 $$ jh = new JobHistoryLog()[ CD ]
Line_5 $$ FSDataInputStream stm = fs.open(filePath)-->Line_21 $$ if ((stm.getPos() - processed) > 100000) [ FD ]
Line_19 $$ if (jobDelimiterPattern != null) -->Line_20 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ CD ]
Line_3 $$ InputStream in = null-->Line_61 $$ if (in != null)[ FD ]
Line_31 $$ for (String line = readLine(reader); line != null; line = readLine(reader)) -->Line_40 $$ if (isEndOfJobLog(line)) [ FD ]
Line_33 $$ if ((stm.getPos() - processed) > 20000) -->Line_36 $$ String txt = "Processing " + filePath + " at " + processed + " # tasks = " + numTasks[ CD ]
Line_2 $$ public void parseLogFile(FileSystem fs, Path filePath, long offset, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_6 $$ stm.seek(offset)[ FD ]
Line_20 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_49 $$ jh.parseLine(line)[ FD ]
Line_20 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_21 $$ if ((stm.getPos() - processed) > 100000) [ CD ]
Line_7 $$ in = stm-->Line_62 $$ in.close()[ FD ]
Line_21 $$ if ((stm.getPos() - processed) > 100000) -->Line_22 $$ processed = stm.getPos()[ CD ]
Line_11 $$ CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(compressionClass, new Configuration())-->Line_12 $$ in = codec.createInputStream(stm)[ FD ]
Line_36 $$ String txt = "Processing " + filePath + " at " + processed + " # tasks = " + numTasks-->Line_37 $$ reporter.setStatus(txt)[ FD ]
Line_51 $$ if (jh.JOBID == null) -->Line_53 $$ return[ CD ]
Line_30 $$ int jobLineCount = 0-->Line_32 $$ jobLineCount++[ FD ]
Line_61 $$ if (in != null)-->Line_62 $$ in.close()[ CD ]
Line_5 $$ FSDataInputStream stm = fs.open(filePath)-->Line_34 $$ processed = stm.getPos()[ FD ]
Line_20 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_25 $$ if (isEndOfJobLog(line))[ FD ]
Line_16 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_31 $$ for (String line = readLine(reader); line != null; line = readLine(reader)) [ FD ]
Line_41 $$ if (jh.JOBID != null) -->Line_44 $$ LOG.info("Collected stats for job: " + jh.JOBID)[ CD ]
Line_29 $$ JobHistoryLog jh = new JobHistoryLog()-->Line_43 $$ collectJobStats(jh, output, reporter)[ FD ]
Line_33 $$ if ((stm.getPos() - processed) > 20000) -->Line_35 $$ long numTasks = (jh.tasks == null ? 0 : jh.tasks.size())[ CD ]
Line_7 $$ in = stm-->Line_61 $$ if (in != null)[ FD ]
Line_5 $$ FSDataInputStream stm = fs.open(filePath)-->Line_22 $$ processed = stm.getPos()[ FD ]
Line_5 $$ FSDataInputStream stm = fs.open(filePath)-->Line_33 $$ if ((stm.getPos() - processed) > 20000) [ FD ]
Line_46 $$ jh = new JobHistoryLog()-->Line_43 $$ collectJobStats(jh, output, reporter)[ FD ]
Line_36 $$ String txt = "Processing " + filePath + " at " + processed + " # tasks = " + numTasks-->Line_38 $$ LOG.info(txt)[ FD ]
Line_47 $$ jobLineCount = 0-->Line_32 $$ jobLineCount++[ FD ]
Line_10 $$ if (compressionClass != null) -->Line_12 $$ in = codec.createInputStream(stm)[ CD ]
Line_2 $$ public void parseLogFile(FileSystem fs, Path filePath, long offset, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_5 $$ FSDataInputStream stm = fs.open(filePath)[ FD ]
Line_12 $$ in = codec.createInputStream(stm)-->Line_61 $$ if (in != null)[ FD ]
Line_3 $$ InputStream in = null-->Line_7 $$ in = stm[ FD ]
Line_33 $$ if ((stm.getPos() - processed) > 20000) -->Line_34 $$ processed = stm.getPos()[ CD ]
Line_31 $$ for (String line = readLine(reader); line != null; line = readLine(reader)) -->Line_40 $$ if (isEndOfJobLog(line)) [ CD ]
Line_20 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_25 $$ if (isEndOfJobLog(line))[ CD ]
Line_30 $$ int jobLineCount = 0-->Line_47 $$ jobLineCount = 0[ FD ]
Line_10 $$ if (compressionClass != null) -->Line_14 $$ reporter.setStatus("Codec created " + filePath)[ CD ]
Line_12 $$ in = codec.createInputStream(stm)-->Line_62 $$ in.close()[ FD ]
Line_5 $$ FSDataInputStream stm = fs.open(filePath)-->Line_6 $$ stm.seek(offset)[ FD ]
Line_3 $$ InputStream in = null-->Line_12 $$ in = codec.createInputStream(stm)[ FD ]
Line_33 $$ if ((stm.getPos() - processed) > 20000) -->Line_38 $$ LOG.info(txt)[ CD ]
Line_41 $$ if (jh.JOBID != null) -->Line_43 $$ collectJobStats(jh, output, reporter)[ CD ]
Line_29 $$ JobHistoryLog jh = new JobHistoryLog()-->Line_49 $$ jh.parseLine(line)[ FD ]
Line_5 $$ FSDataInputStream stm = fs.open(filePath)-->Line_12 $$ in = codec.createInputStream(stm)[ FD ]
Line_7 $$ in = stm-->Line_12 $$ in = codec.createInputStream(stm)[ FD ]
Line_3 $$ InputStream in = null-->Line_62 $$ in.close()[ FD ]
Line_51 $$ if (jh.JOBID == null) -->Line_52 $$ LOG.error("JOBID = NULL in " + filePath + " at " + processed)[ CD ]
Line_20 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_40 $$ if (isEndOfJobLog(line)) [ FD ]
Line_31 $$ for (String line = readLine(reader); line != null; line = readLine(reader)) -->Line_49 $$ jh.parseLine(line)[ FD ]
Line_10 $$ if (compressionClass != null) -->Line_11 $$ CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(compressionClass, new Configuration())[ CD ]
Line_41 $$ if (jh.JOBID != null) -->Line_42 $$ LOG.info("Finished parsing job: " + jh.JOBID + " line count = " + jobLineCount)[ CD ]
Line_2 $$ public void parseLogFile(FileSystem fs, Path filePath, long offset, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_43 $$ collectJobStats(jh, output, reporter)[ FD ]
Line_2 $$ public void parseLogFile(FileSystem fs, Path filePath, long offset, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_14 $$ reporter.setStatus("Codec created " + filePath)[ FD ]
Line_29 $$ JobHistoryLog jh = new JobHistoryLog()-->Line_46 $$ jh = new JobHistoryLog()[ FD ]
Line_22 $$ processed = stm.getPos()-->Line_34 $$ processed = stm.getPos()[ FD ]
Line_18 $$ long processed = 0L-->Line_34 $$ processed = stm.getPos()[ FD ]
Line_2 $$ public void parseLogFile(FileSystem fs, Path filePath, long offset, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_55 $$ collectJobStats(jh, output, reporter)[ FD ]
Line_46 $$ jh = new JobHistoryLog()-->Line_55 $$ collectJobStats(jh, output, reporter)[ FD ]
Line_18 $$ long processed = 0L-->Line_22 $$ processed = stm.getPos()[ FD ]
Line_21 $$ if ((stm.getPos() - processed) > 100000) -->Line_23 $$ reporter.setStatus("Processing " + filePath + " at " + processed)[ CD ]
Line_40 $$ if (isEndOfJobLog(line)) -->Line_47 $$ jobLineCount = 0[ CD ]
Line_2 $$ public void parseLogFile(FileSystem fs, Path filePath, long offset, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_3 $$ InputStream in = null[ CD ]
Line_16 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_20 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ FD ]
Line_33 $$ if ((stm.getPos() - processed) > 20000) -->Line_37 $$ reporter.setStatus(txt)[ CD ]
Line_2 $$ public void parseLogFile(FileSystem fs, Path filePath, long offset, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_58 $$ reporter.setStatus("JHLAMapper.parseLogFile failed " + StringUtils.stringifyException(ie))[ FD ]
Line_40 $$ if (isEndOfJobLog(line)) -->Line_41 $$ if (jh.JOBID != null) [ CD ]
Line_5 $$ FSDataInputStream stm = fs.open(filePath)-->Line_7 $$ in = stm[ FD ]
Line_10 $$ if (compressionClass != null) -->Line_13 $$ LOG.info("Codec created " + filePath)[ CD ]
Line_2 $$ public void parseLogFile(FileSystem fs, Path filePath, long offset, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_9 $$ reporter.setStatus("Opened " + filePath)[ FD ]
Line_29 $$ JobHistoryLog jh = new JobHistoryLog()-->Line_55 $$ collectJobStats(jh, output, reporter)[ FD ]
Line_2 $$ public void parseLogFile(FileSystem fs, Path filePath, long offset, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_23 $$ reporter.setStatus("Processing " + filePath + " at " + processed)[ FD ]
Line_40 $$ if (isEndOfJobLog(line)) -->Line_49 $$ jh.parseLine(line)[ CD ]
Line_31 $$ for (String line = readLine(reader); line != null; line = readLine(reader)) -->Line_32 $$ jobLineCount++[ CD ]
Line_46 $$ jh = new JobHistoryLog()-->Line_49 $$ jh.parseLine(line)[ FD ]
