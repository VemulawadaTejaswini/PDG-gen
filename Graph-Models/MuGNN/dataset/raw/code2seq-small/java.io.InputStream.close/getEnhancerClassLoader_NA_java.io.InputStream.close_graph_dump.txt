Line_19 $$ final byte[] enhanced = new Enhancer(enhancementContext).enhance(name, original)-->Line_26 $$ return defineClass(name, enhanced, 0, enhanced.length)[ FD ]
Line_20 $$ File f = new File(workingDir + File.separator + name.replace(".", File.separator) + ".class")-->Line_22 $$ f.createNewFile()[ FD ]
Line_3 $$ return new ClassLoader() -->Line_20 $$ File f = new File(workingDir + File.separator + name.replace(".", File.separator) + ".class")[ FD ]
Line_3 $$ return new ClassLoader() -->Line_5 $$ if (!name.startsWith(packageName)) [ CD ]
Line_3 $$ return new ClassLoader() -->Line_8 $$ final Class c = findLoadedClass(name)[ CD ]
Line_12 $$ final InputStream is = this.getResourceAsStream(name.replace('.', '/') + ".class")-->Line_13 $$ if (is == null) [ FD ]
Line_3 $$ return new ClassLoader() -->Line_12 $$ final InputStream is = this.getResourceAsStream(name.replace('.', '/') + ".class")[ FD ]
Line_12 $$ final InputStream is = this.getResourceAsStream(name.replace('.', '/') + ".class")-->Line_31 $$ is.close()[ FD ]
Line_23 $$ FileOutputStream out = new FileOutputStream(f)-->Line_24 $$ out.write(enhanced)[ FD ]
Line_3 $$ return new ClassLoader() -->Line_6 $$ return getParent().loadClass(name)[ FD ]
Line_2 $$ private static ClassLoader getEnhancerClassLoader(final String packageName) -->Line_3 $$ return new ClassLoader() [ CD ]
Line_12 $$ final InputStream is = this.getResourceAsStream(name.replace('.', '/') + ".class")-->Line_17 $$ final byte[] original = new byte[is.available()][ FD ]
Line_17 $$ final byte[] original = new byte[is.available()]-->Line_19 $$ final byte[] enhanced = new Enhancer(enhancementContext).enhance(name, original)[ FD ]
Line_5 $$ if (!name.startsWith(packageName)) -->Line_6 $$ return getParent().loadClass(name)[ CD ]
Line_3 $$ return new ClassLoader() -->Line_19 $$ final byte[] enhanced = new Enhancer(enhancementContext).enhance(name, original)[ FD ]
Line_20 $$ File f = new File(workingDir + File.separator + name.replace(".", File.separator) + ".class")-->Line_21 $$ f.getParentFile().mkdirs()[ FD ]
Line_2 $$ private static ClassLoader getEnhancerClassLoader(final String packageName) -->Line_5 $$ if (!name.startsWith(packageName)) [ FD ]
Line_19 $$ final byte[] enhanced = new Enhancer(enhancementContext).enhance(name, original)-->Line_24 $$ out.write(enhanced)[ FD ]
Line_8 $$ final Class c = findLoadedClass(name)-->Line_9 $$ if (c != null) [ FD ]
Line_3 $$ return new ClassLoader() -->Line_9 $$ if (c != null) [ CD ]
Line_3 $$ return new ClassLoader() -->Line_12 $$ final InputStream is = this.getResourceAsStream(name.replace('.', '/') + ".class")[ CD ]
Line_9 $$ if (c != null) -->Line_10 $$ return c[ CD ]
Line_23 $$ FileOutputStream out = new FileOutputStream(f)-->Line_25 $$ out.close()[ FD ]
Line_3 $$ return new ClassLoader() -->Line_5 $$ if (!name.startsWith(packageName)) [ FD ]
Line_3 $$ return new ClassLoader() -->Line_8 $$ final Class c = findLoadedClass(name)[ FD ]
Line_17 $$ final byte[] original = new byte[is.available()]-->Line_18 $$ new BufferedInputStream(is).read(original)[ FD ]
Line_3 $$ return new ClassLoader() -->Line_26 $$ return defineClass(name, enhanced, 0, enhanced.length)[ FD ]
Line_3 $$ return new ClassLoader() -->Line_13 $$ if (is == null) [ CD ]
