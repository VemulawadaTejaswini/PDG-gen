Line_2 $$ public void testGetPos() throws Exception -->Line_3 $$ OutputStream out = getOutputStream(defaultBufferSize)[ CD ]
Line_2 $$ public void testGetPos() throws Exception -->Line_4 $$ writeData(out)[ CD ]
Line_5 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_7 $$ int n1 = readAll(in, result, 0, dataLen / 3)[ FD ]
Line_6 $$ byte[] result = new byte[dataLen]-->Line_7 $$ int n1 = readAll(in, result, 0, dataLen / 3)[ FD ]
Line_3 $$ OutputStream out = getOutputStream(defaultBufferSize)-->Line_4 $$ writeData(out)[ FD ]
Line_2 $$ public void testGetPos() throws Exception -->Line_9 $$ int n2 = readAll(in, result, n1, dataLen - n1)[ CD ]
Line_2 $$ public void testGetPos() throws Exception -->Line_7 $$ int n1 = readAll(in, result, 0, dataLen / 3)[ CD ]
Line_5 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_9 $$ int n2 = readAll(in, result, n1, dataLen - n1)[ FD ]
Line_2 $$ public void testGetPos() throws Exception -->Line_10 $$ Assert.assertEquals(n1 + n2, ((Seekable) in).getPos())[ CD ]
Line_2 $$ public void testGetPos() throws Exception -->Line_5 $$ InputStream in = getInputStream(defaultBufferSize)[ CD ]
Line_2 $$ public void testGetPos() throws Exception -->Line_6 $$ byte[] result = new byte[dataLen][ CD ]
Line_7 $$ int n1 = readAll(in, result, 0, dataLen / 3)-->Line_9 $$ int n2 = readAll(in, result, n1, dataLen - n1)[ FD ]
Line_2 $$ public void testGetPos() throws Exception -->Line_11 $$ in.close()[ CD ]
Line_5 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_11 $$ in.close()[ FD ]
Line_7 $$ int n1 = readAll(in, result, 0, dataLen / 3)-->Line_8 $$ Assert.assertEquals(n1, ((Seekable) in).getPos())[ FD ]
Line_6 $$ byte[] result = new byte[dataLen]-->Line_9 $$ int n2 = readAll(in, result, n1, dataLen - n1)[ FD ]
Line_2 $$ public void testGetPos() throws Exception -->Line_8 $$ Assert.assertEquals(n1, ((Seekable) in).getPos())[ CD ]
