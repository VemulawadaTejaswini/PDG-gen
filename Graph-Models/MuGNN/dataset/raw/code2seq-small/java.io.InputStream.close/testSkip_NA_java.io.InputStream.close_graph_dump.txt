Line_5 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_18 $$ skipped = in.skip(-3)[ FD ]
Line_3 $$ OutputStream out = getOutputStream(defaultBufferSize)-->Line_4 $$ writeData(out)[ FD ]
Line_12 $$ byte[] readData = new byte[n2]-->Line_16 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_2 $$ public void testSkip() throws Exception -->Line_14 $$ byte[] expectedData = new byte[n2][ CD ]
Line_2 $$ public void testSkip() throws Exception -->Line_9 $$ long skipped = in.skip(dataLen / 3)[ CD ]
Line_7 $$ int n1 = readAll(in, result, 0, dataLen / 3)-->Line_8 $$ Assert.assertEquals(n1, ((Seekable) in).getPos())[ FD ]
Line_2 $$ public void testSkip() throws Exception -->Line_16 $$ Assert.assertArrayEquals(readData, expectedData)[ CD ]
Line_2 $$ public void testSkip() throws Exception -->Line_11 $$ Assert.assertEquals(dataLen, n1 + skipped + n2)[ CD ]
Line_5 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_10 $$ int n2 = readAll(in, result, 0, dataLen)[ FD ]
Line_2 $$ public void testSkip() throws Exception -->Line_8 $$ Assert.assertEquals(n1, ((Seekable) in).getPos())[ CD ]
Line_10 $$ int n2 = readAll(in, result, 0, dataLen)-->Line_15 $$ System.arraycopy(data, dataLen - n2, expectedData, 0, n2)[ FD ]
Line_2 $$ public void testSkip() throws Exception -->Line_12 $$ byte[] readData = new byte[n2][ CD ]
Line_2 $$ public void testSkip() throws Exception -->Line_25 $$ in.close()[ CD ]
Line_12 $$ byte[] readData = new byte[n2]-->Line_13 $$ System.arraycopy(result, 0, readData, 0, n2)[ FD ]
Line_2 $$ public void testSkip() throws Exception -->Line_7 $$ int n1 = readAll(in, result, 0, dataLen / 3)[ CD ]
Line_23 $$ skipped = in.skip(3)-->Line_24 $$ Assert.assertEquals(skipped, 0)[ FD ]
Line_6 $$ byte[] result = new byte[dataLen]-->Line_10 $$ int n2 = readAll(in, result, 0, dataLen)[ FD ]
Line_9 $$ long skipped = in.skip(dataLen / 3)-->Line_24 $$ Assert.assertEquals(skipped, 0)[ FD ]
Line_5 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_7 $$ int n1 = readAll(in, result, 0, dataLen / 3)[ FD ]
Line_18 $$ skipped = in.skip(-3)-->Line_24 $$ Assert.assertEquals(skipped, 0)[ FD ]
Line_14 $$ byte[] expectedData = new byte[n2]-->Line_16 $$ Assert.assertArrayEquals(readData, expectedData)[ FD ]
Line_5 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_23 $$ skipped = in.skip(3)[ FD ]
Line_2 $$ public void testSkip() throws Exception -->Line_24 $$ Assert.assertEquals(skipped, 0)[ CD ]
Line_5 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_9 $$ long skipped = in.skip(dataLen / 3)[ FD ]
Line_2 $$ public void testSkip() throws Exception -->Line_6 $$ byte[] result = new byte[dataLen][ CD ]
Line_5 $$ InputStream in = getInputStream(defaultBufferSize)-->Line_25 $$ in.close()[ FD ]
Line_2 $$ public void testSkip() throws Exception -->Line_5 $$ InputStream in = getInputStream(defaultBufferSize)[ CD ]
Line_2 $$ public void testSkip() throws Exception -->Line_4 $$ writeData(out)[ CD ]
Line_2 $$ public void testSkip() throws Exception -->Line_23 $$ skipped = in.skip(3)[ CD ]
Line_9 $$ long skipped = in.skip(dataLen / 3)-->Line_23 $$ skipped = in.skip(3)[ FD ]
Line_2 $$ public void testSkip() throws Exception -->Line_13 $$ System.arraycopy(result, 0, readData, 0, n2)[ CD ]
Line_6 $$ byte[] result = new byte[dataLen]-->Line_7 $$ int n1 = readAll(in, result, 0, dataLen / 3)[ FD ]
Line_6 $$ byte[] result = new byte[dataLen]-->Line_13 $$ System.arraycopy(result, 0, readData, 0, n2)[ FD ]
Line_9 $$ long skipped = in.skip(dataLen / 3)-->Line_18 $$ skipped = in.skip(-3)[ FD ]
Line_14 $$ byte[] expectedData = new byte[n2]-->Line_15 $$ System.arraycopy(data, dataLen - n2, expectedData, 0, n2)[ FD ]
Line_2 $$ public void testSkip() throws Exception -->Line_3 $$ OutputStream out = getOutputStream(defaultBufferSize)[ CD ]
Line_2 $$ public void testSkip() throws Exception -->Line_10 $$ int n2 = readAll(in, result, 0, dataLen)[ CD ]
Line_10 $$ int n2 = readAll(in, result, 0, dataLen)-->Line_13 $$ System.arraycopy(result, 0, readData, 0, n2)[ FD ]
Line_18 $$ skipped = in.skip(-3)-->Line_23 $$ skipped = in.skip(3)[ FD ]
Line_2 $$ public void testSkip() throws Exception -->Line_15 $$ System.arraycopy(data, dataLen - n2, expectedData, 0, n2)[ CD ]
