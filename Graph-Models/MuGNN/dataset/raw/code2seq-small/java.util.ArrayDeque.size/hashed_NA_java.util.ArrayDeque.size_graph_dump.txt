Line_2 $$ byte[] hashed(byte[] val, Integer... depths) -->Line_8 $$ hstack.push(val)[ FD ]
Line_13 $$ while (depth.equals(dstack.peek())) -->Line_15 $$ depth = dstack.pop() - 1[ CD ]
Line_10 $$ while (depthiter.hasNext()) -->Line_18 $$ hstack.push(hash)[ CD ]
Line_2 $$ byte[] hashed(byte[] val, Integer... depths) -->Line_6 $$ if (depthiter.hasNext()) [ CD ]
Line_10 $$ while (depthiter.hasNext()) -->Line_13 $$ while (depth.equals(dstack.peek())) [ CD ]
Line_2 $$ byte[] hashed(byte[] val, Integer... depths) -->Line_21 $$ return hstack.pop()[ CD ]
Line_4 $$ ArrayDeque<byte[]> hstack = new ArrayDeque<byte[]>()-->Line_8 $$ hstack.push(val)[ FD ]
Line_5 $$ Iterator<Integer> depthiter = Arrays.asList(depths).iterator()-->Line_6 $$ if (depthiter.hasNext()) [ FD ]
Line_13 $$ while (depth.equals(dstack.peek())) -->Line_14 $$ hash = Hashable.binaryHash(hstack.pop(), hash)[ CD ]
Line_4 $$ ArrayDeque<byte[]> hstack = new ArrayDeque<byte[]>()-->Line_20 $$ assert hstack.size() == 1[ FD ]
Line_15 $$ depth = dstack.pop() - 1-->Line_13 $$ while (depth.equals(dstack.peek())) [ FD ]
Line_2 $$ byte[] hashed(byte[] val, Integer... depths) -->Line_5 $$ Iterator<Integer> depthiter = Arrays.asList(depths).iterator()[ FD ]
Line_14 $$ hash = Hashable.binaryHash(hstack.pop(), hash)-->Line_18 $$ hstack.push(hash)[ FD ]
Line_5 $$ Iterator<Integer> depthiter = Arrays.asList(depths).iterator()-->Line_7 $$ dstack.push(depthiter.next())[ FD ]
Line_2 $$ byte[] hashed(byte[] val, Integer... depths) -->Line_3 $$ ArrayDeque<Integer> dstack = new ArrayDeque<Integer>()[ CD ]
Line_6 $$ if (depthiter.hasNext()) -->Line_8 $$ hstack.push(val)[ CD ]
Line_5 $$ Iterator<Integer> depthiter = Arrays.asList(depths).iterator()-->Line_11 $$ Integer depth = depthiter.next()[ FD ]
Line_11 $$ Integer depth = depthiter.next()-->Line_17 $$ dstack.push(depth)[ FD ]
Line_4 $$ ArrayDeque<byte[]> hstack = new ArrayDeque<byte[]>()-->Line_18 $$ hstack.push(hash)[ FD ]
Line_6 $$ if (depthiter.hasNext()) -->Line_7 $$ dstack.push(depthiter.next())[ CD ]
Line_2 $$ byte[] hashed(byte[] val, Integer... depths) -->Line_5 $$ Iterator<Integer> depthiter = Arrays.asList(depths).iterator()[ CD ]
Line_4 $$ ArrayDeque<byte[]> hstack = new ArrayDeque<byte[]>()-->Line_14 $$ hash = Hashable.binaryHash(hstack.pop(), hash)[ FD ]
Line_12 $$ byte[] hash = val-->Line_18 $$ hstack.push(hash)[ FD ]
Line_2 $$ byte[] hashed(byte[] val, Integer... depths) -->Line_4 $$ ArrayDeque<byte[]> hstack = new ArrayDeque<byte[]>()[ CD ]
Line_4 $$ ArrayDeque<byte[]> hstack = new ArrayDeque<byte[]>()-->Line_21 $$ return hstack.pop()[ FD ]
Line_2 $$ byte[] hashed(byte[] val, Integer... depths) -->Line_10 $$ while (depthiter.hasNext()) [ CD ]
Line_11 $$ Integer depth = depthiter.next()-->Line_15 $$ depth = dstack.pop() - 1[ FD ]
Line_15 $$ depth = dstack.pop() - 1-->Line_17 $$ dstack.push(depth)[ FD ]
Line_5 $$ Iterator<Integer> depthiter = Arrays.asList(depths).iterator()-->Line_10 $$ while (depthiter.hasNext()) [ FD ]
Line_3 $$ ArrayDeque<Integer> dstack = new ArrayDeque<Integer>()-->Line_17 $$ dstack.push(depth)[ FD ]
Line_10 $$ while (depthiter.hasNext()) -->Line_12 $$ byte[] hash = val[ CD ]
Line_10 $$ while (depthiter.hasNext()) -->Line_17 $$ dstack.push(depth)[ CD ]
Line_3 $$ ArrayDeque<Integer> dstack = new ArrayDeque<Integer>()-->Line_7 $$ dstack.push(depthiter.next())[ FD ]
Line_3 $$ ArrayDeque<Integer> dstack = new ArrayDeque<Integer>()-->Line_15 $$ depth = dstack.pop() - 1[ FD ]
Line_11 $$ Integer depth = depthiter.next()-->Line_13 $$ while (depth.equals(dstack.peek())) [ FD ]
Line_3 $$ ArrayDeque<Integer> dstack = new ArrayDeque<Integer>()-->Line_13 $$ while (depth.equals(dstack.peek())) [ FD ]
Line_12 $$ byte[] hash = val-->Line_14 $$ hash = Hashable.binaryHash(hstack.pop(), hash)[ FD ]
Line_10 $$ while (depthiter.hasNext()) -->Line_11 $$ Integer depth = depthiter.next()[ CD ]
