Line_2 $$ public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) -->Line_14 $$ return forType(syntheticType, new TypeVariablesVariableResolver(variables, generics))[ CD ]
Line_2 $$ public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) -->Line_6 $$ Assert.isTrue(variables.length == generics.length, "Mismatched number of generics specified")[ CD ]
Line_8 $$ for (int i = 0; i < generics.length; i++) -->Line_9 $$ ResolvableType generic = generics[i][ CD ]
Line_2 $$ public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) -->Line_5 $$ TypeVariable<?>[] variables = sourceClass.getTypeParameters()[ CD ]
Line_2 $$ public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) -->Line_8 $$ for (int i = 0; i < generics.length; i++) [ CD ]
Line_2 $$ public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) -->Line_3 $$ Assert.notNull(sourceClass, "Source class must not be null")[ CD ]
Line_13 $$ ParameterizedType syntheticType = new SyntheticParameterizedType(sourceClass, arguments)-->Line_14 $$ return forType(syntheticType, new TypeVariablesVariableResolver(variables, generics))[ FD ]
Line_2 $$ public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) -->Line_4 $$ Assert.notNull(generics, "Generics must not be null")[ CD ]
Line_2 $$ public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) -->Line_5 $$ TypeVariable<?>[] variables = sourceClass.getTypeParameters()[ FD ]
Line_2 $$ public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) -->Line_3 $$ Assert.notNull(sourceClass, "Source class must not be null")[ FD ]
Line_2 $$ public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) -->Line_13 $$ ParameterizedType syntheticType = new SyntheticParameterizedType(sourceClass, arguments)[ CD ]
Line_2 $$ public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) -->Line_4 $$ Assert.notNull(generics, "Generics must not be null")[ FD ]
Line_9 $$ ResolvableType generic = generics[i]-->Line_10 $$ Type argument = (generic != null ? generic.getType() : null)[ FD ]
Line_8 $$ for (int i = 0; i < generics.length; i++) -->Line_11 $$ arguments[i] = (argument != null ? argument : variables[i])[ CD ]
Line_8 $$ for (int i = 0; i < generics.length; i++) -->Line_10 $$ Type argument = (generic != null ? generic.getType() : null)[ CD ]
Line_2 $$ public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) -->Line_7 $$ Type[] arguments = new Type[generics.length][ CD ]
