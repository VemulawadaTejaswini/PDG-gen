Line_3 $$ URI location-->Line_10 $$ if (location.getScheme().equals("jar")) [ FD ]
Line_5 $$ location = resource.toURI()-->Line_6 $$ String path = location.getPath()[ FD ]
Line_2 $$ public static File getClasspathForResource(URL resource, String name) -->Line_5 $$ location = resource.toURI()[ FD ]
Line_6 $$ String path = location.getPath()-->Line_9 $$ return new File(path.substring(0, path.length() - (name.length() + 1)))[ FD ]
Line_3 $$ URI location-->Line_6 $$ String path = location.getPath()[ FD ]
Line_10 $$ if (location.getScheme().equals("jar")) -->Line_13 $$ if (pos > 0) [ CD ]
Line_3 $$ URI location-->Line_5 $$ location = resource.toURI()[ FD ]
Line_5 $$ location = resource.toURI()-->Line_7 $$ if (location.getScheme().equals("file")) [ FD ]
Line_11 $$ String schemeSpecificPart = location.getRawSchemeSpecificPart()-->Line_12 $$ int pos = schemeSpecificPart.indexOf("!")[ FD ]
Line_7 $$ if (location.getScheme().equals("file")) -->Line_9 $$ return new File(path.substring(0, path.length() - (name.length() + 1)))[ CD ]
Line_16 $$ if (jarFile.getScheme().equals("file")) -->Line_17 $$ return new File(jarFile.getPath())[ CD ]
Line_3 $$ URI location-->Line_7 $$ if (location.getScheme().equals("file")) [ FD ]
Line_2 $$ public static File getClasspathForResource(URL resource, String name) -->Line_9 $$ return new File(path.substring(0, path.length() - (name.length() + 1)))[ FD ]
Line_10 $$ if (location.getScheme().equals("jar")) -->Line_11 $$ String schemeSpecificPart = location.getRawSchemeSpecificPart()[ CD ]
Line_6 $$ String path = location.getPath()-->Line_8 $$ assert path.endsWith("/" + name)[ FD ]
Line_7 $$ if (location.getScheme().equals("file")) -->Line_10 $$ if (location.getScheme().equals("jar")) [ CD ]
Line_3 $$ URI location-->Line_24 $$ throw new GradleException(String.format("Cannot determine classpath for resource '%s' from location '%s'.", name, location))[ FD ]
Line_2 $$ public static File getClasspathForResource(URL resource, String name) -->Line_24 $$ throw new GradleException(String.format("Cannot determine classpath for resource '%s' from location '%s'.", name, location))[ FD ]
Line_11 $$ String schemeSpecificPart = location.getRawSchemeSpecificPart()-->Line_14 $$ assert schemeSpecificPart.substring(pos + 1).equals("/" + name)[ FD ]
Line_5 $$ location = resource.toURI()-->Line_24 $$ throw new GradleException(String.format("Cannot determine classpath for resource '%s' from location '%s'.", name, location))[ FD ]
Line_5 $$ location = resource.toURI()-->Line_11 $$ String schemeSpecificPart = location.getRawSchemeSpecificPart()[ FD ]
Line_2 $$ public static File getClasspathForResource(URL resource, String name) -->Line_3 $$ URI location[ CD ]
Line_3 $$ URI location-->Line_11 $$ String schemeSpecificPart = location.getRawSchemeSpecificPart()[ FD ]
Line_12 $$ int pos = schemeSpecificPart.indexOf("!")-->Line_15 $$ URI jarFile = new URI(schemeSpecificPart.substring(0, pos))[ FD ]
Line_13 $$ if (pos > 0) -->Line_16 $$ if (jarFile.getScheme().equals("file")) [ CD ]
Line_12 $$ int pos = schemeSpecificPart.indexOf("!")-->Line_13 $$ if (pos > 0) [ FD ]
Line_5 $$ location = resource.toURI()-->Line_10 $$ if (location.getScheme().equals("jar")) [ FD ]
Line_15 $$ URI jarFile = new URI(schemeSpecificPart.substring(0, pos))-->Line_16 $$ if (jarFile.getScheme().equals("file")) [ FD ]
Line_13 $$ if (pos > 0) -->Line_15 $$ URI jarFile = new URI(schemeSpecificPart.substring(0, pos))[ CD ]
Line_11 $$ String schemeSpecificPart = location.getRawSchemeSpecificPart()-->Line_15 $$ URI jarFile = new URI(schemeSpecificPart.substring(0, pos))[ FD ]
Line_15 $$ URI jarFile = new URI(schemeSpecificPart.substring(0, pos))-->Line_17 $$ return new File(jarFile.getPath())[ FD ]
Line_10 $$ if (location.getScheme().equals("jar")) -->Line_12 $$ int pos = schemeSpecificPart.indexOf("!")[ CD ]
