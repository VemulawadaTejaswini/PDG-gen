Line_12 $$ final OutputStream processInput = processHandler.getProcessInput()-->Line_16 $$ processInput.write(SUBSTITUTE)[ FD ]
Line_15 $$ if (SystemInfo.isWindows && needEOFMarker) -->Line_19 $$ processInput.close()[ CD ]
Line_2 $$ public static ProcessOutput getProcessOutput(@NotNull GeneralCommandLine cmd, @Nullable String homePath, @Nullable @NonNls Map<String, String> extraEnv, int timeout, @Nullable byte[] stdin, boolean needEOFMarker) -->Line_3 $$ if (homePath == null || !new File(homePath).exists()) [ CD ]
Line_2 $$ public static ProcessOutput getProcessOutput(@NotNull GeneralCommandLine cmd, @Nullable String homePath, @Nullable @NonNls Map<String, String> extraEnv, int timeout, @Nullable byte[] stdin, boolean needEOFMarker) -->Line_6 $$ final Map<String, String> systemEnv = System.getenv()[ CD ]
Line_10 $$ final CapturingProcessHandler processHandler = new CapturingProcessHandler(commandLine)-->Line_22 $$ return processHandler.runProcess(timeout)[ FD ]
Line_11 $$ if (stdin != null) -->Line_15 $$ if (SystemInfo.isWindows && needEOFMarker) [ CD ]
Line_6 $$ final Map<String, String> systemEnv = System.getenv()-->Line_7 $$ final Map<String, String> env = extraEnv != null ? mergeEnvVariables(systemEnv, extraEnv) : systemEnv[ FD ]
Line_2 $$ public static ProcessOutput getProcessOutput(@NotNull GeneralCommandLine cmd, @Nullable String homePath, @Nullable @NonNls Map<String, String> extraEnv, int timeout, @Nullable byte[] stdin, boolean needEOFMarker) -->Line_9 $$ GeneralCommandLine commandLine = cmd.withWorkDirectory(homePath).withEnvironment(env)[ FD ]
Line_2 $$ public static ProcessOutput getProcessOutput(@NotNull GeneralCommandLine cmd, @Nullable String homePath, @Nullable @NonNls Map<String, String> extraEnv, int timeout, @Nullable byte[] stdin, boolean needEOFMarker) -->Line_7 $$ final Map<String, String> env = extraEnv != null ? mergeEnvVariables(systemEnv, extraEnv) : systemEnv[ CD ]
Line_15 $$ if (SystemInfo.isWindows && needEOFMarker) -->Line_16 $$ processInput.write(SUBSTITUTE)[ CD ]
Line_12 $$ final OutputStream processInput = processHandler.getProcessInput()-->Line_19 $$ processInput.close()[ FD ]
Line_12 $$ final OutputStream processInput = processHandler.getProcessInput()-->Line_17 $$ processInput.flush()[ FD ]
Line_3 $$ if (homePath == null || !new File(homePath).exists()) -->Line_4 $$ return new ProcessOutput()[ CD ]
Line_11 $$ if (stdin != null) -->Line_12 $$ final OutputStream processInput = processHandler.getProcessInput()[ CD ]
Line_15 $$ if (SystemInfo.isWindows && needEOFMarker) -->Line_17 $$ processInput.flush()[ CD ]
Line_2 $$ public static ProcessOutput getProcessOutput(@NotNull GeneralCommandLine cmd, @Nullable String homePath, @Nullable @NonNls Map<String, String> extraEnv, int timeout, @Nullable byte[] stdin, boolean needEOFMarker) -->Line_11 $$ if (stdin != null) [ FD ]
Line_11 $$ if (stdin != null) -->Line_14 $$ processInput.write(stdin)[ CD ]
Line_2 $$ public static ProcessOutput getProcessOutput(@NotNull GeneralCommandLine cmd, @Nullable String homePath, @Nullable @NonNls Map<String, String> extraEnv, int timeout, @Nullable byte[] stdin, boolean needEOFMarker) -->Line_7 $$ final Map<String, String> env = extraEnv != null ? mergeEnvVariables(systemEnv, extraEnv) : systemEnv[ FD ]
Line_2 $$ public static ProcessOutput getProcessOutput(@NotNull GeneralCommandLine cmd, @Nullable String homePath, @Nullable @NonNls Map<String, String> extraEnv, int timeout, @Nullable byte[] stdin, boolean needEOFMarker) -->Line_14 $$ processInput.write(stdin)[ FD ]
Line_12 $$ final OutputStream processInput = processHandler.getProcessInput()-->Line_14 $$ processInput.write(stdin)[ FD ]
Line_10 $$ final CapturingProcessHandler processHandler = new CapturingProcessHandler(commandLine)-->Line_12 $$ final OutputStream processInput = processHandler.getProcessInput()[ FD ]
Line_2 $$ public static ProcessOutput getProcessOutput(@NotNull GeneralCommandLine cmd, @Nullable String homePath, @Nullable @NonNls Map<String, String> extraEnv, int timeout, @Nullable byte[] stdin, boolean needEOFMarker) -->Line_15 $$ if (SystemInfo.isWindows && needEOFMarker) [ FD ]
Line_7 $$ final Map<String, String> env = extraEnv != null ? mergeEnvVariables(systemEnv, extraEnv) : systemEnv-->Line_9 $$ GeneralCommandLine commandLine = cmd.withWorkDirectory(homePath).withEnvironment(env)[ FD ]
Line_2 $$ public static ProcessOutput getProcessOutput(@NotNull GeneralCommandLine cmd, @Nullable String homePath, @Nullable @NonNls Map<String, String> extraEnv, int timeout, @Nullable byte[] stdin, boolean needEOFMarker) -->Line_22 $$ return processHandler.runProcess(timeout)[ FD ]
