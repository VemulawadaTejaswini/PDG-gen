Line_6 $$ final OutputStream logStream = getInputLogStream()-->Line_7 $$ logStream.write(result)[ FD ]
Line_22 $$ if (len == 0)-->Line_23 $$ return 0[ CD ]
Line_2 $$ public InputStream createLoggingInputStream(final InputStream inputStream) -->Line_5 $$ final int result = inputStream.read()[ FD ]
Line_3 $$ return new InputStream() -->Line_5 $$ final int result = inputStream.read()[ CD ]
Line_15 $$ if (myCloseCount == 2 && myLogOutput != null) -->Line_16 $$ myLogOutput.close()[ CD ]
Line_3 $$ return new InputStream() -->Line_22 $$ if (len == 0)[ FD ]
Line_3 $$ return new InputStream() -->Line_7 $$ logStream.write(result)[ CD ]
Line_5 $$ final int result = inputStream.read()-->Line_8 $$ if (result == '\n') [ FD ]
Line_3 $$ return new InputStream() -->Line_27 $$ b[off] = (byte) read[ CD ]
Line_8 $$ if (result == '\n') -->Line_9 $$ logStream.flush()[ CD ]
Line_3 $$ return new InputStream() -->Line_11 $$ return result[ CD ]
Line_3 $$ return new InputStream() -->Line_22 $$ if (len == 0)[ CD ]
Line_2 $$ public InputStream createLoggingInputStream(final InputStream inputStream) -->Line_3 $$ return new InputStream() [ CD ]
Line_6 $$ final OutputStream logStream = getInputLogStream()-->Line_9 $$ logStream.flush()[ FD ]
Line_5 $$ final int result = inputStream.read()-->Line_7 $$ logStream.write(result)[ FD ]
Line_3 $$ return new InputStream() -->Line_15 $$ if (myCloseCount == 2 && myLogOutput != null) [ CD ]
Line_3 $$ return new InputStream() -->Line_25 $$ if (read == -1)[ CD ]
Line_3 $$ return new InputStream() -->Line_24 $$ final int read = read()[ CD ]
Line_25 $$ if (read == -1)-->Line_26 $$ return -1[ CD ]
Line_3 $$ return new InputStream() -->Line_6 $$ final OutputStream logStream = getInputLogStream()[ CD ]
Line_24 $$ final int read = read()-->Line_25 $$ if (read == -1)[ FD ]
Line_3 $$ return new InputStream() -->Line_28 $$ return 1[ CD ]
Line_3 $$ return new InputStream() -->Line_8 $$ if (result == '\n') [ CD ]
