Line_10 $$ while (length > 0) -->Line_13 $$ length -= count[ CD ]
Line_13 $$ length -= count-->Line_10 $$ while (length > 0) [ FD ]
Line_8 $$ final OutputStream outputStream = connectionStreams.getOutputStream()-->Line_14 $$ outputStream.write(chunk, 0, count)[ FD ]
Line_12 $$ final int count = bis.read(chunk, 0, bytesToRead)-->Line_14 $$ outputStream.write(chunk, 0, count)[ FD ]
Line_6 $$ final BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file))-->Line_19 $$ bis.close()[ FD ]
Line_8 $$ final OutputStream outputStream = connectionStreams.getOutputStream()-->Line_16 $$ outputStream.flush()[ FD ]
Line_3 $$ final File file = cvsFileSystem.getLocalFileSystem().getFile(fileObject)-->Line_4 $$ long length = file.length()[ FD ]
Line_12 $$ final int count = bis.read(chunk, 0, bytesToRead)-->Line_13 $$ length -= count[ FD ]
Line_10 $$ while (length > 0) -->Line_12 $$ final int count = bis.read(chunk, 0, bytesToRead)[ CD ]
Line_2 $$ public void transmitBinaryFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_6 $$ final BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file))[ CD ]
Line_10 $$ while (length > 0) -->Line_11 $$ final int bytesToRead = (length >= CHUNK_SIZE) ? CHUNK_SIZE : (int) length[ CD ]
Line_2 $$ public void transmitBinaryFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_5 $$ writeLengthString(connectionStreams.getLoggedWriter(), length)[ CD ]
Line_11 $$ final int bytesToRead = (length >= CHUNK_SIZE) ? CHUNK_SIZE : (int) length-->Line_12 $$ final int count = bis.read(chunk, 0, bytesToRead)[ FD ]
Line_4 $$ long length = file.length()-->Line_10 $$ while (length > 0) [ FD ]
Line_6 $$ final BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file))-->Line_12 $$ final int count = bis.read(chunk, 0, bytesToRead)[ FD ]
Line_2 $$ public void transmitBinaryFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_3 $$ final File file = cvsFileSystem.getLocalFileSystem().getFile(fileObject)[ CD ]
Line_2 $$ public void transmitBinaryFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_3 $$ final File file = cvsFileSystem.getLocalFileSystem().getFile(fileObject)[ FD ]
Line_4 $$ long length = file.length()-->Line_5 $$ writeLengthString(connectionStreams.getLoggedWriter(), length)[ FD ]
Line_2 $$ public void transmitBinaryFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_8 $$ final OutputStream outputStream = connectionStreams.getOutputStream()[ FD ]
Line_4 $$ long length = file.length()-->Line_13 $$ length -= count[ FD ]
Line_2 $$ public void transmitBinaryFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_4 $$ long length = file.length()[ CD ]
Line_9 $$ final byte[] chunk = new byte[CHUNK_SIZE]-->Line_12 $$ final int count = bis.read(chunk, 0, bytesToRead)[ FD ]
Line_2 $$ public void transmitBinaryFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_5 $$ writeLengthString(connectionStreams.getLoggedWriter(), length)[ FD ]
Line_10 $$ while (length > 0) -->Line_14 $$ outputStream.write(chunk, 0, count)[ CD ]
Line_9 $$ final byte[] chunk = new byte[CHUNK_SIZE]-->Line_14 $$ outputStream.write(chunk, 0, count)[ FD ]
