Line_2 $$ private static void dump(String expressionText, String name, byte[] bytecode) -->Line_4 $$ String dir = (nameToUse.indexOf('/') != -1 ? nameToUse.substring(0, nameToUse.lastIndexOf('/')) : "")[ CD ]
Line_2 $$ private static void dump(String expressionText, String name, byte[] bytecode) -->Line_3 $$ String nameToUse = name.replace('.', '/')[ CD ]
Line_12 $$ if (logger.isDebugEnabled()) -->Line_13 $$ logger.debug("Expression '" + expressionText + "' compiled code dumped to " + dumpLocation)[ CD ]
Line_3 $$ String nameToUse = name.replace('.', '/')-->Line_4 $$ String dir = (nameToUse.indexOf('/') != -1 ? nameToUse.substring(0, nameToUse.lastIndexOf('/')) : "")[ FD ]
Line_5 $$ String dumpLocation = null-->Line_8 $$ dumpLocation = tempFile + File.separator + nameToUse + ".class"[ FD ]
Line_16 $$ FileOutputStream fos = new FileOutputStream(f)-->Line_19 $$ fos.close()[ FD ]
Line_16 $$ FileOutputStream fos = new FileOutputStream(f)-->Line_17 $$ fos.write(bytecode)[ FD ]
Line_2 $$ private static void dump(String expressionText, String name, byte[] bytecode) -->Line_3 $$ String nameToUse = name.replace('.', '/')[ FD ]
Line_10 $$ File f = new File(tempFile, dir)-->Line_11 $$ f.mkdirs()[ FD ]
Line_10 $$ File f = new File(tempFile, dir)-->Line_15 $$ f = new File(dumpLocation)[ FD ]
Line_2 $$ private static void dump(String expressionText, String name, byte[] bytecode) -->Line_5 $$ String dumpLocation = null[ CD ]
Line_16 $$ FileOutputStream fos = new FileOutputStream(f)-->Line_18 $$ fos.flush()[ FD ]
Line_7 $$ File tempFile = File.createTempFile("tmp", null)-->Line_9 $$ tempFile.delete()[ FD ]
Line_2 $$ private static void dump(String expressionText, String name, byte[] bytecode) -->Line_17 $$ fos.write(bytecode)[ FD ]
