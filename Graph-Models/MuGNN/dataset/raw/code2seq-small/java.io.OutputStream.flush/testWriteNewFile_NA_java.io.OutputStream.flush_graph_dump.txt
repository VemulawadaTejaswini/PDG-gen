Line_2 $$ public void testWriteNewFile() throws IOException -->Line_9 $$ assertTrue(DST_FILE.exists())[ CD ]
Line_2 $$ public void testWriteNewFile() throws IOException -->Line_11 $$ assertEquals(TEST_STRING, readBackData)[ CD ]
Line_2 $$ public void testWriteNewFile() throws IOException -->Line_8 $$ fos.close()[ CD ]
Line_2 $$ public void testWriteNewFile() throws IOException -->Line_10 $$ String readBackData = DFSTestUtil.readFile(DST_FILE)[ CD ]
Line_3 $$ OutputStream fos = new AtomicFileOutputStream(DST_FILE)-->Line_6 $$ fos.flush()[ FD ]
Line_2 $$ public void testWriteNewFile() throws IOException -->Line_3 $$ OutputStream fos = new AtomicFileOutputStream(DST_FILE)[ CD ]
Line_2 $$ public void testWriteNewFile() throws IOException -->Line_6 $$ fos.flush()[ CD ]
Line_2 $$ public void testWriteNewFile() throws IOException -->Line_5 $$ fos.write(TEST_STRING.getBytes())[ CD ]
Line_3 $$ OutputStream fos = new AtomicFileOutputStream(DST_FILE)-->Line_5 $$ fos.write(TEST_STRING.getBytes())[ FD ]
Line_2 $$ public void testWriteNewFile() throws IOException -->Line_7 $$ assertFalse(DST_FILE.exists())[ CD ]
Line_10 $$ String readBackData = DFSTestUtil.readFile(DST_FILE)-->Line_11 $$ assertEquals(TEST_STRING, readBackData)[ FD ]
Line_3 $$ OutputStream fos = new AtomicFileOutputStream(DST_FILE)-->Line_8 $$ fos.close()[ FD ]
Line_2 $$ public void testWriteNewFile() throws IOException -->Line_4 $$ assertFalse(DST_FILE.exists())[ CD ]
