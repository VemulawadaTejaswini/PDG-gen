Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_8 $$ if (message != null) [ CD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_12 $$ proto.writeDelimitedTo(out)[ FD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_6 $$ builder.setPayload(ByteString.copyFrom(payload))[ FD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_8 $$ if (message != null) [ FD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_11 $$ DataTransferEncryptorMessageProto proto = builder.build()[ CD ]
Line_3 $$ DataTransferEncryptorMessageProto.Builder builder = DataTransferEncryptorMessageProto.newBuilder()-->Line_9 $$ builder.setMessage(message)[ FD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_4 $$ builder.setStatus(status)[ FD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_5 $$ if (payload != null) [ CD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_13 $$ out.flush()[ FD ]
Line_3 $$ DataTransferEncryptorMessageProto.Builder builder = DataTransferEncryptorMessageProto.newBuilder()-->Line_6 $$ builder.setPayload(ByteString.copyFrom(payload))[ FD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_9 $$ builder.setMessage(message)[ FD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_4 $$ builder.setStatus(status)[ CD ]
Line_3 $$ DataTransferEncryptorMessageProto.Builder builder = DataTransferEncryptorMessageProto.newBuilder()-->Line_4 $$ builder.setStatus(status)[ FD ]
Line_5 $$ if (payload != null) -->Line_6 $$ builder.setPayload(ByteString.copyFrom(payload))[ CD ]
Line_11 $$ DataTransferEncryptorMessageProto proto = builder.build()-->Line_12 $$ proto.writeDelimitedTo(out)[ FD ]
Line_8 $$ if (message != null) -->Line_9 $$ builder.setMessage(message)[ CD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_3 $$ DataTransferEncryptorMessageProto.Builder builder = DataTransferEncryptorMessageProto.newBuilder()[ CD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_12 $$ proto.writeDelimitedTo(out)[ CD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_5 $$ if (payload != null) [ FD ]
Line_3 $$ DataTransferEncryptorMessageProto.Builder builder = DataTransferEncryptorMessageProto.newBuilder()-->Line_11 $$ DataTransferEncryptorMessageProto proto = builder.build()[ FD ]
Line_2 $$ public static void sendSaslMessage(OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message) throws IOException -->Line_13 $$ out.flush()[ CD ]
