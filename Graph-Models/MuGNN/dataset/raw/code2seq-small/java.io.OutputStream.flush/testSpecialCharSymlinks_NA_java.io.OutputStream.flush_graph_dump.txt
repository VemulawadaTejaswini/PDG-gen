Line_3 $$ File shellFile = null-->Line_12 $$ FileUtil.setExecutable(shellFile, true)[ FD ]
Line_20 $$ List<String> commands = new ArrayList<String>()-->Line_26 $$ commands.add("/bin/sh ./\\\"" + badSymlink + "\\\"")[ FD ]
Line_32 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] -->Line_34 $$ assertEquals(shexc.getExitCode(), 0)[ FD ]
Line_15 $$ Map<Path, List<String>> resources = new HashMap<Path, List<String>>()-->Line_28 $$ ContainerLaunch.writeLaunchEnv(fos, env, resources, commands)[ FD ]
Line_41 $$ if (tempFile != null && tempFile.exists()) -->Line_42 $$ tempFile.delete()[ CD ]
Line_3 $$ File shellFile = null-->Line_8 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")[ FD ]
Line_20 $$ List<String> commands = new ArrayList<String>()-->Line_24 $$ commands.add("\"" + badSymlink + "\"")[ FD ]
Line_2 $$ public void testSpecialCharSymlinks() throws IOException -->Line_6 $$ File symLinkFile = null[ CD ]
Line_2 $$ public void testSpecialCharSymlinks() throws IOException -->Line_4 $$ File tempFile = null[ CD ]
Line_5 $$ String badSymlink = Shell.WINDOWS ? "foo@zz_#!-+bar.cmd" : "foo@zz%_#*&!-+= bar()"-->Line_17 $$ resources.put(path, Arrays.asList(badSymlink))[ FD ]
Line_4 $$ File tempFile = null-->Line_32 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] [ FD ]
Line_21 $$ if (Shell.WINDOWS) -->Line_26 $$ commands.add("/bin/sh ./\\\"" + badSymlink + "\\\"")[ CD ]
Line_3 $$ File shellFile = null-->Line_39 $$ shellFile.delete()[ FD ]
Line_18 $$ FileOutputStream fos = new FileOutputStream(tempFile)-->Line_29 $$ fos.flush()[ FD ]
Line_6 $$ File symLinkFile = null-->Line_44 $$ if (symLinkFile != null && symLinkFile.exists()) [ FD ]
Line_32 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] -->Line_33 $$ shexc.execute()[ FD ]
Line_44 $$ if (symLinkFile != null && symLinkFile.exists()) -->Line_45 $$ symLinkFile.delete()[ CD ]
Line_9 $$ tempFile = Shell.appendScriptExtension(tmpDir, "temp")-->Line_32 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] [ FD ]
Line_3 $$ File shellFile = null-->Line_38 $$ if (shellFile != null && shellFile.exists()) [ FD ]
Line_21 $$ if (Shell.WINDOWS) -->Line_23 $$ commands.add("/c")[ CD ]
Line_20 $$ List<String> commands = new ArrayList<String>()-->Line_23 $$ commands.add("/c")[ FD ]
Line_36 $$ symLinkFile = new File(tmpDir, badSymlink)-->Line_44 $$ if (symLinkFile != null && symLinkFile.exists()) [ FD ]
Line_15 $$ Map<Path, List<String>> resources = new HashMap<Path, List<String>>()-->Line_17 $$ resources.put(path, Arrays.asList(badSymlink))[ FD ]
Line_8 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")-->Line_12 $$ FileUtil.setExecutable(shellFile, true)[ FD ]
Line_2 $$ public void testSpecialCharSymlinks() throws IOException -->Line_3 $$ File shellFile = null[ CD ]
Line_4 $$ File tempFile = null-->Line_9 $$ tempFile = Shell.appendScriptExtension(tmpDir, "temp")[ FD ]
Line_11 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(shellFile))-->Line_13 $$ writer.println(timeoutCommand)[ FD ]
Line_20 $$ List<String> commands = new ArrayList<String>()-->Line_28 $$ ContainerLaunch.writeLaunchEnv(fos, env, resources, commands)[ FD ]
Line_8 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")-->Line_16 $$ Path path = new Path(shellFile.getAbsolutePath())[ FD ]
Line_16 $$ Path path = new Path(shellFile.getAbsolutePath())-->Line_17 $$ resources.put(path, Arrays.asList(badSymlink))[ FD ]
Line_4 $$ File tempFile = null-->Line_42 $$ tempFile.delete()[ FD ]
Line_21 $$ if (Shell.WINDOWS) -->Line_24 $$ commands.add("\"" + badSymlink + "\"")[ CD ]
Line_38 $$ if (shellFile != null && shellFile.exists()) -->Line_39 $$ shellFile.delete()[ CD ]
Line_4 $$ File tempFile = null-->Line_41 $$ if (tempFile != null && tempFile.exists()) [ FD ]
Line_6 $$ File symLinkFile = null-->Line_45 $$ symLinkFile.delete()[ FD ]
Line_4 $$ File tempFile = null-->Line_31 $$ FileUtil.setExecutable(tempFile, true)[ FD ]
Line_32 $$ Shell.ShellCommandExecutor shexc = new Shell.ShellCommandExecutor(new String[] -->Line_35 $$ assert (shexc.getOutput().contains("hello"))[ FD ]
Line_3 $$ File shellFile = null-->Line_16 $$ Path path = new Path(shellFile.getAbsolutePath())[ FD ]
Line_9 $$ tempFile = Shell.appendScriptExtension(tmpDir, "temp")-->Line_41 $$ if (tempFile != null && tempFile.exists()) [ FD ]
Line_11 $$ PrintWriter writer = new PrintWriter(new FileOutputStream(shellFile))-->Line_14 $$ writer.close()[ FD ]
Line_19 $$ Map<String, String> env = new HashMap<String, String>()-->Line_28 $$ ContainerLaunch.writeLaunchEnv(fos, env, resources, commands)[ FD ]
Line_18 $$ FileOutputStream fos = new FileOutputStream(tempFile)-->Line_30 $$ fos.close()[ FD ]
Line_9 $$ tempFile = Shell.appendScriptExtension(tmpDir, "temp")-->Line_31 $$ FileUtil.setExecutable(tempFile, true)[ FD ]
Line_21 $$ if (Shell.WINDOWS) -->Line_22 $$ commands.add("cmd")[ CD ]
Line_20 $$ List<String> commands = new ArrayList<String>()-->Line_22 $$ commands.add("cmd")[ FD ]
Line_8 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")-->Line_38 $$ if (shellFile != null && shellFile.exists()) [ FD ]
Line_36 $$ symLinkFile = new File(tmpDir, badSymlink)-->Line_45 $$ symLinkFile.delete()[ FD ]
Line_10 $$ String timeoutCommand = Shell.WINDOWS ? "@echo \"hello\"" : "echo \"hello\""-->Line_13 $$ writer.println(timeoutCommand)[ FD ]
Line_6 $$ File symLinkFile = null-->Line_36 $$ symLinkFile = new File(tmpDir, badSymlink)[ FD ]
Line_18 $$ FileOutputStream fos = new FileOutputStream(tempFile)-->Line_28 $$ ContainerLaunch.writeLaunchEnv(fos, env, resources, commands)[ FD ]
Line_9 $$ tempFile = Shell.appendScriptExtension(tmpDir, "temp")-->Line_42 $$ tempFile.delete()[ FD ]
Line_2 $$ public void testSpecialCharSymlinks() throws IOException -->Line_5 $$ String badSymlink = Shell.WINDOWS ? "foo@zz_#!-+bar.cmd" : "foo@zz%_#*&!-+= bar()"[ CD ]
Line_8 $$ shellFile = Shell.appendScriptExtension(tmpDir, "hello")-->Line_39 $$ shellFile.delete()[ FD ]
