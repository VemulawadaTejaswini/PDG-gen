Line_8 $$ long length = fileToSend.length()-->Line_9 $$ writeLengthString(connectionStreams.getLoggedWriter(), length)[ FD ]
Line_7 $$ final File fileToSend = sendTextFilePreprocessor.getPreprocessedTextFile(file, connectionStreams.getWriterFactory())-->Line_29 $$ sendTextFilePreprocessor.cleanup(fileToSend)[ FD ]
Line_10 $$ BufferedInputStream bis = null-->Line_23 $$ if (bis != null) [ FD ]
Line_13 $$ final OutputStream outputStream = connectionStreams.getOutputStream()-->Line_21 $$ outputStream.flush()[ FD ]
Line_2 $$ public void transmitTextFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_7 $$ final File fileToSend = sendTextFilePreprocessor.getPreprocessedTextFile(file, connectionStreams.getWriterFactory())[ FD ]
Line_14 $$ final byte[] chunk = new byte[CHUNK_SIZE]-->Line_19 $$ outputStream.write(chunk, 0, count)[ FD ]
Line_2 $$ public void transmitTextFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_7 $$ final File fileToSend = sendTextFilePreprocessor.getPreprocessedTextFile(file, connectionStreams.getWriterFactory())[ CD ]
Line_3 $$ final File file = cvsFileSystem.getLocalFileSystem().getFile(fileObject)-->Line_5 $$ throw new FileNotFoundException(SmartCvsSrcBundle.message("file.does.not.exist.error.message", file.getAbsolutePath()))[ FD ]
Line_8 $$ long length = fileToSend.length()-->Line_15 $$ while (length > 0) [ FD ]
Line_17 $$ final int count = bis.read(chunk, 0, bytesToRead)-->Line_18 $$ length -= count[ FD ]
Line_12 $$ bis = new BufferedInputStream(new FileInputStream(fileToSend))-->Line_23 $$ if (bis != null) [ FD ]
Line_2 $$ public void transmitTextFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_4 $$ if (!file.exists()) [ CD ]
Line_2 $$ public void transmitTextFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_3 $$ final File file = cvsFileSystem.getLocalFileSystem().getFile(fileObject)[ CD ]
Line_15 $$ while (length > 0) -->Line_16 $$ final int bytesToRead = (length >= CHUNK_SIZE) ? CHUNK_SIZE : (int) length[ CD ]
Line_7 $$ final File fileToSend = sendTextFilePreprocessor.getPreprocessedTextFile(file, connectionStreams.getWriterFactory())-->Line_8 $$ long length = fileToSend.length()[ FD ]
Line_10 $$ BufferedInputStream bis = null-->Line_17 $$ final int count = bis.read(chunk, 0, bytesToRead)[ FD ]
Line_8 $$ long length = fileToSend.length()-->Line_18 $$ length -= count[ FD ]
Line_3 $$ final File file = cvsFileSystem.getLocalFileSystem().getFile(fileObject)-->Line_4 $$ if (!file.exists()) [ FD ]
Line_16 $$ final int bytesToRead = (length >= CHUNK_SIZE) ? CHUNK_SIZE : (int) length-->Line_17 $$ final int count = bis.read(chunk, 0, bytesToRead)[ FD ]
Line_15 $$ while (length > 0) -->Line_17 $$ final int count = bis.read(chunk, 0, bytesToRead)[ CD ]
Line_18 $$ length -= count-->Line_15 $$ while (length > 0) [ FD ]
Line_3 $$ final File file = cvsFileSystem.getLocalFileSystem().getFile(fileObject)-->Line_7 $$ final File fileToSend = sendTextFilePreprocessor.getPreprocessedTextFile(file, connectionStreams.getWriterFactory())[ FD ]
Line_2 $$ public void transmitTextFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_9 $$ writeLengthString(connectionStreams.getLoggedWriter(), length)[ CD ]
Line_2 $$ public void transmitTextFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_10 $$ BufferedInputStream bis = null[ CD ]
Line_2 $$ public void transmitTextFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_9 $$ writeLengthString(connectionStreams.getLoggedWriter(), length)[ FD ]
Line_15 $$ while (length > 0) -->Line_19 $$ outputStream.write(chunk, 0, count)[ CD ]
Line_2 $$ public void transmitTextFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_8 $$ long length = fileToSend.length()[ CD ]
Line_17 $$ final int count = bis.read(chunk, 0, bytesToRead)-->Line_19 $$ outputStream.write(chunk, 0, count)[ FD ]
Line_2 $$ public void transmitTextFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_3 $$ final File file = cvsFileSystem.getLocalFileSystem().getFile(fileObject)[ FD ]
Line_10 $$ BufferedInputStream bis = null-->Line_25 $$ bis.close()[ FD ]
Line_2 $$ public void transmitTextFile(FileObject fileObject, IConnectionStreams connectionStreams, ICvsFileSystem cvsFileSystem) throws IOException -->Line_13 $$ final OutputStream outputStream = connectionStreams.getOutputStream()[ FD ]
Line_13 $$ final OutputStream outputStream = connectionStreams.getOutputStream()-->Line_19 $$ outputStream.write(chunk, 0, count)[ FD ]
Line_15 $$ while (length > 0) -->Line_18 $$ length -= count[ CD ]
Line_12 $$ bis = new BufferedInputStream(new FileInputStream(fileToSend))-->Line_25 $$ bis.close()[ FD ]
Line_12 $$ bis = new BufferedInputStream(new FileInputStream(fileToSend))-->Line_17 $$ final int count = bis.read(chunk, 0, bytesToRead)[ FD ]
Line_14 $$ final byte[] chunk = new byte[CHUNK_SIZE]-->Line_17 $$ final int count = bis.read(chunk, 0, bytesToRead)[ FD ]
Line_10 $$ BufferedInputStream bis = null-->Line_12 $$ bis = new BufferedInputStream(new FileInputStream(fileToSend))[ FD ]
