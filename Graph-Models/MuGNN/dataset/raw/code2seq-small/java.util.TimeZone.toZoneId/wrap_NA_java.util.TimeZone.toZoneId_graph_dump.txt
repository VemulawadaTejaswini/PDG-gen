Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_17 $$ if (Long.class.isInstance(value)) [ FD ]
Line_3 $$ if (value == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_9 $$ if (Timestamp.class.isInstance(value)) [ FD ]
Line_9 $$ if (Timestamp.class.isInstance(value)) -->Line_10 $$ final Timestamp ts = (Timestamp) value[ CD ]
Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_24 $$ throw unknownWrap(value.getClass())[ FD ]
Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_17 $$ if (Long.class.isInstance(value)) [ CD ]
Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_13 $$ if (Date.class.isInstance(value)) [ CD ]
Line_10 $$ final Timestamp ts = (Timestamp) value-->Line_11 $$ return OffsetDateTime.ofInstant(ts.toInstant(), ZoneId.systemDefault())[ FD ]
Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_13 $$ if (Date.class.isInstance(value)) [ FD ]
Line_13 $$ if (Date.class.isInstance(value)) -->Line_15 $$ return OffsetDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault())[ CD ]
Line_14 $$ final Date date = (Date) value-->Line_15 $$ return OffsetDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault())[ FD ]
Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_20 $$ if (Calendar.class.isInstance(value)) [ FD ]
Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_6 $$ if (OffsetDateTime.class.isInstance(value)) [ FD ]
Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_3 $$ if (value == null) [ CD ]
Line_6 $$ if (OffsetDateTime.class.isInstance(value)) -->Line_7 $$ return (OffsetDateTime) value[ CD ]
Line_17 $$ if (Long.class.isInstance(value)) -->Line_18 $$ return OffsetDateTime.ofInstant(Instant.ofEpochMilli((Long) value), ZoneId.systemDefault())[ CD ]
Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_6 $$ if (OffsetDateTime.class.isInstance(value)) [ CD ]
Line_13 $$ if (Date.class.isInstance(value)) -->Line_14 $$ final Date date = (Date) value[ CD ]
Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_9 $$ if (Timestamp.class.isInstance(value)) [ CD ]
Line_20 $$ if (Calendar.class.isInstance(value)) -->Line_22 $$ return OffsetDateTime.ofInstant(calendar.toInstant(), calendar.getTimeZone().toZoneId())[ CD ]
Line_21 $$ final Calendar calendar = (Calendar) value-->Line_22 $$ return OffsetDateTime.ofInstant(calendar.toInstant(), calendar.getTimeZone().toZoneId())[ FD ]
Line_9 $$ if (Timestamp.class.isInstance(value)) -->Line_11 $$ return OffsetDateTime.ofInstant(ts.toInstant(), ZoneId.systemDefault())[ CD ]
Line_20 $$ if (Calendar.class.isInstance(value)) -->Line_21 $$ final Calendar calendar = (Calendar) value[ CD ]
Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_20 $$ if (Calendar.class.isInstance(value)) [ CD ]
Line_2 $$ public <X> OffsetDateTime wrap(X value, WrapperOptions options) -->Line_3 $$ if (value == null) [ FD ]
