Line_11 $$ final String packageName = pkg.getName()-->Line_18 $$ upgradedPackages.add(packageName)[ FD ]
Line_2 $$ private void upgradeAction() -->Line_4 $$ if (myPackageManagementService != null) [ CD ]
Line_7 $$ for (int row : rows) -->Line_8 $$ final Object packageObj = myPackagesTableModel.getValueAt(row, 0)[ FD ]
Line_5 $$ final Set<String> upgradedPackages = new HashSet<String>()-->Line_22 $$ if (myCurrentlyInstalling.isEmpty() && upgradedPackages.isEmpty() && !myWaitingToUpgrade.isEmpty()) [ FD ]
Line_12 $$ final String currentVersion = pkg.getVersion()-->Line_16 $$ if (isUpdateAvailable(currentVersion, availableVersion)) [ FD ]
Line_10 $$ InstalledPackage pkg = (InstalledPackage) packageObj-->Line_11 $$ final String packageName = pkg.getName()[ FD ]
Line_13 $$ final String availableVersion = (String) myPackagesTableModel.getValueAt(row, 2)-->Line_17 $$ upgradePackage(pkg, availableVersion)[ FD ]
Line_8 $$ final Object packageObj = myPackagesTableModel.getValueAt(row, 0)-->Line_9 $$ if (packageObj instanceof InstalledPackage) [ FD ]
Line_9 $$ if (packageObj instanceof InstalledPackage) -->Line_10 $$ InstalledPackage pkg = (InstalledPackage) packageObj[ CD ]
Line_9 $$ if (packageObj instanceof InstalledPackage) -->Line_11 $$ final String packageName = pkg.getName()[ CD ]
Line_6 $$ final Set<String> packagesShouldBePostponed = getPackagesToPostpone()-->Line_14 $$ if (packagesShouldBePostponed.contains(packageName)) [ FD ]
Line_16 $$ if (isUpdateAvailable(currentVersion, availableVersion)) -->Line_18 $$ upgradedPackages.add(packageName)[ CD ]
Line_9 $$ if (packageObj instanceof InstalledPackage) -->Line_13 $$ final String availableVersion = (String) myPackagesTableModel.getValueAt(row, 2)[ CD ]
Line_10 $$ InstalledPackage pkg = (InstalledPackage) packageObj-->Line_12 $$ final String currentVersion = pkg.getVersion()[ FD ]
Line_11 $$ final String packageName = pkg.getName()-->Line_14 $$ if (packagesShouldBePostponed.contains(packageName)) [ FD ]
Line_22 $$ if (myCurrentlyInstalling.isEmpty() && upgradedPackages.isEmpty() && !myWaitingToUpgrade.isEmpty()) -->Line_23 $$ upgradePostponedPackages()[ CD ]
Line_13 $$ final String availableVersion = (String) myPackagesTableModel.getValueAt(row, 2)-->Line_16 $$ if (isUpdateAvailable(currentVersion, availableVersion)) [ FD ]
Line_9 $$ if (packageObj instanceof InstalledPackage) -->Line_14 $$ if (packagesShouldBePostponed.contains(packageName)) [ CD ]
Line_4 $$ if (myPackageManagementService != null) -->Line_22 $$ if (myCurrentlyInstalling.isEmpty() && upgradedPackages.isEmpty() && !myWaitingToUpgrade.isEmpty()) [ CD ]
Line_4 $$ if (myPackageManagementService != null) -->Line_6 $$ final Set<String> packagesShouldBePostponed = getPackagesToPostpone()[ CD ]
Line_14 $$ if (packagesShouldBePostponed.contains(packageName)) -->Line_15 $$ myWaitingToUpgrade.add((InstalledPackage) packageObj)[ CD ]
Line_10 $$ InstalledPackage pkg = (InstalledPackage) packageObj-->Line_17 $$ upgradePackage(pkg, availableVersion)[ FD ]
Line_4 $$ if (myPackageManagementService != null) -->Line_5 $$ final Set<String> upgradedPackages = new HashSet<String>()[ CD ]
Line_7 $$ for (int row : rows) -->Line_13 $$ final String availableVersion = (String) myPackagesTableModel.getValueAt(row, 2)[ FD ]
Line_14 $$ if (packagesShouldBePostponed.contains(packageName)) -->Line_16 $$ if (isUpdateAvailable(currentVersion, availableVersion)) [ CD ]
Line_9 $$ if (packageObj instanceof InstalledPackage) -->Line_12 $$ final String currentVersion = pkg.getVersion()[ CD ]
Line_2 $$ private void upgradeAction() -->Line_3 $$ final int[] rows = myPackagesTable.getSelectedRows()[ CD ]
Line_5 $$ final Set<String> upgradedPackages = new HashSet<String>()-->Line_18 $$ upgradedPackages.add(packageName)[ FD ]
Line_16 $$ if (isUpdateAvailable(currentVersion, availableVersion)) -->Line_17 $$ upgradePackage(pkg, availableVersion)[ CD ]
