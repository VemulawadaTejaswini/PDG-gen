Line_11 $$ for (Node n = unvisited.poll(); n != null; n = unvisited.poll()) -->Line_13 $$ if (n instanceof RackNode) [ FD ]
Line_13 $$ if (n instanceof RackNode) -->Line_16 $$ if (distance + 1 > maximumDistance) [ CD ]
Line_8 $$ Deque<Integer> distUnvisited = new ArrayDeque<Integer>()-->Line_10 $$ distUnvisited.add(0)[ FD ]
Line_3 $$ if (machineNodes == null) -->Line_31 $$ machineNodes = Collections.unmodifiableSortedSet(mNodes)[ CD ]
Line_4 $$ Node root = getClusterTopology()-->Line_9 $$ unvisited.add(root)[ FD ]
Line_13 $$ if (n instanceof RackNode) -->Line_14 $$ rNodes.add((RackNode) n)[ CD ]
Line_5 $$ SortedSet<MachineNode> mNodes = new TreeSet<MachineNode>()-->Line_15 $$ mNodes.addAll(((RackNode) n).getMachinesInRack())[ FD ]
Line_13 $$ if (n instanceof RackNode) -->Line_19 $$ if (n instanceof MachineNode) [ CD ]
Line_6 $$ SortedSet<RackNode> rNodes = new TreeSet<RackNode>()-->Line_32 $$ rackNodes = Collections.unmodifiableSortedSet(rNodes)[ FD ]
Line_3 $$ if (machineNodes == null) -->Line_5 $$ SortedSet<MachineNode> mNodes = new TreeSet<MachineNode>()[ CD ]
Line_19 $$ if (n instanceof MachineNode) -->Line_20 $$ mNodes.add((MachineNode) n)[ CD ]
Line_3 $$ if (machineNodes == null) -->Line_6 $$ SortedSet<RackNode> rNodes = new TreeSet<RackNode>()[ CD ]
Line_3 $$ if (machineNodes == null) -->Line_7 $$ Deque<Node> unvisited = new ArrayDeque<Node>()[ CD ]
Line_12 $$ int distance = distUnvisited.poll()-->Line_21 $$ if (distance > maximumDistance) [ FD ]
Line_3 $$ if (machineNodes == null) -->Line_32 $$ rackNodes = Collections.unmodifiableSortedSet(rNodes)[ CD ]
Line_6 $$ SortedSet<RackNode> rNodes = new TreeSet<RackNode>()-->Line_14 $$ rNodes.add((RackNode) n)[ FD ]
Line_11 $$ for (Node n = unvisited.poll(); n != null; n = unvisited.poll()) -->Line_13 $$ if (n instanceof RackNode) [ CD ]
Line_11 $$ for (Node n = unvisited.poll(); n != null; n = unvisited.poll()) -->Line_25 $$ for (Node child : n.getChildren()) [ FD ]
Line_11 $$ for (Node n = unvisited.poll(); n != null; n = unvisited.poll()) -->Line_12 $$ int distance = distUnvisited.poll()[ CD ]
Line_3 $$ if (machineNodes == null) -->Line_4 $$ Node root = getClusterTopology()[ CD ]
Line_5 $$ SortedSet<MachineNode> mNodes = new TreeSet<MachineNode>()-->Line_20 $$ mNodes.add((MachineNode) n)[ FD ]
Line_7 $$ Deque<Node> unvisited = new ArrayDeque<Node>()-->Line_9 $$ unvisited.add(root)[ FD ]
Line_2 $$ protected synchronized void parseTopologyTree() -->Line_3 $$ if (machineNodes == null) [ CD ]
Line_3 $$ if (machineNodes == null) -->Line_10 $$ distUnvisited.add(0)[ CD ]
Line_8 $$ Deque<Integer> distUnvisited = new ArrayDeque<Integer>()-->Line_12 $$ int distance = distUnvisited.poll()[ FD ]
Line_3 $$ if (machineNodes == null) -->Line_8 $$ Deque<Integer> distUnvisited = new ArrayDeque<Integer>()[ CD ]
Line_19 $$ if (n instanceof MachineNode) -->Line_21 $$ if (distance > maximumDistance) [ CD ]
Line_3 $$ if (machineNodes == null) -->Line_11 $$ for (Node n = unvisited.poll(); n != null; n = unvisited.poll()) [ CD ]
Line_11 $$ for (Node n = unvisited.poll(); n != null; n = unvisited.poll()) -->Line_19 $$ if (n instanceof MachineNode) [ FD ]
Line_25 $$ for (Node child : n.getChildren()) -->Line_26 $$ unvisited.addFirst(child)[ FD ]
Line_8 $$ Deque<Integer> distUnvisited = new ArrayDeque<Integer>()-->Line_27 $$ distUnvisited.addFirst(distance + 1)[ FD ]
Line_7 $$ Deque<Node> unvisited = new ArrayDeque<Node>()-->Line_11 $$ for (Node n = unvisited.poll(); n != null; n = unvisited.poll()) [ FD ]
Line_13 $$ if (n instanceof RackNode) -->Line_15 $$ mNodes.addAll(((RackNode) n).getMachinesInRack())[ CD ]
Line_5 $$ SortedSet<MachineNode> mNodes = new TreeSet<MachineNode>()-->Line_31 $$ machineNodes = Collections.unmodifiableSortedSet(mNodes)[ FD ]
Line_7 $$ Deque<Node> unvisited = new ArrayDeque<Node>()-->Line_26 $$ unvisited.addFirst(child)[ FD ]
Line_3 $$ if (machineNodes == null) -->Line_9 $$ unvisited.add(root)[ CD ]
