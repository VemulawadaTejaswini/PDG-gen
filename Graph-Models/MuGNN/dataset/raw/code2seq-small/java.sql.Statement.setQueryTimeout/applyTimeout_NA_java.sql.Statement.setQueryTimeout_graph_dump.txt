Line_2 $$ public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException -->Line_3 $$ Assert.notNull(stmt, "No Statement specified")[ FD ]
Line_2 $$ public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException -->Line_4 $$ Assert.notNull(dataSource, "No DataSource specified")[ CD ]
Line_2 $$ public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException -->Line_5 $$ ConnectionHolder holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)[ FD ]
Line_2 $$ public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException -->Line_8 $$ if (timeout >= 0) [ FD ]
Line_2 $$ public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException -->Line_9 $$ stmt.setQueryTimeout(timeout)[ FD ]
Line_5 $$ ConnectionHolder holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)-->Line_7 $$ stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())[ FD ]
Line_2 $$ public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException -->Line_4 $$ Assert.notNull(dataSource, "No DataSource specified")[ FD ]
Line_5 $$ ConnectionHolder holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)-->Line_6 $$ if (holder != null && holder.hasTimeout()) [ FD ]
Line_6 $$ if (holder != null && holder.hasTimeout()) -->Line_7 $$ stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())[ CD ]
Line_2 $$ public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException -->Line_3 $$ Assert.notNull(stmt, "No Statement specified")[ CD ]
Line_6 $$ if (holder != null && holder.hasTimeout()) -->Line_8 $$ if (timeout >= 0) [ CD ]
Line_8 $$ if (timeout >= 0) -->Line_9 $$ stmt.setQueryTimeout(timeout)[ CD ]
Line_2 $$ public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException -->Line_6 $$ if (holder != null && holder.hasTimeout()) [ CD ]
Line_2 $$ public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException -->Line_5 $$ ConnectionHolder holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)[ CD ]
Line_2 $$ public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException -->Line_7 $$ stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())[ FD ]
