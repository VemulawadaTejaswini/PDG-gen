Line_13 $$ while (iterator.hasNext()) -->Line_15 $$ if (myDiffFormat == DiffFormat.UNIFIED) [ CD ]
Line_14 $$ PatchHunk hunk-->Line_18 $$ hunk = readNextHunkContext(iterator)[ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_5 $$ if (!iterator.hasNext())[ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_4 $$ extractFileName(curLine, curPatch, true, myDiffCommandLike && myIndexLike)[ FD ]
Line_3 $$ final TextFilePatch curPatch = mySaveHunks ? new TextFilePatch(null) : new EmptyTextFilePatch()-->Line_22 $$ curPatch.addHunk(hunk)[ FD ]
Line_3 $$ final TextFilePatch curPatch = mySaveHunks ? new TextFilePatch(null) : new EmptyTextFilePatch()-->Line_24 $$ if (curPatch.getBeforeName() == null) [ FD ]
Line_13 $$ while (iterator.hasNext()) -->Line_20 $$ if (hunk == null)[ CD ]
Line_18 $$ hunk = readNextHunkContext(iterator)-->Line_22 $$ curPatch.addHunk(hunk)[ FD ]
Line_3 $$ final TextFilePatch curPatch = mySaveHunks ? new TextFilePatch(null) : new EmptyTextFilePatch()-->Line_25 $$ curPatch.setBeforeName(curPatch.getAfterName())[ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_27 $$ if (curPatch.getAfterName() == null) [ CD ]
Line_15 $$ if (myDiffFormat == DiffFormat.UNIFIED) -->Line_16 $$ hunk = readNextHunkUnified(iterator)[ CD ]
Line_7 $$ curLine = iterator.next()-->Line_9 $$ if (!curLine.startsWith(secondNamePrefix)) [ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_7 $$ curLine = iterator.next()[ CD ]
Line_13 $$ while (iterator.hasNext()) -->Line_22 $$ curPatch.addHunk(hunk)[ CD ]
Line_3 $$ final TextFilePatch curPatch = mySaveHunks ? new TextFilePatch(null) : new EmptyTextFilePatch()-->Line_28 $$ curPatch.setAfterName(curPatch.getBeforeName())[ FD ]
Line_16 $$ hunk = readNextHunkUnified(iterator)-->Line_22 $$ curPatch.addHunk(hunk)[ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_30 $$ return curPatch[ CD ]
Line_3 $$ final TextFilePatch curPatch = mySaveHunks ? new TextFilePatch(null) : new EmptyTextFilePatch()-->Line_27 $$ if (curPatch.getAfterName() == null) [ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_6 $$ throw new PatchSyntaxException(iterator.previousIndex(), "Second file name expected")[ FD ]
Line_18 $$ hunk = readNextHunkContext(iterator)-->Line_20 $$ if (hunk == null)[ FD ]
Line_3 $$ final TextFilePatch curPatch = mySaveHunks ? new TextFilePatch(null) : new EmptyTextFilePatch()-->Line_4 $$ extractFileName(curLine, curPatch, true, myDiffCommandLike && myIndexLike)[ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_12 $$ extractFileName(curLine, curPatch, false, myDiffCommandLike && myIndexLike)[ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_24 $$ if (curPatch.getBeforeName() == null) [ CD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_13 $$ while (iterator.hasNext()) [ CD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_7 $$ curLine = iterator.next()[ FD ]
Line_13 $$ while (iterator.hasNext()) -->Line_14 $$ PatchHunk hunk[ CD ]
Line_16 $$ hunk = readNextHunkUnified(iterator)-->Line_20 $$ if (hunk == null)[ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_18 $$ hunk = readNextHunkContext(iterator)[ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_5 $$ if (!iterator.hasNext())[ CD ]
Line_7 $$ curLine = iterator.next()-->Line_12 $$ extractFileName(curLine, curPatch, false, myDiffCommandLike && myIndexLike)[ FD ]
Line_8 $$ String secondNamePrefix = myDiffFormat == DiffFormat.UNIFIED ? "+++ " : "--- "-->Line_9 $$ if (!curLine.startsWith(secondNamePrefix)) [ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_4 $$ extractFileName(curLine, curPatch, true, myDiffCommandLike && myIndexLike)[ CD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_3 $$ final TextFilePatch curPatch = mySaveHunks ? new TextFilePatch(null) : new EmptyTextFilePatch()[ CD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_9 $$ if (!curLine.startsWith(secondNamePrefix)) [ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_9 $$ if (!curLine.startsWith(secondNamePrefix)) [ CD ]
Line_14 $$ PatchHunk hunk-->Line_16 $$ hunk = readNextHunkUnified(iterator)[ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_12 $$ extractFileName(curLine, curPatch, false, myDiffCommandLike && myIndexLike)[ CD ]
Line_27 $$ if (curPatch.getAfterName() == null) -->Line_28 $$ curPatch.setAfterName(curPatch.getBeforeName())[ CD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_16 $$ hunk = readNextHunkUnified(iterator)[ FD ]
Line_3 $$ final TextFilePatch curPatch = mySaveHunks ? new TextFilePatch(null) : new EmptyTextFilePatch()-->Line_12 $$ extractFileName(curLine, curPatch, false, myDiffCommandLike && myIndexLike)[ FD ]
Line_16 $$ hunk = readNextHunkUnified(iterator)-->Line_18 $$ hunk = readNextHunkContext(iterator)[ FD ]
Line_14 $$ PatchHunk hunk-->Line_22 $$ curPatch.addHunk(hunk)[ FD ]
Line_14 $$ PatchHunk hunk-->Line_20 $$ if (hunk == null)[ FD ]
Line_24 $$ if (curPatch.getBeforeName() == null) -->Line_25 $$ curPatch.setBeforeName(curPatch.getAfterName())[ CD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_8 $$ String secondNamePrefix = myDiffFormat == DiffFormat.UNIFIED ? "+++ " : "--- "[ CD ]
Line_15 $$ if (myDiffFormat == DiffFormat.UNIFIED) -->Line_18 $$ hunk = readNextHunkContext(iterator)[ CD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_10 $$ throw new PatchSyntaxException(iterator.previousIndex(), "Second file name expected")[ FD ]
Line_2 $$ private TextFilePatch readPatch(String curLine, ListIterator<String> iterator) throws PatchSyntaxException -->Line_13 $$ while (iterator.hasNext()) [ FD ]
