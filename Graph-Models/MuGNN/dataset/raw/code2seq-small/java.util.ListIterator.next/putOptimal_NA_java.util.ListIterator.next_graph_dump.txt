Line_2 $$ public void putOptimal(final Key key, final Val val) -->Line_4 $$ if (idx < 0)[ CD ]
Line_7 $$ for (final ListIterator<Key> listIterator = myKeys.listIterator(idx + 1); listIterator.hasNext(); ) -->Line_8 $$ final Key next = listIterator.next()[ CD ]
Line_9 $$ if (myKeysResemblance.process(key, next)) -->Line_10 $$ listIterator.remove()[ CD ]
Line_2 $$ public void putOptimal(final Key key, final Val val) -->Line_3 $$ final int idx = putIfNoParent(key, val)[ CD ]
Line_3 $$ final int idx = putIfNoParent(key, val)-->Line_4 $$ if (idx < 0)[ FD ]
Line_7 $$ for (final ListIterator<Key> listIterator = myKeys.listIterator(idx + 1); listIterator.hasNext(); ) -->Line_9 $$ if (myKeysResemblance.process(key, next)) [ CD ]
Line_8 $$ final Key next = listIterator.next()-->Line_11 $$ myMap.remove(next)[ FD ]
Line_7 $$ for (final ListIterator<Key> listIterator = myKeys.listIterator(idx + 1); listIterator.hasNext(); ) -->Line_8 $$ final Key next = listIterator.next()[ FD ]
Line_2 $$ public void putOptimal(final Key key, final Val val) -->Line_3 $$ final int idx = putIfNoParent(key, val)[ FD ]
Line_7 $$ for (final ListIterator<Key> listIterator = myKeys.listIterator(idx + 1); listIterator.hasNext(); ) -->Line_10 $$ listIterator.remove()[ FD ]
Line_2 $$ public void putOptimal(final Key key, final Val val) -->Line_9 $$ if (myKeysResemblance.process(key, next)) [ FD ]
Line_2 $$ public void putOptimal(final Key key, final Val val) -->Line_6 $$ if (idx + 1 < myKeys.size()) [ CD ]
Line_4 $$ if (idx < 0)-->Line_5 $$ return[ CD ]
Line_6 $$ if (idx + 1 < myKeys.size()) -->Line_7 $$ for (final ListIterator<Key> listIterator = myKeys.listIterator(idx + 1); listIterator.hasNext(); ) [ CD ]
Line_8 $$ final Key next = listIterator.next()-->Line_9 $$ if (myKeysResemblance.process(key, next)) [ FD ]
Line_9 $$ if (myKeysResemblance.process(key, next)) -->Line_11 $$ myMap.remove(next)[ CD ]
