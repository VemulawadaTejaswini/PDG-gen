Line_8 $$ final Set<ConditionInstruction> conditionsToNegate = negation.getCondition().getDependentConditions()-->Line_11 $$ if (conditionsToNegate.contains(mixin.myCondition)) [ FD ]
Line_9 $$ for (ListIterator<Mixin> iterator = type.mixins.listIterator(); iterator.hasNext(); ) -->Line_11 $$ if (conditionsToNegate.contains(mixin.myCondition)) [ CD ]
Line_7 $$ for (NegatingGotoInstruction negation : instruction.getNegatingGotoInstruction()) -->Line_8 $$ final Set<ConditionInstruction> conditionsToNegate = negation.getCondition().getDependentConditions()[ FD ]
Line_9 $$ for (ListIterator<Mixin> iterator = type.mixins.listIterator(); iterator.hasNext(); ) -->Line_10 $$ Mixin mixin = iterator.next()[ FD ]
Line_2 $$ public DFAType negate(@NotNull Instruction instruction) -->Line_3 $$ final DFAType type = new DFAType(primary)[ CD ]
Line_10 $$ Mixin mixin = iterator.next()-->Line_12 $$ iterator.set(mixin.negate())[ FD ]
Line_4 $$ for (Mixin mixin : mixins) -->Line_5 $$ type.mixins.add(mixin)[ FD ]
Line_2 $$ public DFAType negate(@NotNull Instruction instruction) -->Line_16 $$ return type[ CD ]
Line_11 $$ if (conditionsToNegate.contains(mixin.myCondition)) -->Line_12 $$ iterator.set(mixin.negate())[ CD ]
Line_4 $$ for (Mixin mixin : mixins) -->Line_12 $$ iterator.set(mixin.negate())[ FD ]
Line_9 $$ for (ListIterator<Mixin> iterator = type.mixins.listIterator(); iterator.hasNext(); ) -->Line_10 $$ Mixin mixin = iterator.next()[ CD ]
Line_2 $$ public DFAType negate(@NotNull Instruction instruction) -->Line_7 $$ for (NegatingGotoInstruction negation : instruction.getNegatingGotoInstruction()) [ FD ]
Line_9 $$ for (ListIterator<Mixin> iterator = type.mixins.listIterator(); iterator.hasNext(); ) -->Line_12 $$ iterator.set(mixin.negate())[ FD ]
