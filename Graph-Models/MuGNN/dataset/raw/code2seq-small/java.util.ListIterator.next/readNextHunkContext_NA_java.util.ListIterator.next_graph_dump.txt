Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_6 $$ iterator.previous()[ FD ]
Line_28 $$ List<String> afterLines = readContextDiffLines(iterator)-->Line_49 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)[ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_34 $$ int beforeLineIndex = 0[ CD ]
Line_35 $$ int afterLineIndex = 0-->Line_73 $$ afterLineIndex++[ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_3 $$ while (iterator.hasNext()) [ FD ]
Line_48 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)-->Line_61 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLine, PatchLine.Type.REMOVE)[ FD ]
Line_20 $$ List<String> beforeLines = readContextDiffLines(iterator)-->Line_47 $$ while (beforeLineIndex < beforeLines.size() || afterLineIndex < afterLines.size()) [ FD ]
Line_28 $$ List<String> afterLines = readContextDiffLines(iterator)-->Line_71 $$ while (afterLineIndex < afterLines.size() && afterLines.get(afterLineIndex).startsWith("! ")) [ FD ]
Line_35 $$ int afterLineIndex = 0-->Line_65 $$ afterLineIndex++[ FD ]
Line_56 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) -->Line_57 $$ addContextDiffLine(hunk, beforeLine, PatchLine.Type.CONTEXT)[ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_24 $$ Matcher afterMatcher = ourContextAfterHunkStartPattern.matcher(iterator.next())[ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_35 $$ int afterLineIndex = 0[ CD ]
Line_34 $$ int beforeLineIndex = 0-->Line_62 $$ beforeLineIndex++[ FD ]
Line_67 $$ while (beforeLineIndex < beforeLines.size() && beforeLines.get(beforeLineIndex).startsWith("! ")) -->Line_69 $$ beforeLineIndex++[ CD ]
Line_24 $$ Matcher afterMatcher = ourContextAfterHunkStartPattern.matcher(iterator.next())-->Line_32 $$ int endLineAfter = Integer.parseInt(afterMatcher.group(2))[ FD ]
Line_66 $$ if (startsWith(beforeLine, "!") && startsWith(afterLine, "!")) -->Line_71 $$ while (afterLineIndex < afterLines.size() && afterLines.get(afterLineIndex).startsWith("! ")) [ CD ]
Line_28 $$ List<String> afterLines = readContextDiffLines(iterator)-->Line_72 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLines.get(afterLineIndex), PatchLine.Type.ADD)[ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_33 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)[ CD ]
Line_33 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_68 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLines.get(beforeLineIndex), PatchLine.Type.REMOVE)[ FD ]
Line_39 $$ for (String line : afterLines) -->Line_44 $$ hunk.addLine(parsePatchLine(line, 2))[ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_24 $$ Matcher afterMatcher = ourContextAfterHunkStartPattern.matcher(iterator.next())[ FD ]
Line_20 $$ List<String> beforeLines = readContextDiffLines(iterator)-->Line_68 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLines.get(beforeLineIndex), PatchLine.Type.REMOVE)[ FD ]
Line_60 $$ if (startsWith(beforeLine, "-")) -->Line_62 $$ beforeLineIndex++[ CD ]
Line_13 $$ if (!iterator.hasNext()) -->Line_14 $$ return null[ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_21 $$ if (!iterator.hasNext()) [ FD ]
Line_33 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_57 $$ addContextDiffLine(hunk, beforeLine, PatchLine.Type.CONTEXT)[ FD ]
Line_48 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)-->Line_50 $$ if (startsWith(beforeLine, NO_NEWLINE_SIGNATURE) && lastBeforePatchLine != null) [ FD ]
Line_24 $$ Matcher afterMatcher = ourContextAfterHunkStartPattern.matcher(iterator.next())-->Line_25 $$ if (!afterMatcher.matches()) [ FD ]
Line_49 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)-->Line_56 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) [ FD ]
Line_34 $$ int beforeLineIndex = 0-->Line_52 $$ beforeLineIndex++[ FD ]
Line_49 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)-->Line_66 $$ if (startsWith(beforeLine, "!") && startsWith(afterLine, "!")) [ FD ]
Line_34 $$ int beforeLineIndex = 0-->Line_67 $$ while (beforeLineIndex < beforeLines.size() && beforeLines.get(beforeLineIndex).startsWith("! ")) [ FD ]
Line_67 $$ while (beforeLineIndex < beforeLines.size() && beforeLines.get(beforeLineIndex).startsWith("! ")) -->Line_68 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLines.get(beforeLineIndex), PatchLine.Type.REMOVE)[ CD ]
Line_5 $$ if (curLine.startsWith(CONTEXT_FILE_PREFIX)) -->Line_7 $$ return null[ CD ]
Line_48 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)-->Line_56 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) [ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_30 $$ int endLineBefore = Integer.parseInt(beforeMatcher.group(2))[ CD ]
Line_63 $$ if (startsWith(afterLine, "+")) -->Line_64 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLine, PatchLine.Type.ADD)[ CD ]
Line_61 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLine, PatchLine.Type.REMOVE)-->Line_51 $$ lastBeforePatchLine.setSuppressNewLine(true)[ FD ]
Line_33 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_72 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLines.get(afterLineIndex), PatchLine.Type.ADD)[ FD ]
Line_34 $$ int beforeLineIndex = 0-->Line_58 $$ beforeLineIndex++[ FD ]
Line_48 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)-->Line_60 $$ if (startsWith(beforeLine, "-")) [ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_25 $$ if (!afterMatcher.matches()) [ CD ]
Line_71 $$ while (afterLineIndex < afterLines.size() && afterLines.get(afterLineIndex).startsWith("! ")) -->Line_72 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLines.get(afterLineIndex), PatchLine.Type.ADD)[ CD ]
Line_3 $$ while (iterator.hasNext()) -->Line_9 $$ if (curLine.startsWith(CONTEXT_HUNK_PREFIX)) [ CD ]
Line_37 $$ PatchLine lastAfterPatchLine = null-->Line_72 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLines.get(afterLineIndex), PatchLine.Type.ADD)[ FD ]
Line_35 $$ int afterLineIndex = 0-->Line_71 $$ while (afterLineIndex < afterLines.size() && afterLines.get(afterLineIndex).startsWith("! ")) [ FD ]
Line_33 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_40 $$ hunk.addLine(parsePatchLine(line, 2))[ FD ]
Line_47 $$ while (beforeLineIndex < beforeLines.size() || afterLineIndex < afterLines.size()) -->Line_50 $$ if (startsWith(beforeLine, NO_NEWLINE_SIGNATURE) && lastBeforePatchLine != null) [ CD ]
Line_28 $$ List<String> afterLines = readContextDiffLines(iterator)-->Line_47 $$ while (beforeLineIndex < beforeLines.size() || afterLineIndex < afterLines.size()) [ FD ]
Line_34 $$ int beforeLineIndex = 0-->Line_69 $$ beforeLineIndex++[ FD ]
Line_20 $$ List<String> beforeLines = readContextDiffLines(iterator)-->Line_38 $$ if (beforeLines.size() == 0) [ FD ]
Line_36 $$ PatchLine lastBeforePatchLine = null-->Line_51 $$ lastBeforePatchLine.setSuppressNewLine(true)[ FD ]
Line_36 $$ PatchLine lastBeforePatchLine = null-->Line_68 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLines.get(beforeLineIndex), PatchLine.Type.REMOVE)[ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_31 $$ int startLineAfter = Integer.parseInt(afterMatcher.group(1))[ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_20 $$ List<String> beforeLines = readContextDiffLines(iterator)[ CD ]
Line_50 $$ if (startsWith(beforeLine, NO_NEWLINE_SIGNATURE) && lastBeforePatchLine != null) -->Line_52 $$ beforeLineIndex++[ CD ]
Line_35 $$ int afterLineIndex = 0-->Line_72 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLines.get(afterLineIndex), PatchLine.Type.ADD)[ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_20 $$ List<String> beforeLines = readContextDiffLines(iterator)[ FD ]
Line_36 $$ PatchLine lastBeforePatchLine = null-->Line_61 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLine, PatchLine.Type.REMOVE)[ FD ]
Line_61 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLine, PatchLine.Type.REMOVE)-->Line_68 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLines.get(beforeLineIndex), PatchLine.Type.REMOVE)[ FD ]
Line_50 $$ if (startsWith(beforeLine, NO_NEWLINE_SIGNATURE) && lastBeforePatchLine != null) -->Line_53 $$ if (startsWith(afterLine, NO_NEWLINE_SIGNATURE) && lastAfterPatchLine != null) [ CD ]
Line_5 $$ if (curLine.startsWith(CONTEXT_FILE_PREFIX)) -->Line_6 $$ iterator.previous()[ CD ]
Line_33 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_44 $$ hunk.addLine(parsePatchLine(line, 2))[ FD ]
Line_56 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) -->Line_58 $$ beforeLineIndex++[ CD ]
Line_42 $$ if (afterLines.size() == 0) -->Line_47 $$ while (beforeLineIndex < beforeLines.size() || afterLineIndex < afterLines.size()) [ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_4 $$ String curLine = iterator.next()[ FD ]
Line_4 $$ String curLine = iterator.next()-->Line_9 $$ if (curLine.startsWith(CONTEXT_HUNK_PREFIX)) [ FD ]
Line_49 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)-->Line_53 $$ if (startsWith(afterLine, NO_NEWLINE_SIGNATURE) && lastAfterPatchLine != null) [ FD ]
Line_53 $$ if (startsWith(afterLine, NO_NEWLINE_SIGNATURE) && lastAfterPatchLine != null) -->Line_56 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) [ CD ]
Line_56 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) -->Line_59 $$ afterLineIndex++[ CD ]
Line_35 $$ int afterLineIndex = 0-->Line_55 $$ afterLineIndex++[ FD ]
Line_3 $$ while (iterator.hasNext()) -->Line_5 $$ if (curLine.startsWith(CONTEXT_FILE_PREFIX)) [ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_13 $$ if (!iterator.hasNext()) [ CD ]
Line_48 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)-->Line_66 $$ if (startsWith(beforeLine, "!") && startsWith(afterLine, "!")) [ FD ]
Line_35 $$ int afterLineIndex = 0-->Line_49 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)[ FD ]
Line_28 $$ List<String> afterLines = readContextDiffLines(iterator)-->Line_42 $$ if (afterLines.size() == 0) [ FD ]
Line_34 $$ int beforeLineIndex = 0-->Line_48 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)[ FD ]
Line_37 $$ PatchLine lastAfterPatchLine = null-->Line_64 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLine, PatchLine.Type.ADD)[ FD ]
Line_37 $$ PatchLine lastAfterPatchLine = null-->Line_54 $$ lastAfterPatchLine.setSuppressNewLine(true)[ FD ]
Line_16 $$ Matcher beforeMatcher = ourContextBeforeHunkStartPattern.matcher(iterator.next())-->Line_30 $$ int endLineBefore = Integer.parseInt(beforeMatcher.group(2))[ FD ]
Line_53 $$ if (startsWith(afterLine, NO_NEWLINE_SIGNATURE) && lastAfterPatchLine != null) -->Line_54 $$ lastAfterPatchLine.setSuppressNewLine(true)[ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_32 $$ int endLineAfter = Integer.parseInt(afterMatcher.group(2))[ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_26 $$ throw new PatchSyntaxException(iterator.previousIndex(), "Unknown after hunk start syntax")[ FD ]
Line_3 $$ while (iterator.hasNext()) -->Line_4 $$ String curLine = iterator.next()[ CD ]
Line_47 $$ while (beforeLineIndex < beforeLines.size() || afterLineIndex < afterLines.size()) -->Line_49 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)[ CD ]
Line_64 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLine, PatchLine.Type.ADD)-->Line_72 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLines.get(afterLineIndex), PatchLine.Type.ADD)[ FD ]
Line_16 $$ Matcher beforeMatcher = ourContextBeforeHunkStartPattern.matcher(iterator.next())-->Line_29 $$ int startLineBefore = Integer.parseInt(beforeMatcher.group(1))[ FD ]
Line_71 $$ while (afterLineIndex < afterLines.size() && afterLines.get(afterLineIndex).startsWith("! ")) -->Line_73 $$ afterLineIndex++[ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_80 $$ return hunk[ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_29 $$ int startLineBefore = Integer.parseInt(beforeMatcher.group(1))[ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_18 $$ throw new PatchSyntaxException(iterator.previousIndex(), "Unknown before hunk start syntax")[ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_28 $$ List<String> afterLines = readContextDiffLines(iterator)[ FD ]
Line_48 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)-->Line_57 $$ addContextDiffLine(hunk, beforeLine, PatchLine.Type.CONTEXT)[ FD ]
Line_33 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_64 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLine, PatchLine.Type.ADD)[ FD ]
Line_49 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)-->Line_63 $$ if (startsWith(afterLine, "+")) [ FD ]
Line_63 $$ if (startsWith(afterLine, "+")) -->Line_66 $$ if (startsWith(beforeLine, "!") && startsWith(afterLine, "!")) [ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_22 $$ throw new PatchSyntaxException(iterator.previousIndex(), "Missing after hunk")[ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_17 $$ if (!beforeMatcher.matches()) [ CD ]
Line_38 $$ if (beforeLines.size() == 0) -->Line_42 $$ if (afterLines.size() == 0) [ CD ]
Line_20 $$ List<String> beforeLines = readContextDiffLines(iterator)-->Line_48 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)[ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_16 $$ Matcher beforeMatcher = ourContextBeforeHunkStartPattern.matcher(iterator.next())[ FD ]
Line_66 $$ if (startsWith(beforeLine, "!") && startsWith(afterLine, "!")) -->Line_67 $$ while (beforeLineIndex < beforeLines.size() && beforeLines.get(beforeLineIndex).startsWith("! ")) [ CD ]
Line_39 $$ for (String line : afterLines) -->Line_40 $$ hunk.addLine(parsePatchLine(line, 2))[ FD ]
Line_33 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_61 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLine, PatchLine.Type.REMOVE)[ FD ]
Line_60 $$ if (startsWith(beforeLine, "-")) -->Line_61 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLine, PatchLine.Type.REMOVE)[ CD ]
Line_56 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) -->Line_60 $$ if (startsWith(beforeLine, "-")) [ CD ]
Line_49 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)-->Line_64 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLine, PatchLine.Type.ADD)[ FD ]
Line_24 $$ Matcher afterMatcher = ourContextAfterHunkStartPattern.matcher(iterator.next())-->Line_31 $$ int startLineAfter = Integer.parseInt(afterMatcher.group(1))[ FD ]
Line_60 $$ if (startsWith(beforeLine, "-")) -->Line_63 $$ if (startsWith(afterLine, "+")) [ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_36 $$ PatchLine lastBeforePatchLine = null[ CD ]
Line_34 $$ int beforeLineIndex = 0-->Line_68 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLines.get(beforeLineIndex), PatchLine.Type.REMOVE)[ FD ]
Line_50 $$ if (startsWith(beforeLine, NO_NEWLINE_SIGNATURE) && lastBeforePatchLine != null) -->Line_51 $$ lastBeforePatchLine.setSuppressNewLine(true)[ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_38 $$ if (beforeLines.size() == 0) [ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_13 $$ if (!iterator.hasNext()) [ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_28 $$ List<String> afterLines = readContextDiffLines(iterator)[ CD ]
Line_4 $$ String curLine = iterator.next()-->Line_5 $$ if (curLine.startsWith(CONTEXT_FILE_PREFIX)) [ FD ]
Line_53 $$ if (startsWith(afterLine, NO_NEWLINE_SIGNATURE) && lastAfterPatchLine != null) -->Line_55 $$ afterLineIndex++[ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_3 $$ while (iterator.hasNext()) [ CD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_16 $$ Matcher beforeMatcher = ourContextBeforeHunkStartPattern.matcher(iterator.next())[ CD ]
Line_20 $$ List<String> beforeLines = readContextDiffLines(iterator)-->Line_67 $$ while (beforeLineIndex < beforeLines.size() && beforeLines.get(beforeLineIndex).startsWith("! ")) [ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_21 $$ if (!iterator.hasNext()) [ CD ]
Line_16 $$ Matcher beforeMatcher = ourContextBeforeHunkStartPattern.matcher(iterator.next())-->Line_17 $$ if (!beforeMatcher.matches()) [ FD ]
Line_35 $$ int afterLineIndex = 0-->Line_59 $$ afterLineIndex++[ FD ]
Line_2 $$ private PatchHunk readNextHunkContext(ListIterator<String> iterator) throws PatchSyntaxException -->Line_37 $$ PatchLine lastAfterPatchLine = null[ CD ]
Line_63 $$ if (startsWith(afterLine, "+")) -->Line_65 $$ afterLineIndex++[ CD ]
Line_64 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLine, PatchLine.Type.ADD)-->Line_54 $$ lastAfterPatchLine.setSuppressNewLine(true)[ FD ]
Line_47 $$ while (beforeLineIndex < beforeLines.size() || afterLineIndex < afterLines.size()) -->Line_48 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)[ CD ]
