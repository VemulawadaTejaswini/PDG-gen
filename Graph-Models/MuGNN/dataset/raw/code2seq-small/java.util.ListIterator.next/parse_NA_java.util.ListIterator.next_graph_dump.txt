Line_25 $$ final StringBuilder sb = new StringBuilder()-->Line_33 $$ if (sb.length() > 0) [ FD ]
Line_10 $$ while (true) -->Line_25 $$ final StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_3 $$ if (myIgnoreMode) [ CD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_27 $$ while (iterator.hasNext()) [ FD ]
Line_27 $$ while (iterator.hasNext()) -->Line_28 $$ final String line = iterator.next()[ CD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_30 $$ iterator.previous()[ FD ]
Line_20 $$ final String subsystem = header.substring(idxHead + UnifiedDiffWriter.ADD_INFO_HEADER.length()).trim()-->Line_26 $$ myAddMap.put(subsystem, sb)[ FD ]
Line_12 $$ final int idxHead = header.indexOf(UnifiedDiffWriter.ADD_INFO_HEADER)-->Line_13 $$ if (idxHead == -1) [ FD ]
Line_11 $$ final String header = iterator.next()-->Line_12 $$ final int idxHead = header.indexOf(UnifiedDiffWriter.ADD_INFO_HEADER)[ FD ]
Line_6 $$ if (!iterator.hasNext()) -->Line_8 $$ return[ CD ]
Line_13 $$ if (idxHead == -1) -->Line_14 $$ if (myAddMap.isEmpty()) [ CD ]
Line_27 $$ while (iterator.hasNext()) -->Line_36 $$ sb.append(StringUtil.unescapeStringCharacters(line.substring(UnifiedDiffWriter.ADD_INFO_LINE_START.length())))[ CD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_6 $$ if (!iterator.hasNext()) [ CD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_17 $$ iterator.previous()[ FD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_21 $$ if (!iterator.hasNext()) [ FD ]
Line_10 $$ while (true) -->Line_13 $$ if (idxHead == -1) [ CD ]
Line_25 $$ final StringBuilder sb = new StringBuilder()-->Line_36 $$ sb.append(StringUtil.unescapeStringCharacters(line.substring(UnifiedDiffWriter.ADD_INFO_LINE_START.length())))[ FD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_28 $$ final String line = iterator.next()[ FD ]
Line_33 $$ if (sb.length() > 0) -->Line_34 $$ sb.append("\n")[ CD ]
Line_25 $$ final StringBuilder sb = new StringBuilder()-->Line_34 $$ sb.append("\n")[ FD ]
Line_28 $$ final String line = iterator.next()-->Line_29 $$ if (!line.startsWith(UnifiedDiffWriter.ADD_INFO_LINE_START)) [ FD ]
Line_10 $$ while (true) -->Line_12 $$ final int idxHead = header.indexOf(UnifiedDiffWriter.ADD_INFO_HEADER)[ CD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_15 $$ mySyntaxException = new PatchSyntaxException(iterator.previousIndex(), "Empty additional info header")[ FD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_22 $$ mySyntaxException = new PatchSyntaxException(iterator.previousIndex(), "Empty '" + subsystem + "' data section")[ FD ]
Line_10 $$ while (true) -->Line_20 $$ final String subsystem = header.substring(idxHead + UnifiedDiffWriter.ADD_INFO_HEADER.length()).trim()[ CD ]
Line_11 $$ final String header = iterator.next()-->Line_20 $$ final String subsystem = header.substring(idxHead + UnifiedDiffWriter.ADD_INFO_HEADER.length()).trim()[ FD ]
Line_10 $$ while (true) -->Line_11 $$ final String header = iterator.next()[ CD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_6 $$ if (!iterator.hasNext()) [ FD ]
Line_29 $$ if (!line.startsWith(UnifiedDiffWriter.ADD_INFO_LINE_START)) -->Line_30 $$ iterator.previous()[ CD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_7 $$ mySyntaxException = new PatchSyntaxException(iterator.previousIndex(), "Empty additional info header")[ FD ]
Line_13 $$ if (idxHead == -1) -->Line_18 $$ return[ CD ]
Line_27 $$ while (iterator.hasNext()) -->Line_29 $$ if (!line.startsWith(UnifiedDiffWriter.ADD_INFO_LINE_START)) [ CD ]
Line_3 $$ if (myIgnoreMode) -->Line_4 $$ return[ CD ]
Line_21 $$ if (!iterator.hasNext()) -->Line_23 $$ return[ CD ]
Line_28 $$ final String line = iterator.next()-->Line_36 $$ sb.append(StringUtil.unescapeStringCharacters(line.substring(UnifiedDiffWriter.ADD_INFO_LINE_START.length())))[ FD ]
Line_10 $$ while (true) -->Line_26 $$ myAddMap.put(subsystem, sb)[ CD ]
Line_25 $$ final StringBuilder sb = new StringBuilder()-->Line_26 $$ myAddMap.put(subsystem, sb)[ FD ]
Line_27 $$ while (iterator.hasNext()) -->Line_33 $$ if (sb.length() > 0) [ CD ]
Line_13 $$ if (idxHead == -1) -->Line_17 $$ iterator.previous()[ CD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_11 $$ final String header = iterator.next()[ FD ]
Line_10 $$ while (true) -->Line_21 $$ if (!iterator.hasNext()) [ CD ]
Line_10 $$ while (true) -->Line_27 $$ while (iterator.hasNext()) [ CD ]
Line_2 $$ public void parse(String start, ListIterator<String> iterator) -->Line_10 $$ while (true) [ CD ]
