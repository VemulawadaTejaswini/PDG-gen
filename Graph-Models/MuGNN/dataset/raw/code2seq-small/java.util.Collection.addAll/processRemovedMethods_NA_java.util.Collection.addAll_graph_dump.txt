Line_15 $$ if (overridenMethods.size() == 0) -->Line_17 $$ myFuture.affectMethodUsages(m, propagated, m.createUsage(myContext, it.name), state.myAffectedUsages, state.myDependants)[ CD ]
Line_47 $$ final ClassRepr s = myFuture.reprByName(p)-->Line_48 $$ if (s != null) [ FD ]
Line_70 $$ if (sources != null && !myCompiledFiles.containsAll(sources)) -->Line_72 $$ debug("Removed method is not abstract & overrides some abstract method which is not then over-overridden in subclass ", p)[ CD ]
Line_43 $$ if (!m.isAbstract()) -->Line_44 $$ propagated.forEach(new TIntProcedure() [ CD ]
Line_34 $$ for (final Pair<MethodRepr, ClassRepr> p : overridingMethods) -->Line_69 $$ final Collection<File> sources = myClassToSourceFile.get(p)[ FD ]
Line_44 $$ propagated.forEach(new TIntProcedure() -->Line_72 $$ debug("Removed method is not abstract & overrides some abstract method which is not then over-overridden in subclass ", p)[ FD ]
Line_19 $$ boolean clear = true-->Line_27 $$ if (!clear) [ FD ]
Line_56 $$ visited = true-->Line_62 $$ visited = true[ FD ]
Line_48 $$ if (s != null) -->Line_50 $$ overridenInS.addAll(overridenMethods)[ CD ]
Line_11 $$ for (final MethodRepr m : removed) -->Line_43 $$ if (!m.isAbstract()) [ FD ]
Line_44 $$ propagated.forEach(new TIntProcedure() -->Line_46 $$ if (p != it.name) [ FD ]
Line_44 $$ propagated.forEach(new TIntProcedure() -->Line_47 $$ final ClassRepr s = myFuture.reprByName(p)[ FD ]
Line_44 $$ propagated.forEach(new TIntProcedure() -->Line_69 $$ final Collection<File> sources = myClassToSourceFile.get(p)[ FD ]
Line_34 $$ for (final Pair<MethodRepr, ClassRepr> p : overridingMethods) -->Line_47 $$ final ClassRepr s = myFuture.reprByName(p)[ FD ]
Line_27 $$ if (!clear) -->Line_28 $$ debug("No clearly overridden methods found, affecting method usages")[ CD ]
Line_51 $$ boolean allAbstract = true-->Line_64 $$ if (!allAbstract) [ FD ]
Line_48 $$ if (s != null) -->Line_68 $$ if (allAbstract && visited) [ CD ]
Line_46 $$ if (p != it.name) -->Line_48 $$ if (s != null) [ CD ]
Line_2 $$ private void processRemovedMethods(final DiffState state, final ClassRepr.Diff diff, final ClassRepr it) -->Line_85 $$ debug("End of removed methods processing")[ CD ]
Line_14 $$ final TIntHashSet propagated = myFuture.propagateMethodAccess(m, it.name)-->Line_17 $$ myFuture.affectMethodUsages(m, propagated, m.createUsage(myContext, it.name), state.myAffectedUsages, state.myDependants)[ FD ]
Line_2 $$ private void processRemovedMethods(final DiffState state, final ClassRepr.Diff diff, final ClassRepr it) -->Line_10 $$ debug("Processing removed methods:")[ CD ]
Line_62 $$ visited = true-->Line_68 $$ if (allAbstract && visited) [ FD ]
Line_11 $$ for (final MethodRepr m : removed) -->Line_33 $$ myFuture.addOverridingMethods(m, it, MethodRepr.equalByJavaRules(m), overridingMethods, null)[ FD ]
Line_46 $$ if (p != it.name) -->Line_47 $$ final ClassRepr s = myFuture.reprByName(p)[ CD ]
Line_15 $$ if (overridenMethods.size() == 0) -->Line_19 $$ boolean clear = true[ CD ]
Line_48 $$ if (s != null) -->Line_49 $$ final Collection<Pair<MethodRepr, ClassRepr>> overridenInS = myFuture.findOverriddenMethods(m, s)[ CD ]
Line_69 $$ final Collection<File> sources = myClassToSourceFile.get(p)-->Line_71 $$ myAffectedFiles.addAll(sources)[ FD ]
Line_35 $$ final Collection<File> fNames = myClassToSourceFile.get(p.second.name)-->Line_37 $$ myAffectedFiles.addAll(fNames)[ FD ]
Line_36 $$ if (fNames != null) -->Line_37 $$ myAffectedFiles.addAll(fNames)[ CD ]
Line_52 $$ boolean visited = false-->Line_68 $$ if (allAbstract && visited) [ FD ]
Line_21 $$ final MethodRepr mm = overriden.first-->Line_22 $$ if (mm == MOCK_METHOD || !mm.myType.equals(m.myType) || !isEmpty(mm.signature) || !isEmpty(m.signature) || m.isMoreAccessibleThan(mm)) [ FD ]
Line_38 $$ for (File fName : fNames) -->Line_39 $$ debug("Affecting file by overriding: ", fName)[ FD ]
Line_56 $$ visited = true-->Line_68 $$ if (allAbstract && visited) [ FD ]
Line_54 $$ final ClassRepr cc = pp.second-->Line_63 $$ allAbstract = pp.first.isAbstract() || cc.isInterface()[ FD ]
Line_44 $$ propagated.forEach(new TIntProcedure() -->Line_46 $$ if (p != it.name) [ CD ]
Line_34 $$ for (final Pair<MethodRepr, ClassRepr> p : overridingMethods) -->Line_46 $$ if (p != it.name) [ FD ]
Line_52 $$ boolean visited = false-->Line_56 $$ visited = true[ FD ]
Line_47 $$ final ClassRepr s = myFuture.reprByName(p)-->Line_49 $$ final Collection<Pair<MethodRepr, ClassRepr>> overridenInS = myFuture.findOverriddenMethods(m, s)[ FD ]
Line_35 $$ final Collection<File> fNames = myClassToSourceFile.get(p.second.name)-->Line_36 $$ if (fNames != null) [ FD ]
Line_73 $$ for (File source : sources) -->Line_74 $$ debug("Affecting subclass source file ", source)[ FD ]
Line_13 $$ final Collection<Pair<MethodRepr, ClassRepr>> overridenMethods = myFuture.findOverriddenMethods(m, it)-->Line_15 $$ if (overridenMethods.size() == 0) [ FD ]
Line_68 $$ if (allAbstract && visited) -->Line_70 $$ if (sources != null && !myCompiledFiles.containsAll(sources)) [ CD ]
Line_15 $$ if (overridenMethods.size() == 0) -->Line_27 $$ if (!clear) [ CD ]
Line_13 $$ final Collection<Pair<MethodRepr, ClassRepr>> overridenMethods = myFuture.findOverriddenMethods(m, it)-->Line_50 $$ overridenInS.addAll(overridenMethods)[ FD ]
Line_14 $$ final TIntHashSet propagated = myFuture.propagateMethodAccess(m, it.name)-->Line_44 $$ propagated.forEach(new TIntProcedure() [ FD ]
Line_55 $$ if (cc == MOCK_CLASS) -->Line_56 $$ visited = true[ CD ]
Line_3 $$ final Collection<MethodRepr> removed = diff.methods().removed()-->Line_4 $$ if (removed.isEmpty()) [ FD ]
Line_69 $$ final Collection<File> sources = myClassToSourceFile.get(p)-->Line_70 $$ if (sources != null && !myCompiledFiles.containsAll(sources)) [ FD ]
Line_22 $$ if (mm == MOCK_METHOD || !mm.myType.equals(m.myType) || !isEmpty(mm.signature) || !isEmpty(m.signature) || m.isMoreAccessibleThan(mm)) -->Line_23 $$ clear = false[ CD ]
Line_2 $$ private void processRemovedMethods(final DiffState state, final ClassRepr.Diff diff, final ClassRepr it) -->Line_3 $$ final Collection<MethodRepr> removed = diff.methods().removed()[ CD ]
Line_52 $$ boolean visited = false-->Line_62 $$ visited = true[ FD ]
Line_4 $$ if (removed.isEmpty()) -->Line_5 $$ return[ CD ]
Line_51 $$ boolean allAbstract = true-->Line_63 $$ allAbstract = pp.first.isAbstract() || cc.isInterface()[ FD ]
Line_68 $$ if (allAbstract && visited) -->Line_69 $$ final Collection<File> sources = myClassToSourceFile.get(p)[ CD ]
Line_11 $$ for (final MethodRepr m : removed) -->Line_22 $$ if (mm == MOCK_METHOD || !mm.myType.equals(m.myType) || !isEmpty(mm.signature) || !isEmpty(m.signature) || m.isMoreAccessibleThan(mm)) [ FD ]
Line_48 $$ if (s != null) -->Line_52 $$ boolean visited = false[ CD ]
Line_23 $$ clear = false-->Line_27 $$ if (!clear) [ FD ]
Line_2 $$ private void processRemovedMethods(final DiffState state, final ClassRepr.Diff diff, final ClassRepr it) -->Line_4 $$ if (removed.isEmpty()) [ CD ]
Line_2 $$ private void processRemovedMethods(final DiffState state, final ClassRepr.Diff diff, final ClassRepr it) -->Line_33 $$ myFuture.addOverridingMethods(m, it, MethodRepr.equalByJavaRules(m), overridingMethods, null)[ FD ]
Line_63 $$ allAbstract = pp.first.isAbstract() || cc.isInterface()-->Line_64 $$ if (!allAbstract) [ FD ]
Line_11 $$ for (final MethodRepr m : removed) -->Line_29 $$ myFuture.affectMethodUsages(m, propagated, m.createUsage(myContext, it.name), state.myAffectedUsages, state.myDependants)[ FD ]
Line_70 $$ if (sources != null && !myCompiledFiles.containsAll(sources)) -->Line_71 $$ myAffectedFiles.addAll(sources)[ CD ]
Line_34 $$ for (final Pair<MethodRepr, ClassRepr> p : overridingMethods) -->Line_72 $$ debug("Removed method is not abstract & overrides some abstract method which is not then over-overridden in subclass ", p)[ FD ]
Line_11 $$ for (final MethodRepr m : removed) -->Line_13 $$ final Collection<Pair<MethodRepr, ClassRepr>> overridenMethods = myFuture.findOverriddenMethods(m, it)[ FD ]
Line_63 $$ allAbstract = pp.first.isAbstract() || cc.isInterface()-->Line_68 $$ if (allAbstract && visited) [ FD ]
Line_51 $$ boolean allAbstract = true-->Line_68 $$ if (allAbstract && visited) [ FD ]
Line_11 $$ for (final MethodRepr m : removed) -->Line_49 $$ final Collection<Pair<MethodRepr, ClassRepr>> overridenInS = myFuture.findOverriddenMethods(m, s)[ FD ]
Line_15 $$ if (overridenMethods.size() == 0) -->Line_16 $$ debug("No overridden methods found, affecting method usages")[ CD ]
Line_49 $$ final Collection<Pair<MethodRepr, ClassRepr>> overridenInS = myFuture.findOverriddenMethods(m, s)-->Line_50 $$ overridenInS.addAll(overridenMethods)[ FD ]
Line_11 $$ for (final MethodRepr m : removed) -->Line_14 $$ final TIntHashSet propagated = myFuture.propagateMethodAccess(m, it.name)[ FD ]
Line_11 $$ for (final MethodRepr m : removed) -->Line_17 $$ myFuture.affectMethodUsages(m, propagated, m.createUsage(myContext, it.name), state.myAffectedUsages, state.myDependants)[ FD ]
Line_2 $$ private void processRemovedMethods(final DiffState state, final ClassRepr.Diff diff, final ClassRepr it) -->Line_3 $$ final Collection<MethodRepr> removed = diff.methods().removed()[ FD ]
Line_54 $$ final ClassRepr cc = pp.second-->Line_55 $$ if (cc == MOCK_CLASS) [ FD ]
Line_27 $$ if (!clear) -->Line_29 $$ myFuture.affectMethodUsages(m, propagated, m.createUsage(myContext, it.name), state.myAffectedUsages, state.myDependants)[ CD ]
Line_32 $$ final Collection<Pair<MethodRepr, ClassRepr>> overridingMethods = new HashSet<Pair<MethodRepr, ClassRepr>>()-->Line_33 $$ myFuture.addOverridingMethods(m, it, MethodRepr.equalByJavaRules(m), overridingMethods, null)[ FD ]
Line_48 $$ if (s != null) -->Line_51 $$ boolean allAbstract = true[ CD ]
Line_19 $$ boolean clear = true-->Line_23 $$ clear = false[ FD ]
Line_2 $$ private void processRemovedMethods(final DiffState state, final ClassRepr.Diff diff, final ClassRepr it) -->Line_13 $$ final Collection<Pair<MethodRepr, ClassRepr>> overridenMethods = myFuture.findOverriddenMethods(m, it)[ FD ]
Line_14 $$ final TIntHashSet propagated = myFuture.propagateMethodAccess(m, it.name)-->Line_29 $$ myFuture.affectMethodUsages(m, propagated, m.createUsage(myContext, it.name), state.myAffectedUsages, state.myDependants)[ FD ]
Line_44 $$ propagated.forEach(new TIntProcedure() -->Line_80 $$ return true[ CD ]
