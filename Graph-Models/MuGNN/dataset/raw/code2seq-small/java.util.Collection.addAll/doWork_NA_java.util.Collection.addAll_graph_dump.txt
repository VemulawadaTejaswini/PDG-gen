Line_6 $$ final Callbacks.ConstantAffection affection = t.getAffection()-->Line_23 $$ final Collection<File> files = affection.getAffectedFiles()[ FD ]
Line_16 $$ if (!incrementalDecision(t.owner, t.field, affectedFiles, myFilesToCompile, myFilter)) -->Line_17 $$ debug("No luck.")[ CD ]
Line_3 $$ if (!myQueue.isEmpty()) -->Line_4 $$ debug("Starting delayed works.")[ CD ]
Line_24 $$ if (myFilter == null) -->Line_25 $$ affectedFiles.addAll(files)[ CD ]
Line_2 $$ boolean doWork(@NotNull final Collection<File> affectedFiles) -->Line_16 $$ if (!incrementalDecision(t.owner, t.field, affectedFiles, myFilesToCompile, myFilter)) [ FD ]
Line_9 $$ if (!affection.isKnown()) -->Line_24 $$ if (myFilter == null) [ CD ]
Line_9 $$ if (!affection.isKnown()) -->Line_16 $$ if (!incrementalDecision(t.owner, t.field, affectedFiles, myFilesToCompile, myFilter)) [ CD ]
Line_10 $$ if (myConstantSearch != null) -->Line_11 $$ debug("No external dependency information available.")[ CD ]
Line_6 $$ final Callbacks.ConstantAffection affection = t.getAffection()-->Line_9 $$ if (!affection.isKnown()) [ FD ]
Line_9 $$ if (!affection.isKnown()) -->Line_10 $$ if (myConstantSearch != null) [ CD ]
Line_9 $$ if (!affection.isKnown()) -->Line_22 $$ debug("External dependency information retrieved.")[ CD ]
Line_2 $$ boolean doWork(@NotNull final Collection<File> affectedFiles) -->Line_29 $$ affectedFiles.add(file)[ FD ]
Line_3 $$ if (!myQueue.isEmpty()) -->Line_35 $$ debug("End of delayed work, returning true.")[ CD ]
Line_16 $$ if (!incrementalDecision(t.owner, t.field, affectedFiles, myFilesToCompile, myFilter)) -->Line_18 $$ debug("End of delayed work, returning false.")[ CD ]
Line_10 $$ if (myConstantSearch != null) -->Line_13 $$ debug("Constant search service not available.")[ CD ]
Line_27 $$ for (File file : files) -->Line_28 $$ if (myFilter.accept(file)) [ FD ]
Line_9 $$ if (!affection.isKnown()) -->Line_15 $$ debug("Trying to soften non-incremental decision.")[ CD ]
Line_16 $$ if (!incrementalDecision(t.owner, t.field, affectedFiles, myFilesToCompile, myFilter)) -->Line_19 $$ return false[ CD ]
Line_9 $$ if (!affection.isKnown()) -->Line_23 $$ final Collection<File> files = affection.getAffectedFiles()[ CD ]
Line_27 $$ for (File file : files) -->Line_29 $$ affectedFiles.add(file)[ FD ]
Line_2 $$ boolean doWork(@NotNull final Collection<File> affectedFiles) -->Line_37 $$ return true[ CD ]
Line_2 $$ boolean doWork(@NotNull final Collection<File> affectedFiles) -->Line_25 $$ affectedFiles.addAll(files)[ FD ]
Line_2 $$ boolean doWork(@NotNull final Collection<File> affectedFiles) -->Line_3 $$ if (!myQueue.isEmpty()) [ CD ]
Line_28 $$ if (myFilter.accept(file)) -->Line_29 $$ affectedFiles.add(file)[ CD ]
Line_5 $$ for (final Triple t : myQueue) -->Line_6 $$ final Callbacks.ConstantAffection affection = t.getAffection()[ FD ]
Line_23 $$ final Collection<File> files = affection.getAffectedFiles()-->Line_25 $$ affectedFiles.addAll(files)[ FD ]
