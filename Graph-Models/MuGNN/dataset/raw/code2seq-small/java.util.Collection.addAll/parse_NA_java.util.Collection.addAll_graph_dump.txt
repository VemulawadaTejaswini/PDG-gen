Line_107 $$ if (dataCentersStr != null) -->Line_112 $$ option.getDataCenters().addAll(dataCenters)[ CD ]
Line_117 $$ if (hostsStr != null) -->Line_119 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_90 $$ if (incremental)-->Line_91 $$ logger.warn("Incremental repair can't be requested with subrange repair " + "because each subrange repair would generate an anti-compacted table. " + "The repair will occur but without anti-compaction.")[ CD ]
Line_92 $$ StringTokenizer tokenizer = new StringTokenizer(rangesStr, ",")-->Line_110 $$ dataCenters.add(tokenizer.nextToken().trim())[ FD ]
Line_79 $$ int jobThreads = 1-->Line_82 $$ jobThreads = Integer.parseInt(options.get(JOB_THREADS_KEY))[ FD ]
Line_126 $$ if (cfStr != null) -->Line_127 $$ Collection<String> columnFamilies = new HashSet()[ CD ]
Line_127 $$ Collection<String> columnFamilies = new HashSet()-->Line_130 $$ columnFamilies.add(tokenizer.nextToken().trim())[ FD ]
Line_88 $$ Set<Range<Token>> ranges = new HashSet()-->Line_100 $$ ranges.add(new Range(parsedBeginToken, parsedEndToken))[ FD ]
Line_106 $$ Collection<String> dataCenters = new HashSet()-->Line_112 $$ option.getDataCenters().addAll(dataCenters)[ FD ]
Line_103 $$ RepairOption option = new RepairOption(parallelism, primaryRange, incremental, trace, jobThreads, ranges, !ranges.isEmpty())-->Line_132 $$ option.getColumnFamilies().addAll(columnFamilies)[ FD ]
Line_93 $$ while (tokenizer.hasMoreTokens()) -->Line_99 $$ Token parsedEndToken = partitioner.getTokenFactory().fromString(rangeStr[1].trim())[ CD ]
Line_126 $$ if (cfStr != null) -->Line_129 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_116 $$ Collection<String> hosts = new HashSet()-->Line_138 $$ if (primaryRange && (!dataCenters.isEmpty() || !hosts.isEmpty())) [ FD ]
Line_109 $$ while (tokenizer.hasMoreTokens()) -->Line_110 $$ dataCenters.add(tokenizer.nextToken().trim())[ CD ]
Line_129 $$ while (tokenizer.hasMoreTokens()) -->Line_130 $$ columnFamilies.add(tokenizer.nextToken().trim())[ CD ]
Line_116 $$ Collection<String> hosts = new HashSet()-->Line_122 $$ option.getHosts().addAll(hosts)[ FD ]
Line_126 $$ if (cfStr != null) -->Line_132 $$ option.getColumnFamilies().addAll(columnFamilies)[ CD ]
Line_88 $$ Set<Range<Token>> ranges = new HashSet()-->Line_103 $$ RepairOption option = new RepairOption(parallelism, primaryRange, incremental, trace, jobThreads, ranges, !ranges.isEmpty())[ FD ]
Line_92 $$ StringTokenizer tokenizer = new StringTokenizer(rangesStr, ",")-->Line_93 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_92 $$ StringTokenizer tokenizer = new StringTokenizer(rangesStr, ",")-->Line_109 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_93 $$ while (tokenizer.hasMoreTokens()) -->Line_95 $$ if (rangeStr.length < 2) [ CD ]
Line_89 $$ if (rangesStr != null) -->Line_93 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_76 $$ boolean primaryRange = Boolean.parseBoolean(options.get(PRIMARY_RANGE_KEY))-->Line_138 $$ if (primaryRange && (!dataCenters.isEmpty() || !hosts.isEmpty())) [ FD ]
Line_92 $$ StringTokenizer tokenizer = new StringTokenizer(rangesStr, ",")-->Line_120 $$ hosts.add(tokenizer.nextToken().trim())[ FD ]
Line_117 $$ if (hostsStr != null) -->Line_122 $$ option.getHosts().addAll(hosts)[ CD ]
Line_103 $$ RepairOption option = new RepairOption(parallelism, primaryRange, incremental, trace, jobThreads, ranges, !ranges.isEmpty())-->Line_122 $$ option.getHosts().addAll(hosts)[ FD ]
Line_119 $$ while (tokenizer.hasMoreTokens()) -->Line_120 $$ hosts.add(tokenizer.nextToken().trim())[ CD ]
Line_93 $$ while (tokenizer.hasMoreTokens()) -->Line_94 $$ String[] rangeStr = tokenizer.nextToken().split(":", 2)[ CD ]
Line_89 $$ if (rangesStr != null) -->Line_90 $$ if (incremental)[ CD ]
Line_107 $$ if (dataCentersStr != null) -->Line_109 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_92 $$ StringTokenizer tokenizer = new StringTokenizer(rangesStr, ",")-->Line_94 $$ String[] rangeStr = tokenizer.nextToken().split(":", 2)[ FD ]
Line_127 $$ Collection<String> columnFamilies = new HashSet()-->Line_132 $$ option.getColumnFamilies().addAll(columnFamilies)[ FD ]
Line_92 $$ StringTokenizer tokenizer = new StringTokenizer(rangesStr, ",")-->Line_119 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_92 $$ StringTokenizer tokenizer = new StringTokenizer(rangesStr, ",")-->Line_129 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_93 $$ while (tokenizer.hasMoreTokens()) -->Line_100 $$ ranges.add(new Range(parsedBeginToken, parsedEndToken))[ CD ]
Line_89 $$ if (rangesStr != null) -->Line_92 $$ StringTokenizer tokenizer = new StringTokenizer(rangesStr, ",")[ CD ]
Line_116 $$ Collection<String> hosts = new HashSet()-->Line_120 $$ hosts.add(tokenizer.nextToken().trim())[ FD ]
Line_93 $$ while (tokenizer.hasMoreTokens()) -->Line_98 $$ Token parsedBeginToken = partitioner.getTokenFactory().fromString(rangeStr[0].trim())[ CD ]
Line_103 $$ RepairOption option = new RepairOption(parallelism, primaryRange, incremental, trace, jobThreads, ranges, !ranges.isEmpty())-->Line_112 $$ option.getDataCenters().addAll(dataCenters)[ FD ]
Line_106 $$ Collection<String> dataCenters = new HashSet()-->Line_138 $$ if (primaryRange && (!dataCenters.isEmpty() || !hosts.isEmpty())) [ FD ]
Line_106 $$ Collection<String> dataCenters = new HashSet()-->Line_110 $$ dataCenters.add(tokenizer.nextToken().trim())[ FD ]
Line_92 $$ StringTokenizer tokenizer = new StringTokenizer(rangesStr, ",")-->Line_130 $$ columnFamilies.add(tokenizer.nextToken().trim())[ FD ]
