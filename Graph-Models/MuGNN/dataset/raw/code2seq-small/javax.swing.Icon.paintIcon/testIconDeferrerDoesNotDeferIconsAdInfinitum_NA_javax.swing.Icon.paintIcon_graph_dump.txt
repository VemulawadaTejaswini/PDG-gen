Line_2 $$ public void testIconDeferrerDoesNotDeferIconsAdInfinitum() throws IOException -->Line_6 $$ Graphics g = createMockGraphics()[ CD ]
Line_2 $$ public void testIconDeferrerDoesNotDeferIconsAdInfinitum() throws IOException -->Line_12 $$ Icon icon3 = IconUtil.getIcon(file, Iconable.ICON_FLAG_VISIBILITY, getProject())[ CD ]
Line_3 $$ VirtualFile file = createTempFile("txt", null, "hkjh", CharsetToolkit.UTF8_CHARSET)-->Line_11 $$ FileContentUtilCore.reparseFiles(file)[ FD ]
Line_2 $$ public void testIconDeferrerDoesNotDeferIconsAdInfinitum() throws IOException -->Line_13 $$ assertNotSame(icon2, icon3)[ CD ]
Line_3 $$ VirtualFile file = createTempFile("txt", null, "hkjh", CharsetToolkit.UTF8_CHARSET)-->Line_9 $$ Icon icon2 = IconUtil.getIcon(file, Iconable.ICON_FLAG_VISIBILITY, getProject())[ FD ]
Line_2 $$ public void testIconDeferrerDoesNotDeferIconsAdInfinitum() throws IOException -->Line_3 $$ VirtualFile file = createTempFile("txt", null, "hkjh", CharsetToolkit.UTF8_CHARSET)[ CD ]
Line_2 $$ public void testIconDeferrerDoesNotDeferIconsAdInfinitum() throws IOException -->Line_4 $$ Icon icon = IconUtil.getIcon(file, Iconable.ICON_FLAG_VISIBILITY, getProject())[ CD ]
Line_12 $$ Icon icon3 = IconUtil.getIcon(file, Iconable.ICON_FLAG_VISIBILITY, getProject())-->Line_13 $$ assertNotSame(icon2, icon3)[ FD ]
Line_6 $$ Graphics g = createMockGraphics()-->Line_7 $$ icon.paintIcon(new JLabel(), g, 0, 0)[ FD ]
Line_2 $$ public void testIconDeferrerDoesNotDeferIconsAdInfinitum() throws IOException -->Line_9 $$ Icon icon2 = IconUtil.getIcon(file, Iconable.ICON_FLAG_VISIBILITY, getProject())[ CD ]
Line_9 $$ Icon icon2 = IconUtil.getIcon(file, Iconable.ICON_FLAG_VISIBILITY, getProject())-->Line_10 $$ assertSame(icon, icon2)[ FD ]
Line_2 $$ public void testIconDeferrerDoesNotDeferIconsAdInfinitum() throws IOException -->Line_5 $$ assertTrue(icon instanceof DeferredIcon)[ CD ]
Line_4 $$ Icon icon = IconUtil.getIcon(file, Iconable.ICON_FLAG_VISIBILITY, getProject())-->Line_7 $$ icon.paintIcon(new JLabel(), g, 0, 0)[ FD ]
Line_2 $$ public void testIconDeferrerDoesNotDeferIconsAdInfinitum() throws IOException -->Line_10 $$ assertSame(icon, icon2)[ CD ]
Line_9 $$ Icon icon2 = IconUtil.getIcon(file, Iconable.ICON_FLAG_VISIBILITY, getProject())-->Line_13 $$ assertNotSame(icon2, icon3)[ FD ]
Line_2 $$ public void testIconDeferrerDoesNotDeferIconsAdInfinitum() throws IOException -->Line_7 $$ icon.paintIcon(new JLabel(), g, 0, 0)[ CD ]
Line_3 $$ VirtualFile file = createTempFile("txt", null, "hkjh", CharsetToolkit.UTF8_CHARSET)-->Line_4 $$ Icon icon = IconUtil.getIcon(file, Iconable.ICON_FLAG_VISIBILITY, getProject())[ FD ]
Line_4 $$ Icon icon = IconUtil.getIcon(file, Iconable.ICON_FLAG_VISIBILITY, getProject())-->Line_10 $$ assertSame(icon, icon2)[ FD ]
Line_2 $$ public void testIconDeferrerDoesNotDeferIconsAdInfinitum() throws IOException -->Line_8 $$ TimeoutUtil.sleep(1000)[ CD ]
Line_2 $$ public void testIconDeferrerDoesNotDeferIconsAdInfinitum() throws IOException -->Line_11 $$ FileContentUtilCore.reparseFiles(file)[ CD ]
Line_3 $$ VirtualFile file = createTempFile("txt", null, "hkjh", CharsetToolkit.UTF8_CHARSET)-->Line_12 $$ Icon icon3 = IconUtil.getIcon(file, Iconable.ICON_FLAG_VISIBILITY, getProject())[ FD ]
