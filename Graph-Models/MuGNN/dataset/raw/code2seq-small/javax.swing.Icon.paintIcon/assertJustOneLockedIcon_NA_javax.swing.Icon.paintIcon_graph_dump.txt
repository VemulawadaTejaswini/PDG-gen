Line_2 $$ private void assertJustOneLockedIcon(VirtualFile file) throws IOException -->Line_11 $$ Icon icon = IconUtil.getIcon(file, -1, getProject())[ FD ]
Line_16 $$ List<Icon> icons = autopsyIconsFrom(icon)-->Line_17 $$ assertOneElement(ContainerUtil.filter(icons,  ic -> ic == PlatformIcons.LOCKED_ICON))[ FD ]
Line_11 $$ Icon icon = IconUtil.getIcon(file, -1, getProject())-->Line_12 $$ icon.paintIcon(new JLabel(), createMockGraphics(), 0, 0)[ FD ]
Line_2 $$ private void assertJustOneLockedIcon(VirtualFile file) throws IOException -->Line_8 $$ UIUtil.dispatchAllInvocationEvents()[ CD ]
Line_2 $$ private void assertJustOneLockedIcon(VirtualFile file) throws IOException -->Line_3 $$ WriteCommandAction.runWriteCommandAction(getProject(), (ThrowableComputable<Void, IOException>) () -> [ CD ]
Line_2 $$ private void assertJustOneLockedIcon(VirtualFile file) throws IOException -->Line_5 $$ file.setWritable(false)[ FD ]
Line_11 $$ Icon icon = IconUtil.getIcon(file, -1, getProject())-->Line_16 $$ List<Icon> icons = autopsyIconsFrom(icon)[ FD ]
Line_2 $$ private void assertJustOneLockedIcon(VirtualFile file) throws IOException -->Line_4 $$ file.setBinaryContent("class X [ FD ]
Line_2 $$ private void assertJustOneLockedIcon(VirtualFile file) throws IOException -->Line_20 $$ file.setWritable(true)[ FD ]
Line_2 $$ private void assertJustOneLockedIcon(VirtualFile file) throws IOException -->Line_9 $$ UIUtil.dispatchAllInvocationEvents()[ CD ]
