Line_5 $$ int oldTrackerValue-->Line_14 $$ if (wasteTrackerUpdater.compareAndSet(this, oldTrackerValue, avoidReservedValues(time + delta)))[ FD ]
Line_5 $$ int oldTrackerValue-->Line_6 $$ while (TRACKER_PESSIMISTIC_LOCKING != (oldTrackerValue = wasteTracker)) [ FD ]
Line_2 $$ private boolean updateWastedAllocationTracker(long wastedBytes) -->Line_18 $$ wasteTrackerUpdater.set(this, TRACKER_PESSIMISTIC_LOCKING)[ CD ]
Line_11 $$ delta += wastedAllocation-->Line_12 $$ if (delta >= 0)[ FD ]
Line_8 $$ int delta = oldTrackerValue - time-->Line_10 $$ delta = -EXCESS_WASTE_OFFSET[ FD ]
Line_6 $$ while (TRACKER_PESSIMISTIC_LOCKING != (oldTrackerValue = wasteTracker)) -->Line_14 $$ if (wasteTrackerUpdater.compareAndSet(this, oldTrackerValue, avoidReservedValues(time + delta)))[ CD ]
Line_8 $$ int delta = oldTrackerValue - time-->Line_12 $$ if (delta >= 0)[ FD ]
Line_9 $$ if (oldTrackerValue == TRACKER_NEVER_WASTED || delta >= 0 || delta < -EXCESS_WASTE_OFFSET)-->Line_10 $$ delta = -EXCESS_WASTE_OFFSET[ CD ]
Line_6 $$ while (TRACKER_PESSIMISTIC_LOCKING != (oldTrackerValue = wasteTracker)) -->Line_12 $$ if (delta >= 0)[ CD ]
Line_14 $$ if (wasteTrackerUpdater.compareAndSet(this, oldTrackerValue, avoidReservedValues(time + delta)))-->Line_15 $$ return false[ CD ]
Line_2 $$ private boolean updateWastedAllocationTracker(long wastedBytes) -->Line_3 $$ if (wastedBytes < EXCESS_WASTE_BYTES) [ CD ]
Line_2 $$ private boolean updateWastedAllocationTracker(long wastedBytes) -->Line_19 $$ return true[ CD ]
Line_3 $$ if (wastedBytes < EXCESS_WASTE_BYTES) -->Line_4 $$ int wastedAllocation = ((int) (wastedBytes + ALLOCATION_GRANULARITY_BYTES - 1)) / ALLOCATION_GRANULARITY_BYTES[ CD ]
Line_3 $$ if (wastedBytes < EXCESS_WASTE_BYTES) -->Line_5 $$ int oldTrackerValue[ CD ]
Line_6 $$ while (TRACKER_PESSIMISTIC_LOCKING != (oldTrackerValue = wasteTracker)) -->Line_9 $$ if (oldTrackerValue == TRACKER_NEVER_WASTED || delta >= 0 || delta < -EXCESS_WASTE_OFFSET)[ CD ]
Line_4 $$ int wastedAllocation = ((int) (wastedBytes + ALLOCATION_GRANULARITY_BYTES - 1)) / ALLOCATION_GRANULARITY_BYTES-->Line_11 $$ delta += wastedAllocation[ FD ]
Line_6 $$ while (TRACKER_PESSIMISTIC_LOCKING != (oldTrackerValue = wasteTracker)) -->Line_8 $$ int delta = oldTrackerValue - time[ CD ]
Line_3 $$ if (wastedBytes < EXCESS_WASTE_BYTES) -->Line_6 $$ while (TRACKER_PESSIMISTIC_LOCKING != (oldTrackerValue = wasteTracker)) [ CD ]
Line_10 $$ delta = -EXCESS_WASTE_OFFSET-->Line_11 $$ delta += wastedAllocation[ FD ]
Line_10 $$ delta = -EXCESS_WASTE_OFFSET-->Line_12 $$ if (delta >= 0)[ FD ]
Line_6 $$ while (TRACKER_PESSIMISTIC_LOCKING != (oldTrackerValue = wasteTracker)) -->Line_7 $$ int time = (int) (System.nanoTime() >>> CLOCK_SHIFT)[ CD ]
Line_6 $$ while (TRACKER_PESSIMISTIC_LOCKING != (oldTrackerValue = wasteTracker)) -->Line_14 $$ if (wasteTrackerUpdater.compareAndSet(this, oldTrackerValue, avoidReservedValues(time + delta)))[ FD ]
Line_2 $$ private boolean updateWastedAllocationTracker(long wastedBytes) -->Line_3 $$ if (wastedBytes < EXCESS_WASTE_BYTES) [ FD ]
Line_8 $$ int delta = oldTrackerValue - time-->Line_11 $$ delta += wastedAllocation[ FD ]
Line_6 $$ while (TRACKER_PESSIMISTIC_LOCKING != (oldTrackerValue = wasteTracker)) -->Line_11 $$ delta += wastedAllocation[ CD ]
