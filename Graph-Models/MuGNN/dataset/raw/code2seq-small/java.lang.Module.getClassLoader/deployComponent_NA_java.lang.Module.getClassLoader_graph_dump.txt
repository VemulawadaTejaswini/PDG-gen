Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_17 $$ deploymentUnit.addToAttachmentList(org.jboss.as.server.deployment.Attachments.DEPLOYMENT_COMPLETE_SERVICES, startServiceName)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_87 $$ createBuilder.install()[ CD ]
Line_12 $$ final BasicComponentCreateService createService = configuration.getComponentCreateServiceFactory().constructService(configuration)-->Line_13 $$ final ServiceBuilder<Component> createBuilder = serviceTarget.addService(createServiceName, createService)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_29 $$ startBuilder.addDependency(bindingDependencyService)[ FD ]
Line_32 $$ final NamingStoreService contextService = new NamingStoreService(true)-->Line_33 $$ serviceTarget.addService(configuration.getComponentDescription().getContextServiceName(), contextService).install()[ FD ]
Line_13 $$ final ServiceBuilder<Component> createBuilder = serviceTarget.addService(createServiceName, createService)-->Line_14 $$ createBuilder.addDependency(deploymentUnit.getServiceName(), DeploymentUnit.class, createService.getDeploymentUnitInjector())[ FD ]
Line_61 $$ new ClassDescriptionTraversal(configuration.getComponentClass(), applicationClasses) -->Line_79 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_4 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_79 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_4 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_33 $$ serviceTarget.addService(configuration.getComponentDescription().getContextServiceName(), contextService).install()[ FD ]
Line_41 $$ for (final DependencyConfigurator<ViewService> depConfig : viewConfiguration.getDependencies()) -->Line_42 $$ depConfig.configureDependency(componentViewServiceBuilder, viewService)[ FD ]
Line_38 $$ final ViewService viewService = new ViewService(viewConfiguration)-->Line_42 $$ depConfig.configureDependency(componentViewServiceBuilder, viewService)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_10 $$ final ServiceName createServiceName = configuration.getComponentDescription().getCreateServiceName()[ FD ]
Line_18 $$ ServiceName jndiDepServiceName = configuration.getComponentDescription().getServiceName().append(JNDI_BINDINGS_SERVICE)-->Line_20 $$ jndiDependencies.add(jndiDepServiceName)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_7 $$ final String componentName = configuration.getComponentName()[ CD ]
Line_19 $$ final ServiceBuilder<Void> jndiDepServiceBuilder = serviceTarget.addService(jndiDepServiceName, Service.NULL)-->Line_50 $$ jndiDepServiceBuilder.addDependency(bindInfo.getBinderServiceName())[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_20 $$ jndiDependencies.add(jndiDepServiceName)[ CD ]
Line_46 $$ for (BindingConfiguration bindingConfiguration : viewConfiguration.getBindingConfigurations()) -->Line_52 $$ bindingConfiguration.getSource().getResourceValue(resolutionContext, serviceBuilder, phaseContext, service.getManagedObjectInjector())[ FD ]
Line_16 $$ final ServiceBuilder<Component> startBuilder = serviceTarget.addService(startServiceName, startService)-->Line_28 $$ Services.addServerExecutorDependency(startBuilder, startService.getExecutorInjector(), false)[ FD ]
Line_78 $$ if (classDescription != null) -->Line_79 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ CD ]
Line_76 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_79 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_79 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_6 $$ final String moduleName = configuration.getModuleName()[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_12 $$ final BasicComponentCreateService createService = configuration.getComponentCreateServiceFactory().constructService(configuration)[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_14 $$ createBuilder.addDependency(deploymentUnit.getServiceName(), DeploymentUnit.class, createService.getDeploymentUnitInjector())[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_57 $$ if (configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE) [ FD ]
Line_39 $$ final ServiceBuilder<ComponentView> componentViewServiceBuilder = serviceTarget.addService(serviceName, viewService)-->Line_40 $$ componentViewServiceBuilder.addDependency(createServiceName, Component.class, viewService.getComponentInjector())[ FD ]
Line_58 $$ final Set<ServiceName> bound = new HashSet<ServiceName>()-->Line_79 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_19 $$ final ServiceBuilder<Void> jndiDepServiceBuilder = serviceTarget.addService(jndiDepServiceName, Service.NULL)-->Line_59 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, configuration.getComponentDescription().getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_39 $$ final ServiceBuilder<ComponentView> componentViewServiceBuilder = serviceTarget.addService(serviceName, viewService)-->Line_42 $$ depConfig.configureDependency(componentViewServiceBuilder, viewService)[ FD ]
Line_4 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_51 $$ ServiceBuilder<ManagedReferenceFactory> serviceBuilder = serviceTarget.addService(bindInfo.getBinderServiceName(), service)[ FD ]
Line_12 $$ final BasicComponentCreateService createService = configuration.getComponentCreateServiceFactory().constructService(configuration)-->Line_22 $$ configurator.configureDependency(createBuilder, createService)[ FD ]
Line_21 $$ for (DependencyConfigurator configurator : configuration.getCreateDependencies()) -->Line_25 $$ configurator.configureDependency(startBuilder, startService)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_88 $$ startBuilder.install()[ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_16 $$ final ServiceBuilder<Component> startBuilder = serviceTarget.addService(startServiceName, startService)[ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_7 $$ final String componentName = configuration.getComponentName()[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_59 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, configuration.getComponentDescription().getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ FD ]
Line_4 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_59 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, configuration.getComponentDescription().getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_5 $$ final String applicationName = configuration.getApplicationName()[ CD ]
Line_60 $$ if (!MetadataCompleteMarker.isMetadataComplete(phaseContext.getDeploymentUnit())) -->Line_61 $$ new ClassDescriptionTraversal(configuration.getComponentClass(), applicationClasses) [ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_35 $$ final InjectionSource.ResolutionContext resolutionContext = new InjectionSource.ResolutionContext(configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.USE_MODULE, configuration.getComponentName(), configuration.getModuleName(), configuration.getApplicationName())[ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_31 $$ if (configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE) [ CD ]
Line_10 $$ final ServiceName createServiceName = configuration.getComponentDescription().getCreateServiceName()-->Line_40 $$ componentViewServiceBuilder.addDependency(createServiceName, Component.class, viewService.getComponentInjector())[ FD ]
Line_31 $$ if (configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE) -->Line_32 $$ final NamingStoreService contextService = new NamingStoreService(true)[ CD ]
Line_48 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, bindingName)-->Line_53 $$ serviceBuilder.addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, service.getNamingStoreInjector())[ FD ]
Line_48 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, bindingName)-->Line_51 $$ ServiceBuilder<ManagedReferenceFactory> serviceBuilder = serviceTarget.addService(bindInfo.getBinderServiceName(), service)[ FD ]
Line_48 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, bindingName)-->Line_50 $$ jndiDepServiceBuilder.addDependency(bindInfo.getBinderServiceName())[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_35 $$ final InjectionSource.ResolutionContext resolutionContext = new InjectionSource.ResolutionContext(configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.USE_MODULE, configuration.getComponentName(), configuration.getModuleName(), configuration.getApplicationName())[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_24 $$ for (DependencyConfigurator configurator : configuration.getStartDependencies()) [ FD ]
Line_51 $$ ServiceBuilder<ManagedReferenceFactory> serviceBuilder = serviceTarget.addService(bindInfo.getBinderServiceName(), service)-->Line_53 $$ serviceBuilder.addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, service.getNamingStoreInjector())[ FD ]
Line_6 $$ final String moduleName = configuration.getModuleName()-->Line_48 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, bindingName)[ FD ]
Line_47 $$ final String bindingName = bindingConfiguration.getName()-->Line_48 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, bindingName)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_6 $$ final String moduleName = configuration.getModuleName()[ CD ]
Line_76 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_78 $$ if (classDescription != null) [ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_14 $$ createBuilder.addDependency(deploymentUnit.getServiceName(), DeploymentUnit.class, createService.getDeploymentUnitInjector())[ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_36 $$ for (ViewConfiguration viewConfiguration : configuration.getViews()) [ FD ]
Line_4 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_39 $$ final ServiceBuilder<ComponentView> componentViewServiceBuilder = serviceTarget.addService(serviceName, viewService)[ FD ]
Line_19 $$ final ServiceBuilder<Void> jndiDepServiceBuilder = serviceTarget.addService(jndiDepServiceName, Service.NULL)-->Line_64 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ CD ]
Line_15 $$ final ComponentStartService startService = new ComponentStartService()-->Line_16 $$ final ServiceBuilder<Component> startBuilder = serviceTarget.addService(startServiceName, startService)[ FD ]
Line_49 $$ final BinderService service = new BinderService(bindInfo.getBindName(), bindingConfiguration.getSource())-->Line_53 $$ serviceBuilder.addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, service.getNamingStoreInjector())[ FD ]
Line_12 $$ final BasicComponentCreateService createService = configuration.getComponentCreateServiceFactory().constructService(configuration)-->Line_14 $$ createBuilder.addDependency(deploymentUnit.getServiceName(), DeploymentUnit.class, createService.getDeploymentUnitInjector())[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_73 $$ throw EeLogger.ROOT_LOGGER.cannotLoadInterceptor(e, interceptor.getInterceptorClassName(), configuration.getComponentClass())[ FD ]
Line_36 $$ for (ViewConfiguration viewConfiguration : configuration.getViews()) -->Line_37 $$ final ServiceName serviceName = viewConfiguration.getViewServiceName()[ FD ]
Line_49 $$ final BinderService service = new BinderService(bindInfo.getBindName(), bindingConfiguration.getSource())-->Line_52 $$ bindingConfiguration.getSource().getResourceValue(resolutionContext, serviceBuilder, phaseContext, service.getManagedObjectInjector())[ FD ]
Line_16 $$ final ServiceBuilder<Component> startBuilder = serviceTarget.addService(startServiceName, startService)-->Line_29 $$ startBuilder.addDependency(bindingDependencyService)[ FD ]
Line_16 $$ final ServiceBuilder<Component> startBuilder = serviceTarget.addService(startServiceName, startService)-->Line_27 $$ startBuilder.addDependency(createServiceName, BasicComponent.class, startService.getComponentInjector())[ FD ]
Line_35 $$ final InjectionSource.ResolutionContext resolutionContext = new InjectionSource.ResolutionContext(configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.USE_MODULE, configuration.getComponentName(), configuration.getModuleName(), configuration.getApplicationName())-->Line_64 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_16 $$ final ServiceBuilder<Component> startBuilder = serviceTarget.addService(startServiceName, startService)-->Line_88 $$ startBuilder.install()[ FD ]
Line_51 $$ ServiceBuilder<ManagedReferenceFactory> serviceBuilder = serviceTarget.addService(bindInfo.getBinderServiceName(), service)-->Line_54 $$ serviceBuilder.install()[ FD ]
Line_61 $$ new ClassDescriptionTraversal(configuration.getComponentClass(), applicationClasses) -->Line_63 $$ if (classDescription != null) [ FD ]
Line_49 $$ final BinderService service = new BinderService(bindInfo.getBindName(), bindingConfiguration.getSource())-->Line_51 $$ ServiceBuilder<ManagedReferenceFactory> serviceBuilder = serviceTarget.addService(bindInfo.getBinderServiceName(), service)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_18 $$ ServiceName jndiDepServiceName = configuration.getComponentDescription().getServiceName().append(JNDI_BINDINGS_SERVICE)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_57 $$ if (configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE) [ CD ]
Line_13 $$ final ServiceBuilder<Component> createBuilder = serviceTarget.addService(createServiceName, createService)-->Line_87 $$ createBuilder.install()[ FD ]
Line_35 $$ final InjectionSource.ResolutionContext resolutionContext = new InjectionSource.ResolutionContext(configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.USE_MODULE, configuration.getComponentName(), configuration.getModuleName(), configuration.getApplicationName())-->Line_52 $$ bindingConfiguration.getSource().getResourceValue(resolutionContext, serviceBuilder, phaseContext, service.getManagedObjectInjector())[ FD ]
Line_4 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_16 $$ final ServiceBuilder<Component> startBuilder = serviceTarget.addService(startServiceName, startService)[ FD ]
Line_57 $$ if (configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE) -->Line_59 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, configuration.getComponentDescription().getBindingConfigurations(), jndiDepServiceBuilder, bound)[ CD ]
Line_61 $$ new ClassDescriptionTraversal(configuration.getComponentClass(), applicationClasses) -->Line_64 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_31 $$ if (configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE) [ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_10 $$ final ServiceName createServiceName = configuration.getComponentDescription().getCreateServiceName()[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_8 $$ final EEApplicationClasses applicationClasses = deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION)[ FD ]
Line_36 $$ for (ViewConfiguration viewConfiguration : configuration.getViews()) -->Line_41 $$ for (final DependencyConfigurator<ViewService> depConfig : viewConfiguration.getDependencies()) [ FD ]
Line_9 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)-->Line_71 $$ interceptorClass = module.getClassLoader().loadClass(interceptor.getInterceptorClassName())[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_17 $$ deploymentUnit.addToAttachmentList(org.jboss.as.server.deployment.Attachments.DEPLOYMENT_COMPLETE_SERVICES, startServiceName)[ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_4 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()[ CD ]
Line_18 $$ ServiceName jndiDepServiceName = configuration.getComponentDescription().getServiceName().append(JNDI_BINDINGS_SERVICE)-->Line_19 $$ final ServiceBuilder<Void> jndiDepServiceBuilder = serviceTarget.addService(jndiDepServiceName, Service.NULL)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_21 $$ for (DependencyConfigurator configurator : configuration.getCreateDependencies()) [ FD ]
Line_61 $$ new ClassDescriptionTraversal(configuration.getComponentClass(), applicationClasses) -->Line_78 $$ if (classDescription != null) [ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_13 $$ final ServiceBuilder<Component> createBuilder = serviceTarget.addService(createServiceName, createService)[ CD ]
Line_58 $$ final Set<ServiceName> bound = new HashSet<ServiceName>()-->Line_59 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, configuration.getComponentDescription().getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_5 $$ final String applicationName = configuration.getApplicationName()-->Line_48 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, bindingName)[ FD ]
Line_10 $$ final ServiceName createServiceName = configuration.getComponentDescription().getCreateServiceName()-->Line_27 $$ startBuilder.addDependency(createServiceName, BasicComponent.class, startService.getComponentInjector())[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_30 $$ final ServiceName contextServiceName[ CD ]
Line_19 $$ final ServiceBuilder<Void> jndiDepServiceBuilder = serviceTarget.addService(jndiDepServiceName, Service.NULL)-->Line_89 $$ jndiDepServiceBuilder.install()[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_5 $$ final String applicationName = configuration.getApplicationName()[ FD ]
Line_46 $$ for (BindingConfiguration bindingConfiguration : viewConfiguration.getBindingConfigurations()) -->Line_49 $$ final BinderService service = new BinderService(bindInfo.getBindName(), bindingConfiguration.getSource())[ FD ]
Line_57 $$ if (configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE) -->Line_58 $$ final Set<ServiceName> bound = new HashSet<ServiceName>()[ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_64 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_68 $$ for (InterceptorDescription interceptor : configuration.getComponentDescription().getAllInterceptors()) [ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_28 $$ Services.addServerExecutorDependency(startBuilder, startService.getExecutorInjector(), false)[ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_18 $$ ServiceName jndiDepServiceName = configuration.getComponentDescription().getServiceName().append(JNDI_BINDINGS_SERVICE)[ CD ]
Line_61 $$ new ClassDescriptionTraversal(configuration.getComponentClass(), applicationClasses) -->Line_63 $$ if (classDescription != null) [ CD ]
Line_11 $$ final ServiceName startServiceName = configuration.getComponentDescription().getStartServiceName()-->Line_16 $$ final ServiceBuilder<Component> startBuilder = serviceTarget.addService(startServiceName, startService)[ FD ]
Line_76 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) -->Line_78 $$ if (classDescription != null) [ CD ]
Line_31 $$ if (configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE) -->Line_33 $$ serviceTarget.addService(configuration.getComponentDescription().getContextServiceName(), contextService).install()[ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_60 $$ if (!MetadataCompleteMarker.isMetadataComplete(phaseContext.getDeploymentUnit())) [ FD ]
Line_7 $$ final String componentName = configuration.getComponentName()-->Line_48 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, bindingName)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_15 $$ final ComponentStartService startService = new ComponentStartService()[ CD ]
Line_19 $$ final ServiceBuilder<Void> jndiDepServiceBuilder = serviceTarget.addService(jndiDepServiceName, Service.NULL)-->Line_79 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_4 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_13 $$ final ServiceBuilder<Component> createBuilder = serviceTarget.addService(createServiceName, createService)[ FD ]
Line_75 $$ if (interceptorClass != null) -->Line_76 $$ new ClassDescriptionTraversal(interceptorClass, applicationClasses) [ CD ]
Line_39 $$ final ServiceBuilder<ComponentView> componentViewServiceBuilder = serviceTarget.addService(serviceName, viewService)-->Line_44 $$ componentViewServiceBuilder.install()[ FD ]
Line_63 $$ if (classDescription != null) -->Line_64 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_11 $$ final ServiceName startServiceName = configuration.getComponentDescription().getStartServiceName()[ CD ]
Line_57 $$ if (configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE) -->Line_60 $$ if (!MetadataCompleteMarker.isMetadataComplete(phaseContext.getDeploymentUnit())) [ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_4 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_29 $$ startBuilder.addDependency(bindingDependencyService)[ CD ]
Line_58 $$ final Set<ServiceName> bound = new HashSet<ServiceName>()-->Line_64 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_15 $$ final ComponentStartService startService = new ComponentStartService()-->Line_25 $$ configurator.configureDependency(startBuilder, startService)[ FD ]
Line_10 $$ final ServiceName createServiceName = configuration.getComponentDescription().getCreateServiceName()-->Line_13 $$ final ServiceBuilder<Component> createBuilder = serviceTarget.addService(createServiceName, createService)[ FD ]
Line_15 $$ final ComponentStartService startService = new ComponentStartService()-->Line_27 $$ startBuilder.addDependency(createServiceName, BasicComponent.class, startService.getComponentInjector())[ FD ]
Line_15 $$ final ComponentStartService startService = new ComponentStartService()-->Line_28 $$ Services.addServerExecutorDependency(startBuilder, startService.getExecutorInjector(), false)[ FD ]
Line_4 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_19 $$ final ServiceBuilder<Void> jndiDepServiceBuilder = serviceTarget.addService(jndiDepServiceName, Service.NULL)[ FD ]
Line_37 $$ final ServiceName serviceName = viewConfiguration.getViewServiceName()-->Line_45 $$ startBuilder.addDependency(serviceName)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_61 $$ new ClassDescriptionTraversal(configuration.getComponentClass(), applicationClasses) [ FD ]
Line_13 $$ final ServiceBuilder<Component> createBuilder = serviceTarget.addService(createServiceName, createService)-->Line_22 $$ configurator.configureDependency(createBuilder, createService)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_11 $$ final ServiceName startServiceName = configuration.getComponentDescription().getStartServiceName()[ FD ]
Line_16 $$ final ServiceBuilder<Component> startBuilder = serviceTarget.addService(startServiceName, startService)-->Line_45 $$ startBuilder.addDependency(serviceName)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_52 $$ bindingConfiguration.getSource().getResourceValue(resolutionContext, serviceBuilder, phaseContext, service.getManagedObjectInjector())[ FD ]
Line_4 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_64 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_21 $$ for (DependencyConfigurator configurator : configuration.getCreateDependencies()) -->Line_22 $$ configurator.configureDependency(createBuilder, createService)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_9 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)[ FD ]
Line_11 $$ final ServiceName startServiceName = configuration.getComponentDescription().getStartServiceName()-->Line_17 $$ deploymentUnit.addToAttachmentList(org.jboss.as.server.deployment.Attachments.DEPLOYMENT_COMPLETE_SERVICES, startServiceName)[ FD ]
Line_48 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(applicationName, moduleName, componentName, bindingName)-->Line_49 $$ final BinderService service = new BinderService(bindInfo.getBindName(), bindingConfiguration.getSource())[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_20 $$ jndiDependencies.add(jndiDepServiceName)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_19 $$ final ServiceBuilder<Void> jndiDepServiceBuilder = serviceTarget.addService(jndiDepServiceName, Service.NULL)[ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_12 $$ final BasicComponentCreateService createService = configuration.getComponentCreateServiceFactory().constructService(configuration)[ FD ]
Line_16 $$ final ServiceBuilder<Component> startBuilder = serviceTarget.addService(startServiceName, startService)-->Line_25 $$ configurator.configureDependency(startBuilder, startService)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_27 $$ startBuilder.addDependency(createServiceName, BasicComponent.class, startService.getComponentInjector())[ CD ]
Line_35 $$ final InjectionSource.ResolutionContext resolutionContext = new InjectionSource.ResolutionContext(configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.USE_MODULE, configuration.getComponentName(), configuration.getModuleName(), configuration.getApplicationName())-->Line_79 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, classDescription.getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_89 $$ jndiDepServiceBuilder.install()[ CD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_9 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)[ CD ]
Line_38 $$ final ViewService viewService = new ViewService(viewConfiguration)-->Line_39 $$ final ServiceBuilder<ComponentView> componentViewServiceBuilder = serviceTarget.addService(serviceName, viewService)[ FD ]
Line_38 $$ final ViewService viewService = new ViewService(viewConfiguration)-->Line_40 $$ componentViewServiceBuilder.addDependency(createServiceName, Component.class, viewService.getComponentInjector())[ FD ]
Line_36 $$ for (ViewConfiguration viewConfiguration : configuration.getViews()) -->Line_46 $$ for (BindingConfiguration bindingConfiguration : viewConfiguration.getBindingConfigurations()) [ FD ]
Line_51 $$ ServiceBuilder<ManagedReferenceFactory> serviceBuilder = serviceTarget.addService(bindInfo.getBinderServiceName(), service)-->Line_52 $$ bindingConfiguration.getSource().getResourceValue(resolutionContext, serviceBuilder, phaseContext, service.getManagedObjectInjector())[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_8 $$ final EEApplicationClasses applicationClasses = deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION)[ CD ]
Line_37 $$ final ServiceName serviceName = viewConfiguration.getViewServiceName()-->Line_39 $$ final ServiceBuilder<ComponentView> componentViewServiceBuilder = serviceTarget.addService(serviceName, viewService)[ FD ]
Line_2 $$ protected void deployComponent(final DeploymentPhaseContext phaseContext, final ComponentConfiguration configuration, final List<ServiceName> jndiDependencies, final ServiceName bindingDependencyService) throws DeploymentUnitProcessingException -->Line_33 $$ serviceTarget.addService(configuration.getComponentDescription().getContextServiceName(), contextService).install()[ FD ]
Line_35 $$ final InjectionSource.ResolutionContext resolutionContext = new InjectionSource.ResolutionContext(configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.USE_MODULE, configuration.getComponentName(), configuration.getModuleName(), configuration.getApplicationName())-->Line_59 $$ processBindings(phaseContext, configuration, serviceTarget, resolutionContext, configuration.getComponentDescription().getBindingConfigurations(), jndiDepServiceBuilder, bound)[ FD ]
Line_46 $$ for (BindingConfiguration bindingConfiguration : viewConfiguration.getBindingConfigurations()) -->Line_47 $$ final String bindingName = bindingConfiguration.getName()[ FD ]
